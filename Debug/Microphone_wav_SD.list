
Microphone_wav_SD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001380c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000aa388  080139e0  080139e0  000149e0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080bdd68  080bdd68  000bf9d4  2**0
                  CONTENTS
  4 .ARM          00000008  080bdd68  080bdd68  000bed68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080bdd70  080bdd70  000bf9d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080bdd70  080bdd70  000bed70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080bdd74  080bdd74  000bed74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000009d4  20000000  080bdd78  000bf000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005404  200009d4  080be74c  000bf9d4  2**2
                  ALLOC
 10 ._user_heap_stack 0000d000  20005dd8  080be74c  000bfdd8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000bf9d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fa3f  00000000  00000000  000bfa04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ce0  00000000  00000000  000df443  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018e0  00000000  00000000  000e4128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012f8  00000000  00000000  000e5a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d271  00000000  00000000  000e6d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000237ea  00000000  00000000  00113f71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00103dbb  00000000  00000000  0013775b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  0023b516  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000074d0  00000000  00000000  0023b59c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00242a6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200009d4 	.word	0x200009d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080139c4 	.word	0x080139c4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200009d8 	.word	0x200009d8
 800020c:	080139c4 	.word	0x080139c4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96a 	b.w	8000ed4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	460c      	mov	r4, r1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d14e      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c24:	4694      	mov	ip, r2
 8000c26:	458c      	cmp	ip, r1
 8000c28:	4686      	mov	lr, r0
 8000c2a:	fab2 f282 	clz	r2, r2
 8000c2e:	d962      	bls.n	8000cf6 <__udivmoddi4+0xde>
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0320 	rsb	r3, r2, #32
 8000c36:	4091      	lsls	r1, r2
 8000c38:	fa20 f303 	lsr.w	r3, r0, r3
 8000c3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c40:	4319      	orrs	r1, r3
 8000c42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4a:	fa1f f68c 	uxth.w	r6, ip
 8000c4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c56:	fb07 1114 	mls	r1, r7, r4, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb04 f106 	mul.w	r1, r4, r6
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c6e:	f080 8112 	bcs.w	8000e96 <__udivmoddi4+0x27e>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 810f 	bls.w	8000e96 <__udivmoddi4+0x27e>
 8000c78:	3c02      	subs	r4, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a59      	subs	r1, r3, r1
 8000c7e:	fa1f f38e 	uxth.w	r3, lr
 8000c82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c86:	fb07 1110 	mls	r1, r7, r0, r1
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb00 f606 	mul.w	r6, r0, r6
 8000c92:	429e      	cmp	r6, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x94>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c9e:	f080 80fc 	bcs.w	8000e9a <__udivmoddi4+0x282>
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	f240 80f9 	bls.w	8000e9a <__udivmoddi4+0x282>
 8000ca8:	4463      	add	r3, ip
 8000caa:	3802      	subs	r0, #2
 8000cac:	1b9b      	subs	r3, r3, r6
 8000cae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	b11d      	cbz	r5, 8000cbe <__udivmoddi4+0xa6>
 8000cb6:	40d3      	lsrs	r3, r2
 8000cb8:	2200      	movs	r2, #0
 8000cba:	e9c5 3200 	strd	r3, r2, [r5]
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d905      	bls.n	8000cd2 <__udivmoddi4+0xba>
 8000cc6:	b10d      	cbz	r5, 8000ccc <__udivmoddi4+0xb4>
 8000cc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e7f5      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cd2:	fab3 f183 	clz	r1, r3
 8000cd6:	2900      	cmp	r1, #0
 8000cd8:	d146      	bne.n	8000d68 <__udivmoddi4+0x150>
 8000cda:	42a3      	cmp	r3, r4
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xcc>
 8000cde:	4290      	cmp	r0, r2
 8000ce0:	f0c0 80f0 	bcc.w	8000ec4 <__udivmoddi4+0x2ac>
 8000ce4:	1a86      	subs	r6, r0, r2
 8000ce6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	2d00      	cmp	r5, #0
 8000cee:	d0e6      	beq.n	8000cbe <__udivmoddi4+0xa6>
 8000cf0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cf4:	e7e3      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	f040 8090 	bne.w	8000e1c <__udivmoddi4+0x204>
 8000cfc:	eba1 040c 	sub.w	r4, r1, ip
 8000d00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d04:	fa1f f78c 	uxth.w	r7, ip
 8000d08:	2101      	movs	r1, #1
 8000d0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb08 4416 	mls	r4, r8, r6, r4
 8000d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1a:	fb07 f006 	mul.w	r0, r7, r6
 8000d1e:	4298      	cmp	r0, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x11c>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x11a>
 8000d2c:	4298      	cmp	r0, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000d32:	4626      	mov	r6, r4
 8000d34:	1a1c      	subs	r4, r3, r0
 8000d36:	fa1f f38e 	uxth.w	r3, lr
 8000d3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d46:	fb00 f707 	mul.w	r7, r0, r7
 8000d4a:	429f      	cmp	r7, r3
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0x148>
 8000d4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d52:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x146>
 8000d58:	429f      	cmp	r7, r3
 8000d5a:	f200 80b0 	bhi.w	8000ebe <__udivmoddi4+0x2a6>
 8000d5e:	4620      	mov	r0, r4
 8000d60:	1bdb      	subs	r3, r3, r7
 8000d62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d66:	e7a5      	b.n	8000cb4 <__udivmoddi4+0x9c>
 8000d68:	f1c1 0620 	rsb	r6, r1, #32
 8000d6c:	408b      	lsls	r3, r1
 8000d6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d72:	431f      	orrs	r7, r3
 8000d74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d78:	fa04 f301 	lsl.w	r3, r4, r1
 8000d7c:	ea43 030c 	orr.w	r3, r3, ip
 8000d80:	40f4      	lsrs	r4, r6
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	0c38      	lsrs	r0, r7, #16
 8000d88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d90:	fa1f fc87 	uxth.w	ip, r7
 8000d94:	fb00 441e 	mls	r4, r0, lr, r4
 8000d98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000da0:	45a1      	cmp	r9, r4
 8000da2:	fa02 f201 	lsl.w	r2, r2, r1
 8000da6:	d90a      	bls.n	8000dbe <__udivmoddi4+0x1a6>
 8000da8:	193c      	adds	r4, r7, r4
 8000daa:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dae:	f080 8084 	bcs.w	8000eba <__udivmoddi4+0x2a2>
 8000db2:	45a1      	cmp	r9, r4
 8000db4:	f240 8081 	bls.w	8000eba <__udivmoddi4+0x2a2>
 8000db8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dbc:	443c      	add	r4, r7
 8000dbe:	eba4 0409 	sub.w	r4, r4, r9
 8000dc2:	fa1f f983 	uxth.w	r9, r3
 8000dc6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dca:	fb00 4413 	mls	r4, r0, r3, r4
 8000dce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd6:	45a4      	cmp	ip, r4
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x1d2>
 8000dda:	193c      	adds	r4, r7, r4
 8000ddc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000de0:	d267      	bcs.n	8000eb2 <__udivmoddi4+0x29a>
 8000de2:	45a4      	cmp	ip, r4
 8000de4:	d965      	bls.n	8000eb2 <__udivmoddi4+0x29a>
 8000de6:	3b02      	subs	r3, #2
 8000de8:	443c      	add	r4, r7
 8000dea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dee:	fba0 9302 	umull	r9, r3, r0, r2
 8000df2:	eba4 040c 	sub.w	r4, r4, ip
 8000df6:	429c      	cmp	r4, r3
 8000df8:	46ce      	mov	lr, r9
 8000dfa:	469c      	mov	ip, r3
 8000dfc:	d351      	bcc.n	8000ea2 <__udivmoddi4+0x28a>
 8000dfe:	d04e      	beq.n	8000e9e <__udivmoddi4+0x286>
 8000e00:	b155      	cbz	r5, 8000e18 <__udivmoddi4+0x200>
 8000e02:	ebb8 030e 	subs.w	r3, r8, lr
 8000e06:	eb64 040c 	sbc.w	r4, r4, ip
 8000e0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0e:	40cb      	lsrs	r3, r1
 8000e10:	431e      	orrs	r6, r3
 8000e12:	40cc      	lsrs	r4, r1
 8000e14:	e9c5 6400 	strd	r6, r4, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	e750      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f103 	lsr.w	r1, r0, r3
 8000e24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e28:	fa24 f303 	lsr.w	r3, r4, r3
 8000e2c:	4094      	lsls	r4, r2
 8000e2e:	430c      	orrs	r4, r1
 8000e30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e34:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e38:	fa1f f78c 	uxth.w	r7, ip
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3110 	mls	r1, r8, r0, r3
 8000e44:	0c23      	lsrs	r3, r4, #16
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb00 f107 	mul.w	r1, r0, r7
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x24c>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e5a:	d22c      	bcs.n	8000eb6 <__udivmoddi4+0x29e>
 8000e5c:	4299      	cmp	r1, r3
 8000e5e:	d92a      	bls.n	8000eb6 <__udivmoddi4+0x29e>
 8000e60:	3802      	subs	r0, #2
 8000e62:	4463      	add	r3, ip
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e6c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb01 f307 	mul.w	r3, r1, r7
 8000e78:	42a3      	cmp	r3, r4
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x276>
 8000e7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e80:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e84:	d213      	bcs.n	8000eae <__udivmoddi4+0x296>
 8000e86:	42a3      	cmp	r3, r4
 8000e88:	d911      	bls.n	8000eae <__udivmoddi4+0x296>
 8000e8a:	3902      	subs	r1, #2
 8000e8c:	4464      	add	r4, ip
 8000e8e:	1ae4      	subs	r4, r4, r3
 8000e90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e94:	e739      	b.n	8000d0a <__udivmoddi4+0xf2>
 8000e96:	4604      	mov	r4, r0
 8000e98:	e6f0      	b.n	8000c7c <__udivmoddi4+0x64>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e706      	b.n	8000cac <__udivmoddi4+0x94>
 8000e9e:	45c8      	cmp	r8, r9
 8000ea0:	d2ae      	bcs.n	8000e00 <__udivmoddi4+0x1e8>
 8000ea2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ea6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eaa:	3801      	subs	r0, #1
 8000eac:	e7a8      	b.n	8000e00 <__udivmoddi4+0x1e8>
 8000eae:	4631      	mov	r1, r6
 8000eb0:	e7ed      	b.n	8000e8e <__udivmoddi4+0x276>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	e799      	b.n	8000dea <__udivmoddi4+0x1d2>
 8000eb6:	4630      	mov	r0, r6
 8000eb8:	e7d4      	b.n	8000e64 <__udivmoddi4+0x24c>
 8000eba:	46d6      	mov	lr, sl
 8000ebc:	e77f      	b.n	8000dbe <__udivmoddi4+0x1a6>
 8000ebe:	4463      	add	r3, ip
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	e74d      	b.n	8000d60 <__udivmoddi4+0x148>
 8000ec4:	4606      	mov	r6, r0
 8000ec6:	4623      	mov	r3, r4
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e70f      	b.n	8000cec <__udivmoddi4+0xd4>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	4463      	add	r3, ip
 8000ed0:	e730      	b.n	8000d34 <__udivmoddi4+0x11c>
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000ede:	4b14      	ldr	r3, [pc, #80]	@ (8000f30 <MX_DMA_Init+0x58>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee2:	4a13      	ldr	r2, [pc, #76]	@ (8000f30 <MX_DMA_Init+0x58>)
 8000ee4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000ee8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eea:	4b11      	ldr	r3, [pc, #68]	@ (8000f30 <MX_DMA_Init+0x58>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000ef2:	607b      	str	r3, [r7, #4]
 8000ef4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	2100      	movs	r1, #0
 8000efa:	2039      	movs	r0, #57	@ 0x39
 8000efc:	f003 fb11 	bl	8004522 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000f00:	2039      	movs	r0, #57	@ 0x39
 8000f02:	f003 fb2a 	bl	800455a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 2, 0);
 8000f06:	2200      	movs	r2, #0
 8000f08:	2102      	movs	r1, #2
 8000f0a:	203b      	movs	r0, #59	@ 0x3b
 8000f0c:	f003 fb09 	bl	8004522 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000f10:	203b      	movs	r0, #59	@ 0x3b
 8000f12:	f003 fb22 	bl	800455a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 2, 0);
 8000f16:	2200      	movs	r2, #0
 8000f18:	2102      	movs	r1, #2
 8000f1a:	2045      	movs	r0, #69	@ 0x45
 8000f1c:	f003 fb01 	bl	8004522 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000f20:	2045      	movs	r0, #69	@ 0x45
 8000f22:	f003 fb1a 	bl	800455a <HAL_NVIC_EnableIRQ>

}
 8000f26:	bf00      	nop
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40023800 	.word	0x40023800

08000f34 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b090      	sub	sp, #64	@ 0x40
 8000f38:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	605a      	str	r2, [r3, #4]
 8000f44:	609a      	str	r2, [r3, #8]
 8000f46:	60da      	str	r2, [r3, #12]
 8000f48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f4a:	4ba6      	ldr	r3, [pc, #664]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4e:	4aa5      	ldr	r2, [pc, #660]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 8000f50:	f043 0310 	orr.w	r3, r3, #16
 8000f54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f56:	4ba3      	ldr	r3, [pc, #652]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5a:	f003 0310 	and.w	r3, r3, #16
 8000f5e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f62:	4ba0      	ldr	r3, [pc, #640]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f66:	4a9f      	ldr	r2, [pc, #636]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 8000f68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f6e:	4b9d      	ldr	r3, [pc, #628]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f76:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f7a:	4b9a      	ldr	r3, [pc, #616]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7e:	4a99      	ldr	r2, [pc, #612]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 8000f80:	f043 0302 	orr.w	r3, r3, #2
 8000f84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f86:	4b97      	ldr	r3, [pc, #604]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8a:	f003 0302 	and.w	r3, r3, #2
 8000f8e:	623b      	str	r3, [r7, #32]
 8000f90:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f92:	4b94      	ldr	r3, [pc, #592]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f96:	4a93      	ldr	r2, [pc, #588]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 8000f98:	f043 0308 	orr.w	r3, r3, #8
 8000f9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f9e:	4b91      	ldr	r3, [pc, #580]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa2:	f003 0308 	and.w	r3, r3, #8
 8000fa6:	61fb      	str	r3, [r7, #28]
 8000fa8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000faa:	4b8e      	ldr	r3, [pc, #568]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fae:	4a8d      	ldr	r2, [pc, #564]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 8000fb0:	f043 0304 	orr.w	r3, r3, #4
 8000fb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fb6:	4b8b      	ldr	r3, [pc, #556]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fba:	f003 0304 	and.w	r3, r3, #4
 8000fbe:	61bb      	str	r3, [r7, #24]
 8000fc0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc2:	4b88      	ldr	r3, [pc, #544]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc6:	4a87      	ldr	r2, [pc, #540]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 8000fc8:	f043 0301 	orr.w	r3, r3, #1
 8000fcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fce:	4b85      	ldr	r3, [pc, #532]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	617b      	str	r3, [r7, #20]
 8000fd8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000fda:	4b82      	ldr	r3, [pc, #520]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fde:	4a81      	ldr	r2, [pc, #516]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 8000fe0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000fe4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fe6:	4b7f      	ldr	r3, [pc, #508]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000fee:	613b      	str	r3, [r7, #16]
 8000ff0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000ff2:	4b7c      	ldr	r3, [pc, #496]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff6:	4a7b      	ldr	r2, [pc, #492]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 8000ff8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ffc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ffe:	4b79      	ldr	r3, [pc, #484]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001002:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800100a:	4b76      	ldr	r3, [pc, #472]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100e:	4a75      	ldr	r2, [pc, #468]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 8001010:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001014:	6313      	str	r3, [r2, #48]	@ 0x30
 8001016:	4b73      	ldr	r3, [pc, #460]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800101e:	60bb      	str	r3, [r7, #8]
 8001020:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001022:	4b70      	ldr	r3, [pc, #448]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001026:	4a6f      	ldr	r2, [pc, #444]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 8001028:	f043 0320 	orr.w	r3, r3, #32
 800102c:	6313      	str	r3, [r2, #48]	@ 0x30
 800102e:	4b6d      	ldr	r3, [pc, #436]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001032:	f003 0320 	and.w	r3, r3, #32
 8001036:	607b      	str	r3, [r7, #4]
 8001038:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800103a:	4b6a      	ldr	r3, [pc, #424]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103e:	4a69      	ldr	r2, [pc, #420]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 8001040:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001044:	6313      	str	r3, [r2, #48]	@ 0x30
 8001046:	4b67      	ldr	r3, [pc, #412]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800104e:	603b      	str	r3, [r7, #0]
 8001050:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 8001052:	2200      	movs	r2, #0
 8001054:	2102      	movs	r1, #2
 8001056:	4864      	ldr	r0, [pc, #400]	@ (80011e8 <MX_GPIO_Init+0x2b4>)
 8001058:	f004 f9de 	bl	8005418 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE2 PE1 PE0
                           PE8 PE9 PE11 PE14
                           PE7 PE10 PE12 PE15
                           PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0
 800105c:	f64f 738f 	movw	r3, #65423	@ 0xff8f
 8001060:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14
                          |GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001062:	2303      	movs	r3, #3
 8001064:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800106a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800106e:	4619      	mov	r1, r3
 8001070:	485e      	ldr	r0, [pc, #376]	@ (80011ec <MX_GPIO_Init+0x2b8>)
 8001072:	f003 ff01 	bl	8004e78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG14 PG13 PG15 PG11
                           PG12 PG10 PG9 PG8
                           PG7 PG6 PG1 PG3
                           PG2 PG0 PG5 PG4 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_11
 8001076:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800107a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_12|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8
                          |GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1|GPIO_PIN_3
                          |GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800107c:	2303      	movs	r3, #3
 800107e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001080:	2300      	movs	r3, #0
 8001082:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001084:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001088:	4619      	mov	r1, r3
 800108a:	4859      	ldr	r0, [pc, #356]	@ (80011f0 <MX_GPIO_Init+0x2bc>)
 800108c:	f003 fef4 	bl	8004e78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB5 PB4 PB3
                           PB9 PB6 PB13 PB12
                           PB2 PB10 PB1 PB0
                           PB11 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3
 8001090:	f64f 737f 	movw	r3, #65407	@ 0xff7f
 8001094:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_13|GPIO_PIN_12
                          |GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_1|GPIO_PIN_0
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001096:	2303      	movs	r3, #3
 8001098:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800109e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010a2:	4619      	mov	r1, r3
 80010a4:	4853      	ldr	r0, [pc, #332]	@ (80011f4 <MX_GPIO_Init+0x2c0>)
 80010a6:	f003 fee7 	bl	8004e78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD7 PD6 PD0 PD5
                           PD3 PD1 PD4 PD15
                           PD10 PD14 PD9 PD8
                           PD12 PD13 PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_0|GPIO_PIN_5
 80010aa:	f64f 73fb 	movw	r3, #65531	@ 0xfffb
 80010ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_15
                          |GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010b0:	2303      	movs	r3, #3
 80010b2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b4:	2300      	movs	r3, #0
 80010b6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010b8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010bc:	4619      	mov	r1, r3
 80010be:	484e      	ldr	r0, [pc, #312]	@ (80011f8 <MX_GPIO_Init+0x2c4>)
 80010c0:	f003 feda 	bl	8004e78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA15 PA12 PA11 PA10
                           PA8 PA1 PA0 PA4
                           PA2 PA6 PA5 PA3
                           PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10
 80010c4:	f649 53ff 	movw	r3, #40447	@ 0x9dff
 80010c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_4
                          |GPIO_PIN_2|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_3
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010ca:	2303      	movs	r3, #3
 80010cc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010d6:	4619      	mov	r1, r3
 80010d8:	4848      	ldr	r0, [pc, #288]	@ (80011fc <MX_GPIO_Init+0x2c8>)
 80010da:	f003 fecd 	bl	8004e78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ13 PJ12 PJ14 PJ15
                           PJ11 PJ8 PJ10 PJ7
                           PJ9 PJ6 PJ4 PJ5
                           PJ3 PJ2 PJ0 PJ1 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15
 80010de:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80010e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_7
                          |GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010e4:	2303      	movs	r3, #3
 80010e6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e8:	2300      	movs	r3, #0
 80010ea:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80010ec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010f0:	4619      	mov	r1, r3
 80010f2:	4843      	ldr	r0, [pc, #268]	@ (8001200 <MX_GPIO_Init+0x2cc>)
 80010f4:	f003 fec0 	bl	8004e78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC11 PC10 PC14 PC15
                           PC9 PC7 PC6 PC3
                           PC0 PC1 PC2 PC4
                           PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15
 80010f8:	f64c 63ff 	movw	r3, #52991	@ 0xceff
 80010fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_9|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_3
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010fe:	2303      	movs	r3, #3
 8001100:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001102:	2300      	movs	r3, #0
 8001104:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001106:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800110a:	4619      	mov	r1, r3
 800110c:	483d      	ldr	r0, [pc, #244]	@ (8001204 <MX_GPIO_Init+0x2d0>)
 800110e:	f003 feb3 	bl	8004e78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI8 PI4 PI3 PI2
                           PI5 PI7 PI10 PI6
                           PI12 PI9 PI0 PI13
                           PI15 PI14 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2
 8001112:	f24f 73fd 	movw	r3, #63485	@ 0xf7fd
 8001116:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_6
                          |GPIO_PIN_12|GPIO_PIN_9|GPIO_PIN_0|GPIO_PIN_13
                          |GPIO_PIN_15|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001118:	2303      	movs	r3, #3
 800111a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111c:	2300      	movs	r3, #0
 800111e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001120:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001124:	4619      	mov	r1, r3
 8001126:	4830      	ldr	r0, [pc, #192]	@ (80011e8 <MX_GPIO_Init+0x2b4>)
 8001128:	f003 fea6 	bl	8004e78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PK7 PK6 PK5 PK4
                           PK3 PK1 PK2 PK0 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
 800112c:	23ff      	movs	r3, #255	@ 0xff
 800112e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001130:	2303      	movs	r3, #3
 8001132:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001138:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800113c:	4619      	mov	r1, r3
 800113e:	4832      	ldr	r0, [pc, #200]	@ (8001208 <MX_GPIO_Init+0x2d4>)
 8001140:	f003 fe9a 	bl	8004e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001144:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001148:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800114a:	2300      	movs	r3, #0
 800114c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114e:	2300      	movs	r3, #0
 8001150:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001152:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001156:	4619      	mov	r1, r3
 8001158:	482a      	ldr	r0, [pc, #168]	@ (8001204 <MX_GPIO_Init+0x2d0>)
 800115a:	f003 fe8d 	bl	8004e78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3
                           PF4 PF7 PF6 PF5
                           PF10 PF9 PF8 PF12
                           PF15 PF13 PF14 PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800115e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001162:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_4|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8|GPIO_PIN_12
                          |GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001164:	2303      	movs	r3, #3
 8001166:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001168:	2300      	movs	r3, #0
 800116a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800116c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001170:	4619      	mov	r1, r3
 8001172:	4826      	ldr	r0, [pc, #152]	@ (800120c <MX_GPIO_Init+0x2d8>)
 8001174:	f003 fe80 	bl	8004e78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH15 PH13 PH14 PH4
                           PH5 PH3 PH2 PH12
                           PH7 PH9 PH11 PH6
                           PH8 PH10 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_4
 8001178:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800117c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_12
                          |GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_6
                          |GPIO_PIN_8|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800117e:	2303      	movs	r3, #3
 8001180:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001182:	2300      	movs	r3, #0
 8001184:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001186:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800118a:	4619      	mov	r1, r3
 800118c:	4820      	ldr	r0, [pc, #128]	@ (8001210 <MX_GPIO_Init+0x2dc>)
 800118e:	f003 fe73 	bl	8004e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 8001192:	2302      	movs	r3, #2
 8001194:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001196:	2301      	movs	r3, #1
 8001198:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119a:	2300      	movs	r3, #0
 800119c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119e:	2300      	movs	r3, #0
 80011a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 80011a2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011a6:	4619      	mov	r1, r3
 80011a8:	480f      	ldr	r0, [pc, #60]	@ (80011e8 <MX_GPIO_Init+0x2b4>)
 80011aa:	f003 fe65 	bl	8004e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 80011ae:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80011b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011b4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80011b8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ba:	2300      	movs	r3, #0
 80011bc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 80011be:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011c2:	4619      	mov	r1, r3
 80011c4:	4808      	ldr	r0, [pc, #32]	@ (80011e8 <MX_GPIO_Init+0x2b4>)
 80011c6:	f003 fe57 	bl	8004e78 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80011ca:	2200      	movs	r2, #0
 80011cc:	2100      	movs	r1, #0
 80011ce:	2028      	movs	r0, #40	@ 0x28
 80011d0:	f003 f9a7 	bl	8004522 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80011d4:	2028      	movs	r0, #40	@ 0x28
 80011d6:	f003 f9c0 	bl	800455a <HAL_NVIC_EnableIRQ>

}
 80011da:	bf00      	nop
 80011dc:	3740      	adds	r7, #64	@ 0x40
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	40023800 	.word	0x40023800
 80011e8:	40022000 	.word	0x40022000
 80011ec:	40021000 	.word	0x40021000
 80011f0:	40021800 	.word	0x40021800
 80011f4:	40020400 	.word	0x40020400
 80011f8:	40020c00 	.word	0x40020c00
 80011fc:	40020000 	.word	0x40020000
 8001200:	40022400 	.word	0x40022400
 8001204:	40020800 	.word	0x40020800
 8001208:	40022800 	.word	0x40022800
 800120c:	40021400 	.word	0x40021400
 8001210:	40021c00 	.word	0x40021c00

08001214 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001218:	f3bf 8f4f 	dsb	sy
}
 800121c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800121e:	f3bf 8f6f 	isb	sy
}
 8001222:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001224:	4b0d      	ldr	r3, [pc, #52]	@ (800125c <SCB_EnableICache+0x48>)
 8001226:	2200      	movs	r2, #0
 8001228:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800122c:	f3bf 8f4f 	dsb	sy
}
 8001230:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001232:	f3bf 8f6f 	isb	sy
}
 8001236:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001238:	4b08      	ldr	r3, [pc, #32]	@ (800125c <SCB_EnableICache+0x48>)
 800123a:	695b      	ldr	r3, [r3, #20]
 800123c:	4a07      	ldr	r2, [pc, #28]	@ (800125c <SCB_EnableICache+0x48>)
 800123e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001242:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001244:	f3bf 8f4f 	dsb	sy
}
 8001248:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800124a:	f3bf 8f6f 	isb	sy
}
 800124e:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8001250:	bf00      	nop
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	e000ed00 	.word	0xe000ed00

08001260 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8001260:	b480      	push	{r7}
 8001262:	b085      	sub	sp, #20
 8001264:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001266:	4b1f      	ldr	r3, [pc, #124]	@ (80012e4 <SCB_EnableDCache+0x84>)
 8001268:	2200      	movs	r2, #0
 800126a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800126e:	f3bf 8f4f 	dsb	sy
}
 8001272:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001274:	4b1b      	ldr	r3, [pc, #108]	@ (80012e4 <SCB_EnableDCache+0x84>)
 8001276:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800127a:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	0b5b      	lsrs	r3, r3, #13
 8001280:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001284:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	08db      	lsrs	r3, r3, #3
 800128a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800128e:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	015a      	lsls	r2, r3, #5
 8001294:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8001298:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800129a:	68ba      	ldr	r2, [r7, #8]
 800129c:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800129e:	4911      	ldr	r1, [pc, #68]	@ (80012e4 <SCB_EnableDCache+0x84>)
 80012a0:	4313      	orrs	r3, r2
 80012a2:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	1e5a      	subs	r2, r3, #1
 80012aa:	60ba      	str	r2, [r7, #8]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d1ef      	bne.n	8001290 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	1e5a      	subs	r2, r3, #1
 80012b4:	60fa      	str	r2, [r7, #12]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d1e5      	bne.n	8001286 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80012ba:	f3bf 8f4f 	dsb	sy
}
 80012be:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80012c0:	4b08      	ldr	r3, [pc, #32]	@ (80012e4 <SCB_EnableDCache+0x84>)
 80012c2:	695b      	ldr	r3, [r3, #20]
 80012c4:	4a07      	ldr	r2, [pc, #28]	@ (80012e4 <SCB_EnableDCache+0x84>)
 80012c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012ca:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80012cc:	f3bf 8f4f 	dsb	sy
}
 80012d0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012d2:	f3bf 8f6f 	isb	sy
}
 80012d6:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80012d8:	bf00      	nop
 80012da:	3714      	adds	r7, #20
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr
 80012e4:	e000ed00 	.word	0xe000ed00

080012e8 <AI_Init.0>:
	ai_buffer ai_output[AI_NETWORK_OUT_NUM];

	/**
	 * @brief Initialize the AI model
	 */
	void AI_Init(void) {
 80012e8:	b590      	push	{r4, r7, lr}
 80012ea:	b093      	sub	sp, #76	@ 0x4c
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4664      	mov	r4, ip
 80012f0:	f8c7 c004 	str.w	ip, [r7, #4]
	    ai_error ai_err;

	    // Set working memory and get weights/biases from the model
	    ai_network_params ai_params = {
	        AI_NETWORK_DATA_WEIGHTS(ai_network_data_weights_get()),
 80012f4:	f00c fd9e 	bl	800de34 <ai_network_data_weights_get>
 80012f8:	4602      	mov	r2, r0
 80012fa:	f107 030c 	add.w	r3, r7, #12
 80012fe:	4611      	mov	r1, r2
 8001300:	4618      	mov	r0, r3
 8001302:	f00c fd61 	bl	800ddc8 <ai_network_data_weights_buffer_get>
	        AI_NETWORK_DATA_ACTIVATIONS(activations)
 8001306:	f64f 235c 	movw	r3, #64092	@ 0xfa5c
 800130a:	4423      	add	r3, r4
 800130c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001310:	4619      	mov	r1, r3
 8001312:	4610      	mov	r0, r2
 8001314:	f00c fd22 	bl	800dd5c <ai_network_data_activations_buffer_get>
	    };

	    // Create and initialize the network
	    ai_err = ai_network_create(&network, AI_NETWORK_DATA_CONFIG);
 8001318:	f64f 2358 	movw	r3, #64088	@ 0xfa58
 800131c:	4423      	add	r3, r4
 800131e:	2100      	movs	r1, #0
 8001320:	4618      	mov	r0, r3
 8001322:	f00c fc95 	bl	800dc50 <ai_network_create>
 8001326:	4603      	mov	r3, r0
 8001328:	647b      	str	r3, [r7, #68]	@ 0x44
	    if (ai_err.type != AI_ERROR_NONE) {
 800132a:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800132e:	2b00      	cmp	r3, #0
 8001330:	d00b      	beq.n	800134a <AI_Init.0+0x62>
	        printf("AI network creation failed: type=%d, code=%d\r\n", ai_err.type, ai_err.code);
 8001332:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8001336:	4619      	mov	r1, r3
 8001338:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800133a:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800133e:	461a      	mov	r2, r3
 8001340:	4823      	ldr	r0, [pc, #140]	@ (80013d0 <AI_Init.0+0xe8>)
 8001342:	f010 fc1f 	bl	8011b84 <iprintf>
	        Error_Handler();
 8001346:	f000 fa5d 	bl	8001804 <Error_Handler>
	    }

	    if (!ai_network_init(network, &ai_params)) {
 800134a:	f504 4370 	add.w	r3, r4, #61440	@ 0xf000
 800134e:	f8d3 3a58 	ldr.w	r3, [r3, #2648]	@ 0xa58
 8001352:	f107 020c 	add.w	r2, r7, #12
 8001356:	4611      	mov	r1, r2
 8001358:	4618      	mov	r0, r3
 800135a:	f00c fcc3 	bl	800dce4 <ai_network_init>
 800135e:	4603      	mov	r3, r0
 8001360:	f083 0301 	eor.w	r3, r3, #1
 8001364:	b2db      	uxtb	r3, r3
 8001366:	2b00      	cmp	r3, #0
 8001368:	d014      	beq.n	8001394 <AI_Init.0+0xac>
	        ai_err = ai_network_get_error(network);
 800136a:	f504 4370 	add.w	r3, r4, #61440	@ 0xf000
 800136e:	f8d3 3a58 	ldr.w	r3, [r3, #2648]	@ 0xa58
 8001372:	4618      	mov	r0, r3
 8001374:	f00c fc60 	bl	800dc38 <ai_network_get_error>
 8001378:	4603      	mov	r3, r0
 800137a:	647b      	str	r3, [r7, #68]	@ 0x44
	        printf("AI network initialization failed: type=%d, code=%d\r\n", ai_err.type, ai_err.code);
 800137c:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8001380:	4619      	mov	r1, r3
 8001382:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001384:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8001388:	461a      	mov	r2, r3
 800138a:	4812      	ldr	r0, [pc, #72]	@ (80013d4 <AI_Init.0+0xec>)
 800138c:	f010 fbfa 	bl	8011b84 <iprintf>
	        Error_Handler();
 8001390:	f000 fa38 	bl	8001804 <Error_Handler>
	    }

	    // Retrieve input and output buffer structures dynamically
	    ai_network_inputs_get(network, ai_input);
 8001394:	f504 4370 	add.w	r3, r4, #61440	@ 0xf000
 8001398:	f8d3 2a58 	ldr.w	r2, [r3, #2648]	@ 0xa58
 800139c:	f64f 233c 	movw	r3, #64060	@ 0xfa3c
 80013a0:	4423      	add	r3, r4
 80013a2:	4619      	mov	r1, r3
 80013a4:	4610      	mov	r0, r2
 80013a6:	f00c fc69 	bl	800dc7c <ai_network_inputs_get>
	    ai_network_outputs_get(network, ai_output);
 80013aa:	f504 4370 	add.w	r3, r4, #61440	@ 0xf000
 80013ae:	f8d3 2a58 	ldr.w	r2, [r3, #2648]	@ 0xa58
 80013b2:	f64f 2320 	movw	r3, #64032	@ 0xfa20
 80013b6:	4423      	add	r3, r4
 80013b8:	4619      	mov	r1, r3
 80013ba:	4610      	mov	r0, r2
 80013bc:	f00c fc78 	bl	800dcb0 <ai_network_outputs_get>

	    printf("AI model initialized successfully.\r\n");
 80013c0:	4805      	ldr	r0, [pc, #20]	@ (80013d8 <AI_Init.0+0xf0>)
 80013c2:	f010 fc47 	bl	8011c54 <puts>
	}
 80013c6:	bf00      	nop
 80013c8:	374c      	adds	r7, #76	@ 0x4c
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd90      	pop	{r4, r7, pc}
 80013ce:	bf00      	nop
 80013d0:	080139e0 	.word	0x080139e0
 80013d4:	08013a10 	.word	0x08013a10
 80013d8:	08013a48 	.word	0x08013a48

080013dc <main>:
{
 80013dc:	b5b0      	push	{r4, r5, r7, lr}
 80013de:	f5ad 3d00 	sub.w	sp, sp, #131072	@ 0x20000
 80013e2:	b0b4      	sub	sp, #208	@ 0xd0
 80013e4:	af00      	add	r7, sp, #0
int main(void)
 80013e6:	4b42      	ldr	r3, [pc, #264]	@ (80014f0 <main+0x114>)
 80013e8:	443b      	add	r3, r7
 80013ea:	f107 02d0 	add.w	r2, r7, #208	@ 0xd0
 80013ee:	f502 32f8 	add.w	r2, r2, #126976	@ 0x1f000
 80013f2:	f8c2 3ff4 	str.w	r3, [r2, #4084]	@ 0xff4
	int buf_len = 0;
 80013f6:	2300      	movs	r3, #0
 80013f8:	4a3e      	ldr	r2, [pc, #248]	@ (80014f4 <main+0x118>)
 80013fa:	443a      	add	r2, r7
 80013fc:	6013      	str	r3, [r2, #0]
	const char* activities[AI_NETWORK_OUT_1_SIZE] = {
 80013fe:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8001402:	4a3d      	ldr	r2, [pc, #244]	@ (80014f8 <main+0x11c>)
 8001404:	f1a3 0498 	sub.w	r4, r3, #152	@ 0x98
 8001408:	4615      	mov	r5, r2
 800140a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800140c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800140e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001412:	e884 0003 	stmia.w	r4, {r0, r1}
	ai_handle network = AI_HANDLE_NULL;
 8001416:	2300      	movs	r3, #0
 8001418:	f107 02d0 	add.w	r2, r7, #208	@ 0xd0
 800141c:	f502 4270 	add.w	r2, r2, #61440	@ 0xf000
 8001420:	f8c2 39c0 	str.w	r3, [r2, #2496]	@ 0x9c0
  /* USER CODE END 1 */

  /* Enable the CPU Cache */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8001424:	f7ff fef6 	bl	8001214 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8001428:	f7ff ff1a 	bl	8001260 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800142c:	f002 ff1c 	bl	8004268 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001430:	f000 f878 	bl	8001524 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001434:	f7ff fd7e 	bl	8000f34 <MX_GPIO_Init>
  MX_DMA_Init();
 8001438:	f7ff fd4e 	bl	8000ed8 <MX_DMA_Init>
  MX_SAI1_Init();
 800143c:	f000 f9e8 	bl	8001810 <MX_SAI1_Init>
  MX_USART1_UART_Init();
 8001440:	f000 fda0 	bl	8001f84 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8001444:	f009 fb96 	bl	800ab74 <MX_FATFS_Init>
  MX_SDMMC1_SD_Init();
 8001448:	f000 fb06 	bl	8001a58 <MX_SDMMC1_SD_Init>
  /* USER CODE BEGIN 2 */

  /* We format the SD card */
  printf("SD card init...\r\n");
 800144c:	482b      	ldr	r0, [pc, #172]	@ (80014fc <main+0x120>)
 800144e:	f010 fc01 	bl	8011c54 <puts>
  //SDCard_InitAndFormat();

  AI_Init();
 8001452:	4b2b      	ldr	r3, [pc, #172]	@ (8001500 <main+0x124>)
 8001454:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000
 8001458:	f103 03d0 	add.w	r3, r3, #208	@ 0xd0
 800145c:	443b      	add	r3, r7
 800145e:	469c      	mov	ip, r3
 8001460:	f7ff ff42 	bl	80012e8 <AI_Init.0>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t write_index = 0; // AI stuff
 8001464:	2300      	movs	r3, #0
 8001466:	4a27      	ldr	r2, [pc, #156]	@ (8001504 <main+0x128>)
 8001468:	443a      	add	r2, r7
 800146a:	6013      	str	r3, [r2, #0]
  while (1)
  {
      check_button_release();
 800146c:	f000 f8f4 	bl	8001658 <check_button_release>
      printf("Waiting for input to record...\r\n");
 8001470:	4825      	ldr	r0, [pc, #148]	@ (8001508 <main+0x12c>)
 8001472:	f010 fbef 	bl	8011c54 <puts>
      HAL_Delay(1000);
 8001476:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800147a:	f002 ff53 	bl	8004324 <HAL_Delay>

      if (button_pressed == 1)
 800147e:	4b23      	ldr	r3, [pc, #140]	@ (800150c <main+0x130>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	b2db      	uxtb	r3, r3
 8001484:	2b01      	cmp	r3, #1
 8001486:	d12e      	bne.n	80014e6 <main+0x10a>
      {
          /* Toggle the green led to visually show action */
          HAL_GPIO_TogglePin(USR_LED_GPIO_Port, USR_LED_Pin);
 8001488:	2102      	movs	r1, #2
 800148a:	4821      	ldr	r0, [pc, #132]	@ (8001510 <main+0x134>)
 800148c:	f003 ffdd 	bl	800544a <HAL_GPIO_TogglePin>
          HAL_Delay(100);
 8001490:	2064      	movs	r0, #100	@ 0x64
 8001492:	f002 ff47 	bl	8004324 <HAL_Delay>
          HAL_GPIO_TogglePin(USR_LED_GPIO_Port, USR_LED_Pin);
 8001496:	2102      	movs	r1, #2
 8001498:	481d      	ldr	r0, [pc, #116]	@ (8001510 <main+0x134>)
 800149a:	f003 ffd6 	bl	800544a <HAL_GPIO_TogglePin>
          HAL_Delay(100);
 800149e:	2064      	movs	r0, #100	@ 0x64
 80014a0:	f002 ff40 	bl	8004324 <HAL_Delay>

          /* If the program is not already recording... */
          if (AudioState == AUDIO_STATE_IDLE)
 80014a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001514 <main+0x138>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d108      	bne.n	80014be <main+0xe2>
          {
              /* Configure the audio recorder: sampling frequency, bits-depth, number of channels */
              AUDIO_REC_Start();
 80014ac:	f008 fff6 	bl	800a49c <AUDIO_REC_Start>
          }

          /* While recording, we loop the recording process */
          while (AudioState == AUDIO_STATE_RECORD)
 80014b0:	e005      	b.n	80014be <main+0xe2>
          {
              status = AUDIO_REC_Process();
 80014b2:	f009 f879 	bl	800a5a8 <AUDIO_REC_Process>
 80014b6:	4603      	mov	r3, r0
 80014b8:	461a      	mov	r2, r3
 80014ba:	4b17      	ldr	r3, [pc, #92]	@ (8001518 <main+0x13c>)
 80014bc:	701a      	strb	r2, [r3, #0]
          while (AudioState == AUDIO_STATE_RECORD)
 80014be:	4b15      	ldr	r3, [pc, #84]	@ (8001514 <main+0x138>)
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	2b05      	cmp	r3, #5
 80014c4:	d0f5      	beq.n	80014b2 <main+0xd6>
          }

          /* Once we stop recording, we correctly close the .WAV */
          if (AudioState == AUDIO_STATE_STOP)
 80014c6:	4b13      	ldr	r3, [pc, #76]	@ (8001514 <main+0x138>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	2b0a      	cmp	r3, #10
 80014cc:	d108      	bne.n	80014e0 <main+0x104>
          {
              status = AUDIO_REC_Process();
 80014ce:	f009 f86b 	bl	800a5a8 <AUDIO_REC_Process>
 80014d2:	4603      	mov	r3, r0
 80014d4:	461a      	mov	r2, r3
 80014d6:	4b10      	ldr	r3, [pc, #64]	@ (8001518 <main+0x13c>)
 80014d8:	701a      	strb	r2, [r3, #0]
              printf("Recording stopped.\r\n");
 80014da:	4810      	ldr	r0, [pc, #64]	@ (800151c <main+0x140>)
 80014dc:	f010 fbba 	bl	8011c54 <puts>
          }

          ReadWAVFileInfo("WAVE.wav");
 80014e0:	480f      	ldr	r0, [pc, #60]	@ (8001520 <main+0x144>)
 80014e2:	f000 f8cd 	bl	8001680 <ReadWAVFileInfo>
//          {
//              printf("Error: WAV file info reading failed.\r\n");
//          }
      }

      HAL_Delay(100);  // Small delay for stability
 80014e6:	2064      	movs	r0, #100	@ 0x64
 80014e8:	f002 ff1c 	bl	8004324 <HAL_Delay>
  {
 80014ec:	e7be      	b.n	800146c <main+0x90>
 80014ee:	bf00      	nop
 80014f0:	000200e0 	.word	0x000200e0
 80014f4:	000200cc 	.word	0x000200cc
 80014f8:	08013ae8 	.word	0x08013ae8
 80014fc:	08013a6c 	.word	0x08013a6c
 8001500:	fffdff68 	.word	0xfffdff68
 8001504:	000200c8 	.word	0x000200c8
 8001508:	08013a80 	.word	0x08013a80
 800150c:	200009f2 	.word	0x200009f2
 8001510:	40022000 	.word	0x40022000
 8001514:	200009f0 	.word	0x200009f0
 8001518:	200009f1 	.word	0x200009f1
 800151c:	08013aa0 	.word	0x08013aa0
 8001520:	08013ab4 	.word	0x08013ab4

08001524 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b094      	sub	sp, #80	@ 0x50
 8001528:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800152a:	f107 0320 	add.w	r3, r7, #32
 800152e:	2230      	movs	r2, #48	@ 0x30
 8001530:	2100      	movs	r1, #0
 8001532:	4618      	mov	r0, r3
 8001534:	f010 fc6e 	bl	8011e14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001538:	f107 030c 	add.w	r3, r7, #12
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	605a      	str	r2, [r3, #4]
 8001542:	609a      	str	r2, [r3, #8]
 8001544:	60da      	str	r2, [r3, #12]
 8001546:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001548:	4b2a      	ldr	r3, [pc, #168]	@ (80015f4 <SystemClock_Config+0xd0>)
 800154a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800154c:	4a29      	ldr	r2, [pc, #164]	@ (80015f4 <SystemClock_Config+0xd0>)
 800154e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001552:	6413      	str	r3, [r2, #64]	@ 0x40
 8001554:	4b27      	ldr	r3, [pc, #156]	@ (80015f4 <SystemClock_Config+0xd0>)
 8001556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001558:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800155c:	60bb      	str	r3, [r7, #8]
 800155e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001560:	4b25      	ldr	r3, [pc, #148]	@ (80015f8 <SystemClock_Config+0xd4>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a24      	ldr	r2, [pc, #144]	@ (80015f8 <SystemClock_Config+0xd4>)
 8001566:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800156a:	6013      	str	r3, [r2, #0]
 800156c:	4b22      	ldr	r3, [pc, #136]	@ (80015f8 <SystemClock_Config+0xd4>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001574:	607b      	str	r3, [r7, #4]
 8001576:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001578:	2302      	movs	r3, #2
 800157a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800157c:	2301      	movs	r3, #1
 800157e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001580:	2310      	movs	r3, #16
 8001582:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001584:	2302      	movs	r3, #2
 8001586:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001588:	2300      	movs	r3, #0
 800158a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800158c:	2308      	movs	r3, #8
 800158e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 200;
 8001590:	23c8      	movs	r3, #200	@ 0xc8
 8001592:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001594:	2302      	movs	r3, #2
 8001596:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001598:	2308      	movs	r3, #8
 800159a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800159c:	f107 0320 	add.w	r3, r7, #32
 80015a0:	4618      	mov	r0, r3
 80015a2:	f004 fdb3 	bl	800610c <HAL_RCC_OscConfig>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80015ac:	f000 f92a 	bl	8001804 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80015b0:	f004 fd5c 	bl	800606c <HAL_PWREx_EnableOverDrive>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80015ba:	f000 f923 	bl	8001804 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015be:	230f      	movs	r3, #15
 80015c0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015c2:	2302      	movs	r3, #2
 80015c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015c6:	2300      	movs	r3, #0
 80015c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80015ca:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80015ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80015d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015d4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80015d6:	f107 030c 	add.w	r3, r7, #12
 80015da:	2106      	movs	r1, #6
 80015dc:	4618      	mov	r0, r3
 80015de:	f005 f839 	bl	8006654 <HAL_RCC_ClockConfig>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80015e8:	f000 f90c 	bl	8001804 <Error_Handler>
  }
}
 80015ec:	bf00      	nop
 80015ee:	3750      	adds	r7, #80	@ 0x50
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	40023800 	.word	0x40023800
 80015f8:	40007000 	.word	0x40007000

080015fc <__io_putchar>:

/* USER CODE BEGIN 4 */

/* Needed to send messages easier to terminal for debugging */
PUTCHAR_PROTOTYPE
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
/* Place your implementation of fputc here */
/* e.g. write a character to the USART2 and Loop until the end
of transmission */
HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 100);
 8001604:	1d39      	adds	r1, r7, #4
 8001606:	2364      	movs	r3, #100	@ 0x64
 8001608:	2201      	movs	r2, #1
 800160a:	4804      	ldr	r0, [pc, #16]	@ (800161c <__io_putchar+0x20>)
 800160c:	f007 fd5c 	bl	80090c8 <HAL_UART_Transmit>
return ch;
 8001610:	687b      	ldr	r3, [r7, #4]
}
 8001612:	4618      	mov	r0, r3
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	20000c24 	.word	0x20000c24

08001620 <HAL_GPIO_EXTI_Callback>:
/* ======================================================== */


/* User button interruption and variable change */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);

  if (GPIO_Pin == USR_BTN_Pin && button_pressed == 0)
 800162a:	88fb      	ldrh	r3, [r7, #6]
 800162c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001630:	d10a      	bne.n	8001648 <HAL_GPIO_EXTI_Callback+0x28>
 8001632:	4b07      	ldr	r3, [pc, #28]	@ (8001650 <HAL_GPIO_EXTI_Callback+0x30>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	b2db      	uxtb	r3, r3
 8001638:	2b00      	cmp	r3, #0
 800163a:	d105      	bne.n	8001648 <HAL_GPIO_EXTI_Callback+0x28>
      {
	  	  button_pressed = 1;
 800163c:	4b04      	ldr	r3, [pc, #16]	@ (8001650 <HAL_GPIO_EXTI_Callback+0x30>)
 800163e:	2201      	movs	r2, #1
 8001640:	701a      	strb	r2, [r3, #0]
	  	  printf("Button pressed...\r\n");
 8001642:	4804      	ldr	r0, [pc, #16]	@ (8001654 <HAL_GPIO_EXTI_Callback+0x34>)
 8001644:	f010 fb06 	bl	8011c54 <puts>
      }
}
 8001648:	bf00      	nop
 800164a:	3708      	adds	r7, #8
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	200009f2 	.word	0x200009f2
 8001654:	08013b00 	.word	0x08013b00

08001658 <check_button_release>:
/* ======================================================== */


/* Used to verify the state of the button */
void check_button_release()
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
    if (HAL_GPIO_ReadPin(GPIOI, USR_BTN_Pin) == GPIO_PIN_RESET) button_pressed = 0;
 800165c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001660:	4805      	ldr	r0, [pc, #20]	@ (8001678 <check_button_release+0x20>)
 8001662:	f003 fec1 	bl	80053e8 <HAL_GPIO_ReadPin>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d102      	bne.n	8001672 <check_button_release+0x1a>
 800166c:	4b03      	ldr	r3, [pc, #12]	@ (800167c <check_button_release+0x24>)
 800166e:	2200      	movs	r2, #0
 8001670:	701a      	strb	r2, [r3, #0]
}
 8001672:	bf00      	nop
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	40022000 	.word	0x40022000
 800167c:	200009f2 	.word	0x200009f2

08001680 <ReadWAVFileInfo>:
}
/* ======================================================== */


/* Debug function : reads the characteristics of a .wav file in the SD card */
void ReadWAVFileInfo(const char *filename) {
 8001680:	b580      	push	{r7, lr}
 8001682:	f5ad 7d1c 	sub.w	sp, sp, #624	@ 0x270
 8001686:	af00      	add	r7, sp, #0
 8001688:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 800168c:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 8001690:	6018      	str	r0, [r3, #0]
    WAV_Header header;      // WAV file header
    UINT bytesRead;         // Number of bytes read
    FRESULT res;

    // Open the WAV file
    res = f_open(&file, filename, FA_READ);
 8001692:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8001696:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 800169a:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 800169e:	2201      	movs	r2, #1
 80016a0:	6819      	ldr	r1, [r3, #0]
 80016a2:	f00b fa3b 	bl	800cb1c <f_open>
 80016a6:	4603      	mov	r3, r0
 80016a8:	f887 326f 	strb.w	r3, [r7, #623]	@ 0x26f
    if (res != FR_OK) {
 80016ac:	f897 326f 	ldrb.w	r3, [r7, #623]	@ 0x26f
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d00a      	beq.n	80016ca <ReadWAVFileInfo+0x4a>
        printf("Error: Failed to open file '%s' (Code: %d).\n", filename, res);
 80016b4:	f897 226f 	ldrb.w	r2, [r7, #623]	@ 0x26f
 80016b8:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 80016bc:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 80016c0:	6819      	ldr	r1, [r3, #0]
 80016c2:	4843      	ldr	r0, [pc, #268]	@ (80017d0 <ReadWAVFileInfo+0x150>)
 80016c4:	f010 fa5e 	bl	8011b84 <iprintf>
        return;
 80016c8:	e07d      	b.n	80017c6 <ReadWAVFileInfo+0x146>
    }

    // Read the WAV file header
    res = f_read(&file, &header, sizeof(WAV_Header), &bytesRead);
 80016ca:	f107 030c 	add.w	r3, r7, #12
 80016ce:	f107 0110 	add.w	r1, r7, #16
 80016d2:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 80016d6:	222c      	movs	r2, #44	@ 0x2c
 80016d8:	f00b fbda 	bl	800ce90 <f_read>
 80016dc:	4603      	mov	r3, r0
 80016de:	f887 326f 	strb.w	r3, [r7, #623]	@ 0x26f
    if (res != FR_OK || bytesRead != sizeof(WAV_Header)) {
 80016e2:	f897 326f 	ldrb.w	r3, [r7, #623]	@ 0x26f
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d106      	bne.n	80016f8 <ReadWAVFileInfo+0x78>
 80016ea:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 80016ee:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2b2c      	cmp	r3, #44	@ 0x2c
 80016f6:	d00b      	beq.n	8001710 <ReadWAVFileInfo+0x90>
        printf("Error: Failed to read WAV file header (Code: %d).\n", res);
 80016f8:	f897 326f 	ldrb.w	r3, [r7, #623]	@ 0x26f
 80016fc:	4619      	mov	r1, r3
 80016fe:	4835      	ldr	r0, [pc, #212]	@ (80017d4 <ReadWAVFileInfo+0x154>)
 8001700:	f010 fa40 	bl	8011b84 <iprintf>
        f_close(&file);
 8001704:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001708:	4618      	mov	r0, r3
 800170a:	f00b fef3 	bl	800d4f4 <f_close>
        return;
 800170e:	e05a      	b.n	80017c6 <ReadWAVFileInfo+0x146>
    }

    // Print WAV file information
    printf("WAV File Info:\r\n");
 8001710:	4831      	ldr	r0, [pc, #196]	@ (80017d8 <ReadWAVFileInfo+0x158>)
 8001712:	f010 fa9f 	bl	8011c54 <puts>
    printf("  ChunkID: %.4s\r\n", header.ChunkID);
 8001716:	f107 0310 	add.w	r3, r7, #16
 800171a:	4619      	mov	r1, r3
 800171c:	482f      	ldr	r0, [pc, #188]	@ (80017dc <ReadWAVFileInfo+0x15c>)
 800171e:	f010 fa31 	bl	8011b84 <iprintf>
    printf("  Format: %.4s\r\n", header.Format);
 8001722:	f107 0310 	add.w	r3, r7, #16
 8001726:	3308      	adds	r3, #8
 8001728:	4619      	mov	r1, r3
 800172a:	482d      	ldr	r0, [pc, #180]	@ (80017e0 <ReadWAVFileInfo+0x160>)
 800172c:	f010 fa2a 	bl	8011b84 <iprintf>
    printf("  Audio Format: %d\r\n", header.AudioFormat);
 8001730:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8001734:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8001738:	8a9b      	ldrh	r3, [r3, #20]
 800173a:	4619      	mov	r1, r3
 800173c:	4829      	ldr	r0, [pc, #164]	@ (80017e4 <ReadWAVFileInfo+0x164>)
 800173e:	f010 fa21 	bl	8011b84 <iprintf>
    printf("  Number of Channels: %d\r\n", header.NumChannels);
 8001742:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8001746:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 800174a:	8adb      	ldrh	r3, [r3, #22]
 800174c:	4619      	mov	r1, r3
 800174e:	4826      	ldr	r0, [pc, #152]	@ (80017e8 <ReadWAVFileInfo+0x168>)
 8001750:	f010 fa18 	bl	8011b84 <iprintf>
    printf("  Sample Rate: %d Hz\r\n", header.SampleRate);
 8001754:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8001758:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 800175c:	699b      	ldr	r3, [r3, #24]
 800175e:	4619      	mov	r1, r3
 8001760:	4822      	ldr	r0, [pc, #136]	@ (80017ec <ReadWAVFileInfo+0x16c>)
 8001762:	f010 fa0f 	bl	8011b84 <iprintf>
    printf("  Byte Rate: %d\r\n", header.ByteRate);
 8001766:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 800176a:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 800176e:	69db      	ldr	r3, [r3, #28]
 8001770:	4619      	mov	r1, r3
 8001772:	481f      	ldr	r0, [pc, #124]	@ (80017f0 <ReadWAVFileInfo+0x170>)
 8001774:	f010 fa06 	bl	8011b84 <iprintf>
    printf("  Block Align: %d\r\n", header.BlockAlign);
 8001778:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 800177c:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8001780:	8c1b      	ldrh	r3, [r3, #32]
 8001782:	4619      	mov	r1, r3
 8001784:	481b      	ldr	r0, [pc, #108]	@ (80017f4 <ReadWAVFileInfo+0x174>)
 8001786:	f010 f9fd 	bl	8011b84 <iprintf>
    printf("  Bits Per Sample: %d\r\n", header.BitsPerSample);
 800178a:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 800178e:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8001792:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8001794:	4619      	mov	r1, r3
 8001796:	4818      	ldr	r0, [pc, #96]	@ (80017f8 <ReadWAVFileInfo+0x178>)
 8001798:	f010 f9f4 	bl	8011b84 <iprintf>
    printf("  Subchunk2ID: %.4s\r\n", header.Subchunk2ID);
 800179c:	f107 0310 	add.w	r3, r7, #16
 80017a0:	3324      	adds	r3, #36	@ 0x24
 80017a2:	4619      	mov	r1, r3
 80017a4:	4815      	ldr	r0, [pc, #84]	@ (80017fc <ReadWAVFileInfo+0x17c>)
 80017a6:	f010 f9ed 	bl	8011b84 <iprintf>
    printf("  Subchunk2Size: %d bytes\r\n", header.Subchunk2Size);
 80017aa:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 80017ae:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 80017b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017b4:	4619      	mov	r1, r3
 80017b6:	4812      	ldr	r0, [pc, #72]	@ (8001800 <ReadWAVFileInfo+0x180>)
 80017b8:	f010 f9e4 	bl	8011b84 <iprintf>

    // Close the file
    f_close(&file);
 80017bc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80017c0:	4618      	mov	r0, r3
 80017c2:	f00b fe97 	bl	800d4f4 <f_close>
}
 80017c6:	f507 771c 	add.w	r7, r7, #624	@ 0x270
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	08013bfc 	.word	0x08013bfc
 80017d4:	08013c2c 	.word	0x08013c2c
 80017d8:	08013c60 	.word	0x08013c60
 80017dc:	08013c70 	.word	0x08013c70
 80017e0:	08013c84 	.word	0x08013c84
 80017e4:	08013c98 	.word	0x08013c98
 80017e8:	08013cb0 	.word	0x08013cb0
 80017ec:	08013ccc 	.word	0x08013ccc
 80017f0:	08013ce4 	.word	0x08013ce4
 80017f4:	08013cf8 	.word	0x08013cf8
 80017f8:	08013d0c 	.word	0x08013d0c
 80017fc:	08013d24 	.word	0x08013d24
 8001800:	08013d3c 	.word	0x08013d3c

08001804 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001808:	b672      	cpsid	i
}
 800180a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800180c:	bf00      	nop
 800180e:	e7fd      	b.n	800180c <Error_Handler+0x8>

08001810 <MX_SAI1_Init>:
SAI_HandleTypeDef hsai_BlockA1;
DMA_HandleTypeDef hdma_sai1_a;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 8001814:	4b27      	ldr	r3, [pc, #156]	@ (80018b4 <MX_SAI1_Init+0xa4>)
 8001816:	4a28      	ldr	r2, [pc, #160]	@ (80018b8 <MX_SAI1_Init+0xa8>)
 8001818:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 800181a:	4b26      	ldr	r3, [pc, #152]	@ (80018b4 <MX_SAI1_Init+0xa4>)
 800181c:	2200      	movs	r2, #0
 800181e:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_RX;
 8001820:	4b24      	ldr	r3, [pc, #144]	@ (80018b4 <MX_SAI1_Init+0xa4>)
 8001822:	2201      	movs	r2, #1
 8001824:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_16;
 8001826:	4b23      	ldr	r3, [pc, #140]	@ (80018b4 <MX_SAI1_Init+0xa4>)
 8001828:	2280      	movs	r2, #128	@ 0x80
 800182a:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800182c:	4b21      	ldr	r3, [pc, #132]	@ (80018b4 <MX_SAI1_Init+0xa4>)
 800182e:	2200      	movs	r2, #0
 8001830:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001832:	4b20      	ldr	r3, [pc, #128]	@ (80018b4 <MX_SAI1_Init+0xa4>)
 8001834:	2200      	movs	r2, #0
 8001836:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8001838:	4b1e      	ldr	r3, [pc, #120]	@ (80018b4 <MX_SAI1_Init+0xa4>)
 800183a:	2200      	movs	r2, #0
 800183c:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800183e:	4b1d      	ldr	r3, [pc, #116]	@ (80018b4 <MX_SAI1_Init+0xa4>)
 8001840:	2200      	movs	r2, #0
 8001842:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001844:	4b1b      	ldr	r3, [pc, #108]	@ (80018b4 <MX_SAI1_Init+0xa4>)
 8001846:	2200      	movs	r2, #0
 8001848:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800184a:	4b1a      	ldr	r3, [pc, #104]	@ (80018b4 <MX_SAI1_Init+0xa4>)
 800184c:	2200      	movs	r2, #0
 800184e:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_16K;
 8001850:	4b18      	ldr	r3, [pc, #96]	@ (80018b4 <MX_SAI1_Init+0xa4>)
 8001852:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8001856:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001858:	4b16      	ldr	r3, [pc, #88]	@ (80018b4 <MX_SAI1_Init+0xa4>)
 800185a:	2200      	movs	r2, #0
 800185c:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 800185e:	4b15      	ldr	r3, [pc, #84]	@ (80018b4 <MX_SAI1_Init+0xa4>)
 8001860:	2200      	movs	r2, #0
 8001862:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001864:	4b13      	ldr	r3, [pc, #76]	@ (80018b4 <MX_SAI1_Init+0xa4>)
 8001866:	2200      	movs	r2, #0
 8001868:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA1.FrameInit.FrameLength = 16;
 800186a:	4b12      	ldr	r3, [pc, #72]	@ (80018b4 <MX_SAI1_Init+0xa4>)
 800186c:	2210      	movs	r2, #16
 800186e:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8001870:	4b10      	ldr	r3, [pc, #64]	@ (80018b4 <MX_SAI1_Init+0xa4>)
 8001872:	2201      	movs	r2, #1
 8001874:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001876:	4b0f      	ldr	r3, [pc, #60]	@ (80018b4 <MX_SAI1_Init+0xa4>)
 8001878:	2200      	movs	r2, #0
 800187a:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800187c:	4b0d      	ldr	r3, [pc, #52]	@ (80018b4 <MX_SAI1_Init+0xa4>)
 800187e:	2200      	movs	r2, #0
 8001880:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001882:	4b0c      	ldr	r3, [pc, #48]	@ (80018b4 <MX_SAI1_Init+0xa4>)
 8001884:	2200      	movs	r2, #0
 8001886:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8001888:	4b0a      	ldr	r3, [pc, #40]	@ (80018b4 <MX_SAI1_Init+0xa4>)
 800188a:	2200      	movs	r2, #0
 800188c:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800188e:	4b09      	ldr	r3, [pc, #36]	@ (80018b4 <MX_SAI1_Init+0xa4>)
 8001890:	2200      	movs	r2, #0
 8001892:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8001894:	4b07      	ldr	r3, [pc, #28]	@ (80018b4 <MX_SAI1_Init+0xa4>)
 8001896:	2201      	movs	r2, #1
 8001898:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 800189a:	4b06      	ldr	r3, [pc, #24]	@ (80018b4 <MX_SAI1_Init+0xa4>)
 800189c:	2200      	movs	r2, #0
 800189e:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 80018a0:	4804      	ldr	r0, [pc, #16]	@ (80018b4 <MX_SAI1_Init+0xa4>)
 80018a2:	f005 fef9 	bl	8007698 <HAL_SAI_Init>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <MX_SAI1_Init+0xa0>
  {
    Error_Handler();
 80018ac:	f7ff ffaa 	bl	8001804 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 80018b0:	bf00      	nop
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	200009f4 	.word	0x200009f4
 80018b8:	40015804 	.word	0x40015804

080018bc <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b0aa      	sub	sp, #168	@ 0xa8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018c4:	f107 0310 	add.w	r3, r7, #16
 80018c8:	2284      	movs	r2, #132	@ 0x84
 80018ca:	2100      	movs	r1, #0
 80018cc:	4618      	mov	r0, r3
 80018ce:	f010 faa1 	bl	8011e14 <memset>
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a41      	ldr	r2, [pc, #260]	@ (80019dc <HAL_SAI_MspInit+0x120>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d17b      	bne.n	80019d4 <HAL_SAI_MspInit+0x118>
    {
    /* SAI1 clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 80018dc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80018e0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 80018e2:	2332      	movs	r3, #50	@ 0x32
 80018e4:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80018e6:	2302      	movs	r3, #2
 80018e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80018ea:	2302      	movs	r3, #2
 80018ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 80018ee:	2300      	movs	r3, #0
 80018f0:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 80018f2:	2301      	movs	r3, #1
 80018f4:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80018f6:	2300      	movs	r3, #0
 80018f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI;
 80018fa:	2300      	movs	r3, #0
 80018fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018fe:	f107 0310 	add.w	r3, r7, #16
 8001902:	4618      	mov	r0, r3
 8001904:	f005 f88c 	bl	8006a20 <HAL_RCCEx_PeriphCLKConfig>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <HAL_SAI_MspInit+0x56>
    {
      Error_Handler();
 800190e:	f7ff ff79 	bl	8001804 <Error_Handler>
    }

    if (SAI1_client == 0)
 8001912:	4b33      	ldr	r3, [pc, #204]	@ (80019e0 <HAL_SAI_MspInit+0x124>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d10b      	bne.n	8001932 <HAL_SAI_MspInit+0x76>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800191a:	4b32      	ldr	r3, [pc, #200]	@ (80019e4 <HAL_SAI_MspInit+0x128>)
 800191c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800191e:	4a31      	ldr	r2, [pc, #196]	@ (80019e4 <HAL_SAI_MspInit+0x128>)
 8001920:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001924:	6453      	str	r3, [r2, #68]	@ 0x44
 8001926:	4b2f      	ldr	r3, [pc, #188]	@ (80019e4 <HAL_SAI_MspInit+0x128>)
 8001928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800192a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800192e:	60fb      	str	r3, [r7, #12]
 8001930:	68fb      	ldr	r3, [r7, #12]
    }
    SAI1_client ++;
 8001932:	4b2b      	ldr	r3, [pc, #172]	@ (80019e0 <HAL_SAI_MspInit+0x124>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	3301      	adds	r3, #1
 8001938:	4a29      	ldr	r2, [pc, #164]	@ (80019e0 <HAL_SAI_MspInit+0x124>)
 800193a:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800193c:	2370      	movs	r3, #112	@ 0x70
 800193e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001942:	2302      	movs	r3, #2
 8001944:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001948:	2300      	movs	r3, #0
 800194a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800194e:	2300      	movs	r3, #0
 8001950:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001954:	2306      	movs	r3, #6
 8001956:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800195a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800195e:	4619      	mov	r1, r3
 8001960:	4821      	ldr	r0, [pc, #132]	@ (80019e8 <HAL_SAI_MspInit+0x12c>)
 8001962:	f003 fa89 	bl	8004e78 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA2_Stream1;
 8001966:	4b21      	ldr	r3, [pc, #132]	@ (80019ec <HAL_SAI_MspInit+0x130>)
 8001968:	4a21      	ldr	r2, [pc, #132]	@ (80019f0 <HAL_SAI_MspInit+0x134>)
 800196a:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Channel = DMA_CHANNEL_0;
 800196c:	4b1f      	ldr	r3, [pc, #124]	@ (80019ec <HAL_SAI_MspInit+0x130>)
 800196e:	2200      	movs	r2, #0
 8001970:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001972:	4b1e      	ldr	r3, [pc, #120]	@ (80019ec <HAL_SAI_MspInit+0x130>)
 8001974:	2200      	movs	r2, #0
 8001976:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8001978:	4b1c      	ldr	r3, [pc, #112]	@ (80019ec <HAL_SAI_MspInit+0x130>)
 800197a:	2200      	movs	r2, #0
 800197c:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 800197e:	4b1b      	ldr	r3, [pc, #108]	@ (80019ec <HAL_SAI_MspInit+0x130>)
 8001980:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001984:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001986:	4b19      	ldr	r3, [pc, #100]	@ (80019ec <HAL_SAI_MspInit+0x130>)
 8001988:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800198c:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800198e:	4b17      	ldr	r3, [pc, #92]	@ (80019ec <HAL_SAI_MspInit+0x130>)
 8001990:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001994:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 8001996:	4b15      	ldr	r3, [pc, #84]	@ (80019ec <HAL_SAI_MspInit+0x130>)
 8001998:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800199c:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_HIGH;
 800199e:	4b13      	ldr	r3, [pc, #76]	@ (80019ec <HAL_SAI_MspInit+0x130>)
 80019a0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80019a4:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019a6:	4b11      	ldr	r3, [pc, #68]	@ (80019ec <HAL_SAI_MspInit+0x130>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 80019ac:	480f      	ldr	r0, [pc, #60]	@ (80019ec <HAL_SAI_MspInit+0x130>)
 80019ae:	f002 fdef 	bl	8004590 <HAL_DMA_Init>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <HAL_SAI_MspInit+0x100>
    {
      Error_Handler();
 80019b8:	f7ff ff24 	bl	8001804 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	4a0b      	ldr	r2, [pc, #44]	@ (80019ec <HAL_SAI_MspInit+0x130>)
 80019c0:	671a      	str	r2, [r3, #112]	@ 0x70
 80019c2:	4a0a      	ldr	r2, [pc, #40]	@ (80019ec <HAL_SAI_MspInit+0x130>)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	4a08      	ldr	r2, [pc, #32]	@ (80019ec <HAL_SAI_MspInit+0x130>)
 80019cc:	66da      	str	r2, [r3, #108]	@ 0x6c
 80019ce:	4a07      	ldr	r2, [pc, #28]	@ (80019ec <HAL_SAI_MspInit+0x130>)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6393      	str	r3, [r2, #56]	@ 0x38
    }
}
 80019d4:	bf00      	nop
 80019d6:	37a8      	adds	r7, #168	@ 0xa8
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	40015804 	.word	0x40015804
 80019e0:	20000ad8 	.word	0x20000ad8
 80019e4:	40023800 	.word	0x40023800
 80019e8:	40021000 	.word	0x40021000
 80019ec:	20000a78 	.word	0x20000a78
 80019f0:	40026428 	.word	0x40026428

080019f4 <HAL_SAI_MspDeInit>:

void HAL_SAI_MspDeInit(SAI_HandleTypeDef* saiHandle)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]

/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a11      	ldr	r2, [pc, #68]	@ (8001a48 <HAL_SAI_MspDeInit+0x54>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d11c      	bne.n	8001a40 <HAL_SAI_MspDeInit+0x4c>
    {
    SAI1_client --;
 8001a06:	4b11      	ldr	r3, [pc, #68]	@ (8001a4c <HAL_SAI_MspDeInit+0x58>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	3b01      	subs	r3, #1
 8001a0c:	4a0f      	ldr	r2, [pc, #60]	@ (8001a4c <HAL_SAI_MspDeInit+0x58>)
 8001a0e:	6013      	str	r3, [r2, #0]
    if (SAI1_client == 0)
 8001a10:	4b0e      	ldr	r3, [pc, #56]	@ (8001a4c <HAL_SAI_MspDeInit+0x58>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d105      	bne.n	8001a24 <HAL_SAI_MspDeInit+0x30>
      {
      /* Peripheral clock disable */
       __HAL_RCC_SAI1_CLK_DISABLE();
 8001a18:	4b0d      	ldr	r3, [pc, #52]	@ (8001a50 <HAL_SAI_MspDeInit+0x5c>)
 8001a1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a1c:	4a0c      	ldr	r2, [pc, #48]	@ (8001a50 <HAL_SAI_MspDeInit+0x5c>)
 8001a1e:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001a22:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SAI1_A_Block_A GPIO Configuration
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6);
 8001a24:	2170      	movs	r1, #112	@ 0x70
 8001a26:	480b      	ldr	r0, [pc, #44]	@ (8001a54 <HAL_SAI_MspDeInit+0x60>)
 8001a28:	f003 fbd2 	bl	80051d0 <HAL_GPIO_DeInit>

    HAL_DMA_DeInit(saiHandle->hdmarx);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a30:	4618      	mov	r0, r3
 8001a32:	f002 fe5b 	bl	80046ec <HAL_DMA_DeInit>
    HAL_DMA_DeInit(saiHandle->hdmatx);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f002 fe56 	bl	80046ec <HAL_DMA_DeInit>
    }
}
 8001a40:	bf00      	nop
 8001a42:	3708      	adds	r7, #8
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	40015804 	.word	0x40015804
 8001a4c:	20000ad8 	.word	0x20000ad8
 8001a50:	40023800 	.word	0x40023800
 8001a54:	40021000 	.word	0x40021000

08001a58 <MX_SDMMC1_SD_Init>:
DMA_HandleTypeDef hdma_sdmmc1_tx;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001a5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001a90 <MX_SDMMC1_SD_Init+0x38>)
 8001a5e:	4a0d      	ldr	r2, [pc, #52]	@ (8001a94 <MX_SDMMC1_SD_Init+0x3c>)
 8001a60:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001a62:	4b0b      	ldr	r3, [pc, #44]	@ (8001a90 <MX_SDMMC1_SD_Init+0x38>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001a68:	4b09      	ldr	r3, [pc, #36]	@ (8001a90 <MX_SDMMC1_SD_Init+0x38>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001a6e:	4b08      	ldr	r3, [pc, #32]	@ (8001a90 <MX_SDMMC1_SD_Init+0x38>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001a74:	4b06      	ldr	r3, [pc, #24]	@ (8001a90 <MX_SDMMC1_SD_Init+0x38>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001a7a:	4b05      	ldr	r3, [pc, #20]	@ (8001a90 <MX_SDMMC1_SD_Init+0x38>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8001a80:	4b03      	ldr	r3, [pc, #12]	@ (8001a90 <MX_SDMMC1_SD_Init+0x38>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001a86:	bf00      	nop
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr
 8001a90:	20000adc 	.word	0x20000adc
 8001a94:	40012c00 	.word	0x40012c00

08001a98 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b0ac      	sub	sp, #176	@ 0xb0
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	605a      	str	r2, [r3, #4]
 8001aaa:	609a      	str	r2, [r3, #8]
 8001aac:	60da      	str	r2, [r3, #12]
 8001aae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ab0:	f107 0318 	add.w	r3, r7, #24
 8001ab4:	2284      	movs	r2, #132	@ 0x84
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f010 f9ab 	bl	8011e14 <memset>
  if(sdHandle->Instance==SDMMC1)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a74      	ldr	r2, [pc, #464]	@ (8001c94 <HAL_SD_MspInit+0x1fc>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	f040 80e0 	bne.w	8001c8a <HAL_SD_MspInit+0x1f2>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 8001aca:	f44f 0320 	mov.w	r3, #10485760	@ 0xa00000
 8001ace:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001adc:	f107 0318 	add.w	r3, r7, #24
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f004 ff9d 	bl	8006a20 <HAL_RCCEx_PeriphCLKConfig>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <HAL_SD_MspInit+0x58>
    {
      Error_Handler();
 8001aec:	f7ff fe8a 	bl	8001804 <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001af0:	4b69      	ldr	r3, [pc, #420]	@ (8001c98 <HAL_SD_MspInit+0x200>)
 8001af2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001af4:	4a68      	ldr	r2, [pc, #416]	@ (8001c98 <HAL_SD_MspInit+0x200>)
 8001af6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001afa:	6453      	str	r3, [r2, #68]	@ 0x44
 8001afc:	4b66      	ldr	r3, [pc, #408]	@ (8001c98 <HAL_SD_MspInit+0x200>)
 8001afe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b04:	617b      	str	r3, [r7, #20]
 8001b06:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b08:	4b63      	ldr	r3, [pc, #396]	@ (8001c98 <HAL_SD_MspInit+0x200>)
 8001b0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b0c:	4a62      	ldr	r2, [pc, #392]	@ (8001c98 <HAL_SD_MspInit+0x200>)
 8001b0e:	f043 0304 	orr.w	r3, r3, #4
 8001b12:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b14:	4b60      	ldr	r3, [pc, #384]	@ (8001c98 <HAL_SD_MspInit+0x200>)
 8001b16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b18:	f003 0304 	and.w	r3, r3, #4
 8001b1c:	613b      	str	r3, [r7, #16]
 8001b1e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b20:	4b5d      	ldr	r3, [pc, #372]	@ (8001c98 <HAL_SD_MspInit+0x200>)
 8001b22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b24:	4a5c      	ldr	r2, [pc, #368]	@ (8001c98 <HAL_SD_MspInit+0x200>)
 8001b26:	f043 0308 	orr.w	r3, r3, #8
 8001b2a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b2c:	4b5a      	ldr	r3, [pc, #360]	@ (8001c98 <HAL_SD_MspInit+0x200>)
 8001b2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b30:	f003 0308 	and.w	r3, r3, #8
 8001b34:	60fb      	str	r3, [r7, #12]
 8001b36:	68fb      	ldr	r3, [r7, #12]
    /**SDMMC1 GPIO Configuration
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_8;
 8001b38:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8001b3c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b40:	2302      	movs	r3, #2
 8001b42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b46:	2300      	movs	r3, #0
 8001b48:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001b52:	230c      	movs	r3, #12
 8001b54:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b58:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	484f      	ldr	r0, [pc, #316]	@ (8001c9c <HAL_SD_MspInit+0x204>)
 8001b60:	f003 f98a 	bl	8004e78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001b64:	2304      	movs	r3, #4
 8001b66:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b70:	2300      	movs	r3, #0
 8001b72:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b76:	2303      	movs	r3, #3
 8001b78:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001b7c:	230c      	movs	r3, #12
 8001b7e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b82:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001b86:	4619      	mov	r1, r3
 8001b88:	4845      	ldr	r0, [pc, #276]	@ (8001ca0 <HAL_SD_MspInit+0x208>)
 8001b8a:	f003 f975 	bl	8004e78 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 8001b8e:	4b45      	ldr	r3, [pc, #276]	@ (8001ca4 <HAL_SD_MspInit+0x20c>)
 8001b90:	4a45      	ldr	r2, [pc, #276]	@ (8001ca8 <HAL_SD_MspInit+0x210>)
 8001b92:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 8001b94:	4b43      	ldr	r3, [pc, #268]	@ (8001ca4 <HAL_SD_MspInit+0x20c>)
 8001b96:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001b9a:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b9c:	4b41      	ldr	r3, [pc, #260]	@ (8001ca4 <HAL_SD_MspInit+0x20c>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ba2:	4b40      	ldr	r3, [pc, #256]	@ (8001ca4 <HAL_SD_MspInit+0x20c>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ba8:	4b3e      	ldr	r3, [pc, #248]	@ (8001ca4 <HAL_SD_MspInit+0x20c>)
 8001baa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001bae:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001bb0:	4b3c      	ldr	r3, [pc, #240]	@ (8001ca4 <HAL_SD_MspInit+0x20c>)
 8001bb2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001bb6:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001bb8:	4b3a      	ldr	r3, [pc, #232]	@ (8001ca4 <HAL_SD_MspInit+0x20c>)
 8001bba:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001bbe:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8001bc0:	4b38      	ldr	r3, [pc, #224]	@ (8001ca4 <HAL_SD_MspInit+0x20c>)
 8001bc2:	2220      	movs	r2, #32
 8001bc4:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001bc6:	4b37      	ldr	r3, [pc, #220]	@ (8001ca4 <HAL_SD_MspInit+0x20c>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001bcc:	4b35      	ldr	r3, [pc, #212]	@ (8001ca4 <HAL_SD_MspInit+0x20c>)
 8001bce:	2204      	movs	r2, #4
 8001bd0:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001bd2:	4b34      	ldr	r3, [pc, #208]	@ (8001ca4 <HAL_SD_MspInit+0x20c>)
 8001bd4:	2203      	movs	r2, #3
 8001bd6:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 8001bd8:	4b32      	ldr	r3, [pc, #200]	@ (8001ca4 <HAL_SD_MspInit+0x20c>)
 8001bda:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001bde:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001be0:	4b30      	ldr	r3, [pc, #192]	@ (8001ca4 <HAL_SD_MspInit+0x20c>)
 8001be2:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001be6:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8001be8:	482e      	ldr	r0, [pc, #184]	@ (8001ca4 <HAL_SD_MspInit+0x20c>)
 8001bea:	f002 fcd1 	bl	8004590 <HAL_DMA_Init>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <HAL_SD_MspInit+0x160>
    {
      Error_Handler();
 8001bf4:	f7ff fe06 	bl	8001804 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdmmc1_rx);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	4a2a      	ldr	r2, [pc, #168]	@ (8001ca4 <HAL_SD_MspInit+0x20c>)
 8001bfc:	641a      	str	r2, [r3, #64]	@ 0x40
 8001bfe:	4a29      	ldr	r2, [pc, #164]	@ (8001ca4 <HAL_SD_MspInit+0x20c>)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 8001c04:	4b29      	ldr	r3, [pc, #164]	@ (8001cac <HAL_SD_MspInit+0x214>)
 8001c06:	4a2a      	ldr	r2, [pc, #168]	@ (8001cb0 <HAL_SD_MspInit+0x218>)
 8001c08:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 8001c0a:	4b28      	ldr	r3, [pc, #160]	@ (8001cac <HAL_SD_MspInit+0x214>)
 8001c0c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001c10:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c12:	4b26      	ldr	r3, [pc, #152]	@ (8001cac <HAL_SD_MspInit+0x214>)
 8001c14:	2240      	movs	r2, #64	@ 0x40
 8001c16:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c18:	4b24      	ldr	r3, [pc, #144]	@ (8001cac <HAL_SD_MspInit+0x214>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c1e:	4b23      	ldr	r3, [pc, #140]	@ (8001cac <HAL_SD_MspInit+0x214>)
 8001c20:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c24:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001c26:	4b21      	ldr	r3, [pc, #132]	@ (8001cac <HAL_SD_MspInit+0x214>)
 8001c28:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001c2c:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001c2e:	4b1f      	ldr	r3, [pc, #124]	@ (8001cac <HAL_SD_MspInit+0x214>)
 8001c30:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001c34:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 8001c36:	4b1d      	ldr	r3, [pc, #116]	@ (8001cac <HAL_SD_MspInit+0x214>)
 8001c38:	2220      	movs	r2, #32
 8001c3a:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c3c:	4b1b      	ldr	r3, [pc, #108]	@ (8001cac <HAL_SD_MspInit+0x214>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001c42:	4b1a      	ldr	r3, [pc, #104]	@ (8001cac <HAL_SD_MspInit+0x214>)
 8001c44:	2204      	movs	r2, #4
 8001c46:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001c48:	4b18      	ldr	r3, [pc, #96]	@ (8001cac <HAL_SD_MspInit+0x214>)
 8001c4a:	2203      	movs	r2, #3
 8001c4c:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 8001c4e:	4b17      	ldr	r3, [pc, #92]	@ (8001cac <HAL_SD_MspInit+0x214>)
 8001c50:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001c54:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001c56:	4b15      	ldr	r3, [pc, #84]	@ (8001cac <HAL_SD_MspInit+0x214>)
 8001c58:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001c5c:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 8001c5e:	4813      	ldr	r0, [pc, #76]	@ (8001cac <HAL_SD_MspInit+0x214>)
 8001c60:	f002 fc96 	bl	8004590 <HAL_DMA_Init>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <HAL_SD_MspInit+0x1d6>
    {
      Error_Handler();
 8001c6a:	f7ff fdcb 	bl	8001804 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdmmc1_tx);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a0e      	ldr	r2, [pc, #56]	@ (8001cac <HAL_SD_MspInit+0x214>)
 8001c72:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001c74:	4a0d      	ldr	r2, [pc, #52]	@ (8001cac <HAL_SD_MspInit+0x214>)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 1, 0);
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	2101      	movs	r1, #1
 8001c7e:	2031      	movs	r0, #49	@ 0x31
 8001c80:	f002 fc4f 	bl	8004522 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001c84:	2031      	movs	r0, #49	@ 0x31
 8001c86:	f002 fc68 	bl	800455a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8001c8a:	bf00      	nop
 8001c8c:	37b0      	adds	r7, #176	@ 0xb0
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	40012c00 	.word	0x40012c00
 8001c98:	40023800 	.word	0x40023800
 8001c9c:	40020800 	.word	0x40020800
 8001ca0:	40020c00 	.word	0x40020c00
 8001ca4:	20000b60 	.word	0x20000b60
 8001ca8:	40026458 	.word	0x40026458
 8001cac:	20000bc0 	.word	0x20000bc0
 8001cb0:	400264a0 	.word	0x400264a0

08001cb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001cba:	4b0f      	ldr	r3, [pc, #60]	@ (8001cf8 <HAL_MspInit+0x44>)
 8001cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cbe:	4a0e      	ldr	r2, [pc, #56]	@ (8001cf8 <HAL_MspInit+0x44>)
 8001cc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cc4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cc6:	4b0c      	ldr	r3, [pc, #48]	@ (8001cf8 <HAL_MspInit+0x44>)
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cce:	607b      	str	r3, [r7, #4]
 8001cd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cd2:	4b09      	ldr	r3, [pc, #36]	@ (8001cf8 <HAL_MspInit+0x44>)
 8001cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cd6:	4a08      	ldr	r2, [pc, #32]	@ (8001cf8 <HAL_MspInit+0x44>)
 8001cd8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cdc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cde:	4b06      	ldr	r3, [pc, #24]	@ (8001cf8 <HAL_MspInit+0x44>)
 8001ce0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ce2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ce6:	603b      	str	r3, [r7, #0]
 8001ce8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cea:	bf00      	nop
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	40023800 	.word	0x40023800

08001cfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d00:	bf00      	nop
 8001d02:	e7fd      	b.n	8001d00 <NMI_Handler+0x4>

08001d04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d08:	bf00      	nop
 8001d0a:	e7fd      	b.n	8001d08 <HardFault_Handler+0x4>

08001d0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d10:	bf00      	nop
 8001d12:	e7fd      	b.n	8001d10 <MemManage_Handler+0x4>

08001d14 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d18:	bf00      	nop
 8001d1a:	e7fd      	b.n	8001d18 <BusFault_Handler+0x4>

08001d1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d20:	bf00      	nop
 8001d22:	e7fd      	b.n	8001d20 <UsageFault_Handler+0x4>

08001d24 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d28:	bf00      	nop
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr

08001d32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d32:	b480      	push	{r7}
 8001d34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d36:	bf00      	nop
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d44:	bf00      	nop
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr

08001d4e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d52:	f002 fac7 	bl	80042e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d56:	bf00      	nop
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 8001d5e:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001d62:	f003 fb8d 	bl	8005480 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001d66:	bf00      	nop
 8001d68:	bd80      	pop	{r7, pc}
	...

08001d6c <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001d70:	4802      	ldr	r0, [pc, #8]	@ (8001d7c <SDMMC1_IRQHandler+0x10>)
 8001d72:	f006 fab3 	bl	80082dc <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8001d76:	bf00      	nop
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	20000adc 	.word	0x20000adc

08001d80 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8001d84:	4802      	ldr	r0, [pc, #8]	@ (8001d90 <DMA2_Stream1_IRQHandler+0x10>)
 8001d86:	f002 fe01 	bl	800498c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001d8a:	bf00      	nop
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	20000a78 	.word	0x20000a78

08001d94 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8001d98:	4802      	ldr	r0, [pc, #8]	@ (8001da4 <DMA2_Stream3_IRQHandler+0x10>)
 8001d9a:	f002 fdf7 	bl	800498c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001d9e:	bf00      	nop
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	20000b60 	.word	0x20000b60

08001da8 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8001dac:	4802      	ldr	r0, [pc, #8]	@ (8001db8 <DMA2_Stream6_IRQHandler+0x10>)
 8001dae:	f002 fded 	bl	800498c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001db2:	bf00      	nop
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	20000bc0 	.word	0x20000bc0

08001dbc <DMA2_Stream7_IRQHandler>:
  * @brief This function handles DMA2 Stream 7 interrupt request.
  * @param None
  * @retval None
  */
void AUDIO_IN_SAIx_DMAx_IRQHandler(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
	//extern SAI_HandleTypeDef haudio_in_sai;
	HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
 8001dc0:	4b03      	ldr	r3, [pc, #12]	@ (8001dd0 <DMA2_Stream7_IRQHandler+0x14>)
 8001dc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f002 fde1 	bl	800498c <HAL_DMA_IRQHandler>
}
 8001dca:	bf00      	nop
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	20000d90 	.word	0x20000d90

08001dd4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  return 1;
 8001dd8:	2301      	movs	r3, #1
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <_kill>:

int _kill(int pid, int sig)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001dee:	f010 f873 	bl	8011ed8 <__errno>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2216      	movs	r2, #22
 8001df6:	601a      	str	r2, [r3, #0]
  return -1;
 8001df8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3708      	adds	r7, #8
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <_exit>:

void _exit (int status)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f7ff ffe7 	bl	8001de4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e16:	bf00      	nop
 8001e18:	e7fd      	b.n	8001e16 <_exit+0x12>

08001e1a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b086      	sub	sp, #24
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	60f8      	str	r0, [r7, #12]
 8001e22:	60b9      	str	r1, [r7, #8]
 8001e24:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e26:	2300      	movs	r3, #0
 8001e28:	617b      	str	r3, [r7, #20]
 8001e2a:	e00a      	b.n	8001e42 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e2c:	f3af 8000 	nop.w
 8001e30:	4601      	mov	r1, r0
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	1c5a      	adds	r2, r3, #1
 8001e36:	60ba      	str	r2, [r7, #8]
 8001e38:	b2ca      	uxtb	r2, r1
 8001e3a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	3301      	adds	r3, #1
 8001e40:	617b      	str	r3, [r7, #20]
 8001e42:	697a      	ldr	r2, [r7, #20]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	429a      	cmp	r2, r3
 8001e48:	dbf0      	blt.n	8001e2c <_read+0x12>
  }

  return len;
 8001e4a:	687b      	ldr	r3, [r7, #4]
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3718      	adds	r7, #24
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b086      	sub	sp, #24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	60f8      	str	r0, [r7, #12]
 8001e5c:	60b9      	str	r1, [r7, #8]
 8001e5e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e60:	2300      	movs	r3, #0
 8001e62:	617b      	str	r3, [r7, #20]
 8001e64:	e009      	b.n	8001e7a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	1c5a      	adds	r2, r3, #1
 8001e6a:	60ba      	str	r2, [r7, #8]
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7ff fbc4 	bl	80015fc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	3301      	adds	r3, #1
 8001e78:	617b      	str	r3, [r7, #20]
 8001e7a:	697a      	ldr	r2, [r7, #20]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	dbf1      	blt.n	8001e66 <_write+0x12>
  }
  return len;
 8001e82:	687b      	ldr	r3, [r7, #4]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3718      	adds	r7, #24
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <_close>:

int _close(int file)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e94:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001eb4:	605a      	str	r2, [r3, #4]
  return 0;
 8001eb6:	2300      	movs	r3, #0
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <_isatty>:

int _isatty(int file)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ecc:	2301      	movs	r3, #1
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr

08001eda <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001eda:	b480      	push	{r7}
 8001edc:	b085      	sub	sp, #20
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	60f8      	str	r0, [r7, #12]
 8001ee2:	60b9      	str	r1, [r7, #8]
 8001ee4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ee6:	2300      	movs	r3, #0
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3714      	adds	r7, #20
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b086      	sub	sp, #24
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001efc:	4a14      	ldr	r2, [pc, #80]	@ (8001f50 <_sbrk+0x5c>)
 8001efe:	4b15      	ldr	r3, [pc, #84]	@ (8001f54 <_sbrk+0x60>)
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f08:	4b13      	ldr	r3, [pc, #76]	@ (8001f58 <_sbrk+0x64>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d102      	bne.n	8001f16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f10:	4b11      	ldr	r3, [pc, #68]	@ (8001f58 <_sbrk+0x64>)
 8001f12:	4a12      	ldr	r2, [pc, #72]	@ (8001f5c <_sbrk+0x68>)
 8001f14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f16:	4b10      	ldr	r3, [pc, #64]	@ (8001f58 <_sbrk+0x64>)
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	693a      	ldr	r2, [r7, #16]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d207      	bcs.n	8001f34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f24:	f00f ffd8 	bl	8011ed8 <__errno>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	220c      	movs	r2, #12
 8001f2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f32:	e009      	b.n	8001f48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f34:	4b08      	ldr	r3, [pc, #32]	@ (8001f58 <_sbrk+0x64>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f3a:	4b07      	ldr	r3, [pc, #28]	@ (8001f58 <_sbrk+0x64>)
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4413      	add	r3, r2
 8001f42:	4a05      	ldr	r2, [pc, #20]	@ (8001f58 <_sbrk+0x64>)
 8001f44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f46:	68fb      	ldr	r3, [r7, #12]
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3718      	adds	r7, #24
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	20050000 	.word	0x20050000
 8001f54:	00007000 	.word	0x00007000
 8001f58:	20000c20 	.word	0x20000c20
 8001f5c:	20005dd8 	.word	0x20005dd8

08001f60 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f64:	4b06      	ldr	r3, [pc, #24]	@ (8001f80 <SystemInit+0x20>)
 8001f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f6a:	4a05      	ldr	r2, [pc, #20]	@ (8001f80 <SystemInit+0x20>)
 8001f6c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f70:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f74:	bf00      	nop
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	e000ed00 	.word	0xe000ed00

08001f84 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f88:	4b14      	ldr	r3, [pc, #80]	@ (8001fdc <MX_USART1_UART_Init+0x58>)
 8001f8a:	4a15      	ldr	r2, [pc, #84]	@ (8001fe0 <MX_USART1_UART_Init+0x5c>)
 8001f8c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001f8e:	4b13      	ldr	r3, [pc, #76]	@ (8001fdc <MX_USART1_UART_Init+0x58>)
 8001f90:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f94:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f96:	4b11      	ldr	r3, [pc, #68]	@ (8001fdc <MX_USART1_UART_Init+0x58>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f9c:	4b0f      	ldr	r3, [pc, #60]	@ (8001fdc <MX_USART1_UART_Init+0x58>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001fa2:	4b0e      	ldr	r3, [pc, #56]	@ (8001fdc <MX_USART1_UART_Init+0x58>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001fa8:	4b0c      	ldr	r3, [pc, #48]	@ (8001fdc <MX_USART1_UART_Init+0x58>)
 8001faa:	220c      	movs	r2, #12
 8001fac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fae:	4b0b      	ldr	r3, [pc, #44]	@ (8001fdc <MX_USART1_UART_Init+0x58>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fb4:	4b09      	ldr	r3, [pc, #36]	@ (8001fdc <MX_USART1_UART_Init+0x58>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fba:	4b08      	ldr	r3, [pc, #32]	@ (8001fdc <MX_USART1_UART_Init+0x58>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fc0:	4b06      	ldr	r3, [pc, #24]	@ (8001fdc <MX_USART1_UART_Init+0x58>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001fc6:	4805      	ldr	r0, [pc, #20]	@ (8001fdc <MX_USART1_UART_Init+0x58>)
 8001fc8:	f007 f830 	bl	800902c <HAL_UART_Init>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001fd2:	f7ff fc17 	bl	8001804 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001fd6:	bf00      	nop
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	20000c24 	.word	0x20000c24
 8001fe0:	40011000 	.word	0x40011000

08001fe4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b0ac      	sub	sp, #176	@ 0xb0
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fec:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]
 8001ff4:	605a      	str	r2, [r3, #4]
 8001ff6:	609a      	str	r2, [r3, #8]
 8001ff8:	60da      	str	r2, [r3, #12]
 8001ffa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ffc:	f107 0318 	add.w	r3, r7, #24
 8002000:	2284      	movs	r2, #132	@ 0x84
 8002002:	2100      	movs	r1, #0
 8002004:	4618      	mov	r0, r3
 8002006:	f00f ff05 	bl	8011e14 <memset>
  if(uartHandle->Instance==USART1)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a32      	ldr	r2, [pc, #200]	@ (80020d8 <HAL_UART_MspInit+0xf4>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d15c      	bne.n	80020ce <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002014:	2340      	movs	r3, #64	@ 0x40
 8002016:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002018:	2300      	movs	r3, #0
 800201a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800201c:	f107 0318 	add.w	r3, r7, #24
 8002020:	4618      	mov	r0, r3
 8002022:	f004 fcfd 	bl	8006a20 <HAL_RCCEx_PeriphCLKConfig>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800202c:	f7ff fbea 	bl	8001804 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002030:	4b2a      	ldr	r3, [pc, #168]	@ (80020dc <HAL_UART_MspInit+0xf8>)
 8002032:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002034:	4a29      	ldr	r2, [pc, #164]	@ (80020dc <HAL_UART_MspInit+0xf8>)
 8002036:	f043 0310 	orr.w	r3, r3, #16
 800203a:	6453      	str	r3, [r2, #68]	@ 0x44
 800203c:	4b27      	ldr	r3, [pc, #156]	@ (80020dc <HAL_UART_MspInit+0xf8>)
 800203e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002040:	f003 0310 	and.w	r3, r3, #16
 8002044:	617b      	str	r3, [r7, #20]
 8002046:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002048:	4b24      	ldr	r3, [pc, #144]	@ (80020dc <HAL_UART_MspInit+0xf8>)
 800204a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800204c:	4a23      	ldr	r2, [pc, #140]	@ (80020dc <HAL_UART_MspInit+0xf8>)
 800204e:	f043 0302 	orr.w	r3, r3, #2
 8002052:	6313      	str	r3, [r2, #48]	@ 0x30
 8002054:	4b21      	ldr	r3, [pc, #132]	@ (80020dc <HAL_UART_MspInit+0xf8>)
 8002056:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002058:	f003 0302 	and.w	r3, r3, #2
 800205c:	613b      	str	r3, [r7, #16]
 800205e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002060:	4b1e      	ldr	r3, [pc, #120]	@ (80020dc <HAL_UART_MspInit+0xf8>)
 8002062:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002064:	4a1d      	ldr	r2, [pc, #116]	@ (80020dc <HAL_UART_MspInit+0xf8>)
 8002066:	f043 0301 	orr.w	r3, r3, #1
 800206a:	6313      	str	r3, [r2, #48]	@ 0x30
 800206c:	4b1b      	ldr	r3, [pc, #108]	@ (80020dc <HAL_UART_MspInit+0xf8>)
 800206e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002070:	f003 0301 	and.w	r3, r3, #1
 8002074:	60fb      	str	r3, [r7, #12]
 8002076:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002078:	2380      	movs	r3, #128	@ 0x80
 800207a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800207e:	2302      	movs	r3, #2
 8002080:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002084:	2300      	movs	r3, #0
 8002086:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800208a:	2303      	movs	r3, #3
 800208c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002090:	2307      	movs	r3, #7
 8002092:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002096:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800209a:	4619      	mov	r1, r3
 800209c:	4810      	ldr	r0, [pc, #64]	@ (80020e0 <HAL_UART_MspInit+0xfc>)
 800209e:	f002 feeb 	bl	8004e78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80020a2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80020a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020aa:	2302      	movs	r3, #2
 80020ac:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b0:	2300      	movs	r3, #0
 80020b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020b6:	2303      	movs	r3, #3
 80020b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80020bc:	2307      	movs	r3, #7
 80020be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020c2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80020c6:	4619      	mov	r1, r3
 80020c8:	4806      	ldr	r0, [pc, #24]	@ (80020e4 <HAL_UART_MspInit+0x100>)
 80020ca:	f002 fed5 	bl	8004e78 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80020ce:	bf00      	nop
 80020d0:	37b0      	adds	r7, #176	@ 0xb0
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	40011000 	.word	0x40011000
 80020dc:	40023800 	.word	0x40023800
 80020e0:	40020400 	.word	0x40020400
 80020e4:	40020000 	.word	0x40020000

080020e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80020e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002120 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 80020ec:	f7ff ff38 	bl	8001f60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020f0:	480c      	ldr	r0, [pc, #48]	@ (8002124 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80020f2:	490d      	ldr	r1, [pc, #52]	@ (8002128 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80020f4:	4a0d      	ldr	r2, [pc, #52]	@ (800212c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80020f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020f8:	e002      	b.n	8002100 <LoopCopyDataInit>

080020fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020fe:	3304      	adds	r3, #4

08002100 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002100:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002102:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002104:	d3f9      	bcc.n	80020fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002106:	4a0a      	ldr	r2, [pc, #40]	@ (8002130 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002108:	4c0a      	ldr	r4, [pc, #40]	@ (8002134 <LoopFillZerobss+0x22>)
  movs r3, #0
 800210a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800210c:	e001      	b.n	8002112 <LoopFillZerobss>

0800210e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800210e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002110:	3204      	adds	r2, #4

08002112 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002112:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002114:	d3fb      	bcc.n	800210e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002116:	f00f fee5 	bl	8011ee4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800211a:	f7ff f95f 	bl	80013dc <main>
  bx  lr    
 800211e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002120:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002124:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002128:	200009d4 	.word	0x200009d4
  ldr r2, =_sidata
 800212c:	080bdd78 	.word	0x080bdd78
  ldr r2, =_sbss
 8002130:	200009d4 	.word	0x200009d4
  ldr r4, =_ebss
 8002134:	20005dd8 	.word	0x20005dd8

08002138 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002138:	e7fe      	b.n	8002138 <ADC_IRQHandler>
	...

0800213c <wm8994_Init>:
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param AudioFreq: Audio Frequency 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Init(uint16_t DeviceAddr, uint16_t OutputInputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b088      	sub	sp, #32
 8002140:	af00      	add	r7, sp, #0
 8002142:	607b      	str	r3, [r7, #4]
 8002144:	4603      	mov	r3, r0
 8002146:	81fb      	strh	r3, [r7, #14]
 8002148:	460b      	mov	r3, r1
 800214a:	81bb      	strh	r3, [r7, #12]
 800214c:	4613      	mov	r3, r2
 800214e:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8002150:	2300      	movs	r3, #0
 8002152:	61fb      	str	r3, [r7, #28]
  uint16_t output_device = OutputInputDevice & 0xFF;
 8002154:	89bb      	ldrh	r3, [r7, #12]
 8002156:	b2db      	uxtb	r3, r3
 8002158:	833b      	strh	r3, [r7, #24]
  uint16_t input_device = OutputInputDevice & 0xFF00;
 800215a:	89bb      	ldrh	r3, [r7, #12]
 800215c:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002160:	82fb      	strh	r3, [r7, #22]
  uint16_t power_mgnt_reg_1 = 0;
 8002162:	2300      	movs	r3, #0
 8002164:	837b      	strh	r3, [r7, #26]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 8002166:	f001 fc71 	bl	8003a4c <AUDIO_IO_Init>
  /* wm8994 Errata Work-Arounds */
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 800216a:	89fb      	ldrh	r3, [r7, #14]
 800216c:	b2db      	uxtb	r3, r3
 800216e:	2203      	movs	r2, #3
 8002170:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8002174:	4618      	mov	r0, r3
 8002176:	f001 fafb 	bl	8003770 <CODEC_IO_Write>
 800217a:	4603      	mov	r3, r0
 800217c:	461a      	mov	r2, r3
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	4413      	add	r3, r2
 8002182:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x817, 0x0000);
 8002184:	89fb      	ldrh	r3, [r7, #14]
 8002186:	b2db      	uxtb	r3, r3
 8002188:	2200      	movs	r2, #0
 800218a:	f640 0117 	movw	r1, #2071	@ 0x817
 800218e:	4618      	mov	r0, r3
 8002190:	f001 faee 	bl	8003770 <CODEC_IO_Write>
 8002194:	4603      	mov	r3, r0
 8002196:	461a      	mov	r2, r3
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	4413      	add	r3, r2
 800219c:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0000);
 800219e:	89fb      	ldrh	r3, [r7, #14]
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	2200      	movs	r2, #0
 80021a4:	f44f 7181 	mov.w	r1, #258	@ 0x102
 80021a8:	4618      	mov	r0, r3
 80021aa:	f001 fae1 	bl	8003770 <CODEC_IO_Write>
 80021ae:	4603      	mov	r3, r0
 80021b0:	461a      	mov	r2, r3
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	4413      	add	r3, r2
 80021b6:	61fb      	str	r3, [r7, #28]

  /* Enable VMID soft start (fast), Start-up Bias Current Enabled */
  counter += CODEC_IO_Write(DeviceAddr, 0x39, 0x006C);
 80021b8:	89fb      	ldrh	r3, [r7, #14]
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	226c      	movs	r2, #108	@ 0x6c
 80021be:	2139      	movs	r1, #57	@ 0x39
 80021c0:	4618      	mov	r0, r3
 80021c2:	f001 fad5 	bl	8003770 <CODEC_IO_Write>
 80021c6:	4603      	mov	r3, r0
 80021c8:	461a      	mov	r2, r3
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	4413      	add	r3, r2
 80021ce:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID */
  if (input_device > 0)
 80021d0:	8afb      	ldrh	r3, [r7, #22]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d00c      	beq.n	80021f0 <wm8994_Init+0xb4>
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0013);
 80021d6:	89fb      	ldrh	r3, [r7, #14]
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	2213      	movs	r2, #19
 80021dc:	2101      	movs	r1, #1
 80021de:	4618      	mov	r0, r3
 80021e0:	f001 fac6 	bl	8003770 <CODEC_IO_Write>
 80021e4:	4603      	mov	r3, r0
 80021e6:	461a      	mov	r2, r3
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	4413      	add	r3, r2
 80021ec:	61fb      	str	r3, [r7, #28]
 80021ee:	e00b      	b.n	8002208 <wm8994_Init+0xcc>
  }
  else
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0003);
 80021f0:	89fb      	ldrh	r3, [r7, #14]
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	2203      	movs	r2, #3
 80021f6:	2101      	movs	r1, #1
 80021f8:	4618      	mov	r0, r3
 80021fa:	f001 fab9 	bl	8003770 <CODEC_IO_Write>
 80021fe:	4603      	mov	r3, r0
 8002200:	461a      	mov	r2, r3
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	4413      	add	r3, r2
 8002206:	61fb      	str	r3, [r7, #28]
  }

  /* Add Delay */
  AUDIO_IO_Delay(50);
 8002208:	2032      	movs	r0, #50	@ 0x32
 800220a:	f001 fc87 	bl	8003b1c <AUDIO_IO_Delay>

  /* Path Configurations for output */
  if (output_device > 0)
 800220e:	8b3b      	ldrh	r3, [r7, #24]
 8002210:	2b00      	cmp	r3, #0
 8002212:	f000 815f 	beq.w	80024d4 <wm8994_Init+0x398>
  {
    outputEnabled = 1;
 8002216:	4bae      	ldr	r3, [pc, #696]	@ (80024d0 <wm8994_Init+0x394>)
 8002218:	2201      	movs	r2, #1
 800221a:	601a      	str	r2, [r3, #0]

    switch (output_device)
 800221c:	8b3b      	ldrh	r3, [r7, #24]
 800221e:	2b03      	cmp	r3, #3
 8002220:	f000 808c 	beq.w	800233c <wm8994_Init+0x200>
 8002224:	2b03      	cmp	r3, #3
 8002226:	f300 8111 	bgt.w	800244c <wm8994_Init+0x310>
 800222a:	2b01      	cmp	r3, #1
 800222c:	d002      	beq.n	8002234 <wm8994_Init+0xf8>
 800222e:	2b02      	cmp	r3, #2
 8002230:	d042      	beq.n	80022b8 <wm8994_Init+0x17c>
 8002232:	e10b      	b.n	800244c <wm8994_Init+0x310>
    {
    case OUTPUT_DEVICE_SPEAKER:
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8002234:	89fb      	ldrh	r3, [r7, #14]
 8002236:	b2db      	uxtb	r3, r3
 8002238:	f640 420c 	movw	r2, #3084	@ 0xc0c
 800223c:	2105      	movs	r1, #5
 800223e:	4618      	mov	r0, r3
 8002240:	f001 fa96 	bl	8003770 <CODEC_IO_Write>
 8002244:	4603      	mov	r3, r0
 8002246:	461a      	mov	r2, r3
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	4413      	add	r3, r2
 800224c:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 800224e:	89fb      	ldrh	r3, [r7, #14]
 8002250:	b2db      	uxtb	r3, r3
 8002252:	2200      	movs	r2, #0
 8002254:	f240 6101 	movw	r1, #1537	@ 0x601
 8002258:	4618      	mov	r0, r3
 800225a:	f001 fa89 	bl	8003770 <CODEC_IO_Write>
 800225e:	4603      	mov	r3, r0
 8002260:	461a      	mov	r2, r3
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	4413      	add	r3, r2
 8002266:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8002268:	89fb      	ldrh	r3, [r7, #14]
 800226a:	b2db      	uxtb	r3, r3
 800226c:	2200      	movs	r2, #0
 800226e:	f240 6102 	movw	r1, #1538	@ 0x602
 8002272:	4618      	mov	r0, r3
 8002274:	f001 fa7c 	bl	8003770 <CODEC_IO_Write>
 8002278:	4603      	mov	r3, r0
 800227a:	461a      	mov	r2, r3
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	4413      	add	r3, r2
 8002280:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8002282:	89fb      	ldrh	r3, [r7, #14]
 8002284:	b2db      	uxtb	r3, r3
 8002286:	2202      	movs	r2, #2
 8002288:	f240 6104 	movw	r1, #1540	@ 0x604
 800228c:	4618      	mov	r0, r3
 800228e:	f001 fa6f 	bl	8003770 <CODEC_IO_Write>
 8002292:	4603      	mov	r3, r0
 8002294:	461a      	mov	r2, r3
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	4413      	add	r3, r2
 800229a:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 800229c:	89fb      	ldrh	r3, [r7, #14]
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	2202      	movs	r2, #2
 80022a2:	f240 6105 	movw	r1, #1541	@ 0x605
 80022a6:	4618      	mov	r0, r3
 80022a8:	f001 fa62 	bl	8003770 <CODEC_IO_Write>
 80022ac:	4603      	mov	r3, r0
 80022ae:	461a      	mov	r2, r3
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	4413      	add	r3, r2
 80022b4:	61fb      	str	r3, [r7, #28]
      break;
 80022b6:	e110      	b.n	80024da <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_HEADPHONE:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 80022b8:	89fb      	ldrh	r3, [r7, #14]
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	f240 3203 	movw	r2, #771	@ 0x303
 80022c0:	2105      	movs	r1, #5
 80022c2:	4618      	mov	r0, r3
 80022c4:	f001 fa54 	bl	8003770 <CODEC_IO_Write>
 80022c8:	4603      	mov	r3, r0
 80022ca:	461a      	mov	r2, r3
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	4413      	add	r3, r2
 80022d0:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80022d2:	89fb      	ldrh	r3, [r7, #14]
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	2201      	movs	r2, #1
 80022d8:	f240 6101 	movw	r1, #1537	@ 0x601
 80022dc:	4618      	mov	r0, r3
 80022de:	f001 fa47 	bl	8003770 <CODEC_IO_Write>
 80022e2:	4603      	mov	r3, r0
 80022e4:	461a      	mov	r2, r3
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	4413      	add	r3, r2
 80022ea:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80022ec:	89fb      	ldrh	r3, [r7, #14]
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	2201      	movs	r2, #1
 80022f2:	f240 6102 	movw	r1, #1538	@ 0x602
 80022f6:	4618      	mov	r0, r3
 80022f8:	f001 fa3a 	bl	8003770 <CODEC_IO_Write>
 80022fc:	4603      	mov	r3, r0
 80022fe:	461a      	mov	r2, r3
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	4413      	add	r3, r2
 8002304:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8002306:	89fb      	ldrh	r3, [r7, #14]
 8002308:	b2db      	uxtb	r3, r3
 800230a:	2200      	movs	r2, #0
 800230c:	f240 6104 	movw	r1, #1540	@ 0x604
 8002310:	4618      	mov	r0, r3
 8002312:	f001 fa2d 	bl	8003770 <CODEC_IO_Write>
 8002316:	4603      	mov	r3, r0
 8002318:	461a      	mov	r2, r3
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	4413      	add	r3, r2
 800231e:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8002320:	89fb      	ldrh	r3, [r7, #14]
 8002322:	b2db      	uxtb	r3, r3
 8002324:	2200      	movs	r2, #0
 8002326:	f240 6105 	movw	r1, #1541	@ 0x605
 800232a:	4618      	mov	r0, r3
 800232c:	f001 fa20 	bl	8003770 <CODEC_IO_Write>
 8002330:	4603      	mov	r3, r0
 8002332:	461a      	mov	r2, r3
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	4413      	add	r3, r2
 8002338:	61fb      	str	r3, [r7, #28]
      break;
 800233a:	e0ce      	b.n	80024da <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_BOTH:
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 800233c:	8afb      	ldrh	r3, [r7, #22]
 800233e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002342:	d141      	bne.n	80023c8 <wm8994_Init+0x28c>
      {
        /* Enable DAC1 (Left), Enable DAC1 (Right),
        also Enable DAC2 (Left), Enable DAC2 (Right)*/
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8002344:	89fb      	ldrh	r3, [r7, #14]
 8002346:	b2db      	uxtb	r3, r3
 8002348:	f640 720f 	movw	r2, #3855	@ 0xf0f
 800234c:	2105      	movs	r1, #5
 800234e:	4618      	mov	r0, r3
 8002350:	f001 fa0e 	bl	8003770 <CODEC_IO_Write>
 8002354:	4603      	mov	r3, r0
 8002356:	461a      	mov	r2, r3
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	4413      	add	r3, r2
 800235c:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0003);
 800235e:	89fb      	ldrh	r3, [r7, #14]
 8002360:	b2db      	uxtb	r3, r3
 8002362:	2203      	movs	r2, #3
 8002364:	f240 6101 	movw	r1, #1537	@ 0x601
 8002368:	4618      	mov	r0, r3
 800236a:	f001 fa01 	bl	8003770 <CODEC_IO_Write>
 800236e:	4603      	mov	r3, r0
 8002370:	461a      	mov	r2, r3
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	4413      	add	r3, r2
 8002376:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0003);
 8002378:	89fb      	ldrh	r3, [r7, #14]
 800237a:	b2db      	uxtb	r3, r3
 800237c:	2203      	movs	r2, #3
 800237e:	f240 6102 	movw	r1, #1538	@ 0x602
 8002382:	4618      	mov	r0, r3
 8002384:	f001 f9f4 	bl	8003770 <CODEC_IO_Write>
 8002388:	4603      	mov	r3, r0
 800238a:	461a      	mov	r2, r3
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	4413      	add	r3, r2
 8002390:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0003);
 8002392:	89fb      	ldrh	r3, [r7, #14]
 8002394:	b2db      	uxtb	r3, r3
 8002396:	2203      	movs	r2, #3
 8002398:	f240 6104 	movw	r1, #1540	@ 0x604
 800239c:	4618      	mov	r0, r3
 800239e:	f001 f9e7 	bl	8003770 <CODEC_IO_Write>
 80023a2:	4603      	mov	r3, r0
 80023a4:	461a      	mov	r2, r3
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	4413      	add	r3, r2
 80023aa:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0003);
 80023ac:	89fb      	ldrh	r3, [r7, #14]
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	2203      	movs	r2, #3
 80023b2:	f240 6105 	movw	r1, #1541	@ 0x605
 80023b6:	4618      	mov	r0, r3
 80023b8:	f001 f9da 	bl	8003770 <CODEC_IO_Write>
 80023bc:	4603      	mov	r3, r0
 80023be:	461a      	mov	r2, r3
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	4413      	add	r3, r2
 80023c4:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
        
        /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
      }
      break;
 80023c6:	e088      	b.n	80024da <wm8994_Init+0x39e>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 80023c8:	89fb      	ldrh	r3, [r7, #14]
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	f640 720f 	movw	r2, #3855	@ 0xf0f
 80023d0:	2105      	movs	r1, #5
 80023d2:	4618      	mov	r0, r3
 80023d4:	f001 f9cc 	bl	8003770 <CODEC_IO_Write>
 80023d8:	4603      	mov	r3, r0
 80023da:	461a      	mov	r2, r3
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	4413      	add	r3, r2
 80023e0:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80023e2:	89fb      	ldrh	r3, [r7, #14]
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	2201      	movs	r2, #1
 80023e8:	f240 6101 	movw	r1, #1537	@ 0x601
 80023ec:	4618      	mov	r0, r3
 80023ee:	f001 f9bf 	bl	8003770 <CODEC_IO_Write>
 80023f2:	4603      	mov	r3, r0
 80023f4:	461a      	mov	r2, r3
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	4413      	add	r3, r2
 80023fa:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80023fc:	89fb      	ldrh	r3, [r7, #14]
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	2201      	movs	r2, #1
 8002402:	f240 6102 	movw	r1, #1538	@ 0x602
 8002406:	4618      	mov	r0, r3
 8002408:	f001 f9b2 	bl	8003770 <CODEC_IO_Write>
 800240c:	4603      	mov	r3, r0
 800240e:	461a      	mov	r2, r3
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	4413      	add	r3, r2
 8002414:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8002416:	89fb      	ldrh	r3, [r7, #14]
 8002418:	b2db      	uxtb	r3, r3
 800241a:	2202      	movs	r2, #2
 800241c:	f240 6104 	movw	r1, #1540	@ 0x604
 8002420:	4618      	mov	r0, r3
 8002422:	f001 f9a5 	bl	8003770 <CODEC_IO_Write>
 8002426:	4603      	mov	r3, r0
 8002428:	461a      	mov	r2, r3
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	4413      	add	r3, r2
 800242e:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
 8002430:	89fb      	ldrh	r3, [r7, #14]
 8002432:	b2db      	uxtb	r3, r3
 8002434:	2202      	movs	r2, #2
 8002436:	f240 6105 	movw	r1, #1541	@ 0x605
 800243a:	4618      	mov	r0, r3
 800243c:	f001 f998 	bl	8003770 <CODEC_IO_Write>
 8002440:	4603      	mov	r3, r0
 8002442:	461a      	mov	r2, r3
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	4413      	add	r3, r2
 8002448:	61fb      	str	r3, [r7, #28]
      break;
 800244a:	e046      	b.n	80024da <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_AUTO :
    default:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 800244c:	89fb      	ldrh	r3, [r7, #14]
 800244e:	b2db      	uxtb	r3, r3
 8002450:	f240 3203 	movw	r2, #771	@ 0x303
 8002454:	2105      	movs	r1, #5
 8002456:	4618      	mov	r0, r3
 8002458:	f001 f98a 	bl	8003770 <CODEC_IO_Write>
 800245c:	4603      	mov	r3, r0
 800245e:	461a      	mov	r2, r3
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	4413      	add	r3, r2
 8002464:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8002466:	89fb      	ldrh	r3, [r7, #14]
 8002468:	b2db      	uxtb	r3, r3
 800246a:	2201      	movs	r2, #1
 800246c:	f240 6101 	movw	r1, #1537	@ 0x601
 8002470:	4618      	mov	r0, r3
 8002472:	f001 f97d 	bl	8003770 <CODEC_IO_Write>
 8002476:	4603      	mov	r3, r0
 8002478:	461a      	mov	r2, r3
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	4413      	add	r3, r2
 800247e:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8002480:	89fb      	ldrh	r3, [r7, #14]
 8002482:	b2db      	uxtb	r3, r3
 8002484:	2201      	movs	r2, #1
 8002486:	f240 6102 	movw	r1, #1538	@ 0x602
 800248a:	4618      	mov	r0, r3
 800248c:	f001 f970 	bl	8003770 <CODEC_IO_Write>
 8002490:	4603      	mov	r3, r0
 8002492:	461a      	mov	r2, r3
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	4413      	add	r3, r2
 8002498:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 800249a:	89fb      	ldrh	r3, [r7, #14]
 800249c:	b2db      	uxtb	r3, r3
 800249e:	2200      	movs	r2, #0
 80024a0:	f240 6104 	movw	r1, #1540	@ 0x604
 80024a4:	4618      	mov	r0, r3
 80024a6:	f001 f963 	bl	8003770 <CODEC_IO_Write>
 80024aa:	4603      	mov	r3, r0
 80024ac:	461a      	mov	r2, r3
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	4413      	add	r3, r2
 80024b2:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 80024b4:	89fb      	ldrh	r3, [r7, #14]
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	2200      	movs	r2, #0
 80024ba:	f240 6105 	movw	r1, #1541	@ 0x605
 80024be:	4618      	mov	r0, r3
 80024c0:	f001 f956 	bl	8003770 <CODEC_IO_Write>
 80024c4:	4603      	mov	r3, r0
 80024c6:	461a      	mov	r2, r3
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	4413      	add	r3, r2
 80024cc:	61fb      	str	r3, [r7, #28]
      break;
 80024ce:	e004      	b.n	80024da <wm8994_Init+0x39e>
 80024d0:	20000cac 	.word	0x20000cac
    }
  }
  else
  {
    outputEnabled = 0;
 80024d4:	4b99      	ldr	r3, [pc, #612]	@ (800273c <wm8994_Init+0x600>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	601a      	str	r2, [r3, #0]
  }

  /* Path Configurations for input */
  if (input_device > 0)
 80024da:	8afb      	ldrh	r3, [r7, #22]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	f000 81ab 	beq.w	8002838 <wm8994_Init+0x6fc>
  {
    inputEnabled = 1;
 80024e2:	4b97      	ldr	r3, [pc, #604]	@ (8002740 <wm8994_Init+0x604>)
 80024e4:	2201      	movs	r2, #1
 80024e6:	601a      	str	r2, [r3, #0]
    switch (input_device)
 80024e8:	8afb      	ldrh	r3, [r7, #22]
 80024ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80024ee:	f000 8129 	beq.w	8002744 <wm8994_Init+0x608>
 80024f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80024f6:	f300 819b 	bgt.w	8002830 <wm8994_Init+0x6f4>
 80024fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80024fe:	d05a      	beq.n	80025b6 <wm8994_Init+0x47a>
 8002500:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002504:	f300 8194 	bgt.w	8002830 <wm8994_Init+0x6f4>
 8002508:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800250c:	f000 80c6 	beq.w	800269c <wm8994_Init+0x560>
 8002510:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002514:	f040 818c 	bne.w	8002830 <wm8994_Init+0x6f4>
    {
    case INPUT_DEVICE_DIGITAL_MICROPHONE_2 :
      /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
       * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0C30);
 8002518:	89fb      	ldrh	r3, [r7, #14]
 800251a:	b2db      	uxtb	r3, r3
 800251c:	f44f 6243 	mov.w	r2, #3120	@ 0xc30
 8002520:	2104      	movs	r1, #4
 8002522:	4618      	mov	r0, r3
 8002524:	f001 f924 	bl	8003770 <CODEC_IO_Write>
 8002528:	4603      	mov	r3, r0
 800252a:	461a      	mov	r2, r3
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	4413      	add	r3, r2
 8002530:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8002532:	89fb      	ldrh	r3, [r7, #14]
 8002534:	b2db      	uxtb	r3, r3
 8002536:	22db      	movs	r2, #219	@ 0xdb
 8002538:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 800253c:	4618      	mov	r0, r3
 800253e:	f001 f917 	bl	8003770 <CODEC_IO_Write>
 8002542:	4603      	mov	r3, r0
 8002544:	461a      	mov	r2, r3
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	4413      	add	r3, r2
 800254a:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6000);
 800254c:	89fb      	ldrh	r3, [r7, #14]
 800254e:	b2db      	uxtb	r3, r3
 8002550:	f44f 42c0 	mov.w	r2, #24576	@ 0x6000
 8002554:	2102      	movs	r1, #2
 8002556:	4618      	mov	r0, r3
 8002558:	f001 f90a 	bl	8003770 <CODEC_IO_Write>
 800255c:	4603      	mov	r3, r0
 800255e:	461a      	mov	r2, r3
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	4413      	add	r3, r2
 8002564:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8002566:	89fb      	ldrh	r3, [r7, #14]
 8002568:	b2db      	uxtb	r3, r3
 800256a:	2202      	movs	r2, #2
 800256c:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 8002570:	4618      	mov	r0, r3
 8002572:	f001 f8fd 	bl	8003770 <CODEC_IO_Write>
 8002576:	4603      	mov	r3, r0
 8002578:	461a      	mov	r2, r3
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	4413      	add	r3, r2
 800257e:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8002580:	89fb      	ldrh	r3, [r7, #14]
 8002582:	b2db      	uxtb	r3, r3
 8002584:	2202      	movs	r2, #2
 8002586:	f240 6109 	movw	r1, #1545	@ 0x609
 800258a:	4618      	mov	r0, r3
 800258c:	f001 f8f0 	bl	8003770 <CODEC_IO_Write>
 8002590:	4603      	mov	r3, r0
 8002592:	461a      	mov	r2, r3
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	4413      	add	r3, r2
 8002598:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000E);
 800259a:	89fb      	ldrh	r3, [r7, #14]
 800259c:	b2db      	uxtb	r3, r3
 800259e:	220e      	movs	r2, #14
 80025a0:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 80025a4:	4618      	mov	r0, r3
 80025a6:	f001 f8e3 	bl	8003770 <CODEC_IO_Write>
 80025aa:	4603      	mov	r3, r0
 80025ac:	461a      	mov	r2, r3
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	4413      	add	r3, r2
 80025b2:	61fb      	str	r3, [r7, #28]
      break;
 80025b4:	e143      	b.n	800283e <wm8994_Init+0x702>

    case INPUT_DEVICE_INPUT_LINE_1 :
      /* IN1LN_TO_IN1L, IN1LP_TO_VMID, IN1RN_TO_IN1R, IN1RP_TO_VMID */
      counter += CODEC_IO_Write(DeviceAddr, 0x28, 0x0011);
 80025b6:	89fb      	ldrh	r3, [r7, #14]
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	2211      	movs	r2, #17
 80025bc:	2128      	movs	r1, #40	@ 0x28
 80025be:	4618      	mov	r0, r3
 80025c0:	f001 f8d6 	bl	8003770 <CODEC_IO_Write>
 80025c4:	4603      	mov	r3, r0
 80025c6:	461a      	mov	r2, r3
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	4413      	add	r3, r2
 80025cc:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1L_TO_MIXINL and +30dB on IN1L PGA output */
      counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0035);
 80025ce:	89fb      	ldrh	r3, [r7, #14]
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	2235      	movs	r2, #53	@ 0x35
 80025d4:	2129      	movs	r1, #41	@ 0x29
 80025d6:	4618      	mov	r0, r3
 80025d8:	f001 f8ca 	bl	8003770 <CODEC_IO_Write>
 80025dc:	4603      	mov	r3, r0
 80025de:	461a      	mov	r2, r3
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	4413      	add	r3, r2
 80025e4:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R_TO_MIXINL, Gain = +30dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0035);
 80025e6:	89fb      	ldrh	r3, [r7, #14]
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	2235      	movs	r2, #53	@ 0x35
 80025ec:	212a      	movs	r1, #42	@ 0x2a
 80025ee:	4618      	mov	r0, r3
 80025f0:	f001 f8be 	bl	8003770 <CODEC_IO_Write>
 80025f4:	4603      	mov	r3, r0
 80025f6:	461a      	mov	r2, r3
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	4413      	add	r3, r2
 80025fc:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0303);
 80025fe:	89fb      	ldrh	r3, [r7, #14]
 8002600:	b2db      	uxtb	r3, r3
 8002602:	f240 3203 	movw	r2, #771	@ 0x303
 8002606:	2104      	movs	r1, #4
 8002608:	4618      	mov	r0, r3
 800260a:	f001 f8b1 	bl	8003770 <CODEC_IO_Write>
 800260e:	4603      	mov	r3, r0
 8002610:	461a      	mov	r2, r3
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	4413      	add	r3, r2
 8002616:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8002618:	89fb      	ldrh	r3, [r7, #14]
 800261a:	b2db      	uxtb	r3, r3
 800261c:	22db      	movs	r2, #219	@ 0xdb
 800261e:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 8002622:	4618      	mov	r0, r3
 8002624:	f001 f8a4 	bl	8003770 <CODEC_IO_Write>
 8002628:	4603      	mov	r3, r0
 800262a:	461a      	mov	r2, r3
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	4413      	add	r3, r2
 8002630:	61fb      	str	r3, [r7, #28]

      /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8002632:	89fb      	ldrh	r3, [r7, #14]
 8002634:	b2db      	uxtb	r3, r3
 8002636:	f246 3250 	movw	r2, #25424	@ 0x6350
 800263a:	2102      	movs	r1, #2
 800263c:	4618      	mov	r0, r3
 800263e:	f001 f897 	bl	8003770 <CODEC_IO_Write>
 8002642:	4603      	mov	r3, r0
 8002644:	461a      	mov	r2, r3
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	4413      	add	r3, r2
 800264a:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 800264c:	89fb      	ldrh	r3, [r7, #14]
 800264e:	b2db      	uxtb	r3, r3
 8002650:	2202      	movs	r2, #2
 8002652:	f240 6106 	movw	r1, #1542	@ 0x606
 8002656:	4618      	mov	r0, r3
 8002658:	f001 f88a 	bl	8003770 <CODEC_IO_Write>
 800265c:	4603      	mov	r3, r0
 800265e:	461a      	mov	r2, r3
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	4413      	add	r3, r2
 8002664:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8002666:	89fb      	ldrh	r3, [r7, #14]
 8002668:	b2db      	uxtb	r3, r3
 800266a:	2202      	movs	r2, #2
 800266c:	f240 6107 	movw	r1, #1543	@ 0x607
 8002670:	4618      	mov	r0, r3
 8002672:	f001 f87d 	bl	8003770 <CODEC_IO_Write>
 8002676:	4603      	mov	r3, r0
 8002678:	461a      	mov	r2, r3
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	4413      	add	r3, r2
 800267e:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8002680:	89fb      	ldrh	r3, [r7, #14]
 8002682:	b2db      	uxtb	r3, r3
 8002684:	220d      	movs	r2, #13
 8002686:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 800268a:	4618      	mov	r0, r3
 800268c:	f001 f870 	bl	8003770 <CODEC_IO_Write>
 8002690:	4603      	mov	r3, r0
 8002692:	461a      	mov	r2, r3
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	4413      	add	r3, r2
 8002698:	61fb      	str	r3, [r7, #28]
      break;
 800269a:	e0d0      	b.n	800283e <wm8994_Init+0x702>

    case INPUT_DEVICE_DIGITAL_MICROPHONE_1 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x030C);
 800269c:	89fb      	ldrh	r3, [r7, #14]
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	f44f 7243 	mov.w	r2, #780	@ 0x30c
 80026a4:	2104      	movs	r1, #4
 80026a6:	4618      	mov	r0, r3
 80026a8:	f001 f862 	bl	8003770 <CODEC_IO_Write>
 80026ac:	4603      	mov	r3, r0
 80026ae:	461a      	mov	r2, r3
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	4413      	add	r3, r2
 80026b4:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 80026b6:	89fb      	ldrh	r3, [r7, #14]
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	22db      	movs	r2, #219	@ 0xdb
 80026bc:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 80026c0:	4618      	mov	r0, r3
 80026c2:	f001 f855 	bl	8003770 <CODEC_IO_Write>
 80026c6:	4603      	mov	r3, r0
 80026c8:	461a      	mov	r2, r3
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	4413      	add	r3, r2
 80026ce:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 80026d0:	89fb      	ldrh	r3, [r7, #14]
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	f246 3250 	movw	r2, #25424	@ 0x6350
 80026d8:	2102      	movs	r1, #2
 80026da:	4618      	mov	r0, r3
 80026dc:	f001 f848 	bl	8003770 <CODEC_IO_Write>
 80026e0:	4603      	mov	r3, r0
 80026e2:	461a      	mov	r2, r3
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	4413      	add	r3, r2
 80026e8:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 80026ea:	89fb      	ldrh	r3, [r7, #14]
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2202      	movs	r2, #2
 80026f0:	f240 6106 	movw	r1, #1542	@ 0x606
 80026f4:	4618      	mov	r0, r3
 80026f6:	f001 f83b 	bl	8003770 <CODEC_IO_Write>
 80026fa:	4603      	mov	r3, r0
 80026fc:	461a      	mov	r2, r3
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	4413      	add	r3, r2
 8002702:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8002704:	89fb      	ldrh	r3, [r7, #14]
 8002706:	b2db      	uxtb	r3, r3
 8002708:	2202      	movs	r2, #2
 800270a:	f240 6107 	movw	r1, #1543	@ 0x607
 800270e:	4618      	mov	r0, r3
 8002710:	f001 f82e 	bl	8003770 <CODEC_IO_Write>
 8002714:	4603      	mov	r3, r0
 8002716:	461a      	mov	r2, r3
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	4413      	add	r3, r2
 800271c:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 800271e:	89fb      	ldrh	r3, [r7, #14]
 8002720:	b2db      	uxtb	r3, r3
 8002722:	220d      	movs	r2, #13
 8002724:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8002728:	4618      	mov	r0, r3
 800272a:	f001 f821 	bl	8003770 <CODEC_IO_Write>
 800272e:	4603      	mov	r3, r0
 8002730:	461a      	mov	r2, r3
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	4413      	add	r3, r2
 8002736:	61fb      	str	r3, [r7, #28]
      break; 
 8002738:	e081      	b.n	800283e <wm8994_Init+0x702>
 800273a:	bf00      	nop
 800273c:	20000cac 	.word	0x20000cac
 8002740:	20000cb0 	.word	0x20000cb0
    case INPUT_DEVICE_DIGITAL_MIC1_MIC2 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0F3C);
 8002744:	89fb      	ldrh	r3, [r7, #14]
 8002746:	b2db      	uxtb	r3, r3
 8002748:	f640 723c 	movw	r2, #3900	@ 0xf3c
 800274c:	2104      	movs	r1, #4
 800274e:	4618      	mov	r0, r3
 8002750:	f001 f80e 	bl	8003770 <CODEC_IO_Write>
 8002754:	4603      	mov	r3, r0
 8002756:	461a      	mov	r2, r3
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	4413      	add	r3, r2
 800275c:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 800275e:	89fb      	ldrh	r3, [r7, #14]
 8002760:	b2db      	uxtb	r3, r3
 8002762:	22db      	movs	r2, #219	@ 0xdb
 8002764:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 8002768:	4618      	mov	r0, r3
 800276a:	f001 f801 	bl	8003770 <CODEC_IO_Write>
 800276e:	4603      	mov	r3, r0
 8002770:	461a      	mov	r2, r3
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	4413      	add	r3, r2
 8002776:	61fb      	str	r3, [r7, #28]
      
      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8002778:	89fb      	ldrh	r3, [r7, #14]
 800277a:	b2db      	uxtb	r3, r3
 800277c:	22db      	movs	r2, #219	@ 0xdb
 800277e:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 8002782:	4618      	mov	r0, r3
 8002784:	f000 fff4 	bl	8003770 <CODEC_IO_Write>
 8002788:	4603      	mov	r3, r0
 800278a:	461a      	mov	r2, r3
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	4413      	add	r3, r2
 8002790:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x63A0);
 8002792:	89fb      	ldrh	r3, [r7, #14]
 8002794:	b2db      	uxtb	r3, r3
 8002796:	f246 32a0 	movw	r2, #25504	@ 0x63a0
 800279a:	2102      	movs	r1, #2
 800279c:	4618      	mov	r0, r3
 800279e:	f000 ffe7 	bl	8003770 <CODEC_IO_Write>
 80027a2:	4603      	mov	r3, r0
 80027a4:	461a      	mov	r2, r3
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	4413      	add	r3, r2
 80027aa:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 80027ac:	89fb      	ldrh	r3, [r7, #14]
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	2202      	movs	r2, #2
 80027b2:	f240 6106 	movw	r1, #1542	@ 0x606
 80027b6:	4618      	mov	r0, r3
 80027b8:	f000 ffda 	bl	8003770 <CODEC_IO_Write>
 80027bc:	4603      	mov	r3, r0
 80027be:	461a      	mov	r2, r3
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	4413      	add	r3, r2
 80027c4:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 80027c6:	89fb      	ldrh	r3, [r7, #14]
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	2202      	movs	r2, #2
 80027cc:	f240 6107 	movw	r1, #1543	@ 0x607
 80027d0:	4618      	mov	r0, r3
 80027d2:	f000 ffcd 	bl	8003770 <CODEC_IO_Write>
 80027d6:	4603      	mov	r3, r0
 80027d8:	461a      	mov	r2, r3
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	4413      	add	r3, r2
 80027de:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 80027e0:	89fb      	ldrh	r3, [r7, #14]
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	2202      	movs	r2, #2
 80027e6:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 80027ea:	4618      	mov	r0, r3
 80027ec:	f000 ffc0 	bl	8003770 <CODEC_IO_Write>
 80027f0:	4603      	mov	r3, r0
 80027f2:	461a      	mov	r2, r3
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	4413      	add	r3, r2
 80027f8:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 80027fa:	89fb      	ldrh	r3, [r7, #14]
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	2202      	movs	r2, #2
 8002800:	f240 6109 	movw	r1, #1545	@ 0x609
 8002804:	4618      	mov	r0, r3
 8002806:	f000 ffb3 	bl	8003770 <CODEC_IO_Write>
 800280a:	4603      	mov	r3, r0
 800280c:	461a      	mov	r2, r3
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	4413      	add	r3, r2
 8002812:	61fb      	str	r3, [r7, #28]
      
      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8002814:	89fb      	ldrh	r3, [r7, #14]
 8002816:	b2db      	uxtb	r3, r3
 8002818:	220d      	movs	r2, #13
 800281a:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 800281e:	4618      	mov	r0, r3
 8002820:	f000 ffa6 	bl	8003770 <CODEC_IO_Write>
 8002824:	4603      	mov	r3, r0
 8002826:	461a      	mov	r2, r3
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	4413      	add	r3, r2
 800282c:	61fb      	str	r3, [r7, #28]
      break;    
 800282e:	e006      	b.n	800283e <wm8994_Init+0x702>
    case INPUT_DEVICE_INPUT_LINE_2 :
    default:
      /* Actually, no other input devices supported */
      counter++;
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	3301      	adds	r3, #1
 8002834:	61fb      	str	r3, [r7, #28]
      break;
 8002836:	e002      	b.n	800283e <wm8994_Init+0x702>
    }
  }
  else
  {
    inputEnabled = 0;
 8002838:	4ba4      	ldr	r3, [pc, #656]	@ (8002acc <wm8994_Init+0x990>)
 800283a:	2200      	movs	r2, #0
 800283c:	601a      	str	r2, [r3, #0]
  }
  
  /*  Clock Configurations */
  switch (AudioFreq)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4aa3      	ldr	r2, [pc, #652]	@ (8002ad0 <wm8994_Init+0x994>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d079      	beq.n	800293a <wm8994_Init+0x7fe>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4aa1      	ldr	r2, [pc, #644]	@ (8002ad0 <wm8994_Init+0x994>)
 800284a:	4293      	cmp	r3, r2
 800284c:	f200 80ad 	bhi.w	80029aa <wm8994_Init+0x86e>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8002856:	4293      	cmp	r3, r2
 8002858:	d061      	beq.n	800291e <wm8994_Init+0x7e2>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8002860:	4293      	cmp	r3, r2
 8002862:	f200 80a2 	bhi.w	80029aa <wm8994_Init+0x86e>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f64a 4244 	movw	r2, #44100	@ 0xac44
 800286c:	4293      	cmp	r3, r2
 800286e:	f000 808e 	beq.w	800298e <wm8994_Init+0x852>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8002878:	4293      	cmp	r3, r2
 800287a:	f200 8096 	bhi.w	80029aa <wm8994_Init+0x86e>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8002884:	d03d      	beq.n	8002902 <wm8994_Init+0x7c6>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 800288c:	f200 808d 	bhi.w	80029aa <wm8994_Init+0x86e>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f245 6222 	movw	r2, #22050	@ 0x5622
 8002896:	4293      	cmp	r3, r2
 8002898:	d06b      	beq.n	8002972 <wm8994_Init+0x836>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f245 6222 	movw	r2, #22050	@ 0x5622
 80028a0:	4293      	cmp	r3, r2
 80028a2:	f200 8082 	bhi.w	80029aa <wm8994_Init+0x86e>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 80028ac:	d01b      	beq.n	80028e6 <wm8994_Init+0x7aa>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 80028b4:	d879      	bhi.n	80029aa <wm8994_Init+0x86e>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 80028bc:	d005      	beq.n	80028ca <wm8994_Init+0x78e>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f642 3211 	movw	r2, #11025	@ 0x2b11
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d046      	beq.n	8002956 <wm8994_Init+0x81a>
 80028c8:	e06f      	b.n	80029aa <wm8994_Init+0x86e>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 80028ca:	89fb      	ldrh	r3, [r7, #14]
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	2203      	movs	r2, #3
 80028d0:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80028d4:	4618      	mov	r0, r3
 80028d6:	f000 ff4b 	bl	8003770 <CODEC_IO_Write>
 80028da:	4603      	mov	r3, r0
 80028dc:	461a      	mov	r2, r3
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	4413      	add	r3, r2
 80028e2:	61fb      	str	r3, [r7, #28]
    break;
 80028e4:	e06f      	b.n	80029c6 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 80028e6:	89fb      	ldrh	r3, [r7, #14]
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	2233      	movs	r2, #51	@ 0x33
 80028ec:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80028f0:	4618      	mov	r0, r3
 80028f2:	f000 ff3d 	bl	8003770 <CODEC_IO_Write>
 80028f6:	4603      	mov	r3, r0
 80028f8:	461a      	mov	r2, r3
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	4413      	add	r3, r2
 80028fe:	61fb      	str	r3, [r7, #28]
    break;
 8002900:	e061      	b.n	80029c6 <wm8994_Init+0x88a>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 8002902:	89fb      	ldrh	r3, [r7, #14]
 8002904:	b2db      	uxtb	r3, r3
 8002906:	2263      	movs	r2, #99	@ 0x63
 8002908:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800290c:	4618      	mov	r0, r3
 800290e:	f000 ff2f 	bl	8003770 <CODEC_IO_Write>
 8002912:	4603      	mov	r3, r0
 8002914:	461a      	mov	r2, r3
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	4413      	add	r3, r2
 800291a:	61fb      	str	r3, [r7, #28]
    break;
 800291c:	e053      	b.n	80029c6 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 800291e:	89fb      	ldrh	r3, [r7, #14]
 8002920:	b2db      	uxtb	r3, r3
 8002922:	2283      	movs	r2, #131	@ 0x83
 8002924:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002928:	4618      	mov	r0, r3
 800292a:	f000 ff21 	bl	8003770 <CODEC_IO_Write>
 800292e:	4603      	mov	r3, r0
 8002930:	461a      	mov	r2, r3
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	4413      	add	r3, r2
 8002936:	61fb      	str	r3, [r7, #28]
    break;
 8002938:	e045      	b.n	80029c6 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 800293a:	89fb      	ldrh	r3, [r7, #14]
 800293c:	b2db      	uxtb	r3, r3
 800293e:	22a3      	movs	r2, #163	@ 0xa3
 8002940:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002944:	4618      	mov	r0, r3
 8002946:	f000 ff13 	bl	8003770 <CODEC_IO_Write>
 800294a:	4603      	mov	r3, r0
 800294c:	461a      	mov	r2, r3
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	4413      	add	r3, r2
 8002952:	61fb      	str	r3, [r7, #28]
    break;
 8002954:	e037      	b.n	80029c6 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 8002956:	89fb      	ldrh	r3, [r7, #14]
 8002958:	b2db      	uxtb	r3, r3
 800295a:	2213      	movs	r2, #19
 800295c:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002960:	4618      	mov	r0, r3
 8002962:	f000 ff05 	bl	8003770 <CODEC_IO_Write>
 8002966:	4603      	mov	r3, r0
 8002968:	461a      	mov	r2, r3
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	4413      	add	r3, r2
 800296e:	61fb      	str	r3, [r7, #28]
    break;
 8002970:	e029      	b.n	80029c6 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8002972:	89fb      	ldrh	r3, [r7, #14]
 8002974:	b2db      	uxtb	r3, r3
 8002976:	2243      	movs	r2, #67	@ 0x43
 8002978:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800297c:	4618      	mov	r0, r3
 800297e:	f000 fef7 	bl	8003770 <CODEC_IO_Write>
 8002982:	4603      	mov	r3, r0
 8002984:	461a      	mov	r2, r3
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	4413      	add	r3, r2
 800298a:	61fb      	str	r3, [r7, #28]
    break;
 800298c:	e01b      	b.n	80029c6 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 800298e:	89fb      	ldrh	r3, [r7, #14]
 8002990:	b2db      	uxtb	r3, r3
 8002992:	2273      	movs	r2, #115	@ 0x73
 8002994:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002998:	4618      	mov	r0, r3
 800299a:	f000 fee9 	bl	8003770 <CODEC_IO_Write>
 800299e:	4603      	mov	r3, r0
 80029a0:	461a      	mov	r2, r3
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	4413      	add	r3, r2
 80029a6:	61fb      	str	r3, [r7, #28]
    break; 
 80029a8:	e00d      	b.n	80029c6 <wm8994_Init+0x88a>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 80029aa:	89fb      	ldrh	r3, [r7, #14]
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	2283      	movs	r2, #131	@ 0x83
 80029b0:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80029b4:	4618      	mov	r0, r3
 80029b6:	f000 fedb 	bl	8003770 <CODEC_IO_Write>
 80029ba:	4603      	mov	r3, r0
 80029bc:	461a      	mov	r2, r3
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	4413      	add	r3, r2
 80029c2:	61fb      	str	r3, [r7, #28]
    break; 
 80029c4:	bf00      	nop
  }

  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80029c6:	8afb      	ldrh	r3, [r7, #22]
 80029c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80029cc:	d10e      	bne.n	80029ec <wm8994_Init+0x8b0>
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4018);    
 80029ce:	89fb      	ldrh	r3, [r7, #14]
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	f244 0218 	movw	r2, #16408	@ 0x4018
 80029d6:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80029da:	4618      	mov	r0, r3
 80029dc:	f000 fec8 	bl	8003770 <CODEC_IO_Write>
 80029e0:	4603      	mov	r3, r0
 80029e2:	461a      	mov	r2, r3
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	4413      	add	r3, r2
 80029e8:	61fb      	str	r3, [r7, #28]
 80029ea:	e00d      	b.n	8002a08 <wm8994_Init+0x8cc>
  }
  else
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4010);
 80029ec:	89fb      	ldrh	r3, [r7, #14]
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	f244 0210 	movw	r2, #16400	@ 0x4010
 80029f4:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80029f8:	4618      	mov	r0, r3
 80029fa:	f000 feb9 	bl	8003770 <CODEC_IO_Write>
 80029fe:	4603      	mov	r3, r0
 8002a00:	461a      	mov	r2, r3
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	4413      	add	r3, r2
 8002a06:	61fb      	str	r3, [r7, #28]
  }
  
  /* slave mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x302, 0x0000);
 8002a08:	89fb      	ldrh	r3, [r7, #14]
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f240 3102 	movw	r1, #770	@ 0x302
 8002a12:	4618      	mov	r0, r3
 8002a14:	f000 feac 	bl	8003770 <CODEC_IO_Write>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	4413      	add	r3, r2
 8002a20:	61fb      	str	r3, [r7, #28]
  
  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  counter += CODEC_IO_Write(DeviceAddr, 0x208, 0x000A);
 8002a22:	89fb      	ldrh	r3, [r7, #14]
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	220a      	movs	r2, #10
 8002a28:	f44f 7102 	mov.w	r1, #520	@ 0x208
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f000 fe9f 	bl	8003770 <CODEC_IO_Write>
 8002a32:	4603      	mov	r3, r0
 8002a34:	461a      	mov	r2, r3
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	4413      	add	r3, r2
 8002a3a:	61fb      	str	r3, [r7, #28]
  
  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0001);
 8002a3c:	89fb      	ldrh	r3, [r7, #14]
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	2201      	movs	r2, #1
 8002a42:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002a46:	4618      	mov	r0, r3
 8002a48:	f000 fe92 	bl	8003770 <CODEC_IO_Write>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	461a      	mov	r2, r3
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	4413      	add	r3, r2
 8002a54:	61fb      	str	r3, [r7, #28]

  if (output_device > 0)  /* Audio output selected */
 8002a56:	8b3b      	ldrh	r3, [r7, #24]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	f000 817b 	beq.w	8002d54 <wm8994_Init+0xc18>
  {
    if (output_device == OUTPUT_DEVICE_HEADPHONE)
 8002a5e:	8b3b      	ldrh	r3, [r7, #24]
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d157      	bne.n	8002b14 <wm8994_Init+0x9d8>
    {      
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0100);
 8002a64:	89fb      	ldrh	r3, [r7, #14]
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002a6c:	212d      	movs	r1, #45	@ 0x2d
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f000 fe7e 	bl	8003770 <CODEC_IO_Write>
 8002a74:	4603      	mov	r3, r0
 8002a76:	461a      	mov	r2, r3
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	61fb      	str	r3, [r7, #28]
      
      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0100);    
 8002a7e:	89fb      	ldrh	r3, [r7, #14]
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002a86:	212e      	movs	r1, #46	@ 0x2e
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f000 fe71 	bl	8003770 <CODEC_IO_Write>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	461a      	mov	r2, r3
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	4413      	add	r3, r2
 8002a96:	61fb      	str	r3, [r7, #28]
            
      /* Startup sequence for Headphone */
      if(ColdStartup)
 8002a98:	4b0e      	ldr	r3, [pc, #56]	@ (8002ad4 <wm8994_Init+0x998>)
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d01b      	beq.n	8002ad8 <wm8994_Init+0x99c>
      {
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8100);
 8002aa0:	89fb      	ldrh	r3, [r7, #14]
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	f44f 4201 	mov.w	r2, #33024	@ 0x8100
 8002aa8:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8002aac:	4618      	mov	r0, r3
 8002aae:	f000 fe5f 	bl	8003770 <CODEC_IO_Write>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	4413      	add	r3, r2
 8002aba:	61fb      	str	r3, [r7, #28]
        
        ColdStartup=0;
 8002abc:	4b05      	ldr	r3, [pc, #20]	@ (8002ad4 <wm8994_Init+0x998>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	701a      	strb	r2, [r3, #0]
        /* Add Delay */
        AUDIO_IO_Delay(300);
 8002ac2:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8002ac6:	f001 f829 	bl	8003b1c <AUDIO_IO_Delay>
 8002aca:	e016      	b.n	8002afa <wm8994_Init+0x9be>
 8002acc:	20000cb0 	.word	0x20000cb0
 8002ad0:	00017700 	.word	0x00017700
 8002ad4:	20000034 	.word	0x20000034
      }
      else /* Headphone Warm Start-Up */
      { 
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8108);
 8002ad8:	89fb      	ldrh	r3, [r7, #14]
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	f248 1208 	movw	r2, #33032	@ 0x8108
 8002ae0:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f000 fe43 	bl	8003770 <CODEC_IO_Write>
 8002aea:	4603      	mov	r3, r0
 8002aec:	461a      	mov	r2, r3
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	4413      	add	r3, r2
 8002af2:	61fb      	str	r3, [r7, #28]
        /* Add Delay */
        AUDIO_IO_Delay(50);
 8002af4:	2032      	movs	r0, #50	@ 0x32
 8002af6:	f001 f811 	bl	8003b1c <AUDIO_IO_Delay>
      }

      /* Soft un-Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 8002afa:	89fb      	ldrh	r3, [r7, #14]
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2200      	movs	r2, #0
 8002b00:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8002b04:	4618      	mov	r0, r3
 8002b06:	f000 fe33 	bl	8003770 <CODEC_IO_Write>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	4413      	add	r3, r2
 8002b12:	61fb      	str	r3, [r7, #28]
    }
    /* Analog Output Configuration */

    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0300);
 8002b14:	89fb      	ldrh	r3, [r7, #14]
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002b1c:	2103      	movs	r1, #3
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f000 fe26 	bl	8003770 <CODEC_IO_Write>
 8002b24:	4603      	mov	r3, r0
 8002b26:	461a      	mov	r2, r3
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	4413      	add	r3, r2
 8002b2c:	61fb      	str	r3, [r7, #28]

    /* Left Speaker Mixer Volume = 0dB */
    counter += CODEC_IO_Write(DeviceAddr, 0x22, 0x0000);
 8002b2e:	89fb      	ldrh	r3, [r7, #14]
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	2200      	movs	r2, #0
 8002b34:	2122      	movs	r1, #34	@ 0x22
 8002b36:	4618      	mov	r0, r3
 8002b38:	f000 fe1a 	bl	8003770 <CODEC_IO_Write>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	461a      	mov	r2, r3
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	4413      	add	r3, r2
 8002b44:	61fb      	str	r3, [r7, #28]

    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x23, 0x0000);
 8002b46:	89fb      	ldrh	r3, [r7, #14]
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	2123      	movs	r1, #35	@ 0x23
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f000 fe0e 	bl	8003770 <CODEC_IO_Write>
 8002b54:	4603      	mov	r3, r0
 8002b56:	461a      	mov	r2, r3
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	4413      	add	r3, r2
 8002b5c:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x36, 0x0300);
 8002b5e:	89fb      	ldrh	r3, [r7, #14]
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002b66:	2136      	movs	r1, #54	@ 0x36
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f000 fe01 	bl	8003770 <CODEC_IO_Write>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	461a      	mov	r2, r3
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	4413      	add	r3, r2
 8002b76:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x3003);
 8002b78:	89fb      	ldrh	r3, [r7, #14]
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	f243 0203 	movw	r2, #12291	@ 0x3003
 8002b80:	2101      	movs	r1, #1
 8002b82:	4618      	mov	r0, r3
 8002b84:	f000 fdf4 	bl	8003770 <CODEC_IO_Write>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	4413      	add	r3, r2
 8002b90:	61fb      	str	r3, [r7, #28]

    /* Headphone/Speaker Enable */

    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8002b92:	8afb      	ldrh	r3, [r7, #22]
 8002b94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b98:	d10d      	bne.n	8002bb6 <wm8994_Init+0xa7a>
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0205);
 8002b9a:	89fb      	ldrh	r3, [r7, #14]
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	f240 2205 	movw	r2, #517	@ 0x205
 8002ba2:	2151      	movs	r1, #81	@ 0x51
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f000 fde3 	bl	8003770 <CODEC_IO_Write>
 8002baa:	4603      	mov	r3, r0
 8002bac:	461a      	mov	r2, r3
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	4413      	add	r3, r2
 8002bb2:	61fb      	str	r3, [r7, #28]
 8002bb4:	e00b      	b.n	8002bce <wm8994_Init+0xa92>
    }
    else
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0005);      
 8002bb6:	89fb      	ldrh	r3, [r7, #14]
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	2205      	movs	r2, #5
 8002bbc:	2151      	movs	r1, #81	@ 0x51
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f000 fdd6 	bl	8003770 <CODEC_IO_Write>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	4413      	add	r3, r2
 8002bcc:	61fb      	str	r3, [r7, #28]
    }

    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 8002bce:	8b7b      	ldrh	r3, [r7, #26]
 8002bd0:	f443 534c 	orr.w	r3, r3, #13056	@ 0x3300
 8002bd4:	f043 0303 	orr.w	r3, r3, #3
 8002bd8:	837b      	strh	r3, [r7, #26]
    counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8002bda:	89fb      	ldrh	r3, [r7, #14]
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	8b7a      	ldrh	r2, [r7, #26]
 8002be0:	2101      	movs	r1, #1
 8002be2:	4618      	mov	r0, r3
 8002be4:	f000 fdc4 	bl	8003770 <CODEC_IO_Write>
 8002be8:	4603      	mov	r3, r0
 8002bea:	461a      	mov	r2, r3
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	4413      	add	r3, r2
 8002bf0:	61fb      	str	r3, [r7, #28]

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x0022);
 8002bf2:	89fb      	ldrh	r3, [r7, #14]
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	2222      	movs	r2, #34	@ 0x22
 8002bf8:	2160      	movs	r1, #96	@ 0x60
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f000 fdb8 	bl	8003770 <CODEC_IO_Write>
 8002c00:	4603      	mov	r3, r0
 8002c02:	461a      	mov	r2, r3
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	4413      	add	r3, r2
 8002c08:	61fb      	str	r3, [r7, #28]

    /* Enable Charge Pump */
    counter += CODEC_IO_Write(DeviceAddr, 0x4C, 0x9F25);
 8002c0a:	89fb      	ldrh	r3, [r7, #14]
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	f649 7225 	movw	r2, #40741	@ 0x9f25
 8002c12:	214c      	movs	r1, #76	@ 0x4c
 8002c14:	4618      	mov	r0, r3
 8002c16:	f000 fdab 	bl	8003770 <CODEC_IO_Write>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	4413      	add	r3, r2
 8002c22:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(15);
 8002c24:	200f      	movs	r0, #15
 8002c26:	f000 ff79 	bl	8003b1c <AUDIO_IO_Delay>

    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0001);
 8002c2a:	89fb      	ldrh	r3, [r7, #14]
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	2201      	movs	r2, #1
 8002c30:	212d      	movs	r1, #45	@ 0x2d
 8002c32:	4618      	mov	r0, r3
 8002c34:	f000 fd9c 	bl	8003770 <CODEC_IO_Write>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	4413      	add	r3, r2
 8002c40:	61fb      	str	r3, [r7, #28]

    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0001);
 8002c42:	89fb      	ldrh	r3, [r7, #14]
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	2201      	movs	r2, #1
 8002c48:	212e      	movs	r1, #46	@ 0x2e
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f000 fd90 	bl	8003770 <CODEC_IO_Write>
 8002c50:	4603      	mov	r3, r0
 8002c52:	461a      	mov	r2, r3
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	4413      	add	r3, r2
 8002c58:	61fb      	str	r3, [r7, #28]

    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0030 | 0x0300);
 8002c5a:	89fb      	ldrh	r3, [r7, #14]
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	f44f 724c 	mov.w	r2, #816	@ 0x330
 8002c62:	2103      	movs	r1, #3
 8002c64:	4618      	mov	r0, r3
 8002c66:	f000 fd83 	bl	8003770 <CODEC_IO_Write>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	4413      	add	r3, r2
 8002c72:	61fb      	str	r3, [r7, #28]

    /* Enable DC Servo and trigger start-up mode on left and right channels */
    counter += CODEC_IO_Write(DeviceAddr, 0x54, 0x0033);
 8002c74:	89fb      	ldrh	r3, [r7, #14]
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	2233      	movs	r2, #51	@ 0x33
 8002c7a:	2154      	movs	r1, #84	@ 0x54
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f000 fd77 	bl	8003770 <CODEC_IO_Write>
 8002c82:	4603      	mov	r3, r0
 8002c84:	461a      	mov	r2, r3
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	4413      	add	r3, r2
 8002c8a:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(257);
 8002c8c:	f240 1001 	movw	r0, #257	@ 0x101
 8002c90:	f000 ff44 	bl	8003b1c <AUDIO_IO_Delay>

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x00EE);
 8002c94:	89fb      	ldrh	r3, [r7, #14]
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	22ee      	movs	r2, #238	@ 0xee
 8002c9a:	2160      	movs	r1, #96	@ 0x60
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f000 fd67 	bl	8003770 <CODEC_IO_Write>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	4413      	add	r3, r2
 8002caa:	61fb      	str	r3, [r7, #28]

    /* Unmutes */

    /* Unmute DAC 1 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x610, 0x00C0);
 8002cac:	89fb      	ldrh	r3, [r7, #14]
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	22c0      	movs	r2, #192	@ 0xc0
 8002cb2:	f44f 61c2 	mov.w	r1, #1552	@ 0x610
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f000 fd5a 	bl	8003770 <CODEC_IO_Write>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	4413      	add	r3, r2
 8002cc4:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 1 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x611, 0x00C0);
 8002cc6:	89fb      	ldrh	r3, [r7, #14]
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	22c0      	movs	r2, #192	@ 0xc0
 8002ccc:	f240 6111 	movw	r1, #1553	@ 0x611
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f000 fd4d 	bl	8003770 <CODEC_IO_Write>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	461a      	mov	r2, r3
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	4413      	add	r3, r2
 8002cde:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 0 DAC path */
    counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 8002ce0:	89fb      	ldrh	r3, [r7, #14]
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	2210      	movs	r2, #16
 8002ce6:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8002cea:	4618      	mov	r0, r3
 8002cec:	f000 fd40 	bl	8003770 <CODEC_IO_Write>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	4413      	add	r3, r2
 8002cf8:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x612, 0x00C0);
 8002cfa:	89fb      	ldrh	r3, [r7, #14]
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	22c0      	movs	r2, #192	@ 0xc0
 8002d00:	f240 6112 	movw	r1, #1554	@ 0x612
 8002d04:	4618      	mov	r0, r3
 8002d06:	f000 fd33 	bl	8003770 <CODEC_IO_Write>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	4413      	add	r3, r2
 8002d12:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x613, 0x00C0);
 8002d14:	89fb      	ldrh	r3, [r7, #14]
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	22c0      	movs	r2, #192	@ 0xc0
 8002d1a:	f240 6113 	movw	r1, #1555	@ 0x613
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f000 fd26 	bl	8003770 <CODEC_IO_Write>
 8002d24:	4603      	mov	r3, r0
 8002d26:	461a      	mov	r2, r3
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 8002d2e:	89fb      	ldrh	r3, [r7, #14]
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	2210      	movs	r2, #16
 8002d34:	f240 4122 	movw	r1, #1058	@ 0x422
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f000 fd19 	bl	8003770 <CODEC_IO_Write>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	461a      	mov	r2, r3
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	4413      	add	r3, r2
 8002d46:	61fb      	str	r3, [r7, #28]
    
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8002d48:	7afa      	ldrb	r2, [r7, #11]
 8002d4a:	89fb      	ldrh	r3, [r7, #14]
 8002d4c:	4611      	mov	r1, r2
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f000 f984 	bl	800305c <wm8994_SetVolume>
  }

  if (input_device > 0) /* Audio input selected */
 8002d54:	8afb      	ldrh	r3, [r7, #22]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	f000 80a6 	beq.w	8002ea8 <wm8994_Init+0xd6c>
  {
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 8002d5c:	8afb      	ldrh	r3, [r7, #22]
 8002d5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d62:	d003      	beq.n	8002d6c <wm8994_Init+0xc30>
 8002d64:	8afb      	ldrh	r3, [r7, #22]
 8002d66:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d6a:	d12b      	bne.n	8002dc4 <wm8994_Init+0xc88>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8002d6c:	8b7b      	ldrh	r3, [r7, #26]
 8002d6e:	f043 0313 	orr.w	r3, r3, #19
 8002d72:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8002d74:	89fb      	ldrh	r3, [r7, #14]
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	8b7a      	ldrh	r2, [r7, #26]
 8002d7a:	2101      	movs	r1, #1
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f000 fcf7 	bl	8003770 <CODEC_IO_Write>
 8002d82:	4603      	mov	r3, r0
 8002d84:	461a      	mov	r2, r3
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	4413      	add	r3, r2
 8002d8a:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8002d8c:	89fb      	ldrh	r3, [r7, #14]
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	2202      	movs	r2, #2
 8002d92:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8002d96:	4618      	mov	r0, r3
 8002d98:	f000 fcea 	bl	8003770 <CODEC_IO_Write>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	461a      	mov	r2, r3
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	4413      	add	r3, r2
 8002da4:	61fb      	str	r3, [r7, #28]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x3800);
 8002da6:	89fb      	ldrh	r3, [r7, #14]
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002dae:	f240 4111 	movw	r1, #1041	@ 0x411
 8002db2:	4618      	mov	r0, r3
 8002db4:	f000 fcdc 	bl	8003770 <CODEC_IO_Write>
 8002db8:	4603      	mov	r3, r0
 8002dba:	461a      	mov	r2, r3
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	4413      	add	r3, r2
 8002dc0:	61fb      	str	r3, [r7, #28]
 8002dc2:	e06b      	b.n	8002e9c <wm8994_Init+0xd60>
    }
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8002dc4:	8afb      	ldrh	r3, [r7, #22]
 8002dc6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002dca:	d139      	bne.n	8002e40 <wm8994_Init+0xd04>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8002dcc:	8b7b      	ldrh	r3, [r7, #26]
 8002dce:	f043 0313 	orr.w	r3, r3, #19
 8002dd2:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8002dd4:	89fb      	ldrh	r3, [r7, #14]
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	8b7a      	ldrh	r2, [r7, #26]
 8002dda:	2101      	movs	r1, #1
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f000 fcc7 	bl	8003770 <CODEC_IO_Write>
 8002de2:	4603      	mov	r3, r0
 8002de4:	461a      	mov	r2, r3
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	4413      	add	r3, r2
 8002dea:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8002dec:	89fb      	ldrh	r3, [r7, #14]
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	2202      	movs	r2, #2
 8002df2:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8002df6:	4618      	mov	r0, r3
 8002df8:	f000 fcba 	bl	8003770 <CODEC_IO_Write>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	461a      	mov	r2, r3
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	4413      	add	r3, r2
 8002e04:	61fb      	str	r3, [r7, #28]
    
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8002e06:	89fb      	ldrh	r3, [r7, #14]
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8002e0e:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 8002e12:	4618      	mov	r0, r3
 8002e14:	f000 fcac 	bl	8003770 <CODEC_IO_Write>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	4413      	add	r3, r2
 8002e20:	61fb      	str	r3, [r7, #28]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x1800);      
 8002e22:	89fb      	ldrh	r3, [r7, #14]
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8002e2a:	f240 4111 	movw	r1, #1041	@ 0x411
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f000 fc9e 	bl	8003770 <CODEC_IO_Write>
 8002e34:	4603      	mov	r3, r0
 8002e36:	461a      	mov	r2, r3
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	4413      	add	r3, r2
 8002e3c:	61fb      	str	r3, [r7, #28]
 8002e3e:	e02d      	b.n	8002e9c <wm8994_Init+0xd60>
    }    
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 8002e40:	8afb      	ldrh	r3, [r7, #22]
 8002e42:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002e46:	d003      	beq.n	8002e50 <wm8994_Init+0xd14>
 8002e48:	8afb      	ldrh	r3, [r7, #22]
 8002e4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e4e:	d125      	bne.n	8002e9c <wm8994_Init+0xd60>
    {

      /* Disable mute on IN1L, IN1L Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x18, 0x000B);
 8002e50:	89fb      	ldrh	r3, [r7, #14]
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	220b      	movs	r2, #11
 8002e56:	2118      	movs	r1, #24
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f000 fc89 	bl	8003770 <CODEC_IO_Write>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	461a      	mov	r2, r3
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	4413      	add	r3, r2
 8002e66:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R, IN1R Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x1A, 0x000B);
 8002e68:	89fb      	ldrh	r3, [r7, #14]
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	220b      	movs	r2, #11
 8002e6e:	211a      	movs	r1, #26
 8002e70:	4618      	mov	r0, r3
 8002e72:	f000 fc7d 	bl	8003770 <CODEC_IO_Write>
 8002e76:	4603      	mov	r3, r0
 8002e78:	461a      	mov	r2, r3
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	61fb      	str	r3, [r7, #28]

      /* AIF ADC1 HPF enable, HPF cut = hifi mode fc=4Hz at fs=48kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8002e80:	89fb      	ldrh	r3, [r7, #14]
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8002e88:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f000 fc6f 	bl	8003770 <CODEC_IO_Write>
 8002e92:	4603      	mov	r3, r0
 8002e94:	461a      	mov	r2, r3
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	4413      	add	r3, r2
 8002e9a:	61fb      	str	r3, [r7, #28]
    }
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8002e9c:	7afa      	ldrb	r2, [r7, #11]
 8002e9e:	89fb      	ldrh	r3, [r7, #14]
 8002ea0:	4611      	mov	r1, r2
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f000 f8da 	bl	800305c <wm8994_SetVolume>
  }
  /* Return communication control value */
  return counter;  
 8002ea8:	69fb      	ldr	r3, [r7, #28]
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3720      	adds	r7, #32
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop

08002eb4 <wm8994_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void wm8994_DeInit(void)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 8002eb8:	f000 fdd2 	bl	8003a60 <AUDIO_IO_DeInit>
}
 8002ebc:	bf00      	nop
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <wm8994_ReadID>:
  * @brief  Get the WM8994 ID.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval The WM8994 ID 
  */
uint32_t wm8994_ReadID(uint16_t DeviceAddr)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	80fb      	strh	r3, [r7, #6]
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 8002eca:	f000 fdbf 	bl	8003a4c <AUDIO_IO_Init>

  return ((uint32_t)AUDIO_IO_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 8002ece:	88fb      	ldrh	r3, [r7, #6]
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2100      	movs	r1, #0
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f000 fdf5 	bl	8003ac4 <AUDIO_IO_Read>
 8002eda:	4603      	mov	r3, r0
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3708      	adds	r7, #8
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <wm8994_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	4603      	mov	r3, r0
 8002eec:	6039      	str	r1, [r7, #0]
 8002eee:	80fb      	strh	r3, [r7, #6]
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8002ef8:	88fb      	ldrh	r3, [r7, #6]
 8002efa:	2100      	movs	r1, #0
 8002efc:	4618      	mov	r0, r3
 8002efe:	f000 f9d1 	bl	80032a4 <wm8994_SetMute>
 8002f02:	4602      	mov	r2, r0
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	4413      	add	r3, r2
 8002f08:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3710      	adds	r7, #16
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <wm8994_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Pause(uint16_t DeviceAddr)
{  
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8002f22:	88fb      	ldrh	r3, [r7, #6]
 8002f24:	2101      	movs	r1, #1
 8002f26:	4618      	mov	r0, r3
 8002f28:	f000 f9bc 	bl	80032a4 <wm8994_SetMute>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	4413      	add	r3, r2
 8002f32:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x01);
 8002f34:	88fb      	ldrh	r3, [r7, #6]
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	2201      	movs	r2, #1
 8002f3a:	2102      	movs	r1, #2
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f000 fc17 	bl	8003770 <CODEC_IO_Write>
 8002f42:	4603      	mov	r3, r0
 8002f44:	461a      	mov	r2, r3
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	4413      	add	r3, r2
 8002f4a:	60fb      	str	r3, [r7, #12]
 
  return counter;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3710      	adds	r7, #16
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}

08002f56 <wm8994_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Resume(uint16_t DeviceAddr)
{
 8002f56:	b580      	push	{r7, lr}
 8002f58:	b084      	sub	sp, #16
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8002f60:	2300      	movs	r3, #0
 8002f62:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8002f64:	88fb      	ldrh	r3, [r7, #6]
 8002f66:	2100      	movs	r1, #0
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f000 f99b 	bl	80032a4 <wm8994_SetMute>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	4413      	add	r3, r2
 8002f74:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8002f76:	68fb      	ldr	r3, [r7, #12]
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3710      	adds	r7, #16
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <wm8994_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	4603      	mov	r3, r0
 8002f88:	6039      	str	r1, [r7, #0]
 8002f8a:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	60fb      	str	r3, [r7, #12]

  if (outputEnabled != 0)
 8002f90:	4b31      	ldr	r3, [pc, #196]	@ (8003058 <wm8994_Stop+0xd8>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d05a      	beq.n	800304e <wm8994_Stop+0xce>
  {
    /* Mute the output first */
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8002f98:	88fb      	ldrh	r3, [r7, #6]
 8002f9a:	2101      	movs	r1, #1
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f000 f981 	bl	80032a4 <wm8994_SetMute>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	60fb      	str	r3, [r7, #12]

    if (CodecPdwnMode == CODEC_PDWN_SW)
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d04e      	beq.n	800304e <wm8994_Stop+0xce>
      /* Only output mute required*/
    }
    else /* CODEC_PDWN_HW */
    {
      /* Mute the AIF1 Timeslot 0 DAC1 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8002fb0:	88fb      	ldrh	r3, [r7, #6]
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002fb8:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f000 fbd7 	bl	8003770 <CODEC_IO_Write>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	4413      	add	r3, r2
 8002fca:	60fb      	str	r3, [r7, #12]

      /* Mute the AIF1 Timeslot 1 DAC2 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 8002fcc:	88fb      	ldrh	r3, [r7, #6]
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002fd4:	f240 4122 	movw	r1, #1058	@ 0x422
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f000 fbc9 	bl	8003770 <CODEC_IO_Write>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	4413      	add	r3, r2
 8002fe6:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1L_TO_HPOUT1L */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0000);
 8002fe8:	88fb      	ldrh	r3, [r7, #6]
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	2200      	movs	r2, #0
 8002fee:	212d      	movs	r1, #45	@ 0x2d
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f000 fbbd 	bl	8003770 <CODEC_IO_Write>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	4413      	add	r3, r2
 8002ffe:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1R_TO_HPOUT1R */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0000);
 8003000:	88fb      	ldrh	r3, [r7, #6]
 8003002:	b2db      	uxtb	r3, r3
 8003004:	2200      	movs	r2, #0
 8003006:	212e      	movs	r1, #46	@ 0x2e
 8003008:	4618      	mov	r0, r3
 800300a:	f000 fbb1 	bl	8003770 <CODEC_IO_Write>
 800300e:	4603      	mov	r3, r0
 8003010:	461a      	mov	r2, r3
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	4413      	add	r3, r2
 8003016:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1 and DAC2 */
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0000);
 8003018:	88fb      	ldrh	r3, [r7, #6]
 800301a:	b2db      	uxtb	r3, r3
 800301c:	2200      	movs	r2, #0
 800301e:	2105      	movs	r1, #5
 8003020:	4618      	mov	r0, r3
 8003022:	f000 fba5 	bl	8003770 <CODEC_IO_Write>
 8003026:	4603      	mov	r3, r0
 8003028:	461a      	mov	r2, r3
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	4413      	add	r3, r2
 800302e:	60fb      	str	r3, [r7, #12]

      /* Reset Codec by writing in 0x0000 address register */
      counter += CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8003030:	88fb      	ldrh	r3, [r7, #6]
 8003032:	b2db      	uxtb	r3, r3
 8003034:	2200      	movs	r2, #0
 8003036:	2100      	movs	r1, #0
 8003038:	4618      	mov	r0, r3
 800303a:	f000 fb99 	bl	8003770 <CODEC_IO_Write>
 800303e:	4603      	mov	r3, r0
 8003040:	461a      	mov	r2, r3
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	4413      	add	r3, r2
 8003046:	60fb      	str	r3, [r7, #12]

      outputEnabled = 0;
 8003048:	4b03      	ldr	r3, [pc, #12]	@ (8003058 <wm8994_Stop+0xd8>)
 800304a:	2200      	movs	r2, #0
 800304c:	601a      	str	r2, [r3, #0]
    }
  }
  return counter;
 800304e:	68fb      	ldr	r3, [r7, #12]
}
 8003050:	4618      	mov	r0, r3
 8003052:	3710      	adds	r7, #16
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}
 8003058:	20000cac 	.word	0x20000cac

0800305c <wm8994_SetVolume>:
  * @param Volume: a byte value from 0 to 255 (refer to codec registers 
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	4603      	mov	r3, r0
 8003064:	460a      	mov	r2, r1
 8003066:	80fb      	strh	r3, [r7, #6]
 8003068:	4613      	mov	r3, r2
 800306a:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 800306c:	2300      	movs	r3, #0
 800306e:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8003070:	797b      	ldrb	r3, [r7, #5]
 8003072:	2b64      	cmp	r3, #100	@ 0x64
 8003074:	d80b      	bhi.n	800308e <wm8994_SetVolume+0x32>
 8003076:	797a      	ldrb	r2, [r7, #5]
 8003078:	4613      	mov	r3, r2
 800307a:	019b      	lsls	r3, r3, #6
 800307c:	1a9b      	subs	r3, r3, r2
 800307e:	4a86      	ldr	r2, [pc, #536]	@ (8003298 <wm8994_SetVolume+0x23c>)
 8003080:	fb82 1203 	smull	r1, r2, r2, r3
 8003084:	1152      	asrs	r2, r2, #5
 8003086:	17db      	asrs	r3, r3, #31
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	b2db      	uxtb	r3, r3
 800308c:	e000      	b.n	8003090 <wm8994_SetVolume+0x34>
 800308e:	2364      	movs	r3, #100	@ 0x64
 8003090:	72fb      	strb	r3, [r7, #11]

  /* Output volume */
  if (outputEnabled != 0)
 8003092:	4b82      	ldr	r3, [pc, #520]	@ (800329c <wm8994_SetVolume+0x240>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2b00      	cmp	r3, #0
 8003098:	f000 809b 	beq.w	80031d2 <wm8994_SetVolume+0x176>
  {
    if(convertedvol > 0x3E)
 800309c:	7afb      	ldrb	r3, [r7, #11]
 800309e:	2b3e      	cmp	r3, #62	@ 0x3e
 80030a0:	d93d      	bls.n	800311e <wm8994_SetVolume+0xc2>
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80030a2:	88fb      	ldrh	r3, [r7, #6]
 80030a4:	2100      	movs	r1, #0
 80030a6:	4618      	mov	r0, r3
 80030a8:	f000 f8fc 	bl	80032a4 <wm8994_SetMute>
 80030ac:	4602      	mov	r2, r0
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	4413      	add	r3, r2
 80030b2:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 80030b4:	88fb      	ldrh	r3, [r7, #6]
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	f240 127f 	movw	r2, #383	@ 0x17f
 80030bc:	211c      	movs	r1, #28
 80030be:	4618      	mov	r0, r3
 80030c0:	f000 fb56 	bl	8003770 <CODEC_IO_Write>
 80030c4:	4603      	mov	r3, r0
 80030c6:	461a      	mov	r2, r3
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	4413      	add	r3, r2
 80030cc:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 80030ce:	88fb      	ldrh	r3, [r7, #6]
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	f240 127f 	movw	r2, #383	@ 0x17f
 80030d6:	211d      	movs	r1, #29
 80030d8:	4618      	mov	r0, r3
 80030da:	f000 fb49 	bl	8003770 <CODEC_IO_Write>
 80030de:	4603      	mov	r3, r0
 80030e0:	461a      	mov	r2, r3
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	4413      	add	r3, r2
 80030e6:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 80030e8:	88fb      	ldrh	r3, [r7, #6]
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	f240 127f 	movw	r2, #383	@ 0x17f
 80030f0:	2126      	movs	r1, #38	@ 0x26
 80030f2:	4618      	mov	r0, r3
 80030f4:	f000 fb3c 	bl	8003770 <CODEC_IO_Write>
 80030f8:	4603      	mov	r3, r0
 80030fa:	461a      	mov	r2, r3
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	4413      	add	r3, r2
 8003100:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 8003102:	88fb      	ldrh	r3, [r7, #6]
 8003104:	b2db      	uxtb	r3, r3
 8003106:	f240 127f 	movw	r2, #383	@ 0x17f
 800310a:	2127      	movs	r1, #39	@ 0x27
 800310c:	4618      	mov	r0, r3
 800310e:	f000 fb2f 	bl	8003770 <CODEC_IO_Write>
 8003112:	4603      	mov	r3, r0
 8003114:	461a      	mov	r2, r3
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	4413      	add	r3, r2
 800311a:	60fb      	str	r3, [r7, #12]
 800311c:	e059      	b.n	80031d2 <wm8994_SetVolume+0x176>
    }
    else if (Volume == 0)
 800311e:	797b      	ldrb	r3, [r7, #5]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d109      	bne.n	8003138 <wm8994_SetVolume+0xdc>
    {
      /* Mute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8003124:	88fb      	ldrh	r3, [r7, #6]
 8003126:	2101      	movs	r1, #1
 8003128:	4618      	mov	r0, r3
 800312a:	f000 f8bb 	bl	80032a4 <wm8994_SetMute>
 800312e:	4602      	mov	r2, r0
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	4413      	add	r3, r2
 8003134:	60fb      	str	r3, [r7, #12]
 8003136:	e04c      	b.n	80031d2 <wm8994_SetVolume+0x176>
    }
    else
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8003138:	88fb      	ldrh	r3, [r7, #6]
 800313a:	2100      	movs	r1, #0
 800313c:	4618      	mov	r0, r3
 800313e:	f000 f8b1 	bl	80032a4 <wm8994_SetMute>
 8003142:	4602      	mov	r2, r0
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	4413      	add	r3, r2
 8003148:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 800314a:	88fb      	ldrh	r3, [r7, #6]
 800314c:	b2d8      	uxtb	r0, r3
 800314e:	7afb      	ldrb	r3, [r7, #11]
 8003150:	b21b      	sxth	r3, r3
 8003152:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8003156:	b21b      	sxth	r3, r3
 8003158:	b29b      	uxth	r3, r3
 800315a:	461a      	mov	r2, r3
 800315c:	211c      	movs	r1, #28
 800315e:	f000 fb07 	bl	8003770 <CODEC_IO_Write>
 8003162:	4603      	mov	r3, r0
 8003164:	461a      	mov	r2, r3
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	4413      	add	r3, r2
 800316a:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 800316c:	88fb      	ldrh	r3, [r7, #6]
 800316e:	b2d8      	uxtb	r0, r3
 8003170:	7afb      	ldrb	r3, [r7, #11]
 8003172:	b21b      	sxth	r3, r3
 8003174:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8003178:	b21b      	sxth	r3, r3
 800317a:	b29b      	uxth	r3, r3
 800317c:	461a      	mov	r2, r3
 800317e:	211d      	movs	r1, #29
 8003180:	f000 faf6 	bl	8003770 <CODEC_IO_Write>
 8003184:	4603      	mov	r3, r0
 8003186:	461a      	mov	r2, r3
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	4413      	add	r3, r2
 800318c:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 800318e:	88fb      	ldrh	r3, [r7, #6]
 8003190:	b2d8      	uxtb	r0, r3
 8003192:	7afb      	ldrb	r3, [r7, #11]
 8003194:	b21b      	sxth	r3, r3
 8003196:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 800319a:	b21b      	sxth	r3, r3
 800319c:	b29b      	uxth	r3, r3
 800319e:	461a      	mov	r2, r3
 80031a0:	2126      	movs	r1, #38	@ 0x26
 80031a2:	f000 fae5 	bl	8003770 <CODEC_IO_Write>
 80031a6:	4603      	mov	r3, r0
 80031a8:	461a      	mov	r2, r3
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	4413      	add	r3, r2
 80031ae:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 80031b0:	88fb      	ldrh	r3, [r7, #6]
 80031b2:	b2d8      	uxtb	r0, r3
 80031b4:	7afb      	ldrb	r3, [r7, #11]
 80031b6:	b21b      	sxth	r3, r3
 80031b8:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 80031bc:	b21b      	sxth	r3, r3
 80031be:	b29b      	uxth	r3, r3
 80031c0:	461a      	mov	r2, r3
 80031c2:	2127      	movs	r1, #39	@ 0x27
 80031c4:	f000 fad4 	bl	8003770 <CODEC_IO_Write>
 80031c8:	4603      	mov	r3, r0
 80031ca:	461a      	mov	r2, r3
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	4413      	add	r3, r2
 80031d0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Input volume */
  if (inputEnabled != 0)
 80031d2:	4b33      	ldr	r3, [pc, #204]	@ (80032a0 <wm8994_SetVolume+0x244>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d059      	beq.n	800328e <wm8994_SetVolume+0x232>
  {
    convertedvol = VOLUME_IN_CONVERT(Volume);
 80031da:	797b      	ldrb	r3, [r7, #5]
 80031dc:	2b63      	cmp	r3, #99	@ 0x63
 80031de:	d80c      	bhi.n	80031fa <wm8994_SetVolume+0x19e>
 80031e0:	797a      	ldrb	r2, [r7, #5]
 80031e2:	4613      	mov	r3, r2
 80031e4:	011b      	lsls	r3, r3, #4
 80031e6:	1a9b      	subs	r3, r3, r2
 80031e8:	011b      	lsls	r3, r3, #4
 80031ea:	4a2b      	ldr	r2, [pc, #172]	@ (8003298 <wm8994_SetVolume+0x23c>)
 80031ec:	fb82 1203 	smull	r1, r2, r2, r3
 80031f0:	1152      	asrs	r2, r2, #5
 80031f2:	17db      	asrs	r3, r3, #31
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	e000      	b.n	80031fc <wm8994_SetVolume+0x1a0>
 80031fa:	23ef      	movs	r3, #239	@ 0xef
 80031fc:	72fb      	strb	r3, [r7, #11]

    /* Left AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 80031fe:	88fb      	ldrh	r3, [r7, #6]
 8003200:	b2d8      	uxtb	r0, r3
 8003202:	7afb      	ldrb	r3, [r7, #11]
 8003204:	b21b      	sxth	r3, r3
 8003206:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800320a:	b21b      	sxth	r3, r3
 800320c:	b29b      	uxth	r3, r3
 800320e:	461a      	mov	r2, r3
 8003210:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003214:	f000 faac 	bl	8003770 <CODEC_IO_Write>
 8003218:	4603      	mov	r3, r0
 800321a:	461a      	mov	r2, r3
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	4413      	add	r3, r2
 8003220:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x401, convertedvol | 0x100);
 8003222:	88fb      	ldrh	r3, [r7, #6]
 8003224:	b2d8      	uxtb	r0, r3
 8003226:	7afb      	ldrb	r3, [r7, #11]
 8003228:	b21b      	sxth	r3, r3
 800322a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800322e:	b21b      	sxth	r3, r3
 8003230:	b29b      	uxth	r3, r3
 8003232:	461a      	mov	r2, r3
 8003234:	f240 4101 	movw	r1, #1025	@ 0x401
 8003238:	f000 fa9a 	bl	8003770 <CODEC_IO_Write>
 800323c:	4603      	mov	r3, r0
 800323e:	461a      	mov	r2, r3
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	4413      	add	r3, r2
 8003244:	60fb      	str	r3, [r7, #12]

    /* Left AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x404, convertedvol | 0x100);
 8003246:	88fb      	ldrh	r3, [r7, #6]
 8003248:	b2d8      	uxtb	r0, r3
 800324a:	7afb      	ldrb	r3, [r7, #11]
 800324c:	b21b      	sxth	r3, r3
 800324e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003252:	b21b      	sxth	r3, r3
 8003254:	b29b      	uxth	r3, r3
 8003256:	461a      	mov	r2, r3
 8003258:	f240 4104 	movw	r1, #1028	@ 0x404
 800325c:	f000 fa88 	bl	8003770 <CODEC_IO_Write>
 8003260:	4603      	mov	r3, r0
 8003262:	461a      	mov	r2, r3
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	4413      	add	r3, r2
 8003268:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x405, convertedvol | 0x100);
 800326a:	88fb      	ldrh	r3, [r7, #6]
 800326c:	b2d8      	uxtb	r0, r3
 800326e:	7afb      	ldrb	r3, [r7, #11]
 8003270:	b21b      	sxth	r3, r3
 8003272:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003276:	b21b      	sxth	r3, r3
 8003278:	b29b      	uxth	r3, r3
 800327a:	461a      	mov	r2, r3
 800327c:	f240 4105 	movw	r1, #1029	@ 0x405
 8003280:	f000 fa76 	bl	8003770 <CODEC_IO_Write>
 8003284:	4603      	mov	r3, r0
 8003286:	461a      	mov	r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	4413      	add	r3, r2
 800328c:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 800328e:	68fb      	ldr	r3, [r7, #12]
}
 8003290:	4618      	mov	r0, r3
 8003292:	3710      	adds	r7, #16
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}
 8003298:	51eb851f 	.word	0x51eb851f
 800329c:	20000cac 	.word	0x20000cac
 80032a0:	20000cb0 	.word	0x20000cb0

080032a4 <wm8994_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	4603      	mov	r3, r0
 80032ac:	6039      	str	r1, [r7, #0]
 80032ae:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80032b0:	2300      	movs	r3, #0
 80032b2:	60fb      	str	r3, [r7, #12]
  
  if (outputEnabled != 0)
 80032b4:	4b21      	ldr	r3, [pc, #132]	@ (800333c <wm8994_SetMute+0x98>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d039      	beq.n	8003330 <wm8994_SetMute+0x8c>
  {
    /* Set the Mute mode */
    if(Cmd == AUDIO_MUTE_ON)
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d11c      	bne.n	80032fc <wm8994_SetMute+0x58>
    {
      /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 80032c2:	88fb      	ldrh	r3, [r7, #6]
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80032ca:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 80032ce:	4618      	mov	r0, r3
 80032d0:	f000 fa4e 	bl	8003770 <CODEC_IO_Write>
 80032d4:	4603      	mov	r3, r0
 80032d6:	461a      	mov	r2, r3
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	4413      	add	r3, r2
 80032dc:	60fb      	str	r3, [r7, #12]

      /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 80032de:	88fb      	ldrh	r3, [r7, #6]
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80032e6:	f240 4122 	movw	r1, #1058	@ 0x422
 80032ea:	4618      	mov	r0, r3
 80032ec:	f000 fa40 	bl	8003770 <CODEC_IO_Write>
 80032f0:	4603      	mov	r3, r0
 80032f2:	461a      	mov	r2, r3
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	4413      	add	r3, r2
 80032f8:	60fb      	str	r3, [r7, #12]
 80032fa:	e019      	b.n	8003330 <wm8994_SetMute+0x8c>
    }
    else /* AUDIO_MUTE_OFF Disable the Mute */
    {
      /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 80032fc:	88fb      	ldrh	r3, [r7, #6]
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	2210      	movs	r2, #16
 8003302:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8003306:	4618      	mov	r0, r3
 8003308:	f000 fa32 	bl	8003770 <CODEC_IO_Write>
 800330c:	4603      	mov	r3, r0
 800330e:	461a      	mov	r2, r3
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	4413      	add	r3, r2
 8003314:	60fb      	str	r3, [r7, #12]

      /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 8003316:	88fb      	ldrh	r3, [r7, #6]
 8003318:	b2db      	uxtb	r3, r3
 800331a:	2210      	movs	r2, #16
 800331c:	f240 4122 	movw	r1, #1058	@ 0x422
 8003320:	4618      	mov	r0, r3
 8003322:	f000 fa25 	bl	8003770 <CODEC_IO_Write>
 8003326:	4603      	mov	r3, r0
 8003328:	461a      	mov	r2, r3
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	4413      	add	r3, r2
 800332e:	60fb      	str	r3, [r7, #12]
    }
  }
  return counter;
 8003330:	68fb      	ldr	r3, [r7, #12]
}
 8003332:	4618      	mov	r0, r3
 8003334:	3710      	adds	r7, #16
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	20000cac 	.word	0x20000cac

08003340 <wm8994_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	4603      	mov	r3, r0
 8003348:	460a      	mov	r2, r1
 800334a:	80fb      	strh	r3, [r7, #6]
 800334c:	4613      	mov	r3, r2
 800334e:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 8003350:	2300      	movs	r3, #0
 8003352:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 8003354:	797b      	ldrb	r3, [r7, #5]
 8003356:	2b03      	cmp	r3, #3
 8003358:	f000 808c 	beq.w	8003474 <wm8994_SetOutputMode+0x134>
 800335c:	2b03      	cmp	r3, #3
 800335e:	f300 80cb 	bgt.w	80034f8 <wm8994_SetOutputMode+0x1b8>
 8003362:	2b01      	cmp	r3, #1
 8003364:	d002      	beq.n	800336c <wm8994_SetOutputMode+0x2c>
 8003366:	2b02      	cmp	r3, #2
 8003368:	d042      	beq.n	80033f0 <wm8994_SetOutputMode+0xb0>
 800336a:	e0c5      	b.n	80034f8 <wm8994_SetOutputMode+0x1b8>
  {
  case OUTPUT_DEVICE_SPEAKER:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    Disable DAC2 (Left), Disable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 800336c:	88fb      	ldrh	r3, [r7, #6]
 800336e:	b2db      	uxtb	r3, r3
 8003370:	f640 420c 	movw	r2, #3084	@ 0xc0c
 8003374:	2105      	movs	r1, #5
 8003376:	4618      	mov	r0, r3
 8003378:	f000 f9fa 	bl	8003770 <CODEC_IO_Write>
 800337c:	4603      	mov	r3, r0
 800337e:	461a      	mov	r2, r3
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	4413      	add	r3, r2
 8003384:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8003386:	88fb      	ldrh	r3, [r7, #6]
 8003388:	b2db      	uxtb	r3, r3
 800338a:	2200      	movs	r2, #0
 800338c:	f240 6101 	movw	r1, #1537	@ 0x601
 8003390:	4618      	mov	r0, r3
 8003392:	f000 f9ed 	bl	8003770 <CODEC_IO_Write>
 8003396:	4603      	mov	r3, r0
 8003398:	461a      	mov	r2, r3
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	4413      	add	r3, r2
 800339e:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 80033a0:	88fb      	ldrh	r3, [r7, #6]
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	2200      	movs	r2, #0
 80033a6:	f240 6102 	movw	r1, #1538	@ 0x602
 80033aa:	4618      	mov	r0, r3
 80033ac:	f000 f9e0 	bl	8003770 <CODEC_IO_Write>
 80033b0:	4603      	mov	r3, r0
 80033b2:	461a      	mov	r2, r3
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	4413      	add	r3, r2
 80033b8:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 80033ba:	88fb      	ldrh	r3, [r7, #6]
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	2202      	movs	r2, #2
 80033c0:	f240 6104 	movw	r1, #1540	@ 0x604
 80033c4:	4618      	mov	r0, r3
 80033c6:	f000 f9d3 	bl	8003770 <CODEC_IO_Write>
 80033ca:	4603      	mov	r3, r0
 80033cc:	461a      	mov	r2, r3
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	4413      	add	r3, r2
 80033d2:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 80033d4:	88fb      	ldrh	r3, [r7, #6]
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	2202      	movs	r2, #2
 80033da:	f240 6105 	movw	r1, #1541	@ 0x605
 80033de:	4618      	mov	r0, r3
 80033e0:	f000 f9c6 	bl	8003770 <CODEC_IO_Write>
 80033e4:	4603      	mov	r3, r0
 80033e6:	461a      	mov	r2, r3
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	4413      	add	r3, r2
 80033ec:	60fb      	str	r3, [r7, #12]
    break;
 80033ee:	e0c5      	b.n	800357c <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 80033f0:	88fb      	ldrh	r3, [r7, #6]
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	f240 3203 	movw	r2, #771	@ 0x303
 80033f8:	2105      	movs	r1, #5
 80033fa:	4618      	mov	r0, r3
 80033fc:	f000 f9b8 	bl	8003770 <CODEC_IO_Write>
 8003400:	4603      	mov	r3, r0
 8003402:	461a      	mov	r2, r3
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	4413      	add	r3, r2
 8003408:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800340a:	88fb      	ldrh	r3, [r7, #6]
 800340c:	b2db      	uxtb	r3, r3
 800340e:	2201      	movs	r2, #1
 8003410:	f240 6101 	movw	r1, #1537	@ 0x601
 8003414:	4618      	mov	r0, r3
 8003416:	f000 f9ab 	bl	8003770 <CODEC_IO_Write>
 800341a:	4603      	mov	r3, r0
 800341c:	461a      	mov	r2, r3
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	4413      	add	r3, r2
 8003422:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8003424:	88fb      	ldrh	r3, [r7, #6]
 8003426:	b2db      	uxtb	r3, r3
 8003428:	2201      	movs	r2, #1
 800342a:	f240 6102 	movw	r1, #1538	@ 0x602
 800342e:	4618      	mov	r0, r3
 8003430:	f000 f99e 	bl	8003770 <CODEC_IO_Write>
 8003434:	4603      	mov	r3, r0
 8003436:	461a      	mov	r2, r3
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	4413      	add	r3, r2
 800343c:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 800343e:	88fb      	ldrh	r3, [r7, #6]
 8003440:	b2db      	uxtb	r3, r3
 8003442:	2200      	movs	r2, #0
 8003444:	f240 6104 	movw	r1, #1540	@ 0x604
 8003448:	4618      	mov	r0, r3
 800344a:	f000 f991 	bl	8003770 <CODEC_IO_Write>
 800344e:	4603      	mov	r3, r0
 8003450:	461a      	mov	r2, r3
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	4413      	add	r3, r2
 8003456:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8003458:	88fb      	ldrh	r3, [r7, #6]
 800345a:	b2db      	uxtb	r3, r3
 800345c:	2200      	movs	r2, #0
 800345e:	f240 6105 	movw	r1, #1541	@ 0x605
 8003462:	4618      	mov	r0, r3
 8003464:	f000 f984 	bl	8003770 <CODEC_IO_Write>
 8003468:	4603      	mov	r3, r0
 800346a:	461a      	mov	r2, r3
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	4413      	add	r3, r2
 8003470:	60fb      	str	r3, [r7, #12]
    break;
 8003472:	e083      	b.n	800357c <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_BOTH:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    also Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8003474:	88fb      	ldrh	r3, [r7, #6]
 8003476:	b2db      	uxtb	r3, r3
 8003478:	f640 720f 	movw	r2, #3855	@ 0xf0f
 800347c:	2105      	movs	r1, #5
 800347e:	4618      	mov	r0, r3
 8003480:	f000 f976 	bl	8003770 <CODEC_IO_Write>
 8003484:	4603      	mov	r3, r0
 8003486:	461a      	mov	r2, r3
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	4413      	add	r3, r2
 800348c:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800348e:	88fb      	ldrh	r3, [r7, #6]
 8003490:	b2db      	uxtb	r3, r3
 8003492:	2201      	movs	r2, #1
 8003494:	f240 6101 	movw	r1, #1537	@ 0x601
 8003498:	4618      	mov	r0, r3
 800349a:	f000 f969 	bl	8003770 <CODEC_IO_Write>
 800349e:	4603      	mov	r3, r0
 80034a0:	461a      	mov	r2, r3
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	4413      	add	r3, r2
 80034a6:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80034a8:	88fb      	ldrh	r3, [r7, #6]
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	2201      	movs	r2, #1
 80034ae:	f240 6102 	movw	r1, #1538	@ 0x602
 80034b2:	4618      	mov	r0, r3
 80034b4:	f000 f95c 	bl	8003770 <CODEC_IO_Write>
 80034b8:	4603      	mov	r3, r0
 80034ba:	461a      	mov	r2, r3
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	4413      	add	r3, r2
 80034c0:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 80034c2:	88fb      	ldrh	r3, [r7, #6]
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	2202      	movs	r2, #2
 80034c8:	f240 6104 	movw	r1, #1540	@ 0x604
 80034cc:	4618      	mov	r0, r3
 80034ce:	f000 f94f 	bl	8003770 <CODEC_IO_Write>
 80034d2:	4603      	mov	r3, r0
 80034d4:	461a      	mov	r2, r3
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	4413      	add	r3, r2
 80034da:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 80034dc:	88fb      	ldrh	r3, [r7, #6]
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	2202      	movs	r2, #2
 80034e2:	f240 6105 	movw	r1, #1541	@ 0x605
 80034e6:	4618      	mov	r0, r3
 80034e8:	f000 f942 	bl	8003770 <CODEC_IO_Write>
 80034ec:	4603      	mov	r3, r0
 80034ee:	461a      	mov	r2, r3
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	4413      	add	r3, r2
 80034f4:	60fb      	str	r3, [r7, #12]
    break;
 80034f6:	e041      	b.n	800357c <wm8994_SetOutputMode+0x23c>
    
  default:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 80034f8:	88fb      	ldrh	r3, [r7, #6]
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	f240 3203 	movw	r2, #771	@ 0x303
 8003500:	2105      	movs	r1, #5
 8003502:	4618      	mov	r0, r3
 8003504:	f000 f934 	bl	8003770 <CODEC_IO_Write>
 8003508:	4603      	mov	r3, r0
 800350a:	461a      	mov	r2, r3
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	4413      	add	r3, r2
 8003510:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8003512:	88fb      	ldrh	r3, [r7, #6]
 8003514:	b2db      	uxtb	r3, r3
 8003516:	2201      	movs	r2, #1
 8003518:	f240 6101 	movw	r1, #1537	@ 0x601
 800351c:	4618      	mov	r0, r3
 800351e:	f000 f927 	bl	8003770 <CODEC_IO_Write>
 8003522:	4603      	mov	r3, r0
 8003524:	461a      	mov	r2, r3
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	4413      	add	r3, r2
 800352a:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 800352c:	88fb      	ldrh	r3, [r7, #6]
 800352e:	b2db      	uxtb	r3, r3
 8003530:	2201      	movs	r2, #1
 8003532:	f240 6102 	movw	r1, #1538	@ 0x602
 8003536:	4618      	mov	r0, r3
 8003538:	f000 f91a 	bl	8003770 <CODEC_IO_Write>
 800353c:	4603      	mov	r3, r0
 800353e:	461a      	mov	r2, r3
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	4413      	add	r3, r2
 8003544:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8003546:	88fb      	ldrh	r3, [r7, #6]
 8003548:	b2db      	uxtb	r3, r3
 800354a:	2200      	movs	r2, #0
 800354c:	f240 6104 	movw	r1, #1540	@ 0x604
 8003550:	4618      	mov	r0, r3
 8003552:	f000 f90d 	bl	8003770 <CODEC_IO_Write>
 8003556:	4603      	mov	r3, r0
 8003558:	461a      	mov	r2, r3
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	4413      	add	r3, r2
 800355e:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8003560:	88fb      	ldrh	r3, [r7, #6]
 8003562:	b2db      	uxtb	r3, r3
 8003564:	2200      	movs	r2, #0
 8003566:	f240 6105 	movw	r1, #1541	@ 0x605
 800356a:	4618      	mov	r0, r3
 800356c:	f000 f900 	bl	8003770 <CODEC_IO_Write>
 8003570:	4603      	mov	r3, r0
 8003572:	461a      	mov	r2, r3
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	4413      	add	r3, r2
 8003578:	60fb      	str	r3, [r7, #12]
    break;    
 800357a:	bf00      	nop
  }  
  return counter;
 800357c:	68fb      	ldr	r3, [r7, #12]
}
 800357e:	4618      	mov	r0, r3
 8003580:	3710      	adds	r7, #16
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
	...

08003588 <wm8994_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	4603      	mov	r3, r0
 8003590:	6039      	str	r1, [r7, #0]
 8003592:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8003594:	2300      	movs	r3, #0
 8003596:	60fb      	str	r3, [r7, #12]
 
  /*  Clock Configurations */
  switch (AudioFreq)
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	4a64      	ldr	r2, [pc, #400]	@ (800372c <wm8994_SetFrequency+0x1a4>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d079      	beq.n	8003694 <wm8994_SetFrequency+0x10c>
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	4a62      	ldr	r2, [pc, #392]	@ (800372c <wm8994_SetFrequency+0x1a4>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	f200 80ad 	bhi.w	8003704 <wm8994_SetFrequency+0x17c>
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d061      	beq.n	8003678 <wm8994_SetFrequency+0xf0>
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 80035ba:	4293      	cmp	r3, r2
 80035bc:	f200 80a2 	bhi.w	8003704 <wm8994_SetFrequency+0x17c>
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	f64a 4244 	movw	r2, #44100	@ 0xac44
 80035c6:	4293      	cmp	r3, r2
 80035c8:	f000 808e 	beq.w	80036e8 <wm8994_SetFrequency+0x160>
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	f64a 4244 	movw	r2, #44100	@ 0xac44
 80035d2:	4293      	cmp	r3, r2
 80035d4:	f200 8096 	bhi.w	8003704 <wm8994_SetFrequency+0x17c>
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 80035de:	d03d      	beq.n	800365c <wm8994_SetFrequency+0xd4>
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 80035e6:	f200 808d 	bhi.w	8003704 <wm8994_SetFrequency+0x17c>
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	f245 6222 	movw	r2, #22050	@ 0x5622
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d06b      	beq.n	80036cc <wm8994_SetFrequency+0x144>
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	f245 6222 	movw	r2, #22050	@ 0x5622
 80035fa:	4293      	cmp	r3, r2
 80035fc:	f200 8082 	bhi.w	8003704 <wm8994_SetFrequency+0x17c>
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8003606:	d01b      	beq.n	8003640 <wm8994_SetFrequency+0xb8>
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 800360e:	d879      	bhi.n	8003704 <wm8994_SetFrequency+0x17c>
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 8003616:	d005      	beq.n	8003624 <wm8994_SetFrequency+0x9c>
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	f642 3211 	movw	r2, #11025	@ 0x2b11
 800361e:	4293      	cmp	r3, r2
 8003620:	d046      	beq.n	80036b0 <wm8994_SetFrequency+0x128>
 8003622:	e06f      	b.n	8003704 <wm8994_SetFrequency+0x17c>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8003624:	88fb      	ldrh	r3, [r7, #6]
 8003626:	b2db      	uxtb	r3, r3
 8003628:	2203      	movs	r2, #3
 800362a:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800362e:	4618      	mov	r0, r3
 8003630:	f000 f89e 	bl	8003770 <CODEC_IO_Write>
 8003634:	4603      	mov	r3, r0
 8003636:	461a      	mov	r2, r3
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	4413      	add	r3, r2
 800363c:	60fb      	str	r3, [r7, #12]
    break;
 800363e:	e06f      	b.n	8003720 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 8003640:	88fb      	ldrh	r3, [r7, #6]
 8003642:	b2db      	uxtb	r3, r3
 8003644:	2233      	movs	r2, #51	@ 0x33
 8003646:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800364a:	4618      	mov	r0, r3
 800364c:	f000 f890 	bl	8003770 <CODEC_IO_Write>
 8003650:	4603      	mov	r3, r0
 8003652:	461a      	mov	r2, r3
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	4413      	add	r3, r2
 8003658:	60fb      	str	r3, [r7, #12]
    break;
 800365a:	e061      	b.n	8003720 <wm8994_SetFrequency+0x198>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 800365c:	88fb      	ldrh	r3, [r7, #6]
 800365e:	b2db      	uxtb	r3, r3
 8003660:	2263      	movs	r2, #99	@ 0x63
 8003662:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003666:	4618      	mov	r0, r3
 8003668:	f000 f882 	bl	8003770 <CODEC_IO_Write>
 800366c:	4603      	mov	r3, r0
 800366e:	461a      	mov	r2, r3
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	4413      	add	r3, r2
 8003674:	60fb      	str	r3, [r7, #12]
    break;
 8003676:	e053      	b.n	8003720 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8003678:	88fb      	ldrh	r3, [r7, #6]
 800367a:	b2db      	uxtb	r3, r3
 800367c:	2283      	movs	r2, #131	@ 0x83
 800367e:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003682:	4618      	mov	r0, r3
 8003684:	f000 f874 	bl	8003770 <CODEC_IO_Write>
 8003688:	4603      	mov	r3, r0
 800368a:	461a      	mov	r2, r3
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	4413      	add	r3, r2
 8003690:	60fb      	str	r3, [r7, #12]
    break;
 8003692:	e045      	b.n	8003720 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 8003694:	88fb      	ldrh	r3, [r7, #6]
 8003696:	b2db      	uxtb	r3, r3
 8003698:	22a3      	movs	r2, #163	@ 0xa3
 800369a:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800369e:	4618      	mov	r0, r3
 80036a0:	f000 f866 	bl	8003770 <CODEC_IO_Write>
 80036a4:	4603      	mov	r3, r0
 80036a6:	461a      	mov	r2, r3
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	4413      	add	r3, r2
 80036ac:	60fb      	str	r3, [r7, #12]
    break;
 80036ae:	e037      	b.n	8003720 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 80036b0:	88fb      	ldrh	r3, [r7, #6]
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	2213      	movs	r2, #19
 80036b6:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80036ba:	4618      	mov	r0, r3
 80036bc:	f000 f858 	bl	8003770 <CODEC_IO_Write>
 80036c0:	4603      	mov	r3, r0
 80036c2:	461a      	mov	r2, r3
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	4413      	add	r3, r2
 80036c8:	60fb      	str	r3, [r7, #12]
    break;
 80036ca:	e029      	b.n	8003720 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 80036cc:	88fb      	ldrh	r3, [r7, #6]
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	2243      	movs	r2, #67	@ 0x43
 80036d2:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80036d6:	4618      	mov	r0, r3
 80036d8:	f000 f84a 	bl	8003770 <CODEC_IO_Write>
 80036dc:	4603      	mov	r3, r0
 80036de:	461a      	mov	r2, r3
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	4413      	add	r3, r2
 80036e4:	60fb      	str	r3, [r7, #12]
    break;
 80036e6:	e01b      	b.n	8003720 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 80036e8:	88fb      	ldrh	r3, [r7, #6]
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	2273      	movs	r2, #115	@ 0x73
 80036ee:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80036f2:	4618      	mov	r0, r3
 80036f4:	f000 f83c 	bl	8003770 <CODEC_IO_Write>
 80036f8:	4603      	mov	r3, r0
 80036fa:	461a      	mov	r2, r3
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	4413      	add	r3, r2
 8003700:	60fb      	str	r3, [r7, #12]
    break; 
 8003702:	e00d      	b.n	8003720 <wm8994_SetFrequency+0x198>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8003704:	88fb      	ldrh	r3, [r7, #6]
 8003706:	b2db      	uxtb	r3, r3
 8003708:	2283      	movs	r2, #131	@ 0x83
 800370a:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800370e:	4618      	mov	r0, r3
 8003710:	f000 f82e 	bl	8003770 <CODEC_IO_Write>
 8003714:	4603      	mov	r3, r0
 8003716:	461a      	mov	r2, r3
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	4413      	add	r3, r2
 800371c:	60fb      	str	r3, [r7, #12]
    break; 
 800371e:	bf00      	nop
  }
  return counter;
 8003720:	68fb      	ldr	r3, [r7, #12]
}
 8003722:	4618      	mov	r0, r3
 8003724:	3710      	adds	r7, #16
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	00017700 	.word	0x00017700

08003730 <wm8994_Reset>:
  * @brief Resets wm8994 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Reset(uint16_t DeviceAddr)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	4603      	mov	r3, r0
 8003738:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800373a:	2300      	movs	r3, #0
 800373c:	60fb      	str	r3, [r7, #12]
  
  /* Reset Codec by writing in 0x0000 address register */
  counter = CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 800373e:	88fb      	ldrh	r3, [r7, #6]
 8003740:	b2db      	uxtb	r3, r3
 8003742:	2200      	movs	r2, #0
 8003744:	2100      	movs	r1, #0
 8003746:	4618      	mov	r0, r3
 8003748:	f000 f812 	bl	8003770 <CODEC_IO_Write>
 800374c:	4603      	mov	r3, r0
 800374e:	60fb      	str	r3, [r7, #12]
  outputEnabled = 0;
 8003750:	4b05      	ldr	r3, [pc, #20]	@ (8003768 <wm8994_Reset+0x38>)
 8003752:	2200      	movs	r2, #0
 8003754:	601a      	str	r2, [r3, #0]
  inputEnabled=0;
 8003756:	4b05      	ldr	r3, [pc, #20]	@ (800376c <wm8994_Reset+0x3c>)
 8003758:	2200      	movs	r2, #0
 800375a:	601a      	str	r2, [r3, #0]

  return counter;
 800375c:	68fb      	ldr	r3, [r7, #12]
}
 800375e:	4618      	mov	r0, r3
 8003760:	3710      	adds	r7, #16
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	20000cac 	.word	0x20000cac
 800376c:	20000cb0 	.word	0x20000cb0

08003770 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	4603      	mov	r3, r0
 8003778:	71fb      	strb	r3, [r7, #7]
 800377a:	460b      	mov	r3, r1
 800377c:	80bb      	strh	r3, [r7, #4]
 800377e:	4613      	mov	r3, r2
 8003780:	807b      	strh	r3, [r7, #2]
  uint32_t result = 0;
 8003782:	2300      	movs	r3, #0
 8003784:	60fb      	str	r3, [r7, #12]
  
 AUDIO_IO_Write(Addr, Reg, Value);
 8003786:	887a      	ldrh	r2, [r7, #2]
 8003788:	88b9      	ldrh	r1, [r7, #4]
 800378a:	79fb      	ldrb	r3, [r7, #7]
 800378c:	4618      	mov	r0, r3
 800378e:	f000 f96f 	bl	8003a70 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	b2db      	uxtb	r3, r3
}
 8003796:	4618      	mov	r0, r3
 8003798:	3710      	adds	r7, #16
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
	...

080037a0 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b08c      	sub	sp, #48	@ 0x30
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	4a51      	ldr	r2, [pc, #324]	@ (80038f0 <I2Cx_MspInit+0x150>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d14d      	bne.n	800384c <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80037b0:	4b50      	ldr	r3, [pc, #320]	@ (80038f4 <I2Cx_MspInit+0x154>)
 80037b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037b4:	4a4f      	ldr	r2, [pc, #316]	@ (80038f4 <I2Cx_MspInit+0x154>)
 80037b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80037ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80037bc:	4b4d      	ldr	r3, [pc, #308]	@ (80038f4 <I2Cx_MspInit+0x154>)
 80037be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037c4:	61bb      	str	r3, [r7, #24]
 80037c6:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 80037c8:	2380      	movs	r3, #128	@ 0x80
 80037ca:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80037cc:	2312      	movs	r3, #18
 80037ce:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80037d0:	2300      	movs	r3, #0
 80037d2:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80037d4:	2302      	movs	r3, #2
 80037d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 80037d8:	2304      	movs	r3, #4
 80037da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80037dc:	f107 031c 	add.w	r3, r7, #28
 80037e0:	4619      	mov	r1, r3
 80037e2:	4845      	ldr	r0, [pc, #276]	@ (80038f8 <I2Cx_MspInit+0x158>)
 80037e4:	f001 fb48 	bl	8004e78 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 80037e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80037ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80037ee:	f107 031c 	add.w	r3, r7, #28
 80037f2:	4619      	mov	r1, r3
 80037f4:	4840      	ldr	r0, [pc, #256]	@ (80038f8 <I2Cx_MspInit+0x158>)
 80037f6:	f001 fb3f 	bl	8004e78 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 80037fa:	4b3e      	ldr	r3, [pc, #248]	@ (80038f4 <I2Cx_MspInit+0x154>)
 80037fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037fe:	4a3d      	ldr	r2, [pc, #244]	@ (80038f4 <I2Cx_MspInit+0x154>)
 8003800:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003804:	6413      	str	r3, [r2, #64]	@ 0x40
 8003806:	4b3b      	ldr	r3, [pc, #236]	@ (80038f4 <I2Cx_MspInit+0x154>)
 8003808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800380a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800380e:	617b      	str	r3, [r7, #20]
 8003810:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8003812:	4b38      	ldr	r3, [pc, #224]	@ (80038f4 <I2Cx_MspInit+0x154>)
 8003814:	6a1b      	ldr	r3, [r3, #32]
 8003816:	4a37      	ldr	r2, [pc, #220]	@ (80038f4 <I2Cx_MspInit+0x154>)
 8003818:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800381c:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 800381e:	4b35      	ldr	r3, [pc, #212]	@ (80038f4 <I2Cx_MspInit+0x154>)
 8003820:	6a1b      	ldr	r3, [r3, #32]
 8003822:	4a34      	ldr	r2, [pc, #208]	@ (80038f4 <I2Cx_MspInit+0x154>)
 8003824:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003828:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 800382a:	2200      	movs	r2, #0
 800382c:	210f      	movs	r1, #15
 800382e:	2048      	movs	r0, #72	@ 0x48
 8003830:	f000 fe77 	bl	8004522 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8003834:	2048      	movs	r0, #72	@ 0x48
 8003836:	f000 fe90 	bl	800455a <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 800383a:	2200      	movs	r2, #0
 800383c:	210f      	movs	r1, #15
 800383e:	2049      	movs	r0, #73	@ 0x49
 8003840:	f000 fe6f 	bl	8004522 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8003844:	2049      	movs	r0, #73	@ 0x49
 8003846:	f000 fe88 	bl	800455a <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 800384a:	e04d      	b.n	80038e8 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800384c:	4b29      	ldr	r3, [pc, #164]	@ (80038f4 <I2Cx_MspInit+0x154>)
 800384e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003850:	4a28      	ldr	r2, [pc, #160]	@ (80038f4 <I2Cx_MspInit+0x154>)
 8003852:	f043 0302 	orr.w	r3, r3, #2
 8003856:	6313      	str	r3, [r2, #48]	@ 0x30
 8003858:	4b26      	ldr	r3, [pc, #152]	@ (80038f4 <I2Cx_MspInit+0x154>)
 800385a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800385c:	f003 0302 	and.w	r3, r3, #2
 8003860:	613b      	str	r3, [r7, #16]
 8003862:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8003864:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003868:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800386a:	2312      	movs	r3, #18
 800386c:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800386e:	2300      	movs	r3, #0
 8003870:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8003872:	2302      	movs	r3, #2
 8003874:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8003876:	2304      	movs	r3, #4
 8003878:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800387a:	f107 031c 	add.w	r3, r7, #28
 800387e:	4619      	mov	r1, r3
 8003880:	481e      	ldr	r0, [pc, #120]	@ (80038fc <I2Cx_MspInit+0x15c>)
 8003882:	f001 faf9 	bl	8004e78 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8003886:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800388a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800388c:	f107 031c 	add.w	r3, r7, #28
 8003890:	4619      	mov	r1, r3
 8003892:	481a      	ldr	r0, [pc, #104]	@ (80038fc <I2Cx_MspInit+0x15c>)
 8003894:	f001 faf0 	bl	8004e78 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8003898:	4b16      	ldr	r3, [pc, #88]	@ (80038f4 <I2Cx_MspInit+0x154>)
 800389a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800389c:	4a15      	ldr	r2, [pc, #84]	@ (80038f4 <I2Cx_MspInit+0x154>)
 800389e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80038a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80038a4:	4b13      	ldr	r3, [pc, #76]	@ (80038f4 <I2Cx_MspInit+0x154>)
 80038a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038ac:	60fb      	str	r3, [r7, #12]
 80038ae:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 80038b0:	4b10      	ldr	r3, [pc, #64]	@ (80038f4 <I2Cx_MspInit+0x154>)
 80038b2:	6a1b      	ldr	r3, [r3, #32]
 80038b4:	4a0f      	ldr	r2, [pc, #60]	@ (80038f4 <I2Cx_MspInit+0x154>)
 80038b6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80038ba:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 80038bc:	4b0d      	ldr	r3, [pc, #52]	@ (80038f4 <I2Cx_MspInit+0x154>)
 80038be:	6a1b      	ldr	r3, [r3, #32]
 80038c0:	4a0c      	ldr	r2, [pc, #48]	@ (80038f4 <I2Cx_MspInit+0x154>)
 80038c2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80038c6:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 80038c8:	2200      	movs	r2, #0
 80038ca:	210f      	movs	r1, #15
 80038cc:	201f      	movs	r0, #31
 80038ce:	f000 fe28 	bl	8004522 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 80038d2:	201f      	movs	r0, #31
 80038d4:	f000 fe41 	bl	800455a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 80038d8:	2200      	movs	r2, #0
 80038da:	210f      	movs	r1, #15
 80038dc:	2020      	movs	r0, #32
 80038de:	f000 fe20 	bl	8004522 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 80038e2:	2020      	movs	r0, #32
 80038e4:	f000 fe39 	bl	800455a <HAL_NVIC_EnableIRQ>
}
 80038e8:	bf00      	nop
 80038ea:	3730      	adds	r7, #48	@ 0x30
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	20000cb4 	.word	0x20000cb4
 80038f4:	40023800 	.word	0x40023800
 80038f8:	40021c00 	.word	0x40021c00
 80038fc:	40020400 	.word	0x40020400

08003900 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f002 f8df 	bl	8005acc <HAL_I2C_GetState>
 800390e:	4603      	mov	r3, r0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d125      	bne.n	8003960 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4a14      	ldr	r2, [pc, #80]	@ (8003968 <I2Cx_Init+0x68>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d103      	bne.n	8003924 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	4a13      	ldr	r2, [pc, #76]	@ (800396c <I2Cx_Init+0x6c>)
 8003920:	601a      	str	r2, [r3, #0]
 8003922:	e002      	b.n	800392a <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	4a12      	ldr	r2, [pc, #72]	@ (8003970 <I2Cx_Init+0x70>)
 8003928:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a11      	ldr	r2, [pc, #68]	@ (8003974 <I2Cx_Init+0x74>)
 800392e:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2201      	movs	r2, #1
 800393a:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f7ff ff23 	bl	80037a0 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f001 fda8 	bl	80054b0 <HAL_I2C_Init>
  }
}
 8003960:	bf00      	nop
 8003962:	3708      	adds	r7, #8
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}
 8003968:	20000cb4 	.word	0x20000cb4
 800396c:	40005c00 	.word	0x40005c00
 8003970:	40005400 	.word	0x40005400
 8003974:	40912732 	.word	0x40912732

08003978 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b08a      	sub	sp, #40	@ 0x28
 800397c:	af04      	add	r7, sp, #16
 800397e:	60f8      	str	r0, [r7, #12]
 8003980:	4608      	mov	r0, r1
 8003982:	4611      	mov	r1, r2
 8003984:	461a      	mov	r2, r3
 8003986:	4603      	mov	r3, r0
 8003988:	72fb      	strb	r3, [r7, #11]
 800398a:	460b      	mov	r3, r1
 800398c:	813b      	strh	r3, [r7, #8]
 800398e:	4613      	mov	r3, r2
 8003990:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003992:	2300      	movs	r3, #0
 8003994:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003996:	7afb      	ldrb	r3, [r7, #11]
 8003998:	b299      	uxth	r1, r3
 800399a:	88f8      	ldrh	r0, [r7, #6]
 800399c:	893a      	ldrh	r2, [r7, #8]
 800399e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80039a2:	9302      	str	r3, [sp, #8]
 80039a4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80039a6:	9301      	str	r3, [sp, #4]
 80039a8:	6a3b      	ldr	r3, [r7, #32]
 80039aa:	9300      	str	r3, [sp, #0]
 80039ac:	4603      	mov	r3, r0
 80039ae:	68f8      	ldr	r0, [r7, #12]
 80039b0:	f001 ff72 	bl	8005898 <HAL_I2C_Mem_Read>
 80039b4:	4603      	mov	r3, r0
 80039b6:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80039b8:	7dfb      	ldrb	r3, [r7, #23]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d004      	beq.n	80039c8 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 80039be:	7afb      	ldrb	r3, [r7, #11]
 80039c0:	4619      	mov	r1, r3
 80039c2:	68f8      	ldr	r0, [r7, #12]
 80039c4:	f000 f832 	bl	8003a2c <I2Cx_Error>
  }
  return status;    
 80039c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3718      	adds	r7, #24
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}

080039d2 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 80039d2:	b580      	push	{r7, lr}
 80039d4:	b08a      	sub	sp, #40	@ 0x28
 80039d6:	af04      	add	r7, sp, #16
 80039d8:	60f8      	str	r0, [r7, #12]
 80039da:	4608      	mov	r0, r1
 80039dc:	4611      	mov	r1, r2
 80039de:	461a      	mov	r2, r3
 80039e0:	4603      	mov	r3, r0
 80039e2:	72fb      	strb	r3, [r7, #11]
 80039e4:	460b      	mov	r3, r1
 80039e6:	813b      	strh	r3, [r7, #8]
 80039e8:	4613      	mov	r3, r2
 80039ea:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80039ec:	2300      	movs	r3, #0
 80039ee:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80039f0:	7afb      	ldrb	r3, [r7, #11]
 80039f2:	b299      	uxth	r1, r3
 80039f4:	88f8      	ldrh	r0, [r7, #6]
 80039f6:	893a      	ldrh	r2, [r7, #8]
 80039f8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80039fc:	9302      	str	r3, [sp, #8]
 80039fe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003a00:	9301      	str	r3, [sp, #4]
 8003a02:	6a3b      	ldr	r3, [r7, #32]
 8003a04:	9300      	str	r3, [sp, #0]
 8003a06:	4603      	mov	r3, r0
 8003a08:	68f8      	ldr	r0, [r7, #12]
 8003a0a:	f001 fe31 	bl	8005670 <HAL_I2C_Mem_Write>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8003a12:	7dfb      	ldrb	r3, [r7, #23]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d004      	beq.n	8003a22 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8003a18:	7afb      	ldrb	r3, [r7, #11]
 8003a1a:	4619      	mov	r1, r3
 8003a1c:	68f8      	ldr	r0, [r7, #12]
 8003a1e:	f000 f805 	bl	8003a2c <I2Cx_Error>
  }
  return status;
 8003a22:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3718      	adds	r7, #24
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	460b      	mov	r3, r1
 8003a36:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f001 fdd5 	bl	80055e8 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f7ff ff5e 	bl	8003900 <I2Cx_Init>
}
 8003a44:	bf00      	nop
 8003a46:	3708      	adds	r7, #8
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}

08003a4c <AUDIO_IO_Init>:
/**
  * @brief  Initializes Audio low level.
  * @retval None
  */
void AUDIO_IO_Init(void) 
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8003a50:	4802      	ldr	r0, [pc, #8]	@ (8003a5c <AUDIO_IO_Init+0x10>)
 8003a52:	f7ff ff55 	bl	8003900 <I2Cx_Init>
}
 8003a56:	bf00      	nop
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	20000cb4 	.word	0x20000cb4

08003a60 <AUDIO_IO_DeInit>:
/**
  * @brief  Deinitializes Audio low level.
  * @retval None
  */
void AUDIO_IO_DeInit(void)
{
 8003a60:	b480      	push	{r7}
 8003a62:	af00      	add	r7, sp, #0
}
 8003a64:	bf00      	nop
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr
	...

08003a70 <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b086      	sub	sp, #24
 8003a74:	af02      	add	r7, sp, #8
 8003a76:	4603      	mov	r3, r0
 8003a78:	71fb      	strb	r3, [r7, #7]
 8003a7a:	460b      	mov	r3, r1
 8003a7c:	80bb      	strh	r3, [r7, #4]
 8003a7e:	4613      	mov	r3, r2
 8003a80:	807b      	strh	r3, [r7, #2]
  uint16_t tmp = Value;
 8003a82:	887b      	ldrh	r3, [r7, #2]
 8003a84:	81fb      	strh	r3, [r7, #14]
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
 8003a86:	89fb      	ldrh	r3, [r7, #14]
 8003a88:	0a1b      	lsrs	r3, r3, #8
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	807b      	strh	r3, [r7, #2]
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 8003a8e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003a92:	021b      	lsls	r3, r3, #8
 8003a94:	b21a      	sxth	r2, r3
 8003a96:	887b      	ldrh	r3, [r7, #2]
 8003a98:	b21b      	sxth	r3, r3
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	b21b      	sxth	r3, r3
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	807b      	strh	r3, [r7, #2]
  
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 8003aa2:	88ba      	ldrh	r2, [r7, #4]
 8003aa4:	79f9      	ldrb	r1, [r7, #7]
 8003aa6:	2302      	movs	r3, #2
 8003aa8:	9301      	str	r3, [sp, #4]
 8003aaa:	1cbb      	adds	r3, r7, #2
 8003aac:	9300      	str	r3, [sp, #0]
 8003aae:	2302      	movs	r3, #2
 8003ab0:	4803      	ldr	r0, [pc, #12]	@ (8003ac0 <AUDIO_IO_Write+0x50>)
 8003ab2:	f7ff ff8e 	bl	80039d2 <I2Cx_WriteMultiple>
}
 8003ab6:	bf00      	nop
 8003ab8:	3710      	adds	r7, #16
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	20000cb4 	.word	0x20000cb4

08003ac4 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint16_t AUDIO_IO_Read(uint8_t Addr, uint16_t Reg)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b086      	sub	sp, #24
 8003ac8:	af02      	add	r7, sp, #8
 8003aca:	4603      	mov	r3, r0
 8003acc:	460a      	mov	r2, r1
 8003ace:	71fb      	strb	r3, [r7, #7]
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	80bb      	strh	r3, [r7, #4]
  uint16_t read_value = 0, tmp = 0;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	81bb      	strh	r3, [r7, #12]
 8003ad8:	2300      	movs	r3, #0
 8003ada:	81fb      	strh	r3, [r7, #14]
  
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 8003adc:	88ba      	ldrh	r2, [r7, #4]
 8003ade:	79f9      	ldrb	r1, [r7, #7]
 8003ae0:	2302      	movs	r3, #2
 8003ae2:	9301      	str	r3, [sp, #4]
 8003ae4:	f107 030c 	add.w	r3, r7, #12
 8003ae8:	9300      	str	r3, [sp, #0]
 8003aea:	2302      	movs	r3, #2
 8003aec:	480a      	ldr	r0, [pc, #40]	@ (8003b18 <AUDIO_IO_Read+0x54>)
 8003aee:	f7ff ff43 	bl	8003978 <I2Cx_ReadMultiple>
  
  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
 8003af2:	89bb      	ldrh	r3, [r7, #12]
 8003af4:	0a1b      	lsrs	r3, r3, #8
 8003af6:	81fb      	strh	r3, [r7, #14]
  
  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 8003af8:	89bb      	ldrh	r3, [r7, #12]
 8003afa:	b21b      	sxth	r3, r3
 8003afc:	021b      	lsls	r3, r3, #8
 8003afe:	b21a      	sxth	r2, r3
 8003b00:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	b21b      	sxth	r3, r3
 8003b08:	81fb      	strh	r3, [r7, #14]
  
  read_value = tmp;
 8003b0a:	89fb      	ldrh	r3, [r7, #14]
 8003b0c:	81bb      	strh	r3, [r7, #12]
  
  return read_value;
 8003b0e:	89bb      	ldrh	r3, [r7, #12]
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3710      	adds	r7, #16
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	20000cb4 	.word	0x20000cb4

08003b1c <AUDIO_IO_Delay>:
  * @brief  AUDIO Codec delay 
  * @param  Delay: Delay in ms
  * @retval None
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b082      	sub	sp, #8
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f000 fbfd 	bl	8004324 <HAL_Delay>
}
 8003b2a:	bf00      	nop
 8003b2c:	3708      	adds	r7, #8
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
	...

08003b34 <HAL_SAI_ErrorCallback>:
  * @brief  SAI error callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  HAL_SAI_StateTypeDef audio_out_state;
  HAL_SAI_StateTypeDef audio_in_state;

  audio_out_state = HAL_SAI_GetState(&haudio_out_sai);
 8003b3c:	480e      	ldr	r0, [pc, #56]	@ (8003b78 <HAL_SAI_ErrorCallback+0x44>)
 8003b3e:	f004 f85f 	bl	8007c00 <HAL_SAI_GetState>
 8003b42:	4603      	mov	r3, r0
 8003b44:	73fb      	strb	r3, [r7, #15]
  audio_in_state = HAL_SAI_GetState(&haudio_in_sai);
 8003b46:	480d      	ldr	r0, [pc, #52]	@ (8003b7c <HAL_SAI_ErrorCallback+0x48>)
 8003b48:	f004 f85a 	bl	8007c00 <HAL_SAI_GetState>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	73bb      	strb	r3, [r7, #14]

  /* Determines if it is an audio out or audio in error */
  if ((audio_out_state == HAL_SAI_STATE_BUSY) || (audio_out_state == HAL_SAI_STATE_BUSY_TX))
 8003b50:	7bfb      	ldrb	r3, [r7, #15]
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d002      	beq.n	8003b5c <HAL_SAI_ErrorCallback+0x28>
 8003b56:	7bfb      	ldrb	r3, [r7, #15]
 8003b58:	2b12      	cmp	r3, #18
 8003b5a:	d101      	bne.n	8003b60 <HAL_SAI_ErrorCallback+0x2c>
  {
    BSP_AUDIO_OUT_Error_CallBack();
 8003b5c:	f000 f810 	bl	8003b80 <BSP_AUDIO_OUT_Error_CallBack>
  }

  if ((audio_in_state == HAL_SAI_STATE_BUSY) || (audio_in_state == HAL_SAI_STATE_BUSY_RX))
 8003b60:	7bbb      	ldrb	r3, [r7, #14]
 8003b62:	2b02      	cmp	r3, #2
 8003b64:	d002      	beq.n	8003b6c <HAL_SAI_ErrorCallback+0x38>
 8003b66:	7bbb      	ldrb	r3, [r7, #14]
 8003b68:	2b22      	cmp	r3, #34	@ 0x22
 8003b6a:	d101      	bne.n	8003b70 <HAL_SAI_ErrorCallback+0x3c>
  {
    BSP_AUDIO_IN_Error_CallBack();
 8003b6c:	f000 f9f6 	bl	8003f5c <BSP_AUDIO_IN_Error_CallBack>
  }
}
 8003b70:	bf00      	nop
 8003b72:	3710      	adds	r7, #16
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	20000d0c 	.word	0x20000d0c
 8003b7c:	20000d90 	.word	0x20000d90

08003b80 <BSP_AUDIO_OUT_Error_CallBack>:
/**
  * @brief  Manages the DMA FIFO error event.
  * @retval None
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(void)
{
 8003b80:	b480      	push	{r7}
 8003b82:	af00      	add	r7, sp, #0
}
 8003b84:	bf00      	nop
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr
	...

08003b90 <BSP_AUDIO_OUT_MspInit>:
  * @param  hsai: SAI handle
  * @param  Params
  * @retval None
  */
__weak void BSP_AUDIO_OUT_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{ 
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b08c      	sub	sp, #48	@ 0x30
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_sai_tx;
  GPIO_InitTypeDef  gpio_init_structure;  

  /* Enable SAI clock */
  AUDIO_OUT_SAIx_CLK_ENABLE();
 8003b9a:	4b63      	ldr	r3, [pc, #396]	@ (8003d28 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b9e:	4a62      	ldr	r2, [pc, #392]	@ (8003d28 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003ba0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003ba4:	6453      	str	r3, [r2, #68]	@ 0x44
 8003ba6:	4b60      	ldr	r3, [pc, #384]	@ (8003d28 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003baa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003bae:	61bb      	str	r3, [r7, #24]
 8003bb0:	69bb      	ldr	r3, [r7, #24]
  
  /* Enable GPIO clock */
  AUDIO_OUT_SAIx_MCLK_ENABLE();
 8003bb2:	4b5d      	ldr	r3, [pc, #372]	@ (8003d28 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bb6:	4a5c      	ldr	r2, [pc, #368]	@ (8003d28 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003bb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003bbe:	4b5a      	ldr	r3, [pc, #360]	@ (8003d28 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bc6:	617b      	str	r3, [r7, #20]
 8003bc8:	697b      	ldr	r3, [r7, #20]
  AUDIO_OUT_SAIx_SCK_SD_ENABLE();
 8003bca:	4b57      	ldr	r3, [pc, #348]	@ (8003d28 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bce:	4a56      	ldr	r2, [pc, #344]	@ (8003d28 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003bd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003bd6:	4b54      	ldr	r3, [pc, #336]	@ (8003d28 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bde:	613b      	str	r3, [r7, #16]
 8003be0:	693b      	ldr	r3, [r7, #16]
  AUDIO_OUT_SAIx_FS_ENABLE();
 8003be2:	4b51      	ldr	r3, [pc, #324]	@ (8003d28 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003be6:	4a50      	ldr	r2, [pc, #320]	@ (8003d28 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003be8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bec:	6313      	str	r3, [r2, #48]	@ 0x30
 8003bee:	4b4e      	ldr	r3, [pc, #312]	@ (8003d28 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bf6:	60fb      	str	r3, [r7, #12]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
  /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN;
 8003bfa:	2380      	movs	r3, #128	@ 0x80
 8003bfc:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8003bfe:	2302      	movs	r3, #2
 8003c00:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8003c02:	2300      	movs	r3, #0
 8003c04:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8003c06:	2303      	movs	r3, #3
 8003c08:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8003c0a:	230a      	movs	r3, #10
 8003c0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
 8003c0e:	f107 031c 	add.w	r3, r7, #28
 8003c12:	4619      	mov	r1, r3
 8003c14:	4845      	ldr	r0, [pc, #276]	@ (8003d2c <BSP_AUDIO_OUT_MspInit+0x19c>)
 8003c16:	f001 f92f 	bl	8004e78 <HAL_GPIO_Init>

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_SCK_PIN;
 8003c1a:	2320      	movs	r3, #32
 8003c1c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8003c1e:	2302      	movs	r3, #2
 8003c20:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8003c22:	2300      	movs	r3, #0
 8003c24:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8003c26:	2303      	movs	r3, #3
 8003c28:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SCK_AF;
 8003c2a:	230a      	movs	r3, #10
 8003c2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 8003c2e:	f107 031c 	add.w	r3, r7, #28
 8003c32:	4619      	mov	r1, r3
 8003c34:	483d      	ldr	r0, [pc, #244]	@ (8003d2c <BSP_AUDIO_OUT_MspInit+0x19c>)
 8003c36:	f001 f91f 	bl	8004e78 <HAL_GPIO_Init>

  gpio_init_structure.Pin =  AUDIO_OUT_SAIx_SD_PIN;
 8003c3a:	2340      	movs	r3, #64	@ 0x40
 8003c3c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8003c3e:	2302      	movs	r3, #2
 8003c40:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8003c42:	2300      	movs	r3, #0
 8003c44:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8003c46:	2303      	movs	r3, #3
 8003c48:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8003c4a:	230a      	movs	r3, #10
 8003c4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 8003c4e:	f107 031c 	add.w	r3, r7, #28
 8003c52:	4619      	mov	r1, r3
 8003c54:	4835      	ldr	r0, [pc, #212]	@ (8003d2c <BSP_AUDIO_OUT_MspInit+0x19c>)
 8003c56:	f001 f90f 	bl	8004e78 <HAL_GPIO_Init>

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 8003c5a:	2310      	movs	r3, #16
 8003c5c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8003c5e:	2302      	movs	r3, #2
 8003c60:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8003c62:	2300      	movs	r3, #0
 8003c64:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8003c66:	2303      	movs	r3, #3
 8003c68:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8003c6a:	230a      	movs	r3, #10
 8003c6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 8003c6e:	f107 031c 	add.w	r3, r7, #28
 8003c72:	4619      	mov	r1, r3
 8003c74:	482d      	ldr	r0, [pc, #180]	@ (8003d2c <BSP_AUDIO_OUT_MspInit+0x19c>)
 8003c76:	f001 f8ff 	bl	8004e78 <HAL_GPIO_Init>

  /* Enable the DMA clock */
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 8003c7a:	4b2b      	ldr	r3, [pc, #172]	@ (8003d28 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c7e:	4a2a      	ldr	r2, [pc, #168]	@ (8003d28 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003c80:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003c84:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c86:	4b28      	ldr	r3, [pc, #160]	@ (8003d28 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c8e:	60bb      	str	r3, [r7, #8]
 8003c90:	68bb      	ldr	r3, [r7, #8]
    
  if(hsai->Instance == AUDIO_OUT_SAIx)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a26      	ldr	r2, [pc, #152]	@ (8003d30 <BSP_AUDIO_OUT_MspInit+0x1a0>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d138      	bne.n	8003d0e <BSP_AUDIO_OUT_MspInit+0x17e>
  {
    /* Configure the hdma_saiTx handle parameters */   
    hdma_sai_tx.Init.Channel             = AUDIO_OUT_SAIx_DMAx_CHANNEL;
 8003c9c:	4b25      	ldr	r3, [pc, #148]	@ (8003d34 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003c9e:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8003ca2:	605a      	str	r2, [r3, #4]
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8003ca4:	4b23      	ldr	r3, [pc, #140]	@ (8003d34 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003ca6:	2240      	movs	r2, #64	@ 0x40
 8003ca8:	609a      	str	r2, [r3, #8]
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8003caa:	4b22      	ldr	r3, [pc, #136]	@ (8003d34 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003cac:	2200      	movs	r2, #0
 8003cae:	60da      	str	r2, [r3, #12]
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8003cb0:	4b20      	ldr	r3, [pc, #128]	@ (8003d34 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003cb2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003cb6:	611a      	str	r2, [r3, #16]
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
 8003cb8:	4b1e      	ldr	r3, [pc, #120]	@ (8003d34 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003cba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003cbe:	615a      	str	r2, [r3, #20]
    hdma_sai_tx.Init.MemDataAlignment    = AUDIO_OUT_SAIx_DMAx_MEM_DATA_SIZE;
 8003cc0:	4b1c      	ldr	r3, [pc, #112]	@ (8003d34 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003cc2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003cc6:	619a      	str	r2, [r3, #24]
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
 8003cc8:	4b1a      	ldr	r3, [pc, #104]	@ (8003d34 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003cca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003cce:	61da      	str	r2, [r3, #28]
    hdma_sai_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 8003cd0:	4b18      	ldr	r3, [pc, #96]	@ (8003d34 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003cd2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003cd6:	621a      	str	r2, [r3, #32]
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 8003cd8:	4b16      	ldr	r3, [pc, #88]	@ (8003d34 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003cda:	2204      	movs	r2, #4
 8003cdc:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sai_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003cde:	4b15      	ldr	r3, [pc, #84]	@ (8003d34 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003ce0:	2203      	movs	r2, #3
 8003ce2:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sai_tx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003ce4:	4b13      	ldr	r3, [pc, #76]	@ (8003d34 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8003cea:	4b12      	ldr	r3, [pc, #72]	@ (8003d34 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003cec:	2200      	movs	r2, #0
 8003cee:	631a      	str	r2, [r3, #48]	@ 0x30
    
    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 8003cf0:	4b10      	ldr	r3, [pc, #64]	@ (8003d34 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003cf2:	4a11      	ldr	r2, [pc, #68]	@ (8003d38 <BSP_AUDIO_OUT_MspInit+0x1a8>)
 8003cf4:	601a      	str	r2, [r3, #0]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4a0e      	ldr	r2, [pc, #56]	@ (8003d34 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003cfa:	66da      	str	r2, [r3, #108]	@ 0x6c
 8003cfc:	4a0d      	ldr	r2, [pc, #52]	@ (8003d34 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6393      	str	r3, [r2, #56]	@ 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_tx);
 8003d02:	480c      	ldr	r0, [pc, #48]	@ (8003d34 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003d04:	f000 fcf2 	bl	80046ec <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_tx);      
 8003d08:	480a      	ldr	r0, [pc, #40]	@ (8003d34 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003d0a:	f000 fc41 	bl	8004590 <HAL_DMA_Init>
  }
  
  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 8003d0e:	2200      	movs	r2, #0
 8003d10:	210e      	movs	r1, #14
 8003d12:	203c      	movs	r0, #60	@ 0x3c
 8003d14:	f000 fc05 	bl	8004522 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ); 
 8003d18:	203c      	movs	r0, #60	@ 0x3c
 8003d1a:	f000 fc1e 	bl	800455a <HAL_NVIC_EnableIRQ>
}
 8003d1e:	bf00      	nop
 8003d20:	3730      	adds	r7, #48	@ 0x30
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	40023800 	.word	0x40023800
 8003d2c:	40022000 	.word	0x40022000
 8003d30:	40015c04 	.word	0x40015c04
 8003d34:	20000e14 	.word	0x20000e14
 8003d38:	40026470 	.word	0x40026470

08003d3c <BSP_AUDIO_OUT_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application     
  * @retval None
  */
__weak void BSP_AUDIO_OUT_ClockConfig(SAI_HandleTypeDef *hsai, uint32_t AudioFreq, void *Params)
{ 
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b0a6      	sub	sp, #152	@ 0x98
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	607a      	str	r2, [r7, #4]
  RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;

  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 8003d48:	f107 0314 	add.w	r3, r7, #20
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f003 fa57 	bl	8007200 <HAL_RCCEx_GetPeriphCLKConfig>
  
  /* Set the PLL configuration according to the audio frequency */
  if((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K) || (AudioFreq == AUDIO_FREQUENCY_44K))
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	f642 3211 	movw	r2, #11025	@ 0x2b11
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d009      	beq.n	8003d70 <BSP_AUDIO_OUT_ClockConfig+0x34>
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	f245 6222 	movw	r2, #22050	@ 0x5622
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d004      	beq.n	8003d70 <BSP_AUDIO_OUT_ClockConfig+0x34>
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d112      	bne.n	8003d96 <BSP_AUDIO_OUT_ClockConfig+0x5a>
  {
    /* Configure PLLI2S prescalers */
    /* PLLI2S_VCO: VCO_429M
    I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 429/2 = 214.5 Mhz
    I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 214.5/19 = 11.289 Mhz */
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8003d70:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003d74:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8003d76:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003d7a:	657b      	str	r3, [r7, #84]	@ 0x54
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 429;
 8003d7c:	f240 13ad 	movw	r3, #429	@ 0x1ad
 8003d80:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 2;
 8003d82:	2302      	movs	r3, #2
 8003d84:	623b      	str	r3, [r7, #32]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 19;
 8003d86:	2313      	movs	r3, #19
 8003d88:	63bb      	str	r3, [r7, #56]	@ 0x38
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8003d8a:	f107 0314 	add.w	r3, r7, #20
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f002 fe46 	bl	8006a20 <HAL_RCCEx_PeriphCLKConfig>
 8003d94:	e012      	b.n	8003dbc <BSP_AUDIO_OUT_ClockConfig+0x80>
  {
    /* I2S clock config
    PLLI2S_VCO: VCO_344M
    I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 344/7 = 49.142 Mhz
    I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 49.142/1 = 49.142 Mhz */
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8003d96:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003d9a:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8003d9c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003da0:	657b      	str	r3, [r7, #84]	@ 0x54
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 344;
 8003da2:	f44f 73ac 	mov.w	r3, #344	@ 0x158
 8003da6:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 7;
 8003da8:	2307      	movs	r3, #7
 8003daa:	623b      	str	r3, [r7, #32]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 1;
 8003dac:	2301      	movs	r3, #1
 8003dae:	63bb      	str	r3, [r7, #56]	@ 0x38
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8003db0:	f107 0314 	add.w	r3, r7, #20
 8003db4:	4618      	mov	r0, r3
 8003db6:	f002 fe33 	bl	8006a20 <HAL_RCCEx_PeriphCLKConfig>
  }
}
 8003dba:	bf00      	nop
 8003dbc:	bf00      	nop
 8003dbe:	3798      	adds	r7, #152	@ 0x98
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}

08003dc4 <BSP_AUDIO_IN_Init>:
  * @param  BitRes: Audio frequency to be configured.
  * @param  ChnlNbr: Channel number.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_Init(uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b084      	sub	sp, #16
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	60f8      	str	r0, [r7, #12]
 8003dcc:	60b9      	str	r1, [r7, #8]
 8003dce:	607a      	str	r2, [r7, #4]
  return BSP_AUDIO_IN_InitEx(INPUT_DEVICE_DIGITAL_MICROPHONE_2, AudioFreq, BitRes, ChnlNbr); 
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	68ba      	ldr	r2, [r7, #8]
 8003dd4:	68f9      	ldr	r1, [r7, #12]
 8003dd6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8003dda:	f000 f805 	bl	8003de8 <BSP_AUDIO_IN_InitEx>
 8003dde:	4603      	mov	r3, r0
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3710      	adds	r7, #16
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <BSP_AUDIO_IN_InitEx>:
  * @param  BitRes: Audio frequency to be configured.
  * @param  ChnlNbr: Channel number.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_InitEx(uint16_t InputDevice, uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr)
{
 8003de8:	b590      	push	{r4, r7, lr}
 8003dea:	b089      	sub	sp, #36	@ 0x24
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	60b9      	str	r1, [r7, #8]
 8003df0:	607a      	str	r2, [r7, #4]
 8003df2:	603b      	str	r3, [r7, #0]
 8003df4:	4603      	mov	r3, r0
 8003df6:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = AUDIO_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	77fb      	strb	r3, [r7, #31]
  uint32_t deviceid = 0x00;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	617b      	str	r3, [r7, #20]
  uint32_t slot_active;

  if ((InputDevice != INPUT_DEVICE_INPUT_LINE_1) &&       /* Only INPUT_LINE_1 and MICROPHONE_2 inputs supported */
 8003e00:	89fb      	ldrh	r3, [r7, #14]
 8003e02:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e06:	d006      	beq.n	8003e16 <BSP_AUDIO_IN_InitEx+0x2e>
 8003e08:	89fb      	ldrh	r3, [r7, #14]
 8003e0a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e0e:	d002      	beq.n	8003e16 <BSP_AUDIO_IN_InitEx+0x2e>
      (InputDevice != INPUT_DEVICE_DIGITAL_MICROPHONE_2))
  {
    ret = AUDIO_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	77fb      	strb	r3, [r7, #31]
 8003e14:	e046      	b.n	8003ea4 <BSP_AUDIO_IN_InitEx+0xbc>
  }
  else
  {
    /* Disable SAI */
    SAIx_In_DeInit();
 8003e16:	f000 fa11 	bl	800423c <SAIx_In_DeInit>

    /* PLL clock is set depending on the AudioFreq (44.1khz vs 48khz groups) */
    BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL); /* Clock config is shared between AUDIO IN and OUT */
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	68b9      	ldr	r1, [r7, #8]
 8003e1e:	4824      	ldr	r0, [pc, #144]	@ (8003eb0 <BSP_AUDIO_IN_InitEx+0xc8>)
 8003e20:	f7ff ff8c 	bl	8003d3c <BSP_AUDIO_OUT_ClockConfig>

    /* SAI data transfer preparation:
    Prepare the Media to be used for the audio transfer from SAI peripheral to memory */
    haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8003e24:	4b22      	ldr	r3, [pc, #136]	@ (8003eb0 <BSP_AUDIO_IN_InitEx+0xc8>)
 8003e26:	4a23      	ldr	r2, [pc, #140]	@ (8003eb4 <BSP_AUDIO_IN_InitEx+0xcc>)
 8003e28:	601a      	str	r2, [r3, #0]
    if(HAL_SAI_GetState(&haudio_in_sai) == HAL_SAI_STATE_RESET)
 8003e2a:	4821      	ldr	r0, [pc, #132]	@ (8003eb0 <BSP_AUDIO_IN_InitEx+0xc8>)
 8003e2c:	f003 fee8 	bl	8007c00 <HAL_SAI_GetState>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d107      	bne.n	8003e46 <BSP_AUDIO_IN_InitEx+0x5e>
    {
      /* Init the SAI MSP: this __weak function can be redefined by the application*/
      BSP_AUDIO_OUT_MspInit(&haudio_in_sai, NULL);  /* Initialize GPIOs for SAI2 block A Master signals */
 8003e36:	2100      	movs	r1, #0
 8003e38:	481d      	ldr	r0, [pc, #116]	@ (8003eb0 <BSP_AUDIO_IN_InitEx+0xc8>)
 8003e3a:	f7ff fea9 	bl	8003b90 <BSP_AUDIO_OUT_MspInit>
      BSP_AUDIO_IN_MspInit(&haudio_in_sai, NULL);
 8003e3e:	2100      	movs	r1, #0
 8003e40:	481b      	ldr	r0, [pc, #108]	@ (8003eb0 <BSP_AUDIO_IN_InitEx+0xc8>)
 8003e42:	f000 f893 	bl	8003f6c <BSP_AUDIO_IN_MspInit>

    /* Configure SAI in master RX mode :
     *   - SAI2_block_A in master RX mode
     *   - SAI2_block_B in slave RX mode synchronous from SAI2_block_A
     */
    if (InputDevice == INPUT_DEVICE_DIGITAL_MICROPHONE_2)
 8003e46:	89fb      	ldrh	r3, [r7, #14]
 8003e48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e4c:	d102      	bne.n	8003e54 <BSP_AUDIO_IN_InitEx+0x6c>
    {
      slot_active = CODEC_AUDIOFRAME_SLOT_13;
 8003e4e:	230a      	movs	r3, #10
 8003e50:	61bb      	str	r3, [r7, #24]
 8003e52:	e001      	b.n	8003e58 <BSP_AUDIO_IN_InitEx+0x70>
    }
    else
    {
      slot_active = CODEC_AUDIOFRAME_SLOT_02;
 8003e54:	2305      	movs	r3, #5
 8003e56:	61bb      	str	r3, [r7, #24]
    }
    SAIx_In_Init(SAI_MODEMASTER_RX, slot_active, AudioFreq);
 8003e58:	68ba      	ldr	r2, [r7, #8]
 8003e5a:	69b9      	ldr	r1, [r7, #24]
 8003e5c:	2001      	movs	r0, #1
 8003e5e:	f000 f937 	bl	80040d0 <SAIx_In_Init>

    /* wm8994 codec initialization */
    deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 8003e62:	4b15      	ldr	r3, [pc, #84]	@ (8003eb8 <BSP_AUDIO_IN_InitEx+0xd0>)
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	2034      	movs	r0, #52	@ 0x34
 8003e68:	4798      	blx	r3
 8003e6a:	6178      	str	r0, [r7, #20]

    if((deviceid) == WM8994_ID)
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	f648 1294 	movw	r2, #35220	@ 0x8994
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d109      	bne.n	8003e8a <BSP_AUDIO_IN_InitEx+0xa2>
    {
      /* Reset the Codec Registers */
      wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 8003e76:	4b10      	ldr	r3, [pc, #64]	@ (8003eb8 <BSP_AUDIO_IN_InitEx+0xd0>)
 8003e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e7a:	2034      	movs	r0, #52	@ 0x34
 8003e7c:	4798      	blx	r3
      /* Initialize the audio driver structure */
      audio_drv = &wm8994_drv;
 8003e7e:	4b0f      	ldr	r3, [pc, #60]	@ (8003ebc <BSP_AUDIO_IN_InitEx+0xd4>)
 8003e80:	4a0d      	ldr	r2, [pc, #52]	@ (8003eb8 <BSP_AUDIO_IN_InitEx+0xd0>)
 8003e82:	601a      	str	r2, [r3, #0]
      ret = AUDIO_OK;
 8003e84:	2300      	movs	r3, #0
 8003e86:	77fb      	strb	r3, [r7, #31]
 8003e88:	e001      	b.n	8003e8e <BSP_AUDIO_IN_InitEx+0xa6>
    }
    else
    {
      ret = AUDIO_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	77fb      	strb	r3, [r7, #31]
    }

    if(ret == AUDIO_OK)
 8003e8e:	7ffb      	ldrb	r3, [r7, #31]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d107      	bne.n	8003ea4 <BSP_AUDIO_IN_InitEx+0xbc>
    {
      /* Initialize the codec internal registers */
      audio_drv->Init(AUDIO_I2C_ADDRESS, InputDevice, 100, AudioFreq);
 8003e94:	4b09      	ldr	r3, [pc, #36]	@ (8003ebc <BSP_AUDIO_IN_InitEx+0xd4>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681c      	ldr	r4, [r3, #0]
 8003e9a:	89f9      	ldrh	r1, [r7, #14]
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	2264      	movs	r2, #100	@ 0x64
 8003ea0:	2034      	movs	r0, #52	@ 0x34
 8003ea2:	47a0      	blx	r4
    }
  }
  return ret;
 8003ea4:	7ffb      	ldrb	r3, [r7, #31]
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3724      	adds	r7, #36	@ 0x24
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd90      	pop	{r4, r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	20000d90 	.word	0x20000d90
 8003eb4:	40015c24 	.word	0x40015c24
 8003eb8:	20000004 	.word	0x20000004
 8003ebc:	20000d08 	.word	0x20000d08

08003ec0 <BSP_AUDIO_IN_Record>:
  * @param  size: size of the recorded buffer in number of elements (typically number of half-words)
  *               Be careful that it is not the same unit than BSP_AUDIO_OUT_Play function
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t  BSP_AUDIO_IN_Record(uint16_t* pbuf, uint32_t size)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b084      	sub	sp, #16
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	6039      	str	r1, [r7, #0]
  uint32_t ret = AUDIO_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	60fb      	str	r3, [r7, #12]
  
  /* Start the process receive DMA */
  HAL_SAI_Receive_DMA(&haudio_in_sai, (uint8_t*)pbuf, size);
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	6879      	ldr	r1, [r7, #4]
 8003ed6:	4805      	ldr	r0, [pc, #20]	@ (8003eec <BSP_AUDIO_IN_Record+0x2c>)
 8003ed8:	f003 fe04 	bl	8007ae4 <HAL_SAI_Receive_DMA>
  
  /* Return AUDIO_OK when all operations are correctly done */
  ret = AUDIO_OK;
 8003edc:	2300      	movs	r3, #0
 8003ede:	60fb      	str	r3, [r7, #12]
  
  return ret;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	b2db      	uxtb	r3, r3
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3710      	adds	r7, #16
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}
 8003eec:	20000d90 	.word	0x20000d90

08003ef0 <BSP_AUDIO_IN_Stop>:
  *           - CODEC_PDWN_HW: completely shut down the codec (physically).
  *                            Then need to reconfigure the Codec after power on.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_Stop(uint32_t Option)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b082      	sub	sp, #8
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  /* Call the Media layer stop function */
  HAL_SAI_DMAStop(&haudio_in_sai);
 8003ef8:	480c      	ldr	r0, [pc, #48]	@ (8003f2c <BSP_AUDIO_IN_Stop+0x3c>)
 8003efa:	f003 fd80 	bl	80079fe <HAL_SAI_DMAStop>
  
  /* Call Audio Codec Stop function */
  if(audio_drv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
 8003efe:	4b0c      	ldr	r3, [pc, #48]	@ (8003f30 <BSP_AUDIO_IN_Stop+0x40>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	699b      	ldr	r3, [r3, #24]
 8003f04:	6879      	ldr	r1, [r7, #4]
 8003f06:	2034      	movs	r0, #52	@ 0x34
 8003f08:	4798      	blx	r3
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d001      	beq.n	8003f14 <BSP_AUDIO_IN_Stop+0x24>
  {
    return AUDIO_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e006      	b.n	8003f22 <BSP_AUDIO_IN_Stop+0x32>
  }
  else
  {
    if(Option == CODEC_PDWN_HW)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d102      	bne.n	8003f20 <BSP_AUDIO_IN_Stop+0x30>
    {
      /* Wait at least 100us */
      HAL_Delay(1);
 8003f1a:	2001      	movs	r0, #1
 8003f1c:	f000 fa02 	bl	8004324 <HAL_Delay>
    }
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 8003f20:	2300      	movs	r3, #0
  }
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3708      	adds	r7, #8
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	20000d90 	.word	0x20000d90
 8003f30:	20000d08 	.word	0x20000d08

08003f34 <HAL_SAI_RxCpltCallback>:
  * @brief  Rx Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b082      	sub	sp, #8
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 8003f3c:	f006 fc0a 	bl	800a754 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8003f40:	bf00      	nop
 8003f42:	3708      	adds	r7, #8
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}

08003f48 <HAL_SAI_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b082      	sub	sp, #8
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
  BSP_AUDIO_IN_HalfTransfer_CallBack();
 8003f50:	f006 fc48 	bl	800a7e4 <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 8003f54:	bf00      	nop
 8003f56:	3708      	adds	r7, #8
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <BSP_AUDIO_IN_Error_CallBack>:
/**
  * @brief  Audio IN Error callback function.
  * @retval None
  */
__weak void BSP_AUDIO_IN_Error_CallBack(void)
{   
 8003f5c:	b480      	push	{r7}
 8003f5e:	af00      	add	r7, sp, #0
  /* This function is called when an Interrupt due to transfer error on or peripheral
     error occurs. */
}
 8003f60:	bf00      	nop
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr
	...

08003f6c <BSP_AUDIO_IN_MspInit>:
  * @param  hsai: SAI handle
  * @param  Params
  * @retval None
  */
__weak void BSP_AUDIO_IN_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b08c      	sub	sp, #48	@ 0x30
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_sai_rx;
  GPIO_InitTypeDef  gpio_init_structure;  

  /* Enable SAI clock */
  AUDIO_IN_SAIx_CLK_ENABLE();
 8003f76:	4b50      	ldr	r3, [pc, #320]	@ (80040b8 <BSP_AUDIO_IN_MspInit+0x14c>)
 8003f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f7a:	4a4f      	ldr	r2, [pc, #316]	@ (80040b8 <BSP_AUDIO_IN_MspInit+0x14c>)
 8003f7c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003f80:	6453      	str	r3, [r2, #68]	@ 0x44
 8003f82:	4b4d      	ldr	r3, [pc, #308]	@ (80040b8 <BSP_AUDIO_IN_MspInit+0x14c>)
 8003f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f86:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003f8a:	61bb      	str	r3, [r7, #24]
 8003f8c:	69bb      	ldr	r3, [r7, #24]
  
  /* Enable SD GPIO clock */
  AUDIO_IN_SAIx_SD_ENABLE();
 8003f8e:	4b4a      	ldr	r3, [pc, #296]	@ (80040b8 <BSP_AUDIO_IN_MspInit+0x14c>)
 8003f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f92:	4a49      	ldr	r2, [pc, #292]	@ (80040b8 <BSP_AUDIO_IN_MspInit+0x14c>)
 8003f94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003f98:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f9a:	4b47      	ldr	r3, [pc, #284]	@ (80040b8 <BSP_AUDIO_IN_MspInit+0x14c>)
 8003f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fa2:	617b      	str	r3, [r7, #20]
 8003fa4:	697b      	ldr	r3, [r7, #20]
  /* CODEC_SAI pin configuration: SD pin */
  gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
 8003fa6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003faa:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8003fac:	2302      	movs	r3, #2
 8003fae:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8003fb4:	2302      	movs	r3, #2
 8003fb6:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_IN_SAIx_SD_AF;
 8003fb8:	230a      	movs	r3, #10
 8003fba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 8003fbc:	f107 031c 	add.w	r3, r7, #28
 8003fc0:	4619      	mov	r1, r3
 8003fc2:	483e      	ldr	r0, [pc, #248]	@ (80040bc <BSP_AUDIO_IN_MspInit+0x150>)
 8003fc4:	f000 ff58 	bl	8004e78 <HAL_GPIO_Init>

  /* Enable Audio INT GPIO clock */
  AUDIO_IN_INT_GPIO_ENABLE();
 8003fc8:	4b3b      	ldr	r3, [pc, #236]	@ (80040b8 <BSP_AUDIO_IN_MspInit+0x14c>)
 8003fca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fcc:	4a3a      	ldr	r2, [pc, #232]	@ (80040b8 <BSP_AUDIO_IN_MspInit+0x14c>)
 8003fce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fd2:	6313      	str	r3, [r2, #48]	@ 0x30
 8003fd4:	4b38      	ldr	r3, [pc, #224]	@ (80040b8 <BSP_AUDIO_IN_MspInit+0x14c>)
 8003fd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fdc:	613b      	str	r3, [r7, #16]
 8003fde:	693b      	ldr	r3, [r7, #16]
  /* Audio INT pin configuration: input */
  gpio_init_structure.Pin = AUDIO_IN_INT_GPIO_PIN;
 8003fe0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003fe4:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8003fea:	2300      	movs	r3, #0
 8003fec:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8003fee:	2302      	movs	r3, #2
 8003ff0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(AUDIO_IN_INT_GPIO_PORT, &gpio_init_structure);
 8003ff2:	f107 031c 	add.w	r3, r7, #28
 8003ff6:	4619      	mov	r1, r3
 8003ff8:	4831      	ldr	r0, [pc, #196]	@ (80040c0 <BSP_AUDIO_IN_MspInit+0x154>)
 8003ffa:	f000 ff3d 	bl	8004e78 <HAL_GPIO_Init>

  /* Enable the DMA clock */
  AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 8003ffe:	4b2e      	ldr	r3, [pc, #184]	@ (80040b8 <BSP_AUDIO_IN_MspInit+0x14c>)
 8004000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004002:	4a2d      	ldr	r2, [pc, #180]	@ (80040b8 <BSP_AUDIO_IN_MspInit+0x14c>)
 8004004:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004008:	6313      	str	r3, [r2, #48]	@ 0x30
 800400a:	4b2b      	ldr	r3, [pc, #172]	@ (80040b8 <BSP_AUDIO_IN_MspInit+0x14c>)
 800400c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800400e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004012:	60fb      	str	r3, [r7, #12]
 8004014:	68fb      	ldr	r3, [r7, #12]
    
  if(hsai->Instance == AUDIO_IN_SAIx)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a2a      	ldr	r2, [pc, #168]	@ (80040c4 <BSP_AUDIO_IN_MspInit+0x158>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d137      	bne.n	8004090 <BSP_AUDIO_IN_MspInit+0x124>
  {
    /* Configure the hdma_sai_rx handle parameters */
    hdma_sai_rx.Init.Channel             = AUDIO_IN_SAIx_DMAx_CHANNEL;
 8004020:	4b29      	ldr	r3, [pc, #164]	@ (80040c8 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004022:	2200      	movs	r2, #0
 8004024:	605a      	str	r2, [r3, #4]
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8004026:	4b28      	ldr	r3, [pc, #160]	@ (80040c8 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004028:	2200      	movs	r2, #0
 800402a:	609a      	str	r2, [r3, #8]
    hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 800402c:	4b26      	ldr	r3, [pc, #152]	@ (80040c8 <BSP_AUDIO_IN_MspInit+0x15c>)
 800402e:	2200      	movs	r2, #0
 8004030:	60da      	str	r2, [r3, #12]
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8004032:	4b25      	ldr	r3, [pc, #148]	@ (80040c8 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004034:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004038:	611a      	str	r2, [r3, #16]
    hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAIx_DMAx_PERIPH_DATA_SIZE;
 800403a:	4b23      	ldr	r3, [pc, #140]	@ (80040c8 <BSP_AUDIO_IN_MspInit+0x15c>)
 800403c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004040:	615a      	str	r2, [r3, #20]
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
 8004042:	4b21      	ldr	r3, [pc, #132]	@ (80040c8 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004044:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004048:	619a      	str	r2, [r3, #24]
    hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 800404a:	4b1f      	ldr	r3, [pc, #124]	@ (80040c8 <BSP_AUDIO_IN_MspInit+0x15c>)
 800404c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004050:	61da      	str	r2, [r3, #28]
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8004052:	4b1d      	ldr	r3, [pc, #116]	@ (80040c8 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004054:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004058:	621a      	str	r2, [r3, #32]
    hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 800405a:	4b1b      	ldr	r3, [pc, #108]	@ (80040c8 <BSP_AUDIO_IN_MspInit+0x15c>)
 800405c:	2200      	movs	r2, #0
 800405e:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8004060:	4b19      	ldr	r3, [pc, #100]	@ (80040c8 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004062:	2203      	movs	r2, #3
 8004064:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8004066:	4b18      	ldr	r3, [pc, #96]	@ (80040c8 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004068:	2200      	movs	r2, #0
 800406a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 800406c:	4b16      	ldr	r3, [pc, #88]	@ (80040c8 <BSP_AUDIO_IN_MspInit+0x15c>)
 800406e:	2200      	movs	r2, #0
 8004070:	631a      	str	r2, [r3, #48]	@ 0x30
    
    hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 8004072:	4b15      	ldr	r3, [pc, #84]	@ (80040c8 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004074:	4a15      	ldr	r2, [pc, #84]	@ (80040cc <BSP_AUDIO_IN_MspInit+0x160>)
 8004076:	601a      	str	r2, [r3, #0]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4a13      	ldr	r2, [pc, #76]	@ (80040c8 <BSP_AUDIO_IN_MspInit+0x15c>)
 800407c:	671a      	str	r2, [r3, #112]	@ 0x70
 800407e:	4a12      	ldr	r2, [pc, #72]	@ (80040c8 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6393      	str	r3, [r2, #56]	@ 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_rx);
 8004084:	4810      	ldr	r0, [pc, #64]	@ (80040c8 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004086:	f000 fb31 	bl	80046ec <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_rx);
 800408a:	480f      	ldr	r0, [pc, #60]	@ (80040c8 <BSP_AUDIO_IN_MspInit+0x15c>)
 800408c:	f000 fa80 	bl	8004590 <HAL_DMA_Init>
  }
  
  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8004090:	2200      	movs	r2, #0
 8004092:	210f      	movs	r1, #15
 8004094:	2046      	movs	r0, #70	@ 0x46
 8004096:	f000 fa44 	bl	8004522 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 800409a:	2046      	movs	r0, #70	@ 0x46
 800409c:	f000 fa5d 	bl	800455a <HAL_NVIC_EnableIRQ>

  /* Audio INT IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_IN_INT_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 80040a0:	2200      	movs	r2, #0
 80040a2:	210f      	movs	r1, #15
 80040a4:	2028      	movs	r0, #40	@ 0x28
 80040a6:	f000 fa3c 	bl	8004522 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_INT_IRQ);
 80040aa:	2028      	movs	r0, #40	@ 0x28
 80040ac:	f000 fa55 	bl	800455a <HAL_NVIC_EnableIRQ>
}
 80040b0:	bf00      	nop
 80040b2:	3730      	adds	r7, #48	@ 0x30
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	40023800 	.word	0x40023800
 80040bc:	40021800 	.word	0x40021800
 80040c0:	40021c00 	.word	0x40021c00
 80040c4:	40015c24 	.word	0x40015c24
 80040c8:	20000e74 	.word	0x20000e74
 80040cc:	400264b8 	.word	0x400264b8

080040d0 <SAIx_In_Init>:
  * @param  SlotActive: CODEC_AUDIOFRAME_SLOT_02 or CODEC_AUDIOFRAME_SLOT_13
  * @param  AudioFreq: Audio frequency to be configured for the SAI peripheral.
  * @retval None
  */
static void SAIx_In_Init(uint32_t SaiOutMode, uint32_t SlotActive, uint32_t AudioFreq)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b084      	sub	sp, #16
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	60f8      	str	r0, [r7, #12]
 80040d8:	60b9      	str	r1, [r7, #8]
 80040da:	607a      	str	r2, [r7, #4]
  /* Initialize SAI2 block A in MASTER RX */
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 80040dc:	4b53      	ldr	r3, [pc, #332]	@ (800422c <SAIx_In_Init+0x15c>)
 80040de:	4a54      	ldr	r2, [pc, #336]	@ (8004230 <SAIx_In_Init+0x160>)
 80040e0:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 80040e2:	4b52      	ldr	r3, [pc, #328]	@ (800422c <SAIx_In_Init+0x15c>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	4b50      	ldr	r3, [pc, #320]	@ (800422c <SAIx_In_Init+0x15c>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80040f0:	601a      	str	r2, [r3, #0]

  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
 80040f2:	4a4e      	ldr	r2, [pc, #312]	@ (800422c <SAIx_In_Init+0x15c>)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	61d3      	str	r3, [r2, #28]
  haudio_out_sai.Init.AudioMode = SaiOutMode;
 80040f8:	4a4c      	ldr	r2, [pc, #304]	@ (800422c <SAIx_In_Init+0x15c>)
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6053      	str	r3, [r2, #4]
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 80040fe:	4b4b      	ldr	r3, [pc, #300]	@ (800422c <SAIx_In_Init+0x15c>)
 8004100:	2200      	movs	r2, #0
 8004102:	615a      	str	r2, [r3, #20]
  haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 8004104:	4b49      	ldr	r3, [pc, #292]	@ (800422c <SAIx_In_Init+0x15c>)
 8004106:	2200      	movs	r2, #0
 8004108:	631a      	str	r2, [r3, #48]	@ 0x30
  haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
 800410a:	4b48      	ldr	r3, [pc, #288]	@ (800422c <SAIx_In_Init+0x15c>)
 800410c:	2280      	movs	r2, #128	@ 0x80
 800410e:	635a      	str	r2, [r3, #52]	@ 0x34
  haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8004110:	4b46      	ldr	r3, [pc, #280]	@ (800422c <SAIx_In_Init+0x15c>)
 8004112:	2200      	movs	r2, #0
 8004114:	639a      	str	r2, [r3, #56]	@ 0x38
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8004116:	4b45      	ldr	r3, [pc, #276]	@ (800422c <SAIx_In_Init+0x15c>)
 8004118:	2201      	movs	r2, #1
 800411a:	63da      	str	r2, [r3, #60]	@ 0x3c
  haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
 800411c:	4b43      	ldr	r3, [pc, #268]	@ (800422c <SAIx_In_Init+0x15c>)
 800411e:	2200      	movs	r2, #0
 8004120:	609a      	str	r2, [r3, #8]
  haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 8004122:	4b42      	ldr	r3, [pc, #264]	@ (800422c <SAIx_In_Init+0x15c>)
 8004124:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004128:	611a      	str	r2, [r3, #16]
  haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 800412a:	4b40      	ldr	r3, [pc, #256]	@ (800422c <SAIx_In_Init+0x15c>)
 800412c:	2201      	movs	r2, #1
 800412e:	619a      	str	r2, [r3, #24]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  haudio_out_sai.FrameInit.FrameLength = 64;
 8004130:	4b3e      	ldr	r3, [pc, #248]	@ (800422c <SAIx_In_Init+0x15c>)
 8004132:	2240      	movs	r2, #64	@ 0x40
 8004134:	641a      	str	r2, [r3, #64]	@ 0x40
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 8004136:	4b3d      	ldr	r3, [pc, #244]	@ (800422c <SAIx_In_Init+0x15c>)
 8004138:	2220      	movs	r2, #32
 800413a:	645a      	str	r2, [r3, #68]	@ 0x44
  haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 800413c:	4b3b      	ldr	r3, [pc, #236]	@ (800422c <SAIx_In_Init+0x15c>)
 800413e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004142:	649a      	str	r2, [r3, #72]	@ 0x48
  haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8004144:	4b39      	ldr	r3, [pc, #228]	@ (800422c <SAIx_In_Init+0x15c>)
 8004146:	2200      	movs	r2, #0
 8004148:	64da      	str	r2, [r3, #76]	@ 0x4c
  haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 800414a:	4b38      	ldr	r3, [pc, #224]	@ (800422c <SAIx_In_Init+0x15c>)
 800414c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8004150:	651a      	str	r2, [r3, #80]	@ 0x50
  /* Configure SAI Block_x Slot
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot actives */
  haudio_out_sai.SlotInit.FirstBitOffset = 0;
 8004152:	4b36      	ldr	r3, [pc, #216]	@ (800422c <SAIx_In_Init+0x15c>)
 8004154:	2200      	movs	r2, #0
 8004156:	655a      	str	r2, [r3, #84]	@ 0x54
  haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8004158:	4b34      	ldr	r3, [pc, #208]	@ (800422c <SAIx_In_Init+0x15c>)
 800415a:	2200      	movs	r2, #0
 800415c:	659a      	str	r2, [r3, #88]	@ 0x58
  haudio_out_sai.SlotInit.SlotNumber = 4;
 800415e:	4b33      	ldr	r3, [pc, #204]	@ (800422c <SAIx_In_Init+0x15c>)
 8004160:	2204      	movs	r2, #4
 8004162:	65da      	str	r2, [r3, #92]	@ 0x5c
  haudio_out_sai.SlotInit.SlotActive = SlotActive;
 8004164:	4a31      	ldr	r2, [pc, #196]	@ (800422c <SAIx_In_Init+0x15c>)
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	6613      	str	r3, [r2, #96]	@ 0x60

  HAL_SAI_Init(&haudio_out_sai);
 800416a:	4830      	ldr	r0, [pc, #192]	@ (800422c <SAIx_In_Init+0x15c>)
 800416c:	f003 fa94 	bl	8007698 <HAL_SAI_Init>

  /* Initialize SAI2 block B in SLAVE RX synchronous from SAI2 block A */
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8004170:	4b30      	ldr	r3, [pc, #192]	@ (8004234 <SAIx_In_Init+0x164>)
 8004172:	4a31      	ldr	r2, [pc, #196]	@ (8004238 <SAIx_In_Init+0x168>)
 8004174:	601a      	str	r2, [r3, #0]
  
  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 8004176:	4b2f      	ldr	r3, [pc, #188]	@ (8004234 <SAIx_In_Init+0x164>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	4b2d      	ldr	r3, [pc, #180]	@ (8004234 <SAIx_In_Init+0x164>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004184:	601a      	str	r2, [r3, #0]
  
  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  haudio_in_sai.Init.AudioFrequency = AudioFreq;
 8004186:	4a2b      	ldr	r2, [pc, #172]	@ (8004234 <SAIx_In_Init+0x164>)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	61d3      	str	r3, [r2, #28]
  haudio_in_sai.Init.AudioMode = SAI_MODESLAVE_RX;
 800418c:	4b29      	ldr	r3, [pc, #164]	@ (8004234 <SAIx_In_Init+0x164>)
 800418e:	2203      	movs	r2, #3
 8004190:	605a      	str	r2, [r3, #4]
  haudio_in_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 8004192:	4b28      	ldr	r3, [pc, #160]	@ (8004234 <SAIx_In_Init+0x164>)
 8004194:	2200      	movs	r2, #0
 8004196:	615a      	str	r2, [r3, #20]
  haudio_in_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 8004198:	4b26      	ldr	r3, [pc, #152]	@ (8004234 <SAIx_In_Init+0x164>)
 800419a:	2200      	movs	r2, #0
 800419c:	631a      	str	r2, [r3, #48]	@ 0x30
  haudio_in_sai.Init.DataSize = SAI_DATASIZE_16;
 800419e:	4b25      	ldr	r3, [pc, #148]	@ (8004234 <SAIx_In_Init+0x164>)
 80041a0:	2280      	movs	r2, #128	@ 0x80
 80041a2:	635a      	str	r2, [r3, #52]	@ 0x34
  haudio_in_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80041a4:	4b23      	ldr	r3, [pc, #140]	@ (8004234 <SAIx_In_Init+0x164>)
 80041a6:	2200      	movs	r2, #0
 80041a8:	639a      	str	r2, [r3, #56]	@ 0x38
  haudio_in_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 80041aa:	4b22      	ldr	r3, [pc, #136]	@ (8004234 <SAIx_In_Init+0x164>)
 80041ac:	2201      	movs	r2, #1
 80041ae:	63da      	str	r2, [r3, #60]	@ 0x3c
  haudio_in_sai.Init.Synchro = SAI_SYNCHRONOUS;
 80041b0:	4b20      	ldr	r3, [pc, #128]	@ (8004234 <SAIx_In_Init+0x164>)
 80041b2:	2201      	movs	r2, #1
 80041b4:	609a      	str	r2, [r3, #8]
  haudio_in_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLED;
 80041b6:	4b1f      	ldr	r3, [pc, #124]	@ (8004234 <SAIx_In_Init+0x164>)
 80041b8:	2200      	movs	r2, #0
 80041ba:	611a      	str	r2, [r3, #16]
  haudio_in_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 80041bc:	4b1d      	ldr	r3, [pc, #116]	@ (8004234 <SAIx_In_Init+0x164>)
 80041be:	2201      	movs	r2, #1
 80041c0:	619a      	str	r2, [r3, #24]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  haudio_in_sai.FrameInit.FrameLength = 64;
 80041c2:	4b1c      	ldr	r3, [pc, #112]	@ (8004234 <SAIx_In_Init+0x164>)
 80041c4:	2240      	movs	r2, #64	@ 0x40
 80041c6:	641a      	str	r2, [r3, #64]	@ 0x40
  haudio_in_sai.FrameInit.ActiveFrameLength = 32;
 80041c8:	4b1a      	ldr	r3, [pc, #104]	@ (8004234 <SAIx_In_Init+0x164>)
 80041ca:	2220      	movs	r2, #32
 80041cc:	645a      	str	r2, [r3, #68]	@ 0x44
  haudio_in_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 80041ce:	4b19      	ldr	r3, [pc, #100]	@ (8004234 <SAIx_In_Init+0x164>)
 80041d0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80041d4:	649a      	str	r2, [r3, #72]	@ 0x48
  haudio_in_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80041d6:	4b17      	ldr	r3, [pc, #92]	@ (8004234 <SAIx_In_Init+0x164>)
 80041d8:	2200      	movs	r2, #0
 80041da:	64da      	str	r2, [r3, #76]	@ 0x4c
  haudio_in_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 80041dc:	4b15      	ldr	r3, [pc, #84]	@ (8004234 <SAIx_In_Init+0x164>)
 80041de:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80041e2:	651a      	str	r2, [r3, #80]	@ 0x50
  /* Configure SAI Block_x Slot
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot active */
  haudio_in_sai.SlotInit.FirstBitOffset = 0;
 80041e4:	4b13      	ldr	r3, [pc, #76]	@ (8004234 <SAIx_In_Init+0x164>)
 80041e6:	2200      	movs	r2, #0
 80041e8:	655a      	str	r2, [r3, #84]	@ 0x54
  haudio_in_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80041ea:	4b12      	ldr	r3, [pc, #72]	@ (8004234 <SAIx_In_Init+0x164>)
 80041ec:	2200      	movs	r2, #0
 80041ee:	659a      	str	r2, [r3, #88]	@ 0x58
  haudio_in_sai.SlotInit.SlotNumber = 4;
 80041f0:	4b10      	ldr	r3, [pc, #64]	@ (8004234 <SAIx_In_Init+0x164>)
 80041f2:	2204      	movs	r2, #4
 80041f4:	65da      	str	r2, [r3, #92]	@ 0x5c
  haudio_in_sai.SlotInit.SlotActive = SlotActive;
 80041f6:	4a0f      	ldr	r2, [pc, #60]	@ (8004234 <SAIx_In_Init+0x164>)
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	6613      	str	r3, [r2, #96]	@ 0x60

  HAL_SAI_Init(&haudio_in_sai);
 80041fc:	480d      	ldr	r0, [pc, #52]	@ (8004234 <SAIx_In_Init+0x164>)
 80041fe:	f003 fa4b 	bl	8007698 <HAL_SAI_Init>

  /* Enable SAI peripheral to generate MCLK */
  __HAL_SAI_ENABLE(&haudio_out_sai);
 8004202:	4b0a      	ldr	r3, [pc, #40]	@ (800422c <SAIx_In_Init+0x15c>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	4b08      	ldr	r3, [pc, #32]	@ (800422c <SAIx_In_Init+0x15c>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004210:	601a      	str	r2, [r3, #0]

  /* Enable SAI peripheral */
  __HAL_SAI_ENABLE(&haudio_in_sai);
 8004212:	4b08      	ldr	r3, [pc, #32]	@ (8004234 <SAIx_In_Init+0x164>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	4b06      	ldr	r3, [pc, #24]	@ (8004234 <SAIx_In_Init+0x164>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004220:	601a      	str	r2, [r3, #0]
}
 8004222:	bf00      	nop
 8004224:	3710      	adds	r7, #16
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	20000d0c 	.word	0x20000d0c
 8004230:	40015c04 	.word	0x40015c04
 8004234:	20000d90 	.word	0x20000d90
 8004238:	40015c24 	.word	0x40015c24

0800423c <SAIx_In_DeInit>:
/**
  * @brief  Deinitializes the output Audio Codec audio interface (SAI).
  * @retval None
  */
static void SAIx_In_DeInit(void)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	af00      	add	r7, sp, #0
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8004240:	4b07      	ldr	r3, [pc, #28]	@ (8004260 <SAIx_In_DeInit+0x24>)
 8004242:	4a08      	ldr	r2, [pc, #32]	@ (8004264 <SAIx_In_DeInit+0x28>)
 8004244:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 8004246:	4b06      	ldr	r3, [pc, #24]	@ (8004260 <SAIx_In_DeInit+0x24>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	4b04      	ldr	r3, [pc, #16]	@ (8004260 <SAIx_In_DeInit+0x24>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004254:	601a      	str	r2, [r3, #0]

  HAL_SAI_DeInit(&haudio_in_sai);
 8004256:	4802      	ldr	r0, [pc, #8]	@ (8004260 <SAIx_In_DeInit+0x24>)
 8004258:	f003 fb9c 	bl	8007994 <HAL_SAI_DeInit>
}
 800425c:	bf00      	nop
 800425e:	bd80      	pop	{r7, pc}
 8004260:	20000d90 	.word	0x20000d90
 8004264:	40015c24 	.word	0x40015c24

08004268 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800426c:	2003      	movs	r0, #3
 800426e:	f000 f94d 	bl	800450c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004272:	2000      	movs	r0, #0
 8004274:	f000 f806 	bl	8004284 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004278:	f7fd fd1c 	bl	8001cb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800427c:	2300      	movs	r3, #0
}
 800427e:	4618      	mov	r0, r3
 8004280:	bd80      	pop	{r7, pc}
	...

08004284 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b082      	sub	sp, #8
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800428c:	4b12      	ldr	r3, [pc, #72]	@ (80042d8 <HAL_InitTick+0x54>)
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	4b12      	ldr	r3, [pc, #72]	@ (80042dc <HAL_InitTick+0x58>)
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	4619      	mov	r1, r3
 8004296:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800429a:	fbb3 f3f1 	udiv	r3, r3, r1
 800429e:	fbb2 f3f3 	udiv	r3, r2, r3
 80042a2:	4618      	mov	r0, r3
 80042a4:	f000 f967 	bl	8004576 <HAL_SYSTICK_Config>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d001      	beq.n	80042b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e00e      	b.n	80042d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2b0f      	cmp	r3, #15
 80042b6:	d80a      	bhi.n	80042ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80042b8:	2200      	movs	r2, #0
 80042ba:	6879      	ldr	r1, [r7, #4]
 80042bc:	f04f 30ff 	mov.w	r0, #4294967295
 80042c0:	f000 f92f 	bl	8004522 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80042c4:	4a06      	ldr	r2, [pc, #24]	@ (80042e0 <HAL_InitTick+0x5c>)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80042ca:	2300      	movs	r3, #0
 80042cc:	e000      	b.n	80042d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3708      	adds	r7, #8
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	20000000 	.word	0x20000000
 80042dc:	2000003c 	.word	0x2000003c
 80042e0:	20000038 	.word	0x20000038

080042e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80042e4:	b480      	push	{r7}
 80042e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80042e8:	4b06      	ldr	r3, [pc, #24]	@ (8004304 <HAL_IncTick+0x20>)
 80042ea:	781b      	ldrb	r3, [r3, #0]
 80042ec:	461a      	mov	r2, r3
 80042ee:	4b06      	ldr	r3, [pc, #24]	@ (8004308 <HAL_IncTick+0x24>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4413      	add	r3, r2
 80042f4:	4a04      	ldr	r2, [pc, #16]	@ (8004308 <HAL_IncTick+0x24>)
 80042f6:	6013      	str	r3, [r2, #0]
}
 80042f8:	bf00      	nop
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr
 8004302:	bf00      	nop
 8004304:	2000003c 	.word	0x2000003c
 8004308:	20000ed4 	.word	0x20000ed4

0800430c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800430c:	b480      	push	{r7}
 800430e:	af00      	add	r7, sp, #0
  return uwTick;
 8004310:	4b03      	ldr	r3, [pc, #12]	@ (8004320 <HAL_GetTick+0x14>)
 8004312:	681b      	ldr	r3, [r3, #0]
}
 8004314:	4618      	mov	r0, r3
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr
 800431e:	bf00      	nop
 8004320:	20000ed4 	.word	0x20000ed4

08004324 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b084      	sub	sp, #16
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800432c:	f7ff ffee 	bl	800430c <HAL_GetTick>
 8004330:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800433c:	d005      	beq.n	800434a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800433e:	4b0a      	ldr	r3, [pc, #40]	@ (8004368 <HAL_Delay+0x44>)
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	461a      	mov	r2, r3
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	4413      	add	r3, r2
 8004348:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800434a:	bf00      	nop
 800434c:	f7ff ffde 	bl	800430c <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	68fa      	ldr	r2, [r7, #12]
 8004358:	429a      	cmp	r2, r3
 800435a:	d8f7      	bhi.n	800434c <HAL_Delay+0x28>
  {
  }
}
 800435c:	bf00      	nop
 800435e:	bf00      	nop
 8004360:	3710      	adds	r7, #16
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
 8004366:	bf00      	nop
 8004368:	2000003c 	.word	0x2000003c

0800436c <__NVIC_SetPriorityGrouping>:
{
 800436c:	b480      	push	{r7}
 800436e:	b085      	sub	sp, #20
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f003 0307 	and.w	r3, r3, #7
 800437a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800437c:	4b0b      	ldr	r3, [pc, #44]	@ (80043ac <__NVIC_SetPriorityGrouping+0x40>)
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004382:	68ba      	ldr	r2, [r7, #8]
 8004384:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004388:	4013      	ands	r3, r2
 800438a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004394:	4b06      	ldr	r3, [pc, #24]	@ (80043b0 <__NVIC_SetPriorityGrouping+0x44>)
 8004396:	4313      	orrs	r3, r2
 8004398:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800439a:	4a04      	ldr	r2, [pc, #16]	@ (80043ac <__NVIC_SetPriorityGrouping+0x40>)
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	60d3      	str	r3, [r2, #12]
}
 80043a0:	bf00      	nop
 80043a2:	3714      	adds	r7, #20
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr
 80043ac:	e000ed00 	.word	0xe000ed00
 80043b0:	05fa0000 	.word	0x05fa0000

080043b4 <__NVIC_GetPriorityGrouping>:
{
 80043b4:	b480      	push	{r7}
 80043b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80043b8:	4b04      	ldr	r3, [pc, #16]	@ (80043cc <__NVIC_GetPriorityGrouping+0x18>)
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	0a1b      	lsrs	r3, r3, #8
 80043be:	f003 0307 	and.w	r3, r3, #7
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr
 80043cc:	e000ed00 	.word	0xe000ed00

080043d0 <__NVIC_EnableIRQ>:
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	4603      	mov	r3, r0
 80043d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	db0b      	blt.n	80043fa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043e2:	79fb      	ldrb	r3, [r7, #7]
 80043e4:	f003 021f 	and.w	r2, r3, #31
 80043e8:	4907      	ldr	r1, [pc, #28]	@ (8004408 <__NVIC_EnableIRQ+0x38>)
 80043ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ee:	095b      	lsrs	r3, r3, #5
 80043f0:	2001      	movs	r0, #1
 80043f2:	fa00 f202 	lsl.w	r2, r0, r2
 80043f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80043fa:	bf00      	nop
 80043fc:	370c      	adds	r7, #12
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr
 8004406:	bf00      	nop
 8004408:	e000e100 	.word	0xe000e100

0800440c <__NVIC_SetPriority>:
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	4603      	mov	r3, r0
 8004414:	6039      	str	r1, [r7, #0]
 8004416:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004418:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800441c:	2b00      	cmp	r3, #0
 800441e:	db0a      	blt.n	8004436 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	b2da      	uxtb	r2, r3
 8004424:	490c      	ldr	r1, [pc, #48]	@ (8004458 <__NVIC_SetPriority+0x4c>)
 8004426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800442a:	0112      	lsls	r2, r2, #4
 800442c:	b2d2      	uxtb	r2, r2
 800442e:	440b      	add	r3, r1
 8004430:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004434:	e00a      	b.n	800444c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	b2da      	uxtb	r2, r3
 800443a:	4908      	ldr	r1, [pc, #32]	@ (800445c <__NVIC_SetPriority+0x50>)
 800443c:	79fb      	ldrb	r3, [r7, #7]
 800443e:	f003 030f 	and.w	r3, r3, #15
 8004442:	3b04      	subs	r3, #4
 8004444:	0112      	lsls	r2, r2, #4
 8004446:	b2d2      	uxtb	r2, r2
 8004448:	440b      	add	r3, r1
 800444a:	761a      	strb	r2, [r3, #24]
}
 800444c:	bf00      	nop
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr
 8004458:	e000e100 	.word	0xe000e100
 800445c:	e000ed00 	.word	0xe000ed00

08004460 <NVIC_EncodePriority>:
{
 8004460:	b480      	push	{r7}
 8004462:	b089      	sub	sp, #36	@ 0x24
 8004464:	af00      	add	r7, sp, #0
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f003 0307 	and.w	r3, r3, #7
 8004472:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	f1c3 0307 	rsb	r3, r3, #7
 800447a:	2b04      	cmp	r3, #4
 800447c:	bf28      	it	cs
 800447e:	2304      	movcs	r3, #4
 8004480:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	3304      	adds	r3, #4
 8004486:	2b06      	cmp	r3, #6
 8004488:	d902      	bls.n	8004490 <NVIC_EncodePriority+0x30>
 800448a:	69fb      	ldr	r3, [r7, #28]
 800448c:	3b03      	subs	r3, #3
 800448e:	e000      	b.n	8004492 <NVIC_EncodePriority+0x32>
 8004490:	2300      	movs	r3, #0
 8004492:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004494:	f04f 32ff 	mov.w	r2, #4294967295
 8004498:	69bb      	ldr	r3, [r7, #24]
 800449a:	fa02 f303 	lsl.w	r3, r2, r3
 800449e:	43da      	mvns	r2, r3
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	401a      	ands	r2, r3
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80044a8:	f04f 31ff 	mov.w	r1, #4294967295
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	fa01 f303 	lsl.w	r3, r1, r3
 80044b2:	43d9      	mvns	r1, r3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044b8:	4313      	orrs	r3, r2
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3724      	adds	r7, #36	@ 0x24
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr
	...

080044c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b082      	sub	sp, #8
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	3b01      	subs	r3, #1
 80044d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80044d8:	d301      	bcc.n	80044de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80044da:	2301      	movs	r3, #1
 80044dc:	e00f      	b.n	80044fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80044de:	4a0a      	ldr	r2, [pc, #40]	@ (8004508 <SysTick_Config+0x40>)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	3b01      	subs	r3, #1
 80044e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80044e6:	210f      	movs	r1, #15
 80044e8:	f04f 30ff 	mov.w	r0, #4294967295
 80044ec:	f7ff ff8e 	bl	800440c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80044f0:	4b05      	ldr	r3, [pc, #20]	@ (8004508 <SysTick_Config+0x40>)
 80044f2:	2200      	movs	r2, #0
 80044f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80044f6:	4b04      	ldr	r3, [pc, #16]	@ (8004508 <SysTick_Config+0x40>)
 80044f8:	2207      	movs	r2, #7
 80044fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3708      	adds	r7, #8
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop
 8004508:	e000e010 	.word	0xe000e010

0800450c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b082      	sub	sp, #8
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f7ff ff29 	bl	800436c <__NVIC_SetPriorityGrouping>
}
 800451a:	bf00      	nop
 800451c:	3708      	adds	r7, #8
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}

08004522 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004522:	b580      	push	{r7, lr}
 8004524:	b086      	sub	sp, #24
 8004526:	af00      	add	r7, sp, #0
 8004528:	4603      	mov	r3, r0
 800452a:	60b9      	str	r1, [r7, #8]
 800452c:	607a      	str	r2, [r7, #4]
 800452e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004530:	2300      	movs	r3, #0
 8004532:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004534:	f7ff ff3e 	bl	80043b4 <__NVIC_GetPriorityGrouping>
 8004538:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	68b9      	ldr	r1, [r7, #8]
 800453e:	6978      	ldr	r0, [r7, #20]
 8004540:	f7ff ff8e 	bl	8004460 <NVIC_EncodePriority>
 8004544:	4602      	mov	r2, r0
 8004546:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800454a:	4611      	mov	r1, r2
 800454c:	4618      	mov	r0, r3
 800454e:	f7ff ff5d 	bl	800440c <__NVIC_SetPriority>
}
 8004552:	bf00      	nop
 8004554:	3718      	adds	r7, #24
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}

0800455a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800455a:	b580      	push	{r7, lr}
 800455c:	b082      	sub	sp, #8
 800455e:	af00      	add	r7, sp, #0
 8004560:	4603      	mov	r3, r0
 8004562:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004564:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004568:	4618      	mov	r0, r3
 800456a:	f7ff ff31 	bl	80043d0 <__NVIC_EnableIRQ>
}
 800456e:	bf00      	nop
 8004570:	3708      	adds	r7, #8
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}

08004576 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004576:	b580      	push	{r7, lr}
 8004578:	b082      	sub	sp, #8
 800457a:	af00      	add	r7, sp, #0
 800457c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f7ff ffa2 	bl	80044c8 <SysTick_Config>
 8004584:	4603      	mov	r3, r0
}
 8004586:	4618      	mov	r0, r3
 8004588:	3708      	adds	r7, #8
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
	...

08004590 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b086      	sub	sp, #24
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004598:	2300      	movs	r3, #0
 800459a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800459c:	f7ff feb6 	bl	800430c <HAL_GetTick>
 80045a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d101      	bne.n	80045ac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e099      	b.n	80046e0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2202      	movs	r2, #2
 80045b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f022 0201 	bic.w	r2, r2, #1
 80045ca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80045cc:	e00f      	b.n	80045ee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80045ce:	f7ff fe9d 	bl	800430c <HAL_GetTick>
 80045d2:	4602      	mov	r2, r0
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	1ad3      	subs	r3, r2, r3
 80045d8:	2b05      	cmp	r3, #5
 80045da:	d908      	bls.n	80045ee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2220      	movs	r2, #32
 80045e0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2203      	movs	r2, #3
 80045e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80045ea:	2303      	movs	r3, #3
 80045ec:	e078      	b.n	80046e0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 0301 	and.w	r3, r3, #1
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d1e8      	bne.n	80045ce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004604:	697a      	ldr	r2, [r7, #20]
 8004606:	4b38      	ldr	r3, [pc, #224]	@ (80046e8 <HAL_DMA_Init+0x158>)
 8004608:	4013      	ands	r3, r2
 800460a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	685a      	ldr	r2, [r3, #4]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800461a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	691b      	ldr	r3, [r3, #16]
 8004620:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004626:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	699b      	ldr	r3, [r3, #24]
 800462c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004632:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6a1b      	ldr	r3, [r3, #32]
 8004638:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800463a:	697a      	ldr	r2, [r7, #20]
 800463c:	4313      	orrs	r3, r2
 800463e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004644:	2b04      	cmp	r3, #4
 8004646:	d107      	bne.n	8004658 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004650:	4313      	orrs	r3, r2
 8004652:	697a      	ldr	r2, [r7, #20]
 8004654:	4313      	orrs	r3, r2
 8004656:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	697a      	ldr	r2, [r7, #20]
 800465e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	695b      	ldr	r3, [r3, #20]
 8004666:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	f023 0307 	bic.w	r3, r3, #7
 800466e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004674:	697a      	ldr	r2, [r7, #20]
 8004676:	4313      	orrs	r3, r2
 8004678:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800467e:	2b04      	cmp	r3, #4
 8004680:	d117      	bne.n	80046b2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004686:	697a      	ldr	r2, [r7, #20]
 8004688:	4313      	orrs	r3, r2
 800468a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004690:	2b00      	cmp	r3, #0
 8004692:	d00e      	beq.n	80046b2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f000 fb73 	bl	8004d80 <DMA_CheckFifoParam>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d008      	beq.n	80046b2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2240      	movs	r2, #64	@ 0x40
 80046a4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80046ae:	2301      	movs	r3, #1
 80046b0:	e016      	b.n	80046e0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	697a      	ldr	r2, [r7, #20]
 80046b8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f000 fb2a 	bl	8004d14 <DMA_CalcBaseAndBitshift>
 80046c0:	4603      	mov	r3, r0
 80046c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046c8:	223f      	movs	r2, #63	@ 0x3f
 80046ca:	409a      	lsls	r2, r3
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2201      	movs	r2, #1
 80046da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80046de:	2300      	movs	r3, #0
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3718      	adds	r7, #24
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	f010803f 	.word	0xf010803f

080046ec <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d101      	bne.n	80046fe <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e050      	b.n	80047a0 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004704:	b2db      	uxtb	r3, r3
 8004706:	2b02      	cmp	r3, #2
 8004708:	d101      	bne.n	800470e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800470a:	2302      	movs	r3, #2
 800470c:	e048      	b.n	80047a0 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f022 0201 	bic.w	r2, r2, #1
 800471c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	2200      	movs	r2, #0
 8004724:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	2200      	movs	r2, #0
 800472c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	2200      	movs	r2, #0
 8004734:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	2200      	movs	r2, #0
 800473c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	2200      	movs	r2, #0
 8004744:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	2221      	movs	r2, #33	@ 0x21
 800474c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 fae0 	bl	8004d14 <DMA_CalcBaseAndBitshift>
 8004754:	4603      	mov	r3, r0
 8004756:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800475c:	223f      	movs	r2, #63	@ 0x3f
 800475e:	409a      	lsls	r2, r3
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2200      	movs	r2, #0
 8004774:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2200      	movs	r2, #0
 800477a:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2200      	movs	r2, #0
 8004786:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800479e:	2300      	movs	r3, #0
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3710      	adds	r7, #16
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b086      	sub	sp, #24
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	607a      	str	r2, [r7, #4]
 80047b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047b6:	2300      	movs	r3, #0
 80047b8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047be:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d101      	bne.n	80047ce <HAL_DMA_Start_IT+0x26>
 80047ca:	2302      	movs	r3, #2
 80047cc:	e048      	b.n	8004860 <HAL_DMA_Start_IT+0xb8>
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2201      	movs	r2, #1
 80047d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d137      	bne.n	8004852 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2202      	movs	r2, #2
 80047e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2200      	movs	r2, #0
 80047ee:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	68b9      	ldr	r1, [r7, #8]
 80047f6:	68f8      	ldr	r0, [r7, #12]
 80047f8:	f000 fa5e 	bl	8004cb8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004800:	223f      	movs	r2, #63	@ 0x3f
 8004802:	409a      	lsls	r2, r3
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f042 0216 	orr.w	r2, r2, #22
 8004816:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	695a      	ldr	r2, [r3, #20]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004826:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800482c:	2b00      	cmp	r3, #0
 800482e:	d007      	beq.n	8004840 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f042 0208 	orr.w	r2, r2, #8
 800483e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f042 0201 	orr.w	r2, r2, #1
 800484e:	601a      	str	r2, [r3, #0]
 8004850:	e005      	b.n	800485e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2200      	movs	r2, #0
 8004856:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800485a:	2302      	movs	r3, #2
 800485c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800485e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004860:	4618      	mov	r0, r3
 8004862:	3718      	adds	r7, #24
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}

08004868 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b084      	sub	sp, #16
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004874:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004876:	f7ff fd49 	bl	800430c <HAL_GetTick>
 800487a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004882:	b2db      	uxtb	r3, r3
 8004884:	2b02      	cmp	r3, #2
 8004886:	d008      	beq.n	800489a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2280      	movs	r2, #128	@ 0x80
 800488c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e052      	b.n	8004940 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f022 0216 	bic.w	r2, r2, #22
 80048a8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	695a      	ldr	r2, [r3, #20]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80048b8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d103      	bne.n	80048ca <HAL_DMA_Abort+0x62>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d007      	beq.n	80048da <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f022 0208 	bic.w	r2, r2, #8
 80048d8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f022 0201 	bic.w	r2, r2, #1
 80048e8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80048ea:	e013      	b.n	8004914 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80048ec:	f7ff fd0e 	bl	800430c <HAL_GetTick>
 80048f0:	4602      	mov	r2, r0
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	2b05      	cmp	r3, #5
 80048f8:	d90c      	bls.n	8004914 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2220      	movs	r2, #32
 80048fe:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2203      	movs	r2, #3
 8004904:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8004910:	2303      	movs	r3, #3
 8004912:	e015      	b.n	8004940 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 0301 	and.w	r3, r3, #1
 800491e:	2b00      	cmp	r3, #0
 8004920:	d1e4      	bne.n	80048ec <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004926:	223f      	movs	r2, #63	@ 0x3f
 8004928:	409a      	lsls	r2, r3
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2201      	movs	r2, #1
 8004932:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 800493e:	2300      	movs	r3, #0
}
 8004940:	4618      	mov	r0, r3
 8004942:	3710      	adds	r7, #16
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}

08004948 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004956:	b2db      	uxtb	r3, r3
 8004958:	2b02      	cmp	r3, #2
 800495a:	d004      	beq.n	8004966 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2280      	movs	r2, #128	@ 0x80
 8004960:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e00c      	b.n	8004980 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2205      	movs	r2, #5
 800496a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f022 0201 	bic.w	r2, r2, #1
 800497c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800497e:	2300      	movs	r3, #0
}
 8004980:	4618      	mov	r0, r3
 8004982:	370c      	adds	r7, #12
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b086      	sub	sp, #24
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8004994:	2300      	movs	r3, #0
 8004996:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8004998:	4b8e      	ldr	r3, [pc, #568]	@ (8004bd4 <HAL_DMA_IRQHandler+0x248>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a8e      	ldr	r2, [pc, #568]	@ (8004bd8 <HAL_DMA_IRQHandler+0x24c>)
 800499e:	fba2 2303 	umull	r2, r3, r2, r3
 80049a2:	0a9b      	lsrs	r3, r3, #10
 80049a4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049aa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049b6:	2208      	movs	r2, #8
 80049b8:	409a      	lsls	r2, r3
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	4013      	ands	r3, r2
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d01a      	beq.n	80049f8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 0304 	and.w	r3, r3, #4
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d013      	beq.n	80049f8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f022 0204 	bic.w	r2, r2, #4
 80049de:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049e4:	2208      	movs	r2, #8
 80049e6:	409a      	lsls	r2, r3
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049f0:	f043 0201 	orr.w	r2, r3, #1
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049fc:	2201      	movs	r2, #1
 80049fe:	409a      	lsls	r2, r3
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	4013      	ands	r3, r2
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d012      	beq.n	8004a2e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	695b      	ldr	r3, [r3, #20]
 8004a0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d00b      	beq.n	8004a2e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	409a      	lsls	r2, r3
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a26:	f043 0202 	orr.w	r2, r3, #2
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a32:	2204      	movs	r2, #4
 8004a34:	409a      	lsls	r2, r3
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	4013      	ands	r3, r2
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d012      	beq.n	8004a64 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 0302 	and.w	r3, r3, #2
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d00b      	beq.n	8004a64 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a50:	2204      	movs	r2, #4
 8004a52:	409a      	lsls	r2, r3
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a5c:	f043 0204 	orr.w	r2, r3, #4
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a68:	2210      	movs	r2, #16
 8004a6a:	409a      	lsls	r2, r3
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	4013      	ands	r3, r2
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d043      	beq.n	8004afc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 0308 	and.w	r3, r3, #8
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d03c      	beq.n	8004afc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a86:	2210      	movs	r2, #16
 8004a88:	409a      	lsls	r2, r3
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d018      	beq.n	8004ace <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d108      	bne.n	8004abc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d024      	beq.n	8004afc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	4798      	blx	r3
 8004aba:	e01f      	b.n	8004afc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d01b      	beq.n	8004afc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	4798      	blx	r3
 8004acc:	e016      	b.n	8004afc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d107      	bne.n	8004aec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f022 0208 	bic.w	r2, r2, #8
 8004aea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d003      	beq.n	8004afc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b00:	2220      	movs	r2, #32
 8004b02:	409a      	lsls	r2, r3
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	4013      	ands	r3, r2
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	f000 808f 	beq.w	8004c2c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 0310 	and.w	r3, r3, #16
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	f000 8087 	beq.w	8004c2c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b22:	2220      	movs	r2, #32
 8004b24:	409a      	lsls	r2, r3
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	2b05      	cmp	r3, #5
 8004b34:	d136      	bne.n	8004ba4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f022 0216 	bic.w	r2, r2, #22
 8004b44:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	695a      	ldr	r2, [r3, #20]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004b54:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d103      	bne.n	8004b66 <HAL_DMA_IRQHandler+0x1da>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d007      	beq.n	8004b76 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f022 0208 	bic.w	r2, r2, #8
 8004b74:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b7a:	223f      	movs	r2, #63	@ 0x3f
 8004b7c:	409a      	lsls	r2, r3
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2201      	movs	r2, #1
 8004b86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d07e      	beq.n	8004c98 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	4798      	blx	r3
        }
        return;
 8004ba2:	e079      	b.n	8004c98 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d01d      	beq.n	8004bee <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d10d      	bne.n	8004bdc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d031      	beq.n	8004c2c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	4798      	blx	r3
 8004bd0:	e02c      	b.n	8004c2c <HAL_DMA_IRQHandler+0x2a0>
 8004bd2:	bf00      	nop
 8004bd4:	20000000 	.word	0x20000000
 8004bd8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d023      	beq.n	8004c2c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	4798      	blx	r3
 8004bec:	e01e      	b.n	8004c2c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d10f      	bne.n	8004c1c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f022 0210 	bic.w	r2, r2, #16
 8004c0a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d003      	beq.n	8004c2c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d032      	beq.n	8004c9a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c38:	f003 0301 	and.w	r3, r3, #1
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d022      	beq.n	8004c86 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2205      	movs	r2, #5
 8004c44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f022 0201 	bic.w	r2, r2, #1
 8004c56:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	3301      	adds	r3, #1
 8004c5c:	60bb      	str	r3, [r7, #8]
 8004c5e:	697a      	ldr	r2, [r7, #20]
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d307      	bcc.n	8004c74 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 0301 	and.w	r3, r3, #1
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d1f2      	bne.n	8004c58 <HAL_DMA_IRQHandler+0x2cc>
 8004c72:	e000      	b.n	8004c76 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004c74:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2201      	movs	r2, #1
 8004c7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d005      	beq.n	8004c9a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	4798      	blx	r3
 8004c96:	e000      	b.n	8004c9a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004c98:	bf00      	nop
    }
  }
}
 8004c9a:	3718      	adds	r7, #24
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b083      	sub	sp, #12
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	370c      	adds	r7, #12
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr

08004cb8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b085      	sub	sp, #20
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	60f8      	str	r0, [r7, #12]
 8004cc0:	60b9      	str	r1, [r7, #8]
 8004cc2:	607a      	str	r2, [r7, #4]
 8004cc4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004cd4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	683a      	ldr	r2, [r7, #0]
 8004cdc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	2b40      	cmp	r3, #64	@ 0x40
 8004ce4:	d108      	bne.n	8004cf8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	68ba      	ldr	r2, [r7, #8]
 8004cf4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004cf6:	e007      	b.n	8004d08 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	68ba      	ldr	r2, [r7, #8]
 8004cfe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	60da      	str	r2, [r3, #12]
}
 8004d08:	bf00      	nop
 8004d0a:	3714      	adds	r7, #20
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr

08004d14 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b085      	sub	sp, #20
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	3b10      	subs	r3, #16
 8004d24:	4a13      	ldr	r2, [pc, #76]	@ (8004d74 <DMA_CalcBaseAndBitshift+0x60>)
 8004d26:	fba2 2303 	umull	r2, r3, r2, r3
 8004d2a:	091b      	lsrs	r3, r3, #4
 8004d2c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004d2e:	4a12      	ldr	r2, [pc, #72]	@ (8004d78 <DMA_CalcBaseAndBitshift+0x64>)
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	4413      	add	r3, r2
 8004d34:	781b      	ldrb	r3, [r3, #0]
 8004d36:	461a      	mov	r2, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2b03      	cmp	r3, #3
 8004d40:	d908      	bls.n	8004d54 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	461a      	mov	r2, r3
 8004d48:	4b0c      	ldr	r3, [pc, #48]	@ (8004d7c <DMA_CalcBaseAndBitshift+0x68>)
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	1d1a      	adds	r2, r3, #4
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	659a      	str	r2, [r3, #88]	@ 0x58
 8004d52:	e006      	b.n	8004d62 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	461a      	mov	r2, r3
 8004d5a:	4b08      	ldr	r3, [pc, #32]	@ (8004d7c <DMA_CalcBaseAndBitshift+0x68>)
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3714      	adds	r7, #20
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr
 8004d72:	bf00      	nop
 8004d74:	aaaaaaab 	.word	0xaaaaaaab
 8004d78:	08013f68 	.word	0x08013f68
 8004d7c:	fffffc00 	.word	0xfffffc00

08004d80 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b085      	sub	sp, #20
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d90:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	699b      	ldr	r3, [r3, #24]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d11f      	bne.n	8004dda <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	2b03      	cmp	r3, #3
 8004d9e:	d856      	bhi.n	8004e4e <DMA_CheckFifoParam+0xce>
 8004da0:	a201      	add	r2, pc, #4	@ (adr r2, 8004da8 <DMA_CheckFifoParam+0x28>)
 8004da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004da6:	bf00      	nop
 8004da8:	08004db9 	.word	0x08004db9
 8004dac:	08004dcb 	.word	0x08004dcb
 8004db0:	08004db9 	.word	0x08004db9
 8004db4:	08004e4f 	.word	0x08004e4f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dbc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d046      	beq.n	8004e52 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004dc8:	e043      	b.n	8004e52 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dce:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004dd2:	d140      	bne.n	8004e56 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004dd8:	e03d      	b.n	8004e56 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	699b      	ldr	r3, [r3, #24]
 8004dde:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004de2:	d121      	bne.n	8004e28 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	2b03      	cmp	r3, #3
 8004de8:	d837      	bhi.n	8004e5a <DMA_CheckFifoParam+0xda>
 8004dea:	a201      	add	r2, pc, #4	@ (adr r2, 8004df0 <DMA_CheckFifoParam+0x70>)
 8004dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004df0:	08004e01 	.word	0x08004e01
 8004df4:	08004e07 	.word	0x08004e07
 8004df8:	08004e01 	.word	0x08004e01
 8004dfc:	08004e19 	.word	0x08004e19
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	73fb      	strb	r3, [r7, #15]
      break;
 8004e04:	e030      	b.n	8004e68 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e0a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d025      	beq.n	8004e5e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e16:	e022      	b.n	8004e5e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e1c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004e20:	d11f      	bne.n	8004e62 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004e26:	e01c      	b.n	8004e62 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	2b02      	cmp	r3, #2
 8004e2c:	d903      	bls.n	8004e36 <DMA_CheckFifoParam+0xb6>
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	2b03      	cmp	r3, #3
 8004e32:	d003      	beq.n	8004e3c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004e34:	e018      	b.n	8004e68 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	73fb      	strb	r3, [r7, #15]
      break;
 8004e3a:	e015      	b.n	8004e68 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e40:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d00e      	beq.n	8004e66 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	73fb      	strb	r3, [r7, #15]
      break;
 8004e4c:	e00b      	b.n	8004e66 <DMA_CheckFifoParam+0xe6>
      break;
 8004e4e:	bf00      	nop
 8004e50:	e00a      	b.n	8004e68 <DMA_CheckFifoParam+0xe8>
      break;
 8004e52:	bf00      	nop
 8004e54:	e008      	b.n	8004e68 <DMA_CheckFifoParam+0xe8>
      break;
 8004e56:	bf00      	nop
 8004e58:	e006      	b.n	8004e68 <DMA_CheckFifoParam+0xe8>
      break;
 8004e5a:	bf00      	nop
 8004e5c:	e004      	b.n	8004e68 <DMA_CheckFifoParam+0xe8>
      break;
 8004e5e:	bf00      	nop
 8004e60:	e002      	b.n	8004e68 <DMA_CheckFifoParam+0xe8>
      break;   
 8004e62:	bf00      	nop
 8004e64:	e000      	b.n	8004e68 <DMA_CheckFifoParam+0xe8>
      break;
 8004e66:	bf00      	nop
    }
  } 
  
  return status; 
 8004e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3714      	adds	r7, #20
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr
 8004e76:	bf00      	nop

08004e78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b089      	sub	sp, #36	@ 0x24
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004e82:	2300      	movs	r3, #0
 8004e84:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004e86:	2300      	movs	r3, #0
 8004e88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8004e92:	2300      	movs	r3, #0
 8004e94:	61fb      	str	r3, [r7, #28]
 8004e96:	e175      	b.n	8005184 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004e98:	2201      	movs	r2, #1
 8004e9a:	69fb      	ldr	r3, [r7, #28]
 8004e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	697a      	ldr	r2, [r7, #20]
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8004eac:	693a      	ldr	r2, [r7, #16]
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	f040 8164 	bne.w	800517e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	f003 0303 	and.w	r3, r3, #3
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d005      	beq.n	8004ece <HAL_GPIO_Init+0x56>
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	f003 0303 	and.w	r3, r3, #3
 8004eca:	2b02      	cmp	r3, #2
 8004ecc:	d130      	bne.n	8004f30 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	005b      	lsls	r3, r3, #1
 8004ed8:	2203      	movs	r2, #3
 8004eda:	fa02 f303 	lsl.w	r3, r2, r3
 8004ede:	43db      	mvns	r3, r3
 8004ee0:	69ba      	ldr	r2, [r7, #24]
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	68da      	ldr	r2, [r3, #12]
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	005b      	lsls	r3, r3, #1
 8004eee:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef2:	69ba      	ldr	r2, [r7, #24]
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	69ba      	ldr	r2, [r7, #24]
 8004efc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004f04:	2201      	movs	r2, #1
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	fa02 f303 	lsl.w	r3, r2, r3
 8004f0c:	43db      	mvns	r3, r3
 8004f0e:	69ba      	ldr	r2, [r7, #24]
 8004f10:	4013      	ands	r3, r2
 8004f12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	091b      	lsrs	r3, r3, #4
 8004f1a:	f003 0201 	and.w	r2, r3, #1
 8004f1e:	69fb      	ldr	r3, [r7, #28]
 8004f20:	fa02 f303 	lsl.w	r3, r2, r3
 8004f24:	69ba      	ldr	r2, [r7, #24]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	69ba      	ldr	r2, [r7, #24]
 8004f2e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	f003 0303 	and.w	r3, r3, #3
 8004f38:	2b03      	cmp	r3, #3
 8004f3a:	d017      	beq.n	8004f6c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	005b      	lsls	r3, r3, #1
 8004f46:	2203      	movs	r2, #3
 8004f48:	fa02 f303 	lsl.w	r3, r2, r3
 8004f4c:	43db      	mvns	r3, r3
 8004f4e:	69ba      	ldr	r2, [r7, #24]
 8004f50:	4013      	ands	r3, r2
 8004f52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	689a      	ldr	r2, [r3, #8]
 8004f58:	69fb      	ldr	r3, [r7, #28]
 8004f5a:	005b      	lsls	r3, r3, #1
 8004f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f60:	69ba      	ldr	r2, [r7, #24]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	69ba      	ldr	r2, [r7, #24]
 8004f6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	f003 0303 	and.w	r3, r3, #3
 8004f74:	2b02      	cmp	r3, #2
 8004f76:	d123      	bne.n	8004fc0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004f78:	69fb      	ldr	r3, [r7, #28]
 8004f7a:	08da      	lsrs	r2, r3, #3
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	3208      	adds	r2, #8
 8004f80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004f86:	69fb      	ldr	r3, [r7, #28]
 8004f88:	f003 0307 	and.w	r3, r3, #7
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	220f      	movs	r2, #15
 8004f90:	fa02 f303 	lsl.w	r3, r2, r3
 8004f94:	43db      	mvns	r3, r3
 8004f96:	69ba      	ldr	r2, [r7, #24]
 8004f98:	4013      	ands	r3, r2
 8004f9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	691a      	ldr	r2, [r3, #16]
 8004fa0:	69fb      	ldr	r3, [r7, #28]
 8004fa2:	f003 0307 	and.w	r3, r3, #7
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fac:	69ba      	ldr	r2, [r7, #24]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004fb2:	69fb      	ldr	r3, [r7, #28]
 8004fb4:	08da      	lsrs	r2, r3, #3
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	3208      	adds	r2, #8
 8004fba:	69b9      	ldr	r1, [r7, #24]
 8004fbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004fc6:	69fb      	ldr	r3, [r7, #28]
 8004fc8:	005b      	lsls	r3, r3, #1
 8004fca:	2203      	movs	r2, #3
 8004fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd0:	43db      	mvns	r3, r3
 8004fd2:	69ba      	ldr	r2, [r7, #24]
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	f003 0203 	and.w	r2, r3, #3
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	005b      	lsls	r3, r3, #1
 8004fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe8:	69ba      	ldr	r2, [r7, #24]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	69ba      	ldr	r2, [r7, #24]
 8004ff2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	f000 80be 	beq.w	800517e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005002:	4b66      	ldr	r3, [pc, #408]	@ (800519c <HAL_GPIO_Init+0x324>)
 8005004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005006:	4a65      	ldr	r2, [pc, #404]	@ (800519c <HAL_GPIO_Init+0x324>)
 8005008:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800500c:	6453      	str	r3, [r2, #68]	@ 0x44
 800500e:	4b63      	ldr	r3, [pc, #396]	@ (800519c <HAL_GPIO_Init+0x324>)
 8005010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005012:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005016:	60fb      	str	r3, [r7, #12]
 8005018:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800501a:	4a61      	ldr	r2, [pc, #388]	@ (80051a0 <HAL_GPIO_Init+0x328>)
 800501c:	69fb      	ldr	r3, [r7, #28]
 800501e:	089b      	lsrs	r3, r3, #2
 8005020:	3302      	adds	r3, #2
 8005022:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005026:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	f003 0303 	and.w	r3, r3, #3
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	220f      	movs	r2, #15
 8005032:	fa02 f303 	lsl.w	r3, r2, r3
 8005036:	43db      	mvns	r3, r3
 8005038:	69ba      	ldr	r2, [r7, #24]
 800503a:	4013      	ands	r3, r2
 800503c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a58      	ldr	r2, [pc, #352]	@ (80051a4 <HAL_GPIO_Init+0x32c>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d037      	beq.n	80050b6 <HAL_GPIO_Init+0x23e>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a57      	ldr	r2, [pc, #348]	@ (80051a8 <HAL_GPIO_Init+0x330>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d031      	beq.n	80050b2 <HAL_GPIO_Init+0x23a>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a56      	ldr	r2, [pc, #344]	@ (80051ac <HAL_GPIO_Init+0x334>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d02b      	beq.n	80050ae <HAL_GPIO_Init+0x236>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a55      	ldr	r2, [pc, #340]	@ (80051b0 <HAL_GPIO_Init+0x338>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d025      	beq.n	80050aa <HAL_GPIO_Init+0x232>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a54      	ldr	r2, [pc, #336]	@ (80051b4 <HAL_GPIO_Init+0x33c>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d01f      	beq.n	80050a6 <HAL_GPIO_Init+0x22e>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4a53      	ldr	r2, [pc, #332]	@ (80051b8 <HAL_GPIO_Init+0x340>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d019      	beq.n	80050a2 <HAL_GPIO_Init+0x22a>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	4a52      	ldr	r2, [pc, #328]	@ (80051bc <HAL_GPIO_Init+0x344>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d013      	beq.n	800509e <HAL_GPIO_Init+0x226>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4a51      	ldr	r2, [pc, #324]	@ (80051c0 <HAL_GPIO_Init+0x348>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d00d      	beq.n	800509a <HAL_GPIO_Init+0x222>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	4a50      	ldr	r2, [pc, #320]	@ (80051c4 <HAL_GPIO_Init+0x34c>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d007      	beq.n	8005096 <HAL_GPIO_Init+0x21e>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4a4f      	ldr	r2, [pc, #316]	@ (80051c8 <HAL_GPIO_Init+0x350>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d101      	bne.n	8005092 <HAL_GPIO_Init+0x21a>
 800508e:	2309      	movs	r3, #9
 8005090:	e012      	b.n	80050b8 <HAL_GPIO_Init+0x240>
 8005092:	230a      	movs	r3, #10
 8005094:	e010      	b.n	80050b8 <HAL_GPIO_Init+0x240>
 8005096:	2308      	movs	r3, #8
 8005098:	e00e      	b.n	80050b8 <HAL_GPIO_Init+0x240>
 800509a:	2307      	movs	r3, #7
 800509c:	e00c      	b.n	80050b8 <HAL_GPIO_Init+0x240>
 800509e:	2306      	movs	r3, #6
 80050a0:	e00a      	b.n	80050b8 <HAL_GPIO_Init+0x240>
 80050a2:	2305      	movs	r3, #5
 80050a4:	e008      	b.n	80050b8 <HAL_GPIO_Init+0x240>
 80050a6:	2304      	movs	r3, #4
 80050a8:	e006      	b.n	80050b8 <HAL_GPIO_Init+0x240>
 80050aa:	2303      	movs	r3, #3
 80050ac:	e004      	b.n	80050b8 <HAL_GPIO_Init+0x240>
 80050ae:	2302      	movs	r3, #2
 80050b0:	e002      	b.n	80050b8 <HAL_GPIO_Init+0x240>
 80050b2:	2301      	movs	r3, #1
 80050b4:	e000      	b.n	80050b8 <HAL_GPIO_Init+0x240>
 80050b6:	2300      	movs	r3, #0
 80050b8:	69fa      	ldr	r2, [r7, #28]
 80050ba:	f002 0203 	and.w	r2, r2, #3
 80050be:	0092      	lsls	r2, r2, #2
 80050c0:	4093      	lsls	r3, r2
 80050c2:	69ba      	ldr	r2, [r7, #24]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80050c8:	4935      	ldr	r1, [pc, #212]	@ (80051a0 <HAL_GPIO_Init+0x328>)
 80050ca:	69fb      	ldr	r3, [r7, #28]
 80050cc:	089b      	lsrs	r3, r3, #2
 80050ce:	3302      	adds	r3, #2
 80050d0:	69ba      	ldr	r2, [r7, #24]
 80050d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80050d6:	4b3d      	ldr	r3, [pc, #244]	@ (80051cc <HAL_GPIO_Init+0x354>)
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	43db      	mvns	r3, r3
 80050e0:	69ba      	ldr	r2, [r7, #24]
 80050e2:	4013      	ands	r3, r2
 80050e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d003      	beq.n	80050fa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80050f2:	69ba      	ldr	r2, [r7, #24]
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80050fa:	4a34      	ldr	r2, [pc, #208]	@ (80051cc <HAL_GPIO_Init+0x354>)
 80050fc:	69bb      	ldr	r3, [r7, #24]
 80050fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005100:	4b32      	ldr	r3, [pc, #200]	@ (80051cc <HAL_GPIO_Init+0x354>)
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	43db      	mvns	r3, r3
 800510a:	69ba      	ldr	r2, [r7, #24]
 800510c:	4013      	ands	r3, r2
 800510e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005118:	2b00      	cmp	r3, #0
 800511a:	d003      	beq.n	8005124 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800511c:	69ba      	ldr	r2, [r7, #24]
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	4313      	orrs	r3, r2
 8005122:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005124:	4a29      	ldr	r2, [pc, #164]	@ (80051cc <HAL_GPIO_Init+0x354>)
 8005126:	69bb      	ldr	r3, [r7, #24]
 8005128:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800512a:	4b28      	ldr	r3, [pc, #160]	@ (80051cc <HAL_GPIO_Init+0x354>)
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	43db      	mvns	r3, r3
 8005134:	69ba      	ldr	r2, [r7, #24]
 8005136:	4013      	ands	r3, r2
 8005138:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005142:	2b00      	cmp	r3, #0
 8005144:	d003      	beq.n	800514e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005146:	69ba      	ldr	r2, [r7, #24]
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	4313      	orrs	r3, r2
 800514c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800514e:	4a1f      	ldr	r2, [pc, #124]	@ (80051cc <HAL_GPIO_Init+0x354>)
 8005150:	69bb      	ldr	r3, [r7, #24]
 8005152:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005154:	4b1d      	ldr	r3, [pc, #116]	@ (80051cc <HAL_GPIO_Init+0x354>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	43db      	mvns	r3, r3
 800515e:	69ba      	ldr	r2, [r7, #24]
 8005160:	4013      	ands	r3, r2
 8005162:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800516c:	2b00      	cmp	r3, #0
 800516e:	d003      	beq.n	8005178 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005170:	69ba      	ldr	r2, [r7, #24]
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	4313      	orrs	r3, r2
 8005176:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005178:	4a14      	ldr	r2, [pc, #80]	@ (80051cc <HAL_GPIO_Init+0x354>)
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800517e:	69fb      	ldr	r3, [r7, #28]
 8005180:	3301      	adds	r3, #1
 8005182:	61fb      	str	r3, [r7, #28]
 8005184:	69fb      	ldr	r3, [r7, #28]
 8005186:	2b0f      	cmp	r3, #15
 8005188:	f67f ae86 	bls.w	8004e98 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800518c:	bf00      	nop
 800518e:	bf00      	nop
 8005190:	3724      	adds	r7, #36	@ 0x24
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr
 800519a:	bf00      	nop
 800519c:	40023800 	.word	0x40023800
 80051a0:	40013800 	.word	0x40013800
 80051a4:	40020000 	.word	0x40020000
 80051a8:	40020400 	.word	0x40020400
 80051ac:	40020800 	.word	0x40020800
 80051b0:	40020c00 	.word	0x40020c00
 80051b4:	40021000 	.word	0x40021000
 80051b8:	40021400 	.word	0x40021400
 80051bc:	40021800 	.word	0x40021800
 80051c0:	40021c00 	.word	0x40021c00
 80051c4:	40022000 	.word	0x40022000
 80051c8:	40022400 	.word	0x40022400
 80051cc:	40013c00 	.word	0x40013c00

080051d0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b087      	sub	sp, #28
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 80051da:	2300      	movs	r3, #0
 80051dc:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 80051de:	2300      	movs	r3, #0
 80051e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 80051e2:	2300      	movs	r3, #0
 80051e4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80051e6:	2300      	movs	r3, #0
 80051e8:	617b      	str	r3, [r7, #20]
 80051ea:	e0d9      	b.n	80053a0 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80051ec:	2201      	movs	r2, #1
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	fa02 f303 	lsl.w	r3, r2, r3
 80051f4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80051f6:	683a      	ldr	r2, [r7, #0]
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	4013      	ands	r3, r2
 80051fc:	60fb      	str	r3, [r7, #12]

    if (iocurrent == ioposition)
 80051fe:	68fa      	ldr	r2, [r7, #12]
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	429a      	cmp	r2, r3
 8005204:	f040 80c9 	bne.w	800539a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8005208:	4a6b      	ldr	r2, [pc, #428]	@ (80053b8 <HAL_GPIO_DeInit+0x1e8>)
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	089b      	lsrs	r3, r3, #2
 800520e:	3302      	adds	r3, #2
 8005210:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005214:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	f003 0303 	and.w	r3, r3, #3
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	220f      	movs	r2, #15
 8005220:	fa02 f303 	lsl.w	r3, r2, r3
 8005224:	68ba      	ldr	r2, [r7, #8]
 8005226:	4013      	ands	r3, r2
 8005228:	60bb      	str	r3, [r7, #8]
      if (tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4a63      	ldr	r2, [pc, #396]	@ (80053bc <HAL_GPIO_DeInit+0x1ec>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d037      	beq.n	80052a2 <HAL_GPIO_DeInit+0xd2>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a62      	ldr	r2, [pc, #392]	@ (80053c0 <HAL_GPIO_DeInit+0x1f0>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d031      	beq.n	800529e <HAL_GPIO_DeInit+0xce>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4a61      	ldr	r2, [pc, #388]	@ (80053c4 <HAL_GPIO_DeInit+0x1f4>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d02b      	beq.n	800529a <HAL_GPIO_DeInit+0xca>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4a60      	ldr	r2, [pc, #384]	@ (80053c8 <HAL_GPIO_DeInit+0x1f8>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d025      	beq.n	8005296 <HAL_GPIO_DeInit+0xc6>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a5f      	ldr	r2, [pc, #380]	@ (80053cc <HAL_GPIO_DeInit+0x1fc>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d01f      	beq.n	8005292 <HAL_GPIO_DeInit+0xc2>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4a5e      	ldr	r2, [pc, #376]	@ (80053d0 <HAL_GPIO_DeInit+0x200>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d019      	beq.n	800528e <HAL_GPIO_DeInit+0xbe>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4a5d      	ldr	r2, [pc, #372]	@ (80053d4 <HAL_GPIO_DeInit+0x204>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d013      	beq.n	800528a <HAL_GPIO_DeInit+0xba>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4a5c      	ldr	r2, [pc, #368]	@ (80053d8 <HAL_GPIO_DeInit+0x208>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d00d      	beq.n	8005286 <HAL_GPIO_DeInit+0xb6>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4a5b      	ldr	r2, [pc, #364]	@ (80053dc <HAL_GPIO_DeInit+0x20c>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d007      	beq.n	8005282 <HAL_GPIO_DeInit+0xb2>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a5a      	ldr	r2, [pc, #360]	@ (80053e0 <HAL_GPIO_DeInit+0x210>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d101      	bne.n	800527e <HAL_GPIO_DeInit+0xae>
 800527a:	2309      	movs	r3, #9
 800527c:	e012      	b.n	80052a4 <HAL_GPIO_DeInit+0xd4>
 800527e:	230a      	movs	r3, #10
 8005280:	e010      	b.n	80052a4 <HAL_GPIO_DeInit+0xd4>
 8005282:	2308      	movs	r3, #8
 8005284:	e00e      	b.n	80052a4 <HAL_GPIO_DeInit+0xd4>
 8005286:	2307      	movs	r3, #7
 8005288:	e00c      	b.n	80052a4 <HAL_GPIO_DeInit+0xd4>
 800528a:	2306      	movs	r3, #6
 800528c:	e00a      	b.n	80052a4 <HAL_GPIO_DeInit+0xd4>
 800528e:	2305      	movs	r3, #5
 8005290:	e008      	b.n	80052a4 <HAL_GPIO_DeInit+0xd4>
 8005292:	2304      	movs	r3, #4
 8005294:	e006      	b.n	80052a4 <HAL_GPIO_DeInit+0xd4>
 8005296:	2303      	movs	r3, #3
 8005298:	e004      	b.n	80052a4 <HAL_GPIO_DeInit+0xd4>
 800529a:	2302      	movs	r3, #2
 800529c:	e002      	b.n	80052a4 <HAL_GPIO_DeInit+0xd4>
 800529e:	2301      	movs	r3, #1
 80052a0:	e000      	b.n	80052a4 <HAL_GPIO_DeInit+0xd4>
 80052a2:	2300      	movs	r3, #0
 80052a4:	697a      	ldr	r2, [r7, #20]
 80052a6:	f002 0203 	and.w	r2, r2, #3
 80052aa:	0092      	lsls	r2, r2, #2
 80052ac:	4093      	lsls	r3, r2
 80052ae:	68ba      	ldr	r2, [r7, #8]
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d132      	bne.n	800531a <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80052b4:	4b4b      	ldr	r3, [pc, #300]	@ (80053e4 <HAL_GPIO_DeInit+0x214>)
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	43db      	mvns	r3, r3
 80052bc:	4949      	ldr	r1, [pc, #292]	@ (80053e4 <HAL_GPIO_DeInit+0x214>)
 80052be:	4013      	ands	r3, r2
 80052c0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80052c2:	4b48      	ldr	r3, [pc, #288]	@ (80053e4 <HAL_GPIO_DeInit+0x214>)
 80052c4:	685a      	ldr	r2, [r3, #4]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	43db      	mvns	r3, r3
 80052ca:	4946      	ldr	r1, [pc, #280]	@ (80053e4 <HAL_GPIO_DeInit+0x214>)
 80052cc:	4013      	ands	r3, r2
 80052ce:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80052d0:	4b44      	ldr	r3, [pc, #272]	@ (80053e4 <HAL_GPIO_DeInit+0x214>)
 80052d2:	68da      	ldr	r2, [r3, #12]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	43db      	mvns	r3, r3
 80052d8:	4942      	ldr	r1, [pc, #264]	@ (80053e4 <HAL_GPIO_DeInit+0x214>)
 80052da:	4013      	ands	r3, r2
 80052dc:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80052de:	4b41      	ldr	r3, [pc, #260]	@ (80053e4 <HAL_GPIO_DeInit+0x214>)
 80052e0:	689a      	ldr	r2, [r3, #8]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	43db      	mvns	r3, r3
 80052e6:	493f      	ldr	r1, [pc, #252]	@ (80053e4 <HAL_GPIO_DeInit+0x214>)
 80052e8:	4013      	ands	r3, r2
 80052ea:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	f003 0303 	and.w	r3, r3, #3
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	220f      	movs	r2, #15
 80052f6:	fa02 f303 	lsl.w	r3, r2, r3
 80052fa:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 80052fc:	4a2e      	ldr	r2, [pc, #184]	@ (80053b8 <HAL_GPIO_DeInit+0x1e8>)
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	089b      	lsrs	r3, r3, #2
 8005302:	3302      	adds	r3, #2
 8005304:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	43da      	mvns	r2, r3
 800530c:	482a      	ldr	r0, [pc, #168]	@ (80053b8 <HAL_GPIO_DeInit+0x1e8>)
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	089b      	lsrs	r3, r3, #2
 8005312:	400a      	ands	r2, r1
 8005314:	3302      	adds	r3, #2
 8005316:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	005b      	lsls	r3, r3, #1
 8005322:	2103      	movs	r1, #3
 8005324:	fa01 f303 	lsl.w	r3, r1, r3
 8005328:	43db      	mvns	r3, r3
 800532a:	401a      	ands	r2, r3
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	08da      	lsrs	r2, r3, #3
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	3208      	adds	r2, #8
 8005338:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	f003 0307 	and.w	r3, r3, #7
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	220f      	movs	r2, #15
 8005346:	fa02 f303 	lsl.w	r3, r2, r3
 800534a:	43db      	mvns	r3, r3
 800534c:	697a      	ldr	r2, [r7, #20]
 800534e:	08d2      	lsrs	r2, r2, #3
 8005350:	4019      	ands	r1, r3
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	3208      	adds	r2, #8
 8005356:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	68da      	ldr	r2, [r3, #12]
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	005b      	lsls	r3, r3, #1
 8005362:	2103      	movs	r1, #3
 8005364:	fa01 f303 	lsl.w	r3, r1, r3
 8005368:	43db      	mvns	r3, r3
 800536a:	401a      	ands	r2, r3
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	685a      	ldr	r2, [r3, #4]
 8005374:	2101      	movs	r1, #1
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	fa01 f303 	lsl.w	r3, r1, r3
 800537c:	43db      	mvns	r3, r3
 800537e:	401a      	ands	r2, r3
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	689a      	ldr	r2, [r3, #8]
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	005b      	lsls	r3, r3, #1
 800538c:	2103      	movs	r1, #3
 800538e:	fa01 f303 	lsl.w	r3, r1, r3
 8005392:	43db      	mvns	r3, r3
 8005394:	401a      	ands	r2, r3
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	609a      	str	r2, [r3, #8]
  for (position = 0; position < GPIO_NUMBER; position++)
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	3301      	adds	r3, #1
 800539e:	617b      	str	r3, [r7, #20]
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	2b0f      	cmp	r3, #15
 80053a4:	f67f af22 	bls.w	80051ec <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80053a8:	bf00      	nop
 80053aa:	bf00      	nop
 80053ac:	371c      	adds	r7, #28
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr
 80053b6:	bf00      	nop
 80053b8:	40013800 	.word	0x40013800
 80053bc:	40020000 	.word	0x40020000
 80053c0:	40020400 	.word	0x40020400
 80053c4:	40020800 	.word	0x40020800
 80053c8:	40020c00 	.word	0x40020c00
 80053cc:	40021000 	.word	0x40021000
 80053d0:	40021400 	.word	0x40021400
 80053d4:	40021800 	.word	0x40021800
 80053d8:	40021c00 	.word	0x40021c00
 80053dc:	40022000 	.word	0x40022000
 80053e0:	40022400 	.word	0x40022400
 80053e4:	40013c00 	.word	0x40013c00

080053e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b085      	sub	sp, #20
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	460b      	mov	r3, r1
 80053f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	691a      	ldr	r2, [r3, #16]
 80053f8:	887b      	ldrh	r3, [r7, #2]
 80053fa:	4013      	ands	r3, r2
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d002      	beq.n	8005406 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005400:	2301      	movs	r3, #1
 8005402:	73fb      	strb	r3, [r7, #15]
 8005404:	e001      	b.n	800540a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005406:	2300      	movs	r3, #0
 8005408:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800540a:	7bfb      	ldrb	r3, [r7, #15]
}
 800540c:	4618      	mov	r0, r3
 800540e:	3714      	adds	r7, #20
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr

08005418 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005418:	b480      	push	{r7}
 800541a:	b083      	sub	sp, #12
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	460b      	mov	r3, r1
 8005422:	807b      	strh	r3, [r7, #2]
 8005424:	4613      	mov	r3, r2
 8005426:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005428:	787b      	ldrb	r3, [r7, #1]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d003      	beq.n	8005436 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800542e:	887a      	ldrh	r2, [r7, #2]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005434:	e003      	b.n	800543e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005436:	887b      	ldrh	r3, [r7, #2]
 8005438:	041a      	lsls	r2, r3, #16
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	619a      	str	r2, [r3, #24]
}
 800543e:	bf00      	nop
 8005440:	370c      	adds	r7, #12
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr

0800544a <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800544a:	b480      	push	{r7}
 800544c:	b085      	sub	sp, #20
 800544e:	af00      	add	r7, sp, #0
 8005450:	6078      	str	r0, [r7, #4]
 8005452:	460b      	mov	r3, r1
 8005454:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	695b      	ldr	r3, [r3, #20]
 800545a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800545c:	887a      	ldrh	r2, [r7, #2]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	4013      	ands	r3, r2
 8005462:	041a      	lsls	r2, r3, #16
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	43d9      	mvns	r1, r3
 8005468:	887b      	ldrh	r3, [r7, #2]
 800546a:	400b      	ands	r3, r1
 800546c:	431a      	orrs	r2, r3
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	619a      	str	r2, [r3, #24]
}
 8005472:	bf00      	nop
 8005474:	3714      	adds	r7, #20
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr
	...

08005480 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b082      	sub	sp, #8
 8005484:	af00      	add	r7, sp, #0
 8005486:	4603      	mov	r3, r0
 8005488:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800548a:	4b08      	ldr	r3, [pc, #32]	@ (80054ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800548c:	695a      	ldr	r2, [r3, #20]
 800548e:	88fb      	ldrh	r3, [r7, #6]
 8005490:	4013      	ands	r3, r2
 8005492:	2b00      	cmp	r3, #0
 8005494:	d006      	beq.n	80054a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005496:	4a05      	ldr	r2, [pc, #20]	@ (80054ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005498:	88fb      	ldrh	r3, [r7, #6]
 800549a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800549c:	88fb      	ldrh	r3, [r7, #6]
 800549e:	4618      	mov	r0, r3
 80054a0:	f7fc f8be 	bl	8001620 <HAL_GPIO_EXTI_Callback>
  }
}
 80054a4:	bf00      	nop
 80054a6:	3708      	adds	r7, #8
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}
 80054ac:	40013c00 	.word	0x40013c00

080054b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b082      	sub	sp, #8
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d101      	bne.n	80054c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	e08b      	b.n	80055da <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d106      	bne.n	80054dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f000 f8b5 	bl	8005646 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2224      	movs	r2, #36	@ 0x24
 80054e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f022 0201 	bic.w	r2, r2, #1
 80054f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	685a      	ldr	r2, [r3, #4]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005500:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	689a      	ldr	r2, [r3, #8]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005510:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	2b01      	cmp	r3, #1
 8005518:	d107      	bne.n	800552a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	689a      	ldr	r2, [r3, #8]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005526:	609a      	str	r2, [r3, #8]
 8005528:	e006      	b.n	8005538 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	689a      	ldr	r2, [r3, #8]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005536:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	68db      	ldr	r3, [r3, #12]
 800553c:	2b02      	cmp	r3, #2
 800553e:	d108      	bne.n	8005552 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	685a      	ldr	r2, [r3, #4]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800554e:	605a      	str	r2, [r3, #4]
 8005550:	e007      	b.n	8005562 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	685a      	ldr	r2, [r3, #4]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005560:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	6859      	ldr	r1, [r3, #4]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	4b1d      	ldr	r3, [pc, #116]	@ (80055e4 <HAL_I2C_Init+0x134>)
 800556e:	430b      	orrs	r3, r1
 8005570:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	68da      	ldr	r2, [r3, #12]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005580:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	691a      	ldr	r2, [r3, #16]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	695b      	ldr	r3, [r3, #20]
 800558a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	699b      	ldr	r3, [r3, #24]
 8005592:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	430a      	orrs	r2, r1
 800559a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	69d9      	ldr	r1, [r3, #28]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6a1a      	ldr	r2, [r3, #32]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	430a      	orrs	r2, r1
 80055aa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f042 0201 	orr.w	r2, r2, #1
 80055ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2200      	movs	r2, #0
 80055c0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2220      	movs	r2, #32
 80055c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2200      	movs	r2, #0
 80055ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2200      	movs	r2, #0
 80055d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80055d8:	2300      	movs	r3, #0
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3708      	adds	r7, #8
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop
 80055e4:	02008000 	.word	0x02008000

080055e8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b082      	sub	sp, #8
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d101      	bne.n	80055fa <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	e021      	b.n	800563e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2224      	movs	r2, #36	@ 0x24
 80055fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f022 0201 	bic.w	r2, r2, #1
 8005610:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f000 f821 	bl	800565a <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2200      	movs	r2, #0
 800561c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2200      	movs	r2, #0
 8005622:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2200      	movs	r2, #0
 800562a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2200      	movs	r2, #0
 8005630:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2200      	movs	r2, #0
 8005638:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800563c:	2300      	movs	r3, #0
}
 800563e:	4618      	mov	r0, r3
 8005640:	3708      	adds	r7, #8
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}

08005646 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8005646:	b480      	push	{r7}
 8005648:	b083      	sub	sp, #12
 800564a:	af00      	add	r7, sp, #0
 800564c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800564e:	bf00      	nop
 8005650:	370c      	adds	r7, #12
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr

0800565a <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800565a:	b480      	push	{r7}
 800565c:	b083      	sub	sp, #12
 800565e:	af00      	add	r7, sp, #0
 8005660:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8005662:	bf00      	nop
 8005664:	370c      	adds	r7, #12
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr
	...

08005670 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b088      	sub	sp, #32
 8005674:	af02      	add	r7, sp, #8
 8005676:	60f8      	str	r0, [r7, #12]
 8005678:	4608      	mov	r0, r1
 800567a:	4611      	mov	r1, r2
 800567c:	461a      	mov	r2, r3
 800567e:	4603      	mov	r3, r0
 8005680:	817b      	strh	r3, [r7, #10]
 8005682:	460b      	mov	r3, r1
 8005684:	813b      	strh	r3, [r7, #8]
 8005686:	4613      	mov	r3, r2
 8005688:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005690:	b2db      	uxtb	r3, r3
 8005692:	2b20      	cmp	r3, #32
 8005694:	f040 80f9 	bne.w	800588a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005698:	6a3b      	ldr	r3, [r7, #32]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d002      	beq.n	80056a4 <HAL_I2C_Mem_Write+0x34>
 800569e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d105      	bne.n	80056b0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80056aa:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	e0ed      	b.n	800588c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d101      	bne.n	80056be <HAL_I2C_Mem_Write+0x4e>
 80056ba:	2302      	movs	r3, #2
 80056bc:	e0e6      	b.n	800588c <HAL_I2C_Mem_Write+0x21c>
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2201      	movs	r2, #1
 80056c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80056c6:	f7fe fe21 	bl	800430c <HAL_GetTick>
 80056ca:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	9300      	str	r3, [sp, #0]
 80056d0:	2319      	movs	r3, #25
 80056d2:	2201      	movs	r2, #1
 80056d4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80056d8:	68f8      	ldr	r0, [r7, #12]
 80056da:	f000 fad1 	bl	8005c80 <I2C_WaitOnFlagUntilTimeout>
 80056de:	4603      	mov	r3, r0
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d001      	beq.n	80056e8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	e0d1      	b.n	800588c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2221      	movs	r2, #33	@ 0x21
 80056ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2240      	movs	r2, #64	@ 0x40
 80056f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2200      	movs	r2, #0
 80056fc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	6a3a      	ldr	r2, [r7, #32]
 8005702:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005708:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2200      	movs	r2, #0
 800570e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005710:	88f8      	ldrh	r0, [r7, #6]
 8005712:	893a      	ldrh	r2, [r7, #8]
 8005714:	8979      	ldrh	r1, [r7, #10]
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	9301      	str	r3, [sp, #4]
 800571a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800571c:	9300      	str	r3, [sp, #0]
 800571e:	4603      	mov	r3, r0
 8005720:	68f8      	ldr	r0, [r7, #12]
 8005722:	f000 f9e1 	bl	8005ae8 <I2C_RequestMemoryWrite>
 8005726:	4603      	mov	r3, r0
 8005728:	2b00      	cmp	r3, #0
 800572a:	d005      	beq.n	8005738 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2200      	movs	r2, #0
 8005730:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005734:	2301      	movs	r3, #1
 8005736:	e0a9      	b.n	800588c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800573c:	b29b      	uxth	r3, r3
 800573e:	2bff      	cmp	r3, #255	@ 0xff
 8005740:	d90e      	bls.n	8005760 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	22ff      	movs	r2, #255	@ 0xff
 8005746:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800574c:	b2da      	uxtb	r2, r3
 800574e:	8979      	ldrh	r1, [r7, #10]
 8005750:	2300      	movs	r3, #0
 8005752:	9300      	str	r3, [sp, #0]
 8005754:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005758:	68f8      	ldr	r0, [r7, #12]
 800575a:	f000 fc55 	bl	8006008 <I2C_TransferConfig>
 800575e:	e00f      	b.n	8005780 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005764:	b29a      	uxth	r2, r3
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800576e:	b2da      	uxtb	r2, r3
 8005770:	8979      	ldrh	r1, [r7, #10]
 8005772:	2300      	movs	r3, #0
 8005774:	9300      	str	r3, [sp, #0]
 8005776:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800577a:	68f8      	ldr	r0, [r7, #12]
 800577c:	f000 fc44 	bl	8006008 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005780:	697a      	ldr	r2, [r7, #20]
 8005782:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005784:	68f8      	ldr	r0, [r7, #12]
 8005786:	f000 fad4 	bl	8005d32 <I2C_WaitOnTXISFlagUntilTimeout>
 800578a:	4603      	mov	r3, r0
 800578c:	2b00      	cmp	r3, #0
 800578e:	d001      	beq.n	8005794 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	e07b      	b.n	800588c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005798:	781a      	ldrb	r2, [r3, #0]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057a4:	1c5a      	adds	r2, r3, #1
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	3b01      	subs	r3, #1
 80057b2:	b29a      	uxth	r2, r3
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057bc:	3b01      	subs	r3, #1
 80057be:	b29a      	uxth	r2, r3
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d034      	beq.n	8005838 <HAL_I2C_Mem_Write+0x1c8>
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d130      	bne.n	8005838 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	9300      	str	r3, [sp, #0]
 80057da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057dc:	2200      	movs	r2, #0
 80057de:	2180      	movs	r1, #128	@ 0x80
 80057e0:	68f8      	ldr	r0, [r7, #12]
 80057e2:	f000 fa4d 	bl	8005c80 <I2C_WaitOnFlagUntilTimeout>
 80057e6:	4603      	mov	r3, r0
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d001      	beq.n	80057f0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	e04d      	b.n	800588c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	2bff      	cmp	r3, #255	@ 0xff
 80057f8:	d90e      	bls.n	8005818 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	22ff      	movs	r2, #255	@ 0xff
 80057fe:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005804:	b2da      	uxtb	r2, r3
 8005806:	8979      	ldrh	r1, [r7, #10]
 8005808:	2300      	movs	r3, #0
 800580a:	9300      	str	r3, [sp, #0]
 800580c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005810:	68f8      	ldr	r0, [r7, #12]
 8005812:	f000 fbf9 	bl	8006008 <I2C_TransferConfig>
 8005816:	e00f      	b.n	8005838 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800581c:	b29a      	uxth	r2, r3
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005826:	b2da      	uxtb	r2, r3
 8005828:	8979      	ldrh	r1, [r7, #10]
 800582a:	2300      	movs	r3, #0
 800582c:	9300      	str	r3, [sp, #0]
 800582e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005832:	68f8      	ldr	r0, [r7, #12]
 8005834:	f000 fbe8 	bl	8006008 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800583c:	b29b      	uxth	r3, r3
 800583e:	2b00      	cmp	r3, #0
 8005840:	d19e      	bne.n	8005780 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005842:	697a      	ldr	r2, [r7, #20]
 8005844:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005846:	68f8      	ldr	r0, [r7, #12]
 8005848:	f000 faba 	bl	8005dc0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800584c:	4603      	mov	r3, r0
 800584e:	2b00      	cmp	r3, #0
 8005850:	d001      	beq.n	8005856 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	e01a      	b.n	800588c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	2220      	movs	r2, #32
 800585c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	6859      	ldr	r1, [r3, #4]
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	4b0a      	ldr	r3, [pc, #40]	@ (8005894 <HAL_I2C_Mem_Write+0x224>)
 800586a:	400b      	ands	r3, r1
 800586c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2220      	movs	r2, #32
 8005872:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2200      	movs	r2, #0
 800587a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2200      	movs	r2, #0
 8005882:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005886:	2300      	movs	r3, #0
 8005888:	e000      	b.n	800588c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800588a:	2302      	movs	r3, #2
  }
}
 800588c:	4618      	mov	r0, r3
 800588e:	3718      	adds	r7, #24
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}
 8005894:	fe00e800 	.word	0xfe00e800

08005898 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b088      	sub	sp, #32
 800589c:	af02      	add	r7, sp, #8
 800589e:	60f8      	str	r0, [r7, #12]
 80058a0:	4608      	mov	r0, r1
 80058a2:	4611      	mov	r1, r2
 80058a4:	461a      	mov	r2, r3
 80058a6:	4603      	mov	r3, r0
 80058a8:	817b      	strh	r3, [r7, #10]
 80058aa:	460b      	mov	r3, r1
 80058ac:	813b      	strh	r3, [r7, #8]
 80058ae:	4613      	mov	r3, r2
 80058b0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058b8:	b2db      	uxtb	r3, r3
 80058ba:	2b20      	cmp	r3, #32
 80058bc:	f040 80fd 	bne.w	8005aba <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80058c0:	6a3b      	ldr	r3, [r7, #32]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d002      	beq.n	80058cc <HAL_I2C_Mem_Read+0x34>
 80058c6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d105      	bne.n	80058d8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80058d2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80058d4:	2301      	movs	r3, #1
 80058d6:	e0f1      	b.n	8005abc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d101      	bne.n	80058e6 <HAL_I2C_Mem_Read+0x4e>
 80058e2:	2302      	movs	r3, #2
 80058e4:	e0ea      	b.n	8005abc <HAL_I2C_Mem_Read+0x224>
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2201      	movs	r2, #1
 80058ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80058ee:	f7fe fd0d 	bl	800430c <HAL_GetTick>
 80058f2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	9300      	str	r3, [sp, #0]
 80058f8:	2319      	movs	r3, #25
 80058fa:	2201      	movs	r2, #1
 80058fc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005900:	68f8      	ldr	r0, [r7, #12]
 8005902:	f000 f9bd 	bl	8005c80 <I2C_WaitOnFlagUntilTimeout>
 8005906:	4603      	mov	r3, r0
 8005908:	2b00      	cmp	r3, #0
 800590a:	d001      	beq.n	8005910 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	e0d5      	b.n	8005abc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2222      	movs	r2, #34	@ 0x22
 8005914:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2240      	movs	r2, #64	@ 0x40
 800591c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2200      	movs	r2, #0
 8005924:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	6a3a      	ldr	r2, [r7, #32]
 800592a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005930:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2200      	movs	r2, #0
 8005936:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005938:	88f8      	ldrh	r0, [r7, #6]
 800593a:	893a      	ldrh	r2, [r7, #8]
 800593c:	8979      	ldrh	r1, [r7, #10]
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	9301      	str	r3, [sp, #4]
 8005942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005944:	9300      	str	r3, [sp, #0]
 8005946:	4603      	mov	r3, r0
 8005948:	68f8      	ldr	r0, [r7, #12]
 800594a:	f000 f921 	bl	8005b90 <I2C_RequestMemoryRead>
 800594e:	4603      	mov	r3, r0
 8005950:	2b00      	cmp	r3, #0
 8005952:	d005      	beq.n	8005960 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2200      	movs	r2, #0
 8005958:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800595c:	2301      	movs	r3, #1
 800595e:	e0ad      	b.n	8005abc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005964:	b29b      	uxth	r3, r3
 8005966:	2bff      	cmp	r3, #255	@ 0xff
 8005968:	d90e      	bls.n	8005988 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2201      	movs	r2, #1
 800596e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005974:	b2da      	uxtb	r2, r3
 8005976:	8979      	ldrh	r1, [r7, #10]
 8005978:	4b52      	ldr	r3, [pc, #328]	@ (8005ac4 <HAL_I2C_Mem_Read+0x22c>)
 800597a:	9300      	str	r3, [sp, #0]
 800597c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005980:	68f8      	ldr	r0, [r7, #12]
 8005982:	f000 fb41 	bl	8006008 <I2C_TransferConfig>
 8005986:	e00f      	b.n	80059a8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800598c:	b29a      	uxth	r2, r3
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005996:	b2da      	uxtb	r2, r3
 8005998:	8979      	ldrh	r1, [r7, #10]
 800599a:	4b4a      	ldr	r3, [pc, #296]	@ (8005ac4 <HAL_I2C_Mem_Read+0x22c>)
 800599c:	9300      	str	r3, [sp, #0]
 800599e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80059a2:	68f8      	ldr	r0, [r7, #12]
 80059a4:	f000 fb30 	bl	8006008 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	9300      	str	r3, [sp, #0]
 80059ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059ae:	2200      	movs	r2, #0
 80059b0:	2104      	movs	r1, #4
 80059b2:	68f8      	ldr	r0, [r7, #12]
 80059b4:	f000 f964 	bl	8005c80 <I2C_WaitOnFlagUntilTimeout>
 80059b8:	4603      	mov	r3, r0
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d001      	beq.n	80059c2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	e07c      	b.n	8005abc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059cc:	b2d2      	uxtb	r2, r2
 80059ce:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059d4:	1c5a      	adds	r2, r3, #1
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059de:	3b01      	subs	r3, #1
 80059e0:	b29a      	uxth	r2, r3
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	3b01      	subs	r3, #1
 80059ee:	b29a      	uxth	r2, r3
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d034      	beq.n	8005a68 <HAL_I2C_Mem_Read+0x1d0>
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d130      	bne.n	8005a68 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	9300      	str	r3, [sp, #0]
 8005a0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	2180      	movs	r1, #128	@ 0x80
 8005a10:	68f8      	ldr	r0, [r7, #12]
 8005a12:	f000 f935 	bl	8005c80 <I2C_WaitOnFlagUntilTimeout>
 8005a16:	4603      	mov	r3, r0
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d001      	beq.n	8005a20 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	e04d      	b.n	8005abc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	2bff      	cmp	r3, #255	@ 0xff
 8005a28:	d90e      	bls.n	8005a48 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a34:	b2da      	uxtb	r2, r3
 8005a36:	8979      	ldrh	r1, [r7, #10]
 8005a38:	2300      	movs	r3, #0
 8005a3a:	9300      	str	r3, [sp, #0]
 8005a3c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005a40:	68f8      	ldr	r0, [r7, #12]
 8005a42:	f000 fae1 	bl	8006008 <I2C_TransferConfig>
 8005a46:	e00f      	b.n	8005a68 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a4c:	b29a      	uxth	r2, r3
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a56:	b2da      	uxtb	r2, r3
 8005a58:	8979      	ldrh	r1, [r7, #10]
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	9300      	str	r3, [sp, #0]
 8005a5e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005a62:	68f8      	ldr	r0, [r7, #12]
 8005a64:	f000 fad0 	bl	8006008 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d19a      	bne.n	80059a8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a72:	697a      	ldr	r2, [r7, #20]
 8005a74:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a76:	68f8      	ldr	r0, [r7, #12]
 8005a78:	f000 f9a2 	bl	8005dc0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d001      	beq.n	8005a86 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	e01a      	b.n	8005abc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	2220      	movs	r2, #32
 8005a8c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	6859      	ldr	r1, [r3, #4]
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	4b0b      	ldr	r3, [pc, #44]	@ (8005ac8 <HAL_I2C_Mem_Read+0x230>)
 8005a9a:	400b      	ands	r3, r1
 8005a9c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2220      	movs	r2, #32
 8005aa2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	e000      	b.n	8005abc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005aba:	2302      	movs	r3, #2
  }
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3718      	adds	r7, #24
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}
 8005ac4:	80002400 	.word	0x80002400
 8005ac8:	fe00e800 	.word	0xfe00e800

08005acc <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b083      	sub	sp, #12
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ada:	b2db      	uxtb	r3, r3
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	370c      	adds	r7, #12
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae6:	4770      	bx	lr

08005ae8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b086      	sub	sp, #24
 8005aec:	af02      	add	r7, sp, #8
 8005aee:	60f8      	str	r0, [r7, #12]
 8005af0:	4608      	mov	r0, r1
 8005af2:	4611      	mov	r1, r2
 8005af4:	461a      	mov	r2, r3
 8005af6:	4603      	mov	r3, r0
 8005af8:	817b      	strh	r3, [r7, #10]
 8005afa:	460b      	mov	r3, r1
 8005afc:	813b      	strh	r3, [r7, #8]
 8005afe:	4613      	mov	r3, r2
 8005b00:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005b02:	88fb      	ldrh	r3, [r7, #6]
 8005b04:	b2da      	uxtb	r2, r3
 8005b06:	8979      	ldrh	r1, [r7, #10]
 8005b08:	4b20      	ldr	r3, [pc, #128]	@ (8005b8c <I2C_RequestMemoryWrite+0xa4>)
 8005b0a:	9300      	str	r3, [sp, #0]
 8005b0c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005b10:	68f8      	ldr	r0, [r7, #12]
 8005b12:	f000 fa79 	bl	8006008 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b16:	69fa      	ldr	r2, [r7, #28]
 8005b18:	69b9      	ldr	r1, [r7, #24]
 8005b1a:	68f8      	ldr	r0, [r7, #12]
 8005b1c:	f000 f909 	bl	8005d32 <I2C_WaitOnTXISFlagUntilTimeout>
 8005b20:	4603      	mov	r3, r0
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d001      	beq.n	8005b2a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	e02c      	b.n	8005b84 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005b2a:	88fb      	ldrh	r3, [r7, #6]
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d105      	bne.n	8005b3c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005b30:	893b      	ldrh	r3, [r7, #8]
 8005b32:	b2da      	uxtb	r2, r3
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	629a      	str	r2, [r3, #40]	@ 0x28
 8005b3a:	e015      	b.n	8005b68 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005b3c:	893b      	ldrh	r3, [r7, #8]
 8005b3e:	0a1b      	lsrs	r3, r3, #8
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	b2da      	uxtb	r2, r3
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b4a:	69fa      	ldr	r2, [r7, #28]
 8005b4c:	69b9      	ldr	r1, [r7, #24]
 8005b4e:	68f8      	ldr	r0, [r7, #12]
 8005b50:	f000 f8ef 	bl	8005d32 <I2C_WaitOnTXISFlagUntilTimeout>
 8005b54:	4603      	mov	r3, r0
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d001      	beq.n	8005b5e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	e012      	b.n	8005b84 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005b5e:	893b      	ldrh	r3, [r7, #8]
 8005b60:	b2da      	uxtb	r2, r3
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005b68:	69fb      	ldr	r3, [r7, #28]
 8005b6a:	9300      	str	r3, [sp, #0]
 8005b6c:	69bb      	ldr	r3, [r7, #24]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	2180      	movs	r1, #128	@ 0x80
 8005b72:	68f8      	ldr	r0, [r7, #12]
 8005b74:	f000 f884 	bl	8005c80 <I2C_WaitOnFlagUntilTimeout>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d001      	beq.n	8005b82 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e000      	b.n	8005b84 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005b82:	2300      	movs	r3, #0
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3710      	adds	r7, #16
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}
 8005b8c:	80002000 	.word	0x80002000

08005b90 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b086      	sub	sp, #24
 8005b94:	af02      	add	r7, sp, #8
 8005b96:	60f8      	str	r0, [r7, #12]
 8005b98:	4608      	mov	r0, r1
 8005b9a:	4611      	mov	r1, r2
 8005b9c:	461a      	mov	r2, r3
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	817b      	strh	r3, [r7, #10]
 8005ba2:	460b      	mov	r3, r1
 8005ba4:	813b      	strh	r3, [r7, #8]
 8005ba6:	4613      	mov	r3, r2
 8005ba8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005baa:	88fb      	ldrh	r3, [r7, #6]
 8005bac:	b2da      	uxtb	r2, r3
 8005bae:	8979      	ldrh	r1, [r7, #10]
 8005bb0:	4b20      	ldr	r3, [pc, #128]	@ (8005c34 <I2C_RequestMemoryRead+0xa4>)
 8005bb2:	9300      	str	r3, [sp, #0]
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	68f8      	ldr	r0, [r7, #12]
 8005bb8:	f000 fa26 	bl	8006008 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bbc:	69fa      	ldr	r2, [r7, #28]
 8005bbe:	69b9      	ldr	r1, [r7, #24]
 8005bc0:	68f8      	ldr	r0, [r7, #12]
 8005bc2:	f000 f8b6 	bl	8005d32 <I2C_WaitOnTXISFlagUntilTimeout>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d001      	beq.n	8005bd0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	e02c      	b.n	8005c2a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005bd0:	88fb      	ldrh	r3, [r7, #6]
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	d105      	bne.n	8005be2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005bd6:	893b      	ldrh	r3, [r7, #8]
 8005bd8:	b2da      	uxtb	r2, r3
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	629a      	str	r2, [r3, #40]	@ 0x28
 8005be0:	e015      	b.n	8005c0e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005be2:	893b      	ldrh	r3, [r7, #8]
 8005be4:	0a1b      	lsrs	r3, r3, #8
 8005be6:	b29b      	uxth	r3, r3
 8005be8:	b2da      	uxtb	r2, r3
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bf0:	69fa      	ldr	r2, [r7, #28]
 8005bf2:	69b9      	ldr	r1, [r7, #24]
 8005bf4:	68f8      	ldr	r0, [r7, #12]
 8005bf6:	f000 f89c 	bl	8005d32 <I2C_WaitOnTXISFlagUntilTimeout>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d001      	beq.n	8005c04 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	e012      	b.n	8005c2a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005c04:	893b      	ldrh	r3, [r7, #8]
 8005c06:	b2da      	uxtb	r2, r3
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005c0e:	69fb      	ldr	r3, [r7, #28]
 8005c10:	9300      	str	r3, [sp, #0]
 8005c12:	69bb      	ldr	r3, [r7, #24]
 8005c14:	2200      	movs	r2, #0
 8005c16:	2140      	movs	r1, #64	@ 0x40
 8005c18:	68f8      	ldr	r0, [r7, #12]
 8005c1a:	f000 f831 	bl	8005c80 <I2C_WaitOnFlagUntilTimeout>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d001      	beq.n	8005c28 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	e000      	b.n	8005c2a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005c28:	2300      	movs	r3, #0
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3710      	adds	r7, #16
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
 8005c32:	bf00      	nop
 8005c34:	80002000 	.word	0x80002000

08005c38 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b083      	sub	sp, #12
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	699b      	ldr	r3, [r3, #24]
 8005c46:	f003 0302 	and.w	r3, r3, #2
 8005c4a:	2b02      	cmp	r3, #2
 8005c4c:	d103      	bne.n	8005c56 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	2200      	movs	r2, #0
 8005c54:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	699b      	ldr	r3, [r3, #24]
 8005c5c:	f003 0301 	and.w	r3, r3, #1
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d007      	beq.n	8005c74 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	699a      	ldr	r2, [r3, #24]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f042 0201 	orr.w	r2, r2, #1
 8005c72:	619a      	str	r2, [r3, #24]
  }
}
 8005c74:	bf00      	nop
 8005c76:	370c      	adds	r7, #12
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr

08005c80 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b084      	sub	sp, #16
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	60f8      	str	r0, [r7, #12]
 8005c88:	60b9      	str	r1, [r7, #8]
 8005c8a:	603b      	str	r3, [r7, #0]
 8005c8c:	4613      	mov	r3, r2
 8005c8e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c90:	e03b      	b.n	8005d0a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c92:	69ba      	ldr	r2, [r7, #24]
 8005c94:	6839      	ldr	r1, [r7, #0]
 8005c96:	68f8      	ldr	r0, [r7, #12]
 8005c98:	f000 f8d6 	bl	8005e48 <I2C_IsErrorOccurred>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d001      	beq.n	8005ca6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e041      	b.n	8005d2a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cac:	d02d      	beq.n	8005d0a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cae:	f7fe fb2d 	bl	800430c <HAL_GetTick>
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	69bb      	ldr	r3, [r7, #24]
 8005cb6:	1ad3      	subs	r3, r2, r3
 8005cb8:	683a      	ldr	r2, [r7, #0]
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	d302      	bcc.n	8005cc4 <I2C_WaitOnFlagUntilTimeout+0x44>
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d122      	bne.n	8005d0a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	699a      	ldr	r2, [r3, #24]
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	4013      	ands	r3, r2
 8005cce:	68ba      	ldr	r2, [r7, #8]
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	bf0c      	ite	eq
 8005cd4:	2301      	moveq	r3, #1
 8005cd6:	2300      	movne	r3, #0
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	461a      	mov	r2, r3
 8005cdc:	79fb      	ldrb	r3, [r7, #7]
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	d113      	bne.n	8005d0a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ce6:	f043 0220 	orr.w	r2, r3, #32
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2220      	movs	r2, #32
 8005cf2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2200      	movs	r2, #0
 8005d02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
 8005d08:	e00f      	b.n	8005d2a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	699a      	ldr	r2, [r3, #24]
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	4013      	ands	r3, r2
 8005d14:	68ba      	ldr	r2, [r7, #8]
 8005d16:	429a      	cmp	r2, r3
 8005d18:	bf0c      	ite	eq
 8005d1a:	2301      	moveq	r3, #1
 8005d1c:	2300      	movne	r3, #0
 8005d1e:	b2db      	uxtb	r3, r3
 8005d20:	461a      	mov	r2, r3
 8005d22:	79fb      	ldrb	r3, [r7, #7]
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d0b4      	beq.n	8005c92 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d28:	2300      	movs	r3, #0
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3710      	adds	r7, #16
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}

08005d32 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005d32:	b580      	push	{r7, lr}
 8005d34:	b084      	sub	sp, #16
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	60f8      	str	r0, [r7, #12]
 8005d3a:	60b9      	str	r1, [r7, #8]
 8005d3c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005d3e:	e033      	b.n	8005da8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d40:	687a      	ldr	r2, [r7, #4]
 8005d42:	68b9      	ldr	r1, [r7, #8]
 8005d44:	68f8      	ldr	r0, [r7, #12]
 8005d46:	f000 f87f 	bl	8005e48 <I2C_IsErrorOccurred>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d001      	beq.n	8005d54 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	e031      	b.n	8005db8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d5a:	d025      	beq.n	8005da8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d5c:	f7fe fad6 	bl	800430c <HAL_GetTick>
 8005d60:	4602      	mov	r2, r0
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	1ad3      	subs	r3, r2, r3
 8005d66:	68ba      	ldr	r2, [r7, #8]
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	d302      	bcc.n	8005d72 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d11a      	bne.n	8005da8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	699b      	ldr	r3, [r3, #24]
 8005d78:	f003 0302 	and.w	r3, r3, #2
 8005d7c:	2b02      	cmp	r3, #2
 8005d7e:	d013      	beq.n	8005da8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d84:	f043 0220 	orr.w	r2, r3, #32
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2220      	movs	r2, #32
 8005d90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2200      	movs	r2, #0
 8005d98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005da4:	2301      	movs	r3, #1
 8005da6:	e007      	b.n	8005db8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	699b      	ldr	r3, [r3, #24]
 8005dae:	f003 0302 	and.w	r3, r3, #2
 8005db2:	2b02      	cmp	r3, #2
 8005db4:	d1c4      	bne.n	8005d40 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005db6:	2300      	movs	r3, #0
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3710      	adds	r7, #16
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}

08005dc0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b084      	sub	sp, #16
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	60f8      	str	r0, [r7, #12]
 8005dc8:	60b9      	str	r1, [r7, #8]
 8005dca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005dcc:	e02f      	b.n	8005e2e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	68b9      	ldr	r1, [r7, #8]
 8005dd2:	68f8      	ldr	r0, [r7, #12]
 8005dd4:	f000 f838 	bl	8005e48 <I2C_IsErrorOccurred>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d001      	beq.n	8005de2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	e02d      	b.n	8005e3e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005de2:	f7fe fa93 	bl	800430c <HAL_GetTick>
 8005de6:	4602      	mov	r2, r0
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	1ad3      	subs	r3, r2, r3
 8005dec:	68ba      	ldr	r2, [r7, #8]
 8005dee:	429a      	cmp	r2, r3
 8005df0:	d302      	bcc.n	8005df8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d11a      	bne.n	8005e2e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	699b      	ldr	r3, [r3, #24]
 8005dfe:	f003 0320 	and.w	r3, r3, #32
 8005e02:	2b20      	cmp	r3, #32
 8005e04:	d013      	beq.n	8005e2e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e0a:	f043 0220 	orr.w	r2, r3, #32
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2220      	movs	r2, #32
 8005e16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2200      	movs	r2, #0
 8005e26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	e007      	b.n	8005e3e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	699b      	ldr	r3, [r3, #24]
 8005e34:	f003 0320 	and.w	r3, r3, #32
 8005e38:	2b20      	cmp	r3, #32
 8005e3a:	d1c8      	bne.n	8005dce <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005e3c:	2300      	movs	r3, #0
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3710      	adds	r7, #16
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}
	...

08005e48 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b08a      	sub	sp, #40	@ 0x28
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	60f8      	str	r0, [r7, #12]
 8005e50:	60b9      	str	r1, [r7, #8]
 8005e52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e54:	2300      	movs	r3, #0
 8005e56:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	699b      	ldr	r3, [r3, #24]
 8005e60:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005e62:	2300      	movs	r3, #0
 8005e64:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005e6a:	69bb      	ldr	r3, [r7, #24]
 8005e6c:	f003 0310 	and.w	r3, r3, #16
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d068      	beq.n	8005f46 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	2210      	movs	r2, #16
 8005e7a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005e7c:	e049      	b.n	8005f12 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e84:	d045      	beq.n	8005f12 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005e86:	f7fe fa41 	bl	800430c <HAL_GetTick>
 8005e8a:	4602      	mov	r2, r0
 8005e8c:	69fb      	ldr	r3, [r7, #28]
 8005e8e:	1ad3      	subs	r3, r2, r3
 8005e90:	68ba      	ldr	r2, [r7, #8]
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d302      	bcc.n	8005e9c <I2C_IsErrorOccurred+0x54>
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d13a      	bne.n	8005f12 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005ea6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005eae:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	699b      	ldr	r3, [r3, #24]
 8005eb6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005eba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ebe:	d121      	bne.n	8005f04 <I2C_IsErrorOccurred+0xbc>
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005ec6:	d01d      	beq.n	8005f04 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005ec8:	7cfb      	ldrb	r3, [r7, #19]
 8005eca:	2b20      	cmp	r3, #32
 8005ecc:	d01a      	beq.n	8005f04 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	685a      	ldr	r2, [r3, #4]
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005edc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005ede:	f7fe fa15 	bl	800430c <HAL_GetTick>
 8005ee2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ee4:	e00e      	b.n	8005f04 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005ee6:	f7fe fa11 	bl	800430c <HAL_GetTick>
 8005eea:	4602      	mov	r2, r0
 8005eec:	69fb      	ldr	r3, [r7, #28]
 8005eee:	1ad3      	subs	r3, r2, r3
 8005ef0:	2b19      	cmp	r3, #25
 8005ef2:	d907      	bls.n	8005f04 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005ef4:	6a3b      	ldr	r3, [r7, #32]
 8005ef6:	f043 0320 	orr.w	r3, r3, #32
 8005efa:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005efc:	2301      	movs	r3, #1
 8005efe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8005f02:	e006      	b.n	8005f12 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	699b      	ldr	r3, [r3, #24]
 8005f0a:	f003 0320 	and.w	r3, r3, #32
 8005f0e:	2b20      	cmp	r3, #32
 8005f10:	d1e9      	bne.n	8005ee6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	699b      	ldr	r3, [r3, #24]
 8005f18:	f003 0320 	and.w	r3, r3, #32
 8005f1c:	2b20      	cmp	r3, #32
 8005f1e:	d003      	beq.n	8005f28 <I2C_IsErrorOccurred+0xe0>
 8005f20:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d0aa      	beq.n	8005e7e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005f28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d103      	bne.n	8005f38 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	2220      	movs	r2, #32
 8005f36:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005f38:	6a3b      	ldr	r3, [r7, #32]
 8005f3a:	f043 0304 	orr.w	r3, r3, #4
 8005f3e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005f40:	2301      	movs	r3, #1
 8005f42:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	699b      	ldr	r3, [r3, #24]
 8005f4c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005f4e:	69bb      	ldr	r3, [r7, #24]
 8005f50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d00b      	beq.n	8005f70 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005f58:	6a3b      	ldr	r3, [r7, #32]
 8005f5a:	f043 0301 	orr.w	r3, r3, #1
 8005f5e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005f68:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005f70:	69bb      	ldr	r3, [r7, #24]
 8005f72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d00b      	beq.n	8005f92 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005f7a:	6a3b      	ldr	r3, [r7, #32]
 8005f7c:	f043 0308 	orr.w	r3, r3, #8
 8005f80:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005f8a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005f92:	69bb      	ldr	r3, [r7, #24]
 8005f94:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d00b      	beq.n	8005fb4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005f9c:	6a3b      	ldr	r3, [r7, #32]
 8005f9e:	f043 0302 	orr.w	r3, r3, #2
 8005fa2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005fac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005fb4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d01c      	beq.n	8005ff6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005fbc:	68f8      	ldr	r0, [r7, #12]
 8005fbe:	f7ff fe3b 	bl	8005c38 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	6859      	ldr	r1, [r3, #4]
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	4b0d      	ldr	r3, [pc, #52]	@ (8006004 <I2C_IsErrorOccurred+0x1bc>)
 8005fce:	400b      	ands	r3, r1
 8005fd0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005fd6:	6a3b      	ldr	r3, [r7, #32]
 8005fd8:	431a      	orrs	r2, r3
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2220      	movs	r2, #32
 8005fe2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005ff6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3728      	adds	r7, #40	@ 0x28
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}
 8006002:	bf00      	nop
 8006004:	fe00e800 	.word	0xfe00e800

08006008 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006008:	b480      	push	{r7}
 800600a:	b087      	sub	sp, #28
 800600c:	af00      	add	r7, sp, #0
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	607b      	str	r3, [r7, #4]
 8006012:	460b      	mov	r3, r1
 8006014:	817b      	strh	r3, [r7, #10]
 8006016:	4613      	mov	r3, r2
 8006018:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800601a:	897b      	ldrh	r3, [r7, #10]
 800601c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006020:	7a7b      	ldrb	r3, [r7, #9]
 8006022:	041b      	lsls	r3, r3, #16
 8006024:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006028:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800602e:	6a3b      	ldr	r3, [r7, #32]
 8006030:	4313      	orrs	r3, r2
 8006032:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006036:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	685a      	ldr	r2, [r3, #4]
 800603e:	6a3b      	ldr	r3, [r7, #32]
 8006040:	0d5b      	lsrs	r3, r3, #21
 8006042:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8006046:	4b08      	ldr	r3, [pc, #32]	@ (8006068 <I2C_TransferConfig+0x60>)
 8006048:	430b      	orrs	r3, r1
 800604a:	43db      	mvns	r3, r3
 800604c:	ea02 0103 	and.w	r1, r2, r3
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	697a      	ldr	r2, [r7, #20]
 8006056:	430a      	orrs	r2, r1
 8006058:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800605a:	bf00      	nop
 800605c:	371c      	adds	r7, #28
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr
 8006066:	bf00      	nop
 8006068:	03ff63ff 	.word	0x03ff63ff

0800606c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b082      	sub	sp, #8
 8006070:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006072:	2300      	movs	r3, #0
 8006074:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006076:	4b23      	ldr	r3, [pc, #140]	@ (8006104 <HAL_PWREx_EnableOverDrive+0x98>)
 8006078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800607a:	4a22      	ldr	r2, [pc, #136]	@ (8006104 <HAL_PWREx_EnableOverDrive+0x98>)
 800607c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006080:	6413      	str	r3, [r2, #64]	@ 0x40
 8006082:	4b20      	ldr	r3, [pc, #128]	@ (8006104 <HAL_PWREx_EnableOverDrive+0x98>)
 8006084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006086:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800608a:	603b      	str	r3, [r7, #0]
 800608c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800608e:	4b1e      	ldr	r3, [pc, #120]	@ (8006108 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a1d      	ldr	r2, [pc, #116]	@ (8006108 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006094:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006098:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800609a:	f7fe f937 	bl	800430c <HAL_GetTick>
 800609e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80060a0:	e009      	b.n	80060b6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80060a2:	f7fe f933 	bl	800430c <HAL_GetTick>
 80060a6:	4602      	mov	r2, r0
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	1ad3      	subs	r3, r2, r3
 80060ac:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80060b0:	d901      	bls.n	80060b6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80060b2:	2303      	movs	r3, #3
 80060b4:	e022      	b.n	80060fc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80060b6:	4b14      	ldr	r3, [pc, #80]	@ (8006108 <HAL_PWREx_EnableOverDrive+0x9c>)
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80060be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060c2:	d1ee      	bne.n	80060a2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80060c4:	4b10      	ldr	r3, [pc, #64]	@ (8006108 <HAL_PWREx_EnableOverDrive+0x9c>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a0f      	ldr	r2, [pc, #60]	@ (8006108 <HAL_PWREx_EnableOverDrive+0x9c>)
 80060ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060ce:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80060d0:	f7fe f91c 	bl	800430c <HAL_GetTick>
 80060d4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80060d6:	e009      	b.n	80060ec <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80060d8:	f7fe f918 	bl	800430c <HAL_GetTick>
 80060dc:	4602      	mov	r2, r0
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	1ad3      	subs	r3, r2, r3
 80060e2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80060e6:	d901      	bls.n	80060ec <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80060e8:	2303      	movs	r3, #3
 80060ea:	e007      	b.n	80060fc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80060ec:	4b06      	ldr	r3, [pc, #24]	@ (8006108 <HAL_PWREx_EnableOverDrive+0x9c>)
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80060f8:	d1ee      	bne.n	80060d8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80060fa:	2300      	movs	r3, #0
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3708      	adds	r7, #8
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}
 8006104:	40023800 	.word	0x40023800
 8006108:	40007000 	.word	0x40007000

0800610c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b086      	sub	sp, #24
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006114:	2300      	movs	r3, #0
 8006116:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d101      	bne.n	8006122 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	e291      	b.n	8006646 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f003 0301 	and.w	r3, r3, #1
 800612a:	2b00      	cmp	r3, #0
 800612c:	f000 8087 	beq.w	800623e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006130:	4b96      	ldr	r3, [pc, #600]	@ (800638c <HAL_RCC_OscConfig+0x280>)
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	f003 030c 	and.w	r3, r3, #12
 8006138:	2b04      	cmp	r3, #4
 800613a:	d00c      	beq.n	8006156 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800613c:	4b93      	ldr	r3, [pc, #588]	@ (800638c <HAL_RCC_OscConfig+0x280>)
 800613e:	689b      	ldr	r3, [r3, #8]
 8006140:	f003 030c 	and.w	r3, r3, #12
 8006144:	2b08      	cmp	r3, #8
 8006146:	d112      	bne.n	800616e <HAL_RCC_OscConfig+0x62>
 8006148:	4b90      	ldr	r3, [pc, #576]	@ (800638c <HAL_RCC_OscConfig+0x280>)
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006150:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006154:	d10b      	bne.n	800616e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006156:	4b8d      	ldr	r3, [pc, #564]	@ (800638c <HAL_RCC_OscConfig+0x280>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800615e:	2b00      	cmp	r3, #0
 8006160:	d06c      	beq.n	800623c <HAL_RCC_OscConfig+0x130>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d168      	bne.n	800623c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800616a:	2301      	movs	r3, #1
 800616c:	e26b      	b.n	8006646 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006176:	d106      	bne.n	8006186 <HAL_RCC_OscConfig+0x7a>
 8006178:	4b84      	ldr	r3, [pc, #528]	@ (800638c <HAL_RCC_OscConfig+0x280>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a83      	ldr	r2, [pc, #524]	@ (800638c <HAL_RCC_OscConfig+0x280>)
 800617e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006182:	6013      	str	r3, [r2, #0]
 8006184:	e02e      	b.n	80061e4 <HAL_RCC_OscConfig+0xd8>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d10c      	bne.n	80061a8 <HAL_RCC_OscConfig+0x9c>
 800618e:	4b7f      	ldr	r3, [pc, #508]	@ (800638c <HAL_RCC_OscConfig+0x280>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a7e      	ldr	r2, [pc, #504]	@ (800638c <HAL_RCC_OscConfig+0x280>)
 8006194:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006198:	6013      	str	r3, [r2, #0]
 800619a:	4b7c      	ldr	r3, [pc, #496]	@ (800638c <HAL_RCC_OscConfig+0x280>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a7b      	ldr	r2, [pc, #492]	@ (800638c <HAL_RCC_OscConfig+0x280>)
 80061a0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80061a4:	6013      	str	r3, [r2, #0]
 80061a6:	e01d      	b.n	80061e4 <HAL_RCC_OscConfig+0xd8>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80061b0:	d10c      	bne.n	80061cc <HAL_RCC_OscConfig+0xc0>
 80061b2:	4b76      	ldr	r3, [pc, #472]	@ (800638c <HAL_RCC_OscConfig+0x280>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a75      	ldr	r2, [pc, #468]	@ (800638c <HAL_RCC_OscConfig+0x280>)
 80061b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80061bc:	6013      	str	r3, [r2, #0]
 80061be:	4b73      	ldr	r3, [pc, #460]	@ (800638c <HAL_RCC_OscConfig+0x280>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a72      	ldr	r2, [pc, #456]	@ (800638c <HAL_RCC_OscConfig+0x280>)
 80061c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061c8:	6013      	str	r3, [r2, #0]
 80061ca:	e00b      	b.n	80061e4 <HAL_RCC_OscConfig+0xd8>
 80061cc:	4b6f      	ldr	r3, [pc, #444]	@ (800638c <HAL_RCC_OscConfig+0x280>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a6e      	ldr	r2, [pc, #440]	@ (800638c <HAL_RCC_OscConfig+0x280>)
 80061d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80061d6:	6013      	str	r3, [r2, #0]
 80061d8:	4b6c      	ldr	r3, [pc, #432]	@ (800638c <HAL_RCC_OscConfig+0x280>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a6b      	ldr	r2, [pc, #428]	@ (800638c <HAL_RCC_OscConfig+0x280>)
 80061de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80061e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d013      	beq.n	8006214 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061ec:	f7fe f88e 	bl	800430c <HAL_GetTick>
 80061f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061f2:	e008      	b.n	8006206 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80061f4:	f7fe f88a 	bl	800430c <HAL_GetTick>
 80061f8:	4602      	mov	r2, r0
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	1ad3      	subs	r3, r2, r3
 80061fe:	2b64      	cmp	r3, #100	@ 0x64
 8006200:	d901      	bls.n	8006206 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006202:	2303      	movs	r3, #3
 8006204:	e21f      	b.n	8006646 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006206:	4b61      	ldr	r3, [pc, #388]	@ (800638c <HAL_RCC_OscConfig+0x280>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800620e:	2b00      	cmp	r3, #0
 8006210:	d0f0      	beq.n	80061f4 <HAL_RCC_OscConfig+0xe8>
 8006212:	e014      	b.n	800623e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006214:	f7fe f87a 	bl	800430c <HAL_GetTick>
 8006218:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800621a:	e008      	b.n	800622e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800621c:	f7fe f876 	bl	800430c <HAL_GetTick>
 8006220:	4602      	mov	r2, r0
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	1ad3      	subs	r3, r2, r3
 8006226:	2b64      	cmp	r3, #100	@ 0x64
 8006228:	d901      	bls.n	800622e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800622a:	2303      	movs	r3, #3
 800622c:	e20b      	b.n	8006646 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800622e:	4b57      	ldr	r3, [pc, #348]	@ (800638c <HAL_RCC_OscConfig+0x280>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006236:	2b00      	cmp	r3, #0
 8006238:	d1f0      	bne.n	800621c <HAL_RCC_OscConfig+0x110>
 800623a:	e000      	b.n	800623e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800623c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f003 0302 	and.w	r3, r3, #2
 8006246:	2b00      	cmp	r3, #0
 8006248:	d069      	beq.n	800631e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800624a:	4b50      	ldr	r3, [pc, #320]	@ (800638c <HAL_RCC_OscConfig+0x280>)
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	f003 030c 	and.w	r3, r3, #12
 8006252:	2b00      	cmp	r3, #0
 8006254:	d00b      	beq.n	800626e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006256:	4b4d      	ldr	r3, [pc, #308]	@ (800638c <HAL_RCC_OscConfig+0x280>)
 8006258:	689b      	ldr	r3, [r3, #8]
 800625a:	f003 030c 	and.w	r3, r3, #12
 800625e:	2b08      	cmp	r3, #8
 8006260:	d11c      	bne.n	800629c <HAL_RCC_OscConfig+0x190>
 8006262:	4b4a      	ldr	r3, [pc, #296]	@ (800638c <HAL_RCC_OscConfig+0x280>)
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800626a:	2b00      	cmp	r3, #0
 800626c:	d116      	bne.n	800629c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800626e:	4b47      	ldr	r3, [pc, #284]	@ (800638c <HAL_RCC_OscConfig+0x280>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f003 0302 	and.w	r3, r3, #2
 8006276:	2b00      	cmp	r3, #0
 8006278:	d005      	beq.n	8006286 <HAL_RCC_OscConfig+0x17a>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	68db      	ldr	r3, [r3, #12]
 800627e:	2b01      	cmp	r3, #1
 8006280:	d001      	beq.n	8006286 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	e1df      	b.n	8006646 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006286:	4b41      	ldr	r3, [pc, #260]	@ (800638c <HAL_RCC_OscConfig+0x280>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	691b      	ldr	r3, [r3, #16]
 8006292:	00db      	lsls	r3, r3, #3
 8006294:	493d      	ldr	r1, [pc, #244]	@ (800638c <HAL_RCC_OscConfig+0x280>)
 8006296:	4313      	orrs	r3, r2
 8006298:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800629a:	e040      	b.n	800631e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	68db      	ldr	r3, [r3, #12]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d023      	beq.n	80062ec <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80062a4:	4b39      	ldr	r3, [pc, #228]	@ (800638c <HAL_RCC_OscConfig+0x280>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a38      	ldr	r2, [pc, #224]	@ (800638c <HAL_RCC_OscConfig+0x280>)
 80062aa:	f043 0301 	orr.w	r3, r3, #1
 80062ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062b0:	f7fe f82c 	bl	800430c <HAL_GetTick>
 80062b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062b6:	e008      	b.n	80062ca <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80062b8:	f7fe f828 	bl	800430c <HAL_GetTick>
 80062bc:	4602      	mov	r2, r0
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	1ad3      	subs	r3, r2, r3
 80062c2:	2b02      	cmp	r3, #2
 80062c4:	d901      	bls.n	80062ca <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80062c6:	2303      	movs	r3, #3
 80062c8:	e1bd      	b.n	8006646 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062ca:	4b30      	ldr	r3, [pc, #192]	@ (800638c <HAL_RCC_OscConfig+0x280>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f003 0302 	and.w	r3, r3, #2
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d0f0      	beq.n	80062b8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062d6:	4b2d      	ldr	r3, [pc, #180]	@ (800638c <HAL_RCC_OscConfig+0x280>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	691b      	ldr	r3, [r3, #16]
 80062e2:	00db      	lsls	r3, r3, #3
 80062e4:	4929      	ldr	r1, [pc, #164]	@ (800638c <HAL_RCC_OscConfig+0x280>)
 80062e6:	4313      	orrs	r3, r2
 80062e8:	600b      	str	r3, [r1, #0]
 80062ea:	e018      	b.n	800631e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80062ec:	4b27      	ldr	r3, [pc, #156]	@ (800638c <HAL_RCC_OscConfig+0x280>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a26      	ldr	r2, [pc, #152]	@ (800638c <HAL_RCC_OscConfig+0x280>)
 80062f2:	f023 0301 	bic.w	r3, r3, #1
 80062f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062f8:	f7fe f808 	bl	800430c <HAL_GetTick>
 80062fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80062fe:	e008      	b.n	8006312 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006300:	f7fe f804 	bl	800430c <HAL_GetTick>
 8006304:	4602      	mov	r2, r0
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	1ad3      	subs	r3, r2, r3
 800630a:	2b02      	cmp	r3, #2
 800630c:	d901      	bls.n	8006312 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800630e:	2303      	movs	r3, #3
 8006310:	e199      	b.n	8006646 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006312:	4b1e      	ldr	r3, [pc, #120]	@ (800638c <HAL_RCC_OscConfig+0x280>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f003 0302 	and.w	r3, r3, #2
 800631a:	2b00      	cmp	r3, #0
 800631c:	d1f0      	bne.n	8006300 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f003 0308 	and.w	r3, r3, #8
 8006326:	2b00      	cmp	r3, #0
 8006328:	d038      	beq.n	800639c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	695b      	ldr	r3, [r3, #20]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d019      	beq.n	8006366 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006332:	4b16      	ldr	r3, [pc, #88]	@ (800638c <HAL_RCC_OscConfig+0x280>)
 8006334:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006336:	4a15      	ldr	r2, [pc, #84]	@ (800638c <HAL_RCC_OscConfig+0x280>)
 8006338:	f043 0301 	orr.w	r3, r3, #1
 800633c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800633e:	f7fd ffe5 	bl	800430c <HAL_GetTick>
 8006342:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006344:	e008      	b.n	8006358 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006346:	f7fd ffe1 	bl	800430c <HAL_GetTick>
 800634a:	4602      	mov	r2, r0
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	1ad3      	subs	r3, r2, r3
 8006350:	2b02      	cmp	r3, #2
 8006352:	d901      	bls.n	8006358 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006354:	2303      	movs	r3, #3
 8006356:	e176      	b.n	8006646 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006358:	4b0c      	ldr	r3, [pc, #48]	@ (800638c <HAL_RCC_OscConfig+0x280>)
 800635a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800635c:	f003 0302 	and.w	r3, r3, #2
 8006360:	2b00      	cmp	r3, #0
 8006362:	d0f0      	beq.n	8006346 <HAL_RCC_OscConfig+0x23a>
 8006364:	e01a      	b.n	800639c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006366:	4b09      	ldr	r3, [pc, #36]	@ (800638c <HAL_RCC_OscConfig+0x280>)
 8006368:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800636a:	4a08      	ldr	r2, [pc, #32]	@ (800638c <HAL_RCC_OscConfig+0x280>)
 800636c:	f023 0301 	bic.w	r3, r3, #1
 8006370:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006372:	f7fd ffcb 	bl	800430c <HAL_GetTick>
 8006376:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006378:	e00a      	b.n	8006390 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800637a:	f7fd ffc7 	bl	800430c <HAL_GetTick>
 800637e:	4602      	mov	r2, r0
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	1ad3      	subs	r3, r2, r3
 8006384:	2b02      	cmp	r3, #2
 8006386:	d903      	bls.n	8006390 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006388:	2303      	movs	r3, #3
 800638a:	e15c      	b.n	8006646 <HAL_RCC_OscConfig+0x53a>
 800638c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006390:	4b91      	ldr	r3, [pc, #580]	@ (80065d8 <HAL_RCC_OscConfig+0x4cc>)
 8006392:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006394:	f003 0302 	and.w	r3, r3, #2
 8006398:	2b00      	cmp	r3, #0
 800639a:	d1ee      	bne.n	800637a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f003 0304 	and.w	r3, r3, #4
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	f000 80a4 	beq.w	80064f2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80063aa:	4b8b      	ldr	r3, [pc, #556]	@ (80065d8 <HAL_RCC_OscConfig+0x4cc>)
 80063ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d10d      	bne.n	80063d2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80063b6:	4b88      	ldr	r3, [pc, #544]	@ (80065d8 <HAL_RCC_OscConfig+0x4cc>)
 80063b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063ba:	4a87      	ldr	r2, [pc, #540]	@ (80065d8 <HAL_RCC_OscConfig+0x4cc>)
 80063bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80063c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80063c2:	4b85      	ldr	r3, [pc, #532]	@ (80065d8 <HAL_RCC_OscConfig+0x4cc>)
 80063c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80063ca:	60bb      	str	r3, [r7, #8]
 80063cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80063ce:	2301      	movs	r3, #1
 80063d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80063d2:	4b82      	ldr	r3, [pc, #520]	@ (80065dc <HAL_RCC_OscConfig+0x4d0>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d118      	bne.n	8006410 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80063de:	4b7f      	ldr	r3, [pc, #508]	@ (80065dc <HAL_RCC_OscConfig+0x4d0>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a7e      	ldr	r2, [pc, #504]	@ (80065dc <HAL_RCC_OscConfig+0x4d0>)
 80063e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80063e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80063ea:	f7fd ff8f 	bl	800430c <HAL_GetTick>
 80063ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80063f0:	e008      	b.n	8006404 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063f2:	f7fd ff8b 	bl	800430c <HAL_GetTick>
 80063f6:	4602      	mov	r2, r0
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	1ad3      	subs	r3, r2, r3
 80063fc:	2b64      	cmp	r3, #100	@ 0x64
 80063fe:	d901      	bls.n	8006404 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006400:	2303      	movs	r3, #3
 8006402:	e120      	b.n	8006646 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006404:	4b75      	ldr	r3, [pc, #468]	@ (80065dc <HAL_RCC_OscConfig+0x4d0>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800640c:	2b00      	cmp	r3, #0
 800640e:	d0f0      	beq.n	80063f2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	2b01      	cmp	r3, #1
 8006416:	d106      	bne.n	8006426 <HAL_RCC_OscConfig+0x31a>
 8006418:	4b6f      	ldr	r3, [pc, #444]	@ (80065d8 <HAL_RCC_OscConfig+0x4cc>)
 800641a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800641c:	4a6e      	ldr	r2, [pc, #440]	@ (80065d8 <HAL_RCC_OscConfig+0x4cc>)
 800641e:	f043 0301 	orr.w	r3, r3, #1
 8006422:	6713      	str	r3, [r2, #112]	@ 0x70
 8006424:	e02d      	b.n	8006482 <HAL_RCC_OscConfig+0x376>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d10c      	bne.n	8006448 <HAL_RCC_OscConfig+0x33c>
 800642e:	4b6a      	ldr	r3, [pc, #424]	@ (80065d8 <HAL_RCC_OscConfig+0x4cc>)
 8006430:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006432:	4a69      	ldr	r2, [pc, #420]	@ (80065d8 <HAL_RCC_OscConfig+0x4cc>)
 8006434:	f023 0301 	bic.w	r3, r3, #1
 8006438:	6713      	str	r3, [r2, #112]	@ 0x70
 800643a:	4b67      	ldr	r3, [pc, #412]	@ (80065d8 <HAL_RCC_OscConfig+0x4cc>)
 800643c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800643e:	4a66      	ldr	r2, [pc, #408]	@ (80065d8 <HAL_RCC_OscConfig+0x4cc>)
 8006440:	f023 0304 	bic.w	r3, r3, #4
 8006444:	6713      	str	r3, [r2, #112]	@ 0x70
 8006446:	e01c      	b.n	8006482 <HAL_RCC_OscConfig+0x376>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	2b05      	cmp	r3, #5
 800644e:	d10c      	bne.n	800646a <HAL_RCC_OscConfig+0x35e>
 8006450:	4b61      	ldr	r3, [pc, #388]	@ (80065d8 <HAL_RCC_OscConfig+0x4cc>)
 8006452:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006454:	4a60      	ldr	r2, [pc, #384]	@ (80065d8 <HAL_RCC_OscConfig+0x4cc>)
 8006456:	f043 0304 	orr.w	r3, r3, #4
 800645a:	6713      	str	r3, [r2, #112]	@ 0x70
 800645c:	4b5e      	ldr	r3, [pc, #376]	@ (80065d8 <HAL_RCC_OscConfig+0x4cc>)
 800645e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006460:	4a5d      	ldr	r2, [pc, #372]	@ (80065d8 <HAL_RCC_OscConfig+0x4cc>)
 8006462:	f043 0301 	orr.w	r3, r3, #1
 8006466:	6713      	str	r3, [r2, #112]	@ 0x70
 8006468:	e00b      	b.n	8006482 <HAL_RCC_OscConfig+0x376>
 800646a:	4b5b      	ldr	r3, [pc, #364]	@ (80065d8 <HAL_RCC_OscConfig+0x4cc>)
 800646c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800646e:	4a5a      	ldr	r2, [pc, #360]	@ (80065d8 <HAL_RCC_OscConfig+0x4cc>)
 8006470:	f023 0301 	bic.w	r3, r3, #1
 8006474:	6713      	str	r3, [r2, #112]	@ 0x70
 8006476:	4b58      	ldr	r3, [pc, #352]	@ (80065d8 <HAL_RCC_OscConfig+0x4cc>)
 8006478:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800647a:	4a57      	ldr	r2, [pc, #348]	@ (80065d8 <HAL_RCC_OscConfig+0x4cc>)
 800647c:	f023 0304 	bic.w	r3, r3, #4
 8006480:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	689b      	ldr	r3, [r3, #8]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d015      	beq.n	80064b6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800648a:	f7fd ff3f 	bl	800430c <HAL_GetTick>
 800648e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006490:	e00a      	b.n	80064a8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006492:	f7fd ff3b 	bl	800430c <HAL_GetTick>
 8006496:	4602      	mov	r2, r0
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	1ad3      	subs	r3, r2, r3
 800649c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d901      	bls.n	80064a8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80064a4:	2303      	movs	r3, #3
 80064a6:	e0ce      	b.n	8006646 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064a8:	4b4b      	ldr	r3, [pc, #300]	@ (80065d8 <HAL_RCC_OscConfig+0x4cc>)
 80064aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064ac:	f003 0302 	and.w	r3, r3, #2
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d0ee      	beq.n	8006492 <HAL_RCC_OscConfig+0x386>
 80064b4:	e014      	b.n	80064e0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064b6:	f7fd ff29 	bl	800430c <HAL_GetTick>
 80064ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80064bc:	e00a      	b.n	80064d4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064be:	f7fd ff25 	bl	800430c <HAL_GetTick>
 80064c2:	4602      	mov	r2, r0
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	1ad3      	subs	r3, r2, r3
 80064c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d901      	bls.n	80064d4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80064d0:	2303      	movs	r3, #3
 80064d2:	e0b8      	b.n	8006646 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80064d4:	4b40      	ldr	r3, [pc, #256]	@ (80065d8 <HAL_RCC_OscConfig+0x4cc>)
 80064d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064d8:	f003 0302 	and.w	r3, r3, #2
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d1ee      	bne.n	80064be <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80064e0:	7dfb      	ldrb	r3, [r7, #23]
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	d105      	bne.n	80064f2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80064e6:	4b3c      	ldr	r3, [pc, #240]	@ (80065d8 <HAL_RCC_OscConfig+0x4cc>)
 80064e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064ea:	4a3b      	ldr	r2, [pc, #236]	@ (80065d8 <HAL_RCC_OscConfig+0x4cc>)
 80064ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80064f0:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	699b      	ldr	r3, [r3, #24]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	f000 80a4 	beq.w	8006644 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80064fc:	4b36      	ldr	r3, [pc, #216]	@ (80065d8 <HAL_RCC_OscConfig+0x4cc>)
 80064fe:	689b      	ldr	r3, [r3, #8]
 8006500:	f003 030c 	and.w	r3, r3, #12
 8006504:	2b08      	cmp	r3, #8
 8006506:	d06b      	beq.n	80065e0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	699b      	ldr	r3, [r3, #24]
 800650c:	2b02      	cmp	r3, #2
 800650e:	d149      	bne.n	80065a4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006510:	4b31      	ldr	r3, [pc, #196]	@ (80065d8 <HAL_RCC_OscConfig+0x4cc>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a30      	ldr	r2, [pc, #192]	@ (80065d8 <HAL_RCC_OscConfig+0x4cc>)
 8006516:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800651a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800651c:	f7fd fef6 	bl	800430c <HAL_GetTick>
 8006520:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006522:	e008      	b.n	8006536 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006524:	f7fd fef2 	bl	800430c <HAL_GetTick>
 8006528:	4602      	mov	r2, r0
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	1ad3      	subs	r3, r2, r3
 800652e:	2b02      	cmp	r3, #2
 8006530:	d901      	bls.n	8006536 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006532:	2303      	movs	r3, #3
 8006534:	e087      	b.n	8006646 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006536:	4b28      	ldr	r3, [pc, #160]	@ (80065d8 <HAL_RCC_OscConfig+0x4cc>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800653e:	2b00      	cmp	r3, #0
 8006540:	d1f0      	bne.n	8006524 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	69da      	ldr	r2, [r3, #28]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6a1b      	ldr	r3, [r3, #32]
 800654a:	431a      	orrs	r2, r3
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006550:	019b      	lsls	r3, r3, #6
 8006552:	431a      	orrs	r2, r3
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006558:	085b      	lsrs	r3, r3, #1
 800655a:	3b01      	subs	r3, #1
 800655c:	041b      	lsls	r3, r3, #16
 800655e:	431a      	orrs	r2, r3
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006564:	061b      	lsls	r3, r3, #24
 8006566:	4313      	orrs	r3, r2
 8006568:	4a1b      	ldr	r2, [pc, #108]	@ (80065d8 <HAL_RCC_OscConfig+0x4cc>)
 800656a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800656e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006570:	4b19      	ldr	r3, [pc, #100]	@ (80065d8 <HAL_RCC_OscConfig+0x4cc>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a18      	ldr	r2, [pc, #96]	@ (80065d8 <HAL_RCC_OscConfig+0x4cc>)
 8006576:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800657a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800657c:	f7fd fec6 	bl	800430c <HAL_GetTick>
 8006580:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006582:	e008      	b.n	8006596 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006584:	f7fd fec2 	bl	800430c <HAL_GetTick>
 8006588:	4602      	mov	r2, r0
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	1ad3      	subs	r3, r2, r3
 800658e:	2b02      	cmp	r3, #2
 8006590:	d901      	bls.n	8006596 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8006592:	2303      	movs	r3, #3
 8006594:	e057      	b.n	8006646 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006596:	4b10      	ldr	r3, [pc, #64]	@ (80065d8 <HAL_RCC_OscConfig+0x4cc>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d0f0      	beq.n	8006584 <HAL_RCC_OscConfig+0x478>
 80065a2:	e04f      	b.n	8006644 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065a4:	4b0c      	ldr	r3, [pc, #48]	@ (80065d8 <HAL_RCC_OscConfig+0x4cc>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a0b      	ldr	r2, [pc, #44]	@ (80065d8 <HAL_RCC_OscConfig+0x4cc>)
 80065aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80065ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065b0:	f7fd feac 	bl	800430c <HAL_GetTick>
 80065b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065b6:	e008      	b.n	80065ca <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065b8:	f7fd fea8 	bl	800430c <HAL_GetTick>
 80065bc:	4602      	mov	r2, r0
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	1ad3      	subs	r3, r2, r3
 80065c2:	2b02      	cmp	r3, #2
 80065c4:	d901      	bls.n	80065ca <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80065c6:	2303      	movs	r3, #3
 80065c8:	e03d      	b.n	8006646 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065ca:	4b03      	ldr	r3, [pc, #12]	@ (80065d8 <HAL_RCC_OscConfig+0x4cc>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d1f0      	bne.n	80065b8 <HAL_RCC_OscConfig+0x4ac>
 80065d6:	e035      	b.n	8006644 <HAL_RCC_OscConfig+0x538>
 80065d8:	40023800 	.word	0x40023800
 80065dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80065e0:	4b1b      	ldr	r3, [pc, #108]	@ (8006650 <HAL_RCC_OscConfig+0x544>)
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	699b      	ldr	r3, [r3, #24]
 80065ea:	2b01      	cmp	r3, #1
 80065ec:	d028      	beq.n	8006640 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80065f8:	429a      	cmp	r2, r3
 80065fa:	d121      	bne.n	8006640 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006606:	429a      	cmp	r2, r3
 8006608:	d11a      	bne.n	8006640 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800660a:	68fa      	ldr	r2, [r7, #12]
 800660c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006610:	4013      	ands	r3, r2
 8006612:	687a      	ldr	r2, [r7, #4]
 8006614:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006616:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006618:	4293      	cmp	r3, r2
 800661a:	d111      	bne.n	8006640 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006626:	085b      	lsrs	r3, r3, #1
 8006628:	3b01      	subs	r3, #1
 800662a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800662c:	429a      	cmp	r2, r3
 800662e:	d107      	bne.n	8006640 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800663a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800663c:	429a      	cmp	r2, r3
 800663e:	d001      	beq.n	8006644 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006640:	2301      	movs	r3, #1
 8006642:	e000      	b.n	8006646 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006644:	2300      	movs	r3, #0
}
 8006646:	4618      	mov	r0, r3
 8006648:	3718      	adds	r7, #24
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}
 800664e:	bf00      	nop
 8006650:	40023800 	.word	0x40023800

08006654 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b084      	sub	sp, #16
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800665e:	2300      	movs	r3, #0
 8006660:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d101      	bne.n	800666c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006668:	2301      	movs	r3, #1
 800666a:	e0d0      	b.n	800680e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800666c:	4b6a      	ldr	r3, [pc, #424]	@ (8006818 <HAL_RCC_ClockConfig+0x1c4>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f003 030f 	and.w	r3, r3, #15
 8006674:	683a      	ldr	r2, [r7, #0]
 8006676:	429a      	cmp	r2, r3
 8006678:	d910      	bls.n	800669c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800667a:	4b67      	ldr	r3, [pc, #412]	@ (8006818 <HAL_RCC_ClockConfig+0x1c4>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f023 020f 	bic.w	r2, r3, #15
 8006682:	4965      	ldr	r1, [pc, #404]	@ (8006818 <HAL_RCC_ClockConfig+0x1c4>)
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	4313      	orrs	r3, r2
 8006688:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800668a:	4b63      	ldr	r3, [pc, #396]	@ (8006818 <HAL_RCC_ClockConfig+0x1c4>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f003 030f 	and.w	r3, r3, #15
 8006692:	683a      	ldr	r2, [r7, #0]
 8006694:	429a      	cmp	r2, r3
 8006696:	d001      	beq.n	800669c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006698:	2301      	movs	r3, #1
 800669a:	e0b8      	b.n	800680e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f003 0302 	and.w	r3, r3, #2
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d020      	beq.n	80066ea <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f003 0304 	and.w	r3, r3, #4
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d005      	beq.n	80066c0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80066b4:	4b59      	ldr	r3, [pc, #356]	@ (800681c <HAL_RCC_ClockConfig+0x1c8>)
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	4a58      	ldr	r2, [pc, #352]	@ (800681c <HAL_RCC_ClockConfig+0x1c8>)
 80066ba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80066be:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f003 0308 	and.w	r3, r3, #8
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d005      	beq.n	80066d8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80066cc:	4b53      	ldr	r3, [pc, #332]	@ (800681c <HAL_RCC_ClockConfig+0x1c8>)
 80066ce:	689b      	ldr	r3, [r3, #8]
 80066d0:	4a52      	ldr	r2, [pc, #328]	@ (800681c <HAL_RCC_ClockConfig+0x1c8>)
 80066d2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80066d6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80066d8:	4b50      	ldr	r3, [pc, #320]	@ (800681c <HAL_RCC_ClockConfig+0x1c8>)
 80066da:	689b      	ldr	r3, [r3, #8]
 80066dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	689b      	ldr	r3, [r3, #8]
 80066e4:	494d      	ldr	r1, [pc, #308]	@ (800681c <HAL_RCC_ClockConfig+0x1c8>)
 80066e6:	4313      	orrs	r3, r2
 80066e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f003 0301 	and.w	r3, r3, #1
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d040      	beq.n	8006778 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	2b01      	cmp	r3, #1
 80066fc:	d107      	bne.n	800670e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066fe:	4b47      	ldr	r3, [pc, #284]	@ (800681c <HAL_RCC_ClockConfig+0x1c8>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006706:	2b00      	cmp	r3, #0
 8006708:	d115      	bne.n	8006736 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800670a:	2301      	movs	r3, #1
 800670c:	e07f      	b.n	800680e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	2b02      	cmp	r3, #2
 8006714:	d107      	bne.n	8006726 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006716:	4b41      	ldr	r3, [pc, #260]	@ (800681c <HAL_RCC_ClockConfig+0x1c8>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800671e:	2b00      	cmp	r3, #0
 8006720:	d109      	bne.n	8006736 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006722:	2301      	movs	r3, #1
 8006724:	e073      	b.n	800680e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006726:	4b3d      	ldr	r3, [pc, #244]	@ (800681c <HAL_RCC_ClockConfig+0x1c8>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f003 0302 	and.w	r3, r3, #2
 800672e:	2b00      	cmp	r3, #0
 8006730:	d101      	bne.n	8006736 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006732:	2301      	movs	r3, #1
 8006734:	e06b      	b.n	800680e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006736:	4b39      	ldr	r3, [pc, #228]	@ (800681c <HAL_RCC_ClockConfig+0x1c8>)
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	f023 0203 	bic.w	r2, r3, #3
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	4936      	ldr	r1, [pc, #216]	@ (800681c <HAL_RCC_ClockConfig+0x1c8>)
 8006744:	4313      	orrs	r3, r2
 8006746:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006748:	f7fd fde0 	bl	800430c <HAL_GetTick>
 800674c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800674e:	e00a      	b.n	8006766 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006750:	f7fd fddc 	bl	800430c <HAL_GetTick>
 8006754:	4602      	mov	r2, r0
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	1ad3      	subs	r3, r2, r3
 800675a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800675e:	4293      	cmp	r3, r2
 8006760:	d901      	bls.n	8006766 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006762:	2303      	movs	r3, #3
 8006764:	e053      	b.n	800680e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006766:	4b2d      	ldr	r3, [pc, #180]	@ (800681c <HAL_RCC_ClockConfig+0x1c8>)
 8006768:	689b      	ldr	r3, [r3, #8]
 800676a:	f003 020c 	and.w	r2, r3, #12
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	009b      	lsls	r3, r3, #2
 8006774:	429a      	cmp	r2, r3
 8006776:	d1eb      	bne.n	8006750 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006778:	4b27      	ldr	r3, [pc, #156]	@ (8006818 <HAL_RCC_ClockConfig+0x1c4>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f003 030f 	and.w	r3, r3, #15
 8006780:	683a      	ldr	r2, [r7, #0]
 8006782:	429a      	cmp	r2, r3
 8006784:	d210      	bcs.n	80067a8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006786:	4b24      	ldr	r3, [pc, #144]	@ (8006818 <HAL_RCC_ClockConfig+0x1c4>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f023 020f 	bic.w	r2, r3, #15
 800678e:	4922      	ldr	r1, [pc, #136]	@ (8006818 <HAL_RCC_ClockConfig+0x1c4>)
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	4313      	orrs	r3, r2
 8006794:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006796:	4b20      	ldr	r3, [pc, #128]	@ (8006818 <HAL_RCC_ClockConfig+0x1c4>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f003 030f 	and.w	r3, r3, #15
 800679e:	683a      	ldr	r2, [r7, #0]
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d001      	beq.n	80067a8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80067a4:	2301      	movs	r3, #1
 80067a6:	e032      	b.n	800680e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f003 0304 	and.w	r3, r3, #4
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d008      	beq.n	80067c6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80067b4:	4b19      	ldr	r3, [pc, #100]	@ (800681c <HAL_RCC_ClockConfig+0x1c8>)
 80067b6:	689b      	ldr	r3, [r3, #8]
 80067b8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	68db      	ldr	r3, [r3, #12]
 80067c0:	4916      	ldr	r1, [pc, #88]	@ (800681c <HAL_RCC_ClockConfig+0x1c8>)
 80067c2:	4313      	orrs	r3, r2
 80067c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f003 0308 	and.w	r3, r3, #8
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d009      	beq.n	80067e6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80067d2:	4b12      	ldr	r3, [pc, #72]	@ (800681c <HAL_RCC_ClockConfig+0x1c8>)
 80067d4:	689b      	ldr	r3, [r3, #8]
 80067d6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	691b      	ldr	r3, [r3, #16]
 80067de:	00db      	lsls	r3, r3, #3
 80067e0:	490e      	ldr	r1, [pc, #56]	@ (800681c <HAL_RCC_ClockConfig+0x1c8>)
 80067e2:	4313      	orrs	r3, r2
 80067e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80067e6:	f000 f821 	bl	800682c <HAL_RCC_GetSysClockFreq>
 80067ea:	4602      	mov	r2, r0
 80067ec:	4b0b      	ldr	r3, [pc, #44]	@ (800681c <HAL_RCC_ClockConfig+0x1c8>)
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	091b      	lsrs	r3, r3, #4
 80067f2:	f003 030f 	and.w	r3, r3, #15
 80067f6:	490a      	ldr	r1, [pc, #40]	@ (8006820 <HAL_RCC_ClockConfig+0x1cc>)
 80067f8:	5ccb      	ldrb	r3, [r1, r3]
 80067fa:	fa22 f303 	lsr.w	r3, r2, r3
 80067fe:	4a09      	ldr	r2, [pc, #36]	@ (8006824 <HAL_RCC_ClockConfig+0x1d0>)
 8006800:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006802:	4b09      	ldr	r3, [pc, #36]	@ (8006828 <HAL_RCC_ClockConfig+0x1d4>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4618      	mov	r0, r3
 8006808:	f7fd fd3c 	bl	8004284 <HAL_InitTick>

  return HAL_OK;
 800680c:	2300      	movs	r3, #0
}
 800680e:	4618      	mov	r0, r3
 8006810:	3710      	adds	r7, #16
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}
 8006816:	bf00      	nop
 8006818:	40023c00 	.word	0x40023c00
 800681c:	40023800 	.word	0x40023800
 8006820:	08013f50 	.word	0x08013f50
 8006824:	20000000 	.word	0x20000000
 8006828:	20000038 	.word	0x20000038

0800682c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800682c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006830:	b090      	sub	sp, #64	@ 0x40
 8006832:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006834:	2300      	movs	r3, #0
 8006836:	637b      	str	r3, [r7, #52]	@ 0x34
 8006838:	2300      	movs	r3, #0
 800683a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800683c:	2300      	movs	r3, #0
 800683e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8006840:	2300      	movs	r3, #0
 8006842:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006844:	4b59      	ldr	r3, [pc, #356]	@ (80069ac <HAL_RCC_GetSysClockFreq+0x180>)
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	f003 030c 	and.w	r3, r3, #12
 800684c:	2b08      	cmp	r3, #8
 800684e:	d00d      	beq.n	800686c <HAL_RCC_GetSysClockFreq+0x40>
 8006850:	2b08      	cmp	r3, #8
 8006852:	f200 80a1 	bhi.w	8006998 <HAL_RCC_GetSysClockFreq+0x16c>
 8006856:	2b00      	cmp	r3, #0
 8006858:	d002      	beq.n	8006860 <HAL_RCC_GetSysClockFreq+0x34>
 800685a:	2b04      	cmp	r3, #4
 800685c:	d003      	beq.n	8006866 <HAL_RCC_GetSysClockFreq+0x3a>
 800685e:	e09b      	b.n	8006998 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006860:	4b53      	ldr	r3, [pc, #332]	@ (80069b0 <HAL_RCC_GetSysClockFreq+0x184>)
 8006862:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006864:	e09b      	b.n	800699e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006866:	4b53      	ldr	r3, [pc, #332]	@ (80069b4 <HAL_RCC_GetSysClockFreq+0x188>)
 8006868:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800686a:	e098      	b.n	800699e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800686c:	4b4f      	ldr	r3, [pc, #316]	@ (80069ac <HAL_RCC_GetSysClockFreq+0x180>)
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006874:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006876:	4b4d      	ldr	r3, [pc, #308]	@ (80069ac <HAL_RCC_GetSysClockFreq+0x180>)
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800687e:	2b00      	cmp	r3, #0
 8006880:	d028      	beq.n	80068d4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006882:	4b4a      	ldr	r3, [pc, #296]	@ (80069ac <HAL_RCC_GetSysClockFreq+0x180>)
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	099b      	lsrs	r3, r3, #6
 8006888:	2200      	movs	r2, #0
 800688a:	623b      	str	r3, [r7, #32]
 800688c:	627a      	str	r2, [r7, #36]	@ 0x24
 800688e:	6a3b      	ldr	r3, [r7, #32]
 8006890:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006894:	2100      	movs	r1, #0
 8006896:	4b47      	ldr	r3, [pc, #284]	@ (80069b4 <HAL_RCC_GetSysClockFreq+0x188>)
 8006898:	fb03 f201 	mul.w	r2, r3, r1
 800689c:	2300      	movs	r3, #0
 800689e:	fb00 f303 	mul.w	r3, r0, r3
 80068a2:	4413      	add	r3, r2
 80068a4:	4a43      	ldr	r2, [pc, #268]	@ (80069b4 <HAL_RCC_GetSysClockFreq+0x188>)
 80068a6:	fba0 1202 	umull	r1, r2, r0, r2
 80068aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80068ac:	460a      	mov	r2, r1
 80068ae:	62ba      	str	r2, [r7, #40]	@ 0x28
 80068b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80068b2:	4413      	add	r3, r2
 80068b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80068b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068b8:	2200      	movs	r2, #0
 80068ba:	61bb      	str	r3, [r7, #24]
 80068bc:	61fa      	str	r2, [r7, #28]
 80068be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80068c2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80068c6:	f7fa f98f 	bl	8000be8 <__aeabi_uldivmod>
 80068ca:	4602      	mov	r2, r0
 80068cc:	460b      	mov	r3, r1
 80068ce:	4613      	mov	r3, r2
 80068d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80068d2:	e053      	b.n	800697c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80068d4:	4b35      	ldr	r3, [pc, #212]	@ (80069ac <HAL_RCC_GetSysClockFreq+0x180>)
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	099b      	lsrs	r3, r3, #6
 80068da:	2200      	movs	r2, #0
 80068dc:	613b      	str	r3, [r7, #16]
 80068de:	617a      	str	r2, [r7, #20]
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80068e6:	f04f 0b00 	mov.w	fp, #0
 80068ea:	4652      	mov	r2, sl
 80068ec:	465b      	mov	r3, fp
 80068ee:	f04f 0000 	mov.w	r0, #0
 80068f2:	f04f 0100 	mov.w	r1, #0
 80068f6:	0159      	lsls	r1, r3, #5
 80068f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80068fc:	0150      	lsls	r0, r2, #5
 80068fe:	4602      	mov	r2, r0
 8006900:	460b      	mov	r3, r1
 8006902:	ebb2 080a 	subs.w	r8, r2, sl
 8006906:	eb63 090b 	sbc.w	r9, r3, fp
 800690a:	f04f 0200 	mov.w	r2, #0
 800690e:	f04f 0300 	mov.w	r3, #0
 8006912:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006916:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800691a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800691e:	ebb2 0408 	subs.w	r4, r2, r8
 8006922:	eb63 0509 	sbc.w	r5, r3, r9
 8006926:	f04f 0200 	mov.w	r2, #0
 800692a:	f04f 0300 	mov.w	r3, #0
 800692e:	00eb      	lsls	r3, r5, #3
 8006930:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006934:	00e2      	lsls	r2, r4, #3
 8006936:	4614      	mov	r4, r2
 8006938:	461d      	mov	r5, r3
 800693a:	eb14 030a 	adds.w	r3, r4, sl
 800693e:	603b      	str	r3, [r7, #0]
 8006940:	eb45 030b 	adc.w	r3, r5, fp
 8006944:	607b      	str	r3, [r7, #4]
 8006946:	f04f 0200 	mov.w	r2, #0
 800694a:	f04f 0300 	mov.w	r3, #0
 800694e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006952:	4629      	mov	r1, r5
 8006954:	028b      	lsls	r3, r1, #10
 8006956:	4621      	mov	r1, r4
 8006958:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800695c:	4621      	mov	r1, r4
 800695e:	028a      	lsls	r2, r1, #10
 8006960:	4610      	mov	r0, r2
 8006962:	4619      	mov	r1, r3
 8006964:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006966:	2200      	movs	r2, #0
 8006968:	60bb      	str	r3, [r7, #8]
 800696a:	60fa      	str	r2, [r7, #12]
 800696c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006970:	f7fa f93a 	bl	8000be8 <__aeabi_uldivmod>
 8006974:	4602      	mov	r2, r0
 8006976:	460b      	mov	r3, r1
 8006978:	4613      	mov	r3, r2
 800697a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800697c:	4b0b      	ldr	r3, [pc, #44]	@ (80069ac <HAL_RCC_GetSysClockFreq+0x180>)
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	0c1b      	lsrs	r3, r3, #16
 8006982:	f003 0303 	and.w	r3, r3, #3
 8006986:	3301      	adds	r3, #1
 8006988:	005b      	lsls	r3, r3, #1
 800698a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800698c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800698e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006990:	fbb2 f3f3 	udiv	r3, r2, r3
 8006994:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006996:	e002      	b.n	800699e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006998:	4b05      	ldr	r3, [pc, #20]	@ (80069b0 <HAL_RCC_GetSysClockFreq+0x184>)
 800699a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800699c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800699e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3740      	adds	r7, #64	@ 0x40
 80069a4:	46bd      	mov	sp, r7
 80069a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80069aa:	bf00      	nop
 80069ac:	40023800 	.word	0x40023800
 80069b0:	00f42400 	.word	0x00f42400
 80069b4:	017d7840 	.word	0x017d7840

080069b8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80069b8:	b480      	push	{r7}
 80069ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80069bc:	4b03      	ldr	r3, [pc, #12]	@ (80069cc <HAL_RCC_GetHCLKFreq+0x14>)
 80069be:	681b      	ldr	r3, [r3, #0]
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	46bd      	mov	sp, r7
 80069c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c8:	4770      	bx	lr
 80069ca:	bf00      	nop
 80069cc:	20000000 	.word	0x20000000

080069d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80069d4:	f7ff fff0 	bl	80069b8 <HAL_RCC_GetHCLKFreq>
 80069d8:	4602      	mov	r2, r0
 80069da:	4b05      	ldr	r3, [pc, #20]	@ (80069f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80069dc:	689b      	ldr	r3, [r3, #8]
 80069de:	0a9b      	lsrs	r3, r3, #10
 80069e0:	f003 0307 	and.w	r3, r3, #7
 80069e4:	4903      	ldr	r1, [pc, #12]	@ (80069f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80069e6:	5ccb      	ldrb	r3, [r1, r3]
 80069e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	bd80      	pop	{r7, pc}
 80069f0:	40023800 	.word	0x40023800
 80069f4:	08013f60 	.word	0x08013f60

080069f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80069fc:	f7ff ffdc 	bl	80069b8 <HAL_RCC_GetHCLKFreq>
 8006a00:	4602      	mov	r2, r0
 8006a02:	4b05      	ldr	r3, [pc, #20]	@ (8006a18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006a04:	689b      	ldr	r3, [r3, #8]
 8006a06:	0b5b      	lsrs	r3, r3, #13
 8006a08:	f003 0307 	and.w	r3, r3, #7
 8006a0c:	4903      	ldr	r1, [pc, #12]	@ (8006a1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006a0e:	5ccb      	ldrb	r3, [r1, r3]
 8006a10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	bd80      	pop	{r7, pc}
 8006a18:	40023800 	.word	0x40023800
 8006a1c:	08013f60 	.word	0x08013f60

08006a20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b088      	sub	sp, #32
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006a30:	2300      	movs	r3, #0
 8006a32:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006a34:	2300      	movs	r3, #0
 8006a36:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006a38:	2300      	movs	r3, #0
 8006a3a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f003 0301 	and.w	r3, r3, #1
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d012      	beq.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006a48:	4b69      	ldr	r3, [pc, #420]	@ (8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	4a68      	ldr	r2, [pc, #416]	@ (8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a4e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006a52:	6093      	str	r3, [r2, #8]
 8006a54:	4b66      	ldr	r3, [pc, #408]	@ (8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a56:	689a      	ldr	r2, [r3, #8]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a5c:	4964      	ldr	r1, [pc, #400]	@ (8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d101      	bne.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d017      	beq.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006a7a:	4b5d      	ldr	r3, [pc, #372]	@ (8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006a80:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a88:	4959      	ldr	r1, [pc, #356]	@ (8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a94:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a98:	d101      	bne.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d101      	bne.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d017      	beq.n	8006ae6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006ab6:	4b4e      	ldr	r3, [pc, #312]	@ (8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ab8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006abc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ac4:	494a      	ldr	r1, [pc, #296]	@ (8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ad0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006ad4:	d101      	bne.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d101      	bne.n	8006ae6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d001      	beq.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006af2:	2301      	movs	r3, #1
 8006af4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f003 0320 	and.w	r3, r3, #32
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	f000 808b 	beq.w	8006c1a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006b04:	4b3a      	ldr	r3, [pc, #232]	@ (8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b08:	4a39      	ldr	r2, [pc, #228]	@ (8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b0e:	6413      	str	r3, [r2, #64]	@ 0x40
 8006b10:	4b37      	ldr	r3, [pc, #220]	@ (8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b18:	60bb      	str	r3, [r7, #8]
 8006b1a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006b1c:	4b35      	ldr	r3, [pc, #212]	@ (8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a34      	ldr	r2, [pc, #208]	@ (8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006b22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b28:	f7fd fbf0 	bl	800430c <HAL_GetTick>
 8006b2c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006b2e:	e008      	b.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b30:	f7fd fbec 	bl	800430c <HAL_GetTick>
 8006b34:	4602      	mov	r2, r0
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	1ad3      	subs	r3, r2, r3
 8006b3a:	2b64      	cmp	r3, #100	@ 0x64
 8006b3c:	d901      	bls.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006b3e:	2303      	movs	r3, #3
 8006b40:	e357      	b.n	80071f2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006b42:	4b2c      	ldr	r3, [pc, #176]	@ (8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d0f0      	beq.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006b4e:	4b28      	ldr	r3, [pc, #160]	@ (8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b56:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d035      	beq.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b66:	693a      	ldr	r2, [r7, #16]
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	d02e      	beq.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006b6c:	4b20      	ldr	r3, [pc, #128]	@ (8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b74:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006b76:	4b1e      	ldr	r3, [pc, #120]	@ (8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b7a:	4a1d      	ldr	r2, [pc, #116]	@ (8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b80:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006b82:	4b1b      	ldr	r3, [pc, #108]	@ (8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b86:	4a1a      	ldr	r2, [pc, #104]	@ (8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b8c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006b8e:	4a18      	ldr	r2, [pc, #96]	@ (8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b90:	693b      	ldr	r3, [r7, #16]
 8006b92:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006b94:	4b16      	ldr	r3, [pc, #88]	@ (8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b98:	f003 0301 	and.w	r3, r3, #1
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	d114      	bne.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ba0:	f7fd fbb4 	bl	800430c <HAL_GetTick>
 8006ba4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ba6:	e00a      	b.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ba8:	f7fd fbb0 	bl	800430c <HAL_GetTick>
 8006bac:	4602      	mov	r2, r0
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	1ad3      	subs	r3, r2, r3
 8006bb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d901      	bls.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006bba:	2303      	movs	r3, #3
 8006bbc:	e319      	b.n	80071f2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006bbe:	4b0c      	ldr	r3, [pc, #48]	@ (8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006bc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006bc2:	f003 0302 	and.w	r3, r3, #2
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d0ee      	beq.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006bd2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006bd6:	d111      	bne.n	8006bfc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006bd8:	4b05      	ldr	r3, [pc, #20]	@ (8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006be4:	4b04      	ldr	r3, [pc, #16]	@ (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006be6:	400b      	ands	r3, r1
 8006be8:	4901      	ldr	r1, [pc, #4]	@ (8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006bea:	4313      	orrs	r3, r2
 8006bec:	608b      	str	r3, [r1, #8]
 8006bee:	e00b      	b.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006bf0:	40023800 	.word	0x40023800
 8006bf4:	40007000 	.word	0x40007000
 8006bf8:	0ffffcff 	.word	0x0ffffcff
 8006bfc:	4baa      	ldr	r3, [pc, #680]	@ (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006bfe:	689b      	ldr	r3, [r3, #8]
 8006c00:	4aa9      	ldr	r2, [pc, #676]	@ (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c02:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006c06:	6093      	str	r3, [r2, #8]
 8006c08:	4ba7      	ldr	r3, [pc, #668]	@ (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c0a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c14:	49a4      	ldr	r1, [pc, #656]	@ (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c16:	4313      	orrs	r3, r2
 8006c18:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f003 0310 	and.w	r3, r3, #16
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d010      	beq.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006c26:	4ba0      	ldr	r3, [pc, #640]	@ (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006c2c:	4a9e      	ldr	r2, [pc, #632]	@ (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c2e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006c32:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8006c36:	4b9c      	ldr	r3, [pc, #624]	@ (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c38:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c40:	4999      	ldr	r1, [pc, #612]	@ (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c42:	4313      	orrs	r3, r2
 8006c44:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d00a      	beq.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006c54:	4b94      	ldr	r3, [pc, #592]	@ (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c5a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c62:	4991      	ldr	r1, [pc, #580]	@ (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c64:	4313      	orrs	r3, r2
 8006c66:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d00a      	beq.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006c76:	4b8c      	ldr	r3, [pc, #560]	@ (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c7c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006c84:	4988      	ldr	r1, [pc, #544]	@ (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c86:	4313      	orrs	r3, r2
 8006c88:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d00a      	beq.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006c98:	4b83      	ldr	r3, [pc, #524]	@ (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c9e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006ca6:	4980      	ldr	r1, [pc, #512]	@ (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d00a      	beq.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006cba:	4b7b      	ldr	r3, [pc, #492]	@ (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cc0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cc8:	4977      	ldr	r1, [pc, #476]	@ (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d00a      	beq.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006cdc:	4b72      	ldr	r3, [pc, #456]	@ (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ce2:	f023 0203 	bic.w	r2, r3, #3
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cea:	496f      	ldr	r1, [pc, #444]	@ (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006cec:	4313      	orrs	r3, r2
 8006cee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d00a      	beq.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006cfe:	4b6a      	ldr	r3, [pc, #424]	@ (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d04:	f023 020c 	bic.w	r2, r3, #12
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d0c:	4966      	ldr	r1, [pc, #408]	@ (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d00a      	beq.n	8006d36 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006d20:	4b61      	ldr	r3, [pc, #388]	@ (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d26:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d2e:	495e      	ldr	r1, [pc, #376]	@ (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d30:	4313      	orrs	r3, r2
 8006d32:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d00a      	beq.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006d42:	4b59      	ldr	r3, [pc, #356]	@ (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d48:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d50:	4955      	ldr	r1, [pc, #340]	@ (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d52:	4313      	orrs	r3, r2
 8006d54:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d00a      	beq.n	8006d7a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006d64:	4b50      	ldr	r3, [pc, #320]	@ (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d6a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d72:	494d      	ldr	r1, [pc, #308]	@ (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d74:	4313      	orrs	r3, r2
 8006d76:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d00a      	beq.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006d86:	4b48      	ldr	r3, [pc, #288]	@ (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d8c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d94:	4944      	ldr	r1, [pc, #272]	@ (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d96:	4313      	orrs	r3, r2
 8006d98:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d00a      	beq.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006da8:	4b3f      	ldr	r3, [pc, #252]	@ (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006dae:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006db6:	493c      	ldr	r1, [pc, #240]	@ (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006db8:	4313      	orrs	r3, r2
 8006dba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d00a      	beq.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006dca:	4b37      	ldr	r3, [pc, #220]	@ (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006dd0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006dd8:	4933      	ldr	r1, [pc, #204]	@ (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d00a      	beq.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006dec:	4b2e      	ldr	r3, [pc, #184]	@ (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006df2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006dfa:	492b      	ldr	r1, [pc, #172]	@ (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d011      	beq.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006e0e:	4b26      	ldr	r3, [pc, #152]	@ (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e14:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006e1c:	4922      	ldr	r1, [pc, #136]	@ (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006e28:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006e2c:	d101      	bne.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8006e2e:	2301      	movs	r3, #1
 8006e30:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f003 0308 	and.w	r3, r3, #8
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d001      	beq.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d00a      	beq.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006e4e:	4b16      	ldr	r3, [pc, #88]	@ (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e54:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e5c:	4912      	ldr	r1, [pc, #72]	@ (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d00b      	beq.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006e70:	4b0d      	ldr	r3, [pc, #52]	@ (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e76:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e80:	4909      	ldr	r1, [pc, #36]	@ (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006e82:	4313      	orrs	r3, r2
 8006e84:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006e88:	69fb      	ldr	r3, [r7, #28]
 8006e8a:	2b01      	cmp	r3, #1
 8006e8c:	d006      	beq.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	f000 80d9 	beq.w	800704e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006e9c:	4b02      	ldr	r3, [pc, #8]	@ (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a01      	ldr	r2, [pc, #4]	@ (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006ea2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006ea6:	e001      	b.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8006ea8:	40023800 	.word	0x40023800
 8006eac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006eae:	f7fd fa2d 	bl	800430c <HAL_GetTick>
 8006eb2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006eb4:	e008      	b.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006eb6:	f7fd fa29 	bl	800430c <HAL_GetTick>
 8006eba:	4602      	mov	r2, r0
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	1ad3      	subs	r3, r2, r3
 8006ec0:	2b64      	cmp	r3, #100	@ 0x64
 8006ec2:	d901      	bls.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006ec4:	2303      	movs	r3, #3
 8006ec6:	e194      	b.n	80071f2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006ec8:	4b6c      	ldr	r3, [pc, #432]	@ (800707c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d1f0      	bne.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f003 0301 	and.w	r3, r3, #1
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d021      	beq.n	8006f24 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d11d      	bne.n	8006f24 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006ee8:	4b64      	ldr	r3, [pc, #400]	@ (800707c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006eea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006eee:	0c1b      	lsrs	r3, r3, #16
 8006ef0:	f003 0303 	and.w	r3, r3, #3
 8006ef4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006ef6:	4b61      	ldr	r3, [pc, #388]	@ (800707c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006ef8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006efc:	0e1b      	lsrs	r3, r3, #24
 8006efe:	f003 030f 	and.w	r3, r3, #15
 8006f02:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	019a      	lsls	r2, r3, #6
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	041b      	lsls	r3, r3, #16
 8006f0e:	431a      	orrs	r2, r3
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	061b      	lsls	r3, r3, #24
 8006f14:	431a      	orrs	r2, r3
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	689b      	ldr	r3, [r3, #8]
 8006f1a:	071b      	lsls	r3, r3, #28
 8006f1c:	4957      	ldr	r1, [pc, #348]	@ (800707c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d004      	beq.n	8006f3a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f34:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f38:	d00a      	beq.n	8006f50 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d02e      	beq.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f4a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006f4e:	d129      	bne.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006f50:	4b4a      	ldr	r3, [pc, #296]	@ (800707c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006f52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f56:	0c1b      	lsrs	r3, r3, #16
 8006f58:	f003 0303 	and.w	r3, r3, #3
 8006f5c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006f5e:	4b47      	ldr	r3, [pc, #284]	@ (800707c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006f60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f64:	0f1b      	lsrs	r3, r3, #28
 8006f66:	f003 0307 	and.w	r3, r3, #7
 8006f6a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	019a      	lsls	r2, r3, #6
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	041b      	lsls	r3, r3, #16
 8006f76:	431a      	orrs	r2, r3
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	68db      	ldr	r3, [r3, #12]
 8006f7c:	061b      	lsls	r3, r3, #24
 8006f7e:	431a      	orrs	r2, r3
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	071b      	lsls	r3, r3, #28
 8006f84:	493d      	ldr	r1, [pc, #244]	@ (800707c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006f86:	4313      	orrs	r3, r2
 8006f88:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006f8c:	4b3b      	ldr	r3, [pc, #236]	@ (800707c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006f8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006f92:	f023 021f 	bic.w	r2, r3, #31
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f9a:	3b01      	subs	r3, #1
 8006f9c:	4937      	ldr	r1, [pc, #220]	@ (800707c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d01d      	beq.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006fb0:	4b32      	ldr	r3, [pc, #200]	@ (800707c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006fb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006fb6:	0e1b      	lsrs	r3, r3, #24
 8006fb8:	f003 030f 	and.w	r3, r3, #15
 8006fbc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006fbe:	4b2f      	ldr	r3, [pc, #188]	@ (800707c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006fc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006fc4:	0f1b      	lsrs	r3, r3, #28
 8006fc6:	f003 0307 	and.w	r3, r3, #7
 8006fca:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	685b      	ldr	r3, [r3, #4]
 8006fd0:	019a      	lsls	r2, r3, #6
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	691b      	ldr	r3, [r3, #16]
 8006fd6:	041b      	lsls	r3, r3, #16
 8006fd8:	431a      	orrs	r2, r3
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	061b      	lsls	r3, r3, #24
 8006fde:	431a      	orrs	r2, r3
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	071b      	lsls	r3, r3, #28
 8006fe4:	4925      	ldr	r1, [pc, #148]	@ (800707c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d011      	beq.n	800701c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	019a      	lsls	r2, r3, #6
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	691b      	ldr	r3, [r3, #16]
 8007002:	041b      	lsls	r3, r3, #16
 8007004:	431a      	orrs	r2, r3
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	68db      	ldr	r3, [r3, #12]
 800700a:	061b      	lsls	r3, r3, #24
 800700c:	431a      	orrs	r2, r3
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	689b      	ldr	r3, [r3, #8]
 8007012:	071b      	lsls	r3, r3, #28
 8007014:	4919      	ldr	r1, [pc, #100]	@ (800707c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007016:	4313      	orrs	r3, r2
 8007018:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800701c:	4b17      	ldr	r3, [pc, #92]	@ (800707c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a16      	ldr	r2, [pc, #88]	@ (800707c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007022:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007026:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007028:	f7fd f970 	bl	800430c <HAL_GetTick>
 800702c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800702e:	e008      	b.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007030:	f7fd f96c 	bl	800430c <HAL_GetTick>
 8007034:	4602      	mov	r2, r0
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	1ad3      	subs	r3, r2, r3
 800703a:	2b64      	cmp	r3, #100	@ 0x64
 800703c:	d901      	bls.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800703e:	2303      	movs	r3, #3
 8007040:	e0d7      	b.n	80071f2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007042:	4b0e      	ldr	r3, [pc, #56]	@ (800707c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800704a:	2b00      	cmp	r3, #0
 800704c:	d0f0      	beq.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800704e:	69bb      	ldr	r3, [r7, #24]
 8007050:	2b01      	cmp	r3, #1
 8007052:	f040 80cd 	bne.w	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007056:	4b09      	ldr	r3, [pc, #36]	@ (800707c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a08      	ldr	r2, [pc, #32]	@ (800707c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800705c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007060:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007062:	f7fd f953 	bl	800430c <HAL_GetTick>
 8007066:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007068:	e00a      	b.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800706a:	f7fd f94f 	bl	800430c <HAL_GetTick>
 800706e:	4602      	mov	r2, r0
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	1ad3      	subs	r3, r2, r3
 8007074:	2b64      	cmp	r3, #100	@ 0x64
 8007076:	d903      	bls.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007078:	2303      	movs	r3, #3
 800707a:	e0ba      	b.n	80071f2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800707c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007080:	4b5e      	ldr	r3, [pc, #376]	@ (80071fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007088:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800708c:	d0ed      	beq.n	800706a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007096:	2b00      	cmp	r3, #0
 8007098:	d003      	beq.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d009      	beq.n	80070b6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d02e      	beq.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d12a      	bne.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80070b6:	4b51      	ldr	r3, [pc, #324]	@ (80071fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80070b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070bc:	0c1b      	lsrs	r3, r3, #16
 80070be:	f003 0303 	and.w	r3, r3, #3
 80070c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80070c4:	4b4d      	ldr	r3, [pc, #308]	@ (80071fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80070c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070ca:	0f1b      	lsrs	r3, r3, #28
 80070cc:	f003 0307 	and.w	r3, r3, #7
 80070d0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	695b      	ldr	r3, [r3, #20]
 80070d6:	019a      	lsls	r2, r3, #6
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	041b      	lsls	r3, r3, #16
 80070dc:	431a      	orrs	r2, r3
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	699b      	ldr	r3, [r3, #24]
 80070e2:	061b      	lsls	r3, r3, #24
 80070e4:	431a      	orrs	r2, r3
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	071b      	lsls	r3, r3, #28
 80070ea:	4944      	ldr	r1, [pc, #272]	@ (80071fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80070ec:	4313      	orrs	r3, r2
 80070ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80070f2:	4b42      	ldr	r3, [pc, #264]	@ (80071fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80070f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80070f8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007100:	3b01      	subs	r3, #1
 8007102:	021b      	lsls	r3, r3, #8
 8007104:	493d      	ldr	r1, [pc, #244]	@ (80071fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007106:	4313      	orrs	r3, r2
 8007108:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007114:	2b00      	cmp	r3, #0
 8007116:	d022      	beq.n	800715e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800711c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007120:	d11d      	bne.n	800715e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007122:	4b36      	ldr	r3, [pc, #216]	@ (80071fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007124:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007128:	0e1b      	lsrs	r3, r3, #24
 800712a:	f003 030f 	and.w	r3, r3, #15
 800712e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007130:	4b32      	ldr	r3, [pc, #200]	@ (80071fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007132:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007136:	0f1b      	lsrs	r3, r3, #28
 8007138:	f003 0307 	and.w	r3, r3, #7
 800713c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	695b      	ldr	r3, [r3, #20]
 8007142:	019a      	lsls	r2, r3, #6
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6a1b      	ldr	r3, [r3, #32]
 8007148:	041b      	lsls	r3, r3, #16
 800714a:	431a      	orrs	r2, r3
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	061b      	lsls	r3, r3, #24
 8007150:	431a      	orrs	r2, r3
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	071b      	lsls	r3, r3, #28
 8007156:	4929      	ldr	r1, [pc, #164]	@ (80071fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007158:	4313      	orrs	r3, r2
 800715a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f003 0308 	and.w	r3, r3, #8
 8007166:	2b00      	cmp	r3, #0
 8007168:	d028      	beq.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800716a:	4b24      	ldr	r3, [pc, #144]	@ (80071fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800716c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007170:	0e1b      	lsrs	r3, r3, #24
 8007172:	f003 030f 	and.w	r3, r3, #15
 8007176:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007178:	4b20      	ldr	r3, [pc, #128]	@ (80071fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800717a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800717e:	0c1b      	lsrs	r3, r3, #16
 8007180:	f003 0303 	and.w	r3, r3, #3
 8007184:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	695b      	ldr	r3, [r3, #20]
 800718a:	019a      	lsls	r2, r3, #6
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	041b      	lsls	r3, r3, #16
 8007190:	431a      	orrs	r2, r3
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	061b      	lsls	r3, r3, #24
 8007196:	431a      	orrs	r2, r3
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	69db      	ldr	r3, [r3, #28]
 800719c:	071b      	lsls	r3, r3, #28
 800719e:	4917      	ldr	r1, [pc, #92]	@ (80071fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80071a0:	4313      	orrs	r3, r2
 80071a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80071a6:	4b15      	ldr	r3, [pc, #84]	@ (80071fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80071a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80071ac:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071b4:	4911      	ldr	r1, [pc, #68]	@ (80071fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80071b6:	4313      	orrs	r3, r2
 80071b8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80071bc:	4b0f      	ldr	r3, [pc, #60]	@ (80071fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a0e      	ldr	r2, [pc, #56]	@ (80071fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80071c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80071c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80071c8:	f7fd f8a0 	bl	800430c <HAL_GetTick>
 80071cc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80071ce:	e008      	b.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80071d0:	f7fd f89c 	bl	800430c <HAL_GetTick>
 80071d4:	4602      	mov	r2, r0
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	1ad3      	subs	r3, r2, r3
 80071da:	2b64      	cmp	r3, #100	@ 0x64
 80071dc:	d901      	bls.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80071de:	2303      	movs	r3, #3
 80071e0:	e007      	b.n	80071f2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80071e2:	4b06      	ldr	r3, [pc, #24]	@ (80071fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80071ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80071ee:	d1ef      	bne.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80071f0:	2300      	movs	r3, #0
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3720      	adds	r7, #32
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}
 80071fa:	bf00      	nop
 80071fc:	40023800 	.word	0x40023800

08007200 <HAL_RCCEx_GetPeriphCLKConfig>:
  *         RCC configuration registers.
  * @param  PeriphClkInit pointer to the configured RCC_PeriphCLKInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007200:	b480      	push	{r7}
 8007202:	b085      	sub	sp, #20
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0;
 8007208:	2300      	movs	r3, #0
 800720a:	60fb      	str	r3, [r7, #12]
                                        RCC_PERIPHCLK_USART6   | RCC_PERIPHCLK_UART7    |\
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48    | RCC_PERIPHCLK_SDMMC2   |\
                                        RCC_PERIPHCLK_DFSDM1   | RCC_PERIPHCLK_DFSDM1_AUDIO;
#else
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	4a80      	ldr	r2, [pc, #512]	@ (8007410 <HAL_RCCEx_GetPeriphCLKConfig+0x210>)
 8007210:	601a      	str	r2, [r3, #0]
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8007212:	4b80      	ldr	r3, [pc, #512]	@ (8007414 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007214:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007218:	099b      	lsrs	r3, r3, #6
 800721a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007222:	4b7c      	ldr	r3, [pc, #496]	@ (8007414 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007224:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007228:	0c1b      	lsrs	r3, r3, #16
 800722a:	f003 0203 	and.w	r2, r3, #3
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007232:	4b78      	ldr	r3, [pc, #480]	@ (8007414 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007234:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007238:	0e1b      	lsrs	r3, r3, #24
 800723a:	f003 020f 	and.w	r2, r3, #15
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007242:	4b74      	ldr	r3, [pc, #464]	@ (8007414 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007244:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007248:	0f1b      	lsrs	r3, r3, #28
 800724a:	f003 0207 	and.w	r2, r3, #7
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	609a      	str	r2, [r3, #8]

  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLSAICFGR_PLLSAIN_Pos);
 8007252:	4b70      	ldr	r3, [pc, #448]	@ (8007414 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007254:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007258:	099b      	lsrs	r3, r3, #6
 800725a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007262:	4b6c      	ldr	r3, [pc, #432]	@ (8007414 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007264:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007268:	0c1b      	lsrs	r3, r3, #16
 800726a:	f003 0203 	and.w	r2, r3, #3
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	621a      	str	r2, [r3, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007272:	4b68      	ldr	r3, [pc, #416]	@ (8007414 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007274:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007278:	0e1b      	lsrs	r3, r3, #24
 800727a:	f003 020f 	and.w	r2, r3, #15
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	619a      	str	r2, [r3, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007282:	4b64      	ldr	r3, [pc, #400]	@ (8007414 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007284:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007288:	0f1b      	lsrs	r3, r3, #28
 800728a:	f003 0207 	and.w	r2, r3, #7
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	61da      	str	r2, [r3, #28]

  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> RCC_DCKCFGR1_PLLI2SDIVQ_Pos);
 8007292:	4b60      	ldr	r3, [pc, #384]	@ (8007414 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007294:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007298:	f003 021f 	and.w	r2, r3, #31
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	625a      	str	r2, [r3, #36]	@ 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> RCC_DCKCFGR1_PLLSAIDIVQ_Pos);
 80072a0:	4b5c      	ldr	r3, [pc, #368]	@ (8007414 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80072a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80072a6:	0a1b      	lsrs	r3, r3, #8
 80072a8:	f003 021f 	and.w	r2, r3, #31
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	629a      	str	r2, [r3, #40]	@ 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> RCC_DCKCFGR1_PLLSAIDIVR_Pos);
 80072b0:	4b58      	ldr	r3, [pc, #352]	@ (8007414 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80072b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80072b6:	0c1b      	lsrs	r3, r3, #16
 80072b8:	f003 0203 	and.w	r2, r3, #3
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 80072c0:	4b54      	ldr	r3, [pc, #336]	@ (8007414 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80072c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80072c6:	f403 1240 	and.w	r2, r3, #3145728	@ 0x300000
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 80072ce:	4b51      	ldr	r3, [pc, #324]	@ (8007414 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80072d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80072d4:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
 80072dc:	4b4d      	ldr	r3, [pc, #308]	@ (8007414 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80072de:	689b      	ldr	r3, [r3, #8]
 80072e0:	f403 0200 	and.w	r2, r3, #8388608	@ 0x800000
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 80072e8:	4b4a      	ldr	r3, [pc, #296]	@ (8007414 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80072ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072ee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
 80072f6:	4b47      	ldr	r3, [pc, #284]	@ (8007414 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80072f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072fc:	f403 2240 	and.w	r2, r3, #786432	@ 0xc0000
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
 8007304:	4b43      	ldr	r3, [pc, #268]	@ (8007414 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007306:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800730a:	f403 1240 	and.w	r2, r3, #3145728	@ 0x300000
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
 8007312:	4b40      	ldr	r3, [pc, #256]	@ (8007414 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007314:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007318:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 8007320:	4b3c      	ldr	r3, [pc, #240]	@ (8007414 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007322:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007326:	f003 0203 	and.w	r2, r3, #3
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 800732e:	4b39      	ldr	r3, [pc, #228]	@ (8007414 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007330:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007334:	f003 020c 	and.w	r2, r3, #12
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 800733c:	4b35      	ldr	r3, [pc, #212]	@ (8007414 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800733e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007342:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
 800734a:	4b32      	ldr	r3, [pc, #200]	@ (8007414 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800734c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007350:	f003 02c0 	and.w	r2, r3, #192	@ 0xc0
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
 8007358:	4b2e      	ldr	r3, [pc, #184]	@ (8007414 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800735a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800735e:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
 8007366:	4b2b      	ldr	r3, [pc, #172]	@ (8007414 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007368:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800736c:	f403 6240 	and.w	r2, r3, #3072	@ 0xc00
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
 8007374:	4b27      	ldr	r3, [pc, #156]	@ (8007414 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007376:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800737a:	f403 5240 	and.w	r2, r3, #12288	@ 0x3000
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
 8007382:	4b24      	ldr	r3, [pc, #144]	@ (8007414 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007384:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007388:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 8007390:	4b20      	ldr	r3, [pc, #128]	@ (8007414 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007392:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007396:	f003 7240 	and.w	r2, r3, #50331648	@ 0x3000000
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 800739e:	4b1d      	ldr	r3, [pc, #116]	@ (8007414 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80073a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073a4:	f003 6280 	and.w	r2, r3, #67108864	@ 0x4000000
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 80073ac:	4b19      	ldr	r3, [pc, #100]	@ (8007414 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80073ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073b2:	f003 6200 	and.w	r2, r3, #134217728	@ 0x8000000
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
 80073ba:	4b16      	ldr	r3, [pc, #88]	@ (8007414 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80073bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073c0:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 80073ca:	4b12      	ldr	r3, [pc, #72]	@ (8007414 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80073cc:	689b      	ldr	r3, [r3, #8]
 80073ce:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80073d2:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 80073d4:	4b0f      	ldr	r3, [pc, #60]	@ (8007414 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80073d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073d8:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	431a      	orrs	r2, r3
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
 80073e4:	4b0b      	ldr	r3, [pc, #44]	@ (8007414 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80073e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80073ea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d103      	bne.n	80073fa <HAL_RCCEx_GetPeriphCLKConfig+0x1fa>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2200      	movs	r2, #0
 80073f6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 80073f8:	e003      	b.n	8007402 <HAL_RCCEx_GetPeriphCLKConfig+0x202>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007400:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8007402:	bf00      	nop
 8007404:	3714      	adds	r7, #20
 8007406:	46bd      	mov	sp, r7
 8007408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740c:	4770      	bx	lr
 800740e:	bf00      	nop
 8007410:	00fffff1 	.word	0x00fffff1
 8007414:	40023800 	.word	0x40023800

08007418 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007418:	b480      	push	{r7}
 800741a:	b087      	sub	sp, #28
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8007420:	2300      	movs	r3, #0
 8007422:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8007424:	2300      	movs	r3, #0
 8007426:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8007428:	2300      	movs	r3, #0
 800742a:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 800742c:	2300      	movs	r3, #0
 800742e:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007436:	f040 808d 	bne.w	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 800743a:	4b93      	ldr	r3, [pc, #588]	@ (8007688 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800743c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007440:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8007448:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007450:	d07c      	beq.n	800754c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007458:	d87b      	bhi.n	8007552 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d004      	beq.n	800746a <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007466:	d039      	beq.n	80074dc <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8007468:	e073      	b.n	8007552 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800746a:	4b87      	ldr	r3, [pc, #540]	@ (8007688 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800746c:	685b      	ldr	r3, [r3, #4]
 800746e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007472:	2b00      	cmp	r3, #0
 8007474:	d108      	bne.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007476:	4b84      	ldr	r3, [pc, #528]	@ (8007688 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800747e:	4a83      	ldr	r2, [pc, #524]	@ (800768c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8007480:	fbb2 f3f3 	udiv	r3, r2, r3
 8007484:	613b      	str	r3, [r7, #16]
 8007486:	e007      	b.n	8007498 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007488:	4b7f      	ldr	r3, [pc, #508]	@ (8007688 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007490:	4a7f      	ldr	r2, [pc, #508]	@ (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007492:	fbb2 f3f3 	udiv	r3, r2, r3
 8007496:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8007498:	4b7b      	ldr	r3, [pc, #492]	@ (8007688 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800749a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800749e:	0e1b      	lsrs	r3, r3, #24
 80074a0:	f003 030f 	and.w	r3, r3, #15
 80074a4:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80074a6:	4b78      	ldr	r3, [pc, #480]	@ (8007688 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80074a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074ac:	099b      	lsrs	r3, r3, #6
 80074ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074b2:	693a      	ldr	r2, [r7, #16]
 80074b4:	fb03 f202 	mul.w	r2, r3, r2
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80074be:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80074c0:	4b71      	ldr	r3, [pc, #452]	@ (8007688 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80074c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80074c6:	0a1b      	lsrs	r3, r3, #8
 80074c8:	f003 031f 	and.w	r3, r3, #31
 80074cc:	3301      	adds	r3, #1
 80074ce:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80074d0:	697a      	ldr	r2, [r7, #20]
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80074d8:	617b      	str	r3, [r7, #20]
        break;
 80074da:	e03b      	b.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80074dc:	4b6a      	ldr	r3, [pc, #424]	@ (8007688 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d108      	bne.n	80074fa <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80074e8:	4b67      	ldr	r3, [pc, #412]	@ (8007688 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80074ea:	685b      	ldr	r3, [r3, #4]
 80074ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80074f0:	4a66      	ldr	r2, [pc, #408]	@ (800768c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80074f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80074f6:	613b      	str	r3, [r7, #16]
 80074f8:	e007      	b.n	800750a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80074fa:	4b63      	ldr	r3, [pc, #396]	@ (8007688 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80074fc:	685b      	ldr	r3, [r3, #4]
 80074fe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007502:	4a63      	ldr	r2, [pc, #396]	@ (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007504:	fbb2 f3f3 	udiv	r3, r2, r3
 8007508:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800750a:	4b5f      	ldr	r3, [pc, #380]	@ (8007688 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800750c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007510:	0e1b      	lsrs	r3, r3, #24
 8007512:	f003 030f 	and.w	r3, r3, #15
 8007516:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8007518:	4b5b      	ldr	r3, [pc, #364]	@ (8007688 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800751a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800751e:	099b      	lsrs	r3, r3, #6
 8007520:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007524:	693a      	ldr	r2, [r7, #16]
 8007526:	fb03 f202 	mul.w	r2, r3, r2
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007530:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8007532:	4b55      	ldr	r3, [pc, #340]	@ (8007688 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007534:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007538:	f003 031f 	and.w	r3, r3, #31
 800753c:	3301      	adds	r3, #1
 800753e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007540:	697a      	ldr	r2, [r7, #20]
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	fbb2 f3f3 	udiv	r3, r2, r3
 8007548:	617b      	str	r3, [r7, #20]
        break;
 800754a:	e003      	b.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 800754c:	4b51      	ldr	r3, [pc, #324]	@ (8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800754e:	617b      	str	r3, [r7, #20]
        break;
 8007550:	e000      	b.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 8007552:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800755a:	f040 808d 	bne.w	8007678 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 800755e:	4b4a      	ldr	r3, [pc, #296]	@ (8007688 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007560:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007564:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800756c:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007574:	d07c      	beq.n	8007670 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800757c:	d87b      	bhi.n	8007676 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d004      	beq.n	800758e <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800758a:	d039      	beq.n	8007600 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800758c:	e073      	b.n	8007676 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800758e:	4b3e      	ldr	r3, [pc, #248]	@ (8007688 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007596:	2b00      	cmp	r3, #0
 8007598:	d108      	bne.n	80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800759a:	4b3b      	ldr	r3, [pc, #236]	@ (8007688 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800759c:	685b      	ldr	r3, [r3, #4]
 800759e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80075a2:	4a3a      	ldr	r2, [pc, #232]	@ (800768c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80075a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80075a8:	613b      	str	r3, [r7, #16]
 80075aa:	e007      	b.n	80075bc <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80075ac:	4b36      	ldr	r3, [pc, #216]	@ (8007688 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80075b4:	4a36      	ldr	r2, [pc, #216]	@ (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80075b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80075ba:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80075bc:	4b32      	ldr	r3, [pc, #200]	@ (8007688 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80075be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075c2:	0e1b      	lsrs	r3, r3, #24
 80075c4:	f003 030f 	and.w	r3, r3, #15
 80075c8:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80075ca:	4b2f      	ldr	r3, [pc, #188]	@ (8007688 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80075cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075d0:	099b      	lsrs	r3, r3, #6
 80075d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075d6:	693a      	ldr	r2, [r7, #16]
 80075d8:	fb03 f202 	mul.w	r2, r3, r2
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	fbb2 f3f3 	udiv	r3, r2, r3
 80075e2:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80075e4:	4b28      	ldr	r3, [pc, #160]	@ (8007688 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80075e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80075ea:	0a1b      	lsrs	r3, r3, #8
 80075ec:	f003 031f 	and.w	r3, r3, #31
 80075f0:	3301      	adds	r3, #1
 80075f2:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80075f4:	697a      	ldr	r2, [r7, #20]
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80075fc:	617b      	str	r3, [r7, #20]
        break;
 80075fe:	e03b      	b.n	8007678 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007600:	4b21      	ldr	r3, [pc, #132]	@ (8007688 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007608:	2b00      	cmp	r3, #0
 800760a:	d108      	bne.n	800761e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800760c:	4b1e      	ldr	r3, [pc, #120]	@ (8007688 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800760e:	685b      	ldr	r3, [r3, #4]
 8007610:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007614:	4a1d      	ldr	r2, [pc, #116]	@ (800768c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8007616:	fbb2 f3f3 	udiv	r3, r2, r3
 800761a:	613b      	str	r3, [r7, #16]
 800761c:	e007      	b.n	800762e <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800761e:	4b1a      	ldr	r3, [pc, #104]	@ (8007688 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007626:	4a1a      	ldr	r2, [pc, #104]	@ (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007628:	fbb2 f3f3 	udiv	r3, r2, r3
 800762c:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800762e:	4b16      	ldr	r3, [pc, #88]	@ (8007688 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007630:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007634:	0e1b      	lsrs	r3, r3, #24
 8007636:	f003 030f 	and.w	r3, r3, #15
 800763a:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800763c:	4b12      	ldr	r3, [pc, #72]	@ (8007688 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800763e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007642:	099b      	lsrs	r3, r3, #6
 8007644:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007648:	693a      	ldr	r2, [r7, #16]
 800764a:	fb03 f202 	mul.w	r2, r3, r2
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	fbb2 f3f3 	udiv	r3, r2, r3
 8007654:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8007656:	4b0c      	ldr	r3, [pc, #48]	@ (8007688 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007658:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800765c:	f003 031f 	and.w	r3, r3, #31
 8007660:	3301      	adds	r3, #1
 8007662:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007664:	697a      	ldr	r2, [r7, #20]
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	fbb2 f3f3 	udiv	r3, r2, r3
 800766c:	617b      	str	r3, [r7, #20]
        break;
 800766e:	e003      	b.n	8007678 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 8007670:	4b08      	ldr	r3, [pc, #32]	@ (8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8007672:	617b      	str	r3, [r7, #20]
        break;
 8007674:	e000      	b.n	8007678 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 8007676:	bf00      	nop
      }
    }
  }

  return frequency;
 8007678:	697b      	ldr	r3, [r7, #20]
}
 800767a:	4618      	mov	r0, r3
 800767c:	371c      	adds	r7, #28
 800767e:	46bd      	mov	sp, r7
 8007680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007684:	4770      	bx	lr
 8007686:	bf00      	nop
 8007688:	40023800 	.word	0x40023800
 800768c:	00f42400 	.word	0x00f42400
 8007690:	017d7840 	.word	0x017d7840
 8007694:	00bb8000 	.word	0x00bb8000

08007698 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b088      	sub	sp, #32
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 80076a0:	2300      	movs	r3, #0
 80076a2:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 80076a4:	2300      	movs	r3, #0
 80076a6:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 80076a8:	2300      	movs	r3, #0
 80076aa:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d101      	bne.n	80076b6 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 80076b2:	2301      	movs	r3, #1
 80076b4:	e156      	b.n	8007964 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80076bc:	b2db      	uxtb	r3, r3
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d106      	bne.n	80076d0 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2200      	movs	r2, #0
 80076c6:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f7fa f8f6 	bl	80018bc <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2202      	movs	r2, #2
 80076d4:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f000 fad5 	bl	8007c88 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	68db      	ldr	r3, [r3, #12]
 80076e2:	2b02      	cmp	r3, #2
 80076e4:	d00c      	beq.n	8007700 <HAL_SAI_Init+0x68>
 80076e6:	2b02      	cmp	r3, #2
 80076e8:	d80d      	bhi.n	8007706 <HAL_SAI_Init+0x6e>
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d002      	beq.n	80076f4 <HAL_SAI_Init+0x5c>
 80076ee:	2b01      	cmp	r3, #1
 80076f0:	d003      	beq.n	80076fa <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 80076f2:	e008      	b.n	8007706 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 80076f4:	2300      	movs	r3, #0
 80076f6:	61fb      	str	r3, [r7, #28]
      break;
 80076f8:	e006      	b.n	8007708 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80076fa:	2310      	movs	r3, #16
 80076fc:	61fb      	str	r3, [r7, #28]
      break;
 80076fe:	e003      	b.n	8007708 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8007700:	2320      	movs	r3, #32
 8007702:	61fb      	str	r3, [r7, #28]
      break;
 8007704:	e000      	b.n	8007708 <HAL_SAI_Init+0x70>
      break;
 8007706:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	689b      	ldr	r3, [r3, #8]
 800770c:	2b03      	cmp	r3, #3
 800770e:	d81e      	bhi.n	800774e <HAL_SAI_Init+0xb6>
 8007710:	a201      	add	r2, pc, #4	@ (adr r2, 8007718 <HAL_SAI_Init+0x80>)
 8007712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007716:	bf00      	nop
 8007718:	08007729 	.word	0x08007729
 800771c:	0800772f 	.word	0x0800772f
 8007720:	08007737 	.word	0x08007737
 8007724:	0800773f 	.word	0x0800773f
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 8007728:	2300      	movs	r3, #0
 800772a:	617b      	str	r3, [r7, #20]
    }
    break;
 800772c:	e010      	b.n	8007750 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800772e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007732:	617b      	str	r3, [r7, #20]
    }
    break;
 8007734:	e00c      	b.n	8007750 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007736:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800773a:	617b      	str	r3, [r7, #20]
    }
    break;
 800773c:	e008      	b.n	8007750 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800773e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007742:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8007744:	69fb      	ldr	r3, [r7, #28]
 8007746:	f043 0301 	orr.w	r3, r3, #1
 800774a:	61fb      	str	r3, [r7, #28]
    }
    break;
 800774c:	e000      	b.n	8007750 <HAL_SAI_Init+0xb8>
    default:
      break;
 800774e:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4a85      	ldr	r2, [pc, #532]	@ (800796c <HAL_SAI_Init+0x2d4>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d004      	beq.n	8007764 <HAL_SAI_Init+0xcc>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4a84      	ldr	r2, [pc, #528]	@ (8007970 <HAL_SAI_Init+0x2d8>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d103      	bne.n	800776c <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8007764:	4a83      	ldr	r2, [pc, #524]	@ (8007974 <HAL_SAI_Init+0x2dc>)
 8007766:	69fb      	ldr	r3, [r7, #28]
 8007768:	6013      	str	r3, [r2, #0]
 800776a:	e002      	b.n	8007772 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800776c:	4a82      	ldr	r2, [pc, #520]	@ (8007978 <HAL_SAI_Init+0x2e0>)
 800776e:	69fb      	ldr	r3, [r7, #28]
 8007770:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	69db      	ldr	r3, [r3, #28]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d04c      	beq.n	8007814 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 800777a:	2300      	movs	r3, #0
 800777c:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4a7a      	ldr	r2, [pc, #488]	@ (800796c <HAL_SAI_Init+0x2d4>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d004      	beq.n	8007792 <HAL_SAI_Init+0xfa>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4a78      	ldr	r2, [pc, #480]	@ (8007970 <HAL_SAI_Init+0x2d8>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d104      	bne.n	800779c <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8007792:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8007796:	f7ff fe3f 	bl	8007418 <HAL_RCCEx_GetPeriphCLKFreq>
 800779a:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a76      	ldr	r2, [pc, #472]	@ (800797c <HAL_SAI_Init+0x2e4>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d004      	beq.n	80077b0 <HAL_SAI_Init+0x118>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4a75      	ldr	r2, [pc, #468]	@ (8007980 <HAL_SAI_Init+0x2e8>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d104      	bne.n	80077ba <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80077b0:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80077b4:	f7ff fe30 	bl	8007418 <HAL_RCCEx_GetPeriphCLKFreq>
 80077b8:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 80077ba:	693a      	ldr	r2, [r7, #16]
 80077bc:	4613      	mov	r3, r2
 80077be:	009b      	lsls	r3, r3, #2
 80077c0:	4413      	add	r3, r2
 80077c2:	005b      	lsls	r3, r3, #1
 80077c4:	461a      	mov	r2, r3
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	69db      	ldr	r3, [r3, #28]
 80077ca:	025b      	lsls	r3, r3, #9
 80077cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80077d0:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	4a6b      	ldr	r2, [pc, #428]	@ (8007984 <HAL_SAI_Init+0x2ec>)
 80077d6:	fba2 2303 	umull	r2, r3, r2, r3
 80077da:	08da      	lsrs	r2, r3, #3
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 80077e0:	68f9      	ldr	r1, [r7, #12]
 80077e2:	4b68      	ldr	r3, [pc, #416]	@ (8007984 <HAL_SAI_Init+0x2ec>)
 80077e4:	fba3 2301 	umull	r2, r3, r3, r1
 80077e8:	08da      	lsrs	r2, r3, #3
 80077ea:	4613      	mov	r3, r2
 80077ec:	009b      	lsls	r3, r3, #2
 80077ee:	4413      	add	r3, r2
 80077f0:	005b      	lsls	r3, r3, #1
 80077f2:	1aca      	subs	r2, r1, r3
 80077f4:	2a08      	cmp	r2, #8
 80077f6:	d904      	bls.n	8007802 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6a1b      	ldr	r3, [r3, #32]
 80077fc:	1c5a      	adds	r2, r3, #1
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007806:	2b04      	cmp	r3, #4
 8007808:	d104      	bne.n	8007814 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6a1b      	ldr	r3, [r3, #32]
 800780e:	085a      	lsrs	r2, r3, #1
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	685b      	ldr	r3, [r3, #4]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d003      	beq.n	8007824 <HAL_SAI_Init+0x18c>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	2b02      	cmp	r3, #2
 8007822:	d109      	bne.n	8007838 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007828:	2b01      	cmp	r3, #1
 800782a:	d101      	bne.n	8007830 <HAL_SAI_Init+0x198>
 800782c:	2300      	movs	r3, #0
 800782e:	e001      	b.n	8007834 <HAL_SAI_Init+0x19c>
 8007830:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007834:	61bb      	str	r3, [r7, #24]
 8007836:	e008      	b.n	800784a <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800783c:	2b01      	cmp	r3, #1
 800783e:	d102      	bne.n	8007846 <HAL_SAI_Init+0x1ae>
 8007840:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007844:	e000      	b.n	8007848 <HAL_SAI_Init+0x1b0>
 8007846:	2300      	movs	r3, #0
 8007848:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	6819      	ldr	r1, [r3, #0]
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681a      	ldr	r2, [r3, #0]
 8007854:	4b4c      	ldr	r3, [pc, #304]	@ (8007988 <HAL_SAI_Init+0x2f0>)
 8007856:	400b      	ands	r3, r1
 8007858:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	6819      	ldr	r1, [r3, #0]
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	685a      	ldr	r2, [r3, #4]
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007868:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800786e:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007874:	431a      	orrs	r2, r3
 8007876:	69bb      	ldr	r3, [r7, #24]
 8007878:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                               \
 8007882:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	691b      	ldr	r3, [r3, #16]
 8007888:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800788e:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6a1b      	ldr	r3, [r3, #32]
 8007894:	051b      	lsls	r3, r3, #20
 8007896:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	430a      	orrs	r2, r1
 800789e:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	6859      	ldr	r1, [r3, #4]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681a      	ldr	r2, [r3, #0]
 80078aa:	4b38      	ldr	r3, [pc, #224]	@ (800798c <HAL_SAI_Init+0x2f4>)
 80078ac:	400b      	ands	r3, r1
 80078ae:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	6859      	ldr	r1, [r3, #4]
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	699a      	ldr	r2, [r3, #24]
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078be:	431a      	orrs	r2, r3
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078c4:	431a      	orrs	r2, r3
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	430a      	orrs	r2, r1
 80078cc:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	6899      	ldr	r1, [r3, #8]
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681a      	ldr	r2, [r3, #0]
 80078d8:	4b2d      	ldr	r3, [pc, #180]	@ (8007990 <HAL_SAI_Init+0x2f8>)
 80078da:	400b      	ands	r3, r1
 80078dc:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	6899      	ldr	r1, [r3, #8]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078e8:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80078ee:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 80078f4:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 80078fa:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007900:	3b01      	subs	r3, #1
 8007902:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8007904:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	430a      	orrs	r2, r1
 800790c:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	68d9      	ldr	r1, [r3, #12]
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681a      	ldr	r2, [r3, #0]
 8007918:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800791c:	400b      	ands	r3, r1
 800791e:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	68d9      	ldr	r1, [r3, #12]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800792e:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007934:	041b      	lsls	r3, r3, #16
 8007936:	431a      	orrs	r2, r3
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800793c:	3b01      	subs	r3, #1
 800793e:	021b      	lsls	r3, r3, #8
 8007940:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	430a      	orrs	r2, r1
 8007948:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2200      	movs	r2, #0
 800794e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2201      	movs	r2, #1
 8007956:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2200      	movs	r2, #0
 800795e:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 8007962:	2300      	movs	r3, #0
}
 8007964:	4618      	mov	r0, r3
 8007966:	3720      	adds	r7, #32
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}
 800796c:	40015804 	.word	0x40015804
 8007970:	40015824 	.word	0x40015824
 8007974:	40015800 	.word	0x40015800
 8007978:	40015c00 	.word	0x40015c00
 800797c:	40015c04 	.word	0x40015c04
 8007980:	40015c24 	.word	0x40015c24
 8007984:	cccccccd 	.word	0xcccccccd
 8007988:	ff05c010 	.word	0xff05c010
 800798c:	ffff1ff0 	.word	0xffff1ff0
 8007990:	fff88000 	.word	0xfff88000

08007994 <HAL_SAI_DeInit>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DeInit(SAI_HandleTypeDef *hsai)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b082      	sub	sp, #8
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d101      	bne.n	80079a6 <HAL_SAI_DeInit+0x12>
  {
    return HAL_ERROR;
 80079a2:	2301      	movs	r3, #1
 80079a4:	e027      	b.n	80079f6 <HAL_SAI_DeInit+0x62>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2202      	movs	r2, #2
 80079aa:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	2200      	movs	r2, #0
 80079b4:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f04f 32ff 	mov.w	r2, #4294967295
 80079be:	619a      	str	r2, [r3, #24]

  /* Disable the SAI */
  SAI_Disable(hsai);
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f000 f961 	bl	8007c88 <SAI_Disable>

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	685a      	ldr	r2, [r3, #4]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f042 0208 	orr.w	r2, r2, #8
 80079d4:	605a      	str	r2, [r3, #4]
  {
    hsai->MspDeInitCallback = HAL_SAI_MspDeInit;
  }
  hsai->MspDeInitCallback(hsai);
#else
  HAL_SAI_MspDeInit(hsai);
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f7fa f80c 	bl	80019f4 <HAL_SAI_MspDeInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2200      	movs	r2, #0
 80079e0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_RESET;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2200      	movs	r2, #0
 80079e8:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2200      	movs	r2, #0
 80079f0:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 80079f4:	2300      	movs	r3, #0
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3708      	adds	r7, #8
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}

080079fe <HAL_SAI_DMAStop>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DMAStop(SAI_HandleTypeDef *hsai)
{
 80079fe:	b580      	push	{r7, lr}
 8007a00:	b084      	sub	sp, #16
 8007a02:	af00      	add	r7, sp, #0
 8007a04:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007a06:	2300      	movs	r3, #0
 8007a08:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8007a10:	2b01      	cmp	r3, #1
 8007a12:	d101      	bne.n	8007a18 <HAL_SAI_DMAStop+0x1a>
 8007a14:	2302      	movs	r3, #2
 8007a16:	e061      	b.n	8007adc <HAL_SAI_DMAStop+0xde>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  /* Disable SAI peripheral */
  SAI_Disable(hsai);
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f000 f931 	bl	8007c88 <SAI_Disable>

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	681a      	ldr	r2, [r3, #0]
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8007a34:	601a      	str	r2, [r3, #0]

  /* Abort the SAI Tx DMA Stream */
  if ((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d01c      	beq.n	8007a78 <HAL_SAI_DMAStop+0x7a>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8007a44:	b2db      	uxtb	r3, r3
 8007a46:	2b12      	cmp	r3, #18
 8007a48:	d116      	bne.n	8007a78 <HAL_SAI_DMAStop+0x7a>
  {
    if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f7fc ff0a 	bl	8004868 <HAL_DMA_Abort>
 8007a54:	4603      	mov	r3, r0
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d00e      	beq.n	8007a78 <HAL_SAI_DMAStop+0x7a>
    {
      /* If the DMA Tx errorCode is different from DMA No Transfer then return Error */
      if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007a5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a60:	2b80      	cmp	r3, #128	@ 0x80
 8007a62:	d009      	beq.n	8007a78 <HAL_SAI_DMAStop+0x7a>
      {
        status = HAL_ERROR;
 8007a64:	2301      	movs	r3, #1
 8007a66:	73fb      	strb	r3, [r7, #15]
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a6e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }
    }
  }

  /* Abort the SAI Rx DMA Stream */
  if ((hsai->hdmarx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_RX))
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d01c      	beq.n	8007aba <HAL_SAI_DMAStop+0xbc>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8007a86:	b2db      	uxtb	r3, r3
 8007a88:	2b22      	cmp	r3, #34	@ 0x22
 8007a8a:	d116      	bne.n	8007aba <HAL_SAI_DMAStop+0xbc>
  {
    if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a90:	4618      	mov	r0, r3
 8007a92:	f7fc fee9 	bl	8004868 <HAL_DMA_Abort>
 8007a96:	4603      	mov	r3, r0
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d00e      	beq.n	8007aba <HAL_SAI_DMAStop+0xbc>
    {
      /* If the DMA Rx errorCode is different from DMA No Transfer then return Error */
      if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007aa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007aa2:	2b80      	cmp	r3, #128	@ 0x80
 8007aa4:	d009      	beq.n	8007aba <HAL_SAI_DMAStop+0xbc>
      {
        status = HAL_ERROR;
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	73fb      	strb	r3, [r7, #15]
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ab0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }
    }
  }

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	685a      	ldr	r2, [r3, #4]
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f042 0208 	orr.w	r2, r2, #8
 8007ac8:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2201      	movs	r2, #1
 8007ace:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return status;
 8007ada:	7bfb      	ldrb	r3, [r7, #15]
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	3710      	adds	r7, #16
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}

08007ae4 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b084      	sub	sp, #16
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	60f8      	str	r0, [r7, #12]
 8007aec:	60b9      	str	r1, [r7, #8]
 8007aee:	4613      	mov	r3, r2
 8007af0:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0))
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d002      	beq.n	8007afe <HAL_SAI_Receive_DMA+0x1a>
 8007af8:	88fb      	ldrh	r3, [r7, #6]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d101      	bne.n	8007b02 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8007afe:	2301      	movs	r3, #1
 8007b00:	e074      	b.n	8007bec <HAL_SAI_Receive_DMA+0x108>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8007b08:	b2db      	uxtb	r3, r3
 8007b0a:	2b01      	cmp	r3, #1
 8007b0c:	d16d      	bne.n	8007bea <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8007b14:	2b01      	cmp	r3, #1
 8007b16:	d101      	bne.n	8007b1c <HAL_SAI_Receive_DMA+0x38>
 8007b18:	2302      	movs	r3, #2
 8007b1a:	e067      	b.n	8007bec <HAL_SAI_Receive_DMA+0x108>
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	2201      	movs	r2, #1
 8007b20:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    hsai->pBuffPtr = pData;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	68ba      	ldr	r2, [r7, #8]
 8007b28:	665a      	str	r2, [r3, #100]	@ 0x64
    hsai->XferSize = Size;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	88fa      	ldrh	r2, [r7, #6]
 8007b2e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    hsai->XferCount = Size;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	88fa      	ldrh	r2, [r7, #6]
 8007b36:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	2222      	movs	r2, #34	@ 0x22
 8007b46:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b4e:	4a29      	ldr	r2, [pc, #164]	@ (8007bf4 <HAL_SAI_Receive_DMA+0x110>)
 8007b50:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b56:	4a28      	ldr	r2, [pc, #160]	@ (8007bf8 <HAL_SAI_Receive_DMA+0x114>)
 8007b58:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b5e:	4a27      	ldr	r2, [pc, #156]	@ (8007bfc <HAL_SAI_Receive_DMA+0x118>)
 8007b60:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b66:	2200      	movs	r2, #0
 8007b68:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	331c      	adds	r3, #28
 8007b74:	4619      	mov	r1, r3
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b7a:	461a      	mov	r2, r3
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007b82:	f7fc fe11 	bl	80047a8 <HAL_DMA_Start_IT>
 8007b86:	4603      	mov	r3, r0
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d005      	beq.n	8007b98 <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      return  HAL_ERROR;
 8007b94:	2301      	movs	r3, #1
 8007b96:	e029      	b.n	8007bec <HAL_SAI_Receive_DMA+0x108>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8007b98:	2100      	movs	r1, #0
 8007b9a:	68f8      	ldr	r0, [r7, #12]
 8007b9c:	f000 f83e 	bl	8007c1c <SAI_InterruptFlag>
 8007ba0:	4601      	mov	r1, r0
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	691a      	ldr	r2, [r3, #16]
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	430a      	orrs	r2, r1
 8007bae:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	681a      	ldr	r2, [r3, #0]
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8007bbe:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d107      	bne.n	8007bde <HAL_SAI_Receive_DMA+0xfa>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	681a      	ldr	r2, [r3, #0]
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8007bdc:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2200      	movs	r2, #0
 8007be2:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8007be6:	2300      	movs	r3, #0
 8007be8:	e000      	b.n	8007bec <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 8007bea:	2302      	movs	r3, #2
  }
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	3710      	adds	r7, #16
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}
 8007bf4:	08007d59 	.word	0x08007d59
 8007bf8:	08007cf9 	.word	0x08007cf9
 8007bfc:	08007d75 	.word	0x08007d75

08007c00 <HAL_SAI_GetState>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL state
  */
HAL_SAI_StateTypeDef HAL_SAI_GetState(const SAI_HandleTypeDef *hsai)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b083      	sub	sp, #12
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
  return hsai->State;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8007c0e:	b2db      	uxtb	r3, r3
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	370c      	adds	r7, #12
 8007c14:	46bd      	mov	sp, r7
 8007c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1a:	4770      	bx	lr

08007c1c <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, uint32_t mode)
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b085      	sub	sp, #20
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
 8007c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8007c26:	2301      	movs	r3, #1
 8007c28:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	2b01      	cmp	r3, #1
 8007c2e:	d103      	bne.n	8007c38 <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	f043 0308 	orr.w	r3, r3, #8
 8007c36:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c3c:	2b08      	cmp	r3, #8
 8007c3e:	d10b      	bne.n	8007c58 <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8007c44:	2b03      	cmp	r3, #3
 8007c46:	d003      	beq.n	8007c50 <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	685b      	ldr	r3, [r3, #4]
 8007c4c:	2b01      	cmp	r3, #1
 8007c4e:	d103      	bne.n	8007c58 <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	f043 0310 	orr.w	r3, r3, #16
 8007c56:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	685b      	ldr	r3, [r3, #4]
 8007c5c:	2b03      	cmp	r3, #3
 8007c5e:	d003      	beq.n	8007c68 <SAI_InterruptFlag+0x4c>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	685b      	ldr	r3, [r3, #4]
 8007c64:	2b02      	cmp	r3, #2
 8007c66:	d104      	bne.n	8007c72 <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007c6e:	60fb      	str	r3, [r7, #12]
 8007c70:	e003      	b.n	8007c7a <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	f043 0304 	orr.w	r3, r3, #4
 8007c78:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	3714      	adds	r7, #20
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr

08007c88 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b085      	sub	sp, #20
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8007c90:	4b17      	ldr	r3, [pc, #92]	@ (8007cf0 <SAI_Disable+0x68>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4a17      	ldr	r2, [pc, #92]	@ (8007cf4 <SAI_Disable+0x6c>)
 8007c96:	fba2 2303 	umull	r2, r3, r2, r3
 8007c9a:	0b1b      	lsrs	r3, r3, #12
 8007c9c:	009b      	lsls	r3, r3, #2
 8007c9e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	681a      	ldr	r2, [r3, #0]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8007cb2:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	1e5a      	subs	r2, r3, #1
 8007cb8:	60fa      	str	r2, [r7, #12]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d10a      	bne.n	8007cd4 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007cc4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 8007cce:	2303      	movs	r3, #3
 8007cd0:	72fb      	strb	r3, [r7, #11]
      break;
 8007cd2:	e006      	b.n	8007ce2 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d1e8      	bne.n	8007cb4 <SAI_Disable+0x2c>

  return status;
 8007ce2:	7afb      	ldrb	r3, [r7, #11]
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	3714      	adds	r7, #20
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cee:	4770      	bx	lr
 8007cf0:	20000000 	.word	0x20000000
 8007cf4:	95cbec1b 	.word	0x95cbec1b

08007cf8 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b084      	sub	sp, #16
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d04:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	69db      	ldr	r3, [r3, #28]
 8007d0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d0e:	d01c      	beq.n	8007d4a <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	681a      	ldr	r2, [r3, #0]
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8007d1e:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	2200      	movs	r2, #0
 8007d24:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8007d28:	2100      	movs	r1, #0
 8007d2a:	68f8      	ldr	r0, [r7, #12]
 8007d2c:	f7ff ff76 	bl	8007c1c <SAI_InterruptFlag>
 8007d30:	4603      	mov	r3, r0
 8007d32:	43d9      	mvns	r1, r3
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	691a      	ldr	r2, [r3, #16]
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	400a      	ands	r2, r1
 8007d40:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	2201      	movs	r2, #1
 8007d46:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 8007d4a:	68f8      	ldr	r0, [r7, #12]
 8007d4c:	f7fc f8f2 	bl	8003f34 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8007d50:	bf00      	nop
 8007d52:	3710      	adds	r7, #16
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}

08007d58 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b084      	sub	sp, #16
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d64:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 8007d66:	68f8      	ldr	r0, [r7, #12]
 8007d68:	f7fc f8ee 	bl	8003f48 <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8007d6c:	bf00      	nop
 8007d6e:	3710      	adds	r7, #16
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}

08007d74 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b084      	sub	sp, #16
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d80:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d88:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d98:	2b01      	cmp	r3, #1
 8007d9a:	d004      	beq.n	8007da6 <SAI_DMAError+0x32>
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007da0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007da2:	2b01      	cmp	r3, #1
 8007da4:	d112      	bne.n	8007dcc <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	681a      	ldr	r2, [r3, #0]
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8007db4:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 8007db6:	68f8      	ldr	r0, [r7, #12]
 8007db8:	f7ff ff66 	bl	8007c88 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8007dcc:	68f8      	ldr	r0, [r7, #12]
 8007dce:	f7fb feb1 	bl	8003b34 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8007dd2:	bf00      	nop
 8007dd4:	3710      	adds	r7, #16
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}

08007dda <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007dda:	b580      	push	{r7, lr}
 8007ddc:	b082      	sub	sp, #8
 8007dde:	af00      	add	r7, sp, #0
 8007de0:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d101      	bne.n	8007dec <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007de8:	2301      	movs	r3, #1
 8007dea:	e022      	b.n	8007e32 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007df2:	b2db      	uxtb	r3, r3
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d105      	bne.n	8007e04 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f7f9 fe4a 	bl	8001a98 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2203      	movs	r2, #3
 8007e08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f000 f815 	bl	8007e3c <HAL_SD_InitCard>
 8007e12:	4603      	mov	r3, r0
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d001      	beq.n	8007e1c <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007e18:	2301      	movs	r3, #1
 8007e1a:	e00a      	b.n	8007e32 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2200      	movs	r2, #0
 8007e26:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2201      	movs	r2, #1
 8007e2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007e30:	2300      	movs	r3, #0
}
 8007e32:	4618      	mov	r0, r3
 8007e34:	3708      	adds	r7, #8
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}
	...

08007e3c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007e3c:	b5b0      	push	{r4, r5, r7, lr}
 8007e3e:	b08e      	sub	sp, #56	@ 0x38
 8007e40:	af04      	add	r7, sp, #16
 8007e42:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8007e44:	2300      	movs	r3, #0
 8007e46:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8007e48:	2300      	movs	r3, #0
 8007e4a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8007e50:	2300      	movs	r3, #0
 8007e52:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8007e54:	2300      	movs	r3, #0
 8007e56:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8007e58:	2376      	movs	r3, #118	@ 0x76
 8007e5a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681d      	ldr	r5, [r3, #0]
 8007e60:	466c      	mov	r4, sp
 8007e62:	f107 0314 	add.w	r3, r7, #20
 8007e66:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007e6a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007e6e:	f107 0308 	add.w	r3, r7, #8
 8007e72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007e74:	4628      	mov	r0, r5
 8007e76:	f001 fddf 	bl	8009a38 <SDMMC_Init>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8007e80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d001      	beq.n	8007e8c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8007e88:	2301      	movs	r3, #1
 8007e8a:	e059      	b.n	8007f40 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	685a      	ldr	r2, [r3, #4]
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007e9a:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f001 fe13 	bl	8009acc <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	685a      	ldr	r2, [r3, #4]
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007eb4:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8007eb6:	2002      	movs	r0, #2
 8007eb8:	f7fc fa34 	bl	8004324 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f000 ff59 	bl	8008d74 <SD_PowerON>
 8007ec2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007ec4:	6a3b      	ldr	r3, [r7, #32]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d00b      	beq.n	8007ee2 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2201      	movs	r2, #1
 8007ece:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007ed6:	6a3b      	ldr	r3, [r7, #32]
 8007ed8:	431a      	orrs	r2, r3
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8007ede:	2301      	movs	r3, #1
 8007ee0:	e02e      	b.n	8007f40 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f000 fe78 	bl	8008bd8 <SD_InitCard>
 8007ee8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007eea:	6a3b      	ldr	r3, [r7, #32]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d00b      	beq.n	8007f08 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2201      	movs	r2, #1
 8007ef4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007efc:	6a3b      	ldr	r3, [r7, #32]
 8007efe:	431a      	orrs	r2, r3
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8007f04:	2301      	movs	r3, #1
 8007f06:	e01b      	b.n	8007f40 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007f10:	4618      	mov	r0, r3
 8007f12:	f001 fe6d 	bl	8009bf0 <SDMMC_CmdBlockLength>
 8007f16:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007f18:	6a3b      	ldr	r3, [r7, #32]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d00f      	beq.n	8007f3e <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4a09      	ldr	r2, [pc, #36]	@ (8007f48 <HAL_SD_InitCard+0x10c>)
 8007f24:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007f2a:	6a3b      	ldr	r3, [r7, #32]
 8007f2c:	431a      	orrs	r2, r3
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2201      	movs	r2, #1
 8007f36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	e000      	b.n	8007f40 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 8007f3e:	2300      	movs	r3, #0
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	3728      	adds	r7, #40	@ 0x28
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bdb0      	pop	{r4, r5, r7, pc}
 8007f48:	004005ff 	.word	0x004005ff

08007f4c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b08c      	sub	sp, #48	@ 0x30
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	60f8      	str	r0, [r7, #12]
 8007f54:	60b9      	str	r1, [r7, #8]
 8007f56:	607a      	str	r2, [r7, #4]
 8007f58:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d107      	bne.n	8007f74 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f68:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8007f70:	2301      	movs	r3, #1
 8007f72:	e0c3      	b.n	80080fc <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007f7a:	b2db      	uxtb	r3, r3
 8007f7c:	2b01      	cmp	r3, #1
 8007f7e:	f040 80bc 	bne.w	80080fa <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	2200      	movs	r2, #0
 8007f86:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007f88:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	441a      	add	r2, r3
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f92:	429a      	cmp	r2, r3
 8007f94:	d907      	bls.n	8007fa6 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f9a:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	e0aa      	b.n	80080fc <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	2203      	movs	r2, #3
 8007faa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	62da      	str	r2, [r3, #44]	@ 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 8007fc4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fca:	4a4e      	ldr	r2, [pc, #312]	@ (8008104 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8007fcc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fd2:	4a4d      	ldr	r2, [pc, #308]	@ (8008108 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8007fd4:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fda:	2200      	movs	r2, #0
 8007fdc:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ff6:	689a      	ldr	r2, [r3, #8]
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	430a      	orrs	r2, r1
 8008000:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	3380      	adds	r3, #128	@ 0x80
 800800c:	4619      	mov	r1, r3
 800800e:	68ba      	ldr	r2, [r7, #8]
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	025b      	lsls	r3, r3, #9
 8008014:	089b      	lsrs	r3, r3, #2
 8008016:	f7fc fbc7 	bl	80047a8 <HAL_DMA_Start_IT>
 800801a:	4603      	mov	r3, r0
 800801c:	2b00      	cmp	r3, #0
 800801e:	d017      	beq.n	8008050 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 800802e:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4a35      	ldr	r2, [pc, #212]	@ (800810c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8008036:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800803c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	2201      	movs	r2, #1
 8008048:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800804c:	2301      	movs	r3, #1
 800804e:	e055      	b.n	80080fc <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f042 0208 	orr.w	r2, r2, #8
 800805e:	62da      	str	r2, [r3, #44]	@ 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008064:	2b01      	cmp	r3, #1
 8008066:	d002      	beq.n	800806e <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 8008068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800806a:	025b      	lsls	r3, r3, #9
 800806c:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800806e:	f04f 33ff 	mov.w	r3, #4294967295
 8008072:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	025b      	lsls	r3, r3, #9
 8008078:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800807a:	2390      	movs	r3, #144	@ 0x90
 800807c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800807e:	2302      	movs	r3, #2
 8008080:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008082:	2300      	movs	r3, #0
 8008084:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8008086:	2301      	movs	r3, #1
 8008088:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f107 0210 	add.w	r2, r7, #16
 8008092:	4611      	mov	r1, r2
 8008094:	4618      	mov	r0, r3
 8008096:	f001 fd7f 	bl	8009b98 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	2b01      	cmp	r3, #1
 800809e:	d90a      	bls.n	80080b6 <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	2282      	movs	r2, #130	@ 0x82
 80080a4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80080ac:	4618      	mov	r0, r3
 80080ae:	f001 fde3 	bl	8009c78 <SDMMC_CmdReadMultiBlock>
 80080b2:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80080b4:	e009      	b.n	80080ca <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	2281      	movs	r2, #129	@ 0x81
 80080ba:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80080c2:	4618      	mov	r0, r3
 80080c4:	f001 fdb6 	bl	8009c34 <SDMMC_CmdReadSingleBlock>
 80080c8:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80080ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d012      	beq.n	80080f6 <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	4a0d      	ldr	r2, [pc, #52]	@ (800810c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80080d6:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80080dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080de:	431a      	orrs	r2, r3
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	2201      	movs	r2, #1
 80080e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	2200      	movs	r2, #0
 80080f0:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 80080f2:	2301      	movs	r3, #1
 80080f4:	e002      	b.n	80080fc <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 80080f6:	2300      	movs	r3, #0
 80080f8:	e000      	b.n	80080fc <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 80080fa:	2302      	movs	r3, #2
  }
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	3730      	adds	r7, #48	@ 0x30
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}
 8008104:	080089e7 	.word	0x080089e7
 8008108:	08008a59 	.word	0x08008a59
 800810c:	004005ff 	.word	0x004005ff

08008110 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b08c      	sub	sp, #48	@ 0x30
 8008114:	af00      	add	r7, sp, #0
 8008116:	60f8      	str	r0, [r7, #12]
 8008118:	60b9      	str	r1, [r7, #8]
 800811a:	607a      	str	r2, [r7, #4]
 800811c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d107      	bne.n	8008138 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800812c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8008134:	2301      	movs	r3, #1
 8008136:	e0c6      	b.n	80082c6 <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800813e:	b2db      	uxtb	r3, r3
 8008140:	2b01      	cmp	r3, #1
 8008142:	f040 80bf 	bne.w	80082c4 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	2200      	movs	r2, #0
 800814a:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800814c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	441a      	add	r2, r3
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008156:	429a      	cmp	r2, r3
 8008158:	d907      	bls.n	800816a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800815e:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8008166:	2301      	movs	r3, #1
 8008168:	e0ad      	b.n	80082c6 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	2203      	movs	r2, #3
 800816e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	2200      	movs	r2, #0
 8008178:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f042 021a 	orr.w	r2, r2, #26
 8008188:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800818e:	4a50      	ldr	r2, [pc, #320]	@ (80082d0 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8008190:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008196:	4a4f      	ldr	r2, [pc, #316]	@ (80082d4 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8008198:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800819e:	2200      	movs	r2, #0
 80081a0:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081a6:	2b01      	cmp	r3, #1
 80081a8:	d002      	beq.n	80081b0 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 80081aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081ac:	025b      	lsls	r3, r3, #9
 80081ae:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	2b01      	cmp	r3, #1
 80081b4:	d90a      	bls.n	80081cc <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	22a0      	movs	r2, #160	@ 0xa0
 80081ba:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80081c2:	4618      	mov	r0, r3
 80081c4:	f001 fd9c 	bl	8009d00 <SDMMC_CmdWriteMultiBlock>
 80081c8:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80081ca:	e009      	b.n	80081e0 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	2290      	movs	r2, #144	@ 0x90
 80081d0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80081d8:	4618      	mov	r0, r3
 80081da:	f001 fd6f 	bl	8009cbc <SDMMC_CmdWriteSingleBlock>
 80081de:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80081e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d012      	beq.n	800820c <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	4a3b      	ldr	r2, [pc, #236]	@ (80082d8 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80081ec:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80081f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081f4:	431a      	orrs	r2, r3
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	2201      	movs	r2, #1
 80081fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	2200      	movs	r2, #0
 8008206:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8008208:	2301      	movs	r3, #1
 800820a:	e05c      	b.n	80082c6 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f042 0208 	orr.w	r2, r2, #8
 800821a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008220:	2240      	movs	r2, #64	@ 0x40
 8008222:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008234:	689a      	ldr	r2, [r3, #8]
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	430a      	orrs	r2, r1
 800823e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8008244:	68b9      	ldr	r1, [r7, #8]
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	3380      	adds	r3, #128	@ 0x80
 800824c:	461a      	mov	r2, r3
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	025b      	lsls	r3, r3, #9
 8008252:	089b      	lsrs	r3, r3, #2
 8008254:	f7fc faa8 	bl	80047a8 <HAL_DMA_Start_IT>
 8008258:	4603      	mov	r3, r0
 800825a:	2b00      	cmp	r3, #0
 800825c:	d01a      	beq.n	8008294 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f022 021a 	bic.w	r2, r2, #26
 800826c:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	4a19      	ldr	r2, [pc, #100]	@ (80082d8 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8008274:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800827a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	2201      	movs	r2, #1
 8008286:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	2200      	movs	r2, #0
 800828e:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8008290:	2301      	movs	r3, #1
 8008292:	e018      	b.n	80082c6 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008294:	f04f 33ff 	mov.w	r3, #4294967295
 8008298:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	025b      	lsls	r3, r3, #9
 800829e:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80082a0:	2390      	movs	r3, #144	@ 0x90
 80082a2:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80082a4:	2300      	movs	r3, #0
 80082a6:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80082a8:	2300      	movs	r3, #0
 80082aa:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80082ac:	2301      	movs	r3, #1
 80082ae:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f107 0210 	add.w	r2, r7, #16
 80082b8:	4611      	mov	r1, r2
 80082ba:	4618      	mov	r0, r3
 80082bc:	f001 fc6c 	bl	8009b98 <SDMMC_ConfigData>

      return HAL_OK;
 80082c0:	2300      	movs	r3, #0
 80082c2:	e000      	b.n	80082c6 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 80082c4:	2302      	movs	r3, #2
  }
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3730      	adds	r7, #48	@ 0x30
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}
 80082ce:	bf00      	nop
 80082d0:	080089bd 	.word	0x080089bd
 80082d4:	08008a59 	.word	0x08008a59
 80082d8:	004005ff 	.word	0x004005ff

080082dc <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b084      	sub	sp, #16
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082e8:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d008      	beq.n	800830a <HAL_SD_IRQHandler+0x2e>
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	f003 0308 	and.w	r3, r3, #8
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d003      	beq.n	800830a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f000 fdec 	bl	8008ee0 <SD_Read_IT>
 8008308:	e15a      	b.n	80085c0 <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008310:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008314:	2b00      	cmp	r3, #0
 8008316:	f000 808d 	beq.w	8008434 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008322:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681a      	ldr	r2, [r3, #0]
 800832e:	4b9a      	ldr	r3, [pc, #616]	@ (8008598 <HAL_SD_IRQHandler+0x2bc>)
 8008330:	400b      	ands	r3, r1
 8008332:	63d3      	str	r3, [r2, #60]	@ 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f022 0201 	bic.w	r2, r2, #1
 8008342:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	f003 0308 	and.w	r3, r3, #8
 800834a:	2b00      	cmp	r3, #0
 800834c:	d039      	beq.n	80083c2 <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	f003 0302 	and.w	r3, r3, #2
 8008354:	2b00      	cmp	r3, #0
 8008356:	d104      	bne.n	8008362 <HAL_SD_IRQHandler+0x86>
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	f003 0320 	and.w	r3, r3, #32
 800835e:	2b00      	cmp	r3, #0
 8008360:	d011      	beq.n	8008386 <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	4618      	mov	r0, r3
 8008368:	f001 fcec 	bl	8009d44 <SDMMC_CmdStopTransfer>
 800836c:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d008      	beq.n	8008386 <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	431a      	orrs	r2, r3
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	f000 f921 	bl	80085c8 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f240 523a 	movw	r2, #1338	@ 0x53a
 800838e:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2201      	movs	r2, #1
 8008394:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2200      	movs	r2, #0
 800839c:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	f003 0301 	and.w	r3, r3, #1
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d104      	bne.n	80083b2 <HAL_SD_IRQHandler+0xd6>
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	f003 0302 	and.w	r3, r3, #2
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d003      	beq.n	80083ba <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f002 fc76 	bl	800aca4 <HAL_SD_RxCpltCallback>
 80083b8:	e102      	b.n	80085c0 <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f002 fc68 	bl	800ac90 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80083c0:	e0fe      	b.n	80085c0 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	f000 80f9 	beq.w	80085c0 <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	f003 0320 	and.w	r3, r3, #32
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d011      	beq.n	80083fc <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4618      	mov	r0, r3
 80083de:	f001 fcb1 	bl	8009d44 <SDMMC_CmdStopTransfer>
 80083e2:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d008      	beq.n	80083fc <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	431a      	orrs	r2, r3
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f000 f8e6 	bl	80085c8 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	f003 0301 	and.w	r3, r3, #1
 8008402:	2b00      	cmp	r3, #0
 8008404:	f040 80dc 	bne.w	80085c0 <HAL_SD_IRQHandler+0x2e4>
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	f003 0302 	and.w	r3, r3, #2
 800840e:	2b00      	cmp	r3, #0
 8008410:	f040 80d6 	bne.w	80085c0 <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f022 0208 	bic.w	r2, r2, #8
 8008422:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2201      	movs	r2, #1
 8008428:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f002 fc2f 	bl	800ac90 <HAL_SD_TxCpltCallback>
}
 8008432:	e0c5      	b.n	80085c0 <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800843a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800843e:	2b00      	cmp	r3, #0
 8008440:	d008      	beq.n	8008454 <HAL_SD_IRQHandler+0x178>
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	f003 0308 	and.w	r3, r3, #8
 8008448:	2b00      	cmp	r3, #0
 800844a:	d003      	beq.n	8008454 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f000 fd98 	bl	8008f82 <SD_Write_IT>
 8008452:	e0b5      	b.n	80085c0 <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800845a:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 800845e:	2b00      	cmp	r3, #0
 8008460:	f000 80ae 	beq.w	80085c0 <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800846a:	f003 0302 	and.w	r3, r3, #2
 800846e:	2b00      	cmp	r3, #0
 8008470:	d005      	beq.n	800847e <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008476:	f043 0202 	orr.w	r2, r3, #2
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008484:	f003 0308 	and.w	r3, r3, #8
 8008488:	2b00      	cmp	r3, #0
 800848a:	d005      	beq.n	8008498 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008490:	f043 0208 	orr.w	r2, r3, #8
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800849e:	f003 0320 	and.w	r3, r3, #32
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d005      	beq.n	80084b2 <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084aa:	f043 0220 	orr.w	r2, r3, #32
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084b8:	f003 0310 	and.w	r3, r3, #16
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d005      	beq.n	80084cc <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084c4:	f043 0210 	orr.w	r2, r3, #16
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f240 523a 	movw	r2, #1338	@ 0x53a
 80084d4:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 80084e4:	63da      	str	r2, [r3, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	4618      	mov	r0, r3
 80084ec:	f001 fc2a 	bl	8009d44 <SDMMC_CmdStopTransfer>
 80084f0:	4602      	mov	r2, r0
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084f6:	431a      	orrs	r2, r3
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	f003 0308 	and.w	r3, r3, #8
 8008502:	2b00      	cmp	r3, #0
 8008504:	d00a      	beq.n	800851c <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2201      	movs	r2, #1
 800850a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2200      	movs	r2, #0
 8008512:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f000 f857 	bl	80085c8 <HAL_SD_ErrorCallback>
}
 800851a:	e051      	b.n	80085c0 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008522:	2b00      	cmp	r3, #0
 8008524:	d04c      	beq.n	80085c0 <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	f003 0310 	and.w	r3, r3, #16
 800852c:	2b00      	cmp	r3, #0
 800852e:	d104      	bne.n	800853a <HAL_SD_IRQHandler+0x25e>
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	f003 0320 	and.w	r3, r3, #32
 8008536:	2b00      	cmp	r3, #0
 8008538:	d011      	beq.n	800855e <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800853e:	4a17      	ldr	r2, [pc, #92]	@ (800859c <HAL_SD_IRQHandler+0x2c0>)
 8008540:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008546:	4618      	mov	r0, r3
 8008548:	f7fc f9fe 	bl	8004948 <HAL_DMA_Abort_IT>
 800854c:	4603      	mov	r3, r0
 800854e:	2b00      	cmp	r3, #0
 8008550:	d036      	beq.n	80085c0 <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008556:	4618      	mov	r0, r3
 8008558:	f000 fad0 	bl	8008afc <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800855c:	e030      	b.n	80085c0 <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	f003 0301 	and.w	r3, r3, #1
 8008564:	2b00      	cmp	r3, #0
 8008566:	d104      	bne.n	8008572 <HAL_SD_IRQHandler+0x296>
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	f003 0302 	and.w	r3, r3, #2
 800856e:	2b00      	cmp	r3, #0
 8008570:	d018      	beq.n	80085a4 <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008576:	4a0a      	ldr	r2, [pc, #40]	@ (80085a0 <HAL_SD_IRQHandler+0x2c4>)
 8008578:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800857e:	4618      	mov	r0, r3
 8008580:	f7fc f9e2 	bl	8004948 <HAL_DMA_Abort_IT>
 8008584:	4603      	mov	r3, r0
 8008586:	2b00      	cmp	r3, #0
 8008588:	d01a      	beq.n	80085c0 <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800858e:	4618      	mov	r0, r3
 8008590:	f000 faeb 	bl	8008b6a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8008594:	e014      	b.n	80085c0 <HAL_SD_IRQHandler+0x2e4>
 8008596:	bf00      	nop
 8008598:	ffff3ec5 	.word	0xffff3ec5
 800859c:	08008afd 	.word	0x08008afd
 80085a0:	08008b6b 	.word	0x08008b6b
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2200      	movs	r2, #0
 80085a8:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2201      	movs	r2, #1
 80085ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2200      	movs	r2, #0
 80085b6:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f002 fb5f 	bl	800ac7c <HAL_SD_AbortCallback>
}
 80085be:	e7ff      	b.n	80085c0 <HAL_SD_IRQHandler+0x2e4>
 80085c0:	bf00      	nop
 80085c2:	3710      	adds	r7, #16
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}

080085c8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80085c8:	b480      	push	{r7}
 80085ca:	b083      	sub	sp, #12
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80085d0:	bf00      	nop
 80085d2:	370c      	adds	r7, #12
 80085d4:	46bd      	mov	sp, r7
 80085d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085da:	4770      	bx	lr

080085dc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80085dc:	b480      	push	{r7}
 80085de:	b083      	sub	sp, #12
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
 80085e4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80085ea:	0f9b      	lsrs	r3, r3, #30
 80085ec:	b2da      	uxtb	r2, r3
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80085f6:	0e9b      	lsrs	r3, r3, #26
 80085f8:	b2db      	uxtb	r3, r3
 80085fa:	f003 030f 	and.w	r3, r3, #15
 80085fe:	b2da      	uxtb	r2, r3
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008608:	0e1b      	lsrs	r3, r3, #24
 800860a:	b2db      	uxtb	r3, r3
 800860c:	f003 0303 	and.w	r3, r3, #3
 8008610:	b2da      	uxtb	r2, r3
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800861a:	0c1b      	lsrs	r3, r3, #16
 800861c:	b2da      	uxtb	r2, r3
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008626:	0a1b      	lsrs	r3, r3, #8
 8008628:	b2da      	uxtb	r2, r3
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008632:	b2da      	uxtb	r2, r3
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800863c:	0d1b      	lsrs	r3, r3, #20
 800863e:	b29a      	uxth	r2, r3
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008648:	0c1b      	lsrs	r3, r3, #16
 800864a:	b2db      	uxtb	r3, r3
 800864c:	f003 030f 	and.w	r3, r3, #15
 8008650:	b2da      	uxtb	r2, r3
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800865a:	0bdb      	lsrs	r3, r3, #15
 800865c:	b2db      	uxtb	r3, r3
 800865e:	f003 0301 	and.w	r3, r3, #1
 8008662:	b2da      	uxtb	r2, r3
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800866c:	0b9b      	lsrs	r3, r3, #14
 800866e:	b2db      	uxtb	r3, r3
 8008670:	f003 0301 	and.w	r3, r3, #1
 8008674:	b2da      	uxtb	r2, r3
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800867e:	0b5b      	lsrs	r3, r3, #13
 8008680:	b2db      	uxtb	r3, r3
 8008682:	f003 0301 	and.w	r3, r3, #1
 8008686:	b2da      	uxtb	r2, r3
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008690:	0b1b      	lsrs	r3, r3, #12
 8008692:	b2db      	uxtb	r3, r3
 8008694:	f003 0301 	and.w	r3, r3, #1
 8008698:	b2da      	uxtb	r2, r3
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	2200      	movs	r2, #0
 80086a2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d163      	bne.n	8008774 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80086b0:	009a      	lsls	r2, r3, #2
 80086b2:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80086b6:	4013      	ands	r3, r2
 80086b8:	687a      	ldr	r2, [r7, #4]
 80086ba:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 80086bc:	0f92      	lsrs	r2, r2, #30
 80086be:	431a      	orrs	r2, r3
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80086c8:	0edb      	lsrs	r3, r3, #27
 80086ca:	b2db      	uxtb	r3, r3
 80086cc:	f003 0307 	and.w	r3, r3, #7
 80086d0:	b2da      	uxtb	r2, r3
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80086da:	0e1b      	lsrs	r3, r3, #24
 80086dc:	b2db      	uxtb	r3, r3
 80086de:	f003 0307 	and.w	r3, r3, #7
 80086e2:	b2da      	uxtb	r2, r3
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80086ec:	0d5b      	lsrs	r3, r3, #21
 80086ee:	b2db      	uxtb	r3, r3
 80086f0:	f003 0307 	and.w	r3, r3, #7
 80086f4:	b2da      	uxtb	r2, r3
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80086fe:	0c9b      	lsrs	r3, r3, #18
 8008700:	b2db      	uxtb	r3, r3
 8008702:	f003 0307 	and.w	r3, r3, #7
 8008706:	b2da      	uxtb	r2, r3
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008710:	0bdb      	lsrs	r3, r3, #15
 8008712:	b2db      	uxtb	r3, r3
 8008714:	f003 0307 	and.w	r3, r3, #7
 8008718:	b2da      	uxtb	r2, r3
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	691b      	ldr	r3, [r3, #16]
 8008722:	1c5a      	adds	r2, r3, #1
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	7e1b      	ldrb	r3, [r3, #24]
 800872c:	b2db      	uxtb	r3, r3
 800872e:	f003 0307 	and.w	r3, r3, #7
 8008732:	3302      	adds	r3, #2
 8008734:	2201      	movs	r2, #1
 8008736:	fa02 f303 	lsl.w	r3, r2, r3
 800873a:	687a      	ldr	r2, [r7, #4]
 800873c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800873e:	fb03 f202 	mul.w	r2, r3, r2
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	7a1b      	ldrb	r3, [r3, #8]
 800874a:	b2db      	uxtb	r3, r3
 800874c:	f003 030f 	and.w	r3, r3, #15
 8008750:	2201      	movs	r2, #1
 8008752:	409a      	lsls	r2, r3
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800875c:	687a      	ldr	r2, [r7, #4]
 800875e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8008760:	0a52      	lsrs	r2, r2, #9
 8008762:	fb03 f202 	mul.w	r2, r3, r2
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008770:	661a      	str	r2, [r3, #96]	@ 0x60
 8008772:	e031      	b.n	80087d8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008778:	2b01      	cmp	r3, #1
 800877a:	d11d      	bne.n	80087b8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008780:	041b      	lsls	r3, r3, #16
 8008782:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800878a:	0c1b      	lsrs	r3, r3, #16
 800878c:	431a      	orrs	r2, r3
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	691b      	ldr	r3, [r3, #16]
 8008796:	3301      	adds	r3, #1
 8008798:	029a      	lsls	r2, r3, #10
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80087ac:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	661a      	str	r2, [r3, #96]	@ 0x60
 80087b6:	e00f      	b.n	80087d8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4a58      	ldr	r2, [pc, #352]	@ (8008920 <HAL_SD_GetCardCSD+0x344>)
 80087be:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087c4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2201      	movs	r2, #1
 80087d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80087d4:	2301      	movs	r3, #1
 80087d6:	e09d      	b.n	8008914 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80087dc:	0b9b      	lsrs	r3, r3, #14
 80087de:	b2db      	uxtb	r3, r3
 80087e0:	f003 0301 	and.w	r3, r3, #1
 80087e4:	b2da      	uxtb	r2, r3
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80087ee:	09db      	lsrs	r3, r3, #7
 80087f0:	b2db      	uxtb	r3, r3
 80087f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80087f6:	b2da      	uxtb	r2, r3
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008800:	b2db      	uxtb	r3, r3
 8008802:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008806:	b2da      	uxtb	r2, r3
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008810:	0fdb      	lsrs	r3, r3, #31
 8008812:	b2da      	uxtb	r2, r3
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800881c:	0f5b      	lsrs	r3, r3, #29
 800881e:	b2db      	uxtb	r3, r3
 8008820:	f003 0303 	and.w	r3, r3, #3
 8008824:	b2da      	uxtb	r2, r3
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800882e:	0e9b      	lsrs	r3, r3, #26
 8008830:	b2db      	uxtb	r3, r3
 8008832:	f003 0307 	and.w	r3, r3, #7
 8008836:	b2da      	uxtb	r2, r3
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008840:	0d9b      	lsrs	r3, r3, #22
 8008842:	b2db      	uxtb	r3, r3
 8008844:	f003 030f 	and.w	r3, r3, #15
 8008848:	b2da      	uxtb	r2, r3
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008852:	0d5b      	lsrs	r3, r3, #21
 8008854:	b2db      	uxtb	r3, r3
 8008856:	f003 0301 	and.w	r3, r3, #1
 800885a:	b2da      	uxtb	r2, r3
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	2200      	movs	r2, #0
 8008866:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800886e:	0c1b      	lsrs	r3, r3, #16
 8008870:	b2db      	uxtb	r3, r3
 8008872:	f003 0301 	and.w	r3, r3, #1
 8008876:	b2da      	uxtb	r2, r3
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008882:	0bdb      	lsrs	r3, r3, #15
 8008884:	b2db      	uxtb	r3, r3
 8008886:	f003 0301 	and.w	r3, r3, #1
 800888a:	b2da      	uxtb	r2, r3
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008896:	0b9b      	lsrs	r3, r3, #14
 8008898:	b2db      	uxtb	r3, r3
 800889a:	f003 0301 	and.w	r3, r3, #1
 800889e:	b2da      	uxtb	r2, r3
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088aa:	0b5b      	lsrs	r3, r3, #13
 80088ac:	b2db      	uxtb	r3, r3
 80088ae:	f003 0301 	and.w	r3, r3, #1
 80088b2:	b2da      	uxtb	r2, r3
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088be:	0b1b      	lsrs	r3, r3, #12
 80088c0:	b2db      	uxtb	r3, r3
 80088c2:	f003 0301 	and.w	r3, r3, #1
 80088c6:	b2da      	uxtb	r2, r3
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088d2:	0a9b      	lsrs	r3, r3, #10
 80088d4:	b2db      	uxtb	r3, r3
 80088d6:	f003 0303 	and.w	r3, r3, #3
 80088da:	b2da      	uxtb	r2, r3
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088e6:	0a1b      	lsrs	r3, r3, #8
 80088e8:	b2db      	uxtb	r3, r3
 80088ea:	f003 0303 	and.w	r3, r3, #3
 80088ee:	b2da      	uxtb	r2, r3
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088fa:	085b      	lsrs	r3, r3, #1
 80088fc:	b2db      	uxtb	r3, r3
 80088fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008902:	b2da      	uxtb	r2, r3
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	2201      	movs	r2, #1
 800890e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8008912:	2300      	movs	r3, #0
}
 8008914:	4618      	mov	r0, r3
 8008916:	370c      	adds	r7, #12
 8008918:	46bd      	mov	sp, r7
 800891a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891e:	4770      	bx	lr
 8008920:	004005ff 	.word	0x004005ff

08008924 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008924:	b480      	push	{r7}
 8008926:	b083      	sub	sp, #12
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
 800892c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800896e:	2300      	movs	r3, #0
}
 8008970:	4618      	mov	r0, r3
 8008972:	370c      	adds	r7, #12
 8008974:	46bd      	mov	sp, r7
 8008976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897a:	4770      	bx	lr

0800897c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b086      	sub	sp, #24
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008984:	2300      	movs	r3, #0
 8008986:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008988:	f107 030c 	add.w	r3, r7, #12
 800898c:	4619      	mov	r1, r3
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f000 fa7e 	bl	8008e90 <SD_SendStatus>
 8008994:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008996:	697b      	ldr	r3, [r7, #20]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d005      	beq.n	80089a8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80089a0:	697b      	ldr	r3, [r7, #20]
 80089a2:	431a      	orrs	r2, r3
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	0a5b      	lsrs	r3, r3, #9
 80089ac:	f003 030f 	and.w	r3, r3, #15
 80089b0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80089b2:	693b      	ldr	r3, [r7, #16]
}
 80089b4:	4618      	mov	r0, r3
 80089b6:	3718      	adds	r7, #24
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}

080089bc <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80089bc:	b480      	push	{r7}
 80089be:	b085      	sub	sp, #20
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089c8:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80089d8:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80089da:	bf00      	nop
 80089dc:	3714      	adds	r7, #20
 80089de:	46bd      	mov	sp, r7
 80089e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e4:	4770      	bx	lr

080089e6 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80089e6:	b580      	push	{r7, lr}
 80089e8:	b084      	sub	sp, #16
 80089ea:	af00      	add	r7, sp, #0
 80089ec:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089f2:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089f8:	2b82      	cmp	r3, #130	@ 0x82
 80089fa:	d111      	bne.n	8008a20 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	4618      	mov	r0, r3
 8008a02:	f001 f99f 	bl	8009d44 <SDMMC_CmdStopTransfer>
 8008a06:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d008      	beq.n	8008a20 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	431a      	orrs	r2, r3
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8008a1a:	68f8      	ldr	r0, [r7, #12]
 8008a1c:	f7ff fdd4 	bl	80085c8 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f022 0208 	bic.w	r2, r2, #8
 8008a2e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f240 523a 	movw	r2, #1338	@ 0x53a
 8008a38:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	2201      	movs	r2, #1
 8008a3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	2200      	movs	r2, #0
 8008a46:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8008a48:	68f8      	ldr	r0, [r7, #12]
 8008a4a:	f002 f92b 	bl	800aca4 <HAL_SD_RxCpltCallback>
#endif
}
 8008a4e:	bf00      	nop
 8008a50:	3710      	adds	r7, #16
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}
	...

08008a58 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b086      	sub	sp, #24
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a64:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f7fc f91a 	bl	8004ca0 <HAL_DMA_GetError>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	2b02      	cmp	r3, #2
 8008a70:	d03e      	beq.n	8008af0 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8008a72:	697b      	ldr	r3, [r7, #20]
 8008a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a78:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8008a7a:	697b      	ldr	r3, [r7, #20]
 8008a7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a80:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8008a82:	693b      	ldr	r3, [r7, #16]
 8008a84:	2b01      	cmp	r3, #1
 8008a86:	d002      	beq.n	8008a8e <SD_DMAError+0x36>
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	2b01      	cmp	r3, #1
 8008a8c:	d12d      	bne.n	8008aea <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008a8e:	697b      	ldr	r3, [r7, #20]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	4a19      	ldr	r2, [pc, #100]	@ (8008af8 <SD_DMAError+0xa0>)
 8008a94:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8008a96:	697b      	ldr	r3, [r7, #20]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008a9c:	697b      	ldr	r3, [r7, #20]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8008aa4:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008aaa:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008aae:	697b      	ldr	r3, [r7, #20]
 8008ab0:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8008ab2:	6978      	ldr	r0, [r7, #20]
 8008ab4:	f7ff ff62 	bl	800897c <HAL_SD_GetCardState>
 8008ab8:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	2b06      	cmp	r3, #6
 8008abe:	d002      	beq.n	8008ac6 <SD_DMAError+0x6e>
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	2b05      	cmp	r3, #5
 8008ac4:	d10a      	bne.n	8008adc <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008ac6:	697b      	ldr	r3, [r7, #20]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	4618      	mov	r0, r3
 8008acc:	f001 f93a 	bl	8009d44 <SDMMC_CmdStopTransfer>
 8008ad0:	4602      	mov	r2, r0
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ad6:	431a      	orrs	r2, r3
 8008ad8:	697b      	ldr	r3, [r7, #20]
 8008ada:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8008adc:	697b      	ldr	r3, [r7, #20]
 8008ade:	2201      	movs	r2, #1
 8008ae0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008ae4:	697b      	ldr	r3, [r7, #20]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8008aea:	6978      	ldr	r0, [r7, #20]
 8008aec:	f7ff fd6c 	bl	80085c8 <HAL_SD_ErrorCallback>
#endif
  }
}
 8008af0:	bf00      	nop
 8008af2:	3718      	adds	r7, #24
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bd80      	pop	{r7, pc}
 8008af8:	004005ff 	.word	0x004005ff

08008afc <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b084      	sub	sp, #16
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b08:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f240 523a 	movw	r2, #1338	@ 0x53a
 8008b12:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8008b14:	68f8      	ldr	r0, [r7, #12]
 8008b16:	f7ff ff31 	bl	800897c <HAL_SD_GetCardState>
 8008b1a:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	2201      	movs	r2, #1
 8008b20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	2200      	movs	r2, #0
 8008b28:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	2b06      	cmp	r3, #6
 8008b2e:	d002      	beq.n	8008b36 <SD_DMATxAbort+0x3a>
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	2b05      	cmp	r3, #5
 8008b34:	d10a      	bne.n	8008b4c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f001 f902 	bl	8009d44 <SDMMC_CmdStopTransfer>
 8008b40:	4602      	mov	r2, r0
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b46:	431a      	orrs	r2, r3
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d103      	bne.n	8008b5c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8008b54:	68f8      	ldr	r0, [r7, #12]
 8008b56:	f002 f891 	bl	800ac7c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8008b5a:	e002      	b.n	8008b62 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8008b5c:	68f8      	ldr	r0, [r7, #12]
 8008b5e:	f7ff fd33 	bl	80085c8 <HAL_SD_ErrorCallback>
}
 8008b62:	bf00      	nop
 8008b64:	3710      	adds	r7, #16
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd80      	pop	{r7, pc}

08008b6a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8008b6a:	b580      	push	{r7, lr}
 8008b6c:	b084      	sub	sp, #16
 8008b6e:	af00      	add	r7, sp, #0
 8008b70:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b76:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f240 523a 	movw	r2, #1338	@ 0x53a
 8008b80:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8008b82:	68f8      	ldr	r0, [r7, #12]
 8008b84:	f7ff fefa 	bl	800897c <HAL_SD_GetCardState>
 8008b88:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	2201      	movs	r2, #1
 8008b8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	2200      	movs	r2, #0
 8008b96:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	2b06      	cmp	r3, #6
 8008b9c:	d002      	beq.n	8008ba4 <SD_DMARxAbort+0x3a>
 8008b9e:	68bb      	ldr	r3, [r7, #8]
 8008ba0:	2b05      	cmp	r3, #5
 8008ba2:	d10a      	bne.n	8008bba <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	4618      	mov	r0, r3
 8008baa:	f001 f8cb 	bl	8009d44 <SDMMC_CmdStopTransfer>
 8008bae:	4602      	mov	r2, r0
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bb4:	431a      	orrs	r2, r3
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d103      	bne.n	8008bca <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8008bc2:	68f8      	ldr	r0, [r7, #12]
 8008bc4:	f002 f85a 	bl	800ac7c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8008bc8:	e002      	b.n	8008bd0 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8008bca:	68f8      	ldr	r0, [r7, #12]
 8008bcc:	f7ff fcfc 	bl	80085c8 <HAL_SD_ErrorCallback>
}
 8008bd0:	bf00      	nop
 8008bd2:	3710      	adds	r7, #16
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}

08008bd8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008bd8:	b5b0      	push	{r4, r5, r7, lr}
 8008bda:	b094      	sub	sp, #80	@ 0x50
 8008bdc:	af04      	add	r7, sp, #16
 8008bde:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008be0:	2301      	movs	r3, #1
 8008be2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	4618      	mov	r0, r3
 8008bea:	f000 ff7d 	bl	8009ae8 <SDMMC_GetPowerState>
 8008bee:	4603      	mov	r3, r0
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d102      	bne.n	8008bfa <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008bf4:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8008bf8:	e0b8      	b.n	8008d6c <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008bfe:	2b03      	cmp	r3, #3
 8008c00:	d02f      	beq.n	8008c62 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	4618      	mov	r0, r3
 8008c08:	f001 f964 	bl	8009ed4 <SDMMC_CmdSendCID>
 8008c0c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008c0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d001      	beq.n	8008c18 <SD_InitCard+0x40>
    {
      return errorstate;
 8008c14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c16:	e0a9      	b.n	8008d6c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	2100      	movs	r1, #0
 8008c1e:	4618      	mov	r0, r3
 8008c20:	f000 ffa7 	bl	8009b72 <SDMMC_GetResponse>
 8008c24:	4602      	mov	r2, r0
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	2104      	movs	r1, #4
 8008c30:	4618      	mov	r0, r3
 8008c32:	f000 ff9e 	bl	8009b72 <SDMMC_GetResponse>
 8008c36:	4602      	mov	r2, r0
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	2108      	movs	r1, #8
 8008c42:	4618      	mov	r0, r3
 8008c44:	f000 ff95 	bl	8009b72 <SDMMC_GetResponse>
 8008c48:	4602      	mov	r2, r0
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	210c      	movs	r1, #12
 8008c54:	4618      	mov	r0, r3
 8008c56:	f000 ff8c 	bl	8009b72 <SDMMC_GetResponse>
 8008c5a:	4602      	mov	r2, r0
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c66:	2b03      	cmp	r3, #3
 8008c68:	d00d      	beq.n	8008c86 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f107 020e 	add.w	r2, r7, #14
 8008c72:	4611      	mov	r1, r2
 8008c74:	4618      	mov	r0, r3
 8008c76:	f001 f96a 	bl	8009f4e <SDMMC_CmdSetRelAdd>
 8008c7a:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008c7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d001      	beq.n	8008c86 <SD_InitCard+0xae>
    {
      return errorstate;
 8008c82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c84:	e072      	b.n	8008d6c <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c8a:	2b03      	cmp	r3, #3
 8008c8c:	d036      	beq.n	8008cfc <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008c8e:	89fb      	ldrh	r3, [r7, #14]
 8008c90:	461a      	mov	r2, r3
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681a      	ldr	r2, [r3, #0]
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c9e:	041b      	lsls	r3, r3, #16
 8008ca0:	4619      	mov	r1, r3
 8008ca2:	4610      	mov	r0, r2
 8008ca4:	f001 f934 	bl	8009f10 <SDMMC_CmdSendCSD>
 8008ca8:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008caa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d001      	beq.n	8008cb4 <SD_InitCard+0xdc>
    {
      return errorstate;
 8008cb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008cb2:	e05b      	b.n	8008d6c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	2100      	movs	r1, #0
 8008cba:	4618      	mov	r0, r3
 8008cbc:	f000 ff59 	bl	8009b72 <SDMMC_GetResponse>
 8008cc0:	4602      	mov	r2, r0
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	2104      	movs	r1, #4
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f000 ff50 	bl	8009b72 <SDMMC_GetResponse>
 8008cd2:	4602      	mov	r2, r0
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	2108      	movs	r1, #8
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f000 ff47 	bl	8009b72 <SDMMC_GetResponse>
 8008ce4:	4602      	mov	r2, r0
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	210c      	movs	r1, #12
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	f000 ff3e 	bl	8009b72 <SDMMC_GetResponse>
 8008cf6:	4602      	mov	r2, r0
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	2104      	movs	r1, #4
 8008d02:	4618      	mov	r0, r3
 8008d04:	f000 ff35 	bl	8009b72 <SDMMC_GetResponse>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	0d1a      	lsrs	r2, r3, #20
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008d10:	f107 0310 	add.w	r3, r7, #16
 8008d14:	4619      	mov	r1, r3
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f7ff fc60 	bl	80085dc <HAL_SD_GetCardCSD>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d002      	beq.n	8008d28 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008d22:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008d26:	e021      	b.n	8008d6c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6819      	ldr	r1, [r3, #0]
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d30:	041b      	lsls	r3, r3, #16
 8008d32:	2200      	movs	r2, #0
 8008d34:	461c      	mov	r4, r3
 8008d36:	4615      	mov	r5, r2
 8008d38:	4622      	mov	r2, r4
 8008d3a:	462b      	mov	r3, r5
 8008d3c:	4608      	mov	r0, r1
 8008d3e:	f001 f823 	bl	8009d88 <SDMMC_CmdSelDesel>
 8008d42:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008d44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d001      	beq.n	8008d4e <SD_InitCard+0x176>
  {
    return errorstate;
 8008d4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d4c:	e00e      	b.n	8008d6c <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681d      	ldr	r5, [r3, #0]
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	466c      	mov	r4, sp
 8008d56:	f103 0210 	add.w	r2, r3, #16
 8008d5a:	ca07      	ldmia	r2, {r0, r1, r2}
 8008d5c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008d60:	3304      	adds	r3, #4
 8008d62:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008d64:	4628      	mov	r0, r5
 8008d66:	f000 fe67 	bl	8009a38 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008d6a:	2300      	movs	r3, #0
}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	3740      	adds	r7, #64	@ 0x40
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bdb0      	pop	{r4, r5, r7, pc}

08008d74 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b086      	sub	sp, #24
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8008d80:	2300      	movs	r3, #0
 8008d82:	617b      	str	r3, [r7, #20]
 8008d84:	2300      	movs	r3, #0
 8008d86:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	f001 f81e 	bl	8009dce <SDMMC_CmdGoIdleState>
 8008d92:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d001      	beq.n	8008d9e <SD_PowerON+0x2a>
  {
    return errorstate;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	e072      	b.n	8008e84 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	4618      	mov	r0, r3
 8008da4:	f001 f831 	bl	8009e0a <SDMMC_CmdOperCond>
 8008da8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d00d      	beq.n	8008dcc <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2200      	movs	r2, #0
 8008db4:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	4618      	mov	r0, r3
 8008dbc:	f001 f807 	bl	8009dce <SDMMC_CmdGoIdleState>
 8008dc0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d004      	beq.n	8008dd2 <SD_PowerON+0x5e>
    {
      return errorstate;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	e05b      	b.n	8008e84 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2201      	movs	r2, #1
 8008dd0:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008dd6:	2b01      	cmp	r3, #1
 8008dd8:	d137      	bne.n	8008e4a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	2100      	movs	r1, #0
 8008de0:	4618      	mov	r0, r3
 8008de2:	f001 f831 	bl	8009e48 <SDMMC_CmdAppCommand>
 8008de6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d02d      	beq.n	8008e4a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008dee:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008df2:	e047      	b.n	8008e84 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	2100      	movs	r1, #0
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f001 f824 	bl	8009e48 <SDMMC_CmdAppCommand>
 8008e00:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d001      	beq.n	8008e0c <SD_PowerON+0x98>
    {
      return errorstate;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	e03b      	b.n	8008e84 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	491e      	ldr	r1, [pc, #120]	@ (8008e8c <SD_PowerON+0x118>)
 8008e12:	4618      	mov	r0, r3
 8008e14:	f001 f83a 	bl	8009e8c <SDMMC_CmdAppOperCommand>
 8008e18:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d002      	beq.n	8008e26 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008e20:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008e24:	e02e      	b.n	8008e84 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	2100      	movs	r1, #0
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	f000 fea0 	bl	8009b72 <SDMMC_GetResponse>
 8008e32:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008e34:	697b      	ldr	r3, [r7, #20]
 8008e36:	0fdb      	lsrs	r3, r3, #31
 8008e38:	2b01      	cmp	r3, #1
 8008e3a:	d101      	bne.n	8008e40 <SD_PowerON+0xcc>
 8008e3c:	2301      	movs	r3, #1
 8008e3e:	e000      	b.n	8008e42 <SD_PowerON+0xce>
 8008e40:	2300      	movs	r3, #0
 8008e42:	613b      	str	r3, [r7, #16]

    count++;
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	3301      	adds	r3, #1
 8008e48:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008e4a:	68bb      	ldr	r3, [r7, #8]
 8008e4c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8008e50:	4293      	cmp	r3, r2
 8008e52:	d802      	bhi.n	8008e5a <SD_PowerON+0xe6>
 8008e54:	693b      	ldr	r3, [r7, #16]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d0cc      	beq.n	8008df4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008e5a:	68bb      	ldr	r3, [r7, #8]
 8008e5c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8008e60:	4293      	cmp	r3, r2
 8008e62:	d902      	bls.n	8008e6a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008e64:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008e68:	e00c      	b.n	8008e84 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008e6a:	697b      	ldr	r3, [r7, #20]
 8008e6c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d003      	beq.n	8008e7c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2201      	movs	r2, #1
 8008e78:	645a      	str	r2, [r3, #68]	@ 0x44
 8008e7a:	e002      	b.n	8008e82 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2200      	movs	r2, #0
 8008e80:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8008e82:	2300      	movs	r3, #0
}
 8008e84:	4618      	mov	r0, r3
 8008e86:	3718      	adds	r7, #24
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	bd80      	pop	{r7, pc}
 8008e8c:	c1100000 	.word	0xc1100000

08008e90 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b084      	sub	sp, #16
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
 8008e98:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d102      	bne.n	8008ea6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008ea0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008ea4:	e018      	b.n	8008ed8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681a      	ldr	r2, [r3, #0]
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008eae:	041b      	lsls	r3, r3, #16
 8008eb0:	4619      	mov	r1, r3
 8008eb2:	4610      	mov	r0, r2
 8008eb4:	f001 f86c 	bl	8009f90 <SDMMC_CmdSendStatus>
 8008eb8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d001      	beq.n	8008ec4 <SD_SendStatus+0x34>
  {
    return errorstate;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	e009      	b.n	8008ed8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	2100      	movs	r1, #0
 8008eca:	4618      	mov	r0, r3
 8008ecc:	f000 fe51 	bl	8009b72 <SDMMC_GetResponse>
 8008ed0:	4602      	mov	r2, r0
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008ed6:	2300      	movs	r3, #0
}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	3710      	adds	r7, #16
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}

08008ee0 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b086      	sub	sp, #24
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008eec:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ef2:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8008ef4:	693b      	ldr	r3, [r7, #16]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d03f      	beq.n	8008f7a <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8008efa:	2300      	movs	r3, #0
 8008efc:	617b      	str	r3, [r7, #20]
 8008efe:	e033      	b.n	8008f68 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	4618      	mov	r0, r3
 8008f06:	f000 fdc3 	bl	8009a90 <SDMMC_ReadFIFO>
 8008f0a:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	b2da      	uxtb	r2, r3
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	3301      	adds	r3, #1
 8008f18:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008f1a:	693b      	ldr	r3, [r7, #16]
 8008f1c:	3b01      	subs	r3, #1
 8008f1e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8008f20:	68bb      	ldr	r3, [r7, #8]
 8008f22:	0a1b      	lsrs	r3, r3, #8
 8008f24:	b2da      	uxtb	r2, r3
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	3301      	adds	r3, #1
 8008f2e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008f30:	693b      	ldr	r3, [r7, #16]
 8008f32:	3b01      	subs	r3, #1
 8008f34:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	0c1b      	lsrs	r3, r3, #16
 8008f3a:	b2da      	uxtb	r2, r3
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	3301      	adds	r3, #1
 8008f44:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008f46:	693b      	ldr	r3, [r7, #16]
 8008f48:	3b01      	subs	r3, #1
 8008f4a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8008f4c:	68bb      	ldr	r3, [r7, #8]
 8008f4e:	0e1b      	lsrs	r3, r3, #24
 8008f50:	b2da      	uxtb	r2, r3
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	3301      	adds	r3, #1
 8008f5a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008f5c:	693b      	ldr	r3, [r7, #16]
 8008f5e:	3b01      	subs	r3, #1
 8008f60:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8008f62:	697b      	ldr	r3, [r7, #20]
 8008f64:	3301      	adds	r3, #1
 8008f66:	617b      	str	r3, [r7, #20]
 8008f68:	697b      	ldr	r3, [r7, #20]
 8008f6a:	2b07      	cmp	r3, #7
 8008f6c:	d9c8      	bls.n	8008f00 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	68fa      	ldr	r2, [r7, #12]
 8008f72:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	693a      	ldr	r2, [r7, #16]
 8008f78:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 8008f7a:	bf00      	nop
 8008f7c:	3718      	adds	r7, #24
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bd80      	pop	{r7, pc}

08008f82 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8008f82:	b580      	push	{r7, lr}
 8008f84:	b086      	sub	sp, #24
 8008f86:	af00      	add	r7, sp, #0
 8008f88:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6a1b      	ldr	r3, [r3, #32]
 8008f8e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f94:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8008f96:	693b      	ldr	r3, [r7, #16]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d043      	beq.n	8009024 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	617b      	str	r3, [r7, #20]
 8008fa0:	e037      	b.n	8009012 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	781b      	ldrb	r3, [r3, #0]
 8008fa6:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	3301      	adds	r3, #1
 8008fac:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008fae:	693b      	ldr	r3, [r7, #16]
 8008fb0:	3b01      	subs	r3, #1
 8008fb2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	781b      	ldrb	r3, [r3, #0]
 8008fb8:	021a      	lsls	r2, r3, #8
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	4313      	orrs	r3, r2
 8008fbe:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	3301      	adds	r3, #1
 8008fc4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008fc6:	693b      	ldr	r3, [r7, #16]
 8008fc8:	3b01      	subs	r3, #1
 8008fca:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	781b      	ldrb	r3, [r3, #0]
 8008fd0:	041a      	lsls	r2, r3, #16
 8008fd2:	68bb      	ldr	r3, [r7, #8]
 8008fd4:	4313      	orrs	r3, r2
 8008fd6:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	3301      	adds	r3, #1
 8008fdc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008fde:	693b      	ldr	r3, [r7, #16]
 8008fe0:	3b01      	subs	r3, #1
 8008fe2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	781b      	ldrb	r3, [r3, #0]
 8008fe8:	061a      	lsls	r2, r3, #24
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	4313      	orrs	r3, r2
 8008fee:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	3301      	adds	r3, #1
 8008ff4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008ff6:	693b      	ldr	r3, [r7, #16]
 8008ff8:	3b01      	subs	r3, #1
 8008ffa:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f107 0208 	add.w	r2, r7, #8
 8009004:	4611      	mov	r1, r2
 8009006:	4618      	mov	r0, r3
 8009008:	f000 fd4f 	bl	8009aaa <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800900c:	697b      	ldr	r3, [r7, #20]
 800900e:	3301      	adds	r3, #1
 8009010:	617b      	str	r3, [r7, #20]
 8009012:	697b      	ldr	r3, [r7, #20]
 8009014:	2b07      	cmp	r3, #7
 8009016:	d9c4      	bls.n	8008fa2 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	68fa      	ldr	r2, [r7, #12]
 800901c:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	693a      	ldr	r2, [r7, #16]
 8009022:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 8009024:	bf00      	nop
 8009026:	3718      	adds	r7, #24
 8009028:	46bd      	mov	sp, r7
 800902a:	bd80      	pop	{r7, pc}

0800902c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b082      	sub	sp, #8
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d101      	bne.n	800903e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800903a:	2301      	movs	r3, #1
 800903c:	e040      	b.n	80090c0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009042:	2b00      	cmp	r3, #0
 8009044:	d106      	bne.n	8009054 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2200      	movs	r2, #0
 800904a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f7f8 ffc8 	bl	8001fe4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2224      	movs	r2, #36	@ 0x24
 8009058:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	681a      	ldr	r2, [r3, #0]
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f022 0201 	bic.w	r2, r2, #1
 8009068:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800906e:	2b00      	cmp	r3, #0
 8009070:	d002      	beq.n	8009078 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	f000 fb16 	bl	80096a4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f000 f8af 	bl	80091dc <UART_SetConfig>
 800907e:	4603      	mov	r3, r0
 8009080:	2b01      	cmp	r3, #1
 8009082:	d101      	bne.n	8009088 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8009084:	2301      	movs	r3, #1
 8009086:	e01b      	b.n	80090c0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	685a      	ldr	r2, [r3, #4]
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009096:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	689a      	ldr	r2, [r3, #8]
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80090a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	681a      	ldr	r2, [r3, #0]
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f042 0201 	orr.w	r2, r2, #1
 80090b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	f000 fb95 	bl	80097e8 <UART_CheckIdleState>
 80090be:	4603      	mov	r3, r0
}
 80090c0:	4618      	mov	r0, r3
 80090c2:	3708      	adds	r7, #8
 80090c4:	46bd      	mov	sp, r7
 80090c6:	bd80      	pop	{r7, pc}

080090c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b08a      	sub	sp, #40	@ 0x28
 80090cc:	af02      	add	r7, sp, #8
 80090ce:	60f8      	str	r0, [r7, #12]
 80090d0:	60b9      	str	r1, [r7, #8]
 80090d2:	603b      	str	r3, [r7, #0]
 80090d4:	4613      	mov	r3, r2
 80090d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80090dc:	2b20      	cmp	r3, #32
 80090de:	d177      	bne.n	80091d0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d002      	beq.n	80090ec <HAL_UART_Transmit+0x24>
 80090e6:	88fb      	ldrh	r3, [r7, #6]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d101      	bne.n	80090f0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80090ec:	2301      	movs	r3, #1
 80090ee:	e070      	b.n	80091d2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	2200      	movs	r2, #0
 80090f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	2221      	movs	r2, #33	@ 0x21
 80090fc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80090fe:	f7fb f905 	bl	800430c <HAL_GetTick>
 8009102:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	88fa      	ldrh	r2, [r7, #6]
 8009108:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	88fa      	ldrh	r2, [r7, #6]
 8009110:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	689b      	ldr	r3, [r3, #8]
 8009118:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800911c:	d108      	bne.n	8009130 <HAL_UART_Transmit+0x68>
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	691b      	ldr	r3, [r3, #16]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d104      	bne.n	8009130 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8009126:	2300      	movs	r3, #0
 8009128:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800912a:	68bb      	ldr	r3, [r7, #8]
 800912c:	61bb      	str	r3, [r7, #24]
 800912e:	e003      	b.n	8009138 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009134:	2300      	movs	r3, #0
 8009136:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009138:	e02f      	b.n	800919a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	9300      	str	r3, [sp, #0]
 800913e:	697b      	ldr	r3, [r7, #20]
 8009140:	2200      	movs	r2, #0
 8009142:	2180      	movs	r1, #128	@ 0x80
 8009144:	68f8      	ldr	r0, [r7, #12]
 8009146:	f000 fba6 	bl	8009896 <UART_WaitOnFlagUntilTimeout>
 800914a:	4603      	mov	r3, r0
 800914c:	2b00      	cmp	r3, #0
 800914e:	d004      	beq.n	800915a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	2220      	movs	r2, #32
 8009154:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8009156:	2303      	movs	r3, #3
 8009158:	e03b      	b.n	80091d2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800915a:	69fb      	ldr	r3, [r7, #28]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d10b      	bne.n	8009178 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009160:	69bb      	ldr	r3, [r7, #24]
 8009162:	881b      	ldrh	r3, [r3, #0]
 8009164:	461a      	mov	r2, r3
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800916e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8009170:	69bb      	ldr	r3, [r7, #24]
 8009172:	3302      	adds	r3, #2
 8009174:	61bb      	str	r3, [r7, #24]
 8009176:	e007      	b.n	8009188 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009178:	69fb      	ldr	r3, [r7, #28]
 800917a:	781a      	ldrb	r2, [r3, #0]
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009182:	69fb      	ldr	r3, [r7, #28]
 8009184:	3301      	adds	r3, #1
 8009186:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800918e:	b29b      	uxth	r3, r3
 8009190:	3b01      	subs	r3, #1
 8009192:	b29a      	uxth	r2, r3
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80091a0:	b29b      	uxth	r3, r3
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d1c9      	bne.n	800913a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	9300      	str	r3, [sp, #0]
 80091aa:	697b      	ldr	r3, [r7, #20]
 80091ac:	2200      	movs	r2, #0
 80091ae:	2140      	movs	r1, #64	@ 0x40
 80091b0:	68f8      	ldr	r0, [r7, #12]
 80091b2:	f000 fb70 	bl	8009896 <UART_WaitOnFlagUntilTimeout>
 80091b6:	4603      	mov	r3, r0
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d004      	beq.n	80091c6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	2220      	movs	r2, #32
 80091c0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80091c2:	2303      	movs	r3, #3
 80091c4:	e005      	b.n	80091d2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	2220      	movs	r2, #32
 80091ca:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80091cc:	2300      	movs	r3, #0
 80091ce:	e000      	b.n	80091d2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80091d0:	2302      	movs	r3, #2
  }
}
 80091d2:	4618      	mov	r0, r3
 80091d4:	3720      	adds	r7, #32
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bd80      	pop	{r7, pc}
	...

080091dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b088      	sub	sp, #32
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80091e4:	2300      	movs	r3, #0
 80091e6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	689a      	ldr	r2, [r3, #8]
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	691b      	ldr	r3, [r3, #16]
 80091f0:	431a      	orrs	r2, r3
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	695b      	ldr	r3, [r3, #20]
 80091f6:	431a      	orrs	r2, r3
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	69db      	ldr	r3, [r3, #28]
 80091fc:	4313      	orrs	r3, r2
 80091fe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	681a      	ldr	r2, [r3, #0]
 8009206:	4ba6      	ldr	r3, [pc, #664]	@ (80094a0 <UART_SetConfig+0x2c4>)
 8009208:	4013      	ands	r3, r2
 800920a:	687a      	ldr	r2, [r7, #4]
 800920c:	6812      	ldr	r2, [r2, #0]
 800920e:	6979      	ldr	r1, [r7, #20]
 8009210:	430b      	orrs	r3, r1
 8009212:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	685b      	ldr	r3, [r3, #4]
 800921a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	68da      	ldr	r2, [r3, #12]
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	430a      	orrs	r2, r1
 8009228:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	699b      	ldr	r3, [r3, #24]
 800922e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	6a1b      	ldr	r3, [r3, #32]
 8009234:	697a      	ldr	r2, [r7, #20]
 8009236:	4313      	orrs	r3, r2
 8009238:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	689b      	ldr	r3, [r3, #8]
 8009240:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	697a      	ldr	r2, [r7, #20]
 800924a:	430a      	orrs	r2, r1
 800924c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	4a94      	ldr	r2, [pc, #592]	@ (80094a4 <UART_SetConfig+0x2c8>)
 8009254:	4293      	cmp	r3, r2
 8009256:	d120      	bne.n	800929a <UART_SetConfig+0xbe>
 8009258:	4b93      	ldr	r3, [pc, #588]	@ (80094a8 <UART_SetConfig+0x2cc>)
 800925a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800925e:	f003 0303 	and.w	r3, r3, #3
 8009262:	2b03      	cmp	r3, #3
 8009264:	d816      	bhi.n	8009294 <UART_SetConfig+0xb8>
 8009266:	a201      	add	r2, pc, #4	@ (adr r2, 800926c <UART_SetConfig+0x90>)
 8009268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800926c:	0800927d 	.word	0x0800927d
 8009270:	08009289 	.word	0x08009289
 8009274:	08009283 	.word	0x08009283
 8009278:	0800928f 	.word	0x0800928f
 800927c:	2301      	movs	r3, #1
 800927e:	77fb      	strb	r3, [r7, #31]
 8009280:	e150      	b.n	8009524 <UART_SetConfig+0x348>
 8009282:	2302      	movs	r3, #2
 8009284:	77fb      	strb	r3, [r7, #31]
 8009286:	e14d      	b.n	8009524 <UART_SetConfig+0x348>
 8009288:	2304      	movs	r3, #4
 800928a:	77fb      	strb	r3, [r7, #31]
 800928c:	e14a      	b.n	8009524 <UART_SetConfig+0x348>
 800928e:	2308      	movs	r3, #8
 8009290:	77fb      	strb	r3, [r7, #31]
 8009292:	e147      	b.n	8009524 <UART_SetConfig+0x348>
 8009294:	2310      	movs	r3, #16
 8009296:	77fb      	strb	r3, [r7, #31]
 8009298:	e144      	b.n	8009524 <UART_SetConfig+0x348>
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	4a83      	ldr	r2, [pc, #524]	@ (80094ac <UART_SetConfig+0x2d0>)
 80092a0:	4293      	cmp	r3, r2
 80092a2:	d132      	bne.n	800930a <UART_SetConfig+0x12e>
 80092a4:	4b80      	ldr	r3, [pc, #512]	@ (80094a8 <UART_SetConfig+0x2cc>)
 80092a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092aa:	f003 030c 	and.w	r3, r3, #12
 80092ae:	2b0c      	cmp	r3, #12
 80092b0:	d828      	bhi.n	8009304 <UART_SetConfig+0x128>
 80092b2:	a201      	add	r2, pc, #4	@ (adr r2, 80092b8 <UART_SetConfig+0xdc>)
 80092b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092b8:	080092ed 	.word	0x080092ed
 80092bc:	08009305 	.word	0x08009305
 80092c0:	08009305 	.word	0x08009305
 80092c4:	08009305 	.word	0x08009305
 80092c8:	080092f9 	.word	0x080092f9
 80092cc:	08009305 	.word	0x08009305
 80092d0:	08009305 	.word	0x08009305
 80092d4:	08009305 	.word	0x08009305
 80092d8:	080092f3 	.word	0x080092f3
 80092dc:	08009305 	.word	0x08009305
 80092e0:	08009305 	.word	0x08009305
 80092e4:	08009305 	.word	0x08009305
 80092e8:	080092ff 	.word	0x080092ff
 80092ec:	2300      	movs	r3, #0
 80092ee:	77fb      	strb	r3, [r7, #31]
 80092f0:	e118      	b.n	8009524 <UART_SetConfig+0x348>
 80092f2:	2302      	movs	r3, #2
 80092f4:	77fb      	strb	r3, [r7, #31]
 80092f6:	e115      	b.n	8009524 <UART_SetConfig+0x348>
 80092f8:	2304      	movs	r3, #4
 80092fa:	77fb      	strb	r3, [r7, #31]
 80092fc:	e112      	b.n	8009524 <UART_SetConfig+0x348>
 80092fe:	2308      	movs	r3, #8
 8009300:	77fb      	strb	r3, [r7, #31]
 8009302:	e10f      	b.n	8009524 <UART_SetConfig+0x348>
 8009304:	2310      	movs	r3, #16
 8009306:	77fb      	strb	r3, [r7, #31]
 8009308:	e10c      	b.n	8009524 <UART_SetConfig+0x348>
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	4a68      	ldr	r2, [pc, #416]	@ (80094b0 <UART_SetConfig+0x2d4>)
 8009310:	4293      	cmp	r3, r2
 8009312:	d120      	bne.n	8009356 <UART_SetConfig+0x17a>
 8009314:	4b64      	ldr	r3, [pc, #400]	@ (80094a8 <UART_SetConfig+0x2cc>)
 8009316:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800931a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800931e:	2b30      	cmp	r3, #48	@ 0x30
 8009320:	d013      	beq.n	800934a <UART_SetConfig+0x16e>
 8009322:	2b30      	cmp	r3, #48	@ 0x30
 8009324:	d814      	bhi.n	8009350 <UART_SetConfig+0x174>
 8009326:	2b20      	cmp	r3, #32
 8009328:	d009      	beq.n	800933e <UART_SetConfig+0x162>
 800932a:	2b20      	cmp	r3, #32
 800932c:	d810      	bhi.n	8009350 <UART_SetConfig+0x174>
 800932e:	2b00      	cmp	r3, #0
 8009330:	d002      	beq.n	8009338 <UART_SetConfig+0x15c>
 8009332:	2b10      	cmp	r3, #16
 8009334:	d006      	beq.n	8009344 <UART_SetConfig+0x168>
 8009336:	e00b      	b.n	8009350 <UART_SetConfig+0x174>
 8009338:	2300      	movs	r3, #0
 800933a:	77fb      	strb	r3, [r7, #31]
 800933c:	e0f2      	b.n	8009524 <UART_SetConfig+0x348>
 800933e:	2302      	movs	r3, #2
 8009340:	77fb      	strb	r3, [r7, #31]
 8009342:	e0ef      	b.n	8009524 <UART_SetConfig+0x348>
 8009344:	2304      	movs	r3, #4
 8009346:	77fb      	strb	r3, [r7, #31]
 8009348:	e0ec      	b.n	8009524 <UART_SetConfig+0x348>
 800934a:	2308      	movs	r3, #8
 800934c:	77fb      	strb	r3, [r7, #31]
 800934e:	e0e9      	b.n	8009524 <UART_SetConfig+0x348>
 8009350:	2310      	movs	r3, #16
 8009352:	77fb      	strb	r3, [r7, #31]
 8009354:	e0e6      	b.n	8009524 <UART_SetConfig+0x348>
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	4a56      	ldr	r2, [pc, #344]	@ (80094b4 <UART_SetConfig+0x2d8>)
 800935c:	4293      	cmp	r3, r2
 800935e:	d120      	bne.n	80093a2 <UART_SetConfig+0x1c6>
 8009360:	4b51      	ldr	r3, [pc, #324]	@ (80094a8 <UART_SetConfig+0x2cc>)
 8009362:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009366:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800936a:	2bc0      	cmp	r3, #192	@ 0xc0
 800936c:	d013      	beq.n	8009396 <UART_SetConfig+0x1ba>
 800936e:	2bc0      	cmp	r3, #192	@ 0xc0
 8009370:	d814      	bhi.n	800939c <UART_SetConfig+0x1c0>
 8009372:	2b80      	cmp	r3, #128	@ 0x80
 8009374:	d009      	beq.n	800938a <UART_SetConfig+0x1ae>
 8009376:	2b80      	cmp	r3, #128	@ 0x80
 8009378:	d810      	bhi.n	800939c <UART_SetConfig+0x1c0>
 800937a:	2b00      	cmp	r3, #0
 800937c:	d002      	beq.n	8009384 <UART_SetConfig+0x1a8>
 800937e:	2b40      	cmp	r3, #64	@ 0x40
 8009380:	d006      	beq.n	8009390 <UART_SetConfig+0x1b4>
 8009382:	e00b      	b.n	800939c <UART_SetConfig+0x1c0>
 8009384:	2300      	movs	r3, #0
 8009386:	77fb      	strb	r3, [r7, #31]
 8009388:	e0cc      	b.n	8009524 <UART_SetConfig+0x348>
 800938a:	2302      	movs	r3, #2
 800938c:	77fb      	strb	r3, [r7, #31]
 800938e:	e0c9      	b.n	8009524 <UART_SetConfig+0x348>
 8009390:	2304      	movs	r3, #4
 8009392:	77fb      	strb	r3, [r7, #31]
 8009394:	e0c6      	b.n	8009524 <UART_SetConfig+0x348>
 8009396:	2308      	movs	r3, #8
 8009398:	77fb      	strb	r3, [r7, #31]
 800939a:	e0c3      	b.n	8009524 <UART_SetConfig+0x348>
 800939c:	2310      	movs	r3, #16
 800939e:	77fb      	strb	r3, [r7, #31]
 80093a0:	e0c0      	b.n	8009524 <UART_SetConfig+0x348>
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	4a44      	ldr	r2, [pc, #272]	@ (80094b8 <UART_SetConfig+0x2dc>)
 80093a8:	4293      	cmp	r3, r2
 80093aa:	d125      	bne.n	80093f8 <UART_SetConfig+0x21c>
 80093ac:	4b3e      	ldr	r3, [pc, #248]	@ (80094a8 <UART_SetConfig+0x2cc>)
 80093ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80093b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80093ba:	d017      	beq.n	80093ec <UART_SetConfig+0x210>
 80093bc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80093c0:	d817      	bhi.n	80093f2 <UART_SetConfig+0x216>
 80093c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80093c6:	d00b      	beq.n	80093e0 <UART_SetConfig+0x204>
 80093c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80093cc:	d811      	bhi.n	80093f2 <UART_SetConfig+0x216>
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d003      	beq.n	80093da <UART_SetConfig+0x1fe>
 80093d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80093d6:	d006      	beq.n	80093e6 <UART_SetConfig+0x20a>
 80093d8:	e00b      	b.n	80093f2 <UART_SetConfig+0x216>
 80093da:	2300      	movs	r3, #0
 80093dc:	77fb      	strb	r3, [r7, #31]
 80093de:	e0a1      	b.n	8009524 <UART_SetConfig+0x348>
 80093e0:	2302      	movs	r3, #2
 80093e2:	77fb      	strb	r3, [r7, #31]
 80093e4:	e09e      	b.n	8009524 <UART_SetConfig+0x348>
 80093e6:	2304      	movs	r3, #4
 80093e8:	77fb      	strb	r3, [r7, #31]
 80093ea:	e09b      	b.n	8009524 <UART_SetConfig+0x348>
 80093ec:	2308      	movs	r3, #8
 80093ee:	77fb      	strb	r3, [r7, #31]
 80093f0:	e098      	b.n	8009524 <UART_SetConfig+0x348>
 80093f2:	2310      	movs	r3, #16
 80093f4:	77fb      	strb	r3, [r7, #31]
 80093f6:	e095      	b.n	8009524 <UART_SetConfig+0x348>
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	4a2f      	ldr	r2, [pc, #188]	@ (80094bc <UART_SetConfig+0x2e0>)
 80093fe:	4293      	cmp	r3, r2
 8009400:	d125      	bne.n	800944e <UART_SetConfig+0x272>
 8009402:	4b29      	ldr	r3, [pc, #164]	@ (80094a8 <UART_SetConfig+0x2cc>)
 8009404:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009408:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800940c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009410:	d017      	beq.n	8009442 <UART_SetConfig+0x266>
 8009412:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009416:	d817      	bhi.n	8009448 <UART_SetConfig+0x26c>
 8009418:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800941c:	d00b      	beq.n	8009436 <UART_SetConfig+0x25a>
 800941e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009422:	d811      	bhi.n	8009448 <UART_SetConfig+0x26c>
 8009424:	2b00      	cmp	r3, #0
 8009426:	d003      	beq.n	8009430 <UART_SetConfig+0x254>
 8009428:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800942c:	d006      	beq.n	800943c <UART_SetConfig+0x260>
 800942e:	e00b      	b.n	8009448 <UART_SetConfig+0x26c>
 8009430:	2301      	movs	r3, #1
 8009432:	77fb      	strb	r3, [r7, #31]
 8009434:	e076      	b.n	8009524 <UART_SetConfig+0x348>
 8009436:	2302      	movs	r3, #2
 8009438:	77fb      	strb	r3, [r7, #31]
 800943a:	e073      	b.n	8009524 <UART_SetConfig+0x348>
 800943c:	2304      	movs	r3, #4
 800943e:	77fb      	strb	r3, [r7, #31]
 8009440:	e070      	b.n	8009524 <UART_SetConfig+0x348>
 8009442:	2308      	movs	r3, #8
 8009444:	77fb      	strb	r3, [r7, #31]
 8009446:	e06d      	b.n	8009524 <UART_SetConfig+0x348>
 8009448:	2310      	movs	r3, #16
 800944a:	77fb      	strb	r3, [r7, #31]
 800944c:	e06a      	b.n	8009524 <UART_SetConfig+0x348>
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	4a1b      	ldr	r2, [pc, #108]	@ (80094c0 <UART_SetConfig+0x2e4>)
 8009454:	4293      	cmp	r3, r2
 8009456:	d138      	bne.n	80094ca <UART_SetConfig+0x2ee>
 8009458:	4b13      	ldr	r3, [pc, #76]	@ (80094a8 <UART_SetConfig+0x2cc>)
 800945a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800945e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8009462:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009466:	d017      	beq.n	8009498 <UART_SetConfig+0x2bc>
 8009468:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800946c:	d82a      	bhi.n	80094c4 <UART_SetConfig+0x2e8>
 800946e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009472:	d00b      	beq.n	800948c <UART_SetConfig+0x2b0>
 8009474:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009478:	d824      	bhi.n	80094c4 <UART_SetConfig+0x2e8>
 800947a:	2b00      	cmp	r3, #0
 800947c:	d003      	beq.n	8009486 <UART_SetConfig+0x2aa>
 800947e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009482:	d006      	beq.n	8009492 <UART_SetConfig+0x2b6>
 8009484:	e01e      	b.n	80094c4 <UART_SetConfig+0x2e8>
 8009486:	2300      	movs	r3, #0
 8009488:	77fb      	strb	r3, [r7, #31]
 800948a:	e04b      	b.n	8009524 <UART_SetConfig+0x348>
 800948c:	2302      	movs	r3, #2
 800948e:	77fb      	strb	r3, [r7, #31]
 8009490:	e048      	b.n	8009524 <UART_SetConfig+0x348>
 8009492:	2304      	movs	r3, #4
 8009494:	77fb      	strb	r3, [r7, #31]
 8009496:	e045      	b.n	8009524 <UART_SetConfig+0x348>
 8009498:	2308      	movs	r3, #8
 800949a:	77fb      	strb	r3, [r7, #31]
 800949c:	e042      	b.n	8009524 <UART_SetConfig+0x348>
 800949e:	bf00      	nop
 80094a0:	efff69f3 	.word	0xefff69f3
 80094a4:	40011000 	.word	0x40011000
 80094a8:	40023800 	.word	0x40023800
 80094ac:	40004400 	.word	0x40004400
 80094b0:	40004800 	.word	0x40004800
 80094b4:	40004c00 	.word	0x40004c00
 80094b8:	40005000 	.word	0x40005000
 80094bc:	40011400 	.word	0x40011400
 80094c0:	40007800 	.word	0x40007800
 80094c4:	2310      	movs	r3, #16
 80094c6:	77fb      	strb	r3, [r7, #31]
 80094c8:	e02c      	b.n	8009524 <UART_SetConfig+0x348>
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	4a72      	ldr	r2, [pc, #456]	@ (8009698 <UART_SetConfig+0x4bc>)
 80094d0:	4293      	cmp	r3, r2
 80094d2:	d125      	bne.n	8009520 <UART_SetConfig+0x344>
 80094d4:	4b71      	ldr	r3, [pc, #452]	@ (800969c <UART_SetConfig+0x4c0>)
 80094d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80094da:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80094de:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80094e2:	d017      	beq.n	8009514 <UART_SetConfig+0x338>
 80094e4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80094e8:	d817      	bhi.n	800951a <UART_SetConfig+0x33e>
 80094ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80094ee:	d00b      	beq.n	8009508 <UART_SetConfig+0x32c>
 80094f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80094f4:	d811      	bhi.n	800951a <UART_SetConfig+0x33e>
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d003      	beq.n	8009502 <UART_SetConfig+0x326>
 80094fa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80094fe:	d006      	beq.n	800950e <UART_SetConfig+0x332>
 8009500:	e00b      	b.n	800951a <UART_SetConfig+0x33e>
 8009502:	2300      	movs	r3, #0
 8009504:	77fb      	strb	r3, [r7, #31]
 8009506:	e00d      	b.n	8009524 <UART_SetConfig+0x348>
 8009508:	2302      	movs	r3, #2
 800950a:	77fb      	strb	r3, [r7, #31]
 800950c:	e00a      	b.n	8009524 <UART_SetConfig+0x348>
 800950e:	2304      	movs	r3, #4
 8009510:	77fb      	strb	r3, [r7, #31]
 8009512:	e007      	b.n	8009524 <UART_SetConfig+0x348>
 8009514:	2308      	movs	r3, #8
 8009516:	77fb      	strb	r3, [r7, #31]
 8009518:	e004      	b.n	8009524 <UART_SetConfig+0x348>
 800951a:	2310      	movs	r3, #16
 800951c:	77fb      	strb	r3, [r7, #31]
 800951e:	e001      	b.n	8009524 <UART_SetConfig+0x348>
 8009520:	2310      	movs	r3, #16
 8009522:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	69db      	ldr	r3, [r3, #28]
 8009528:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800952c:	d15b      	bne.n	80095e6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800952e:	7ffb      	ldrb	r3, [r7, #31]
 8009530:	2b08      	cmp	r3, #8
 8009532:	d828      	bhi.n	8009586 <UART_SetConfig+0x3aa>
 8009534:	a201      	add	r2, pc, #4	@ (adr r2, 800953c <UART_SetConfig+0x360>)
 8009536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800953a:	bf00      	nop
 800953c:	08009561 	.word	0x08009561
 8009540:	08009569 	.word	0x08009569
 8009544:	08009571 	.word	0x08009571
 8009548:	08009587 	.word	0x08009587
 800954c:	08009577 	.word	0x08009577
 8009550:	08009587 	.word	0x08009587
 8009554:	08009587 	.word	0x08009587
 8009558:	08009587 	.word	0x08009587
 800955c:	0800957f 	.word	0x0800957f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009560:	f7fd fa36 	bl	80069d0 <HAL_RCC_GetPCLK1Freq>
 8009564:	61b8      	str	r0, [r7, #24]
        break;
 8009566:	e013      	b.n	8009590 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009568:	f7fd fa46 	bl	80069f8 <HAL_RCC_GetPCLK2Freq>
 800956c:	61b8      	str	r0, [r7, #24]
        break;
 800956e:	e00f      	b.n	8009590 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009570:	4b4b      	ldr	r3, [pc, #300]	@ (80096a0 <UART_SetConfig+0x4c4>)
 8009572:	61bb      	str	r3, [r7, #24]
        break;
 8009574:	e00c      	b.n	8009590 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009576:	f7fd f959 	bl	800682c <HAL_RCC_GetSysClockFreq>
 800957a:	61b8      	str	r0, [r7, #24]
        break;
 800957c:	e008      	b.n	8009590 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800957e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009582:	61bb      	str	r3, [r7, #24]
        break;
 8009584:	e004      	b.n	8009590 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8009586:	2300      	movs	r3, #0
 8009588:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800958a:	2301      	movs	r3, #1
 800958c:	77bb      	strb	r3, [r7, #30]
        break;
 800958e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009590:	69bb      	ldr	r3, [r7, #24]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d074      	beq.n	8009680 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009596:	69bb      	ldr	r3, [r7, #24]
 8009598:	005a      	lsls	r2, r3, #1
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	685b      	ldr	r3, [r3, #4]
 800959e:	085b      	lsrs	r3, r3, #1
 80095a0:	441a      	add	r2, r3
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	685b      	ldr	r3, [r3, #4]
 80095a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80095aa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80095ac:	693b      	ldr	r3, [r7, #16]
 80095ae:	2b0f      	cmp	r3, #15
 80095b0:	d916      	bls.n	80095e0 <UART_SetConfig+0x404>
 80095b2:	693b      	ldr	r3, [r7, #16]
 80095b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80095b8:	d212      	bcs.n	80095e0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80095ba:	693b      	ldr	r3, [r7, #16]
 80095bc:	b29b      	uxth	r3, r3
 80095be:	f023 030f 	bic.w	r3, r3, #15
 80095c2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80095c4:	693b      	ldr	r3, [r7, #16]
 80095c6:	085b      	lsrs	r3, r3, #1
 80095c8:	b29b      	uxth	r3, r3
 80095ca:	f003 0307 	and.w	r3, r3, #7
 80095ce:	b29a      	uxth	r2, r3
 80095d0:	89fb      	ldrh	r3, [r7, #14]
 80095d2:	4313      	orrs	r3, r2
 80095d4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	89fa      	ldrh	r2, [r7, #14]
 80095dc:	60da      	str	r2, [r3, #12]
 80095de:	e04f      	b.n	8009680 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80095e0:	2301      	movs	r3, #1
 80095e2:	77bb      	strb	r3, [r7, #30]
 80095e4:	e04c      	b.n	8009680 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80095e6:	7ffb      	ldrb	r3, [r7, #31]
 80095e8:	2b08      	cmp	r3, #8
 80095ea:	d828      	bhi.n	800963e <UART_SetConfig+0x462>
 80095ec:	a201      	add	r2, pc, #4	@ (adr r2, 80095f4 <UART_SetConfig+0x418>)
 80095ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095f2:	bf00      	nop
 80095f4:	08009619 	.word	0x08009619
 80095f8:	08009621 	.word	0x08009621
 80095fc:	08009629 	.word	0x08009629
 8009600:	0800963f 	.word	0x0800963f
 8009604:	0800962f 	.word	0x0800962f
 8009608:	0800963f 	.word	0x0800963f
 800960c:	0800963f 	.word	0x0800963f
 8009610:	0800963f 	.word	0x0800963f
 8009614:	08009637 	.word	0x08009637
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009618:	f7fd f9da 	bl	80069d0 <HAL_RCC_GetPCLK1Freq>
 800961c:	61b8      	str	r0, [r7, #24]
        break;
 800961e:	e013      	b.n	8009648 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009620:	f7fd f9ea 	bl	80069f8 <HAL_RCC_GetPCLK2Freq>
 8009624:	61b8      	str	r0, [r7, #24]
        break;
 8009626:	e00f      	b.n	8009648 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009628:	4b1d      	ldr	r3, [pc, #116]	@ (80096a0 <UART_SetConfig+0x4c4>)
 800962a:	61bb      	str	r3, [r7, #24]
        break;
 800962c:	e00c      	b.n	8009648 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800962e:	f7fd f8fd 	bl	800682c <HAL_RCC_GetSysClockFreq>
 8009632:	61b8      	str	r0, [r7, #24]
        break;
 8009634:	e008      	b.n	8009648 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009636:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800963a:	61bb      	str	r3, [r7, #24]
        break;
 800963c:	e004      	b.n	8009648 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800963e:	2300      	movs	r3, #0
 8009640:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009642:	2301      	movs	r3, #1
 8009644:	77bb      	strb	r3, [r7, #30]
        break;
 8009646:	bf00      	nop
    }

    if (pclk != 0U)
 8009648:	69bb      	ldr	r3, [r7, #24]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d018      	beq.n	8009680 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	685b      	ldr	r3, [r3, #4]
 8009652:	085a      	lsrs	r2, r3, #1
 8009654:	69bb      	ldr	r3, [r7, #24]
 8009656:	441a      	add	r2, r3
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	685b      	ldr	r3, [r3, #4]
 800965c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009660:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009662:	693b      	ldr	r3, [r7, #16]
 8009664:	2b0f      	cmp	r3, #15
 8009666:	d909      	bls.n	800967c <UART_SetConfig+0x4a0>
 8009668:	693b      	ldr	r3, [r7, #16]
 800966a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800966e:	d205      	bcs.n	800967c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009670:	693b      	ldr	r3, [r7, #16]
 8009672:	b29a      	uxth	r2, r3
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	60da      	str	r2, [r3, #12]
 800967a:	e001      	b.n	8009680 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800967c:	2301      	movs	r3, #1
 800967e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2200      	movs	r2, #0
 8009684:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2200      	movs	r2, #0
 800968a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800968c:	7fbb      	ldrb	r3, [r7, #30]
}
 800968e:	4618      	mov	r0, r3
 8009690:	3720      	adds	r7, #32
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}
 8009696:	bf00      	nop
 8009698:	40007c00 	.word	0x40007c00
 800969c:	40023800 	.word	0x40023800
 80096a0:	00f42400 	.word	0x00f42400

080096a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80096a4:	b480      	push	{r7}
 80096a6:	b083      	sub	sp, #12
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096b0:	f003 0308 	and.w	r3, r3, #8
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d00a      	beq.n	80096ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	685b      	ldr	r3, [r3, #4]
 80096be:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	430a      	orrs	r2, r1
 80096cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096d2:	f003 0301 	and.w	r3, r3, #1
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d00a      	beq.n	80096f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	685b      	ldr	r3, [r3, #4]
 80096e0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	430a      	orrs	r2, r1
 80096ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096f4:	f003 0302 	and.w	r3, r3, #2
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d00a      	beq.n	8009712 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	685b      	ldr	r3, [r3, #4]
 8009702:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	430a      	orrs	r2, r1
 8009710:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009716:	f003 0304 	and.w	r3, r3, #4
 800971a:	2b00      	cmp	r3, #0
 800971c:	d00a      	beq.n	8009734 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	685b      	ldr	r3, [r3, #4]
 8009724:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	430a      	orrs	r2, r1
 8009732:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009738:	f003 0310 	and.w	r3, r3, #16
 800973c:	2b00      	cmp	r3, #0
 800973e:	d00a      	beq.n	8009756 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	689b      	ldr	r3, [r3, #8]
 8009746:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	430a      	orrs	r2, r1
 8009754:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800975a:	f003 0320 	and.w	r3, r3, #32
 800975e:	2b00      	cmp	r3, #0
 8009760:	d00a      	beq.n	8009778 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	689b      	ldr	r3, [r3, #8]
 8009768:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	430a      	orrs	r2, r1
 8009776:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800977c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009780:	2b00      	cmp	r3, #0
 8009782:	d01a      	beq.n	80097ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	685b      	ldr	r3, [r3, #4]
 800978a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	430a      	orrs	r2, r1
 8009798:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800979e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80097a2:	d10a      	bne.n	80097ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	685b      	ldr	r3, [r3, #4]
 80097aa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	430a      	orrs	r2, r1
 80097b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d00a      	beq.n	80097dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	685b      	ldr	r3, [r3, #4]
 80097cc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	430a      	orrs	r2, r1
 80097da:	605a      	str	r2, [r3, #4]
  }
}
 80097dc:	bf00      	nop
 80097de:	370c      	adds	r7, #12
 80097e0:	46bd      	mov	sp, r7
 80097e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e6:	4770      	bx	lr

080097e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b08c      	sub	sp, #48	@ 0x30
 80097ec:	af02      	add	r7, sp, #8
 80097ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2200      	movs	r2, #0
 80097f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80097f8:	f7fa fd88 	bl	800430c <HAL_GetTick>
 80097fc:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	f003 0308 	and.w	r3, r3, #8
 8009808:	2b08      	cmp	r3, #8
 800980a:	d12e      	bne.n	800986a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800980c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009810:	9300      	str	r3, [sp, #0]
 8009812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009814:	2200      	movs	r2, #0
 8009816:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f000 f83b 	bl	8009896 <UART_WaitOnFlagUntilTimeout>
 8009820:	4603      	mov	r3, r0
 8009822:	2b00      	cmp	r3, #0
 8009824:	d021      	beq.n	800986a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800982c:	693b      	ldr	r3, [r7, #16]
 800982e:	e853 3f00 	ldrex	r3, [r3]
 8009832:	60fb      	str	r3, [r7, #12]
   return(result);
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800983a:	623b      	str	r3, [r7, #32]
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	461a      	mov	r2, r3
 8009842:	6a3b      	ldr	r3, [r7, #32]
 8009844:	61fb      	str	r3, [r7, #28]
 8009846:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009848:	69b9      	ldr	r1, [r7, #24]
 800984a:	69fa      	ldr	r2, [r7, #28]
 800984c:	e841 2300 	strex	r3, r2, [r1]
 8009850:	617b      	str	r3, [r7, #20]
   return(result);
 8009852:	697b      	ldr	r3, [r7, #20]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d1e6      	bne.n	8009826 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2220      	movs	r2, #32
 800985c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	2200      	movs	r2, #0
 8009862:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009866:	2303      	movs	r3, #3
 8009868:	e011      	b.n	800988e <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2220      	movs	r2, #32
 800986e:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2220      	movs	r2, #32
 8009874:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2200      	movs	r2, #0
 800987c:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2200      	movs	r2, #0
 8009882:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2200      	movs	r2, #0
 8009888:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800988c:	2300      	movs	r3, #0
}
 800988e:	4618      	mov	r0, r3
 8009890:	3728      	adds	r7, #40	@ 0x28
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}

08009896 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009896:	b580      	push	{r7, lr}
 8009898:	b084      	sub	sp, #16
 800989a:	af00      	add	r7, sp, #0
 800989c:	60f8      	str	r0, [r7, #12]
 800989e:	60b9      	str	r1, [r7, #8]
 80098a0:	603b      	str	r3, [r7, #0]
 80098a2:	4613      	mov	r3, r2
 80098a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80098a6:	e04f      	b.n	8009948 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80098a8:	69bb      	ldr	r3, [r7, #24]
 80098aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098ae:	d04b      	beq.n	8009948 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80098b0:	f7fa fd2c 	bl	800430c <HAL_GetTick>
 80098b4:	4602      	mov	r2, r0
 80098b6:	683b      	ldr	r3, [r7, #0]
 80098b8:	1ad3      	subs	r3, r2, r3
 80098ba:	69ba      	ldr	r2, [r7, #24]
 80098bc:	429a      	cmp	r2, r3
 80098be:	d302      	bcc.n	80098c6 <UART_WaitOnFlagUntilTimeout+0x30>
 80098c0:	69bb      	ldr	r3, [r7, #24]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d101      	bne.n	80098ca <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80098c6:	2303      	movs	r3, #3
 80098c8:	e04e      	b.n	8009968 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	f003 0304 	and.w	r3, r3, #4
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d037      	beq.n	8009948 <UART_WaitOnFlagUntilTimeout+0xb2>
 80098d8:	68bb      	ldr	r3, [r7, #8]
 80098da:	2b80      	cmp	r3, #128	@ 0x80
 80098dc:	d034      	beq.n	8009948 <UART_WaitOnFlagUntilTimeout+0xb2>
 80098de:	68bb      	ldr	r3, [r7, #8]
 80098e0:	2b40      	cmp	r3, #64	@ 0x40
 80098e2:	d031      	beq.n	8009948 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	69db      	ldr	r3, [r3, #28]
 80098ea:	f003 0308 	and.w	r3, r3, #8
 80098ee:	2b08      	cmp	r3, #8
 80098f0:	d110      	bne.n	8009914 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	2208      	movs	r2, #8
 80098f8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80098fa:	68f8      	ldr	r0, [r7, #12]
 80098fc:	f000 f838 	bl	8009970 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	2208      	movs	r2, #8
 8009904:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	2200      	movs	r2, #0
 800990c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8009910:	2301      	movs	r3, #1
 8009912:	e029      	b.n	8009968 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	69db      	ldr	r3, [r3, #28]
 800991a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800991e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009922:	d111      	bne.n	8009948 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800992c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800992e:	68f8      	ldr	r0, [r7, #12]
 8009930:	f000 f81e 	bl	8009970 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	2220      	movs	r2, #32
 8009938:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	2200      	movs	r2, #0
 8009940:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8009944:	2303      	movs	r3, #3
 8009946:	e00f      	b.n	8009968 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	69da      	ldr	r2, [r3, #28]
 800994e:	68bb      	ldr	r3, [r7, #8]
 8009950:	4013      	ands	r3, r2
 8009952:	68ba      	ldr	r2, [r7, #8]
 8009954:	429a      	cmp	r2, r3
 8009956:	bf0c      	ite	eq
 8009958:	2301      	moveq	r3, #1
 800995a:	2300      	movne	r3, #0
 800995c:	b2db      	uxtb	r3, r3
 800995e:	461a      	mov	r2, r3
 8009960:	79fb      	ldrb	r3, [r7, #7]
 8009962:	429a      	cmp	r2, r3
 8009964:	d0a0      	beq.n	80098a8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009966:	2300      	movs	r3, #0
}
 8009968:	4618      	mov	r0, r3
 800996a:	3710      	adds	r7, #16
 800996c:	46bd      	mov	sp, r7
 800996e:	bd80      	pop	{r7, pc}

08009970 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009970:	b480      	push	{r7}
 8009972:	b095      	sub	sp, #84	@ 0x54
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800997e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009980:	e853 3f00 	ldrex	r3, [r3]
 8009984:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009988:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800998c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	461a      	mov	r2, r3
 8009994:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009996:	643b      	str	r3, [r7, #64]	@ 0x40
 8009998:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800999a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800999c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800999e:	e841 2300 	strex	r3, r2, [r1]
 80099a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80099a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d1e6      	bne.n	8009978 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	3308      	adds	r3, #8
 80099b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099b2:	6a3b      	ldr	r3, [r7, #32]
 80099b4:	e853 3f00 	ldrex	r3, [r3]
 80099b8:	61fb      	str	r3, [r7, #28]
   return(result);
 80099ba:	69fb      	ldr	r3, [r7, #28]
 80099bc:	f023 0301 	bic.w	r3, r3, #1
 80099c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	3308      	adds	r3, #8
 80099c8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80099ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80099cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099ce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80099d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80099d2:	e841 2300 	strex	r3, r2, [r1]
 80099d6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80099d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d1e5      	bne.n	80099aa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80099e2:	2b01      	cmp	r3, #1
 80099e4:	d118      	bne.n	8009a18 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	e853 3f00 	ldrex	r3, [r3]
 80099f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	f023 0310 	bic.w	r3, r3, #16
 80099fa:	647b      	str	r3, [r7, #68]	@ 0x44
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	461a      	mov	r2, r3
 8009a02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a04:	61bb      	str	r3, [r7, #24]
 8009a06:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a08:	6979      	ldr	r1, [r7, #20]
 8009a0a:	69ba      	ldr	r2, [r7, #24]
 8009a0c:	e841 2300 	strex	r3, r2, [r1]
 8009a10:	613b      	str	r3, [r7, #16]
   return(result);
 8009a12:	693b      	ldr	r3, [r7, #16]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d1e6      	bne.n	80099e6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	2220      	movs	r2, #32
 8009a1c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	2200      	movs	r2, #0
 8009a24:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	2200      	movs	r2, #0
 8009a2a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8009a2c:	bf00      	nop
 8009a2e:	3754      	adds	r7, #84	@ 0x54
 8009a30:	46bd      	mov	sp, r7
 8009a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a36:	4770      	bx	lr

08009a38 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8009a38:	b084      	sub	sp, #16
 8009a3a:	b480      	push	{r7}
 8009a3c:	b085      	sub	sp, #20
 8009a3e:	af00      	add	r7, sp, #0
 8009a40:	6078      	str	r0, [r7, #4]
 8009a42:	f107 001c 	add.w	r0, r7, #28
 8009a46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8009a4e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8009a50:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8009a52:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8009a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8009a56:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8009a58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8009a5a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8009a5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8009a5e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009a60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8009a62:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8009a64:	68fa      	ldr	r2, [r7, #12]
 8009a66:	4313      	orrs	r3, r2
 8009a68:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	685a      	ldr	r2, [r3, #4]
 8009a6e:	4b07      	ldr	r3, [pc, #28]	@ (8009a8c <SDMMC_Init+0x54>)
 8009a70:	4013      	ands	r3, r2
 8009a72:	68fa      	ldr	r2, [r7, #12]
 8009a74:	431a      	orrs	r2, r3
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009a7a:	2300      	movs	r3, #0
}
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	3714      	adds	r7, #20
 8009a80:	46bd      	mov	sp, r7
 8009a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a86:	b004      	add	sp, #16
 8009a88:	4770      	bx	lr
 8009a8a:	bf00      	nop
 8009a8c:	ffff8100 	.word	0xffff8100

08009a90 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8009a90:	b480      	push	{r7}
 8009a92:	b083      	sub	sp, #12
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	370c      	adds	r7, #12
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa8:	4770      	bx	lr

08009aaa <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 8009aaa:	b480      	push	{r7}
 8009aac:	b083      	sub	sp, #12
 8009aae:	af00      	add	r7, sp, #0
 8009ab0:	6078      	str	r0, [r7, #4]
 8009ab2:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	681a      	ldr	r2, [r3, #0]
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8009abe:	2300      	movs	r3, #0
}
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	370c      	adds	r7, #12
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aca:	4770      	bx	lr

08009acc <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8009acc:	b480      	push	{r7}
 8009ace:	b083      	sub	sp, #12
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2203      	movs	r2, #3
 8009ad8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8009ada:	2300      	movs	r3, #0
}
 8009adc:	4618      	mov	r0, r3
 8009ade:	370c      	adds	r7, #12
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae6:	4770      	bx	lr

08009ae8 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8009ae8:	b480      	push	{r7}
 8009aea:	b083      	sub	sp, #12
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	f003 0303 	and.w	r3, r3, #3
}
 8009af8:	4618      	mov	r0, r3
 8009afa:	370c      	adds	r7, #12
 8009afc:	46bd      	mov	sp, r7
 8009afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b02:	4770      	bx	lr

08009b04 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8009b04:	b480      	push	{r7}
 8009b06:	b085      	sub	sp, #20
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
 8009b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009b0e:	2300      	movs	r3, #0
 8009b10:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	681a      	ldr	r2, [r3, #0]
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8009b1e:	683b      	ldr	r3, [r7, #0]
 8009b20:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009b22:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8009b28:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8009b2e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009b30:	68fa      	ldr	r2, [r7, #12]
 8009b32:	4313      	orrs	r3, r2
 8009b34:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	68da      	ldr	r2, [r3, #12]
 8009b3a:	4b06      	ldr	r3, [pc, #24]	@ (8009b54 <SDMMC_SendCommand+0x50>)
 8009b3c:	4013      	ands	r3, r2
 8009b3e:	68fa      	ldr	r2, [r7, #12]
 8009b40:	431a      	orrs	r2, r3
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8009b46:	2300      	movs	r3, #0
}
 8009b48:	4618      	mov	r0, r3
 8009b4a:	3714      	adds	r7, #20
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b52:	4770      	bx	lr
 8009b54:	fffff000 	.word	0xfffff000

08009b58 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8009b58:	b480      	push	{r7}
 8009b5a:	b083      	sub	sp, #12
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	691b      	ldr	r3, [r3, #16]
 8009b64:	b2db      	uxtb	r3, r3
}
 8009b66:	4618      	mov	r0, r3
 8009b68:	370c      	adds	r7, #12
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b70:	4770      	bx	lr

08009b72 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8009b72:	b480      	push	{r7}
 8009b74:	b085      	sub	sp, #20
 8009b76:	af00      	add	r7, sp, #0
 8009b78:	6078      	str	r0, [r7, #4]
 8009b7a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	3314      	adds	r3, #20
 8009b80:	461a      	mov	r2, r3
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	4413      	add	r3, r2
 8009b86:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	681b      	ldr	r3, [r3, #0]
}  
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	3714      	adds	r7, #20
 8009b90:	46bd      	mov	sp, r7
 8009b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b96:	4770      	bx	lr

08009b98 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8009b98:	b480      	push	{r7}
 8009b9a:	b085      	sub	sp, #20
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
 8009ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	681a      	ldr	r2, [r3, #0]
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	685a      	ldr	r2, [r3, #4]
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009bbe:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8009bc4:	431a      	orrs	r2, r3
                       Data->DPSM);
 8009bc6:	683b      	ldr	r3, [r7, #0]
 8009bc8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8009bca:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009bcc:	68fa      	ldr	r2, [r7, #12]
 8009bce:	4313      	orrs	r3, r2
 8009bd0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bd6:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	431a      	orrs	r2, r3
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8009be2:	2300      	movs	r3, #0

}
 8009be4:	4618      	mov	r0, r3
 8009be6:	3714      	adds	r7, #20
 8009be8:	46bd      	mov	sp, r7
 8009bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bee:	4770      	bx	lr

08009bf0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b088      	sub	sp, #32
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
 8009bf8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009bfe:	2310      	movs	r3, #16
 8009c00:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009c02:	2340      	movs	r3, #64	@ 0x40
 8009c04:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009c06:	2300      	movs	r3, #0
 8009c08:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009c0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009c0e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009c10:	f107 0308 	add.w	r3, r7, #8
 8009c14:	4619      	mov	r1, r3
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f7ff ff74 	bl	8009b04 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8009c1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009c20:	2110      	movs	r1, #16
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f000 f9d6 	bl	8009fd4 <SDMMC_GetCmdResp1>
 8009c28:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c2a:	69fb      	ldr	r3, [r7, #28]
}
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	3720      	adds	r7, #32
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bd80      	pop	{r7, pc}

08009c34 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b088      	sub	sp, #32
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
 8009c3c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8009c42:	2311      	movs	r3, #17
 8009c44:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009c46:	2340      	movs	r3, #64	@ 0x40
 8009c48:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009c4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009c52:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009c54:	f107 0308 	add.w	r3, r7, #8
 8009c58:	4619      	mov	r1, r3
 8009c5a:	6878      	ldr	r0, [r7, #4]
 8009c5c:	f7ff ff52 	bl	8009b04 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009c60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009c64:	2111      	movs	r1, #17
 8009c66:	6878      	ldr	r0, [r7, #4]
 8009c68:	f000 f9b4 	bl	8009fd4 <SDMMC_GetCmdResp1>
 8009c6c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c6e:	69fb      	ldr	r3, [r7, #28]
}
 8009c70:	4618      	mov	r0, r3
 8009c72:	3720      	adds	r7, #32
 8009c74:	46bd      	mov	sp, r7
 8009c76:	bd80      	pop	{r7, pc}

08009c78 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b088      	sub	sp, #32
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
 8009c80:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8009c86:	2312      	movs	r3, #18
 8009c88:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009c8a:	2340      	movs	r3, #64	@ 0x40
 8009c8c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009c8e:	2300      	movs	r3, #0
 8009c90:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009c92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009c96:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009c98:	f107 0308 	add.w	r3, r7, #8
 8009c9c:	4619      	mov	r1, r3
 8009c9e:	6878      	ldr	r0, [r7, #4]
 8009ca0:	f7ff ff30 	bl	8009b04 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009ca4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009ca8:	2112      	movs	r1, #18
 8009caa:	6878      	ldr	r0, [r7, #4]
 8009cac:	f000 f992 	bl	8009fd4 <SDMMC_GetCmdResp1>
 8009cb0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009cb2:	69fb      	ldr	r3, [r7, #28]
}
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	3720      	adds	r7, #32
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bd80      	pop	{r7, pc}

08009cbc <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b088      	sub	sp, #32
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
 8009cc4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009cca:	2318      	movs	r3, #24
 8009ccc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009cce:	2340      	movs	r3, #64	@ 0x40
 8009cd0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009cd6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009cda:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009cdc:	f107 0308 	add.w	r3, r7, #8
 8009ce0:	4619      	mov	r1, r3
 8009ce2:	6878      	ldr	r0, [r7, #4]
 8009ce4:	f7ff ff0e 	bl	8009b04 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009ce8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009cec:	2118      	movs	r1, #24
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	f000 f970 	bl	8009fd4 <SDMMC_GetCmdResp1>
 8009cf4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009cf6:	69fb      	ldr	r3, [r7, #28]
}
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	3720      	adds	r7, #32
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	bd80      	pop	{r7, pc}

08009d00 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b088      	sub	sp, #32
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
 8009d08:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8009d0e:	2319      	movs	r3, #25
 8009d10:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009d12:	2340      	movs	r3, #64	@ 0x40
 8009d14:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009d16:	2300      	movs	r3, #0
 8009d18:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009d1a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009d1e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009d20:	f107 0308 	add.w	r3, r7, #8
 8009d24:	4619      	mov	r1, r3
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f7ff feec 	bl	8009b04 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009d2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009d30:	2119      	movs	r1, #25
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	f000 f94e 	bl	8009fd4 <SDMMC_GetCmdResp1>
 8009d38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d3a:	69fb      	ldr	r3, [r7, #28]
}
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	3720      	adds	r7, #32
 8009d40:	46bd      	mov	sp, r7
 8009d42:	bd80      	pop	{r7, pc}

08009d44 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b088      	sub	sp, #32
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009d50:	230c      	movs	r3, #12
 8009d52:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009d54:	2340      	movs	r3, #64	@ 0x40
 8009d56:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009d58:	2300      	movs	r3, #0
 8009d5a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009d5c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009d60:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009d62:	f107 0308 	add.w	r3, r7, #8
 8009d66:	4619      	mov	r1, r3
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	f7ff fecb 	bl	8009b04 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8009d6e:	4a05      	ldr	r2, [pc, #20]	@ (8009d84 <SDMMC_CmdStopTransfer+0x40>)
 8009d70:	210c      	movs	r1, #12
 8009d72:	6878      	ldr	r0, [r7, #4]
 8009d74:	f000 f92e 	bl	8009fd4 <SDMMC_GetCmdResp1>
 8009d78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d7a:	69fb      	ldr	r3, [r7, #28]
}
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	3720      	adds	r7, #32
 8009d80:	46bd      	mov	sp, r7
 8009d82:	bd80      	pop	{r7, pc}
 8009d84:	05f5e100 	.word	0x05f5e100

08009d88 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b08a      	sub	sp, #40	@ 0x28
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	60f8      	str	r0, [r7, #12]
 8009d90:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009d98:	2307      	movs	r3, #7
 8009d9a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009d9c:	2340      	movs	r3, #64	@ 0x40
 8009d9e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009da0:	2300      	movs	r3, #0
 8009da2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009da4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009da8:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009daa:	f107 0310 	add.w	r3, r7, #16
 8009dae:	4619      	mov	r1, r3
 8009db0:	68f8      	ldr	r0, [r7, #12]
 8009db2:	f7ff fea7 	bl	8009b04 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8009db6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009dba:	2107      	movs	r1, #7
 8009dbc:	68f8      	ldr	r0, [r7, #12]
 8009dbe:	f000 f909 	bl	8009fd4 <SDMMC_GetCmdResp1>
 8009dc2:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8009dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	3728      	adds	r7, #40	@ 0x28
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}

08009dce <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8009dce:	b580      	push	{r7, lr}
 8009dd0:	b088      	sub	sp, #32
 8009dd2:	af00      	add	r7, sp, #0
 8009dd4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009dda:	2300      	movs	r3, #0
 8009ddc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8009dde:	2300      	movs	r3, #0
 8009de0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009de2:	2300      	movs	r3, #0
 8009de4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009de6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009dea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009dec:	f107 0308 	add.w	r3, r7, #8
 8009df0:	4619      	mov	r1, r3
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	f7ff fe86 	bl	8009b04 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8009df8:	6878      	ldr	r0, [r7, #4]
 8009dfa:	f000 fb23 	bl	800a444 <SDMMC_GetCmdError>
 8009dfe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e00:	69fb      	ldr	r3, [r7, #28]
}
 8009e02:	4618      	mov	r0, r3
 8009e04:	3720      	adds	r7, #32
 8009e06:	46bd      	mov	sp, r7
 8009e08:	bd80      	pop	{r7, pc}

08009e0a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8009e0a:	b580      	push	{r7, lr}
 8009e0c:	b088      	sub	sp, #32
 8009e0e:	af00      	add	r7, sp, #0
 8009e10:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009e12:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8009e16:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009e18:	2308      	movs	r3, #8
 8009e1a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009e1c:	2340      	movs	r3, #64	@ 0x40
 8009e1e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009e20:	2300      	movs	r3, #0
 8009e22:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009e24:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009e28:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009e2a:	f107 0308 	add.w	r3, r7, #8
 8009e2e:	4619      	mov	r1, r3
 8009e30:	6878      	ldr	r0, [r7, #4]
 8009e32:	f7ff fe67 	bl	8009b04 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8009e36:	6878      	ldr	r0, [r7, #4]
 8009e38:	f000 fab6 	bl	800a3a8 <SDMMC_GetCmdResp7>
 8009e3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e3e:	69fb      	ldr	r3, [r7, #28]
}
 8009e40:	4618      	mov	r0, r3
 8009e42:	3720      	adds	r7, #32
 8009e44:	46bd      	mov	sp, r7
 8009e46:	bd80      	pop	{r7, pc}

08009e48 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b088      	sub	sp, #32
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
 8009e50:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009e56:	2337      	movs	r3, #55	@ 0x37
 8009e58:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009e5a:	2340      	movs	r3, #64	@ 0x40
 8009e5c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009e5e:	2300      	movs	r3, #0
 8009e60:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009e62:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009e66:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009e68:	f107 0308 	add.w	r3, r7, #8
 8009e6c:	4619      	mov	r1, r3
 8009e6e:	6878      	ldr	r0, [r7, #4]
 8009e70:	f7ff fe48 	bl	8009b04 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8009e74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009e78:	2137      	movs	r1, #55	@ 0x37
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	f000 f8aa 	bl	8009fd4 <SDMMC_GetCmdResp1>
 8009e80:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e82:	69fb      	ldr	r3, [r7, #28]
}
 8009e84:	4618      	mov	r0, r3
 8009e86:	3720      	adds	r7, #32
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bd80      	pop	{r7, pc}

08009e8c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b088      	sub	sp, #32
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
 8009e94:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8009e96:	683a      	ldr	r2, [r7, #0]
 8009e98:	4b0d      	ldr	r3, [pc, #52]	@ (8009ed0 <SDMMC_CmdAppOperCommand+0x44>)
 8009e9a:	4313      	orrs	r3, r2
 8009e9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009e9e:	2329      	movs	r3, #41	@ 0x29
 8009ea0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009ea2:	2340      	movs	r3, #64	@ 0x40
 8009ea4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009eaa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009eae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009eb0:	f107 0308 	add.w	r3, r7, #8
 8009eb4:	4619      	mov	r1, r3
 8009eb6:	6878      	ldr	r0, [r7, #4]
 8009eb8:	f7ff fe24 	bl	8009b04 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8009ebc:	6878      	ldr	r0, [r7, #4]
 8009ebe:	f000 f9bf 	bl	800a240 <SDMMC_GetCmdResp3>
 8009ec2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ec4:	69fb      	ldr	r3, [r7, #28]
}
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	3720      	adds	r7, #32
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}
 8009ece:	bf00      	nop
 8009ed0:	80100000 	.word	0x80100000

08009ed4 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b088      	sub	sp, #32
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8009edc:	2300      	movs	r3, #0
 8009ede:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009ee0:	2302      	movs	r3, #2
 8009ee2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009ee4:	23c0      	movs	r3, #192	@ 0xc0
 8009ee6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009ee8:	2300      	movs	r3, #0
 8009eea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009eec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009ef0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009ef2:	f107 0308 	add.w	r3, r7, #8
 8009ef6:	4619      	mov	r1, r3
 8009ef8:	6878      	ldr	r0, [r7, #4]
 8009efa:	f7ff fe03 	bl	8009b04 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f000 f956 	bl	800a1b0 <SDMMC_GetCmdResp2>
 8009f04:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f06:	69fb      	ldr	r3, [r7, #28]
}
 8009f08:	4618      	mov	r0, r3
 8009f0a:	3720      	adds	r7, #32
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	bd80      	pop	{r7, pc}

08009f10 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b088      	sub	sp, #32
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
 8009f18:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009f1a:	683b      	ldr	r3, [r7, #0]
 8009f1c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009f1e:	2309      	movs	r3, #9
 8009f20:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009f22:	23c0      	movs	r3, #192	@ 0xc0
 8009f24:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009f26:	2300      	movs	r3, #0
 8009f28:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009f2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009f2e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009f30:	f107 0308 	add.w	r3, r7, #8
 8009f34:	4619      	mov	r1, r3
 8009f36:	6878      	ldr	r0, [r7, #4]
 8009f38:	f7ff fde4 	bl	8009b04 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009f3c:	6878      	ldr	r0, [r7, #4]
 8009f3e:	f000 f937 	bl	800a1b0 <SDMMC_GetCmdResp2>
 8009f42:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f44:	69fb      	ldr	r3, [r7, #28]
}
 8009f46:	4618      	mov	r0, r3
 8009f48:	3720      	adds	r7, #32
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	bd80      	pop	{r7, pc}

08009f4e <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8009f4e:	b580      	push	{r7, lr}
 8009f50:	b088      	sub	sp, #32
 8009f52:	af00      	add	r7, sp, #0
 8009f54:	6078      	str	r0, [r7, #4]
 8009f56:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009f58:	2300      	movs	r3, #0
 8009f5a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009f5c:	2303      	movs	r3, #3
 8009f5e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009f60:	2340      	movs	r3, #64	@ 0x40
 8009f62:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009f64:	2300      	movs	r3, #0
 8009f66:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009f68:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009f6c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009f6e:	f107 0308 	add.w	r3, r7, #8
 8009f72:	4619      	mov	r1, r3
 8009f74:	6878      	ldr	r0, [r7, #4]
 8009f76:	f7ff fdc5 	bl	8009b04 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009f7a:	683a      	ldr	r2, [r7, #0]
 8009f7c:	2103      	movs	r1, #3
 8009f7e:	6878      	ldr	r0, [r7, #4]
 8009f80:	f000 f99c 	bl	800a2bc <SDMMC_GetCmdResp6>
 8009f84:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f86:	69fb      	ldr	r3, [r7, #28]
}
 8009f88:	4618      	mov	r0, r3
 8009f8a:	3720      	adds	r7, #32
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	bd80      	pop	{r7, pc}

08009f90 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b088      	sub	sp, #32
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
 8009f98:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009f9e:	230d      	movs	r3, #13
 8009fa0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009fa2:	2340      	movs	r3, #64	@ 0x40
 8009fa4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009faa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009fae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009fb0:	f107 0308 	add.w	r3, r7, #8
 8009fb4:	4619      	mov	r1, r3
 8009fb6:	6878      	ldr	r0, [r7, #4]
 8009fb8:	f7ff fda4 	bl	8009b04 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8009fbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009fc0:	210d      	movs	r1, #13
 8009fc2:	6878      	ldr	r0, [r7, #4]
 8009fc4:	f000 f806 	bl	8009fd4 <SDMMC_GetCmdResp1>
 8009fc8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009fca:	69fb      	ldr	r3, [r7, #28]
}
 8009fcc:	4618      	mov	r0, r3
 8009fce:	3720      	adds	r7, #32
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd80      	pop	{r7, pc}

08009fd4 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b088      	sub	sp, #32
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	60f8      	str	r0, [r7, #12]
 8009fdc:	460b      	mov	r3, r1
 8009fde:	607a      	str	r2, [r7, #4]
 8009fe0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009fe2:	4b70      	ldr	r3, [pc, #448]	@ (800a1a4 <SDMMC_GetCmdResp1+0x1d0>)
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	4a70      	ldr	r2, [pc, #448]	@ (800a1a8 <SDMMC_GetCmdResp1+0x1d4>)
 8009fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8009fec:	0a5a      	lsrs	r2, r3, #9
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	fb02 f303 	mul.w	r3, r2, r3
 8009ff4:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8009ff6:	69fb      	ldr	r3, [r7, #28]
 8009ff8:	1e5a      	subs	r2, r3, #1
 8009ffa:	61fa      	str	r2, [r7, #28]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d102      	bne.n	800a006 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a000:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a004:	e0c9      	b.n	800a19a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a00a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a00c:	69bb      	ldr	r3, [r7, #24]
 800a00e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a012:	2b00      	cmp	r3, #0
 800a014:	d0ef      	beq.n	8009ff6 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a016:	69bb      	ldr	r3, [r7, #24]
 800a018:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d1ea      	bne.n	8009ff6 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a024:	f003 0304 	and.w	r3, r3, #4
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d004      	beq.n	800a036 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	2204      	movs	r2, #4
 800a030:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a032:	2304      	movs	r3, #4
 800a034:	e0b1      	b.n	800a19a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a03a:	f003 0301 	and.w	r3, r3, #1
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d004      	beq.n	800a04c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	2201      	movs	r2, #1
 800a046:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a048:	2301      	movs	r3, #1
 800a04a:	e0a6      	b.n	800a19a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	22c5      	movs	r2, #197	@ 0xc5
 800a050:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a052:	68f8      	ldr	r0, [r7, #12]
 800a054:	f7ff fd80 	bl	8009b58 <SDMMC_GetCommandResponse>
 800a058:	4603      	mov	r3, r0
 800a05a:	461a      	mov	r2, r3
 800a05c:	7afb      	ldrb	r3, [r7, #11]
 800a05e:	4293      	cmp	r3, r2
 800a060:	d001      	beq.n	800a066 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a062:	2301      	movs	r3, #1
 800a064:	e099      	b.n	800a19a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a066:	2100      	movs	r1, #0
 800a068:	68f8      	ldr	r0, [r7, #12]
 800a06a:	f7ff fd82 	bl	8009b72 <SDMMC_GetResponse>
 800a06e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a070:	697a      	ldr	r2, [r7, #20]
 800a072:	4b4e      	ldr	r3, [pc, #312]	@ (800a1ac <SDMMC_GetCmdResp1+0x1d8>)
 800a074:	4013      	ands	r3, r2
 800a076:	2b00      	cmp	r3, #0
 800a078:	d101      	bne.n	800a07e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800a07a:	2300      	movs	r3, #0
 800a07c:	e08d      	b.n	800a19a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a07e:	697b      	ldr	r3, [r7, #20]
 800a080:	2b00      	cmp	r3, #0
 800a082:	da02      	bge.n	800a08a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a084:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a088:	e087      	b.n	800a19a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a08a:	697b      	ldr	r3, [r7, #20]
 800a08c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a090:	2b00      	cmp	r3, #0
 800a092:	d001      	beq.n	800a098 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a094:	2340      	movs	r3, #64	@ 0x40
 800a096:	e080      	b.n	800a19a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a098:	697b      	ldr	r3, [r7, #20]
 800a09a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d001      	beq.n	800a0a6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a0a2:	2380      	movs	r3, #128	@ 0x80
 800a0a4:	e079      	b.n	800a19a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a0a6:	697b      	ldr	r3, [r7, #20]
 800a0a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d002      	beq.n	800a0b6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a0b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a0b4:	e071      	b.n	800a19a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a0b6:	697b      	ldr	r3, [r7, #20]
 800a0b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d002      	beq.n	800a0c6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a0c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a0c4:	e069      	b.n	800a19a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a0c6:	697b      	ldr	r3, [r7, #20]
 800a0c8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d002      	beq.n	800a0d6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a0d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a0d4:	e061      	b.n	800a19a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a0d6:	697b      	ldr	r3, [r7, #20]
 800a0d8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d002      	beq.n	800a0e6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a0e0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a0e4:	e059      	b.n	800a19a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a0e6:	697b      	ldr	r3, [r7, #20]
 800a0e8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d002      	beq.n	800a0f6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a0f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a0f4:	e051      	b.n	800a19a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a0f6:	697b      	ldr	r3, [r7, #20]
 800a0f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d002      	beq.n	800a106 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a100:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a104:	e049      	b.n	800a19a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a106:	697b      	ldr	r3, [r7, #20]
 800a108:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d002      	beq.n	800a116 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a110:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800a114:	e041      	b.n	800a19a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a116:	697b      	ldr	r3, [r7, #20]
 800a118:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d002      	beq.n	800a126 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800a120:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a124:	e039      	b.n	800a19a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a126:	697b      	ldr	r3, [r7, #20]
 800a128:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d002      	beq.n	800a136 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a130:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800a134:	e031      	b.n	800a19a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a136:	697b      	ldr	r3, [r7, #20]
 800a138:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d002      	beq.n	800a146 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a140:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800a144:	e029      	b.n	800a19a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a146:	697b      	ldr	r3, [r7, #20]
 800a148:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d002      	beq.n	800a156 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a150:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a154:	e021      	b.n	800a19a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a156:	697b      	ldr	r3, [r7, #20]
 800a158:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d002      	beq.n	800a166 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a160:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800a164:	e019      	b.n	800a19a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a166:	697b      	ldr	r3, [r7, #20]
 800a168:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d002      	beq.n	800a176 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a170:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800a174:	e011      	b.n	800a19a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a176:	697b      	ldr	r3, [r7, #20]
 800a178:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d002      	beq.n	800a186 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a180:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800a184:	e009      	b.n	800a19a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a186:	697b      	ldr	r3, [r7, #20]
 800a188:	f003 0308 	and.w	r3, r3, #8
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d002      	beq.n	800a196 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a190:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800a194:	e001      	b.n	800a19a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a196:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800a19a:	4618      	mov	r0, r3
 800a19c:	3720      	adds	r7, #32
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	bd80      	pop	{r7, pc}
 800a1a2:	bf00      	nop
 800a1a4:	20000000 	.word	0x20000000
 800a1a8:	10624dd3 	.word	0x10624dd3
 800a1ac:	fdffe008 	.word	0xfdffe008

0800a1b0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800a1b0:	b480      	push	{r7}
 800a1b2:	b085      	sub	sp, #20
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a1b8:	4b1f      	ldr	r3, [pc, #124]	@ (800a238 <SDMMC_GetCmdResp2+0x88>)
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	4a1f      	ldr	r2, [pc, #124]	@ (800a23c <SDMMC_GetCmdResp2+0x8c>)
 800a1be:	fba2 2303 	umull	r2, r3, r2, r3
 800a1c2:	0a5b      	lsrs	r3, r3, #9
 800a1c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a1c8:	fb02 f303 	mul.w	r3, r2, r3
 800a1cc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	1e5a      	subs	r2, r3, #1
 800a1d2:	60fa      	str	r2, [r7, #12]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d102      	bne.n	800a1de <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a1d8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a1dc:	e026      	b.n	800a22c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a1e2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a1e4:	68bb      	ldr	r3, [r7, #8]
 800a1e6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d0ef      	beq.n	800a1ce <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a1ee:	68bb      	ldr	r3, [r7, #8]
 800a1f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d1ea      	bne.n	800a1ce <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a1fc:	f003 0304 	and.w	r3, r3, #4
 800a200:	2b00      	cmp	r3, #0
 800a202:	d004      	beq.n	800a20e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2204      	movs	r2, #4
 800a208:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a20a:	2304      	movs	r3, #4
 800a20c:	e00e      	b.n	800a22c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a212:	f003 0301 	and.w	r3, r3, #1
 800a216:	2b00      	cmp	r3, #0
 800a218:	d004      	beq.n	800a224 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	2201      	movs	r2, #1
 800a21e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a220:	2301      	movs	r3, #1
 800a222:	e003      	b.n	800a22c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	22c5      	movs	r2, #197	@ 0xc5
 800a228:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800a22a:	2300      	movs	r3, #0
}
 800a22c:	4618      	mov	r0, r3
 800a22e:	3714      	adds	r7, #20
 800a230:	46bd      	mov	sp, r7
 800a232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a236:	4770      	bx	lr
 800a238:	20000000 	.word	0x20000000
 800a23c:	10624dd3 	.word	0x10624dd3

0800a240 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800a240:	b480      	push	{r7}
 800a242:	b085      	sub	sp, #20
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a248:	4b1a      	ldr	r3, [pc, #104]	@ (800a2b4 <SDMMC_GetCmdResp3+0x74>)
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	4a1a      	ldr	r2, [pc, #104]	@ (800a2b8 <SDMMC_GetCmdResp3+0x78>)
 800a24e:	fba2 2303 	umull	r2, r3, r2, r3
 800a252:	0a5b      	lsrs	r3, r3, #9
 800a254:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a258:	fb02 f303 	mul.w	r3, r2, r3
 800a25c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	1e5a      	subs	r2, r3, #1
 800a262:	60fa      	str	r2, [r7, #12]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d102      	bne.n	800a26e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a268:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a26c:	e01b      	b.n	800a2a6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a272:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a274:	68bb      	ldr	r3, [r7, #8]
 800a276:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d0ef      	beq.n	800a25e <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a27e:	68bb      	ldr	r3, [r7, #8]
 800a280:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a284:	2b00      	cmp	r3, #0
 800a286:	d1ea      	bne.n	800a25e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a28c:	f003 0304 	and.w	r3, r3, #4
 800a290:	2b00      	cmp	r3, #0
 800a292:	d004      	beq.n	800a29e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2204      	movs	r2, #4
 800a298:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a29a:	2304      	movs	r3, #4
 800a29c:	e003      	b.n	800a2a6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	22c5      	movs	r2, #197	@ 0xc5
 800a2a2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a2a4:	2300      	movs	r3, #0
}
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	3714      	adds	r7, #20
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b0:	4770      	bx	lr
 800a2b2:	bf00      	nop
 800a2b4:	20000000 	.word	0x20000000
 800a2b8:	10624dd3 	.word	0x10624dd3

0800a2bc <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b088      	sub	sp, #32
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	60f8      	str	r0, [r7, #12]
 800a2c4:	460b      	mov	r3, r1
 800a2c6:	607a      	str	r2, [r7, #4]
 800a2c8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a2ca:	4b35      	ldr	r3, [pc, #212]	@ (800a3a0 <SDMMC_GetCmdResp6+0xe4>)
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	4a35      	ldr	r2, [pc, #212]	@ (800a3a4 <SDMMC_GetCmdResp6+0xe8>)
 800a2d0:	fba2 2303 	umull	r2, r3, r2, r3
 800a2d4:	0a5b      	lsrs	r3, r3, #9
 800a2d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a2da:	fb02 f303 	mul.w	r3, r2, r3
 800a2de:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a2e0:	69fb      	ldr	r3, [r7, #28]
 800a2e2:	1e5a      	subs	r2, r3, #1
 800a2e4:	61fa      	str	r2, [r7, #28]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d102      	bne.n	800a2f0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a2ea:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a2ee:	e052      	b.n	800a396 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a2f4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a2f6:	69bb      	ldr	r3, [r7, #24]
 800a2f8:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d0ef      	beq.n	800a2e0 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a300:	69bb      	ldr	r3, [r7, #24]
 800a302:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a306:	2b00      	cmp	r3, #0
 800a308:	d1ea      	bne.n	800a2e0 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a30e:	f003 0304 	and.w	r3, r3, #4
 800a312:	2b00      	cmp	r3, #0
 800a314:	d004      	beq.n	800a320 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	2204      	movs	r2, #4
 800a31a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a31c:	2304      	movs	r3, #4
 800a31e:	e03a      	b.n	800a396 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a324:	f003 0301 	and.w	r3, r3, #1
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d004      	beq.n	800a336 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	2201      	movs	r2, #1
 800a330:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a332:	2301      	movs	r3, #1
 800a334:	e02f      	b.n	800a396 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a336:	68f8      	ldr	r0, [r7, #12]
 800a338:	f7ff fc0e 	bl	8009b58 <SDMMC_GetCommandResponse>
 800a33c:	4603      	mov	r3, r0
 800a33e:	461a      	mov	r2, r3
 800a340:	7afb      	ldrb	r3, [r7, #11]
 800a342:	4293      	cmp	r3, r2
 800a344:	d001      	beq.n	800a34a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a346:	2301      	movs	r3, #1
 800a348:	e025      	b.n	800a396 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	22c5      	movs	r2, #197	@ 0xc5
 800a34e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a350:	2100      	movs	r1, #0
 800a352:	68f8      	ldr	r0, [r7, #12]
 800a354:	f7ff fc0d 	bl	8009b72 <SDMMC_GetResponse>
 800a358:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800a35a:	697b      	ldr	r3, [r7, #20]
 800a35c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800a360:	2b00      	cmp	r3, #0
 800a362:	d106      	bne.n	800a372 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800a364:	697b      	ldr	r3, [r7, #20]
 800a366:	0c1b      	lsrs	r3, r3, #16
 800a368:	b29a      	uxth	r2, r3
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800a36e:	2300      	movs	r3, #0
 800a370:	e011      	b.n	800a396 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a372:	697b      	ldr	r3, [r7, #20]
 800a374:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d002      	beq.n	800a382 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a37c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a380:	e009      	b.n	800a396 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a382:	697b      	ldr	r3, [r7, #20]
 800a384:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d002      	beq.n	800a392 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a38c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a390:	e001      	b.n	800a396 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a392:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800a396:	4618      	mov	r0, r3
 800a398:	3720      	adds	r7, #32
 800a39a:	46bd      	mov	sp, r7
 800a39c:	bd80      	pop	{r7, pc}
 800a39e:	bf00      	nop
 800a3a0:	20000000 	.word	0x20000000
 800a3a4:	10624dd3 	.word	0x10624dd3

0800a3a8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800a3a8:	b480      	push	{r7}
 800a3aa:	b085      	sub	sp, #20
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a3b0:	4b22      	ldr	r3, [pc, #136]	@ (800a43c <SDMMC_GetCmdResp7+0x94>)
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	4a22      	ldr	r2, [pc, #136]	@ (800a440 <SDMMC_GetCmdResp7+0x98>)
 800a3b6:	fba2 2303 	umull	r2, r3, r2, r3
 800a3ba:	0a5b      	lsrs	r3, r3, #9
 800a3bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a3c0:	fb02 f303 	mul.w	r3, r2, r3
 800a3c4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	1e5a      	subs	r2, r3, #1
 800a3ca:	60fa      	str	r2, [r7, #12]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d102      	bne.n	800a3d6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a3d0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a3d4:	e02c      	b.n	800a430 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a3da:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a3dc:	68bb      	ldr	r3, [r7, #8]
 800a3de:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d0ef      	beq.n	800a3c6 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a3e6:	68bb      	ldr	r3, [r7, #8]
 800a3e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d1ea      	bne.n	800a3c6 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a3f4:	f003 0304 	and.w	r3, r3, #4
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d004      	beq.n	800a406 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2204      	movs	r2, #4
 800a400:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a402:	2304      	movs	r3, #4
 800a404:	e014      	b.n	800a430 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a40a:	f003 0301 	and.w	r3, r3, #1
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d004      	beq.n	800a41c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	2201      	movs	r2, #1
 800a416:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a418:	2301      	movs	r3, #1
 800a41a:	e009      	b.n	800a430 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a420:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a424:	2b00      	cmp	r3, #0
 800a426:	d002      	beq.n	800a42e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	2240      	movs	r2, #64	@ 0x40
 800a42c:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a42e:	2300      	movs	r3, #0
  
}
 800a430:	4618      	mov	r0, r3
 800a432:	3714      	adds	r7, #20
 800a434:	46bd      	mov	sp, r7
 800a436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43a:	4770      	bx	lr
 800a43c:	20000000 	.word	0x20000000
 800a440:	10624dd3 	.word	0x10624dd3

0800a444 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800a444:	b480      	push	{r7}
 800a446:	b085      	sub	sp, #20
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a44c:	4b11      	ldr	r3, [pc, #68]	@ (800a494 <SDMMC_GetCmdError+0x50>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	4a11      	ldr	r2, [pc, #68]	@ (800a498 <SDMMC_GetCmdError+0x54>)
 800a452:	fba2 2303 	umull	r2, r3, r2, r3
 800a456:	0a5b      	lsrs	r3, r3, #9
 800a458:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a45c:	fb02 f303 	mul.w	r3, r2, r3
 800a460:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	1e5a      	subs	r2, r3, #1
 800a466:	60fa      	str	r2, [r7, #12]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d102      	bne.n	800a472 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a46c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a470:	e009      	b.n	800a486 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a476:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d0f1      	beq.n	800a462 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	22c5      	movs	r2, #197	@ 0xc5
 800a482:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800a484:	2300      	movs	r3, #0
}
 800a486:	4618      	mov	r0, r3
 800a488:	3714      	adds	r7, #20
 800a48a:	46bd      	mov	sp, r7
 800a48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a490:	4770      	bx	lr
 800a492:	bf00      	nop
 800a494:	20000000 	.word	0x20000000
 800a498:	10624dd3 	.word	0x10624dd3

0800a49c <AUDIO_REC_Start>:
  * @brief  Starts Audio streaming.    
  * @param  None
  * @retval Audio error
  */ 
AUDIO_ErrorTypeDef AUDIO_REC_Start(void)
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b090      	sub	sp, #64	@ 0x40
 800a4a0:	af00      	add	r7, sp, #0
  uint32_t byteswritten = 0;
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint8_t str[FILEMGR_FILE_NAME_SIZE + 20];

  uwVolume = 100;
 800a4a6:	4b33      	ldr	r3, [pc, #204]	@ (800a574 <AUDIO_REC_Start+0xd8>)
 800a4a8:	2264      	movs	r2, #100	@ 0x64
 800a4aa:	601a      	str	r2, [r3, #0]

  /* Create a new file system */
  if (f_mount(&SDFatFS, (TCHAR const*) SDPath, 0) != FR_OK) {
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	4932      	ldr	r1, [pc, #200]	@ (800a578 <AUDIO_REC_Start+0xdc>)
 800a4b0:	4832      	ldr	r0, [pc, #200]	@ (800a57c <AUDIO_REC_Start+0xe0>)
 800a4b2:	f002 faed 	bl	800ca90 <f_mount>
 800a4b6:	4603      	mov	r3, r0
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d002      	beq.n	800a4c2 <AUDIO_REC_Start+0x26>
    	Error_Handler(); /* FatFs Initialization Error */
 800a4bc:	f7f7 f9a2 	bl	8001804 <Error_Handler>
 800a4c0:	e052      	b.n	800a568 <AUDIO_REC_Start+0xcc>
  } else {
	  printf("SD card mounted\r\n");
 800a4c2:	482f      	ldr	r0, [pc, #188]	@ (800a580 <AUDIO_REC_Start+0xe4>)
 800a4c4:	f007 fbc6 	bl	8011c54 <puts>
		  	  sizeof(workBuffer)) != FR_OK) {
		  Error_Handler(); / * FatFs Format Error */
//	  } else {
//	  */

	  printf("WAV file created\r\n");
 800a4c8:	482e      	ldr	r0, [pc, #184]	@ (800a584 <AUDIO_REC_Start+0xe8>)
 800a4ca:	f007 fbc3 	bl	8011c54 <puts>
	  if(f_open(&WavFile, REC_WAVE_NAME, FA_CREATE_ALWAYS | FA_WRITE) == FR_OK)
 800a4ce:	220a      	movs	r2, #10
 800a4d0:	492d      	ldr	r1, [pc, #180]	@ (800a588 <AUDIO_REC_Start+0xec>)
 800a4d2:	482e      	ldr	r0, [pc, #184]	@ (800a58c <AUDIO_REC_Start+0xf0>)
 800a4d4:	f002 fb22 	bl	800cb1c <f_open>
 800a4d8:	4603      	mov	r3, r0
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d144      	bne.n	800a568 <AUDIO_REC_Start+0xcc>
	  {
		/* Initialize header file */
		WavProcess_EncInit(DEFAULT_AUDIO_IN_FREQ, pHeaderBuff);
 800a4de:	492c      	ldr	r1, [pc, #176]	@ (800a590 <AUDIO_REC_Start+0xf4>)
 800a4e0:	f44f 507a 	mov.w	r0, #16000	@ 0x3e80
 800a4e4:	f000 f9c6 	bl	800a874 <WavProcess_EncInit>

		/* Write header file */
		if(f_write(&WavFile, pHeaderBuff, 44, (void*)&byteswritten) == FR_OK)
 800a4e8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800a4ec:	222c      	movs	r2, #44	@ 0x2c
 800a4ee:	4928      	ldr	r1, [pc, #160]	@ (800a590 <AUDIO_REC_Start+0xf4>)
 800a4f0:	4826      	ldr	r0, [pc, #152]	@ (800a58c <AUDIO_REC_Start+0xf0>)
 800a4f2:	f002 fe0c 	bl	800d10e <f_write>
 800a4f6:	4603      	mov	r3, r0
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d135      	bne.n	800a568 <AUDIO_REC_Start+0xcc>
		{
		  printf("State : ready to record\r\n");
 800a4fc:	4825      	ldr	r0, [pc, #148]	@ (800a594 <AUDIO_REC_Start+0xf8>)
 800a4fe:	f007 fba9 	bl	8011c54 <puts>
		  AudioState = AUDIO_STATE_RECORD;
 800a502:	4b25      	ldr	r3, [pc, #148]	@ (800a598 <AUDIO_REC_Start+0xfc>)
 800a504:	2205      	movs	r2, #5
 800a506:	701a      	strb	r2, [r3, #0]

			if(byteswritten != 0)
 800a508:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d02c      	beq.n	800a568 <AUDIO_REC_Start+0xcc>
			{
			  BSP_AUDIO_IN_Init(DEFAULT_AUDIO_IN_FREQ, DEFAULT_AUDIO_IN_BIT_RESOLUTION, DEFAULT_AUDIO_IN_CHANNEL_NBR);
 800a50e:	2202      	movs	r2, #2
 800a510:	2110      	movs	r1, #16
 800a512:	f44f 507a 	mov.w	r0, #16000	@ 0x3e80
 800a516:	f7f9 fc55 	bl	8003dc4 <BSP_AUDIO_IN_Init>
			  printf("Recording config initialized\r\n");
 800a51a:	4820      	ldr	r0, [pc, #128]	@ (800a59c <AUDIO_REC_Start+0x100>)
 800a51c:	f007 fb9a 	bl	8011c54 <puts>
			  BSP_AUDIO_IN_Record((uint16_t*)&BufferCtl.pcm_buff[0], AUDIO_IN_PCM_BUFFER_SIZE);
 800a520:	f44f 5110 	mov.w	r1, #9216	@ 0x2400
 800a524:	481e      	ldr	r0, [pc, #120]	@ (800a5a0 <AUDIO_REC_Start+0x104>)
 800a526:	f7f9 fccb 	bl	8003ec0 <BSP_AUDIO_IN_Record>
			  printf("Recording started...\r\n");
 800a52a:	481e      	ldr	r0, [pc, #120]	@ (800a5a4 <AUDIO_REC_Start+0x108>)
 800a52c:	f007 fb92 	bl	8011c54 <puts>
			  BufferCtl.fptr = byteswritten;
 800a530:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a532:	4a1b      	ldr	r2, [pc, #108]	@ (800a5a0 <AUDIO_REC_Start+0x104>)
 800a534:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 800a538:	f8c2 380c 	str.w	r3, [r2, #2060]	@ 0x80c
			  BufferCtl.pcm_ptr = 0;
 800a53c:	4b18      	ldr	r3, [pc, #96]	@ (800a5a0 <AUDIO_REC_Start+0x104>)
 800a53e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800a542:	461a      	mov	r2, r3
 800a544:	2300      	movs	r3, #0
 800a546:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800
			  BufferCtl.offset = 0;
 800a54a:	4b15      	ldr	r3, [pc, #84]	@ (800a5a0 <AUDIO_REC_Start+0x104>)
 800a54c:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800a550:	461a      	mov	r2, r3
 800a552:	2300      	movs	r3, #0
 800a554:	f8c2 3808 	str.w	r3, [r2, #2056]	@ 0x808
			  BufferCtl.wr_state = BUFFER_EMPTY;
 800a558:	4b11      	ldr	r3, [pc, #68]	@ (800a5a0 <AUDIO_REC_Start+0x104>)
 800a55a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800a55e:	2200      	movs	r2, #0
 800a560:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
			  return AUDIO_ERROR_NONE;
 800a564:	2300      	movs	r3, #0
 800a566:	e000      	b.n	800a56a <AUDIO_REC_Start+0xce>
			}
		}
	  }
	  //}
  }
  return AUDIO_ERROR_IO;
 800a568:	2301      	movs	r3, #1
}
 800a56a:	4618      	mov	r0, r3
 800a56c:	3740      	adds	r7, #64	@ 0x40
 800a56e:	46bd      	mov	sp, r7
 800a570:	bd80      	pop	{r7, pc}
 800a572:	bf00      	nop
 800a574:	20000040 	.word	0x20000040
 800a578:	20005974 	.word	0x20005974
 800a57c:	20005978 	.word	0x20005978
 800a580:	08013de4 	.word	0x08013de4
 800a584:	08013df8 	.word	0x08013df8
 800a588:	08013e0c 	.word	0x08013e0c
 800a58c:	20005740 	.word	0x20005740
 800a590:	20000ed8 	.word	0x20000ed8
 800a594:	08013e18 	.word	0x08013e18
 800a598:	200009f0 	.word	0x200009f0
 800a59c:	08013e34 	.word	0x08013e34
 800a5a0:	20000f04 	.word	0x20000f04
 800a5a4:	08013e54 	.word	0x08013e54

0800a5a8 <AUDIO_REC_Process>:
  * @brief  Manages Audio process. 
  * @param  None
  * @retval Audio error
  */
AUDIO_ErrorTypeDef AUDIO_REC_Process(void)
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b088      	sub	sp, #32
 800a5ac:	af00      	add	r7, sp, #0
  uint32_t byteswritten = 0;
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	617b      	str	r3, [r7, #20]
  AUDIO_ErrorTypeDef audio_error = AUDIO_ERROR_NONE;
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	77fb      	strb	r3, [r7, #31]
  uint32_t elapsed_time; 
  static uint32_t prev_elapsed_time = 0xFFFFFFFF;
  uint8_t str[16];
  //static TS_StateTypeDef  TS_State={0};
  //printf("PRE SWITCH\r\n");
  switch(AudioState)
 800a5b6:	4b59      	ldr	r3, [pc, #356]	@ (800a71c <AUDIO_REC_Process+0x174>)
 800a5b8:	781b      	ldrb	r3, [r3, #0]
 800a5ba:	2b05      	cmp	r3, #5
 800a5bc:	d002      	beq.n	800a5c4 <AUDIO_REC_Process+0x1c>
 800a5be:	2b0a      	cmp	r3, #10
 800a5c0:	d079      	beq.n	800a6b6 <AUDIO_REC_Process+0x10e>

  	case AUDIO_STATE_IDLE:
  	case AUDIO_STATE_INIT:
  	default:
      /* Do Nothing */
      break;
 800a5c2:	e0a7      	b.n	800a714 <AUDIO_REC_Process+0x16c>
      if(BufferCtl.fptr >= REC_SAMPLE_LENGTH)
 800a5c4:	4b56      	ldr	r3, [pc, #344]	@ (800a720 <AUDIO_REC_Process+0x178>)
 800a5c6:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800a5ca:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800a5ce:	f5b3 4f7a 	cmp.w	r3, #64000	@ 0xfa00
 800a5d2:	d303      	bcc.n	800a5dc <AUDIO_REC_Process+0x34>
        AudioState = AUDIO_STATE_STOP;
 800a5d4:	4b51      	ldr	r3, [pc, #324]	@ (800a71c <AUDIO_REC_Process+0x174>)
 800a5d6:	220a      	movs	r2, #10
 800a5d8:	701a      	strb	r2, [r3, #0]
        break;
 800a5da:	e09b      	b.n	800a714 <AUDIO_REC_Process+0x16c>
      if(BufferCtl.wr_state == BUFFER_FULL)
 800a5dc:	4b50      	ldr	r3, [pc, #320]	@ (800a720 <AUDIO_REC_Process+0x178>)
 800a5de:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800a5e2:	f893 3804 	ldrb.w	r3, [r3, #2052]	@ 0x804
 800a5e6:	2b01      	cmp	r3, #1
 800a5e8:	d128      	bne.n	800a63c <AUDIO_REC_Process+0x94>
        if(f_write(&WavFile, (uint8_t*)(BufferCtl.pcm_buff + BufferCtl.offset),
 800a5ea:	4b4d      	ldr	r3, [pc, #308]	@ (800a720 <AUDIO_REC_Process+0x178>)
 800a5ec:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800a5f0:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 800a5f4:	005b      	lsls	r3, r3, #1
 800a5f6:	4a4a      	ldr	r2, [pc, #296]	@ (800a720 <AUDIO_REC_Process+0x178>)
 800a5f8:	1899      	adds	r1, r3, r2
 800a5fa:	f107 0314 	add.w	r3, r7, #20
 800a5fe:	f44f 5210 	mov.w	r2, #9216	@ 0x2400
 800a602:	4848      	ldr	r0, [pc, #288]	@ (800a724 <AUDIO_REC_Process+0x17c>)
 800a604:	f002 fd83 	bl	800d10e <f_write>
 800a608:	4603      	mov	r3, r0
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d004      	beq.n	800a618 <AUDIO_REC_Process+0x70>
          printf("recording failed\r\n");
 800a60e:	4846      	ldr	r0, [pc, #280]	@ (800a728 <AUDIO_REC_Process+0x180>)
 800a610:	f007 fb20 	bl	8011c54 <puts>
          return AUDIO_ERROR_IO;
 800a614:	2301      	movs	r3, #1
 800a616:	e07d      	b.n	800a714 <AUDIO_REC_Process+0x16c>
        BufferCtl.fptr += byteswritten;
 800a618:	4b41      	ldr	r3, [pc, #260]	@ (800a720 <AUDIO_REC_Process+0x178>)
 800a61a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800a61e:	f8d3 280c 	ldr.w	r2, [r3, #2060]	@ 0x80c
 800a622:	697b      	ldr	r3, [r7, #20]
 800a624:	4413      	add	r3, r2
 800a626:	4a3e      	ldr	r2, [pc, #248]	@ (800a720 <AUDIO_REC_Process+0x178>)
 800a628:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 800a62c:	f8c2 380c 	str.w	r3, [r2, #2060]	@ 0x80c
        BufferCtl.wr_state =  BUFFER_EMPTY;
 800a630:	4b3b      	ldr	r3, [pc, #236]	@ (800a720 <AUDIO_REC_Process+0x178>)
 800a632:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800a636:	2200      	movs	r2, #0
 800a638:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
      elapsed_time = BufferCtl.fptr / (DEFAULT_AUDIO_IN_FREQ * DEFAULT_AUDIO_IN_CHANNEL_NBR * 2);
 800a63c:	4b38      	ldr	r3, [pc, #224]	@ (800a720 <AUDIO_REC_Process+0x178>)
 800a63e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800a642:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800a646:	4a39      	ldr	r2, [pc, #228]	@ (800a72c <AUDIO_REC_Process+0x184>)
 800a648:	fba2 2303 	umull	r2, r3, r2, r3
 800a64c:	0b1b      	lsrs	r3, r3, #12
 800a64e:	61bb      	str	r3, [r7, #24]
      if(prev_elapsed_time != elapsed_time)
 800a650:	4b37      	ldr	r3, [pc, #220]	@ (800a730 <AUDIO_REC_Process+0x188>)
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	69ba      	ldr	r2, [r7, #24]
 800a656:	429a      	cmp	r2, r3
 800a658:	d05b      	beq.n	800a712 <AUDIO_REC_Process+0x16a>
        prev_elapsed_time = elapsed_time;
 800a65a:	4a35      	ldr	r2, [pc, #212]	@ (800a730 <AUDIO_REC_Process+0x188>)
 800a65c:	69bb      	ldr	r3, [r7, #24]
 800a65e:	6013      	str	r3, [r2, #0]
        printf("Elapsed time : \r\n");
 800a660:	4834      	ldr	r0, [pc, #208]	@ (800a734 <AUDIO_REC_Process+0x18c>)
 800a662:	f007 faf7 	bl	8011c54 <puts>
        printf("[%02d:%02d]\r\n", (int)(elapsed_time /60), (int)(elapsed_time%60));
 800a666:	69bb      	ldr	r3, [r7, #24]
 800a668:	4a33      	ldr	r2, [pc, #204]	@ (800a738 <AUDIO_REC_Process+0x190>)
 800a66a:	fba2 2303 	umull	r2, r3, r2, r3
 800a66e:	095b      	lsrs	r3, r3, #5
 800a670:	4618      	mov	r0, r3
 800a672:	69b9      	ldr	r1, [r7, #24]
 800a674:	4b30      	ldr	r3, [pc, #192]	@ (800a738 <AUDIO_REC_Process+0x190>)
 800a676:	fba3 2301 	umull	r2, r3, r3, r1
 800a67a:	095a      	lsrs	r2, r3, #5
 800a67c:	4613      	mov	r3, r2
 800a67e:	011b      	lsls	r3, r3, #4
 800a680:	1a9b      	subs	r3, r3, r2
 800a682:	009b      	lsls	r3, r3, #2
 800a684:	1aca      	subs	r2, r1, r3
 800a686:	4613      	mov	r3, r2
 800a688:	461a      	mov	r2, r3
 800a68a:	4601      	mov	r1, r0
 800a68c:	482b      	ldr	r0, [pc, #172]	@ (800a73c <AUDIO_REC_Process+0x194>)
 800a68e:	f007 fa79 	bl	8011b84 <iprintf>
        printf("File size : \r\n");
 800a692:	482b      	ldr	r0, [pc, #172]	@ (800a740 <AUDIO_REC_Process+0x198>)
 800a694:	f007 fade 	bl	8011c54 <puts>
        printf("%4d KB\r\n", (int)((int32_t)BufferCtl.fptr/1024));
 800a698:	4b21      	ldr	r3, [pc, #132]	@ (800a720 <AUDIO_REC_Process+0x178>)
 800a69a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800a69e:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	da01      	bge.n	800a6aa <AUDIO_REC_Process+0x102>
 800a6a6:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 800a6aa:	129b      	asrs	r3, r3, #10
 800a6ac:	4619      	mov	r1, r3
 800a6ae:	4825      	ldr	r0, [pc, #148]	@ (800a744 <AUDIO_REC_Process+0x19c>)
 800a6b0:	f007 fa68 	bl	8011b84 <iprintf>
      break;
 800a6b4:	e02d      	b.n	800a712 <AUDIO_REC_Process+0x16a>
      BSP_AUDIO_IN_Stop(CODEC_PDWN_SW);
 800a6b6:	2002      	movs	r0, #2
 800a6b8:	f7f9 fc1a 	bl	8003ef0 <BSP_AUDIO_IN_Stop>
      HAL_Delay(300);
 800a6bc:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800a6c0:	f7f9 fe30 	bl	8004324 <HAL_Delay>
      if(f_lseek(&WavFile, 0) == FR_OK)
 800a6c4:	2100      	movs	r1, #0
 800a6c6:	4817      	ldr	r0, [pc, #92]	@ (800a724 <AUDIO_REC_Process+0x17c>)
 800a6c8:	f002 ff3e 	bl	800d548 <f_lseek>
 800a6cc:	4603      	mov	r3, r0
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d113      	bne.n	800a6fa <AUDIO_REC_Process+0x152>
        WavProcess_HeaderUpdate(pHeaderBuff, &WaveFormat);
 800a6d2:	491d      	ldr	r1, [pc, #116]	@ (800a748 <AUDIO_REC_Process+0x1a0>)
 800a6d4:	481d      	ldr	r0, [pc, #116]	@ (800a74c <AUDIO_REC_Process+0x1a4>)
 800a6d6:	f000 f9e5 	bl	800aaa4 <WavProcess_HeaderUpdate>
        if(f_write(&WavFile, pHeaderBuff, sizeof(WAVE_FormatTypeDef), (void*)&byteswritten) == FR_OK)
 800a6da:	f107 0314 	add.w	r3, r7, #20
 800a6de:	222c      	movs	r2, #44	@ 0x2c
 800a6e0:	491a      	ldr	r1, [pc, #104]	@ (800a74c <AUDIO_REC_Process+0x1a4>)
 800a6e2:	4810      	ldr	r0, [pc, #64]	@ (800a724 <AUDIO_REC_Process+0x17c>)
 800a6e4:	f002 fd13 	bl	800d10e <f_write>
 800a6e8:	4603      	mov	r3, r0
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d102      	bne.n	800a6f4 <AUDIO_REC_Process+0x14c>
          audio_error = AUDIO_ERROR_EOF;
 800a6ee:	2302      	movs	r3, #2
 800a6f0:	77fb      	strb	r3, [r7, #31]
 800a6f2:	e004      	b.n	800a6fe <AUDIO_REC_Process+0x156>
          audio_error = AUDIO_ERROR_IO;
 800a6f4:	2301      	movs	r3, #1
 800a6f6:	77fb      	strb	r3, [r7, #31]
 800a6f8:	e001      	b.n	800a6fe <AUDIO_REC_Process+0x156>
        audio_error = AUDIO_ERROR_IO;
 800a6fa:	2301      	movs	r3, #1
 800a6fc:	77fb      	strb	r3, [r7, #31]
      AudioState = AUDIO_STATE_IDLE;
 800a6fe:	4b07      	ldr	r3, [pc, #28]	@ (800a71c <AUDIO_REC_Process+0x174>)
 800a700:	2200      	movs	r2, #0
 800a702:	701a      	strb	r2, [r3, #0]
      f_close(&WavFile);
 800a704:	4807      	ldr	r0, [pc, #28]	@ (800a724 <AUDIO_REC_Process+0x17c>)
 800a706:	f002 fef5 	bl	800d4f4 <f_close>
      printf("wave file closed success\r\n");
 800a70a:	4811      	ldr	r0, [pc, #68]	@ (800a750 <AUDIO_REC_Process+0x1a8>)
 800a70c:	f007 faa2 	bl	8011c54 <puts>
      break;
 800a710:	e000      	b.n	800a714 <AUDIO_REC_Process+0x16c>
      break;
 800a712:	bf00      	nop
      return audio_error;
    }
}
 800a714:	4618      	mov	r0, r3
 800a716:	3720      	adds	r7, #32
 800a718:	46bd      	mov	sp, r7
 800a71a:	bd80      	pop	{r7, pc}
 800a71c:	200009f0 	.word	0x200009f0
 800a720:	20000f04 	.word	0x20000f04
 800a724:	20005740 	.word	0x20005740
 800a728:	08013e6c 	.word	0x08013e6c
 800a72c:	10624dd3 	.word	0x10624dd3
 800a730:	20000044 	.word	0x20000044
 800a734:	08013e80 	.word	0x08013e80
 800a738:	88888889 	.word	0x88888889
 800a73c:	08013e94 	.word	0x08013e94
 800a740:	08013ea4 	.word	0x08013ea4
 800a744:	08013eb4 	.word	0x08013eb4
 800a748:	20005714 	.word	0x20005714
 800a74c:	20000ed8 	.word	0x20000ed8
 800a750:	08013ec0 	.word	0x08013ec0

0800a754 <BSP_AUDIO_IN_TransferComplete_CallBack>:
  * @brief  Calculates the remaining file size and new position of the pointer.
  * @param  None
  * @retval None
  */
void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
 800a754:	b480      	push	{r7}
 800a756:	af00      	add	r7, sp, #0
  BufferCtl.pcm_ptr+= AUDIO_IN_PCM_BUFFER_SIZE/2;
 800a758:	4b21      	ldr	r3, [pc, #132]	@ (800a7e0 <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800a75a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800a75e:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800a762:	f503 5390 	add.w	r3, r3, #4608	@ 0x1200
 800a766:	4a1e      	ldr	r2, [pc, #120]	@ (800a7e0 <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800a768:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 800a76c:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800
  if(BufferCtl.pcm_ptr == AUDIO_IN_PCM_BUFFER_SIZE/2)
 800a770:	4b1b      	ldr	r3, [pc, #108]	@ (800a7e0 <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800a772:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800a776:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800a77a:	f5b3 5f90 	cmp.w	r3, #4608	@ 0x1200
 800a77e:	d10c      	bne.n	800a79a <BSP_AUDIO_IN_TransferComplete_CallBack+0x46>
  {
    BufferCtl.wr_state   =  BUFFER_FULL;
 800a780:	4b17      	ldr	r3, [pc, #92]	@ (800a7e0 <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800a782:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800a786:	2201      	movs	r2, #1
 800a788:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
    BufferCtl.offset  = 0;
 800a78c:	4b14      	ldr	r3, [pc, #80]	@ (800a7e0 <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800a78e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800a792:	461a      	mov	r2, r3
 800a794:	2300      	movs	r3, #0
 800a796:	f8c2 3808 	str.w	r3, [r2, #2056]	@ 0x808
  }
  
  if(BufferCtl.pcm_ptr >= AUDIO_IN_PCM_BUFFER_SIZE)
 800a79a:	4b11      	ldr	r3, [pc, #68]	@ (800a7e0 <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800a79c:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800a7a0:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800a7a4:	f5b3 5f10 	cmp.w	r3, #9216	@ 0x2400
 800a7a8:	d314      	bcc.n	800a7d4 <BSP_AUDIO_IN_TransferComplete_CallBack+0x80>
  {
    BufferCtl.wr_state   =  BUFFER_FULL;
 800a7aa:	4b0d      	ldr	r3, [pc, #52]	@ (800a7e0 <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800a7ac:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800a7b0:	2201      	movs	r2, #1
 800a7b2:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
    BufferCtl.offset  = AUDIO_IN_PCM_BUFFER_SIZE/2;    
 800a7b6:	4b0a      	ldr	r3, [pc, #40]	@ (800a7e0 <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800a7b8:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800a7bc:	461a      	mov	r2, r3
 800a7be:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 800a7c2:	f8c2 3808 	str.w	r3, [r2, #2056]	@ 0x808
    BufferCtl.pcm_ptr = 0;
 800a7c6:	4b06      	ldr	r3, [pc, #24]	@ (800a7e0 <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800a7c8:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800a7cc:	461a      	mov	r2, r3
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800
  }
}
 800a7d4:	bf00      	nop
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7dc:	4770      	bx	lr
 800a7de:	bf00      	nop
 800a7e0:	20000f04 	.word	0x20000f04

0800a7e4 <BSP_AUDIO_IN_HalfTransfer_CallBack>:
  * @brief  Manages the DMA Half Transfer complete interrupt.
  * @param  None
  * @retval None
  */
void BSP_AUDIO_IN_HalfTransfer_CallBack(void)
{ 
 800a7e4:	b480      	push	{r7}
 800a7e6:	af00      	add	r7, sp, #0
  BufferCtl.pcm_ptr+= AUDIO_IN_PCM_BUFFER_SIZE/2;
 800a7e8:	4b21      	ldr	r3, [pc, #132]	@ (800a870 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800a7ea:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800a7ee:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800a7f2:	f503 5390 	add.w	r3, r3, #4608	@ 0x1200
 800a7f6:	4a1e      	ldr	r2, [pc, #120]	@ (800a870 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800a7f8:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 800a7fc:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800
  if(BufferCtl.pcm_ptr == AUDIO_IN_PCM_BUFFER_SIZE/2)
 800a800:	4b1b      	ldr	r3, [pc, #108]	@ (800a870 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800a802:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800a806:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800a80a:	f5b3 5f90 	cmp.w	r3, #4608	@ 0x1200
 800a80e:	d10c      	bne.n	800a82a <BSP_AUDIO_IN_HalfTransfer_CallBack+0x46>
  {
    BufferCtl.wr_state   =  BUFFER_FULL;
 800a810:	4b17      	ldr	r3, [pc, #92]	@ (800a870 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800a812:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800a816:	2201      	movs	r2, #1
 800a818:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
    BufferCtl.offset  = 0;
 800a81c:	4b14      	ldr	r3, [pc, #80]	@ (800a870 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800a81e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800a822:	461a      	mov	r2, r3
 800a824:	2300      	movs	r3, #0
 800a826:	f8c2 3808 	str.w	r3, [r2, #2056]	@ 0x808
  }
  
  if(BufferCtl.pcm_ptr >= AUDIO_IN_PCM_BUFFER_SIZE)
 800a82a:	4b11      	ldr	r3, [pc, #68]	@ (800a870 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800a82c:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800a830:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800a834:	f5b3 5f10 	cmp.w	r3, #9216	@ 0x2400
 800a838:	d314      	bcc.n	800a864 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x80>
  {
    BufferCtl.wr_state   =  BUFFER_FULL;
 800a83a:	4b0d      	ldr	r3, [pc, #52]	@ (800a870 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800a83c:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800a840:	2201      	movs	r2, #1
 800a842:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
    BufferCtl.offset  = AUDIO_IN_PCM_BUFFER_SIZE/2;    
 800a846:	4b0a      	ldr	r3, [pc, #40]	@ (800a870 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800a848:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800a84c:	461a      	mov	r2, r3
 800a84e:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 800a852:	f8c2 3808 	str.w	r3, [r2, #2056]	@ 0x808
    BufferCtl.pcm_ptr = 0;
 800a856:	4b06      	ldr	r3, [pc, #24]	@ (800a870 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800a858:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800a85c:	461a      	mov	r2, r3
 800a85e:	2300      	movs	r3, #0
 800a860:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800
  }
}
 800a864:	bf00      	nop
 800a866:	46bd      	mov	sp, r7
 800a868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86c:	4770      	bx	lr
 800a86e:	bf00      	nop
 800a870:	20000f04 	.word	0x20000f04

0800a874 <WavProcess_EncInit>:
  * @param  Freq: Sampling frequency.
  * @param  pHeader: Pointer to the WAV file header to be written.  
  * @retval 0 if success, !0 else.
  */
static uint32_t WavProcess_EncInit(uint32_t Freq, uint8_t *pHeader)
{  
 800a874:	b580      	push	{r7, lr}
 800a876:	b082      	sub	sp, #8
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
 800a87c:	6039      	str	r1, [r7, #0]
  /* Initialize the encoder structure */
  WaveFormat.SampleRate = Freq;        /* Audio sampling frequency */
 800a87e:	4a1b      	ldr	r2, [pc, #108]	@ (800a8ec <WavProcess_EncInit+0x78>)
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	6193      	str	r3, [r2, #24]
  WaveFormat.NbrChannels = 2;          /* Number of channels: 1:Mono or 2:Stereo */
 800a884:	4b19      	ldr	r3, [pc, #100]	@ (800a8ec <WavProcess_EncInit+0x78>)
 800a886:	2202      	movs	r2, #2
 800a888:	82da      	strh	r2, [r3, #22]
  WaveFormat.BitPerSample = 16;        /* Number of bits per sample (16, 24 or 32) */
 800a88a:	4b18      	ldr	r3, [pc, #96]	@ (800a8ec <WavProcess_EncInit+0x78>)
 800a88c:	2210      	movs	r2, #16
 800a88e:	845a      	strh	r2, [r3, #34]	@ 0x22
  WaveFormat.FileSize = 0x001D4C00;    /* Total length of useful audio data (payload) */
 800a890:	4b16      	ldr	r3, [pc, #88]	@ (800a8ec <WavProcess_EncInit+0x78>)
 800a892:	4a17      	ldr	r2, [pc, #92]	@ (800a8f0 <WavProcess_EncInit+0x7c>)
 800a894:	605a      	str	r2, [r3, #4]
  WaveFormat.SubChunk1Size = 44;       /* The file header chunk size */
 800a896:	4b15      	ldr	r3, [pc, #84]	@ (800a8ec <WavProcess_EncInit+0x78>)
 800a898:	222c      	movs	r2, #44	@ 0x2c
 800a89a:	611a      	str	r2, [r3, #16]
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
 800a89c:	4b13      	ldr	r3, [pc, #76]	@ (800a8ec <WavProcess_EncInit+0x78>)
 800a89e:	699b      	ldr	r3, [r3, #24]
                        (WaveFormat.BitPerSample/8) * \
 800a8a0:	4a12      	ldr	r2, [pc, #72]	@ (800a8ec <WavProcess_EncInit+0x78>)
 800a8a2:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 800a8a4:	08d2      	lsrs	r2, r2, #3
 800a8a6:	b292      	uxth	r2, r2
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
 800a8a8:	fb02 f303 	mul.w	r3, r2, r3
                         WaveFormat.NbrChannels);     /* Number of bytes per second  (sample rate * block align)  */
 800a8ac:	4a0f      	ldr	r2, [pc, #60]	@ (800a8ec <WavProcess_EncInit+0x78>)
 800a8ae:	8ad2      	ldrh	r2, [r2, #22]
                        (WaveFormat.BitPerSample/8) * \
 800a8b0:	fb02 f303 	mul.w	r3, r2, r3
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
 800a8b4:	4a0d      	ldr	r2, [pc, #52]	@ (800a8ec <WavProcess_EncInit+0x78>)
 800a8b6:	61d3      	str	r3, [r2, #28]
  WaveFormat.BlockAlign = WaveFormat.NbrChannels * \
 800a8b8:	4b0c      	ldr	r3, [pc, #48]	@ (800a8ec <WavProcess_EncInit+0x78>)
 800a8ba:	8ada      	ldrh	r2, [r3, #22]
                         (WaveFormat.BitPerSample/8); /* channels * bits/sample / 8 */
 800a8bc:	4b0b      	ldr	r3, [pc, #44]	@ (800a8ec <WavProcess_EncInit+0x78>)
 800a8be:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
  WaveFormat.BlockAlign = WaveFormat.NbrChannels * \
 800a8c0:	08db      	lsrs	r3, r3, #3
 800a8c2:	b29b      	uxth	r3, r3
 800a8c4:	fb12 f303 	smulbb	r3, r2, r3
 800a8c8:	b29a      	uxth	r2, r3
 800a8ca:	4b08      	ldr	r3, [pc, #32]	@ (800a8ec <WavProcess_EncInit+0x78>)
 800a8cc:	841a      	strh	r2, [r3, #32]
  
  /* Parse the wav file header and extract required information */
  if(WavProcess_HeaderInit(pHeader, &WaveFormat))
 800a8ce:	4907      	ldr	r1, [pc, #28]	@ (800a8ec <WavProcess_EncInit+0x78>)
 800a8d0:	6838      	ldr	r0, [r7, #0]
 800a8d2:	f000 f80f 	bl	800a8f4 <WavProcess_HeaderInit>
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d001      	beq.n	800a8e0 <WavProcess_EncInit+0x6c>
  {
    return 1;
 800a8dc:	2301      	movs	r3, #1
 800a8de:	e000      	b.n	800a8e2 <WavProcess_EncInit+0x6e>
  }
  return 0;
 800a8e0:	2300      	movs	r3, #0
}
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	3708      	adds	r7, #8
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	bd80      	pop	{r7, pc}
 800a8ea:	bf00      	nop
 800a8ec:	20005714 	.word	0x20005714
 800a8f0:	001d4c00 	.word	0x001d4c00

0800a8f4 <WavProcess_HeaderInit>:
  * @param  pHeader: Header Buffer to be filled
  * @param  pWaveFormatStruct: Pointer to the wave structure to be filled.
  * @retval 0 if passed, !0 if failed.
  */
static uint32_t WavProcess_HeaderInit(uint8_t* pHeader, WAVE_FormatTypeDef* pWaveFormatStruct)
{
 800a8f4:	b480      	push	{r7}
 800a8f6:	b083      	sub	sp, #12
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
 800a8fc:	6039      	str	r1, [r7, #0]
  /* Write chunkID, must be 'RIFF'  ------------------------------------------*/
  pHeader[0] = 'R';
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	2252      	movs	r2, #82	@ 0x52
 800a902:	701a      	strb	r2, [r3, #0]
  pHeader[1] = 'I';
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	3301      	adds	r3, #1
 800a908:	2249      	movs	r2, #73	@ 0x49
 800a90a:	701a      	strb	r2, [r3, #0]
  pHeader[2] = 'F';
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	3302      	adds	r3, #2
 800a910:	2246      	movs	r2, #70	@ 0x46
 800a912:	701a      	strb	r2, [r3, #0]
  pHeader[3] = 'F';
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	3303      	adds	r3, #3
 800a918:	2246      	movs	r2, #70	@ 0x46
 800a91a:	701a      	strb	r2, [r3, #0]
  
  /* Write the file length ---------------------------------------------------*/
  /* The sampling time: this value will be written back at the end of the 
     recording operation.  Example: 661500 Bytes = 0x000A17FC, byte[7]=0x00, byte[4]=0xFC */
  pHeader[4] = 0x00;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	3304      	adds	r3, #4
 800a920:	2200      	movs	r2, #0
 800a922:	701a      	strb	r2, [r3, #0]
  pHeader[5] = 0x4C;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	3305      	adds	r3, #5
 800a928:	224c      	movs	r2, #76	@ 0x4c
 800a92a:	701a      	strb	r2, [r3, #0]
  pHeader[6] = 0x1D;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	3306      	adds	r3, #6
 800a930:	221d      	movs	r2, #29
 800a932:	701a      	strb	r2, [r3, #0]
  pHeader[7] = 0x00;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	3307      	adds	r3, #7
 800a938:	2200      	movs	r2, #0
 800a93a:	701a      	strb	r2, [r3, #0]
  /* Write the file format, must be 'WAVE' -----------------------------------*/
  pHeader[8]  = 'W';
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	3308      	adds	r3, #8
 800a940:	2257      	movs	r2, #87	@ 0x57
 800a942:	701a      	strb	r2, [r3, #0]
  pHeader[9]  = 'A';
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	3309      	adds	r3, #9
 800a948:	2241      	movs	r2, #65	@ 0x41
 800a94a:	701a      	strb	r2, [r3, #0]
  pHeader[10] = 'V';
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	330a      	adds	r3, #10
 800a950:	2256      	movs	r2, #86	@ 0x56
 800a952:	701a      	strb	r2, [r3, #0]
  pHeader[11] = 'E';
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	330b      	adds	r3, #11
 800a958:	2245      	movs	r2, #69	@ 0x45
 800a95a:	701a      	strb	r2, [r3, #0]
  
  /* Write the format chunk, must be'fmt ' -----------------------------------*/
  pHeader[12]  = 'f';
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	330c      	adds	r3, #12
 800a960:	2266      	movs	r2, #102	@ 0x66
 800a962:	701a      	strb	r2, [r3, #0]
  pHeader[13]  = 'm';
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	330d      	adds	r3, #13
 800a968:	226d      	movs	r2, #109	@ 0x6d
 800a96a:	701a      	strb	r2, [r3, #0]
  pHeader[14]  = 't';
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	330e      	adds	r3, #14
 800a970:	2274      	movs	r2, #116	@ 0x74
 800a972:	701a      	strb	r2, [r3, #0]
  pHeader[15]  = ' ';
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	330f      	adds	r3, #15
 800a978:	2220      	movs	r2, #32
 800a97a:	701a      	strb	r2, [r3, #0]
  
  /* Write the length of the 'fmt' data, must be 0x10 ------------------------*/
  pHeader[16]  = 0x10;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	3310      	adds	r3, #16
 800a980:	2210      	movs	r2, #16
 800a982:	701a      	strb	r2, [r3, #0]
  pHeader[17]  = 0x00;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	3311      	adds	r3, #17
 800a988:	2200      	movs	r2, #0
 800a98a:	701a      	strb	r2, [r3, #0]
  pHeader[18]  = 0x00;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	3312      	adds	r3, #18
 800a990:	2200      	movs	r2, #0
 800a992:	701a      	strb	r2, [r3, #0]
  pHeader[19]  = 0x00;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	3313      	adds	r3, #19
 800a998:	2200      	movs	r2, #0
 800a99a:	701a      	strb	r2, [r3, #0]
  
  /* Write the audio format, must be 0x01 (PCM) ------------------------------*/
  pHeader[20]  = 0x01;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	3314      	adds	r3, #20
 800a9a0:	2201      	movs	r2, #1
 800a9a2:	701a      	strb	r2, [r3, #0]
  pHeader[21]  = 0x00;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	3315      	adds	r3, #21
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	701a      	strb	r2, [r3, #0]
  
  /* Write the number of channels, ie. 0x01 (Mono) ---------------------------*/
  pHeader[22]  = pWaveFormatStruct->NbrChannels;
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	8ada      	ldrh	r2, [r3, #22]
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	3316      	adds	r3, #22
 800a9b4:	b2d2      	uxtb	r2, r2
 800a9b6:	701a      	strb	r2, [r3, #0]
  pHeader[23]  = 0x00;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	3317      	adds	r3, #23
 800a9bc:	2200      	movs	r2, #0
 800a9be:	701a      	strb	r2, [r3, #0]
  
  /* Write the Sample Rate in Hz ---------------------------------------------*/
  /* Write Little Endian ie. 8000 = 0x00001F40 => byte[24]=0x40, byte[27]=0x00*/
  pHeader[24]  = (uint8_t)((pWaveFormatStruct->SampleRate & 0xFF));
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	699a      	ldr	r2, [r3, #24]
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	3318      	adds	r3, #24
 800a9c8:	b2d2      	uxtb	r2, r2
 800a9ca:	701a      	strb	r2, [r3, #0]
  pHeader[25]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 8) & 0xFF);
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	699b      	ldr	r3, [r3, #24]
 800a9d0:	0a1a      	lsrs	r2, r3, #8
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	3319      	adds	r3, #25
 800a9d6:	b2d2      	uxtb	r2, r2
 800a9d8:	701a      	strb	r2, [r3, #0]
  pHeader[26]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 16) & 0xFF);
 800a9da:	683b      	ldr	r3, [r7, #0]
 800a9dc:	699b      	ldr	r3, [r3, #24]
 800a9de:	0c1a      	lsrs	r2, r3, #16
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	331a      	adds	r3, #26
 800a9e4:	b2d2      	uxtb	r2, r2
 800a9e6:	701a      	strb	r2, [r3, #0]
  pHeader[27]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 24) & 0xFF);
 800a9e8:	683b      	ldr	r3, [r7, #0]
 800a9ea:	699b      	ldr	r3, [r3, #24]
 800a9ec:	0e1a      	lsrs	r2, r3, #24
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	331b      	adds	r3, #27
 800a9f2:	b2d2      	uxtb	r2, r2
 800a9f4:	701a      	strb	r2, [r3, #0]
  
  /* Write the Byte Rate -----------------------------------------------------*/
  pHeader[28]  = (uint8_t)((pWaveFormatStruct->ByteRate & 0xFF));
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	69da      	ldr	r2, [r3, #28]
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	331c      	adds	r3, #28
 800a9fe:	b2d2      	uxtb	r2, r2
 800aa00:	701a      	strb	r2, [r3, #0]
  pHeader[29]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 8) & 0xFF);
 800aa02:	683b      	ldr	r3, [r7, #0]
 800aa04:	69db      	ldr	r3, [r3, #28]
 800aa06:	0a1a      	lsrs	r2, r3, #8
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	331d      	adds	r3, #29
 800aa0c:	b2d2      	uxtb	r2, r2
 800aa0e:	701a      	strb	r2, [r3, #0]
  pHeader[30]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 16) & 0xFF);
 800aa10:	683b      	ldr	r3, [r7, #0]
 800aa12:	69db      	ldr	r3, [r3, #28]
 800aa14:	0c1a      	lsrs	r2, r3, #16
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	331e      	adds	r3, #30
 800aa1a:	b2d2      	uxtb	r2, r2
 800aa1c:	701a      	strb	r2, [r3, #0]
  pHeader[31]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 24) & 0xFF);
 800aa1e:	683b      	ldr	r3, [r7, #0]
 800aa20:	69db      	ldr	r3, [r3, #28]
 800aa22:	0e1a      	lsrs	r2, r3, #24
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	331f      	adds	r3, #31
 800aa28:	b2d2      	uxtb	r2, r2
 800aa2a:	701a      	strb	r2, [r3, #0]
  
  /* Write the block alignment -----------------------------------------------*/
  pHeader[32]  = pWaveFormatStruct->BlockAlign;
 800aa2c:	683b      	ldr	r3, [r7, #0]
 800aa2e:	8c1a      	ldrh	r2, [r3, #32]
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	3320      	adds	r3, #32
 800aa34:	b2d2      	uxtb	r2, r2
 800aa36:	701a      	strb	r2, [r3, #0]
  pHeader[33]  = 0x00;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	3321      	adds	r3, #33	@ 0x21
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	701a      	strb	r2, [r3, #0]
  
  /* Write the number of bits per sample -------------------------------------*/
  pHeader[34]  = pWaveFormatStruct->BitPerSample;
 800aa40:	683b      	ldr	r3, [r7, #0]
 800aa42:	8c5a      	ldrh	r2, [r3, #34]	@ 0x22
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	3322      	adds	r3, #34	@ 0x22
 800aa48:	b2d2      	uxtb	r2, r2
 800aa4a:	701a      	strb	r2, [r3, #0]
  pHeader[35]  = 0x00;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	3323      	adds	r3, #35	@ 0x23
 800aa50:	2200      	movs	r2, #0
 800aa52:	701a      	strb	r2, [r3, #0]
  
  /* Write the Data chunk, must be 'data' ------------------------------------*/
  pHeader[36]  = 'd';
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	3324      	adds	r3, #36	@ 0x24
 800aa58:	2264      	movs	r2, #100	@ 0x64
 800aa5a:	701a      	strb	r2, [r3, #0]
  pHeader[37]  = 'a';
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	3325      	adds	r3, #37	@ 0x25
 800aa60:	2261      	movs	r2, #97	@ 0x61
 800aa62:	701a      	strb	r2, [r3, #0]
  pHeader[38]  = 't';
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	3326      	adds	r3, #38	@ 0x26
 800aa68:	2274      	movs	r2, #116	@ 0x74
 800aa6a:	701a      	strb	r2, [r3, #0]
  pHeader[39]  = 'a';
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	3327      	adds	r3, #39	@ 0x27
 800aa70:	2261      	movs	r2, #97	@ 0x61
 800aa72:	701a      	strb	r2, [r3, #0]
  
  /* Write the number of sample data -----------------------------------------*/
  /* This variable will be written back at the end of the recording operation */
  pHeader[40]  = 0x00;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	3328      	adds	r3, #40	@ 0x28
 800aa78:	2200      	movs	r2, #0
 800aa7a:	701a      	strb	r2, [r3, #0]
  pHeader[41]  = 0x4C;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	3329      	adds	r3, #41	@ 0x29
 800aa80:	224c      	movs	r2, #76	@ 0x4c
 800aa82:	701a      	strb	r2, [r3, #0]
  pHeader[42]  = 0x1D;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	332a      	adds	r3, #42	@ 0x2a
 800aa88:	221d      	movs	r2, #29
 800aa8a:	701a      	strb	r2, [r3, #0]
  pHeader[43]  = 0x00;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	332b      	adds	r3, #43	@ 0x2b
 800aa90:	2200      	movs	r2, #0
 800aa92:	701a      	strb	r2, [r3, #0]
  
  /* Return 0 if all operations are OK */
  return 0;
 800aa94:	2300      	movs	r3, #0
}
 800aa96:	4618      	mov	r0, r3
 800aa98:	370c      	adds	r7, #12
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa0:	4770      	bx	lr
	...

0800aaa4 <WavProcess_HeaderUpdate>:
  * @param  pHeader: Header Buffer to be filled
  * @param  pWaveFormatStruct: Pointer to the wave structure to be filled.
  * @retval 0 if passed, !0 if failed.
  */
static uint32_t WavProcess_HeaderUpdate(uint8_t* pHeader, WAVE_FormatTypeDef* pWaveFormatStruct)
{
 800aaa4:	b480      	push	{r7}
 800aaa6:	b083      	sub	sp, #12
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
 800aaac:	6039      	str	r1, [r7, #0]
  /* Write the file length ---------------------------------------------------*/
  /* The sampling time: this value will be written back at the end of the 
     recording operation.  Example: 661500 Bytes = 0x000A17FC, byte[7]=0x00, byte[4]=0xFC */
  pHeader[4] = (uint8_t)(BufferCtl.fptr);
 800aaae:	4b30      	ldr	r3, [pc, #192]	@ (800ab70 <WavProcess_HeaderUpdate+0xcc>)
 800aab0:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800aab4:	f8d3 280c 	ldr.w	r2, [r3, #2060]	@ 0x80c
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	3304      	adds	r3, #4
 800aabc:	b2d2      	uxtb	r2, r2
 800aabe:	701a      	strb	r2, [r3, #0]
  pHeader[5] = (uint8_t)(BufferCtl.fptr >> 8);
 800aac0:	4b2b      	ldr	r3, [pc, #172]	@ (800ab70 <WavProcess_HeaderUpdate+0xcc>)
 800aac2:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800aac6:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800aaca:	0a1a      	lsrs	r2, r3, #8
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	3305      	adds	r3, #5
 800aad0:	b2d2      	uxtb	r2, r2
 800aad2:	701a      	strb	r2, [r3, #0]
  pHeader[6] = (uint8_t)(BufferCtl.fptr >> 16);
 800aad4:	4b26      	ldr	r3, [pc, #152]	@ (800ab70 <WavProcess_HeaderUpdate+0xcc>)
 800aad6:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800aada:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800aade:	0c1a      	lsrs	r2, r3, #16
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	3306      	adds	r3, #6
 800aae4:	b2d2      	uxtb	r2, r2
 800aae6:	701a      	strb	r2, [r3, #0]
  pHeader[7] = (uint8_t)(BufferCtl.fptr >> 24);
 800aae8:	4b21      	ldr	r3, [pc, #132]	@ (800ab70 <WavProcess_HeaderUpdate+0xcc>)
 800aaea:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800aaee:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800aaf2:	0e1a      	lsrs	r2, r3, #24
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	3307      	adds	r3, #7
 800aaf8:	b2d2      	uxtb	r2, r2
 800aafa:	701a      	strb	r2, [r3, #0]
  /* Write the number of sample data -----------------------------------------*/
  /* This variable will be written back at the end of the recording operation */
  BufferCtl.fptr -=44;
 800aafc:	4b1c      	ldr	r3, [pc, #112]	@ (800ab70 <WavProcess_HeaderUpdate+0xcc>)
 800aafe:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800ab02:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800ab06:	3b2c      	subs	r3, #44	@ 0x2c
 800ab08:	4a19      	ldr	r2, [pc, #100]	@ (800ab70 <WavProcess_HeaderUpdate+0xcc>)
 800ab0a:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 800ab0e:	f8c2 380c 	str.w	r3, [r2, #2060]	@ 0x80c
  pHeader[40] = (uint8_t)(BufferCtl.fptr); 
 800ab12:	4b17      	ldr	r3, [pc, #92]	@ (800ab70 <WavProcess_HeaderUpdate+0xcc>)
 800ab14:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800ab18:	f8d3 280c 	ldr.w	r2, [r3, #2060]	@ 0x80c
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	3328      	adds	r3, #40	@ 0x28
 800ab20:	b2d2      	uxtb	r2, r2
 800ab22:	701a      	strb	r2, [r3, #0]
  pHeader[41] = (uint8_t)(BufferCtl.fptr >> 8);
 800ab24:	4b12      	ldr	r3, [pc, #72]	@ (800ab70 <WavProcess_HeaderUpdate+0xcc>)
 800ab26:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800ab2a:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800ab2e:	0a1a      	lsrs	r2, r3, #8
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	3329      	adds	r3, #41	@ 0x29
 800ab34:	b2d2      	uxtb	r2, r2
 800ab36:	701a      	strb	r2, [r3, #0]
  pHeader[42] = (uint8_t)(BufferCtl.fptr >> 16);
 800ab38:	4b0d      	ldr	r3, [pc, #52]	@ (800ab70 <WavProcess_HeaderUpdate+0xcc>)
 800ab3a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800ab3e:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800ab42:	0c1a      	lsrs	r2, r3, #16
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	332a      	adds	r3, #42	@ 0x2a
 800ab48:	b2d2      	uxtb	r2, r2
 800ab4a:	701a      	strb	r2, [r3, #0]
  pHeader[43] = (uint8_t)(BufferCtl.fptr >> 24); 
 800ab4c:	4b08      	ldr	r3, [pc, #32]	@ (800ab70 <WavProcess_HeaderUpdate+0xcc>)
 800ab4e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800ab52:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800ab56:	0e1a      	lsrs	r2, r3, #24
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	332b      	adds	r3, #43	@ 0x2b
 800ab5c:	b2d2      	uxtb	r2, r2
 800ab5e:	701a      	strb	r2, [r3, #0]
  
  /* Return 0 if all operations are OK */
  return 0;
 800ab60:	2300      	movs	r3, #0
}
 800ab62:	4618      	mov	r0, r3
 800ab64:	370c      	adds	r7, #12
 800ab66:	46bd      	mov	sp, r7
 800ab68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6c:	4770      	bx	lr
 800ab6e:	bf00      	nop
 800ab70:	20000f04 	.word	0x20000f04

0800ab74 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800ab78:	4904      	ldr	r1, [pc, #16]	@ (800ab8c <MX_FATFS_Init+0x18>)
 800ab7a:	4805      	ldr	r0, [pc, #20]	@ (800ab90 <MX_FATFS_Init+0x1c>)
 800ab7c:	f002 ff3a 	bl	800d9f4 <FATFS_LinkDriver>
 800ab80:	4603      	mov	r3, r0
 800ab82:	461a      	mov	r2, r3
 800ab84:	4b03      	ldr	r3, [pc, #12]	@ (800ab94 <MX_FATFS_Init+0x20>)
 800ab86:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ab88:	bf00      	nop
 800ab8a:	bd80      	pop	{r7, pc}
 800ab8c:	20005974 	.word	0x20005974
 800ab90:	08013f70 	.word	0x08013f70
 800ab94:	20005970 	.word	0x20005970

0800ab98 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800ab98:	b480      	push	{r7}
 800ab9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800ab9c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800ab9e:	4618      	mov	r0, r3
 800aba0:	46bd      	mov	sp, r7
 800aba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba6:	4770      	bx	lr

0800aba8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b082      	sub	sp, #8
 800abac:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800abae:	2300      	movs	r3, #0
 800abb0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800abb2:	f000 f888 	bl	800acc6 <BSP_SD_IsDetected>
 800abb6:	4603      	mov	r3, r0
 800abb8:	2b01      	cmp	r3, #1
 800abba:	d001      	beq.n	800abc0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800abbc:	2302      	movs	r3, #2
 800abbe:	e005      	b.n	800abcc <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800abc0:	4804      	ldr	r0, [pc, #16]	@ (800abd4 <BSP_SD_Init+0x2c>)
 800abc2:	f7fd f90a 	bl	8007dda <HAL_SD_Init>
 800abc6:	4603      	mov	r3, r0
 800abc8:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800abca:	79fb      	ldrb	r3, [r7, #7]
}
 800abcc:	4618      	mov	r0, r3
 800abce:	3708      	adds	r7, #8
 800abd0:	46bd      	mov	sp, r7
 800abd2:	bd80      	pop	{r7, pc}
 800abd4:	20000adc 	.word	0x20000adc

0800abd8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b086      	sub	sp, #24
 800abdc:	af00      	add	r7, sp, #0
 800abde:	60f8      	str	r0, [r7, #12]
 800abe0:	60b9      	str	r1, [r7, #8]
 800abe2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800abe4:	2300      	movs	r3, #0
 800abe6:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	68ba      	ldr	r2, [r7, #8]
 800abec:	68f9      	ldr	r1, [r7, #12]
 800abee:	4806      	ldr	r0, [pc, #24]	@ (800ac08 <BSP_SD_ReadBlocks_DMA+0x30>)
 800abf0:	f7fd f9ac 	bl	8007f4c <HAL_SD_ReadBlocks_DMA>
 800abf4:	4603      	mov	r3, r0
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d001      	beq.n	800abfe <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800abfa:	2301      	movs	r3, #1
 800abfc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800abfe:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac00:	4618      	mov	r0, r3
 800ac02:	3718      	adds	r7, #24
 800ac04:	46bd      	mov	sp, r7
 800ac06:	bd80      	pop	{r7, pc}
 800ac08:	20000adc 	.word	0x20000adc

0800ac0c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b086      	sub	sp, #24
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	60f8      	str	r0, [r7, #12]
 800ac14:	60b9      	str	r1, [r7, #8]
 800ac16:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800ac18:	2300      	movs	r3, #0
 800ac1a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	68ba      	ldr	r2, [r7, #8]
 800ac20:	68f9      	ldr	r1, [r7, #12]
 800ac22:	4806      	ldr	r0, [pc, #24]	@ (800ac3c <BSP_SD_WriteBlocks_DMA+0x30>)
 800ac24:	f7fd fa74 	bl	8008110 <HAL_SD_WriteBlocks_DMA>
 800ac28:	4603      	mov	r3, r0
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d001      	beq.n	800ac32 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800ac2e:	2301      	movs	r3, #1
 800ac30:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ac32:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac34:	4618      	mov	r0, r3
 800ac36:	3718      	adds	r7, #24
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	bd80      	pop	{r7, pc}
 800ac3c:	20000adc 	.word	0x20000adc

0800ac40 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800ac44:	4805      	ldr	r0, [pc, #20]	@ (800ac5c <BSP_SD_GetCardState+0x1c>)
 800ac46:	f7fd fe99 	bl	800897c <HAL_SD_GetCardState>
 800ac4a:	4603      	mov	r3, r0
 800ac4c:	2b04      	cmp	r3, #4
 800ac4e:	bf14      	ite	ne
 800ac50:	2301      	movne	r3, #1
 800ac52:	2300      	moveq	r3, #0
 800ac54:	b2db      	uxtb	r3, r3
}
 800ac56:	4618      	mov	r0, r3
 800ac58:	bd80      	pop	{r7, pc}
 800ac5a:	bf00      	nop
 800ac5c:	20000adc 	.word	0x20000adc

0800ac60 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b082      	sub	sp, #8
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800ac68:	6879      	ldr	r1, [r7, #4]
 800ac6a:	4803      	ldr	r0, [pc, #12]	@ (800ac78 <BSP_SD_GetCardInfo+0x18>)
 800ac6c:	f7fd fe5a 	bl	8008924 <HAL_SD_GetCardInfo>
}
 800ac70:	bf00      	nop
 800ac72:	3708      	adds	r7, #8
 800ac74:	46bd      	mov	sp, r7
 800ac76:	bd80      	pop	{r7, pc}
 800ac78:	20000adc 	.word	0x20000adc

0800ac7c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b082      	sub	sp, #8
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800ac84:	f000 f818 	bl	800acb8 <BSP_SD_AbortCallback>
}
 800ac88:	bf00      	nop
 800ac8a:	3708      	adds	r7, #8
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	bd80      	pop	{r7, pc}

0800ac90 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b082      	sub	sp, #8
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800ac98:	f000 f9a8 	bl	800afec <BSP_SD_WriteCpltCallback>
}
 800ac9c:	bf00      	nop
 800ac9e:	3708      	adds	r7, #8
 800aca0:	46bd      	mov	sp, r7
 800aca2:	bd80      	pop	{r7, pc}

0800aca4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b082      	sub	sp, #8
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800acac:	f000 f9aa 	bl	800b004 <BSP_SD_ReadCpltCallback>
}
 800acb0:	bf00      	nop
 800acb2:	3708      	adds	r7, #8
 800acb4:	46bd      	mov	sp, r7
 800acb6:	bd80      	pop	{r7, pc}

0800acb8 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800acb8:	b480      	push	{r7}
 800acba:	af00      	add	r7, sp, #0

}
 800acbc:	bf00      	nop
 800acbe:	46bd      	mov	sp, r7
 800acc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc4:	4770      	bx	lr

0800acc6 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800acc6:	b580      	push	{r7, lr}
 800acc8:	b082      	sub	sp, #8
 800acca:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800accc:	2301      	movs	r3, #1
 800acce:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800acd0:	f000 f80c 	bl	800acec <BSP_PlatformIsDetected>
 800acd4:	4603      	mov	r3, r0
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d101      	bne.n	800acde <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800acda:	2300      	movs	r3, #0
 800acdc:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800acde:	79fb      	ldrb	r3, [r7, #7]
 800ace0:	b2db      	uxtb	r3, r3
}
 800ace2:	4618      	mov	r0, r3
 800ace4:	3708      	adds	r7, #8
 800ace6:	46bd      	mov	sp, r7
 800ace8:	bd80      	pop	{r7, pc}
	...

0800acec <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800acec:	b580      	push	{r7, lr}
 800acee:	b082      	sub	sp, #8
 800acf0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800acf2:	2301      	movs	r3, #1
 800acf4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800acf6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800acfa:	4806      	ldr	r0, [pc, #24]	@ (800ad14 <BSP_PlatformIsDetected+0x28>)
 800acfc:	f7fa fb74 	bl	80053e8 <HAL_GPIO_ReadPin>
 800ad00:	4603      	mov	r3, r0
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d001      	beq.n	800ad0a <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800ad06:	2300      	movs	r3, #0
 800ad08:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800ad0a:	79fb      	ldrb	r3, [r7, #7]
}
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	3708      	adds	r7, #8
 800ad10:	46bd      	mov	sp, r7
 800ad12:	bd80      	pop	{r7, pc}
 800ad14:	40020800 	.word	0x40020800

0800ad18 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b084      	sub	sp, #16
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800ad20:	f7f9 faf4 	bl	800430c <HAL_GetTick>
 800ad24:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800ad26:	e006      	b.n	800ad36 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ad28:	f7ff ff8a 	bl	800ac40 <BSP_SD_GetCardState>
 800ad2c:	4603      	mov	r3, r0
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d101      	bne.n	800ad36 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800ad32:	2300      	movs	r3, #0
 800ad34:	e009      	b.n	800ad4a <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800ad36:	f7f9 fae9 	bl	800430c <HAL_GetTick>
 800ad3a:	4602      	mov	r2, r0
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	1ad3      	subs	r3, r2, r3
 800ad40:	687a      	ldr	r2, [r7, #4]
 800ad42:	429a      	cmp	r2, r3
 800ad44:	d8f0      	bhi.n	800ad28 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800ad46:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	3710      	adds	r7, #16
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	bd80      	pop	{r7, pc}
	...

0800ad54 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b082      	sub	sp, #8
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	4603      	mov	r3, r0
 800ad5c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800ad5e:	4b0b      	ldr	r3, [pc, #44]	@ (800ad8c <SD_CheckStatus+0x38>)
 800ad60:	2201      	movs	r2, #1
 800ad62:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800ad64:	f7ff ff6c 	bl	800ac40 <BSP_SD_GetCardState>
 800ad68:	4603      	mov	r3, r0
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d107      	bne.n	800ad7e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800ad6e:	4b07      	ldr	r3, [pc, #28]	@ (800ad8c <SD_CheckStatus+0x38>)
 800ad70:	781b      	ldrb	r3, [r3, #0]
 800ad72:	b2db      	uxtb	r3, r3
 800ad74:	f023 0301 	bic.w	r3, r3, #1
 800ad78:	b2da      	uxtb	r2, r3
 800ad7a:	4b04      	ldr	r3, [pc, #16]	@ (800ad8c <SD_CheckStatus+0x38>)
 800ad7c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800ad7e:	4b03      	ldr	r3, [pc, #12]	@ (800ad8c <SD_CheckStatus+0x38>)
 800ad80:	781b      	ldrb	r3, [r3, #0]
 800ad82:	b2db      	uxtb	r3, r3
}
 800ad84:	4618      	mov	r0, r3
 800ad86:	3708      	adds	r7, #8
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	bd80      	pop	{r7, pc}
 800ad8c:	20000048 	.word	0x20000048

0800ad90 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b082      	sub	sp, #8
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	4603      	mov	r3, r0
 800ad98:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800ad9a:	f7ff ff05 	bl	800aba8 <BSP_SD_Init>
 800ad9e:	4603      	mov	r3, r0
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d107      	bne.n	800adb4 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800ada4:	79fb      	ldrb	r3, [r7, #7]
 800ada6:	4618      	mov	r0, r3
 800ada8:	f7ff ffd4 	bl	800ad54 <SD_CheckStatus>
 800adac:	4603      	mov	r3, r0
 800adae:	461a      	mov	r2, r3
 800adb0:	4b04      	ldr	r3, [pc, #16]	@ (800adc4 <SD_initialize+0x34>)
 800adb2:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800adb4:	4b03      	ldr	r3, [pc, #12]	@ (800adc4 <SD_initialize+0x34>)
 800adb6:	781b      	ldrb	r3, [r3, #0]
 800adb8:	b2db      	uxtb	r3, r3
}
 800adba:	4618      	mov	r0, r3
 800adbc:	3708      	adds	r7, #8
 800adbe:	46bd      	mov	sp, r7
 800adc0:	bd80      	pop	{r7, pc}
 800adc2:	bf00      	nop
 800adc4:	20000048 	.word	0x20000048

0800adc8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b082      	sub	sp, #8
 800adcc:	af00      	add	r7, sp, #0
 800adce:	4603      	mov	r3, r0
 800add0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800add2:	79fb      	ldrb	r3, [r7, #7]
 800add4:	4618      	mov	r0, r3
 800add6:	f7ff ffbd 	bl	800ad54 <SD_CheckStatus>
 800adda:	4603      	mov	r3, r0
}
 800addc:	4618      	mov	r0, r3
 800adde:	3708      	adds	r7, #8
 800ade0:	46bd      	mov	sp, r7
 800ade2:	bd80      	pop	{r7, pc}

0800ade4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b086      	sub	sp, #24
 800ade8:	af00      	add	r7, sp, #0
 800adea:	60b9      	str	r1, [r7, #8]
 800adec:	607a      	str	r2, [r7, #4]
 800adee:	603b      	str	r3, [r7, #0]
 800adf0:	4603      	mov	r3, r0
 800adf2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800adf4:	2301      	movs	r3, #1
 800adf6:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800adf8:	f247 5030 	movw	r0, #30000	@ 0x7530
 800adfc:	f7ff ff8c 	bl	800ad18 <SD_CheckStatusWithTimeout>
 800ae00:	4603      	mov	r3, r0
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	da01      	bge.n	800ae0a <SD_read+0x26>
  {
    return res;
 800ae06:	7dfb      	ldrb	r3, [r7, #23]
 800ae08:	e03b      	b.n	800ae82 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800ae0a:	683a      	ldr	r2, [r7, #0]
 800ae0c:	6879      	ldr	r1, [r7, #4]
 800ae0e:	68b8      	ldr	r0, [r7, #8]
 800ae10:	f7ff fee2 	bl	800abd8 <BSP_SD_ReadBlocks_DMA>
 800ae14:	4603      	mov	r3, r0
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d132      	bne.n	800ae80 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800ae1a:	4b1c      	ldr	r3, [pc, #112]	@ (800ae8c <SD_read+0xa8>)
 800ae1c:	2200      	movs	r2, #0
 800ae1e:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800ae20:	f7f9 fa74 	bl	800430c <HAL_GetTick>
 800ae24:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800ae26:	bf00      	nop
 800ae28:	4b18      	ldr	r3, [pc, #96]	@ (800ae8c <SD_read+0xa8>)
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d108      	bne.n	800ae42 <SD_read+0x5e>
 800ae30:	f7f9 fa6c 	bl	800430c <HAL_GetTick>
 800ae34:	4602      	mov	r2, r0
 800ae36:	693b      	ldr	r3, [r7, #16]
 800ae38:	1ad3      	subs	r3, r2, r3
 800ae3a:	f247 522f 	movw	r2, #29999	@ 0x752f
 800ae3e:	4293      	cmp	r3, r2
 800ae40:	d9f2      	bls.n	800ae28 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800ae42:	4b12      	ldr	r3, [pc, #72]	@ (800ae8c <SD_read+0xa8>)
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d102      	bne.n	800ae50 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800ae4a:	2301      	movs	r3, #1
 800ae4c:	75fb      	strb	r3, [r7, #23]
 800ae4e:	e017      	b.n	800ae80 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800ae50:	4b0e      	ldr	r3, [pc, #56]	@ (800ae8c <SD_read+0xa8>)
 800ae52:	2200      	movs	r2, #0
 800ae54:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800ae56:	f7f9 fa59 	bl	800430c <HAL_GetTick>
 800ae5a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800ae5c:	e007      	b.n	800ae6e <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ae5e:	f7ff feef 	bl	800ac40 <BSP_SD_GetCardState>
 800ae62:	4603      	mov	r3, r0
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d102      	bne.n	800ae6e <SD_read+0x8a>
          {
            res = RES_OK;
 800ae68:	2300      	movs	r3, #0
 800ae6a:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800ae6c:	e008      	b.n	800ae80 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800ae6e:	f7f9 fa4d 	bl	800430c <HAL_GetTick>
 800ae72:	4602      	mov	r2, r0
 800ae74:	693b      	ldr	r3, [r7, #16]
 800ae76:	1ad3      	subs	r3, r2, r3
 800ae78:	f247 522f 	movw	r2, #29999	@ 0x752f
 800ae7c:	4293      	cmp	r3, r2
 800ae7e:	d9ee      	bls.n	800ae5e <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800ae80:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae82:	4618      	mov	r0, r3
 800ae84:	3718      	adds	r7, #24
 800ae86:	46bd      	mov	sp, r7
 800ae88:	bd80      	pop	{r7, pc}
 800ae8a:	bf00      	nop
 800ae8c:	20005bac 	.word	0x20005bac

0800ae90 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b086      	sub	sp, #24
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	60b9      	str	r1, [r7, #8]
 800ae98:	607a      	str	r2, [r7, #4]
 800ae9a:	603b      	str	r3, [r7, #0]
 800ae9c:	4603      	mov	r3, r0
 800ae9e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800aea0:	2301      	movs	r3, #1
 800aea2:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800aea4:	4b24      	ldr	r3, [pc, #144]	@ (800af38 <SD_write+0xa8>)
 800aea6:	2200      	movs	r2, #0
 800aea8:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800aeaa:	f247 5030 	movw	r0, #30000	@ 0x7530
 800aeae:	f7ff ff33 	bl	800ad18 <SD_CheckStatusWithTimeout>
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	da01      	bge.n	800aebc <SD_write+0x2c>
  {
    return res;
 800aeb8:	7dfb      	ldrb	r3, [r7, #23]
 800aeba:	e038      	b.n	800af2e <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800aebc:	683a      	ldr	r2, [r7, #0]
 800aebe:	6879      	ldr	r1, [r7, #4]
 800aec0:	68b8      	ldr	r0, [r7, #8]
 800aec2:	f7ff fea3 	bl	800ac0c <BSP_SD_WriteBlocks_DMA>
 800aec6:	4603      	mov	r3, r0
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d12f      	bne.n	800af2c <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800aecc:	f7f9 fa1e 	bl	800430c <HAL_GetTick>
 800aed0:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800aed2:	bf00      	nop
 800aed4:	4b18      	ldr	r3, [pc, #96]	@ (800af38 <SD_write+0xa8>)
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d108      	bne.n	800aeee <SD_write+0x5e>
 800aedc:	f7f9 fa16 	bl	800430c <HAL_GetTick>
 800aee0:	4602      	mov	r2, r0
 800aee2:	693b      	ldr	r3, [r7, #16]
 800aee4:	1ad3      	subs	r3, r2, r3
 800aee6:	f247 522f 	movw	r2, #29999	@ 0x752f
 800aeea:	4293      	cmp	r3, r2
 800aeec:	d9f2      	bls.n	800aed4 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800aeee:	4b12      	ldr	r3, [pc, #72]	@ (800af38 <SD_write+0xa8>)
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d102      	bne.n	800aefc <SD_write+0x6c>
      {
        res = RES_ERROR;
 800aef6:	2301      	movs	r3, #1
 800aef8:	75fb      	strb	r3, [r7, #23]
 800aefa:	e017      	b.n	800af2c <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800aefc:	4b0e      	ldr	r3, [pc, #56]	@ (800af38 <SD_write+0xa8>)
 800aefe:	2200      	movs	r2, #0
 800af00:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800af02:	f7f9 fa03 	bl	800430c <HAL_GetTick>
 800af06:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800af08:	e007      	b.n	800af1a <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800af0a:	f7ff fe99 	bl	800ac40 <BSP_SD_GetCardState>
 800af0e:	4603      	mov	r3, r0
 800af10:	2b00      	cmp	r3, #0
 800af12:	d102      	bne.n	800af1a <SD_write+0x8a>
          {
            res = RES_OK;
 800af14:	2300      	movs	r3, #0
 800af16:	75fb      	strb	r3, [r7, #23]
            break;
 800af18:	e008      	b.n	800af2c <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800af1a:	f7f9 f9f7 	bl	800430c <HAL_GetTick>
 800af1e:	4602      	mov	r2, r0
 800af20:	693b      	ldr	r3, [r7, #16]
 800af22:	1ad3      	subs	r3, r2, r3
 800af24:	f247 522f 	movw	r2, #29999	@ 0x752f
 800af28:	4293      	cmp	r3, r2
 800af2a:	d9ee      	bls.n	800af0a <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800af2c:	7dfb      	ldrb	r3, [r7, #23]
}
 800af2e:	4618      	mov	r0, r3
 800af30:	3718      	adds	r7, #24
 800af32:	46bd      	mov	sp, r7
 800af34:	bd80      	pop	{r7, pc}
 800af36:	bf00      	nop
 800af38:	20005ba8 	.word	0x20005ba8

0800af3c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b08c      	sub	sp, #48	@ 0x30
 800af40:	af00      	add	r7, sp, #0
 800af42:	4603      	mov	r3, r0
 800af44:	603a      	str	r2, [r7, #0]
 800af46:	71fb      	strb	r3, [r7, #7]
 800af48:	460b      	mov	r3, r1
 800af4a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800af4c:	2301      	movs	r3, #1
 800af4e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800af52:	4b25      	ldr	r3, [pc, #148]	@ (800afe8 <SD_ioctl+0xac>)
 800af54:	781b      	ldrb	r3, [r3, #0]
 800af56:	b2db      	uxtb	r3, r3
 800af58:	f003 0301 	and.w	r3, r3, #1
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d001      	beq.n	800af64 <SD_ioctl+0x28>
 800af60:	2303      	movs	r3, #3
 800af62:	e03c      	b.n	800afde <SD_ioctl+0xa2>

  switch (cmd)
 800af64:	79bb      	ldrb	r3, [r7, #6]
 800af66:	2b03      	cmp	r3, #3
 800af68:	d834      	bhi.n	800afd4 <SD_ioctl+0x98>
 800af6a:	a201      	add	r2, pc, #4	@ (adr r2, 800af70 <SD_ioctl+0x34>)
 800af6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af70:	0800af81 	.word	0x0800af81
 800af74:	0800af89 	.word	0x0800af89
 800af78:	0800afa1 	.word	0x0800afa1
 800af7c:	0800afbb 	.word	0x0800afbb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800af80:	2300      	movs	r3, #0
 800af82:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800af86:	e028      	b.n	800afda <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800af88:	f107 030c 	add.w	r3, r7, #12
 800af8c:	4618      	mov	r0, r3
 800af8e:	f7ff fe67 	bl	800ac60 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800af92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800af94:	683b      	ldr	r3, [r7, #0]
 800af96:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800af98:	2300      	movs	r3, #0
 800af9a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800af9e:	e01c      	b.n	800afda <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800afa0:	f107 030c 	add.w	r3, r7, #12
 800afa4:	4618      	mov	r0, r3
 800afa6:	f7ff fe5b 	bl	800ac60 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800afaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afac:	b29a      	uxth	r2, r3
 800afae:	683b      	ldr	r3, [r7, #0]
 800afb0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800afb2:	2300      	movs	r3, #0
 800afb4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800afb8:	e00f      	b.n	800afda <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800afba:	f107 030c 	add.w	r3, r7, #12
 800afbe:	4618      	mov	r0, r3
 800afc0:	f7ff fe4e 	bl	800ac60 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800afc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afc6:	0a5a      	lsrs	r2, r3, #9
 800afc8:	683b      	ldr	r3, [r7, #0]
 800afca:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800afcc:	2300      	movs	r3, #0
 800afce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800afd2:	e002      	b.n	800afda <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800afd4:	2304      	movs	r3, #4
 800afd6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800afda:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800afde:	4618      	mov	r0, r3
 800afe0:	3730      	adds	r7, #48	@ 0x30
 800afe2:	46bd      	mov	sp, r7
 800afe4:	bd80      	pop	{r7, pc}
 800afe6:	bf00      	nop
 800afe8:	20000048 	.word	0x20000048

0800afec <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800afec:	b480      	push	{r7}
 800afee:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800aff0:	4b03      	ldr	r3, [pc, #12]	@ (800b000 <BSP_SD_WriteCpltCallback+0x14>)
 800aff2:	2201      	movs	r2, #1
 800aff4:	601a      	str	r2, [r3, #0]
}
 800aff6:	bf00      	nop
 800aff8:	46bd      	mov	sp, r7
 800affa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affe:	4770      	bx	lr
 800b000:	20005ba8 	.word	0x20005ba8

0800b004 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800b004:	b480      	push	{r7}
 800b006:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800b008:	4b03      	ldr	r3, [pc, #12]	@ (800b018 <BSP_SD_ReadCpltCallback+0x14>)
 800b00a:	2201      	movs	r2, #1
 800b00c:	601a      	str	r2, [r3, #0]
}
 800b00e:	bf00      	nop
 800b010:	46bd      	mov	sp, r7
 800b012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b016:	4770      	bx	lr
 800b018:	20005bac 	.word	0x20005bac

0800b01c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b084      	sub	sp, #16
 800b020:	af00      	add	r7, sp, #0
 800b022:	4603      	mov	r3, r0
 800b024:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b026:	79fb      	ldrb	r3, [r7, #7]
 800b028:	4a08      	ldr	r2, [pc, #32]	@ (800b04c <disk_status+0x30>)
 800b02a:	009b      	lsls	r3, r3, #2
 800b02c:	4413      	add	r3, r2
 800b02e:	685b      	ldr	r3, [r3, #4]
 800b030:	685b      	ldr	r3, [r3, #4]
 800b032:	79fa      	ldrb	r2, [r7, #7]
 800b034:	4905      	ldr	r1, [pc, #20]	@ (800b04c <disk_status+0x30>)
 800b036:	440a      	add	r2, r1
 800b038:	7a12      	ldrb	r2, [r2, #8]
 800b03a:	4610      	mov	r0, r2
 800b03c:	4798      	blx	r3
 800b03e:	4603      	mov	r3, r0
 800b040:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b042:	7bfb      	ldrb	r3, [r7, #15]
}
 800b044:	4618      	mov	r0, r3
 800b046:	3710      	adds	r7, #16
 800b048:	46bd      	mov	sp, r7
 800b04a:	bd80      	pop	{r7, pc}
 800b04c:	20005bd8 	.word	0x20005bd8

0800b050 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b050:	b580      	push	{r7, lr}
 800b052:	b084      	sub	sp, #16
 800b054:	af00      	add	r7, sp, #0
 800b056:	4603      	mov	r3, r0
 800b058:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b05a:	2300      	movs	r3, #0
 800b05c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b05e:	79fb      	ldrb	r3, [r7, #7]
 800b060:	4a0d      	ldr	r2, [pc, #52]	@ (800b098 <disk_initialize+0x48>)
 800b062:	5cd3      	ldrb	r3, [r2, r3]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d111      	bne.n	800b08c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800b068:	79fb      	ldrb	r3, [r7, #7]
 800b06a:	4a0b      	ldr	r2, [pc, #44]	@ (800b098 <disk_initialize+0x48>)
 800b06c:	2101      	movs	r1, #1
 800b06e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b070:	79fb      	ldrb	r3, [r7, #7]
 800b072:	4a09      	ldr	r2, [pc, #36]	@ (800b098 <disk_initialize+0x48>)
 800b074:	009b      	lsls	r3, r3, #2
 800b076:	4413      	add	r3, r2
 800b078:	685b      	ldr	r3, [r3, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	79fa      	ldrb	r2, [r7, #7]
 800b07e:	4906      	ldr	r1, [pc, #24]	@ (800b098 <disk_initialize+0x48>)
 800b080:	440a      	add	r2, r1
 800b082:	7a12      	ldrb	r2, [r2, #8]
 800b084:	4610      	mov	r0, r2
 800b086:	4798      	blx	r3
 800b088:	4603      	mov	r3, r0
 800b08a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800b08c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b08e:	4618      	mov	r0, r3
 800b090:	3710      	adds	r7, #16
 800b092:	46bd      	mov	sp, r7
 800b094:	bd80      	pop	{r7, pc}
 800b096:	bf00      	nop
 800b098:	20005bd8 	.word	0x20005bd8

0800b09c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b09c:	b590      	push	{r4, r7, lr}
 800b09e:	b087      	sub	sp, #28
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	60b9      	str	r1, [r7, #8]
 800b0a4:	607a      	str	r2, [r7, #4]
 800b0a6:	603b      	str	r3, [r7, #0]
 800b0a8:	4603      	mov	r3, r0
 800b0aa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b0ac:	7bfb      	ldrb	r3, [r7, #15]
 800b0ae:	4a0a      	ldr	r2, [pc, #40]	@ (800b0d8 <disk_read+0x3c>)
 800b0b0:	009b      	lsls	r3, r3, #2
 800b0b2:	4413      	add	r3, r2
 800b0b4:	685b      	ldr	r3, [r3, #4]
 800b0b6:	689c      	ldr	r4, [r3, #8]
 800b0b8:	7bfb      	ldrb	r3, [r7, #15]
 800b0ba:	4a07      	ldr	r2, [pc, #28]	@ (800b0d8 <disk_read+0x3c>)
 800b0bc:	4413      	add	r3, r2
 800b0be:	7a18      	ldrb	r0, [r3, #8]
 800b0c0:	683b      	ldr	r3, [r7, #0]
 800b0c2:	687a      	ldr	r2, [r7, #4]
 800b0c4:	68b9      	ldr	r1, [r7, #8]
 800b0c6:	47a0      	blx	r4
 800b0c8:	4603      	mov	r3, r0
 800b0ca:	75fb      	strb	r3, [r7, #23]
  return res;
 800b0cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	371c      	adds	r7, #28
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	bd90      	pop	{r4, r7, pc}
 800b0d6:	bf00      	nop
 800b0d8:	20005bd8 	.word	0x20005bd8

0800b0dc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b0dc:	b590      	push	{r4, r7, lr}
 800b0de:	b087      	sub	sp, #28
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	60b9      	str	r1, [r7, #8]
 800b0e4:	607a      	str	r2, [r7, #4]
 800b0e6:	603b      	str	r3, [r7, #0]
 800b0e8:	4603      	mov	r3, r0
 800b0ea:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b0ec:	7bfb      	ldrb	r3, [r7, #15]
 800b0ee:	4a0a      	ldr	r2, [pc, #40]	@ (800b118 <disk_write+0x3c>)
 800b0f0:	009b      	lsls	r3, r3, #2
 800b0f2:	4413      	add	r3, r2
 800b0f4:	685b      	ldr	r3, [r3, #4]
 800b0f6:	68dc      	ldr	r4, [r3, #12]
 800b0f8:	7bfb      	ldrb	r3, [r7, #15]
 800b0fa:	4a07      	ldr	r2, [pc, #28]	@ (800b118 <disk_write+0x3c>)
 800b0fc:	4413      	add	r3, r2
 800b0fe:	7a18      	ldrb	r0, [r3, #8]
 800b100:	683b      	ldr	r3, [r7, #0]
 800b102:	687a      	ldr	r2, [r7, #4]
 800b104:	68b9      	ldr	r1, [r7, #8]
 800b106:	47a0      	blx	r4
 800b108:	4603      	mov	r3, r0
 800b10a:	75fb      	strb	r3, [r7, #23]
  return res;
 800b10c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b10e:	4618      	mov	r0, r3
 800b110:	371c      	adds	r7, #28
 800b112:	46bd      	mov	sp, r7
 800b114:	bd90      	pop	{r4, r7, pc}
 800b116:	bf00      	nop
 800b118:	20005bd8 	.word	0x20005bd8

0800b11c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b084      	sub	sp, #16
 800b120:	af00      	add	r7, sp, #0
 800b122:	4603      	mov	r3, r0
 800b124:	603a      	str	r2, [r7, #0]
 800b126:	71fb      	strb	r3, [r7, #7]
 800b128:	460b      	mov	r3, r1
 800b12a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b12c:	79fb      	ldrb	r3, [r7, #7]
 800b12e:	4a09      	ldr	r2, [pc, #36]	@ (800b154 <disk_ioctl+0x38>)
 800b130:	009b      	lsls	r3, r3, #2
 800b132:	4413      	add	r3, r2
 800b134:	685b      	ldr	r3, [r3, #4]
 800b136:	691b      	ldr	r3, [r3, #16]
 800b138:	79fa      	ldrb	r2, [r7, #7]
 800b13a:	4906      	ldr	r1, [pc, #24]	@ (800b154 <disk_ioctl+0x38>)
 800b13c:	440a      	add	r2, r1
 800b13e:	7a10      	ldrb	r0, [r2, #8]
 800b140:	79b9      	ldrb	r1, [r7, #6]
 800b142:	683a      	ldr	r2, [r7, #0]
 800b144:	4798      	blx	r3
 800b146:	4603      	mov	r3, r0
 800b148:	73fb      	strb	r3, [r7, #15]
  return res;
 800b14a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b14c:	4618      	mov	r0, r3
 800b14e:	3710      	adds	r7, #16
 800b150:	46bd      	mov	sp, r7
 800b152:	bd80      	pop	{r7, pc}
 800b154:	20005bd8 	.word	0x20005bd8

0800b158 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b158:	b480      	push	{r7}
 800b15a:	b085      	sub	sp, #20
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	3301      	adds	r3, #1
 800b164:	781b      	ldrb	r3, [r3, #0]
 800b166:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b168:	89fb      	ldrh	r3, [r7, #14]
 800b16a:	021b      	lsls	r3, r3, #8
 800b16c:	b21a      	sxth	r2, r3
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	781b      	ldrb	r3, [r3, #0]
 800b172:	b21b      	sxth	r3, r3
 800b174:	4313      	orrs	r3, r2
 800b176:	b21b      	sxth	r3, r3
 800b178:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b17a:	89fb      	ldrh	r3, [r7, #14]
}
 800b17c:	4618      	mov	r0, r3
 800b17e:	3714      	adds	r7, #20
 800b180:	46bd      	mov	sp, r7
 800b182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b186:	4770      	bx	lr

0800b188 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b188:	b480      	push	{r7}
 800b18a:	b085      	sub	sp, #20
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	3303      	adds	r3, #3
 800b194:	781b      	ldrb	r3, [r3, #0]
 800b196:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	021b      	lsls	r3, r3, #8
 800b19c:	687a      	ldr	r2, [r7, #4]
 800b19e:	3202      	adds	r2, #2
 800b1a0:	7812      	ldrb	r2, [r2, #0]
 800b1a2:	4313      	orrs	r3, r2
 800b1a4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	021b      	lsls	r3, r3, #8
 800b1aa:	687a      	ldr	r2, [r7, #4]
 800b1ac:	3201      	adds	r2, #1
 800b1ae:	7812      	ldrb	r2, [r2, #0]
 800b1b0:	4313      	orrs	r3, r2
 800b1b2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	021b      	lsls	r3, r3, #8
 800b1b8:	687a      	ldr	r2, [r7, #4]
 800b1ba:	7812      	ldrb	r2, [r2, #0]
 800b1bc:	4313      	orrs	r3, r2
 800b1be:	60fb      	str	r3, [r7, #12]
	return rv;
 800b1c0:	68fb      	ldr	r3, [r7, #12]
}
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	3714      	adds	r7, #20
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1cc:	4770      	bx	lr

0800b1ce <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b1ce:	b480      	push	{r7}
 800b1d0:	b083      	sub	sp, #12
 800b1d2:	af00      	add	r7, sp, #0
 800b1d4:	6078      	str	r0, [r7, #4]
 800b1d6:	460b      	mov	r3, r1
 800b1d8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	1c5a      	adds	r2, r3, #1
 800b1de:	607a      	str	r2, [r7, #4]
 800b1e0:	887a      	ldrh	r2, [r7, #2]
 800b1e2:	b2d2      	uxtb	r2, r2
 800b1e4:	701a      	strb	r2, [r3, #0]
 800b1e6:	887b      	ldrh	r3, [r7, #2]
 800b1e8:	0a1b      	lsrs	r3, r3, #8
 800b1ea:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	1c5a      	adds	r2, r3, #1
 800b1f0:	607a      	str	r2, [r7, #4]
 800b1f2:	887a      	ldrh	r2, [r7, #2]
 800b1f4:	b2d2      	uxtb	r2, r2
 800b1f6:	701a      	strb	r2, [r3, #0]
}
 800b1f8:	bf00      	nop
 800b1fa:	370c      	adds	r7, #12
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b202:	4770      	bx	lr

0800b204 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800b204:	b480      	push	{r7}
 800b206:	b083      	sub	sp, #12
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
 800b20c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	1c5a      	adds	r2, r3, #1
 800b212:	607a      	str	r2, [r7, #4]
 800b214:	683a      	ldr	r2, [r7, #0]
 800b216:	b2d2      	uxtb	r2, r2
 800b218:	701a      	strb	r2, [r3, #0]
 800b21a:	683b      	ldr	r3, [r7, #0]
 800b21c:	0a1b      	lsrs	r3, r3, #8
 800b21e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	1c5a      	adds	r2, r3, #1
 800b224:	607a      	str	r2, [r7, #4]
 800b226:	683a      	ldr	r2, [r7, #0]
 800b228:	b2d2      	uxtb	r2, r2
 800b22a:	701a      	strb	r2, [r3, #0]
 800b22c:	683b      	ldr	r3, [r7, #0]
 800b22e:	0a1b      	lsrs	r3, r3, #8
 800b230:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	1c5a      	adds	r2, r3, #1
 800b236:	607a      	str	r2, [r7, #4]
 800b238:	683a      	ldr	r2, [r7, #0]
 800b23a:	b2d2      	uxtb	r2, r2
 800b23c:	701a      	strb	r2, [r3, #0]
 800b23e:	683b      	ldr	r3, [r7, #0]
 800b240:	0a1b      	lsrs	r3, r3, #8
 800b242:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	1c5a      	adds	r2, r3, #1
 800b248:	607a      	str	r2, [r7, #4]
 800b24a:	683a      	ldr	r2, [r7, #0]
 800b24c:	b2d2      	uxtb	r2, r2
 800b24e:	701a      	strb	r2, [r3, #0]
}
 800b250:	bf00      	nop
 800b252:	370c      	adds	r7, #12
 800b254:	46bd      	mov	sp, r7
 800b256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25a:	4770      	bx	lr

0800b25c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800b25c:	b480      	push	{r7}
 800b25e:	b087      	sub	sp, #28
 800b260:	af00      	add	r7, sp, #0
 800b262:	60f8      	str	r0, [r7, #12]
 800b264:	60b9      	str	r1, [r7, #8]
 800b266:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800b26c:	68bb      	ldr	r3, [r7, #8]
 800b26e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d00d      	beq.n	800b292 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800b276:	693a      	ldr	r2, [r7, #16]
 800b278:	1c53      	adds	r3, r2, #1
 800b27a:	613b      	str	r3, [r7, #16]
 800b27c:	697b      	ldr	r3, [r7, #20]
 800b27e:	1c59      	adds	r1, r3, #1
 800b280:	6179      	str	r1, [r7, #20]
 800b282:	7812      	ldrb	r2, [r2, #0]
 800b284:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	3b01      	subs	r3, #1
 800b28a:	607b      	str	r3, [r7, #4]
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d1f1      	bne.n	800b276 <mem_cpy+0x1a>
	}
}
 800b292:	bf00      	nop
 800b294:	371c      	adds	r7, #28
 800b296:	46bd      	mov	sp, r7
 800b298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29c:	4770      	bx	lr

0800b29e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b29e:	b480      	push	{r7}
 800b2a0:	b087      	sub	sp, #28
 800b2a2:	af00      	add	r7, sp, #0
 800b2a4:	60f8      	str	r0, [r7, #12]
 800b2a6:	60b9      	str	r1, [r7, #8]
 800b2a8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800b2ae:	697b      	ldr	r3, [r7, #20]
 800b2b0:	1c5a      	adds	r2, r3, #1
 800b2b2:	617a      	str	r2, [r7, #20]
 800b2b4:	68ba      	ldr	r2, [r7, #8]
 800b2b6:	b2d2      	uxtb	r2, r2
 800b2b8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	3b01      	subs	r3, #1
 800b2be:	607b      	str	r3, [r7, #4]
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d1f3      	bne.n	800b2ae <mem_set+0x10>
}
 800b2c6:	bf00      	nop
 800b2c8:	bf00      	nop
 800b2ca:	371c      	adds	r7, #28
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d2:	4770      	bx	lr

0800b2d4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800b2d4:	b480      	push	{r7}
 800b2d6:	b089      	sub	sp, #36	@ 0x24
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	60f8      	str	r0, [r7, #12]
 800b2dc:	60b9      	str	r1, [r7, #8]
 800b2de:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	61fb      	str	r3, [r7, #28]
 800b2e4:	68bb      	ldr	r3, [r7, #8]
 800b2e6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800b2ec:	69fb      	ldr	r3, [r7, #28]
 800b2ee:	1c5a      	adds	r2, r3, #1
 800b2f0:	61fa      	str	r2, [r7, #28]
 800b2f2:	781b      	ldrb	r3, [r3, #0]
 800b2f4:	4619      	mov	r1, r3
 800b2f6:	69bb      	ldr	r3, [r7, #24]
 800b2f8:	1c5a      	adds	r2, r3, #1
 800b2fa:	61ba      	str	r2, [r7, #24]
 800b2fc:	781b      	ldrb	r3, [r3, #0]
 800b2fe:	1acb      	subs	r3, r1, r3
 800b300:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	3b01      	subs	r3, #1
 800b306:	607b      	str	r3, [r7, #4]
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d002      	beq.n	800b314 <mem_cmp+0x40>
 800b30e:	697b      	ldr	r3, [r7, #20]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d0eb      	beq.n	800b2ec <mem_cmp+0x18>

	return r;
 800b314:	697b      	ldr	r3, [r7, #20]
}
 800b316:	4618      	mov	r0, r3
 800b318:	3724      	adds	r7, #36	@ 0x24
 800b31a:	46bd      	mov	sp, r7
 800b31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b320:	4770      	bx	lr

0800b322 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800b322:	b480      	push	{r7}
 800b324:	b083      	sub	sp, #12
 800b326:	af00      	add	r7, sp, #0
 800b328:	6078      	str	r0, [r7, #4]
 800b32a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b32c:	e002      	b.n	800b334 <chk_chr+0x12>
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	3301      	adds	r3, #1
 800b332:	607b      	str	r3, [r7, #4]
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	781b      	ldrb	r3, [r3, #0]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d005      	beq.n	800b348 <chk_chr+0x26>
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	781b      	ldrb	r3, [r3, #0]
 800b340:	461a      	mov	r2, r3
 800b342:	683b      	ldr	r3, [r7, #0]
 800b344:	4293      	cmp	r3, r2
 800b346:	d1f2      	bne.n	800b32e <chk_chr+0xc>
	return *str;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	781b      	ldrb	r3, [r3, #0]
}
 800b34c:	4618      	mov	r0, r3
 800b34e:	370c      	adds	r7, #12
 800b350:	46bd      	mov	sp, r7
 800b352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b356:	4770      	bx	lr

0800b358 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b358:	b480      	push	{r7}
 800b35a:	b085      	sub	sp, #20
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
 800b360:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b362:	2300      	movs	r3, #0
 800b364:	60bb      	str	r3, [r7, #8]
 800b366:	68bb      	ldr	r3, [r7, #8]
 800b368:	60fb      	str	r3, [r7, #12]
 800b36a:	e029      	b.n	800b3c0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800b36c:	4a27      	ldr	r2, [pc, #156]	@ (800b40c <chk_lock+0xb4>)
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	011b      	lsls	r3, r3, #4
 800b372:	4413      	add	r3, r2
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d01d      	beq.n	800b3b6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b37a:	4a24      	ldr	r2, [pc, #144]	@ (800b40c <chk_lock+0xb4>)
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	011b      	lsls	r3, r3, #4
 800b380:	4413      	add	r3, r2
 800b382:	681a      	ldr	r2, [r3, #0]
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	429a      	cmp	r2, r3
 800b38a:	d116      	bne.n	800b3ba <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800b38c:	4a1f      	ldr	r2, [pc, #124]	@ (800b40c <chk_lock+0xb4>)
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	011b      	lsls	r3, r3, #4
 800b392:	4413      	add	r3, r2
 800b394:	3304      	adds	r3, #4
 800b396:	681a      	ldr	r2, [r3, #0]
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b39c:	429a      	cmp	r2, r3
 800b39e:	d10c      	bne.n	800b3ba <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b3a0:	4a1a      	ldr	r2, [pc, #104]	@ (800b40c <chk_lock+0xb4>)
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	011b      	lsls	r3, r3, #4
 800b3a6:	4413      	add	r3, r2
 800b3a8:	3308      	adds	r3, #8
 800b3aa:	681a      	ldr	r2, [r3, #0]
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800b3b0:	429a      	cmp	r2, r3
 800b3b2:	d102      	bne.n	800b3ba <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b3b4:	e007      	b.n	800b3c6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800b3b6:	2301      	movs	r3, #1
 800b3b8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	3301      	adds	r3, #1
 800b3be:	60fb      	str	r3, [r7, #12]
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	2b01      	cmp	r3, #1
 800b3c4:	d9d2      	bls.n	800b36c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	2b02      	cmp	r3, #2
 800b3ca:	d109      	bne.n	800b3e0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800b3cc:	68bb      	ldr	r3, [r7, #8]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d102      	bne.n	800b3d8 <chk_lock+0x80>
 800b3d2:	683b      	ldr	r3, [r7, #0]
 800b3d4:	2b02      	cmp	r3, #2
 800b3d6:	d101      	bne.n	800b3dc <chk_lock+0x84>
 800b3d8:	2300      	movs	r3, #0
 800b3da:	e010      	b.n	800b3fe <chk_lock+0xa6>
 800b3dc:	2312      	movs	r3, #18
 800b3de:	e00e      	b.n	800b3fe <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800b3e0:	683b      	ldr	r3, [r7, #0]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d108      	bne.n	800b3f8 <chk_lock+0xa0>
 800b3e6:	4a09      	ldr	r2, [pc, #36]	@ (800b40c <chk_lock+0xb4>)
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	011b      	lsls	r3, r3, #4
 800b3ec:	4413      	add	r3, r2
 800b3ee:	330c      	adds	r3, #12
 800b3f0:	881b      	ldrh	r3, [r3, #0]
 800b3f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b3f6:	d101      	bne.n	800b3fc <chk_lock+0xa4>
 800b3f8:	2310      	movs	r3, #16
 800b3fa:	e000      	b.n	800b3fe <chk_lock+0xa6>
 800b3fc:	2300      	movs	r3, #0
}
 800b3fe:	4618      	mov	r0, r3
 800b400:	3714      	adds	r7, #20
 800b402:	46bd      	mov	sp, r7
 800b404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b408:	4770      	bx	lr
 800b40a:	bf00      	nop
 800b40c:	20005bb8 	.word	0x20005bb8

0800b410 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800b410:	b480      	push	{r7}
 800b412:	b083      	sub	sp, #12
 800b414:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b416:	2300      	movs	r3, #0
 800b418:	607b      	str	r3, [r7, #4]
 800b41a:	e002      	b.n	800b422 <enq_lock+0x12>
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	3301      	adds	r3, #1
 800b420:	607b      	str	r3, [r7, #4]
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	2b01      	cmp	r3, #1
 800b426:	d806      	bhi.n	800b436 <enq_lock+0x26>
 800b428:	4a09      	ldr	r2, [pc, #36]	@ (800b450 <enq_lock+0x40>)
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	011b      	lsls	r3, r3, #4
 800b42e:	4413      	add	r3, r2
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	2b00      	cmp	r3, #0
 800b434:	d1f2      	bne.n	800b41c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	2b02      	cmp	r3, #2
 800b43a:	bf14      	ite	ne
 800b43c:	2301      	movne	r3, #1
 800b43e:	2300      	moveq	r3, #0
 800b440:	b2db      	uxtb	r3, r3
}
 800b442:	4618      	mov	r0, r3
 800b444:	370c      	adds	r7, #12
 800b446:	46bd      	mov	sp, r7
 800b448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44c:	4770      	bx	lr
 800b44e:	bf00      	nop
 800b450:	20005bb8 	.word	0x20005bb8

0800b454 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b454:	b480      	push	{r7}
 800b456:	b085      	sub	sp, #20
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
 800b45c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b45e:	2300      	movs	r3, #0
 800b460:	60fb      	str	r3, [r7, #12]
 800b462:	e01f      	b.n	800b4a4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800b464:	4a41      	ldr	r2, [pc, #260]	@ (800b56c <inc_lock+0x118>)
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	011b      	lsls	r3, r3, #4
 800b46a:	4413      	add	r3, r2
 800b46c:	681a      	ldr	r2, [r3, #0]
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	429a      	cmp	r2, r3
 800b474:	d113      	bne.n	800b49e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800b476:	4a3d      	ldr	r2, [pc, #244]	@ (800b56c <inc_lock+0x118>)
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	011b      	lsls	r3, r3, #4
 800b47c:	4413      	add	r3, r2
 800b47e:	3304      	adds	r3, #4
 800b480:	681a      	ldr	r2, [r3, #0]
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800b486:	429a      	cmp	r2, r3
 800b488:	d109      	bne.n	800b49e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800b48a:	4a38      	ldr	r2, [pc, #224]	@ (800b56c <inc_lock+0x118>)
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	011b      	lsls	r3, r3, #4
 800b490:	4413      	add	r3, r2
 800b492:	3308      	adds	r3, #8
 800b494:	681a      	ldr	r2, [r3, #0]
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800b49a:	429a      	cmp	r2, r3
 800b49c:	d006      	beq.n	800b4ac <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	3301      	adds	r3, #1
 800b4a2:	60fb      	str	r3, [r7, #12]
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	2b01      	cmp	r3, #1
 800b4a8:	d9dc      	bls.n	800b464 <inc_lock+0x10>
 800b4aa:	e000      	b.n	800b4ae <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800b4ac:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	2b02      	cmp	r3, #2
 800b4b2:	d132      	bne.n	800b51a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	60fb      	str	r3, [r7, #12]
 800b4b8:	e002      	b.n	800b4c0 <inc_lock+0x6c>
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	3301      	adds	r3, #1
 800b4be:	60fb      	str	r3, [r7, #12]
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	2b01      	cmp	r3, #1
 800b4c4:	d806      	bhi.n	800b4d4 <inc_lock+0x80>
 800b4c6:	4a29      	ldr	r2, [pc, #164]	@ (800b56c <inc_lock+0x118>)
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	011b      	lsls	r3, r3, #4
 800b4cc:	4413      	add	r3, r2
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d1f2      	bne.n	800b4ba <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	2b02      	cmp	r3, #2
 800b4d8:	d101      	bne.n	800b4de <inc_lock+0x8a>
 800b4da:	2300      	movs	r3, #0
 800b4dc:	e040      	b.n	800b560 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681a      	ldr	r2, [r3, #0]
 800b4e2:	4922      	ldr	r1, [pc, #136]	@ (800b56c <inc_lock+0x118>)
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	011b      	lsls	r3, r3, #4
 800b4e8:	440b      	add	r3, r1
 800b4ea:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	689a      	ldr	r2, [r3, #8]
 800b4f0:	491e      	ldr	r1, [pc, #120]	@ (800b56c <inc_lock+0x118>)
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	011b      	lsls	r3, r3, #4
 800b4f6:	440b      	add	r3, r1
 800b4f8:	3304      	adds	r3, #4
 800b4fa:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	695a      	ldr	r2, [r3, #20]
 800b500:	491a      	ldr	r1, [pc, #104]	@ (800b56c <inc_lock+0x118>)
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	011b      	lsls	r3, r3, #4
 800b506:	440b      	add	r3, r1
 800b508:	3308      	adds	r3, #8
 800b50a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800b50c:	4a17      	ldr	r2, [pc, #92]	@ (800b56c <inc_lock+0x118>)
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	011b      	lsls	r3, r3, #4
 800b512:	4413      	add	r3, r2
 800b514:	330c      	adds	r3, #12
 800b516:	2200      	movs	r2, #0
 800b518:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b51a:	683b      	ldr	r3, [r7, #0]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d009      	beq.n	800b534 <inc_lock+0xe0>
 800b520:	4a12      	ldr	r2, [pc, #72]	@ (800b56c <inc_lock+0x118>)
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	011b      	lsls	r3, r3, #4
 800b526:	4413      	add	r3, r2
 800b528:	330c      	adds	r3, #12
 800b52a:	881b      	ldrh	r3, [r3, #0]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d001      	beq.n	800b534 <inc_lock+0xe0>
 800b530:	2300      	movs	r3, #0
 800b532:	e015      	b.n	800b560 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b534:	683b      	ldr	r3, [r7, #0]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d108      	bne.n	800b54c <inc_lock+0xf8>
 800b53a:	4a0c      	ldr	r2, [pc, #48]	@ (800b56c <inc_lock+0x118>)
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	011b      	lsls	r3, r3, #4
 800b540:	4413      	add	r3, r2
 800b542:	330c      	adds	r3, #12
 800b544:	881b      	ldrh	r3, [r3, #0]
 800b546:	3301      	adds	r3, #1
 800b548:	b29a      	uxth	r2, r3
 800b54a:	e001      	b.n	800b550 <inc_lock+0xfc>
 800b54c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b550:	4906      	ldr	r1, [pc, #24]	@ (800b56c <inc_lock+0x118>)
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	011b      	lsls	r3, r3, #4
 800b556:	440b      	add	r3, r1
 800b558:	330c      	adds	r3, #12
 800b55a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	3301      	adds	r3, #1
}
 800b560:	4618      	mov	r0, r3
 800b562:	3714      	adds	r7, #20
 800b564:	46bd      	mov	sp, r7
 800b566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56a:	4770      	bx	lr
 800b56c:	20005bb8 	.word	0x20005bb8

0800b570 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800b570:	b480      	push	{r7}
 800b572:	b085      	sub	sp, #20
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	3b01      	subs	r3, #1
 800b57c:	607b      	str	r3, [r7, #4]
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	2b01      	cmp	r3, #1
 800b582:	d825      	bhi.n	800b5d0 <dec_lock+0x60>
		n = Files[i].ctr;
 800b584:	4a17      	ldr	r2, [pc, #92]	@ (800b5e4 <dec_lock+0x74>)
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	011b      	lsls	r3, r3, #4
 800b58a:	4413      	add	r3, r2
 800b58c:	330c      	adds	r3, #12
 800b58e:	881b      	ldrh	r3, [r3, #0]
 800b590:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800b592:	89fb      	ldrh	r3, [r7, #14]
 800b594:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b598:	d101      	bne.n	800b59e <dec_lock+0x2e>
 800b59a:	2300      	movs	r3, #0
 800b59c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800b59e:	89fb      	ldrh	r3, [r7, #14]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d002      	beq.n	800b5aa <dec_lock+0x3a>
 800b5a4:	89fb      	ldrh	r3, [r7, #14]
 800b5a6:	3b01      	subs	r3, #1
 800b5a8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800b5aa:	4a0e      	ldr	r2, [pc, #56]	@ (800b5e4 <dec_lock+0x74>)
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	011b      	lsls	r3, r3, #4
 800b5b0:	4413      	add	r3, r2
 800b5b2:	330c      	adds	r3, #12
 800b5b4:	89fa      	ldrh	r2, [r7, #14]
 800b5b6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800b5b8:	89fb      	ldrh	r3, [r7, #14]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d105      	bne.n	800b5ca <dec_lock+0x5a>
 800b5be:	4a09      	ldr	r2, [pc, #36]	@ (800b5e4 <dec_lock+0x74>)
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	011b      	lsls	r3, r3, #4
 800b5c4:	4413      	add	r3, r2
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	737b      	strb	r3, [r7, #13]
 800b5ce:	e001      	b.n	800b5d4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800b5d0:	2302      	movs	r3, #2
 800b5d2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800b5d4:	7b7b      	ldrb	r3, [r7, #13]
}
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	3714      	adds	r7, #20
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e0:	4770      	bx	lr
 800b5e2:	bf00      	nop
 800b5e4:	20005bb8 	.word	0x20005bb8

0800b5e8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800b5e8:	b480      	push	{r7}
 800b5ea:	b085      	sub	sp, #20
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	60fb      	str	r3, [r7, #12]
 800b5f4:	e010      	b.n	800b618 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b5f6:	4a0d      	ldr	r2, [pc, #52]	@ (800b62c <clear_lock+0x44>)
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	011b      	lsls	r3, r3, #4
 800b5fc:	4413      	add	r3, r2
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	687a      	ldr	r2, [r7, #4]
 800b602:	429a      	cmp	r2, r3
 800b604:	d105      	bne.n	800b612 <clear_lock+0x2a>
 800b606:	4a09      	ldr	r2, [pc, #36]	@ (800b62c <clear_lock+0x44>)
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	011b      	lsls	r3, r3, #4
 800b60c:	4413      	add	r3, r2
 800b60e:	2200      	movs	r2, #0
 800b610:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	3301      	adds	r3, #1
 800b616:	60fb      	str	r3, [r7, #12]
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	2b01      	cmp	r3, #1
 800b61c:	d9eb      	bls.n	800b5f6 <clear_lock+0xe>
	}
}
 800b61e:	bf00      	nop
 800b620:	bf00      	nop
 800b622:	3714      	adds	r7, #20
 800b624:	46bd      	mov	sp, r7
 800b626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62a:	4770      	bx	lr
 800b62c:	20005bb8 	.word	0x20005bb8

0800b630 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b086      	sub	sp, #24
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b638:	2300      	movs	r3, #0
 800b63a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	78db      	ldrb	r3, [r3, #3]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d034      	beq.n	800b6ae <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b648:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	7858      	ldrb	r0, [r3, #1]
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b654:	2301      	movs	r3, #1
 800b656:	697a      	ldr	r2, [r7, #20]
 800b658:	f7ff fd40 	bl	800b0dc <disk_write>
 800b65c:	4603      	mov	r3, r0
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d002      	beq.n	800b668 <sync_window+0x38>
			res = FR_DISK_ERR;
 800b662:	2301      	movs	r3, #1
 800b664:	73fb      	strb	r3, [r7, #15]
 800b666:	e022      	b.n	800b6ae <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	2200      	movs	r2, #0
 800b66c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	6a1b      	ldr	r3, [r3, #32]
 800b672:	697a      	ldr	r2, [r7, #20]
 800b674:	1ad2      	subs	r2, r2, r3
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	699b      	ldr	r3, [r3, #24]
 800b67a:	429a      	cmp	r2, r3
 800b67c:	d217      	bcs.n	800b6ae <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	789b      	ldrb	r3, [r3, #2]
 800b682:	613b      	str	r3, [r7, #16]
 800b684:	e010      	b.n	800b6a8 <sync_window+0x78>
					wsect += fs->fsize;
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	699b      	ldr	r3, [r3, #24]
 800b68a:	697a      	ldr	r2, [r7, #20]
 800b68c:	4413      	add	r3, r2
 800b68e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	7858      	ldrb	r0, [r3, #1]
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b69a:	2301      	movs	r3, #1
 800b69c:	697a      	ldr	r2, [r7, #20]
 800b69e:	f7ff fd1d 	bl	800b0dc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b6a2:	693b      	ldr	r3, [r7, #16]
 800b6a4:	3b01      	subs	r3, #1
 800b6a6:	613b      	str	r3, [r7, #16]
 800b6a8:	693b      	ldr	r3, [r7, #16]
 800b6aa:	2b01      	cmp	r3, #1
 800b6ac:	d8eb      	bhi.n	800b686 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800b6ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	3718      	adds	r7, #24
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	bd80      	pop	{r7, pc}

0800b6b8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b084      	sub	sp, #16
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]
 800b6c0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6ca:	683a      	ldr	r2, [r7, #0]
 800b6cc:	429a      	cmp	r2, r3
 800b6ce:	d01b      	beq.n	800b708 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800b6d0:	6878      	ldr	r0, [r7, #4]
 800b6d2:	f7ff ffad 	bl	800b630 <sync_window>
 800b6d6:	4603      	mov	r3, r0
 800b6d8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b6da:	7bfb      	ldrb	r3, [r7, #15]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d113      	bne.n	800b708 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	7858      	ldrb	r0, [r3, #1]
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b6ea:	2301      	movs	r3, #1
 800b6ec:	683a      	ldr	r2, [r7, #0]
 800b6ee:	f7ff fcd5 	bl	800b09c <disk_read>
 800b6f2:	4603      	mov	r3, r0
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d004      	beq.n	800b702 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b6f8:	f04f 33ff 	mov.w	r3, #4294967295
 800b6fc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b6fe:	2301      	movs	r3, #1
 800b700:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	683a      	ldr	r2, [r7, #0]
 800b706:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800b708:	7bfb      	ldrb	r3, [r7, #15]
}
 800b70a:	4618      	mov	r0, r3
 800b70c:	3710      	adds	r7, #16
 800b70e:	46bd      	mov	sp, r7
 800b710:	bd80      	pop	{r7, pc}
	...

0800b714 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800b714:	b580      	push	{r7, lr}
 800b716:	b084      	sub	sp, #16
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800b71c:	6878      	ldr	r0, [r7, #4]
 800b71e:	f7ff ff87 	bl	800b630 <sync_window>
 800b722:	4603      	mov	r3, r0
 800b724:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b726:	7bfb      	ldrb	r3, [r7, #15]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d158      	bne.n	800b7de <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	781b      	ldrb	r3, [r3, #0]
 800b730:	2b03      	cmp	r3, #3
 800b732:	d148      	bne.n	800b7c6 <sync_fs+0xb2>
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	791b      	ldrb	r3, [r3, #4]
 800b738:	2b01      	cmp	r3, #1
 800b73a:	d144      	bne.n	800b7c6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	3330      	adds	r3, #48	@ 0x30
 800b740:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b744:	2100      	movs	r1, #0
 800b746:	4618      	mov	r0, r3
 800b748:	f7ff fda9 	bl	800b29e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	3330      	adds	r3, #48	@ 0x30
 800b750:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800b754:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800b758:	4618      	mov	r0, r3
 800b75a:	f7ff fd38 	bl	800b1ce <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	3330      	adds	r3, #48	@ 0x30
 800b762:	4921      	ldr	r1, [pc, #132]	@ (800b7e8 <sync_fs+0xd4>)
 800b764:	4618      	mov	r0, r3
 800b766:	f7ff fd4d 	bl	800b204 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	3330      	adds	r3, #48	@ 0x30
 800b76e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800b772:	491e      	ldr	r1, [pc, #120]	@ (800b7ec <sync_fs+0xd8>)
 800b774:	4618      	mov	r0, r3
 800b776:	f7ff fd45 	bl	800b204 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	3330      	adds	r3, #48	@ 0x30
 800b77e:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	691b      	ldr	r3, [r3, #16]
 800b786:	4619      	mov	r1, r3
 800b788:	4610      	mov	r0, r2
 800b78a:	f7ff fd3b 	bl	800b204 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	3330      	adds	r3, #48	@ 0x30
 800b792:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	68db      	ldr	r3, [r3, #12]
 800b79a:	4619      	mov	r1, r3
 800b79c:	4610      	mov	r0, r2
 800b79e:	f7ff fd31 	bl	800b204 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	69db      	ldr	r3, [r3, #28]
 800b7a6:	1c5a      	adds	r2, r3, #1
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	7858      	ldrb	r0, [r3, #1]
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b7ba:	2301      	movs	r3, #1
 800b7bc:	f7ff fc8e 	bl	800b0dc <disk_write>
			fs->fsi_flag = 0;
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	785b      	ldrb	r3, [r3, #1]
 800b7ca:	2200      	movs	r2, #0
 800b7cc:	2100      	movs	r1, #0
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	f7ff fca4 	bl	800b11c <disk_ioctl>
 800b7d4:	4603      	mov	r3, r0
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d001      	beq.n	800b7de <sync_fs+0xca>
 800b7da:	2301      	movs	r3, #1
 800b7dc:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800b7de:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	3710      	adds	r7, #16
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	bd80      	pop	{r7, pc}
 800b7e8:	41615252 	.word	0x41615252
 800b7ec:	61417272 	.word	0x61417272

0800b7f0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b7f0:	b480      	push	{r7}
 800b7f2:	b083      	sub	sp, #12
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
 800b7f8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800b7fa:	683b      	ldr	r3, [r7, #0]
 800b7fc:	3b02      	subs	r3, #2
 800b7fe:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	695b      	ldr	r3, [r3, #20]
 800b804:	3b02      	subs	r3, #2
 800b806:	683a      	ldr	r2, [r7, #0]
 800b808:	429a      	cmp	r2, r3
 800b80a:	d301      	bcc.n	800b810 <clust2sect+0x20>
 800b80c:	2300      	movs	r3, #0
 800b80e:	e008      	b.n	800b822 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	895b      	ldrh	r3, [r3, #10]
 800b814:	461a      	mov	r2, r3
 800b816:	683b      	ldr	r3, [r7, #0]
 800b818:	fb03 f202 	mul.w	r2, r3, r2
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b820:	4413      	add	r3, r2
}
 800b822:	4618      	mov	r0, r3
 800b824:	370c      	adds	r7, #12
 800b826:	46bd      	mov	sp, r7
 800b828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82c:	4770      	bx	lr

0800b82e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800b82e:	b580      	push	{r7, lr}
 800b830:	b086      	sub	sp, #24
 800b832:	af00      	add	r7, sp, #0
 800b834:	6078      	str	r0, [r7, #4]
 800b836:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b83e:	683b      	ldr	r3, [r7, #0]
 800b840:	2b01      	cmp	r3, #1
 800b842:	d904      	bls.n	800b84e <get_fat+0x20>
 800b844:	693b      	ldr	r3, [r7, #16]
 800b846:	695b      	ldr	r3, [r3, #20]
 800b848:	683a      	ldr	r2, [r7, #0]
 800b84a:	429a      	cmp	r2, r3
 800b84c:	d302      	bcc.n	800b854 <get_fat+0x26>
		val = 1;	/* Internal error */
 800b84e:	2301      	movs	r3, #1
 800b850:	617b      	str	r3, [r7, #20]
 800b852:	e08e      	b.n	800b972 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b854:	f04f 33ff 	mov.w	r3, #4294967295
 800b858:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800b85a:	693b      	ldr	r3, [r7, #16]
 800b85c:	781b      	ldrb	r3, [r3, #0]
 800b85e:	2b03      	cmp	r3, #3
 800b860:	d061      	beq.n	800b926 <get_fat+0xf8>
 800b862:	2b03      	cmp	r3, #3
 800b864:	dc7b      	bgt.n	800b95e <get_fat+0x130>
 800b866:	2b01      	cmp	r3, #1
 800b868:	d002      	beq.n	800b870 <get_fat+0x42>
 800b86a:	2b02      	cmp	r3, #2
 800b86c:	d041      	beq.n	800b8f2 <get_fat+0xc4>
 800b86e:	e076      	b.n	800b95e <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b870:	683b      	ldr	r3, [r7, #0]
 800b872:	60fb      	str	r3, [r7, #12]
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	085b      	lsrs	r3, r3, #1
 800b878:	68fa      	ldr	r2, [r7, #12]
 800b87a:	4413      	add	r3, r2
 800b87c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b87e:	693b      	ldr	r3, [r7, #16]
 800b880:	6a1a      	ldr	r2, [r3, #32]
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	0a5b      	lsrs	r3, r3, #9
 800b886:	4413      	add	r3, r2
 800b888:	4619      	mov	r1, r3
 800b88a:	6938      	ldr	r0, [r7, #16]
 800b88c:	f7ff ff14 	bl	800b6b8 <move_window>
 800b890:	4603      	mov	r3, r0
 800b892:	2b00      	cmp	r3, #0
 800b894:	d166      	bne.n	800b964 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	1c5a      	adds	r2, r3, #1
 800b89a:	60fa      	str	r2, [r7, #12]
 800b89c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8a0:	693a      	ldr	r2, [r7, #16]
 800b8a2:	4413      	add	r3, r2
 800b8a4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b8a8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b8aa:	693b      	ldr	r3, [r7, #16]
 800b8ac:	6a1a      	ldr	r2, [r3, #32]
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	0a5b      	lsrs	r3, r3, #9
 800b8b2:	4413      	add	r3, r2
 800b8b4:	4619      	mov	r1, r3
 800b8b6:	6938      	ldr	r0, [r7, #16]
 800b8b8:	f7ff fefe 	bl	800b6b8 <move_window>
 800b8bc:	4603      	mov	r3, r0
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d152      	bne.n	800b968 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8c8:	693a      	ldr	r2, [r7, #16]
 800b8ca:	4413      	add	r3, r2
 800b8cc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b8d0:	021b      	lsls	r3, r3, #8
 800b8d2:	68ba      	ldr	r2, [r7, #8]
 800b8d4:	4313      	orrs	r3, r2
 800b8d6:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b8d8:	683b      	ldr	r3, [r7, #0]
 800b8da:	f003 0301 	and.w	r3, r3, #1
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d002      	beq.n	800b8e8 <get_fat+0xba>
 800b8e2:	68bb      	ldr	r3, [r7, #8]
 800b8e4:	091b      	lsrs	r3, r3, #4
 800b8e6:	e002      	b.n	800b8ee <get_fat+0xc0>
 800b8e8:	68bb      	ldr	r3, [r7, #8]
 800b8ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b8ee:	617b      	str	r3, [r7, #20]
			break;
 800b8f0:	e03f      	b.n	800b972 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b8f2:	693b      	ldr	r3, [r7, #16]
 800b8f4:	6a1a      	ldr	r2, [r3, #32]
 800b8f6:	683b      	ldr	r3, [r7, #0]
 800b8f8:	0a1b      	lsrs	r3, r3, #8
 800b8fa:	4413      	add	r3, r2
 800b8fc:	4619      	mov	r1, r3
 800b8fe:	6938      	ldr	r0, [r7, #16]
 800b900:	f7ff feda 	bl	800b6b8 <move_window>
 800b904:	4603      	mov	r3, r0
 800b906:	2b00      	cmp	r3, #0
 800b908:	d130      	bne.n	800b96c <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b90a:	693b      	ldr	r3, [r7, #16]
 800b90c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b910:	683b      	ldr	r3, [r7, #0]
 800b912:	005b      	lsls	r3, r3, #1
 800b914:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800b918:	4413      	add	r3, r2
 800b91a:	4618      	mov	r0, r3
 800b91c:	f7ff fc1c 	bl	800b158 <ld_word>
 800b920:	4603      	mov	r3, r0
 800b922:	617b      	str	r3, [r7, #20]
			break;
 800b924:	e025      	b.n	800b972 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b926:	693b      	ldr	r3, [r7, #16]
 800b928:	6a1a      	ldr	r2, [r3, #32]
 800b92a:	683b      	ldr	r3, [r7, #0]
 800b92c:	09db      	lsrs	r3, r3, #7
 800b92e:	4413      	add	r3, r2
 800b930:	4619      	mov	r1, r3
 800b932:	6938      	ldr	r0, [r7, #16]
 800b934:	f7ff fec0 	bl	800b6b8 <move_window>
 800b938:	4603      	mov	r3, r0
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d118      	bne.n	800b970 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b93e:	693b      	ldr	r3, [r7, #16]
 800b940:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b944:	683b      	ldr	r3, [r7, #0]
 800b946:	009b      	lsls	r3, r3, #2
 800b948:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800b94c:	4413      	add	r3, r2
 800b94e:	4618      	mov	r0, r3
 800b950:	f7ff fc1a 	bl	800b188 <ld_dword>
 800b954:	4603      	mov	r3, r0
 800b956:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800b95a:	617b      	str	r3, [r7, #20]
			break;
 800b95c:	e009      	b.n	800b972 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800b95e:	2301      	movs	r3, #1
 800b960:	617b      	str	r3, [r7, #20]
 800b962:	e006      	b.n	800b972 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b964:	bf00      	nop
 800b966:	e004      	b.n	800b972 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b968:	bf00      	nop
 800b96a:	e002      	b.n	800b972 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b96c:	bf00      	nop
 800b96e:	e000      	b.n	800b972 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b970:	bf00      	nop
		}
	}

	return val;
 800b972:	697b      	ldr	r3, [r7, #20]
}
 800b974:	4618      	mov	r0, r3
 800b976:	3718      	adds	r7, #24
 800b978:	46bd      	mov	sp, r7
 800b97a:	bd80      	pop	{r7, pc}

0800b97c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800b97c:	b590      	push	{r4, r7, lr}
 800b97e:	b089      	sub	sp, #36	@ 0x24
 800b980:	af00      	add	r7, sp, #0
 800b982:	60f8      	str	r0, [r7, #12]
 800b984:	60b9      	str	r1, [r7, #8]
 800b986:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800b988:	2302      	movs	r3, #2
 800b98a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b98c:	68bb      	ldr	r3, [r7, #8]
 800b98e:	2b01      	cmp	r3, #1
 800b990:	f240 80d9 	bls.w	800bb46 <put_fat+0x1ca>
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	695b      	ldr	r3, [r3, #20]
 800b998:	68ba      	ldr	r2, [r7, #8]
 800b99a:	429a      	cmp	r2, r3
 800b99c:	f080 80d3 	bcs.w	800bb46 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	781b      	ldrb	r3, [r3, #0]
 800b9a4:	2b03      	cmp	r3, #3
 800b9a6:	f000 8096 	beq.w	800bad6 <put_fat+0x15a>
 800b9aa:	2b03      	cmp	r3, #3
 800b9ac:	f300 80cb 	bgt.w	800bb46 <put_fat+0x1ca>
 800b9b0:	2b01      	cmp	r3, #1
 800b9b2:	d002      	beq.n	800b9ba <put_fat+0x3e>
 800b9b4:	2b02      	cmp	r3, #2
 800b9b6:	d06e      	beq.n	800ba96 <put_fat+0x11a>
 800b9b8:	e0c5      	b.n	800bb46 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800b9ba:	68bb      	ldr	r3, [r7, #8]
 800b9bc:	61bb      	str	r3, [r7, #24]
 800b9be:	69bb      	ldr	r3, [r7, #24]
 800b9c0:	085b      	lsrs	r3, r3, #1
 800b9c2:	69ba      	ldr	r2, [r7, #24]
 800b9c4:	4413      	add	r3, r2
 800b9c6:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	6a1a      	ldr	r2, [r3, #32]
 800b9cc:	69bb      	ldr	r3, [r7, #24]
 800b9ce:	0a5b      	lsrs	r3, r3, #9
 800b9d0:	4413      	add	r3, r2
 800b9d2:	4619      	mov	r1, r3
 800b9d4:	68f8      	ldr	r0, [r7, #12]
 800b9d6:	f7ff fe6f 	bl	800b6b8 <move_window>
 800b9da:	4603      	mov	r3, r0
 800b9dc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b9de:	7ffb      	ldrb	r3, [r7, #31]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	f040 80a9 	bne.w	800bb38 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b9ec:	69bb      	ldr	r3, [r7, #24]
 800b9ee:	1c59      	adds	r1, r3, #1
 800b9f0:	61b9      	str	r1, [r7, #24]
 800b9f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9f6:	4413      	add	r3, r2
 800b9f8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b9fa:	68bb      	ldr	r3, [r7, #8]
 800b9fc:	f003 0301 	and.w	r3, r3, #1
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d00d      	beq.n	800ba20 <put_fat+0xa4>
 800ba04:	697b      	ldr	r3, [r7, #20]
 800ba06:	781b      	ldrb	r3, [r3, #0]
 800ba08:	b25b      	sxtb	r3, r3
 800ba0a:	f003 030f 	and.w	r3, r3, #15
 800ba0e:	b25a      	sxtb	r2, r3
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	b2db      	uxtb	r3, r3
 800ba14:	011b      	lsls	r3, r3, #4
 800ba16:	b25b      	sxtb	r3, r3
 800ba18:	4313      	orrs	r3, r2
 800ba1a:	b25b      	sxtb	r3, r3
 800ba1c:	b2db      	uxtb	r3, r3
 800ba1e:	e001      	b.n	800ba24 <put_fat+0xa8>
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	b2db      	uxtb	r3, r3
 800ba24:	697a      	ldr	r2, [r7, #20]
 800ba26:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	2201      	movs	r2, #1
 800ba2c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	6a1a      	ldr	r2, [r3, #32]
 800ba32:	69bb      	ldr	r3, [r7, #24]
 800ba34:	0a5b      	lsrs	r3, r3, #9
 800ba36:	4413      	add	r3, r2
 800ba38:	4619      	mov	r1, r3
 800ba3a:	68f8      	ldr	r0, [r7, #12]
 800ba3c:	f7ff fe3c 	bl	800b6b8 <move_window>
 800ba40:	4603      	mov	r3, r0
 800ba42:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ba44:	7ffb      	ldrb	r3, [r7, #31]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d178      	bne.n	800bb3c <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ba50:	69bb      	ldr	r3, [r7, #24]
 800ba52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba56:	4413      	add	r3, r2
 800ba58:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800ba5a:	68bb      	ldr	r3, [r7, #8]
 800ba5c:	f003 0301 	and.w	r3, r3, #1
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d003      	beq.n	800ba6c <put_fat+0xf0>
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	091b      	lsrs	r3, r3, #4
 800ba68:	b2db      	uxtb	r3, r3
 800ba6a:	e00e      	b.n	800ba8a <put_fat+0x10e>
 800ba6c:	697b      	ldr	r3, [r7, #20]
 800ba6e:	781b      	ldrb	r3, [r3, #0]
 800ba70:	b25b      	sxtb	r3, r3
 800ba72:	f023 030f 	bic.w	r3, r3, #15
 800ba76:	b25a      	sxtb	r2, r3
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	0a1b      	lsrs	r3, r3, #8
 800ba7c:	b25b      	sxtb	r3, r3
 800ba7e:	f003 030f 	and.w	r3, r3, #15
 800ba82:	b25b      	sxtb	r3, r3
 800ba84:	4313      	orrs	r3, r2
 800ba86:	b25b      	sxtb	r3, r3
 800ba88:	b2db      	uxtb	r3, r3
 800ba8a:	697a      	ldr	r2, [r7, #20]
 800ba8c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	2201      	movs	r2, #1
 800ba92:	70da      	strb	r2, [r3, #3]
			break;
 800ba94:	e057      	b.n	800bb46 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	6a1a      	ldr	r2, [r3, #32]
 800ba9a:	68bb      	ldr	r3, [r7, #8]
 800ba9c:	0a1b      	lsrs	r3, r3, #8
 800ba9e:	4413      	add	r3, r2
 800baa0:	4619      	mov	r1, r3
 800baa2:	68f8      	ldr	r0, [r7, #12]
 800baa4:	f7ff fe08 	bl	800b6b8 <move_window>
 800baa8:	4603      	mov	r3, r0
 800baaa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800baac:	7ffb      	ldrb	r3, [r7, #31]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d146      	bne.n	800bb40 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bab8:	68bb      	ldr	r3, [r7, #8]
 800baba:	005b      	lsls	r3, r3, #1
 800babc:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800bac0:	4413      	add	r3, r2
 800bac2:	687a      	ldr	r2, [r7, #4]
 800bac4:	b292      	uxth	r2, r2
 800bac6:	4611      	mov	r1, r2
 800bac8:	4618      	mov	r0, r3
 800baca:	f7ff fb80 	bl	800b1ce <st_word>
			fs->wflag = 1;
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	2201      	movs	r2, #1
 800bad2:	70da      	strb	r2, [r3, #3]
			break;
 800bad4:	e037      	b.n	800bb46 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	6a1a      	ldr	r2, [r3, #32]
 800bada:	68bb      	ldr	r3, [r7, #8]
 800badc:	09db      	lsrs	r3, r3, #7
 800bade:	4413      	add	r3, r2
 800bae0:	4619      	mov	r1, r3
 800bae2:	68f8      	ldr	r0, [r7, #12]
 800bae4:	f7ff fde8 	bl	800b6b8 <move_window>
 800bae8:	4603      	mov	r3, r0
 800baea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800baec:	7ffb      	ldrb	r3, [r7, #31]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d128      	bne.n	800bb44 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bafe:	68bb      	ldr	r3, [r7, #8]
 800bb00:	009b      	lsls	r3, r3, #2
 800bb02:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800bb06:	4413      	add	r3, r2
 800bb08:	4618      	mov	r0, r3
 800bb0a:	f7ff fb3d 	bl	800b188 <ld_dword>
 800bb0e:	4603      	mov	r3, r0
 800bb10:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800bb14:	4323      	orrs	r3, r4
 800bb16:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bb1e:	68bb      	ldr	r3, [r7, #8]
 800bb20:	009b      	lsls	r3, r3, #2
 800bb22:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800bb26:	4413      	add	r3, r2
 800bb28:	6879      	ldr	r1, [r7, #4]
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	f7ff fb6a 	bl	800b204 <st_dword>
			fs->wflag = 1;
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	2201      	movs	r2, #1
 800bb34:	70da      	strb	r2, [r3, #3]
			break;
 800bb36:	e006      	b.n	800bb46 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800bb38:	bf00      	nop
 800bb3a:	e004      	b.n	800bb46 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800bb3c:	bf00      	nop
 800bb3e:	e002      	b.n	800bb46 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800bb40:	bf00      	nop
 800bb42:	e000      	b.n	800bb46 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800bb44:	bf00      	nop
		}
	}
	return res;
 800bb46:	7ffb      	ldrb	r3, [r7, #31]
}
 800bb48:	4618      	mov	r0, r3
 800bb4a:	3724      	adds	r7, #36	@ 0x24
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	bd90      	pop	{r4, r7, pc}

0800bb50 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800bb50:	b580      	push	{r7, lr}
 800bb52:	b088      	sub	sp, #32
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	60f8      	str	r0, [r7, #12]
 800bb58:	60b9      	str	r1, [r7, #8]
 800bb5a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800bb66:	68bb      	ldr	r3, [r7, #8]
 800bb68:	2b01      	cmp	r3, #1
 800bb6a:	d904      	bls.n	800bb76 <remove_chain+0x26>
 800bb6c:	69bb      	ldr	r3, [r7, #24]
 800bb6e:	695b      	ldr	r3, [r3, #20]
 800bb70:	68ba      	ldr	r2, [r7, #8]
 800bb72:	429a      	cmp	r2, r3
 800bb74:	d301      	bcc.n	800bb7a <remove_chain+0x2a>
 800bb76:	2302      	movs	r3, #2
 800bb78:	e04b      	b.n	800bc12 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d00c      	beq.n	800bb9a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800bb80:	f04f 32ff 	mov.w	r2, #4294967295
 800bb84:	6879      	ldr	r1, [r7, #4]
 800bb86:	69b8      	ldr	r0, [r7, #24]
 800bb88:	f7ff fef8 	bl	800b97c <put_fat>
 800bb8c:	4603      	mov	r3, r0
 800bb8e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800bb90:	7ffb      	ldrb	r3, [r7, #31]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d001      	beq.n	800bb9a <remove_chain+0x4a>
 800bb96:	7ffb      	ldrb	r3, [r7, #31]
 800bb98:	e03b      	b.n	800bc12 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800bb9a:	68b9      	ldr	r1, [r7, #8]
 800bb9c:	68f8      	ldr	r0, [r7, #12]
 800bb9e:	f7ff fe46 	bl	800b82e <get_fat>
 800bba2:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800bba4:	697b      	ldr	r3, [r7, #20]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d031      	beq.n	800bc0e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800bbaa:	697b      	ldr	r3, [r7, #20]
 800bbac:	2b01      	cmp	r3, #1
 800bbae:	d101      	bne.n	800bbb4 <remove_chain+0x64>
 800bbb0:	2302      	movs	r3, #2
 800bbb2:	e02e      	b.n	800bc12 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800bbb4:	697b      	ldr	r3, [r7, #20]
 800bbb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbba:	d101      	bne.n	800bbc0 <remove_chain+0x70>
 800bbbc:	2301      	movs	r3, #1
 800bbbe:	e028      	b.n	800bc12 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800bbc0:	2200      	movs	r2, #0
 800bbc2:	68b9      	ldr	r1, [r7, #8]
 800bbc4:	69b8      	ldr	r0, [r7, #24]
 800bbc6:	f7ff fed9 	bl	800b97c <put_fat>
 800bbca:	4603      	mov	r3, r0
 800bbcc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800bbce:	7ffb      	ldrb	r3, [r7, #31]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d001      	beq.n	800bbd8 <remove_chain+0x88>
 800bbd4:	7ffb      	ldrb	r3, [r7, #31]
 800bbd6:	e01c      	b.n	800bc12 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800bbd8:	69bb      	ldr	r3, [r7, #24]
 800bbda:	691a      	ldr	r2, [r3, #16]
 800bbdc:	69bb      	ldr	r3, [r7, #24]
 800bbde:	695b      	ldr	r3, [r3, #20]
 800bbe0:	3b02      	subs	r3, #2
 800bbe2:	429a      	cmp	r2, r3
 800bbe4:	d20b      	bcs.n	800bbfe <remove_chain+0xae>
			fs->free_clst++;
 800bbe6:	69bb      	ldr	r3, [r7, #24]
 800bbe8:	691b      	ldr	r3, [r3, #16]
 800bbea:	1c5a      	adds	r2, r3, #1
 800bbec:	69bb      	ldr	r3, [r7, #24]
 800bbee:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800bbf0:	69bb      	ldr	r3, [r7, #24]
 800bbf2:	791b      	ldrb	r3, [r3, #4]
 800bbf4:	f043 0301 	orr.w	r3, r3, #1
 800bbf8:	b2da      	uxtb	r2, r3
 800bbfa:	69bb      	ldr	r3, [r7, #24]
 800bbfc:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800bbfe:	697b      	ldr	r3, [r7, #20]
 800bc00:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800bc02:	69bb      	ldr	r3, [r7, #24]
 800bc04:	695b      	ldr	r3, [r3, #20]
 800bc06:	68ba      	ldr	r2, [r7, #8]
 800bc08:	429a      	cmp	r2, r3
 800bc0a:	d3c6      	bcc.n	800bb9a <remove_chain+0x4a>
 800bc0c:	e000      	b.n	800bc10 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800bc0e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800bc10:	2300      	movs	r3, #0
}
 800bc12:	4618      	mov	r0, r3
 800bc14:	3720      	adds	r7, #32
 800bc16:	46bd      	mov	sp, r7
 800bc18:	bd80      	pop	{r7, pc}

0800bc1a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800bc1a:	b580      	push	{r7, lr}
 800bc1c:	b088      	sub	sp, #32
 800bc1e:	af00      	add	r7, sp, #0
 800bc20:	6078      	str	r0, [r7, #4]
 800bc22:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800bc2a:	683b      	ldr	r3, [r7, #0]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d10d      	bne.n	800bc4c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800bc30:	693b      	ldr	r3, [r7, #16]
 800bc32:	68db      	ldr	r3, [r3, #12]
 800bc34:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800bc36:	69bb      	ldr	r3, [r7, #24]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d004      	beq.n	800bc46 <create_chain+0x2c>
 800bc3c:	693b      	ldr	r3, [r7, #16]
 800bc3e:	695b      	ldr	r3, [r3, #20]
 800bc40:	69ba      	ldr	r2, [r7, #24]
 800bc42:	429a      	cmp	r2, r3
 800bc44:	d31b      	bcc.n	800bc7e <create_chain+0x64>
 800bc46:	2301      	movs	r3, #1
 800bc48:	61bb      	str	r3, [r7, #24]
 800bc4a:	e018      	b.n	800bc7e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800bc4c:	6839      	ldr	r1, [r7, #0]
 800bc4e:	6878      	ldr	r0, [r7, #4]
 800bc50:	f7ff fded 	bl	800b82e <get_fat>
 800bc54:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	2b01      	cmp	r3, #1
 800bc5a:	d801      	bhi.n	800bc60 <create_chain+0x46>
 800bc5c:	2301      	movs	r3, #1
 800bc5e:	e070      	b.n	800bd42 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc66:	d101      	bne.n	800bc6c <create_chain+0x52>
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	e06a      	b.n	800bd42 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800bc6c:	693b      	ldr	r3, [r7, #16]
 800bc6e:	695b      	ldr	r3, [r3, #20]
 800bc70:	68fa      	ldr	r2, [r7, #12]
 800bc72:	429a      	cmp	r2, r3
 800bc74:	d201      	bcs.n	800bc7a <create_chain+0x60>
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	e063      	b.n	800bd42 <create_chain+0x128>
		scl = clst;
 800bc7a:	683b      	ldr	r3, [r7, #0]
 800bc7c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800bc7e:	69bb      	ldr	r3, [r7, #24]
 800bc80:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800bc82:	69fb      	ldr	r3, [r7, #28]
 800bc84:	3301      	adds	r3, #1
 800bc86:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800bc88:	693b      	ldr	r3, [r7, #16]
 800bc8a:	695b      	ldr	r3, [r3, #20]
 800bc8c:	69fa      	ldr	r2, [r7, #28]
 800bc8e:	429a      	cmp	r2, r3
 800bc90:	d307      	bcc.n	800bca2 <create_chain+0x88>
				ncl = 2;
 800bc92:	2302      	movs	r3, #2
 800bc94:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800bc96:	69fa      	ldr	r2, [r7, #28]
 800bc98:	69bb      	ldr	r3, [r7, #24]
 800bc9a:	429a      	cmp	r2, r3
 800bc9c:	d901      	bls.n	800bca2 <create_chain+0x88>
 800bc9e:	2300      	movs	r3, #0
 800bca0:	e04f      	b.n	800bd42 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800bca2:	69f9      	ldr	r1, [r7, #28]
 800bca4:	6878      	ldr	r0, [r7, #4]
 800bca6:	f7ff fdc2 	bl	800b82e <get_fat>
 800bcaa:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d00e      	beq.n	800bcd0 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	2b01      	cmp	r3, #1
 800bcb6:	d003      	beq.n	800bcc0 <create_chain+0xa6>
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcbe:	d101      	bne.n	800bcc4 <create_chain+0xaa>
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	e03e      	b.n	800bd42 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800bcc4:	69fa      	ldr	r2, [r7, #28]
 800bcc6:	69bb      	ldr	r3, [r7, #24]
 800bcc8:	429a      	cmp	r2, r3
 800bcca:	d1da      	bne.n	800bc82 <create_chain+0x68>
 800bccc:	2300      	movs	r3, #0
 800bcce:	e038      	b.n	800bd42 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800bcd0:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800bcd2:	f04f 32ff 	mov.w	r2, #4294967295
 800bcd6:	69f9      	ldr	r1, [r7, #28]
 800bcd8:	6938      	ldr	r0, [r7, #16]
 800bcda:	f7ff fe4f 	bl	800b97c <put_fat>
 800bcde:	4603      	mov	r3, r0
 800bce0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800bce2:	7dfb      	ldrb	r3, [r7, #23]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d109      	bne.n	800bcfc <create_chain+0xe2>
 800bce8:	683b      	ldr	r3, [r7, #0]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d006      	beq.n	800bcfc <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800bcee:	69fa      	ldr	r2, [r7, #28]
 800bcf0:	6839      	ldr	r1, [r7, #0]
 800bcf2:	6938      	ldr	r0, [r7, #16]
 800bcf4:	f7ff fe42 	bl	800b97c <put_fat>
 800bcf8:	4603      	mov	r3, r0
 800bcfa:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800bcfc:	7dfb      	ldrb	r3, [r7, #23]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d116      	bne.n	800bd30 <create_chain+0x116>
		fs->last_clst = ncl;
 800bd02:	693b      	ldr	r3, [r7, #16]
 800bd04:	69fa      	ldr	r2, [r7, #28]
 800bd06:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800bd08:	693b      	ldr	r3, [r7, #16]
 800bd0a:	691a      	ldr	r2, [r3, #16]
 800bd0c:	693b      	ldr	r3, [r7, #16]
 800bd0e:	695b      	ldr	r3, [r3, #20]
 800bd10:	3b02      	subs	r3, #2
 800bd12:	429a      	cmp	r2, r3
 800bd14:	d804      	bhi.n	800bd20 <create_chain+0x106>
 800bd16:	693b      	ldr	r3, [r7, #16]
 800bd18:	691b      	ldr	r3, [r3, #16]
 800bd1a:	1e5a      	subs	r2, r3, #1
 800bd1c:	693b      	ldr	r3, [r7, #16]
 800bd1e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800bd20:	693b      	ldr	r3, [r7, #16]
 800bd22:	791b      	ldrb	r3, [r3, #4]
 800bd24:	f043 0301 	orr.w	r3, r3, #1
 800bd28:	b2da      	uxtb	r2, r3
 800bd2a:	693b      	ldr	r3, [r7, #16]
 800bd2c:	711a      	strb	r2, [r3, #4]
 800bd2e:	e007      	b.n	800bd40 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800bd30:	7dfb      	ldrb	r3, [r7, #23]
 800bd32:	2b01      	cmp	r3, #1
 800bd34:	d102      	bne.n	800bd3c <create_chain+0x122>
 800bd36:	f04f 33ff 	mov.w	r3, #4294967295
 800bd3a:	e000      	b.n	800bd3e <create_chain+0x124>
 800bd3c:	2301      	movs	r3, #1
 800bd3e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800bd40:	69fb      	ldr	r3, [r7, #28]
}
 800bd42:	4618      	mov	r0, r3
 800bd44:	3720      	adds	r7, #32
 800bd46:	46bd      	mov	sp, r7
 800bd48:	bd80      	pop	{r7, pc}

0800bd4a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800bd4a:	b480      	push	{r7}
 800bd4c:	b087      	sub	sp, #28
 800bd4e:	af00      	add	r7, sp, #0
 800bd50:	6078      	str	r0, [r7, #4]
 800bd52:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd5e:	3304      	adds	r3, #4
 800bd60:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800bd62:	683b      	ldr	r3, [r7, #0]
 800bd64:	0a5b      	lsrs	r3, r3, #9
 800bd66:	68fa      	ldr	r2, [r7, #12]
 800bd68:	8952      	ldrh	r2, [r2, #10]
 800bd6a:	fbb3 f3f2 	udiv	r3, r3, r2
 800bd6e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800bd70:	693b      	ldr	r3, [r7, #16]
 800bd72:	1d1a      	adds	r2, r3, #4
 800bd74:	613a      	str	r2, [r7, #16]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800bd7a:	68bb      	ldr	r3, [r7, #8]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d101      	bne.n	800bd84 <clmt_clust+0x3a>
 800bd80:	2300      	movs	r3, #0
 800bd82:	e010      	b.n	800bda6 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800bd84:	697a      	ldr	r2, [r7, #20]
 800bd86:	68bb      	ldr	r3, [r7, #8]
 800bd88:	429a      	cmp	r2, r3
 800bd8a:	d307      	bcc.n	800bd9c <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800bd8c:	697a      	ldr	r2, [r7, #20]
 800bd8e:	68bb      	ldr	r3, [r7, #8]
 800bd90:	1ad3      	subs	r3, r2, r3
 800bd92:	617b      	str	r3, [r7, #20]
 800bd94:	693b      	ldr	r3, [r7, #16]
 800bd96:	3304      	adds	r3, #4
 800bd98:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800bd9a:	e7e9      	b.n	800bd70 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800bd9c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800bd9e:	693b      	ldr	r3, [r7, #16]
 800bda0:	681a      	ldr	r2, [r3, #0]
 800bda2:	697b      	ldr	r3, [r7, #20]
 800bda4:	4413      	add	r3, r2
}
 800bda6:	4618      	mov	r0, r3
 800bda8:	371c      	adds	r7, #28
 800bdaa:	46bd      	mov	sp, r7
 800bdac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb0:	4770      	bx	lr

0800bdb2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800bdb2:	b580      	push	{r7, lr}
 800bdb4:	b086      	sub	sp, #24
 800bdb6:	af00      	add	r7, sp, #0
 800bdb8:	6078      	str	r0, [r7, #4]
 800bdba:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800bdc2:	683b      	ldr	r3, [r7, #0]
 800bdc4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bdc8:	d204      	bcs.n	800bdd4 <dir_sdi+0x22>
 800bdca:	683b      	ldr	r3, [r7, #0]
 800bdcc:	f003 031f 	and.w	r3, r3, #31
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d001      	beq.n	800bdd8 <dir_sdi+0x26>
		return FR_INT_ERR;
 800bdd4:	2302      	movs	r3, #2
 800bdd6:	e063      	b.n	800bea0 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	683a      	ldr	r2, [r7, #0]
 800bddc:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	689b      	ldr	r3, [r3, #8]
 800bde2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800bde4:	697b      	ldr	r3, [r7, #20]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d106      	bne.n	800bdf8 <dir_sdi+0x46>
 800bdea:	693b      	ldr	r3, [r7, #16]
 800bdec:	781b      	ldrb	r3, [r3, #0]
 800bdee:	2b02      	cmp	r3, #2
 800bdf0:	d902      	bls.n	800bdf8 <dir_sdi+0x46>
		clst = fs->dirbase;
 800bdf2:	693b      	ldr	r3, [r7, #16]
 800bdf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bdf6:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800bdf8:	697b      	ldr	r3, [r7, #20]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d10c      	bne.n	800be18 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800bdfe:	683b      	ldr	r3, [r7, #0]
 800be00:	095b      	lsrs	r3, r3, #5
 800be02:	693a      	ldr	r2, [r7, #16]
 800be04:	8912      	ldrh	r2, [r2, #8]
 800be06:	4293      	cmp	r3, r2
 800be08:	d301      	bcc.n	800be0e <dir_sdi+0x5c>
 800be0a:	2302      	movs	r3, #2
 800be0c:	e048      	b.n	800bea0 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800be0e:	693b      	ldr	r3, [r7, #16]
 800be10:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	61da      	str	r2, [r3, #28]
 800be16:	e029      	b.n	800be6c <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800be18:	693b      	ldr	r3, [r7, #16]
 800be1a:	895b      	ldrh	r3, [r3, #10]
 800be1c:	025b      	lsls	r3, r3, #9
 800be1e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800be20:	e019      	b.n	800be56 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	6979      	ldr	r1, [r7, #20]
 800be26:	4618      	mov	r0, r3
 800be28:	f7ff fd01 	bl	800b82e <get_fat>
 800be2c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800be2e:	697b      	ldr	r3, [r7, #20]
 800be30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be34:	d101      	bne.n	800be3a <dir_sdi+0x88>
 800be36:	2301      	movs	r3, #1
 800be38:	e032      	b.n	800bea0 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800be3a:	697b      	ldr	r3, [r7, #20]
 800be3c:	2b01      	cmp	r3, #1
 800be3e:	d904      	bls.n	800be4a <dir_sdi+0x98>
 800be40:	693b      	ldr	r3, [r7, #16]
 800be42:	695b      	ldr	r3, [r3, #20]
 800be44:	697a      	ldr	r2, [r7, #20]
 800be46:	429a      	cmp	r2, r3
 800be48:	d301      	bcc.n	800be4e <dir_sdi+0x9c>
 800be4a:	2302      	movs	r3, #2
 800be4c:	e028      	b.n	800bea0 <dir_sdi+0xee>
			ofs -= csz;
 800be4e:	683a      	ldr	r2, [r7, #0]
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	1ad3      	subs	r3, r2, r3
 800be54:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800be56:	683a      	ldr	r2, [r7, #0]
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	429a      	cmp	r2, r3
 800be5c:	d2e1      	bcs.n	800be22 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800be5e:	6979      	ldr	r1, [r7, #20]
 800be60:	6938      	ldr	r0, [r7, #16]
 800be62:	f7ff fcc5 	bl	800b7f0 <clust2sect>
 800be66:	4602      	mov	r2, r0
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	697a      	ldr	r2, [r7, #20]
 800be70:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	69db      	ldr	r3, [r3, #28]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d101      	bne.n	800be7e <dir_sdi+0xcc>
 800be7a:	2302      	movs	r3, #2
 800be7c:	e010      	b.n	800bea0 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	69da      	ldr	r2, [r3, #28]
 800be82:	683b      	ldr	r3, [r7, #0]
 800be84:	0a5b      	lsrs	r3, r3, #9
 800be86:	441a      	add	r2, r3
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800be8c:	693b      	ldr	r3, [r7, #16]
 800be8e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800be92:	683b      	ldr	r3, [r7, #0]
 800be94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be98:	441a      	add	r2, r3
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800be9e:	2300      	movs	r3, #0
}
 800bea0:	4618      	mov	r0, r3
 800bea2:	3718      	adds	r7, #24
 800bea4:	46bd      	mov	sp, r7
 800bea6:	bd80      	pop	{r7, pc}

0800bea8 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b086      	sub	sp, #24
 800beac:	af00      	add	r7, sp, #0
 800beae:	6078      	str	r0, [r7, #4]
 800beb0:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	695b      	ldr	r3, [r3, #20]
 800bebc:	3320      	adds	r3, #32
 800bebe:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	69db      	ldr	r3, [r3, #28]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d003      	beq.n	800bed0 <dir_next+0x28>
 800bec8:	68bb      	ldr	r3, [r7, #8]
 800beca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bece:	d301      	bcc.n	800bed4 <dir_next+0x2c>
 800bed0:	2304      	movs	r3, #4
 800bed2:	e0aa      	b.n	800c02a <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800bed4:	68bb      	ldr	r3, [r7, #8]
 800bed6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800beda:	2b00      	cmp	r3, #0
 800bedc:	f040 8098 	bne.w	800c010 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	69db      	ldr	r3, [r3, #28]
 800bee4:	1c5a      	adds	r2, r3, #1
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	699b      	ldr	r3, [r3, #24]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d10b      	bne.n	800bf0a <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800bef2:	68bb      	ldr	r3, [r7, #8]
 800bef4:	095b      	lsrs	r3, r3, #5
 800bef6:	68fa      	ldr	r2, [r7, #12]
 800bef8:	8912      	ldrh	r2, [r2, #8]
 800befa:	4293      	cmp	r3, r2
 800befc:	f0c0 8088 	bcc.w	800c010 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	2200      	movs	r2, #0
 800bf04:	61da      	str	r2, [r3, #28]
 800bf06:	2304      	movs	r3, #4
 800bf08:	e08f      	b.n	800c02a <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800bf0a:	68bb      	ldr	r3, [r7, #8]
 800bf0c:	0a5b      	lsrs	r3, r3, #9
 800bf0e:	68fa      	ldr	r2, [r7, #12]
 800bf10:	8952      	ldrh	r2, [r2, #10]
 800bf12:	3a01      	subs	r2, #1
 800bf14:	4013      	ands	r3, r2
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d17a      	bne.n	800c010 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800bf1a:	687a      	ldr	r2, [r7, #4]
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	699b      	ldr	r3, [r3, #24]
 800bf20:	4619      	mov	r1, r3
 800bf22:	4610      	mov	r0, r2
 800bf24:	f7ff fc83 	bl	800b82e <get_fat>
 800bf28:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800bf2a:	697b      	ldr	r3, [r7, #20]
 800bf2c:	2b01      	cmp	r3, #1
 800bf2e:	d801      	bhi.n	800bf34 <dir_next+0x8c>
 800bf30:	2302      	movs	r3, #2
 800bf32:	e07a      	b.n	800c02a <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800bf34:	697b      	ldr	r3, [r7, #20]
 800bf36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf3a:	d101      	bne.n	800bf40 <dir_next+0x98>
 800bf3c:	2301      	movs	r3, #1
 800bf3e:	e074      	b.n	800c02a <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	695b      	ldr	r3, [r3, #20]
 800bf44:	697a      	ldr	r2, [r7, #20]
 800bf46:	429a      	cmp	r2, r3
 800bf48:	d358      	bcc.n	800bffc <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800bf4a:	683b      	ldr	r3, [r7, #0]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d104      	bne.n	800bf5a <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	2200      	movs	r2, #0
 800bf54:	61da      	str	r2, [r3, #28]
 800bf56:	2304      	movs	r3, #4
 800bf58:	e067      	b.n	800c02a <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800bf5a:	687a      	ldr	r2, [r7, #4]
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	699b      	ldr	r3, [r3, #24]
 800bf60:	4619      	mov	r1, r3
 800bf62:	4610      	mov	r0, r2
 800bf64:	f7ff fe59 	bl	800bc1a <create_chain>
 800bf68:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800bf6a:	697b      	ldr	r3, [r7, #20]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d101      	bne.n	800bf74 <dir_next+0xcc>
 800bf70:	2307      	movs	r3, #7
 800bf72:	e05a      	b.n	800c02a <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800bf74:	697b      	ldr	r3, [r7, #20]
 800bf76:	2b01      	cmp	r3, #1
 800bf78:	d101      	bne.n	800bf7e <dir_next+0xd6>
 800bf7a:	2302      	movs	r3, #2
 800bf7c:	e055      	b.n	800c02a <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800bf7e:	697b      	ldr	r3, [r7, #20]
 800bf80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf84:	d101      	bne.n	800bf8a <dir_next+0xe2>
 800bf86:	2301      	movs	r3, #1
 800bf88:	e04f      	b.n	800c02a <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800bf8a:	68f8      	ldr	r0, [r7, #12]
 800bf8c:	f7ff fb50 	bl	800b630 <sync_window>
 800bf90:	4603      	mov	r3, r0
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d001      	beq.n	800bf9a <dir_next+0xf2>
 800bf96:	2301      	movs	r3, #1
 800bf98:	e047      	b.n	800c02a <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	3330      	adds	r3, #48	@ 0x30
 800bf9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bfa2:	2100      	movs	r1, #0
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	f7ff f97a 	bl	800b29e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800bfaa:	2300      	movs	r3, #0
 800bfac:	613b      	str	r3, [r7, #16]
 800bfae:	6979      	ldr	r1, [r7, #20]
 800bfb0:	68f8      	ldr	r0, [r7, #12]
 800bfb2:	f7ff fc1d 	bl	800b7f0 <clust2sect>
 800bfb6:	4602      	mov	r2, r0
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	62da      	str	r2, [r3, #44]	@ 0x2c
 800bfbc:	e012      	b.n	800bfe4 <dir_next+0x13c>
						fs->wflag = 1;
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	2201      	movs	r2, #1
 800bfc2:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800bfc4:	68f8      	ldr	r0, [r7, #12]
 800bfc6:	f7ff fb33 	bl	800b630 <sync_window>
 800bfca:	4603      	mov	r3, r0
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d001      	beq.n	800bfd4 <dir_next+0x12c>
 800bfd0:	2301      	movs	r3, #1
 800bfd2:	e02a      	b.n	800c02a <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800bfd4:	693b      	ldr	r3, [r7, #16]
 800bfd6:	3301      	adds	r3, #1
 800bfd8:	613b      	str	r3, [r7, #16]
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfde:	1c5a      	adds	r2, r3, #1
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	62da      	str	r2, [r3, #44]	@ 0x2c
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	895b      	ldrh	r3, [r3, #10]
 800bfe8:	461a      	mov	r2, r3
 800bfea:	693b      	ldr	r3, [r7, #16]
 800bfec:	4293      	cmp	r3, r2
 800bfee:	d3e6      	bcc.n	800bfbe <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bff4:	693b      	ldr	r3, [r7, #16]
 800bff6:	1ad2      	subs	r2, r2, r3
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	697a      	ldr	r2, [r7, #20]
 800c000:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800c002:	6979      	ldr	r1, [r7, #20]
 800c004:	68f8      	ldr	r0, [r7, #12]
 800c006:	f7ff fbf3 	bl	800b7f0 <clust2sect>
 800c00a:	4602      	mov	r2, r0
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	68ba      	ldr	r2, [r7, #8]
 800c014:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c01c:	68bb      	ldr	r3, [r7, #8]
 800c01e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c022:	441a      	add	r2, r3
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c028:	2300      	movs	r3, #0
}
 800c02a:	4618      	mov	r0, r3
 800c02c:	3718      	adds	r7, #24
 800c02e:	46bd      	mov	sp, r7
 800c030:	bd80      	pop	{r7, pc}

0800c032 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800c032:	b580      	push	{r7, lr}
 800c034:	b086      	sub	sp, #24
 800c036:	af00      	add	r7, sp, #0
 800c038:	6078      	str	r0, [r7, #4]
 800c03a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c042:	2100      	movs	r1, #0
 800c044:	6878      	ldr	r0, [r7, #4]
 800c046:	f7ff feb4 	bl	800bdb2 <dir_sdi>
 800c04a:	4603      	mov	r3, r0
 800c04c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c04e:	7dfb      	ldrb	r3, [r7, #23]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d12b      	bne.n	800c0ac <dir_alloc+0x7a>
		n = 0;
 800c054:	2300      	movs	r3, #0
 800c056:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	69db      	ldr	r3, [r3, #28]
 800c05c:	4619      	mov	r1, r3
 800c05e:	68f8      	ldr	r0, [r7, #12]
 800c060:	f7ff fb2a 	bl	800b6b8 <move_window>
 800c064:	4603      	mov	r3, r0
 800c066:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c068:	7dfb      	ldrb	r3, [r7, #23]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d11d      	bne.n	800c0aa <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	6a1b      	ldr	r3, [r3, #32]
 800c072:	781b      	ldrb	r3, [r3, #0]
 800c074:	2be5      	cmp	r3, #229	@ 0xe5
 800c076:	d004      	beq.n	800c082 <dir_alloc+0x50>
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	6a1b      	ldr	r3, [r3, #32]
 800c07c:	781b      	ldrb	r3, [r3, #0]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d107      	bne.n	800c092 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c082:	693b      	ldr	r3, [r7, #16]
 800c084:	3301      	adds	r3, #1
 800c086:	613b      	str	r3, [r7, #16]
 800c088:	693a      	ldr	r2, [r7, #16]
 800c08a:	683b      	ldr	r3, [r7, #0]
 800c08c:	429a      	cmp	r2, r3
 800c08e:	d102      	bne.n	800c096 <dir_alloc+0x64>
 800c090:	e00c      	b.n	800c0ac <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c092:	2300      	movs	r3, #0
 800c094:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800c096:	2101      	movs	r1, #1
 800c098:	6878      	ldr	r0, [r7, #4]
 800c09a:	f7ff ff05 	bl	800bea8 <dir_next>
 800c09e:	4603      	mov	r3, r0
 800c0a0:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c0a2:	7dfb      	ldrb	r3, [r7, #23]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d0d7      	beq.n	800c058 <dir_alloc+0x26>
 800c0a8:	e000      	b.n	800c0ac <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800c0aa:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c0ac:	7dfb      	ldrb	r3, [r7, #23]
 800c0ae:	2b04      	cmp	r3, #4
 800c0b0:	d101      	bne.n	800c0b6 <dir_alloc+0x84>
 800c0b2:	2307      	movs	r3, #7
 800c0b4:	75fb      	strb	r3, [r7, #23]
	return res;
 800c0b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	3718      	adds	r7, #24
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	bd80      	pop	{r7, pc}

0800c0c0 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b084      	sub	sp, #16
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
 800c0c8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c0ca:	683b      	ldr	r3, [r7, #0]
 800c0cc:	331a      	adds	r3, #26
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	f7ff f842 	bl	800b158 <ld_word>
 800c0d4:	4603      	mov	r3, r0
 800c0d6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	781b      	ldrb	r3, [r3, #0]
 800c0dc:	2b03      	cmp	r3, #3
 800c0de:	d109      	bne.n	800c0f4 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c0e0:	683b      	ldr	r3, [r7, #0]
 800c0e2:	3314      	adds	r3, #20
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	f7ff f837 	bl	800b158 <ld_word>
 800c0ea:	4603      	mov	r3, r0
 800c0ec:	041b      	lsls	r3, r3, #16
 800c0ee:	68fa      	ldr	r2, [r7, #12]
 800c0f0:	4313      	orrs	r3, r2
 800c0f2:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c0f4:	68fb      	ldr	r3, [r7, #12]
}
 800c0f6:	4618      	mov	r0, r3
 800c0f8:	3710      	adds	r7, #16
 800c0fa:	46bd      	mov	sp, r7
 800c0fc:	bd80      	pop	{r7, pc}

0800c0fe <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c0fe:	b580      	push	{r7, lr}
 800c100:	b084      	sub	sp, #16
 800c102:	af00      	add	r7, sp, #0
 800c104:	60f8      	str	r0, [r7, #12]
 800c106:	60b9      	str	r1, [r7, #8]
 800c108:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c10a:	68bb      	ldr	r3, [r7, #8]
 800c10c:	331a      	adds	r3, #26
 800c10e:	687a      	ldr	r2, [r7, #4]
 800c110:	b292      	uxth	r2, r2
 800c112:	4611      	mov	r1, r2
 800c114:	4618      	mov	r0, r3
 800c116:	f7ff f85a 	bl	800b1ce <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	781b      	ldrb	r3, [r3, #0]
 800c11e:	2b03      	cmp	r3, #3
 800c120:	d109      	bne.n	800c136 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c122:	68bb      	ldr	r3, [r7, #8]
 800c124:	f103 0214 	add.w	r2, r3, #20
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	0c1b      	lsrs	r3, r3, #16
 800c12c:	b29b      	uxth	r3, r3
 800c12e:	4619      	mov	r1, r3
 800c130:	4610      	mov	r0, r2
 800c132:	f7ff f84c 	bl	800b1ce <st_word>
	}
}
 800c136:	bf00      	nop
 800c138:	3710      	adds	r7, #16
 800c13a:	46bd      	mov	sp, r7
 800c13c:	bd80      	pop	{r7, pc}

0800c13e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800c13e:	b580      	push	{r7, lr}
 800c140:	b086      	sub	sp, #24
 800c142:	af00      	add	r7, sp, #0
 800c144:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c14c:	2100      	movs	r1, #0
 800c14e:	6878      	ldr	r0, [r7, #4]
 800c150:	f7ff fe2f 	bl	800bdb2 <dir_sdi>
 800c154:	4603      	mov	r3, r0
 800c156:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800c158:	7dfb      	ldrb	r3, [r7, #23]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d001      	beq.n	800c162 <dir_find+0x24>
 800c15e:	7dfb      	ldrb	r3, [r7, #23]
 800c160:	e03e      	b.n	800c1e0 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	69db      	ldr	r3, [r3, #28]
 800c166:	4619      	mov	r1, r3
 800c168:	6938      	ldr	r0, [r7, #16]
 800c16a:	f7ff faa5 	bl	800b6b8 <move_window>
 800c16e:	4603      	mov	r3, r0
 800c170:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c172:	7dfb      	ldrb	r3, [r7, #23]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d12f      	bne.n	800c1d8 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	6a1b      	ldr	r3, [r3, #32]
 800c17c:	781b      	ldrb	r3, [r3, #0]
 800c17e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c180:	7bfb      	ldrb	r3, [r7, #15]
 800c182:	2b00      	cmp	r3, #0
 800c184:	d102      	bne.n	800c18c <dir_find+0x4e>
 800c186:	2304      	movs	r3, #4
 800c188:	75fb      	strb	r3, [r7, #23]
 800c18a:	e028      	b.n	800c1de <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	6a1b      	ldr	r3, [r3, #32]
 800c190:	330b      	adds	r3, #11
 800c192:	781b      	ldrb	r3, [r3, #0]
 800c194:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c198:	b2da      	uxtb	r2, r3
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	6a1b      	ldr	r3, [r3, #32]
 800c1a2:	330b      	adds	r3, #11
 800c1a4:	781b      	ldrb	r3, [r3, #0]
 800c1a6:	f003 0308 	and.w	r3, r3, #8
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d10a      	bne.n	800c1c4 <dir_find+0x86>
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	6a18      	ldr	r0, [r3, #32]
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	3324      	adds	r3, #36	@ 0x24
 800c1b6:	220b      	movs	r2, #11
 800c1b8:	4619      	mov	r1, r3
 800c1ba:	f7ff f88b 	bl	800b2d4 <mem_cmp>
 800c1be:	4603      	mov	r3, r0
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d00b      	beq.n	800c1dc <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c1c4:	2100      	movs	r1, #0
 800c1c6:	6878      	ldr	r0, [r7, #4]
 800c1c8:	f7ff fe6e 	bl	800bea8 <dir_next>
 800c1cc:	4603      	mov	r3, r0
 800c1ce:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800c1d0:	7dfb      	ldrb	r3, [r7, #23]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d0c5      	beq.n	800c162 <dir_find+0x24>
 800c1d6:	e002      	b.n	800c1de <dir_find+0xa0>
		if (res != FR_OK) break;
 800c1d8:	bf00      	nop
 800c1da:	e000      	b.n	800c1de <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c1dc:	bf00      	nop

	return res;
 800c1de:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	3718      	adds	r7, #24
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	bd80      	pop	{r7, pc}

0800c1e8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c1e8:	b580      	push	{r7, lr}
 800c1ea:	b084      	sub	sp, #16
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800c1f6:	2101      	movs	r1, #1
 800c1f8:	6878      	ldr	r0, [r7, #4]
 800c1fa:	f7ff ff1a 	bl	800c032 <dir_alloc>
 800c1fe:	4603      	mov	r3, r0
 800c200:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c202:	7bfb      	ldrb	r3, [r7, #15]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d11c      	bne.n	800c242 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	69db      	ldr	r3, [r3, #28]
 800c20c:	4619      	mov	r1, r3
 800c20e:	68b8      	ldr	r0, [r7, #8]
 800c210:	f7ff fa52 	bl	800b6b8 <move_window>
 800c214:	4603      	mov	r3, r0
 800c216:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c218:	7bfb      	ldrb	r3, [r7, #15]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d111      	bne.n	800c242 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	6a1b      	ldr	r3, [r3, #32]
 800c222:	2220      	movs	r2, #32
 800c224:	2100      	movs	r1, #0
 800c226:	4618      	mov	r0, r3
 800c228:	f7ff f839 	bl	800b29e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	6a18      	ldr	r0, [r3, #32]
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	3324      	adds	r3, #36	@ 0x24
 800c234:	220b      	movs	r2, #11
 800c236:	4619      	mov	r1, r3
 800c238:	f7ff f810 	bl	800b25c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800c23c:	68bb      	ldr	r3, [r7, #8]
 800c23e:	2201      	movs	r2, #1
 800c240:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800c242:	7bfb      	ldrb	r3, [r7, #15]
}
 800c244:	4618      	mov	r0, r3
 800c246:	3710      	adds	r7, #16
 800c248:	46bd      	mov	sp, r7
 800c24a:	bd80      	pop	{r7, pc}

0800c24c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b088      	sub	sp, #32
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]
 800c254:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800c256:	683b      	ldr	r3, [r7, #0]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	60fb      	str	r3, [r7, #12]
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	3324      	adds	r3, #36	@ 0x24
 800c260:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800c262:	220b      	movs	r2, #11
 800c264:	2120      	movs	r1, #32
 800c266:	68b8      	ldr	r0, [r7, #8]
 800c268:	f7ff f819 	bl	800b29e <mem_set>
	si = i = 0; ni = 8;
 800c26c:	2300      	movs	r3, #0
 800c26e:	613b      	str	r3, [r7, #16]
 800c270:	693b      	ldr	r3, [r7, #16]
 800c272:	61fb      	str	r3, [r7, #28]
 800c274:	2308      	movs	r3, #8
 800c276:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800c278:	69fb      	ldr	r3, [r7, #28]
 800c27a:	1c5a      	adds	r2, r3, #1
 800c27c:	61fa      	str	r2, [r7, #28]
 800c27e:	68fa      	ldr	r2, [r7, #12]
 800c280:	4413      	add	r3, r2
 800c282:	781b      	ldrb	r3, [r3, #0]
 800c284:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c286:	7efb      	ldrb	r3, [r7, #27]
 800c288:	2b20      	cmp	r3, #32
 800c28a:	d94e      	bls.n	800c32a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800c28c:	7efb      	ldrb	r3, [r7, #27]
 800c28e:	2b2f      	cmp	r3, #47	@ 0x2f
 800c290:	d006      	beq.n	800c2a0 <create_name+0x54>
 800c292:	7efb      	ldrb	r3, [r7, #27]
 800c294:	2b5c      	cmp	r3, #92	@ 0x5c
 800c296:	d110      	bne.n	800c2ba <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c298:	e002      	b.n	800c2a0 <create_name+0x54>
 800c29a:	69fb      	ldr	r3, [r7, #28]
 800c29c:	3301      	adds	r3, #1
 800c29e:	61fb      	str	r3, [r7, #28]
 800c2a0:	68fa      	ldr	r2, [r7, #12]
 800c2a2:	69fb      	ldr	r3, [r7, #28]
 800c2a4:	4413      	add	r3, r2
 800c2a6:	781b      	ldrb	r3, [r3, #0]
 800c2a8:	2b2f      	cmp	r3, #47	@ 0x2f
 800c2aa:	d0f6      	beq.n	800c29a <create_name+0x4e>
 800c2ac:	68fa      	ldr	r2, [r7, #12]
 800c2ae:	69fb      	ldr	r3, [r7, #28]
 800c2b0:	4413      	add	r3, r2
 800c2b2:	781b      	ldrb	r3, [r3, #0]
 800c2b4:	2b5c      	cmp	r3, #92	@ 0x5c
 800c2b6:	d0f0      	beq.n	800c29a <create_name+0x4e>
			break;
 800c2b8:	e038      	b.n	800c32c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800c2ba:	7efb      	ldrb	r3, [r7, #27]
 800c2bc:	2b2e      	cmp	r3, #46	@ 0x2e
 800c2be:	d003      	beq.n	800c2c8 <create_name+0x7c>
 800c2c0:	693a      	ldr	r2, [r7, #16]
 800c2c2:	697b      	ldr	r3, [r7, #20]
 800c2c4:	429a      	cmp	r2, r3
 800c2c6:	d30c      	bcc.n	800c2e2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800c2c8:	697b      	ldr	r3, [r7, #20]
 800c2ca:	2b0b      	cmp	r3, #11
 800c2cc:	d002      	beq.n	800c2d4 <create_name+0x88>
 800c2ce:	7efb      	ldrb	r3, [r7, #27]
 800c2d0:	2b2e      	cmp	r3, #46	@ 0x2e
 800c2d2:	d001      	beq.n	800c2d8 <create_name+0x8c>
 800c2d4:	2306      	movs	r3, #6
 800c2d6:	e044      	b.n	800c362 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800c2d8:	2308      	movs	r3, #8
 800c2da:	613b      	str	r3, [r7, #16]
 800c2dc:	230b      	movs	r3, #11
 800c2de:	617b      	str	r3, [r7, #20]
			continue;
 800c2e0:	e022      	b.n	800c328 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800c2e2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	da04      	bge.n	800c2f4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800c2ea:	7efb      	ldrb	r3, [r7, #27]
 800c2ec:	3b80      	subs	r3, #128	@ 0x80
 800c2ee:	4a1f      	ldr	r2, [pc, #124]	@ (800c36c <create_name+0x120>)
 800c2f0:	5cd3      	ldrb	r3, [r2, r3]
 800c2f2:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800c2f4:	7efb      	ldrb	r3, [r7, #27]
 800c2f6:	4619      	mov	r1, r3
 800c2f8:	481d      	ldr	r0, [pc, #116]	@ (800c370 <create_name+0x124>)
 800c2fa:	f7ff f812 	bl	800b322 <chk_chr>
 800c2fe:	4603      	mov	r3, r0
 800c300:	2b00      	cmp	r3, #0
 800c302:	d001      	beq.n	800c308 <create_name+0xbc>
 800c304:	2306      	movs	r3, #6
 800c306:	e02c      	b.n	800c362 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800c308:	7efb      	ldrb	r3, [r7, #27]
 800c30a:	2b60      	cmp	r3, #96	@ 0x60
 800c30c:	d905      	bls.n	800c31a <create_name+0xce>
 800c30e:	7efb      	ldrb	r3, [r7, #27]
 800c310:	2b7a      	cmp	r3, #122	@ 0x7a
 800c312:	d802      	bhi.n	800c31a <create_name+0xce>
 800c314:	7efb      	ldrb	r3, [r7, #27]
 800c316:	3b20      	subs	r3, #32
 800c318:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800c31a:	693b      	ldr	r3, [r7, #16]
 800c31c:	1c5a      	adds	r2, r3, #1
 800c31e:	613a      	str	r2, [r7, #16]
 800c320:	68ba      	ldr	r2, [r7, #8]
 800c322:	4413      	add	r3, r2
 800c324:	7efa      	ldrb	r2, [r7, #27]
 800c326:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800c328:	e7a6      	b.n	800c278 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c32a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800c32c:	68fa      	ldr	r2, [r7, #12]
 800c32e:	69fb      	ldr	r3, [r7, #28]
 800c330:	441a      	add	r2, r3
 800c332:	683b      	ldr	r3, [r7, #0]
 800c334:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800c336:	693b      	ldr	r3, [r7, #16]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d101      	bne.n	800c340 <create_name+0xf4>
 800c33c:	2306      	movs	r3, #6
 800c33e:	e010      	b.n	800c362 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c340:	68bb      	ldr	r3, [r7, #8]
 800c342:	781b      	ldrb	r3, [r3, #0]
 800c344:	2be5      	cmp	r3, #229	@ 0xe5
 800c346:	d102      	bne.n	800c34e <create_name+0x102>
 800c348:	68bb      	ldr	r3, [r7, #8]
 800c34a:	2205      	movs	r2, #5
 800c34c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c34e:	7efb      	ldrb	r3, [r7, #27]
 800c350:	2b20      	cmp	r3, #32
 800c352:	d801      	bhi.n	800c358 <create_name+0x10c>
 800c354:	2204      	movs	r2, #4
 800c356:	e000      	b.n	800c35a <create_name+0x10e>
 800c358:	2200      	movs	r2, #0
 800c35a:	68bb      	ldr	r3, [r7, #8]
 800c35c:	330b      	adds	r3, #11
 800c35e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800c360:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800c362:	4618      	mov	r0, r3
 800c364:	3720      	adds	r7, #32
 800c366:	46bd      	mov	sp, r7
 800c368:	bd80      	pop	{r7, pc}
 800c36a:	bf00      	nop
 800c36c:	08013f84 	.word	0x08013f84
 800c370:	08013edc 	.word	0x08013edc

0800c374 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c374:	b580      	push	{r7, lr}
 800c376:	b086      	sub	sp, #24
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]
 800c37c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800c382:	693b      	ldr	r3, [r7, #16]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c388:	e002      	b.n	800c390 <follow_path+0x1c>
 800c38a:	683b      	ldr	r3, [r7, #0]
 800c38c:	3301      	adds	r3, #1
 800c38e:	603b      	str	r3, [r7, #0]
 800c390:	683b      	ldr	r3, [r7, #0]
 800c392:	781b      	ldrb	r3, [r3, #0]
 800c394:	2b2f      	cmp	r3, #47	@ 0x2f
 800c396:	d0f8      	beq.n	800c38a <follow_path+0x16>
 800c398:	683b      	ldr	r3, [r7, #0]
 800c39a:	781b      	ldrb	r3, [r3, #0]
 800c39c:	2b5c      	cmp	r3, #92	@ 0x5c
 800c39e:	d0f4      	beq.n	800c38a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800c3a0:	693b      	ldr	r3, [r7, #16]
 800c3a2:	2200      	movs	r2, #0
 800c3a4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c3a6:	683b      	ldr	r3, [r7, #0]
 800c3a8:	781b      	ldrb	r3, [r3, #0]
 800c3aa:	2b1f      	cmp	r3, #31
 800c3ac:	d80a      	bhi.n	800c3c4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	2280      	movs	r2, #128	@ 0x80
 800c3b2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800c3b6:	2100      	movs	r1, #0
 800c3b8:	6878      	ldr	r0, [r7, #4]
 800c3ba:	f7ff fcfa 	bl	800bdb2 <dir_sdi>
 800c3be:	4603      	mov	r3, r0
 800c3c0:	75fb      	strb	r3, [r7, #23]
 800c3c2:	e043      	b.n	800c44c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c3c4:	463b      	mov	r3, r7
 800c3c6:	4619      	mov	r1, r3
 800c3c8:	6878      	ldr	r0, [r7, #4]
 800c3ca:	f7ff ff3f 	bl	800c24c <create_name>
 800c3ce:	4603      	mov	r3, r0
 800c3d0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c3d2:	7dfb      	ldrb	r3, [r7, #23]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d134      	bne.n	800c442 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c3d8:	6878      	ldr	r0, [r7, #4]
 800c3da:	f7ff feb0 	bl	800c13e <dir_find>
 800c3de:	4603      	mov	r3, r0
 800c3e0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800c3e8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800c3ea:	7dfb      	ldrb	r3, [r7, #23]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d00a      	beq.n	800c406 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c3f0:	7dfb      	ldrb	r3, [r7, #23]
 800c3f2:	2b04      	cmp	r3, #4
 800c3f4:	d127      	bne.n	800c446 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c3f6:	7afb      	ldrb	r3, [r7, #11]
 800c3f8:	f003 0304 	and.w	r3, r3, #4
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d122      	bne.n	800c446 <follow_path+0xd2>
 800c400:	2305      	movs	r3, #5
 800c402:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800c404:	e01f      	b.n	800c446 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c406:	7afb      	ldrb	r3, [r7, #11]
 800c408:	f003 0304 	and.w	r3, r3, #4
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d11c      	bne.n	800c44a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c410:	693b      	ldr	r3, [r7, #16]
 800c412:	799b      	ldrb	r3, [r3, #6]
 800c414:	f003 0310 	and.w	r3, r3, #16
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d102      	bne.n	800c422 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800c41c:	2305      	movs	r3, #5
 800c41e:	75fb      	strb	r3, [r7, #23]
 800c420:	e014      	b.n	800c44c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	695b      	ldr	r3, [r3, #20]
 800c42c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c430:	4413      	add	r3, r2
 800c432:	4619      	mov	r1, r3
 800c434:	68f8      	ldr	r0, [r7, #12]
 800c436:	f7ff fe43 	bl	800c0c0 <ld_clust>
 800c43a:	4602      	mov	r2, r0
 800c43c:	693b      	ldr	r3, [r7, #16]
 800c43e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c440:	e7c0      	b.n	800c3c4 <follow_path+0x50>
			if (res != FR_OK) break;
 800c442:	bf00      	nop
 800c444:	e002      	b.n	800c44c <follow_path+0xd8>
				break;
 800c446:	bf00      	nop
 800c448:	e000      	b.n	800c44c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c44a:	bf00      	nop
			}
		}
	}

	return res;
 800c44c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c44e:	4618      	mov	r0, r3
 800c450:	3718      	adds	r7, #24
 800c452:	46bd      	mov	sp, r7
 800c454:	bd80      	pop	{r7, pc}

0800c456 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c456:	b480      	push	{r7}
 800c458:	b087      	sub	sp, #28
 800c45a:	af00      	add	r7, sp, #0
 800c45c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c45e:	f04f 33ff 	mov.w	r3, #4294967295
 800c462:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d031      	beq.n	800c4d0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	617b      	str	r3, [r7, #20]
 800c472:	e002      	b.n	800c47a <get_ldnumber+0x24>
 800c474:	697b      	ldr	r3, [r7, #20]
 800c476:	3301      	adds	r3, #1
 800c478:	617b      	str	r3, [r7, #20]
 800c47a:	697b      	ldr	r3, [r7, #20]
 800c47c:	781b      	ldrb	r3, [r3, #0]
 800c47e:	2b20      	cmp	r3, #32
 800c480:	d903      	bls.n	800c48a <get_ldnumber+0x34>
 800c482:	697b      	ldr	r3, [r7, #20]
 800c484:	781b      	ldrb	r3, [r3, #0]
 800c486:	2b3a      	cmp	r3, #58	@ 0x3a
 800c488:	d1f4      	bne.n	800c474 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c48a:	697b      	ldr	r3, [r7, #20]
 800c48c:	781b      	ldrb	r3, [r3, #0]
 800c48e:	2b3a      	cmp	r3, #58	@ 0x3a
 800c490:	d11c      	bne.n	800c4cc <get_ldnumber+0x76>
			tp = *path;
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	1c5a      	adds	r2, r3, #1
 800c49c:	60fa      	str	r2, [r7, #12]
 800c49e:	781b      	ldrb	r3, [r3, #0]
 800c4a0:	3b30      	subs	r3, #48	@ 0x30
 800c4a2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c4a4:	68bb      	ldr	r3, [r7, #8]
 800c4a6:	2b09      	cmp	r3, #9
 800c4a8:	d80e      	bhi.n	800c4c8 <get_ldnumber+0x72>
 800c4aa:	68fa      	ldr	r2, [r7, #12]
 800c4ac:	697b      	ldr	r3, [r7, #20]
 800c4ae:	429a      	cmp	r2, r3
 800c4b0:	d10a      	bne.n	800c4c8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c4b2:	68bb      	ldr	r3, [r7, #8]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d107      	bne.n	800c4c8 <get_ldnumber+0x72>
					vol = (int)i;
 800c4b8:	68bb      	ldr	r3, [r7, #8]
 800c4ba:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c4bc:	697b      	ldr	r3, [r7, #20]
 800c4be:	3301      	adds	r3, #1
 800c4c0:	617b      	str	r3, [r7, #20]
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	697a      	ldr	r2, [r7, #20]
 800c4c6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c4c8:	693b      	ldr	r3, [r7, #16]
 800c4ca:	e002      	b.n	800c4d2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c4d0:	693b      	ldr	r3, [r7, #16]
}
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	371c      	adds	r7, #28
 800c4d6:	46bd      	mov	sp, r7
 800c4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4dc:	4770      	bx	lr
	...

0800c4e0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c4e0:	b580      	push	{r7, lr}
 800c4e2:	b082      	sub	sp, #8
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
 800c4e8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	2200      	movs	r2, #0
 800c4ee:	70da      	strb	r2, [r3, #3]
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	f04f 32ff 	mov.w	r2, #4294967295
 800c4f6:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c4f8:	6839      	ldr	r1, [r7, #0]
 800c4fa:	6878      	ldr	r0, [r7, #4]
 800c4fc:	f7ff f8dc 	bl	800b6b8 <move_window>
 800c500:	4603      	mov	r3, r0
 800c502:	2b00      	cmp	r3, #0
 800c504:	d001      	beq.n	800c50a <check_fs+0x2a>
 800c506:	2304      	movs	r3, #4
 800c508:	e038      	b.n	800c57c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	3330      	adds	r3, #48	@ 0x30
 800c50e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800c512:	4618      	mov	r0, r3
 800c514:	f7fe fe20 	bl	800b158 <ld_word>
 800c518:	4603      	mov	r3, r0
 800c51a:	461a      	mov	r2, r3
 800c51c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800c520:	429a      	cmp	r2, r3
 800c522:	d001      	beq.n	800c528 <check_fs+0x48>
 800c524:	2303      	movs	r3, #3
 800c526:	e029      	b.n	800c57c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c52e:	2be9      	cmp	r3, #233	@ 0xe9
 800c530:	d009      	beq.n	800c546 <check_fs+0x66>
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c538:	2beb      	cmp	r3, #235	@ 0xeb
 800c53a:	d11e      	bne.n	800c57a <check_fs+0x9a>
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800c542:	2b90      	cmp	r3, #144	@ 0x90
 800c544:	d119      	bne.n	800c57a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	3330      	adds	r3, #48	@ 0x30
 800c54a:	3336      	adds	r3, #54	@ 0x36
 800c54c:	4618      	mov	r0, r3
 800c54e:	f7fe fe1b 	bl	800b188 <ld_dword>
 800c552:	4603      	mov	r3, r0
 800c554:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800c558:	4a0a      	ldr	r2, [pc, #40]	@ (800c584 <check_fs+0xa4>)
 800c55a:	4293      	cmp	r3, r2
 800c55c:	d101      	bne.n	800c562 <check_fs+0x82>
 800c55e:	2300      	movs	r3, #0
 800c560:	e00c      	b.n	800c57c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	3330      	adds	r3, #48	@ 0x30
 800c566:	3352      	adds	r3, #82	@ 0x52
 800c568:	4618      	mov	r0, r3
 800c56a:	f7fe fe0d 	bl	800b188 <ld_dword>
 800c56e:	4603      	mov	r3, r0
 800c570:	4a05      	ldr	r2, [pc, #20]	@ (800c588 <check_fs+0xa8>)
 800c572:	4293      	cmp	r3, r2
 800c574:	d101      	bne.n	800c57a <check_fs+0x9a>
 800c576:	2300      	movs	r3, #0
 800c578:	e000      	b.n	800c57c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800c57a:	2302      	movs	r3, #2
}
 800c57c:	4618      	mov	r0, r3
 800c57e:	3708      	adds	r7, #8
 800c580:	46bd      	mov	sp, r7
 800c582:	bd80      	pop	{r7, pc}
 800c584:	00544146 	.word	0x00544146
 800c588:	33544146 	.word	0x33544146

0800c58c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800c58c:	b580      	push	{r7, lr}
 800c58e:	b096      	sub	sp, #88	@ 0x58
 800c590:	af00      	add	r7, sp, #0
 800c592:	60f8      	str	r0, [r7, #12]
 800c594:	60b9      	str	r1, [r7, #8]
 800c596:	4613      	mov	r3, r2
 800c598:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800c59a:	68bb      	ldr	r3, [r7, #8]
 800c59c:	2200      	movs	r2, #0
 800c59e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c5a0:	68f8      	ldr	r0, [r7, #12]
 800c5a2:	f7ff ff58 	bl	800c456 <get_ldnumber>
 800c5a6:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c5a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	da01      	bge.n	800c5b2 <find_volume+0x26>
 800c5ae:	230b      	movs	r3, #11
 800c5b0:	e22d      	b.n	800ca0e <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c5b2:	4aa1      	ldr	r2, [pc, #644]	@ (800c838 <find_volume+0x2ac>)
 800c5b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c5b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c5ba:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c5bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d101      	bne.n	800c5c6 <find_volume+0x3a>
 800c5c2:	230c      	movs	r3, #12
 800c5c4:	e223      	b.n	800ca0e <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800c5c6:	68bb      	ldr	r3, [r7, #8]
 800c5c8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c5ca:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800c5cc:	79fb      	ldrb	r3, [r7, #7]
 800c5ce:	f023 0301 	bic.w	r3, r3, #1
 800c5d2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800c5d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5d6:	781b      	ldrb	r3, [r3, #0]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d01a      	beq.n	800c612 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800c5dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5de:	785b      	ldrb	r3, [r3, #1]
 800c5e0:	4618      	mov	r0, r3
 800c5e2:	f7fe fd1b 	bl	800b01c <disk_status>
 800c5e6:	4603      	mov	r3, r0
 800c5e8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c5ec:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c5f0:	f003 0301 	and.w	r3, r3, #1
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d10c      	bne.n	800c612 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800c5f8:	79fb      	ldrb	r3, [r7, #7]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d007      	beq.n	800c60e <find_volume+0x82>
 800c5fe:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c602:	f003 0304 	and.w	r3, r3, #4
 800c606:	2b00      	cmp	r3, #0
 800c608:	d001      	beq.n	800c60e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800c60a:	230a      	movs	r3, #10
 800c60c:	e1ff      	b.n	800ca0e <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800c60e:	2300      	movs	r3, #0
 800c610:	e1fd      	b.n	800ca0e <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c614:	2200      	movs	r2, #0
 800c616:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c618:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c61a:	b2da      	uxtb	r2, r3
 800c61c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c61e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c622:	785b      	ldrb	r3, [r3, #1]
 800c624:	4618      	mov	r0, r3
 800c626:	f7fe fd13 	bl	800b050 <disk_initialize>
 800c62a:	4603      	mov	r3, r0
 800c62c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800c630:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c634:	f003 0301 	and.w	r3, r3, #1
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d001      	beq.n	800c640 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c63c:	2303      	movs	r3, #3
 800c63e:	e1e6      	b.n	800ca0e <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800c640:	79fb      	ldrb	r3, [r7, #7]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d007      	beq.n	800c656 <find_volume+0xca>
 800c646:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c64a:	f003 0304 	and.w	r3, r3, #4
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d001      	beq.n	800c656 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800c652:	230a      	movs	r3, #10
 800c654:	e1db      	b.n	800ca0e <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800c656:	2300      	movs	r3, #0
 800c658:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800c65a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c65c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c65e:	f7ff ff3f 	bl	800c4e0 <check_fs>
 800c662:	4603      	mov	r3, r0
 800c664:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800c668:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c66c:	2b02      	cmp	r3, #2
 800c66e:	d149      	bne.n	800c704 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c670:	2300      	movs	r3, #0
 800c672:	643b      	str	r3, [r7, #64]	@ 0x40
 800c674:	e01e      	b.n	800c6b4 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800c676:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c678:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c67c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c67e:	011b      	lsls	r3, r3, #4
 800c680:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800c684:	4413      	add	r3, r2
 800c686:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800c688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c68a:	3304      	adds	r3, #4
 800c68c:	781b      	ldrb	r3, [r3, #0]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d006      	beq.n	800c6a0 <find_volume+0x114>
 800c692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c694:	3308      	adds	r3, #8
 800c696:	4618      	mov	r0, r3
 800c698:	f7fe fd76 	bl	800b188 <ld_dword>
 800c69c:	4602      	mov	r2, r0
 800c69e:	e000      	b.n	800c6a2 <find_volume+0x116>
 800c6a0:	2200      	movs	r2, #0
 800c6a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c6a4:	009b      	lsls	r3, r3, #2
 800c6a6:	3358      	adds	r3, #88	@ 0x58
 800c6a8:	443b      	add	r3, r7
 800c6aa:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c6ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c6b0:	3301      	adds	r3, #1
 800c6b2:	643b      	str	r3, [r7, #64]	@ 0x40
 800c6b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c6b6:	2b03      	cmp	r3, #3
 800c6b8:	d9dd      	bls.n	800c676 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800c6be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d002      	beq.n	800c6ca <find_volume+0x13e>
 800c6c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c6c6:	3b01      	subs	r3, #1
 800c6c8:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800c6ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c6cc:	009b      	lsls	r3, r3, #2
 800c6ce:	3358      	adds	r3, #88	@ 0x58
 800c6d0:	443b      	add	r3, r7
 800c6d2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800c6d6:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800c6d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d005      	beq.n	800c6ea <find_volume+0x15e>
 800c6de:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c6e0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c6e2:	f7ff fefd 	bl	800c4e0 <check_fs>
 800c6e6:	4603      	mov	r3, r0
 800c6e8:	e000      	b.n	800c6ec <find_volume+0x160>
 800c6ea:	2303      	movs	r3, #3
 800c6ec:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800c6f0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c6f4:	2b01      	cmp	r3, #1
 800c6f6:	d905      	bls.n	800c704 <find_volume+0x178>
 800c6f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c6fa:	3301      	adds	r3, #1
 800c6fc:	643b      	str	r3, [r7, #64]	@ 0x40
 800c6fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c700:	2b03      	cmp	r3, #3
 800c702:	d9e2      	bls.n	800c6ca <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c704:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c708:	2b04      	cmp	r3, #4
 800c70a:	d101      	bne.n	800c710 <find_volume+0x184>
 800c70c:	2301      	movs	r3, #1
 800c70e:	e17e      	b.n	800ca0e <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800c710:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c714:	2b01      	cmp	r3, #1
 800c716:	d901      	bls.n	800c71c <find_volume+0x190>
 800c718:	230d      	movs	r3, #13
 800c71a:	e178      	b.n	800ca0e <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c71c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c71e:	3330      	adds	r3, #48	@ 0x30
 800c720:	330b      	adds	r3, #11
 800c722:	4618      	mov	r0, r3
 800c724:	f7fe fd18 	bl	800b158 <ld_word>
 800c728:	4603      	mov	r3, r0
 800c72a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c72e:	d001      	beq.n	800c734 <find_volume+0x1a8>
 800c730:	230d      	movs	r3, #13
 800c732:	e16c      	b.n	800ca0e <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800c734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c736:	3330      	adds	r3, #48	@ 0x30
 800c738:	3316      	adds	r3, #22
 800c73a:	4618      	mov	r0, r3
 800c73c:	f7fe fd0c 	bl	800b158 <ld_word>
 800c740:	4603      	mov	r3, r0
 800c742:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800c744:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c746:	2b00      	cmp	r3, #0
 800c748:	d106      	bne.n	800c758 <find_volume+0x1cc>
 800c74a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c74c:	3330      	adds	r3, #48	@ 0x30
 800c74e:	3324      	adds	r3, #36	@ 0x24
 800c750:	4618      	mov	r0, r3
 800c752:	f7fe fd19 	bl	800b188 <ld_dword>
 800c756:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800c758:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c75a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c75c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800c75e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c760:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800c764:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c766:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c76a:	789b      	ldrb	r3, [r3, #2]
 800c76c:	2b01      	cmp	r3, #1
 800c76e:	d005      	beq.n	800c77c <find_volume+0x1f0>
 800c770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c772:	789b      	ldrb	r3, [r3, #2]
 800c774:	2b02      	cmp	r3, #2
 800c776:	d001      	beq.n	800c77c <find_volume+0x1f0>
 800c778:	230d      	movs	r3, #13
 800c77a:	e148      	b.n	800ca0e <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800c77c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c77e:	789b      	ldrb	r3, [r3, #2]
 800c780:	461a      	mov	r2, r3
 800c782:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c784:	fb02 f303 	mul.w	r3, r2, r3
 800c788:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800c78a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c78c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c790:	461a      	mov	r2, r3
 800c792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c794:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c798:	895b      	ldrh	r3, [r3, #10]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d008      	beq.n	800c7b0 <find_volume+0x224>
 800c79e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7a0:	895b      	ldrh	r3, [r3, #10]
 800c7a2:	461a      	mov	r2, r3
 800c7a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7a6:	895b      	ldrh	r3, [r3, #10]
 800c7a8:	3b01      	subs	r3, #1
 800c7aa:	4013      	ands	r3, r2
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d001      	beq.n	800c7b4 <find_volume+0x228>
 800c7b0:	230d      	movs	r3, #13
 800c7b2:	e12c      	b.n	800ca0e <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800c7b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7b6:	3330      	adds	r3, #48	@ 0x30
 800c7b8:	3311      	adds	r3, #17
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	f7fe fccc 	bl	800b158 <ld_word>
 800c7c0:	4603      	mov	r3, r0
 800c7c2:	461a      	mov	r2, r3
 800c7c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7c6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800c7c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7ca:	891b      	ldrh	r3, [r3, #8]
 800c7cc:	f003 030f 	and.w	r3, r3, #15
 800c7d0:	b29b      	uxth	r3, r3
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d001      	beq.n	800c7da <find_volume+0x24e>
 800c7d6:	230d      	movs	r3, #13
 800c7d8:	e119      	b.n	800ca0e <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800c7da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7dc:	3330      	adds	r3, #48	@ 0x30
 800c7de:	3313      	adds	r3, #19
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	f7fe fcb9 	bl	800b158 <ld_word>
 800c7e6:	4603      	mov	r3, r0
 800c7e8:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800c7ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d106      	bne.n	800c7fe <find_volume+0x272>
 800c7f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7f2:	3330      	adds	r3, #48	@ 0x30
 800c7f4:	3320      	adds	r3, #32
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	f7fe fcc6 	bl	800b188 <ld_dword>
 800c7fc:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800c7fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c800:	3330      	adds	r3, #48	@ 0x30
 800c802:	330e      	adds	r3, #14
 800c804:	4618      	mov	r0, r3
 800c806:	f7fe fca7 	bl	800b158 <ld_word>
 800c80a:	4603      	mov	r3, r0
 800c80c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800c80e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800c810:	2b00      	cmp	r3, #0
 800c812:	d101      	bne.n	800c818 <find_volume+0x28c>
 800c814:	230d      	movs	r3, #13
 800c816:	e0fa      	b.n	800ca0e <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800c818:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800c81a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c81c:	4413      	add	r3, r2
 800c81e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c820:	8912      	ldrh	r2, [r2, #8]
 800c822:	0912      	lsrs	r2, r2, #4
 800c824:	b292      	uxth	r2, r2
 800c826:	4413      	add	r3, r2
 800c828:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800c82a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c82c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c82e:	429a      	cmp	r2, r3
 800c830:	d204      	bcs.n	800c83c <find_volume+0x2b0>
 800c832:	230d      	movs	r3, #13
 800c834:	e0eb      	b.n	800ca0e <find_volume+0x482>
 800c836:	bf00      	nop
 800c838:	20005bb0 	.word	0x20005bb0
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800c83c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c83e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c840:	1ad3      	subs	r3, r2, r3
 800c842:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c844:	8952      	ldrh	r2, [r2, #10]
 800c846:	fbb3 f3f2 	udiv	r3, r3, r2
 800c84a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c84c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d101      	bne.n	800c856 <find_volume+0x2ca>
 800c852:	230d      	movs	r3, #13
 800c854:	e0db      	b.n	800ca0e <find_volume+0x482>
		fmt = FS_FAT32;
 800c856:	2303      	movs	r3, #3
 800c858:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800c85c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c85e:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800c862:	4293      	cmp	r3, r2
 800c864:	d802      	bhi.n	800c86c <find_volume+0x2e0>
 800c866:	2302      	movs	r3, #2
 800c868:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800c86c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c86e:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800c872:	4293      	cmp	r3, r2
 800c874:	d802      	bhi.n	800c87c <find_volume+0x2f0>
 800c876:	2301      	movs	r3, #1
 800c878:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c87c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c87e:	1c9a      	adds	r2, r3, #2
 800c880:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c882:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800c884:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c886:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c888:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c88a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800c88c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c88e:	441a      	add	r2, r3
 800c890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c892:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800c894:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c896:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c898:	441a      	add	r2, r3
 800c89a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c89c:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800c89e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c8a2:	2b03      	cmp	r3, #3
 800c8a4:	d11e      	bne.n	800c8e4 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c8a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8a8:	3330      	adds	r3, #48	@ 0x30
 800c8aa:	332a      	adds	r3, #42	@ 0x2a
 800c8ac:	4618      	mov	r0, r3
 800c8ae:	f7fe fc53 	bl	800b158 <ld_word>
 800c8b2:	4603      	mov	r3, r0
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d001      	beq.n	800c8bc <find_volume+0x330>
 800c8b8:	230d      	movs	r3, #13
 800c8ba:	e0a8      	b.n	800ca0e <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800c8bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8be:	891b      	ldrh	r3, [r3, #8]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d001      	beq.n	800c8c8 <find_volume+0x33c>
 800c8c4:	230d      	movs	r3, #13
 800c8c6:	e0a2      	b.n	800ca0e <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800c8c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8ca:	3330      	adds	r3, #48	@ 0x30
 800c8cc:	332c      	adds	r3, #44	@ 0x2c
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	f7fe fc5a 	bl	800b188 <ld_dword>
 800c8d4:	4602      	mov	r2, r0
 800c8d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8d8:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800c8da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8dc:	695b      	ldr	r3, [r3, #20]
 800c8de:	009b      	lsls	r3, r3, #2
 800c8e0:	647b      	str	r3, [r7, #68]	@ 0x44
 800c8e2:	e01f      	b.n	800c924 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c8e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8e6:	891b      	ldrh	r3, [r3, #8]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d101      	bne.n	800c8f0 <find_volume+0x364>
 800c8ec:	230d      	movs	r3, #13
 800c8ee:	e08e      	b.n	800ca0e <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800c8f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8f2:	6a1a      	ldr	r2, [r3, #32]
 800c8f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c8f6:	441a      	add	r2, r3
 800c8f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8fa:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c8fc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c900:	2b02      	cmp	r3, #2
 800c902:	d103      	bne.n	800c90c <find_volume+0x380>
 800c904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c906:	695b      	ldr	r3, [r3, #20]
 800c908:	005b      	lsls	r3, r3, #1
 800c90a:	e00a      	b.n	800c922 <find_volume+0x396>
 800c90c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c90e:	695a      	ldr	r2, [r3, #20]
 800c910:	4613      	mov	r3, r2
 800c912:	005b      	lsls	r3, r3, #1
 800c914:	4413      	add	r3, r2
 800c916:	085a      	lsrs	r2, r3, #1
 800c918:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c91a:	695b      	ldr	r3, [r3, #20]
 800c91c:	f003 0301 	and.w	r3, r3, #1
 800c920:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800c922:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c924:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c926:	699a      	ldr	r2, [r3, #24]
 800c928:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c92a:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800c92e:	0a5b      	lsrs	r3, r3, #9
 800c930:	429a      	cmp	r2, r3
 800c932:	d201      	bcs.n	800c938 <find_volume+0x3ac>
 800c934:	230d      	movs	r3, #13
 800c936:	e06a      	b.n	800ca0e <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c93a:	f04f 32ff 	mov.w	r2, #4294967295
 800c93e:	611a      	str	r2, [r3, #16]
 800c940:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c942:	691a      	ldr	r2, [r3, #16]
 800c944:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c946:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800c948:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c94a:	2280      	movs	r2, #128	@ 0x80
 800c94c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800c94e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c952:	2b03      	cmp	r3, #3
 800c954:	d149      	bne.n	800c9ea <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800c956:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c958:	3330      	adds	r3, #48	@ 0x30
 800c95a:	3330      	adds	r3, #48	@ 0x30
 800c95c:	4618      	mov	r0, r3
 800c95e:	f7fe fbfb 	bl	800b158 <ld_word>
 800c962:	4603      	mov	r3, r0
 800c964:	2b01      	cmp	r3, #1
 800c966:	d140      	bne.n	800c9ea <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800c968:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c96a:	3301      	adds	r3, #1
 800c96c:	4619      	mov	r1, r3
 800c96e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c970:	f7fe fea2 	bl	800b6b8 <move_window>
 800c974:	4603      	mov	r3, r0
 800c976:	2b00      	cmp	r3, #0
 800c978:	d137      	bne.n	800c9ea <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800c97a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c97c:	2200      	movs	r2, #0
 800c97e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800c980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c982:	3330      	adds	r3, #48	@ 0x30
 800c984:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800c988:	4618      	mov	r0, r3
 800c98a:	f7fe fbe5 	bl	800b158 <ld_word>
 800c98e:	4603      	mov	r3, r0
 800c990:	461a      	mov	r2, r3
 800c992:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800c996:	429a      	cmp	r2, r3
 800c998:	d127      	bne.n	800c9ea <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800c99a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c99c:	3330      	adds	r3, #48	@ 0x30
 800c99e:	4618      	mov	r0, r3
 800c9a0:	f7fe fbf2 	bl	800b188 <ld_dword>
 800c9a4:	4603      	mov	r3, r0
 800c9a6:	4a1c      	ldr	r2, [pc, #112]	@ (800ca18 <find_volume+0x48c>)
 800c9a8:	4293      	cmp	r3, r2
 800c9aa:	d11e      	bne.n	800c9ea <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800c9ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9ae:	3330      	adds	r3, #48	@ 0x30
 800c9b0:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800c9b4:	4618      	mov	r0, r3
 800c9b6:	f7fe fbe7 	bl	800b188 <ld_dword>
 800c9ba:	4603      	mov	r3, r0
 800c9bc:	4a17      	ldr	r2, [pc, #92]	@ (800ca1c <find_volume+0x490>)
 800c9be:	4293      	cmp	r3, r2
 800c9c0:	d113      	bne.n	800c9ea <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800c9c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9c4:	3330      	adds	r3, #48	@ 0x30
 800c9c6:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	f7fe fbdc 	bl	800b188 <ld_dword>
 800c9d0:	4602      	mov	r2, r0
 800c9d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9d4:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800c9d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9d8:	3330      	adds	r3, #48	@ 0x30
 800c9da:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800c9de:	4618      	mov	r0, r3
 800c9e0:	f7fe fbd2 	bl	800b188 <ld_dword>
 800c9e4:	4602      	mov	r2, r0
 800c9e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9e8:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800c9ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9ec:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800c9f0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800c9f2:	4b0b      	ldr	r3, [pc, #44]	@ (800ca20 <find_volume+0x494>)
 800c9f4:	881b      	ldrh	r3, [r3, #0]
 800c9f6:	3301      	adds	r3, #1
 800c9f8:	b29a      	uxth	r2, r3
 800c9fa:	4b09      	ldr	r3, [pc, #36]	@ (800ca20 <find_volume+0x494>)
 800c9fc:	801a      	strh	r2, [r3, #0]
 800c9fe:	4b08      	ldr	r3, [pc, #32]	@ (800ca20 <find_volume+0x494>)
 800ca00:	881a      	ldrh	r2, [r3, #0]
 800ca02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca04:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800ca06:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ca08:	f7fe fdee 	bl	800b5e8 <clear_lock>
#endif
	return FR_OK;
 800ca0c:	2300      	movs	r3, #0
}
 800ca0e:	4618      	mov	r0, r3
 800ca10:	3758      	adds	r7, #88	@ 0x58
 800ca12:	46bd      	mov	sp, r7
 800ca14:	bd80      	pop	{r7, pc}
 800ca16:	bf00      	nop
 800ca18:	41615252 	.word	0x41615252
 800ca1c:	61417272 	.word	0x61417272
 800ca20:	20005bb4 	.word	0x20005bb4

0800ca24 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b084      	sub	sp, #16
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	6078      	str	r0, [r7, #4]
 800ca2c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800ca2e:	2309      	movs	r3, #9
 800ca30:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d01c      	beq.n	800ca72 <validate+0x4e>
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d018      	beq.n	800ca72 <validate+0x4e>
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	781b      	ldrb	r3, [r3, #0]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d013      	beq.n	800ca72 <validate+0x4e>
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	889a      	ldrh	r2, [r3, #4]
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	88db      	ldrh	r3, [r3, #6]
 800ca54:	429a      	cmp	r2, r3
 800ca56:	d10c      	bne.n	800ca72 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	785b      	ldrb	r3, [r3, #1]
 800ca5e:	4618      	mov	r0, r3
 800ca60:	f7fe fadc 	bl	800b01c <disk_status>
 800ca64:	4603      	mov	r3, r0
 800ca66:	f003 0301 	and.w	r3, r3, #1
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d101      	bne.n	800ca72 <validate+0x4e>
			res = FR_OK;
 800ca6e:	2300      	movs	r3, #0
 800ca70:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800ca72:	7bfb      	ldrb	r3, [r7, #15]
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d102      	bne.n	800ca7e <validate+0x5a>
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	e000      	b.n	800ca80 <validate+0x5c>
 800ca7e:	2300      	movs	r3, #0
 800ca80:	683a      	ldr	r2, [r7, #0]
 800ca82:	6013      	str	r3, [r2, #0]
	return res;
 800ca84:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca86:	4618      	mov	r0, r3
 800ca88:	3710      	adds	r7, #16
 800ca8a:	46bd      	mov	sp, r7
 800ca8c:	bd80      	pop	{r7, pc}
	...

0800ca90 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800ca90:	b580      	push	{r7, lr}
 800ca92:	b088      	sub	sp, #32
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	60f8      	str	r0, [r7, #12]
 800ca98:	60b9      	str	r1, [r7, #8]
 800ca9a:	4613      	mov	r3, r2
 800ca9c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800ca9e:	68bb      	ldr	r3, [r7, #8]
 800caa0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800caa2:	f107 0310 	add.w	r3, r7, #16
 800caa6:	4618      	mov	r0, r3
 800caa8:	f7ff fcd5 	bl	800c456 <get_ldnumber>
 800caac:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800caae:	69fb      	ldr	r3, [r7, #28]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	da01      	bge.n	800cab8 <f_mount+0x28>
 800cab4:	230b      	movs	r3, #11
 800cab6:	e02b      	b.n	800cb10 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800cab8:	4a17      	ldr	r2, [pc, #92]	@ (800cb18 <f_mount+0x88>)
 800caba:	69fb      	ldr	r3, [r7, #28]
 800cabc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cac0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800cac2:	69bb      	ldr	r3, [r7, #24]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d005      	beq.n	800cad4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800cac8:	69b8      	ldr	r0, [r7, #24]
 800caca:	f7fe fd8d 	bl	800b5e8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800cace:	69bb      	ldr	r3, [r7, #24]
 800cad0:	2200      	movs	r2, #0
 800cad2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d002      	beq.n	800cae0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	2200      	movs	r2, #0
 800cade:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800cae0:	68fa      	ldr	r2, [r7, #12]
 800cae2:	490d      	ldr	r1, [pc, #52]	@ (800cb18 <f_mount+0x88>)
 800cae4:	69fb      	ldr	r3, [r7, #28]
 800cae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	2b00      	cmp	r3, #0
 800caee:	d002      	beq.n	800caf6 <f_mount+0x66>
 800caf0:	79fb      	ldrb	r3, [r7, #7]
 800caf2:	2b01      	cmp	r3, #1
 800caf4:	d001      	beq.n	800cafa <f_mount+0x6a>
 800caf6:	2300      	movs	r3, #0
 800caf8:	e00a      	b.n	800cb10 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800cafa:	f107 010c 	add.w	r1, r7, #12
 800cafe:	f107 0308 	add.w	r3, r7, #8
 800cb02:	2200      	movs	r2, #0
 800cb04:	4618      	mov	r0, r3
 800cb06:	f7ff fd41 	bl	800c58c <find_volume>
 800cb0a:	4603      	mov	r3, r0
 800cb0c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800cb0e:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb10:	4618      	mov	r0, r3
 800cb12:	3720      	adds	r7, #32
 800cb14:	46bd      	mov	sp, r7
 800cb16:	bd80      	pop	{r7, pc}
 800cb18:	20005bb0 	.word	0x20005bb0

0800cb1c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800cb1c:	b580      	push	{r7, lr}
 800cb1e:	b098      	sub	sp, #96	@ 0x60
 800cb20:	af00      	add	r7, sp, #0
 800cb22:	60f8      	str	r0, [r7, #12]
 800cb24:	60b9      	str	r1, [r7, #8]
 800cb26:	4613      	mov	r3, r2
 800cb28:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d101      	bne.n	800cb34 <f_open+0x18>
 800cb30:	2309      	movs	r3, #9
 800cb32:	e1a9      	b.n	800ce88 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800cb34:	79fb      	ldrb	r3, [r7, #7]
 800cb36:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800cb3a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800cb3c:	79fa      	ldrb	r2, [r7, #7]
 800cb3e:	f107 0110 	add.w	r1, r7, #16
 800cb42:	f107 0308 	add.w	r3, r7, #8
 800cb46:	4618      	mov	r0, r3
 800cb48:	f7ff fd20 	bl	800c58c <find_volume>
 800cb4c:	4603      	mov	r3, r0
 800cb4e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800cb52:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	f040 818d 	bne.w	800ce76 <f_open+0x35a>
		dj.obj.fs = fs;
 800cb5c:	693b      	ldr	r3, [r7, #16]
 800cb5e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800cb60:	68ba      	ldr	r2, [r7, #8]
 800cb62:	f107 0314 	add.w	r3, r7, #20
 800cb66:	4611      	mov	r1, r2
 800cb68:	4618      	mov	r0, r3
 800cb6a:	f7ff fc03 	bl	800c374 <follow_path>
 800cb6e:	4603      	mov	r3, r0
 800cb70:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800cb74:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d118      	bne.n	800cbae <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800cb7c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800cb80:	b25b      	sxtb	r3, r3
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	da03      	bge.n	800cb8e <f_open+0x72>
				res = FR_INVALID_NAME;
 800cb86:	2306      	movs	r3, #6
 800cb88:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800cb8c:	e00f      	b.n	800cbae <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800cb8e:	79fb      	ldrb	r3, [r7, #7]
 800cb90:	2b01      	cmp	r3, #1
 800cb92:	bf8c      	ite	hi
 800cb94:	2301      	movhi	r3, #1
 800cb96:	2300      	movls	r3, #0
 800cb98:	b2db      	uxtb	r3, r3
 800cb9a:	461a      	mov	r2, r3
 800cb9c:	f107 0314 	add.w	r3, r7, #20
 800cba0:	4611      	mov	r1, r2
 800cba2:	4618      	mov	r0, r3
 800cba4:	f7fe fbd8 	bl	800b358 <chk_lock>
 800cba8:	4603      	mov	r3, r0
 800cbaa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800cbae:	79fb      	ldrb	r3, [r7, #7]
 800cbb0:	f003 031c 	and.w	r3, r3, #28
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d07f      	beq.n	800ccb8 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800cbb8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d017      	beq.n	800cbf0 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800cbc0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cbc4:	2b04      	cmp	r3, #4
 800cbc6:	d10e      	bne.n	800cbe6 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800cbc8:	f7fe fc22 	bl	800b410 <enq_lock>
 800cbcc:	4603      	mov	r3, r0
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d006      	beq.n	800cbe0 <f_open+0xc4>
 800cbd2:	f107 0314 	add.w	r3, r7, #20
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	f7ff fb06 	bl	800c1e8 <dir_register>
 800cbdc:	4603      	mov	r3, r0
 800cbde:	e000      	b.n	800cbe2 <f_open+0xc6>
 800cbe0:	2312      	movs	r3, #18
 800cbe2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800cbe6:	79fb      	ldrb	r3, [r7, #7]
 800cbe8:	f043 0308 	orr.w	r3, r3, #8
 800cbec:	71fb      	strb	r3, [r7, #7]
 800cbee:	e010      	b.n	800cc12 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800cbf0:	7ebb      	ldrb	r3, [r7, #26]
 800cbf2:	f003 0311 	and.w	r3, r3, #17
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d003      	beq.n	800cc02 <f_open+0xe6>
					res = FR_DENIED;
 800cbfa:	2307      	movs	r3, #7
 800cbfc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800cc00:	e007      	b.n	800cc12 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800cc02:	79fb      	ldrb	r3, [r7, #7]
 800cc04:	f003 0304 	and.w	r3, r3, #4
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d002      	beq.n	800cc12 <f_open+0xf6>
 800cc0c:	2308      	movs	r3, #8
 800cc0e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800cc12:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d168      	bne.n	800ccec <f_open+0x1d0>
 800cc1a:	79fb      	ldrb	r3, [r7, #7]
 800cc1c:	f003 0308 	and.w	r3, r3, #8
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d063      	beq.n	800ccec <f_open+0x1d0>
				dw = GET_FATTIME();
 800cc24:	f7fd ffb8 	bl	800ab98 <get_fattime>
 800cc28:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800cc2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc2c:	330e      	adds	r3, #14
 800cc2e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800cc30:	4618      	mov	r0, r3
 800cc32:	f7fe fae7 	bl	800b204 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800cc36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc38:	3316      	adds	r3, #22
 800cc3a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	f7fe fae1 	bl	800b204 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800cc42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc44:	330b      	adds	r3, #11
 800cc46:	2220      	movs	r2, #32
 800cc48:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800cc4a:	693b      	ldr	r3, [r7, #16]
 800cc4c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cc4e:	4611      	mov	r1, r2
 800cc50:	4618      	mov	r0, r3
 800cc52:	f7ff fa35 	bl	800c0c0 <ld_clust>
 800cc56:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800cc58:	693b      	ldr	r3, [r7, #16]
 800cc5a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800cc5c:	2200      	movs	r2, #0
 800cc5e:	4618      	mov	r0, r3
 800cc60:	f7ff fa4d 	bl	800c0fe <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800cc64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc66:	331c      	adds	r3, #28
 800cc68:	2100      	movs	r1, #0
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	f7fe faca 	bl	800b204 <st_dword>
					fs->wflag = 1;
 800cc70:	693b      	ldr	r3, [r7, #16]
 800cc72:	2201      	movs	r2, #1
 800cc74:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800cc76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d037      	beq.n	800ccec <f_open+0x1d0>
						dw = fs->winsect;
 800cc7c:	693b      	ldr	r3, [r7, #16]
 800cc7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc80:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800cc82:	f107 0314 	add.w	r3, r7, #20
 800cc86:	2200      	movs	r2, #0
 800cc88:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	f7fe ff60 	bl	800bb50 <remove_chain>
 800cc90:	4603      	mov	r3, r0
 800cc92:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800cc96:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d126      	bne.n	800ccec <f_open+0x1d0>
							res = move_window(fs, dw);
 800cc9e:	693b      	ldr	r3, [r7, #16]
 800cca0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800cca2:	4618      	mov	r0, r3
 800cca4:	f7fe fd08 	bl	800b6b8 <move_window>
 800cca8:	4603      	mov	r3, r0
 800ccaa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800ccae:	693b      	ldr	r3, [r7, #16]
 800ccb0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ccb2:	3a01      	subs	r2, #1
 800ccb4:	60da      	str	r2, [r3, #12]
 800ccb6:	e019      	b.n	800ccec <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800ccb8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d115      	bne.n	800ccec <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800ccc0:	7ebb      	ldrb	r3, [r7, #26]
 800ccc2:	f003 0310 	and.w	r3, r3, #16
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d003      	beq.n	800ccd2 <f_open+0x1b6>
					res = FR_NO_FILE;
 800ccca:	2304      	movs	r3, #4
 800cccc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800ccd0:	e00c      	b.n	800ccec <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800ccd2:	79fb      	ldrb	r3, [r7, #7]
 800ccd4:	f003 0302 	and.w	r3, r3, #2
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d007      	beq.n	800ccec <f_open+0x1d0>
 800ccdc:	7ebb      	ldrb	r3, [r7, #26]
 800ccde:	f003 0301 	and.w	r3, r3, #1
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d002      	beq.n	800ccec <f_open+0x1d0>
						res = FR_DENIED;
 800cce6:	2307      	movs	r3, #7
 800cce8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800ccec:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d126      	bne.n	800cd42 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800ccf4:	79fb      	ldrb	r3, [r7, #7]
 800ccf6:	f003 0308 	and.w	r3, r3, #8
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d003      	beq.n	800cd06 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800ccfe:	79fb      	ldrb	r3, [r7, #7]
 800cd00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cd04:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800cd06:	693b      	ldr	r3, [r7, #16]
 800cd08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800cd0e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800cd14:	79fb      	ldrb	r3, [r7, #7]
 800cd16:	2b01      	cmp	r3, #1
 800cd18:	bf8c      	ite	hi
 800cd1a:	2301      	movhi	r3, #1
 800cd1c:	2300      	movls	r3, #0
 800cd1e:	b2db      	uxtb	r3, r3
 800cd20:	461a      	mov	r2, r3
 800cd22:	f107 0314 	add.w	r3, r7, #20
 800cd26:	4611      	mov	r1, r2
 800cd28:	4618      	mov	r0, r3
 800cd2a:	f7fe fb93 	bl	800b454 <inc_lock>
 800cd2e:	4602      	mov	r2, r0
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	691b      	ldr	r3, [r3, #16]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d102      	bne.n	800cd42 <f_open+0x226>
 800cd3c:	2302      	movs	r3, #2
 800cd3e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800cd42:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	f040 8095 	bne.w	800ce76 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800cd4c:	693b      	ldr	r3, [r7, #16]
 800cd4e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cd50:	4611      	mov	r1, r2
 800cd52:	4618      	mov	r0, r3
 800cd54:	f7ff f9b4 	bl	800c0c0 <ld_clust>
 800cd58:	4602      	mov	r2, r0
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800cd5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd60:	331c      	adds	r3, #28
 800cd62:	4618      	mov	r0, r3
 800cd64:	f7fe fa10 	bl	800b188 <ld_dword>
 800cd68:	4602      	mov	r2, r0
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	2200      	movs	r2, #0
 800cd72:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800cd74:	693a      	ldr	r2, [r7, #16]
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800cd7a:	693b      	ldr	r3, [r7, #16]
 800cd7c:	88da      	ldrh	r2, [r3, #6]
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	79fa      	ldrb	r2, [r7, #7]
 800cd86:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	2200      	movs	r2, #0
 800cd8c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	2200      	movs	r2, #0
 800cd92:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	2200      	movs	r2, #0
 800cd98:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	3330      	adds	r3, #48	@ 0x30
 800cd9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cda2:	2100      	movs	r1, #0
 800cda4:	4618      	mov	r0, r3
 800cda6:	f7fe fa7a 	bl	800b29e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800cdaa:	79fb      	ldrb	r3, [r7, #7]
 800cdac:	f003 0320 	and.w	r3, r3, #32
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d060      	beq.n	800ce76 <f_open+0x35a>
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	68db      	ldr	r3, [r3, #12]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d05c      	beq.n	800ce76 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	68da      	ldr	r2, [r3, #12]
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800cdc4:	693b      	ldr	r3, [r7, #16]
 800cdc6:	895b      	ldrh	r3, [r3, #10]
 800cdc8:	025b      	lsls	r3, r3, #9
 800cdca:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	689b      	ldr	r3, [r3, #8]
 800cdd0:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	68db      	ldr	r3, [r3, #12]
 800cdd6:	657b      	str	r3, [r7, #84]	@ 0x54
 800cdd8:	e016      	b.n	800ce08 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800cdde:	4618      	mov	r0, r3
 800cde0:	f7fe fd25 	bl	800b82e <get_fat>
 800cde4:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800cde6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cde8:	2b01      	cmp	r3, #1
 800cdea:	d802      	bhi.n	800cdf2 <f_open+0x2d6>
 800cdec:	2302      	movs	r3, #2
 800cdee:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800cdf2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cdf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdf8:	d102      	bne.n	800ce00 <f_open+0x2e4>
 800cdfa:	2301      	movs	r3, #1
 800cdfc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ce00:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ce02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ce04:	1ad3      	subs	r3, r2, r3
 800ce06:	657b      	str	r3, [r7, #84]	@ 0x54
 800ce08:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d103      	bne.n	800ce18 <f_open+0x2fc>
 800ce10:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ce12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ce14:	429a      	cmp	r2, r3
 800ce16:	d8e0      	bhi.n	800cdda <f_open+0x2be>
				}
				fp->clust = clst;
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ce1c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ce1e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d127      	bne.n	800ce76 <f_open+0x35a>
 800ce26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ce28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d022      	beq.n	800ce76 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800ce30:	693b      	ldr	r3, [r7, #16]
 800ce32:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800ce34:	4618      	mov	r0, r3
 800ce36:	f7fe fcdb 	bl	800b7f0 <clust2sect>
 800ce3a:	6478      	str	r0, [r7, #68]	@ 0x44
 800ce3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d103      	bne.n	800ce4a <f_open+0x32e>
						res = FR_INT_ERR;
 800ce42:	2302      	movs	r3, #2
 800ce44:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800ce48:	e015      	b.n	800ce76 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800ce4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ce4c:	0a5a      	lsrs	r2, r3, #9
 800ce4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ce50:	441a      	add	r2, r3
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800ce56:	693b      	ldr	r3, [r7, #16]
 800ce58:	7858      	ldrb	r0, [r3, #1]
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	6a1a      	ldr	r2, [r3, #32]
 800ce64:	2301      	movs	r3, #1
 800ce66:	f7fe f919 	bl	800b09c <disk_read>
 800ce6a:	4603      	mov	r3, r0
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d002      	beq.n	800ce76 <f_open+0x35a>
 800ce70:	2301      	movs	r3, #1
 800ce72:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800ce76:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d002      	beq.n	800ce84 <f_open+0x368>
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	2200      	movs	r2, #0
 800ce82:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800ce84:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800ce88:	4618      	mov	r0, r3
 800ce8a:	3760      	adds	r7, #96	@ 0x60
 800ce8c:	46bd      	mov	sp, r7
 800ce8e:	bd80      	pop	{r7, pc}

0800ce90 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b08e      	sub	sp, #56	@ 0x38
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	60f8      	str	r0, [r7, #12]
 800ce98:	60b9      	str	r1, [r7, #8]
 800ce9a:	607a      	str	r2, [r7, #4]
 800ce9c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800ce9e:	68bb      	ldr	r3, [r7, #8]
 800cea0:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800cea2:	683b      	ldr	r3, [r7, #0]
 800cea4:	2200      	movs	r2, #0
 800cea6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	f107 0214 	add.w	r2, r7, #20
 800ceae:	4611      	mov	r1, r2
 800ceb0:	4618      	mov	r0, r3
 800ceb2:	f7ff fdb7 	bl	800ca24 <validate>
 800ceb6:	4603      	mov	r3, r0
 800ceb8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800cebc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d107      	bne.n	800ced4 <f_read+0x44>
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	7d5b      	ldrb	r3, [r3, #21]
 800cec8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800cecc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d002      	beq.n	800ceda <f_read+0x4a>
 800ced4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ced8:	e115      	b.n	800d106 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	7d1b      	ldrb	r3, [r3, #20]
 800cede:	f003 0301 	and.w	r3, r3, #1
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d101      	bne.n	800ceea <f_read+0x5a>
 800cee6:	2307      	movs	r3, #7
 800cee8:	e10d      	b.n	800d106 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	68da      	ldr	r2, [r3, #12]
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	699b      	ldr	r3, [r3, #24]
 800cef2:	1ad3      	subs	r3, r2, r3
 800cef4:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800cef6:	687a      	ldr	r2, [r7, #4]
 800cef8:	6a3b      	ldr	r3, [r7, #32]
 800cefa:	429a      	cmp	r2, r3
 800cefc:	f240 80fe 	bls.w	800d0fc <f_read+0x26c>
 800cf00:	6a3b      	ldr	r3, [r7, #32]
 800cf02:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800cf04:	e0fa      	b.n	800d0fc <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	699b      	ldr	r3, [r3, #24]
 800cf0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	f040 80c6 	bne.w	800d0a0 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	699b      	ldr	r3, [r3, #24]
 800cf18:	0a5b      	lsrs	r3, r3, #9
 800cf1a:	697a      	ldr	r2, [r7, #20]
 800cf1c:	8952      	ldrh	r2, [r2, #10]
 800cf1e:	3a01      	subs	r2, #1
 800cf20:	4013      	ands	r3, r2
 800cf22:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800cf24:	69fb      	ldr	r3, [r7, #28]
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d12f      	bne.n	800cf8a <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	699b      	ldr	r3, [r3, #24]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d103      	bne.n	800cf3a <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	689b      	ldr	r3, [r3, #8]
 800cf36:	633b      	str	r3, [r7, #48]	@ 0x30
 800cf38:	e013      	b.n	800cf62 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d007      	beq.n	800cf52 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	699b      	ldr	r3, [r3, #24]
 800cf46:	4619      	mov	r1, r3
 800cf48:	68f8      	ldr	r0, [r7, #12]
 800cf4a:	f7fe fefe 	bl	800bd4a <clmt_clust>
 800cf4e:	6338      	str	r0, [r7, #48]	@ 0x30
 800cf50:	e007      	b.n	800cf62 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800cf52:	68fa      	ldr	r2, [r7, #12]
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	69db      	ldr	r3, [r3, #28]
 800cf58:	4619      	mov	r1, r3
 800cf5a:	4610      	mov	r0, r2
 800cf5c:	f7fe fc67 	bl	800b82e <get_fat>
 800cf60:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800cf62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf64:	2b01      	cmp	r3, #1
 800cf66:	d804      	bhi.n	800cf72 <f_read+0xe2>
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	2202      	movs	r2, #2
 800cf6c:	755a      	strb	r2, [r3, #21]
 800cf6e:	2302      	movs	r3, #2
 800cf70:	e0c9      	b.n	800d106 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800cf72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf74:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf78:	d104      	bne.n	800cf84 <f_read+0xf4>
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	2201      	movs	r2, #1
 800cf7e:	755a      	strb	r2, [r3, #21]
 800cf80:	2301      	movs	r3, #1
 800cf82:	e0c0      	b.n	800d106 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cf88:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800cf8a:	697a      	ldr	r2, [r7, #20]
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	69db      	ldr	r3, [r3, #28]
 800cf90:	4619      	mov	r1, r3
 800cf92:	4610      	mov	r0, r2
 800cf94:	f7fe fc2c 	bl	800b7f0 <clust2sect>
 800cf98:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800cf9a:	69bb      	ldr	r3, [r7, #24]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d104      	bne.n	800cfaa <f_read+0x11a>
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	2202      	movs	r2, #2
 800cfa4:	755a      	strb	r2, [r3, #21]
 800cfa6:	2302      	movs	r3, #2
 800cfa8:	e0ad      	b.n	800d106 <f_read+0x276>
			sect += csect;
 800cfaa:	69ba      	ldr	r2, [r7, #24]
 800cfac:	69fb      	ldr	r3, [r7, #28]
 800cfae:	4413      	add	r3, r2
 800cfb0:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	0a5b      	lsrs	r3, r3, #9
 800cfb6:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800cfb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d039      	beq.n	800d032 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800cfbe:	69fa      	ldr	r2, [r7, #28]
 800cfc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfc2:	4413      	add	r3, r2
 800cfc4:	697a      	ldr	r2, [r7, #20]
 800cfc6:	8952      	ldrh	r2, [r2, #10]
 800cfc8:	4293      	cmp	r3, r2
 800cfca:	d905      	bls.n	800cfd8 <f_read+0x148>
					cc = fs->csize - csect;
 800cfcc:	697b      	ldr	r3, [r7, #20]
 800cfce:	895b      	ldrh	r3, [r3, #10]
 800cfd0:	461a      	mov	r2, r3
 800cfd2:	69fb      	ldr	r3, [r7, #28]
 800cfd4:	1ad3      	subs	r3, r2, r3
 800cfd6:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cfd8:	697b      	ldr	r3, [r7, #20]
 800cfda:	7858      	ldrb	r0, [r3, #1]
 800cfdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfde:	69ba      	ldr	r2, [r7, #24]
 800cfe0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800cfe2:	f7fe f85b 	bl	800b09c <disk_read>
 800cfe6:	4603      	mov	r3, r0
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d004      	beq.n	800cff6 <f_read+0x166>
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	2201      	movs	r2, #1
 800cff0:	755a      	strb	r2, [r3, #21]
 800cff2:	2301      	movs	r3, #1
 800cff4:	e087      	b.n	800d106 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	7d1b      	ldrb	r3, [r3, #20]
 800cffa:	b25b      	sxtb	r3, r3
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	da14      	bge.n	800d02a <f_read+0x19a>
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	6a1a      	ldr	r2, [r3, #32]
 800d004:	69bb      	ldr	r3, [r7, #24]
 800d006:	1ad3      	subs	r3, r2, r3
 800d008:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d00a:	429a      	cmp	r2, r3
 800d00c:	d90d      	bls.n	800d02a <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	6a1a      	ldr	r2, [r3, #32]
 800d012:	69bb      	ldr	r3, [r7, #24]
 800d014:	1ad3      	subs	r3, r2, r3
 800d016:	025b      	lsls	r3, r3, #9
 800d018:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d01a:	18d0      	adds	r0, r2, r3
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	3330      	adds	r3, #48	@ 0x30
 800d020:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d024:	4619      	mov	r1, r3
 800d026:	f7fe f919 	bl	800b25c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800d02a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d02c:	025b      	lsls	r3, r3, #9
 800d02e:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800d030:	e050      	b.n	800d0d4 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	6a1b      	ldr	r3, [r3, #32]
 800d036:	69ba      	ldr	r2, [r7, #24]
 800d038:	429a      	cmp	r2, r3
 800d03a:	d02e      	beq.n	800d09a <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	7d1b      	ldrb	r3, [r3, #20]
 800d040:	b25b      	sxtb	r3, r3
 800d042:	2b00      	cmp	r3, #0
 800d044:	da18      	bge.n	800d078 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d046:	697b      	ldr	r3, [r7, #20]
 800d048:	7858      	ldrb	r0, [r3, #1]
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	6a1a      	ldr	r2, [r3, #32]
 800d054:	2301      	movs	r3, #1
 800d056:	f7fe f841 	bl	800b0dc <disk_write>
 800d05a:	4603      	mov	r3, r0
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d004      	beq.n	800d06a <f_read+0x1da>
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	2201      	movs	r2, #1
 800d064:	755a      	strb	r2, [r3, #21]
 800d066:	2301      	movs	r3, #1
 800d068:	e04d      	b.n	800d106 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	7d1b      	ldrb	r3, [r3, #20]
 800d06e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d072:	b2da      	uxtb	r2, r3
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d078:	697b      	ldr	r3, [r7, #20]
 800d07a:	7858      	ldrb	r0, [r3, #1]
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d082:	2301      	movs	r3, #1
 800d084:	69ba      	ldr	r2, [r7, #24]
 800d086:	f7fe f809 	bl	800b09c <disk_read>
 800d08a:	4603      	mov	r3, r0
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d004      	beq.n	800d09a <f_read+0x20a>
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	2201      	movs	r2, #1
 800d094:	755a      	strb	r2, [r3, #21]
 800d096:	2301      	movs	r3, #1
 800d098:	e035      	b.n	800d106 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	69ba      	ldr	r2, [r7, #24]
 800d09e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	699b      	ldr	r3, [r3, #24]
 800d0a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0a8:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800d0ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800d0ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	429a      	cmp	r2, r3
 800d0b4:	d901      	bls.n	800d0ba <f_read+0x22a>
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	699b      	ldr	r3, [r3, #24]
 800d0c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0c8:	4413      	add	r3, r2
 800d0ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d0cc:	4619      	mov	r1, r3
 800d0ce:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d0d0:	f7fe f8c4 	bl	800b25c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800d0d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d0d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0d8:	4413      	add	r3, r2
 800d0da:	627b      	str	r3, [r7, #36]	@ 0x24
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	699a      	ldr	r2, [r3, #24]
 800d0e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0e2:	441a      	add	r2, r3
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	619a      	str	r2, [r3, #24]
 800d0e8:	683b      	ldr	r3, [r7, #0]
 800d0ea:	681a      	ldr	r2, [r3, #0]
 800d0ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0ee:	441a      	add	r2, r3
 800d0f0:	683b      	ldr	r3, [r7, #0]
 800d0f2:	601a      	str	r2, [r3, #0]
 800d0f4:	687a      	ldr	r2, [r7, #4]
 800d0f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0f8:	1ad3      	subs	r3, r2, r3
 800d0fa:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	f47f af01 	bne.w	800cf06 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800d104:	2300      	movs	r3, #0
}
 800d106:	4618      	mov	r0, r3
 800d108:	3738      	adds	r7, #56	@ 0x38
 800d10a:	46bd      	mov	sp, r7
 800d10c:	bd80      	pop	{r7, pc}

0800d10e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800d10e:	b580      	push	{r7, lr}
 800d110:	b08c      	sub	sp, #48	@ 0x30
 800d112:	af00      	add	r7, sp, #0
 800d114:	60f8      	str	r0, [r7, #12]
 800d116:	60b9      	str	r1, [r7, #8]
 800d118:	607a      	str	r2, [r7, #4]
 800d11a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800d11c:	68bb      	ldr	r3, [r7, #8]
 800d11e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800d120:	683b      	ldr	r3, [r7, #0]
 800d122:	2200      	movs	r2, #0
 800d124:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	f107 0210 	add.w	r2, r7, #16
 800d12c:	4611      	mov	r1, r2
 800d12e:	4618      	mov	r0, r3
 800d130:	f7ff fc78 	bl	800ca24 <validate>
 800d134:	4603      	mov	r3, r0
 800d136:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d13a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d107      	bne.n	800d152 <f_write+0x44>
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	7d5b      	ldrb	r3, [r3, #21]
 800d146:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800d14a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d002      	beq.n	800d158 <f_write+0x4a>
 800d152:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d156:	e14b      	b.n	800d3f0 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	7d1b      	ldrb	r3, [r3, #20]
 800d15c:	f003 0302 	and.w	r3, r3, #2
 800d160:	2b00      	cmp	r3, #0
 800d162:	d101      	bne.n	800d168 <f_write+0x5a>
 800d164:	2307      	movs	r3, #7
 800d166:	e143      	b.n	800d3f0 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	699a      	ldr	r2, [r3, #24]
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	441a      	add	r2, r3
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	699b      	ldr	r3, [r3, #24]
 800d174:	429a      	cmp	r2, r3
 800d176:	f080 812d 	bcs.w	800d3d4 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	699b      	ldr	r3, [r3, #24]
 800d17e:	43db      	mvns	r3, r3
 800d180:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800d182:	e127      	b.n	800d3d4 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	699b      	ldr	r3, [r3, #24]
 800d188:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	f040 80e3 	bne.w	800d358 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	699b      	ldr	r3, [r3, #24]
 800d196:	0a5b      	lsrs	r3, r3, #9
 800d198:	693a      	ldr	r2, [r7, #16]
 800d19a:	8952      	ldrh	r2, [r2, #10]
 800d19c:	3a01      	subs	r2, #1
 800d19e:	4013      	ands	r3, r2
 800d1a0:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800d1a2:	69bb      	ldr	r3, [r7, #24]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d143      	bne.n	800d230 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	699b      	ldr	r3, [r3, #24]
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d10c      	bne.n	800d1ca <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	689b      	ldr	r3, [r3, #8]
 800d1b4:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800d1b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d11a      	bne.n	800d1f2 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	2100      	movs	r1, #0
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	f7fe fd2a 	bl	800bc1a <create_chain>
 800d1c6:	62b8      	str	r0, [r7, #40]	@ 0x28
 800d1c8:	e013      	b.n	800d1f2 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d007      	beq.n	800d1e2 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	699b      	ldr	r3, [r3, #24]
 800d1d6:	4619      	mov	r1, r3
 800d1d8:	68f8      	ldr	r0, [r7, #12]
 800d1da:	f7fe fdb6 	bl	800bd4a <clmt_clust>
 800d1de:	62b8      	str	r0, [r7, #40]	@ 0x28
 800d1e0:	e007      	b.n	800d1f2 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800d1e2:	68fa      	ldr	r2, [r7, #12]
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	69db      	ldr	r3, [r3, #28]
 800d1e8:	4619      	mov	r1, r3
 800d1ea:	4610      	mov	r0, r2
 800d1ec:	f7fe fd15 	bl	800bc1a <create_chain>
 800d1f0:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d1f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	f000 80f2 	beq.w	800d3de <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d1fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1fc:	2b01      	cmp	r3, #1
 800d1fe:	d104      	bne.n	800d20a <f_write+0xfc>
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	2202      	movs	r2, #2
 800d204:	755a      	strb	r2, [r3, #21]
 800d206:	2302      	movs	r3, #2
 800d208:	e0f2      	b.n	800d3f0 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d20a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d20c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d210:	d104      	bne.n	800d21c <f_write+0x10e>
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	2201      	movs	r2, #1
 800d216:	755a      	strb	r2, [r3, #21]
 800d218:	2301      	movs	r3, #1
 800d21a:	e0e9      	b.n	800d3f0 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d220:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	689b      	ldr	r3, [r3, #8]
 800d226:	2b00      	cmp	r3, #0
 800d228:	d102      	bne.n	800d230 <f_write+0x122>
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d22e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	7d1b      	ldrb	r3, [r3, #20]
 800d234:	b25b      	sxtb	r3, r3
 800d236:	2b00      	cmp	r3, #0
 800d238:	da18      	bge.n	800d26c <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d23a:	693b      	ldr	r3, [r7, #16]
 800d23c:	7858      	ldrb	r0, [r3, #1]
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	6a1a      	ldr	r2, [r3, #32]
 800d248:	2301      	movs	r3, #1
 800d24a:	f7fd ff47 	bl	800b0dc <disk_write>
 800d24e:	4603      	mov	r3, r0
 800d250:	2b00      	cmp	r3, #0
 800d252:	d004      	beq.n	800d25e <f_write+0x150>
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	2201      	movs	r2, #1
 800d258:	755a      	strb	r2, [r3, #21]
 800d25a:	2301      	movs	r3, #1
 800d25c:	e0c8      	b.n	800d3f0 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	7d1b      	ldrb	r3, [r3, #20]
 800d262:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d266:	b2da      	uxtb	r2, r3
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d26c:	693a      	ldr	r2, [r7, #16]
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	69db      	ldr	r3, [r3, #28]
 800d272:	4619      	mov	r1, r3
 800d274:	4610      	mov	r0, r2
 800d276:	f7fe fabb 	bl	800b7f0 <clust2sect>
 800d27a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d27c:	697b      	ldr	r3, [r7, #20]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d104      	bne.n	800d28c <f_write+0x17e>
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	2202      	movs	r2, #2
 800d286:	755a      	strb	r2, [r3, #21]
 800d288:	2302      	movs	r3, #2
 800d28a:	e0b1      	b.n	800d3f0 <f_write+0x2e2>
			sect += csect;
 800d28c:	697a      	ldr	r2, [r7, #20]
 800d28e:	69bb      	ldr	r3, [r7, #24]
 800d290:	4413      	add	r3, r2
 800d292:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	0a5b      	lsrs	r3, r3, #9
 800d298:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800d29a:	6a3b      	ldr	r3, [r7, #32]
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d03c      	beq.n	800d31a <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d2a0:	69ba      	ldr	r2, [r7, #24]
 800d2a2:	6a3b      	ldr	r3, [r7, #32]
 800d2a4:	4413      	add	r3, r2
 800d2a6:	693a      	ldr	r2, [r7, #16]
 800d2a8:	8952      	ldrh	r2, [r2, #10]
 800d2aa:	4293      	cmp	r3, r2
 800d2ac:	d905      	bls.n	800d2ba <f_write+0x1ac>
					cc = fs->csize - csect;
 800d2ae:	693b      	ldr	r3, [r7, #16]
 800d2b0:	895b      	ldrh	r3, [r3, #10]
 800d2b2:	461a      	mov	r2, r3
 800d2b4:	69bb      	ldr	r3, [r7, #24]
 800d2b6:	1ad3      	subs	r3, r2, r3
 800d2b8:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d2ba:	693b      	ldr	r3, [r7, #16]
 800d2bc:	7858      	ldrb	r0, [r3, #1]
 800d2be:	6a3b      	ldr	r3, [r7, #32]
 800d2c0:	697a      	ldr	r2, [r7, #20]
 800d2c2:	69f9      	ldr	r1, [r7, #28]
 800d2c4:	f7fd ff0a 	bl	800b0dc <disk_write>
 800d2c8:	4603      	mov	r3, r0
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d004      	beq.n	800d2d8 <f_write+0x1ca>
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	2201      	movs	r2, #1
 800d2d2:	755a      	strb	r2, [r3, #21]
 800d2d4:	2301      	movs	r3, #1
 800d2d6:	e08b      	b.n	800d3f0 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	6a1a      	ldr	r2, [r3, #32]
 800d2dc:	697b      	ldr	r3, [r7, #20]
 800d2de:	1ad3      	subs	r3, r2, r3
 800d2e0:	6a3a      	ldr	r2, [r7, #32]
 800d2e2:	429a      	cmp	r2, r3
 800d2e4:	d915      	bls.n	800d312 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	6a1a      	ldr	r2, [r3, #32]
 800d2f0:	697b      	ldr	r3, [r7, #20]
 800d2f2:	1ad3      	subs	r3, r2, r3
 800d2f4:	025b      	lsls	r3, r3, #9
 800d2f6:	69fa      	ldr	r2, [r7, #28]
 800d2f8:	4413      	add	r3, r2
 800d2fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d2fe:	4619      	mov	r1, r3
 800d300:	f7fd ffac 	bl	800b25c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	7d1b      	ldrb	r3, [r3, #20]
 800d308:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d30c:	b2da      	uxtb	r2, r3
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800d312:	6a3b      	ldr	r3, [r7, #32]
 800d314:	025b      	lsls	r3, r3, #9
 800d316:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800d318:	e03f      	b.n	800d39a <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	6a1b      	ldr	r3, [r3, #32]
 800d31e:	697a      	ldr	r2, [r7, #20]
 800d320:	429a      	cmp	r2, r3
 800d322:	d016      	beq.n	800d352 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	699a      	ldr	r2, [r3, #24]
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d32c:	429a      	cmp	r2, r3
 800d32e:	d210      	bcs.n	800d352 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800d330:	693b      	ldr	r3, [r7, #16]
 800d332:	7858      	ldrb	r0, [r3, #1]
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d33a:	2301      	movs	r3, #1
 800d33c:	697a      	ldr	r2, [r7, #20]
 800d33e:	f7fd fead 	bl	800b09c <disk_read>
 800d342:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800d344:	2b00      	cmp	r3, #0
 800d346:	d004      	beq.n	800d352 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	2201      	movs	r2, #1
 800d34c:	755a      	strb	r2, [r3, #21]
 800d34e:	2301      	movs	r3, #1
 800d350:	e04e      	b.n	800d3f0 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	697a      	ldr	r2, [r7, #20]
 800d356:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	699b      	ldr	r3, [r3, #24]
 800d35c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d360:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800d364:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800d366:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	429a      	cmp	r2, r3
 800d36c:	d901      	bls.n	800d372 <f_write+0x264>
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	699b      	ldr	r3, [r3, #24]
 800d37c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d380:	4413      	add	r3, r2
 800d382:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d384:	69f9      	ldr	r1, [r7, #28]
 800d386:	4618      	mov	r0, r3
 800d388:	f7fd ff68 	bl	800b25c <mem_cpy>
		fp->flag |= FA_DIRTY;
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	7d1b      	ldrb	r3, [r3, #20]
 800d390:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d394:	b2da      	uxtb	r2, r3
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800d39a:	69fa      	ldr	r2, [r7, #28]
 800d39c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d39e:	4413      	add	r3, r2
 800d3a0:	61fb      	str	r3, [r7, #28]
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	699a      	ldr	r2, [r3, #24]
 800d3a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3a8:	441a      	add	r2, r3
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	619a      	str	r2, [r3, #24]
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	68da      	ldr	r2, [r3, #12]
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	699b      	ldr	r3, [r3, #24]
 800d3b6:	429a      	cmp	r2, r3
 800d3b8:	bf38      	it	cc
 800d3ba:	461a      	movcc	r2, r3
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	60da      	str	r2, [r3, #12]
 800d3c0:	683b      	ldr	r3, [r7, #0]
 800d3c2:	681a      	ldr	r2, [r3, #0]
 800d3c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3c6:	441a      	add	r2, r3
 800d3c8:	683b      	ldr	r3, [r7, #0]
 800d3ca:	601a      	str	r2, [r3, #0]
 800d3cc:	687a      	ldr	r2, [r7, #4]
 800d3ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3d0:	1ad3      	subs	r3, r2, r3
 800d3d2:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	f47f aed4 	bne.w	800d184 <f_write+0x76>
 800d3dc:	e000      	b.n	800d3e0 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d3de:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	7d1b      	ldrb	r3, [r3, #20]
 800d3e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d3e8:	b2da      	uxtb	r2, r3
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800d3ee:	2300      	movs	r3, #0
}
 800d3f0:	4618      	mov	r0, r3
 800d3f2:	3730      	adds	r7, #48	@ 0x30
 800d3f4:	46bd      	mov	sp, r7
 800d3f6:	bd80      	pop	{r7, pc}

0800d3f8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d3f8:	b580      	push	{r7, lr}
 800d3fa:	b086      	sub	sp, #24
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	f107 0208 	add.w	r2, r7, #8
 800d406:	4611      	mov	r1, r2
 800d408:	4618      	mov	r0, r3
 800d40a:	f7ff fb0b 	bl	800ca24 <validate>
 800d40e:	4603      	mov	r3, r0
 800d410:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d412:	7dfb      	ldrb	r3, [r7, #23]
 800d414:	2b00      	cmp	r3, #0
 800d416:	d168      	bne.n	800d4ea <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	7d1b      	ldrb	r3, [r3, #20]
 800d41c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d420:	2b00      	cmp	r3, #0
 800d422:	d062      	beq.n	800d4ea <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	7d1b      	ldrb	r3, [r3, #20]
 800d428:	b25b      	sxtb	r3, r3
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	da15      	bge.n	800d45a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d42e:	68bb      	ldr	r3, [r7, #8]
 800d430:	7858      	ldrb	r0, [r3, #1]
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	6a1a      	ldr	r2, [r3, #32]
 800d43c:	2301      	movs	r3, #1
 800d43e:	f7fd fe4d 	bl	800b0dc <disk_write>
 800d442:	4603      	mov	r3, r0
 800d444:	2b00      	cmp	r3, #0
 800d446:	d001      	beq.n	800d44c <f_sync+0x54>
 800d448:	2301      	movs	r3, #1
 800d44a:	e04f      	b.n	800d4ec <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	7d1b      	ldrb	r3, [r3, #20]
 800d450:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d454:	b2da      	uxtb	r2, r3
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d45a:	f7fd fb9d 	bl	800ab98 <get_fattime>
 800d45e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d460:	68ba      	ldr	r2, [r7, #8]
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d466:	4619      	mov	r1, r3
 800d468:	4610      	mov	r0, r2
 800d46a:	f7fe f925 	bl	800b6b8 <move_window>
 800d46e:	4603      	mov	r3, r0
 800d470:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800d472:	7dfb      	ldrb	r3, [r7, #23]
 800d474:	2b00      	cmp	r3, #0
 800d476:	d138      	bne.n	800d4ea <f_sync+0xf2>
					dir = fp->dir_ptr;
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d47c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	330b      	adds	r3, #11
 800d482:	781a      	ldrb	r2, [r3, #0]
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	330b      	adds	r3, #11
 800d488:	f042 0220 	orr.w	r2, r2, #32
 800d48c:	b2d2      	uxtb	r2, r2
 800d48e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	6818      	ldr	r0, [r3, #0]
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	689b      	ldr	r3, [r3, #8]
 800d498:	461a      	mov	r2, r3
 800d49a:	68f9      	ldr	r1, [r7, #12]
 800d49c:	f7fe fe2f 	bl	800c0fe <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	f103 021c 	add.w	r2, r3, #28
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	68db      	ldr	r3, [r3, #12]
 800d4aa:	4619      	mov	r1, r3
 800d4ac:	4610      	mov	r0, r2
 800d4ae:	f7fd fea9 	bl	800b204 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	3316      	adds	r3, #22
 800d4b6:	6939      	ldr	r1, [r7, #16]
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	f7fd fea3 	bl	800b204 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	3312      	adds	r3, #18
 800d4c2:	2100      	movs	r1, #0
 800d4c4:	4618      	mov	r0, r3
 800d4c6:	f7fd fe82 	bl	800b1ce <st_word>
					fs->wflag = 1;
 800d4ca:	68bb      	ldr	r3, [r7, #8]
 800d4cc:	2201      	movs	r2, #1
 800d4ce:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d4d0:	68bb      	ldr	r3, [r7, #8]
 800d4d2:	4618      	mov	r0, r3
 800d4d4:	f7fe f91e 	bl	800b714 <sync_fs>
 800d4d8:	4603      	mov	r3, r0
 800d4da:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	7d1b      	ldrb	r3, [r3, #20]
 800d4e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d4e4:	b2da      	uxtb	r2, r3
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800d4ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	3718      	adds	r7, #24
 800d4f0:	46bd      	mov	sp, r7
 800d4f2:	bd80      	pop	{r7, pc}

0800d4f4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800d4f4:	b580      	push	{r7, lr}
 800d4f6:	b084      	sub	sp, #16
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d4fc:	6878      	ldr	r0, [r7, #4]
 800d4fe:	f7ff ff7b 	bl	800d3f8 <f_sync>
 800d502:	4603      	mov	r3, r0
 800d504:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d506:	7bfb      	ldrb	r3, [r7, #15]
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d118      	bne.n	800d53e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	f107 0208 	add.w	r2, r7, #8
 800d512:	4611      	mov	r1, r2
 800d514:	4618      	mov	r0, r3
 800d516:	f7ff fa85 	bl	800ca24 <validate>
 800d51a:	4603      	mov	r3, r0
 800d51c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d51e:	7bfb      	ldrb	r3, [r7, #15]
 800d520:	2b00      	cmp	r3, #0
 800d522:	d10c      	bne.n	800d53e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	691b      	ldr	r3, [r3, #16]
 800d528:	4618      	mov	r0, r3
 800d52a:	f7fe f821 	bl	800b570 <dec_lock>
 800d52e:	4603      	mov	r3, r0
 800d530:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d532:	7bfb      	ldrb	r3, [r7, #15]
 800d534:	2b00      	cmp	r3, #0
 800d536:	d102      	bne.n	800d53e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	2200      	movs	r2, #0
 800d53c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800d53e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d540:	4618      	mov	r0, r3
 800d542:	3710      	adds	r7, #16
 800d544:	46bd      	mov	sp, r7
 800d546:	bd80      	pop	{r7, pc}

0800d548 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800d548:	b580      	push	{r7, lr}
 800d54a:	b090      	sub	sp, #64	@ 0x40
 800d54c:	af00      	add	r7, sp, #0
 800d54e:	6078      	str	r0, [r7, #4]
 800d550:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	f107 0208 	add.w	r2, r7, #8
 800d558:	4611      	mov	r1, r2
 800d55a:	4618      	mov	r0, r3
 800d55c:	f7ff fa62 	bl	800ca24 <validate>
 800d560:	4603      	mov	r3, r0
 800d562:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800d566:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d103      	bne.n	800d576 <f_lseek+0x2e>
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	7d5b      	ldrb	r3, [r3, #21]
 800d572:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800d576:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d002      	beq.n	800d584 <f_lseek+0x3c>
 800d57e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d582:	e1e6      	b.n	800d952 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d588:	2b00      	cmp	r3, #0
 800d58a:	f000 80d1 	beq.w	800d730 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800d58e:	683b      	ldr	r3, [r7, #0]
 800d590:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d594:	d15a      	bne.n	800d64c <f_lseek+0x104>
			tbl = fp->cltbl;
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d59a:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800d59c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d59e:	1d1a      	adds	r2, r3, #4
 800d5a0:	627a      	str	r2, [r7, #36]	@ 0x24
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	617b      	str	r3, [r7, #20]
 800d5a6:	2302      	movs	r3, #2
 800d5a8:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	689b      	ldr	r3, [r3, #8]
 800d5ae:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800d5b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d03a      	beq.n	800d62c <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800d5b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5b8:	613b      	str	r3, [r7, #16]
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d5be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5c0:	3302      	adds	r3, #2
 800d5c2:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800d5c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5c6:	60fb      	str	r3, [r7, #12]
 800d5c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5ca:	3301      	adds	r3, #1
 800d5cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d5d2:	4618      	mov	r0, r3
 800d5d4:	f7fe f92b 	bl	800b82e <get_fat>
 800d5d8:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800d5da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5dc:	2b01      	cmp	r3, #1
 800d5de:	d804      	bhi.n	800d5ea <f_lseek+0xa2>
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	2202      	movs	r2, #2
 800d5e4:	755a      	strb	r2, [r3, #21]
 800d5e6:	2302      	movs	r3, #2
 800d5e8:	e1b3      	b.n	800d952 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d5ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5f0:	d104      	bne.n	800d5fc <f_lseek+0xb4>
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	2201      	movs	r2, #1
 800d5f6:	755a      	strb	r2, [r3, #21]
 800d5f8:	2301      	movs	r3, #1
 800d5fa:	e1aa      	b.n	800d952 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	3301      	adds	r3, #1
 800d600:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d602:	429a      	cmp	r2, r3
 800d604:	d0de      	beq.n	800d5c4 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800d606:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d608:	697b      	ldr	r3, [r7, #20]
 800d60a:	429a      	cmp	r2, r3
 800d60c:	d809      	bhi.n	800d622 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800d60e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d610:	1d1a      	adds	r2, r3, #4
 800d612:	627a      	str	r2, [r7, #36]	@ 0x24
 800d614:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d616:	601a      	str	r2, [r3, #0]
 800d618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d61a:	1d1a      	adds	r2, r3, #4
 800d61c:	627a      	str	r2, [r7, #36]	@ 0x24
 800d61e:	693a      	ldr	r2, [r7, #16]
 800d620:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800d622:	68bb      	ldr	r3, [r7, #8]
 800d624:	695b      	ldr	r3, [r3, #20]
 800d626:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d628:	429a      	cmp	r2, r3
 800d62a:	d3c4      	bcc.n	800d5b6 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d630:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d632:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800d634:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d636:	697b      	ldr	r3, [r7, #20]
 800d638:	429a      	cmp	r2, r3
 800d63a:	d803      	bhi.n	800d644 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800d63c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d63e:	2200      	movs	r2, #0
 800d640:	601a      	str	r2, [r3, #0]
 800d642:	e184      	b.n	800d94e <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800d644:	2311      	movs	r3, #17
 800d646:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800d64a:	e180      	b.n	800d94e <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	68db      	ldr	r3, [r3, #12]
 800d650:	683a      	ldr	r2, [r7, #0]
 800d652:	429a      	cmp	r2, r3
 800d654:	d902      	bls.n	800d65c <f_lseek+0x114>
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	68db      	ldr	r3, [r3, #12]
 800d65a:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	683a      	ldr	r2, [r7, #0]
 800d660:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800d662:	683b      	ldr	r3, [r7, #0]
 800d664:	2b00      	cmp	r3, #0
 800d666:	f000 8172 	beq.w	800d94e <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800d66a:	683b      	ldr	r3, [r7, #0]
 800d66c:	3b01      	subs	r3, #1
 800d66e:	4619      	mov	r1, r3
 800d670:	6878      	ldr	r0, [r7, #4]
 800d672:	f7fe fb6a 	bl	800bd4a <clmt_clust>
 800d676:	4602      	mov	r2, r0
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800d67c:	68ba      	ldr	r2, [r7, #8]
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	69db      	ldr	r3, [r3, #28]
 800d682:	4619      	mov	r1, r3
 800d684:	4610      	mov	r0, r2
 800d686:	f7fe f8b3 	bl	800b7f0 <clust2sect>
 800d68a:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800d68c:	69bb      	ldr	r3, [r7, #24]
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d104      	bne.n	800d69c <f_lseek+0x154>
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	2202      	movs	r2, #2
 800d696:	755a      	strb	r2, [r3, #21]
 800d698:	2302      	movs	r3, #2
 800d69a:	e15a      	b.n	800d952 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800d69c:	683b      	ldr	r3, [r7, #0]
 800d69e:	3b01      	subs	r3, #1
 800d6a0:	0a5b      	lsrs	r3, r3, #9
 800d6a2:	68ba      	ldr	r2, [r7, #8]
 800d6a4:	8952      	ldrh	r2, [r2, #10]
 800d6a6:	3a01      	subs	r2, #1
 800d6a8:	4013      	ands	r3, r2
 800d6aa:	69ba      	ldr	r2, [r7, #24]
 800d6ac:	4413      	add	r3, r2
 800d6ae:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	699b      	ldr	r3, [r3, #24]
 800d6b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	f000 8148 	beq.w	800d94e <f_lseek+0x406>
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	6a1b      	ldr	r3, [r3, #32]
 800d6c2:	69ba      	ldr	r2, [r7, #24]
 800d6c4:	429a      	cmp	r2, r3
 800d6c6:	f000 8142 	beq.w	800d94e <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	7d1b      	ldrb	r3, [r3, #20]
 800d6ce:	b25b      	sxtb	r3, r3
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	da18      	bge.n	800d706 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d6d4:	68bb      	ldr	r3, [r7, #8]
 800d6d6:	7858      	ldrb	r0, [r3, #1]
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	6a1a      	ldr	r2, [r3, #32]
 800d6e2:	2301      	movs	r3, #1
 800d6e4:	f7fd fcfa 	bl	800b0dc <disk_write>
 800d6e8:	4603      	mov	r3, r0
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d004      	beq.n	800d6f8 <f_lseek+0x1b0>
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	2201      	movs	r2, #1
 800d6f2:	755a      	strb	r2, [r3, #21]
 800d6f4:	2301      	movs	r3, #1
 800d6f6:	e12c      	b.n	800d952 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	7d1b      	ldrb	r3, [r3, #20]
 800d6fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d700:	b2da      	uxtb	r2, r3
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800d706:	68bb      	ldr	r3, [r7, #8]
 800d708:	7858      	ldrb	r0, [r3, #1]
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d710:	2301      	movs	r3, #1
 800d712:	69ba      	ldr	r2, [r7, #24]
 800d714:	f7fd fcc2 	bl	800b09c <disk_read>
 800d718:	4603      	mov	r3, r0
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d004      	beq.n	800d728 <f_lseek+0x1e0>
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	2201      	movs	r2, #1
 800d722:	755a      	strb	r2, [r3, #21]
 800d724:	2301      	movs	r3, #1
 800d726:	e114      	b.n	800d952 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	69ba      	ldr	r2, [r7, #24]
 800d72c:	621a      	str	r2, [r3, #32]
 800d72e:	e10e      	b.n	800d94e <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	68db      	ldr	r3, [r3, #12]
 800d734:	683a      	ldr	r2, [r7, #0]
 800d736:	429a      	cmp	r2, r3
 800d738:	d908      	bls.n	800d74c <f_lseek+0x204>
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	7d1b      	ldrb	r3, [r3, #20]
 800d73e:	f003 0302 	and.w	r3, r3, #2
 800d742:	2b00      	cmp	r3, #0
 800d744:	d102      	bne.n	800d74c <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	68db      	ldr	r3, [r3, #12]
 800d74a:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	699b      	ldr	r3, [r3, #24]
 800d750:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800d752:	2300      	movs	r3, #0
 800d754:	637b      	str	r3, [r7, #52]	@ 0x34
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d75a:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800d75c:	683b      	ldr	r3, [r7, #0]
 800d75e:	2b00      	cmp	r3, #0
 800d760:	f000 80a7 	beq.w	800d8b2 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800d764:	68bb      	ldr	r3, [r7, #8]
 800d766:	895b      	ldrh	r3, [r3, #10]
 800d768:	025b      	lsls	r3, r3, #9
 800d76a:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800d76c:	6a3b      	ldr	r3, [r7, #32]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d01b      	beq.n	800d7aa <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800d772:	683b      	ldr	r3, [r7, #0]
 800d774:	1e5a      	subs	r2, r3, #1
 800d776:	69fb      	ldr	r3, [r7, #28]
 800d778:	fbb2 f2f3 	udiv	r2, r2, r3
 800d77c:	6a3b      	ldr	r3, [r7, #32]
 800d77e:	1e59      	subs	r1, r3, #1
 800d780:	69fb      	ldr	r3, [r7, #28]
 800d782:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800d786:	429a      	cmp	r2, r3
 800d788:	d30f      	bcc.n	800d7aa <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800d78a:	6a3b      	ldr	r3, [r7, #32]
 800d78c:	1e5a      	subs	r2, r3, #1
 800d78e:	69fb      	ldr	r3, [r7, #28]
 800d790:	425b      	negs	r3, r3
 800d792:	401a      	ands	r2, r3
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	699b      	ldr	r3, [r3, #24]
 800d79c:	683a      	ldr	r2, [r7, #0]
 800d79e:	1ad3      	subs	r3, r2, r3
 800d7a0:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	69db      	ldr	r3, [r3, #28]
 800d7a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d7a8:	e022      	b.n	800d7f0 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	689b      	ldr	r3, [r3, #8]
 800d7ae:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800d7b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d119      	bne.n	800d7ea <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	2100      	movs	r1, #0
 800d7ba:	4618      	mov	r0, r3
 800d7bc:	f7fe fa2d 	bl	800bc1a <create_chain>
 800d7c0:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d7c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7c4:	2b01      	cmp	r3, #1
 800d7c6:	d104      	bne.n	800d7d2 <f_lseek+0x28a>
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	2202      	movs	r2, #2
 800d7cc:	755a      	strb	r2, [r3, #21]
 800d7ce:	2302      	movs	r3, #2
 800d7d0:	e0bf      	b.n	800d952 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d7d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7d8:	d104      	bne.n	800d7e4 <f_lseek+0x29c>
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	2201      	movs	r2, #1
 800d7de:	755a      	strb	r2, [r3, #21]
 800d7e0:	2301      	movs	r3, #1
 800d7e2:	e0b6      	b.n	800d952 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d7e8:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d7ee:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800d7f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d05d      	beq.n	800d8b2 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800d7f6:	e03a      	b.n	800d86e <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800d7f8:	683a      	ldr	r2, [r7, #0]
 800d7fa:	69fb      	ldr	r3, [r7, #28]
 800d7fc:	1ad3      	subs	r3, r2, r3
 800d7fe:	603b      	str	r3, [r7, #0]
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	699a      	ldr	r2, [r3, #24]
 800d804:	69fb      	ldr	r3, [r7, #28]
 800d806:	441a      	add	r2, r3
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	7d1b      	ldrb	r3, [r3, #20]
 800d810:	f003 0302 	and.w	r3, r3, #2
 800d814:	2b00      	cmp	r3, #0
 800d816:	d00b      	beq.n	800d830 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d81c:	4618      	mov	r0, r3
 800d81e:	f7fe f9fc 	bl	800bc1a <create_chain>
 800d822:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800d824:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d826:	2b00      	cmp	r3, #0
 800d828:	d108      	bne.n	800d83c <f_lseek+0x2f4>
							ofs = 0; break;
 800d82a:	2300      	movs	r3, #0
 800d82c:	603b      	str	r3, [r7, #0]
 800d82e:	e022      	b.n	800d876 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d834:	4618      	mov	r0, r3
 800d836:	f7fd fffa 	bl	800b82e <get_fat>
 800d83a:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d83c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d83e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d842:	d104      	bne.n	800d84e <f_lseek+0x306>
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	2201      	movs	r2, #1
 800d848:	755a      	strb	r2, [r3, #21]
 800d84a:	2301      	movs	r3, #1
 800d84c:	e081      	b.n	800d952 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800d84e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d850:	2b01      	cmp	r3, #1
 800d852:	d904      	bls.n	800d85e <f_lseek+0x316>
 800d854:	68bb      	ldr	r3, [r7, #8]
 800d856:	695b      	ldr	r3, [r3, #20]
 800d858:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d85a:	429a      	cmp	r2, r3
 800d85c:	d304      	bcc.n	800d868 <f_lseek+0x320>
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	2202      	movs	r2, #2
 800d862:	755a      	strb	r2, [r3, #21]
 800d864:	2302      	movs	r3, #2
 800d866:	e074      	b.n	800d952 <f_lseek+0x40a>
					fp->clust = clst;
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d86c:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800d86e:	683a      	ldr	r2, [r7, #0]
 800d870:	69fb      	ldr	r3, [r7, #28]
 800d872:	429a      	cmp	r2, r3
 800d874:	d8c0      	bhi.n	800d7f8 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	699a      	ldr	r2, [r3, #24]
 800d87a:	683b      	ldr	r3, [r7, #0]
 800d87c:	441a      	add	r2, r3
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800d882:	683b      	ldr	r3, [r7, #0]
 800d884:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d012      	beq.n	800d8b2 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800d88c:	68bb      	ldr	r3, [r7, #8]
 800d88e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d890:	4618      	mov	r0, r3
 800d892:	f7fd ffad 	bl	800b7f0 <clust2sect>
 800d896:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800d898:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d104      	bne.n	800d8a8 <f_lseek+0x360>
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	2202      	movs	r2, #2
 800d8a2:	755a      	strb	r2, [r3, #21]
 800d8a4:	2302      	movs	r3, #2
 800d8a6:	e054      	b.n	800d952 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800d8a8:	683b      	ldr	r3, [r7, #0]
 800d8aa:	0a5b      	lsrs	r3, r3, #9
 800d8ac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d8ae:	4413      	add	r3, r2
 800d8b0:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	699a      	ldr	r2, [r3, #24]
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	68db      	ldr	r3, [r3, #12]
 800d8ba:	429a      	cmp	r2, r3
 800d8bc:	d90a      	bls.n	800d8d4 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	699a      	ldr	r2, [r3, #24]
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	7d1b      	ldrb	r3, [r3, #20]
 800d8ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d8ce:	b2da      	uxtb	r2, r3
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	699b      	ldr	r3, [r3, #24]
 800d8d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d036      	beq.n	800d94e <f_lseek+0x406>
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	6a1b      	ldr	r3, [r3, #32]
 800d8e4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d8e6:	429a      	cmp	r2, r3
 800d8e8:	d031      	beq.n	800d94e <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	7d1b      	ldrb	r3, [r3, #20]
 800d8ee:	b25b      	sxtb	r3, r3
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	da18      	bge.n	800d926 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d8f4:	68bb      	ldr	r3, [r7, #8]
 800d8f6:	7858      	ldrb	r0, [r3, #1]
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	6a1a      	ldr	r2, [r3, #32]
 800d902:	2301      	movs	r3, #1
 800d904:	f7fd fbea 	bl	800b0dc <disk_write>
 800d908:	4603      	mov	r3, r0
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d004      	beq.n	800d918 <f_lseek+0x3d0>
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	2201      	movs	r2, #1
 800d912:	755a      	strb	r2, [r3, #21]
 800d914:	2301      	movs	r3, #1
 800d916:	e01c      	b.n	800d952 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	7d1b      	ldrb	r3, [r3, #20]
 800d91c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d920:	b2da      	uxtb	r2, r3
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d926:	68bb      	ldr	r3, [r7, #8]
 800d928:	7858      	ldrb	r0, [r3, #1]
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d930:	2301      	movs	r3, #1
 800d932:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d934:	f7fd fbb2 	bl	800b09c <disk_read>
 800d938:	4603      	mov	r3, r0
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d004      	beq.n	800d948 <f_lseek+0x400>
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	2201      	movs	r2, #1
 800d942:	755a      	strb	r2, [r3, #21]
 800d944:	2301      	movs	r3, #1
 800d946:	e004      	b.n	800d952 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d94c:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800d94e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800d952:	4618      	mov	r0, r3
 800d954:	3740      	adds	r7, #64	@ 0x40
 800d956:	46bd      	mov	sp, r7
 800d958:	bd80      	pop	{r7, pc}
	...

0800d95c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d95c:	b480      	push	{r7}
 800d95e:	b087      	sub	sp, #28
 800d960:	af00      	add	r7, sp, #0
 800d962:	60f8      	str	r0, [r7, #12]
 800d964:	60b9      	str	r1, [r7, #8]
 800d966:	4613      	mov	r3, r2
 800d968:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d96a:	2301      	movs	r3, #1
 800d96c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d96e:	2300      	movs	r3, #0
 800d970:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d972:	4b1f      	ldr	r3, [pc, #124]	@ (800d9f0 <FATFS_LinkDriverEx+0x94>)
 800d974:	7a5b      	ldrb	r3, [r3, #9]
 800d976:	b2db      	uxtb	r3, r3
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d131      	bne.n	800d9e0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d97c:	4b1c      	ldr	r3, [pc, #112]	@ (800d9f0 <FATFS_LinkDriverEx+0x94>)
 800d97e:	7a5b      	ldrb	r3, [r3, #9]
 800d980:	b2db      	uxtb	r3, r3
 800d982:	461a      	mov	r2, r3
 800d984:	4b1a      	ldr	r3, [pc, #104]	@ (800d9f0 <FATFS_LinkDriverEx+0x94>)
 800d986:	2100      	movs	r1, #0
 800d988:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d98a:	4b19      	ldr	r3, [pc, #100]	@ (800d9f0 <FATFS_LinkDriverEx+0x94>)
 800d98c:	7a5b      	ldrb	r3, [r3, #9]
 800d98e:	b2db      	uxtb	r3, r3
 800d990:	4a17      	ldr	r2, [pc, #92]	@ (800d9f0 <FATFS_LinkDriverEx+0x94>)
 800d992:	009b      	lsls	r3, r3, #2
 800d994:	4413      	add	r3, r2
 800d996:	68fa      	ldr	r2, [r7, #12]
 800d998:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d99a:	4b15      	ldr	r3, [pc, #84]	@ (800d9f0 <FATFS_LinkDriverEx+0x94>)
 800d99c:	7a5b      	ldrb	r3, [r3, #9]
 800d99e:	b2db      	uxtb	r3, r3
 800d9a0:	461a      	mov	r2, r3
 800d9a2:	4b13      	ldr	r3, [pc, #76]	@ (800d9f0 <FATFS_LinkDriverEx+0x94>)
 800d9a4:	4413      	add	r3, r2
 800d9a6:	79fa      	ldrb	r2, [r7, #7]
 800d9a8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d9aa:	4b11      	ldr	r3, [pc, #68]	@ (800d9f0 <FATFS_LinkDriverEx+0x94>)
 800d9ac:	7a5b      	ldrb	r3, [r3, #9]
 800d9ae:	b2db      	uxtb	r3, r3
 800d9b0:	1c5a      	adds	r2, r3, #1
 800d9b2:	b2d1      	uxtb	r1, r2
 800d9b4:	4a0e      	ldr	r2, [pc, #56]	@ (800d9f0 <FATFS_LinkDriverEx+0x94>)
 800d9b6:	7251      	strb	r1, [r2, #9]
 800d9b8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d9ba:	7dbb      	ldrb	r3, [r7, #22]
 800d9bc:	3330      	adds	r3, #48	@ 0x30
 800d9be:	b2da      	uxtb	r2, r3
 800d9c0:	68bb      	ldr	r3, [r7, #8]
 800d9c2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d9c4:	68bb      	ldr	r3, [r7, #8]
 800d9c6:	3301      	adds	r3, #1
 800d9c8:	223a      	movs	r2, #58	@ 0x3a
 800d9ca:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d9cc:	68bb      	ldr	r3, [r7, #8]
 800d9ce:	3302      	adds	r3, #2
 800d9d0:	222f      	movs	r2, #47	@ 0x2f
 800d9d2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d9d4:	68bb      	ldr	r3, [r7, #8]
 800d9d6:	3303      	adds	r3, #3
 800d9d8:	2200      	movs	r2, #0
 800d9da:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d9dc:	2300      	movs	r3, #0
 800d9de:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d9e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d9e2:	4618      	mov	r0, r3
 800d9e4:	371c      	adds	r7, #28
 800d9e6:	46bd      	mov	sp, r7
 800d9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ec:	4770      	bx	lr
 800d9ee:	bf00      	nop
 800d9f0:	20005bd8 	.word	0x20005bd8

0800d9f4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d9f4:	b580      	push	{r7, lr}
 800d9f6:	b082      	sub	sp, #8
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	6078      	str	r0, [r7, #4]
 800d9fc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d9fe:	2200      	movs	r2, #0
 800da00:	6839      	ldr	r1, [r7, #0]
 800da02:	6878      	ldr	r0, [r7, #4]
 800da04:	f7ff ffaa 	bl	800d95c <FATFS_LinkDriverEx>
 800da08:	4603      	mov	r3, r0
}
 800da0a:	4618      	mov	r0, r3
 800da0c:	3708      	adds	r7, #8
 800da0e:	46bd      	mov	sp, r7
 800da10:	bd80      	pop	{r7, pc}
	...

0800da14 <network_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 800da14:	b580      	push	{r7, lr}
 800da16:	b082      	sub	sp, #8
 800da18:	af00      	add	r7, sp, #0
 800da1a:	6078      	str	r0, [r7, #4]
 800da1c:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 800da1e:	683a      	ldr	r2, [r7, #0]
 800da20:	2101      	movs	r1, #1
 800da22:	4831      	ldr	r0, [pc, #196]	@ (800dae8 <network_configure_activations+0xd4>)
 800da24:	f000 faa6 	bl	800df74 <ai_platform_get_activations_map>
 800da28:	4603      	mov	r3, r0
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d051      	beq.n	800dad2 <network_configure_activations+0xbe>
    /* Updating activations (byte) offsets */
    
    serving_default_keras_tensor0_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800da2e:	4b2e      	ldr	r3, [pc, #184]	@ (800dae8 <network_configure_activations+0xd4>)
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	4a2e      	ldr	r2, [pc, #184]	@ (800daec <network_configure_activations+0xd8>)
 800da34:	6093      	str	r3, [r2, #8]
    serving_default_keras_tensor0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800da36:	4b2c      	ldr	r3, [pc, #176]	@ (800dae8 <network_configure_activations+0xd4>)
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	4a2c      	ldr	r2, [pc, #176]	@ (800daec <network_configure_activations+0xd8>)
 800da3c:	60d3      	str	r3, [r2, #12]
    upsample_0_output_array.data = AI_PTR(g_network_activations_map[0] + 63984);
 800da3e:	4b2a      	ldr	r3, [pc, #168]	@ (800dae8 <network_configure_activations+0xd4>)
 800da40:	681a      	ldr	r2, [r3, #0]
 800da42:	f64f 13f0 	movw	r3, #63984	@ 0xf9f0
 800da46:	4413      	add	r3, r2
 800da48:	4a29      	ldr	r2, [pc, #164]	@ (800daf0 <network_configure_activations+0xdc>)
 800da4a:	6093      	str	r3, [r2, #8]
    upsample_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 63984);
 800da4c:	4b26      	ldr	r3, [pc, #152]	@ (800dae8 <network_configure_activations+0xd4>)
 800da4e:	681a      	ldr	r2, [r3, #0]
 800da50:	f64f 13f0 	movw	r3, #63984	@ 0xf9f0
 800da54:	4413      	add	r3, r2
 800da56:	4a26      	ldr	r2, [pc, #152]	@ (800daf0 <network_configure_activations+0xdc>)
 800da58:	60d3      	str	r3, [r2, #12]
    conv2d_1_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800da5a:	4b23      	ldr	r3, [pc, #140]	@ (800dae8 <network_configure_activations+0xd4>)
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	4a25      	ldr	r2, [pc, #148]	@ (800daf4 <network_configure_activations+0xe0>)
 800da60:	6093      	str	r3, [r2, #8]
    conv2d_1_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800da62:	4b21      	ldr	r3, [pc, #132]	@ (800dae8 <network_configure_activations+0xd4>)
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	4a23      	ldr	r2, [pc, #140]	@ (800daf4 <network_configure_activations+0xe0>)
 800da68:	60d3      	str	r3, [r2, #12]
    conv2d_1_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 36);
 800da6a:	4b1f      	ldr	r3, [pc, #124]	@ (800dae8 <network_configure_activations+0xd4>)
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	3324      	adds	r3, #36	@ 0x24
 800da70:	4a21      	ldr	r2, [pc, #132]	@ (800daf8 <network_configure_activations+0xe4>)
 800da72:	6093      	str	r3, [r2, #8]
    conv2d_1_scratch1_array.data_start = AI_PTR(g_network_activations_map[0] + 36);
 800da74:	4b1c      	ldr	r3, [pc, #112]	@ (800dae8 <network_configure_activations+0xd4>)
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	3324      	adds	r3, #36	@ 0x24
 800da7a:	4a1f      	ldr	r2, [pc, #124]	@ (800daf8 <network_configure_activations+0xe4>)
 800da7c:	60d3      	str	r3, [r2, #12]
    conv2d_1_output_array.data = AI_PTR(g_network_activations_map[0] + 3364);
 800da7e:	4b1a      	ldr	r3, [pc, #104]	@ (800dae8 <network_configure_activations+0xd4>)
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	f603 5324 	addw	r3, r3, #3364	@ 0xd24
 800da86:	4a1d      	ldr	r2, [pc, #116]	@ (800dafc <network_configure_activations+0xe8>)
 800da88:	6093      	str	r3, [r2, #8]
    conv2d_1_output_array.data_start = AI_PTR(g_network_activations_map[0] + 3364);
 800da8a:	4b17      	ldr	r3, [pc, #92]	@ (800dae8 <network_configure_activations+0xd4>)
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	f603 5324 	addw	r3, r3, #3364	@ 0xd24
 800da92:	4a1a      	ldr	r2, [pc, #104]	@ (800dafc <network_configure_activations+0xe8>)
 800da94:	60d3      	str	r3, [r2, #12]
    gemm_4_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800da96:	4b14      	ldr	r3, [pc, #80]	@ (800dae8 <network_configure_activations+0xd4>)
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	4a19      	ldr	r2, [pc, #100]	@ (800db00 <network_configure_activations+0xec>)
 800da9c:	6093      	str	r3, [r2, #8]
    gemm_4_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800da9e:	4b12      	ldr	r3, [pc, #72]	@ (800dae8 <network_configure_activations+0xd4>)
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	4a17      	ldr	r2, [pc, #92]	@ (800db00 <network_configure_activations+0xec>)
 800daa4:	60d3      	str	r3, [r2, #12]
    nl_4_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 256);
 800daa6:	4b10      	ldr	r3, [pc, #64]	@ (800dae8 <network_configure_activations+0xd4>)
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800daae:	4a15      	ldr	r2, [pc, #84]	@ (800db04 <network_configure_activations+0xf0>)
 800dab0:	6093      	str	r3, [r2, #8]
    nl_4_nl_output_array.data_start = AI_PTR(g_network_activations_map[0] + 256);
 800dab2:	4b0d      	ldr	r3, [pc, #52]	@ (800dae8 <network_configure_activations+0xd4>)
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800daba:	4a12      	ldr	r2, [pc, #72]	@ (800db04 <network_configure_activations+0xf0>)
 800dabc:	60d3      	str	r3, [r2, #12]
    gemm_5_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800dabe:	4b0a      	ldr	r3, [pc, #40]	@ (800dae8 <network_configure_activations+0xd4>)
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	4a11      	ldr	r2, [pc, #68]	@ (800db08 <network_configure_activations+0xf4>)
 800dac4:	6093      	str	r3, [r2, #8]
    gemm_5_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800dac6:	4b08      	ldr	r3, [pc, #32]	@ (800dae8 <network_configure_activations+0xd4>)
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	4a0f      	ldr	r2, [pc, #60]	@ (800db08 <network_configure_activations+0xf4>)
 800dacc:	60d3      	str	r3, [r2, #12]
    return true;
 800dace:	2301      	movs	r3, #1
 800dad0:	e005      	b.n	800dade <network_configure_activations+0xca>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 800dad2:	2213      	movs	r2, #19
 800dad4:	2130      	movs	r1, #48	@ 0x30
 800dad6:	6878      	ldr	r0, [r7, #4]
 800dad8:	f000 fab0 	bl	800e03c <ai_platform_network_set_error>
  return false;
 800dadc:	2300      	movs	r3, #0
}
 800dade:	4618      	mov	r0, r3
 800dae0:	3708      	adds	r7, #8
 800dae2:	46bd      	mov	sp, r7
 800dae4:	bd80      	pop	{r7, pc}
 800dae6:	bf00      	nop
 800dae8:	20005be4 	.word	0x20005be4
 800daec:	2000004c 	.word	0x2000004c
 800daf0:	2000005c 	.word	0x2000005c
 800daf4:	2000010c 	.word	0x2000010c
 800daf8:	2000011c 	.word	0x2000011c
 800dafc:	2000006c 	.word	0x2000006c
 800db00:	2000007c 	.word	0x2000007c
 800db04:	2000008c 	.word	0x2000008c
 800db08:	2000009c 	.word	0x2000009c

0800db0c <network_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 800db0c:	b580      	push	{r7, lr}
 800db0e:	b082      	sub	sp, #8
 800db10:	af00      	add	r7, sp, #0
 800db12:	6078      	str	r0, [r7, #4]
 800db14:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 800db16:	683a      	ldr	r2, [r7, #0]
 800db18:	2101      	movs	r1, #1
 800db1a:	483d      	ldr	r0, [pc, #244]	@ (800dc10 <network_configure_weights+0x104>)
 800db1c:	f000 f9d2 	bl	800dec4 <ai_platform_get_weights_map>
 800db20:	4603      	mov	r3, r0
 800db22:	2b00      	cmp	r3, #0
 800db24:	d069      	beq.n	800dbfa <network_configure_weights+0xee>
    /* Updating weights (byte) offsets */
    
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 800db26:	4b3b      	ldr	r3, [pc, #236]	@ (800dc14 <network_configure_weights+0x108>)
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800db2e:	4a39      	ldr	r2, [pc, #228]	@ (800dc14 <network_configure_weights+0x108>)
 800db30:	6013      	str	r3, [r2, #0]
    conv2d_1_weights_array.data = AI_PTR(g_network_weights_map[0] + 0);
 800db32:	4b37      	ldr	r3, [pc, #220]	@ (800dc10 <network_configure_weights+0x104>)
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	4a37      	ldr	r2, [pc, #220]	@ (800dc14 <network_configure_weights+0x108>)
 800db38:	6093      	str	r3, [r2, #8]
    conv2d_1_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 0);
 800db3a:	4b35      	ldr	r3, [pc, #212]	@ (800dc10 <network_configure_weights+0x104>)
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	4a35      	ldr	r2, [pc, #212]	@ (800dc14 <network_configure_weights+0x108>)
 800db40:	60d3      	str	r3, [r2, #12]
    conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 800db42:	4b35      	ldr	r3, [pc, #212]	@ (800dc18 <network_configure_weights+0x10c>)
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800db4a:	4a33      	ldr	r2, [pc, #204]	@ (800dc18 <network_configure_weights+0x10c>)
 800db4c:	6013      	str	r3, [r2, #0]
    conv2d_1_bias_array.data = AI_PTR(g_network_weights_map[0] + 576);
 800db4e:	4b30      	ldr	r3, [pc, #192]	@ (800dc10 <network_configure_weights+0x104>)
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 800db56:	4a30      	ldr	r2, [pc, #192]	@ (800dc18 <network_configure_weights+0x10c>)
 800db58:	6093      	str	r3, [r2, #8]
    conv2d_1_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 576);
 800db5a:	4b2d      	ldr	r3, [pc, #180]	@ (800dc10 <network_configure_weights+0x104>)
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 800db62:	4a2d      	ldr	r2, [pc, #180]	@ (800dc18 <network_configure_weights+0x10c>)
 800db64:	60d3      	str	r3, [r2, #12]
    gemm_4_weights_array.format |= AI_FMT_FLAG_CONST;
 800db66:	4b2d      	ldr	r3, [pc, #180]	@ (800dc1c <network_configure_weights+0x110>)
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800db6e:	4a2b      	ldr	r2, [pc, #172]	@ (800dc1c <network_configure_weights+0x110>)
 800db70:	6013      	str	r3, [r2, #0]
    gemm_4_weights_array.data = AI_PTR(g_network_weights_map[0] + 640);
 800db72:	4b27      	ldr	r3, [pc, #156]	@ (800dc10 <network_configure_weights+0x104>)
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 800db7a:	4a28      	ldr	r2, [pc, #160]	@ (800dc1c <network_configure_weights+0x110>)
 800db7c:	6093      	str	r3, [r2, #8]
    gemm_4_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 640);
 800db7e:	4b24      	ldr	r3, [pc, #144]	@ (800dc10 <network_configure_weights+0x104>)
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 800db86:	4a25      	ldr	r2, [pc, #148]	@ (800dc1c <network_configure_weights+0x110>)
 800db88:	60d3      	str	r3, [r2, #12]
    gemm_4_bias_array.format |= AI_FMT_FLAG_CONST;
 800db8a:	4b25      	ldr	r3, [pc, #148]	@ (800dc20 <network_configure_weights+0x114>)
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800db92:	4a23      	ldr	r2, [pc, #140]	@ (800dc20 <network_configure_weights+0x114>)
 800db94:	6013      	str	r3, [r2, #0]
    gemm_4_bias_array.data = AI_PTR(g_network_weights_map[0] + 692864);
 800db96:	4b1e      	ldr	r3, [pc, #120]	@ (800dc10 <network_configure_weights+0x104>)
 800db98:	681a      	ldr	r2, [r3, #0]
 800db9a:	4b22      	ldr	r3, [pc, #136]	@ (800dc24 <network_configure_weights+0x118>)
 800db9c:	4413      	add	r3, r2
 800db9e:	4a20      	ldr	r2, [pc, #128]	@ (800dc20 <network_configure_weights+0x114>)
 800dba0:	6093      	str	r3, [r2, #8]
    gemm_4_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 692864);
 800dba2:	4b1b      	ldr	r3, [pc, #108]	@ (800dc10 <network_configure_weights+0x104>)
 800dba4:	681a      	ldr	r2, [r3, #0]
 800dba6:	4b1f      	ldr	r3, [pc, #124]	@ (800dc24 <network_configure_weights+0x118>)
 800dba8:	4413      	add	r3, r2
 800dbaa:	4a1d      	ldr	r2, [pc, #116]	@ (800dc20 <network_configure_weights+0x114>)
 800dbac:	60d3      	str	r3, [r2, #12]
    gemm_5_weights_array.format |= AI_FMT_FLAG_CONST;
 800dbae:	4b1e      	ldr	r3, [pc, #120]	@ (800dc28 <network_configure_weights+0x11c>)
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800dbb6:	4a1c      	ldr	r2, [pc, #112]	@ (800dc28 <network_configure_weights+0x11c>)
 800dbb8:	6013      	str	r3, [r2, #0]
    gemm_5_weights_array.data = AI_PTR(g_network_weights_map[0] + 693120);
 800dbba:	4b15      	ldr	r3, [pc, #84]	@ (800dc10 <network_configure_weights+0x104>)
 800dbbc:	681a      	ldr	r2, [r3, #0]
 800dbbe:	4b1b      	ldr	r3, [pc, #108]	@ (800dc2c <network_configure_weights+0x120>)
 800dbc0:	4413      	add	r3, r2
 800dbc2:	4a19      	ldr	r2, [pc, #100]	@ (800dc28 <network_configure_weights+0x11c>)
 800dbc4:	6093      	str	r3, [r2, #8]
    gemm_5_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 693120);
 800dbc6:	4b12      	ldr	r3, [pc, #72]	@ (800dc10 <network_configure_weights+0x104>)
 800dbc8:	681a      	ldr	r2, [r3, #0]
 800dbca:	4b18      	ldr	r3, [pc, #96]	@ (800dc2c <network_configure_weights+0x120>)
 800dbcc:	4413      	add	r3, r2
 800dbce:	4a16      	ldr	r2, [pc, #88]	@ (800dc28 <network_configure_weights+0x11c>)
 800dbd0:	60d3      	str	r3, [r2, #12]
    gemm_5_bias_array.format |= AI_FMT_FLAG_CONST;
 800dbd2:	4b17      	ldr	r3, [pc, #92]	@ (800dc30 <network_configure_weights+0x124>)
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800dbda:	4a15      	ldr	r2, [pc, #84]	@ (800dc30 <network_configure_weights+0x124>)
 800dbdc:	6013      	str	r3, [r2, #0]
    gemm_5_bias_array.data = AI_PTR(g_network_weights_map[0] + 694656);
 800dbde:	4b0c      	ldr	r3, [pc, #48]	@ (800dc10 <network_configure_weights+0x104>)
 800dbe0:	681a      	ldr	r2, [r3, #0]
 800dbe2:	4b14      	ldr	r3, [pc, #80]	@ (800dc34 <network_configure_weights+0x128>)
 800dbe4:	4413      	add	r3, r2
 800dbe6:	4a12      	ldr	r2, [pc, #72]	@ (800dc30 <network_configure_weights+0x124>)
 800dbe8:	6093      	str	r3, [r2, #8]
    gemm_5_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 694656);
 800dbea:	4b09      	ldr	r3, [pc, #36]	@ (800dc10 <network_configure_weights+0x104>)
 800dbec:	681a      	ldr	r2, [r3, #0]
 800dbee:	4b11      	ldr	r3, [pc, #68]	@ (800dc34 <network_configure_weights+0x128>)
 800dbf0:	4413      	add	r3, r2
 800dbf2:	4a0f      	ldr	r2, [pc, #60]	@ (800dc30 <network_configure_weights+0x124>)
 800dbf4:	60d3      	str	r3, [r2, #12]
    return true;
 800dbf6:	2301      	movs	r3, #1
 800dbf8:	e005      	b.n	800dc06 <network_configure_weights+0xfa>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 800dbfa:	2212      	movs	r2, #18
 800dbfc:	2130      	movs	r1, #48	@ 0x30
 800dbfe:	6878      	ldr	r0, [r7, #4]
 800dc00:	f000 fa1c 	bl	800e03c <ai_platform_network_set_error>
  return false;
 800dc04:	2300      	movs	r3, #0
}
 800dc06:	4618      	mov	r0, r3
 800dc08:	3708      	adds	r7, #8
 800dc0a:	46bd      	mov	sp, r7
 800dc0c:	bd80      	pop	{r7, pc}
 800dc0e:	bf00      	nop
 800dc10:	20005be8 	.word	0x20005be8
 800dc14:	200000ac 	.word	0x200000ac
 800dc18:	200000bc 	.word	0x200000bc
 800dc1c:	200000cc 	.word	0x200000cc
 800dc20:	200000dc 	.word	0x200000dc
 800dc24:	000a9280 	.word	0x000a9280
 800dc28:	200000ec 	.word	0x200000ec
 800dc2c:	000a9380 	.word	0x000a9380
 800dc30:	200000fc 	.word	0x200000fc
 800dc34:	000a9980 	.word	0x000a9980

0800dc38 <ai_network_get_error>:
}


AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 800dc38:	b580      	push	{r7, lr}
 800dc3a:	b082      	sub	sp, #8
 800dc3c:	af00      	add	r7, sp, #0
 800dc3e:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 800dc40:	6878      	ldr	r0, [r7, #4]
 800dc42:	f000 f9ef 	bl	800e024 <ai_platform_network_get_error>
 800dc46:	4603      	mov	r3, r0
}
 800dc48:	4618      	mov	r0, r3
 800dc4a:	3708      	adds	r7, #8
 800dc4c:	46bd      	mov	sp, r7
 800dc4e:	bd80      	pop	{r7, pc}

0800dc50 <ai_network_create>:


AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800dc50:	b580      	push	{r7, lr}
 800dc52:	b084      	sub	sp, #16
 800dc54:	af02      	add	r7, sp, #8
 800dc56:	6078      	str	r0, [r7, #4]
 800dc58:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800dc5a:	2300      	movs	r3, #0
 800dc5c:	9301      	str	r3, [sp, #4]
 800dc5e:	2305      	movs	r3, #5
 800dc60:	9300      	str	r3, [sp, #0]
 800dc62:	2301      	movs	r3, #1
 800dc64:	4a04      	ldr	r2, [pc, #16]	@ (800dc78 <ai_network_create+0x28>)
 800dc66:	6839      	ldr	r1, [r7, #0]
 800dc68:	6878      	ldr	r0, [r7, #4]
 800dc6a:	f000 fadb 	bl	800e224 <ai_platform_network_create>
 800dc6e:	4603      	mov	r3, r0
    network, network_config, 
    AI_CONTEXT_OBJ(&AI_NET_OBJ_INSTANCE),
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800dc70:	4618      	mov	r0, r3
 800dc72:	3708      	adds	r7, #8
 800dc74:	46bd      	mov	sp, r7
 800dc76:	bd80      	pop	{r7, pc}
 800dc78:	2000075c 	.word	0x2000075c

0800dc7c <ai_network_inputs_get>:
}


AI_API_ENTRY
ai_buffer* ai_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 800dc7c:	b580      	push	{r7, lr}
 800dc7e:	b082      	sub	sp, #8
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	6078      	str	r0, [r7, #4]
 800dc84:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d104      	bne.n	800dc96 <ai_network_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800dc8c:	4b06      	ldr	r3, [pc, #24]	@ (800dca8 <ai_network_inputs_get+0x2c>)
 800dc8e:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	4a06      	ldr	r2, [pc, #24]	@ (800dcac <ai_network_inputs_get+0x30>)
 800dc94:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 800dc96:	6839      	ldr	r1, [r7, #0]
 800dc98:	6878      	ldr	r0, [r7, #4]
 800dc9a:	f000 f9d5 	bl	800e048 <ai_platform_inputs_get>
 800dc9e:	4603      	mov	r3, r0
}
 800dca0:	4618      	mov	r0, r3
 800dca2:	3708      	adds	r7, #8
 800dca4:	46bd      	mov	sp, r7
 800dca6:	bd80      	pop	{r7, pc}
 800dca8:	2000075c 	.word	0x2000075c
 800dcac:	a1c00100 	.word	0xa1c00100

0800dcb0 <ai_network_outputs_get>:


AI_API_ENTRY
ai_buffer* ai_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 800dcb0:	b580      	push	{r7, lr}
 800dcb2:	b082      	sub	sp, #8
 800dcb4:	af00      	add	r7, sp, #0
 800dcb6:	6078      	str	r0, [r7, #4]
 800dcb8:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d104      	bne.n	800dcca <ai_network_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800dcc0:	4b06      	ldr	r3, [pc, #24]	@ (800dcdc <ai_network_outputs_get+0x2c>)
 800dcc2:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	4a06      	ldr	r2, [pc, #24]	@ (800dce0 <ai_network_outputs_get+0x30>)
 800dcc8:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 800dcca:	6839      	ldr	r1, [r7, #0]
 800dccc:	6878      	ldr	r0, [r7, #4]
 800dcce:	f000 fa33 	bl	800e138 <ai_platform_outputs_get>
 800dcd2:	4603      	mov	r3, r0
}
 800dcd4:	4618      	mov	r0, r3
 800dcd6:	3708      	adds	r7, #8
 800dcd8:	46bd      	mov	sp, r7
 800dcda:	bd80      	pop	{r7, pc}
 800dcdc:	2000075c 	.word	0x2000075c
 800dce0:	a1c00100 	.word	0xa1c00100

0800dce4 <ai_network_init>:


AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 800dce4:	b580      	push	{r7, lr}
 800dce6:	b084      	sub	sp, #16
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	6078      	str	r0, [r7, #4]
 800dcec:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_OBJ(ai_platform_network_init(network, params));
 800dcee:	6839      	ldr	r1, [r7, #0]
 800dcf0:	6878      	ldr	r0, [r7, #4]
 800dcf2:	f000 fad9 	bl	800e2a8 <ai_platform_network_init>
 800dcf6:	60f8      	str	r0, [r7, #12]
  ai_bool ok = true;
 800dcf8:	2301      	movs	r3, #1
 800dcfa:	72fb      	strb	r3, [r7, #11]

  if (!net_ctx) return false;
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d101      	bne.n	800dd06 <ai_network_init+0x22>
 800dd02:	2300      	movs	r3, #0
 800dd04:	e026      	b.n	800dd54 <ai_network_init+0x70>
  ok &= network_configure_weights(net_ctx, params);
 800dd06:	6839      	ldr	r1, [r7, #0]
 800dd08:	68f8      	ldr	r0, [r7, #12]
 800dd0a:	f7ff feff 	bl	800db0c <network_configure_weights>
 800dd0e:	4603      	mov	r3, r0
 800dd10:	461a      	mov	r2, r3
 800dd12:	7afb      	ldrb	r3, [r7, #11]
 800dd14:	4013      	ands	r3, r2
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	bf14      	ite	ne
 800dd1a:	2301      	movne	r3, #1
 800dd1c:	2300      	moveq	r3, #0
 800dd1e:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, params);
 800dd20:	6839      	ldr	r1, [r7, #0]
 800dd22:	68f8      	ldr	r0, [r7, #12]
 800dd24:	f7ff fe76 	bl	800da14 <network_configure_activations>
 800dd28:	4603      	mov	r3, r0
 800dd2a:	461a      	mov	r2, r3
 800dd2c:	7afb      	ldrb	r3, [r7, #11]
 800dd2e:	4013      	ands	r3, r2
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	bf14      	ite	ne
 800dd34:	2301      	movne	r3, #1
 800dd36:	2300      	moveq	r3, #0
 800dd38:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 800dd3a:	6878      	ldr	r0, [r7, #4]
 800dd3c:	f000 fb74 	bl	800e428 <ai_platform_network_post_init>
 800dd40:	4603      	mov	r3, r0
 800dd42:	461a      	mov	r2, r3
 800dd44:	7afb      	ldrb	r3, [r7, #11]
 800dd46:	4013      	ands	r3, r2
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	bf14      	ite	ne
 800dd4c:	2301      	movne	r3, #1
 800dd4e:	2300      	moveq	r3, #0
 800dd50:	72fb      	strb	r3, [r7, #11]

  return ok;
 800dd52:	7afb      	ldrb	r3, [r7, #11]
}
 800dd54:	4618      	mov	r0, r3
 800dd56:	3710      	adds	r7, #16
 800dd58:	46bd      	mov	sp, r7
 800dd5a:	bd80      	pop	{r7, pc}

0800dd5c <ai_network_data_activations_buffer_get>:
 * @return an ai_buffer initialized struct
 */
AI_DEPRECATED
AI_API_ENTRY
ai_buffer ai_network_data_activations_buffer_get(const ai_handle ptr)
{
 800dd5c:	b4b0      	push	{r4, r5, r7}
 800dd5e:	b08f      	sub	sp, #60	@ 0x3c
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	6078      	str	r0, [r7, #4]
 800dd64:	6039      	str	r1, [r7, #0]
  ai_buffer buf = AI_BUFFER_INIT(
 800dd66:	4b15      	ldr	r3, [pc, #84]	@ (800ddbc <ai_network_data_activations_buffer_get+0x60>)
 800dd68:	61fb      	str	r3, [r7, #28]
 800dd6a:	683b      	ldr	r3, [r7, #0]
 800dd6c:	623b      	str	r3, [r7, #32]
 800dd6e:	2300      	movs	r3, #0
 800dd70:	627b      	str	r3, [r7, #36]	@ 0x24
 800dd72:	2300      	movs	r3, #0
 800dd74:	62bb      	str	r3, [r7, #40]	@ 0x28
 800dd76:	4b12      	ldr	r3, [pc, #72]	@ (800ddc0 <ai_network_data_activations_buffer_get+0x64>)
 800dd78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800dd7a:	2301      	movs	r3, #1
 800dd7c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 800dd80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd82:	2204      	movs	r2, #4
 800dd84:	f362 231f 	bfi	r3, r2, #8, #24
 800dd88:	633b      	str	r3, [r7, #48]	@ 0x30
 800dd8a:	4b0e      	ldr	r3, [pc, #56]	@ (800ddc4 <ai_network_data_activations_buffer_get+0x68>)
 800dd8c:	f107 040c 	add.w	r4, r7, #12
 800dd90:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dd92:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800dd96:	f107 030c 	add.w	r3, r7, #12
 800dd9a:	637b      	str	r3, [r7, #52]	@ 0x34
    AI_FLAG_NONE, AI_BUFFER_FORMAT_U8,
    AI_BUFFER_SHAPE_INIT(AI_SHAPE_BCWH, 4, 1, AI_NETWORK_DATA_ACTIVATIONS_SIZE, 1, AI_NETWORK_DATA_ACTIVATIONS_COUNT),
    AI_NETWORK_DATA_ACTIVATIONS_SIZE,
    NULL, ptr);
  return buf;
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	461d      	mov	r5, r3
 800dda0:	f107 041c 	add.w	r4, r7, #28
 800dda4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dda6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800dda8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800ddac:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 800ddb0:	6878      	ldr	r0, [r7, #4]
 800ddb2:	373c      	adds	r7, #60	@ 0x3c
 800ddb4:	46bd      	mov	sp, r7
 800ddb6:	bcb0      	pop	{r4, r5, r7}
 800ddb8:	4770      	bx	lr
 800ddba:	bf00      	nop
 800ddbc:	00040440 	.word	0x00040440
 800ddc0:	00010630 	.word	0x00010630
 800ddc4:	08013f20 	.word	0x08013f20

0800ddc8 <ai_network_data_weights_buffer_get>:
 * @return an ai_buffer initialized struct
 */
AI_DEPRECATED
AI_API_ENTRY
ai_buffer ai_network_data_weights_buffer_get(const ai_handle ptr)
{
 800ddc8:	b4b0      	push	{r4, r5, r7}
 800ddca:	b08f      	sub	sp, #60	@ 0x3c
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	6078      	str	r0, [r7, #4]
 800ddd0:	6039      	str	r1, [r7, #0]
  ai_buffer buf = AI_BUFFER_INIT(
 800ddd2:	4b15      	ldr	r3, [pc, #84]	@ (800de28 <ai_network_data_weights_buffer_get+0x60>)
 800ddd4:	61fb      	str	r3, [r7, #28]
 800ddd6:	683b      	ldr	r3, [r7, #0]
 800ddd8:	623b      	str	r3, [r7, #32]
 800ddda:	2300      	movs	r3, #0
 800dddc:	627b      	str	r3, [r7, #36]	@ 0x24
 800ddde:	2300      	movs	r3, #0
 800dde0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800dde2:	4b12      	ldr	r3, [pc, #72]	@ (800de2c <ai_network_data_weights_buffer_get+0x64>)
 800dde4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800dde6:	2301      	movs	r3, #1
 800dde8:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 800ddec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddee:	2204      	movs	r2, #4
 800ddf0:	f362 231f 	bfi	r3, r2, #8, #24
 800ddf4:	633b      	str	r3, [r7, #48]	@ 0x30
 800ddf6:	4b0e      	ldr	r3, [pc, #56]	@ (800de30 <ai_network_data_weights_buffer_get+0x68>)
 800ddf8:	f107 040c 	add.w	r4, r7, #12
 800ddfc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ddfe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800de02:	f107 030c 	add.w	r3, r7, #12
 800de06:	637b      	str	r3, [r7, #52]	@ 0x34
    AI_FLAG_NONE, AI_BUFFER_FORMAT_U8|AI_BUFFER_FMT_FLAG_CONST,
    AI_BUFFER_SHAPE_INIT(AI_SHAPE_BCWH, 4, 1, AI_NETWORK_DATA_WEIGHTS_SIZE, 1, AI_NETWORK_DATA_WEIGHTS_COUNT),
    AI_NETWORK_DATA_WEIGHTS_SIZE,
    NULL, ptr);
  return buf;
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	461d      	mov	r5, r3
 800de0c:	f107 041c 	add.w	r4, r7, #28
 800de10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800de12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800de14:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800de18:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 800de1c:	6878      	ldr	r0, [r7, #4]
 800de1e:	373c      	adds	r7, #60	@ 0x3c
 800de20:	46bd      	mov	sp, r7
 800de22:	bcb0      	pop	{r4, r5, r7}
 800de24:	4770      	bx	lr
 800de26:	bf00      	nop
 800de28:	40040440 	.word	0x40040440
 800de2c:	000a9998 	.word	0x000a9998
 800de30:	08013f30 	.word	0x08013f30

0800de34 <ai_network_data_weights_get>:
 * @return a ai_handle pointer to the weights array
 */
AI_DEPRECATED
AI_API_ENTRY
ai_handle ai_network_data_weights_get(void)
{
 800de34:	b480      	push	{r7}
 800de36:	af00      	add	r7, sp, #0
  return AI_HANDLE_PTR(g_network_weights_table);
 800de38:	4b02      	ldr	r3, [pc, #8]	@ (800de44 <ai_network_data_weights_get+0x10>)

}
 800de3a:	4618      	mov	r0, r3
 800de3c:	46bd      	mov	sp, r7
 800de3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de42:	4770      	bx	lr
 800de44:	20000800 	.word	0x20000800

0800de48 <ai_buffer_get_size>:
 800de48:	b368      	cbz	r0, 800dea6 <ai_buffer_get_size+0x5e>
 800de4a:	4b17      	ldr	r3, [pc, #92]	@ (800dea8 <ai_buffer_get_size+0x60>)
 800de4c:	4a17      	ldr	r2, [pc, #92]	@ (800deac <ai_buffer_get_size+0x64>)
 800de4e:	b410      	push	{r4}
 800de50:	6804      	ldr	r4, [r0, #0]
 800de52:	4023      	ands	r3, r4
 800de54:	4293      	cmp	r3, r2
 800de56:	d123      	bne.n	800dea0 <ai_buffer_get_size+0x58>
 800de58:	b311      	cbz	r1, 800dea0 <ai_buffer_get_size+0x58>
 800de5a:	6984      	ldr	r4, [r0, #24]
 800de5c:	6862      	ldr	r2, [r4, #4]
 800de5e:	321f      	adds	r2, #31
 800de60:	f022 021f 	bic.w	r2, r2, #31
 800de64:	7d03      	ldrb	r3, [r0, #20]
 800de66:	6941      	ldr	r1, [r0, #20]
 800de68:	f1a3 0301 	sub.w	r3, r3, #1
 800de6c:	f3c1 2017 	ubfx	r0, r1, #8, #24
 800de70:	fab3 f383 	clz	r3, r3
 800de74:	095b      	lsrs	r3, r3, #5
 800de76:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 800de7a:	da0c      	bge.n	800de96 <ai_buffer_get_size+0x4e>
 800de7c:	2b01      	cmp	r3, #1
 800de7e:	d103      	bne.n	800de88 <ai_buffer_get_size+0x40>
 800de80:	2802      	cmp	r0, #2
 800de82:	f04f 0302 	mov.w	r3, #2
 800de86:	d006      	beq.n	800de96 <ai_buffer_get_size+0x4e>
 800de88:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 800de8c:	3301      	adds	r3, #1
 800de8e:	4298      	cmp	r0, r3
 800de90:	fb01 f202 	mul.w	r2, r1, r2
 800de94:	d1f2      	bne.n	800de7c <ai_buffer_get_size+0x34>
 800de96:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 800de9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800de9e:	4770      	bx	lr
 800dea0:	6984      	ldr	r4, [r0, #24]
 800dea2:	6862      	ldr	r2, [r4, #4]
 800dea4:	e7de      	b.n	800de64 <ai_buffer_get_size+0x1c>
 800dea6:	4770      	bx	lr
 800dea8:	017fffff 	.word	0x017fffff
 800deac:	000400c0 	.word	0x000400c0

0800deb0 <ai_buffer_array_sane>:
 800deb0:	b138      	cbz	r0, 800dec2 <ai_buffer_array_sane+0x12>
 800deb2:	6843      	ldr	r3, [r0, #4]
 800deb4:	b123      	cbz	r3, 800dec0 <ai_buffer_array_sane+0x10>
 800deb6:	8840      	ldrh	r0, [r0, #2]
 800deb8:	3800      	subs	r0, #0
 800deba:	bf18      	it	ne
 800debc:	2001      	movne	r0, #1
 800debe:	4770      	bx	lr
 800dec0:	4618      	mov	r0, r3
 800dec2:	4770      	bx	lr

0800dec4 <ai_platform_get_weights_map>:
 800dec4:	2900      	cmp	r1, #0
 800dec6:	bf18      	it	ne
 800dec8:	2800      	cmpne	r0, #0
 800deca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800decc:	bf0c      	ite	eq
 800dece:	2401      	moveq	r4, #1
 800ded0:	2400      	movne	r4, #0
 800ded2:	2a00      	cmp	r2, #0
 800ded4:	bf08      	it	eq
 800ded6:	f044 0401 	orreq.w	r4, r4, #1
 800deda:	b114      	cbz	r4, 800dee2 <ai_platform_get_weights_map+0x1e>
 800dedc:	2400      	movs	r4, #0
 800dede:	4620      	mov	r0, r4
 800dee0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dee2:	4616      	mov	r6, r2
 800dee4:	4b22      	ldr	r3, [pc, #136]	@ (800df70 <ai_platform_get_weights_map+0xac>)
 800dee6:	6812      	ldr	r2, [r2, #0]
 800dee8:	4605      	mov	r5, r0
 800deea:	460f      	mov	r7, r1
 800deec:	429a      	cmp	r2, r3
 800deee:	d022      	beq.n	800df36 <ai_platform_get_weights_map+0x72>
 800def0:	6870      	ldr	r0, [r6, #4]
 800def2:	2800      	cmp	r0, #0
 800def4:	d0f2      	beq.n	800dedc <ai_platform_get_weights_map+0x18>
 800def6:	6806      	ldr	r6, [r0, #0]
 800def8:	429e      	cmp	r6, r3
 800defa:	d006      	beq.n	800df0a <ai_platform_get_weights_map+0x46>
 800defc:	f1a1 0401 	sub.w	r4, r1, #1
 800df00:	6028      	str	r0, [r5, #0]
 800df02:	fab4 f484 	clz	r4, r4
 800df06:	0964      	lsrs	r4, r4, #5
 800df08:	e7e9      	b.n	800dede <ai_platform_get_weights_map+0x1a>
 800df0a:	3d04      	subs	r5, #4
 800df0c:	4602      	mov	r2, r0
 800df0e:	4621      	mov	r1, r4
 800df10:	e000      	b.n	800df14 <ai_platform_get_weights_map+0x50>
 800df12:	4619      	mov	r1, r3
 800df14:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800df18:	42b3      	cmp	r3, r6
 800df1a:	d025      	beq.n	800df68 <ai_platform_get_weights_map+0xa4>
 800df1c:	f845 3f04 	str.w	r3, [r5, #4]!
 800df20:	1c4b      	adds	r3, r1, #1
 800df22:	429f      	cmp	r7, r3
 800df24:	d8f5      	bhi.n	800df12 <ai_platform_get_weights_map+0x4e>
 800df26:	d1da      	bne.n	800dede <ai_platform_get_weights_map+0x1a>
 800df28:	3102      	adds	r1, #2
 800df2a:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800df2e:	42b3      	cmp	r3, r6
 800df30:	d1d5      	bne.n	800dede <ai_platform_get_weights_map+0x1a>
 800df32:	2401      	movs	r4, #1
 800df34:	e7d3      	b.n	800dede <ai_platform_get_weights_map+0x1a>
 800df36:	1d30      	adds	r0, r6, #4
 800df38:	f7ff ffba 	bl	800deb0 <ai_buffer_array_sane>
 800df3c:	2800      	cmp	r0, #0
 800df3e:	d0cd      	beq.n	800dedc <ai_platform_get_weights_map+0x18>
 800df40:	88f3      	ldrh	r3, [r6, #6]
 800df42:	429f      	cmp	r7, r3
 800df44:	d1ca      	bne.n	800dedc <ai_platform_get_weights_map+0x18>
 800df46:	3d04      	subs	r5, #4
 800df48:	4622      	mov	r2, r4
 800df4a:	68b3      	ldr	r3, [r6, #8]
 800df4c:	4423      	add	r3, r4
 800df4e:	341c      	adds	r4, #28
 800df50:	685b      	ldr	r3, [r3, #4]
 800df52:	b123      	cbz	r3, 800df5e <ai_platform_get_weights_map+0x9a>
 800df54:	3201      	adds	r2, #1
 800df56:	f845 3f04 	str.w	r3, [r5, #4]!
 800df5a:	4297      	cmp	r7, r2
 800df5c:	d8f5      	bhi.n	800df4a <ai_platform_get_weights_map+0x86>
 800df5e:	1abc      	subs	r4, r7, r2
 800df60:	fab4 f484 	clz	r4, r4
 800df64:	0964      	lsrs	r4, r4, #5
 800df66:	e7ba      	b.n	800dede <ai_platform_get_weights_map+0x1a>
 800df68:	428f      	cmp	r7, r1
 800df6a:	d1b8      	bne.n	800dede <ai_platform_get_weights_map+0x1a>
 800df6c:	e7e1      	b.n	800df32 <ai_platform_get_weights_map+0x6e>
 800df6e:	bf00      	nop
 800df70:	a1facade 	.word	0xa1facade

0800df74 <ai_platform_get_activations_map>:
 800df74:	2900      	cmp	r1, #0
 800df76:	bf18      	it	ne
 800df78:	2800      	cmpne	r0, #0
 800df7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df7c:	bf0c      	ite	eq
 800df7e:	2401      	moveq	r4, #1
 800df80:	2400      	movne	r4, #0
 800df82:	2a00      	cmp	r2, #0
 800df84:	bf08      	it	eq
 800df86:	f044 0401 	orreq.w	r4, r4, #1
 800df8a:	b114      	cbz	r4, 800df92 <ai_platform_get_activations_map+0x1e>
 800df8c:	2400      	movs	r4, #0
 800df8e:	4620      	mov	r0, r4
 800df90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df92:	4616      	mov	r6, r2
 800df94:	4b22      	ldr	r3, [pc, #136]	@ (800e020 <ai_platform_get_activations_map+0xac>)
 800df96:	6812      	ldr	r2, [r2, #0]
 800df98:	4605      	mov	r5, r0
 800df9a:	460f      	mov	r7, r1
 800df9c:	429a      	cmp	r2, r3
 800df9e:	d022      	beq.n	800dfe6 <ai_platform_get_activations_map+0x72>
 800dfa0:	6a30      	ldr	r0, [r6, #32]
 800dfa2:	2800      	cmp	r0, #0
 800dfa4:	d0f2      	beq.n	800df8c <ai_platform_get_activations_map+0x18>
 800dfa6:	6806      	ldr	r6, [r0, #0]
 800dfa8:	429e      	cmp	r6, r3
 800dfaa:	d006      	beq.n	800dfba <ai_platform_get_activations_map+0x46>
 800dfac:	f1a1 0401 	sub.w	r4, r1, #1
 800dfb0:	6028      	str	r0, [r5, #0]
 800dfb2:	fab4 f484 	clz	r4, r4
 800dfb6:	0964      	lsrs	r4, r4, #5
 800dfb8:	e7e9      	b.n	800df8e <ai_platform_get_activations_map+0x1a>
 800dfba:	3d04      	subs	r5, #4
 800dfbc:	4602      	mov	r2, r0
 800dfbe:	4621      	mov	r1, r4
 800dfc0:	e000      	b.n	800dfc4 <ai_platform_get_activations_map+0x50>
 800dfc2:	4619      	mov	r1, r3
 800dfc4:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800dfc8:	42b3      	cmp	r3, r6
 800dfca:	d026      	beq.n	800e01a <ai_platform_get_activations_map+0xa6>
 800dfcc:	f845 3f04 	str.w	r3, [r5, #4]!
 800dfd0:	1c4b      	adds	r3, r1, #1
 800dfd2:	429f      	cmp	r7, r3
 800dfd4:	d8f5      	bhi.n	800dfc2 <ai_platform_get_activations_map+0x4e>
 800dfd6:	d1da      	bne.n	800df8e <ai_platform_get_activations_map+0x1a>
 800dfd8:	3102      	adds	r1, #2
 800dfda:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800dfde:	42b3      	cmp	r3, r6
 800dfe0:	d1d5      	bne.n	800df8e <ai_platform_get_activations_map+0x1a>
 800dfe2:	2401      	movs	r4, #1
 800dfe4:	e7d3      	b.n	800df8e <ai_platform_get_activations_map+0x1a>
 800dfe6:	f106 000c 	add.w	r0, r6, #12
 800dfea:	f7ff ff61 	bl	800deb0 <ai_buffer_array_sane>
 800dfee:	2800      	cmp	r0, #0
 800dff0:	d0cc      	beq.n	800df8c <ai_platform_get_activations_map+0x18>
 800dff2:	89f3      	ldrh	r3, [r6, #14]
 800dff4:	429f      	cmp	r7, r3
 800dff6:	d1c9      	bne.n	800df8c <ai_platform_get_activations_map+0x18>
 800dff8:	3d04      	subs	r5, #4
 800dffa:	4622      	mov	r2, r4
 800dffc:	6933      	ldr	r3, [r6, #16]
 800dffe:	4423      	add	r3, r4
 800e000:	341c      	adds	r4, #28
 800e002:	685b      	ldr	r3, [r3, #4]
 800e004:	b123      	cbz	r3, 800e010 <ai_platform_get_activations_map+0x9c>
 800e006:	3201      	adds	r2, #1
 800e008:	f845 3f04 	str.w	r3, [r5, #4]!
 800e00c:	4297      	cmp	r7, r2
 800e00e:	d8f5      	bhi.n	800dffc <ai_platform_get_activations_map+0x88>
 800e010:	1abc      	subs	r4, r7, r2
 800e012:	fab4 f484 	clz	r4, r4
 800e016:	0964      	lsrs	r4, r4, #5
 800e018:	e7b9      	b.n	800df8e <ai_platform_get_activations_map+0x1a>
 800e01a:	428f      	cmp	r7, r1
 800e01c:	d1b7      	bne.n	800df8e <ai_platform_get_activations_map+0x1a>
 800e01e:	e7e0      	b.n	800dfe2 <ai_platform_get_activations_map+0x6e>
 800e020:	a1facade 	.word	0xa1facade

0800e024 <ai_platform_network_get_error>:
 800e024:	4b04      	ldr	r3, [pc, #16]	@ (800e038 <ai_platform_network_get_error+0x14>)
 800e026:	6802      	ldr	r2, [r0, #0]
 800e028:	4393      	bics	r3, r2
 800e02a:	d102      	bne.n	800e032 <ai_platform_network_get_error+0xe>
 800e02c:	300c      	adds	r0, #12
 800e02e:	f000 ba2d 	b.w	800e48c <core_get_error>
 800e032:	f241 0010 	movw	r0, #4112	@ 0x1010
 800e036:	4770      	bx	lr
 800e038:	a1c00100 	.word	0xa1c00100

0800e03c <ai_platform_network_set_error>:
 800e03c:	b110      	cbz	r0, 800e044 <ai_platform_network_set_error+0x8>
 800e03e:	300c      	adds	r0, #12
 800e040:	f000 ba2a 	b.w	800e498 <core_set_error>
 800e044:	4770      	bx	lr
 800e046:	bf00      	nop

0800e048 <ai_platform_inputs_get>:
 800e048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e04c:	4b39      	ldr	r3, [pc, #228]	@ (800e134 <ai_platform_inputs_get+0xec>)
 800e04e:	b085      	sub	sp, #20
 800e050:	6802      	ldr	r2, [r0, #0]
 800e052:	4393      	bics	r3, r2
 800e054:	e9cd 1002 	strd	r1, r0, [sp, #8]
 800e058:	d162      	bne.n	800e120 <ai_platform_inputs_get+0xd8>
 800e05a:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d051      	beq.n	800e104 <ai_platform_inputs_get+0xbc>
 800e060:	f8d0 a034 	ldr.w	sl, [r0, #52]	@ 0x34
 800e064:	f1ba 0f00 	cmp.w	sl, #0
 800e068:	d04c      	beq.n	800e104 <ai_platform_inputs_get+0xbc>
 800e06a:	f04f 0900 	mov.w	r9, #0
 800e06e:	464d      	mov	r5, r9
 800e070:	e016      	b.n	800e0a0 <ai_platform_inputs_get+0x58>
 800e072:	9901      	ldr	r1, [sp, #4]
 800e074:	2301      	movs	r3, #1
 800e076:	f848 3001 	str.w	r3, [r8, r1]
 800e07a:	69b1      	ldr	r1, [r6, #24]
 800e07c:	f04f 0301 	mov.w	r3, #1
 800e080:	684e      	ldr	r6, [r1, #4]
 800e082:	3501      	adds	r5, #1
 800e084:	f109 091c 	add.w	r9, r9, #28
 800e088:	7523      	strb	r3, [r4, #20]
 800e08a:	2300      	movs	r3, #0
 800e08c:	6961      	ldr	r1, [r4, #20]
 800e08e:	6020      	str	r0, [r4, #0]
 800e090:	f36b 211f 	bfi	r1, fp, #8, #24
 800e094:	e9c4 c701 	strd	ip, r7, [r4, #4]
 800e098:	e9c4 3603 	strd	r3, r6, [r4, #12]
 800e09c:	e9c4 1205 	strd	r1, r2, [r4, #20]
 800e0a0:	f8ba 3000 	ldrh.w	r3, [sl]
 800e0a4:	b2ac      	uxth	r4, r5
 800e0a6:	42ab      	cmp	r3, r5
 800e0a8:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 800e0ac:	9301      	str	r3, [sp, #4]
 800e0ae:	d93b      	bls.n	800e128 <ai_platform_inputs_get+0xe0>
 800e0b0:	f8da 3004 	ldr.w	r3, [sl, #4]
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d037      	beq.n	800e128 <ai_platform_inputs_get+0xe0>
 800e0b8:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800e0bc:	2e00      	cmp	r6, #0
 800e0be:	d033      	beq.n	800e128 <ai_platform_inputs_get+0xe0>
 800e0c0:	f8da 3008 	ldr.w	r3, [sl, #8]
 800e0c4:	69b2      	ldr	r2, [r6, #24]
 800e0c6:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 800e0ca:	6810      	ldr	r0, [r2, #0]
 800e0cc:	68b3      	ldr	r3, [r6, #8]
 800e0ce:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 800e0d2:	68f2      	ldr	r2, [r6, #12]
 800e0d4:	444c      	add	r4, r9
 800e0d6:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 800e0da:	9200      	str	r2, [sp, #0]
 800e0dc:	f002 fd6c 	bl	8010bb8 <ai_array_to_buffer_fmt>
 800e0e0:	69b1      	ldr	r1, [r6, #24]
 800e0e2:	9a00      	ldr	r2, [sp, #0]
 800e0e4:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800e0e8:	2f00      	cmp	r7, #0
 800e0ea:	d0c7      	beq.n	800e07c <ai_platform_inputs_get+0x34>
 800e0ec:	2100      	movs	r1, #0
 800e0ee:	f848 1035 	str.w	r1, [r8, r5, lsl #3]
 800e0f2:	6831      	ldr	r1, [r6, #0]
 800e0f4:	6079      	str	r1, [r7, #4]
 800e0f6:	b111      	cbz	r1, 800e0fe <ai_platform_inputs_get+0xb6>
 800e0f8:	8849      	ldrh	r1, [r1, #2]
 800e0fa:	2900      	cmp	r1, #0
 800e0fc:	d1b9      	bne.n	800e072 <ai_platform_inputs_get+0x2a>
 800e0fe:	69b1      	ldr	r1, [r6, #24]
 800e100:	2700      	movs	r7, #0
 800e102:	e7bb      	b.n	800e07c <ai_platform_inputs_get+0x34>
 800e104:	9803      	ldr	r0, [sp, #12]
 800e106:	2400      	movs	r4, #0
 800e108:	2218      	movs	r2, #24
 800e10a:	2111      	movs	r1, #17
 800e10c:	300c      	adds	r0, #12
 800e10e:	f000 f9c3 	bl	800e498 <core_set_error>
 800e112:	4620      	mov	r0, r4
 800e114:	9b02      	ldr	r3, [sp, #8]
 800e116:	b103      	cbz	r3, 800e11a <ai_platform_inputs_get+0xd2>
 800e118:	801c      	strh	r4, [r3, #0]
 800e11a:	b005      	add	sp, #20
 800e11c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e120:	2000      	movs	r0, #0
 800e122:	b005      	add	sp, #20
 800e124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e128:	2c00      	cmp	r4, #0
 800e12a:	d0eb      	beq.n	800e104 <ai_platform_inputs_get+0xbc>
 800e12c:	f8da 3008 	ldr.w	r3, [sl, #8]
 800e130:	6858      	ldr	r0, [r3, #4]
 800e132:	e7ef      	b.n	800e114 <ai_platform_inputs_get+0xcc>
 800e134:	a1c00100 	.word	0xa1c00100

0800e138 <ai_platform_outputs_get>:
 800e138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e13c:	4b38      	ldr	r3, [pc, #224]	@ (800e220 <ai_platform_outputs_get+0xe8>)
 800e13e:	b085      	sub	sp, #20
 800e140:	6802      	ldr	r2, [r0, #0]
 800e142:	4393      	bics	r3, r2
 800e144:	e9cd 1002 	strd	r1, r0, [sp, #8]
 800e148:	d15f      	bne.n	800e20a <ai_platform_outputs_get+0xd2>
 800e14a:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 800e14c:	2b01      	cmp	r3, #1
 800e14e:	d94e      	bls.n	800e1ee <ai_platform_outputs_get+0xb6>
 800e150:	f04f 0900 	mov.w	r9, #0
 800e154:	f8d0 a034 	ldr.w	sl, [r0, #52]	@ 0x34
 800e158:	464d      	mov	r5, r9
 800e15a:	e016      	b.n	800e18a <ai_platform_outputs_get+0x52>
 800e15c:	9901      	ldr	r1, [sp, #4]
 800e15e:	2301      	movs	r3, #1
 800e160:	f848 3001 	str.w	r3, [r8, r1]
 800e164:	69b1      	ldr	r1, [r6, #24]
 800e166:	f04f 0301 	mov.w	r3, #1
 800e16a:	684e      	ldr	r6, [r1, #4]
 800e16c:	3501      	adds	r5, #1
 800e16e:	f109 091c 	add.w	r9, r9, #28
 800e172:	7523      	strb	r3, [r4, #20]
 800e174:	2300      	movs	r3, #0
 800e176:	6961      	ldr	r1, [r4, #20]
 800e178:	6020      	str	r0, [r4, #0]
 800e17a:	f36b 211f 	bfi	r1, fp, #8, #24
 800e17e:	e9c4 c701 	strd	ip, r7, [r4, #4]
 800e182:	e9c4 3603 	strd	r3, r6, [r4, #12]
 800e186:	e9c4 1205 	strd	r1, r2, [r4, #20]
 800e18a:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800e18e:	b2ac      	uxth	r4, r5
 800e190:	42ab      	cmp	r3, r5
 800e192:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 800e196:	9301      	str	r3, [sp, #4]
 800e198:	d93b      	bls.n	800e212 <ai_platform_outputs_get+0xda>
 800e19a:	f8da 3010 	ldr.w	r3, [sl, #16]
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d037      	beq.n	800e212 <ai_platform_outputs_get+0xda>
 800e1a2:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800e1a6:	2e00      	cmp	r6, #0
 800e1a8:	d033      	beq.n	800e212 <ai_platform_outputs_get+0xda>
 800e1aa:	f8da 3014 	ldr.w	r3, [sl, #20]
 800e1ae:	69b2      	ldr	r2, [r6, #24]
 800e1b0:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 800e1b4:	6810      	ldr	r0, [r2, #0]
 800e1b6:	68b3      	ldr	r3, [r6, #8]
 800e1b8:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 800e1bc:	68f2      	ldr	r2, [r6, #12]
 800e1be:	444c      	add	r4, r9
 800e1c0:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 800e1c4:	9200      	str	r2, [sp, #0]
 800e1c6:	f002 fcf7 	bl	8010bb8 <ai_array_to_buffer_fmt>
 800e1ca:	69b1      	ldr	r1, [r6, #24]
 800e1cc:	9a00      	ldr	r2, [sp, #0]
 800e1ce:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800e1d2:	2f00      	cmp	r7, #0
 800e1d4:	d0c7      	beq.n	800e166 <ai_platform_outputs_get+0x2e>
 800e1d6:	2100      	movs	r1, #0
 800e1d8:	f848 1035 	str.w	r1, [r8, r5, lsl #3]
 800e1dc:	6831      	ldr	r1, [r6, #0]
 800e1de:	6079      	str	r1, [r7, #4]
 800e1e0:	b111      	cbz	r1, 800e1e8 <ai_platform_outputs_get+0xb0>
 800e1e2:	8849      	ldrh	r1, [r1, #2]
 800e1e4:	2900      	cmp	r1, #0
 800e1e6:	d1b9      	bne.n	800e15c <ai_platform_outputs_get+0x24>
 800e1e8:	69b1      	ldr	r1, [r6, #24]
 800e1ea:	2700      	movs	r7, #0
 800e1ec:	e7bb      	b.n	800e166 <ai_platform_outputs_get+0x2e>
 800e1ee:	9803      	ldr	r0, [sp, #12]
 800e1f0:	2400      	movs	r4, #0
 800e1f2:	2218      	movs	r2, #24
 800e1f4:	2111      	movs	r1, #17
 800e1f6:	300c      	adds	r0, #12
 800e1f8:	f000 f94e 	bl	800e498 <core_set_error>
 800e1fc:	4620      	mov	r0, r4
 800e1fe:	9b02      	ldr	r3, [sp, #8]
 800e200:	b103      	cbz	r3, 800e204 <ai_platform_outputs_get+0xcc>
 800e202:	801c      	strh	r4, [r3, #0]
 800e204:	b005      	add	sp, #20
 800e206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e20a:	2000      	movs	r0, #0
 800e20c:	b005      	add	sp, #20
 800e20e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e212:	2c00      	cmp	r4, #0
 800e214:	d0eb      	beq.n	800e1ee <ai_platform_outputs_get+0xb6>
 800e216:	f8da 3014 	ldr.w	r3, [sl, #20]
 800e21a:	6858      	ldr	r0, [r3, #4]
 800e21c:	e7ef      	b.n	800e1fe <ai_platform_outputs_get+0xc6>
 800e21e:	bf00      	nop
 800e220:	a1c00100 	.word	0xa1c00100

0800e224 <ai_platform_network_create>:
 800e224:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e228:	b083      	sub	sp, #12
 800e22a:	f89d 8028 	ldrb.w	r8, [sp, #40]	@ 0x28
 800e22e:	f89d 902c 	ldrb.w	r9, [sp, #44]	@ 0x2c
 800e232:	b320      	cbz	r0, 800e27e <ai_platform_network_create+0x5a>
 800e234:	6002      	str	r2, [r0, #0]
 800e236:	4616      	mov	r6, r2
 800e238:	461f      	mov	r7, r3
 800e23a:	4604      	mov	r4, r0
 800e23c:	f000 f924 	bl	800e488 <core_init>
 800e240:	b970      	cbnz	r0, 800e260 <ai_platform_network_create+0x3c>
 800e242:	2530      	movs	r5, #48	@ 0x30
 800e244:	2300      	movs	r3, #0
 800e246:	6023      	str	r3, [r4, #0]
 800e248:	2410      	movs	r4, #16
 800e24a:	464a      	mov	r2, r9
 800e24c:	4641      	mov	r1, r8
 800e24e:	4638      	mov	r0, r7
 800e250:	f002 fd4a 	bl	8010ce8 <ai_version_get>
 800e254:	60b0      	str	r0, [r6, #8]
 800e256:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 800e25a:	b003      	add	sp, #12
 800e25c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e260:	2200      	movs	r2, #0
 800e262:	4641      	mov	r1, r8
 800e264:	4638      	mov	r0, r7
 800e266:	f002 fd3f 	bl	8010ce8 <ai_version_get>
 800e26a:	4605      	mov	r5, r0
 800e26c:	2200      	movs	r2, #0
 800e26e:	2105      	movs	r1, #5
 800e270:	2001      	movs	r0, #1
 800e272:	f002 fd39 	bl	8010ce8 <ai_version_get>
 800e276:	4285      	cmp	r5, r0
 800e278:	d008      	beq.n	800e28c <ai_platform_network_create+0x68>
 800e27a:	2501      	movs	r5, #1
 800e27c:	e7e2      	b.n	800e244 <ai_platform_network_create+0x20>
 800e27e:	2510      	movs	r5, #16
 800e280:	462c      	mov	r4, r5
 800e282:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 800e286:	b003      	add	sp, #12
 800e288:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e28c:	4b05      	ldr	r3, [pc, #20]	@ (800e2a4 <ai_platform_network_create+0x80>)
 800e28e:	a801      	add	r0, sp, #4
 800e290:	9301      	str	r3, [sp, #4]
 800e292:	f000 f90d 	bl	800e4b0 <ai_check_custom_types>
 800e296:	b110      	cbz	r0, 800e29e <ai_platform_network_create+0x7a>
 800e298:	2400      	movs	r4, #0
 800e29a:	4625      	mov	r5, r4
 800e29c:	e7d5      	b.n	800e24a <ai_platform_network_create+0x26>
 800e29e:	2502      	movs	r5, #2
 800e2a0:	e7d0      	b.n	800e244 <ai_platform_network_create+0x20>
 800e2a2:	bf00      	nop
 800e2a4:	84048403 	.word	0x84048403

0800e2a8 <ai_platform_network_init>:
 800e2a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2ac:	4a5c      	ldr	r2, [pc, #368]	@ (800e420 <ai_platform_network_init+0x178>)
 800e2ae:	460c      	mov	r4, r1
 800e2b0:	6801      	ldr	r1, [r0, #0]
 800e2b2:	438a      	bics	r2, r1
 800e2b4:	d133      	bne.n	800e31e <ai_platform_network_init+0x76>
 800e2b6:	4605      	mov	r5, r0
 800e2b8:	2c00      	cmp	r4, #0
 800e2ba:	f000 8093 	beq.w	800e3e4 <ai_platform_network_init+0x13c>
 800e2be:	f8d4 b000 	ldr.w	fp, [r4]
 800e2c2:	4a58      	ldr	r2, [pc, #352]	@ (800e424 <ai_platform_network_init+0x17c>)
 800e2c4:	4593      	cmp	fp, r2
 800e2c6:	d10f      	bne.n	800e2e8 <ai_platform_network_init+0x40>
 800e2c8:	e9d4 e803 	ldrd	lr, r8, [r4, #12]
 800e2cc:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800e2d0:	4b53      	ldr	r3, [pc, #332]	@ (800e420 <ai_platform_network_init+0x178>)
 800e2d2:	ea4f 4a1e 	mov.w	sl, lr, lsr #16
 800e2d6:	0c32      	lsrs	r2, r6, #16
 800e2d8:	4299      	cmp	r1, r3
 800e2da:	d02c      	beq.n	800e336 <ai_platform_network_init+0x8e>
 800e2dc:	2303      	movs	r3, #3
 800e2de:	462c      	mov	r4, r5
 800e2e0:	612b      	str	r3, [r5, #16]
 800e2e2:	4620      	mov	r0, r4
 800e2e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2e8:	4627      	mov	r7, r4
 800e2ea:	2101      	movs	r1, #1
 800e2ec:	6864      	ldr	r4, [r4, #4]
 800e2ee:	4638      	mov	r0, r7
 800e2f0:	f107 081c 	add.w	r8, r7, #28
 800e2f4:	f7ff fda8 	bl	800de48 <ai_buffer_get_size>
 800e2f8:	4606      	mov	r6, r0
 800e2fa:	2101      	movs	r1, #1
 800e2fc:	4640      	mov	r0, r8
 800e2fe:	f8d7 9020 	ldr.w	r9, [r7, #32]
 800e302:	f7ff fda1 	bl	800de48 <ai_buffer_get_size>
 800e306:	b976      	cbnz	r6, 800e326 <ai_platform_network_init+0x7e>
 800e308:	2800      	cmp	r0, #0
 800e30a:	d150      	bne.n	800e3ae <ai_platform_network_init+0x106>
 800e30c:	4680      	mov	r8, r0
 800e30e:	4686      	mov	lr, r0
 800e310:	4606      	mov	r6, r0
 800e312:	4607      	mov	r7, r0
 800e314:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
 800e318:	6829      	ldr	r1, [r5, #0]
 800e31a:	0436      	lsls	r6, r6, #16
 800e31c:	e7d8      	b.n	800e2d0 <ai_platform_network_init+0x28>
 800e31e:	2400      	movs	r4, #0
 800e320:	4620      	mov	r0, r4
 800e322:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e326:	2800      	cmp	r0, #0
 800e328:	d13b      	bne.n	800e3a2 <ai_platform_network_init+0xfa>
 800e32a:	4680      	mov	r8, r0
 800e32c:	4686      	mov	lr, r0
 800e32e:	2c00      	cmp	r4, #0
 800e330:	d05e      	beq.n	800e3f0 <ai_platform_network_init+0x148>
 800e332:	2601      	movs	r6, #1
 800e334:	e7ee      	b.n	800e314 <ai_platform_network_init+0x6c>
 800e336:	8c6b      	ldrh	r3, [r5, #34]	@ 0x22
 800e338:	4293      	cmp	r3, r2
 800e33a:	4b3a      	ldr	r3, [pc, #232]	@ (800e424 <ai_platform_network_init+0x17c>)
 800e33c:	d33e      	bcc.n	800e3bc <ai_platform_network_init+0x114>
 800e33e:	459b      	cmp	fp, r3
 800e340:	d03e      	beq.n	800e3c0 <ai_platform_network_init+0x118>
 800e342:	b1a2      	cbz	r2, 800e36e <ai_platform_network_init+0xc6>
 800e344:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800e348:	f04f 0c00 	mov.w	ip, #0
 800e34c:	ea4f 0982 	mov.w	r9, r2, lsl #2
 800e350:	6a6c      	ldr	r4, [r5, #36]	@ 0x24
 800e352:	eb07 0b0c 	add.w	fp, r7, ip
 800e356:	4464      	add	r4, ip
 800e358:	f10c 0c1c 	add.w	ip, ip, #28
 800e35c:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 800e360:	45cc      	cmp	ip, r9
 800e362:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e364:	e89b 0007 	ldmia.w	fp, {r0, r1, r2}
 800e368:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e36c:	d1f0      	bne.n	800e350 <ai_platform_network_init+0xa8>
 800e36e:	8d6b      	ldrh	r3, [r5, #42]	@ 0x2a
 800e370:	622e      	str	r6, [r5, #32]
 800e372:	4553      	cmp	r3, sl
 800e374:	d34b      	bcc.n	800e40e <ai_platform_network_init+0x166>
 800e376:	f1ba 0f00 	cmp.w	sl, #0
 800e37a:	d025      	beq.n	800e3c8 <ai_platform_network_init+0x120>
 800e37c:	ebca 0aca 	rsb	sl, sl, sl, lsl #3
 800e380:	2700      	movs	r7, #0
 800e382:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 800e386:	6aec      	ldr	r4, [r5, #44]	@ 0x2c
 800e388:	eb08 0607 	add.w	r6, r8, r7
 800e38c:	443c      	add	r4, r7
 800e38e:	371c      	adds	r7, #28
 800e390:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800e392:	4557      	cmp	r7, sl
 800e394:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e396:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800e39a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e39e:	d1f2      	bne.n	800e386 <ai_platform_network_init+0xde>
 800e3a0:	e012      	b.n	800e3c8 <ai_platform_network_init+0x120>
 800e3a2:	f1b9 0f00 	cmp.w	r9, #0
 800e3a6:	d015      	beq.n	800e3d4 <ai_platform_network_init+0x12c>
 800e3a8:	f04f 0e01 	mov.w	lr, #1
 800e3ac:	e7bf      	b.n	800e32e <ai_platform_network_init+0x86>
 800e3ae:	f1b9 0f00 	cmp.w	r9, #0
 800e3b2:	d00f      	beq.n	800e3d4 <ai_platform_network_init+0x12c>
 800e3b4:	f04f 0e01 	mov.w	lr, #1
 800e3b8:	4637      	mov	r7, r6
 800e3ba:	e7ab      	b.n	800e314 <ai_platform_network_init+0x6c>
 800e3bc:	459b      	cmp	fp, r3
 800e3be:	d11e      	bne.n	800e3fe <ai_platform_network_init+0x156>
 800e3c0:	f8c5 802c 	str.w	r8, [r5, #44]	@ 0x2c
 800e3c4:	e9c5 6708 	strd	r6, r7, [r5, #32]
 800e3c8:	4628      	mov	r0, r5
 800e3ca:	f8c5 e028 	str.w	lr, [r5, #40]	@ 0x28
 800e3ce:	f000 f897 	bl	800e500 <ai_layers_init_all>
 800e3d2:	e783      	b.n	800e2dc <ai_platform_network_init+0x34>
 800e3d4:	2213      	movs	r2, #19
 800e3d6:	2110      	movs	r1, #16
 800e3d8:	f105 000c 	add.w	r0, r5, #12
 800e3dc:	2400      	movs	r4, #0
 800e3de:	f000 f85b 	bl	800e498 <core_set_error>
 800e3e2:	e77e      	b.n	800e2e2 <ai_platform_network_init+0x3a>
 800e3e4:	2211      	movs	r2, #17
 800e3e6:	2110      	movs	r1, #16
 800e3e8:	300c      	adds	r0, #12
 800e3ea:	f000 f855 	bl	800e498 <core_set_error>
 800e3ee:	e778      	b.n	800e2e2 <ai_platform_network_init+0x3a>
 800e3f0:	2212      	movs	r2, #18
 800e3f2:	2110      	movs	r1, #16
 800e3f4:	f105 000c 	add.w	r0, r5, #12
 800e3f8:	f000 f84e 	bl	800e498 <core_set_error>
 800e3fc:	e771      	b.n	800e2e2 <ai_platform_network_init+0x3a>
 800e3fe:	2212      	movs	r2, #18
 800e400:	2116      	movs	r1, #22
 800e402:	f105 000c 	add.w	r0, r5, #12
 800e406:	2400      	movs	r4, #0
 800e408:	f000 f846 	bl	800e498 <core_set_error>
 800e40c:	e769      	b.n	800e2e2 <ai_platform_network_init+0x3a>
 800e40e:	2213      	movs	r2, #19
 800e410:	2116      	movs	r1, #22
 800e412:	f105 000c 	add.w	r0, r5, #12
 800e416:	2400      	movs	r4, #0
 800e418:	f000 f83e 	bl	800e498 <core_set_error>
 800e41c:	e761      	b.n	800e2e2 <ai_platform_network_init+0x3a>
 800e41e:	bf00      	nop
 800e420:	a1c00100 	.word	0xa1c00100
 800e424:	a1facade 	.word	0xa1facade

0800e428 <ai_platform_network_post_init>:
 800e428:	b538      	push	{r3, r4, r5, lr}
 800e42a:	4b16      	ldr	r3, [pc, #88]	@ (800e484 <ai_platform_network_post_init+0x5c>)
 800e42c:	6802      	ldr	r2, [r0, #0]
 800e42e:	ea02 0103 	and.w	r1, r2, r3
 800e432:	4393      	bics	r3, r2
 800e434:	d108      	bne.n	800e448 <ai_platform_network_post_init+0x20>
 800e436:	6903      	ldr	r3, [r0, #16]
 800e438:	4604      	mov	r4, r0
 800e43a:	f013 0502 	ands.w	r5, r3, #2
 800e43e:	d005      	beq.n	800e44c <ai_platform_network_post_init+0x24>
 800e440:	428a      	cmp	r2, r1
 800e442:	d00a      	beq.n	800e45a <ai_platform_network_post_init+0x32>
 800e444:	2001      	movs	r0, #1
 800e446:	bd38      	pop	{r3, r4, r5, pc}
 800e448:	2000      	movs	r0, #0
 800e44a:	bd38      	pop	{r3, r4, r5, pc}
 800e44c:	2210      	movs	r2, #16
 800e44e:	2111      	movs	r1, #17
 800e450:	300c      	adds	r0, #12
 800e452:	f000 f821 	bl	800e498 <core_set_error>
 800e456:	4628      	mov	r0, r5
 800e458:	bd38      	pop	{r3, r4, r5, pc}
 800e45a:	f000 f85f 	bl	800e51c <ai_layers_post_init_all>
 800e45e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e460:	2b00      	cmp	r3, #0
 800e462:	d0ef      	beq.n	800e444 <ai_platform_network_post_init+0x1c>
 800e464:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 800e466:	e008      	b.n	800e47a <ai_platform_network_post_init+0x52>
 800e468:	e9d4 3210 	ldrd	r3, r2, [r4, #64]	@ 0x40
 800e46c:	4798      	blx	r3
 800e46e:	692b      	ldr	r3, [r5, #16]
 800e470:	42ab      	cmp	r3, r5
 800e472:	461d      	mov	r5, r3
 800e474:	d0e6      	beq.n	800e444 <ai_platform_network_post_init+0x1c>
 800e476:	2b00      	cmp	r3, #0
 800e478:	d0e4      	beq.n	800e444 <ai_platform_network_post_init+0x1c>
 800e47a:	4629      	mov	r1, r5
 800e47c:	2000      	movs	r0, #0
 800e47e:	2d00      	cmp	r5, #0
 800e480:	d1f2      	bne.n	800e468 <ai_platform_network_post_init+0x40>
 800e482:	e7df      	b.n	800e444 <ai_platform_network_post_init+0x1c>
 800e484:	a1c00100 	.word	0xa1c00100

0800e488 <core_init>:
 800e488:	2001      	movs	r0, #1
 800e48a:	4770      	bx	lr

0800e48c <core_get_error>:
 800e48c:	4603      	mov	r3, r0
 800e48e:	2200      	movs	r2, #0
 800e490:	6800      	ldr	r0, [r0, #0]
 800e492:	601a      	str	r2, [r3, #0]
 800e494:	4770      	bx	lr
 800e496:	bf00      	nop

0800e498 <core_set_error>:
 800e498:	4603      	mov	r3, r0
 800e49a:	7800      	ldrb	r0, [r0, #0]
 800e49c:	b108      	cbz	r0, 800e4a2 <core_set_error+0xa>
 800e49e:	2000      	movs	r0, #0
 800e4a0:	4770      	bx	lr
 800e4a2:	7019      	strb	r1, [r3, #0]
 800e4a4:	2001      	movs	r0, #1
 800e4a6:	6819      	ldr	r1, [r3, #0]
 800e4a8:	f362 211f 	bfi	r1, r2, #8, #24
 800e4ac:	6019      	str	r1, [r3, #0]
 800e4ae:	4770      	bx	lr

0800e4b0 <ai_check_custom_types>:
 800e4b0:	b082      	sub	sp, #8
 800e4b2:	4b12      	ldr	r3, [pc, #72]	@ (800e4fc <ai_check_custom_types+0x4c>)
 800e4b4:	9301      	str	r3, [sp, #4]
 800e4b6:	b118      	cbz	r0, 800e4c0 <ai_check_custom_types+0x10>
 800e4b8:	7803      	ldrb	r3, [r0, #0]
 800e4ba:	2b03      	cmp	r3, #3
 800e4bc:	d002      	beq.n	800e4c4 <ai_check_custom_types+0x14>
 800e4be:	2000      	movs	r0, #0
 800e4c0:	b002      	add	sp, #8
 800e4c2:	4770      	bx	lr
 800e4c4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e4c8:	4293      	cmp	r3, r2
 800e4ca:	d004      	beq.n	800e4d6 <ai_check_custom_types+0x26>
 800e4cc:	2001      	movs	r0, #1
 800e4ce:	f080 0001 	eor.w	r0, r0, #1
 800e4d2:	b002      	add	sp, #8
 800e4d4:	4770      	bx	lr
 800e4d6:	7842      	ldrb	r2, [r0, #1]
 800e4d8:	3001      	adds	r0, #1
 800e4da:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e4de:	429a      	cmp	r2, r3
 800e4e0:	d1f4      	bne.n	800e4cc <ai_check_custom_types+0x1c>
 800e4e2:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800e4e6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e4ea:	429a      	cmp	r2, r3
 800e4ec:	d1ee      	bne.n	800e4cc <ai_check_custom_types+0x1c>
 800e4ee:	7842      	ldrb	r2, [r0, #1]
 800e4f0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e4f4:	429a      	cmp	r2, r3
 800e4f6:	d1e9      	bne.n	800e4cc <ai_check_custom_types+0x1c>
 800e4f8:	2000      	movs	r0, #0
 800e4fa:	e7e8      	b.n	800e4ce <ai_check_custom_types+0x1e>
 800e4fc:	84048403 	.word	0x84048403

0800e500 <ai_layers_init_all>:
 800e500:	2100      	movs	r1, #0
 800e502:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800e504:	b13b      	cbz	r3, 800e516 <ai_layers_init_all+0x16>
 800e506:	691a      	ldr	r2, [r3, #16]
 800e508:	3101      	adds	r1, #1
 800e50a:	60d8      	str	r0, [r3, #12]
 800e50c:	429a      	cmp	r2, r3
 800e50e:	4613      	mov	r3, r2
 800e510:	d001      	beq.n	800e516 <ai_layers_init_all+0x16>
 800e512:	2a00      	cmp	r2, #0
 800e514:	d1f6      	bne.n	800e504 <ai_layers_init_all+0x4>
 800e516:	4608      	mov	r0, r1
 800e518:	4770      	bx	lr
 800e51a:	bf00      	nop

0800e51c <ai_layers_post_init_all>:
 800e51c:	b538      	push	{r3, r4, r5, lr}
 800e51e:	2500      	movs	r5, #0
 800e520:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 800e522:	b16c      	cbz	r4, 800e540 <ai_layers_post_init_all+0x24>
 800e524:	6863      	ldr	r3, [r4, #4]
 800e526:	07db      	lsls	r3, r3, #31
 800e528:	d504      	bpl.n	800e534 <ai_layers_post_init_all+0x18>
 800e52a:	6a23      	ldr	r3, [r4, #32]
 800e52c:	4620      	mov	r0, r4
 800e52e:	b10b      	cbz	r3, 800e534 <ai_layers_post_init_all+0x18>
 800e530:	3501      	adds	r5, #1
 800e532:	4798      	blx	r3
 800e534:	6923      	ldr	r3, [r4, #16]
 800e536:	42a3      	cmp	r3, r4
 800e538:	461c      	mov	r4, r3
 800e53a:	d001      	beq.n	800e540 <ai_layers_post_init_all+0x24>
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d1f0      	bne.n	800e522 <ai_layers_post_init_all+0x6>
 800e540:	4628      	mov	r0, r5
 800e542:	bd38      	pop	{r3, r4, r5, pc}

0800e544 <forward_conv2d_if32of32wf32_nl_pool>:
 800e544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e548:	f8d0 c018 	ldr.w	ip, [r0, #24]
 800e54c:	b0c3      	sub	sp, #268	@ 0x10c
 800e54e:	f8bc 3000 	ldrh.w	r3, [ip]
 800e552:	9321      	str	r3, [sp, #132]	@ 0x84
 800e554:	2b00      	cmp	r3, #0
 800e556:	f000 813c 	beq.w	800e7d2 <forward_conv2d_if32of32wf32_nl_pool+0x28e>
 800e55a:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800e55e:	4604      	mov	r4, r0
 800e560:	f8d3 b004 	ldr.w	fp, [r3, #4]
 800e564:	f1bb 0f00 	cmp.w	fp, #0
 800e568:	d001      	beq.n	800e56e <forward_conv2d_if32of32wf32_nl_pool+0x2a>
 800e56a:	f8db b000 	ldr.w	fp, [fp]
 800e56e:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800e570:	2a01      	cmp	r2, #1
 800e572:	f000 812d 	beq.w	800e7d0 <forward_conv2d_if32of32wf32_nl_pool+0x28c>
 800e576:	f8d3 a010 	ldr.w	sl, [r3, #16]
 800e57a:	f1ba 0f00 	cmp.w	sl, #0
 800e57e:	d001      	beq.n	800e584 <forward_conv2d_if32of32wf32_nl_pool+0x40>
 800e580:	f8da a000 	ldr.w	sl, [sl]
 800e584:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800e586:	2a02      	cmp	r2, #2
 800e588:	f000 8122 	beq.w	800e7d0 <forward_conv2d_if32of32wf32_nl_pool+0x28c>
 800e58c:	f8d3 801c 	ldr.w	r8, [r3, #28]
 800e590:	8b1b      	ldrh	r3, [r3, #24]
 800e592:	f1b8 0f00 	cmp.w	r8, #0
 800e596:	f000 812f 	beq.w	800e7f8 <forward_conv2d_if32of32wf32_nl_pool+0x2b4>
 800e59a:	2b01      	cmp	r3, #1
 800e59c:	f8d8 2000 	ldr.w	r2, [r8]
 800e5a0:	f240 8130 	bls.w	800e804 <forward_conv2d_if32of32wf32_nl_pool+0x2c0>
 800e5a4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e5a8:	9340      	str	r3, [sp, #256]	@ 0x100
 800e5aa:	f8d8 8008 	ldr.w	r8, [r8, #8]
 800e5ae:	f8db 100c 	ldr.w	r1, [fp, #12]
 800e5b2:	f8da 000c 	ldr.w	r0, [sl, #12]
 800e5b6:	9122      	str	r1, [sp, #136]	@ 0x88
 800e5b8:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 800e5bc:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 800e5c0:	9130      	str	r1, [sp, #192]	@ 0xc0
 800e5c2:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 800e5c6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800e5c8:	9131      	str	r1, [sp, #196]	@ 0xc4
 800e5ca:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
 800e5ce:	f8de 7004 	ldr.w	r7, [lr, #4]
 800e5d2:	9132      	str	r1, [sp, #200]	@ 0xc8
 800e5d4:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 800e5d8:	9822      	ldr	r0, [sp, #136]	@ 0x88
 800e5da:	9133      	str	r1, [sp, #204]	@ 0xcc
 800e5dc:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
 800e5e0:	681e      	ldr	r6, [r3, #0]
 800e5e2:	9123      	str	r1, [sp, #140]	@ 0x8c
 800e5e4:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 800e5e8:	972a      	str	r7, [sp, #168]	@ 0xa8
 800e5ea:	9124      	str	r1, [sp, #144]	@ 0x90
 800e5ec:	f8de 7008 	ldr.w	r7, [lr, #8]
 800e5f0:	9628      	str	r6, [sp, #160]	@ 0xa0
 800e5f2:	972f      	str	r7, [sp, #188]	@ 0xbc
 800e5f4:	e9d4 950a 	ldrd	r9, r5, [r4, #40]	@ 0x28
 800e5f8:	fa1f f189 	uxth.w	r1, r9
 800e5fc:	9527      	str	r5, [sp, #156]	@ 0x9c
 800e5fe:	685d      	ldr	r5, [r3, #4]
 800e600:	9134      	str	r1, [sp, #208]	@ 0xd0
 800e602:	9529      	str	r5, [sp, #164]	@ 0xa4
 800e604:	e9d4 560c 	ldrd	r5, r6, [r4, #48]	@ 0x30
 800e608:	f8bd 109c 	ldrh.w	r1, [sp, #156]	@ 0x9c
 800e60c:	9135      	str	r1, [sp, #212]	@ 0xd4
 800e60e:	f8bd 10a0 	ldrh.w	r1, [sp, #160]	@ 0xa0
 800e612:	9136      	str	r1, [sp, #216]	@ 0xd8
 800e614:	f8bd 10a4 	ldrh.w	r1, [sp, #164]	@ 0xa4
 800e618:	9137      	str	r1, [sp, #220]	@ 0xdc
 800e61a:	6899      	ldr	r1, [r3, #8]
 800e61c:	68db      	ldr	r3, [r3, #12]
 800e61e:	912d      	str	r1, [sp, #180]	@ 0xb4
 800e620:	932e      	str	r3, [sp, #184]	@ 0xb8
 800e622:	f9b4 301c 	ldrsh.w	r3, [r4, #28]
 800e626:	9338      	str	r3, [sp, #224]	@ 0xe0
 800e628:	b2ab      	uxth	r3, r5
 800e62a:	9339      	str	r3, [sp, #228]	@ 0xe4
 800e62c:	b2b3      	uxth	r3, r6
 800e62e:	933a      	str	r3, [sp, #232]	@ 0xe8
 800e630:	f9bd 30a8 	ldrsh.w	r3, [sp, #168]	@ 0xa8
 800e634:	9325      	str	r3, [sp, #148]	@ 0x94
 800e636:	b23b      	sxth	r3, r7
 800e638:	9326      	str	r3, [sp, #152]	@ 0x98
 800e63a:	f9b4 3044 	ldrsh.w	r3, [r4, #68]	@ 0x44
 800e63e:	933b      	str	r3, [sp, #236]	@ 0xec
 800e640:	f9b4 304c 	ldrsh.w	r3, [r4, #76]	@ 0x4c
 800e644:	933c      	str	r3, [sp, #240]	@ 0xf0
 800e646:	f9b4 3050 	ldrsh.w	r3, [r4, #80]	@ 0x50
 800e64a:	933d      	str	r3, [sp, #244]	@ 0xf4
 800e64c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e64e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e652:	933e      	str	r3, [sp, #248]	@ 0xf8
 800e654:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e656:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800e65a:	933f      	str	r3, [sp, #252]	@ 0xfc
 800e65c:	6a23      	ldr	r3, [r4, #32]
 800e65e:	9322      	str	r3, [sp, #136]	@ 0x88
 800e660:	f1b8 0f00 	cmp.w	r8, #0
 800e664:	f000 80b7 	beq.w	800e7d6 <forward_conv2d_if32of32wf32_nl_pool+0x292>
 800e668:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	f000 80ba 	beq.w	800e7e6 <forward_conv2d_if32of32wf32_nl_pool+0x2a2>
 800e672:	9221      	str	r2, [sp, #132]	@ 0x84
 800e674:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e678:	689b      	ldr	r3, [r3, #8]
 800e67a:	9322      	str	r3, [sp, #136]	@ 0x88
 800e67c:	f002 fb0c 	bl	8010c98 <ai_array_get_byte_size>
 800e680:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800e684:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800e686:	902c      	str	r0, [sp, #176]	@ 0xb0
 800e688:	2b00      	cmp	r3, #0
 800e68a:	f000 80be 	beq.w	800e80a <forward_conv2d_if32of32wf32_nl_pool+0x2c6>
 800e68e:	9241      	str	r2, [sp, #260]	@ 0x104
 800e690:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e694:	f002 fb00 	bl	8010c98 <ai_array_get_byte_size>
 800e698:	f8d4 c018 	ldr.w	ip, [r4, #24]
 800e69c:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800e69e:	f8bc 3000 	ldrh.w	r3, [ip]
 800e6a2:	902b      	str	r0, [sp, #172]	@ 0xac
 800e6a4:	9321      	str	r3, [sp, #132]	@ 0x84
 800e6a6:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 800e6a8:	b2ad      	uxth	r5, r5
 800e6aa:	b2b6      	uxth	r6, r6
 800e6ac:	9b40      	ldr	r3, [sp, #256]	@ 0x100
 800e6ae:	f107 38ff 	add.w	r8, r7, #4294967295
 800e6b2:	3d01      	subs	r5, #1
 800e6b4:	9f2a      	ldr	r7, [sp, #168]	@ 0xa8
 800e6b6:	3e01      	subs	r6, #1
 800e6b8:	fa1f f989 	uxth.w	r9, r9
 800e6bc:	f8bd e09c 	ldrh.w	lr, [sp, #156]	@ 0x9c
 800e6c0:	fb15 7508 	smlabb	r5, r5, r8, r7
 800e6c4:	9f2f      	ldr	r7, [sp, #188]	@ 0xbc
 800e6c6:	699b      	ldr	r3, [r3, #24]
 800e6c8:	fa0f f885 	sxth.w	r8, r5
 800e6cc:	9d26      	ldr	r5, [sp, #152]	@ 0x98
 800e6ce:	f8db 0018 	ldr.w	r0, [fp, #24]
 800e6d2:	3d01      	subs	r5, #1
 800e6d4:	f8d3 b008 	ldr.w	fp, [r3, #8]
 800e6d8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e6da:	fb16 7605 	smlabb	r6, r6, r5, r7
 800e6de:	9d24      	ldr	r5, [sp, #144]	@ 0x90
 800e6e0:	9f29      	ldr	r7, [sp, #164]	@ 0xa4
 800e6e2:	2b03      	cmp	r3, #3
 800e6e4:	eba5 0508 	sub.w	r5, r5, r8
 800e6e8:	b236      	sxth	r6, r6
 800e6ea:	f8da 1018 	ldr.w	r1, [sl, #24]
 800e6ee:	fa15 f587 	uxtah	r5, r5, r7
 800e6f2:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 800e6f4:	6992      	ldr	r2, [r2, #24]
 800e6f6:	fa15 f587 	uxtah	r5, r5, r7
 800e6fa:	9f23      	ldr	r7, [sp, #140]	@ 0x8c
 800e6fc:	f8d4 a05c 	ldr.w	sl, [r4, #92]	@ 0x5c
 800e700:	6880      	ldr	r0, [r0, #8]
 800e702:	6889      	ldr	r1, [r1, #8]
 800e704:	6892      	ldr	r2, [r2, #8]
 800e706:	fb95 f5f9 	sdiv	r5, r5, r9
 800e70a:	eba7 0906 	sub.w	r9, r7, r6
 800e70e:	9f28      	ldr	r7, [sp, #160]	@ 0xa0
 800e710:	f105 0501 	add.w	r5, r5, #1
 800e714:	fa19 f987 	uxtah	r9, r9, r7
 800e718:	9f2d      	ldr	r7, [sp, #180]	@ 0xb4
 800e71a:	b22d      	sxth	r5, r5
 800e71c:	fa19 f987 	uxtah	r9, r9, r7
 800e720:	fb99 f9fe 	sdiv	r9, r9, lr
 800e724:	f109 0e01 	add.w	lr, r9, #1
 800e728:	f8d4 9024 	ldr.w	r9, [r4, #36]	@ 0x24
 800e72c:	f9b4 4048 	ldrsh.w	r4, [r4, #72]	@ 0x48
 800e730:	d94e      	bls.n	800e7d0 <forward_conv2d_if32of32wf32_nl_pool+0x28c>
 800e732:	f8dc 7004 	ldr.w	r7, [ip, #4]
 800e736:	f8d7 c028 	ldr.w	ip, [r7, #40]	@ 0x28
 800e73a:	f1bc 0f00 	cmp.w	ip, #0
 800e73e:	d06f      	beq.n	800e820 <forward_conv2d_if32of32wf32_nl_pool+0x2dc>
 800e740:	f8dc 7000 	ldr.w	r7, [ip]
 800e744:	b10f      	cbz	r7, 800e74a <forward_conv2d_if32of32wf32_nl_pool+0x206>
 800e746:	69bf      	ldr	r7, [r7, #24]
 800e748:	68bf      	ldr	r7, [r7, #8]
 800e74a:	9b3e      	ldr	r3, [sp, #248]	@ 0xf8
 800e74c:	9513      	str	r5, [sp, #76]	@ 0x4c
 800e74e:	931f      	str	r3, [sp, #124]	@ 0x7c
 800e750:	9b3f      	ldr	r3, [sp, #252]	@ 0xfc
 800e752:	960e      	str	r6, [sp, #56]	@ 0x38
 800e754:	931e      	str	r3, [sp, #120]	@ 0x78
 800e756:	9b3d      	ldr	r3, [sp, #244]	@ 0xf4
 800e758:	931d      	str	r3, [sp, #116]	@ 0x74
 800e75a:	9b3c      	ldr	r3, [sp, #240]	@ 0xf0
 800e75c:	e9cd 431b 	strd	r4, r3, [sp, #108]	@ 0x6c
 800e760:	9b3b      	ldr	r3, [sp, #236]	@ 0xec
 800e762:	fa0f f48e 	sxth.w	r4, lr
 800e766:	e9cd a319 	strd	sl, r3, [sp, #100]	@ 0x64
 800e76a:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 800e76c:	9318      	str	r3, [sp, #96]	@ 0x60
 800e76e:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 800e770:	9317      	str	r3, [sp, #92]	@ 0x5c
 800e772:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800e774:	e9cd 9315 	strd	r9, r3, [sp, #84]	@ 0x54
 800e778:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 800e77a:	9312      	str	r3, [sp, #72]	@ 0x48
 800e77c:	9b3a      	ldr	r3, [sp, #232]	@ 0xe8
 800e77e:	9311      	str	r3, [sp, #68]	@ 0x44
 800e780:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 800e782:	e9cd 830f 	strd	r8, r3, [sp, #60]	@ 0x3c
 800e786:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800e788:	930d      	str	r3, [sp, #52]	@ 0x34
 800e78a:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 800e78c:	930c      	str	r3, [sp, #48]	@ 0x30
 800e78e:	9b36      	ldr	r3, [sp, #216]	@ 0xd8
 800e790:	9414      	str	r4, [sp, #80]	@ 0x50
 800e792:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e794:	9b37      	ldr	r3, [sp, #220]	@ 0xdc
 800e796:	930a      	str	r3, [sp, #40]	@ 0x28
 800e798:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800e79a:	9309      	str	r3, [sp, #36]	@ 0x24
 800e79c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 800e79e:	9308      	str	r3, [sp, #32]
 800e7a0:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 800e7a2:	9307      	str	r3, [sp, #28]
 800e7a4:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 800e7a6:	9306      	str	r3, [sp, #24]
 800e7a8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e7aa:	9305      	str	r3, [sp, #20]
 800e7ac:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800e7ae:	9304      	str	r3, [sp, #16]
 800e7b0:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 800e7b2:	9303      	str	r3, [sp, #12]
 800e7b4:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 800e7b6:	e9cd 7301 	strd	r7, r3, [sp, #4]
 800e7ba:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800e7be:	465b      	mov	r3, fp
 800e7c0:	69a4      	ldr	r4, [r4, #24]
 800e7c2:	68a4      	ldr	r4, [r4, #8]
 800e7c4:	9400      	str	r4, [sp, #0]
 800e7c6:	f000 f9cf 	bl	800eb68 <forward_lite_conv2d_if32of32wf32_pool>
 800e7ca:	b043      	add	sp, #268	@ 0x10c
 800e7cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7d0:	2300      	movs	r3, #0
 800e7d2:	685b      	ldr	r3, [r3, #4]
 800e7d4:	deff      	udf	#255	@ 0xff
 800e7d6:	b10b      	cbz	r3, 800e7dc <forward_conv2d_if32of32wf32_nl_pool+0x298>
 800e7d8:	689b      	ldr	r3, [r3, #8]
 800e7da:	9322      	str	r3, [sp, #136]	@ 0x88
 800e7dc:	2301      	movs	r3, #1
 800e7de:	f8cd 80b0 	str.w	r8, [sp, #176]	@ 0xb0
 800e7e2:	932b      	str	r3, [sp, #172]	@ 0xac
 800e7e4:	e75f      	b.n	800e6a6 <forward_conv2d_if32of32wf32_nl_pool+0x162>
 800e7e6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800e7e8:	b10b      	cbz	r3, 800e7ee <forward_conv2d_if32of32wf32_nl_pool+0x2aa>
 800e7ea:	689b      	ldr	r3, [r3, #8]
 800e7ec:	9322      	str	r3, [sp, #136]	@ 0x88
 800e7ee:	2301      	movs	r3, #1
 800e7f0:	2100      	movs	r1, #0
 800e7f2:	e9cd 312b 	strd	r3, r1, [sp, #172]	@ 0xac
 800e7f6:	e756      	b.n	800e6a6 <forward_conv2d_if32of32wf32_nl_pool+0x162>
 800e7f8:	2b01      	cmp	r3, #1
 800e7fa:	d90e      	bls.n	800e81a <forward_conv2d_if32of32wf32_nl_pool+0x2d6>
 800e7fc:	4642      	mov	r2, r8
 800e7fe:	f8cd 8100 	str.w	r8, [sp, #256]	@ 0x100
 800e802:	e6d4      	b.n	800e5ae <forward_conv2d_if32of32wf32_nl_pool+0x6a>
 800e804:	2300      	movs	r3, #0
 800e806:	9340      	str	r3, [sp, #256]	@ 0x100
 800e808:	e6cf      	b.n	800e5aa <forward_conv2d_if32of32wf32_nl_pool+0x66>
 800e80a:	2301      	movs	r3, #1
 800e80c:	f8d4 c018 	ldr.w	ip, [r4, #24]
 800e810:	932b      	str	r3, [sp, #172]	@ 0xac
 800e812:	f8bc 3000 	ldrh.w	r3, [ip]
 800e816:	9321      	str	r3, [sp, #132]	@ 0x84
 800e818:	e745      	b.n	800e6a6 <forward_conv2d_if32of32wf32_nl_pool+0x162>
 800e81a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e81e:	deff      	udf	#255	@ 0xff
 800e820:	f8dc 3018 	ldr.w	r3, [ip, #24]
 800e824:	deff      	udf	#255	@ 0xff
 800e826:	bf00      	nop

0800e828 <forward_dense>:
 800e828:	6982      	ldr	r2, [r0, #24]
 800e82a:	8813      	ldrh	r3, [r2, #0]
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d043      	beq.n	800e8b8 <forward_dense+0x90>
 800e830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e834:	6855      	ldr	r5, [r2, #4]
 800e836:	b08e      	sub	sp, #56	@ 0x38
 800e838:	6869      	ldr	r1, [r5, #4]
 800e83a:	b101      	cbz	r1, 800e83e <forward_dense+0x16>
 800e83c:	6809      	ldr	r1, [r1, #0]
 800e83e:	2b01      	cmp	r3, #1
 800e840:	d069      	beq.n	800e916 <forward_dense+0xee>
 800e842:	692a      	ldr	r2, [r5, #16]
 800e844:	b102      	cbz	r2, 800e848 <forward_dense+0x20>
 800e846:	6812      	ldr	r2, [r2, #0]
 800e848:	2b02      	cmp	r3, #2
 800e84a:	d061      	beq.n	800e910 <forward_dense+0xe8>
 800e84c:	69ec      	ldr	r4, [r5, #28]
 800e84e:	2c00      	cmp	r4, #0
 800e850:	d057      	beq.n	800e902 <forward_dense+0xda>
 800e852:	8b2e      	ldrh	r6, [r5, #24]
 800e854:	6820      	ldr	r0, [r4, #0]
 800e856:	2e01      	cmp	r6, #1
 800e858:	d955      	bls.n	800e906 <forward_dense+0xde>
 800e85a:	6864      	ldr	r4, [r4, #4]
 800e85c:	f8d0 9018 	ldr.w	r9, [r0, #24]
 800e860:	2b03      	cmp	r3, #3
 800e862:	68d0      	ldr	r0, [r2, #12]
 800e864:	68cf      	ldr	r7, [r1, #12]
 800e866:	f8d0 e004 	ldr.w	lr, [r0, #4]
 800e86a:	f8d7 a004 	ldr.w	sl, [r7, #4]
 800e86e:	e9d0 7602 	ldrd	r7, r6, [r0, #8]
 800e872:	f8d9 0000 	ldr.w	r0, [r9]
 800e876:	fb06 f807 	mul.w	r8, r6, r7
 800e87a:	f020 4c7e 	bic.w	ip, r0, #4261412864	@ 0xfe000000
 800e87e:	d044      	beq.n	800e90a <forward_dense+0xe2>
 800e880:	6aad      	ldr	r5, [r5, #40]	@ 0x28
 800e882:	b11d      	cbz	r5, 800e88c <forward_dense+0x64>
 800e884:	682d      	ldr	r5, [r5, #0]
 800e886:	b10d      	cbz	r5, 800e88c <forward_dense+0x64>
 800e888:	69ab      	ldr	r3, [r5, #24]
 800e88a:	689d      	ldr	r5, [r3, #8]
 800e88c:	6992      	ldr	r2, [r2, #24]
 800e88e:	698b      	ldr	r3, [r1, #24]
 800e890:	6890      	ldr	r0, [r2, #8]
 800e892:	6899      	ldr	r1, [r3, #8]
 800e894:	b10c      	cbz	r4, 800e89a <forward_dense+0x72>
 800e896:	69a3      	ldr	r3, [r4, #24]
 800e898:	689c      	ldr	r4, [r3, #8]
 800e89a:	4b20      	ldr	r3, [pc, #128]	@ (800e91c <forward_dense+0xf4>)
 800e89c:	459c      	cmp	ip, r3
 800e89e:	e9d9 2902 	ldrd	r2, r9, [r9, #8]
 800e8a2:	d023      	beq.n	800e8ec <forward_dense+0xc4>
 800e8a4:	4e1e      	ldr	r6, [pc, #120]	@ (800e920 <forward_dense+0xf8>)
 800e8a6:	45b4      	cmp	ip, r6
 800e8a8:	d015      	beq.n	800e8d6 <forward_dense+0xae>
 800e8aa:	f5a3 039c 	sub.w	r3, r3, #5111808	@ 0x4e0000
 800e8ae:	459c      	cmp	ip, r3
 800e8b0:	d004      	beq.n	800e8bc <forward_dense+0x94>
 800e8b2:	b00e      	add	sp, #56	@ 0x38
 800e8b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e8b8:	685b      	ldr	r3, [r3, #4]
 800e8ba:	deff      	udf	#255	@ 0xff
 800e8bc:	e9cd 0107 	strd	r0, r1, [sp, #28]
 800e8c0:	a807      	add	r0, sp, #28
 800e8c2:	9209      	str	r2, [sp, #36]	@ 0x24
 800e8c4:	e9cd 4a0a 	strd	r4, sl, [sp, #40]	@ 0x28
 800e8c8:	e9cd e80c 	strd	lr, r8, [sp, #48]	@ 0x30
 800e8cc:	f001 fb98 	bl	8010000 <forward_lite_dense_if32of32wf32>
 800e8d0:	b00e      	add	sp, #56	@ 0x38
 800e8d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e8d6:	464b      	mov	r3, r9
 800e8d8:	9500      	str	r5, [sp, #0]
 800e8da:	e9cd e803 	strd	lr, r8, [sp, #12]
 800e8de:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 800e8e2:	f001 fceb 	bl	80102bc <forward_lite_dense_if32of32wf32_lut4>
 800e8e6:	b00e      	add	sp, #56	@ 0x38
 800e8e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e8ec:	464b      	mov	r3, r9
 800e8ee:	9500      	str	r5, [sp, #0]
 800e8f0:	e9cd e803 	strd	lr, r8, [sp, #12]
 800e8f4:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 800e8f8:	f001 fe0a 	bl	8010510 <forward_lite_dense_if32of32wf32_lut8>
 800e8fc:	b00e      	add	sp, #56	@ 0x38
 800e8fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e902:	4620      	mov	r0, r4
 800e904:	e7aa      	b.n	800e85c <forward_dense+0x34>
 800e906:	2400      	movs	r4, #0
 800e908:	e7a8      	b.n	800e85c <forward_dense+0x34>
 800e90a:	2300      	movs	r3, #0
 800e90c:	685b      	ldr	r3, [r3, #4]
 800e90e:	deff      	udf	#255	@ 0xff
 800e910:	2300      	movs	r3, #0
 800e912:	685b      	ldr	r3, [r3, #4]
 800e914:	deff      	udf	#255	@ 0xff
 800e916:	2300      	movs	r3, #0
 800e918:	685b      	ldr	r3, [r3, #4]
 800e91a:	deff      	udf	#255	@ 0xff
 800e91c:	01d01040 	.word	0x01d01040
 800e920:	01e81040 	.word	0x01e81040

0800e924 <forward_relu>:
 800e924:	6982      	ldr	r2, [r0, #24]
 800e926:	8813      	ldrh	r3, [r2, #0]
 800e928:	b323      	cbz	r3, 800e974 <forward_relu+0x50>
 800e92a:	6851      	ldr	r1, [r2, #4]
 800e92c:	684a      	ldr	r2, [r1, #4]
 800e92e:	b102      	cbz	r2, 800e932 <forward_relu+0xe>
 800e930:	6812      	ldr	r2, [r2, #0]
 800e932:	2b01      	cmp	r3, #1
 800e934:	f000 8086 	beq.w	800ea44 <forward_relu+0x120>
 800e938:	b470      	push	{r4, r5, r6}
 800e93a:	690b      	ldr	r3, [r1, #16]
 800e93c:	b103      	cbz	r3, 800e940 <forward_relu+0x1c>
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	69c6      	ldr	r6, [r0, #28]
 800e942:	b1ce      	cbz	r6, 800e978 <forward_relu+0x54>
 800e944:	6871      	ldr	r1, [r6, #4]
 800e946:	6998      	ldr	r0, [r3, #24]
 800e948:	2901      	cmp	r1, #1
 800e94a:	d03f      	beq.n	800e9cc <forward_relu+0xa8>
 800e94c:	6893      	ldr	r3, [r2, #8]
 800e94e:	6991      	ldr	r1, [r2, #24]
 800e950:	0a1b      	lsrs	r3, r3, #8
 800e952:	6880      	ldr	r0, [r0, #8]
 800e954:	6889      	ldr	r1, [r1, #8]
 800e956:	d06c      	beq.n	800ea32 <forward_relu+0x10e>
 800e958:	68d5      	ldr	r5, [r2, #12]
 800e95a:	2201      	movs	r2, #1
 800e95c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800e960:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 800e964:	429d      	cmp	r5, r3
 800e966:	fb04 f202 	mul.w	r2, r4, r2
 800e96a:	d1f9      	bne.n	800e960 <forward_relu+0x3c>
 800e96c:	68b3      	ldr	r3, [r6, #8]
 800e96e:	bc70      	pop	{r4, r5, r6}
 800e970:	f000 bd04 	b.w	800f37c <forward_lite_nl_relu_generic_if32of32_kernel>
 800e974:	685b      	ldr	r3, [r3, #4]
 800e976:	deff      	udf	#255	@ 0xff
 800e978:	6999      	ldr	r1, [r3, #24]
 800e97a:	6893      	ldr	r3, [r2, #8]
 800e97c:	6990      	ldr	r0, [r2, #24]
 800e97e:	0a1b      	lsrs	r3, r3, #8
 800e980:	6889      	ldr	r1, [r1, #8]
 800e982:	6884      	ldr	r4, [r0, #8]
 800e984:	d057      	beq.n	800ea36 <forward_relu+0x112>
 800e986:	68d5      	ldr	r5, [r2, #12]
 800e988:	2201      	movs	r2, #1
 800e98a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800e98e:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 800e992:	429d      	cmp	r5, r3
 800e994:	fb00 f202 	mul.w	r2, r0, r2
 800e998:	d1f9      	bne.n	800e98e <forward_relu+0x6a>
 800e99a:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800e99e:	4413      	add	r3, r2
 800e9a0:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800e9a4:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800e9a8:	4294      	cmp	r4, r2
 800e9aa:	d80d      	bhi.n	800e9c8 <forward_relu+0xa4>
 800e9ac:	3204      	adds	r2, #4
 800e9ae:	3104      	adds	r1, #4
 800e9b0:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800ea4c <forward_relu+0x128>
 800e9b4:	4613      	mov	r3, r2
 800e9b6:	ed72 7a01 	vldmdb	r2!, {s15}
 800e9ba:	3b08      	subs	r3, #8
 800e9bc:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 800e9c0:	ed61 7a01 	vstmdb	r1!, {s15}
 800e9c4:	429c      	cmp	r4, r3
 800e9c6:	d9f5      	bls.n	800e9b4 <forward_relu+0x90>
 800e9c8:	bc70      	pop	{r4, r5, r6}
 800e9ca:	4770      	bx	lr
 800e9cc:	6993      	ldr	r3, [r2, #24]
 800e9ce:	6880      	ldr	r0, [r0, #8]
 800e9d0:	689c      	ldr	r4, [r3, #8]
 800e9d2:	6893      	ldr	r3, [r2, #8]
 800e9d4:	0a1b      	lsrs	r3, r3, #8
 800e9d6:	d030      	beq.n	800ea3a <forward_relu+0x116>
 800e9d8:	68d5      	ldr	r5, [r2, #12]
 800e9da:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800e9de:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800e9e2:	429d      	cmp	r5, r3
 800e9e4:	fb02 f101 	mul.w	r1, r2, r1
 800e9e8:	d1f9      	bne.n	800e9de <forward_relu+0xba>
 800e9ea:	f06f 4240 	mvn.w	r2, #3221225472	@ 0xc0000000
 800e9ee:	68b3      	ldr	r3, [r6, #8]
 800e9f0:	440a      	add	r2, r1
 800e9f2:	ed93 7a00 	vldr	s14, [r3]
 800e9f6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e9fa:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800e9fe:	429c      	cmp	r4, r3
 800ea00:	d8e2      	bhi.n	800e9c8 <forward_relu+0xa4>
 800ea02:	1d02      	adds	r2, r0, #4
 800ea04:	3304      	adds	r3, #4
 800ea06:	2000      	movs	r0, #0
 800ea08:	ed53 7a01 	vldr	s15, [r3, #-4]
 800ea0c:	1f19      	subs	r1, r3, #4
 800ea0e:	3b08      	subs	r3, #8
 800ea10:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ea14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea18:	d405      	bmi.n	800ea26 <forward_relu+0x102>
 800ea1a:	429c      	cmp	r4, r3
 800ea1c:	f842 0d04 	str.w	r0, [r2, #-4]!
 800ea20:	d8d2      	bhi.n	800e9c8 <forward_relu+0xa4>
 800ea22:	460b      	mov	r3, r1
 800ea24:	e7f0      	b.n	800ea08 <forward_relu+0xe4>
 800ea26:	429c      	cmp	r4, r3
 800ea28:	ed62 7a01 	vstmdb	r2!, {s15}
 800ea2c:	d8cc      	bhi.n	800e9c8 <forward_relu+0xa4>
 800ea2e:	460b      	mov	r3, r1
 800ea30:	e7ea      	b.n	800ea08 <forward_relu+0xe4>
 800ea32:	2201      	movs	r2, #1
 800ea34:	e79a      	b.n	800e96c <forward_relu+0x48>
 800ea36:	4622      	mov	r2, r4
 800ea38:	e7b8      	b.n	800e9ac <forward_relu+0x88>
 800ea3a:	68b2      	ldr	r2, [r6, #8]
 800ea3c:	4623      	mov	r3, r4
 800ea3e:	ed92 7a00 	vldr	s14, [r2]
 800ea42:	e7de      	b.n	800ea02 <forward_relu+0xde>
 800ea44:	2300      	movs	r3, #0
 800ea46:	685b      	ldr	r3, [r3, #4]
 800ea48:	deff      	udf	#255	@ 0xff
 800ea4a:	bf00      	nop
 800ea4c:	00000000 	.word	0x00000000

0800ea50 <forward_upsample_bilinear>:
 800ea50:	6983      	ldr	r3, [r0, #24]
 800ea52:	881a      	ldrh	r2, [r3, #0]
 800ea54:	2a00      	cmp	r2, #0
 800ea56:	d04e      	beq.n	800eaf6 <forward_upsample_bilinear+0xa6>
 800ea58:	6859      	ldr	r1, [r3, #4]
 800ea5a:	4684      	mov	ip, r0
 800ea5c:	684b      	ldr	r3, [r1, #4]
 800ea5e:	b103      	cbz	r3, 800ea62 <forward_upsample_bilinear+0x12>
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	2a01      	cmp	r2, #1
 800ea64:	d073      	beq.n	800eb4e <forward_upsample_bilinear+0xfe>
 800ea66:	690a      	ldr	r2, [r1, #16]
 800ea68:	2a00      	cmp	r2, #0
 800ea6a:	d073      	beq.n	800eb54 <forward_upsample_bilinear+0x104>
 800ea6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea70:	699c      	ldr	r4, [r3, #24]
 800ea72:	b084      	sub	sp, #16
 800ea74:	68d8      	ldr	r0, [r3, #12]
 800ea76:	6821      	ldr	r1, [r4, #0]
 800ea78:	6815      	ldr	r5, [r2, #0]
 800ea7a:	f8dc 3020 	ldr.w	r3, [ip, #32]
 800ea7e:	f021 417e 	bic.w	r1, r1, #4261412864	@ 0xfe000000
 800ea82:	f8df 80e0 	ldr.w	r8, [pc, #224]	@ 800eb64 <forward_upsample_bilinear+0x114>
 800ea86:	689b      	ldr	r3, [r3, #8]
 800ea88:	68ee      	ldr	r6, [r5, #12]
 800ea8a:	4541      	cmp	r1, r8
 800ea8c:	edd3 0a00 	vldr	s1, [r3]
 800ea90:	ed93 0a01 	vldr	s0, [r3, #4]
 800ea94:	6882      	ldr	r2, [r0, #8]
 800ea96:	68c3      	ldr	r3, [r0, #12]
 800ea98:	f8d0 e004 	ldr.w	lr, [r0, #4]
 800ea9c:	e9d6 6702 	ldrd	r6, r7, [r6, #8]
 800eaa0:	d047      	beq.n	800eb32 <forward_upsample_bilinear+0xe2>
 800eaa2:	dd13      	ble.n	800eacc <forward_upsample_bilinear+0x7c>
 800eaa4:	482c      	ldr	r0, [pc, #176]	@ (800eb58 <forward_upsample_bilinear+0x108>)
 800eaa6:	4281      	cmp	r1, r0
 800eaa8:	d035      	beq.n	800eb16 <forward_upsample_bilinear+0xc6>
 800eaaa:	482c      	ldr	r0, [pc, #176]	@ (800eb5c <forward_upsample_bilinear+0x10c>)
 800eaac:	4281      	cmp	r1, r0
 800eaae:	d10a      	bne.n	800eac6 <forward_upsample_bilinear+0x76>
 800eab0:	69a9      	ldr	r1, [r5, #24]
 800eab2:	68a0      	ldr	r0, [r4, #8]
 800eab4:	f89c 401d 	ldrb.w	r4, [ip, #29]
 800eab8:	6889      	ldr	r1, [r1, #8]
 800eaba:	e9cd e402 	strd	lr, r4, [sp, #8]
 800eabe:	e9cd 6700 	strd	r6, r7, [sp]
 800eac2:	f000 fed9 	bl	800f878 <forward_lite_upsample_bilinear_if32of32>
 800eac6:	b004      	add	sp, #16
 800eac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eacc:	4824      	ldr	r0, [pc, #144]	@ (800eb60 <forward_upsample_bilinear+0x110>)
 800eace:	4281      	cmp	r1, r0
 800ead0:	d013      	beq.n	800eafa <forward_upsample_bilinear+0xaa>
 800ead2:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 800ead6:	4281      	cmp	r1, r0
 800ead8:	d1f5      	bne.n	800eac6 <forward_upsample_bilinear+0x76>
 800eada:	69a9      	ldr	r1, [r5, #24]
 800eadc:	68a0      	ldr	r0, [r4, #8]
 800eade:	f89c 401d 	ldrb.w	r4, [ip, #29]
 800eae2:	6889      	ldr	r1, [r1, #8]
 800eae4:	e9cd e402 	strd	lr, r4, [sp, #8]
 800eae8:	e9cd 6700 	strd	r6, r7, [sp]
 800eaec:	f001 f9c8 	bl	800fe80 <forward_lite_upsample_bilinear_iu16ou16>
 800eaf0:	b004      	add	sp, #16
 800eaf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eaf6:	6853      	ldr	r3, [r2, #4]
 800eaf8:	deff      	udf	#255	@ 0xff
 800eafa:	69a9      	ldr	r1, [r5, #24]
 800eafc:	68a0      	ldr	r0, [r4, #8]
 800eafe:	f89c 401d 	ldrb.w	r4, [ip, #29]
 800eb02:	6889      	ldr	r1, [r1, #8]
 800eb04:	e9cd e402 	strd	lr, r4, [sp, #8]
 800eb08:	e9cd 6700 	strd	r6, r7, [sp]
 800eb0c:	f001 f836 	bl	800fb7c <forward_lite_upsample_bilinear_iu8ou8>
 800eb10:	b004      	add	sp, #16
 800eb12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb16:	69a9      	ldr	r1, [r5, #24]
 800eb18:	68a0      	ldr	r0, [r4, #8]
 800eb1a:	f89c 401d 	ldrb.w	r4, [ip, #29]
 800eb1e:	6889      	ldr	r1, [r1, #8]
 800eb20:	e9cd e402 	strd	lr, r4, [sp, #8]
 800eb24:	e9cd 6700 	strd	r6, r7, [sp]
 800eb28:	f001 f8ea 	bl	800fd00 <forward_lite_upsample_bilinear_is16os16>
 800eb2c:	b004      	add	sp, #16
 800eb2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb32:	69a9      	ldr	r1, [r5, #24]
 800eb34:	68a0      	ldr	r0, [r4, #8]
 800eb36:	f89c 401d 	ldrb.w	r4, [ip, #29]
 800eb3a:	6889      	ldr	r1, [r1, #8]
 800eb3c:	e9cd e402 	strd	lr, r4, [sp, #8]
 800eb40:	e9cd 6700 	strd	r6, r7, [sp]
 800eb44:	f000 ff58 	bl	800f9f8 <forward_lite_upsample_bilinear_is8os8>
 800eb48:	b004      	add	sp, #16
 800eb4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb4e:	2300      	movs	r3, #0
 800eb50:	685b      	ldr	r3, [r3, #4]
 800eb52:	deff      	udf	#255	@ 0xff
 800eb54:	68d3      	ldr	r3, [r2, #12]
 800eb56:	deff      	udf	#255	@ 0xff
 800eb58:	00840840 	.word	0x00840840
 800eb5c:	01821040 	.word	0x01821040
 800eb60:	00040440 	.word	0x00040440
 800eb64:	00840440 	.word	0x00840440

0800eb68 <forward_lite_conv2d_if32of32wf32_pool>:
 800eb68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb6c:	ed2d 8b0e 	vpush	{d8-d14}
 800eb70:	b0c9      	sub	sp, #292	@ 0x124
 800eb72:	4696      	mov	lr, r2
 800eb74:	4680      	mov	r8, r0
 800eb76:	f9bd 51cc 	ldrsh.w	r5, [sp, #460]	@ 0x1cc
 800eb7a:	9323      	str	r3, [sp, #140]	@ 0x8c
 800eb7c:	f9bd 31ec 	ldrsh.w	r3, [sp, #492]	@ 0x1ec
 800eb80:	9138      	str	r1, [sp, #224]	@ 0xe0
 800eb82:	9239      	str	r2, [sp, #228]	@ 0xe4
 800eb84:	f9bd 118c 	ldrsh.w	r1, [sp, #396]	@ 0x18c
 800eb88:	fb05 f203 	mul.w	r2, r5, r3
 800eb8c:	f9bd 419c 	ldrsh.w	r4, [sp, #412]	@ 0x19c
 800eb90:	9129      	str	r1, [sp, #164]	@ 0xa4
 800eb92:	460e      	mov	r6, r1
 800eb94:	fb01 f202 	mul.w	r2, r1, r2
 800eb98:	f9bd 1194 	ldrsh.w	r1, [sp, #404]	@ 0x194
 800eb9c:	f8bd c1b0 	ldrh.w	ip, [sp, #432]	@ 0x1b0
 800eba0:	9142      	str	r1, [sp, #264]	@ 0x108
 800eba2:	f9bd 11a0 	ldrsh.w	r1, [sp, #416]	@ 0x1a0
 800eba6:	f9bd 7190 	ldrsh.w	r7, [sp, #400]	@ 0x190
 800ebaa:	932d      	str	r3, [sp, #180]	@ 0xb4
 800ebac:	942a      	str	r4, [sp, #168]	@ 0xa8
 800ebae:	f9bd 3198 	ldrsh.w	r3, [sp, #408]	@ 0x198
 800ebb2:	f9bd 4188 	ldrsh.w	r4, [sp, #392]	@ 0x188
 800ebb6:	9113      	str	r1, [sp, #76]	@ 0x4c
 800ebb8:	f8cd c054 	str.w	ip, [sp, #84]	@ 0x54
 800ebbc:	f8bd 11a8 	ldrh.w	r1, [sp, #424]	@ 0x1a8
 800ebc0:	f8bd c1b4 	ldrh.w	ip, [sp, #436]	@ 0x1b4
 800ebc4:	9041      	str	r0, [sp, #260]	@ 0x104
 800ebc6:	933a      	str	r3, [sp, #232]	@ 0xe8
 800ebc8:	f8bd 01ac 	ldrh.w	r0, [sp, #428]	@ 0x1ac
 800ebcc:	912b      	str	r1, [sp, #172]	@ 0xac
 800ebce:	f9bd 91a4 	ldrsh.w	r9, [sp, #420]	@ 0x1a4
 800ebd2:	4243      	negs	r3, r0
 800ebd4:	950f      	str	r5, [sp, #60]	@ 0x3c
 800ebd6:	9418      	str	r4, [sp, #96]	@ 0x60
 800ebd8:	9714      	str	r7, [sp, #80]	@ 0x50
 800ebda:	f8cd c0b0 	str.w	ip, [sp, #176]	@ 0xb0
 800ebde:	f9bd c1b8 	ldrsh.w	ip, [sp, #440]	@ 0x1b8
 800ebe2:	931e      	str	r3, [sp, #120]	@ 0x78
 800ebe4:	f8cd c10c 	str.w	ip, [sp, #268]	@ 0x10c
 800ebe8:	f9bd c1e8 	ldrsh.w	ip, [sp, #488]	@ 0x1e8
 800ebec:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 800ebee:	f8cd c110 	str.w	ip, [sp, #272]	@ 0x110
 800ebf2:	f9bd c1f0 	ldrsh.w	ip, [sp, #496]	@ 0x1f0
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	f9bd 11d0 	ldrsh.w	r1, [sp, #464]	@ 0x1d0
 800ebfc:	f8cd c114 	str.w	ip, [sp, #276]	@ 0x114
 800ec00:	f9bd c1f4 	ldrsh.w	ip, [sp, #500]	@ 0x1f4
 800ec04:	f8cd c0b8 	str.w	ip, [sp, #184]	@ 0xb8
 800ec08:	f9bd c1f8 	ldrsh.w	ip, [sp, #504]	@ 0x1f8
 800ec0c:	f8cd c118 	str.w	ip, [sp, #280]	@ 0x118
 800ec10:	f9bd c1fc 	ldrsh.w	ip, [sp, #508]	@ 0x1fc
 800ec14:	f8cd c074 	str.w	ip, [sp, #116]	@ 0x74
 800ec18:	f340 80a9 	ble.w	800ed6e <forward_lite_conv2d_if32of32wf32_pool+0x206>
 800ec1c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ec1e:	3901      	subs	r1, #1
 800ec20:	9020      	str	r0, [sp, #128]	@ 0x80
 800ec22:	fb03 f309 	mul.w	r3, r3, r9
 800ec26:	fa1f fc81 	uxth.w	ip, r1
 800ec2a:	982e      	ldr	r0, [sp, #184]	@ 0xb8
 800ec2c:	fb04 f303 	mul.w	r3, r4, r3
 800ec30:	ed9f 8a51 	vldr	s16, [pc, #324]	@ 800ed78 <forward_lite_conv2d_if32of32wf32_pool+0x210>
 800ec34:	f8cd c084 	str.w	ip, [sp, #132]	@ 0x84
 800ec38:	0099      	lsls	r1, r3, #2
 800ec3a:	9124      	str	r1, [sp, #144]	@ 0x90
 800ec3c:	4631      	mov	r1, r6
 800ec3e:	b2b6      	uxth	r6, r6
 800ec40:	fb00 f301 	mul.w	r3, r0, r1
 800ec44:	9636      	str	r6, [sp, #216]	@ 0xd8
 800ec46:	00a6      	lsls	r6, r4, #2
 800ec48:	fb05 f303 	mul.w	r3, r5, r3
 800ec4c:	fb05 f501 	mul.w	r5, r5, r1
 800ec50:	0098      	lsls	r0, r3, #2
 800ec52:	9616      	str	r6, [sp, #88]	@ 0x58
 800ec54:	953d      	str	r5, [sp, #244]	@ 0xf4
 800ec56:	f10e 4578 	add.w	r5, lr, #4160749568	@ 0xf8000000
 800ec5a:	903e      	str	r0, [sp, #248]	@ 0xf8
 800ec5c:	9836      	ldr	r0, [sp, #216]	@ 0xd8
 800ec5e:	953b      	str	r5, [sp, #236]	@ 0xec
 800ec60:	1e43      	subs	r3, r0, #1
 800ec62:	b29b      	uxth	r3, r3
 800ec64:	3301      	adds	r3, #1
 800ec66:	0098      	lsls	r0, r3, #2
 800ec68:	9035      	str	r0, [sp, #212]	@ 0xd4
 800ec6a:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 800ec6c:	fb00 f307 	mul.w	r3, r0, r7
 800ec70:	fb04 f303 	mul.w	r3, r4, r3
 800ec74:	0098      	lsls	r0, r3, #2
 800ec76:	9b3a      	ldr	r3, [sp, #232]	@ 0xe8
 800ec78:	9034      	str	r0, [sp, #208]	@ 0xd0
 800ec7a:	0090      	lsls	r0, r2, #2
 800ec7c:	fb01 f303 	mul.w	r3, r1, r3
 800ec80:	0089      	lsls	r1, r1, #2
 800ec82:	9032      	str	r0, [sp, #200]	@ 0xc8
 800ec84:	9860      	ldr	r0, [sp, #384]	@ 0x180
 800ec86:	9112      	str	r1, [sp, #72]	@ 0x48
 800ec88:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800ec8c:	0098      	lsls	r0, r3, #2
 800ec8e:	fb07 f306 	mul.w	r3, r7, r6
 800ec92:	921f      	str	r2, [sp, #124]	@ 0x7c
 800ec94:	903c      	str	r0, [sp, #240]	@ 0xf0
 800ec96:	981e      	ldr	r0, [sp, #120]	@ 0x78
 800ec98:	fb00 8703 	mla	r7, r0, r3, r8
 800ec9c:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 800ec9e:	9832      	ldr	r0, [sp, #200]	@ 0xc8
 800eca0:	9722      	str	r7, [sp, #136]	@ 0x88
 800eca2:	425f      	negs	r7, r3
 800eca4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800eca6:	4241      	negs	r1, r0
 800eca8:	9731      	str	r7, [sp, #196]	@ 0xc4
 800ecaa:	fb03 f304 	mul.w	r3, r3, r4
 800ecae:	9125      	str	r1, [sp, #148]	@ 0x94
 800ecb0:	009c      	lsls	r4, r3, #2
 800ecb2:	fb06 f107 	mul.w	r1, r6, r7
 800ecb6:	9417      	str	r4, [sp, #92]	@ 0x5c
 800ecb8:	2400      	movs	r4, #0
 800ecba:	9137      	str	r1, [sp, #220]	@ 0xdc
 800ecbc:	9960      	ldr	r1, [sp, #384]	@ 0x180
 800ecbe:	9427      	str	r4, [sp, #156]	@ 0x9c
 800ecc0:	911b      	str	r1, [sp, #108]	@ 0x6c
 800ecc2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ecc4:	9428      	str	r4, [sp, #160]	@ 0xa0
 800ecc6:	9333      	str	r3, [sp, #204]	@ 0xcc
 800ecc8:	9b76      	ldr	r3, [sp, #472]	@ 0x1d8
 800ecca:	932f      	str	r3, [sp, #188]	@ 0xbc
 800eccc:	1e53      	subs	r3, r2, #1
 800ecce:	9347      	str	r3, [sp, #284]	@ 0x11c
 800ecd0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ecd2:	3301      	adds	r3, #1
 800ecd4:	b21b      	sxth	r3, r3
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	dc68      	bgt.n	800edac <forward_lite_conv2d_if32of32wf32_pool+0x244>
 800ecda:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ecdc:	041b      	lsls	r3, r3, #16
 800ecde:	f100 81d5 	bmi.w	800f08c <forward_lite_conv2d_if32of32wf32_pool+0x524>
 800ece2:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 800ece4:	9e1d      	ldr	r6, [sp, #116]	@ 0x74
 800ece6:	42b2      	cmp	r2, r6
 800ece8:	dc48      	bgt.n	800ed7c <forward_lite_conv2d_if32of32wf32_pool+0x214>
 800ecea:	9c2c      	ldr	r4, [sp, #176]	@ 0xb0
 800ecec:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800ecee:	981e      	ldr	r0, [sp, #120]	@ 0x78
 800ecf0:	3301      	adds	r3, #1
 800ecf2:	9938      	ldr	r1, [sp, #224]	@ 0xe0
 800ecf4:	4420      	add	r0, r4
 800ecf6:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 800ecf8:	b21d      	sxth	r5, r3
 800ecfa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ecfc:	901e      	str	r0, [sp, #120]	@ 0x78
 800ecfe:	983c      	ldr	r0, [sp, #240]	@ 0xf0
 800ed00:	1b1b      	subs	r3, r3, r4
 800ed02:	9108      	str	r1, [sp, #32]
 800ed04:	4401      	add	r1, r0
 800ed06:	9320      	str	r3, [sp, #128]	@ 0x80
 800ed08:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800ed0a:	9138      	str	r1, [sp, #224]	@ 0xe0
 800ed0c:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 800ed0e:	9528      	str	r5, [sp, #160]	@ 0xa0
 800ed10:	440b      	add	r3, r1
 800ed12:	9322      	str	r3, [sp, #136]	@ 0x88
 800ed14:	b293      	uxth	r3, r2
 800ed16:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 800ed18:	9301      	str	r3, [sp, #4]
 800ed1a:	1a9b      	subs	r3, r3, r2
 800ed1c:	b29a      	uxth	r2, r3
 800ed1e:	b2bb      	uxth	r3, r7
 800ed20:	1af1      	subs	r1, r6, r3
 800ed22:	9305      	str	r3, [sp, #20]
 800ed24:	9e33      	ldr	r6, [sp, #204]	@ 0xcc
 800ed26:	b20b      	sxth	r3, r1
 800ed28:	f8bd 103c 	ldrh.w	r1, [sp, #60]	@ 0x3c
 800ed2c:	931d      	str	r3, [sp, #116]	@ 0x74
 800ed2e:	b2b3      	uxth	r3, r6
 800ed30:	9303      	str	r3, [sp, #12]
 800ed32:	2301      	movs	r3, #1
 800ed34:	9307      	str	r3, [sp, #28]
 800ed36:	f8bd 30e8 	ldrh.w	r3, [sp, #232]	@ 0xe8
 800ed3a:	9306      	str	r3, [sp, #24]
 800ed3c:	f8bd 3114 	ldrh.w	r3, [sp, #276]	@ 0x114
 800ed40:	9304      	str	r3, [sp, #16]
 800ed42:	f8bd 3118 	ldrh.w	r3, [sp, #280]	@ 0x118
 800ed46:	9302      	str	r3, [sp, #8]
 800ed48:	f8bd 3110 	ldrh.w	r3, [sp, #272]	@ 0x110
 800ed4c:	9300      	str	r3, [sp, #0]
 800ed4e:	9b36      	ldr	r3, [sp, #216]	@ 0xd8
 800ed50:	9860      	ldr	r0, [sp, #384]	@ 0x180
 800ed52:	9c79      	ldr	r4, [sp, #484]	@ 0x1e4
 800ed54:	47a0      	blx	r4
 800ed56:	1bf3      	subs	r3, r6, r7
 800ed58:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800ed5a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ed5e:	3a01      	subs	r2, #1
 800ed60:	b21b      	sxth	r3, r3
 800ed62:	b292      	uxth	r2, r2
 800ed64:	9333      	str	r3, [sp, #204]	@ 0xcc
 800ed66:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 800ed68:	9221      	str	r2, [sp, #132]	@ 0x84
 800ed6a:	42ab      	cmp	r3, r5
 800ed6c:	dcb0      	bgt.n	800ecd0 <forward_lite_conv2d_if32of32wf32_pool+0x168>
 800ed6e:	b049      	add	sp, #292	@ 0x124
 800ed70:	ecbd 8b0e 	vpop	{d8-d14}
 800ed74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed78:	00000000 	.word	0x00000000
 800ed7c:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 800ed7e:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 800ed80:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ed82:	440a      	add	r2, r1
 800ed84:	3b01      	subs	r3, #1
 800ed86:	921e      	str	r2, [sp, #120]	@ 0x78
 800ed88:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800ed8a:	b29b      	uxth	r3, r3
 800ed8c:	1a52      	subs	r2, r2, r1
 800ed8e:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 800ed90:	9321      	str	r3, [sp, #132]	@ 0x84
 800ed92:	9220      	str	r2, [sp, #128]	@ 0x80
 800ed94:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800ed96:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 800ed98:	440a      	add	r2, r1
 800ed9a:	9222      	str	r2, [sp, #136]	@ 0x88
 800ed9c:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 800ed9e:	4293      	cmp	r3, r2
 800eda0:	dde5      	ble.n	800ed6e <forward_lite_conv2d_if32of32wf32_pool+0x206>
 800eda2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800eda4:	3301      	adds	r3, #1
 800eda6:	b21b      	sxth	r3, r3
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	dd96      	ble.n	800ecda <forward_lite_conv2d_if32of32wf32_pool+0x172>
 800edac:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800edae:	2b00      	cmp	r3, #0
 800edb0:	f2c0 82d1 	blt.w	800f356 <forward_lite_conv2d_if32of32wf32_pool+0x7ee>
 800edb4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800edb6:	931c      	str	r3, [sp, #112]	@ 0x70
 800edb8:	2300      	movs	r3, #0
 800edba:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800edbc:	9a42      	ldr	r2, [sp, #264]	@ 0x108
 800edbe:	440a      	add	r2, r1
 800edc0:	9943      	ldr	r1, [sp, #268]	@ 0x10c
 800edc2:	428a      	cmp	r2, r1
 800edc4:	bfd4      	ite	le
 800edc6:	ebc3 0b02 	rsble	fp, r3, r2
 800edca:	ebc3 0b01 	rsbgt	fp, r3, r1
 800edce:	9a61      	ldr	r2, [sp, #388]	@ 0x184
 800edd0:	2a00      	cmp	r2, #0
 800edd2:	f000 819d 	beq.w	800f110 <forward_lite_conv2d_if32of32wf32_pool+0x5a8>
 800edd6:	9a3b      	ldr	r2, [sp, #236]	@ 0xec
 800edd8:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 800eddc:	f0c0 8198 	bcc.w	800f110 <forward_lite_conv2d_if32of32wf32_pool+0x5a8>
 800ede0:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 800ede2:	2a00      	cmp	r2, #0
 800ede4:	f340 8115 	ble.w	800f012 <forward_lite_conv2d_if32of32wf32_pool+0x4aa>
 800ede8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800edea:	9937      	ldr	r1, [sp, #220]	@ 0xdc
 800edec:	fb02 f303 	mul.w	r3, r2, r3
 800edf0:	9a35      	ldr	r2, [sp, #212]	@ 0xd4
 800edf2:	9319      	str	r3, [sp, #100]	@ 0x64
 800edf4:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800edf6:	189a      	adds	r2, r3, r2
 800edf8:	9326      	str	r3, [sp, #152]	@ 0x98
 800edfa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800edfc:	923f      	str	r2, [sp, #252]	@ 0xfc
 800edfe:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800ee00:	9330      	str	r3, [sp, #192]	@ 0xc0
 800ee02:	440a      	add	r2, r1
 800ee04:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 800ee06:	9240      	str	r2, [sp, #256]	@ 0x100
 800ee08:	931a      	str	r3, [sp, #104]	@ 0x68
 800ee0a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800ee0c:	9961      	ldr	r1, [sp, #388]	@ 0x184
 800ee0e:	981a      	ldr	r0, [sp, #104]	@ 0x68
 800ee10:	f001 fe4a 	bl	8010aa8 <st_int8_copy>
 800ee14:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	f000 8135 	beq.w	800f086 <forward_lite_conv2d_if32of32wf32_pool+0x51e>
 800ee1c:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 800ee1e:	ecf3 1a01 	vldmia	r3!, {s3}
 800ee22:	9330      	str	r3, [sp, #192]	@ 0xc0
 800ee24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	f000 80e8 	beq.w	800effc <forward_lite_conv2d_if32of32wf32_pool+0x494>
 800ee2c:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 800ee2e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800ee30:	189a      	adds	r2, r3, r2
 800ee32:	920c      	str	r2, [sp, #48]	@ 0x30
 800ee34:	9a40      	ldr	r2, [sp, #256]	@ 0x100
 800ee36:	e9cd 230d 	strd	r2, r3, [sp, #52]	@ 0x34
 800ee3a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800ee3c:	9310      	str	r3, [sp, #64]	@ 0x40
 800ee3e:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 800ee40:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ee42:	2300      	movs	r3, #0
 800ee44:	9311      	str	r3, [sp, #68]	@ 0x44
 800ee46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	f2c0 8113 	blt.w	800f074 <forward_lite_conv2d_if32of32wf32_pool+0x50c>
 800ee4e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800ee50:	2600      	movs	r6, #0
 800ee52:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ee54:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800ee56:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ee58:	9c61      	ldr	r4, [sp, #388]	@ 0x184
 800ee5a:	4298      	cmp	r0, r3
 800ee5c:	bf94      	ite	ls
 800ee5e:	ebc6 0600 	rsbls	r6, r6, r0
 800ee62:	ebc6 0603 	rsbhi	r6, r6, r3
 800ee66:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ee68:	f1bb 0f00 	cmp.w	fp, #0
 800ee6c:	eba0 0906 	sub.w	r9, r0, r6
 800ee70:	fb02 4203 	mla	r2, r2, r3, r4
 800ee74:	9818      	ldr	r0, [sp, #96]	@ 0x60
 800ee76:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 800ee78:	eba4 0a06 	sub.w	sl, r4, r6
 800ee7c:	fb00 f606 	mul.w	r6, r0, r6
 800ee80:	f340 80fe 	ble.w	800f080 <forward_lite_conv2d_if32of32wf32_pool+0x518>
 800ee84:	f026 070f 	bic.w	r7, r6, #15
 800ee88:	eeb0 7a61 	vmov.f32	s14, s3
 800ee8c:	fb0a fa03 	mul.w	sl, sl, r3
 800ee90:	f04f 0c00 	mov.w	ip, #0
 800ee94:	f107 38ff 	add.w	r8, r7, #4294967295
 800ee98:	fb09 f903 	mul.w	r9, r9, r3
 800ee9c:	ea4f 1818 	mov.w	r8, r8, lsr #4
 800eea0:	f108 0801 	add.w	r8, r8, #1
 800eea4:	ea4f 1e88 	mov.w	lr, r8, lsl #6
 800eea8:	ea4f 1808 	mov.w	r8, r8, lsl #4
 800eeac:	2f00      	cmp	r7, #0
 800eeae:	f340 80df 	ble.w	800f070 <forward_lite_conv2d_if32of32wf32_pool+0x508>
 800eeb2:	f101 0040 	add.w	r0, r1, #64	@ 0x40
 800eeb6:	f102 0340 	add.w	r3, r2, #64	@ 0x40
 800eeba:	2400      	movs	r4, #0
 800eebc:	ed53 6a0f 	vldr	s13, [r3, #-60]	@ 0xffffffc4
 800eec0:	3410      	adds	r4, #16
 800eec2:	ed50 7a0f 	vldr	s15, [r0, #-60]	@ 0xffffffc4
 800eec6:	3340      	adds	r3, #64	@ 0x40
 800eec8:	ed50 4a10 	vldr	s9, [r0, #-64]	@ 0xffffffc0
 800eecc:	42bc      	cmp	r4, r7
 800eece:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800eed2:	ed13 5a20 	vldr	s10, [r3, #-128]	@ 0xffffff80
 800eed6:	ed50 5a0e 	vldr	s11, [r0, #-56]	@ 0xffffffc8
 800eeda:	f100 0040 	add.w	r0, r0, #64	@ 0x40
 800eede:	ed13 6a1e 	vldr	s12, [r3, #-120]	@ 0xffffff88
 800eee2:	eee4 7a85 	vfma.f32	s15, s9, s10
 800eee6:	ed53 6a1d 	vldr	s13, [r3, #-116]	@ 0xffffff8c
 800eeea:	ed10 ea1d 	vldr	s28, [r0, #-116]	@ 0xffffff8c
 800eeee:	ed50 da1c 	vldr	s27, [r0, #-112]	@ 0xffffff90
 800eef2:	ed13 da1c 	vldr	s26, [r3, #-112]	@ 0xffffff90
 800eef6:	ed50 ca1b 	vldr	s25, [r0, #-108]	@ 0xffffff94
 800eefa:	ed13 ca1b 	vldr	s24, [r3, #-108]	@ 0xffffff94
 800eefe:	eee5 7a86 	vfma.f32	s15, s11, s12
 800ef02:	ed50 ba1a 	vldr	s23, [r0, #-104]	@ 0xffffff98
 800ef06:	ed13 ba1a 	vldr	s22, [r3, #-104]	@ 0xffffff98
 800ef0a:	ed50 aa19 	vldr	s21, [r0, #-100]	@ 0xffffff9c
 800ef0e:	ed13 aa19 	vldr	s20, [r3, #-100]	@ 0xffffff9c
 800ef12:	ed50 9a18 	vldr	s19, [r0, #-96]	@ 0xffffffa0
 800ef16:	ed13 9a18 	vldr	s18, [r3, #-96]	@ 0xffffffa0
 800ef1a:	eeee 7a26 	vfma.f32	s15, s28, s13
 800ef1e:	ed50 8a17 	vldr	s17, [r0, #-92]	@ 0xffffffa4
 800ef22:	ed13 0a17 	vldr	s0, [r3, #-92]	@ 0xffffffa4
 800ef26:	ed50 0a16 	vldr	s1, [r0, #-88]	@ 0xffffffa8
 800ef2a:	ed13 1a16 	vldr	s2, [r3, #-88]	@ 0xffffffa8
 800ef2e:	ed10 2a15 	vldr	s4, [r0, #-84]	@ 0xffffffac
 800ef32:	ed53 2a15 	vldr	s5, [r3, #-84]	@ 0xffffffac
 800ef36:	eeed 7a8d 	vfma.f32	s15, s27, s26
 800ef3a:	ed10 3a14 	vldr	s6, [r0, #-80]	@ 0xffffffb0
 800ef3e:	ed53 3a14 	vldr	s7, [r3, #-80]	@ 0xffffffb0
 800ef42:	ed10 4a13 	vldr	s8, [r0, #-76]	@ 0xffffffb4
 800ef46:	ed53 4a13 	vldr	s9, [r3, #-76]	@ 0xffffffb4
 800ef4a:	ed10 5a12 	vldr	s10, [r0, #-72]	@ 0xffffffb8
 800ef4e:	ed53 5a12 	vldr	s11, [r3, #-72]	@ 0xffffffb8
 800ef52:	eeec 7a8c 	vfma.f32	s15, s25, s24
 800ef56:	ed10 6a11 	vldr	s12, [r0, #-68]	@ 0xffffffbc
 800ef5a:	ed53 6a11 	vldr	s13, [r3, #-68]	@ 0xffffffbc
 800ef5e:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800ef62:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800ef66:	eee9 7a89 	vfma.f32	s15, s19, s18
 800ef6a:	eee8 7a80 	vfma.f32	s15, s17, s0
 800ef6e:	eee0 7a81 	vfma.f32	s15, s1, s2
 800ef72:	eee2 7a22 	vfma.f32	s15, s4, s5
 800ef76:	eee3 7a23 	vfma.f32	s15, s6, s7
 800ef7a:	eee4 7a24 	vfma.f32	s15, s8, s9
 800ef7e:	eee5 7a25 	vfma.f32	s15, s10, s11
 800ef82:	eee6 7a26 	vfma.f32	s15, s12, s13
 800ef86:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ef8a:	db97      	blt.n	800eebc <forward_lite_conv2d_if32of32wf32_pool+0x354>
 800ef8c:	4471      	add	r1, lr
 800ef8e:	4472      	add	r2, lr
 800ef90:	4645      	mov	r5, r8
 800ef92:	42ae      	cmp	r6, r5
 800ef94:	dd10      	ble.n	800efb8 <forward_lite_conv2d_if32of32wf32_pool+0x450>
 800ef96:	462b      	mov	r3, r5
 800ef98:	460c      	mov	r4, r1
 800ef9a:	4610      	mov	r0, r2
 800ef9c:	3301      	adds	r3, #1
 800ef9e:	ecf0 6a01 	vldmia	r0!, {s13}
 800efa2:	ecf4 7a01 	vldmia	r4!, {s15}
 800efa6:	429e      	cmp	r6, r3
 800efa8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800efac:	d1f6      	bne.n	800ef9c <forward_lite_conv2d_if32of32wf32_pool+0x434>
 800efae:	1b75      	subs	r5, r6, r5
 800efb0:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800efb4:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 800efb8:	f10c 0c01 	add.w	ip, ip, #1
 800efbc:	4451      	add	r1, sl
 800efbe:	444a      	add	r2, r9
 800efc0:	45e3      	cmp	fp, ip
 800efc2:	f47f af73 	bne.w	800eeac <forward_lite_conv2d_if32of32wf32_pool+0x344>
 800efc6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800efc8:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800efca:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800efcc:	4410      	add	r0, r2
 800efce:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800efd0:	ed81 7a00 	vstr	s14, [r1]
 800efd4:	900b      	str	r0, [sp, #44]	@ 0x2c
 800efd6:	3301      	adds	r3, #1
 800efd8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800efda:	9311      	str	r3, [sp, #68]	@ 0x44
 800efdc:	4401      	add	r1, r0
 800efde:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 800efe0:	9110      	str	r1, [sp, #64]	@ 0x40
 800efe2:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800efe4:	1a89      	subs	r1, r1, r2
 800efe6:	910e      	str	r1, [sp, #56]	@ 0x38
 800efe8:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800efea:	4401      	add	r1, r0
 800efec:	910d      	str	r1, [sp, #52]	@ 0x34
 800efee:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800eff0:	1a8a      	subs	r2, r1, r2
 800eff2:	920c      	str	r2, [sp, #48]	@ 0x30
 800eff4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800eff6:	429a      	cmp	r2, r3
 800eff8:	f47f af25 	bne.w	800ee46 <forward_lite_conv2d_if32of32wf32_pool+0x2de>
 800effc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800effe:	9924      	ldr	r1, [sp, #144]	@ 0x90
 800f000:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800f002:	440a      	add	r2, r1
 800f004:	3304      	adds	r3, #4
 800f006:	921a      	str	r2, [sp, #104]	@ 0x68
 800f008:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 800f00a:	9326      	str	r3, [sp, #152]	@ 0x98
 800f00c:	4293      	cmp	r3, r2
 800f00e:	f47f aefc 	bne.w	800ee0a <forward_lite_conv2d_if32of32wf32_pool+0x2a2>
 800f012:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f014:	2b00      	cmp	r3, #0
 800f016:	dd26      	ble.n	800f066 <forward_lite_conv2d_if32of32wf32_pool+0x4fe>
 800f018:	9b75      	ldr	r3, [sp, #468]	@ 0x1d4
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	f000 819f 	beq.w	800f35e <forward_lite_conv2d_if32of32wf32_pool+0x7f6>
 800f020:	4699      	mov	r9, r3
 800f022:	2400      	movs	r4, #0
 800f024:	9d2f      	ldr	r5, [sp, #188]	@ 0xbc
 800f026:	f8dd 806c 	ldr.w	r8, [sp, #108]	@ 0x6c
 800f02a:	9f29      	ldr	r7, [sp, #164]	@ 0xa4
 800f02c:	f8dd b1e0 	ldr.w	fp, [sp, #480]	@ 0x1e0
 800f030:	e9dd 6a76 	ldrd	r6, sl, [sp, #472]	@ 0x1d8
 800f034:	462b      	mov	r3, r5
 800f036:	4455      	add	r5, sl
 800f038:	463a      	mov	r2, r7
 800f03a:	4641      	mov	r1, r8
 800f03c:	4640      	mov	r0, r8
 800f03e:	3401      	adds	r4, #1
 800f040:	47c8      	blx	r9
 800f042:	1bab      	subs	r3, r5, r6
 800f044:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800f046:	b224      	sxth	r4, r4
 800f048:	455b      	cmp	r3, fp
 800f04a:	bfa8      	it	ge
 800f04c:	4635      	movge	r5, r6
 800f04e:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800f050:	4490      	add	r8, r2
 800f052:	4543      	cmp	r3, r8
 800f054:	d801      	bhi.n	800f05a <forward_lite_conv2d_if32of32wf32_pool+0x4f2>
 800f056:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 800f058:	4498      	add	r8, r3
 800f05a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f05c:	42a3      	cmp	r3, r4
 800f05e:	d1e9      	bne.n	800f034 <forward_lite_conv2d_if32of32wf32_pool+0x4cc>
 800f060:	952f      	str	r5, [sp, #188]	@ 0xbc
 800f062:	f8cd 806c 	str.w	r8, [sp, #108]	@ 0x6c
 800f066:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f068:	3301      	adds	r3, #1
 800f06a:	b21b      	sxth	r3, r3
 800f06c:	931d      	str	r3, [sp, #116]	@ 0x74
 800f06e:	e638      	b.n	800ece2 <forward_lite_conv2d_if32of32wf32_pool+0x17a>
 800f070:	2500      	movs	r5, #0
 800f072:	e78e      	b.n	800ef92 <forward_lite_conv2d_if32of32wf32_pool+0x42a>
 800f074:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f076:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f078:	4616      	mov	r6, r2
 800f07a:	991c      	ldr	r1, [sp, #112]	@ 0x70
 800f07c:	189a      	adds	r2, r3, r2
 800f07e:	e6e9      	b.n	800ee54 <forward_lite_conv2d_if32of32wf32_pool+0x2ec>
 800f080:	eeb0 7a61 	vmov.f32	s14, s3
 800f084:	e79f      	b.n	800efc6 <forward_lite_conv2d_if32of32wf32_pool+0x45e>
 800f086:	eef0 1a48 	vmov.f32	s3, s16
 800f08a:	e6cb      	b.n	800ee24 <forward_lite_conv2d_if32of32wf32_pool+0x2bc>
 800f08c:	9a3d      	ldr	r2, [sp, #244]	@ 0xf4
 800f08e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f090:	fb02 f303 	mul.w	r3, r2, r3
 800f094:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800f096:	eba2 0383 	sub.w	r3, r2, r3, lsl #2
 800f09a:	9a60      	ldr	r2, [sp, #384]	@ 0x180
 800f09c:	429a      	cmp	r2, r3
 800f09e:	d901      	bls.n	800f0a4 <forward_lite_conv2d_if32of32wf32_pool+0x53c>
 800f0a0:	9a32      	ldr	r2, [sp, #200]	@ 0xc8
 800f0a2:	4413      	add	r3, r2
 800f0a4:	9a60      	ldr	r2, [sp, #384]	@ 0x180
 800f0a6:	429a      	cmp	r2, r3
 800f0a8:	d217      	bcs.n	800f0da <forward_lite_conv2d_if32of32wf32_pool+0x572>
 800f0aa:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 800f0ac:	991d      	ldr	r1, [sp, #116]	@ 0x74
 800f0ae:	428a      	cmp	r2, r1
 800f0b0:	d013      	beq.n	800f0da <forward_lite_conv2d_if32of32wf32_pool+0x572>
 800f0b2:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 800f0b4:	429a      	cmp	r2, r3
 800f0b6:	d910      	bls.n	800f0da <forward_lite_conv2d_if32of32wf32_pool+0x572>
 800f0b8:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 800f0ba:	461a      	mov	r2, r3
 800f0bc:	f852 0b04 	ldr.w	r0, [r2], #4
 800f0c0:	f841 0b04 	str.w	r0, [r1], #4
 800f0c4:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 800f0c6:	4290      	cmp	r0, r2
 800f0c8:	d8f8      	bhi.n	800f0bc <forward_lite_conv2d_if32of32wf32_pool+0x554>
 800f0ca:	9a47      	ldr	r2, [sp, #284]	@ 0x11c
 800f0cc:	1ad3      	subs	r3, r2, r3
 800f0ce:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800f0d0:	f023 0303 	bic.w	r3, r3, #3
 800f0d4:	3304      	adds	r3, #4
 800f0d6:	441a      	add	r2, r3
 800f0d8:	921b      	str	r2, [sp, #108]	@ 0x6c
 800f0da:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 800f0dc:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 800f0de:	f8bd 3074 	ldrh.w	r3, [sp, #116]	@ 0x74
 800f0e2:	440a      	add	r2, r1
 800f0e4:	983e      	ldr	r0, [sp, #248]	@ 0xf8
 800f0e6:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 800f0e8:	1ad2      	subs	r2, r2, r3
 800f0ea:	4401      	add	r1, r0
 800f0ec:	982e      	ldr	r0, [sp, #184]	@ 0xb8
 800f0ee:	b212      	sxth	r2, r2
 800f0f0:	4403      	add	r3, r0
 800f0f2:	911b      	str	r1, [sp, #108]	@ 0x6c
 800f0f4:	9227      	str	r2, [sp, #156]	@ 0x9c
 800f0f6:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 800f0f8:	b21b      	sxth	r3, r3
 800f0fa:	428a      	cmp	r2, r1
 800f0fc:	931d      	str	r3, [sp, #116]	@ 0x74
 800f0fe:	460b      	mov	r3, r1
 800f100:	f63f adef 	bhi.w	800ece2 <forward_lite_conv2d_if32of32wf32_pool+0x17a>
 800f104:	9925      	ldr	r1, [sp, #148]	@ 0x94
 800f106:	440b      	add	r3, r1
 800f108:	429a      	cmp	r2, r3
 800f10a:	d9fc      	bls.n	800f106 <forward_lite_conv2d_if32of32wf32_pool+0x59e>
 800f10c:	931b      	str	r3, [sp, #108]	@ 0x6c
 800f10e:	e5e8      	b.n	800ece2 <forward_lite_conv2d_if32of32wf32_pool+0x17a>
 800f110:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 800f112:	2a00      	cmp	r2, #0
 800f114:	f77f af7d 	ble.w	800f012 <forward_lite_conv2d_if32of32wf32_pool+0x4aa>
 800f118:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f11a:	9937      	ldr	r1, [sp, #220]	@ 0xdc
 800f11c:	fb02 f303 	mul.w	r3, r2, r3
 800f120:	9a35      	ldr	r2, [sp, #212]	@ 0xd4
 800f122:	931a      	str	r3, [sp, #104]	@ 0x68
 800f124:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800f126:	189a      	adds	r2, r3, r2
 800f128:	9326      	str	r3, [sp, #152]	@ 0x98
 800f12a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f12c:	923f      	str	r2, [sp, #252]	@ 0xfc
 800f12e:	9330      	str	r3, [sp, #192]	@ 0xc0
 800f130:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800f132:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 800f134:	440a      	add	r2, r1
 800f136:	9319      	str	r3, [sp, #100]	@ 0x64
 800f138:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f13a:	9240      	str	r2, [sp, #256]	@ 0x100
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	f000 80fc 	beq.w	800f33a <forward_lite_conv2d_if32of32wf32_pool+0x7d2>
 800f142:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 800f144:	ecf3 1a01 	vldmia	r3!, {s3}
 800f148:	9330      	str	r3, [sp, #192]	@ 0xc0
 800f14a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	f000 80e5 	beq.w	800f31c <forward_lite_conv2d_if32of32wf32_pool+0x7b4>
 800f152:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 800f154:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800f156:	189a      	adds	r2, r3, r2
 800f158:	920c      	str	r2, [sp, #48]	@ 0x30
 800f15a:	9a40      	ldr	r2, [sp, #256]	@ 0x100
 800f15c:	e9cd 230d 	strd	r2, r3, [sp, #52]	@ 0x34
 800f160:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800f162:	9310      	str	r3, [sp, #64]	@ 0x40
 800f164:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 800f166:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f168:	2300      	movs	r3, #0
 800f16a:	9311      	str	r3, [sp, #68]	@ 0x44
 800f16c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f16e:	2b00      	cmp	r3, #0
 800f170:	f2c0 80e8 	blt.w	800f344 <forward_lite_conv2d_if32of32wf32_pool+0x7dc>
 800f174:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f176:	2000      	movs	r0, #0
 800f178:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800f17a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800f17c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800f17e:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800f180:	428c      	cmp	r4, r1
 800f182:	bf94      	ite	ls
 800f184:	ebc0 0004 	rsbls	r0, r0, r4
 800f188:	ebc0 0001 	rsbhi	r0, r0, r1
 800f18c:	9916      	ldr	r1, [sp, #88]	@ 0x58
 800f18e:	f1bb 0f00 	cmp.w	fp, #0
 800f192:	eba4 0900 	sub.w	r9, r4, r0
 800f196:	fb03 5301 	mla	r3, r3, r1, r5
 800f19a:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 800f19c:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800f19e:	eba5 0a00 	sub.w	sl, r5, r0
 800f1a2:	fb04 f000 	mul.w	r0, r4, r0
 800f1a6:	f340 80d3 	ble.w	800f350 <forward_lite_conv2d_if32of32wf32_pool+0x7e8>
 800f1aa:	f020 080f 	bic.w	r8, r0, #15
 800f1ae:	eeb0 7a61 	vmov.f32	s14, s3
 800f1b2:	fb0a fa01 	mul.w	sl, sl, r1
 800f1b6:	2400      	movs	r4, #0
 800f1b8:	f108 37ff 	add.w	r7, r8, #4294967295
 800f1bc:	fb09 f901 	mul.w	r9, r9, r1
 800f1c0:	093f      	lsrs	r7, r7, #4
 800f1c2:	3701      	adds	r7, #1
 800f1c4:	01be      	lsls	r6, r7, #6
 800f1c6:	013f      	lsls	r7, r7, #4
 800f1c8:	f1b8 0f00 	cmp.w	r8, #0
 800f1cc:	f340 80b8 	ble.w	800f340 <forward_lite_conv2d_if32of32wf32_pool+0x7d8>
 800f1d0:	f102 0540 	add.w	r5, r2, #64	@ 0x40
 800f1d4:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800f1d8:	f04f 0c00 	mov.w	ip, #0
 800f1dc:	ed51 6a0f 	vldr	s13, [r1, #-60]	@ 0xffffffc4
 800f1e0:	f10c 0c10 	add.w	ip, ip, #16
 800f1e4:	ed55 7a0f 	vldr	s15, [r5, #-60]	@ 0xffffffc4
 800f1e8:	3140      	adds	r1, #64	@ 0x40
 800f1ea:	ed55 4a10 	vldr	s9, [r5, #-64]	@ 0xffffffc0
 800f1ee:	45c4      	cmp	ip, r8
 800f1f0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f1f4:	ed11 5a20 	vldr	s10, [r1, #-128]	@ 0xffffff80
 800f1f8:	ed55 5a0e 	vldr	s11, [r5, #-56]	@ 0xffffffc8
 800f1fc:	f105 0540 	add.w	r5, r5, #64	@ 0x40
 800f200:	ed11 6a1e 	vldr	s12, [r1, #-120]	@ 0xffffff88
 800f204:	eee4 7a85 	vfma.f32	s15, s9, s10
 800f208:	ed51 6a1d 	vldr	s13, [r1, #-116]	@ 0xffffff8c
 800f20c:	ed15 ea1d 	vldr	s28, [r5, #-116]	@ 0xffffff8c
 800f210:	ed55 da1c 	vldr	s27, [r5, #-112]	@ 0xffffff90
 800f214:	ed11 da1c 	vldr	s26, [r1, #-112]	@ 0xffffff90
 800f218:	ed55 ca1b 	vldr	s25, [r5, #-108]	@ 0xffffff94
 800f21c:	ed11 ca1b 	vldr	s24, [r1, #-108]	@ 0xffffff94
 800f220:	eee5 7a86 	vfma.f32	s15, s11, s12
 800f224:	ed55 ba1a 	vldr	s23, [r5, #-104]	@ 0xffffff98
 800f228:	ed11 ba1a 	vldr	s22, [r1, #-104]	@ 0xffffff98
 800f22c:	ed55 aa19 	vldr	s21, [r5, #-100]	@ 0xffffff9c
 800f230:	ed11 aa19 	vldr	s20, [r1, #-100]	@ 0xffffff9c
 800f234:	ed55 9a18 	vldr	s19, [r5, #-96]	@ 0xffffffa0
 800f238:	ed11 9a18 	vldr	s18, [r1, #-96]	@ 0xffffffa0
 800f23c:	eeee 7a26 	vfma.f32	s15, s28, s13
 800f240:	ed55 8a17 	vldr	s17, [r5, #-92]	@ 0xffffffa4
 800f244:	ed11 0a17 	vldr	s0, [r1, #-92]	@ 0xffffffa4
 800f248:	ed55 0a16 	vldr	s1, [r5, #-88]	@ 0xffffffa8
 800f24c:	ed11 1a16 	vldr	s2, [r1, #-88]	@ 0xffffffa8
 800f250:	ed15 2a15 	vldr	s4, [r5, #-84]	@ 0xffffffac
 800f254:	ed51 2a15 	vldr	s5, [r1, #-84]	@ 0xffffffac
 800f258:	eeed 7a8d 	vfma.f32	s15, s27, s26
 800f25c:	ed15 3a14 	vldr	s6, [r5, #-80]	@ 0xffffffb0
 800f260:	ed51 3a14 	vldr	s7, [r1, #-80]	@ 0xffffffb0
 800f264:	ed15 4a13 	vldr	s8, [r5, #-76]	@ 0xffffffb4
 800f268:	ed51 4a13 	vldr	s9, [r1, #-76]	@ 0xffffffb4
 800f26c:	ed15 5a12 	vldr	s10, [r5, #-72]	@ 0xffffffb8
 800f270:	ed51 5a12 	vldr	s11, [r1, #-72]	@ 0xffffffb8
 800f274:	eeec 7a8c 	vfma.f32	s15, s25, s24
 800f278:	ed15 6a11 	vldr	s12, [r5, #-68]	@ 0xffffffbc
 800f27c:	ed51 6a11 	vldr	s13, [r1, #-68]	@ 0xffffffbc
 800f280:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800f284:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800f288:	eee9 7a89 	vfma.f32	s15, s19, s18
 800f28c:	eee8 7a80 	vfma.f32	s15, s17, s0
 800f290:	eee0 7a81 	vfma.f32	s15, s1, s2
 800f294:	eee2 7a22 	vfma.f32	s15, s4, s5
 800f298:	eee3 7a23 	vfma.f32	s15, s6, s7
 800f29c:	eee4 7a24 	vfma.f32	s15, s8, s9
 800f2a0:	eee5 7a25 	vfma.f32	s15, s10, s11
 800f2a4:	eee6 7a26 	vfma.f32	s15, s12, s13
 800f2a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f2ac:	db96      	blt.n	800f1dc <forward_lite_conv2d_if32of32wf32_pool+0x674>
 800f2ae:	4432      	add	r2, r6
 800f2b0:	4433      	add	r3, r6
 800f2b2:	4639      	mov	r1, r7
 800f2b4:	4288      	cmp	r0, r1
 800f2b6:	dd10      	ble.n	800f2da <forward_lite_conv2d_if32of32wf32_pool+0x772>
 800f2b8:	460d      	mov	r5, r1
 800f2ba:	4696      	mov	lr, r2
 800f2bc:	469c      	mov	ip, r3
 800f2be:	3501      	adds	r5, #1
 800f2c0:	ecfc 6a01 	vldmia	ip!, {s13}
 800f2c4:	ecfe 7a01 	vldmia	lr!, {s15}
 800f2c8:	42a8      	cmp	r0, r5
 800f2ca:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f2ce:	d1f6      	bne.n	800f2be <forward_lite_conv2d_if32of32wf32_pool+0x756>
 800f2d0:	1a41      	subs	r1, r0, r1
 800f2d2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800f2d6:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800f2da:	3401      	adds	r4, #1
 800f2dc:	4452      	add	r2, sl
 800f2de:	444b      	add	r3, r9
 800f2e0:	45a3      	cmp	fp, r4
 800f2e2:	f47f af71 	bne.w	800f1c8 <forward_lite_conv2d_if32of32wf32_pool+0x660>
 800f2e6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800f2e8:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800f2ea:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800f2ec:	4410      	add	r0, r2
 800f2ee:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f2f0:	ed81 7a00 	vstr	s14, [r1]
 800f2f4:	900b      	str	r0, [sp, #44]	@ 0x2c
 800f2f6:	3301      	adds	r3, #1
 800f2f8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800f2fa:	9311      	str	r3, [sp, #68]	@ 0x44
 800f2fc:	4401      	add	r1, r0
 800f2fe:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 800f300:	9110      	str	r1, [sp, #64]	@ 0x40
 800f302:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800f304:	1a89      	subs	r1, r1, r2
 800f306:	910e      	str	r1, [sp, #56]	@ 0x38
 800f308:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800f30a:	4401      	add	r1, r0
 800f30c:	910d      	str	r1, [sp, #52]	@ 0x34
 800f30e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800f310:	1a8a      	subs	r2, r1, r2
 800f312:	920c      	str	r2, [sp, #48]	@ 0x30
 800f314:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f316:	429a      	cmp	r2, r3
 800f318:	f47f af28 	bne.w	800f16c <forward_lite_conv2d_if32of32wf32_pool+0x604>
 800f31c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f31e:	9924      	ldr	r1, [sp, #144]	@ 0x90
 800f320:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800f322:	440a      	add	r2, r1
 800f324:	3304      	adds	r3, #4
 800f326:	9219      	str	r2, [sp, #100]	@ 0x64
 800f328:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 800f32a:	9326      	str	r3, [sp, #152]	@ 0x98
 800f32c:	4293      	cmp	r3, r2
 800f32e:	f43f ae70 	beq.w	800f012 <forward_lite_conv2d_if32of32wf32_pool+0x4aa>
 800f332:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f334:	2b00      	cmp	r3, #0
 800f336:	f47f af04 	bne.w	800f142 <forward_lite_conv2d_if32of32wf32_pool+0x5da>
 800f33a:	eef0 1a48 	vmov.f32	s3, s16
 800f33e:	e704      	b.n	800f14a <forward_lite_conv2d_if32of32wf32_pool+0x5e2>
 800f340:	2100      	movs	r1, #0
 800f342:	e7b7      	b.n	800f2b4 <forward_lite_conv2d_if32of32wf32_pool+0x74c>
 800f344:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f346:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800f348:	4610      	mov	r0, r2
 800f34a:	4413      	add	r3, r2
 800f34c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800f34e:	e714      	b.n	800f17a <forward_lite_conv2d_if32of32wf32_pool+0x612>
 800f350:	eeb0 7a61 	vmov.f32	s14, s3
 800f354:	e7c7      	b.n	800f2e6 <forward_lite_conv2d_if32of32wf32_pool+0x77e>
 800f356:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800f358:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800f35a:	921c      	str	r2, [sp, #112]	@ 0x70
 800f35c:	e52d      	b.n	800edba <forward_lite_conv2d_if32of32wf32_pool+0x252>
 800f35e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800f360:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800f362:	3301      	adds	r3, #1
 800f364:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 800f366:	440a      	add	r2, r1
 800f368:	b219      	sxth	r1, r3
 800f36a:	4290      	cmp	r0, r2
 800f36c:	d801      	bhi.n	800f372 <forward_lite_conv2d_if32of32wf32_pool+0x80a>
 800f36e:	9825      	ldr	r0, [sp, #148]	@ 0x94
 800f370:	4402      	add	r2, r0
 800f372:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 800f374:	4281      	cmp	r1, r0
 800f376:	dbf3      	blt.n	800f360 <forward_lite_conv2d_if32of32wf32_pool+0x7f8>
 800f378:	921b      	str	r2, [sp, #108]	@ 0x6c
 800f37a:	e674      	b.n	800f066 <forward_lite_conv2d_if32of32wf32_pool+0x4fe>

0800f37c <forward_lite_nl_relu_generic_if32of32_kernel>:
 800f37c:	edd3 6a02 	vldr	s13, [r3, #8]
 800f380:	ed93 7a00 	vldr	s14, [r3]
 800f384:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800f388:	ed93 6a01 	vldr	s12, [r3, #4]
 800f38c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f390:	d42b      	bmi.n	800f3ea <forward_lite_nl_relu_generic_if32of32_kernel+0x6e>
 800f392:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800f396:	4413      	add	r3, r2
 800f398:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 800f39c:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 800f3a0:	4291      	cmp	r1, r2
 800f3a2:	d821      	bhi.n	800f3e8 <forward_lite_nl_relu_generic_if32of32_kernel+0x6c>
 800f3a4:	f10c 0104 	add.w	r1, ip, #4
 800f3a8:	1d13      	adds	r3, r2, #4
 800f3aa:	eba2 020c 	sub.w	r2, r2, ip
 800f3ae:	4408      	add	r0, r1
 800f3b0:	e00c      	b.n	800f3cc <forward_lite_nl_relu_generic_if32of32_kernel+0x50>
 800f3b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f3b6:	ee77 5ac7 	vsub.f32	s11, s15, s14
 800f3ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3be:	db01      	blt.n	800f3c4 <forward_lite_nl_relu_generic_if32of32_kernel+0x48>
 800f3c0:	ee65 7a86 	vmul.f32	s15, s11, s12
 800f3c4:	4293      	cmp	r3, r2
 800f3c6:	ed60 7a01 	vstmdb	r0!, {s15}
 800f3ca:	d00c      	beq.n	800f3e6 <forward_lite_nl_relu_generic_if32of32_kernel+0x6a>
 800f3cc:	ed73 7a01 	vldmdb	r3!, {s15}
 800f3d0:	eef4 6ae7 	vcmpe.f32	s13, s15
 800f3d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3d8:	daeb      	bge.n	800f3b2 <forward_lite_nl_relu_generic_if32of32_kernel+0x36>
 800f3da:	eef0 7a66 	vmov.f32	s15, s13
 800f3de:	4293      	cmp	r3, r2
 800f3e0:	ed60 7a01 	vstmdb	r0!, {s15}
 800f3e4:	d1f2      	bne.n	800f3cc <forward_lite_nl_relu_generic_if32of32_kernel+0x50>
 800f3e6:	4770      	bx	lr
 800f3e8:	4770      	bx	lr
 800f3ea:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800f3ee:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800f3f2:	4413      	add	r3, r2
 800f3f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3f8:	eb01 0c83 	add.w	ip, r1, r3, lsl #2
 800f3fc:	b500      	push	{lr}
 800f3fe:	ea4f 0e83 	mov.w	lr, r3, lsl #2
 800f402:	d019      	beq.n	800f438 <forward_lite_nl_relu_generic_if32of32_kernel+0xbc>
 800f404:	4561      	cmp	r1, ip
 800f406:	d815      	bhi.n	800f434 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 800f408:	f10e 0204 	add.w	r2, lr, #4
 800f40c:	f10c 0304 	add.w	r3, ip, #4
 800f410:	ebac 010e 	sub.w	r1, ip, lr
 800f414:	4402      	add	r2, r0
 800f416:	ed73 7a01 	vldmdb	r3!, {s15}
 800f41a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f41e:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800f422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f426:	ee66 6a86 	vmul.f32	s13, s13, s12
 800f42a:	d827      	bhi.n	800f47c <forward_lite_nl_relu_generic_if32of32_kernel+0x100>
 800f42c:	428b      	cmp	r3, r1
 800f42e:	ed62 6a01 	vstmdb	r2!, {s13}
 800f432:	d1f0      	bne.n	800f416 <forward_lite_nl_relu_generic_if32of32_kernel+0x9a>
 800f434:	f85d fb04 	ldr.w	pc, [sp], #4
 800f438:	4561      	cmp	r1, ip
 800f43a:	d8fb      	bhi.n	800f434 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 800f43c:	f10e 0204 	add.w	r2, lr, #4
 800f440:	f10c 0304 	add.w	r3, ip, #4
 800f444:	ebac 010e 	sub.w	r1, ip, lr
 800f448:	f04f 0c00 	mov.w	ip, #0
 800f44c:	4402      	add	r2, r0
 800f44e:	ed73 7a01 	vldmdb	r3!, {s15}
 800f452:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f45a:	d40a      	bmi.n	800f472 <forward_lite_nl_relu_generic_if32of32_kernel+0xf6>
 800f45c:	428b      	cmp	r3, r1
 800f45e:	f842 cd04 	str.w	ip, [r2, #-4]!
 800f462:	d0e7      	beq.n	800f434 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 800f464:	ed73 7a01 	vldmdb	r3!, {s15}
 800f468:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f46c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f470:	d5f4      	bpl.n	800f45c <forward_lite_nl_relu_generic_if32of32_kernel+0xe0>
 800f472:	428b      	cmp	r3, r1
 800f474:	ed62 7a01 	vstmdb	r2!, {s15}
 800f478:	d1e9      	bne.n	800f44e <forward_lite_nl_relu_generic_if32of32_kernel+0xd2>
 800f47a:	e7db      	b.n	800f434 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 800f47c:	428b      	cmp	r3, r1
 800f47e:	ed62 7a01 	vstmdb	r2!, {s15}
 800f482:	d1c8      	bne.n	800f416 <forward_lite_nl_relu_generic_if32of32_kernel+0x9a>
 800f484:	e7d6      	b.n	800f434 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 800f486:	bf00      	nop

0800f488 <pool_func_mp_array_f32>:
 800f488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f48c:	b091      	sub	sp, #68	@ 0x44
 800f48e:	468b      	mov	fp, r1
 800f490:	469c      	mov	ip, r3
 800f492:	4690      	mov	r8, r2
 800f494:	f8bd 106c 	ldrh.w	r1, [sp, #108]	@ 0x6c
 800f498:	4681      	mov	r9, r0
 800f49a:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 800f49e:	9101      	str	r1, [sp, #4]
 800f4a0:	f8bd 1078 	ldrh.w	r1, [sp, #120]	@ 0x78
 800f4a4:	f8bd 2074 	ldrh.w	r2, [sp, #116]	@ 0x74
 800f4a8:	9105      	str	r1, [sp, #20]
 800f4aa:	f8bd 107c 	ldrh.w	r1, [sp, #124]	@ 0x7c
 800f4ae:	9304      	str	r3, [sp, #16]
 800f4b0:	9106      	str	r1, [sp, #24]
 800f4b2:	f8bd 3070 	ldrh.w	r3, [sp, #112]	@ 0x70
 800f4b6:	f8bd 1080 	ldrh.w	r1, [sp, #128]	@ 0x80
 800f4ba:	ea52 0403 	orrs.w	r4, r2, r3
 800f4be:	9102      	str	r1, [sp, #8]
 800f4c0:	f8bd 1084 	ldrh.w	r1, [sp, #132]	@ 0x84
 800f4c4:	9103      	str	r1, [sp, #12]
 800f4c6:	d173      	bne.n	800f5b0 <pool_func_mp_array_f32+0x128>
 800f4c8:	9904      	ldr	r1, [sp, #16]
 800f4ca:	9d02      	ldr	r5, [sp, #8]
 800f4cc:	eba1 000b 	sub.w	r0, r1, fp
 800f4d0:	9e05      	ldr	r6, [sp, #20]
 800f4d2:	1e69      	subs	r1, r5, #1
 800f4d4:	3801      	subs	r0, #1
 800f4d6:	fb11 0106 	smlabb	r1, r1, r6, r0
 800f4da:	0409      	lsls	r1, r1, #16
 800f4dc:	d568      	bpl.n	800f5b0 <pool_func_mp_array_f32+0x128>
 800f4de:	9901      	ldr	r1, [sp, #4]
 800f4e0:	9e03      	ldr	r6, [sp, #12]
 800f4e2:	eba1 0008 	sub.w	r0, r1, r8
 800f4e6:	9f06      	ldr	r7, [sp, #24]
 800f4e8:	1e71      	subs	r1, r6, #1
 800f4ea:	3801      	subs	r0, #1
 800f4ec:	fb11 0107 	smlabb	r1, r1, r7, r0
 800f4f0:	040f      	lsls	r7, r1, #16
 800f4f2:	d55d      	bpl.n	800f5b0 <pool_func_mp_array_f32+0x128>
 800f4f4:	2e00      	cmp	r6, #0
 800f4f6:	d058      	beq.n	800f5aa <pool_func_mp_array_f32+0x122>
 800f4f8:	2d00      	cmp	r5, #0
 800f4fa:	d056      	beq.n	800f5aa <pool_func_mp_array_f32+0x122>
 800f4fc:	4663      	mov	r3, ip
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d053      	beq.n	800f5aa <pool_func_mp_array_f32+0x122>
 800f502:	2b01      	cmp	r3, #1
 800f504:	f040 814a 	bne.w	800f79c <pool_func_mp_array_f32+0x314>
 800f508:	46a2      	mov	sl, r4
 800f50a:	4623      	mov	r3, r4
 800f50c:	9407      	str	r4, [sp, #28]
 800f50e:	9a02      	ldr	r2, [sp, #8]
 800f510:	2700      	movs	r7, #0
 800f512:	f9bd 6004 	ldrsh.w	r6, [sp, #4]
 800f516:	fb02 f303 	mul.w	r3, r2, r3
 800f51a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800f51e:	46be      	mov	lr, r7
 800f520:	46bc      	mov	ip, r7
 800f522:	9308      	str	r3, [sp, #32]
 800f524:	fa0f f38a 	sxth.w	r3, sl
 800f528:	9309      	str	r3, [sp, #36]	@ 0x24
 800f52a:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800f52c:	b23d      	sxth	r5, r7
 800f52e:	9b08      	ldr	r3, [sp, #32]
 800f530:	fa0f f088 	sxth.w	r0, r8
 800f534:	42b4      	cmp	r4, r6
 800f536:	eddf 7a98 	vldr	s15, [pc, #608]	@ 800f798 <pool_func_mp_array_f32+0x310>
 800f53a:	449c      	add	ip, r3
 800f53c:	da12      	bge.n	800f564 <pool_func_mp_array_f32+0xdc>
 800f53e:	4285      	cmp	r5, r0
 800f540:	da0c      	bge.n	800f55c <pool_func_mp_array_f32+0xd4>
 800f542:	fb04 520b 	mla	r2, r4, fp, r5
 800f546:	462b      	mov	r3, r5
 800f548:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 800f54c:	3301      	adds	r3, #1
 800f54e:	ecb2 7a01 	vldmia	r2!, {s14}
 800f552:	b219      	sxth	r1, r3
 800f554:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 800f558:	4281      	cmp	r1, r0
 800f55a:	dbf7      	blt.n	800f54c <pool_func_mp_array_f32+0xc4>
 800f55c:	3401      	adds	r4, #1
 800f55e:	b224      	sxth	r4, r4
 800f560:	42b4      	cmp	r4, r6
 800f562:	dbec      	blt.n	800f53e <pool_func_mp_array_f32+0xb6>
 800f564:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800f566:	f10e 0e01 	add.w	lr, lr, #1
 800f56a:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800f56e:	9b05      	ldr	r3, [sp, #20]
 800f570:	fa0f fe8e 	sxth.w	lr, lr
 800f574:	4498      	add	r8, r3
 800f576:	441f      	add	r7, r3
 800f578:	9b02      	ldr	r3, [sp, #8]
 800f57a:	edcc 7a00 	vstr	s15, [ip]
 800f57e:	fa1f f888 	uxth.w	r8, r8
 800f582:	4573      	cmp	r3, lr
 800f584:	b2bf      	uxth	r7, r7
 800f586:	46f4      	mov	ip, lr
 800f588:	dccf      	bgt.n	800f52a <pool_func_mp_array_f32+0xa2>
 800f58a:	9a07      	ldr	r2, [sp, #28]
 800f58c:	9906      	ldr	r1, [sp, #24]
 800f58e:	9b01      	ldr	r3, [sp, #4]
 800f590:	3201      	adds	r2, #1
 800f592:	448a      	add	sl, r1
 800f594:	b212      	sxth	r2, r2
 800f596:	440b      	add	r3, r1
 800f598:	9903      	ldr	r1, [sp, #12]
 800f59a:	fa1f fa8a 	uxth.w	sl, sl
 800f59e:	b29b      	uxth	r3, r3
 800f5a0:	9207      	str	r2, [sp, #28]
 800f5a2:	4291      	cmp	r1, r2
 800f5a4:	9301      	str	r3, [sp, #4]
 800f5a6:	4613      	mov	r3, r2
 800f5a8:	dcb1      	bgt.n	800f50e <pool_func_mp_array_f32+0x86>
 800f5aa:	b011      	add	sp, #68	@ 0x44
 800f5ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5b0:	9903      	ldr	r1, [sp, #12]
 800f5b2:	2900      	cmp	r1, #0
 800f5b4:	d0f9      	beq.n	800f5aa <pool_func_mp_array_f32+0x122>
 800f5b6:	9902      	ldr	r1, [sp, #8]
 800f5b8:	2900      	cmp	r1, #0
 800f5ba:	d0f6      	beq.n	800f5aa <pool_func_mp_array_f32+0x122>
 800f5bc:	4661      	mov	r1, ip
 800f5be:	2900      	cmp	r1, #0
 800f5c0:	d0f3      	beq.n	800f5aa <pool_func_mp_array_f32+0x122>
 800f5c2:	2901      	cmp	r1, #1
 800f5c4:	9901      	ldr	r1, [sp, #4]
 800f5c6:	d163      	bne.n	800f690 <pool_func_mp_array_f32+0x208>
 800f5c8:	1a8a      	subs	r2, r1, r2
 800f5ca:	9904      	ldr	r1, [sp, #16]
 800f5cc:	1ac9      	subs	r1, r1, r3
 800f5ce:	425b      	negs	r3, r3
 800f5d0:	b292      	uxth	r2, r2
 800f5d2:	b29b      	uxth	r3, r3
 800f5d4:	9204      	str	r2, [sp, #16]
 800f5d6:	b28a      	uxth	r2, r1
 800f5d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f5da:	2300      	movs	r3, #0
 800f5dc:	920a      	str	r2, [sp, #40]	@ 0x28
 800f5de:	9307      	str	r3, [sp, #28]
 800f5e0:	9a02      	ldr	r2, [sp, #8]
 800f5e2:	2700      	movs	r7, #0
 800f5e4:	fb02 f303 	mul.w	r3, r2, r3
 800f5e8:	9a04      	ldr	r2, [sp, #16]
 800f5ea:	46bc      	mov	ip, r7
 800f5ec:	9308      	str	r3, [sp, #32]
 800f5ee:	b216      	sxth	r6, r2
 800f5f0:	9b01      	ldr	r3, [sp, #4]
 800f5f2:	1ad3      	subs	r3, r2, r3
 800f5f4:	e9dd ae0a 	ldrd	sl, lr, [sp, #40]	@ 0x28
 800f5f8:	b21b      	sxth	r3, r3
 800f5fa:	9309      	str	r3, [sp, #36]	@ 0x24
 800f5fc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f5fe:	fa0f f58e 	sxth.w	r5, lr
 800f602:	9b08      	ldr	r3, [sp, #32]
 800f604:	fa0f f48a 	sxth.w	r4, sl
 800f608:	428e      	cmp	r6, r1
 800f60a:	eddf 7a63 	vldr	s15, [pc, #396]	@ 800f798 <pool_func_mp_array_f32+0x310>
 800f60e:	449c      	add	ip, r3
 800f610:	dd1c      	ble.n	800f64c <pool_func_mp_array_f32+0x1c4>
 800f612:	42a5      	cmp	r5, r4
 800f614:	da16      	bge.n	800f644 <pool_func_mp_array_f32+0x1bc>
 800f616:	4588      	cmp	r8, r1
 800f618:	fb01 f20b 	mul.w	r2, r1, fp
 800f61c:	dd12      	ble.n	800f644 <pool_func_mp_array_f32+0x1bc>
 800f61e:	442a      	add	r2, r5
 800f620:	462b      	mov	r3, r5
 800f622:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 800f626:	ea41 0003 	orr.w	r0, r1, r3
 800f62a:	0400      	lsls	r0, r0, #16
 800f62c:	d405      	bmi.n	800f63a <pool_func_mp_array_f32+0x1b2>
 800f62e:	459b      	cmp	fp, r3
 800f630:	dd03      	ble.n	800f63a <pool_func_mp_array_f32+0x1b2>
 800f632:	ed92 7a00 	vldr	s14, [r2]
 800f636:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 800f63a:	3301      	adds	r3, #1
 800f63c:	3204      	adds	r2, #4
 800f63e:	b218      	sxth	r0, r3
 800f640:	42a0      	cmp	r0, r4
 800f642:	dbf0      	blt.n	800f626 <pool_func_mp_array_f32+0x19e>
 800f644:	3101      	adds	r1, #1
 800f646:	b209      	sxth	r1, r1
 800f648:	42b1      	cmp	r1, r6
 800f64a:	dbe2      	blt.n	800f612 <pool_func_mp_array_f32+0x18a>
 800f64c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800f64e:	3701      	adds	r7, #1
 800f650:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800f654:	9b05      	ldr	r3, [sp, #20]
 800f656:	b23f      	sxth	r7, r7
 800f658:	449a      	add	sl, r3
 800f65a:	449e      	add	lr, r3
 800f65c:	9b02      	ldr	r3, [sp, #8]
 800f65e:	edcc 7a00 	vstr	s15, [ip]
 800f662:	fa1f fa8a 	uxth.w	sl, sl
 800f666:	42bb      	cmp	r3, r7
 800f668:	fa1f fe8e 	uxth.w	lr, lr
 800f66c:	46bc      	mov	ip, r7
 800f66e:	dcc5      	bgt.n	800f5fc <pool_func_mp_array_f32+0x174>
 800f670:	9a07      	ldr	r2, [sp, #28]
 800f672:	9b04      	ldr	r3, [sp, #16]
 800f674:	9906      	ldr	r1, [sp, #24]
 800f676:	3201      	adds	r2, #1
 800f678:	440b      	add	r3, r1
 800f67a:	b212      	sxth	r2, r2
 800f67c:	9903      	ldr	r1, [sp, #12]
 800f67e:	b29b      	uxth	r3, r3
 800f680:	9207      	str	r2, [sp, #28]
 800f682:	4291      	cmp	r1, r2
 800f684:	9304      	str	r3, [sp, #16]
 800f686:	4613      	mov	r3, r2
 800f688:	dcaa      	bgt.n	800f5e0 <pool_func_mp_array_f32+0x158>
 800f68a:	b011      	add	sp, #68	@ 0x44
 800f68c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f690:	1a88      	subs	r0, r1, r2
 800f692:	9904      	ldr	r1, [sp, #16]
 800f694:	4252      	negs	r2, r2
 800f696:	ea4f 0a8c 	mov.w	sl, ip, lsl #2
 800f69a:	1ac9      	subs	r1, r1, r3
 800f69c:	425b      	negs	r3, r3
 800f69e:	b292      	uxth	r2, r2
 800f6a0:	46e6      	mov	lr, ip
 800f6a2:	b29b      	uxth	r3, r3
 800f6a4:	b280      	uxth	r0, r0
 800f6a6:	9208      	str	r2, [sp, #32]
 800f6a8:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f6aa:	b28a      	uxth	r2, r1
 800f6ac:	2300      	movs	r3, #0
 800f6ae:	9007      	str	r0, [sp, #28]
 800f6b0:	920e      	str	r2, [sp, #56]	@ 0x38
 800f6b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f6b4:	9a02      	ldr	r2, [sp, #8]
 800f6b6:	f9bd 601c 	ldrsh.w	r6, [sp, #28]
 800f6ba:	fb02 f303 	mul.w	r3, r2, r3
 800f6be:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 800f6c2:	920a      	str	r2, [sp, #40]	@ 0x28
 800f6c4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f6c6:	930d      	str	r3, [sp, #52]	@ 0x34
 800f6c8:	2300      	movs	r3, #0
 800f6ca:	9201      	str	r2, [sp, #4]
 800f6cc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f6ce:	930c      	str	r3, [sp, #48]	@ 0x30
 800f6d0:	9204      	str	r2, [sp, #16]
 800f6d2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f6d4:	f04f 0c00 	mov.w	ip, #0
 800f6d8:	f9bd 5010 	ldrsh.w	r5, [sp, #16]
 800f6dc:	4413      	add	r3, r2
 800f6de:	f9bd 4004 	ldrsh.w	r4, [sp, #4]
 800f6e2:	4667      	mov	r7, ip
 800f6e4:	fb0e f303 	mul.w	r3, lr, r3
 800f6e8:	9309      	str	r3, [sp, #36]	@ 0x24
 800f6ea:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f6ec:	eddf 7a2a 	vldr	s15, [pc, #168]	@ 800f798 <pool_func_mp_array_f32+0x310>
 800f6f0:	42b1      	cmp	r1, r6
 800f6f2:	da1e      	bge.n	800f732 <pool_func_mp_array_f32+0x2aa>
 800f6f4:	42a5      	cmp	r5, r4
 800f6f6:	da18      	bge.n	800f72a <pool_func_mp_array_f32+0x2a2>
 800f6f8:	4541      	cmp	r1, r8
 800f6fa:	fb01 f30b 	mul.w	r3, r1, fp
 800f6fe:	da14      	bge.n	800f72a <pool_func_mp_array_f32+0x2a2>
 800f700:	195a      	adds	r2, r3, r5
 800f702:	462b      	mov	r3, r5
 800f704:	fb0e 7202 	mla	r2, lr, r2, r7
 800f708:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 800f70c:	ea41 0003 	orr.w	r0, r1, r3
 800f710:	0400      	lsls	r0, r0, #16
 800f712:	d405      	bmi.n	800f720 <pool_func_mp_array_f32+0x298>
 800f714:	459b      	cmp	fp, r3
 800f716:	dd03      	ble.n	800f720 <pool_func_mp_array_f32+0x298>
 800f718:	ed92 7a00 	vldr	s14, [r2]
 800f71c:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 800f720:	3301      	adds	r3, #1
 800f722:	4452      	add	r2, sl
 800f724:	b218      	sxth	r0, r3
 800f726:	42a0      	cmp	r0, r4
 800f728:	dbf0      	blt.n	800f70c <pool_func_mp_array_f32+0x284>
 800f72a:	3101      	adds	r1, #1
 800f72c:	b209      	sxth	r1, r1
 800f72e:	42b1      	cmp	r1, r6
 800f730:	dbe0      	blt.n	800f6f4 <pool_func_mp_array_f32+0x26c>
 800f732:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f734:	f10c 0c01 	add.w	ip, ip, #1
 800f738:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800f73a:	443b      	add	r3, r7
 800f73c:	fa0f fc8c 	sxth.w	ip, ip
 800f740:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f744:	45f4      	cmp	ip, lr
 800f746:	4667      	mov	r7, ip
 800f748:	edc3 7a00 	vstr	s15, [r3]
 800f74c:	dbcd      	blt.n	800f6ea <pool_func_mp_array_f32+0x262>
 800f74e:	9a01      	ldr	r2, [sp, #4]
 800f750:	9805      	ldr	r0, [sp, #20]
 800f752:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800f754:	4402      	add	r2, r0
 800f756:	9b04      	ldr	r3, [sp, #16]
 800f758:	3101      	adds	r1, #1
 800f75a:	b292      	uxth	r2, r2
 800f75c:	4403      	add	r3, r0
 800f75e:	b209      	sxth	r1, r1
 800f760:	9201      	str	r2, [sp, #4]
 800f762:	b29b      	uxth	r3, r3
 800f764:	9a02      	ldr	r2, [sp, #8]
 800f766:	9304      	str	r3, [sp, #16]
 800f768:	460b      	mov	r3, r1
 800f76a:	428a      	cmp	r2, r1
 800f76c:	910c      	str	r1, [sp, #48]	@ 0x30
 800f76e:	dcb0      	bgt.n	800f6d2 <pool_func_mp_array_f32+0x24a>
 800f770:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f772:	9b08      	ldr	r3, [sp, #32]
 800f774:	3101      	adds	r1, #1
 800f776:	e9dd 0206 	ldrd	r0, r2, [sp, #24]
 800f77a:	b209      	sxth	r1, r1
 800f77c:	4402      	add	r2, r0
 800f77e:	4403      	add	r3, r0
 800f780:	910b      	str	r1, [sp, #44]	@ 0x2c
 800f782:	b292      	uxth	r2, r2
 800f784:	b29b      	uxth	r3, r3
 800f786:	9207      	str	r2, [sp, #28]
 800f788:	9a03      	ldr	r2, [sp, #12]
 800f78a:	9308      	str	r3, [sp, #32]
 800f78c:	460b      	mov	r3, r1
 800f78e:	428a      	cmp	r2, r1
 800f790:	dc90      	bgt.n	800f6b4 <pool_func_mp_array_f32+0x22c>
 800f792:	b011      	add	sp, #68	@ 0x44
 800f794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f798:	cf000000 	.word	0xcf000000
 800f79c:	4623      	mov	r3, r4
 800f79e:	ea4f 0a8c 	mov.w	sl, ip, lsl #2
 800f7a2:	46e0      	mov	r8, ip
 800f7a4:	9408      	str	r4, [sp, #32]
 800f7a6:	9409      	str	r4, [sp, #36]	@ 0x24
 800f7a8:	9a02      	ldr	r2, [sp, #8]
 800f7aa:	f04f 0c00 	mov.w	ip, #0
 800f7ae:	f9bd 7004 	ldrsh.w	r7, [sp, #4]
 800f7b2:	fb02 f303 	mul.w	r3, r2, r3
 800f7b6:	f8cd c028 	str.w	ip, [sp, #40]	@ 0x28
 800f7ba:	930c      	str	r3, [sp, #48]	@ 0x30
 800f7bc:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 800f7c0:	930d      	str	r3, [sp, #52]	@ 0x34
 800f7c2:	9b04      	ldr	r3, [sp, #16]
 800f7c4:	9307      	str	r3, [sp, #28]
 800f7c6:	4663      	mov	r3, ip
 800f7c8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f7ca:	f04f 0e00 	mov.w	lr, #0
 800f7ce:	fa0f f58c 	sxth.w	r5, ip
 800f7d2:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 800f7d6:	4413      	add	r3, r2
 800f7d8:	4676      	mov	r6, lr
 800f7da:	fb08 f303 	mul.w	r3, r8, r3
 800f7de:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f7e0:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 800f7e2:	ed5f 7a13 	vldr	s15, [pc, #-76]	@ 800f798 <pool_func_mp_array_f32+0x310>
 800f7e6:	42bc      	cmp	r4, r7
 800f7e8:	da15      	bge.n	800f816 <pool_func_mp_array_f32+0x38e>
 800f7ea:	4285      	cmp	r5, r0
 800f7ec:	da0f      	bge.n	800f80e <pool_func_mp_array_f32+0x386>
 800f7ee:	fb0b 5304 	mla	r3, fp, r4, r5
 800f7f2:	462a      	mov	r2, r5
 800f7f4:	fb08 6303 	mla	r3, r8, r3, r6
 800f7f8:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 800f7fc:	3201      	adds	r2, #1
 800f7fe:	ed93 7a00 	vldr	s14, [r3]
 800f802:	4453      	add	r3, sl
 800f804:	b211      	sxth	r1, r2
 800f806:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 800f80a:	4281      	cmp	r1, r0
 800f80c:	dbf6      	blt.n	800f7fc <pool_func_mp_array_f32+0x374>
 800f80e:	3401      	adds	r4, #1
 800f810:	b224      	sxth	r4, r4
 800f812:	42bc      	cmp	r4, r7
 800f814:	dbe9      	blt.n	800f7ea <pool_func_mp_array_f32+0x362>
 800f816:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f818:	f10e 0e01 	add.w	lr, lr, #1
 800f81c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800f81e:	4433      	add	r3, r6
 800f820:	fa0f fe8e 	sxth.w	lr, lr
 800f824:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f828:	45c6      	cmp	lr, r8
 800f82a:	4676      	mov	r6, lr
 800f82c:	edc3 7a00 	vstr	s15, [r3]
 800f830:	dbd6      	blt.n	800f7e0 <pool_func_mp_array_f32+0x358>
 800f832:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f834:	9905      	ldr	r1, [sp, #20]
 800f836:	9b07      	ldr	r3, [sp, #28]
 800f838:	3201      	adds	r2, #1
 800f83a:	448c      	add	ip, r1
 800f83c:	b212      	sxth	r2, r2
 800f83e:	440b      	add	r3, r1
 800f840:	9902      	ldr	r1, [sp, #8]
 800f842:	fa1f fc8c 	uxth.w	ip, ip
 800f846:	b29b      	uxth	r3, r3
 800f848:	920a      	str	r2, [sp, #40]	@ 0x28
 800f84a:	4291      	cmp	r1, r2
 800f84c:	9307      	str	r3, [sp, #28]
 800f84e:	4613      	mov	r3, r2
 800f850:	dcba      	bgt.n	800f7c8 <pool_func_mp_array_f32+0x340>
 800f852:	9a01      	ldr	r2, [sp, #4]
 800f854:	9806      	ldr	r0, [sp, #24]
 800f856:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f858:	4402      	add	r2, r0
 800f85a:	9b08      	ldr	r3, [sp, #32]
 800f85c:	3101      	adds	r1, #1
 800f85e:	b292      	uxth	r2, r2
 800f860:	4403      	add	r3, r0
 800f862:	b209      	sxth	r1, r1
 800f864:	9201      	str	r2, [sp, #4]
 800f866:	b29b      	uxth	r3, r3
 800f868:	9a03      	ldr	r2, [sp, #12]
 800f86a:	9308      	str	r3, [sp, #32]
 800f86c:	460b      	mov	r3, r1
 800f86e:	428a      	cmp	r2, r1
 800f870:	9109      	str	r1, [sp, #36]	@ 0x24
 800f872:	dc99      	bgt.n	800f7a8 <pool_func_mp_array_f32+0x320>
 800f874:	e699      	b.n	800f5aa <pool_func_mp_array_f32+0x122>
 800f876:	bf00      	nop

0800f878 <forward_lite_upsample_bilinear_if32of32>:
 800f878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f87c:	ed2d 8b0a 	vpush	{d8-d12}
 800f880:	b08f      	sub	sp, #60	@ 0x3c
 800f882:	4683      	mov	fp, r0
 800f884:	9104      	str	r1, [sp, #16]
 800f886:	f89d 1094 	ldrb.w	r1, [sp, #148]	@ 0x94
 800f88a:	f8dd 8088 	ldr.w	r8, [sp, #136]	@ 0x88
 800f88e:	f8dd a090 	ldr.w	sl, [sp, #144]	@ 0x90
 800f892:	9206      	str	r2, [sp, #24]
 800f894:	2900      	cmp	r1, #0
 800f896:	f000 80a7 	beq.w	800f9e8 <forward_lite_upsample_bilinear_if32of32+0x170>
 800f89a:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800f89e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800f8a2:	ee70 aae7 	vsub.f32	s21, s1, s15
 800f8a6:	ee70 7a67 	vsub.f32	s15, s0, s15
 800f8aa:	ee6a aa87 	vmul.f32	s21, s21, s14
 800f8ae:	ee27 9a87 	vmul.f32	s18, s15, s14
 800f8b2:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800f8b6:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800f8b8:	ee87 baa0 	vdiv.f32	s22, s15, s1
 800f8bc:	eec7 9a80 	vdiv.f32	s19, s15, s0
 800f8c0:	2a00      	cmp	r2, #0
 800f8c2:	f000 808c 	beq.w	800f9de <forward_lite_upsample_bilinear_if32of32+0x166>
 800f8c6:	3b01      	subs	r3, #1
 800f8c8:	ea4f 068a 	mov.w	r6, sl, lsl #2
 800f8cc:	eddf 8a49 	vldr	s17, [pc, #292]	@ 800f9f4 <forward_lite_upsample_bilinear_if32of32+0x17c>
 800f8d0:	ee07 3a90 	vmov	s15, r3
 800f8d4:	9b06      	ldr	r3, [sp, #24]
 800f8d6:	1e5a      	subs	r2, r3, #1
 800f8d8:	fb0a f303 	mul.w	r3, sl, r3
 800f8dc:	eeb8 aa67 	vcvt.f32.u32	s20, s15
 800f8e0:	ee0c 2a90 	vmov	s25, r2
 800f8e4:	9305      	str	r3, [sp, #20]
 800f8e6:	2300      	movs	r3, #0
 800f8e8:	eef8 ca6c 	vcvt.f32.u32	s25, s25
 800f8ec:	9303      	str	r3, [sp, #12]
 800f8ee:	fb06 f308 	mul.w	r3, r6, r8
 800f8f2:	9307      	str	r3, [sp, #28]
 800f8f4:	eddd 7a03 	vldr	s15, [sp, #12]
 800f8f8:	9b05      	ldr	r3, [sp, #20]
 800f8fa:	eef8 ba67 	vcvt.f32.u32	s23, s15
 800f8fe:	ee7b baea 	vsub.f32	s23, s23, s21
 800f902:	ee6b ba8b 	vmul.f32	s23, s23, s22
 800f906:	fecb baa8 	vmaxnm.f32	s23, s23, s17
 800f90a:	fecb baca 	vminnm.f32	s23, s23, s20
 800f90e:	eef4 ba4a 	vcmp.f32	s23, s20
 800f912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f916:	bf14      	ite	ne
 800f918:	4699      	movne	r9, r3
 800f91a:	f04f 0900 	moveq.w	r9, #0
 800f91e:	f1b8 0f00 	cmp.w	r8, #0
 800f922:	d056      	beq.n	800f9d2 <forward_lite_upsample_bilinear_if32of32+0x15a>
 800f924:	eebc 7aeb 	vcvt.u32.f32	s14, s23
 800f928:	9b06      	ldr	r3, [sp, #24]
 800f92a:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 800f92e:	9d04      	ldr	r5, [sp, #16]
 800f930:	2400      	movs	r4, #0
 800f932:	eef8 7a47 	vcvt.f32.u32	s15, s14
 800f936:	ee17 7a10 	vmov	r7, s14
 800f93a:	ee38 ca6b 	vsub.f32	s24, s16, s23
 800f93e:	fb03 f707 	mul.w	r7, r3, r7
 800f942:	ee7b bae7 	vsub.f32	s23, s23, s15
 800f946:	ee3c ca27 	vadd.f32	s24, s24, s15
 800f94a:	ee07 4a90 	vmov	s15, r4
 800f94e:	ab0a      	add	r3, sp, #40	@ 0x28
 800f950:	3401      	adds	r4, #1
 800f952:	4629      	mov	r1, r5
 800f954:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f958:	9300      	str	r3, [sp, #0]
 800f95a:	4652      	mov	r2, sl
 800f95c:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
 800f960:	4435      	add	r5, r6
 800f962:	ee77 7ac9 	vsub.f32	s15, s15, s18
 800f966:	ee67 7aa9 	vmul.f32	s15, s15, s19
 800f96a:	fec7 7aa8 	vmaxnm.f32	s15, s15, s17
 800f96e:	fec7 7aec 	vminnm.f32	s15, s15, s25
 800f972:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 800f976:	eef4 7a6c 	vcmp.f32	s15, s25
 800f97a:	ee38 7a67 	vsub.f32	s14, s16, s15
 800f97e:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 800f982:	ee16 0a90 	vmov	r0, s13
 800f986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f98a:	4438      	add	r0, r7
 800f98c:	ee37 7a06 	vadd.f32	s14, s14, s12
 800f990:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800f994:	bf14      	ite	ne
 800f996:	4653      	movne	r3, sl
 800f998:	2300      	moveq	r3, #0
 800f99a:	fb06 b000 	mla	r0, r6, r0, fp
 800f99e:	ee67 5a0c 	vmul.f32	s11, s14, s24
 800f9a2:	ee27 6a8c 	vmul.f32	s12, s15, s24
 800f9a6:	9308      	str	r3, [sp, #32]
 800f9a8:	ee27 7a2b 	vmul.f32	s14, s14, s23
 800f9ac:	ab08      	add	r3, sp, #32
 800f9ae:	ee67 7aab 	vmul.f32	s15, s15, s23
 800f9b2:	edcd 5a0a 	vstr	s11, [sp, #40]	@ 0x28
 800f9b6:	ed8d 6a0b 	vstr	s12, [sp, #44]	@ 0x2c
 800f9ba:	ed8d 7a0c 	vstr	s14, [sp, #48]	@ 0x30
 800f9be:	edcd 7a0d 	vstr	s15, [sp, #52]	@ 0x34
 800f9c2:	f001 f997 	bl	8010cf4 <lite_bilinear_if32of32_kernel>
 800f9c6:	45a0      	cmp	r8, r4
 800f9c8:	d1bf      	bne.n	800f94a <forward_lite_upsample_bilinear_if32of32+0xd2>
 800f9ca:	9b04      	ldr	r3, [sp, #16]
 800f9cc:	9a07      	ldr	r2, [sp, #28]
 800f9ce:	4413      	add	r3, r2
 800f9d0:	9304      	str	r3, [sp, #16]
 800f9d2:	9b03      	ldr	r3, [sp, #12]
 800f9d4:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800f9d6:	3301      	adds	r3, #1
 800f9d8:	429a      	cmp	r2, r3
 800f9da:	9303      	str	r3, [sp, #12]
 800f9dc:	d18a      	bne.n	800f8f4 <forward_lite_upsample_bilinear_if32of32+0x7c>
 800f9de:	b00f      	add	sp, #60	@ 0x3c
 800f9e0:	ecbd 8b0a 	vpop	{d8-d12}
 800f9e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9e8:	eddf aa02 	vldr	s21, [pc, #8]	@ 800f9f4 <forward_lite_upsample_bilinear_if32of32+0x17c>
 800f9ec:	eeb0 9a6a 	vmov.f32	s18, s21
 800f9f0:	e75f      	b.n	800f8b2 <forward_lite_upsample_bilinear_if32of32+0x3a>
 800f9f2:	bf00      	nop
 800f9f4:	00000000 	.word	0x00000000

0800f9f8 <forward_lite_upsample_bilinear_is8os8>:
 800f9f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9fc:	ed2d 8b0a 	vpush	{d8-d12}
 800fa00:	b08f      	sub	sp, #60	@ 0x3c
 800fa02:	4682      	mov	sl, r0
 800fa04:	9104      	str	r1, [sp, #16]
 800fa06:	f89d 1094 	ldrb.w	r1, [sp, #148]	@ 0x94
 800fa0a:	9f22      	ldr	r7, [sp, #136]	@ 0x88
 800fa0c:	f8dd b090 	ldr.w	fp, [sp, #144]	@ 0x90
 800fa10:	9206      	str	r2, [sp, #24]
 800fa12:	2900      	cmp	r1, #0
 800fa14:	f000 80aa 	beq.w	800fb6c <forward_lite_upsample_bilinear_is8os8+0x174>
 800fa18:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800fa1c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800fa20:	ee70 aae7 	vsub.f32	s21, s1, s15
 800fa24:	ee70 7a67 	vsub.f32	s15, s0, s15
 800fa28:	ee6a aa87 	vmul.f32	s21, s21, s14
 800fa2c:	ee27 9a87 	vmul.f32	s18, s15, s14
 800fa30:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800fa34:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800fa36:	ee87 baa0 	vdiv.f32	s22, s15, s1
 800fa3a:	eec7 9a80 	vdiv.f32	s19, s15, s0
 800fa3e:	2a00      	cmp	r2, #0
 800fa40:	f000 808f 	beq.w	800fb62 <forward_lite_upsample_bilinear_is8os8+0x16a>
 800fa44:	3b01      	subs	r3, #1
 800fa46:	eddf 8a4c 	vldr	s17, [pc, #304]	@ 800fb78 <forward_lite_upsample_bilinear_is8os8+0x180>
 800fa4a:	ee07 3a90 	vmov	s15, r3
 800fa4e:	9b06      	ldr	r3, [sp, #24]
 800fa50:	1e5a      	subs	r2, r3, #1
 800fa52:	fb0b f303 	mul.w	r3, fp, r3
 800fa56:	eeb8 aa67 	vcvt.f32.u32	s20, s15
 800fa5a:	ee0c 2a90 	vmov	s25, r2
 800fa5e:	9305      	str	r3, [sp, #20]
 800fa60:	fb07 f30b 	mul.w	r3, r7, fp
 800fa64:	eef8 ca6c 	vcvt.f32.u32	s25, s25
 800fa68:	9307      	str	r3, [sp, #28]
 800fa6a:	2300      	movs	r3, #0
 800fa6c:	9303      	str	r3, [sp, #12]
 800fa6e:	eddd 7a03 	vldr	s15, [sp, #12]
 800fa72:	9b05      	ldr	r3, [sp, #20]
 800fa74:	eef8 ba67 	vcvt.f32.u32	s23, s15
 800fa78:	ee7b baea 	vsub.f32	s23, s23, s21
 800fa7c:	ee6b ba8b 	vmul.f32	s23, s23, s22
 800fa80:	fecb baa8 	vmaxnm.f32	s23, s23, s17
 800fa84:	fecb baca 	vminnm.f32	s23, s23, s20
 800fa88:	eef4 ba4a 	vcmp.f32	s23, s20
 800fa8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa90:	bf14      	ite	ne
 800fa92:	4698      	movne	r8, r3
 800fa94:	f04f 0800 	moveq.w	r8, #0
 800fa98:	2f00      	cmp	r7, #0
 800fa9a:	d05c      	beq.n	800fb56 <forward_lite_upsample_bilinear_is8os8+0x15e>
 800fa9c:	eebc 7aeb 	vcvt.u32.f32	s14, s23
 800faa0:	9b06      	ldr	r3, [sp, #24]
 800faa2:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 800faa6:	9722      	str	r7, [sp, #136]	@ 0x88
 800faa8:	9d04      	ldr	r5, [sp, #16]
 800faaa:	4647      	mov	r7, r8
 800faac:	eef8 7a47 	vcvt.f32.u32	s15, s14
 800fab0:	ee17 6a10 	vmov	r6, s14
 800fab4:	ee38 ca6b 	vsub.f32	s24, s16, s23
 800fab8:	2400      	movs	r4, #0
 800faba:	fb03 f606 	mul.w	r6, r3, r6
 800fabe:	f10d 0928 	add.w	r9, sp, #40	@ 0x28
 800fac2:	ee7b bae7 	vsub.f32	s23, s23, s15
 800fac6:	f8dd 8088 	ldr.w	r8, [sp, #136]	@ 0x88
 800faca:	ee3c ca27 	vadd.f32	s24, s24, s15
 800face:	ee07 4a90 	vmov	s15, r4
 800fad2:	3401      	adds	r4, #1
 800fad4:	4629      	mov	r1, r5
 800fad6:	465a      	mov	r2, fp
 800fad8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fadc:	f8cd 9000 	str.w	r9, [sp]
 800fae0:	9709      	str	r7, [sp, #36]	@ 0x24
 800fae2:	445d      	add	r5, fp
 800fae4:	ee77 7ac9 	vsub.f32	s15, s15, s18
 800fae8:	ee67 7aa9 	vmul.f32	s15, s15, s19
 800faec:	fec7 7aa8 	vmaxnm.f32	s15, s15, s17
 800faf0:	fec7 7aec 	vminnm.f32	s15, s15, s25
 800faf4:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 800faf8:	eef4 7a6c 	vcmp.f32	s15, s25
 800fafc:	ee38 7a67 	vsub.f32	s14, s16, s15
 800fb00:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 800fb04:	ee16 0a90 	vmov	r0, s13
 800fb08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb0c:	4430      	add	r0, r6
 800fb0e:	ee37 7a06 	vadd.f32	s14, s14, s12
 800fb12:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800fb16:	bf14      	ite	ne
 800fb18:	465b      	movne	r3, fp
 800fb1a:	2300      	moveq	r3, #0
 800fb1c:	fb0b a000 	mla	r0, fp, r0, sl
 800fb20:	ee67 5a0c 	vmul.f32	s11, s14, s24
 800fb24:	ee27 6a8c 	vmul.f32	s12, s15, s24
 800fb28:	9308      	str	r3, [sp, #32]
 800fb2a:	ee27 7a2b 	vmul.f32	s14, s14, s23
 800fb2e:	ab08      	add	r3, sp, #32
 800fb30:	ee67 7aab 	vmul.f32	s15, s15, s23
 800fb34:	edcd 5a0a 	vstr	s11, [sp, #40]	@ 0x28
 800fb38:	ed8d 6a0b 	vstr	s12, [sp, #44]	@ 0x2c
 800fb3c:	ed8d 7a0c 	vstr	s14, [sp, #48]	@ 0x30
 800fb40:	edcd 7a0d 	vstr	s15, [sp, #52]	@ 0x34
 800fb44:	f001 f906 	bl	8010d54 <lite_bilinear_is8os8_kernel>
 800fb48:	45a0      	cmp	r8, r4
 800fb4a:	d1c0      	bne.n	800face <forward_lite_upsample_bilinear_is8os8+0xd6>
 800fb4c:	9b04      	ldr	r3, [sp, #16]
 800fb4e:	4647      	mov	r7, r8
 800fb50:	9a07      	ldr	r2, [sp, #28]
 800fb52:	4413      	add	r3, r2
 800fb54:	9304      	str	r3, [sp, #16]
 800fb56:	9b03      	ldr	r3, [sp, #12]
 800fb58:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800fb5a:	3301      	adds	r3, #1
 800fb5c:	429a      	cmp	r2, r3
 800fb5e:	9303      	str	r3, [sp, #12]
 800fb60:	d185      	bne.n	800fa6e <forward_lite_upsample_bilinear_is8os8+0x76>
 800fb62:	b00f      	add	sp, #60	@ 0x3c
 800fb64:	ecbd 8b0a 	vpop	{d8-d12}
 800fb68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb6c:	eddf aa02 	vldr	s21, [pc, #8]	@ 800fb78 <forward_lite_upsample_bilinear_is8os8+0x180>
 800fb70:	eeb0 9a6a 	vmov.f32	s18, s21
 800fb74:	e75c      	b.n	800fa30 <forward_lite_upsample_bilinear_is8os8+0x38>
 800fb76:	bf00      	nop
 800fb78:	00000000 	.word	0x00000000

0800fb7c <forward_lite_upsample_bilinear_iu8ou8>:
 800fb7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb80:	ed2d 8b0a 	vpush	{d8-d12}
 800fb84:	b08f      	sub	sp, #60	@ 0x3c
 800fb86:	4682      	mov	sl, r0
 800fb88:	9104      	str	r1, [sp, #16]
 800fb8a:	f89d 1094 	ldrb.w	r1, [sp, #148]	@ 0x94
 800fb8e:	9f22      	ldr	r7, [sp, #136]	@ 0x88
 800fb90:	f8dd b090 	ldr.w	fp, [sp, #144]	@ 0x90
 800fb94:	9206      	str	r2, [sp, #24]
 800fb96:	2900      	cmp	r1, #0
 800fb98:	f000 80aa 	beq.w	800fcf0 <forward_lite_upsample_bilinear_iu8ou8+0x174>
 800fb9c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800fba0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800fba4:	ee70 aae7 	vsub.f32	s21, s1, s15
 800fba8:	ee70 7a67 	vsub.f32	s15, s0, s15
 800fbac:	ee6a aa87 	vmul.f32	s21, s21, s14
 800fbb0:	ee27 9a87 	vmul.f32	s18, s15, s14
 800fbb4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800fbb8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800fbba:	ee87 baa0 	vdiv.f32	s22, s15, s1
 800fbbe:	eec7 9a80 	vdiv.f32	s19, s15, s0
 800fbc2:	2a00      	cmp	r2, #0
 800fbc4:	f000 808f 	beq.w	800fce6 <forward_lite_upsample_bilinear_iu8ou8+0x16a>
 800fbc8:	3b01      	subs	r3, #1
 800fbca:	eddf 8a4c 	vldr	s17, [pc, #304]	@ 800fcfc <forward_lite_upsample_bilinear_iu8ou8+0x180>
 800fbce:	ee07 3a90 	vmov	s15, r3
 800fbd2:	9b06      	ldr	r3, [sp, #24]
 800fbd4:	1e5a      	subs	r2, r3, #1
 800fbd6:	fb0b f303 	mul.w	r3, fp, r3
 800fbda:	eeb8 aa67 	vcvt.f32.u32	s20, s15
 800fbde:	ee0c 2a90 	vmov	s25, r2
 800fbe2:	9305      	str	r3, [sp, #20]
 800fbe4:	fb07 f30b 	mul.w	r3, r7, fp
 800fbe8:	eef8 ca6c 	vcvt.f32.u32	s25, s25
 800fbec:	9307      	str	r3, [sp, #28]
 800fbee:	2300      	movs	r3, #0
 800fbf0:	9303      	str	r3, [sp, #12]
 800fbf2:	eddd 7a03 	vldr	s15, [sp, #12]
 800fbf6:	9b05      	ldr	r3, [sp, #20]
 800fbf8:	eef8 ba67 	vcvt.f32.u32	s23, s15
 800fbfc:	ee7b baea 	vsub.f32	s23, s23, s21
 800fc00:	ee6b ba8b 	vmul.f32	s23, s23, s22
 800fc04:	fecb baa8 	vmaxnm.f32	s23, s23, s17
 800fc08:	fecb baca 	vminnm.f32	s23, s23, s20
 800fc0c:	eef4 ba4a 	vcmp.f32	s23, s20
 800fc10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc14:	bf14      	ite	ne
 800fc16:	4698      	movne	r8, r3
 800fc18:	f04f 0800 	moveq.w	r8, #0
 800fc1c:	2f00      	cmp	r7, #0
 800fc1e:	d05c      	beq.n	800fcda <forward_lite_upsample_bilinear_iu8ou8+0x15e>
 800fc20:	eebc 7aeb 	vcvt.u32.f32	s14, s23
 800fc24:	9b06      	ldr	r3, [sp, #24]
 800fc26:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 800fc2a:	9722      	str	r7, [sp, #136]	@ 0x88
 800fc2c:	9d04      	ldr	r5, [sp, #16]
 800fc2e:	4647      	mov	r7, r8
 800fc30:	eef8 7a47 	vcvt.f32.u32	s15, s14
 800fc34:	ee17 6a10 	vmov	r6, s14
 800fc38:	ee38 ca6b 	vsub.f32	s24, s16, s23
 800fc3c:	2400      	movs	r4, #0
 800fc3e:	fb03 f606 	mul.w	r6, r3, r6
 800fc42:	f10d 0928 	add.w	r9, sp, #40	@ 0x28
 800fc46:	ee7b bae7 	vsub.f32	s23, s23, s15
 800fc4a:	f8dd 8088 	ldr.w	r8, [sp, #136]	@ 0x88
 800fc4e:	ee3c ca27 	vadd.f32	s24, s24, s15
 800fc52:	ee07 4a90 	vmov	s15, r4
 800fc56:	3401      	adds	r4, #1
 800fc58:	4629      	mov	r1, r5
 800fc5a:	465a      	mov	r2, fp
 800fc5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fc60:	f8cd 9000 	str.w	r9, [sp]
 800fc64:	9709      	str	r7, [sp, #36]	@ 0x24
 800fc66:	445d      	add	r5, fp
 800fc68:	ee77 7ac9 	vsub.f32	s15, s15, s18
 800fc6c:	ee67 7aa9 	vmul.f32	s15, s15, s19
 800fc70:	fec7 7aa8 	vmaxnm.f32	s15, s15, s17
 800fc74:	fec7 7aec 	vminnm.f32	s15, s15, s25
 800fc78:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 800fc7c:	eef4 7a6c 	vcmp.f32	s15, s25
 800fc80:	ee38 7a67 	vsub.f32	s14, s16, s15
 800fc84:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 800fc88:	ee16 0a90 	vmov	r0, s13
 800fc8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc90:	4430      	add	r0, r6
 800fc92:	ee37 7a06 	vadd.f32	s14, s14, s12
 800fc96:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800fc9a:	bf14      	ite	ne
 800fc9c:	465b      	movne	r3, fp
 800fc9e:	2300      	moveq	r3, #0
 800fca0:	fb0b a000 	mla	r0, fp, r0, sl
 800fca4:	ee67 5a0c 	vmul.f32	s11, s14, s24
 800fca8:	ee27 6a8c 	vmul.f32	s12, s15, s24
 800fcac:	9308      	str	r3, [sp, #32]
 800fcae:	ee27 7a2b 	vmul.f32	s14, s14, s23
 800fcb2:	ab08      	add	r3, sp, #32
 800fcb4:	ee67 7aab 	vmul.f32	s15, s15, s23
 800fcb8:	edcd 5a0a 	vstr	s11, [sp, #40]	@ 0x28
 800fcbc:	ed8d 6a0b 	vstr	s12, [sp, #44]	@ 0x2c
 800fcc0:	ed8d 7a0c 	vstr	s14, [sp, #48]	@ 0x30
 800fcc4:	edcd 7a0d 	vstr	s15, [sp, #52]	@ 0x34
 800fcc8:	f001 f8a2 	bl	8010e10 <lite_bilinear_iu8ou8_kernel>
 800fccc:	45a0      	cmp	r8, r4
 800fcce:	d1c0      	bne.n	800fc52 <forward_lite_upsample_bilinear_iu8ou8+0xd6>
 800fcd0:	9b04      	ldr	r3, [sp, #16]
 800fcd2:	4647      	mov	r7, r8
 800fcd4:	9a07      	ldr	r2, [sp, #28]
 800fcd6:	4413      	add	r3, r2
 800fcd8:	9304      	str	r3, [sp, #16]
 800fcda:	9b03      	ldr	r3, [sp, #12]
 800fcdc:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800fcde:	3301      	adds	r3, #1
 800fce0:	429a      	cmp	r2, r3
 800fce2:	9303      	str	r3, [sp, #12]
 800fce4:	d185      	bne.n	800fbf2 <forward_lite_upsample_bilinear_iu8ou8+0x76>
 800fce6:	b00f      	add	sp, #60	@ 0x3c
 800fce8:	ecbd 8b0a 	vpop	{d8-d12}
 800fcec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcf0:	eddf aa02 	vldr	s21, [pc, #8]	@ 800fcfc <forward_lite_upsample_bilinear_iu8ou8+0x180>
 800fcf4:	eeb0 9a6a 	vmov.f32	s18, s21
 800fcf8:	e75c      	b.n	800fbb4 <forward_lite_upsample_bilinear_iu8ou8+0x38>
 800fcfa:	bf00      	nop
 800fcfc:	00000000 	.word	0x00000000

0800fd00 <forward_lite_upsample_bilinear_is16os16>:
 800fd00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd04:	ed2d 8b0a 	vpush	{d8-d12}
 800fd08:	b08f      	sub	sp, #60	@ 0x3c
 800fd0a:	4683      	mov	fp, r0
 800fd0c:	9104      	str	r1, [sp, #16]
 800fd0e:	f89d 1094 	ldrb.w	r1, [sp, #148]	@ 0x94
 800fd12:	f8dd 8088 	ldr.w	r8, [sp, #136]	@ 0x88
 800fd16:	f8dd a090 	ldr.w	sl, [sp, #144]	@ 0x90
 800fd1a:	9206      	str	r2, [sp, #24]
 800fd1c:	2900      	cmp	r1, #0
 800fd1e:	f000 80a7 	beq.w	800fe70 <forward_lite_upsample_bilinear_is16os16+0x170>
 800fd22:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800fd26:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800fd2a:	ee70 aae7 	vsub.f32	s21, s1, s15
 800fd2e:	ee70 7a67 	vsub.f32	s15, s0, s15
 800fd32:	ee6a aa87 	vmul.f32	s21, s21, s14
 800fd36:	ee27 9a87 	vmul.f32	s18, s15, s14
 800fd3a:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800fd3e:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800fd40:	ee87 baa0 	vdiv.f32	s22, s15, s1
 800fd44:	eec7 9a80 	vdiv.f32	s19, s15, s0
 800fd48:	2a00      	cmp	r2, #0
 800fd4a:	f000 808c 	beq.w	800fe66 <forward_lite_upsample_bilinear_is16os16+0x166>
 800fd4e:	3b01      	subs	r3, #1
 800fd50:	ea4f 064a 	mov.w	r6, sl, lsl #1
 800fd54:	eddf 8a49 	vldr	s17, [pc, #292]	@ 800fe7c <forward_lite_upsample_bilinear_is16os16+0x17c>
 800fd58:	ee07 3a90 	vmov	s15, r3
 800fd5c:	9b06      	ldr	r3, [sp, #24]
 800fd5e:	1e5a      	subs	r2, r3, #1
 800fd60:	fb0a f303 	mul.w	r3, sl, r3
 800fd64:	eeb8 aa67 	vcvt.f32.u32	s20, s15
 800fd68:	ee0c 2a90 	vmov	s25, r2
 800fd6c:	9305      	str	r3, [sp, #20]
 800fd6e:	2300      	movs	r3, #0
 800fd70:	eef8 ca6c 	vcvt.f32.u32	s25, s25
 800fd74:	9303      	str	r3, [sp, #12]
 800fd76:	fb06 f308 	mul.w	r3, r6, r8
 800fd7a:	9307      	str	r3, [sp, #28]
 800fd7c:	eddd 7a03 	vldr	s15, [sp, #12]
 800fd80:	9b05      	ldr	r3, [sp, #20]
 800fd82:	eef8 ba67 	vcvt.f32.u32	s23, s15
 800fd86:	ee7b baea 	vsub.f32	s23, s23, s21
 800fd8a:	ee6b ba8b 	vmul.f32	s23, s23, s22
 800fd8e:	fecb baa8 	vmaxnm.f32	s23, s23, s17
 800fd92:	fecb baca 	vminnm.f32	s23, s23, s20
 800fd96:	eef4 ba4a 	vcmp.f32	s23, s20
 800fd9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd9e:	bf14      	ite	ne
 800fda0:	4699      	movne	r9, r3
 800fda2:	f04f 0900 	moveq.w	r9, #0
 800fda6:	f1b8 0f00 	cmp.w	r8, #0
 800fdaa:	d056      	beq.n	800fe5a <forward_lite_upsample_bilinear_is16os16+0x15a>
 800fdac:	eebc 7aeb 	vcvt.u32.f32	s14, s23
 800fdb0:	9b06      	ldr	r3, [sp, #24]
 800fdb2:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 800fdb6:	9d04      	ldr	r5, [sp, #16]
 800fdb8:	2400      	movs	r4, #0
 800fdba:	eef8 7a47 	vcvt.f32.u32	s15, s14
 800fdbe:	ee17 7a10 	vmov	r7, s14
 800fdc2:	ee38 ca6b 	vsub.f32	s24, s16, s23
 800fdc6:	fb03 f707 	mul.w	r7, r3, r7
 800fdca:	ee7b bae7 	vsub.f32	s23, s23, s15
 800fdce:	ee3c ca27 	vadd.f32	s24, s24, s15
 800fdd2:	ee07 4a90 	vmov	s15, r4
 800fdd6:	ab0a      	add	r3, sp, #40	@ 0x28
 800fdd8:	3401      	adds	r4, #1
 800fdda:	4629      	mov	r1, r5
 800fddc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fde0:	9300      	str	r3, [sp, #0]
 800fde2:	4652      	mov	r2, sl
 800fde4:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
 800fde8:	4435      	add	r5, r6
 800fdea:	ee77 7ac9 	vsub.f32	s15, s15, s18
 800fdee:	ee67 7aa9 	vmul.f32	s15, s15, s19
 800fdf2:	fec7 7aa8 	vmaxnm.f32	s15, s15, s17
 800fdf6:	fec7 7aec 	vminnm.f32	s15, s15, s25
 800fdfa:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 800fdfe:	eef4 7a6c 	vcmp.f32	s15, s25
 800fe02:	ee38 7a67 	vsub.f32	s14, s16, s15
 800fe06:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 800fe0a:	ee16 0a90 	vmov	r0, s13
 800fe0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe12:	4438      	add	r0, r7
 800fe14:	ee37 7a06 	vadd.f32	s14, s14, s12
 800fe18:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800fe1c:	bf14      	ite	ne
 800fe1e:	4653      	movne	r3, sl
 800fe20:	2300      	moveq	r3, #0
 800fe22:	fb06 b000 	mla	r0, r6, r0, fp
 800fe26:	ee67 5a0c 	vmul.f32	s11, s14, s24
 800fe2a:	ee27 6a8c 	vmul.f32	s12, s15, s24
 800fe2e:	9308      	str	r3, [sp, #32]
 800fe30:	ee27 7a2b 	vmul.f32	s14, s14, s23
 800fe34:	ab08      	add	r3, sp, #32
 800fe36:	ee67 7aab 	vmul.f32	s15, s15, s23
 800fe3a:	edcd 5a0a 	vstr	s11, [sp, #40]	@ 0x28
 800fe3e:	ed8d 6a0b 	vstr	s12, [sp, #44]	@ 0x2c
 800fe42:	ed8d 7a0c 	vstr	s14, [sp, #48]	@ 0x30
 800fe46:	edcd 7a0d 	vstr	s15, [sp, #52]	@ 0x34
 800fe4a:	f001 f82b 	bl	8010ea4 <lite_bilinear_is16os16_kernel>
 800fe4e:	45a0      	cmp	r8, r4
 800fe50:	d1bf      	bne.n	800fdd2 <forward_lite_upsample_bilinear_is16os16+0xd2>
 800fe52:	9b04      	ldr	r3, [sp, #16]
 800fe54:	9a07      	ldr	r2, [sp, #28]
 800fe56:	4413      	add	r3, r2
 800fe58:	9304      	str	r3, [sp, #16]
 800fe5a:	9b03      	ldr	r3, [sp, #12]
 800fe5c:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800fe5e:	3301      	adds	r3, #1
 800fe60:	429a      	cmp	r2, r3
 800fe62:	9303      	str	r3, [sp, #12]
 800fe64:	d18a      	bne.n	800fd7c <forward_lite_upsample_bilinear_is16os16+0x7c>
 800fe66:	b00f      	add	sp, #60	@ 0x3c
 800fe68:	ecbd 8b0a 	vpop	{d8-d12}
 800fe6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe70:	eddf aa02 	vldr	s21, [pc, #8]	@ 800fe7c <forward_lite_upsample_bilinear_is16os16+0x17c>
 800fe74:	eeb0 9a6a 	vmov.f32	s18, s21
 800fe78:	e75f      	b.n	800fd3a <forward_lite_upsample_bilinear_is16os16+0x3a>
 800fe7a:	bf00      	nop
 800fe7c:	00000000 	.word	0x00000000

0800fe80 <forward_lite_upsample_bilinear_iu16ou16>:
 800fe80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe84:	ed2d 8b0a 	vpush	{d8-d12}
 800fe88:	b08f      	sub	sp, #60	@ 0x3c
 800fe8a:	4683      	mov	fp, r0
 800fe8c:	9104      	str	r1, [sp, #16]
 800fe8e:	f89d 1094 	ldrb.w	r1, [sp, #148]	@ 0x94
 800fe92:	f8dd 8088 	ldr.w	r8, [sp, #136]	@ 0x88
 800fe96:	f8dd a090 	ldr.w	sl, [sp, #144]	@ 0x90
 800fe9a:	9206      	str	r2, [sp, #24]
 800fe9c:	2900      	cmp	r1, #0
 800fe9e:	f000 80a7 	beq.w	800fff0 <forward_lite_upsample_bilinear_iu16ou16+0x170>
 800fea2:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800fea6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800feaa:	ee70 aae7 	vsub.f32	s21, s1, s15
 800feae:	ee70 7a67 	vsub.f32	s15, s0, s15
 800feb2:	ee6a aa87 	vmul.f32	s21, s21, s14
 800feb6:	ee27 9a87 	vmul.f32	s18, s15, s14
 800feba:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800febe:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800fec0:	ee87 baa0 	vdiv.f32	s22, s15, s1
 800fec4:	eec7 9a80 	vdiv.f32	s19, s15, s0
 800fec8:	2a00      	cmp	r2, #0
 800feca:	f000 808c 	beq.w	800ffe6 <forward_lite_upsample_bilinear_iu16ou16+0x166>
 800fece:	3b01      	subs	r3, #1
 800fed0:	ea4f 064a 	mov.w	r6, sl, lsl #1
 800fed4:	eddf 8a49 	vldr	s17, [pc, #292]	@ 800fffc <forward_lite_upsample_bilinear_iu16ou16+0x17c>
 800fed8:	ee07 3a90 	vmov	s15, r3
 800fedc:	9b06      	ldr	r3, [sp, #24]
 800fede:	1e5a      	subs	r2, r3, #1
 800fee0:	fb0a f303 	mul.w	r3, sl, r3
 800fee4:	eeb8 aa67 	vcvt.f32.u32	s20, s15
 800fee8:	ee0c 2a90 	vmov	s25, r2
 800feec:	9305      	str	r3, [sp, #20]
 800feee:	2300      	movs	r3, #0
 800fef0:	eef8 ca6c 	vcvt.f32.u32	s25, s25
 800fef4:	9303      	str	r3, [sp, #12]
 800fef6:	fb06 f308 	mul.w	r3, r6, r8
 800fefa:	9307      	str	r3, [sp, #28]
 800fefc:	eddd 7a03 	vldr	s15, [sp, #12]
 800ff00:	9b05      	ldr	r3, [sp, #20]
 800ff02:	eef8 ba67 	vcvt.f32.u32	s23, s15
 800ff06:	ee7b baea 	vsub.f32	s23, s23, s21
 800ff0a:	ee6b ba8b 	vmul.f32	s23, s23, s22
 800ff0e:	fecb baa8 	vmaxnm.f32	s23, s23, s17
 800ff12:	fecb baca 	vminnm.f32	s23, s23, s20
 800ff16:	eef4 ba4a 	vcmp.f32	s23, s20
 800ff1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff1e:	bf14      	ite	ne
 800ff20:	4699      	movne	r9, r3
 800ff22:	f04f 0900 	moveq.w	r9, #0
 800ff26:	f1b8 0f00 	cmp.w	r8, #0
 800ff2a:	d056      	beq.n	800ffda <forward_lite_upsample_bilinear_iu16ou16+0x15a>
 800ff2c:	eebc 7aeb 	vcvt.u32.f32	s14, s23
 800ff30:	9b06      	ldr	r3, [sp, #24]
 800ff32:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 800ff36:	9d04      	ldr	r5, [sp, #16]
 800ff38:	2400      	movs	r4, #0
 800ff3a:	eef8 7a47 	vcvt.f32.u32	s15, s14
 800ff3e:	ee17 7a10 	vmov	r7, s14
 800ff42:	ee38 ca6b 	vsub.f32	s24, s16, s23
 800ff46:	fb03 f707 	mul.w	r7, r3, r7
 800ff4a:	ee7b bae7 	vsub.f32	s23, s23, s15
 800ff4e:	ee3c ca27 	vadd.f32	s24, s24, s15
 800ff52:	ee07 4a90 	vmov	s15, r4
 800ff56:	ab0a      	add	r3, sp, #40	@ 0x28
 800ff58:	3401      	adds	r4, #1
 800ff5a:	4629      	mov	r1, r5
 800ff5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ff60:	9300      	str	r3, [sp, #0]
 800ff62:	4652      	mov	r2, sl
 800ff64:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
 800ff68:	4435      	add	r5, r6
 800ff6a:	ee77 7ac9 	vsub.f32	s15, s15, s18
 800ff6e:	ee67 7aa9 	vmul.f32	s15, s15, s19
 800ff72:	fec7 7aa8 	vmaxnm.f32	s15, s15, s17
 800ff76:	fec7 7aec 	vminnm.f32	s15, s15, s25
 800ff7a:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 800ff7e:	eef4 7a6c 	vcmp.f32	s15, s25
 800ff82:	ee38 7a67 	vsub.f32	s14, s16, s15
 800ff86:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 800ff8a:	ee16 0a90 	vmov	r0, s13
 800ff8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff92:	4438      	add	r0, r7
 800ff94:	ee37 7a06 	vadd.f32	s14, s14, s12
 800ff98:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800ff9c:	bf14      	ite	ne
 800ff9e:	4653      	movne	r3, sl
 800ffa0:	2300      	moveq	r3, #0
 800ffa2:	fb06 b000 	mla	r0, r6, r0, fp
 800ffa6:	ee67 5a0c 	vmul.f32	s11, s14, s24
 800ffaa:	ee27 6a8c 	vmul.f32	s12, s15, s24
 800ffae:	9308      	str	r3, [sp, #32]
 800ffb0:	ee27 7a2b 	vmul.f32	s14, s14, s23
 800ffb4:	ab08      	add	r3, sp, #32
 800ffb6:	ee67 7aab 	vmul.f32	s15, s15, s23
 800ffba:	edcd 5a0a 	vstr	s11, [sp, #40]	@ 0x28
 800ffbe:	ed8d 6a0b 	vstr	s12, [sp, #44]	@ 0x2c
 800ffc2:	ed8d 7a0c 	vstr	s14, [sp, #48]	@ 0x30
 800ffc6:	edcd 7a0d 	vstr	s15, [sp, #52]	@ 0x34
 800ffca:	f000 ffc1 	bl	8010f50 <lite_bilinear_iu16ou16_kernel>
 800ffce:	45a0      	cmp	r8, r4
 800ffd0:	d1bf      	bne.n	800ff52 <forward_lite_upsample_bilinear_iu16ou16+0xd2>
 800ffd2:	9b04      	ldr	r3, [sp, #16]
 800ffd4:	9a07      	ldr	r2, [sp, #28]
 800ffd6:	4413      	add	r3, r2
 800ffd8:	9304      	str	r3, [sp, #16]
 800ffda:	9b03      	ldr	r3, [sp, #12]
 800ffdc:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ffde:	3301      	adds	r3, #1
 800ffe0:	429a      	cmp	r2, r3
 800ffe2:	9303      	str	r3, [sp, #12]
 800ffe4:	d18a      	bne.n	800fefc <forward_lite_upsample_bilinear_iu16ou16+0x7c>
 800ffe6:	b00f      	add	sp, #60	@ 0x3c
 800ffe8:	ecbd 8b0a 	vpop	{d8-d12}
 800ffec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fff0:	eddf aa02 	vldr	s21, [pc, #8]	@ 800fffc <forward_lite_upsample_bilinear_iu16ou16+0x17c>
 800fff4:	eeb0 9a6a 	vmov.f32	s18, s21
 800fff8:	e75f      	b.n	800feba <forward_lite_upsample_bilinear_iu16ou16+0x3a>
 800fffa:	bf00      	nop
 800fffc:	00000000 	.word	0x00000000

08010000 <forward_lite_dense_if32of32wf32>:
 8010000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010004:	ed2d 8b0c 	vpush	{d8-d13}
 8010008:	e9d0 2305 	ldrd	r2, r3, [r0, #20]
 801000c:	6801      	ldr	r1, [r0, #0]
 801000e:	b083      	sub	sp, #12
 8010010:	fb02 f303 	mul.w	r3, r2, r3
 8010014:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8010018:	9100      	str	r1, [sp, #0]
 801001a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801001e:	4299      	cmp	r1, r3
 8010020:	9301      	str	r3, [sp, #4]
 8010022:	f080 811c 	bcs.w	801025e <forward_lite_dense_if32of32wf32+0x25e>
 8010026:	4607      	mov	r7, r0
 8010028:	6904      	ldr	r4, [r0, #16]
 801002a:	0096      	lsls	r6, r2, #2
 801002c:	9b00      	ldr	r3, [sp, #0]
 801002e:	68bd      	ldr	r5, [r7, #8]
 8010030:	eb03 0e06 	add.w	lr, r3, r6
 8010034:	461e      	mov	r6, r3
 8010036:	459e      	cmp	lr, r3
 8010038:	f240 8103 	bls.w	8010242 <forward_lite_dense_if32of32wf32+0x242>
 801003c:	f1a4 0c10 	sub.w	ip, r4, #16
 8010040:	ea4f 0984 	mov.w	r9, r4, lsl #2
 8010044:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 8010048:	f10c 0c01 	add.w	ip, ip, #1
 801004c:	ea4f 1b8c 	mov.w	fp, ip, lsl #6
 8010050:	eb08 1c8c 	add.w	ip, r8, ip, lsl #6
 8010054:	2c0f      	cmp	r4, #15
 8010056:	f240 8107 	bls.w	8010268 <forward_lite_dense_if32of32wf32+0x268>
 801005a:	f108 0240 	add.w	r2, r8, #64	@ 0x40
 801005e:	f105 0340 	add.w	r3, r5, #64	@ 0x40
 8010062:	ed9f 7a95 	vldr	s14, [pc, #596]	@ 80102b8 <forward_lite_dense_if32of32wf32+0x2b8>
 8010066:	4621      	mov	r1, r4
 8010068:	ed53 6a0f 	vldr	s13, [r3, #-60]	@ 0xffffffc4
 801006c:	3910      	subs	r1, #16
 801006e:	ed52 7a0f 	vldr	s15, [r2, #-60]	@ 0xffffffc4
 8010072:	3340      	adds	r3, #64	@ 0x40
 8010074:	ed52 4a10 	vldr	s9, [r2, #-64]	@ 0xffffffc0
 8010078:	290f      	cmp	r1, #15
 801007a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801007e:	ed13 5a20 	vldr	s10, [r3, #-128]	@ 0xffffff80
 8010082:	ed52 5a0e 	vldr	s11, [r2, #-56]	@ 0xffffffc8
 8010086:	f102 0240 	add.w	r2, r2, #64	@ 0x40
 801008a:	ed13 6a1e 	vldr	s12, [r3, #-120]	@ 0xffffff88
 801008e:	eee4 7a85 	vfma.f32	s15, s9, s10
 8010092:	ed53 6a1d 	vldr	s13, [r3, #-116]	@ 0xffffff8c
 8010096:	ed12 da1d 	vldr	s26, [r2, #-116]	@ 0xffffff8c
 801009a:	ed52 ca1c 	vldr	s25, [r2, #-112]	@ 0xffffff90
 801009e:	ed13 ca1c 	vldr	s24, [r3, #-112]	@ 0xffffff90
 80100a2:	ed52 ba1b 	vldr	s23, [r2, #-108]	@ 0xffffff94
 80100a6:	ed13 ba1b 	vldr	s22, [r3, #-108]	@ 0xffffff94
 80100aa:	eee5 7a86 	vfma.f32	s15, s11, s12
 80100ae:	ed52 aa1a 	vldr	s21, [r2, #-104]	@ 0xffffff98
 80100b2:	ed13 aa1a 	vldr	s20, [r3, #-104]	@ 0xffffff98
 80100b6:	ed52 9a19 	vldr	s19, [r2, #-100]	@ 0xffffff9c
 80100ba:	ed13 9a19 	vldr	s18, [r3, #-100]	@ 0xffffff9c
 80100be:	ed52 8a18 	vldr	s17, [r2, #-96]	@ 0xffffffa0
 80100c2:	ed13 8a18 	vldr	s16, [r3, #-96]	@ 0xffffffa0
 80100c6:	eeed 7a26 	vfma.f32	s15, s26, s13
 80100ca:	ed12 0a17 	vldr	s0, [r2, #-92]	@ 0xffffffa4
 80100ce:	ed53 0a17 	vldr	s1, [r3, #-92]	@ 0xffffffa4
 80100d2:	ed12 1a16 	vldr	s2, [r2, #-88]	@ 0xffffffa8
 80100d6:	ed53 1a16 	vldr	s3, [r3, #-88]	@ 0xffffffa8
 80100da:	ed12 2a15 	vldr	s4, [r2, #-84]	@ 0xffffffac
 80100de:	ed53 2a15 	vldr	s5, [r3, #-84]	@ 0xffffffac
 80100e2:	eeec 7a8c 	vfma.f32	s15, s25, s24
 80100e6:	ed12 3a14 	vldr	s6, [r2, #-80]	@ 0xffffffb0
 80100ea:	ed53 3a14 	vldr	s7, [r3, #-80]	@ 0xffffffb0
 80100ee:	ed12 4a13 	vldr	s8, [r2, #-76]	@ 0xffffffb4
 80100f2:	ed53 4a13 	vldr	s9, [r3, #-76]	@ 0xffffffb4
 80100f6:	ed12 5a12 	vldr	s10, [r2, #-72]	@ 0xffffffb8
 80100fa:	ed53 5a12 	vldr	s11, [r3, #-72]	@ 0xffffffb8
 80100fe:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 8010102:	ed12 6a11 	vldr	s12, [r2, #-68]	@ 0xffffffbc
 8010106:	ed53 6a11 	vldr	s13, [r3, #-68]	@ 0xffffffbc
 801010a:	eeea 7a8a 	vfma.f32	s15, s21, s20
 801010e:	eee9 7a89 	vfma.f32	s15, s19, s18
 8010112:	eee8 7a88 	vfma.f32	s15, s17, s16
 8010116:	eee0 7a20 	vfma.f32	s15, s0, s1
 801011a:	eee1 7a21 	vfma.f32	s15, s2, s3
 801011e:	eee2 7a22 	vfma.f32	s15, s4, s5
 8010122:	eee3 7a23 	vfma.f32	s15, s6, s7
 8010126:	eee4 7a24 	vfma.f32	s15, s8, s9
 801012a:	eee5 7a25 	vfma.f32	s15, s10, s11
 801012e:	eee6 7a26 	vfma.f32	s15, s12, s13
 8010132:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010136:	d897      	bhi.n	8010068 <forward_lite_dense_if32of32wf32+0x68>
 8010138:	eb05 020b 	add.w	r2, r5, fp
 801013c:	f004 010f 	and.w	r1, r4, #15
 8010140:	4663      	mov	r3, ip
 8010142:	2903      	cmp	r1, #3
 8010144:	d95f      	bls.n	8010206 <forward_lite_dense_if32of32wf32+0x206>
 8010146:	edd2 6a01 	vldr	s13, [r2, #4]
 801014a:	1f08      	subs	r0, r1, #4
 801014c:	edd3 7a01 	vldr	s15, [r3, #4]
 8010150:	ed93 4a00 	vldr	s8, [r3]
 8010154:	2803      	cmp	r0, #3
 8010156:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801015a:	edd2 4a00 	vldr	s9, [r2]
 801015e:	ed93 5a02 	vldr	s10, [r3, #8]
 8010162:	edd2 5a02 	vldr	s11, [r2, #8]
 8010166:	eee4 7a24 	vfma.f32	s15, s8, s9
 801016a:	ed93 6a03 	vldr	s12, [r3, #12]
 801016e:	edd2 6a03 	vldr	s13, [r2, #12]
 8010172:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010176:	eee5 7a25 	vfma.f32	s15, s10, s11
 801017a:	eee6 7a26 	vfma.f32	s15, s12, s13
 801017e:	eeb0 7a67 	vmov.f32	s14, s15
 8010182:	d938      	bls.n	80101f6 <forward_lite_dense_if32of32wf32+0x1f6>
 8010184:	edd2 6a05 	vldr	s13, [r2, #20]
 8010188:	f1a1 0a08 	sub.w	sl, r1, #8
 801018c:	edd3 7a05 	vldr	s15, [r3, #20]
 8010190:	ed93 4a04 	vldr	s8, [r3, #16]
 8010194:	f1ba 0f03 	cmp.w	sl, #3
 8010198:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801019c:	edd2 4a04 	vldr	s9, [r2, #16]
 80101a0:	ed93 5a06 	vldr	s10, [r3, #24]
 80101a4:	edd2 5a06 	vldr	s11, [r2, #24]
 80101a8:	eee4 7a24 	vfma.f32	s15, s8, s9
 80101ac:	ed93 6a07 	vldr	s12, [r3, #28]
 80101b0:	edd2 6a07 	vldr	s13, [r2, #28]
 80101b4:	eee5 7a25 	vfma.f32	s15, s10, s11
 80101b8:	eee6 7a26 	vfma.f32	s15, s12, s13
 80101bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80101c0:	d919      	bls.n	80101f6 <forward_lite_dense_if32of32wf32+0x1f6>
 80101c2:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 80101c6:	edd2 7a09 	vldr	s15, [r2, #36]	@ 0x24
 80101ca:	ed92 4a08 	vldr	s8, [r2, #32]
 80101ce:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80101d2:	edd3 4a08 	vldr	s9, [r3, #32]
 80101d6:	ed92 5a0a 	vldr	s10, [r2, #40]	@ 0x28
 80101da:	edd3 5a0a 	vldr	s11, [r3, #40]	@ 0x28
 80101de:	eee4 7a24 	vfma.f32	s15, s8, s9
 80101e2:	ed92 6a0b 	vldr	s12, [r2, #44]	@ 0x2c
 80101e6:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 80101ea:	eee5 7a25 	vfma.f32	s15, s10, s11
 80101ee:	eee6 7a26 	vfma.f32	s15, s12, s13
 80101f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80101f6:	0880      	lsrs	r0, r0, #2
 80101f8:	f001 0103 	and.w	r1, r1, #3
 80101fc:	3001      	adds	r0, #1
 80101fe:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 8010202:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8010206:	b1a9      	cbz	r1, 8010234 <forward_lite_dense_if32of32wf32+0x234>
 8010208:	edd3 6a00 	vldr	s13, [r3]
 801020c:	3901      	subs	r1, #1
 801020e:	edd2 7a00 	vldr	s15, [r2]
 8010212:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010216:	d00d      	beq.n	8010234 <forward_lite_dense_if32of32wf32+0x234>
 8010218:	edd3 6a01 	vldr	s13, [r3, #4]
 801021c:	2901      	cmp	r1, #1
 801021e:	edd2 7a01 	vldr	s15, [r2, #4]
 8010222:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010226:	d005      	beq.n	8010234 <forward_lite_dense_if32of32wf32+0x234>
 8010228:	edd2 6a02 	vldr	s13, [r2, #8]
 801022c:	edd3 7a02 	vldr	s15, [r3, #8]
 8010230:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010234:	eca6 7a01 	vstmia	r6!, {s14}
 8010238:	45b6      	cmp	lr, r6
 801023a:	444d      	add	r5, r9
 801023c:	f63f af0a 	bhi.w	8010054 <forward_lite_dense_if32of32wf32+0x54>
 8010240:	697a      	ldr	r2, [r7, #20]
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	b9b3      	cbnz	r3, 8010274 <forward_lite_dense_if32of32wf32+0x274>
 8010246:	9b00      	ldr	r3, [sp, #0]
 8010248:	0096      	lsls	r6, r2, #2
 801024a:	9901      	ldr	r1, [sp, #4]
 801024c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8010250:	693c      	ldr	r4, [r7, #16]
 8010252:	4299      	cmp	r1, r3
 8010254:	eb08 0884 	add.w	r8, r8, r4, lsl #2
 8010258:	9300      	str	r3, [sp, #0]
 801025a:	f63f aee7 	bhi.w	801002c <forward_lite_dense_if32of32wf32+0x2c>
 801025e:	b003      	add	sp, #12
 8010260:	ecbd 8b0c 	vpop	{d8-d13}
 8010264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010268:	4621      	mov	r1, r4
 801026a:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 80102b8 <forward_lite_dense_if32of32wf32+0x2b8>
 801026e:	462a      	mov	r2, r5
 8010270:	4643      	mov	r3, r8
 8010272:	e766      	b.n	8010142 <forward_lite_dense_if32of32wf32+0x142>
 8010274:	2a00      	cmp	r2, #0
 8010276:	d0e6      	beq.n	8010246 <forward_lite_dense_if32of32wf32+0x246>
 8010278:	9a00      	ldr	r2, [sp, #0]
 801027a:	ed93 7a00 	vldr	s14, [r3]
 801027e:	edd2 7a00 	vldr	s15, [r2]
 8010282:	4613      	mov	r3, r2
 8010284:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010288:	edc2 7a00 	vstr	s15, [r2]
 801028c:	697a      	ldr	r2, [r7, #20]
 801028e:	2a01      	cmp	r2, #1
 8010290:	d9d9      	bls.n	8010246 <forward_lite_dense_if32of32wf32+0x246>
 8010292:	1d19      	adds	r1, r3, #4
 8010294:	2301      	movs	r3, #1
 8010296:	68fa      	ldr	r2, [r7, #12]
 8010298:	ed91 7a00 	vldr	s14, [r1]
 801029c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80102a0:	3301      	adds	r3, #1
 80102a2:	edd2 7a00 	vldr	s15, [r2]
 80102a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80102aa:	ece1 7a01 	vstmia	r1!, {s15}
 80102ae:	697a      	ldr	r2, [r7, #20]
 80102b0:	429a      	cmp	r2, r3
 80102b2:	d8f0      	bhi.n	8010296 <forward_lite_dense_if32of32wf32+0x296>
 80102b4:	e7c7      	b.n	8010246 <forward_lite_dense_if32of32wf32+0x246>
 80102b6:	bf00      	nop
 80102b8:	00000000 	.word	0x00000000

080102bc <forward_lite_dense_if32of32wf32_lut4>:
 80102bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102c0:	b08d      	sub	sp, #52	@ 0x34
 80102c2:	4605      	mov	r5, r0
 80102c4:	460c      	mov	r4, r1
 80102c6:	9005      	str	r0, [sp, #20]
 80102c8:	4618      	mov	r0, r3
 80102ca:	920a      	str	r2, [sp, #40]	@ 0x28
 80102cc:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 80102ce:	e9dd 2319 	ldrd	r2, r3, [sp, #100]	@ 0x64
 80102d2:	fb02 f303 	mul.w	r3, r2, r3
 80102d6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80102da:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 80102dc:	9308      	str	r3, [sp, #32]
 80102de:	b126      	cbz	r6, 80102ea <forward_lite_dense_if32of32wf32_lut4+0x2e>
 80102e0:	2240      	movs	r2, #64	@ 0x40
 80102e2:	4631      	mov	r1, r6
 80102e4:	f000 fbe0 	bl	8010aa8 <st_int8_copy>
 80102e8:	4630      	mov	r0, r6
 80102ea:	9b05      	ldr	r3, [sp, #20]
 80102ec:	9a08      	ldr	r2, [sp, #32]
 80102ee:	4293      	cmp	r3, r2
 80102f0:	f080 80f7 	bcs.w	80104e2 <forward_lite_dense_if32of32wf32_lut4+0x226>
 80102f4:	08eb      	lsrs	r3, r5, #3
 80102f6:	f005 0101 	and.w	r1, r5, #1
 80102fa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80102fc:	f025 0801 	bic.w	r8, r5, #1
 8010300:	eb04 1a43 	add.w	sl, r4, r3, lsl #5
 8010304:	9301      	str	r3, [sp, #4]
 8010306:	009b      	lsls	r3, r3, #2
 8010308:	9102      	str	r1, [sp, #8]
 801030a:	0092      	lsls	r2, r2, #2
 801030c:	f104 0b20 	add.w	fp, r4, #32
 8010310:	00a9      	lsls	r1, r5, #2
 8010312:	9304      	str	r3, [sp, #16]
 8010314:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 8010318:	9b05      	ldr	r3, [sp, #20]
 801031a:	9207      	str	r2, [sp, #28]
 801031c:	9109      	str	r1, [sp, #36]	@ 0x24
 801031e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8010320:	9a07      	ldr	r2, [sp, #28]
 8010322:	eb03 0902 	add.w	r9, r3, r2
 8010326:	f1ab 0220 	sub.w	r2, fp, #32
 801032a:	4599      	cmp	r9, r3
 801032c:	9206      	str	r2, [sp, #24]
 801032e:	f240 80db 	bls.w	80104e8 <forward_lite_dense_if32of32wf32_lut4+0x22c>
 8010332:	469e      	mov	lr, r3
 8010334:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010336:	f108 33ff 	add.w	r3, r8, #4294967295
 801033a:	9303      	str	r3, [sp, #12]
 801033c:	9b01      	ldr	r3, [sp, #4]
 801033e:	2b00      	cmp	r3, #0
 8010340:	f000 80b4 	beq.w	80104ac <forward_lite_dense_if32of32wf32_lut4+0x1f0>
 8010344:	9b04      	ldr	r3, [sp, #16]
 8010346:	ed9f 7a71 	vldr	s14, [pc, #452]	@ 801050c <forward_lite_dense_if32of32wf32_lut4+0x250>
 801034a:	18d4      	adds	r4, r2, r3
 801034c:	465b      	mov	r3, fp
 801034e:	7816      	ldrb	r6, [r2, #0]
 8010350:	3204      	adds	r2, #4
 8010352:	ed53 2a07 	vldr	s5, [r3, #-28]	@ 0xffffffe4
 8010356:	3320      	adds	r3, #32
 8010358:	f006 070f 	and.w	r7, r6, #15
 801035c:	0936      	lsrs	r6, r6, #4
 801035e:	f812 5c03 	ldrb.w	r5, [r2, #-3]
 8010362:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8010366:	ed13 4a10 	vldr	s8, [r3, #-64]	@ 0xffffffc0
 801036a:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 801036e:	ed53 3a0e 	vldr	s7, [r3, #-56]	@ 0xffffffc8
 8010372:	edd7 7a00 	vldr	s15, [r7]
 8010376:	ed96 3a00 	vldr	s6, [r6]
 801037a:	092e      	lsrs	r6, r5, #4
 801037c:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8010380:	f005 050f 	and.w	r5, r5, #15
 8010384:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8010388:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 801038c:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8010390:	ed13 5a0d 	vldr	s10, [r3, #-52]	@ 0xffffffcc
 8010394:	eee3 7a04 	vfma.f32	s15, s6, s8
 8010398:	ed96 3a00 	vldr	s6, [r6]
 801039c:	ed95 4a00 	vldr	s8, [r5]
 80103a0:	090d      	lsrs	r5, r1, #4
 80103a2:	ed53 4a0c 	vldr	s9, [r3, #-48]	@ 0xffffffd0
 80103a6:	f001 010f 	and.w	r1, r1, #15
 80103aa:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80103ae:	ed13 6a0b 	vldr	s12, [r3, #-44]	@ 0xffffffd4
 80103b2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80103b6:	ed53 5a0a 	vldr	s11, [r3, #-40]	@ 0xffffffd8
 80103ba:	ed53 6a09 	vldr	s13, [r3, #-36]	@ 0xffffffdc
 80103be:	eee3 7a23 	vfma.f32	s15, s6, s7
 80103c2:	eee4 7a05 	vfma.f32	s15, s8, s10
 80103c6:	ed95 4a00 	vldr	s8, [r5]
 80103ca:	ed91 5a00 	vldr	s10, [r1]
 80103ce:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 80103d2:	42a2      	cmp	r2, r4
 80103d4:	ea4f 1511 	mov.w	r5, r1, lsr #4
 80103d8:	f001 010f 	and.w	r1, r1, #15
 80103dc:	eee4 7a24 	vfma.f32	s15, s8, s9
 80103e0:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80103e4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80103e8:	eee5 7a06 	vfma.f32	s15, s10, s12
 80103ec:	ed95 5a00 	vldr	s10, [r5]
 80103f0:	ed91 6a00 	vldr	s12, [r1]
 80103f4:	eee5 7a25 	vfma.f32	s15, s10, s11
 80103f8:	eee6 7a26 	vfma.f32	s15, s12, s13
 80103fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010400:	d1a5      	bne.n	801034e <forward_lite_dense_if32of32wf32_lut4+0x92>
 8010402:	4656      	mov	r6, sl
 8010404:	4546      	cmp	r6, r8
 8010406:	d257      	bcs.n	80104b8 <forward_lite_dense_if32of32wf32_lut4+0x1fc>
 8010408:	9b03      	ldr	r3, [sp, #12]
 801040a:	f106 0208 	add.w	r2, r6, #8
 801040e:	1e61      	subs	r1, r4, #1
 8010410:	1b9d      	subs	r5, r3, r6
 8010412:	08ef      	lsrs	r7, r5, #3
 8010414:	eb04 05d5 	add.w	r5, r4, r5, lsr #3
 8010418:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801041c:	3208      	adds	r2, #8
 801041e:	ed52 5a03 	vldr	s11, [r2, #-12]
 8010422:	f003 0c0f 	and.w	ip, r3, #15
 8010426:	091b      	lsrs	r3, r3, #4
 8010428:	ed52 6a04 	vldr	s13, [r2, #-16]
 801042c:	42a9      	cmp	r1, r5
 801042e:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8010432:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8010436:	eddc 7a00 	vldr	s15, [ip]
 801043a:	ed93 6a00 	vldr	s12, [r3]
 801043e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8010442:	eee6 7a26 	vfma.f32	s15, s12, s13
 8010446:	ee37 7a27 	vadd.f32	s14, s14, s15
 801044a:	d1e5      	bne.n	8010418 <forward_lite_dense_if32of32wf32_lut4+0x15c>
 801044c:	3701      	adds	r7, #1
 801044e:	19e2      	adds	r2, r4, r7
 8010450:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
 8010454:	9b02      	ldr	r3, [sp, #8]
 8010456:	b30b      	cbz	r3, 801049c <forward_lite_dense_if32of32wf32_lut4+0x1e0>
 8010458:	f812 3b01 	ldrb.w	r3, [r2], #1
 801045c:	edd6 7a00 	vldr	s15, [r6]
 8010460:	091b      	lsrs	r3, r3, #4
 8010462:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8010466:	edd3 6a00 	vldr	s13, [r3]
 801046a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801046e:	ecae 7a01 	vstmia	lr!, {s14}
 8010472:	45f1      	cmp	r9, lr
 8010474:	f63f af62 	bhi.w	801033c <forward_lite_dense_if32of32wf32_lut4+0x80>
 8010478:	9b05      	ldr	r3, [sp, #20]
 801047a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801047c:	1899      	adds	r1, r3, r2
 801047e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8010480:	b9e3      	cbnz	r3, 80104bc <forward_lite_dense_if32of32wf32_lut4+0x200>
 8010482:	9b08      	ldr	r3, [sp, #32]
 8010484:	428b      	cmp	r3, r1
 8010486:	d92c      	bls.n	80104e2 <forward_lite_dense_if32of32wf32_lut4+0x226>
 8010488:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801048a:	4498      	add	r8, r3
 801048c:	449a      	add	sl, r3
 801048e:	449b      	add	fp, r3
 8010490:	9b05      	ldr	r3, [sp, #20]
 8010492:	4599      	cmp	r9, r3
 8010494:	d92a      	bls.n	80104ec <forward_lite_dense_if32of32wf32_lut4+0x230>
 8010496:	460b      	mov	r3, r1
 8010498:	9105      	str	r1, [sp, #20]
 801049a:	e741      	b.n	8010320 <forward_lite_dense_if32of32wf32_lut4+0x64>
 801049c:	ecae 7a01 	vstmia	lr!, {s14}
 80104a0:	45f1      	cmp	r9, lr
 80104a2:	d9e9      	bls.n	8010478 <forward_lite_dense_if32of32wf32_lut4+0x1bc>
 80104a4:	9b01      	ldr	r3, [sp, #4]
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	f47f af4c 	bne.w	8010344 <forward_lite_dense_if32of32wf32_lut4+0x88>
 80104ac:	9e06      	ldr	r6, [sp, #24]
 80104ae:	4614      	mov	r4, r2
 80104b0:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 801050c <forward_lite_dense_if32of32wf32_lut4+0x250>
 80104b4:	4546      	cmp	r6, r8
 80104b6:	d3a7      	bcc.n	8010408 <forward_lite_dense_if32of32wf32_lut4+0x14c>
 80104b8:	4622      	mov	r2, r4
 80104ba:	e7cb      	b.n	8010454 <forward_lite_dense_if32of32wf32_lut4+0x198>
 80104bc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d0df      	beq.n	8010482 <forward_lite_dense_if32of32wf32_lut4+0x1c6>
 80104c2:	9b07      	ldr	r3, [sp, #28]
 80104c4:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80104c6:	1acb      	subs	r3, r1, r3
 80104c8:	edd3 7a00 	vldr	s15, [r3]
 80104cc:	ecb2 7a01 	vldmia	r2!, {s14}
 80104d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80104d4:	ece3 7a01 	vstmia	r3!, {s15}
 80104d8:	428b      	cmp	r3, r1
 80104da:	d1f5      	bne.n	80104c8 <forward_lite_dense_if32of32wf32_lut4+0x20c>
 80104dc:	9b08      	ldr	r3, [sp, #32]
 80104de:	428b      	cmp	r3, r1
 80104e0:	d8d2      	bhi.n	8010488 <forward_lite_dense_if32of32wf32_lut4+0x1cc>
 80104e2:	b00d      	add	sp, #52	@ 0x34
 80104e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104e8:	4619      	mov	r1, r3
 80104ea:	e7c8      	b.n	801047e <forward_lite_dense_if32of32wf32_lut4+0x1c2>
 80104ec:	9b07      	ldr	r3, [sp, #28]
 80104ee:	1acb      	subs	r3, r1, r3
 80104f0:	461a      	mov	r2, r3
 80104f2:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 80104f4:	ed92 7a00 	vldr	s14, [r2]
 80104f8:	ecf0 7a01 	vldmia	r0!, {s15}
 80104fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010500:	ece2 7a01 	vstmia	r2!, {s15}
 8010504:	428a      	cmp	r2, r1
 8010506:	d1f5      	bne.n	80104f4 <forward_lite_dense_if32of32wf32_lut4+0x238>
 8010508:	e7f2      	b.n	80104f0 <forward_lite_dense_if32of32wf32_lut4+0x234>
 801050a:	bf00      	nop
 801050c:	00000000 	.word	0x00000000

08010510 <forward_lite_dense_if32of32wf32_lut8>:
 8010510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010514:	b091      	sub	sp, #68	@ 0x44
 8010516:	4699      	mov	r9, r3
 8010518:	468b      	mov	fp, r1
 801051a:	920e      	str	r2, [sp, #56]	@ 0x38
 801051c:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 801051e:	f8dd 8070 	ldr.w	r8, [sp, #112]	@ 0x70
 8010522:	9003      	str	r0, [sp, #12]
 8010524:	e9dd 231d 	ldrd	r2, r3, [sp, #116]	@ 0x74
 8010528:	fb02 f303 	mul.w	r3, r2, r3
 801052c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8010530:	930c      	str	r3, [sp, #48]	@ 0x30
 8010532:	b134      	cbz	r4, 8010542 <forward_lite_dense_if32of32wf32_lut8+0x32>
 8010534:	4648      	mov	r0, r9
 8010536:	46a1      	mov	r9, r4
 8010538:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801053c:	4621      	mov	r1, r4
 801053e:	f000 fab3 	bl	8010aa8 <st_int8_copy>
 8010542:	9b03      	ldr	r3, [sp, #12]
 8010544:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8010546:	4293      	cmp	r3, r2
 8010548:	f080 8084 	bcs.w	8010654 <forward_lite_dense_if32of32wf32_lut8+0x144>
 801054c:	4bb7      	ldr	r3, [pc, #732]	@ (801082c <forward_lite_dense_if32of32wf32_lut8+0x31c>)
 801054e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8010550:	4443      	add	r3, r8
 8010552:	9d03      	ldr	r5, [sp, #12]
 8010554:	0092      	lsls	r2, r2, #2
 8010556:	eddf 3ab6 	vldr	s7, [pc, #728]	@ 8010830 <forward_lite_dense_if32of32wf32_lut8+0x320>
 801055a:	009b      	lsls	r3, r3, #2
 801055c:	920b      	str	r2, [sp, #44]	@ 0x2c
 801055e:	f103 0120 	add.w	r1, r3, #32
 8010562:	930d      	str	r3, [sp, #52]	@ 0x34
 8010564:	445b      	add	r3, fp
 8010566:	920f      	str	r2, [sp, #60]	@ 0x3c
 8010568:	9105      	str	r1, [sp, #20]
 801056a:	9300      	str	r3, [sp, #0]
 801056c:	eb0b 0301 	add.w	r3, fp, r1
 8010570:	469a      	mov	sl, r3
 8010572:	469e      	mov	lr, r3
 8010574:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010576:	eb05 0c03 	add.w	ip, r5, r3
 801057a:	45ac      	cmp	ip, r5
 801057c:	d952      	bls.n	8010624 <forward_lite_dense_if32of32wf32_lut8+0x114>
 801057e:	9800      	ldr	r0, [sp, #0]
 8010580:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010582:	f100 011f 	add.w	r1, r0, #31
 8010586:	eba0 020b 	sub.w	r2, r0, fp
 801058a:	445b      	add	r3, fp
 801058c:	9101      	str	r1, [sp, #4]
 801058e:	eba1 010b 	sub.w	r1, r1, fp
 8010592:	0952      	lsrs	r2, r2, #5
 8010594:	9306      	str	r3, [sp, #24]
 8010596:	0889      	lsrs	r1, r1, #2
 8010598:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801059a:	3101      	adds	r1, #1
 801059c:	9102      	str	r1, [sp, #8]
 801059e:	1c51      	adds	r1, r2, #1
 80105a0:	00d2      	lsls	r2, r2, #3
 80105a2:	3210      	adds	r2, #16
 80105a4:	920a      	str	r2, [sp, #40]	@ 0x28
 80105a6:	00ca      	lsls	r2, r1, #3
 80105a8:	9208      	str	r2, [sp, #32]
 80105aa:	eb0b 1241 	add.w	r2, fp, r1, lsl #5
 80105ae:	9209      	str	r2, [sp, #36]	@ 0x24
 80105b0:	1f02      	subs	r2, r0, #4
 80105b2:	9204      	str	r2, [sp, #16]
 80105b4:	f10b 0204 	add.w	r2, fp, #4
 80105b8:	9207      	str	r2, [sp, #28]
 80105ba:	f1b8 0f07 	cmp.w	r8, #7
 80105be:	d84c      	bhi.n	801065a <forward_lite_dense_if32of32wf32_lut8+0x14a>
 80105c0:	45d3      	cmp	fp, sl
 80105c2:	ed9f 7a9b 	vldr	s14, [pc, #620]	@ 8010830 <forward_lite_dense_if32of32wf32_lut8+0x320>
 80105c6:	d20f      	bcs.n	80105e8 <forward_lite_dense_if32of32wf32_lut8+0xd8>
 80105c8:	4659      	mov	r1, fp
 80105ca:	4618      	mov	r0, r3
 80105cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80105d0:	ecf1 7a01 	vldmia	r1!, {s15}
 80105d4:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 80105d8:	4551      	cmp	r1, sl
 80105da:	edd2 6a00 	vldr	s13, [r2]
 80105de:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80105e2:	d3f3      	bcc.n	80105cc <forward_lite_dense_if32of32wf32_lut8+0xbc>
 80105e4:	9a02      	ldr	r2, [sp, #8]
 80105e6:	4413      	add	r3, r2
 80105e8:	eca5 7a01 	vstmia	r5!, {s14}
 80105ec:	45ac      	cmp	ip, r5
 80105ee:	d8e4      	bhi.n	80105ba <forward_lite_dense_if32of32wf32_lut8+0xaa>
 80105f0:	9b03      	ldr	r3, [sp, #12]
 80105f2:	46f3      	mov	fp, lr
 80105f4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80105f6:	1899      	adds	r1, r3, r2
 80105f8:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80105fa:	b9c3      	cbnz	r3, 801062e <forward_lite_dense_if32of32wf32_lut8+0x11e>
 80105fc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80105fe:	428b      	cmp	r3, r1
 8010600:	d928      	bls.n	8010654 <forward_lite_dense_if32of32wf32_lut8+0x144>
 8010602:	9b00      	ldr	r3, [sp, #0]
 8010604:	9a05      	ldr	r2, [sp, #20]
 8010606:	4413      	add	r3, r2
 8010608:	4492      	add	sl, r2
 801060a:	9300      	str	r3, [sp, #0]
 801060c:	9b03      	ldr	r3, [sp, #12]
 801060e:	459c      	cmp	ip, r3
 8010610:	f240 821e 	bls.w	8010a50 <forward_lite_dense_if32of32wf32_lut8+0x540>
 8010614:	460d      	mov	r5, r1
 8010616:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010618:	4496      	add	lr, r2
 801061a:	9103      	str	r1, [sp, #12]
 801061c:	eb05 0c03 	add.w	ip, r5, r3
 8010620:	45ac      	cmp	ip, r5
 8010622:	d8ac      	bhi.n	801057e <forward_lite_dense_if32of32wf32_lut8+0x6e>
 8010624:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8010626:	4629      	mov	r1, r5
 8010628:	46f3      	mov	fp, lr
 801062a:	2b00      	cmp	r3, #0
 801062c:	d0e6      	beq.n	80105fc <forward_lite_dense_if32of32wf32_lut8+0xec>
 801062e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010630:	2b00      	cmp	r3, #0
 8010632:	d0e3      	beq.n	80105fc <forward_lite_dense_if32of32wf32_lut8+0xec>
 8010634:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010636:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8010638:	1acb      	subs	r3, r1, r3
 801063a:	edd3 7a00 	vldr	s15, [r3]
 801063e:	ecb2 7a01 	vldmia	r2!, {s14}
 8010642:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010646:	ece3 7a01 	vstmia	r3!, {s15}
 801064a:	428b      	cmp	r3, r1
 801064c:	d1f5      	bne.n	801063a <forward_lite_dense_if32of32wf32_lut8+0x12a>
 801064e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010650:	428b      	cmp	r3, r1
 8010652:	d8d6      	bhi.n	8010602 <forward_lite_dense_if32of32wf32_lut8+0xf2>
 8010654:	b011      	add	sp, #68	@ 0x44
 8010656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801065a:	f003 0203 	and.w	r2, r3, #3
 801065e:	2a02      	cmp	r2, #2
 8010660:	f000 81ee 	beq.w	8010a40 <forward_lite_dense_if32of32wf32_lut8+0x530>
 8010664:	2a03      	cmp	r2, #3
 8010666:	f000 80e5 	beq.w	8010834 <forward_lite_dense_if32of32wf32_lut8+0x324>
 801066a:	2a01      	cmp	r2, #1
 801066c:	f000 81d2 	beq.w	8010a14 <forward_lite_dense_if32of32wf32_lut8+0x504>
 8010670:	9a06      	ldr	r2, [sp, #24]
 8010672:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 8010830 <forward_lite_dense_if32of32wf32_lut8+0x320>
 8010676:	4593      	cmp	fp, r2
 8010678:	f200 81e8 	bhi.w	8010a4c <forward_lite_dense_if32of32wf32_lut8+0x53c>
 801067c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801067e:	f103 0208 	add.w	r2, r3, #8
 8010682:	f10b 0120 	add.w	r1, fp, #32
 8010686:	18c4      	adds	r4, r0, r3
 8010688:	f812 0c07 	ldrb.w	r0, [r2, #-7]
 801068c:	3208      	adds	r2, #8
 801068e:	ed51 2a07 	vldr	s5, [r1, #-28]	@ 0xffffffe4
 8010692:	3120      	adds	r1, #32
 8010694:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8010698:	ed11 3a10 	vldr	s6, [r1, #-64]	@ 0xffffffc0
 801069c:	ed11 4a0e 	vldr	s8, [r1, #-56]	@ 0xffffffc8
 80106a0:	edd0 7a00 	vldr	s15, [r0]
 80106a4:	f812 0c10 	ldrb.w	r0, [r2, #-16]
 80106a8:	ee67 7aa2 	vmul.f32	s15, s15, s5
 80106ac:	ed51 4a0d 	vldr	s9, [r1, #-52]	@ 0xffffffcc
 80106b0:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 80106b4:	ed11 5a0c 	vldr	s10, [r1, #-48]	@ 0xffffffd0
 80106b8:	ed51 5a0b 	vldr	s11, [r1, #-44]	@ 0xffffffd4
 80106bc:	edd0 2a00 	vldr	s5, [r0]
 80106c0:	f812 0c0e 	ldrb.w	r0, [r2, #-14]
 80106c4:	eee2 7a83 	vfma.f32	s15, s5, s6
 80106c8:	ed11 6a0a 	vldr	s12, [r1, #-40]	@ 0xffffffd8
 80106cc:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 80106d0:	ed51 6a09 	vldr	s13, [r1, #-36]	@ 0xffffffdc
 80106d4:	ed90 3a00 	vldr	s6, [r0]
 80106d8:	f812 0c0d 	ldrb.w	r0, [r2, #-13]
 80106dc:	eee3 7a04 	vfma.f32	s15, s6, s8
 80106e0:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 80106e4:	ed90 4a00 	vldr	s8, [r0]
 80106e8:	f812 0c0c 	ldrb.w	r0, [r2, #-12]
 80106ec:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 80106f0:	eee4 7a24 	vfma.f32	s15, s8, s9
 80106f4:	edd0 4a00 	vldr	s9, [r0]
 80106f8:	f812 0c0b 	ldrb.w	r0, [r2, #-11]
 80106fc:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8010700:	eee4 7a85 	vfma.f32	s15, s9, s10
 8010704:	ed90 5a00 	vldr	s10, [r0]
 8010708:	f812 0c0a 	ldrb.w	r0, [r2, #-10]
 801070c:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8010710:	eee5 7a25 	vfma.f32	s15, s10, s11
 8010714:	edd0 5a00 	vldr	s11, [r0]
 8010718:	f812 0c09 	ldrb.w	r0, [r2, #-9]
 801071c:	42a2      	cmp	r2, r4
 801071e:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8010722:	eee5 7a86 	vfma.f32	s15, s11, s12
 8010726:	ed90 6a00 	vldr	s12, [r0]
 801072a:	eee6 7a26 	vfma.f32	s15, s12, s13
 801072e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010732:	d1a9      	bne.n	8010688 <forward_lite_dense_if32of32wf32_lut8+0x178>
 8010734:	9a08      	ldr	r2, [sp, #32]
 8010736:	4413      	add	r3, r2
 8010738:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801073a:	4572      	cmp	r2, lr
 801073c:	f4bf af54 	bcs.w	80105e8 <forward_lite_dense_if32of32wf32_lut8+0xd8>
 8010740:	7819      	ldrb	r1, [r3, #0]
 8010742:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8010746:	edd1 7a00 	vldr	s15, [r1]
 801074a:	4611      	mov	r1, r2
 801074c:	ecf1 6a01 	vldmia	r1!, {s13}
 8010750:	458a      	cmp	sl, r1
 8010752:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010756:	d963      	bls.n	8010820 <forward_lite_dense_if32of32wf32_lut8+0x310>
 8010758:	7859      	ldrb	r1, [r3, #1]
 801075a:	edd2 6a01 	vldr	s13, [r2, #4]
 801075e:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8010762:	edd1 7a00 	vldr	s15, [r1]
 8010766:	f102 0108 	add.w	r1, r2, #8
 801076a:	458a      	cmp	sl, r1
 801076c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010770:	d956      	bls.n	8010820 <forward_lite_dense_if32of32wf32_lut8+0x310>
 8010772:	7899      	ldrb	r1, [r3, #2]
 8010774:	edd2 6a02 	vldr	s13, [r2, #8]
 8010778:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 801077c:	edd1 7a00 	vldr	s15, [r1]
 8010780:	f102 010c 	add.w	r1, r2, #12
 8010784:	458a      	cmp	sl, r1
 8010786:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801078a:	d949      	bls.n	8010820 <forward_lite_dense_if32of32wf32_lut8+0x310>
 801078c:	78d9      	ldrb	r1, [r3, #3]
 801078e:	edd2 6a03 	vldr	s13, [r2, #12]
 8010792:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8010796:	edd1 7a00 	vldr	s15, [r1]
 801079a:	f102 0110 	add.w	r1, r2, #16
 801079e:	458a      	cmp	sl, r1
 80107a0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80107a4:	d93c      	bls.n	8010820 <forward_lite_dense_if32of32wf32_lut8+0x310>
 80107a6:	7919      	ldrb	r1, [r3, #4]
 80107a8:	edd2 6a04 	vldr	s13, [r2, #16]
 80107ac:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 80107b0:	edd1 7a00 	vldr	s15, [r1]
 80107b4:	f102 0114 	add.w	r1, r2, #20
 80107b8:	458a      	cmp	sl, r1
 80107ba:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80107be:	d92f      	bls.n	8010820 <forward_lite_dense_if32of32wf32_lut8+0x310>
 80107c0:	7959      	ldrb	r1, [r3, #5]
 80107c2:	edd2 6a05 	vldr	s13, [r2, #20]
 80107c6:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 80107ca:	edd1 7a00 	vldr	s15, [r1]
 80107ce:	f102 0118 	add.w	r1, r2, #24
 80107d2:	458a      	cmp	sl, r1
 80107d4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80107d8:	d922      	bls.n	8010820 <forward_lite_dense_if32of32wf32_lut8+0x310>
 80107da:	7999      	ldrb	r1, [r3, #6]
 80107dc:	edd2 6a06 	vldr	s13, [r2, #24]
 80107e0:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 80107e4:	edd1 7a00 	vldr	s15, [r1]
 80107e8:	f102 011c 	add.w	r1, r2, #28
 80107ec:	458a      	cmp	sl, r1
 80107ee:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80107f2:	d915      	bls.n	8010820 <forward_lite_dense_if32of32wf32_lut8+0x310>
 80107f4:	79d9      	ldrb	r1, [r3, #7]
 80107f6:	edd2 6a07 	vldr	s13, [r2, #28]
 80107fa:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 80107fe:	edd1 7a00 	vldr	s15, [r1]
 8010802:	f102 0120 	add.w	r1, r2, #32
 8010806:	458a      	cmp	sl, r1
 8010808:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801080c:	d908      	bls.n	8010820 <forward_lite_dense_if32of32wf32_lut8+0x310>
 801080e:	7a19      	ldrb	r1, [r3, #8]
 8010810:	edd2 7a08 	vldr	s15, [r2, #32]
 8010814:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8010818:	edd1 6a00 	vldr	s13, [r1]
 801081c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010820:	9901      	ldr	r1, [sp, #4]
 8010822:	1a8a      	subs	r2, r1, r2
 8010824:	eb03 0292 	add.w	r2, r3, r2, lsr #2
 8010828:	1c53      	adds	r3, r2, #1
 801082a:	e6dd      	b.n	80105e8 <forward_lite_dense_if32of32wf32_lut8+0xd8>
 801082c:	3ffffff8 	.word	0x3ffffff8
 8010830:	00000000 	.word	0x00000000
 8010834:	eeb0 7a63 	vmov.f32	s14, s7
 8010838:	465a      	mov	r2, fp
 801083a:	461f      	mov	r7, r3
 801083c:	4610      	mov	r0, r2
 801083e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8010842:	ecf0 7a01 	vldmia	r0!, {s15}
 8010846:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 801084a:	edd1 6a00 	vldr	s13, [r1]
 801084e:	9900      	ldr	r1, [sp, #0]
 8010850:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010854:	4288      	cmp	r0, r1
 8010856:	f200 80f7 	bhi.w	8010a48 <forward_lite_dense_if32of32wf32_lut8+0x538>
 801085a:	9904      	ldr	r1, [sp, #16]
 801085c:	f103 0411 	add.w	r4, r3, #17
 8010860:	3309      	adds	r3, #9
 8010862:	1a8e      	subs	r6, r1, r2
 8010864:	3224      	adds	r2, #36	@ 0x24
 8010866:	0976      	lsrs	r6, r6, #5
 8010868:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 801086c:	f813 1c07 	ldrb.w	r1, [r3, #-7]
 8010870:	3308      	adds	r3, #8
 8010872:	ed52 2a07 	vldr	s5, [r2, #-28]	@ 0xffffffe4
 8010876:	3220      	adds	r2, #32
 8010878:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 801087c:	ed12 3a10 	vldr	s6, [r2, #-64]	@ 0xffffffc0
 8010880:	ed12 4a0e 	vldr	s8, [r2, #-56]	@ 0xffffffc8
 8010884:	edd1 7a00 	vldr	s15, [r1]
 8010888:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 801088c:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8010890:	ed52 4a0d 	vldr	s9, [r2, #-52]	@ 0xffffffcc
 8010894:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8010898:	ed12 5a0c 	vldr	s10, [r2, #-48]	@ 0xffffffd0
 801089c:	ed52 5a0b 	vldr	s11, [r2, #-44]	@ 0xffffffd4
 80108a0:	edd1 2a00 	vldr	s5, [r1]
 80108a4:	f813 1c0e 	ldrb.w	r1, [r3, #-14]
 80108a8:	eee2 7a83 	vfma.f32	s15, s5, s6
 80108ac:	ed12 6a0a 	vldr	s12, [r2, #-40]	@ 0xffffffd8
 80108b0:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 80108b4:	ed52 6a09 	vldr	s13, [r2, #-36]	@ 0xffffffdc
 80108b8:	ed91 3a00 	vldr	s6, [r1]
 80108bc:	f813 1c0d 	ldrb.w	r1, [r3, #-13]
 80108c0:	eee3 7a04 	vfma.f32	s15, s6, s8
 80108c4:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 80108c8:	ed91 4a00 	vldr	s8, [r1]
 80108cc:	f813 1c0c 	ldrb.w	r1, [r3, #-12]
 80108d0:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 80108d4:	eee4 7a24 	vfma.f32	s15, s8, s9
 80108d8:	edd1 4a00 	vldr	s9, [r1]
 80108dc:	f813 1c0b 	ldrb.w	r1, [r3, #-11]
 80108e0:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 80108e4:	eee4 7a85 	vfma.f32	s15, s9, s10
 80108e8:	ed91 5a00 	vldr	s10, [r1]
 80108ec:	f813 1c0a 	ldrb.w	r1, [r3, #-10]
 80108f0:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 80108f4:	eee5 7a25 	vfma.f32	s15, s10, s11
 80108f8:	edd1 5a00 	vldr	s11, [r1]
 80108fc:	f813 1c09 	ldrb.w	r1, [r3, #-9]
 8010900:	42a3      	cmp	r3, r4
 8010902:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8010906:	eee5 7a86 	vfma.f32	s15, s11, s12
 801090a:	ed91 6a00 	vldr	s12, [r1]
 801090e:	eee6 7a26 	vfma.f32	s15, s12, s13
 8010912:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010916:	d1a9      	bne.n	801086c <forward_lite_dense_if32of32wf32_lut8+0x35c>
 8010918:	3601      	adds	r6, #1
 801091a:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
 801091e:	eb00 1046 	add.w	r0, r0, r6, lsl #5
 8010922:	4550      	cmp	r0, sl
 8010924:	f4bf ae60 	bcs.w	80105e8 <forward_lite_dense_if32of32wf32_lut8+0xd8>
 8010928:	781a      	ldrb	r2, [r3, #0]
 801092a:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 801092e:	edd2 7a00 	vldr	s15, [r2]
 8010932:	4602      	mov	r2, r0
 8010934:	ecf2 6a01 	vldmia	r2!, {s13}
 8010938:	4592      	cmp	sl, r2
 801093a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801093e:	d963      	bls.n	8010a08 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 8010940:	785a      	ldrb	r2, [r3, #1]
 8010942:	edd0 6a01 	vldr	s13, [r0, #4]
 8010946:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 801094a:	edd2 7a00 	vldr	s15, [r2]
 801094e:	f100 0208 	add.w	r2, r0, #8
 8010952:	4592      	cmp	sl, r2
 8010954:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010958:	d956      	bls.n	8010a08 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 801095a:	789a      	ldrb	r2, [r3, #2]
 801095c:	edd0 6a02 	vldr	s13, [r0, #8]
 8010960:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8010964:	edd2 7a00 	vldr	s15, [r2]
 8010968:	f100 020c 	add.w	r2, r0, #12
 801096c:	4592      	cmp	sl, r2
 801096e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010972:	d949      	bls.n	8010a08 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 8010974:	78da      	ldrb	r2, [r3, #3]
 8010976:	edd0 6a03 	vldr	s13, [r0, #12]
 801097a:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 801097e:	edd2 7a00 	vldr	s15, [r2]
 8010982:	f100 0210 	add.w	r2, r0, #16
 8010986:	4592      	cmp	sl, r2
 8010988:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801098c:	d93c      	bls.n	8010a08 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 801098e:	791a      	ldrb	r2, [r3, #4]
 8010990:	edd0 6a04 	vldr	s13, [r0, #16]
 8010994:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8010998:	edd2 7a00 	vldr	s15, [r2]
 801099c:	f100 0214 	add.w	r2, r0, #20
 80109a0:	4592      	cmp	sl, r2
 80109a2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80109a6:	d92f      	bls.n	8010a08 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 80109a8:	795a      	ldrb	r2, [r3, #5]
 80109aa:	edd0 6a05 	vldr	s13, [r0, #20]
 80109ae:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 80109b2:	edd2 7a00 	vldr	s15, [r2]
 80109b6:	f100 0218 	add.w	r2, r0, #24
 80109ba:	4596      	cmp	lr, r2
 80109bc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80109c0:	d922      	bls.n	8010a08 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 80109c2:	799a      	ldrb	r2, [r3, #6]
 80109c4:	edd0 6a06 	vldr	s13, [r0, #24]
 80109c8:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 80109cc:	edd2 7a00 	vldr	s15, [r2]
 80109d0:	f100 021c 	add.w	r2, r0, #28
 80109d4:	4596      	cmp	lr, r2
 80109d6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80109da:	d915      	bls.n	8010a08 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 80109dc:	79da      	ldrb	r2, [r3, #7]
 80109de:	edd0 6a07 	vldr	s13, [r0, #28]
 80109e2:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 80109e6:	edd2 7a00 	vldr	s15, [r2]
 80109ea:	f100 0220 	add.w	r2, r0, #32
 80109ee:	4596      	cmp	lr, r2
 80109f0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80109f4:	d908      	bls.n	8010a08 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 80109f6:	7a1a      	ldrb	r2, [r3, #8]
 80109f8:	edd0 7a08 	vldr	s15, [r0, #32]
 80109fc:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8010a00:	edd2 6a00 	vldr	s13, [r2]
 8010a04:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010a08:	9a01      	ldr	r2, [sp, #4]
 8010a0a:	1a10      	subs	r0, r2, r0
 8010a0c:	eb03 0090 	add.w	r0, r3, r0, lsr #2
 8010a10:	1c43      	adds	r3, r0, #1
 8010a12:	e5e9      	b.n	80105e8 <forward_lite_dense_if32of32wf32_lut8+0xd8>
 8010a14:	f813 1b01 	ldrb.w	r1, [r3], #1
 8010a18:	eddb 7a00 	vldr	s15, [fp]
 8010a1c:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8010a20:	9a07      	ldr	r2, [sp, #28]
 8010a22:	ed91 7a00 	vldr	s14, [r1]
 8010a26:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010a2a:	f813 1b01 	ldrb.w	r1, [r3], #1
 8010a2e:	ecf2 7a01 	vldmia	r2!, {s15}
 8010a32:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8010a36:	edd1 6a00 	vldr	s13, [r1]
 8010a3a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010a3e:	e6fc      	b.n	801083a <forward_lite_dense_if32of32wf32_lut8+0x32a>
 8010a40:	eeb0 7a63 	vmov.f32	s14, s7
 8010a44:	465a      	mov	r2, fp
 8010a46:	e7f0      	b.n	8010a2a <forward_lite_dense_if32of32wf32_lut8+0x51a>
 8010a48:	463b      	mov	r3, r7
 8010a4a:	e76a      	b.n	8010922 <forward_lite_dense_if32of32wf32_lut8+0x412>
 8010a4c:	465a      	mov	r2, fp
 8010a4e:	e674      	b.n	801073a <forward_lite_dense_if32of32wf32_lut8+0x22a>
 8010a50:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010a52:	1acb      	subs	r3, r1, r3
 8010a54:	461a      	mov	r2, r3
 8010a56:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8010a58:	ed92 7a00 	vldr	s14, [r2]
 8010a5c:	ecf0 7a01 	vldmia	r0!, {s15}
 8010a60:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010a64:	ece2 7a01 	vstmia	r2!, {s15}
 8010a68:	4291      	cmp	r1, r2
 8010a6a:	d1f5      	bne.n	8010a58 <forward_lite_dense_if32of32wf32_lut8+0x548>
 8010a6c:	e7f2      	b.n	8010a54 <forward_lite_dense_if32of32wf32_lut8+0x544>
 8010a6e:	bf00      	nop

08010a70 <forward_lite_nl_relu_if32of32>:
 8010a70:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8010a74:	4413      	add	r3, r2
 8010a76:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 8010a7a:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 8010a7e:	4291      	cmp	r1, r2
 8010a80:	d80f      	bhi.n	8010aa2 <forward_lite_nl_relu_if32of32+0x32>
 8010a82:	f10c 0104 	add.w	r1, ip, #4
 8010a86:	1d13      	adds	r3, r2, #4
 8010a88:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8010aa4 <forward_lite_nl_relu_if32of32+0x34>
 8010a8c:	eba2 020c 	sub.w	r2, r2, ip
 8010a90:	4408      	add	r0, r1
 8010a92:	ed73 7a01 	vldmdb	r3!, {s15}
 8010a96:	4293      	cmp	r3, r2
 8010a98:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8010a9c:	ed60 7a01 	vstmdb	r0!, {s15}
 8010aa0:	d1f7      	bne.n	8010a92 <forward_lite_nl_relu_if32of32+0x22>
 8010aa2:	4770      	bx	lr
 8010aa4:	00000000 	.word	0x00000000

08010aa8 <st_int8_copy>:
 8010aa8:	4288      	cmp	r0, r1
 8010aaa:	d010      	beq.n	8010ace <st_int8_copy+0x26>
 8010aac:	b17a      	cbz	r2, 8010ace <st_int8_copy+0x26>
 8010aae:	4288      	cmp	r0, r1
 8010ab0:	eb00 0302 	add.w	r3, r0, r2
 8010ab4:	d20c      	bcs.n	8010ad0 <st_int8_copy+0x28>
 8010ab6:	428b      	cmp	r3, r1
 8010ab8:	d90a      	bls.n	8010ad0 <st_int8_copy+0x28>
 8010aba:	4283      	cmp	r3, r0
 8010abc:	440a      	add	r2, r1
 8010abe:	d906      	bls.n	8010ace <st_int8_copy+0x26>
 8010ac0:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 8010ac4:	4283      	cmp	r3, r0
 8010ac6:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8010aca:	d1f9      	bne.n	8010ac0 <st_int8_copy+0x18>
 8010acc:	4770      	bx	lr
 8010ace:	4770      	bx	lr
 8010ad0:	078b      	lsls	r3, r1, #30
 8010ad2:	d102      	bne.n	8010ada <st_int8_copy+0x32>
 8010ad4:	e008      	b.n	8010ae8 <st_int8_copy+0x40>
 8010ad6:	2a00      	cmp	r2, #0
 8010ad8:	d04c      	beq.n	8010b74 <st_int8_copy+0xcc>
 8010ada:	f910 3b01 	ldrsb.w	r3, [r0], #1
 8010ade:	3a01      	subs	r2, #1
 8010ae0:	f801 3b01 	strb.w	r3, [r1], #1
 8010ae4:	078b      	lsls	r3, r1, #30
 8010ae6:	d1f6      	bne.n	8010ad6 <st_int8_copy+0x2e>
 8010ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010aec:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 8010af0:	d05d      	beq.n	8010bae <st_int8_copy+0x106>
 8010af2:	ea41 0300 	orr.w	r3, r1, r0
 8010af6:	075b      	lsls	r3, r3, #29
 8010af8:	d13d      	bne.n	8010b76 <st_int8_copy+0xce>
 8010afa:	f1be 0f01 	cmp.w	lr, #1
 8010afe:	d03a      	beq.n	8010b76 <st_int8_copy+0xce>
 8010b00:	f100 0310 	add.w	r3, r0, #16
 8010b04:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8010b08:	f101 0c10 	add.w	ip, r1, #16
 8010b0c:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 8010b10:	3310      	adds	r3, #16
 8010b12:	f10c 0c10 	add.w	ip, ip, #16
 8010b16:	ed13 6b08 	vldr	d6, [r3, #-32]	@ 0xffffffe0
 8010b1a:	ed13 7b06 	vldr	d7, [r3, #-24]	@ 0xffffffe8
 8010b1e:	4573      	cmp	r3, lr
 8010b20:	ed0c 6b08 	vstr	d6, [ip, #-32]	@ 0xffffffe0
 8010b24:	ed0c 7b06 	vstr	d7, [ip, #-24]	@ 0xffffffe8
 8010b28:	d1f2      	bne.n	8010b10 <st_int8_copy+0x68>
 8010b2a:	f3c2 0381 	ubfx	r3, r2, #2, #2
 8010b2e:	4421      	add	r1, r4
 8010b30:	4420      	add	r0, r4
 8010b32:	f002 0203 	and.w	r2, r2, #3
 8010b36:	b16b      	cbz	r3, 8010b54 <st_int8_copy+0xac>
 8010b38:	6804      	ldr	r4, [r0, #0]
 8010b3a:	600c      	str	r4, [r1, #0]
 8010b3c:	1e5c      	subs	r4, r3, #1
 8010b3e:	d005      	beq.n	8010b4c <st_int8_copy+0xa4>
 8010b40:	6845      	ldr	r5, [r0, #4]
 8010b42:	2c01      	cmp	r4, #1
 8010b44:	604d      	str	r5, [r1, #4]
 8010b46:	d001      	beq.n	8010b4c <st_int8_copy+0xa4>
 8010b48:	6884      	ldr	r4, [r0, #8]
 8010b4a:	608c      	str	r4, [r1, #8]
 8010b4c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8010b50:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8010b54:	b162      	cbz	r2, 8010b70 <st_int8_copy+0xc8>
 8010b56:	f990 3000 	ldrsb.w	r3, [r0]
 8010b5a:	3a01      	subs	r2, #1
 8010b5c:	700b      	strb	r3, [r1, #0]
 8010b5e:	d007      	beq.n	8010b70 <st_int8_copy+0xc8>
 8010b60:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8010b64:	2a01      	cmp	r2, #1
 8010b66:	704b      	strb	r3, [r1, #1]
 8010b68:	d002      	beq.n	8010b70 <st_int8_copy+0xc8>
 8010b6a:	f990 3002 	ldrsb.w	r3, [r0, #2]
 8010b6e:	708b      	strb	r3, [r1, #2]
 8010b70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b74:	4770      	bx	lr
 8010b76:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8010b7a:	460b      	mov	r3, r1
 8010b7c:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 8010b80:	4684      	mov	ip, r0
 8010b82:	f8dc 8000 	ldr.w	r8, [ip]
 8010b86:	3310      	adds	r3, #16
 8010b88:	f8dc 7004 	ldr.w	r7, [ip, #4]
 8010b8c:	f10c 0c10 	add.w	ip, ip, #16
 8010b90:	f85c 6c08 	ldr.w	r6, [ip, #-8]
 8010b94:	f85c 5c04 	ldr.w	r5, [ip, #-4]
 8010b98:	f843 8c10 	str.w	r8, [r3, #-16]
 8010b9c:	f843 7c0c 	str.w	r7, [r3, #-12]
 8010ba0:	f843 6c08 	str.w	r6, [r3, #-8]
 8010ba4:	f843 5c04 	str.w	r5, [r3, #-4]
 8010ba8:	459e      	cmp	lr, r3
 8010baa:	d1ea      	bne.n	8010b82 <st_int8_copy+0xda>
 8010bac:	e7bd      	b.n	8010b2a <st_int8_copy+0x82>
 8010bae:	0893      	lsrs	r3, r2, #2
 8010bb0:	f002 0203 	and.w	r2, r2, #3
 8010bb4:	e7bf      	b.n	8010b36 <st_int8_copy+0x8e>
 8010bb6:	bf00      	nop

08010bb8 <ai_array_to_buffer_fmt>:
 8010bb8:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8010bbc:	2b02      	cmp	r3, #2
 8010bbe:	d053      	beq.n	8010c68 <ai_array_to_buffer_fmt+0xb0>
 8010bc0:	f020 437e 	bic.w	r3, r0, #4261412864	@ 0xfe000000
 8010bc4:	4a2b      	ldr	r2, [pc, #172]	@ (8010c74 <ai_array_to_buffer_fmt+0xbc>)
 8010bc6:	4293      	cmp	r3, r2
 8010bc8:	d010      	beq.n	8010bec <ai_array_to_buffer_fmt+0x34>
 8010bca:	dc21      	bgt.n	8010c10 <ai_array_to_buffer_fmt+0x58>
 8010bcc:	4a2a      	ldr	r2, [pc, #168]	@ (8010c78 <ai_array_to_buffer_fmt+0xc0>)
 8010bce:	4293      	cmp	r3, r2
 8010bd0:	d00c      	beq.n	8010bec <ai_array_to_buffer_fmt+0x34>
 8010bd2:	dd0f      	ble.n	8010bf4 <ai_array_to_buffer_fmt+0x3c>
 8010bd4:	4a29      	ldr	r2, [pc, #164]	@ (8010c7c <ai_array_to_buffer_fmt+0xc4>)
 8010bd6:	4293      	cmp	r3, r2
 8010bd8:	d008      	beq.n	8010bec <ai_array_to_buffer_fmt+0x34>
 8010bda:	f502 32fa 	add.w	r2, r2, #128000	@ 0x1f400
 8010bde:	4293      	cmp	r3, r2
 8010be0:	d004      	beq.n	8010bec <ai_array_to_buffer_fmt+0x34>
 8010be2:	4a27      	ldr	r2, [pc, #156]	@ (8010c80 <ai_array_to_buffer_fmt+0xc8>)
 8010be4:	4293      	cmp	r3, r2
 8010be6:	bf0c      	ite	eq
 8010be8:	4613      	moveq	r3, r2
 8010bea:	2340      	movne	r3, #64	@ 0x40
 8010bec:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8010bf0:	4318      	orrs	r0, r3
 8010bf2:	4770      	bx	lr
 8010bf4:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8010bf8:	4293      	cmp	r3, r2
 8010bfa:	d0f7      	beq.n	8010bec <ai_array_to_buffer_fmt+0x34>
 8010bfc:	dd2a      	ble.n	8010c54 <ai_array_to_buffer_fmt+0x9c>
 8010bfe:	4a21      	ldr	r2, [pc, #132]	@ (8010c84 <ai_array_to_buffer_fmt+0xcc>)
 8010c00:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8010c04:	4293      	cmp	r3, r2
 8010c06:	bf0c      	ite	eq
 8010c08:	4613      	moveq	r3, r2
 8010c0a:	2340      	movne	r3, #64	@ 0x40
 8010c0c:	4318      	orrs	r0, r3
 8010c0e:	4770      	bx	lr
 8010c10:	4a1d      	ldr	r2, [pc, #116]	@ (8010c88 <ai_array_to_buffer_fmt+0xd0>)
 8010c12:	4293      	cmp	r3, r2
 8010c14:	d0ea      	beq.n	8010bec <ai_array_to_buffer_fmt+0x34>
 8010c16:	dd0f      	ble.n	8010c38 <ai_array_to_buffer_fmt+0x80>
 8010c18:	4a1c      	ldr	r2, [pc, #112]	@ (8010c8c <ai_array_to_buffer_fmt+0xd4>)
 8010c1a:	4293      	cmp	r3, r2
 8010c1c:	d0e6      	beq.n	8010bec <ai_array_to_buffer_fmt+0x34>
 8010c1e:	f502 027e 	add.w	r2, r2, #16646144	@ 0xfe0000
 8010c22:	4293      	cmp	r3, r2
 8010c24:	d0e2      	beq.n	8010bec <ai_array_to_buffer_fmt+0x34>
 8010c26:	4a1a      	ldr	r2, [pc, #104]	@ (8010c90 <ai_array_to_buffer_fmt+0xd8>)
 8010c28:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8010c2c:	4293      	cmp	r3, r2
 8010c2e:	bf0c      	ite	eq
 8010c30:	4613      	moveq	r3, r2
 8010c32:	2340      	movne	r3, #64	@ 0x40
 8010c34:	4318      	orrs	r0, r3
 8010c36:	4770      	bx	lr
 8010c38:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8010c3c:	4293      	cmp	r3, r2
 8010c3e:	d0d5      	beq.n	8010bec <ai_array_to_buffer_fmt+0x34>
 8010c40:	3207      	adds	r2, #7
 8010c42:	4293      	cmp	r3, r2
 8010c44:	d0d2      	beq.n	8010bec <ai_array_to_buffer_fmt+0x34>
 8010c46:	f2a2 3287 	subw	r2, r2, #903	@ 0x387
 8010c4a:	4293      	cmp	r3, r2
 8010c4c:	bf0c      	ite	eq
 8010c4e:	4613      	moveq	r3, r2
 8010c50:	2340      	movne	r3, #64	@ 0x40
 8010c52:	e7cb      	b.n	8010bec <ai_array_to_buffer_fmt+0x34>
 8010c54:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8010c58:	4293      	cmp	r3, r2
 8010c5a:	d0c7      	beq.n	8010bec <ai_array_to_buffer_fmt+0x34>
 8010c5c:	3280      	adds	r2, #128	@ 0x80
 8010c5e:	4293      	cmp	r3, r2
 8010c60:	bf0c      	ite	eq
 8010c62:	4613      	moveq	r3, r2
 8010c64:	2340      	movne	r3, #64	@ 0x40
 8010c66:	e7c1      	b.n	8010bec <ai_array_to_buffer_fmt+0x34>
 8010c68:	4b0a      	ldr	r3, [pc, #40]	@ (8010c94 <ai_array_to_buffer_fmt+0xdc>)
 8010c6a:	4003      	ands	r3, r0
 8010c6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8010c70:	e7bc      	b.n	8010bec <ai_array_to_buffer_fmt+0x34>
 8010c72:	bf00      	nop
 8010c74:	00840040 	.word	0x00840040
 8010c78:	00040840 	.word	0x00040840
 8010c7c:	00041040 	.word	0x00041040
 8010c80:	0004084f 	.word	0x0004084f
 8010c84:	00040447 	.word	0x00040447
 8010c88:	00840840 	.word	0x00840840
 8010c8c:	00841040 	.word	0x00841040
 8010c90:	0084084f 	.word	0x0084084f
 8010c94:	00803fff 	.word	0x00803fff

08010c98 <ai_array_get_byte_size>:
 8010c98:	b319      	cbz	r1, 8010ce2 <ai_array_get_byte_size+0x4a>
 8010c9a:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8010c9e:	f3c0 4243 	ubfx	r2, r0, #17, #4
 8010ca2:	f3c0 5c41 	ubfx	ip, r0, #21, #2
 8010ca6:	11c0      	asrs	r0, r0, #7
 8010ca8:	fb01 f303 	mul.w	r3, r1, r3
 8010cac:	2a04      	cmp	r2, #4
 8010cae:	f103 0307 	add.w	r3, r3, #7
 8010cb2:	f023 0307 	bic.w	r3, r3, #7
 8010cb6:	fa23 f10c 	lsr.w	r1, r3, ip
 8010cba:	d00b      	beq.n	8010cd4 <ai_array_get_byte_size+0x3c>
 8010cbc:	2a08      	cmp	r2, #8
 8010cbe:	d002      	beq.n	8010cc6 <ai_array_get_byte_size+0x2e>
 8010cc0:	3107      	adds	r1, #7
 8010cc2:	08c8      	lsrs	r0, r1, #3
 8010cc4:	4770      	bx	lr
 8010cc6:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8010cca:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8010cce:	3107      	adds	r1, #7
 8010cd0:	08c8      	lsrs	r0, r1, #3
 8010cd2:	4770      	bx	lr
 8010cd4:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8010cd8:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 8010cdc:	3107      	adds	r1, #7
 8010cde:	08c8      	lsrs	r0, r1, #3
 8010ce0:	4770      	bx	lr
 8010ce2:	4608      	mov	r0, r1
 8010ce4:	4770      	bx	lr
 8010ce6:	bf00      	nop

08010ce8 <ai_version_get>:
 8010ce8:	0212      	lsls	r2, r2, #8
 8010cea:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8010cee:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 8010cf2:	4770      	bx	lr

08010cf4 <lite_bilinear_if32of32_kernel>:
 8010cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010cf6:	9d05      	ldr	r5, [sp, #20]
 8010cf8:	b352      	cbz	r2, 8010d50 <lite_bilinear_if32of32_kernel+0x5c>
 8010cfa:	f04f 0c00 	mov.w	ip, #0
 8010cfe:	edd5 4a02 	vldr	s9, [r5, #8]
 8010d02:	f10c 0c01 	add.w	ip, ip, #1
 8010d06:	ed95 5a01 	vldr	s10, [r5, #4]
 8010d0a:	ed90 6a00 	vldr	s12, [r0]
 8010d0e:	4562      	cmp	r2, ip
 8010d10:	edd5 5a00 	vldr	s11, [r5]
 8010d14:	edd5 6a03 	vldr	s13, [r5, #12]
 8010d18:	e9d3 4600 	ldrd	r4, r6, [r3]
 8010d1c:	eb00 0786 	add.w	r7, r0, r6, lsl #2
 8010d20:	eb00 0e84 	add.w	lr, r0, r4, lsl #2
 8010d24:	4434      	add	r4, r6
 8010d26:	edd7 7a00 	vldr	s15, [r7]
 8010d2a:	ed9e 7a00 	vldr	s14, [lr]
 8010d2e:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8010d32:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8010d36:	f100 0004 	add.w	r0, r0, #4
 8010d3a:	eee5 7a07 	vfma.f32	s15, s10, s14
 8010d3e:	ed94 7a00 	vldr	s14, [r4]
 8010d42:	eee5 7a86 	vfma.f32	s15, s11, s12
 8010d46:	eee6 7a87 	vfma.f32	s15, s13, s14
 8010d4a:	ece1 7a01 	vstmia	r1!, {s15}
 8010d4e:	d1d6      	bne.n	8010cfe <lite_bilinear_if32of32_kernel+0xa>
 8010d50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010d52:	bf00      	nop

08010d54 <lite_bilinear_is8os8_kernel>:
 8010d54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010d58:	9c07      	ldr	r4, [sp, #28]
 8010d5a:	2a00      	cmp	r2, #0
 8010d5c:	d04b      	beq.n	8010df6 <lite_bilinear_is8os8_kernel+0xa2>
 8010d5e:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 8010d62:	eb01 0e02 	add.w	lr, r1, r2
 8010d66:	f100 3cff 	add.w	ip, r0, #4294967295
 8010d6a:	f1c0 0501 	rsb	r5, r0, #1
 8010d6e:	685f      	ldr	r7, [r3, #4]
 8010d70:	eb05 060c 	add.w	r6, r5, ip
 8010d74:	681a      	ldr	r2, [r3, #0]
 8010d76:	eb00 0807 	add.w	r8, r0, r7
 8010d7a:	edd4 3a02 	vldr	s7, [r4, #8]
 8010d7e:	4402      	add	r2, r0
 8010d80:	ed94 4a01 	vldr	s8, [r4, #4]
 8010d84:	f918 8006 	ldrsb.w	r8, [r8, r6]
 8010d88:	f91c 9f01 	ldrsb.w	r9, [ip, #1]!
 8010d8c:	ee07 8a90 	vmov	s15, r8
 8010d90:	f912 8006 	ldrsb.w	r8, [r2, r6]
 8010d94:	ee06 9a90 	vmov	s13, r9
 8010d98:	443a      	add	r2, r7
 8010d9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010d9e:	ee06 8a10 	vmov	s12, r8
 8010da2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8010da6:	edd4 4a00 	vldr	s9, [r4]
 8010daa:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8010dae:	5792      	ldrsb	r2, [r2, r6]
 8010db0:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8010db4:	ed94 5a03 	vldr	s10, [r4, #12]
 8010db8:	ee07 2a10 	vmov	s14, r2
 8010dbc:	eee4 7a06 	vfma.f32	s15, s8, s12
 8010dc0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010dc4:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8010dc8:	eee5 7a07 	vfma.f32	s15, s10, s14
 8010dcc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010dd0:	ee37 7aa5 	vadd.f32	s14, s15, s11
 8010dd4:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8010dd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ddc:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8010de0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010de4:	dd09      	ble.n	8010dfa <lite_bilinear_is8os8_kernel+0xa6>
 8010de6:	ee17 2a10 	vmov	r2, s14
 8010dea:	f302 0207 	ssat	r2, #8, r2
 8010dee:	f801 2b01 	strb.w	r2, [r1], #1
 8010df2:	4571      	cmp	r1, lr
 8010df4:	d1bb      	bne.n	8010d6e <lite_bilinear_is8os8_kernel+0x1a>
 8010df6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010dfa:	ee17 2a90 	vmov	r2, s15
 8010dfe:	f302 0207 	ssat	r2, #8, r2
 8010e02:	f801 2b01 	strb.w	r2, [r1], #1
 8010e06:	4571      	cmp	r1, lr
 8010e08:	d1b1      	bne.n	8010d6e <lite_bilinear_is8os8_kernel+0x1a>
 8010e0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010e0e:	bf00      	nop

08010e10 <lite_bilinear_iu8ou8_kernel>:
 8010e10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010e14:	9c07      	ldr	r4, [sp, #28]
 8010e16:	2a00      	cmp	r2, #0
 8010e18:	d042      	beq.n	8010ea0 <lite_bilinear_iu8ou8_kernel+0x90>
 8010e1a:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 8010e1e:	eb01 0e02 	add.w	lr, r1, r2
 8010e22:	f100 3cff 	add.w	ip, r0, #4294967295
 8010e26:	f1c0 0501 	rsb	r5, r0, #1
 8010e2a:	eb05 060c 	add.w	r6, r5, ip
 8010e2e:	f81c 2f01 	ldrb.w	r2, [ip, #1]!
 8010e32:	eef0 7a44 	vmov.f32	s15, s8
 8010e36:	edd4 6a00 	vldr	s13, [r4]
 8010e3a:	ee07 2a10 	vmov	s14, r2
 8010e3e:	681a      	ldr	r2, [r3, #0]
 8010e40:	685f      	ldr	r7, [r3, #4]
 8010e42:	4402      	add	r2, r0
 8010e44:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8010e48:	eb00 0807 	add.w	r8, r0, r7
 8010e4c:	edd4 4a01 	vldr	s9, [r4, #4]
 8010e50:	f812 9006 	ldrb.w	r9, [r2, r6]
 8010e54:	443a      	add	r2, r7
 8010e56:	eee6 7a87 	vfma.f32	s15, s13, s14
 8010e5a:	f818 8006 	ldrb.w	r8, [r8, r6]
 8010e5e:	ee06 9a10 	vmov	s12, r9
 8010e62:	ed94 5a02 	vldr	s10, [r4, #8]
 8010e66:	ee06 8a90 	vmov	s13, r8
 8010e6a:	5d92      	ldrb	r2, [r2, r6]
 8010e6c:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8010e70:	edd4 5a03 	vldr	s11, [r4, #12]
 8010e74:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8010e78:	ee07 2a10 	vmov	s14, r2
 8010e7c:	eee4 7a86 	vfma.f32	s15, s9, s12
 8010e80:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010e84:	eee5 7a26 	vfma.f32	s15, s10, s13
 8010e88:	eee5 7a87 	vfma.f32	s15, s11, s14
 8010e8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010e90:	ee17 2a90 	vmov	r2, s15
 8010e94:	f382 0208 	usat	r2, #8, r2
 8010e98:	f801 2b01 	strb.w	r2, [r1], #1
 8010e9c:	4571      	cmp	r1, lr
 8010e9e:	d1c4      	bne.n	8010e2a <lite_bilinear_iu8ou8_kernel+0x1a>
 8010ea0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08010ea4 <lite_bilinear_is16os16_kernel>:
 8010ea4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010ea8:	9d07      	ldr	r5, [sp, #28]
 8010eaa:	2a00      	cmp	r2, #0
 8010eac:	d04e      	beq.n	8010f4c <lite_bilinear_is16os16_kernel+0xa8>
 8010eae:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 8010eb2:	f1a0 0e02 	sub.w	lr, r0, #2
 8010eb6:	f04f 0c00 	mov.w	ip, #0
 8010eba:	ed95 7a02 	vldr	s14, [r5, #8]
 8010ebe:	ed95 4a01 	vldr	s8, [r5, #4]
 8010ec2:	f93e 9f02 	ldrsh.w	r9, [lr, #2]!
 8010ec6:	edd5 4a00 	vldr	s9, [r5]
 8010eca:	ee06 9a90 	vmov	s13, r9
 8010ece:	ed95 5a03 	vldr	s10, [r5, #12]
 8010ed2:	e9d3 4600 	ldrd	r4, r6, [r3]
 8010ed6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8010eda:	eb06 080c 	add.w	r8, r6, ip
 8010ede:	eb04 070c 	add.w	r7, r4, ip
 8010ee2:	4434      	add	r4, r6
 8010ee4:	f930 6018 	ldrsh.w	r6, [r0, r8, lsl #1]
 8010ee8:	4464      	add	r4, ip
 8010eea:	ee07 6a90 	vmov	s15, r6
 8010eee:	f930 6017 	ldrsh.w	r6, [r0, r7, lsl #1]
 8010ef2:	f930 4014 	ldrsh.w	r4, [r0, r4, lsl #1]
 8010ef6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010efa:	ee06 6a10 	vmov	s12, r6
 8010efe:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8010f02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010f06:	ee07 4a10 	vmov	s14, r4
 8010f0a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010f0e:	eee4 7a06 	vfma.f32	s15, s8, s12
 8010f12:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8010f16:	eee5 7a07 	vfma.f32	s15, s10, s14
 8010f1a:	ee37 7aa5 	vadd.f32	s14, s15, s11
 8010f1e:	ee77 6ae5 	vsub.f32	s13, s15, s11
 8010f22:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010f26:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8010f2a:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8010f2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f32:	bfcc      	ite	gt
 8010f34:	ee17 4a10 	vmovgt	r4, s14
 8010f38:	ee16 4a90 	vmovle	r4, s13
 8010f3c:	f304 040f 	ssat	r4, #16, r4
 8010f40:	f10c 0c01 	add.w	ip, ip, #1
 8010f44:	f821 4b02 	strh.w	r4, [r1], #2
 8010f48:	4562      	cmp	r2, ip
 8010f4a:	d1b6      	bne.n	8010eba <lite_bilinear_is16os16_kernel+0x16>
 8010f4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08010f50 <lite_bilinear_iu16ou16_kernel>:
 8010f50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f54:	9d06      	ldr	r5, [sp, #24]
 8010f56:	2a00      	cmp	r2, #0
 8010f58:	d042      	beq.n	8010fe0 <lite_bilinear_iu16ou16_kernel+0x90>
 8010f5a:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 8010f5e:	1e86      	subs	r6, r0, #2
 8010f60:	f04f 0e00 	mov.w	lr, #0
 8010f64:	f836 4f02 	ldrh.w	r4, [r6, #2]!
 8010f68:	eef0 7a44 	vmov.f32	s15, s8
 8010f6c:	edd5 6a00 	vldr	s13, [r5]
 8010f70:	ee07 4a10 	vmov	s14, r4
 8010f74:	681c      	ldr	r4, [r3, #0]
 8010f76:	685f      	ldr	r7, [r3, #4]
 8010f78:	eb04 080e 	add.w	r8, r4, lr
 8010f7c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8010f80:	eb07 0c0e 	add.w	ip, r7, lr
 8010f84:	edd5 4a01 	vldr	s9, [r5, #4]
 8010f88:	f830 8018 	ldrh.w	r8, [r0, r8, lsl #1]
 8010f8c:	443c      	add	r4, r7
 8010f8e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8010f92:	f830 701c 	ldrh.w	r7, [r0, ip, lsl #1]
 8010f96:	ee06 8a10 	vmov	s12, r8
 8010f9a:	4474      	add	r4, lr
 8010f9c:	ee06 7a90 	vmov	s13, r7
 8010fa0:	ed95 5a02 	vldr	s10, [r5, #8]
 8010fa4:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8010fa8:	f830 4014 	ldrh.w	r4, [r0, r4, lsl #1]
 8010fac:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8010fb0:	edd5 5a03 	vldr	s11, [r5, #12]
 8010fb4:	ee07 4a10 	vmov	s14, r4
 8010fb8:	eee4 7a86 	vfma.f32	s15, s9, s12
 8010fbc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010fc0:	eee5 7a26 	vfma.f32	s15, s10, s13
 8010fc4:	eee5 7a87 	vfma.f32	s15, s11, s14
 8010fc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010fcc:	ee17 ca90 	vmov	ip, s15
 8010fd0:	f38c 0c10 	usat	ip, #16, ip
 8010fd4:	f10e 0e01 	add.w	lr, lr, #1
 8010fd8:	f821 cb02 	strh.w	ip, [r1], #2
 8010fdc:	4572      	cmp	r2, lr
 8010fde:	d1c1      	bne.n	8010f64 <lite_bilinear_iu16ou16_kernel+0x14>
 8010fe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010fe4 <malloc>:
 8010fe4:	4b02      	ldr	r3, [pc, #8]	@ (8010ff0 <malloc+0xc>)
 8010fe6:	4601      	mov	r1, r0
 8010fe8:	6818      	ldr	r0, [r3, #0]
 8010fea:	f000 b825 	b.w	8011038 <_malloc_r>
 8010fee:	bf00      	nop
 8010ff0:	20000818 	.word	0x20000818

08010ff4 <sbrk_aligned>:
 8010ff4:	b570      	push	{r4, r5, r6, lr}
 8010ff6:	4e0f      	ldr	r6, [pc, #60]	@ (8011034 <sbrk_aligned+0x40>)
 8010ff8:	460c      	mov	r4, r1
 8010ffa:	6831      	ldr	r1, [r6, #0]
 8010ffc:	4605      	mov	r5, r0
 8010ffe:	b911      	cbnz	r1, 8011006 <sbrk_aligned+0x12>
 8011000:	f000 ff48 	bl	8011e94 <_sbrk_r>
 8011004:	6030      	str	r0, [r6, #0]
 8011006:	4621      	mov	r1, r4
 8011008:	4628      	mov	r0, r5
 801100a:	f000 ff43 	bl	8011e94 <_sbrk_r>
 801100e:	1c43      	adds	r3, r0, #1
 8011010:	d103      	bne.n	801101a <sbrk_aligned+0x26>
 8011012:	f04f 34ff 	mov.w	r4, #4294967295
 8011016:	4620      	mov	r0, r4
 8011018:	bd70      	pop	{r4, r5, r6, pc}
 801101a:	1cc4      	adds	r4, r0, #3
 801101c:	f024 0403 	bic.w	r4, r4, #3
 8011020:	42a0      	cmp	r0, r4
 8011022:	d0f8      	beq.n	8011016 <sbrk_aligned+0x22>
 8011024:	1a21      	subs	r1, r4, r0
 8011026:	4628      	mov	r0, r5
 8011028:	f000 ff34 	bl	8011e94 <_sbrk_r>
 801102c:	3001      	adds	r0, #1
 801102e:	d1f2      	bne.n	8011016 <sbrk_aligned+0x22>
 8011030:	e7ef      	b.n	8011012 <sbrk_aligned+0x1e>
 8011032:	bf00      	nop
 8011034:	20005c8c 	.word	0x20005c8c

08011038 <_malloc_r>:
 8011038:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801103c:	1ccd      	adds	r5, r1, #3
 801103e:	f025 0503 	bic.w	r5, r5, #3
 8011042:	3508      	adds	r5, #8
 8011044:	2d0c      	cmp	r5, #12
 8011046:	bf38      	it	cc
 8011048:	250c      	movcc	r5, #12
 801104a:	2d00      	cmp	r5, #0
 801104c:	4606      	mov	r6, r0
 801104e:	db01      	blt.n	8011054 <_malloc_r+0x1c>
 8011050:	42a9      	cmp	r1, r5
 8011052:	d904      	bls.n	801105e <_malloc_r+0x26>
 8011054:	230c      	movs	r3, #12
 8011056:	6033      	str	r3, [r6, #0]
 8011058:	2000      	movs	r0, #0
 801105a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801105e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011134 <_malloc_r+0xfc>
 8011062:	f000 f869 	bl	8011138 <__malloc_lock>
 8011066:	f8d8 3000 	ldr.w	r3, [r8]
 801106a:	461c      	mov	r4, r3
 801106c:	bb44      	cbnz	r4, 80110c0 <_malloc_r+0x88>
 801106e:	4629      	mov	r1, r5
 8011070:	4630      	mov	r0, r6
 8011072:	f7ff ffbf 	bl	8010ff4 <sbrk_aligned>
 8011076:	1c43      	adds	r3, r0, #1
 8011078:	4604      	mov	r4, r0
 801107a:	d158      	bne.n	801112e <_malloc_r+0xf6>
 801107c:	f8d8 4000 	ldr.w	r4, [r8]
 8011080:	4627      	mov	r7, r4
 8011082:	2f00      	cmp	r7, #0
 8011084:	d143      	bne.n	801110e <_malloc_r+0xd6>
 8011086:	2c00      	cmp	r4, #0
 8011088:	d04b      	beq.n	8011122 <_malloc_r+0xea>
 801108a:	6823      	ldr	r3, [r4, #0]
 801108c:	4639      	mov	r1, r7
 801108e:	4630      	mov	r0, r6
 8011090:	eb04 0903 	add.w	r9, r4, r3
 8011094:	f000 fefe 	bl	8011e94 <_sbrk_r>
 8011098:	4581      	cmp	r9, r0
 801109a:	d142      	bne.n	8011122 <_malloc_r+0xea>
 801109c:	6821      	ldr	r1, [r4, #0]
 801109e:	1a6d      	subs	r5, r5, r1
 80110a0:	4629      	mov	r1, r5
 80110a2:	4630      	mov	r0, r6
 80110a4:	f7ff ffa6 	bl	8010ff4 <sbrk_aligned>
 80110a8:	3001      	adds	r0, #1
 80110aa:	d03a      	beq.n	8011122 <_malloc_r+0xea>
 80110ac:	6823      	ldr	r3, [r4, #0]
 80110ae:	442b      	add	r3, r5
 80110b0:	6023      	str	r3, [r4, #0]
 80110b2:	f8d8 3000 	ldr.w	r3, [r8]
 80110b6:	685a      	ldr	r2, [r3, #4]
 80110b8:	bb62      	cbnz	r2, 8011114 <_malloc_r+0xdc>
 80110ba:	f8c8 7000 	str.w	r7, [r8]
 80110be:	e00f      	b.n	80110e0 <_malloc_r+0xa8>
 80110c0:	6822      	ldr	r2, [r4, #0]
 80110c2:	1b52      	subs	r2, r2, r5
 80110c4:	d420      	bmi.n	8011108 <_malloc_r+0xd0>
 80110c6:	2a0b      	cmp	r2, #11
 80110c8:	d917      	bls.n	80110fa <_malloc_r+0xc2>
 80110ca:	1961      	adds	r1, r4, r5
 80110cc:	42a3      	cmp	r3, r4
 80110ce:	6025      	str	r5, [r4, #0]
 80110d0:	bf18      	it	ne
 80110d2:	6059      	strne	r1, [r3, #4]
 80110d4:	6863      	ldr	r3, [r4, #4]
 80110d6:	bf08      	it	eq
 80110d8:	f8c8 1000 	streq.w	r1, [r8]
 80110dc:	5162      	str	r2, [r4, r5]
 80110de:	604b      	str	r3, [r1, #4]
 80110e0:	4630      	mov	r0, r6
 80110e2:	f000 f82f 	bl	8011144 <__malloc_unlock>
 80110e6:	f104 000b 	add.w	r0, r4, #11
 80110ea:	1d23      	adds	r3, r4, #4
 80110ec:	f020 0007 	bic.w	r0, r0, #7
 80110f0:	1ac2      	subs	r2, r0, r3
 80110f2:	bf1c      	itt	ne
 80110f4:	1a1b      	subne	r3, r3, r0
 80110f6:	50a3      	strne	r3, [r4, r2]
 80110f8:	e7af      	b.n	801105a <_malloc_r+0x22>
 80110fa:	6862      	ldr	r2, [r4, #4]
 80110fc:	42a3      	cmp	r3, r4
 80110fe:	bf0c      	ite	eq
 8011100:	f8c8 2000 	streq.w	r2, [r8]
 8011104:	605a      	strne	r2, [r3, #4]
 8011106:	e7eb      	b.n	80110e0 <_malloc_r+0xa8>
 8011108:	4623      	mov	r3, r4
 801110a:	6864      	ldr	r4, [r4, #4]
 801110c:	e7ae      	b.n	801106c <_malloc_r+0x34>
 801110e:	463c      	mov	r4, r7
 8011110:	687f      	ldr	r7, [r7, #4]
 8011112:	e7b6      	b.n	8011082 <_malloc_r+0x4a>
 8011114:	461a      	mov	r2, r3
 8011116:	685b      	ldr	r3, [r3, #4]
 8011118:	42a3      	cmp	r3, r4
 801111a:	d1fb      	bne.n	8011114 <_malloc_r+0xdc>
 801111c:	2300      	movs	r3, #0
 801111e:	6053      	str	r3, [r2, #4]
 8011120:	e7de      	b.n	80110e0 <_malloc_r+0xa8>
 8011122:	230c      	movs	r3, #12
 8011124:	6033      	str	r3, [r6, #0]
 8011126:	4630      	mov	r0, r6
 8011128:	f000 f80c 	bl	8011144 <__malloc_unlock>
 801112c:	e794      	b.n	8011058 <_malloc_r+0x20>
 801112e:	6005      	str	r5, [r0, #0]
 8011130:	e7d6      	b.n	80110e0 <_malloc_r+0xa8>
 8011132:	bf00      	nop
 8011134:	20005c90 	.word	0x20005c90

08011138 <__malloc_lock>:
 8011138:	4801      	ldr	r0, [pc, #4]	@ (8011140 <__malloc_lock+0x8>)
 801113a:	f000 bef8 	b.w	8011f2e <__retarget_lock_acquire_recursive>
 801113e:	bf00      	nop
 8011140:	20005dd4 	.word	0x20005dd4

08011144 <__malloc_unlock>:
 8011144:	4801      	ldr	r0, [pc, #4]	@ (801114c <__malloc_unlock+0x8>)
 8011146:	f000 bef3 	b.w	8011f30 <__retarget_lock_release_recursive>
 801114a:	bf00      	nop
 801114c:	20005dd4 	.word	0x20005dd4

08011150 <__cvt>:
 8011150:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011154:	ec57 6b10 	vmov	r6, r7, d0
 8011158:	2f00      	cmp	r7, #0
 801115a:	460c      	mov	r4, r1
 801115c:	4619      	mov	r1, r3
 801115e:	463b      	mov	r3, r7
 8011160:	bfbb      	ittet	lt
 8011162:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8011166:	461f      	movlt	r7, r3
 8011168:	2300      	movge	r3, #0
 801116a:	232d      	movlt	r3, #45	@ 0x2d
 801116c:	700b      	strb	r3, [r1, #0]
 801116e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011170:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8011174:	4691      	mov	r9, r2
 8011176:	f023 0820 	bic.w	r8, r3, #32
 801117a:	bfbc      	itt	lt
 801117c:	4632      	movlt	r2, r6
 801117e:	4616      	movlt	r6, r2
 8011180:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8011184:	d005      	beq.n	8011192 <__cvt+0x42>
 8011186:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801118a:	d100      	bne.n	801118e <__cvt+0x3e>
 801118c:	3401      	adds	r4, #1
 801118e:	2102      	movs	r1, #2
 8011190:	e000      	b.n	8011194 <__cvt+0x44>
 8011192:	2103      	movs	r1, #3
 8011194:	ab03      	add	r3, sp, #12
 8011196:	9301      	str	r3, [sp, #4]
 8011198:	ab02      	add	r3, sp, #8
 801119a:	9300      	str	r3, [sp, #0]
 801119c:	ec47 6b10 	vmov	d0, r6, r7
 80111a0:	4653      	mov	r3, sl
 80111a2:	4622      	mov	r2, r4
 80111a4:	f000 ff5c 	bl	8012060 <_dtoa_r>
 80111a8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80111ac:	4605      	mov	r5, r0
 80111ae:	d119      	bne.n	80111e4 <__cvt+0x94>
 80111b0:	f019 0f01 	tst.w	r9, #1
 80111b4:	d00e      	beq.n	80111d4 <__cvt+0x84>
 80111b6:	eb00 0904 	add.w	r9, r0, r4
 80111ba:	2200      	movs	r2, #0
 80111bc:	2300      	movs	r3, #0
 80111be:	4630      	mov	r0, r6
 80111c0:	4639      	mov	r1, r7
 80111c2:	f7ef fca1 	bl	8000b08 <__aeabi_dcmpeq>
 80111c6:	b108      	cbz	r0, 80111cc <__cvt+0x7c>
 80111c8:	f8cd 900c 	str.w	r9, [sp, #12]
 80111cc:	2230      	movs	r2, #48	@ 0x30
 80111ce:	9b03      	ldr	r3, [sp, #12]
 80111d0:	454b      	cmp	r3, r9
 80111d2:	d31e      	bcc.n	8011212 <__cvt+0xc2>
 80111d4:	9b03      	ldr	r3, [sp, #12]
 80111d6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80111d8:	1b5b      	subs	r3, r3, r5
 80111da:	4628      	mov	r0, r5
 80111dc:	6013      	str	r3, [r2, #0]
 80111de:	b004      	add	sp, #16
 80111e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80111e4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80111e8:	eb00 0904 	add.w	r9, r0, r4
 80111ec:	d1e5      	bne.n	80111ba <__cvt+0x6a>
 80111ee:	7803      	ldrb	r3, [r0, #0]
 80111f0:	2b30      	cmp	r3, #48	@ 0x30
 80111f2:	d10a      	bne.n	801120a <__cvt+0xba>
 80111f4:	2200      	movs	r2, #0
 80111f6:	2300      	movs	r3, #0
 80111f8:	4630      	mov	r0, r6
 80111fa:	4639      	mov	r1, r7
 80111fc:	f7ef fc84 	bl	8000b08 <__aeabi_dcmpeq>
 8011200:	b918      	cbnz	r0, 801120a <__cvt+0xba>
 8011202:	f1c4 0401 	rsb	r4, r4, #1
 8011206:	f8ca 4000 	str.w	r4, [sl]
 801120a:	f8da 3000 	ldr.w	r3, [sl]
 801120e:	4499      	add	r9, r3
 8011210:	e7d3      	b.n	80111ba <__cvt+0x6a>
 8011212:	1c59      	adds	r1, r3, #1
 8011214:	9103      	str	r1, [sp, #12]
 8011216:	701a      	strb	r2, [r3, #0]
 8011218:	e7d9      	b.n	80111ce <__cvt+0x7e>

0801121a <__exponent>:
 801121a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801121c:	2900      	cmp	r1, #0
 801121e:	bfba      	itte	lt
 8011220:	4249      	neglt	r1, r1
 8011222:	232d      	movlt	r3, #45	@ 0x2d
 8011224:	232b      	movge	r3, #43	@ 0x2b
 8011226:	2909      	cmp	r1, #9
 8011228:	7002      	strb	r2, [r0, #0]
 801122a:	7043      	strb	r3, [r0, #1]
 801122c:	dd29      	ble.n	8011282 <__exponent+0x68>
 801122e:	f10d 0307 	add.w	r3, sp, #7
 8011232:	461d      	mov	r5, r3
 8011234:	270a      	movs	r7, #10
 8011236:	461a      	mov	r2, r3
 8011238:	fbb1 f6f7 	udiv	r6, r1, r7
 801123c:	fb07 1416 	mls	r4, r7, r6, r1
 8011240:	3430      	adds	r4, #48	@ 0x30
 8011242:	f802 4c01 	strb.w	r4, [r2, #-1]
 8011246:	460c      	mov	r4, r1
 8011248:	2c63      	cmp	r4, #99	@ 0x63
 801124a:	f103 33ff 	add.w	r3, r3, #4294967295
 801124e:	4631      	mov	r1, r6
 8011250:	dcf1      	bgt.n	8011236 <__exponent+0x1c>
 8011252:	3130      	adds	r1, #48	@ 0x30
 8011254:	1e94      	subs	r4, r2, #2
 8011256:	f803 1c01 	strb.w	r1, [r3, #-1]
 801125a:	1c41      	adds	r1, r0, #1
 801125c:	4623      	mov	r3, r4
 801125e:	42ab      	cmp	r3, r5
 8011260:	d30a      	bcc.n	8011278 <__exponent+0x5e>
 8011262:	f10d 0309 	add.w	r3, sp, #9
 8011266:	1a9b      	subs	r3, r3, r2
 8011268:	42ac      	cmp	r4, r5
 801126a:	bf88      	it	hi
 801126c:	2300      	movhi	r3, #0
 801126e:	3302      	adds	r3, #2
 8011270:	4403      	add	r3, r0
 8011272:	1a18      	subs	r0, r3, r0
 8011274:	b003      	add	sp, #12
 8011276:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011278:	f813 6b01 	ldrb.w	r6, [r3], #1
 801127c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8011280:	e7ed      	b.n	801125e <__exponent+0x44>
 8011282:	2330      	movs	r3, #48	@ 0x30
 8011284:	3130      	adds	r1, #48	@ 0x30
 8011286:	7083      	strb	r3, [r0, #2]
 8011288:	70c1      	strb	r1, [r0, #3]
 801128a:	1d03      	adds	r3, r0, #4
 801128c:	e7f1      	b.n	8011272 <__exponent+0x58>
	...

08011290 <_printf_float>:
 8011290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011294:	b08d      	sub	sp, #52	@ 0x34
 8011296:	460c      	mov	r4, r1
 8011298:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801129c:	4616      	mov	r6, r2
 801129e:	461f      	mov	r7, r3
 80112a0:	4605      	mov	r5, r0
 80112a2:	f000 fdbf 	bl	8011e24 <_localeconv_r>
 80112a6:	6803      	ldr	r3, [r0, #0]
 80112a8:	9304      	str	r3, [sp, #16]
 80112aa:	4618      	mov	r0, r3
 80112ac:	f7ef f800 	bl	80002b0 <strlen>
 80112b0:	2300      	movs	r3, #0
 80112b2:	930a      	str	r3, [sp, #40]	@ 0x28
 80112b4:	f8d8 3000 	ldr.w	r3, [r8]
 80112b8:	9005      	str	r0, [sp, #20]
 80112ba:	3307      	adds	r3, #7
 80112bc:	f023 0307 	bic.w	r3, r3, #7
 80112c0:	f103 0208 	add.w	r2, r3, #8
 80112c4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80112c8:	f8d4 b000 	ldr.w	fp, [r4]
 80112cc:	f8c8 2000 	str.w	r2, [r8]
 80112d0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80112d4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80112d8:	9307      	str	r3, [sp, #28]
 80112da:	f8cd 8018 	str.w	r8, [sp, #24]
 80112de:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80112e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80112e6:	4b9c      	ldr	r3, [pc, #624]	@ (8011558 <_printf_float+0x2c8>)
 80112e8:	f04f 32ff 	mov.w	r2, #4294967295
 80112ec:	f7ef fc3e 	bl	8000b6c <__aeabi_dcmpun>
 80112f0:	bb70      	cbnz	r0, 8011350 <_printf_float+0xc0>
 80112f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80112f6:	4b98      	ldr	r3, [pc, #608]	@ (8011558 <_printf_float+0x2c8>)
 80112f8:	f04f 32ff 	mov.w	r2, #4294967295
 80112fc:	f7ef fc18 	bl	8000b30 <__aeabi_dcmple>
 8011300:	bb30      	cbnz	r0, 8011350 <_printf_float+0xc0>
 8011302:	2200      	movs	r2, #0
 8011304:	2300      	movs	r3, #0
 8011306:	4640      	mov	r0, r8
 8011308:	4649      	mov	r1, r9
 801130a:	f7ef fc07 	bl	8000b1c <__aeabi_dcmplt>
 801130e:	b110      	cbz	r0, 8011316 <_printf_float+0x86>
 8011310:	232d      	movs	r3, #45	@ 0x2d
 8011312:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011316:	4a91      	ldr	r2, [pc, #580]	@ (801155c <_printf_float+0x2cc>)
 8011318:	4b91      	ldr	r3, [pc, #580]	@ (8011560 <_printf_float+0x2d0>)
 801131a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801131e:	bf94      	ite	ls
 8011320:	4690      	movls	r8, r2
 8011322:	4698      	movhi	r8, r3
 8011324:	2303      	movs	r3, #3
 8011326:	6123      	str	r3, [r4, #16]
 8011328:	f02b 0304 	bic.w	r3, fp, #4
 801132c:	6023      	str	r3, [r4, #0]
 801132e:	f04f 0900 	mov.w	r9, #0
 8011332:	9700      	str	r7, [sp, #0]
 8011334:	4633      	mov	r3, r6
 8011336:	aa0b      	add	r2, sp, #44	@ 0x2c
 8011338:	4621      	mov	r1, r4
 801133a:	4628      	mov	r0, r5
 801133c:	f000 f9d2 	bl	80116e4 <_printf_common>
 8011340:	3001      	adds	r0, #1
 8011342:	f040 808d 	bne.w	8011460 <_printf_float+0x1d0>
 8011346:	f04f 30ff 	mov.w	r0, #4294967295
 801134a:	b00d      	add	sp, #52	@ 0x34
 801134c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011350:	4642      	mov	r2, r8
 8011352:	464b      	mov	r3, r9
 8011354:	4640      	mov	r0, r8
 8011356:	4649      	mov	r1, r9
 8011358:	f7ef fc08 	bl	8000b6c <__aeabi_dcmpun>
 801135c:	b140      	cbz	r0, 8011370 <_printf_float+0xe0>
 801135e:	464b      	mov	r3, r9
 8011360:	2b00      	cmp	r3, #0
 8011362:	bfbc      	itt	lt
 8011364:	232d      	movlt	r3, #45	@ 0x2d
 8011366:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801136a:	4a7e      	ldr	r2, [pc, #504]	@ (8011564 <_printf_float+0x2d4>)
 801136c:	4b7e      	ldr	r3, [pc, #504]	@ (8011568 <_printf_float+0x2d8>)
 801136e:	e7d4      	b.n	801131a <_printf_float+0x8a>
 8011370:	6863      	ldr	r3, [r4, #4]
 8011372:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8011376:	9206      	str	r2, [sp, #24]
 8011378:	1c5a      	adds	r2, r3, #1
 801137a:	d13b      	bne.n	80113f4 <_printf_float+0x164>
 801137c:	2306      	movs	r3, #6
 801137e:	6063      	str	r3, [r4, #4]
 8011380:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8011384:	2300      	movs	r3, #0
 8011386:	6022      	str	r2, [r4, #0]
 8011388:	9303      	str	r3, [sp, #12]
 801138a:	ab0a      	add	r3, sp, #40	@ 0x28
 801138c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8011390:	ab09      	add	r3, sp, #36	@ 0x24
 8011392:	9300      	str	r3, [sp, #0]
 8011394:	6861      	ldr	r1, [r4, #4]
 8011396:	ec49 8b10 	vmov	d0, r8, r9
 801139a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801139e:	4628      	mov	r0, r5
 80113a0:	f7ff fed6 	bl	8011150 <__cvt>
 80113a4:	9b06      	ldr	r3, [sp, #24]
 80113a6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80113a8:	2b47      	cmp	r3, #71	@ 0x47
 80113aa:	4680      	mov	r8, r0
 80113ac:	d129      	bne.n	8011402 <_printf_float+0x172>
 80113ae:	1cc8      	adds	r0, r1, #3
 80113b0:	db02      	blt.n	80113b8 <_printf_float+0x128>
 80113b2:	6863      	ldr	r3, [r4, #4]
 80113b4:	4299      	cmp	r1, r3
 80113b6:	dd41      	ble.n	801143c <_printf_float+0x1ac>
 80113b8:	f1aa 0a02 	sub.w	sl, sl, #2
 80113bc:	fa5f fa8a 	uxtb.w	sl, sl
 80113c0:	3901      	subs	r1, #1
 80113c2:	4652      	mov	r2, sl
 80113c4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80113c8:	9109      	str	r1, [sp, #36]	@ 0x24
 80113ca:	f7ff ff26 	bl	801121a <__exponent>
 80113ce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80113d0:	1813      	adds	r3, r2, r0
 80113d2:	2a01      	cmp	r2, #1
 80113d4:	4681      	mov	r9, r0
 80113d6:	6123      	str	r3, [r4, #16]
 80113d8:	dc02      	bgt.n	80113e0 <_printf_float+0x150>
 80113da:	6822      	ldr	r2, [r4, #0]
 80113dc:	07d2      	lsls	r2, r2, #31
 80113de:	d501      	bpl.n	80113e4 <_printf_float+0x154>
 80113e0:	3301      	adds	r3, #1
 80113e2:	6123      	str	r3, [r4, #16]
 80113e4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	d0a2      	beq.n	8011332 <_printf_float+0xa2>
 80113ec:	232d      	movs	r3, #45	@ 0x2d
 80113ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80113f2:	e79e      	b.n	8011332 <_printf_float+0xa2>
 80113f4:	9a06      	ldr	r2, [sp, #24]
 80113f6:	2a47      	cmp	r2, #71	@ 0x47
 80113f8:	d1c2      	bne.n	8011380 <_printf_float+0xf0>
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d1c0      	bne.n	8011380 <_printf_float+0xf0>
 80113fe:	2301      	movs	r3, #1
 8011400:	e7bd      	b.n	801137e <_printf_float+0xee>
 8011402:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8011406:	d9db      	bls.n	80113c0 <_printf_float+0x130>
 8011408:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801140c:	d118      	bne.n	8011440 <_printf_float+0x1b0>
 801140e:	2900      	cmp	r1, #0
 8011410:	6863      	ldr	r3, [r4, #4]
 8011412:	dd0b      	ble.n	801142c <_printf_float+0x19c>
 8011414:	6121      	str	r1, [r4, #16]
 8011416:	b913      	cbnz	r3, 801141e <_printf_float+0x18e>
 8011418:	6822      	ldr	r2, [r4, #0]
 801141a:	07d0      	lsls	r0, r2, #31
 801141c:	d502      	bpl.n	8011424 <_printf_float+0x194>
 801141e:	3301      	adds	r3, #1
 8011420:	440b      	add	r3, r1
 8011422:	6123      	str	r3, [r4, #16]
 8011424:	65a1      	str	r1, [r4, #88]	@ 0x58
 8011426:	f04f 0900 	mov.w	r9, #0
 801142a:	e7db      	b.n	80113e4 <_printf_float+0x154>
 801142c:	b913      	cbnz	r3, 8011434 <_printf_float+0x1a4>
 801142e:	6822      	ldr	r2, [r4, #0]
 8011430:	07d2      	lsls	r2, r2, #31
 8011432:	d501      	bpl.n	8011438 <_printf_float+0x1a8>
 8011434:	3302      	adds	r3, #2
 8011436:	e7f4      	b.n	8011422 <_printf_float+0x192>
 8011438:	2301      	movs	r3, #1
 801143a:	e7f2      	b.n	8011422 <_printf_float+0x192>
 801143c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8011440:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011442:	4299      	cmp	r1, r3
 8011444:	db05      	blt.n	8011452 <_printf_float+0x1c2>
 8011446:	6823      	ldr	r3, [r4, #0]
 8011448:	6121      	str	r1, [r4, #16]
 801144a:	07d8      	lsls	r0, r3, #31
 801144c:	d5ea      	bpl.n	8011424 <_printf_float+0x194>
 801144e:	1c4b      	adds	r3, r1, #1
 8011450:	e7e7      	b.n	8011422 <_printf_float+0x192>
 8011452:	2900      	cmp	r1, #0
 8011454:	bfd4      	ite	le
 8011456:	f1c1 0202 	rsble	r2, r1, #2
 801145a:	2201      	movgt	r2, #1
 801145c:	4413      	add	r3, r2
 801145e:	e7e0      	b.n	8011422 <_printf_float+0x192>
 8011460:	6823      	ldr	r3, [r4, #0]
 8011462:	055a      	lsls	r2, r3, #21
 8011464:	d407      	bmi.n	8011476 <_printf_float+0x1e6>
 8011466:	6923      	ldr	r3, [r4, #16]
 8011468:	4642      	mov	r2, r8
 801146a:	4631      	mov	r1, r6
 801146c:	4628      	mov	r0, r5
 801146e:	47b8      	blx	r7
 8011470:	3001      	adds	r0, #1
 8011472:	d12b      	bne.n	80114cc <_printf_float+0x23c>
 8011474:	e767      	b.n	8011346 <_printf_float+0xb6>
 8011476:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801147a:	f240 80dd 	bls.w	8011638 <_printf_float+0x3a8>
 801147e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8011482:	2200      	movs	r2, #0
 8011484:	2300      	movs	r3, #0
 8011486:	f7ef fb3f 	bl	8000b08 <__aeabi_dcmpeq>
 801148a:	2800      	cmp	r0, #0
 801148c:	d033      	beq.n	80114f6 <_printf_float+0x266>
 801148e:	4a37      	ldr	r2, [pc, #220]	@ (801156c <_printf_float+0x2dc>)
 8011490:	2301      	movs	r3, #1
 8011492:	4631      	mov	r1, r6
 8011494:	4628      	mov	r0, r5
 8011496:	47b8      	blx	r7
 8011498:	3001      	adds	r0, #1
 801149a:	f43f af54 	beq.w	8011346 <_printf_float+0xb6>
 801149e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80114a2:	4543      	cmp	r3, r8
 80114a4:	db02      	blt.n	80114ac <_printf_float+0x21c>
 80114a6:	6823      	ldr	r3, [r4, #0]
 80114a8:	07d8      	lsls	r0, r3, #31
 80114aa:	d50f      	bpl.n	80114cc <_printf_float+0x23c>
 80114ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80114b0:	4631      	mov	r1, r6
 80114b2:	4628      	mov	r0, r5
 80114b4:	47b8      	blx	r7
 80114b6:	3001      	adds	r0, #1
 80114b8:	f43f af45 	beq.w	8011346 <_printf_float+0xb6>
 80114bc:	f04f 0900 	mov.w	r9, #0
 80114c0:	f108 38ff 	add.w	r8, r8, #4294967295
 80114c4:	f104 0a1a 	add.w	sl, r4, #26
 80114c8:	45c8      	cmp	r8, r9
 80114ca:	dc09      	bgt.n	80114e0 <_printf_float+0x250>
 80114cc:	6823      	ldr	r3, [r4, #0]
 80114ce:	079b      	lsls	r3, r3, #30
 80114d0:	f100 8103 	bmi.w	80116da <_printf_float+0x44a>
 80114d4:	68e0      	ldr	r0, [r4, #12]
 80114d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80114d8:	4298      	cmp	r0, r3
 80114da:	bfb8      	it	lt
 80114dc:	4618      	movlt	r0, r3
 80114de:	e734      	b.n	801134a <_printf_float+0xba>
 80114e0:	2301      	movs	r3, #1
 80114e2:	4652      	mov	r2, sl
 80114e4:	4631      	mov	r1, r6
 80114e6:	4628      	mov	r0, r5
 80114e8:	47b8      	blx	r7
 80114ea:	3001      	adds	r0, #1
 80114ec:	f43f af2b 	beq.w	8011346 <_printf_float+0xb6>
 80114f0:	f109 0901 	add.w	r9, r9, #1
 80114f4:	e7e8      	b.n	80114c8 <_printf_float+0x238>
 80114f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	dc39      	bgt.n	8011570 <_printf_float+0x2e0>
 80114fc:	4a1b      	ldr	r2, [pc, #108]	@ (801156c <_printf_float+0x2dc>)
 80114fe:	2301      	movs	r3, #1
 8011500:	4631      	mov	r1, r6
 8011502:	4628      	mov	r0, r5
 8011504:	47b8      	blx	r7
 8011506:	3001      	adds	r0, #1
 8011508:	f43f af1d 	beq.w	8011346 <_printf_float+0xb6>
 801150c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8011510:	ea59 0303 	orrs.w	r3, r9, r3
 8011514:	d102      	bne.n	801151c <_printf_float+0x28c>
 8011516:	6823      	ldr	r3, [r4, #0]
 8011518:	07d9      	lsls	r1, r3, #31
 801151a:	d5d7      	bpl.n	80114cc <_printf_float+0x23c>
 801151c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011520:	4631      	mov	r1, r6
 8011522:	4628      	mov	r0, r5
 8011524:	47b8      	blx	r7
 8011526:	3001      	adds	r0, #1
 8011528:	f43f af0d 	beq.w	8011346 <_printf_float+0xb6>
 801152c:	f04f 0a00 	mov.w	sl, #0
 8011530:	f104 0b1a 	add.w	fp, r4, #26
 8011534:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011536:	425b      	negs	r3, r3
 8011538:	4553      	cmp	r3, sl
 801153a:	dc01      	bgt.n	8011540 <_printf_float+0x2b0>
 801153c:	464b      	mov	r3, r9
 801153e:	e793      	b.n	8011468 <_printf_float+0x1d8>
 8011540:	2301      	movs	r3, #1
 8011542:	465a      	mov	r2, fp
 8011544:	4631      	mov	r1, r6
 8011546:	4628      	mov	r0, r5
 8011548:	47b8      	blx	r7
 801154a:	3001      	adds	r0, #1
 801154c:	f43f aefb 	beq.w	8011346 <_printf_float+0xb6>
 8011550:	f10a 0a01 	add.w	sl, sl, #1
 8011554:	e7ee      	b.n	8011534 <_printf_float+0x2a4>
 8011556:	bf00      	nop
 8011558:	7fefffff 	.word	0x7fefffff
 801155c:	080bd9f8 	.word	0x080bd9f8
 8011560:	080bd9fc 	.word	0x080bd9fc
 8011564:	080bda00 	.word	0x080bda00
 8011568:	080bda04 	.word	0x080bda04
 801156c:	080bda08 	.word	0x080bda08
 8011570:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8011572:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8011576:	4553      	cmp	r3, sl
 8011578:	bfa8      	it	ge
 801157a:	4653      	movge	r3, sl
 801157c:	2b00      	cmp	r3, #0
 801157e:	4699      	mov	r9, r3
 8011580:	dc36      	bgt.n	80115f0 <_printf_float+0x360>
 8011582:	f04f 0b00 	mov.w	fp, #0
 8011586:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801158a:	f104 021a 	add.w	r2, r4, #26
 801158e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8011590:	9306      	str	r3, [sp, #24]
 8011592:	eba3 0309 	sub.w	r3, r3, r9
 8011596:	455b      	cmp	r3, fp
 8011598:	dc31      	bgt.n	80115fe <_printf_float+0x36e>
 801159a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801159c:	459a      	cmp	sl, r3
 801159e:	dc3a      	bgt.n	8011616 <_printf_float+0x386>
 80115a0:	6823      	ldr	r3, [r4, #0]
 80115a2:	07da      	lsls	r2, r3, #31
 80115a4:	d437      	bmi.n	8011616 <_printf_float+0x386>
 80115a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80115a8:	ebaa 0903 	sub.w	r9, sl, r3
 80115ac:	9b06      	ldr	r3, [sp, #24]
 80115ae:	ebaa 0303 	sub.w	r3, sl, r3
 80115b2:	4599      	cmp	r9, r3
 80115b4:	bfa8      	it	ge
 80115b6:	4699      	movge	r9, r3
 80115b8:	f1b9 0f00 	cmp.w	r9, #0
 80115bc:	dc33      	bgt.n	8011626 <_printf_float+0x396>
 80115be:	f04f 0800 	mov.w	r8, #0
 80115c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80115c6:	f104 0b1a 	add.w	fp, r4, #26
 80115ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80115cc:	ebaa 0303 	sub.w	r3, sl, r3
 80115d0:	eba3 0309 	sub.w	r3, r3, r9
 80115d4:	4543      	cmp	r3, r8
 80115d6:	f77f af79 	ble.w	80114cc <_printf_float+0x23c>
 80115da:	2301      	movs	r3, #1
 80115dc:	465a      	mov	r2, fp
 80115de:	4631      	mov	r1, r6
 80115e0:	4628      	mov	r0, r5
 80115e2:	47b8      	blx	r7
 80115e4:	3001      	adds	r0, #1
 80115e6:	f43f aeae 	beq.w	8011346 <_printf_float+0xb6>
 80115ea:	f108 0801 	add.w	r8, r8, #1
 80115ee:	e7ec      	b.n	80115ca <_printf_float+0x33a>
 80115f0:	4642      	mov	r2, r8
 80115f2:	4631      	mov	r1, r6
 80115f4:	4628      	mov	r0, r5
 80115f6:	47b8      	blx	r7
 80115f8:	3001      	adds	r0, #1
 80115fa:	d1c2      	bne.n	8011582 <_printf_float+0x2f2>
 80115fc:	e6a3      	b.n	8011346 <_printf_float+0xb6>
 80115fe:	2301      	movs	r3, #1
 8011600:	4631      	mov	r1, r6
 8011602:	4628      	mov	r0, r5
 8011604:	9206      	str	r2, [sp, #24]
 8011606:	47b8      	blx	r7
 8011608:	3001      	adds	r0, #1
 801160a:	f43f ae9c 	beq.w	8011346 <_printf_float+0xb6>
 801160e:	9a06      	ldr	r2, [sp, #24]
 8011610:	f10b 0b01 	add.w	fp, fp, #1
 8011614:	e7bb      	b.n	801158e <_printf_float+0x2fe>
 8011616:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801161a:	4631      	mov	r1, r6
 801161c:	4628      	mov	r0, r5
 801161e:	47b8      	blx	r7
 8011620:	3001      	adds	r0, #1
 8011622:	d1c0      	bne.n	80115a6 <_printf_float+0x316>
 8011624:	e68f      	b.n	8011346 <_printf_float+0xb6>
 8011626:	9a06      	ldr	r2, [sp, #24]
 8011628:	464b      	mov	r3, r9
 801162a:	4442      	add	r2, r8
 801162c:	4631      	mov	r1, r6
 801162e:	4628      	mov	r0, r5
 8011630:	47b8      	blx	r7
 8011632:	3001      	adds	r0, #1
 8011634:	d1c3      	bne.n	80115be <_printf_float+0x32e>
 8011636:	e686      	b.n	8011346 <_printf_float+0xb6>
 8011638:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801163c:	f1ba 0f01 	cmp.w	sl, #1
 8011640:	dc01      	bgt.n	8011646 <_printf_float+0x3b6>
 8011642:	07db      	lsls	r3, r3, #31
 8011644:	d536      	bpl.n	80116b4 <_printf_float+0x424>
 8011646:	2301      	movs	r3, #1
 8011648:	4642      	mov	r2, r8
 801164a:	4631      	mov	r1, r6
 801164c:	4628      	mov	r0, r5
 801164e:	47b8      	blx	r7
 8011650:	3001      	adds	r0, #1
 8011652:	f43f ae78 	beq.w	8011346 <_printf_float+0xb6>
 8011656:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801165a:	4631      	mov	r1, r6
 801165c:	4628      	mov	r0, r5
 801165e:	47b8      	blx	r7
 8011660:	3001      	adds	r0, #1
 8011662:	f43f ae70 	beq.w	8011346 <_printf_float+0xb6>
 8011666:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801166a:	2200      	movs	r2, #0
 801166c:	2300      	movs	r3, #0
 801166e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011672:	f7ef fa49 	bl	8000b08 <__aeabi_dcmpeq>
 8011676:	b9c0      	cbnz	r0, 80116aa <_printf_float+0x41a>
 8011678:	4653      	mov	r3, sl
 801167a:	f108 0201 	add.w	r2, r8, #1
 801167e:	4631      	mov	r1, r6
 8011680:	4628      	mov	r0, r5
 8011682:	47b8      	blx	r7
 8011684:	3001      	adds	r0, #1
 8011686:	d10c      	bne.n	80116a2 <_printf_float+0x412>
 8011688:	e65d      	b.n	8011346 <_printf_float+0xb6>
 801168a:	2301      	movs	r3, #1
 801168c:	465a      	mov	r2, fp
 801168e:	4631      	mov	r1, r6
 8011690:	4628      	mov	r0, r5
 8011692:	47b8      	blx	r7
 8011694:	3001      	adds	r0, #1
 8011696:	f43f ae56 	beq.w	8011346 <_printf_float+0xb6>
 801169a:	f108 0801 	add.w	r8, r8, #1
 801169e:	45d0      	cmp	r8, sl
 80116a0:	dbf3      	blt.n	801168a <_printf_float+0x3fa>
 80116a2:	464b      	mov	r3, r9
 80116a4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80116a8:	e6df      	b.n	801146a <_printf_float+0x1da>
 80116aa:	f04f 0800 	mov.w	r8, #0
 80116ae:	f104 0b1a 	add.w	fp, r4, #26
 80116b2:	e7f4      	b.n	801169e <_printf_float+0x40e>
 80116b4:	2301      	movs	r3, #1
 80116b6:	4642      	mov	r2, r8
 80116b8:	e7e1      	b.n	801167e <_printf_float+0x3ee>
 80116ba:	2301      	movs	r3, #1
 80116bc:	464a      	mov	r2, r9
 80116be:	4631      	mov	r1, r6
 80116c0:	4628      	mov	r0, r5
 80116c2:	47b8      	blx	r7
 80116c4:	3001      	adds	r0, #1
 80116c6:	f43f ae3e 	beq.w	8011346 <_printf_float+0xb6>
 80116ca:	f108 0801 	add.w	r8, r8, #1
 80116ce:	68e3      	ldr	r3, [r4, #12]
 80116d0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80116d2:	1a5b      	subs	r3, r3, r1
 80116d4:	4543      	cmp	r3, r8
 80116d6:	dcf0      	bgt.n	80116ba <_printf_float+0x42a>
 80116d8:	e6fc      	b.n	80114d4 <_printf_float+0x244>
 80116da:	f04f 0800 	mov.w	r8, #0
 80116de:	f104 0919 	add.w	r9, r4, #25
 80116e2:	e7f4      	b.n	80116ce <_printf_float+0x43e>

080116e4 <_printf_common>:
 80116e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80116e8:	4616      	mov	r6, r2
 80116ea:	4698      	mov	r8, r3
 80116ec:	688a      	ldr	r2, [r1, #8]
 80116ee:	690b      	ldr	r3, [r1, #16]
 80116f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80116f4:	4293      	cmp	r3, r2
 80116f6:	bfb8      	it	lt
 80116f8:	4613      	movlt	r3, r2
 80116fa:	6033      	str	r3, [r6, #0]
 80116fc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8011700:	4607      	mov	r7, r0
 8011702:	460c      	mov	r4, r1
 8011704:	b10a      	cbz	r2, 801170a <_printf_common+0x26>
 8011706:	3301      	adds	r3, #1
 8011708:	6033      	str	r3, [r6, #0]
 801170a:	6823      	ldr	r3, [r4, #0]
 801170c:	0699      	lsls	r1, r3, #26
 801170e:	bf42      	ittt	mi
 8011710:	6833      	ldrmi	r3, [r6, #0]
 8011712:	3302      	addmi	r3, #2
 8011714:	6033      	strmi	r3, [r6, #0]
 8011716:	6825      	ldr	r5, [r4, #0]
 8011718:	f015 0506 	ands.w	r5, r5, #6
 801171c:	d106      	bne.n	801172c <_printf_common+0x48>
 801171e:	f104 0a19 	add.w	sl, r4, #25
 8011722:	68e3      	ldr	r3, [r4, #12]
 8011724:	6832      	ldr	r2, [r6, #0]
 8011726:	1a9b      	subs	r3, r3, r2
 8011728:	42ab      	cmp	r3, r5
 801172a:	dc26      	bgt.n	801177a <_printf_common+0x96>
 801172c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8011730:	6822      	ldr	r2, [r4, #0]
 8011732:	3b00      	subs	r3, #0
 8011734:	bf18      	it	ne
 8011736:	2301      	movne	r3, #1
 8011738:	0692      	lsls	r2, r2, #26
 801173a:	d42b      	bmi.n	8011794 <_printf_common+0xb0>
 801173c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8011740:	4641      	mov	r1, r8
 8011742:	4638      	mov	r0, r7
 8011744:	47c8      	blx	r9
 8011746:	3001      	adds	r0, #1
 8011748:	d01e      	beq.n	8011788 <_printf_common+0xa4>
 801174a:	6823      	ldr	r3, [r4, #0]
 801174c:	6922      	ldr	r2, [r4, #16]
 801174e:	f003 0306 	and.w	r3, r3, #6
 8011752:	2b04      	cmp	r3, #4
 8011754:	bf02      	ittt	eq
 8011756:	68e5      	ldreq	r5, [r4, #12]
 8011758:	6833      	ldreq	r3, [r6, #0]
 801175a:	1aed      	subeq	r5, r5, r3
 801175c:	68a3      	ldr	r3, [r4, #8]
 801175e:	bf0c      	ite	eq
 8011760:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011764:	2500      	movne	r5, #0
 8011766:	4293      	cmp	r3, r2
 8011768:	bfc4      	itt	gt
 801176a:	1a9b      	subgt	r3, r3, r2
 801176c:	18ed      	addgt	r5, r5, r3
 801176e:	2600      	movs	r6, #0
 8011770:	341a      	adds	r4, #26
 8011772:	42b5      	cmp	r5, r6
 8011774:	d11a      	bne.n	80117ac <_printf_common+0xc8>
 8011776:	2000      	movs	r0, #0
 8011778:	e008      	b.n	801178c <_printf_common+0xa8>
 801177a:	2301      	movs	r3, #1
 801177c:	4652      	mov	r2, sl
 801177e:	4641      	mov	r1, r8
 8011780:	4638      	mov	r0, r7
 8011782:	47c8      	blx	r9
 8011784:	3001      	adds	r0, #1
 8011786:	d103      	bne.n	8011790 <_printf_common+0xac>
 8011788:	f04f 30ff 	mov.w	r0, #4294967295
 801178c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011790:	3501      	adds	r5, #1
 8011792:	e7c6      	b.n	8011722 <_printf_common+0x3e>
 8011794:	18e1      	adds	r1, r4, r3
 8011796:	1c5a      	adds	r2, r3, #1
 8011798:	2030      	movs	r0, #48	@ 0x30
 801179a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801179e:	4422      	add	r2, r4
 80117a0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80117a4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80117a8:	3302      	adds	r3, #2
 80117aa:	e7c7      	b.n	801173c <_printf_common+0x58>
 80117ac:	2301      	movs	r3, #1
 80117ae:	4622      	mov	r2, r4
 80117b0:	4641      	mov	r1, r8
 80117b2:	4638      	mov	r0, r7
 80117b4:	47c8      	blx	r9
 80117b6:	3001      	adds	r0, #1
 80117b8:	d0e6      	beq.n	8011788 <_printf_common+0xa4>
 80117ba:	3601      	adds	r6, #1
 80117bc:	e7d9      	b.n	8011772 <_printf_common+0x8e>
	...

080117c0 <_printf_i>:
 80117c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80117c4:	7e0f      	ldrb	r7, [r1, #24]
 80117c6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80117c8:	2f78      	cmp	r7, #120	@ 0x78
 80117ca:	4691      	mov	r9, r2
 80117cc:	4680      	mov	r8, r0
 80117ce:	460c      	mov	r4, r1
 80117d0:	469a      	mov	sl, r3
 80117d2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80117d6:	d807      	bhi.n	80117e8 <_printf_i+0x28>
 80117d8:	2f62      	cmp	r7, #98	@ 0x62
 80117da:	d80a      	bhi.n	80117f2 <_printf_i+0x32>
 80117dc:	2f00      	cmp	r7, #0
 80117de:	f000 80d2 	beq.w	8011986 <_printf_i+0x1c6>
 80117e2:	2f58      	cmp	r7, #88	@ 0x58
 80117e4:	f000 80b9 	beq.w	801195a <_printf_i+0x19a>
 80117e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80117ec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80117f0:	e03a      	b.n	8011868 <_printf_i+0xa8>
 80117f2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80117f6:	2b15      	cmp	r3, #21
 80117f8:	d8f6      	bhi.n	80117e8 <_printf_i+0x28>
 80117fa:	a101      	add	r1, pc, #4	@ (adr r1, 8011800 <_printf_i+0x40>)
 80117fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011800:	08011859 	.word	0x08011859
 8011804:	0801186d 	.word	0x0801186d
 8011808:	080117e9 	.word	0x080117e9
 801180c:	080117e9 	.word	0x080117e9
 8011810:	080117e9 	.word	0x080117e9
 8011814:	080117e9 	.word	0x080117e9
 8011818:	0801186d 	.word	0x0801186d
 801181c:	080117e9 	.word	0x080117e9
 8011820:	080117e9 	.word	0x080117e9
 8011824:	080117e9 	.word	0x080117e9
 8011828:	080117e9 	.word	0x080117e9
 801182c:	0801196d 	.word	0x0801196d
 8011830:	08011897 	.word	0x08011897
 8011834:	08011927 	.word	0x08011927
 8011838:	080117e9 	.word	0x080117e9
 801183c:	080117e9 	.word	0x080117e9
 8011840:	0801198f 	.word	0x0801198f
 8011844:	080117e9 	.word	0x080117e9
 8011848:	08011897 	.word	0x08011897
 801184c:	080117e9 	.word	0x080117e9
 8011850:	080117e9 	.word	0x080117e9
 8011854:	0801192f 	.word	0x0801192f
 8011858:	6833      	ldr	r3, [r6, #0]
 801185a:	1d1a      	adds	r2, r3, #4
 801185c:	681b      	ldr	r3, [r3, #0]
 801185e:	6032      	str	r2, [r6, #0]
 8011860:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011864:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011868:	2301      	movs	r3, #1
 801186a:	e09d      	b.n	80119a8 <_printf_i+0x1e8>
 801186c:	6833      	ldr	r3, [r6, #0]
 801186e:	6820      	ldr	r0, [r4, #0]
 8011870:	1d19      	adds	r1, r3, #4
 8011872:	6031      	str	r1, [r6, #0]
 8011874:	0606      	lsls	r6, r0, #24
 8011876:	d501      	bpl.n	801187c <_printf_i+0xbc>
 8011878:	681d      	ldr	r5, [r3, #0]
 801187a:	e003      	b.n	8011884 <_printf_i+0xc4>
 801187c:	0645      	lsls	r5, r0, #25
 801187e:	d5fb      	bpl.n	8011878 <_printf_i+0xb8>
 8011880:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011884:	2d00      	cmp	r5, #0
 8011886:	da03      	bge.n	8011890 <_printf_i+0xd0>
 8011888:	232d      	movs	r3, #45	@ 0x2d
 801188a:	426d      	negs	r5, r5
 801188c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011890:	4859      	ldr	r0, [pc, #356]	@ (80119f8 <_printf_i+0x238>)
 8011892:	230a      	movs	r3, #10
 8011894:	e011      	b.n	80118ba <_printf_i+0xfa>
 8011896:	6821      	ldr	r1, [r4, #0]
 8011898:	6833      	ldr	r3, [r6, #0]
 801189a:	0608      	lsls	r0, r1, #24
 801189c:	f853 5b04 	ldr.w	r5, [r3], #4
 80118a0:	d402      	bmi.n	80118a8 <_printf_i+0xe8>
 80118a2:	0649      	lsls	r1, r1, #25
 80118a4:	bf48      	it	mi
 80118a6:	b2ad      	uxthmi	r5, r5
 80118a8:	2f6f      	cmp	r7, #111	@ 0x6f
 80118aa:	4853      	ldr	r0, [pc, #332]	@ (80119f8 <_printf_i+0x238>)
 80118ac:	6033      	str	r3, [r6, #0]
 80118ae:	bf14      	ite	ne
 80118b0:	230a      	movne	r3, #10
 80118b2:	2308      	moveq	r3, #8
 80118b4:	2100      	movs	r1, #0
 80118b6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80118ba:	6866      	ldr	r6, [r4, #4]
 80118bc:	60a6      	str	r6, [r4, #8]
 80118be:	2e00      	cmp	r6, #0
 80118c0:	bfa2      	ittt	ge
 80118c2:	6821      	ldrge	r1, [r4, #0]
 80118c4:	f021 0104 	bicge.w	r1, r1, #4
 80118c8:	6021      	strge	r1, [r4, #0]
 80118ca:	b90d      	cbnz	r5, 80118d0 <_printf_i+0x110>
 80118cc:	2e00      	cmp	r6, #0
 80118ce:	d04b      	beq.n	8011968 <_printf_i+0x1a8>
 80118d0:	4616      	mov	r6, r2
 80118d2:	fbb5 f1f3 	udiv	r1, r5, r3
 80118d6:	fb03 5711 	mls	r7, r3, r1, r5
 80118da:	5dc7      	ldrb	r7, [r0, r7]
 80118dc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80118e0:	462f      	mov	r7, r5
 80118e2:	42bb      	cmp	r3, r7
 80118e4:	460d      	mov	r5, r1
 80118e6:	d9f4      	bls.n	80118d2 <_printf_i+0x112>
 80118e8:	2b08      	cmp	r3, #8
 80118ea:	d10b      	bne.n	8011904 <_printf_i+0x144>
 80118ec:	6823      	ldr	r3, [r4, #0]
 80118ee:	07df      	lsls	r7, r3, #31
 80118f0:	d508      	bpl.n	8011904 <_printf_i+0x144>
 80118f2:	6923      	ldr	r3, [r4, #16]
 80118f4:	6861      	ldr	r1, [r4, #4]
 80118f6:	4299      	cmp	r1, r3
 80118f8:	bfde      	ittt	le
 80118fa:	2330      	movle	r3, #48	@ 0x30
 80118fc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011900:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011904:	1b92      	subs	r2, r2, r6
 8011906:	6122      	str	r2, [r4, #16]
 8011908:	f8cd a000 	str.w	sl, [sp]
 801190c:	464b      	mov	r3, r9
 801190e:	aa03      	add	r2, sp, #12
 8011910:	4621      	mov	r1, r4
 8011912:	4640      	mov	r0, r8
 8011914:	f7ff fee6 	bl	80116e4 <_printf_common>
 8011918:	3001      	adds	r0, #1
 801191a:	d14a      	bne.n	80119b2 <_printf_i+0x1f2>
 801191c:	f04f 30ff 	mov.w	r0, #4294967295
 8011920:	b004      	add	sp, #16
 8011922:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011926:	6823      	ldr	r3, [r4, #0]
 8011928:	f043 0320 	orr.w	r3, r3, #32
 801192c:	6023      	str	r3, [r4, #0]
 801192e:	4833      	ldr	r0, [pc, #204]	@ (80119fc <_printf_i+0x23c>)
 8011930:	2778      	movs	r7, #120	@ 0x78
 8011932:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8011936:	6823      	ldr	r3, [r4, #0]
 8011938:	6831      	ldr	r1, [r6, #0]
 801193a:	061f      	lsls	r7, r3, #24
 801193c:	f851 5b04 	ldr.w	r5, [r1], #4
 8011940:	d402      	bmi.n	8011948 <_printf_i+0x188>
 8011942:	065f      	lsls	r7, r3, #25
 8011944:	bf48      	it	mi
 8011946:	b2ad      	uxthmi	r5, r5
 8011948:	6031      	str	r1, [r6, #0]
 801194a:	07d9      	lsls	r1, r3, #31
 801194c:	bf44      	itt	mi
 801194e:	f043 0320 	orrmi.w	r3, r3, #32
 8011952:	6023      	strmi	r3, [r4, #0]
 8011954:	b11d      	cbz	r5, 801195e <_printf_i+0x19e>
 8011956:	2310      	movs	r3, #16
 8011958:	e7ac      	b.n	80118b4 <_printf_i+0xf4>
 801195a:	4827      	ldr	r0, [pc, #156]	@ (80119f8 <_printf_i+0x238>)
 801195c:	e7e9      	b.n	8011932 <_printf_i+0x172>
 801195e:	6823      	ldr	r3, [r4, #0]
 8011960:	f023 0320 	bic.w	r3, r3, #32
 8011964:	6023      	str	r3, [r4, #0]
 8011966:	e7f6      	b.n	8011956 <_printf_i+0x196>
 8011968:	4616      	mov	r6, r2
 801196a:	e7bd      	b.n	80118e8 <_printf_i+0x128>
 801196c:	6833      	ldr	r3, [r6, #0]
 801196e:	6825      	ldr	r5, [r4, #0]
 8011970:	6961      	ldr	r1, [r4, #20]
 8011972:	1d18      	adds	r0, r3, #4
 8011974:	6030      	str	r0, [r6, #0]
 8011976:	062e      	lsls	r6, r5, #24
 8011978:	681b      	ldr	r3, [r3, #0]
 801197a:	d501      	bpl.n	8011980 <_printf_i+0x1c0>
 801197c:	6019      	str	r1, [r3, #0]
 801197e:	e002      	b.n	8011986 <_printf_i+0x1c6>
 8011980:	0668      	lsls	r0, r5, #25
 8011982:	d5fb      	bpl.n	801197c <_printf_i+0x1bc>
 8011984:	8019      	strh	r1, [r3, #0]
 8011986:	2300      	movs	r3, #0
 8011988:	6123      	str	r3, [r4, #16]
 801198a:	4616      	mov	r6, r2
 801198c:	e7bc      	b.n	8011908 <_printf_i+0x148>
 801198e:	6833      	ldr	r3, [r6, #0]
 8011990:	1d1a      	adds	r2, r3, #4
 8011992:	6032      	str	r2, [r6, #0]
 8011994:	681e      	ldr	r6, [r3, #0]
 8011996:	6862      	ldr	r2, [r4, #4]
 8011998:	2100      	movs	r1, #0
 801199a:	4630      	mov	r0, r6
 801199c:	f7ee fc38 	bl	8000210 <memchr>
 80119a0:	b108      	cbz	r0, 80119a6 <_printf_i+0x1e6>
 80119a2:	1b80      	subs	r0, r0, r6
 80119a4:	6060      	str	r0, [r4, #4]
 80119a6:	6863      	ldr	r3, [r4, #4]
 80119a8:	6123      	str	r3, [r4, #16]
 80119aa:	2300      	movs	r3, #0
 80119ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80119b0:	e7aa      	b.n	8011908 <_printf_i+0x148>
 80119b2:	6923      	ldr	r3, [r4, #16]
 80119b4:	4632      	mov	r2, r6
 80119b6:	4649      	mov	r1, r9
 80119b8:	4640      	mov	r0, r8
 80119ba:	47d0      	blx	sl
 80119bc:	3001      	adds	r0, #1
 80119be:	d0ad      	beq.n	801191c <_printf_i+0x15c>
 80119c0:	6823      	ldr	r3, [r4, #0]
 80119c2:	079b      	lsls	r3, r3, #30
 80119c4:	d413      	bmi.n	80119ee <_printf_i+0x22e>
 80119c6:	68e0      	ldr	r0, [r4, #12]
 80119c8:	9b03      	ldr	r3, [sp, #12]
 80119ca:	4298      	cmp	r0, r3
 80119cc:	bfb8      	it	lt
 80119ce:	4618      	movlt	r0, r3
 80119d0:	e7a6      	b.n	8011920 <_printf_i+0x160>
 80119d2:	2301      	movs	r3, #1
 80119d4:	4632      	mov	r2, r6
 80119d6:	4649      	mov	r1, r9
 80119d8:	4640      	mov	r0, r8
 80119da:	47d0      	blx	sl
 80119dc:	3001      	adds	r0, #1
 80119de:	d09d      	beq.n	801191c <_printf_i+0x15c>
 80119e0:	3501      	adds	r5, #1
 80119e2:	68e3      	ldr	r3, [r4, #12]
 80119e4:	9903      	ldr	r1, [sp, #12]
 80119e6:	1a5b      	subs	r3, r3, r1
 80119e8:	42ab      	cmp	r3, r5
 80119ea:	dcf2      	bgt.n	80119d2 <_printf_i+0x212>
 80119ec:	e7eb      	b.n	80119c6 <_printf_i+0x206>
 80119ee:	2500      	movs	r5, #0
 80119f0:	f104 0619 	add.w	r6, r4, #25
 80119f4:	e7f5      	b.n	80119e2 <_printf_i+0x222>
 80119f6:	bf00      	nop
 80119f8:	080bda0a 	.word	0x080bda0a
 80119fc:	080bda1b 	.word	0x080bda1b

08011a00 <std>:
 8011a00:	2300      	movs	r3, #0
 8011a02:	b510      	push	{r4, lr}
 8011a04:	4604      	mov	r4, r0
 8011a06:	e9c0 3300 	strd	r3, r3, [r0]
 8011a0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011a0e:	6083      	str	r3, [r0, #8]
 8011a10:	8181      	strh	r1, [r0, #12]
 8011a12:	6643      	str	r3, [r0, #100]	@ 0x64
 8011a14:	81c2      	strh	r2, [r0, #14]
 8011a16:	6183      	str	r3, [r0, #24]
 8011a18:	4619      	mov	r1, r3
 8011a1a:	2208      	movs	r2, #8
 8011a1c:	305c      	adds	r0, #92	@ 0x5c
 8011a1e:	f000 f9f9 	bl	8011e14 <memset>
 8011a22:	4b0d      	ldr	r3, [pc, #52]	@ (8011a58 <std+0x58>)
 8011a24:	6263      	str	r3, [r4, #36]	@ 0x24
 8011a26:	4b0d      	ldr	r3, [pc, #52]	@ (8011a5c <std+0x5c>)
 8011a28:	62a3      	str	r3, [r4, #40]	@ 0x28
 8011a2a:	4b0d      	ldr	r3, [pc, #52]	@ (8011a60 <std+0x60>)
 8011a2c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8011a2e:	4b0d      	ldr	r3, [pc, #52]	@ (8011a64 <std+0x64>)
 8011a30:	6323      	str	r3, [r4, #48]	@ 0x30
 8011a32:	4b0d      	ldr	r3, [pc, #52]	@ (8011a68 <std+0x68>)
 8011a34:	6224      	str	r4, [r4, #32]
 8011a36:	429c      	cmp	r4, r3
 8011a38:	d006      	beq.n	8011a48 <std+0x48>
 8011a3a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8011a3e:	4294      	cmp	r4, r2
 8011a40:	d002      	beq.n	8011a48 <std+0x48>
 8011a42:	33d0      	adds	r3, #208	@ 0xd0
 8011a44:	429c      	cmp	r4, r3
 8011a46:	d105      	bne.n	8011a54 <std+0x54>
 8011a48:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8011a4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011a50:	f000 ba6c 	b.w	8011f2c <__retarget_lock_init_recursive>
 8011a54:	bd10      	pop	{r4, pc}
 8011a56:	bf00      	nop
 8011a58:	08011c65 	.word	0x08011c65
 8011a5c:	08011c87 	.word	0x08011c87
 8011a60:	08011cbf 	.word	0x08011cbf
 8011a64:	08011ce3 	.word	0x08011ce3
 8011a68:	20005c94 	.word	0x20005c94

08011a6c <stdio_exit_handler>:
 8011a6c:	4a02      	ldr	r2, [pc, #8]	@ (8011a78 <stdio_exit_handler+0xc>)
 8011a6e:	4903      	ldr	r1, [pc, #12]	@ (8011a7c <stdio_exit_handler+0x10>)
 8011a70:	4803      	ldr	r0, [pc, #12]	@ (8011a80 <stdio_exit_handler+0x14>)
 8011a72:	f000 b869 	b.w	8011b48 <_fwalk_sglue>
 8011a76:	bf00      	nop
 8011a78:	2000080c 	.word	0x2000080c
 8011a7c:	0801370d 	.word	0x0801370d
 8011a80:	2000081c 	.word	0x2000081c

08011a84 <cleanup_stdio>:
 8011a84:	6841      	ldr	r1, [r0, #4]
 8011a86:	4b0c      	ldr	r3, [pc, #48]	@ (8011ab8 <cleanup_stdio+0x34>)
 8011a88:	4299      	cmp	r1, r3
 8011a8a:	b510      	push	{r4, lr}
 8011a8c:	4604      	mov	r4, r0
 8011a8e:	d001      	beq.n	8011a94 <cleanup_stdio+0x10>
 8011a90:	f001 fe3c 	bl	801370c <_fflush_r>
 8011a94:	68a1      	ldr	r1, [r4, #8]
 8011a96:	4b09      	ldr	r3, [pc, #36]	@ (8011abc <cleanup_stdio+0x38>)
 8011a98:	4299      	cmp	r1, r3
 8011a9a:	d002      	beq.n	8011aa2 <cleanup_stdio+0x1e>
 8011a9c:	4620      	mov	r0, r4
 8011a9e:	f001 fe35 	bl	801370c <_fflush_r>
 8011aa2:	68e1      	ldr	r1, [r4, #12]
 8011aa4:	4b06      	ldr	r3, [pc, #24]	@ (8011ac0 <cleanup_stdio+0x3c>)
 8011aa6:	4299      	cmp	r1, r3
 8011aa8:	d004      	beq.n	8011ab4 <cleanup_stdio+0x30>
 8011aaa:	4620      	mov	r0, r4
 8011aac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011ab0:	f001 be2c 	b.w	801370c <_fflush_r>
 8011ab4:	bd10      	pop	{r4, pc}
 8011ab6:	bf00      	nop
 8011ab8:	20005c94 	.word	0x20005c94
 8011abc:	20005cfc 	.word	0x20005cfc
 8011ac0:	20005d64 	.word	0x20005d64

08011ac4 <global_stdio_init.part.0>:
 8011ac4:	b510      	push	{r4, lr}
 8011ac6:	4b0b      	ldr	r3, [pc, #44]	@ (8011af4 <global_stdio_init.part.0+0x30>)
 8011ac8:	4c0b      	ldr	r4, [pc, #44]	@ (8011af8 <global_stdio_init.part.0+0x34>)
 8011aca:	4a0c      	ldr	r2, [pc, #48]	@ (8011afc <global_stdio_init.part.0+0x38>)
 8011acc:	601a      	str	r2, [r3, #0]
 8011ace:	4620      	mov	r0, r4
 8011ad0:	2200      	movs	r2, #0
 8011ad2:	2104      	movs	r1, #4
 8011ad4:	f7ff ff94 	bl	8011a00 <std>
 8011ad8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8011adc:	2201      	movs	r2, #1
 8011ade:	2109      	movs	r1, #9
 8011ae0:	f7ff ff8e 	bl	8011a00 <std>
 8011ae4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8011ae8:	2202      	movs	r2, #2
 8011aea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011aee:	2112      	movs	r1, #18
 8011af0:	f7ff bf86 	b.w	8011a00 <std>
 8011af4:	20005dcc 	.word	0x20005dcc
 8011af8:	20005c94 	.word	0x20005c94
 8011afc:	08011a6d 	.word	0x08011a6d

08011b00 <__sfp_lock_acquire>:
 8011b00:	4801      	ldr	r0, [pc, #4]	@ (8011b08 <__sfp_lock_acquire+0x8>)
 8011b02:	f000 ba14 	b.w	8011f2e <__retarget_lock_acquire_recursive>
 8011b06:	bf00      	nop
 8011b08:	20005dd5 	.word	0x20005dd5

08011b0c <__sfp_lock_release>:
 8011b0c:	4801      	ldr	r0, [pc, #4]	@ (8011b14 <__sfp_lock_release+0x8>)
 8011b0e:	f000 ba0f 	b.w	8011f30 <__retarget_lock_release_recursive>
 8011b12:	bf00      	nop
 8011b14:	20005dd5 	.word	0x20005dd5

08011b18 <__sinit>:
 8011b18:	b510      	push	{r4, lr}
 8011b1a:	4604      	mov	r4, r0
 8011b1c:	f7ff fff0 	bl	8011b00 <__sfp_lock_acquire>
 8011b20:	6a23      	ldr	r3, [r4, #32]
 8011b22:	b11b      	cbz	r3, 8011b2c <__sinit+0x14>
 8011b24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011b28:	f7ff bff0 	b.w	8011b0c <__sfp_lock_release>
 8011b2c:	4b04      	ldr	r3, [pc, #16]	@ (8011b40 <__sinit+0x28>)
 8011b2e:	6223      	str	r3, [r4, #32]
 8011b30:	4b04      	ldr	r3, [pc, #16]	@ (8011b44 <__sinit+0x2c>)
 8011b32:	681b      	ldr	r3, [r3, #0]
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	d1f5      	bne.n	8011b24 <__sinit+0xc>
 8011b38:	f7ff ffc4 	bl	8011ac4 <global_stdio_init.part.0>
 8011b3c:	e7f2      	b.n	8011b24 <__sinit+0xc>
 8011b3e:	bf00      	nop
 8011b40:	08011a85 	.word	0x08011a85
 8011b44:	20005dcc 	.word	0x20005dcc

08011b48 <_fwalk_sglue>:
 8011b48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011b4c:	4607      	mov	r7, r0
 8011b4e:	4688      	mov	r8, r1
 8011b50:	4614      	mov	r4, r2
 8011b52:	2600      	movs	r6, #0
 8011b54:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011b58:	f1b9 0901 	subs.w	r9, r9, #1
 8011b5c:	d505      	bpl.n	8011b6a <_fwalk_sglue+0x22>
 8011b5e:	6824      	ldr	r4, [r4, #0]
 8011b60:	2c00      	cmp	r4, #0
 8011b62:	d1f7      	bne.n	8011b54 <_fwalk_sglue+0xc>
 8011b64:	4630      	mov	r0, r6
 8011b66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011b6a:	89ab      	ldrh	r3, [r5, #12]
 8011b6c:	2b01      	cmp	r3, #1
 8011b6e:	d907      	bls.n	8011b80 <_fwalk_sglue+0x38>
 8011b70:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011b74:	3301      	adds	r3, #1
 8011b76:	d003      	beq.n	8011b80 <_fwalk_sglue+0x38>
 8011b78:	4629      	mov	r1, r5
 8011b7a:	4638      	mov	r0, r7
 8011b7c:	47c0      	blx	r8
 8011b7e:	4306      	orrs	r6, r0
 8011b80:	3568      	adds	r5, #104	@ 0x68
 8011b82:	e7e9      	b.n	8011b58 <_fwalk_sglue+0x10>

08011b84 <iprintf>:
 8011b84:	b40f      	push	{r0, r1, r2, r3}
 8011b86:	b507      	push	{r0, r1, r2, lr}
 8011b88:	4906      	ldr	r1, [pc, #24]	@ (8011ba4 <iprintf+0x20>)
 8011b8a:	ab04      	add	r3, sp, #16
 8011b8c:	6808      	ldr	r0, [r1, #0]
 8011b8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011b92:	6881      	ldr	r1, [r0, #8]
 8011b94:	9301      	str	r3, [sp, #4]
 8011b96:	f001 fc1d 	bl	80133d4 <_vfiprintf_r>
 8011b9a:	b003      	add	sp, #12
 8011b9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011ba0:	b004      	add	sp, #16
 8011ba2:	4770      	bx	lr
 8011ba4:	20000818 	.word	0x20000818

08011ba8 <_puts_r>:
 8011ba8:	6a03      	ldr	r3, [r0, #32]
 8011baa:	b570      	push	{r4, r5, r6, lr}
 8011bac:	6884      	ldr	r4, [r0, #8]
 8011bae:	4605      	mov	r5, r0
 8011bb0:	460e      	mov	r6, r1
 8011bb2:	b90b      	cbnz	r3, 8011bb8 <_puts_r+0x10>
 8011bb4:	f7ff ffb0 	bl	8011b18 <__sinit>
 8011bb8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011bba:	07db      	lsls	r3, r3, #31
 8011bbc:	d405      	bmi.n	8011bca <_puts_r+0x22>
 8011bbe:	89a3      	ldrh	r3, [r4, #12]
 8011bc0:	0598      	lsls	r0, r3, #22
 8011bc2:	d402      	bmi.n	8011bca <_puts_r+0x22>
 8011bc4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011bc6:	f000 f9b2 	bl	8011f2e <__retarget_lock_acquire_recursive>
 8011bca:	89a3      	ldrh	r3, [r4, #12]
 8011bcc:	0719      	lsls	r1, r3, #28
 8011bce:	d502      	bpl.n	8011bd6 <_puts_r+0x2e>
 8011bd0:	6923      	ldr	r3, [r4, #16]
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	d135      	bne.n	8011c42 <_puts_r+0x9a>
 8011bd6:	4621      	mov	r1, r4
 8011bd8:	4628      	mov	r0, r5
 8011bda:	f000 f8c5 	bl	8011d68 <__swsetup_r>
 8011bde:	b380      	cbz	r0, 8011c42 <_puts_r+0x9a>
 8011be0:	f04f 35ff 	mov.w	r5, #4294967295
 8011be4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011be6:	07da      	lsls	r2, r3, #31
 8011be8:	d405      	bmi.n	8011bf6 <_puts_r+0x4e>
 8011bea:	89a3      	ldrh	r3, [r4, #12]
 8011bec:	059b      	lsls	r3, r3, #22
 8011bee:	d402      	bmi.n	8011bf6 <_puts_r+0x4e>
 8011bf0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011bf2:	f000 f99d 	bl	8011f30 <__retarget_lock_release_recursive>
 8011bf6:	4628      	mov	r0, r5
 8011bf8:	bd70      	pop	{r4, r5, r6, pc}
 8011bfa:	2b00      	cmp	r3, #0
 8011bfc:	da04      	bge.n	8011c08 <_puts_r+0x60>
 8011bfe:	69a2      	ldr	r2, [r4, #24]
 8011c00:	429a      	cmp	r2, r3
 8011c02:	dc17      	bgt.n	8011c34 <_puts_r+0x8c>
 8011c04:	290a      	cmp	r1, #10
 8011c06:	d015      	beq.n	8011c34 <_puts_r+0x8c>
 8011c08:	6823      	ldr	r3, [r4, #0]
 8011c0a:	1c5a      	adds	r2, r3, #1
 8011c0c:	6022      	str	r2, [r4, #0]
 8011c0e:	7019      	strb	r1, [r3, #0]
 8011c10:	68a3      	ldr	r3, [r4, #8]
 8011c12:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011c16:	3b01      	subs	r3, #1
 8011c18:	60a3      	str	r3, [r4, #8]
 8011c1a:	2900      	cmp	r1, #0
 8011c1c:	d1ed      	bne.n	8011bfa <_puts_r+0x52>
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	da11      	bge.n	8011c46 <_puts_r+0x9e>
 8011c22:	4622      	mov	r2, r4
 8011c24:	210a      	movs	r1, #10
 8011c26:	4628      	mov	r0, r5
 8011c28:	f000 f85f 	bl	8011cea <__swbuf_r>
 8011c2c:	3001      	adds	r0, #1
 8011c2e:	d0d7      	beq.n	8011be0 <_puts_r+0x38>
 8011c30:	250a      	movs	r5, #10
 8011c32:	e7d7      	b.n	8011be4 <_puts_r+0x3c>
 8011c34:	4622      	mov	r2, r4
 8011c36:	4628      	mov	r0, r5
 8011c38:	f000 f857 	bl	8011cea <__swbuf_r>
 8011c3c:	3001      	adds	r0, #1
 8011c3e:	d1e7      	bne.n	8011c10 <_puts_r+0x68>
 8011c40:	e7ce      	b.n	8011be0 <_puts_r+0x38>
 8011c42:	3e01      	subs	r6, #1
 8011c44:	e7e4      	b.n	8011c10 <_puts_r+0x68>
 8011c46:	6823      	ldr	r3, [r4, #0]
 8011c48:	1c5a      	adds	r2, r3, #1
 8011c4a:	6022      	str	r2, [r4, #0]
 8011c4c:	220a      	movs	r2, #10
 8011c4e:	701a      	strb	r2, [r3, #0]
 8011c50:	e7ee      	b.n	8011c30 <_puts_r+0x88>
	...

08011c54 <puts>:
 8011c54:	4b02      	ldr	r3, [pc, #8]	@ (8011c60 <puts+0xc>)
 8011c56:	4601      	mov	r1, r0
 8011c58:	6818      	ldr	r0, [r3, #0]
 8011c5a:	f7ff bfa5 	b.w	8011ba8 <_puts_r>
 8011c5e:	bf00      	nop
 8011c60:	20000818 	.word	0x20000818

08011c64 <__sread>:
 8011c64:	b510      	push	{r4, lr}
 8011c66:	460c      	mov	r4, r1
 8011c68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011c6c:	f000 f900 	bl	8011e70 <_read_r>
 8011c70:	2800      	cmp	r0, #0
 8011c72:	bfab      	itete	ge
 8011c74:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8011c76:	89a3      	ldrhlt	r3, [r4, #12]
 8011c78:	181b      	addge	r3, r3, r0
 8011c7a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8011c7e:	bfac      	ite	ge
 8011c80:	6563      	strge	r3, [r4, #84]	@ 0x54
 8011c82:	81a3      	strhlt	r3, [r4, #12]
 8011c84:	bd10      	pop	{r4, pc}

08011c86 <__swrite>:
 8011c86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c8a:	461f      	mov	r7, r3
 8011c8c:	898b      	ldrh	r3, [r1, #12]
 8011c8e:	05db      	lsls	r3, r3, #23
 8011c90:	4605      	mov	r5, r0
 8011c92:	460c      	mov	r4, r1
 8011c94:	4616      	mov	r6, r2
 8011c96:	d505      	bpl.n	8011ca4 <__swrite+0x1e>
 8011c98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011c9c:	2302      	movs	r3, #2
 8011c9e:	2200      	movs	r2, #0
 8011ca0:	f000 f8d4 	bl	8011e4c <_lseek_r>
 8011ca4:	89a3      	ldrh	r3, [r4, #12]
 8011ca6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011caa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8011cae:	81a3      	strh	r3, [r4, #12]
 8011cb0:	4632      	mov	r2, r6
 8011cb2:	463b      	mov	r3, r7
 8011cb4:	4628      	mov	r0, r5
 8011cb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011cba:	f000 b8fb 	b.w	8011eb4 <_write_r>

08011cbe <__sseek>:
 8011cbe:	b510      	push	{r4, lr}
 8011cc0:	460c      	mov	r4, r1
 8011cc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011cc6:	f000 f8c1 	bl	8011e4c <_lseek_r>
 8011cca:	1c43      	adds	r3, r0, #1
 8011ccc:	89a3      	ldrh	r3, [r4, #12]
 8011cce:	bf15      	itete	ne
 8011cd0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8011cd2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8011cd6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8011cda:	81a3      	strheq	r3, [r4, #12]
 8011cdc:	bf18      	it	ne
 8011cde:	81a3      	strhne	r3, [r4, #12]
 8011ce0:	bd10      	pop	{r4, pc}

08011ce2 <__sclose>:
 8011ce2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011ce6:	f000 b8a1 	b.w	8011e2c <_close_r>

08011cea <__swbuf_r>:
 8011cea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011cec:	460e      	mov	r6, r1
 8011cee:	4614      	mov	r4, r2
 8011cf0:	4605      	mov	r5, r0
 8011cf2:	b118      	cbz	r0, 8011cfc <__swbuf_r+0x12>
 8011cf4:	6a03      	ldr	r3, [r0, #32]
 8011cf6:	b90b      	cbnz	r3, 8011cfc <__swbuf_r+0x12>
 8011cf8:	f7ff ff0e 	bl	8011b18 <__sinit>
 8011cfc:	69a3      	ldr	r3, [r4, #24]
 8011cfe:	60a3      	str	r3, [r4, #8]
 8011d00:	89a3      	ldrh	r3, [r4, #12]
 8011d02:	071a      	lsls	r2, r3, #28
 8011d04:	d501      	bpl.n	8011d0a <__swbuf_r+0x20>
 8011d06:	6923      	ldr	r3, [r4, #16]
 8011d08:	b943      	cbnz	r3, 8011d1c <__swbuf_r+0x32>
 8011d0a:	4621      	mov	r1, r4
 8011d0c:	4628      	mov	r0, r5
 8011d0e:	f000 f82b 	bl	8011d68 <__swsetup_r>
 8011d12:	b118      	cbz	r0, 8011d1c <__swbuf_r+0x32>
 8011d14:	f04f 37ff 	mov.w	r7, #4294967295
 8011d18:	4638      	mov	r0, r7
 8011d1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011d1c:	6823      	ldr	r3, [r4, #0]
 8011d1e:	6922      	ldr	r2, [r4, #16]
 8011d20:	1a98      	subs	r0, r3, r2
 8011d22:	6963      	ldr	r3, [r4, #20]
 8011d24:	b2f6      	uxtb	r6, r6
 8011d26:	4283      	cmp	r3, r0
 8011d28:	4637      	mov	r7, r6
 8011d2a:	dc05      	bgt.n	8011d38 <__swbuf_r+0x4e>
 8011d2c:	4621      	mov	r1, r4
 8011d2e:	4628      	mov	r0, r5
 8011d30:	f001 fcec 	bl	801370c <_fflush_r>
 8011d34:	2800      	cmp	r0, #0
 8011d36:	d1ed      	bne.n	8011d14 <__swbuf_r+0x2a>
 8011d38:	68a3      	ldr	r3, [r4, #8]
 8011d3a:	3b01      	subs	r3, #1
 8011d3c:	60a3      	str	r3, [r4, #8]
 8011d3e:	6823      	ldr	r3, [r4, #0]
 8011d40:	1c5a      	adds	r2, r3, #1
 8011d42:	6022      	str	r2, [r4, #0]
 8011d44:	701e      	strb	r6, [r3, #0]
 8011d46:	6962      	ldr	r2, [r4, #20]
 8011d48:	1c43      	adds	r3, r0, #1
 8011d4a:	429a      	cmp	r2, r3
 8011d4c:	d004      	beq.n	8011d58 <__swbuf_r+0x6e>
 8011d4e:	89a3      	ldrh	r3, [r4, #12]
 8011d50:	07db      	lsls	r3, r3, #31
 8011d52:	d5e1      	bpl.n	8011d18 <__swbuf_r+0x2e>
 8011d54:	2e0a      	cmp	r6, #10
 8011d56:	d1df      	bne.n	8011d18 <__swbuf_r+0x2e>
 8011d58:	4621      	mov	r1, r4
 8011d5a:	4628      	mov	r0, r5
 8011d5c:	f001 fcd6 	bl	801370c <_fflush_r>
 8011d60:	2800      	cmp	r0, #0
 8011d62:	d0d9      	beq.n	8011d18 <__swbuf_r+0x2e>
 8011d64:	e7d6      	b.n	8011d14 <__swbuf_r+0x2a>
	...

08011d68 <__swsetup_r>:
 8011d68:	b538      	push	{r3, r4, r5, lr}
 8011d6a:	4b29      	ldr	r3, [pc, #164]	@ (8011e10 <__swsetup_r+0xa8>)
 8011d6c:	4605      	mov	r5, r0
 8011d6e:	6818      	ldr	r0, [r3, #0]
 8011d70:	460c      	mov	r4, r1
 8011d72:	b118      	cbz	r0, 8011d7c <__swsetup_r+0x14>
 8011d74:	6a03      	ldr	r3, [r0, #32]
 8011d76:	b90b      	cbnz	r3, 8011d7c <__swsetup_r+0x14>
 8011d78:	f7ff fece 	bl	8011b18 <__sinit>
 8011d7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011d80:	0719      	lsls	r1, r3, #28
 8011d82:	d422      	bmi.n	8011dca <__swsetup_r+0x62>
 8011d84:	06da      	lsls	r2, r3, #27
 8011d86:	d407      	bmi.n	8011d98 <__swsetup_r+0x30>
 8011d88:	2209      	movs	r2, #9
 8011d8a:	602a      	str	r2, [r5, #0]
 8011d8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011d90:	81a3      	strh	r3, [r4, #12]
 8011d92:	f04f 30ff 	mov.w	r0, #4294967295
 8011d96:	e033      	b.n	8011e00 <__swsetup_r+0x98>
 8011d98:	0758      	lsls	r0, r3, #29
 8011d9a:	d512      	bpl.n	8011dc2 <__swsetup_r+0x5a>
 8011d9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011d9e:	b141      	cbz	r1, 8011db2 <__swsetup_r+0x4a>
 8011da0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011da4:	4299      	cmp	r1, r3
 8011da6:	d002      	beq.n	8011dae <__swsetup_r+0x46>
 8011da8:	4628      	mov	r0, r5
 8011daa:	f000 ff1d 	bl	8012be8 <_free_r>
 8011dae:	2300      	movs	r3, #0
 8011db0:	6363      	str	r3, [r4, #52]	@ 0x34
 8011db2:	89a3      	ldrh	r3, [r4, #12]
 8011db4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011db8:	81a3      	strh	r3, [r4, #12]
 8011dba:	2300      	movs	r3, #0
 8011dbc:	6063      	str	r3, [r4, #4]
 8011dbe:	6923      	ldr	r3, [r4, #16]
 8011dc0:	6023      	str	r3, [r4, #0]
 8011dc2:	89a3      	ldrh	r3, [r4, #12]
 8011dc4:	f043 0308 	orr.w	r3, r3, #8
 8011dc8:	81a3      	strh	r3, [r4, #12]
 8011dca:	6923      	ldr	r3, [r4, #16]
 8011dcc:	b94b      	cbnz	r3, 8011de2 <__swsetup_r+0x7a>
 8011dce:	89a3      	ldrh	r3, [r4, #12]
 8011dd0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011dd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011dd8:	d003      	beq.n	8011de2 <__swsetup_r+0x7a>
 8011dda:	4621      	mov	r1, r4
 8011ddc:	4628      	mov	r0, r5
 8011dde:	f001 fce3 	bl	80137a8 <__smakebuf_r>
 8011de2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011de6:	f013 0201 	ands.w	r2, r3, #1
 8011dea:	d00a      	beq.n	8011e02 <__swsetup_r+0x9a>
 8011dec:	2200      	movs	r2, #0
 8011dee:	60a2      	str	r2, [r4, #8]
 8011df0:	6962      	ldr	r2, [r4, #20]
 8011df2:	4252      	negs	r2, r2
 8011df4:	61a2      	str	r2, [r4, #24]
 8011df6:	6922      	ldr	r2, [r4, #16]
 8011df8:	b942      	cbnz	r2, 8011e0c <__swsetup_r+0xa4>
 8011dfa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011dfe:	d1c5      	bne.n	8011d8c <__swsetup_r+0x24>
 8011e00:	bd38      	pop	{r3, r4, r5, pc}
 8011e02:	0799      	lsls	r1, r3, #30
 8011e04:	bf58      	it	pl
 8011e06:	6962      	ldrpl	r2, [r4, #20]
 8011e08:	60a2      	str	r2, [r4, #8]
 8011e0a:	e7f4      	b.n	8011df6 <__swsetup_r+0x8e>
 8011e0c:	2000      	movs	r0, #0
 8011e0e:	e7f7      	b.n	8011e00 <__swsetup_r+0x98>
 8011e10:	20000818 	.word	0x20000818

08011e14 <memset>:
 8011e14:	4402      	add	r2, r0
 8011e16:	4603      	mov	r3, r0
 8011e18:	4293      	cmp	r3, r2
 8011e1a:	d100      	bne.n	8011e1e <memset+0xa>
 8011e1c:	4770      	bx	lr
 8011e1e:	f803 1b01 	strb.w	r1, [r3], #1
 8011e22:	e7f9      	b.n	8011e18 <memset+0x4>

08011e24 <_localeconv_r>:
 8011e24:	4800      	ldr	r0, [pc, #0]	@ (8011e28 <_localeconv_r+0x4>)
 8011e26:	4770      	bx	lr
 8011e28:	20000958 	.word	0x20000958

08011e2c <_close_r>:
 8011e2c:	b538      	push	{r3, r4, r5, lr}
 8011e2e:	4d06      	ldr	r5, [pc, #24]	@ (8011e48 <_close_r+0x1c>)
 8011e30:	2300      	movs	r3, #0
 8011e32:	4604      	mov	r4, r0
 8011e34:	4608      	mov	r0, r1
 8011e36:	602b      	str	r3, [r5, #0]
 8011e38:	f7f0 f828 	bl	8001e8c <_close>
 8011e3c:	1c43      	adds	r3, r0, #1
 8011e3e:	d102      	bne.n	8011e46 <_close_r+0x1a>
 8011e40:	682b      	ldr	r3, [r5, #0]
 8011e42:	b103      	cbz	r3, 8011e46 <_close_r+0x1a>
 8011e44:	6023      	str	r3, [r4, #0]
 8011e46:	bd38      	pop	{r3, r4, r5, pc}
 8011e48:	20005dd0 	.word	0x20005dd0

08011e4c <_lseek_r>:
 8011e4c:	b538      	push	{r3, r4, r5, lr}
 8011e4e:	4d07      	ldr	r5, [pc, #28]	@ (8011e6c <_lseek_r+0x20>)
 8011e50:	4604      	mov	r4, r0
 8011e52:	4608      	mov	r0, r1
 8011e54:	4611      	mov	r1, r2
 8011e56:	2200      	movs	r2, #0
 8011e58:	602a      	str	r2, [r5, #0]
 8011e5a:	461a      	mov	r2, r3
 8011e5c:	f7f0 f83d 	bl	8001eda <_lseek>
 8011e60:	1c43      	adds	r3, r0, #1
 8011e62:	d102      	bne.n	8011e6a <_lseek_r+0x1e>
 8011e64:	682b      	ldr	r3, [r5, #0]
 8011e66:	b103      	cbz	r3, 8011e6a <_lseek_r+0x1e>
 8011e68:	6023      	str	r3, [r4, #0]
 8011e6a:	bd38      	pop	{r3, r4, r5, pc}
 8011e6c:	20005dd0 	.word	0x20005dd0

08011e70 <_read_r>:
 8011e70:	b538      	push	{r3, r4, r5, lr}
 8011e72:	4d07      	ldr	r5, [pc, #28]	@ (8011e90 <_read_r+0x20>)
 8011e74:	4604      	mov	r4, r0
 8011e76:	4608      	mov	r0, r1
 8011e78:	4611      	mov	r1, r2
 8011e7a:	2200      	movs	r2, #0
 8011e7c:	602a      	str	r2, [r5, #0]
 8011e7e:	461a      	mov	r2, r3
 8011e80:	f7ef ffcb 	bl	8001e1a <_read>
 8011e84:	1c43      	adds	r3, r0, #1
 8011e86:	d102      	bne.n	8011e8e <_read_r+0x1e>
 8011e88:	682b      	ldr	r3, [r5, #0]
 8011e8a:	b103      	cbz	r3, 8011e8e <_read_r+0x1e>
 8011e8c:	6023      	str	r3, [r4, #0]
 8011e8e:	bd38      	pop	{r3, r4, r5, pc}
 8011e90:	20005dd0 	.word	0x20005dd0

08011e94 <_sbrk_r>:
 8011e94:	b538      	push	{r3, r4, r5, lr}
 8011e96:	4d06      	ldr	r5, [pc, #24]	@ (8011eb0 <_sbrk_r+0x1c>)
 8011e98:	2300      	movs	r3, #0
 8011e9a:	4604      	mov	r4, r0
 8011e9c:	4608      	mov	r0, r1
 8011e9e:	602b      	str	r3, [r5, #0]
 8011ea0:	f7f0 f828 	bl	8001ef4 <_sbrk>
 8011ea4:	1c43      	adds	r3, r0, #1
 8011ea6:	d102      	bne.n	8011eae <_sbrk_r+0x1a>
 8011ea8:	682b      	ldr	r3, [r5, #0]
 8011eaa:	b103      	cbz	r3, 8011eae <_sbrk_r+0x1a>
 8011eac:	6023      	str	r3, [r4, #0]
 8011eae:	bd38      	pop	{r3, r4, r5, pc}
 8011eb0:	20005dd0 	.word	0x20005dd0

08011eb4 <_write_r>:
 8011eb4:	b538      	push	{r3, r4, r5, lr}
 8011eb6:	4d07      	ldr	r5, [pc, #28]	@ (8011ed4 <_write_r+0x20>)
 8011eb8:	4604      	mov	r4, r0
 8011eba:	4608      	mov	r0, r1
 8011ebc:	4611      	mov	r1, r2
 8011ebe:	2200      	movs	r2, #0
 8011ec0:	602a      	str	r2, [r5, #0]
 8011ec2:	461a      	mov	r2, r3
 8011ec4:	f7ef ffc6 	bl	8001e54 <_write>
 8011ec8:	1c43      	adds	r3, r0, #1
 8011eca:	d102      	bne.n	8011ed2 <_write_r+0x1e>
 8011ecc:	682b      	ldr	r3, [r5, #0]
 8011ece:	b103      	cbz	r3, 8011ed2 <_write_r+0x1e>
 8011ed0:	6023      	str	r3, [r4, #0]
 8011ed2:	bd38      	pop	{r3, r4, r5, pc}
 8011ed4:	20005dd0 	.word	0x20005dd0

08011ed8 <__errno>:
 8011ed8:	4b01      	ldr	r3, [pc, #4]	@ (8011ee0 <__errno+0x8>)
 8011eda:	6818      	ldr	r0, [r3, #0]
 8011edc:	4770      	bx	lr
 8011ede:	bf00      	nop
 8011ee0:	20000818 	.word	0x20000818

08011ee4 <__libc_init_array>:
 8011ee4:	b570      	push	{r4, r5, r6, lr}
 8011ee6:	4d0d      	ldr	r5, [pc, #52]	@ (8011f1c <__libc_init_array+0x38>)
 8011ee8:	4c0d      	ldr	r4, [pc, #52]	@ (8011f20 <__libc_init_array+0x3c>)
 8011eea:	1b64      	subs	r4, r4, r5
 8011eec:	10a4      	asrs	r4, r4, #2
 8011eee:	2600      	movs	r6, #0
 8011ef0:	42a6      	cmp	r6, r4
 8011ef2:	d109      	bne.n	8011f08 <__libc_init_array+0x24>
 8011ef4:	4d0b      	ldr	r5, [pc, #44]	@ (8011f24 <__libc_init_array+0x40>)
 8011ef6:	4c0c      	ldr	r4, [pc, #48]	@ (8011f28 <__libc_init_array+0x44>)
 8011ef8:	f001 fd64 	bl	80139c4 <_init>
 8011efc:	1b64      	subs	r4, r4, r5
 8011efe:	10a4      	asrs	r4, r4, #2
 8011f00:	2600      	movs	r6, #0
 8011f02:	42a6      	cmp	r6, r4
 8011f04:	d105      	bne.n	8011f12 <__libc_init_array+0x2e>
 8011f06:	bd70      	pop	{r4, r5, r6, pc}
 8011f08:	f855 3b04 	ldr.w	r3, [r5], #4
 8011f0c:	4798      	blx	r3
 8011f0e:	3601      	adds	r6, #1
 8011f10:	e7ee      	b.n	8011ef0 <__libc_init_array+0xc>
 8011f12:	f855 3b04 	ldr.w	r3, [r5], #4
 8011f16:	4798      	blx	r3
 8011f18:	3601      	adds	r6, #1
 8011f1a:	e7f2      	b.n	8011f02 <__libc_init_array+0x1e>
 8011f1c:	080bdd70 	.word	0x080bdd70
 8011f20:	080bdd70 	.word	0x080bdd70
 8011f24:	080bdd70 	.word	0x080bdd70
 8011f28:	080bdd74 	.word	0x080bdd74

08011f2c <__retarget_lock_init_recursive>:
 8011f2c:	4770      	bx	lr

08011f2e <__retarget_lock_acquire_recursive>:
 8011f2e:	4770      	bx	lr

08011f30 <__retarget_lock_release_recursive>:
 8011f30:	4770      	bx	lr

08011f32 <memcpy>:
 8011f32:	440a      	add	r2, r1
 8011f34:	4291      	cmp	r1, r2
 8011f36:	f100 33ff 	add.w	r3, r0, #4294967295
 8011f3a:	d100      	bne.n	8011f3e <memcpy+0xc>
 8011f3c:	4770      	bx	lr
 8011f3e:	b510      	push	{r4, lr}
 8011f40:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011f44:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011f48:	4291      	cmp	r1, r2
 8011f4a:	d1f9      	bne.n	8011f40 <memcpy+0xe>
 8011f4c:	bd10      	pop	{r4, pc}

08011f4e <quorem>:
 8011f4e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f52:	6903      	ldr	r3, [r0, #16]
 8011f54:	690c      	ldr	r4, [r1, #16]
 8011f56:	42a3      	cmp	r3, r4
 8011f58:	4607      	mov	r7, r0
 8011f5a:	db7e      	blt.n	801205a <quorem+0x10c>
 8011f5c:	3c01      	subs	r4, #1
 8011f5e:	f101 0814 	add.w	r8, r1, #20
 8011f62:	00a3      	lsls	r3, r4, #2
 8011f64:	f100 0514 	add.w	r5, r0, #20
 8011f68:	9300      	str	r3, [sp, #0]
 8011f6a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011f6e:	9301      	str	r3, [sp, #4]
 8011f70:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011f74:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011f78:	3301      	adds	r3, #1
 8011f7a:	429a      	cmp	r2, r3
 8011f7c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011f80:	fbb2 f6f3 	udiv	r6, r2, r3
 8011f84:	d32e      	bcc.n	8011fe4 <quorem+0x96>
 8011f86:	f04f 0a00 	mov.w	sl, #0
 8011f8a:	46c4      	mov	ip, r8
 8011f8c:	46ae      	mov	lr, r5
 8011f8e:	46d3      	mov	fp, sl
 8011f90:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011f94:	b298      	uxth	r0, r3
 8011f96:	fb06 a000 	mla	r0, r6, r0, sl
 8011f9a:	0c02      	lsrs	r2, r0, #16
 8011f9c:	0c1b      	lsrs	r3, r3, #16
 8011f9e:	fb06 2303 	mla	r3, r6, r3, r2
 8011fa2:	f8de 2000 	ldr.w	r2, [lr]
 8011fa6:	b280      	uxth	r0, r0
 8011fa8:	b292      	uxth	r2, r2
 8011faa:	1a12      	subs	r2, r2, r0
 8011fac:	445a      	add	r2, fp
 8011fae:	f8de 0000 	ldr.w	r0, [lr]
 8011fb2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011fb6:	b29b      	uxth	r3, r3
 8011fb8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8011fbc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8011fc0:	b292      	uxth	r2, r2
 8011fc2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8011fc6:	45e1      	cmp	r9, ip
 8011fc8:	f84e 2b04 	str.w	r2, [lr], #4
 8011fcc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8011fd0:	d2de      	bcs.n	8011f90 <quorem+0x42>
 8011fd2:	9b00      	ldr	r3, [sp, #0]
 8011fd4:	58eb      	ldr	r3, [r5, r3]
 8011fd6:	b92b      	cbnz	r3, 8011fe4 <quorem+0x96>
 8011fd8:	9b01      	ldr	r3, [sp, #4]
 8011fda:	3b04      	subs	r3, #4
 8011fdc:	429d      	cmp	r5, r3
 8011fde:	461a      	mov	r2, r3
 8011fe0:	d32f      	bcc.n	8012042 <quorem+0xf4>
 8011fe2:	613c      	str	r4, [r7, #16]
 8011fe4:	4638      	mov	r0, r7
 8011fe6:	f001 f8c3 	bl	8013170 <__mcmp>
 8011fea:	2800      	cmp	r0, #0
 8011fec:	db25      	blt.n	801203a <quorem+0xec>
 8011fee:	4629      	mov	r1, r5
 8011ff0:	2000      	movs	r0, #0
 8011ff2:	f858 2b04 	ldr.w	r2, [r8], #4
 8011ff6:	f8d1 c000 	ldr.w	ip, [r1]
 8011ffa:	fa1f fe82 	uxth.w	lr, r2
 8011ffe:	fa1f f38c 	uxth.w	r3, ip
 8012002:	eba3 030e 	sub.w	r3, r3, lr
 8012006:	4403      	add	r3, r0
 8012008:	0c12      	lsrs	r2, r2, #16
 801200a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801200e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8012012:	b29b      	uxth	r3, r3
 8012014:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012018:	45c1      	cmp	r9, r8
 801201a:	f841 3b04 	str.w	r3, [r1], #4
 801201e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8012022:	d2e6      	bcs.n	8011ff2 <quorem+0xa4>
 8012024:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012028:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801202c:	b922      	cbnz	r2, 8012038 <quorem+0xea>
 801202e:	3b04      	subs	r3, #4
 8012030:	429d      	cmp	r5, r3
 8012032:	461a      	mov	r2, r3
 8012034:	d30b      	bcc.n	801204e <quorem+0x100>
 8012036:	613c      	str	r4, [r7, #16]
 8012038:	3601      	adds	r6, #1
 801203a:	4630      	mov	r0, r6
 801203c:	b003      	add	sp, #12
 801203e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012042:	6812      	ldr	r2, [r2, #0]
 8012044:	3b04      	subs	r3, #4
 8012046:	2a00      	cmp	r2, #0
 8012048:	d1cb      	bne.n	8011fe2 <quorem+0x94>
 801204a:	3c01      	subs	r4, #1
 801204c:	e7c6      	b.n	8011fdc <quorem+0x8e>
 801204e:	6812      	ldr	r2, [r2, #0]
 8012050:	3b04      	subs	r3, #4
 8012052:	2a00      	cmp	r2, #0
 8012054:	d1ef      	bne.n	8012036 <quorem+0xe8>
 8012056:	3c01      	subs	r4, #1
 8012058:	e7ea      	b.n	8012030 <quorem+0xe2>
 801205a:	2000      	movs	r0, #0
 801205c:	e7ee      	b.n	801203c <quorem+0xee>
	...

08012060 <_dtoa_r>:
 8012060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012064:	69c7      	ldr	r7, [r0, #28]
 8012066:	b099      	sub	sp, #100	@ 0x64
 8012068:	ed8d 0b02 	vstr	d0, [sp, #8]
 801206c:	ec55 4b10 	vmov	r4, r5, d0
 8012070:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8012072:	9109      	str	r1, [sp, #36]	@ 0x24
 8012074:	4683      	mov	fp, r0
 8012076:	920e      	str	r2, [sp, #56]	@ 0x38
 8012078:	9313      	str	r3, [sp, #76]	@ 0x4c
 801207a:	b97f      	cbnz	r7, 801209c <_dtoa_r+0x3c>
 801207c:	2010      	movs	r0, #16
 801207e:	f7fe ffb1 	bl	8010fe4 <malloc>
 8012082:	4602      	mov	r2, r0
 8012084:	f8cb 001c 	str.w	r0, [fp, #28]
 8012088:	b920      	cbnz	r0, 8012094 <_dtoa_r+0x34>
 801208a:	4ba7      	ldr	r3, [pc, #668]	@ (8012328 <_dtoa_r+0x2c8>)
 801208c:	21ef      	movs	r1, #239	@ 0xef
 801208e:	48a7      	ldr	r0, [pc, #668]	@ (801232c <_dtoa_r+0x2cc>)
 8012090:	f001 fbe8 	bl	8013864 <__assert_func>
 8012094:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8012098:	6007      	str	r7, [r0, #0]
 801209a:	60c7      	str	r7, [r0, #12]
 801209c:	f8db 301c 	ldr.w	r3, [fp, #28]
 80120a0:	6819      	ldr	r1, [r3, #0]
 80120a2:	b159      	cbz	r1, 80120bc <_dtoa_r+0x5c>
 80120a4:	685a      	ldr	r2, [r3, #4]
 80120a6:	604a      	str	r2, [r1, #4]
 80120a8:	2301      	movs	r3, #1
 80120aa:	4093      	lsls	r3, r2
 80120ac:	608b      	str	r3, [r1, #8]
 80120ae:	4658      	mov	r0, fp
 80120b0:	f000 fe24 	bl	8012cfc <_Bfree>
 80120b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80120b8:	2200      	movs	r2, #0
 80120ba:	601a      	str	r2, [r3, #0]
 80120bc:	1e2b      	subs	r3, r5, #0
 80120be:	bfb9      	ittee	lt
 80120c0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80120c4:	9303      	strlt	r3, [sp, #12]
 80120c6:	2300      	movge	r3, #0
 80120c8:	6033      	strge	r3, [r6, #0]
 80120ca:	9f03      	ldr	r7, [sp, #12]
 80120cc:	4b98      	ldr	r3, [pc, #608]	@ (8012330 <_dtoa_r+0x2d0>)
 80120ce:	bfbc      	itt	lt
 80120d0:	2201      	movlt	r2, #1
 80120d2:	6032      	strlt	r2, [r6, #0]
 80120d4:	43bb      	bics	r3, r7
 80120d6:	d112      	bne.n	80120fe <_dtoa_r+0x9e>
 80120d8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80120da:	f242 730f 	movw	r3, #9999	@ 0x270f
 80120de:	6013      	str	r3, [r2, #0]
 80120e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80120e4:	4323      	orrs	r3, r4
 80120e6:	f000 854d 	beq.w	8012b84 <_dtoa_r+0xb24>
 80120ea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80120ec:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8012344 <_dtoa_r+0x2e4>
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	f000 854f 	beq.w	8012b94 <_dtoa_r+0xb34>
 80120f6:	f10a 0303 	add.w	r3, sl, #3
 80120fa:	f000 bd49 	b.w	8012b90 <_dtoa_r+0xb30>
 80120fe:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012102:	2200      	movs	r2, #0
 8012104:	ec51 0b17 	vmov	r0, r1, d7
 8012108:	2300      	movs	r3, #0
 801210a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 801210e:	f7ee fcfb 	bl	8000b08 <__aeabi_dcmpeq>
 8012112:	4680      	mov	r8, r0
 8012114:	b158      	cbz	r0, 801212e <_dtoa_r+0xce>
 8012116:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8012118:	2301      	movs	r3, #1
 801211a:	6013      	str	r3, [r2, #0]
 801211c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801211e:	b113      	cbz	r3, 8012126 <_dtoa_r+0xc6>
 8012120:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8012122:	4b84      	ldr	r3, [pc, #528]	@ (8012334 <_dtoa_r+0x2d4>)
 8012124:	6013      	str	r3, [r2, #0]
 8012126:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8012348 <_dtoa_r+0x2e8>
 801212a:	f000 bd33 	b.w	8012b94 <_dtoa_r+0xb34>
 801212e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8012132:	aa16      	add	r2, sp, #88	@ 0x58
 8012134:	a917      	add	r1, sp, #92	@ 0x5c
 8012136:	4658      	mov	r0, fp
 8012138:	f001 f8ca 	bl	80132d0 <__d2b>
 801213c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8012140:	4681      	mov	r9, r0
 8012142:	2e00      	cmp	r6, #0
 8012144:	d077      	beq.n	8012236 <_dtoa_r+0x1d6>
 8012146:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012148:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801214c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012150:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012154:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8012158:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801215c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8012160:	4619      	mov	r1, r3
 8012162:	2200      	movs	r2, #0
 8012164:	4b74      	ldr	r3, [pc, #464]	@ (8012338 <_dtoa_r+0x2d8>)
 8012166:	f7ee f8af 	bl	80002c8 <__aeabi_dsub>
 801216a:	a369      	add	r3, pc, #420	@ (adr r3, 8012310 <_dtoa_r+0x2b0>)
 801216c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012170:	f7ee fa62 	bl	8000638 <__aeabi_dmul>
 8012174:	a368      	add	r3, pc, #416	@ (adr r3, 8012318 <_dtoa_r+0x2b8>)
 8012176:	e9d3 2300 	ldrd	r2, r3, [r3]
 801217a:	f7ee f8a7 	bl	80002cc <__adddf3>
 801217e:	4604      	mov	r4, r0
 8012180:	4630      	mov	r0, r6
 8012182:	460d      	mov	r5, r1
 8012184:	f7ee f9ee 	bl	8000564 <__aeabi_i2d>
 8012188:	a365      	add	r3, pc, #404	@ (adr r3, 8012320 <_dtoa_r+0x2c0>)
 801218a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801218e:	f7ee fa53 	bl	8000638 <__aeabi_dmul>
 8012192:	4602      	mov	r2, r0
 8012194:	460b      	mov	r3, r1
 8012196:	4620      	mov	r0, r4
 8012198:	4629      	mov	r1, r5
 801219a:	f7ee f897 	bl	80002cc <__adddf3>
 801219e:	4604      	mov	r4, r0
 80121a0:	460d      	mov	r5, r1
 80121a2:	f7ee fcf9 	bl	8000b98 <__aeabi_d2iz>
 80121a6:	2200      	movs	r2, #0
 80121a8:	4607      	mov	r7, r0
 80121aa:	2300      	movs	r3, #0
 80121ac:	4620      	mov	r0, r4
 80121ae:	4629      	mov	r1, r5
 80121b0:	f7ee fcb4 	bl	8000b1c <__aeabi_dcmplt>
 80121b4:	b140      	cbz	r0, 80121c8 <_dtoa_r+0x168>
 80121b6:	4638      	mov	r0, r7
 80121b8:	f7ee f9d4 	bl	8000564 <__aeabi_i2d>
 80121bc:	4622      	mov	r2, r4
 80121be:	462b      	mov	r3, r5
 80121c0:	f7ee fca2 	bl	8000b08 <__aeabi_dcmpeq>
 80121c4:	b900      	cbnz	r0, 80121c8 <_dtoa_r+0x168>
 80121c6:	3f01      	subs	r7, #1
 80121c8:	2f16      	cmp	r7, #22
 80121ca:	d851      	bhi.n	8012270 <_dtoa_r+0x210>
 80121cc:	4b5b      	ldr	r3, [pc, #364]	@ (801233c <_dtoa_r+0x2dc>)
 80121ce:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80121d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80121da:	f7ee fc9f 	bl	8000b1c <__aeabi_dcmplt>
 80121de:	2800      	cmp	r0, #0
 80121e0:	d048      	beq.n	8012274 <_dtoa_r+0x214>
 80121e2:	3f01      	subs	r7, #1
 80121e4:	2300      	movs	r3, #0
 80121e6:	9312      	str	r3, [sp, #72]	@ 0x48
 80121e8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80121ea:	1b9b      	subs	r3, r3, r6
 80121ec:	1e5a      	subs	r2, r3, #1
 80121ee:	bf44      	itt	mi
 80121f0:	f1c3 0801 	rsbmi	r8, r3, #1
 80121f4:	2300      	movmi	r3, #0
 80121f6:	9208      	str	r2, [sp, #32]
 80121f8:	bf54      	ite	pl
 80121fa:	f04f 0800 	movpl.w	r8, #0
 80121fe:	9308      	strmi	r3, [sp, #32]
 8012200:	2f00      	cmp	r7, #0
 8012202:	db39      	blt.n	8012278 <_dtoa_r+0x218>
 8012204:	9b08      	ldr	r3, [sp, #32]
 8012206:	970f      	str	r7, [sp, #60]	@ 0x3c
 8012208:	443b      	add	r3, r7
 801220a:	9308      	str	r3, [sp, #32]
 801220c:	2300      	movs	r3, #0
 801220e:	930a      	str	r3, [sp, #40]	@ 0x28
 8012210:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012212:	2b09      	cmp	r3, #9
 8012214:	d864      	bhi.n	80122e0 <_dtoa_r+0x280>
 8012216:	2b05      	cmp	r3, #5
 8012218:	bfc4      	itt	gt
 801221a:	3b04      	subgt	r3, #4
 801221c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801221e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012220:	f1a3 0302 	sub.w	r3, r3, #2
 8012224:	bfcc      	ite	gt
 8012226:	2400      	movgt	r4, #0
 8012228:	2401      	movle	r4, #1
 801222a:	2b03      	cmp	r3, #3
 801222c:	d863      	bhi.n	80122f6 <_dtoa_r+0x296>
 801222e:	e8df f003 	tbb	[pc, r3]
 8012232:	372a      	.short	0x372a
 8012234:	5535      	.short	0x5535
 8012236:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 801223a:	441e      	add	r6, r3
 801223c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8012240:	2b20      	cmp	r3, #32
 8012242:	bfc1      	itttt	gt
 8012244:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8012248:	409f      	lslgt	r7, r3
 801224a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801224e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8012252:	bfd6      	itet	le
 8012254:	f1c3 0320 	rsble	r3, r3, #32
 8012258:	ea47 0003 	orrgt.w	r0, r7, r3
 801225c:	fa04 f003 	lslle.w	r0, r4, r3
 8012260:	f7ee f970 	bl	8000544 <__aeabi_ui2d>
 8012264:	2201      	movs	r2, #1
 8012266:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801226a:	3e01      	subs	r6, #1
 801226c:	9214      	str	r2, [sp, #80]	@ 0x50
 801226e:	e777      	b.n	8012160 <_dtoa_r+0x100>
 8012270:	2301      	movs	r3, #1
 8012272:	e7b8      	b.n	80121e6 <_dtoa_r+0x186>
 8012274:	9012      	str	r0, [sp, #72]	@ 0x48
 8012276:	e7b7      	b.n	80121e8 <_dtoa_r+0x188>
 8012278:	427b      	negs	r3, r7
 801227a:	930a      	str	r3, [sp, #40]	@ 0x28
 801227c:	2300      	movs	r3, #0
 801227e:	eba8 0807 	sub.w	r8, r8, r7
 8012282:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012284:	e7c4      	b.n	8012210 <_dtoa_r+0x1b0>
 8012286:	2300      	movs	r3, #0
 8012288:	930b      	str	r3, [sp, #44]	@ 0x2c
 801228a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801228c:	2b00      	cmp	r3, #0
 801228e:	dc35      	bgt.n	80122fc <_dtoa_r+0x29c>
 8012290:	2301      	movs	r3, #1
 8012292:	9300      	str	r3, [sp, #0]
 8012294:	9307      	str	r3, [sp, #28]
 8012296:	461a      	mov	r2, r3
 8012298:	920e      	str	r2, [sp, #56]	@ 0x38
 801229a:	e00b      	b.n	80122b4 <_dtoa_r+0x254>
 801229c:	2301      	movs	r3, #1
 801229e:	e7f3      	b.n	8012288 <_dtoa_r+0x228>
 80122a0:	2300      	movs	r3, #0
 80122a2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80122a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80122a6:	18fb      	adds	r3, r7, r3
 80122a8:	9300      	str	r3, [sp, #0]
 80122aa:	3301      	adds	r3, #1
 80122ac:	2b01      	cmp	r3, #1
 80122ae:	9307      	str	r3, [sp, #28]
 80122b0:	bfb8      	it	lt
 80122b2:	2301      	movlt	r3, #1
 80122b4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80122b8:	2100      	movs	r1, #0
 80122ba:	2204      	movs	r2, #4
 80122bc:	f102 0514 	add.w	r5, r2, #20
 80122c0:	429d      	cmp	r5, r3
 80122c2:	d91f      	bls.n	8012304 <_dtoa_r+0x2a4>
 80122c4:	6041      	str	r1, [r0, #4]
 80122c6:	4658      	mov	r0, fp
 80122c8:	f000 fcd8 	bl	8012c7c <_Balloc>
 80122cc:	4682      	mov	sl, r0
 80122ce:	2800      	cmp	r0, #0
 80122d0:	d13c      	bne.n	801234c <_dtoa_r+0x2ec>
 80122d2:	4b1b      	ldr	r3, [pc, #108]	@ (8012340 <_dtoa_r+0x2e0>)
 80122d4:	4602      	mov	r2, r0
 80122d6:	f240 11af 	movw	r1, #431	@ 0x1af
 80122da:	e6d8      	b.n	801208e <_dtoa_r+0x2e>
 80122dc:	2301      	movs	r3, #1
 80122de:	e7e0      	b.n	80122a2 <_dtoa_r+0x242>
 80122e0:	2401      	movs	r4, #1
 80122e2:	2300      	movs	r3, #0
 80122e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80122e6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80122e8:	f04f 33ff 	mov.w	r3, #4294967295
 80122ec:	9300      	str	r3, [sp, #0]
 80122ee:	9307      	str	r3, [sp, #28]
 80122f0:	2200      	movs	r2, #0
 80122f2:	2312      	movs	r3, #18
 80122f4:	e7d0      	b.n	8012298 <_dtoa_r+0x238>
 80122f6:	2301      	movs	r3, #1
 80122f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80122fa:	e7f5      	b.n	80122e8 <_dtoa_r+0x288>
 80122fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80122fe:	9300      	str	r3, [sp, #0]
 8012300:	9307      	str	r3, [sp, #28]
 8012302:	e7d7      	b.n	80122b4 <_dtoa_r+0x254>
 8012304:	3101      	adds	r1, #1
 8012306:	0052      	lsls	r2, r2, #1
 8012308:	e7d8      	b.n	80122bc <_dtoa_r+0x25c>
 801230a:	bf00      	nop
 801230c:	f3af 8000 	nop.w
 8012310:	636f4361 	.word	0x636f4361
 8012314:	3fd287a7 	.word	0x3fd287a7
 8012318:	8b60c8b3 	.word	0x8b60c8b3
 801231c:	3fc68a28 	.word	0x3fc68a28
 8012320:	509f79fb 	.word	0x509f79fb
 8012324:	3fd34413 	.word	0x3fd34413
 8012328:	080bda39 	.word	0x080bda39
 801232c:	080bda50 	.word	0x080bda50
 8012330:	7ff00000 	.word	0x7ff00000
 8012334:	080bda09 	.word	0x080bda09
 8012338:	3ff80000 	.word	0x3ff80000
 801233c:	080bdb48 	.word	0x080bdb48
 8012340:	080bdaa8 	.word	0x080bdaa8
 8012344:	080bda35 	.word	0x080bda35
 8012348:	080bda08 	.word	0x080bda08
 801234c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8012350:	6018      	str	r0, [r3, #0]
 8012352:	9b07      	ldr	r3, [sp, #28]
 8012354:	2b0e      	cmp	r3, #14
 8012356:	f200 80a4 	bhi.w	80124a2 <_dtoa_r+0x442>
 801235a:	2c00      	cmp	r4, #0
 801235c:	f000 80a1 	beq.w	80124a2 <_dtoa_r+0x442>
 8012360:	2f00      	cmp	r7, #0
 8012362:	dd33      	ble.n	80123cc <_dtoa_r+0x36c>
 8012364:	4bad      	ldr	r3, [pc, #692]	@ (801261c <_dtoa_r+0x5bc>)
 8012366:	f007 020f 	and.w	r2, r7, #15
 801236a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801236e:	ed93 7b00 	vldr	d7, [r3]
 8012372:	05f8      	lsls	r0, r7, #23
 8012374:	ed8d 7b04 	vstr	d7, [sp, #16]
 8012378:	ea4f 1427 	mov.w	r4, r7, asr #4
 801237c:	d516      	bpl.n	80123ac <_dtoa_r+0x34c>
 801237e:	4ba8      	ldr	r3, [pc, #672]	@ (8012620 <_dtoa_r+0x5c0>)
 8012380:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012384:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012388:	f7ee fa80 	bl	800088c <__aeabi_ddiv>
 801238c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012390:	f004 040f 	and.w	r4, r4, #15
 8012394:	2603      	movs	r6, #3
 8012396:	4da2      	ldr	r5, [pc, #648]	@ (8012620 <_dtoa_r+0x5c0>)
 8012398:	b954      	cbnz	r4, 80123b0 <_dtoa_r+0x350>
 801239a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801239e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80123a2:	f7ee fa73 	bl	800088c <__aeabi_ddiv>
 80123a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80123aa:	e028      	b.n	80123fe <_dtoa_r+0x39e>
 80123ac:	2602      	movs	r6, #2
 80123ae:	e7f2      	b.n	8012396 <_dtoa_r+0x336>
 80123b0:	07e1      	lsls	r1, r4, #31
 80123b2:	d508      	bpl.n	80123c6 <_dtoa_r+0x366>
 80123b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80123b8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80123bc:	f7ee f93c 	bl	8000638 <__aeabi_dmul>
 80123c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80123c4:	3601      	adds	r6, #1
 80123c6:	1064      	asrs	r4, r4, #1
 80123c8:	3508      	adds	r5, #8
 80123ca:	e7e5      	b.n	8012398 <_dtoa_r+0x338>
 80123cc:	f000 80d2 	beq.w	8012574 <_dtoa_r+0x514>
 80123d0:	427c      	negs	r4, r7
 80123d2:	4b92      	ldr	r3, [pc, #584]	@ (801261c <_dtoa_r+0x5bc>)
 80123d4:	4d92      	ldr	r5, [pc, #584]	@ (8012620 <_dtoa_r+0x5c0>)
 80123d6:	f004 020f 	and.w	r2, r4, #15
 80123da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80123de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123e2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80123e6:	f7ee f927 	bl	8000638 <__aeabi_dmul>
 80123ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80123ee:	1124      	asrs	r4, r4, #4
 80123f0:	2300      	movs	r3, #0
 80123f2:	2602      	movs	r6, #2
 80123f4:	2c00      	cmp	r4, #0
 80123f6:	f040 80b2 	bne.w	801255e <_dtoa_r+0x4fe>
 80123fa:	2b00      	cmp	r3, #0
 80123fc:	d1d3      	bne.n	80123a6 <_dtoa_r+0x346>
 80123fe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8012400:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8012404:	2b00      	cmp	r3, #0
 8012406:	f000 80b7 	beq.w	8012578 <_dtoa_r+0x518>
 801240a:	4b86      	ldr	r3, [pc, #536]	@ (8012624 <_dtoa_r+0x5c4>)
 801240c:	2200      	movs	r2, #0
 801240e:	4620      	mov	r0, r4
 8012410:	4629      	mov	r1, r5
 8012412:	f7ee fb83 	bl	8000b1c <__aeabi_dcmplt>
 8012416:	2800      	cmp	r0, #0
 8012418:	f000 80ae 	beq.w	8012578 <_dtoa_r+0x518>
 801241c:	9b07      	ldr	r3, [sp, #28]
 801241e:	2b00      	cmp	r3, #0
 8012420:	f000 80aa 	beq.w	8012578 <_dtoa_r+0x518>
 8012424:	9b00      	ldr	r3, [sp, #0]
 8012426:	2b00      	cmp	r3, #0
 8012428:	dd37      	ble.n	801249a <_dtoa_r+0x43a>
 801242a:	1e7b      	subs	r3, r7, #1
 801242c:	9304      	str	r3, [sp, #16]
 801242e:	4620      	mov	r0, r4
 8012430:	4b7d      	ldr	r3, [pc, #500]	@ (8012628 <_dtoa_r+0x5c8>)
 8012432:	2200      	movs	r2, #0
 8012434:	4629      	mov	r1, r5
 8012436:	f7ee f8ff 	bl	8000638 <__aeabi_dmul>
 801243a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801243e:	9c00      	ldr	r4, [sp, #0]
 8012440:	3601      	adds	r6, #1
 8012442:	4630      	mov	r0, r6
 8012444:	f7ee f88e 	bl	8000564 <__aeabi_i2d>
 8012448:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801244c:	f7ee f8f4 	bl	8000638 <__aeabi_dmul>
 8012450:	4b76      	ldr	r3, [pc, #472]	@ (801262c <_dtoa_r+0x5cc>)
 8012452:	2200      	movs	r2, #0
 8012454:	f7ed ff3a 	bl	80002cc <__adddf3>
 8012458:	4605      	mov	r5, r0
 801245a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801245e:	2c00      	cmp	r4, #0
 8012460:	f040 808d 	bne.w	801257e <_dtoa_r+0x51e>
 8012464:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012468:	4b71      	ldr	r3, [pc, #452]	@ (8012630 <_dtoa_r+0x5d0>)
 801246a:	2200      	movs	r2, #0
 801246c:	f7ed ff2c 	bl	80002c8 <__aeabi_dsub>
 8012470:	4602      	mov	r2, r0
 8012472:	460b      	mov	r3, r1
 8012474:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012478:	462a      	mov	r2, r5
 801247a:	4633      	mov	r3, r6
 801247c:	f7ee fb6c 	bl	8000b58 <__aeabi_dcmpgt>
 8012480:	2800      	cmp	r0, #0
 8012482:	f040 828b 	bne.w	801299c <_dtoa_r+0x93c>
 8012486:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801248a:	462a      	mov	r2, r5
 801248c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8012490:	f7ee fb44 	bl	8000b1c <__aeabi_dcmplt>
 8012494:	2800      	cmp	r0, #0
 8012496:	f040 8128 	bne.w	80126ea <_dtoa_r+0x68a>
 801249a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801249e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80124a2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80124a4:	2b00      	cmp	r3, #0
 80124a6:	f2c0 815a 	blt.w	801275e <_dtoa_r+0x6fe>
 80124aa:	2f0e      	cmp	r7, #14
 80124ac:	f300 8157 	bgt.w	801275e <_dtoa_r+0x6fe>
 80124b0:	4b5a      	ldr	r3, [pc, #360]	@ (801261c <_dtoa_r+0x5bc>)
 80124b2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80124b6:	ed93 7b00 	vldr	d7, [r3]
 80124ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80124bc:	2b00      	cmp	r3, #0
 80124be:	ed8d 7b00 	vstr	d7, [sp]
 80124c2:	da03      	bge.n	80124cc <_dtoa_r+0x46c>
 80124c4:	9b07      	ldr	r3, [sp, #28]
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	f340 8101 	ble.w	80126ce <_dtoa_r+0x66e>
 80124cc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80124d0:	4656      	mov	r6, sl
 80124d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80124d6:	4620      	mov	r0, r4
 80124d8:	4629      	mov	r1, r5
 80124da:	f7ee f9d7 	bl	800088c <__aeabi_ddiv>
 80124de:	f7ee fb5b 	bl	8000b98 <__aeabi_d2iz>
 80124e2:	4680      	mov	r8, r0
 80124e4:	f7ee f83e 	bl	8000564 <__aeabi_i2d>
 80124e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80124ec:	f7ee f8a4 	bl	8000638 <__aeabi_dmul>
 80124f0:	4602      	mov	r2, r0
 80124f2:	460b      	mov	r3, r1
 80124f4:	4620      	mov	r0, r4
 80124f6:	4629      	mov	r1, r5
 80124f8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80124fc:	f7ed fee4 	bl	80002c8 <__aeabi_dsub>
 8012500:	f806 4b01 	strb.w	r4, [r6], #1
 8012504:	9d07      	ldr	r5, [sp, #28]
 8012506:	eba6 040a 	sub.w	r4, r6, sl
 801250a:	42a5      	cmp	r5, r4
 801250c:	4602      	mov	r2, r0
 801250e:	460b      	mov	r3, r1
 8012510:	f040 8117 	bne.w	8012742 <_dtoa_r+0x6e2>
 8012514:	f7ed feda 	bl	80002cc <__adddf3>
 8012518:	e9dd 2300 	ldrd	r2, r3, [sp]
 801251c:	4604      	mov	r4, r0
 801251e:	460d      	mov	r5, r1
 8012520:	f7ee fb1a 	bl	8000b58 <__aeabi_dcmpgt>
 8012524:	2800      	cmp	r0, #0
 8012526:	f040 80f9 	bne.w	801271c <_dtoa_r+0x6bc>
 801252a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801252e:	4620      	mov	r0, r4
 8012530:	4629      	mov	r1, r5
 8012532:	f7ee fae9 	bl	8000b08 <__aeabi_dcmpeq>
 8012536:	b118      	cbz	r0, 8012540 <_dtoa_r+0x4e0>
 8012538:	f018 0f01 	tst.w	r8, #1
 801253c:	f040 80ee 	bne.w	801271c <_dtoa_r+0x6bc>
 8012540:	4649      	mov	r1, r9
 8012542:	4658      	mov	r0, fp
 8012544:	f000 fbda 	bl	8012cfc <_Bfree>
 8012548:	2300      	movs	r3, #0
 801254a:	7033      	strb	r3, [r6, #0]
 801254c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801254e:	3701      	adds	r7, #1
 8012550:	601f      	str	r7, [r3, #0]
 8012552:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012554:	2b00      	cmp	r3, #0
 8012556:	f000 831d 	beq.w	8012b94 <_dtoa_r+0xb34>
 801255a:	601e      	str	r6, [r3, #0]
 801255c:	e31a      	b.n	8012b94 <_dtoa_r+0xb34>
 801255e:	07e2      	lsls	r2, r4, #31
 8012560:	d505      	bpl.n	801256e <_dtoa_r+0x50e>
 8012562:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012566:	f7ee f867 	bl	8000638 <__aeabi_dmul>
 801256a:	3601      	adds	r6, #1
 801256c:	2301      	movs	r3, #1
 801256e:	1064      	asrs	r4, r4, #1
 8012570:	3508      	adds	r5, #8
 8012572:	e73f      	b.n	80123f4 <_dtoa_r+0x394>
 8012574:	2602      	movs	r6, #2
 8012576:	e742      	b.n	80123fe <_dtoa_r+0x39e>
 8012578:	9c07      	ldr	r4, [sp, #28]
 801257a:	9704      	str	r7, [sp, #16]
 801257c:	e761      	b.n	8012442 <_dtoa_r+0x3e2>
 801257e:	4b27      	ldr	r3, [pc, #156]	@ (801261c <_dtoa_r+0x5bc>)
 8012580:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012582:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012586:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801258a:	4454      	add	r4, sl
 801258c:	2900      	cmp	r1, #0
 801258e:	d053      	beq.n	8012638 <_dtoa_r+0x5d8>
 8012590:	4928      	ldr	r1, [pc, #160]	@ (8012634 <_dtoa_r+0x5d4>)
 8012592:	2000      	movs	r0, #0
 8012594:	f7ee f97a 	bl	800088c <__aeabi_ddiv>
 8012598:	4633      	mov	r3, r6
 801259a:	462a      	mov	r2, r5
 801259c:	f7ed fe94 	bl	80002c8 <__aeabi_dsub>
 80125a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80125a4:	4656      	mov	r6, sl
 80125a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80125aa:	f7ee faf5 	bl	8000b98 <__aeabi_d2iz>
 80125ae:	4605      	mov	r5, r0
 80125b0:	f7ed ffd8 	bl	8000564 <__aeabi_i2d>
 80125b4:	4602      	mov	r2, r0
 80125b6:	460b      	mov	r3, r1
 80125b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80125bc:	f7ed fe84 	bl	80002c8 <__aeabi_dsub>
 80125c0:	3530      	adds	r5, #48	@ 0x30
 80125c2:	4602      	mov	r2, r0
 80125c4:	460b      	mov	r3, r1
 80125c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80125ca:	f806 5b01 	strb.w	r5, [r6], #1
 80125ce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80125d2:	f7ee faa3 	bl	8000b1c <__aeabi_dcmplt>
 80125d6:	2800      	cmp	r0, #0
 80125d8:	d171      	bne.n	80126be <_dtoa_r+0x65e>
 80125da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80125de:	4911      	ldr	r1, [pc, #68]	@ (8012624 <_dtoa_r+0x5c4>)
 80125e0:	2000      	movs	r0, #0
 80125e2:	f7ed fe71 	bl	80002c8 <__aeabi_dsub>
 80125e6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80125ea:	f7ee fa97 	bl	8000b1c <__aeabi_dcmplt>
 80125ee:	2800      	cmp	r0, #0
 80125f0:	f040 8095 	bne.w	801271e <_dtoa_r+0x6be>
 80125f4:	42a6      	cmp	r6, r4
 80125f6:	f43f af50 	beq.w	801249a <_dtoa_r+0x43a>
 80125fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80125fe:	4b0a      	ldr	r3, [pc, #40]	@ (8012628 <_dtoa_r+0x5c8>)
 8012600:	2200      	movs	r2, #0
 8012602:	f7ee f819 	bl	8000638 <__aeabi_dmul>
 8012606:	4b08      	ldr	r3, [pc, #32]	@ (8012628 <_dtoa_r+0x5c8>)
 8012608:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801260c:	2200      	movs	r2, #0
 801260e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012612:	f7ee f811 	bl	8000638 <__aeabi_dmul>
 8012616:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801261a:	e7c4      	b.n	80125a6 <_dtoa_r+0x546>
 801261c:	080bdb48 	.word	0x080bdb48
 8012620:	080bdb20 	.word	0x080bdb20
 8012624:	3ff00000 	.word	0x3ff00000
 8012628:	40240000 	.word	0x40240000
 801262c:	401c0000 	.word	0x401c0000
 8012630:	40140000 	.word	0x40140000
 8012634:	3fe00000 	.word	0x3fe00000
 8012638:	4631      	mov	r1, r6
 801263a:	4628      	mov	r0, r5
 801263c:	f7ed fffc 	bl	8000638 <__aeabi_dmul>
 8012640:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8012644:	9415      	str	r4, [sp, #84]	@ 0x54
 8012646:	4656      	mov	r6, sl
 8012648:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801264c:	f7ee faa4 	bl	8000b98 <__aeabi_d2iz>
 8012650:	4605      	mov	r5, r0
 8012652:	f7ed ff87 	bl	8000564 <__aeabi_i2d>
 8012656:	4602      	mov	r2, r0
 8012658:	460b      	mov	r3, r1
 801265a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801265e:	f7ed fe33 	bl	80002c8 <__aeabi_dsub>
 8012662:	3530      	adds	r5, #48	@ 0x30
 8012664:	f806 5b01 	strb.w	r5, [r6], #1
 8012668:	4602      	mov	r2, r0
 801266a:	460b      	mov	r3, r1
 801266c:	42a6      	cmp	r6, r4
 801266e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012672:	f04f 0200 	mov.w	r2, #0
 8012676:	d124      	bne.n	80126c2 <_dtoa_r+0x662>
 8012678:	4bac      	ldr	r3, [pc, #688]	@ (801292c <_dtoa_r+0x8cc>)
 801267a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801267e:	f7ed fe25 	bl	80002cc <__adddf3>
 8012682:	4602      	mov	r2, r0
 8012684:	460b      	mov	r3, r1
 8012686:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801268a:	f7ee fa65 	bl	8000b58 <__aeabi_dcmpgt>
 801268e:	2800      	cmp	r0, #0
 8012690:	d145      	bne.n	801271e <_dtoa_r+0x6be>
 8012692:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8012696:	49a5      	ldr	r1, [pc, #660]	@ (801292c <_dtoa_r+0x8cc>)
 8012698:	2000      	movs	r0, #0
 801269a:	f7ed fe15 	bl	80002c8 <__aeabi_dsub>
 801269e:	4602      	mov	r2, r0
 80126a0:	460b      	mov	r3, r1
 80126a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80126a6:	f7ee fa39 	bl	8000b1c <__aeabi_dcmplt>
 80126aa:	2800      	cmp	r0, #0
 80126ac:	f43f aef5 	beq.w	801249a <_dtoa_r+0x43a>
 80126b0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80126b2:	1e73      	subs	r3, r6, #1
 80126b4:	9315      	str	r3, [sp, #84]	@ 0x54
 80126b6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80126ba:	2b30      	cmp	r3, #48	@ 0x30
 80126bc:	d0f8      	beq.n	80126b0 <_dtoa_r+0x650>
 80126be:	9f04      	ldr	r7, [sp, #16]
 80126c0:	e73e      	b.n	8012540 <_dtoa_r+0x4e0>
 80126c2:	4b9b      	ldr	r3, [pc, #620]	@ (8012930 <_dtoa_r+0x8d0>)
 80126c4:	f7ed ffb8 	bl	8000638 <__aeabi_dmul>
 80126c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80126cc:	e7bc      	b.n	8012648 <_dtoa_r+0x5e8>
 80126ce:	d10c      	bne.n	80126ea <_dtoa_r+0x68a>
 80126d0:	4b98      	ldr	r3, [pc, #608]	@ (8012934 <_dtoa_r+0x8d4>)
 80126d2:	2200      	movs	r2, #0
 80126d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80126d8:	f7ed ffae 	bl	8000638 <__aeabi_dmul>
 80126dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80126e0:	f7ee fa30 	bl	8000b44 <__aeabi_dcmpge>
 80126e4:	2800      	cmp	r0, #0
 80126e6:	f000 8157 	beq.w	8012998 <_dtoa_r+0x938>
 80126ea:	2400      	movs	r4, #0
 80126ec:	4625      	mov	r5, r4
 80126ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80126f0:	43db      	mvns	r3, r3
 80126f2:	9304      	str	r3, [sp, #16]
 80126f4:	4656      	mov	r6, sl
 80126f6:	2700      	movs	r7, #0
 80126f8:	4621      	mov	r1, r4
 80126fa:	4658      	mov	r0, fp
 80126fc:	f000 fafe 	bl	8012cfc <_Bfree>
 8012700:	2d00      	cmp	r5, #0
 8012702:	d0dc      	beq.n	80126be <_dtoa_r+0x65e>
 8012704:	b12f      	cbz	r7, 8012712 <_dtoa_r+0x6b2>
 8012706:	42af      	cmp	r7, r5
 8012708:	d003      	beq.n	8012712 <_dtoa_r+0x6b2>
 801270a:	4639      	mov	r1, r7
 801270c:	4658      	mov	r0, fp
 801270e:	f000 faf5 	bl	8012cfc <_Bfree>
 8012712:	4629      	mov	r1, r5
 8012714:	4658      	mov	r0, fp
 8012716:	f000 faf1 	bl	8012cfc <_Bfree>
 801271a:	e7d0      	b.n	80126be <_dtoa_r+0x65e>
 801271c:	9704      	str	r7, [sp, #16]
 801271e:	4633      	mov	r3, r6
 8012720:	461e      	mov	r6, r3
 8012722:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012726:	2a39      	cmp	r2, #57	@ 0x39
 8012728:	d107      	bne.n	801273a <_dtoa_r+0x6da>
 801272a:	459a      	cmp	sl, r3
 801272c:	d1f8      	bne.n	8012720 <_dtoa_r+0x6c0>
 801272e:	9a04      	ldr	r2, [sp, #16]
 8012730:	3201      	adds	r2, #1
 8012732:	9204      	str	r2, [sp, #16]
 8012734:	2230      	movs	r2, #48	@ 0x30
 8012736:	f88a 2000 	strb.w	r2, [sl]
 801273a:	781a      	ldrb	r2, [r3, #0]
 801273c:	3201      	adds	r2, #1
 801273e:	701a      	strb	r2, [r3, #0]
 8012740:	e7bd      	b.n	80126be <_dtoa_r+0x65e>
 8012742:	4b7b      	ldr	r3, [pc, #492]	@ (8012930 <_dtoa_r+0x8d0>)
 8012744:	2200      	movs	r2, #0
 8012746:	f7ed ff77 	bl	8000638 <__aeabi_dmul>
 801274a:	2200      	movs	r2, #0
 801274c:	2300      	movs	r3, #0
 801274e:	4604      	mov	r4, r0
 8012750:	460d      	mov	r5, r1
 8012752:	f7ee f9d9 	bl	8000b08 <__aeabi_dcmpeq>
 8012756:	2800      	cmp	r0, #0
 8012758:	f43f aebb 	beq.w	80124d2 <_dtoa_r+0x472>
 801275c:	e6f0      	b.n	8012540 <_dtoa_r+0x4e0>
 801275e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8012760:	2a00      	cmp	r2, #0
 8012762:	f000 80db 	beq.w	801291c <_dtoa_r+0x8bc>
 8012766:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012768:	2a01      	cmp	r2, #1
 801276a:	f300 80bf 	bgt.w	80128ec <_dtoa_r+0x88c>
 801276e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8012770:	2a00      	cmp	r2, #0
 8012772:	f000 80b7 	beq.w	80128e4 <_dtoa_r+0x884>
 8012776:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801277a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801277c:	4646      	mov	r6, r8
 801277e:	9a08      	ldr	r2, [sp, #32]
 8012780:	2101      	movs	r1, #1
 8012782:	441a      	add	r2, r3
 8012784:	4658      	mov	r0, fp
 8012786:	4498      	add	r8, r3
 8012788:	9208      	str	r2, [sp, #32]
 801278a:	f000 fb6b 	bl	8012e64 <__i2b>
 801278e:	4605      	mov	r5, r0
 8012790:	b15e      	cbz	r6, 80127aa <_dtoa_r+0x74a>
 8012792:	9b08      	ldr	r3, [sp, #32]
 8012794:	2b00      	cmp	r3, #0
 8012796:	dd08      	ble.n	80127aa <_dtoa_r+0x74a>
 8012798:	42b3      	cmp	r3, r6
 801279a:	9a08      	ldr	r2, [sp, #32]
 801279c:	bfa8      	it	ge
 801279e:	4633      	movge	r3, r6
 80127a0:	eba8 0803 	sub.w	r8, r8, r3
 80127a4:	1af6      	subs	r6, r6, r3
 80127a6:	1ad3      	subs	r3, r2, r3
 80127a8:	9308      	str	r3, [sp, #32]
 80127aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80127ac:	b1f3      	cbz	r3, 80127ec <_dtoa_r+0x78c>
 80127ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	f000 80b7 	beq.w	8012924 <_dtoa_r+0x8c4>
 80127b6:	b18c      	cbz	r4, 80127dc <_dtoa_r+0x77c>
 80127b8:	4629      	mov	r1, r5
 80127ba:	4622      	mov	r2, r4
 80127bc:	4658      	mov	r0, fp
 80127be:	f000 fc11 	bl	8012fe4 <__pow5mult>
 80127c2:	464a      	mov	r2, r9
 80127c4:	4601      	mov	r1, r0
 80127c6:	4605      	mov	r5, r0
 80127c8:	4658      	mov	r0, fp
 80127ca:	f000 fb61 	bl	8012e90 <__multiply>
 80127ce:	4649      	mov	r1, r9
 80127d0:	9004      	str	r0, [sp, #16]
 80127d2:	4658      	mov	r0, fp
 80127d4:	f000 fa92 	bl	8012cfc <_Bfree>
 80127d8:	9b04      	ldr	r3, [sp, #16]
 80127da:	4699      	mov	r9, r3
 80127dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80127de:	1b1a      	subs	r2, r3, r4
 80127e0:	d004      	beq.n	80127ec <_dtoa_r+0x78c>
 80127e2:	4649      	mov	r1, r9
 80127e4:	4658      	mov	r0, fp
 80127e6:	f000 fbfd 	bl	8012fe4 <__pow5mult>
 80127ea:	4681      	mov	r9, r0
 80127ec:	2101      	movs	r1, #1
 80127ee:	4658      	mov	r0, fp
 80127f0:	f000 fb38 	bl	8012e64 <__i2b>
 80127f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80127f6:	4604      	mov	r4, r0
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	f000 81cf 	beq.w	8012b9c <_dtoa_r+0xb3c>
 80127fe:	461a      	mov	r2, r3
 8012800:	4601      	mov	r1, r0
 8012802:	4658      	mov	r0, fp
 8012804:	f000 fbee 	bl	8012fe4 <__pow5mult>
 8012808:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801280a:	2b01      	cmp	r3, #1
 801280c:	4604      	mov	r4, r0
 801280e:	f300 8095 	bgt.w	801293c <_dtoa_r+0x8dc>
 8012812:	9b02      	ldr	r3, [sp, #8]
 8012814:	2b00      	cmp	r3, #0
 8012816:	f040 8087 	bne.w	8012928 <_dtoa_r+0x8c8>
 801281a:	9b03      	ldr	r3, [sp, #12]
 801281c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012820:	2b00      	cmp	r3, #0
 8012822:	f040 8089 	bne.w	8012938 <_dtoa_r+0x8d8>
 8012826:	9b03      	ldr	r3, [sp, #12]
 8012828:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801282c:	0d1b      	lsrs	r3, r3, #20
 801282e:	051b      	lsls	r3, r3, #20
 8012830:	b12b      	cbz	r3, 801283e <_dtoa_r+0x7de>
 8012832:	9b08      	ldr	r3, [sp, #32]
 8012834:	3301      	adds	r3, #1
 8012836:	9308      	str	r3, [sp, #32]
 8012838:	f108 0801 	add.w	r8, r8, #1
 801283c:	2301      	movs	r3, #1
 801283e:	930a      	str	r3, [sp, #40]	@ 0x28
 8012840:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012842:	2b00      	cmp	r3, #0
 8012844:	f000 81b0 	beq.w	8012ba8 <_dtoa_r+0xb48>
 8012848:	6923      	ldr	r3, [r4, #16]
 801284a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801284e:	6918      	ldr	r0, [r3, #16]
 8012850:	f000 fabc 	bl	8012dcc <__hi0bits>
 8012854:	f1c0 0020 	rsb	r0, r0, #32
 8012858:	9b08      	ldr	r3, [sp, #32]
 801285a:	4418      	add	r0, r3
 801285c:	f010 001f 	ands.w	r0, r0, #31
 8012860:	d077      	beq.n	8012952 <_dtoa_r+0x8f2>
 8012862:	f1c0 0320 	rsb	r3, r0, #32
 8012866:	2b04      	cmp	r3, #4
 8012868:	dd6b      	ble.n	8012942 <_dtoa_r+0x8e2>
 801286a:	9b08      	ldr	r3, [sp, #32]
 801286c:	f1c0 001c 	rsb	r0, r0, #28
 8012870:	4403      	add	r3, r0
 8012872:	4480      	add	r8, r0
 8012874:	4406      	add	r6, r0
 8012876:	9308      	str	r3, [sp, #32]
 8012878:	f1b8 0f00 	cmp.w	r8, #0
 801287c:	dd05      	ble.n	801288a <_dtoa_r+0x82a>
 801287e:	4649      	mov	r1, r9
 8012880:	4642      	mov	r2, r8
 8012882:	4658      	mov	r0, fp
 8012884:	f000 fc08 	bl	8013098 <__lshift>
 8012888:	4681      	mov	r9, r0
 801288a:	9b08      	ldr	r3, [sp, #32]
 801288c:	2b00      	cmp	r3, #0
 801288e:	dd05      	ble.n	801289c <_dtoa_r+0x83c>
 8012890:	4621      	mov	r1, r4
 8012892:	461a      	mov	r2, r3
 8012894:	4658      	mov	r0, fp
 8012896:	f000 fbff 	bl	8013098 <__lshift>
 801289a:	4604      	mov	r4, r0
 801289c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801289e:	2b00      	cmp	r3, #0
 80128a0:	d059      	beq.n	8012956 <_dtoa_r+0x8f6>
 80128a2:	4621      	mov	r1, r4
 80128a4:	4648      	mov	r0, r9
 80128a6:	f000 fc63 	bl	8013170 <__mcmp>
 80128aa:	2800      	cmp	r0, #0
 80128ac:	da53      	bge.n	8012956 <_dtoa_r+0x8f6>
 80128ae:	1e7b      	subs	r3, r7, #1
 80128b0:	9304      	str	r3, [sp, #16]
 80128b2:	4649      	mov	r1, r9
 80128b4:	2300      	movs	r3, #0
 80128b6:	220a      	movs	r2, #10
 80128b8:	4658      	mov	r0, fp
 80128ba:	f000 fa41 	bl	8012d40 <__multadd>
 80128be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80128c0:	4681      	mov	r9, r0
 80128c2:	2b00      	cmp	r3, #0
 80128c4:	f000 8172 	beq.w	8012bac <_dtoa_r+0xb4c>
 80128c8:	2300      	movs	r3, #0
 80128ca:	4629      	mov	r1, r5
 80128cc:	220a      	movs	r2, #10
 80128ce:	4658      	mov	r0, fp
 80128d0:	f000 fa36 	bl	8012d40 <__multadd>
 80128d4:	9b00      	ldr	r3, [sp, #0]
 80128d6:	2b00      	cmp	r3, #0
 80128d8:	4605      	mov	r5, r0
 80128da:	dc67      	bgt.n	80129ac <_dtoa_r+0x94c>
 80128dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80128de:	2b02      	cmp	r3, #2
 80128e0:	dc41      	bgt.n	8012966 <_dtoa_r+0x906>
 80128e2:	e063      	b.n	80129ac <_dtoa_r+0x94c>
 80128e4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80128e6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80128ea:	e746      	b.n	801277a <_dtoa_r+0x71a>
 80128ec:	9b07      	ldr	r3, [sp, #28]
 80128ee:	1e5c      	subs	r4, r3, #1
 80128f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80128f2:	42a3      	cmp	r3, r4
 80128f4:	bfbf      	itttt	lt
 80128f6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80128f8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80128fa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80128fc:	1ae3      	sublt	r3, r4, r3
 80128fe:	bfb4      	ite	lt
 8012900:	18d2      	addlt	r2, r2, r3
 8012902:	1b1c      	subge	r4, r3, r4
 8012904:	9b07      	ldr	r3, [sp, #28]
 8012906:	bfbc      	itt	lt
 8012908:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801290a:	2400      	movlt	r4, #0
 801290c:	2b00      	cmp	r3, #0
 801290e:	bfb5      	itete	lt
 8012910:	eba8 0603 	sublt.w	r6, r8, r3
 8012914:	9b07      	ldrge	r3, [sp, #28]
 8012916:	2300      	movlt	r3, #0
 8012918:	4646      	movge	r6, r8
 801291a:	e730      	b.n	801277e <_dtoa_r+0x71e>
 801291c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801291e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8012920:	4646      	mov	r6, r8
 8012922:	e735      	b.n	8012790 <_dtoa_r+0x730>
 8012924:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012926:	e75c      	b.n	80127e2 <_dtoa_r+0x782>
 8012928:	2300      	movs	r3, #0
 801292a:	e788      	b.n	801283e <_dtoa_r+0x7de>
 801292c:	3fe00000 	.word	0x3fe00000
 8012930:	40240000 	.word	0x40240000
 8012934:	40140000 	.word	0x40140000
 8012938:	9b02      	ldr	r3, [sp, #8]
 801293a:	e780      	b.n	801283e <_dtoa_r+0x7de>
 801293c:	2300      	movs	r3, #0
 801293e:	930a      	str	r3, [sp, #40]	@ 0x28
 8012940:	e782      	b.n	8012848 <_dtoa_r+0x7e8>
 8012942:	d099      	beq.n	8012878 <_dtoa_r+0x818>
 8012944:	9a08      	ldr	r2, [sp, #32]
 8012946:	331c      	adds	r3, #28
 8012948:	441a      	add	r2, r3
 801294a:	4498      	add	r8, r3
 801294c:	441e      	add	r6, r3
 801294e:	9208      	str	r2, [sp, #32]
 8012950:	e792      	b.n	8012878 <_dtoa_r+0x818>
 8012952:	4603      	mov	r3, r0
 8012954:	e7f6      	b.n	8012944 <_dtoa_r+0x8e4>
 8012956:	9b07      	ldr	r3, [sp, #28]
 8012958:	9704      	str	r7, [sp, #16]
 801295a:	2b00      	cmp	r3, #0
 801295c:	dc20      	bgt.n	80129a0 <_dtoa_r+0x940>
 801295e:	9300      	str	r3, [sp, #0]
 8012960:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012962:	2b02      	cmp	r3, #2
 8012964:	dd1e      	ble.n	80129a4 <_dtoa_r+0x944>
 8012966:	9b00      	ldr	r3, [sp, #0]
 8012968:	2b00      	cmp	r3, #0
 801296a:	f47f aec0 	bne.w	80126ee <_dtoa_r+0x68e>
 801296e:	4621      	mov	r1, r4
 8012970:	2205      	movs	r2, #5
 8012972:	4658      	mov	r0, fp
 8012974:	f000 f9e4 	bl	8012d40 <__multadd>
 8012978:	4601      	mov	r1, r0
 801297a:	4604      	mov	r4, r0
 801297c:	4648      	mov	r0, r9
 801297e:	f000 fbf7 	bl	8013170 <__mcmp>
 8012982:	2800      	cmp	r0, #0
 8012984:	f77f aeb3 	ble.w	80126ee <_dtoa_r+0x68e>
 8012988:	4656      	mov	r6, sl
 801298a:	2331      	movs	r3, #49	@ 0x31
 801298c:	f806 3b01 	strb.w	r3, [r6], #1
 8012990:	9b04      	ldr	r3, [sp, #16]
 8012992:	3301      	adds	r3, #1
 8012994:	9304      	str	r3, [sp, #16]
 8012996:	e6ae      	b.n	80126f6 <_dtoa_r+0x696>
 8012998:	9c07      	ldr	r4, [sp, #28]
 801299a:	9704      	str	r7, [sp, #16]
 801299c:	4625      	mov	r5, r4
 801299e:	e7f3      	b.n	8012988 <_dtoa_r+0x928>
 80129a0:	9b07      	ldr	r3, [sp, #28]
 80129a2:	9300      	str	r3, [sp, #0]
 80129a4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	f000 8104 	beq.w	8012bb4 <_dtoa_r+0xb54>
 80129ac:	2e00      	cmp	r6, #0
 80129ae:	dd05      	ble.n	80129bc <_dtoa_r+0x95c>
 80129b0:	4629      	mov	r1, r5
 80129b2:	4632      	mov	r2, r6
 80129b4:	4658      	mov	r0, fp
 80129b6:	f000 fb6f 	bl	8013098 <__lshift>
 80129ba:	4605      	mov	r5, r0
 80129bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80129be:	2b00      	cmp	r3, #0
 80129c0:	d05a      	beq.n	8012a78 <_dtoa_r+0xa18>
 80129c2:	6869      	ldr	r1, [r5, #4]
 80129c4:	4658      	mov	r0, fp
 80129c6:	f000 f959 	bl	8012c7c <_Balloc>
 80129ca:	4606      	mov	r6, r0
 80129cc:	b928      	cbnz	r0, 80129da <_dtoa_r+0x97a>
 80129ce:	4b84      	ldr	r3, [pc, #528]	@ (8012be0 <_dtoa_r+0xb80>)
 80129d0:	4602      	mov	r2, r0
 80129d2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80129d6:	f7ff bb5a 	b.w	801208e <_dtoa_r+0x2e>
 80129da:	692a      	ldr	r2, [r5, #16]
 80129dc:	3202      	adds	r2, #2
 80129de:	0092      	lsls	r2, r2, #2
 80129e0:	f105 010c 	add.w	r1, r5, #12
 80129e4:	300c      	adds	r0, #12
 80129e6:	f7ff faa4 	bl	8011f32 <memcpy>
 80129ea:	2201      	movs	r2, #1
 80129ec:	4631      	mov	r1, r6
 80129ee:	4658      	mov	r0, fp
 80129f0:	f000 fb52 	bl	8013098 <__lshift>
 80129f4:	f10a 0301 	add.w	r3, sl, #1
 80129f8:	9307      	str	r3, [sp, #28]
 80129fa:	9b00      	ldr	r3, [sp, #0]
 80129fc:	4453      	add	r3, sl
 80129fe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012a00:	9b02      	ldr	r3, [sp, #8]
 8012a02:	f003 0301 	and.w	r3, r3, #1
 8012a06:	462f      	mov	r7, r5
 8012a08:	930a      	str	r3, [sp, #40]	@ 0x28
 8012a0a:	4605      	mov	r5, r0
 8012a0c:	9b07      	ldr	r3, [sp, #28]
 8012a0e:	4621      	mov	r1, r4
 8012a10:	3b01      	subs	r3, #1
 8012a12:	4648      	mov	r0, r9
 8012a14:	9300      	str	r3, [sp, #0]
 8012a16:	f7ff fa9a 	bl	8011f4e <quorem>
 8012a1a:	4639      	mov	r1, r7
 8012a1c:	9002      	str	r0, [sp, #8]
 8012a1e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8012a22:	4648      	mov	r0, r9
 8012a24:	f000 fba4 	bl	8013170 <__mcmp>
 8012a28:	462a      	mov	r2, r5
 8012a2a:	9008      	str	r0, [sp, #32]
 8012a2c:	4621      	mov	r1, r4
 8012a2e:	4658      	mov	r0, fp
 8012a30:	f000 fbba 	bl	80131a8 <__mdiff>
 8012a34:	68c2      	ldr	r2, [r0, #12]
 8012a36:	4606      	mov	r6, r0
 8012a38:	bb02      	cbnz	r2, 8012a7c <_dtoa_r+0xa1c>
 8012a3a:	4601      	mov	r1, r0
 8012a3c:	4648      	mov	r0, r9
 8012a3e:	f000 fb97 	bl	8013170 <__mcmp>
 8012a42:	4602      	mov	r2, r0
 8012a44:	4631      	mov	r1, r6
 8012a46:	4658      	mov	r0, fp
 8012a48:	920e      	str	r2, [sp, #56]	@ 0x38
 8012a4a:	f000 f957 	bl	8012cfc <_Bfree>
 8012a4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012a50:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012a52:	9e07      	ldr	r6, [sp, #28]
 8012a54:	ea43 0102 	orr.w	r1, r3, r2
 8012a58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012a5a:	4319      	orrs	r1, r3
 8012a5c:	d110      	bne.n	8012a80 <_dtoa_r+0xa20>
 8012a5e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8012a62:	d029      	beq.n	8012ab8 <_dtoa_r+0xa58>
 8012a64:	9b08      	ldr	r3, [sp, #32]
 8012a66:	2b00      	cmp	r3, #0
 8012a68:	dd02      	ble.n	8012a70 <_dtoa_r+0xa10>
 8012a6a:	9b02      	ldr	r3, [sp, #8]
 8012a6c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8012a70:	9b00      	ldr	r3, [sp, #0]
 8012a72:	f883 8000 	strb.w	r8, [r3]
 8012a76:	e63f      	b.n	80126f8 <_dtoa_r+0x698>
 8012a78:	4628      	mov	r0, r5
 8012a7a:	e7bb      	b.n	80129f4 <_dtoa_r+0x994>
 8012a7c:	2201      	movs	r2, #1
 8012a7e:	e7e1      	b.n	8012a44 <_dtoa_r+0x9e4>
 8012a80:	9b08      	ldr	r3, [sp, #32]
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	db04      	blt.n	8012a90 <_dtoa_r+0xa30>
 8012a86:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012a88:	430b      	orrs	r3, r1
 8012a8a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012a8c:	430b      	orrs	r3, r1
 8012a8e:	d120      	bne.n	8012ad2 <_dtoa_r+0xa72>
 8012a90:	2a00      	cmp	r2, #0
 8012a92:	dded      	ble.n	8012a70 <_dtoa_r+0xa10>
 8012a94:	4649      	mov	r1, r9
 8012a96:	2201      	movs	r2, #1
 8012a98:	4658      	mov	r0, fp
 8012a9a:	f000 fafd 	bl	8013098 <__lshift>
 8012a9e:	4621      	mov	r1, r4
 8012aa0:	4681      	mov	r9, r0
 8012aa2:	f000 fb65 	bl	8013170 <__mcmp>
 8012aa6:	2800      	cmp	r0, #0
 8012aa8:	dc03      	bgt.n	8012ab2 <_dtoa_r+0xa52>
 8012aaa:	d1e1      	bne.n	8012a70 <_dtoa_r+0xa10>
 8012aac:	f018 0f01 	tst.w	r8, #1
 8012ab0:	d0de      	beq.n	8012a70 <_dtoa_r+0xa10>
 8012ab2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8012ab6:	d1d8      	bne.n	8012a6a <_dtoa_r+0xa0a>
 8012ab8:	9a00      	ldr	r2, [sp, #0]
 8012aba:	2339      	movs	r3, #57	@ 0x39
 8012abc:	7013      	strb	r3, [r2, #0]
 8012abe:	4633      	mov	r3, r6
 8012ac0:	461e      	mov	r6, r3
 8012ac2:	3b01      	subs	r3, #1
 8012ac4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8012ac8:	2a39      	cmp	r2, #57	@ 0x39
 8012aca:	d052      	beq.n	8012b72 <_dtoa_r+0xb12>
 8012acc:	3201      	adds	r2, #1
 8012ace:	701a      	strb	r2, [r3, #0]
 8012ad0:	e612      	b.n	80126f8 <_dtoa_r+0x698>
 8012ad2:	2a00      	cmp	r2, #0
 8012ad4:	dd07      	ble.n	8012ae6 <_dtoa_r+0xa86>
 8012ad6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8012ada:	d0ed      	beq.n	8012ab8 <_dtoa_r+0xa58>
 8012adc:	9a00      	ldr	r2, [sp, #0]
 8012ade:	f108 0301 	add.w	r3, r8, #1
 8012ae2:	7013      	strb	r3, [r2, #0]
 8012ae4:	e608      	b.n	80126f8 <_dtoa_r+0x698>
 8012ae6:	9b07      	ldr	r3, [sp, #28]
 8012ae8:	9a07      	ldr	r2, [sp, #28]
 8012aea:	f803 8c01 	strb.w	r8, [r3, #-1]
 8012aee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012af0:	4293      	cmp	r3, r2
 8012af2:	d028      	beq.n	8012b46 <_dtoa_r+0xae6>
 8012af4:	4649      	mov	r1, r9
 8012af6:	2300      	movs	r3, #0
 8012af8:	220a      	movs	r2, #10
 8012afa:	4658      	mov	r0, fp
 8012afc:	f000 f920 	bl	8012d40 <__multadd>
 8012b00:	42af      	cmp	r7, r5
 8012b02:	4681      	mov	r9, r0
 8012b04:	f04f 0300 	mov.w	r3, #0
 8012b08:	f04f 020a 	mov.w	r2, #10
 8012b0c:	4639      	mov	r1, r7
 8012b0e:	4658      	mov	r0, fp
 8012b10:	d107      	bne.n	8012b22 <_dtoa_r+0xac2>
 8012b12:	f000 f915 	bl	8012d40 <__multadd>
 8012b16:	4607      	mov	r7, r0
 8012b18:	4605      	mov	r5, r0
 8012b1a:	9b07      	ldr	r3, [sp, #28]
 8012b1c:	3301      	adds	r3, #1
 8012b1e:	9307      	str	r3, [sp, #28]
 8012b20:	e774      	b.n	8012a0c <_dtoa_r+0x9ac>
 8012b22:	f000 f90d 	bl	8012d40 <__multadd>
 8012b26:	4629      	mov	r1, r5
 8012b28:	4607      	mov	r7, r0
 8012b2a:	2300      	movs	r3, #0
 8012b2c:	220a      	movs	r2, #10
 8012b2e:	4658      	mov	r0, fp
 8012b30:	f000 f906 	bl	8012d40 <__multadd>
 8012b34:	4605      	mov	r5, r0
 8012b36:	e7f0      	b.n	8012b1a <_dtoa_r+0xaba>
 8012b38:	9b00      	ldr	r3, [sp, #0]
 8012b3a:	2b00      	cmp	r3, #0
 8012b3c:	bfcc      	ite	gt
 8012b3e:	461e      	movgt	r6, r3
 8012b40:	2601      	movle	r6, #1
 8012b42:	4456      	add	r6, sl
 8012b44:	2700      	movs	r7, #0
 8012b46:	4649      	mov	r1, r9
 8012b48:	2201      	movs	r2, #1
 8012b4a:	4658      	mov	r0, fp
 8012b4c:	f000 faa4 	bl	8013098 <__lshift>
 8012b50:	4621      	mov	r1, r4
 8012b52:	4681      	mov	r9, r0
 8012b54:	f000 fb0c 	bl	8013170 <__mcmp>
 8012b58:	2800      	cmp	r0, #0
 8012b5a:	dcb0      	bgt.n	8012abe <_dtoa_r+0xa5e>
 8012b5c:	d102      	bne.n	8012b64 <_dtoa_r+0xb04>
 8012b5e:	f018 0f01 	tst.w	r8, #1
 8012b62:	d1ac      	bne.n	8012abe <_dtoa_r+0xa5e>
 8012b64:	4633      	mov	r3, r6
 8012b66:	461e      	mov	r6, r3
 8012b68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012b6c:	2a30      	cmp	r2, #48	@ 0x30
 8012b6e:	d0fa      	beq.n	8012b66 <_dtoa_r+0xb06>
 8012b70:	e5c2      	b.n	80126f8 <_dtoa_r+0x698>
 8012b72:	459a      	cmp	sl, r3
 8012b74:	d1a4      	bne.n	8012ac0 <_dtoa_r+0xa60>
 8012b76:	9b04      	ldr	r3, [sp, #16]
 8012b78:	3301      	adds	r3, #1
 8012b7a:	9304      	str	r3, [sp, #16]
 8012b7c:	2331      	movs	r3, #49	@ 0x31
 8012b7e:	f88a 3000 	strb.w	r3, [sl]
 8012b82:	e5b9      	b.n	80126f8 <_dtoa_r+0x698>
 8012b84:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012b86:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8012be4 <_dtoa_r+0xb84>
 8012b8a:	b11b      	cbz	r3, 8012b94 <_dtoa_r+0xb34>
 8012b8c:	f10a 0308 	add.w	r3, sl, #8
 8012b90:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8012b92:	6013      	str	r3, [r2, #0]
 8012b94:	4650      	mov	r0, sl
 8012b96:	b019      	add	sp, #100	@ 0x64
 8012b98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012b9e:	2b01      	cmp	r3, #1
 8012ba0:	f77f ae37 	ble.w	8012812 <_dtoa_r+0x7b2>
 8012ba4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012ba6:	930a      	str	r3, [sp, #40]	@ 0x28
 8012ba8:	2001      	movs	r0, #1
 8012baa:	e655      	b.n	8012858 <_dtoa_r+0x7f8>
 8012bac:	9b00      	ldr	r3, [sp, #0]
 8012bae:	2b00      	cmp	r3, #0
 8012bb0:	f77f aed6 	ble.w	8012960 <_dtoa_r+0x900>
 8012bb4:	4656      	mov	r6, sl
 8012bb6:	4621      	mov	r1, r4
 8012bb8:	4648      	mov	r0, r9
 8012bba:	f7ff f9c8 	bl	8011f4e <quorem>
 8012bbe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8012bc2:	f806 8b01 	strb.w	r8, [r6], #1
 8012bc6:	9b00      	ldr	r3, [sp, #0]
 8012bc8:	eba6 020a 	sub.w	r2, r6, sl
 8012bcc:	4293      	cmp	r3, r2
 8012bce:	ddb3      	ble.n	8012b38 <_dtoa_r+0xad8>
 8012bd0:	4649      	mov	r1, r9
 8012bd2:	2300      	movs	r3, #0
 8012bd4:	220a      	movs	r2, #10
 8012bd6:	4658      	mov	r0, fp
 8012bd8:	f000 f8b2 	bl	8012d40 <__multadd>
 8012bdc:	4681      	mov	r9, r0
 8012bde:	e7ea      	b.n	8012bb6 <_dtoa_r+0xb56>
 8012be0:	080bdaa8 	.word	0x080bdaa8
 8012be4:	080bda2c 	.word	0x080bda2c

08012be8 <_free_r>:
 8012be8:	b538      	push	{r3, r4, r5, lr}
 8012bea:	4605      	mov	r5, r0
 8012bec:	2900      	cmp	r1, #0
 8012bee:	d041      	beq.n	8012c74 <_free_r+0x8c>
 8012bf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012bf4:	1f0c      	subs	r4, r1, #4
 8012bf6:	2b00      	cmp	r3, #0
 8012bf8:	bfb8      	it	lt
 8012bfa:	18e4      	addlt	r4, r4, r3
 8012bfc:	f7fe fa9c 	bl	8011138 <__malloc_lock>
 8012c00:	4a1d      	ldr	r2, [pc, #116]	@ (8012c78 <_free_r+0x90>)
 8012c02:	6813      	ldr	r3, [r2, #0]
 8012c04:	b933      	cbnz	r3, 8012c14 <_free_r+0x2c>
 8012c06:	6063      	str	r3, [r4, #4]
 8012c08:	6014      	str	r4, [r2, #0]
 8012c0a:	4628      	mov	r0, r5
 8012c0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012c10:	f7fe ba98 	b.w	8011144 <__malloc_unlock>
 8012c14:	42a3      	cmp	r3, r4
 8012c16:	d908      	bls.n	8012c2a <_free_r+0x42>
 8012c18:	6820      	ldr	r0, [r4, #0]
 8012c1a:	1821      	adds	r1, r4, r0
 8012c1c:	428b      	cmp	r3, r1
 8012c1e:	bf01      	itttt	eq
 8012c20:	6819      	ldreq	r1, [r3, #0]
 8012c22:	685b      	ldreq	r3, [r3, #4]
 8012c24:	1809      	addeq	r1, r1, r0
 8012c26:	6021      	streq	r1, [r4, #0]
 8012c28:	e7ed      	b.n	8012c06 <_free_r+0x1e>
 8012c2a:	461a      	mov	r2, r3
 8012c2c:	685b      	ldr	r3, [r3, #4]
 8012c2e:	b10b      	cbz	r3, 8012c34 <_free_r+0x4c>
 8012c30:	42a3      	cmp	r3, r4
 8012c32:	d9fa      	bls.n	8012c2a <_free_r+0x42>
 8012c34:	6811      	ldr	r1, [r2, #0]
 8012c36:	1850      	adds	r0, r2, r1
 8012c38:	42a0      	cmp	r0, r4
 8012c3a:	d10b      	bne.n	8012c54 <_free_r+0x6c>
 8012c3c:	6820      	ldr	r0, [r4, #0]
 8012c3e:	4401      	add	r1, r0
 8012c40:	1850      	adds	r0, r2, r1
 8012c42:	4283      	cmp	r3, r0
 8012c44:	6011      	str	r1, [r2, #0]
 8012c46:	d1e0      	bne.n	8012c0a <_free_r+0x22>
 8012c48:	6818      	ldr	r0, [r3, #0]
 8012c4a:	685b      	ldr	r3, [r3, #4]
 8012c4c:	6053      	str	r3, [r2, #4]
 8012c4e:	4408      	add	r0, r1
 8012c50:	6010      	str	r0, [r2, #0]
 8012c52:	e7da      	b.n	8012c0a <_free_r+0x22>
 8012c54:	d902      	bls.n	8012c5c <_free_r+0x74>
 8012c56:	230c      	movs	r3, #12
 8012c58:	602b      	str	r3, [r5, #0]
 8012c5a:	e7d6      	b.n	8012c0a <_free_r+0x22>
 8012c5c:	6820      	ldr	r0, [r4, #0]
 8012c5e:	1821      	adds	r1, r4, r0
 8012c60:	428b      	cmp	r3, r1
 8012c62:	bf04      	itt	eq
 8012c64:	6819      	ldreq	r1, [r3, #0]
 8012c66:	685b      	ldreq	r3, [r3, #4]
 8012c68:	6063      	str	r3, [r4, #4]
 8012c6a:	bf04      	itt	eq
 8012c6c:	1809      	addeq	r1, r1, r0
 8012c6e:	6021      	streq	r1, [r4, #0]
 8012c70:	6054      	str	r4, [r2, #4]
 8012c72:	e7ca      	b.n	8012c0a <_free_r+0x22>
 8012c74:	bd38      	pop	{r3, r4, r5, pc}
 8012c76:	bf00      	nop
 8012c78:	20005c90 	.word	0x20005c90

08012c7c <_Balloc>:
 8012c7c:	b570      	push	{r4, r5, r6, lr}
 8012c7e:	69c6      	ldr	r6, [r0, #28]
 8012c80:	4604      	mov	r4, r0
 8012c82:	460d      	mov	r5, r1
 8012c84:	b976      	cbnz	r6, 8012ca4 <_Balloc+0x28>
 8012c86:	2010      	movs	r0, #16
 8012c88:	f7fe f9ac 	bl	8010fe4 <malloc>
 8012c8c:	4602      	mov	r2, r0
 8012c8e:	61e0      	str	r0, [r4, #28]
 8012c90:	b920      	cbnz	r0, 8012c9c <_Balloc+0x20>
 8012c92:	4b18      	ldr	r3, [pc, #96]	@ (8012cf4 <_Balloc+0x78>)
 8012c94:	4818      	ldr	r0, [pc, #96]	@ (8012cf8 <_Balloc+0x7c>)
 8012c96:	216b      	movs	r1, #107	@ 0x6b
 8012c98:	f000 fde4 	bl	8013864 <__assert_func>
 8012c9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012ca0:	6006      	str	r6, [r0, #0]
 8012ca2:	60c6      	str	r6, [r0, #12]
 8012ca4:	69e6      	ldr	r6, [r4, #28]
 8012ca6:	68f3      	ldr	r3, [r6, #12]
 8012ca8:	b183      	cbz	r3, 8012ccc <_Balloc+0x50>
 8012caa:	69e3      	ldr	r3, [r4, #28]
 8012cac:	68db      	ldr	r3, [r3, #12]
 8012cae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012cb2:	b9b8      	cbnz	r0, 8012ce4 <_Balloc+0x68>
 8012cb4:	2101      	movs	r1, #1
 8012cb6:	fa01 f605 	lsl.w	r6, r1, r5
 8012cba:	1d72      	adds	r2, r6, #5
 8012cbc:	0092      	lsls	r2, r2, #2
 8012cbe:	4620      	mov	r0, r4
 8012cc0:	f000 fdee 	bl	80138a0 <_calloc_r>
 8012cc4:	b160      	cbz	r0, 8012ce0 <_Balloc+0x64>
 8012cc6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012cca:	e00e      	b.n	8012cea <_Balloc+0x6e>
 8012ccc:	2221      	movs	r2, #33	@ 0x21
 8012cce:	2104      	movs	r1, #4
 8012cd0:	4620      	mov	r0, r4
 8012cd2:	f000 fde5 	bl	80138a0 <_calloc_r>
 8012cd6:	69e3      	ldr	r3, [r4, #28]
 8012cd8:	60f0      	str	r0, [r6, #12]
 8012cda:	68db      	ldr	r3, [r3, #12]
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	d1e4      	bne.n	8012caa <_Balloc+0x2e>
 8012ce0:	2000      	movs	r0, #0
 8012ce2:	bd70      	pop	{r4, r5, r6, pc}
 8012ce4:	6802      	ldr	r2, [r0, #0]
 8012ce6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012cea:	2300      	movs	r3, #0
 8012cec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012cf0:	e7f7      	b.n	8012ce2 <_Balloc+0x66>
 8012cf2:	bf00      	nop
 8012cf4:	080bda39 	.word	0x080bda39
 8012cf8:	080bdab9 	.word	0x080bdab9

08012cfc <_Bfree>:
 8012cfc:	b570      	push	{r4, r5, r6, lr}
 8012cfe:	69c6      	ldr	r6, [r0, #28]
 8012d00:	4605      	mov	r5, r0
 8012d02:	460c      	mov	r4, r1
 8012d04:	b976      	cbnz	r6, 8012d24 <_Bfree+0x28>
 8012d06:	2010      	movs	r0, #16
 8012d08:	f7fe f96c 	bl	8010fe4 <malloc>
 8012d0c:	4602      	mov	r2, r0
 8012d0e:	61e8      	str	r0, [r5, #28]
 8012d10:	b920      	cbnz	r0, 8012d1c <_Bfree+0x20>
 8012d12:	4b09      	ldr	r3, [pc, #36]	@ (8012d38 <_Bfree+0x3c>)
 8012d14:	4809      	ldr	r0, [pc, #36]	@ (8012d3c <_Bfree+0x40>)
 8012d16:	218f      	movs	r1, #143	@ 0x8f
 8012d18:	f000 fda4 	bl	8013864 <__assert_func>
 8012d1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012d20:	6006      	str	r6, [r0, #0]
 8012d22:	60c6      	str	r6, [r0, #12]
 8012d24:	b13c      	cbz	r4, 8012d36 <_Bfree+0x3a>
 8012d26:	69eb      	ldr	r3, [r5, #28]
 8012d28:	6862      	ldr	r2, [r4, #4]
 8012d2a:	68db      	ldr	r3, [r3, #12]
 8012d2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012d30:	6021      	str	r1, [r4, #0]
 8012d32:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012d36:	bd70      	pop	{r4, r5, r6, pc}
 8012d38:	080bda39 	.word	0x080bda39
 8012d3c:	080bdab9 	.word	0x080bdab9

08012d40 <__multadd>:
 8012d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d44:	690d      	ldr	r5, [r1, #16]
 8012d46:	4607      	mov	r7, r0
 8012d48:	460c      	mov	r4, r1
 8012d4a:	461e      	mov	r6, r3
 8012d4c:	f101 0c14 	add.w	ip, r1, #20
 8012d50:	2000      	movs	r0, #0
 8012d52:	f8dc 3000 	ldr.w	r3, [ip]
 8012d56:	b299      	uxth	r1, r3
 8012d58:	fb02 6101 	mla	r1, r2, r1, r6
 8012d5c:	0c1e      	lsrs	r6, r3, #16
 8012d5e:	0c0b      	lsrs	r3, r1, #16
 8012d60:	fb02 3306 	mla	r3, r2, r6, r3
 8012d64:	b289      	uxth	r1, r1
 8012d66:	3001      	adds	r0, #1
 8012d68:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012d6c:	4285      	cmp	r5, r0
 8012d6e:	f84c 1b04 	str.w	r1, [ip], #4
 8012d72:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012d76:	dcec      	bgt.n	8012d52 <__multadd+0x12>
 8012d78:	b30e      	cbz	r6, 8012dbe <__multadd+0x7e>
 8012d7a:	68a3      	ldr	r3, [r4, #8]
 8012d7c:	42ab      	cmp	r3, r5
 8012d7e:	dc19      	bgt.n	8012db4 <__multadd+0x74>
 8012d80:	6861      	ldr	r1, [r4, #4]
 8012d82:	4638      	mov	r0, r7
 8012d84:	3101      	adds	r1, #1
 8012d86:	f7ff ff79 	bl	8012c7c <_Balloc>
 8012d8a:	4680      	mov	r8, r0
 8012d8c:	b928      	cbnz	r0, 8012d9a <__multadd+0x5a>
 8012d8e:	4602      	mov	r2, r0
 8012d90:	4b0c      	ldr	r3, [pc, #48]	@ (8012dc4 <__multadd+0x84>)
 8012d92:	480d      	ldr	r0, [pc, #52]	@ (8012dc8 <__multadd+0x88>)
 8012d94:	21ba      	movs	r1, #186	@ 0xba
 8012d96:	f000 fd65 	bl	8013864 <__assert_func>
 8012d9a:	6922      	ldr	r2, [r4, #16]
 8012d9c:	3202      	adds	r2, #2
 8012d9e:	f104 010c 	add.w	r1, r4, #12
 8012da2:	0092      	lsls	r2, r2, #2
 8012da4:	300c      	adds	r0, #12
 8012da6:	f7ff f8c4 	bl	8011f32 <memcpy>
 8012daa:	4621      	mov	r1, r4
 8012dac:	4638      	mov	r0, r7
 8012dae:	f7ff ffa5 	bl	8012cfc <_Bfree>
 8012db2:	4644      	mov	r4, r8
 8012db4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012db8:	3501      	adds	r5, #1
 8012dba:	615e      	str	r6, [r3, #20]
 8012dbc:	6125      	str	r5, [r4, #16]
 8012dbe:	4620      	mov	r0, r4
 8012dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012dc4:	080bdaa8 	.word	0x080bdaa8
 8012dc8:	080bdab9 	.word	0x080bdab9

08012dcc <__hi0bits>:
 8012dcc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8012dd0:	4603      	mov	r3, r0
 8012dd2:	bf36      	itet	cc
 8012dd4:	0403      	lslcc	r3, r0, #16
 8012dd6:	2000      	movcs	r0, #0
 8012dd8:	2010      	movcc	r0, #16
 8012dda:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8012dde:	bf3c      	itt	cc
 8012de0:	021b      	lslcc	r3, r3, #8
 8012de2:	3008      	addcc	r0, #8
 8012de4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012de8:	bf3c      	itt	cc
 8012dea:	011b      	lslcc	r3, r3, #4
 8012dec:	3004      	addcc	r0, #4
 8012dee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012df2:	bf3c      	itt	cc
 8012df4:	009b      	lslcc	r3, r3, #2
 8012df6:	3002      	addcc	r0, #2
 8012df8:	2b00      	cmp	r3, #0
 8012dfa:	db05      	blt.n	8012e08 <__hi0bits+0x3c>
 8012dfc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8012e00:	f100 0001 	add.w	r0, r0, #1
 8012e04:	bf08      	it	eq
 8012e06:	2020      	moveq	r0, #32
 8012e08:	4770      	bx	lr

08012e0a <__lo0bits>:
 8012e0a:	6803      	ldr	r3, [r0, #0]
 8012e0c:	4602      	mov	r2, r0
 8012e0e:	f013 0007 	ands.w	r0, r3, #7
 8012e12:	d00b      	beq.n	8012e2c <__lo0bits+0x22>
 8012e14:	07d9      	lsls	r1, r3, #31
 8012e16:	d421      	bmi.n	8012e5c <__lo0bits+0x52>
 8012e18:	0798      	lsls	r0, r3, #30
 8012e1a:	bf49      	itett	mi
 8012e1c:	085b      	lsrmi	r3, r3, #1
 8012e1e:	089b      	lsrpl	r3, r3, #2
 8012e20:	2001      	movmi	r0, #1
 8012e22:	6013      	strmi	r3, [r2, #0]
 8012e24:	bf5c      	itt	pl
 8012e26:	6013      	strpl	r3, [r2, #0]
 8012e28:	2002      	movpl	r0, #2
 8012e2a:	4770      	bx	lr
 8012e2c:	b299      	uxth	r1, r3
 8012e2e:	b909      	cbnz	r1, 8012e34 <__lo0bits+0x2a>
 8012e30:	0c1b      	lsrs	r3, r3, #16
 8012e32:	2010      	movs	r0, #16
 8012e34:	b2d9      	uxtb	r1, r3
 8012e36:	b909      	cbnz	r1, 8012e3c <__lo0bits+0x32>
 8012e38:	3008      	adds	r0, #8
 8012e3a:	0a1b      	lsrs	r3, r3, #8
 8012e3c:	0719      	lsls	r1, r3, #28
 8012e3e:	bf04      	itt	eq
 8012e40:	091b      	lsreq	r3, r3, #4
 8012e42:	3004      	addeq	r0, #4
 8012e44:	0799      	lsls	r1, r3, #30
 8012e46:	bf04      	itt	eq
 8012e48:	089b      	lsreq	r3, r3, #2
 8012e4a:	3002      	addeq	r0, #2
 8012e4c:	07d9      	lsls	r1, r3, #31
 8012e4e:	d403      	bmi.n	8012e58 <__lo0bits+0x4e>
 8012e50:	085b      	lsrs	r3, r3, #1
 8012e52:	f100 0001 	add.w	r0, r0, #1
 8012e56:	d003      	beq.n	8012e60 <__lo0bits+0x56>
 8012e58:	6013      	str	r3, [r2, #0]
 8012e5a:	4770      	bx	lr
 8012e5c:	2000      	movs	r0, #0
 8012e5e:	4770      	bx	lr
 8012e60:	2020      	movs	r0, #32
 8012e62:	4770      	bx	lr

08012e64 <__i2b>:
 8012e64:	b510      	push	{r4, lr}
 8012e66:	460c      	mov	r4, r1
 8012e68:	2101      	movs	r1, #1
 8012e6a:	f7ff ff07 	bl	8012c7c <_Balloc>
 8012e6e:	4602      	mov	r2, r0
 8012e70:	b928      	cbnz	r0, 8012e7e <__i2b+0x1a>
 8012e72:	4b05      	ldr	r3, [pc, #20]	@ (8012e88 <__i2b+0x24>)
 8012e74:	4805      	ldr	r0, [pc, #20]	@ (8012e8c <__i2b+0x28>)
 8012e76:	f240 1145 	movw	r1, #325	@ 0x145
 8012e7a:	f000 fcf3 	bl	8013864 <__assert_func>
 8012e7e:	2301      	movs	r3, #1
 8012e80:	6144      	str	r4, [r0, #20]
 8012e82:	6103      	str	r3, [r0, #16]
 8012e84:	bd10      	pop	{r4, pc}
 8012e86:	bf00      	nop
 8012e88:	080bdaa8 	.word	0x080bdaa8
 8012e8c:	080bdab9 	.word	0x080bdab9

08012e90 <__multiply>:
 8012e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e94:	4614      	mov	r4, r2
 8012e96:	690a      	ldr	r2, [r1, #16]
 8012e98:	6923      	ldr	r3, [r4, #16]
 8012e9a:	429a      	cmp	r2, r3
 8012e9c:	bfa8      	it	ge
 8012e9e:	4623      	movge	r3, r4
 8012ea0:	460f      	mov	r7, r1
 8012ea2:	bfa4      	itt	ge
 8012ea4:	460c      	movge	r4, r1
 8012ea6:	461f      	movge	r7, r3
 8012ea8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8012eac:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8012eb0:	68a3      	ldr	r3, [r4, #8]
 8012eb2:	6861      	ldr	r1, [r4, #4]
 8012eb4:	eb0a 0609 	add.w	r6, sl, r9
 8012eb8:	42b3      	cmp	r3, r6
 8012eba:	b085      	sub	sp, #20
 8012ebc:	bfb8      	it	lt
 8012ebe:	3101      	addlt	r1, #1
 8012ec0:	f7ff fedc 	bl	8012c7c <_Balloc>
 8012ec4:	b930      	cbnz	r0, 8012ed4 <__multiply+0x44>
 8012ec6:	4602      	mov	r2, r0
 8012ec8:	4b44      	ldr	r3, [pc, #272]	@ (8012fdc <__multiply+0x14c>)
 8012eca:	4845      	ldr	r0, [pc, #276]	@ (8012fe0 <__multiply+0x150>)
 8012ecc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8012ed0:	f000 fcc8 	bl	8013864 <__assert_func>
 8012ed4:	f100 0514 	add.w	r5, r0, #20
 8012ed8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012edc:	462b      	mov	r3, r5
 8012ede:	2200      	movs	r2, #0
 8012ee0:	4543      	cmp	r3, r8
 8012ee2:	d321      	bcc.n	8012f28 <__multiply+0x98>
 8012ee4:	f107 0114 	add.w	r1, r7, #20
 8012ee8:	f104 0214 	add.w	r2, r4, #20
 8012eec:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8012ef0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8012ef4:	9302      	str	r3, [sp, #8]
 8012ef6:	1b13      	subs	r3, r2, r4
 8012ef8:	3b15      	subs	r3, #21
 8012efa:	f023 0303 	bic.w	r3, r3, #3
 8012efe:	3304      	adds	r3, #4
 8012f00:	f104 0715 	add.w	r7, r4, #21
 8012f04:	42ba      	cmp	r2, r7
 8012f06:	bf38      	it	cc
 8012f08:	2304      	movcc	r3, #4
 8012f0a:	9301      	str	r3, [sp, #4]
 8012f0c:	9b02      	ldr	r3, [sp, #8]
 8012f0e:	9103      	str	r1, [sp, #12]
 8012f10:	428b      	cmp	r3, r1
 8012f12:	d80c      	bhi.n	8012f2e <__multiply+0x9e>
 8012f14:	2e00      	cmp	r6, #0
 8012f16:	dd03      	ble.n	8012f20 <__multiply+0x90>
 8012f18:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	d05b      	beq.n	8012fd8 <__multiply+0x148>
 8012f20:	6106      	str	r6, [r0, #16]
 8012f22:	b005      	add	sp, #20
 8012f24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f28:	f843 2b04 	str.w	r2, [r3], #4
 8012f2c:	e7d8      	b.n	8012ee0 <__multiply+0x50>
 8012f2e:	f8b1 a000 	ldrh.w	sl, [r1]
 8012f32:	f1ba 0f00 	cmp.w	sl, #0
 8012f36:	d024      	beq.n	8012f82 <__multiply+0xf2>
 8012f38:	f104 0e14 	add.w	lr, r4, #20
 8012f3c:	46a9      	mov	r9, r5
 8012f3e:	f04f 0c00 	mov.w	ip, #0
 8012f42:	f85e 7b04 	ldr.w	r7, [lr], #4
 8012f46:	f8d9 3000 	ldr.w	r3, [r9]
 8012f4a:	fa1f fb87 	uxth.w	fp, r7
 8012f4e:	b29b      	uxth	r3, r3
 8012f50:	fb0a 330b 	mla	r3, sl, fp, r3
 8012f54:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8012f58:	f8d9 7000 	ldr.w	r7, [r9]
 8012f5c:	4463      	add	r3, ip
 8012f5e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8012f62:	fb0a c70b 	mla	r7, sl, fp, ip
 8012f66:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8012f6a:	b29b      	uxth	r3, r3
 8012f6c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8012f70:	4572      	cmp	r2, lr
 8012f72:	f849 3b04 	str.w	r3, [r9], #4
 8012f76:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8012f7a:	d8e2      	bhi.n	8012f42 <__multiply+0xb2>
 8012f7c:	9b01      	ldr	r3, [sp, #4]
 8012f7e:	f845 c003 	str.w	ip, [r5, r3]
 8012f82:	9b03      	ldr	r3, [sp, #12]
 8012f84:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8012f88:	3104      	adds	r1, #4
 8012f8a:	f1b9 0f00 	cmp.w	r9, #0
 8012f8e:	d021      	beq.n	8012fd4 <__multiply+0x144>
 8012f90:	682b      	ldr	r3, [r5, #0]
 8012f92:	f104 0c14 	add.w	ip, r4, #20
 8012f96:	46ae      	mov	lr, r5
 8012f98:	f04f 0a00 	mov.w	sl, #0
 8012f9c:	f8bc b000 	ldrh.w	fp, [ip]
 8012fa0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8012fa4:	fb09 770b 	mla	r7, r9, fp, r7
 8012fa8:	4457      	add	r7, sl
 8012faa:	b29b      	uxth	r3, r3
 8012fac:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8012fb0:	f84e 3b04 	str.w	r3, [lr], #4
 8012fb4:	f85c 3b04 	ldr.w	r3, [ip], #4
 8012fb8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012fbc:	f8be 3000 	ldrh.w	r3, [lr]
 8012fc0:	fb09 330a 	mla	r3, r9, sl, r3
 8012fc4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8012fc8:	4562      	cmp	r2, ip
 8012fca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012fce:	d8e5      	bhi.n	8012f9c <__multiply+0x10c>
 8012fd0:	9f01      	ldr	r7, [sp, #4]
 8012fd2:	51eb      	str	r3, [r5, r7]
 8012fd4:	3504      	adds	r5, #4
 8012fd6:	e799      	b.n	8012f0c <__multiply+0x7c>
 8012fd8:	3e01      	subs	r6, #1
 8012fda:	e79b      	b.n	8012f14 <__multiply+0x84>
 8012fdc:	080bdaa8 	.word	0x080bdaa8
 8012fe0:	080bdab9 	.word	0x080bdab9

08012fe4 <__pow5mult>:
 8012fe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012fe8:	4615      	mov	r5, r2
 8012fea:	f012 0203 	ands.w	r2, r2, #3
 8012fee:	4607      	mov	r7, r0
 8012ff0:	460e      	mov	r6, r1
 8012ff2:	d007      	beq.n	8013004 <__pow5mult+0x20>
 8012ff4:	4c25      	ldr	r4, [pc, #148]	@ (801308c <__pow5mult+0xa8>)
 8012ff6:	3a01      	subs	r2, #1
 8012ff8:	2300      	movs	r3, #0
 8012ffa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012ffe:	f7ff fe9f 	bl	8012d40 <__multadd>
 8013002:	4606      	mov	r6, r0
 8013004:	10ad      	asrs	r5, r5, #2
 8013006:	d03d      	beq.n	8013084 <__pow5mult+0xa0>
 8013008:	69fc      	ldr	r4, [r7, #28]
 801300a:	b97c      	cbnz	r4, 801302c <__pow5mult+0x48>
 801300c:	2010      	movs	r0, #16
 801300e:	f7fd ffe9 	bl	8010fe4 <malloc>
 8013012:	4602      	mov	r2, r0
 8013014:	61f8      	str	r0, [r7, #28]
 8013016:	b928      	cbnz	r0, 8013024 <__pow5mult+0x40>
 8013018:	4b1d      	ldr	r3, [pc, #116]	@ (8013090 <__pow5mult+0xac>)
 801301a:	481e      	ldr	r0, [pc, #120]	@ (8013094 <__pow5mult+0xb0>)
 801301c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8013020:	f000 fc20 	bl	8013864 <__assert_func>
 8013024:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013028:	6004      	str	r4, [r0, #0]
 801302a:	60c4      	str	r4, [r0, #12]
 801302c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8013030:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013034:	b94c      	cbnz	r4, 801304a <__pow5mult+0x66>
 8013036:	f240 2171 	movw	r1, #625	@ 0x271
 801303a:	4638      	mov	r0, r7
 801303c:	f7ff ff12 	bl	8012e64 <__i2b>
 8013040:	2300      	movs	r3, #0
 8013042:	f8c8 0008 	str.w	r0, [r8, #8]
 8013046:	4604      	mov	r4, r0
 8013048:	6003      	str	r3, [r0, #0]
 801304a:	f04f 0900 	mov.w	r9, #0
 801304e:	07eb      	lsls	r3, r5, #31
 8013050:	d50a      	bpl.n	8013068 <__pow5mult+0x84>
 8013052:	4631      	mov	r1, r6
 8013054:	4622      	mov	r2, r4
 8013056:	4638      	mov	r0, r7
 8013058:	f7ff ff1a 	bl	8012e90 <__multiply>
 801305c:	4631      	mov	r1, r6
 801305e:	4680      	mov	r8, r0
 8013060:	4638      	mov	r0, r7
 8013062:	f7ff fe4b 	bl	8012cfc <_Bfree>
 8013066:	4646      	mov	r6, r8
 8013068:	106d      	asrs	r5, r5, #1
 801306a:	d00b      	beq.n	8013084 <__pow5mult+0xa0>
 801306c:	6820      	ldr	r0, [r4, #0]
 801306e:	b938      	cbnz	r0, 8013080 <__pow5mult+0x9c>
 8013070:	4622      	mov	r2, r4
 8013072:	4621      	mov	r1, r4
 8013074:	4638      	mov	r0, r7
 8013076:	f7ff ff0b 	bl	8012e90 <__multiply>
 801307a:	6020      	str	r0, [r4, #0]
 801307c:	f8c0 9000 	str.w	r9, [r0]
 8013080:	4604      	mov	r4, r0
 8013082:	e7e4      	b.n	801304e <__pow5mult+0x6a>
 8013084:	4630      	mov	r0, r6
 8013086:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801308a:	bf00      	nop
 801308c:	080bdb14 	.word	0x080bdb14
 8013090:	080bda39 	.word	0x080bda39
 8013094:	080bdab9 	.word	0x080bdab9

08013098 <__lshift>:
 8013098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801309c:	460c      	mov	r4, r1
 801309e:	6849      	ldr	r1, [r1, #4]
 80130a0:	6923      	ldr	r3, [r4, #16]
 80130a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80130a6:	68a3      	ldr	r3, [r4, #8]
 80130a8:	4607      	mov	r7, r0
 80130aa:	4691      	mov	r9, r2
 80130ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80130b0:	f108 0601 	add.w	r6, r8, #1
 80130b4:	42b3      	cmp	r3, r6
 80130b6:	db0b      	blt.n	80130d0 <__lshift+0x38>
 80130b8:	4638      	mov	r0, r7
 80130ba:	f7ff fddf 	bl	8012c7c <_Balloc>
 80130be:	4605      	mov	r5, r0
 80130c0:	b948      	cbnz	r0, 80130d6 <__lshift+0x3e>
 80130c2:	4602      	mov	r2, r0
 80130c4:	4b28      	ldr	r3, [pc, #160]	@ (8013168 <__lshift+0xd0>)
 80130c6:	4829      	ldr	r0, [pc, #164]	@ (801316c <__lshift+0xd4>)
 80130c8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80130cc:	f000 fbca 	bl	8013864 <__assert_func>
 80130d0:	3101      	adds	r1, #1
 80130d2:	005b      	lsls	r3, r3, #1
 80130d4:	e7ee      	b.n	80130b4 <__lshift+0x1c>
 80130d6:	2300      	movs	r3, #0
 80130d8:	f100 0114 	add.w	r1, r0, #20
 80130dc:	f100 0210 	add.w	r2, r0, #16
 80130e0:	4618      	mov	r0, r3
 80130e2:	4553      	cmp	r3, sl
 80130e4:	db33      	blt.n	801314e <__lshift+0xb6>
 80130e6:	6920      	ldr	r0, [r4, #16]
 80130e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80130ec:	f104 0314 	add.w	r3, r4, #20
 80130f0:	f019 091f 	ands.w	r9, r9, #31
 80130f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80130f8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80130fc:	d02b      	beq.n	8013156 <__lshift+0xbe>
 80130fe:	f1c9 0e20 	rsb	lr, r9, #32
 8013102:	468a      	mov	sl, r1
 8013104:	2200      	movs	r2, #0
 8013106:	6818      	ldr	r0, [r3, #0]
 8013108:	fa00 f009 	lsl.w	r0, r0, r9
 801310c:	4310      	orrs	r0, r2
 801310e:	f84a 0b04 	str.w	r0, [sl], #4
 8013112:	f853 2b04 	ldr.w	r2, [r3], #4
 8013116:	459c      	cmp	ip, r3
 8013118:	fa22 f20e 	lsr.w	r2, r2, lr
 801311c:	d8f3      	bhi.n	8013106 <__lshift+0x6e>
 801311e:	ebac 0304 	sub.w	r3, ip, r4
 8013122:	3b15      	subs	r3, #21
 8013124:	f023 0303 	bic.w	r3, r3, #3
 8013128:	3304      	adds	r3, #4
 801312a:	f104 0015 	add.w	r0, r4, #21
 801312e:	4584      	cmp	ip, r0
 8013130:	bf38      	it	cc
 8013132:	2304      	movcc	r3, #4
 8013134:	50ca      	str	r2, [r1, r3]
 8013136:	b10a      	cbz	r2, 801313c <__lshift+0xa4>
 8013138:	f108 0602 	add.w	r6, r8, #2
 801313c:	3e01      	subs	r6, #1
 801313e:	4638      	mov	r0, r7
 8013140:	612e      	str	r6, [r5, #16]
 8013142:	4621      	mov	r1, r4
 8013144:	f7ff fdda 	bl	8012cfc <_Bfree>
 8013148:	4628      	mov	r0, r5
 801314a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801314e:	f842 0f04 	str.w	r0, [r2, #4]!
 8013152:	3301      	adds	r3, #1
 8013154:	e7c5      	b.n	80130e2 <__lshift+0x4a>
 8013156:	3904      	subs	r1, #4
 8013158:	f853 2b04 	ldr.w	r2, [r3], #4
 801315c:	f841 2f04 	str.w	r2, [r1, #4]!
 8013160:	459c      	cmp	ip, r3
 8013162:	d8f9      	bhi.n	8013158 <__lshift+0xc0>
 8013164:	e7ea      	b.n	801313c <__lshift+0xa4>
 8013166:	bf00      	nop
 8013168:	080bdaa8 	.word	0x080bdaa8
 801316c:	080bdab9 	.word	0x080bdab9

08013170 <__mcmp>:
 8013170:	690a      	ldr	r2, [r1, #16]
 8013172:	4603      	mov	r3, r0
 8013174:	6900      	ldr	r0, [r0, #16]
 8013176:	1a80      	subs	r0, r0, r2
 8013178:	b530      	push	{r4, r5, lr}
 801317a:	d10e      	bne.n	801319a <__mcmp+0x2a>
 801317c:	3314      	adds	r3, #20
 801317e:	3114      	adds	r1, #20
 8013180:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8013184:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8013188:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801318c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8013190:	4295      	cmp	r5, r2
 8013192:	d003      	beq.n	801319c <__mcmp+0x2c>
 8013194:	d205      	bcs.n	80131a2 <__mcmp+0x32>
 8013196:	f04f 30ff 	mov.w	r0, #4294967295
 801319a:	bd30      	pop	{r4, r5, pc}
 801319c:	42a3      	cmp	r3, r4
 801319e:	d3f3      	bcc.n	8013188 <__mcmp+0x18>
 80131a0:	e7fb      	b.n	801319a <__mcmp+0x2a>
 80131a2:	2001      	movs	r0, #1
 80131a4:	e7f9      	b.n	801319a <__mcmp+0x2a>
	...

080131a8 <__mdiff>:
 80131a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131ac:	4689      	mov	r9, r1
 80131ae:	4606      	mov	r6, r0
 80131b0:	4611      	mov	r1, r2
 80131b2:	4648      	mov	r0, r9
 80131b4:	4614      	mov	r4, r2
 80131b6:	f7ff ffdb 	bl	8013170 <__mcmp>
 80131ba:	1e05      	subs	r5, r0, #0
 80131bc:	d112      	bne.n	80131e4 <__mdiff+0x3c>
 80131be:	4629      	mov	r1, r5
 80131c0:	4630      	mov	r0, r6
 80131c2:	f7ff fd5b 	bl	8012c7c <_Balloc>
 80131c6:	4602      	mov	r2, r0
 80131c8:	b928      	cbnz	r0, 80131d6 <__mdiff+0x2e>
 80131ca:	4b3f      	ldr	r3, [pc, #252]	@ (80132c8 <__mdiff+0x120>)
 80131cc:	f240 2137 	movw	r1, #567	@ 0x237
 80131d0:	483e      	ldr	r0, [pc, #248]	@ (80132cc <__mdiff+0x124>)
 80131d2:	f000 fb47 	bl	8013864 <__assert_func>
 80131d6:	2301      	movs	r3, #1
 80131d8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80131dc:	4610      	mov	r0, r2
 80131de:	b003      	add	sp, #12
 80131e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131e4:	bfbc      	itt	lt
 80131e6:	464b      	movlt	r3, r9
 80131e8:	46a1      	movlt	r9, r4
 80131ea:	4630      	mov	r0, r6
 80131ec:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80131f0:	bfba      	itte	lt
 80131f2:	461c      	movlt	r4, r3
 80131f4:	2501      	movlt	r5, #1
 80131f6:	2500      	movge	r5, #0
 80131f8:	f7ff fd40 	bl	8012c7c <_Balloc>
 80131fc:	4602      	mov	r2, r0
 80131fe:	b918      	cbnz	r0, 8013208 <__mdiff+0x60>
 8013200:	4b31      	ldr	r3, [pc, #196]	@ (80132c8 <__mdiff+0x120>)
 8013202:	f240 2145 	movw	r1, #581	@ 0x245
 8013206:	e7e3      	b.n	80131d0 <__mdiff+0x28>
 8013208:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801320c:	6926      	ldr	r6, [r4, #16]
 801320e:	60c5      	str	r5, [r0, #12]
 8013210:	f109 0310 	add.w	r3, r9, #16
 8013214:	f109 0514 	add.w	r5, r9, #20
 8013218:	f104 0e14 	add.w	lr, r4, #20
 801321c:	f100 0b14 	add.w	fp, r0, #20
 8013220:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8013224:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8013228:	9301      	str	r3, [sp, #4]
 801322a:	46d9      	mov	r9, fp
 801322c:	f04f 0c00 	mov.w	ip, #0
 8013230:	9b01      	ldr	r3, [sp, #4]
 8013232:	f85e 0b04 	ldr.w	r0, [lr], #4
 8013236:	f853 af04 	ldr.w	sl, [r3, #4]!
 801323a:	9301      	str	r3, [sp, #4]
 801323c:	fa1f f38a 	uxth.w	r3, sl
 8013240:	4619      	mov	r1, r3
 8013242:	b283      	uxth	r3, r0
 8013244:	1acb      	subs	r3, r1, r3
 8013246:	0c00      	lsrs	r0, r0, #16
 8013248:	4463      	add	r3, ip
 801324a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801324e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8013252:	b29b      	uxth	r3, r3
 8013254:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8013258:	4576      	cmp	r6, lr
 801325a:	f849 3b04 	str.w	r3, [r9], #4
 801325e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013262:	d8e5      	bhi.n	8013230 <__mdiff+0x88>
 8013264:	1b33      	subs	r3, r6, r4
 8013266:	3b15      	subs	r3, #21
 8013268:	f023 0303 	bic.w	r3, r3, #3
 801326c:	3415      	adds	r4, #21
 801326e:	3304      	adds	r3, #4
 8013270:	42a6      	cmp	r6, r4
 8013272:	bf38      	it	cc
 8013274:	2304      	movcc	r3, #4
 8013276:	441d      	add	r5, r3
 8013278:	445b      	add	r3, fp
 801327a:	461e      	mov	r6, r3
 801327c:	462c      	mov	r4, r5
 801327e:	4544      	cmp	r4, r8
 8013280:	d30e      	bcc.n	80132a0 <__mdiff+0xf8>
 8013282:	f108 0103 	add.w	r1, r8, #3
 8013286:	1b49      	subs	r1, r1, r5
 8013288:	f021 0103 	bic.w	r1, r1, #3
 801328c:	3d03      	subs	r5, #3
 801328e:	45a8      	cmp	r8, r5
 8013290:	bf38      	it	cc
 8013292:	2100      	movcc	r1, #0
 8013294:	440b      	add	r3, r1
 8013296:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801329a:	b191      	cbz	r1, 80132c2 <__mdiff+0x11a>
 801329c:	6117      	str	r7, [r2, #16]
 801329e:	e79d      	b.n	80131dc <__mdiff+0x34>
 80132a0:	f854 1b04 	ldr.w	r1, [r4], #4
 80132a4:	46e6      	mov	lr, ip
 80132a6:	0c08      	lsrs	r0, r1, #16
 80132a8:	fa1c fc81 	uxtah	ip, ip, r1
 80132ac:	4471      	add	r1, lr
 80132ae:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80132b2:	b289      	uxth	r1, r1
 80132b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80132b8:	f846 1b04 	str.w	r1, [r6], #4
 80132bc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80132c0:	e7dd      	b.n	801327e <__mdiff+0xd6>
 80132c2:	3f01      	subs	r7, #1
 80132c4:	e7e7      	b.n	8013296 <__mdiff+0xee>
 80132c6:	bf00      	nop
 80132c8:	080bdaa8 	.word	0x080bdaa8
 80132cc:	080bdab9 	.word	0x080bdab9

080132d0 <__d2b>:
 80132d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80132d4:	460f      	mov	r7, r1
 80132d6:	2101      	movs	r1, #1
 80132d8:	ec59 8b10 	vmov	r8, r9, d0
 80132dc:	4616      	mov	r6, r2
 80132de:	f7ff fccd 	bl	8012c7c <_Balloc>
 80132e2:	4604      	mov	r4, r0
 80132e4:	b930      	cbnz	r0, 80132f4 <__d2b+0x24>
 80132e6:	4602      	mov	r2, r0
 80132e8:	4b23      	ldr	r3, [pc, #140]	@ (8013378 <__d2b+0xa8>)
 80132ea:	4824      	ldr	r0, [pc, #144]	@ (801337c <__d2b+0xac>)
 80132ec:	f240 310f 	movw	r1, #783	@ 0x30f
 80132f0:	f000 fab8 	bl	8013864 <__assert_func>
 80132f4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80132f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80132fc:	b10d      	cbz	r5, 8013302 <__d2b+0x32>
 80132fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8013302:	9301      	str	r3, [sp, #4]
 8013304:	f1b8 0300 	subs.w	r3, r8, #0
 8013308:	d023      	beq.n	8013352 <__d2b+0x82>
 801330a:	4668      	mov	r0, sp
 801330c:	9300      	str	r3, [sp, #0]
 801330e:	f7ff fd7c 	bl	8012e0a <__lo0bits>
 8013312:	e9dd 1200 	ldrd	r1, r2, [sp]
 8013316:	b1d0      	cbz	r0, 801334e <__d2b+0x7e>
 8013318:	f1c0 0320 	rsb	r3, r0, #32
 801331c:	fa02 f303 	lsl.w	r3, r2, r3
 8013320:	430b      	orrs	r3, r1
 8013322:	40c2      	lsrs	r2, r0
 8013324:	6163      	str	r3, [r4, #20]
 8013326:	9201      	str	r2, [sp, #4]
 8013328:	9b01      	ldr	r3, [sp, #4]
 801332a:	61a3      	str	r3, [r4, #24]
 801332c:	2b00      	cmp	r3, #0
 801332e:	bf0c      	ite	eq
 8013330:	2201      	moveq	r2, #1
 8013332:	2202      	movne	r2, #2
 8013334:	6122      	str	r2, [r4, #16]
 8013336:	b1a5      	cbz	r5, 8013362 <__d2b+0x92>
 8013338:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801333c:	4405      	add	r5, r0
 801333e:	603d      	str	r5, [r7, #0]
 8013340:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8013344:	6030      	str	r0, [r6, #0]
 8013346:	4620      	mov	r0, r4
 8013348:	b003      	add	sp, #12
 801334a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801334e:	6161      	str	r1, [r4, #20]
 8013350:	e7ea      	b.n	8013328 <__d2b+0x58>
 8013352:	a801      	add	r0, sp, #4
 8013354:	f7ff fd59 	bl	8012e0a <__lo0bits>
 8013358:	9b01      	ldr	r3, [sp, #4]
 801335a:	6163      	str	r3, [r4, #20]
 801335c:	3020      	adds	r0, #32
 801335e:	2201      	movs	r2, #1
 8013360:	e7e8      	b.n	8013334 <__d2b+0x64>
 8013362:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013366:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801336a:	6038      	str	r0, [r7, #0]
 801336c:	6918      	ldr	r0, [r3, #16]
 801336e:	f7ff fd2d 	bl	8012dcc <__hi0bits>
 8013372:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013376:	e7e5      	b.n	8013344 <__d2b+0x74>
 8013378:	080bdaa8 	.word	0x080bdaa8
 801337c:	080bdab9 	.word	0x080bdab9

08013380 <__sfputc_r>:
 8013380:	6893      	ldr	r3, [r2, #8]
 8013382:	3b01      	subs	r3, #1
 8013384:	2b00      	cmp	r3, #0
 8013386:	b410      	push	{r4}
 8013388:	6093      	str	r3, [r2, #8]
 801338a:	da08      	bge.n	801339e <__sfputc_r+0x1e>
 801338c:	6994      	ldr	r4, [r2, #24]
 801338e:	42a3      	cmp	r3, r4
 8013390:	db01      	blt.n	8013396 <__sfputc_r+0x16>
 8013392:	290a      	cmp	r1, #10
 8013394:	d103      	bne.n	801339e <__sfputc_r+0x1e>
 8013396:	f85d 4b04 	ldr.w	r4, [sp], #4
 801339a:	f7fe bca6 	b.w	8011cea <__swbuf_r>
 801339e:	6813      	ldr	r3, [r2, #0]
 80133a0:	1c58      	adds	r0, r3, #1
 80133a2:	6010      	str	r0, [r2, #0]
 80133a4:	7019      	strb	r1, [r3, #0]
 80133a6:	4608      	mov	r0, r1
 80133a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80133ac:	4770      	bx	lr

080133ae <__sfputs_r>:
 80133ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80133b0:	4606      	mov	r6, r0
 80133b2:	460f      	mov	r7, r1
 80133b4:	4614      	mov	r4, r2
 80133b6:	18d5      	adds	r5, r2, r3
 80133b8:	42ac      	cmp	r4, r5
 80133ba:	d101      	bne.n	80133c0 <__sfputs_r+0x12>
 80133bc:	2000      	movs	r0, #0
 80133be:	e007      	b.n	80133d0 <__sfputs_r+0x22>
 80133c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80133c4:	463a      	mov	r2, r7
 80133c6:	4630      	mov	r0, r6
 80133c8:	f7ff ffda 	bl	8013380 <__sfputc_r>
 80133cc:	1c43      	adds	r3, r0, #1
 80133ce:	d1f3      	bne.n	80133b8 <__sfputs_r+0xa>
 80133d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080133d4 <_vfiprintf_r>:
 80133d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133d8:	460d      	mov	r5, r1
 80133da:	b09d      	sub	sp, #116	@ 0x74
 80133dc:	4614      	mov	r4, r2
 80133de:	4698      	mov	r8, r3
 80133e0:	4606      	mov	r6, r0
 80133e2:	b118      	cbz	r0, 80133ec <_vfiprintf_r+0x18>
 80133e4:	6a03      	ldr	r3, [r0, #32]
 80133e6:	b90b      	cbnz	r3, 80133ec <_vfiprintf_r+0x18>
 80133e8:	f7fe fb96 	bl	8011b18 <__sinit>
 80133ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80133ee:	07d9      	lsls	r1, r3, #31
 80133f0:	d405      	bmi.n	80133fe <_vfiprintf_r+0x2a>
 80133f2:	89ab      	ldrh	r3, [r5, #12]
 80133f4:	059a      	lsls	r2, r3, #22
 80133f6:	d402      	bmi.n	80133fe <_vfiprintf_r+0x2a>
 80133f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80133fa:	f7fe fd98 	bl	8011f2e <__retarget_lock_acquire_recursive>
 80133fe:	89ab      	ldrh	r3, [r5, #12]
 8013400:	071b      	lsls	r3, r3, #28
 8013402:	d501      	bpl.n	8013408 <_vfiprintf_r+0x34>
 8013404:	692b      	ldr	r3, [r5, #16]
 8013406:	b99b      	cbnz	r3, 8013430 <_vfiprintf_r+0x5c>
 8013408:	4629      	mov	r1, r5
 801340a:	4630      	mov	r0, r6
 801340c:	f7fe fcac 	bl	8011d68 <__swsetup_r>
 8013410:	b170      	cbz	r0, 8013430 <_vfiprintf_r+0x5c>
 8013412:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013414:	07dc      	lsls	r4, r3, #31
 8013416:	d504      	bpl.n	8013422 <_vfiprintf_r+0x4e>
 8013418:	f04f 30ff 	mov.w	r0, #4294967295
 801341c:	b01d      	add	sp, #116	@ 0x74
 801341e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013422:	89ab      	ldrh	r3, [r5, #12]
 8013424:	0598      	lsls	r0, r3, #22
 8013426:	d4f7      	bmi.n	8013418 <_vfiprintf_r+0x44>
 8013428:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801342a:	f7fe fd81 	bl	8011f30 <__retarget_lock_release_recursive>
 801342e:	e7f3      	b.n	8013418 <_vfiprintf_r+0x44>
 8013430:	2300      	movs	r3, #0
 8013432:	9309      	str	r3, [sp, #36]	@ 0x24
 8013434:	2320      	movs	r3, #32
 8013436:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801343a:	f8cd 800c 	str.w	r8, [sp, #12]
 801343e:	2330      	movs	r3, #48	@ 0x30
 8013440:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80135f0 <_vfiprintf_r+0x21c>
 8013444:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013448:	f04f 0901 	mov.w	r9, #1
 801344c:	4623      	mov	r3, r4
 801344e:	469a      	mov	sl, r3
 8013450:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013454:	b10a      	cbz	r2, 801345a <_vfiprintf_r+0x86>
 8013456:	2a25      	cmp	r2, #37	@ 0x25
 8013458:	d1f9      	bne.n	801344e <_vfiprintf_r+0x7a>
 801345a:	ebba 0b04 	subs.w	fp, sl, r4
 801345e:	d00b      	beq.n	8013478 <_vfiprintf_r+0xa4>
 8013460:	465b      	mov	r3, fp
 8013462:	4622      	mov	r2, r4
 8013464:	4629      	mov	r1, r5
 8013466:	4630      	mov	r0, r6
 8013468:	f7ff ffa1 	bl	80133ae <__sfputs_r>
 801346c:	3001      	adds	r0, #1
 801346e:	f000 80a7 	beq.w	80135c0 <_vfiprintf_r+0x1ec>
 8013472:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013474:	445a      	add	r2, fp
 8013476:	9209      	str	r2, [sp, #36]	@ 0x24
 8013478:	f89a 3000 	ldrb.w	r3, [sl]
 801347c:	2b00      	cmp	r3, #0
 801347e:	f000 809f 	beq.w	80135c0 <_vfiprintf_r+0x1ec>
 8013482:	2300      	movs	r3, #0
 8013484:	f04f 32ff 	mov.w	r2, #4294967295
 8013488:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801348c:	f10a 0a01 	add.w	sl, sl, #1
 8013490:	9304      	str	r3, [sp, #16]
 8013492:	9307      	str	r3, [sp, #28]
 8013494:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013498:	931a      	str	r3, [sp, #104]	@ 0x68
 801349a:	4654      	mov	r4, sl
 801349c:	2205      	movs	r2, #5
 801349e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80134a2:	4853      	ldr	r0, [pc, #332]	@ (80135f0 <_vfiprintf_r+0x21c>)
 80134a4:	f7ec feb4 	bl	8000210 <memchr>
 80134a8:	9a04      	ldr	r2, [sp, #16]
 80134aa:	b9d8      	cbnz	r0, 80134e4 <_vfiprintf_r+0x110>
 80134ac:	06d1      	lsls	r1, r2, #27
 80134ae:	bf44      	itt	mi
 80134b0:	2320      	movmi	r3, #32
 80134b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80134b6:	0713      	lsls	r3, r2, #28
 80134b8:	bf44      	itt	mi
 80134ba:	232b      	movmi	r3, #43	@ 0x2b
 80134bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80134c0:	f89a 3000 	ldrb.w	r3, [sl]
 80134c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80134c6:	d015      	beq.n	80134f4 <_vfiprintf_r+0x120>
 80134c8:	9a07      	ldr	r2, [sp, #28]
 80134ca:	4654      	mov	r4, sl
 80134cc:	2000      	movs	r0, #0
 80134ce:	f04f 0c0a 	mov.w	ip, #10
 80134d2:	4621      	mov	r1, r4
 80134d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80134d8:	3b30      	subs	r3, #48	@ 0x30
 80134da:	2b09      	cmp	r3, #9
 80134dc:	d94b      	bls.n	8013576 <_vfiprintf_r+0x1a2>
 80134de:	b1b0      	cbz	r0, 801350e <_vfiprintf_r+0x13a>
 80134e0:	9207      	str	r2, [sp, #28]
 80134e2:	e014      	b.n	801350e <_vfiprintf_r+0x13a>
 80134e4:	eba0 0308 	sub.w	r3, r0, r8
 80134e8:	fa09 f303 	lsl.w	r3, r9, r3
 80134ec:	4313      	orrs	r3, r2
 80134ee:	9304      	str	r3, [sp, #16]
 80134f0:	46a2      	mov	sl, r4
 80134f2:	e7d2      	b.n	801349a <_vfiprintf_r+0xc6>
 80134f4:	9b03      	ldr	r3, [sp, #12]
 80134f6:	1d19      	adds	r1, r3, #4
 80134f8:	681b      	ldr	r3, [r3, #0]
 80134fa:	9103      	str	r1, [sp, #12]
 80134fc:	2b00      	cmp	r3, #0
 80134fe:	bfbb      	ittet	lt
 8013500:	425b      	neglt	r3, r3
 8013502:	f042 0202 	orrlt.w	r2, r2, #2
 8013506:	9307      	strge	r3, [sp, #28]
 8013508:	9307      	strlt	r3, [sp, #28]
 801350a:	bfb8      	it	lt
 801350c:	9204      	strlt	r2, [sp, #16]
 801350e:	7823      	ldrb	r3, [r4, #0]
 8013510:	2b2e      	cmp	r3, #46	@ 0x2e
 8013512:	d10a      	bne.n	801352a <_vfiprintf_r+0x156>
 8013514:	7863      	ldrb	r3, [r4, #1]
 8013516:	2b2a      	cmp	r3, #42	@ 0x2a
 8013518:	d132      	bne.n	8013580 <_vfiprintf_r+0x1ac>
 801351a:	9b03      	ldr	r3, [sp, #12]
 801351c:	1d1a      	adds	r2, r3, #4
 801351e:	681b      	ldr	r3, [r3, #0]
 8013520:	9203      	str	r2, [sp, #12]
 8013522:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013526:	3402      	adds	r4, #2
 8013528:	9305      	str	r3, [sp, #20]
 801352a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8013600 <_vfiprintf_r+0x22c>
 801352e:	7821      	ldrb	r1, [r4, #0]
 8013530:	2203      	movs	r2, #3
 8013532:	4650      	mov	r0, sl
 8013534:	f7ec fe6c 	bl	8000210 <memchr>
 8013538:	b138      	cbz	r0, 801354a <_vfiprintf_r+0x176>
 801353a:	9b04      	ldr	r3, [sp, #16]
 801353c:	eba0 000a 	sub.w	r0, r0, sl
 8013540:	2240      	movs	r2, #64	@ 0x40
 8013542:	4082      	lsls	r2, r0
 8013544:	4313      	orrs	r3, r2
 8013546:	3401      	adds	r4, #1
 8013548:	9304      	str	r3, [sp, #16]
 801354a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801354e:	4829      	ldr	r0, [pc, #164]	@ (80135f4 <_vfiprintf_r+0x220>)
 8013550:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013554:	2206      	movs	r2, #6
 8013556:	f7ec fe5b 	bl	8000210 <memchr>
 801355a:	2800      	cmp	r0, #0
 801355c:	d03f      	beq.n	80135de <_vfiprintf_r+0x20a>
 801355e:	4b26      	ldr	r3, [pc, #152]	@ (80135f8 <_vfiprintf_r+0x224>)
 8013560:	bb1b      	cbnz	r3, 80135aa <_vfiprintf_r+0x1d6>
 8013562:	9b03      	ldr	r3, [sp, #12]
 8013564:	3307      	adds	r3, #7
 8013566:	f023 0307 	bic.w	r3, r3, #7
 801356a:	3308      	adds	r3, #8
 801356c:	9303      	str	r3, [sp, #12]
 801356e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013570:	443b      	add	r3, r7
 8013572:	9309      	str	r3, [sp, #36]	@ 0x24
 8013574:	e76a      	b.n	801344c <_vfiprintf_r+0x78>
 8013576:	fb0c 3202 	mla	r2, ip, r2, r3
 801357a:	460c      	mov	r4, r1
 801357c:	2001      	movs	r0, #1
 801357e:	e7a8      	b.n	80134d2 <_vfiprintf_r+0xfe>
 8013580:	2300      	movs	r3, #0
 8013582:	3401      	adds	r4, #1
 8013584:	9305      	str	r3, [sp, #20]
 8013586:	4619      	mov	r1, r3
 8013588:	f04f 0c0a 	mov.w	ip, #10
 801358c:	4620      	mov	r0, r4
 801358e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013592:	3a30      	subs	r2, #48	@ 0x30
 8013594:	2a09      	cmp	r2, #9
 8013596:	d903      	bls.n	80135a0 <_vfiprintf_r+0x1cc>
 8013598:	2b00      	cmp	r3, #0
 801359a:	d0c6      	beq.n	801352a <_vfiprintf_r+0x156>
 801359c:	9105      	str	r1, [sp, #20]
 801359e:	e7c4      	b.n	801352a <_vfiprintf_r+0x156>
 80135a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80135a4:	4604      	mov	r4, r0
 80135a6:	2301      	movs	r3, #1
 80135a8:	e7f0      	b.n	801358c <_vfiprintf_r+0x1b8>
 80135aa:	ab03      	add	r3, sp, #12
 80135ac:	9300      	str	r3, [sp, #0]
 80135ae:	462a      	mov	r2, r5
 80135b0:	4b12      	ldr	r3, [pc, #72]	@ (80135fc <_vfiprintf_r+0x228>)
 80135b2:	a904      	add	r1, sp, #16
 80135b4:	4630      	mov	r0, r6
 80135b6:	f7fd fe6b 	bl	8011290 <_printf_float>
 80135ba:	4607      	mov	r7, r0
 80135bc:	1c78      	adds	r0, r7, #1
 80135be:	d1d6      	bne.n	801356e <_vfiprintf_r+0x19a>
 80135c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80135c2:	07d9      	lsls	r1, r3, #31
 80135c4:	d405      	bmi.n	80135d2 <_vfiprintf_r+0x1fe>
 80135c6:	89ab      	ldrh	r3, [r5, #12]
 80135c8:	059a      	lsls	r2, r3, #22
 80135ca:	d402      	bmi.n	80135d2 <_vfiprintf_r+0x1fe>
 80135cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80135ce:	f7fe fcaf 	bl	8011f30 <__retarget_lock_release_recursive>
 80135d2:	89ab      	ldrh	r3, [r5, #12]
 80135d4:	065b      	lsls	r3, r3, #25
 80135d6:	f53f af1f 	bmi.w	8013418 <_vfiprintf_r+0x44>
 80135da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80135dc:	e71e      	b.n	801341c <_vfiprintf_r+0x48>
 80135de:	ab03      	add	r3, sp, #12
 80135e0:	9300      	str	r3, [sp, #0]
 80135e2:	462a      	mov	r2, r5
 80135e4:	4b05      	ldr	r3, [pc, #20]	@ (80135fc <_vfiprintf_r+0x228>)
 80135e6:	a904      	add	r1, sp, #16
 80135e8:	4630      	mov	r0, r6
 80135ea:	f7fe f8e9 	bl	80117c0 <_printf_i>
 80135ee:	e7e4      	b.n	80135ba <_vfiprintf_r+0x1e6>
 80135f0:	080bdc10 	.word	0x080bdc10
 80135f4:	080bdc1a 	.word	0x080bdc1a
 80135f8:	08011291 	.word	0x08011291
 80135fc:	080133af 	.word	0x080133af
 8013600:	080bdc16 	.word	0x080bdc16

08013604 <__sflush_r>:
 8013604:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801360c:	0716      	lsls	r6, r2, #28
 801360e:	4605      	mov	r5, r0
 8013610:	460c      	mov	r4, r1
 8013612:	d454      	bmi.n	80136be <__sflush_r+0xba>
 8013614:	684b      	ldr	r3, [r1, #4]
 8013616:	2b00      	cmp	r3, #0
 8013618:	dc02      	bgt.n	8013620 <__sflush_r+0x1c>
 801361a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801361c:	2b00      	cmp	r3, #0
 801361e:	dd48      	ble.n	80136b2 <__sflush_r+0xae>
 8013620:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013622:	2e00      	cmp	r6, #0
 8013624:	d045      	beq.n	80136b2 <__sflush_r+0xae>
 8013626:	2300      	movs	r3, #0
 8013628:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801362c:	682f      	ldr	r7, [r5, #0]
 801362e:	6a21      	ldr	r1, [r4, #32]
 8013630:	602b      	str	r3, [r5, #0]
 8013632:	d030      	beq.n	8013696 <__sflush_r+0x92>
 8013634:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8013636:	89a3      	ldrh	r3, [r4, #12]
 8013638:	0759      	lsls	r1, r3, #29
 801363a:	d505      	bpl.n	8013648 <__sflush_r+0x44>
 801363c:	6863      	ldr	r3, [r4, #4]
 801363e:	1ad2      	subs	r2, r2, r3
 8013640:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8013642:	b10b      	cbz	r3, 8013648 <__sflush_r+0x44>
 8013644:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8013646:	1ad2      	subs	r2, r2, r3
 8013648:	2300      	movs	r3, #0
 801364a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801364c:	6a21      	ldr	r1, [r4, #32]
 801364e:	4628      	mov	r0, r5
 8013650:	47b0      	blx	r6
 8013652:	1c43      	adds	r3, r0, #1
 8013654:	89a3      	ldrh	r3, [r4, #12]
 8013656:	d106      	bne.n	8013666 <__sflush_r+0x62>
 8013658:	6829      	ldr	r1, [r5, #0]
 801365a:	291d      	cmp	r1, #29
 801365c:	d82b      	bhi.n	80136b6 <__sflush_r+0xb2>
 801365e:	4a2a      	ldr	r2, [pc, #168]	@ (8013708 <__sflush_r+0x104>)
 8013660:	410a      	asrs	r2, r1
 8013662:	07d6      	lsls	r6, r2, #31
 8013664:	d427      	bmi.n	80136b6 <__sflush_r+0xb2>
 8013666:	2200      	movs	r2, #0
 8013668:	6062      	str	r2, [r4, #4]
 801366a:	04d9      	lsls	r1, r3, #19
 801366c:	6922      	ldr	r2, [r4, #16]
 801366e:	6022      	str	r2, [r4, #0]
 8013670:	d504      	bpl.n	801367c <__sflush_r+0x78>
 8013672:	1c42      	adds	r2, r0, #1
 8013674:	d101      	bne.n	801367a <__sflush_r+0x76>
 8013676:	682b      	ldr	r3, [r5, #0]
 8013678:	b903      	cbnz	r3, 801367c <__sflush_r+0x78>
 801367a:	6560      	str	r0, [r4, #84]	@ 0x54
 801367c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801367e:	602f      	str	r7, [r5, #0]
 8013680:	b1b9      	cbz	r1, 80136b2 <__sflush_r+0xae>
 8013682:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013686:	4299      	cmp	r1, r3
 8013688:	d002      	beq.n	8013690 <__sflush_r+0x8c>
 801368a:	4628      	mov	r0, r5
 801368c:	f7ff faac 	bl	8012be8 <_free_r>
 8013690:	2300      	movs	r3, #0
 8013692:	6363      	str	r3, [r4, #52]	@ 0x34
 8013694:	e00d      	b.n	80136b2 <__sflush_r+0xae>
 8013696:	2301      	movs	r3, #1
 8013698:	4628      	mov	r0, r5
 801369a:	47b0      	blx	r6
 801369c:	4602      	mov	r2, r0
 801369e:	1c50      	adds	r0, r2, #1
 80136a0:	d1c9      	bne.n	8013636 <__sflush_r+0x32>
 80136a2:	682b      	ldr	r3, [r5, #0]
 80136a4:	2b00      	cmp	r3, #0
 80136a6:	d0c6      	beq.n	8013636 <__sflush_r+0x32>
 80136a8:	2b1d      	cmp	r3, #29
 80136aa:	d001      	beq.n	80136b0 <__sflush_r+0xac>
 80136ac:	2b16      	cmp	r3, #22
 80136ae:	d11e      	bne.n	80136ee <__sflush_r+0xea>
 80136b0:	602f      	str	r7, [r5, #0]
 80136b2:	2000      	movs	r0, #0
 80136b4:	e022      	b.n	80136fc <__sflush_r+0xf8>
 80136b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80136ba:	b21b      	sxth	r3, r3
 80136bc:	e01b      	b.n	80136f6 <__sflush_r+0xf2>
 80136be:	690f      	ldr	r7, [r1, #16]
 80136c0:	2f00      	cmp	r7, #0
 80136c2:	d0f6      	beq.n	80136b2 <__sflush_r+0xae>
 80136c4:	0793      	lsls	r3, r2, #30
 80136c6:	680e      	ldr	r6, [r1, #0]
 80136c8:	bf08      	it	eq
 80136ca:	694b      	ldreq	r3, [r1, #20]
 80136cc:	600f      	str	r7, [r1, #0]
 80136ce:	bf18      	it	ne
 80136d0:	2300      	movne	r3, #0
 80136d2:	eba6 0807 	sub.w	r8, r6, r7
 80136d6:	608b      	str	r3, [r1, #8]
 80136d8:	f1b8 0f00 	cmp.w	r8, #0
 80136dc:	dde9      	ble.n	80136b2 <__sflush_r+0xae>
 80136de:	6a21      	ldr	r1, [r4, #32]
 80136e0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80136e2:	4643      	mov	r3, r8
 80136e4:	463a      	mov	r2, r7
 80136e6:	4628      	mov	r0, r5
 80136e8:	47b0      	blx	r6
 80136ea:	2800      	cmp	r0, #0
 80136ec:	dc08      	bgt.n	8013700 <__sflush_r+0xfc>
 80136ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80136f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80136f6:	81a3      	strh	r3, [r4, #12]
 80136f8:	f04f 30ff 	mov.w	r0, #4294967295
 80136fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013700:	4407      	add	r7, r0
 8013702:	eba8 0800 	sub.w	r8, r8, r0
 8013706:	e7e7      	b.n	80136d8 <__sflush_r+0xd4>
 8013708:	dfbffffe 	.word	0xdfbffffe

0801370c <_fflush_r>:
 801370c:	b538      	push	{r3, r4, r5, lr}
 801370e:	690b      	ldr	r3, [r1, #16]
 8013710:	4605      	mov	r5, r0
 8013712:	460c      	mov	r4, r1
 8013714:	b913      	cbnz	r3, 801371c <_fflush_r+0x10>
 8013716:	2500      	movs	r5, #0
 8013718:	4628      	mov	r0, r5
 801371a:	bd38      	pop	{r3, r4, r5, pc}
 801371c:	b118      	cbz	r0, 8013726 <_fflush_r+0x1a>
 801371e:	6a03      	ldr	r3, [r0, #32]
 8013720:	b90b      	cbnz	r3, 8013726 <_fflush_r+0x1a>
 8013722:	f7fe f9f9 	bl	8011b18 <__sinit>
 8013726:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801372a:	2b00      	cmp	r3, #0
 801372c:	d0f3      	beq.n	8013716 <_fflush_r+0xa>
 801372e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8013730:	07d0      	lsls	r0, r2, #31
 8013732:	d404      	bmi.n	801373e <_fflush_r+0x32>
 8013734:	0599      	lsls	r1, r3, #22
 8013736:	d402      	bmi.n	801373e <_fflush_r+0x32>
 8013738:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801373a:	f7fe fbf8 	bl	8011f2e <__retarget_lock_acquire_recursive>
 801373e:	4628      	mov	r0, r5
 8013740:	4621      	mov	r1, r4
 8013742:	f7ff ff5f 	bl	8013604 <__sflush_r>
 8013746:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013748:	07da      	lsls	r2, r3, #31
 801374a:	4605      	mov	r5, r0
 801374c:	d4e4      	bmi.n	8013718 <_fflush_r+0xc>
 801374e:	89a3      	ldrh	r3, [r4, #12]
 8013750:	059b      	lsls	r3, r3, #22
 8013752:	d4e1      	bmi.n	8013718 <_fflush_r+0xc>
 8013754:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013756:	f7fe fbeb 	bl	8011f30 <__retarget_lock_release_recursive>
 801375a:	e7dd      	b.n	8013718 <_fflush_r+0xc>

0801375c <__swhatbuf_r>:
 801375c:	b570      	push	{r4, r5, r6, lr}
 801375e:	460c      	mov	r4, r1
 8013760:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013764:	2900      	cmp	r1, #0
 8013766:	b096      	sub	sp, #88	@ 0x58
 8013768:	4615      	mov	r5, r2
 801376a:	461e      	mov	r6, r3
 801376c:	da0d      	bge.n	801378a <__swhatbuf_r+0x2e>
 801376e:	89a3      	ldrh	r3, [r4, #12]
 8013770:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8013774:	f04f 0100 	mov.w	r1, #0
 8013778:	bf14      	ite	ne
 801377a:	2340      	movne	r3, #64	@ 0x40
 801377c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8013780:	2000      	movs	r0, #0
 8013782:	6031      	str	r1, [r6, #0]
 8013784:	602b      	str	r3, [r5, #0]
 8013786:	b016      	add	sp, #88	@ 0x58
 8013788:	bd70      	pop	{r4, r5, r6, pc}
 801378a:	466a      	mov	r2, sp
 801378c:	f000 f848 	bl	8013820 <_fstat_r>
 8013790:	2800      	cmp	r0, #0
 8013792:	dbec      	blt.n	801376e <__swhatbuf_r+0x12>
 8013794:	9901      	ldr	r1, [sp, #4]
 8013796:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801379a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801379e:	4259      	negs	r1, r3
 80137a0:	4159      	adcs	r1, r3
 80137a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80137a6:	e7eb      	b.n	8013780 <__swhatbuf_r+0x24>

080137a8 <__smakebuf_r>:
 80137a8:	898b      	ldrh	r3, [r1, #12]
 80137aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80137ac:	079d      	lsls	r5, r3, #30
 80137ae:	4606      	mov	r6, r0
 80137b0:	460c      	mov	r4, r1
 80137b2:	d507      	bpl.n	80137c4 <__smakebuf_r+0x1c>
 80137b4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80137b8:	6023      	str	r3, [r4, #0]
 80137ba:	6123      	str	r3, [r4, #16]
 80137bc:	2301      	movs	r3, #1
 80137be:	6163      	str	r3, [r4, #20]
 80137c0:	b003      	add	sp, #12
 80137c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80137c4:	ab01      	add	r3, sp, #4
 80137c6:	466a      	mov	r2, sp
 80137c8:	f7ff ffc8 	bl	801375c <__swhatbuf_r>
 80137cc:	9f00      	ldr	r7, [sp, #0]
 80137ce:	4605      	mov	r5, r0
 80137d0:	4639      	mov	r1, r7
 80137d2:	4630      	mov	r0, r6
 80137d4:	f7fd fc30 	bl	8011038 <_malloc_r>
 80137d8:	b948      	cbnz	r0, 80137ee <__smakebuf_r+0x46>
 80137da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80137de:	059a      	lsls	r2, r3, #22
 80137e0:	d4ee      	bmi.n	80137c0 <__smakebuf_r+0x18>
 80137e2:	f023 0303 	bic.w	r3, r3, #3
 80137e6:	f043 0302 	orr.w	r3, r3, #2
 80137ea:	81a3      	strh	r3, [r4, #12]
 80137ec:	e7e2      	b.n	80137b4 <__smakebuf_r+0xc>
 80137ee:	89a3      	ldrh	r3, [r4, #12]
 80137f0:	6020      	str	r0, [r4, #0]
 80137f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80137f6:	81a3      	strh	r3, [r4, #12]
 80137f8:	9b01      	ldr	r3, [sp, #4]
 80137fa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80137fe:	b15b      	cbz	r3, 8013818 <__smakebuf_r+0x70>
 8013800:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013804:	4630      	mov	r0, r6
 8013806:	f000 f81d 	bl	8013844 <_isatty_r>
 801380a:	b128      	cbz	r0, 8013818 <__smakebuf_r+0x70>
 801380c:	89a3      	ldrh	r3, [r4, #12]
 801380e:	f023 0303 	bic.w	r3, r3, #3
 8013812:	f043 0301 	orr.w	r3, r3, #1
 8013816:	81a3      	strh	r3, [r4, #12]
 8013818:	89a3      	ldrh	r3, [r4, #12]
 801381a:	431d      	orrs	r5, r3
 801381c:	81a5      	strh	r5, [r4, #12]
 801381e:	e7cf      	b.n	80137c0 <__smakebuf_r+0x18>

08013820 <_fstat_r>:
 8013820:	b538      	push	{r3, r4, r5, lr}
 8013822:	4d07      	ldr	r5, [pc, #28]	@ (8013840 <_fstat_r+0x20>)
 8013824:	2300      	movs	r3, #0
 8013826:	4604      	mov	r4, r0
 8013828:	4608      	mov	r0, r1
 801382a:	4611      	mov	r1, r2
 801382c:	602b      	str	r3, [r5, #0]
 801382e:	f7ee fb39 	bl	8001ea4 <_fstat>
 8013832:	1c43      	adds	r3, r0, #1
 8013834:	d102      	bne.n	801383c <_fstat_r+0x1c>
 8013836:	682b      	ldr	r3, [r5, #0]
 8013838:	b103      	cbz	r3, 801383c <_fstat_r+0x1c>
 801383a:	6023      	str	r3, [r4, #0]
 801383c:	bd38      	pop	{r3, r4, r5, pc}
 801383e:	bf00      	nop
 8013840:	20005dd0 	.word	0x20005dd0

08013844 <_isatty_r>:
 8013844:	b538      	push	{r3, r4, r5, lr}
 8013846:	4d06      	ldr	r5, [pc, #24]	@ (8013860 <_isatty_r+0x1c>)
 8013848:	2300      	movs	r3, #0
 801384a:	4604      	mov	r4, r0
 801384c:	4608      	mov	r0, r1
 801384e:	602b      	str	r3, [r5, #0]
 8013850:	f7ee fb38 	bl	8001ec4 <_isatty>
 8013854:	1c43      	adds	r3, r0, #1
 8013856:	d102      	bne.n	801385e <_isatty_r+0x1a>
 8013858:	682b      	ldr	r3, [r5, #0]
 801385a:	b103      	cbz	r3, 801385e <_isatty_r+0x1a>
 801385c:	6023      	str	r3, [r4, #0]
 801385e:	bd38      	pop	{r3, r4, r5, pc}
 8013860:	20005dd0 	.word	0x20005dd0

08013864 <__assert_func>:
 8013864:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013866:	4614      	mov	r4, r2
 8013868:	461a      	mov	r2, r3
 801386a:	4b09      	ldr	r3, [pc, #36]	@ (8013890 <__assert_func+0x2c>)
 801386c:	681b      	ldr	r3, [r3, #0]
 801386e:	4605      	mov	r5, r0
 8013870:	68d8      	ldr	r0, [r3, #12]
 8013872:	b954      	cbnz	r4, 801388a <__assert_func+0x26>
 8013874:	4b07      	ldr	r3, [pc, #28]	@ (8013894 <__assert_func+0x30>)
 8013876:	461c      	mov	r4, r3
 8013878:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801387c:	9100      	str	r1, [sp, #0]
 801387e:	462b      	mov	r3, r5
 8013880:	4905      	ldr	r1, [pc, #20]	@ (8013898 <__assert_func+0x34>)
 8013882:	f000 f841 	bl	8013908 <fiprintf>
 8013886:	f000 f851 	bl	801392c <abort>
 801388a:	4b04      	ldr	r3, [pc, #16]	@ (801389c <__assert_func+0x38>)
 801388c:	e7f4      	b.n	8013878 <__assert_func+0x14>
 801388e:	bf00      	nop
 8013890:	20000818 	.word	0x20000818
 8013894:	080bdc66 	.word	0x080bdc66
 8013898:	080bdc38 	.word	0x080bdc38
 801389c:	080bdc2b 	.word	0x080bdc2b

080138a0 <_calloc_r>:
 80138a0:	b570      	push	{r4, r5, r6, lr}
 80138a2:	fba1 5402 	umull	r5, r4, r1, r2
 80138a6:	b93c      	cbnz	r4, 80138b8 <_calloc_r+0x18>
 80138a8:	4629      	mov	r1, r5
 80138aa:	f7fd fbc5 	bl	8011038 <_malloc_r>
 80138ae:	4606      	mov	r6, r0
 80138b0:	b928      	cbnz	r0, 80138be <_calloc_r+0x1e>
 80138b2:	2600      	movs	r6, #0
 80138b4:	4630      	mov	r0, r6
 80138b6:	bd70      	pop	{r4, r5, r6, pc}
 80138b8:	220c      	movs	r2, #12
 80138ba:	6002      	str	r2, [r0, #0]
 80138bc:	e7f9      	b.n	80138b2 <_calloc_r+0x12>
 80138be:	462a      	mov	r2, r5
 80138c0:	4621      	mov	r1, r4
 80138c2:	f7fe faa7 	bl	8011e14 <memset>
 80138c6:	e7f5      	b.n	80138b4 <_calloc_r+0x14>

080138c8 <__ascii_mbtowc>:
 80138c8:	b082      	sub	sp, #8
 80138ca:	b901      	cbnz	r1, 80138ce <__ascii_mbtowc+0x6>
 80138cc:	a901      	add	r1, sp, #4
 80138ce:	b142      	cbz	r2, 80138e2 <__ascii_mbtowc+0x1a>
 80138d0:	b14b      	cbz	r3, 80138e6 <__ascii_mbtowc+0x1e>
 80138d2:	7813      	ldrb	r3, [r2, #0]
 80138d4:	600b      	str	r3, [r1, #0]
 80138d6:	7812      	ldrb	r2, [r2, #0]
 80138d8:	1e10      	subs	r0, r2, #0
 80138da:	bf18      	it	ne
 80138dc:	2001      	movne	r0, #1
 80138de:	b002      	add	sp, #8
 80138e0:	4770      	bx	lr
 80138e2:	4610      	mov	r0, r2
 80138e4:	e7fb      	b.n	80138de <__ascii_mbtowc+0x16>
 80138e6:	f06f 0001 	mvn.w	r0, #1
 80138ea:	e7f8      	b.n	80138de <__ascii_mbtowc+0x16>

080138ec <__ascii_wctomb>:
 80138ec:	4603      	mov	r3, r0
 80138ee:	4608      	mov	r0, r1
 80138f0:	b141      	cbz	r1, 8013904 <__ascii_wctomb+0x18>
 80138f2:	2aff      	cmp	r2, #255	@ 0xff
 80138f4:	d904      	bls.n	8013900 <__ascii_wctomb+0x14>
 80138f6:	228a      	movs	r2, #138	@ 0x8a
 80138f8:	601a      	str	r2, [r3, #0]
 80138fa:	f04f 30ff 	mov.w	r0, #4294967295
 80138fe:	4770      	bx	lr
 8013900:	700a      	strb	r2, [r1, #0]
 8013902:	2001      	movs	r0, #1
 8013904:	4770      	bx	lr
	...

08013908 <fiprintf>:
 8013908:	b40e      	push	{r1, r2, r3}
 801390a:	b503      	push	{r0, r1, lr}
 801390c:	4601      	mov	r1, r0
 801390e:	ab03      	add	r3, sp, #12
 8013910:	4805      	ldr	r0, [pc, #20]	@ (8013928 <fiprintf+0x20>)
 8013912:	f853 2b04 	ldr.w	r2, [r3], #4
 8013916:	6800      	ldr	r0, [r0, #0]
 8013918:	9301      	str	r3, [sp, #4]
 801391a:	f7ff fd5b 	bl	80133d4 <_vfiprintf_r>
 801391e:	b002      	add	sp, #8
 8013920:	f85d eb04 	ldr.w	lr, [sp], #4
 8013924:	b003      	add	sp, #12
 8013926:	4770      	bx	lr
 8013928:	20000818 	.word	0x20000818

0801392c <abort>:
 801392c:	b508      	push	{r3, lr}
 801392e:	2006      	movs	r0, #6
 8013930:	f000 f82c 	bl	801398c <raise>
 8013934:	2001      	movs	r0, #1
 8013936:	f7ee fa65 	bl	8001e04 <_exit>

0801393a <_raise_r>:
 801393a:	291f      	cmp	r1, #31
 801393c:	b538      	push	{r3, r4, r5, lr}
 801393e:	4605      	mov	r5, r0
 8013940:	460c      	mov	r4, r1
 8013942:	d904      	bls.n	801394e <_raise_r+0x14>
 8013944:	2316      	movs	r3, #22
 8013946:	6003      	str	r3, [r0, #0]
 8013948:	f04f 30ff 	mov.w	r0, #4294967295
 801394c:	bd38      	pop	{r3, r4, r5, pc}
 801394e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8013950:	b112      	cbz	r2, 8013958 <_raise_r+0x1e>
 8013952:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013956:	b94b      	cbnz	r3, 801396c <_raise_r+0x32>
 8013958:	4628      	mov	r0, r5
 801395a:	f000 f831 	bl	80139c0 <_getpid_r>
 801395e:	4622      	mov	r2, r4
 8013960:	4601      	mov	r1, r0
 8013962:	4628      	mov	r0, r5
 8013964:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013968:	f000 b818 	b.w	801399c <_kill_r>
 801396c:	2b01      	cmp	r3, #1
 801396e:	d00a      	beq.n	8013986 <_raise_r+0x4c>
 8013970:	1c59      	adds	r1, r3, #1
 8013972:	d103      	bne.n	801397c <_raise_r+0x42>
 8013974:	2316      	movs	r3, #22
 8013976:	6003      	str	r3, [r0, #0]
 8013978:	2001      	movs	r0, #1
 801397a:	e7e7      	b.n	801394c <_raise_r+0x12>
 801397c:	2100      	movs	r1, #0
 801397e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8013982:	4620      	mov	r0, r4
 8013984:	4798      	blx	r3
 8013986:	2000      	movs	r0, #0
 8013988:	e7e0      	b.n	801394c <_raise_r+0x12>
	...

0801398c <raise>:
 801398c:	4b02      	ldr	r3, [pc, #8]	@ (8013998 <raise+0xc>)
 801398e:	4601      	mov	r1, r0
 8013990:	6818      	ldr	r0, [r3, #0]
 8013992:	f7ff bfd2 	b.w	801393a <_raise_r>
 8013996:	bf00      	nop
 8013998:	20000818 	.word	0x20000818

0801399c <_kill_r>:
 801399c:	b538      	push	{r3, r4, r5, lr}
 801399e:	4d07      	ldr	r5, [pc, #28]	@ (80139bc <_kill_r+0x20>)
 80139a0:	2300      	movs	r3, #0
 80139a2:	4604      	mov	r4, r0
 80139a4:	4608      	mov	r0, r1
 80139a6:	4611      	mov	r1, r2
 80139a8:	602b      	str	r3, [r5, #0]
 80139aa:	f7ee fa1b 	bl	8001de4 <_kill>
 80139ae:	1c43      	adds	r3, r0, #1
 80139b0:	d102      	bne.n	80139b8 <_kill_r+0x1c>
 80139b2:	682b      	ldr	r3, [r5, #0]
 80139b4:	b103      	cbz	r3, 80139b8 <_kill_r+0x1c>
 80139b6:	6023      	str	r3, [r4, #0]
 80139b8:	bd38      	pop	{r3, r4, r5, pc}
 80139ba:	bf00      	nop
 80139bc:	20005dd0 	.word	0x20005dd0

080139c0 <_getpid_r>:
 80139c0:	f7ee ba08 	b.w	8001dd4 <_getpid>

080139c4 <_init>:
 80139c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80139c6:	bf00      	nop
 80139c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80139ca:	bc08      	pop	{r3}
 80139cc:	469e      	mov	lr, r3
 80139ce:	4770      	bx	lr

080139d0 <_fini>:
 80139d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80139d2:	bf00      	nop
 80139d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80139d6:	bc08      	pop	{r3}
 80139d8:	469e      	mov	lr, r3
 80139da:	4770      	bx	lr
