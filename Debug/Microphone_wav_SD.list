
Microphone_wav_SD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000165d4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000bdbf0  080167c0  080167c0  000177c0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080d43b0  080d43b0  000d69cc  2**0
                  CONTENTS
  4 .ARM          00000008  080d43b0  080d43b0  000d53b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080d43b8  080d43b8  000d69cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080d43b8  080d43b8  000d53b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080d43bc  080d43bc  000d53bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000009cc  20000000  080d43c0  000d6000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001e280  200009cc  080d4d8c  000d69cc  2**2
                  ALLOC
 10 ._user_heap_stack 00004004  2001ec4c  080d4d8c  000d6c4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000d69cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022c2f  00000000  00000000  000d69fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000057d9  00000000  00000000  000f962b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a98  00000000  00000000  000fee08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000137e  00000000  00000000  001008a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002dc87  00000000  00000000  00101c1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027263  00000000  00000000  0012f8a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00105598  00000000  00000000  00156b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000f4  00000000  00000000  0025c0a0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ba4  00000000  00000000  0025c194  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00263d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00003a35  00000000  00000000  00263da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000128  00000000  00000000  002677d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200009cc 	.word	0x200009cc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801678c 	.word	0x0801678c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200009d0 	.word	0x200009d0
 800020c:	0801678c 	.word	0x0801678c

08000210 <arm_bitreversal_32>:
 8000210:	1c4b      	adds	r3, r1, #1
 8000212:	2b01      	cmp	r3, #1
 8000214:	bf98      	it	ls
 8000216:	4770      	bxls	lr
 8000218:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800021c:	1c91      	adds	r1, r2, #2
 800021e:	089b      	lsrs	r3, r3, #2

08000220 <arm_bitreversal_32_0>:
 8000220:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000224:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000228:	880a      	ldrh	r2, [r1, #0]
 800022a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 800022e:	4480      	add	r8, r0
 8000230:	4481      	add	r9, r0
 8000232:	4402      	add	r2, r0
 8000234:	4484      	add	ip, r0
 8000236:	f8d9 7000 	ldr.w	r7, [r9]
 800023a:	f8d8 6000 	ldr.w	r6, [r8]
 800023e:	6815      	ldr	r5, [r2, #0]
 8000240:	f8dc 4000 	ldr.w	r4, [ip]
 8000244:	f8c9 6000 	str.w	r6, [r9]
 8000248:	f8c8 7000 	str.w	r7, [r8]
 800024c:	f8cc 5000 	str.w	r5, [ip]
 8000250:	6014      	str	r4, [r2, #0]
 8000252:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000256:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800025a:	6855      	ldr	r5, [r2, #4]
 800025c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000260:	f8c9 6004 	str.w	r6, [r9, #4]
 8000264:	f8c8 7004 	str.w	r7, [r8, #4]
 8000268:	f8cc 5004 	str.w	r5, [ip, #4]
 800026c:	6054      	str	r4, [r2, #4]
 800026e:	3108      	adds	r1, #8
 8000270:	3b01      	subs	r3, #1
 8000272:	d1d5      	bne.n	8000220 <arm_bitreversal_32_0>
 8000274:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000278:	4770      	bx	lr

0800027a <arm_bitreversal_16>:
 800027a:	1c4b      	adds	r3, r1, #1
 800027c:	2b01      	cmp	r3, #1
 800027e:	bf98      	it	ls
 8000280:	4770      	bxls	lr
 8000282:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000286:	1c91      	adds	r1, r2, #2
 8000288:	089b      	lsrs	r3, r3, #2

0800028a <arm_bitreversal_16_0>:
 800028a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800028e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000292:	880a      	ldrh	r2, [r1, #0]
 8000294:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000298:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800029c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 80002a0:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 80002a4:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 80002a8:	f8d9 7000 	ldr.w	r7, [r9]
 80002ac:	f8d8 6000 	ldr.w	r6, [r8]
 80002b0:	6815      	ldr	r5, [r2, #0]
 80002b2:	f8dc 4000 	ldr.w	r4, [ip]
 80002b6:	f8c9 6000 	str.w	r6, [r9]
 80002ba:	f8c8 7000 	str.w	r7, [r8]
 80002be:	f8cc 5000 	str.w	r5, [ip]
 80002c2:	6014      	str	r4, [r2, #0]
 80002c4:	3108      	adds	r1, #8
 80002c6:	3b01      	subs	r3, #1
 80002c8:	d1df      	bne.n	800028a <arm_bitreversal_16_0>
 80002ca:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002ce:	4770      	bx	lr

080002d0 <memchr>:
 80002d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002d4:	2a10      	cmp	r2, #16
 80002d6:	db2b      	blt.n	8000330 <memchr+0x60>
 80002d8:	f010 0f07 	tst.w	r0, #7
 80002dc:	d008      	beq.n	80002f0 <memchr+0x20>
 80002de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e2:	3a01      	subs	r2, #1
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d02d      	beq.n	8000344 <memchr+0x74>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	b342      	cbz	r2, 8000340 <memchr+0x70>
 80002ee:	d1f6      	bne.n	80002de <memchr+0xe>
 80002f0:	b4f0      	push	{r4, r5, r6, r7}
 80002f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002fa:	f022 0407 	bic.w	r4, r2, #7
 80002fe:	f07f 0700 	mvns.w	r7, #0
 8000302:	2300      	movs	r3, #0
 8000304:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000308:	3c08      	subs	r4, #8
 800030a:	ea85 0501 	eor.w	r5, r5, r1
 800030e:	ea86 0601 	eor.w	r6, r6, r1
 8000312:	fa85 f547 	uadd8	r5, r5, r7
 8000316:	faa3 f587 	sel	r5, r3, r7
 800031a:	fa86 f647 	uadd8	r6, r6, r7
 800031e:	faa5 f687 	sel	r6, r5, r7
 8000322:	b98e      	cbnz	r6, 8000348 <memchr+0x78>
 8000324:	d1ee      	bne.n	8000304 <memchr+0x34>
 8000326:	bcf0      	pop	{r4, r5, r6, r7}
 8000328:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800032c:	f002 0207 	and.w	r2, r2, #7
 8000330:	b132      	cbz	r2, 8000340 <memchr+0x70>
 8000332:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000336:	3a01      	subs	r2, #1
 8000338:	ea83 0301 	eor.w	r3, r3, r1
 800033c:	b113      	cbz	r3, 8000344 <memchr+0x74>
 800033e:	d1f8      	bne.n	8000332 <memchr+0x62>
 8000340:	2000      	movs	r0, #0
 8000342:	4770      	bx	lr
 8000344:	3801      	subs	r0, #1
 8000346:	4770      	bx	lr
 8000348:	2d00      	cmp	r5, #0
 800034a:	bf06      	itte	eq
 800034c:	4635      	moveq	r5, r6
 800034e:	3803      	subeq	r0, #3
 8000350:	3807      	subne	r0, #7
 8000352:	f015 0f01 	tst.w	r5, #1
 8000356:	d107      	bne.n	8000368 <memchr+0x98>
 8000358:	3001      	adds	r0, #1
 800035a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800035e:	bf02      	ittt	eq
 8000360:	3001      	addeq	r0, #1
 8000362:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000366:	3001      	addeq	r0, #1
 8000368:	bcf0      	pop	{r4, r5, r6, r7}
 800036a:	3801      	subs	r0, #1
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop

08000370 <strlen>:
 8000370:	4603      	mov	r3, r0
 8000372:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000376:	2a00      	cmp	r2, #0
 8000378:	d1fb      	bne.n	8000372 <strlen+0x2>
 800037a:	1a18      	subs	r0, r3, r0
 800037c:	3801      	subs	r0, #1
 800037e:	4770      	bx	lr

08000380 <__aeabi_drsub>:
 8000380:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000384:	e002      	b.n	800038c <__adddf3>
 8000386:	bf00      	nop

08000388 <__aeabi_dsub>:
 8000388:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800038c <__adddf3>:
 800038c:	b530      	push	{r4, r5, lr}
 800038e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000392:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	bf1f      	itttt	ne
 80003a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003b2:	f000 80e2 	beq.w	800057a <__adddf3+0x1ee>
 80003b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003be:	bfb8      	it	lt
 80003c0:	426d      	neglt	r5, r5
 80003c2:	dd0c      	ble.n	80003de <__adddf3+0x52>
 80003c4:	442c      	add	r4, r5
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	ea82 0000 	eor.w	r0, r2, r0
 80003d2:	ea83 0101 	eor.w	r1, r3, r1
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	2d36      	cmp	r5, #54	@ 0x36
 80003e0:	bf88      	it	hi
 80003e2:	bd30      	pophi	{r4, r5, pc}
 80003e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80003f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003f4:	d002      	beq.n	80003fc <__adddf3+0x70>
 80003f6:	4240      	negs	r0, r0
 80003f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000400:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000404:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000408:	d002      	beq.n	8000410 <__adddf3+0x84>
 800040a:	4252      	negs	r2, r2
 800040c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000410:	ea94 0f05 	teq	r4, r5
 8000414:	f000 80a7 	beq.w	8000566 <__adddf3+0x1da>
 8000418:	f1a4 0401 	sub.w	r4, r4, #1
 800041c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000420:	db0d      	blt.n	800043e <__adddf3+0xb2>
 8000422:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000426:	fa22 f205 	lsr.w	r2, r2, r5
 800042a:	1880      	adds	r0, r0, r2
 800042c:	f141 0100 	adc.w	r1, r1, #0
 8000430:	fa03 f20e 	lsl.w	r2, r3, lr
 8000434:	1880      	adds	r0, r0, r2
 8000436:	fa43 f305 	asr.w	r3, r3, r5
 800043a:	4159      	adcs	r1, r3
 800043c:	e00e      	b.n	800045c <__adddf3+0xd0>
 800043e:	f1a5 0520 	sub.w	r5, r5, #32
 8000442:	f10e 0e20 	add.w	lr, lr, #32
 8000446:	2a01      	cmp	r2, #1
 8000448:	fa03 fc0e 	lsl.w	ip, r3, lr
 800044c:	bf28      	it	cs
 800044e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000452:	fa43 f305 	asr.w	r3, r3, r5
 8000456:	18c0      	adds	r0, r0, r3
 8000458:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000460:	d507      	bpl.n	8000472 <__adddf3+0xe6>
 8000462:	f04f 0e00 	mov.w	lr, #0
 8000466:	f1dc 0c00 	rsbs	ip, ip, #0
 800046a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800046e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000472:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000476:	d31b      	bcc.n	80004b0 <__adddf3+0x124>
 8000478:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800047c:	d30c      	bcc.n	8000498 <__adddf3+0x10c>
 800047e:	0849      	lsrs	r1, r1, #1
 8000480:	ea5f 0030 	movs.w	r0, r0, rrx
 8000484:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000488:	f104 0401 	add.w	r4, r4, #1
 800048c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000490:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000494:	f080 809a 	bcs.w	80005cc <__adddf3+0x240>
 8000498:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800049c:	bf08      	it	eq
 800049e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004a2:	f150 0000 	adcs.w	r0, r0, #0
 80004a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004aa:	ea41 0105 	orr.w	r1, r1, r5
 80004ae:	bd30      	pop	{r4, r5, pc}
 80004b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004b4:	4140      	adcs	r0, r0
 80004b6:	eb41 0101 	adc.w	r1, r1, r1
 80004ba:	3c01      	subs	r4, #1
 80004bc:	bf28      	it	cs
 80004be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004c2:	d2e9      	bcs.n	8000498 <__adddf3+0x10c>
 80004c4:	f091 0f00 	teq	r1, #0
 80004c8:	bf04      	itt	eq
 80004ca:	4601      	moveq	r1, r0
 80004cc:	2000      	moveq	r0, #0
 80004ce:	fab1 f381 	clz	r3, r1
 80004d2:	bf08      	it	eq
 80004d4:	3320      	addeq	r3, #32
 80004d6:	f1a3 030b 	sub.w	r3, r3, #11
 80004da:	f1b3 0220 	subs.w	r2, r3, #32
 80004de:	da0c      	bge.n	80004fa <__adddf3+0x16e>
 80004e0:	320c      	adds	r2, #12
 80004e2:	dd08      	ble.n	80004f6 <__adddf3+0x16a>
 80004e4:	f102 0c14 	add.w	ip, r2, #20
 80004e8:	f1c2 020c 	rsb	r2, r2, #12
 80004ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80004f0:	fa21 f102 	lsr.w	r1, r1, r2
 80004f4:	e00c      	b.n	8000510 <__adddf3+0x184>
 80004f6:	f102 0214 	add.w	r2, r2, #20
 80004fa:	bfd8      	it	le
 80004fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000500:	fa01 f102 	lsl.w	r1, r1, r2
 8000504:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000508:	bfdc      	itt	le
 800050a:	ea41 010c 	orrle.w	r1, r1, ip
 800050e:	4090      	lslle	r0, r2
 8000510:	1ae4      	subs	r4, r4, r3
 8000512:	bfa2      	ittt	ge
 8000514:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000518:	4329      	orrge	r1, r5
 800051a:	bd30      	popge	{r4, r5, pc}
 800051c:	ea6f 0404 	mvn.w	r4, r4
 8000520:	3c1f      	subs	r4, #31
 8000522:	da1c      	bge.n	800055e <__adddf3+0x1d2>
 8000524:	340c      	adds	r4, #12
 8000526:	dc0e      	bgt.n	8000546 <__adddf3+0x1ba>
 8000528:	f104 0414 	add.w	r4, r4, #20
 800052c:	f1c4 0220 	rsb	r2, r4, #32
 8000530:	fa20 f004 	lsr.w	r0, r0, r4
 8000534:	fa01 f302 	lsl.w	r3, r1, r2
 8000538:	ea40 0003 	orr.w	r0, r0, r3
 800053c:	fa21 f304 	lsr.w	r3, r1, r4
 8000540:	ea45 0103 	orr.w	r1, r5, r3
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	f1c4 040c 	rsb	r4, r4, #12
 800054a:	f1c4 0220 	rsb	r2, r4, #32
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 f304 	lsl.w	r3, r1, r4
 8000556:	ea40 0003 	orr.w	r0, r0, r3
 800055a:	4629      	mov	r1, r5
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	fa21 f004 	lsr.w	r0, r1, r4
 8000562:	4629      	mov	r1, r5
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f094 0f00 	teq	r4, #0
 800056a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800056e:	bf06      	itte	eq
 8000570:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000574:	3401      	addeq	r4, #1
 8000576:	3d01      	subne	r5, #1
 8000578:	e74e      	b.n	8000418 <__adddf3+0x8c>
 800057a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800057e:	bf18      	it	ne
 8000580:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000584:	d029      	beq.n	80005da <__adddf3+0x24e>
 8000586:	ea94 0f05 	teq	r4, r5
 800058a:	bf08      	it	eq
 800058c:	ea90 0f02 	teqeq	r0, r2
 8000590:	d005      	beq.n	800059e <__adddf3+0x212>
 8000592:	ea54 0c00 	orrs.w	ip, r4, r0
 8000596:	bf04      	itt	eq
 8000598:	4619      	moveq	r1, r3
 800059a:	4610      	moveq	r0, r2
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	ea91 0f03 	teq	r1, r3
 80005a2:	bf1e      	ittt	ne
 80005a4:	2100      	movne	r1, #0
 80005a6:	2000      	movne	r0, #0
 80005a8:	bd30      	popne	{r4, r5, pc}
 80005aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ae:	d105      	bne.n	80005bc <__adddf3+0x230>
 80005b0:	0040      	lsls	r0, r0, #1
 80005b2:	4149      	adcs	r1, r1
 80005b4:	bf28      	it	cs
 80005b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ba:	bd30      	pop	{r4, r5, pc}
 80005bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005c0:	bf3c      	itt	cc
 80005c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005c6:	bd30      	popcc	{r4, r5, pc}
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005d4:	f04f 0000 	mov.w	r0, #0
 80005d8:	bd30      	pop	{r4, r5, pc}
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf1a      	itte	ne
 80005e0:	4619      	movne	r1, r3
 80005e2:	4610      	movne	r0, r2
 80005e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005e8:	bf1c      	itt	ne
 80005ea:	460b      	movne	r3, r1
 80005ec:	4602      	movne	r2, r0
 80005ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005f2:	bf06      	itte	eq
 80005f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005f8:	ea91 0f03 	teqeq	r1, r3
 80005fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	bf00      	nop

08000604 <__aeabi_ui2d>:
 8000604:	f090 0f00 	teq	r0, #0
 8000608:	bf04      	itt	eq
 800060a:	2100      	moveq	r1, #0
 800060c:	4770      	bxeq	lr
 800060e:	b530      	push	{r4, r5, lr}
 8000610:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000614:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000618:	f04f 0500 	mov.w	r5, #0
 800061c:	f04f 0100 	mov.w	r1, #0
 8000620:	e750      	b.n	80004c4 <__adddf3+0x138>
 8000622:	bf00      	nop

08000624 <__aeabi_i2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000638:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800063c:	bf48      	it	mi
 800063e:	4240      	negmi	r0, r0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e73e      	b.n	80004c4 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_f2d>:
 8000648:	0042      	lsls	r2, r0, #1
 800064a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800064e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000652:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000656:	bf1f      	itttt	ne
 8000658:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800065c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000660:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000664:	4770      	bxne	lr
 8000666:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800066a:	bf08      	it	eq
 800066c:	4770      	bxeq	lr
 800066e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000672:	bf04      	itt	eq
 8000674:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000678:	4770      	bxeq	lr
 800067a:	b530      	push	{r4, r5, lr}
 800067c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000680:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000684:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000688:	e71c      	b.n	80004c4 <__adddf3+0x138>
 800068a:	bf00      	nop

0800068c <__aeabi_ul2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f04f 0500 	mov.w	r5, #0
 800069a:	e00a      	b.n	80006b2 <__aeabi_l2d+0x16>

0800069c <__aeabi_l2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006aa:	d502      	bpl.n	80006b2 <__aeabi_l2d+0x16>
 80006ac:	4240      	negs	r0, r0
 80006ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006be:	f43f aed8 	beq.w	8000472 <__adddf3+0xe6>
 80006c2:	f04f 0203 	mov.w	r2, #3
 80006c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ca:	bf18      	it	ne
 80006cc:	3203      	addne	r2, #3
 80006ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006d2:	bf18      	it	ne
 80006d4:	3203      	addne	r2, #3
 80006d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006da:	f1c2 0320 	rsb	r3, r2, #32
 80006de:	fa00 fc03 	lsl.w	ip, r0, r3
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ea:	ea40 000e 	orr.w	r0, r0, lr
 80006ee:	fa21 f102 	lsr.w	r1, r1, r2
 80006f2:	4414      	add	r4, r2
 80006f4:	e6bd      	b.n	8000472 <__adddf3+0xe6>
 80006f6:	bf00      	nop

080006f8 <__aeabi_dmul>:
 80006f8:	b570      	push	{r4, r5, r6, lr}
 80006fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80006fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000702:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000706:	bf1d      	ittte	ne
 8000708:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800070c:	ea94 0f0c 	teqne	r4, ip
 8000710:	ea95 0f0c 	teqne	r5, ip
 8000714:	f000 f8de 	bleq	80008d4 <__aeabi_dmul+0x1dc>
 8000718:	442c      	add	r4, r5
 800071a:	ea81 0603 	eor.w	r6, r1, r3
 800071e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000722:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000726:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800072a:	bf18      	it	ne
 800072c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000730:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000734:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000738:	d038      	beq.n	80007ac <__aeabi_dmul+0xb4>
 800073a:	fba0 ce02 	umull	ip, lr, r0, r2
 800073e:	f04f 0500 	mov.w	r5, #0
 8000742:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000746:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800074a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800074e:	f04f 0600 	mov.w	r6, #0
 8000752:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000756:	f09c 0f00 	teq	ip, #0
 800075a:	bf18      	it	ne
 800075c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000760:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000764:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000768:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800076c:	d204      	bcs.n	8000778 <__aeabi_dmul+0x80>
 800076e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000772:	416d      	adcs	r5, r5
 8000774:	eb46 0606 	adc.w	r6, r6, r6
 8000778:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800077c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000780:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000784:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000788:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800078c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000790:	bf88      	it	hi
 8000792:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000796:	d81e      	bhi.n	80007d6 <__aeabi_dmul+0xde>
 8000798:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800079c:	bf08      	it	eq
 800079e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80007a2:	f150 0000 	adcs.w	r0, r0, #0
 80007a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80007b0:	ea46 0101 	orr.w	r1, r6, r1
 80007b4:	ea40 0002 	orr.w	r0, r0, r2
 80007b8:	ea81 0103 	eor.w	r1, r1, r3
 80007bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007c0:	bfc2      	ittt	gt
 80007c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007ca:	bd70      	popgt	{r4, r5, r6, pc}
 80007cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80007d0:	f04f 0e00 	mov.w	lr, #0
 80007d4:	3c01      	subs	r4, #1
 80007d6:	f300 80ab 	bgt.w	8000930 <__aeabi_dmul+0x238>
 80007da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80007de:	bfde      	ittt	le
 80007e0:	2000      	movle	r0, #0
 80007e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80007e6:	bd70      	pople	{r4, r5, r6, pc}
 80007e8:	f1c4 0400 	rsb	r4, r4, #0
 80007ec:	3c20      	subs	r4, #32
 80007ee:	da35      	bge.n	800085c <__aeabi_dmul+0x164>
 80007f0:	340c      	adds	r4, #12
 80007f2:	dc1b      	bgt.n	800082c <__aeabi_dmul+0x134>
 80007f4:	f104 0414 	add.w	r4, r4, #20
 80007f8:	f1c4 0520 	rsb	r5, r4, #32
 80007fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000800:	fa20 f004 	lsr.w	r0, r0, r4
 8000804:	fa01 f205 	lsl.w	r2, r1, r5
 8000808:	ea40 0002 	orr.w	r0, r0, r2
 800080c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000810:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000814:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000818:	fa21 f604 	lsr.w	r6, r1, r4
 800081c:	eb42 0106 	adc.w	r1, r2, r6
 8000820:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000824:	bf08      	it	eq
 8000826:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800082a:	bd70      	pop	{r4, r5, r6, pc}
 800082c:	f1c4 040c 	rsb	r4, r4, #12
 8000830:	f1c4 0520 	rsb	r5, r4, #32
 8000834:	fa00 f304 	lsl.w	r3, r0, r4
 8000838:	fa20 f005 	lsr.w	r0, r0, r5
 800083c:	fa01 f204 	lsl.w	r2, r1, r4
 8000840:	ea40 0002 	orr.w	r0, r0, r2
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800084c:	f141 0100 	adc.w	r1, r1, #0
 8000850:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000854:	bf08      	it	eq
 8000856:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f1c4 0520 	rsb	r5, r4, #32
 8000860:	fa00 f205 	lsl.w	r2, r0, r5
 8000864:	ea4e 0e02 	orr.w	lr, lr, r2
 8000868:	fa20 f304 	lsr.w	r3, r0, r4
 800086c:	fa01 f205 	lsl.w	r2, r1, r5
 8000870:	ea43 0302 	orr.w	r3, r3, r2
 8000874:	fa21 f004 	lsr.w	r0, r1, r4
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800087c:	fa21 f204 	lsr.w	r2, r1, r4
 8000880:	ea20 0002 	bic.w	r0, r0, r2
 8000884:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000888:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800088c:	bf08      	it	eq
 800088e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000892:	bd70      	pop	{r4, r5, r6, pc}
 8000894:	f094 0f00 	teq	r4, #0
 8000898:	d10f      	bne.n	80008ba <__aeabi_dmul+0x1c2>
 800089a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800089e:	0040      	lsls	r0, r0, #1
 80008a0:	eb41 0101 	adc.w	r1, r1, r1
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	bf08      	it	eq
 80008aa:	3c01      	subeq	r4, #1
 80008ac:	d0f7      	beq.n	800089e <__aeabi_dmul+0x1a6>
 80008ae:	ea41 0106 	orr.w	r1, r1, r6
 80008b2:	f095 0f00 	teq	r5, #0
 80008b6:	bf18      	it	ne
 80008b8:	4770      	bxne	lr
 80008ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80008be:	0052      	lsls	r2, r2, #1
 80008c0:	eb43 0303 	adc.w	r3, r3, r3
 80008c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80008c8:	bf08      	it	eq
 80008ca:	3d01      	subeq	r5, #1
 80008cc:	d0f7      	beq.n	80008be <__aeabi_dmul+0x1c6>
 80008ce:	ea43 0306 	orr.w	r3, r3, r6
 80008d2:	4770      	bx	lr
 80008d4:	ea94 0f0c 	teq	r4, ip
 80008d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008dc:	bf18      	it	ne
 80008de:	ea95 0f0c 	teqne	r5, ip
 80008e2:	d00c      	beq.n	80008fe <__aeabi_dmul+0x206>
 80008e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e8:	bf18      	it	ne
 80008ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ee:	d1d1      	bne.n	8000894 <__aeabi_dmul+0x19c>
 80008f0:	ea81 0103 	eor.w	r1, r1, r3
 80008f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008f8:	f04f 0000 	mov.w	r0, #0
 80008fc:	bd70      	pop	{r4, r5, r6, pc}
 80008fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000902:	bf06      	itte	eq
 8000904:	4610      	moveq	r0, r2
 8000906:	4619      	moveq	r1, r3
 8000908:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090c:	d019      	beq.n	8000942 <__aeabi_dmul+0x24a>
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	d102      	bne.n	800091a <__aeabi_dmul+0x222>
 8000914:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000918:	d113      	bne.n	8000942 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	d105      	bne.n	800092c <__aeabi_dmul+0x234>
 8000920:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000924:	bf1c      	itt	ne
 8000926:	4610      	movne	r0, r2
 8000928:	4619      	movne	r1, r3
 800092a:	d10a      	bne.n	8000942 <__aeabi_dmul+0x24a>
 800092c:	ea81 0103 	eor.w	r1, r1, r3
 8000930:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000934:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000938:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800093c:	f04f 0000 	mov.w	r0, #0
 8000940:	bd70      	pop	{r4, r5, r6, pc}
 8000942:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000946:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800094a:	bd70      	pop	{r4, r5, r6, pc}

0800094c <__aeabi_ddiv>:
 800094c:	b570      	push	{r4, r5, r6, lr}
 800094e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000952:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000956:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800095a:	bf1d      	ittte	ne
 800095c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000960:	ea94 0f0c 	teqne	r4, ip
 8000964:	ea95 0f0c 	teqne	r5, ip
 8000968:	f000 f8a7 	bleq	8000aba <__aeabi_ddiv+0x16e>
 800096c:	eba4 0405 	sub.w	r4, r4, r5
 8000970:	ea81 0e03 	eor.w	lr, r1, r3
 8000974:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000978:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800097c:	f000 8088 	beq.w	8000a90 <__aeabi_ddiv+0x144>
 8000980:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000984:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000988:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800098c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000990:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000994:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000998:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800099c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80009a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80009a4:	429d      	cmp	r5, r3
 80009a6:	bf08      	it	eq
 80009a8:	4296      	cmpeq	r6, r2
 80009aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80009ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80009b2:	d202      	bcs.n	80009ba <__aeabi_ddiv+0x6e>
 80009b4:	085b      	lsrs	r3, r3, #1
 80009b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ba:	1ab6      	subs	r6, r6, r2
 80009bc:	eb65 0503 	sbc.w	r5, r5, r3
 80009c0:	085b      	lsrs	r3, r3, #1
 80009c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80009ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80009ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80009d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009d6:	bf22      	ittt	cs
 80009d8:	1ab6      	subcs	r6, r6, r2
 80009da:	4675      	movcs	r5, lr
 80009dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80009e0:	085b      	lsrs	r3, r3, #1
 80009e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ee:	bf22      	ittt	cs
 80009f0:	1ab6      	subcs	r6, r6, r2
 80009f2:	4675      	movcs	r5, lr
 80009f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009f8:	085b      	lsrs	r3, r3, #1
 80009fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80009fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a02:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a06:	bf22      	ittt	cs
 8000a08:	1ab6      	subcs	r6, r6, r2
 8000a0a:	4675      	movcs	r5, lr
 8000a0c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a10:	085b      	lsrs	r3, r3, #1
 8000a12:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a16:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a1a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a1e:	bf22      	ittt	cs
 8000a20:	1ab6      	subcs	r6, r6, r2
 8000a22:	4675      	movcs	r5, lr
 8000a24:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a28:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a2c:	d018      	beq.n	8000a60 <__aeabi_ddiv+0x114>
 8000a2e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a32:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a36:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a3a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a3e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a42:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a46:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a4a:	d1c0      	bne.n	80009ce <__aeabi_ddiv+0x82>
 8000a4c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a50:	d10b      	bne.n	8000a6a <__aeabi_ddiv+0x11e>
 8000a52:	ea41 0100 	orr.w	r1, r1, r0
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000a5e:	e7b6      	b.n	80009ce <__aeabi_ddiv+0x82>
 8000a60:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a64:	bf04      	itt	eq
 8000a66:	4301      	orreq	r1, r0
 8000a68:	2000      	moveq	r0, #0
 8000a6a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000a6e:	bf88      	it	hi
 8000a70:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000a74:	f63f aeaf 	bhi.w	80007d6 <__aeabi_dmul+0xde>
 8000a78:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a7c:	bf04      	itt	eq
 8000a7e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a82:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a86:	f150 0000 	adcs.w	r0, r0, #0
 8000a8a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a8e:	bd70      	pop	{r4, r5, r6, pc}
 8000a90:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a94:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a98:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a9c:	bfc2      	ittt	gt
 8000a9e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000aa2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000aa6:	bd70      	popgt	{r4, r5, r6, pc}
 8000aa8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000aac:	f04f 0e00 	mov.w	lr, #0
 8000ab0:	3c01      	subs	r4, #1
 8000ab2:	e690      	b.n	80007d6 <__aeabi_dmul+0xde>
 8000ab4:	ea45 0e06 	orr.w	lr, r5, r6
 8000ab8:	e68d      	b.n	80007d6 <__aeabi_dmul+0xde>
 8000aba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000abe:	ea94 0f0c 	teq	r4, ip
 8000ac2:	bf08      	it	eq
 8000ac4:	ea95 0f0c 	teqeq	r5, ip
 8000ac8:	f43f af3b 	beq.w	8000942 <__aeabi_dmul+0x24a>
 8000acc:	ea94 0f0c 	teq	r4, ip
 8000ad0:	d10a      	bne.n	8000ae8 <__aeabi_ddiv+0x19c>
 8000ad2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000ad6:	f47f af34 	bne.w	8000942 <__aeabi_dmul+0x24a>
 8000ada:	ea95 0f0c 	teq	r5, ip
 8000ade:	f47f af25 	bne.w	800092c <__aeabi_dmul+0x234>
 8000ae2:	4610      	mov	r0, r2
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	e72c      	b.n	8000942 <__aeabi_dmul+0x24a>
 8000ae8:	ea95 0f0c 	teq	r5, ip
 8000aec:	d106      	bne.n	8000afc <__aeabi_ddiv+0x1b0>
 8000aee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000af2:	f43f aefd 	beq.w	80008f0 <__aeabi_dmul+0x1f8>
 8000af6:	4610      	mov	r0, r2
 8000af8:	4619      	mov	r1, r3
 8000afa:	e722      	b.n	8000942 <__aeabi_dmul+0x24a>
 8000afc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b00:	bf18      	it	ne
 8000b02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b06:	f47f aec5 	bne.w	8000894 <__aeabi_dmul+0x19c>
 8000b0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b0e:	f47f af0d 	bne.w	800092c <__aeabi_dmul+0x234>
 8000b12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b16:	f47f aeeb 	bne.w	80008f0 <__aeabi_dmul+0x1f8>
 8000b1a:	e712      	b.n	8000942 <__aeabi_dmul+0x24a>

08000b1c <__gedf2>:
 8000b1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000b20:	e006      	b.n	8000b30 <__cmpdf2+0x4>
 8000b22:	bf00      	nop

08000b24 <__ledf2>:
 8000b24:	f04f 0c01 	mov.w	ip, #1
 8000b28:	e002      	b.n	8000b30 <__cmpdf2+0x4>
 8000b2a:	bf00      	nop

08000b2c <__cmpdf2>:
 8000b2c:	f04f 0c01 	mov.w	ip, #1
 8000b30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	bf18      	it	ne
 8000b42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b46:	d01b      	beq.n	8000b80 <__cmpdf2+0x54>
 8000b48:	b001      	add	sp, #4
 8000b4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b4e:	bf0c      	ite	eq
 8000b50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b54:	ea91 0f03 	teqne	r1, r3
 8000b58:	bf02      	ittt	eq
 8000b5a:	ea90 0f02 	teqeq	r0, r2
 8000b5e:	2000      	moveq	r0, #0
 8000b60:	4770      	bxeq	lr
 8000b62:	f110 0f00 	cmn.w	r0, #0
 8000b66:	ea91 0f03 	teq	r1, r3
 8000b6a:	bf58      	it	pl
 8000b6c:	4299      	cmppl	r1, r3
 8000b6e:	bf08      	it	eq
 8000b70:	4290      	cmpeq	r0, r2
 8000b72:	bf2c      	ite	cs
 8000b74:	17d8      	asrcs	r0, r3, #31
 8000b76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b7a:	f040 0001 	orr.w	r0, r0, #1
 8000b7e:	4770      	bx	lr
 8000b80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b88:	d102      	bne.n	8000b90 <__cmpdf2+0x64>
 8000b8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8e:	d107      	bne.n	8000ba0 <__cmpdf2+0x74>
 8000b90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b98:	d1d6      	bne.n	8000b48 <__cmpdf2+0x1c>
 8000b9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9e:	d0d3      	beq.n	8000b48 <__cmpdf2+0x1c>
 8000ba0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_cdrcmple>:
 8000ba8:	4684      	mov	ip, r0
 8000baa:	4610      	mov	r0, r2
 8000bac:	4662      	mov	r2, ip
 8000bae:	468c      	mov	ip, r1
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4663      	mov	r3, ip
 8000bb4:	e000      	b.n	8000bb8 <__aeabi_cdcmpeq>
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_cdcmpeq>:
 8000bb8:	b501      	push	{r0, lr}
 8000bba:	f7ff ffb7 	bl	8000b2c <__cmpdf2>
 8000bbe:	2800      	cmp	r0, #0
 8000bc0:	bf48      	it	mi
 8000bc2:	f110 0f00 	cmnmi.w	r0, #0
 8000bc6:	bd01      	pop	{r0, pc}

08000bc8 <__aeabi_dcmpeq>:
 8000bc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bcc:	f7ff fff4 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000bd0:	bf0c      	ite	eq
 8000bd2:	2001      	moveq	r0, #1
 8000bd4:	2000      	movne	r0, #0
 8000bd6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bda:	bf00      	nop

08000bdc <__aeabi_dcmplt>:
 8000bdc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be0:	f7ff ffea 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000be4:	bf34      	ite	cc
 8000be6:	2001      	movcc	r0, #1
 8000be8:	2000      	movcs	r0, #0
 8000bea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bee:	bf00      	nop

08000bf0 <__aeabi_dcmple>:
 8000bf0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf4:	f7ff ffe0 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000bf8:	bf94      	ite	ls
 8000bfa:	2001      	movls	r0, #1
 8000bfc:	2000      	movhi	r0, #0
 8000bfe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c02:	bf00      	nop

08000c04 <__aeabi_dcmpge>:
 8000c04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c08:	f7ff ffce 	bl	8000ba8 <__aeabi_cdrcmple>
 8000c0c:	bf94      	ite	ls
 8000c0e:	2001      	movls	r0, #1
 8000c10:	2000      	movhi	r0, #0
 8000c12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c16:	bf00      	nop

08000c18 <__aeabi_dcmpgt>:
 8000c18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c1c:	f7ff ffc4 	bl	8000ba8 <__aeabi_cdrcmple>
 8000c20:	bf34      	ite	cc
 8000c22:	2001      	movcc	r0, #1
 8000c24:	2000      	movcs	r0, #0
 8000c26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c2a:	bf00      	nop

08000c2c <__aeabi_dcmpun>:
 8000c2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c34:	d102      	bne.n	8000c3c <__aeabi_dcmpun+0x10>
 8000c36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c3a:	d10a      	bne.n	8000c52 <__aeabi_dcmpun+0x26>
 8000c3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c44:	d102      	bne.n	8000c4c <__aeabi_dcmpun+0x20>
 8000c46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c4a:	d102      	bne.n	8000c52 <__aeabi_dcmpun+0x26>
 8000c4c:	f04f 0000 	mov.w	r0, #0
 8000c50:	4770      	bx	lr
 8000c52:	f04f 0001 	mov.w	r0, #1
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_d2iz>:
 8000c58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c60:	d215      	bcs.n	8000c8e <__aeabi_d2iz+0x36>
 8000c62:	d511      	bpl.n	8000c88 <__aeabi_d2iz+0x30>
 8000c64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c6c:	d912      	bls.n	8000c94 <__aeabi_d2iz+0x3c>
 8000c6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c82:	bf18      	it	ne
 8000c84:	4240      	negne	r0, r0
 8000c86:	4770      	bx	lr
 8000c88:	f04f 0000 	mov.w	r0, #0
 8000c8c:	4770      	bx	lr
 8000c8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c92:	d105      	bne.n	8000ca0 <__aeabi_d2iz+0x48>
 8000c94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000c98:	bf08      	it	eq
 8000c9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000c9e:	4770      	bx	lr
 8000ca0:	f04f 0000 	mov.w	r0, #0
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_d2f>:
 8000ca8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000cac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000cb0:	bf24      	itt	cs
 8000cb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000cb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000cba:	d90d      	bls.n	8000cd8 <__aeabi_d2f+0x30>
 8000cbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000cc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000cc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000cc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ccc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000cd0:	bf08      	it	eq
 8000cd2:	f020 0001 	biceq.w	r0, r0, #1
 8000cd6:	4770      	bx	lr
 8000cd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000cdc:	d121      	bne.n	8000d22 <__aeabi_d2f+0x7a>
 8000cde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ce2:	bfbc      	itt	lt
 8000ce4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ce8:	4770      	bxlt	lr
 8000cea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000cee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000cf2:	f1c2 0218 	rsb	r2, r2, #24
 8000cf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000cfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000d02:	bf18      	it	ne
 8000d04:	f040 0001 	orrne.w	r0, r0, #1
 8000d08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000d10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000d14:	ea40 000c 	orr.w	r0, r0, ip
 8000d18:	fa23 f302 	lsr.w	r3, r3, r2
 8000d1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d20:	e7cc      	b.n	8000cbc <__aeabi_d2f+0x14>
 8000d22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000d26:	d107      	bne.n	8000d38 <__aeabi_d2f+0x90>
 8000d28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000d2c:	bf1e      	ittt	ne
 8000d2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000d32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000d36:	4770      	bxne	lr
 8000d38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000d3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop

08000d48 <__aeabi_uldivmod>:
 8000d48:	b953      	cbnz	r3, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4a:	b94a      	cbnz	r2, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4c:	2900      	cmp	r1, #0
 8000d4e:	bf08      	it	eq
 8000d50:	2800      	cmpeq	r0, #0
 8000d52:	bf1c      	itt	ne
 8000d54:	f04f 31ff 	movne.w	r1, #4294967295
 8000d58:	f04f 30ff 	movne.w	r0, #4294967295
 8000d5c:	f000 b96a 	b.w	8001034 <__aeabi_idiv0>
 8000d60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d68:	f000 f806 	bl	8000d78 <__udivmoddi4>
 8000d6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d74:	b004      	add	sp, #16
 8000d76:	4770      	bx	lr

08000d78 <__udivmoddi4>:
 8000d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d7c:	9d08      	ldr	r5, [sp, #32]
 8000d7e:	460c      	mov	r4, r1
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d14e      	bne.n	8000e22 <__udivmoddi4+0xaa>
 8000d84:	4694      	mov	ip, r2
 8000d86:	458c      	cmp	ip, r1
 8000d88:	4686      	mov	lr, r0
 8000d8a:	fab2 f282 	clz	r2, r2
 8000d8e:	d962      	bls.n	8000e56 <__udivmoddi4+0xde>
 8000d90:	b14a      	cbz	r2, 8000da6 <__udivmoddi4+0x2e>
 8000d92:	f1c2 0320 	rsb	r3, r2, #32
 8000d96:	4091      	lsls	r1, r2
 8000d98:	fa20 f303 	lsr.w	r3, r0, r3
 8000d9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000da0:	4319      	orrs	r1, r3
 8000da2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000daa:	fa1f f68c 	uxth.w	r6, ip
 8000dae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000db2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db6:	fb07 1114 	mls	r1, r7, r4, r1
 8000dba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dbe:	fb04 f106 	mul.w	r1, r4, r6
 8000dc2:	4299      	cmp	r1, r3
 8000dc4:	d90a      	bls.n	8000ddc <__udivmoddi4+0x64>
 8000dc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dca:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dce:	f080 8112 	bcs.w	8000ff6 <__udivmoddi4+0x27e>
 8000dd2:	4299      	cmp	r1, r3
 8000dd4:	f240 810f 	bls.w	8000ff6 <__udivmoddi4+0x27e>
 8000dd8:	3c02      	subs	r4, #2
 8000dda:	4463      	add	r3, ip
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	fa1f f38e 	uxth.w	r3, lr
 8000de2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de6:	fb07 1110 	mls	r1, r7, r0, r1
 8000dea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dee:	fb00 f606 	mul.w	r6, r0, r6
 8000df2:	429e      	cmp	r6, r3
 8000df4:	d90a      	bls.n	8000e0c <__udivmoddi4+0x94>
 8000df6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dfa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfe:	f080 80fc 	bcs.w	8000ffa <__udivmoddi4+0x282>
 8000e02:	429e      	cmp	r6, r3
 8000e04:	f240 80f9 	bls.w	8000ffa <__udivmoddi4+0x282>
 8000e08:	4463      	add	r3, ip
 8000e0a:	3802      	subs	r0, #2
 8000e0c:	1b9b      	subs	r3, r3, r6
 8000e0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e12:	2100      	movs	r1, #0
 8000e14:	b11d      	cbz	r5, 8000e1e <__udivmoddi4+0xa6>
 8000e16:	40d3      	lsrs	r3, r2
 8000e18:	2200      	movs	r2, #0
 8000e1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e22:	428b      	cmp	r3, r1
 8000e24:	d905      	bls.n	8000e32 <__udivmoddi4+0xba>
 8000e26:	b10d      	cbz	r5, 8000e2c <__udivmoddi4+0xb4>
 8000e28:	e9c5 0100 	strd	r0, r1, [r5]
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	4608      	mov	r0, r1
 8000e30:	e7f5      	b.n	8000e1e <__udivmoddi4+0xa6>
 8000e32:	fab3 f183 	clz	r1, r3
 8000e36:	2900      	cmp	r1, #0
 8000e38:	d146      	bne.n	8000ec8 <__udivmoddi4+0x150>
 8000e3a:	42a3      	cmp	r3, r4
 8000e3c:	d302      	bcc.n	8000e44 <__udivmoddi4+0xcc>
 8000e3e:	4290      	cmp	r0, r2
 8000e40:	f0c0 80f0 	bcc.w	8001024 <__udivmoddi4+0x2ac>
 8000e44:	1a86      	subs	r6, r0, r2
 8000e46:	eb64 0303 	sbc.w	r3, r4, r3
 8000e4a:	2001      	movs	r0, #1
 8000e4c:	2d00      	cmp	r5, #0
 8000e4e:	d0e6      	beq.n	8000e1e <__udivmoddi4+0xa6>
 8000e50:	e9c5 6300 	strd	r6, r3, [r5]
 8000e54:	e7e3      	b.n	8000e1e <__udivmoddi4+0xa6>
 8000e56:	2a00      	cmp	r2, #0
 8000e58:	f040 8090 	bne.w	8000f7c <__udivmoddi4+0x204>
 8000e5c:	eba1 040c 	sub.w	r4, r1, ip
 8000e60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e64:	fa1f f78c 	uxth.w	r7, ip
 8000e68:	2101      	movs	r1, #1
 8000e6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e72:	fb08 4416 	mls	r4, r8, r6, r4
 8000e76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e7a:	fb07 f006 	mul.w	r0, r7, r6
 8000e7e:	4298      	cmp	r0, r3
 8000e80:	d908      	bls.n	8000e94 <__udivmoddi4+0x11c>
 8000e82:	eb1c 0303 	adds.w	r3, ip, r3
 8000e86:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e8a:	d202      	bcs.n	8000e92 <__udivmoddi4+0x11a>
 8000e8c:	4298      	cmp	r0, r3
 8000e8e:	f200 80cd 	bhi.w	800102c <__udivmoddi4+0x2b4>
 8000e92:	4626      	mov	r6, r4
 8000e94:	1a1c      	subs	r4, r3, r0
 8000e96:	fa1f f38e 	uxth.w	r3, lr
 8000e9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000ea2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea6:	fb00 f707 	mul.w	r7, r0, r7
 8000eaa:	429f      	cmp	r7, r3
 8000eac:	d908      	bls.n	8000ec0 <__udivmoddi4+0x148>
 8000eae:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb6:	d202      	bcs.n	8000ebe <__udivmoddi4+0x146>
 8000eb8:	429f      	cmp	r7, r3
 8000eba:	f200 80b0 	bhi.w	800101e <__udivmoddi4+0x2a6>
 8000ebe:	4620      	mov	r0, r4
 8000ec0:	1bdb      	subs	r3, r3, r7
 8000ec2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec6:	e7a5      	b.n	8000e14 <__udivmoddi4+0x9c>
 8000ec8:	f1c1 0620 	rsb	r6, r1, #32
 8000ecc:	408b      	lsls	r3, r1
 8000ece:	fa22 f706 	lsr.w	r7, r2, r6
 8000ed2:	431f      	orrs	r7, r3
 8000ed4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed8:	fa04 f301 	lsl.w	r3, r4, r1
 8000edc:	ea43 030c 	orr.w	r3, r3, ip
 8000ee0:	40f4      	lsrs	r4, r6
 8000ee2:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee6:	0c38      	lsrs	r0, r7, #16
 8000ee8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000eec:	fbb4 fef0 	udiv	lr, r4, r0
 8000ef0:	fa1f fc87 	uxth.w	ip, r7
 8000ef4:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000efc:	fb0e f90c 	mul.w	r9, lr, ip
 8000f00:	45a1      	cmp	r9, r4
 8000f02:	fa02 f201 	lsl.w	r2, r2, r1
 8000f06:	d90a      	bls.n	8000f1e <__udivmoddi4+0x1a6>
 8000f08:	193c      	adds	r4, r7, r4
 8000f0a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f0e:	f080 8084 	bcs.w	800101a <__udivmoddi4+0x2a2>
 8000f12:	45a1      	cmp	r9, r4
 8000f14:	f240 8081 	bls.w	800101a <__udivmoddi4+0x2a2>
 8000f18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f1c:	443c      	add	r4, r7
 8000f1e:	eba4 0409 	sub.w	r4, r4, r9
 8000f22:	fa1f f983 	uxth.w	r9, r3
 8000f26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f36:	45a4      	cmp	ip, r4
 8000f38:	d907      	bls.n	8000f4a <__udivmoddi4+0x1d2>
 8000f3a:	193c      	adds	r4, r7, r4
 8000f3c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f40:	d267      	bcs.n	8001012 <__udivmoddi4+0x29a>
 8000f42:	45a4      	cmp	ip, r4
 8000f44:	d965      	bls.n	8001012 <__udivmoddi4+0x29a>
 8000f46:	3b02      	subs	r3, #2
 8000f48:	443c      	add	r4, r7
 8000f4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000f52:	eba4 040c 	sub.w	r4, r4, ip
 8000f56:	429c      	cmp	r4, r3
 8000f58:	46ce      	mov	lr, r9
 8000f5a:	469c      	mov	ip, r3
 8000f5c:	d351      	bcc.n	8001002 <__udivmoddi4+0x28a>
 8000f5e:	d04e      	beq.n	8000ffe <__udivmoddi4+0x286>
 8000f60:	b155      	cbz	r5, 8000f78 <__udivmoddi4+0x200>
 8000f62:	ebb8 030e 	subs.w	r3, r8, lr
 8000f66:	eb64 040c 	sbc.w	r4, r4, ip
 8000f6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6e:	40cb      	lsrs	r3, r1
 8000f70:	431e      	orrs	r6, r3
 8000f72:	40cc      	lsrs	r4, r1
 8000f74:	e9c5 6400 	strd	r6, r4, [r5]
 8000f78:	2100      	movs	r1, #0
 8000f7a:	e750      	b.n	8000e1e <__udivmoddi4+0xa6>
 8000f7c:	f1c2 0320 	rsb	r3, r2, #32
 8000f80:	fa20 f103 	lsr.w	r1, r0, r3
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	fa24 f303 	lsr.w	r3, r4, r3
 8000f8c:	4094      	lsls	r4, r2
 8000f8e:	430c      	orrs	r4, r1
 8000f90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f98:	fa1f f78c 	uxth.w	r7, ip
 8000f9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000fa0:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa4:	0c23      	lsrs	r3, r4, #16
 8000fa6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000faa:	fb00 f107 	mul.w	r1, r0, r7
 8000fae:	4299      	cmp	r1, r3
 8000fb0:	d908      	bls.n	8000fc4 <__udivmoddi4+0x24c>
 8000fb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fba:	d22c      	bcs.n	8001016 <__udivmoddi4+0x29e>
 8000fbc:	4299      	cmp	r1, r3
 8000fbe:	d92a      	bls.n	8001016 <__udivmoddi4+0x29e>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	4463      	add	r3, ip
 8000fc4:	1a5b      	subs	r3, r3, r1
 8000fc6:	b2a4      	uxth	r4, r4
 8000fc8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fcc:	fb08 3311 	mls	r3, r8, r1, r3
 8000fd0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd4:	fb01 f307 	mul.w	r3, r1, r7
 8000fd8:	42a3      	cmp	r3, r4
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x276>
 8000fdc:	eb1c 0404 	adds.w	r4, ip, r4
 8000fe0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fe4:	d213      	bcs.n	800100e <__udivmoddi4+0x296>
 8000fe6:	42a3      	cmp	r3, r4
 8000fe8:	d911      	bls.n	800100e <__udivmoddi4+0x296>
 8000fea:	3902      	subs	r1, #2
 8000fec:	4464      	add	r4, ip
 8000fee:	1ae4      	subs	r4, r4, r3
 8000ff0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff4:	e739      	b.n	8000e6a <__udivmoddi4+0xf2>
 8000ff6:	4604      	mov	r4, r0
 8000ff8:	e6f0      	b.n	8000ddc <__udivmoddi4+0x64>
 8000ffa:	4608      	mov	r0, r1
 8000ffc:	e706      	b.n	8000e0c <__udivmoddi4+0x94>
 8000ffe:	45c8      	cmp	r8, r9
 8001000:	d2ae      	bcs.n	8000f60 <__udivmoddi4+0x1e8>
 8001002:	ebb9 0e02 	subs.w	lr, r9, r2
 8001006:	eb63 0c07 	sbc.w	ip, r3, r7
 800100a:	3801      	subs	r0, #1
 800100c:	e7a8      	b.n	8000f60 <__udivmoddi4+0x1e8>
 800100e:	4631      	mov	r1, r6
 8001010:	e7ed      	b.n	8000fee <__udivmoddi4+0x276>
 8001012:	4603      	mov	r3, r0
 8001014:	e799      	b.n	8000f4a <__udivmoddi4+0x1d2>
 8001016:	4630      	mov	r0, r6
 8001018:	e7d4      	b.n	8000fc4 <__udivmoddi4+0x24c>
 800101a:	46d6      	mov	lr, sl
 800101c:	e77f      	b.n	8000f1e <__udivmoddi4+0x1a6>
 800101e:	4463      	add	r3, ip
 8001020:	3802      	subs	r0, #2
 8001022:	e74d      	b.n	8000ec0 <__udivmoddi4+0x148>
 8001024:	4606      	mov	r6, r0
 8001026:	4623      	mov	r3, r4
 8001028:	4608      	mov	r0, r1
 800102a:	e70f      	b.n	8000e4c <__udivmoddi4+0xd4>
 800102c:	3e02      	subs	r6, #2
 800102e:	4463      	add	r3, ip
 8001030:	e730      	b.n	8000e94 <__udivmoddi4+0x11c>
 8001032:	bf00      	nop

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800103c:	4b0d      	ldr	r3, [pc, #52]	@ (8001074 <MX_CRC_Init+0x3c>)
 800103e:	4a0e      	ldr	r2, [pc, #56]	@ (8001078 <MX_CRC_Init+0x40>)
 8001040:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001042:	4b0c      	ldr	r3, [pc, #48]	@ (8001074 <MX_CRC_Init+0x3c>)
 8001044:	2200      	movs	r2, #0
 8001046:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001048:	4b0a      	ldr	r3, [pc, #40]	@ (8001074 <MX_CRC_Init+0x3c>)
 800104a:	2200      	movs	r2, #0
 800104c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800104e:	4b09      	ldr	r3, [pc, #36]	@ (8001074 <MX_CRC_Init+0x3c>)
 8001050:	2200      	movs	r2, #0
 8001052:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001054:	4b07      	ldr	r3, [pc, #28]	@ (8001074 <MX_CRC_Init+0x3c>)
 8001056:	2200      	movs	r2, #0
 8001058:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800105a:	4b06      	ldr	r3, [pc, #24]	@ (8001074 <MX_CRC_Init+0x3c>)
 800105c:	2201      	movs	r2, #1
 800105e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001060:	4804      	ldr	r0, [pc, #16]	@ (8001074 <MX_CRC_Init+0x3c>)
 8001062:	f003 fd9d 	bl	8004ba0 <HAL_CRC_Init>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800106c:	f000 fed2 	bl	8001e14 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001070:	bf00      	nop
 8001072:	bd80      	pop	{r7, pc}
 8001074:	200009e8 	.word	0x200009e8
 8001078:	40023000 	.word	0x40023000

0800107c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 800107c:	b480      	push	{r7}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a0a      	ldr	r2, [pc, #40]	@ (80010b4 <HAL_CRC_MspInit+0x38>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d10b      	bne.n	80010a6 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800108e:	4b0a      	ldr	r3, [pc, #40]	@ (80010b8 <HAL_CRC_MspInit+0x3c>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001092:	4a09      	ldr	r2, [pc, #36]	@ (80010b8 <HAL_CRC_MspInit+0x3c>)
 8001094:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001098:	6313      	str	r3, [r2, #48]	@ 0x30
 800109a:	4b07      	ldr	r3, [pc, #28]	@ (80010b8 <HAL_CRC_MspInit+0x3c>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80010a6:	bf00      	nop
 80010a8:	3714      	adds	r7, #20
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	40023000 	.word	0x40023000
 80010b8:	40023800 	.word	0x40023800

080010bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80010c2:	4b14      	ldr	r3, [pc, #80]	@ (8001114 <MX_DMA_Init+0x58>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c6:	4a13      	ldr	r2, [pc, #76]	@ (8001114 <MX_DMA_Init+0x58>)
 80010c8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80010cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ce:	4b11      	ldr	r3, [pc, #68]	@ (8001114 <MX_DMA_Init+0x58>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010d6:	607b      	str	r3, [r7, #4]
 80010d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80010da:	2200      	movs	r2, #0
 80010dc:	2100      	movs	r1, #0
 80010de:	2039      	movs	r0, #57	@ 0x39
 80010e0:	f003 fd27 	bl	8004b32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80010e4:	2039      	movs	r0, #57	@ 0x39
 80010e6:	f003 fd40 	bl	8004b6a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 2, 0);
 80010ea:	2200      	movs	r2, #0
 80010ec:	2102      	movs	r1, #2
 80010ee:	203b      	movs	r0, #59	@ 0x3b
 80010f0:	f003 fd1f 	bl	8004b32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80010f4:	203b      	movs	r0, #59	@ 0x3b
 80010f6:	f003 fd38 	bl	8004b6a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 2, 0);
 80010fa:	2200      	movs	r2, #0
 80010fc:	2102      	movs	r1, #2
 80010fe:	2045      	movs	r0, #69	@ 0x45
 8001100:	f003 fd17 	bl	8004b32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001104:	2045      	movs	r0, #69	@ 0x45
 8001106:	f003 fd30 	bl	8004b6a <HAL_NVIC_EnableIRQ>

}
 800110a:	bf00      	nop
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40023800 	.word	0x40023800

08001118 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b090      	sub	sp, #64	@ 0x40
 800111c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	605a      	str	r2, [r3, #4]
 8001128:	609a      	str	r2, [r3, #8]
 800112a:	60da      	str	r2, [r3, #12]
 800112c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800112e:	4ba6      	ldr	r3, [pc, #664]	@ (80013c8 <MX_GPIO_Init+0x2b0>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001132:	4aa5      	ldr	r2, [pc, #660]	@ (80013c8 <MX_GPIO_Init+0x2b0>)
 8001134:	f043 0310 	orr.w	r3, r3, #16
 8001138:	6313      	str	r3, [r2, #48]	@ 0x30
 800113a:	4ba3      	ldr	r3, [pc, #652]	@ (80013c8 <MX_GPIO_Init+0x2b0>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113e:	f003 0310 	and.w	r3, r3, #16
 8001142:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001146:	4ba0      	ldr	r3, [pc, #640]	@ (80013c8 <MX_GPIO_Init+0x2b0>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114a:	4a9f      	ldr	r2, [pc, #636]	@ (80013c8 <MX_GPIO_Init+0x2b0>)
 800114c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001150:	6313      	str	r3, [r2, #48]	@ 0x30
 8001152:	4b9d      	ldr	r3, [pc, #628]	@ (80013c8 <MX_GPIO_Init+0x2b0>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001156:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800115a:	627b      	str	r3, [r7, #36]	@ 0x24
 800115c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800115e:	4b9a      	ldr	r3, [pc, #616]	@ (80013c8 <MX_GPIO_Init+0x2b0>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001162:	4a99      	ldr	r2, [pc, #612]	@ (80013c8 <MX_GPIO_Init+0x2b0>)
 8001164:	f043 0302 	orr.w	r3, r3, #2
 8001168:	6313      	str	r3, [r2, #48]	@ 0x30
 800116a:	4b97      	ldr	r3, [pc, #604]	@ (80013c8 <MX_GPIO_Init+0x2b0>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116e:	f003 0302 	and.w	r3, r3, #2
 8001172:	623b      	str	r3, [r7, #32]
 8001174:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001176:	4b94      	ldr	r3, [pc, #592]	@ (80013c8 <MX_GPIO_Init+0x2b0>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117a:	4a93      	ldr	r2, [pc, #588]	@ (80013c8 <MX_GPIO_Init+0x2b0>)
 800117c:	f043 0308 	orr.w	r3, r3, #8
 8001180:	6313      	str	r3, [r2, #48]	@ 0x30
 8001182:	4b91      	ldr	r3, [pc, #580]	@ (80013c8 <MX_GPIO_Init+0x2b0>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001186:	f003 0308 	and.w	r3, r3, #8
 800118a:	61fb      	str	r3, [r7, #28]
 800118c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800118e:	4b8e      	ldr	r3, [pc, #568]	@ (80013c8 <MX_GPIO_Init+0x2b0>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001192:	4a8d      	ldr	r2, [pc, #564]	@ (80013c8 <MX_GPIO_Init+0x2b0>)
 8001194:	f043 0304 	orr.w	r3, r3, #4
 8001198:	6313      	str	r3, [r2, #48]	@ 0x30
 800119a:	4b8b      	ldr	r3, [pc, #556]	@ (80013c8 <MX_GPIO_Init+0x2b0>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119e:	f003 0304 	and.w	r3, r3, #4
 80011a2:	61bb      	str	r3, [r7, #24]
 80011a4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a6:	4b88      	ldr	r3, [pc, #544]	@ (80013c8 <MX_GPIO_Init+0x2b0>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011aa:	4a87      	ldr	r2, [pc, #540]	@ (80013c8 <MX_GPIO_Init+0x2b0>)
 80011ac:	f043 0301 	orr.w	r3, r3, #1
 80011b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011b2:	4b85      	ldr	r3, [pc, #532]	@ (80013c8 <MX_GPIO_Init+0x2b0>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b6:	f003 0301 	and.w	r3, r3, #1
 80011ba:	617b      	str	r3, [r7, #20]
 80011bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80011be:	4b82      	ldr	r3, [pc, #520]	@ (80013c8 <MX_GPIO_Init+0x2b0>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c2:	4a81      	ldr	r2, [pc, #516]	@ (80013c8 <MX_GPIO_Init+0x2b0>)
 80011c4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ca:	4b7f      	ldr	r3, [pc, #508]	@ (80013c8 <MX_GPIO_Init+0x2b0>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80011d2:	613b      	str	r3, [r7, #16]
 80011d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80011d6:	4b7c      	ldr	r3, [pc, #496]	@ (80013c8 <MX_GPIO_Init+0x2b0>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011da:	4a7b      	ldr	r2, [pc, #492]	@ (80013c8 <MX_GPIO_Init+0x2b0>)
 80011dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011e2:	4b79      	ldr	r3, [pc, #484]	@ (80013c8 <MX_GPIO_Init+0x2b0>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80011ee:	4b76      	ldr	r3, [pc, #472]	@ (80013c8 <MX_GPIO_Init+0x2b0>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f2:	4a75      	ldr	r2, [pc, #468]	@ (80013c8 <MX_GPIO_Init+0x2b0>)
 80011f4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011fa:	4b73      	ldr	r3, [pc, #460]	@ (80013c8 <MX_GPIO_Init+0x2b0>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001202:	60bb      	str	r3, [r7, #8]
 8001204:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001206:	4b70      	ldr	r3, [pc, #448]	@ (80013c8 <MX_GPIO_Init+0x2b0>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120a:	4a6f      	ldr	r2, [pc, #444]	@ (80013c8 <MX_GPIO_Init+0x2b0>)
 800120c:	f043 0320 	orr.w	r3, r3, #32
 8001210:	6313      	str	r3, [r2, #48]	@ 0x30
 8001212:	4b6d      	ldr	r3, [pc, #436]	@ (80013c8 <MX_GPIO_Init+0x2b0>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001216:	f003 0320 	and.w	r3, r3, #32
 800121a:	607b      	str	r3, [r7, #4]
 800121c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800121e:	4b6a      	ldr	r3, [pc, #424]	@ (80013c8 <MX_GPIO_Init+0x2b0>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001222:	4a69      	ldr	r2, [pc, #420]	@ (80013c8 <MX_GPIO_Init+0x2b0>)
 8001224:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001228:	6313      	str	r3, [r2, #48]	@ 0x30
 800122a:	4b67      	ldr	r3, [pc, #412]	@ (80013c8 <MX_GPIO_Init+0x2b0>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001232:	603b      	str	r3, [r7, #0]
 8001234:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 8001236:	2200      	movs	r2, #0
 8001238:	2102      	movs	r1, #2
 800123a:	4864      	ldr	r0, [pc, #400]	@ (80013cc <MX_GPIO_Init+0x2b4>)
 800123c:	f004 fce6 	bl	8005c0c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE2 PE1 PE0
                           PE8 PE9 PE11 PE14
                           PE7 PE10 PE12 PE15
                           PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0
 8001240:	f64f 738f 	movw	r3, #65423	@ 0xff8f
 8001244:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14
                          |GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001246:	2303      	movs	r3, #3
 8001248:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124a:	2300      	movs	r3, #0
 800124c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800124e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001252:	4619      	mov	r1, r3
 8001254:	485e      	ldr	r0, [pc, #376]	@ (80013d0 <MX_GPIO_Init+0x2b8>)
 8001256:	f004 fa09 	bl	800566c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG14 PG13 PG15 PG11
                           PG12 PG10 PG9 PG8
                           PG7 PG6 PG1 PG3
                           PG2 PG0 PG5 PG4 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_11
 800125a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800125e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_12|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8
                          |GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1|GPIO_PIN_3
                          |GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001260:	2303      	movs	r3, #3
 8001262:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001264:	2300      	movs	r3, #0
 8001266:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001268:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800126c:	4619      	mov	r1, r3
 800126e:	4859      	ldr	r0, [pc, #356]	@ (80013d4 <MX_GPIO_Init+0x2bc>)
 8001270:	f004 f9fc 	bl	800566c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB5 PB4 PB3
                           PB9 PB6 PB13 PB12
                           PB2 PB10 PB1 PB0
                           PB11 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3
 8001274:	f64f 737f 	movw	r3, #65407	@ 0xff7f
 8001278:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_13|GPIO_PIN_12
                          |GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_1|GPIO_PIN_0
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800127a:	2303      	movs	r3, #3
 800127c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001282:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001286:	4619      	mov	r1, r3
 8001288:	4853      	ldr	r0, [pc, #332]	@ (80013d8 <MX_GPIO_Init+0x2c0>)
 800128a:	f004 f9ef 	bl	800566c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD7 PD6 PD0 PD5
                           PD3 PD1 PD4 PD15
                           PD10 PD14 PD9 PD8
                           PD12 PD13 PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_0|GPIO_PIN_5
 800128e:	f64f 73fb 	movw	r3, #65531	@ 0xfffb
 8001292:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_15
                          |GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001294:	2303      	movs	r3, #3
 8001296:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800129c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012a0:	4619      	mov	r1, r3
 80012a2:	484e      	ldr	r0, [pc, #312]	@ (80013dc <MX_GPIO_Init+0x2c4>)
 80012a4:	f004 f9e2 	bl	800566c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA15 PA12 PA11 PA10
                           PA8 PA1 PA0 PA4
                           PA2 PA6 PA5 PA3
                           PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10
 80012a8:	f649 53ff 	movw	r3, #40447	@ 0x9dff
 80012ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_4
                          |GPIO_PIN_2|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_3
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012ae:	2303      	movs	r3, #3
 80012b0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012ba:	4619      	mov	r1, r3
 80012bc:	4848      	ldr	r0, [pc, #288]	@ (80013e0 <MX_GPIO_Init+0x2c8>)
 80012be:	f004 f9d5 	bl	800566c <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ13 PJ12 PJ14 PJ15
                           PJ11 PJ8 PJ10 PJ7
                           PJ9 PJ6 PJ4 PJ5
                           PJ3 PJ2 PJ0 PJ1 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15
 80012c2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80012c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_7
                          |GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012c8:	2303      	movs	r3, #3
 80012ca:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012cc:	2300      	movs	r3, #0
 80012ce:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80012d0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012d4:	4619      	mov	r1, r3
 80012d6:	4843      	ldr	r0, [pc, #268]	@ (80013e4 <MX_GPIO_Init+0x2cc>)
 80012d8:	f004 f9c8 	bl	800566c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC11 PC10 PC14 PC15
                           PC9 PC7 PC6 PC3
                           PC0 PC1 PC2 PC4
                           PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15
 80012dc:	f64c 63ff 	movw	r3, #52991	@ 0xceff
 80012e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_9|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_3
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012e2:	2303      	movs	r3, #3
 80012e4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012ee:	4619      	mov	r1, r3
 80012f0:	483d      	ldr	r0, [pc, #244]	@ (80013e8 <MX_GPIO_Init+0x2d0>)
 80012f2:	f004 f9bb 	bl	800566c <HAL_GPIO_Init>

  /*Configure GPIO pins : PI8 PI4 PI3 PI2
                           PI5 PI7 PI10 PI6
                           PI12 PI9 PI0 PI13
                           PI15 PI14 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2
 80012f6:	f24f 73fd 	movw	r3, #63485	@ 0xf7fd
 80012fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_6
                          |GPIO_PIN_12|GPIO_PIN_9|GPIO_PIN_0|GPIO_PIN_13
                          |GPIO_PIN_15|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012fc:	2303      	movs	r3, #3
 80012fe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001304:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001308:	4619      	mov	r1, r3
 800130a:	4830      	ldr	r0, [pc, #192]	@ (80013cc <MX_GPIO_Init+0x2b4>)
 800130c:	f004 f9ae 	bl	800566c <HAL_GPIO_Init>

  /*Configure GPIO pins : PK7 PK6 PK5 PK4
                           PK3 PK1 PK2 PK0 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
 8001310:	23ff      	movs	r3, #255	@ 0xff
 8001312:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001314:	2303      	movs	r3, #3
 8001316:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001318:	2300      	movs	r3, #0
 800131a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800131c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001320:	4619      	mov	r1, r3
 8001322:	4832      	ldr	r0, [pc, #200]	@ (80013ec <MX_GPIO_Init+0x2d4>)
 8001324:	f004 f9a2 	bl	800566c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001328:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800132c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800132e:	2300      	movs	r3, #0
 8001330:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001332:	2300      	movs	r3, #0
 8001334:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001336:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800133a:	4619      	mov	r1, r3
 800133c:	482a      	ldr	r0, [pc, #168]	@ (80013e8 <MX_GPIO_Init+0x2d0>)
 800133e:	f004 f995 	bl	800566c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3
                           PF4 PF7 PF6 PF5
                           PF10 PF9 PF8 PF12
                           PF15 PF13 PF14 PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001342:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001346:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_4|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8|GPIO_PIN_12
                          |GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001348:	2303      	movs	r3, #3
 800134a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134c:	2300      	movs	r3, #0
 800134e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001350:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001354:	4619      	mov	r1, r3
 8001356:	4826      	ldr	r0, [pc, #152]	@ (80013f0 <MX_GPIO_Init+0x2d8>)
 8001358:	f004 f988 	bl	800566c <HAL_GPIO_Init>

  /*Configure GPIO pins : PH15 PH13 PH14 PH4
                           PH5 PH3 PH2 PH12
                           PH7 PH9 PH11 PH6
                           PH8 PH10 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_4
 800135c:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8001360:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_12
                          |GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_6
                          |GPIO_PIN_8|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001362:	2303      	movs	r3, #3
 8001364:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001366:	2300      	movs	r3, #0
 8001368:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800136a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800136e:	4619      	mov	r1, r3
 8001370:	4820      	ldr	r0, [pc, #128]	@ (80013f4 <MX_GPIO_Init+0x2dc>)
 8001372:	f004 f97b 	bl	800566c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 8001376:	2302      	movs	r3, #2
 8001378:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800137a:	2301      	movs	r3, #1
 800137c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137e:	2300      	movs	r3, #0
 8001380:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001382:	2300      	movs	r3, #0
 8001384:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 8001386:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800138a:	4619      	mov	r1, r3
 800138c:	480f      	ldr	r0, [pc, #60]	@ (80013cc <MX_GPIO_Init+0x2b4>)
 800138e:	f004 f96d 	bl	800566c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 8001392:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001396:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001398:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800139c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 80013a2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80013a6:	4619      	mov	r1, r3
 80013a8:	4808      	ldr	r0, [pc, #32]	@ (80013cc <MX_GPIO_Init+0x2b4>)
 80013aa:	f004 f95f 	bl	800566c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80013ae:	2200      	movs	r2, #0
 80013b0:	2100      	movs	r1, #0
 80013b2:	2028      	movs	r0, #40	@ 0x28
 80013b4:	f003 fbbd 	bl	8004b32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80013b8:	2028      	movs	r0, #40	@ 0x28
 80013ba:	f003 fbd6 	bl	8004b6a <HAL_NVIC_EnableIRQ>

}
 80013be:	bf00      	nop
 80013c0:	3740      	adds	r7, #64	@ 0x40
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	40023800 	.word	0x40023800
 80013cc:	40022000 	.word	0x40022000
 80013d0:	40021000 	.word	0x40021000
 80013d4:	40021800 	.word	0x40021800
 80013d8:	40020400 	.word	0x40020400
 80013dc:	40020c00 	.word	0x40020c00
 80013e0:	40020000 	.word	0x40020000
 80013e4:	40022400 	.word	0x40022400
 80013e8:	40020800 	.word	0x40020800
 80013ec:	40022800 	.word	0x40022800
 80013f0:	40021400 	.word	0x40021400
 80013f4:	40021c00 	.word	0x40021c00

080013f8 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80013fc:	f3bf 8f4f 	dsb	sy
}
 8001400:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001402:	f3bf 8f6f 	isb	sy
}
 8001406:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001408:	4b0d      	ldr	r3, [pc, #52]	@ (8001440 <SCB_EnableICache+0x48>)
 800140a:	2200      	movs	r2, #0
 800140c:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001410:	f3bf 8f4f 	dsb	sy
}
 8001414:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001416:	f3bf 8f6f 	isb	sy
}
 800141a:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800141c:	4b08      	ldr	r3, [pc, #32]	@ (8001440 <SCB_EnableICache+0x48>)
 800141e:	695b      	ldr	r3, [r3, #20]
 8001420:	4a07      	ldr	r2, [pc, #28]	@ (8001440 <SCB_EnableICache+0x48>)
 8001422:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001426:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001428:	f3bf 8f4f 	dsb	sy
}
 800142c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800142e:	f3bf 8f6f 	isb	sy
}
 8001432:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8001434:	bf00      	nop
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	e000ed00 	.word	0xe000ed00

08001444 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8001444:	b480      	push	{r7}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800144a:	4b1f      	ldr	r3, [pc, #124]	@ (80014c8 <SCB_EnableDCache+0x84>)
 800144c:	2200      	movs	r2, #0
 800144e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001452:	f3bf 8f4f 	dsb	sy
}
 8001456:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001458:	4b1b      	ldr	r3, [pc, #108]	@ (80014c8 <SCB_EnableDCache+0x84>)
 800145a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800145e:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	0b5b      	lsrs	r3, r3, #13
 8001464:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001468:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	08db      	lsrs	r3, r3, #3
 800146e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001472:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	015a      	lsls	r2, r3, #5
 8001478:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 800147c:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800147e:	68ba      	ldr	r2, [r7, #8]
 8001480:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001482:	4911      	ldr	r1, [pc, #68]	@ (80014c8 <SCB_EnableDCache+0x84>)
 8001484:	4313      	orrs	r3, r2
 8001486:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	1e5a      	subs	r2, r3, #1
 800148e:	60ba      	str	r2, [r7, #8]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d1ef      	bne.n	8001474 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	1e5a      	subs	r2, r3, #1
 8001498:	60fa      	str	r2, [r7, #12]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d1e5      	bne.n	800146a <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800149e:	f3bf 8f4f 	dsb	sy
}
 80014a2:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80014a4:	4b08      	ldr	r3, [pc, #32]	@ (80014c8 <SCB_EnableDCache+0x84>)
 80014a6:	695b      	ldr	r3, [r3, #20]
 80014a8:	4a07      	ldr	r2, [pc, #28]	@ (80014c8 <SCB_EnableDCache+0x84>)
 80014aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014ae:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80014b0:	f3bf 8f4f 	dsb	sy
}
 80014b4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80014b6:	f3bf 8f6f 	isb	sy
}
 80014ba:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80014bc:	bf00      	nop
 80014be:	3714      	adds	r7, #20
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr
 80014c8:	e000ed00 	.word	0xe000ed00

080014cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014cc:	b5b0      	push	{r4, r5, r7, lr}
 80014ce:	f5ad 6d8b 	sub.w	sp, sp, #1112	@ 0x458
 80014d2:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* Enable the CPU Cache */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80014d4:	f7ff ff90 	bl	80013f8 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80014d8:	f7ff ffb4 	bl	8001444 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014dc:	f003 f9cc 	bl	8004878 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014e0:	f000 fac4 	bl	8001a6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014e4:	f7ff fe18 	bl	8001118 <MX_GPIO_Init>
  MX_DMA_Init();
 80014e8:	f7ff fde8 	bl	80010bc <MX_DMA_Init>
  MX_SAI1_Init();
 80014ec:	f000 fc98 	bl	8001e20 <MX_SAI1_Init>
  MX_USART1_UART_Init();
 80014f0:	f001 f850 	bl	8002594 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 80014f4:	f009 ff38 	bl	800b368 <MX_FATFS_Init>
  MX_SDMMC1_SD_Init();
 80014f8:	f000 fdb6 	bl	8002068 <MX_SDMMC1_SD_Init>
  MX_CRC_Init();
 80014fc:	f7ff fd9c 	bl	8001038 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

  /* We format the SD card */
  printf("SD card init...\r\n");
 8001500:	48a9      	ldr	r0, [pc, #676]	@ (80017a8 <main+0x2dc>)
 8001502:	f012 fd33 	bl	8013f6c <puts>
  SDCard_InitAndFormat();
 8001506:	f000 fb5f 	bl	8001bc8 <SDCard_InitAndFormat>

  AI_Init();
 800150a:	f000 fc47 	bl	8001d9c <AI_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  	uint32_t write_index = 0;
 800150e:	2300      	movs	r3, #0
 8001510:	f8c7 3424 	str.w	r3, [r7, #1060]	@ 0x424
    while (1)
    {
        check_button_release();
 8001514:	f000 fb44 	bl	8001ba0 <check_button_release>
        printf("Waiting for input to record...\r\n");
 8001518:	48a4      	ldr	r0, [pc, #656]	@ (80017ac <main+0x2e0>)
 800151a:	f012 fd27 	bl	8013f6c <puts>
        HAL_Delay(1000);
 800151e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001522:	f003 fa07 	bl	8004934 <HAL_Delay>


        if (button_pressed == 1)
 8001526:	4ba2      	ldr	r3, [pc, #648]	@ (80017b0 <main+0x2e4>)
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	b2db      	uxtb	r3, r3
 800152c:	2b01      	cmp	r3, #1
 800152e:	f040 8289 	bne.w	8001a44 <main+0x578>
        {
            /* Toggle the green led to visually show action */
            HAL_GPIO_TogglePin(USR_LED_GPIO_Port, USR_LED_Pin);
 8001532:	2102      	movs	r1, #2
 8001534:	489f      	ldr	r0, [pc, #636]	@ (80017b4 <main+0x2e8>)
 8001536:	f004 fb82 	bl	8005c3e <HAL_GPIO_TogglePin>
            HAL_Delay(100);
 800153a:	2064      	movs	r0, #100	@ 0x64
 800153c:	f003 f9fa 	bl	8004934 <HAL_Delay>
            HAL_GPIO_TogglePin(USR_LED_GPIO_Port, USR_LED_Pin);
 8001540:	2102      	movs	r1, #2
 8001542:	489c      	ldr	r0, [pc, #624]	@ (80017b4 <main+0x2e8>)
 8001544:	f004 fb7b 	bl	8005c3e <HAL_GPIO_TogglePin>
            HAL_Delay(100);
 8001548:	2064      	movs	r0, #100	@ 0x64
 800154a:	f003 f9f3 	bl	8004934 <HAL_Delay>

            /* If the program is not already recording... */
            if (AudioState == AUDIO_STATE_IDLE)
 800154e:	4b9a      	ldr	r3, [pc, #616]	@ (80017b8 <main+0x2ec>)
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d108      	bne.n	8001568 <main+0x9c>
            {
                /* Configure the audio recorder: sampling frequency, bits-depth, number of channels */
                AUDIO_REC_Start();
 8001556:	f009 fb9b 	bl	800ac90 <AUDIO_REC_Start>
            }

            /* While recording, we loop the recording process */
            while (AudioState == AUDIO_STATE_RECORD)
 800155a:	e005      	b.n	8001568 <main+0x9c>
            {
                status = AUDIO_REC_Process();
 800155c:	f009 fc1e 	bl	800ad9c <AUDIO_REC_Process>
 8001560:	4603      	mov	r3, r0
 8001562:	461a      	mov	r2, r3
 8001564:	4b95      	ldr	r3, [pc, #596]	@ (80017bc <main+0x2f0>)
 8001566:	701a      	strb	r2, [r3, #0]
            while (AudioState == AUDIO_STATE_RECORD)
 8001568:	4b93      	ldr	r3, [pc, #588]	@ (80017b8 <main+0x2ec>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	2b05      	cmp	r3, #5
 800156e:	d0f5      	beq.n	800155c <main+0x90>
            }

            /* Once we stop recording, we correctly close the .WAV */
            if (AudioState == AUDIO_STATE_STOP)
 8001570:	4b91      	ldr	r3, [pc, #580]	@ (80017b8 <main+0x2ec>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	2b0a      	cmp	r3, #10
 8001576:	d108      	bne.n	800158a <main+0xbe>
            {
                status = AUDIO_REC_Process();
 8001578:	f009 fc10 	bl	800ad9c <AUDIO_REC_Process>
 800157c:	4603      	mov	r3, r0
 800157e:	461a      	mov	r2, r3
 8001580:	4b8e      	ldr	r3, [pc, #568]	@ (80017bc <main+0x2f0>)
 8001582:	701a      	strb	r2, [r3, #0]
                printf("Recording stopped.\r\n");
 8001584:	488e      	ldr	r0, [pc, #568]	@ (80017c0 <main+0x2f4>)
 8001586:	f012 fcf1 	bl	8013f6c <puts>
            //ReadWAVFileInfo("WAVE.wav");

            /* Audio processing step*/

            // We read the contents of the file, save the info in the "audio_buffer" variable
            read_wav_file("WAVE.wav", waveform);
 800158a:	498e      	ldr	r1, [pc, #568]	@ (80017c4 <main+0x2f8>)
 800158c:	488e      	ldr	r0, [pc, #568]	@ (80017c8 <main+0x2fc>)
 800158e:	f000 fb6b 	bl	8001c68 <read_wav_file>

            printf("Shape of audio_buffer: (%u,)\r\n", sizeof(waveform) / sizeof(waveform[0]));
 8001592:	f44f 517a 	mov.w	r1, #16000	@ 0x3e80
 8001596:	488d      	ldr	r0, [pc, #564]	@ (80017cc <main+0x300>)
 8001598:	f012 fc80 	bl	8013e9c <iprintf>

            // We create a fast fft instance (lookup)
        	if (arm_rfft_fast_init_f32(&fft, FFT_SIZE) != ARM_MATH_SUCCESS) {
 800159c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80015a0:	488b      	ldr	r0, [pc, #556]	@ (80017d0 <main+0x304>)
 80015a2:	f00d fca7 	bl	800eef4 <arm_rfft_fast_init_f32>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d002      	beq.n	80015b2 <main+0xe6>
        		printf("Failed to init RFFT");
 80015ac:	4889      	ldr	r0, [pc, #548]	@ (80017d4 <main+0x308>)
 80015ae:	f012 fc75 	bl	8013e9c <iprintf>
        	}

        	// We create a hanning window, of size 256
            static float32_t hanning[FFT_SIZE];
        	arm_hanning_f32(hanning, FFT_SIZE);
 80015b2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80015b6:	4888      	ldr	r0, [pc, #544]	@ (80017d8 <main+0x30c>)
 80015b8:	f000 fbaa 	bl	8001d10 <arm_hanning_f32>

        	printf("Normalizing audio\r\n");
 80015bc:	4887      	ldr	r0, [pc, #540]	@ (80017dc <main+0x310>)
 80015be:	f012 fcd5 	bl	8013f6c <puts>
        	// Normalisation de l'audio
        	float min = 32767.0f;  // Set min to the maximum positive value for 16-bit signed integer
 80015c2:	4b87      	ldr	r3, [pc, #540]	@ (80017e0 <main+0x314>)
 80015c4:	f207 424c 	addw	r2, r7, #1100	@ 0x44c
 80015c8:	6013      	str	r3, [r2, #0]
        	float max = -32768.0f; // Set max to the minimum negative value for 16-bit signed integer
 80015ca:	f04f 4347 	mov.w	r3, #3338665984	@ 0xc7000000
 80015ce:	f507 6289 	add.w	r2, r7, #1096	@ 0x448
 80015d2:	6013      	str	r3, [r2, #0]

        	for (uint32_t i = 0; i < sizeof(waveform) / sizeof(waveform[0]); i++) {
 80015d4:	2300      	movs	r3, #0
 80015d6:	f8c7 3444 	str.w	r3, [r7, #1092]	@ 0x444
 80015da:	e03d      	b.n	8001658 <main+0x18c>
        	    int16_t val = waveform[i];  // Directly access the int16_t sample
 80015dc:	4a79      	ldr	r2, [pc, #484]	@ (80017c4 <main+0x2f8>)
 80015de:	f8d7 3444 	ldr.w	r3, [r7, #1092]	@ 0x444
 80015e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80015e6:	f8a7 340e 	strh.w	r3, [r7, #1038]	@ 0x40e
        	    if ((float)val < min) min = (float)val;  // Compare values and update min
 80015ea:	f9b7 340e 	ldrsh.w	r3, [r7, #1038]	@ 0x40e
 80015ee:	ee07 3a90 	vmov	s15, r3
 80015f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015f6:	f207 434c 	addw	r3, r7, #1100	@ 0x44c
 80015fa:	ed93 7a00 	vldr	s14, [r3]
 80015fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001606:	dd09      	ble.n	800161c <main+0x150>
 8001608:	f9b7 340e 	ldrsh.w	r3, [r7, #1038]	@ 0x40e
 800160c:	ee07 3a90 	vmov	s15, r3
 8001610:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001614:	f207 434c 	addw	r3, r7, #1100	@ 0x44c
 8001618:	edc3 7a00 	vstr	s15, [r3]
        	    if ((float)val > max) max = (float)val;  // Compare values and update max
 800161c:	f9b7 340e 	ldrsh.w	r3, [r7, #1038]	@ 0x40e
 8001620:	ee07 3a90 	vmov	s15, r3
 8001624:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001628:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 800162c:	ed93 7a00 	vldr	s14, [r3]
 8001630:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001638:	d509      	bpl.n	800164e <main+0x182>
 800163a:	f9b7 340e 	ldrsh.w	r3, [r7, #1038]	@ 0x40e
 800163e:	ee07 3a90 	vmov	s15, r3
 8001642:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001646:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 800164a:	edc3 7a00 	vstr	s15, [r3]
        	for (uint32_t i = 0; i < sizeof(waveform) / sizeof(waveform[0]); i++) {
 800164e:	f8d7 3444 	ldr.w	r3, [r7, #1092]	@ 0x444
 8001652:	3301      	adds	r3, #1
 8001654:	f8c7 3444 	str.w	r3, [r7, #1092]	@ 0x444
 8001658:	f8d7 3444 	ldr.w	r3, [r7, #1092]	@ 0x444
 800165c:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8001660:	d3bc      	bcc.n	80015dc <main+0x110>
        	}
        	printf("Normalizing audio OK\r\n");
 8001662:	4860      	ldr	r0, [pc, #384]	@ (80017e4 <main+0x318>)
 8001664:	f012 fc82 	bl	8013f6c <puts>

        	printf("Min value: %.2f, Max value: %.2f\r\n", min, max);
 8001668:	f207 434c 	addw	r3, r7, #1100	@ 0x44c
 800166c:	6818      	ldr	r0, [r3, #0]
 800166e:	f7fe ffeb 	bl	8000648 <__aeabi_f2d>
 8001672:	4604      	mov	r4, r0
 8001674:	460d      	mov	r5, r1
 8001676:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 800167a:	6818      	ldr	r0, [r3, #0]
 800167c:	f7fe ffe4 	bl	8000648 <__aeabi_f2d>
 8001680:	4602      	mov	r2, r0
 8001682:	460b      	mov	r3, r1
 8001684:	e9cd 2300 	strd	r2, r3, [sp]
 8001688:	4622      	mov	r2, r4
 800168a:	462b      	mov	r3, r5
 800168c:	4856      	ldr	r0, [pc, #344]	@ (80017e8 <main+0x31c>)
 800168e:	f012 fc05 	bl	8013e9c <iprintf>

        	printf("Conversion, bias removal and hanning application\r\n");
 8001692:	4856      	ldr	r0, [pc, #344]	@ (80017ec <main+0x320>)
 8001694:	f012 fc6a 	bl	8013f6c <puts>
        	// Conversion waveform to float (-1 to 1), Remove DC bias (mean subtraction), applies Hanning window
        	for (uint32_t idx = 0; idx < 124; idx++) {
 8001698:	2300      	movs	r3, #0
 800169a:	f8c7 3440 	str.w	r3, [r7, #1088]	@ 0x440
 800169e:	e184      	b.n	80019aa <main+0x4de>
        	    float dst[FFT_SIZE];
        	    static float mag[FFT_SIZE + 1];
        	    double sum = 0;
 80016a0:	f04f 0200 	mov.w	r2, #0
 80016a4:	f04f 0300 	mov.w	r3, #0
 80016a8:	f507 6187 	add.w	r1, r7, #1080	@ 0x438
 80016ac:	e9c1 2300 	strd	r2, r3, [r1]
        	    static float* signal_chunk = mag;

        	    for (uint32_t i = 0; i < FFT_SIZE; i++) {
 80016b0:	2300      	movs	r3, #0
 80016b2:	f8c7 3434 	str.w	r3, [r7, #1076]	@ 0x434
 80016b6:	e05b      	b.n	8001770 <main+0x2a4>
        	        signal_chunk[i] = (float)((uint16_t)waveform[idx * frame_step + i]);
 80016b8:	2280      	movs	r2, #128	@ 0x80
 80016ba:	f8d7 3440 	ldr.w	r3, [r7, #1088]	@ 0x440
 80016be:	fb03 f202 	mul.w	r2, r3, r2
 80016c2:	f8d7 3434 	ldr.w	r3, [r7, #1076]	@ 0x434
 80016c6:	4413      	add	r3, r2
 80016c8:	4a3e      	ldr	r2, [pc, #248]	@ (80017c4 <main+0x2f8>)
 80016ca:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80016ce:	4b48      	ldr	r3, [pc, #288]	@ (80017f0 <main+0x324>)
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	f8d7 3434 	ldr.w	r3, [r7, #1076]	@ 0x434
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	4413      	add	r3, r2
 80016da:	ee07 1a90 	vmov	s15, r1
 80016de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016e2:	edc3 7a00 	vstr	s15, [r3]
        	        // Normalize from -1 to 1
        	        signal_chunk[i] = (2.0f * (signal_chunk[i] - min) / (max - min)) - 1;
 80016e6:	4b42      	ldr	r3, [pc, #264]	@ (80017f0 <main+0x324>)
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	f8d7 3434 	ldr.w	r3, [r7, #1076]	@ 0x434
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	4413      	add	r3, r2
 80016f2:	ed93 7a00 	vldr	s14, [r3]
 80016f6:	f207 434c 	addw	r3, r7, #1100	@ 0x44c
 80016fa:	edd3 7a00 	vldr	s15, [r3]
 80016fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001702:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001706:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 800170a:	ed93 7a00 	vldr	s14, [r3]
 800170e:	f207 434c 	addw	r3, r7, #1100	@ 0x44c
 8001712:	edd3 7a00 	vldr	s15, [r3]
 8001716:	ee37 7a67 	vsub.f32	s14, s14, s15
 800171a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800171e:	4b34      	ldr	r3, [pc, #208]	@ (80017f0 <main+0x324>)
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	f8d7 3434 	ldr.w	r3, [r7, #1076]	@ 0x434
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	4413      	add	r3, r2
 800172a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800172e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001732:	edc3 7a00 	vstr	s15, [r3]
        	        sum += signal_chunk[i];
 8001736:	4b2e      	ldr	r3, [pc, #184]	@ (80017f0 <main+0x324>)
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	f8d7 3434 	ldr.w	r3, [r7, #1076]	@ 0x434
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	4413      	add	r3, r2
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4618      	mov	r0, r3
 8001746:	f7fe ff7f 	bl	8000648 <__aeabi_f2d>
 800174a:	4602      	mov	r2, r0
 800174c:	460b      	mov	r3, r1
 800174e:	f507 6187 	add.w	r1, r7, #1080	@ 0x438
 8001752:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001756:	f7fe fe19 	bl	800038c <__adddf3>
 800175a:	4602      	mov	r2, r0
 800175c:	460b      	mov	r3, r1
 800175e:	f507 6187 	add.w	r1, r7, #1080	@ 0x438
 8001762:	e9c1 2300 	strd	r2, r3, [r1]
        	    for (uint32_t i = 0; i < FFT_SIZE; i++) {
 8001766:	f8d7 3434 	ldr.w	r3, [r7, #1076]	@ 0x434
 800176a:	3301      	adds	r3, #1
 800176c:	f8c7 3434 	str.w	r3, [r7, #1076]	@ 0x434
 8001770:	f8d7 3434 	ldr.w	r3, [r7, #1076]	@ 0x434
 8001774:	2bff      	cmp	r3, #255	@ 0xff
 8001776:	d99f      	bls.n	80016b8 <main+0x1ec>
        	    }

    			// Remove DC component
    			float mean = (float)(sum / (double)FFT_SIZE);
 8001778:	f04f 0200 	mov.w	r2, #0
 800177c:	4b1d      	ldr	r3, [pc, #116]	@ (80017f4 <main+0x328>)
 800177e:	f507 6187 	add.w	r1, r7, #1080	@ 0x438
 8001782:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001786:	f7ff f8e1 	bl	800094c <__aeabi_ddiv>
 800178a:	4602      	mov	r2, r0
 800178c:	460b      	mov	r3, r1
 800178e:	4610      	mov	r0, r2
 8001790:	4619      	mov	r1, r3
 8001792:	f7ff fa89 	bl	8000ca8 <__aeabi_d2f>
 8001796:	4603      	mov	r3, r0
 8001798:	f507 6283 	add.w	r2, r7, #1048	@ 0x418
 800179c:	6013      	str	r3, [r2, #0]
    			for (uint32_t i = 0; i < FFT_SIZE; i++) {
 800179e:	2300      	movs	r3, #0
 80017a0:	f8c7 3430 	str.w	r3, [r7, #1072]	@ 0x430
 80017a4:	e05c      	b.n	8001860 <main+0x394>
 80017a6:	bf00      	nop
 80017a8:	080167e8 	.word	0x080167e8
 80017ac:	080167fc 	.word	0x080167fc
 80017b0:	20019060 	.word	0x20019060
 80017b4:	40022000 	.word	0x40022000
 80017b8:	20000a0c 	.word	0x20000a0c
 80017bc:	20000a0d 	.word	0x20000a0d
 80017c0:	0801681c 	.word	0x0801681c
 80017c4:	2001124c 	.word	0x2001124c
 80017c8:	08016830 	.word	0x08016830
 80017cc:	0801683c 	.word	0x0801683c
 80017d0:	20019048 	.word	0x20019048
 80017d4:	0801685c 	.word	0x0801685c
 80017d8:	20019064 	.word	0x20019064
 80017dc:	08016870 	.word	0x08016870
 80017e0:	46fffe00 	.word	0x46fffe00
 80017e4:	08016884 	.word	0x08016884
 80017e8:	0801689c 	.word	0x0801689c
 80017ec:	080168c0 	.word	0x080168c0
 80017f0:	20000000 	.word	0x20000000
 80017f4:	40700000 	.word	0x40700000
    				signal_chunk[i] = signal_chunk[i] - mean;
 80017f8:	4b94      	ldr	r3, [pc, #592]	@ (8001a4c <main+0x580>)
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	f8d7 3430 	ldr.w	r3, [r7, #1072]	@ 0x430
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	4413      	add	r3, r2
 8001804:	ed93 7a00 	vldr	s14, [r3]
 8001808:	4b90      	ldr	r3, [pc, #576]	@ (8001a4c <main+0x580>)
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	f8d7 3430 	ldr.w	r3, [r7, #1072]	@ 0x430
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	4413      	add	r3, r2
 8001814:	f507 6283 	add.w	r2, r7, #1048	@ 0x418
 8001818:	edd2 7a00 	vldr	s15, [r2]
 800181c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001820:	edc3 7a00 	vstr	s15, [r3]

    				// Apply window function
    				signal_chunk[i] *= hanning[i];
 8001824:	4b89      	ldr	r3, [pc, #548]	@ (8001a4c <main+0x580>)
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	f8d7 3430 	ldr.w	r3, [r7, #1072]	@ 0x430
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	4413      	add	r3, r2
 8001830:	ed93 7a00 	vldr	s14, [r3]
 8001834:	4a86      	ldr	r2, [pc, #536]	@ (8001a50 <main+0x584>)
 8001836:	f8d7 3430 	ldr.w	r3, [r7, #1072]	@ 0x430
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	4413      	add	r3, r2
 800183e:	edd3 7a00 	vldr	s15, [r3]
 8001842:	4b82      	ldr	r3, [pc, #520]	@ (8001a4c <main+0x580>)
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	f8d7 3430 	ldr.w	r3, [r7, #1072]	@ 0x430
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	4413      	add	r3, r2
 800184e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001852:	edc3 7a00 	vstr	s15, [r3]
    			for (uint32_t i = 0; i < FFT_SIZE; i++) {
 8001856:	f8d7 3430 	ldr.w	r3, [r7, #1072]	@ 0x430
 800185a:	3301      	adds	r3, #1
 800185c:	f8c7 3430 	str.w	r3, [r7, #1072]	@ 0x430
 8001860:	f8d7 3430 	ldr.w	r3, [r7, #1072]	@ 0x430
 8001864:	2bff      	cmp	r3, #255	@ 0xff
 8001866:	d9c7      	bls.n	80017f8 <main+0x32c>
    			}

    			// Compute FFT
    			arm_rfft_fast_f32(&fft, signal_chunk, dst, 0);
 8001868:	4b78      	ldr	r3, [pc, #480]	@ (8001a4c <main+0x580>)
 800186a:	6819      	ldr	r1, [r3, #0]
 800186c:	f107 020c 	add.w	r2, r7, #12
 8001870:	2300      	movs	r3, #0
 8001872:	4878      	ldr	r0, [pc, #480]	@ (8001a54 <main+0x588>)
 8001874:	f00d fbf2 	bl	800f05c <arm_rfft_fast_f32>

    			// The first "complex" is actually to reals, X[0] and X[N/2]
				float first_real = (dst[0] < 0.0f) ? (-1.0f * dst[0]) : dst[0];
 8001878:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 800187c:	f2a3 4344 	subw	r3, r3, #1092	@ 0x444
 8001880:	edd3 7a00 	vldr	s15, [r3]
 8001884:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800188c:	d508      	bpl.n	80018a0 <main+0x3d4>
 800188e:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8001892:	f2a3 4344 	subw	r3, r3, #1092	@ 0x444
 8001896:	edd3 7a00 	vldr	s15, [r3]
 800189a:	eef1 7a67 	vneg.f32	s15, s15
 800189e:	e005      	b.n	80018ac <main+0x3e0>
 80018a0:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 80018a4:	f2a3 4344 	subw	r3, r3, #1092	@ 0x444
 80018a8:	edd3 7a00 	vldr	s15, [r3]
 80018ac:	f207 4314 	addw	r3, r7, #1044	@ 0x414
 80018b0:	edc3 7a00 	vstr	s15, [r3]
				float second_real = (dst[1] < 0.0f) ? (-1.0f * dst[1]) : dst[1];
 80018b4:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 80018b8:	f2a3 4344 	subw	r3, r3, #1092	@ 0x444
 80018bc:	edd3 7a01 	vldr	s15, [r3, #4]
 80018c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018c8:	d508      	bpl.n	80018dc <main+0x410>
 80018ca:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 80018ce:	f2a3 4344 	subw	r3, r3, #1092	@ 0x444
 80018d2:	edd3 7a01 	vldr	s15, [r3, #4]
 80018d6:	eef1 7a67 	vneg.f32	s15, s15
 80018da:	e005      	b.n	80018e8 <main+0x41c>
 80018dc:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 80018e0:	f2a3 4344 	subw	r3, r3, #1092	@ 0x444
 80018e4:	edd3 7a01 	vldr	s15, [r3, #4]
 80018e8:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 80018ec:	edc3 7a00 	vstr	s15, [r3]

				// Take the magnitude for all the complex values in between
				arm_cmplx_mag_f32(dst + 2, mag + 1, FFT_SIZE / 2);
 80018f0:	f107 030c 	add.w	r3, r7, #12
 80018f4:	3308      	adds	r3, #8
 80018f6:	4958      	ldr	r1, [pc, #352]	@ (8001a58 <main+0x58c>)
 80018f8:	2280      	movs	r2, #128	@ 0x80
 80018fa:	4618      	mov	r0, r3
 80018fc:	f00e f812 	bl	800f924 <arm_cmplx_mag_f32>

				// Fill in the two real numbers at 0 and N/2
				mag[0] = first_real;
 8001900:	4a56      	ldr	r2, [pc, #344]	@ (8001a5c <main+0x590>)
 8001902:	f207 4314 	addw	r3, r7, #1044	@ 0x414
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	6013      	str	r3, [r2, #0]
				mag[128] = second_real;
 800190a:	4a54      	ldr	r2, [pc, #336]	@ (8001a5c <main+0x590>)
 800190c:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

				for (uint32_t i = 0; i < 129; i++) {
 8001916:	2300      	movs	r3, #0
 8001918:	f8c7 342c 	str.w	r3, [r7, #1068]	@ 0x42c
 800191c:	e03c      	b.n	8001998 <main+0x4cc>
					// We can't override waveform[129 * idx + 128] yet
					// because we need it for the next iteration, so we need to store
					// it separately
					if (i < 128) {
 800191e:	f8d7 342c 	ldr.w	r3, [r7, #1068]	@ 0x42c
 8001922:	2b7f      	cmp	r3, #127	@ 0x7f
 8001924:	d81c      	bhi.n	8001960 <main+0x494>
						((uint16_t*)waveform)[128 * idx + i] = (uint8_t)(mag[i] * 8.0f);
 8001926:	4a4d      	ldr	r2, [pc, #308]	@ (8001a5c <main+0x590>)
 8001928:	f8d7 342c 	ldr.w	r3, [r7, #1068]	@ 0x42c
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	4413      	add	r3, r2
 8001930:	edd3 7a00 	vldr	s15, [r3]
 8001934:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 8001938:	ee67 7a87 	vmul.f32	s15, s15, s14
 800193c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001940:	edc7 7a01 	vstr	s15, [r7, #4]
 8001944:	793b      	ldrb	r3, [r7, #4]
 8001946:	b2d9      	uxtb	r1, r3
 8001948:	f8d7 3440 	ldr.w	r3, [r7, #1088]	@ 0x440
 800194c:	01da      	lsls	r2, r3, #7
 800194e:	f8d7 342c 	ldr.w	r3, [r7, #1068]	@ 0x42c
 8001952:	4413      	add	r3, r2
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	4a42      	ldr	r2, [pc, #264]	@ (8001a60 <main+0x594>)
 8001958:	4413      	add	r3, r2
 800195a:	460a      	mov	r2, r1
 800195c:	801a      	strh	r2, [r3, #0]
 800195e:	e016      	b.n	800198e <main+0x4c2>
					}
					else {
						last_ffts[idx] = (uint8_t)(mag[i] * 8.0f);
 8001960:	4a3e      	ldr	r2, [pc, #248]	@ (8001a5c <main+0x590>)
 8001962:	f8d7 342c 	ldr.w	r3, [r7, #1068]	@ 0x42c
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	4413      	add	r3, r2
 800196a:	edd3 7a00 	vldr	s15, [r3]
 800196e:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 8001972:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001976:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800197a:	edc7 7a01 	vstr	s15, [r7, #4]
 800197e:	793b      	ldrb	r3, [r7, #4]
 8001980:	b2db      	uxtb	r3, r3
 8001982:	4619      	mov	r1, r3
 8001984:	4a37      	ldr	r2, [pc, #220]	@ (8001a64 <main+0x598>)
 8001986:	f8d7 3440 	ldr.w	r3, [r7, #1088]	@ 0x440
 800198a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				for (uint32_t i = 0; i < 129; i++) {
 800198e:	f8d7 342c 	ldr.w	r3, [r7, #1068]	@ 0x42c
 8001992:	3301      	adds	r3, #1
 8001994:	f8c7 342c 	str.w	r3, [r7, #1068]	@ 0x42c
 8001998:	f8d7 342c 	ldr.w	r3, [r7, #1068]	@ 0x42c
 800199c:	2b80      	cmp	r3, #128	@ 0x80
 800199e:	d9be      	bls.n	800191e <main+0x452>
        	for (uint32_t idx = 0; idx < 124; idx++) {
 80019a0:	f8d7 3440 	ldr.w	r3, [r7, #1088]	@ 0x440
 80019a4:	3301      	adds	r3, #1
 80019a6:	f8c7 3440 	str.w	r3, [r7, #1088]	@ 0x440
 80019aa:	f8d7 3440 	ldr.w	r3, [r7, #1088]	@ 0x440
 80019ae:	2b7b      	cmp	r3, #123	@ 0x7b
 80019b0:	f67f ae76 	bls.w	80016a0 <main+0x1d4>
					}
				}
			}

			// Spectrogram formatting
			uint8_t* input_tensor = waveform;
 80019b4:	4b2a      	ldr	r3, [pc, #168]	@ (8001a60 <main+0x594>)
 80019b6:	f8c7 3420 	str.w	r3, [r7, #1056]	@ 0x420
			uint32_t input_tensor_len = 124 * 129;
 80019ba:	f643 637c 	movw	r3, #15996	@ 0x3e7c
 80019be:	f8c7 341c 	str.w	r3, [r7, #1052]	@ 0x41c

			for (uint32_t idx = 123; idx > 0; idx--){
 80019c2:	237b      	movs	r3, #123	@ 0x7b
 80019c4:	f8c7 3428 	str.w	r3, [r7, #1064]	@ 0x428
 80019c8:	e035      	b.n	8001a36 <main+0x56a>
			    uint8_t tmp[128];
			    memcpy(tmp, waveform + (idx * 128), 128);
 80019ca:	f8d7 3428 	ldr.w	r3, [r7, #1064]	@ 0x428
 80019ce:	021b      	lsls	r3, r3, #8
 80019d0:	4a23      	ldr	r2, [pc, #140]	@ (8001a60 <main+0x594>)
 80019d2:	441a      	add	r2, r3
 80019d4:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 80019d8:	f2a3 4344 	subw	r3, r3, #1092	@ 0x444
 80019dc:	4618      	mov	r0, r3
 80019de:	4611      	mov	r1, r2
 80019e0:	2380      	movs	r3, #128	@ 0x80
 80019e2:	461a      	mov	r2, r3
 80019e4:	f012 fc31 	bl	801424a <memcpy>
			    memcpy(waveform + (idx * 128 + idx), tmp, 128);
 80019e8:	f8d7 2428 	ldr.w	r2, [r7, #1064]	@ 0x428
 80019ec:	4613      	mov	r3, r2
 80019ee:	01db      	lsls	r3, r3, #7
 80019f0:	4413      	add	r3, r2
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	461a      	mov	r2, r3
 80019f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001a60 <main+0x594>)
 80019f8:	441a      	add	r2, r3
 80019fa:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 80019fe:	f2a3 4344 	subw	r3, r3, #1092	@ 0x444
 8001a02:	4610      	mov	r0, r2
 8001a04:	4619      	mov	r1, r3
 8001a06:	2380      	movs	r3, #128	@ 0x80
 8001a08:	461a      	mov	r2, r3
 8001a0a:	f012 fc1e 	bl	801424a <memcpy>
			    waveform[idx * 128 + (idx - 1)] = last_ffts[idx - 1];
 8001a0e:	f8d7 3428 	ldr.w	r3, [r7, #1064]	@ 0x428
 8001a12:	1e59      	subs	r1, r3, #1
 8001a14:	f8d7 2428 	ldr.w	r2, [r7, #1064]	@ 0x428
 8001a18:	4613      	mov	r3, r2
 8001a1a:	01db      	lsls	r3, r3, #7
 8001a1c:	4413      	add	r3, r2
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	4a10      	ldr	r2, [pc, #64]	@ (8001a64 <main+0x598>)
 8001a22:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8001a26:	4a0e      	ldr	r2, [pc, #56]	@ (8001a60 <main+0x594>)
 8001a28:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for (uint32_t idx = 123; idx > 0; idx--){
 8001a2c:	f8d7 3428 	ldr.w	r3, [r7, #1064]	@ 0x428
 8001a30:	3b01      	subs	r3, #1
 8001a32:	f8c7 3428 	str.w	r3, [r7, #1064]	@ 0x428
 8001a36:	f8d7 3428 	ldr.w	r3, [r7, #1064]	@ 0x428
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d1c5      	bne.n	80019ca <main+0x4fe>

//			for (uint32_t i = 0; i < input_tensor_len; i++){
//				printf("%u\r\n", input_tensor[i]);
//			}

			printf("Conversion, bias removal and hanning application OK\r\n");
 8001a3e:	480a      	ldr	r0, [pc, #40]	@ (8001a68 <main+0x59c>)
 8001a40:	f012 fa94 	bl	8013f6c <puts>
//
//			uint32_t class = argmax(aiOutData, AI_NETWORK_OUT_1_SIZE);
//			printf("Detected Word: %s (Confidence: %8.6f)\r\n", activities[class], aiOutData[class]);
        }

        HAL_Delay(100);  // Small delay for stability
 8001a44:	2064      	movs	r0, #100	@ 0x64
 8001a46:	f002 ff75 	bl	8004934 <HAL_Delay>
    {
 8001a4a:	e563      	b.n	8001514 <main+0x48>
 8001a4c:	20000000 	.word	0x20000000
 8001a50:	20019064 	.word	0x20019064
 8001a54:	20019048 	.word	0x20019048
 8001a58:	20019468 	.word	0x20019468
 8001a5c:	20019464 	.word	0x20019464
 8001a60:	2001124c 	.word	0x2001124c
 8001a64:	20018f4c 	.word	0x20018f4c
 8001a68:	080168f4 	.word	0x080168f4

08001a6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b094      	sub	sp, #80	@ 0x50
 8001a70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a72:	f107 0320 	add.w	r3, r7, #32
 8001a76:	2230      	movs	r2, #48	@ 0x30
 8001a78:	2100      	movs	r1, #0
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f012 fb56 	bl	801412c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a80:	f107 030c 	add.w	r3, r7, #12
 8001a84:	2200      	movs	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]
 8001a88:	605a      	str	r2, [r3, #4]
 8001a8a:	609a      	str	r2, [r3, #8]
 8001a8c:	60da      	str	r2, [r3, #12]
 8001a8e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a90:	4b2a      	ldr	r3, [pc, #168]	@ (8001b3c <SystemClock_Config+0xd0>)
 8001a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a94:	4a29      	ldr	r2, [pc, #164]	@ (8001b3c <SystemClock_Config+0xd0>)
 8001a96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a9a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a9c:	4b27      	ldr	r3, [pc, #156]	@ (8001b3c <SystemClock_Config+0xd0>)
 8001a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aa4:	60bb      	str	r3, [r7, #8]
 8001aa6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001aa8:	4b25      	ldr	r3, [pc, #148]	@ (8001b40 <SystemClock_Config+0xd4>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a24      	ldr	r2, [pc, #144]	@ (8001b40 <SystemClock_Config+0xd4>)
 8001aae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001ab2:	6013      	str	r3, [r2, #0]
 8001ab4:	4b22      	ldr	r3, [pc, #136]	@ (8001b40 <SystemClock_Config+0xd4>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001abc:	607b      	str	r3, [r7, #4]
 8001abe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ac8:	2310      	movs	r3, #16
 8001aca:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001acc:	2302      	movs	r3, #2
 8001ace:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001ad4:	2308      	movs	r3, #8
 8001ad6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 200;
 8001ad8:	23c8      	movs	r3, #200	@ 0xc8
 8001ada:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001adc:	2302      	movs	r3, #2
 8001ade:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001ae0:	2308      	movs	r3, #8
 8001ae2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ae4:	f107 0320 	add.w	r3, r7, #32
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f004 ff09 	bl	8006900 <HAL_RCC_OscConfig>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001af4:	f000 f98e 	bl	8001e14 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001af8:	f004 feb2 	bl	8006860 <HAL_PWREx_EnableOverDrive>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001b02:	f000 f987 	bl	8001e14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b06:	230f      	movs	r3, #15
 8001b08:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b12:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001b16:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b18:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b1c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001b1e:	f107 030c 	add.w	r3, r7, #12
 8001b22:	2106      	movs	r1, #6
 8001b24:	4618      	mov	r0, r3
 8001b26:	f005 f98f 	bl	8006e48 <HAL_RCC_ClockConfig>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001b30:	f000 f970 	bl	8001e14 <Error_Handler>
  }
}
 8001b34:	bf00      	nop
 8001b36:	3750      	adds	r7, #80	@ 0x50
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	40023800 	.word	0x40023800
 8001b40:	40007000 	.word	0x40007000

08001b44 <__io_putchar>:

/* USER CODE BEGIN 4 */

/* Needed to send messages easier to terminal for debugging */
PUTCHAR_PROTOTYPE
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
/* Place your implementation of fputc here */
/* e.g. write a character to the USART2 and Loop until the end
of transmission */
HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 100);
 8001b4c:	1d39      	adds	r1, r7, #4
 8001b4e:	2364      	movs	r3, #100	@ 0x64
 8001b50:	2201      	movs	r2, #1
 8001b52:	4804      	ldr	r0, [pc, #16]	@ (8001b64 <__io_putchar+0x20>)
 8001b54:	f007 feb2 	bl	80098bc <HAL_UART_Transmit>
return ch;
 8001b58:	687b      	ldr	r3, [r7, #4]
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	20019a98 	.word	0x20019a98

08001b68 <HAL_GPIO_EXTI_Callback>:
/* ======================================================== */


/* User button interruption and variable change */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	4603      	mov	r3, r0
 8001b70:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);

  if (GPIO_Pin == USR_BTN_Pin && button_pressed == 0)
 8001b72:	88fb      	ldrh	r3, [r7, #6]
 8001b74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001b78:	d10a      	bne.n	8001b90 <HAL_GPIO_EXTI_Callback+0x28>
 8001b7a:	4b07      	ldr	r3, [pc, #28]	@ (8001b98 <HAL_GPIO_EXTI_Callback+0x30>)
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d105      	bne.n	8001b90 <HAL_GPIO_EXTI_Callback+0x28>
      {
	  	  button_pressed = 1;
 8001b84:	4b04      	ldr	r3, [pc, #16]	@ (8001b98 <HAL_GPIO_EXTI_Callback+0x30>)
 8001b86:	2201      	movs	r2, #1
 8001b88:	701a      	strb	r2, [r3, #0]
	  	  printf("Button pressed...\r\n");
 8001b8a:	4804      	ldr	r0, [pc, #16]	@ (8001b9c <HAL_GPIO_EXTI_Callback+0x34>)
 8001b8c:	f012 f9ee 	bl	8013f6c <puts>
      }
}
 8001b90:	bf00      	nop
 8001b92:	3708      	adds	r7, #8
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	20019060 	.word	0x20019060
 8001b9c:	0801692c 	.word	0x0801692c

08001ba0 <check_button_release>:
/* ======================================================== */


/* Used to verify the state of the button */
void check_button_release()
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
    if (HAL_GPIO_ReadPin(GPIOI, USR_BTN_Pin) == GPIO_PIN_RESET) button_pressed = 0;
 8001ba4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001ba8:	4805      	ldr	r0, [pc, #20]	@ (8001bc0 <check_button_release+0x20>)
 8001baa:	f004 f817 	bl	8005bdc <HAL_GPIO_ReadPin>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d102      	bne.n	8001bba <check_button_release+0x1a>
 8001bb4:	4b03      	ldr	r3, [pc, #12]	@ (8001bc4 <check_button_release+0x24>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	701a      	strb	r2, [r3, #0]
}
 8001bba:	bf00      	nop
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	40022000 	.word	0x40022000
 8001bc4:	20019060 	.word	0x20019060

08001bc8 <SDCard_InitAndFormat>:
/* ======================================================== */


/* Used to initialize the SD card */
void SDCard_InitAndFormat(void) {
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af02      	add	r7, sp, #8
    FRESULT res;

    // Mount the file system
    res = f_mount(&SDFatFS, (TCHAR const *)SDPath, 0);
 8001bce:	2200      	movs	r2, #0
 8001bd0:	491e      	ldr	r1, [pc, #120]	@ (8001c4c <SDCard_InitAndFormat+0x84>)
 8001bd2:	481f      	ldr	r0, [pc, #124]	@ (8001c50 <SDCard_InitAndFormat+0x88>)
 8001bd4:	f00b fb56 	bl	800d284 <f_mount>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	71fb      	strb	r3, [r7, #7]
    if (res != FR_OK) {
 8001bdc:	79fb      	ldrb	r3, [r7, #7]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d006      	beq.n	8001bf0 <SDCard_InitAndFormat+0x28>
        printf("Error: Failed to mount SD card (Code: %d).\r\n", res);
 8001be2:	79fb      	ldrb	r3, [r7, #7]
 8001be4:	4619      	mov	r1, r3
 8001be6:	481b      	ldr	r0, [pc, #108]	@ (8001c54 <SDCard_InitAndFormat+0x8c>)
 8001be8:	f012 f958 	bl	8013e9c <iprintf>
        Error_Handler();
 8001bec:	f000 f912 	bl	8001e14 <Error_Handler>
    }

    // Format the SD card
    res = f_mkfs((TCHAR const *)SDPath, FM_ANY, 0, workBuffer_init, sizeof(workBuffer_init));
 8001bf0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001bf4:	9300      	str	r3, [sp, #0]
 8001bf6:	4b18      	ldr	r3, [pc, #96]	@ (8001c58 <SDCard_InitAndFormat+0x90>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	2107      	movs	r1, #7
 8001bfc:	4813      	ldr	r0, [pc, #76]	@ (8001c4c <SDCard_InitAndFormat+0x84>)
 8001bfe:	f00c faa7 	bl	800e150 <f_mkfs>
 8001c02:	4603      	mov	r3, r0
 8001c04:	71fb      	strb	r3, [r7, #7]
    if (res != FR_OK) {
 8001c06:	79fb      	ldrb	r3, [r7, #7]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d006      	beq.n	8001c1a <SDCard_InitAndFormat+0x52>
        printf("Error: Failed to format SD card (Code: %d).\r\n", res);
 8001c0c:	79fb      	ldrb	r3, [r7, #7]
 8001c0e:	4619      	mov	r1, r3
 8001c10:	4812      	ldr	r0, [pc, #72]	@ (8001c5c <SDCard_InitAndFormat+0x94>)
 8001c12:	f012 f943 	bl	8013e9c <iprintf>
        Error_Handler();
 8001c16:	f000 f8fd 	bl	8001e14 <Error_Handler>
    }

    // Unmount the file system to complete formatting
    res = f_mount(NULL, (TCHAR const *)SDPath, 0);
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	490b      	ldr	r1, [pc, #44]	@ (8001c4c <SDCard_InitAndFormat+0x84>)
 8001c1e:	2000      	movs	r0, #0
 8001c20:	f00b fb30 	bl	800d284 <f_mount>
 8001c24:	4603      	mov	r3, r0
 8001c26:	71fb      	strb	r3, [r7, #7]
    if (res != FR_OK) {
 8001c28:	79fb      	ldrb	r3, [r7, #7]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d006      	beq.n	8001c3c <SDCard_InitAndFormat+0x74>
        printf("Error: Failed to unmount SD card after formatting (Code: %d).\r\n", res);
 8001c2e:	79fb      	ldrb	r3, [r7, #7]
 8001c30:	4619      	mov	r1, r3
 8001c32:	480b      	ldr	r0, [pc, #44]	@ (8001c60 <SDCard_InitAndFormat+0x98>)
 8001c34:	f012 f932 	bl	8013e9c <iprintf>
        Error_Handler();
 8001c38:	f000 f8ec 	bl	8001e14 <Error_Handler>
    }

    printf("SD card initialized and formatted successfully.\r\n");
 8001c3c:	4809      	ldr	r0, [pc, #36]	@ (8001c64 <SDCard_InitAndFormat+0x9c>)
 8001c3e:	f012 f995 	bl	8013f6c <puts>
}
 8001c42:	bf00      	nop
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	2001e7e8 	.word	0x2001e7e8
 8001c50:	2001e7ec 	.word	0x2001e7ec
 8001c54:	08016940 	.word	0x08016940
 8001c58:	20000a10 	.word	0x20000a10
 8001c5c:	08016970 	.word	0x08016970
 8001c60:	080169a0 	.word	0x080169a0
 8001c64:	080169e0 	.word	0x080169e0

08001c68 <read_wav_file>:
    // Close the file
    f_close(&file);
}
/* ======================================================== */

int read_wav_file(const char *filename, int16_t *buffer) {
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	f5ad 7d10 	sub.w	sp, sp, #576	@ 0x240
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001c74:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8001c78:	6018      	str	r0, [r3, #0]
 8001c7a:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001c7e:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8001c82:	6019      	str	r1, [r3, #0]
    FIL file;
    UINT bytes_read;
    FRESULT result = f_open(&file, filename, FA_READ);
 8001c84:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001c88:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8001c8c:	f107 000c 	add.w	r0, r7, #12
 8001c90:	2201      	movs	r2, #1
 8001c92:	6819      	ldr	r1, [r3, #0]
 8001c94:	f00b fb3c 	bl	800d310 <f_open>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	f887 323f 	strb.w	r3, [r7, #575]	@ 0x23f

    if (result != FR_OK) {
 8001c9e:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d002      	beq.n	8001cac <read_wav_file+0x44>
        return -1;  // File open error
 8001ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8001caa:	e02a      	b.n	8001d02 <read_wav_file+0x9a>
    }

    // Skip WAV header (44 bytes)
    f_lseek(&file, 44);
 8001cac:	f107 030c 	add.w	r3, r7, #12
 8001cb0:	212c      	movs	r1, #44	@ 0x2c
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f00c f842 	bl	800dd3c <f_lseek>

    // Read audio samples into the buffer
    result = f_read(&file, buffer, BUFFER_SIZE * sizeof(int16_t), &bytes_read);
 8001cb8:	f107 0308 	add.w	r3, r7, #8
 8001cbc:	f507 7210 	add.w	r2, r7, #576	@ 0x240
 8001cc0:	f5a2 7110 	sub.w	r1, r2, #576	@ 0x240
 8001cc4:	f107 000c 	add.w	r0, r7, #12
 8001cc8:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001ccc:	6809      	ldr	r1, [r1, #0]
 8001cce:	f00b fcd9 	bl	800d684 <f_read>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	f887 323f 	strb.w	r3, [r7, #575]	@ 0x23f

    if (result != FR_OK) {
 8001cd8:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d007      	beq.n	8001cf0 <read_wav_file+0x88>
        f_close(&file);
 8001ce0:	f107 030c 	add.w	r3, r7, #12
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f00b ffff 	bl	800dce8 <f_close>
        return -1;  // Read error
 8001cea:	f04f 33ff 	mov.w	r3, #4294967295
 8001cee:	e008      	b.n	8001d02 <read_wav_file+0x9a>
    }

    f_close(&file);
 8001cf0:	f107 030c 	add.w	r3, r7, #12
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f00b fff7 	bl	800dce8 <f_close>
    printf("file successfully read! \r\n");
 8001cfa:	4804      	ldr	r0, [pc, #16]	@ (8001d0c <read_wav_file+0xa4>)
 8001cfc:	f012 f936 	bl	8013f6c <puts>
    return 0;  // Success
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	f507 7710 	add.w	r7, r7, #576	@ 0x240
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	08016b84 	.word	0x08016b84

08001d10 <arm_hanning_f32>:


void arm_hanning_f32(float32_t * pDst, uint32_t blockSize) {
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b086      	sub	sp, #24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	6039      	str	r1, [r7, #0]
   float32_t k = 2.0f / ((float32_t) blockSize);
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	ee07 3a90 	vmov	s15, r3
 8001d20:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d24:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001d28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d2c:	edc7 7a04 	vstr	s15, [r7, #16]
   float32_t w;

   for(uint32_t i=0;i<blockSize;i++)
 8001d30:	2300      	movs	r3, #0
 8001d32:	617b      	str	r3, [r7, #20]
 8001d34:	e027      	b.n	8001d86 <arm_hanning_f32+0x76>
   {
     w = PI * i * k;
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	ee07 3a90 	vmov	s15, r3
 8001d3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d40:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8001d98 <arm_hanning_f32+0x88>
 8001d44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d48:	ed97 7a04 	vldr	s14, [r7, #16]
 8001d4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d50:	edc7 7a03 	vstr	s15, [r7, #12]
     w = 0.5f * (1.0f - cosf (w));
 8001d54:	ed97 0a03 	vldr	s0, [r7, #12]
 8001d58:	f013 ffde 	bl	8015d18 <cosf>
 8001d5c:	eef0 7a40 	vmov.f32	s15, s0
 8001d60:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001d64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d68:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001d6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d70:	edc7 7a03 	vstr	s15, [r7, #12]
     pDst[i] = w;
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	68fa      	ldr	r2, [r7, #12]
 8001d7e:	601a      	str	r2, [r3, #0]
   for(uint32_t i=0;i<blockSize;i++)
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	3301      	adds	r3, #1
 8001d84:	617b      	str	r3, [r7, #20]
 8001d86:	697a      	ldr	r2, [r7, #20]
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d3d3      	bcc.n	8001d36 <arm_hanning_f32+0x26>
   }
}
 8001d8e:	bf00      	nop
 8001d90:	bf00      	nop
 8001d92:	3718      	adds	r7, #24
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40490fdb 	.word	0x40490fdb

08001d9c <AI_Init>:

static void AI_Init(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
  ai_error err;

  /* Create a local array with the addresses of the activations buffers */
  const ai_handle act_addr[] = { activations };
 8001da2:	4b17      	ldr	r3, [pc, #92]	@ (8001e00 <AI_Init+0x64>)
 8001da4:	603b      	str	r3, [r7, #0]
  /* Create an instance of the model */
  err = ai_network_create_and_init(&network, act_addr, NULL);
 8001da6:	463b      	mov	r3, r7
 8001da8:	2200      	movs	r2, #0
 8001daa:	4619      	mov	r1, r3
 8001dac:	4815      	ldr	r0, [pc, #84]	@ (8001e04 <AI_Init+0x68>)
 8001dae:	f00c ff8b 	bl	800ecc8 <ai_network_create_and_init>
 8001db2:	4603      	mov	r3, r0
 8001db4:	607b      	str	r3, [r7, #4]
  if (err.type != AI_ERROR_NONE) {
 8001db6:	793b      	ldrb	r3, [r7, #4]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d00a      	beq.n	8001dd2 <AI_Init+0x36>
    printf("ai_network_create error - type=%d code=%d\r\n", err.type, err.code);
 8001dbc:	793b      	ldrb	r3, [r7, #4]
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	480f      	ldr	r0, [pc, #60]	@ (8001e08 <AI_Init+0x6c>)
 8001dca:	f012 f867 	bl	8013e9c <iprintf>
    Error_Handler();
 8001dce:	f000 f821 	bl	8001e14 <Error_Handler>
  }
  ai_input = ai_network_inputs_get(network, NULL);
 8001dd2:	4b0c      	ldr	r3, [pc, #48]	@ (8001e04 <AI_Init+0x68>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	2100      	movs	r1, #0
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f00c fff3 	bl	800edc4 <ai_network_inputs_get>
 8001dde:	4603      	mov	r3, r0
 8001de0:	4a0a      	ldr	r2, [pc, #40]	@ (8001e0c <AI_Init+0x70>)
 8001de2:	6013      	str	r3, [r2, #0]
  ai_output = ai_network_outputs_get(network, NULL);
 8001de4:	4b07      	ldr	r3, [pc, #28]	@ (8001e04 <AI_Init+0x68>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2100      	movs	r1, #0
 8001dea:	4618      	mov	r0, r3
 8001dec:	f00d f804 	bl	800edf8 <ai_network_outputs_get>
 8001df0:	4603      	mov	r3, r0
 8001df2:	4a07      	ldr	r2, [pc, #28]	@ (8001e10 <AI_Init+0x74>)
 8001df4:	6013      	str	r3, [r2, #0]
}
 8001df6:	bf00      	nop
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	20000c14 	.word	0x20000c14
 8001e04:	20000c10 	.word	0x20000c10
 8001e08:	08016ba0 	.word	0x08016ba0
 8001e0c:	20011244 	.word	0x20011244
 8001e10:	20011248 	.word	0x20011248

08001e14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001e18:	b672      	cpsid	i
}
 8001e1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e1c:	bf00      	nop
 8001e1e:	e7fd      	b.n	8001e1c <Error_Handler+0x8>

08001e20 <MX_SAI1_Init>:
SAI_HandleTypeDef hsai_BlockA1;
DMA_HandleTypeDef hdma_sai1_a;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 8001e24:	4b27      	ldr	r3, [pc, #156]	@ (8001ec4 <MX_SAI1_Init+0xa4>)
 8001e26:	4a28      	ldr	r2, [pc, #160]	@ (8001ec8 <MX_SAI1_Init+0xa8>)
 8001e28:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8001e2a:	4b26      	ldr	r3, [pc, #152]	@ (8001ec4 <MX_SAI1_Init+0xa4>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_RX;
 8001e30:	4b24      	ldr	r3, [pc, #144]	@ (8001ec4 <MX_SAI1_Init+0xa4>)
 8001e32:	2201      	movs	r2, #1
 8001e34:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_16;
 8001e36:	4b23      	ldr	r3, [pc, #140]	@ (8001ec4 <MX_SAI1_Init+0xa4>)
 8001e38:	2280      	movs	r2, #128	@ 0x80
 8001e3a:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001e3c:	4b21      	ldr	r3, [pc, #132]	@ (8001ec4 <MX_SAI1_Init+0xa4>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001e42:	4b20      	ldr	r3, [pc, #128]	@ (8001ec4 <MX_SAI1_Init+0xa4>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8001e48:	4b1e      	ldr	r3, [pc, #120]	@ (8001ec4 <MX_SAI1_Init+0xa4>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001e4e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ec4 <MX_SAI1_Init+0xa4>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001e54:	4b1b      	ldr	r3, [pc, #108]	@ (8001ec4 <MX_SAI1_Init+0xa4>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001e5a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ec4 <MX_SAI1_Init+0xa4>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_16K;
 8001e60:	4b18      	ldr	r3, [pc, #96]	@ (8001ec4 <MX_SAI1_Init+0xa4>)
 8001e62:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8001e66:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001e68:	4b16      	ldr	r3, [pc, #88]	@ (8001ec4 <MX_SAI1_Init+0xa4>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001e6e:	4b15      	ldr	r3, [pc, #84]	@ (8001ec4 <MX_SAI1_Init+0xa4>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001e74:	4b13      	ldr	r3, [pc, #76]	@ (8001ec4 <MX_SAI1_Init+0xa4>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA1.FrameInit.FrameLength = 16;
 8001e7a:	4b12      	ldr	r3, [pc, #72]	@ (8001ec4 <MX_SAI1_Init+0xa4>)
 8001e7c:	2210      	movs	r2, #16
 8001e7e:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8001e80:	4b10      	ldr	r3, [pc, #64]	@ (8001ec4 <MX_SAI1_Init+0xa4>)
 8001e82:	2201      	movs	r2, #1
 8001e84:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001e86:	4b0f      	ldr	r3, [pc, #60]	@ (8001ec4 <MX_SAI1_Init+0xa4>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001e8c:	4b0d      	ldr	r3, [pc, #52]	@ (8001ec4 <MX_SAI1_Init+0xa4>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001e92:	4b0c      	ldr	r3, [pc, #48]	@ (8001ec4 <MX_SAI1_Init+0xa4>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8001e98:	4b0a      	ldr	r3, [pc, #40]	@ (8001ec4 <MX_SAI1_Init+0xa4>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001e9e:	4b09      	ldr	r3, [pc, #36]	@ (8001ec4 <MX_SAI1_Init+0xa4>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8001ea4:	4b07      	ldr	r3, [pc, #28]	@ (8001ec4 <MX_SAI1_Init+0xa4>)
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8001eaa:	4b06      	ldr	r3, [pc, #24]	@ (8001ec4 <MX_SAI1_Init+0xa4>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8001eb0:	4804      	ldr	r0, [pc, #16]	@ (8001ec4 <MX_SAI1_Init+0xa4>)
 8001eb2:	f005 ffeb 	bl	8007e8c <HAL_SAI_Init>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d001      	beq.n	8001ec0 <MX_SAI1_Init+0xa0>
  {
    Error_Handler();
 8001ebc:	f7ff ffaa 	bl	8001e14 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8001ec0:	bf00      	nop
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	20019868 	.word	0x20019868
 8001ec8:	40015804 	.word	0x40015804

08001ecc <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b0aa      	sub	sp, #168	@ 0xa8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ed4:	f107 0310 	add.w	r3, r7, #16
 8001ed8:	2284      	movs	r2, #132	@ 0x84
 8001eda:	2100      	movs	r1, #0
 8001edc:	4618      	mov	r0, r3
 8001ede:	f012 f925 	bl	801412c <memset>
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a41      	ldr	r2, [pc, #260]	@ (8001fec <HAL_SAI_MspInit+0x120>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d17b      	bne.n	8001fe4 <HAL_SAI_MspInit+0x118>
    {
    /* SAI1 clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8001eec:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8001ef0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8001ef2:	2332      	movs	r3, #50	@ 0x32
 8001ef4:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001efa:	2302      	movs	r3, #2
 8001efc:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8001efe:	2300      	movs	r3, #0
 8001f00:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001f02:	2301      	movs	r3, #1
 8001f04:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001f06:	2300      	movs	r3, #0
 8001f08:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f0e:	f107 0310 	add.w	r3, r7, #16
 8001f12:	4618      	mov	r0, r3
 8001f14:	f005 f97e 	bl	8007214 <HAL_RCCEx_PeriphCLKConfig>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <HAL_SAI_MspInit+0x56>
    {
      Error_Handler();
 8001f1e:	f7ff ff79 	bl	8001e14 <Error_Handler>
    }

    if (SAI1_client == 0)
 8001f22:	4b33      	ldr	r3, [pc, #204]	@ (8001ff0 <HAL_SAI_MspInit+0x124>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d10b      	bne.n	8001f42 <HAL_SAI_MspInit+0x76>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001f2a:	4b32      	ldr	r3, [pc, #200]	@ (8001ff4 <HAL_SAI_MspInit+0x128>)
 8001f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f2e:	4a31      	ldr	r2, [pc, #196]	@ (8001ff4 <HAL_SAI_MspInit+0x128>)
 8001f30:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001f34:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f36:	4b2f      	ldr	r3, [pc, #188]	@ (8001ff4 <HAL_SAI_MspInit+0x128>)
 8001f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f3e:	60fb      	str	r3, [r7, #12]
 8001f40:	68fb      	ldr	r3, [r7, #12]
    }
    SAI1_client ++;
 8001f42:	4b2b      	ldr	r3, [pc, #172]	@ (8001ff0 <HAL_SAI_MspInit+0x124>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	3301      	adds	r3, #1
 8001f48:	4a29      	ldr	r2, [pc, #164]	@ (8001ff0 <HAL_SAI_MspInit+0x124>)
 8001f4a:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001f4c:	2370      	movs	r3, #112	@ 0x70
 8001f4e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f52:	2302      	movs	r3, #2
 8001f54:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001f64:	2306      	movs	r3, #6
 8001f66:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f6a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001f6e:	4619      	mov	r1, r3
 8001f70:	4821      	ldr	r0, [pc, #132]	@ (8001ff8 <HAL_SAI_MspInit+0x12c>)
 8001f72:	f003 fb7b 	bl	800566c <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA2_Stream1;
 8001f76:	4b21      	ldr	r3, [pc, #132]	@ (8001ffc <HAL_SAI_MspInit+0x130>)
 8001f78:	4a21      	ldr	r2, [pc, #132]	@ (8002000 <HAL_SAI_MspInit+0x134>)
 8001f7a:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Channel = DMA_CHANNEL_0;
 8001f7c:	4b1f      	ldr	r3, [pc, #124]	@ (8001ffc <HAL_SAI_MspInit+0x130>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f82:	4b1e      	ldr	r3, [pc, #120]	@ (8001ffc <HAL_SAI_MspInit+0x130>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f88:	4b1c      	ldr	r3, [pc, #112]	@ (8001ffc <HAL_SAI_MspInit+0x130>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8001f8e:	4b1b      	ldr	r3, [pc, #108]	@ (8001ffc <HAL_SAI_MspInit+0x130>)
 8001f90:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f94:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001f96:	4b19      	ldr	r3, [pc, #100]	@ (8001ffc <HAL_SAI_MspInit+0x130>)
 8001f98:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001f9c:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001f9e:	4b17      	ldr	r3, [pc, #92]	@ (8001ffc <HAL_SAI_MspInit+0x130>)
 8001fa0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001fa4:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 8001fa6:	4b15      	ldr	r3, [pc, #84]	@ (8001ffc <HAL_SAI_MspInit+0x130>)
 8001fa8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001fac:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_HIGH;
 8001fae:	4b13      	ldr	r3, [pc, #76]	@ (8001ffc <HAL_SAI_MspInit+0x130>)
 8001fb0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001fb4:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fb6:	4b11      	ldr	r3, [pc, #68]	@ (8001ffc <HAL_SAI_MspInit+0x130>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8001fbc:	480f      	ldr	r0, [pc, #60]	@ (8001ffc <HAL_SAI_MspInit+0x130>)
 8001fbe:	f002 fee1 	bl	8004d84 <HAL_DMA_Init>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d001      	beq.n	8001fcc <HAL_SAI_MspInit+0x100>
    {
      Error_Handler();
 8001fc8:	f7ff ff24 	bl	8001e14 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4a0b      	ldr	r2, [pc, #44]	@ (8001ffc <HAL_SAI_MspInit+0x130>)
 8001fd0:	671a      	str	r2, [r3, #112]	@ 0x70
 8001fd2:	4a0a      	ldr	r2, [pc, #40]	@ (8001ffc <HAL_SAI_MspInit+0x130>)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4a08      	ldr	r2, [pc, #32]	@ (8001ffc <HAL_SAI_MspInit+0x130>)
 8001fdc:	66da      	str	r2, [r3, #108]	@ 0x6c
 8001fde:	4a07      	ldr	r2, [pc, #28]	@ (8001ffc <HAL_SAI_MspInit+0x130>)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6393      	str	r3, [r2, #56]	@ 0x38
    }
}
 8001fe4:	bf00      	nop
 8001fe6:	37a8      	adds	r7, #168	@ 0xa8
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	40015804 	.word	0x40015804
 8001ff0:	2001994c 	.word	0x2001994c
 8001ff4:	40023800 	.word	0x40023800
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	200198ec 	.word	0x200198ec
 8002000:	40026428 	.word	0x40026428

08002004 <HAL_SAI_MspDeInit>:

void HAL_SAI_MspDeInit(SAI_HandleTypeDef* saiHandle)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]

/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a11      	ldr	r2, [pc, #68]	@ (8002058 <HAL_SAI_MspDeInit+0x54>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d11c      	bne.n	8002050 <HAL_SAI_MspDeInit+0x4c>
    {
    SAI1_client --;
 8002016:	4b11      	ldr	r3, [pc, #68]	@ (800205c <HAL_SAI_MspDeInit+0x58>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	3b01      	subs	r3, #1
 800201c:	4a0f      	ldr	r2, [pc, #60]	@ (800205c <HAL_SAI_MspDeInit+0x58>)
 800201e:	6013      	str	r3, [r2, #0]
    if (SAI1_client == 0)
 8002020:	4b0e      	ldr	r3, [pc, #56]	@ (800205c <HAL_SAI_MspDeInit+0x58>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d105      	bne.n	8002034 <HAL_SAI_MspDeInit+0x30>
      {
      /* Peripheral clock disable */
       __HAL_RCC_SAI1_CLK_DISABLE();
 8002028:	4b0d      	ldr	r3, [pc, #52]	@ (8002060 <HAL_SAI_MspDeInit+0x5c>)
 800202a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800202c:	4a0c      	ldr	r2, [pc, #48]	@ (8002060 <HAL_SAI_MspDeInit+0x5c>)
 800202e:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002032:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SAI1_A_Block_A GPIO Configuration
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6);
 8002034:	2170      	movs	r1, #112	@ 0x70
 8002036:	480b      	ldr	r0, [pc, #44]	@ (8002064 <HAL_SAI_MspDeInit+0x60>)
 8002038:	f003 fcc4 	bl	80059c4 <HAL_GPIO_DeInit>

    HAL_DMA_DeInit(saiHandle->hdmarx);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002040:	4618      	mov	r0, r3
 8002042:	f002 ff4d 	bl	8004ee0 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(saiHandle->hdmatx);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800204a:	4618      	mov	r0, r3
 800204c:	f002 ff48 	bl	8004ee0 <HAL_DMA_DeInit>
    }
}
 8002050:	bf00      	nop
 8002052:	3708      	adds	r7, #8
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	40015804 	.word	0x40015804
 800205c:	2001994c 	.word	0x2001994c
 8002060:	40023800 	.word	0x40023800
 8002064:	40021000 	.word	0x40021000

08002068 <MX_SDMMC1_SD_Init>:
DMA_HandleTypeDef hdma_sdmmc1_tx;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800206c:	4b0c      	ldr	r3, [pc, #48]	@ (80020a0 <MX_SDMMC1_SD_Init+0x38>)
 800206e:	4a0d      	ldr	r2, [pc, #52]	@ (80020a4 <MX_SDMMC1_SD_Init+0x3c>)
 8002070:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8002072:	4b0b      	ldr	r3, [pc, #44]	@ (80020a0 <MX_SDMMC1_SD_Init+0x38>)
 8002074:	2200      	movs	r2, #0
 8002076:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8002078:	4b09      	ldr	r3, [pc, #36]	@ (80020a0 <MX_SDMMC1_SD_Init+0x38>)
 800207a:	2200      	movs	r2, #0
 800207c:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800207e:	4b08      	ldr	r3, [pc, #32]	@ (80020a0 <MX_SDMMC1_SD_Init+0x38>)
 8002080:	2200      	movs	r2, #0
 8002082:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8002084:	4b06      	ldr	r3, [pc, #24]	@ (80020a0 <MX_SDMMC1_SD_Init+0x38>)
 8002086:	2200      	movs	r2, #0
 8002088:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800208a:	4b05      	ldr	r3, [pc, #20]	@ (80020a0 <MX_SDMMC1_SD_Init+0x38>)
 800208c:	2200      	movs	r2, #0
 800208e:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8002090:	4b03      	ldr	r3, [pc, #12]	@ (80020a0 <MX_SDMMC1_SD_Init+0x38>)
 8002092:	2200      	movs	r2, #0
 8002094:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8002096:	bf00      	nop
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr
 80020a0:	20019950 	.word	0x20019950
 80020a4:	40012c00 	.word	0x40012c00

080020a8 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b0ac      	sub	sp, #176	@ 0xb0
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]
 80020b8:	605a      	str	r2, [r3, #4]
 80020ba:	609a      	str	r2, [r3, #8]
 80020bc:	60da      	str	r2, [r3, #12]
 80020be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020c0:	f107 0318 	add.w	r3, r7, #24
 80020c4:	2284      	movs	r2, #132	@ 0x84
 80020c6:	2100      	movs	r1, #0
 80020c8:	4618      	mov	r0, r3
 80020ca:	f012 f82f 	bl	801412c <memset>
  if(sdHandle->Instance==SDMMC1)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a74      	ldr	r2, [pc, #464]	@ (80022a4 <HAL_SD_MspInit+0x1fc>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	f040 80e0 	bne.w	800229a <HAL_SD_MspInit+0x1f2>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 80020da:	f44f 0320 	mov.w	r3, #10485760	@ 0xa00000
 80020de:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80020e0:	2300      	movs	r3, #0
 80020e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80020e6:	2300      	movs	r3, #0
 80020e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020ec:	f107 0318 	add.w	r3, r7, #24
 80020f0:	4618      	mov	r0, r3
 80020f2:	f005 f88f 	bl	8007214 <HAL_RCCEx_PeriphCLKConfig>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d001      	beq.n	8002100 <HAL_SD_MspInit+0x58>
    {
      Error_Handler();
 80020fc:	f7ff fe8a 	bl	8001e14 <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002100:	4b69      	ldr	r3, [pc, #420]	@ (80022a8 <HAL_SD_MspInit+0x200>)
 8002102:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002104:	4a68      	ldr	r2, [pc, #416]	@ (80022a8 <HAL_SD_MspInit+0x200>)
 8002106:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800210a:	6453      	str	r3, [r2, #68]	@ 0x44
 800210c:	4b66      	ldr	r3, [pc, #408]	@ (80022a8 <HAL_SD_MspInit+0x200>)
 800210e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002110:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002114:	617b      	str	r3, [r7, #20]
 8002116:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002118:	4b63      	ldr	r3, [pc, #396]	@ (80022a8 <HAL_SD_MspInit+0x200>)
 800211a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800211c:	4a62      	ldr	r2, [pc, #392]	@ (80022a8 <HAL_SD_MspInit+0x200>)
 800211e:	f043 0304 	orr.w	r3, r3, #4
 8002122:	6313      	str	r3, [r2, #48]	@ 0x30
 8002124:	4b60      	ldr	r3, [pc, #384]	@ (80022a8 <HAL_SD_MspInit+0x200>)
 8002126:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002128:	f003 0304 	and.w	r3, r3, #4
 800212c:	613b      	str	r3, [r7, #16]
 800212e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002130:	4b5d      	ldr	r3, [pc, #372]	@ (80022a8 <HAL_SD_MspInit+0x200>)
 8002132:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002134:	4a5c      	ldr	r2, [pc, #368]	@ (80022a8 <HAL_SD_MspInit+0x200>)
 8002136:	f043 0308 	orr.w	r3, r3, #8
 800213a:	6313      	str	r3, [r2, #48]	@ 0x30
 800213c:	4b5a      	ldr	r3, [pc, #360]	@ (80022a8 <HAL_SD_MspInit+0x200>)
 800213e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002140:	f003 0308 	and.w	r3, r3, #8
 8002144:	60fb      	str	r3, [r7, #12]
 8002146:	68fb      	ldr	r3, [r7, #12]
    /**SDMMC1 GPIO Configuration
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_8;
 8002148:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 800214c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002150:	2302      	movs	r3, #2
 8002152:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002156:	2300      	movs	r3, #0
 8002158:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800215c:	2303      	movs	r3, #3
 800215e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002162:	230c      	movs	r3, #12
 8002164:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002168:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800216c:	4619      	mov	r1, r3
 800216e:	484f      	ldr	r0, [pc, #316]	@ (80022ac <HAL_SD_MspInit+0x204>)
 8002170:	f003 fa7c 	bl	800566c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002174:	2304      	movs	r3, #4
 8002176:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800217a:	2302      	movs	r3, #2
 800217c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002180:	2300      	movs	r3, #0
 8002182:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002186:	2303      	movs	r3, #3
 8002188:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800218c:	230c      	movs	r3, #12
 800218e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002192:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002196:	4619      	mov	r1, r3
 8002198:	4845      	ldr	r0, [pc, #276]	@ (80022b0 <HAL_SD_MspInit+0x208>)
 800219a:	f003 fa67 	bl	800566c <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 800219e:	4b45      	ldr	r3, [pc, #276]	@ (80022b4 <HAL_SD_MspInit+0x20c>)
 80021a0:	4a45      	ldr	r2, [pc, #276]	@ (80022b8 <HAL_SD_MspInit+0x210>)
 80021a2:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 80021a4:	4b43      	ldr	r3, [pc, #268]	@ (80022b4 <HAL_SD_MspInit+0x20c>)
 80021a6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80021aa:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021ac:	4b41      	ldr	r3, [pc, #260]	@ (80022b4 <HAL_SD_MspInit+0x20c>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021b2:	4b40      	ldr	r3, [pc, #256]	@ (80022b4 <HAL_SD_MspInit+0x20c>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80021b8:	4b3e      	ldr	r3, [pc, #248]	@ (80022b4 <HAL_SD_MspInit+0x20c>)
 80021ba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80021be:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80021c0:	4b3c      	ldr	r3, [pc, #240]	@ (80022b4 <HAL_SD_MspInit+0x20c>)
 80021c2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80021c6:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80021c8:	4b3a      	ldr	r3, [pc, #232]	@ (80022b4 <HAL_SD_MspInit+0x20c>)
 80021ca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80021ce:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 80021d0:	4b38      	ldr	r3, [pc, #224]	@ (80022b4 <HAL_SD_MspInit+0x20c>)
 80021d2:	2220      	movs	r2, #32
 80021d4:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80021d6:	4b37      	ldr	r3, [pc, #220]	@ (80022b4 <HAL_SD_MspInit+0x20c>)
 80021d8:	2200      	movs	r2, #0
 80021da:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80021dc:	4b35      	ldr	r3, [pc, #212]	@ (80022b4 <HAL_SD_MspInit+0x20c>)
 80021de:	2204      	movs	r2, #4
 80021e0:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80021e2:	4b34      	ldr	r3, [pc, #208]	@ (80022b4 <HAL_SD_MspInit+0x20c>)
 80021e4:	2203      	movs	r2, #3
 80021e6:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 80021e8:	4b32      	ldr	r3, [pc, #200]	@ (80022b4 <HAL_SD_MspInit+0x20c>)
 80021ea:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80021ee:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80021f0:	4b30      	ldr	r3, [pc, #192]	@ (80022b4 <HAL_SD_MspInit+0x20c>)
 80021f2:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80021f6:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 80021f8:	482e      	ldr	r0, [pc, #184]	@ (80022b4 <HAL_SD_MspInit+0x20c>)
 80021fa:	f002 fdc3 	bl	8004d84 <HAL_DMA_Init>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d001      	beq.n	8002208 <HAL_SD_MspInit+0x160>
    {
      Error_Handler();
 8002204:	f7ff fe06 	bl	8001e14 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdmmc1_rx);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4a2a      	ldr	r2, [pc, #168]	@ (80022b4 <HAL_SD_MspInit+0x20c>)
 800220c:	641a      	str	r2, [r3, #64]	@ 0x40
 800220e:	4a29      	ldr	r2, [pc, #164]	@ (80022b4 <HAL_SD_MspInit+0x20c>)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 8002214:	4b29      	ldr	r3, [pc, #164]	@ (80022bc <HAL_SD_MspInit+0x214>)
 8002216:	4a2a      	ldr	r2, [pc, #168]	@ (80022c0 <HAL_SD_MspInit+0x218>)
 8002218:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 800221a:	4b28      	ldr	r3, [pc, #160]	@ (80022bc <HAL_SD_MspInit+0x214>)
 800221c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002220:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002222:	4b26      	ldr	r3, [pc, #152]	@ (80022bc <HAL_SD_MspInit+0x214>)
 8002224:	2240      	movs	r2, #64	@ 0x40
 8002226:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002228:	4b24      	ldr	r3, [pc, #144]	@ (80022bc <HAL_SD_MspInit+0x214>)
 800222a:	2200      	movs	r2, #0
 800222c:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800222e:	4b23      	ldr	r3, [pc, #140]	@ (80022bc <HAL_SD_MspInit+0x214>)
 8002230:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002234:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002236:	4b21      	ldr	r3, [pc, #132]	@ (80022bc <HAL_SD_MspInit+0x214>)
 8002238:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800223c:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800223e:	4b1f      	ldr	r3, [pc, #124]	@ (80022bc <HAL_SD_MspInit+0x214>)
 8002240:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002244:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 8002246:	4b1d      	ldr	r3, [pc, #116]	@ (80022bc <HAL_SD_MspInit+0x214>)
 8002248:	2220      	movs	r2, #32
 800224a:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800224c:	4b1b      	ldr	r3, [pc, #108]	@ (80022bc <HAL_SD_MspInit+0x214>)
 800224e:	2200      	movs	r2, #0
 8002250:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002252:	4b1a      	ldr	r3, [pc, #104]	@ (80022bc <HAL_SD_MspInit+0x214>)
 8002254:	2204      	movs	r2, #4
 8002256:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002258:	4b18      	ldr	r3, [pc, #96]	@ (80022bc <HAL_SD_MspInit+0x214>)
 800225a:	2203      	movs	r2, #3
 800225c:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 800225e:	4b17      	ldr	r3, [pc, #92]	@ (80022bc <HAL_SD_MspInit+0x214>)
 8002260:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002264:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8002266:	4b15      	ldr	r3, [pc, #84]	@ (80022bc <HAL_SD_MspInit+0x214>)
 8002268:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800226c:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 800226e:	4813      	ldr	r0, [pc, #76]	@ (80022bc <HAL_SD_MspInit+0x214>)
 8002270:	f002 fd88 	bl	8004d84 <HAL_DMA_Init>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <HAL_SD_MspInit+0x1d6>
    {
      Error_Handler();
 800227a:	f7ff fdcb 	bl	8001e14 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdmmc1_tx);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a0e      	ldr	r2, [pc, #56]	@ (80022bc <HAL_SD_MspInit+0x214>)
 8002282:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002284:	4a0d      	ldr	r2, [pc, #52]	@ (80022bc <HAL_SD_MspInit+0x214>)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 1, 0);
 800228a:	2200      	movs	r2, #0
 800228c:	2101      	movs	r1, #1
 800228e:	2031      	movs	r0, #49	@ 0x31
 8002290:	f002 fc4f 	bl	8004b32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8002294:	2031      	movs	r0, #49	@ 0x31
 8002296:	f002 fc68 	bl	8004b6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 800229a:	bf00      	nop
 800229c:	37b0      	adds	r7, #176	@ 0xb0
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	40012c00 	.word	0x40012c00
 80022a8:	40023800 	.word	0x40023800
 80022ac:	40020800 	.word	0x40020800
 80022b0:	40020c00 	.word	0x40020c00
 80022b4:	200199d4 	.word	0x200199d4
 80022b8:	40026458 	.word	0x40026458
 80022bc:	20019a34 	.word	0x20019a34
 80022c0:	400264a0 	.word	0x400264a0

080022c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80022ca:	4b0f      	ldr	r3, [pc, #60]	@ (8002308 <HAL_MspInit+0x44>)
 80022cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ce:	4a0e      	ldr	r2, [pc, #56]	@ (8002308 <HAL_MspInit+0x44>)
 80022d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80022d6:	4b0c      	ldr	r3, [pc, #48]	@ (8002308 <HAL_MspInit+0x44>)
 80022d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022de:	607b      	str	r3, [r7, #4]
 80022e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022e2:	4b09      	ldr	r3, [pc, #36]	@ (8002308 <HAL_MspInit+0x44>)
 80022e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022e6:	4a08      	ldr	r2, [pc, #32]	@ (8002308 <HAL_MspInit+0x44>)
 80022e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80022ee:	4b06      	ldr	r3, [pc, #24]	@ (8002308 <HAL_MspInit+0x44>)
 80022f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022f6:	603b      	str	r3, [r7, #0]
 80022f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022fa:	bf00      	nop
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	40023800 	.word	0x40023800

0800230c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002310:	bf00      	nop
 8002312:	e7fd      	b.n	8002310 <NMI_Handler+0x4>

08002314 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002318:	bf00      	nop
 800231a:	e7fd      	b.n	8002318 <HardFault_Handler+0x4>

0800231c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002320:	bf00      	nop
 8002322:	e7fd      	b.n	8002320 <MemManage_Handler+0x4>

08002324 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002328:	bf00      	nop
 800232a:	e7fd      	b.n	8002328 <BusFault_Handler+0x4>

0800232c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002330:	bf00      	nop
 8002332:	e7fd      	b.n	8002330 <UsageFault_Handler+0x4>

08002334 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002338:	bf00      	nop
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr

08002342 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002342:	b480      	push	{r7}
 8002344:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002346:	bf00      	nop
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002354:	bf00      	nop
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr

0800235e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800235e:	b580      	push	{r7, lr}
 8002360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002362:	f002 fac7 	bl	80048f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002366:	bf00      	nop
 8002368:	bd80      	pop	{r7, pc}

0800236a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800236a:	b580      	push	{r7, lr}
 800236c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 800236e:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8002372:	f003 fc7f 	bl	8005c74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002376:	bf00      	nop
 8002378:	bd80      	pop	{r7, pc}
	...

0800237c <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8002380:	4802      	ldr	r0, [pc, #8]	@ (800238c <SDMMC1_IRQHandler+0x10>)
 8002382:	f006 fba5 	bl	8008ad0 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8002386:	bf00      	nop
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	20019950 	.word	0x20019950

08002390 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8002394:	4802      	ldr	r0, [pc, #8]	@ (80023a0 <DMA2_Stream1_IRQHandler+0x10>)
 8002396:	f002 fef3 	bl	8005180 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800239a:	bf00      	nop
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	200198ec 	.word	0x200198ec

080023a4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 80023a8:	4802      	ldr	r0, [pc, #8]	@ (80023b4 <DMA2_Stream3_IRQHandler+0x10>)
 80023aa:	f002 fee9 	bl	8005180 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80023ae:	bf00      	nop
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	200199d4 	.word	0x200199d4

080023b8 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 80023bc:	4802      	ldr	r0, [pc, #8]	@ (80023c8 <DMA2_Stream6_IRQHandler+0x10>)
 80023be:	f002 fedf 	bl	8005180 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80023c2:	bf00      	nop
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	20019a34 	.word	0x20019a34

080023cc <DMA2_Stream7_IRQHandler>:
  * @brief This function handles DMA2 Stream 7 interrupt request.
  * @param None
  * @retval None
  */
void AUDIO_IN_SAIx_DMAx_IRQHandler(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
	//extern SAI_HandleTypeDef haudio_in_sai;
	HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
 80023d0:	4b03      	ldr	r3, [pc, #12]	@ (80023e0 <DMA2_Stream7_IRQHandler+0x14>)
 80023d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023d4:	4618      	mov	r0, r3
 80023d6:	f002 fed3 	bl	8005180 <HAL_DMA_IRQHandler>
}
 80023da:	bf00      	nop
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	20019c04 	.word	0x20019c04

080023e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  return 1;
 80023e8:	2301      	movs	r3, #1
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <_kill>:

int _kill(int pid, int sig)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80023fe:	f011 fef7 	bl	80141f0 <__errno>
 8002402:	4603      	mov	r3, r0
 8002404:	2216      	movs	r2, #22
 8002406:	601a      	str	r2, [r3, #0]
  return -1;
 8002408:	f04f 33ff 	mov.w	r3, #4294967295
}
 800240c:	4618      	mov	r0, r3
 800240e:	3708      	adds	r7, #8
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}

08002414 <_exit>:

void _exit (int status)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800241c:	f04f 31ff 	mov.w	r1, #4294967295
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f7ff ffe7 	bl	80023f4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002426:	bf00      	nop
 8002428:	e7fd      	b.n	8002426 <_exit+0x12>

0800242a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800242a:	b580      	push	{r7, lr}
 800242c:	b086      	sub	sp, #24
 800242e:	af00      	add	r7, sp, #0
 8002430:	60f8      	str	r0, [r7, #12]
 8002432:	60b9      	str	r1, [r7, #8]
 8002434:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002436:	2300      	movs	r3, #0
 8002438:	617b      	str	r3, [r7, #20]
 800243a:	e00a      	b.n	8002452 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800243c:	f3af 8000 	nop.w
 8002440:	4601      	mov	r1, r0
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	1c5a      	adds	r2, r3, #1
 8002446:	60ba      	str	r2, [r7, #8]
 8002448:	b2ca      	uxtb	r2, r1
 800244a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	3301      	adds	r3, #1
 8002450:	617b      	str	r3, [r7, #20]
 8002452:	697a      	ldr	r2, [r7, #20]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	429a      	cmp	r2, r3
 8002458:	dbf0      	blt.n	800243c <_read+0x12>
  }

  return len;
 800245a:	687b      	ldr	r3, [r7, #4]
}
 800245c:	4618      	mov	r0, r3
 800245e:	3718      	adds	r7, #24
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}

08002464 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b086      	sub	sp, #24
 8002468:	af00      	add	r7, sp, #0
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	60b9      	str	r1, [r7, #8]
 800246e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002470:	2300      	movs	r3, #0
 8002472:	617b      	str	r3, [r7, #20]
 8002474:	e009      	b.n	800248a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	1c5a      	adds	r2, r3, #1
 800247a:	60ba      	str	r2, [r7, #8]
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	4618      	mov	r0, r3
 8002480:	f7ff fb60 	bl	8001b44 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	3301      	adds	r3, #1
 8002488:	617b      	str	r3, [r7, #20]
 800248a:	697a      	ldr	r2, [r7, #20]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	429a      	cmp	r2, r3
 8002490:	dbf1      	blt.n	8002476 <_write+0x12>
  }
  return len;
 8002492:	687b      	ldr	r3, [r7, #4]
}
 8002494:	4618      	mov	r0, r3
 8002496:	3718      	adds	r7, #24
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <_close>:

int _close(int file)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80024a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr

080024b4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80024c4:	605a      	str	r2, [r3, #4]
  return 0;
 80024c6:	2300      	movs	r3, #0
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <_isatty>:

int _isatty(int file)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80024dc:	2301      	movs	r3, #1
}
 80024de:	4618      	mov	r0, r3
 80024e0:	370c      	adds	r7, #12
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr

080024ea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024ea:	b480      	push	{r7}
 80024ec:	b085      	sub	sp, #20
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	60f8      	str	r0, [r7, #12]
 80024f2:	60b9      	str	r1, [r7, #8]
 80024f4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80024f6:	2300      	movs	r3, #0
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3714      	adds	r7, #20
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b086      	sub	sp, #24
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800250c:	4a14      	ldr	r2, [pc, #80]	@ (8002560 <_sbrk+0x5c>)
 800250e:	4b15      	ldr	r3, [pc, #84]	@ (8002564 <_sbrk+0x60>)
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002518:	4b13      	ldr	r3, [pc, #76]	@ (8002568 <_sbrk+0x64>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d102      	bne.n	8002526 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002520:	4b11      	ldr	r3, [pc, #68]	@ (8002568 <_sbrk+0x64>)
 8002522:	4a12      	ldr	r2, [pc, #72]	@ (800256c <_sbrk+0x68>)
 8002524:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002526:	4b10      	ldr	r3, [pc, #64]	@ (8002568 <_sbrk+0x64>)
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4413      	add	r3, r2
 800252e:	693a      	ldr	r2, [r7, #16]
 8002530:	429a      	cmp	r2, r3
 8002532:	d207      	bcs.n	8002544 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002534:	f011 fe5c 	bl	80141f0 <__errno>
 8002538:	4603      	mov	r3, r0
 800253a:	220c      	movs	r2, #12
 800253c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800253e:	f04f 33ff 	mov.w	r3, #4294967295
 8002542:	e009      	b.n	8002558 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002544:	4b08      	ldr	r3, [pc, #32]	@ (8002568 <_sbrk+0x64>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800254a:	4b07      	ldr	r3, [pc, #28]	@ (8002568 <_sbrk+0x64>)
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4413      	add	r3, r2
 8002552:	4a05      	ldr	r2, [pc, #20]	@ (8002568 <_sbrk+0x64>)
 8002554:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002556:	68fb      	ldr	r3, [r7, #12]
}
 8002558:	4618      	mov	r0, r3
 800255a:	3718      	adds	r7, #24
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	20050000 	.word	0x20050000
 8002564:	00002000 	.word	0x00002000
 8002568:	20019a94 	.word	0x20019a94
 800256c:	2001ec50 	.word	0x2001ec50

08002570 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002574:	4b06      	ldr	r3, [pc, #24]	@ (8002590 <SystemInit+0x20>)
 8002576:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800257a:	4a05      	ldr	r2, [pc, #20]	@ (8002590 <SystemInit+0x20>)
 800257c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002580:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002584:	bf00      	nop
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	e000ed00 	.word	0xe000ed00

08002594 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002598:	4b14      	ldr	r3, [pc, #80]	@ (80025ec <MX_USART1_UART_Init+0x58>)
 800259a:	4a15      	ldr	r2, [pc, #84]	@ (80025f0 <MX_USART1_UART_Init+0x5c>)
 800259c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800259e:	4b13      	ldr	r3, [pc, #76]	@ (80025ec <MX_USART1_UART_Init+0x58>)
 80025a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80025a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80025a6:	4b11      	ldr	r3, [pc, #68]	@ (80025ec <MX_USART1_UART_Init+0x58>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80025ac:	4b0f      	ldr	r3, [pc, #60]	@ (80025ec <MX_USART1_UART_Init+0x58>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80025b2:	4b0e      	ldr	r3, [pc, #56]	@ (80025ec <MX_USART1_UART_Init+0x58>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80025b8:	4b0c      	ldr	r3, [pc, #48]	@ (80025ec <MX_USART1_UART_Init+0x58>)
 80025ba:	220c      	movs	r2, #12
 80025bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025be:	4b0b      	ldr	r3, [pc, #44]	@ (80025ec <MX_USART1_UART_Init+0x58>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80025c4:	4b09      	ldr	r3, [pc, #36]	@ (80025ec <MX_USART1_UART_Init+0x58>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025ca:	4b08      	ldr	r3, [pc, #32]	@ (80025ec <MX_USART1_UART_Init+0x58>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025d0:	4b06      	ldr	r3, [pc, #24]	@ (80025ec <MX_USART1_UART_Init+0x58>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80025d6:	4805      	ldr	r0, [pc, #20]	@ (80025ec <MX_USART1_UART_Init+0x58>)
 80025d8:	f007 f922 	bl	8009820 <HAL_UART_Init>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80025e2:	f7ff fc17 	bl	8001e14 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80025e6:	bf00      	nop
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	20019a98 	.word	0x20019a98
 80025f0:	40011000 	.word	0x40011000

080025f4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b0ac      	sub	sp, #176	@ 0xb0
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025fc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002600:	2200      	movs	r2, #0
 8002602:	601a      	str	r2, [r3, #0]
 8002604:	605a      	str	r2, [r3, #4]
 8002606:	609a      	str	r2, [r3, #8]
 8002608:	60da      	str	r2, [r3, #12]
 800260a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800260c:	f107 0318 	add.w	r3, r7, #24
 8002610:	2284      	movs	r2, #132	@ 0x84
 8002612:	2100      	movs	r1, #0
 8002614:	4618      	mov	r0, r3
 8002616:	f011 fd89 	bl	801412c <memset>
  if(uartHandle->Instance==USART1)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a32      	ldr	r2, [pc, #200]	@ (80026e8 <HAL_UART_MspInit+0xf4>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d15c      	bne.n	80026de <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002624:	2340      	movs	r3, #64	@ 0x40
 8002626:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002628:	2300      	movs	r3, #0
 800262a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800262c:	f107 0318 	add.w	r3, r7, #24
 8002630:	4618      	mov	r0, r3
 8002632:	f004 fdef 	bl	8007214 <HAL_RCCEx_PeriphCLKConfig>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d001      	beq.n	8002640 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800263c:	f7ff fbea 	bl	8001e14 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002640:	4b2a      	ldr	r3, [pc, #168]	@ (80026ec <HAL_UART_MspInit+0xf8>)
 8002642:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002644:	4a29      	ldr	r2, [pc, #164]	@ (80026ec <HAL_UART_MspInit+0xf8>)
 8002646:	f043 0310 	orr.w	r3, r3, #16
 800264a:	6453      	str	r3, [r2, #68]	@ 0x44
 800264c:	4b27      	ldr	r3, [pc, #156]	@ (80026ec <HAL_UART_MspInit+0xf8>)
 800264e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002650:	f003 0310 	and.w	r3, r3, #16
 8002654:	617b      	str	r3, [r7, #20]
 8002656:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002658:	4b24      	ldr	r3, [pc, #144]	@ (80026ec <HAL_UART_MspInit+0xf8>)
 800265a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800265c:	4a23      	ldr	r2, [pc, #140]	@ (80026ec <HAL_UART_MspInit+0xf8>)
 800265e:	f043 0302 	orr.w	r3, r3, #2
 8002662:	6313      	str	r3, [r2, #48]	@ 0x30
 8002664:	4b21      	ldr	r3, [pc, #132]	@ (80026ec <HAL_UART_MspInit+0xf8>)
 8002666:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002668:	f003 0302 	and.w	r3, r3, #2
 800266c:	613b      	str	r3, [r7, #16]
 800266e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002670:	4b1e      	ldr	r3, [pc, #120]	@ (80026ec <HAL_UART_MspInit+0xf8>)
 8002672:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002674:	4a1d      	ldr	r2, [pc, #116]	@ (80026ec <HAL_UART_MspInit+0xf8>)
 8002676:	f043 0301 	orr.w	r3, r3, #1
 800267a:	6313      	str	r3, [r2, #48]	@ 0x30
 800267c:	4b1b      	ldr	r3, [pc, #108]	@ (80026ec <HAL_UART_MspInit+0xf8>)
 800267e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002680:	f003 0301 	and.w	r3, r3, #1
 8002684:	60fb      	str	r3, [r7, #12]
 8002686:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002688:	2380      	movs	r3, #128	@ 0x80
 800268a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800268e:	2302      	movs	r3, #2
 8002690:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002694:	2300      	movs	r3, #0
 8002696:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800269a:	2303      	movs	r3, #3
 800269c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80026a0:	2307      	movs	r3, #7
 80026a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026a6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80026aa:	4619      	mov	r1, r3
 80026ac:	4810      	ldr	r0, [pc, #64]	@ (80026f0 <HAL_UART_MspInit+0xfc>)
 80026ae:	f002 ffdd 	bl	800566c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80026b2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80026b6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ba:	2302      	movs	r3, #2
 80026bc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c0:	2300      	movs	r3, #0
 80026c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026c6:	2303      	movs	r3, #3
 80026c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80026cc:	2307      	movs	r3, #7
 80026ce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026d2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80026d6:	4619      	mov	r1, r3
 80026d8:	4806      	ldr	r0, [pc, #24]	@ (80026f4 <HAL_UART_MspInit+0x100>)
 80026da:	f002 ffc7 	bl	800566c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80026de:	bf00      	nop
 80026e0:	37b0      	adds	r7, #176	@ 0xb0
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	40011000 	.word	0x40011000
 80026ec:	40023800 	.word	0x40023800
 80026f0:	40020400 	.word	0x40020400
 80026f4:	40020000 	.word	0x40020000

080026f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80026f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002730 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 80026fc:	f7ff ff38 	bl	8002570 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002700:	480c      	ldr	r0, [pc, #48]	@ (8002734 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002702:	490d      	ldr	r1, [pc, #52]	@ (8002738 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002704:	4a0d      	ldr	r2, [pc, #52]	@ (800273c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002706:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002708:	e002      	b.n	8002710 <LoopCopyDataInit>

0800270a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800270a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800270c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800270e:	3304      	adds	r3, #4

08002710 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002710:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002712:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002714:	d3f9      	bcc.n	800270a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002716:	4a0a      	ldr	r2, [pc, #40]	@ (8002740 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002718:	4c0a      	ldr	r4, [pc, #40]	@ (8002744 <LoopFillZerobss+0x22>)
  movs r3, #0
 800271a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800271c:	e001      	b.n	8002722 <LoopFillZerobss>

0800271e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800271e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002720:	3204      	adds	r2, #4

08002722 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002722:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002724:	d3fb      	bcc.n	800271e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002726:	f011 fd69 	bl	80141fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800272a:	f7fe fecf 	bl	80014cc <main>
  bx  lr    
 800272e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002730:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002734:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002738:	200009cc 	.word	0x200009cc
  ldr r2, =_sidata
 800273c:	080d43c0 	.word	0x080d43c0
  ldr r2, =_sbss
 8002740:	200009cc 	.word	0x200009cc
  ldr r4, =_ebss
 8002744:	2001ec4c 	.word	0x2001ec4c

08002748 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002748:	e7fe      	b.n	8002748 <ADC_IRQHandler>
	...

0800274c <wm8994_Init>:
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param AudioFreq: Audio Frequency 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Init(uint16_t DeviceAddr, uint16_t OutputInputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b088      	sub	sp, #32
 8002750:	af00      	add	r7, sp, #0
 8002752:	607b      	str	r3, [r7, #4]
 8002754:	4603      	mov	r3, r0
 8002756:	81fb      	strh	r3, [r7, #14]
 8002758:	460b      	mov	r3, r1
 800275a:	81bb      	strh	r3, [r7, #12]
 800275c:	4613      	mov	r3, r2
 800275e:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8002760:	2300      	movs	r3, #0
 8002762:	61fb      	str	r3, [r7, #28]
  uint16_t output_device = OutputInputDevice & 0xFF;
 8002764:	89bb      	ldrh	r3, [r7, #12]
 8002766:	b2db      	uxtb	r3, r3
 8002768:	833b      	strh	r3, [r7, #24]
  uint16_t input_device = OutputInputDevice & 0xFF00;
 800276a:	89bb      	ldrh	r3, [r7, #12]
 800276c:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002770:	82fb      	strh	r3, [r7, #22]
  uint16_t power_mgnt_reg_1 = 0;
 8002772:	2300      	movs	r3, #0
 8002774:	837b      	strh	r3, [r7, #26]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 8002776:	f001 fc71 	bl	800405c <AUDIO_IO_Init>
  /* wm8994 Errata Work-Arounds */
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 800277a:	89fb      	ldrh	r3, [r7, #14]
 800277c:	b2db      	uxtb	r3, r3
 800277e:	2203      	movs	r2, #3
 8002780:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8002784:	4618      	mov	r0, r3
 8002786:	f001 fafb 	bl	8003d80 <CODEC_IO_Write>
 800278a:	4603      	mov	r3, r0
 800278c:	461a      	mov	r2, r3
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	4413      	add	r3, r2
 8002792:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x817, 0x0000);
 8002794:	89fb      	ldrh	r3, [r7, #14]
 8002796:	b2db      	uxtb	r3, r3
 8002798:	2200      	movs	r2, #0
 800279a:	f640 0117 	movw	r1, #2071	@ 0x817
 800279e:	4618      	mov	r0, r3
 80027a0:	f001 faee 	bl	8003d80 <CODEC_IO_Write>
 80027a4:	4603      	mov	r3, r0
 80027a6:	461a      	mov	r2, r3
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	4413      	add	r3, r2
 80027ac:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0000);
 80027ae:	89fb      	ldrh	r3, [r7, #14]
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	2200      	movs	r2, #0
 80027b4:	f44f 7181 	mov.w	r1, #258	@ 0x102
 80027b8:	4618      	mov	r0, r3
 80027ba:	f001 fae1 	bl	8003d80 <CODEC_IO_Write>
 80027be:	4603      	mov	r3, r0
 80027c0:	461a      	mov	r2, r3
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	4413      	add	r3, r2
 80027c6:	61fb      	str	r3, [r7, #28]

  /* Enable VMID soft start (fast), Start-up Bias Current Enabled */
  counter += CODEC_IO_Write(DeviceAddr, 0x39, 0x006C);
 80027c8:	89fb      	ldrh	r3, [r7, #14]
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	226c      	movs	r2, #108	@ 0x6c
 80027ce:	2139      	movs	r1, #57	@ 0x39
 80027d0:	4618      	mov	r0, r3
 80027d2:	f001 fad5 	bl	8003d80 <CODEC_IO_Write>
 80027d6:	4603      	mov	r3, r0
 80027d8:	461a      	mov	r2, r3
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	4413      	add	r3, r2
 80027de:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID */
  if (input_device > 0)
 80027e0:	8afb      	ldrh	r3, [r7, #22]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d00c      	beq.n	8002800 <wm8994_Init+0xb4>
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0013);
 80027e6:	89fb      	ldrh	r3, [r7, #14]
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	2213      	movs	r2, #19
 80027ec:	2101      	movs	r1, #1
 80027ee:	4618      	mov	r0, r3
 80027f0:	f001 fac6 	bl	8003d80 <CODEC_IO_Write>
 80027f4:	4603      	mov	r3, r0
 80027f6:	461a      	mov	r2, r3
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	4413      	add	r3, r2
 80027fc:	61fb      	str	r3, [r7, #28]
 80027fe:	e00b      	b.n	8002818 <wm8994_Init+0xcc>
  }
  else
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0003);
 8002800:	89fb      	ldrh	r3, [r7, #14]
 8002802:	b2db      	uxtb	r3, r3
 8002804:	2203      	movs	r2, #3
 8002806:	2101      	movs	r1, #1
 8002808:	4618      	mov	r0, r3
 800280a:	f001 fab9 	bl	8003d80 <CODEC_IO_Write>
 800280e:	4603      	mov	r3, r0
 8002810:	461a      	mov	r2, r3
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	4413      	add	r3, r2
 8002816:	61fb      	str	r3, [r7, #28]
  }

  /* Add Delay */
  AUDIO_IO_Delay(50);
 8002818:	2032      	movs	r0, #50	@ 0x32
 800281a:	f001 fc87 	bl	800412c <AUDIO_IO_Delay>

  /* Path Configurations for output */
  if (output_device > 0)
 800281e:	8b3b      	ldrh	r3, [r7, #24]
 8002820:	2b00      	cmp	r3, #0
 8002822:	f000 815f 	beq.w	8002ae4 <wm8994_Init+0x398>
  {
    outputEnabled = 1;
 8002826:	4bae      	ldr	r3, [pc, #696]	@ (8002ae0 <wm8994_Init+0x394>)
 8002828:	2201      	movs	r2, #1
 800282a:	601a      	str	r2, [r3, #0]

    switch (output_device)
 800282c:	8b3b      	ldrh	r3, [r7, #24]
 800282e:	2b03      	cmp	r3, #3
 8002830:	f000 808c 	beq.w	800294c <wm8994_Init+0x200>
 8002834:	2b03      	cmp	r3, #3
 8002836:	f300 8111 	bgt.w	8002a5c <wm8994_Init+0x310>
 800283a:	2b01      	cmp	r3, #1
 800283c:	d002      	beq.n	8002844 <wm8994_Init+0xf8>
 800283e:	2b02      	cmp	r3, #2
 8002840:	d042      	beq.n	80028c8 <wm8994_Init+0x17c>
 8002842:	e10b      	b.n	8002a5c <wm8994_Init+0x310>
    {
    case OUTPUT_DEVICE_SPEAKER:
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8002844:	89fb      	ldrh	r3, [r7, #14]
 8002846:	b2db      	uxtb	r3, r3
 8002848:	f640 420c 	movw	r2, #3084	@ 0xc0c
 800284c:	2105      	movs	r1, #5
 800284e:	4618      	mov	r0, r3
 8002850:	f001 fa96 	bl	8003d80 <CODEC_IO_Write>
 8002854:	4603      	mov	r3, r0
 8002856:	461a      	mov	r2, r3
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	4413      	add	r3, r2
 800285c:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 800285e:	89fb      	ldrh	r3, [r7, #14]
 8002860:	b2db      	uxtb	r3, r3
 8002862:	2200      	movs	r2, #0
 8002864:	f240 6101 	movw	r1, #1537	@ 0x601
 8002868:	4618      	mov	r0, r3
 800286a:	f001 fa89 	bl	8003d80 <CODEC_IO_Write>
 800286e:	4603      	mov	r3, r0
 8002870:	461a      	mov	r2, r3
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	4413      	add	r3, r2
 8002876:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8002878:	89fb      	ldrh	r3, [r7, #14]
 800287a:	b2db      	uxtb	r3, r3
 800287c:	2200      	movs	r2, #0
 800287e:	f240 6102 	movw	r1, #1538	@ 0x602
 8002882:	4618      	mov	r0, r3
 8002884:	f001 fa7c 	bl	8003d80 <CODEC_IO_Write>
 8002888:	4603      	mov	r3, r0
 800288a:	461a      	mov	r2, r3
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	4413      	add	r3, r2
 8002890:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8002892:	89fb      	ldrh	r3, [r7, #14]
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2202      	movs	r2, #2
 8002898:	f240 6104 	movw	r1, #1540	@ 0x604
 800289c:	4618      	mov	r0, r3
 800289e:	f001 fa6f 	bl	8003d80 <CODEC_IO_Write>
 80028a2:	4603      	mov	r3, r0
 80028a4:	461a      	mov	r2, r3
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	4413      	add	r3, r2
 80028aa:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 80028ac:	89fb      	ldrh	r3, [r7, #14]
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	2202      	movs	r2, #2
 80028b2:	f240 6105 	movw	r1, #1541	@ 0x605
 80028b6:	4618      	mov	r0, r3
 80028b8:	f001 fa62 	bl	8003d80 <CODEC_IO_Write>
 80028bc:	4603      	mov	r3, r0
 80028be:	461a      	mov	r2, r3
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	4413      	add	r3, r2
 80028c4:	61fb      	str	r3, [r7, #28]
      break;
 80028c6:	e110      	b.n	8002aea <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_HEADPHONE:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 80028c8:	89fb      	ldrh	r3, [r7, #14]
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	f240 3203 	movw	r2, #771	@ 0x303
 80028d0:	2105      	movs	r1, #5
 80028d2:	4618      	mov	r0, r3
 80028d4:	f001 fa54 	bl	8003d80 <CODEC_IO_Write>
 80028d8:	4603      	mov	r3, r0
 80028da:	461a      	mov	r2, r3
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	4413      	add	r3, r2
 80028e0:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80028e2:	89fb      	ldrh	r3, [r7, #14]
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	2201      	movs	r2, #1
 80028e8:	f240 6101 	movw	r1, #1537	@ 0x601
 80028ec:	4618      	mov	r0, r3
 80028ee:	f001 fa47 	bl	8003d80 <CODEC_IO_Write>
 80028f2:	4603      	mov	r3, r0
 80028f4:	461a      	mov	r2, r3
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	4413      	add	r3, r2
 80028fa:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80028fc:	89fb      	ldrh	r3, [r7, #14]
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	2201      	movs	r2, #1
 8002902:	f240 6102 	movw	r1, #1538	@ 0x602
 8002906:	4618      	mov	r0, r3
 8002908:	f001 fa3a 	bl	8003d80 <CODEC_IO_Write>
 800290c:	4603      	mov	r3, r0
 800290e:	461a      	mov	r2, r3
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	4413      	add	r3, r2
 8002914:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8002916:	89fb      	ldrh	r3, [r7, #14]
 8002918:	b2db      	uxtb	r3, r3
 800291a:	2200      	movs	r2, #0
 800291c:	f240 6104 	movw	r1, #1540	@ 0x604
 8002920:	4618      	mov	r0, r3
 8002922:	f001 fa2d 	bl	8003d80 <CODEC_IO_Write>
 8002926:	4603      	mov	r3, r0
 8002928:	461a      	mov	r2, r3
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	4413      	add	r3, r2
 800292e:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8002930:	89fb      	ldrh	r3, [r7, #14]
 8002932:	b2db      	uxtb	r3, r3
 8002934:	2200      	movs	r2, #0
 8002936:	f240 6105 	movw	r1, #1541	@ 0x605
 800293a:	4618      	mov	r0, r3
 800293c:	f001 fa20 	bl	8003d80 <CODEC_IO_Write>
 8002940:	4603      	mov	r3, r0
 8002942:	461a      	mov	r2, r3
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	4413      	add	r3, r2
 8002948:	61fb      	str	r3, [r7, #28]
      break;
 800294a:	e0ce      	b.n	8002aea <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_BOTH:
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 800294c:	8afb      	ldrh	r3, [r7, #22]
 800294e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002952:	d141      	bne.n	80029d8 <wm8994_Init+0x28c>
      {
        /* Enable DAC1 (Left), Enable DAC1 (Right),
        also Enable DAC2 (Left), Enable DAC2 (Right)*/
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8002954:	89fb      	ldrh	r3, [r7, #14]
 8002956:	b2db      	uxtb	r3, r3
 8002958:	f640 720f 	movw	r2, #3855	@ 0xf0f
 800295c:	2105      	movs	r1, #5
 800295e:	4618      	mov	r0, r3
 8002960:	f001 fa0e 	bl	8003d80 <CODEC_IO_Write>
 8002964:	4603      	mov	r3, r0
 8002966:	461a      	mov	r2, r3
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	4413      	add	r3, r2
 800296c:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0003);
 800296e:	89fb      	ldrh	r3, [r7, #14]
 8002970:	b2db      	uxtb	r3, r3
 8002972:	2203      	movs	r2, #3
 8002974:	f240 6101 	movw	r1, #1537	@ 0x601
 8002978:	4618      	mov	r0, r3
 800297a:	f001 fa01 	bl	8003d80 <CODEC_IO_Write>
 800297e:	4603      	mov	r3, r0
 8002980:	461a      	mov	r2, r3
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	4413      	add	r3, r2
 8002986:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0003);
 8002988:	89fb      	ldrh	r3, [r7, #14]
 800298a:	b2db      	uxtb	r3, r3
 800298c:	2203      	movs	r2, #3
 800298e:	f240 6102 	movw	r1, #1538	@ 0x602
 8002992:	4618      	mov	r0, r3
 8002994:	f001 f9f4 	bl	8003d80 <CODEC_IO_Write>
 8002998:	4603      	mov	r3, r0
 800299a:	461a      	mov	r2, r3
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	4413      	add	r3, r2
 80029a0:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0003);
 80029a2:	89fb      	ldrh	r3, [r7, #14]
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	2203      	movs	r2, #3
 80029a8:	f240 6104 	movw	r1, #1540	@ 0x604
 80029ac:	4618      	mov	r0, r3
 80029ae:	f001 f9e7 	bl	8003d80 <CODEC_IO_Write>
 80029b2:	4603      	mov	r3, r0
 80029b4:	461a      	mov	r2, r3
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	4413      	add	r3, r2
 80029ba:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0003);
 80029bc:	89fb      	ldrh	r3, [r7, #14]
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	2203      	movs	r2, #3
 80029c2:	f240 6105 	movw	r1, #1541	@ 0x605
 80029c6:	4618      	mov	r0, r3
 80029c8:	f001 f9da 	bl	8003d80 <CODEC_IO_Write>
 80029cc:	4603      	mov	r3, r0
 80029ce:	461a      	mov	r2, r3
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	4413      	add	r3, r2
 80029d4:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
        
        /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
      }
      break;
 80029d6:	e088      	b.n	8002aea <wm8994_Init+0x39e>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 80029d8:	89fb      	ldrh	r3, [r7, #14]
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	f640 720f 	movw	r2, #3855	@ 0xf0f
 80029e0:	2105      	movs	r1, #5
 80029e2:	4618      	mov	r0, r3
 80029e4:	f001 f9cc 	bl	8003d80 <CODEC_IO_Write>
 80029e8:	4603      	mov	r3, r0
 80029ea:	461a      	mov	r2, r3
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	4413      	add	r3, r2
 80029f0:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80029f2:	89fb      	ldrh	r3, [r7, #14]
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	2201      	movs	r2, #1
 80029f8:	f240 6101 	movw	r1, #1537	@ 0x601
 80029fc:	4618      	mov	r0, r3
 80029fe:	f001 f9bf 	bl	8003d80 <CODEC_IO_Write>
 8002a02:	4603      	mov	r3, r0
 8002a04:	461a      	mov	r2, r3
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	4413      	add	r3, r2
 8002a0a:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8002a0c:	89fb      	ldrh	r3, [r7, #14]
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	2201      	movs	r2, #1
 8002a12:	f240 6102 	movw	r1, #1538	@ 0x602
 8002a16:	4618      	mov	r0, r3
 8002a18:	f001 f9b2 	bl	8003d80 <CODEC_IO_Write>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	461a      	mov	r2, r3
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	4413      	add	r3, r2
 8002a24:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8002a26:	89fb      	ldrh	r3, [r7, #14]
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	2202      	movs	r2, #2
 8002a2c:	f240 6104 	movw	r1, #1540	@ 0x604
 8002a30:	4618      	mov	r0, r3
 8002a32:	f001 f9a5 	bl	8003d80 <CODEC_IO_Write>
 8002a36:	4603      	mov	r3, r0
 8002a38:	461a      	mov	r2, r3
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	4413      	add	r3, r2
 8002a3e:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
 8002a40:	89fb      	ldrh	r3, [r7, #14]
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	2202      	movs	r2, #2
 8002a46:	f240 6105 	movw	r1, #1541	@ 0x605
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f001 f998 	bl	8003d80 <CODEC_IO_Write>
 8002a50:	4603      	mov	r3, r0
 8002a52:	461a      	mov	r2, r3
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	4413      	add	r3, r2
 8002a58:	61fb      	str	r3, [r7, #28]
      break;
 8002a5a:	e046      	b.n	8002aea <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_AUTO :
    default:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8002a5c:	89fb      	ldrh	r3, [r7, #14]
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	f240 3203 	movw	r2, #771	@ 0x303
 8002a64:	2105      	movs	r1, #5
 8002a66:	4618      	mov	r0, r3
 8002a68:	f001 f98a 	bl	8003d80 <CODEC_IO_Write>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	461a      	mov	r2, r3
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	4413      	add	r3, r2
 8002a74:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8002a76:	89fb      	ldrh	r3, [r7, #14]
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f240 6101 	movw	r1, #1537	@ 0x601
 8002a80:	4618      	mov	r0, r3
 8002a82:	f001 f97d 	bl	8003d80 <CODEC_IO_Write>
 8002a86:	4603      	mov	r3, r0
 8002a88:	461a      	mov	r2, r3
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	4413      	add	r3, r2
 8002a8e:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8002a90:	89fb      	ldrh	r3, [r7, #14]
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	2201      	movs	r2, #1
 8002a96:	f240 6102 	movw	r1, #1538	@ 0x602
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f001 f970 	bl	8003d80 <CODEC_IO_Write>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	4413      	add	r3, r2
 8002aa8:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8002aaa:	89fb      	ldrh	r3, [r7, #14]
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f240 6104 	movw	r1, #1540	@ 0x604
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f001 f963 	bl	8003d80 <CODEC_IO_Write>
 8002aba:	4603      	mov	r3, r0
 8002abc:	461a      	mov	r2, r3
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	4413      	add	r3, r2
 8002ac2:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8002ac4:	89fb      	ldrh	r3, [r7, #14]
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f240 6105 	movw	r1, #1541	@ 0x605
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f001 f956 	bl	8003d80 <CODEC_IO_Write>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	4413      	add	r3, r2
 8002adc:	61fb      	str	r3, [r7, #28]
      break;
 8002ade:	e004      	b.n	8002aea <wm8994_Init+0x39e>
 8002ae0:	20019b20 	.word	0x20019b20
    }
  }
  else
  {
    outputEnabled = 0;
 8002ae4:	4b99      	ldr	r3, [pc, #612]	@ (8002d4c <wm8994_Init+0x600>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	601a      	str	r2, [r3, #0]
  }

  /* Path Configurations for input */
  if (input_device > 0)
 8002aea:	8afb      	ldrh	r3, [r7, #22]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	f000 81ab 	beq.w	8002e48 <wm8994_Init+0x6fc>
  {
    inputEnabled = 1;
 8002af2:	4b97      	ldr	r3, [pc, #604]	@ (8002d50 <wm8994_Init+0x604>)
 8002af4:	2201      	movs	r2, #1
 8002af6:	601a      	str	r2, [r3, #0]
    switch (input_device)
 8002af8:	8afb      	ldrh	r3, [r7, #22]
 8002afa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002afe:	f000 8129 	beq.w	8002d54 <wm8994_Init+0x608>
 8002b02:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b06:	f300 819b 	bgt.w	8002e40 <wm8994_Init+0x6f4>
 8002b0a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002b0e:	d05a      	beq.n	8002bc6 <wm8994_Init+0x47a>
 8002b10:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002b14:	f300 8194 	bgt.w	8002e40 <wm8994_Init+0x6f4>
 8002b18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b1c:	f000 80c6 	beq.w	8002cac <wm8994_Init+0x560>
 8002b20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b24:	f040 818c 	bne.w	8002e40 <wm8994_Init+0x6f4>
    {
    case INPUT_DEVICE_DIGITAL_MICROPHONE_2 :
      /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
       * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0C30);
 8002b28:	89fb      	ldrh	r3, [r7, #14]
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	f44f 6243 	mov.w	r2, #3120	@ 0xc30
 8002b30:	2104      	movs	r1, #4
 8002b32:	4618      	mov	r0, r3
 8002b34:	f001 f924 	bl	8003d80 <CODEC_IO_Write>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	4413      	add	r3, r2
 8002b40:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8002b42:	89fb      	ldrh	r3, [r7, #14]
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	22db      	movs	r2, #219	@ 0xdb
 8002b48:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f001 f917 	bl	8003d80 <CODEC_IO_Write>
 8002b52:	4603      	mov	r3, r0
 8002b54:	461a      	mov	r2, r3
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	4413      	add	r3, r2
 8002b5a:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6000);
 8002b5c:	89fb      	ldrh	r3, [r7, #14]
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	f44f 42c0 	mov.w	r2, #24576	@ 0x6000
 8002b64:	2102      	movs	r1, #2
 8002b66:	4618      	mov	r0, r3
 8002b68:	f001 f90a 	bl	8003d80 <CODEC_IO_Write>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	461a      	mov	r2, r3
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	4413      	add	r3, r2
 8002b74:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8002b76:	89fb      	ldrh	r3, [r7, #14]
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2202      	movs	r2, #2
 8002b7c:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 8002b80:	4618      	mov	r0, r3
 8002b82:	f001 f8fd 	bl	8003d80 <CODEC_IO_Write>
 8002b86:	4603      	mov	r3, r0
 8002b88:	461a      	mov	r2, r3
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	4413      	add	r3, r2
 8002b8e:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8002b90:	89fb      	ldrh	r3, [r7, #14]
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	2202      	movs	r2, #2
 8002b96:	f240 6109 	movw	r1, #1545	@ 0x609
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f001 f8f0 	bl	8003d80 <CODEC_IO_Write>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	4413      	add	r3, r2
 8002ba8:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000E);
 8002baa:	89fb      	ldrh	r3, [r7, #14]
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	220e      	movs	r2, #14
 8002bb0:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f001 f8e3 	bl	8003d80 <CODEC_IO_Write>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	61fb      	str	r3, [r7, #28]
      break;
 8002bc4:	e143      	b.n	8002e4e <wm8994_Init+0x702>

    case INPUT_DEVICE_INPUT_LINE_1 :
      /* IN1LN_TO_IN1L, IN1LP_TO_VMID, IN1RN_TO_IN1R, IN1RP_TO_VMID */
      counter += CODEC_IO_Write(DeviceAddr, 0x28, 0x0011);
 8002bc6:	89fb      	ldrh	r3, [r7, #14]
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	2211      	movs	r2, #17
 8002bcc:	2128      	movs	r1, #40	@ 0x28
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f001 f8d6 	bl	8003d80 <CODEC_IO_Write>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	4413      	add	r3, r2
 8002bdc:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1L_TO_MIXINL and +30dB on IN1L PGA output */
      counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0035);
 8002bde:	89fb      	ldrh	r3, [r7, #14]
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	2235      	movs	r2, #53	@ 0x35
 8002be4:	2129      	movs	r1, #41	@ 0x29
 8002be6:	4618      	mov	r0, r3
 8002be8:	f001 f8ca 	bl	8003d80 <CODEC_IO_Write>
 8002bec:	4603      	mov	r3, r0
 8002bee:	461a      	mov	r2, r3
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R_TO_MIXINL, Gain = +30dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0035);
 8002bf6:	89fb      	ldrh	r3, [r7, #14]
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	2235      	movs	r2, #53	@ 0x35
 8002bfc:	212a      	movs	r1, #42	@ 0x2a
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f001 f8be 	bl	8003d80 <CODEC_IO_Write>
 8002c04:	4603      	mov	r3, r0
 8002c06:	461a      	mov	r2, r3
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0303);
 8002c0e:	89fb      	ldrh	r3, [r7, #14]
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	f240 3203 	movw	r2, #771	@ 0x303
 8002c16:	2104      	movs	r1, #4
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f001 f8b1 	bl	8003d80 <CODEC_IO_Write>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	461a      	mov	r2, r3
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	4413      	add	r3, r2
 8002c26:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8002c28:	89fb      	ldrh	r3, [r7, #14]
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	22db      	movs	r2, #219	@ 0xdb
 8002c2e:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 8002c32:	4618      	mov	r0, r3
 8002c34:	f001 f8a4 	bl	8003d80 <CODEC_IO_Write>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	4413      	add	r3, r2
 8002c40:	61fb      	str	r3, [r7, #28]

      /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8002c42:	89fb      	ldrh	r3, [r7, #14]
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	f246 3250 	movw	r2, #25424	@ 0x6350
 8002c4a:	2102      	movs	r1, #2
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f001 f897 	bl	8003d80 <CODEC_IO_Write>
 8002c52:	4603      	mov	r3, r0
 8002c54:	461a      	mov	r2, r3
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	4413      	add	r3, r2
 8002c5a:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8002c5c:	89fb      	ldrh	r3, [r7, #14]
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	2202      	movs	r2, #2
 8002c62:	f240 6106 	movw	r1, #1542	@ 0x606
 8002c66:	4618      	mov	r0, r3
 8002c68:	f001 f88a 	bl	8003d80 <CODEC_IO_Write>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	461a      	mov	r2, r3
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	4413      	add	r3, r2
 8002c74:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8002c76:	89fb      	ldrh	r3, [r7, #14]
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	2202      	movs	r2, #2
 8002c7c:	f240 6107 	movw	r1, #1543	@ 0x607
 8002c80:	4618      	mov	r0, r3
 8002c82:	f001 f87d 	bl	8003d80 <CODEC_IO_Write>
 8002c86:	4603      	mov	r3, r0
 8002c88:	461a      	mov	r2, r3
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	4413      	add	r3, r2
 8002c8e:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8002c90:	89fb      	ldrh	r3, [r7, #14]
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	220d      	movs	r2, #13
 8002c96:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f001 f870 	bl	8003d80 <CODEC_IO_Write>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	4413      	add	r3, r2
 8002ca8:	61fb      	str	r3, [r7, #28]
      break;
 8002caa:	e0d0      	b.n	8002e4e <wm8994_Init+0x702>

    case INPUT_DEVICE_DIGITAL_MICROPHONE_1 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x030C);
 8002cac:	89fb      	ldrh	r3, [r7, #14]
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	f44f 7243 	mov.w	r2, #780	@ 0x30c
 8002cb4:	2104      	movs	r1, #4
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f001 f862 	bl	8003d80 <CODEC_IO_Write>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	4413      	add	r3, r2
 8002cc4:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8002cc6:	89fb      	ldrh	r3, [r7, #14]
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	22db      	movs	r2, #219	@ 0xdb
 8002ccc:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f001 f855 	bl	8003d80 <CODEC_IO_Write>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	461a      	mov	r2, r3
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	4413      	add	r3, r2
 8002cde:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8002ce0:	89fb      	ldrh	r3, [r7, #14]
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	f246 3250 	movw	r2, #25424	@ 0x6350
 8002ce8:	2102      	movs	r1, #2
 8002cea:	4618      	mov	r0, r3
 8002cec:	f001 f848 	bl	8003d80 <CODEC_IO_Write>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	4413      	add	r3, r2
 8002cf8:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8002cfa:	89fb      	ldrh	r3, [r7, #14]
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	2202      	movs	r2, #2
 8002d00:	f240 6106 	movw	r1, #1542	@ 0x606
 8002d04:	4618      	mov	r0, r3
 8002d06:	f001 f83b 	bl	8003d80 <CODEC_IO_Write>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	4413      	add	r3, r2
 8002d12:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8002d14:	89fb      	ldrh	r3, [r7, #14]
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	2202      	movs	r2, #2
 8002d1a:	f240 6107 	movw	r1, #1543	@ 0x607
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f001 f82e 	bl	8003d80 <CODEC_IO_Write>
 8002d24:	4603      	mov	r3, r0
 8002d26:	461a      	mov	r2, r3
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8002d2e:	89fb      	ldrh	r3, [r7, #14]
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	220d      	movs	r2, #13
 8002d34:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f001 f821 	bl	8003d80 <CODEC_IO_Write>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	461a      	mov	r2, r3
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	4413      	add	r3, r2
 8002d46:	61fb      	str	r3, [r7, #28]
      break; 
 8002d48:	e081      	b.n	8002e4e <wm8994_Init+0x702>
 8002d4a:	bf00      	nop
 8002d4c:	20019b20 	.word	0x20019b20
 8002d50:	20019b24 	.word	0x20019b24
    case INPUT_DEVICE_DIGITAL_MIC1_MIC2 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0F3C);
 8002d54:	89fb      	ldrh	r3, [r7, #14]
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	f640 723c 	movw	r2, #3900	@ 0xf3c
 8002d5c:	2104      	movs	r1, #4
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f001 f80e 	bl	8003d80 <CODEC_IO_Write>
 8002d64:	4603      	mov	r3, r0
 8002d66:	461a      	mov	r2, r3
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	4413      	add	r3, r2
 8002d6c:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8002d6e:	89fb      	ldrh	r3, [r7, #14]
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	22db      	movs	r2, #219	@ 0xdb
 8002d74:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f001 f801 	bl	8003d80 <CODEC_IO_Write>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	461a      	mov	r2, r3
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	4413      	add	r3, r2
 8002d86:	61fb      	str	r3, [r7, #28]
      
      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8002d88:	89fb      	ldrh	r3, [r7, #14]
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	22db      	movs	r2, #219	@ 0xdb
 8002d8e:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 8002d92:	4618      	mov	r0, r3
 8002d94:	f000 fff4 	bl	8003d80 <CODEC_IO_Write>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	4413      	add	r3, r2
 8002da0:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x63A0);
 8002da2:	89fb      	ldrh	r3, [r7, #14]
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	f246 32a0 	movw	r2, #25504	@ 0x63a0
 8002daa:	2102      	movs	r1, #2
 8002dac:	4618      	mov	r0, r3
 8002dae:	f000 ffe7 	bl	8003d80 <CODEC_IO_Write>
 8002db2:	4603      	mov	r3, r0
 8002db4:	461a      	mov	r2, r3
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	4413      	add	r3, r2
 8002dba:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8002dbc:	89fb      	ldrh	r3, [r7, #14]
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	2202      	movs	r2, #2
 8002dc2:	f240 6106 	movw	r1, #1542	@ 0x606
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f000 ffda 	bl	8003d80 <CODEC_IO_Write>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	461a      	mov	r2, r3
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	4413      	add	r3, r2
 8002dd4:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8002dd6:	89fb      	ldrh	r3, [r7, #14]
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	2202      	movs	r2, #2
 8002ddc:	f240 6107 	movw	r1, #1543	@ 0x607
 8002de0:	4618      	mov	r0, r3
 8002de2:	f000 ffcd 	bl	8003d80 <CODEC_IO_Write>
 8002de6:	4603      	mov	r3, r0
 8002de8:	461a      	mov	r2, r3
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	4413      	add	r3, r2
 8002dee:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8002df0:	89fb      	ldrh	r3, [r7, #14]
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	2202      	movs	r2, #2
 8002df6:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f000 ffc0 	bl	8003d80 <CODEC_IO_Write>
 8002e00:	4603      	mov	r3, r0
 8002e02:	461a      	mov	r2, r3
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	4413      	add	r3, r2
 8002e08:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8002e0a:	89fb      	ldrh	r3, [r7, #14]
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	2202      	movs	r2, #2
 8002e10:	f240 6109 	movw	r1, #1545	@ 0x609
 8002e14:	4618      	mov	r0, r3
 8002e16:	f000 ffb3 	bl	8003d80 <CODEC_IO_Write>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	4413      	add	r3, r2
 8002e22:	61fb      	str	r3, [r7, #28]
      
      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8002e24:	89fb      	ldrh	r3, [r7, #14]
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	220d      	movs	r2, #13
 8002e2a:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f000 ffa6 	bl	8003d80 <CODEC_IO_Write>
 8002e34:	4603      	mov	r3, r0
 8002e36:	461a      	mov	r2, r3
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	4413      	add	r3, r2
 8002e3c:	61fb      	str	r3, [r7, #28]
      break;    
 8002e3e:	e006      	b.n	8002e4e <wm8994_Init+0x702>
    case INPUT_DEVICE_INPUT_LINE_2 :
    default:
      /* Actually, no other input devices supported */
      counter++;
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	3301      	adds	r3, #1
 8002e44:	61fb      	str	r3, [r7, #28]
      break;
 8002e46:	e002      	b.n	8002e4e <wm8994_Init+0x702>
    }
  }
  else
  {
    inputEnabled = 0;
 8002e48:	4ba4      	ldr	r3, [pc, #656]	@ (80030dc <wm8994_Init+0x990>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	601a      	str	r2, [r3, #0]
  }
  
  /*  Clock Configurations */
  switch (AudioFreq)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4aa3      	ldr	r2, [pc, #652]	@ (80030e0 <wm8994_Init+0x994>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d079      	beq.n	8002f4a <wm8994_Init+0x7fe>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4aa1      	ldr	r2, [pc, #644]	@ (80030e0 <wm8994_Init+0x994>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	f200 80ad 	bhi.w	8002fba <wm8994_Init+0x86e>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d061      	beq.n	8002f2e <wm8994_Init+0x7e2>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8002e70:	4293      	cmp	r3, r2
 8002e72:	f200 80a2 	bhi.w	8002fba <wm8994_Init+0x86e>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	f000 808e 	beq.w	8002f9e <wm8994_Init+0x852>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	f200 8096 	bhi.w	8002fba <wm8994_Init+0x86e>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8002e94:	d03d      	beq.n	8002f12 <wm8994_Init+0x7c6>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8002e9c:	f200 808d 	bhi.w	8002fba <wm8994_Init+0x86e>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f245 6222 	movw	r2, #22050	@ 0x5622
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d06b      	beq.n	8002f82 <wm8994_Init+0x836>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f245 6222 	movw	r2, #22050	@ 0x5622
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	f200 8082 	bhi.w	8002fba <wm8994_Init+0x86e>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8002ebc:	d01b      	beq.n	8002ef6 <wm8994_Init+0x7aa>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8002ec4:	d879      	bhi.n	8002fba <wm8994_Init+0x86e>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 8002ecc:	d005      	beq.n	8002eda <wm8994_Init+0x78e>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f642 3211 	movw	r2, #11025	@ 0x2b11
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d046      	beq.n	8002f66 <wm8994_Init+0x81a>
 8002ed8:	e06f      	b.n	8002fba <wm8994_Init+0x86e>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8002eda:	89fb      	ldrh	r3, [r7, #14]
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	2203      	movs	r2, #3
 8002ee0:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f000 ff4b 	bl	8003d80 <CODEC_IO_Write>
 8002eea:	4603      	mov	r3, r0
 8002eec:	461a      	mov	r2, r3
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	4413      	add	r3, r2
 8002ef2:	61fb      	str	r3, [r7, #28]
    break;
 8002ef4:	e06f      	b.n	8002fd6 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 8002ef6:	89fb      	ldrh	r3, [r7, #14]
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	2233      	movs	r2, #51	@ 0x33
 8002efc:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002f00:	4618      	mov	r0, r3
 8002f02:	f000 ff3d 	bl	8003d80 <CODEC_IO_Write>
 8002f06:	4603      	mov	r3, r0
 8002f08:	461a      	mov	r2, r3
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	4413      	add	r3, r2
 8002f0e:	61fb      	str	r3, [r7, #28]
    break;
 8002f10:	e061      	b.n	8002fd6 <wm8994_Init+0x88a>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 8002f12:	89fb      	ldrh	r3, [r7, #14]
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	2263      	movs	r2, #99	@ 0x63
 8002f18:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f000 ff2f 	bl	8003d80 <CODEC_IO_Write>
 8002f22:	4603      	mov	r3, r0
 8002f24:	461a      	mov	r2, r3
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	4413      	add	r3, r2
 8002f2a:	61fb      	str	r3, [r7, #28]
    break;
 8002f2c:	e053      	b.n	8002fd6 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8002f2e:	89fb      	ldrh	r3, [r7, #14]
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	2283      	movs	r2, #131	@ 0x83
 8002f34:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f000 ff21 	bl	8003d80 <CODEC_IO_Write>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	461a      	mov	r2, r3
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	4413      	add	r3, r2
 8002f46:	61fb      	str	r3, [r7, #28]
    break;
 8002f48:	e045      	b.n	8002fd6 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 8002f4a:	89fb      	ldrh	r3, [r7, #14]
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	22a3      	movs	r2, #163	@ 0xa3
 8002f50:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002f54:	4618      	mov	r0, r3
 8002f56:	f000 ff13 	bl	8003d80 <CODEC_IO_Write>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	4413      	add	r3, r2
 8002f62:	61fb      	str	r3, [r7, #28]
    break;
 8002f64:	e037      	b.n	8002fd6 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 8002f66:	89fb      	ldrh	r3, [r7, #14]
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	2213      	movs	r2, #19
 8002f6c:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002f70:	4618      	mov	r0, r3
 8002f72:	f000 ff05 	bl	8003d80 <CODEC_IO_Write>
 8002f76:	4603      	mov	r3, r0
 8002f78:	461a      	mov	r2, r3
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	4413      	add	r3, r2
 8002f7e:	61fb      	str	r3, [r7, #28]
    break;
 8002f80:	e029      	b.n	8002fd6 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8002f82:	89fb      	ldrh	r3, [r7, #14]
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	2243      	movs	r2, #67	@ 0x43
 8002f88:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f000 fef7 	bl	8003d80 <CODEC_IO_Write>
 8002f92:	4603      	mov	r3, r0
 8002f94:	461a      	mov	r2, r3
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	4413      	add	r3, r2
 8002f9a:	61fb      	str	r3, [r7, #28]
    break;
 8002f9c:	e01b      	b.n	8002fd6 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 8002f9e:	89fb      	ldrh	r3, [r7, #14]
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	2273      	movs	r2, #115	@ 0x73
 8002fa4:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f000 fee9 	bl	8003d80 <CODEC_IO_Write>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	4413      	add	r3, r2
 8002fb6:	61fb      	str	r3, [r7, #28]
    break; 
 8002fb8:	e00d      	b.n	8002fd6 <wm8994_Init+0x88a>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8002fba:	89fb      	ldrh	r3, [r7, #14]
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	2283      	movs	r2, #131	@ 0x83
 8002fc0:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f000 fedb 	bl	8003d80 <CODEC_IO_Write>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	461a      	mov	r2, r3
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	4413      	add	r3, r2
 8002fd2:	61fb      	str	r3, [r7, #28]
    break; 
 8002fd4:	bf00      	nop
  }

  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8002fd6:	8afb      	ldrh	r3, [r7, #22]
 8002fd8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002fdc:	d10e      	bne.n	8002ffc <wm8994_Init+0x8b0>
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4018);    
 8002fde:	89fb      	ldrh	r3, [r7, #14]
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	f244 0218 	movw	r2, #16408	@ 0x4018
 8002fe6:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8002fea:	4618      	mov	r0, r3
 8002fec:	f000 fec8 	bl	8003d80 <CODEC_IO_Write>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	61fb      	str	r3, [r7, #28]
 8002ffa:	e00d      	b.n	8003018 <wm8994_Init+0x8cc>
  }
  else
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4010);
 8002ffc:	89fb      	ldrh	r3, [r7, #14]
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	f244 0210 	movw	r2, #16400	@ 0x4010
 8003004:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8003008:	4618      	mov	r0, r3
 800300a:	f000 feb9 	bl	8003d80 <CODEC_IO_Write>
 800300e:	4603      	mov	r3, r0
 8003010:	461a      	mov	r2, r3
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	4413      	add	r3, r2
 8003016:	61fb      	str	r3, [r7, #28]
  }
  
  /* slave mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x302, 0x0000);
 8003018:	89fb      	ldrh	r3, [r7, #14]
 800301a:	b2db      	uxtb	r3, r3
 800301c:	2200      	movs	r2, #0
 800301e:	f240 3102 	movw	r1, #770	@ 0x302
 8003022:	4618      	mov	r0, r3
 8003024:	f000 feac 	bl	8003d80 <CODEC_IO_Write>
 8003028:	4603      	mov	r3, r0
 800302a:	461a      	mov	r2, r3
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	4413      	add	r3, r2
 8003030:	61fb      	str	r3, [r7, #28]
  
  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  counter += CODEC_IO_Write(DeviceAddr, 0x208, 0x000A);
 8003032:	89fb      	ldrh	r3, [r7, #14]
 8003034:	b2db      	uxtb	r3, r3
 8003036:	220a      	movs	r2, #10
 8003038:	f44f 7102 	mov.w	r1, #520	@ 0x208
 800303c:	4618      	mov	r0, r3
 800303e:	f000 fe9f 	bl	8003d80 <CODEC_IO_Write>
 8003042:	4603      	mov	r3, r0
 8003044:	461a      	mov	r2, r3
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	4413      	add	r3, r2
 800304a:	61fb      	str	r3, [r7, #28]
  
  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0001);
 800304c:	89fb      	ldrh	r3, [r7, #14]
 800304e:	b2db      	uxtb	r3, r3
 8003050:	2201      	movs	r2, #1
 8003052:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003056:	4618      	mov	r0, r3
 8003058:	f000 fe92 	bl	8003d80 <CODEC_IO_Write>
 800305c:	4603      	mov	r3, r0
 800305e:	461a      	mov	r2, r3
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	4413      	add	r3, r2
 8003064:	61fb      	str	r3, [r7, #28]

  if (output_device > 0)  /* Audio output selected */
 8003066:	8b3b      	ldrh	r3, [r7, #24]
 8003068:	2b00      	cmp	r3, #0
 800306a:	f000 817b 	beq.w	8003364 <wm8994_Init+0xc18>
  {
    if (output_device == OUTPUT_DEVICE_HEADPHONE)
 800306e:	8b3b      	ldrh	r3, [r7, #24]
 8003070:	2b02      	cmp	r3, #2
 8003072:	d157      	bne.n	8003124 <wm8994_Init+0x9d8>
    {      
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0100);
 8003074:	89fb      	ldrh	r3, [r7, #14]
 8003076:	b2db      	uxtb	r3, r3
 8003078:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800307c:	212d      	movs	r1, #45	@ 0x2d
 800307e:	4618      	mov	r0, r3
 8003080:	f000 fe7e 	bl	8003d80 <CODEC_IO_Write>
 8003084:	4603      	mov	r3, r0
 8003086:	461a      	mov	r2, r3
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	4413      	add	r3, r2
 800308c:	61fb      	str	r3, [r7, #28]
      
      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0100);    
 800308e:	89fb      	ldrh	r3, [r7, #14]
 8003090:	b2db      	uxtb	r3, r3
 8003092:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003096:	212e      	movs	r1, #46	@ 0x2e
 8003098:	4618      	mov	r0, r3
 800309a:	f000 fe71 	bl	8003d80 <CODEC_IO_Write>
 800309e:	4603      	mov	r3, r0
 80030a0:	461a      	mov	r2, r3
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	4413      	add	r3, r2
 80030a6:	61fb      	str	r3, [r7, #28]
            
      /* Startup sequence for Headphone */
      if(ColdStartup)
 80030a8:	4b0e      	ldr	r3, [pc, #56]	@ (80030e4 <wm8994_Init+0x998>)
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d01b      	beq.n	80030e8 <wm8994_Init+0x99c>
      {
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8100);
 80030b0:	89fb      	ldrh	r3, [r7, #14]
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	f44f 4201 	mov.w	r2, #33024	@ 0x8100
 80030b8:	f44f 7188 	mov.w	r1, #272	@ 0x110
 80030bc:	4618      	mov	r0, r3
 80030be:	f000 fe5f 	bl	8003d80 <CODEC_IO_Write>
 80030c2:	4603      	mov	r3, r0
 80030c4:	461a      	mov	r2, r3
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	4413      	add	r3, r2
 80030ca:	61fb      	str	r3, [r7, #28]
        
        ColdStartup=0;
 80030cc:	4b05      	ldr	r3, [pc, #20]	@ (80030e4 <wm8994_Init+0x998>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	701a      	strb	r2, [r3, #0]
        /* Add Delay */
        AUDIO_IO_Delay(300);
 80030d2:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80030d6:	f001 f829 	bl	800412c <AUDIO_IO_Delay>
 80030da:	e016      	b.n	800310a <wm8994_Init+0x9be>
 80030dc:	20019b24 	.word	0x20019b24
 80030e0:	00017700 	.word	0x00017700
 80030e4:	20000038 	.word	0x20000038
      }
      else /* Headphone Warm Start-Up */
      { 
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8108);
 80030e8:	89fb      	ldrh	r3, [r7, #14]
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	f248 1208 	movw	r2, #33032	@ 0x8108
 80030f0:	f44f 7188 	mov.w	r1, #272	@ 0x110
 80030f4:	4618      	mov	r0, r3
 80030f6:	f000 fe43 	bl	8003d80 <CODEC_IO_Write>
 80030fa:	4603      	mov	r3, r0
 80030fc:	461a      	mov	r2, r3
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	4413      	add	r3, r2
 8003102:	61fb      	str	r3, [r7, #28]
        /* Add Delay */
        AUDIO_IO_Delay(50);
 8003104:	2032      	movs	r0, #50	@ 0x32
 8003106:	f001 f811 	bl	800412c <AUDIO_IO_Delay>
      }

      /* Soft un-Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 800310a:	89fb      	ldrh	r3, [r7, #14]
 800310c:	b2db      	uxtb	r3, r3
 800310e:	2200      	movs	r2, #0
 8003110:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8003114:	4618      	mov	r0, r3
 8003116:	f000 fe33 	bl	8003d80 <CODEC_IO_Write>
 800311a:	4603      	mov	r3, r0
 800311c:	461a      	mov	r2, r3
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	4413      	add	r3, r2
 8003122:	61fb      	str	r3, [r7, #28]
    }
    /* Analog Output Configuration */

    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0300);
 8003124:	89fb      	ldrh	r3, [r7, #14]
 8003126:	b2db      	uxtb	r3, r3
 8003128:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800312c:	2103      	movs	r1, #3
 800312e:	4618      	mov	r0, r3
 8003130:	f000 fe26 	bl	8003d80 <CODEC_IO_Write>
 8003134:	4603      	mov	r3, r0
 8003136:	461a      	mov	r2, r3
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	4413      	add	r3, r2
 800313c:	61fb      	str	r3, [r7, #28]

    /* Left Speaker Mixer Volume = 0dB */
    counter += CODEC_IO_Write(DeviceAddr, 0x22, 0x0000);
 800313e:	89fb      	ldrh	r3, [r7, #14]
 8003140:	b2db      	uxtb	r3, r3
 8003142:	2200      	movs	r2, #0
 8003144:	2122      	movs	r1, #34	@ 0x22
 8003146:	4618      	mov	r0, r3
 8003148:	f000 fe1a 	bl	8003d80 <CODEC_IO_Write>
 800314c:	4603      	mov	r3, r0
 800314e:	461a      	mov	r2, r3
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	4413      	add	r3, r2
 8003154:	61fb      	str	r3, [r7, #28]

    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x23, 0x0000);
 8003156:	89fb      	ldrh	r3, [r7, #14]
 8003158:	b2db      	uxtb	r3, r3
 800315a:	2200      	movs	r2, #0
 800315c:	2123      	movs	r1, #35	@ 0x23
 800315e:	4618      	mov	r0, r3
 8003160:	f000 fe0e 	bl	8003d80 <CODEC_IO_Write>
 8003164:	4603      	mov	r3, r0
 8003166:	461a      	mov	r2, r3
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	4413      	add	r3, r2
 800316c:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x36, 0x0300);
 800316e:	89fb      	ldrh	r3, [r7, #14]
 8003170:	b2db      	uxtb	r3, r3
 8003172:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8003176:	2136      	movs	r1, #54	@ 0x36
 8003178:	4618      	mov	r0, r3
 800317a:	f000 fe01 	bl	8003d80 <CODEC_IO_Write>
 800317e:	4603      	mov	r3, r0
 8003180:	461a      	mov	r2, r3
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	4413      	add	r3, r2
 8003186:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x3003);
 8003188:	89fb      	ldrh	r3, [r7, #14]
 800318a:	b2db      	uxtb	r3, r3
 800318c:	f243 0203 	movw	r2, #12291	@ 0x3003
 8003190:	2101      	movs	r1, #1
 8003192:	4618      	mov	r0, r3
 8003194:	f000 fdf4 	bl	8003d80 <CODEC_IO_Write>
 8003198:	4603      	mov	r3, r0
 800319a:	461a      	mov	r2, r3
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	4413      	add	r3, r2
 80031a0:	61fb      	str	r3, [r7, #28]

    /* Headphone/Speaker Enable */

    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80031a2:	8afb      	ldrh	r3, [r7, #22]
 80031a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80031a8:	d10d      	bne.n	80031c6 <wm8994_Init+0xa7a>
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0205);
 80031aa:	89fb      	ldrh	r3, [r7, #14]
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	f240 2205 	movw	r2, #517	@ 0x205
 80031b2:	2151      	movs	r1, #81	@ 0x51
 80031b4:	4618      	mov	r0, r3
 80031b6:	f000 fde3 	bl	8003d80 <CODEC_IO_Write>
 80031ba:	4603      	mov	r3, r0
 80031bc:	461a      	mov	r2, r3
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	4413      	add	r3, r2
 80031c2:	61fb      	str	r3, [r7, #28]
 80031c4:	e00b      	b.n	80031de <wm8994_Init+0xa92>
    }
    else
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0005);      
 80031c6:	89fb      	ldrh	r3, [r7, #14]
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	2205      	movs	r2, #5
 80031cc:	2151      	movs	r1, #81	@ 0x51
 80031ce:	4618      	mov	r0, r3
 80031d0:	f000 fdd6 	bl	8003d80 <CODEC_IO_Write>
 80031d4:	4603      	mov	r3, r0
 80031d6:	461a      	mov	r2, r3
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	4413      	add	r3, r2
 80031dc:	61fb      	str	r3, [r7, #28]
    }

    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 80031de:	8b7b      	ldrh	r3, [r7, #26]
 80031e0:	f443 534c 	orr.w	r3, r3, #13056	@ 0x3300
 80031e4:	f043 0303 	orr.w	r3, r3, #3
 80031e8:	837b      	strh	r3, [r7, #26]
    counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 80031ea:	89fb      	ldrh	r3, [r7, #14]
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	8b7a      	ldrh	r2, [r7, #26]
 80031f0:	2101      	movs	r1, #1
 80031f2:	4618      	mov	r0, r3
 80031f4:	f000 fdc4 	bl	8003d80 <CODEC_IO_Write>
 80031f8:	4603      	mov	r3, r0
 80031fa:	461a      	mov	r2, r3
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	4413      	add	r3, r2
 8003200:	61fb      	str	r3, [r7, #28]

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x0022);
 8003202:	89fb      	ldrh	r3, [r7, #14]
 8003204:	b2db      	uxtb	r3, r3
 8003206:	2222      	movs	r2, #34	@ 0x22
 8003208:	2160      	movs	r1, #96	@ 0x60
 800320a:	4618      	mov	r0, r3
 800320c:	f000 fdb8 	bl	8003d80 <CODEC_IO_Write>
 8003210:	4603      	mov	r3, r0
 8003212:	461a      	mov	r2, r3
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	4413      	add	r3, r2
 8003218:	61fb      	str	r3, [r7, #28]

    /* Enable Charge Pump */
    counter += CODEC_IO_Write(DeviceAddr, 0x4C, 0x9F25);
 800321a:	89fb      	ldrh	r3, [r7, #14]
 800321c:	b2db      	uxtb	r3, r3
 800321e:	f649 7225 	movw	r2, #40741	@ 0x9f25
 8003222:	214c      	movs	r1, #76	@ 0x4c
 8003224:	4618      	mov	r0, r3
 8003226:	f000 fdab 	bl	8003d80 <CODEC_IO_Write>
 800322a:	4603      	mov	r3, r0
 800322c:	461a      	mov	r2, r3
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	4413      	add	r3, r2
 8003232:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(15);
 8003234:	200f      	movs	r0, #15
 8003236:	f000 ff79 	bl	800412c <AUDIO_IO_Delay>

    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0001);
 800323a:	89fb      	ldrh	r3, [r7, #14]
 800323c:	b2db      	uxtb	r3, r3
 800323e:	2201      	movs	r2, #1
 8003240:	212d      	movs	r1, #45	@ 0x2d
 8003242:	4618      	mov	r0, r3
 8003244:	f000 fd9c 	bl	8003d80 <CODEC_IO_Write>
 8003248:	4603      	mov	r3, r0
 800324a:	461a      	mov	r2, r3
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	4413      	add	r3, r2
 8003250:	61fb      	str	r3, [r7, #28]

    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0001);
 8003252:	89fb      	ldrh	r3, [r7, #14]
 8003254:	b2db      	uxtb	r3, r3
 8003256:	2201      	movs	r2, #1
 8003258:	212e      	movs	r1, #46	@ 0x2e
 800325a:	4618      	mov	r0, r3
 800325c:	f000 fd90 	bl	8003d80 <CODEC_IO_Write>
 8003260:	4603      	mov	r3, r0
 8003262:	461a      	mov	r2, r3
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	4413      	add	r3, r2
 8003268:	61fb      	str	r3, [r7, #28]

    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0030 | 0x0300);
 800326a:	89fb      	ldrh	r3, [r7, #14]
 800326c:	b2db      	uxtb	r3, r3
 800326e:	f44f 724c 	mov.w	r2, #816	@ 0x330
 8003272:	2103      	movs	r1, #3
 8003274:	4618      	mov	r0, r3
 8003276:	f000 fd83 	bl	8003d80 <CODEC_IO_Write>
 800327a:	4603      	mov	r3, r0
 800327c:	461a      	mov	r2, r3
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	4413      	add	r3, r2
 8003282:	61fb      	str	r3, [r7, #28]

    /* Enable DC Servo and trigger start-up mode on left and right channels */
    counter += CODEC_IO_Write(DeviceAddr, 0x54, 0x0033);
 8003284:	89fb      	ldrh	r3, [r7, #14]
 8003286:	b2db      	uxtb	r3, r3
 8003288:	2233      	movs	r2, #51	@ 0x33
 800328a:	2154      	movs	r1, #84	@ 0x54
 800328c:	4618      	mov	r0, r3
 800328e:	f000 fd77 	bl	8003d80 <CODEC_IO_Write>
 8003292:	4603      	mov	r3, r0
 8003294:	461a      	mov	r2, r3
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	4413      	add	r3, r2
 800329a:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(257);
 800329c:	f240 1001 	movw	r0, #257	@ 0x101
 80032a0:	f000 ff44 	bl	800412c <AUDIO_IO_Delay>

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x00EE);
 80032a4:	89fb      	ldrh	r3, [r7, #14]
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	22ee      	movs	r2, #238	@ 0xee
 80032aa:	2160      	movs	r1, #96	@ 0x60
 80032ac:	4618      	mov	r0, r3
 80032ae:	f000 fd67 	bl	8003d80 <CODEC_IO_Write>
 80032b2:	4603      	mov	r3, r0
 80032b4:	461a      	mov	r2, r3
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	4413      	add	r3, r2
 80032ba:	61fb      	str	r3, [r7, #28]

    /* Unmutes */

    /* Unmute DAC 1 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x610, 0x00C0);
 80032bc:	89fb      	ldrh	r3, [r7, #14]
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	22c0      	movs	r2, #192	@ 0xc0
 80032c2:	f44f 61c2 	mov.w	r1, #1552	@ 0x610
 80032c6:	4618      	mov	r0, r3
 80032c8:	f000 fd5a 	bl	8003d80 <CODEC_IO_Write>
 80032cc:	4603      	mov	r3, r0
 80032ce:	461a      	mov	r2, r3
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	4413      	add	r3, r2
 80032d4:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 1 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x611, 0x00C0);
 80032d6:	89fb      	ldrh	r3, [r7, #14]
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	22c0      	movs	r2, #192	@ 0xc0
 80032dc:	f240 6111 	movw	r1, #1553	@ 0x611
 80032e0:	4618      	mov	r0, r3
 80032e2:	f000 fd4d 	bl	8003d80 <CODEC_IO_Write>
 80032e6:	4603      	mov	r3, r0
 80032e8:	461a      	mov	r2, r3
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	4413      	add	r3, r2
 80032ee:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 0 DAC path */
    counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 80032f0:	89fb      	ldrh	r3, [r7, #14]
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	2210      	movs	r2, #16
 80032f6:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 80032fa:	4618      	mov	r0, r3
 80032fc:	f000 fd40 	bl	8003d80 <CODEC_IO_Write>
 8003300:	4603      	mov	r3, r0
 8003302:	461a      	mov	r2, r3
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	4413      	add	r3, r2
 8003308:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x612, 0x00C0);
 800330a:	89fb      	ldrh	r3, [r7, #14]
 800330c:	b2db      	uxtb	r3, r3
 800330e:	22c0      	movs	r2, #192	@ 0xc0
 8003310:	f240 6112 	movw	r1, #1554	@ 0x612
 8003314:	4618      	mov	r0, r3
 8003316:	f000 fd33 	bl	8003d80 <CODEC_IO_Write>
 800331a:	4603      	mov	r3, r0
 800331c:	461a      	mov	r2, r3
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	4413      	add	r3, r2
 8003322:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x613, 0x00C0);
 8003324:	89fb      	ldrh	r3, [r7, #14]
 8003326:	b2db      	uxtb	r3, r3
 8003328:	22c0      	movs	r2, #192	@ 0xc0
 800332a:	f240 6113 	movw	r1, #1555	@ 0x613
 800332e:	4618      	mov	r0, r3
 8003330:	f000 fd26 	bl	8003d80 <CODEC_IO_Write>
 8003334:	4603      	mov	r3, r0
 8003336:	461a      	mov	r2, r3
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	4413      	add	r3, r2
 800333c:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 800333e:	89fb      	ldrh	r3, [r7, #14]
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2210      	movs	r2, #16
 8003344:	f240 4122 	movw	r1, #1058	@ 0x422
 8003348:	4618      	mov	r0, r3
 800334a:	f000 fd19 	bl	8003d80 <CODEC_IO_Write>
 800334e:	4603      	mov	r3, r0
 8003350:	461a      	mov	r2, r3
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	4413      	add	r3, r2
 8003356:	61fb      	str	r3, [r7, #28]
    
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8003358:	7afa      	ldrb	r2, [r7, #11]
 800335a:	89fb      	ldrh	r3, [r7, #14]
 800335c:	4611      	mov	r1, r2
 800335e:	4618      	mov	r0, r3
 8003360:	f000 f984 	bl	800366c <wm8994_SetVolume>
  }

  if (input_device > 0) /* Audio input selected */
 8003364:	8afb      	ldrh	r3, [r7, #22]
 8003366:	2b00      	cmp	r3, #0
 8003368:	f000 80a6 	beq.w	80034b8 <wm8994_Init+0xd6c>
  {
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 800336c:	8afb      	ldrh	r3, [r7, #22]
 800336e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003372:	d003      	beq.n	800337c <wm8994_Init+0xc30>
 8003374:	8afb      	ldrh	r3, [r7, #22]
 8003376:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800337a:	d12b      	bne.n	80033d4 <wm8994_Init+0xc88>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 800337c:	8b7b      	ldrh	r3, [r7, #26]
 800337e:	f043 0313 	orr.w	r3, r3, #19
 8003382:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8003384:	89fb      	ldrh	r3, [r7, #14]
 8003386:	b2db      	uxtb	r3, r3
 8003388:	8b7a      	ldrh	r2, [r7, #26]
 800338a:	2101      	movs	r1, #1
 800338c:	4618      	mov	r0, r3
 800338e:	f000 fcf7 	bl	8003d80 <CODEC_IO_Write>
 8003392:	4603      	mov	r3, r0
 8003394:	461a      	mov	r2, r3
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	4413      	add	r3, r2
 800339a:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 800339c:	89fb      	ldrh	r3, [r7, #14]
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	2202      	movs	r2, #2
 80033a2:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 80033a6:	4618      	mov	r0, r3
 80033a8:	f000 fcea 	bl	8003d80 <CODEC_IO_Write>
 80033ac:	4603      	mov	r3, r0
 80033ae:	461a      	mov	r2, r3
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	4413      	add	r3, r2
 80033b4:	61fb      	str	r3, [r7, #28]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x3800);
 80033b6:	89fb      	ldrh	r3, [r7, #14]
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80033be:	f240 4111 	movw	r1, #1041	@ 0x411
 80033c2:	4618      	mov	r0, r3
 80033c4:	f000 fcdc 	bl	8003d80 <CODEC_IO_Write>
 80033c8:	4603      	mov	r3, r0
 80033ca:	461a      	mov	r2, r3
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	4413      	add	r3, r2
 80033d0:	61fb      	str	r3, [r7, #28]
 80033d2:	e06b      	b.n	80034ac <wm8994_Init+0xd60>
    }
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80033d4:	8afb      	ldrh	r3, [r7, #22]
 80033d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80033da:	d139      	bne.n	8003450 <wm8994_Init+0xd04>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 80033dc:	8b7b      	ldrh	r3, [r7, #26]
 80033de:	f043 0313 	orr.w	r3, r3, #19
 80033e2:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 80033e4:	89fb      	ldrh	r3, [r7, #14]
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	8b7a      	ldrh	r2, [r7, #26]
 80033ea:	2101      	movs	r1, #1
 80033ec:	4618      	mov	r0, r3
 80033ee:	f000 fcc7 	bl	8003d80 <CODEC_IO_Write>
 80033f2:	4603      	mov	r3, r0
 80033f4:	461a      	mov	r2, r3
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	4413      	add	r3, r2
 80033fa:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 80033fc:	89fb      	ldrh	r3, [r7, #14]
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	2202      	movs	r2, #2
 8003402:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8003406:	4618      	mov	r0, r3
 8003408:	f000 fcba 	bl	8003d80 <CODEC_IO_Write>
 800340c:	4603      	mov	r3, r0
 800340e:	461a      	mov	r2, r3
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	4413      	add	r3, r2
 8003414:	61fb      	str	r3, [r7, #28]
    
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8003416:	89fb      	ldrh	r3, [r7, #14]
 8003418:	b2db      	uxtb	r3, r3
 800341a:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 800341e:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 8003422:	4618      	mov	r0, r3
 8003424:	f000 fcac 	bl	8003d80 <CODEC_IO_Write>
 8003428:	4603      	mov	r3, r0
 800342a:	461a      	mov	r2, r3
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	4413      	add	r3, r2
 8003430:	61fb      	str	r3, [r7, #28]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x1800);      
 8003432:	89fb      	ldrh	r3, [r7, #14]
 8003434:	b2db      	uxtb	r3, r3
 8003436:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 800343a:	f240 4111 	movw	r1, #1041	@ 0x411
 800343e:	4618      	mov	r0, r3
 8003440:	f000 fc9e 	bl	8003d80 <CODEC_IO_Write>
 8003444:	4603      	mov	r3, r0
 8003446:	461a      	mov	r2, r3
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	4413      	add	r3, r2
 800344c:	61fb      	str	r3, [r7, #28]
 800344e:	e02d      	b.n	80034ac <wm8994_Init+0xd60>
    }    
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 8003450:	8afb      	ldrh	r3, [r7, #22]
 8003452:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003456:	d003      	beq.n	8003460 <wm8994_Init+0xd14>
 8003458:	8afb      	ldrh	r3, [r7, #22]
 800345a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800345e:	d125      	bne.n	80034ac <wm8994_Init+0xd60>
    {

      /* Disable mute on IN1L, IN1L Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x18, 0x000B);
 8003460:	89fb      	ldrh	r3, [r7, #14]
 8003462:	b2db      	uxtb	r3, r3
 8003464:	220b      	movs	r2, #11
 8003466:	2118      	movs	r1, #24
 8003468:	4618      	mov	r0, r3
 800346a:	f000 fc89 	bl	8003d80 <CODEC_IO_Write>
 800346e:	4603      	mov	r3, r0
 8003470:	461a      	mov	r2, r3
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	4413      	add	r3, r2
 8003476:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R, IN1R Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x1A, 0x000B);
 8003478:	89fb      	ldrh	r3, [r7, #14]
 800347a:	b2db      	uxtb	r3, r3
 800347c:	220b      	movs	r2, #11
 800347e:	211a      	movs	r1, #26
 8003480:	4618      	mov	r0, r3
 8003482:	f000 fc7d 	bl	8003d80 <CODEC_IO_Write>
 8003486:	4603      	mov	r3, r0
 8003488:	461a      	mov	r2, r3
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	4413      	add	r3, r2
 800348e:	61fb      	str	r3, [r7, #28]

      /* AIF ADC1 HPF enable, HPF cut = hifi mode fc=4Hz at fs=48kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8003490:	89fb      	ldrh	r3, [r7, #14]
 8003492:	b2db      	uxtb	r3, r3
 8003494:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8003498:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 800349c:	4618      	mov	r0, r3
 800349e:	f000 fc6f 	bl	8003d80 <CODEC_IO_Write>
 80034a2:	4603      	mov	r3, r0
 80034a4:	461a      	mov	r2, r3
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	4413      	add	r3, r2
 80034aa:	61fb      	str	r3, [r7, #28]
    }
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 80034ac:	7afa      	ldrb	r2, [r7, #11]
 80034ae:	89fb      	ldrh	r3, [r7, #14]
 80034b0:	4611      	mov	r1, r2
 80034b2:	4618      	mov	r0, r3
 80034b4:	f000 f8da 	bl	800366c <wm8994_SetVolume>
  }
  /* Return communication control value */
  return counter;  
 80034b8:	69fb      	ldr	r3, [r7, #28]
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3720      	adds	r7, #32
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop

080034c4 <wm8994_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void wm8994_DeInit(void)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 80034c8:	f000 fdd2 	bl	8004070 <AUDIO_IO_DeInit>
}
 80034cc:	bf00      	nop
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <wm8994_ReadID>:
  * @brief  Get the WM8994 ID.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval The WM8994 ID 
  */
uint32_t wm8994_ReadID(uint16_t DeviceAddr)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	4603      	mov	r3, r0
 80034d8:	80fb      	strh	r3, [r7, #6]
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 80034da:	f000 fdbf 	bl	800405c <AUDIO_IO_Init>

  return ((uint32_t)AUDIO_IO_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 80034de:	88fb      	ldrh	r3, [r7, #6]
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	2100      	movs	r1, #0
 80034e4:	4618      	mov	r0, r3
 80034e6:	f000 fdf5 	bl	80040d4 <AUDIO_IO_Read>
 80034ea:	4603      	mov	r3, r0
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3708      	adds	r7, #8
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <wm8994_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	4603      	mov	r3, r0
 80034fc:	6039      	str	r1, [r7, #0]
 80034fe:	80fb      	strh	r3, [r7, #6]
 8003500:	4613      	mov	r3, r2
 8003502:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 8003504:	2300      	movs	r3, #0
 8003506:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8003508:	88fb      	ldrh	r3, [r7, #6]
 800350a:	2100      	movs	r1, #0
 800350c:	4618      	mov	r0, r3
 800350e:	f000 f9d1 	bl	80038b4 <wm8994_SetMute>
 8003512:	4602      	mov	r2, r0
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	4413      	add	r3, r2
 8003518:	60fb      	str	r3, [r7, #12]
  
  return counter;
 800351a:	68fb      	ldr	r3, [r7, #12]
}
 800351c:	4618      	mov	r0, r3
 800351e:	3710      	adds	r7, #16
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <wm8994_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Pause(uint16_t DeviceAddr)
{  
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	4603      	mov	r3, r0
 800352c:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800352e:	2300      	movs	r3, #0
 8003530:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8003532:	88fb      	ldrh	r3, [r7, #6]
 8003534:	2101      	movs	r1, #1
 8003536:	4618      	mov	r0, r3
 8003538:	f000 f9bc 	bl	80038b4 <wm8994_SetMute>
 800353c:	4602      	mov	r2, r0
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	4413      	add	r3, r2
 8003542:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x01);
 8003544:	88fb      	ldrh	r3, [r7, #6]
 8003546:	b2db      	uxtb	r3, r3
 8003548:	2201      	movs	r2, #1
 800354a:	2102      	movs	r1, #2
 800354c:	4618      	mov	r0, r3
 800354e:	f000 fc17 	bl	8003d80 <CODEC_IO_Write>
 8003552:	4603      	mov	r3, r0
 8003554:	461a      	mov	r2, r3
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	4413      	add	r3, r2
 800355a:	60fb      	str	r3, [r7, #12]
 
  return counter;
 800355c:	68fb      	ldr	r3, [r7, #12]
}
 800355e:	4618      	mov	r0, r3
 8003560:	3710      	adds	r7, #16
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}

08003566 <wm8994_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Resume(uint16_t DeviceAddr)
{
 8003566:	b580      	push	{r7, lr}
 8003568:	b084      	sub	sp, #16
 800356a:	af00      	add	r7, sp, #0
 800356c:	4603      	mov	r3, r0
 800356e:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8003570:	2300      	movs	r3, #0
 8003572:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8003574:	88fb      	ldrh	r3, [r7, #6]
 8003576:	2100      	movs	r1, #0
 8003578:	4618      	mov	r0, r3
 800357a:	f000 f99b 	bl	80038b4 <wm8994_SetMute>
 800357e:	4602      	mov	r2, r0
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	4413      	add	r3, r2
 8003584:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8003586:	68fb      	ldr	r3, [r7, #12]
}
 8003588:	4618      	mov	r0, r3
 800358a:	3710      	adds	r7, #16
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}

08003590 <wm8994_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	4603      	mov	r3, r0
 8003598:	6039      	str	r1, [r7, #0]
 800359a:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800359c:	2300      	movs	r3, #0
 800359e:	60fb      	str	r3, [r7, #12]

  if (outputEnabled != 0)
 80035a0:	4b31      	ldr	r3, [pc, #196]	@ (8003668 <wm8994_Stop+0xd8>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d05a      	beq.n	800365e <wm8994_Stop+0xce>
  {
    /* Mute the output first */
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 80035a8:	88fb      	ldrh	r3, [r7, #6]
 80035aa:	2101      	movs	r1, #1
 80035ac:	4618      	mov	r0, r3
 80035ae:	f000 f981 	bl	80038b4 <wm8994_SetMute>
 80035b2:	4602      	mov	r2, r0
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	4413      	add	r3, r2
 80035b8:	60fb      	str	r3, [r7, #12]

    if (CodecPdwnMode == CODEC_PDWN_SW)
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d04e      	beq.n	800365e <wm8994_Stop+0xce>
      /* Only output mute required*/
    }
    else /* CODEC_PDWN_HW */
    {
      /* Mute the AIF1 Timeslot 0 DAC1 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 80035c0:	88fb      	ldrh	r3, [r7, #6]
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80035c8:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 80035cc:	4618      	mov	r0, r3
 80035ce:	f000 fbd7 	bl	8003d80 <CODEC_IO_Write>
 80035d2:	4603      	mov	r3, r0
 80035d4:	461a      	mov	r2, r3
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	4413      	add	r3, r2
 80035da:	60fb      	str	r3, [r7, #12]

      /* Mute the AIF1 Timeslot 1 DAC2 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 80035dc:	88fb      	ldrh	r3, [r7, #6]
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80035e4:	f240 4122 	movw	r1, #1058	@ 0x422
 80035e8:	4618      	mov	r0, r3
 80035ea:	f000 fbc9 	bl	8003d80 <CODEC_IO_Write>
 80035ee:	4603      	mov	r3, r0
 80035f0:	461a      	mov	r2, r3
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	4413      	add	r3, r2
 80035f6:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1L_TO_HPOUT1L */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0000);
 80035f8:	88fb      	ldrh	r3, [r7, #6]
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	2200      	movs	r2, #0
 80035fe:	212d      	movs	r1, #45	@ 0x2d
 8003600:	4618      	mov	r0, r3
 8003602:	f000 fbbd 	bl	8003d80 <CODEC_IO_Write>
 8003606:	4603      	mov	r3, r0
 8003608:	461a      	mov	r2, r3
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	4413      	add	r3, r2
 800360e:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1R_TO_HPOUT1R */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0000);
 8003610:	88fb      	ldrh	r3, [r7, #6]
 8003612:	b2db      	uxtb	r3, r3
 8003614:	2200      	movs	r2, #0
 8003616:	212e      	movs	r1, #46	@ 0x2e
 8003618:	4618      	mov	r0, r3
 800361a:	f000 fbb1 	bl	8003d80 <CODEC_IO_Write>
 800361e:	4603      	mov	r3, r0
 8003620:	461a      	mov	r2, r3
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	4413      	add	r3, r2
 8003626:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1 and DAC2 */
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0000);
 8003628:	88fb      	ldrh	r3, [r7, #6]
 800362a:	b2db      	uxtb	r3, r3
 800362c:	2200      	movs	r2, #0
 800362e:	2105      	movs	r1, #5
 8003630:	4618      	mov	r0, r3
 8003632:	f000 fba5 	bl	8003d80 <CODEC_IO_Write>
 8003636:	4603      	mov	r3, r0
 8003638:	461a      	mov	r2, r3
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	4413      	add	r3, r2
 800363e:	60fb      	str	r3, [r7, #12]

      /* Reset Codec by writing in 0x0000 address register */
      counter += CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8003640:	88fb      	ldrh	r3, [r7, #6]
 8003642:	b2db      	uxtb	r3, r3
 8003644:	2200      	movs	r2, #0
 8003646:	2100      	movs	r1, #0
 8003648:	4618      	mov	r0, r3
 800364a:	f000 fb99 	bl	8003d80 <CODEC_IO_Write>
 800364e:	4603      	mov	r3, r0
 8003650:	461a      	mov	r2, r3
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	4413      	add	r3, r2
 8003656:	60fb      	str	r3, [r7, #12]

      outputEnabled = 0;
 8003658:	4b03      	ldr	r3, [pc, #12]	@ (8003668 <wm8994_Stop+0xd8>)
 800365a:	2200      	movs	r2, #0
 800365c:	601a      	str	r2, [r3, #0]
    }
  }
  return counter;
 800365e:	68fb      	ldr	r3, [r7, #12]
}
 8003660:	4618      	mov	r0, r3
 8003662:	3710      	adds	r7, #16
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}
 8003668:	20019b20 	.word	0x20019b20

0800366c <wm8994_SetVolume>:
  * @param Volume: a byte value from 0 to 255 (refer to codec registers 
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	4603      	mov	r3, r0
 8003674:	460a      	mov	r2, r1
 8003676:	80fb      	strh	r3, [r7, #6]
 8003678:	4613      	mov	r3, r2
 800367a:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 800367c:	2300      	movs	r3, #0
 800367e:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8003680:	797b      	ldrb	r3, [r7, #5]
 8003682:	2b64      	cmp	r3, #100	@ 0x64
 8003684:	d80b      	bhi.n	800369e <wm8994_SetVolume+0x32>
 8003686:	797a      	ldrb	r2, [r7, #5]
 8003688:	4613      	mov	r3, r2
 800368a:	019b      	lsls	r3, r3, #6
 800368c:	1a9b      	subs	r3, r3, r2
 800368e:	4a86      	ldr	r2, [pc, #536]	@ (80038a8 <wm8994_SetVolume+0x23c>)
 8003690:	fb82 1203 	smull	r1, r2, r2, r3
 8003694:	1152      	asrs	r2, r2, #5
 8003696:	17db      	asrs	r3, r3, #31
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	b2db      	uxtb	r3, r3
 800369c:	e000      	b.n	80036a0 <wm8994_SetVolume+0x34>
 800369e:	2364      	movs	r3, #100	@ 0x64
 80036a0:	72fb      	strb	r3, [r7, #11]

  /* Output volume */
  if (outputEnabled != 0)
 80036a2:	4b82      	ldr	r3, [pc, #520]	@ (80038ac <wm8994_SetVolume+0x240>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	f000 809b 	beq.w	80037e2 <wm8994_SetVolume+0x176>
  {
    if(convertedvol > 0x3E)
 80036ac:	7afb      	ldrb	r3, [r7, #11]
 80036ae:	2b3e      	cmp	r3, #62	@ 0x3e
 80036b0:	d93d      	bls.n	800372e <wm8994_SetVolume+0xc2>
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80036b2:	88fb      	ldrh	r3, [r7, #6]
 80036b4:	2100      	movs	r1, #0
 80036b6:	4618      	mov	r0, r3
 80036b8:	f000 f8fc 	bl	80038b4 <wm8994_SetMute>
 80036bc:	4602      	mov	r2, r0
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	4413      	add	r3, r2
 80036c2:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 80036c4:	88fb      	ldrh	r3, [r7, #6]
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	f240 127f 	movw	r2, #383	@ 0x17f
 80036cc:	211c      	movs	r1, #28
 80036ce:	4618      	mov	r0, r3
 80036d0:	f000 fb56 	bl	8003d80 <CODEC_IO_Write>
 80036d4:	4603      	mov	r3, r0
 80036d6:	461a      	mov	r2, r3
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	4413      	add	r3, r2
 80036dc:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 80036de:	88fb      	ldrh	r3, [r7, #6]
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	f240 127f 	movw	r2, #383	@ 0x17f
 80036e6:	211d      	movs	r1, #29
 80036e8:	4618      	mov	r0, r3
 80036ea:	f000 fb49 	bl	8003d80 <CODEC_IO_Write>
 80036ee:	4603      	mov	r3, r0
 80036f0:	461a      	mov	r2, r3
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	4413      	add	r3, r2
 80036f6:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 80036f8:	88fb      	ldrh	r3, [r7, #6]
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	f240 127f 	movw	r2, #383	@ 0x17f
 8003700:	2126      	movs	r1, #38	@ 0x26
 8003702:	4618      	mov	r0, r3
 8003704:	f000 fb3c 	bl	8003d80 <CODEC_IO_Write>
 8003708:	4603      	mov	r3, r0
 800370a:	461a      	mov	r2, r3
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	4413      	add	r3, r2
 8003710:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 8003712:	88fb      	ldrh	r3, [r7, #6]
 8003714:	b2db      	uxtb	r3, r3
 8003716:	f240 127f 	movw	r2, #383	@ 0x17f
 800371a:	2127      	movs	r1, #39	@ 0x27
 800371c:	4618      	mov	r0, r3
 800371e:	f000 fb2f 	bl	8003d80 <CODEC_IO_Write>
 8003722:	4603      	mov	r3, r0
 8003724:	461a      	mov	r2, r3
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	4413      	add	r3, r2
 800372a:	60fb      	str	r3, [r7, #12]
 800372c:	e059      	b.n	80037e2 <wm8994_SetVolume+0x176>
    }
    else if (Volume == 0)
 800372e:	797b      	ldrb	r3, [r7, #5]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d109      	bne.n	8003748 <wm8994_SetVolume+0xdc>
    {
      /* Mute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8003734:	88fb      	ldrh	r3, [r7, #6]
 8003736:	2101      	movs	r1, #1
 8003738:	4618      	mov	r0, r3
 800373a:	f000 f8bb 	bl	80038b4 <wm8994_SetMute>
 800373e:	4602      	mov	r2, r0
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	4413      	add	r3, r2
 8003744:	60fb      	str	r3, [r7, #12]
 8003746:	e04c      	b.n	80037e2 <wm8994_SetVolume+0x176>
    }
    else
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8003748:	88fb      	ldrh	r3, [r7, #6]
 800374a:	2100      	movs	r1, #0
 800374c:	4618      	mov	r0, r3
 800374e:	f000 f8b1 	bl	80038b4 <wm8994_SetMute>
 8003752:	4602      	mov	r2, r0
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	4413      	add	r3, r2
 8003758:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 800375a:	88fb      	ldrh	r3, [r7, #6]
 800375c:	b2d8      	uxtb	r0, r3
 800375e:	7afb      	ldrb	r3, [r7, #11]
 8003760:	b21b      	sxth	r3, r3
 8003762:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8003766:	b21b      	sxth	r3, r3
 8003768:	b29b      	uxth	r3, r3
 800376a:	461a      	mov	r2, r3
 800376c:	211c      	movs	r1, #28
 800376e:	f000 fb07 	bl	8003d80 <CODEC_IO_Write>
 8003772:	4603      	mov	r3, r0
 8003774:	461a      	mov	r2, r3
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	4413      	add	r3, r2
 800377a:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 800377c:	88fb      	ldrh	r3, [r7, #6]
 800377e:	b2d8      	uxtb	r0, r3
 8003780:	7afb      	ldrb	r3, [r7, #11]
 8003782:	b21b      	sxth	r3, r3
 8003784:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8003788:	b21b      	sxth	r3, r3
 800378a:	b29b      	uxth	r3, r3
 800378c:	461a      	mov	r2, r3
 800378e:	211d      	movs	r1, #29
 8003790:	f000 faf6 	bl	8003d80 <CODEC_IO_Write>
 8003794:	4603      	mov	r3, r0
 8003796:	461a      	mov	r2, r3
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	4413      	add	r3, r2
 800379c:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 800379e:	88fb      	ldrh	r3, [r7, #6]
 80037a0:	b2d8      	uxtb	r0, r3
 80037a2:	7afb      	ldrb	r3, [r7, #11]
 80037a4:	b21b      	sxth	r3, r3
 80037a6:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 80037aa:	b21b      	sxth	r3, r3
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	461a      	mov	r2, r3
 80037b0:	2126      	movs	r1, #38	@ 0x26
 80037b2:	f000 fae5 	bl	8003d80 <CODEC_IO_Write>
 80037b6:	4603      	mov	r3, r0
 80037b8:	461a      	mov	r2, r3
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	4413      	add	r3, r2
 80037be:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 80037c0:	88fb      	ldrh	r3, [r7, #6]
 80037c2:	b2d8      	uxtb	r0, r3
 80037c4:	7afb      	ldrb	r3, [r7, #11]
 80037c6:	b21b      	sxth	r3, r3
 80037c8:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 80037cc:	b21b      	sxth	r3, r3
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	461a      	mov	r2, r3
 80037d2:	2127      	movs	r1, #39	@ 0x27
 80037d4:	f000 fad4 	bl	8003d80 <CODEC_IO_Write>
 80037d8:	4603      	mov	r3, r0
 80037da:	461a      	mov	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	4413      	add	r3, r2
 80037e0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Input volume */
  if (inputEnabled != 0)
 80037e2:	4b33      	ldr	r3, [pc, #204]	@ (80038b0 <wm8994_SetVolume+0x244>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d059      	beq.n	800389e <wm8994_SetVolume+0x232>
  {
    convertedvol = VOLUME_IN_CONVERT(Volume);
 80037ea:	797b      	ldrb	r3, [r7, #5]
 80037ec:	2b63      	cmp	r3, #99	@ 0x63
 80037ee:	d80c      	bhi.n	800380a <wm8994_SetVolume+0x19e>
 80037f0:	797a      	ldrb	r2, [r7, #5]
 80037f2:	4613      	mov	r3, r2
 80037f4:	011b      	lsls	r3, r3, #4
 80037f6:	1a9b      	subs	r3, r3, r2
 80037f8:	011b      	lsls	r3, r3, #4
 80037fa:	4a2b      	ldr	r2, [pc, #172]	@ (80038a8 <wm8994_SetVolume+0x23c>)
 80037fc:	fb82 1203 	smull	r1, r2, r2, r3
 8003800:	1152      	asrs	r2, r2, #5
 8003802:	17db      	asrs	r3, r3, #31
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	b2db      	uxtb	r3, r3
 8003808:	e000      	b.n	800380c <wm8994_SetVolume+0x1a0>
 800380a:	23ef      	movs	r3, #239	@ 0xef
 800380c:	72fb      	strb	r3, [r7, #11]

    /* Left AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 800380e:	88fb      	ldrh	r3, [r7, #6]
 8003810:	b2d8      	uxtb	r0, r3
 8003812:	7afb      	ldrb	r3, [r7, #11]
 8003814:	b21b      	sxth	r3, r3
 8003816:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800381a:	b21b      	sxth	r3, r3
 800381c:	b29b      	uxth	r3, r3
 800381e:	461a      	mov	r2, r3
 8003820:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003824:	f000 faac 	bl	8003d80 <CODEC_IO_Write>
 8003828:	4603      	mov	r3, r0
 800382a:	461a      	mov	r2, r3
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	4413      	add	r3, r2
 8003830:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x401, convertedvol | 0x100);
 8003832:	88fb      	ldrh	r3, [r7, #6]
 8003834:	b2d8      	uxtb	r0, r3
 8003836:	7afb      	ldrb	r3, [r7, #11]
 8003838:	b21b      	sxth	r3, r3
 800383a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800383e:	b21b      	sxth	r3, r3
 8003840:	b29b      	uxth	r3, r3
 8003842:	461a      	mov	r2, r3
 8003844:	f240 4101 	movw	r1, #1025	@ 0x401
 8003848:	f000 fa9a 	bl	8003d80 <CODEC_IO_Write>
 800384c:	4603      	mov	r3, r0
 800384e:	461a      	mov	r2, r3
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	4413      	add	r3, r2
 8003854:	60fb      	str	r3, [r7, #12]

    /* Left AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x404, convertedvol | 0x100);
 8003856:	88fb      	ldrh	r3, [r7, #6]
 8003858:	b2d8      	uxtb	r0, r3
 800385a:	7afb      	ldrb	r3, [r7, #11]
 800385c:	b21b      	sxth	r3, r3
 800385e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003862:	b21b      	sxth	r3, r3
 8003864:	b29b      	uxth	r3, r3
 8003866:	461a      	mov	r2, r3
 8003868:	f240 4104 	movw	r1, #1028	@ 0x404
 800386c:	f000 fa88 	bl	8003d80 <CODEC_IO_Write>
 8003870:	4603      	mov	r3, r0
 8003872:	461a      	mov	r2, r3
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	4413      	add	r3, r2
 8003878:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x405, convertedvol | 0x100);
 800387a:	88fb      	ldrh	r3, [r7, #6]
 800387c:	b2d8      	uxtb	r0, r3
 800387e:	7afb      	ldrb	r3, [r7, #11]
 8003880:	b21b      	sxth	r3, r3
 8003882:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003886:	b21b      	sxth	r3, r3
 8003888:	b29b      	uxth	r3, r3
 800388a:	461a      	mov	r2, r3
 800388c:	f240 4105 	movw	r1, #1029	@ 0x405
 8003890:	f000 fa76 	bl	8003d80 <CODEC_IO_Write>
 8003894:	4603      	mov	r3, r0
 8003896:	461a      	mov	r2, r3
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	4413      	add	r3, r2
 800389c:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 800389e:	68fb      	ldr	r3, [r7, #12]
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3710      	adds	r7, #16
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	51eb851f 	.word	0x51eb851f
 80038ac:	20019b20 	.word	0x20019b20
 80038b0:	20019b24 	.word	0x20019b24

080038b4 <wm8994_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	4603      	mov	r3, r0
 80038bc:	6039      	str	r1, [r7, #0]
 80038be:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80038c0:	2300      	movs	r3, #0
 80038c2:	60fb      	str	r3, [r7, #12]
  
  if (outputEnabled != 0)
 80038c4:	4b21      	ldr	r3, [pc, #132]	@ (800394c <wm8994_SetMute+0x98>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d039      	beq.n	8003940 <wm8994_SetMute+0x8c>
  {
    /* Set the Mute mode */
    if(Cmd == AUDIO_MUTE_ON)
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d11c      	bne.n	800390c <wm8994_SetMute+0x58>
    {
      /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 80038d2:	88fb      	ldrh	r3, [r7, #6]
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80038da:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 80038de:	4618      	mov	r0, r3
 80038e0:	f000 fa4e 	bl	8003d80 <CODEC_IO_Write>
 80038e4:	4603      	mov	r3, r0
 80038e6:	461a      	mov	r2, r3
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	4413      	add	r3, r2
 80038ec:	60fb      	str	r3, [r7, #12]

      /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 80038ee:	88fb      	ldrh	r3, [r7, #6]
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80038f6:	f240 4122 	movw	r1, #1058	@ 0x422
 80038fa:	4618      	mov	r0, r3
 80038fc:	f000 fa40 	bl	8003d80 <CODEC_IO_Write>
 8003900:	4603      	mov	r3, r0
 8003902:	461a      	mov	r2, r3
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	4413      	add	r3, r2
 8003908:	60fb      	str	r3, [r7, #12]
 800390a:	e019      	b.n	8003940 <wm8994_SetMute+0x8c>
    }
    else /* AUDIO_MUTE_OFF Disable the Mute */
    {
      /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 800390c:	88fb      	ldrh	r3, [r7, #6]
 800390e:	b2db      	uxtb	r3, r3
 8003910:	2210      	movs	r2, #16
 8003912:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8003916:	4618      	mov	r0, r3
 8003918:	f000 fa32 	bl	8003d80 <CODEC_IO_Write>
 800391c:	4603      	mov	r3, r0
 800391e:	461a      	mov	r2, r3
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	4413      	add	r3, r2
 8003924:	60fb      	str	r3, [r7, #12]

      /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 8003926:	88fb      	ldrh	r3, [r7, #6]
 8003928:	b2db      	uxtb	r3, r3
 800392a:	2210      	movs	r2, #16
 800392c:	f240 4122 	movw	r1, #1058	@ 0x422
 8003930:	4618      	mov	r0, r3
 8003932:	f000 fa25 	bl	8003d80 <CODEC_IO_Write>
 8003936:	4603      	mov	r3, r0
 8003938:	461a      	mov	r2, r3
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	4413      	add	r3, r2
 800393e:	60fb      	str	r3, [r7, #12]
    }
  }
  return counter;
 8003940:	68fb      	ldr	r3, [r7, #12]
}
 8003942:	4618      	mov	r0, r3
 8003944:	3710      	adds	r7, #16
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	20019b20 	.word	0x20019b20

08003950 <wm8994_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0
 8003956:	4603      	mov	r3, r0
 8003958:	460a      	mov	r2, r1
 800395a:	80fb      	strh	r3, [r7, #6]
 800395c:	4613      	mov	r3, r2
 800395e:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 8003960:	2300      	movs	r3, #0
 8003962:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 8003964:	797b      	ldrb	r3, [r7, #5]
 8003966:	2b03      	cmp	r3, #3
 8003968:	f000 808c 	beq.w	8003a84 <wm8994_SetOutputMode+0x134>
 800396c:	2b03      	cmp	r3, #3
 800396e:	f300 80cb 	bgt.w	8003b08 <wm8994_SetOutputMode+0x1b8>
 8003972:	2b01      	cmp	r3, #1
 8003974:	d002      	beq.n	800397c <wm8994_SetOutputMode+0x2c>
 8003976:	2b02      	cmp	r3, #2
 8003978:	d042      	beq.n	8003a00 <wm8994_SetOutputMode+0xb0>
 800397a:	e0c5      	b.n	8003b08 <wm8994_SetOutputMode+0x1b8>
  {
  case OUTPUT_DEVICE_SPEAKER:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    Disable DAC2 (Left), Disable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 800397c:	88fb      	ldrh	r3, [r7, #6]
 800397e:	b2db      	uxtb	r3, r3
 8003980:	f640 420c 	movw	r2, #3084	@ 0xc0c
 8003984:	2105      	movs	r1, #5
 8003986:	4618      	mov	r0, r3
 8003988:	f000 f9fa 	bl	8003d80 <CODEC_IO_Write>
 800398c:	4603      	mov	r3, r0
 800398e:	461a      	mov	r2, r3
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	4413      	add	r3, r2
 8003994:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8003996:	88fb      	ldrh	r3, [r7, #6]
 8003998:	b2db      	uxtb	r3, r3
 800399a:	2200      	movs	r2, #0
 800399c:	f240 6101 	movw	r1, #1537	@ 0x601
 80039a0:	4618      	mov	r0, r3
 80039a2:	f000 f9ed 	bl	8003d80 <CODEC_IO_Write>
 80039a6:	4603      	mov	r3, r0
 80039a8:	461a      	mov	r2, r3
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	4413      	add	r3, r2
 80039ae:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 80039b0:	88fb      	ldrh	r3, [r7, #6]
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	2200      	movs	r2, #0
 80039b6:	f240 6102 	movw	r1, #1538	@ 0x602
 80039ba:	4618      	mov	r0, r3
 80039bc:	f000 f9e0 	bl	8003d80 <CODEC_IO_Write>
 80039c0:	4603      	mov	r3, r0
 80039c2:	461a      	mov	r2, r3
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	4413      	add	r3, r2
 80039c8:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 80039ca:	88fb      	ldrh	r3, [r7, #6]
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	2202      	movs	r2, #2
 80039d0:	f240 6104 	movw	r1, #1540	@ 0x604
 80039d4:	4618      	mov	r0, r3
 80039d6:	f000 f9d3 	bl	8003d80 <CODEC_IO_Write>
 80039da:	4603      	mov	r3, r0
 80039dc:	461a      	mov	r2, r3
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	4413      	add	r3, r2
 80039e2:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 80039e4:	88fb      	ldrh	r3, [r7, #6]
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	2202      	movs	r2, #2
 80039ea:	f240 6105 	movw	r1, #1541	@ 0x605
 80039ee:	4618      	mov	r0, r3
 80039f0:	f000 f9c6 	bl	8003d80 <CODEC_IO_Write>
 80039f4:	4603      	mov	r3, r0
 80039f6:	461a      	mov	r2, r3
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	4413      	add	r3, r2
 80039fc:	60fb      	str	r3, [r7, #12]
    break;
 80039fe:	e0c5      	b.n	8003b8c <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8003a00:	88fb      	ldrh	r3, [r7, #6]
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	f240 3203 	movw	r2, #771	@ 0x303
 8003a08:	2105      	movs	r1, #5
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f000 f9b8 	bl	8003d80 <CODEC_IO_Write>
 8003a10:	4603      	mov	r3, r0
 8003a12:	461a      	mov	r2, r3
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	4413      	add	r3, r2
 8003a18:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8003a1a:	88fb      	ldrh	r3, [r7, #6]
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f240 6101 	movw	r1, #1537	@ 0x601
 8003a24:	4618      	mov	r0, r3
 8003a26:	f000 f9ab 	bl	8003d80 <CODEC_IO_Write>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	4413      	add	r3, r2
 8003a32:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8003a34:	88fb      	ldrh	r3, [r7, #6]
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	2201      	movs	r2, #1
 8003a3a:	f240 6102 	movw	r1, #1538	@ 0x602
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f000 f99e 	bl	8003d80 <CODEC_IO_Write>
 8003a44:	4603      	mov	r3, r0
 8003a46:	461a      	mov	r2, r3
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	4413      	add	r3, r2
 8003a4c:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8003a4e:	88fb      	ldrh	r3, [r7, #6]
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	2200      	movs	r2, #0
 8003a54:	f240 6104 	movw	r1, #1540	@ 0x604
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f000 f991 	bl	8003d80 <CODEC_IO_Write>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	461a      	mov	r2, r3
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	4413      	add	r3, r2
 8003a66:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8003a68:	88fb      	ldrh	r3, [r7, #6]
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f240 6105 	movw	r1, #1541	@ 0x605
 8003a72:	4618      	mov	r0, r3
 8003a74:	f000 f984 	bl	8003d80 <CODEC_IO_Write>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	4413      	add	r3, r2
 8003a80:	60fb      	str	r3, [r7, #12]
    break;
 8003a82:	e083      	b.n	8003b8c <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_BOTH:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    also Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8003a84:	88fb      	ldrh	r3, [r7, #6]
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	f640 720f 	movw	r2, #3855	@ 0xf0f
 8003a8c:	2105      	movs	r1, #5
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f000 f976 	bl	8003d80 <CODEC_IO_Write>
 8003a94:	4603      	mov	r3, r0
 8003a96:	461a      	mov	r2, r3
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	4413      	add	r3, r2
 8003a9c:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8003a9e:	88fb      	ldrh	r3, [r7, #6]
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f240 6101 	movw	r1, #1537	@ 0x601
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f000 f969 	bl	8003d80 <CODEC_IO_Write>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	4413      	add	r3, r2
 8003ab6:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8003ab8:	88fb      	ldrh	r3, [r7, #6]
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	2201      	movs	r2, #1
 8003abe:	f240 6102 	movw	r1, #1538	@ 0x602
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f000 f95c 	bl	8003d80 <CODEC_IO_Write>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	461a      	mov	r2, r3
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	4413      	add	r3, r2
 8003ad0:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8003ad2:	88fb      	ldrh	r3, [r7, #6]
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	2202      	movs	r2, #2
 8003ad8:	f240 6104 	movw	r1, #1540	@ 0x604
 8003adc:	4618      	mov	r0, r3
 8003ade:	f000 f94f 	bl	8003d80 <CODEC_IO_Write>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	4413      	add	r3, r2
 8003aea:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8003aec:	88fb      	ldrh	r3, [r7, #6]
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	2202      	movs	r2, #2
 8003af2:	f240 6105 	movw	r1, #1541	@ 0x605
 8003af6:	4618      	mov	r0, r3
 8003af8:	f000 f942 	bl	8003d80 <CODEC_IO_Write>
 8003afc:	4603      	mov	r3, r0
 8003afe:	461a      	mov	r2, r3
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	4413      	add	r3, r2
 8003b04:	60fb      	str	r3, [r7, #12]
    break;
 8003b06:	e041      	b.n	8003b8c <wm8994_SetOutputMode+0x23c>
    
  default:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8003b08:	88fb      	ldrh	r3, [r7, #6]
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	f240 3203 	movw	r2, #771	@ 0x303
 8003b10:	2105      	movs	r1, #5
 8003b12:	4618      	mov	r0, r3
 8003b14:	f000 f934 	bl	8003d80 <CODEC_IO_Write>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	4413      	add	r3, r2
 8003b20:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8003b22:	88fb      	ldrh	r3, [r7, #6]
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	2201      	movs	r2, #1
 8003b28:	f240 6101 	movw	r1, #1537	@ 0x601
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f000 f927 	bl	8003d80 <CODEC_IO_Write>
 8003b32:	4603      	mov	r3, r0
 8003b34:	461a      	mov	r2, r3
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	4413      	add	r3, r2
 8003b3a:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8003b3c:	88fb      	ldrh	r3, [r7, #6]
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	2201      	movs	r2, #1
 8003b42:	f240 6102 	movw	r1, #1538	@ 0x602
 8003b46:	4618      	mov	r0, r3
 8003b48:	f000 f91a 	bl	8003d80 <CODEC_IO_Write>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	461a      	mov	r2, r3
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	4413      	add	r3, r2
 8003b54:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8003b56:	88fb      	ldrh	r3, [r7, #6]
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f240 6104 	movw	r1, #1540	@ 0x604
 8003b60:	4618      	mov	r0, r3
 8003b62:	f000 f90d 	bl	8003d80 <CODEC_IO_Write>
 8003b66:	4603      	mov	r3, r0
 8003b68:	461a      	mov	r2, r3
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	4413      	add	r3, r2
 8003b6e:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8003b70:	88fb      	ldrh	r3, [r7, #6]
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	2200      	movs	r2, #0
 8003b76:	f240 6105 	movw	r1, #1541	@ 0x605
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f000 f900 	bl	8003d80 <CODEC_IO_Write>
 8003b80:	4603      	mov	r3, r0
 8003b82:	461a      	mov	r2, r3
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	4413      	add	r3, r2
 8003b88:	60fb      	str	r3, [r7, #12]
    break;    
 8003b8a:	bf00      	nop
  }  
  return counter;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3710      	adds	r7, #16
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
	...

08003b98 <wm8994_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	6039      	str	r1, [r7, #0]
 8003ba2:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	60fb      	str	r3, [r7, #12]
 
  /*  Clock Configurations */
  switch (AudioFreq)
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	4a64      	ldr	r2, [pc, #400]	@ (8003d3c <wm8994_SetFrequency+0x1a4>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d079      	beq.n	8003ca4 <wm8994_SetFrequency+0x10c>
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	4a62      	ldr	r2, [pc, #392]	@ (8003d3c <wm8994_SetFrequency+0x1a4>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	f200 80ad 	bhi.w	8003d14 <wm8994_SetFrequency+0x17c>
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d061      	beq.n	8003c88 <wm8994_SetFrequency+0xf0>
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	f200 80a2 	bhi.w	8003d14 <wm8994_SetFrequency+0x17c>
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	f000 808e 	beq.w	8003cf8 <wm8994_SetFrequency+0x160>
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8003be2:	4293      	cmp	r3, r2
 8003be4:	f200 8096 	bhi.w	8003d14 <wm8994_SetFrequency+0x17c>
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8003bee:	d03d      	beq.n	8003c6c <wm8994_SetFrequency+0xd4>
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8003bf6:	f200 808d 	bhi.w	8003d14 <wm8994_SetFrequency+0x17c>
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	f245 6222 	movw	r2, #22050	@ 0x5622
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d06b      	beq.n	8003cdc <wm8994_SetFrequency+0x144>
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	f245 6222 	movw	r2, #22050	@ 0x5622
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	f200 8082 	bhi.w	8003d14 <wm8994_SetFrequency+0x17c>
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8003c16:	d01b      	beq.n	8003c50 <wm8994_SetFrequency+0xb8>
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8003c1e:	d879      	bhi.n	8003d14 <wm8994_SetFrequency+0x17c>
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 8003c26:	d005      	beq.n	8003c34 <wm8994_SetFrequency+0x9c>
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	f642 3211 	movw	r2, #11025	@ 0x2b11
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d046      	beq.n	8003cc0 <wm8994_SetFrequency+0x128>
 8003c32:	e06f      	b.n	8003d14 <wm8994_SetFrequency+0x17c>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8003c34:	88fb      	ldrh	r3, [r7, #6]
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	2203      	movs	r2, #3
 8003c3a:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f000 f89e 	bl	8003d80 <CODEC_IO_Write>
 8003c44:	4603      	mov	r3, r0
 8003c46:	461a      	mov	r2, r3
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	4413      	add	r3, r2
 8003c4c:	60fb      	str	r3, [r7, #12]
    break;
 8003c4e:	e06f      	b.n	8003d30 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 8003c50:	88fb      	ldrh	r3, [r7, #6]
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	2233      	movs	r2, #51	@ 0x33
 8003c56:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f000 f890 	bl	8003d80 <CODEC_IO_Write>
 8003c60:	4603      	mov	r3, r0
 8003c62:	461a      	mov	r2, r3
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	4413      	add	r3, r2
 8003c68:	60fb      	str	r3, [r7, #12]
    break;
 8003c6a:	e061      	b.n	8003d30 <wm8994_SetFrequency+0x198>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 8003c6c:	88fb      	ldrh	r3, [r7, #6]
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	2263      	movs	r2, #99	@ 0x63
 8003c72:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003c76:	4618      	mov	r0, r3
 8003c78:	f000 f882 	bl	8003d80 <CODEC_IO_Write>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	461a      	mov	r2, r3
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	4413      	add	r3, r2
 8003c84:	60fb      	str	r3, [r7, #12]
    break;
 8003c86:	e053      	b.n	8003d30 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8003c88:	88fb      	ldrh	r3, [r7, #6]
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	2283      	movs	r2, #131	@ 0x83
 8003c8e:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003c92:	4618      	mov	r0, r3
 8003c94:	f000 f874 	bl	8003d80 <CODEC_IO_Write>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	4413      	add	r3, r2
 8003ca0:	60fb      	str	r3, [r7, #12]
    break;
 8003ca2:	e045      	b.n	8003d30 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 8003ca4:	88fb      	ldrh	r3, [r7, #6]
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	22a3      	movs	r2, #163	@ 0xa3
 8003caa:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f000 f866 	bl	8003d80 <CODEC_IO_Write>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	4413      	add	r3, r2
 8003cbc:	60fb      	str	r3, [r7, #12]
    break;
 8003cbe:	e037      	b.n	8003d30 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 8003cc0:	88fb      	ldrh	r3, [r7, #6]
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	2213      	movs	r2, #19
 8003cc6:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f000 f858 	bl	8003d80 <CODEC_IO_Write>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	4413      	add	r3, r2
 8003cd8:	60fb      	str	r3, [r7, #12]
    break;
 8003cda:	e029      	b.n	8003d30 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8003cdc:	88fb      	ldrh	r3, [r7, #6]
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	2243      	movs	r2, #67	@ 0x43
 8003ce2:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f000 f84a 	bl	8003d80 <CODEC_IO_Write>
 8003cec:	4603      	mov	r3, r0
 8003cee:	461a      	mov	r2, r3
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	4413      	add	r3, r2
 8003cf4:	60fb      	str	r3, [r7, #12]
    break;
 8003cf6:	e01b      	b.n	8003d30 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 8003cf8:	88fb      	ldrh	r3, [r7, #6]
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	2273      	movs	r2, #115	@ 0x73
 8003cfe:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003d02:	4618      	mov	r0, r3
 8003d04:	f000 f83c 	bl	8003d80 <CODEC_IO_Write>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	4413      	add	r3, r2
 8003d10:	60fb      	str	r3, [r7, #12]
    break; 
 8003d12:	e00d      	b.n	8003d30 <wm8994_SetFrequency+0x198>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8003d14:	88fb      	ldrh	r3, [r7, #6]
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	2283      	movs	r2, #131	@ 0x83
 8003d1a:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f000 f82e 	bl	8003d80 <CODEC_IO_Write>
 8003d24:	4603      	mov	r3, r0
 8003d26:	461a      	mov	r2, r3
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	4413      	add	r3, r2
 8003d2c:	60fb      	str	r3, [r7, #12]
    break; 
 8003d2e:	bf00      	nop
  }
  return counter;
 8003d30:	68fb      	ldr	r3, [r7, #12]
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3710      	adds	r7, #16
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	00017700 	.word	0x00017700

08003d40 <wm8994_Reset>:
  * @brief Resets wm8994 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Reset(uint16_t DeviceAddr)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	4603      	mov	r3, r0
 8003d48:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	60fb      	str	r3, [r7, #12]
  
  /* Reset Codec by writing in 0x0000 address register */
  counter = CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8003d4e:	88fb      	ldrh	r3, [r7, #6]
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	2200      	movs	r2, #0
 8003d54:	2100      	movs	r1, #0
 8003d56:	4618      	mov	r0, r3
 8003d58:	f000 f812 	bl	8003d80 <CODEC_IO_Write>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	60fb      	str	r3, [r7, #12]
  outputEnabled = 0;
 8003d60:	4b05      	ldr	r3, [pc, #20]	@ (8003d78 <wm8994_Reset+0x38>)
 8003d62:	2200      	movs	r2, #0
 8003d64:	601a      	str	r2, [r3, #0]
  inputEnabled=0;
 8003d66:	4b05      	ldr	r3, [pc, #20]	@ (8003d7c <wm8994_Reset+0x3c>)
 8003d68:	2200      	movs	r2, #0
 8003d6a:	601a      	str	r2, [r3, #0]

  return counter;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3710      	adds	r7, #16
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	20019b20 	.word	0x20019b20
 8003d7c:	20019b24 	.word	0x20019b24

08003d80 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b084      	sub	sp, #16
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	4603      	mov	r3, r0
 8003d88:	71fb      	strb	r3, [r7, #7]
 8003d8a:	460b      	mov	r3, r1
 8003d8c:	80bb      	strh	r3, [r7, #4]
 8003d8e:	4613      	mov	r3, r2
 8003d90:	807b      	strh	r3, [r7, #2]
  uint32_t result = 0;
 8003d92:	2300      	movs	r3, #0
 8003d94:	60fb      	str	r3, [r7, #12]
  
 AUDIO_IO_Write(Addr, Reg, Value);
 8003d96:	887a      	ldrh	r2, [r7, #2]
 8003d98:	88b9      	ldrh	r1, [r7, #4]
 8003d9a:	79fb      	ldrb	r3, [r7, #7]
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f000 f96f 	bl	8004080 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	b2db      	uxtb	r3, r3
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3710      	adds	r7, #16
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
	...

08003db0 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b08c      	sub	sp, #48	@ 0x30
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	4a51      	ldr	r2, [pc, #324]	@ (8003f00 <I2Cx_MspInit+0x150>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d14d      	bne.n	8003e5c <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8003dc0:	4b50      	ldr	r3, [pc, #320]	@ (8003f04 <I2Cx_MspInit+0x154>)
 8003dc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dc4:	4a4f      	ldr	r2, [pc, #316]	@ (8003f04 <I2Cx_MspInit+0x154>)
 8003dc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003dca:	6313      	str	r3, [r2, #48]	@ 0x30
 8003dcc:	4b4d      	ldr	r3, [pc, #308]	@ (8003f04 <I2Cx_MspInit+0x154>)
 8003dce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dd4:	61bb      	str	r3, [r7, #24]
 8003dd6:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8003dd8:	2380      	movs	r3, #128	@ 0x80
 8003dda:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8003ddc:	2312      	movs	r3, #18
 8003dde:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8003de0:	2300      	movs	r3, #0
 8003de2:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8003de4:	2302      	movs	r3, #2
 8003de6:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8003de8:	2304      	movs	r3, #4
 8003dea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003dec:	f107 031c 	add.w	r3, r7, #28
 8003df0:	4619      	mov	r1, r3
 8003df2:	4845      	ldr	r0, [pc, #276]	@ (8003f08 <I2Cx_MspInit+0x158>)
 8003df4:	f001 fc3a 	bl	800566c <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8003df8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003dfc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003dfe:	f107 031c 	add.w	r3, r7, #28
 8003e02:	4619      	mov	r1, r3
 8003e04:	4840      	ldr	r0, [pc, #256]	@ (8003f08 <I2Cx_MspInit+0x158>)
 8003e06:	f001 fc31 	bl	800566c <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8003e0a:	4b3e      	ldr	r3, [pc, #248]	@ (8003f04 <I2Cx_MspInit+0x154>)
 8003e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e0e:	4a3d      	ldr	r2, [pc, #244]	@ (8003f04 <I2Cx_MspInit+0x154>)
 8003e10:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003e14:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e16:	4b3b      	ldr	r3, [pc, #236]	@ (8003f04 <I2Cx_MspInit+0x154>)
 8003e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e1a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003e1e:	617b      	str	r3, [r7, #20]
 8003e20:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8003e22:	4b38      	ldr	r3, [pc, #224]	@ (8003f04 <I2Cx_MspInit+0x154>)
 8003e24:	6a1b      	ldr	r3, [r3, #32]
 8003e26:	4a37      	ldr	r2, [pc, #220]	@ (8003f04 <I2Cx_MspInit+0x154>)
 8003e28:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003e2c:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8003e2e:	4b35      	ldr	r3, [pc, #212]	@ (8003f04 <I2Cx_MspInit+0x154>)
 8003e30:	6a1b      	ldr	r3, [r3, #32]
 8003e32:	4a34      	ldr	r2, [pc, #208]	@ (8003f04 <I2Cx_MspInit+0x154>)
 8003e34:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003e38:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	210f      	movs	r1, #15
 8003e3e:	2048      	movs	r0, #72	@ 0x48
 8003e40:	f000 fe77 	bl	8004b32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8003e44:	2048      	movs	r0, #72	@ 0x48
 8003e46:	f000 fe90 	bl	8004b6a <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	210f      	movs	r1, #15
 8003e4e:	2049      	movs	r0, #73	@ 0x49
 8003e50:	f000 fe6f 	bl	8004b32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8003e54:	2049      	movs	r0, #73	@ 0x49
 8003e56:	f000 fe88 	bl	8004b6a <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8003e5a:	e04d      	b.n	8003ef8 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8003e5c:	4b29      	ldr	r3, [pc, #164]	@ (8003f04 <I2Cx_MspInit+0x154>)
 8003e5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e60:	4a28      	ldr	r2, [pc, #160]	@ (8003f04 <I2Cx_MspInit+0x154>)
 8003e62:	f043 0302 	orr.w	r3, r3, #2
 8003e66:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e68:	4b26      	ldr	r3, [pc, #152]	@ (8003f04 <I2Cx_MspInit+0x154>)
 8003e6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e6c:	f003 0302 	and.w	r3, r3, #2
 8003e70:	613b      	str	r3, [r7, #16]
 8003e72:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8003e74:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003e78:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8003e7a:	2312      	movs	r3, #18
 8003e7c:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8003e82:	2302      	movs	r3, #2
 8003e84:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8003e86:	2304      	movs	r3, #4
 8003e88:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003e8a:	f107 031c 	add.w	r3, r7, #28
 8003e8e:	4619      	mov	r1, r3
 8003e90:	481e      	ldr	r0, [pc, #120]	@ (8003f0c <I2Cx_MspInit+0x15c>)
 8003e92:	f001 fbeb 	bl	800566c <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8003e96:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003e9a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003e9c:	f107 031c 	add.w	r3, r7, #28
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	481a      	ldr	r0, [pc, #104]	@ (8003f0c <I2Cx_MspInit+0x15c>)
 8003ea4:	f001 fbe2 	bl	800566c <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8003ea8:	4b16      	ldr	r3, [pc, #88]	@ (8003f04 <I2Cx_MspInit+0x154>)
 8003eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eac:	4a15      	ldr	r2, [pc, #84]	@ (8003f04 <I2Cx_MspInit+0x154>)
 8003eae:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003eb2:	6413      	str	r3, [r2, #64]	@ 0x40
 8003eb4:	4b13      	ldr	r3, [pc, #76]	@ (8003f04 <I2Cx_MspInit+0x154>)
 8003eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eb8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ebc:	60fb      	str	r3, [r7, #12]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8003ec0:	4b10      	ldr	r3, [pc, #64]	@ (8003f04 <I2Cx_MspInit+0x154>)
 8003ec2:	6a1b      	ldr	r3, [r3, #32]
 8003ec4:	4a0f      	ldr	r2, [pc, #60]	@ (8003f04 <I2Cx_MspInit+0x154>)
 8003ec6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003eca:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8003ecc:	4b0d      	ldr	r3, [pc, #52]	@ (8003f04 <I2Cx_MspInit+0x154>)
 8003ece:	6a1b      	ldr	r3, [r3, #32]
 8003ed0:	4a0c      	ldr	r2, [pc, #48]	@ (8003f04 <I2Cx_MspInit+0x154>)
 8003ed2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003ed6:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8003ed8:	2200      	movs	r2, #0
 8003eda:	210f      	movs	r1, #15
 8003edc:	201f      	movs	r0, #31
 8003ede:	f000 fe28 	bl	8004b32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8003ee2:	201f      	movs	r0, #31
 8003ee4:	f000 fe41 	bl	8004b6a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8003ee8:	2200      	movs	r2, #0
 8003eea:	210f      	movs	r1, #15
 8003eec:	2020      	movs	r0, #32
 8003eee:	f000 fe20 	bl	8004b32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8003ef2:	2020      	movs	r0, #32
 8003ef4:	f000 fe39 	bl	8004b6a <HAL_NVIC_EnableIRQ>
}
 8003ef8:	bf00      	nop
 8003efa:	3730      	adds	r7, #48	@ 0x30
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	20019b28 	.word	0x20019b28
 8003f04:	40023800 	.word	0x40023800
 8003f08:	40021c00 	.word	0x40021c00
 8003f0c:	40020400 	.word	0x40020400

08003f10 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b082      	sub	sp, #8
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f002 f9d1 	bl	80062c0 <HAL_I2C_GetState>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d125      	bne.n	8003f70 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	4a14      	ldr	r2, [pc, #80]	@ (8003f78 <I2Cx_Init+0x68>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d103      	bne.n	8003f34 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	4a13      	ldr	r2, [pc, #76]	@ (8003f7c <I2Cx_Init+0x6c>)
 8003f30:	601a      	str	r2, [r3, #0]
 8003f32:	e002      	b.n	8003f3a <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	4a12      	ldr	r2, [pc, #72]	@ (8003f80 <I2Cx_Init+0x70>)
 8003f38:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a11      	ldr	r2, [pc, #68]	@ (8003f84 <I2Cx_Init+0x74>)
 8003f3e:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f7ff ff23 	bl	8003db0 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f001 fe9a 	bl	8005ca4 <HAL_I2C_Init>
  }
}
 8003f70:	bf00      	nop
 8003f72:	3708      	adds	r7, #8
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	20019b28 	.word	0x20019b28
 8003f7c:	40005c00 	.word	0x40005c00
 8003f80:	40005400 	.word	0x40005400
 8003f84:	40912732 	.word	0x40912732

08003f88 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b08a      	sub	sp, #40	@ 0x28
 8003f8c:	af04      	add	r7, sp, #16
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	4608      	mov	r0, r1
 8003f92:	4611      	mov	r1, r2
 8003f94:	461a      	mov	r2, r3
 8003f96:	4603      	mov	r3, r0
 8003f98:	72fb      	strb	r3, [r7, #11]
 8003f9a:	460b      	mov	r3, r1
 8003f9c:	813b      	strh	r3, [r7, #8]
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003fa6:	7afb      	ldrb	r3, [r7, #11]
 8003fa8:	b299      	uxth	r1, r3
 8003faa:	88f8      	ldrh	r0, [r7, #6]
 8003fac:	893a      	ldrh	r2, [r7, #8]
 8003fae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003fb2:	9302      	str	r3, [sp, #8]
 8003fb4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003fb6:	9301      	str	r3, [sp, #4]
 8003fb8:	6a3b      	ldr	r3, [r7, #32]
 8003fba:	9300      	str	r3, [sp, #0]
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	68f8      	ldr	r0, [r7, #12]
 8003fc0:	f002 f864 	bl	800608c <HAL_I2C_Mem_Read>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8003fc8:	7dfb      	ldrb	r3, [r7, #23]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d004      	beq.n	8003fd8 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8003fce:	7afb      	ldrb	r3, [r7, #11]
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	68f8      	ldr	r0, [r7, #12]
 8003fd4:	f000 f832 	bl	800403c <I2Cx_Error>
  }
  return status;    
 8003fd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3718      	adds	r7, #24
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}

08003fe2 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8003fe2:	b580      	push	{r7, lr}
 8003fe4:	b08a      	sub	sp, #40	@ 0x28
 8003fe6:	af04      	add	r7, sp, #16
 8003fe8:	60f8      	str	r0, [r7, #12]
 8003fea:	4608      	mov	r0, r1
 8003fec:	4611      	mov	r1, r2
 8003fee:	461a      	mov	r2, r3
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	72fb      	strb	r3, [r7, #11]
 8003ff4:	460b      	mov	r3, r1
 8003ff6:	813b      	strh	r3, [r7, #8]
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8004000:	7afb      	ldrb	r3, [r7, #11]
 8004002:	b299      	uxth	r1, r3
 8004004:	88f8      	ldrh	r0, [r7, #6]
 8004006:	893a      	ldrh	r2, [r7, #8]
 8004008:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800400c:	9302      	str	r3, [sp, #8]
 800400e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004010:	9301      	str	r3, [sp, #4]
 8004012:	6a3b      	ldr	r3, [r7, #32]
 8004014:	9300      	str	r3, [sp, #0]
 8004016:	4603      	mov	r3, r0
 8004018:	68f8      	ldr	r0, [r7, #12]
 800401a:	f001 ff23 	bl	8005e64 <HAL_I2C_Mem_Write>
 800401e:	4603      	mov	r3, r0
 8004020:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8004022:	7dfb      	ldrb	r3, [r7, #23]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d004      	beq.n	8004032 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8004028:	7afb      	ldrb	r3, [r7, #11]
 800402a:	4619      	mov	r1, r3
 800402c:	68f8      	ldr	r0, [r7, #12]
 800402e:	f000 f805 	bl	800403c <I2Cx_Error>
  }
  return status;
 8004032:	7dfb      	ldrb	r3, [r7, #23]
}
 8004034:	4618      	mov	r0, r3
 8004036:	3718      	adds	r7, #24
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}

0800403c <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b082      	sub	sp, #8
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	460b      	mov	r3, r1
 8004046:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f001 fec7 	bl	8005ddc <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f7ff ff5e 	bl	8003f10 <I2Cx_Init>
}
 8004054:	bf00      	nop
 8004056:	3708      	adds	r7, #8
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <AUDIO_IO_Init>:
/**
  * @brief  Initializes Audio low level.
  * @retval None
  */
void AUDIO_IO_Init(void) 
{
 800405c:	b580      	push	{r7, lr}
 800405e:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8004060:	4802      	ldr	r0, [pc, #8]	@ (800406c <AUDIO_IO_Init+0x10>)
 8004062:	f7ff ff55 	bl	8003f10 <I2Cx_Init>
}
 8004066:	bf00      	nop
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	20019b28 	.word	0x20019b28

08004070 <AUDIO_IO_DeInit>:
/**
  * @brief  Deinitializes Audio low level.
  * @retval None
  */
void AUDIO_IO_DeInit(void)
{
 8004070:	b480      	push	{r7}
 8004072:	af00      	add	r7, sp, #0
}
 8004074:	bf00      	nop
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr
	...

08004080 <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b086      	sub	sp, #24
 8004084:	af02      	add	r7, sp, #8
 8004086:	4603      	mov	r3, r0
 8004088:	71fb      	strb	r3, [r7, #7]
 800408a:	460b      	mov	r3, r1
 800408c:	80bb      	strh	r3, [r7, #4]
 800408e:	4613      	mov	r3, r2
 8004090:	807b      	strh	r3, [r7, #2]
  uint16_t tmp = Value;
 8004092:	887b      	ldrh	r3, [r7, #2]
 8004094:	81fb      	strh	r3, [r7, #14]
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
 8004096:	89fb      	ldrh	r3, [r7, #14]
 8004098:	0a1b      	lsrs	r3, r3, #8
 800409a:	b29b      	uxth	r3, r3
 800409c:	807b      	strh	r3, [r7, #2]
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 800409e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80040a2:	021b      	lsls	r3, r3, #8
 80040a4:	b21a      	sxth	r2, r3
 80040a6:	887b      	ldrh	r3, [r7, #2]
 80040a8:	b21b      	sxth	r3, r3
 80040aa:	4313      	orrs	r3, r2
 80040ac:	b21b      	sxth	r3, r3
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	807b      	strh	r3, [r7, #2]
  
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 80040b2:	88ba      	ldrh	r2, [r7, #4]
 80040b4:	79f9      	ldrb	r1, [r7, #7]
 80040b6:	2302      	movs	r3, #2
 80040b8:	9301      	str	r3, [sp, #4]
 80040ba:	1cbb      	adds	r3, r7, #2
 80040bc:	9300      	str	r3, [sp, #0]
 80040be:	2302      	movs	r3, #2
 80040c0:	4803      	ldr	r0, [pc, #12]	@ (80040d0 <AUDIO_IO_Write+0x50>)
 80040c2:	f7ff ff8e 	bl	8003fe2 <I2Cx_WriteMultiple>
}
 80040c6:	bf00      	nop
 80040c8:	3710      	adds	r7, #16
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	20019b28 	.word	0x20019b28

080040d4 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint16_t AUDIO_IO_Read(uint8_t Addr, uint16_t Reg)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b086      	sub	sp, #24
 80040d8:	af02      	add	r7, sp, #8
 80040da:	4603      	mov	r3, r0
 80040dc:	460a      	mov	r2, r1
 80040de:	71fb      	strb	r3, [r7, #7]
 80040e0:	4613      	mov	r3, r2
 80040e2:	80bb      	strh	r3, [r7, #4]
  uint16_t read_value = 0, tmp = 0;
 80040e4:	2300      	movs	r3, #0
 80040e6:	81bb      	strh	r3, [r7, #12]
 80040e8:	2300      	movs	r3, #0
 80040ea:	81fb      	strh	r3, [r7, #14]
  
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 80040ec:	88ba      	ldrh	r2, [r7, #4]
 80040ee:	79f9      	ldrb	r1, [r7, #7]
 80040f0:	2302      	movs	r3, #2
 80040f2:	9301      	str	r3, [sp, #4]
 80040f4:	f107 030c 	add.w	r3, r7, #12
 80040f8:	9300      	str	r3, [sp, #0]
 80040fa:	2302      	movs	r3, #2
 80040fc:	480a      	ldr	r0, [pc, #40]	@ (8004128 <AUDIO_IO_Read+0x54>)
 80040fe:	f7ff ff43 	bl	8003f88 <I2Cx_ReadMultiple>
  
  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
 8004102:	89bb      	ldrh	r3, [r7, #12]
 8004104:	0a1b      	lsrs	r3, r3, #8
 8004106:	81fb      	strh	r3, [r7, #14]
  
  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 8004108:	89bb      	ldrh	r3, [r7, #12]
 800410a:	b21b      	sxth	r3, r3
 800410c:	021b      	lsls	r3, r3, #8
 800410e:	b21a      	sxth	r2, r3
 8004110:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004114:	4313      	orrs	r3, r2
 8004116:	b21b      	sxth	r3, r3
 8004118:	81fb      	strh	r3, [r7, #14]
  
  read_value = tmp;
 800411a:	89fb      	ldrh	r3, [r7, #14]
 800411c:	81bb      	strh	r3, [r7, #12]
  
  return read_value;
 800411e:	89bb      	ldrh	r3, [r7, #12]
}
 8004120:	4618      	mov	r0, r3
 8004122:	3710      	adds	r7, #16
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}
 8004128:	20019b28 	.word	0x20019b28

0800412c <AUDIO_IO_Delay>:
  * @brief  AUDIO Codec delay 
  * @param  Delay: Delay in ms
  * @retval None
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b082      	sub	sp, #8
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f000 fbfd 	bl	8004934 <HAL_Delay>
}
 800413a:	bf00      	nop
 800413c:	3708      	adds	r7, #8
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
	...

08004144 <HAL_SAI_ErrorCallback>:
  * @brief  SAI error callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  HAL_SAI_StateTypeDef audio_out_state;
  HAL_SAI_StateTypeDef audio_in_state;

  audio_out_state = HAL_SAI_GetState(&haudio_out_sai);
 800414c:	480e      	ldr	r0, [pc, #56]	@ (8004188 <HAL_SAI_ErrorCallback+0x44>)
 800414e:	f004 f951 	bl	80083f4 <HAL_SAI_GetState>
 8004152:	4603      	mov	r3, r0
 8004154:	73fb      	strb	r3, [r7, #15]
  audio_in_state = HAL_SAI_GetState(&haudio_in_sai);
 8004156:	480d      	ldr	r0, [pc, #52]	@ (800418c <HAL_SAI_ErrorCallback+0x48>)
 8004158:	f004 f94c 	bl	80083f4 <HAL_SAI_GetState>
 800415c:	4603      	mov	r3, r0
 800415e:	73bb      	strb	r3, [r7, #14]

  /* Determines if it is an audio out or audio in error */
  if ((audio_out_state == HAL_SAI_STATE_BUSY) || (audio_out_state == HAL_SAI_STATE_BUSY_TX))
 8004160:	7bfb      	ldrb	r3, [r7, #15]
 8004162:	2b02      	cmp	r3, #2
 8004164:	d002      	beq.n	800416c <HAL_SAI_ErrorCallback+0x28>
 8004166:	7bfb      	ldrb	r3, [r7, #15]
 8004168:	2b12      	cmp	r3, #18
 800416a:	d101      	bne.n	8004170 <HAL_SAI_ErrorCallback+0x2c>
  {
    BSP_AUDIO_OUT_Error_CallBack();
 800416c:	f000 f810 	bl	8004190 <BSP_AUDIO_OUT_Error_CallBack>
  }

  if ((audio_in_state == HAL_SAI_STATE_BUSY) || (audio_in_state == HAL_SAI_STATE_BUSY_RX))
 8004170:	7bbb      	ldrb	r3, [r7, #14]
 8004172:	2b02      	cmp	r3, #2
 8004174:	d002      	beq.n	800417c <HAL_SAI_ErrorCallback+0x38>
 8004176:	7bbb      	ldrb	r3, [r7, #14]
 8004178:	2b22      	cmp	r3, #34	@ 0x22
 800417a:	d101      	bne.n	8004180 <HAL_SAI_ErrorCallback+0x3c>
  {
    BSP_AUDIO_IN_Error_CallBack();
 800417c:	f000 f9f6 	bl	800456c <BSP_AUDIO_IN_Error_CallBack>
  }
}
 8004180:	bf00      	nop
 8004182:	3710      	adds	r7, #16
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}
 8004188:	20019b80 	.word	0x20019b80
 800418c:	20019c04 	.word	0x20019c04

08004190 <BSP_AUDIO_OUT_Error_CallBack>:
/**
  * @brief  Manages the DMA FIFO error event.
  * @retval None
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(void)
{
 8004190:	b480      	push	{r7}
 8004192:	af00      	add	r7, sp, #0
}
 8004194:	bf00      	nop
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr
	...

080041a0 <BSP_AUDIO_OUT_MspInit>:
  * @param  hsai: SAI handle
  * @param  Params
  * @retval None
  */
__weak void BSP_AUDIO_OUT_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{ 
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b08c      	sub	sp, #48	@ 0x30
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_sai_tx;
  GPIO_InitTypeDef  gpio_init_structure;  

  /* Enable SAI clock */
  AUDIO_OUT_SAIx_CLK_ENABLE();
 80041aa:	4b63      	ldr	r3, [pc, #396]	@ (8004338 <BSP_AUDIO_OUT_MspInit+0x198>)
 80041ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041ae:	4a62      	ldr	r2, [pc, #392]	@ (8004338 <BSP_AUDIO_OUT_MspInit+0x198>)
 80041b0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80041b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80041b6:	4b60      	ldr	r3, [pc, #384]	@ (8004338 <BSP_AUDIO_OUT_MspInit+0x198>)
 80041b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80041be:	61bb      	str	r3, [r7, #24]
 80041c0:	69bb      	ldr	r3, [r7, #24]
  
  /* Enable GPIO clock */
  AUDIO_OUT_SAIx_MCLK_ENABLE();
 80041c2:	4b5d      	ldr	r3, [pc, #372]	@ (8004338 <BSP_AUDIO_OUT_MspInit+0x198>)
 80041c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041c6:	4a5c      	ldr	r2, [pc, #368]	@ (8004338 <BSP_AUDIO_OUT_MspInit+0x198>)
 80041c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80041ce:	4b5a      	ldr	r3, [pc, #360]	@ (8004338 <BSP_AUDIO_OUT_MspInit+0x198>)
 80041d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041d6:	617b      	str	r3, [r7, #20]
 80041d8:	697b      	ldr	r3, [r7, #20]
  AUDIO_OUT_SAIx_SCK_SD_ENABLE();
 80041da:	4b57      	ldr	r3, [pc, #348]	@ (8004338 <BSP_AUDIO_OUT_MspInit+0x198>)
 80041dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041de:	4a56      	ldr	r2, [pc, #344]	@ (8004338 <BSP_AUDIO_OUT_MspInit+0x198>)
 80041e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80041e6:	4b54      	ldr	r3, [pc, #336]	@ (8004338 <BSP_AUDIO_OUT_MspInit+0x198>)
 80041e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041ee:	613b      	str	r3, [r7, #16]
 80041f0:	693b      	ldr	r3, [r7, #16]
  AUDIO_OUT_SAIx_FS_ENABLE();
 80041f2:	4b51      	ldr	r3, [pc, #324]	@ (8004338 <BSP_AUDIO_OUT_MspInit+0x198>)
 80041f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041f6:	4a50      	ldr	r2, [pc, #320]	@ (8004338 <BSP_AUDIO_OUT_MspInit+0x198>)
 80041f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80041fe:	4b4e      	ldr	r3, [pc, #312]	@ (8004338 <BSP_AUDIO_OUT_MspInit+0x198>)
 8004200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004202:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004206:	60fb      	str	r3, [r7, #12]
 8004208:	68fb      	ldr	r3, [r7, #12]
  /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN;
 800420a:	2380      	movs	r3, #128	@ 0x80
 800420c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800420e:	2302      	movs	r3, #2
 8004210:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8004212:	2300      	movs	r3, #0
 8004214:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8004216:	2303      	movs	r3, #3
 8004218:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 800421a:	230a      	movs	r3, #10
 800421c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
 800421e:	f107 031c 	add.w	r3, r7, #28
 8004222:	4619      	mov	r1, r3
 8004224:	4845      	ldr	r0, [pc, #276]	@ (800433c <BSP_AUDIO_OUT_MspInit+0x19c>)
 8004226:	f001 fa21 	bl	800566c <HAL_GPIO_Init>

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_SCK_PIN;
 800422a:	2320      	movs	r3, #32
 800422c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800422e:	2302      	movs	r3, #2
 8004230:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8004232:	2300      	movs	r3, #0
 8004234:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8004236:	2303      	movs	r3, #3
 8004238:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SCK_AF;
 800423a:	230a      	movs	r3, #10
 800423c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 800423e:	f107 031c 	add.w	r3, r7, #28
 8004242:	4619      	mov	r1, r3
 8004244:	483d      	ldr	r0, [pc, #244]	@ (800433c <BSP_AUDIO_OUT_MspInit+0x19c>)
 8004246:	f001 fa11 	bl	800566c <HAL_GPIO_Init>

  gpio_init_structure.Pin =  AUDIO_OUT_SAIx_SD_PIN;
 800424a:	2340      	movs	r3, #64	@ 0x40
 800424c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800424e:	2302      	movs	r3, #2
 8004250:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8004252:	2300      	movs	r3, #0
 8004254:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8004256:	2303      	movs	r3, #3
 8004258:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 800425a:	230a      	movs	r3, #10
 800425c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 800425e:	f107 031c 	add.w	r3, r7, #28
 8004262:	4619      	mov	r1, r3
 8004264:	4835      	ldr	r0, [pc, #212]	@ (800433c <BSP_AUDIO_OUT_MspInit+0x19c>)
 8004266:	f001 fa01 	bl	800566c <HAL_GPIO_Init>

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 800426a:	2310      	movs	r3, #16
 800426c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800426e:	2302      	movs	r3, #2
 8004270:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8004272:	2300      	movs	r3, #0
 8004274:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8004276:	2303      	movs	r3, #3
 8004278:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 800427a:	230a      	movs	r3, #10
 800427c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 800427e:	f107 031c 	add.w	r3, r7, #28
 8004282:	4619      	mov	r1, r3
 8004284:	482d      	ldr	r0, [pc, #180]	@ (800433c <BSP_AUDIO_OUT_MspInit+0x19c>)
 8004286:	f001 f9f1 	bl	800566c <HAL_GPIO_Init>

  /* Enable the DMA clock */
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 800428a:	4b2b      	ldr	r3, [pc, #172]	@ (8004338 <BSP_AUDIO_OUT_MspInit+0x198>)
 800428c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800428e:	4a2a      	ldr	r2, [pc, #168]	@ (8004338 <BSP_AUDIO_OUT_MspInit+0x198>)
 8004290:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004294:	6313      	str	r3, [r2, #48]	@ 0x30
 8004296:	4b28      	ldr	r3, [pc, #160]	@ (8004338 <BSP_AUDIO_OUT_MspInit+0x198>)
 8004298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800429a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800429e:	60bb      	str	r3, [r7, #8]
 80042a0:	68bb      	ldr	r3, [r7, #8]
    
  if(hsai->Instance == AUDIO_OUT_SAIx)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a26      	ldr	r2, [pc, #152]	@ (8004340 <BSP_AUDIO_OUT_MspInit+0x1a0>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d138      	bne.n	800431e <BSP_AUDIO_OUT_MspInit+0x17e>
  {
    /* Configure the hdma_saiTx handle parameters */   
    hdma_sai_tx.Init.Channel             = AUDIO_OUT_SAIx_DMAx_CHANNEL;
 80042ac:	4b25      	ldr	r3, [pc, #148]	@ (8004344 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80042ae:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80042b2:	605a      	str	r2, [r3, #4]
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 80042b4:	4b23      	ldr	r3, [pc, #140]	@ (8004344 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80042b6:	2240      	movs	r2, #64	@ 0x40
 80042b8:	609a      	str	r2, [r3, #8]
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 80042ba:	4b22      	ldr	r3, [pc, #136]	@ (8004344 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80042bc:	2200      	movs	r2, #0
 80042be:	60da      	str	r2, [r3, #12]
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
 80042c0:	4b20      	ldr	r3, [pc, #128]	@ (8004344 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80042c2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80042c6:	611a      	str	r2, [r3, #16]
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
 80042c8:	4b1e      	ldr	r3, [pc, #120]	@ (8004344 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80042ca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80042ce:	615a      	str	r2, [r3, #20]
    hdma_sai_tx.Init.MemDataAlignment    = AUDIO_OUT_SAIx_DMAx_MEM_DATA_SIZE;
 80042d0:	4b1c      	ldr	r3, [pc, #112]	@ (8004344 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80042d2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80042d6:	619a      	str	r2, [r3, #24]
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
 80042d8:	4b1a      	ldr	r3, [pc, #104]	@ (8004344 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80042da:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80042de:	61da      	str	r2, [r3, #28]
    hdma_sai_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 80042e0:	4b18      	ldr	r3, [pc, #96]	@ (8004344 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80042e2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80042e6:	621a      	str	r2, [r3, #32]
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 80042e8:	4b16      	ldr	r3, [pc, #88]	@ (8004344 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80042ea:	2204      	movs	r2, #4
 80042ec:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sai_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80042ee:	4b15      	ldr	r3, [pc, #84]	@ (8004344 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80042f0:	2203      	movs	r2, #3
 80042f2:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sai_tx.Init.MemBurst            = DMA_MBURST_SINGLE;
 80042f4:	4b13      	ldr	r3, [pc, #76]	@ (8004344 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80042f6:	2200      	movs	r2, #0
 80042f8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80042fa:	4b12      	ldr	r3, [pc, #72]	@ (8004344 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80042fc:	2200      	movs	r2, #0
 80042fe:	631a      	str	r2, [r3, #48]	@ 0x30
    
    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 8004300:	4b10      	ldr	r3, [pc, #64]	@ (8004344 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004302:	4a11      	ldr	r2, [pc, #68]	@ (8004348 <BSP_AUDIO_OUT_MspInit+0x1a8>)
 8004304:	601a      	str	r2, [r3, #0]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4a0e      	ldr	r2, [pc, #56]	@ (8004344 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800430a:	66da      	str	r2, [r3, #108]	@ 0x6c
 800430c:	4a0d      	ldr	r2, [pc, #52]	@ (8004344 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6393      	str	r3, [r2, #56]	@ 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_tx);
 8004312:	480c      	ldr	r0, [pc, #48]	@ (8004344 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004314:	f000 fde4 	bl	8004ee0 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_tx);      
 8004318:	480a      	ldr	r0, [pc, #40]	@ (8004344 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800431a:	f000 fd33 	bl	8004d84 <HAL_DMA_Init>
  }
  
  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 800431e:	2200      	movs	r2, #0
 8004320:	210e      	movs	r1, #14
 8004322:	203c      	movs	r0, #60	@ 0x3c
 8004324:	f000 fc05 	bl	8004b32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ); 
 8004328:	203c      	movs	r0, #60	@ 0x3c
 800432a:	f000 fc1e 	bl	8004b6a <HAL_NVIC_EnableIRQ>
}
 800432e:	bf00      	nop
 8004330:	3730      	adds	r7, #48	@ 0x30
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	40023800 	.word	0x40023800
 800433c:	40022000 	.word	0x40022000
 8004340:	40015c04 	.word	0x40015c04
 8004344:	20019c88 	.word	0x20019c88
 8004348:	40026470 	.word	0x40026470

0800434c <BSP_AUDIO_OUT_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application     
  * @retval None
  */
__weak void BSP_AUDIO_OUT_ClockConfig(SAI_HandleTypeDef *hsai, uint32_t AudioFreq, void *Params)
{ 
 800434c:	b580      	push	{r7, lr}
 800434e:	b0a6      	sub	sp, #152	@ 0x98
 8004350:	af00      	add	r7, sp, #0
 8004352:	60f8      	str	r0, [r7, #12]
 8004354:	60b9      	str	r1, [r7, #8]
 8004356:	607a      	str	r2, [r7, #4]
  RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;

  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 8004358:	f107 0314 	add.w	r3, r7, #20
 800435c:	4618      	mov	r0, r3
 800435e:	f003 fb49 	bl	80079f4 <HAL_RCCEx_GetPeriphCLKConfig>
  
  /* Set the PLL configuration according to the audio frequency */
  if((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K) || (AudioFreq == AUDIO_FREQUENCY_44K))
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	f642 3211 	movw	r2, #11025	@ 0x2b11
 8004368:	4293      	cmp	r3, r2
 800436a:	d009      	beq.n	8004380 <BSP_AUDIO_OUT_ClockConfig+0x34>
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	f245 6222 	movw	r2, #22050	@ 0x5622
 8004372:	4293      	cmp	r3, r2
 8004374:	d004      	beq.n	8004380 <BSP_AUDIO_OUT_ClockConfig+0x34>
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	f64a 4244 	movw	r2, #44100	@ 0xac44
 800437c:	4293      	cmp	r3, r2
 800437e:	d112      	bne.n	80043a6 <BSP_AUDIO_OUT_ClockConfig+0x5a>
  {
    /* Configure PLLI2S prescalers */
    /* PLLI2S_VCO: VCO_429M
    I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 429/2 = 214.5 Mhz
    I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 214.5/19 = 11.289 Mhz */
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8004380:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004384:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8004386:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800438a:	657b      	str	r3, [r7, #84]	@ 0x54
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 429;
 800438c:	f240 13ad 	movw	r3, #429	@ 0x1ad
 8004390:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 2;
 8004392:	2302      	movs	r3, #2
 8004394:	623b      	str	r3, [r7, #32]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 19;
 8004396:	2313      	movs	r3, #19
 8004398:	63bb      	str	r3, [r7, #56]	@ 0x38
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 800439a:	f107 0314 	add.w	r3, r7, #20
 800439e:	4618      	mov	r0, r3
 80043a0:	f002 ff38 	bl	8007214 <HAL_RCCEx_PeriphCLKConfig>
 80043a4:	e012      	b.n	80043cc <BSP_AUDIO_OUT_ClockConfig+0x80>
  {
    /* I2S clock config
    PLLI2S_VCO: VCO_344M
    I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 344/7 = 49.142 Mhz
    I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 49.142/1 = 49.142 Mhz */
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 80043a6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80043aa:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 80043ac:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80043b0:	657b      	str	r3, [r7, #84]	@ 0x54
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 344;
 80043b2:	f44f 73ac 	mov.w	r3, #344	@ 0x158
 80043b6:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 7;
 80043b8:	2307      	movs	r3, #7
 80043ba:	623b      	str	r3, [r7, #32]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 1;
 80043bc:	2301      	movs	r3, #1
 80043be:	63bb      	str	r3, [r7, #56]	@ 0x38
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 80043c0:	f107 0314 	add.w	r3, r7, #20
 80043c4:	4618      	mov	r0, r3
 80043c6:	f002 ff25 	bl	8007214 <HAL_RCCEx_PeriphCLKConfig>
  }
}
 80043ca:	bf00      	nop
 80043cc:	bf00      	nop
 80043ce:	3798      	adds	r7, #152	@ 0x98
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <BSP_AUDIO_IN_Init>:
  * @param  BitRes: Audio frequency to be configured.
  * @param  ChnlNbr: Channel number.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_Init(uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	60b9      	str	r1, [r7, #8]
 80043de:	607a      	str	r2, [r7, #4]
  return BSP_AUDIO_IN_InitEx(INPUT_DEVICE_DIGITAL_MICROPHONE_2, AudioFreq, BitRes, ChnlNbr); 
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	68ba      	ldr	r2, [r7, #8]
 80043e4:	68f9      	ldr	r1, [r7, #12]
 80043e6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80043ea:	f000 f805 	bl	80043f8 <BSP_AUDIO_IN_InitEx>
 80043ee:	4603      	mov	r3, r0
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3710      	adds	r7, #16
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}

080043f8 <BSP_AUDIO_IN_InitEx>:
  * @param  BitRes: Audio frequency to be configured.
  * @param  ChnlNbr: Channel number.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_InitEx(uint16_t InputDevice, uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr)
{
 80043f8:	b590      	push	{r4, r7, lr}
 80043fa:	b089      	sub	sp, #36	@ 0x24
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	60b9      	str	r1, [r7, #8]
 8004400:	607a      	str	r2, [r7, #4]
 8004402:	603b      	str	r3, [r7, #0]
 8004404:	4603      	mov	r3, r0
 8004406:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = AUDIO_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	77fb      	strb	r3, [r7, #31]
  uint32_t deviceid = 0x00;
 800440c:	2300      	movs	r3, #0
 800440e:	617b      	str	r3, [r7, #20]
  uint32_t slot_active;

  if ((InputDevice != INPUT_DEVICE_INPUT_LINE_1) &&       /* Only INPUT_LINE_1 and MICROPHONE_2 inputs supported */
 8004410:	89fb      	ldrh	r3, [r7, #14]
 8004412:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004416:	d006      	beq.n	8004426 <BSP_AUDIO_IN_InitEx+0x2e>
 8004418:	89fb      	ldrh	r3, [r7, #14]
 800441a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800441e:	d002      	beq.n	8004426 <BSP_AUDIO_IN_InitEx+0x2e>
      (InputDevice != INPUT_DEVICE_DIGITAL_MICROPHONE_2))
  {
    ret = AUDIO_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	77fb      	strb	r3, [r7, #31]
 8004424:	e046      	b.n	80044b4 <BSP_AUDIO_IN_InitEx+0xbc>
  }
  else
  {
    /* Disable SAI */
    SAIx_In_DeInit();
 8004426:	f000 fa11 	bl	800484c <SAIx_In_DeInit>

    /* PLL clock is set depending on the AudioFreq (44.1khz vs 48khz groups) */
    BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL); /* Clock config is shared between AUDIO IN and OUT */
 800442a:	2200      	movs	r2, #0
 800442c:	68b9      	ldr	r1, [r7, #8]
 800442e:	4824      	ldr	r0, [pc, #144]	@ (80044c0 <BSP_AUDIO_IN_InitEx+0xc8>)
 8004430:	f7ff ff8c 	bl	800434c <BSP_AUDIO_OUT_ClockConfig>

    /* SAI data transfer preparation:
    Prepare the Media to be used for the audio transfer from SAI peripheral to memory */
    haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8004434:	4b22      	ldr	r3, [pc, #136]	@ (80044c0 <BSP_AUDIO_IN_InitEx+0xc8>)
 8004436:	4a23      	ldr	r2, [pc, #140]	@ (80044c4 <BSP_AUDIO_IN_InitEx+0xcc>)
 8004438:	601a      	str	r2, [r3, #0]
    if(HAL_SAI_GetState(&haudio_in_sai) == HAL_SAI_STATE_RESET)
 800443a:	4821      	ldr	r0, [pc, #132]	@ (80044c0 <BSP_AUDIO_IN_InitEx+0xc8>)
 800443c:	f003 ffda 	bl	80083f4 <HAL_SAI_GetState>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d107      	bne.n	8004456 <BSP_AUDIO_IN_InitEx+0x5e>
    {
      /* Init the SAI MSP: this __weak function can be redefined by the application*/
      BSP_AUDIO_OUT_MspInit(&haudio_in_sai, NULL);  /* Initialize GPIOs for SAI2 block A Master signals */
 8004446:	2100      	movs	r1, #0
 8004448:	481d      	ldr	r0, [pc, #116]	@ (80044c0 <BSP_AUDIO_IN_InitEx+0xc8>)
 800444a:	f7ff fea9 	bl	80041a0 <BSP_AUDIO_OUT_MspInit>
      BSP_AUDIO_IN_MspInit(&haudio_in_sai, NULL);
 800444e:	2100      	movs	r1, #0
 8004450:	481b      	ldr	r0, [pc, #108]	@ (80044c0 <BSP_AUDIO_IN_InitEx+0xc8>)
 8004452:	f000 f893 	bl	800457c <BSP_AUDIO_IN_MspInit>

    /* Configure SAI in master RX mode :
     *   - SAI2_block_A in master RX mode
     *   - SAI2_block_B in slave RX mode synchronous from SAI2_block_A
     */
    if (InputDevice == INPUT_DEVICE_DIGITAL_MICROPHONE_2)
 8004456:	89fb      	ldrh	r3, [r7, #14]
 8004458:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800445c:	d102      	bne.n	8004464 <BSP_AUDIO_IN_InitEx+0x6c>
    {
      slot_active = CODEC_AUDIOFRAME_SLOT_13;
 800445e:	230a      	movs	r3, #10
 8004460:	61bb      	str	r3, [r7, #24]
 8004462:	e001      	b.n	8004468 <BSP_AUDIO_IN_InitEx+0x70>
    }
    else
    {
      slot_active = CODEC_AUDIOFRAME_SLOT_02;
 8004464:	2305      	movs	r3, #5
 8004466:	61bb      	str	r3, [r7, #24]
    }
    SAIx_In_Init(SAI_MODEMASTER_RX, slot_active, AudioFreq);
 8004468:	68ba      	ldr	r2, [r7, #8]
 800446a:	69b9      	ldr	r1, [r7, #24]
 800446c:	2001      	movs	r0, #1
 800446e:	f000 f937 	bl	80046e0 <SAIx_In_Init>

    /* wm8994 codec initialization */
    deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 8004472:	4b15      	ldr	r3, [pc, #84]	@ (80044c8 <BSP_AUDIO_IN_InitEx+0xd0>)
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	2034      	movs	r0, #52	@ 0x34
 8004478:	4798      	blx	r3
 800447a:	6178      	str	r0, [r7, #20]

    if((deviceid) == WM8994_ID)
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	f648 1294 	movw	r2, #35220	@ 0x8994
 8004482:	4293      	cmp	r3, r2
 8004484:	d109      	bne.n	800449a <BSP_AUDIO_IN_InitEx+0xa2>
    {
      /* Reset the Codec Registers */
      wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 8004486:	4b10      	ldr	r3, [pc, #64]	@ (80044c8 <BSP_AUDIO_IN_InitEx+0xd0>)
 8004488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800448a:	2034      	movs	r0, #52	@ 0x34
 800448c:	4798      	blx	r3
      /* Initialize the audio driver structure */
      audio_drv = &wm8994_drv;
 800448e:	4b0f      	ldr	r3, [pc, #60]	@ (80044cc <BSP_AUDIO_IN_InitEx+0xd4>)
 8004490:	4a0d      	ldr	r2, [pc, #52]	@ (80044c8 <BSP_AUDIO_IN_InitEx+0xd0>)
 8004492:	601a      	str	r2, [r3, #0]
      ret = AUDIO_OK;
 8004494:	2300      	movs	r3, #0
 8004496:	77fb      	strb	r3, [r7, #31]
 8004498:	e001      	b.n	800449e <BSP_AUDIO_IN_InitEx+0xa6>
    }
    else
    {
      ret = AUDIO_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	77fb      	strb	r3, [r7, #31]
    }

    if(ret == AUDIO_OK)
 800449e:	7ffb      	ldrb	r3, [r7, #31]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d107      	bne.n	80044b4 <BSP_AUDIO_IN_InitEx+0xbc>
    {
      /* Initialize the codec internal registers */
      audio_drv->Init(AUDIO_I2C_ADDRESS, InputDevice, 100, AudioFreq);
 80044a4:	4b09      	ldr	r3, [pc, #36]	@ (80044cc <BSP_AUDIO_IN_InitEx+0xd4>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681c      	ldr	r4, [r3, #0]
 80044aa:	89f9      	ldrh	r1, [r7, #14]
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	2264      	movs	r2, #100	@ 0x64
 80044b0:	2034      	movs	r0, #52	@ 0x34
 80044b2:	47a0      	blx	r4
    }
  }
  return ret;
 80044b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3724      	adds	r7, #36	@ 0x24
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd90      	pop	{r4, r7, pc}
 80044be:	bf00      	nop
 80044c0:	20019c04 	.word	0x20019c04
 80044c4:	40015c24 	.word	0x40015c24
 80044c8:	20000008 	.word	0x20000008
 80044cc:	20019b7c 	.word	0x20019b7c

080044d0 <BSP_AUDIO_IN_Record>:
  * @param  size: size of the recorded buffer in number of elements (typically number of half-words)
  *               Be careful that it is not the same unit than BSP_AUDIO_OUT_Play function
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t  BSP_AUDIO_IN_Record(uint16_t* pbuf, uint32_t size)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	6039      	str	r1, [r7, #0]
  uint32_t ret = AUDIO_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	60fb      	str	r3, [r7, #12]
  
  /* Start the process receive DMA */
  HAL_SAI_Receive_DMA(&haudio_in_sai, (uint8_t*)pbuf, size);
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	461a      	mov	r2, r3
 80044e4:	6879      	ldr	r1, [r7, #4]
 80044e6:	4805      	ldr	r0, [pc, #20]	@ (80044fc <BSP_AUDIO_IN_Record+0x2c>)
 80044e8:	f003 fef6 	bl	80082d8 <HAL_SAI_Receive_DMA>
  
  /* Return AUDIO_OK when all operations are correctly done */
  ret = AUDIO_OK;
 80044ec:	2300      	movs	r3, #0
 80044ee:	60fb      	str	r3, [r7, #12]
  
  return ret;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	b2db      	uxtb	r3, r3
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3710      	adds	r7, #16
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	20019c04 	.word	0x20019c04

08004500 <BSP_AUDIO_IN_Stop>:
  *           - CODEC_PDWN_HW: completely shut down the codec (physically).
  *                            Then need to reconfigure the Codec after power on.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_Stop(uint32_t Option)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b082      	sub	sp, #8
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  /* Call the Media layer stop function */
  HAL_SAI_DMAStop(&haudio_in_sai);
 8004508:	480c      	ldr	r0, [pc, #48]	@ (800453c <BSP_AUDIO_IN_Stop+0x3c>)
 800450a:	f003 fe72 	bl	80081f2 <HAL_SAI_DMAStop>
  
  /* Call Audio Codec Stop function */
  if(audio_drv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
 800450e:	4b0c      	ldr	r3, [pc, #48]	@ (8004540 <BSP_AUDIO_IN_Stop+0x40>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	699b      	ldr	r3, [r3, #24]
 8004514:	6879      	ldr	r1, [r7, #4]
 8004516:	2034      	movs	r0, #52	@ 0x34
 8004518:	4798      	blx	r3
 800451a:	4603      	mov	r3, r0
 800451c:	2b00      	cmp	r3, #0
 800451e:	d001      	beq.n	8004524 <BSP_AUDIO_IN_Stop+0x24>
  {
    return AUDIO_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	e006      	b.n	8004532 <BSP_AUDIO_IN_Stop+0x32>
  }
  else
  {
    if(Option == CODEC_PDWN_HW)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2b01      	cmp	r3, #1
 8004528:	d102      	bne.n	8004530 <BSP_AUDIO_IN_Stop+0x30>
    {
      /* Wait at least 100us */
      HAL_Delay(1);
 800452a:	2001      	movs	r0, #1
 800452c:	f000 fa02 	bl	8004934 <HAL_Delay>
    }
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 8004530:	2300      	movs	r3, #0
  }
}
 8004532:	4618      	mov	r0, r3
 8004534:	3708      	adds	r7, #8
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	20019c04 	.word	0x20019c04
 8004540:	20019b7c 	.word	0x20019b7c

08004544 <HAL_SAI_RxCpltCallback>:
  * @brief  Rx Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b082      	sub	sp, #8
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 800454c:	f006 fcfc 	bl	800af48 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8004550:	bf00      	nop
 8004552:	3708      	adds	r7, #8
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}

08004558 <HAL_SAI_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b082      	sub	sp, #8
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
  BSP_AUDIO_IN_HalfTransfer_CallBack();
 8004560:	f006 fd3a 	bl	800afd8 <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 8004564:	bf00      	nop
 8004566:	3708      	adds	r7, #8
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}

0800456c <BSP_AUDIO_IN_Error_CallBack>:
/**
  * @brief  Audio IN Error callback function.
  * @retval None
  */
__weak void BSP_AUDIO_IN_Error_CallBack(void)
{   
 800456c:	b480      	push	{r7}
 800456e:	af00      	add	r7, sp, #0
  /* This function is called when an Interrupt due to transfer error on or peripheral
     error occurs. */
}
 8004570:	bf00      	nop
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr
	...

0800457c <BSP_AUDIO_IN_MspInit>:
  * @param  hsai: SAI handle
  * @param  Params
  * @retval None
  */
__weak void BSP_AUDIO_IN_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b08c      	sub	sp, #48	@ 0x30
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_sai_rx;
  GPIO_InitTypeDef  gpio_init_structure;  

  /* Enable SAI clock */
  AUDIO_IN_SAIx_CLK_ENABLE();
 8004586:	4b50      	ldr	r3, [pc, #320]	@ (80046c8 <BSP_AUDIO_IN_MspInit+0x14c>)
 8004588:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800458a:	4a4f      	ldr	r2, [pc, #316]	@ (80046c8 <BSP_AUDIO_IN_MspInit+0x14c>)
 800458c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004590:	6453      	str	r3, [r2, #68]	@ 0x44
 8004592:	4b4d      	ldr	r3, [pc, #308]	@ (80046c8 <BSP_AUDIO_IN_MspInit+0x14c>)
 8004594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004596:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800459a:	61bb      	str	r3, [r7, #24]
 800459c:	69bb      	ldr	r3, [r7, #24]
  
  /* Enable SD GPIO clock */
  AUDIO_IN_SAIx_SD_ENABLE();
 800459e:	4b4a      	ldr	r3, [pc, #296]	@ (80046c8 <BSP_AUDIO_IN_MspInit+0x14c>)
 80045a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045a2:	4a49      	ldr	r2, [pc, #292]	@ (80046c8 <BSP_AUDIO_IN_MspInit+0x14c>)
 80045a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80045a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80045aa:	4b47      	ldr	r3, [pc, #284]	@ (80046c8 <BSP_AUDIO_IN_MspInit+0x14c>)
 80045ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045b2:	617b      	str	r3, [r7, #20]
 80045b4:	697b      	ldr	r3, [r7, #20]
  /* CODEC_SAI pin configuration: SD pin */
  gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
 80045b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80045ba:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80045bc:	2302      	movs	r3, #2
 80045be:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80045c0:	2300      	movs	r3, #0
 80045c2:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80045c4:	2302      	movs	r3, #2
 80045c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_IN_SAIx_SD_AF;
 80045c8:	230a      	movs	r3, #10
 80045ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 80045cc:	f107 031c 	add.w	r3, r7, #28
 80045d0:	4619      	mov	r1, r3
 80045d2:	483e      	ldr	r0, [pc, #248]	@ (80046cc <BSP_AUDIO_IN_MspInit+0x150>)
 80045d4:	f001 f84a 	bl	800566c <HAL_GPIO_Init>

  /* Enable Audio INT GPIO clock */
  AUDIO_IN_INT_GPIO_ENABLE();
 80045d8:	4b3b      	ldr	r3, [pc, #236]	@ (80046c8 <BSP_AUDIO_IN_MspInit+0x14c>)
 80045da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045dc:	4a3a      	ldr	r2, [pc, #232]	@ (80046c8 <BSP_AUDIO_IN_MspInit+0x14c>)
 80045de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80045e4:	4b38      	ldr	r3, [pc, #224]	@ (80046c8 <BSP_AUDIO_IN_MspInit+0x14c>)
 80045e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045ec:	613b      	str	r3, [r7, #16]
 80045ee:	693b      	ldr	r3, [r7, #16]
  /* Audio INT pin configuration: input */
  gpio_init_structure.Pin = AUDIO_IN_INT_GPIO_PIN;
 80045f0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045f4:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80045f6:	2300      	movs	r3, #0
 80045f8:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80045fa:	2300      	movs	r3, #0
 80045fc:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80045fe:	2302      	movs	r3, #2
 8004600:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(AUDIO_IN_INT_GPIO_PORT, &gpio_init_structure);
 8004602:	f107 031c 	add.w	r3, r7, #28
 8004606:	4619      	mov	r1, r3
 8004608:	4831      	ldr	r0, [pc, #196]	@ (80046d0 <BSP_AUDIO_IN_MspInit+0x154>)
 800460a:	f001 f82f 	bl	800566c <HAL_GPIO_Init>

  /* Enable the DMA clock */
  AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 800460e:	4b2e      	ldr	r3, [pc, #184]	@ (80046c8 <BSP_AUDIO_IN_MspInit+0x14c>)
 8004610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004612:	4a2d      	ldr	r2, [pc, #180]	@ (80046c8 <BSP_AUDIO_IN_MspInit+0x14c>)
 8004614:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004618:	6313      	str	r3, [r2, #48]	@ 0x30
 800461a:	4b2b      	ldr	r3, [pc, #172]	@ (80046c8 <BSP_AUDIO_IN_MspInit+0x14c>)
 800461c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800461e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004622:	60fb      	str	r3, [r7, #12]
 8004624:	68fb      	ldr	r3, [r7, #12]
    
  if(hsai->Instance == AUDIO_IN_SAIx)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a2a      	ldr	r2, [pc, #168]	@ (80046d4 <BSP_AUDIO_IN_MspInit+0x158>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d137      	bne.n	80046a0 <BSP_AUDIO_IN_MspInit+0x124>
  {
    /* Configure the hdma_sai_rx handle parameters */
    hdma_sai_rx.Init.Channel             = AUDIO_IN_SAIx_DMAx_CHANNEL;
 8004630:	4b29      	ldr	r3, [pc, #164]	@ (80046d8 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004632:	2200      	movs	r2, #0
 8004634:	605a      	str	r2, [r3, #4]
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8004636:	4b28      	ldr	r3, [pc, #160]	@ (80046d8 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004638:	2200      	movs	r2, #0
 800463a:	609a      	str	r2, [r3, #8]
    hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 800463c:	4b26      	ldr	r3, [pc, #152]	@ (80046d8 <BSP_AUDIO_IN_MspInit+0x15c>)
 800463e:	2200      	movs	r2, #0
 8004640:	60da      	str	r2, [r3, #12]
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8004642:	4b25      	ldr	r3, [pc, #148]	@ (80046d8 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004644:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004648:	611a      	str	r2, [r3, #16]
    hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAIx_DMAx_PERIPH_DATA_SIZE;
 800464a:	4b23      	ldr	r3, [pc, #140]	@ (80046d8 <BSP_AUDIO_IN_MspInit+0x15c>)
 800464c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004650:	615a      	str	r2, [r3, #20]
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
 8004652:	4b21      	ldr	r3, [pc, #132]	@ (80046d8 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004654:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004658:	619a      	str	r2, [r3, #24]
    hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 800465a:	4b1f      	ldr	r3, [pc, #124]	@ (80046d8 <BSP_AUDIO_IN_MspInit+0x15c>)
 800465c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004660:	61da      	str	r2, [r3, #28]
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8004662:	4b1d      	ldr	r3, [pc, #116]	@ (80046d8 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004664:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004668:	621a      	str	r2, [r3, #32]
    hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 800466a:	4b1b      	ldr	r3, [pc, #108]	@ (80046d8 <BSP_AUDIO_IN_MspInit+0x15c>)
 800466c:	2200      	movs	r2, #0
 800466e:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8004670:	4b19      	ldr	r3, [pc, #100]	@ (80046d8 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004672:	2203      	movs	r2, #3
 8004674:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8004676:	4b18      	ldr	r3, [pc, #96]	@ (80046d8 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004678:	2200      	movs	r2, #0
 800467a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 800467c:	4b16      	ldr	r3, [pc, #88]	@ (80046d8 <BSP_AUDIO_IN_MspInit+0x15c>)
 800467e:	2200      	movs	r2, #0
 8004680:	631a      	str	r2, [r3, #48]	@ 0x30
    
    hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 8004682:	4b15      	ldr	r3, [pc, #84]	@ (80046d8 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004684:	4a15      	ldr	r2, [pc, #84]	@ (80046dc <BSP_AUDIO_IN_MspInit+0x160>)
 8004686:	601a      	str	r2, [r3, #0]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	4a13      	ldr	r2, [pc, #76]	@ (80046d8 <BSP_AUDIO_IN_MspInit+0x15c>)
 800468c:	671a      	str	r2, [r3, #112]	@ 0x70
 800468e:	4a12      	ldr	r2, [pc, #72]	@ (80046d8 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6393      	str	r3, [r2, #56]	@ 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_rx);
 8004694:	4810      	ldr	r0, [pc, #64]	@ (80046d8 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004696:	f000 fc23 	bl	8004ee0 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_rx);
 800469a:	480f      	ldr	r0, [pc, #60]	@ (80046d8 <BSP_AUDIO_IN_MspInit+0x15c>)
 800469c:	f000 fb72 	bl	8004d84 <HAL_DMA_Init>
  }
  
  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 80046a0:	2200      	movs	r2, #0
 80046a2:	210f      	movs	r1, #15
 80046a4:	2046      	movs	r0, #70	@ 0x46
 80046a6:	f000 fa44 	bl	8004b32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 80046aa:	2046      	movs	r0, #70	@ 0x46
 80046ac:	f000 fa5d 	bl	8004b6a <HAL_NVIC_EnableIRQ>

  /* Audio INT IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_IN_INT_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 80046b0:	2200      	movs	r2, #0
 80046b2:	210f      	movs	r1, #15
 80046b4:	2028      	movs	r0, #40	@ 0x28
 80046b6:	f000 fa3c 	bl	8004b32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_INT_IRQ);
 80046ba:	2028      	movs	r0, #40	@ 0x28
 80046bc:	f000 fa55 	bl	8004b6a <HAL_NVIC_EnableIRQ>
}
 80046c0:	bf00      	nop
 80046c2:	3730      	adds	r7, #48	@ 0x30
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	40023800 	.word	0x40023800
 80046cc:	40021800 	.word	0x40021800
 80046d0:	40021c00 	.word	0x40021c00
 80046d4:	40015c24 	.word	0x40015c24
 80046d8:	20019ce8 	.word	0x20019ce8
 80046dc:	400264b8 	.word	0x400264b8

080046e0 <SAIx_In_Init>:
  * @param  SlotActive: CODEC_AUDIOFRAME_SLOT_02 or CODEC_AUDIOFRAME_SLOT_13
  * @param  AudioFreq: Audio frequency to be configured for the SAI peripheral.
  * @retval None
  */
static void SAIx_In_Init(uint32_t SaiOutMode, uint32_t SlotActive, uint32_t AudioFreq)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	607a      	str	r2, [r7, #4]
  /* Initialize SAI2 block A in MASTER RX */
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 80046ec:	4b53      	ldr	r3, [pc, #332]	@ (800483c <SAIx_In_Init+0x15c>)
 80046ee:	4a54      	ldr	r2, [pc, #336]	@ (8004840 <SAIx_In_Init+0x160>)
 80046f0:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 80046f2:	4b52      	ldr	r3, [pc, #328]	@ (800483c <SAIx_In_Init+0x15c>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	4b50      	ldr	r3, [pc, #320]	@ (800483c <SAIx_In_Init+0x15c>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004700:	601a      	str	r2, [r3, #0]

  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
 8004702:	4a4e      	ldr	r2, [pc, #312]	@ (800483c <SAIx_In_Init+0x15c>)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	61d3      	str	r3, [r2, #28]
  haudio_out_sai.Init.AudioMode = SaiOutMode;
 8004708:	4a4c      	ldr	r2, [pc, #304]	@ (800483c <SAIx_In_Init+0x15c>)
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	6053      	str	r3, [r2, #4]
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 800470e:	4b4b      	ldr	r3, [pc, #300]	@ (800483c <SAIx_In_Init+0x15c>)
 8004710:	2200      	movs	r2, #0
 8004712:	615a      	str	r2, [r3, #20]
  haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 8004714:	4b49      	ldr	r3, [pc, #292]	@ (800483c <SAIx_In_Init+0x15c>)
 8004716:	2200      	movs	r2, #0
 8004718:	631a      	str	r2, [r3, #48]	@ 0x30
  haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
 800471a:	4b48      	ldr	r3, [pc, #288]	@ (800483c <SAIx_In_Init+0x15c>)
 800471c:	2280      	movs	r2, #128	@ 0x80
 800471e:	635a      	str	r2, [r3, #52]	@ 0x34
  haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8004720:	4b46      	ldr	r3, [pc, #280]	@ (800483c <SAIx_In_Init+0x15c>)
 8004722:	2200      	movs	r2, #0
 8004724:	639a      	str	r2, [r3, #56]	@ 0x38
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8004726:	4b45      	ldr	r3, [pc, #276]	@ (800483c <SAIx_In_Init+0x15c>)
 8004728:	2201      	movs	r2, #1
 800472a:	63da      	str	r2, [r3, #60]	@ 0x3c
  haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
 800472c:	4b43      	ldr	r3, [pc, #268]	@ (800483c <SAIx_In_Init+0x15c>)
 800472e:	2200      	movs	r2, #0
 8004730:	609a      	str	r2, [r3, #8]
  haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 8004732:	4b42      	ldr	r3, [pc, #264]	@ (800483c <SAIx_In_Init+0x15c>)
 8004734:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004738:	611a      	str	r2, [r3, #16]
  haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 800473a:	4b40      	ldr	r3, [pc, #256]	@ (800483c <SAIx_In_Init+0x15c>)
 800473c:	2201      	movs	r2, #1
 800473e:	619a      	str	r2, [r3, #24]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  haudio_out_sai.FrameInit.FrameLength = 64;
 8004740:	4b3e      	ldr	r3, [pc, #248]	@ (800483c <SAIx_In_Init+0x15c>)
 8004742:	2240      	movs	r2, #64	@ 0x40
 8004744:	641a      	str	r2, [r3, #64]	@ 0x40
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 8004746:	4b3d      	ldr	r3, [pc, #244]	@ (800483c <SAIx_In_Init+0x15c>)
 8004748:	2220      	movs	r2, #32
 800474a:	645a      	str	r2, [r3, #68]	@ 0x44
  haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 800474c:	4b3b      	ldr	r3, [pc, #236]	@ (800483c <SAIx_In_Init+0x15c>)
 800474e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004752:	649a      	str	r2, [r3, #72]	@ 0x48
  haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8004754:	4b39      	ldr	r3, [pc, #228]	@ (800483c <SAIx_In_Init+0x15c>)
 8004756:	2200      	movs	r2, #0
 8004758:	64da      	str	r2, [r3, #76]	@ 0x4c
  haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 800475a:	4b38      	ldr	r3, [pc, #224]	@ (800483c <SAIx_In_Init+0x15c>)
 800475c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8004760:	651a      	str	r2, [r3, #80]	@ 0x50
  /* Configure SAI Block_x Slot
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot actives */
  haudio_out_sai.SlotInit.FirstBitOffset = 0;
 8004762:	4b36      	ldr	r3, [pc, #216]	@ (800483c <SAIx_In_Init+0x15c>)
 8004764:	2200      	movs	r2, #0
 8004766:	655a      	str	r2, [r3, #84]	@ 0x54
  haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8004768:	4b34      	ldr	r3, [pc, #208]	@ (800483c <SAIx_In_Init+0x15c>)
 800476a:	2200      	movs	r2, #0
 800476c:	659a      	str	r2, [r3, #88]	@ 0x58
  haudio_out_sai.SlotInit.SlotNumber = 4;
 800476e:	4b33      	ldr	r3, [pc, #204]	@ (800483c <SAIx_In_Init+0x15c>)
 8004770:	2204      	movs	r2, #4
 8004772:	65da      	str	r2, [r3, #92]	@ 0x5c
  haudio_out_sai.SlotInit.SlotActive = SlotActive;
 8004774:	4a31      	ldr	r2, [pc, #196]	@ (800483c <SAIx_In_Init+0x15c>)
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	6613      	str	r3, [r2, #96]	@ 0x60

  HAL_SAI_Init(&haudio_out_sai);
 800477a:	4830      	ldr	r0, [pc, #192]	@ (800483c <SAIx_In_Init+0x15c>)
 800477c:	f003 fb86 	bl	8007e8c <HAL_SAI_Init>

  /* Initialize SAI2 block B in SLAVE RX synchronous from SAI2 block A */
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8004780:	4b30      	ldr	r3, [pc, #192]	@ (8004844 <SAIx_In_Init+0x164>)
 8004782:	4a31      	ldr	r2, [pc, #196]	@ (8004848 <SAIx_In_Init+0x168>)
 8004784:	601a      	str	r2, [r3, #0]
  
  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 8004786:	4b2f      	ldr	r3, [pc, #188]	@ (8004844 <SAIx_In_Init+0x164>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	4b2d      	ldr	r3, [pc, #180]	@ (8004844 <SAIx_In_Init+0x164>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004794:	601a      	str	r2, [r3, #0]
  
  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  haudio_in_sai.Init.AudioFrequency = AudioFreq;
 8004796:	4a2b      	ldr	r2, [pc, #172]	@ (8004844 <SAIx_In_Init+0x164>)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	61d3      	str	r3, [r2, #28]
  haudio_in_sai.Init.AudioMode = SAI_MODESLAVE_RX;
 800479c:	4b29      	ldr	r3, [pc, #164]	@ (8004844 <SAIx_In_Init+0x164>)
 800479e:	2203      	movs	r2, #3
 80047a0:	605a      	str	r2, [r3, #4]
  haudio_in_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 80047a2:	4b28      	ldr	r3, [pc, #160]	@ (8004844 <SAIx_In_Init+0x164>)
 80047a4:	2200      	movs	r2, #0
 80047a6:	615a      	str	r2, [r3, #20]
  haudio_in_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 80047a8:	4b26      	ldr	r3, [pc, #152]	@ (8004844 <SAIx_In_Init+0x164>)
 80047aa:	2200      	movs	r2, #0
 80047ac:	631a      	str	r2, [r3, #48]	@ 0x30
  haudio_in_sai.Init.DataSize = SAI_DATASIZE_16;
 80047ae:	4b25      	ldr	r3, [pc, #148]	@ (8004844 <SAIx_In_Init+0x164>)
 80047b0:	2280      	movs	r2, #128	@ 0x80
 80047b2:	635a      	str	r2, [r3, #52]	@ 0x34
  haudio_in_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80047b4:	4b23      	ldr	r3, [pc, #140]	@ (8004844 <SAIx_In_Init+0x164>)
 80047b6:	2200      	movs	r2, #0
 80047b8:	639a      	str	r2, [r3, #56]	@ 0x38
  haudio_in_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 80047ba:	4b22      	ldr	r3, [pc, #136]	@ (8004844 <SAIx_In_Init+0x164>)
 80047bc:	2201      	movs	r2, #1
 80047be:	63da      	str	r2, [r3, #60]	@ 0x3c
  haudio_in_sai.Init.Synchro = SAI_SYNCHRONOUS;
 80047c0:	4b20      	ldr	r3, [pc, #128]	@ (8004844 <SAIx_In_Init+0x164>)
 80047c2:	2201      	movs	r2, #1
 80047c4:	609a      	str	r2, [r3, #8]
  haudio_in_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLED;
 80047c6:	4b1f      	ldr	r3, [pc, #124]	@ (8004844 <SAIx_In_Init+0x164>)
 80047c8:	2200      	movs	r2, #0
 80047ca:	611a      	str	r2, [r3, #16]
  haudio_in_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 80047cc:	4b1d      	ldr	r3, [pc, #116]	@ (8004844 <SAIx_In_Init+0x164>)
 80047ce:	2201      	movs	r2, #1
 80047d0:	619a      	str	r2, [r3, #24]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  haudio_in_sai.FrameInit.FrameLength = 64;
 80047d2:	4b1c      	ldr	r3, [pc, #112]	@ (8004844 <SAIx_In_Init+0x164>)
 80047d4:	2240      	movs	r2, #64	@ 0x40
 80047d6:	641a      	str	r2, [r3, #64]	@ 0x40
  haudio_in_sai.FrameInit.ActiveFrameLength = 32;
 80047d8:	4b1a      	ldr	r3, [pc, #104]	@ (8004844 <SAIx_In_Init+0x164>)
 80047da:	2220      	movs	r2, #32
 80047dc:	645a      	str	r2, [r3, #68]	@ 0x44
  haudio_in_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 80047de:	4b19      	ldr	r3, [pc, #100]	@ (8004844 <SAIx_In_Init+0x164>)
 80047e0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80047e4:	649a      	str	r2, [r3, #72]	@ 0x48
  haudio_in_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80047e6:	4b17      	ldr	r3, [pc, #92]	@ (8004844 <SAIx_In_Init+0x164>)
 80047e8:	2200      	movs	r2, #0
 80047ea:	64da      	str	r2, [r3, #76]	@ 0x4c
  haudio_in_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 80047ec:	4b15      	ldr	r3, [pc, #84]	@ (8004844 <SAIx_In_Init+0x164>)
 80047ee:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80047f2:	651a      	str	r2, [r3, #80]	@ 0x50
  /* Configure SAI Block_x Slot
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot active */
  haudio_in_sai.SlotInit.FirstBitOffset = 0;
 80047f4:	4b13      	ldr	r3, [pc, #76]	@ (8004844 <SAIx_In_Init+0x164>)
 80047f6:	2200      	movs	r2, #0
 80047f8:	655a      	str	r2, [r3, #84]	@ 0x54
  haudio_in_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80047fa:	4b12      	ldr	r3, [pc, #72]	@ (8004844 <SAIx_In_Init+0x164>)
 80047fc:	2200      	movs	r2, #0
 80047fe:	659a      	str	r2, [r3, #88]	@ 0x58
  haudio_in_sai.SlotInit.SlotNumber = 4;
 8004800:	4b10      	ldr	r3, [pc, #64]	@ (8004844 <SAIx_In_Init+0x164>)
 8004802:	2204      	movs	r2, #4
 8004804:	65da      	str	r2, [r3, #92]	@ 0x5c
  haudio_in_sai.SlotInit.SlotActive = SlotActive;
 8004806:	4a0f      	ldr	r2, [pc, #60]	@ (8004844 <SAIx_In_Init+0x164>)
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	6613      	str	r3, [r2, #96]	@ 0x60

  HAL_SAI_Init(&haudio_in_sai);
 800480c:	480d      	ldr	r0, [pc, #52]	@ (8004844 <SAIx_In_Init+0x164>)
 800480e:	f003 fb3d 	bl	8007e8c <HAL_SAI_Init>

  /* Enable SAI peripheral to generate MCLK */
  __HAL_SAI_ENABLE(&haudio_out_sai);
 8004812:	4b0a      	ldr	r3, [pc, #40]	@ (800483c <SAIx_In_Init+0x15c>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	4b08      	ldr	r3, [pc, #32]	@ (800483c <SAIx_In_Init+0x15c>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004820:	601a      	str	r2, [r3, #0]

  /* Enable SAI peripheral */
  __HAL_SAI_ENABLE(&haudio_in_sai);
 8004822:	4b08      	ldr	r3, [pc, #32]	@ (8004844 <SAIx_In_Init+0x164>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	4b06      	ldr	r3, [pc, #24]	@ (8004844 <SAIx_In_Init+0x164>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004830:	601a      	str	r2, [r3, #0]
}
 8004832:	bf00      	nop
 8004834:	3710      	adds	r7, #16
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
 800483a:	bf00      	nop
 800483c:	20019b80 	.word	0x20019b80
 8004840:	40015c04 	.word	0x40015c04
 8004844:	20019c04 	.word	0x20019c04
 8004848:	40015c24 	.word	0x40015c24

0800484c <SAIx_In_DeInit>:
/**
  * @brief  Deinitializes the output Audio Codec audio interface (SAI).
  * @retval None
  */
static void SAIx_In_DeInit(void)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	af00      	add	r7, sp, #0
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8004850:	4b07      	ldr	r3, [pc, #28]	@ (8004870 <SAIx_In_DeInit+0x24>)
 8004852:	4a08      	ldr	r2, [pc, #32]	@ (8004874 <SAIx_In_DeInit+0x28>)
 8004854:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 8004856:	4b06      	ldr	r3, [pc, #24]	@ (8004870 <SAIx_In_DeInit+0x24>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	4b04      	ldr	r3, [pc, #16]	@ (8004870 <SAIx_In_DeInit+0x24>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004864:	601a      	str	r2, [r3, #0]

  HAL_SAI_DeInit(&haudio_in_sai);
 8004866:	4802      	ldr	r0, [pc, #8]	@ (8004870 <SAIx_In_DeInit+0x24>)
 8004868:	f003 fc8e 	bl	8008188 <HAL_SAI_DeInit>
}
 800486c:	bf00      	nop
 800486e:	bd80      	pop	{r7, pc}
 8004870:	20019c04 	.word	0x20019c04
 8004874:	40015c24 	.word	0x40015c24

08004878 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800487c:	2003      	movs	r0, #3
 800487e:	f000 f94d 	bl	8004b1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004882:	2000      	movs	r0, #0
 8004884:	f000 f806 	bl	8004894 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004888:	f7fd fd1c 	bl	80022c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800488c:	2300      	movs	r3, #0
}
 800488e:	4618      	mov	r0, r3
 8004890:	bd80      	pop	{r7, pc}
	...

08004894 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b082      	sub	sp, #8
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800489c:	4b12      	ldr	r3, [pc, #72]	@ (80048e8 <HAL_InitTick+0x54>)
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	4b12      	ldr	r3, [pc, #72]	@ (80048ec <HAL_InitTick+0x58>)
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	4619      	mov	r1, r3
 80048a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80048aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80048ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80048b2:	4618      	mov	r0, r3
 80048b4:	f000 f967 	bl	8004b86 <HAL_SYSTICK_Config>
 80048b8:	4603      	mov	r3, r0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d001      	beq.n	80048c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e00e      	b.n	80048e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2b0f      	cmp	r3, #15
 80048c6:	d80a      	bhi.n	80048de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80048c8:	2200      	movs	r2, #0
 80048ca:	6879      	ldr	r1, [r7, #4]
 80048cc:	f04f 30ff 	mov.w	r0, #4294967295
 80048d0:	f000 f92f 	bl	8004b32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80048d4:	4a06      	ldr	r2, [pc, #24]	@ (80048f0 <HAL_InitTick+0x5c>)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80048da:	2300      	movs	r3, #0
 80048dc:	e000      	b.n	80048e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3708      	adds	r7, #8
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	20000004 	.word	0x20000004
 80048ec:	20000040 	.word	0x20000040
 80048f0:	2000003c 	.word	0x2000003c

080048f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80048f4:	b480      	push	{r7}
 80048f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80048f8:	4b06      	ldr	r3, [pc, #24]	@ (8004914 <HAL_IncTick+0x20>)
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	461a      	mov	r2, r3
 80048fe:	4b06      	ldr	r3, [pc, #24]	@ (8004918 <HAL_IncTick+0x24>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4413      	add	r3, r2
 8004904:	4a04      	ldr	r2, [pc, #16]	@ (8004918 <HAL_IncTick+0x24>)
 8004906:	6013      	str	r3, [r2, #0]
}
 8004908:	bf00      	nop
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr
 8004912:	bf00      	nop
 8004914:	20000040 	.word	0x20000040
 8004918:	20019d48 	.word	0x20019d48

0800491c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800491c:	b480      	push	{r7}
 800491e:	af00      	add	r7, sp, #0
  return uwTick;
 8004920:	4b03      	ldr	r3, [pc, #12]	@ (8004930 <HAL_GetTick+0x14>)
 8004922:	681b      	ldr	r3, [r3, #0]
}
 8004924:	4618      	mov	r0, r3
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr
 800492e:	bf00      	nop
 8004930:	20019d48 	.word	0x20019d48

08004934 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b084      	sub	sp, #16
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800493c:	f7ff ffee 	bl	800491c <HAL_GetTick>
 8004940:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800494c:	d005      	beq.n	800495a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800494e:	4b0a      	ldr	r3, [pc, #40]	@ (8004978 <HAL_Delay+0x44>)
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	461a      	mov	r2, r3
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	4413      	add	r3, r2
 8004958:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800495a:	bf00      	nop
 800495c:	f7ff ffde 	bl	800491c <HAL_GetTick>
 8004960:	4602      	mov	r2, r0
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	68fa      	ldr	r2, [r7, #12]
 8004968:	429a      	cmp	r2, r3
 800496a:	d8f7      	bhi.n	800495c <HAL_Delay+0x28>
  {
  }
}
 800496c:	bf00      	nop
 800496e:	bf00      	nop
 8004970:	3710      	adds	r7, #16
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	20000040 	.word	0x20000040

0800497c <__NVIC_SetPriorityGrouping>:
{
 800497c:	b480      	push	{r7}
 800497e:	b085      	sub	sp, #20
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	f003 0307 	and.w	r3, r3, #7
 800498a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800498c:	4b0b      	ldr	r3, [pc, #44]	@ (80049bc <__NVIC_SetPriorityGrouping+0x40>)
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004992:	68ba      	ldr	r2, [r7, #8]
 8004994:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004998:	4013      	ands	r3, r2
 800499a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80049a4:	4b06      	ldr	r3, [pc, #24]	@ (80049c0 <__NVIC_SetPriorityGrouping+0x44>)
 80049a6:	4313      	orrs	r3, r2
 80049a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80049aa:	4a04      	ldr	r2, [pc, #16]	@ (80049bc <__NVIC_SetPriorityGrouping+0x40>)
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	60d3      	str	r3, [r2, #12]
}
 80049b0:	bf00      	nop
 80049b2:	3714      	adds	r7, #20
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr
 80049bc:	e000ed00 	.word	0xe000ed00
 80049c0:	05fa0000 	.word	0x05fa0000

080049c4 <__NVIC_GetPriorityGrouping>:
{
 80049c4:	b480      	push	{r7}
 80049c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80049c8:	4b04      	ldr	r3, [pc, #16]	@ (80049dc <__NVIC_GetPriorityGrouping+0x18>)
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	0a1b      	lsrs	r3, r3, #8
 80049ce:	f003 0307 	and.w	r3, r3, #7
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr
 80049dc:	e000ed00 	.word	0xe000ed00

080049e0 <__NVIC_EnableIRQ>:
{
 80049e0:	b480      	push	{r7}
 80049e2:	b083      	sub	sp, #12
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	4603      	mov	r3, r0
 80049e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	db0b      	blt.n	8004a0a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049f2:	79fb      	ldrb	r3, [r7, #7]
 80049f4:	f003 021f 	and.w	r2, r3, #31
 80049f8:	4907      	ldr	r1, [pc, #28]	@ (8004a18 <__NVIC_EnableIRQ+0x38>)
 80049fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049fe:	095b      	lsrs	r3, r3, #5
 8004a00:	2001      	movs	r0, #1
 8004a02:	fa00 f202 	lsl.w	r2, r0, r2
 8004a06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004a0a:	bf00      	nop
 8004a0c:	370c      	adds	r7, #12
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr
 8004a16:	bf00      	nop
 8004a18:	e000e100 	.word	0xe000e100

08004a1c <__NVIC_SetPriority>:
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	4603      	mov	r3, r0
 8004a24:	6039      	str	r1, [r7, #0]
 8004a26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	db0a      	blt.n	8004a46 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	b2da      	uxtb	r2, r3
 8004a34:	490c      	ldr	r1, [pc, #48]	@ (8004a68 <__NVIC_SetPriority+0x4c>)
 8004a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a3a:	0112      	lsls	r2, r2, #4
 8004a3c:	b2d2      	uxtb	r2, r2
 8004a3e:	440b      	add	r3, r1
 8004a40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004a44:	e00a      	b.n	8004a5c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	b2da      	uxtb	r2, r3
 8004a4a:	4908      	ldr	r1, [pc, #32]	@ (8004a6c <__NVIC_SetPriority+0x50>)
 8004a4c:	79fb      	ldrb	r3, [r7, #7]
 8004a4e:	f003 030f 	and.w	r3, r3, #15
 8004a52:	3b04      	subs	r3, #4
 8004a54:	0112      	lsls	r2, r2, #4
 8004a56:	b2d2      	uxtb	r2, r2
 8004a58:	440b      	add	r3, r1
 8004a5a:	761a      	strb	r2, [r3, #24]
}
 8004a5c:	bf00      	nop
 8004a5e:	370c      	adds	r7, #12
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr
 8004a68:	e000e100 	.word	0xe000e100
 8004a6c:	e000ed00 	.word	0xe000ed00

08004a70 <NVIC_EncodePriority>:
{
 8004a70:	b480      	push	{r7}
 8004a72:	b089      	sub	sp, #36	@ 0x24
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	60b9      	str	r1, [r7, #8]
 8004a7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f003 0307 	and.w	r3, r3, #7
 8004a82:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a84:	69fb      	ldr	r3, [r7, #28]
 8004a86:	f1c3 0307 	rsb	r3, r3, #7
 8004a8a:	2b04      	cmp	r3, #4
 8004a8c:	bf28      	it	cs
 8004a8e:	2304      	movcs	r3, #4
 8004a90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	3304      	adds	r3, #4
 8004a96:	2b06      	cmp	r3, #6
 8004a98:	d902      	bls.n	8004aa0 <NVIC_EncodePriority+0x30>
 8004a9a:	69fb      	ldr	r3, [r7, #28]
 8004a9c:	3b03      	subs	r3, #3
 8004a9e:	e000      	b.n	8004aa2 <NVIC_EncodePriority+0x32>
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004aa4:	f04f 32ff 	mov.w	r2, #4294967295
 8004aa8:	69bb      	ldr	r3, [r7, #24]
 8004aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8004aae:	43da      	mvns	r2, r3
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	401a      	ands	r2, r3
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ab8:	f04f 31ff 	mov.w	r1, #4294967295
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	fa01 f303 	lsl.w	r3, r1, r3
 8004ac2:	43d9      	mvns	r1, r3
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ac8:	4313      	orrs	r3, r2
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3724      	adds	r7, #36	@ 0x24
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr
	...

08004ad8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	3b01      	subs	r3, #1
 8004ae4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004ae8:	d301      	bcc.n	8004aee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004aea:	2301      	movs	r3, #1
 8004aec:	e00f      	b.n	8004b0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004aee:	4a0a      	ldr	r2, [pc, #40]	@ (8004b18 <SysTick_Config+0x40>)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	3b01      	subs	r3, #1
 8004af4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004af6:	210f      	movs	r1, #15
 8004af8:	f04f 30ff 	mov.w	r0, #4294967295
 8004afc:	f7ff ff8e 	bl	8004a1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004b00:	4b05      	ldr	r3, [pc, #20]	@ (8004b18 <SysTick_Config+0x40>)
 8004b02:	2200      	movs	r2, #0
 8004b04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004b06:	4b04      	ldr	r3, [pc, #16]	@ (8004b18 <SysTick_Config+0x40>)
 8004b08:	2207      	movs	r2, #7
 8004b0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004b0c:	2300      	movs	r3, #0
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3708      	adds	r7, #8
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	bf00      	nop
 8004b18:	e000e010 	.word	0xe000e010

08004b1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b082      	sub	sp, #8
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f7ff ff29 	bl	800497c <__NVIC_SetPriorityGrouping>
}
 8004b2a:	bf00      	nop
 8004b2c:	3708      	adds	r7, #8
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}

08004b32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004b32:	b580      	push	{r7, lr}
 8004b34:	b086      	sub	sp, #24
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	4603      	mov	r3, r0
 8004b3a:	60b9      	str	r1, [r7, #8]
 8004b3c:	607a      	str	r2, [r7, #4]
 8004b3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004b40:	2300      	movs	r3, #0
 8004b42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004b44:	f7ff ff3e 	bl	80049c4 <__NVIC_GetPriorityGrouping>
 8004b48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	68b9      	ldr	r1, [r7, #8]
 8004b4e:	6978      	ldr	r0, [r7, #20]
 8004b50:	f7ff ff8e 	bl	8004a70 <NVIC_EncodePriority>
 8004b54:	4602      	mov	r2, r0
 8004b56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b5a:	4611      	mov	r1, r2
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f7ff ff5d 	bl	8004a1c <__NVIC_SetPriority>
}
 8004b62:	bf00      	nop
 8004b64:	3718      	adds	r7, #24
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}

08004b6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b6a:	b580      	push	{r7, lr}
 8004b6c:	b082      	sub	sp, #8
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	4603      	mov	r3, r0
 8004b72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f7ff ff31 	bl	80049e0 <__NVIC_EnableIRQ>
}
 8004b7e:	bf00      	nop
 8004b80:	3708      	adds	r7, #8
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}

08004b86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004b86:	b580      	push	{r7, lr}
 8004b88:	b082      	sub	sp, #8
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f7ff ffa2 	bl	8004ad8 <SysTick_Config>
 8004b94:	4603      	mov	r3, r0
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3708      	adds	r7, #8
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
	...

08004ba0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b082      	sub	sp, #8
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d101      	bne.n	8004bb2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e054      	b.n	8004c5c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	7f5b      	ldrb	r3, [r3, #29]
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d105      	bne.n	8004bc8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f7fc fa5a 	bl	800107c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2202      	movs	r2, #2
 8004bcc:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	791b      	ldrb	r3, [r3, #4]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d10c      	bne.n	8004bf0 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a22      	ldr	r2, [pc, #136]	@ (8004c64 <HAL_CRC_Init+0xc4>)
 8004bdc:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	689a      	ldr	r2, [r3, #8]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f022 0218 	bic.w	r2, r2, #24
 8004bec:	609a      	str	r2, [r3, #8]
 8004bee:	e00c      	b.n	8004c0a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6899      	ldr	r1, [r3, #8]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f000 f834 	bl	8004c68 <HAL_CRCEx_Polynomial_Set>
 8004c00:	4603      	mov	r3, r0
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d001      	beq.n	8004c0a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e028      	b.n	8004c5c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	795b      	ldrb	r3, [r3, #5]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d105      	bne.n	8004c1e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f04f 32ff 	mov.w	r2, #4294967295
 8004c1a:	611a      	str	r2, [r3, #16]
 8004c1c:	e004      	b.n	8004c28 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	6912      	ldr	r2, [r2, #16]
 8004c26:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	695a      	ldr	r2, [r3, #20]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	430a      	orrs	r2, r1
 8004c3c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	699a      	ldr	r2, [r3, #24]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	430a      	orrs	r2, r1
 8004c52:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8004c5a:	2300      	movs	r3, #0
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3708      	adds	r7, #8
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}
 8004c64:	04c11db7 	.word	0x04c11db7

08004c68 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b087      	sub	sp, #28
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	60b9      	str	r1, [r7, #8]
 8004c72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c74:	2300      	movs	r3, #0
 8004c76:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004c78:	231f      	movs	r3, #31
 8004c7a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	f003 0301 	and.w	r3, r3, #1
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d102      	bne.n	8004c8c <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	75fb      	strb	r3, [r7, #23]
 8004c8a:	e063      	b.n	8004d54 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004c8c:	bf00      	nop
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	1e5a      	subs	r2, r3, #1
 8004c92:	613a      	str	r2, [r7, #16]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d009      	beq.n	8004cac <HAL_CRCEx_Polynomial_Set+0x44>
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	f003 031f 	and.w	r3, r3, #31
 8004c9e:	68ba      	ldr	r2, [r7, #8]
 8004ca0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ca4:	f003 0301 	and.w	r3, r3, #1
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d0f0      	beq.n	8004c8e <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2b18      	cmp	r3, #24
 8004cb0:	d846      	bhi.n	8004d40 <HAL_CRCEx_Polynomial_Set+0xd8>
 8004cb2:	a201      	add	r2, pc, #4	@ (adr r2, 8004cb8 <HAL_CRCEx_Polynomial_Set+0x50>)
 8004cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb8:	08004d47 	.word	0x08004d47
 8004cbc:	08004d41 	.word	0x08004d41
 8004cc0:	08004d41 	.word	0x08004d41
 8004cc4:	08004d41 	.word	0x08004d41
 8004cc8:	08004d41 	.word	0x08004d41
 8004ccc:	08004d41 	.word	0x08004d41
 8004cd0:	08004d41 	.word	0x08004d41
 8004cd4:	08004d41 	.word	0x08004d41
 8004cd8:	08004d35 	.word	0x08004d35
 8004cdc:	08004d41 	.word	0x08004d41
 8004ce0:	08004d41 	.word	0x08004d41
 8004ce4:	08004d41 	.word	0x08004d41
 8004ce8:	08004d41 	.word	0x08004d41
 8004cec:	08004d41 	.word	0x08004d41
 8004cf0:	08004d41 	.word	0x08004d41
 8004cf4:	08004d41 	.word	0x08004d41
 8004cf8:	08004d29 	.word	0x08004d29
 8004cfc:	08004d41 	.word	0x08004d41
 8004d00:	08004d41 	.word	0x08004d41
 8004d04:	08004d41 	.word	0x08004d41
 8004d08:	08004d41 	.word	0x08004d41
 8004d0c:	08004d41 	.word	0x08004d41
 8004d10:	08004d41 	.word	0x08004d41
 8004d14:	08004d41 	.word	0x08004d41
 8004d18:	08004d1d 	.word	0x08004d1d
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	2b06      	cmp	r3, #6
 8004d20:	d913      	bls.n	8004d4a <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8004d26:	e010      	b.n	8004d4a <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	2b07      	cmp	r3, #7
 8004d2c:	d90f      	bls.n	8004d4e <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8004d32:	e00c      	b.n	8004d4e <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	2b0f      	cmp	r3, #15
 8004d38:	d90b      	bls.n	8004d52 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8004d3e:	e008      	b.n	8004d52 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	75fb      	strb	r3, [r7, #23]
        break;
 8004d44:	e006      	b.n	8004d54 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004d46:	bf00      	nop
 8004d48:	e004      	b.n	8004d54 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004d4a:	bf00      	nop
 8004d4c:	e002      	b.n	8004d54 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004d4e:	bf00      	nop
 8004d50:	e000      	b.n	8004d54 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004d52:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8004d54:	7dfb      	ldrb	r3, [r7, #23]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d10d      	bne.n	8004d76 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	68ba      	ldr	r2, [r7, #8]
 8004d60:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	f023 0118 	bic.w	r1, r3, #24
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	430a      	orrs	r2, r1
 8004d74:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004d76:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	371c      	adds	r7, #28
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr

08004d84 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b086      	sub	sp, #24
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004d90:	f7ff fdc4 	bl	800491c <HAL_GetTick>
 8004d94:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d101      	bne.n	8004da0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e099      	b.n	8004ed4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2202      	movs	r2, #2
 8004da4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f022 0201 	bic.w	r2, r2, #1
 8004dbe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004dc0:	e00f      	b.n	8004de2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004dc2:	f7ff fdab 	bl	800491c <HAL_GetTick>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	1ad3      	subs	r3, r2, r3
 8004dcc:	2b05      	cmp	r3, #5
 8004dce:	d908      	bls.n	8004de2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2220      	movs	r2, #32
 8004dd4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2203      	movs	r2, #3
 8004dda:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004dde:	2303      	movs	r3, #3
 8004de0:	e078      	b.n	8004ed4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 0301 	and.w	r3, r3, #1
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d1e8      	bne.n	8004dc2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004df8:	697a      	ldr	r2, [r7, #20]
 8004dfa:	4b38      	ldr	r3, [pc, #224]	@ (8004edc <HAL_DMA_Init+0x158>)
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	685a      	ldr	r2, [r3, #4]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004e0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	691b      	ldr	r3, [r3, #16]
 8004e14:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	699b      	ldr	r3, [r3, #24]
 8004e20:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e26:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6a1b      	ldr	r3, [r3, #32]
 8004e2c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004e2e:	697a      	ldr	r2, [r7, #20]
 8004e30:	4313      	orrs	r3, r2
 8004e32:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e38:	2b04      	cmp	r3, #4
 8004e3a:	d107      	bne.n	8004e4c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e44:	4313      	orrs	r3, r2
 8004e46:	697a      	ldr	r2, [r7, #20]
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	697a      	ldr	r2, [r7, #20]
 8004e52:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	695b      	ldr	r3, [r3, #20]
 8004e5a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	f023 0307 	bic.w	r3, r3, #7
 8004e62:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e68:	697a      	ldr	r2, [r7, #20]
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e72:	2b04      	cmp	r3, #4
 8004e74:	d117      	bne.n	8004ea6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e7a:	697a      	ldr	r2, [r7, #20]
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d00e      	beq.n	8004ea6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f000 fb73 	bl	8005574 <DMA_CheckFifoParam>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d008      	beq.n	8004ea6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2240      	movs	r2, #64	@ 0x40
 8004e98:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e016      	b.n	8004ed4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	697a      	ldr	r2, [r7, #20]
 8004eac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f000 fb2a 	bl	8005508 <DMA_CalcBaseAndBitshift>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ebc:	223f      	movs	r2, #63	@ 0x3f
 8004ebe:	409a      	lsls	r2, r3
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2201      	movs	r2, #1
 8004ece:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004ed2:	2300      	movs	r3, #0
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3718      	adds	r7, #24
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}
 8004edc:	f010803f 	.word	0xf010803f

08004ee0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b084      	sub	sp, #16
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d101      	bne.n	8004ef2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e050      	b.n	8004f94 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	2b02      	cmp	r3, #2
 8004efc:	d101      	bne.n	8004f02 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8004efe:	2302      	movs	r3, #2
 8004f00:	e048      	b.n	8004f94 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f022 0201 	bic.w	r2, r2, #1
 8004f10:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	2200      	movs	r2, #0
 8004f18:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	2200      	movs	r2, #0
 8004f28:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	2200      	movs	r2, #0
 8004f38:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	2221      	movs	r2, #33	@ 0x21
 8004f40:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f000 fae0 	bl	8005508 <DMA_CalcBaseAndBitshift>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f50:	223f      	movs	r2, #63	@ 0x3f
 8004f52:	409a      	lsls	r2, r3
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004f92:	2300      	movs	r3, #0
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3710      	adds	r7, #16
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b086      	sub	sp, #24
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	60f8      	str	r0, [r7, #12]
 8004fa4:	60b9      	str	r1, [r7, #8]
 8004fa6:	607a      	str	r2, [r7, #4]
 8004fa8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004faa:	2300      	movs	r3, #0
 8004fac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fb2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d101      	bne.n	8004fc2 <HAL_DMA_Start_IT+0x26>
 8004fbe:	2302      	movs	r3, #2
 8004fc0:	e048      	b.n	8005054 <HAL_DMA_Start_IT+0xb8>
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d137      	bne.n	8005046 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2202      	movs	r2, #2
 8004fda:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	68b9      	ldr	r1, [r7, #8]
 8004fea:	68f8      	ldr	r0, [r7, #12]
 8004fec:	f000 fa5e 	bl	80054ac <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ff4:	223f      	movs	r2, #63	@ 0x3f
 8004ff6:	409a      	lsls	r2, r3
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f042 0216 	orr.w	r2, r2, #22
 800500a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	695a      	ldr	r2, [r3, #20]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800501a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005020:	2b00      	cmp	r3, #0
 8005022:	d007      	beq.n	8005034 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f042 0208 	orr.w	r2, r2, #8
 8005032:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f042 0201 	orr.w	r2, r2, #1
 8005042:	601a      	str	r2, [r3, #0]
 8005044:	e005      	b.n	8005052 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2200      	movs	r2, #0
 800504a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800504e:	2302      	movs	r3, #2
 8005050:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005052:	7dfb      	ldrb	r3, [r7, #23]
}
 8005054:	4618      	mov	r0, r3
 8005056:	3718      	adds	r7, #24
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}

0800505c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b084      	sub	sp, #16
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005068:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800506a:	f7ff fc57 	bl	800491c <HAL_GetTick>
 800506e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005076:	b2db      	uxtb	r3, r3
 8005078:	2b02      	cmp	r3, #2
 800507a:	d008      	beq.n	800508e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2280      	movs	r2, #128	@ 0x80
 8005080:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	e052      	b.n	8005134 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f022 0216 	bic.w	r2, r2, #22
 800509c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	695a      	ldr	r2, [r3, #20]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80050ac:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d103      	bne.n	80050be <HAL_DMA_Abort+0x62>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d007      	beq.n	80050ce <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f022 0208 	bic.w	r2, r2, #8
 80050cc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f022 0201 	bic.w	r2, r2, #1
 80050dc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80050de:	e013      	b.n	8005108 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80050e0:	f7ff fc1c 	bl	800491c <HAL_GetTick>
 80050e4:	4602      	mov	r2, r0
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	2b05      	cmp	r3, #5
 80050ec:	d90c      	bls.n	8005108 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2220      	movs	r2, #32
 80050f2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2203      	movs	r2, #3
 80050f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2200      	movs	r2, #0
 8005100:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8005104:	2303      	movs	r3, #3
 8005106:	e015      	b.n	8005134 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 0301 	and.w	r3, r3, #1
 8005112:	2b00      	cmp	r3, #0
 8005114:	d1e4      	bne.n	80050e0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800511a:	223f      	movs	r2, #63	@ 0x3f
 800511c:	409a      	lsls	r2, r3
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2201      	movs	r2, #1
 8005126:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8005132:	2300      	movs	r3, #0
}
 8005134:	4618      	mov	r0, r3
 8005136:	3710      	adds	r7, #16
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}

0800513c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800513c:	b480      	push	{r7}
 800513e:	b083      	sub	sp, #12
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800514a:	b2db      	uxtb	r3, r3
 800514c:	2b02      	cmp	r3, #2
 800514e:	d004      	beq.n	800515a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2280      	movs	r2, #128	@ 0x80
 8005154:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	e00c      	b.n	8005174 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2205      	movs	r2, #5
 800515e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f022 0201 	bic.w	r2, r2, #1
 8005170:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005172:	2300      	movs	r3, #0
}
 8005174:	4618      	mov	r0, r3
 8005176:	370c      	adds	r7, #12
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr

08005180 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b086      	sub	sp, #24
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8005188:	2300      	movs	r3, #0
 800518a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800518c:	4b8e      	ldr	r3, [pc, #568]	@ (80053c8 <HAL_DMA_IRQHandler+0x248>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a8e      	ldr	r2, [pc, #568]	@ (80053cc <HAL_DMA_IRQHandler+0x24c>)
 8005192:	fba2 2303 	umull	r2, r3, r2, r3
 8005196:	0a9b      	lsrs	r3, r3, #10
 8005198:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800519e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051aa:	2208      	movs	r2, #8
 80051ac:	409a      	lsls	r2, r3
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	4013      	ands	r3, r2
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d01a      	beq.n	80051ec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 0304 	and.w	r3, r3, #4
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d013      	beq.n	80051ec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f022 0204 	bic.w	r2, r2, #4
 80051d2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051d8:	2208      	movs	r2, #8
 80051da:	409a      	lsls	r2, r3
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051e4:	f043 0201 	orr.w	r2, r3, #1
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051f0:	2201      	movs	r2, #1
 80051f2:	409a      	lsls	r2, r3
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	4013      	ands	r3, r2
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d012      	beq.n	8005222 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	695b      	ldr	r3, [r3, #20]
 8005202:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005206:	2b00      	cmp	r3, #0
 8005208:	d00b      	beq.n	8005222 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800520e:	2201      	movs	r2, #1
 8005210:	409a      	lsls	r2, r3
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800521a:	f043 0202 	orr.w	r2, r3, #2
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005226:	2204      	movs	r2, #4
 8005228:	409a      	lsls	r2, r3
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	4013      	ands	r3, r2
 800522e:	2b00      	cmp	r3, #0
 8005230:	d012      	beq.n	8005258 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 0302 	and.w	r3, r3, #2
 800523c:	2b00      	cmp	r3, #0
 800523e:	d00b      	beq.n	8005258 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005244:	2204      	movs	r2, #4
 8005246:	409a      	lsls	r2, r3
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005250:	f043 0204 	orr.w	r2, r3, #4
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800525c:	2210      	movs	r2, #16
 800525e:	409a      	lsls	r2, r3
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	4013      	ands	r3, r2
 8005264:	2b00      	cmp	r3, #0
 8005266:	d043      	beq.n	80052f0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 0308 	and.w	r3, r3, #8
 8005272:	2b00      	cmp	r3, #0
 8005274:	d03c      	beq.n	80052f0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800527a:	2210      	movs	r2, #16
 800527c:	409a      	lsls	r2, r3
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800528c:	2b00      	cmp	r3, #0
 800528e:	d018      	beq.n	80052c2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800529a:	2b00      	cmp	r3, #0
 800529c:	d108      	bne.n	80052b0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d024      	beq.n	80052f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	4798      	blx	r3
 80052ae:	e01f      	b.n	80052f0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d01b      	beq.n	80052f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	4798      	blx	r3
 80052c0:	e016      	b.n	80052f0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d107      	bne.n	80052e0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f022 0208 	bic.w	r2, r2, #8
 80052de:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d003      	beq.n	80052f0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052f4:	2220      	movs	r2, #32
 80052f6:	409a      	lsls	r2, r3
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	4013      	ands	r3, r2
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	f000 808f 	beq.w	8005420 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f003 0310 	and.w	r3, r3, #16
 800530c:	2b00      	cmp	r3, #0
 800530e:	f000 8087 	beq.w	8005420 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005316:	2220      	movs	r2, #32
 8005318:	409a      	lsls	r2, r3
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005324:	b2db      	uxtb	r3, r3
 8005326:	2b05      	cmp	r3, #5
 8005328:	d136      	bne.n	8005398 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f022 0216 	bic.w	r2, r2, #22
 8005338:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	695a      	ldr	r2, [r3, #20]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005348:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800534e:	2b00      	cmp	r3, #0
 8005350:	d103      	bne.n	800535a <HAL_DMA_IRQHandler+0x1da>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005356:	2b00      	cmp	r3, #0
 8005358:	d007      	beq.n	800536a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f022 0208 	bic.w	r2, r2, #8
 8005368:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800536e:	223f      	movs	r2, #63	@ 0x3f
 8005370:	409a      	lsls	r2, r3
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2201      	movs	r2, #1
 800537a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2200      	movs	r2, #0
 8005382:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800538a:	2b00      	cmp	r3, #0
 800538c:	d07e      	beq.n	800548c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	4798      	blx	r3
        }
        return;
 8005396:	e079      	b.n	800548c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d01d      	beq.n	80053e2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d10d      	bne.n	80053d0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d031      	beq.n	8005420 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	4798      	blx	r3
 80053c4:	e02c      	b.n	8005420 <HAL_DMA_IRQHandler+0x2a0>
 80053c6:	bf00      	nop
 80053c8:	20000004 	.word	0x20000004
 80053cc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d023      	beq.n	8005420 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	4798      	blx	r3
 80053e0:	e01e      	b.n	8005420 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d10f      	bne.n	8005410 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f022 0210 	bic.w	r2, r2, #16
 80053fe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005414:	2b00      	cmp	r3, #0
 8005416:	d003      	beq.n	8005420 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005424:	2b00      	cmp	r3, #0
 8005426:	d032      	beq.n	800548e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800542c:	f003 0301 	and.w	r3, r3, #1
 8005430:	2b00      	cmp	r3, #0
 8005432:	d022      	beq.n	800547a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2205      	movs	r2, #5
 8005438:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f022 0201 	bic.w	r2, r2, #1
 800544a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	3301      	adds	r3, #1
 8005450:	60bb      	str	r3, [r7, #8]
 8005452:	697a      	ldr	r2, [r7, #20]
 8005454:	429a      	cmp	r2, r3
 8005456:	d307      	bcc.n	8005468 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f003 0301 	and.w	r3, r3, #1
 8005462:	2b00      	cmp	r3, #0
 8005464:	d1f2      	bne.n	800544c <HAL_DMA_IRQHandler+0x2cc>
 8005466:	e000      	b.n	800546a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005468:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2201      	movs	r2, #1
 800546e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2200      	movs	r2, #0
 8005476:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800547e:	2b00      	cmp	r3, #0
 8005480:	d005      	beq.n	800548e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	4798      	blx	r3
 800548a:	e000      	b.n	800548e <HAL_DMA_IRQHandler+0x30e>
        return;
 800548c:	bf00      	nop
    }
  }
}
 800548e:	3718      	adds	r7, #24
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}

08005494 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005494:	b480      	push	{r7}
 8005496:	b083      	sub	sp, #12
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	370c      	adds	r7, #12
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr

080054ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b085      	sub	sp, #20
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	60f8      	str	r0, [r7, #12]
 80054b4:	60b9      	str	r1, [r7, #8]
 80054b6:	607a      	str	r2, [r7, #4]
 80054b8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80054c8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	683a      	ldr	r2, [r7, #0]
 80054d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	2b40      	cmp	r3, #64	@ 0x40
 80054d8:	d108      	bne.n	80054ec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	68ba      	ldr	r2, [r7, #8]
 80054e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80054ea:	e007      	b.n	80054fc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	68ba      	ldr	r2, [r7, #8]
 80054f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	60da      	str	r2, [r3, #12]
}
 80054fc:	bf00      	nop
 80054fe:	3714      	adds	r7, #20
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr

08005508 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005508:	b480      	push	{r7}
 800550a:	b085      	sub	sp, #20
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	b2db      	uxtb	r3, r3
 8005516:	3b10      	subs	r3, #16
 8005518:	4a13      	ldr	r2, [pc, #76]	@ (8005568 <DMA_CalcBaseAndBitshift+0x60>)
 800551a:	fba2 2303 	umull	r2, r3, r2, r3
 800551e:	091b      	lsrs	r3, r3, #4
 8005520:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005522:	4a12      	ldr	r2, [pc, #72]	@ (800556c <DMA_CalcBaseAndBitshift+0x64>)
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	4413      	add	r3, r2
 8005528:	781b      	ldrb	r3, [r3, #0]
 800552a:	461a      	mov	r2, r3
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2b03      	cmp	r3, #3
 8005534:	d908      	bls.n	8005548 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	461a      	mov	r2, r3
 800553c:	4b0c      	ldr	r3, [pc, #48]	@ (8005570 <DMA_CalcBaseAndBitshift+0x68>)
 800553e:	4013      	ands	r3, r2
 8005540:	1d1a      	adds	r2, r3, #4
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	659a      	str	r2, [r3, #88]	@ 0x58
 8005546:	e006      	b.n	8005556 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	461a      	mov	r2, r3
 800554e:	4b08      	ldr	r3, [pc, #32]	@ (8005570 <DMA_CalcBaseAndBitshift+0x68>)
 8005550:	4013      	ands	r3, r2
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800555a:	4618      	mov	r0, r3
 800555c:	3714      	adds	r7, #20
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr
 8005566:	bf00      	nop
 8005568:	aaaaaaab 	.word	0xaaaaaaab
 800556c:	08016d7c 	.word	0x08016d7c
 8005570:	fffffc00 	.word	0xfffffc00

08005574 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005574:	b480      	push	{r7}
 8005576:	b085      	sub	sp, #20
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800557c:	2300      	movs	r3, #0
 800557e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005584:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	699b      	ldr	r3, [r3, #24]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d11f      	bne.n	80055ce <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	2b03      	cmp	r3, #3
 8005592:	d856      	bhi.n	8005642 <DMA_CheckFifoParam+0xce>
 8005594:	a201      	add	r2, pc, #4	@ (adr r2, 800559c <DMA_CheckFifoParam+0x28>)
 8005596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800559a:	bf00      	nop
 800559c:	080055ad 	.word	0x080055ad
 80055a0:	080055bf 	.word	0x080055bf
 80055a4:	080055ad 	.word	0x080055ad
 80055a8:	08005643 	.word	0x08005643
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d046      	beq.n	8005646 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055bc:	e043      	b.n	8005646 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055c2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80055c6:	d140      	bne.n	800564a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055cc:	e03d      	b.n	800564a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	699b      	ldr	r3, [r3, #24]
 80055d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80055d6:	d121      	bne.n	800561c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	2b03      	cmp	r3, #3
 80055dc:	d837      	bhi.n	800564e <DMA_CheckFifoParam+0xda>
 80055de:	a201      	add	r2, pc, #4	@ (adr r2, 80055e4 <DMA_CheckFifoParam+0x70>)
 80055e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055e4:	080055f5 	.word	0x080055f5
 80055e8:	080055fb 	.word	0x080055fb
 80055ec:	080055f5 	.word	0x080055f5
 80055f0:	0800560d 	.word	0x0800560d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	73fb      	strb	r3, [r7, #15]
      break;
 80055f8:	e030      	b.n	800565c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055fe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005602:	2b00      	cmp	r3, #0
 8005604:	d025      	beq.n	8005652 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800560a:	e022      	b.n	8005652 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005610:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005614:	d11f      	bne.n	8005656 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800561a:	e01c      	b.n	8005656 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	2b02      	cmp	r3, #2
 8005620:	d903      	bls.n	800562a <DMA_CheckFifoParam+0xb6>
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	2b03      	cmp	r3, #3
 8005626:	d003      	beq.n	8005630 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005628:	e018      	b.n	800565c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	73fb      	strb	r3, [r7, #15]
      break;
 800562e:	e015      	b.n	800565c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005634:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005638:	2b00      	cmp	r3, #0
 800563a:	d00e      	beq.n	800565a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	73fb      	strb	r3, [r7, #15]
      break;
 8005640:	e00b      	b.n	800565a <DMA_CheckFifoParam+0xe6>
      break;
 8005642:	bf00      	nop
 8005644:	e00a      	b.n	800565c <DMA_CheckFifoParam+0xe8>
      break;
 8005646:	bf00      	nop
 8005648:	e008      	b.n	800565c <DMA_CheckFifoParam+0xe8>
      break;
 800564a:	bf00      	nop
 800564c:	e006      	b.n	800565c <DMA_CheckFifoParam+0xe8>
      break;
 800564e:	bf00      	nop
 8005650:	e004      	b.n	800565c <DMA_CheckFifoParam+0xe8>
      break;
 8005652:	bf00      	nop
 8005654:	e002      	b.n	800565c <DMA_CheckFifoParam+0xe8>
      break;   
 8005656:	bf00      	nop
 8005658:	e000      	b.n	800565c <DMA_CheckFifoParam+0xe8>
      break;
 800565a:	bf00      	nop
    }
  } 
  
  return status; 
 800565c:	7bfb      	ldrb	r3, [r7, #15]
}
 800565e:	4618      	mov	r0, r3
 8005660:	3714      	adds	r7, #20
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr
 800566a:	bf00      	nop

0800566c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800566c:	b480      	push	{r7}
 800566e:	b089      	sub	sp, #36	@ 0x24
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005676:	2300      	movs	r3, #0
 8005678:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800567a:	2300      	movs	r3, #0
 800567c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800567e:	2300      	movs	r3, #0
 8005680:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005682:	2300      	movs	r3, #0
 8005684:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8005686:	2300      	movs	r3, #0
 8005688:	61fb      	str	r3, [r7, #28]
 800568a:	e175      	b.n	8005978 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800568c:	2201      	movs	r2, #1
 800568e:	69fb      	ldr	r3, [r7, #28]
 8005690:	fa02 f303 	lsl.w	r3, r2, r3
 8005694:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	697a      	ldr	r2, [r7, #20]
 800569c:	4013      	ands	r3, r2
 800569e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80056a0:	693a      	ldr	r2, [r7, #16]
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	429a      	cmp	r2, r3
 80056a6:	f040 8164 	bne.w	8005972 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	f003 0303 	and.w	r3, r3, #3
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d005      	beq.n	80056c2 <HAL_GPIO_Init+0x56>
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	f003 0303 	and.w	r3, r3, #3
 80056be:	2b02      	cmp	r3, #2
 80056c0:	d130      	bne.n	8005724 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80056c8:	69fb      	ldr	r3, [r7, #28]
 80056ca:	005b      	lsls	r3, r3, #1
 80056cc:	2203      	movs	r2, #3
 80056ce:	fa02 f303 	lsl.w	r3, r2, r3
 80056d2:	43db      	mvns	r3, r3
 80056d4:	69ba      	ldr	r2, [r7, #24]
 80056d6:	4013      	ands	r3, r2
 80056d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	68da      	ldr	r2, [r3, #12]
 80056de:	69fb      	ldr	r3, [r7, #28]
 80056e0:	005b      	lsls	r3, r3, #1
 80056e2:	fa02 f303 	lsl.w	r3, r2, r3
 80056e6:	69ba      	ldr	r2, [r7, #24]
 80056e8:	4313      	orrs	r3, r2
 80056ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	69ba      	ldr	r2, [r7, #24]
 80056f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80056f8:	2201      	movs	r2, #1
 80056fa:	69fb      	ldr	r3, [r7, #28]
 80056fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005700:	43db      	mvns	r3, r3
 8005702:	69ba      	ldr	r2, [r7, #24]
 8005704:	4013      	ands	r3, r2
 8005706:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	091b      	lsrs	r3, r3, #4
 800570e:	f003 0201 	and.w	r2, r3, #1
 8005712:	69fb      	ldr	r3, [r7, #28]
 8005714:	fa02 f303 	lsl.w	r3, r2, r3
 8005718:	69ba      	ldr	r2, [r7, #24]
 800571a:	4313      	orrs	r3, r2
 800571c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	69ba      	ldr	r2, [r7, #24]
 8005722:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	f003 0303 	and.w	r3, r3, #3
 800572c:	2b03      	cmp	r3, #3
 800572e:	d017      	beq.n	8005760 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005736:	69fb      	ldr	r3, [r7, #28]
 8005738:	005b      	lsls	r3, r3, #1
 800573a:	2203      	movs	r2, #3
 800573c:	fa02 f303 	lsl.w	r3, r2, r3
 8005740:	43db      	mvns	r3, r3
 8005742:	69ba      	ldr	r2, [r7, #24]
 8005744:	4013      	ands	r3, r2
 8005746:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	689a      	ldr	r2, [r3, #8]
 800574c:	69fb      	ldr	r3, [r7, #28]
 800574e:	005b      	lsls	r3, r3, #1
 8005750:	fa02 f303 	lsl.w	r3, r2, r3
 8005754:	69ba      	ldr	r2, [r7, #24]
 8005756:	4313      	orrs	r3, r2
 8005758:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	69ba      	ldr	r2, [r7, #24]
 800575e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	f003 0303 	and.w	r3, r3, #3
 8005768:	2b02      	cmp	r3, #2
 800576a:	d123      	bne.n	80057b4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800576c:	69fb      	ldr	r3, [r7, #28]
 800576e:	08da      	lsrs	r2, r3, #3
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	3208      	adds	r2, #8
 8005774:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005778:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800577a:	69fb      	ldr	r3, [r7, #28]
 800577c:	f003 0307 	and.w	r3, r3, #7
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	220f      	movs	r2, #15
 8005784:	fa02 f303 	lsl.w	r3, r2, r3
 8005788:	43db      	mvns	r3, r3
 800578a:	69ba      	ldr	r2, [r7, #24]
 800578c:	4013      	ands	r3, r2
 800578e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	691a      	ldr	r2, [r3, #16]
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	f003 0307 	and.w	r3, r3, #7
 800579a:	009b      	lsls	r3, r3, #2
 800579c:	fa02 f303 	lsl.w	r3, r2, r3
 80057a0:	69ba      	ldr	r2, [r7, #24]
 80057a2:	4313      	orrs	r3, r2
 80057a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80057a6:	69fb      	ldr	r3, [r7, #28]
 80057a8:	08da      	lsrs	r2, r3, #3
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	3208      	adds	r2, #8
 80057ae:	69b9      	ldr	r1, [r7, #24]
 80057b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80057ba:	69fb      	ldr	r3, [r7, #28]
 80057bc:	005b      	lsls	r3, r3, #1
 80057be:	2203      	movs	r2, #3
 80057c0:	fa02 f303 	lsl.w	r3, r2, r3
 80057c4:	43db      	mvns	r3, r3
 80057c6:	69ba      	ldr	r2, [r7, #24]
 80057c8:	4013      	ands	r3, r2
 80057ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	f003 0203 	and.w	r2, r3, #3
 80057d4:	69fb      	ldr	r3, [r7, #28]
 80057d6:	005b      	lsls	r3, r3, #1
 80057d8:	fa02 f303 	lsl.w	r3, r2, r3
 80057dc:	69ba      	ldr	r2, [r7, #24]
 80057de:	4313      	orrs	r3, r2
 80057e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	69ba      	ldr	r2, [r7, #24]
 80057e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	f000 80be 	beq.w	8005972 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057f6:	4b66      	ldr	r3, [pc, #408]	@ (8005990 <HAL_GPIO_Init+0x324>)
 80057f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057fa:	4a65      	ldr	r2, [pc, #404]	@ (8005990 <HAL_GPIO_Init+0x324>)
 80057fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005800:	6453      	str	r3, [r2, #68]	@ 0x44
 8005802:	4b63      	ldr	r3, [pc, #396]	@ (8005990 <HAL_GPIO_Init+0x324>)
 8005804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005806:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800580a:	60fb      	str	r3, [r7, #12]
 800580c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800580e:	4a61      	ldr	r2, [pc, #388]	@ (8005994 <HAL_GPIO_Init+0x328>)
 8005810:	69fb      	ldr	r3, [r7, #28]
 8005812:	089b      	lsrs	r3, r3, #2
 8005814:	3302      	adds	r3, #2
 8005816:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800581a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	f003 0303 	and.w	r3, r3, #3
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	220f      	movs	r2, #15
 8005826:	fa02 f303 	lsl.w	r3, r2, r3
 800582a:	43db      	mvns	r3, r3
 800582c:	69ba      	ldr	r2, [r7, #24]
 800582e:	4013      	ands	r3, r2
 8005830:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	4a58      	ldr	r2, [pc, #352]	@ (8005998 <HAL_GPIO_Init+0x32c>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d037      	beq.n	80058aa <HAL_GPIO_Init+0x23e>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	4a57      	ldr	r2, [pc, #348]	@ (800599c <HAL_GPIO_Init+0x330>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d031      	beq.n	80058a6 <HAL_GPIO_Init+0x23a>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	4a56      	ldr	r2, [pc, #344]	@ (80059a0 <HAL_GPIO_Init+0x334>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d02b      	beq.n	80058a2 <HAL_GPIO_Init+0x236>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	4a55      	ldr	r2, [pc, #340]	@ (80059a4 <HAL_GPIO_Init+0x338>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d025      	beq.n	800589e <HAL_GPIO_Init+0x232>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	4a54      	ldr	r2, [pc, #336]	@ (80059a8 <HAL_GPIO_Init+0x33c>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d01f      	beq.n	800589a <HAL_GPIO_Init+0x22e>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	4a53      	ldr	r2, [pc, #332]	@ (80059ac <HAL_GPIO_Init+0x340>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d019      	beq.n	8005896 <HAL_GPIO_Init+0x22a>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	4a52      	ldr	r2, [pc, #328]	@ (80059b0 <HAL_GPIO_Init+0x344>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d013      	beq.n	8005892 <HAL_GPIO_Init+0x226>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4a51      	ldr	r2, [pc, #324]	@ (80059b4 <HAL_GPIO_Init+0x348>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d00d      	beq.n	800588e <HAL_GPIO_Init+0x222>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a50      	ldr	r2, [pc, #320]	@ (80059b8 <HAL_GPIO_Init+0x34c>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d007      	beq.n	800588a <HAL_GPIO_Init+0x21e>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4a4f      	ldr	r2, [pc, #316]	@ (80059bc <HAL_GPIO_Init+0x350>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d101      	bne.n	8005886 <HAL_GPIO_Init+0x21a>
 8005882:	2309      	movs	r3, #9
 8005884:	e012      	b.n	80058ac <HAL_GPIO_Init+0x240>
 8005886:	230a      	movs	r3, #10
 8005888:	e010      	b.n	80058ac <HAL_GPIO_Init+0x240>
 800588a:	2308      	movs	r3, #8
 800588c:	e00e      	b.n	80058ac <HAL_GPIO_Init+0x240>
 800588e:	2307      	movs	r3, #7
 8005890:	e00c      	b.n	80058ac <HAL_GPIO_Init+0x240>
 8005892:	2306      	movs	r3, #6
 8005894:	e00a      	b.n	80058ac <HAL_GPIO_Init+0x240>
 8005896:	2305      	movs	r3, #5
 8005898:	e008      	b.n	80058ac <HAL_GPIO_Init+0x240>
 800589a:	2304      	movs	r3, #4
 800589c:	e006      	b.n	80058ac <HAL_GPIO_Init+0x240>
 800589e:	2303      	movs	r3, #3
 80058a0:	e004      	b.n	80058ac <HAL_GPIO_Init+0x240>
 80058a2:	2302      	movs	r3, #2
 80058a4:	e002      	b.n	80058ac <HAL_GPIO_Init+0x240>
 80058a6:	2301      	movs	r3, #1
 80058a8:	e000      	b.n	80058ac <HAL_GPIO_Init+0x240>
 80058aa:	2300      	movs	r3, #0
 80058ac:	69fa      	ldr	r2, [r7, #28]
 80058ae:	f002 0203 	and.w	r2, r2, #3
 80058b2:	0092      	lsls	r2, r2, #2
 80058b4:	4093      	lsls	r3, r2
 80058b6:	69ba      	ldr	r2, [r7, #24]
 80058b8:	4313      	orrs	r3, r2
 80058ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80058bc:	4935      	ldr	r1, [pc, #212]	@ (8005994 <HAL_GPIO_Init+0x328>)
 80058be:	69fb      	ldr	r3, [r7, #28]
 80058c0:	089b      	lsrs	r3, r3, #2
 80058c2:	3302      	adds	r3, #2
 80058c4:	69ba      	ldr	r2, [r7, #24]
 80058c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80058ca:	4b3d      	ldr	r3, [pc, #244]	@ (80059c0 <HAL_GPIO_Init+0x354>)
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	43db      	mvns	r3, r3
 80058d4:	69ba      	ldr	r2, [r7, #24]
 80058d6:	4013      	ands	r3, r2
 80058d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d003      	beq.n	80058ee <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80058e6:	69ba      	ldr	r2, [r7, #24]
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	4313      	orrs	r3, r2
 80058ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80058ee:	4a34      	ldr	r2, [pc, #208]	@ (80059c0 <HAL_GPIO_Init+0x354>)
 80058f0:	69bb      	ldr	r3, [r7, #24]
 80058f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80058f4:	4b32      	ldr	r3, [pc, #200]	@ (80059c0 <HAL_GPIO_Init+0x354>)
 80058f6:	68db      	ldr	r3, [r3, #12]
 80058f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	43db      	mvns	r3, r3
 80058fe:	69ba      	ldr	r2, [r7, #24]
 8005900:	4013      	ands	r3, r2
 8005902:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800590c:	2b00      	cmp	r3, #0
 800590e:	d003      	beq.n	8005918 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005910:	69ba      	ldr	r2, [r7, #24]
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	4313      	orrs	r3, r2
 8005916:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005918:	4a29      	ldr	r2, [pc, #164]	@ (80059c0 <HAL_GPIO_Init+0x354>)
 800591a:	69bb      	ldr	r3, [r7, #24]
 800591c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800591e:	4b28      	ldr	r3, [pc, #160]	@ (80059c0 <HAL_GPIO_Init+0x354>)
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	43db      	mvns	r3, r3
 8005928:	69ba      	ldr	r2, [r7, #24]
 800592a:	4013      	ands	r3, r2
 800592c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005936:	2b00      	cmp	r3, #0
 8005938:	d003      	beq.n	8005942 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800593a:	69ba      	ldr	r2, [r7, #24]
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	4313      	orrs	r3, r2
 8005940:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005942:	4a1f      	ldr	r2, [pc, #124]	@ (80059c0 <HAL_GPIO_Init+0x354>)
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005948:	4b1d      	ldr	r3, [pc, #116]	@ (80059c0 <HAL_GPIO_Init+0x354>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	43db      	mvns	r3, r3
 8005952:	69ba      	ldr	r2, [r7, #24]
 8005954:	4013      	ands	r3, r2
 8005956:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005960:	2b00      	cmp	r3, #0
 8005962:	d003      	beq.n	800596c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005964:	69ba      	ldr	r2, [r7, #24]
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	4313      	orrs	r3, r2
 800596a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800596c:	4a14      	ldr	r2, [pc, #80]	@ (80059c0 <HAL_GPIO_Init+0x354>)
 800596e:	69bb      	ldr	r3, [r7, #24]
 8005970:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	3301      	adds	r3, #1
 8005976:	61fb      	str	r3, [r7, #28]
 8005978:	69fb      	ldr	r3, [r7, #28]
 800597a:	2b0f      	cmp	r3, #15
 800597c:	f67f ae86 	bls.w	800568c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005980:	bf00      	nop
 8005982:	bf00      	nop
 8005984:	3724      	adds	r7, #36	@ 0x24
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr
 800598e:	bf00      	nop
 8005990:	40023800 	.word	0x40023800
 8005994:	40013800 	.word	0x40013800
 8005998:	40020000 	.word	0x40020000
 800599c:	40020400 	.word	0x40020400
 80059a0:	40020800 	.word	0x40020800
 80059a4:	40020c00 	.word	0x40020c00
 80059a8:	40021000 	.word	0x40021000
 80059ac:	40021400 	.word	0x40021400
 80059b0:	40021800 	.word	0x40021800
 80059b4:	40021c00 	.word	0x40021c00
 80059b8:	40022000 	.word	0x40022000
 80059bc:	40022400 	.word	0x40022400
 80059c0:	40013c00 	.word	0x40013c00

080059c4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b087      	sub	sp, #28
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 80059ce:	2300      	movs	r3, #0
 80059d0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 80059d2:	2300      	movs	r3, #0
 80059d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 80059d6:	2300      	movs	r3, #0
 80059d8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80059da:	2300      	movs	r3, #0
 80059dc:	617b      	str	r3, [r7, #20]
 80059de:	e0d9      	b.n	8005b94 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80059e0:	2201      	movs	r2, #1
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	fa02 f303 	lsl.w	r3, r2, r3
 80059e8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80059ea:	683a      	ldr	r2, [r7, #0]
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	4013      	ands	r3, r2
 80059f0:	60fb      	str	r3, [r7, #12]

    if (iocurrent == ioposition)
 80059f2:	68fa      	ldr	r2, [r7, #12]
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	429a      	cmp	r2, r3
 80059f8:	f040 80c9 	bne.w	8005b8e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 80059fc:	4a6b      	ldr	r2, [pc, #428]	@ (8005bac <HAL_GPIO_DeInit+0x1e8>)
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	089b      	lsrs	r3, r3, #2
 8005a02:	3302      	adds	r3, #2
 8005a04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a08:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	f003 0303 	and.w	r3, r3, #3
 8005a10:	009b      	lsls	r3, r3, #2
 8005a12:	220f      	movs	r2, #15
 8005a14:	fa02 f303 	lsl.w	r3, r2, r3
 8005a18:	68ba      	ldr	r2, [r7, #8]
 8005a1a:	4013      	ands	r3, r2
 8005a1c:	60bb      	str	r3, [r7, #8]
      if (tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4a63      	ldr	r2, [pc, #396]	@ (8005bb0 <HAL_GPIO_DeInit+0x1ec>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d037      	beq.n	8005a96 <HAL_GPIO_DeInit+0xd2>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4a62      	ldr	r2, [pc, #392]	@ (8005bb4 <HAL_GPIO_DeInit+0x1f0>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d031      	beq.n	8005a92 <HAL_GPIO_DeInit+0xce>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4a61      	ldr	r2, [pc, #388]	@ (8005bb8 <HAL_GPIO_DeInit+0x1f4>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d02b      	beq.n	8005a8e <HAL_GPIO_DeInit+0xca>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a60      	ldr	r2, [pc, #384]	@ (8005bbc <HAL_GPIO_DeInit+0x1f8>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d025      	beq.n	8005a8a <HAL_GPIO_DeInit+0xc6>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4a5f      	ldr	r2, [pc, #380]	@ (8005bc0 <HAL_GPIO_DeInit+0x1fc>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d01f      	beq.n	8005a86 <HAL_GPIO_DeInit+0xc2>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4a5e      	ldr	r2, [pc, #376]	@ (8005bc4 <HAL_GPIO_DeInit+0x200>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d019      	beq.n	8005a82 <HAL_GPIO_DeInit+0xbe>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a5d      	ldr	r2, [pc, #372]	@ (8005bc8 <HAL_GPIO_DeInit+0x204>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d013      	beq.n	8005a7e <HAL_GPIO_DeInit+0xba>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	4a5c      	ldr	r2, [pc, #368]	@ (8005bcc <HAL_GPIO_DeInit+0x208>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d00d      	beq.n	8005a7a <HAL_GPIO_DeInit+0xb6>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	4a5b      	ldr	r2, [pc, #364]	@ (8005bd0 <HAL_GPIO_DeInit+0x20c>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d007      	beq.n	8005a76 <HAL_GPIO_DeInit+0xb2>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	4a5a      	ldr	r2, [pc, #360]	@ (8005bd4 <HAL_GPIO_DeInit+0x210>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d101      	bne.n	8005a72 <HAL_GPIO_DeInit+0xae>
 8005a6e:	2309      	movs	r3, #9
 8005a70:	e012      	b.n	8005a98 <HAL_GPIO_DeInit+0xd4>
 8005a72:	230a      	movs	r3, #10
 8005a74:	e010      	b.n	8005a98 <HAL_GPIO_DeInit+0xd4>
 8005a76:	2308      	movs	r3, #8
 8005a78:	e00e      	b.n	8005a98 <HAL_GPIO_DeInit+0xd4>
 8005a7a:	2307      	movs	r3, #7
 8005a7c:	e00c      	b.n	8005a98 <HAL_GPIO_DeInit+0xd4>
 8005a7e:	2306      	movs	r3, #6
 8005a80:	e00a      	b.n	8005a98 <HAL_GPIO_DeInit+0xd4>
 8005a82:	2305      	movs	r3, #5
 8005a84:	e008      	b.n	8005a98 <HAL_GPIO_DeInit+0xd4>
 8005a86:	2304      	movs	r3, #4
 8005a88:	e006      	b.n	8005a98 <HAL_GPIO_DeInit+0xd4>
 8005a8a:	2303      	movs	r3, #3
 8005a8c:	e004      	b.n	8005a98 <HAL_GPIO_DeInit+0xd4>
 8005a8e:	2302      	movs	r3, #2
 8005a90:	e002      	b.n	8005a98 <HAL_GPIO_DeInit+0xd4>
 8005a92:	2301      	movs	r3, #1
 8005a94:	e000      	b.n	8005a98 <HAL_GPIO_DeInit+0xd4>
 8005a96:	2300      	movs	r3, #0
 8005a98:	697a      	ldr	r2, [r7, #20]
 8005a9a:	f002 0203 	and.w	r2, r2, #3
 8005a9e:	0092      	lsls	r2, r2, #2
 8005aa0:	4093      	lsls	r3, r2
 8005aa2:	68ba      	ldr	r2, [r7, #8]
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d132      	bne.n	8005b0e <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005aa8:	4b4b      	ldr	r3, [pc, #300]	@ (8005bd8 <HAL_GPIO_DeInit+0x214>)
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	43db      	mvns	r3, r3
 8005ab0:	4949      	ldr	r1, [pc, #292]	@ (8005bd8 <HAL_GPIO_DeInit+0x214>)
 8005ab2:	4013      	ands	r3, r2
 8005ab4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005ab6:	4b48      	ldr	r3, [pc, #288]	@ (8005bd8 <HAL_GPIO_DeInit+0x214>)
 8005ab8:	685a      	ldr	r2, [r3, #4]
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	43db      	mvns	r3, r3
 8005abe:	4946      	ldr	r1, [pc, #280]	@ (8005bd8 <HAL_GPIO_DeInit+0x214>)
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005ac4:	4b44      	ldr	r3, [pc, #272]	@ (8005bd8 <HAL_GPIO_DeInit+0x214>)
 8005ac6:	68da      	ldr	r2, [r3, #12]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	43db      	mvns	r3, r3
 8005acc:	4942      	ldr	r1, [pc, #264]	@ (8005bd8 <HAL_GPIO_DeInit+0x214>)
 8005ace:	4013      	ands	r3, r2
 8005ad0:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005ad2:	4b41      	ldr	r3, [pc, #260]	@ (8005bd8 <HAL_GPIO_DeInit+0x214>)
 8005ad4:	689a      	ldr	r2, [r3, #8]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	43db      	mvns	r3, r3
 8005ada:	493f      	ldr	r1, [pc, #252]	@ (8005bd8 <HAL_GPIO_DeInit+0x214>)
 8005adc:	4013      	ands	r3, r2
 8005ade:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	f003 0303 	and.w	r3, r3, #3
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	220f      	movs	r2, #15
 8005aea:	fa02 f303 	lsl.w	r3, r2, r3
 8005aee:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8005af0:	4a2e      	ldr	r2, [pc, #184]	@ (8005bac <HAL_GPIO_DeInit+0x1e8>)
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	089b      	lsrs	r3, r3, #2
 8005af6:	3302      	adds	r3, #2
 8005af8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	43da      	mvns	r2, r3
 8005b00:	482a      	ldr	r0, [pc, #168]	@ (8005bac <HAL_GPIO_DeInit+0x1e8>)
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	089b      	lsrs	r3, r3, #2
 8005b06:	400a      	ands	r2, r1
 8005b08:	3302      	adds	r3, #2
 8005b0a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	005b      	lsls	r3, r3, #1
 8005b16:	2103      	movs	r1, #3
 8005b18:	fa01 f303 	lsl.w	r3, r1, r3
 8005b1c:	43db      	mvns	r3, r3
 8005b1e:	401a      	ands	r2, r3
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	08da      	lsrs	r2, r3, #3
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	3208      	adds	r2, #8
 8005b2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	f003 0307 	and.w	r3, r3, #7
 8005b36:	009b      	lsls	r3, r3, #2
 8005b38:	220f      	movs	r2, #15
 8005b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b3e:	43db      	mvns	r3, r3
 8005b40:	697a      	ldr	r2, [r7, #20]
 8005b42:	08d2      	lsrs	r2, r2, #3
 8005b44:	4019      	ands	r1, r3
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	3208      	adds	r2, #8
 8005b4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	68da      	ldr	r2, [r3, #12]
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	005b      	lsls	r3, r3, #1
 8005b56:	2103      	movs	r1, #3
 8005b58:	fa01 f303 	lsl.w	r3, r1, r3
 8005b5c:	43db      	mvns	r3, r3
 8005b5e:	401a      	ands	r2, r3
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	685a      	ldr	r2, [r3, #4]
 8005b68:	2101      	movs	r1, #1
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8005b70:	43db      	mvns	r3, r3
 8005b72:	401a      	ands	r2, r3
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	689a      	ldr	r2, [r3, #8]
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	005b      	lsls	r3, r3, #1
 8005b80:	2103      	movs	r1, #3
 8005b82:	fa01 f303 	lsl.w	r3, r1, r3
 8005b86:	43db      	mvns	r3, r3
 8005b88:	401a      	ands	r2, r3
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	609a      	str	r2, [r3, #8]
  for (position = 0; position < GPIO_NUMBER; position++)
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	3301      	adds	r3, #1
 8005b92:	617b      	str	r3, [r7, #20]
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	2b0f      	cmp	r3, #15
 8005b98:	f67f af22 	bls.w	80059e0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005b9c:	bf00      	nop
 8005b9e:	bf00      	nop
 8005ba0:	371c      	adds	r7, #28
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr
 8005baa:	bf00      	nop
 8005bac:	40013800 	.word	0x40013800
 8005bb0:	40020000 	.word	0x40020000
 8005bb4:	40020400 	.word	0x40020400
 8005bb8:	40020800 	.word	0x40020800
 8005bbc:	40020c00 	.word	0x40020c00
 8005bc0:	40021000 	.word	0x40021000
 8005bc4:	40021400 	.word	0x40021400
 8005bc8:	40021800 	.word	0x40021800
 8005bcc:	40021c00 	.word	0x40021c00
 8005bd0:	40022000 	.word	0x40022000
 8005bd4:	40022400 	.word	0x40022400
 8005bd8:	40013c00 	.word	0x40013c00

08005bdc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b085      	sub	sp, #20
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	460b      	mov	r3, r1
 8005be6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	691a      	ldr	r2, [r3, #16]
 8005bec:	887b      	ldrh	r3, [r7, #2]
 8005bee:	4013      	ands	r3, r2
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d002      	beq.n	8005bfa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	73fb      	strb	r3, [r7, #15]
 8005bf8:	e001      	b.n	8005bfe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005bfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3714      	adds	r7, #20
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr

08005c0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b083      	sub	sp, #12
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	460b      	mov	r3, r1
 8005c16:	807b      	strh	r3, [r7, #2]
 8005c18:	4613      	mov	r3, r2
 8005c1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005c1c:	787b      	ldrb	r3, [r7, #1]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d003      	beq.n	8005c2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005c22:	887a      	ldrh	r2, [r7, #2]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005c28:	e003      	b.n	8005c32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005c2a:	887b      	ldrh	r3, [r7, #2]
 8005c2c:	041a      	lsls	r2, r3, #16
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	619a      	str	r2, [r3, #24]
}
 8005c32:	bf00      	nop
 8005c34:	370c      	adds	r7, #12
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr

08005c3e <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005c3e:	b480      	push	{r7}
 8005c40:	b085      	sub	sp, #20
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	6078      	str	r0, [r7, #4]
 8005c46:	460b      	mov	r3, r1
 8005c48:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	695b      	ldr	r3, [r3, #20]
 8005c4e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005c50:	887a      	ldrh	r2, [r7, #2]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	4013      	ands	r3, r2
 8005c56:	041a      	lsls	r2, r3, #16
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	43d9      	mvns	r1, r3
 8005c5c:	887b      	ldrh	r3, [r7, #2]
 8005c5e:	400b      	ands	r3, r1
 8005c60:	431a      	orrs	r2, r3
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	619a      	str	r2, [r3, #24]
}
 8005c66:	bf00      	nop
 8005c68:	3714      	adds	r7, #20
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr
	...

08005c74 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b082      	sub	sp, #8
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005c7e:	4b08      	ldr	r3, [pc, #32]	@ (8005ca0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005c80:	695a      	ldr	r2, [r3, #20]
 8005c82:	88fb      	ldrh	r3, [r7, #6]
 8005c84:	4013      	ands	r3, r2
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d006      	beq.n	8005c98 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005c8a:	4a05      	ldr	r2, [pc, #20]	@ (8005ca0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005c8c:	88fb      	ldrh	r3, [r7, #6]
 8005c8e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005c90:	88fb      	ldrh	r3, [r7, #6]
 8005c92:	4618      	mov	r0, r3
 8005c94:	f7fb ff68 	bl	8001b68 <HAL_GPIO_EXTI_Callback>
  }
}
 8005c98:	bf00      	nop
 8005c9a:	3708      	adds	r7, #8
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}
 8005ca0:	40013c00 	.word	0x40013c00

08005ca4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b082      	sub	sp, #8
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d101      	bne.n	8005cb6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	e08b      	b.n	8005dce <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005cbc:	b2db      	uxtb	r3, r3
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d106      	bne.n	8005cd0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f000 f8b5 	bl	8005e3a <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2224      	movs	r2, #36	@ 0x24
 8005cd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f022 0201 	bic.w	r2, r2, #1
 8005ce6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	685a      	ldr	r2, [r3, #4]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005cf4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	689a      	ldr	r2, [r3, #8]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005d04:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	68db      	ldr	r3, [r3, #12]
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	d107      	bne.n	8005d1e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	689a      	ldr	r2, [r3, #8]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005d1a:	609a      	str	r2, [r3, #8]
 8005d1c:	e006      	b.n	8005d2c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	689a      	ldr	r2, [r3, #8]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005d2a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	2b02      	cmp	r3, #2
 8005d32:	d108      	bne.n	8005d46 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	685a      	ldr	r2, [r3, #4]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005d42:	605a      	str	r2, [r3, #4]
 8005d44:	e007      	b.n	8005d56 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	685a      	ldr	r2, [r3, #4]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005d54:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	6859      	ldr	r1, [r3, #4]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	4b1d      	ldr	r3, [pc, #116]	@ (8005dd8 <HAL_I2C_Init+0x134>)
 8005d62:	430b      	orrs	r3, r1
 8005d64:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	68da      	ldr	r2, [r3, #12]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005d74:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	691a      	ldr	r2, [r3, #16]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	695b      	ldr	r3, [r3, #20]
 8005d7e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	699b      	ldr	r3, [r3, #24]
 8005d86:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	430a      	orrs	r2, r1
 8005d8e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	69d9      	ldr	r1, [r3, #28]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6a1a      	ldr	r2, [r3, #32]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	430a      	orrs	r2, r1
 8005d9e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	681a      	ldr	r2, [r3, #0]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f042 0201 	orr.w	r2, r2, #1
 8005dae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2220      	movs	r2, #32
 8005dba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005dcc:	2300      	movs	r3, #0
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3708      	adds	r7, #8
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}
 8005dd6:	bf00      	nop
 8005dd8:	02008000 	.word	0x02008000

08005ddc <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b082      	sub	sp, #8
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d101      	bne.n	8005dee <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	e021      	b.n	8005e32 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2224      	movs	r2, #36	@ 0x24
 8005df2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f022 0201 	bic.w	r2, r2, #1
 8005e04:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f000 f821 	bl	8005e4e <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2200      	movs	r2, #0
 8005e16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2200      	movs	r2, #0
 8005e24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005e30:	2300      	movs	r3, #0
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3708      	adds	r7, #8
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}

08005e3a <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8005e3a:	b480      	push	{r7}
 8005e3c:	b083      	sub	sp, #12
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8005e42:	bf00      	nop
 8005e44:	370c      	adds	r7, #12
 8005e46:	46bd      	mov	sp, r7
 8005e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4c:	4770      	bx	lr

08005e4e <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8005e4e:	b480      	push	{r7}
 8005e50:	b083      	sub	sp, #12
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8005e56:	bf00      	nop
 8005e58:	370c      	adds	r7, #12
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr
	...

08005e64 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b088      	sub	sp, #32
 8005e68:	af02      	add	r7, sp, #8
 8005e6a:	60f8      	str	r0, [r7, #12]
 8005e6c:	4608      	mov	r0, r1
 8005e6e:	4611      	mov	r1, r2
 8005e70:	461a      	mov	r2, r3
 8005e72:	4603      	mov	r3, r0
 8005e74:	817b      	strh	r3, [r7, #10]
 8005e76:	460b      	mov	r3, r1
 8005e78:	813b      	strh	r3, [r7, #8]
 8005e7a:	4613      	mov	r3, r2
 8005e7c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	2b20      	cmp	r3, #32
 8005e88:	f040 80f9 	bne.w	800607e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e8c:	6a3b      	ldr	r3, [r7, #32]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d002      	beq.n	8005e98 <HAL_I2C_Mem_Write+0x34>
 8005e92:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d105      	bne.n	8005ea4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e9e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	e0ed      	b.n	8006080 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d101      	bne.n	8005eb2 <HAL_I2C_Mem_Write+0x4e>
 8005eae:	2302      	movs	r3, #2
 8005eb0:	e0e6      	b.n	8006080 <HAL_I2C_Mem_Write+0x21c>
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005eba:	f7fe fd2f 	bl	800491c <HAL_GetTick>
 8005ebe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	9300      	str	r3, [sp, #0]
 8005ec4:	2319      	movs	r3, #25
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005ecc:	68f8      	ldr	r0, [r7, #12]
 8005ece:	f000 fad1 	bl	8006474 <I2C_WaitOnFlagUntilTimeout>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d001      	beq.n	8005edc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	e0d1      	b.n	8006080 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2221      	movs	r2, #33	@ 0x21
 8005ee0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2240      	movs	r2, #64	@ 0x40
 8005ee8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	6a3a      	ldr	r2, [r7, #32]
 8005ef6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005efc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2200      	movs	r2, #0
 8005f02:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005f04:	88f8      	ldrh	r0, [r7, #6]
 8005f06:	893a      	ldrh	r2, [r7, #8]
 8005f08:	8979      	ldrh	r1, [r7, #10]
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	9301      	str	r3, [sp, #4]
 8005f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f10:	9300      	str	r3, [sp, #0]
 8005f12:	4603      	mov	r3, r0
 8005f14:	68f8      	ldr	r0, [r7, #12]
 8005f16:	f000 f9e1 	bl	80062dc <I2C_RequestMemoryWrite>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d005      	beq.n	8005f2c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2200      	movs	r2, #0
 8005f24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	e0a9      	b.n	8006080 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	2bff      	cmp	r3, #255	@ 0xff
 8005f34:	d90e      	bls.n	8005f54 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	22ff      	movs	r2, #255	@ 0xff
 8005f3a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f40:	b2da      	uxtb	r2, r3
 8005f42:	8979      	ldrh	r1, [r7, #10]
 8005f44:	2300      	movs	r3, #0
 8005f46:	9300      	str	r3, [sp, #0]
 8005f48:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005f4c:	68f8      	ldr	r0, [r7, #12]
 8005f4e:	f000 fc55 	bl	80067fc <I2C_TransferConfig>
 8005f52:	e00f      	b.n	8005f74 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f58:	b29a      	uxth	r2, r3
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f62:	b2da      	uxtb	r2, r3
 8005f64:	8979      	ldrh	r1, [r7, #10]
 8005f66:	2300      	movs	r3, #0
 8005f68:	9300      	str	r3, [sp, #0]
 8005f6a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005f6e:	68f8      	ldr	r0, [r7, #12]
 8005f70:	f000 fc44 	bl	80067fc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f74:	697a      	ldr	r2, [r7, #20]
 8005f76:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005f78:	68f8      	ldr	r0, [r7, #12]
 8005f7a:	f000 fad4 	bl	8006526 <I2C_WaitOnTXISFlagUntilTimeout>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d001      	beq.n	8005f88 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005f84:	2301      	movs	r3, #1
 8005f86:	e07b      	b.n	8006080 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f8c:	781a      	ldrb	r2, [r3, #0]
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f98:	1c5a      	adds	r2, r3, #1
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	3b01      	subs	r3, #1
 8005fa6:	b29a      	uxth	r2, r3
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fb0:	3b01      	subs	r3, #1
 8005fb2:	b29a      	uxth	r2, r3
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d034      	beq.n	800602c <HAL_I2C_Mem_Write+0x1c8>
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d130      	bne.n	800602c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	9300      	str	r3, [sp, #0]
 8005fce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	2180      	movs	r1, #128	@ 0x80
 8005fd4:	68f8      	ldr	r0, [r7, #12]
 8005fd6:	f000 fa4d 	bl	8006474 <I2C_WaitOnFlagUntilTimeout>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d001      	beq.n	8005fe4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e04d      	b.n	8006080 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	2bff      	cmp	r3, #255	@ 0xff
 8005fec:	d90e      	bls.n	800600c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	22ff      	movs	r2, #255	@ 0xff
 8005ff2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ff8:	b2da      	uxtb	r2, r3
 8005ffa:	8979      	ldrh	r1, [r7, #10]
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	9300      	str	r3, [sp, #0]
 8006000:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006004:	68f8      	ldr	r0, [r7, #12]
 8006006:	f000 fbf9 	bl	80067fc <I2C_TransferConfig>
 800600a:	e00f      	b.n	800602c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006010:	b29a      	uxth	r2, r3
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800601a:	b2da      	uxtb	r2, r3
 800601c:	8979      	ldrh	r1, [r7, #10]
 800601e:	2300      	movs	r3, #0
 8006020:	9300      	str	r3, [sp, #0]
 8006022:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006026:	68f8      	ldr	r0, [r7, #12]
 8006028:	f000 fbe8 	bl	80067fc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006030:	b29b      	uxth	r3, r3
 8006032:	2b00      	cmp	r3, #0
 8006034:	d19e      	bne.n	8005f74 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006036:	697a      	ldr	r2, [r7, #20]
 8006038:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800603a:	68f8      	ldr	r0, [r7, #12]
 800603c:	f000 faba 	bl	80065b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006040:	4603      	mov	r3, r0
 8006042:	2b00      	cmp	r3, #0
 8006044:	d001      	beq.n	800604a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006046:	2301      	movs	r3, #1
 8006048:	e01a      	b.n	8006080 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	2220      	movs	r2, #32
 8006050:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	6859      	ldr	r1, [r3, #4]
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	4b0a      	ldr	r3, [pc, #40]	@ (8006088 <HAL_I2C_Mem_Write+0x224>)
 800605e:	400b      	ands	r3, r1
 8006060:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2220      	movs	r2, #32
 8006066:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2200      	movs	r2, #0
 800606e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2200      	movs	r2, #0
 8006076:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800607a:	2300      	movs	r3, #0
 800607c:	e000      	b.n	8006080 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800607e:	2302      	movs	r3, #2
  }
}
 8006080:	4618      	mov	r0, r3
 8006082:	3718      	adds	r7, #24
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}
 8006088:	fe00e800 	.word	0xfe00e800

0800608c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b088      	sub	sp, #32
 8006090:	af02      	add	r7, sp, #8
 8006092:	60f8      	str	r0, [r7, #12]
 8006094:	4608      	mov	r0, r1
 8006096:	4611      	mov	r1, r2
 8006098:	461a      	mov	r2, r3
 800609a:	4603      	mov	r3, r0
 800609c:	817b      	strh	r3, [r7, #10]
 800609e:	460b      	mov	r3, r1
 80060a0:	813b      	strh	r3, [r7, #8]
 80060a2:	4613      	mov	r3, r2
 80060a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060ac:	b2db      	uxtb	r3, r3
 80060ae:	2b20      	cmp	r3, #32
 80060b0:	f040 80fd 	bne.w	80062ae <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80060b4:	6a3b      	ldr	r3, [r7, #32]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d002      	beq.n	80060c0 <HAL_I2C_Mem_Read+0x34>
 80060ba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d105      	bne.n	80060cc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80060c6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80060c8:	2301      	movs	r3, #1
 80060ca:	e0f1      	b.n	80062b0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	d101      	bne.n	80060da <HAL_I2C_Mem_Read+0x4e>
 80060d6:	2302      	movs	r3, #2
 80060d8:	e0ea      	b.n	80062b0 <HAL_I2C_Mem_Read+0x224>
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2201      	movs	r2, #1
 80060de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80060e2:	f7fe fc1b 	bl	800491c <HAL_GetTick>
 80060e6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	9300      	str	r3, [sp, #0]
 80060ec:	2319      	movs	r3, #25
 80060ee:	2201      	movs	r2, #1
 80060f0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80060f4:	68f8      	ldr	r0, [r7, #12]
 80060f6:	f000 f9bd 	bl	8006474 <I2C_WaitOnFlagUntilTimeout>
 80060fa:	4603      	mov	r3, r0
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d001      	beq.n	8006104 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006100:	2301      	movs	r3, #1
 8006102:	e0d5      	b.n	80062b0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2222      	movs	r2, #34	@ 0x22
 8006108:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2240      	movs	r2, #64	@ 0x40
 8006110:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2200      	movs	r2, #0
 8006118:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	6a3a      	ldr	r2, [r7, #32]
 800611e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006124:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2200      	movs	r2, #0
 800612a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800612c:	88f8      	ldrh	r0, [r7, #6]
 800612e:	893a      	ldrh	r2, [r7, #8]
 8006130:	8979      	ldrh	r1, [r7, #10]
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	9301      	str	r3, [sp, #4]
 8006136:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006138:	9300      	str	r3, [sp, #0]
 800613a:	4603      	mov	r3, r0
 800613c:	68f8      	ldr	r0, [r7, #12]
 800613e:	f000 f921 	bl	8006384 <I2C_RequestMemoryRead>
 8006142:	4603      	mov	r3, r0
 8006144:	2b00      	cmp	r3, #0
 8006146:	d005      	beq.n	8006154 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2200      	movs	r2, #0
 800614c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	e0ad      	b.n	80062b0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006158:	b29b      	uxth	r3, r3
 800615a:	2bff      	cmp	r3, #255	@ 0xff
 800615c:	d90e      	bls.n	800617c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2201      	movs	r2, #1
 8006162:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006168:	b2da      	uxtb	r2, r3
 800616a:	8979      	ldrh	r1, [r7, #10]
 800616c:	4b52      	ldr	r3, [pc, #328]	@ (80062b8 <HAL_I2C_Mem_Read+0x22c>)
 800616e:	9300      	str	r3, [sp, #0]
 8006170:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006174:	68f8      	ldr	r0, [r7, #12]
 8006176:	f000 fb41 	bl	80067fc <I2C_TransferConfig>
 800617a:	e00f      	b.n	800619c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006180:	b29a      	uxth	r2, r3
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800618a:	b2da      	uxtb	r2, r3
 800618c:	8979      	ldrh	r1, [r7, #10]
 800618e:	4b4a      	ldr	r3, [pc, #296]	@ (80062b8 <HAL_I2C_Mem_Read+0x22c>)
 8006190:	9300      	str	r3, [sp, #0]
 8006192:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006196:	68f8      	ldr	r0, [r7, #12]
 8006198:	f000 fb30 	bl	80067fc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	9300      	str	r3, [sp, #0]
 80061a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061a2:	2200      	movs	r2, #0
 80061a4:	2104      	movs	r1, #4
 80061a6:	68f8      	ldr	r0, [r7, #12]
 80061a8:	f000 f964 	bl	8006474 <I2C_WaitOnFlagUntilTimeout>
 80061ac:	4603      	mov	r3, r0
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d001      	beq.n	80061b6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	e07c      	b.n	80062b0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061c0:	b2d2      	uxtb	r2, r2
 80061c2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061c8:	1c5a      	adds	r2, r3, #1
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061d2:	3b01      	subs	r3, #1
 80061d4:	b29a      	uxth	r2, r3
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061de:	b29b      	uxth	r3, r3
 80061e0:	3b01      	subs	r3, #1
 80061e2:	b29a      	uxth	r2, r3
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d034      	beq.n	800625c <HAL_I2C_Mem_Read+0x1d0>
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d130      	bne.n	800625c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	9300      	str	r3, [sp, #0]
 80061fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006200:	2200      	movs	r2, #0
 8006202:	2180      	movs	r1, #128	@ 0x80
 8006204:	68f8      	ldr	r0, [r7, #12]
 8006206:	f000 f935 	bl	8006474 <I2C_WaitOnFlagUntilTimeout>
 800620a:	4603      	mov	r3, r0
 800620c:	2b00      	cmp	r3, #0
 800620e:	d001      	beq.n	8006214 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006210:	2301      	movs	r3, #1
 8006212:	e04d      	b.n	80062b0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006218:	b29b      	uxth	r3, r3
 800621a:	2bff      	cmp	r3, #255	@ 0xff
 800621c:	d90e      	bls.n	800623c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2201      	movs	r2, #1
 8006222:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006228:	b2da      	uxtb	r2, r3
 800622a:	8979      	ldrh	r1, [r7, #10]
 800622c:	2300      	movs	r3, #0
 800622e:	9300      	str	r3, [sp, #0]
 8006230:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006234:	68f8      	ldr	r0, [r7, #12]
 8006236:	f000 fae1 	bl	80067fc <I2C_TransferConfig>
 800623a:	e00f      	b.n	800625c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006240:	b29a      	uxth	r2, r3
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800624a:	b2da      	uxtb	r2, r3
 800624c:	8979      	ldrh	r1, [r7, #10]
 800624e:	2300      	movs	r3, #0
 8006250:	9300      	str	r3, [sp, #0]
 8006252:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006256:	68f8      	ldr	r0, [r7, #12]
 8006258:	f000 fad0 	bl	80067fc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006260:	b29b      	uxth	r3, r3
 8006262:	2b00      	cmp	r3, #0
 8006264:	d19a      	bne.n	800619c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006266:	697a      	ldr	r2, [r7, #20]
 8006268:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800626a:	68f8      	ldr	r0, [r7, #12]
 800626c:	f000 f9a2 	bl	80065b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006270:	4603      	mov	r3, r0
 8006272:	2b00      	cmp	r3, #0
 8006274:	d001      	beq.n	800627a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	e01a      	b.n	80062b0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	2220      	movs	r2, #32
 8006280:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	6859      	ldr	r1, [r3, #4]
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681a      	ldr	r2, [r3, #0]
 800628c:	4b0b      	ldr	r3, [pc, #44]	@ (80062bc <HAL_I2C_Mem_Read+0x230>)
 800628e:	400b      	ands	r3, r1
 8006290:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2220      	movs	r2, #32
 8006296:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2200      	movs	r2, #0
 800629e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2200      	movs	r2, #0
 80062a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80062aa:	2300      	movs	r3, #0
 80062ac:	e000      	b.n	80062b0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80062ae:	2302      	movs	r3, #2
  }
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	3718      	adds	r7, #24
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}
 80062b8:	80002400 	.word	0x80002400
 80062bc:	fe00e800 	.word	0xfe00e800

080062c0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b083      	sub	sp, #12
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80062ce:	b2db      	uxtb	r3, r3
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	370c      	adds	r7, #12
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr

080062dc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b086      	sub	sp, #24
 80062e0:	af02      	add	r7, sp, #8
 80062e2:	60f8      	str	r0, [r7, #12]
 80062e4:	4608      	mov	r0, r1
 80062e6:	4611      	mov	r1, r2
 80062e8:	461a      	mov	r2, r3
 80062ea:	4603      	mov	r3, r0
 80062ec:	817b      	strh	r3, [r7, #10]
 80062ee:	460b      	mov	r3, r1
 80062f0:	813b      	strh	r3, [r7, #8]
 80062f2:	4613      	mov	r3, r2
 80062f4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80062f6:	88fb      	ldrh	r3, [r7, #6]
 80062f8:	b2da      	uxtb	r2, r3
 80062fa:	8979      	ldrh	r1, [r7, #10]
 80062fc:	4b20      	ldr	r3, [pc, #128]	@ (8006380 <I2C_RequestMemoryWrite+0xa4>)
 80062fe:	9300      	str	r3, [sp, #0]
 8006300:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006304:	68f8      	ldr	r0, [r7, #12]
 8006306:	f000 fa79 	bl	80067fc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800630a:	69fa      	ldr	r2, [r7, #28]
 800630c:	69b9      	ldr	r1, [r7, #24]
 800630e:	68f8      	ldr	r0, [r7, #12]
 8006310:	f000 f909 	bl	8006526 <I2C_WaitOnTXISFlagUntilTimeout>
 8006314:	4603      	mov	r3, r0
 8006316:	2b00      	cmp	r3, #0
 8006318:	d001      	beq.n	800631e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800631a:	2301      	movs	r3, #1
 800631c:	e02c      	b.n	8006378 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800631e:	88fb      	ldrh	r3, [r7, #6]
 8006320:	2b01      	cmp	r3, #1
 8006322:	d105      	bne.n	8006330 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006324:	893b      	ldrh	r3, [r7, #8]
 8006326:	b2da      	uxtb	r2, r3
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	629a      	str	r2, [r3, #40]	@ 0x28
 800632e:	e015      	b.n	800635c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006330:	893b      	ldrh	r3, [r7, #8]
 8006332:	0a1b      	lsrs	r3, r3, #8
 8006334:	b29b      	uxth	r3, r3
 8006336:	b2da      	uxtb	r2, r3
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800633e:	69fa      	ldr	r2, [r7, #28]
 8006340:	69b9      	ldr	r1, [r7, #24]
 8006342:	68f8      	ldr	r0, [r7, #12]
 8006344:	f000 f8ef 	bl	8006526 <I2C_WaitOnTXISFlagUntilTimeout>
 8006348:	4603      	mov	r3, r0
 800634a:	2b00      	cmp	r3, #0
 800634c:	d001      	beq.n	8006352 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800634e:	2301      	movs	r3, #1
 8006350:	e012      	b.n	8006378 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006352:	893b      	ldrh	r3, [r7, #8]
 8006354:	b2da      	uxtb	r2, r3
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800635c:	69fb      	ldr	r3, [r7, #28]
 800635e:	9300      	str	r3, [sp, #0]
 8006360:	69bb      	ldr	r3, [r7, #24]
 8006362:	2200      	movs	r2, #0
 8006364:	2180      	movs	r1, #128	@ 0x80
 8006366:	68f8      	ldr	r0, [r7, #12]
 8006368:	f000 f884 	bl	8006474 <I2C_WaitOnFlagUntilTimeout>
 800636c:	4603      	mov	r3, r0
 800636e:	2b00      	cmp	r3, #0
 8006370:	d001      	beq.n	8006376 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006372:	2301      	movs	r3, #1
 8006374:	e000      	b.n	8006378 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006376:	2300      	movs	r3, #0
}
 8006378:	4618      	mov	r0, r3
 800637a:	3710      	adds	r7, #16
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}
 8006380:	80002000 	.word	0x80002000

08006384 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b086      	sub	sp, #24
 8006388:	af02      	add	r7, sp, #8
 800638a:	60f8      	str	r0, [r7, #12]
 800638c:	4608      	mov	r0, r1
 800638e:	4611      	mov	r1, r2
 8006390:	461a      	mov	r2, r3
 8006392:	4603      	mov	r3, r0
 8006394:	817b      	strh	r3, [r7, #10]
 8006396:	460b      	mov	r3, r1
 8006398:	813b      	strh	r3, [r7, #8]
 800639a:	4613      	mov	r3, r2
 800639c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800639e:	88fb      	ldrh	r3, [r7, #6]
 80063a0:	b2da      	uxtb	r2, r3
 80063a2:	8979      	ldrh	r1, [r7, #10]
 80063a4:	4b20      	ldr	r3, [pc, #128]	@ (8006428 <I2C_RequestMemoryRead+0xa4>)
 80063a6:	9300      	str	r3, [sp, #0]
 80063a8:	2300      	movs	r3, #0
 80063aa:	68f8      	ldr	r0, [r7, #12]
 80063ac:	f000 fa26 	bl	80067fc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80063b0:	69fa      	ldr	r2, [r7, #28]
 80063b2:	69b9      	ldr	r1, [r7, #24]
 80063b4:	68f8      	ldr	r0, [r7, #12]
 80063b6:	f000 f8b6 	bl	8006526 <I2C_WaitOnTXISFlagUntilTimeout>
 80063ba:	4603      	mov	r3, r0
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d001      	beq.n	80063c4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80063c0:	2301      	movs	r3, #1
 80063c2:	e02c      	b.n	800641e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80063c4:	88fb      	ldrh	r3, [r7, #6]
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d105      	bne.n	80063d6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80063ca:	893b      	ldrh	r3, [r7, #8]
 80063cc:	b2da      	uxtb	r2, r3
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	629a      	str	r2, [r3, #40]	@ 0x28
 80063d4:	e015      	b.n	8006402 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80063d6:	893b      	ldrh	r3, [r7, #8]
 80063d8:	0a1b      	lsrs	r3, r3, #8
 80063da:	b29b      	uxth	r3, r3
 80063dc:	b2da      	uxtb	r2, r3
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80063e4:	69fa      	ldr	r2, [r7, #28]
 80063e6:	69b9      	ldr	r1, [r7, #24]
 80063e8:	68f8      	ldr	r0, [r7, #12]
 80063ea:	f000 f89c 	bl	8006526 <I2C_WaitOnTXISFlagUntilTimeout>
 80063ee:	4603      	mov	r3, r0
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d001      	beq.n	80063f8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80063f4:	2301      	movs	r3, #1
 80063f6:	e012      	b.n	800641e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80063f8:	893b      	ldrh	r3, [r7, #8]
 80063fa:	b2da      	uxtb	r2, r3
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006402:	69fb      	ldr	r3, [r7, #28]
 8006404:	9300      	str	r3, [sp, #0]
 8006406:	69bb      	ldr	r3, [r7, #24]
 8006408:	2200      	movs	r2, #0
 800640a:	2140      	movs	r1, #64	@ 0x40
 800640c:	68f8      	ldr	r0, [r7, #12]
 800640e:	f000 f831 	bl	8006474 <I2C_WaitOnFlagUntilTimeout>
 8006412:	4603      	mov	r3, r0
 8006414:	2b00      	cmp	r3, #0
 8006416:	d001      	beq.n	800641c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006418:	2301      	movs	r3, #1
 800641a:	e000      	b.n	800641e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800641c:	2300      	movs	r3, #0
}
 800641e:	4618      	mov	r0, r3
 8006420:	3710      	adds	r7, #16
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}
 8006426:	bf00      	nop
 8006428:	80002000 	.word	0x80002000

0800642c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800642c:	b480      	push	{r7}
 800642e:	b083      	sub	sp, #12
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	699b      	ldr	r3, [r3, #24]
 800643a:	f003 0302 	and.w	r3, r3, #2
 800643e:	2b02      	cmp	r3, #2
 8006440:	d103      	bne.n	800644a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	2200      	movs	r2, #0
 8006448:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	699b      	ldr	r3, [r3, #24]
 8006450:	f003 0301 	and.w	r3, r3, #1
 8006454:	2b01      	cmp	r3, #1
 8006456:	d007      	beq.n	8006468 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	699a      	ldr	r2, [r3, #24]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f042 0201 	orr.w	r2, r2, #1
 8006466:	619a      	str	r2, [r3, #24]
  }
}
 8006468:	bf00      	nop
 800646a:	370c      	adds	r7, #12
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr

08006474 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b084      	sub	sp, #16
 8006478:	af00      	add	r7, sp, #0
 800647a:	60f8      	str	r0, [r7, #12]
 800647c:	60b9      	str	r1, [r7, #8]
 800647e:	603b      	str	r3, [r7, #0]
 8006480:	4613      	mov	r3, r2
 8006482:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006484:	e03b      	b.n	80064fe <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006486:	69ba      	ldr	r2, [r7, #24]
 8006488:	6839      	ldr	r1, [r7, #0]
 800648a:	68f8      	ldr	r0, [r7, #12]
 800648c:	f000 f8d6 	bl	800663c <I2C_IsErrorOccurred>
 8006490:	4603      	mov	r3, r0
 8006492:	2b00      	cmp	r3, #0
 8006494:	d001      	beq.n	800649a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	e041      	b.n	800651e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064a0:	d02d      	beq.n	80064fe <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064a2:	f7fe fa3b 	bl	800491c <HAL_GetTick>
 80064a6:	4602      	mov	r2, r0
 80064a8:	69bb      	ldr	r3, [r7, #24]
 80064aa:	1ad3      	subs	r3, r2, r3
 80064ac:	683a      	ldr	r2, [r7, #0]
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d302      	bcc.n	80064b8 <I2C_WaitOnFlagUntilTimeout+0x44>
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d122      	bne.n	80064fe <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	699a      	ldr	r2, [r3, #24]
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	4013      	ands	r3, r2
 80064c2:	68ba      	ldr	r2, [r7, #8]
 80064c4:	429a      	cmp	r2, r3
 80064c6:	bf0c      	ite	eq
 80064c8:	2301      	moveq	r3, #1
 80064ca:	2300      	movne	r3, #0
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	461a      	mov	r2, r3
 80064d0:	79fb      	ldrb	r3, [r7, #7]
 80064d2:	429a      	cmp	r2, r3
 80064d4:	d113      	bne.n	80064fe <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064da:	f043 0220 	orr.w	r2, r3, #32
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	2220      	movs	r2, #32
 80064e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2200      	movs	r2, #0
 80064ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2200      	movs	r2, #0
 80064f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80064fa:	2301      	movs	r3, #1
 80064fc:	e00f      	b.n	800651e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	699a      	ldr	r2, [r3, #24]
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	4013      	ands	r3, r2
 8006508:	68ba      	ldr	r2, [r7, #8]
 800650a:	429a      	cmp	r2, r3
 800650c:	bf0c      	ite	eq
 800650e:	2301      	moveq	r3, #1
 8006510:	2300      	movne	r3, #0
 8006512:	b2db      	uxtb	r3, r3
 8006514:	461a      	mov	r2, r3
 8006516:	79fb      	ldrb	r3, [r7, #7]
 8006518:	429a      	cmp	r2, r3
 800651a:	d0b4      	beq.n	8006486 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800651c:	2300      	movs	r3, #0
}
 800651e:	4618      	mov	r0, r3
 8006520:	3710      	adds	r7, #16
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}

08006526 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006526:	b580      	push	{r7, lr}
 8006528:	b084      	sub	sp, #16
 800652a:	af00      	add	r7, sp, #0
 800652c:	60f8      	str	r0, [r7, #12]
 800652e:	60b9      	str	r1, [r7, #8]
 8006530:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006532:	e033      	b.n	800659c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006534:	687a      	ldr	r2, [r7, #4]
 8006536:	68b9      	ldr	r1, [r7, #8]
 8006538:	68f8      	ldr	r0, [r7, #12]
 800653a:	f000 f87f 	bl	800663c <I2C_IsErrorOccurred>
 800653e:	4603      	mov	r3, r0
 8006540:	2b00      	cmp	r3, #0
 8006542:	d001      	beq.n	8006548 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006544:	2301      	movs	r3, #1
 8006546:	e031      	b.n	80065ac <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800654e:	d025      	beq.n	800659c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006550:	f7fe f9e4 	bl	800491c <HAL_GetTick>
 8006554:	4602      	mov	r2, r0
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	1ad3      	subs	r3, r2, r3
 800655a:	68ba      	ldr	r2, [r7, #8]
 800655c:	429a      	cmp	r2, r3
 800655e:	d302      	bcc.n	8006566 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d11a      	bne.n	800659c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	699b      	ldr	r3, [r3, #24]
 800656c:	f003 0302 	and.w	r3, r3, #2
 8006570:	2b02      	cmp	r3, #2
 8006572:	d013      	beq.n	800659c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006578:	f043 0220 	orr.w	r2, r3, #32
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2220      	movs	r2, #32
 8006584:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2200      	movs	r2, #0
 800658c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2200      	movs	r2, #0
 8006594:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006598:	2301      	movs	r3, #1
 800659a:	e007      	b.n	80065ac <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	699b      	ldr	r3, [r3, #24]
 80065a2:	f003 0302 	and.w	r3, r3, #2
 80065a6:	2b02      	cmp	r3, #2
 80065a8:	d1c4      	bne.n	8006534 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80065aa:	2300      	movs	r3, #0
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	3710      	adds	r7, #16
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}

080065b4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b084      	sub	sp, #16
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	60f8      	str	r0, [r7, #12]
 80065bc:	60b9      	str	r1, [r7, #8]
 80065be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80065c0:	e02f      	b.n	8006622 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80065c2:	687a      	ldr	r2, [r7, #4]
 80065c4:	68b9      	ldr	r1, [r7, #8]
 80065c6:	68f8      	ldr	r0, [r7, #12]
 80065c8:	f000 f838 	bl	800663c <I2C_IsErrorOccurred>
 80065cc:	4603      	mov	r3, r0
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d001      	beq.n	80065d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80065d2:	2301      	movs	r3, #1
 80065d4:	e02d      	b.n	8006632 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065d6:	f7fe f9a1 	bl	800491c <HAL_GetTick>
 80065da:	4602      	mov	r2, r0
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	1ad3      	subs	r3, r2, r3
 80065e0:	68ba      	ldr	r2, [r7, #8]
 80065e2:	429a      	cmp	r2, r3
 80065e4:	d302      	bcc.n	80065ec <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d11a      	bne.n	8006622 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	699b      	ldr	r3, [r3, #24]
 80065f2:	f003 0320 	and.w	r3, r3, #32
 80065f6:	2b20      	cmp	r3, #32
 80065f8:	d013      	beq.n	8006622 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065fe:	f043 0220 	orr.w	r2, r3, #32
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2220      	movs	r2, #32
 800660a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2200      	movs	r2, #0
 8006612:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2200      	movs	r2, #0
 800661a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800661e:	2301      	movs	r3, #1
 8006620:	e007      	b.n	8006632 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	699b      	ldr	r3, [r3, #24]
 8006628:	f003 0320 	and.w	r3, r3, #32
 800662c:	2b20      	cmp	r3, #32
 800662e:	d1c8      	bne.n	80065c2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006630:	2300      	movs	r3, #0
}
 8006632:	4618      	mov	r0, r3
 8006634:	3710      	adds	r7, #16
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}
	...

0800663c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b08a      	sub	sp, #40	@ 0x28
 8006640:	af00      	add	r7, sp, #0
 8006642:	60f8      	str	r0, [r7, #12]
 8006644:	60b9      	str	r1, [r7, #8]
 8006646:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006648:	2300      	movs	r3, #0
 800664a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	699b      	ldr	r3, [r3, #24]
 8006654:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006656:	2300      	movs	r3, #0
 8006658:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800665e:	69bb      	ldr	r3, [r7, #24]
 8006660:	f003 0310 	and.w	r3, r3, #16
 8006664:	2b00      	cmp	r3, #0
 8006666:	d068      	beq.n	800673a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	2210      	movs	r2, #16
 800666e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006670:	e049      	b.n	8006706 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006678:	d045      	beq.n	8006706 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800667a:	f7fe f94f 	bl	800491c <HAL_GetTick>
 800667e:	4602      	mov	r2, r0
 8006680:	69fb      	ldr	r3, [r7, #28]
 8006682:	1ad3      	subs	r3, r2, r3
 8006684:	68ba      	ldr	r2, [r7, #8]
 8006686:	429a      	cmp	r2, r3
 8006688:	d302      	bcc.n	8006690 <I2C_IsErrorOccurred+0x54>
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d13a      	bne.n	8006706 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800669a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80066a2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	699b      	ldr	r3, [r3, #24]
 80066aa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80066ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80066b2:	d121      	bne.n	80066f8 <I2C_IsErrorOccurred+0xbc>
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80066ba:	d01d      	beq.n	80066f8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80066bc:	7cfb      	ldrb	r3, [r7, #19]
 80066be:	2b20      	cmp	r3, #32
 80066c0:	d01a      	beq.n	80066f8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	685a      	ldr	r2, [r3, #4]
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80066d0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80066d2:	f7fe f923 	bl	800491c <HAL_GetTick>
 80066d6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80066d8:	e00e      	b.n	80066f8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80066da:	f7fe f91f 	bl	800491c <HAL_GetTick>
 80066de:	4602      	mov	r2, r0
 80066e0:	69fb      	ldr	r3, [r7, #28]
 80066e2:	1ad3      	subs	r3, r2, r3
 80066e4:	2b19      	cmp	r3, #25
 80066e6:	d907      	bls.n	80066f8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80066e8:	6a3b      	ldr	r3, [r7, #32]
 80066ea:	f043 0320 	orr.w	r3, r3, #32
 80066ee:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80066f0:	2301      	movs	r3, #1
 80066f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80066f6:	e006      	b.n	8006706 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	699b      	ldr	r3, [r3, #24]
 80066fe:	f003 0320 	and.w	r3, r3, #32
 8006702:	2b20      	cmp	r3, #32
 8006704:	d1e9      	bne.n	80066da <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	699b      	ldr	r3, [r3, #24]
 800670c:	f003 0320 	and.w	r3, r3, #32
 8006710:	2b20      	cmp	r3, #32
 8006712:	d003      	beq.n	800671c <I2C_IsErrorOccurred+0xe0>
 8006714:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006718:	2b00      	cmp	r3, #0
 800671a:	d0aa      	beq.n	8006672 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800671c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006720:	2b00      	cmp	r3, #0
 8006722:	d103      	bne.n	800672c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	2220      	movs	r2, #32
 800672a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800672c:	6a3b      	ldr	r3, [r7, #32]
 800672e:	f043 0304 	orr.w	r3, r3, #4
 8006732:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006734:	2301      	movs	r3, #1
 8006736:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	699b      	ldr	r3, [r3, #24]
 8006740:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006742:	69bb      	ldr	r3, [r7, #24]
 8006744:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006748:	2b00      	cmp	r3, #0
 800674a:	d00b      	beq.n	8006764 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800674c:	6a3b      	ldr	r3, [r7, #32]
 800674e:	f043 0301 	orr.w	r3, r3, #1
 8006752:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800675c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800675e:	2301      	movs	r3, #1
 8006760:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006764:	69bb      	ldr	r3, [r7, #24]
 8006766:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800676a:	2b00      	cmp	r3, #0
 800676c:	d00b      	beq.n	8006786 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800676e:	6a3b      	ldr	r3, [r7, #32]
 8006770:	f043 0308 	orr.w	r3, r3, #8
 8006774:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800677e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006780:	2301      	movs	r3, #1
 8006782:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006786:	69bb      	ldr	r3, [r7, #24]
 8006788:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800678c:	2b00      	cmp	r3, #0
 800678e:	d00b      	beq.n	80067a8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006790:	6a3b      	ldr	r3, [r7, #32]
 8006792:	f043 0302 	orr.w	r3, r3, #2
 8006796:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80067a0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80067a2:	2301      	movs	r3, #1
 80067a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80067a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d01c      	beq.n	80067ea <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80067b0:	68f8      	ldr	r0, [r7, #12]
 80067b2:	f7ff fe3b 	bl	800642c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	6859      	ldr	r1, [r3, #4]
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681a      	ldr	r2, [r3, #0]
 80067c0:	4b0d      	ldr	r3, [pc, #52]	@ (80067f8 <I2C_IsErrorOccurred+0x1bc>)
 80067c2:	400b      	ands	r3, r1
 80067c4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80067ca:	6a3b      	ldr	r3, [r7, #32]
 80067cc:	431a      	orrs	r2, r3
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2220      	movs	r2, #32
 80067d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2200      	movs	r2, #0
 80067de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2200      	movs	r2, #0
 80067e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80067ea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	3728      	adds	r7, #40	@ 0x28
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}
 80067f6:	bf00      	nop
 80067f8:	fe00e800 	.word	0xfe00e800

080067fc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b087      	sub	sp, #28
 8006800:	af00      	add	r7, sp, #0
 8006802:	60f8      	str	r0, [r7, #12]
 8006804:	607b      	str	r3, [r7, #4]
 8006806:	460b      	mov	r3, r1
 8006808:	817b      	strh	r3, [r7, #10]
 800680a:	4613      	mov	r3, r2
 800680c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800680e:	897b      	ldrh	r3, [r7, #10]
 8006810:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006814:	7a7b      	ldrb	r3, [r7, #9]
 8006816:	041b      	lsls	r3, r3, #16
 8006818:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800681c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006822:	6a3b      	ldr	r3, [r7, #32]
 8006824:	4313      	orrs	r3, r2
 8006826:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800682a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	685a      	ldr	r2, [r3, #4]
 8006832:	6a3b      	ldr	r3, [r7, #32]
 8006834:	0d5b      	lsrs	r3, r3, #21
 8006836:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800683a:	4b08      	ldr	r3, [pc, #32]	@ (800685c <I2C_TransferConfig+0x60>)
 800683c:	430b      	orrs	r3, r1
 800683e:	43db      	mvns	r3, r3
 8006840:	ea02 0103 	and.w	r1, r2, r3
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	697a      	ldr	r2, [r7, #20]
 800684a:	430a      	orrs	r2, r1
 800684c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800684e:	bf00      	nop
 8006850:	371c      	adds	r7, #28
 8006852:	46bd      	mov	sp, r7
 8006854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006858:	4770      	bx	lr
 800685a:	bf00      	nop
 800685c:	03ff63ff 	.word	0x03ff63ff

08006860 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b082      	sub	sp, #8
 8006864:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006866:	2300      	movs	r3, #0
 8006868:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800686a:	4b23      	ldr	r3, [pc, #140]	@ (80068f8 <HAL_PWREx_EnableOverDrive+0x98>)
 800686c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800686e:	4a22      	ldr	r2, [pc, #136]	@ (80068f8 <HAL_PWREx_EnableOverDrive+0x98>)
 8006870:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006874:	6413      	str	r3, [r2, #64]	@ 0x40
 8006876:	4b20      	ldr	r3, [pc, #128]	@ (80068f8 <HAL_PWREx_EnableOverDrive+0x98>)
 8006878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800687a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800687e:	603b      	str	r3, [r7, #0]
 8006880:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006882:	4b1e      	ldr	r3, [pc, #120]	@ (80068fc <HAL_PWREx_EnableOverDrive+0x9c>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a1d      	ldr	r2, [pc, #116]	@ (80068fc <HAL_PWREx_EnableOverDrive+0x9c>)
 8006888:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800688c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800688e:	f7fe f845 	bl	800491c <HAL_GetTick>
 8006892:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006894:	e009      	b.n	80068aa <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006896:	f7fe f841 	bl	800491c <HAL_GetTick>
 800689a:	4602      	mov	r2, r0
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	1ad3      	subs	r3, r2, r3
 80068a0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80068a4:	d901      	bls.n	80068aa <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80068a6:	2303      	movs	r3, #3
 80068a8:	e022      	b.n	80068f0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80068aa:	4b14      	ldr	r3, [pc, #80]	@ (80068fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80068b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068b6:	d1ee      	bne.n	8006896 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80068b8:	4b10      	ldr	r3, [pc, #64]	@ (80068fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a0f      	ldr	r2, [pc, #60]	@ (80068fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80068be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80068c2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80068c4:	f7fe f82a 	bl	800491c <HAL_GetTick>
 80068c8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80068ca:	e009      	b.n	80068e0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80068cc:	f7fe f826 	bl	800491c <HAL_GetTick>
 80068d0:	4602      	mov	r2, r0
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	1ad3      	subs	r3, r2, r3
 80068d6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80068da:	d901      	bls.n	80068e0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80068dc:	2303      	movs	r3, #3
 80068de:	e007      	b.n	80068f0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80068e0:	4b06      	ldr	r3, [pc, #24]	@ (80068fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80068ec:	d1ee      	bne.n	80068cc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80068ee:	2300      	movs	r3, #0
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	3708      	adds	r7, #8
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}
 80068f8:	40023800 	.word	0x40023800
 80068fc:	40007000 	.word	0x40007000

08006900 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b086      	sub	sp, #24
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006908:	2300      	movs	r3, #0
 800690a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d101      	bne.n	8006916 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006912:	2301      	movs	r3, #1
 8006914:	e291      	b.n	8006e3a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f003 0301 	and.w	r3, r3, #1
 800691e:	2b00      	cmp	r3, #0
 8006920:	f000 8087 	beq.w	8006a32 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006924:	4b96      	ldr	r3, [pc, #600]	@ (8006b80 <HAL_RCC_OscConfig+0x280>)
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	f003 030c 	and.w	r3, r3, #12
 800692c:	2b04      	cmp	r3, #4
 800692e:	d00c      	beq.n	800694a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006930:	4b93      	ldr	r3, [pc, #588]	@ (8006b80 <HAL_RCC_OscConfig+0x280>)
 8006932:	689b      	ldr	r3, [r3, #8]
 8006934:	f003 030c 	and.w	r3, r3, #12
 8006938:	2b08      	cmp	r3, #8
 800693a:	d112      	bne.n	8006962 <HAL_RCC_OscConfig+0x62>
 800693c:	4b90      	ldr	r3, [pc, #576]	@ (8006b80 <HAL_RCC_OscConfig+0x280>)
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006944:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006948:	d10b      	bne.n	8006962 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800694a:	4b8d      	ldr	r3, [pc, #564]	@ (8006b80 <HAL_RCC_OscConfig+0x280>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006952:	2b00      	cmp	r3, #0
 8006954:	d06c      	beq.n	8006a30 <HAL_RCC_OscConfig+0x130>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d168      	bne.n	8006a30 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800695e:	2301      	movs	r3, #1
 8006960:	e26b      	b.n	8006e3a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800696a:	d106      	bne.n	800697a <HAL_RCC_OscConfig+0x7a>
 800696c:	4b84      	ldr	r3, [pc, #528]	@ (8006b80 <HAL_RCC_OscConfig+0x280>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a83      	ldr	r2, [pc, #524]	@ (8006b80 <HAL_RCC_OscConfig+0x280>)
 8006972:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006976:	6013      	str	r3, [r2, #0]
 8006978:	e02e      	b.n	80069d8 <HAL_RCC_OscConfig+0xd8>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d10c      	bne.n	800699c <HAL_RCC_OscConfig+0x9c>
 8006982:	4b7f      	ldr	r3, [pc, #508]	@ (8006b80 <HAL_RCC_OscConfig+0x280>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a7e      	ldr	r2, [pc, #504]	@ (8006b80 <HAL_RCC_OscConfig+0x280>)
 8006988:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800698c:	6013      	str	r3, [r2, #0]
 800698e:	4b7c      	ldr	r3, [pc, #496]	@ (8006b80 <HAL_RCC_OscConfig+0x280>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a7b      	ldr	r2, [pc, #492]	@ (8006b80 <HAL_RCC_OscConfig+0x280>)
 8006994:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006998:	6013      	str	r3, [r2, #0]
 800699a:	e01d      	b.n	80069d8 <HAL_RCC_OscConfig+0xd8>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80069a4:	d10c      	bne.n	80069c0 <HAL_RCC_OscConfig+0xc0>
 80069a6:	4b76      	ldr	r3, [pc, #472]	@ (8006b80 <HAL_RCC_OscConfig+0x280>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a75      	ldr	r2, [pc, #468]	@ (8006b80 <HAL_RCC_OscConfig+0x280>)
 80069ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80069b0:	6013      	str	r3, [r2, #0]
 80069b2:	4b73      	ldr	r3, [pc, #460]	@ (8006b80 <HAL_RCC_OscConfig+0x280>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a72      	ldr	r2, [pc, #456]	@ (8006b80 <HAL_RCC_OscConfig+0x280>)
 80069b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80069bc:	6013      	str	r3, [r2, #0]
 80069be:	e00b      	b.n	80069d8 <HAL_RCC_OscConfig+0xd8>
 80069c0:	4b6f      	ldr	r3, [pc, #444]	@ (8006b80 <HAL_RCC_OscConfig+0x280>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a6e      	ldr	r2, [pc, #440]	@ (8006b80 <HAL_RCC_OscConfig+0x280>)
 80069c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80069ca:	6013      	str	r3, [r2, #0]
 80069cc:	4b6c      	ldr	r3, [pc, #432]	@ (8006b80 <HAL_RCC_OscConfig+0x280>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a6b      	ldr	r2, [pc, #428]	@ (8006b80 <HAL_RCC_OscConfig+0x280>)
 80069d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80069d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d013      	beq.n	8006a08 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069e0:	f7fd ff9c 	bl	800491c <HAL_GetTick>
 80069e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069e6:	e008      	b.n	80069fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80069e8:	f7fd ff98 	bl	800491c <HAL_GetTick>
 80069ec:	4602      	mov	r2, r0
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	1ad3      	subs	r3, r2, r3
 80069f2:	2b64      	cmp	r3, #100	@ 0x64
 80069f4:	d901      	bls.n	80069fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80069f6:	2303      	movs	r3, #3
 80069f8:	e21f      	b.n	8006e3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069fa:	4b61      	ldr	r3, [pc, #388]	@ (8006b80 <HAL_RCC_OscConfig+0x280>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d0f0      	beq.n	80069e8 <HAL_RCC_OscConfig+0xe8>
 8006a06:	e014      	b.n	8006a32 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a08:	f7fd ff88 	bl	800491c <HAL_GetTick>
 8006a0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a0e:	e008      	b.n	8006a22 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a10:	f7fd ff84 	bl	800491c <HAL_GetTick>
 8006a14:	4602      	mov	r2, r0
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	1ad3      	subs	r3, r2, r3
 8006a1a:	2b64      	cmp	r3, #100	@ 0x64
 8006a1c:	d901      	bls.n	8006a22 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006a1e:	2303      	movs	r3, #3
 8006a20:	e20b      	b.n	8006e3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a22:	4b57      	ldr	r3, [pc, #348]	@ (8006b80 <HAL_RCC_OscConfig+0x280>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d1f0      	bne.n	8006a10 <HAL_RCC_OscConfig+0x110>
 8006a2e:	e000      	b.n	8006a32 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f003 0302 	and.w	r3, r3, #2
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d069      	beq.n	8006b12 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006a3e:	4b50      	ldr	r3, [pc, #320]	@ (8006b80 <HAL_RCC_OscConfig+0x280>)
 8006a40:	689b      	ldr	r3, [r3, #8]
 8006a42:	f003 030c 	and.w	r3, r3, #12
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d00b      	beq.n	8006a62 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006a4a:	4b4d      	ldr	r3, [pc, #308]	@ (8006b80 <HAL_RCC_OscConfig+0x280>)
 8006a4c:	689b      	ldr	r3, [r3, #8]
 8006a4e:	f003 030c 	and.w	r3, r3, #12
 8006a52:	2b08      	cmp	r3, #8
 8006a54:	d11c      	bne.n	8006a90 <HAL_RCC_OscConfig+0x190>
 8006a56:	4b4a      	ldr	r3, [pc, #296]	@ (8006b80 <HAL_RCC_OscConfig+0x280>)
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d116      	bne.n	8006a90 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a62:	4b47      	ldr	r3, [pc, #284]	@ (8006b80 <HAL_RCC_OscConfig+0x280>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f003 0302 	and.w	r3, r3, #2
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d005      	beq.n	8006a7a <HAL_RCC_OscConfig+0x17a>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	68db      	ldr	r3, [r3, #12]
 8006a72:	2b01      	cmp	r3, #1
 8006a74:	d001      	beq.n	8006a7a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006a76:	2301      	movs	r3, #1
 8006a78:	e1df      	b.n	8006e3a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a7a:	4b41      	ldr	r3, [pc, #260]	@ (8006b80 <HAL_RCC_OscConfig+0x280>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	691b      	ldr	r3, [r3, #16]
 8006a86:	00db      	lsls	r3, r3, #3
 8006a88:	493d      	ldr	r1, [pc, #244]	@ (8006b80 <HAL_RCC_OscConfig+0x280>)
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a8e:	e040      	b.n	8006b12 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	68db      	ldr	r3, [r3, #12]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d023      	beq.n	8006ae0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006a98:	4b39      	ldr	r3, [pc, #228]	@ (8006b80 <HAL_RCC_OscConfig+0x280>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a38      	ldr	r2, [pc, #224]	@ (8006b80 <HAL_RCC_OscConfig+0x280>)
 8006a9e:	f043 0301 	orr.w	r3, r3, #1
 8006aa2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006aa4:	f7fd ff3a 	bl	800491c <HAL_GetTick>
 8006aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006aaa:	e008      	b.n	8006abe <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006aac:	f7fd ff36 	bl	800491c <HAL_GetTick>
 8006ab0:	4602      	mov	r2, r0
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	1ad3      	subs	r3, r2, r3
 8006ab6:	2b02      	cmp	r3, #2
 8006ab8:	d901      	bls.n	8006abe <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006aba:	2303      	movs	r3, #3
 8006abc:	e1bd      	b.n	8006e3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006abe:	4b30      	ldr	r3, [pc, #192]	@ (8006b80 <HAL_RCC_OscConfig+0x280>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f003 0302 	and.w	r3, r3, #2
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d0f0      	beq.n	8006aac <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006aca:	4b2d      	ldr	r3, [pc, #180]	@ (8006b80 <HAL_RCC_OscConfig+0x280>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	691b      	ldr	r3, [r3, #16]
 8006ad6:	00db      	lsls	r3, r3, #3
 8006ad8:	4929      	ldr	r1, [pc, #164]	@ (8006b80 <HAL_RCC_OscConfig+0x280>)
 8006ada:	4313      	orrs	r3, r2
 8006adc:	600b      	str	r3, [r1, #0]
 8006ade:	e018      	b.n	8006b12 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006ae0:	4b27      	ldr	r3, [pc, #156]	@ (8006b80 <HAL_RCC_OscConfig+0x280>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a26      	ldr	r2, [pc, #152]	@ (8006b80 <HAL_RCC_OscConfig+0x280>)
 8006ae6:	f023 0301 	bic.w	r3, r3, #1
 8006aea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006aec:	f7fd ff16 	bl	800491c <HAL_GetTick>
 8006af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006af2:	e008      	b.n	8006b06 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006af4:	f7fd ff12 	bl	800491c <HAL_GetTick>
 8006af8:	4602      	mov	r2, r0
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	1ad3      	subs	r3, r2, r3
 8006afe:	2b02      	cmp	r3, #2
 8006b00:	d901      	bls.n	8006b06 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006b02:	2303      	movs	r3, #3
 8006b04:	e199      	b.n	8006e3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b06:	4b1e      	ldr	r3, [pc, #120]	@ (8006b80 <HAL_RCC_OscConfig+0x280>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f003 0302 	and.w	r3, r3, #2
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d1f0      	bne.n	8006af4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f003 0308 	and.w	r3, r3, #8
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d038      	beq.n	8006b90 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	695b      	ldr	r3, [r3, #20]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d019      	beq.n	8006b5a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b26:	4b16      	ldr	r3, [pc, #88]	@ (8006b80 <HAL_RCC_OscConfig+0x280>)
 8006b28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b2a:	4a15      	ldr	r2, [pc, #84]	@ (8006b80 <HAL_RCC_OscConfig+0x280>)
 8006b2c:	f043 0301 	orr.w	r3, r3, #1
 8006b30:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b32:	f7fd fef3 	bl	800491c <HAL_GetTick>
 8006b36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b38:	e008      	b.n	8006b4c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b3a:	f7fd feef 	bl	800491c <HAL_GetTick>
 8006b3e:	4602      	mov	r2, r0
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	1ad3      	subs	r3, r2, r3
 8006b44:	2b02      	cmp	r3, #2
 8006b46:	d901      	bls.n	8006b4c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006b48:	2303      	movs	r3, #3
 8006b4a:	e176      	b.n	8006e3a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b4c:	4b0c      	ldr	r3, [pc, #48]	@ (8006b80 <HAL_RCC_OscConfig+0x280>)
 8006b4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b50:	f003 0302 	and.w	r3, r3, #2
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d0f0      	beq.n	8006b3a <HAL_RCC_OscConfig+0x23a>
 8006b58:	e01a      	b.n	8006b90 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006b5a:	4b09      	ldr	r3, [pc, #36]	@ (8006b80 <HAL_RCC_OscConfig+0x280>)
 8006b5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b5e:	4a08      	ldr	r2, [pc, #32]	@ (8006b80 <HAL_RCC_OscConfig+0x280>)
 8006b60:	f023 0301 	bic.w	r3, r3, #1
 8006b64:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b66:	f7fd fed9 	bl	800491c <HAL_GetTick>
 8006b6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b6c:	e00a      	b.n	8006b84 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b6e:	f7fd fed5 	bl	800491c <HAL_GetTick>
 8006b72:	4602      	mov	r2, r0
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	1ad3      	subs	r3, r2, r3
 8006b78:	2b02      	cmp	r3, #2
 8006b7a:	d903      	bls.n	8006b84 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006b7c:	2303      	movs	r3, #3
 8006b7e:	e15c      	b.n	8006e3a <HAL_RCC_OscConfig+0x53a>
 8006b80:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b84:	4b91      	ldr	r3, [pc, #580]	@ (8006dcc <HAL_RCC_OscConfig+0x4cc>)
 8006b86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b88:	f003 0302 	and.w	r3, r3, #2
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d1ee      	bne.n	8006b6e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f003 0304 	and.w	r3, r3, #4
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	f000 80a4 	beq.w	8006ce6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b9e:	4b8b      	ldr	r3, [pc, #556]	@ (8006dcc <HAL_RCC_OscConfig+0x4cc>)
 8006ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ba2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d10d      	bne.n	8006bc6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006baa:	4b88      	ldr	r3, [pc, #544]	@ (8006dcc <HAL_RCC_OscConfig+0x4cc>)
 8006bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bae:	4a87      	ldr	r2, [pc, #540]	@ (8006dcc <HAL_RCC_OscConfig+0x4cc>)
 8006bb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006bb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8006bb6:	4b85      	ldr	r3, [pc, #532]	@ (8006dcc <HAL_RCC_OscConfig+0x4cc>)
 8006bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006bbe:	60bb      	str	r3, [r7, #8]
 8006bc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006bc6:	4b82      	ldr	r3, [pc, #520]	@ (8006dd0 <HAL_RCC_OscConfig+0x4d0>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d118      	bne.n	8006c04 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006bd2:	4b7f      	ldr	r3, [pc, #508]	@ (8006dd0 <HAL_RCC_OscConfig+0x4d0>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a7e      	ldr	r2, [pc, #504]	@ (8006dd0 <HAL_RCC_OscConfig+0x4d0>)
 8006bd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006bdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006bde:	f7fd fe9d 	bl	800491c <HAL_GetTick>
 8006be2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006be4:	e008      	b.n	8006bf8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006be6:	f7fd fe99 	bl	800491c <HAL_GetTick>
 8006bea:	4602      	mov	r2, r0
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	1ad3      	subs	r3, r2, r3
 8006bf0:	2b64      	cmp	r3, #100	@ 0x64
 8006bf2:	d901      	bls.n	8006bf8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006bf4:	2303      	movs	r3, #3
 8006bf6:	e120      	b.n	8006e3a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006bf8:	4b75      	ldr	r3, [pc, #468]	@ (8006dd0 <HAL_RCC_OscConfig+0x4d0>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d0f0      	beq.n	8006be6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	689b      	ldr	r3, [r3, #8]
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d106      	bne.n	8006c1a <HAL_RCC_OscConfig+0x31a>
 8006c0c:	4b6f      	ldr	r3, [pc, #444]	@ (8006dcc <HAL_RCC_OscConfig+0x4cc>)
 8006c0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c10:	4a6e      	ldr	r2, [pc, #440]	@ (8006dcc <HAL_RCC_OscConfig+0x4cc>)
 8006c12:	f043 0301 	orr.w	r3, r3, #1
 8006c16:	6713      	str	r3, [r2, #112]	@ 0x70
 8006c18:	e02d      	b.n	8006c76 <HAL_RCC_OscConfig+0x376>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	689b      	ldr	r3, [r3, #8]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d10c      	bne.n	8006c3c <HAL_RCC_OscConfig+0x33c>
 8006c22:	4b6a      	ldr	r3, [pc, #424]	@ (8006dcc <HAL_RCC_OscConfig+0x4cc>)
 8006c24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c26:	4a69      	ldr	r2, [pc, #420]	@ (8006dcc <HAL_RCC_OscConfig+0x4cc>)
 8006c28:	f023 0301 	bic.w	r3, r3, #1
 8006c2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8006c2e:	4b67      	ldr	r3, [pc, #412]	@ (8006dcc <HAL_RCC_OscConfig+0x4cc>)
 8006c30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c32:	4a66      	ldr	r2, [pc, #408]	@ (8006dcc <HAL_RCC_OscConfig+0x4cc>)
 8006c34:	f023 0304 	bic.w	r3, r3, #4
 8006c38:	6713      	str	r3, [r2, #112]	@ 0x70
 8006c3a:	e01c      	b.n	8006c76 <HAL_RCC_OscConfig+0x376>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	2b05      	cmp	r3, #5
 8006c42:	d10c      	bne.n	8006c5e <HAL_RCC_OscConfig+0x35e>
 8006c44:	4b61      	ldr	r3, [pc, #388]	@ (8006dcc <HAL_RCC_OscConfig+0x4cc>)
 8006c46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c48:	4a60      	ldr	r2, [pc, #384]	@ (8006dcc <HAL_RCC_OscConfig+0x4cc>)
 8006c4a:	f043 0304 	orr.w	r3, r3, #4
 8006c4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006c50:	4b5e      	ldr	r3, [pc, #376]	@ (8006dcc <HAL_RCC_OscConfig+0x4cc>)
 8006c52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c54:	4a5d      	ldr	r2, [pc, #372]	@ (8006dcc <HAL_RCC_OscConfig+0x4cc>)
 8006c56:	f043 0301 	orr.w	r3, r3, #1
 8006c5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8006c5c:	e00b      	b.n	8006c76 <HAL_RCC_OscConfig+0x376>
 8006c5e:	4b5b      	ldr	r3, [pc, #364]	@ (8006dcc <HAL_RCC_OscConfig+0x4cc>)
 8006c60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c62:	4a5a      	ldr	r2, [pc, #360]	@ (8006dcc <HAL_RCC_OscConfig+0x4cc>)
 8006c64:	f023 0301 	bic.w	r3, r3, #1
 8006c68:	6713      	str	r3, [r2, #112]	@ 0x70
 8006c6a:	4b58      	ldr	r3, [pc, #352]	@ (8006dcc <HAL_RCC_OscConfig+0x4cc>)
 8006c6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c6e:	4a57      	ldr	r2, [pc, #348]	@ (8006dcc <HAL_RCC_OscConfig+0x4cc>)
 8006c70:	f023 0304 	bic.w	r3, r3, #4
 8006c74:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d015      	beq.n	8006caa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c7e:	f7fd fe4d 	bl	800491c <HAL_GetTick>
 8006c82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c84:	e00a      	b.n	8006c9c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c86:	f7fd fe49 	bl	800491c <HAL_GetTick>
 8006c8a:	4602      	mov	r2, r0
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	1ad3      	subs	r3, r2, r3
 8006c90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d901      	bls.n	8006c9c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006c98:	2303      	movs	r3, #3
 8006c9a:	e0ce      	b.n	8006e3a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c9c:	4b4b      	ldr	r3, [pc, #300]	@ (8006dcc <HAL_RCC_OscConfig+0x4cc>)
 8006c9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ca0:	f003 0302 	and.w	r3, r3, #2
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d0ee      	beq.n	8006c86 <HAL_RCC_OscConfig+0x386>
 8006ca8:	e014      	b.n	8006cd4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006caa:	f7fd fe37 	bl	800491c <HAL_GetTick>
 8006cae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006cb0:	e00a      	b.n	8006cc8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cb2:	f7fd fe33 	bl	800491c <HAL_GetTick>
 8006cb6:	4602      	mov	r2, r0
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	1ad3      	subs	r3, r2, r3
 8006cbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d901      	bls.n	8006cc8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006cc4:	2303      	movs	r3, #3
 8006cc6:	e0b8      	b.n	8006e3a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006cc8:	4b40      	ldr	r3, [pc, #256]	@ (8006dcc <HAL_RCC_OscConfig+0x4cc>)
 8006cca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ccc:	f003 0302 	and.w	r3, r3, #2
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d1ee      	bne.n	8006cb2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006cd4:	7dfb      	ldrb	r3, [r7, #23]
 8006cd6:	2b01      	cmp	r3, #1
 8006cd8:	d105      	bne.n	8006ce6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006cda:	4b3c      	ldr	r3, [pc, #240]	@ (8006dcc <HAL_RCC_OscConfig+0x4cc>)
 8006cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cde:	4a3b      	ldr	r2, [pc, #236]	@ (8006dcc <HAL_RCC_OscConfig+0x4cc>)
 8006ce0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006ce4:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	699b      	ldr	r3, [r3, #24]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	f000 80a4 	beq.w	8006e38 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006cf0:	4b36      	ldr	r3, [pc, #216]	@ (8006dcc <HAL_RCC_OscConfig+0x4cc>)
 8006cf2:	689b      	ldr	r3, [r3, #8]
 8006cf4:	f003 030c 	and.w	r3, r3, #12
 8006cf8:	2b08      	cmp	r3, #8
 8006cfa:	d06b      	beq.n	8006dd4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	699b      	ldr	r3, [r3, #24]
 8006d00:	2b02      	cmp	r3, #2
 8006d02:	d149      	bne.n	8006d98 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d04:	4b31      	ldr	r3, [pc, #196]	@ (8006dcc <HAL_RCC_OscConfig+0x4cc>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a30      	ldr	r2, [pc, #192]	@ (8006dcc <HAL_RCC_OscConfig+0x4cc>)
 8006d0a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006d0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d10:	f7fd fe04 	bl	800491c <HAL_GetTick>
 8006d14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d16:	e008      	b.n	8006d2a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d18:	f7fd fe00 	bl	800491c <HAL_GetTick>
 8006d1c:	4602      	mov	r2, r0
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	1ad3      	subs	r3, r2, r3
 8006d22:	2b02      	cmp	r3, #2
 8006d24:	d901      	bls.n	8006d2a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006d26:	2303      	movs	r3, #3
 8006d28:	e087      	b.n	8006e3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d2a:	4b28      	ldr	r3, [pc, #160]	@ (8006dcc <HAL_RCC_OscConfig+0x4cc>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d1f0      	bne.n	8006d18 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	69da      	ldr	r2, [r3, #28]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6a1b      	ldr	r3, [r3, #32]
 8006d3e:	431a      	orrs	r2, r3
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d44:	019b      	lsls	r3, r3, #6
 8006d46:	431a      	orrs	r2, r3
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d4c:	085b      	lsrs	r3, r3, #1
 8006d4e:	3b01      	subs	r3, #1
 8006d50:	041b      	lsls	r3, r3, #16
 8006d52:	431a      	orrs	r2, r3
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d58:	061b      	lsls	r3, r3, #24
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	4a1b      	ldr	r2, [pc, #108]	@ (8006dcc <HAL_RCC_OscConfig+0x4cc>)
 8006d5e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006d62:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006d64:	4b19      	ldr	r3, [pc, #100]	@ (8006dcc <HAL_RCC_OscConfig+0x4cc>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a18      	ldr	r2, [pc, #96]	@ (8006dcc <HAL_RCC_OscConfig+0x4cc>)
 8006d6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006d6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d70:	f7fd fdd4 	bl	800491c <HAL_GetTick>
 8006d74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d76:	e008      	b.n	8006d8a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d78:	f7fd fdd0 	bl	800491c <HAL_GetTick>
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	1ad3      	subs	r3, r2, r3
 8006d82:	2b02      	cmp	r3, #2
 8006d84:	d901      	bls.n	8006d8a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8006d86:	2303      	movs	r3, #3
 8006d88:	e057      	b.n	8006e3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d8a:	4b10      	ldr	r3, [pc, #64]	@ (8006dcc <HAL_RCC_OscConfig+0x4cc>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d0f0      	beq.n	8006d78 <HAL_RCC_OscConfig+0x478>
 8006d96:	e04f      	b.n	8006e38 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d98:	4b0c      	ldr	r3, [pc, #48]	@ (8006dcc <HAL_RCC_OscConfig+0x4cc>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a0b      	ldr	r2, [pc, #44]	@ (8006dcc <HAL_RCC_OscConfig+0x4cc>)
 8006d9e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006da2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006da4:	f7fd fdba 	bl	800491c <HAL_GetTick>
 8006da8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006daa:	e008      	b.n	8006dbe <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006dac:	f7fd fdb6 	bl	800491c <HAL_GetTick>
 8006db0:	4602      	mov	r2, r0
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	1ad3      	subs	r3, r2, r3
 8006db6:	2b02      	cmp	r3, #2
 8006db8:	d901      	bls.n	8006dbe <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8006dba:	2303      	movs	r3, #3
 8006dbc:	e03d      	b.n	8006e3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006dbe:	4b03      	ldr	r3, [pc, #12]	@ (8006dcc <HAL_RCC_OscConfig+0x4cc>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d1f0      	bne.n	8006dac <HAL_RCC_OscConfig+0x4ac>
 8006dca:	e035      	b.n	8006e38 <HAL_RCC_OscConfig+0x538>
 8006dcc:	40023800 	.word	0x40023800
 8006dd0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006dd4:	4b1b      	ldr	r3, [pc, #108]	@ (8006e44 <HAL_RCC_OscConfig+0x544>)
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	699b      	ldr	r3, [r3, #24]
 8006dde:	2b01      	cmp	r3, #1
 8006de0:	d028      	beq.n	8006e34 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006dec:	429a      	cmp	r2, r3
 8006dee:	d121      	bne.n	8006e34 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006dfa:	429a      	cmp	r2, r3
 8006dfc:	d11a      	bne.n	8006e34 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006dfe:	68fa      	ldr	r2, [r7, #12]
 8006e00:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006e04:	4013      	ands	r3, r2
 8006e06:	687a      	ldr	r2, [r7, #4]
 8006e08:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006e0a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d111      	bne.n	8006e34 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e1a:	085b      	lsrs	r3, r3, #1
 8006e1c:	3b01      	subs	r3, #1
 8006e1e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006e20:	429a      	cmp	r2, r3
 8006e22:	d107      	bne.n	8006e34 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e2e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006e30:	429a      	cmp	r2, r3
 8006e32:	d001      	beq.n	8006e38 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006e34:	2301      	movs	r3, #1
 8006e36:	e000      	b.n	8006e3a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006e38:	2300      	movs	r3, #0
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3718      	adds	r7, #24
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}
 8006e42:	bf00      	nop
 8006e44:	40023800 	.word	0x40023800

08006e48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b084      	sub	sp, #16
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
 8006e50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006e52:	2300      	movs	r3, #0
 8006e54:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d101      	bne.n	8006e60 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	e0d0      	b.n	8007002 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006e60:	4b6a      	ldr	r3, [pc, #424]	@ (800700c <HAL_RCC_ClockConfig+0x1c4>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f003 030f 	and.w	r3, r3, #15
 8006e68:	683a      	ldr	r2, [r7, #0]
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	d910      	bls.n	8006e90 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e6e:	4b67      	ldr	r3, [pc, #412]	@ (800700c <HAL_RCC_ClockConfig+0x1c4>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f023 020f 	bic.w	r2, r3, #15
 8006e76:	4965      	ldr	r1, [pc, #404]	@ (800700c <HAL_RCC_ClockConfig+0x1c4>)
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e7e:	4b63      	ldr	r3, [pc, #396]	@ (800700c <HAL_RCC_ClockConfig+0x1c4>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f003 030f 	and.w	r3, r3, #15
 8006e86:	683a      	ldr	r2, [r7, #0]
 8006e88:	429a      	cmp	r2, r3
 8006e8a:	d001      	beq.n	8006e90 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	e0b8      	b.n	8007002 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f003 0302 	and.w	r3, r3, #2
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d020      	beq.n	8006ede <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f003 0304 	and.w	r3, r3, #4
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d005      	beq.n	8006eb4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006ea8:	4b59      	ldr	r3, [pc, #356]	@ (8007010 <HAL_RCC_ClockConfig+0x1c8>)
 8006eaa:	689b      	ldr	r3, [r3, #8]
 8006eac:	4a58      	ldr	r2, [pc, #352]	@ (8007010 <HAL_RCC_ClockConfig+0x1c8>)
 8006eae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006eb2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f003 0308 	and.w	r3, r3, #8
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d005      	beq.n	8006ecc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006ec0:	4b53      	ldr	r3, [pc, #332]	@ (8007010 <HAL_RCC_ClockConfig+0x1c8>)
 8006ec2:	689b      	ldr	r3, [r3, #8]
 8006ec4:	4a52      	ldr	r2, [pc, #328]	@ (8007010 <HAL_RCC_ClockConfig+0x1c8>)
 8006ec6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006eca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ecc:	4b50      	ldr	r3, [pc, #320]	@ (8007010 <HAL_RCC_ClockConfig+0x1c8>)
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	494d      	ldr	r1, [pc, #308]	@ (8007010 <HAL_RCC_ClockConfig+0x1c8>)
 8006eda:	4313      	orrs	r3, r2
 8006edc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f003 0301 	and.w	r3, r3, #1
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d040      	beq.n	8006f6c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	2b01      	cmp	r3, #1
 8006ef0:	d107      	bne.n	8006f02 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ef2:	4b47      	ldr	r3, [pc, #284]	@ (8007010 <HAL_RCC_ClockConfig+0x1c8>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d115      	bne.n	8006f2a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006efe:	2301      	movs	r3, #1
 8006f00:	e07f      	b.n	8007002 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	685b      	ldr	r3, [r3, #4]
 8006f06:	2b02      	cmp	r3, #2
 8006f08:	d107      	bne.n	8006f1a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f0a:	4b41      	ldr	r3, [pc, #260]	@ (8007010 <HAL_RCC_ClockConfig+0x1c8>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d109      	bne.n	8006f2a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006f16:	2301      	movs	r3, #1
 8006f18:	e073      	b.n	8007002 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f1a:	4b3d      	ldr	r3, [pc, #244]	@ (8007010 <HAL_RCC_ClockConfig+0x1c8>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f003 0302 	and.w	r3, r3, #2
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d101      	bne.n	8006f2a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006f26:	2301      	movs	r3, #1
 8006f28:	e06b      	b.n	8007002 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006f2a:	4b39      	ldr	r3, [pc, #228]	@ (8007010 <HAL_RCC_ClockConfig+0x1c8>)
 8006f2c:	689b      	ldr	r3, [r3, #8]
 8006f2e:	f023 0203 	bic.w	r2, r3, #3
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	4936      	ldr	r1, [pc, #216]	@ (8007010 <HAL_RCC_ClockConfig+0x1c8>)
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f3c:	f7fd fcee 	bl	800491c <HAL_GetTick>
 8006f40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f42:	e00a      	b.n	8006f5a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f44:	f7fd fcea 	bl	800491c <HAL_GetTick>
 8006f48:	4602      	mov	r2, r0
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	1ad3      	subs	r3, r2, r3
 8006f4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d901      	bls.n	8006f5a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006f56:	2303      	movs	r3, #3
 8006f58:	e053      	b.n	8007002 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f5a:	4b2d      	ldr	r3, [pc, #180]	@ (8007010 <HAL_RCC_ClockConfig+0x1c8>)
 8006f5c:	689b      	ldr	r3, [r3, #8]
 8006f5e:	f003 020c 	and.w	r2, r3, #12
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	009b      	lsls	r3, r3, #2
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	d1eb      	bne.n	8006f44 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006f6c:	4b27      	ldr	r3, [pc, #156]	@ (800700c <HAL_RCC_ClockConfig+0x1c4>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f003 030f 	and.w	r3, r3, #15
 8006f74:	683a      	ldr	r2, [r7, #0]
 8006f76:	429a      	cmp	r2, r3
 8006f78:	d210      	bcs.n	8006f9c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f7a:	4b24      	ldr	r3, [pc, #144]	@ (800700c <HAL_RCC_ClockConfig+0x1c4>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f023 020f 	bic.w	r2, r3, #15
 8006f82:	4922      	ldr	r1, [pc, #136]	@ (800700c <HAL_RCC_ClockConfig+0x1c4>)
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	4313      	orrs	r3, r2
 8006f88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f8a:	4b20      	ldr	r3, [pc, #128]	@ (800700c <HAL_RCC_ClockConfig+0x1c4>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f003 030f 	and.w	r3, r3, #15
 8006f92:	683a      	ldr	r2, [r7, #0]
 8006f94:	429a      	cmp	r2, r3
 8006f96:	d001      	beq.n	8006f9c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	e032      	b.n	8007002 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f003 0304 	and.w	r3, r3, #4
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d008      	beq.n	8006fba <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006fa8:	4b19      	ldr	r3, [pc, #100]	@ (8007010 <HAL_RCC_ClockConfig+0x1c8>)
 8006faa:	689b      	ldr	r3, [r3, #8]
 8006fac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	68db      	ldr	r3, [r3, #12]
 8006fb4:	4916      	ldr	r1, [pc, #88]	@ (8007010 <HAL_RCC_ClockConfig+0x1c8>)
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f003 0308 	and.w	r3, r3, #8
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d009      	beq.n	8006fda <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006fc6:	4b12      	ldr	r3, [pc, #72]	@ (8007010 <HAL_RCC_ClockConfig+0x1c8>)
 8006fc8:	689b      	ldr	r3, [r3, #8]
 8006fca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	691b      	ldr	r3, [r3, #16]
 8006fd2:	00db      	lsls	r3, r3, #3
 8006fd4:	490e      	ldr	r1, [pc, #56]	@ (8007010 <HAL_RCC_ClockConfig+0x1c8>)
 8006fd6:	4313      	orrs	r3, r2
 8006fd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006fda:	f000 f821 	bl	8007020 <HAL_RCC_GetSysClockFreq>
 8006fde:	4602      	mov	r2, r0
 8006fe0:	4b0b      	ldr	r3, [pc, #44]	@ (8007010 <HAL_RCC_ClockConfig+0x1c8>)
 8006fe2:	689b      	ldr	r3, [r3, #8]
 8006fe4:	091b      	lsrs	r3, r3, #4
 8006fe6:	f003 030f 	and.w	r3, r3, #15
 8006fea:	490a      	ldr	r1, [pc, #40]	@ (8007014 <HAL_RCC_ClockConfig+0x1cc>)
 8006fec:	5ccb      	ldrb	r3, [r1, r3]
 8006fee:	fa22 f303 	lsr.w	r3, r2, r3
 8006ff2:	4a09      	ldr	r2, [pc, #36]	@ (8007018 <HAL_RCC_ClockConfig+0x1d0>)
 8006ff4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006ff6:	4b09      	ldr	r3, [pc, #36]	@ (800701c <HAL_RCC_ClockConfig+0x1d4>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f7fd fc4a 	bl	8004894 <HAL_InitTick>

  return HAL_OK;
 8007000:	2300      	movs	r3, #0
}
 8007002:	4618      	mov	r0, r3
 8007004:	3710      	adds	r7, #16
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}
 800700a:	bf00      	nop
 800700c:	40023c00 	.word	0x40023c00
 8007010:	40023800 	.word	0x40023800
 8007014:	08016d64 	.word	0x08016d64
 8007018:	20000004 	.word	0x20000004
 800701c:	2000003c 	.word	0x2000003c

08007020 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007020:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007024:	b090      	sub	sp, #64	@ 0x40
 8007026:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007028:	2300      	movs	r3, #0
 800702a:	637b      	str	r3, [r7, #52]	@ 0x34
 800702c:	2300      	movs	r3, #0
 800702e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007030:	2300      	movs	r3, #0
 8007032:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8007034:	2300      	movs	r3, #0
 8007036:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007038:	4b59      	ldr	r3, [pc, #356]	@ (80071a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800703a:	689b      	ldr	r3, [r3, #8]
 800703c:	f003 030c 	and.w	r3, r3, #12
 8007040:	2b08      	cmp	r3, #8
 8007042:	d00d      	beq.n	8007060 <HAL_RCC_GetSysClockFreq+0x40>
 8007044:	2b08      	cmp	r3, #8
 8007046:	f200 80a1 	bhi.w	800718c <HAL_RCC_GetSysClockFreq+0x16c>
 800704a:	2b00      	cmp	r3, #0
 800704c:	d002      	beq.n	8007054 <HAL_RCC_GetSysClockFreq+0x34>
 800704e:	2b04      	cmp	r3, #4
 8007050:	d003      	beq.n	800705a <HAL_RCC_GetSysClockFreq+0x3a>
 8007052:	e09b      	b.n	800718c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007054:	4b53      	ldr	r3, [pc, #332]	@ (80071a4 <HAL_RCC_GetSysClockFreq+0x184>)
 8007056:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007058:	e09b      	b.n	8007192 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800705a:	4b53      	ldr	r3, [pc, #332]	@ (80071a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800705c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800705e:	e098      	b.n	8007192 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007060:	4b4f      	ldr	r3, [pc, #316]	@ (80071a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007068:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800706a:	4b4d      	ldr	r3, [pc, #308]	@ (80071a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007072:	2b00      	cmp	r3, #0
 8007074:	d028      	beq.n	80070c8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007076:	4b4a      	ldr	r3, [pc, #296]	@ (80071a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	099b      	lsrs	r3, r3, #6
 800707c:	2200      	movs	r2, #0
 800707e:	623b      	str	r3, [r7, #32]
 8007080:	627a      	str	r2, [r7, #36]	@ 0x24
 8007082:	6a3b      	ldr	r3, [r7, #32]
 8007084:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007088:	2100      	movs	r1, #0
 800708a:	4b47      	ldr	r3, [pc, #284]	@ (80071a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800708c:	fb03 f201 	mul.w	r2, r3, r1
 8007090:	2300      	movs	r3, #0
 8007092:	fb00 f303 	mul.w	r3, r0, r3
 8007096:	4413      	add	r3, r2
 8007098:	4a43      	ldr	r2, [pc, #268]	@ (80071a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800709a:	fba0 1202 	umull	r1, r2, r0, r2
 800709e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80070a0:	460a      	mov	r2, r1
 80070a2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80070a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80070a6:	4413      	add	r3, r2
 80070a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80070aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070ac:	2200      	movs	r2, #0
 80070ae:	61bb      	str	r3, [r7, #24]
 80070b0:	61fa      	str	r2, [r7, #28]
 80070b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80070b6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80070ba:	f7f9 fe45 	bl	8000d48 <__aeabi_uldivmod>
 80070be:	4602      	mov	r2, r0
 80070c0:	460b      	mov	r3, r1
 80070c2:	4613      	mov	r3, r2
 80070c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80070c6:	e053      	b.n	8007170 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80070c8:	4b35      	ldr	r3, [pc, #212]	@ (80071a0 <HAL_RCC_GetSysClockFreq+0x180>)
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	099b      	lsrs	r3, r3, #6
 80070ce:	2200      	movs	r2, #0
 80070d0:	613b      	str	r3, [r7, #16]
 80070d2:	617a      	str	r2, [r7, #20]
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80070da:	f04f 0b00 	mov.w	fp, #0
 80070de:	4652      	mov	r2, sl
 80070e0:	465b      	mov	r3, fp
 80070e2:	f04f 0000 	mov.w	r0, #0
 80070e6:	f04f 0100 	mov.w	r1, #0
 80070ea:	0159      	lsls	r1, r3, #5
 80070ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80070f0:	0150      	lsls	r0, r2, #5
 80070f2:	4602      	mov	r2, r0
 80070f4:	460b      	mov	r3, r1
 80070f6:	ebb2 080a 	subs.w	r8, r2, sl
 80070fa:	eb63 090b 	sbc.w	r9, r3, fp
 80070fe:	f04f 0200 	mov.w	r2, #0
 8007102:	f04f 0300 	mov.w	r3, #0
 8007106:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800710a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800710e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007112:	ebb2 0408 	subs.w	r4, r2, r8
 8007116:	eb63 0509 	sbc.w	r5, r3, r9
 800711a:	f04f 0200 	mov.w	r2, #0
 800711e:	f04f 0300 	mov.w	r3, #0
 8007122:	00eb      	lsls	r3, r5, #3
 8007124:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007128:	00e2      	lsls	r2, r4, #3
 800712a:	4614      	mov	r4, r2
 800712c:	461d      	mov	r5, r3
 800712e:	eb14 030a 	adds.w	r3, r4, sl
 8007132:	603b      	str	r3, [r7, #0]
 8007134:	eb45 030b 	adc.w	r3, r5, fp
 8007138:	607b      	str	r3, [r7, #4]
 800713a:	f04f 0200 	mov.w	r2, #0
 800713e:	f04f 0300 	mov.w	r3, #0
 8007142:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007146:	4629      	mov	r1, r5
 8007148:	028b      	lsls	r3, r1, #10
 800714a:	4621      	mov	r1, r4
 800714c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007150:	4621      	mov	r1, r4
 8007152:	028a      	lsls	r2, r1, #10
 8007154:	4610      	mov	r0, r2
 8007156:	4619      	mov	r1, r3
 8007158:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800715a:	2200      	movs	r2, #0
 800715c:	60bb      	str	r3, [r7, #8]
 800715e:	60fa      	str	r2, [r7, #12]
 8007160:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007164:	f7f9 fdf0 	bl	8000d48 <__aeabi_uldivmod>
 8007168:	4602      	mov	r2, r0
 800716a:	460b      	mov	r3, r1
 800716c:	4613      	mov	r3, r2
 800716e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007170:	4b0b      	ldr	r3, [pc, #44]	@ (80071a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8007172:	685b      	ldr	r3, [r3, #4]
 8007174:	0c1b      	lsrs	r3, r3, #16
 8007176:	f003 0303 	and.w	r3, r3, #3
 800717a:	3301      	adds	r3, #1
 800717c:	005b      	lsls	r3, r3, #1
 800717e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8007180:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007184:	fbb2 f3f3 	udiv	r3, r2, r3
 8007188:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800718a:	e002      	b.n	8007192 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800718c:	4b05      	ldr	r3, [pc, #20]	@ (80071a4 <HAL_RCC_GetSysClockFreq+0x184>)
 800718e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007190:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007192:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8007194:	4618      	mov	r0, r3
 8007196:	3740      	adds	r7, #64	@ 0x40
 8007198:	46bd      	mov	sp, r7
 800719a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800719e:	bf00      	nop
 80071a0:	40023800 	.word	0x40023800
 80071a4:	00f42400 	.word	0x00f42400
 80071a8:	017d7840 	.word	0x017d7840

080071ac <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80071ac:	b480      	push	{r7}
 80071ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80071b0:	4b03      	ldr	r3, [pc, #12]	@ (80071c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80071b2:	681b      	ldr	r3, [r3, #0]
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	46bd      	mov	sp, r7
 80071b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071bc:	4770      	bx	lr
 80071be:	bf00      	nop
 80071c0:	20000004 	.word	0x20000004

080071c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80071c8:	f7ff fff0 	bl	80071ac <HAL_RCC_GetHCLKFreq>
 80071cc:	4602      	mov	r2, r0
 80071ce:	4b05      	ldr	r3, [pc, #20]	@ (80071e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80071d0:	689b      	ldr	r3, [r3, #8]
 80071d2:	0a9b      	lsrs	r3, r3, #10
 80071d4:	f003 0307 	and.w	r3, r3, #7
 80071d8:	4903      	ldr	r1, [pc, #12]	@ (80071e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80071da:	5ccb      	ldrb	r3, [r1, r3]
 80071dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	bd80      	pop	{r7, pc}
 80071e4:	40023800 	.word	0x40023800
 80071e8:	08016d74 	.word	0x08016d74

080071ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80071f0:	f7ff ffdc 	bl	80071ac <HAL_RCC_GetHCLKFreq>
 80071f4:	4602      	mov	r2, r0
 80071f6:	4b05      	ldr	r3, [pc, #20]	@ (800720c <HAL_RCC_GetPCLK2Freq+0x20>)
 80071f8:	689b      	ldr	r3, [r3, #8]
 80071fa:	0b5b      	lsrs	r3, r3, #13
 80071fc:	f003 0307 	and.w	r3, r3, #7
 8007200:	4903      	ldr	r1, [pc, #12]	@ (8007210 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007202:	5ccb      	ldrb	r3, [r1, r3]
 8007204:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007208:	4618      	mov	r0, r3
 800720a:	bd80      	pop	{r7, pc}
 800720c:	40023800 	.word	0x40023800
 8007210:	08016d74 	.word	0x08016d74

08007214 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b088      	sub	sp, #32
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800721c:	2300      	movs	r3, #0
 800721e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007220:	2300      	movs	r3, #0
 8007222:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007224:	2300      	movs	r3, #0
 8007226:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007228:	2300      	movs	r3, #0
 800722a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800722c:	2300      	movs	r3, #0
 800722e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f003 0301 	and.w	r3, r3, #1
 8007238:	2b00      	cmp	r3, #0
 800723a:	d012      	beq.n	8007262 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800723c:	4b69      	ldr	r3, [pc, #420]	@ (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800723e:	689b      	ldr	r3, [r3, #8]
 8007240:	4a68      	ldr	r2, [pc, #416]	@ (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007242:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007246:	6093      	str	r3, [r2, #8]
 8007248:	4b66      	ldr	r3, [pc, #408]	@ (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800724a:	689a      	ldr	r2, [r3, #8]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007250:	4964      	ldr	r1, [pc, #400]	@ (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007252:	4313      	orrs	r3, r2
 8007254:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800725a:	2b00      	cmp	r3, #0
 800725c:	d101      	bne.n	8007262 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800725e:	2301      	movs	r3, #1
 8007260:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800726a:	2b00      	cmp	r3, #0
 800726c:	d017      	beq.n	800729e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800726e:	4b5d      	ldr	r3, [pc, #372]	@ (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007270:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007274:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800727c:	4959      	ldr	r1, [pc, #356]	@ (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800727e:	4313      	orrs	r3, r2
 8007280:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007288:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800728c:	d101      	bne.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800728e:	2301      	movs	r3, #1
 8007290:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007296:	2b00      	cmp	r3, #0
 8007298:	d101      	bne.n	800729e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800729a:	2301      	movs	r3, #1
 800729c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d017      	beq.n	80072da <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80072aa:	4b4e      	ldr	r3, [pc, #312]	@ (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80072b0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072b8:	494a      	ldr	r1, [pc, #296]	@ (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072ba:	4313      	orrs	r3, r2
 80072bc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80072c8:	d101      	bne.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80072ca:	2301      	movs	r3, #1
 80072cc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d101      	bne.n	80072da <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80072d6:	2301      	movs	r3, #1
 80072d8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d001      	beq.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80072e6:	2301      	movs	r3, #1
 80072e8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f003 0320 	and.w	r3, r3, #32
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	f000 808b 	beq.w	800740e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80072f8:	4b3a      	ldr	r3, [pc, #232]	@ (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072fc:	4a39      	ldr	r2, [pc, #228]	@ (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007302:	6413      	str	r3, [r2, #64]	@ 0x40
 8007304:	4b37      	ldr	r3, [pc, #220]	@ (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007308:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800730c:	60bb      	str	r3, [r7, #8]
 800730e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007310:	4b35      	ldr	r3, [pc, #212]	@ (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4a34      	ldr	r2, [pc, #208]	@ (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007316:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800731a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800731c:	f7fd fafe 	bl	800491c <HAL_GetTick>
 8007320:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007322:	e008      	b.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007324:	f7fd fafa 	bl	800491c <HAL_GetTick>
 8007328:	4602      	mov	r2, r0
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	1ad3      	subs	r3, r2, r3
 800732e:	2b64      	cmp	r3, #100	@ 0x64
 8007330:	d901      	bls.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007332:	2303      	movs	r3, #3
 8007334:	e357      	b.n	80079e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007336:	4b2c      	ldr	r3, [pc, #176]	@ (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800733e:	2b00      	cmp	r3, #0
 8007340:	d0f0      	beq.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007342:	4b28      	ldr	r3, [pc, #160]	@ (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007344:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007346:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800734a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800734c:	693b      	ldr	r3, [r7, #16]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d035      	beq.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007356:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800735a:	693a      	ldr	r2, [r7, #16]
 800735c:	429a      	cmp	r2, r3
 800735e:	d02e      	beq.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007360:	4b20      	ldr	r3, [pc, #128]	@ (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007362:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007364:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007368:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800736a:	4b1e      	ldr	r3, [pc, #120]	@ (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800736c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800736e:	4a1d      	ldr	r2, [pc, #116]	@ (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007370:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007374:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007376:	4b1b      	ldr	r3, [pc, #108]	@ (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007378:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800737a:	4a1a      	ldr	r2, [pc, #104]	@ (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800737c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007380:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007382:	4a18      	ldr	r2, [pc, #96]	@ (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007388:	4b16      	ldr	r3, [pc, #88]	@ (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800738a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800738c:	f003 0301 	and.w	r3, r3, #1
 8007390:	2b01      	cmp	r3, #1
 8007392:	d114      	bne.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007394:	f7fd fac2 	bl	800491c <HAL_GetTick>
 8007398:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800739a:	e00a      	b.n	80073b2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800739c:	f7fd fabe 	bl	800491c <HAL_GetTick>
 80073a0:	4602      	mov	r2, r0
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	1ad3      	subs	r3, r2, r3
 80073a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d901      	bls.n	80073b2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80073ae:	2303      	movs	r3, #3
 80073b0:	e319      	b.n	80079e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073b2:	4b0c      	ldr	r3, [pc, #48]	@ (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073b6:	f003 0302 	and.w	r3, r3, #2
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d0ee      	beq.n	800739c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80073c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80073ca:	d111      	bne.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80073cc:	4b05      	ldr	r3, [pc, #20]	@ (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073ce:	689b      	ldr	r3, [r3, #8]
 80073d0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80073d8:	4b04      	ldr	r3, [pc, #16]	@ (80073ec <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80073da:	400b      	ands	r3, r1
 80073dc:	4901      	ldr	r1, [pc, #4]	@ (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073de:	4313      	orrs	r3, r2
 80073e0:	608b      	str	r3, [r1, #8]
 80073e2:	e00b      	b.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80073e4:	40023800 	.word	0x40023800
 80073e8:	40007000 	.word	0x40007000
 80073ec:	0ffffcff 	.word	0x0ffffcff
 80073f0:	4baa      	ldr	r3, [pc, #680]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80073f2:	689b      	ldr	r3, [r3, #8]
 80073f4:	4aa9      	ldr	r2, [pc, #676]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80073f6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80073fa:	6093      	str	r3, [r2, #8]
 80073fc:	4ba7      	ldr	r3, [pc, #668]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80073fe:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007404:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007408:	49a4      	ldr	r1, [pc, #656]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800740a:	4313      	orrs	r3, r2
 800740c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f003 0310 	and.w	r3, r3, #16
 8007416:	2b00      	cmp	r3, #0
 8007418:	d010      	beq.n	800743c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800741a:	4ba0      	ldr	r3, [pc, #640]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800741c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007420:	4a9e      	ldr	r2, [pc, #632]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007422:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007426:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800742a:	4b9c      	ldr	r3, [pc, #624]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800742c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007434:	4999      	ldr	r1, [pc, #612]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007436:	4313      	orrs	r3, r2
 8007438:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007444:	2b00      	cmp	r3, #0
 8007446:	d00a      	beq.n	800745e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007448:	4b94      	ldr	r3, [pc, #592]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800744a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800744e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007456:	4991      	ldr	r1, [pc, #580]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007458:	4313      	orrs	r3, r2
 800745a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007466:	2b00      	cmp	r3, #0
 8007468:	d00a      	beq.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800746a:	4b8c      	ldr	r3, [pc, #560]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800746c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007470:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007478:	4988      	ldr	r1, [pc, #544]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800747a:	4313      	orrs	r3, r2
 800747c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007488:	2b00      	cmp	r3, #0
 800748a:	d00a      	beq.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800748c:	4b83      	ldr	r3, [pc, #524]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800748e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007492:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800749a:	4980      	ldr	r1, [pc, #512]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800749c:	4313      	orrs	r3, r2
 800749e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d00a      	beq.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80074ae:	4b7b      	ldr	r3, [pc, #492]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074b4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074bc:	4977      	ldr	r1, [pc, #476]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074be:	4313      	orrs	r3, r2
 80074c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d00a      	beq.n	80074e6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80074d0:	4b72      	ldr	r3, [pc, #456]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074d6:	f023 0203 	bic.w	r2, r3, #3
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074de:	496f      	ldr	r1, [pc, #444]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074e0:	4313      	orrs	r3, r2
 80074e2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d00a      	beq.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80074f2:	4b6a      	ldr	r3, [pc, #424]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074f8:	f023 020c 	bic.w	r2, r3, #12
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007500:	4966      	ldr	r1, [pc, #408]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007502:	4313      	orrs	r3, r2
 8007504:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007510:	2b00      	cmp	r3, #0
 8007512:	d00a      	beq.n	800752a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007514:	4b61      	ldr	r3, [pc, #388]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007516:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800751a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007522:	495e      	ldr	r1, [pc, #376]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007524:	4313      	orrs	r3, r2
 8007526:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007532:	2b00      	cmp	r3, #0
 8007534:	d00a      	beq.n	800754c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007536:	4b59      	ldr	r3, [pc, #356]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007538:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800753c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007544:	4955      	ldr	r1, [pc, #340]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007546:	4313      	orrs	r3, r2
 8007548:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007554:	2b00      	cmp	r3, #0
 8007556:	d00a      	beq.n	800756e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007558:	4b50      	ldr	r3, [pc, #320]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800755a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800755e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007566:	494d      	ldr	r1, [pc, #308]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007568:	4313      	orrs	r3, r2
 800756a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007576:	2b00      	cmp	r3, #0
 8007578:	d00a      	beq.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800757a:	4b48      	ldr	r3, [pc, #288]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800757c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007580:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007588:	4944      	ldr	r1, [pc, #272]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800758a:	4313      	orrs	r3, r2
 800758c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007598:	2b00      	cmp	r3, #0
 800759a:	d00a      	beq.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800759c:	4b3f      	ldr	r3, [pc, #252]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800759e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075a2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80075aa:	493c      	ldr	r1, [pc, #240]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075ac:	4313      	orrs	r3, r2
 80075ae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d00a      	beq.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80075be:	4b37      	ldr	r3, [pc, #220]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075c4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80075cc:	4933      	ldr	r1, [pc, #204]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075ce:	4313      	orrs	r3, r2
 80075d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d00a      	beq.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80075e0:	4b2e      	ldr	r3, [pc, #184]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075e6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80075ee:	492b      	ldr	r1, [pc, #172]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075f0:	4313      	orrs	r3, r2
 80075f2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d011      	beq.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007602:	4b26      	ldr	r3, [pc, #152]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007604:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007608:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007610:	4922      	ldr	r1, [pc, #136]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007612:	4313      	orrs	r3, r2
 8007614:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800761c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007620:	d101      	bne.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007622:	2301      	movs	r3, #1
 8007624:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f003 0308 	and.w	r3, r3, #8
 800762e:	2b00      	cmp	r3, #0
 8007630:	d001      	beq.n	8007636 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007632:	2301      	movs	r3, #1
 8007634:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800763e:	2b00      	cmp	r3, #0
 8007640:	d00a      	beq.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007642:	4b16      	ldr	r3, [pc, #88]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007644:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007648:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007650:	4912      	ldr	r1, [pc, #72]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007652:	4313      	orrs	r3, r2
 8007654:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007660:	2b00      	cmp	r3, #0
 8007662:	d00b      	beq.n	800767c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007664:	4b0d      	ldr	r3, [pc, #52]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007666:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800766a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007674:	4909      	ldr	r1, [pc, #36]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007676:	4313      	orrs	r3, r2
 8007678:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800767c:	69fb      	ldr	r3, [r7, #28]
 800767e:	2b01      	cmp	r3, #1
 8007680:	d006      	beq.n	8007690 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800768a:	2b00      	cmp	r3, #0
 800768c:	f000 80d9 	beq.w	8007842 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007690:	4b02      	ldr	r3, [pc, #8]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a01      	ldr	r2, [pc, #4]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007696:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800769a:	e001      	b.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800769c:	40023800 	.word	0x40023800
 80076a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076a2:	f7fd f93b 	bl	800491c <HAL_GetTick>
 80076a6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80076a8:	e008      	b.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80076aa:	f7fd f937 	bl	800491c <HAL_GetTick>
 80076ae:	4602      	mov	r2, r0
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	1ad3      	subs	r3, r2, r3
 80076b4:	2b64      	cmp	r3, #100	@ 0x64
 80076b6:	d901      	bls.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80076b8:	2303      	movs	r3, #3
 80076ba:	e194      	b.n	80079e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80076bc:	4b6c      	ldr	r3, [pc, #432]	@ (8007870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d1f0      	bne.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f003 0301 	and.w	r3, r3, #1
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d021      	beq.n	8007718 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d11d      	bne.n	8007718 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80076dc:	4b64      	ldr	r3, [pc, #400]	@ (8007870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80076de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80076e2:	0c1b      	lsrs	r3, r3, #16
 80076e4:	f003 0303 	and.w	r3, r3, #3
 80076e8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80076ea:	4b61      	ldr	r3, [pc, #388]	@ (8007870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80076ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80076f0:	0e1b      	lsrs	r3, r3, #24
 80076f2:	f003 030f 	and.w	r3, r3, #15
 80076f6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	019a      	lsls	r2, r3, #6
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	041b      	lsls	r3, r3, #16
 8007702:	431a      	orrs	r2, r3
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	061b      	lsls	r3, r3, #24
 8007708:	431a      	orrs	r2, r3
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	689b      	ldr	r3, [r3, #8]
 800770e:	071b      	lsls	r3, r3, #28
 8007710:	4957      	ldr	r1, [pc, #348]	@ (8007870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007712:	4313      	orrs	r3, r2
 8007714:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007720:	2b00      	cmp	r3, #0
 8007722:	d004      	beq.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007728:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800772c:	d00a      	beq.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007736:	2b00      	cmp	r3, #0
 8007738:	d02e      	beq.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800773e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007742:	d129      	bne.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007744:	4b4a      	ldr	r3, [pc, #296]	@ (8007870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007746:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800774a:	0c1b      	lsrs	r3, r3, #16
 800774c:	f003 0303 	and.w	r3, r3, #3
 8007750:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007752:	4b47      	ldr	r3, [pc, #284]	@ (8007870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007754:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007758:	0f1b      	lsrs	r3, r3, #28
 800775a:	f003 0307 	and.w	r3, r3, #7
 800775e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	019a      	lsls	r2, r3, #6
 8007766:	693b      	ldr	r3, [r7, #16]
 8007768:	041b      	lsls	r3, r3, #16
 800776a:	431a      	orrs	r2, r3
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	68db      	ldr	r3, [r3, #12]
 8007770:	061b      	lsls	r3, r3, #24
 8007772:	431a      	orrs	r2, r3
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	071b      	lsls	r3, r3, #28
 8007778:	493d      	ldr	r1, [pc, #244]	@ (8007870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800777a:	4313      	orrs	r3, r2
 800777c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007780:	4b3b      	ldr	r3, [pc, #236]	@ (8007870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007782:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007786:	f023 021f 	bic.w	r2, r3, #31
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800778e:	3b01      	subs	r3, #1
 8007790:	4937      	ldr	r1, [pc, #220]	@ (8007870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007792:	4313      	orrs	r3, r2
 8007794:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d01d      	beq.n	80077e0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80077a4:	4b32      	ldr	r3, [pc, #200]	@ (8007870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80077a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80077aa:	0e1b      	lsrs	r3, r3, #24
 80077ac:	f003 030f 	and.w	r3, r3, #15
 80077b0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80077b2:	4b2f      	ldr	r3, [pc, #188]	@ (8007870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80077b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80077b8:	0f1b      	lsrs	r3, r3, #28
 80077ba:	f003 0307 	and.w	r3, r3, #7
 80077be:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	685b      	ldr	r3, [r3, #4]
 80077c4:	019a      	lsls	r2, r3, #6
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	691b      	ldr	r3, [r3, #16]
 80077ca:	041b      	lsls	r3, r3, #16
 80077cc:	431a      	orrs	r2, r3
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	061b      	lsls	r3, r3, #24
 80077d2:	431a      	orrs	r2, r3
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	071b      	lsls	r3, r3, #28
 80077d8:	4925      	ldr	r1, [pc, #148]	@ (8007870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80077da:	4313      	orrs	r3, r2
 80077dc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d011      	beq.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	685b      	ldr	r3, [r3, #4]
 80077f0:	019a      	lsls	r2, r3, #6
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	691b      	ldr	r3, [r3, #16]
 80077f6:	041b      	lsls	r3, r3, #16
 80077f8:	431a      	orrs	r2, r3
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	68db      	ldr	r3, [r3, #12]
 80077fe:	061b      	lsls	r3, r3, #24
 8007800:	431a      	orrs	r2, r3
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	689b      	ldr	r3, [r3, #8]
 8007806:	071b      	lsls	r3, r3, #28
 8007808:	4919      	ldr	r1, [pc, #100]	@ (8007870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800780a:	4313      	orrs	r3, r2
 800780c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007810:	4b17      	ldr	r3, [pc, #92]	@ (8007870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	4a16      	ldr	r2, [pc, #88]	@ (8007870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007816:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800781a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800781c:	f7fd f87e 	bl	800491c <HAL_GetTick>
 8007820:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007822:	e008      	b.n	8007836 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007824:	f7fd f87a 	bl	800491c <HAL_GetTick>
 8007828:	4602      	mov	r2, r0
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	1ad3      	subs	r3, r2, r3
 800782e:	2b64      	cmp	r3, #100	@ 0x64
 8007830:	d901      	bls.n	8007836 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007832:	2303      	movs	r3, #3
 8007834:	e0d7      	b.n	80079e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007836:	4b0e      	ldr	r3, [pc, #56]	@ (8007870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800783e:	2b00      	cmp	r3, #0
 8007840:	d0f0      	beq.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007842:	69bb      	ldr	r3, [r7, #24]
 8007844:	2b01      	cmp	r3, #1
 8007846:	f040 80cd 	bne.w	80079e4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800784a:	4b09      	ldr	r3, [pc, #36]	@ (8007870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	4a08      	ldr	r2, [pc, #32]	@ (8007870 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007850:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007854:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007856:	f7fd f861 	bl	800491c <HAL_GetTick>
 800785a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800785c:	e00a      	b.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800785e:	f7fd f85d 	bl	800491c <HAL_GetTick>
 8007862:	4602      	mov	r2, r0
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	1ad3      	subs	r3, r2, r3
 8007868:	2b64      	cmp	r3, #100	@ 0x64
 800786a:	d903      	bls.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800786c:	2303      	movs	r3, #3
 800786e:	e0ba      	b.n	80079e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8007870:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007874:	4b5e      	ldr	r3, [pc, #376]	@ (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800787c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007880:	d0ed      	beq.n	800785e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800788a:	2b00      	cmp	r3, #0
 800788c:	d003      	beq.n	8007896 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007892:	2b00      	cmp	r3, #0
 8007894:	d009      	beq.n	80078aa <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d02e      	beq.n	8007900 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d12a      	bne.n	8007900 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80078aa:	4b51      	ldr	r3, [pc, #324]	@ (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80078ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078b0:	0c1b      	lsrs	r3, r3, #16
 80078b2:	f003 0303 	and.w	r3, r3, #3
 80078b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80078b8:	4b4d      	ldr	r3, [pc, #308]	@ (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80078ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078be:	0f1b      	lsrs	r3, r3, #28
 80078c0:	f003 0307 	and.w	r3, r3, #7
 80078c4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	695b      	ldr	r3, [r3, #20]
 80078ca:	019a      	lsls	r2, r3, #6
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	041b      	lsls	r3, r3, #16
 80078d0:	431a      	orrs	r2, r3
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	699b      	ldr	r3, [r3, #24]
 80078d6:	061b      	lsls	r3, r3, #24
 80078d8:	431a      	orrs	r2, r3
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	071b      	lsls	r3, r3, #28
 80078de:	4944      	ldr	r1, [pc, #272]	@ (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80078e0:	4313      	orrs	r3, r2
 80078e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80078e6:	4b42      	ldr	r3, [pc, #264]	@ (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80078e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80078ec:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078f4:	3b01      	subs	r3, #1
 80078f6:	021b      	lsls	r3, r3, #8
 80078f8:	493d      	ldr	r1, [pc, #244]	@ (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80078fa:	4313      	orrs	r3, r2
 80078fc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007908:	2b00      	cmp	r3, #0
 800790a:	d022      	beq.n	8007952 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007910:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007914:	d11d      	bne.n	8007952 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007916:	4b36      	ldr	r3, [pc, #216]	@ (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007918:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800791c:	0e1b      	lsrs	r3, r3, #24
 800791e:	f003 030f 	and.w	r3, r3, #15
 8007922:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007924:	4b32      	ldr	r3, [pc, #200]	@ (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007926:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800792a:	0f1b      	lsrs	r3, r3, #28
 800792c:	f003 0307 	and.w	r3, r3, #7
 8007930:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	695b      	ldr	r3, [r3, #20]
 8007936:	019a      	lsls	r2, r3, #6
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6a1b      	ldr	r3, [r3, #32]
 800793c:	041b      	lsls	r3, r3, #16
 800793e:	431a      	orrs	r2, r3
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	061b      	lsls	r3, r3, #24
 8007944:	431a      	orrs	r2, r3
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	071b      	lsls	r3, r3, #28
 800794a:	4929      	ldr	r1, [pc, #164]	@ (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800794c:	4313      	orrs	r3, r2
 800794e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f003 0308 	and.w	r3, r3, #8
 800795a:	2b00      	cmp	r3, #0
 800795c:	d028      	beq.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800795e:	4b24      	ldr	r3, [pc, #144]	@ (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007960:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007964:	0e1b      	lsrs	r3, r3, #24
 8007966:	f003 030f 	and.w	r3, r3, #15
 800796a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800796c:	4b20      	ldr	r3, [pc, #128]	@ (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800796e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007972:	0c1b      	lsrs	r3, r3, #16
 8007974:	f003 0303 	and.w	r3, r3, #3
 8007978:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	695b      	ldr	r3, [r3, #20]
 800797e:	019a      	lsls	r2, r3, #6
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	041b      	lsls	r3, r3, #16
 8007984:	431a      	orrs	r2, r3
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	061b      	lsls	r3, r3, #24
 800798a:	431a      	orrs	r2, r3
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	69db      	ldr	r3, [r3, #28]
 8007990:	071b      	lsls	r3, r3, #28
 8007992:	4917      	ldr	r1, [pc, #92]	@ (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007994:	4313      	orrs	r3, r2
 8007996:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800799a:	4b15      	ldr	r3, [pc, #84]	@ (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800799c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80079a0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079a8:	4911      	ldr	r1, [pc, #68]	@ (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80079aa:	4313      	orrs	r3, r2
 80079ac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80079b0:	4b0f      	ldr	r3, [pc, #60]	@ (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	4a0e      	ldr	r2, [pc, #56]	@ (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80079b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80079ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079bc:	f7fc ffae 	bl	800491c <HAL_GetTick>
 80079c0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80079c2:	e008      	b.n	80079d6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80079c4:	f7fc ffaa 	bl	800491c <HAL_GetTick>
 80079c8:	4602      	mov	r2, r0
 80079ca:	697b      	ldr	r3, [r7, #20]
 80079cc:	1ad3      	subs	r3, r2, r3
 80079ce:	2b64      	cmp	r3, #100	@ 0x64
 80079d0:	d901      	bls.n	80079d6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80079d2:	2303      	movs	r3, #3
 80079d4:	e007      	b.n	80079e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80079d6:	4b06      	ldr	r3, [pc, #24]	@ (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80079de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80079e2:	d1ef      	bne.n	80079c4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80079e4:	2300      	movs	r3, #0
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	3720      	adds	r7, #32
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}
 80079ee:	bf00      	nop
 80079f0:	40023800 	.word	0x40023800

080079f4 <HAL_RCCEx_GetPeriphCLKConfig>:
  *         RCC configuration registers.
  * @param  PeriphClkInit pointer to the configured RCC_PeriphCLKInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b085      	sub	sp, #20
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0;
 80079fc:	2300      	movs	r3, #0
 80079fe:	60fb      	str	r3, [r7, #12]
                                        RCC_PERIPHCLK_USART6   | RCC_PERIPHCLK_UART7    |\
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48    | RCC_PERIPHCLK_SDMMC2   |\
                                        RCC_PERIPHCLK_DFSDM1   | RCC_PERIPHCLK_DFSDM1_AUDIO;
#else
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	4a80      	ldr	r2, [pc, #512]	@ (8007c04 <HAL_RCCEx_GetPeriphCLKConfig+0x210>)
 8007a04:	601a      	str	r2, [r3, #0]
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8007a06:	4b80      	ldr	r3, [pc, #512]	@ (8007c08 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007a08:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a0c:	099b      	lsrs	r3, r3, #6
 8007a0e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007a16:	4b7c      	ldr	r3, [pc, #496]	@ (8007c08 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007a18:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a1c:	0c1b      	lsrs	r3, r3, #16
 8007a1e:	f003 0203 	and.w	r2, r3, #3
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007a26:	4b78      	ldr	r3, [pc, #480]	@ (8007c08 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007a28:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a2c:	0e1b      	lsrs	r3, r3, #24
 8007a2e:	f003 020f 	and.w	r2, r3, #15
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007a36:	4b74      	ldr	r3, [pc, #464]	@ (8007c08 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007a38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a3c:	0f1b      	lsrs	r3, r3, #28
 8007a3e:	f003 0207 	and.w	r2, r3, #7
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	609a      	str	r2, [r3, #8]

  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLSAICFGR_PLLSAIN_Pos);
 8007a46:	4b70      	ldr	r3, [pc, #448]	@ (8007c08 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a4c:	099b      	lsrs	r3, r3, #6
 8007a4e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007a56:	4b6c      	ldr	r3, [pc, #432]	@ (8007c08 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a5c:	0c1b      	lsrs	r3, r3, #16
 8007a5e:	f003 0203 	and.w	r2, r3, #3
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	621a      	str	r2, [r3, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007a66:	4b68      	ldr	r3, [pc, #416]	@ (8007c08 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a6c:	0e1b      	lsrs	r3, r3, #24
 8007a6e:	f003 020f 	and.w	r2, r3, #15
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	619a      	str	r2, [r3, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007a76:	4b64      	ldr	r3, [pc, #400]	@ (8007c08 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a7c:	0f1b      	lsrs	r3, r3, #28
 8007a7e:	f003 0207 	and.w	r2, r3, #7
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	61da      	str	r2, [r3, #28]

  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> RCC_DCKCFGR1_PLLI2SDIVQ_Pos);
 8007a86:	4b60      	ldr	r3, [pc, #384]	@ (8007c08 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007a88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a8c:	f003 021f 	and.w	r2, r3, #31
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	625a      	str	r2, [r3, #36]	@ 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> RCC_DCKCFGR1_PLLSAIDIVQ_Pos);
 8007a94:	4b5c      	ldr	r3, [pc, #368]	@ (8007c08 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007a96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a9a:	0a1b      	lsrs	r3, r3, #8
 8007a9c:	f003 021f 	and.w	r2, r3, #31
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	629a      	str	r2, [r3, #40]	@ 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> RCC_DCKCFGR1_PLLSAIDIVR_Pos);
 8007aa4:	4b58      	ldr	r3, [pc, #352]	@ (8007c08 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007aa6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007aaa:	0c1b      	lsrs	r3, r3, #16
 8007aac:	f003 0203 	and.w	r2, r3, #3
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 8007ab4:	4b54      	ldr	r3, [pc, #336]	@ (8007c08 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007ab6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007aba:	f403 1240 	and.w	r2, r3, #3145728	@ 0x300000
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 8007ac2:	4b51      	ldr	r3, [pc, #324]	@ (8007c08 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007ac4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007ac8:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
 8007ad0:	4b4d      	ldr	r3, [pc, #308]	@ (8007c08 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007ad2:	689b      	ldr	r3, [r3, #8]
 8007ad4:	f403 0200 	and.w	r2, r3, #8388608	@ 0x800000
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 8007adc:	4b4a      	ldr	r3, [pc, #296]	@ (8007c08 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ae2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
 8007aea:	4b47      	ldr	r3, [pc, #284]	@ (8007c08 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007aec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007af0:	f403 2240 	and.w	r2, r3, #786432	@ 0xc0000
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
 8007af8:	4b43      	ldr	r3, [pc, #268]	@ (8007c08 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007afe:	f403 1240 	and.w	r2, r3, #3145728	@ 0x300000
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
 8007b06:	4b40      	ldr	r3, [pc, #256]	@ (8007c08 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b0c:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 8007b14:	4b3c      	ldr	r3, [pc, #240]	@ (8007c08 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b1a:	f003 0203 	and.w	r2, r3, #3
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 8007b22:	4b39      	ldr	r3, [pc, #228]	@ (8007c08 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b28:	f003 020c 	and.w	r2, r3, #12
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 8007b30:	4b35      	ldr	r3, [pc, #212]	@ (8007c08 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b36:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
 8007b3e:	4b32      	ldr	r3, [pc, #200]	@ (8007c08 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b44:	f003 02c0 	and.w	r2, r3, #192	@ 0xc0
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
 8007b4c:	4b2e      	ldr	r3, [pc, #184]	@ (8007c08 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b52:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
 8007b5a:	4b2b      	ldr	r3, [pc, #172]	@ (8007c08 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b60:	f403 6240 	and.w	r2, r3, #3072	@ 0xc00
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
 8007b68:	4b27      	ldr	r3, [pc, #156]	@ (8007c08 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b6e:	f403 5240 	and.w	r2, r3, #12288	@ 0x3000
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
 8007b76:	4b24      	ldr	r3, [pc, #144]	@ (8007c08 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b7c:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 8007b84:	4b20      	ldr	r3, [pc, #128]	@ (8007c08 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b8a:	f003 7240 	and.w	r2, r3, #50331648	@ 0x3000000
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 8007b92:	4b1d      	ldr	r3, [pc, #116]	@ (8007c08 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007b94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b98:	f003 6280 	and.w	r2, r3, #67108864	@ 0x4000000
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 8007ba0:	4b19      	ldr	r3, [pc, #100]	@ (8007c08 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ba6:	f003 6200 	and.w	r2, r3, #134217728	@ 0x8000000
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
 8007bae:	4b16      	ldr	r3, [pc, #88]	@ (8007c08 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bb4:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8007bbe:	4b12      	ldr	r3, [pc, #72]	@ (8007c08 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007bc0:	689b      	ldr	r3, [r3, #8]
 8007bc2:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8007bc6:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8007bc8:	4b0f      	ldr	r3, [pc, #60]	@ (8007c08 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007bca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bcc:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	431a      	orrs	r2, r3
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
 8007bd8:	4b0b      	ldr	r3, [pc, #44]	@ (8007c08 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007bda:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007bde:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d103      	bne.n	8007bee <HAL_RCCEx_GetPeriphCLKConfig+0x1fa>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2200      	movs	r2, #0
 8007bea:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 8007bec:	e003      	b.n	8007bf6 <HAL_RCCEx_GetPeriphCLKConfig+0x202>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007bf4:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8007bf6:	bf00      	nop
 8007bf8:	3714      	adds	r7, #20
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c00:	4770      	bx	lr
 8007c02:	bf00      	nop
 8007c04:	00fffff1 	.word	0x00fffff1
 8007c08:	40023800 	.word	0x40023800

08007c0c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b087      	sub	sp, #28
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8007c14:	2300      	movs	r3, #0
 8007c16:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8007c20:	2300      	movs	r3, #0
 8007c22:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007c2a:	f040 808d 	bne.w	8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 8007c2e:	4b93      	ldr	r3, [pc, #588]	@ (8007e7c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007c30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007c34:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8007c3c:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007c44:	d07c      	beq.n	8007d40 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007c4c:	d87b      	bhi.n	8007d46 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d004      	beq.n	8007c5e <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007c5a:	d039      	beq.n	8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8007c5c:	e073      	b.n	8007d46 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007c5e:	4b87      	ldr	r3, [pc, #540]	@ (8007e7c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d108      	bne.n	8007c7c <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007c6a:	4b84      	ldr	r3, [pc, #528]	@ (8007e7c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007c6c:	685b      	ldr	r3, [r3, #4]
 8007c6e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007c72:	4a83      	ldr	r2, [pc, #524]	@ (8007e80 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8007c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c78:	613b      	str	r3, [r7, #16]
 8007c7a:	e007      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007c7c:	4b7f      	ldr	r3, [pc, #508]	@ (8007e7c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007c7e:	685b      	ldr	r3, [r3, #4]
 8007c80:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007c84:	4a7f      	ldr	r2, [pc, #508]	@ (8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c8a:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8007c8c:	4b7b      	ldr	r3, [pc, #492]	@ (8007e7c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c92:	0e1b      	lsrs	r3, r3, #24
 8007c94:	f003 030f 	and.w	r3, r3, #15
 8007c98:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8007c9a:	4b78      	ldr	r3, [pc, #480]	@ (8007e7c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ca0:	099b      	lsrs	r3, r3, #6
 8007ca2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ca6:	693a      	ldr	r2, [r7, #16]
 8007ca8:	fb03 f202 	mul.w	r2, r3, r2
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cb2:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8007cb4:	4b71      	ldr	r3, [pc, #452]	@ (8007e7c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007cb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007cba:	0a1b      	lsrs	r3, r3, #8
 8007cbc:	f003 031f 	and.w	r3, r3, #31
 8007cc0:	3301      	adds	r3, #1
 8007cc2:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007cc4:	697a      	ldr	r2, [r7, #20]
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ccc:	617b      	str	r3, [r7, #20]
        break;
 8007cce:	e03b      	b.n	8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007cd0:	4b6a      	ldr	r3, [pc, #424]	@ (8007e7c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007cd2:	685b      	ldr	r3, [r3, #4]
 8007cd4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d108      	bne.n	8007cee <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007cdc:	4b67      	ldr	r3, [pc, #412]	@ (8007e7c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007cde:	685b      	ldr	r3, [r3, #4]
 8007ce0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007ce4:	4a66      	ldr	r2, [pc, #408]	@ (8007e80 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8007ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cea:	613b      	str	r3, [r7, #16]
 8007cec:	e007      	b.n	8007cfe <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007cee:	4b63      	ldr	r3, [pc, #396]	@ (8007e7c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007cf6:	4a63      	ldr	r2, [pc, #396]	@ (8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cfc:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8007cfe:	4b5f      	ldr	r3, [pc, #380]	@ (8007e7c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007d00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d04:	0e1b      	lsrs	r3, r3, #24
 8007d06:	f003 030f 	and.w	r3, r3, #15
 8007d0a:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8007d0c:	4b5b      	ldr	r3, [pc, #364]	@ (8007e7c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007d0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d12:	099b      	lsrs	r3, r3, #6
 8007d14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d18:	693a      	ldr	r2, [r7, #16]
 8007d1a:	fb03 f202 	mul.w	r2, r3, r2
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d24:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8007d26:	4b55      	ldr	r3, [pc, #340]	@ (8007e7c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007d28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007d2c:	f003 031f 	and.w	r3, r3, #31
 8007d30:	3301      	adds	r3, #1
 8007d32:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007d34:	697a      	ldr	r2, [r7, #20]
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d3c:	617b      	str	r3, [r7, #20]
        break;
 8007d3e:	e003      	b.n	8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 8007d40:	4b51      	ldr	r3, [pc, #324]	@ (8007e88 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8007d42:	617b      	str	r3, [r7, #20]
        break;
 8007d44:	e000      	b.n	8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 8007d46:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007d4e:	f040 808d 	bne.w	8007e6c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 8007d52:	4b4a      	ldr	r3, [pc, #296]	@ (8007e7c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007d54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007d58:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8007d60:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007d68:	d07c      	beq.n	8007e64 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007d70:	d87b      	bhi.n	8007e6a <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d004      	beq.n	8007d82 <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007d7e:	d039      	beq.n	8007df4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8007d80:	e073      	b.n	8007e6a <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007d82:	4b3e      	ldr	r3, [pc, #248]	@ (8007e7c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007d84:	685b      	ldr	r3, [r3, #4]
 8007d86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d108      	bne.n	8007da0 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007d8e:	4b3b      	ldr	r3, [pc, #236]	@ (8007e7c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007d90:	685b      	ldr	r3, [r3, #4]
 8007d92:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007d96:	4a3a      	ldr	r2, [pc, #232]	@ (8007e80 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8007d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d9c:	613b      	str	r3, [r7, #16]
 8007d9e:	e007      	b.n	8007db0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007da0:	4b36      	ldr	r3, [pc, #216]	@ (8007e7c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007da2:	685b      	ldr	r3, [r3, #4]
 8007da4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007da8:	4a36      	ldr	r2, [pc, #216]	@ (8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dae:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8007db0:	4b32      	ldr	r3, [pc, #200]	@ (8007e7c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007db6:	0e1b      	lsrs	r3, r3, #24
 8007db8:	f003 030f 	and.w	r3, r3, #15
 8007dbc:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8007dbe:	4b2f      	ldr	r3, [pc, #188]	@ (8007e7c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007dc4:	099b      	lsrs	r3, r3, #6
 8007dc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dca:	693a      	ldr	r2, [r7, #16]
 8007dcc:	fb03 f202 	mul.w	r2, r3, r2
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dd6:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8007dd8:	4b28      	ldr	r3, [pc, #160]	@ (8007e7c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007dda:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007dde:	0a1b      	lsrs	r3, r3, #8
 8007de0:	f003 031f 	and.w	r3, r3, #31
 8007de4:	3301      	adds	r3, #1
 8007de6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007de8:	697a      	ldr	r2, [r7, #20]
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8007df0:	617b      	str	r3, [r7, #20]
        break;
 8007df2:	e03b      	b.n	8007e6c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007df4:	4b21      	ldr	r3, [pc, #132]	@ (8007e7c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007df6:	685b      	ldr	r3, [r3, #4]
 8007df8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d108      	bne.n	8007e12 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007e00:	4b1e      	ldr	r3, [pc, #120]	@ (8007e7c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007e02:	685b      	ldr	r3, [r3, #4]
 8007e04:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007e08:	4a1d      	ldr	r2, [pc, #116]	@ (8007e80 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8007e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e0e:	613b      	str	r3, [r7, #16]
 8007e10:	e007      	b.n	8007e22 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007e12:	4b1a      	ldr	r3, [pc, #104]	@ (8007e7c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007e14:	685b      	ldr	r3, [r3, #4]
 8007e16:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007e1a:	4a1a      	ldr	r2, [pc, #104]	@ (8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007e1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e20:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8007e22:	4b16      	ldr	r3, [pc, #88]	@ (8007e7c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007e24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007e28:	0e1b      	lsrs	r3, r3, #24
 8007e2a:	f003 030f 	and.w	r3, r3, #15
 8007e2e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8007e30:	4b12      	ldr	r3, [pc, #72]	@ (8007e7c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007e32:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007e36:	099b      	lsrs	r3, r3, #6
 8007e38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e3c:	693a      	ldr	r2, [r7, #16]
 8007e3e:	fb03 f202 	mul.w	r2, r3, r2
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e48:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8007e4a:	4b0c      	ldr	r3, [pc, #48]	@ (8007e7c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007e4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007e50:	f003 031f 	and.w	r3, r3, #31
 8007e54:	3301      	adds	r3, #1
 8007e56:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007e58:	697a      	ldr	r2, [r7, #20]
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e60:	617b      	str	r3, [r7, #20]
        break;
 8007e62:	e003      	b.n	8007e6c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 8007e64:	4b08      	ldr	r3, [pc, #32]	@ (8007e88 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8007e66:	617b      	str	r3, [r7, #20]
        break;
 8007e68:	e000      	b.n	8007e6c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 8007e6a:	bf00      	nop
      }
    }
  }

  return frequency;
 8007e6c:	697b      	ldr	r3, [r7, #20]
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	371c      	adds	r7, #28
 8007e72:	46bd      	mov	sp, r7
 8007e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e78:	4770      	bx	lr
 8007e7a:	bf00      	nop
 8007e7c:	40023800 	.word	0x40023800
 8007e80:	00f42400 	.word	0x00f42400
 8007e84:	017d7840 	.word	0x017d7840
 8007e88:	00bb8000 	.word	0x00bb8000

08007e8c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b088      	sub	sp, #32
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8007e94:	2300      	movs	r3, #0
 8007e96:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d101      	bne.n	8007eaa <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	e156      	b.n	8008158 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8007eb0:	b2db      	uxtb	r3, r3
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d106      	bne.n	8007ec4 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f7fa f804 	bl	8001ecc <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2202      	movs	r2, #2
 8007ec8:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f000 fad5 	bl	800847c <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	68db      	ldr	r3, [r3, #12]
 8007ed6:	2b02      	cmp	r3, #2
 8007ed8:	d00c      	beq.n	8007ef4 <HAL_SAI_Init+0x68>
 8007eda:	2b02      	cmp	r3, #2
 8007edc:	d80d      	bhi.n	8007efa <HAL_SAI_Init+0x6e>
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d002      	beq.n	8007ee8 <HAL_SAI_Init+0x5c>
 8007ee2:	2b01      	cmp	r3, #1
 8007ee4:	d003      	beq.n	8007eee <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 8007ee6:	e008      	b.n	8007efa <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 8007ee8:	2300      	movs	r3, #0
 8007eea:	61fb      	str	r3, [r7, #28]
      break;
 8007eec:	e006      	b.n	8007efc <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8007eee:	2310      	movs	r3, #16
 8007ef0:	61fb      	str	r3, [r7, #28]
      break;
 8007ef2:	e003      	b.n	8007efc <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8007ef4:	2320      	movs	r3, #32
 8007ef6:	61fb      	str	r3, [r7, #28]
      break;
 8007ef8:	e000      	b.n	8007efc <HAL_SAI_Init+0x70>
      break;
 8007efa:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	689b      	ldr	r3, [r3, #8]
 8007f00:	2b03      	cmp	r3, #3
 8007f02:	d81e      	bhi.n	8007f42 <HAL_SAI_Init+0xb6>
 8007f04:	a201      	add	r2, pc, #4	@ (adr r2, 8007f0c <HAL_SAI_Init+0x80>)
 8007f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f0a:	bf00      	nop
 8007f0c:	08007f1d 	.word	0x08007f1d
 8007f10:	08007f23 	.word	0x08007f23
 8007f14:	08007f2b 	.word	0x08007f2b
 8007f18:	08007f33 	.word	0x08007f33
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	617b      	str	r3, [r7, #20]
    }
    break;
 8007f20:	e010      	b.n	8007f44 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8007f22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007f26:	617b      	str	r3, [r7, #20]
    }
    break;
 8007f28:	e00c      	b.n	8007f44 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007f2a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007f2e:	617b      	str	r3, [r7, #20]
    }
    break;
 8007f30:	e008      	b.n	8007f44 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007f32:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007f36:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8007f38:	69fb      	ldr	r3, [r7, #28]
 8007f3a:	f043 0301 	orr.w	r3, r3, #1
 8007f3e:	61fb      	str	r3, [r7, #28]
    }
    break;
 8007f40:	e000      	b.n	8007f44 <HAL_SAI_Init+0xb8>
    default:
      break;
 8007f42:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4a85      	ldr	r2, [pc, #532]	@ (8008160 <HAL_SAI_Init+0x2d4>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d004      	beq.n	8007f58 <HAL_SAI_Init+0xcc>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4a84      	ldr	r2, [pc, #528]	@ (8008164 <HAL_SAI_Init+0x2d8>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d103      	bne.n	8007f60 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8007f58:	4a83      	ldr	r2, [pc, #524]	@ (8008168 <HAL_SAI_Init+0x2dc>)
 8007f5a:	69fb      	ldr	r3, [r7, #28]
 8007f5c:	6013      	str	r3, [r2, #0]
 8007f5e:	e002      	b.n	8007f66 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8007f60:	4a82      	ldr	r2, [pc, #520]	@ (800816c <HAL_SAI_Init+0x2e0>)
 8007f62:	69fb      	ldr	r3, [r7, #28]
 8007f64:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	69db      	ldr	r3, [r3, #28]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d04c      	beq.n	8008008 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	4a7a      	ldr	r2, [pc, #488]	@ (8008160 <HAL_SAI_Init+0x2d4>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d004      	beq.n	8007f86 <HAL_SAI_Init+0xfa>
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	4a78      	ldr	r2, [pc, #480]	@ (8008164 <HAL_SAI_Init+0x2d8>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d104      	bne.n	8007f90 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8007f86:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8007f8a:	f7ff fe3f 	bl	8007c0c <HAL_RCCEx_GetPeriphCLKFreq>
 8007f8e:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4a76      	ldr	r2, [pc, #472]	@ (8008170 <HAL_SAI_Init+0x2e4>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d004      	beq.n	8007fa4 <HAL_SAI_Init+0x118>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	4a75      	ldr	r2, [pc, #468]	@ (8008174 <HAL_SAI_Init+0x2e8>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d104      	bne.n	8007fae <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8007fa4:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8007fa8:	f7ff fe30 	bl	8007c0c <HAL_RCCEx_GetPeriphCLKFreq>
 8007fac:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8007fae:	693a      	ldr	r2, [r7, #16]
 8007fb0:	4613      	mov	r3, r2
 8007fb2:	009b      	lsls	r3, r3, #2
 8007fb4:	4413      	add	r3, r2
 8007fb6:	005b      	lsls	r3, r3, #1
 8007fb8:	461a      	mov	r2, r3
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	69db      	ldr	r3, [r3, #28]
 8007fbe:	025b      	lsls	r3, r3, #9
 8007fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fc4:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	4a6b      	ldr	r2, [pc, #428]	@ (8008178 <HAL_SAI_Init+0x2ec>)
 8007fca:	fba2 2303 	umull	r2, r3, r2, r3
 8007fce:	08da      	lsrs	r2, r3, #3
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 8007fd4:	68f9      	ldr	r1, [r7, #12]
 8007fd6:	4b68      	ldr	r3, [pc, #416]	@ (8008178 <HAL_SAI_Init+0x2ec>)
 8007fd8:	fba3 2301 	umull	r2, r3, r3, r1
 8007fdc:	08da      	lsrs	r2, r3, #3
 8007fde:	4613      	mov	r3, r2
 8007fe0:	009b      	lsls	r3, r3, #2
 8007fe2:	4413      	add	r3, r2
 8007fe4:	005b      	lsls	r3, r3, #1
 8007fe6:	1aca      	subs	r2, r1, r3
 8007fe8:	2a08      	cmp	r2, #8
 8007fea:	d904      	bls.n	8007ff6 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6a1b      	ldr	r3, [r3, #32]
 8007ff0:	1c5a      	adds	r2, r3, #1
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ffa:	2b04      	cmp	r3, #4
 8007ffc:	d104      	bne.n	8008008 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6a1b      	ldr	r3, [r3, #32]
 8008002:	085a      	lsrs	r2, r3, #1
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	685b      	ldr	r3, [r3, #4]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d003      	beq.n	8008018 <HAL_SAI_Init+0x18c>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	685b      	ldr	r3, [r3, #4]
 8008014:	2b02      	cmp	r3, #2
 8008016:	d109      	bne.n	800802c <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800801c:	2b01      	cmp	r3, #1
 800801e:	d101      	bne.n	8008024 <HAL_SAI_Init+0x198>
 8008020:	2300      	movs	r3, #0
 8008022:	e001      	b.n	8008028 <HAL_SAI_Init+0x19c>
 8008024:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008028:	61bb      	str	r3, [r7, #24]
 800802a:	e008      	b.n	800803e <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008030:	2b01      	cmp	r3, #1
 8008032:	d102      	bne.n	800803a <HAL_SAI_Init+0x1ae>
 8008034:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008038:	e000      	b.n	800803c <HAL_SAI_Init+0x1b0>
 800803a:	2300      	movs	r3, #0
 800803c:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	6819      	ldr	r1, [r3, #0]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681a      	ldr	r2, [r3, #0]
 8008048:	4b4c      	ldr	r3, [pc, #304]	@ (800817c <HAL_SAI_Init+0x2f0>)
 800804a:	400b      	ands	r3, r1
 800804c:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	6819      	ldr	r1, [r3, #0]
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	685a      	ldr	r2, [r3, #4]
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800805c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008062:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008068:	431a      	orrs	r2, r3
 800806a:	69bb      	ldr	r3, [r7, #24]
 800806c:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800806e:	697b      	ldr	r3, [r7, #20]
 8008070:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                               \
 8008076:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	691b      	ldr	r3, [r3, #16]
 800807c:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008082:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6a1b      	ldr	r3, [r3, #32]
 8008088:	051b      	lsls	r3, r3, #20
 800808a:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	430a      	orrs	r2, r1
 8008092:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	6859      	ldr	r1, [r3, #4]
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681a      	ldr	r2, [r3, #0]
 800809e:	4b38      	ldr	r3, [pc, #224]	@ (8008180 <HAL_SAI_Init+0x2f4>)
 80080a0:	400b      	ands	r3, r1
 80080a2:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	6859      	ldr	r1, [r3, #4]
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	699a      	ldr	r2, [r3, #24]
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080b2:	431a      	orrs	r2, r3
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080b8:	431a      	orrs	r2, r3
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	430a      	orrs	r2, r1
 80080c0:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	6899      	ldr	r1, [r3, #8]
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681a      	ldr	r2, [r3, #0]
 80080cc:	4b2d      	ldr	r3, [pc, #180]	@ (8008184 <HAL_SAI_Init+0x2f8>)
 80080ce:	400b      	ands	r3, r1
 80080d0:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	6899      	ldr	r1, [r3, #8]
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080dc:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80080e2:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 80080e8:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 80080ee:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080f4:	3b01      	subs	r3, #1
 80080f6:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 80080f8:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	430a      	orrs	r2, r1
 8008100:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	68d9      	ldr	r1, [r3, #12]
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681a      	ldr	r2, [r3, #0]
 800810c:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8008110:	400b      	ands	r3, r1
 8008112:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	68d9      	ldr	r1, [r3, #12]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008122:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008128:	041b      	lsls	r3, r3, #16
 800812a:	431a      	orrs	r2, r3
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008130:	3b01      	subs	r3, #1
 8008132:	021b      	lsls	r3, r3, #8
 8008134:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	430a      	orrs	r2, r1
 800813c:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2200      	movs	r2, #0
 8008142:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2201      	movs	r2, #1
 800814a:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2200      	movs	r2, #0
 8008152:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 8008156:	2300      	movs	r3, #0
}
 8008158:	4618      	mov	r0, r3
 800815a:	3720      	adds	r7, #32
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}
 8008160:	40015804 	.word	0x40015804
 8008164:	40015824 	.word	0x40015824
 8008168:	40015800 	.word	0x40015800
 800816c:	40015c00 	.word	0x40015c00
 8008170:	40015c04 	.word	0x40015c04
 8008174:	40015c24 	.word	0x40015c24
 8008178:	cccccccd 	.word	0xcccccccd
 800817c:	ff05c010 	.word	0xff05c010
 8008180:	ffff1ff0 	.word	0xffff1ff0
 8008184:	fff88000 	.word	0xfff88000

08008188 <HAL_SAI_DeInit>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DeInit(SAI_HandleTypeDef *hsai)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b082      	sub	sp, #8
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d101      	bne.n	800819a <HAL_SAI_DeInit+0x12>
  {
    return HAL_ERROR;
 8008196:	2301      	movs	r3, #1
 8008198:	e027      	b.n	80081ea <HAL_SAI_DeInit+0x62>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2202      	movs	r2, #2
 800819e:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	2200      	movs	r2, #0
 80081a8:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f04f 32ff 	mov.w	r2, #4294967295
 80081b2:	619a      	str	r2, [r3, #24]

  /* Disable the SAI */
  SAI_Disable(hsai);
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f000 f961 	bl	800847c <SAI_Disable>

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	685a      	ldr	r2, [r3, #4]
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f042 0208 	orr.w	r2, r2, #8
 80081c8:	605a      	str	r2, [r3, #4]
  {
    hsai->MspDeInitCallback = HAL_SAI_MspDeInit;
  }
  hsai->MspDeInitCallback(hsai);
#else
  HAL_SAI_MspDeInit(hsai);
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f7f9 ff1a 	bl	8002004 <HAL_SAI_MspDeInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2200      	movs	r2, #0
 80081d4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_RESET;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2200      	movs	r2, #0
 80081dc:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2200      	movs	r2, #0
 80081e4:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 80081e8:	2300      	movs	r3, #0
}
 80081ea:	4618      	mov	r0, r3
 80081ec:	3708      	adds	r7, #8
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}

080081f2 <HAL_SAI_DMAStop>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DMAStop(SAI_HandleTypeDef *hsai)
{
 80081f2:	b580      	push	{r7, lr}
 80081f4:	b084      	sub	sp, #16
 80081f6:	af00      	add	r7, sp, #0
 80081f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80081fa:	2300      	movs	r3, #0
 80081fc:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8008204:	2b01      	cmp	r3, #1
 8008206:	d101      	bne.n	800820c <HAL_SAI_DMAStop+0x1a>
 8008208:	2302      	movs	r3, #2
 800820a:	e061      	b.n	80082d0 <HAL_SAI_DMAStop+0xde>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2201      	movs	r2, #1
 8008210:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  /* Disable SAI peripheral */
  SAI_Disable(hsai);
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f000 f931 	bl	800847c <SAI_Disable>

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	681a      	ldr	r2, [r3, #0]
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8008228:	601a      	str	r2, [r3, #0]

  /* Abort the SAI Tx DMA Stream */
  if ((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800822e:	2b00      	cmp	r3, #0
 8008230:	d01c      	beq.n	800826c <HAL_SAI_DMAStop+0x7a>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8008238:	b2db      	uxtb	r3, r3
 800823a:	2b12      	cmp	r3, #18
 800823c:	d116      	bne.n	800826c <HAL_SAI_DMAStop+0x7a>
  {
    if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008242:	4618      	mov	r0, r3
 8008244:	f7fc ff0a 	bl	800505c <HAL_DMA_Abort>
 8008248:	4603      	mov	r3, r0
 800824a:	2b00      	cmp	r3, #0
 800824c:	d00e      	beq.n	800826c <HAL_SAI_DMAStop+0x7a>
    {
      /* If the DMA Tx errorCode is different from DMA No Transfer then return Error */
      if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008252:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008254:	2b80      	cmp	r3, #128	@ 0x80
 8008256:	d009      	beq.n	800826c <HAL_SAI_DMAStop+0x7a>
      {
        status = HAL_ERROR;
 8008258:	2301      	movs	r3, #1
 800825a:	73fb      	strb	r3, [r7, #15]
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008262:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }
    }
  }

  /* Abort the SAI Rx DMA Stream */
  if ((hsai->hdmarx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_RX))
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008270:	2b00      	cmp	r3, #0
 8008272:	d01c      	beq.n	80082ae <HAL_SAI_DMAStop+0xbc>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800827a:	b2db      	uxtb	r3, r3
 800827c:	2b22      	cmp	r3, #34	@ 0x22
 800827e:	d116      	bne.n	80082ae <HAL_SAI_DMAStop+0xbc>
  {
    if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008284:	4618      	mov	r0, r3
 8008286:	f7fc fee9 	bl	800505c <HAL_DMA_Abort>
 800828a:	4603      	mov	r3, r0
 800828c:	2b00      	cmp	r3, #0
 800828e:	d00e      	beq.n	80082ae <HAL_SAI_DMAStop+0xbc>
    {
      /* If the DMA Rx errorCode is different from DMA No Transfer then return Error */
      if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008294:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008296:	2b80      	cmp	r3, #128	@ 0x80
 8008298:	d009      	beq.n	80082ae <HAL_SAI_DMAStop+0xbc>
      {
        status = HAL_ERROR;
 800829a:	2301      	movs	r3, #1
 800829c:	73fb      	strb	r3, [r7, #15]
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082a4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }
    }
  }

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	685a      	ldr	r2, [r3, #4]
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f042 0208 	orr.w	r2, r2, #8
 80082bc:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2201      	movs	r2, #1
 80082c2:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2200      	movs	r2, #0
 80082ca:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return status;
 80082ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80082d0:	4618      	mov	r0, r3
 80082d2:	3710      	adds	r7, #16
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}

080082d8 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b084      	sub	sp, #16
 80082dc:	af00      	add	r7, sp, #0
 80082de:	60f8      	str	r0, [r7, #12]
 80082e0:	60b9      	str	r1, [r7, #8]
 80082e2:	4613      	mov	r3, r2
 80082e4:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0))
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d002      	beq.n	80082f2 <HAL_SAI_Receive_DMA+0x1a>
 80082ec:	88fb      	ldrh	r3, [r7, #6]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d101      	bne.n	80082f6 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 80082f2:	2301      	movs	r3, #1
 80082f4:	e074      	b.n	80083e0 <HAL_SAI_Receive_DMA+0x108>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80082fc:	b2db      	uxtb	r3, r3
 80082fe:	2b01      	cmp	r3, #1
 8008300:	d16d      	bne.n	80083de <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8008308:	2b01      	cmp	r3, #1
 800830a:	d101      	bne.n	8008310 <HAL_SAI_Receive_DMA+0x38>
 800830c:	2302      	movs	r3, #2
 800830e:	e067      	b.n	80083e0 <HAL_SAI_Receive_DMA+0x108>
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	2201      	movs	r2, #1
 8008314:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    hsai->pBuffPtr = pData;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	68ba      	ldr	r2, [r7, #8]
 800831c:	665a      	str	r2, [r3, #100]	@ 0x64
    hsai->XferSize = Size;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	88fa      	ldrh	r2, [r7, #6]
 8008322:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    hsai->XferCount = Size;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	88fa      	ldrh	r2, [r7, #6]
 800832a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	2200      	movs	r2, #0
 8008332:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	2222      	movs	r2, #34	@ 0x22
 800833a:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008342:	4a29      	ldr	r2, [pc, #164]	@ (80083e8 <HAL_SAI_Receive_DMA+0x110>)
 8008344:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800834a:	4a28      	ldr	r2, [pc, #160]	@ (80083ec <HAL_SAI_Receive_DMA+0x114>)
 800834c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008352:	4a27      	ldr	r2, [pc, #156]	@ (80083f0 <HAL_SAI_Receive_DMA+0x118>)
 8008354:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800835a:	2200      	movs	r2, #0
 800835c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	331c      	adds	r3, #28
 8008368:	4619      	mov	r1, r3
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800836e:	461a      	mov	r2, r3
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008376:	f7fc fe11 	bl	8004f9c <HAL_DMA_Start_IT>
 800837a:	4603      	mov	r3, r0
 800837c:	2b00      	cmp	r3, #0
 800837e:	d005      	beq.n	800838c <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	2200      	movs	r2, #0
 8008384:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      return  HAL_ERROR;
 8008388:	2301      	movs	r3, #1
 800838a:	e029      	b.n	80083e0 <HAL_SAI_Receive_DMA+0x108>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800838c:	2100      	movs	r1, #0
 800838e:	68f8      	ldr	r0, [r7, #12]
 8008390:	f000 f83e 	bl	8008410 <SAI_InterruptFlag>
 8008394:	4601      	mov	r1, r0
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	691a      	ldr	r2, [r3, #16]
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	430a      	orrs	r2, r1
 80083a2:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	681a      	ldr	r2, [r3, #0]
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80083b2:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d107      	bne.n	80083d2 <HAL_SAI_Receive_DMA+0xfa>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	681a      	ldr	r2, [r3, #0]
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80083d0:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	2200      	movs	r2, #0
 80083d6:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80083da:	2300      	movs	r3, #0
 80083dc:	e000      	b.n	80083e0 <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 80083de:	2302      	movs	r3, #2
  }
}
 80083e0:	4618      	mov	r0, r3
 80083e2:	3710      	adds	r7, #16
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}
 80083e8:	0800854d 	.word	0x0800854d
 80083ec:	080084ed 	.word	0x080084ed
 80083f0:	08008569 	.word	0x08008569

080083f4 <HAL_SAI_GetState>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL state
  */
HAL_SAI_StateTypeDef HAL_SAI_GetState(const SAI_HandleTypeDef *hsai)
{
 80083f4:	b480      	push	{r7}
 80083f6:	b083      	sub	sp, #12
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
  return hsai->State;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8008402:	b2db      	uxtb	r3, r3
}
 8008404:	4618      	mov	r0, r3
 8008406:	370c      	adds	r7, #12
 8008408:	46bd      	mov	sp, r7
 800840a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840e:	4770      	bx	lr

08008410 <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, uint32_t mode)
{
 8008410:	b480      	push	{r7}
 8008412:	b085      	sub	sp, #20
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
 8008418:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800841a:	2301      	movs	r3, #1
 800841c:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	2b01      	cmp	r3, #1
 8008422:	d103      	bne.n	800842c <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	f043 0308 	orr.w	r3, r3, #8
 800842a:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008430:	2b08      	cmp	r3, #8
 8008432:	d10b      	bne.n	800844c <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8008438:	2b03      	cmp	r3, #3
 800843a:	d003      	beq.n	8008444 <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	685b      	ldr	r3, [r3, #4]
 8008440:	2b01      	cmp	r3, #1
 8008442:	d103      	bne.n	800844c <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	f043 0310 	orr.w	r3, r3, #16
 800844a:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	685b      	ldr	r3, [r3, #4]
 8008450:	2b03      	cmp	r3, #3
 8008452:	d003      	beq.n	800845c <SAI_InterruptFlag+0x4c>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	685b      	ldr	r3, [r3, #4]
 8008458:	2b02      	cmp	r3, #2
 800845a:	d104      	bne.n	8008466 <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8008462:	60fb      	str	r3, [r7, #12]
 8008464:	e003      	b.n	800846e <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	f043 0304 	orr.w	r3, r3, #4
 800846c:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800846e:	68fb      	ldr	r3, [r7, #12]
}
 8008470:	4618      	mov	r0, r3
 8008472:	3714      	adds	r7, #20
 8008474:	46bd      	mov	sp, r7
 8008476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847a:	4770      	bx	lr

0800847c <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800847c:	b480      	push	{r7}
 800847e:	b085      	sub	sp, #20
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8008484:	4b17      	ldr	r3, [pc, #92]	@ (80084e4 <SAI_Disable+0x68>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	4a17      	ldr	r2, [pc, #92]	@ (80084e8 <SAI_Disable+0x6c>)
 800848a:	fba2 2303 	umull	r2, r3, r2, r3
 800848e:	0b1b      	lsrs	r3, r3, #12
 8008490:	009b      	lsls	r3, r3, #2
 8008492:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8008494:	2300      	movs	r3, #0
 8008496:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	681a      	ldr	r2, [r3, #0]
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80084a6:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	1e5a      	subs	r2, r3, #1
 80084ac:	60fa      	str	r2, [r7, #12]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d10a      	bne.n	80084c8 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80084b8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 80084c2:	2303      	movs	r3, #3
 80084c4:	72fb      	strb	r3, [r7, #11]
      break;
 80084c6:	e006      	b.n	80084d6 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d1e8      	bne.n	80084a8 <SAI_Disable+0x2c>

  return status;
 80084d6:	7afb      	ldrb	r3, [r7, #11]
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3714      	adds	r7, #20
 80084dc:	46bd      	mov	sp, r7
 80084de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e2:	4770      	bx	lr
 80084e4:	20000004 	.word	0x20000004
 80084e8:	95cbec1b 	.word	0x95cbec1b

080084ec <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b084      	sub	sp, #16
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084f8:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	69db      	ldr	r3, [r3, #28]
 80084fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008502:	d01c      	beq.n	800853e <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	681a      	ldr	r2, [r3, #0]
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8008512:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	2200      	movs	r2, #0
 8008518:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800851c:	2100      	movs	r1, #0
 800851e:	68f8      	ldr	r0, [r7, #12]
 8008520:	f7ff ff76 	bl	8008410 <SAI_InterruptFlag>
 8008524:	4603      	mov	r3, r0
 8008526:	43d9      	mvns	r1, r3
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	691a      	ldr	r2, [r3, #16]
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	400a      	ands	r2, r1
 8008534:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	2201      	movs	r2, #1
 800853a:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800853e:	68f8      	ldr	r0, [r7, #12]
 8008540:	f7fc f800 	bl	8004544 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8008544:	bf00      	nop
 8008546:	3710      	adds	r7, #16
 8008548:	46bd      	mov	sp, r7
 800854a:	bd80      	pop	{r7, pc}

0800854c <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b084      	sub	sp, #16
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008558:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800855a:	68f8      	ldr	r0, [r7, #12]
 800855c:	f7fb fffc 	bl	8004558 <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8008560:	bf00      	nop
 8008562:	3710      	adds	r7, #16
 8008564:	46bd      	mov	sp, r7
 8008566:	bd80      	pop	{r7, pc}

08008568 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b084      	sub	sp, #16
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008574:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800857c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800858a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800858c:	2b01      	cmp	r3, #1
 800858e:	d004      	beq.n	800859a <SAI_DMAError+0x32>
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008594:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008596:	2b01      	cmp	r3, #1
 8008598:	d112      	bne.n	80085c0 <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	681a      	ldr	r2, [r3, #0]
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80085a8:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 80085aa:	68f8      	ldr	r0, [r7, #12]
 80085ac:	f7ff ff66 	bl	800847c <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	2201      	movs	r2, #1
 80085b4:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	2200      	movs	r2, #0
 80085bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 80085c0:	68f8      	ldr	r0, [r7, #12]
 80085c2:	f7fb fdbf 	bl	8004144 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 80085c6:	bf00      	nop
 80085c8:	3710      	adds	r7, #16
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}

080085ce <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80085ce:	b580      	push	{r7, lr}
 80085d0:	b082      	sub	sp, #8
 80085d2:	af00      	add	r7, sp, #0
 80085d4:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d101      	bne.n	80085e0 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80085dc:	2301      	movs	r3, #1
 80085de:	e022      	b.n	8008626 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80085e6:	b2db      	uxtb	r3, r3
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d105      	bne.n	80085f8 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2200      	movs	r2, #0
 80085f0:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f7f9 fd58 	bl	80020a8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2203      	movs	r2, #3
 80085fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f000 f815 	bl	8008630 <HAL_SD_InitCard>
 8008606:	4603      	mov	r3, r0
 8008608:	2b00      	cmp	r3, #0
 800860a:	d001      	beq.n	8008610 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800860c:	2301      	movs	r3, #1
 800860e:	e00a      	b.n	8008626 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2200      	movs	r2, #0
 8008614:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2200      	movs	r2, #0
 800861a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2201      	movs	r2, #1
 8008620:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008624:	2300      	movs	r3, #0
}
 8008626:	4618      	mov	r0, r3
 8008628:	3708      	adds	r7, #8
 800862a:	46bd      	mov	sp, r7
 800862c:	bd80      	pop	{r7, pc}
	...

08008630 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008630:	b5b0      	push	{r4, r5, r7, lr}
 8008632:	b08e      	sub	sp, #56	@ 0x38
 8008634:	af04      	add	r7, sp, #16
 8008636:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008638:	2300      	movs	r3, #0
 800863a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800863c:	2300      	movs	r3, #0
 800863e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8008640:	2300      	movs	r3, #0
 8008642:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8008644:	2300      	movs	r3, #0
 8008646:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008648:	2300      	movs	r3, #0
 800864a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800864c:	2376      	movs	r3, #118	@ 0x76
 800864e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681d      	ldr	r5, [r3, #0]
 8008654:	466c      	mov	r4, sp
 8008656:	f107 0314 	add.w	r3, r7, #20
 800865a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800865e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008662:	f107 0308 	add.w	r3, r7, #8
 8008666:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008668:	4628      	mov	r0, r5
 800866a:	f001 fddf 	bl	800a22c <SDMMC_Init>
 800866e:	4603      	mov	r3, r0
 8008670:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8008674:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008678:	2b00      	cmp	r3, #0
 800867a:	d001      	beq.n	8008680 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800867c:	2301      	movs	r3, #1
 800867e:	e059      	b.n	8008734 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	685a      	ldr	r2, [r3, #4]
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800868e:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4618      	mov	r0, r3
 8008696:	f001 fe13 	bl	800a2c0 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	685a      	ldr	r2, [r3, #4]
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80086a8:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80086aa:	2002      	movs	r0, #2
 80086ac:	f7fc f942 	bl	8004934 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f000 ff59 	bl	8009568 <SD_PowerON>
 80086b6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80086b8:	6a3b      	ldr	r3, [r7, #32]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d00b      	beq.n	80086d6 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2201      	movs	r2, #1
 80086c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80086ca:	6a3b      	ldr	r3, [r7, #32]
 80086cc:	431a      	orrs	r2, r3
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80086d2:	2301      	movs	r3, #1
 80086d4:	e02e      	b.n	8008734 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f000 fe78 	bl	80093cc <SD_InitCard>
 80086dc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80086de:	6a3b      	ldr	r3, [r7, #32]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d00b      	beq.n	80086fc <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2201      	movs	r2, #1
 80086e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80086f0:	6a3b      	ldr	r3, [r7, #32]
 80086f2:	431a      	orrs	r2, r3
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80086f8:	2301      	movs	r3, #1
 80086fa:	e01b      	b.n	8008734 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008704:	4618      	mov	r0, r3
 8008706:	f001 fe6d 	bl	800a3e4 <SDMMC_CmdBlockLength>
 800870a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800870c:	6a3b      	ldr	r3, [r7, #32]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d00f      	beq.n	8008732 <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	4a09      	ldr	r2, [pc, #36]	@ (800873c <HAL_SD_InitCard+0x10c>)
 8008718:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800871e:	6a3b      	ldr	r3, [r7, #32]
 8008720:	431a      	orrs	r2, r3
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2201      	movs	r2, #1
 800872a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800872e:	2301      	movs	r3, #1
 8008730:	e000      	b.n	8008734 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 8008732:	2300      	movs	r3, #0
}
 8008734:	4618      	mov	r0, r3
 8008736:	3728      	adds	r7, #40	@ 0x28
 8008738:	46bd      	mov	sp, r7
 800873a:	bdb0      	pop	{r4, r5, r7, pc}
 800873c:	004005ff 	.word	0x004005ff

08008740 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b08c      	sub	sp, #48	@ 0x30
 8008744:	af00      	add	r7, sp, #0
 8008746:	60f8      	str	r0, [r7, #12]
 8008748:	60b9      	str	r1, [r7, #8]
 800874a:	607a      	str	r2, [r7, #4]
 800874c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d107      	bne.n	8008768 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800875c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8008764:	2301      	movs	r3, #1
 8008766:	e0c3      	b.n	80088f0 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800876e:	b2db      	uxtb	r3, r3
 8008770:	2b01      	cmp	r3, #1
 8008772:	f040 80bc 	bne.w	80088ee <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	2200      	movs	r2, #0
 800877a:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800877c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	441a      	add	r2, r3
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008786:	429a      	cmp	r2, r3
 8008788:	d907      	bls.n	800879a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800878e:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8008796:	2301      	movs	r3, #1
 8008798:	e0aa      	b.n	80088f0 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	2203      	movs	r2, #3
 800879e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	2200      	movs	r2, #0
 80087a8:	62da      	str	r2, [r3, #44]	@ 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 80087b8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087be:	4a4e      	ldr	r2, [pc, #312]	@ (80088f8 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 80087c0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087c6:	4a4d      	ldr	r2, [pc, #308]	@ (80088fc <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80087c8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087ce:	2200      	movs	r2, #0
 80087d0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087d6:	2200      	movs	r2, #0
 80087d8:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087ea:	689a      	ldr	r2, [r3, #8]
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	430a      	orrs	r2, r1
 80087f4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	3380      	adds	r3, #128	@ 0x80
 8008800:	4619      	mov	r1, r3
 8008802:	68ba      	ldr	r2, [r7, #8]
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	025b      	lsls	r3, r3, #9
 8008808:	089b      	lsrs	r3, r3, #2
 800880a:	f7fc fbc7 	bl	8004f9c <HAL_DMA_Start_IT>
 800880e:	4603      	mov	r3, r0
 8008810:	2b00      	cmp	r3, #0
 8008812:	d017      	beq.n	8008844 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 8008822:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	4a35      	ldr	r2, [pc, #212]	@ (8008900 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800882a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008830:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	2201      	movs	r2, #1
 800883c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8008840:	2301      	movs	r3, #1
 8008842:	e055      	b.n	80088f0 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f042 0208 	orr.w	r2, r2, #8
 8008852:	62da      	str	r2, [r3, #44]	@ 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008858:	2b01      	cmp	r3, #1
 800885a:	d002      	beq.n	8008862 <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 800885c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800885e:	025b      	lsls	r3, r3, #9
 8008860:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008862:	f04f 33ff 	mov.w	r3, #4294967295
 8008866:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	025b      	lsls	r3, r3, #9
 800886c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800886e:	2390      	movs	r3, #144	@ 0x90
 8008870:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008872:	2302      	movs	r3, #2
 8008874:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008876:	2300      	movs	r3, #0
 8008878:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800887a:	2301      	movs	r3, #1
 800887c:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f107 0210 	add.w	r2, r7, #16
 8008886:	4611      	mov	r1, r2
 8008888:	4618      	mov	r0, r3
 800888a:	f001 fd7f 	bl	800a38c <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	2b01      	cmp	r3, #1
 8008892:	d90a      	bls.n	80088aa <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	2282      	movs	r2, #130	@ 0x82
 8008898:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80088a0:	4618      	mov	r0, r3
 80088a2:	f001 fde3 	bl	800a46c <SDMMC_CmdReadMultiBlock>
 80088a6:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80088a8:	e009      	b.n	80088be <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	2281      	movs	r2, #129	@ 0x81
 80088ae:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80088b6:	4618      	mov	r0, r3
 80088b8:	f001 fdb6 	bl	800a428 <SDMMC_CmdReadSingleBlock>
 80088bc:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80088be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d012      	beq.n	80088ea <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	4a0d      	ldr	r2, [pc, #52]	@ (8008900 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80088ca:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80088d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088d2:	431a      	orrs	r2, r3
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	2201      	movs	r2, #1
 80088dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	2200      	movs	r2, #0
 80088e4:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 80088e6:	2301      	movs	r3, #1
 80088e8:	e002      	b.n	80088f0 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 80088ea:	2300      	movs	r3, #0
 80088ec:	e000      	b.n	80088f0 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 80088ee:	2302      	movs	r3, #2
  }
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	3730      	adds	r7, #48	@ 0x30
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd80      	pop	{r7, pc}
 80088f8:	080091db 	.word	0x080091db
 80088fc:	0800924d 	.word	0x0800924d
 8008900:	004005ff 	.word	0x004005ff

08008904 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b08c      	sub	sp, #48	@ 0x30
 8008908:	af00      	add	r7, sp, #0
 800890a:	60f8      	str	r0, [r7, #12]
 800890c:	60b9      	str	r1, [r7, #8]
 800890e:	607a      	str	r2, [r7, #4]
 8008910:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d107      	bne.n	800892c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008920:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8008928:	2301      	movs	r3, #1
 800892a:	e0c6      	b.n	8008aba <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008932:	b2db      	uxtb	r3, r3
 8008934:	2b01      	cmp	r3, #1
 8008936:	f040 80bf 	bne.w	8008ab8 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	2200      	movs	r2, #0
 800893e:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008940:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	441a      	add	r2, r3
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800894a:	429a      	cmp	r2, r3
 800894c:	d907      	bls.n	800895e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008952:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800895a:	2301      	movs	r3, #1
 800895c:	e0ad      	b.n	8008aba <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	2203      	movs	r2, #3
 8008962:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	2200      	movs	r2, #0
 800896c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f042 021a 	orr.w	r2, r2, #26
 800897c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008982:	4a50      	ldr	r2, [pc, #320]	@ (8008ac4 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8008984:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800898a:	4a4f      	ldr	r2, [pc, #316]	@ (8008ac8 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800898c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008992:	2200      	movs	r2, #0
 8008994:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800899a:	2b01      	cmp	r3, #1
 800899c:	d002      	beq.n	80089a4 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800899e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089a0:	025b      	lsls	r3, r3, #9
 80089a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	2b01      	cmp	r3, #1
 80089a8:	d90a      	bls.n	80089c0 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	22a0      	movs	r2, #160	@ 0xa0
 80089ae:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80089b6:	4618      	mov	r0, r3
 80089b8:	f001 fd9c 	bl	800a4f4 <SDMMC_CmdWriteMultiBlock>
 80089bc:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80089be:	e009      	b.n	80089d4 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	2290      	movs	r2, #144	@ 0x90
 80089c4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80089cc:	4618      	mov	r0, r3
 80089ce:	f001 fd6f 	bl	800a4b0 <SDMMC_CmdWriteSingleBlock>
 80089d2:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80089d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d012      	beq.n	8008a00 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	4a3b      	ldr	r2, [pc, #236]	@ (8008acc <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80089e0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80089e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089e8:	431a      	orrs	r2, r3
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	2201      	movs	r2, #1
 80089f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	2200      	movs	r2, #0
 80089fa:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80089fc:	2301      	movs	r3, #1
 80089fe:	e05c      	b.n	8008aba <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f042 0208 	orr.w	r2, r2, #8
 8008a0e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a14:	2240      	movs	r2, #64	@ 0x40
 8008a16:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a28:	689a      	ldr	r2, [r3, #8]
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	430a      	orrs	r2, r1
 8008a32:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8008a38:	68b9      	ldr	r1, [r7, #8]
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	3380      	adds	r3, #128	@ 0x80
 8008a40:	461a      	mov	r2, r3
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	025b      	lsls	r3, r3, #9
 8008a46:	089b      	lsrs	r3, r3, #2
 8008a48:	f7fc faa8 	bl	8004f9c <HAL_DMA_Start_IT>
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d01a      	beq.n	8008a88 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f022 021a 	bic.w	r2, r2, #26
 8008a60:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	4a19      	ldr	r2, [pc, #100]	@ (8008acc <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8008a68:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a6e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	2201      	movs	r2, #1
 8008a7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	2200      	movs	r2, #0
 8008a82:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8008a84:	2301      	movs	r3, #1
 8008a86:	e018      	b.n	8008aba <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008a88:	f04f 33ff 	mov.w	r3, #4294967295
 8008a8c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	025b      	lsls	r3, r3, #9
 8008a92:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008a94:	2390      	movs	r3, #144	@ 0x90
 8008a96:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8008a98:	2300      	movs	r3, #0
 8008a9a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8008aa0:	2301      	movs	r3, #1
 8008aa2:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f107 0210 	add.w	r2, r7, #16
 8008aac:	4611      	mov	r1, r2
 8008aae:	4618      	mov	r0, r3
 8008ab0:	f001 fc6c 	bl	800a38c <SDMMC_ConfigData>

      return HAL_OK;
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	e000      	b.n	8008aba <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 8008ab8:	2302      	movs	r3, #2
  }
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	3730      	adds	r7, #48	@ 0x30
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}
 8008ac2:	bf00      	nop
 8008ac4:	080091b1 	.word	0x080091b1
 8008ac8:	0800924d 	.word	0x0800924d
 8008acc:	004005ff 	.word	0x004005ff

08008ad0 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b084      	sub	sp, #16
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008adc:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ae4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d008      	beq.n	8008afe <HAL_SD_IRQHandler+0x2e>
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	f003 0308 	and.w	r3, r3, #8
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d003      	beq.n	8008afe <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f000 fdec 	bl	80096d4 <SD_Read_IT>
 8008afc:	e15a      	b.n	8008db4 <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	f000 808d 	beq.w	8008c28 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008b16:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681a      	ldr	r2, [r3, #0]
 8008b22:	4b9a      	ldr	r3, [pc, #616]	@ (8008d8c <HAL_SD_IRQHandler+0x2bc>)
 8008b24:	400b      	ands	r3, r1
 8008b26:	63d3      	str	r3, [r2, #60]	@ 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f022 0201 	bic.w	r2, r2, #1
 8008b36:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	f003 0308 	and.w	r3, r3, #8
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d039      	beq.n	8008bb6 <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	f003 0302 	and.w	r3, r3, #2
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d104      	bne.n	8008b56 <HAL_SD_IRQHandler+0x86>
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	f003 0320 	and.w	r3, r3, #32
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d011      	beq.n	8008b7a <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f001 fcec 	bl	800a538 <SDMMC_CmdStopTransfer>
 8008b60:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d008      	beq.n	8008b7a <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	431a      	orrs	r2, r3
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	f000 f921 	bl	8008dbc <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	f240 523a 	movw	r2, #1338	@ 0x53a
 8008b82:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2201      	movs	r2, #1
 8008b88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	f003 0301 	and.w	r3, r3, #1
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d104      	bne.n	8008ba6 <HAL_SD_IRQHandler+0xd6>
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	f003 0302 	and.w	r3, r3, #2
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d003      	beq.n	8008bae <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f002 fc76 	bl	800b498 <HAL_SD_RxCpltCallback>
 8008bac:	e102      	b.n	8008db4 <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f002 fc68 	bl	800b484 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008bb4:	e0fe      	b.n	8008db4 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	f000 80f9 	beq.w	8008db4 <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	f003 0320 	and.w	r3, r3, #32
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d011      	beq.n	8008bf0 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	f001 fcb1 	bl	800a538 <SDMMC_CmdStopTransfer>
 8008bd6:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d008      	beq.n	8008bf0 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008be2:	68bb      	ldr	r3, [r7, #8]
 8008be4:	431a      	orrs	r2, r3
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f000 f8e6 	bl	8008dbc <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	f003 0301 	and.w	r3, r3, #1
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	f040 80dc 	bne.w	8008db4 <HAL_SD_IRQHandler+0x2e4>
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	f003 0302 	and.w	r3, r3, #2
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	f040 80d6 	bne.w	8008db4 <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f022 0208 	bic.w	r2, r2, #8
 8008c16:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2201      	movs	r2, #1
 8008c1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f002 fc2f 	bl	800b484 <HAL_SD_TxCpltCallback>
}
 8008c26:	e0c5      	b.n	8008db4 <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d008      	beq.n	8008c48 <HAL_SD_IRQHandler+0x178>
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	f003 0308 	and.w	r3, r3, #8
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d003      	beq.n	8008c48 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f000 fd98 	bl	8009776 <SD_Write_IT>
 8008c46:	e0b5      	b.n	8008db4 <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c4e:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	f000 80ae 	beq.w	8008db4 <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c5e:	f003 0302 	and.w	r3, r3, #2
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d005      	beq.n	8008c72 <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c6a:	f043 0202 	orr.w	r2, r3, #2
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c78:	f003 0308 	and.w	r3, r3, #8
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d005      	beq.n	8008c8c <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c84:	f043 0208 	orr.w	r2, r3, #8
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c92:	f003 0320 	and.w	r3, r3, #32
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d005      	beq.n	8008ca6 <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c9e:	f043 0220 	orr.w	r2, r3, #32
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008cac:	f003 0310 	and.w	r3, r3, #16
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d005      	beq.n	8008cc0 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cb8:	f043 0210 	orr.w	r2, r3, #16
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f240 523a 	movw	r2, #1338	@ 0x53a
 8008cc8:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8008cd8:	63da      	str	r2, [r3, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f001 fc2a 	bl	800a538 <SDMMC_CmdStopTransfer>
 8008ce4:	4602      	mov	r2, r0
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cea:	431a      	orrs	r2, r3
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	f003 0308 	and.w	r3, r3, #8
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d00a      	beq.n	8008d10 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2201      	movs	r2, #1
 8008cfe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2200      	movs	r2, #0
 8008d06:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f000 f857 	bl	8008dbc <HAL_SD_ErrorCallback>
}
 8008d0e:	e051      	b.n	8008db4 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d04c      	beq.n	8008db4 <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	f003 0310 	and.w	r3, r3, #16
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d104      	bne.n	8008d2e <HAL_SD_IRQHandler+0x25e>
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	f003 0320 	and.w	r3, r3, #32
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d011      	beq.n	8008d52 <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d32:	4a17      	ldr	r2, [pc, #92]	@ (8008d90 <HAL_SD_IRQHandler+0x2c0>)
 8008d34:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f7fc f9fe 	bl	800513c <HAL_DMA_Abort_IT>
 8008d40:	4603      	mov	r3, r0
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d036      	beq.n	8008db4 <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f000 fad0 	bl	80092f0 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8008d50:	e030      	b.n	8008db4 <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	f003 0301 	and.w	r3, r3, #1
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d104      	bne.n	8008d66 <HAL_SD_IRQHandler+0x296>
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	f003 0302 	and.w	r3, r3, #2
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d018      	beq.n	8008d98 <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d6a:	4a0a      	ldr	r2, [pc, #40]	@ (8008d94 <HAL_SD_IRQHandler+0x2c4>)
 8008d6c:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d72:	4618      	mov	r0, r3
 8008d74:	f7fc f9e2 	bl	800513c <HAL_DMA_Abort_IT>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d01a      	beq.n	8008db4 <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d82:	4618      	mov	r0, r3
 8008d84:	f000 faeb 	bl	800935e <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8008d88:	e014      	b.n	8008db4 <HAL_SD_IRQHandler+0x2e4>
 8008d8a:	bf00      	nop
 8008d8c:	ffff3ec5 	.word	0xffff3ec5
 8008d90:	080092f1 	.word	0x080092f1
 8008d94:	0800935f 	.word	0x0800935f
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2201      	movs	r2, #1
 8008da2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2200      	movs	r2, #0
 8008daa:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f002 fb5f 	bl	800b470 <HAL_SD_AbortCallback>
}
 8008db2:	e7ff      	b.n	8008db4 <HAL_SD_IRQHandler+0x2e4>
 8008db4:	bf00      	nop
 8008db6:	3710      	adds	r7, #16
 8008db8:	46bd      	mov	sp, r7
 8008dba:	bd80      	pop	{r7, pc}

08008dbc <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8008dbc:	b480      	push	{r7}
 8008dbe:	b083      	sub	sp, #12
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8008dc4:	bf00      	nop
 8008dc6:	370c      	adds	r7, #12
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dce:	4770      	bx	lr

08008dd0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	b083      	sub	sp, #12
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
 8008dd8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008dde:	0f9b      	lsrs	r3, r3, #30
 8008de0:	b2da      	uxtb	r2, r3
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008dea:	0e9b      	lsrs	r3, r3, #26
 8008dec:	b2db      	uxtb	r3, r3
 8008dee:	f003 030f 	and.w	r3, r3, #15
 8008df2:	b2da      	uxtb	r2, r3
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008dfc:	0e1b      	lsrs	r3, r3, #24
 8008dfe:	b2db      	uxtb	r3, r3
 8008e00:	f003 0303 	and.w	r3, r3, #3
 8008e04:	b2da      	uxtb	r2, r3
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e0e:	0c1b      	lsrs	r3, r3, #16
 8008e10:	b2da      	uxtb	r2, r3
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e1a:	0a1b      	lsrs	r3, r3, #8
 8008e1c:	b2da      	uxtb	r2, r3
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e26:	b2da      	uxtb	r2, r3
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008e30:	0d1b      	lsrs	r3, r3, #20
 8008e32:	b29a      	uxth	r2, r3
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008e3c:	0c1b      	lsrs	r3, r3, #16
 8008e3e:	b2db      	uxtb	r3, r3
 8008e40:	f003 030f 	and.w	r3, r3, #15
 8008e44:	b2da      	uxtb	r2, r3
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008e4e:	0bdb      	lsrs	r3, r3, #15
 8008e50:	b2db      	uxtb	r3, r3
 8008e52:	f003 0301 	and.w	r3, r3, #1
 8008e56:	b2da      	uxtb	r2, r3
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008e60:	0b9b      	lsrs	r3, r3, #14
 8008e62:	b2db      	uxtb	r3, r3
 8008e64:	f003 0301 	and.w	r3, r3, #1
 8008e68:	b2da      	uxtb	r2, r3
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008e72:	0b5b      	lsrs	r3, r3, #13
 8008e74:	b2db      	uxtb	r3, r3
 8008e76:	f003 0301 	and.w	r3, r3, #1
 8008e7a:	b2da      	uxtb	r2, r3
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008e84:	0b1b      	lsrs	r3, r3, #12
 8008e86:	b2db      	uxtb	r3, r3
 8008e88:	f003 0301 	and.w	r3, r3, #1
 8008e8c:	b2da      	uxtb	r2, r3
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	2200      	movs	r2, #0
 8008e96:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d163      	bne.n	8008f68 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008ea4:	009a      	lsls	r2, r3, #2
 8008ea6:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8008eaa:	4013      	ands	r3, r2
 8008eac:	687a      	ldr	r2, [r7, #4]
 8008eae:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8008eb0:	0f92      	lsrs	r2, r2, #30
 8008eb2:	431a      	orrs	r2, r3
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008ebc:	0edb      	lsrs	r3, r3, #27
 8008ebe:	b2db      	uxtb	r3, r3
 8008ec0:	f003 0307 	and.w	r3, r3, #7
 8008ec4:	b2da      	uxtb	r2, r3
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008ece:	0e1b      	lsrs	r3, r3, #24
 8008ed0:	b2db      	uxtb	r3, r3
 8008ed2:	f003 0307 	and.w	r3, r3, #7
 8008ed6:	b2da      	uxtb	r2, r3
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008ee0:	0d5b      	lsrs	r3, r3, #21
 8008ee2:	b2db      	uxtb	r3, r3
 8008ee4:	f003 0307 	and.w	r3, r3, #7
 8008ee8:	b2da      	uxtb	r2, r3
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008ef2:	0c9b      	lsrs	r3, r3, #18
 8008ef4:	b2db      	uxtb	r3, r3
 8008ef6:	f003 0307 	and.w	r3, r3, #7
 8008efa:	b2da      	uxtb	r2, r3
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f04:	0bdb      	lsrs	r3, r3, #15
 8008f06:	b2db      	uxtb	r3, r3
 8008f08:	f003 0307 	and.w	r3, r3, #7
 8008f0c:	b2da      	uxtb	r2, r3
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	691b      	ldr	r3, [r3, #16]
 8008f16:	1c5a      	adds	r2, r3, #1
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	7e1b      	ldrb	r3, [r3, #24]
 8008f20:	b2db      	uxtb	r3, r3
 8008f22:	f003 0307 	and.w	r3, r3, #7
 8008f26:	3302      	adds	r3, #2
 8008f28:	2201      	movs	r2, #1
 8008f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8008f2e:	687a      	ldr	r2, [r7, #4]
 8008f30:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8008f32:	fb03 f202 	mul.w	r2, r3, r2
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	7a1b      	ldrb	r3, [r3, #8]
 8008f3e:	b2db      	uxtb	r3, r3
 8008f40:	f003 030f 	and.w	r3, r3, #15
 8008f44:	2201      	movs	r2, #1
 8008f46:	409a      	lsls	r2, r3
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f50:	687a      	ldr	r2, [r7, #4]
 8008f52:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8008f54:	0a52      	lsrs	r2, r2, #9
 8008f56:	fb03 f202 	mul.w	r2, r3, r2
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008f64:	661a      	str	r2, [r3, #96]	@ 0x60
 8008f66:	e031      	b.n	8008fcc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f6c:	2b01      	cmp	r3, #1
 8008f6e:	d11d      	bne.n	8008fac <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008f74:	041b      	lsls	r3, r3, #16
 8008f76:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f7e:	0c1b      	lsrs	r3, r3, #16
 8008f80:	431a      	orrs	r2, r3
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	691b      	ldr	r3, [r3, #16]
 8008f8a:	3301      	adds	r3, #1
 8008f8c:	029a      	lsls	r2, r3, #10
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008fa0:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	661a      	str	r2, [r3, #96]	@ 0x60
 8008faa:	e00f      	b.n	8008fcc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	4a58      	ldr	r2, [pc, #352]	@ (8009114 <HAL_SD_GetCardCSD+0x344>)
 8008fb2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fb8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2201      	movs	r2, #1
 8008fc4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008fc8:	2301      	movs	r3, #1
 8008fca:	e09d      	b.n	8009108 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008fd0:	0b9b      	lsrs	r3, r3, #14
 8008fd2:	b2db      	uxtb	r3, r3
 8008fd4:	f003 0301 	and.w	r3, r3, #1
 8008fd8:	b2da      	uxtb	r2, r3
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008fe2:	09db      	lsrs	r3, r3, #7
 8008fe4:	b2db      	uxtb	r3, r3
 8008fe6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008fea:	b2da      	uxtb	r2, r3
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008ff4:	b2db      	uxtb	r3, r3
 8008ff6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ffa:	b2da      	uxtb	r2, r3
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009004:	0fdb      	lsrs	r3, r3, #31
 8009006:	b2da      	uxtb	r2, r3
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009010:	0f5b      	lsrs	r3, r3, #29
 8009012:	b2db      	uxtb	r3, r3
 8009014:	f003 0303 	and.w	r3, r3, #3
 8009018:	b2da      	uxtb	r2, r3
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009022:	0e9b      	lsrs	r3, r3, #26
 8009024:	b2db      	uxtb	r3, r3
 8009026:	f003 0307 	and.w	r3, r3, #7
 800902a:	b2da      	uxtb	r2, r3
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009034:	0d9b      	lsrs	r3, r3, #22
 8009036:	b2db      	uxtb	r3, r3
 8009038:	f003 030f 	and.w	r3, r3, #15
 800903c:	b2da      	uxtb	r2, r3
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009046:	0d5b      	lsrs	r3, r3, #21
 8009048:	b2db      	uxtb	r3, r3
 800904a:	f003 0301 	and.w	r3, r3, #1
 800904e:	b2da      	uxtb	r2, r3
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	2200      	movs	r2, #0
 800905a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009062:	0c1b      	lsrs	r3, r3, #16
 8009064:	b2db      	uxtb	r3, r3
 8009066:	f003 0301 	and.w	r3, r3, #1
 800906a:	b2da      	uxtb	r2, r3
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009076:	0bdb      	lsrs	r3, r3, #15
 8009078:	b2db      	uxtb	r3, r3
 800907a:	f003 0301 	and.w	r3, r3, #1
 800907e:	b2da      	uxtb	r2, r3
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800908a:	0b9b      	lsrs	r3, r3, #14
 800908c:	b2db      	uxtb	r3, r3
 800908e:	f003 0301 	and.w	r3, r3, #1
 8009092:	b2da      	uxtb	r2, r3
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800909e:	0b5b      	lsrs	r3, r3, #13
 80090a0:	b2db      	uxtb	r3, r3
 80090a2:	f003 0301 	and.w	r3, r3, #1
 80090a6:	b2da      	uxtb	r2, r3
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80090b2:	0b1b      	lsrs	r3, r3, #12
 80090b4:	b2db      	uxtb	r3, r3
 80090b6:	f003 0301 	and.w	r3, r3, #1
 80090ba:	b2da      	uxtb	r2, r3
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80090c6:	0a9b      	lsrs	r3, r3, #10
 80090c8:	b2db      	uxtb	r3, r3
 80090ca:	f003 0303 	and.w	r3, r3, #3
 80090ce:	b2da      	uxtb	r2, r3
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80090da:	0a1b      	lsrs	r3, r3, #8
 80090dc:	b2db      	uxtb	r3, r3
 80090de:	f003 0303 	and.w	r3, r3, #3
 80090e2:	b2da      	uxtb	r2, r3
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80090ee:	085b      	lsrs	r3, r3, #1
 80090f0:	b2db      	uxtb	r3, r3
 80090f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80090f6:	b2da      	uxtb	r2, r3
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	2201      	movs	r2, #1
 8009102:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8009106:	2300      	movs	r3, #0
}
 8009108:	4618      	mov	r0, r3
 800910a:	370c      	adds	r7, #12
 800910c:	46bd      	mov	sp, r7
 800910e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009112:	4770      	bx	lr
 8009114:	004005ff 	.word	0x004005ff

08009118 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009118:	b480      	push	{r7}
 800911a:	b083      	sub	sp, #12
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
 8009120:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8009162:	2300      	movs	r3, #0
}
 8009164:	4618      	mov	r0, r3
 8009166:	370c      	adds	r7, #12
 8009168:	46bd      	mov	sp, r7
 800916a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916e:	4770      	bx	lr

08009170 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b086      	sub	sp, #24
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009178:	2300      	movs	r3, #0
 800917a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800917c:	f107 030c 	add.w	r3, r7, #12
 8009180:	4619      	mov	r1, r3
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f000 fa7e 	bl	8009684 <SD_SendStatus>
 8009188:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800918a:	697b      	ldr	r3, [r7, #20]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d005      	beq.n	800919c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009194:	697b      	ldr	r3, [r7, #20]
 8009196:	431a      	orrs	r2, r3
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	0a5b      	lsrs	r3, r3, #9
 80091a0:	f003 030f 	and.w	r3, r3, #15
 80091a4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80091a6:	693b      	ldr	r3, [r7, #16]
}
 80091a8:	4618      	mov	r0, r3
 80091aa:	3718      	adds	r7, #24
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bd80      	pop	{r7, pc}

080091b0 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80091b0:	b480      	push	{r7}
 80091b2:	b085      	sub	sp, #20
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091bc:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80091cc:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80091ce:	bf00      	nop
 80091d0:	3714      	adds	r7, #20
 80091d2:	46bd      	mov	sp, r7
 80091d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d8:	4770      	bx	lr

080091da <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80091da:	b580      	push	{r7, lr}
 80091dc:	b084      	sub	sp, #16
 80091de:	af00      	add	r7, sp, #0
 80091e0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091e6:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091ec:	2b82      	cmp	r3, #130	@ 0x82
 80091ee:	d111      	bne.n	8009214 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	4618      	mov	r0, r3
 80091f6:	f001 f99f 	bl	800a538 <SDMMC_CmdStopTransfer>
 80091fa:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d008      	beq.n	8009214 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009206:	68bb      	ldr	r3, [r7, #8]
 8009208:	431a      	orrs	r2, r3
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800920e:	68f8      	ldr	r0, [r7, #12]
 8009210:	f7ff fdd4 	bl	8008dbc <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f022 0208 	bic.w	r2, r2, #8
 8009222:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f240 523a 	movw	r2, #1338	@ 0x53a
 800922c:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	2201      	movs	r2, #1
 8009232:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	2200      	movs	r2, #0
 800923a:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800923c:	68f8      	ldr	r0, [r7, #12]
 800923e:	f002 f92b 	bl	800b498 <HAL_SD_RxCpltCallback>
#endif
}
 8009242:	bf00      	nop
 8009244:	3710      	adds	r7, #16
 8009246:	46bd      	mov	sp, r7
 8009248:	bd80      	pop	{r7, pc}
	...

0800924c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b086      	sub	sp, #24
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009258:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f7fc f91a 	bl	8005494 <HAL_DMA_GetError>
 8009260:	4603      	mov	r3, r0
 8009262:	2b02      	cmp	r3, #2
 8009264:	d03e      	beq.n	80092e4 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8009266:	697b      	ldr	r3, [r7, #20]
 8009268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800926a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800926c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800926e:	697b      	ldr	r3, [r7, #20]
 8009270:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009272:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009274:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8009276:	693b      	ldr	r3, [r7, #16]
 8009278:	2b01      	cmp	r3, #1
 800927a:	d002      	beq.n	8009282 <SD_DMAError+0x36>
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	2b01      	cmp	r3, #1
 8009280:	d12d      	bne.n	80092de <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009282:	697b      	ldr	r3, [r7, #20]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	4a19      	ldr	r2, [pc, #100]	@ (80092ec <SD_DMAError+0xa0>)
 8009288:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009290:	697b      	ldr	r3, [r7, #20]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8009298:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800929a:	697b      	ldr	r3, [r7, #20]
 800929c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800929e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80092a2:	697b      	ldr	r3, [r7, #20]
 80092a4:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80092a6:	6978      	ldr	r0, [r7, #20]
 80092a8:	f7ff ff62 	bl	8009170 <HAL_SD_GetCardState>
 80092ac:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80092ae:	68bb      	ldr	r3, [r7, #8]
 80092b0:	2b06      	cmp	r3, #6
 80092b2:	d002      	beq.n	80092ba <SD_DMAError+0x6e>
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	2b05      	cmp	r3, #5
 80092b8:	d10a      	bne.n	80092d0 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80092ba:	697b      	ldr	r3, [r7, #20]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	4618      	mov	r0, r3
 80092c0:	f001 f93a 	bl	800a538 <SDMMC_CmdStopTransfer>
 80092c4:	4602      	mov	r2, r0
 80092c6:	697b      	ldr	r3, [r7, #20]
 80092c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092ca:	431a      	orrs	r2, r3
 80092cc:	697b      	ldr	r3, [r7, #20]
 80092ce:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80092d0:	697b      	ldr	r3, [r7, #20]
 80092d2:	2201      	movs	r2, #1
 80092d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80092d8:	697b      	ldr	r3, [r7, #20]
 80092da:	2200      	movs	r2, #0
 80092dc:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80092de:	6978      	ldr	r0, [r7, #20]
 80092e0:	f7ff fd6c 	bl	8008dbc <HAL_SD_ErrorCallback>
#endif
  }
}
 80092e4:	bf00      	nop
 80092e6:	3718      	adds	r7, #24
 80092e8:	46bd      	mov	sp, r7
 80092ea:	bd80      	pop	{r7, pc}
 80092ec:	004005ff 	.word	0x004005ff

080092f0 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b084      	sub	sp, #16
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092fc:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	f240 523a 	movw	r2, #1338	@ 0x53a
 8009306:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8009308:	68f8      	ldr	r0, [r7, #12]
 800930a:	f7ff ff31 	bl	8009170 <HAL_SD_GetCardState>
 800930e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	2201      	movs	r2, #1
 8009314:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	2200      	movs	r2, #0
 800931c:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800931e:	68bb      	ldr	r3, [r7, #8]
 8009320:	2b06      	cmp	r3, #6
 8009322:	d002      	beq.n	800932a <SD_DMATxAbort+0x3a>
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	2b05      	cmp	r3, #5
 8009328:	d10a      	bne.n	8009340 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	4618      	mov	r0, r3
 8009330:	f001 f902 	bl	800a538 <SDMMC_CmdStopTransfer>
 8009334:	4602      	mov	r2, r0
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800933a:	431a      	orrs	r2, r3
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009344:	2b00      	cmp	r3, #0
 8009346:	d103      	bne.n	8009350 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8009348:	68f8      	ldr	r0, [r7, #12]
 800934a:	f002 f891 	bl	800b470 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800934e:	e002      	b.n	8009356 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8009350:	68f8      	ldr	r0, [r7, #12]
 8009352:	f7ff fd33 	bl	8008dbc <HAL_SD_ErrorCallback>
}
 8009356:	bf00      	nop
 8009358:	3710      	adds	r7, #16
 800935a:	46bd      	mov	sp, r7
 800935c:	bd80      	pop	{r7, pc}

0800935e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800935e:	b580      	push	{r7, lr}
 8009360:	b084      	sub	sp, #16
 8009362:	af00      	add	r7, sp, #0
 8009364:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800936a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	f240 523a 	movw	r2, #1338	@ 0x53a
 8009374:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8009376:	68f8      	ldr	r0, [r7, #12]
 8009378:	f7ff fefa 	bl	8009170 <HAL_SD_GetCardState>
 800937c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	2201      	movs	r2, #1
 8009382:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	2200      	movs	r2, #0
 800938a:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800938c:	68bb      	ldr	r3, [r7, #8]
 800938e:	2b06      	cmp	r3, #6
 8009390:	d002      	beq.n	8009398 <SD_DMARxAbort+0x3a>
 8009392:	68bb      	ldr	r3, [r7, #8]
 8009394:	2b05      	cmp	r3, #5
 8009396:	d10a      	bne.n	80093ae <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	4618      	mov	r0, r3
 800939e:	f001 f8cb 	bl	800a538 <SDMMC_CmdStopTransfer>
 80093a2:	4602      	mov	r2, r0
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093a8:	431a      	orrs	r2, r3
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d103      	bne.n	80093be <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80093b6:	68f8      	ldr	r0, [r7, #12]
 80093b8:	f002 f85a 	bl	800b470 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80093bc:	e002      	b.n	80093c4 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80093be:	68f8      	ldr	r0, [r7, #12]
 80093c0:	f7ff fcfc 	bl	8008dbc <HAL_SD_ErrorCallback>
}
 80093c4:	bf00      	nop
 80093c6:	3710      	adds	r7, #16
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}

080093cc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80093cc:	b5b0      	push	{r4, r5, r7, lr}
 80093ce:	b094      	sub	sp, #80	@ 0x50
 80093d0:	af04      	add	r7, sp, #16
 80093d2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80093d4:	2301      	movs	r3, #1
 80093d6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	4618      	mov	r0, r3
 80093de:	f000 ff7d 	bl	800a2dc <SDMMC_GetPowerState>
 80093e2:	4603      	mov	r3, r0
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d102      	bne.n	80093ee <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80093e8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80093ec:	e0b8      	b.n	8009560 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093f2:	2b03      	cmp	r3, #3
 80093f4:	d02f      	beq.n	8009456 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	4618      	mov	r0, r3
 80093fc:	f001 f964 	bl	800a6c8 <SDMMC_CmdSendCID>
 8009400:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009402:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009404:	2b00      	cmp	r3, #0
 8009406:	d001      	beq.n	800940c <SD_InitCard+0x40>
    {
      return errorstate;
 8009408:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800940a:	e0a9      	b.n	8009560 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	2100      	movs	r1, #0
 8009412:	4618      	mov	r0, r3
 8009414:	f000 ffa7 	bl	800a366 <SDMMC_GetResponse>
 8009418:	4602      	mov	r2, r0
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	2104      	movs	r1, #4
 8009424:	4618      	mov	r0, r3
 8009426:	f000 ff9e 	bl	800a366 <SDMMC_GetResponse>
 800942a:	4602      	mov	r2, r0
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	2108      	movs	r1, #8
 8009436:	4618      	mov	r0, r3
 8009438:	f000 ff95 	bl	800a366 <SDMMC_GetResponse>
 800943c:	4602      	mov	r2, r0
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	210c      	movs	r1, #12
 8009448:	4618      	mov	r0, r3
 800944a:	f000 ff8c 	bl	800a366 <SDMMC_GetResponse>
 800944e:	4602      	mov	r2, r0
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800945a:	2b03      	cmp	r3, #3
 800945c:	d00d      	beq.n	800947a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f107 020e 	add.w	r2, r7, #14
 8009466:	4611      	mov	r1, r2
 8009468:	4618      	mov	r0, r3
 800946a:	f001 f96a 	bl	800a742 <SDMMC_CmdSetRelAdd>
 800946e:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009470:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009472:	2b00      	cmp	r3, #0
 8009474:	d001      	beq.n	800947a <SD_InitCard+0xae>
    {
      return errorstate;
 8009476:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009478:	e072      	b.n	8009560 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800947e:	2b03      	cmp	r3, #3
 8009480:	d036      	beq.n	80094f0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009482:	89fb      	ldrh	r3, [r7, #14]
 8009484:	461a      	mov	r2, r3
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681a      	ldr	r2, [r3, #0]
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009492:	041b      	lsls	r3, r3, #16
 8009494:	4619      	mov	r1, r3
 8009496:	4610      	mov	r0, r2
 8009498:	f001 f934 	bl	800a704 <SDMMC_CmdSendCSD>
 800949c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800949e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d001      	beq.n	80094a8 <SD_InitCard+0xdc>
    {
      return errorstate;
 80094a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094a6:	e05b      	b.n	8009560 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	2100      	movs	r1, #0
 80094ae:	4618      	mov	r0, r3
 80094b0:	f000 ff59 	bl	800a366 <SDMMC_GetResponse>
 80094b4:	4602      	mov	r2, r0
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	2104      	movs	r1, #4
 80094c0:	4618      	mov	r0, r3
 80094c2:	f000 ff50 	bl	800a366 <SDMMC_GetResponse>
 80094c6:	4602      	mov	r2, r0
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	2108      	movs	r1, #8
 80094d2:	4618      	mov	r0, r3
 80094d4:	f000 ff47 	bl	800a366 <SDMMC_GetResponse>
 80094d8:	4602      	mov	r2, r0
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	210c      	movs	r1, #12
 80094e4:	4618      	mov	r0, r3
 80094e6:	f000 ff3e 	bl	800a366 <SDMMC_GetResponse>
 80094ea:	4602      	mov	r2, r0
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	2104      	movs	r1, #4
 80094f6:	4618      	mov	r0, r3
 80094f8:	f000 ff35 	bl	800a366 <SDMMC_GetResponse>
 80094fc:	4603      	mov	r3, r0
 80094fe:	0d1a      	lsrs	r2, r3, #20
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009504:	f107 0310 	add.w	r3, r7, #16
 8009508:	4619      	mov	r1, r3
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f7ff fc60 	bl	8008dd0 <HAL_SD_GetCardCSD>
 8009510:	4603      	mov	r3, r0
 8009512:	2b00      	cmp	r3, #0
 8009514:	d002      	beq.n	800951c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009516:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800951a:	e021      	b.n	8009560 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	6819      	ldr	r1, [r3, #0]
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009524:	041b      	lsls	r3, r3, #16
 8009526:	2200      	movs	r2, #0
 8009528:	461c      	mov	r4, r3
 800952a:	4615      	mov	r5, r2
 800952c:	4622      	mov	r2, r4
 800952e:	462b      	mov	r3, r5
 8009530:	4608      	mov	r0, r1
 8009532:	f001 f823 	bl	800a57c <SDMMC_CmdSelDesel>
 8009536:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009538:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800953a:	2b00      	cmp	r3, #0
 800953c:	d001      	beq.n	8009542 <SD_InitCard+0x176>
  {
    return errorstate;
 800953e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009540:	e00e      	b.n	8009560 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681d      	ldr	r5, [r3, #0]
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	466c      	mov	r4, sp
 800954a:	f103 0210 	add.w	r2, r3, #16
 800954e:	ca07      	ldmia	r2, {r0, r1, r2}
 8009550:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009554:	3304      	adds	r3, #4
 8009556:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009558:	4628      	mov	r0, r5
 800955a:	f000 fe67 	bl	800a22c <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800955e:	2300      	movs	r3, #0
}
 8009560:	4618      	mov	r0, r3
 8009562:	3740      	adds	r7, #64	@ 0x40
 8009564:	46bd      	mov	sp, r7
 8009566:	bdb0      	pop	{r4, r5, r7, pc}

08009568 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b086      	sub	sp, #24
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009570:	2300      	movs	r3, #0
 8009572:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8009574:	2300      	movs	r3, #0
 8009576:	617b      	str	r3, [r7, #20]
 8009578:	2300      	movs	r3, #0
 800957a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	4618      	mov	r0, r3
 8009582:	f001 f81e 	bl	800a5c2 <SDMMC_CmdGoIdleState>
 8009586:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d001      	beq.n	8009592 <SD_PowerON+0x2a>
  {
    return errorstate;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	e072      	b.n	8009678 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	4618      	mov	r0, r3
 8009598:	f001 f831 	bl	800a5fe <SDMMC_CmdOperCond>
 800959c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d00d      	beq.n	80095c0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2200      	movs	r2, #0
 80095a8:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	4618      	mov	r0, r3
 80095b0:	f001 f807 	bl	800a5c2 <SDMMC_CmdGoIdleState>
 80095b4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d004      	beq.n	80095c6 <SD_PowerON+0x5e>
    {
      return errorstate;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	e05b      	b.n	8009678 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2201      	movs	r2, #1
 80095c4:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80095ca:	2b01      	cmp	r3, #1
 80095cc:	d137      	bne.n	800963e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	2100      	movs	r1, #0
 80095d4:	4618      	mov	r0, r3
 80095d6:	f001 f831 	bl	800a63c <SDMMC_CmdAppCommand>
 80095da:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d02d      	beq.n	800963e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80095e2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80095e6:	e047      	b.n	8009678 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	2100      	movs	r1, #0
 80095ee:	4618      	mov	r0, r3
 80095f0:	f001 f824 	bl	800a63c <SDMMC_CmdAppCommand>
 80095f4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d001      	beq.n	8009600 <SD_PowerON+0x98>
    {
      return errorstate;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	e03b      	b.n	8009678 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	491e      	ldr	r1, [pc, #120]	@ (8009680 <SD_PowerON+0x118>)
 8009606:	4618      	mov	r0, r3
 8009608:	f001 f83a 	bl	800a680 <SDMMC_CmdAppOperCommand>
 800960c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d002      	beq.n	800961a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009614:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009618:	e02e      	b.n	8009678 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	2100      	movs	r1, #0
 8009620:	4618      	mov	r0, r3
 8009622:	f000 fea0 	bl	800a366 <SDMMC_GetResponse>
 8009626:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009628:	697b      	ldr	r3, [r7, #20]
 800962a:	0fdb      	lsrs	r3, r3, #31
 800962c:	2b01      	cmp	r3, #1
 800962e:	d101      	bne.n	8009634 <SD_PowerON+0xcc>
 8009630:	2301      	movs	r3, #1
 8009632:	e000      	b.n	8009636 <SD_PowerON+0xce>
 8009634:	2300      	movs	r3, #0
 8009636:	613b      	str	r3, [r7, #16]

    count++;
 8009638:	68bb      	ldr	r3, [r7, #8]
 800963a:	3301      	adds	r3, #1
 800963c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800963e:	68bb      	ldr	r3, [r7, #8]
 8009640:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8009644:	4293      	cmp	r3, r2
 8009646:	d802      	bhi.n	800964e <SD_PowerON+0xe6>
 8009648:	693b      	ldr	r3, [r7, #16]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d0cc      	beq.n	80095e8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800964e:	68bb      	ldr	r3, [r7, #8]
 8009650:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8009654:	4293      	cmp	r3, r2
 8009656:	d902      	bls.n	800965e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009658:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800965c:	e00c      	b.n	8009678 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800965e:	697b      	ldr	r3, [r7, #20]
 8009660:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009664:	2b00      	cmp	r3, #0
 8009666:	d003      	beq.n	8009670 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2201      	movs	r2, #1
 800966c:	645a      	str	r2, [r3, #68]	@ 0x44
 800966e:	e002      	b.n	8009676 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2200      	movs	r2, #0
 8009674:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8009676:	2300      	movs	r3, #0
}
 8009678:	4618      	mov	r0, r3
 800967a:	3718      	adds	r7, #24
 800967c:	46bd      	mov	sp, r7
 800967e:	bd80      	pop	{r7, pc}
 8009680:	c1100000 	.word	0xc1100000

08009684 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b084      	sub	sp, #16
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
 800968c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d102      	bne.n	800969a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009694:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009698:	e018      	b.n	80096cc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681a      	ldr	r2, [r3, #0]
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80096a2:	041b      	lsls	r3, r3, #16
 80096a4:	4619      	mov	r1, r3
 80096a6:	4610      	mov	r0, r2
 80096a8:	f001 f86c 	bl	800a784 <SDMMC_CmdSendStatus>
 80096ac:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d001      	beq.n	80096b8 <SD_SendStatus+0x34>
  {
    return errorstate;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	e009      	b.n	80096cc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	2100      	movs	r1, #0
 80096be:	4618      	mov	r0, r3
 80096c0:	f000 fe51 	bl	800a366 <SDMMC_GetResponse>
 80096c4:	4602      	mov	r2, r0
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80096ca:	2300      	movs	r3, #0
}
 80096cc:	4618      	mov	r0, r3
 80096ce:	3710      	adds	r7, #16
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd80      	pop	{r7, pc}

080096d4 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b086      	sub	sp, #24
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096e0:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096e6:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80096e8:	693b      	ldr	r3, [r7, #16]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d03f      	beq.n	800976e <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80096ee:	2300      	movs	r3, #0
 80096f0:	617b      	str	r3, [r7, #20]
 80096f2:	e033      	b.n	800975c <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	4618      	mov	r0, r3
 80096fa:	f000 fdc3 	bl	800a284 <SDMMC_ReadFIFO>
 80096fe:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8009700:	68bb      	ldr	r3, [r7, #8]
 8009702:	b2da      	uxtb	r2, r3
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	3301      	adds	r3, #1
 800970c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800970e:	693b      	ldr	r3, [r7, #16]
 8009710:	3b01      	subs	r3, #1
 8009712:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8009714:	68bb      	ldr	r3, [r7, #8]
 8009716:	0a1b      	lsrs	r3, r3, #8
 8009718:	b2da      	uxtb	r2, r3
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	3301      	adds	r3, #1
 8009722:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009724:	693b      	ldr	r3, [r7, #16]
 8009726:	3b01      	subs	r3, #1
 8009728:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	0c1b      	lsrs	r3, r3, #16
 800972e:	b2da      	uxtb	r2, r3
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	3301      	adds	r3, #1
 8009738:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800973a:	693b      	ldr	r3, [r7, #16]
 800973c:	3b01      	subs	r3, #1
 800973e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	0e1b      	lsrs	r3, r3, #24
 8009744:	b2da      	uxtb	r2, r3
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	701a      	strb	r2, [r3, #0]
      tmp++;
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	3301      	adds	r3, #1
 800974e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009750:	693b      	ldr	r3, [r7, #16]
 8009752:	3b01      	subs	r3, #1
 8009754:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8009756:	697b      	ldr	r3, [r7, #20]
 8009758:	3301      	adds	r3, #1
 800975a:	617b      	str	r3, [r7, #20]
 800975c:	697b      	ldr	r3, [r7, #20]
 800975e:	2b07      	cmp	r3, #7
 8009760:	d9c8      	bls.n	80096f4 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	68fa      	ldr	r2, [r7, #12]
 8009766:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	693a      	ldr	r2, [r7, #16]
 800976c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 800976e:	bf00      	nop
 8009770:	3718      	adds	r7, #24
 8009772:	46bd      	mov	sp, r7
 8009774:	bd80      	pop	{r7, pc}

08009776 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8009776:	b580      	push	{r7, lr}
 8009778:	b086      	sub	sp, #24
 800977a:	af00      	add	r7, sp, #0
 800977c:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	6a1b      	ldr	r3, [r3, #32]
 8009782:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009788:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800978a:	693b      	ldr	r3, [r7, #16]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d043      	beq.n	8009818 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8009790:	2300      	movs	r3, #0
 8009792:	617b      	str	r3, [r7, #20]
 8009794:	e037      	b.n	8009806 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	781b      	ldrb	r3, [r3, #0]
 800979a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	3301      	adds	r3, #1
 80097a0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80097a2:	693b      	ldr	r3, [r7, #16]
 80097a4:	3b01      	subs	r3, #1
 80097a6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	781b      	ldrb	r3, [r3, #0]
 80097ac:	021a      	lsls	r2, r3, #8
 80097ae:	68bb      	ldr	r3, [r7, #8]
 80097b0:	4313      	orrs	r3, r2
 80097b2:	60bb      	str	r3, [r7, #8]
      tmp++;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	3301      	adds	r3, #1
 80097b8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80097ba:	693b      	ldr	r3, [r7, #16]
 80097bc:	3b01      	subs	r3, #1
 80097be:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	781b      	ldrb	r3, [r3, #0]
 80097c4:	041a      	lsls	r2, r3, #16
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	4313      	orrs	r3, r2
 80097ca:	60bb      	str	r3, [r7, #8]
      tmp++;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	3301      	adds	r3, #1
 80097d0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80097d2:	693b      	ldr	r3, [r7, #16]
 80097d4:	3b01      	subs	r3, #1
 80097d6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	781b      	ldrb	r3, [r3, #0]
 80097dc:	061a      	lsls	r2, r3, #24
 80097de:	68bb      	ldr	r3, [r7, #8]
 80097e0:	4313      	orrs	r3, r2
 80097e2:	60bb      	str	r3, [r7, #8]
      tmp++;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	3301      	adds	r3, #1
 80097e8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80097ea:	693b      	ldr	r3, [r7, #16]
 80097ec:	3b01      	subs	r3, #1
 80097ee:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	f107 0208 	add.w	r2, r7, #8
 80097f8:	4611      	mov	r1, r2
 80097fa:	4618      	mov	r0, r3
 80097fc:	f000 fd4f 	bl	800a29e <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8009800:	697b      	ldr	r3, [r7, #20]
 8009802:	3301      	adds	r3, #1
 8009804:	617b      	str	r3, [r7, #20]
 8009806:	697b      	ldr	r3, [r7, #20]
 8009808:	2b07      	cmp	r3, #7
 800980a:	d9c4      	bls.n	8009796 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	68fa      	ldr	r2, [r7, #12]
 8009810:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	693a      	ldr	r2, [r7, #16]
 8009816:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 8009818:	bf00      	nop
 800981a:	3718      	adds	r7, #24
 800981c:	46bd      	mov	sp, r7
 800981e:	bd80      	pop	{r7, pc}

08009820 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b082      	sub	sp, #8
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d101      	bne.n	8009832 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800982e:	2301      	movs	r3, #1
 8009830:	e040      	b.n	80098b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009836:	2b00      	cmp	r3, #0
 8009838:	d106      	bne.n	8009848 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2200      	movs	r2, #0
 800983e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f7f8 fed6 	bl	80025f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2224      	movs	r2, #36	@ 0x24
 800984c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	681a      	ldr	r2, [r3, #0]
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	f022 0201 	bic.w	r2, r2, #1
 800985c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009862:	2b00      	cmp	r3, #0
 8009864:	d002      	beq.n	800986c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	f000 fb16 	bl	8009e98 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	f000 f8af 	bl	80099d0 <UART_SetConfig>
 8009872:	4603      	mov	r3, r0
 8009874:	2b01      	cmp	r3, #1
 8009876:	d101      	bne.n	800987c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8009878:	2301      	movs	r3, #1
 800987a:	e01b      	b.n	80098b4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	685a      	ldr	r2, [r3, #4]
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800988a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	689a      	ldr	r2, [r3, #8]
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800989a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	681a      	ldr	r2, [r3, #0]
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	f042 0201 	orr.w	r2, r2, #1
 80098aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	f000 fb95 	bl	8009fdc <UART_CheckIdleState>
 80098b2:	4603      	mov	r3, r0
}
 80098b4:	4618      	mov	r0, r3
 80098b6:	3708      	adds	r7, #8
 80098b8:	46bd      	mov	sp, r7
 80098ba:	bd80      	pop	{r7, pc}

080098bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b08a      	sub	sp, #40	@ 0x28
 80098c0:	af02      	add	r7, sp, #8
 80098c2:	60f8      	str	r0, [r7, #12]
 80098c4:	60b9      	str	r1, [r7, #8]
 80098c6:	603b      	str	r3, [r7, #0]
 80098c8:	4613      	mov	r3, r2
 80098ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80098d0:	2b20      	cmp	r3, #32
 80098d2:	d177      	bne.n	80099c4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80098d4:	68bb      	ldr	r3, [r7, #8]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d002      	beq.n	80098e0 <HAL_UART_Transmit+0x24>
 80098da:	88fb      	ldrh	r3, [r7, #6]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d101      	bne.n	80098e4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80098e0:	2301      	movs	r3, #1
 80098e2:	e070      	b.n	80099c6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	2200      	movs	r2, #0
 80098e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	2221      	movs	r2, #33	@ 0x21
 80098f0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80098f2:	f7fb f813 	bl	800491c <HAL_GetTick>
 80098f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	88fa      	ldrh	r2, [r7, #6]
 80098fc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	88fa      	ldrh	r2, [r7, #6]
 8009904:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	689b      	ldr	r3, [r3, #8]
 800990c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009910:	d108      	bne.n	8009924 <HAL_UART_Transmit+0x68>
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	691b      	ldr	r3, [r3, #16]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d104      	bne.n	8009924 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800991a:	2300      	movs	r3, #0
 800991c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800991e:	68bb      	ldr	r3, [r7, #8]
 8009920:	61bb      	str	r3, [r7, #24]
 8009922:	e003      	b.n	800992c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8009924:	68bb      	ldr	r3, [r7, #8]
 8009926:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009928:	2300      	movs	r3, #0
 800992a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800992c:	e02f      	b.n	800998e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	9300      	str	r3, [sp, #0]
 8009932:	697b      	ldr	r3, [r7, #20]
 8009934:	2200      	movs	r2, #0
 8009936:	2180      	movs	r1, #128	@ 0x80
 8009938:	68f8      	ldr	r0, [r7, #12]
 800993a:	f000 fba6 	bl	800a08a <UART_WaitOnFlagUntilTimeout>
 800993e:	4603      	mov	r3, r0
 8009940:	2b00      	cmp	r3, #0
 8009942:	d004      	beq.n	800994e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	2220      	movs	r2, #32
 8009948:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800994a:	2303      	movs	r3, #3
 800994c:	e03b      	b.n	80099c6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800994e:	69fb      	ldr	r3, [r7, #28]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d10b      	bne.n	800996c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009954:	69bb      	ldr	r3, [r7, #24]
 8009956:	881b      	ldrh	r3, [r3, #0]
 8009958:	461a      	mov	r2, r3
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009962:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8009964:	69bb      	ldr	r3, [r7, #24]
 8009966:	3302      	adds	r3, #2
 8009968:	61bb      	str	r3, [r7, #24]
 800996a:	e007      	b.n	800997c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800996c:	69fb      	ldr	r3, [r7, #28]
 800996e:	781a      	ldrb	r2, [r3, #0]
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009976:	69fb      	ldr	r3, [r7, #28]
 8009978:	3301      	adds	r3, #1
 800997a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8009982:	b29b      	uxth	r3, r3
 8009984:	3b01      	subs	r3, #1
 8009986:	b29a      	uxth	r2, r3
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8009994:	b29b      	uxth	r3, r3
 8009996:	2b00      	cmp	r3, #0
 8009998:	d1c9      	bne.n	800992e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	9300      	str	r3, [sp, #0]
 800999e:	697b      	ldr	r3, [r7, #20]
 80099a0:	2200      	movs	r2, #0
 80099a2:	2140      	movs	r1, #64	@ 0x40
 80099a4:	68f8      	ldr	r0, [r7, #12]
 80099a6:	f000 fb70 	bl	800a08a <UART_WaitOnFlagUntilTimeout>
 80099aa:	4603      	mov	r3, r0
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d004      	beq.n	80099ba <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	2220      	movs	r2, #32
 80099b4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80099b6:	2303      	movs	r3, #3
 80099b8:	e005      	b.n	80099c6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	2220      	movs	r2, #32
 80099be:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80099c0:	2300      	movs	r3, #0
 80099c2:	e000      	b.n	80099c6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80099c4:	2302      	movs	r3, #2
  }
}
 80099c6:	4618      	mov	r0, r3
 80099c8:	3720      	adds	r7, #32
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bd80      	pop	{r7, pc}
	...

080099d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b088      	sub	sp, #32
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80099d8:	2300      	movs	r3, #0
 80099da:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	689a      	ldr	r2, [r3, #8]
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	691b      	ldr	r3, [r3, #16]
 80099e4:	431a      	orrs	r2, r3
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	695b      	ldr	r3, [r3, #20]
 80099ea:	431a      	orrs	r2, r3
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	69db      	ldr	r3, [r3, #28]
 80099f0:	4313      	orrs	r3, r2
 80099f2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	681a      	ldr	r2, [r3, #0]
 80099fa:	4ba6      	ldr	r3, [pc, #664]	@ (8009c94 <UART_SetConfig+0x2c4>)
 80099fc:	4013      	ands	r3, r2
 80099fe:	687a      	ldr	r2, [r7, #4]
 8009a00:	6812      	ldr	r2, [r2, #0]
 8009a02:	6979      	ldr	r1, [r7, #20]
 8009a04:	430b      	orrs	r3, r1
 8009a06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	685b      	ldr	r3, [r3, #4]
 8009a0e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	68da      	ldr	r2, [r3, #12]
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	430a      	orrs	r2, r1
 8009a1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	699b      	ldr	r3, [r3, #24]
 8009a22:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6a1b      	ldr	r3, [r3, #32]
 8009a28:	697a      	ldr	r2, [r7, #20]
 8009a2a:	4313      	orrs	r3, r2
 8009a2c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	689b      	ldr	r3, [r3, #8]
 8009a34:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	697a      	ldr	r2, [r7, #20]
 8009a3e:	430a      	orrs	r2, r1
 8009a40:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	4a94      	ldr	r2, [pc, #592]	@ (8009c98 <UART_SetConfig+0x2c8>)
 8009a48:	4293      	cmp	r3, r2
 8009a4a:	d120      	bne.n	8009a8e <UART_SetConfig+0xbe>
 8009a4c:	4b93      	ldr	r3, [pc, #588]	@ (8009c9c <UART_SetConfig+0x2cc>)
 8009a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a52:	f003 0303 	and.w	r3, r3, #3
 8009a56:	2b03      	cmp	r3, #3
 8009a58:	d816      	bhi.n	8009a88 <UART_SetConfig+0xb8>
 8009a5a:	a201      	add	r2, pc, #4	@ (adr r2, 8009a60 <UART_SetConfig+0x90>)
 8009a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a60:	08009a71 	.word	0x08009a71
 8009a64:	08009a7d 	.word	0x08009a7d
 8009a68:	08009a77 	.word	0x08009a77
 8009a6c:	08009a83 	.word	0x08009a83
 8009a70:	2301      	movs	r3, #1
 8009a72:	77fb      	strb	r3, [r7, #31]
 8009a74:	e150      	b.n	8009d18 <UART_SetConfig+0x348>
 8009a76:	2302      	movs	r3, #2
 8009a78:	77fb      	strb	r3, [r7, #31]
 8009a7a:	e14d      	b.n	8009d18 <UART_SetConfig+0x348>
 8009a7c:	2304      	movs	r3, #4
 8009a7e:	77fb      	strb	r3, [r7, #31]
 8009a80:	e14a      	b.n	8009d18 <UART_SetConfig+0x348>
 8009a82:	2308      	movs	r3, #8
 8009a84:	77fb      	strb	r3, [r7, #31]
 8009a86:	e147      	b.n	8009d18 <UART_SetConfig+0x348>
 8009a88:	2310      	movs	r3, #16
 8009a8a:	77fb      	strb	r3, [r7, #31]
 8009a8c:	e144      	b.n	8009d18 <UART_SetConfig+0x348>
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	4a83      	ldr	r2, [pc, #524]	@ (8009ca0 <UART_SetConfig+0x2d0>)
 8009a94:	4293      	cmp	r3, r2
 8009a96:	d132      	bne.n	8009afe <UART_SetConfig+0x12e>
 8009a98:	4b80      	ldr	r3, [pc, #512]	@ (8009c9c <UART_SetConfig+0x2cc>)
 8009a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a9e:	f003 030c 	and.w	r3, r3, #12
 8009aa2:	2b0c      	cmp	r3, #12
 8009aa4:	d828      	bhi.n	8009af8 <UART_SetConfig+0x128>
 8009aa6:	a201      	add	r2, pc, #4	@ (adr r2, 8009aac <UART_SetConfig+0xdc>)
 8009aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aac:	08009ae1 	.word	0x08009ae1
 8009ab0:	08009af9 	.word	0x08009af9
 8009ab4:	08009af9 	.word	0x08009af9
 8009ab8:	08009af9 	.word	0x08009af9
 8009abc:	08009aed 	.word	0x08009aed
 8009ac0:	08009af9 	.word	0x08009af9
 8009ac4:	08009af9 	.word	0x08009af9
 8009ac8:	08009af9 	.word	0x08009af9
 8009acc:	08009ae7 	.word	0x08009ae7
 8009ad0:	08009af9 	.word	0x08009af9
 8009ad4:	08009af9 	.word	0x08009af9
 8009ad8:	08009af9 	.word	0x08009af9
 8009adc:	08009af3 	.word	0x08009af3
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	77fb      	strb	r3, [r7, #31]
 8009ae4:	e118      	b.n	8009d18 <UART_SetConfig+0x348>
 8009ae6:	2302      	movs	r3, #2
 8009ae8:	77fb      	strb	r3, [r7, #31]
 8009aea:	e115      	b.n	8009d18 <UART_SetConfig+0x348>
 8009aec:	2304      	movs	r3, #4
 8009aee:	77fb      	strb	r3, [r7, #31]
 8009af0:	e112      	b.n	8009d18 <UART_SetConfig+0x348>
 8009af2:	2308      	movs	r3, #8
 8009af4:	77fb      	strb	r3, [r7, #31]
 8009af6:	e10f      	b.n	8009d18 <UART_SetConfig+0x348>
 8009af8:	2310      	movs	r3, #16
 8009afa:	77fb      	strb	r3, [r7, #31]
 8009afc:	e10c      	b.n	8009d18 <UART_SetConfig+0x348>
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	4a68      	ldr	r2, [pc, #416]	@ (8009ca4 <UART_SetConfig+0x2d4>)
 8009b04:	4293      	cmp	r3, r2
 8009b06:	d120      	bne.n	8009b4a <UART_SetConfig+0x17a>
 8009b08:	4b64      	ldr	r3, [pc, #400]	@ (8009c9c <UART_SetConfig+0x2cc>)
 8009b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b0e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009b12:	2b30      	cmp	r3, #48	@ 0x30
 8009b14:	d013      	beq.n	8009b3e <UART_SetConfig+0x16e>
 8009b16:	2b30      	cmp	r3, #48	@ 0x30
 8009b18:	d814      	bhi.n	8009b44 <UART_SetConfig+0x174>
 8009b1a:	2b20      	cmp	r3, #32
 8009b1c:	d009      	beq.n	8009b32 <UART_SetConfig+0x162>
 8009b1e:	2b20      	cmp	r3, #32
 8009b20:	d810      	bhi.n	8009b44 <UART_SetConfig+0x174>
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d002      	beq.n	8009b2c <UART_SetConfig+0x15c>
 8009b26:	2b10      	cmp	r3, #16
 8009b28:	d006      	beq.n	8009b38 <UART_SetConfig+0x168>
 8009b2a:	e00b      	b.n	8009b44 <UART_SetConfig+0x174>
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	77fb      	strb	r3, [r7, #31]
 8009b30:	e0f2      	b.n	8009d18 <UART_SetConfig+0x348>
 8009b32:	2302      	movs	r3, #2
 8009b34:	77fb      	strb	r3, [r7, #31]
 8009b36:	e0ef      	b.n	8009d18 <UART_SetConfig+0x348>
 8009b38:	2304      	movs	r3, #4
 8009b3a:	77fb      	strb	r3, [r7, #31]
 8009b3c:	e0ec      	b.n	8009d18 <UART_SetConfig+0x348>
 8009b3e:	2308      	movs	r3, #8
 8009b40:	77fb      	strb	r3, [r7, #31]
 8009b42:	e0e9      	b.n	8009d18 <UART_SetConfig+0x348>
 8009b44:	2310      	movs	r3, #16
 8009b46:	77fb      	strb	r3, [r7, #31]
 8009b48:	e0e6      	b.n	8009d18 <UART_SetConfig+0x348>
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	4a56      	ldr	r2, [pc, #344]	@ (8009ca8 <UART_SetConfig+0x2d8>)
 8009b50:	4293      	cmp	r3, r2
 8009b52:	d120      	bne.n	8009b96 <UART_SetConfig+0x1c6>
 8009b54:	4b51      	ldr	r3, [pc, #324]	@ (8009c9c <UART_SetConfig+0x2cc>)
 8009b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b5a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009b5e:	2bc0      	cmp	r3, #192	@ 0xc0
 8009b60:	d013      	beq.n	8009b8a <UART_SetConfig+0x1ba>
 8009b62:	2bc0      	cmp	r3, #192	@ 0xc0
 8009b64:	d814      	bhi.n	8009b90 <UART_SetConfig+0x1c0>
 8009b66:	2b80      	cmp	r3, #128	@ 0x80
 8009b68:	d009      	beq.n	8009b7e <UART_SetConfig+0x1ae>
 8009b6a:	2b80      	cmp	r3, #128	@ 0x80
 8009b6c:	d810      	bhi.n	8009b90 <UART_SetConfig+0x1c0>
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d002      	beq.n	8009b78 <UART_SetConfig+0x1a8>
 8009b72:	2b40      	cmp	r3, #64	@ 0x40
 8009b74:	d006      	beq.n	8009b84 <UART_SetConfig+0x1b4>
 8009b76:	e00b      	b.n	8009b90 <UART_SetConfig+0x1c0>
 8009b78:	2300      	movs	r3, #0
 8009b7a:	77fb      	strb	r3, [r7, #31]
 8009b7c:	e0cc      	b.n	8009d18 <UART_SetConfig+0x348>
 8009b7e:	2302      	movs	r3, #2
 8009b80:	77fb      	strb	r3, [r7, #31]
 8009b82:	e0c9      	b.n	8009d18 <UART_SetConfig+0x348>
 8009b84:	2304      	movs	r3, #4
 8009b86:	77fb      	strb	r3, [r7, #31]
 8009b88:	e0c6      	b.n	8009d18 <UART_SetConfig+0x348>
 8009b8a:	2308      	movs	r3, #8
 8009b8c:	77fb      	strb	r3, [r7, #31]
 8009b8e:	e0c3      	b.n	8009d18 <UART_SetConfig+0x348>
 8009b90:	2310      	movs	r3, #16
 8009b92:	77fb      	strb	r3, [r7, #31]
 8009b94:	e0c0      	b.n	8009d18 <UART_SetConfig+0x348>
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	4a44      	ldr	r2, [pc, #272]	@ (8009cac <UART_SetConfig+0x2dc>)
 8009b9c:	4293      	cmp	r3, r2
 8009b9e:	d125      	bne.n	8009bec <UART_SetConfig+0x21c>
 8009ba0:	4b3e      	ldr	r3, [pc, #248]	@ (8009c9c <UART_SetConfig+0x2cc>)
 8009ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ba6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009baa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009bae:	d017      	beq.n	8009be0 <UART_SetConfig+0x210>
 8009bb0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009bb4:	d817      	bhi.n	8009be6 <UART_SetConfig+0x216>
 8009bb6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009bba:	d00b      	beq.n	8009bd4 <UART_SetConfig+0x204>
 8009bbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009bc0:	d811      	bhi.n	8009be6 <UART_SetConfig+0x216>
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d003      	beq.n	8009bce <UART_SetConfig+0x1fe>
 8009bc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009bca:	d006      	beq.n	8009bda <UART_SetConfig+0x20a>
 8009bcc:	e00b      	b.n	8009be6 <UART_SetConfig+0x216>
 8009bce:	2300      	movs	r3, #0
 8009bd0:	77fb      	strb	r3, [r7, #31]
 8009bd2:	e0a1      	b.n	8009d18 <UART_SetConfig+0x348>
 8009bd4:	2302      	movs	r3, #2
 8009bd6:	77fb      	strb	r3, [r7, #31]
 8009bd8:	e09e      	b.n	8009d18 <UART_SetConfig+0x348>
 8009bda:	2304      	movs	r3, #4
 8009bdc:	77fb      	strb	r3, [r7, #31]
 8009bde:	e09b      	b.n	8009d18 <UART_SetConfig+0x348>
 8009be0:	2308      	movs	r3, #8
 8009be2:	77fb      	strb	r3, [r7, #31]
 8009be4:	e098      	b.n	8009d18 <UART_SetConfig+0x348>
 8009be6:	2310      	movs	r3, #16
 8009be8:	77fb      	strb	r3, [r7, #31]
 8009bea:	e095      	b.n	8009d18 <UART_SetConfig+0x348>
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	4a2f      	ldr	r2, [pc, #188]	@ (8009cb0 <UART_SetConfig+0x2e0>)
 8009bf2:	4293      	cmp	r3, r2
 8009bf4:	d125      	bne.n	8009c42 <UART_SetConfig+0x272>
 8009bf6:	4b29      	ldr	r3, [pc, #164]	@ (8009c9c <UART_SetConfig+0x2cc>)
 8009bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009bfc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009c00:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009c04:	d017      	beq.n	8009c36 <UART_SetConfig+0x266>
 8009c06:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009c0a:	d817      	bhi.n	8009c3c <UART_SetConfig+0x26c>
 8009c0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009c10:	d00b      	beq.n	8009c2a <UART_SetConfig+0x25a>
 8009c12:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009c16:	d811      	bhi.n	8009c3c <UART_SetConfig+0x26c>
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d003      	beq.n	8009c24 <UART_SetConfig+0x254>
 8009c1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009c20:	d006      	beq.n	8009c30 <UART_SetConfig+0x260>
 8009c22:	e00b      	b.n	8009c3c <UART_SetConfig+0x26c>
 8009c24:	2301      	movs	r3, #1
 8009c26:	77fb      	strb	r3, [r7, #31]
 8009c28:	e076      	b.n	8009d18 <UART_SetConfig+0x348>
 8009c2a:	2302      	movs	r3, #2
 8009c2c:	77fb      	strb	r3, [r7, #31]
 8009c2e:	e073      	b.n	8009d18 <UART_SetConfig+0x348>
 8009c30:	2304      	movs	r3, #4
 8009c32:	77fb      	strb	r3, [r7, #31]
 8009c34:	e070      	b.n	8009d18 <UART_SetConfig+0x348>
 8009c36:	2308      	movs	r3, #8
 8009c38:	77fb      	strb	r3, [r7, #31]
 8009c3a:	e06d      	b.n	8009d18 <UART_SetConfig+0x348>
 8009c3c:	2310      	movs	r3, #16
 8009c3e:	77fb      	strb	r3, [r7, #31]
 8009c40:	e06a      	b.n	8009d18 <UART_SetConfig+0x348>
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	4a1b      	ldr	r2, [pc, #108]	@ (8009cb4 <UART_SetConfig+0x2e4>)
 8009c48:	4293      	cmp	r3, r2
 8009c4a:	d138      	bne.n	8009cbe <UART_SetConfig+0x2ee>
 8009c4c:	4b13      	ldr	r3, [pc, #76]	@ (8009c9c <UART_SetConfig+0x2cc>)
 8009c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c52:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8009c56:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009c5a:	d017      	beq.n	8009c8c <UART_SetConfig+0x2bc>
 8009c5c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009c60:	d82a      	bhi.n	8009cb8 <UART_SetConfig+0x2e8>
 8009c62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009c66:	d00b      	beq.n	8009c80 <UART_SetConfig+0x2b0>
 8009c68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009c6c:	d824      	bhi.n	8009cb8 <UART_SetConfig+0x2e8>
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d003      	beq.n	8009c7a <UART_SetConfig+0x2aa>
 8009c72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009c76:	d006      	beq.n	8009c86 <UART_SetConfig+0x2b6>
 8009c78:	e01e      	b.n	8009cb8 <UART_SetConfig+0x2e8>
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	77fb      	strb	r3, [r7, #31]
 8009c7e:	e04b      	b.n	8009d18 <UART_SetConfig+0x348>
 8009c80:	2302      	movs	r3, #2
 8009c82:	77fb      	strb	r3, [r7, #31]
 8009c84:	e048      	b.n	8009d18 <UART_SetConfig+0x348>
 8009c86:	2304      	movs	r3, #4
 8009c88:	77fb      	strb	r3, [r7, #31]
 8009c8a:	e045      	b.n	8009d18 <UART_SetConfig+0x348>
 8009c8c:	2308      	movs	r3, #8
 8009c8e:	77fb      	strb	r3, [r7, #31]
 8009c90:	e042      	b.n	8009d18 <UART_SetConfig+0x348>
 8009c92:	bf00      	nop
 8009c94:	efff69f3 	.word	0xefff69f3
 8009c98:	40011000 	.word	0x40011000
 8009c9c:	40023800 	.word	0x40023800
 8009ca0:	40004400 	.word	0x40004400
 8009ca4:	40004800 	.word	0x40004800
 8009ca8:	40004c00 	.word	0x40004c00
 8009cac:	40005000 	.word	0x40005000
 8009cb0:	40011400 	.word	0x40011400
 8009cb4:	40007800 	.word	0x40007800
 8009cb8:	2310      	movs	r3, #16
 8009cba:	77fb      	strb	r3, [r7, #31]
 8009cbc:	e02c      	b.n	8009d18 <UART_SetConfig+0x348>
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	4a72      	ldr	r2, [pc, #456]	@ (8009e8c <UART_SetConfig+0x4bc>)
 8009cc4:	4293      	cmp	r3, r2
 8009cc6:	d125      	bne.n	8009d14 <UART_SetConfig+0x344>
 8009cc8:	4b71      	ldr	r3, [pc, #452]	@ (8009e90 <UART_SetConfig+0x4c0>)
 8009cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009cce:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8009cd2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8009cd6:	d017      	beq.n	8009d08 <UART_SetConfig+0x338>
 8009cd8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8009cdc:	d817      	bhi.n	8009d0e <UART_SetConfig+0x33e>
 8009cde:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009ce2:	d00b      	beq.n	8009cfc <UART_SetConfig+0x32c>
 8009ce4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009ce8:	d811      	bhi.n	8009d0e <UART_SetConfig+0x33e>
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d003      	beq.n	8009cf6 <UART_SetConfig+0x326>
 8009cee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009cf2:	d006      	beq.n	8009d02 <UART_SetConfig+0x332>
 8009cf4:	e00b      	b.n	8009d0e <UART_SetConfig+0x33e>
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	77fb      	strb	r3, [r7, #31]
 8009cfa:	e00d      	b.n	8009d18 <UART_SetConfig+0x348>
 8009cfc:	2302      	movs	r3, #2
 8009cfe:	77fb      	strb	r3, [r7, #31]
 8009d00:	e00a      	b.n	8009d18 <UART_SetConfig+0x348>
 8009d02:	2304      	movs	r3, #4
 8009d04:	77fb      	strb	r3, [r7, #31]
 8009d06:	e007      	b.n	8009d18 <UART_SetConfig+0x348>
 8009d08:	2308      	movs	r3, #8
 8009d0a:	77fb      	strb	r3, [r7, #31]
 8009d0c:	e004      	b.n	8009d18 <UART_SetConfig+0x348>
 8009d0e:	2310      	movs	r3, #16
 8009d10:	77fb      	strb	r3, [r7, #31]
 8009d12:	e001      	b.n	8009d18 <UART_SetConfig+0x348>
 8009d14:	2310      	movs	r3, #16
 8009d16:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	69db      	ldr	r3, [r3, #28]
 8009d1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009d20:	d15b      	bne.n	8009dda <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8009d22:	7ffb      	ldrb	r3, [r7, #31]
 8009d24:	2b08      	cmp	r3, #8
 8009d26:	d828      	bhi.n	8009d7a <UART_SetConfig+0x3aa>
 8009d28:	a201      	add	r2, pc, #4	@ (adr r2, 8009d30 <UART_SetConfig+0x360>)
 8009d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d2e:	bf00      	nop
 8009d30:	08009d55 	.word	0x08009d55
 8009d34:	08009d5d 	.word	0x08009d5d
 8009d38:	08009d65 	.word	0x08009d65
 8009d3c:	08009d7b 	.word	0x08009d7b
 8009d40:	08009d6b 	.word	0x08009d6b
 8009d44:	08009d7b 	.word	0x08009d7b
 8009d48:	08009d7b 	.word	0x08009d7b
 8009d4c:	08009d7b 	.word	0x08009d7b
 8009d50:	08009d73 	.word	0x08009d73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009d54:	f7fd fa36 	bl	80071c4 <HAL_RCC_GetPCLK1Freq>
 8009d58:	61b8      	str	r0, [r7, #24]
        break;
 8009d5a:	e013      	b.n	8009d84 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009d5c:	f7fd fa46 	bl	80071ec <HAL_RCC_GetPCLK2Freq>
 8009d60:	61b8      	str	r0, [r7, #24]
        break;
 8009d62:	e00f      	b.n	8009d84 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009d64:	4b4b      	ldr	r3, [pc, #300]	@ (8009e94 <UART_SetConfig+0x4c4>)
 8009d66:	61bb      	str	r3, [r7, #24]
        break;
 8009d68:	e00c      	b.n	8009d84 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009d6a:	f7fd f959 	bl	8007020 <HAL_RCC_GetSysClockFreq>
 8009d6e:	61b8      	str	r0, [r7, #24]
        break;
 8009d70:	e008      	b.n	8009d84 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009d72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009d76:	61bb      	str	r3, [r7, #24]
        break;
 8009d78:	e004      	b.n	8009d84 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009d7e:	2301      	movs	r3, #1
 8009d80:	77bb      	strb	r3, [r7, #30]
        break;
 8009d82:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009d84:	69bb      	ldr	r3, [r7, #24]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d074      	beq.n	8009e74 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009d8a:	69bb      	ldr	r3, [r7, #24]
 8009d8c:	005a      	lsls	r2, r3, #1
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	685b      	ldr	r3, [r3, #4]
 8009d92:	085b      	lsrs	r3, r3, #1
 8009d94:	441a      	add	r2, r3
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	685b      	ldr	r3, [r3, #4]
 8009d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d9e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009da0:	693b      	ldr	r3, [r7, #16]
 8009da2:	2b0f      	cmp	r3, #15
 8009da4:	d916      	bls.n	8009dd4 <UART_SetConfig+0x404>
 8009da6:	693b      	ldr	r3, [r7, #16]
 8009da8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009dac:	d212      	bcs.n	8009dd4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009dae:	693b      	ldr	r3, [r7, #16]
 8009db0:	b29b      	uxth	r3, r3
 8009db2:	f023 030f 	bic.w	r3, r3, #15
 8009db6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009db8:	693b      	ldr	r3, [r7, #16]
 8009dba:	085b      	lsrs	r3, r3, #1
 8009dbc:	b29b      	uxth	r3, r3
 8009dbe:	f003 0307 	and.w	r3, r3, #7
 8009dc2:	b29a      	uxth	r2, r3
 8009dc4:	89fb      	ldrh	r3, [r7, #14]
 8009dc6:	4313      	orrs	r3, r2
 8009dc8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	89fa      	ldrh	r2, [r7, #14]
 8009dd0:	60da      	str	r2, [r3, #12]
 8009dd2:	e04f      	b.n	8009e74 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009dd4:	2301      	movs	r3, #1
 8009dd6:	77bb      	strb	r3, [r7, #30]
 8009dd8:	e04c      	b.n	8009e74 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009dda:	7ffb      	ldrb	r3, [r7, #31]
 8009ddc:	2b08      	cmp	r3, #8
 8009dde:	d828      	bhi.n	8009e32 <UART_SetConfig+0x462>
 8009de0:	a201      	add	r2, pc, #4	@ (adr r2, 8009de8 <UART_SetConfig+0x418>)
 8009de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009de6:	bf00      	nop
 8009de8:	08009e0d 	.word	0x08009e0d
 8009dec:	08009e15 	.word	0x08009e15
 8009df0:	08009e1d 	.word	0x08009e1d
 8009df4:	08009e33 	.word	0x08009e33
 8009df8:	08009e23 	.word	0x08009e23
 8009dfc:	08009e33 	.word	0x08009e33
 8009e00:	08009e33 	.word	0x08009e33
 8009e04:	08009e33 	.word	0x08009e33
 8009e08:	08009e2b 	.word	0x08009e2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009e0c:	f7fd f9da 	bl	80071c4 <HAL_RCC_GetPCLK1Freq>
 8009e10:	61b8      	str	r0, [r7, #24]
        break;
 8009e12:	e013      	b.n	8009e3c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009e14:	f7fd f9ea 	bl	80071ec <HAL_RCC_GetPCLK2Freq>
 8009e18:	61b8      	str	r0, [r7, #24]
        break;
 8009e1a:	e00f      	b.n	8009e3c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009e1c:	4b1d      	ldr	r3, [pc, #116]	@ (8009e94 <UART_SetConfig+0x4c4>)
 8009e1e:	61bb      	str	r3, [r7, #24]
        break;
 8009e20:	e00c      	b.n	8009e3c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009e22:	f7fd f8fd 	bl	8007020 <HAL_RCC_GetSysClockFreq>
 8009e26:	61b8      	str	r0, [r7, #24]
        break;
 8009e28:	e008      	b.n	8009e3c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009e2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009e2e:	61bb      	str	r3, [r7, #24]
        break;
 8009e30:	e004      	b.n	8009e3c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8009e32:	2300      	movs	r3, #0
 8009e34:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009e36:	2301      	movs	r3, #1
 8009e38:	77bb      	strb	r3, [r7, #30]
        break;
 8009e3a:	bf00      	nop
    }

    if (pclk != 0U)
 8009e3c:	69bb      	ldr	r3, [r7, #24]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d018      	beq.n	8009e74 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	685b      	ldr	r3, [r3, #4]
 8009e46:	085a      	lsrs	r2, r3, #1
 8009e48:	69bb      	ldr	r3, [r7, #24]
 8009e4a:	441a      	add	r2, r3
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	685b      	ldr	r3, [r3, #4]
 8009e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e54:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009e56:	693b      	ldr	r3, [r7, #16]
 8009e58:	2b0f      	cmp	r3, #15
 8009e5a:	d909      	bls.n	8009e70 <UART_SetConfig+0x4a0>
 8009e5c:	693b      	ldr	r3, [r7, #16]
 8009e5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e62:	d205      	bcs.n	8009e70 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009e64:	693b      	ldr	r3, [r7, #16]
 8009e66:	b29a      	uxth	r2, r3
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	60da      	str	r2, [r3, #12]
 8009e6e:	e001      	b.n	8009e74 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009e70:	2301      	movs	r3, #1
 8009e72:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2200      	movs	r2, #0
 8009e78:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8009e80:	7fbb      	ldrb	r3, [r7, #30]
}
 8009e82:	4618      	mov	r0, r3
 8009e84:	3720      	adds	r7, #32
 8009e86:	46bd      	mov	sp, r7
 8009e88:	bd80      	pop	{r7, pc}
 8009e8a:	bf00      	nop
 8009e8c:	40007c00 	.word	0x40007c00
 8009e90:	40023800 	.word	0x40023800
 8009e94:	00f42400 	.word	0x00f42400

08009e98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009e98:	b480      	push	{r7}
 8009e9a:	b083      	sub	sp, #12
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ea4:	f003 0308 	and.w	r3, r3, #8
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d00a      	beq.n	8009ec2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	685b      	ldr	r3, [r3, #4]
 8009eb2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	430a      	orrs	r2, r1
 8009ec0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ec6:	f003 0301 	and.w	r3, r3, #1
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d00a      	beq.n	8009ee4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	685b      	ldr	r3, [r3, #4]
 8009ed4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	430a      	orrs	r2, r1
 8009ee2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ee8:	f003 0302 	and.w	r3, r3, #2
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d00a      	beq.n	8009f06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	685b      	ldr	r3, [r3, #4]
 8009ef6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	430a      	orrs	r2, r1
 8009f04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f0a:	f003 0304 	and.w	r3, r3, #4
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d00a      	beq.n	8009f28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	685b      	ldr	r3, [r3, #4]
 8009f18:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	430a      	orrs	r2, r1
 8009f26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f2c:	f003 0310 	and.w	r3, r3, #16
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d00a      	beq.n	8009f4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	689b      	ldr	r3, [r3, #8]
 8009f3a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	430a      	orrs	r2, r1
 8009f48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f4e:	f003 0320 	and.w	r3, r3, #32
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d00a      	beq.n	8009f6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	689b      	ldr	r3, [r3, #8]
 8009f5c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	430a      	orrs	r2, r1
 8009f6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d01a      	beq.n	8009fae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	685b      	ldr	r3, [r3, #4]
 8009f7e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	430a      	orrs	r2, r1
 8009f8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009f96:	d10a      	bne.n	8009fae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	685b      	ldr	r3, [r3, #4]
 8009f9e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	430a      	orrs	r2, r1
 8009fac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d00a      	beq.n	8009fd0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	685b      	ldr	r3, [r3, #4]
 8009fc0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	430a      	orrs	r2, r1
 8009fce:	605a      	str	r2, [r3, #4]
  }
}
 8009fd0:	bf00      	nop
 8009fd2:	370c      	adds	r7, #12
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fda:	4770      	bx	lr

08009fdc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b08c      	sub	sp, #48	@ 0x30
 8009fe0:	af02      	add	r7, sp, #8
 8009fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009fec:	f7fa fc96 	bl	800491c <HAL_GetTick>
 8009ff0:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	f003 0308 	and.w	r3, r3, #8
 8009ffc:	2b08      	cmp	r3, #8
 8009ffe:	d12e      	bne.n	800a05e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a000:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a004:	9300      	str	r3, [sp, #0]
 800a006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a008:	2200      	movs	r2, #0
 800a00a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	f000 f83b 	bl	800a08a <UART_WaitOnFlagUntilTimeout>
 800a014:	4603      	mov	r3, r0
 800a016:	2b00      	cmp	r3, #0
 800a018:	d021      	beq.n	800a05e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a020:	693b      	ldr	r3, [r7, #16]
 800a022:	e853 3f00 	ldrex	r3, [r3]
 800a026:	60fb      	str	r3, [r7, #12]
   return(result);
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a02e:	623b      	str	r3, [r7, #32]
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	461a      	mov	r2, r3
 800a036:	6a3b      	ldr	r3, [r7, #32]
 800a038:	61fb      	str	r3, [r7, #28]
 800a03a:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a03c:	69b9      	ldr	r1, [r7, #24]
 800a03e:	69fa      	ldr	r2, [r7, #28]
 800a040:	e841 2300 	strex	r3, r2, [r1]
 800a044:	617b      	str	r3, [r7, #20]
   return(result);
 800a046:	697b      	ldr	r3, [r7, #20]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d1e6      	bne.n	800a01a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2220      	movs	r2, #32
 800a050:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	2200      	movs	r2, #0
 800a056:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a05a:	2303      	movs	r3, #3
 800a05c:	e011      	b.n	800a082 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	2220      	movs	r2, #32
 800a062:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2220      	movs	r2, #32
 800a068:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2200      	movs	r2, #0
 800a070:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	2200      	movs	r2, #0
 800a076:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2200      	movs	r2, #0
 800a07c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800a080:	2300      	movs	r3, #0
}
 800a082:	4618      	mov	r0, r3
 800a084:	3728      	adds	r7, #40	@ 0x28
 800a086:	46bd      	mov	sp, r7
 800a088:	bd80      	pop	{r7, pc}

0800a08a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a08a:	b580      	push	{r7, lr}
 800a08c:	b084      	sub	sp, #16
 800a08e:	af00      	add	r7, sp, #0
 800a090:	60f8      	str	r0, [r7, #12]
 800a092:	60b9      	str	r1, [r7, #8]
 800a094:	603b      	str	r3, [r7, #0]
 800a096:	4613      	mov	r3, r2
 800a098:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a09a:	e04f      	b.n	800a13c <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a09c:	69bb      	ldr	r3, [r7, #24]
 800a09e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0a2:	d04b      	beq.n	800a13c <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a0a4:	f7fa fc3a 	bl	800491c <HAL_GetTick>
 800a0a8:	4602      	mov	r2, r0
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	1ad3      	subs	r3, r2, r3
 800a0ae:	69ba      	ldr	r2, [r7, #24]
 800a0b0:	429a      	cmp	r2, r3
 800a0b2:	d302      	bcc.n	800a0ba <UART_WaitOnFlagUntilTimeout+0x30>
 800a0b4:	69bb      	ldr	r3, [r7, #24]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d101      	bne.n	800a0be <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a0ba:	2303      	movs	r3, #3
 800a0bc:	e04e      	b.n	800a15c <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	f003 0304 	and.w	r3, r3, #4
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d037      	beq.n	800a13c <UART_WaitOnFlagUntilTimeout+0xb2>
 800a0cc:	68bb      	ldr	r3, [r7, #8]
 800a0ce:	2b80      	cmp	r3, #128	@ 0x80
 800a0d0:	d034      	beq.n	800a13c <UART_WaitOnFlagUntilTimeout+0xb2>
 800a0d2:	68bb      	ldr	r3, [r7, #8]
 800a0d4:	2b40      	cmp	r3, #64	@ 0x40
 800a0d6:	d031      	beq.n	800a13c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	69db      	ldr	r3, [r3, #28]
 800a0de:	f003 0308 	and.w	r3, r3, #8
 800a0e2:	2b08      	cmp	r3, #8
 800a0e4:	d110      	bne.n	800a108 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	2208      	movs	r2, #8
 800a0ec:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a0ee:	68f8      	ldr	r0, [r7, #12]
 800a0f0:	f000 f838 	bl	800a164 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	2208      	movs	r2, #8
 800a0f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	2200      	movs	r2, #0
 800a100:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800a104:	2301      	movs	r3, #1
 800a106:	e029      	b.n	800a15c <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	69db      	ldr	r3, [r3, #28]
 800a10e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a112:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a116:	d111      	bne.n	800a13c <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a120:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a122:	68f8      	ldr	r0, [r7, #12]
 800a124:	f000 f81e 	bl	800a164 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	2220      	movs	r2, #32
 800a12c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	2200      	movs	r2, #0
 800a134:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800a138:	2303      	movs	r3, #3
 800a13a:	e00f      	b.n	800a15c <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	69da      	ldr	r2, [r3, #28]
 800a142:	68bb      	ldr	r3, [r7, #8]
 800a144:	4013      	ands	r3, r2
 800a146:	68ba      	ldr	r2, [r7, #8]
 800a148:	429a      	cmp	r2, r3
 800a14a:	bf0c      	ite	eq
 800a14c:	2301      	moveq	r3, #1
 800a14e:	2300      	movne	r3, #0
 800a150:	b2db      	uxtb	r3, r3
 800a152:	461a      	mov	r2, r3
 800a154:	79fb      	ldrb	r3, [r7, #7]
 800a156:	429a      	cmp	r2, r3
 800a158:	d0a0      	beq.n	800a09c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a15a:	2300      	movs	r3, #0
}
 800a15c:	4618      	mov	r0, r3
 800a15e:	3710      	adds	r7, #16
 800a160:	46bd      	mov	sp, r7
 800a162:	bd80      	pop	{r7, pc}

0800a164 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a164:	b480      	push	{r7}
 800a166:	b095      	sub	sp, #84	@ 0x54
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a172:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a174:	e853 3f00 	ldrex	r3, [r3]
 800a178:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a17a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a17c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a180:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	461a      	mov	r2, r3
 800a188:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a18a:	643b      	str	r3, [r7, #64]	@ 0x40
 800a18c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a18e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a190:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a192:	e841 2300 	strex	r3, r2, [r1]
 800a196:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a198:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d1e6      	bne.n	800a16c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	3308      	adds	r3, #8
 800a1a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1a6:	6a3b      	ldr	r3, [r7, #32]
 800a1a8:	e853 3f00 	ldrex	r3, [r3]
 800a1ac:	61fb      	str	r3, [r7, #28]
   return(result);
 800a1ae:	69fb      	ldr	r3, [r7, #28]
 800a1b0:	f023 0301 	bic.w	r3, r3, #1
 800a1b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	3308      	adds	r3, #8
 800a1bc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a1be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a1c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1c2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a1c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a1c6:	e841 2300 	strex	r3, r2, [r1]
 800a1ca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a1cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d1e5      	bne.n	800a19e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a1d6:	2b01      	cmp	r3, #1
 800a1d8:	d118      	bne.n	800a20c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	e853 3f00 	ldrex	r3, [r3]
 800a1e6:	60bb      	str	r3, [r7, #8]
   return(result);
 800a1e8:	68bb      	ldr	r3, [r7, #8]
 800a1ea:	f023 0310 	bic.w	r3, r3, #16
 800a1ee:	647b      	str	r3, [r7, #68]	@ 0x44
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	461a      	mov	r2, r3
 800a1f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a1f8:	61bb      	str	r3, [r7, #24]
 800a1fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1fc:	6979      	ldr	r1, [r7, #20]
 800a1fe:	69ba      	ldr	r2, [r7, #24]
 800a200:	e841 2300 	strex	r3, r2, [r1]
 800a204:	613b      	str	r3, [r7, #16]
   return(result);
 800a206:	693b      	ldr	r3, [r7, #16]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d1e6      	bne.n	800a1da <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2220      	movs	r2, #32
 800a210:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2200      	movs	r2, #0
 800a218:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	2200      	movs	r2, #0
 800a21e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800a220:	bf00      	nop
 800a222:	3754      	adds	r7, #84	@ 0x54
 800a224:	46bd      	mov	sp, r7
 800a226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22a:	4770      	bx	lr

0800a22c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800a22c:	b084      	sub	sp, #16
 800a22e:	b480      	push	{r7}
 800a230:	b085      	sub	sp, #20
 800a232:	af00      	add	r7, sp, #0
 800a234:	6078      	str	r0, [r7, #4]
 800a236:	f107 001c 	add.w	r0, r7, #28
 800a23a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a23e:	2300      	movs	r3, #0
 800a240:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800a242:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800a244:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800a246:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800a248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800a24a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800a24c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800a24e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800a250:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800a252:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800a256:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800a258:	68fa      	ldr	r2, [r7, #12]
 800a25a:	4313      	orrs	r3, r2
 800a25c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	685a      	ldr	r2, [r3, #4]
 800a262:	4b07      	ldr	r3, [pc, #28]	@ (800a280 <SDMMC_Init+0x54>)
 800a264:	4013      	ands	r3, r2
 800a266:	68fa      	ldr	r2, [r7, #12]
 800a268:	431a      	orrs	r2, r3
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a26e:	2300      	movs	r3, #0
}
 800a270:	4618      	mov	r0, r3
 800a272:	3714      	adds	r7, #20
 800a274:	46bd      	mov	sp, r7
 800a276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27a:	b004      	add	sp, #16
 800a27c:	4770      	bx	lr
 800a27e:	bf00      	nop
 800a280:	ffff8100 	.word	0xffff8100

0800a284 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800a284:	b480      	push	{r7}
 800a286:	b083      	sub	sp, #12
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800a292:	4618      	mov	r0, r3
 800a294:	370c      	adds	r7, #12
 800a296:	46bd      	mov	sp, r7
 800a298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29c:	4770      	bx	lr

0800a29e <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800a29e:	b480      	push	{r7}
 800a2a0:	b083      	sub	sp, #12
 800a2a2:	af00      	add	r7, sp, #0
 800a2a4:	6078      	str	r0, [r7, #4]
 800a2a6:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	681a      	ldr	r2, [r3, #0]
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800a2b2:	2300      	movs	r3, #0
}
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	370c      	adds	r7, #12
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2be:	4770      	bx	lr

0800a2c0 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800a2c0:	b480      	push	{r7}
 800a2c2:	b083      	sub	sp, #12
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2203      	movs	r2, #3
 800a2cc:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800a2ce:	2300      	movs	r3, #0
}
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	370c      	adds	r7, #12
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2da:	4770      	bx	lr

0800a2dc <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800a2dc:	b480      	push	{r7}
 800a2de:	b083      	sub	sp, #12
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	f003 0303 	and.w	r3, r3, #3
}
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	370c      	adds	r7, #12
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f6:	4770      	bx	lr

0800a2f8 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800a2f8:	b480      	push	{r7}
 800a2fa:	b085      	sub	sp, #20
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
 800a300:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a302:	2300      	movs	r3, #0
 800a304:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	681a      	ldr	r2, [r3, #0]
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a30e:	683b      	ldr	r3, [r7, #0]
 800a310:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800a312:	683b      	ldr	r3, [r7, #0]
 800a314:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a316:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800a31c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800a322:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a324:	68fa      	ldr	r2, [r7, #12]
 800a326:	4313      	orrs	r3, r2
 800a328:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	68da      	ldr	r2, [r3, #12]
 800a32e:	4b06      	ldr	r3, [pc, #24]	@ (800a348 <SDMMC_SendCommand+0x50>)
 800a330:	4013      	ands	r3, r2
 800a332:	68fa      	ldr	r2, [r7, #12]
 800a334:	431a      	orrs	r2, r3
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800a33a:	2300      	movs	r3, #0
}
 800a33c:	4618      	mov	r0, r3
 800a33e:	3714      	adds	r7, #20
 800a340:	46bd      	mov	sp, r7
 800a342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a346:	4770      	bx	lr
 800a348:	fffff000 	.word	0xfffff000

0800a34c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800a34c:	b480      	push	{r7}
 800a34e:	b083      	sub	sp, #12
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	691b      	ldr	r3, [r3, #16]
 800a358:	b2db      	uxtb	r3, r3
}
 800a35a:	4618      	mov	r0, r3
 800a35c:	370c      	adds	r7, #12
 800a35e:	46bd      	mov	sp, r7
 800a360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a364:	4770      	bx	lr

0800a366 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800a366:	b480      	push	{r7}
 800a368:	b085      	sub	sp, #20
 800a36a:	af00      	add	r7, sp, #0
 800a36c:	6078      	str	r0, [r7, #4]
 800a36e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	3314      	adds	r3, #20
 800a374:	461a      	mov	r2, r3
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	4413      	add	r3, r2
 800a37a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	681b      	ldr	r3, [r3, #0]
}  
 800a380:	4618      	mov	r0, r3
 800a382:	3714      	adds	r7, #20
 800a384:	46bd      	mov	sp, r7
 800a386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38a:	4770      	bx	lr

0800a38c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800a38c:	b480      	push	{r7}
 800a38e:	b085      	sub	sp, #20
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
 800a394:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a396:	2300      	movs	r3, #0
 800a398:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800a39a:	683b      	ldr	r3, [r7, #0]
 800a39c:	681a      	ldr	r2, [r3, #0]
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	685a      	ldr	r2, [r3, #4]
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a3aa:	683b      	ldr	r3, [r7, #0]
 800a3ac:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a3b2:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800a3b8:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800a3be:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a3c0:	68fa      	ldr	r2, [r7, #12]
 800a3c2:	4313      	orrs	r3, r2
 800a3c4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3ca:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	431a      	orrs	r2, r3
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800a3d6:	2300      	movs	r3, #0

}
 800a3d8:	4618      	mov	r0, r3
 800a3da:	3714      	adds	r7, #20
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e2:	4770      	bx	lr

0800a3e4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b088      	sub	sp, #32
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
 800a3ec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a3ee:	683b      	ldr	r3, [r7, #0]
 800a3f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a3f2:	2310      	movs	r3, #16
 800a3f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a3f6:	2340      	movs	r3, #64	@ 0x40
 800a3f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a3fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a402:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a404:	f107 0308 	add.w	r3, r7, #8
 800a408:	4619      	mov	r1, r3
 800a40a:	6878      	ldr	r0, [r7, #4]
 800a40c:	f7ff ff74 	bl	800a2f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800a410:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a414:	2110      	movs	r1, #16
 800a416:	6878      	ldr	r0, [r7, #4]
 800a418:	f000 f9d6 	bl	800a7c8 <SDMMC_GetCmdResp1>
 800a41c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a41e:	69fb      	ldr	r3, [r7, #28]
}
 800a420:	4618      	mov	r0, r3
 800a422:	3720      	adds	r7, #32
 800a424:	46bd      	mov	sp, r7
 800a426:	bd80      	pop	{r7, pc}

0800a428 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800a428:	b580      	push	{r7, lr}
 800a42a:	b088      	sub	sp, #32
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
 800a430:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800a436:	2311      	movs	r3, #17
 800a438:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a43a:	2340      	movs	r3, #64	@ 0x40
 800a43c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a43e:	2300      	movs	r3, #0
 800a440:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a442:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a446:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a448:	f107 0308 	add.w	r3, r7, #8
 800a44c:	4619      	mov	r1, r3
 800a44e:	6878      	ldr	r0, [r7, #4]
 800a450:	f7ff ff52 	bl	800a2f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800a454:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a458:	2111      	movs	r1, #17
 800a45a:	6878      	ldr	r0, [r7, #4]
 800a45c:	f000 f9b4 	bl	800a7c8 <SDMMC_GetCmdResp1>
 800a460:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a462:	69fb      	ldr	r3, [r7, #28]
}
 800a464:	4618      	mov	r0, r3
 800a466:	3720      	adds	r7, #32
 800a468:	46bd      	mov	sp, r7
 800a46a:	bd80      	pop	{r7, pc}

0800a46c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b088      	sub	sp, #32
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
 800a474:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800a47a:	2312      	movs	r3, #18
 800a47c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a47e:	2340      	movs	r3, #64	@ 0x40
 800a480:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a482:	2300      	movs	r3, #0
 800a484:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a486:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a48a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a48c:	f107 0308 	add.w	r3, r7, #8
 800a490:	4619      	mov	r1, r3
 800a492:	6878      	ldr	r0, [r7, #4]
 800a494:	f7ff ff30 	bl	800a2f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800a498:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a49c:	2112      	movs	r1, #18
 800a49e:	6878      	ldr	r0, [r7, #4]
 800a4a0:	f000 f992 	bl	800a7c8 <SDMMC_GetCmdResp1>
 800a4a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a4a6:	69fb      	ldr	r3, [r7, #28]
}
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	3720      	adds	r7, #32
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	bd80      	pop	{r7, pc}

0800a4b0 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b088      	sub	sp, #32
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
 800a4b8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800a4be:	2318      	movs	r3, #24
 800a4c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a4c2:	2340      	movs	r3, #64	@ 0x40
 800a4c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a4ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a4ce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a4d0:	f107 0308 	add.w	r3, r7, #8
 800a4d4:	4619      	mov	r1, r3
 800a4d6:	6878      	ldr	r0, [r7, #4]
 800a4d8:	f7ff ff0e 	bl	800a2f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800a4dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a4e0:	2118      	movs	r1, #24
 800a4e2:	6878      	ldr	r0, [r7, #4]
 800a4e4:	f000 f970 	bl	800a7c8 <SDMMC_GetCmdResp1>
 800a4e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a4ea:	69fb      	ldr	r3, [r7, #28]
}
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	3720      	adds	r7, #32
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	bd80      	pop	{r7, pc}

0800a4f4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b088      	sub	sp, #32
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
 800a4fc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800a502:	2319      	movs	r3, #25
 800a504:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a506:	2340      	movs	r3, #64	@ 0x40
 800a508:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a50a:	2300      	movs	r3, #0
 800a50c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a50e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a512:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a514:	f107 0308 	add.w	r3, r7, #8
 800a518:	4619      	mov	r1, r3
 800a51a:	6878      	ldr	r0, [r7, #4]
 800a51c:	f7ff feec 	bl	800a2f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800a520:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a524:	2119      	movs	r1, #25
 800a526:	6878      	ldr	r0, [r7, #4]
 800a528:	f000 f94e 	bl	800a7c8 <SDMMC_GetCmdResp1>
 800a52c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a52e:	69fb      	ldr	r3, [r7, #28]
}
 800a530:	4618      	mov	r0, r3
 800a532:	3720      	adds	r7, #32
 800a534:	46bd      	mov	sp, r7
 800a536:	bd80      	pop	{r7, pc}

0800a538 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b088      	sub	sp, #32
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800a540:	2300      	movs	r3, #0
 800a542:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800a544:	230c      	movs	r3, #12
 800a546:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a548:	2340      	movs	r3, #64	@ 0x40
 800a54a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a54c:	2300      	movs	r3, #0
 800a54e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a550:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a554:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a556:	f107 0308 	add.w	r3, r7, #8
 800a55a:	4619      	mov	r1, r3
 800a55c:	6878      	ldr	r0, [r7, #4]
 800a55e:	f7ff fecb 	bl	800a2f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800a562:	4a05      	ldr	r2, [pc, #20]	@ (800a578 <SDMMC_CmdStopTransfer+0x40>)
 800a564:	210c      	movs	r1, #12
 800a566:	6878      	ldr	r0, [r7, #4]
 800a568:	f000 f92e 	bl	800a7c8 <SDMMC_GetCmdResp1>
 800a56c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a56e:	69fb      	ldr	r3, [r7, #28]
}
 800a570:	4618      	mov	r0, r3
 800a572:	3720      	adds	r7, #32
 800a574:	46bd      	mov	sp, r7
 800a576:	bd80      	pop	{r7, pc}
 800a578:	05f5e100 	.word	0x05f5e100

0800a57c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b08a      	sub	sp, #40	@ 0x28
 800a580:	af00      	add	r7, sp, #0
 800a582:	60f8      	str	r0, [r7, #12]
 800a584:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a58c:	2307      	movs	r3, #7
 800a58e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a590:	2340      	movs	r3, #64	@ 0x40
 800a592:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a594:	2300      	movs	r3, #0
 800a596:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a598:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a59c:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a59e:	f107 0310 	add.w	r3, r7, #16
 800a5a2:	4619      	mov	r1, r3
 800a5a4:	68f8      	ldr	r0, [r7, #12]
 800a5a6:	f7ff fea7 	bl	800a2f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800a5aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a5ae:	2107      	movs	r1, #7
 800a5b0:	68f8      	ldr	r0, [r7, #12]
 800a5b2:	f000 f909 	bl	800a7c8 <SDMMC_GetCmdResp1>
 800a5b6:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800a5b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	3728      	adds	r7, #40	@ 0x28
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	bd80      	pop	{r7, pc}

0800a5c2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800a5c2:	b580      	push	{r7, lr}
 800a5c4:	b088      	sub	sp, #32
 800a5c6:	af00      	add	r7, sp, #0
 800a5c8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a5da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a5de:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a5e0:	f107 0308 	add.w	r3, r7, #8
 800a5e4:	4619      	mov	r1, r3
 800a5e6:	6878      	ldr	r0, [r7, #4]
 800a5e8:	f7ff fe86 	bl	800a2f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800a5ec:	6878      	ldr	r0, [r7, #4]
 800a5ee:	f000 fb23 	bl	800ac38 <SDMMC_GetCmdError>
 800a5f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a5f4:	69fb      	ldr	r3, [r7, #28]
}
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	3720      	adds	r7, #32
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	bd80      	pop	{r7, pc}

0800a5fe <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800a5fe:	b580      	push	{r7, lr}
 800a600:	b088      	sub	sp, #32
 800a602:	af00      	add	r7, sp, #0
 800a604:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a606:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800a60a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a60c:	2308      	movs	r3, #8
 800a60e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a610:	2340      	movs	r3, #64	@ 0x40
 800a612:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a614:	2300      	movs	r3, #0
 800a616:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a618:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a61c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a61e:	f107 0308 	add.w	r3, r7, #8
 800a622:	4619      	mov	r1, r3
 800a624:	6878      	ldr	r0, [r7, #4]
 800a626:	f7ff fe67 	bl	800a2f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800a62a:	6878      	ldr	r0, [r7, #4]
 800a62c:	f000 fab6 	bl	800ab9c <SDMMC_GetCmdResp7>
 800a630:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a632:	69fb      	ldr	r3, [r7, #28]
}
 800a634:	4618      	mov	r0, r3
 800a636:	3720      	adds	r7, #32
 800a638:	46bd      	mov	sp, r7
 800a63a:	bd80      	pop	{r7, pc}

0800a63c <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b088      	sub	sp, #32
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
 800a644:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a64a:	2337      	movs	r3, #55	@ 0x37
 800a64c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a64e:	2340      	movs	r3, #64	@ 0x40
 800a650:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a652:	2300      	movs	r3, #0
 800a654:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a656:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a65a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a65c:	f107 0308 	add.w	r3, r7, #8
 800a660:	4619      	mov	r1, r3
 800a662:	6878      	ldr	r0, [r7, #4]
 800a664:	f7ff fe48 	bl	800a2f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800a668:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a66c:	2137      	movs	r1, #55	@ 0x37
 800a66e:	6878      	ldr	r0, [r7, #4]
 800a670:	f000 f8aa 	bl	800a7c8 <SDMMC_GetCmdResp1>
 800a674:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a676:	69fb      	ldr	r3, [r7, #28]
}
 800a678:	4618      	mov	r0, r3
 800a67a:	3720      	adds	r7, #32
 800a67c:	46bd      	mov	sp, r7
 800a67e:	bd80      	pop	{r7, pc}

0800a680 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b088      	sub	sp, #32
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
 800a688:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800a68a:	683a      	ldr	r2, [r7, #0]
 800a68c:	4b0d      	ldr	r3, [pc, #52]	@ (800a6c4 <SDMMC_CmdAppOperCommand+0x44>)
 800a68e:	4313      	orrs	r3, r2
 800a690:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a692:	2329      	movs	r3, #41	@ 0x29
 800a694:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a696:	2340      	movs	r3, #64	@ 0x40
 800a698:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a69a:	2300      	movs	r3, #0
 800a69c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a69e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a6a2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a6a4:	f107 0308 	add.w	r3, r7, #8
 800a6a8:	4619      	mov	r1, r3
 800a6aa:	6878      	ldr	r0, [r7, #4]
 800a6ac:	f7ff fe24 	bl	800a2f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800a6b0:	6878      	ldr	r0, [r7, #4]
 800a6b2:	f000 f9bf 	bl	800aa34 <SDMMC_GetCmdResp3>
 800a6b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a6b8:	69fb      	ldr	r3, [r7, #28]
}
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	3720      	adds	r7, #32
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	bd80      	pop	{r7, pc}
 800a6c2:	bf00      	nop
 800a6c4:	80100000 	.word	0x80100000

0800a6c8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b088      	sub	sp, #32
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a6d4:	2302      	movs	r3, #2
 800a6d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a6d8:	23c0      	movs	r3, #192	@ 0xc0
 800a6da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a6dc:	2300      	movs	r3, #0
 800a6de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a6e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a6e4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a6e6:	f107 0308 	add.w	r3, r7, #8
 800a6ea:	4619      	mov	r1, r3
 800a6ec:	6878      	ldr	r0, [r7, #4]
 800a6ee:	f7ff fe03 	bl	800a2f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a6f2:	6878      	ldr	r0, [r7, #4]
 800a6f4:	f000 f956 	bl	800a9a4 <SDMMC_GetCmdResp2>
 800a6f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a6fa:	69fb      	ldr	r3, [r7, #28]
}
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	3720      	adds	r7, #32
 800a700:	46bd      	mov	sp, r7
 800a702:	bd80      	pop	{r7, pc}

0800a704 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b088      	sub	sp, #32
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
 800a70c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a712:	2309      	movs	r3, #9
 800a714:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a716:	23c0      	movs	r3, #192	@ 0xc0
 800a718:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a71a:	2300      	movs	r3, #0
 800a71c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a71e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a722:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a724:	f107 0308 	add.w	r3, r7, #8
 800a728:	4619      	mov	r1, r3
 800a72a:	6878      	ldr	r0, [r7, #4]
 800a72c:	f7ff fde4 	bl	800a2f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a730:	6878      	ldr	r0, [r7, #4]
 800a732:	f000 f937 	bl	800a9a4 <SDMMC_GetCmdResp2>
 800a736:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a738:	69fb      	ldr	r3, [r7, #28]
}
 800a73a:	4618      	mov	r0, r3
 800a73c:	3720      	adds	r7, #32
 800a73e:	46bd      	mov	sp, r7
 800a740:	bd80      	pop	{r7, pc}

0800a742 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800a742:	b580      	push	{r7, lr}
 800a744:	b088      	sub	sp, #32
 800a746:	af00      	add	r7, sp, #0
 800a748:	6078      	str	r0, [r7, #4]
 800a74a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a74c:	2300      	movs	r3, #0
 800a74e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a750:	2303      	movs	r3, #3
 800a752:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a754:	2340      	movs	r3, #64	@ 0x40
 800a756:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a758:	2300      	movs	r3, #0
 800a75a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a75c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a760:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a762:	f107 0308 	add.w	r3, r7, #8
 800a766:	4619      	mov	r1, r3
 800a768:	6878      	ldr	r0, [r7, #4]
 800a76a:	f7ff fdc5 	bl	800a2f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a76e:	683a      	ldr	r2, [r7, #0]
 800a770:	2103      	movs	r1, #3
 800a772:	6878      	ldr	r0, [r7, #4]
 800a774:	f000 f99c 	bl	800aab0 <SDMMC_GetCmdResp6>
 800a778:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a77a:	69fb      	ldr	r3, [r7, #28]
}
 800a77c:	4618      	mov	r0, r3
 800a77e:	3720      	adds	r7, #32
 800a780:	46bd      	mov	sp, r7
 800a782:	bd80      	pop	{r7, pc}

0800a784 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b088      	sub	sp, #32
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
 800a78c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800a792:	230d      	movs	r3, #13
 800a794:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a796:	2340      	movs	r3, #64	@ 0x40
 800a798:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a79a:	2300      	movs	r3, #0
 800a79c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a79e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a7a2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a7a4:	f107 0308 	add.w	r3, r7, #8
 800a7a8:	4619      	mov	r1, r3
 800a7aa:	6878      	ldr	r0, [r7, #4]
 800a7ac:	f7ff fda4 	bl	800a2f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800a7b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a7b4:	210d      	movs	r1, #13
 800a7b6:	6878      	ldr	r0, [r7, #4]
 800a7b8:	f000 f806 	bl	800a7c8 <SDMMC_GetCmdResp1>
 800a7bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a7be:	69fb      	ldr	r3, [r7, #28]
}
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	3720      	adds	r7, #32
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bd80      	pop	{r7, pc}

0800a7c8 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b088      	sub	sp, #32
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	60f8      	str	r0, [r7, #12]
 800a7d0:	460b      	mov	r3, r1
 800a7d2:	607a      	str	r2, [r7, #4]
 800a7d4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800a7d6:	4b70      	ldr	r3, [pc, #448]	@ (800a998 <SDMMC_GetCmdResp1+0x1d0>)
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	4a70      	ldr	r2, [pc, #448]	@ (800a99c <SDMMC_GetCmdResp1+0x1d4>)
 800a7dc:	fba2 2303 	umull	r2, r3, r2, r3
 800a7e0:	0a5a      	lsrs	r2, r3, #9
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	fb02 f303 	mul.w	r3, r2, r3
 800a7e8:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a7ea:	69fb      	ldr	r3, [r7, #28]
 800a7ec:	1e5a      	subs	r2, r3, #1
 800a7ee:	61fa      	str	r2, [r7, #28]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d102      	bne.n	800a7fa <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a7f4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a7f8:	e0c9      	b.n	800a98e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a7fe:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a800:	69bb      	ldr	r3, [r7, #24]
 800a802:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a806:	2b00      	cmp	r3, #0
 800a808:	d0ef      	beq.n	800a7ea <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a80a:	69bb      	ldr	r3, [r7, #24]
 800a80c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a810:	2b00      	cmp	r3, #0
 800a812:	d1ea      	bne.n	800a7ea <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a818:	f003 0304 	and.w	r3, r3, #4
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d004      	beq.n	800a82a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	2204      	movs	r2, #4
 800a824:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a826:	2304      	movs	r3, #4
 800a828:	e0b1      	b.n	800a98e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a82e:	f003 0301 	and.w	r3, r3, #1
 800a832:	2b00      	cmp	r3, #0
 800a834:	d004      	beq.n	800a840 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	2201      	movs	r2, #1
 800a83a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a83c:	2301      	movs	r3, #1
 800a83e:	e0a6      	b.n	800a98e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	22c5      	movs	r2, #197	@ 0xc5
 800a844:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a846:	68f8      	ldr	r0, [r7, #12]
 800a848:	f7ff fd80 	bl	800a34c <SDMMC_GetCommandResponse>
 800a84c:	4603      	mov	r3, r0
 800a84e:	461a      	mov	r2, r3
 800a850:	7afb      	ldrb	r3, [r7, #11]
 800a852:	4293      	cmp	r3, r2
 800a854:	d001      	beq.n	800a85a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a856:	2301      	movs	r3, #1
 800a858:	e099      	b.n	800a98e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a85a:	2100      	movs	r1, #0
 800a85c:	68f8      	ldr	r0, [r7, #12]
 800a85e:	f7ff fd82 	bl	800a366 <SDMMC_GetResponse>
 800a862:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a864:	697a      	ldr	r2, [r7, #20]
 800a866:	4b4e      	ldr	r3, [pc, #312]	@ (800a9a0 <SDMMC_GetCmdResp1+0x1d8>)
 800a868:	4013      	ands	r3, r2
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d101      	bne.n	800a872 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800a86e:	2300      	movs	r3, #0
 800a870:	e08d      	b.n	800a98e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a872:	697b      	ldr	r3, [r7, #20]
 800a874:	2b00      	cmp	r3, #0
 800a876:	da02      	bge.n	800a87e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a878:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a87c:	e087      	b.n	800a98e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a87e:	697b      	ldr	r3, [r7, #20]
 800a880:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a884:	2b00      	cmp	r3, #0
 800a886:	d001      	beq.n	800a88c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a888:	2340      	movs	r3, #64	@ 0x40
 800a88a:	e080      	b.n	800a98e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a88c:	697b      	ldr	r3, [r7, #20]
 800a88e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a892:	2b00      	cmp	r3, #0
 800a894:	d001      	beq.n	800a89a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a896:	2380      	movs	r3, #128	@ 0x80
 800a898:	e079      	b.n	800a98e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a89a:	697b      	ldr	r3, [r7, #20]
 800a89c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d002      	beq.n	800a8aa <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a8a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a8a8:	e071      	b.n	800a98e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a8aa:	697b      	ldr	r3, [r7, #20]
 800a8ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d002      	beq.n	800a8ba <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a8b4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a8b8:	e069      	b.n	800a98e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a8ba:	697b      	ldr	r3, [r7, #20]
 800a8bc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d002      	beq.n	800a8ca <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a8c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a8c8:	e061      	b.n	800a98e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a8ca:	697b      	ldr	r3, [r7, #20]
 800a8cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d002      	beq.n	800a8da <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a8d4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a8d8:	e059      	b.n	800a98e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a8da:	697b      	ldr	r3, [r7, #20]
 800a8dc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d002      	beq.n	800a8ea <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a8e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a8e8:	e051      	b.n	800a98e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a8ea:	697b      	ldr	r3, [r7, #20]
 800a8ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d002      	beq.n	800a8fa <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a8f4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a8f8:	e049      	b.n	800a98e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a8fa:	697b      	ldr	r3, [r7, #20]
 800a8fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a900:	2b00      	cmp	r3, #0
 800a902:	d002      	beq.n	800a90a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a904:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800a908:	e041      	b.n	800a98e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a90a:	697b      	ldr	r3, [r7, #20]
 800a90c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a910:	2b00      	cmp	r3, #0
 800a912:	d002      	beq.n	800a91a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800a914:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a918:	e039      	b.n	800a98e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a91a:	697b      	ldr	r3, [r7, #20]
 800a91c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a920:	2b00      	cmp	r3, #0
 800a922:	d002      	beq.n	800a92a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a924:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800a928:	e031      	b.n	800a98e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a92a:	697b      	ldr	r3, [r7, #20]
 800a92c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a930:	2b00      	cmp	r3, #0
 800a932:	d002      	beq.n	800a93a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a934:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800a938:	e029      	b.n	800a98e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a93a:	697b      	ldr	r3, [r7, #20]
 800a93c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a940:	2b00      	cmp	r3, #0
 800a942:	d002      	beq.n	800a94a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a944:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a948:	e021      	b.n	800a98e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a94a:	697b      	ldr	r3, [r7, #20]
 800a94c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a950:	2b00      	cmp	r3, #0
 800a952:	d002      	beq.n	800a95a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a954:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800a958:	e019      	b.n	800a98e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a95a:	697b      	ldr	r3, [r7, #20]
 800a95c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a960:	2b00      	cmp	r3, #0
 800a962:	d002      	beq.n	800a96a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a964:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800a968:	e011      	b.n	800a98e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a96a:	697b      	ldr	r3, [r7, #20]
 800a96c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a970:	2b00      	cmp	r3, #0
 800a972:	d002      	beq.n	800a97a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a974:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800a978:	e009      	b.n	800a98e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a97a:	697b      	ldr	r3, [r7, #20]
 800a97c:	f003 0308 	and.w	r3, r3, #8
 800a980:	2b00      	cmp	r3, #0
 800a982:	d002      	beq.n	800a98a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a984:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800a988:	e001      	b.n	800a98e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a98a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800a98e:	4618      	mov	r0, r3
 800a990:	3720      	adds	r7, #32
 800a992:	46bd      	mov	sp, r7
 800a994:	bd80      	pop	{r7, pc}
 800a996:	bf00      	nop
 800a998:	20000004 	.word	0x20000004
 800a99c:	10624dd3 	.word	0x10624dd3
 800a9a0:	fdffe008 	.word	0xfdffe008

0800a9a4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800a9a4:	b480      	push	{r7}
 800a9a6:	b085      	sub	sp, #20
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a9ac:	4b1f      	ldr	r3, [pc, #124]	@ (800aa2c <SDMMC_GetCmdResp2+0x88>)
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	4a1f      	ldr	r2, [pc, #124]	@ (800aa30 <SDMMC_GetCmdResp2+0x8c>)
 800a9b2:	fba2 2303 	umull	r2, r3, r2, r3
 800a9b6:	0a5b      	lsrs	r3, r3, #9
 800a9b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a9bc:	fb02 f303 	mul.w	r3, r2, r3
 800a9c0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	1e5a      	subs	r2, r3, #1
 800a9c6:	60fa      	str	r2, [r7, #12]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d102      	bne.n	800a9d2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a9cc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a9d0:	e026      	b.n	800aa20 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a9d6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a9d8:	68bb      	ldr	r3, [r7, #8]
 800a9da:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d0ef      	beq.n	800a9c2 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a9e2:	68bb      	ldr	r3, [r7, #8]
 800a9e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d1ea      	bne.n	800a9c2 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a9f0:	f003 0304 	and.w	r3, r3, #4
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d004      	beq.n	800aa02 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2204      	movs	r2, #4
 800a9fc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a9fe:	2304      	movs	r3, #4
 800aa00:	e00e      	b.n	800aa20 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa06:	f003 0301 	and.w	r3, r3, #1
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d004      	beq.n	800aa18 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	2201      	movs	r2, #1
 800aa12:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800aa14:	2301      	movs	r3, #1
 800aa16:	e003      	b.n	800aa20 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	22c5      	movs	r2, #197	@ 0xc5
 800aa1c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800aa1e:	2300      	movs	r3, #0
}
 800aa20:	4618      	mov	r0, r3
 800aa22:	3714      	adds	r7, #20
 800aa24:	46bd      	mov	sp, r7
 800aa26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2a:	4770      	bx	lr
 800aa2c:	20000004 	.word	0x20000004
 800aa30:	10624dd3 	.word	0x10624dd3

0800aa34 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800aa34:	b480      	push	{r7}
 800aa36:	b085      	sub	sp, #20
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800aa3c:	4b1a      	ldr	r3, [pc, #104]	@ (800aaa8 <SDMMC_GetCmdResp3+0x74>)
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	4a1a      	ldr	r2, [pc, #104]	@ (800aaac <SDMMC_GetCmdResp3+0x78>)
 800aa42:	fba2 2303 	umull	r2, r3, r2, r3
 800aa46:	0a5b      	lsrs	r3, r3, #9
 800aa48:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aa4c:	fb02 f303 	mul.w	r3, r2, r3
 800aa50:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	1e5a      	subs	r2, r3, #1
 800aa56:	60fa      	str	r2, [r7, #12]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d102      	bne.n	800aa62 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aa5c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800aa60:	e01b      	b.n	800aa9a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa66:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800aa68:	68bb      	ldr	r3, [r7, #8]
 800aa6a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d0ef      	beq.n	800aa52 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800aa72:	68bb      	ldr	r3, [r7, #8]
 800aa74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d1ea      	bne.n	800aa52 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa80:	f003 0304 	and.w	r3, r3, #4
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d004      	beq.n	800aa92 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2204      	movs	r2, #4
 800aa8c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800aa8e:	2304      	movs	r3, #4
 800aa90:	e003      	b.n	800aa9a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	22c5      	movs	r2, #197	@ 0xc5
 800aa96:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800aa98:	2300      	movs	r3, #0
}
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	3714      	adds	r7, #20
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa4:	4770      	bx	lr
 800aaa6:	bf00      	nop
 800aaa8:	20000004 	.word	0x20000004
 800aaac:	10624dd3 	.word	0x10624dd3

0800aab0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b088      	sub	sp, #32
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	60f8      	str	r0, [r7, #12]
 800aab8:	460b      	mov	r3, r1
 800aaba:	607a      	str	r2, [r7, #4]
 800aabc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800aabe:	4b35      	ldr	r3, [pc, #212]	@ (800ab94 <SDMMC_GetCmdResp6+0xe4>)
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	4a35      	ldr	r2, [pc, #212]	@ (800ab98 <SDMMC_GetCmdResp6+0xe8>)
 800aac4:	fba2 2303 	umull	r2, r3, r2, r3
 800aac8:	0a5b      	lsrs	r3, r3, #9
 800aaca:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aace:	fb02 f303 	mul.w	r3, r2, r3
 800aad2:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800aad4:	69fb      	ldr	r3, [r7, #28]
 800aad6:	1e5a      	subs	r2, r3, #1
 800aad8:	61fa      	str	r2, [r7, #28]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d102      	bne.n	800aae4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aade:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800aae2:	e052      	b.n	800ab8a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aae8:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800aaea:	69bb      	ldr	r3, [r7, #24]
 800aaec:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d0ef      	beq.n	800aad4 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800aaf4:	69bb      	ldr	r3, [r7, #24]
 800aaf6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d1ea      	bne.n	800aad4 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab02:	f003 0304 	and.w	r3, r3, #4
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d004      	beq.n	800ab14 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	2204      	movs	r2, #4
 800ab0e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ab10:	2304      	movs	r3, #4
 800ab12:	e03a      	b.n	800ab8a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab18:	f003 0301 	and.w	r3, r3, #1
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d004      	beq.n	800ab2a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	2201      	movs	r2, #1
 800ab24:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ab26:	2301      	movs	r3, #1
 800ab28:	e02f      	b.n	800ab8a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ab2a:	68f8      	ldr	r0, [r7, #12]
 800ab2c:	f7ff fc0e 	bl	800a34c <SDMMC_GetCommandResponse>
 800ab30:	4603      	mov	r3, r0
 800ab32:	461a      	mov	r2, r3
 800ab34:	7afb      	ldrb	r3, [r7, #11]
 800ab36:	4293      	cmp	r3, r2
 800ab38:	d001      	beq.n	800ab3e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ab3a:	2301      	movs	r3, #1
 800ab3c:	e025      	b.n	800ab8a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	22c5      	movs	r2, #197	@ 0xc5
 800ab42:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800ab44:	2100      	movs	r1, #0
 800ab46:	68f8      	ldr	r0, [r7, #12]
 800ab48:	f7ff fc0d 	bl	800a366 <SDMMC_GetResponse>
 800ab4c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800ab4e:	697b      	ldr	r3, [r7, #20]
 800ab50:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d106      	bne.n	800ab66 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800ab58:	697b      	ldr	r3, [r7, #20]
 800ab5a:	0c1b      	lsrs	r3, r3, #16
 800ab5c:	b29a      	uxth	r2, r3
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800ab62:	2300      	movs	r3, #0
 800ab64:	e011      	b.n	800ab8a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800ab66:	697b      	ldr	r3, [r7, #20]
 800ab68:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d002      	beq.n	800ab76 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ab70:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ab74:	e009      	b.n	800ab8a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800ab76:	697b      	ldr	r3, [r7, #20]
 800ab78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d002      	beq.n	800ab86 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ab80:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ab84:	e001      	b.n	800ab8a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ab86:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	3720      	adds	r7, #32
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	bd80      	pop	{r7, pc}
 800ab92:	bf00      	nop
 800ab94:	20000004 	.word	0x20000004
 800ab98:	10624dd3 	.word	0x10624dd3

0800ab9c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800ab9c:	b480      	push	{r7}
 800ab9e:	b085      	sub	sp, #20
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800aba4:	4b22      	ldr	r3, [pc, #136]	@ (800ac30 <SDMMC_GetCmdResp7+0x94>)
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	4a22      	ldr	r2, [pc, #136]	@ (800ac34 <SDMMC_GetCmdResp7+0x98>)
 800abaa:	fba2 2303 	umull	r2, r3, r2, r3
 800abae:	0a5b      	lsrs	r3, r3, #9
 800abb0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800abb4:	fb02 f303 	mul.w	r3, r2, r3
 800abb8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	1e5a      	subs	r2, r3, #1
 800abbe:	60fa      	str	r2, [r7, #12]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d102      	bne.n	800abca <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800abc4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800abc8:	e02c      	b.n	800ac24 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800abce:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800abd0:	68bb      	ldr	r3, [r7, #8]
 800abd2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d0ef      	beq.n	800abba <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800abda:	68bb      	ldr	r3, [r7, #8]
 800abdc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d1ea      	bne.n	800abba <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800abe8:	f003 0304 	and.w	r3, r3, #4
 800abec:	2b00      	cmp	r3, #0
 800abee:	d004      	beq.n	800abfa <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	2204      	movs	r2, #4
 800abf4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800abf6:	2304      	movs	r3, #4
 800abf8:	e014      	b.n	800ac24 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800abfe:	f003 0301 	and.w	r3, r3, #1
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d004      	beq.n	800ac10 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	2201      	movs	r2, #1
 800ac0a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ac0c:	2301      	movs	r3, #1
 800ac0e:	e009      	b.n	800ac24 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d002      	beq.n	800ac22 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	2240      	movs	r2, #64	@ 0x40
 800ac20:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800ac22:	2300      	movs	r3, #0
  
}
 800ac24:	4618      	mov	r0, r3
 800ac26:	3714      	adds	r7, #20
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2e:	4770      	bx	lr
 800ac30:	20000004 	.word	0x20000004
 800ac34:	10624dd3 	.word	0x10624dd3

0800ac38 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800ac38:	b480      	push	{r7}
 800ac3a:	b085      	sub	sp, #20
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ac40:	4b11      	ldr	r3, [pc, #68]	@ (800ac88 <SDMMC_GetCmdError+0x50>)
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	4a11      	ldr	r2, [pc, #68]	@ (800ac8c <SDMMC_GetCmdError+0x54>)
 800ac46:	fba2 2303 	umull	r2, r3, r2, r3
 800ac4a:	0a5b      	lsrs	r3, r3, #9
 800ac4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ac50:	fb02 f303 	mul.w	r3, r2, r3
 800ac54:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	1e5a      	subs	r2, r3, #1
 800ac5a:	60fa      	str	r2, [r7, #12]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d102      	bne.n	800ac66 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ac60:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ac64:	e009      	b.n	800ac7a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d0f1      	beq.n	800ac56 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	22c5      	movs	r2, #197	@ 0xc5
 800ac76:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800ac78:	2300      	movs	r3, #0
}
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	3714      	adds	r7, #20
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac84:	4770      	bx	lr
 800ac86:	bf00      	nop
 800ac88:	20000004 	.word	0x20000004
 800ac8c:	10624dd3 	.word	0x10624dd3

0800ac90 <AUDIO_REC_Start>:
  * @brief  Starts Audio streaming.    
  * @param  None
  * @retval Audio error
  */ 
AUDIO_ErrorTypeDef AUDIO_REC_Start(void)
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b090      	sub	sp, #64	@ 0x40
 800ac94:	af00      	add	r7, sp, #0
  uint32_t byteswritten = 0;
 800ac96:	2300      	movs	r3, #0
 800ac98:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint8_t str[FILEMGR_FILE_NAME_SIZE + 20];

  uwVolume = 100;
 800ac9a:	4b33      	ldr	r3, [pc, #204]	@ (800ad68 <AUDIO_REC_Start+0xd8>)
 800ac9c:	2264      	movs	r2, #100	@ 0x64
 800ac9e:	601a      	str	r2, [r3, #0]

  /* Create a new file system */
  if (f_mount(&SDFatFS, (TCHAR const*) SDPath, 0) != FR_OK) {
 800aca0:	2200      	movs	r2, #0
 800aca2:	4932      	ldr	r1, [pc, #200]	@ (800ad6c <AUDIO_REC_Start+0xdc>)
 800aca4:	4832      	ldr	r0, [pc, #200]	@ (800ad70 <AUDIO_REC_Start+0xe0>)
 800aca6:	f002 faed 	bl	800d284 <f_mount>
 800acaa:	4603      	mov	r3, r0
 800acac:	2b00      	cmp	r3, #0
 800acae:	d002      	beq.n	800acb6 <AUDIO_REC_Start+0x26>
    	Error_Handler(); /* FatFs Initialization Error */
 800acb0:	f7f7 f8b0 	bl	8001e14 <Error_Handler>
 800acb4:	e052      	b.n	800ad5c <AUDIO_REC_Start+0xcc>
  } else {
	  printf("SD card mounted\r\n");
 800acb6:	482f      	ldr	r0, [pc, #188]	@ (800ad74 <AUDIO_REC_Start+0xe4>)
 800acb8:	f009 f958 	bl	8013f6c <puts>
		  	  sizeof(workBuffer)) != FR_OK) {
		  Error_Handler(); / * FatFs Format Error */
//	  } else {
//	  */

	  printf("WAV file created\r\n");
 800acbc:	482e      	ldr	r0, [pc, #184]	@ (800ad78 <AUDIO_REC_Start+0xe8>)
 800acbe:	f009 f955 	bl	8013f6c <puts>
	  if(f_open(&WavFile, REC_WAVE_NAME, FA_CREATE_ALWAYS | FA_WRITE) == FR_OK)
 800acc2:	220a      	movs	r2, #10
 800acc4:	492d      	ldr	r1, [pc, #180]	@ (800ad7c <AUDIO_REC_Start+0xec>)
 800acc6:	482e      	ldr	r0, [pc, #184]	@ (800ad80 <AUDIO_REC_Start+0xf0>)
 800acc8:	f002 fb22 	bl	800d310 <f_open>
 800accc:	4603      	mov	r3, r0
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d144      	bne.n	800ad5c <AUDIO_REC_Start+0xcc>
	  {
		/* Initialize header file */
		WavProcess_EncInit(DEFAULT_AUDIO_IN_FREQ, pHeaderBuff);
 800acd2:	492c      	ldr	r1, [pc, #176]	@ (800ad84 <AUDIO_REC_Start+0xf4>)
 800acd4:	f44f 507a 	mov.w	r0, #16000	@ 0x3e80
 800acd8:	f000 f9c6 	bl	800b068 <WavProcess_EncInit>

		/* Write header file */
		if(f_write(&WavFile, pHeaderBuff, 44, (void*)&byteswritten) == FR_OK)
 800acdc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800ace0:	222c      	movs	r2, #44	@ 0x2c
 800ace2:	4928      	ldr	r1, [pc, #160]	@ (800ad84 <AUDIO_REC_Start+0xf4>)
 800ace4:	4826      	ldr	r0, [pc, #152]	@ (800ad80 <AUDIO_REC_Start+0xf0>)
 800ace6:	f002 fe0c 	bl	800d902 <f_write>
 800acea:	4603      	mov	r3, r0
 800acec:	2b00      	cmp	r3, #0
 800acee:	d135      	bne.n	800ad5c <AUDIO_REC_Start+0xcc>
		{
		  printf("State : ready to record\r\n");
 800acf0:	4825      	ldr	r0, [pc, #148]	@ (800ad88 <AUDIO_REC_Start+0xf8>)
 800acf2:	f009 f93b 	bl	8013f6c <puts>
		  AudioState = AUDIO_STATE_RECORD;
 800acf6:	4b25      	ldr	r3, [pc, #148]	@ (800ad8c <AUDIO_REC_Start+0xfc>)
 800acf8:	2205      	movs	r2, #5
 800acfa:	701a      	strb	r2, [r3, #0]

			if(byteswritten != 0)
 800acfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d02c      	beq.n	800ad5c <AUDIO_REC_Start+0xcc>
			{
			  BSP_AUDIO_IN_Init(DEFAULT_AUDIO_IN_FREQ, DEFAULT_AUDIO_IN_BIT_RESOLUTION, DEFAULT_AUDIO_IN_CHANNEL_NBR);
 800ad02:	2202      	movs	r2, #2
 800ad04:	2110      	movs	r1, #16
 800ad06:	f44f 507a 	mov.w	r0, #16000	@ 0x3e80
 800ad0a:	f7f9 fb63 	bl	80043d4 <BSP_AUDIO_IN_Init>
			  printf("Recording config initialized\r\n");
 800ad0e:	4820      	ldr	r0, [pc, #128]	@ (800ad90 <AUDIO_REC_Start+0x100>)
 800ad10:	f009 f92c 	bl	8013f6c <puts>
			  BSP_AUDIO_IN_Record((uint16_t*)&BufferCtl.pcm_buff[0], AUDIO_IN_PCM_BUFFER_SIZE);
 800ad14:	f44f 5110 	mov.w	r1, #9216	@ 0x2400
 800ad18:	481e      	ldr	r0, [pc, #120]	@ (800ad94 <AUDIO_REC_Start+0x104>)
 800ad1a:	f7f9 fbd9 	bl	80044d0 <BSP_AUDIO_IN_Record>
			  printf("Recording started...\r\n");
 800ad1e:	481e      	ldr	r0, [pc, #120]	@ (800ad98 <AUDIO_REC_Start+0x108>)
 800ad20:	f009 f924 	bl	8013f6c <puts>
			  BufferCtl.fptr = byteswritten;
 800ad24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad26:	4a1b      	ldr	r2, [pc, #108]	@ (800ad94 <AUDIO_REC_Start+0x104>)
 800ad28:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 800ad2c:	f8c2 380c 	str.w	r3, [r2, #2060]	@ 0x80c
			  BufferCtl.pcm_ptr = 0;
 800ad30:	4b18      	ldr	r3, [pc, #96]	@ (800ad94 <AUDIO_REC_Start+0x104>)
 800ad32:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800ad36:	461a      	mov	r2, r3
 800ad38:	2300      	movs	r3, #0
 800ad3a:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800
			  BufferCtl.offset = 0;
 800ad3e:	4b15      	ldr	r3, [pc, #84]	@ (800ad94 <AUDIO_REC_Start+0x104>)
 800ad40:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800ad44:	461a      	mov	r2, r3
 800ad46:	2300      	movs	r3, #0
 800ad48:	f8c2 3808 	str.w	r3, [r2, #2056]	@ 0x808
			  BufferCtl.wr_state = BUFFER_EMPTY;
 800ad4c:	4b11      	ldr	r3, [pc, #68]	@ (800ad94 <AUDIO_REC_Start+0x104>)
 800ad4e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800ad52:	2200      	movs	r2, #0
 800ad54:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
			  return AUDIO_ERROR_NONE;
 800ad58:	2300      	movs	r3, #0
 800ad5a:	e000      	b.n	800ad5e <AUDIO_REC_Start+0xce>
			}
		}
	  }
	  //}
  }
  return AUDIO_ERROR_IO;
 800ad5c:	2301      	movs	r3, #1
}
 800ad5e:	4618      	mov	r0, r3
 800ad60:	3740      	adds	r7, #64	@ 0x40
 800ad62:	46bd      	mov	sp, r7
 800ad64:	bd80      	pop	{r7, pc}
 800ad66:	bf00      	nop
 800ad68:	20000044 	.word	0x20000044
 800ad6c:	2001e7e8 	.word	0x2001e7e8
 800ad70:	2001e7ec 	.word	0x2001e7ec
 800ad74:	08016bf8 	.word	0x08016bf8
 800ad78:	08016c0c 	.word	0x08016c0c
 800ad7c:	08016c20 	.word	0x08016c20
 800ad80:	2001e5b4 	.word	0x2001e5b4
 800ad84:	20019d4c 	.word	0x20019d4c
 800ad88:	08016c2c 	.word	0x08016c2c
 800ad8c:	20000a0c 	.word	0x20000a0c
 800ad90:	08016c48 	.word	0x08016c48
 800ad94:	20019d78 	.word	0x20019d78
 800ad98:	08016c68 	.word	0x08016c68

0800ad9c <AUDIO_REC_Process>:
  * @brief  Manages Audio process. 
  * @param  None
  * @retval Audio error
  */
AUDIO_ErrorTypeDef AUDIO_REC_Process(void)
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b088      	sub	sp, #32
 800ada0:	af00      	add	r7, sp, #0
  uint32_t byteswritten = 0;
 800ada2:	2300      	movs	r3, #0
 800ada4:	617b      	str	r3, [r7, #20]
  AUDIO_ErrorTypeDef audio_error = AUDIO_ERROR_NONE;
 800ada6:	2300      	movs	r3, #0
 800ada8:	77fb      	strb	r3, [r7, #31]
  uint32_t elapsed_time; 
  static uint32_t prev_elapsed_time = 0xFFFFFFFF;
  uint8_t str[16];
  //static TS_StateTypeDef  TS_State={0};
  //printf("PRE SWITCH\r\n");
  switch(AudioState)
 800adaa:	4b59      	ldr	r3, [pc, #356]	@ (800af10 <AUDIO_REC_Process+0x174>)
 800adac:	781b      	ldrb	r3, [r3, #0]
 800adae:	2b05      	cmp	r3, #5
 800adb0:	d002      	beq.n	800adb8 <AUDIO_REC_Process+0x1c>
 800adb2:	2b0a      	cmp	r3, #10
 800adb4:	d079      	beq.n	800aeaa <AUDIO_REC_Process+0x10e>

  	case AUDIO_STATE_IDLE:
  	case AUDIO_STATE_INIT:
  	default:
      /* Do Nothing */
      break;
 800adb6:	e0a7      	b.n	800af08 <AUDIO_REC_Process+0x16c>
      if(BufferCtl.fptr >= REC_SAMPLE_LENGTH)
 800adb8:	4b56      	ldr	r3, [pc, #344]	@ (800af14 <AUDIO_REC_Process+0x178>)
 800adba:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800adbe:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800adc2:	f5b3 4f7a 	cmp.w	r3, #64000	@ 0xfa00
 800adc6:	d303      	bcc.n	800add0 <AUDIO_REC_Process+0x34>
        AudioState = AUDIO_STATE_STOP;
 800adc8:	4b51      	ldr	r3, [pc, #324]	@ (800af10 <AUDIO_REC_Process+0x174>)
 800adca:	220a      	movs	r2, #10
 800adcc:	701a      	strb	r2, [r3, #0]
        break;
 800adce:	e09b      	b.n	800af08 <AUDIO_REC_Process+0x16c>
      if(BufferCtl.wr_state == BUFFER_FULL)
 800add0:	4b50      	ldr	r3, [pc, #320]	@ (800af14 <AUDIO_REC_Process+0x178>)
 800add2:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800add6:	f893 3804 	ldrb.w	r3, [r3, #2052]	@ 0x804
 800adda:	2b01      	cmp	r3, #1
 800addc:	d128      	bne.n	800ae30 <AUDIO_REC_Process+0x94>
        if(f_write(&WavFile, (uint8_t*)(BufferCtl.pcm_buff + BufferCtl.offset),
 800adde:	4b4d      	ldr	r3, [pc, #308]	@ (800af14 <AUDIO_REC_Process+0x178>)
 800ade0:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800ade4:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 800ade8:	005b      	lsls	r3, r3, #1
 800adea:	4a4a      	ldr	r2, [pc, #296]	@ (800af14 <AUDIO_REC_Process+0x178>)
 800adec:	1899      	adds	r1, r3, r2
 800adee:	f107 0314 	add.w	r3, r7, #20
 800adf2:	f44f 5210 	mov.w	r2, #9216	@ 0x2400
 800adf6:	4848      	ldr	r0, [pc, #288]	@ (800af18 <AUDIO_REC_Process+0x17c>)
 800adf8:	f002 fd83 	bl	800d902 <f_write>
 800adfc:	4603      	mov	r3, r0
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d004      	beq.n	800ae0c <AUDIO_REC_Process+0x70>
          printf("recording failed\r\n");
 800ae02:	4846      	ldr	r0, [pc, #280]	@ (800af1c <AUDIO_REC_Process+0x180>)
 800ae04:	f009 f8b2 	bl	8013f6c <puts>
          return AUDIO_ERROR_IO;
 800ae08:	2301      	movs	r3, #1
 800ae0a:	e07d      	b.n	800af08 <AUDIO_REC_Process+0x16c>
        BufferCtl.fptr += byteswritten;
 800ae0c:	4b41      	ldr	r3, [pc, #260]	@ (800af14 <AUDIO_REC_Process+0x178>)
 800ae0e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800ae12:	f8d3 280c 	ldr.w	r2, [r3, #2060]	@ 0x80c
 800ae16:	697b      	ldr	r3, [r7, #20]
 800ae18:	4413      	add	r3, r2
 800ae1a:	4a3e      	ldr	r2, [pc, #248]	@ (800af14 <AUDIO_REC_Process+0x178>)
 800ae1c:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 800ae20:	f8c2 380c 	str.w	r3, [r2, #2060]	@ 0x80c
        BufferCtl.wr_state =  BUFFER_EMPTY;
 800ae24:	4b3b      	ldr	r3, [pc, #236]	@ (800af14 <AUDIO_REC_Process+0x178>)
 800ae26:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
      elapsed_time = BufferCtl.fptr / (DEFAULT_AUDIO_IN_FREQ * DEFAULT_AUDIO_IN_CHANNEL_NBR * 2);
 800ae30:	4b38      	ldr	r3, [pc, #224]	@ (800af14 <AUDIO_REC_Process+0x178>)
 800ae32:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800ae36:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800ae3a:	4a39      	ldr	r2, [pc, #228]	@ (800af20 <AUDIO_REC_Process+0x184>)
 800ae3c:	fba2 2303 	umull	r2, r3, r2, r3
 800ae40:	0b1b      	lsrs	r3, r3, #12
 800ae42:	61bb      	str	r3, [r7, #24]
      if(prev_elapsed_time != elapsed_time)
 800ae44:	4b37      	ldr	r3, [pc, #220]	@ (800af24 <AUDIO_REC_Process+0x188>)
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	69ba      	ldr	r2, [r7, #24]
 800ae4a:	429a      	cmp	r2, r3
 800ae4c:	d05b      	beq.n	800af06 <AUDIO_REC_Process+0x16a>
        prev_elapsed_time = elapsed_time;
 800ae4e:	4a35      	ldr	r2, [pc, #212]	@ (800af24 <AUDIO_REC_Process+0x188>)
 800ae50:	69bb      	ldr	r3, [r7, #24]
 800ae52:	6013      	str	r3, [r2, #0]
        printf("Elapsed time : \r\n");
 800ae54:	4834      	ldr	r0, [pc, #208]	@ (800af28 <AUDIO_REC_Process+0x18c>)
 800ae56:	f009 f889 	bl	8013f6c <puts>
        printf("[%02d:%02d]\r\n", (int)(elapsed_time /60), (int)(elapsed_time%60));
 800ae5a:	69bb      	ldr	r3, [r7, #24]
 800ae5c:	4a33      	ldr	r2, [pc, #204]	@ (800af2c <AUDIO_REC_Process+0x190>)
 800ae5e:	fba2 2303 	umull	r2, r3, r2, r3
 800ae62:	095b      	lsrs	r3, r3, #5
 800ae64:	4618      	mov	r0, r3
 800ae66:	69b9      	ldr	r1, [r7, #24]
 800ae68:	4b30      	ldr	r3, [pc, #192]	@ (800af2c <AUDIO_REC_Process+0x190>)
 800ae6a:	fba3 2301 	umull	r2, r3, r3, r1
 800ae6e:	095a      	lsrs	r2, r3, #5
 800ae70:	4613      	mov	r3, r2
 800ae72:	011b      	lsls	r3, r3, #4
 800ae74:	1a9b      	subs	r3, r3, r2
 800ae76:	009b      	lsls	r3, r3, #2
 800ae78:	1aca      	subs	r2, r1, r3
 800ae7a:	4613      	mov	r3, r2
 800ae7c:	461a      	mov	r2, r3
 800ae7e:	4601      	mov	r1, r0
 800ae80:	482b      	ldr	r0, [pc, #172]	@ (800af30 <AUDIO_REC_Process+0x194>)
 800ae82:	f009 f80b 	bl	8013e9c <iprintf>
        printf("File size : \r\n");
 800ae86:	482b      	ldr	r0, [pc, #172]	@ (800af34 <AUDIO_REC_Process+0x198>)
 800ae88:	f009 f870 	bl	8013f6c <puts>
        printf("%4d KB\r\n", (int)((int32_t)BufferCtl.fptr/1024));
 800ae8c:	4b21      	ldr	r3, [pc, #132]	@ (800af14 <AUDIO_REC_Process+0x178>)
 800ae8e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800ae92:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	da01      	bge.n	800ae9e <AUDIO_REC_Process+0x102>
 800ae9a:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 800ae9e:	129b      	asrs	r3, r3, #10
 800aea0:	4619      	mov	r1, r3
 800aea2:	4825      	ldr	r0, [pc, #148]	@ (800af38 <AUDIO_REC_Process+0x19c>)
 800aea4:	f008 fffa 	bl	8013e9c <iprintf>
      break;
 800aea8:	e02d      	b.n	800af06 <AUDIO_REC_Process+0x16a>
      BSP_AUDIO_IN_Stop(CODEC_PDWN_SW);
 800aeaa:	2002      	movs	r0, #2
 800aeac:	f7f9 fb28 	bl	8004500 <BSP_AUDIO_IN_Stop>
      HAL_Delay(300);
 800aeb0:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800aeb4:	f7f9 fd3e 	bl	8004934 <HAL_Delay>
      if(f_lseek(&WavFile, 0) == FR_OK)
 800aeb8:	2100      	movs	r1, #0
 800aeba:	4817      	ldr	r0, [pc, #92]	@ (800af18 <AUDIO_REC_Process+0x17c>)
 800aebc:	f002 ff3e 	bl	800dd3c <f_lseek>
 800aec0:	4603      	mov	r3, r0
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d113      	bne.n	800aeee <AUDIO_REC_Process+0x152>
        WavProcess_HeaderUpdate(pHeaderBuff, &WaveFormat);
 800aec6:	491d      	ldr	r1, [pc, #116]	@ (800af3c <AUDIO_REC_Process+0x1a0>)
 800aec8:	481d      	ldr	r0, [pc, #116]	@ (800af40 <AUDIO_REC_Process+0x1a4>)
 800aeca:	f000 f9e5 	bl	800b298 <WavProcess_HeaderUpdate>
        if(f_write(&WavFile, pHeaderBuff, sizeof(WAVE_FormatTypeDef), (void*)&byteswritten) == FR_OK)
 800aece:	f107 0314 	add.w	r3, r7, #20
 800aed2:	222c      	movs	r2, #44	@ 0x2c
 800aed4:	491a      	ldr	r1, [pc, #104]	@ (800af40 <AUDIO_REC_Process+0x1a4>)
 800aed6:	4810      	ldr	r0, [pc, #64]	@ (800af18 <AUDIO_REC_Process+0x17c>)
 800aed8:	f002 fd13 	bl	800d902 <f_write>
 800aedc:	4603      	mov	r3, r0
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d102      	bne.n	800aee8 <AUDIO_REC_Process+0x14c>
          audio_error = AUDIO_ERROR_EOF;
 800aee2:	2302      	movs	r3, #2
 800aee4:	77fb      	strb	r3, [r7, #31]
 800aee6:	e004      	b.n	800aef2 <AUDIO_REC_Process+0x156>
          audio_error = AUDIO_ERROR_IO;
 800aee8:	2301      	movs	r3, #1
 800aeea:	77fb      	strb	r3, [r7, #31]
 800aeec:	e001      	b.n	800aef2 <AUDIO_REC_Process+0x156>
        audio_error = AUDIO_ERROR_IO;
 800aeee:	2301      	movs	r3, #1
 800aef0:	77fb      	strb	r3, [r7, #31]
      AudioState = AUDIO_STATE_IDLE;
 800aef2:	4b07      	ldr	r3, [pc, #28]	@ (800af10 <AUDIO_REC_Process+0x174>)
 800aef4:	2200      	movs	r2, #0
 800aef6:	701a      	strb	r2, [r3, #0]
      f_close(&WavFile);
 800aef8:	4807      	ldr	r0, [pc, #28]	@ (800af18 <AUDIO_REC_Process+0x17c>)
 800aefa:	f002 fef5 	bl	800dce8 <f_close>
      printf("wave file closed success\r\n");
 800aefe:	4811      	ldr	r0, [pc, #68]	@ (800af44 <AUDIO_REC_Process+0x1a8>)
 800af00:	f009 f834 	bl	8013f6c <puts>
      break;
 800af04:	e000      	b.n	800af08 <AUDIO_REC_Process+0x16c>
      break;
 800af06:	bf00      	nop
      return audio_error;
    }
}
 800af08:	4618      	mov	r0, r3
 800af0a:	3720      	adds	r7, #32
 800af0c:	46bd      	mov	sp, r7
 800af0e:	bd80      	pop	{r7, pc}
 800af10:	20000a0c 	.word	0x20000a0c
 800af14:	20019d78 	.word	0x20019d78
 800af18:	2001e5b4 	.word	0x2001e5b4
 800af1c:	08016c80 	.word	0x08016c80
 800af20:	10624dd3 	.word	0x10624dd3
 800af24:	20000048 	.word	0x20000048
 800af28:	08016c94 	.word	0x08016c94
 800af2c:	88888889 	.word	0x88888889
 800af30:	08016ca8 	.word	0x08016ca8
 800af34:	08016cb8 	.word	0x08016cb8
 800af38:	08016cc8 	.word	0x08016cc8
 800af3c:	2001e588 	.word	0x2001e588
 800af40:	20019d4c 	.word	0x20019d4c
 800af44:	08016cd4 	.word	0x08016cd4

0800af48 <BSP_AUDIO_IN_TransferComplete_CallBack>:
  * @brief  Calculates the remaining file size and new position of the pointer.
  * @param  None
  * @retval None
  */
void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
 800af48:	b480      	push	{r7}
 800af4a:	af00      	add	r7, sp, #0
  BufferCtl.pcm_ptr+= AUDIO_IN_PCM_BUFFER_SIZE/2;
 800af4c:	4b21      	ldr	r3, [pc, #132]	@ (800afd4 <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800af4e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800af52:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800af56:	f503 5390 	add.w	r3, r3, #4608	@ 0x1200
 800af5a:	4a1e      	ldr	r2, [pc, #120]	@ (800afd4 <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800af5c:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 800af60:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800
  if(BufferCtl.pcm_ptr == AUDIO_IN_PCM_BUFFER_SIZE/2)
 800af64:	4b1b      	ldr	r3, [pc, #108]	@ (800afd4 <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800af66:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800af6a:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800af6e:	f5b3 5f90 	cmp.w	r3, #4608	@ 0x1200
 800af72:	d10c      	bne.n	800af8e <BSP_AUDIO_IN_TransferComplete_CallBack+0x46>
  {
    BufferCtl.wr_state   =  BUFFER_FULL;
 800af74:	4b17      	ldr	r3, [pc, #92]	@ (800afd4 <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800af76:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800af7a:	2201      	movs	r2, #1
 800af7c:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
    BufferCtl.offset  = 0;
 800af80:	4b14      	ldr	r3, [pc, #80]	@ (800afd4 <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800af82:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800af86:	461a      	mov	r2, r3
 800af88:	2300      	movs	r3, #0
 800af8a:	f8c2 3808 	str.w	r3, [r2, #2056]	@ 0x808
  }
  
  if(BufferCtl.pcm_ptr >= AUDIO_IN_PCM_BUFFER_SIZE)
 800af8e:	4b11      	ldr	r3, [pc, #68]	@ (800afd4 <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800af90:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800af94:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800af98:	f5b3 5f10 	cmp.w	r3, #9216	@ 0x2400
 800af9c:	d314      	bcc.n	800afc8 <BSP_AUDIO_IN_TransferComplete_CallBack+0x80>
  {
    BufferCtl.wr_state   =  BUFFER_FULL;
 800af9e:	4b0d      	ldr	r3, [pc, #52]	@ (800afd4 <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800afa0:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800afa4:	2201      	movs	r2, #1
 800afa6:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
    BufferCtl.offset  = AUDIO_IN_PCM_BUFFER_SIZE/2;    
 800afaa:	4b0a      	ldr	r3, [pc, #40]	@ (800afd4 <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800afac:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800afb0:	461a      	mov	r2, r3
 800afb2:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 800afb6:	f8c2 3808 	str.w	r3, [r2, #2056]	@ 0x808
    BufferCtl.pcm_ptr = 0;
 800afba:	4b06      	ldr	r3, [pc, #24]	@ (800afd4 <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800afbc:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800afc0:	461a      	mov	r2, r3
 800afc2:	2300      	movs	r3, #0
 800afc4:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800
  }
}
 800afc8:	bf00      	nop
 800afca:	46bd      	mov	sp, r7
 800afcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd0:	4770      	bx	lr
 800afd2:	bf00      	nop
 800afd4:	20019d78 	.word	0x20019d78

0800afd8 <BSP_AUDIO_IN_HalfTransfer_CallBack>:
  * @brief  Manages the DMA Half Transfer complete interrupt.
  * @param  None
  * @retval None
  */
void BSP_AUDIO_IN_HalfTransfer_CallBack(void)
{ 
 800afd8:	b480      	push	{r7}
 800afda:	af00      	add	r7, sp, #0
  BufferCtl.pcm_ptr+= AUDIO_IN_PCM_BUFFER_SIZE/2;
 800afdc:	4b21      	ldr	r3, [pc, #132]	@ (800b064 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800afde:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800afe2:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800afe6:	f503 5390 	add.w	r3, r3, #4608	@ 0x1200
 800afea:	4a1e      	ldr	r2, [pc, #120]	@ (800b064 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800afec:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 800aff0:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800
  if(BufferCtl.pcm_ptr == AUDIO_IN_PCM_BUFFER_SIZE/2)
 800aff4:	4b1b      	ldr	r3, [pc, #108]	@ (800b064 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800aff6:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800affa:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800affe:	f5b3 5f90 	cmp.w	r3, #4608	@ 0x1200
 800b002:	d10c      	bne.n	800b01e <BSP_AUDIO_IN_HalfTransfer_CallBack+0x46>
  {
    BufferCtl.wr_state   =  BUFFER_FULL;
 800b004:	4b17      	ldr	r3, [pc, #92]	@ (800b064 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800b006:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800b00a:	2201      	movs	r2, #1
 800b00c:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
    BufferCtl.offset  = 0;
 800b010:	4b14      	ldr	r3, [pc, #80]	@ (800b064 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800b012:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800b016:	461a      	mov	r2, r3
 800b018:	2300      	movs	r3, #0
 800b01a:	f8c2 3808 	str.w	r3, [r2, #2056]	@ 0x808
  }
  
  if(BufferCtl.pcm_ptr >= AUDIO_IN_PCM_BUFFER_SIZE)
 800b01e:	4b11      	ldr	r3, [pc, #68]	@ (800b064 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800b020:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800b024:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800b028:	f5b3 5f10 	cmp.w	r3, #9216	@ 0x2400
 800b02c:	d314      	bcc.n	800b058 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x80>
  {
    BufferCtl.wr_state   =  BUFFER_FULL;
 800b02e:	4b0d      	ldr	r3, [pc, #52]	@ (800b064 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800b030:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800b034:	2201      	movs	r2, #1
 800b036:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
    BufferCtl.offset  = AUDIO_IN_PCM_BUFFER_SIZE/2;    
 800b03a:	4b0a      	ldr	r3, [pc, #40]	@ (800b064 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800b03c:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800b040:	461a      	mov	r2, r3
 800b042:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 800b046:	f8c2 3808 	str.w	r3, [r2, #2056]	@ 0x808
    BufferCtl.pcm_ptr = 0;
 800b04a:	4b06      	ldr	r3, [pc, #24]	@ (800b064 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800b04c:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800b050:	461a      	mov	r2, r3
 800b052:	2300      	movs	r3, #0
 800b054:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800
  }
}
 800b058:	bf00      	nop
 800b05a:	46bd      	mov	sp, r7
 800b05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b060:	4770      	bx	lr
 800b062:	bf00      	nop
 800b064:	20019d78 	.word	0x20019d78

0800b068 <WavProcess_EncInit>:
  * @param  Freq: Sampling frequency.
  * @param  pHeader: Pointer to the WAV file header to be written.  
  * @retval 0 if success, !0 else.
  */
static uint32_t WavProcess_EncInit(uint32_t Freq, uint8_t *pHeader)
{  
 800b068:	b580      	push	{r7, lr}
 800b06a:	b082      	sub	sp, #8
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
 800b070:	6039      	str	r1, [r7, #0]
  /* Initialize the encoder structure */
  WaveFormat.SampleRate = Freq;        /* Audio sampling frequency */
 800b072:	4a1b      	ldr	r2, [pc, #108]	@ (800b0e0 <WavProcess_EncInit+0x78>)
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	6193      	str	r3, [r2, #24]
  WaveFormat.NbrChannels = 2;          /* Number of channels: 1:Mono or 2:Stereo */
 800b078:	4b19      	ldr	r3, [pc, #100]	@ (800b0e0 <WavProcess_EncInit+0x78>)
 800b07a:	2202      	movs	r2, #2
 800b07c:	82da      	strh	r2, [r3, #22]
  WaveFormat.BitPerSample = 16;        /* Number of bits per sample (16, 24 or 32) */
 800b07e:	4b18      	ldr	r3, [pc, #96]	@ (800b0e0 <WavProcess_EncInit+0x78>)
 800b080:	2210      	movs	r2, #16
 800b082:	845a      	strh	r2, [r3, #34]	@ 0x22
  WaveFormat.FileSize = 0x001D4C00;    /* Total length of useful audio data (payload) */
 800b084:	4b16      	ldr	r3, [pc, #88]	@ (800b0e0 <WavProcess_EncInit+0x78>)
 800b086:	4a17      	ldr	r2, [pc, #92]	@ (800b0e4 <WavProcess_EncInit+0x7c>)
 800b088:	605a      	str	r2, [r3, #4]
  WaveFormat.SubChunk1Size = 44;       /* The file header chunk size */
 800b08a:	4b15      	ldr	r3, [pc, #84]	@ (800b0e0 <WavProcess_EncInit+0x78>)
 800b08c:	222c      	movs	r2, #44	@ 0x2c
 800b08e:	611a      	str	r2, [r3, #16]
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
 800b090:	4b13      	ldr	r3, [pc, #76]	@ (800b0e0 <WavProcess_EncInit+0x78>)
 800b092:	699b      	ldr	r3, [r3, #24]
                        (WaveFormat.BitPerSample/8) * \
 800b094:	4a12      	ldr	r2, [pc, #72]	@ (800b0e0 <WavProcess_EncInit+0x78>)
 800b096:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 800b098:	08d2      	lsrs	r2, r2, #3
 800b09a:	b292      	uxth	r2, r2
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
 800b09c:	fb02 f303 	mul.w	r3, r2, r3
                         WaveFormat.NbrChannels);     /* Number of bytes per second  (sample rate * block align)  */
 800b0a0:	4a0f      	ldr	r2, [pc, #60]	@ (800b0e0 <WavProcess_EncInit+0x78>)
 800b0a2:	8ad2      	ldrh	r2, [r2, #22]
                        (WaveFormat.BitPerSample/8) * \
 800b0a4:	fb02 f303 	mul.w	r3, r2, r3
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
 800b0a8:	4a0d      	ldr	r2, [pc, #52]	@ (800b0e0 <WavProcess_EncInit+0x78>)
 800b0aa:	61d3      	str	r3, [r2, #28]
  WaveFormat.BlockAlign = WaveFormat.NbrChannels * \
 800b0ac:	4b0c      	ldr	r3, [pc, #48]	@ (800b0e0 <WavProcess_EncInit+0x78>)
 800b0ae:	8ada      	ldrh	r2, [r3, #22]
                         (WaveFormat.BitPerSample/8); /* channels * bits/sample / 8 */
 800b0b0:	4b0b      	ldr	r3, [pc, #44]	@ (800b0e0 <WavProcess_EncInit+0x78>)
 800b0b2:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
  WaveFormat.BlockAlign = WaveFormat.NbrChannels * \
 800b0b4:	08db      	lsrs	r3, r3, #3
 800b0b6:	b29b      	uxth	r3, r3
 800b0b8:	fb12 f303 	smulbb	r3, r2, r3
 800b0bc:	b29a      	uxth	r2, r3
 800b0be:	4b08      	ldr	r3, [pc, #32]	@ (800b0e0 <WavProcess_EncInit+0x78>)
 800b0c0:	841a      	strh	r2, [r3, #32]
  
  /* Parse the wav file header and extract required information */
  if(WavProcess_HeaderInit(pHeader, &WaveFormat))
 800b0c2:	4907      	ldr	r1, [pc, #28]	@ (800b0e0 <WavProcess_EncInit+0x78>)
 800b0c4:	6838      	ldr	r0, [r7, #0]
 800b0c6:	f000 f80f 	bl	800b0e8 <WavProcess_HeaderInit>
 800b0ca:	4603      	mov	r3, r0
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d001      	beq.n	800b0d4 <WavProcess_EncInit+0x6c>
  {
    return 1;
 800b0d0:	2301      	movs	r3, #1
 800b0d2:	e000      	b.n	800b0d6 <WavProcess_EncInit+0x6e>
  }
  return 0;
 800b0d4:	2300      	movs	r3, #0
}
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	3708      	adds	r7, #8
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	bd80      	pop	{r7, pc}
 800b0de:	bf00      	nop
 800b0e0:	2001e588 	.word	0x2001e588
 800b0e4:	001d4c00 	.word	0x001d4c00

0800b0e8 <WavProcess_HeaderInit>:
  * @param  pHeader: Header Buffer to be filled
  * @param  pWaveFormatStruct: Pointer to the wave structure to be filled.
  * @retval 0 if passed, !0 if failed.
  */
static uint32_t WavProcess_HeaderInit(uint8_t* pHeader, WAVE_FormatTypeDef* pWaveFormatStruct)
{
 800b0e8:	b480      	push	{r7}
 800b0ea:	b083      	sub	sp, #12
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
 800b0f0:	6039      	str	r1, [r7, #0]
  /* Write chunkID, must be 'RIFF'  ------------------------------------------*/
  pHeader[0] = 'R';
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	2252      	movs	r2, #82	@ 0x52
 800b0f6:	701a      	strb	r2, [r3, #0]
  pHeader[1] = 'I';
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	3301      	adds	r3, #1
 800b0fc:	2249      	movs	r2, #73	@ 0x49
 800b0fe:	701a      	strb	r2, [r3, #0]
  pHeader[2] = 'F';
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	3302      	adds	r3, #2
 800b104:	2246      	movs	r2, #70	@ 0x46
 800b106:	701a      	strb	r2, [r3, #0]
  pHeader[3] = 'F';
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	3303      	adds	r3, #3
 800b10c:	2246      	movs	r2, #70	@ 0x46
 800b10e:	701a      	strb	r2, [r3, #0]
  
  /* Write the file length ---------------------------------------------------*/
  /* The sampling time: this value will be written back at the end of the 
     recording operation.  Example: 661500 Bytes = 0x000A17FC, byte[7]=0x00, byte[4]=0xFC */
  pHeader[4] = 0x00;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	3304      	adds	r3, #4
 800b114:	2200      	movs	r2, #0
 800b116:	701a      	strb	r2, [r3, #0]
  pHeader[5] = 0x4C;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	3305      	adds	r3, #5
 800b11c:	224c      	movs	r2, #76	@ 0x4c
 800b11e:	701a      	strb	r2, [r3, #0]
  pHeader[6] = 0x1D;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	3306      	adds	r3, #6
 800b124:	221d      	movs	r2, #29
 800b126:	701a      	strb	r2, [r3, #0]
  pHeader[7] = 0x00;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	3307      	adds	r3, #7
 800b12c:	2200      	movs	r2, #0
 800b12e:	701a      	strb	r2, [r3, #0]
  /* Write the file format, must be 'WAVE' -----------------------------------*/
  pHeader[8]  = 'W';
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	3308      	adds	r3, #8
 800b134:	2257      	movs	r2, #87	@ 0x57
 800b136:	701a      	strb	r2, [r3, #0]
  pHeader[9]  = 'A';
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	3309      	adds	r3, #9
 800b13c:	2241      	movs	r2, #65	@ 0x41
 800b13e:	701a      	strb	r2, [r3, #0]
  pHeader[10] = 'V';
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	330a      	adds	r3, #10
 800b144:	2256      	movs	r2, #86	@ 0x56
 800b146:	701a      	strb	r2, [r3, #0]
  pHeader[11] = 'E';
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	330b      	adds	r3, #11
 800b14c:	2245      	movs	r2, #69	@ 0x45
 800b14e:	701a      	strb	r2, [r3, #0]
  
  /* Write the format chunk, must be'fmt ' -----------------------------------*/
  pHeader[12]  = 'f';
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	330c      	adds	r3, #12
 800b154:	2266      	movs	r2, #102	@ 0x66
 800b156:	701a      	strb	r2, [r3, #0]
  pHeader[13]  = 'm';
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	330d      	adds	r3, #13
 800b15c:	226d      	movs	r2, #109	@ 0x6d
 800b15e:	701a      	strb	r2, [r3, #0]
  pHeader[14]  = 't';
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	330e      	adds	r3, #14
 800b164:	2274      	movs	r2, #116	@ 0x74
 800b166:	701a      	strb	r2, [r3, #0]
  pHeader[15]  = ' ';
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	330f      	adds	r3, #15
 800b16c:	2220      	movs	r2, #32
 800b16e:	701a      	strb	r2, [r3, #0]
  
  /* Write the length of the 'fmt' data, must be 0x10 ------------------------*/
  pHeader[16]  = 0x10;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	3310      	adds	r3, #16
 800b174:	2210      	movs	r2, #16
 800b176:	701a      	strb	r2, [r3, #0]
  pHeader[17]  = 0x00;
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	3311      	adds	r3, #17
 800b17c:	2200      	movs	r2, #0
 800b17e:	701a      	strb	r2, [r3, #0]
  pHeader[18]  = 0x00;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	3312      	adds	r3, #18
 800b184:	2200      	movs	r2, #0
 800b186:	701a      	strb	r2, [r3, #0]
  pHeader[19]  = 0x00;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	3313      	adds	r3, #19
 800b18c:	2200      	movs	r2, #0
 800b18e:	701a      	strb	r2, [r3, #0]
  
  /* Write the audio format, must be 0x01 (PCM) ------------------------------*/
  pHeader[20]  = 0x01;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	3314      	adds	r3, #20
 800b194:	2201      	movs	r2, #1
 800b196:	701a      	strb	r2, [r3, #0]
  pHeader[21]  = 0x00;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	3315      	adds	r3, #21
 800b19c:	2200      	movs	r2, #0
 800b19e:	701a      	strb	r2, [r3, #0]
  
  /* Write the number of channels, ie. 0x01 (Mono) ---------------------------*/
  pHeader[22]  = pWaveFormatStruct->NbrChannels;
 800b1a0:	683b      	ldr	r3, [r7, #0]
 800b1a2:	8ada      	ldrh	r2, [r3, #22]
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	3316      	adds	r3, #22
 800b1a8:	b2d2      	uxtb	r2, r2
 800b1aa:	701a      	strb	r2, [r3, #0]
  pHeader[23]  = 0x00;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	3317      	adds	r3, #23
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	701a      	strb	r2, [r3, #0]
  
  /* Write the Sample Rate in Hz ---------------------------------------------*/
  /* Write Little Endian ie. 8000 = 0x00001F40 => byte[24]=0x40, byte[27]=0x00*/
  pHeader[24]  = (uint8_t)((pWaveFormatStruct->SampleRate & 0xFF));
 800b1b4:	683b      	ldr	r3, [r7, #0]
 800b1b6:	699a      	ldr	r2, [r3, #24]
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	3318      	adds	r3, #24
 800b1bc:	b2d2      	uxtb	r2, r2
 800b1be:	701a      	strb	r2, [r3, #0]
  pHeader[25]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 8) & 0xFF);
 800b1c0:	683b      	ldr	r3, [r7, #0]
 800b1c2:	699b      	ldr	r3, [r3, #24]
 800b1c4:	0a1a      	lsrs	r2, r3, #8
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	3319      	adds	r3, #25
 800b1ca:	b2d2      	uxtb	r2, r2
 800b1cc:	701a      	strb	r2, [r3, #0]
  pHeader[26]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 16) & 0xFF);
 800b1ce:	683b      	ldr	r3, [r7, #0]
 800b1d0:	699b      	ldr	r3, [r3, #24]
 800b1d2:	0c1a      	lsrs	r2, r3, #16
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	331a      	adds	r3, #26
 800b1d8:	b2d2      	uxtb	r2, r2
 800b1da:	701a      	strb	r2, [r3, #0]
  pHeader[27]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 24) & 0xFF);
 800b1dc:	683b      	ldr	r3, [r7, #0]
 800b1de:	699b      	ldr	r3, [r3, #24]
 800b1e0:	0e1a      	lsrs	r2, r3, #24
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	331b      	adds	r3, #27
 800b1e6:	b2d2      	uxtb	r2, r2
 800b1e8:	701a      	strb	r2, [r3, #0]
  
  /* Write the Byte Rate -----------------------------------------------------*/
  pHeader[28]  = (uint8_t)((pWaveFormatStruct->ByteRate & 0xFF));
 800b1ea:	683b      	ldr	r3, [r7, #0]
 800b1ec:	69da      	ldr	r2, [r3, #28]
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	331c      	adds	r3, #28
 800b1f2:	b2d2      	uxtb	r2, r2
 800b1f4:	701a      	strb	r2, [r3, #0]
  pHeader[29]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 8) & 0xFF);
 800b1f6:	683b      	ldr	r3, [r7, #0]
 800b1f8:	69db      	ldr	r3, [r3, #28]
 800b1fa:	0a1a      	lsrs	r2, r3, #8
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	331d      	adds	r3, #29
 800b200:	b2d2      	uxtb	r2, r2
 800b202:	701a      	strb	r2, [r3, #0]
  pHeader[30]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 16) & 0xFF);
 800b204:	683b      	ldr	r3, [r7, #0]
 800b206:	69db      	ldr	r3, [r3, #28]
 800b208:	0c1a      	lsrs	r2, r3, #16
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	331e      	adds	r3, #30
 800b20e:	b2d2      	uxtb	r2, r2
 800b210:	701a      	strb	r2, [r3, #0]
  pHeader[31]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 24) & 0xFF);
 800b212:	683b      	ldr	r3, [r7, #0]
 800b214:	69db      	ldr	r3, [r3, #28]
 800b216:	0e1a      	lsrs	r2, r3, #24
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	331f      	adds	r3, #31
 800b21c:	b2d2      	uxtb	r2, r2
 800b21e:	701a      	strb	r2, [r3, #0]
  
  /* Write the block alignment -----------------------------------------------*/
  pHeader[32]  = pWaveFormatStruct->BlockAlign;
 800b220:	683b      	ldr	r3, [r7, #0]
 800b222:	8c1a      	ldrh	r2, [r3, #32]
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	3320      	adds	r3, #32
 800b228:	b2d2      	uxtb	r2, r2
 800b22a:	701a      	strb	r2, [r3, #0]
  pHeader[33]  = 0x00;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	3321      	adds	r3, #33	@ 0x21
 800b230:	2200      	movs	r2, #0
 800b232:	701a      	strb	r2, [r3, #0]
  
  /* Write the number of bits per sample -------------------------------------*/
  pHeader[34]  = pWaveFormatStruct->BitPerSample;
 800b234:	683b      	ldr	r3, [r7, #0]
 800b236:	8c5a      	ldrh	r2, [r3, #34]	@ 0x22
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	3322      	adds	r3, #34	@ 0x22
 800b23c:	b2d2      	uxtb	r2, r2
 800b23e:	701a      	strb	r2, [r3, #0]
  pHeader[35]  = 0x00;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	3323      	adds	r3, #35	@ 0x23
 800b244:	2200      	movs	r2, #0
 800b246:	701a      	strb	r2, [r3, #0]
  
  /* Write the Data chunk, must be 'data' ------------------------------------*/
  pHeader[36]  = 'd';
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	3324      	adds	r3, #36	@ 0x24
 800b24c:	2264      	movs	r2, #100	@ 0x64
 800b24e:	701a      	strb	r2, [r3, #0]
  pHeader[37]  = 'a';
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	3325      	adds	r3, #37	@ 0x25
 800b254:	2261      	movs	r2, #97	@ 0x61
 800b256:	701a      	strb	r2, [r3, #0]
  pHeader[38]  = 't';
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	3326      	adds	r3, #38	@ 0x26
 800b25c:	2274      	movs	r2, #116	@ 0x74
 800b25e:	701a      	strb	r2, [r3, #0]
  pHeader[39]  = 'a';
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	3327      	adds	r3, #39	@ 0x27
 800b264:	2261      	movs	r2, #97	@ 0x61
 800b266:	701a      	strb	r2, [r3, #0]
  
  /* Write the number of sample data -----------------------------------------*/
  /* This variable will be written back at the end of the recording operation */
  pHeader[40]  = 0x00;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	3328      	adds	r3, #40	@ 0x28
 800b26c:	2200      	movs	r2, #0
 800b26e:	701a      	strb	r2, [r3, #0]
  pHeader[41]  = 0x4C;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	3329      	adds	r3, #41	@ 0x29
 800b274:	224c      	movs	r2, #76	@ 0x4c
 800b276:	701a      	strb	r2, [r3, #0]
  pHeader[42]  = 0x1D;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	332a      	adds	r3, #42	@ 0x2a
 800b27c:	221d      	movs	r2, #29
 800b27e:	701a      	strb	r2, [r3, #0]
  pHeader[43]  = 0x00;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	332b      	adds	r3, #43	@ 0x2b
 800b284:	2200      	movs	r2, #0
 800b286:	701a      	strb	r2, [r3, #0]
  
  /* Return 0 if all operations are OK */
  return 0;
 800b288:	2300      	movs	r3, #0
}
 800b28a:	4618      	mov	r0, r3
 800b28c:	370c      	adds	r7, #12
 800b28e:	46bd      	mov	sp, r7
 800b290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b294:	4770      	bx	lr
	...

0800b298 <WavProcess_HeaderUpdate>:
  * @param  pHeader: Header Buffer to be filled
  * @param  pWaveFormatStruct: Pointer to the wave structure to be filled.
  * @retval 0 if passed, !0 if failed.
  */
static uint32_t WavProcess_HeaderUpdate(uint8_t* pHeader, WAVE_FormatTypeDef* pWaveFormatStruct)
{
 800b298:	b480      	push	{r7}
 800b29a:	b083      	sub	sp, #12
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
 800b2a0:	6039      	str	r1, [r7, #0]
  /* Write the file length ---------------------------------------------------*/
  /* The sampling time: this value will be written back at the end of the 
     recording operation.  Example: 661500 Bytes = 0x000A17FC, byte[7]=0x00, byte[4]=0xFC */
  pHeader[4] = (uint8_t)(BufferCtl.fptr);
 800b2a2:	4b30      	ldr	r3, [pc, #192]	@ (800b364 <WavProcess_HeaderUpdate+0xcc>)
 800b2a4:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800b2a8:	f8d3 280c 	ldr.w	r2, [r3, #2060]	@ 0x80c
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	3304      	adds	r3, #4
 800b2b0:	b2d2      	uxtb	r2, r2
 800b2b2:	701a      	strb	r2, [r3, #0]
  pHeader[5] = (uint8_t)(BufferCtl.fptr >> 8);
 800b2b4:	4b2b      	ldr	r3, [pc, #172]	@ (800b364 <WavProcess_HeaderUpdate+0xcc>)
 800b2b6:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800b2ba:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800b2be:	0a1a      	lsrs	r2, r3, #8
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	3305      	adds	r3, #5
 800b2c4:	b2d2      	uxtb	r2, r2
 800b2c6:	701a      	strb	r2, [r3, #0]
  pHeader[6] = (uint8_t)(BufferCtl.fptr >> 16);
 800b2c8:	4b26      	ldr	r3, [pc, #152]	@ (800b364 <WavProcess_HeaderUpdate+0xcc>)
 800b2ca:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800b2ce:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800b2d2:	0c1a      	lsrs	r2, r3, #16
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	3306      	adds	r3, #6
 800b2d8:	b2d2      	uxtb	r2, r2
 800b2da:	701a      	strb	r2, [r3, #0]
  pHeader[7] = (uint8_t)(BufferCtl.fptr >> 24);
 800b2dc:	4b21      	ldr	r3, [pc, #132]	@ (800b364 <WavProcess_HeaderUpdate+0xcc>)
 800b2de:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800b2e2:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800b2e6:	0e1a      	lsrs	r2, r3, #24
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	3307      	adds	r3, #7
 800b2ec:	b2d2      	uxtb	r2, r2
 800b2ee:	701a      	strb	r2, [r3, #0]
  /* Write the number of sample data -----------------------------------------*/
  /* This variable will be written back at the end of the recording operation */
  BufferCtl.fptr -=44;
 800b2f0:	4b1c      	ldr	r3, [pc, #112]	@ (800b364 <WavProcess_HeaderUpdate+0xcc>)
 800b2f2:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800b2f6:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800b2fa:	3b2c      	subs	r3, #44	@ 0x2c
 800b2fc:	4a19      	ldr	r2, [pc, #100]	@ (800b364 <WavProcess_HeaderUpdate+0xcc>)
 800b2fe:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 800b302:	f8c2 380c 	str.w	r3, [r2, #2060]	@ 0x80c
  pHeader[40] = (uint8_t)(BufferCtl.fptr); 
 800b306:	4b17      	ldr	r3, [pc, #92]	@ (800b364 <WavProcess_HeaderUpdate+0xcc>)
 800b308:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800b30c:	f8d3 280c 	ldr.w	r2, [r3, #2060]	@ 0x80c
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	3328      	adds	r3, #40	@ 0x28
 800b314:	b2d2      	uxtb	r2, r2
 800b316:	701a      	strb	r2, [r3, #0]
  pHeader[41] = (uint8_t)(BufferCtl.fptr >> 8);
 800b318:	4b12      	ldr	r3, [pc, #72]	@ (800b364 <WavProcess_HeaderUpdate+0xcc>)
 800b31a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800b31e:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800b322:	0a1a      	lsrs	r2, r3, #8
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	3329      	adds	r3, #41	@ 0x29
 800b328:	b2d2      	uxtb	r2, r2
 800b32a:	701a      	strb	r2, [r3, #0]
  pHeader[42] = (uint8_t)(BufferCtl.fptr >> 16);
 800b32c:	4b0d      	ldr	r3, [pc, #52]	@ (800b364 <WavProcess_HeaderUpdate+0xcc>)
 800b32e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800b332:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800b336:	0c1a      	lsrs	r2, r3, #16
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	332a      	adds	r3, #42	@ 0x2a
 800b33c:	b2d2      	uxtb	r2, r2
 800b33e:	701a      	strb	r2, [r3, #0]
  pHeader[43] = (uint8_t)(BufferCtl.fptr >> 24); 
 800b340:	4b08      	ldr	r3, [pc, #32]	@ (800b364 <WavProcess_HeaderUpdate+0xcc>)
 800b342:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800b346:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800b34a:	0e1a      	lsrs	r2, r3, #24
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	332b      	adds	r3, #43	@ 0x2b
 800b350:	b2d2      	uxtb	r2, r2
 800b352:	701a      	strb	r2, [r3, #0]
  
  /* Return 0 if all operations are OK */
  return 0;
 800b354:	2300      	movs	r3, #0
}
 800b356:	4618      	mov	r0, r3
 800b358:	370c      	adds	r7, #12
 800b35a:	46bd      	mov	sp, r7
 800b35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b360:	4770      	bx	lr
 800b362:	bf00      	nop
 800b364:	20019d78 	.word	0x20019d78

0800b368 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800b36c:	4904      	ldr	r1, [pc, #16]	@ (800b380 <MX_FATFS_Init+0x18>)
 800b36e:	4805      	ldr	r0, [pc, #20]	@ (800b384 <MX_FATFS_Init+0x1c>)
 800b370:	f003 fb66 	bl	800ea40 <FATFS_LinkDriver>
 800b374:	4603      	mov	r3, r0
 800b376:	461a      	mov	r2, r3
 800b378:	4b03      	ldr	r3, [pc, #12]	@ (800b388 <MX_FATFS_Init+0x20>)
 800b37a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b37c:	bf00      	nop
 800b37e:	bd80      	pop	{r7, pc}
 800b380:	2001e7e8 	.word	0x2001e7e8
 800b384:	08016d84 	.word	0x08016d84
 800b388:	2001e7e4 	.word	0x2001e7e4

0800b38c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800b38c:	b480      	push	{r7}
 800b38e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800b390:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800b392:	4618      	mov	r0, r3
 800b394:	46bd      	mov	sp, r7
 800b396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39a:	4770      	bx	lr

0800b39c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800b39c:	b580      	push	{r7, lr}
 800b39e:	b082      	sub	sp, #8
 800b3a0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800b3a6:	f000 f888 	bl	800b4ba <BSP_SD_IsDetected>
 800b3aa:	4603      	mov	r3, r0
 800b3ac:	2b01      	cmp	r3, #1
 800b3ae:	d001      	beq.n	800b3b4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800b3b0:	2302      	movs	r3, #2
 800b3b2:	e005      	b.n	800b3c0 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800b3b4:	4804      	ldr	r0, [pc, #16]	@ (800b3c8 <BSP_SD_Init+0x2c>)
 800b3b6:	f7fd f90a 	bl	80085ce <HAL_SD_Init>
 800b3ba:	4603      	mov	r3, r0
 800b3bc:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800b3be:	79fb      	ldrb	r3, [r7, #7]
}
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	3708      	adds	r7, #8
 800b3c4:	46bd      	mov	sp, r7
 800b3c6:	bd80      	pop	{r7, pc}
 800b3c8:	20019950 	.word	0x20019950

0800b3cc <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b086      	sub	sp, #24
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	60f8      	str	r0, [r7, #12]
 800b3d4:	60b9      	str	r1, [r7, #8]
 800b3d6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800b3d8:	2300      	movs	r3, #0
 800b3da:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	68ba      	ldr	r2, [r7, #8]
 800b3e0:	68f9      	ldr	r1, [r7, #12]
 800b3e2:	4806      	ldr	r0, [pc, #24]	@ (800b3fc <BSP_SD_ReadBlocks_DMA+0x30>)
 800b3e4:	f7fd f9ac 	bl	8008740 <HAL_SD_ReadBlocks_DMA>
 800b3e8:	4603      	mov	r3, r0
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d001      	beq.n	800b3f2 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800b3ee:	2301      	movs	r3, #1
 800b3f0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b3f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3f4:	4618      	mov	r0, r3
 800b3f6:	3718      	adds	r7, #24
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	bd80      	pop	{r7, pc}
 800b3fc:	20019950 	.word	0x20019950

0800b400 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800b400:	b580      	push	{r7, lr}
 800b402:	b086      	sub	sp, #24
 800b404:	af00      	add	r7, sp, #0
 800b406:	60f8      	str	r0, [r7, #12]
 800b408:	60b9      	str	r1, [r7, #8]
 800b40a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800b40c:	2300      	movs	r3, #0
 800b40e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	68ba      	ldr	r2, [r7, #8]
 800b414:	68f9      	ldr	r1, [r7, #12]
 800b416:	4806      	ldr	r0, [pc, #24]	@ (800b430 <BSP_SD_WriteBlocks_DMA+0x30>)
 800b418:	f7fd fa74 	bl	8008904 <HAL_SD_WriteBlocks_DMA>
 800b41c:	4603      	mov	r3, r0
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d001      	beq.n	800b426 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800b422:	2301      	movs	r3, #1
 800b424:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b426:	7dfb      	ldrb	r3, [r7, #23]
}
 800b428:	4618      	mov	r0, r3
 800b42a:	3718      	adds	r7, #24
 800b42c:	46bd      	mov	sp, r7
 800b42e:	bd80      	pop	{r7, pc}
 800b430:	20019950 	.word	0x20019950

0800b434 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800b434:	b580      	push	{r7, lr}
 800b436:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800b438:	4805      	ldr	r0, [pc, #20]	@ (800b450 <BSP_SD_GetCardState+0x1c>)
 800b43a:	f7fd fe99 	bl	8009170 <HAL_SD_GetCardState>
 800b43e:	4603      	mov	r3, r0
 800b440:	2b04      	cmp	r3, #4
 800b442:	bf14      	ite	ne
 800b444:	2301      	movne	r3, #1
 800b446:	2300      	moveq	r3, #0
 800b448:	b2db      	uxtb	r3, r3
}
 800b44a:	4618      	mov	r0, r3
 800b44c:	bd80      	pop	{r7, pc}
 800b44e:	bf00      	nop
 800b450:	20019950 	.word	0x20019950

0800b454 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800b454:	b580      	push	{r7, lr}
 800b456:	b082      	sub	sp, #8
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800b45c:	6879      	ldr	r1, [r7, #4]
 800b45e:	4803      	ldr	r0, [pc, #12]	@ (800b46c <BSP_SD_GetCardInfo+0x18>)
 800b460:	f7fd fe5a 	bl	8009118 <HAL_SD_GetCardInfo>
}
 800b464:	bf00      	nop
 800b466:	3708      	adds	r7, #8
 800b468:	46bd      	mov	sp, r7
 800b46a:	bd80      	pop	{r7, pc}
 800b46c:	20019950 	.word	0x20019950

0800b470 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800b470:	b580      	push	{r7, lr}
 800b472:	b082      	sub	sp, #8
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800b478:	f000 f818 	bl	800b4ac <BSP_SD_AbortCallback>
}
 800b47c:	bf00      	nop
 800b47e:	3708      	adds	r7, #8
 800b480:	46bd      	mov	sp, r7
 800b482:	bd80      	pop	{r7, pc}

0800b484 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b082      	sub	sp, #8
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800b48c:	f000 f9a8 	bl	800b7e0 <BSP_SD_WriteCpltCallback>
}
 800b490:	bf00      	nop
 800b492:	3708      	adds	r7, #8
 800b494:	46bd      	mov	sp, r7
 800b496:	bd80      	pop	{r7, pc}

0800b498 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800b498:	b580      	push	{r7, lr}
 800b49a:	b082      	sub	sp, #8
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800b4a0:	f000 f9aa 	bl	800b7f8 <BSP_SD_ReadCpltCallback>
}
 800b4a4:	bf00      	nop
 800b4a6:	3708      	adds	r7, #8
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	bd80      	pop	{r7, pc}

0800b4ac <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800b4ac:	b480      	push	{r7}
 800b4ae:	af00      	add	r7, sp, #0

}
 800b4b0:	bf00      	nop
 800b4b2:	46bd      	mov	sp, r7
 800b4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b8:	4770      	bx	lr

0800b4ba <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800b4ba:	b580      	push	{r7, lr}
 800b4bc:	b082      	sub	sp, #8
 800b4be:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800b4c0:	2301      	movs	r3, #1
 800b4c2:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800b4c4:	f000 f80c 	bl	800b4e0 <BSP_PlatformIsDetected>
 800b4c8:	4603      	mov	r3, r0
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d101      	bne.n	800b4d2 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800b4d2:	79fb      	ldrb	r3, [r7, #7]
 800b4d4:	b2db      	uxtb	r3, r3
}
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	3708      	adds	r7, #8
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	bd80      	pop	{r7, pc}
	...

0800b4e0 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b082      	sub	sp, #8
 800b4e4:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800b4e6:	2301      	movs	r3, #1
 800b4e8:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800b4ea:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800b4ee:	4806      	ldr	r0, [pc, #24]	@ (800b508 <BSP_PlatformIsDetected+0x28>)
 800b4f0:	f7fa fb74 	bl	8005bdc <HAL_GPIO_ReadPin>
 800b4f4:	4603      	mov	r3, r0
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d001      	beq.n	800b4fe <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800b4fe:	79fb      	ldrb	r3, [r7, #7]
}
 800b500:	4618      	mov	r0, r3
 800b502:	3708      	adds	r7, #8
 800b504:	46bd      	mov	sp, r7
 800b506:	bd80      	pop	{r7, pc}
 800b508:	40020800 	.word	0x40020800

0800b50c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b084      	sub	sp, #16
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800b514:	f7f9 fa02 	bl	800491c <HAL_GetTick>
 800b518:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800b51a:	e006      	b.n	800b52a <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b51c:	f7ff ff8a 	bl	800b434 <BSP_SD_GetCardState>
 800b520:	4603      	mov	r3, r0
 800b522:	2b00      	cmp	r3, #0
 800b524:	d101      	bne.n	800b52a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800b526:	2300      	movs	r3, #0
 800b528:	e009      	b.n	800b53e <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800b52a:	f7f9 f9f7 	bl	800491c <HAL_GetTick>
 800b52e:	4602      	mov	r2, r0
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	1ad3      	subs	r3, r2, r3
 800b534:	687a      	ldr	r2, [r7, #4]
 800b536:	429a      	cmp	r2, r3
 800b538:	d8f0      	bhi.n	800b51c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800b53a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b53e:	4618      	mov	r0, r3
 800b540:	3710      	adds	r7, #16
 800b542:	46bd      	mov	sp, r7
 800b544:	bd80      	pop	{r7, pc}
	...

0800b548 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800b548:	b580      	push	{r7, lr}
 800b54a:	b082      	sub	sp, #8
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	4603      	mov	r3, r0
 800b550:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800b552:	4b0b      	ldr	r3, [pc, #44]	@ (800b580 <SD_CheckStatus+0x38>)
 800b554:	2201      	movs	r2, #1
 800b556:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800b558:	f7ff ff6c 	bl	800b434 <BSP_SD_GetCardState>
 800b55c:	4603      	mov	r3, r0
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d107      	bne.n	800b572 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800b562:	4b07      	ldr	r3, [pc, #28]	@ (800b580 <SD_CheckStatus+0x38>)
 800b564:	781b      	ldrb	r3, [r3, #0]
 800b566:	b2db      	uxtb	r3, r3
 800b568:	f023 0301 	bic.w	r3, r3, #1
 800b56c:	b2da      	uxtb	r2, r3
 800b56e:	4b04      	ldr	r3, [pc, #16]	@ (800b580 <SD_CheckStatus+0x38>)
 800b570:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800b572:	4b03      	ldr	r3, [pc, #12]	@ (800b580 <SD_CheckStatus+0x38>)
 800b574:	781b      	ldrb	r3, [r3, #0]
 800b576:	b2db      	uxtb	r3, r3
}
 800b578:	4618      	mov	r0, r3
 800b57a:	3708      	adds	r7, #8
 800b57c:	46bd      	mov	sp, r7
 800b57e:	bd80      	pop	{r7, pc}
 800b580:	2000004c 	.word	0x2000004c

0800b584 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800b584:	b580      	push	{r7, lr}
 800b586:	b082      	sub	sp, #8
 800b588:	af00      	add	r7, sp, #0
 800b58a:	4603      	mov	r3, r0
 800b58c:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800b58e:	f7ff ff05 	bl	800b39c <BSP_SD_Init>
 800b592:	4603      	mov	r3, r0
 800b594:	2b00      	cmp	r3, #0
 800b596:	d107      	bne.n	800b5a8 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800b598:	79fb      	ldrb	r3, [r7, #7]
 800b59a:	4618      	mov	r0, r3
 800b59c:	f7ff ffd4 	bl	800b548 <SD_CheckStatus>
 800b5a0:	4603      	mov	r3, r0
 800b5a2:	461a      	mov	r2, r3
 800b5a4:	4b04      	ldr	r3, [pc, #16]	@ (800b5b8 <SD_initialize+0x34>)
 800b5a6:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800b5a8:	4b03      	ldr	r3, [pc, #12]	@ (800b5b8 <SD_initialize+0x34>)
 800b5aa:	781b      	ldrb	r3, [r3, #0]
 800b5ac:	b2db      	uxtb	r3, r3
}
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	3708      	adds	r7, #8
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	bd80      	pop	{r7, pc}
 800b5b6:	bf00      	nop
 800b5b8:	2000004c 	.word	0x2000004c

0800b5bc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b082      	sub	sp, #8
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	4603      	mov	r3, r0
 800b5c4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800b5c6:	79fb      	ldrb	r3, [r7, #7]
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	f7ff ffbd 	bl	800b548 <SD_CheckStatus>
 800b5ce:	4603      	mov	r3, r0
}
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	3708      	adds	r7, #8
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	bd80      	pop	{r7, pc}

0800b5d8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b086      	sub	sp, #24
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	60b9      	str	r1, [r7, #8]
 800b5e0:	607a      	str	r2, [r7, #4]
 800b5e2:	603b      	str	r3, [r7, #0]
 800b5e4:	4603      	mov	r3, r0
 800b5e6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b5e8:	2301      	movs	r3, #1
 800b5ea:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b5ec:	f247 5030 	movw	r0, #30000	@ 0x7530
 800b5f0:	f7ff ff8c 	bl	800b50c <SD_CheckStatusWithTimeout>
 800b5f4:	4603      	mov	r3, r0
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	da01      	bge.n	800b5fe <SD_read+0x26>
  {
    return res;
 800b5fa:	7dfb      	ldrb	r3, [r7, #23]
 800b5fc:	e03b      	b.n	800b676 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800b5fe:	683a      	ldr	r2, [r7, #0]
 800b600:	6879      	ldr	r1, [r7, #4]
 800b602:	68b8      	ldr	r0, [r7, #8]
 800b604:	f7ff fee2 	bl	800b3cc <BSP_SD_ReadBlocks_DMA>
 800b608:	4603      	mov	r3, r0
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d132      	bne.n	800b674 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800b60e:	4b1c      	ldr	r3, [pc, #112]	@ (800b680 <SD_read+0xa8>)
 800b610:	2200      	movs	r2, #0
 800b612:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800b614:	f7f9 f982 	bl	800491c <HAL_GetTick>
 800b618:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800b61a:	bf00      	nop
 800b61c:	4b18      	ldr	r3, [pc, #96]	@ (800b680 <SD_read+0xa8>)
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d108      	bne.n	800b636 <SD_read+0x5e>
 800b624:	f7f9 f97a 	bl	800491c <HAL_GetTick>
 800b628:	4602      	mov	r2, r0
 800b62a:	693b      	ldr	r3, [r7, #16]
 800b62c:	1ad3      	subs	r3, r2, r3
 800b62e:	f247 522f 	movw	r2, #29999	@ 0x752f
 800b632:	4293      	cmp	r3, r2
 800b634:	d9f2      	bls.n	800b61c <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800b636:	4b12      	ldr	r3, [pc, #72]	@ (800b680 <SD_read+0xa8>)
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d102      	bne.n	800b644 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800b63e:	2301      	movs	r3, #1
 800b640:	75fb      	strb	r3, [r7, #23]
 800b642:	e017      	b.n	800b674 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800b644:	4b0e      	ldr	r3, [pc, #56]	@ (800b680 <SD_read+0xa8>)
 800b646:	2200      	movs	r2, #0
 800b648:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800b64a:	f7f9 f967 	bl	800491c <HAL_GetTick>
 800b64e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b650:	e007      	b.n	800b662 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b652:	f7ff feef 	bl	800b434 <BSP_SD_GetCardState>
 800b656:	4603      	mov	r3, r0
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d102      	bne.n	800b662 <SD_read+0x8a>
          {
            res = RES_OK;
 800b65c:	2300      	movs	r3, #0
 800b65e:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800b660:	e008      	b.n	800b674 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b662:	f7f9 f95b 	bl	800491c <HAL_GetTick>
 800b666:	4602      	mov	r2, r0
 800b668:	693b      	ldr	r3, [r7, #16]
 800b66a:	1ad3      	subs	r3, r2, r3
 800b66c:	f247 522f 	movw	r2, #29999	@ 0x752f
 800b670:	4293      	cmp	r3, r2
 800b672:	d9ee      	bls.n	800b652 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800b674:	7dfb      	ldrb	r3, [r7, #23]
}
 800b676:	4618      	mov	r0, r3
 800b678:	3718      	adds	r7, #24
 800b67a:	46bd      	mov	sp, r7
 800b67c:	bd80      	pop	{r7, pc}
 800b67e:	bf00      	nop
 800b680:	2001ea20 	.word	0x2001ea20

0800b684 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800b684:	b580      	push	{r7, lr}
 800b686:	b086      	sub	sp, #24
 800b688:	af00      	add	r7, sp, #0
 800b68a:	60b9      	str	r1, [r7, #8]
 800b68c:	607a      	str	r2, [r7, #4]
 800b68e:	603b      	str	r3, [r7, #0]
 800b690:	4603      	mov	r3, r0
 800b692:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b694:	2301      	movs	r3, #1
 800b696:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800b698:	4b24      	ldr	r3, [pc, #144]	@ (800b72c <SD_write+0xa8>)
 800b69a:	2200      	movs	r2, #0
 800b69c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b69e:	f247 5030 	movw	r0, #30000	@ 0x7530
 800b6a2:	f7ff ff33 	bl	800b50c <SD_CheckStatusWithTimeout>
 800b6a6:	4603      	mov	r3, r0
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	da01      	bge.n	800b6b0 <SD_write+0x2c>
  {
    return res;
 800b6ac:	7dfb      	ldrb	r3, [r7, #23]
 800b6ae:	e038      	b.n	800b722 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800b6b0:	683a      	ldr	r2, [r7, #0]
 800b6b2:	6879      	ldr	r1, [r7, #4]
 800b6b4:	68b8      	ldr	r0, [r7, #8]
 800b6b6:	f7ff fea3 	bl	800b400 <BSP_SD_WriteBlocks_DMA>
 800b6ba:	4603      	mov	r3, r0
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d12f      	bne.n	800b720 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800b6c0:	f7f9 f92c 	bl	800491c <HAL_GetTick>
 800b6c4:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800b6c6:	bf00      	nop
 800b6c8:	4b18      	ldr	r3, [pc, #96]	@ (800b72c <SD_write+0xa8>)
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d108      	bne.n	800b6e2 <SD_write+0x5e>
 800b6d0:	f7f9 f924 	bl	800491c <HAL_GetTick>
 800b6d4:	4602      	mov	r2, r0
 800b6d6:	693b      	ldr	r3, [r7, #16]
 800b6d8:	1ad3      	subs	r3, r2, r3
 800b6da:	f247 522f 	movw	r2, #29999	@ 0x752f
 800b6de:	4293      	cmp	r3, r2
 800b6e0:	d9f2      	bls.n	800b6c8 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800b6e2:	4b12      	ldr	r3, [pc, #72]	@ (800b72c <SD_write+0xa8>)
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d102      	bne.n	800b6f0 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800b6ea:	2301      	movs	r3, #1
 800b6ec:	75fb      	strb	r3, [r7, #23]
 800b6ee:	e017      	b.n	800b720 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800b6f0:	4b0e      	ldr	r3, [pc, #56]	@ (800b72c <SD_write+0xa8>)
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800b6f6:	f7f9 f911 	bl	800491c <HAL_GetTick>
 800b6fa:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b6fc:	e007      	b.n	800b70e <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b6fe:	f7ff fe99 	bl	800b434 <BSP_SD_GetCardState>
 800b702:	4603      	mov	r3, r0
 800b704:	2b00      	cmp	r3, #0
 800b706:	d102      	bne.n	800b70e <SD_write+0x8a>
          {
            res = RES_OK;
 800b708:	2300      	movs	r3, #0
 800b70a:	75fb      	strb	r3, [r7, #23]
            break;
 800b70c:	e008      	b.n	800b720 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b70e:	f7f9 f905 	bl	800491c <HAL_GetTick>
 800b712:	4602      	mov	r2, r0
 800b714:	693b      	ldr	r3, [r7, #16]
 800b716:	1ad3      	subs	r3, r2, r3
 800b718:	f247 522f 	movw	r2, #29999	@ 0x752f
 800b71c:	4293      	cmp	r3, r2
 800b71e:	d9ee      	bls.n	800b6fe <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800b720:	7dfb      	ldrb	r3, [r7, #23]
}
 800b722:	4618      	mov	r0, r3
 800b724:	3718      	adds	r7, #24
 800b726:	46bd      	mov	sp, r7
 800b728:	bd80      	pop	{r7, pc}
 800b72a:	bf00      	nop
 800b72c:	2001ea1c 	.word	0x2001ea1c

0800b730 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800b730:	b580      	push	{r7, lr}
 800b732:	b08c      	sub	sp, #48	@ 0x30
 800b734:	af00      	add	r7, sp, #0
 800b736:	4603      	mov	r3, r0
 800b738:	603a      	str	r2, [r7, #0]
 800b73a:	71fb      	strb	r3, [r7, #7]
 800b73c:	460b      	mov	r3, r1
 800b73e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800b740:	2301      	movs	r3, #1
 800b742:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b746:	4b25      	ldr	r3, [pc, #148]	@ (800b7dc <SD_ioctl+0xac>)
 800b748:	781b      	ldrb	r3, [r3, #0]
 800b74a:	b2db      	uxtb	r3, r3
 800b74c:	f003 0301 	and.w	r3, r3, #1
 800b750:	2b00      	cmp	r3, #0
 800b752:	d001      	beq.n	800b758 <SD_ioctl+0x28>
 800b754:	2303      	movs	r3, #3
 800b756:	e03c      	b.n	800b7d2 <SD_ioctl+0xa2>

  switch (cmd)
 800b758:	79bb      	ldrb	r3, [r7, #6]
 800b75a:	2b03      	cmp	r3, #3
 800b75c:	d834      	bhi.n	800b7c8 <SD_ioctl+0x98>
 800b75e:	a201      	add	r2, pc, #4	@ (adr r2, 800b764 <SD_ioctl+0x34>)
 800b760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b764:	0800b775 	.word	0x0800b775
 800b768:	0800b77d 	.word	0x0800b77d
 800b76c:	0800b795 	.word	0x0800b795
 800b770:	0800b7af 	.word	0x0800b7af
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800b774:	2300      	movs	r3, #0
 800b776:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b77a:	e028      	b.n	800b7ce <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800b77c:	f107 030c 	add.w	r3, r7, #12
 800b780:	4618      	mov	r0, r3
 800b782:	f7ff fe67 	bl	800b454 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800b786:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b788:	683b      	ldr	r3, [r7, #0]
 800b78a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b78c:	2300      	movs	r3, #0
 800b78e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b792:	e01c      	b.n	800b7ce <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b794:	f107 030c 	add.w	r3, r7, #12
 800b798:	4618      	mov	r0, r3
 800b79a:	f7ff fe5b 	bl	800b454 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800b79e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7a0:	b29a      	uxth	r2, r3
 800b7a2:	683b      	ldr	r3, [r7, #0]
 800b7a4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b7ac:	e00f      	b.n	800b7ce <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b7ae:	f107 030c 	add.w	r3, r7, #12
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	f7ff fe4e 	bl	800b454 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800b7b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7ba:	0a5a      	lsrs	r2, r3, #9
 800b7bc:	683b      	ldr	r3, [r7, #0]
 800b7be:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b7c6:	e002      	b.n	800b7ce <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800b7c8:	2304      	movs	r3, #4
 800b7ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800b7ce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	3730      	adds	r7, #48	@ 0x30
 800b7d6:	46bd      	mov	sp, r7
 800b7d8:	bd80      	pop	{r7, pc}
 800b7da:	bf00      	nop
 800b7dc:	2000004c 	.word	0x2000004c

0800b7e0 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800b7e0:	b480      	push	{r7}
 800b7e2:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800b7e4:	4b03      	ldr	r3, [pc, #12]	@ (800b7f4 <BSP_SD_WriteCpltCallback+0x14>)
 800b7e6:	2201      	movs	r2, #1
 800b7e8:	601a      	str	r2, [r3, #0]
}
 800b7ea:	bf00      	nop
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f2:	4770      	bx	lr
 800b7f4:	2001ea1c 	.word	0x2001ea1c

0800b7f8 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800b7f8:	b480      	push	{r7}
 800b7fa:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800b7fc:	4b03      	ldr	r3, [pc, #12]	@ (800b80c <BSP_SD_ReadCpltCallback+0x14>)
 800b7fe:	2201      	movs	r2, #1
 800b800:	601a      	str	r2, [r3, #0]
}
 800b802:	bf00      	nop
 800b804:	46bd      	mov	sp, r7
 800b806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80a:	4770      	bx	lr
 800b80c:	2001ea20 	.word	0x2001ea20

0800b810 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b810:	b580      	push	{r7, lr}
 800b812:	b084      	sub	sp, #16
 800b814:	af00      	add	r7, sp, #0
 800b816:	4603      	mov	r3, r0
 800b818:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b81a:	79fb      	ldrb	r3, [r7, #7]
 800b81c:	4a08      	ldr	r2, [pc, #32]	@ (800b840 <disk_status+0x30>)
 800b81e:	009b      	lsls	r3, r3, #2
 800b820:	4413      	add	r3, r2
 800b822:	685b      	ldr	r3, [r3, #4]
 800b824:	685b      	ldr	r3, [r3, #4]
 800b826:	79fa      	ldrb	r2, [r7, #7]
 800b828:	4905      	ldr	r1, [pc, #20]	@ (800b840 <disk_status+0x30>)
 800b82a:	440a      	add	r2, r1
 800b82c:	7a12      	ldrb	r2, [r2, #8]
 800b82e:	4610      	mov	r0, r2
 800b830:	4798      	blx	r3
 800b832:	4603      	mov	r3, r0
 800b834:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b836:	7bfb      	ldrb	r3, [r7, #15]
}
 800b838:	4618      	mov	r0, r3
 800b83a:	3710      	adds	r7, #16
 800b83c:	46bd      	mov	sp, r7
 800b83e:	bd80      	pop	{r7, pc}
 800b840:	2001ea4c 	.word	0x2001ea4c

0800b844 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b844:	b580      	push	{r7, lr}
 800b846:	b084      	sub	sp, #16
 800b848:	af00      	add	r7, sp, #0
 800b84a:	4603      	mov	r3, r0
 800b84c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b84e:	2300      	movs	r3, #0
 800b850:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b852:	79fb      	ldrb	r3, [r7, #7]
 800b854:	4a0d      	ldr	r2, [pc, #52]	@ (800b88c <disk_initialize+0x48>)
 800b856:	5cd3      	ldrb	r3, [r2, r3]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d111      	bne.n	800b880 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800b85c:	79fb      	ldrb	r3, [r7, #7]
 800b85e:	4a0b      	ldr	r2, [pc, #44]	@ (800b88c <disk_initialize+0x48>)
 800b860:	2101      	movs	r1, #1
 800b862:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b864:	79fb      	ldrb	r3, [r7, #7]
 800b866:	4a09      	ldr	r2, [pc, #36]	@ (800b88c <disk_initialize+0x48>)
 800b868:	009b      	lsls	r3, r3, #2
 800b86a:	4413      	add	r3, r2
 800b86c:	685b      	ldr	r3, [r3, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	79fa      	ldrb	r2, [r7, #7]
 800b872:	4906      	ldr	r1, [pc, #24]	@ (800b88c <disk_initialize+0x48>)
 800b874:	440a      	add	r2, r1
 800b876:	7a12      	ldrb	r2, [r2, #8]
 800b878:	4610      	mov	r0, r2
 800b87a:	4798      	blx	r3
 800b87c:	4603      	mov	r3, r0
 800b87e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800b880:	7bfb      	ldrb	r3, [r7, #15]
}
 800b882:	4618      	mov	r0, r3
 800b884:	3710      	adds	r7, #16
 800b886:	46bd      	mov	sp, r7
 800b888:	bd80      	pop	{r7, pc}
 800b88a:	bf00      	nop
 800b88c:	2001ea4c 	.word	0x2001ea4c

0800b890 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b890:	b590      	push	{r4, r7, lr}
 800b892:	b087      	sub	sp, #28
 800b894:	af00      	add	r7, sp, #0
 800b896:	60b9      	str	r1, [r7, #8]
 800b898:	607a      	str	r2, [r7, #4]
 800b89a:	603b      	str	r3, [r7, #0]
 800b89c:	4603      	mov	r3, r0
 800b89e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b8a0:	7bfb      	ldrb	r3, [r7, #15]
 800b8a2:	4a0a      	ldr	r2, [pc, #40]	@ (800b8cc <disk_read+0x3c>)
 800b8a4:	009b      	lsls	r3, r3, #2
 800b8a6:	4413      	add	r3, r2
 800b8a8:	685b      	ldr	r3, [r3, #4]
 800b8aa:	689c      	ldr	r4, [r3, #8]
 800b8ac:	7bfb      	ldrb	r3, [r7, #15]
 800b8ae:	4a07      	ldr	r2, [pc, #28]	@ (800b8cc <disk_read+0x3c>)
 800b8b0:	4413      	add	r3, r2
 800b8b2:	7a18      	ldrb	r0, [r3, #8]
 800b8b4:	683b      	ldr	r3, [r7, #0]
 800b8b6:	687a      	ldr	r2, [r7, #4]
 800b8b8:	68b9      	ldr	r1, [r7, #8]
 800b8ba:	47a0      	blx	r4
 800b8bc:	4603      	mov	r3, r0
 800b8be:	75fb      	strb	r3, [r7, #23]
  return res;
 800b8c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	371c      	adds	r7, #28
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	bd90      	pop	{r4, r7, pc}
 800b8ca:	bf00      	nop
 800b8cc:	2001ea4c 	.word	0x2001ea4c

0800b8d0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b8d0:	b590      	push	{r4, r7, lr}
 800b8d2:	b087      	sub	sp, #28
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	60b9      	str	r1, [r7, #8]
 800b8d8:	607a      	str	r2, [r7, #4]
 800b8da:	603b      	str	r3, [r7, #0]
 800b8dc:	4603      	mov	r3, r0
 800b8de:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b8e0:	7bfb      	ldrb	r3, [r7, #15]
 800b8e2:	4a0a      	ldr	r2, [pc, #40]	@ (800b90c <disk_write+0x3c>)
 800b8e4:	009b      	lsls	r3, r3, #2
 800b8e6:	4413      	add	r3, r2
 800b8e8:	685b      	ldr	r3, [r3, #4]
 800b8ea:	68dc      	ldr	r4, [r3, #12]
 800b8ec:	7bfb      	ldrb	r3, [r7, #15]
 800b8ee:	4a07      	ldr	r2, [pc, #28]	@ (800b90c <disk_write+0x3c>)
 800b8f0:	4413      	add	r3, r2
 800b8f2:	7a18      	ldrb	r0, [r3, #8]
 800b8f4:	683b      	ldr	r3, [r7, #0]
 800b8f6:	687a      	ldr	r2, [r7, #4]
 800b8f8:	68b9      	ldr	r1, [r7, #8]
 800b8fa:	47a0      	blx	r4
 800b8fc:	4603      	mov	r3, r0
 800b8fe:	75fb      	strb	r3, [r7, #23]
  return res;
 800b900:	7dfb      	ldrb	r3, [r7, #23]
}
 800b902:	4618      	mov	r0, r3
 800b904:	371c      	adds	r7, #28
 800b906:	46bd      	mov	sp, r7
 800b908:	bd90      	pop	{r4, r7, pc}
 800b90a:	bf00      	nop
 800b90c:	2001ea4c 	.word	0x2001ea4c

0800b910 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800b910:	b580      	push	{r7, lr}
 800b912:	b084      	sub	sp, #16
 800b914:	af00      	add	r7, sp, #0
 800b916:	4603      	mov	r3, r0
 800b918:	603a      	str	r2, [r7, #0]
 800b91a:	71fb      	strb	r3, [r7, #7]
 800b91c:	460b      	mov	r3, r1
 800b91e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b920:	79fb      	ldrb	r3, [r7, #7]
 800b922:	4a09      	ldr	r2, [pc, #36]	@ (800b948 <disk_ioctl+0x38>)
 800b924:	009b      	lsls	r3, r3, #2
 800b926:	4413      	add	r3, r2
 800b928:	685b      	ldr	r3, [r3, #4]
 800b92a:	691b      	ldr	r3, [r3, #16]
 800b92c:	79fa      	ldrb	r2, [r7, #7]
 800b92e:	4906      	ldr	r1, [pc, #24]	@ (800b948 <disk_ioctl+0x38>)
 800b930:	440a      	add	r2, r1
 800b932:	7a10      	ldrb	r0, [r2, #8]
 800b934:	79b9      	ldrb	r1, [r7, #6]
 800b936:	683a      	ldr	r2, [r7, #0]
 800b938:	4798      	blx	r3
 800b93a:	4603      	mov	r3, r0
 800b93c:	73fb      	strb	r3, [r7, #15]
  return res;
 800b93e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b940:	4618      	mov	r0, r3
 800b942:	3710      	adds	r7, #16
 800b944:	46bd      	mov	sp, r7
 800b946:	bd80      	pop	{r7, pc}
 800b948:	2001ea4c 	.word	0x2001ea4c

0800b94c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b94c:	b480      	push	{r7}
 800b94e:	b085      	sub	sp, #20
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	3301      	adds	r3, #1
 800b958:	781b      	ldrb	r3, [r3, #0]
 800b95a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b95c:	89fb      	ldrh	r3, [r7, #14]
 800b95e:	021b      	lsls	r3, r3, #8
 800b960:	b21a      	sxth	r2, r3
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	781b      	ldrb	r3, [r3, #0]
 800b966:	b21b      	sxth	r3, r3
 800b968:	4313      	orrs	r3, r2
 800b96a:	b21b      	sxth	r3, r3
 800b96c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b96e:	89fb      	ldrh	r3, [r7, #14]
}
 800b970:	4618      	mov	r0, r3
 800b972:	3714      	adds	r7, #20
 800b974:	46bd      	mov	sp, r7
 800b976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97a:	4770      	bx	lr

0800b97c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b97c:	b480      	push	{r7}
 800b97e:	b085      	sub	sp, #20
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	3303      	adds	r3, #3
 800b988:	781b      	ldrb	r3, [r3, #0]
 800b98a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	021b      	lsls	r3, r3, #8
 800b990:	687a      	ldr	r2, [r7, #4]
 800b992:	3202      	adds	r2, #2
 800b994:	7812      	ldrb	r2, [r2, #0]
 800b996:	4313      	orrs	r3, r2
 800b998:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	021b      	lsls	r3, r3, #8
 800b99e:	687a      	ldr	r2, [r7, #4]
 800b9a0:	3201      	adds	r2, #1
 800b9a2:	7812      	ldrb	r2, [r2, #0]
 800b9a4:	4313      	orrs	r3, r2
 800b9a6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	021b      	lsls	r3, r3, #8
 800b9ac:	687a      	ldr	r2, [r7, #4]
 800b9ae:	7812      	ldrb	r2, [r2, #0]
 800b9b0:	4313      	orrs	r3, r2
 800b9b2:	60fb      	str	r3, [r7, #12]
	return rv;
 800b9b4:	68fb      	ldr	r3, [r7, #12]
}
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	3714      	adds	r7, #20
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c0:	4770      	bx	lr

0800b9c2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b9c2:	b480      	push	{r7}
 800b9c4:	b083      	sub	sp, #12
 800b9c6:	af00      	add	r7, sp, #0
 800b9c8:	6078      	str	r0, [r7, #4]
 800b9ca:	460b      	mov	r3, r1
 800b9cc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	1c5a      	adds	r2, r3, #1
 800b9d2:	607a      	str	r2, [r7, #4]
 800b9d4:	887a      	ldrh	r2, [r7, #2]
 800b9d6:	b2d2      	uxtb	r2, r2
 800b9d8:	701a      	strb	r2, [r3, #0]
 800b9da:	887b      	ldrh	r3, [r7, #2]
 800b9dc:	0a1b      	lsrs	r3, r3, #8
 800b9de:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	1c5a      	adds	r2, r3, #1
 800b9e4:	607a      	str	r2, [r7, #4]
 800b9e6:	887a      	ldrh	r2, [r7, #2]
 800b9e8:	b2d2      	uxtb	r2, r2
 800b9ea:	701a      	strb	r2, [r3, #0]
}
 800b9ec:	bf00      	nop
 800b9ee:	370c      	adds	r7, #12
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f6:	4770      	bx	lr

0800b9f8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800b9f8:	b480      	push	{r7}
 800b9fa:	b083      	sub	sp, #12
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	6078      	str	r0, [r7, #4]
 800ba00:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	1c5a      	adds	r2, r3, #1
 800ba06:	607a      	str	r2, [r7, #4]
 800ba08:	683a      	ldr	r2, [r7, #0]
 800ba0a:	b2d2      	uxtb	r2, r2
 800ba0c:	701a      	strb	r2, [r3, #0]
 800ba0e:	683b      	ldr	r3, [r7, #0]
 800ba10:	0a1b      	lsrs	r3, r3, #8
 800ba12:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	1c5a      	adds	r2, r3, #1
 800ba18:	607a      	str	r2, [r7, #4]
 800ba1a:	683a      	ldr	r2, [r7, #0]
 800ba1c:	b2d2      	uxtb	r2, r2
 800ba1e:	701a      	strb	r2, [r3, #0]
 800ba20:	683b      	ldr	r3, [r7, #0]
 800ba22:	0a1b      	lsrs	r3, r3, #8
 800ba24:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	1c5a      	adds	r2, r3, #1
 800ba2a:	607a      	str	r2, [r7, #4]
 800ba2c:	683a      	ldr	r2, [r7, #0]
 800ba2e:	b2d2      	uxtb	r2, r2
 800ba30:	701a      	strb	r2, [r3, #0]
 800ba32:	683b      	ldr	r3, [r7, #0]
 800ba34:	0a1b      	lsrs	r3, r3, #8
 800ba36:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	1c5a      	adds	r2, r3, #1
 800ba3c:	607a      	str	r2, [r7, #4]
 800ba3e:	683a      	ldr	r2, [r7, #0]
 800ba40:	b2d2      	uxtb	r2, r2
 800ba42:	701a      	strb	r2, [r3, #0]
}
 800ba44:	bf00      	nop
 800ba46:	370c      	adds	r7, #12
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba4e:	4770      	bx	lr

0800ba50 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800ba50:	b480      	push	{r7}
 800ba52:	b087      	sub	sp, #28
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	60f8      	str	r0, [r7, #12]
 800ba58:	60b9      	str	r1, [r7, #8]
 800ba5a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800ba60:	68bb      	ldr	r3, [r7, #8]
 800ba62:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d00d      	beq.n	800ba86 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800ba6a:	693a      	ldr	r2, [r7, #16]
 800ba6c:	1c53      	adds	r3, r2, #1
 800ba6e:	613b      	str	r3, [r7, #16]
 800ba70:	697b      	ldr	r3, [r7, #20]
 800ba72:	1c59      	adds	r1, r3, #1
 800ba74:	6179      	str	r1, [r7, #20]
 800ba76:	7812      	ldrb	r2, [r2, #0]
 800ba78:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	3b01      	subs	r3, #1
 800ba7e:	607b      	str	r3, [r7, #4]
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d1f1      	bne.n	800ba6a <mem_cpy+0x1a>
	}
}
 800ba86:	bf00      	nop
 800ba88:	371c      	adds	r7, #28
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba90:	4770      	bx	lr

0800ba92 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800ba92:	b480      	push	{r7}
 800ba94:	b087      	sub	sp, #28
 800ba96:	af00      	add	r7, sp, #0
 800ba98:	60f8      	str	r0, [r7, #12]
 800ba9a:	60b9      	str	r1, [r7, #8]
 800ba9c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800baa2:	697b      	ldr	r3, [r7, #20]
 800baa4:	1c5a      	adds	r2, r3, #1
 800baa6:	617a      	str	r2, [r7, #20]
 800baa8:	68ba      	ldr	r2, [r7, #8]
 800baaa:	b2d2      	uxtb	r2, r2
 800baac:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	3b01      	subs	r3, #1
 800bab2:	607b      	str	r3, [r7, #4]
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d1f3      	bne.n	800baa2 <mem_set+0x10>
}
 800baba:	bf00      	nop
 800babc:	bf00      	nop
 800babe:	371c      	adds	r7, #28
 800bac0:	46bd      	mov	sp, r7
 800bac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac6:	4770      	bx	lr

0800bac8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800bac8:	b480      	push	{r7}
 800baca:	b089      	sub	sp, #36	@ 0x24
 800bacc:	af00      	add	r7, sp, #0
 800bace:	60f8      	str	r0, [r7, #12]
 800bad0:	60b9      	str	r1, [r7, #8]
 800bad2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	61fb      	str	r3, [r7, #28]
 800bad8:	68bb      	ldr	r3, [r7, #8]
 800bada:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800badc:	2300      	movs	r3, #0
 800bade:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800bae0:	69fb      	ldr	r3, [r7, #28]
 800bae2:	1c5a      	adds	r2, r3, #1
 800bae4:	61fa      	str	r2, [r7, #28]
 800bae6:	781b      	ldrb	r3, [r3, #0]
 800bae8:	4619      	mov	r1, r3
 800baea:	69bb      	ldr	r3, [r7, #24]
 800baec:	1c5a      	adds	r2, r3, #1
 800baee:	61ba      	str	r2, [r7, #24]
 800baf0:	781b      	ldrb	r3, [r3, #0]
 800baf2:	1acb      	subs	r3, r1, r3
 800baf4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	3b01      	subs	r3, #1
 800bafa:	607b      	str	r3, [r7, #4]
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d002      	beq.n	800bb08 <mem_cmp+0x40>
 800bb02:	697b      	ldr	r3, [r7, #20]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d0eb      	beq.n	800bae0 <mem_cmp+0x18>

	return r;
 800bb08:	697b      	ldr	r3, [r7, #20]
}
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	3724      	adds	r7, #36	@ 0x24
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb14:	4770      	bx	lr

0800bb16 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800bb16:	b480      	push	{r7}
 800bb18:	b083      	sub	sp, #12
 800bb1a:	af00      	add	r7, sp, #0
 800bb1c:	6078      	str	r0, [r7, #4]
 800bb1e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800bb20:	e002      	b.n	800bb28 <chk_chr+0x12>
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	3301      	adds	r3, #1
 800bb26:	607b      	str	r3, [r7, #4]
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	781b      	ldrb	r3, [r3, #0]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d005      	beq.n	800bb3c <chk_chr+0x26>
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	781b      	ldrb	r3, [r3, #0]
 800bb34:	461a      	mov	r2, r3
 800bb36:	683b      	ldr	r3, [r7, #0]
 800bb38:	4293      	cmp	r3, r2
 800bb3a:	d1f2      	bne.n	800bb22 <chk_chr+0xc>
	return *str;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	781b      	ldrb	r3, [r3, #0]
}
 800bb40:	4618      	mov	r0, r3
 800bb42:	370c      	adds	r7, #12
 800bb44:	46bd      	mov	sp, r7
 800bb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb4a:	4770      	bx	lr

0800bb4c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800bb4c:	b480      	push	{r7}
 800bb4e:	b085      	sub	sp, #20
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]
 800bb54:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800bb56:	2300      	movs	r3, #0
 800bb58:	60bb      	str	r3, [r7, #8]
 800bb5a:	68bb      	ldr	r3, [r7, #8]
 800bb5c:	60fb      	str	r3, [r7, #12]
 800bb5e:	e029      	b.n	800bbb4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800bb60:	4a27      	ldr	r2, [pc, #156]	@ (800bc00 <chk_lock+0xb4>)
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	011b      	lsls	r3, r3, #4
 800bb66:	4413      	add	r3, r2
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d01d      	beq.n	800bbaa <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800bb6e:	4a24      	ldr	r2, [pc, #144]	@ (800bc00 <chk_lock+0xb4>)
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	011b      	lsls	r3, r3, #4
 800bb74:	4413      	add	r3, r2
 800bb76:	681a      	ldr	r2, [r3, #0]
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	429a      	cmp	r2, r3
 800bb7e:	d116      	bne.n	800bbae <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800bb80:	4a1f      	ldr	r2, [pc, #124]	@ (800bc00 <chk_lock+0xb4>)
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	011b      	lsls	r3, r3, #4
 800bb86:	4413      	add	r3, r2
 800bb88:	3304      	adds	r3, #4
 800bb8a:	681a      	ldr	r2, [r3, #0]
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800bb90:	429a      	cmp	r2, r3
 800bb92:	d10c      	bne.n	800bbae <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800bb94:	4a1a      	ldr	r2, [pc, #104]	@ (800bc00 <chk_lock+0xb4>)
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	011b      	lsls	r3, r3, #4
 800bb9a:	4413      	add	r3, r2
 800bb9c:	3308      	adds	r3, #8
 800bb9e:	681a      	ldr	r2, [r3, #0]
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800bba4:	429a      	cmp	r2, r3
 800bba6:	d102      	bne.n	800bbae <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800bba8:	e007      	b.n	800bbba <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800bbaa:	2301      	movs	r3, #1
 800bbac:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	3301      	adds	r3, #1
 800bbb2:	60fb      	str	r3, [r7, #12]
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	2b01      	cmp	r3, #1
 800bbb8:	d9d2      	bls.n	800bb60 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	2b02      	cmp	r3, #2
 800bbbe:	d109      	bne.n	800bbd4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800bbc0:	68bb      	ldr	r3, [r7, #8]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d102      	bne.n	800bbcc <chk_lock+0x80>
 800bbc6:	683b      	ldr	r3, [r7, #0]
 800bbc8:	2b02      	cmp	r3, #2
 800bbca:	d101      	bne.n	800bbd0 <chk_lock+0x84>
 800bbcc:	2300      	movs	r3, #0
 800bbce:	e010      	b.n	800bbf2 <chk_lock+0xa6>
 800bbd0:	2312      	movs	r3, #18
 800bbd2:	e00e      	b.n	800bbf2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800bbd4:	683b      	ldr	r3, [r7, #0]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d108      	bne.n	800bbec <chk_lock+0xa0>
 800bbda:	4a09      	ldr	r2, [pc, #36]	@ (800bc00 <chk_lock+0xb4>)
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	011b      	lsls	r3, r3, #4
 800bbe0:	4413      	add	r3, r2
 800bbe2:	330c      	adds	r3, #12
 800bbe4:	881b      	ldrh	r3, [r3, #0]
 800bbe6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bbea:	d101      	bne.n	800bbf0 <chk_lock+0xa4>
 800bbec:	2310      	movs	r3, #16
 800bbee:	e000      	b.n	800bbf2 <chk_lock+0xa6>
 800bbf0:	2300      	movs	r3, #0
}
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	3714      	adds	r7, #20
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfc:	4770      	bx	lr
 800bbfe:	bf00      	nop
 800bc00:	2001ea2c 	.word	0x2001ea2c

0800bc04 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800bc04:	b480      	push	{r7}
 800bc06:	b083      	sub	sp, #12
 800bc08:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	607b      	str	r3, [r7, #4]
 800bc0e:	e002      	b.n	800bc16 <enq_lock+0x12>
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	3301      	adds	r3, #1
 800bc14:	607b      	str	r3, [r7, #4]
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	2b01      	cmp	r3, #1
 800bc1a:	d806      	bhi.n	800bc2a <enq_lock+0x26>
 800bc1c:	4a09      	ldr	r2, [pc, #36]	@ (800bc44 <enq_lock+0x40>)
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	011b      	lsls	r3, r3, #4
 800bc22:	4413      	add	r3, r2
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d1f2      	bne.n	800bc10 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	2b02      	cmp	r3, #2
 800bc2e:	bf14      	ite	ne
 800bc30:	2301      	movne	r3, #1
 800bc32:	2300      	moveq	r3, #0
 800bc34:	b2db      	uxtb	r3, r3
}
 800bc36:	4618      	mov	r0, r3
 800bc38:	370c      	adds	r7, #12
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc40:	4770      	bx	lr
 800bc42:	bf00      	nop
 800bc44:	2001ea2c 	.word	0x2001ea2c

0800bc48 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800bc48:	b480      	push	{r7}
 800bc4a:	b085      	sub	sp, #20
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
 800bc50:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800bc52:	2300      	movs	r3, #0
 800bc54:	60fb      	str	r3, [r7, #12]
 800bc56:	e01f      	b.n	800bc98 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800bc58:	4a41      	ldr	r2, [pc, #260]	@ (800bd60 <inc_lock+0x118>)
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	011b      	lsls	r3, r3, #4
 800bc5e:	4413      	add	r3, r2
 800bc60:	681a      	ldr	r2, [r3, #0]
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	429a      	cmp	r2, r3
 800bc68:	d113      	bne.n	800bc92 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800bc6a:	4a3d      	ldr	r2, [pc, #244]	@ (800bd60 <inc_lock+0x118>)
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	011b      	lsls	r3, r3, #4
 800bc70:	4413      	add	r3, r2
 800bc72:	3304      	adds	r3, #4
 800bc74:	681a      	ldr	r2, [r3, #0]
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800bc7a:	429a      	cmp	r2, r3
 800bc7c:	d109      	bne.n	800bc92 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800bc7e:	4a38      	ldr	r2, [pc, #224]	@ (800bd60 <inc_lock+0x118>)
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	011b      	lsls	r3, r3, #4
 800bc84:	4413      	add	r3, r2
 800bc86:	3308      	adds	r3, #8
 800bc88:	681a      	ldr	r2, [r3, #0]
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800bc8e:	429a      	cmp	r2, r3
 800bc90:	d006      	beq.n	800bca0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	3301      	adds	r3, #1
 800bc96:	60fb      	str	r3, [r7, #12]
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	2b01      	cmp	r3, #1
 800bc9c:	d9dc      	bls.n	800bc58 <inc_lock+0x10>
 800bc9e:	e000      	b.n	800bca2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800bca0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	2b02      	cmp	r3, #2
 800bca6:	d132      	bne.n	800bd0e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800bca8:	2300      	movs	r3, #0
 800bcaa:	60fb      	str	r3, [r7, #12]
 800bcac:	e002      	b.n	800bcb4 <inc_lock+0x6c>
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	3301      	adds	r3, #1
 800bcb2:	60fb      	str	r3, [r7, #12]
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	2b01      	cmp	r3, #1
 800bcb8:	d806      	bhi.n	800bcc8 <inc_lock+0x80>
 800bcba:	4a29      	ldr	r2, [pc, #164]	@ (800bd60 <inc_lock+0x118>)
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	011b      	lsls	r3, r3, #4
 800bcc0:	4413      	add	r3, r2
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d1f2      	bne.n	800bcae <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	2b02      	cmp	r3, #2
 800bccc:	d101      	bne.n	800bcd2 <inc_lock+0x8a>
 800bcce:	2300      	movs	r3, #0
 800bcd0:	e040      	b.n	800bd54 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	681a      	ldr	r2, [r3, #0]
 800bcd6:	4922      	ldr	r1, [pc, #136]	@ (800bd60 <inc_lock+0x118>)
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	011b      	lsls	r3, r3, #4
 800bcdc:	440b      	add	r3, r1
 800bcde:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	689a      	ldr	r2, [r3, #8]
 800bce4:	491e      	ldr	r1, [pc, #120]	@ (800bd60 <inc_lock+0x118>)
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	011b      	lsls	r3, r3, #4
 800bcea:	440b      	add	r3, r1
 800bcec:	3304      	adds	r3, #4
 800bcee:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	695a      	ldr	r2, [r3, #20]
 800bcf4:	491a      	ldr	r1, [pc, #104]	@ (800bd60 <inc_lock+0x118>)
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	011b      	lsls	r3, r3, #4
 800bcfa:	440b      	add	r3, r1
 800bcfc:	3308      	adds	r3, #8
 800bcfe:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800bd00:	4a17      	ldr	r2, [pc, #92]	@ (800bd60 <inc_lock+0x118>)
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	011b      	lsls	r3, r3, #4
 800bd06:	4413      	add	r3, r2
 800bd08:	330c      	adds	r3, #12
 800bd0a:	2200      	movs	r2, #0
 800bd0c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800bd0e:	683b      	ldr	r3, [r7, #0]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d009      	beq.n	800bd28 <inc_lock+0xe0>
 800bd14:	4a12      	ldr	r2, [pc, #72]	@ (800bd60 <inc_lock+0x118>)
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	011b      	lsls	r3, r3, #4
 800bd1a:	4413      	add	r3, r2
 800bd1c:	330c      	adds	r3, #12
 800bd1e:	881b      	ldrh	r3, [r3, #0]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d001      	beq.n	800bd28 <inc_lock+0xe0>
 800bd24:	2300      	movs	r3, #0
 800bd26:	e015      	b.n	800bd54 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800bd28:	683b      	ldr	r3, [r7, #0]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d108      	bne.n	800bd40 <inc_lock+0xf8>
 800bd2e:	4a0c      	ldr	r2, [pc, #48]	@ (800bd60 <inc_lock+0x118>)
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	011b      	lsls	r3, r3, #4
 800bd34:	4413      	add	r3, r2
 800bd36:	330c      	adds	r3, #12
 800bd38:	881b      	ldrh	r3, [r3, #0]
 800bd3a:	3301      	adds	r3, #1
 800bd3c:	b29a      	uxth	r2, r3
 800bd3e:	e001      	b.n	800bd44 <inc_lock+0xfc>
 800bd40:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800bd44:	4906      	ldr	r1, [pc, #24]	@ (800bd60 <inc_lock+0x118>)
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	011b      	lsls	r3, r3, #4
 800bd4a:	440b      	add	r3, r1
 800bd4c:	330c      	adds	r3, #12
 800bd4e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	3301      	adds	r3, #1
}
 800bd54:	4618      	mov	r0, r3
 800bd56:	3714      	adds	r7, #20
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5e:	4770      	bx	lr
 800bd60:	2001ea2c 	.word	0x2001ea2c

0800bd64 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800bd64:	b480      	push	{r7}
 800bd66:	b085      	sub	sp, #20
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	3b01      	subs	r3, #1
 800bd70:	607b      	str	r3, [r7, #4]
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	2b01      	cmp	r3, #1
 800bd76:	d825      	bhi.n	800bdc4 <dec_lock+0x60>
		n = Files[i].ctr;
 800bd78:	4a17      	ldr	r2, [pc, #92]	@ (800bdd8 <dec_lock+0x74>)
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	011b      	lsls	r3, r3, #4
 800bd7e:	4413      	add	r3, r2
 800bd80:	330c      	adds	r3, #12
 800bd82:	881b      	ldrh	r3, [r3, #0]
 800bd84:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800bd86:	89fb      	ldrh	r3, [r7, #14]
 800bd88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bd8c:	d101      	bne.n	800bd92 <dec_lock+0x2e>
 800bd8e:	2300      	movs	r3, #0
 800bd90:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800bd92:	89fb      	ldrh	r3, [r7, #14]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d002      	beq.n	800bd9e <dec_lock+0x3a>
 800bd98:	89fb      	ldrh	r3, [r7, #14]
 800bd9a:	3b01      	subs	r3, #1
 800bd9c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800bd9e:	4a0e      	ldr	r2, [pc, #56]	@ (800bdd8 <dec_lock+0x74>)
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	011b      	lsls	r3, r3, #4
 800bda4:	4413      	add	r3, r2
 800bda6:	330c      	adds	r3, #12
 800bda8:	89fa      	ldrh	r2, [r7, #14]
 800bdaa:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800bdac:	89fb      	ldrh	r3, [r7, #14]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d105      	bne.n	800bdbe <dec_lock+0x5a>
 800bdb2:	4a09      	ldr	r2, [pc, #36]	@ (800bdd8 <dec_lock+0x74>)
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	011b      	lsls	r3, r3, #4
 800bdb8:	4413      	add	r3, r2
 800bdba:	2200      	movs	r2, #0
 800bdbc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	737b      	strb	r3, [r7, #13]
 800bdc2:	e001      	b.n	800bdc8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800bdc4:	2302      	movs	r3, #2
 800bdc6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800bdc8:	7b7b      	ldrb	r3, [r7, #13]
}
 800bdca:	4618      	mov	r0, r3
 800bdcc:	3714      	adds	r7, #20
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd4:	4770      	bx	lr
 800bdd6:	bf00      	nop
 800bdd8:	2001ea2c 	.word	0x2001ea2c

0800bddc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800bddc:	b480      	push	{r7}
 800bdde:	b085      	sub	sp, #20
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800bde4:	2300      	movs	r3, #0
 800bde6:	60fb      	str	r3, [r7, #12]
 800bde8:	e010      	b.n	800be0c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800bdea:	4a0d      	ldr	r2, [pc, #52]	@ (800be20 <clear_lock+0x44>)
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	011b      	lsls	r3, r3, #4
 800bdf0:	4413      	add	r3, r2
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	687a      	ldr	r2, [r7, #4]
 800bdf6:	429a      	cmp	r2, r3
 800bdf8:	d105      	bne.n	800be06 <clear_lock+0x2a>
 800bdfa:	4a09      	ldr	r2, [pc, #36]	@ (800be20 <clear_lock+0x44>)
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	011b      	lsls	r3, r3, #4
 800be00:	4413      	add	r3, r2
 800be02:	2200      	movs	r2, #0
 800be04:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	3301      	adds	r3, #1
 800be0a:	60fb      	str	r3, [r7, #12]
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	2b01      	cmp	r3, #1
 800be10:	d9eb      	bls.n	800bdea <clear_lock+0xe>
	}
}
 800be12:	bf00      	nop
 800be14:	bf00      	nop
 800be16:	3714      	adds	r7, #20
 800be18:	46bd      	mov	sp, r7
 800be1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1e:	4770      	bx	lr
 800be20:	2001ea2c 	.word	0x2001ea2c

0800be24 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800be24:	b580      	push	{r7, lr}
 800be26:	b086      	sub	sp, #24
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800be2c:	2300      	movs	r3, #0
 800be2e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	78db      	ldrb	r3, [r3, #3]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d034      	beq.n	800bea2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be3c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	7858      	ldrb	r0, [r3, #1]
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800be48:	2301      	movs	r3, #1
 800be4a:	697a      	ldr	r2, [r7, #20]
 800be4c:	f7ff fd40 	bl	800b8d0 <disk_write>
 800be50:	4603      	mov	r3, r0
 800be52:	2b00      	cmp	r3, #0
 800be54:	d002      	beq.n	800be5c <sync_window+0x38>
			res = FR_DISK_ERR;
 800be56:	2301      	movs	r3, #1
 800be58:	73fb      	strb	r3, [r7, #15]
 800be5a:	e022      	b.n	800bea2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	2200      	movs	r2, #0
 800be60:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	6a1b      	ldr	r3, [r3, #32]
 800be66:	697a      	ldr	r2, [r7, #20]
 800be68:	1ad2      	subs	r2, r2, r3
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	699b      	ldr	r3, [r3, #24]
 800be6e:	429a      	cmp	r2, r3
 800be70:	d217      	bcs.n	800bea2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	789b      	ldrb	r3, [r3, #2]
 800be76:	613b      	str	r3, [r7, #16]
 800be78:	e010      	b.n	800be9c <sync_window+0x78>
					wsect += fs->fsize;
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	699b      	ldr	r3, [r3, #24]
 800be7e:	697a      	ldr	r2, [r7, #20]
 800be80:	4413      	add	r3, r2
 800be82:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	7858      	ldrb	r0, [r3, #1]
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800be8e:	2301      	movs	r3, #1
 800be90:	697a      	ldr	r2, [r7, #20]
 800be92:	f7ff fd1d 	bl	800b8d0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800be96:	693b      	ldr	r3, [r7, #16]
 800be98:	3b01      	subs	r3, #1
 800be9a:	613b      	str	r3, [r7, #16]
 800be9c:	693b      	ldr	r3, [r7, #16]
 800be9e:	2b01      	cmp	r3, #1
 800bea0:	d8eb      	bhi.n	800be7a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800bea2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bea4:	4618      	mov	r0, r3
 800bea6:	3718      	adds	r7, #24
 800bea8:	46bd      	mov	sp, r7
 800beaa:	bd80      	pop	{r7, pc}

0800beac <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800beac:	b580      	push	{r7, lr}
 800beae:	b084      	sub	sp, #16
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	6078      	str	r0, [r7, #4]
 800beb4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800beb6:	2300      	movs	r3, #0
 800beb8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bebe:	683a      	ldr	r2, [r7, #0]
 800bec0:	429a      	cmp	r2, r3
 800bec2:	d01b      	beq.n	800befc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800bec4:	6878      	ldr	r0, [r7, #4]
 800bec6:	f7ff ffad 	bl	800be24 <sync_window>
 800beca:	4603      	mov	r3, r0
 800becc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800bece:	7bfb      	ldrb	r3, [r7, #15]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d113      	bne.n	800befc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	7858      	ldrb	r0, [r3, #1]
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800bede:	2301      	movs	r3, #1
 800bee0:	683a      	ldr	r2, [r7, #0]
 800bee2:	f7ff fcd5 	bl	800b890 <disk_read>
 800bee6:	4603      	mov	r3, r0
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d004      	beq.n	800bef6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800beec:	f04f 33ff 	mov.w	r3, #4294967295
 800bef0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800bef2:	2301      	movs	r3, #1
 800bef4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	683a      	ldr	r2, [r7, #0]
 800befa:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800befc:	7bfb      	ldrb	r3, [r7, #15]
}
 800befe:	4618      	mov	r0, r3
 800bf00:	3710      	adds	r7, #16
 800bf02:	46bd      	mov	sp, r7
 800bf04:	bd80      	pop	{r7, pc}
	...

0800bf08 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b084      	sub	sp, #16
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800bf10:	6878      	ldr	r0, [r7, #4]
 800bf12:	f7ff ff87 	bl	800be24 <sync_window>
 800bf16:	4603      	mov	r3, r0
 800bf18:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800bf1a:	7bfb      	ldrb	r3, [r7, #15]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d158      	bne.n	800bfd2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	781b      	ldrb	r3, [r3, #0]
 800bf24:	2b03      	cmp	r3, #3
 800bf26:	d148      	bne.n	800bfba <sync_fs+0xb2>
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	791b      	ldrb	r3, [r3, #4]
 800bf2c:	2b01      	cmp	r3, #1
 800bf2e:	d144      	bne.n	800bfba <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	3330      	adds	r3, #48	@ 0x30
 800bf34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bf38:	2100      	movs	r1, #0
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	f7ff fda9 	bl	800ba92 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	3330      	adds	r3, #48	@ 0x30
 800bf44:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800bf48:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	f7ff fd38 	bl	800b9c2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	3330      	adds	r3, #48	@ 0x30
 800bf56:	4921      	ldr	r1, [pc, #132]	@ (800bfdc <sync_fs+0xd4>)
 800bf58:	4618      	mov	r0, r3
 800bf5a:	f7ff fd4d 	bl	800b9f8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	3330      	adds	r3, #48	@ 0x30
 800bf62:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800bf66:	491e      	ldr	r1, [pc, #120]	@ (800bfe0 <sync_fs+0xd8>)
 800bf68:	4618      	mov	r0, r3
 800bf6a:	f7ff fd45 	bl	800b9f8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	3330      	adds	r3, #48	@ 0x30
 800bf72:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	691b      	ldr	r3, [r3, #16]
 800bf7a:	4619      	mov	r1, r3
 800bf7c:	4610      	mov	r0, r2
 800bf7e:	f7ff fd3b 	bl	800b9f8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	3330      	adds	r3, #48	@ 0x30
 800bf86:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	68db      	ldr	r3, [r3, #12]
 800bf8e:	4619      	mov	r1, r3
 800bf90:	4610      	mov	r0, r2
 800bf92:	f7ff fd31 	bl	800b9f8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	69db      	ldr	r3, [r3, #28]
 800bf9a:	1c5a      	adds	r2, r3, #1
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	7858      	ldrb	r0, [r3, #1]
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bfae:	2301      	movs	r3, #1
 800bfb0:	f7ff fc8e 	bl	800b8d0 <disk_write>
			fs->fsi_flag = 0;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	2200      	movs	r2, #0
 800bfb8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	785b      	ldrb	r3, [r3, #1]
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	2100      	movs	r1, #0
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	f7ff fca4 	bl	800b910 <disk_ioctl>
 800bfc8:	4603      	mov	r3, r0
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d001      	beq.n	800bfd2 <sync_fs+0xca>
 800bfce:	2301      	movs	r3, #1
 800bfd0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800bfd2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	3710      	adds	r7, #16
 800bfd8:	46bd      	mov	sp, r7
 800bfda:	bd80      	pop	{r7, pc}
 800bfdc:	41615252 	.word	0x41615252
 800bfe0:	61417272 	.word	0x61417272

0800bfe4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800bfe4:	b480      	push	{r7}
 800bfe6:	b083      	sub	sp, #12
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	6078      	str	r0, [r7, #4]
 800bfec:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800bfee:	683b      	ldr	r3, [r7, #0]
 800bff0:	3b02      	subs	r3, #2
 800bff2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	695b      	ldr	r3, [r3, #20]
 800bff8:	3b02      	subs	r3, #2
 800bffa:	683a      	ldr	r2, [r7, #0]
 800bffc:	429a      	cmp	r2, r3
 800bffe:	d301      	bcc.n	800c004 <clust2sect+0x20>
 800c000:	2300      	movs	r3, #0
 800c002:	e008      	b.n	800c016 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	895b      	ldrh	r3, [r3, #10]
 800c008:	461a      	mov	r2, r3
 800c00a:	683b      	ldr	r3, [r7, #0]
 800c00c:	fb03 f202 	mul.w	r2, r3, r2
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c014:	4413      	add	r3, r2
}
 800c016:	4618      	mov	r0, r3
 800c018:	370c      	adds	r7, #12
 800c01a:	46bd      	mov	sp, r7
 800c01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c020:	4770      	bx	lr

0800c022 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800c022:	b580      	push	{r7, lr}
 800c024:	b086      	sub	sp, #24
 800c026:	af00      	add	r7, sp, #0
 800c028:	6078      	str	r0, [r7, #4]
 800c02a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c032:	683b      	ldr	r3, [r7, #0]
 800c034:	2b01      	cmp	r3, #1
 800c036:	d904      	bls.n	800c042 <get_fat+0x20>
 800c038:	693b      	ldr	r3, [r7, #16]
 800c03a:	695b      	ldr	r3, [r3, #20]
 800c03c:	683a      	ldr	r2, [r7, #0]
 800c03e:	429a      	cmp	r2, r3
 800c040:	d302      	bcc.n	800c048 <get_fat+0x26>
		val = 1;	/* Internal error */
 800c042:	2301      	movs	r3, #1
 800c044:	617b      	str	r3, [r7, #20]
 800c046:	e08e      	b.n	800c166 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c048:	f04f 33ff 	mov.w	r3, #4294967295
 800c04c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800c04e:	693b      	ldr	r3, [r7, #16]
 800c050:	781b      	ldrb	r3, [r3, #0]
 800c052:	2b03      	cmp	r3, #3
 800c054:	d061      	beq.n	800c11a <get_fat+0xf8>
 800c056:	2b03      	cmp	r3, #3
 800c058:	dc7b      	bgt.n	800c152 <get_fat+0x130>
 800c05a:	2b01      	cmp	r3, #1
 800c05c:	d002      	beq.n	800c064 <get_fat+0x42>
 800c05e:	2b02      	cmp	r3, #2
 800c060:	d041      	beq.n	800c0e6 <get_fat+0xc4>
 800c062:	e076      	b.n	800c152 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800c064:	683b      	ldr	r3, [r7, #0]
 800c066:	60fb      	str	r3, [r7, #12]
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	085b      	lsrs	r3, r3, #1
 800c06c:	68fa      	ldr	r2, [r7, #12]
 800c06e:	4413      	add	r3, r2
 800c070:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c072:	693b      	ldr	r3, [r7, #16]
 800c074:	6a1a      	ldr	r2, [r3, #32]
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	0a5b      	lsrs	r3, r3, #9
 800c07a:	4413      	add	r3, r2
 800c07c:	4619      	mov	r1, r3
 800c07e:	6938      	ldr	r0, [r7, #16]
 800c080:	f7ff ff14 	bl	800beac <move_window>
 800c084:	4603      	mov	r3, r0
 800c086:	2b00      	cmp	r3, #0
 800c088:	d166      	bne.n	800c158 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	1c5a      	adds	r2, r3, #1
 800c08e:	60fa      	str	r2, [r7, #12]
 800c090:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c094:	693a      	ldr	r2, [r7, #16]
 800c096:	4413      	add	r3, r2
 800c098:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c09c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c09e:	693b      	ldr	r3, [r7, #16]
 800c0a0:	6a1a      	ldr	r2, [r3, #32]
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	0a5b      	lsrs	r3, r3, #9
 800c0a6:	4413      	add	r3, r2
 800c0a8:	4619      	mov	r1, r3
 800c0aa:	6938      	ldr	r0, [r7, #16]
 800c0ac:	f7ff fefe 	bl	800beac <move_window>
 800c0b0:	4603      	mov	r3, r0
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d152      	bne.n	800c15c <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0bc:	693a      	ldr	r2, [r7, #16]
 800c0be:	4413      	add	r3, r2
 800c0c0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c0c4:	021b      	lsls	r3, r3, #8
 800c0c6:	68ba      	ldr	r2, [r7, #8]
 800c0c8:	4313      	orrs	r3, r2
 800c0ca:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c0cc:	683b      	ldr	r3, [r7, #0]
 800c0ce:	f003 0301 	and.w	r3, r3, #1
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d002      	beq.n	800c0dc <get_fat+0xba>
 800c0d6:	68bb      	ldr	r3, [r7, #8]
 800c0d8:	091b      	lsrs	r3, r3, #4
 800c0da:	e002      	b.n	800c0e2 <get_fat+0xc0>
 800c0dc:	68bb      	ldr	r3, [r7, #8]
 800c0de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c0e2:	617b      	str	r3, [r7, #20]
			break;
 800c0e4:	e03f      	b.n	800c166 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c0e6:	693b      	ldr	r3, [r7, #16]
 800c0e8:	6a1a      	ldr	r2, [r3, #32]
 800c0ea:	683b      	ldr	r3, [r7, #0]
 800c0ec:	0a1b      	lsrs	r3, r3, #8
 800c0ee:	4413      	add	r3, r2
 800c0f0:	4619      	mov	r1, r3
 800c0f2:	6938      	ldr	r0, [r7, #16]
 800c0f4:	f7ff feda 	bl	800beac <move_window>
 800c0f8:	4603      	mov	r3, r0
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d130      	bne.n	800c160 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800c0fe:	693b      	ldr	r3, [r7, #16]
 800c100:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c104:	683b      	ldr	r3, [r7, #0]
 800c106:	005b      	lsls	r3, r3, #1
 800c108:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800c10c:	4413      	add	r3, r2
 800c10e:	4618      	mov	r0, r3
 800c110:	f7ff fc1c 	bl	800b94c <ld_word>
 800c114:	4603      	mov	r3, r0
 800c116:	617b      	str	r3, [r7, #20]
			break;
 800c118:	e025      	b.n	800c166 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c11a:	693b      	ldr	r3, [r7, #16]
 800c11c:	6a1a      	ldr	r2, [r3, #32]
 800c11e:	683b      	ldr	r3, [r7, #0]
 800c120:	09db      	lsrs	r3, r3, #7
 800c122:	4413      	add	r3, r2
 800c124:	4619      	mov	r1, r3
 800c126:	6938      	ldr	r0, [r7, #16]
 800c128:	f7ff fec0 	bl	800beac <move_window>
 800c12c:	4603      	mov	r3, r0
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d118      	bne.n	800c164 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800c132:	693b      	ldr	r3, [r7, #16]
 800c134:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c138:	683b      	ldr	r3, [r7, #0]
 800c13a:	009b      	lsls	r3, r3, #2
 800c13c:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800c140:	4413      	add	r3, r2
 800c142:	4618      	mov	r0, r3
 800c144:	f7ff fc1a 	bl	800b97c <ld_dword>
 800c148:	4603      	mov	r3, r0
 800c14a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800c14e:	617b      	str	r3, [r7, #20]
			break;
 800c150:	e009      	b.n	800c166 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800c152:	2301      	movs	r3, #1
 800c154:	617b      	str	r3, [r7, #20]
 800c156:	e006      	b.n	800c166 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c158:	bf00      	nop
 800c15a:	e004      	b.n	800c166 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c15c:	bf00      	nop
 800c15e:	e002      	b.n	800c166 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c160:	bf00      	nop
 800c162:	e000      	b.n	800c166 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c164:	bf00      	nop
		}
	}

	return val;
 800c166:	697b      	ldr	r3, [r7, #20]
}
 800c168:	4618      	mov	r0, r3
 800c16a:	3718      	adds	r7, #24
 800c16c:	46bd      	mov	sp, r7
 800c16e:	bd80      	pop	{r7, pc}

0800c170 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800c170:	b590      	push	{r4, r7, lr}
 800c172:	b089      	sub	sp, #36	@ 0x24
 800c174:	af00      	add	r7, sp, #0
 800c176:	60f8      	str	r0, [r7, #12]
 800c178:	60b9      	str	r1, [r7, #8]
 800c17a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800c17c:	2302      	movs	r3, #2
 800c17e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800c180:	68bb      	ldr	r3, [r7, #8]
 800c182:	2b01      	cmp	r3, #1
 800c184:	f240 80d9 	bls.w	800c33a <put_fat+0x1ca>
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	695b      	ldr	r3, [r3, #20]
 800c18c:	68ba      	ldr	r2, [r7, #8]
 800c18e:	429a      	cmp	r2, r3
 800c190:	f080 80d3 	bcs.w	800c33a <put_fat+0x1ca>
		switch (fs->fs_type) {
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	781b      	ldrb	r3, [r3, #0]
 800c198:	2b03      	cmp	r3, #3
 800c19a:	f000 8096 	beq.w	800c2ca <put_fat+0x15a>
 800c19e:	2b03      	cmp	r3, #3
 800c1a0:	f300 80cb 	bgt.w	800c33a <put_fat+0x1ca>
 800c1a4:	2b01      	cmp	r3, #1
 800c1a6:	d002      	beq.n	800c1ae <put_fat+0x3e>
 800c1a8:	2b02      	cmp	r3, #2
 800c1aa:	d06e      	beq.n	800c28a <put_fat+0x11a>
 800c1ac:	e0c5      	b.n	800c33a <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800c1ae:	68bb      	ldr	r3, [r7, #8]
 800c1b0:	61bb      	str	r3, [r7, #24]
 800c1b2:	69bb      	ldr	r3, [r7, #24]
 800c1b4:	085b      	lsrs	r3, r3, #1
 800c1b6:	69ba      	ldr	r2, [r7, #24]
 800c1b8:	4413      	add	r3, r2
 800c1ba:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	6a1a      	ldr	r2, [r3, #32]
 800c1c0:	69bb      	ldr	r3, [r7, #24]
 800c1c2:	0a5b      	lsrs	r3, r3, #9
 800c1c4:	4413      	add	r3, r2
 800c1c6:	4619      	mov	r1, r3
 800c1c8:	68f8      	ldr	r0, [r7, #12]
 800c1ca:	f7ff fe6f 	bl	800beac <move_window>
 800c1ce:	4603      	mov	r3, r0
 800c1d0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c1d2:	7ffb      	ldrb	r3, [r7, #31]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	f040 80a9 	bne.w	800c32c <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c1e0:	69bb      	ldr	r3, [r7, #24]
 800c1e2:	1c59      	adds	r1, r3, #1
 800c1e4:	61b9      	str	r1, [r7, #24]
 800c1e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1ea:	4413      	add	r3, r2
 800c1ec:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c1ee:	68bb      	ldr	r3, [r7, #8]
 800c1f0:	f003 0301 	and.w	r3, r3, #1
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d00d      	beq.n	800c214 <put_fat+0xa4>
 800c1f8:	697b      	ldr	r3, [r7, #20]
 800c1fa:	781b      	ldrb	r3, [r3, #0]
 800c1fc:	b25b      	sxtb	r3, r3
 800c1fe:	f003 030f 	and.w	r3, r3, #15
 800c202:	b25a      	sxtb	r2, r3
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	b2db      	uxtb	r3, r3
 800c208:	011b      	lsls	r3, r3, #4
 800c20a:	b25b      	sxtb	r3, r3
 800c20c:	4313      	orrs	r3, r2
 800c20e:	b25b      	sxtb	r3, r3
 800c210:	b2db      	uxtb	r3, r3
 800c212:	e001      	b.n	800c218 <put_fat+0xa8>
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	b2db      	uxtb	r3, r3
 800c218:	697a      	ldr	r2, [r7, #20]
 800c21a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	2201      	movs	r2, #1
 800c220:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	6a1a      	ldr	r2, [r3, #32]
 800c226:	69bb      	ldr	r3, [r7, #24]
 800c228:	0a5b      	lsrs	r3, r3, #9
 800c22a:	4413      	add	r3, r2
 800c22c:	4619      	mov	r1, r3
 800c22e:	68f8      	ldr	r0, [r7, #12]
 800c230:	f7ff fe3c 	bl	800beac <move_window>
 800c234:	4603      	mov	r3, r0
 800c236:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c238:	7ffb      	ldrb	r3, [r7, #31]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d178      	bne.n	800c330 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c244:	69bb      	ldr	r3, [r7, #24]
 800c246:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c24a:	4413      	add	r3, r2
 800c24c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c24e:	68bb      	ldr	r3, [r7, #8]
 800c250:	f003 0301 	and.w	r3, r3, #1
 800c254:	2b00      	cmp	r3, #0
 800c256:	d003      	beq.n	800c260 <put_fat+0xf0>
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	091b      	lsrs	r3, r3, #4
 800c25c:	b2db      	uxtb	r3, r3
 800c25e:	e00e      	b.n	800c27e <put_fat+0x10e>
 800c260:	697b      	ldr	r3, [r7, #20]
 800c262:	781b      	ldrb	r3, [r3, #0]
 800c264:	b25b      	sxtb	r3, r3
 800c266:	f023 030f 	bic.w	r3, r3, #15
 800c26a:	b25a      	sxtb	r2, r3
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	0a1b      	lsrs	r3, r3, #8
 800c270:	b25b      	sxtb	r3, r3
 800c272:	f003 030f 	and.w	r3, r3, #15
 800c276:	b25b      	sxtb	r3, r3
 800c278:	4313      	orrs	r3, r2
 800c27a:	b25b      	sxtb	r3, r3
 800c27c:	b2db      	uxtb	r3, r3
 800c27e:	697a      	ldr	r2, [r7, #20]
 800c280:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	2201      	movs	r2, #1
 800c286:	70da      	strb	r2, [r3, #3]
			break;
 800c288:	e057      	b.n	800c33a <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	6a1a      	ldr	r2, [r3, #32]
 800c28e:	68bb      	ldr	r3, [r7, #8]
 800c290:	0a1b      	lsrs	r3, r3, #8
 800c292:	4413      	add	r3, r2
 800c294:	4619      	mov	r1, r3
 800c296:	68f8      	ldr	r0, [r7, #12]
 800c298:	f7ff fe08 	bl	800beac <move_window>
 800c29c:	4603      	mov	r3, r0
 800c29e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c2a0:	7ffb      	ldrb	r3, [r7, #31]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d146      	bne.n	800c334 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c2ac:	68bb      	ldr	r3, [r7, #8]
 800c2ae:	005b      	lsls	r3, r3, #1
 800c2b0:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800c2b4:	4413      	add	r3, r2
 800c2b6:	687a      	ldr	r2, [r7, #4]
 800c2b8:	b292      	uxth	r2, r2
 800c2ba:	4611      	mov	r1, r2
 800c2bc:	4618      	mov	r0, r3
 800c2be:	f7ff fb80 	bl	800b9c2 <st_word>
			fs->wflag = 1;
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	2201      	movs	r2, #1
 800c2c6:	70da      	strb	r2, [r3, #3]
			break;
 800c2c8:	e037      	b.n	800c33a <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	6a1a      	ldr	r2, [r3, #32]
 800c2ce:	68bb      	ldr	r3, [r7, #8]
 800c2d0:	09db      	lsrs	r3, r3, #7
 800c2d2:	4413      	add	r3, r2
 800c2d4:	4619      	mov	r1, r3
 800c2d6:	68f8      	ldr	r0, [r7, #12]
 800c2d8:	f7ff fde8 	bl	800beac <move_window>
 800c2dc:	4603      	mov	r3, r0
 800c2de:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c2e0:	7ffb      	ldrb	r3, [r7, #31]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d128      	bne.n	800c338 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c2f2:	68bb      	ldr	r3, [r7, #8]
 800c2f4:	009b      	lsls	r3, r3, #2
 800c2f6:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800c2fa:	4413      	add	r3, r2
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	f7ff fb3d 	bl	800b97c <ld_dword>
 800c302:	4603      	mov	r3, r0
 800c304:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800c308:	4323      	orrs	r3, r4
 800c30a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c312:	68bb      	ldr	r3, [r7, #8]
 800c314:	009b      	lsls	r3, r3, #2
 800c316:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800c31a:	4413      	add	r3, r2
 800c31c:	6879      	ldr	r1, [r7, #4]
 800c31e:	4618      	mov	r0, r3
 800c320:	f7ff fb6a 	bl	800b9f8 <st_dword>
			fs->wflag = 1;
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	2201      	movs	r2, #1
 800c328:	70da      	strb	r2, [r3, #3]
			break;
 800c32a:	e006      	b.n	800c33a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c32c:	bf00      	nop
 800c32e:	e004      	b.n	800c33a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c330:	bf00      	nop
 800c332:	e002      	b.n	800c33a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c334:	bf00      	nop
 800c336:	e000      	b.n	800c33a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c338:	bf00      	nop
		}
	}
	return res;
 800c33a:	7ffb      	ldrb	r3, [r7, #31]
}
 800c33c:	4618      	mov	r0, r3
 800c33e:	3724      	adds	r7, #36	@ 0x24
 800c340:	46bd      	mov	sp, r7
 800c342:	bd90      	pop	{r4, r7, pc}

0800c344 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800c344:	b580      	push	{r7, lr}
 800c346:	b088      	sub	sp, #32
 800c348:	af00      	add	r7, sp, #0
 800c34a:	60f8      	str	r0, [r7, #12]
 800c34c:	60b9      	str	r1, [r7, #8]
 800c34e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800c350:	2300      	movs	r3, #0
 800c352:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800c35a:	68bb      	ldr	r3, [r7, #8]
 800c35c:	2b01      	cmp	r3, #1
 800c35e:	d904      	bls.n	800c36a <remove_chain+0x26>
 800c360:	69bb      	ldr	r3, [r7, #24]
 800c362:	695b      	ldr	r3, [r3, #20]
 800c364:	68ba      	ldr	r2, [r7, #8]
 800c366:	429a      	cmp	r2, r3
 800c368:	d301      	bcc.n	800c36e <remove_chain+0x2a>
 800c36a:	2302      	movs	r3, #2
 800c36c:	e04b      	b.n	800c406 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	2b00      	cmp	r3, #0
 800c372:	d00c      	beq.n	800c38e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800c374:	f04f 32ff 	mov.w	r2, #4294967295
 800c378:	6879      	ldr	r1, [r7, #4]
 800c37a:	69b8      	ldr	r0, [r7, #24]
 800c37c:	f7ff fef8 	bl	800c170 <put_fat>
 800c380:	4603      	mov	r3, r0
 800c382:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800c384:	7ffb      	ldrb	r3, [r7, #31]
 800c386:	2b00      	cmp	r3, #0
 800c388:	d001      	beq.n	800c38e <remove_chain+0x4a>
 800c38a:	7ffb      	ldrb	r3, [r7, #31]
 800c38c:	e03b      	b.n	800c406 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800c38e:	68b9      	ldr	r1, [r7, #8]
 800c390:	68f8      	ldr	r0, [r7, #12]
 800c392:	f7ff fe46 	bl	800c022 <get_fat>
 800c396:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800c398:	697b      	ldr	r3, [r7, #20]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d031      	beq.n	800c402 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c39e:	697b      	ldr	r3, [r7, #20]
 800c3a0:	2b01      	cmp	r3, #1
 800c3a2:	d101      	bne.n	800c3a8 <remove_chain+0x64>
 800c3a4:	2302      	movs	r3, #2
 800c3a6:	e02e      	b.n	800c406 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c3a8:	697b      	ldr	r3, [r7, #20]
 800c3aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3ae:	d101      	bne.n	800c3b4 <remove_chain+0x70>
 800c3b0:	2301      	movs	r3, #1
 800c3b2:	e028      	b.n	800c406 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800c3b4:	2200      	movs	r2, #0
 800c3b6:	68b9      	ldr	r1, [r7, #8]
 800c3b8:	69b8      	ldr	r0, [r7, #24]
 800c3ba:	f7ff fed9 	bl	800c170 <put_fat>
 800c3be:	4603      	mov	r3, r0
 800c3c0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800c3c2:	7ffb      	ldrb	r3, [r7, #31]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d001      	beq.n	800c3cc <remove_chain+0x88>
 800c3c8:	7ffb      	ldrb	r3, [r7, #31]
 800c3ca:	e01c      	b.n	800c406 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800c3cc:	69bb      	ldr	r3, [r7, #24]
 800c3ce:	691a      	ldr	r2, [r3, #16]
 800c3d0:	69bb      	ldr	r3, [r7, #24]
 800c3d2:	695b      	ldr	r3, [r3, #20]
 800c3d4:	3b02      	subs	r3, #2
 800c3d6:	429a      	cmp	r2, r3
 800c3d8:	d20b      	bcs.n	800c3f2 <remove_chain+0xae>
			fs->free_clst++;
 800c3da:	69bb      	ldr	r3, [r7, #24]
 800c3dc:	691b      	ldr	r3, [r3, #16]
 800c3de:	1c5a      	adds	r2, r3, #1
 800c3e0:	69bb      	ldr	r3, [r7, #24]
 800c3e2:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800c3e4:	69bb      	ldr	r3, [r7, #24]
 800c3e6:	791b      	ldrb	r3, [r3, #4]
 800c3e8:	f043 0301 	orr.w	r3, r3, #1
 800c3ec:	b2da      	uxtb	r2, r3
 800c3ee:	69bb      	ldr	r3, [r7, #24]
 800c3f0:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800c3f2:	697b      	ldr	r3, [r7, #20]
 800c3f4:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800c3f6:	69bb      	ldr	r3, [r7, #24]
 800c3f8:	695b      	ldr	r3, [r3, #20]
 800c3fa:	68ba      	ldr	r2, [r7, #8]
 800c3fc:	429a      	cmp	r2, r3
 800c3fe:	d3c6      	bcc.n	800c38e <remove_chain+0x4a>
 800c400:	e000      	b.n	800c404 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800c402:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800c404:	2300      	movs	r3, #0
}
 800c406:	4618      	mov	r0, r3
 800c408:	3720      	adds	r7, #32
 800c40a:	46bd      	mov	sp, r7
 800c40c:	bd80      	pop	{r7, pc}

0800c40e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c40e:	b580      	push	{r7, lr}
 800c410:	b088      	sub	sp, #32
 800c412:	af00      	add	r7, sp, #0
 800c414:	6078      	str	r0, [r7, #4]
 800c416:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c41e:	683b      	ldr	r3, [r7, #0]
 800c420:	2b00      	cmp	r3, #0
 800c422:	d10d      	bne.n	800c440 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800c424:	693b      	ldr	r3, [r7, #16]
 800c426:	68db      	ldr	r3, [r3, #12]
 800c428:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c42a:	69bb      	ldr	r3, [r7, #24]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d004      	beq.n	800c43a <create_chain+0x2c>
 800c430:	693b      	ldr	r3, [r7, #16]
 800c432:	695b      	ldr	r3, [r3, #20]
 800c434:	69ba      	ldr	r2, [r7, #24]
 800c436:	429a      	cmp	r2, r3
 800c438:	d31b      	bcc.n	800c472 <create_chain+0x64>
 800c43a:	2301      	movs	r3, #1
 800c43c:	61bb      	str	r3, [r7, #24]
 800c43e:	e018      	b.n	800c472 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c440:	6839      	ldr	r1, [r7, #0]
 800c442:	6878      	ldr	r0, [r7, #4]
 800c444:	f7ff fded 	bl	800c022 <get_fat>
 800c448:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	2b01      	cmp	r3, #1
 800c44e:	d801      	bhi.n	800c454 <create_chain+0x46>
 800c450:	2301      	movs	r3, #1
 800c452:	e070      	b.n	800c536 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c45a:	d101      	bne.n	800c460 <create_chain+0x52>
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	e06a      	b.n	800c536 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c460:	693b      	ldr	r3, [r7, #16]
 800c462:	695b      	ldr	r3, [r3, #20]
 800c464:	68fa      	ldr	r2, [r7, #12]
 800c466:	429a      	cmp	r2, r3
 800c468:	d201      	bcs.n	800c46e <create_chain+0x60>
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	e063      	b.n	800c536 <create_chain+0x128>
		scl = clst;
 800c46e:	683b      	ldr	r3, [r7, #0]
 800c470:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c472:	69bb      	ldr	r3, [r7, #24]
 800c474:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c476:	69fb      	ldr	r3, [r7, #28]
 800c478:	3301      	adds	r3, #1
 800c47a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c47c:	693b      	ldr	r3, [r7, #16]
 800c47e:	695b      	ldr	r3, [r3, #20]
 800c480:	69fa      	ldr	r2, [r7, #28]
 800c482:	429a      	cmp	r2, r3
 800c484:	d307      	bcc.n	800c496 <create_chain+0x88>
				ncl = 2;
 800c486:	2302      	movs	r3, #2
 800c488:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c48a:	69fa      	ldr	r2, [r7, #28]
 800c48c:	69bb      	ldr	r3, [r7, #24]
 800c48e:	429a      	cmp	r2, r3
 800c490:	d901      	bls.n	800c496 <create_chain+0x88>
 800c492:	2300      	movs	r3, #0
 800c494:	e04f      	b.n	800c536 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c496:	69f9      	ldr	r1, [r7, #28]
 800c498:	6878      	ldr	r0, [r7, #4]
 800c49a:	f7ff fdc2 	bl	800c022 <get_fat>
 800c49e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d00e      	beq.n	800c4c4 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	2b01      	cmp	r3, #1
 800c4aa:	d003      	beq.n	800c4b4 <create_chain+0xa6>
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4b2:	d101      	bne.n	800c4b8 <create_chain+0xaa>
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	e03e      	b.n	800c536 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800c4b8:	69fa      	ldr	r2, [r7, #28]
 800c4ba:	69bb      	ldr	r3, [r7, #24]
 800c4bc:	429a      	cmp	r2, r3
 800c4be:	d1da      	bne.n	800c476 <create_chain+0x68>
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	e038      	b.n	800c536 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800c4c4:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c4c6:	f04f 32ff 	mov.w	r2, #4294967295
 800c4ca:	69f9      	ldr	r1, [r7, #28]
 800c4cc:	6938      	ldr	r0, [r7, #16]
 800c4ce:	f7ff fe4f 	bl	800c170 <put_fat>
 800c4d2:	4603      	mov	r3, r0
 800c4d4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c4d6:	7dfb      	ldrb	r3, [r7, #23]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d109      	bne.n	800c4f0 <create_chain+0xe2>
 800c4dc:	683b      	ldr	r3, [r7, #0]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d006      	beq.n	800c4f0 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c4e2:	69fa      	ldr	r2, [r7, #28]
 800c4e4:	6839      	ldr	r1, [r7, #0]
 800c4e6:	6938      	ldr	r0, [r7, #16]
 800c4e8:	f7ff fe42 	bl	800c170 <put_fat>
 800c4ec:	4603      	mov	r3, r0
 800c4ee:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c4f0:	7dfb      	ldrb	r3, [r7, #23]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d116      	bne.n	800c524 <create_chain+0x116>
		fs->last_clst = ncl;
 800c4f6:	693b      	ldr	r3, [r7, #16]
 800c4f8:	69fa      	ldr	r2, [r7, #28]
 800c4fa:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c4fc:	693b      	ldr	r3, [r7, #16]
 800c4fe:	691a      	ldr	r2, [r3, #16]
 800c500:	693b      	ldr	r3, [r7, #16]
 800c502:	695b      	ldr	r3, [r3, #20]
 800c504:	3b02      	subs	r3, #2
 800c506:	429a      	cmp	r2, r3
 800c508:	d804      	bhi.n	800c514 <create_chain+0x106>
 800c50a:	693b      	ldr	r3, [r7, #16]
 800c50c:	691b      	ldr	r3, [r3, #16]
 800c50e:	1e5a      	subs	r2, r3, #1
 800c510:	693b      	ldr	r3, [r7, #16]
 800c512:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800c514:	693b      	ldr	r3, [r7, #16]
 800c516:	791b      	ldrb	r3, [r3, #4]
 800c518:	f043 0301 	orr.w	r3, r3, #1
 800c51c:	b2da      	uxtb	r2, r3
 800c51e:	693b      	ldr	r3, [r7, #16]
 800c520:	711a      	strb	r2, [r3, #4]
 800c522:	e007      	b.n	800c534 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c524:	7dfb      	ldrb	r3, [r7, #23]
 800c526:	2b01      	cmp	r3, #1
 800c528:	d102      	bne.n	800c530 <create_chain+0x122>
 800c52a:	f04f 33ff 	mov.w	r3, #4294967295
 800c52e:	e000      	b.n	800c532 <create_chain+0x124>
 800c530:	2301      	movs	r3, #1
 800c532:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c534:	69fb      	ldr	r3, [r7, #28]
}
 800c536:	4618      	mov	r0, r3
 800c538:	3720      	adds	r7, #32
 800c53a:	46bd      	mov	sp, r7
 800c53c:	bd80      	pop	{r7, pc}

0800c53e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800c53e:	b480      	push	{r7}
 800c540:	b087      	sub	sp, #28
 800c542:	af00      	add	r7, sp, #0
 800c544:	6078      	str	r0, [r7, #4]
 800c546:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c552:	3304      	adds	r3, #4
 800c554:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c556:	683b      	ldr	r3, [r7, #0]
 800c558:	0a5b      	lsrs	r3, r3, #9
 800c55a:	68fa      	ldr	r2, [r7, #12]
 800c55c:	8952      	ldrh	r2, [r2, #10]
 800c55e:	fbb3 f3f2 	udiv	r3, r3, r2
 800c562:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c564:	693b      	ldr	r3, [r7, #16]
 800c566:	1d1a      	adds	r2, r3, #4
 800c568:	613a      	str	r2, [r7, #16]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c56e:	68bb      	ldr	r3, [r7, #8]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d101      	bne.n	800c578 <clmt_clust+0x3a>
 800c574:	2300      	movs	r3, #0
 800c576:	e010      	b.n	800c59a <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800c578:	697a      	ldr	r2, [r7, #20]
 800c57a:	68bb      	ldr	r3, [r7, #8]
 800c57c:	429a      	cmp	r2, r3
 800c57e:	d307      	bcc.n	800c590 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800c580:	697a      	ldr	r2, [r7, #20]
 800c582:	68bb      	ldr	r3, [r7, #8]
 800c584:	1ad3      	subs	r3, r2, r3
 800c586:	617b      	str	r3, [r7, #20]
 800c588:	693b      	ldr	r3, [r7, #16]
 800c58a:	3304      	adds	r3, #4
 800c58c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c58e:	e7e9      	b.n	800c564 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800c590:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800c592:	693b      	ldr	r3, [r7, #16]
 800c594:	681a      	ldr	r2, [r3, #0]
 800c596:	697b      	ldr	r3, [r7, #20]
 800c598:	4413      	add	r3, r2
}
 800c59a:	4618      	mov	r0, r3
 800c59c:	371c      	adds	r7, #28
 800c59e:	46bd      	mov	sp, r7
 800c5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a4:	4770      	bx	lr

0800c5a6 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c5a6:	b580      	push	{r7, lr}
 800c5a8:	b086      	sub	sp, #24
 800c5aa:	af00      	add	r7, sp, #0
 800c5ac:	6078      	str	r0, [r7, #4]
 800c5ae:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c5b6:	683b      	ldr	r3, [r7, #0]
 800c5b8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c5bc:	d204      	bcs.n	800c5c8 <dir_sdi+0x22>
 800c5be:	683b      	ldr	r3, [r7, #0]
 800c5c0:	f003 031f 	and.w	r3, r3, #31
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d001      	beq.n	800c5cc <dir_sdi+0x26>
		return FR_INT_ERR;
 800c5c8:	2302      	movs	r3, #2
 800c5ca:	e063      	b.n	800c694 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	683a      	ldr	r2, [r7, #0]
 800c5d0:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	689b      	ldr	r3, [r3, #8]
 800c5d6:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c5d8:	697b      	ldr	r3, [r7, #20]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d106      	bne.n	800c5ec <dir_sdi+0x46>
 800c5de:	693b      	ldr	r3, [r7, #16]
 800c5e0:	781b      	ldrb	r3, [r3, #0]
 800c5e2:	2b02      	cmp	r3, #2
 800c5e4:	d902      	bls.n	800c5ec <dir_sdi+0x46>
		clst = fs->dirbase;
 800c5e6:	693b      	ldr	r3, [r7, #16]
 800c5e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5ea:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c5ec:	697b      	ldr	r3, [r7, #20]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d10c      	bne.n	800c60c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c5f2:	683b      	ldr	r3, [r7, #0]
 800c5f4:	095b      	lsrs	r3, r3, #5
 800c5f6:	693a      	ldr	r2, [r7, #16]
 800c5f8:	8912      	ldrh	r2, [r2, #8]
 800c5fa:	4293      	cmp	r3, r2
 800c5fc:	d301      	bcc.n	800c602 <dir_sdi+0x5c>
 800c5fe:	2302      	movs	r3, #2
 800c600:	e048      	b.n	800c694 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800c602:	693b      	ldr	r3, [r7, #16]
 800c604:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	61da      	str	r2, [r3, #28]
 800c60a:	e029      	b.n	800c660 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c60c:	693b      	ldr	r3, [r7, #16]
 800c60e:	895b      	ldrh	r3, [r3, #10]
 800c610:	025b      	lsls	r3, r3, #9
 800c612:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c614:	e019      	b.n	800c64a <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	6979      	ldr	r1, [r7, #20]
 800c61a:	4618      	mov	r0, r3
 800c61c:	f7ff fd01 	bl	800c022 <get_fat>
 800c620:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c622:	697b      	ldr	r3, [r7, #20]
 800c624:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c628:	d101      	bne.n	800c62e <dir_sdi+0x88>
 800c62a:	2301      	movs	r3, #1
 800c62c:	e032      	b.n	800c694 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c62e:	697b      	ldr	r3, [r7, #20]
 800c630:	2b01      	cmp	r3, #1
 800c632:	d904      	bls.n	800c63e <dir_sdi+0x98>
 800c634:	693b      	ldr	r3, [r7, #16]
 800c636:	695b      	ldr	r3, [r3, #20]
 800c638:	697a      	ldr	r2, [r7, #20]
 800c63a:	429a      	cmp	r2, r3
 800c63c:	d301      	bcc.n	800c642 <dir_sdi+0x9c>
 800c63e:	2302      	movs	r3, #2
 800c640:	e028      	b.n	800c694 <dir_sdi+0xee>
			ofs -= csz;
 800c642:	683a      	ldr	r2, [r7, #0]
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	1ad3      	subs	r3, r2, r3
 800c648:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c64a:	683a      	ldr	r2, [r7, #0]
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	429a      	cmp	r2, r3
 800c650:	d2e1      	bcs.n	800c616 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800c652:	6979      	ldr	r1, [r7, #20]
 800c654:	6938      	ldr	r0, [r7, #16]
 800c656:	f7ff fcc5 	bl	800bfe4 <clust2sect>
 800c65a:	4602      	mov	r2, r0
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	697a      	ldr	r2, [r7, #20]
 800c664:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	69db      	ldr	r3, [r3, #28]
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d101      	bne.n	800c672 <dir_sdi+0xcc>
 800c66e:	2302      	movs	r3, #2
 800c670:	e010      	b.n	800c694 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	69da      	ldr	r2, [r3, #28]
 800c676:	683b      	ldr	r3, [r7, #0]
 800c678:	0a5b      	lsrs	r3, r3, #9
 800c67a:	441a      	add	r2, r3
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c680:	693b      	ldr	r3, [r7, #16]
 800c682:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c686:	683b      	ldr	r3, [r7, #0]
 800c688:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c68c:	441a      	add	r2, r3
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c692:	2300      	movs	r3, #0
}
 800c694:	4618      	mov	r0, r3
 800c696:	3718      	adds	r7, #24
 800c698:	46bd      	mov	sp, r7
 800c69a:	bd80      	pop	{r7, pc}

0800c69c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c69c:	b580      	push	{r7, lr}
 800c69e:	b086      	sub	sp, #24
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]
 800c6a4:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	695b      	ldr	r3, [r3, #20]
 800c6b0:	3320      	adds	r3, #32
 800c6b2:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	69db      	ldr	r3, [r3, #28]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d003      	beq.n	800c6c4 <dir_next+0x28>
 800c6bc:	68bb      	ldr	r3, [r7, #8]
 800c6be:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c6c2:	d301      	bcc.n	800c6c8 <dir_next+0x2c>
 800c6c4:	2304      	movs	r3, #4
 800c6c6:	e0aa      	b.n	800c81e <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c6c8:	68bb      	ldr	r3, [r7, #8]
 800c6ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	f040 8098 	bne.w	800c804 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	69db      	ldr	r3, [r3, #28]
 800c6d8:	1c5a      	adds	r2, r3, #1
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	699b      	ldr	r3, [r3, #24]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d10b      	bne.n	800c6fe <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c6e6:	68bb      	ldr	r3, [r7, #8]
 800c6e8:	095b      	lsrs	r3, r3, #5
 800c6ea:	68fa      	ldr	r2, [r7, #12]
 800c6ec:	8912      	ldrh	r2, [r2, #8]
 800c6ee:	4293      	cmp	r3, r2
 800c6f0:	f0c0 8088 	bcc.w	800c804 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	2200      	movs	r2, #0
 800c6f8:	61da      	str	r2, [r3, #28]
 800c6fa:	2304      	movs	r3, #4
 800c6fc:	e08f      	b.n	800c81e <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c6fe:	68bb      	ldr	r3, [r7, #8]
 800c700:	0a5b      	lsrs	r3, r3, #9
 800c702:	68fa      	ldr	r2, [r7, #12]
 800c704:	8952      	ldrh	r2, [r2, #10]
 800c706:	3a01      	subs	r2, #1
 800c708:	4013      	ands	r3, r2
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d17a      	bne.n	800c804 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c70e:	687a      	ldr	r2, [r7, #4]
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	699b      	ldr	r3, [r3, #24]
 800c714:	4619      	mov	r1, r3
 800c716:	4610      	mov	r0, r2
 800c718:	f7ff fc83 	bl	800c022 <get_fat>
 800c71c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c71e:	697b      	ldr	r3, [r7, #20]
 800c720:	2b01      	cmp	r3, #1
 800c722:	d801      	bhi.n	800c728 <dir_next+0x8c>
 800c724:	2302      	movs	r3, #2
 800c726:	e07a      	b.n	800c81e <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c728:	697b      	ldr	r3, [r7, #20]
 800c72a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c72e:	d101      	bne.n	800c734 <dir_next+0x98>
 800c730:	2301      	movs	r3, #1
 800c732:	e074      	b.n	800c81e <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	695b      	ldr	r3, [r3, #20]
 800c738:	697a      	ldr	r2, [r7, #20]
 800c73a:	429a      	cmp	r2, r3
 800c73c:	d358      	bcc.n	800c7f0 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c73e:	683b      	ldr	r3, [r7, #0]
 800c740:	2b00      	cmp	r3, #0
 800c742:	d104      	bne.n	800c74e <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	2200      	movs	r2, #0
 800c748:	61da      	str	r2, [r3, #28]
 800c74a:	2304      	movs	r3, #4
 800c74c:	e067      	b.n	800c81e <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c74e:	687a      	ldr	r2, [r7, #4]
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	699b      	ldr	r3, [r3, #24]
 800c754:	4619      	mov	r1, r3
 800c756:	4610      	mov	r0, r2
 800c758:	f7ff fe59 	bl	800c40e <create_chain>
 800c75c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c75e:	697b      	ldr	r3, [r7, #20]
 800c760:	2b00      	cmp	r3, #0
 800c762:	d101      	bne.n	800c768 <dir_next+0xcc>
 800c764:	2307      	movs	r3, #7
 800c766:	e05a      	b.n	800c81e <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c768:	697b      	ldr	r3, [r7, #20]
 800c76a:	2b01      	cmp	r3, #1
 800c76c:	d101      	bne.n	800c772 <dir_next+0xd6>
 800c76e:	2302      	movs	r3, #2
 800c770:	e055      	b.n	800c81e <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c772:	697b      	ldr	r3, [r7, #20]
 800c774:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c778:	d101      	bne.n	800c77e <dir_next+0xe2>
 800c77a:	2301      	movs	r3, #1
 800c77c:	e04f      	b.n	800c81e <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c77e:	68f8      	ldr	r0, [r7, #12]
 800c780:	f7ff fb50 	bl	800be24 <sync_window>
 800c784:	4603      	mov	r3, r0
 800c786:	2b00      	cmp	r3, #0
 800c788:	d001      	beq.n	800c78e <dir_next+0xf2>
 800c78a:	2301      	movs	r3, #1
 800c78c:	e047      	b.n	800c81e <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	3330      	adds	r3, #48	@ 0x30
 800c792:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c796:	2100      	movs	r1, #0
 800c798:	4618      	mov	r0, r3
 800c79a:	f7ff f97a 	bl	800ba92 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c79e:	2300      	movs	r3, #0
 800c7a0:	613b      	str	r3, [r7, #16]
 800c7a2:	6979      	ldr	r1, [r7, #20]
 800c7a4:	68f8      	ldr	r0, [r7, #12]
 800c7a6:	f7ff fc1d 	bl	800bfe4 <clust2sect>
 800c7aa:	4602      	mov	r2, r0
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c7b0:	e012      	b.n	800c7d8 <dir_next+0x13c>
						fs->wflag = 1;
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	2201      	movs	r2, #1
 800c7b6:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c7b8:	68f8      	ldr	r0, [r7, #12]
 800c7ba:	f7ff fb33 	bl	800be24 <sync_window>
 800c7be:	4603      	mov	r3, r0
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d001      	beq.n	800c7c8 <dir_next+0x12c>
 800c7c4:	2301      	movs	r3, #1
 800c7c6:	e02a      	b.n	800c81e <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c7c8:	693b      	ldr	r3, [r7, #16]
 800c7ca:	3301      	adds	r3, #1
 800c7cc:	613b      	str	r3, [r7, #16]
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7d2:	1c5a      	adds	r2, r3, #1
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	895b      	ldrh	r3, [r3, #10]
 800c7dc:	461a      	mov	r2, r3
 800c7de:	693b      	ldr	r3, [r7, #16]
 800c7e0:	4293      	cmp	r3, r2
 800c7e2:	d3e6      	bcc.n	800c7b2 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c7e8:	693b      	ldr	r3, [r7, #16]
 800c7ea:	1ad2      	subs	r2, r2, r3
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	697a      	ldr	r2, [r7, #20]
 800c7f4:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800c7f6:	6979      	ldr	r1, [r7, #20]
 800c7f8:	68f8      	ldr	r0, [r7, #12]
 800c7fa:	f7ff fbf3 	bl	800bfe4 <clust2sect>
 800c7fe:	4602      	mov	r2, r0
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	68ba      	ldr	r2, [r7, #8]
 800c808:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c810:	68bb      	ldr	r3, [r7, #8]
 800c812:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c816:	441a      	add	r2, r3
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c81c:	2300      	movs	r3, #0
}
 800c81e:	4618      	mov	r0, r3
 800c820:	3718      	adds	r7, #24
 800c822:	46bd      	mov	sp, r7
 800c824:	bd80      	pop	{r7, pc}

0800c826 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800c826:	b580      	push	{r7, lr}
 800c828:	b086      	sub	sp, #24
 800c82a:	af00      	add	r7, sp, #0
 800c82c:	6078      	str	r0, [r7, #4]
 800c82e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c836:	2100      	movs	r1, #0
 800c838:	6878      	ldr	r0, [r7, #4]
 800c83a:	f7ff feb4 	bl	800c5a6 <dir_sdi>
 800c83e:	4603      	mov	r3, r0
 800c840:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c842:	7dfb      	ldrb	r3, [r7, #23]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d12b      	bne.n	800c8a0 <dir_alloc+0x7a>
		n = 0;
 800c848:	2300      	movs	r3, #0
 800c84a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	69db      	ldr	r3, [r3, #28]
 800c850:	4619      	mov	r1, r3
 800c852:	68f8      	ldr	r0, [r7, #12]
 800c854:	f7ff fb2a 	bl	800beac <move_window>
 800c858:	4603      	mov	r3, r0
 800c85a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c85c:	7dfb      	ldrb	r3, [r7, #23]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d11d      	bne.n	800c89e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	6a1b      	ldr	r3, [r3, #32]
 800c866:	781b      	ldrb	r3, [r3, #0]
 800c868:	2be5      	cmp	r3, #229	@ 0xe5
 800c86a:	d004      	beq.n	800c876 <dir_alloc+0x50>
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	6a1b      	ldr	r3, [r3, #32]
 800c870:	781b      	ldrb	r3, [r3, #0]
 800c872:	2b00      	cmp	r3, #0
 800c874:	d107      	bne.n	800c886 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c876:	693b      	ldr	r3, [r7, #16]
 800c878:	3301      	adds	r3, #1
 800c87a:	613b      	str	r3, [r7, #16]
 800c87c:	693a      	ldr	r2, [r7, #16]
 800c87e:	683b      	ldr	r3, [r7, #0]
 800c880:	429a      	cmp	r2, r3
 800c882:	d102      	bne.n	800c88a <dir_alloc+0x64>
 800c884:	e00c      	b.n	800c8a0 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c886:	2300      	movs	r3, #0
 800c888:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800c88a:	2101      	movs	r1, #1
 800c88c:	6878      	ldr	r0, [r7, #4]
 800c88e:	f7ff ff05 	bl	800c69c <dir_next>
 800c892:	4603      	mov	r3, r0
 800c894:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c896:	7dfb      	ldrb	r3, [r7, #23]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d0d7      	beq.n	800c84c <dir_alloc+0x26>
 800c89c:	e000      	b.n	800c8a0 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800c89e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c8a0:	7dfb      	ldrb	r3, [r7, #23]
 800c8a2:	2b04      	cmp	r3, #4
 800c8a4:	d101      	bne.n	800c8aa <dir_alloc+0x84>
 800c8a6:	2307      	movs	r3, #7
 800c8a8:	75fb      	strb	r3, [r7, #23]
	return res;
 800c8aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800c8ac:	4618      	mov	r0, r3
 800c8ae:	3718      	adds	r7, #24
 800c8b0:	46bd      	mov	sp, r7
 800c8b2:	bd80      	pop	{r7, pc}

0800c8b4 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c8b4:	b580      	push	{r7, lr}
 800c8b6:	b084      	sub	sp, #16
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	6078      	str	r0, [r7, #4]
 800c8bc:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c8be:	683b      	ldr	r3, [r7, #0]
 800c8c0:	331a      	adds	r3, #26
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	f7ff f842 	bl	800b94c <ld_word>
 800c8c8:	4603      	mov	r3, r0
 800c8ca:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	781b      	ldrb	r3, [r3, #0]
 800c8d0:	2b03      	cmp	r3, #3
 800c8d2:	d109      	bne.n	800c8e8 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c8d4:	683b      	ldr	r3, [r7, #0]
 800c8d6:	3314      	adds	r3, #20
 800c8d8:	4618      	mov	r0, r3
 800c8da:	f7ff f837 	bl	800b94c <ld_word>
 800c8de:	4603      	mov	r3, r0
 800c8e0:	041b      	lsls	r3, r3, #16
 800c8e2:	68fa      	ldr	r2, [r7, #12]
 800c8e4:	4313      	orrs	r3, r2
 800c8e6:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c8e8:	68fb      	ldr	r3, [r7, #12]
}
 800c8ea:	4618      	mov	r0, r3
 800c8ec:	3710      	adds	r7, #16
 800c8ee:	46bd      	mov	sp, r7
 800c8f0:	bd80      	pop	{r7, pc}

0800c8f2 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c8f2:	b580      	push	{r7, lr}
 800c8f4:	b084      	sub	sp, #16
 800c8f6:	af00      	add	r7, sp, #0
 800c8f8:	60f8      	str	r0, [r7, #12]
 800c8fa:	60b9      	str	r1, [r7, #8]
 800c8fc:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c8fe:	68bb      	ldr	r3, [r7, #8]
 800c900:	331a      	adds	r3, #26
 800c902:	687a      	ldr	r2, [r7, #4]
 800c904:	b292      	uxth	r2, r2
 800c906:	4611      	mov	r1, r2
 800c908:	4618      	mov	r0, r3
 800c90a:	f7ff f85a 	bl	800b9c2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	781b      	ldrb	r3, [r3, #0]
 800c912:	2b03      	cmp	r3, #3
 800c914:	d109      	bne.n	800c92a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c916:	68bb      	ldr	r3, [r7, #8]
 800c918:	f103 0214 	add.w	r2, r3, #20
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	0c1b      	lsrs	r3, r3, #16
 800c920:	b29b      	uxth	r3, r3
 800c922:	4619      	mov	r1, r3
 800c924:	4610      	mov	r0, r2
 800c926:	f7ff f84c 	bl	800b9c2 <st_word>
	}
}
 800c92a:	bf00      	nop
 800c92c:	3710      	adds	r7, #16
 800c92e:	46bd      	mov	sp, r7
 800c930:	bd80      	pop	{r7, pc}

0800c932 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800c932:	b580      	push	{r7, lr}
 800c934:	b086      	sub	sp, #24
 800c936:	af00      	add	r7, sp, #0
 800c938:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c940:	2100      	movs	r1, #0
 800c942:	6878      	ldr	r0, [r7, #4]
 800c944:	f7ff fe2f 	bl	800c5a6 <dir_sdi>
 800c948:	4603      	mov	r3, r0
 800c94a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800c94c:	7dfb      	ldrb	r3, [r7, #23]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d001      	beq.n	800c956 <dir_find+0x24>
 800c952:	7dfb      	ldrb	r3, [r7, #23]
 800c954:	e03e      	b.n	800c9d4 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	69db      	ldr	r3, [r3, #28]
 800c95a:	4619      	mov	r1, r3
 800c95c:	6938      	ldr	r0, [r7, #16]
 800c95e:	f7ff faa5 	bl	800beac <move_window>
 800c962:	4603      	mov	r3, r0
 800c964:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c966:	7dfb      	ldrb	r3, [r7, #23]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d12f      	bne.n	800c9cc <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	6a1b      	ldr	r3, [r3, #32]
 800c970:	781b      	ldrb	r3, [r3, #0]
 800c972:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c974:	7bfb      	ldrb	r3, [r7, #15]
 800c976:	2b00      	cmp	r3, #0
 800c978:	d102      	bne.n	800c980 <dir_find+0x4e>
 800c97a:	2304      	movs	r3, #4
 800c97c:	75fb      	strb	r3, [r7, #23]
 800c97e:	e028      	b.n	800c9d2 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	6a1b      	ldr	r3, [r3, #32]
 800c984:	330b      	adds	r3, #11
 800c986:	781b      	ldrb	r3, [r3, #0]
 800c988:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c98c:	b2da      	uxtb	r2, r3
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	6a1b      	ldr	r3, [r3, #32]
 800c996:	330b      	adds	r3, #11
 800c998:	781b      	ldrb	r3, [r3, #0]
 800c99a:	f003 0308 	and.w	r3, r3, #8
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d10a      	bne.n	800c9b8 <dir_find+0x86>
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	6a18      	ldr	r0, [r3, #32]
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	3324      	adds	r3, #36	@ 0x24
 800c9aa:	220b      	movs	r2, #11
 800c9ac:	4619      	mov	r1, r3
 800c9ae:	f7ff f88b 	bl	800bac8 <mem_cmp>
 800c9b2:	4603      	mov	r3, r0
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d00b      	beq.n	800c9d0 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c9b8:	2100      	movs	r1, #0
 800c9ba:	6878      	ldr	r0, [r7, #4]
 800c9bc:	f7ff fe6e 	bl	800c69c <dir_next>
 800c9c0:	4603      	mov	r3, r0
 800c9c2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800c9c4:	7dfb      	ldrb	r3, [r7, #23]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d0c5      	beq.n	800c956 <dir_find+0x24>
 800c9ca:	e002      	b.n	800c9d2 <dir_find+0xa0>
		if (res != FR_OK) break;
 800c9cc:	bf00      	nop
 800c9ce:	e000      	b.n	800c9d2 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c9d0:	bf00      	nop

	return res;
 800c9d2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	3718      	adds	r7, #24
 800c9d8:	46bd      	mov	sp, r7
 800c9da:	bd80      	pop	{r7, pc}

0800c9dc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c9dc:	b580      	push	{r7, lr}
 800c9de:	b084      	sub	sp, #16
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800c9ea:	2101      	movs	r1, #1
 800c9ec:	6878      	ldr	r0, [r7, #4]
 800c9ee:	f7ff ff1a 	bl	800c826 <dir_alloc>
 800c9f2:	4603      	mov	r3, r0
 800c9f4:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c9f6:	7bfb      	ldrb	r3, [r7, #15]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d11c      	bne.n	800ca36 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	69db      	ldr	r3, [r3, #28]
 800ca00:	4619      	mov	r1, r3
 800ca02:	68b8      	ldr	r0, [r7, #8]
 800ca04:	f7ff fa52 	bl	800beac <move_window>
 800ca08:	4603      	mov	r3, r0
 800ca0a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ca0c:	7bfb      	ldrb	r3, [r7, #15]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d111      	bne.n	800ca36 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	6a1b      	ldr	r3, [r3, #32]
 800ca16:	2220      	movs	r2, #32
 800ca18:	2100      	movs	r1, #0
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	f7ff f839 	bl	800ba92 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	6a18      	ldr	r0, [r3, #32]
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	3324      	adds	r3, #36	@ 0x24
 800ca28:	220b      	movs	r2, #11
 800ca2a:	4619      	mov	r1, r3
 800ca2c:	f7ff f810 	bl	800ba50 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800ca30:	68bb      	ldr	r3, [r7, #8]
 800ca32:	2201      	movs	r2, #1
 800ca34:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800ca36:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca38:	4618      	mov	r0, r3
 800ca3a:	3710      	adds	r7, #16
 800ca3c:	46bd      	mov	sp, r7
 800ca3e:	bd80      	pop	{r7, pc}

0800ca40 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800ca40:	b580      	push	{r7, lr}
 800ca42:	b088      	sub	sp, #32
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	6078      	str	r0, [r7, #4]
 800ca48:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800ca4a:	683b      	ldr	r3, [r7, #0]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	60fb      	str	r3, [r7, #12]
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	3324      	adds	r3, #36	@ 0x24
 800ca54:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800ca56:	220b      	movs	r2, #11
 800ca58:	2120      	movs	r1, #32
 800ca5a:	68b8      	ldr	r0, [r7, #8]
 800ca5c:	f7ff f819 	bl	800ba92 <mem_set>
	si = i = 0; ni = 8;
 800ca60:	2300      	movs	r3, #0
 800ca62:	613b      	str	r3, [r7, #16]
 800ca64:	693b      	ldr	r3, [r7, #16]
 800ca66:	61fb      	str	r3, [r7, #28]
 800ca68:	2308      	movs	r3, #8
 800ca6a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800ca6c:	69fb      	ldr	r3, [r7, #28]
 800ca6e:	1c5a      	adds	r2, r3, #1
 800ca70:	61fa      	str	r2, [r7, #28]
 800ca72:	68fa      	ldr	r2, [r7, #12]
 800ca74:	4413      	add	r3, r2
 800ca76:	781b      	ldrb	r3, [r3, #0]
 800ca78:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800ca7a:	7efb      	ldrb	r3, [r7, #27]
 800ca7c:	2b20      	cmp	r3, #32
 800ca7e:	d94e      	bls.n	800cb1e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800ca80:	7efb      	ldrb	r3, [r7, #27]
 800ca82:	2b2f      	cmp	r3, #47	@ 0x2f
 800ca84:	d006      	beq.n	800ca94 <create_name+0x54>
 800ca86:	7efb      	ldrb	r3, [r7, #27]
 800ca88:	2b5c      	cmp	r3, #92	@ 0x5c
 800ca8a:	d110      	bne.n	800caae <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800ca8c:	e002      	b.n	800ca94 <create_name+0x54>
 800ca8e:	69fb      	ldr	r3, [r7, #28]
 800ca90:	3301      	adds	r3, #1
 800ca92:	61fb      	str	r3, [r7, #28]
 800ca94:	68fa      	ldr	r2, [r7, #12]
 800ca96:	69fb      	ldr	r3, [r7, #28]
 800ca98:	4413      	add	r3, r2
 800ca9a:	781b      	ldrb	r3, [r3, #0]
 800ca9c:	2b2f      	cmp	r3, #47	@ 0x2f
 800ca9e:	d0f6      	beq.n	800ca8e <create_name+0x4e>
 800caa0:	68fa      	ldr	r2, [r7, #12]
 800caa2:	69fb      	ldr	r3, [r7, #28]
 800caa4:	4413      	add	r3, r2
 800caa6:	781b      	ldrb	r3, [r3, #0]
 800caa8:	2b5c      	cmp	r3, #92	@ 0x5c
 800caaa:	d0f0      	beq.n	800ca8e <create_name+0x4e>
			break;
 800caac:	e038      	b.n	800cb20 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800caae:	7efb      	ldrb	r3, [r7, #27]
 800cab0:	2b2e      	cmp	r3, #46	@ 0x2e
 800cab2:	d003      	beq.n	800cabc <create_name+0x7c>
 800cab4:	693a      	ldr	r2, [r7, #16]
 800cab6:	697b      	ldr	r3, [r7, #20]
 800cab8:	429a      	cmp	r2, r3
 800caba:	d30c      	bcc.n	800cad6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800cabc:	697b      	ldr	r3, [r7, #20]
 800cabe:	2b0b      	cmp	r3, #11
 800cac0:	d002      	beq.n	800cac8 <create_name+0x88>
 800cac2:	7efb      	ldrb	r3, [r7, #27]
 800cac4:	2b2e      	cmp	r3, #46	@ 0x2e
 800cac6:	d001      	beq.n	800cacc <create_name+0x8c>
 800cac8:	2306      	movs	r3, #6
 800caca:	e044      	b.n	800cb56 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800cacc:	2308      	movs	r3, #8
 800cace:	613b      	str	r3, [r7, #16]
 800cad0:	230b      	movs	r3, #11
 800cad2:	617b      	str	r3, [r7, #20]
			continue;
 800cad4:	e022      	b.n	800cb1c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800cad6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	da04      	bge.n	800cae8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800cade:	7efb      	ldrb	r3, [r7, #27]
 800cae0:	3b80      	subs	r3, #128	@ 0x80
 800cae2:	4a1f      	ldr	r2, [pc, #124]	@ (800cb60 <create_name+0x120>)
 800cae4:	5cd3      	ldrb	r3, [r2, r3]
 800cae6:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800cae8:	7efb      	ldrb	r3, [r7, #27]
 800caea:	4619      	mov	r1, r3
 800caec:	481d      	ldr	r0, [pc, #116]	@ (800cb64 <create_name+0x124>)
 800caee:	f7ff f812 	bl	800bb16 <chk_chr>
 800caf2:	4603      	mov	r3, r0
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d001      	beq.n	800cafc <create_name+0xbc>
 800caf8:	2306      	movs	r3, #6
 800cafa:	e02c      	b.n	800cb56 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800cafc:	7efb      	ldrb	r3, [r7, #27]
 800cafe:	2b60      	cmp	r3, #96	@ 0x60
 800cb00:	d905      	bls.n	800cb0e <create_name+0xce>
 800cb02:	7efb      	ldrb	r3, [r7, #27]
 800cb04:	2b7a      	cmp	r3, #122	@ 0x7a
 800cb06:	d802      	bhi.n	800cb0e <create_name+0xce>
 800cb08:	7efb      	ldrb	r3, [r7, #27]
 800cb0a:	3b20      	subs	r3, #32
 800cb0c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800cb0e:	693b      	ldr	r3, [r7, #16]
 800cb10:	1c5a      	adds	r2, r3, #1
 800cb12:	613a      	str	r2, [r7, #16]
 800cb14:	68ba      	ldr	r2, [r7, #8]
 800cb16:	4413      	add	r3, r2
 800cb18:	7efa      	ldrb	r2, [r7, #27]
 800cb1a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800cb1c:	e7a6      	b.n	800ca6c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800cb1e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800cb20:	68fa      	ldr	r2, [r7, #12]
 800cb22:	69fb      	ldr	r3, [r7, #28]
 800cb24:	441a      	add	r2, r3
 800cb26:	683b      	ldr	r3, [r7, #0]
 800cb28:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800cb2a:	693b      	ldr	r3, [r7, #16]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d101      	bne.n	800cb34 <create_name+0xf4>
 800cb30:	2306      	movs	r3, #6
 800cb32:	e010      	b.n	800cb56 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800cb34:	68bb      	ldr	r3, [r7, #8]
 800cb36:	781b      	ldrb	r3, [r3, #0]
 800cb38:	2be5      	cmp	r3, #229	@ 0xe5
 800cb3a:	d102      	bne.n	800cb42 <create_name+0x102>
 800cb3c:	68bb      	ldr	r3, [r7, #8]
 800cb3e:	2205      	movs	r2, #5
 800cb40:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800cb42:	7efb      	ldrb	r3, [r7, #27]
 800cb44:	2b20      	cmp	r3, #32
 800cb46:	d801      	bhi.n	800cb4c <create_name+0x10c>
 800cb48:	2204      	movs	r2, #4
 800cb4a:	e000      	b.n	800cb4e <create_name+0x10e>
 800cb4c:	2200      	movs	r2, #0
 800cb4e:	68bb      	ldr	r3, [r7, #8]
 800cb50:	330b      	adds	r3, #11
 800cb52:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800cb54:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800cb56:	4618      	mov	r0, r3
 800cb58:	3720      	adds	r7, #32
 800cb5a:	46bd      	mov	sp, r7
 800cb5c:	bd80      	pop	{r7, pc}
 800cb5e:	bf00      	nop
 800cb60:	08016d98 	.word	0x08016d98
 800cb64:	08016cf0 	.word	0x08016cf0

0800cb68 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800cb68:	b580      	push	{r7, lr}
 800cb6a:	b086      	sub	sp, #24
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	6078      	str	r0, [r7, #4]
 800cb70:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800cb76:	693b      	ldr	r3, [r7, #16]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800cb7c:	e002      	b.n	800cb84 <follow_path+0x1c>
 800cb7e:	683b      	ldr	r3, [r7, #0]
 800cb80:	3301      	adds	r3, #1
 800cb82:	603b      	str	r3, [r7, #0]
 800cb84:	683b      	ldr	r3, [r7, #0]
 800cb86:	781b      	ldrb	r3, [r3, #0]
 800cb88:	2b2f      	cmp	r3, #47	@ 0x2f
 800cb8a:	d0f8      	beq.n	800cb7e <follow_path+0x16>
 800cb8c:	683b      	ldr	r3, [r7, #0]
 800cb8e:	781b      	ldrb	r3, [r3, #0]
 800cb90:	2b5c      	cmp	r3, #92	@ 0x5c
 800cb92:	d0f4      	beq.n	800cb7e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800cb94:	693b      	ldr	r3, [r7, #16]
 800cb96:	2200      	movs	r2, #0
 800cb98:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800cb9a:	683b      	ldr	r3, [r7, #0]
 800cb9c:	781b      	ldrb	r3, [r3, #0]
 800cb9e:	2b1f      	cmp	r3, #31
 800cba0:	d80a      	bhi.n	800cbb8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	2280      	movs	r2, #128	@ 0x80
 800cba6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800cbaa:	2100      	movs	r1, #0
 800cbac:	6878      	ldr	r0, [r7, #4]
 800cbae:	f7ff fcfa 	bl	800c5a6 <dir_sdi>
 800cbb2:	4603      	mov	r3, r0
 800cbb4:	75fb      	strb	r3, [r7, #23]
 800cbb6:	e043      	b.n	800cc40 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800cbb8:	463b      	mov	r3, r7
 800cbba:	4619      	mov	r1, r3
 800cbbc:	6878      	ldr	r0, [r7, #4]
 800cbbe:	f7ff ff3f 	bl	800ca40 <create_name>
 800cbc2:	4603      	mov	r3, r0
 800cbc4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800cbc6:	7dfb      	ldrb	r3, [r7, #23]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d134      	bne.n	800cc36 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800cbcc:	6878      	ldr	r0, [r7, #4]
 800cbce:	f7ff feb0 	bl	800c932 <dir_find>
 800cbd2:	4603      	mov	r3, r0
 800cbd4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800cbdc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800cbde:	7dfb      	ldrb	r3, [r7, #23]
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d00a      	beq.n	800cbfa <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800cbe4:	7dfb      	ldrb	r3, [r7, #23]
 800cbe6:	2b04      	cmp	r3, #4
 800cbe8:	d127      	bne.n	800cc3a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800cbea:	7afb      	ldrb	r3, [r7, #11]
 800cbec:	f003 0304 	and.w	r3, r3, #4
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d122      	bne.n	800cc3a <follow_path+0xd2>
 800cbf4:	2305      	movs	r3, #5
 800cbf6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800cbf8:	e01f      	b.n	800cc3a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800cbfa:	7afb      	ldrb	r3, [r7, #11]
 800cbfc:	f003 0304 	and.w	r3, r3, #4
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d11c      	bne.n	800cc3e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800cc04:	693b      	ldr	r3, [r7, #16]
 800cc06:	799b      	ldrb	r3, [r3, #6]
 800cc08:	f003 0310 	and.w	r3, r3, #16
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d102      	bne.n	800cc16 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800cc10:	2305      	movs	r3, #5
 800cc12:	75fb      	strb	r3, [r7, #23]
 800cc14:	e014      	b.n	800cc40 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	695b      	ldr	r3, [r3, #20]
 800cc20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc24:	4413      	add	r3, r2
 800cc26:	4619      	mov	r1, r3
 800cc28:	68f8      	ldr	r0, [r7, #12]
 800cc2a:	f7ff fe43 	bl	800c8b4 <ld_clust>
 800cc2e:	4602      	mov	r2, r0
 800cc30:	693b      	ldr	r3, [r7, #16]
 800cc32:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800cc34:	e7c0      	b.n	800cbb8 <follow_path+0x50>
			if (res != FR_OK) break;
 800cc36:	bf00      	nop
 800cc38:	e002      	b.n	800cc40 <follow_path+0xd8>
				break;
 800cc3a:	bf00      	nop
 800cc3c:	e000      	b.n	800cc40 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800cc3e:	bf00      	nop
			}
		}
	}

	return res;
 800cc40:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc42:	4618      	mov	r0, r3
 800cc44:	3718      	adds	r7, #24
 800cc46:	46bd      	mov	sp, r7
 800cc48:	bd80      	pop	{r7, pc}

0800cc4a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800cc4a:	b480      	push	{r7}
 800cc4c:	b087      	sub	sp, #28
 800cc4e:	af00      	add	r7, sp, #0
 800cc50:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800cc52:	f04f 33ff 	mov.w	r3, #4294967295
 800cc56:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d031      	beq.n	800ccc4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	617b      	str	r3, [r7, #20]
 800cc66:	e002      	b.n	800cc6e <get_ldnumber+0x24>
 800cc68:	697b      	ldr	r3, [r7, #20]
 800cc6a:	3301      	adds	r3, #1
 800cc6c:	617b      	str	r3, [r7, #20]
 800cc6e:	697b      	ldr	r3, [r7, #20]
 800cc70:	781b      	ldrb	r3, [r3, #0]
 800cc72:	2b20      	cmp	r3, #32
 800cc74:	d903      	bls.n	800cc7e <get_ldnumber+0x34>
 800cc76:	697b      	ldr	r3, [r7, #20]
 800cc78:	781b      	ldrb	r3, [r3, #0]
 800cc7a:	2b3a      	cmp	r3, #58	@ 0x3a
 800cc7c:	d1f4      	bne.n	800cc68 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800cc7e:	697b      	ldr	r3, [r7, #20]
 800cc80:	781b      	ldrb	r3, [r3, #0]
 800cc82:	2b3a      	cmp	r3, #58	@ 0x3a
 800cc84:	d11c      	bne.n	800ccc0 <get_ldnumber+0x76>
			tp = *path;
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	1c5a      	adds	r2, r3, #1
 800cc90:	60fa      	str	r2, [r7, #12]
 800cc92:	781b      	ldrb	r3, [r3, #0]
 800cc94:	3b30      	subs	r3, #48	@ 0x30
 800cc96:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800cc98:	68bb      	ldr	r3, [r7, #8]
 800cc9a:	2b09      	cmp	r3, #9
 800cc9c:	d80e      	bhi.n	800ccbc <get_ldnumber+0x72>
 800cc9e:	68fa      	ldr	r2, [r7, #12]
 800cca0:	697b      	ldr	r3, [r7, #20]
 800cca2:	429a      	cmp	r2, r3
 800cca4:	d10a      	bne.n	800ccbc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800cca6:	68bb      	ldr	r3, [r7, #8]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d107      	bne.n	800ccbc <get_ldnumber+0x72>
					vol = (int)i;
 800ccac:	68bb      	ldr	r3, [r7, #8]
 800ccae:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ccb0:	697b      	ldr	r3, [r7, #20]
 800ccb2:	3301      	adds	r3, #1
 800ccb4:	617b      	str	r3, [r7, #20]
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	697a      	ldr	r2, [r7, #20]
 800ccba:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ccbc:	693b      	ldr	r3, [r7, #16]
 800ccbe:	e002      	b.n	800ccc6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ccc0:	2300      	movs	r3, #0
 800ccc2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ccc4:	693b      	ldr	r3, [r7, #16]
}
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	371c      	adds	r7, #28
 800ccca:	46bd      	mov	sp, r7
 800cccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd0:	4770      	bx	lr
	...

0800ccd4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800ccd4:	b580      	push	{r7, lr}
 800ccd6:	b082      	sub	sp, #8
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	6078      	str	r0, [r7, #4]
 800ccdc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	2200      	movs	r2, #0
 800cce2:	70da      	strb	r2, [r3, #3]
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	f04f 32ff 	mov.w	r2, #4294967295
 800ccea:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800ccec:	6839      	ldr	r1, [r7, #0]
 800ccee:	6878      	ldr	r0, [r7, #4]
 800ccf0:	f7ff f8dc 	bl	800beac <move_window>
 800ccf4:	4603      	mov	r3, r0
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d001      	beq.n	800ccfe <check_fs+0x2a>
 800ccfa:	2304      	movs	r3, #4
 800ccfc:	e038      	b.n	800cd70 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	3330      	adds	r3, #48	@ 0x30
 800cd02:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800cd06:	4618      	mov	r0, r3
 800cd08:	f7fe fe20 	bl	800b94c <ld_word>
 800cd0c:	4603      	mov	r3, r0
 800cd0e:	461a      	mov	r2, r3
 800cd10:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800cd14:	429a      	cmp	r2, r3
 800cd16:	d001      	beq.n	800cd1c <check_fs+0x48>
 800cd18:	2303      	movs	r3, #3
 800cd1a:	e029      	b.n	800cd70 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cd22:	2be9      	cmp	r3, #233	@ 0xe9
 800cd24:	d009      	beq.n	800cd3a <check_fs+0x66>
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cd2c:	2beb      	cmp	r3, #235	@ 0xeb
 800cd2e:	d11e      	bne.n	800cd6e <check_fs+0x9a>
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800cd36:	2b90      	cmp	r3, #144	@ 0x90
 800cd38:	d119      	bne.n	800cd6e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	3330      	adds	r3, #48	@ 0x30
 800cd3e:	3336      	adds	r3, #54	@ 0x36
 800cd40:	4618      	mov	r0, r3
 800cd42:	f7fe fe1b 	bl	800b97c <ld_dword>
 800cd46:	4603      	mov	r3, r0
 800cd48:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800cd4c:	4a0a      	ldr	r2, [pc, #40]	@ (800cd78 <check_fs+0xa4>)
 800cd4e:	4293      	cmp	r3, r2
 800cd50:	d101      	bne.n	800cd56 <check_fs+0x82>
 800cd52:	2300      	movs	r3, #0
 800cd54:	e00c      	b.n	800cd70 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	3330      	adds	r3, #48	@ 0x30
 800cd5a:	3352      	adds	r3, #82	@ 0x52
 800cd5c:	4618      	mov	r0, r3
 800cd5e:	f7fe fe0d 	bl	800b97c <ld_dword>
 800cd62:	4603      	mov	r3, r0
 800cd64:	4a05      	ldr	r2, [pc, #20]	@ (800cd7c <check_fs+0xa8>)
 800cd66:	4293      	cmp	r3, r2
 800cd68:	d101      	bne.n	800cd6e <check_fs+0x9a>
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	e000      	b.n	800cd70 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800cd6e:	2302      	movs	r3, #2
}
 800cd70:	4618      	mov	r0, r3
 800cd72:	3708      	adds	r7, #8
 800cd74:	46bd      	mov	sp, r7
 800cd76:	bd80      	pop	{r7, pc}
 800cd78:	00544146 	.word	0x00544146
 800cd7c:	33544146 	.word	0x33544146

0800cd80 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800cd80:	b580      	push	{r7, lr}
 800cd82:	b096      	sub	sp, #88	@ 0x58
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	60f8      	str	r0, [r7, #12]
 800cd88:	60b9      	str	r1, [r7, #8]
 800cd8a:	4613      	mov	r3, r2
 800cd8c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800cd8e:	68bb      	ldr	r3, [r7, #8]
 800cd90:	2200      	movs	r2, #0
 800cd92:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800cd94:	68f8      	ldr	r0, [r7, #12]
 800cd96:	f7ff ff58 	bl	800cc4a <get_ldnumber>
 800cd9a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800cd9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	da01      	bge.n	800cda6 <find_volume+0x26>
 800cda2:	230b      	movs	r3, #11
 800cda4:	e22d      	b.n	800d202 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800cda6:	4aa1      	ldr	r2, [pc, #644]	@ (800d02c <find_volume+0x2ac>)
 800cda8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cdaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cdae:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800cdb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d101      	bne.n	800cdba <find_volume+0x3a>
 800cdb6:	230c      	movs	r3, #12
 800cdb8:	e223      	b.n	800d202 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800cdba:	68bb      	ldr	r3, [r7, #8]
 800cdbc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cdbe:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800cdc0:	79fb      	ldrb	r3, [r7, #7]
 800cdc2:	f023 0301 	bic.w	r3, r3, #1
 800cdc6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800cdc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdca:	781b      	ldrb	r3, [r3, #0]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d01a      	beq.n	800ce06 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800cdd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdd2:	785b      	ldrb	r3, [r3, #1]
 800cdd4:	4618      	mov	r0, r3
 800cdd6:	f7fe fd1b 	bl	800b810 <disk_status>
 800cdda:	4603      	mov	r3, r0
 800cddc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800cde0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cde4:	f003 0301 	and.w	r3, r3, #1
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d10c      	bne.n	800ce06 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800cdec:	79fb      	ldrb	r3, [r7, #7]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d007      	beq.n	800ce02 <find_volume+0x82>
 800cdf2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cdf6:	f003 0304 	and.w	r3, r3, #4
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d001      	beq.n	800ce02 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800cdfe:	230a      	movs	r3, #10
 800ce00:	e1ff      	b.n	800d202 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800ce02:	2300      	movs	r3, #0
 800ce04:	e1fd      	b.n	800d202 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800ce06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce08:	2200      	movs	r2, #0
 800ce0a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800ce0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce0e:	b2da      	uxtb	r2, r3
 800ce10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce12:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800ce14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce16:	785b      	ldrb	r3, [r3, #1]
 800ce18:	4618      	mov	r0, r3
 800ce1a:	f7fe fd13 	bl	800b844 <disk_initialize>
 800ce1e:	4603      	mov	r3, r0
 800ce20:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800ce24:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ce28:	f003 0301 	and.w	r3, r3, #1
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d001      	beq.n	800ce34 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800ce30:	2303      	movs	r3, #3
 800ce32:	e1e6      	b.n	800d202 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800ce34:	79fb      	ldrb	r3, [r7, #7]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d007      	beq.n	800ce4a <find_volume+0xca>
 800ce3a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ce3e:	f003 0304 	and.w	r3, r3, #4
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d001      	beq.n	800ce4a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800ce46:	230a      	movs	r3, #10
 800ce48:	e1db      	b.n	800d202 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800ce4a:	2300      	movs	r3, #0
 800ce4c:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800ce4e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ce50:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ce52:	f7ff ff3f 	bl	800ccd4 <check_fs>
 800ce56:	4603      	mov	r3, r0
 800ce58:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800ce5c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ce60:	2b02      	cmp	r3, #2
 800ce62:	d149      	bne.n	800cef8 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ce64:	2300      	movs	r3, #0
 800ce66:	643b      	str	r3, [r7, #64]	@ 0x40
 800ce68:	e01e      	b.n	800cea8 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800ce6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce6c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ce70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ce72:	011b      	lsls	r3, r3, #4
 800ce74:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800ce78:	4413      	add	r3, r2
 800ce7a:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ce7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce7e:	3304      	adds	r3, #4
 800ce80:	781b      	ldrb	r3, [r3, #0]
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d006      	beq.n	800ce94 <find_volume+0x114>
 800ce86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce88:	3308      	adds	r3, #8
 800ce8a:	4618      	mov	r0, r3
 800ce8c:	f7fe fd76 	bl	800b97c <ld_dword>
 800ce90:	4602      	mov	r2, r0
 800ce92:	e000      	b.n	800ce96 <find_volume+0x116>
 800ce94:	2200      	movs	r2, #0
 800ce96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ce98:	009b      	lsls	r3, r3, #2
 800ce9a:	3358      	adds	r3, #88	@ 0x58
 800ce9c:	443b      	add	r3, r7
 800ce9e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800cea2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cea4:	3301      	adds	r3, #1
 800cea6:	643b      	str	r3, [r7, #64]	@ 0x40
 800cea8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ceaa:	2b03      	cmp	r3, #3
 800ceac:	d9dd      	bls.n	800ce6a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800ceae:	2300      	movs	r3, #0
 800ceb0:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800ceb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d002      	beq.n	800cebe <find_volume+0x13e>
 800ceb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ceba:	3b01      	subs	r3, #1
 800cebc:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800cebe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cec0:	009b      	lsls	r3, r3, #2
 800cec2:	3358      	adds	r3, #88	@ 0x58
 800cec4:	443b      	add	r3, r7
 800cec6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800ceca:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800cecc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d005      	beq.n	800cede <find_volume+0x15e>
 800ced2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ced4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ced6:	f7ff fefd 	bl	800ccd4 <check_fs>
 800ceda:	4603      	mov	r3, r0
 800cedc:	e000      	b.n	800cee0 <find_volume+0x160>
 800cede:	2303      	movs	r3, #3
 800cee0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800cee4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cee8:	2b01      	cmp	r3, #1
 800ceea:	d905      	bls.n	800cef8 <find_volume+0x178>
 800ceec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ceee:	3301      	adds	r3, #1
 800cef0:	643b      	str	r3, [r7, #64]	@ 0x40
 800cef2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cef4:	2b03      	cmp	r3, #3
 800cef6:	d9e2      	bls.n	800cebe <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800cef8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cefc:	2b04      	cmp	r3, #4
 800cefe:	d101      	bne.n	800cf04 <find_volume+0x184>
 800cf00:	2301      	movs	r3, #1
 800cf02:	e17e      	b.n	800d202 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800cf04:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cf08:	2b01      	cmp	r3, #1
 800cf0a:	d901      	bls.n	800cf10 <find_volume+0x190>
 800cf0c:	230d      	movs	r3, #13
 800cf0e:	e178      	b.n	800d202 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800cf10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf12:	3330      	adds	r3, #48	@ 0x30
 800cf14:	330b      	adds	r3, #11
 800cf16:	4618      	mov	r0, r3
 800cf18:	f7fe fd18 	bl	800b94c <ld_word>
 800cf1c:	4603      	mov	r3, r0
 800cf1e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cf22:	d001      	beq.n	800cf28 <find_volume+0x1a8>
 800cf24:	230d      	movs	r3, #13
 800cf26:	e16c      	b.n	800d202 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800cf28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf2a:	3330      	adds	r3, #48	@ 0x30
 800cf2c:	3316      	adds	r3, #22
 800cf2e:	4618      	mov	r0, r3
 800cf30:	f7fe fd0c 	bl	800b94c <ld_word>
 800cf34:	4603      	mov	r3, r0
 800cf36:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800cf38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d106      	bne.n	800cf4c <find_volume+0x1cc>
 800cf3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf40:	3330      	adds	r3, #48	@ 0x30
 800cf42:	3324      	adds	r3, #36	@ 0x24
 800cf44:	4618      	mov	r0, r3
 800cf46:	f7fe fd19 	bl	800b97c <ld_dword>
 800cf4a:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800cf4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf4e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800cf50:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800cf52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf54:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800cf58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf5a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800cf5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf5e:	789b      	ldrb	r3, [r3, #2]
 800cf60:	2b01      	cmp	r3, #1
 800cf62:	d005      	beq.n	800cf70 <find_volume+0x1f0>
 800cf64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf66:	789b      	ldrb	r3, [r3, #2]
 800cf68:	2b02      	cmp	r3, #2
 800cf6a:	d001      	beq.n	800cf70 <find_volume+0x1f0>
 800cf6c:	230d      	movs	r3, #13
 800cf6e:	e148      	b.n	800d202 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800cf70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf72:	789b      	ldrb	r3, [r3, #2]
 800cf74:	461a      	mov	r2, r3
 800cf76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cf78:	fb02 f303 	mul.w	r3, r2, r3
 800cf7c:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800cf7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cf84:	461a      	mov	r2, r3
 800cf86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf88:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800cf8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf8c:	895b      	ldrh	r3, [r3, #10]
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d008      	beq.n	800cfa4 <find_volume+0x224>
 800cf92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf94:	895b      	ldrh	r3, [r3, #10]
 800cf96:	461a      	mov	r2, r3
 800cf98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf9a:	895b      	ldrh	r3, [r3, #10]
 800cf9c:	3b01      	subs	r3, #1
 800cf9e:	4013      	ands	r3, r2
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d001      	beq.n	800cfa8 <find_volume+0x228>
 800cfa4:	230d      	movs	r3, #13
 800cfa6:	e12c      	b.n	800d202 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800cfa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfaa:	3330      	adds	r3, #48	@ 0x30
 800cfac:	3311      	adds	r3, #17
 800cfae:	4618      	mov	r0, r3
 800cfb0:	f7fe fccc 	bl	800b94c <ld_word>
 800cfb4:	4603      	mov	r3, r0
 800cfb6:	461a      	mov	r2, r3
 800cfb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfba:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800cfbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfbe:	891b      	ldrh	r3, [r3, #8]
 800cfc0:	f003 030f 	and.w	r3, r3, #15
 800cfc4:	b29b      	uxth	r3, r3
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d001      	beq.n	800cfce <find_volume+0x24e>
 800cfca:	230d      	movs	r3, #13
 800cfcc:	e119      	b.n	800d202 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800cfce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfd0:	3330      	adds	r3, #48	@ 0x30
 800cfd2:	3313      	adds	r3, #19
 800cfd4:	4618      	mov	r0, r3
 800cfd6:	f7fe fcb9 	bl	800b94c <ld_word>
 800cfda:	4603      	mov	r3, r0
 800cfdc:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800cfde:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d106      	bne.n	800cff2 <find_volume+0x272>
 800cfe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfe6:	3330      	adds	r3, #48	@ 0x30
 800cfe8:	3320      	adds	r3, #32
 800cfea:	4618      	mov	r0, r3
 800cfec:	f7fe fcc6 	bl	800b97c <ld_dword>
 800cff0:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800cff2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cff4:	3330      	adds	r3, #48	@ 0x30
 800cff6:	330e      	adds	r3, #14
 800cff8:	4618      	mov	r0, r3
 800cffa:	f7fe fca7 	bl	800b94c <ld_word>
 800cffe:	4603      	mov	r3, r0
 800d000:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d002:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800d004:	2b00      	cmp	r3, #0
 800d006:	d101      	bne.n	800d00c <find_volume+0x28c>
 800d008:	230d      	movs	r3, #13
 800d00a:	e0fa      	b.n	800d202 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d00c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800d00e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d010:	4413      	add	r3, r2
 800d012:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d014:	8912      	ldrh	r2, [r2, #8]
 800d016:	0912      	lsrs	r2, r2, #4
 800d018:	b292      	uxth	r2, r2
 800d01a:	4413      	add	r3, r2
 800d01c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d01e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d022:	429a      	cmp	r2, r3
 800d024:	d204      	bcs.n	800d030 <find_volume+0x2b0>
 800d026:	230d      	movs	r3, #13
 800d028:	e0eb      	b.n	800d202 <find_volume+0x482>
 800d02a:	bf00      	nop
 800d02c:	2001ea24 	.word	0x2001ea24
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d030:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d032:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d034:	1ad3      	subs	r3, r2, r3
 800d036:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d038:	8952      	ldrh	r2, [r2, #10]
 800d03a:	fbb3 f3f2 	udiv	r3, r3, r2
 800d03e:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d042:	2b00      	cmp	r3, #0
 800d044:	d101      	bne.n	800d04a <find_volume+0x2ca>
 800d046:	230d      	movs	r3, #13
 800d048:	e0db      	b.n	800d202 <find_volume+0x482>
		fmt = FS_FAT32;
 800d04a:	2303      	movs	r3, #3
 800d04c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d052:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800d056:	4293      	cmp	r3, r2
 800d058:	d802      	bhi.n	800d060 <find_volume+0x2e0>
 800d05a:	2302      	movs	r3, #2
 800d05c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d062:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800d066:	4293      	cmp	r3, r2
 800d068:	d802      	bhi.n	800d070 <find_volume+0x2f0>
 800d06a:	2301      	movs	r3, #1
 800d06c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d072:	1c9a      	adds	r2, r3, #2
 800d074:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d076:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800d078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d07a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d07c:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d07e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800d080:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d082:	441a      	add	r2, r3
 800d084:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d086:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800d088:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d08a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d08c:	441a      	add	r2, r3
 800d08e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d090:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800d092:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d096:	2b03      	cmp	r3, #3
 800d098:	d11e      	bne.n	800d0d8 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d09a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d09c:	3330      	adds	r3, #48	@ 0x30
 800d09e:	332a      	adds	r3, #42	@ 0x2a
 800d0a0:	4618      	mov	r0, r3
 800d0a2:	f7fe fc53 	bl	800b94c <ld_word>
 800d0a6:	4603      	mov	r3, r0
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d001      	beq.n	800d0b0 <find_volume+0x330>
 800d0ac:	230d      	movs	r3, #13
 800d0ae:	e0a8      	b.n	800d202 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d0b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0b2:	891b      	ldrh	r3, [r3, #8]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d001      	beq.n	800d0bc <find_volume+0x33c>
 800d0b8:	230d      	movs	r3, #13
 800d0ba:	e0a2      	b.n	800d202 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d0bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0be:	3330      	adds	r3, #48	@ 0x30
 800d0c0:	332c      	adds	r3, #44	@ 0x2c
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	f7fe fc5a 	bl	800b97c <ld_dword>
 800d0c8:	4602      	mov	r2, r0
 800d0ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0cc:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d0ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0d0:	695b      	ldr	r3, [r3, #20]
 800d0d2:	009b      	lsls	r3, r3, #2
 800d0d4:	647b      	str	r3, [r7, #68]	@ 0x44
 800d0d6:	e01f      	b.n	800d118 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d0d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0da:	891b      	ldrh	r3, [r3, #8]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d101      	bne.n	800d0e4 <find_volume+0x364>
 800d0e0:	230d      	movs	r3, #13
 800d0e2:	e08e      	b.n	800d202 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d0e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0e6:	6a1a      	ldr	r2, [r3, #32]
 800d0e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d0ea:	441a      	add	r2, r3
 800d0ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0ee:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d0f0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d0f4:	2b02      	cmp	r3, #2
 800d0f6:	d103      	bne.n	800d100 <find_volume+0x380>
 800d0f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0fa:	695b      	ldr	r3, [r3, #20]
 800d0fc:	005b      	lsls	r3, r3, #1
 800d0fe:	e00a      	b.n	800d116 <find_volume+0x396>
 800d100:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d102:	695a      	ldr	r2, [r3, #20]
 800d104:	4613      	mov	r3, r2
 800d106:	005b      	lsls	r3, r3, #1
 800d108:	4413      	add	r3, r2
 800d10a:	085a      	lsrs	r2, r3, #1
 800d10c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d10e:	695b      	ldr	r3, [r3, #20]
 800d110:	f003 0301 	and.w	r3, r3, #1
 800d114:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800d116:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d118:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d11a:	699a      	ldr	r2, [r3, #24]
 800d11c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d11e:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800d122:	0a5b      	lsrs	r3, r3, #9
 800d124:	429a      	cmp	r2, r3
 800d126:	d201      	bcs.n	800d12c <find_volume+0x3ac>
 800d128:	230d      	movs	r3, #13
 800d12a:	e06a      	b.n	800d202 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d12c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d12e:	f04f 32ff 	mov.w	r2, #4294967295
 800d132:	611a      	str	r2, [r3, #16]
 800d134:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d136:	691a      	ldr	r2, [r3, #16]
 800d138:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d13a:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800d13c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d13e:	2280      	movs	r2, #128	@ 0x80
 800d140:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800d142:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d146:	2b03      	cmp	r3, #3
 800d148:	d149      	bne.n	800d1de <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d14a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d14c:	3330      	adds	r3, #48	@ 0x30
 800d14e:	3330      	adds	r3, #48	@ 0x30
 800d150:	4618      	mov	r0, r3
 800d152:	f7fe fbfb 	bl	800b94c <ld_word>
 800d156:	4603      	mov	r3, r0
 800d158:	2b01      	cmp	r3, #1
 800d15a:	d140      	bne.n	800d1de <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d15c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d15e:	3301      	adds	r3, #1
 800d160:	4619      	mov	r1, r3
 800d162:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d164:	f7fe fea2 	bl	800beac <move_window>
 800d168:	4603      	mov	r3, r0
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d137      	bne.n	800d1de <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800d16e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d170:	2200      	movs	r2, #0
 800d172:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d176:	3330      	adds	r3, #48	@ 0x30
 800d178:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800d17c:	4618      	mov	r0, r3
 800d17e:	f7fe fbe5 	bl	800b94c <ld_word>
 800d182:	4603      	mov	r3, r0
 800d184:	461a      	mov	r2, r3
 800d186:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800d18a:	429a      	cmp	r2, r3
 800d18c:	d127      	bne.n	800d1de <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d18e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d190:	3330      	adds	r3, #48	@ 0x30
 800d192:	4618      	mov	r0, r3
 800d194:	f7fe fbf2 	bl	800b97c <ld_dword>
 800d198:	4603      	mov	r3, r0
 800d19a:	4a1c      	ldr	r2, [pc, #112]	@ (800d20c <find_volume+0x48c>)
 800d19c:	4293      	cmp	r3, r2
 800d19e:	d11e      	bne.n	800d1de <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d1a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1a2:	3330      	adds	r3, #48	@ 0x30
 800d1a4:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800d1a8:	4618      	mov	r0, r3
 800d1aa:	f7fe fbe7 	bl	800b97c <ld_dword>
 800d1ae:	4603      	mov	r3, r0
 800d1b0:	4a17      	ldr	r2, [pc, #92]	@ (800d210 <find_volume+0x490>)
 800d1b2:	4293      	cmp	r3, r2
 800d1b4:	d113      	bne.n	800d1de <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800d1b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1b8:	3330      	adds	r3, #48	@ 0x30
 800d1ba:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800d1be:	4618      	mov	r0, r3
 800d1c0:	f7fe fbdc 	bl	800b97c <ld_dword>
 800d1c4:	4602      	mov	r2, r0
 800d1c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1c8:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d1ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1cc:	3330      	adds	r3, #48	@ 0x30
 800d1ce:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	f7fe fbd2 	bl	800b97c <ld_dword>
 800d1d8:	4602      	mov	r2, r0
 800d1da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1dc:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800d1de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1e0:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800d1e4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800d1e6:	4b0b      	ldr	r3, [pc, #44]	@ (800d214 <find_volume+0x494>)
 800d1e8:	881b      	ldrh	r3, [r3, #0]
 800d1ea:	3301      	adds	r3, #1
 800d1ec:	b29a      	uxth	r2, r3
 800d1ee:	4b09      	ldr	r3, [pc, #36]	@ (800d214 <find_volume+0x494>)
 800d1f0:	801a      	strh	r2, [r3, #0]
 800d1f2:	4b08      	ldr	r3, [pc, #32]	@ (800d214 <find_volume+0x494>)
 800d1f4:	881a      	ldrh	r2, [r3, #0]
 800d1f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1f8:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800d1fa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d1fc:	f7fe fdee 	bl	800bddc <clear_lock>
#endif
	return FR_OK;
 800d200:	2300      	movs	r3, #0
}
 800d202:	4618      	mov	r0, r3
 800d204:	3758      	adds	r7, #88	@ 0x58
 800d206:	46bd      	mov	sp, r7
 800d208:	bd80      	pop	{r7, pc}
 800d20a:	bf00      	nop
 800d20c:	41615252 	.word	0x41615252
 800d210:	61417272 	.word	0x61417272
 800d214:	2001ea28 	.word	0x2001ea28

0800d218 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800d218:	b580      	push	{r7, lr}
 800d21a:	b084      	sub	sp, #16
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	6078      	str	r0, [r7, #4]
 800d220:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800d222:	2309      	movs	r3, #9
 800d224:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d01c      	beq.n	800d266 <validate+0x4e>
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	2b00      	cmp	r3, #0
 800d232:	d018      	beq.n	800d266 <validate+0x4e>
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	781b      	ldrb	r3, [r3, #0]
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d013      	beq.n	800d266 <validate+0x4e>
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	889a      	ldrh	r2, [r3, #4]
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	88db      	ldrh	r3, [r3, #6]
 800d248:	429a      	cmp	r2, r3
 800d24a:	d10c      	bne.n	800d266 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	785b      	ldrb	r3, [r3, #1]
 800d252:	4618      	mov	r0, r3
 800d254:	f7fe fadc 	bl	800b810 <disk_status>
 800d258:	4603      	mov	r3, r0
 800d25a:	f003 0301 	and.w	r3, r3, #1
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d101      	bne.n	800d266 <validate+0x4e>
			res = FR_OK;
 800d262:	2300      	movs	r3, #0
 800d264:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800d266:	7bfb      	ldrb	r3, [r7, #15]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d102      	bne.n	800d272 <validate+0x5a>
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	e000      	b.n	800d274 <validate+0x5c>
 800d272:	2300      	movs	r3, #0
 800d274:	683a      	ldr	r2, [r7, #0]
 800d276:	6013      	str	r3, [r2, #0]
	return res;
 800d278:	7bfb      	ldrb	r3, [r7, #15]
}
 800d27a:	4618      	mov	r0, r3
 800d27c:	3710      	adds	r7, #16
 800d27e:	46bd      	mov	sp, r7
 800d280:	bd80      	pop	{r7, pc}
	...

0800d284 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800d284:	b580      	push	{r7, lr}
 800d286:	b088      	sub	sp, #32
 800d288:	af00      	add	r7, sp, #0
 800d28a:	60f8      	str	r0, [r7, #12]
 800d28c:	60b9      	str	r1, [r7, #8]
 800d28e:	4613      	mov	r3, r2
 800d290:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d292:	68bb      	ldr	r3, [r7, #8]
 800d294:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800d296:	f107 0310 	add.w	r3, r7, #16
 800d29a:	4618      	mov	r0, r3
 800d29c:	f7ff fcd5 	bl	800cc4a <get_ldnumber>
 800d2a0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d2a2:	69fb      	ldr	r3, [r7, #28]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	da01      	bge.n	800d2ac <f_mount+0x28>
 800d2a8:	230b      	movs	r3, #11
 800d2aa:	e02b      	b.n	800d304 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d2ac:	4a17      	ldr	r2, [pc, #92]	@ (800d30c <f_mount+0x88>)
 800d2ae:	69fb      	ldr	r3, [r7, #28]
 800d2b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d2b4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d2b6:	69bb      	ldr	r3, [r7, #24]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d005      	beq.n	800d2c8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800d2bc:	69b8      	ldr	r0, [r7, #24]
 800d2be:	f7fe fd8d 	bl	800bddc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d2c2:	69bb      	ldr	r3, [r7, #24]
 800d2c4:	2200      	movs	r2, #0
 800d2c6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d002      	beq.n	800d2d4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	2200      	movs	r2, #0
 800d2d2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d2d4:	68fa      	ldr	r2, [r7, #12]
 800d2d6:	490d      	ldr	r1, [pc, #52]	@ (800d30c <f_mount+0x88>)
 800d2d8:	69fb      	ldr	r3, [r7, #28]
 800d2da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d002      	beq.n	800d2ea <f_mount+0x66>
 800d2e4:	79fb      	ldrb	r3, [r7, #7]
 800d2e6:	2b01      	cmp	r3, #1
 800d2e8:	d001      	beq.n	800d2ee <f_mount+0x6a>
 800d2ea:	2300      	movs	r3, #0
 800d2ec:	e00a      	b.n	800d304 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d2ee:	f107 010c 	add.w	r1, r7, #12
 800d2f2:	f107 0308 	add.w	r3, r7, #8
 800d2f6:	2200      	movs	r2, #0
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	f7ff fd41 	bl	800cd80 <find_volume>
 800d2fe:	4603      	mov	r3, r0
 800d300:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800d302:	7dfb      	ldrb	r3, [r7, #23]
}
 800d304:	4618      	mov	r0, r3
 800d306:	3720      	adds	r7, #32
 800d308:	46bd      	mov	sp, r7
 800d30a:	bd80      	pop	{r7, pc}
 800d30c:	2001ea24 	.word	0x2001ea24

0800d310 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800d310:	b580      	push	{r7, lr}
 800d312:	b098      	sub	sp, #96	@ 0x60
 800d314:	af00      	add	r7, sp, #0
 800d316:	60f8      	str	r0, [r7, #12]
 800d318:	60b9      	str	r1, [r7, #8]
 800d31a:	4613      	mov	r3, r2
 800d31c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	2b00      	cmp	r3, #0
 800d322:	d101      	bne.n	800d328 <f_open+0x18>
 800d324:	2309      	movs	r3, #9
 800d326:	e1a9      	b.n	800d67c <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800d328:	79fb      	ldrb	r3, [r7, #7]
 800d32a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d32e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800d330:	79fa      	ldrb	r2, [r7, #7]
 800d332:	f107 0110 	add.w	r1, r7, #16
 800d336:	f107 0308 	add.w	r3, r7, #8
 800d33a:	4618      	mov	r0, r3
 800d33c:	f7ff fd20 	bl	800cd80 <find_volume>
 800d340:	4603      	mov	r3, r0
 800d342:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800d346:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	f040 818d 	bne.w	800d66a <f_open+0x35a>
		dj.obj.fs = fs;
 800d350:	693b      	ldr	r3, [r7, #16]
 800d352:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800d354:	68ba      	ldr	r2, [r7, #8]
 800d356:	f107 0314 	add.w	r3, r7, #20
 800d35a:	4611      	mov	r1, r2
 800d35c:	4618      	mov	r0, r3
 800d35e:	f7ff fc03 	bl	800cb68 <follow_path>
 800d362:	4603      	mov	r3, r0
 800d364:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800d368:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d118      	bne.n	800d3a2 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800d370:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d374:	b25b      	sxtb	r3, r3
 800d376:	2b00      	cmp	r3, #0
 800d378:	da03      	bge.n	800d382 <f_open+0x72>
				res = FR_INVALID_NAME;
 800d37a:	2306      	movs	r3, #6
 800d37c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d380:	e00f      	b.n	800d3a2 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d382:	79fb      	ldrb	r3, [r7, #7]
 800d384:	2b01      	cmp	r3, #1
 800d386:	bf8c      	ite	hi
 800d388:	2301      	movhi	r3, #1
 800d38a:	2300      	movls	r3, #0
 800d38c:	b2db      	uxtb	r3, r3
 800d38e:	461a      	mov	r2, r3
 800d390:	f107 0314 	add.w	r3, r7, #20
 800d394:	4611      	mov	r1, r2
 800d396:	4618      	mov	r0, r3
 800d398:	f7fe fbd8 	bl	800bb4c <chk_lock>
 800d39c:	4603      	mov	r3, r0
 800d39e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800d3a2:	79fb      	ldrb	r3, [r7, #7]
 800d3a4:	f003 031c 	and.w	r3, r3, #28
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d07f      	beq.n	800d4ac <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800d3ac:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d017      	beq.n	800d3e4 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800d3b4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d3b8:	2b04      	cmp	r3, #4
 800d3ba:	d10e      	bne.n	800d3da <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800d3bc:	f7fe fc22 	bl	800bc04 <enq_lock>
 800d3c0:	4603      	mov	r3, r0
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d006      	beq.n	800d3d4 <f_open+0xc4>
 800d3c6:	f107 0314 	add.w	r3, r7, #20
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	f7ff fb06 	bl	800c9dc <dir_register>
 800d3d0:	4603      	mov	r3, r0
 800d3d2:	e000      	b.n	800d3d6 <f_open+0xc6>
 800d3d4:	2312      	movs	r3, #18
 800d3d6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800d3da:	79fb      	ldrb	r3, [r7, #7]
 800d3dc:	f043 0308 	orr.w	r3, r3, #8
 800d3e0:	71fb      	strb	r3, [r7, #7]
 800d3e2:	e010      	b.n	800d406 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800d3e4:	7ebb      	ldrb	r3, [r7, #26]
 800d3e6:	f003 0311 	and.w	r3, r3, #17
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d003      	beq.n	800d3f6 <f_open+0xe6>
					res = FR_DENIED;
 800d3ee:	2307      	movs	r3, #7
 800d3f0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d3f4:	e007      	b.n	800d406 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800d3f6:	79fb      	ldrb	r3, [r7, #7]
 800d3f8:	f003 0304 	and.w	r3, r3, #4
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d002      	beq.n	800d406 <f_open+0xf6>
 800d400:	2308      	movs	r3, #8
 800d402:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800d406:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d168      	bne.n	800d4e0 <f_open+0x1d0>
 800d40e:	79fb      	ldrb	r3, [r7, #7]
 800d410:	f003 0308 	and.w	r3, r3, #8
 800d414:	2b00      	cmp	r3, #0
 800d416:	d063      	beq.n	800d4e0 <f_open+0x1d0>
				dw = GET_FATTIME();
 800d418:	f7fd ffb8 	bl	800b38c <get_fattime>
 800d41c:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800d41e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d420:	330e      	adds	r3, #14
 800d422:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d424:	4618      	mov	r0, r3
 800d426:	f7fe fae7 	bl	800b9f8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800d42a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d42c:	3316      	adds	r3, #22
 800d42e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d430:	4618      	mov	r0, r3
 800d432:	f7fe fae1 	bl	800b9f8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800d436:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d438:	330b      	adds	r3, #11
 800d43a:	2220      	movs	r2, #32
 800d43c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800d43e:	693b      	ldr	r3, [r7, #16]
 800d440:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d442:	4611      	mov	r1, r2
 800d444:	4618      	mov	r0, r3
 800d446:	f7ff fa35 	bl	800c8b4 <ld_clust>
 800d44a:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800d44c:	693b      	ldr	r3, [r7, #16]
 800d44e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800d450:	2200      	movs	r2, #0
 800d452:	4618      	mov	r0, r3
 800d454:	f7ff fa4d 	bl	800c8f2 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800d458:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d45a:	331c      	adds	r3, #28
 800d45c:	2100      	movs	r1, #0
 800d45e:	4618      	mov	r0, r3
 800d460:	f7fe faca 	bl	800b9f8 <st_dword>
					fs->wflag = 1;
 800d464:	693b      	ldr	r3, [r7, #16]
 800d466:	2201      	movs	r2, #1
 800d468:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800d46a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d037      	beq.n	800d4e0 <f_open+0x1d0>
						dw = fs->winsect;
 800d470:	693b      	ldr	r3, [r7, #16]
 800d472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d474:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800d476:	f107 0314 	add.w	r3, r7, #20
 800d47a:	2200      	movs	r2, #0
 800d47c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800d47e:	4618      	mov	r0, r3
 800d480:	f7fe ff60 	bl	800c344 <remove_chain>
 800d484:	4603      	mov	r3, r0
 800d486:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800d48a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d126      	bne.n	800d4e0 <f_open+0x1d0>
							res = move_window(fs, dw);
 800d492:	693b      	ldr	r3, [r7, #16]
 800d494:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d496:	4618      	mov	r0, r3
 800d498:	f7fe fd08 	bl	800beac <move_window>
 800d49c:	4603      	mov	r3, r0
 800d49e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800d4a2:	693b      	ldr	r3, [r7, #16]
 800d4a4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d4a6:	3a01      	subs	r2, #1
 800d4a8:	60da      	str	r2, [r3, #12]
 800d4aa:	e019      	b.n	800d4e0 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800d4ac:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d115      	bne.n	800d4e0 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800d4b4:	7ebb      	ldrb	r3, [r7, #26]
 800d4b6:	f003 0310 	and.w	r3, r3, #16
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d003      	beq.n	800d4c6 <f_open+0x1b6>
					res = FR_NO_FILE;
 800d4be:	2304      	movs	r3, #4
 800d4c0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d4c4:	e00c      	b.n	800d4e0 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800d4c6:	79fb      	ldrb	r3, [r7, #7]
 800d4c8:	f003 0302 	and.w	r3, r3, #2
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d007      	beq.n	800d4e0 <f_open+0x1d0>
 800d4d0:	7ebb      	ldrb	r3, [r7, #26]
 800d4d2:	f003 0301 	and.w	r3, r3, #1
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d002      	beq.n	800d4e0 <f_open+0x1d0>
						res = FR_DENIED;
 800d4da:	2307      	movs	r3, #7
 800d4dc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800d4e0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d126      	bne.n	800d536 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800d4e8:	79fb      	ldrb	r3, [r7, #7]
 800d4ea:	f003 0308 	and.w	r3, r3, #8
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d003      	beq.n	800d4fa <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800d4f2:	79fb      	ldrb	r3, [r7, #7]
 800d4f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d4f8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800d4fa:	693b      	ldr	r3, [r7, #16]
 800d4fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800d502:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d508:	79fb      	ldrb	r3, [r7, #7]
 800d50a:	2b01      	cmp	r3, #1
 800d50c:	bf8c      	ite	hi
 800d50e:	2301      	movhi	r3, #1
 800d510:	2300      	movls	r3, #0
 800d512:	b2db      	uxtb	r3, r3
 800d514:	461a      	mov	r2, r3
 800d516:	f107 0314 	add.w	r3, r7, #20
 800d51a:	4611      	mov	r1, r2
 800d51c:	4618      	mov	r0, r3
 800d51e:	f7fe fb93 	bl	800bc48 <inc_lock>
 800d522:	4602      	mov	r2, r0
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	691b      	ldr	r3, [r3, #16]
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d102      	bne.n	800d536 <f_open+0x226>
 800d530:	2302      	movs	r3, #2
 800d532:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800d536:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	f040 8095 	bne.w	800d66a <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800d540:	693b      	ldr	r3, [r7, #16]
 800d542:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d544:	4611      	mov	r1, r2
 800d546:	4618      	mov	r0, r3
 800d548:	f7ff f9b4 	bl	800c8b4 <ld_clust>
 800d54c:	4602      	mov	r2, r0
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800d552:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d554:	331c      	adds	r3, #28
 800d556:	4618      	mov	r0, r3
 800d558:	f7fe fa10 	bl	800b97c <ld_dword>
 800d55c:	4602      	mov	r2, r0
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	2200      	movs	r2, #0
 800d566:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800d568:	693a      	ldr	r2, [r7, #16]
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800d56e:	693b      	ldr	r3, [r7, #16]
 800d570:	88da      	ldrh	r2, [r3, #6]
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	79fa      	ldrb	r2, [r7, #7]
 800d57a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	2200      	movs	r2, #0
 800d580:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	2200      	movs	r2, #0
 800d586:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	2200      	movs	r2, #0
 800d58c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	3330      	adds	r3, #48	@ 0x30
 800d592:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d596:	2100      	movs	r1, #0
 800d598:	4618      	mov	r0, r3
 800d59a:	f7fe fa7a 	bl	800ba92 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d59e:	79fb      	ldrb	r3, [r7, #7]
 800d5a0:	f003 0320 	and.w	r3, r3, #32
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d060      	beq.n	800d66a <f_open+0x35a>
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	68db      	ldr	r3, [r3, #12]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d05c      	beq.n	800d66a <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	68da      	ldr	r2, [r3, #12]
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d5b8:	693b      	ldr	r3, [r7, #16]
 800d5ba:	895b      	ldrh	r3, [r3, #10]
 800d5bc:	025b      	lsls	r3, r3, #9
 800d5be:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	689b      	ldr	r3, [r3, #8]
 800d5c4:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	68db      	ldr	r3, [r3, #12]
 800d5ca:	657b      	str	r3, [r7, #84]	@ 0x54
 800d5cc:	e016      	b.n	800d5fc <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d5d2:	4618      	mov	r0, r3
 800d5d4:	f7fe fd25 	bl	800c022 <get_fat>
 800d5d8:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800d5da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d5dc:	2b01      	cmp	r3, #1
 800d5de:	d802      	bhi.n	800d5e6 <f_open+0x2d6>
 800d5e0:	2302      	movs	r3, #2
 800d5e2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d5e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d5e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5ec:	d102      	bne.n	800d5f4 <f_open+0x2e4>
 800d5ee:	2301      	movs	r3, #1
 800d5f0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d5f4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d5f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d5f8:	1ad3      	subs	r3, r2, r3
 800d5fa:	657b      	str	r3, [r7, #84]	@ 0x54
 800d5fc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d600:	2b00      	cmp	r3, #0
 800d602:	d103      	bne.n	800d60c <f_open+0x2fc>
 800d604:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d606:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d608:	429a      	cmp	r2, r3
 800d60a:	d8e0      	bhi.n	800d5ce <f_open+0x2be>
				}
				fp->clust = clst;
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d610:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d612:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d616:	2b00      	cmp	r3, #0
 800d618:	d127      	bne.n	800d66a <f_open+0x35a>
 800d61a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d61c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d620:	2b00      	cmp	r3, #0
 800d622:	d022      	beq.n	800d66a <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d624:	693b      	ldr	r3, [r7, #16]
 800d626:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d628:	4618      	mov	r0, r3
 800d62a:	f7fe fcdb 	bl	800bfe4 <clust2sect>
 800d62e:	6478      	str	r0, [r7, #68]	@ 0x44
 800d630:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d632:	2b00      	cmp	r3, #0
 800d634:	d103      	bne.n	800d63e <f_open+0x32e>
						res = FR_INT_ERR;
 800d636:	2302      	movs	r3, #2
 800d638:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d63c:	e015      	b.n	800d66a <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d63e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d640:	0a5a      	lsrs	r2, r3, #9
 800d642:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d644:	441a      	add	r2, r3
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d64a:	693b      	ldr	r3, [r7, #16]
 800d64c:	7858      	ldrb	r0, [r3, #1]
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	6a1a      	ldr	r2, [r3, #32]
 800d658:	2301      	movs	r3, #1
 800d65a:	f7fe f919 	bl	800b890 <disk_read>
 800d65e:	4603      	mov	r3, r0
 800d660:	2b00      	cmp	r3, #0
 800d662:	d002      	beq.n	800d66a <f_open+0x35a>
 800d664:	2301      	movs	r3, #1
 800d666:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d66a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d002      	beq.n	800d678 <f_open+0x368>
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	2200      	movs	r2, #0
 800d676:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d678:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800d67c:	4618      	mov	r0, r3
 800d67e:	3760      	adds	r7, #96	@ 0x60
 800d680:	46bd      	mov	sp, r7
 800d682:	bd80      	pop	{r7, pc}

0800d684 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800d684:	b580      	push	{r7, lr}
 800d686:	b08e      	sub	sp, #56	@ 0x38
 800d688:	af00      	add	r7, sp, #0
 800d68a:	60f8      	str	r0, [r7, #12]
 800d68c:	60b9      	str	r1, [r7, #8]
 800d68e:	607a      	str	r2, [r7, #4]
 800d690:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800d692:	68bb      	ldr	r3, [r7, #8]
 800d694:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800d696:	683b      	ldr	r3, [r7, #0]
 800d698:	2200      	movs	r2, #0
 800d69a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	f107 0214 	add.w	r2, r7, #20
 800d6a2:	4611      	mov	r1, r2
 800d6a4:	4618      	mov	r0, r3
 800d6a6:	f7ff fdb7 	bl	800d218 <validate>
 800d6aa:	4603      	mov	r3, r0
 800d6ac:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d6b0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d107      	bne.n	800d6c8 <f_read+0x44>
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	7d5b      	ldrb	r3, [r3, #21]
 800d6bc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800d6c0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d002      	beq.n	800d6ce <f_read+0x4a>
 800d6c8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d6cc:	e115      	b.n	800d8fa <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	7d1b      	ldrb	r3, [r3, #20]
 800d6d2:	f003 0301 	and.w	r3, r3, #1
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d101      	bne.n	800d6de <f_read+0x5a>
 800d6da:	2307      	movs	r3, #7
 800d6dc:	e10d      	b.n	800d8fa <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	68da      	ldr	r2, [r3, #12]
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	699b      	ldr	r3, [r3, #24]
 800d6e6:	1ad3      	subs	r3, r2, r3
 800d6e8:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800d6ea:	687a      	ldr	r2, [r7, #4]
 800d6ec:	6a3b      	ldr	r3, [r7, #32]
 800d6ee:	429a      	cmp	r2, r3
 800d6f0:	f240 80fe 	bls.w	800d8f0 <f_read+0x26c>
 800d6f4:	6a3b      	ldr	r3, [r7, #32]
 800d6f6:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800d6f8:	e0fa      	b.n	800d8f0 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	699b      	ldr	r3, [r3, #24]
 800d6fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d702:	2b00      	cmp	r3, #0
 800d704:	f040 80c6 	bne.w	800d894 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	699b      	ldr	r3, [r3, #24]
 800d70c:	0a5b      	lsrs	r3, r3, #9
 800d70e:	697a      	ldr	r2, [r7, #20]
 800d710:	8952      	ldrh	r2, [r2, #10]
 800d712:	3a01      	subs	r2, #1
 800d714:	4013      	ands	r3, r2
 800d716:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800d718:	69fb      	ldr	r3, [r7, #28]
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d12f      	bne.n	800d77e <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	699b      	ldr	r3, [r3, #24]
 800d722:	2b00      	cmp	r3, #0
 800d724:	d103      	bne.n	800d72e <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	689b      	ldr	r3, [r3, #8]
 800d72a:	633b      	str	r3, [r7, #48]	@ 0x30
 800d72c:	e013      	b.n	800d756 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d732:	2b00      	cmp	r3, #0
 800d734:	d007      	beq.n	800d746 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	699b      	ldr	r3, [r3, #24]
 800d73a:	4619      	mov	r1, r3
 800d73c:	68f8      	ldr	r0, [r7, #12]
 800d73e:	f7fe fefe 	bl	800c53e <clmt_clust>
 800d742:	6338      	str	r0, [r7, #48]	@ 0x30
 800d744:	e007      	b.n	800d756 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800d746:	68fa      	ldr	r2, [r7, #12]
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	69db      	ldr	r3, [r3, #28]
 800d74c:	4619      	mov	r1, r3
 800d74e:	4610      	mov	r0, r2
 800d750:	f7fe fc67 	bl	800c022 <get_fat>
 800d754:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800d756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d758:	2b01      	cmp	r3, #1
 800d75a:	d804      	bhi.n	800d766 <f_read+0xe2>
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	2202      	movs	r2, #2
 800d760:	755a      	strb	r2, [r3, #21]
 800d762:	2302      	movs	r3, #2
 800d764:	e0c9      	b.n	800d8fa <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d76c:	d104      	bne.n	800d778 <f_read+0xf4>
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	2201      	movs	r2, #1
 800d772:	755a      	strb	r2, [r3, #21]
 800d774:	2301      	movs	r3, #1
 800d776:	e0c0      	b.n	800d8fa <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d77c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d77e:	697a      	ldr	r2, [r7, #20]
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	69db      	ldr	r3, [r3, #28]
 800d784:	4619      	mov	r1, r3
 800d786:	4610      	mov	r0, r2
 800d788:	f7fe fc2c 	bl	800bfe4 <clust2sect>
 800d78c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d78e:	69bb      	ldr	r3, [r7, #24]
 800d790:	2b00      	cmp	r3, #0
 800d792:	d104      	bne.n	800d79e <f_read+0x11a>
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	2202      	movs	r2, #2
 800d798:	755a      	strb	r2, [r3, #21]
 800d79a:	2302      	movs	r3, #2
 800d79c:	e0ad      	b.n	800d8fa <f_read+0x276>
			sect += csect;
 800d79e:	69ba      	ldr	r2, [r7, #24]
 800d7a0:	69fb      	ldr	r3, [r7, #28]
 800d7a2:	4413      	add	r3, r2
 800d7a4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	0a5b      	lsrs	r3, r3, #9
 800d7aa:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800d7ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d039      	beq.n	800d826 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d7b2:	69fa      	ldr	r2, [r7, #28]
 800d7b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7b6:	4413      	add	r3, r2
 800d7b8:	697a      	ldr	r2, [r7, #20]
 800d7ba:	8952      	ldrh	r2, [r2, #10]
 800d7bc:	4293      	cmp	r3, r2
 800d7be:	d905      	bls.n	800d7cc <f_read+0x148>
					cc = fs->csize - csect;
 800d7c0:	697b      	ldr	r3, [r7, #20]
 800d7c2:	895b      	ldrh	r3, [r3, #10]
 800d7c4:	461a      	mov	r2, r3
 800d7c6:	69fb      	ldr	r3, [r7, #28]
 800d7c8:	1ad3      	subs	r3, r2, r3
 800d7ca:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d7cc:	697b      	ldr	r3, [r7, #20]
 800d7ce:	7858      	ldrb	r0, [r3, #1]
 800d7d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7d2:	69ba      	ldr	r2, [r7, #24]
 800d7d4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d7d6:	f7fe f85b 	bl	800b890 <disk_read>
 800d7da:	4603      	mov	r3, r0
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d004      	beq.n	800d7ea <f_read+0x166>
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	2201      	movs	r2, #1
 800d7e4:	755a      	strb	r2, [r3, #21]
 800d7e6:	2301      	movs	r3, #1
 800d7e8:	e087      	b.n	800d8fa <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	7d1b      	ldrb	r3, [r3, #20]
 800d7ee:	b25b      	sxtb	r3, r3
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	da14      	bge.n	800d81e <f_read+0x19a>
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	6a1a      	ldr	r2, [r3, #32]
 800d7f8:	69bb      	ldr	r3, [r7, #24]
 800d7fa:	1ad3      	subs	r3, r2, r3
 800d7fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d7fe:	429a      	cmp	r2, r3
 800d800:	d90d      	bls.n	800d81e <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	6a1a      	ldr	r2, [r3, #32]
 800d806:	69bb      	ldr	r3, [r7, #24]
 800d808:	1ad3      	subs	r3, r2, r3
 800d80a:	025b      	lsls	r3, r3, #9
 800d80c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d80e:	18d0      	adds	r0, r2, r3
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	3330      	adds	r3, #48	@ 0x30
 800d814:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d818:	4619      	mov	r1, r3
 800d81a:	f7fe f919 	bl	800ba50 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800d81e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d820:	025b      	lsls	r3, r3, #9
 800d822:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800d824:	e050      	b.n	800d8c8 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	6a1b      	ldr	r3, [r3, #32]
 800d82a:	69ba      	ldr	r2, [r7, #24]
 800d82c:	429a      	cmp	r2, r3
 800d82e:	d02e      	beq.n	800d88e <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	7d1b      	ldrb	r3, [r3, #20]
 800d834:	b25b      	sxtb	r3, r3
 800d836:	2b00      	cmp	r3, #0
 800d838:	da18      	bge.n	800d86c <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d83a:	697b      	ldr	r3, [r7, #20]
 800d83c:	7858      	ldrb	r0, [r3, #1]
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	6a1a      	ldr	r2, [r3, #32]
 800d848:	2301      	movs	r3, #1
 800d84a:	f7fe f841 	bl	800b8d0 <disk_write>
 800d84e:	4603      	mov	r3, r0
 800d850:	2b00      	cmp	r3, #0
 800d852:	d004      	beq.n	800d85e <f_read+0x1da>
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	2201      	movs	r2, #1
 800d858:	755a      	strb	r2, [r3, #21]
 800d85a:	2301      	movs	r3, #1
 800d85c:	e04d      	b.n	800d8fa <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	7d1b      	ldrb	r3, [r3, #20]
 800d862:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d866:	b2da      	uxtb	r2, r3
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d86c:	697b      	ldr	r3, [r7, #20]
 800d86e:	7858      	ldrb	r0, [r3, #1]
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d876:	2301      	movs	r3, #1
 800d878:	69ba      	ldr	r2, [r7, #24]
 800d87a:	f7fe f809 	bl	800b890 <disk_read>
 800d87e:	4603      	mov	r3, r0
 800d880:	2b00      	cmp	r3, #0
 800d882:	d004      	beq.n	800d88e <f_read+0x20a>
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	2201      	movs	r2, #1
 800d888:	755a      	strb	r2, [r3, #21]
 800d88a:	2301      	movs	r3, #1
 800d88c:	e035      	b.n	800d8fa <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	69ba      	ldr	r2, [r7, #24]
 800d892:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	699b      	ldr	r3, [r3, #24]
 800d898:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d89c:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800d8a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800d8a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	429a      	cmp	r2, r3
 800d8a8:	d901      	bls.n	800d8ae <f_read+0x22a>
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	699b      	ldr	r3, [r3, #24]
 800d8b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d8bc:	4413      	add	r3, r2
 800d8be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d8c0:	4619      	mov	r1, r3
 800d8c2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d8c4:	f7fe f8c4 	bl	800ba50 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800d8c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d8ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8cc:	4413      	add	r3, r2
 800d8ce:	627b      	str	r3, [r7, #36]	@ 0x24
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	699a      	ldr	r2, [r3, #24]
 800d8d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8d6:	441a      	add	r2, r3
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	619a      	str	r2, [r3, #24]
 800d8dc:	683b      	ldr	r3, [r7, #0]
 800d8de:	681a      	ldr	r2, [r3, #0]
 800d8e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8e2:	441a      	add	r2, r3
 800d8e4:	683b      	ldr	r3, [r7, #0]
 800d8e6:	601a      	str	r2, [r3, #0]
 800d8e8:	687a      	ldr	r2, [r7, #4]
 800d8ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8ec:	1ad3      	subs	r3, r2, r3
 800d8ee:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	f47f af01 	bne.w	800d6fa <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800d8f8:	2300      	movs	r3, #0
}
 800d8fa:	4618      	mov	r0, r3
 800d8fc:	3738      	adds	r7, #56	@ 0x38
 800d8fe:	46bd      	mov	sp, r7
 800d900:	bd80      	pop	{r7, pc}

0800d902 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800d902:	b580      	push	{r7, lr}
 800d904:	b08c      	sub	sp, #48	@ 0x30
 800d906:	af00      	add	r7, sp, #0
 800d908:	60f8      	str	r0, [r7, #12]
 800d90a:	60b9      	str	r1, [r7, #8]
 800d90c:	607a      	str	r2, [r7, #4]
 800d90e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800d910:	68bb      	ldr	r3, [r7, #8]
 800d912:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800d914:	683b      	ldr	r3, [r7, #0]
 800d916:	2200      	movs	r2, #0
 800d918:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	f107 0210 	add.w	r2, r7, #16
 800d920:	4611      	mov	r1, r2
 800d922:	4618      	mov	r0, r3
 800d924:	f7ff fc78 	bl	800d218 <validate>
 800d928:	4603      	mov	r3, r0
 800d92a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d92e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d932:	2b00      	cmp	r3, #0
 800d934:	d107      	bne.n	800d946 <f_write+0x44>
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	7d5b      	ldrb	r3, [r3, #21]
 800d93a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800d93e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d942:	2b00      	cmp	r3, #0
 800d944:	d002      	beq.n	800d94c <f_write+0x4a>
 800d946:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d94a:	e14b      	b.n	800dbe4 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	7d1b      	ldrb	r3, [r3, #20]
 800d950:	f003 0302 	and.w	r3, r3, #2
 800d954:	2b00      	cmp	r3, #0
 800d956:	d101      	bne.n	800d95c <f_write+0x5a>
 800d958:	2307      	movs	r3, #7
 800d95a:	e143      	b.n	800dbe4 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	699a      	ldr	r2, [r3, #24]
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	441a      	add	r2, r3
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	699b      	ldr	r3, [r3, #24]
 800d968:	429a      	cmp	r2, r3
 800d96a:	f080 812d 	bcs.w	800dbc8 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	699b      	ldr	r3, [r3, #24]
 800d972:	43db      	mvns	r3, r3
 800d974:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800d976:	e127      	b.n	800dbc8 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	699b      	ldr	r3, [r3, #24]
 800d97c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d980:	2b00      	cmp	r3, #0
 800d982:	f040 80e3 	bne.w	800db4c <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	699b      	ldr	r3, [r3, #24]
 800d98a:	0a5b      	lsrs	r3, r3, #9
 800d98c:	693a      	ldr	r2, [r7, #16]
 800d98e:	8952      	ldrh	r2, [r2, #10]
 800d990:	3a01      	subs	r2, #1
 800d992:	4013      	ands	r3, r2
 800d994:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800d996:	69bb      	ldr	r3, [r7, #24]
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d143      	bne.n	800da24 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	699b      	ldr	r3, [r3, #24]
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d10c      	bne.n	800d9be <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	689b      	ldr	r3, [r3, #8]
 800d9a8:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800d9aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d11a      	bne.n	800d9e6 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	2100      	movs	r1, #0
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	f7fe fd2a 	bl	800c40e <create_chain>
 800d9ba:	62b8      	str	r0, [r7, #40]	@ 0x28
 800d9bc:	e013      	b.n	800d9e6 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d007      	beq.n	800d9d6 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	699b      	ldr	r3, [r3, #24]
 800d9ca:	4619      	mov	r1, r3
 800d9cc:	68f8      	ldr	r0, [r7, #12]
 800d9ce:	f7fe fdb6 	bl	800c53e <clmt_clust>
 800d9d2:	62b8      	str	r0, [r7, #40]	@ 0x28
 800d9d4:	e007      	b.n	800d9e6 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800d9d6:	68fa      	ldr	r2, [r7, #12]
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	69db      	ldr	r3, [r3, #28]
 800d9dc:	4619      	mov	r1, r3
 800d9de:	4610      	mov	r0, r2
 800d9e0:	f7fe fd15 	bl	800c40e <create_chain>
 800d9e4:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d9e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	f000 80f2 	beq.w	800dbd2 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d9ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9f0:	2b01      	cmp	r3, #1
 800d9f2:	d104      	bne.n	800d9fe <f_write+0xfc>
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	2202      	movs	r2, #2
 800d9f8:	755a      	strb	r2, [r3, #21]
 800d9fa:	2302      	movs	r3, #2
 800d9fc:	e0f2      	b.n	800dbe4 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d9fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da04:	d104      	bne.n	800da10 <f_write+0x10e>
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	2201      	movs	r2, #1
 800da0a:	755a      	strb	r2, [r3, #21]
 800da0c:	2301      	movs	r3, #1
 800da0e:	e0e9      	b.n	800dbe4 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800da14:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	689b      	ldr	r3, [r3, #8]
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d102      	bne.n	800da24 <f_write+0x122>
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800da22:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	7d1b      	ldrb	r3, [r3, #20]
 800da28:	b25b      	sxtb	r3, r3
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	da18      	bge.n	800da60 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800da2e:	693b      	ldr	r3, [r7, #16]
 800da30:	7858      	ldrb	r0, [r3, #1]
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	6a1a      	ldr	r2, [r3, #32]
 800da3c:	2301      	movs	r3, #1
 800da3e:	f7fd ff47 	bl	800b8d0 <disk_write>
 800da42:	4603      	mov	r3, r0
 800da44:	2b00      	cmp	r3, #0
 800da46:	d004      	beq.n	800da52 <f_write+0x150>
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	2201      	movs	r2, #1
 800da4c:	755a      	strb	r2, [r3, #21]
 800da4e:	2301      	movs	r3, #1
 800da50:	e0c8      	b.n	800dbe4 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	7d1b      	ldrb	r3, [r3, #20]
 800da56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800da5a:	b2da      	uxtb	r2, r3
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800da60:	693a      	ldr	r2, [r7, #16]
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	69db      	ldr	r3, [r3, #28]
 800da66:	4619      	mov	r1, r3
 800da68:	4610      	mov	r0, r2
 800da6a:	f7fe fabb 	bl	800bfe4 <clust2sect>
 800da6e:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800da70:	697b      	ldr	r3, [r7, #20]
 800da72:	2b00      	cmp	r3, #0
 800da74:	d104      	bne.n	800da80 <f_write+0x17e>
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	2202      	movs	r2, #2
 800da7a:	755a      	strb	r2, [r3, #21]
 800da7c:	2302      	movs	r3, #2
 800da7e:	e0b1      	b.n	800dbe4 <f_write+0x2e2>
			sect += csect;
 800da80:	697a      	ldr	r2, [r7, #20]
 800da82:	69bb      	ldr	r3, [r7, #24]
 800da84:	4413      	add	r3, r2
 800da86:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	0a5b      	lsrs	r3, r3, #9
 800da8c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800da8e:	6a3b      	ldr	r3, [r7, #32]
 800da90:	2b00      	cmp	r3, #0
 800da92:	d03c      	beq.n	800db0e <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800da94:	69ba      	ldr	r2, [r7, #24]
 800da96:	6a3b      	ldr	r3, [r7, #32]
 800da98:	4413      	add	r3, r2
 800da9a:	693a      	ldr	r2, [r7, #16]
 800da9c:	8952      	ldrh	r2, [r2, #10]
 800da9e:	4293      	cmp	r3, r2
 800daa0:	d905      	bls.n	800daae <f_write+0x1ac>
					cc = fs->csize - csect;
 800daa2:	693b      	ldr	r3, [r7, #16]
 800daa4:	895b      	ldrh	r3, [r3, #10]
 800daa6:	461a      	mov	r2, r3
 800daa8:	69bb      	ldr	r3, [r7, #24]
 800daaa:	1ad3      	subs	r3, r2, r3
 800daac:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800daae:	693b      	ldr	r3, [r7, #16]
 800dab0:	7858      	ldrb	r0, [r3, #1]
 800dab2:	6a3b      	ldr	r3, [r7, #32]
 800dab4:	697a      	ldr	r2, [r7, #20]
 800dab6:	69f9      	ldr	r1, [r7, #28]
 800dab8:	f7fd ff0a 	bl	800b8d0 <disk_write>
 800dabc:	4603      	mov	r3, r0
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d004      	beq.n	800dacc <f_write+0x1ca>
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	2201      	movs	r2, #1
 800dac6:	755a      	strb	r2, [r3, #21]
 800dac8:	2301      	movs	r3, #1
 800daca:	e08b      	b.n	800dbe4 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	6a1a      	ldr	r2, [r3, #32]
 800dad0:	697b      	ldr	r3, [r7, #20]
 800dad2:	1ad3      	subs	r3, r2, r3
 800dad4:	6a3a      	ldr	r2, [r7, #32]
 800dad6:	429a      	cmp	r2, r3
 800dad8:	d915      	bls.n	800db06 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	6a1a      	ldr	r2, [r3, #32]
 800dae4:	697b      	ldr	r3, [r7, #20]
 800dae6:	1ad3      	subs	r3, r2, r3
 800dae8:	025b      	lsls	r3, r3, #9
 800daea:	69fa      	ldr	r2, [r7, #28]
 800daec:	4413      	add	r3, r2
 800daee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800daf2:	4619      	mov	r1, r3
 800daf4:	f7fd ffac 	bl	800ba50 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	7d1b      	ldrb	r3, [r3, #20]
 800dafc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800db00:	b2da      	uxtb	r2, r3
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800db06:	6a3b      	ldr	r3, [r7, #32]
 800db08:	025b      	lsls	r3, r3, #9
 800db0a:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800db0c:	e03f      	b.n	800db8e <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	6a1b      	ldr	r3, [r3, #32]
 800db12:	697a      	ldr	r2, [r7, #20]
 800db14:	429a      	cmp	r2, r3
 800db16:	d016      	beq.n	800db46 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	699a      	ldr	r2, [r3, #24]
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800db20:	429a      	cmp	r2, r3
 800db22:	d210      	bcs.n	800db46 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800db24:	693b      	ldr	r3, [r7, #16]
 800db26:	7858      	ldrb	r0, [r3, #1]
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800db2e:	2301      	movs	r3, #1
 800db30:	697a      	ldr	r2, [r7, #20]
 800db32:	f7fd fead 	bl	800b890 <disk_read>
 800db36:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d004      	beq.n	800db46 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	2201      	movs	r2, #1
 800db40:	755a      	strb	r2, [r3, #21]
 800db42:	2301      	movs	r3, #1
 800db44:	e04e      	b.n	800dbe4 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	697a      	ldr	r2, [r7, #20]
 800db4a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	699b      	ldr	r3, [r3, #24]
 800db50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db54:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800db58:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800db5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	429a      	cmp	r2, r3
 800db60:	d901      	bls.n	800db66 <f_write+0x264>
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	699b      	ldr	r3, [r3, #24]
 800db70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db74:	4413      	add	r3, r2
 800db76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800db78:	69f9      	ldr	r1, [r7, #28]
 800db7a:	4618      	mov	r0, r3
 800db7c:	f7fd ff68 	bl	800ba50 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	7d1b      	ldrb	r3, [r3, #20]
 800db84:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800db88:	b2da      	uxtb	r2, r3
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800db8e:	69fa      	ldr	r2, [r7, #28]
 800db90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db92:	4413      	add	r3, r2
 800db94:	61fb      	str	r3, [r7, #28]
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	699a      	ldr	r2, [r3, #24]
 800db9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db9c:	441a      	add	r2, r3
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	619a      	str	r2, [r3, #24]
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	68da      	ldr	r2, [r3, #12]
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	699b      	ldr	r3, [r3, #24]
 800dbaa:	429a      	cmp	r2, r3
 800dbac:	bf38      	it	cc
 800dbae:	461a      	movcc	r2, r3
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	60da      	str	r2, [r3, #12]
 800dbb4:	683b      	ldr	r3, [r7, #0]
 800dbb6:	681a      	ldr	r2, [r3, #0]
 800dbb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbba:	441a      	add	r2, r3
 800dbbc:	683b      	ldr	r3, [r7, #0]
 800dbbe:	601a      	str	r2, [r3, #0]
 800dbc0:	687a      	ldr	r2, [r7, #4]
 800dbc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbc4:	1ad3      	subs	r3, r2, r3
 800dbc6:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	f47f aed4 	bne.w	800d978 <f_write+0x76>
 800dbd0:	e000      	b.n	800dbd4 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800dbd2:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	7d1b      	ldrb	r3, [r3, #20]
 800dbd8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dbdc:	b2da      	uxtb	r2, r3
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800dbe2:	2300      	movs	r3, #0
}
 800dbe4:	4618      	mov	r0, r3
 800dbe6:	3730      	adds	r7, #48	@ 0x30
 800dbe8:	46bd      	mov	sp, r7
 800dbea:	bd80      	pop	{r7, pc}

0800dbec <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800dbec:	b580      	push	{r7, lr}
 800dbee:	b086      	sub	sp, #24
 800dbf0:	af00      	add	r7, sp, #0
 800dbf2:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	f107 0208 	add.w	r2, r7, #8
 800dbfa:	4611      	mov	r1, r2
 800dbfc:	4618      	mov	r0, r3
 800dbfe:	f7ff fb0b 	bl	800d218 <validate>
 800dc02:	4603      	mov	r3, r0
 800dc04:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800dc06:	7dfb      	ldrb	r3, [r7, #23]
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d168      	bne.n	800dcde <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	7d1b      	ldrb	r3, [r3, #20]
 800dc10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d062      	beq.n	800dcde <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	7d1b      	ldrb	r3, [r3, #20]
 800dc1c:	b25b      	sxtb	r3, r3
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	da15      	bge.n	800dc4e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800dc22:	68bb      	ldr	r3, [r7, #8]
 800dc24:	7858      	ldrb	r0, [r3, #1]
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	6a1a      	ldr	r2, [r3, #32]
 800dc30:	2301      	movs	r3, #1
 800dc32:	f7fd fe4d 	bl	800b8d0 <disk_write>
 800dc36:	4603      	mov	r3, r0
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d001      	beq.n	800dc40 <f_sync+0x54>
 800dc3c:	2301      	movs	r3, #1
 800dc3e:	e04f      	b.n	800dce0 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	7d1b      	ldrb	r3, [r3, #20]
 800dc44:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dc48:	b2da      	uxtb	r2, r3
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800dc4e:	f7fd fb9d 	bl	800b38c <get_fattime>
 800dc52:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800dc54:	68ba      	ldr	r2, [r7, #8]
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc5a:	4619      	mov	r1, r3
 800dc5c:	4610      	mov	r0, r2
 800dc5e:	f7fe f925 	bl	800beac <move_window>
 800dc62:	4603      	mov	r3, r0
 800dc64:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800dc66:	7dfb      	ldrb	r3, [r7, #23]
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d138      	bne.n	800dcde <f_sync+0xf2>
					dir = fp->dir_ptr;
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc70:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	330b      	adds	r3, #11
 800dc76:	781a      	ldrb	r2, [r3, #0]
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	330b      	adds	r3, #11
 800dc7c:	f042 0220 	orr.w	r2, r2, #32
 800dc80:	b2d2      	uxtb	r2, r2
 800dc82:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	6818      	ldr	r0, [r3, #0]
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	689b      	ldr	r3, [r3, #8]
 800dc8c:	461a      	mov	r2, r3
 800dc8e:	68f9      	ldr	r1, [r7, #12]
 800dc90:	f7fe fe2f 	bl	800c8f2 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	f103 021c 	add.w	r2, r3, #28
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	68db      	ldr	r3, [r3, #12]
 800dc9e:	4619      	mov	r1, r3
 800dca0:	4610      	mov	r0, r2
 800dca2:	f7fd fea9 	bl	800b9f8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	3316      	adds	r3, #22
 800dcaa:	6939      	ldr	r1, [r7, #16]
 800dcac:	4618      	mov	r0, r3
 800dcae:	f7fd fea3 	bl	800b9f8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	3312      	adds	r3, #18
 800dcb6:	2100      	movs	r1, #0
 800dcb8:	4618      	mov	r0, r3
 800dcba:	f7fd fe82 	bl	800b9c2 <st_word>
					fs->wflag = 1;
 800dcbe:	68bb      	ldr	r3, [r7, #8]
 800dcc0:	2201      	movs	r2, #1
 800dcc2:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800dcc4:	68bb      	ldr	r3, [r7, #8]
 800dcc6:	4618      	mov	r0, r3
 800dcc8:	f7fe f91e 	bl	800bf08 <sync_fs>
 800dccc:	4603      	mov	r3, r0
 800dcce:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	7d1b      	ldrb	r3, [r3, #20]
 800dcd4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dcd8:	b2da      	uxtb	r2, r3
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800dcde:	7dfb      	ldrb	r3, [r7, #23]
}
 800dce0:	4618      	mov	r0, r3
 800dce2:	3718      	adds	r7, #24
 800dce4:	46bd      	mov	sp, r7
 800dce6:	bd80      	pop	{r7, pc}

0800dce8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800dce8:	b580      	push	{r7, lr}
 800dcea:	b084      	sub	sp, #16
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800dcf0:	6878      	ldr	r0, [r7, #4]
 800dcf2:	f7ff ff7b 	bl	800dbec <f_sync>
 800dcf6:	4603      	mov	r3, r0
 800dcf8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800dcfa:	7bfb      	ldrb	r3, [r7, #15]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d118      	bne.n	800dd32 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	f107 0208 	add.w	r2, r7, #8
 800dd06:	4611      	mov	r1, r2
 800dd08:	4618      	mov	r0, r3
 800dd0a:	f7ff fa85 	bl	800d218 <validate>
 800dd0e:	4603      	mov	r3, r0
 800dd10:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800dd12:	7bfb      	ldrb	r3, [r7, #15]
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d10c      	bne.n	800dd32 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	691b      	ldr	r3, [r3, #16]
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	f7fe f821 	bl	800bd64 <dec_lock>
 800dd22:	4603      	mov	r3, r0
 800dd24:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800dd26:	7bfb      	ldrb	r3, [r7, #15]
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d102      	bne.n	800dd32 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	2200      	movs	r2, #0
 800dd30:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800dd32:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd34:	4618      	mov	r0, r3
 800dd36:	3710      	adds	r7, #16
 800dd38:	46bd      	mov	sp, r7
 800dd3a:	bd80      	pop	{r7, pc}

0800dd3c <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800dd3c:	b580      	push	{r7, lr}
 800dd3e:	b090      	sub	sp, #64	@ 0x40
 800dd40:	af00      	add	r7, sp, #0
 800dd42:	6078      	str	r0, [r7, #4]
 800dd44:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	f107 0208 	add.w	r2, r7, #8
 800dd4c:	4611      	mov	r1, r2
 800dd4e:	4618      	mov	r0, r3
 800dd50:	f7ff fa62 	bl	800d218 <validate>
 800dd54:	4603      	mov	r3, r0
 800dd56:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800dd5a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d103      	bne.n	800dd6a <f_lseek+0x2e>
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	7d5b      	ldrb	r3, [r3, #21]
 800dd66:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800dd6a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d002      	beq.n	800dd78 <f_lseek+0x3c>
 800dd72:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800dd76:	e1e6      	b.n	800e146 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	f000 80d1 	beq.w	800df24 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800dd82:	683b      	ldr	r3, [r7, #0]
 800dd84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd88:	d15a      	bne.n	800de40 <f_lseek+0x104>
			tbl = fp->cltbl;
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd8e:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800dd90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd92:	1d1a      	adds	r2, r3, #4
 800dd94:	627a      	str	r2, [r7, #36]	@ 0x24
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	617b      	str	r3, [r7, #20]
 800dd9a:	2302      	movs	r3, #2
 800dd9c:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	689b      	ldr	r3, [r3, #8]
 800dda2:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800dda4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d03a      	beq.n	800de20 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800ddaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddac:	613b      	str	r3, [r7, #16]
 800ddae:	2300      	movs	r3, #0
 800ddb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ddb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddb4:	3302      	adds	r3, #2
 800ddb6:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800ddb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddba:	60fb      	str	r3, [r7, #12]
 800ddbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddbe:	3301      	adds	r3, #1
 800ddc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ddc6:	4618      	mov	r0, r3
 800ddc8:	f7fe f92b 	bl	800c022 <get_fat>
 800ddcc:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800ddce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddd0:	2b01      	cmp	r3, #1
 800ddd2:	d804      	bhi.n	800ddde <f_lseek+0xa2>
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	2202      	movs	r2, #2
 800ddd8:	755a      	strb	r2, [r3, #21]
 800ddda:	2302      	movs	r3, #2
 800dddc:	e1b3      	b.n	800e146 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ddde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dde0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dde4:	d104      	bne.n	800ddf0 <f_lseek+0xb4>
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	2201      	movs	r2, #1
 800ddea:	755a      	strb	r2, [r3, #21]
 800ddec:	2301      	movs	r3, #1
 800ddee:	e1aa      	b.n	800e146 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	3301      	adds	r3, #1
 800ddf4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ddf6:	429a      	cmp	r2, r3
 800ddf8:	d0de      	beq.n	800ddb8 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800ddfa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ddfc:	697b      	ldr	r3, [r7, #20]
 800ddfe:	429a      	cmp	r2, r3
 800de00:	d809      	bhi.n	800de16 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800de02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de04:	1d1a      	adds	r2, r3, #4
 800de06:	627a      	str	r2, [r7, #36]	@ 0x24
 800de08:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800de0a:	601a      	str	r2, [r3, #0]
 800de0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de0e:	1d1a      	adds	r2, r3, #4
 800de10:	627a      	str	r2, [r7, #36]	@ 0x24
 800de12:	693a      	ldr	r2, [r7, #16]
 800de14:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800de16:	68bb      	ldr	r3, [r7, #8]
 800de18:	695b      	ldr	r3, [r3, #20]
 800de1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800de1c:	429a      	cmp	r2, r3
 800de1e:	d3c4      	bcc.n	800ddaa <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de24:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800de26:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800de28:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800de2a:	697b      	ldr	r3, [r7, #20]
 800de2c:	429a      	cmp	r2, r3
 800de2e:	d803      	bhi.n	800de38 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800de30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de32:	2200      	movs	r2, #0
 800de34:	601a      	str	r2, [r3, #0]
 800de36:	e184      	b.n	800e142 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800de38:	2311      	movs	r3, #17
 800de3a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800de3e:	e180      	b.n	800e142 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	68db      	ldr	r3, [r3, #12]
 800de44:	683a      	ldr	r2, [r7, #0]
 800de46:	429a      	cmp	r2, r3
 800de48:	d902      	bls.n	800de50 <f_lseek+0x114>
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	68db      	ldr	r3, [r3, #12]
 800de4e:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	683a      	ldr	r2, [r7, #0]
 800de54:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800de56:	683b      	ldr	r3, [r7, #0]
 800de58:	2b00      	cmp	r3, #0
 800de5a:	f000 8172 	beq.w	800e142 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800de5e:	683b      	ldr	r3, [r7, #0]
 800de60:	3b01      	subs	r3, #1
 800de62:	4619      	mov	r1, r3
 800de64:	6878      	ldr	r0, [r7, #4]
 800de66:	f7fe fb6a 	bl	800c53e <clmt_clust>
 800de6a:	4602      	mov	r2, r0
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800de70:	68ba      	ldr	r2, [r7, #8]
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	69db      	ldr	r3, [r3, #28]
 800de76:	4619      	mov	r1, r3
 800de78:	4610      	mov	r0, r2
 800de7a:	f7fe f8b3 	bl	800bfe4 <clust2sect>
 800de7e:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800de80:	69bb      	ldr	r3, [r7, #24]
 800de82:	2b00      	cmp	r3, #0
 800de84:	d104      	bne.n	800de90 <f_lseek+0x154>
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	2202      	movs	r2, #2
 800de8a:	755a      	strb	r2, [r3, #21]
 800de8c:	2302      	movs	r3, #2
 800de8e:	e15a      	b.n	800e146 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800de90:	683b      	ldr	r3, [r7, #0]
 800de92:	3b01      	subs	r3, #1
 800de94:	0a5b      	lsrs	r3, r3, #9
 800de96:	68ba      	ldr	r2, [r7, #8]
 800de98:	8952      	ldrh	r2, [r2, #10]
 800de9a:	3a01      	subs	r2, #1
 800de9c:	4013      	ands	r3, r2
 800de9e:	69ba      	ldr	r2, [r7, #24]
 800dea0:	4413      	add	r3, r2
 800dea2:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	699b      	ldr	r3, [r3, #24]
 800dea8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800deac:	2b00      	cmp	r3, #0
 800deae:	f000 8148 	beq.w	800e142 <f_lseek+0x406>
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	6a1b      	ldr	r3, [r3, #32]
 800deb6:	69ba      	ldr	r2, [r7, #24]
 800deb8:	429a      	cmp	r2, r3
 800deba:	f000 8142 	beq.w	800e142 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	7d1b      	ldrb	r3, [r3, #20]
 800dec2:	b25b      	sxtb	r3, r3
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	da18      	bge.n	800defa <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800dec8:	68bb      	ldr	r3, [r7, #8]
 800deca:	7858      	ldrb	r0, [r3, #1]
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	6a1a      	ldr	r2, [r3, #32]
 800ded6:	2301      	movs	r3, #1
 800ded8:	f7fd fcfa 	bl	800b8d0 <disk_write>
 800dedc:	4603      	mov	r3, r0
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d004      	beq.n	800deec <f_lseek+0x1b0>
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	2201      	movs	r2, #1
 800dee6:	755a      	strb	r2, [r3, #21]
 800dee8:	2301      	movs	r3, #1
 800deea:	e12c      	b.n	800e146 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	7d1b      	ldrb	r3, [r3, #20]
 800def0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800def4:	b2da      	uxtb	r2, r3
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800defa:	68bb      	ldr	r3, [r7, #8]
 800defc:	7858      	ldrb	r0, [r3, #1]
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800df04:	2301      	movs	r3, #1
 800df06:	69ba      	ldr	r2, [r7, #24]
 800df08:	f7fd fcc2 	bl	800b890 <disk_read>
 800df0c:	4603      	mov	r3, r0
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d004      	beq.n	800df1c <f_lseek+0x1e0>
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	2201      	movs	r2, #1
 800df16:	755a      	strb	r2, [r3, #21]
 800df18:	2301      	movs	r3, #1
 800df1a:	e114      	b.n	800e146 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	69ba      	ldr	r2, [r7, #24]
 800df20:	621a      	str	r2, [r3, #32]
 800df22:	e10e      	b.n	800e142 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	68db      	ldr	r3, [r3, #12]
 800df28:	683a      	ldr	r2, [r7, #0]
 800df2a:	429a      	cmp	r2, r3
 800df2c:	d908      	bls.n	800df40 <f_lseek+0x204>
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	7d1b      	ldrb	r3, [r3, #20]
 800df32:	f003 0302 	and.w	r3, r3, #2
 800df36:	2b00      	cmp	r3, #0
 800df38:	d102      	bne.n	800df40 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	68db      	ldr	r3, [r3, #12]
 800df3e:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	699b      	ldr	r3, [r3, #24]
 800df44:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800df46:	2300      	movs	r3, #0
 800df48:	637b      	str	r3, [r7, #52]	@ 0x34
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800df4e:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800df50:	683b      	ldr	r3, [r7, #0]
 800df52:	2b00      	cmp	r3, #0
 800df54:	f000 80a7 	beq.w	800e0a6 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800df58:	68bb      	ldr	r3, [r7, #8]
 800df5a:	895b      	ldrh	r3, [r3, #10]
 800df5c:	025b      	lsls	r3, r3, #9
 800df5e:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800df60:	6a3b      	ldr	r3, [r7, #32]
 800df62:	2b00      	cmp	r3, #0
 800df64:	d01b      	beq.n	800df9e <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800df66:	683b      	ldr	r3, [r7, #0]
 800df68:	1e5a      	subs	r2, r3, #1
 800df6a:	69fb      	ldr	r3, [r7, #28]
 800df6c:	fbb2 f2f3 	udiv	r2, r2, r3
 800df70:	6a3b      	ldr	r3, [r7, #32]
 800df72:	1e59      	subs	r1, r3, #1
 800df74:	69fb      	ldr	r3, [r7, #28]
 800df76:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800df7a:	429a      	cmp	r2, r3
 800df7c:	d30f      	bcc.n	800df9e <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800df7e:	6a3b      	ldr	r3, [r7, #32]
 800df80:	1e5a      	subs	r2, r3, #1
 800df82:	69fb      	ldr	r3, [r7, #28]
 800df84:	425b      	negs	r3, r3
 800df86:	401a      	ands	r2, r3
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	699b      	ldr	r3, [r3, #24]
 800df90:	683a      	ldr	r2, [r7, #0]
 800df92:	1ad3      	subs	r3, r2, r3
 800df94:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	69db      	ldr	r3, [r3, #28]
 800df9a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800df9c:	e022      	b.n	800dfe4 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	689b      	ldr	r3, [r3, #8]
 800dfa2:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800dfa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d119      	bne.n	800dfde <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	2100      	movs	r1, #0
 800dfae:	4618      	mov	r0, r3
 800dfb0:	f7fe fa2d 	bl	800c40e <create_chain>
 800dfb4:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800dfb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfb8:	2b01      	cmp	r3, #1
 800dfba:	d104      	bne.n	800dfc6 <f_lseek+0x28a>
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	2202      	movs	r2, #2
 800dfc0:	755a      	strb	r2, [r3, #21]
 800dfc2:	2302      	movs	r3, #2
 800dfc4:	e0bf      	b.n	800e146 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800dfc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfcc:	d104      	bne.n	800dfd8 <f_lseek+0x29c>
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	2201      	movs	r2, #1
 800dfd2:	755a      	strb	r2, [r3, #21]
 800dfd4:	2301      	movs	r3, #1
 800dfd6:	e0b6      	b.n	800e146 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dfdc:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dfe2:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800dfe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d05d      	beq.n	800e0a6 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800dfea:	e03a      	b.n	800e062 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800dfec:	683a      	ldr	r2, [r7, #0]
 800dfee:	69fb      	ldr	r3, [r7, #28]
 800dff0:	1ad3      	subs	r3, r2, r3
 800dff2:	603b      	str	r3, [r7, #0]
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	699a      	ldr	r2, [r3, #24]
 800dff8:	69fb      	ldr	r3, [r7, #28]
 800dffa:	441a      	add	r2, r3
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	7d1b      	ldrb	r3, [r3, #20]
 800e004:	f003 0302 	and.w	r3, r3, #2
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d00b      	beq.n	800e024 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800e010:	4618      	mov	r0, r3
 800e012:	f7fe f9fc 	bl	800c40e <create_chain>
 800e016:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800e018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d108      	bne.n	800e030 <f_lseek+0x2f4>
							ofs = 0; break;
 800e01e:	2300      	movs	r3, #0
 800e020:	603b      	str	r3, [r7, #0]
 800e022:	e022      	b.n	800e06a <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800e028:	4618      	mov	r0, r3
 800e02a:	f7fd fffa 	bl	800c022 <get_fat>
 800e02e:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e030:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e032:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e036:	d104      	bne.n	800e042 <f_lseek+0x306>
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	2201      	movs	r2, #1
 800e03c:	755a      	strb	r2, [r3, #21]
 800e03e:	2301      	movs	r3, #1
 800e040:	e081      	b.n	800e146 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800e042:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e044:	2b01      	cmp	r3, #1
 800e046:	d904      	bls.n	800e052 <f_lseek+0x316>
 800e048:	68bb      	ldr	r3, [r7, #8]
 800e04a:	695b      	ldr	r3, [r3, #20]
 800e04c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e04e:	429a      	cmp	r2, r3
 800e050:	d304      	bcc.n	800e05c <f_lseek+0x320>
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	2202      	movs	r2, #2
 800e056:	755a      	strb	r2, [r3, #21]
 800e058:	2302      	movs	r3, #2
 800e05a:	e074      	b.n	800e146 <f_lseek+0x40a>
					fp->clust = clst;
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e060:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800e062:	683a      	ldr	r2, [r7, #0]
 800e064:	69fb      	ldr	r3, [r7, #28]
 800e066:	429a      	cmp	r2, r3
 800e068:	d8c0      	bhi.n	800dfec <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	699a      	ldr	r2, [r3, #24]
 800e06e:	683b      	ldr	r3, [r7, #0]
 800e070:	441a      	add	r2, r3
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800e076:	683b      	ldr	r3, [r7, #0]
 800e078:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d012      	beq.n	800e0a6 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800e080:	68bb      	ldr	r3, [r7, #8]
 800e082:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800e084:	4618      	mov	r0, r3
 800e086:	f7fd ffad 	bl	800bfe4 <clust2sect>
 800e08a:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800e08c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d104      	bne.n	800e09c <f_lseek+0x360>
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	2202      	movs	r2, #2
 800e096:	755a      	strb	r2, [r3, #21]
 800e098:	2302      	movs	r3, #2
 800e09a:	e054      	b.n	800e146 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800e09c:	683b      	ldr	r3, [r7, #0]
 800e09e:	0a5b      	lsrs	r3, r3, #9
 800e0a0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e0a2:	4413      	add	r3, r2
 800e0a4:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	699a      	ldr	r2, [r3, #24]
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	68db      	ldr	r3, [r3, #12]
 800e0ae:	429a      	cmp	r2, r3
 800e0b0:	d90a      	bls.n	800e0c8 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	699a      	ldr	r2, [r3, #24]
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	7d1b      	ldrb	r3, [r3, #20]
 800e0be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e0c2:	b2da      	uxtb	r2, r3
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	699b      	ldr	r3, [r3, #24]
 800e0cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d036      	beq.n	800e142 <f_lseek+0x406>
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	6a1b      	ldr	r3, [r3, #32]
 800e0d8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e0da:	429a      	cmp	r2, r3
 800e0dc:	d031      	beq.n	800e142 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	7d1b      	ldrb	r3, [r3, #20]
 800e0e2:	b25b      	sxtb	r3, r3
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	da18      	bge.n	800e11a <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e0e8:	68bb      	ldr	r3, [r7, #8]
 800e0ea:	7858      	ldrb	r0, [r3, #1]
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	6a1a      	ldr	r2, [r3, #32]
 800e0f6:	2301      	movs	r3, #1
 800e0f8:	f7fd fbea 	bl	800b8d0 <disk_write>
 800e0fc:	4603      	mov	r3, r0
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d004      	beq.n	800e10c <f_lseek+0x3d0>
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	2201      	movs	r2, #1
 800e106:	755a      	strb	r2, [r3, #21]
 800e108:	2301      	movs	r3, #1
 800e10a:	e01c      	b.n	800e146 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	7d1b      	ldrb	r3, [r3, #20]
 800e110:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e114:	b2da      	uxtb	r2, r3
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800e11a:	68bb      	ldr	r3, [r7, #8]
 800e11c:	7858      	ldrb	r0, [r3, #1]
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e124:	2301      	movs	r3, #1
 800e126:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e128:	f7fd fbb2 	bl	800b890 <disk_read>
 800e12c:	4603      	mov	r3, r0
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d004      	beq.n	800e13c <f_lseek+0x400>
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	2201      	movs	r2, #1
 800e136:	755a      	strb	r2, [r3, #21]
 800e138:	2301      	movs	r3, #1
 800e13a:	e004      	b.n	800e146 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e140:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800e142:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800e146:	4618      	mov	r0, r3
 800e148:	3740      	adds	r7, #64	@ 0x40
 800e14a:	46bd      	mov	sp, r7
 800e14c:	bd80      	pop	{r7, pc}
	...

0800e150 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 800e150:	b590      	push	{r4, r7, lr}
 800e152:	b09d      	sub	sp, #116	@ 0x74
 800e154:	af00      	add	r7, sp, #0
 800e156:	60f8      	str	r0, [r7, #12]
 800e158:	607a      	str	r2, [r7, #4]
 800e15a:	603b      	str	r3, [r7, #0]
 800e15c:	460b      	mov	r3, r1
 800e15e:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 800e160:	2301      	movs	r3, #1
 800e162:	647b      	str	r3, [r7, #68]	@ 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 800e164:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e168:	643b      	str	r3, [r7, #64]	@ 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800e16a:	f107 030c 	add.w	r3, r7, #12
 800e16e:	4618      	mov	r0, r3
 800e170:	f7fe fd6b 	bl	800cc4a <get_ldnumber>
 800e174:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800e176:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e178:	2b00      	cmp	r3, #0
 800e17a:	da02      	bge.n	800e182 <f_mkfs+0x32>
 800e17c:	230b      	movs	r3, #11
 800e17e:	f000 bc0d 	b.w	800e99c <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 800e182:	4a94      	ldr	r2, [pc, #592]	@ (800e3d4 <f_mkfs+0x284>)
 800e184:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e186:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d005      	beq.n	800e19a <f_mkfs+0x4a>
 800e18e:	4a91      	ldr	r2, [pc, #580]	@ (800e3d4 <f_mkfs+0x284>)
 800e190:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e192:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e196:	2200      	movs	r2, #0
 800e198:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 800e19a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e19c:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 800e1a0:	2300      	movs	r3, #0
 800e1a2:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 800e1a6:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800e1aa:	4618      	mov	r0, r3
 800e1ac:	f7fd fb4a 	bl	800b844 <disk_initialize>
 800e1b0:	4603      	mov	r3, r0
 800e1b2:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 800e1b6:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800e1ba:	f003 0301 	and.w	r3, r3, #1
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d001      	beq.n	800e1c6 <f_mkfs+0x76>
 800e1c2:	2303      	movs	r3, #3
 800e1c4:	e3ea      	b.n	800e99c <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 800e1c6:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800e1ca:	f003 0304 	and.w	r3, r3, #4
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d001      	beq.n	800e1d6 <f_mkfs+0x86>
 800e1d2:	230a      	movs	r3, #10
 800e1d4:	e3e2      	b.n	800e99c <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 800e1d6:	f107 0214 	add.w	r2, r7, #20
 800e1da:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800e1de:	2103      	movs	r1, #3
 800e1e0:	4618      	mov	r0, r3
 800e1e2:	f7fd fb95 	bl	800b910 <disk_ioctl>
 800e1e6:	4603      	mov	r3, r0
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d10c      	bne.n	800e206 <f_mkfs+0xb6>
 800e1ec:	697b      	ldr	r3, [r7, #20]
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d009      	beq.n	800e206 <f_mkfs+0xb6>
 800e1f2:	697b      	ldr	r3, [r7, #20]
 800e1f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e1f8:	d805      	bhi.n	800e206 <f_mkfs+0xb6>
 800e1fa:	697b      	ldr	r3, [r7, #20]
 800e1fc:	1e5a      	subs	r2, r3, #1
 800e1fe:	697b      	ldr	r3, [r7, #20]
 800e200:	4013      	ands	r3, r2
 800e202:	2b00      	cmp	r3, #0
 800e204:	d001      	beq.n	800e20a <f_mkfs+0xba>
 800e206:	2301      	movs	r3, #1
 800e208:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 800e20a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e20e:	86fb      	strh	r3, [r7, #54]	@ 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	2b00      	cmp	r3, #0
 800e214:	d003      	beq.n	800e21e <f_mkfs+0xce>
 800e216:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e218:	687a      	ldr	r2, [r7, #4]
 800e21a:	429a      	cmp	r2, r3
 800e21c:	d309      	bcc.n	800e232 <f_mkfs+0xe2>
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e224:	d805      	bhi.n	800e232 <f_mkfs+0xe2>
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	1e5a      	subs	r2, r3, #1
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	4013      	ands	r3, r2
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d001      	beq.n	800e236 <f_mkfs+0xe6>
 800e232:	2313      	movs	r3, #19
 800e234:	e3b2      	b.n	800e99c <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 800e236:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e238:	687a      	ldr	r2, [r7, #4]
 800e23a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e23e:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 800e240:	683b      	ldr	r3, [r7, #0]
 800e242:	633b      	str	r3, [r7, #48]	@ 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 800e244:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e246:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800e24a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e24e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 800e250:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800e252:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e254:	fb02 f303 	mul.w	r3, r2, r3
 800e258:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 800e25a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d101      	bne.n	800e264 <f_mkfs+0x114>
 800e260:	230e      	movs	r3, #14
 800e262:	e39b      	b.n	800e99c <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 800e264:	f107 0210 	add.w	r2, r7, #16
 800e268:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800e26c:	2101      	movs	r1, #1
 800e26e:	4618      	mov	r0, r3
 800e270:	f7fd fb4e 	bl	800b910 <disk_ioctl>
 800e274:	4603      	mov	r3, r0
 800e276:	2b00      	cmp	r3, #0
 800e278:	d001      	beq.n	800e27e <f_mkfs+0x12e>
 800e27a:	2301      	movs	r3, #1
 800e27c:	e38e      	b.n	800e99c <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 800e27e:	7afb      	ldrb	r3, [r7, #11]
 800e280:	f003 0308 	and.w	r3, r3, #8
 800e284:	2b00      	cmp	r3, #0
 800e286:	d001      	beq.n	800e28c <f_mkfs+0x13c>
 800e288:	2300      	movs	r3, #0
 800e28a:	e000      	b.n	800e28e <f_mkfs+0x13e>
 800e28c:	233f      	movs	r3, #63	@ 0x3f
 800e28e:	627b      	str	r3, [r7, #36]	@ 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 800e290:	693b      	ldr	r3, [r7, #16]
 800e292:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e294:	429a      	cmp	r2, r3
 800e296:	d901      	bls.n	800e29c <f_mkfs+0x14c>
 800e298:	230e      	movs	r3, #14
 800e29a:	e37f      	b.n	800e99c <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 800e29c:	693a      	ldr	r2, [r7, #16]
 800e29e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2a0:	1ad3      	subs	r3, r2, r3
 800e2a2:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 800e2a4:	693b      	ldr	r3, [r7, #16]
 800e2a6:	2b7f      	cmp	r3, #127	@ 0x7f
 800e2a8:	d801      	bhi.n	800e2ae <f_mkfs+0x15e>
 800e2aa:	230e      	movs	r3, #14
 800e2ac:	e376      	b.n	800e99c <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	2b80      	cmp	r3, #128	@ 0x80
 800e2b2:	d901      	bls.n	800e2b8 <f_mkfs+0x168>
 800e2b4:	2313      	movs	r3, #19
 800e2b6:	e371      	b.n	800e99c <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 800e2b8:	7afb      	ldrb	r3, [r7, #11]
 800e2ba:	f003 0302 	and.w	r3, r3, #2
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d00d      	beq.n	800e2de <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 800e2c2:	7afb      	ldrb	r3, [r7, #11]
 800e2c4:	f003 0307 	and.w	r3, r3, #7
 800e2c8:	2b02      	cmp	r3, #2
 800e2ca:	d004      	beq.n	800e2d6 <f_mkfs+0x186>
 800e2cc:	7afb      	ldrb	r3, [r7, #11]
 800e2ce:	f003 0301 	and.w	r3, r3, #1
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d103      	bne.n	800e2de <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 800e2d6:	2303      	movs	r3, #3
 800e2d8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800e2dc:	e009      	b.n	800e2f2 <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 800e2de:	7afb      	ldrb	r3, [r7, #11]
 800e2e0:	f003 0301 	and.w	r3, r3, #1
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d101      	bne.n	800e2ec <f_mkfs+0x19c>
 800e2e8:	2313      	movs	r3, #19
 800e2ea:	e357      	b.n	800e99c <f_mkfs+0x84c>
		fmt = FS_FAT16;
 800e2ec:	2302      	movs	r3, #2
 800e2ee:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	653b      	str	r3, [r7, #80]	@ 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 800e2f6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800e2fa:	2b03      	cmp	r3, #3
 800e2fc:	d13c      	bne.n	800e378 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 800e2fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e300:	2b00      	cmp	r3, #0
 800e302:	d11b      	bne.n	800e33c <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800e304:	693b      	ldr	r3, [r7, #16]
 800e306:	0c5b      	lsrs	r3, r3, #17
 800e308:	65fb      	str	r3, [r7, #92]	@ 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800e30a:	2300      	movs	r3, #0
 800e30c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e30e:	2301      	movs	r3, #1
 800e310:	653b      	str	r3, [r7, #80]	@ 0x50
 800e312:	e005      	b.n	800e320 <f_mkfs+0x1d0>
 800e314:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e316:	3301      	adds	r3, #1
 800e318:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e31a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e31c:	005b      	lsls	r3, r3, #1
 800e31e:	653b      	str	r3, [r7, #80]	@ 0x50
 800e320:	4a2d      	ldr	r2, [pc, #180]	@ (800e3d8 <f_mkfs+0x288>)
 800e322:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e324:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d007      	beq.n	800e33c <f_mkfs+0x1ec>
 800e32c:	4a2a      	ldr	r2, [pc, #168]	@ (800e3d8 <f_mkfs+0x288>)
 800e32e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e330:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e334:	461a      	mov	r2, r3
 800e336:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e338:	4293      	cmp	r3, r2
 800e33a:	d2eb      	bcs.n	800e314 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 800e33c:	693a      	ldr	r2, [r7, #16]
 800e33e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e340:	fbb2 f3f3 	udiv	r3, r2, r3
 800e344:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800e346:	6a3b      	ldr	r3, [r7, #32]
 800e348:	3302      	adds	r3, #2
 800e34a:	009a      	lsls	r2, r3, #2
 800e34c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e34e:	4413      	add	r3, r2
 800e350:	1e5a      	subs	r2, r3, #1
 800e352:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e354:	fbb2 f3f3 	udiv	r3, r2, r3
 800e358:	66bb      	str	r3, [r7, #104]	@ 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 800e35a:	2320      	movs	r3, #32
 800e35c:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_dir = 0;		/* No static directory */
 800e35e:	2300      	movs	r3, #0
 800e360:	66fb      	str	r3, [r7, #108]	@ 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 800e362:	6a3b      	ldr	r3, [r7, #32]
 800e364:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800e368:	4293      	cmp	r3, r2
 800e36a:	d903      	bls.n	800e374 <f_mkfs+0x224>
 800e36c:	6a3b      	ldr	r3, [r7, #32]
 800e36e:	4a1b      	ldr	r2, [pc, #108]	@ (800e3dc <f_mkfs+0x28c>)
 800e370:	4293      	cmp	r3, r2
 800e372:	d952      	bls.n	800e41a <f_mkfs+0x2ca>
 800e374:	230e      	movs	r3, #14
 800e376:	e311      	b.n	800e99c <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 800e378:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d11b      	bne.n	800e3b6 <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800e37e:	693b      	ldr	r3, [r7, #16]
 800e380:	0b1b      	lsrs	r3, r3, #12
 800e382:	65fb      	str	r3, [r7, #92]	@ 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800e384:	2300      	movs	r3, #0
 800e386:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e388:	2301      	movs	r3, #1
 800e38a:	653b      	str	r3, [r7, #80]	@ 0x50
 800e38c:	e005      	b.n	800e39a <f_mkfs+0x24a>
 800e38e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e390:	3301      	adds	r3, #1
 800e392:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e394:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e396:	005b      	lsls	r3, r3, #1
 800e398:	653b      	str	r3, [r7, #80]	@ 0x50
 800e39a:	4a11      	ldr	r2, [pc, #68]	@ (800e3e0 <f_mkfs+0x290>)
 800e39c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e39e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d007      	beq.n	800e3b6 <f_mkfs+0x266>
 800e3a6:	4a0e      	ldr	r2, [pc, #56]	@ (800e3e0 <f_mkfs+0x290>)
 800e3a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e3aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e3ae:	461a      	mov	r2, r3
 800e3b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e3b2:	4293      	cmp	r3, r2
 800e3b4:	d2eb      	bcs.n	800e38e <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 800e3b6:	693a      	ldr	r2, [r7, #16]
 800e3b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e3ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800e3be:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 800e3c0:	6a3b      	ldr	r3, [r7, #32]
 800e3c2:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800e3c6:	4293      	cmp	r3, r2
 800e3c8:	d90c      	bls.n	800e3e4 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800e3ca:	6a3b      	ldr	r3, [r7, #32]
 800e3cc:	3302      	adds	r3, #2
 800e3ce:	005b      	lsls	r3, r3, #1
 800e3d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e3d2:	e012      	b.n	800e3fa <f_mkfs+0x2aa>
 800e3d4:	2001ea24 	.word	0x2001ea24
 800e3d8:	08016e18 	.word	0x08016e18
 800e3dc:	0ffffff5 	.word	0x0ffffff5
 800e3e0:	08016e28 	.word	0x08016e28
				} else {
					fmt = FS_FAT12;
 800e3e4:	2301      	movs	r3, #1
 800e3e6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800e3ea:	6a3a      	ldr	r2, [r7, #32]
 800e3ec:	4613      	mov	r3, r2
 800e3ee:	005b      	lsls	r3, r3, #1
 800e3f0:	4413      	add	r3, r2
 800e3f2:	3301      	adds	r3, #1
 800e3f4:	085b      	lsrs	r3, r3, #1
 800e3f6:	3303      	adds	r3, #3
 800e3f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800e3fa:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800e3fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e3fe:	4413      	add	r3, r2
 800e400:	1e5a      	subs	r2, r3, #1
 800e402:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e404:	fbb2 f3f3 	udiv	r3, r2, r3
 800e408:	66bb      	str	r3, [r7, #104]	@ 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 800e40a:	2301      	movs	r3, #1
 800e40c:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 800e40e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e410:	015a      	lsls	r2, r3, #5
 800e412:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e414:	fbb2 f3f3 	udiv	r3, r2, r3
 800e418:	66fb      	str	r3, [r7, #108]	@ 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800e41a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e41c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e41e:	4413      	add	r3, r2
 800e420:	65bb      	str	r3, [r7, #88]	@ 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 800e422:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e424:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e426:	fb03 f202 	mul.w	r2, r3, r2
 800e42a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e42c:	4413      	add	r3, r2
 800e42e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800e430:	4413      	add	r3, r2
 800e432:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 800e434:	697a      	ldr	r2, [r7, #20]
 800e436:	69fb      	ldr	r3, [r7, #28]
 800e438:	4413      	add	r3, r2
 800e43a:	1e5a      	subs	r2, r3, #1
 800e43c:	697b      	ldr	r3, [r7, #20]
 800e43e:	425b      	negs	r3, r3
 800e440:	401a      	ands	r2, r3
 800e442:	69fb      	ldr	r3, [r7, #28]
 800e444:	1ad3      	subs	r3, r2, r3
 800e446:	65fb      	str	r3, [r7, #92]	@ 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 800e448:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800e44c:	2b03      	cmp	r3, #3
 800e44e:	d108      	bne.n	800e462 <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 800e450:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e452:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e454:	4413      	add	r3, r2
 800e456:	657b      	str	r3, [r7, #84]	@ 0x54
 800e458:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e45a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e45c:	4413      	add	r3, r2
 800e45e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e460:	e006      	b.n	800e470 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 800e462:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800e464:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e466:	fbb2 f3f3 	udiv	r3, r2, r3
 800e46a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800e46c:	4413      	add	r3, r2
 800e46e:	66bb      	str	r3, [r7, #104]	@ 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 800e470:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e472:	011a      	lsls	r2, r3, #4
 800e474:	69fb      	ldr	r3, [r7, #28]
 800e476:	441a      	add	r2, r3
 800e478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e47a:	1ad2      	subs	r2, r2, r3
 800e47c:	693b      	ldr	r3, [r7, #16]
 800e47e:	429a      	cmp	r2, r3
 800e480:	d901      	bls.n	800e486 <f_mkfs+0x336>
 800e482:	230e      	movs	r3, #14
 800e484:	e28a      	b.n	800e99c <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 800e486:	693a      	ldr	r2, [r7, #16]
 800e488:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e48a:	1ad2      	subs	r2, r2, r3
 800e48c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e48e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e490:	fb01 f303 	mul.w	r3, r1, r3
 800e494:	1ad2      	subs	r2, r2, r3
 800e496:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e498:	1ad2      	subs	r2, r2, r3
 800e49a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e49c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e4a0:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 800e4a2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800e4a6:	2b03      	cmp	r3, #3
 800e4a8:	d10f      	bne.n	800e4ca <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 800e4aa:	6a3b      	ldr	r3, [r7, #32]
 800e4ac:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800e4b0:	4293      	cmp	r3, r2
 800e4b2:	d80a      	bhi.n	800e4ca <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d105      	bne.n	800e4c6 <f_mkfs+0x376>
 800e4ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e4bc:	085b      	lsrs	r3, r3, #1
 800e4be:	607b      	str	r3, [r7, #4]
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d144      	bne.n	800e550 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 800e4c6:	230e      	movs	r3, #14
 800e4c8:	e268      	b.n	800e99c <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 800e4ca:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800e4ce:	2b02      	cmp	r3, #2
 800e4d0:	d133      	bne.n	800e53a <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800e4d2:	6a3b      	ldr	r3, [r7, #32]
 800e4d4:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800e4d8:	4293      	cmp	r3, r2
 800e4da:	d91e      	bls.n	800e51a <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d107      	bne.n	800e4f2 <f_mkfs+0x3a2>
 800e4e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e4e4:	005b      	lsls	r3, r3, #1
 800e4e6:	2b40      	cmp	r3, #64	@ 0x40
 800e4e8:	d803      	bhi.n	800e4f2 <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 800e4ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e4ec:	005b      	lsls	r3, r3, #1
 800e4ee:	607b      	str	r3, [r7, #4]
 800e4f0:	e033      	b.n	800e55a <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 800e4f2:	7afb      	ldrb	r3, [r7, #11]
 800e4f4:	f003 0302 	and.w	r3, r3, #2
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d003      	beq.n	800e504 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800e4fc:	2303      	movs	r3, #3
 800e4fe:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800e502:	e02a      	b.n	800e55a <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	2b00      	cmp	r3, #0
 800e508:	d105      	bne.n	800e516 <f_mkfs+0x3c6>
 800e50a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e50c:	005b      	lsls	r3, r3, #1
 800e50e:	607b      	str	r3, [r7, #4]
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	2b80      	cmp	r3, #128	@ 0x80
 800e514:	d91e      	bls.n	800e554 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 800e516:	230e      	movs	r3, #14
 800e518:	e240      	b.n	800e99c <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800e51a:	6a3b      	ldr	r3, [r7, #32]
 800e51c:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800e520:	4293      	cmp	r3, r2
 800e522:	d80a      	bhi.n	800e53a <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	2b00      	cmp	r3, #0
 800e528:	d105      	bne.n	800e536 <f_mkfs+0x3e6>
 800e52a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e52c:	005b      	lsls	r3, r3, #1
 800e52e:	607b      	str	r3, [r7, #4]
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	2b80      	cmp	r3, #128	@ 0x80
 800e534:	d910      	bls.n	800e558 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 800e536:	230e      	movs	r3, #14
 800e538:	e230      	b.n	800e99c <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 800e53a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800e53e:	2b01      	cmp	r3, #1
 800e540:	d10c      	bne.n	800e55c <f_mkfs+0x40c>
 800e542:	6a3b      	ldr	r3, [r7, #32]
 800e544:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800e548:	4293      	cmp	r3, r2
 800e54a:	d907      	bls.n	800e55c <f_mkfs+0x40c>
 800e54c:	230e      	movs	r3, #14
 800e54e:	e225      	b.n	800e99c <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800e550:	bf00      	nop
 800e552:	e6ce      	b.n	800e2f2 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800e554:	bf00      	nop
 800e556:	e6cc      	b.n	800e2f2 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800e558:	bf00      	nop
			pau = au;
 800e55a:	e6ca      	b.n	800e2f2 <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 800e55c:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 800e55e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e560:	461a      	mov	r2, r3
 800e562:	2100      	movs	r1, #0
 800e564:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e566:	f7fd fa94 	bl	800ba92 <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 800e56a:	220b      	movs	r2, #11
 800e56c:	49b2      	ldr	r1, [pc, #712]	@ (800e838 <f_mkfs+0x6e8>)
 800e56e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e570:	f7fd fa6e 	bl	800ba50 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800e574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e576:	330b      	adds	r3, #11
 800e578:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800e57a:	4611      	mov	r1, r2
 800e57c:	4618      	mov	r0, r3
 800e57e:	f7fd fa20 	bl	800b9c2 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800e582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e584:	330d      	adds	r3, #13
 800e586:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e588:	b2d2      	uxtb	r2, r2
 800e58a:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800e58c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e58e:	330e      	adds	r3, #14
 800e590:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e592:	b292      	uxth	r2, r2
 800e594:	4611      	mov	r1, r2
 800e596:	4618      	mov	r0, r3
 800e598:	f7fd fa13 	bl	800b9c2 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 800e59c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e59e:	3310      	adds	r3, #16
 800e5a0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e5a2:	b2d2      	uxtb	r2, r2
 800e5a4:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 800e5a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5a8:	f103 0211 	add.w	r2, r3, #17
 800e5ac:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800e5b0:	2b03      	cmp	r3, #3
 800e5b2:	d002      	beq.n	800e5ba <f_mkfs+0x46a>
 800e5b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e5b6:	b29b      	uxth	r3, r3
 800e5b8:	e000      	b.n	800e5bc <f_mkfs+0x46c>
 800e5ba:	2300      	movs	r3, #0
 800e5bc:	4619      	mov	r1, r3
 800e5be:	4610      	mov	r0, r2
 800e5c0:	f7fd f9ff 	bl	800b9c2 <st_word>
		if (sz_vol < 0x10000) {
 800e5c4:	693b      	ldr	r3, [r7, #16]
 800e5c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e5ca:	d208      	bcs.n	800e5de <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800e5cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5ce:	3313      	adds	r3, #19
 800e5d0:	693a      	ldr	r2, [r7, #16]
 800e5d2:	b292      	uxth	r2, r2
 800e5d4:	4611      	mov	r1, r2
 800e5d6:	4618      	mov	r0, r3
 800e5d8:	f7fd f9f3 	bl	800b9c2 <st_word>
 800e5dc:	e006      	b.n	800e5ec <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 800e5de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5e0:	3320      	adds	r3, #32
 800e5e2:	693a      	ldr	r2, [r7, #16]
 800e5e4:	4611      	mov	r1, r2
 800e5e6:	4618      	mov	r0, r3
 800e5e8:	f7fd fa06 	bl	800b9f8 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800e5ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5ee:	3315      	adds	r3, #21
 800e5f0:	22f8      	movs	r2, #248	@ 0xf8
 800e5f2:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800e5f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5f6:	3318      	adds	r3, #24
 800e5f8:	213f      	movs	r1, #63	@ 0x3f
 800e5fa:	4618      	mov	r0, r3
 800e5fc:	f7fd f9e1 	bl	800b9c2 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800e600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e602:	331a      	adds	r3, #26
 800e604:	21ff      	movs	r1, #255	@ 0xff
 800e606:	4618      	mov	r0, r3
 800e608:	f7fd f9db 	bl	800b9c2 <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 800e60c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e60e:	331c      	adds	r3, #28
 800e610:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e612:	4618      	mov	r0, r3
 800e614:	f7fd f9f0 	bl	800b9f8 <st_dword>
		if (fmt == FS_FAT32) {
 800e618:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800e61c:	2b03      	cmp	r3, #3
 800e61e:	d131      	bne.n	800e684 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 800e620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e622:	f103 0443 	add.w	r4, r3, #67	@ 0x43
 800e626:	f7fc feb1 	bl	800b38c <get_fattime>
 800e62a:	4603      	mov	r3, r0
 800e62c:	4619      	mov	r1, r3
 800e62e:	4620      	mov	r0, r4
 800e630:	f7fd f9e2 	bl	800b9f8 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800e634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e636:	3324      	adds	r3, #36	@ 0x24
 800e638:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800e63a:	4618      	mov	r0, r3
 800e63c:	f7fd f9dc 	bl	800b9f8 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800e640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e642:	332c      	adds	r3, #44	@ 0x2c
 800e644:	2102      	movs	r1, #2
 800e646:	4618      	mov	r0, r3
 800e648:	f7fd f9d6 	bl	800b9f8 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800e64c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e64e:	3330      	adds	r3, #48	@ 0x30
 800e650:	2101      	movs	r1, #1
 800e652:	4618      	mov	r0, r3
 800e654:	f7fd f9b5 	bl	800b9c2 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800e658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e65a:	3332      	adds	r3, #50	@ 0x32
 800e65c:	2106      	movs	r1, #6
 800e65e:	4618      	mov	r0, r3
 800e660:	f7fd f9af 	bl	800b9c2 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800e664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e666:	3340      	adds	r3, #64	@ 0x40
 800e668:	2280      	movs	r2, #128	@ 0x80
 800e66a:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800e66c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e66e:	3342      	adds	r3, #66	@ 0x42
 800e670:	2229      	movs	r2, #41	@ 0x29
 800e672:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800e674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e676:	3347      	adds	r3, #71	@ 0x47
 800e678:	2213      	movs	r2, #19
 800e67a:	4970      	ldr	r1, [pc, #448]	@ (800e83c <f_mkfs+0x6ec>)
 800e67c:	4618      	mov	r0, r3
 800e67e:	f7fd f9e7 	bl	800ba50 <mem_cpy>
 800e682:	e020      	b.n	800e6c6 <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 800e684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e686:	f103 0427 	add.w	r4, r3, #39	@ 0x27
 800e68a:	f7fc fe7f 	bl	800b38c <get_fattime>
 800e68e:	4603      	mov	r3, r0
 800e690:	4619      	mov	r1, r3
 800e692:	4620      	mov	r0, r4
 800e694:	f7fd f9b0 	bl	800b9f8 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800e698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e69a:	3316      	adds	r3, #22
 800e69c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800e69e:	b292      	uxth	r2, r2
 800e6a0:	4611      	mov	r1, r2
 800e6a2:	4618      	mov	r0, r3
 800e6a4:	f7fd f98d 	bl	800b9c2 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800e6a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6aa:	3324      	adds	r3, #36	@ 0x24
 800e6ac:	2280      	movs	r2, #128	@ 0x80
 800e6ae:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800e6b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6b2:	3326      	adds	r3, #38	@ 0x26
 800e6b4:	2229      	movs	r2, #41	@ 0x29
 800e6b6:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800e6b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6ba:	332b      	adds	r3, #43	@ 0x2b
 800e6bc:	2213      	movs	r2, #19
 800e6be:	4960      	ldr	r1, [pc, #384]	@ (800e840 <f_mkfs+0x6f0>)
 800e6c0:	4618      	mov	r0, r3
 800e6c2:	f7fd f9c5 	bl	800ba50 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800e6c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6c8:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800e6cc:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800e6d0:	4618      	mov	r0, r3
 800e6d2:	f7fd f976 	bl	800b9c2 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 800e6d6:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 800e6da:	2301      	movs	r3, #1
 800e6dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e6de:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e6e0:	f7fd f8f6 	bl	800b8d0 <disk_write>
 800e6e4:	4603      	mov	r3, r0
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d001      	beq.n	800e6ee <f_mkfs+0x59e>
 800e6ea:	2301      	movs	r3, #1
 800e6ec:	e156      	b.n	800e99c <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 800e6ee:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800e6f2:	2b03      	cmp	r3, #3
 800e6f4:	d140      	bne.n	800e778 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800e6f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6f8:	1d9a      	adds	r2, r3, #6
 800e6fa:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 800e6fe:	2301      	movs	r3, #1
 800e700:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e702:	f7fd f8e5 	bl	800b8d0 <disk_write>
			mem_set(buf, 0, ss);
 800e706:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e708:	461a      	mov	r2, r3
 800e70a:	2100      	movs	r1, #0
 800e70c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e70e:	f7fd f9c0 	bl	800ba92 <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800e712:	494c      	ldr	r1, [pc, #304]	@ (800e844 <f_mkfs+0x6f4>)
 800e714:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e716:	f7fd f96f 	bl	800b9f8 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 800e71a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e71c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800e720:	4949      	ldr	r1, [pc, #292]	@ (800e848 <f_mkfs+0x6f8>)
 800e722:	4618      	mov	r0, r3
 800e724:	f7fd f968 	bl	800b9f8 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800e728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e72a:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800e72e:	6a3b      	ldr	r3, [r7, #32]
 800e730:	3b01      	subs	r3, #1
 800e732:	4619      	mov	r1, r3
 800e734:	4610      	mov	r0, r2
 800e736:	f7fd f95f 	bl	800b9f8 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800e73a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e73c:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800e740:	2102      	movs	r1, #2
 800e742:	4618      	mov	r0, r3
 800e744:	f7fd f958 	bl	800b9f8 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800e748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e74a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800e74e:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800e752:	4618      	mov	r0, r3
 800e754:	f7fd f935 	bl	800b9c2 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800e758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e75a:	1dda      	adds	r2, r3, #7
 800e75c:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 800e760:	2301      	movs	r3, #1
 800e762:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e764:	f7fd f8b4 	bl	800b8d0 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800e768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e76a:	1c5a      	adds	r2, r3, #1
 800e76c:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 800e770:	2301      	movs	r3, #1
 800e772:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e774:	f7fd f8ac 	bl	800b8d0 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 800e778:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e77a:	2100      	movs	r1, #0
 800e77c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e77e:	f7fd f988 	bl	800ba92 <mem_set>
		sect = b_fat;		/* FAT start sector */
 800e782:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e784:	667b      	str	r3, [r7, #100]	@ 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800e786:	2300      	movs	r3, #0
 800e788:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e78a:	e04b      	b.n	800e824 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 800e78c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800e790:	2b03      	cmp	r3, #3
 800e792:	d113      	bne.n	800e7bc <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 800e794:	f06f 0107 	mvn.w	r1, #7
 800e798:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e79a:	f7fd f92d 	bl	800b9f8 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 800e79e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e7a0:	3304      	adds	r3, #4
 800e7a2:	f04f 31ff 	mov.w	r1, #4294967295
 800e7a6:	4618      	mov	r0, r3
 800e7a8:	f7fd f926 	bl	800b9f8 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 800e7ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e7ae:	3308      	adds	r3, #8
 800e7b0:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 800e7b4:	4618      	mov	r0, r3
 800e7b6:	f7fd f91f 	bl	800b9f8 <st_dword>
 800e7ba:	e00b      	b.n	800e7d4 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 800e7bc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800e7c0:	2b01      	cmp	r3, #1
 800e7c2:	d101      	bne.n	800e7c8 <f_mkfs+0x678>
 800e7c4:	4b21      	ldr	r3, [pc, #132]	@ (800e84c <f_mkfs+0x6fc>)
 800e7c6:	e001      	b.n	800e7cc <f_mkfs+0x67c>
 800e7c8:	f06f 0307 	mvn.w	r3, #7
 800e7cc:	4619      	mov	r1, r3
 800e7ce:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e7d0:	f7fd f912 	bl	800b9f8 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800e7d4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e7d6:	663b      	str	r3, [r7, #96]	@ 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800e7d8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e7da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7dc:	4293      	cmp	r3, r2
 800e7de:	bf28      	it	cs
 800e7e0:	4613      	movcs	r3, r2
 800e7e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800e7e4:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 800e7e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e7ea:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e7ec:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e7ee:	f7fd f86f 	bl	800b8d0 <disk_write>
 800e7f2:	4603      	mov	r3, r0
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d001      	beq.n	800e7fc <f_mkfs+0x6ac>
 800e7f8:	2301      	movs	r3, #1
 800e7fa:	e0cf      	b.n	800e99c <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 800e7fc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e7fe:	461a      	mov	r2, r3
 800e800:	2100      	movs	r1, #0
 800e802:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e804:	f7fd f945 	bl	800ba92 <mem_set>
				sect += n; nsect -= n;
 800e808:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e80a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e80c:	4413      	add	r3, r2
 800e80e:	667b      	str	r3, [r7, #100]	@ 0x64
 800e810:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e812:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e814:	1ad3      	subs	r3, r2, r3
 800e816:	663b      	str	r3, [r7, #96]	@ 0x60
			} while (nsect);
 800e818:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d1dc      	bne.n	800e7d8 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800e81e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e820:	3301      	adds	r3, #1
 800e822:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e824:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e826:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e828:	429a      	cmp	r2, r3
 800e82a:	d3af      	bcc.n	800e78c <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800e82c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800e830:	2b03      	cmp	r3, #3
 800e832:	d10d      	bne.n	800e850 <f_mkfs+0x700>
 800e834:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e836:	e00c      	b.n	800e852 <f_mkfs+0x702>
 800e838:	08016d00 	.word	0x08016d00
 800e83c:	08016d0c 	.word	0x08016d0c
 800e840:	08016d20 	.word	0x08016d20
 800e844:	41615252 	.word	0x41615252
 800e848:	61417272 	.word	0x61417272
 800e84c:	00fffff8 	.word	0x00fffff8
 800e850:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e852:	663b      	str	r3, [r7, #96]	@ 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800e854:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e856:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e858:	4293      	cmp	r3, r2
 800e85a:	bf28      	it	cs
 800e85c:	4613      	movcs	r3, r2
 800e85e:	65fb      	str	r3, [r7, #92]	@ 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800e860:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 800e864:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e866:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e868:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e86a:	f7fd f831 	bl	800b8d0 <disk_write>
 800e86e:	4603      	mov	r3, r0
 800e870:	2b00      	cmp	r3, #0
 800e872:	d001      	beq.n	800e878 <f_mkfs+0x728>
 800e874:	2301      	movs	r3, #1
 800e876:	e091      	b.n	800e99c <f_mkfs+0x84c>
			sect += n; nsect -= n;
 800e878:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e87a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e87c:	4413      	add	r3, r2
 800e87e:	667b      	str	r3, [r7, #100]	@ 0x64
 800e880:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e882:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e884:	1ad3      	subs	r3, r2, r3
 800e886:	663b      	str	r3, [r7, #96]	@ 0x60
		} while (nsect);
 800e888:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d1e2      	bne.n	800e854 <f_mkfs+0x704>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 800e88e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800e892:	2b03      	cmp	r3, #3
 800e894:	d103      	bne.n	800e89e <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 800e896:	230c      	movs	r3, #12
 800e898:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 800e89c:	e010      	b.n	800e8c0 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 800e89e:	693b      	ldr	r3, [r7, #16]
 800e8a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e8a4:	d303      	bcc.n	800e8ae <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 800e8a6:	2306      	movs	r3, #6
 800e8a8:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 800e8ac:	e008      	b.n	800e8c0 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 800e8ae:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800e8b2:	2b02      	cmp	r3, #2
 800e8b4:	d101      	bne.n	800e8ba <f_mkfs+0x76a>
 800e8b6:	2304      	movs	r3, #4
 800e8b8:	e000      	b.n	800e8bc <f_mkfs+0x76c>
 800e8ba:	2301      	movs	r3, #1
 800e8bc:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 800e8c0:	7afb      	ldrb	r3, [r7, #11]
 800e8c2:	f003 0308 	and.w	r3, r3, #8
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d15b      	bne.n	800e982 <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 800e8ca:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e8cc:	461a      	mov	r2, r3
 800e8ce:	2100      	movs	r1, #0
 800e8d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e8d2:	f7fd f8de 	bl	800ba92 <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800e8d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8d8:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800e8dc:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800e8e0:	4618      	mov	r0, r3
 800e8e2:	f7fd f86e 	bl	800b9c2 <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 800e8e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8e8:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800e8ec:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 800e8ee:	69bb      	ldr	r3, [r7, #24]
 800e8f0:	2200      	movs	r2, #0
 800e8f2:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 800e8f4:	69bb      	ldr	r3, [r7, #24]
 800e8f6:	3301      	adds	r3, #1
 800e8f8:	2201      	movs	r2, #1
 800e8fa:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 800e8fc:	69bb      	ldr	r3, [r7, #24]
 800e8fe:	3302      	adds	r3, #2
 800e900:	2201      	movs	r2, #1
 800e902:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 800e904:	69bb      	ldr	r3, [r7, #24]
 800e906:	3303      	adds	r3, #3
 800e908:	2200      	movs	r2, #0
 800e90a:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 800e90c:	69bb      	ldr	r3, [r7, #24]
 800e90e:	3304      	adds	r3, #4
 800e910:	f897 204e 	ldrb.w	r2, [r7, #78]	@ 0x4e
 800e914:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 800e916:	693a      	ldr	r2, [r7, #16]
 800e918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e91a:	441a      	add	r2, r3
 800e91c:	4b21      	ldr	r3, [pc, #132]	@ (800e9a4 <f_mkfs+0x854>)
 800e91e:	fba3 1302 	umull	r1, r3, r3, r2
 800e922:	1ad2      	subs	r2, r2, r3
 800e924:	0852      	lsrs	r2, r2, #1
 800e926:	4413      	add	r3, r2
 800e928:	0b5b      	lsrs	r3, r3, #13
 800e92a:	65fb      	str	r3, [r7, #92]	@ 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 800e92c:	69bb      	ldr	r3, [r7, #24]
 800e92e:	3305      	adds	r3, #5
 800e930:	22fe      	movs	r2, #254	@ 0xfe
 800e932:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 800e934:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e936:	089b      	lsrs	r3, r3, #2
 800e938:	b2da      	uxtb	r2, r3
 800e93a:	69bb      	ldr	r3, [r7, #24]
 800e93c:	3306      	adds	r3, #6
 800e93e:	f042 023f 	orr.w	r2, r2, #63	@ 0x3f
 800e942:	b2d2      	uxtb	r2, r2
 800e944:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 800e946:	69bb      	ldr	r3, [r7, #24]
 800e948:	3307      	adds	r3, #7
 800e94a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800e94c:	b2d2      	uxtb	r2, r2
 800e94e:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 800e950:	69bb      	ldr	r3, [r7, #24]
 800e952:	3308      	adds	r3, #8
 800e954:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e956:	4618      	mov	r0, r3
 800e958:	f7fd f84e 	bl	800b9f8 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 800e95c:	69bb      	ldr	r3, [r7, #24]
 800e95e:	330c      	adds	r3, #12
 800e960:	693a      	ldr	r2, [r7, #16]
 800e962:	4611      	mov	r1, r2
 800e964:	4618      	mov	r0, r3
 800e966:	f7fd f847 	bl	800b9f8 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800e96a:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 800e96e:	2301      	movs	r3, #1
 800e970:	2200      	movs	r2, #0
 800e972:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e974:	f7fc ffac 	bl	800b8d0 <disk_write>
 800e978:	4603      	mov	r3, r0
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d001      	beq.n	800e982 <f_mkfs+0x832>
 800e97e:	2301      	movs	r3, #1
 800e980:	e00c      	b.n	800e99c <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 800e982:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800e986:	2200      	movs	r2, #0
 800e988:	2100      	movs	r1, #0
 800e98a:	4618      	mov	r0, r3
 800e98c:	f7fc ffc0 	bl	800b910 <disk_ioctl>
 800e990:	4603      	mov	r3, r0
 800e992:	2b00      	cmp	r3, #0
 800e994:	d001      	beq.n	800e99a <f_mkfs+0x84a>
 800e996:	2301      	movs	r3, #1
 800e998:	e000      	b.n	800e99c <f_mkfs+0x84c>

	return FR_OK;
 800e99a:	2300      	movs	r3, #0
}
 800e99c:	4618      	mov	r0, r3
 800e99e:	3774      	adds	r7, #116	@ 0x74
 800e9a0:	46bd      	mov	sp, r7
 800e9a2:	bd90      	pop	{r4, r7, pc}
 800e9a4:	0515565b 	.word	0x0515565b

0800e9a8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e9a8:	b480      	push	{r7}
 800e9aa:	b087      	sub	sp, #28
 800e9ac:	af00      	add	r7, sp, #0
 800e9ae:	60f8      	str	r0, [r7, #12]
 800e9b0:	60b9      	str	r1, [r7, #8]
 800e9b2:	4613      	mov	r3, r2
 800e9b4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e9b6:	2301      	movs	r3, #1
 800e9b8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e9ba:	2300      	movs	r3, #0
 800e9bc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e9be:	4b1f      	ldr	r3, [pc, #124]	@ (800ea3c <FATFS_LinkDriverEx+0x94>)
 800e9c0:	7a5b      	ldrb	r3, [r3, #9]
 800e9c2:	b2db      	uxtb	r3, r3
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d131      	bne.n	800ea2c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e9c8:	4b1c      	ldr	r3, [pc, #112]	@ (800ea3c <FATFS_LinkDriverEx+0x94>)
 800e9ca:	7a5b      	ldrb	r3, [r3, #9]
 800e9cc:	b2db      	uxtb	r3, r3
 800e9ce:	461a      	mov	r2, r3
 800e9d0:	4b1a      	ldr	r3, [pc, #104]	@ (800ea3c <FATFS_LinkDriverEx+0x94>)
 800e9d2:	2100      	movs	r1, #0
 800e9d4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e9d6:	4b19      	ldr	r3, [pc, #100]	@ (800ea3c <FATFS_LinkDriverEx+0x94>)
 800e9d8:	7a5b      	ldrb	r3, [r3, #9]
 800e9da:	b2db      	uxtb	r3, r3
 800e9dc:	4a17      	ldr	r2, [pc, #92]	@ (800ea3c <FATFS_LinkDriverEx+0x94>)
 800e9de:	009b      	lsls	r3, r3, #2
 800e9e0:	4413      	add	r3, r2
 800e9e2:	68fa      	ldr	r2, [r7, #12]
 800e9e4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e9e6:	4b15      	ldr	r3, [pc, #84]	@ (800ea3c <FATFS_LinkDriverEx+0x94>)
 800e9e8:	7a5b      	ldrb	r3, [r3, #9]
 800e9ea:	b2db      	uxtb	r3, r3
 800e9ec:	461a      	mov	r2, r3
 800e9ee:	4b13      	ldr	r3, [pc, #76]	@ (800ea3c <FATFS_LinkDriverEx+0x94>)
 800e9f0:	4413      	add	r3, r2
 800e9f2:	79fa      	ldrb	r2, [r7, #7]
 800e9f4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e9f6:	4b11      	ldr	r3, [pc, #68]	@ (800ea3c <FATFS_LinkDriverEx+0x94>)
 800e9f8:	7a5b      	ldrb	r3, [r3, #9]
 800e9fa:	b2db      	uxtb	r3, r3
 800e9fc:	1c5a      	adds	r2, r3, #1
 800e9fe:	b2d1      	uxtb	r1, r2
 800ea00:	4a0e      	ldr	r2, [pc, #56]	@ (800ea3c <FATFS_LinkDriverEx+0x94>)
 800ea02:	7251      	strb	r1, [r2, #9]
 800ea04:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ea06:	7dbb      	ldrb	r3, [r7, #22]
 800ea08:	3330      	adds	r3, #48	@ 0x30
 800ea0a:	b2da      	uxtb	r2, r3
 800ea0c:	68bb      	ldr	r3, [r7, #8]
 800ea0e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ea10:	68bb      	ldr	r3, [r7, #8]
 800ea12:	3301      	adds	r3, #1
 800ea14:	223a      	movs	r2, #58	@ 0x3a
 800ea16:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ea18:	68bb      	ldr	r3, [r7, #8]
 800ea1a:	3302      	adds	r3, #2
 800ea1c:	222f      	movs	r2, #47	@ 0x2f
 800ea1e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ea20:	68bb      	ldr	r3, [r7, #8]
 800ea22:	3303      	adds	r3, #3
 800ea24:	2200      	movs	r2, #0
 800ea26:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ea28:	2300      	movs	r3, #0
 800ea2a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ea2c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea2e:	4618      	mov	r0, r3
 800ea30:	371c      	adds	r7, #28
 800ea32:	46bd      	mov	sp, r7
 800ea34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea38:	4770      	bx	lr
 800ea3a:	bf00      	nop
 800ea3c:	2001ea4c 	.word	0x2001ea4c

0800ea40 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ea40:	b580      	push	{r7, lr}
 800ea42:	b082      	sub	sp, #8
 800ea44:	af00      	add	r7, sp, #0
 800ea46:	6078      	str	r0, [r7, #4]
 800ea48:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ea4a:	2200      	movs	r2, #0
 800ea4c:	6839      	ldr	r1, [r7, #0]
 800ea4e:	6878      	ldr	r0, [r7, #4]
 800ea50:	f7ff ffaa 	bl	800e9a8 <FATFS_LinkDriverEx>
 800ea54:	4603      	mov	r3, r0
}
 800ea56:	4618      	mov	r0, r3
 800ea58:	3708      	adds	r7, #8
 800ea5a:	46bd      	mov	sp, r7
 800ea5c:	bd80      	pop	{r7, pc}
	...

0800ea60 <network_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 800ea60:	b580      	push	{r7, lr}
 800ea62:	b082      	sub	sp, #8
 800ea64:	af00      	add	r7, sp, #0
 800ea66:	6078      	str	r0, [r7, #4]
 800ea68:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 800ea6a:	683a      	ldr	r2, [r7, #0]
 800ea6c:	2101      	movs	r1, #1
 800ea6e:	4831      	ldr	r0, [pc, #196]	@ (800eb34 <network_configure_activations+0xd4>)
 800ea70:	f001 fbd8 	bl	8010224 <ai_platform_get_activations_map>
 800ea74:	4603      	mov	r3, r0
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d051      	beq.n	800eb1e <network_configure_activations+0xbe>
    /* Updating activations (byte) offsets */
    
    serving_default_keras_tensor0_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800ea7a:	4b2e      	ldr	r3, [pc, #184]	@ (800eb34 <network_configure_activations+0xd4>)
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	4a2e      	ldr	r2, [pc, #184]	@ (800eb38 <network_configure_activations+0xd8>)
 800ea80:	6093      	str	r3, [r2, #8]
    serving_default_keras_tensor0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800ea82:	4b2c      	ldr	r3, [pc, #176]	@ (800eb34 <network_configure_activations+0xd4>)
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	4a2c      	ldr	r2, [pc, #176]	@ (800eb38 <network_configure_activations+0xd8>)
 800ea88:	60d3      	str	r3, [r2, #12]
    resize_0_output_array.data = AI_PTR(g_network_activations_map[0] + 63984);
 800ea8a:	4b2a      	ldr	r3, [pc, #168]	@ (800eb34 <network_configure_activations+0xd4>)
 800ea8c:	681a      	ldr	r2, [r3, #0]
 800ea8e:	f64f 13f0 	movw	r3, #63984	@ 0xf9f0
 800ea92:	4413      	add	r3, r2
 800ea94:	4a29      	ldr	r2, [pc, #164]	@ (800eb3c <network_configure_activations+0xdc>)
 800ea96:	6093      	str	r3, [r2, #8]
    resize_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 63984);
 800ea98:	4b26      	ldr	r3, [pc, #152]	@ (800eb34 <network_configure_activations+0xd4>)
 800ea9a:	681a      	ldr	r2, [r3, #0]
 800ea9c:	f64f 13f0 	movw	r3, #63984	@ 0xf9f0
 800eaa0:	4413      	add	r3, r2
 800eaa2:	4a26      	ldr	r2, [pc, #152]	@ (800eb3c <network_configure_activations+0xdc>)
 800eaa4:	60d3      	str	r3, [r2, #12]
    conv2d_1_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800eaa6:	4b23      	ldr	r3, [pc, #140]	@ (800eb34 <network_configure_activations+0xd4>)
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	4a25      	ldr	r2, [pc, #148]	@ (800eb40 <network_configure_activations+0xe0>)
 800eaac:	6093      	str	r3, [r2, #8]
    conv2d_1_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800eaae:	4b21      	ldr	r3, [pc, #132]	@ (800eb34 <network_configure_activations+0xd4>)
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	4a23      	ldr	r2, [pc, #140]	@ (800eb40 <network_configure_activations+0xe0>)
 800eab4:	60d3      	str	r3, [r2, #12]
    conv2d_1_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 36);
 800eab6:	4b1f      	ldr	r3, [pc, #124]	@ (800eb34 <network_configure_activations+0xd4>)
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	3324      	adds	r3, #36	@ 0x24
 800eabc:	4a21      	ldr	r2, [pc, #132]	@ (800eb44 <network_configure_activations+0xe4>)
 800eabe:	6093      	str	r3, [r2, #8]
    conv2d_1_scratch1_array.data_start = AI_PTR(g_network_activations_map[0] + 36);
 800eac0:	4b1c      	ldr	r3, [pc, #112]	@ (800eb34 <network_configure_activations+0xd4>)
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	3324      	adds	r3, #36	@ 0x24
 800eac6:	4a1f      	ldr	r2, [pc, #124]	@ (800eb44 <network_configure_activations+0xe4>)
 800eac8:	60d3      	str	r3, [r2, #12]
    conv2d_1_output_array.data = AI_PTR(g_network_activations_map[0] + 3364);
 800eaca:	4b1a      	ldr	r3, [pc, #104]	@ (800eb34 <network_configure_activations+0xd4>)
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	f603 5324 	addw	r3, r3, #3364	@ 0xd24
 800ead2:	4a1d      	ldr	r2, [pc, #116]	@ (800eb48 <network_configure_activations+0xe8>)
 800ead4:	6093      	str	r3, [r2, #8]
    conv2d_1_output_array.data_start = AI_PTR(g_network_activations_map[0] + 3364);
 800ead6:	4b17      	ldr	r3, [pc, #92]	@ (800eb34 <network_configure_activations+0xd4>)
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	f603 5324 	addw	r3, r3, #3364	@ 0xd24
 800eade:	4a1a      	ldr	r2, [pc, #104]	@ (800eb48 <network_configure_activations+0xe8>)
 800eae0:	60d3      	str	r3, [r2, #12]
    gemm_4_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800eae2:	4b14      	ldr	r3, [pc, #80]	@ (800eb34 <network_configure_activations+0xd4>)
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	4a19      	ldr	r2, [pc, #100]	@ (800eb4c <network_configure_activations+0xec>)
 800eae8:	6093      	str	r3, [r2, #8]
    gemm_4_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800eaea:	4b12      	ldr	r3, [pc, #72]	@ (800eb34 <network_configure_activations+0xd4>)
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	4a17      	ldr	r2, [pc, #92]	@ (800eb4c <network_configure_activations+0xec>)
 800eaf0:	60d3      	str	r3, [r2, #12]
    nl_4_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 256);
 800eaf2:	4b10      	ldr	r3, [pc, #64]	@ (800eb34 <network_configure_activations+0xd4>)
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800eafa:	4a15      	ldr	r2, [pc, #84]	@ (800eb50 <network_configure_activations+0xf0>)
 800eafc:	6093      	str	r3, [r2, #8]
    nl_4_nl_output_array.data_start = AI_PTR(g_network_activations_map[0] + 256);
 800eafe:	4b0d      	ldr	r3, [pc, #52]	@ (800eb34 <network_configure_activations+0xd4>)
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800eb06:	4a12      	ldr	r2, [pc, #72]	@ (800eb50 <network_configure_activations+0xf0>)
 800eb08:	60d3      	str	r3, [r2, #12]
    gemm_5_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800eb0a:	4b0a      	ldr	r3, [pc, #40]	@ (800eb34 <network_configure_activations+0xd4>)
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	4a11      	ldr	r2, [pc, #68]	@ (800eb54 <network_configure_activations+0xf4>)
 800eb10:	6093      	str	r3, [r2, #8]
    gemm_5_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800eb12:	4b08      	ldr	r3, [pc, #32]	@ (800eb34 <network_configure_activations+0xd4>)
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	4a0f      	ldr	r2, [pc, #60]	@ (800eb54 <network_configure_activations+0xf4>)
 800eb18:	60d3      	str	r3, [r2, #12]
    return true;
 800eb1a:	2301      	movs	r3, #1
 800eb1c:	e005      	b.n	800eb2a <network_configure_activations+0xca>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 800eb1e:	2213      	movs	r2, #19
 800eb20:	2130      	movs	r1, #48	@ 0x30
 800eb22:	6878      	ldr	r0, [r7, #4]
 800eb24:	f001 fbfc 	bl	8010320 <ai_platform_network_set_error>
  return false;
 800eb28:	2300      	movs	r3, #0
}
 800eb2a:	4618      	mov	r0, r3
 800eb2c:	3708      	adds	r7, #8
 800eb2e:	46bd      	mov	sp, r7
 800eb30:	bd80      	pop	{r7, pc}
 800eb32:	bf00      	nop
 800eb34:	2001ea58 	.word	0x2001ea58
 800eb38:	20000050 	.word	0x20000050
 800eb3c:	20000060 	.word	0x20000060
 800eb40:	20000110 	.word	0x20000110
 800eb44:	20000120 	.word	0x20000120
 800eb48:	20000070 	.word	0x20000070
 800eb4c:	20000080 	.word	0x20000080
 800eb50:	20000090 	.word	0x20000090
 800eb54:	200000a0 	.word	0x200000a0

0800eb58 <network_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 800eb58:	b580      	push	{r7, lr}
 800eb5a:	b082      	sub	sp, #8
 800eb5c:	af00      	add	r7, sp, #0
 800eb5e:	6078      	str	r0, [r7, #4]
 800eb60:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 800eb62:	683a      	ldr	r2, [r7, #0]
 800eb64:	2101      	movs	r1, #1
 800eb66:	483d      	ldr	r0, [pc, #244]	@ (800ec5c <network_configure_weights+0x104>)
 800eb68:	f001 fb04 	bl	8010174 <ai_platform_get_weights_map>
 800eb6c:	4603      	mov	r3, r0
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d069      	beq.n	800ec46 <network_configure_weights+0xee>
    /* Updating weights (byte) offsets */
    
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 800eb72:	4b3b      	ldr	r3, [pc, #236]	@ (800ec60 <network_configure_weights+0x108>)
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800eb7a:	4a39      	ldr	r2, [pc, #228]	@ (800ec60 <network_configure_weights+0x108>)
 800eb7c:	6013      	str	r3, [r2, #0]
    conv2d_1_weights_array.data = AI_PTR(g_network_weights_map[0] + 0);
 800eb7e:	4b37      	ldr	r3, [pc, #220]	@ (800ec5c <network_configure_weights+0x104>)
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	4a37      	ldr	r2, [pc, #220]	@ (800ec60 <network_configure_weights+0x108>)
 800eb84:	6093      	str	r3, [r2, #8]
    conv2d_1_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 0);
 800eb86:	4b35      	ldr	r3, [pc, #212]	@ (800ec5c <network_configure_weights+0x104>)
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	4a35      	ldr	r2, [pc, #212]	@ (800ec60 <network_configure_weights+0x108>)
 800eb8c:	60d3      	str	r3, [r2, #12]
    conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 800eb8e:	4b35      	ldr	r3, [pc, #212]	@ (800ec64 <network_configure_weights+0x10c>)
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800eb96:	4a33      	ldr	r2, [pc, #204]	@ (800ec64 <network_configure_weights+0x10c>)
 800eb98:	6013      	str	r3, [r2, #0]
    conv2d_1_bias_array.data = AI_PTR(g_network_weights_map[0] + 576);
 800eb9a:	4b30      	ldr	r3, [pc, #192]	@ (800ec5c <network_configure_weights+0x104>)
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 800eba2:	4a30      	ldr	r2, [pc, #192]	@ (800ec64 <network_configure_weights+0x10c>)
 800eba4:	6093      	str	r3, [r2, #8]
    conv2d_1_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 576);
 800eba6:	4b2d      	ldr	r3, [pc, #180]	@ (800ec5c <network_configure_weights+0x104>)
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 800ebae:	4a2d      	ldr	r2, [pc, #180]	@ (800ec64 <network_configure_weights+0x10c>)
 800ebb0:	60d3      	str	r3, [r2, #12]
    gemm_4_weights_array.format |= AI_FMT_FLAG_CONST;
 800ebb2:	4b2d      	ldr	r3, [pc, #180]	@ (800ec68 <network_configure_weights+0x110>)
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ebba:	4a2b      	ldr	r2, [pc, #172]	@ (800ec68 <network_configure_weights+0x110>)
 800ebbc:	6013      	str	r3, [r2, #0]
    gemm_4_weights_array.data = AI_PTR(g_network_weights_map[0] + 640);
 800ebbe:	4b27      	ldr	r3, [pc, #156]	@ (800ec5c <network_configure_weights+0x104>)
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 800ebc6:	4a28      	ldr	r2, [pc, #160]	@ (800ec68 <network_configure_weights+0x110>)
 800ebc8:	6093      	str	r3, [r2, #8]
    gemm_4_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 640);
 800ebca:	4b24      	ldr	r3, [pc, #144]	@ (800ec5c <network_configure_weights+0x104>)
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 800ebd2:	4a25      	ldr	r2, [pc, #148]	@ (800ec68 <network_configure_weights+0x110>)
 800ebd4:	60d3      	str	r3, [r2, #12]
    gemm_4_bias_array.format |= AI_FMT_FLAG_CONST;
 800ebd6:	4b25      	ldr	r3, [pc, #148]	@ (800ec6c <network_configure_weights+0x114>)
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ebde:	4a23      	ldr	r2, [pc, #140]	@ (800ec6c <network_configure_weights+0x114>)
 800ebe0:	6013      	str	r3, [r2, #0]
    gemm_4_bias_array.data = AI_PTR(g_network_weights_map[0] + 692864);
 800ebe2:	4b1e      	ldr	r3, [pc, #120]	@ (800ec5c <network_configure_weights+0x104>)
 800ebe4:	681a      	ldr	r2, [r3, #0]
 800ebe6:	4b22      	ldr	r3, [pc, #136]	@ (800ec70 <network_configure_weights+0x118>)
 800ebe8:	4413      	add	r3, r2
 800ebea:	4a20      	ldr	r2, [pc, #128]	@ (800ec6c <network_configure_weights+0x114>)
 800ebec:	6093      	str	r3, [r2, #8]
    gemm_4_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 692864);
 800ebee:	4b1b      	ldr	r3, [pc, #108]	@ (800ec5c <network_configure_weights+0x104>)
 800ebf0:	681a      	ldr	r2, [r3, #0]
 800ebf2:	4b1f      	ldr	r3, [pc, #124]	@ (800ec70 <network_configure_weights+0x118>)
 800ebf4:	4413      	add	r3, r2
 800ebf6:	4a1d      	ldr	r2, [pc, #116]	@ (800ec6c <network_configure_weights+0x114>)
 800ebf8:	60d3      	str	r3, [r2, #12]
    gemm_5_weights_array.format |= AI_FMT_FLAG_CONST;
 800ebfa:	4b1e      	ldr	r3, [pc, #120]	@ (800ec74 <network_configure_weights+0x11c>)
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ec02:	4a1c      	ldr	r2, [pc, #112]	@ (800ec74 <network_configure_weights+0x11c>)
 800ec04:	6013      	str	r3, [r2, #0]
    gemm_5_weights_array.data = AI_PTR(g_network_weights_map[0] + 693120);
 800ec06:	4b15      	ldr	r3, [pc, #84]	@ (800ec5c <network_configure_weights+0x104>)
 800ec08:	681a      	ldr	r2, [r3, #0]
 800ec0a:	4b1b      	ldr	r3, [pc, #108]	@ (800ec78 <network_configure_weights+0x120>)
 800ec0c:	4413      	add	r3, r2
 800ec0e:	4a19      	ldr	r2, [pc, #100]	@ (800ec74 <network_configure_weights+0x11c>)
 800ec10:	6093      	str	r3, [r2, #8]
    gemm_5_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 693120);
 800ec12:	4b12      	ldr	r3, [pc, #72]	@ (800ec5c <network_configure_weights+0x104>)
 800ec14:	681a      	ldr	r2, [r3, #0]
 800ec16:	4b18      	ldr	r3, [pc, #96]	@ (800ec78 <network_configure_weights+0x120>)
 800ec18:	4413      	add	r3, r2
 800ec1a:	4a16      	ldr	r2, [pc, #88]	@ (800ec74 <network_configure_weights+0x11c>)
 800ec1c:	60d3      	str	r3, [r2, #12]
    gemm_5_bias_array.format |= AI_FMT_FLAG_CONST;
 800ec1e:	4b17      	ldr	r3, [pc, #92]	@ (800ec7c <network_configure_weights+0x124>)
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ec26:	4a15      	ldr	r2, [pc, #84]	@ (800ec7c <network_configure_weights+0x124>)
 800ec28:	6013      	str	r3, [r2, #0]
    gemm_5_bias_array.data = AI_PTR(g_network_weights_map[0] + 694656);
 800ec2a:	4b0c      	ldr	r3, [pc, #48]	@ (800ec5c <network_configure_weights+0x104>)
 800ec2c:	681a      	ldr	r2, [r3, #0]
 800ec2e:	4b14      	ldr	r3, [pc, #80]	@ (800ec80 <network_configure_weights+0x128>)
 800ec30:	4413      	add	r3, r2
 800ec32:	4a12      	ldr	r2, [pc, #72]	@ (800ec7c <network_configure_weights+0x124>)
 800ec34:	6093      	str	r3, [r2, #8]
    gemm_5_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 694656);
 800ec36:	4b09      	ldr	r3, [pc, #36]	@ (800ec5c <network_configure_weights+0x104>)
 800ec38:	681a      	ldr	r2, [r3, #0]
 800ec3a:	4b11      	ldr	r3, [pc, #68]	@ (800ec80 <network_configure_weights+0x128>)
 800ec3c:	4413      	add	r3, r2
 800ec3e:	4a0f      	ldr	r2, [pc, #60]	@ (800ec7c <network_configure_weights+0x124>)
 800ec40:	60d3      	str	r3, [r2, #12]
    return true;
 800ec42:	2301      	movs	r3, #1
 800ec44:	e005      	b.n	800ec52 <network_configure_weights+0xfa>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 800ec46:	2212      	movs	r2, #18
 800ec48:	2130      	movs	r1, #48	@ 0x30
 800ec4a:	6878      	ldr	r0, [r7, #4]
 800ec4c:	f001 fb68 	bl	8010320 <ai_platform_network_set_error>
  return false;
 800ec50:	2300      	movs	r3, #0
}
 800ec52:	4618      	mov	r0, r3
 800ec54:	3708      	adds	r7, #8
 800ec56:	46bd      	mov	sp, r7
 800ec58:	bd80      	pop	{r7, pc}
 800ec5a:	bf00      	nop
 800ec5c:	2001ea5c 	.word	0x2001ea5c
 800ec60:	200000b0 	.word	0x200000b0
 800ec64:	200000c0 	.word	0x200000c0
 800ec68:	200000d0 	.word	0x200000d0
 800ec6c:	200000e0 	.word	0x200000e0
 800ec70:	000a9280 	.word	0x000a9280
 800ec74:	200000f0 	.word	0x200000f0
 800ec78:	000a9380 	.word	0x000a9380
 800ec7c:	20000100 	.word	0x20000100
 800ec80:	000a9980 	.word	0x000a9980

0800ec84 <ai_network_get_error>:
}


AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 800ec84:	b580      	push	{r7, lr}
 800ec86:	b082      	sub	sp, #8
 800ec88:	af00      	add	r7, sp, #0
 800ec8a:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 800ec8c:	6878      	ldr	r0, [r7, #4]
 800ec8e:	f001 fb3b 	bl	8010308 <ai_platform_network_get_error>
 800ec92:	4603      	mov	r3, r0
}
 800ec94:	4618      	mov	r0, r3
 800ec96:	3708      	adds	r7, #8
 800ec98:	46bd      	mov	sp, r7
 800ec9a:	bd80      	pop	{r7, pc}

0800ec9c <ai_network_create>:


AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800ec9c:	b580      	push	{r7, lr}
 800ec9e:	b084      	sub	sp, #16
 800eca0:	af02      	add	r7, sp, #8
 800eca2:	6078      	str	r0, [r7, #4]
 800eca4:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800eca6:	2300      	movs	r3, #0
 800eca8:	9301      	str	r3, [sp, #4]
 800ecaa:	2305      	movs	r3, #5
 800ecac:	9300      	str	r3, [sp, #0]
 800ecae:	2301      	movs	r3, #1
 800ecb0:	4a04      	ldr	r2, [pc, #16]	@ (800ecc4 <ai_network_create+0x28>)
 800ecb2:	6839      	ldr	r1, [r7, #0]
 800ecb4:	6878      	ldr	r0, [r7, #4]
 800ecb6:	f001 fc27 	bl	8010508 <ai_platform_network_create>
 800ecba:	4603      	mov	r3, r0
    network, network_config, 
    AI_CONTEXT_OBJ(&AI_NET_OBJ_INSTANCE),
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800ecbc:	4618      	mov	r0, r3
 800ecbe:	3708      	adds	r7, #8
 800ecc0:	46bd      	mov	sp, r7
 800ecc2:	bd80      	pop	{r7, pc}
 800ecc4:	20000760 	.word	0x20000760

0800ecc8 <ai_network_create_and_init>:


AI_API_ENTRY
ai_error ai_network_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 800ecc8:	b580      	push	{r7, lr}
 800ecca:	b094      	sub	sp, #80	@ 0x50
 800eccc:	af00      	add	r7, sp, #0
 800ecce:	60f8      	str	r0, [r7, #12]
 800ecd0:	60b9      	str	r1, [r7, #8]
 800ecd2:	607a      	str	r2, [r7, #4]
  ai_error err;
  ai_network_params params;

  err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 800ecd4:	2100      	movs	r1, #0
 800ecd6:	68f8      	ldr	r0, [r7, #12]
 800ecd8:	f7ff ffe0 	bl	800ec9c <ai_network_create>
 800ecdc:	4603      	mov	r3, r0
 800ecde:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (err.type != AI_ERROR_NONE) {
 800ece0:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d001      	beq.n	800ecec <ai_network_create_and_init+0x24>
    return err;
 800ece8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ecea:	e067      	b.n	800edbc <ai_network_create_and_init+0xf4>
  }
  
  if (ai_network_data_params_get(&params) != true) {
 800ecec:	f107 0310 	add.w	r3, r7, #16
 800ecf0:	4618      	mov	r0, r3
 800ecf2:	f000 f8d7 	bl	800eea4 <ai_network_data_params_get>
 800ecf6:	4603      	mov	r3, r0
 800ecf8:	f083 0301 	eor.w	r3, r3, #1
 800ecfc:	b2db      	uxtb	r3, r3
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d008      	beq.n	800ed14 <ai_network_create_and_init+0x4c>
    err = ai_network_get_error(*network);
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	4618      	mov	r0, r3
 800ed08:	f7ff ffbc 	bl	800ec84 <ai_network_get_error>
 800ed0c:	4603      	mov	r3, r0
 800ed0e:	64bb      	str	r3, [r7, #72]	@ 0x48
    return err;
 800ed10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ed12:	e053      	b.n	800edbc <ai_network_create_and_init+0xf4>
  }
#if defined(AI_NETWORK_DATA_ACTIVATIONS_COUNT)
  /* set the addresses of the activations buffers */
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 800ed14:	2300      	movs	r3, #0
 800ed16:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800ed1a:	e012      	b.n	800ed42 <ai_network_create_and_init+0x7a>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 800ed1c:	f8b7 104e 	ldrh.w	r1, [r7, #78]	@ 0x4e
 800ed20:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800ed24:	009b      	lsls	r3, r3, #2
 800ed26:	68ba      	ldr	r2, [r7, #8]
 800ed28:	4413      	add	r3, r2
 800ed2a:	681a      	ldr	r2, [r3, #0]
 800ed2c:	f107 0310 	add.w	r3, r7, #16
 800ed30:	330c      	adds	r3, #12
 800ed32:	4618      	mov	r0, r3
 800ed34:	f001 fa0e 	bl	8010154 <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 800ed38:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800ed3c:	3301      	adds	r3, #1
 800ed3e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800ed42:	68bb      	ldr	r3, [r7, #8]
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d004      	beq.n	800ed52 <ai_network_create_and_init+0x8a>
 800ed48:	8bfb      	ldrh	r3, [r7, #30]
 800ed4a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800ed4e:	429a      	cmp	r2, r3
 800ed50:	d3e4      	bcc.n	800ed1c <ai_network_create_and_init+0x54>
  }
#endif
#if defined(AI_NETWORK_DATA_WEIGHTS_COUNT)
  /* set the addresses of the weight buffers */
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 800ed52:	2300      	movs	r3, #0
 800ed54:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800ed58:	e012      	b.n	800ed80 <ai_network_create_and_init+0xb8>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 800ed5a:	f8b7 104c 	ldrh.w	r1, [r7, #76]	@ 0x4c
 800ed5e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800ed62:	009b      	lsls	r3, r3, #2
 800ed64:	687a      	ldr	r2, [r7, #4]
 800ed66:	4413      	add	r3, r2
 800ed68:	681a      	ldr	r2, [r3, #0]
 800ed6a:	f107 0310 	add.w	r3, r7, #16
 800ed6e:	3304      	adds	r3, #4
 800ed70:	4618      	mov	r0, r3
 800ed72:	f001 f9ef 	bl	8010154 <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 800ed76:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800ed7a:	3301      	adds	r3, #1
 800ed7c:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d004      	beq.n	800ed90 <ai_network_create_and_init+0xc8>
 800ed86:	8afb      	ldrh	r3, [r7, #22]
 800ed88:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 800ed8c:	429a      	cmp	r2, r3
 800ed8e:	d3e4      	bcc.n	800ed5a <ai_network_create_and_init+0x92>
  }
#endif
  if (ai_network_init(*network, &params) != true) {
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	f107 0210 	add.w	r2, r7, #16
 800ed98:	4611      	mov	r1, r2
 800ed9a:	4618      	mov	r0, r3
 800ed9c:	f000 f846 	bl	800ee2c <ai_network_init>
 800eda0:	4603      	mov	r3, r0
 800eda2:	f083 0301 	eor.w	r3, r3, #1
 800eda6:	b2db      	uxtb	r3, r3
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d006      	beq.n	800edba <ai_network_create_and_init+0xf2>
    err = ai_network_get_error(*network);
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	4618      	mov	r0, r3
 800edb2:	f7ff ff67 	bl	800ec84 <ai_network_get_error>
 800edb6:	4603      	mov	r3, r0
 800edb8:	64bb      	str	r3, [r7, #72]	@ 0x48
  }
  return err;
 800edba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800edbc:	4618      	mov	r0, r3
 800edbe:	3750      	adds	r7, #80	@ 0x50
 800edc0:	46bd      	mov	sp, r7
 800edc2:	bd80      	pop	{r7, pc}

0800edc4 <ai_network_inputs_get>:


AI_API_ENTRY
ai_buffer* ai_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 800edc4:	b580      	push	{r7, lr}
 800edc6:	b082      	sub	sp, #8
 800edc8:	af00      	add	r7, sp, #0
 800edca:	6078      	str	r0, [r7, #4]
 800edcc:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d104      	bne.n	800edde <ai_network_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800edd4:	4b06      	ldr	r3, [pc, #24]	@ (800edf0 <ai_network_inputs_get+0x2c>)
 800edd6:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	4a06      	ldr	r2, [pc, #24]	@ (800edf4 <ai_network_inputs_get+0x30>)
 800eddc:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 800edde:	6839      	ldr	r1, [r7, #0]
 800ede0:	6878      	ldr	r0, [r7, #4]
 800ede2:	f001 faa3 	bl	801032c <ai_platform_inputs_get>
 800ede6:	4603      	mov	r3, r0
}
 800ede8:	4618      	mov	r0, r3
 800edea:	3708      	adds	r7, #8
 800edec:	46bd      	mov	sp, r7
 800edee:	bd80      	pop	{r7, pc}
 800edf0:	20000760 	.word	0x20000760
 800edf4:	a1c00100 	.word	0xa1c00100

0800edf8 <ai_network_outputs_get>:


AI_API_ENTRY
ai_buffer* ai_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 800edf8:	b580      	push	{r7, lr}
 800edfa:	b082      	sub	sp, #8
 800edfc:	af00      	add	r7, sp, #0
 800edfe:	6078      	str	r0, [r7, #4]
 800ee00:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d104      	bne.n	800ee12 <ai_network_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800ee08:	4b06      	ldr	r3, [pc, #24]	@ (800ee24 <ai_network_outputs_get+0x2c>)
 800ee0a:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	4a06      	ldr	r2, [pc, #24]	@ (800ee28 <ai_network_outputs_get+0x30>)
 800ee10:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 800ee12:	6839      	ldr	r1, [r7, #0]
 800ee14:	6878      	ldr	r0, [r7, #4]
 800ee16:	f001 fb01 	bl	801041c <ai_platform_outputs_get>
 800ee1a:	4603      	mov	r3, r0
}
 800ee1c:	4618      	mov	r0, r3
 800ee1e:	3708      	adds	r7, #8
 800ee20:	46bd      	mov	sp, r7
 800ee22:	bd80      	pop	{r7, pc}
 800ee24:	20000760 	.word	0x20000760
 800ee28:	a1c00100 	.word	0xa1c00100

0800ee2c <ai_network_init>:


AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 800ee2c:	b580      	push	{r7, lr}
 800ee2e:	b084      	sub	sp, #16
 800ee30:	af00      	add	r7, sp, #0
 800ee32:	6078      	str	r0, [r7, #4]
 800ee34:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_OBJ(ai_platform_network_init(network, params));
 800ee36:	6839      	ldr	r1, [r7, #0]
 800ee38:	6878      	ldr	r0, [r7, #4]
 800ee3a:	f001 fba7 	bl	801058c <ai_platform_network_init>
 800ee3e:	60f8      	str	r0, [r7, #12]
  ai_bool ok = true;
 800ee40:	2301      	movs	r3, #1
 800ee42:	72fb      	strb	r3, [r7, #11]

  if (!net_ctx) return false;
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d101      	bne.n	800ee4e <ai_network_init+0x22>
 800ee4a:	2300      	movs	r3, #0
 800ee4c:	e026      	b.n	800ee9c <ai_network_init+0x70>
  ok &= network_configure_weights(net_ctx, params);
 800ee4e:	6839      	ldr	r1, [r7, #0]
 800ee50:	68f8      	ldr	r0, [r7, #12]
 800ee52:	f7ff fe81 	bl	800eb58 <network_configure_weights>
 800ee56:	4603      	mov	r3, r0
 800ee58:	461a      	mov	r2, r3
 800ee5a:	7afb      	ldrb	r3, [r7, #11]
 800ee5c:	4013      	ands	r3, r2
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	bf14      	ite	ne
 800ee62:	2301      	movne	r3, #1
 800ee64:	2300      	moveq	r3, #0
 800ee66:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, params);
 800ee68:	6839      	ldr	r1, [r7, #0]
 800ee6a:	68f8      	ldr	r0, [r7, #12]
 800ee6c:	f7ff fdf8 	bl	800ea60 <network_configure_activations>
 800ee70:	4603      	mov	r3, r0
 800ee72:	461a      	mov	r2, r3
 800ee74:	7afb      	ldrb	r3, [r7, #11]
 800ee76:	4013      	ands	r3, r2
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	bf14      	ite	ne
 800ee7c:	2301      	movne	r3, #1
 800ee7e:	2300      	moveq	r3, #0
 800ee80:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 800ee82:	6878      	ldr	r0, [r7, #4]
 800ee84:	f001 fc42 	bl	801070c <ai_platform_network_post_init>
 800ee88:	4603      	mov	r3, r0
 800ee8a:	461a      	mov	r2, r3
 800ee8c:	7afb      	ldrb	r3, [r7, #11]
 800ee8e:	4013      	ands	r3, r2
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	bf14      	ite	ne
 800ee94:	2301      	movne	r3, #1
 800ee96:	2300      	moveq	r3, #0
 800ee98:	72fb      	strb	r3, [r7, #11]

  return ok;
 800ee9a:	7afb      	ldrb	r3, [r7, #11]
}
 800ee9c:	4618      	mov	r0, r3
 800ee9e:	3710      	adds	r7, #16
 800eea0:	46bd      	mov	sp, r7
 800eea2:	bd80      	pop	{r7, pc}

0800eea4 <ai_network_data_params_get>:
 * @ingroup network_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
 800eea4:	b580      	push	{r7, lr}
 800eea6:	b086      	sub	sp, #24
 800eea8:	af00      	add	r7, sp, #0
 800eeaa:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d101      	bne.n	800eeb6 <ai_network_data_params_get+0x12>
 800eeb2:	2300      	movs	r3, #0
 800eeb4:	e016      	b.n	800eee4 <ai_network_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 800eeb6:	4a0d      	ldr	r2, [pc, #52]	@ (800eeec <ai_network_data_params_get+0x48>)
 800eeb8:	f107 0310 	add.w	r3, r7, #16
 800eebc:	e892 0003 	ldmia.w	r2, {r0, r1}
 800eec0:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 800eec4:	4a0a      	ldr	r2, [pc, #40]	@ (800eef0 <ai_network_data_params_get+0x4c>)
 800eec6:	f107 0308 	add.w	r3, r7, #8
 800eeca:	e892 0003 	ldmia.w	r2, {r0, r1}
 800eece:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 800eed2:	f107 0210 	add.w	r2, r7, #16
 800eed6:	f107 0308 	add.w	r3, r7, #8
 800eeda:	4619      	mov	r1, r3
 800eedc:	6878      	ldr	r0, [r7, #4]
 800eede:	f001 f9f9 	bl	80102d4 <ai_platform_bind_network_params>
 800eee2:	4603      	mov	r3, r0
}
 800eee4:	4618      	mov	r0, r3
 800eee6:	3718      	adds	r7, #24
 800eee8:	46bd      	mov	sp, r7
 800eeea:	bd80      	pop	{r7, pc}
 800eeec:	08016d54 	.word	0x08016d54
 800eef0:	08016d5c 	.word	0x08016d5c

0800eef4 <arm_rfft_fast_init_f32>:
 800eef4:	084b      	lsrs	r3, r1, #1
 800eef6:	2b80      	cmp	r3, #128	@ 0x80
 800eef8:	b430      	push	{r4, r5}
 800eefa:	8201      	strh	r1, [r0, #16]
 800eefc:	8003      	strh	r3, [r0, #0]
 800eefe:	d070      	beq.n	800efe2 <arm_rfft_fast_init_f32+0xee>
 800ef00:	d916      	bls.n	800ef30 <arm_rfft_fast_init_f32+0x3c>
 800ef02:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ef06:	d05f      	beq.n	800efc8 <arm_rfft_fast_init_f32+0xd4>
 800ef08:	d936      	bls.n	800ef78 <arm_rfft_fast_init_f32+0x84>
 800ef0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ef0e:	d026      	beq.n	800ef5e <arm_rfft_fast_init_f32+0x6a>
 800ef10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ef14:	d112      	bne.n	800ef3c <arm_rfft_fast_init_f32+0x48>
 800ef16:	f44f 656e 	mov.w	r5, #3808	@ 0xee0
 800ef1a:	4c38      	ldr	r4, [pc, #224]	@ (800effc <arm_rfft_fast_init_f32+0x108>)
 800ef1c:	4938      	ldr	r1, [pc, #224]	@ (800f000 <arm_rfft_fast_init_f32+0x10c>)
 800ef1e:	2300      	movs	r3, #0
 800ef20:	4a38      	ldr	r2, [pc, #224]	@ (800f004 <arm_rfft_fast_init_f32+0x110>)
 800ef22:	8185      	strh	r5, [r0, #12]
 800ef24:	6084      	str	r4, [r0, #8]
 800ef26:	6041      	str	r1, [r0, #4]
 800ef28:	6142      	str	r2, [r0, #20]
 800ef2a:	4618      	mov	r0, r3
 800ef2c:	bc30      	pop	{r4, r5}
 800ef2e:	4770      	bx	lr
 800ef30:	2b20      	cmp	r3, #32
 800ef32:	d031      	beq.n	800ef98 <arm_rfft_fast_init_f32+0xa4>
 800ef34:	2b40      	cmp	r3, #64	@ 0x40
 800ef36:	d006      	beq.n	800ef46 <arm_rfft_fast_init_f32+0x52>
 800ef38:	2b10      	cmp	r3, #16
 800ef3a:	d039      	beq.n	800efb0 <arm_rfft_fast_init_f32+0xbc>
 800ef3c:	f04f 33ff 	mov.w	r3, #4294967295
 800ef40:	bc30      	pop	{r4, r5}
 800ef42:	4618      	mov	r0, r3
 800ef44:	4770      	bx	lr
 800ef46:	2538      	movs	r5, #56	@ 0x38
 800ef48:	4c2f      	ldr	r4, [pc, #188]	@ (800f008 <arm_rfft_fast_init_f32+0x114>)
 800ef4a:	4930      	ldr	r1, [pc, #192]	@ (800f00c <arm_rfft_fast_init_f32+0x118>)
 800ef4c:	2300      	movs	r3, #0
 800ef4e:	4a30      	ldr	r2, [pc, #192]	@ (800f010 <arm_rfft_fast_init_f32+0x11c>)
 800ef50:	8185      	strh	r5, [r0, #12]
 800ef52:	6084      	str	r4, [r0, #8]
 800ef54:	6041      	str	r1, [r0, #4]
 800ef56:	6142      	str	r2, [r0, #20]
 800ef58:	4618      	mov	r0, r3
 800ef5a:	bc30      	pop	{r4, r5}
 800ef5c:	4770      	bx	lr
 800ef5e:	f44f 65e1 	mov.w	r5, #1800	@ 0x708
 800ef62:	4c2c      	ldr	r4, [pc, #176]	@ (800f014 <arm_rfft_fast_init_f32+0x120>)
 800ef64:	492c      	ldr	r1, [pc, #176]	@ (800f018 <arm_rfft_fast_init_f32+0x124>)
 800ef66:	2300      	movs	r3, #0
 800ef68:	4a2c      	ldr	r2, [pc, #176]	@ (800f01c <arm_rfft_fast_init_f32+0x128>)
 800ef6a:	8185      	strh	r5, [r0, #12]
 800ef6c:	6084      	str	r4, [r0, #8]
 800ef6e:	6041      	str	r1, [r0, #4]
 800ef70:	6142      	str	r2, [r0, #20]
 800ef72:	4618      	mov	r0, r3
 800ef74:	bc30      	pop	{r4, r5}
 800ef76:	4770      	bx	lr
 800ef78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ef7c:	d1de      	bne.n	800ef3c <arm_rfft_fast_init_f32+0x48>
 800ef7e:	f44f 75dc 	mov.w	r5, #440	@ 0x1b8
 800ef82:	4c27      	ldr	r4, [pc, #156]	@ (800f020 <arm_rfft_fast_init_f32+0x12c>)
 800ef84:	4927      	ldr	r1, [pc, #156]	@ (800f024 <arm_rfft_fast_init_f32+0x130>)
 800ef86:	2300      	movs	r3, #0
 800ef88:	4a27      	ldr	r2, [pc, #156]	@ (800f028 <arm_rfft_fast_init_f32+0x134>)
 800ef8a:	8185      	strh	r5, [r0, #12]
 800ef8c:	6084      	str	r4, [r0, #8]
 800ef8e:	6041      	str	r1, [r0, #4]
 800ef90:	6142      	str	r2, [r0, #20]
 800ef92:	4618      	mov	r0, r3
 800ef94:	bc30      	pop	{r4, r5}
 800ef96:	4770      	bx	lr
 800ef98:	2530      	movs	r5, #48	@ 0x30
 800ef9a:	4c24      	ldr	r4, [pc, #144]	@ (800f02c <arm_rfft_fast_init_f32+0x138>)
 800ef9c:	4924      	ldr	r1, [pc, #144]	@ (800f030 <arm_rfft_fast_init_f32+0x13c>)
 800ef9e:	2300      	movs	r3, #0
 800efa0:	4a24      	ldr	r2, [pc, #144]	@ (800f034 <arm_rfft_fast_init_f32+0x140>)
 800efa2:	8185      	strh	r5, [r0, #12]
 800efa4:	6084      	str	r4, [r0, #8]
 800efa6:	6041      	str	r1, [r0, #4]
 800efa8:	6142      	str	r2, [r0, #20]
 800efaa:	4618      	mov	r0, r3
 800efac:	bc30      	pop	{r4, r5}
 800efae:	4770      	bx	lr
 800efb0:	2514      	movs	r5, #20
 800efb2:	4c21      	ldr	r4, [pc, #132]	@ (800f038 <arm_rfft_fast_init_f32+0x144>)
 800efb4:	4921      	ldr	r1, [pc, #132]	@ (800f03c <arm_rfft_fast_init_f32+0x148>)
 800efb6:	2300      	movs	r3, #0
 800efb8:	4a21      	ldr	r2, [pc, #132]	@ (800f040 <arm_rfft_fast_init_f32+0x14c>)
 800efba:	8185      	strh	r5, [r0, #12]
 800efbc:	6084      	str	r4, [r0, #8]
 800efbe:	6041      	str	r1, [r0, #4]
 800efc0:	6142      	str	r2, [r0, #20]
 800efc2:	4618      	mov	r0, r3
 800efc4:	bc30      	pop	{r4, r5}
 800efc6:	4770      	bx	lr
 800efc8:	f44f 75e0 	mov.w	r5, #448	@ 0x1c0
 800efcc:	4c1d      	ldr	r4, [pc, #116]	@ (800f044 <arm_rfft_fast_init_f32+0x150>)
 800efce:	491e      	ldr	r1, [pc, #120]	@ (800f048 <arm_rfft_fast_init_f32+0x154>)
 800efd0:	2300      	movs	r3, #0
 800efd2:	4a1e      	ldr	r2, [pc, #120]	@ (800f04c <arm_rfft_fast_init_f32+0x158>)
 800efd4:	8185      	strh	r5, [r0, #12]
 800efd6:	6084      	str	r4, [r0, #8]
 800efd8:	6041      	str	r1, [r0, #4]
 800efda:	6142      	str	r2, [r0, #20]
 800efdc:	4618      	mov	r0, r3
 800efde:	bc30      	pop	{r4, r5}
 800efe0:	4770      	bx	lr
 800efe2:	25d0      	movs	r5, #208	@ 0xd0
 800efe4:	4c1a      	ldr	r4, [pc, #104]	@ (800f050 <arm_rfft_fast_init_f32+0x15c>)
 800efe6:	491b      	ldr	r1, [pc, #108]	@ (800f054 <arm_rfft_fast_init_f32+0x160>)
 800efe8:	2300      	movs	r3, #0
 800efea:	4a1b      	ldr	r2, [pc, #108]	@ (800f058 <arm_rfft_fast_init_f32+0x164>)
 800efec:	8185      	strh	r5, [r0, #12]
 800efee:	6084      	str	r4, [r0, #8]
 800eff0:	6041      	str	r1, [r0, #4]
 800eff2:	6142      	str	r2, [r0, #20]
 800eff4:	4618      	mov	r0, r3
 800eff6:	bc30      	pop	{r4, r5}
 800eff8:	4770      	bx	lr
 800effa:	bf00      	nop
 800effc:	080cf620 	.word	0x080cf620
 800f000:	080c0818 	.word	0x080c0818
 800f004:	080c6988 	.word	0x080c6988
 800f008:	080c4918 	.word	0x080c4918
 800f00c:	080d13e0 	.word	0x080d13e0
 800f010:	080d38d0 	.word	0x080d38d0
 800f014:	080cd308 	.word	0x080cd308
 800f018:	080cb208 	.word	0x080cb208
 800f01c:	080c4988 	.word	0x080c4988
 800f020:	080d3560 	.word	0x080d3560
 800f024:	080ca988 	.word	0x080ca988
 800f028:	080d15e0 	.word	0x080d15e0
 800f02c:	080ce1c0 	.word	0x080ce1c0
 800f030:	080cd208 	.word	0x080cd208
 800f034:	080c4818 	.word	0x080c4818
 800f038:	080ce118 	.word	0x080ce118
 800f03c:	080cb188 	.word	0x080cb188
 800f040:	080ce140 	.word	0x080ce140
 800f044:	080d1de0 	.word	0x080d1de0
 800f048:	080ce620 	.word	0x080ce620
 800f04c:	080d2160 	.word	0x080d2160
 800f050:	080d3ad0 	.word	0x080d3ad0
 800f054:	080ce220 	.word	0x080ce220
 800f058:	080d3160 	.word	0x080d3160

0800f05c <arm_rfft_fast_f32>:
 800f05c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f060:	8a05      	ldrh	r5, [r0, #16]
 800f062:	4606      	mov	r6, r0
 800f064:	4617      	mov	r7, r2
 800f066:	460c      	mov	r4, r1
 800f068:	086d      	lsrs	r5, r5, #1
 800f06a:	8005      	strh	r5, [r0, #0]
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d15e      	bne.n	800f12e <arm_rfft_fast_f32+0xd2>
 800f070:	461a      	mov	r2, r3
 800f072:	2301      	movs	r3, #1
 800f074:	f000 fbde 	bl	800f834 <arm_cfft_f32>
 800f078:	edd4 7a00 	vldr	s15, [r4]
 800f07c:	ed94 7a01 	vldr	s14, [r4, #4]
 800f080:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800f084:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800f088:	8832      	ldrh	r2, [r6, #0]
 800f08a:	ee37 7a07 	vadd.f32	s14, s14, s14
 800f08e:	6975      	ldr	r5, [r6, #20]
 800f090:	3a01      	subs	r2, #1
 800f092:	eeb0 3a46 	vmov.f32	s6, s12
 800f096:	3510      	adds	r5, #16
 800f098:	f107 0610 	add.w	r6, r7, #16
 800f09c:	ee77 6a87 	vadd.f32	s13, s15, s14
 800f0a0:	eb04 00c2 	add.w	r0, r4, r2, lsl #3
 800f0a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f0a8:	f104 0310 	add.w	r3, r4, #16
 800f0ac:	3808      	subs	r0, #8
 800f0ae:	ee26 7a86 	vmul.f32	s14, s13, s12
 800f0b2:	ee67 7a86 	vmul.f32	s15, s15, s12
 800f0b6:	ed87 7a00 	vstr	s14, [r7]
 800f0ba:	edc7 7a01 	vstr	s15, [r7, #4]
 800f0be:	ed90 7a02 	vldr	s14, [r0, #8]
 800f0c2:	3a01      	subs	r2, #1
 800f0c4:	ed53 6a02 	vldr	s13, [r3, #-8]
 800f0c8:	f1a0 0008 	sub.w	r0, r0, #8
 800f0cc:	ed15 6a02 	vldr	s12, [r5, #-8]
 800f0d0:	f103 0308 	add.w	r3, r3, #8
 800f0d4:	ee77 7a66 	vsub.f32	s15, s14, s13
 800f0d8:	edd0 3a05 	vldr	s7, [r0, #20]
 800f0dc:	ed13 5a03 	vldr	s10, [r3, #-12]
 800f0e0:	ee77 4a26 	vadd.f32	s9, s14, s13
 800f0e4:	ed55 5a01 	vldr	s11, [r5, #-4]
 800f0e8:	f106 0608 	add.w	r6, r6, #8
 800f0ec:	ee66 6a27 	vmul.f32	s13, s12, s15
 800f0f0:	f105 0508 	add.w	r5, r5, #8
 800f0f4:	ee33 4a85 	vadd.f32	s8, s7, s10
 800f0f8:	ee25 7aa7 	vmul.f32	s14, s11, s15
 800f0fc:	ee35 5a63 	vsub.f32	s10, s10, s7
 800f100:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800f104:	ee26 6a04 	vmul.f32	s12, s12, s8
 800f108:	ee77 7a05 	vadd.f32	s15, s14, s10
 800f10c:	ee65 5a84 	vmul.f32	s11, s11, s8
 800f110:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800f114:	ee36 7aa5 	vadd.f32	s14, s13, s11
 800f118:	ee67 7a83 	vmul.f32	s15, s15, s6
 800f11c:	ee27 7a03 	vmul.f32	s14, s14, s6
 800f120:	ed46 7a03 	vstr	s15, [r6, #-12]
 800f124:	ed06 7a04 	vstr	s14, [r6, #-16]
 800f128:	d1c9      	bne.n	800f0be <arm_rfft_fast_f32+0x62>
 800f12a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f12e:	edd1 7a00 	vldr	s15, [r1]
 800f132:	eef6 3a00 	vmov.f32	s7, #96	@ 0x3f000000  0.5
 800f136:	edd1 6a01 	vldr	s13, [r1, #4]
 800f13a:	1e68      	subs	r0, r5, #1
 800f13c:	6975      	ldr	r5, [r6, #20]
 800f13e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800f142:	00c1      	lsls	r1, r0, #3
 800f144:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f148:	ee27 7a23 	vmul.f32	s14, s14, s7
 800f14c:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800f150:	ed82 7a00 	vstr	s14, [r2]
 800f154:	edc2 7a01 	vstr	s15, [r2, #4]
 800f158:	b3e0      	cbz	r0, 800f1d4 <arm_rfft_fast_f32+0x178>
 800f15a:	3908      	subs	r1, #8
 800f15c:	f104 0210 	add.w	r2, r4, #16
 800f160:	3510      	adds	r5, #16
 800f162:	440c      	add	r4, r1
 800f164:	f107 0110 	add.w	r1, r7, #16
 800f168:	ed94 7a02 	vldr	s14, [r4, #8]
 800f16c:	3801      	subs	r0, #1
 800f16e:	ed52 6a02 	vldr	s13, [r2, #-8]
 800f172:	f1a4 0408 	sub.w	r4, r4, #8
 800f176:	ed15 6a02 	vldr	s12, [r5, #-8]
 800f17a:	f102 0208 	add.w	r2, r2, #8
 800f17e:	ee76 7ac7 	vsub.f32	s15, s13, s14
 800f182:	ed94 4a05 	vldr	s8, [r4, #20]
 800f186:	ed12 5a03 	vldr	s10, [r2, #-12]
 800f18a:	ee77 6a26 	vadd.f32	s13, s14, s13
 800f18e:	ed55 5a01 	vldr	s11, [r5, #-4]
 800f192:	f101 0108 	add.w	r1, r1, #8
 800f196:	ee26 3a27 	vmul.f32	s6, s12, s15
 800f19a:	f105 0508 	add.w	r5, r5, #8
 800f19e:	ee74 4a05 	vadd.f32	s9, s8, s10
 800f1a2:	ee25 7aa7 	vmul.f32	s14, s11, s15
 800f1a6:	ee35 5a44 	vsub.f32	s10, s10, s8
 800f1aa:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800f1ae:	ee26 6a24 	vmul.f32	s12, s12, s9
 800f1b2:	ee77 7a05 	vadd.f32	s15, s14, s10
 800f1b6:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800f1ba:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800f1be:	ee36 7ae5 	vsub.f32	s14, s13, s11
 800f1c2:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800f1c6:	ee27 7a23 	vmul.f32	s14, s14, s7
 800f1ca:	ed41 7a03 	vstr	s15, [r1, #-12]
 800f1ce:	ed01 7a04 	vstr	s14, [r1, #-16]
 800f1d2:	d1c9      	bne.n	800f168 <arm_rfft_fast_f32+0x10c>
 800f1d4:	461a      	mov	r2, r3
 800f1d6:	4639      	mov	r1, r7
 800f1d8:	4630      	mov	r0, r6
 800f1da:	2301      	movs	r3, #1
 800f1dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f1e0:	f000 bb28 	b.w	800f834 <arm_cfft_f32>

0800f1e4 <arm_cfft_radix8by2_f32>:
 800f1e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1e8:	4607      	mov	r7, r0
 800f1ea:	4608      	mov	r0, r1
 800f1ec:	ed2d 8b06 	vpush	{d8-d10}
 800f1f0:	f8b7 e000 	ldrh.w	lr, [r7]
 800f1f4:	687a      	ldr	r2, [r7, #4]
 800f1f6:	ea4f 015e 	mov.w	r1, lr, lsr #1
 800f1fa:	eb00 088e 	add.w	r8, r0, lr, lsl #2
 800f1fe:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 800f202:	f000 80b0 	beq.w	800f366 <arm_cfft_radix8by2_f32+0x182>
 800f206:	008b      	lsls	r3, r1, #2
 800f208:	3210      	adds	r2, #16
 800f20a:	f100 0610 	add.w	r6, r0, #16
 800f20e:	f108 0510 	add.w	r5, r8, #16
 800f212:	3310      	adds	r3, #16
 800f214:	18c4      	adds	r4, r0, r3
 800f216:	4443      	add	r3, r8
 800f218:	ed55 6a04 	vldr	s13, [r5, #-16]
 800f21c:	f1be 0e01 	subs.w	lr, lr, #1
 800f220:	ed56 4a04 	vldr	s9, [r6, #-16]
 800f224:	f104 0410 	add.w	r4, r4, #16
 800f228:	ed15 7a03 	vldr	s14, [r5, #-12]
 800f22c:	f106 0610 	add.w	r6, r6, #16
 800f230:	ee74 9aa6 	vadd.f32	s19, s9, s13
 800f234:	ed55 7a02 	vldr	s15, [r5, #-8]
 800f238:	ed55 2a01 	vldr	s5, [r5, #-4]
 800f23c:	ee74 4ae6 	vsub.f32	s9, s9, s13
 800f240:	ed53 0a04 	vldr	s1, [r3, #-16]
 800f244:	f102 0210 	add.w	r2, r2, #16
 800f248:	ed13 5a03 	vldr	s10, [r3, #-12]
 800f24c:	f105 0510 	add.w	r5, r5, #16
 800f250:	ed13 3a02 	vldr	s6, [r3, #-8]
 800f254:	f103 0310 	add.w	r3, r3, #16
 800f258:	ed54 3a06 	vldr	s7, [r4, #-24]	@ 0xffffffe8
 800f25c:	ed14 4a05 	vldr	s8, [r4, #-20]	@ 0xffffffec
 800f260:	ed13 6a05 	vldr	s12, [r3, #-20]	@ 0xffffffec
 800f264:	ee33 8a83 	vadd.f32	s16, s7, s6
 800f268:	ed56 6a07 	vldr	s13, [r6, #-28]	@ 0xffffffe4
 800f26c:	ed16 2a05 	vldr	s4, [r6, #-20]	@ 0xffffffec
 800f270:	ee34 0a06 	vadd.f32	s0, s8, s12
 800f274:	ed54 5a08 	vldr	s11, [r4, #-32]	@ 0xffffffe0
 800f278:	ee76 aa87 	vadd.f32	s21, s13, s14
 800f27c:	ed14 1a07 	vldr	s2, [r4, #-28]	@ 0xffffffe4
 800f280:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800f284:	ed56 1a06 	vldr	s3, [r6, #-24]	@ 0xffffffe8
 800f288:	ee35 9aa0 	vadd.f32	s18, s11, s1
 800f28c:	ed46 9a08 	vstr	s19, [r6, #-32]	@ 0xffffffe0
 800f290:	ee71 8a05 	vadd.f32	s17, s2, s10
 800f294:	ee31 aaa7 	vadd.f32	s20, s3, s15
 800f298:	ed46 aa07 	vstr	s21, [r6, #-28]	@ 0xffffffe4
 800f29c:	ee72 9a22 	vadd.f32	s19, s4, s5
 800f2a0:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800f2a4:	ee35 5a41 	vsub.f32	s10, s10, s2
 800f2a8:	ed06 aa06 	vstr	s20, [r6, #-24]	@ 0xffffffe8
 800f2ac:	ed46 9a05 	vstr	s19, [r6, #-20]	@ 0xffffffec
 800f2b0:	ee36 6a44 	vsub.f32	s12, s12, s8
 800f2b4:	ed04 9a08 	vstr	s18, [r4, #-32]	@ 0xffffffe0
 800f2b8:	ee71 1ae7 	vsub.f32	s3, s3, s15
 800f2bc:	ed44 8a07 	vstr	s17, [r4, #-28]	@ 0xffffffe4
 800f2c0:	ee72 7a62 	vsub.f32	s15, s4, s5
 800f2c4:	ed04 8a06 	vstr	s16, [r4, #-24]	@ 0xffffffe8
 800f2c8:	ee73 2a63 	vsub.f32	s5, s6, s7
 800f2cc:	ed04 0a05 	vstr	s0, [r4, #-20]	@ 0xffffffec
 800f2d0:	ed12 4a08 	vldr	s8, [r2, #-32]	@ 0xffffffe0
 800f2d4:	ed52 6a07 	vldr	s13, [r2, #-28]	@ 0xffffffe4
 800f2d8:	ee24 3a84 	vmul.f32	s6, s9, s8
 800f2dc:	ee27 2a26 	vmul.f32	s4, s14, s13
 800f2e0:	ee64 4aa6 	vmul.f32	s9, s9, s13
 800f2e4:	ee65 3aa6 	vmul.f32	s7, s11, s13
 800f2e8:	ee27 7a04 	vmul.f32	s14, s14, s8
 800f2ec:	ee65 5a84 	vmul.f32	s11, s11, s8
 800f2f0:	ee65 6a26 	vmul.f32	s13, s10, s13
 800f2f4:	ee25 5a04 	vmul.f32	s10, s10, s8
 800f2f8:	ee37 7a64 	vsub.f32	s14, s14, s9
 800f2fc:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800f300:	ee33 4a02 	vadd.f32	s8, s6, s4
 800f304:	ee33 5ac5 	vsub.f32	s10, s7, s10
 800f308:	ed05 7a07 	vstr	s14, [r5, #-28]	@ 0xffffffe4
 800f30c:	ed05 4a08 	vstr	s8, [r5, #-32]	@ 0xffffffe0
 800f310:	ed03 5a08 	vstr	s10, [r3, #-32]	@ 0xffffffe0
 800f314:	ed43 6a07 	vstr	s13, [r3, #-28]	@ 0xffffffe4
 800f318:	ed52 6a06 	vldr	s13, [r2, #-24]	@ 0xffffffe8
 800f31c:	ed12 7a05 	vldr	s14, [r2, #-20]	@ 0xffffffec
 800f320:	ee61 4aa6 	vmul.f32	s9, s3, s13
 800f324:	ee27 4a87 	vmul.f32	s8, s15, s14
 800f328:	ee61 5a87 	vmul.f32	s11, s3, s14
 800f32c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f330:	ee22 5a87 	vmul.f32	s10, s5, s14
 800f334:	ee26 7a07 	vmul.f32	s14, s12, s14
 800f338:	ee26 6a26 	vmul.f32	s12, s12, s13
 800f33c:	ee62 6aa6 	vmul.f32	s13, s5, s13
 800f340:	ee74 4a84 	vadd.f32	s9, s9, s8
 800f344:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800f348:	ee35 6a46 	vsub.f32	s12, s10, s12
 800f34c:	ee37 7a26 	vadd.f32	s14, s14, s13
 800f350:	ed45 4a06 	vstr	s9, [r5, #-24]	@ 0xffffffe8
 800f354:	ed45 7a05 	vstr	s15, [r5, #-20]	@ 0xffffffec
 800f358:	ed03 6a06 	vstr	s12, [r3, #-24]	@ 0xffffffe8
 800f35c:	ed03 7a05 	vstr	s14, [r3, #-20]	@ 0xffffffec
 800f360:	f47f af5a 	bne.w	800f218 <arm_cfft_radix8by2_f32+0x34>
 800f364:	687a      	ldr	r2, [r7, #4]
 800f366:	b28c      	uxth	r4, r1
 800f368:	2302      	movs	r3, #2
 800f36a:	4621      	mov	r1, r4
 800f36c:	f000 fbc2 	bl	800faf4 <arm_radix8_butterfly_f32>
 800f370:	4621      	mov	r1, r4
 800f372:	687a      	ldr	r2, [r7, #4]
 800f374:	4640      	mov	r0, r8
 800f376:	2302      	movs	r3, #2
 800f378:	ecbd 8b06 	vpop	{d8-d10}
 800f37c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f380:	f000 bbb8 	b.w	800faf4 <arm_radix8_butterfly_f32>

0800f384 <arm_cfft_radix8by4_f32>:
 800f384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f388:	ed2d 8b06 	vpush	{d8-d10}
 800f38c:	8804      	ldrh	r4, [r0, #0]
 800f38e:	b08f      	sub	sp, #60	@ 0x3c
 800f390:	ed91 6a00 	vldr	s12, [r1]
 800f394:	460a      	mov	r2, r1
 800f396:	0864      	lsrs	r4, r4, #1
 800f398:	ed91 7a01 	vldr	s14, [r1, #4]
 800f39c:	9101      	str	r1, [sp, #4]
 800f39e:	00a3      	lsls	r3, r4, #2
 800f3a0:	6841      	ldr	r1, [r0, #4]
 800f3a2:	0864      	lsrs	r4, r4, #1
 800f3a4:	900c      	str	r0, [sp, #48]	@ 0x30
 800f3a6:	9205      	str	r2, [sp, #20]
 800f3a8:	f101 0610 	add.w	r6, r1, #16
 800f3ac:	4625      	mov	r5, r4
 800f3ae:	940b      	str	r4, [sp, #44]	@ 0x2c
 800f3b0:	f101 0408 	add.w	r4, r1, #8
 800f3b4:	9602      	str	r6, [sp, #8]
 800f3b6:	9407      	str	r4, [sp, #28]
 800f3b8:	18d4      	adds	r4, r2, r3
 800f3ba:	1eaa      	subs	r2, r5, #2
 800f3bc:	f101 0518 	add.w	r5, r1, #24
 800f3c0:	18e0      	adds	r0, r4, r3
 800f3c2:	edd4 4a00 	vldr	s9, [r4]
 800f3c6:	ed94 4a01 	vldr	s8, [r4, #4]
 800f3ca:	46a6      	mov	lr, r4
 800f3cc:	edd0 6a00 	vldr	s13, [r0]
 800f3d0:	18c7      	adds	r7, r0, r3
 800f3d2:	edd0 7a01 	vldr	s15, [r0, #4]
 800f3d6:	46a0      	mov	r8, r4
 800f3d8:	ee76 5a26 	vadd.f32	s11, s12, s13
 800f3dc:	ed97 5a00 	vldr	s10, [r7]
 800f3e0:	ee76 6a66 	vsub.f32	s13, s12, s13
 800f3e4:	4604      	mov	r4, r0
 800f3e6:	9506      	str	r5, [sp, #24]
 800f3e8:	4605      	mov	r5, r0
 800f3ea:	ee75 2aa4 	vadd.f32	s5, s11, s9
 800f3ee:	900a      	str	r0, [sp, #40]	@ 0x28
 800f3f0:	9801      	ldr	r0, [sp, #4]
 800f3f2:	ee37 6a27 	vadd.f32	s12, s14, s15
 800f3f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f3fa:	ed97 3a01 	vldr	s6, [r7, #4]
 800f3fe:	ee72 2a85 	vadd.f32	s5, s5, s10
 800f402:	46bc      	mov	ip, r7
 800f404:	ee76 3a84 	vadd.f32	s7, s13, s8
 800f408:	9704      	str	r7, [sp, #16]
 800f40a:	ee36 7a44 	vsub.f32	s14, s12, s8
 800f40e:	f8cd e00c 	str.w	lr, [sp, #12]
 800f412:	ee12 9a90 	vmov	r9, s5
 800f416:	ee75 5ae4 	vsub.f32	s11, s11, s9
 800f41a:	ee76 6ac4 	vsub.f32	s13, s13, s8
 800f41e:	1f3e      	subs	r6, r7, #4
 800f420:	f840 9b08 	str.w	r9, [r0], #8
 800f424:	ee37 4ae4 	vsub.f32	s8, s15, s9
 800f428:	edde 2a01 	vldr	s5, [lr, #4]
 800f42c:	ee77 7aa4 	vadd.f32	s15, s15, s9
 800f430:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800f434:	eddc 4a01 	vldr	s9, [ip, #4]
 800f438:	ee36 6a22 	vadd.f32	s12, s12, s5
 800f43c:	9001      	str	r0, [sp, #4]
 800f43e:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800f442:	9805      	ldr	r0, [sp, #20]
 800f444:	ee13 9a90 	vmov	r9, s7
 800f448:	ee37 7a43 	vsub.f32	s14, s14, s6
 800f44c:	ee36 6a24 	vadd.f32	s12, s12, s9
 800f450:	f1ae 0704 	sub.w	r7, lr, #4
 800f454:	ee74 4a05 	vadd.f32	s9, s8, s10
 800f458:	ee76 6a83 	vadd.f32	s13, s13, s6
 800f45c:	ed80 6a01 	vstr	s12, [r0, #4]
 800f460:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800f464:	f848 9b08 	str.w	r9, [r8], #8
 800f468:	edce 4a01 	vstr	s9, [lr, #4]
 800f46c:	ee15 ea90 	vmov	lr, s11
 800f470:	f844 eb08 	str.w	lr, [r4], #8
 800f474:	ee16 ea90 	vmov	lr, s13
 800f478:	9408      	str	r4, [sp, #32]
 800f47a:	462c      	mov	r4, r5
 800f47c:	ed85 7a01 	vstr	s14, [r5, #4]
 800f480:	9d04      	ldr	r5, [sp, #16]
 800f482:	f84c eb08 	str.w	lr, [ip], #8
 800f486:	edc5 7a01 	vstr	s15, [r5, #4]
 800f48a:	0855      	lsrs	r5, r2, #1
 800f48c:	9509      	str	r5, [sp, #36]	@ 0x24
 800f48e:	f000 8130 	beq.w	800f6f2 <arm_cfft_radix8by4_f32+0x36e>
 800f492:	9805      	ldr	r0, [sp, #20]
 800f494:	3b08      	subs	r3, #8
 800f496:	46ab      	mov	fp, r5
 800f498:	f1a4 020c 	sub.w	r2, r4, #12
 800f49c:	f100 0510 	add.w	r5, r0, #16
 800f4a0:	f101 0920 	add.w	r9, r1, #32
 800f4a4:	f101 0e30 	add.w	lr, r1, #48	@ 0x30
 800f4a8:	f8dd a008 	ldr.w	sl, [sp, #8]
 800f4ac:	4433      	add	r3, r6
 800f4ae:	3410      	adds	r4, #16
 800f4b0:	4660      	mov	r0, ip
 800f4b2:	4641      	mov	r1, r8
 800f4b4:	f8cd c034 	str.w	ip, [sp, #52]	@ 0x34
 800f4b8:	ed54 6a02 	vldr	s13, [r4, #-8]
 800f4bc:	f1bb 0b01 	subs.w	fp, fp, #1
 800f4c0:	ed55 5a02 	vldr	s11, [r5, #-8]
 800f4c4:	f10a 0a08 	add.w	sl, sl, #8
 800f4c8:	edd1 7a00 	vldr	s15, [r1]
 800f4cc:	f105 0508 	add.w	r5, r5, #8
 800f4d0:	ee75 3aa6 	vadd.f32	s7, s11, s13
 800f4d4:	edd0 2a00 	vldr	s5, [r0]
 800f4d8:	ed14 7a01 	vldr	s14, [r4, #-4]
 800f4dc:	ee75 5ae6 	vsub.f32	s11, s11, s13
 800f4e0:	ed55 6a03 	vldr	s13, [r5, #-12]
 800f4e4:	f1a2 0208 	sub.w	r2, r2, #8
 800f4e8:	ee73 4aa7 	vadd.f32	s9, s7, s15
 800f4ec:	ed90 2a01 	vldr	s4, [r0, #4]
 800f4f0:	ee36 5a87 	vadd.f32	s10, s13, s14
 800f4f4:	ed91 6a01 	vldr	s12, [r1, #4]
 800f4f8:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800f4fc:	f109 0910 	add.w	r9, r9, #16
 800f500:	ee74 6aa2 	vadd.f32	s13, s9, s5
 800f504:	f104 0408 	add.w	r4, r4, #8
 800f508:	ee73 3ae7 	vsub.f32	s7, s7, s15
 800f50c:	f10e 0e18 	add.w	lr, lr, #24
 800f510:	ee37 3a67 	vsub.f32	s6, s14, s15
 800f514:	f1a3 0308 	sub.w	r3, r3, #8
 800f518:	ed45 6a04 	vstr	s13, [r5, #-16]
 800f51c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f520:	edd1 6a01 	vldr	s13, [r1, #4]
 800f524:	ee75 1a86 	vadd.f32	s3, s11, s12
 800f528:	edd0 4a01 	vldr	s9, [r0, #4]
 800f52c:	ee33 3a22 	vadd.f32	s6, s6, s5
 800f530:	ee75 6a26 	vadd.f32	s13, s10, s13
 800f534:	ee35 5a46 	vsub.f32	s10, s10, s12
 800f538:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800f53c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800f540:	ee71 1ac2 	vsub.f32	s3, s3, s4
 800f544:	ee35 5a42 	vsub.f32	s10, s10, s4
 800f548:	ed45 6a03 	vstr	s13, [r5, #-12]
 800f54c:	ee36 2a02 	vadd.f32	s4, s12, s4
 800f550:	edd6 7a00 	vldr	s15, [r6]
 800f554:	ee73 3ae2 	vsub.f32	s7, s7, s5
 800f558:	ed97 1a00 	vldr	s2, [r7]
 800f55c:	ee77 2a62 	vsub.f32	s5, s14, s5
 800f560:	ed92 8a04 	vldr	s16, [r2, #16]
 800f564:	ee71 8a27 	vadd.f32	s17, s2, s15
 800f568:	ed93 aa04 	vldr	s20, [r3, #16]
 800f56c:	ed16 7a01 	vldr	s14, [r6, #-4]
 800f570:	ee71 7a67 	vsub.f32	s15, s2, s15
 800f574:	ed57 0a01 	vldr	s1, [r7, #-4]
 800f578:	ee38 1a4a 	vsub.f32	s2, s16, s20
 800f57c:	ee38 6a88 	vadd.f32	s12, s17, s16
 800f580:	edd3 9a03 	vldr	s19, [r3, #12]
 800f584:	ee30 0a87 	vadd.f32	s0, s1, s14
 800f588:	ed92 9a03 	vldr	s18, [r2, #12]
 800f58c:	ee78 5ac8 	vsub.f32	s11, s17, s16
 800f590:	ee36 6a0a 	vadd.f32	s12, s12, s20
 800f594:	ee30 7ac7 	vsub.f32	s14, s1, s14
 800f598:	ee37 4ac9 	vsub.f32	s8, s15, s18
 800f59c:	ee16 ca10 	vmov	ip, s12
 800f5a0:	ee30 6a49 	vsub.f32	s12, s0, s18
 800f5a4:	ee77 4a01 	vadd.f32	s9, s14, s2
 800f5a8:	f847 c908 	str.w	ip, [r7], #-8
 800f5ac:	ee34 4a29 	vadd.f32	s8, s8, s19
 800f5b0:	edd2 8a03 	vldr	s17, [r2, #12]
 800f5b4:	ee39 9ac9 	vsub.f32	s18, s19, s18
 800f5b8:	ed93 8a03 	vldr	s16, [r3, #12]
 800f5bc:	ee71 0a47 	vsub.f32	s1, s2, s14
 800f5c0:	ee30 0a28 	vadd.f32	s0, s0, s17
 800f5c4:	ee39 1a67 	vsub.f32	s2, s18, s15
 800f5c8:	ee36 6a69 	vsub.f32	s12, s12, s19
 800f5cc:	ee30 0a08 	vadd.f32	s0, s0, s16
 800f5d0:	ee75 5aca 	vsub.f32	s11, s11, s20
 800f5d4:	ed87 0a01 	vstr	s0, [r7, #4]
 800f5d8:	ed1a 0a04 	vldr	s0, [sl, #-16]
 800f5dc:	ed5a 6a03 	vldr	s13, [sl, #-12]
 800f5e0:	ee21 8a80 	vmul.f32	s16, s3, s0
 800f5e4:	ee23 7a26 	vmul.f32	s14, s6, s13
 800f5e8:	ee64 7a26 	vmul.f32	s15, s8, s13
 800f5ec:	ee61 1aa6 	vmul.f32	s3, s3, s13
 800f5f0:	ee24 4a00 	vmul.f32	s8, s8, s0
 800f5f4:	ee23 3a00 	vmul.f32	s6, s6, s0
 800f5f8:	ee64 6aa6 	vmul.f32	s13, s9, s13
 800f5fc:	ee24 0a80 	vmul.f32	s0, s9, s0
 800f600:	ee38 7a07 	vadd.f32	s14, s16, s14
 800f604:	ee76 6a84 	vadd.f32	s13, s13, s8
 800f608:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800f60c:	ee33 3a61 	vsub.f32	s6, s6, s3
 800f610:	ee17 ca10 	vmov	ip, s14
 800f614:	f841 cb08 	str.w	ip, [r1], #8
 800f618:	ed01 3a01 	vstr	s6, [r1, #-4]
 800f61c:	ed82 0a04 	vstr	s0, [r2, #16]
 800f620:	edc2 6a03 	vstr	s13, [r2, #12]
 800f624:	ed59 6a08 	vldr	s13, [r9, #-32]	@ 0xffffffe0
 800f628:	ed59 7a07 	vldr	s15, [r9, #-28]	@ 0xffffffe4
 800f62c:	ee25 7ae6 	vnmul.f32	s14, s11, s13
 800f630:	ee23 4aa6 	vmul.f32	s8, s7, s13
 800f634:	ee65 4a27 	vmul.f32	s9, s10, s15
 800f638:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800f63c:	ee63 3aa7 	vmul.f32	s7, s7, s15
 800f640:	ee66 7a27 	vmul.f32	s15, s12, s15
 800f644:	ee25 5a26 	vmul.f32	s10, s10, s13
 800f648:	ee66 6a26 	vmul.f32	s13, s12, s13
 800f64c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f650:	ee34 6a24 	vadd.f32	s12, s8, s9
 800f654:	ee75 6ae6 	vsub.f32	s13, s11, s13
 800f658:	ee35 5a63 	vsub.f32	s10, s10, s7
 800f65c:	ee17 ca90 	vmov	ip, s15
 800f660:	ed04 6a04 	vstr	s12, [r4, #-16]
 800f664:	ed04 5a03 	vstr	s10, [r4, #-12]
 800f668:	f846 c908 	str.w	ip, [r6], #-8
 800f66c:	edc6 6a01 	vstr	s13, [r6, #4]
 800f670:	ed5e 7a0c 	vldr	s15, [lr, #-48]	@ 0xffffffd0
 800f674:	ed1e 7a0b 	vldr	s14, [lr, #-44]	@ 0xffffffd4
 800f678:	ee62 5a27 	vmul.f32	s11, s4, s15
 800f67c:	ee22 6a87 	vmul.f32	s12, s5, s14
 800f680:	ee22 2a07 	vmul.f32	s4, s4, s14
 800f684:	ee62 2aa7 	vmul.f32	s5, s5, s15
 800f688:	ee61 6a07 	vmul.f32	s13, s2, s14
 800f68c:	ee20 7a87 	vmul.f32	s14, s1, s14
 800f690:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800f694:	ee61 7a27 	vmul.f32	s15, s2, s15
 800f698:	ee35 6a86 	vadd.f32	s12, s11, s12
 800f69c:	ee72 2ac2 	vsub.f32	s5, s5, s4
 800f6a0:	ee76 0ae0 	vsub.f32	s1, s13, s1
 800f6a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f6a8:	ee16 ca10 	vmov	ip, s12
 800f6ac:	f840 cb08 	str.w	ip, [r0], #8
 800f6b0:	ed40 2a01 	vstr	s5, [r0, #-4]
 800f6b4:	edc3 0a04 	vstr	s1, [r3, #16]
 800f6b8:	edc3 7a03 	vstr	s15, [r3, #12]
 800f6bc:	f47f aefc 	bne.w	800f4b8 <arm_cfft_radix8by4_f32+0x134>
 800f6c0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f6c2:	9802      	ldr	r0, [sp, #8]
 800f6c4:	00cb      	lsls	r3, r1, #3
 800f6c6:	f8dd c034 	ldr.w	ip, [sp, #52]	@ 0x34
 800f6ca:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800f6ce:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800f6d2:	4498      	add	r8, r3
 800f6d4:	449c      	add	ip, r3
 800f6d6:	9102      	str	r1, [sp, #8]
 800f6d8:	9901      	ldr	r1, [sp, #4]
 800f6da:	4419      	add	r1, r3
 800f6dc:	9101      	str	r1, [sp, #4]
 800f6de:	9907      	ldr	r1, [sp, #28]
 800f6e0:	4419      	add	r1, r3
 800f6e2:	9107      	str	r1, [sp, #28]
 800f6e4:	9908      	ldr	r1, [sp, #32]
 800f6e6:	4419      	add	r1, r3
 800f6e8:	9b06      	ldr	r3, [sp, #24]
 800f6ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f6ee:	9108      	str	r1, [sp, #32]
 800f6f0:	9306      	str	r3, [sp, #24]
 800f6f2:	9a01      	ldr	r2, [sp, #4]
 800f6f4:	2304      	movs	r3, #4
 800f6f6:	9e08      	ldr	r6, [sp, #32]
 800f6f8:	edd2 7a00 	vldr	s15, [r2]
 800f6fc:	ed96 7a00 	vldr	s14, [r6]
 800f700:	edd8 2a00 	vldr	s5, [r8]
 800f704:	ee77 5a87 	vadd.f32	s11, s15, s14
 800f708:	ed9c 3a00 	vldr	s6, [ip]
 800f70c:	ed92 6a01 	vldr	s12, [r2, #4]
 800f710:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800f714:	edd6 6a01 	vldr	s13, [r6, #4]
 800f718:	ee75 4aa2 	vadd.f32	s9, s11, s5
 800f71c:	ed9c 2a01 	vldr	s4, [ip, #4]
 800f720:	ee36 5a26 	vadd.f32	s10, s12, s13
 800f724:	edd8 7a01 	vldr	s15, [r8, #4]
 800f728:	ee76 6a66 	vsub.f32	s13, s12, s13
 800f72c:	9d02      	ldr	r5, [sp, #8]
 800f72e:	ee34 6a83 	vadd.f32	s12, s9, s6
 800f732:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 800f736:	ee37 4a27 	vadd.f32	s8, s14, s15
 800f73a:	9805      	ldr	r0, [sp, #20]
 800f73c:	ee76 4ae2 	vsub.f32	s9, s13, s5
 800f740:	4621      	mov	r1, r4
 800f742:	ed82 6a00 	vstr	s12, [r2]
 800f746:	ee35 6ae2 	vsub.f32	s12, s11, s5
 800f74a:	edd8 3a01 	vldr	s7, [r8, #4]
 800f74e:	ee75 5a67 	vsub.f32	s11, s10, s15
 800f752:	eddc 1a01 	vldr	s3, [ip, #4]
 800f756:	ee34 4a42 	vsub.f32	s8, s8, s4
 800f75a:	ee75 3a23 	vadd.f32	s7, s10, s7
 800f75e:	ee74 4a83 	vadd.f32	s9, s9, s6
 800f762:	ee76 6aa2 	vadd.f32	s13, s13, s5
 800f766:	ee33 5aa1 	vadd.f32	s10, s7, s3
 800f76a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f76e:	ee36 6a43 	vsub.f32	s12, s12, s6
 800f772:	ed82 5a01 	vstr	s10, [r2, #4]
 800f776:	ee75 5ac2 	vsub.f32	s11, s11, s4
 800f77a:	9a07      	ldr	r2, [sp, #28]
 800f77c:	ee77 7a02 	vadd.f32	s15, s14, s4
 800f780:	ee36 7ac3 	vsub.f32	s14, s13, s6
 800f784:	edd2 2a00 	vldr	s5, [r2]
 800f788:	ed92 5a01 	vldr	s10, [r2, #4]
 800f78c:	ee64 3a22 	vmul.f32	s7, s8, s5
 800f790:	ee24 4a05 	vmul.f32	s8, s8, s10
 800f794:	ee24 5a85 	vmul.f32	s10, s9, s10
 800f798:	ee64 4aa2 	vmul.f32	s9, s9, s5
 800f79c:	ee33 5a85 	vadd.f32	s10, s7, s10
 800f7a0:	ee74 4ac4 	vsub.f32	s9, s9, s8
 800f7a4:	ed88 5a00 	vstr	s10, [r8]
 800f7a8:	edc8 4a01 	vstr	s9, [r8, #4]
 800f7ac:	edd5 4a01 	vldr	s9, [r5, #4]
 800f7b0:	edd5 6a00 	vldr	s13, [r5]
 800f7b4:	9d06      	ldr	r5, [sp, #24]
 800f7b6:	ee26 5a26 	vmul.f32	s10, s12, s13
 800f7ba:	ee26 6a24 	vmul.f32	s12, s12, s9
 800f7be:	ee65 6aa6 	vmul.f32	s13, s11, s13
 800f7c2:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800f7c6:	ee36 6ac6 	vsub.f32	s12, s13, s12
 800f7ca:	ee75 5a25 	vadd.f32	s11, s10, s11
 800f7ce:	ed86 6a01 	vstr	s12, [r6, #4]
 800f7d2:	edc6 5a00 	vstr	s11, [r6]
 800f7d6:	edd5 5a01 	vldr	s11, [r5, #4]
 800f7da:	edd5 6a00 	vldr	s13, [r5]
 800f7de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f7e0:	ee27 6aa6 	vmul.f32	s12, s15, s13
 800f7e4:	ee67 6a26 	vmul.f32	s13, s14, s13
 800f7e8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800f7ec:	ee27 7a25 	vmul.f32	s14, s14, s11
 800f7f0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800f7f4:	ee36 7a07 	vadd.f32	s14, s12, s14
 800f7f8:	edcc 7a01 	vstr	s15, [ip, #4]
 800f7fc:	ed8c 7a00 	vstr	s14, [ip]
 800f800:	6872      	ldr	r2, [r6, #4]
 800f802:	f000 f977 	bl	800faf4 <arm_radix8_butterfly_f32>
 800f806:	9803      	ldr	r0, [sp, #12]
 800f808:	4621      	mov	r1, r4
 800f80a:	6872      	ldr	r2, [r6, #4]
 800f80c:	2304      	movs	r3, #4
 800f80e:	f000 f971 	bl	800faf4 <arm_radix8_butterfly_f32>
 800f812:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800f814:	4621      	mov	r1, r4
 800f816:	6872      	ldr	r2, [r6, #4]
 800f818:	2304      	movs	r3, #4
 800f81a:	f000 f96b 	bl	800faf4 <arm_radix8_butterfly_f32>
 800f81e:	4621      	mov	r1, r4
 800f820:	6872      	ldr	r2, [r6, #4]
 800f822:	2304      	movs	r3, #4
 800f824:	9804      	ldr	r0, [sp, #16]
 800f826:	b00f      	add	sp, #60	@ 0x3c
 800f828:	ecbd 8b06 	vpop	{d8-d10}
 800f82c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f830:	f000 b960 	b.w	800faf4 <arm_radix8_butterfly_f32>

0800f834 <arm_cfft_f32>:
 800f834:	2a01      	cmp	r2, #1
 800f836:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f83a:	4606      	mov	r6, r0
 800f83c:	4617      	mov	r7, r2
 800f83e:	460c      	mov	r4, r1
 800f840:	4698      	mov	r8, r3
 800f842:	8805      	ldrh	r5, [r0, #0]
 800f844:	d053      	beq.n	800f8ee <arm_cfft_f32+0xba>
 800f846:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 800f84a:	d04b      	beq.n	800f8e4 <arm_cfft_f32+0xb0>
 800f84c:	d916      	bls.n	800f87c <arm_cfft_f32+0x48>
 800f84e:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 800f852:	d01a      	beq.n	800f88a <arm_cfft_f32+0x56>
 800f854:	d95a      	bls.n	800f90c <arm_cfft_f32+0xd8>
 800f856:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 800f85a:	d043      	beq.n	800f8e4 <arm_cfft_f32+0xb0>
 800f85c:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 800f860:	d105      	bne.n	800f86e <arm_cfft_f32+0x3a>
 800f862:	2301      	movs	r3, #1
 800f864:	6872      	ldr	r2, [r6, #4]
 800f866:	4629      	mov	r1, r5
 800f868:	4620      	mov	r0, r4
 800f86a:	f000 f943 	bl	800faf4 <arm_radix8_butterfly_f32>
 800f86e:	f1b8 0f00 	cmp.w	r8, #0
 800f872:	d111      	bne.n	800f898 <arm_cfft_f32+0x64>
 800f874:	2f01      	cmp	r7, #1
 800f876:	d016      	beq.n	800f8a6 <arm_cfft_f32+0x72>
 800f878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f87c:	2d20      	cmp	r5, #32
 800f87e:	d031      	beq.n	800f8e4 <arm_cfft_f32+0xb0>
 800f880:	d948      	bls.n	800f914 <arm_cfft_f32+0xe0>
 800f882:	2d40      	cmp	r5, #64	@ 0x40
 800f884:	d0ed      	beq.n	800f862 <arm_cfft_f32+0x2e>
 800f886:	2d80      	cmp	r5, #128	@ 0x80
 800f888:	d1f1      	bne.n	800f86e <arm_cfft_f32+0x3a>
 800f88a:	4621      	mov	r1, r4
 800f88c:	4630      	mov	r0, r6
 800f88e:	f7ff fca9 	bl	800f1e4 <arm_cfft_radix8by2_f32>
 800f892:	f1b8 0f00 	cmp.w	r8, #0
 800f896:	d0ed      	beq.n	800f874 <arm_cfft_f32+0x40>
 800f898:	68b2      	ldr	r2, [r6, #8]
 800f89a:	4620      	mov	r0, r4
 800f89c:	89b1      	ldrh	r1, [r6, #12]
 800f89e:	f7f0 fcb7 	bl	8000210 <arm_bitreversal_32>
 800f8a2:	2f01      	cmp	r7, #1
 800f8a4:	d1e8      	bne.n	800f878 <arm_cfft_f32+0x44>
 800f8a6:	ee07 5a90 	vmov	s15, r5
 800f8aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f8ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f8b2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800f8b6:	2d00      	cmp	r5, #0
 800f8b8:	d0de      	beq.n	800f878 <arm_cfft_f32+0x44>
 800f8ba:	f104 0108 	add.w	r1, r4, #8
 800f8be:	2300      	movs	r3, #0
 800f8c0:	ed11 7a02 	vldr	s14, [r1, #-8]
 800f8c4:	3301      	adds	r3, #1
 800f8c6:	ed51 7a01 	vldr	s15, [r1, #-4]
 800f8ca:	3108      	adds	r1, #8
 800f8cc:	429d      	cmp	r5, r3
 800f8ce:	ee27 7a26 	vmul.f32	s14, s14, s13
 800f8d2:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800f8d6:	ed01 7a04 	vstr	s14, [r1, #-16]
 800f8da:	ed41 7a03 	vstr	s15, [r1, #-12]
 800f8de:	d1ef      	bne.n	800f8c0 <arm_cfft_f32+0x8c>
 800f8e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8e4:	4621      	mov	r1, r4
 800f8e6:	4630      	mov	r0, r6
 800f8e8:	f7ff fd4c 	bl	800f384 <arm_cfft_radix8by4_f32>
 800f8ec:	e7bf      	b.n	800f86e <arm_cfft_f32+0x3a>
 800f8ee:	b1a5      	cbz	r5, 800f91a <arm_cfft_f32+0xe6>
 800f8f0:	f101 030c 	add.w	r3, r1, #12
 800f8f4:	2200      	movs	r2, #0
 800f8f6:	ed53 7a02 	vldr	s15, [r3, #-8]
 800f8fa:	3201      	adds	r2, #1
 800f8fc:	3308      	adds	r3, #8
 800f8fe:	eef1 7a67 	vneg.f32	s15, s15
 800f902:	4295      	cmp	r5, r2
 800f904:	ed43 7a04 	vstr	s15, [r3, #-16]
 800f908:	d1f5      	bne.n	800f8f6 <arm_cfft_f32+0xc2>
 800f90a:	e79c      	b.n	800f846 <arm_cfft_f32+0x12>
 800f90c:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 800f910:	d0a7      	beq.n	800f862 <arm_cfft_f32+0x2e>
 800f912:	e7ac      	b.n	800f86e <arm_cfft_f32+0x3a>
 800f914:	2d10      	cmp	r5, #16
 800f916:	d0b8      	beq.n	800f88a <arm_cfft_f32+0x56>
 800f918:	e7a9      	b.n	800f86e <arm_cfft_f32+0x3a>
 800f91a:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 800f91e:	d896      	bhi.n	800f84e <arm_cfft_f32+0x1a>
 800f920:	e7ac      	b.n	800f87c <arm_cfft_f32+0x48>
 800f922:	bf00      	nop

0800f924 <arm_cmplx_mag_f32>:
 800f924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f928:	ea5f 0892 	movs.w	r8, r2, lsr #2
 800f92c:	b084      	sub	sp, #16
 800f92e:	d07f      	beq.n	800fa30 <arm_cmplx_mag_f32+0x10c>
 800f930:	f100 0420 	add.w	r4, r0, #32
 800f934:	f101 0510 	add.w	r5, r1, #16
 800f938:	4646      	mov	r6, r8
 800f93a:	2700      	movs	r7, #0
 800f93c:	e05a      	b.n	800f9f4 <arm_cmplx_mag_f32+0xd0>
 800f93e:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800f942:	eeb4 0a40 	vcmp.f32	s0, s0
 800f946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f94a:	f040 80a4 	bne.w	800fa96 <arm_cmplx_mag_f32+0x172>
 800f94e:	ed05 0a04 	vstr	s0, [r5, #-16]
 800f952:	ed54 7a06 	vldr	s15, [r4, #-24]	@ 0xffffffe8
 800f956:	ed14 0a05 	vldr	s0, [r4, #-20]	@ 0xffffffec
 800f95a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800f95e:	ee20 0a00 	vmul.f32	s0, s0, s0
 800f962:	ee77 7a80 	vadd.f32	s15, s15, s0
 800f966:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f96a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f96e:	f2c0 808f 	blt.w	800fa90 <arm_cmplx_mag_f32+0x16c>
 800f972:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800f976:	eeb4 0a40 	vcmp.f32	s0, s0
 800f97a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f97e:	f040 80af 	bne.w	800fae0 <arm_cmplx_mag_f32+0x1bc>
 800f982:	ed05 0a03 	vstr	s0, [r5, #-12]
 800f986:	ed54 7a04 	vldr	s15, [r4, #-16]
 800f98a:	ed14 0a03 	vldr	s0, [r4, #-12]
 800f98e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800f992:	ee20 0a00 	vmul.f32	s0, s0, s0
 800f996:	ee77 7a80 	vadd.f32	s15, s15, s0
 800f99a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f99e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9a2:	db72      	blt.n	800fa8a <arm_cmplx_mag_f32+0x166>
 800f9a4:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800f9a8:	eeb4 0a40 	vcmp.f32	s0, s0
 800f9ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9b0:	f040 808c 	bne.w	800facc <arm_cmplx_mag_f32+0x1a8>
 800f9b4:	ed05 0a02 	vstr	s0, [r5, #-8]
 800f9b8:	ed54 7a02 	vldr	s15, [r4, #-8]
 800f9bc:	ed14 0a01 	vldr	s0, [r4, #-4]
 800f9c0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800f9c4:	ee20 0a00 	vmul.f32	s0, s0, s0
 800f9c8:	ee77 7a80 	vadd.f32	s15, s15, s0
 800f9cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f9d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9d4:	db20      	blt.n	800fa18 <arm_cmplx_mag_f32+0xf4>
 800f9d6:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800f9da:	eeb4 0a40 	vcmp.f32	s0, s0
 800f9de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9e2:	d169      	bne.n	800fab8 <arm_cmplx_mag_f32+0x194>
 800f9e4:	3e01      	subs	r6, #1
 800f9e6:	ed05 0a01 	vstr	s0, [r5, #-4]
 800f9ea:	f104 0420 	add.w	r4, r4, #32
 800f9ee:	f105 0510 	add.w	r5, r5, #16
 800f9f2:	d019      	beq.n	800fa28 <arm_cmplx_mag_f32+0x104>
 800f9f4:	ed54 7a08 	vldr	s15, [r4, #-32]	@ 0xffffffe0
 800f9f8:	ed14 0a07 	vldr	s0, [r4, #-28]	@ 0xffffffe4
 800f9fc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800fa00:	ee20 0a00 	vmul.f32	s0, s0, s0
 800fa04:	ee77 7a80 	vadd.f32	s15, s15, s0
 800fa08:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800fa0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa10:	da95      	bge.n	800f93e <arm_cmplx_mag_f32+0x1a>
 800fa12:	f845 7c10 	str.w	r7, [r5, #-16]
 800fa16:	e79c      	b.n	800f952 <arm_cmplx_mag_f32+0x2e>
 800fa18:	3e01      	subs	r6, #1
 800fa1a:	f845 7c04 	str.w	r7, [r5, #-4]
 800fa1e:	f104 0420 	add.w	r4, r4, #32
 800fa22:	f105 0510 	add.w	r5, r5, #16
 800fa26:	d1e5      	bne.n	800f9f4 <arm_cmplx_mag_f32+0xd0>
 800fa28:	eb00 1048 	add.w	r0, r0, r8, lsl #5
 800fa2c:	eb01 1108 	add.w	r1, r1, r8, lsl #4
 800fa30:	f012 0503 	ands.w	r5, r2, #3
 800fa34:	d026      	beq.n	800fa84 <arm_cmplx_mag_f32+0x160>
 800fa36:	f100 0408 	add.w	r4, r0, #8
 800fa3a:	2600      	movs	r6, #0
 800fa3c:	e00c      	b.n	800fa58 <arm_cmplx_mag_f32+0x134>
 800fa3e:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800fa42:	eeb4 0a40 	vcmp.f32	s0, s0
 800fa46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa4a:	d12e      	bne.n	800faaa <arm_cmplx_mag_f32+0x186>
 800fa4c:	3d01      	subs	r5, #1
 800fa4e:	ed01 0a01 	vstr	s0, [r1, #-4]
 800fa52:	f104 0408 	add.w	r4, r4, #8
 800fa56:	d015      	beq.n	800fa84 <arm_cmplx_mag_f32+0x160>
 800fa58:	ed54 7a02 	vldr	s15, [r4, #-8]
 800fa5c:	3104      	adds	r1, #4
 800fa5e:	ed14 0a01 	vldr	s0, [r4, #-4]
 800fa62:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800fa66:	ee20 0a00 	vmul.f32	s0, s0, s0
 800fa6a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800fa6e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800fa72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa76:	dae2      	bge.n	800fa3e <arm_cmplx_mag_f32+0x11a>
 800fa78:	3d01      	subs	r5, #1
 800fa7a:	f841 6c04 	str.w	r6, [r1, #-4]
 800fa7e:	f104 0408 	add.w	r4, r4, #8
 800fa82:	d1e9      	bne.n	800fa58 <arm_cmplx_mag_f32+0x134>
 800fa84:	b004      	add	sp, #16
 800fa86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa8a:	f845 7c08 	str.w	r7, [r5, #-8]
 800fa8e:	e793      	b.n	800f9b8 <arm_cmplx_mag_f32+0x94>
 800fa90:	f845 7c0c 	str.w	r7, [r5, #-12]
 800fa94:	e777      	b.n	800f986 <arm_cmplx_mag_f32+0x62>
 800fa96:	eeb0 0a67 	vmov.f32	s0, s15
 800fa9a:	9203      	str	r2, [sp, #12]
 800fa9c:	9102      	str	r1, [sp, #8]
 800fa9e:	9001      	str	r0, [sp, #4]
 800faa0:	f006 f91c 	bl	8015cdc <sqrtf>
 800faa4:	a801      	add	r0, sp, #4
 800faa6:	c807      	ldmia	r0, {r0, r1, r2}
 800faa8:	e751      	b.n	800f94e <arm_cmplx_mag_f32+0x2a>
 800faaa:	eeb0 0a67 	vmov.f32	s0, s15
 800faae:	9101      	str	r1, [sp, #4]
 800fab0:	f006 f914 	bl	8015cdc <sqrtf>
 800fab4:	9901      	ldr	r1, [sp, #4]
 800fab6:	e7c9      	b.n	800fa4c <arm_cmplx_mag_f32+0x128>
 800fab8:	eeb0 0a67 	vmov.f32	s0, s15
 800fabc:	9203      	str	r2, [sp, #12]
 800fabe:	9102      	str	r1, [sp, #8]
 800fac0:	9001      	str	r0, [sp, #4]
 800fac2:	f006 f90b 	bl	8015cdc <sqrtf>
 800fac6:	a801      	add	r0, sp, #4
 800fac8:	c807      	ldmia	r0, {r0, r1, r2}
 800faca:	e78b      	b.n	800f9e4 <arm_cmplx_mag_f32+0xc0>
 800facc:	eeb0 0a67 	vmov.f32	s0, s15
 800fad0:	9203      	str	r2, [sp, #12]
 800fad2:	9102      	str	r1, [sp, #8]
 800fad4:	9001      	str	r0, [sp, #4]
 800fad6:	f006 f901 	bl	8015cdc <sqrtf>
 800fada:	a801      	add	r0, sp, #4
 800fadc:	c807      	ldmia	r0, {r0, r1, r2}
 800fade:	e769      	b.n	800f9b4 <arm_cmplx_mag_f32+0x90>
 800fae0:	eeb0 0a67 	vmov.f32	s0, s15
 800fae4:	9203      	str	r2, [sp, #12]
 800fae6:	9102      	str	r1, [sp, #8]
 800fae8:	9001      	str	r0, [sp, #4]
 800faea:	f006 f8f7 	bl	8015cdc <sqrtf>
 800faee:	a801      	add	r0, sp, #4
 800faf0:	c807      	ldmia	r0, {r0, r1, r2}
 800faf2:	e746      	b.n	800f982 <arm_cmplx_mag_f32+0x5e>

0800faf4 <arm_radix8_butterfly_f32>:
 800faf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800faf8:	469e      	mov	lr, r3
 800fafa:	4603      	mov	r3, r0
 800fafc:	468a      	mov	sl, r1
 800fafe:	468b      	mov	fp, r1
 800fb00:	3304      	adds	r3, #4
 800fb02:	ed2d 8b10 	vpush	{d8-d15}
 800fb06:	469c      	mov	ip, r3
 800fb08:	b09d      	sub	sp, #116	@ 0x74
 800fb0a:	ed9f 9ac3 	vldr	s18, [pc, #780]	@ 800fe18 <arm_radix8_butterfly_f32+0x324>
 800fb0e:	9019      	str	r0, [sp, #100]	@ 0x64
 800fb10:	921a      	str	r2, [sp, #104]	@ 0x68
 800fb12:	931b      	str	r3, [sp, #108]	@ 0x6c
 800fb14:	ea4f 03db 	mov.w	r3, fp, lsr #3
 800fb18:	f04f 0800 	mov.w	r8, #0
 800fb1c:	461a      	mov	r2, r3
 800fb1e:	9311      	str	r3, [sp, #68]	@ 0x44
 800fb20:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800fb24:	4611      	mov	r1, r2
 800fb26:	ea4f 09c2 	mov.w	r9, r2, lsl #3
 800fb2a:	9300      	str	r3, [sp, #0]
 800fb2c:	0053      	lsls	r3, r2, #1
 800fb2e:	18d5      	adds	r5, r2, r3
 800fb30:	9301      	str	r3, [sp, #4]
 800fb32:	0113      	lsls	r3, r2, #4
 800fb34:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800fb36:	194c      	adds	r4, r1, r5
 800fb38:	eb02 0609 	add.w	r6, r2, r9
 800fb3c:	9302      	str	r3, [sp, #8]
 800fb3e:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800fb42:	4613      	mov	r3, r2
 800fb44:	190a      	adds	r2, r1, r4
 800fb46:	eb06 0709 	add.w	r7, r6, r9
 800fb4a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800fb4e:	1888      	adds	r0, r1, r2
 800fb50:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800fb54:	4401      	add	r1, r0
 800fb56:	3204      	adds	r2, #4
 800fb58:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800fb5c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800fb60:	9b00      	ldr	r3, [sp, #0]
 800fb62:	3104      	adds	r1, #4
 800fb64:	ed5c 7a01 	vldr	s15, [ip, #-4]
 800fb68:	44d8      	add	r8, fp
 800fb6a:	ed90 7a00 	vldr	s14, [r0]
 800fb6e:	ed94 5a00 	vldr	s10, [r4]
 800fb72:	45c2      	cmp	sl, r8
 800fb74:	edd7 3a00 	vldr	s7, [r7]
 800fb78:	ed96 6a00 	vldr	s12, [r6]
 800fb7c:	ee37 1a85 	vadd.f32	s2, s15, s10
 800fb80:	ed52 6a01 	vldr	s13, [r2, #-4]
 800fb84:	ee73 4a87 	vadd.f32	s9, s7, s14
 800fb88:	ee37 5ac5 	vsub.f32	s10, s15, s10
 800fb8c:	edd5 7a00 	vldr	s15, [r5]
 800fb90:	ee73 3ac7 	vsub.f32	s7, s7, s14
 800fb94:	ed11 7a01 	vldr	s14, [r1, #-4]
 800fb98:	ee36 2a26 	vadd.f32	s4, s12, s13
 800fb9c:	ee37 4a87 	vadd.f32	s8, s15, s14
 800fba0:	ee76 6a66 	vsub.f32	s13, s12, s13
 800fba4:	ee71 5a24 	vadd.f32	s11, s2, s9
 800fba8:	ee32 6a04 	vadd.f32	s12, s4, s8
 800fbac:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800fbb0:	ee31 1a64 	vsub.f32	s2, s2, s9
 800fbb4:	ee75 4a86 	vadd.f32	s9, s11, s12
 800fbb8:	ee76 7ac7 	vsub.f32	s15, s13, s14
 800fbbc:	ee75 5ac6 	vsub.f32	s11, s11, s12
 800fbc0:	ed4c 4a01 	vstr	s9, [ip, #-4]
 800fbc4:	ee32 2a44 	vsub.f32	s4, s4, s8
 800fbc8:	ee67 7a89 	vmul.f32	s15, s15, s18
 800fbcc:	ed94 0a01 	vldr	s0, [r4, #4]
 800fbd0:	edc4 5a00 	vstr	s11, [r4]
 800fbd4:	ee36 7a87 	vadd.f32	s14, s13, s14
 800fbd8:	edd6 5a01 	vldr	s11, [r6, #4]
 800fbdc:	edd5 2a01 	vldr	s5, [r5, #4]
 800fbe0:	ee75 1a27 	vadd.f32	s3, s10, s15
 800fbe4:	ed92 4a00 	vldr	s8, [r2]
 800fbe8:	ee75 7a67 	vsub.f32	s15, s10, s15
 800fbec:	edd1 4a00 	vldr	s9, [r1]
 800fbf0:	ee27 7a09 	vmul.f32	s14, s14, s18
 800fbf4:	ee35 3ac4 	vsub.f32	s6, s11, s8
 800fbf8:	ed9c 6a00 	vldr	s12, [ip]
 800fbfc:	ee72 6ae4 	vsub.f32	s13, s5, s9
 800fc00:	edd0 0a01 	vldr	s1, [r0, #4]
 800fc04:	ed97 5a01 	vldr	s10, [r7, #4]
 800fc08:	ee35 4a84 	vadd.f32	s8, s11, s8
 800fc0c:	ee72 4aa4 	vadd.f32	s9, s5, s9
 800fc10:	ee73 5a26 	vadd.f32	s11, s6, s13
 800fc14:	ee76 2a00 	vadd.f32	s5, s12, s0
 800fc18:	ee73 6a66 	vsub.f32	s13, s6, s13
 800fc1c:	ee36 6a40 	vsub.f32	s12, s12, s0
 800fc20:	ee35 0a20 	vadd.f32	s0, s10, s1
 800fc24:	ee65 5a89 	vmul.f32	s11, s11, s18
 800fc28:	ee35 5a60 	vsub.f32	s10, s10, s1
 800fc2c:	ee32 3a80 	vadd.f32	s6, s5, s0
 800fc30:	ee74 0a24 	vadd.f32	s1, s8, s9
 800fc34:	ee66 6a89 	vmul.f32	s13, s13, s18
 800fc38:	ee74 4a64 	vsub.f32	s9, s8, s9
 800fc3c:	ee32 4ac0 	vsub.f32	s8, s5, s0
 800fc40:	ee75 2a25 	vadd.f32	s5, s10, s11
 800fc44:	ee33 0a20 	vadd.f32	s0, s6, s1
 800fc48:	ee75 5a65 	vsub.f32	s11, s10, s11
 800fc4c:	ee33 3a60 	vsub.f32	s6, s6, s1
 800fc50:	ee36 5a26 	vadd.f32	s10, s12, s13
 800fc54:	ed8c 0a00 	vstr	s0, [ip]
 800fc58:	ee76 6a66 	vsub.f32	s13, s12, s13
 800fc5c:	449c      	add	ip, r3
 800fc5e:	ee33 6a87 	vadd.f32	s12, s7, s14
 800fc62:	ed84 3a01 	vstr	s6, [r4, #4]
 800fc66:	ee33 7ac7 	vsub.f32	s14, s7, s14
 800fc6a:	441c      	add	r4, r3
 800fc6c:	ee71 3a24 	vadd.f32	s7, s2, s9
 800fc70:	ee71 4a64 	vsub.f32	s9, s2, s9
 800fc74:	ee31 3aa2 	vadd.f32	s6, s3, s5
 800fc78:	edc7 3a00 	vstr	s7, [r7]
 800fc7c:	ee34 1a42 	vsub.f32	s2, s8, s4
 800fc80:	edc0 4a00 	vstr	s9, [r0]
 800fc84:	ee77 3aa5 	vadd.f32	s7, s15, s11
 800fc88:	ee75 4a46 	vsub.f32	s9, s10, s12
 800fc8c:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800fc90:	ed87 1a01 	vstr	s2, [r7, #4]
 800fc94:	ee76 5ac7 	vsub.f32	s11, s13, s14
 800fc98:	441f      	add	r7, r3
 800fc9a:	ee32 4a04 	vadd.f32	s8, s4, s8
 800fc9e:	ee71 1ae2 	vsub.f32	s3, s3, s5
 800fca2:	ee36 6a05 	vadd.f32	s12, s12, s10
 800fca6:	ee37 7a26 	vadd.f32	s14, s14, s13
 800fcaa:	ed80 4a01 	vstr	s8, [r0, #4]
 800fcae:	ed86 3a00 	vstr	s6, [r6]
 800fcb2:	4418      	add	r0, r3
 800fcb4:	ed41 1a01 	vstr	s3, [r1, #-4]
 800fcb8:	ed42 3a01 	vstr	s7, [r2, #-4]
 800fcbc:	edc5 7a00 	vstr	s15, [r5]
 800fcc0:	edc6 4a01 	vstr	s9, [r6, #4]
 800fcc4:	441e      	add	r6, r3
 800fcc6:	ed81 6a00 	vstr	s12, [r1]
 800fcca:	4419      	add	r1, r3
 800fccc:	edc2 5a00 	vstr	s11, [r2]
 800fcd0:	441a      	add	r2, r3
 800fcd2:	ed85 7a01 	vstr	s14, [r5, #4]
 800fcd6:	441d      	add	r5, r3
 800fcd8:	f63f af44 	bhi.w	800fb64 <arm_radix8_butterfly_f32+0x70>
 800fcdc:	9300      	str	r3, [sp, #0]
 800fcde:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800fce0:	2b07      	cmp	r3, #7
 800fce2:	f240 81f4 	bls.w	80100ce <arm_radix8_butterfly_f32+0x5da>
 800fce6:	9901      	ldr	r1, [sp, #4]
 800fce8:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 800fcec:	9d02      	ldr	r5, [sp, #8]
 800fcee:	ea4f 02ce 	mov.w	r2, lr, lsl #3
 800fcf2:	3101      	adds	r1, #1
 800fcf4:	eb04 000e 	add.w	r0, r4, lr
 800fcf8:	00e4      	lsls	r4, r4, #3
 800fcfa:	3508      	adds	r5, #8
 800fcfc:	4419      	add	r1, r3
 800fcfe:	eb00 0c0e 	add.w	ip, r0, lr
 800fd02:	9413      	str	r4, [sp, #76]	@ 0x4c
 800fd04:	00c0      	lsls	r0, r0, #3
 800fd06:	185e      	adds	r6, r3, r1
 800fd08:	4617      	mov	r7, r2
 800fd0a:	9218      	str	r2, [sp, #96]	@ 0x60
 800fd0c:	f109 0908 	add.w	r9, r9, #8
 800fd10:	199c      	adds	r4, r3, r6
 800fd12:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fd14:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800fd16:	9012      	str	r0, [sp, #72]	@ 0x48
 800fd18:	195d      	adds	r5, r3, r5
 800fd1a:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800fd1c:	443a      	add	r2, r7
 800fd1e:	950c      	str	r5, [sp, #48]	@ 0x30
 800fd20:	4698      	mov	r8, r3
 800fd22:	4420      	add	r0, r4
 800fd24:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800fd26:	19d7      	adds	r7, r2, r7
 800fd28:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800fd2c:	4405      	add	r5, r0
 800fd2e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800fd32:	9710      	str	r7, [sp, #64]	@ 0x40
 800fd34:	eb0c 070e 	add.w	r7, ip, lr
 800fd38:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800fd3c:	3404      	adds	r4, #4
 800fd3e:	3004      	adds	r0, #4
 800fd40:	44c8      	add	r8, r9
 800fd42:	f8cd c054 	str.w	ip, [sp, #84]	@ 0x54
 800fd46:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fd48:	940a      	str	r4, [sp, #40]	@ 0x28
 800fd4a:	9009      	str	r0, [sp, #36]	@ 0x24
 800fd4c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800fd50:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 800fd52:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800fd56:	9815      	ldr	r0, [sp, #84]	@ 0x54
 800fd58:	f8cd 8034 	str.w	r8, [sp, #52]	@ 0x34
 800fd5c:	eb07 080e 	add.w	r8, r7, lr
 800fd60:	eb04 0900 	add.w	r9, r4, r0
 800fd64:	00f8      	lsls	r0, r7, #3
 800fd66:	ea4f 0cc8 	mov.w	ip, r8, lsl #3
 800fd6a:	3504      	adds	r5, #4
 800fd6c:	4607      	mov	r7, r0
 800fd6e:	9017      	str	r0, [sp, #92]	@ 0x5c
 800fd70:	910b      	str	r1, [sp, #44]	@ 0x2c
 800fd72:	4618      	mov	r0, r3
 800fd74:	eb03 01c6 	add.w	r1, r3, r6, lsl #3
 800fd78:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800fd7a:	f8cd c050 	str.w	ip, [sp, #80]	@ 0x50
 800fd7e:	18e3      	adds	r3, r4, r3
 800fd80:	9508      	str	r5, [sp, #32]
 800fd82:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800fd84:	910e      	str	r1, [sp, #56]	@ 0x38
 800fd86:	4621      	mov	r1, r4
 800fd88:	eb04 0805 	add.w	r8, r4, r5
 800fd8c:	9304      	str	r3, [sp, #16]
 800fd8e:	19e5      	adds	r5, r4, r7
 800fd90:	ea4f 130e 	mov.w	r3, lr, lsl #4
 800fd94:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800fd96:	9316      	str	r3, [sp, #88]	@ 0x58
 800fd98:	190b      	adds	r3, r1, r4
 800fd9a:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800fd9c:	9505      	str	r5, [sp, #20]
 800fd9e:	9303      	str	r3, [sp, #12]
 800fda0:	f100 0308 	add.w	r3, r0, #8
 800fda4:	9707      	str	r7, [sp, #28]
 800fda6:	4638      	mov	r0, r7
 800fda8:	930f      	str	r3, [sp, #60]	@ 0x3c
 800fdaa:	2301      	movs	r3, #1
 800fdac:	9306      	str	r3, [sp, #24]
 800fdae:	9b00      	ldr	r3, [sp, #0]
 800fdb0:	ed90 fa00 	vldr	s30, [r0]
 800fdb4:	edd0 ba01 	vldr	s23, [r0, #4]
 800fdb8:	9803      	ldr	r0, [sp, #12]
 800fdba:	9903      	ldr	r1, [sp, #12]
 800fdbc:	ed90 ba01 	vldr	s22, [r0, #4]
 800fdc0:	9804      	ldr	r0, [sp, #16]
 800fdc2:	edd1 ea00 	vldr	s29, [r1]
 800fdc6:	edd0 aa01 	vldr	s21, [r0, #4]
 800fdca:	9805      	ldr	r0, [sp, #20]
 800fdcc:	9905      	ldr	r1, [sp, #20]
 800fdce:	edd0 7a01 	vldr	s15, [r0, #4]
 800fdd2:	ed91 da00 	vldr	s26, [r1]
 800fdd6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800fdd8:	9c04      	ldr	r4, [sp, #16]
 800fdda:	edcd 7a01 	vstr	s15, [sp, #4]
 800fdde:	edd8 7a01 	vldr	s15, [r8, #4]
 800fde2:	9100      	str	r1, [sp, #0]
 800fde4:	edd2 fa00 	vldr	s31, [r2]
 800fde8:	ed94 ea00 	vldr	s28, [r4]
 800fdec:	ed92 ca01 	vldr	s24, [r2, #4]
 800fdf0:	f8dd e020 	ldr.w	lr, [sp, #32]
 800fdf4:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 800fdf6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800fdf8:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800fdfa:	edd9 da00 	vldr	s27, [r9]
 800fdfe:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800fe00:	edd8 ca00 	vldr	s25, [r8]
 800fe04:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800fe06:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800fe08:	f8dd c018 	ldr.w	ip, [sp, #24]
 800fe0c:	ed99 aa01 	vldr	s20, [r9, #4]
 800fe10:	edcd 7a02 	vstr	s15, [sp, #8]
 800fe14:	9800      	ldr	r0, [sp, #0]
 800fe16:	e001      	b.n	800fe1c <arm_radix8_butterfly_f32+0x328>
 800fe18:	3f3504f3 	.word	0x3f3504f3
 800fe1c:	edd5 3a00 	vldr	s7, [r5]
 800fe20:	44dc      	add	ip, fp
 800fe22:	ed91 7a00 	vldr	s14, [r1]
 800fe26:	edd4 8a00 	vldr	s17, [r4]
 800fe2a:	45e2      	cmp	sl, ip
 800fe2c:	ed57 7a01 	vldr	s15, [r7, #-4]
 800fe30:	ed90 5a00 	vldr	s10, [r0]
 800fe34:	ed56 5a01 	vldr	s11, [r6, #-4]
 800fe38:	ee38 6aa7 	vadd.f32	s12, s17, s15
 800fe3c:	ed92 1a00 	vldr	s2, [r2]
 800fe40:	ee78 4ae7 	vsub.f32	s9, s17, s15
 800fe44:	ed1e 4a01 	vldr	s8, [lr, #-4]
 800fe48:	ee75 9a25 	vadd.f32	s19, s10, s11
 800fe4c:	ee31 3a07 	vadd.f32	s6, s2, s14
 800fe50:	ed92 8a01 	vldr	s16, [r2, #4]
 800fe54:	ee73 6a84 	vadd.f32	s13, s7, s8
 800fe58:	ee75 5a65 	vsub.f32	s11, s10, s11
 800fe5c:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800fe60:	ee73 1a06 	vadd.f32	s3, s6, s12
 800fe64:	ee39 5aa6 	vadd.f32	s10, s19, s13
 800fe68:	ee75 7a84 	vadd.f32	s15, s11, s8
 800fe6c:	ee31 1a47 	vsub.f32	s2, s2, s14
 800fe70:	ee31 7a85 	vadd.f32	s14, s3, s10
 800fe74:	ee67 7a89 	vmul.f32	s15, s15, s18
 800fe78:	ee33 3a46 	vsub.f32	s6, s6, s12
 800fe7c:	ed82 7a00 	vstr	s14, [r2]
 800fe80:	ee79 9ae6 	vsub.f32	s19, s19, s13
 800fe84:	ed96 6a00 	vldr	s12, [r6]
 800fe88:	ee34 2aa7 	vadd.f32	s4, s9, s15
 800fe8c:	edd5 3a01 	vldr	s7, [r5, #4]
 800fe90:	ee74 8ae7 	vsub.f32	s17, s9, s15
 800fe94:	ed90 7a01 	vldr	s14, [r0, #4]
 800fe98:	ee35 4ac4 	vsub.f32	s8, s11, s8
 800fe9c:	edde 4a00 	vldr	s9, [lr]
 800fea0:	ee31 5ac5 	vsub.f32	s10, s3, s10
 800fea4:	ee77 2a46 	vsub.f32	s5, s14, s12
 800fea8:	edd1 6a01 	vldr	s13, [r1, #4]
 800feac:	ee73 7ae4 	vsub.f32	s15, s7, s9
 800feb0:	edd7 0a00 	vldr	s1, [r7]
 800feb4:	ee77 5a06 	vadd.f32	s11, s14, s12
 800feb8:	ed94 7a01 	vldr	s14, [r4, #4]
 800febc:	ee33 6aa4 	vadd.f32	s12, s7, s9
 800fec0:	ee32 0ae7 	vsub.f32	s0, s5, s15
 800fec4:	ee78 4a66 	vsub.f32	s9, s16, s13
 800fec8:	ee78 3a26 	vadd.f32	s7, s16, s13
 800fecc:	ee72 2aa7 	vadd.f32	s5, s5, s15
 800fed0:	ee77 6a20 	vadd.f32	s13, s14, s1
 800fed4:	ee24 4a09 	vmul.f32	s8, s8, s18
 800fed8:	ee37 7a60 	vsub.f32	s14, s14, s1
 800fedc:	ee20 8a09 	vmul.f32	s16, s0, s18
 800fee0:	ee75 0a86 	vadd.f32	s1, s11, s12
 800fee4:	ee33 0aa6 	vadd.f32	s0, s7, s13
 800fee8:	ee62 2a89 	vmul.f32	s5, s5, s18
 800feec:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800fef0:	ee73 3ae6 	vsub.f32	s7, s7, s13
 800fef4:	ee77 7a62 	vsub.f32	s15, s14, s5
 800fef8:	ee74 5a88 	vadd.f32	s11, s9, s16
 800fefc:	ee34 8ac8 	vsub.f32	s16, s9, s16
 800ff00:	ee77 4a22 	vadd.f32	s9, s14, s5
 800ff04:	ee71 2a04 	vadd.f32	s5, s2, s8
 800ff08:	ee31 7a44 	vsub.f32	s14, s2, s8
 800ff0c:	ee30 1a60 	vsub.f32	s2, s0, s1
 800ff10:	ee73 1a06 	vadd.f32	s3, s6, s12
 800ff14:	ee33 6a46 	vsub.f32	s12, s6, s12
 800ff18:	ee33 3ae9 	vsub.f32	s6, s7, s19
 800ff1c:	ee79 6aa3 	vadd.f32	s13, s19, s7
 800ff20:	ee38 4a68 	vsub.f32	s8, s16, s17
 800ff24:	ee75 3ac2 	vsub.f32	s7, s11, s4
 800ff28:	ee72 5a25 	vadd.f32	s11, s4, s11
 800ff2c:	ee32 2aa4 	vadd.f32	s4, s5, s9
 800ff30:	ee72 4ae4 	vsub.f32	s9, s5, s9
 800ff34:	ee77 2a27 	vadd.f32	s5, s14, s15
 800ff38:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ff3c:	ee78 7a88 	vadd.f32	s15, s17, s16
 800ff40:	ee6e 8a05 	vmul.f32	s17, s28, s10
 800ff44:	ee2a 8a81 	vmul.f32	s16, s21, s2
 800ff48:	ee2a 5a85 	vmul.f32	s10, s21, s10
 800ff4c:	ee2e 1a01 	vmul.f32	s2, s28, s2
 800ff50:	ee6f 9a21 	vmul.f32	s19, s30, s3
 800ff54:	ee70 0a20 	vadd.f32	s1, s0, s1
 800ff58:	ee6b 1aa1 	vmul.f32	s3, s23, s3
 800ff5c:	ee2b 0a83 	vmul.f32	s0, s23, s6
 800ff60:	ee2f 3a03 	vmul.f32	s6, s30, s6
 800ff64:	edc2 0a01 	vstr	s1, [r2, #4]
 800ff68:	ee38 8a88 	vadd.f32	s16, s17, s16
 800ff6c:	441a      	add	r2, r3
 800ff6e:	ee6c 8a23 	vmul.f32	s17, s24, s7
 800ff72:	ee31 5a45 	vsub.f32	s10, s2, s10
 800ff76:	ee6f 3aa3 	vmul.f32	s7, s31, s7
 800ff7a:	ed81 8a00 	vstr	s16, [r1]
 800ff7e:	ee39 0a80 	vadd.f32	s0, s19, s0
 800ff82:	ee33 3a61 	vsub.f32	s6, s6, s3
 800ff86:	ed81 5a01 	vstr	s10, [r1, #4]
 800ff8a:	ee6f 0a82 	vmul.f32	s1, s31, s4
 800ff8e:	edcd 3a00 	vstr	s7, [sp]
 800ff92:	ed9d 5a02 	vldr	s10, [sp, #8]
 800ff96:	ee2d 8a06 	vmul.f32	s16, s26, s12
 800ff9a:	eddd 3a01 	vldr	s7, [sp, #4]
 800ff9e:	ee6c 9aa4 	vmul.f32	s19, s25, s9
 800ffa2:	ed84 0a00 	vstr	s0, [r4]
 800ffa6:	ee65 4a24 	vmul.f32	s9, s10, s9
 800ffaa:	ed84 3a01 	vstr	s6, [r4, #4]
 800ffae:	ee23 1aa6 	vmul.f32	s2, s7, s13
 800ffb2:	ee23 6a86 	vmul.f32	s12, s7, s12
 800ffb6:	eddd 3a00 	vldr	s7, [sp]
 800ffba:	ee25 5a25 	vmul.f32	s10, s10, s11
 800ffbe:	4419      	add	r1, r3
 800ffc0:	ee2d 0aa2 	vmul.f32	s0, s27, s5
 800ffc4:	441c      	add	r4, r3
 800ffc6:	ee6a 1a04 	vmul.f32	s3, s20, s8
 800ffca:	ee70 0aa8 	vadd.f32	s1, s1, s17
 800ffce:	ee2e 3a87 	vmul.f32	s6, s29, s14
 800ffd2:	ee6b 8a27 	vmul.f32	s17, s22, s15
 800ffd6:	ee2c 2a02 	vmul.f32	s4, s24, s4
 800ffda:	ee6d 6a26 	vmul.f32	s13, s26, s13
 800ffde:	ee6c 5aa5 	vmul.f32	s11, s25, s11
 800ffe2:	ee6a 2a22 	vmul.f32	s5, s20, s5
 800ffe6:	ee2d 4a84 	vmul.f32	s8, s27, s8
 800ffea:	ee2b 7a07 	vmul.f32	s14, s22, s14
 800ffee:	ee6e 7aa7 	vmul.f32	s15, s29, s15
 800fff2:	ee73 3ac2 	vsub.f32	s7, s7, s4
 800fff6:	ee38 8a01 	vadd.f32	s16, s16, s2
 800fffa:	ee36 6ac6 	vsub.f32	s12, s13, s12
 800fffe:	ee39 5a85 	vadd.f32	s10, s19, s10
 8010002:	ee75 4ae4 	vsub.f32	s9, s11, s9
 8010006:	ed07 8a01 	vstr	s16, [r7, #-4]
 801000a:	ee30 0a21 	vadd.f32	s0, s0, s3
 801000e:	ed87 6a00 	vstr	s12, [r7]
 8010012:	ee74 2a62 	vsub.f32	s5, s8, s5
 8010016:	edc0 0a00 	vstr	s1, [r0]
 801001a:	ee33 3a28 	vadd.f32	s6, s6, s17
 801001e:	edc0 3a01 	vstr	s7, [r0, #4]
 8010022:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8010026:	ed0e 5a01 	vstr	s10, [lr, #-4]
 801002a:	edce 4a00 	vstr	s9, [lr]
 801002e:	4418      	add	r0, r3
 8010030:	ed06 0a01 	vstr	s0, [r6, #-4]
 8010034:	441f      	add	r7, r3
 8010036:	edc6 2a00 	vstr	s5, [r6]
 801003a:	449e      	add	lr, r3
 801003c:	ed85 3a00 	vstr	s6, [r5]
 8010040:	441e      	add	r6, r3
 8010042:	ed85 7a01 	vstr	s14, [r5, #4]
 8010046:	441d      	add	r5, r3
 8010048:	f63f aee8 	bhi.w	800fe1c <arm_radix8_butterfly_f32+0x328>
 801004c:	9a06      	ldr	r2, [sp, #24]
 801004e:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8010050:	3201      	adds	r2, #1
 8010052:	4611      	mov	r1, r2
 8010054:	9206      	str	r2, [sp, #24]
 8010056:	9a07      	ldr	r2, [sp, #28]
 8010058:	4402      	add	r2, r0
 801005a:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801005c:	9207      	str	r2, [sp, #28]
 801005e:	9a03      	ldr	r2, [sp, #12]
 8010060:	4402      	add	r2, r0
 8010062:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8010064:	9203      	str	r2, [sp, #12]
 8010066:	9a04      	ldr	r2, [sp, #16]
 8010068:	4402      	add	r2, r0
 801006a:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 801006c:	9204      	str	r2, [sp, #16]
 801006e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8010070:	4491      	add	r9, r2
 8010072:	9a05      	ldr	r2, [sp, #20]
 8010074:	4402      	add	r2, r0
 8010076:	9205      	str	r2, [sp, #20]
 8010078:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801007a:	4490      	add	r8, r2
 801007c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801007e:	3208      	adds	r2, #8
 8010080:	920f      	str	r2, [sp, #60]	@ 0x3c
 8010082:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010084:	3208      	adds	r2, #8
 8010086:	920e      	str	r2, [sp, #56]	@ 0x38
 8010088:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801008a:	3208      	adds	r2, #8
 801008c:	920d      	str	r2, [sp, #52]	@ 0x34
 801008e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8010090:	3208      	adds	r2, #8
 8010092:	920c      	str	r2, [sp, #48]	@ 0x30
 8010094:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010096:	3208      	adds	r2, #8
 8010098:	920b      	str	r2, [sp, #44]	@ 0x2c
 801009a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801009c:	3208      	adds	r2, #8
 801009e:	920a      	str	r2, [sp, #40]	@ 0x28
 80100a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80100a2:	3208      	adds	r2, #8
 80100a4:	9209      	str	r2, [sp, #36]	@ 0x24
 80100a6:	9a08      	ldr	r2, [sp, #32]
 80100a8:	3208      	adds	r2, #8
 80100aa:	9208      	str	r2, [sp, #32]
 80100ac:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80100ae:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80100b0:	4622      	mov	r2, r4
 80100b2:	4288      	cmp	r0, r1
 80100b4:	d005      	beq.n	80100c2 <arm_radix8_butterfly_f32+0x5ce>
 80100b6:	9818      	ldr	r0, [sp, #96]	@ 0x60
 80100b8:	4621      	mov	r1, r4
 80100ba:	4401      	add	r1, r0
 80100bc:	9807      	ldr	r0, [sp, #28]
 80100be:	9110      	str	r1, [sp, #64]	@ 0x40
 80100c0:	e676      	b.n	800fdb0 <arm_radix8_butterfly_f32+0x2bc>
 80100c2:	4683      	mov	fp, r0
 80100c4:	f8bd e060 	ldrh.w	lr, [sp, #96]	@ 0x60
 80100c8:	f8dd c06c 	ldr.w	ip, [sp, #108]	@ 0x6c
 80100cc:	e522      	b.n	800fb14 <arm_radix8_butterfly_f32+0x20>
 80100ce:	b01d      	add	sp, #116	@ 0x74
 80100d0:	ecbd 8b10 	vpop	{d8-d15}
 80100d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080100d8 <ai_buffer_get_size>:
 80100d8:	b368      	cbz	r0, 8010136 <ai_buffer_get_size+0x5e>
 80100da:	4b17      	ldr	r3, [pc, #92]	@ (8010138 <ai_buffer_get_size+0x60>)
 80100dc:	4a17      	ldr	r2, [pc, #92]	@ (801013c <ai_buffer_get_size+0x64>)
 80100de:	b410      	push	{r4}
 80100e0:	6804      	ldr	r4, [r0, #0]
 80100e2:	4023      	ands	r3, r4
 80100e4:	4293      	cmp	r3, r2
 80100e6:	d123      	bne.n	8010130 <ai_buffer_get_size+0x58>
 80100e8:	b311      	cbz	r1, 8010130 <ai_buffer_get_size+0x58>
 80100ea:	6984      	ldr	r4, [r0, #24]
 80100ec:	6862      	ldr	r2, [r4, #4]
 80100ee:	321f      	adds	r2, #31
 80100f0:	f022 021f 	bic.w	r2, r2, #31
 80100f4:	7d03      	ldrb	r3, [r0, #20]
 80100f6:	6941      	ldr	r1, [r0, #20]
 80100f8:	f1a3 0301 	sub.w	r3, r3, #1
 80100fc:	f3c1 2017 	ubfx	r0, r1, #8, #24
 8010100:	fab3 f383 	clz	r3, r3
 8010104:	095b      	lsrs	r3, r3, #5
 8010106:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 801010a:	da0c      	bge.n	8010126 <ai_buffer_get_size+0x4e>
 801010c:	2b01      	cmp	r3, #1
 801010e:	d103      	bne.n	8010118 <ai_buffer_get_size+0x40>
 8010110:	2802      	cmp	r0, #2
 8010112:	f04f 0302 	mov.w	r3, #2
 8010116:	d006      	beq.n	8010126 <ai_buffer_get_size+0x4e>
 8010118:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 801011c:	3301      	adds	r3, #1
 801011e:	4298      	cmp	r0, r3
 8010120:	fb01 f202 	mul.w	r2, r1, r2
 8010124:	d1f2      	bne.n	801010c <ai_buffer_get_size+0x34>
 8010126:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 801012a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801012e:	4770      	bx	lr
 8010130:	6984      	ldr	r4, [r0, #24]
 8010132:	6862      	ldr	r2, [r4, #4]
 8010134:	e7de      	b.n	80100f4 <ai_buffer_get_size+0x1c>
 8010136:	4770      	bx	lr
 8010138:	017fffff 	.word	0x017fffff
 801013c:	000400c0 	.word	0x000400c0

08010140 <ai_buffer_array_sane>:
 8010140:	b138      	cbz	r0, 8010152 <ai_buffer_array_sane+0x12>
 8010142:	6843      	ldr	r3, [r0, #4]
 8010144:	b123      	cbz	r3, 8010150 <ai_buffer_array_sane+0x10>
 8010146:	8840      	ldrh	r0, [r0, #2]
 8010148:	3800      	subs	r0, #0
 801014a:	bf18      	it	ne
 801014c:	2001      	movne	r0, #1
 801014e:	4770      	bx	lr
 8010150:	4618      	mov	r0, r3
 8010152:	4770      	bx	lr

08010154 <ai_buffer_array_item_set_address>:
 8010154:	b150      	cbz	r0, 801016c <ai_buffer_array_item_set_address+0x18>
 8010156:	6843      	ldr	r3, [r0, #4]
 8010158:	b14b      	cbz	r3, 801016e <ai_buffer_array_item_set_address+0x1a>
 801015a:	8840      	ldrh	r0, [r0, #2]
 801015c:	b900      	cbnz	r0, 8010160 <ai_buffer_array_item_set_address+0xc>
 801015e:	4770      	bx	lr
 8010160:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8010164:	2001      	movs	r0, #1
 8010166:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801016a:	605a      	str	r2, [r3, #4]
 801016c:	4770      	bx	lr
 801016e:	4618      	mov	r0, r3
 8010170:	4770      	bx	lr
 8010172:	bf00      	nop

08010174 <ai_platform_get_weights_map>:
 8010174:	2900      	cmp	r1, #0
 8010176:	bf18      	it	ne
 8010178:	2800      	cmpne	r0, #0
 801017a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801017c:	bf0c      	ite	eq
 801017e:	2401      	moveq	r4, #1
 8010180:	2400      	movne	r4, #0
 8010182:	2a00      	cmp	r2, #0
 8010184:	bf08      	it	eq
 8010186:	f044 0401 	orreq.w	r4, r4, #1
 801018a:	b114      	cbz	r4, 8010192 <ai_platform_get_weights_map+0x1e>
 801018c:	2400      	movs	r4, #0
 801018e:	4620      	mov	r0, r4
 8010190:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010192:	4616      	mov	r6, r2
 8010194:	4b22      	ldr	r3, [pc, #136]	@ (8010220 <ai_platform_get_weights_map+0xac>)
 8010196:	6812      	ldr	r2, [r2, #0]
 8010198:	4605      	mov	r5, r0
 801019a:	460f      	mov	r7, r1
 801019c:	429a      	cmp	r2, r3
 801019e:	d022      	beq.n	80101e6 <ai_platform_get_weights_map+0x72>
 80101a0:	6870      	ldr	r0, [r6, #4]
 80101a2:	2800      	cmp	r0, #0
 80101a4:	d0f2      	beq.n	801018c <ai_platform_get_weights_map+0x18>
 80101a6:	6806      	ldr	r6, [r0, #0]
 80101a8:	429e      	cmp	r6, r3
 80101aa:	d006      	beq.n	80101ba <ai_platform_get_weights_map+0x46>
 80101ac:	f1a1 0401 	sub.w	r4, r1, #1
 80101b0:	6028      	str	r0, [r5, #0]
 80101b2:	fab4 f484 	clz	r4, r4
 80101b6:	0964      	lsrs	r4, r4, #5
 80101b8:	e7e9      	b.n	801018e <ai_platform_get_weights_map+0x1a>
 80101ba:	3d04      	subs	r5, #4
 80101bc:	4602      	mov	r2, r0
 80101be:	4621      	mov	r1, r4
 80101c0:	e000      	b.n	80101c4 <ai_platform_get_weights_map+0x50>
 80101c2:	4619      	mov	r1, r3
 80101c4:	f852 3f04 	ldr.w	r3, [r2, #4]!
 80101c8:	42b3      	cmp	r3, r6
 80101ca:	d025      	beq.n	8010218 <ai_platform_get_weights_map+0xa4>
 80101cc:	f845 3f04 	str.w	r3, [r5, #4]!
 80101d0:	1c4b      	adds	r3, r1, #1
 80101d2:	429f      	cmp	r7, r3
 80101d4:	d8f5      	bhi.n	80101c2 <ai_platform_get_weights_map+0x4e>
 80101d6:	d1da      	bne.n	801018e <ai_platform_get_weights_map+0x1a>
 80101d8:	3102      	adds	r1, #2
 80101da:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 80101de:	42b3      	cmp	r3, r6
 80101e0:	d1d5      	bne.n	801018e <ai_platform_get_weights_map+0x1a>
 80101e2:	2401      	movs	r4, #1
 80101e4:	e7d3      	b.n	801018e <ai_platform_get_weights_map+0x1a>
 80101e6:	1d30      	adds	r0, r6, #4
 80101e8:	f7ff ffaa 	bl	8010140 <ai_buffer_array_sane>
 80101ec:	2800      	cmp	r0, #0
 80101ee:	d0cd      	beq.n	801018c <ai_platform_get_weights_map+0x18>
 80101f0:	88f3      	ldrh	r3, [r6, #6]
 80101f2:	429f      	cmp	r7, r3
 80101f4:	d1ca      	bne.n	801018c <ai_platform_get_weights_map+0x18>
 80101f6:	3d04      	subs	r5, #4
 80101f8:	4622      	mov	r2, r4
 80101fa:	68b3      	ldr	r3, [r6, #8]
 80101fc:	4423      	add	r3, r4
 80101fe:	341c      	adds	r4, #28
 8010200:	685b      	ldr	r3, [r3, #4]
 8010202:	b123      	cbz	r3, 801020e <ai_platform_get_weights_map+0x9a>
 8010204:	3201      	adds	r2, #1
 8010206:	f845 3f04 	str.w	r3, [r5, #4]!
 801020a:	4297      	cmp	r7, r2
 801020c:	d8f5      	bhi.n	80101fa <ai_platform_get_weights_map+0x86>
 801020e:	1abc      	subs	r4, r7, r2
 8010210:	fab4 f484 	clz	r4, r4
 8010214:	0964      	lsrs	r4, r4, #5
 8010216:	e7ba      	b.n	801018e <ai_platform_get_weights_map+0x1a>
 8010218:	428f      	cmp	r7, r1
 801021a:	d1b8      	bne.n	801018e <ai_platform_get_weights_map+0x1a>
 801021c:	e7e1      	b.n	80101e2 <ai_platform_get_weights_map+0x6e>
 801021e:	bf00      	nop
 8010220:	a1facade 	.word	0xa1facade

08010224 <ai_platform_get_activations_map>:
 8010224:	2900      	cmp	r1, #0
 8010226:	bf18      	it	ne
 8010228:	2800      	cmpne	r0, #0
 801022a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801022c:	bf0c      	ite	eq
 801022e:	2401      	moveq	r4, #1
 8010230:	2400      	movne	r4, #0
 8010232:	2a00      	cmp	r2, #0
 8010234:	bf08      	it	eq
 8010236:	f044 0401 	orreq.w	r4, r4, #1
 801023a:	b114      	cbz	r4, 8010242 <ai_platform_get_activations_map+0x1e>
 801023c:	2400      	movs	r4, #0
 801023e:	4620      	mov	r0, r4
 8010240:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010242:	4616      	mov	r6, r2
 8010244:	4b22      	ldr	r3, [pc, #136]	@ (80102d0 <ai_platform_get_activations_map+0xac>)
 8010246:	6812      	ldr	r2, [r2, #0]
 8010248:	4605      	mov	r5, r0
 801024a:	460f      	mov	r7, r1
 801024c:	429a      	cmp	r2, r3
 801024e:	d022      	beq.n	8010296 <ai_platform_get_activations_map+0x72>
 8010250:	6a30      	ldr	r0, [r6, #32]
 8010252:	2800      	cmp	r0, #0
 8010254:	d0f2      	beq.n	801023c <ai_platform_get_activations_map+0x18>
 8010256:	6806      	ldr	r6, [r0, #0]
 8010258:	429e      	cmp	r6, r3
 801025a:	d006      	beq.n	801026a <ai_platform_get_activations_map+0x46>
 801025c:	f1a1 0401 	sub.w	r4, r1, #1
 8010260:	6028      	str	r0, [r5, #0]
 8010262:	fab4 f484 	clz	r4, r4
 8010266:	0964      	lsrs	r4, r4, #5
 8010268:	e7e9      	b.n	801023e <ai_platform_get_activations_map+0x1a>
 801026a:	3d04      	subs	r5, #4
 801026c:	4602      	mov	r2, r0
 801026e:	4621      	mov	r1, r4
 8010270:	e000      	b.n	8010274 <ai_platform_get_activations_map+0x50>
 8010272:	4619      	mov	r1, r3
 8010274:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8010278:	42b3      	cmp	r3, r6
 801027a:	d026      	beq.n	80102ca <ai_platform_get_activations_map+0xa6>
 801027c:	f845 3f04 	str.w	r3, [r5, #4]!
 8010280:	1c4b      	adds	r3, r1, #1
 8010282:	429f      	cmp	r7, r3
 8010284:	d8f5      	bhi.n	8010272 <ai_platform_get_activations_map+0x4e>
 8010286:	d1da      	bne.n	801023e <ai_platform_get_activations_map+0x1a>
 8010288:	3102      	adds	r1, #2
 801028a:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 801028e:	42b3      	cmp	r3, r6
 8010290:	d1d5      	bne.n	801023e <ai_platform_get_activations_map+0x1a>
 8010292:	2401      	movs	r4, #1
 8010294:	e7d3      	b.n	801023e <ai_platform_get_activations_map+0x1a>
 8010296:	f106 000c 	add.w	r0, r6, #12
 801029a:	f7ff ff51 	bl	8010140 <ai_buffer_array_sane>
 801029e:	2800      	cmp	r0, #0
 80102a0:	d0cc      	beq.n	801023c <ai_platform_get_activations_map+0x18>
 80102a2:	89f3      	ldrh	r3, [r6, #14]
 80102a4:	429f      	cmp	r7, r3
 80102a6:	d1c9      	bne.n	801023c <ai_platform_get_activations_map+0x18>
 80102a8:	3d04      	subs	r5, #4
 80102aa:	4622      	mov	r2, r4
 80102ac:	6933      	ldr	r3, [r6, #16]
 80102ae:	4423      	add	r3, r4
 80102b0:	341c      	adds	r4, #28
 80102b2:	685b      	ldr	r3, [r3, #4]
 80102b4:	b123      	cbz	r3, 80102c0 <ai_platform_get_activations_map+0x9c>
 80102b6:	3201      	adds	r2, #1
 80102b8:	f845 3f04 	str.w	r3, [r5, #4]!
 80102bc:	4297      	cmp	r7, r2
 80102be:	d8f5      	bhi.n	80102ac <ai_platform_get_activations_map+0x88>
 80102c0:	1abc      	subs	r4, r7, r2
 80102c2:	fab4 f484 	clz	r4, r4
 80102c6:	0964      	lsrs	r4, r4, #5
 80102c8:	e7b9      	b.n	801023e <ai_platform_get_activations_map+0x1a>
 80102ca:	428f      	cmp	r7, r1
 80102cc:	d1b7      	bne.n	801023e <ai_platform_get_activations_map+0x1a>
 80102ce:	e7e0      	b.n	8010292 <ai_platform_get_activations_map+0x6e>
 80102d0:	a1facade 	.word	0xa1facade

080102d4 <ai_platform_bind_network_params>:
 80102d4:	2a00      	cmp	r2, #0
 80102d6:	bf18      	it	ne
 80102d8:	2900      	cmpne	r1, #0
 80102da:	d010      	beq.n	80102fe <ai_platform_bind_network_params+0x2a>
 80102dc:	b178      	cbz	r0, 80102fe <ai_platform_bind_network_params+0x2a>
 80102de:	4603      	mov	r3, r0
 80102e0:	4808      	ldr	r0, [pc, #32]	@ (8010304 <ai_platform_bind_network_params+0x30>)
 80102e2:	f103 0c0c 	add.w	ip, r3, #12
 80102e6:	f843 0b04 	str.w	r0, [r3], #4
 80102ea:	c903      	ldmia	r1, {r0, r1}
 80102ec:	e883 0003 	stmia.w	r3, {r0, r1}
 80102f0:	2301      	movs	r3, #1
 80102f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80102f6:	e88c 0003 	stmia.w	ip, {r0, r1}
 80102fa:	4618      	mov	r0, r3
 80102fc:	4770      	bx	lr
 80102fe:	2300      	movs	r3, #0
 8010300:	4618      	mov	r0, r3
 8010302:	4770      	bx	lr
 8010304:	a1facade 	.word	0xa1facade

08010308 <ai_platform_network_get_error>:
 8010308:	4b04      	ldr	r3, [pc, #16]	@ (801031c <ai_platform_network_get_error+0x14>)
 801030a:	6802      	ldr	r2, [r0, #0]
 801030c:	4393      	bics	r3, r2
 801030e:	d102      	bne.n	8010316 <ai_platform_network_get_error+0xe>
 8010310:	300c      	adds	r0, #12
 8010312:	f000 ba2d 	b.w	8010770 <core_get_error>
 8010316:	f241 0010 	movw	r0, #4112	@ 0x1010
 801031a:	4770      	bx	lr
 801031c:	a1c00100 	.word	0xa1c00100

08010320 <ai_platform_network_set_error>:
 8010320:	b110      	cbz	r0, 8010328 <ai_platform_network_set_error+0x8>
 8010322:	300c      	adds	r0, #12
 8010324:	f000 ba2a 	b.w	801077c <core_set_error>
 8010328:	4770      	bx	lr
 801032a:	bf00      	nop

0801032c <ai_platform_inputs_get>:
 801032c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010330:	4b39      	ldr	r3, [pc, #228]	@ (8010418 <ai_platform_inputs_get+0xec>)
 8010332:	b085      	sub	sp, #20
 8010334:	6802      	ldr	r2, [r0, #0]
 8010336:	4393      	bics	r3, r2
 8010338:	e9cd 1002 	strd	r1, r0, [sp, #8]
 801033c:	d162      	bne.n	8010404 <ai_platform_inputs_get+0xd8>
 801033e:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8010340:	2b00      	cmp	r3, #0
 8010342:	d051      	beq.n	80103e8 <ai_platform_inputs_get+0xbc>
 8010344:	f8d0 a034 	ldr.w	sl, [r0, #52]	@ 0x34
 8010348:	f1ba 0f00 	cmp.w	sl, #0
 801034c:	d04c      	beq.n	80103e8 <ai_platform_inputs_get+0xbc>
 801034e:	f04f 0900 	mov.w	r9, #0
 8010352:	464d      	mov	r5, r9
 8010354:	e016      	b.n	8010384 <ai_platform_inputs_get+0x58>
 8010356:	9901      	ldr	r1, [sp, #4]
 8010358:	2301      	movs	r3, #1
 801035a:	f848 3001 	str.w	r3, [r8, r1]
 801035e:	69b1      	ldr	r1, [r6, #24]
 8010360:	f04f 0301 	mov.w	r3, #1
 8010364:	684e      	ldr	r6, [r1, #4]
 8010366:	3501      	adds	r5, #1
 8010368:	f109 091c 	add.w	r9, r9, #28
 801036c:	7523      	strb	r3, [r4, #20]
 801036e:	2300      	movs	r3, #0
 8010370:	6961      	ldr	r1, [r4, #20]
 8010372:	6020      	str	r0, [r4, #0]
 8010374:	f36b 211f 	bfi	r1, fp, #8, #24
 8010378:	e9c4 c701 	strd	ip, r7, [r4, #4]
 801037c:	e9c4 3603 	strd	r3, r6, [r4, #12]
 8010380:	e9c4 1205 	strd	r1, r2, [r4, #20]
 8010384:	f8ba 3000 	ldrh.w	r3, [sl]
 8010388:	b2ac      	uxth	r4, r5
 801038a:	42ab      	cmp	r3, r5
 801038c:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 8010390:	9301      	str	r3, [sp, #4]
 8010392:	d93b      	bls.n	801040c <ai_platform_inputs_get+0xe0>
 8010394:	f8da 3004 	ldr.w	r3, [sl, #4]
 8010398:	2b00      	cmp	r3, #0
 801039a:	d037      	beq.n	801040c <ai_platform_inputs_get+0xe0>
 801039c:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 80103a0:	2e00      	cmp	r6, #0
 80103a2:	d033      	beq.n	801040c <ai_platform_inputs_get+0xe0>
 80103a4:	f8da 3008 	ldr.w	r3, [sl, #8]
 80103a8:	69b2      	ldr	r2, [r6, #24]
 80103aa:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 80103ae:	6810      	ldr	r0, [r2, #0]
 80103b0:	68b3      	ldr	r3, [r6, #8]
 80103b2:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 80103b6:	68f2      	ldr	r2, [r6, #12]
 80103b8:	444c      	add	r4, r9
 80103ba:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 80103be:	9200      	str	r2, [sp, #0]
 80103c0:	f002 fd86 	bl	8012ed0 <ai_array_to_buffer_fmt>
 80103c4:	69b1      	ldr	r1, [r6, #24]
 80103c6:	9a00      	ldr	r2, [sp, #0]
 80103c8:	f8d1 c008 	ldr.w	ip, [r1, #8]
 80103cc:	2f00      	cmp	r7, #0
 80103ce:	d0c7      	beq.n	8010360 <ai_platform_inputs_get+0x34>
 80103d0:	2100      	movs	r1, #0
 80103d2:	f848 1035 	str.w	r1, [r8, r5, lsl #3]
 80103d6:	6831      	ldr	r1, [r6, #0]
 80103d8:	6079      	str	r1, [r7, #4]
 80103da:	b111      	cbz	r1, 80103e2 <ai_platform_inputs_get+0xb6>
 80103dc:	8849      	ldrh	r1, [r1, #2]
 80103de:	2900      	cmp	r1, #0
 80103e0:	d1b9      	bne.n	8010356 <ai_platform_inputs_get+0x2a>
 80103e2:	69b1      	ldr	r1, [r6, #24]
 80103e4:	2700      	movs	r7, #0
 80103e6:	e7bb      	b.n	8010360 <ai_platform_inputs_get+0x34>
 80103e8:	9803      	ldr	r0, [sp, #12]
 80103ea:	2400      	movs	r4, #0
 80103ec:	2218      	movs	r2, #24
 80103ee:	2111      	movs	r1, #17
 80103f0:	300c      	adds	r0, #12
 80103f2:	f000 f9c3 	bl	801077c <core_set_error>
 80103f6:	4620      	mov	r0, r4
 80103f8:	9b02      	ldr	r3, [sp, #8]
 80103fa:	b103      	cbz	r3, 80103fe <ai_platform_inputs_get+0xd2>
 80103fc:	801c      	strh	r4, [r3, #0]
 80103fe:	b005      	add	sp, #20
 8010400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010404:	2000      	movs	r0, #0
 8010406:	b005      	add	sp, #20
 8010408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801040c:	2c00      	cmp	r4, #0
 801040e:	d0eb      	beq.n	80103e8 <ai_platform_inputs_get+0xbc>
 8010410:	f8da 3008 	ldr.w	r3, [sl, #8]
 8010414:	6858      	ldr	r0, [r3, #4]
 8010416:	e7ef      	b.n	80103f8 <ai_platform_inputs_get+0xcc>
 8010418:	a1c00100 	.word	0xa1c00100

0801041c <ai_platform_outputs_get>:
 801041c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010420:	4b38      	ldr	r3, [pc, #224]	@ (8010504 <ai_platform_outputs_get+0xe8>)
 8010422:	b085      	sub	sp, #20
 8010424:	6802      	ldr	r2, [r0, #0]
 8010426:	4393      	bics	r3, r2
 8010428:	e9cd 1002 	strd	r1, r0, [sp, #8]
 801042c:	d15f      	bne.n	80104ee <ai_platform_outputs_get+0xd2>
 801042e:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8010430:	2b01      	cmp	r3, #1
 8010432:	d94e      	bls.n	80104d2 <ai_platform_outputs_get+0xb6>
 8010434:	f04f 0900 	mov.w	r9, #0
 8010438:	f8d0 a034 	ldr.w	sl, [r0, #52]	@ 0x34
 801043c:	464d      	mov	r5, r9
 801043e:	e016      	b.n	801046e <ai_platform_outputs_get+0x52>
 8010440:	9901      	ldr	r1, [sp, #4]
 8010442:	2301      	movs	r3, #1
 8010444:	f848 3001 	str.w	r3, [r8, r1]
 8010448:	69b1      	ldr	r1, [r6, #24]
 801044a:	f04f 0301 	mov.w	r3, #1
 801044e:	684e      	ldr	r6, [r1, #4]
 8010450:	3501      	adds	r5, #1
 8010452:	f109 091c 	add.w	r9, r9, #28
 8010456:	7523      	strb	r3, [r4, #20]
 8010458:	2300      	movs	r3, #0
 801045a:	6961      	ldr	r1, [r4, #20]
 801045c:	6020      	str	r0, [r4, #0]
 801045e:	f36b 211f 	bfi	r1, fp, #8, #24
 8010462:	e9c4 c701 	strd	ip, r7, [r4, #4]
 8010466:	e9c4 3603 	strd	r3, r6, [r4, #12]
 801046a:	e9c4 1205 	strd	r1, r2, [r4, #20]
 801046e:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8010472:	b2ac      	uxth	r4, r5
 8010474:	42ab      	cmp	r3, r5
 8010476:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 801047a:	9301      	str	r3, [sp, #4]
 801047c:	d93b      	bls.n	80104f6 <ai_platform_outputs_get+0xda>
 801047e:	f8da 3010 	ldr.w	r3, [sl, #16]
 8010482:	2b00      	cmp	r3, #0
 8010484:	d037      	beq.n	80104f6 <ai_platform_outputs_get+0xda>
 8010486:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 801048a:	2e00      	cmp	r6, #0
 801048c:	d033      	beq.n	80104f6 <ai_platform_outputs_get+0xda>
 801048e:	f8da 3014 	ldr.w	r3, [sl, #20]
 8010492:	69b2      	ldr	r2, [r6, #24]
 8010494:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 8010498:	6810      	ldr	r0, [r2, #0]
 801049a:	68b3      	ldr	r3, [r6, #8]
 801049c:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 80104a0:	68f2      	ldr	r2, [r6, #12]
 80104a2:	444c      	add	r4, r9
 80104a4:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 80104a8:	9200      	str	r2, [sp, #0]
 80104aa:	f002 fd11 	bl	8012ed0 <ai_array_to_buffer_fmt>
 80104ae:	69b1      	ldr	r1, [r6, #24]
 80104b0:	9a00      	ldr	r2, [sp, #0]
 80104b2:	f8d1 c008 	ldr.w	ip, [r1, #8]
 80104b6:	2f00      	cmp	r7, #0
 80104b8:	d0c7      	beq.n	801044a <ai_platform_outputs_get+0x2e>
 80104ba:	2100      	movs	r1, #0
 80104bc:	f848 1035 	str.w	r1, [r8, r5, lsl #3]
 80104c0:	6831      	ldr	r1, [r6, #0]
 80104c2:	6079      	str	r1, [r7, #4]
 80104c4:	b111      	cbz	r1, 80104cc <ai_platform_outputs_get+0xb0>
 80104c6:	8849      	ldrh	r1, [r1, #2]
 80104c8:	2900      	cmp	r1, #0
 80104ca:	d1b9      	bne.n	8010440 <ai_platform_outputs_get+0x24>
 80104cc:	69b1      	ldr	r1, [r6, #24]
 80104ce:	2700      	movs	r7, #0
 80104d0:	e7bb      	b.n	801044a <ai_platform_outputs_get+0x2e>
 80104d2:	9803      	ldr	r0, [sp, #12]
 80104d4:	2400      	movs	r4, #0
 80104d6:	2218      	movs	r2, #24
 80104d8:	2111      	movs	r1, #17
 80104da:	300c      	adds	r0, #12
 80104dc:	f000 f94e 	bl	801077c <core_set_error>
 80104e0:	4620      	mov	r0, r4
 80104e2:	9b02      	ldr	r3, [sp, #8]
 80104e4:	b103      	cbz	r3, 80104e8 <ai_platform_outputs_get+0xcc>
 80104e6:	801c      	strh	r4, [r3, #0]
 80104e8:	b005      	add	sp, #20
 80104ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104ee:	2000      	movs	r0, #0
 80104f0:	b005      	add	sp, #20
 80104f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104f6:	2c00      	cmp	r4, #0
 80104f8:	d0eb      	beq.n	80104d2 <ai_platform_outputs_get+0xb6>
 80104fa:	f8da 3014 	ldr.w	r3, [sl, #20]
 80104fe:	6858      	ldr	r0, [r3, #4]
 8010500:	e7ef      	b.n	80104e2 <ai_platform_outputs_get+0xc6>
 8010502:	bf00      	nop
 8010504:	a1c00100 	.word	0xa1c00100

08010508 <ai_platform_network_create>:
 8010508:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801050c:	b083      	sub	sp, #12
 801050e:	f89d 8028 	ldrb.w	r8, [sp, #40]	@ 0x28
 8010512:	f89d 902c 	ldrb.w	r9, [sp, #44]	@ 0x2c
 8010516:	b320      	cbz	r0, 8010562 <ai_platform_network_create+0x5a>
 8010518:	6002      	str	r2, [r0, #0]
 801051a:	4616      	mov	r6, r2
 801051c:	461f      	mov	r7, r3
 801051e:	4604      	mov	r4, r0
 8010520:	f000 f924 	bl	801076c <core_init>
 8010524:	b970      	cbnz	r0, 8010544 <ai_platform_network_create+0x3c>
 8010526:	2530      	movs	r5, #48	@ 0x30
 8010528:	2300      	movs	r3, #0
 801052a:	6023      	str	r3, [r4, #0]
 801052c:	2410      	movs	r4, #16
 801052e:	464a      	mov	r2, r9
 8010530:	4641      	mov	r1, r8
 8010532:	4638      	mov	r0, r7
 8010534:	f002 fd64 	bl	8013000 <ai_version_get>
 8010538:	60b0      	str	r0, [r6, #8]
 801053a:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 801053e:	b003      	add	sp, #12
 8010540:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010544:	2200      	movs	r2, #0
 8010546:	4641      	mov	r1, r8
 8010548:	4638      	mov	r0, r7
 801054a:	f002 fd59 	bl	8013000 <ai_version_get>
 801054e:	4605      	mov	r5, r0
 8010550:	2200      	movs	r2, #0
 8010552:	2105      	movs	r1, #5
 8010554:	2001      	movs	r0, #1
 8010556:	f002 fd53 	bl	8013000 <ai_version_get>
 801055a:	4285      	cmp	r5, r0
 801055c:	d008      	beq.n	8010570 <ai_platform_network_create+0x68>
 801055e:	2501      	movs	r5, #1
 8010560:	e7e2      	b.n	8010528 <ai_platform_network_create+0x20>
 8010562:	2510      	movs	r5, #16
 8010564:	462c      	mov	r4, r5
 8010566:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 801056a:	b003      	add	sp, #12
 801056c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010570:	4b05      	ldr	r3, [pc, #20]	@ (8010588 <ai_platform_network_create+0x80>)
 8010572:	a801      	add	r0, sp, #4
 8010574:	9301      	str	r3, [sp, #4]
 8010576:	f000 f90d 	bl	8010794 <ai_check_custom_types>
 801057a:	b110      	cbz	r0, 8010582 <ai_platform_network_create+0x7a>
 801057c:	2400      	movs	r4, #0
 801057e:	4625      	mov	r5, r4
 8010580:	e7d5      	b.n	801052e <ai_platform_network_create+0x26>
 8010582:	2502      	movs	r5, #2
 8010584:	e7d0      	b.n	8010528 <ai_platform_network_create+0x20>
 8010586:	bf00      	nop
 8010588:	84048403 	.word	0x84048403

0801058c <ai_platform_network_init>:
 801058c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010590:	4a5c      	ldr	r2, [pc, #368]	@ (8010704 <ai_platform_network_init+0x178>)
 8010592:	460c      	mov	r4, r1
 8010594:	6801      	ldr	r1, [r0, #0]
 8010596:	438a      	bics	r2, r1
 8010598:	d133      	bne.n	8010602 <ai_platform_network_init+0x76>
 801059a:	4605      	mov	r5, r0
 801059c:	2c00      	cmp	r4, #0
 801059e:	f000 8093 	beq.w	80106c8 <ai_platform_network_init+0x13c>
 80105a2:	f8d4 b000 	ldr.w	fp, [r4]
 80105a6:	4a58      	ldr	r2, [pc, #352]	@ (8010708 <ai_platform_network_init+0x17c>)
 80105a8:	4593      	cmp	fp, r2
 80105aa:	d10f      	bne.n	80105cc <ai_platform_network_init+0x40>
 80105ac:	e9d4 e803 	ldrd	lr, r8, [r4, #12]
 80105b0:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 80105b4:	4b53      	ldr	r3, [pc, #332]	@ (8010704 <ai_platform_network_init+0x178>)
 80105b6:	ea4f 4a1e 	mov.w	sl, lr, lsr #16
 80105ba:	0c32      	lsrs	r2, r6, #16
 80105bc:	4299      	cmp	r1, r3
 80105be:	d02c      	beq.n	801061a <ai_platform_network_init+0x8e>
 80105c0:	2303      	movs	r3, #3
 80105c2:	462c      	mov	r4, r5
 80105c4:	612b      	str	r3, [r5, #16]
 80105c6:	4620      	mov	r0, r4
 80105c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105cc:	4627      	mov	r7, r4
 80105ce:	2101      	movs	r1, #1
 80105d0:	6864      	ldr	r4, [r4, #4]
 80105d2:	4638      	mov	r0, r7
 80105d4:	f107 081c 	add.w	r8, r7, #28
 80105d8:	f7ff fd7e 	bl	80100d8 <ai_buffer_get_size>
 80105dc:	4606      	mov	r6, r0
 80105de:	2101      	movs	r1, #1
 80105e0:	4640      	mov	r0, r8
 80105e2:	f8d7 9020 	ldr.w	r9, [r7, #32]
 80105e6:	f7ff fd77 	bl	80100d8 <ai_buffer_get_size>
 80105ea:	b976      	cbnz	r6, 801060a <ai_platform_network_init+0x7e>
 80105ec:	2800      	cmp	r0, #0
 80105ee:	d150      	bne.n	8010692 <ai_platform_network_init+0x106>
 80105f0:	4680      	mov	r8, r0
 80105f2:	4686      	mov	lr, r0
 80105f4:	4606      	mov	r6, r0
 80105f6:	4607      	mov	r7, r0
 80105f8:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
 80105fc:	6829      	ldr	r1, [r5, #0]
 80105fe:	0436      	lsls	r6, r6, #16
 8010600:	e7d8      	b.n	80105b4 <ai_platform_network_init+0x28>
 8010602:	2400      	movs	r4, #0
 8010604:	4620      	mov	r0, r4
 8010606:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801060a:	2800      	cmp	r0, #0
 801060c:	d13b      	bne.n	8010686 <ai_platform_network_init+0xfa>
 801060e:	4680      	mov	r8, r0
 8010610:	4686      	mov	lr, r0
 8010612:	2c00      	cmp	r4, #0
 8010614:	d05e      	beq.n	80106d4 <ai_platform_network_init+0x148>
 8010616:	2601      	movs	r6, #1
 8010618:	e7ee      	b.n	80105f8 <ai_platform_network_init+0x6c>
 801061a:	8c6b      	ldrh	r3, [r5, #34]	@ 0x22
 801061c:	4293      	cmp	r3, r2
 801061e:	4b3a      	ldr	r3, [pc, #232]	@ (8010708 <ai_platform_network_init+0x17c>)
 8010620:	d33e      	bcc.n	80106a0 <ai_platform_network_init+0x114>
 8010622:	459b      	cmp	fp, r3
 8010624:	d03e      	beq.n	80106a4 <ai_platform_network_init+0x118>
 8010626:	b1a2      	cbz	r2, 8010652 <ai_platform_network_init+0xc6>
 8010628:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 801062c:	f04f 0c00 	mov.w	ip, #0
 8010630:	ea4f 0982 	mov.w	r9, r2, lsl #2
 8010634:	6a6c      	ldr	r4, [r5, #36]	@ 0x24
 8010636:	eb07 0b0c 	add.w	fp, r7, ip
 801063a:	4464      	add	r4, ip
 801063c:	f10c 0c1c 	add.w	ip, ip, #28
 8010640:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 8010644:	45cc      	cmp	ip, r9
 8010646:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010648:	e89b 0007 	ldmia.w	fp, {r0, r1, r2}
 801064c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8010650:	d1f0      	bne.n	8010634 <ai_platform_network_init+0xa8>
 8010652:	8d6b      	ldrh	r3, [r5, #42]	@ 0x2a
 8010654:	622e      	str	r6, [r5, #32]
 8010656:	4553      	cmp	r3, sl
 8010658:	d34b      	bcc.n	80106f2 <ai_platform_network_init+0x166>
 801065a:	f1ba 0f00 	cmp.w	sl, #0
 801065e:	d025      	beq.n	80106ac <ai_platform_network_init+0x120>
 8010660:	ebca 0aca 	rsb	sl, sl, sl, lsl #3
 8010664:	2700      	movs	r7, #0
 8010666:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 801066a:	6aec      	ldr	r4, [r5, #44]	@ 0x2c
 801066c:	eb08 0607 	add.w	r6, r8, r7
 8010670:	443c      	add	r4, r7
 8010672:	371c      	adds	r7, #28
 8010674:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8010676:	4557      	cmp	r7, sl
 8010678:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801067a:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 801067e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8010682:	d1f2      	bne.n	801066a <ai_platform_network_init+0xde>
 8010684:	e012      	b.n	80106ac <ai_platform_network_init+0x120>
 8010686:	f1b9 0f00 	cmp.w	r9, #0
 801068a:	d015      	beq.n	80106b8 <ai_platform_network_init+0x12c>
 801068c:	f04f 0e01 	mov.w	lr, #1
 8010690:	e7bf      	b.n	8010612 <ai_platform_network_init+0x86>
 8010692:	f1b9 0f00 	cmp.w	r9, #0
 8010696:	d00f      	beq.n	80106b8 <ai_platform_network_init+0x12c>
 8010698:	f04f 0e01 	mov.w	lr, #1
 801069c:	4637      	mov	r7, r6
 801069e:	e7ab      	b.n	80105f8 <ai_platform_network_init+0x6c>
 80106a0:	459b      	cmp	fp, r3
 80106a2:	d11e      	bne.n	80106e2 <ai_platform_network_init+0x156>
 80106a4:	f8c5 802c 	str.w	r8, [r5, #44]	@ 0x2c
 80106a8:	e9c5 6708 	strd	r6, r7, [r5, #32]
 80106ac:	4628      	mov	r0, r5
 80106ae:	f8c5 e028 	str.w	lr, [r5, #40]	@ 0x28
 80106b2:	f000 f897 	bl	80107e4 <ai_layers_init_all>
 80106b6:	e783      	b.n	80105c0 <ai_platform_network_init+0x34>
 80106b8:	2213      	movs	r2, #19
 80106ba:	2110      	movs	r1, #16
 80106bc:	f105 000c 	add.w	r0, r5, #12
 80106c0:	2400      	movs	r4, #0
 80106c2:	f000 f85b 	bl	801077c <core_set_error>
 80106c6:	e77e      	b.n	80105c6 <ai_platform_network_init+0x3a>
 80106c8:	2211      	movs	r2, #17
 80106ca:	2110      	movs	r1, #16
 80106cc:	300c      	adds	r0, #12
 80106ce:	f000 f855 	bl	801077c <core_set_error>
 80106d2:	e778      	b.n	80105c6 <ai_platform_network_init+0x3a>
 80106d4:	2212      	movs	r2, #18
 80106d6:	2110      	movs	r1, #16
 80106d8:	f105 000c 	add.w	r0, r5, #12
 80106dc:	f000 f84e 	bl	801077c <core_set_error>
 80106e0:	e771      	b.n	80105c6 <ai_platform_network_init+0x3a>
 80106e2:	2212      	movs	r2, #18
 80106e4:	2116      	movs	r1, #22
 80106e6:	f105 000c 	add.w	r0, r5, #12
 80106ea:	2400      	movs	r4, #0
 80106ec:	f000 f846 	bl	801077c <core_set_error>
 80106f0:	e769      	b.n	80105c6 <ai_platform_network_init+0x3a>
 80106f2:	2213      	movs	r2, #19
 80106f4:	2116      	movs	r1, #22
 80106f6:	f105 000c 	add.w	r0, r5, #12
 80106fa:	2400      	movs	r4, #0
 80106fc:	f000 f83e 	bl	801077c <core_set_error>
 8010700:	e761      	b.n	80105c6 <ai_platform_network_init+0x3a>
 8010702:	bf00      	nop
 8010704:	a1c00100 	.word	0xa1c00100
 8010708:	a1facade 	.word	0xa1facade

0801070c <ai_platform_network_post_init>:
 801070c:	b538      	push	{r3, r4, r5, lr}
 801070e:	4b16      	ldr	r3, [pc, #88]	@ (8010768 <ai_platform_network_post_init+0x5c>)
 8010710:	6802      	ldr	r2, [r0, #0]
 8010712:	ea02 0103 	and.w	r1, r2, r3
 8010716:	4393      	bics	r3, r2
 8010718:	d108      	bne.n	801072c <ai_platform_network_post_init+0x20>
 801071a:	6903      	ldr	r3, [r0, #16]
 801071c:	4604      	mov	r4, r0
 801071e:	f013 0502 	ands.w	r5, r3, #2
 8010722:	d005      	beq.n	8010730 <ai_platform_network_post_init+0x24>
 8010724:	428a      	cmp	r2, r1
 8010726:	d00a      	beq.n	801073e <ai_platform_network_post_init+0x32>
 8010728:	2001      	movs	r0, #1
 801072a:	bd38      	pop	{r3, r4, r5, pc}
 801072c:	2000      	movs	r0, #0
 801072e:	bd38      	pop	{r3, r4, r5, pc}
 8010730:	2210      	movs	r2, #16
 8010732:	2111      	movs	r1, #17
 8010734:	300c      	adds	r0, #12
 8010736:	f000 f821 	bl	801077c <core_set_error>
 801073a:	4628      	mov	r0, r5
 801073c:	bd38      	pop	{r3, r4, r5, pc}
 801073e:	f000 f85f 	bl	8010800 <ai_layers_post_init_all>
 8010742:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010744:	2b00      	cmp	r3, #0
 8010746:	d0ef      	beq.n	8010728 <ai_platform_network_post_init+0x1c>
 8010748:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 801074a:	e008      	b.n	801075e <ai_platform_network_post_init+0x52>
 801074c:	e9d4 3210 	ldrd	r3, r2, [r4, #64]	@ 0x40
 8010750:	4798      	blx	r3
 8010752:	692b      	ldr	r3, [r5, #16]
 8010754:	42ab      	cmp	r3, r5
 8010756:	461d      	mov	r5, r3
 8010758:	d0e6      	beq.n	8010728 <ai_platform_network_post_init+0x1c>
 801075a:	2b00      	cmp	r3, #0
 801075c:	d0e4      	beq.n	8010728 <ai_platform_network_post_init+0x1c>
 801075e:	4629      	mov	r1, r5
 8010760:	2000      	movs	r0, #0
 8010762:	2d00      	cmp	r5, #0
 8010764:	d1f2      	bne.n	801074c <ai_platform_network_post_init+0x40>
 8010766:	e7df      	b.n	8010728 <ai_platform_network_post_init+0x1c>
 8010768:	a1c00100 	.word	0xa1c00100

0801076c <core_init>:
 801076c:	2001      	movs	r0, #1
 801076e:	4770      	bx	lr

08010770 <core_get_error>:
 8010770:	4603      	mov	r3, r0
 8010772:	2200      	movs	r2, #0
 8010774:	6800      	ldr	r0, [r0, #0]
 8010776:	601a      	str	r2, [r3, #0]
 8010778:	4770      	bx	lr
 801077a:	bf00      	nop

0801077c <core_set_error>:
 801077c:	4603      	mov	r3, r0
 801077e:	7800      	ldrb	r0, [r0, #0]
 8010780:	b108      	cbz	r0, 8010786 <core_set_error+0xa>
 8010782:	2000      	movs	r0, #0
 8010784:	4770      	bx	lr
 8010786:	7019      	strb	r1, [r3, #0]
 8010788:	2001      	movs	r0, #1
 801078a:	6819      	ldr	r1, [r3, #0]
 801078c:	f362 211f 	bfi	r1, r2, #8, #24
 8010790:	6019      	str	r1, [r3, #0]
 8010792:	4770      	bx	lr

08010794 <ai_check_custom_types>:
 8010794:	b082      	sub	sp, #8
 8010796:	4b12      	ldr	r3, [pc, #72]	@ (80107e0 <ai_check_custom_types+0x4c>)
 8010798:	9301      	str	r3, [sp, #4]
 801079a:	b118      	cbz	r0, 80107a4 <ai_check_custom_types+0x10>
 801079c:	7803      	ldrb	r3, [r0, #0]
 801079e:	2b03      	cmp	r3, #3
 80107a0:	d002      	beq.n	80107a8 <ai_check_custom_types+0x14>
 80107a2:	2000      	movs	r0, #0
 80107a4:	b002      	add	sp, #8
 80107a6:	4770      	bx	lr
 80107a8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80107ac:	4293      	cmp	r3, r2
 80107ae:	d004      	beq.n	80107ba <ai_check_custom_types+0x26>
 80107b0:	2001      	movs	r0, #1
 80107b2:	f080 0001 	eor.w	r0, r0, #1
 80107b6:	b002      	add	sp, #8
 80107b8:	4770      	bx	lr
 80107ba:	7842      	ldrb	r2, [r0, #1]
 80107bc:	3001      	adds	r0, #1
 80107be:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80107c2:	429a      	cmp	r2, r3
 80107c4:	d1f4      	bne.n	80107b0 <ai_check_custom_types+0x1c>
 80107c6:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80107ca:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80107ce:	429a      	cmp	r2, r3
 80107d0:	d1ee      	bne.n	80107b0 <ai_check_custom_types+0x1c>
 80107d2:	7842      	ldrb	r2, [r0, #1]
 80107d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80107d8:	429a      	cmp	r2, r3
 80107da:	d1e9      	bne.n	80107b0 <ai_check_custom_types+0x1c>
 80107dc:	2000      	movs	r0, #0
 80107de:	e7e8      	b.n	80107b2 <ai_check_custom_types+0x1e>
 80107e0:	84048403 	.word	0x84048403

080107e4 <ai_layers_init_all>:
 80107e4:	2100      	movs	r1, #0
 80107e6:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80107e8:	b13b      	cbz	r3, 80107fa <ai_layers_init_all+0x16>
 80107ea:	691a      	ldr	r2, [r3, #16]
 80107ec:	3101      	adds	r1, #1
 80107ee:	60d8      	str	r0, [r3, #12]
 80107f0:	429a      	cmp	r2, r3
 80107f2:	4613      	mov	r3, r2
 80107f4:	d001      	beq.n	80107fa <ai_layers_init_all+0x16>
 80107f6:	2a00      	cmp	r2, #0
 80107f8:	d1f6      	bne.n	80107e8 <ai_layers_init_all+0x4>
 80107fa:	4608      	mov	r0, r1
 80107fc:	4770      	bx	lr
 80107fe:	bf00      	nop

08010800 <ai_layers_post_init_all>:
 8010800:	b538      	push	{r3, r4, r5, lr}
 8010802:	2500      	movs	r5, #0
 8010804:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8010806:	b16c      	cbz	r4, 8010824 <ai_layers_post_init_all+0x24>
 8010808:	6863      	ldr	r3, [r4, #4]
 801080a:	07db      	lsls	r3, r3, #31
 801080c:	d504      	bpl.n	8010818 <ai_layers_post_init_all+0x18>
 801080e:	6a23      	ldr	r3, [r4, #32]
 8010810:	4620      	mov	r0, r4
 8010812:	b10b      	cbz	r3, 8010818 <ai_layers_post_init_all+0x18>
 8010814:	3501      	adds	r5, #1
 8010816:	4798      	blx	r3
 8010818:	6923      	ldr	r3, [r4, #16]
 801081a:	42a3      	cmp	r3, r4
 801081c:	461c      	mov	r4, r3
 801081e:	d001      	beq.n	8010824 <ai_layers_post_init_all+0x24>
 8010820:	2b00      	cmp	r3, #0
 8010822:	d1f0      	bne.n	8010806 <ai_layers_post_init_all+0x6>
 8010824:	4628      	mov	r0, r5
 8010826:	bd38      	pop	{r3, r4, r5, pc}

08010828 <forward_conv2d_if32of32wf32_nl_pool>:
 8010828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801082c:	f8d0 c018 	ldr.w	ip, [r0, #24]
 8010830:	b0c3      	sub	sp, #268	@ 0x10c
 8010832:	f8bc 3000 	ldrh.w	r3, [ip]
 8010836:	9321      	str	r3, [sp, #132]	@ 0x84
 8010838:	2b00      	cmp	r3, #0
 801083a:	f000 813c 	beq.w	8010ab6 <forward_conv2d_if32of32wf32_nl_pool+0x28e>
 801083e:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8010842:	4604      	mov	r4, r0
 8010844:	f8d3 b004 	ldr.w	fp, [r3, #4]
 8010848:	f1bb 0f00 	cmp.w	fp, #0
 801084c:	d001      	beq.n	8010852 <forward_conv2d_if32of32wf32_nl_pool+0x2a>
 801084e:	f8db b000 	ldr.w	fp, [fp]
 8010852:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8010854:	2a01      	cmp	r2, #1
 8010856:	f000 812d 	beq.w	8010ab4 <forward_conv2d_if32of32wf32_nl_pool+0x28c>
 801085a:	f8d3 a010 	ldr.w	sl, [r3, #16]
 801085e:	f1ba 0f00 	cmp.w	sl, #0
 8010862:	d001      	beq.n	8010868 <forward_conv2d_if32of32wf32_nl_pool+0x40>
 8010864:	f8da a000 	ldr.w	sl, [sl]
 8010868:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801086a:	2a02      	cmp	r2, #2
 801086c:	f000 8122 	beq.w	8010ab4 <forward_conv2d_if32of32wf32_nl_pool+0x28c>
 8010870:	f8d3 801c 	ldr.w	r8, [r3, #28]
 8010874:	8b1b      	ldrh	r3, [r3, #24]
 8010876:	f1b8 0f00 	cmp.w	r8, #0
 801087a:	f000 812f 	beq.w	8010adc <forward_conv2d_if32of32wf32_nl_pool+0x2b4>
 801087e:	2b01      	cmp	r3, #1
 8010880:	f8d8 2000 	ldr.w	r2, [r8]
 8010884:	f240 8130 	bls.w	8010ae8 <forward_conv2d_if32of32wf32_nl_pool+0x2c0>
 8010888:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801088c:	9340      	str	r3, [sp, #256]	@ 0x100
 801088e:	f8d8 8008 	ldr.w	r8, [r8, #8]
 8010892:	f8db 100c 	ldr.w	r1, [fp, #12]
 8010896:	f8da 000c 	ldr.w	r0, [sl, #12]
 801089a:	9122      	str	r1, [sp, #136]	@ 0x88
 801089c:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 80108a0:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80108a4:	9130      	str	r1, [sp, #192]	@ 0xc0
 80108a6:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 80108aa:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80108ac:	9131      	str	r1, [sp, #196]	@ 0xc4
 80108ae:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
 80108b2:	f8de 7004 	ldr.w	r7, [lr, #4]
 80108b6:	9132      	str	r1, [sp, #200]	@ 0xc8
 80108b8:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 80108bc:	9822      	ldr	r0, [sp, #136]	@ 0x88
 80108be:	9133      	str	r1, [sp, #204]	@ 0xcc
 80108c0:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
 80108c4:	681e      	ldr	r6, [r3, #0]
 80108c6:	9123      	str	r1, [sp, #140]	@ 0x8c
 80108c8:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 80108cc:	972a      	str	r7, [sp, #168]	@ 0xa8
 80108ce:	9124      	str	r1, [sp, #144]	@ 0x90
 80108d0:	f8de 7008 	ldr.w	r7, [lr, #8]
 80108d4:	9628      	str	r6, [sp, #160]	@ 0xa0
 80108d6:	972f      	str	r7, [sp, #188]	@ 0xbc
 80108d8:	e9d4 950a 	ldrd	r9, r5, [r4, #40]	@ 0x28
 80108dc:	fa1f f189 	uxth.w	r1, r9
 80108e0:	9527      	str	r5, [sp, #156]	@ 0x9c
 80108e2:	685d      	ldr	r5, [r3, #4]
 80108e4:	9134      	str	r1, [sp, #208]	@ 0xd0
 80108e6:	9529      	str	r5, [sp, #164]	@ 0xa4
 80108e8:	e9d4 560c 	ldrd	r5, r6, [r4, #48]	@ 0x30
 80108ec:	f8bd 109c 	ldrh.w	r1, [sp, #156]	@ 0x9c
 80108f0:	9135      	str	r1, [sp, #212]	@ 0xd4
 80108f2:	f8bd 10a0 	ldrh.w	r1, [sp, #160]	@ 0xa0
 80108f6:	9136      	str	r1, [sp, #216]	@ 0xd8
 80108f8:	f8bd 10a4 	ldrh.w	r1, [sp, #164]	@ 0xa4
 80108fc:	9137      	str	r1, [sp, #220]	@ 0xdc
 80108fe:	6899      	ldr	r1, [r3, #8]
 8010900:	68db      	ldr	r3, [r3, #12]
 8010902:	912d      	str	r1, [sp, #180]	@ 0xb4
 8010904:	932e      	str	r3, [sp, #184]	@ 0xb8
 8010906:	f9b4 301c 	ldrsh.w	r3, [r4, #28]
 801090a:	9338      	str	r3, [sp, #224]	@ 0xe0
 801090c:	b2ab      	uxth	r3, r5
 801090e:	9339      	str	r3, [sp, #228]	@ 0xe4
 8010910:	b2b3      	uxth	r3, r6
 8010912:	933a      	str	r3, [sp, #232]	@ 0xe8
 8010914:	f9bd 30a8 	ldrsh.w	r3, [sp, #168]	@ 0xa8
 8010918:	9325      	str	r3, [sp, #148]	@ 0x94
 801091a:	b23b      	sxth	r3, r7
 801091c:	9326      	str	r3, [sp, #152]	@ 0x98
 801091e:	f9b4 3044 	ldrsh.w	r3, [r4, #68]	@ 0x44
 8010922:	933b      	str	r3, [sp, #236]	@ 0xec
 8010924:	f9b4 304c 	ldrsh.w	r3, [r4, #76]	@ 0x4c
 8010928:	933c      	str	r3, [sp, #240]	@ 0xf0
 801092a:	f9b4 3050 	ldrsh.w	r3, [r4, #80]	@ 0x50
 801092e:	933d      	str	r3, [sp, #244]	@ 0xf4
 8010930:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8010932:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010936:	933e      	str	r3, [sp, #248]	@ 0xf8
 8010938:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801093a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801093e:	933f      	str	r3, [sp, #252]	@ 0xfc
 8010940:	6a23      	ldr	r3, [r4, #32]
 8010942:	9322      	str	r3, [sp, #136]	@ 0x88
 8010944:	f1b8 0f00 	cmp.w	r8, #0
 8010948:	f000 80b7 	beq.w	8010aba <forward_conv2d_if32of32wf32_nl_pool+0x292>
 801094c:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8010950:	2b00      	cmp	r3, #0
 8010952:	f000 80ba 	beq.w	8010aca <forward_conv2d_if32of32wf32_nl_pool+0x2a2>
 8010956:	9221      	str	r2, [sp, #132]	@ 0x84
 8010958:	e9d3 0100 	ldrd	r0, r1, [r3]
 801095c:	689b      	ldr	r3, [r3, #8]
 801095e:	9322      	str	r3, [sp, #136]	@ 0x88
 8010960:	f002 fb26 	bl	8012fb0 <ai_array_get_byte_size>
 8010964:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8010968:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801096a:	902c      	str	r0, [sp, #176]	@ 0xb0
 801096c:	2b00      	cmp	r3, #0
 801096e:	f000 80be 	beq.w	8010aee <forward_conv2d_if32of32wf32_nl_pool+0x2c6>
 8010972:	9241      	str	r2, [sp, #260]	@ 0x104
 8010974:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010978:	f002 fb1a 	bl	8012fb0 <ai_array_get_byte_size>
 801097c:	f8d4 c018 	ldr.w	ip, [r4, #24]
 8010980:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8010982:	f8bc 3000 	ldrh.w	r3, [ip]
 8010986:	902b      	str	r0, [sp, #172]	@ 0xac
 8010988:	9321      	str	r3, [sp, #132]	@ 0x84
 801098a:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 801098c:	b2ad      	uxth	r5, r5
 801098e:	b2b6      	uxth	r6, r6
 8010990:	9b40      	ldr	r3, [sp, #256]	@ 0x100
 8010992:	f107 38ff 	add.w	r8, r7, #4294967295
 8010996:	3d01      	subs	r5, #1
 8010998:	9f2a      	ldr	r7, [sp, #168]	@ 0xa8
 801099a:	3e01      	subs	r6, #1
 801099c:	fa1f f989 	uxth.w	r9, r9
 80109a0:	f8bd e09c 	ldrh.w	lr, [sp, #156]	@ 0x9c
 80109a4:	fb15 7508 	smlabb	r5, r5, r8, r7
 80109a8:	9f2f      	ldr	r7, [sp, #188]	@ 0xbc
 80109aa:	699b      	ldr	r3, [r3, #24]
 80109ac:	fa0f f885 	sxth.w	r8, r5
 80109b0:	9d26      	ldr	r5, [sp, #152]	@ 0x98
 80109b2:	f8db 0018 	ldr.w	r0, [fp, #24]
 80109b6:	3d01      	subs	r5, #1
 80109b8:	f8d3 b008 	ldr.w	fp, [r3, #8]
 80109bc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80109be:	fb16 7605 	smlabb	r6, r6, r5, r7
 80109c2:	9d24      	ldr	r5, [sp, #144]	@ 0x90
 80109c4:	9f29      	ldr	r7, [sp, #164]	@ 0xa4
 80109c6:	2b03      	cmp	r3, #3
 80109c8:	eba5 0508 	sub.w	r5, r5, r8
 80109cc:	b236      	sxth	r6, r6
 80109ce:	f8da 1018 	ldr.w	r1, [sl, #24]
 80109d2:	fa15 f587 	uxtah	r5, r5, r7
 80109d6:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 80109d8:	6992      	ldr	r2, [r2, #24]
 80109da:	fa15 f587 	uxtah	r5, r5, r7
 80109de:	9f23      	ldr	r7, [sp, #140]	@ 0x8c
 80109e0:	f8d4 a05c 	ldr.w	sl, [r4, #92]	@ 0x5c
 80109e4:	6880      	ldr	r0, [r0, #8]
 80109e6:	6889      	ldr	r1, [r1, #8]
 80109e8:	6892      	ldr	r2, [r2, #8]
 80109ea:	fb95 f5f9 	sdiv	r5, r5, r9
 80109ee:	eba7 0906 	sub.w	r9, r7, r6
 80109f2:	9f28      	ldr	r7, [sp, #160]	@ 0xa0
 80109f4:	f105 0501 	add.w	r5, r5, #1
 80109f8:	fa19 f987 	uxtah	r9, r9, r7
 80109fc:	9f2d      	ldr	r7, [sp, #180]	@ 0xb4
 80109fe:	b22d      	sxth	r5, r5
 8010a00:	fa19 f987 	uxtah	r9, r9, r7
 8010a04:	fb99 f9fe 	sdiv	r9, r9, lr
 8010a08:	f109 0e01 	add.w	lr, r9, #1
 8010a0c:	f8d4 9024 	ldr.w	r9, [r4, #36]	@ 0x24
 8010a10:	f9b4 4048 	ldrsh.w	r4, [r4, #72]	@ 0x48
 8010a14:	d94e      	bls.n	8010ab4 <forward_conv2d_if32of32wf32_nl_pool+0x28c>
 8010a16:	f8dc 7004 	ldr.w	r7, [ip, #4]
 8010a1a:	f8d7 c028 	ldr.w	ip, [r7, #40]	@ 0x28
 8010a1e:	f1bc 0f00 	cmp.w	ip, #0
 8010a22:	d06f      	beq.n	8010b04 <forward_conv2d_if32of32wf32_nl_pool+0x2dc>
 8010a24:	f8dc 7000 	ldr.w	r7, [ip]
 8010a28:	b10f      	cbz	r7, 8010a2e <forward_conv2d_if32of32wf32_nl_pool+0x206>
 8010a2a:	69bf      	ldr	r7, [r7, #24]
 8010a2c:	68bf      	ldr	r7, [r7, #8]
 8010a2e:	9b3e      	ldr	r3, [sp, #248]	@ 0xf8
 8010a30:	9513      	str	r5, [sp, #76]	@ 0x4c
 8010a32:	931f      	str	r3, [sp, #124]	@ 0x7c
 8010a34:	9b3f      	ldr	r3, [sp, #252]	@ 0xfc
 8010a36:	960e      	str	r6, [sp, #56]	@ 0x38
 8010a38:	931e      	str	r3, [sp, #120]	@ 0x78
 8010a3a:	9b3d      	ldr	r3, [sp, #244]	@ 0xf4
 8010a3c:	931d      	str	r3, [sp, #116]	@ 0x74
 8010a3e:	9b3c      	ldr	r3, [sp, #240]	@ 0xf0
 8010a40:	e9cd 431b 	strd	r4, r3, [sp, #108]	@ 0x6c
 8010a44:	9b3b      	ldr	r3, [sp, #236]	@ 0xec
 8010a46:	fa0f f48e 	sxth.w	r4, lr
 8010a4a:	e9cd a319 	strd	sl, r3, [sp, #100]	@ 0x64
 8010a4e:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8010a50:	9318      	str	r3, [sp, #96]	@ 0x60
 8010a52:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8010a54:	9317      	str	r3, [sp, #92]	@ 0x5c
 8010a56:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8010a58:	e9cd 9315 	strd	r9, r3, [sp, #84]	@ 0x54
 8010a5c:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 8010a5e:	9312      	str	r3, [sp, #72]	@ 0x48
 8010a60:	9b3a      	ldr	r3, [sp, #232]	@ 0xe8
 8010a62:	9311      	str	r3, [sp, #68]	@ 0x44
 8010a64:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 8010a66:	e9cd 830f 	strd	r8, r3, [sp, #60]	@ 0x3c
 8010a6a:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 8010a6c:	930d      	str	r3, [sp, #52]	@ 0x34
 8010a6e:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 8010a70:	930c      	str	r3, [sp, #48]	@ 0x30
 8010a72:	9b36      	ldr	r3, [sp, #216]	@ 0xd8
 8010a74:	9414      	str	r4, [sp, #80]	@ 0x50
 8010a76:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010a78:	9b37      	ldr	r3, [sp, #220]	@ 0xdc
 8010a7a:	930a      	str	r3, [sp, #40]	@ 0x28
 8010a7c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8010a7e:	9309      	str	r3, [sp, #36]	@ 0x24
 8010a80:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8010a82:	9308      	str	r3, [sp, #32]
 8010a84:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 8010a86:	9307      	str	r3, [sp, #28]
 8010a88:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 8010a8a:	9306      	str	r3, [sp, #24]
 8010a8c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010a8e:	9305      	str	r3, [sp, #20]
 8010a90:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8010a92:	9304      	str	r3, [sp, #16]
 8010a94:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 8010a96:	9303      	str	r3, [sp, #12]
 8010a98:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8010a9a:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8010a9e:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8010aa2:	465b      	mov	r3, fp
 8010aa4:	69a4      	ldr	r4, [r4, #24]
 8010aa6:	68a4      	ldr	r4, [r4, #8]
 8010aa8:	9400      	str	r4, [sp, #0]
 8010aaa:	f000 f9cf 	bl	8010e4c <forward_lite_conv2d_if32of32wf32_pool>
 8010aae:	b043      	add	sp, #268	@ 0x10c
 8010ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ab4:	2300      	movs	r3, #0
 8010ab6:	685b      	ldr	r3, [r3, #4]
 8010ab8:	deff      	udf	#255	@ 0xff
 8010aba:	b10b      	cbz	r3, 8010ac0 <forward_conv2d_if32of32wf32_nl_pool+0x298>
 8010abc:	689b      	ldr	r3, [r3, #8]
 8010abe:	9322      	str	r3, [sp, #136]	@ 0x88
 8010ac0:	2301      	movs	r3, #1
 8010ac2:	f8cd 80b0 	str.w	r8, [sp, #176]	@ 0xb0
 8010ac6:	932b      	str	r3, [sp, #172]	@ 0xac
 8010ac8:	e75f      	b.n	801098a <forward_conv2d_if32of32wf32_nl_pool+0x162>
 8010aca:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8010acc:	b10b      	cbz	r3, 8010ad2 <forward_conv2d_if32of32wf32_nl_pool+0x2aa>
 8010ace:	689b      	ldr	r3, [r3, #8]
 8010ad0:	9322      	str	r3, [sp, #136]	@ 0x88
 8010ad2:	2301      	movs	r3, #1
 8010ad4:	2100      	movs	r1, #0
 8010ad6:	e9cd 312b 	strd	r3, r1, [sp, #172]	@ 0xac
 8010ada:	e756      	b.n	801098a <forward_conv2d_if32of32wf32_nl_pool+0x162>
 8010adc:	2b01      	cmp	r3, #1
 8010ade:	d90e      	bls.n	8010afe <forward_conv2d_if32of32wf32_nl_pool+0x2d6>
 8010ae0:	4642      	mov	r2, r8
 8010ae2:	f8cd 8100 	str.w	r8, [sp, #256]	@ 0x100
 8010ae6:	e6d4      	b.n	8010892 <forward_conv2d_if32of32wf32_nl_pool+0x6a>
 8010ae8:	2300      	movs	r3, #0
 8010aea:	9340      	str	r3, [sp, #256]	@ 0x100
 8010aec:	e6cf      	b.n	801088e <forward_conv2d_if32of32wf32_nl_pool+0x66>
 8010aee:	2301      	movs	r3, #1
 8010af0:	f8d4 c018 	ldr.w	ip, [r4, #24]
 8010af4:	932b      	str	r3, [sp, #172]	@ 0xac
 8010af6:	f8bc 3000 	ldrh.w	r3, [ip]
 8010afa:	9321      	str	r3, [sp, #132]	@ 0x84
 8010afc:	e745      	b.n	801098a <forward_conv2d_if32of32wf32_nl_pool+0x162>
 8010afe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010b02:	deff      	udf	#255	@ 0xff
 8010b04:	f8dc 3018 	ldr.w	r3, [ip, #24]
 8010b08:	deff      	udf	#255	@ 0xff
 8010b0a:	bf00      	nop

08010b0c <forward_dense>:
 8010b0c:	6982      	ldr	r2, [r0, #24]
 8010b0e:	8813      	ldrh	r3, [r2, #0]
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	d043      	beq.n	8010b9c <forward_dense+0x90>
 8010b14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010b18:	6855      	ldr	r5, [r2, #4]
 8010b1a:	b08e      	sub	sp, #56	@ 0x38
 8010b1c:	6869      	ldr	r1, [r5, #4]
 8010b1e:	b101      	cbz	r1, 8010b22 <forward_dense+0x16>
 8010b20:	6809      	ldr	r1, [r1, #0]
 8010b22:	2b01      	cmp	r3, #1
 8010b24:	d069      	beq.n	8010bfa <forward_dense+0xee>
 8010b26:	692a      	ldr	r2, [r5, #16]
 8010b28:	b102      	cbz	r2, 8010b2c <forward_dense+0x20>
 8010b2a:	6812      	ldr	r2, [r2, #0]
 8010b2c:	2b02      	cmp	r3, #2
 8010b2e:	d061      	beq.n	8010bf4 <forward_dense+0xe8>
 8010b30:	69ec      	ldr	r4, [r5, #28]
 8010b32:	2c00      	cmp	r4, #0
 8010b34:	d057      	beq.n	8010be6 <forward_dense+0xda>
 8010b36:	8b2e      	ldrh	r6, [r5, #24]
 8010b38:	6820      	ldr	r0, [r4, #0]
 8010b3a:	2e01      	cmp	r6, #1
 8010b3c:	d955      	bls.n	8010bea <forward_dense+0xde>
 8010b3e:	6864      	ldr	r4, [r4, #4]
 8010b40:	f8d0 9018 	ldr.w	r9, [r0, #24]
 8010b44:	2b03      	cmp	r3, #3
 8010b46:	68d0      	ldr	r0, [r2, #12]
 8010b48:	68cf      	ldr	r7, [r1, #12]
 8010b4a:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8010b4e:	f8d7 a004 	ldr.w	sl, [r7, #4]
 8010b52:	e9d0 7602 	ldrd	r7, r6, [r0, #8]
 8010b56:	f8d9 0000 	ldr.w	r0, [r9]
 8010b5a:	fb06 f807 	mul.w	r8, r6, r7
 8010b5e:	f020 4c7e 	bic.w	ip, r0, #4261412864	@ 0xfe000000
 8010b62:	d044      	beq.n	8010bee <forward_dense+0xe2>
 8010b64:	6aad      	ldr	r5, [r5, #40]	@ 0x28
 8010b66:	b11d      	cbz	r5, 8010b70 <forward_dense+0x64>
 8010b68:	682d      	ldr	r5, [r5, #0]
 8010b6a:	b10d      	cbz	r5, 8010b70 <forward_dense+0x64>
 8010b6c:	69ab      	ldr	r3, [r5, #24]
 8010b6e:	689d      	ldr	r5, [r3, #8]
 8010b70:	6992      	ldr	r2, [r2, #24]
 8010b72:	698b      	ldr	r3, [r1, #24]
 8010b74:	6890      	ldr	r0, [r2, #8]
 8010b76:	6899      	ldr	r1, [r3, #8]
 8010b78:	b10c      	cbz	r4, 8010b7e <forward_dense+0x72>
 8010b7a:	69a3      	ldr	r3, [r4, #24]
 8010b7c:	689c      	ldr	r4, [r3, #8]
 8010b7e:	4b20      	ldr	r3, [pc, #128]	@ (8010c00 <forward_dense+0xf4>)
 8010b80:	459c      	cmp	ip, r3
 8010b82:	e9d9 2902 	ldrd	r2, r9, [r9, #8]
 8010b86:	d023      	beq.n	8010bd0 <forward_dense+0xc4>
 8010b88:	4e1e      	ldr	r6, [pc, #120]	@ (8010c04 <forward_dense+0xf8>)
 8010b8a:	45b4      	cmp	ip, r6
 8010b8c:	d015      	beq.n	8010bba <forward_dense+0xae>
 8010b8e:	f5a3 039c 	sub.w	r3, r3, #5111808	@ 0x4e0000
 8010b92:	459c      	cmp	ip, r3
 8010b94:	d004      	beq.n	8010ba0 <forward_dense+0x94>
 8010b96:	b00e      	add	sp, #56	@ 0x38
 8010b98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b9c:	685b      	ldr	r3, [r3, #4]
 8010b9e:	deff      	udf	#255	@ 0xff
 8010ba0:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8010ba4:	a807      	add	r0, sp, #28
 8010ba6:	9209      	str	r2, [sp, #36]	@ 0x24
 8010ba8:	e9cd 4a0a 	strd	r4, sl, [sp, #40]	@ 0x28
 8010bac:	e9cd e80c 	strd	lr, r8, [sp, #48]	@ 0x30
 8010bb0:	f001 fb98 	bl	80122e4 <forward_lite_dense_if32of32wf32>
 8010bb4:	b00e      	add	sp, #56	@ 0x38
 8010bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010bba:	464b      	mov	r3, r9
 8010bbc:	9500      	str	r5, [sp, #0]
 8010bbe:	e9cd e803 	strd	lr, r8, [sp, #12]
 8010bc2:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 8010bc6:	f001 fceb 	bl	80125a0 <forward_lite_dense_if32of32wf32_lut4>
 8010bca:	b00e      	add	sp, #56	@ 0x38
 8010bcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010bd0:	464b      	mov	r3, r9
 8010bd2:	9500      	str	r5, [sp, #0]
 8010bd4:	e9cd e803 	strd	lr, r8, [sp, #12]
 8010bd8:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 8010bdc:	f001 fe0a 	bl	80127f4 <forward_lite_dense_if32of32wf32_lut8>
 8010be0:	b00e      	add	sp, #56	@ 0x38
 8010be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010be6:	4620      	mov	r0, r4
 8010be8:	e7aa      	b.n	8010b40 <forward_dense+0x34>
 8010bea:	2400      	movs	r4, #0
 8010bec:	e7a8      	b.n	8010b40 <forward_dense+0x34>
 8010bee:	2300      	movs	r3, #0
 8010bf0:	685b      	ldr	r3, [r3, #4]
 8010bf2:	deff      	udf	#255	@ 0xff
 8010bf4:	2300      	movs	r3, #0
 8010bf6:	685b      	ldr	r3, [r3, #4]
 8010bf8:	deff      	udf	#255	@ 0xff
 8010bfa:	2300      	movs	r3, #0
 8010bfc:	685b      	ldr	r3, [r3, #4]
 8010bfe:	deff      	udf	#255	@ 0xff
 8010c00:	00d01040 	.word	0x00d01040
 8010c04:	00f01040 	.word	0x00f01040

08010c08 <forward_relu>:
 8010c08:	6982      	ldr	r2, [r0, #24]
 8010c0a:	8813      	ldrh	r3, [r2, #0]
 8010c0c:	b323      	cbz	r3, 8010c58 <forward_relu+0x50>
 8010c0e:	6851      	ldr	r1, [r2, #4]
 8010c10:	684a      	ldr	r2, [r1, #4]
 8010c12:	b102      	cbz	r2, 8010c16 <forward_relu+0xe>
 8010c14:	6812      	ldr	r2, [r2, #0]
 8010c16:	2b01      	cmp	r3, #1
 8010c18:	f000 8086 	beq.w	8010d28 <forward_relu+0x120>
 8010c1c:	b470      	push	{r4, r5, r6}
 8010c1e:	690b      	ldr	r3, [r1, #16]
 8010c20:	b103      	cbz	r3, 8010c24 <forward_relu+0x1c>
 8010c22:	681b      	ldr	r3, [r3, #0]
 8010c24:	69c6      	ldr	r6, [r0, #28]
 8010c26:	b1ce      	cbz	r6, 8010c5c <forward_relu+0x54>
 8010c28:	6871      	ldr	r1, [r6, #4]
 8010c2a:	6998      	ldr	r0, [r3, #24]
 8010c2c:	2901      	cmp	r1, #1
 8010c2e:	d03f      	beq.n	8010cb0 <forward_relu+0xa8>
 8010c30:	6893      	ldr	r3, [r2, #8]
 8010c32:	6991      	ldr	r1, [r2, #24]
 8010c34:	0a1b      	lsrs	r3, r3, #8
 8010c36:	6880      	ldr	r0, [r0, #8]
 8010c38:	6889      	ldr	r1, [r1, #8]
 8010c3a:	d06c      	beq.n	8010d16 <forward_relu+0x10e>
 8010c3c:	68d5      	ldr	r5, [r2, #12]
 8010c3e:	2201      	movs	r2, #1
 8010c40:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8010c44:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8010c48:	429d      	cmp	r5, r3
 8010c4a:	fb04 f202 	mul.w	r2, r4, r2
 8010c4e:	d1f9      	bne.n	8010c44 <forward_relu+0x3c>
 8010c50:	68b3      	ldr	r3, [r6, #8]
 8010c52:	bc70      	pop	{r4, r5, r6}
 8010c54:	f000 bd04 	b.w	8011660 <forward_lite_nl_relu_generic_if32of32_kernel>
 8010c58:	685b      	ldr	r3, [r3, #4]
 8010c5a:	deff      	udf	#255	@ 0xff
 8010c5c:	6999      	ldr	r1, [r3, #24]
 8010c5e:	6893      	ldr	r3, [r2, #8]
 8010c60:	6990      	ldr	r0, [r2, #24]
 8010c62:	0a1b      	lsrs	r3, r3, #8
 8010c64:	6889      	ldr	r1, [r1, #8]
 8010c66:	6884      	ldr	r4, [r0, #8]
 8010c68:	d057      	beq.n	8010d1a <forward_relu+0x112>
 8010c6a:	68d5      	ldr	r5, [r2, #12]
 8010c6c:	2201      	movs	r2, #1
 8010c6e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8010c72:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 8010c76:	429d      	cmp	r5, r3
 8010c78:	fb00 f202 	mul.w	r2, r0, r2
 8010c7c:	d1f9      	bne.n	8010c72 <forward_relu+0x6a>
 8010c7e:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8010c82:	4413      	add	r3, r2
 8010c84:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8010c88:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8010c8c:	4294      	cmp	r4, r2
 8010c8e:	d80d      	bhi.n	8010cac <forward_relu+0xa4>
 8010c90:	3204      	adds	r2, #4
 8010c92:	3104      	adds	r1, #4
 8010c94:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8010d30 <forward_relu+0x128>
 8010c98:	4613      	mov	r3, r2
 8010c9a:	ed72 7a01 	vldmdb	r2!, {s15}
 8010c9e:	3b08      	subs	r3, #8
 8010ca0:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8010ca4:	ed61 7a01 	vstmdb	r1!, {s15}
 8010ca8:	429c      	cmp	r4, r3
 8010caa:	d9f5      	bls.n	8010c98 <forward_relu+0x90>
 8010cac:	bc70      	pop	{r4, r5, r6}
 8010cae:	4770      	bx	lr
 8010cb0:	6993      	ldr	r3, [r2, #24]
 8010cb2:	6880      	ldr	r0, [r0, #8]
 8010cb4:	689c      	ldr	r4, [r3, #8]
 8010cb6:	6893      	ldr	r3, [r2, #8]
 8010cb8:	0a1b      	lsrs	r3, r3, #8
 8010cba:	d030      	beq.n	8010d1e <forward_relu+0x116>
 8010cbc:	68d5      	ldr	r5, [r2, #12]
 8010cbe:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8010cc2:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8010cc6:	429d      	cmp	r5, r3
 8010cc8:	fb02 f101 	mul.w	r1, r2, r1
 8010ccc:	d1f9      	bne.n	8010cc2 <forward_relu+0xba>
 8010cce:	f06f 4240 	mvn.w	r2, #3221225472	@ 0xc0000000
 8010cd2:	68b3      	ldr	r3, [r6, #8]
 8010cd4:	440a      	add	r2, r1
 8010cd6:	ed93 7a00 	vldr	s14, [r3]
 8010cda:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010cde:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8010ce2:	429c      	cmp	r4, r3
 8010ce4:	d8e2      	bhi.n	8010cac <forward_relu+0xa4>
 8010ce6:	1d02      	adds	r2, r0, #4
 8010ce8:	3304      	adds	r3, #4
 8010cea:	2000      	movs	r0, #0
 8010cec:	ed53 7a01 	vldr	s15, [r3, #-4]
 8010cf0:	1f19      	subs	r1, r3, #4
 8010cf2:	3b08      	subs	r3, #8
 8010cf4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010cf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cfc:	d405      	bmi.n	8010d0a <forward_relu+0x102>
 8010cfe:	429c      	cmp	r4, r3
 8010d00:	f842 0d04 	str.w	r0, [r2, #-4]!
 8010d04:	d8d2      	bhi.n	8010cac <forward_relu+0xa4>
 8010d06:	460b      	mov	r3, r1
 8010d08:	e7f0      	b.n	8010cec <forward_relu+0xe4>
 8010d0a:	429c      	cmp	r4, r3
 8010d0c:	ed62 7a01 	vstmdb	r2!, {s15}
 8010d10:	d8cc      	bhi.n	8010cac <forward_relu+0xa4>
 8010d12:	460b      	mov	r3, r1
 8010d14:	e7ea      	b.n	8010cec <forward_relu+0xe4>
 8010d16:	2201      	movs	r2, #1
 8010d18:	e79a      	b.n	8010c50 <forward_relu+0x48>
 8010d1a:	4622      	mov	r2, r4
 8010d1c:	e7b8      	b.n	8010c90 <forward_relu+0x88>
 8010d1e:	68b2      	ldr	r2, [r6, #8]
 8010d20:	4623      	mov	r3, r4
 8010d22:	ed92 7a00 	vldr	s14, [r2]
 8010d26:	e7de      	b.n	8010ce6 <forward_relu+0xde>
 8010d28:	2300      	movs	r3, #0
 8010d2a:	685b      	ldr	r3, [r3, #4]
 8010d2c:	deff      	udf	#255	@ 0xff
 8010d2e:	bf00      	nop
 8010d30:	00000000 	.word	0x00000000

08010d34 <forward_upsample_bilinear>:
 8010d34:	6983      	ldr	r3, [r0, #24]
 8010d36:	881a      	ldrh	r2, [r3, #0]
 8010d38:	2a00      	cmp	r2, #0
 8010d3a:	d04f      	beq.n	8010ddc <forward_upsample_bilinear+0xa8>
 8010d3c:	6859      	ldr	r1, [r3, #4]
 8010d3e:	4684      	mov	ip, r0
 8010d40:	684b      	ldr	r3, [r1, #4]
 8010d42:	b103      	cbz	r3, 8010d46 <forward_upsample_bilinear+0x12>
 8010d44:	681b      	ldr	r3, [r3, #0]
 8010d46:	2a01      	cmp	r2, #1
 8010d48:	d074      	beq.n	8010e34 <forward_upsample_bilinear+0x100>
 8010d4a:	690a      	ldr	r2, [r1, #16]
 8010d4c:	2a00      	cmp	r2, #0
 8010d4e:	d074      	beq.n	8010e3a <forward_upsample_bilinear+0x106>
 8010d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d54:	699c      	ldr	r4, [r3, #24]
 8010d56:	b084      	sub	sp, #16
 8010d58:	68d8      	ldr	r0, [r3, #12]
 8010d5a:	6821      	ldr	r1, [r4, #0]
 8010d5c:	6815      	ldr	r5, [r2, #0]
 8010d5e:	f8dc 3020 	ldr.w	r3, [ip, #32]
 8010d62:	f021 417e 	bic.w	r1, r1, #4261412864	@ 0xfe000000
 8010d66:	f8df 80e0 	ldr.w	r8, [pc, #224]	@ 8010e48 <forward_upsample_bilinear+0x114>
 8010d6a:	689b      	ldr	r3, [r3, #8]
 8010d6c:	68ee      	ldr	r6, [r5, #12]
 8010d6e:	4541      	cmp	r1, r8
 8010d70:	edd3 0a00 	vldr	s1, [r3]
 8010d74:	ed93 0a01 	vldr	s0, [r3, #4]
 8010d78:	6882      	ldr	r2, [r0, #8]
 8010d7a:	68c3      	ldr	r3, [r0, #12]
 8010d7c:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8010d80:	e9d6 6702 	ldrd	r6, r7, [r6, #8]
 8010d84:	d048      	beq.n	8010e18 <forward_upsample_bilinear+0xe4>
 8010d86:	dd14      	ble.n	8010db2 <forward_upsample_bilinear+0x7e>
 8010d88:	482d      	ldr	r0, [pc, #180]	@ (8010e40 <forward_upsample_bilinear+0x10c>)
 8010d8a:	4281      	cmp	r1, r0
 8010d8c:	d036      	beq.n	8010dfc <forward_upsample_bilinear+0xc8>
 8010d8e:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8010d92:	4281      	cmp	r1, r0
 8010d94:	d10a      	bne.n	8010dac <forward_upsample_bilinear+0x78>
 8010d96:	69a9      	ldr	r1, [r5, #24]
 8010d98:	68a0      	ldr	r0, [r4, #8]
 8010d9a:	f89c 401d 	ldrb.w	r4, [ip, #29]
 8010d9e:	6889      	ldr	r1, [r1, #8]
 8010da0:	e9cd e402 	strd	lr, r4, [sp, #8]
 8010da4:	e9cd 6700 	strd	r6, r7, [sp]
 8010da8:	f001 f91c 	bl	8011fe4 <forward_lite_upsample_bilinear_is16os16>
 8010dac:	b004      	add	sp, #16
 8010dae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010db2:	4824      	ldr	r0, [pc, #144]	@ (8010e44 <forward_upsample_bilinear+0x110>)
 8010db4:	4281      	cmp	r1, r0
 8010db6:	d013      	beq.n	8010de0 <forward_upsample_bilinear+0xac>
 8010db8:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8010dbc:	4281      	cmp	r1, r0
 8010dbe:	d1f5      	bne.n	8010dac <forward_upsample_bilinear+0x78>
 8010dc0:	69a9      	ldr	r1, [r5, #24]
 8010dc2:	68a0      	ldr	r0, [r4, #8]
 8010dc4:	f89c 401d 	ldrb.w	r4, [ip, #29]
 8010dc8:	6889      	ldr	r1, [r1, #8]
 8010dca:	e9cd e402 	strd	lr, r4, [sp, #8]
 8010dce:	e9cd 6700 	strd	r6, r7, [sp]
 8010dd2:	f001 f9c7 	bl	8012164 <forward_lite_upsample_bilinear_iu16ou16>
 8010dd6:	b004      	add	sp, #16
 8010dd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ddc:	6853      	ldr	r3, [r2, #4]
 8010dde:	deff      	udf	#255	@ 0xff
 8010de0:	69a9      	ldr	r1, [r5, #24]
 8010de2:	68a0      	ldr	r0, [r4, #8]
 8010de4:	f89c 401d 	ldrb.w	r4, [ip, #29]
 8010de8:	6889      	ldr	r1, [r1, #8]
 8010dea:	e9cd e402 	strd	lr, r4, [sp, #8]
 8010dee:	e9cd 6700 	strd	r6, r7, [sp]
 8010df2:	f001 f835 	bl	8011e60 <forward_lite_upsample_bilinear_iu8ou8>
 8010df6:	b004      	add	sp, #16
 8010df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010dfc:	69a9      	ldr	r1, [r5, #24]
 8010dfe:	68a0      	ldr	r0, [r4, #8]
 8010e00:	f89c 401d 	ldrb.w	r4, [ip, #29]
 8010e04:	6889      	ldr	r1, [r1, #8]
 8010e06:	e9cd e402 	strd	lr, r4, [sp, #8]
 8010e0a:	e9cd 6700 	strd	r6, r7, [sp]
 8010e0e:	f000 ff65 	bl	8011cdc <forward_lite_upsample_bilinear_is8os8>
 8010e12:	b004      	add	sp, #16
 8010e14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e18:	69a9      	ldr	r1, [r5, #24]
 8010e1a:	68a0      	ldr	r0, [r4, #8]
 8010e1c:	f89c 401d 	ldrb.w	r4, [ip, #29]
 8010e20:	6889      	ldr	r1, [r1, #8]
 8010e22:	e9cd e402 	strd	lr, r4, [sp, #8]
 8010e26:	e9cd 6700 	strd	r6, r7, [sp]
 8010e2a:	f000 fe97 	bl	8011b5c <forward_lite_upsample_bilinear_if32of32>
 8010e2e:	b004      	add	sp, #16
 8010e30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e34:	2300      	movs	r3, #0
 8010e36:	685b      	ldr	r3, [r3, #4]
 8010e38:	deff      	udf	#255	@ 0xff
 8010e3a:	68d3      	ldr	r3, [r2, #12]
 8010e3c:	deff      	udf	#255	@ 0xff
 8010e3e:	bf00      	nop
 8010e40:	00840440 	.word	0x00840440
 8010e44:	00040440 	.word	0x00040440
 8010e48:	00821040 	.word	0x00821040

08010e4c <forward_lite_conv2d_if32of32wf32_pool>:
 8010e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e50:	ed2d 8b0e 	vpush	{d8-d14}
 8010e54:	b0c9      	sub	sp, #292	@ 0x124
 8010e56:	4696      	mov	lr, r2
 8010e58:	4680      	mov	r8, r0
 8010e5a:	f9bd 51cc 	ldrsh.w	r5, [sp, #460]	@ 0x1cc
 8010e5e:	9323      	str	r3, [sp, #140]	@ 0x8c
 8010e60:	f9bd 31ec 	ldrsh.w	r3, [sp, #492]	@ 0x1ec
 8010e64:	9138      	str	r1, [sp, #224]	@ 0xe0
 8010e66:	9239      	str	r2, [sp, #228]	@ 0xe4
 8010e68:	f9bd 118c 	ldrsh.w	r1, [sp, #396]	@ 0x18c
 8010e6c:	fb05 f203 	mul.w	r2, r5, r3
 8010e70:	f9bd 419c 	ldrsh.w	r4, [sp, #412]	@ 0x19c
 8010e74:	9129      	str	r1, [sp, #164]	@ 0xa4
 8010e76:	460e      	mov	r6, r1
 8010e78:	fb01 f202 	mul.w	r2, r1, r2
 8010e7c:	f9bd 1194 	ldrsh.w	r1, [sp, #404]	@ 0x194
 8010e80:	f8bd c1b0 	ldrh.w	ip, [sp, #432]	@ 0x1b0
 8010e84:	9142      	str	r1, [sp, #264]	@ 0x108
 8010e86:	f9bd 11a0 	ldrsh.w	r1, [sp, #416]	@ 0x1a0
 8010e8a:	f9bd 7190 	ldrsh.w	r7, [sp, #400]	@ 0x190
 8010e8e:	932d      	str	r3, [sp, #180]	@ 0xb4
 8010e90:	942a      	str	r4, [sp, #168]	@ 0xa8
 8010e92:	f9bd 3198 	ldrsh.w	r3, [sp, #408]	@ 0x198
 8010e96:	f9bd 4188 	ldrsh.w	r4, [sp, #392]	@ 0x188
 8010e9a:	9113      	str	r1, [sp, #76]	@ 0x4c
 8010e9c:	f8cd c054 	str.w	ip, [sp, #84]	@ 0x54
 8010ea0:	f8bd 11a8 	ldrh.w	r1, [sp, #424]	@ 0x1a8
 8010ea4:	f8bd c1b4 	ldrh.w	ip, [sp, #436]	@ 0x1b4
 8010ea8:	9041      	str	r0, [sp, #260]	@ 0x104
 8010eaa:	933a      	str	r3, [sp, #232]	@ 0xe8
 8010eac:	f8bd 01ac 	ldrh.w	r0, [sp, #428]	@ 0x1ac
 8010eb0:	912b      	str	r1, [sp, #172]	@ 0xac
 8010eb2:	f9bd 91a4 	ldrsh.w	r9, [sp, #420]	@ 0x1a4
 8010eb6:	4243      	negs	r3, r0
 8010eb8:	950f      	str	r5, [sp, #60]	@ 0x3c
 8010eba:	9418      	str	r4, [sp, #96]	@ 0x60
 8010ebc:	9714      	str	r7, [sp, #80]	@ 0x50
 8010ebe:	f8cd c0b0 	str.w	ip, [sp, #176]	@ 0xb0
 8010ec2:	f9bd c1b8 	ldrsh.w	ip, [sp, #440]	@ 0x1b8
 8010ec6:	931e      	str	r3, [sp, #120]	@ 0x78
 8010ec8:	f8cd c10c 	str.w	ip, [sp, #268]	@ 0x10c
 8010ecc:	f9bd c1e8 	ldrsh.w	ip, [sp, #488]	@ 0x1e8
 8010ed0:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8010ed2:	f8cd c110 	str.w	ip, [sp, #272]	@ 0x110
 8010ed6:	f9bd c1f0 	ldrsh.w	ip, [sp, #496]	@ 0x1f0
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	f9bd 11d0 	ldrsh.w	r1, [sp, #464]	@ 0x1d0
 8010ee0:	f8cd c114 	str.w	ip, [sp, #276]	@ 0x114
 8010ee4:	f9bd c1f4 	ldrsh.w	ip, [sp, #500]	@ 0x1f4
 8010ee8:	f8cd c0b8 	str.w	ip, [sp, #184]	@ 0xb8
 8010eec:	f9bd c1f8 	ldrsh.w	ip, [sp, #504]	@ 0x1f8
 8010ef0:	f8cd c118 	str.w	ip, [sp, #280]	@ 0x118
 8010ef4:	f9bd c1fc 	ldrsh.w	ip, [sp, #508]	@ 0x1fc
 8010ef8:	f8cd c074 	str.w	ip, [sp, #116]	@ 0x74
 8010efc:	f340 80a9 	ble.w	8011052 <forward_lite_conv2d_if32of32wf32_pool+0x206>
 8010f00:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8010f02:	3901      	subs	r1, #1
 8010f04:	9020      	str	r0, [sp, #128]	@ 0x80
 8010f06:	fb03 f309 	mul.w	r3, r3, r9
 8010f0a:	fa1f fc81 	uxth.w	ip, r1
 8010f0e:	982e      	ldr	r0, [sp, #184]	@ 0xb8
 8010f10:	fb04 f303 	mul.w	r3, r4, r3
 8010f14:	ed9f 8a51 	vldr	s16, [pc, #324]	@ 801105c <forward_lite_conv2d_if32of32wf32_pool+0x210>
 8010f18:	f8cd c084 	str.w	ip, [sp, #132]	@ 0x84
 8010f1c:	0099      	lsls	r1, r3, #2
 8010f1e:	9124      	str	r1, [sp, #144]	@ 0x90
 8010f20:	4631      	mov	r1, r6
 8010f22:	b2b6      	uxth	r6, r6
 8010f24:	fb00 f301 	mul.w	r3, r0, r1
 8010f28:	9636      	str	r6, [sp, #216]	@ 0xd8
 8010f2a:	00a6      	lsls	r6, r4, #2
 8010f2c:	fb05 f303 	mul.w	r3, r5, r3
 8010f30:	fb05 f501 	mul.w	r5, r5, r1
 8010f34:	0098      	lsls	r0, r3, #2
 8010f36:	9616      	str	r6, [sp, #88]	@ 0x58
 8010f38:	953d      	str	r5, [sp, #244]	@ 0xf4
 8010f3a:	f10e 4578 	add.w	r5, lr, #4160749568	@ 0xf8000000
 8010f3e:	903e      	str	r0, [sp, #248]	@ 0xf8
 8010f40:	9836      	ldr	r0, [sp, #216]	@ 0xd8
 8010f42:	953b      	str	r5, [sp, #236]	@ 0xec
 8010f44:	1e43      	subs	r3, r0, #1
 8010f46:	b29b      	uxth	r3, r3
 8010f48:	3301      	adds	r3, #1
 8010f4a:	0098      	lsls	r0, r3, #2
 8010f4c:	9035      	str	r0, [sp, #212]	@ 0xd4
 8010f4e:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 8010f50:	fb00 f307 	mul.w	r3, r0, r7
 8010f54:	fb04 f303 	mul.w	r3, r4, r3
 8010f58:	0098      	lsls	r0, r3, #2
 8010f5a:	9b3a      	ldr	r3, [sp, #232]	@ 0xe8
 8010f5c:	9034      	str	r0, [sp, #208]	@ 0xd0
 8010f5e:	0090      	lsls	r0, r2, #2
 8010f60:	fb01 f303 	mul.w	r3, r1, r3
 8010f64:	0089      	lsls	r1, r1, #2
 8010f66:	9032      	str	r0, [sp, #200]	@ 0xc8
 8010f68:	9860      	ldr	r0, [sp, #384]	@ 0x180
 8010f6a:	9112      	str	r1, [sp, #72]	@ 0x48
 8010f6c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8010f70:	0098      	lsls	r0, r3, #2
 8010f72:	fb07 f306 	mul.w	r3, r7, r6
 8010f76:	921f      	str	r2, [sp, #124]	@ 0x7c
 8010f78:	903c      	str	r0, [sp, #240]	@ 0xf0
 8010f7a:	981e      	ldr	r0, [sp, #120]	@ 0x78
 8010f7c:	fb00 8703 	mla	r7, r0, r3, r8
 8010f80:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8010f82:	9832      	ldr	r0, [sp, #200]	@ 0xc8
 8010f84:	9722      	str	r7, [sp, #136]	@ 0x88
 8010f86:	425f      	negs	r7, r3
 8010f88:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8010f8a:	4241      	negs	r1, r0
 8010f8c:	9731      	str	r7, [sp, #196]	@ 0xc4
 8010f8e:	fb03 f304 	mul.w	r3, r3, r4
 8010f92:	9125      	str	r1, [sp, #148]	@ 0x94
 8010f94:	009c      	lsls	r4, r3, #2
 8010f96:	fb06 f107 	mul.w	r1, r6, r7
 8010f9a:	9417      	str	r4, [sp, #92]	@ 0x5c
 8010f9c:	2400      	movs	r4, #0
 8010f9e:	9137      	str	r1, [sp, #220]	@ 0xdc
 8010fa0:	9960      	ldr	r1, [sp, #384]	@ 0x180
 8010fa2:	9427      	str	r4, [sp, #156]	@ 0x9c
 8010fa4:	911b      	str	r1, [sp, #108]	@ 0x6c
 8010fa6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010fa8:	9428      	str	r4, [sp, #160]	@ 0xa0
 8010faa:	9333      	str	r3, [sp, #204]	@ 0xcc
 8010fac:	9b76      	ldr	r3, [sp, #472]	@ 0x1d8
 8010fae:	932f      	str	r3, [sp, #188]	@ 0xbc
 8010fb0:	1e53      	subs	r3, r2, #1
 8010fb2:	9347      	str	r3, [sp, #284]	@ 0x11c
 8010fb4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010fb6:	3301      	adds	r3, #1
 8010fb8:	b21b      	sxth	r3, r3
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	dc68      	bgt.n	8011090 <forward_lite_conv2d_if32of32wf32_pool+0x244>
 8010fbe:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010fc0:	041b      	lsls	r3, r3, #16
 8010fc2:	f100 81d5 	bmi.w	8011370 <forward_lite_conv2d_if32of32wf32_pool+0x524>
 8010fc6:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 8010fc8:	9e1d      	ldr	r6, [sp, #116]	@ 0x74
 8010fca:	42b2      	cmp	r2, r6
 8010fcc:	dc48      	bgt.n	8011060 <forward_lite_conv2d_if32of32wf32_pool+0x214>
 8010fce:	9c2c      	ldr	r4, [sp, #176]	@ 0xb0
 8010fd0:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8010fd2:	981e      	ldr	r0, [sp, #120]	@ 0x78
 8010fd4:	3301      	adds	r3, #1
 8010fd6:	9938      	ldr	r1, [sp, #224]	@ 0xe0
 8010fd8:	4420      	add	r0, r4
 8010fda:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 8010fdc:	b21d      	sxth	r5, r3
 8010fde:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8010fe0:	901e      	str	r0, [sp, #120]	@ 0x78
 8010fe2:	983c      	ldr	r0, [sp, #240]	@ 0xf0
 8010fe4:	1b1b      	subs	r3, r3, r4
 8010fe6:	9108      	str	r1, [sp, #32]
 8010fe8:	4401      	add	r1, r0
 8010fea:	9320      	str	r3, [sp, #128]	@ 0x80
 8010fec:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8010fee:	9138      	str	r1, [sp, #224]	@ 0xe0
 8010ff0:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 8010ff2:	9528      	str	r5, [sp, #160]	@ 0xa0
 8010ff4:	440b      	add	r3, r1
 8010ff6:	9322      	str	r3, [sp, #136]	@ 0x88
 8010ff8:	b293      	uxth	r3, r2
 8010ffa:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8010ffc:	9301      	str	r3, [sp, #4]
 8010ffe:	1a9b      	subs	r3, r3, r2
 8011000:	b29a      	uxth	r2, r3
 8011002:	b2bb      	uxth	r3, r7
 8011004:	1af1      	subs	r1, r6, r3
 8011006:	9305      	str	r3, [sp, #20]
 8011008:	9e33      	ldr	r6, [sp, #204]	@ 0xcc
 801100a:	b20b      	sxth	r3, r1
 801100c:	f8bd 103c 	ldrh.w	r1, [sp, #60]	@ 0x3c
 8011010:	931d      	str	r3, [sp, #116]	@ 0x74
 8011012:	b2b3      	uxth	r3, r6
 8011014:	9303      	str	r3, [sp, #12]
 8011016:	2301      	movs	r3, #1
 8011018:	9307      	str	r3, [sp, #28]
 801101a:	f8bd 30e8 	ldrh.w	r3, [sp, #232]	@ 0xe8
 801101e:	9306      	str	r3, [sp, #24]
 8011020:	f8bd 3114 	ldrh.w	r3, [sp, #276]	@ 0x114
 8011024:	9304      	str	r3, [sp, #16]
 8011026:	f8bd 3118 	ldrh.w	r3, [sp, #280]	@ 0x118
 801102a:	9302      	str	r3, [sp, #8]
 801102c:	f8bd 3110 	ldrh.w	r3, [sp, #272]	@ 0x110
 8011030:	9300      	str	r3, [sp, #0]
 8011032:	9b36      	ldr	r3, [sp, #216]	@ 0xd8
 8011034:	9860      	ldr	r0, [sp, #384]	@ 0x180
 8011036:	9c79      	ldr	r4, [sp, #484]	@ 0x1e4
 8011038:	47a0      	blx	r4
 801103a:	1bf3      	subs	r3, r6, r7
 801103c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801103e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011042:	3a01      	subs	r2, #1
 8011044:	b21b      	sxth	r3, r3
 8011046:	b292      	uxth	r2, r2
 8011048:	9333      	str	r3, [sp, #204]	@ 0xcc
 801104a:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801104c:	9221      	str	r2, [sp, #132]	@ 0x84
 801104e:	42ab      	cmp	r3, r5
 8011050:	dcb0      	bgt.n	8010fb4 <forward_lite_conv2d_if32of32wf32_pool+0x168>
 8011052:	b049      	add	sp, #292	@ 0x124
 8011054:	ecbd 8b0e 	vpop	{d8-d14}
 8011058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801105c:	00000000 	.word	0x00000000
 8011060:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 8011062:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8011064:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8011066:	440a      	add	r2, r1
 8011068:	3b01      	subs	r3, #1
 801106a:	921e      	str	r2, [sp, #120]	@ 0x78
 801106c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801106e:	b29b      	uxth	r3, r3
 8011070:	1a52      	subs	r2, r2, r1
 8011072:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 8011074:	9321      	str	r3, [sp, #132]	@ 0x84
 8011076:	9220      	str	r2, [sp, #128]	@ 0x80
 8011078:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 801107a:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801107c:	440a      	add	r2, r1
 801107e:	9222      	str	r2, [sp, #136]	@ 0x88
 8011080:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8011082:	4293      	cmp	r3, r2
 8011084:	dde5      	ble.n	8011052 <forward_lite_conv2d_if32of32wf32_pool+0x206>
 8011086:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8011088:	3301      	adds	r3, #1
 801108a:	b21b      	sxth	r3, r3
 801108c:	2b00      	cmp	r3, #0
 801108e:	dd96      	ble.n	8010fbe <forward_lite_conv2d_if32of32wf32_pool+0x172>
 8011090:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8011092:	2b00      	cmp	r3, #0
 8011094:	f2c0 82d1 	blt.w	801163a <forward_lite_conv2d_if32of32wf32_pool+0x7ee>
 8011098:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801109a:	931c      	str	r3, [sp, #112]	@ 0x70
 801109c:	2300      	movs	r3, #0
 801109e:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80110a0:	9a42      	ldr	r2, [sp, #264]	@ 0x108
 80110a2:	440a      	add	r2, r1
 80110a4:	9943      	ldr	r1, [sp, #268]	@ 0x10c
 80110a6:	428a      	cmp	r2, r1
 80110a8:	bfd4      	ite	le
 80110aa:	ebc3 0b02 	rsble	fp, r3, r2
 80110ae:	ebc3 0b01 	rsbgt	fp, r3, r1
 80110b2:	9a61      	ldr	r2, [sp, #388]	@ 0x184
 80110b4:	2a00      	cmp	r2, #0
 80110b6:	f000 819d 	beq.w	80113f4 <forward_lite_conv2d_if32of32wf32_pool+0x5a8>
 80110ba:	9a3b      	ldr	r2, [sp, #236]	@ 0xec
 80110bc:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 80110c0:	f0c0 8198 	bcc.w	80113f4 <forward_lite_conv2d_if32of32wf32_pool+0x5a8>
 80110c4:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 80110c6:	2a00      	cmp	r2, #0
 80110c8:	f340 8115 	ble.w	80112f6 <forward_lite_conv2d_if32of32wf32_pool+0x4aa>
 80110cc:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80110ce:	9937      	ldr	r1, [sp, #220]	@ 0xdc
 80110d0:	fb02 f303 	mul.w	r3, r2, r3
 80110d4:	9a35      	ldr	r2, [sp, #212]	@ 0xd4
 80110d6:	9319      	str	r3, [sp, #100]	@ 0x64
 80110d8:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80110da:	189a      	adds	r2, r3, r2
 80110dc:	9326      	str	r3, [sp, #152]	@ 0x98
 80110de:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80110e0:	923f      	str	r2, [sp, #252]	@ 0xfc
 80110e2:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80110e4:	9330      	str	r3, [sp, #192]	@ 0xc0
 80110e6:	440a      	add	r2, r1
 80110e8:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 80110ea:	9240      	str	r2, [sp, #256]	@ 0x100
 80110ec:	931a      	str	r3, [sp, #104]	@ 0x68
 80110ee:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80110f0:	9961      	ldr	r1, [sp, #388]	@ 0x184
 80110f2:	981a      	ldr	r0, [sp, #104]	@ 0x68
 80110f4:	f001 fe4a 	bl	8012d8c <st_int8_copy>
 80110f8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	f000 8135 	beq.w	801136a <forward_lite_conv2d_if32of32wf32_pool+0x51e>
 8011100:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8011102:	ecf3 1a01 	vldmia	r3!, {s3}
 8011106:	9330      	str	r3, [sp, #192]	@ 0xc0
 8011108:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801110a:	2b00      	cmp	r3, #0
 801110c:	f000 80e8 	beq.w	80112e0 <forward_lite_conv2d_if32of32wf32_pool+0x494>
 8011110:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8011112:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8011114:	189a      	adds	r2, r3, r2
 8011116:	920c      	str	r2, [sp, #48]	@ 0x30
 8011118:	9a40      	ldr	r2, [sp, #256]	@ 0x100
 801111a:	e9cd 230d 	strd	r2, r3, [sp, #52]	@ 0x34
 801111e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8011120:	9310      	str	r3, [sp, #64]	@ 0x40
 8011122:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 8011124:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011126:	2300      	movs	r3, #0
 8011128:	9311      	str	r3, [sp, #68]	@ 0x44
 801112a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801112c:	2b00      	cmp	r3, #0
 801112e:	f2c0 8113 	blt.w	8011358 <forward_lite_conv2d_if32of32wf32_pool+0x50c>
 8011132:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8011134:	2600      	movs	r6, #0
 8011136:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011138:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801113a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801113c:	9c61      	ldr	r4, [sp, #388]	@ 0x184
 801113e:	4298      	cmp	r0, r3
 8011140:	bf94      	ite	ls
 8011142:	ebc6 0600 	rsbls	r6, r6, r0
 8011146:	ebc6 0603 	rsbhi	r6, r6, r3
 801114a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801114c:	f1bb 0f00 	cmp.w	fp, #0
 8011150:	eba0 0906 	sub.w	r9, r0, r6
 8011154:	fb02 4203 	mla	r2, r2, r3, r4
 8011158:	9818      	ldr	r0, [sp, #96]	@ 0x60
 801115a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801115c:	eba4 0a06 	sub.w	sl, r4, r6
 8011160:	fb00 f606 	mul.w	r6, r0, r6
 8011164:	f340 80fe 	ble.w	8011364 <forward_lite_conv2d_if32of32wf32_pool+0x518>
 8011168:	f026 070f 	bic.w	r7, r6, #15
 801116c:	eeb0 7a61 	vmov.f32	s14, s3
 8011170:	fb0a fa03 	mul.w	sl, sl, r3
 8011174:	f04f 0c00 	mov.w	ip, #0
 8011178:	f107 38ff 	add.w	r8, r7, #4294967295
 801117c:	fb09 f903 	mul.w	r9, r9, r3
 8011180:	ea4f 1818 	mov.w	r8, r8, lsr #4
 8011184:	f108 0801 	add.w	r8, r8, #1
 8011188:	ea4f 1e88 	mov.w	lr, r8, lsl #6
 801118c:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8011190:	2f00      	cmp	r7, #0
 8011192:	f340 80df 	ble.w	8011354 <forward_lite_conv2d_if32of32wf32_pool+0x508>
 8011196:	f101 0040 	add.w	r0, r1, #64	@ 0x40
 801119a:	f102 0340 	add.w	r3, r2, #64	@ 0x40
 801119e:	2400      	movs	r4, #0
 80111a0:	ed53 6a0f 	vldr	s13, [r3, #-60]	@ 0xffffffc4
 80111a4:	3410      	adds	r4, #16
 80111a6:	ed50 7a0f 	vldr	s15, [r0, #-60]	@ 0xffffffc4
 80111aa:	3340      	adds	r3, #64	@ 0x40
 80111ac:	ed50 4a10 	vldr	s9, [r0, #-64]	@ 0xffffffc0
 80111b0:	42bc      	cmp	r4, r7
 80111b2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80111b6:	ed13 5a20 	vldr	s10, [r3, #-128]	@ 0xffffff80
 80111ba:	ed50 5a0e 	vldr	s11, [r0, #-56]	@ 0xffffffc8
 80111be:	f100 0040 	add.w	r0, r0, #64	@ 0x40
 80111c2:	ed13 6a1e 	vldr	s12, [r3, #-120]	@ 0xffffff88
 80111c6:	eee4 7a85 	vfma.f32	s15, s9, s10
 80111ca:	ed53 6a1d 	vldr	s13, [r3, #-116]	@ 0xffffff8c
 80111ce:	ed10 ea1d 	vldr	s28, [r0, #-116]	@ 0xffffff8c
 80111d2:	ed50 da1c 	vldr	s27, [r0, #-112]	@ 0xffffff90
 80111d6:	ed13 da1c 	vldr	s26, [r3, #-112]	@ 0xffffff90
 80111da:	ed50 ca1b 	vldr	s25, [r0, #-108]	@ 0xffffff94
 80111de:	ed13 ca1b 	vldr	s24, [r3, #-108]	@ 0xffffff94
 80111e2:	eee5 7a86 	vfma.f32	s15, s11, s12
 80111e6:	ed50 ba1a 	vldr	s23, [r0, #-104]	@ 0xffffff98
 80111ea:	ed13 ba1a 	vldr	s22, [r3, #-104]	@ 0xffffff98
 80111ee:	ed50 aa19 	vldr	s21, [r0, #-100]	@ 0xffffff9c
 80111f2:	ed13 aa19 	vldr	s20, [r3, #-100]	@ 0xffffff9c
 80111f6:	ed50 9a18 	vldr	s19, [r0, #-96]	@ 0xffffffa0
 80111fa:	ed13 9a18 	vldr	s18, [r3, #-96]	@ 0xffffffa0
 80111fe:	eeee 7a26 	vfma.f32	s15, s28, s13
 8011202:	ed50 8a17 	vldr	s17, [r0, #-92]	@ 0xffffffa4
 8011206:	ed13 0a17 	vldr	s0, [r3, #-92]	@ 0xffffffa4
 801120a:	ed50 0a16 	vldr	s1, [r0, #-88]	@ 0xffffffa8
 801120e:	ed13 1a16 	vldr	s2, [r3, #-88]	@ 0xffffffa8
 8011212:	ed10 2a15 	vldr	s4, [r0, #-84]	@ 0xffffffac
 8011216:	ed53 2a15 	vldr	s5, [r3, #-84]	@ 0xffffffac
 801121a:	eeed 7a8d 	vfma.f32	s15, s27, s26
 801121e:	ed10 3a14 	vldr	s6, [r0, #-80]	@ 0xffffffb0
 8011222:	ed53 3a14 	vldr	s7, [r3, #-80]	@ 0xffffffb0
 8011226:	ed10 4a13 	vldr	s8, [r0, #-76]	@ 0xffffffb4
 801122a:	ed53 4a13 	vldr	s9, [r3, #-76]	@ 0xffffffb4
 801122e:	ed10 5a12 	vldr	s10, [r0, #-72]	@ 0xffffffb8
 8011232:	ed53 5a12 	vldr	s11, [r3, #-72]	@ 0xffffffb8
 8011236:	eeec 7a8c 	vfma.f32	s15, s25, s24
 801123a:	ed10 6a11 	vldr	s12, [r0, #-68]	@ 0xffffffbc
 801123e:	ed53 6a11 	vldr	s13, [r3, #-68]	@ 0xffffffbc
 8011242:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 8011246:	eeea 7a8a 	vfma.f32	s15, s21, s20
 801124a:	eee9 7a89 	vfma.f32	s15, s19, s18
 801124e:	eee8 7a80 	vfma.f32	s15, s17, s0
 8011252:	eee0 7a81 	vfma.f32	s15, s1, s2
 8011256:	eee2 7a22 	vfma.f32	s15, s4, s5
 801125a:	eee3 7a23 	vfma.f32	s15, s6, s7
 801125e:	eee4 7a24 	vfma.f32	s15, s8, s9
 8011262:	eee5 7a25 	vfma.f32	s15, s10, s11
 8011266:	eee6 7a26 	vfma.f32	s15, s12, s13
 801126a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801126e:	db97      	blt.n	80111a0 <forward_lite_conv2d_if32of32wf32_pool+0x354>
 8011270:	4471      	add	r1, lr
 8011272:	4472      	add	r2, lr
 8011274:	4645      	mov	r5, r8
 8011276:	42ae      	cmp	r6, r5
 8011278:	dd10      	ble.n	801129c <forward_lite_conv2d_if32of32wf32_pool+0x450>
 801127a:	462b      	mov	r3, r5
 801127c:	460c      	mov	r4, r1
 801127e:	4610      	mov	r0, r2
 8011280:	3301      	adds	r3, #1
 8011282:	ecf0 6a01 	vldmia	r0!, {s13}
 8011286:	ecf4 7a01 	vldmia	r4!, {s15}
 801128a:	429e      	cmp	r6, r3
 801128c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011290:	d1f6      	bne.n	8011280 <forward_lite_conv2d_if32of32wf32_pool+0x434>
 8011292:	1b75      	subs	r5, r6, r5
 8011294:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8011298:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 801129c:	f10c 0c01 	add.w	ip, ip, #1
 80112a0:	4451      	add	r1, sl
 80112a2:	444a      	add	r2, r9
 80112a4:	45e3      	cmp	fp, ip
 80112a6:	f47f af73 	bne.w	8011190 <forward_lite_conv2d_if32of32wf32_pool+0x344>
 80112aa:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80112ac:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80112ae:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80112b0:	4410      	add	r0, r2
 80112b2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80112b4:	ed81 7a00 	vstr	s14, [r1]
 80112b8:	900b      	str	r0, [sp, #44]	@ 0x2c
 80112ba:	3301      	adds	r3, #1
 80112bc:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80112be:	9311      	str	r3, [sp, #68]	@ 0x44
 80112c0:	4401      	add	r1, r0
 80112c2:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 80112c4:	9110      	str	r1, [sp, #64]	@ 0x40
 80112c6:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80112c8:	1a89      	subs	r1, r1, r2
 80112ca:	910e      	str	r1, [sp, #56]	@ 0x38
 80112cc:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80112ce:	4401      	add	r1, r0
 80112d0:	910d      	str	r1, [sp, #52]	@ 0x34
 80112d2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80112d4:	1a8a      	subs	r2, r1, r2
 80112d6:	920c      	str	r2, [sp, #48]	@ 0x30
 80112d8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80112da:	429a      	cmp	r2, r3
 80112dc:	f47f af25 	bne.w	801112a <forward_lite_conv2d_if32of32wf32_pool+0x2de>
 80112e0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80112e2:	9924      	ldr	r1, [sp, #144]	@ 0x90
 80112e4:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80112e6:	440a      	add	r2, r1
 80112e8:	3304      	adds	r3, #4
 80112ea:	921a      	str	r2, [sp, #104]	@ 0x68
 80112ec:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 80112ee:	9326      	str	r3, [sp, #152]	@ 0x98
 80112f0:	4293      	cmp	r3, r2
 80112f2:	f47f aefc 	bne.w	80110ee <forward_lite_conv2d_if32of32wf32_pool+0x2a2>
 80112f6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	dd26      	ble.n	801134a <forward_lite_conv2d_if32of32wf32_pool+0x4fe>
 80112fc:	9b75      	ldr	r3, [sp, #468]	@ 0x1d4
 80112fe:	2b00      	cmp	r3, #0
 8011300:	f000 819f 	beq.w	8011642 <forward_lite_conv2d_if32of32wf32_pool+0x7f6>
 8011304:	4699      	mov	r9, r3
 8011306:	2400      	movs	r4, #0
 8011308:	9d2f      	ldr	r5, [sp, #188]	@ 0xbc
 801130a:	f8dd 806c 	ldr.w	r8, [sp, #108]	@ 0x6c
 801130e:	9f29      	ldr	r7, [sp, #164]	@ 0xa4
 8011310:	f8dd b1e0 	ldr.w	fp, [sp, #480]	@ 0x1e0
 8011314:	e9dd 6a76 	ldrd	r6, sl, [sp, #472]	@ 0x1d8
 8011318:	462b      	mov	r3, r5
 801131a:	4455      	add	r5, sl
 801131c:	463a      	mov	r2, r7
 801131e:	4641      	mov	r1, r8
 8011320:	4640      	mov	r0, r8
 8011322:	3401      	adds	r4, #1
 8011324:	47c8      	blx	r9
 8011326:	1bab      	subs	r3, r5, r6
 8011328:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801132a:	b224      	sxth	r4, r4
 801132c:	455b      	cmp	r3, fp
 801132e:	bfa8      	it	ge
 8011330:	4635      	movge	r5, r6
 8011332:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8011334:	4490      	add	r8, r2
 8011336:	4543      	cmp	r3, r8
 8011338:	d801      	bhi.n	801133e <forward_lite_conv2d_if32of32wf32_pool+0x4f2>
 801133a:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801133c:	4498      	add	r8, r3
 801133e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011340:	42a3      	cmp	r3, r4
 8011342:	d1e9      	bne.n	8011318 <forward_lite_conv2d_if32of32wf32_pool+0x4cc>
 8011344:	952f      	str	r5, [sp, #188]	@ 0xbc
 8011346:	f8cd 806c 	str.w	r8, [sp, #108]	@ 0x6c
 801134a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801134c:	3301      	adds	r3, #1
 801134e:	b21b      	sxth	r3, r3
 8011350:	931d      	str	r3, [sp, #116]	@ 0x74
 8011352:	e638      	b.n	8010fc6 <forward_lite_conv2d_if32of32wf32_pool+0x17a>
 8011354:	2500      	movs	r5, #0
 8011356:	e78e      	b.n	8011276 <forward_lite_conv2d_if32of32wf32_pool+0x42a>
 8011358:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801135a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801135c:	4616      	mov	r6, r2
 801135e:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8011360:	189a      	adds	r2, r3, r2
 8011362:	e6e9      	b.n	8011138 <forward_lite_conv2d_if32of32wf32_pool+0x2ec>
 8011364:	eeb0 7a61 	vmov.f32	s14, s3
 8011368:	e79f      	b.n	80112aa <forward_lite_conv2d_if32of32wf32_pool+0x45e>
 801136a:	eef0 1a48 	vmov.f32	s3, s16
 801136e:	e6cb      	b.n	8011108 <forward_lite_conv2d_if32of32wf32_pool+0x2bc>
 8011370:	9a3d      	ldr	r2, [sp, #244]	@ 0xf4
 8011372:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8011374:	fb02 f303 	mul.w	r3, r2, r3
 8011378:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801137a:	eba2 0383 	sub.w	r3, r2, r3, lsl #2
 801137e:	9a60      	ldr	r2, [sp, #384]	@ 0x180
 8011380:	429a      	cmp	r2, r3
 8011382:	d901      	bls.n	8011388 <forward_lite_conv2d_if32of32wf32_pool+0x53c>
 8011384:	9a32      	ldr	r2, [sp, #200]	@ 0xc8
 8011386:	4413      	add	r3, r2
 8011388:	9a60      	ldr	r2, [sp, #384]	@ 0x180
 801138a:	429a      	cmp	r2, r3
 801138c:	d217      	bcs.n	80113be <forward_lite_conv2d_if32of32wf32_pool+0x572>
 801138e:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 8011390:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8011392:	428a      	cmp	r2, r1
 8011394:	d013      	beq.n	80113be <forward_lite_conv2d_if32of32wf32_pool+0x572>
 8011396:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 8011398:	429a      	cmp	r2, r3
 801139a:	d910      	bls.n	80113be <forward_lite_conv2d_if32of32wf32_pool+0x572>
 801139c:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 801139e:	461a      	mov	r2, r3
 80113a0:	f852 0b04 	ldr.w	r0, [r2], #4
 80113a4:	f841 0b04 	str.w	r0, [r1], #4
 80113a8:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 80113aa:	4290      	cmp	r0, r2
 80113ac:	d8f8      	bhi.n	80113a0 <forward_lite_conv2d_if32of32wf32_pool+0x554>
 80113ae:	9a47      	ldr	r2, [sp, #284]	@ 0x11c
 80113b0:	1ad3      	subs	r3, r2, r3
 80113b2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80113b4:	f023 0303 	bic.w	r3, r3, #3
 80113b8:	3304      	adds	r3, #4
 80113ba:	441a      	add	r2, r3
 80113bc:	921b      	str	r2, [sp, #108]	@ 0x6c
 80113be:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 80113c0:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 80113c2:	f8bd 3074 	ldrh.w	r3, [sp, #116]	@ 0x74
 80113c6:	440a      	add	r2, r1
 80113c8:	983e      	ldr	r0, [sp, #248]	@ 0xf8
 80113ca:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 80113cc:	1ad2      	subs	r2, r2, r3
 80113ce:	4401      	add	r1, r0
 80113d0:	982e      	ldr	r0, [sp, #184]	@ 0xb8
 80113d2:	b212      	sxth	r2, r2
 80113d4:	4403      	add	r3, r0
 80113d6:	911b      	str	r1, [sp, #108]	@ 0x6c
 80113d8:	9227      	str	r2, [sp, #156]	@ 0x9c
 80113da:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 80113dc:	b21b      	sxth	r3, r3
 80113de:	428a      	cmp	r2, r1
 80113e0:	931d      	str	r3, [sp, #116]	@ 0x74
 80113e2:	460b      	mov	r3, r1
 80113e4:	f63f adef 	bhi.w	8010fc6 <forward_lite_conv2d_if32of32wf32_pool+0x17a>
 80113e8:	9925      	ldr	r1, [sp, #148]	@ 0x94
 80113ea:	440b      	add	r3, r1
 80113ec:	429a      	cmp	r2, r3
 80113ee:	d9fc      	bls.n	80113ea <forward_lite_conv2d_if32of32wf32_pool+0x59e>
 80113f0:	931b      	str	r3, [sp, #108]	@ 0x6c
 80113f2:	e5e8      	b.n	8010fc6 <forward_lite_conv2d_if32of32wf32_pool+0x17a>
 80113f4:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 80113f6:	2a00      	cmp	r2, #0
 80113f8:	f77f af7d 	ble.w	80112f6 <forward_lite_conv2d_if32of32wf32_pool+0x4aa>
 80113fc:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80113fe:	9937      	ldr	r1, [sp, #220]	@ 0xdc
 8011400:	fb02 f303 	mul.w	r3, r2, r3
 8011404:	9a35      	ldr	r2, [sp, #212]	@ 0xd4
 8011406:	931a      	str	r3, [sp, #104]	@ 0x68
 8011408:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801140a:	189a      	adds	r2, r3, r2
 801140c:	9326      	str	r3, [sp, #152]	@ 0x98
 801140e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011410:	923f      	str	r2, [sp, #252]	@ 0xfc
 8011412:	9330      	str	r3, [sp, #192]	@ 0xc0
 8011414:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8011416:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 8011418:	440a      	add	r2, r1
 801141a:	9319      	str	r3, [sp, #100]	@ 0x64
 801141c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801141e:	9240      	str	r2, [sp, #256]	@ 0x100
 8011420:	2b00      	cmp	r3, #0
 8011422:	f000 80fc 	beq.w	801161e <forward_lite_conv2d_if32of32wf32_pool+0x7d2>
 8011426:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8011428:	ecf3 1a01 	vldmia	r3!, {s3}
 801142c:	9330      	str	r3, [sp, #192]	@ 0xc0
 801142e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011430:	2b00      	cmp	r3, #0
 8011432:	f000 80e5 	beq.w	8011600 <forward_lite_conv2d_if32of32wf32_pool+0x7b4>
 8011436:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8011438:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801143a:	189a      	adds	r2, r3, r2
 801143c:	920c      	str	r2, [sp, #48]	@ 0x30
 801143e:	9a40      	ldr	r2, [sp, #256]	@ 0x100
 8011440:	e9cd 230d 	strd	r2, r3, [sp, #52]	@ 0x34
 8011444:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8011446:	9310      	str	r3, [sp, #64]	@ 0x40
 8011448:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 801144a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801144c:	2300      	movs	r3, #0
 801144e:	9311      	str	r3, [sp, #68]	@ 0x44
 8011450:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011452:	2b00      	cmp	r3, #0
 8011454:	f2c0 80e8 	blt.w	8011628 <forward_lite_conv2d_if32of32wf32_pool+0x7dc>
 8011458:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801145a:	2000      	movs	r0, #0
 801145c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801145e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8011460:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8011462:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8011464:	428c      	cmp	r4, r1
 8011466:	bf94      	ite	ls
 8011468:	ebc0 0004 	rsbls	r0, r0, r4
 801146c:	ebc0 0001 	rsbhi	r0, r0, r1
 8011470:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8011472:	f1bb 0f00 	cmp.w	fp, #0
 8011476:	eba4 0900 	sub.w	r9, r4, r0
 801147a:	fb03 5301 	mla	r3, r3, r1, r5
 801147e:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8011480:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8011482:	eba5 0a00 	sub.w	sl, r5, r0
 8011486:	fb04 f000 	mul.w	r0, r4, r0
 801148a:	f340 80d3 	ble.w	8011634 <forward_lite_conv2d_if32of32wf32_pool+0x7e8>
 801148e:	f020 080f 	bic.w	r8, r0, #15
 8011492:	eeb0 7a61 	vmov.f32	s14, s3
 8011496:	fb0a fa01 	mul.w	sl, sl, r1
 801149a:	2400      	movs	r4, #0
 801149c:	f108 37ff 	add.w	r7, r8, #4294967295
 80114a0:	fb09 f901 	mul.w	r9, r9, r1
 80114a4:	093f      	lsrs	r7, r7, #4
 80114a6:	3701      	adds	r7, #1
 80114a8:	01be      	lsls	r6, r7, #6
 80114aa:	013f      	lsls	r7, r7, #4
 80114ac:	f1b8 0f00 	cmp.w	r8, #0
 80114b0:	f340 80b8 	ble.w	8011624 <forward_lite_conv2d_if32of32wf32_pool+0x7d8>
 80114b4:	f102 0540 	add.w	r5, r2, #64	@ 0x40
 80114b8:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 80114bc:	f04f 0c00 	mov.w	ip, #0
 80114c0:	ed51 6a0f 	vldr	s13, [r1, #-60]	@ 0xffffffc4
 80114c4:	f10c 0c10 	add.w	ip, ip, #16
 80114c8:	ed55 7a0f 	vldr	s15, [r5, #-60]	@ 0xffffffc4
 80114cc:	3140      	adds	r1, #64	@ 0x40
 80114ce:	ed55 4a10 	vldr	s9, [r5, #-64]	@ 0xffffffc0
 80114d2:	45c4      	cmp	ip, r8
 80114d4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80114d8:	ed11 5a20 	vldr	s10, [r1, #-128]	@ 0xffffff80
 80114dc:	ed55 5a0e 	vldr	s11, [r5, #-56]	@ 0xffffffc8
 80114e0:	f105 0540 	add.w	r5, r5, #64	@ 0x40
 80114e4:	ed11 6a1e 	vldr	s12, [r1, #-120]	@ 0xffffff88
 80114e8:	eee4 7a85 	vfma.f32	s15, s9, s10
 80114ec:	ed51 6a1d 	vldr	s13, [r1, #-116]	@ 0xffffff8c
 80114f0:	ed15 ea1d 	vldr	s28, [r5, #-116]	@ 0xffffff8c
 80114f4:	ed55 da1c 	vldr	s27, [r5, #-112]	@ 0xffffff90
 80114f8:	ed11 da1c 	vldr	s26, [r1, #-112]	@ 0xffffff90
 80114fc:	ed55 ca1b 	vldr	s25, [r5, #-108]	@ 0xffffff94
 8011500:	ed11 ca1b 	vldr	s24, [r1, #-108]	@ 0xffffff94
 8011504:	eee5 7a86 	vfma.f32	s15, s11, s12
 8011508:	ed55 ba1a 	vldr	s23, [r5, #-104]	@ 0xffffff98
 801150c:	ed11 ba1a 	vldr	s22, [r1, #-104]	@ 0xffffff98
 8011510:	ed55 aa19 	vldr	s21, [r5, #-100]	@ 0xffffff9c
 8011514:	ed11 aa19 	vldr	s20, [r1, #-100]	@ 0xffffff9c
 8011518:	ed55 9a18 	vldr	s19, [r5, #-96]	@ 0xffffffa0
 801151c:	ed11 9a18 	vldr	s18, [r1, #-96]	@ 0xffffffa0
 8011520:	eeee 7a26 	vfma.f32	s15, s28, s13
 8011524:	ed55 8a17 	vldr	s17, [r5, #-92]	@ 0xffffffa4
 8011528:	ed11 0a17 	vldr	s0, [r1, #-92]	@ 0xffffffa4
 801152c:	ed55 0a16 	vldr	s1, [r5, #-88]	@ 0xffffffa8
 8011530:	ed11 1a16 	vldr	s2, [r1, #-88]	@ 0xffffffa8
 8011534:	ed15 2a15 	vldr	s4, [r5, #-84]	@ 0xffffffac
 8011538:	ed51 2a15 	vldr	s5, [r1, #-84]	@ 0xffffffac
 801153c:	eeed 7a8d 	vfma.f32	s15, s27, s26
 8011540:	ed15 3a14 	vldr	s6, [r5, #-80]	@ 0xffffffb0
 8011544:	ed51 3a14 	vldr	s7, [r1, #-80]	@ 0xffffffb0
 8011548:	ed15 4a13 	vldr	s8, [r5, #-76]	@ 0xffffffb4
 801154c:	ed51 4a13 	vldr	s9, [r1, #-76]	@ 0xffffffb4
 8011550:	ed15 5a12 	vldr	s10, [r5, #-72]	@ 0xffffffb8
 8011554:	ed51 5a12 	vldr	s11, [r1, #-72]	@ 0xffffffb8
 8011558:	eeec 7a8c 	vfma.f32	s15, s25, s24
 801155c:	ed15 6a11 	vldr	s12, [r5, #-68]	@ 0xffffffbc
 8011560:	ed51 6a11 	vldr	s13, [r1, #-68]	@ 0xffffffbc
 8011564:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 8011568:	eeea 7a8a 	vfma.f32	s15, s21, s20
 801156c:	eee9 7a89 	vfma.f32	s15, s19, s18
 8011570:	eee8 7a80 	vfma.f32	s15, s17, s0
 8011574:	eee0 7a81 	vfma.f32	s15, s1, s2
 8011578:	eee2 7a22 	vfma.f32	s15, s4, s5
 801157c:	eee3 7a23 	vfma.f32	s15, s6, s7
 8011580:	eee4 7a24 	vfma.f32	s15, s8, s9
 8011584:	eee5 7a25 	vfma.f32	s15, s10, s11
 8011588:	eee6 7a26 	vfma.f32	s15, s12, s13
 801158c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011590:	db96      	blt.n	80114c0 <forward_lite_conv2d_if32of32wf32_pool+0x674>
 8011592:	4432      	add	r2, r6
 8011594:	4433      	add	r3, r6
 8011596:	4639      	mov	r1, r7
 8011598:	4288      	cmp	r0, r1
 801159a:	dd10      	ble.n	80115be <forward_lite_conv2d_if32of32wf32_pool+0x772>
 801159c:	460d      	mov	r5, r1
 801159e:	4696      	mov	lr, r2
 80115a0:	469c      	mov	ip, r3
 80115a2:	3501      	adds	r5, #1
 80115a4:	ecfc 6a01 	vldmia	ip!, {s13}
 80115a8:	ecfe 7a01 	vldmia	lr!, {s15}
 80115ac:	42a8      	cmp	r0, r5
 80115ae:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80115b2:	d1f6      	bne.n	80115a2 <forward_lite_conv2d_if32of32wf32_pool+0x756>
 80115b4:	1a41      	subs	r1, r0, r1
 80115b6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80115ba:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80115be:	3401      	adds	r4, #1
 80115c0:	4452      	add	r2, sl
 80115c2:	444b      	add	r3, r9
 80115c4:	45a3      	cmp	fp, r4
 80115c6:	f47f af71 	bne.w	80114ac <forward_lite_conv2d_if32of32wf32_pool+0x660>
 80115ca:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80115cc:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80115ce:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80115d0:	4410      	add	r0, r2
 80115d2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80115d4:	ed81 7a00 	vstr	s14, [r1]
 80115d8:	900b      	str	r0, [sp, #44]	@ 0x2c
 80115da:	3301      	adds	r3, #1
 80115dc:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80115de:	9311      	str	r3, [sp, #68]	@ 0x44
 80115e0:	4401      	add	r1, r0
 80115e2:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 80115e4:	9110      	str	r1, [sp, #64]	@ 0x40
 80115e6:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80115e8:	1a89      	subs	r1, r1, r2
 80115ea:	910e      	str	r1, [sp, #56]	@ 0x38
 80115ec:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80115ee:	4401      	add	r1, r0
 80115f0:	910d      	str	r1, [sp, #52]	@ 0x34
 80115f2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80115f4:	1a8a      	subs	r2, r1, r2
 80115f6:	920c      	str	r2, [sp, #48]	@ 0x30
 80115f8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80115fa:	429a      	cmp	r2, r3
 80115fc:	f47f af28 	bne.w	8011450 <forward_lite_conv2d_if32of32wf32_pool+0x604>
 8011600:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011602:	9924      	ldr	r1, [sp, #144]	@ 0x90
 8011604:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8011606:	440a      	add	r2, r1
 8011608:	3304      	adds	r3, #4
 801160a:	9219      	str	r2, [sp, #100]	@ 0x64
 801160c:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 801160e:	9326      	str	r3, [sp, #152]	@ 0x98
 8011610:	4293      	cmp	r3, r2
 8011612:	f43f ae70 	beq.w	80112f6 <forward_lite_conv2d_if32of32wf32_pool+0x4aa>
 8011616:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011618:	2b00      	cmp	r3, #0
 801161a:	f47f af04 	bne.w	8011426 <forward_lite_conv2d_if32of32wf32_pool+0x5da>
 801161e:	eef0 1a48 	vmov.f32	s3, s16
 8011622:	e704      	b.n	801142e <forward_lite_conv2d_if32of32wf32_pool+0x5e2>
 8011624:	2100      	movs	r1, #0
 8011626:	e7b7      	b.n	8011598 <forward_lite_conv2d_if32of32wf32_pool+0x74c>
 8011628:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801162a:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801162c:	4610      	mov	r0, r2
 801162e:	4413      	add	r3, r2
 8011630:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8011632:	e714      	b.n	801145e <forward_lite_conv2d_if32of32wf32_pool+0x612>
 8011634:	eeb0 7a61 	vmov.f32	s14, s3
 8011638:	e7c7      	b.n	80115ca <forward_lite_conv2d_if32of32wf32_pool+0x77e>
 801163a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801163c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801163e:	921c      	str	r2, [sp, #112]	@ 0x70
 8011640:	e52d      	b.n	801109e <forward_lite_conv2d_if32of32wf32_pool+0x252>
 8011642:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8011644:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8011646:	3301      	adds	r3, #1
 8011648:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 801164a:	440a      	add	r2, r1
 801164c:	b219      	sxth	r1, r3
 801164e:	4290      	cmp	r0, r2
 8011650:	d801      	bhi.n	8011656 <forward_lite_conv2d_if32of32wf32_pool+0x80a>
 8011652:	9825      	ldr	r0, [sp, #148]	@ 0x94
 8011654:	4402      	add	r2, r0
 8011656:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8011658:	4281      	cmp	r1, r0
 801165a:	dbf3      	blt.n	8011644 <forward_lite_conv2d_if32of32wf32_pool+0x7f8>
 801165c:	921b      	str	r2, [sp, #108]	@ 0x6c
 801165e:	e674      	b.n	801134a <forward_lite_conv2d_if32of32wf32_pool+0x4fe>

08011660 <forward_lite_nl_relu_generic_if32of32_kernel>:
 8011660:	edd3 6a02 	vldr	s13, [r3, #8]
 8011664:	ed93 7a00 	vldr	s14, [r3]
 8011668:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 801166c:	ed93 6a01 	vldr	s12, [r3, #4]
 8011670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011674:	d42b      	bmi.n	80116ce <forward_lite_nl_relu_generic_if32of32_kernel+0x6e>
 8011676:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801167a:	4413      	add	r3, r2
 801167c:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 8011680:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 8011684:	4291      	cmp	r1, r2
 8011686:	d821      	bhi.n	80116cc <forward_lite_nl_relu_generic_if32of32_kernel+0x6c>
 8011688:	f10c 0104 	add.w	r1, ip, #4
 801168c:	1d13      	adds	r3, r2, #4
 801168e:	eba2 020c 	sub.w	r2, r2, ip
 8011692:	4408      	add	r0, r1
 8011694:	e00c      	b.n	80116b0 <forward_lite_nl_relu_generic_if32of32_kernel+0x50>
 8011696:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801169a:	ee77 5ac7 	vsub.f32	s11, s15, s14
 801169e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116a2:	db01      	blt.n	80116a8 <forward_lite_nl_relu_generic_if32of32_kernel+0x48>
 80116a4:	ee65 7a86 	vmul.f32	s15, s11, s12
 80116a8:	4293      	cmp	r3, r2
 80116aa:	ed60 7a01 	vstmdb	r0!, {s15}
 80116ae:	d00c      	beq.n	80116ca <forward_lite_nl_relu_generic_if32of32_kernel+0x6a>
 80116b0:	ed73 7a01 	vldmdb	r3!, {s15}
 80116b4:	eef4 6ae7 	vcmpe.f32	s13, s15
 80116b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116bc:	daeb      	bge.n	8011696 <forward_lite_nl_relu_generic_if32of32_kernel+0x36>
 80116be:	eef0 7a66 	vmov.f32	s15, s13
 80116c2:	4293      	cmp	r3, r2
 80116c4:	ed60 7a01 	vstmdb	r0!, {s15}
 80116c8:	d1f2      	bne.n	80116b0 <forward_lite_nl_relu_generic_if32of32_kernel+0x50>
 80116ca:	4770      	bx	lr
 80116cc:	4770      	bx	lr
 80116ce:	eeb5 6a40 	vcmp.f32	s12, #0.0
 80116d2:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80116d6:	4413      	add	r3, r2
 80116d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116dc:	eb01 0c83 	add.w	ip, r1, r3, lsl #2
 80116e0:	b500      	push	{lr}
 80116e2:	ea4f 0e83 	mov.w	lr, r3, lsl #2
 80116e6:	d019      	beq.n	801171c <forward_lite_nl_relu_generic_if32of32_kernel+0xbc>
 80116e8:	4561      	cmp	r1, ip
 80116ea:	d815      	bhi.n	8011718 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 80116ec:	f10e 0204 	add.w	r2, lr, #4
 80116f0:	f10c 0304 	add.w	r3, ip, #4
 80116f4:	ebac 010e 	sub.w	r1, ip, lr
 80116f8:	4402      	add	r2, r0
 80116fa:	ed73 7a01 	vldmdb	r3!, {s15}
 80116fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011702:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8011706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801170a:	ee66 6a86 	vmul.f32	s13, s13, s12
 801170e:	d827      	bhi.n	8011760 <forward_lite_nl_relu_generic_if32of32_kernel+0x100>
 8011710:	428b      	cmp	r3, r1
 8011712:	ed62 6a01 	vstmdb	r2!, {s13}
 8011716:	d1f0      	bne.n	80116fa <forward_lite_nl_relu_generic_if32of32_kernel+0x9a>
 8011718:	f85d fb04 	ldr.w	pc, [sp], #4
 801171c:	4561      	cmp	r1, ip
 801171e:	d8fb      	bhi.n	8011718 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 8011720:	f10e 0204 	add.w	r2, lr, #4
 8011724:	f10c 0304 	add.w	r3, ip, #4
 8011728:	ebac 010e 	sub.w	r1, ip, lr
 801172c:	f04f 0c00 	mov.w	ip, #0
 8011730:	4402      	add	r2, r0
 8011732:	ed73 7a01 	vldmdb	r3!, {s15}
 8011736:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801173a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801173e:	d40a      	bmi.n	8011756 <forward_lite_nl_relu_generic_if32of32_kernel+0xf6>
 8011740:	428b      	cmp	r3, r1
 8011742:	f842 cd04 	str.w	ip, [r2, #-4]!
 8011746:	d0e7      	beq.n	8011718 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 8011748:	ed73 7a01 	vldmdb	r3!, {s15}
 801174c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011754:	d5f4      	bpl.n	8011740 <forward_lite_nl_relu_generic_if32of32_kernel+0xe0>
 8011756:	428b      	cmp	r3, r1
 8011758:	ed62 7a01 	vstmdb	r2!, {s15}
 801175c:	d1e9      	bne.n	8011732 <forward_lite_nl_relu_generic_if32of32_kernel+0xd2>
 801175e:	e7db      	b.n	8011718 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 8011760:	428b      	cmp	r3, r1
 8011762:	ed62 7a01 	vstmdb	r2!, {s15}
 8011766:	d1c8      	bne.n	80116fa <forward_lite_nl_relu_generic_if32of32_kernel+0x9a>
 8011768:	e7d6      	b.n	8011718 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 801176a:	bf00      	nop

0801176c <pool_func_mp_array_f32>:
 801176c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011770:	b091      	sub	sp, #68	@ 0x44
 8011772:	468b      	mov	fp, r1
 8011774:	469c      	mov	ip, r3
 8011776:	4690      	mov	r8, r2
 8011778:	f8bd 106c 	ldrh.w	r1, [sp, #108]	@ 0x6c
 801177c:	4681      	mov	r9, r0
 801177e:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 8011782:	9101      	str	r1, [sp, #4]
 8011784:	f8bd 1078 	ldrh.w	r1, [sp, #120]	@ 0x78
 8011788:	f8bd 2074 	ldrh.w	r2, [sp, #116]	@ 0x74
 801178c:	9105      	str	r1, [sp, #20]
 801178e:	f8bd 107c 	ldrh.w	r1, [sp, #124]	@ 0x7c
 8011792:	9304      	str	r3, [sp, #16]
 8011794:	9106      	str	r1, [sp, #24]
 8011796:	f8bd 3070 	ldrh.w	r3, [sp, #112]	@ 0x70
 801179a:	f8bd 1080 	ldrh.w	r1, [sp, #128]	@ 0x80
 801179e:	ea52 0403 	orrs.w	r4, r2, r3
 80117a2:	9102      	str	r1, [sp, #8]
 80117a4:	f8bd 1084 	ldrh.w	r1, [sp, #132]	@ 0x84
 80117a8:	9103      	str	r1, [sp, #12]
 80117aa:	d173      	bne.n	8011894 <pool_func_mp_array_f32+0x128>
 80117ac:	9904      	ldr	r1, [sp, #16]
 80117ae:	9d02      	ldr	r5, [sp, #8]
 80117b0:	eba1 000b 	sub.w	r0, r1, fp
 80117b4:	9e05      	ldr	r6, [sp, #20]
 80117b6:	1e69      	subs	r1, r5, #1
 80117b8:	3801      	subs	r0, #1
 80117ba:	fb11 0106 	smlabb	r1, r1, r6, r0
 80117be:	0409      	lsls	r1, r1, #16
 80117c0:	d568      	bpl.n	8011894 <pool_func_mp_array_f32+0x128>
 80117c2:	9901      	ldr	r1, [sp, #4]
 80117c4:	9e03      	ldr	r6, [sp, #12]
 80117c6:	eba1 0008 	sub.w	r0, r1, r8
 80117ca:	9f06      	ldr	r7, [sp, #24]
 80117cc:	1e71      	subs	r1, r6, #1
 80117ce:	3801      	subs	r0, #1
 80117d0:	fb11 0107 	smlabb	r1, r1, r7, r0
 80117d4:	040f      	lsls	r7, r1, #16
 80117d6:	d55d      	bpl.n	8011894 <pool_func_mp_array_f32+0x128>
 80117d8:	2e00      	cmp	r6, #0
 80117da:	d058      	beq.n	801188e <pool_func_mp_array_f32+0x122>
 80117dc:	2d00      	cmp	r5, #0
 80117de:	d056      	beq.n	801188e <pool_func_mp_array_f32+0x122>
 80117e0:	4663      	mov	r3, ip
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	d053      	beq.n	801188e <pool_func_mp_array_f32+0x122>
 80117e6:	2b01      	cmp	r3, #1
 80117e8:	f040 814a 	bne.w	8011a80 <pool_func_mp_array_f32+0x314>
 80117ec:	46a2      	mov	sl, r4
 80117ee:	4623      	mov	r3, r4
 80117f0:	9407      	str	r4, [sp, #28]
 80117f2:	9a02      	ldr	r2, [sp, #8]
 80117f4:	2700      	movs	r7, #0
 80117f6:	f9bd 6004 	ldrsh.w	r6, [sp, #4]
 80117fa:	fb02 f303 	mul.w	r3, r2, r3
 80117fe:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8011802:	46be      	mov	lr, r7
 8011804:	46bc      	mov	ip, r7
 8011806:	9308      	str	r3, [sp, #32]
 8011808:	fa0f f38a 	sxth.w	r3, sl
 801180c:	9309      	str	r3, [sp, #36]	@ 0x24
 801180e:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8011810:	b23d      	sxth	r5, r7
 8011812:	9b08      	ldr	r3, [sp, #32]
 8011814:	fa0f f088 	sxth.w	r0, r8
 8011818:	42b4      	cmp	r4, r6
 801181a:	eddf 7a98 	vldr	s15, [pc, #608]	@ 8011a7c <pool_func_mp_array_f32+0x310>
 801181e:	449c      	add	ip, r3
 8011820:	da12      	bge.n	8011848 <pool_func_mp_array_f32+0xdc>
 8011822:	4285      	cmp	r5, r0
 8011824:	da0c      	bge.n	8011840 <pool_func_mp_array_f32+0xd4>
 8011826:	fb04 520b 	mla	r2, r4, fp, r5
 801182a:	462b      	mov	r3, r5
 801182c:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8011830:	3301      	adds	r3, #1
 8011832:	ecb2 7a01 	vldmia	r2!, {s14}
 8011836:	b219      	sxth	r1, r3
 8011838:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 801183c:	4281      	cmp	r1, r0
 801183e:	dbf7      	blt.n	8011830 <pool_func_mp_array_f32+0xc4>
 8011840:	3401      	adds	r4, #1
 8011842:	b224      	sxth	r4, r4
 8011844:	42b4      	cmp	r4, r6
 8011846:	dbec      	blt.n	8011822 <pool_func_mp_array_f32+0xb6>
 8011848:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801184a:	f10e 0e01 	add.w	lr, lr, #1
 801184e:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8011852:	9b05      	ldr	r3, [sp, #20]
 8011854:	fa0f fe8e 	sxth.w	lr, lr
 8011858:	4498      	add	r8, r3
 801185a:	441f      	add	r7, r3
 801185c:	9b02      	ldr	r3, [sp, #8]
 801185e:	edcc 7a00 	vstr	s15, [ip]
 8011862:	fa1f f888 	uxth.w	r8, r8
 8011866:	4573      	cmp	r3, lr
 8011868:	b2bf      	uxth	r7, r7
 801186a:	46f4      	mov	ip, lr
 801186c:	dccf      	bgt.n	801180e <pool_func_mp_array_f32+0xa2>
 801186e:	9a07      	ldr	r2, [sp, #28]
 8011870:	9906      	ldr	r1, [sp, #24]
 8011872:	9b01      	ldr	r3, [sp, #4]
 8011874:	3201      	adds	r2, #1
 8011876:	448a      	add	sl, r1
 8011878:	b212      	sxth	r2, r2
 801187a:	440b      	add	r3, r1
 801187c:	9903      	ldr	r1, [sp, #12]
 801187e:	fa1f fa8a 	uxth.w	sl, sl
 8011882:	b29b      	uxth	r3, r3
 8011884:	9207      	str	r2, [sp, #28]
 8011886:	4291      	cmp	r1, r2
 8011888:	9301      	str	r3, [sp, #4]
 801188a:	4613      	mov	r3, r2
 801188c:	dcb1      	bgt.n	80117f2 <pool_func_mp_array_f32+0x86>
 801188e:	b011      	add	sp, #68	@ 0x44
 8011890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011894:	9903      	ldr	r1, [sp, #12]
 8011896:	2900      	cmp	r1, #0
 8011898:	d0f9      	beq.n	801188e <pool_func_mp_array_f32+0x122>
 801189a:	9902      	ldr	r1, [sp, #8]
 801189c:	2900      	cmp	r1, #0
 801189e:	d0f6      	beq.n	801188e <pool_func_mp_array_f32+0x122>
 80118a0:	4661      	mov	r1, ip
 80118a2:	2900      	cmp	r1, #0
 80118a4:	d0f3      	beq.n	801188e <pool_func_mp_array_f32+0x122>
 80118a6:	2901      	cmp	r1, #1
 80118a8:	9901      	ldr	r1, [sp, #4]
 80118aa:	d163      	bne.n	8011974 <pool_func_mp_array_f32+0x208>
 80118ac:	1a8a      	subs	r2, r1, r2
 80118ae:	9904      	ldr	r1, [sp, #16]
 80118b0:	1ac9      	subs	r1, r1, r3
 80118b2:	425b      	negs	r3, r3
 80118b4:	b292      	uxth	r2, r2
 80118b6:	b29b      	uxth	r3, r3
 80118b8:	9204      	str	r2, [sp, #16]
 80118ba:	b28a      	uxth	r2, r1
 80118bc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80118be:	2300      	movs	r3, #0
 80118c0:	920a      	str	r2, [sp, #40]	@ 0x28
 80118c2:	9307      	str	r3, [sp, #28]
 80118c4:	9a02      	ldr	r2, [sp, #8]
 80118c6:	2700      	movs	r7, #0
 80118c8:	fb02 f303 	mul.w	r3, r2, r3
 80118cc:	9a04      	ldr	r2, [sp, #16]
 80118ce:	46bc      	mov	ip, r7
 80118d0:	9308      	str	r3, [sp, #32]
 80118d2:	b216      	sxth	r6, r2
 80118d4:	9b01      	ldr	r3, [sp, #4]
 80118d6:	1ad3      	subs	r3, r2, r3
 80118d8:	e9dd ae0a 	ldrd	sl, lr, [sp, #40]	@ 0x28
 80118dc:	b21b      	sxth	r3, r3
 80118de:	9309      	str	r3, [sp, #36]	@ 0x24
 80118e0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80118e2:	fa0f f58e 	sxth.w	r5, lr
 80118e6:	9b08      	ldr	r3, [sp, #32]
 80118e8:	fa0f f48a 	sxth.w	r4, sl
 80118ec:	428e      	cmp	r6, r1
 80118ee:	eddf 7a63 	vldr	s15, [pc, #396]	@ 8011a7c <pool_func_mp_array_f32+0x310>
 80118f2:	449c      	add	ip, r3
 80118f4:	dd1c      	ble.n	8011930 <pool_func_mp_array_f32+0x1c4>
 80118f6:	42a5      	cmp	r5, r4
 80118f8:	da16      	bge.n	8011928 <pool_func_mp_array_f32+0x1bc>
 80118fa:	4588      	cmp	r8, r1
 80118fc:	fb01 f20b 	mul.w	r2, r1, fp
 8011900:	dd12      	ble.n	8011928 <pool_func_mp_array_f32+0x1bc>
 8011902:	442a      	add	r2, r5
 8011904:	462b      	mov	r3, r5
 8011906:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 801190a:	ea41 0003 	orr.w	r0, r1, r3
 801190e:	0400      	lsls	r0, r0, #16
 8011910:	d405      	bmi.n	801191e <pool_func_mp_array_f32+0x1b2>
 8011912:	459b      	cmp	fp, r3
 8011914:	dd03      	ble.n	801191e <pool_func_mp_array_f32+0x1b2>
 8011916:	ed92 7a00 	vldr	s14, [r2]
 801191a:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 801191e:	3301      	adds	r3, #1
 8011920:	3204      	adds	r2, #4
 8011922:	b218      	sxth	r0, r3
 8011924:	42a0      	cmp	r0, r4
 8011926:	dbf0      	blt.n	801190a <pool_func_mp_array_f32+0x19e>
 8011928:	3101      	adds	r1, #1
 801192a:	b209      	sxth	r1, r1
 801192c:	42b1      	cmp	r1, r6
 801192e:	dbe2      	blt.n	80118f6 <pool_func_mp_array_f32+0x18a>
 8011930:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8011932:	3701      	adds	r7, #1
 8011934:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8011938:	9b05      	ldr	r3, [sp, #20]
 801193a:	b23f      	sxth	r7, r7
 801193c:	449a      	add	sl, r3
 801193e:	449e      	add	lr, r3
 8011940:	9b02      	ldr	r3, [sp, #8]
 8011942:	edcc 7a00 	vstr	s15, [ip]
 8011946:	fa1f fa8a 	uxth.w	sl, sl
 801194a:	42bb      	cmp	r3, r7
 801194c:	fa1f fe8e 	uxth.w	lr, lr
 8011950:	46bc      	mov	ip, r7
 8011952:	dcc5      	bgt.n	80118e0 <pool_func_mp_array_f32+0x174>
 8011954:	9a07      	ldr	r2, [sp, #28]
 8011956:	9b04      	ldr	r3, [sp, #16]
 8011958:	9906      	ldr	r1, [sp, #24]
 801195a:	3201      	adds	r2, #1
 801195c:	440b      	add	r3, r1
 801195e:	b212      	sxth	r2, r2
 8011960:	9903      	ldr	r1, [sp, #12]
 8011962:	b29b      	uxth	r3, r3
 8011964:	9207      	str	r2, [sp, #28]
 8011966:	4291      	cmp	r1, r2
 8011968:	9304      	str	r3, [sp, #16]
 801196a:	4613      	mov	r3, r2
 801196c:	dcaa      	bgt.n	80118c4 <pool_func_mp_array_f32+0x158>
 801196e:	b011      	add	sp, #68	@ 0x44
 8011970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011974:	1a88      	subs	r0, r1, r2
 8011976:	9904      	ldr	r1, [sp, #16]
 8011978:	4252      	negs	r2, r2
 801197a:	ea4f 0a8c 	mov.w	sl, ip, lsl #2
 801197e:	1ac9      	subs	r1, r1, r3
 8011980:	425b      	negs	r3, r3
 8011982:	b292      	uxth	r2, r2
 8011984:	46e6      	mov	lr, ip
 8011986:	b29b      	uxth	r3, r3
 8011988:	b280      	uxth	r0, r0
 801198a:	9208      	str	r2, [sp, #32]
 801198c:	930f      	str	r3, [sp, #60]	@ 0x3c
 801198e:	b28a      	uxth	r2, r1
 8011990:	2300      	movs	r3, #0
 8011992:	9007      	str	r0, [sp, #28]
 8011994:	920e      	str	r2, [sp, #56]	@ 0x38
 8011996:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011998:	9a02      	ldr	r2, [sp, #8]
 801199a:	f9bd 601c 	ldrsh.w	r6, [sp, #28]
 801199e:	fb02 f303 	mul.w	r3, r2, r3
 80119a2:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80119a6:	920a      	str	r2, [sp, #40]	@ 0x28
 80119a8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80119aa:	930d      	str	r3, [sp, #52]	@ 0x34
 80119ac:	2300      	movs	r3, #0
 80119ae:	9201      	str	r2, [sp, #4]
 80119b0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80119b2:	930c      	str	r3, [sp, #48]	@ 0x30
 80119b4:	9204      	str	r2, [sp, #16]
 80119b6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80119b8:	f04f 0c00 	mov.w	ip, #0
 80119bc:	f9bd 5010 	ldrsh.w	r5, [sp, #16]
 80119c0:	4413      	add	r3, r2
 80119c2:	f9bd 4004 	ldrsh.w	r4, [sp, #4]
 80119c6:	4667      	mov	r7, ip
 80119c8:	fb0e f303 	mul.w	r3, lr, r3
 80119cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80119ce:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80119d0:	eddf 7a2a 	vldr	s15, [pc, #168]	@ 8011a7c <pool_func_mp_array_f32+0x310>
 80119d4:	42b1      	cmp	r1, r6
 80119d6:	da1e      	bge.n	8011a16 <pool_func_mp_array_f32+0x2aa>
 80119d8:	42a5      	cmp	r5, r4
 80119da:	da18      	bge.n	8011a0e <pool_func_mp_array_f32+0x2a2>
 80119dc:	4541      	cmp	r1, r8
 80119de:	fb01 f30b 	mul.w	r3, r1, fp
 80119e2:	da14      	bge.n	8011a0e <pool_func_mp_array_f32+0x2a2>
 80119e4:	195a      	adds	r2, r3, r5
 80119e6:	462b      	mov	r3, r5
 80119e8:	fb0e 7202 	mla	r2, lr, r2, r7
 80119ec:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 80119f0:	ea41 0003 	orr.w	r0, r1, r3
 80119f4:	0400      	lsls	r0, r0, #16
 80119f6:	d405      	bmi.n	8011a04 <pool_func_mp_array_f32+0x298>
 80119f8:	459b      	cmp	fp, r3
 80119fa:	dd03      	ble.n	8011a04 <pool_func_mp_array_f32+0x298>
 80119fc:	ed92 7a00 	vldr	s14, [r2]
 8011a00:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8011a04:	3301      	adds	r3, #1
 8011a06:	4452      	add	r2, sl
 8011a08:	b218      	sxth	r0, r3
 8011a0a:	42a0      	cmp	r0, r4
 8011a0c:	dbf0      	blt.n	80119f0 <pool_func_mp_array_f32+0x284>
 8011a0e:	3101      	adds	r1, #1
 8011a10:	b209      	sxth	r1, r1
 8011a12:	42b1      	cmp	r1, r6
 8011a14:	dbe0      	blt.n	80119d8 <pool_func_mp_array_f32+0x26c>
 8011a16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011a18:	f10c 0c01 	add.w	ip, ip, #1
 8011a1c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8011a1e:	443b      	add	r3, r7
 8011a20:	fa0f fc8c 	sxth.w	ip, ip
 8011a24:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011a28:	45f4      	cmp	ip, lr
 8011a2a:	4667      	mov	r7, ip
 8011a2c:	edc3 7a00 	vstr	s15, [r3]
 8011a30:	dbcd      	blt.n	80119ce <pool_func_mp_array_f32+0x262>
 8011a32:	9a01      	ldr	r2, [sp, #4]
 8011a34:	9805      	ldr	r0, [sp, #20]
 8011a36:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8011a38:	4402      	add	r2, r0
 8011a3a:	9b04      	ldr	r3, [sp, #16]
 8011a3c:	3101      	adds	r1, #1
 8011a3e:	b292      	uxth	r2, r2
 8011a40:	4403      	add	r3, r0
 8011a42:	b209      	sxth	r1, r1
 8011a44:	9201      	str	r2, [sp, #4]
 8011a46:	b29b      	uxth	r3, r3
 8011a48:	9a02      	ldr	r2, [sp, #8]
 8011a4a:	9304      	str	r3, [sp, #16]
 8011a4c:	460b      	mov	r3, r1
 8011a4e:	428a      	cmp	r2, r1
 8011a50:	910c      	str	r1, [sp, #48]	@ 0x30
 8011a52:	dcb0      	bgt.n	80119b6 <pool_func_mp_array_f32+0x24a>
 8011a54:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011a56:	9b08      	ldr	r3, [sp, #32]
 8011a58:	3101      	adds	r1, #1
 8011a5a:	e9dd 0206 	ldrd	r0, r2, [sp, #24]
 8011a5e:	b209      	sxth	r1, r1
 8011a60:	4402      	add	r2, r0
 8011a62:	4403      	add	r3, r0
 8011a64:	910b      	str	r1, [sp, #44]	@ 0x2c
 8011a66:	b292      	uxth	r2, r2
 8011a68:	b29b      	uxth	r3, r3
 8011a6a:	9207      	str	r2, [sp, #28]
 8011a6c:	9a03      	ldr	r2, [sp, #12]
 8011a6e:	9308      	str	r3, [sp, #32]
 8011a70:	460b      	mov	r3, r1
 8011a72:	428a      	cmp	r2, r1
 8011a74:	dc90      	bgt.n	8011998 <pool_func_mp_array_f32+0x22c>
 8011a76:	b011      	add	sp, #68	@ 0x44
 8011a78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a7c:	cf000000 	.word	0xcf000000
 8011a80:	4623      	mov	r3, r4
 8011a82:	ea4f 0a8c 	mov.w	sl, ip, lsl #2
 8011a86:	46e0      	mov	r8, ip
 8011a88:	9408      	str	r4, [sp, #32]
 8011a8a:	9409      	str	r4, [sp, #36]	@ 0x24
 8011a8c:	9a02      	ldr	r2, [sp, #8]
 8011a8e:	f04f 0c00 	mov.w	ip, #0
 8011a92:	f9bd 7004 	ldrsh.w	r7, [sp, #4]
 8011a96:	fb02 f303 	mul.w	r3, r2, r3
 8011a9a:	f8cd c028 	str.w	ip, [sp, #40]	@ 0x28
 8011a9e:	930c      	str	r3, [sp, #48]	@ 0x30
 8011aa0:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8011aa4:	930d      	str	r3, [sp, #52]	@ 0x34
 8011aa6:	9b04      	ldr	r3, [sp, #16]
 8011aa8:	9307      	str	r3, [sp, #28]
 8011aaa:	4663      	mov	r3, ip
 8011aac:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8011aae:	f04f 0e00 	mov.w	lr, #0
 8011ab2:	fa0f f58c 	sxth.w	r5, ip
 8011ab6:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8011aba:	4413      	add	r3, r2
 8011abc:	4676      	mov	r6, lr
 8011abe:	fb08 f303 	mul.w	r3, r8, r3
 8011ac2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011ac4:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8011ac6:	ed5f 7a13 	vldr	s15, [pc, #-76]	@ 8011a7c <pool_func_mp_array_f32+0x310>
 8011aca:	42bc      	cmp	r4, r7
 8011acc:	da15      	bge.n	8011afa <pool_func_mp_array_f32+0x38e>
 8011ace:	4285      	cmp	r5, r0
 8011ad0:	da0f      	bge.n	8011af2 <pool_func_mp_array_f32+0x386>
 8011ad2:	fb0b 5304 	mla	r3, fp, r4, r5
 8011ad6:	462a      	mov	r2, r5
 8011ad8:	fb08 6303 	mla	r3, r8, r3, r6
 8011adc:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8011ae0:	3201      	adds	r2, #1
 8011ae2:	ed93 7a00 	vldr	s14, [r3]
 8011ae6:	4453      	add	r3, sl
 8011ae8:	b211      	sxth	r1, r2
 8011aea:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8011aee:	4281      	cmp	r1, r0
 8011af0:	dbf6      	blt.n	8011ae0 <pool_func_mp_array_f32+0x374>
 8011af2:	3401      	adds	r4, #1
 8011af4:	b224      	sxth	r4, r4
 8011af6:	42bc      	cmp	r4, r7
 8011af8:	dbe9      	blt.n	8011ace <pool_func_mp_array_f32+0x362>
 8011afa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011afc:	f10e 0e01 	add.w	lr, lr, #1
 8011b00:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8011b02:	4433      	add	r3, r6
 8011b04:	fa0f fe8e 	sxth.w	lr, lr
 8011b08:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011b0c:	45c6      	cmp	lr, r8
 8011b0e:	4676      	mov	r6, lr
 8011b10:	edc3 7a00 	vstr	s15, [r3]
 8011b14:	dbd6      	blt.n	8011ac4 <pool_func_mp_array_f32+0x358>
 8011b16:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011b18:	9905      	ldr	r1, [sp, #20]
 8011b1a:	9b07      	ldr	r3, [sp, #28]
 8011b1c:	3201      	adds	r2, #1
 8011b1e:	448c      	add	ip, r1
 8011b20:	b212      	sxth	r2, r2
 8011b22:	440b      	add	r3, r1
 8011b24:	9902      	ldr	r1, [sp, #8]
 8011b26:	fa1f fc8c 	uxth.w	ip, ip
 8011b2a:	b29b      	uxth	r3, r3
 8011b2c:	920a      	str	r2, [sp, #40]	@ 0x28
 8011b2e:	4291      	cmp	r1, r2
 8011b30:	9307      	str	r3, [sp, #28]
 8011b32:	4613      	mov	r3, r2
 8011b34:	dcba      	bgt.n	8011aac <pool_func_mp_array_f32+0x340>
 8011b36:	9a01      	ldr	r2, [sp, #4]
 8011b38:	9806      	ldr	r0, [sp, #24]
 8011b3a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011b3c:	4402      	add	r2, r0
 8011b3e:	9b08      	ldr	r3, [sp, #32]
 8011b40:	3101      	adds	r1, #1
 8011b42:	b292      	uxth	r2, r2
 8011b44:	4403      	add	r3, r0
 8011b46:	b209      	sxth	r1, r1
 8011b48:	9201      	str	r2, [sp, #4]
 8011b4a:	b29b      	uxth	r3, r3
 8011b4c:	9a03      	ldr	r2, [sp, #12]
 8011b4e:	9308      	str	r3, [sp, #32]
 8011b50:	460b      	mov	r3, r1
 8011b52:	428a      	cmp	r2, r1
 8011b54:	9109      	str	r1, [sp, #36]	@ 0x24
 8011b56:	dc99      	bgt.n	8011a8c <pool_func_mp_array_f32+0x320>
 8011b58:	e699      	b.n	801188e <pool_func_mp_array_f32+0x122>
 8011b5a:	bf00      	nop

08011b5c <forward_lite_upsample_bilinear_if32of32>:
 8011b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b60:	ed2d 8b0a 	vpush	{d8-d12}
 8011b64:	b08f      	sub	sp, #60	@ 0x3c
 8011b66:	4683      	mov	fp, r0
 8011b68:	9104      	str	r1, [sp, #16]
 8011b6a:	f89d 1094 	ldrb.w	r1, [sp, #148]	@ 0x94
 8011b6e:	f8dd 8088 	ldr.w	r8, [sp, #136]	@ 0x88
 8011b72:	f8dd a090 	ldr.w	sl, [sp, #144]	@ 0x90
 8011b76:	9206      	str	r2, [sp, #24]
 8011b78:	2900      	cmp	r1, #0
 8011b7a:	f000 80a7 	beq.w	8011ccc <forward_lite_upsample_bilinear_if32of32+0x170>
 8011b7e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8011b82:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8011b86:	ee70 aae7 	vsub.f32	s21, s1, s15
 8011b8a:	ee70 7a67 	vsub.f32	s15, s0, s15
 8011b8e:	ee6a aa87 	vmul.f32	s21, s21, s14
 8011b92:	ee27 9a87 	vmul.f32	s18, s15, s14
 8011b96:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8011b9a:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8011b9c:	ee87 baa0 	vdiv.f32	s22, s15, s1
 8011ba0:	eec7 9a80 	vdiv.f32	s19, s15, s0
 8011ba4:	2a00      	cmp	r2, #0
 8011ba6:	f000 808c 	beq.w	8011cc2 <forward_lite_upsample_bilinear_if32of32+0x166>
 8011baa:	3b01      	subs	r3, #1
 8011bac:	ea4f 068a 	mov.w	r6, sl, lsl #2
 8011bb0:	eddf 8a49 	vldr	s17, [pc, #292]	@ 8011cd8 <forward_lite_upsample_bilinear_if32of32+0x17c>
 8011bb4:	ee07 3a90 	vmov	s15, r3
 8011bb8:	9b06      	ldr	r3, [sp, #24]
 8011bba:	1e5a      	subs	r2, r3, #1
 8011bbc:	fb0a f303 	mul.w	r3, sl, r3
 8011bc0:	eeb8 aa67 	vcvt.f32.u32	s20, s15
 8011bc4:	ee0c 2a90 	vmov	s25, r2
 8011bc8:	9305      	str	r3, [sp, #20]
 8011bca:	2300      	movs	r3, #0
 8011bcc:	eef8 ca6c 	vcvt.f32.u32	s25, s25
 8011bd0:	9303      	str	r3, [sp, #12]
 8011bd2:	fb06 f308 	mul.w	r3, r6, r8
 8011bd6:	9307      	str	r3, [sp, #28]
 8011bd8:	eddd 7a03 	vldr	s15, [sp, #12]
 8011bdc:	9b05      	ldr	r3, [sp, #20]
 8011bde:	eef8 ba67 	vcvt.f32.u32	s23, s15
 8011be2:	ee7b baea 	vsub.f32	s23, s23, s21
 8011be6:	ee6b ba8b 	vmul.f32	s23, s23, s22
 8011bea:	fecb baa8 	vmaxnm.f32	s23, s23, s17
 8011bee:	fecb baca 	vminnm.f32	s23, s23, s20
 8011bf2:	eef4 ba4a 	vcmp.f32	s23, s20
 8011bf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011bfa:	bf14      	ite	ne
 8011bfc:	4699      	movne	r9, r3
 8011bfe:	f04f 0900 	moveq.w	r9, #0
 8011c02:	f1b8 0f00 	cmp.w	r8, #0
 8011c06:	d056      	beq.n	8011cb6 <forward_lite_upsample_bilinear_if32of32+0x15a>
 8011c08:	eebc 7aeb 	vcvt.u32.f32	s14, s23
 8011c0c:	9b06      	ldr	r3, [sp, #24]
 8011c0e:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 8011c12:	9d04      	ldr	r5, [sp, #16]
 8011c14:	2400      	movs	r4, #0
 8011c16:	eef8 7a47 	vcvt.f32.u32	s15, s14
 8011c1a:	ee17 7a10 	vmov	r7, s14
 8011c1e:	ee38 ca6b 	vsub.f32	s24, s16, s23
 8011c22:	fb03 f707 	mul.w	r7, r3, r7
 8011c26:	ee7b bae7 	vsub.f32	s23, s23, s15
 8011c2a:	ee3c ca27 	vadd.f32	s24, s24, s15
 8011c2e:	ee07 4a90 	vmov	s15, r4
 8011c32:	ab0a      	add	r3, sp, #40	@ 0x28
 8011c34:	3401      	adds	r4, #1
 8011c36:	4629      	mov	r1, r5
 8011c38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011c3c:	9300      	str	r3, [sp, #0]
 8011c3e:	4652      	mov	r2, sl
 8011c40:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
 8011c44:	4435      	add	r5, r6
 8011c46:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8011c4a:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8011c4e:	fec7 7aa8 	vmaxnm.f32	s15, s15, s17
 8011c52:	fec7 7aec 	vminnm.f32	s15, s15, s25
 8011c56:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 8011c5a:	eef4 7a6c 	vcmp.f32	s15, s25
 8011c5e:	ee38 7a67 	vsub.f32	s14, s16, s15
 8011c62:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 8011c66:	ee16 0a90 	vmov	r0, s13
 8011c6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c6e:	4438      	add	r0, r7
 8011c70:	ee37 7a06 	vadd.f32	s14, s14, s12
 8011c74:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8011c78:	bf14      	ite	ne
 8011c7a:	4653      	movne	r3, sl
 8011c7c:	2300      	moveq	r3, #0
 8011c7e:	fb06 b000 	mla	r0, r6, r0, fp
 8011c82:	ee67 5a0c 	vmul.f32	s11, s14, s24
 8011c86:	ee27 6a8c 	vmul.f32	s12, s15, s24
 8011c8a:	9308      	str	r3, [sp, #32]
 8011c8c:	ee27 7a2b 	vmul.f32	s14, s14, s23
 8011c90:	ab08      	add	r3, sp, #32
 8011c92:	ee67 7aab 	vmul.f32	s15, s15, s23
 8011c96:	edcd 5a0a 	vstr	s11, [sp, #40]	@ 0x28
 8011c9a:	ed8d 6a0b 	vstr	s12, [sp, #44]	@ 0x2c
 8011c9e:	ed8d 7a0c 	vstr	s14, [sp, #48]	@ 0x30
 8011ca2:	edcd 7a0d 	vstr	s15, [sp, #52]	@ 0x34
 8011ca6:	f001 f9b1 	bl	801300c <lite_bilinear_if32of32_kernel>
 8011caa:	45a0      	cmp	r8, r4
 8011cac:	d1bf      	bne.n	8011c2e <forward_lite_upsample_bilinear_if32of32+0xd2>
 8011cae:	9b04      	ldr	r3, [sp, #16]
 8011cb0:	9a07      	ldr	r2, [sp, #28]
 8011cb2:	4413      	add	r3, r2
 8011cb4:	9304      	str	r3, [sp, #16]
 8011cb6:	9b03      	ldr	r3, [sp, #12]
 8011cb8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8011cba:	3301      	adds	r3, #1
 8011cbc:	429a      	cmp	r2, r3
 8011cbe:	9303      	str	r3, [sp, #12]
 8011cc0:	d18a      	bne.n	8011bd8 <forward_lite_upsample_bilinear_if32of32+0x7c>
 8011cc2:	b00f      	add	sp, #60	@ 0x3c
 8011cc4:	ecbd 8b0a 	vpop	{d8-d12}
 8011cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ccc:	eddf aa02 	vldr	s21, [pc, #8]	@ 8011cd8 <forward_lite_upsample_bilinear_if32of32+0x17c>
 8011cd0:	eeb0 9a6a 	vmov.f32	s18, s21
 8011cd4:	e75f      	b.n	8011b96 <forward_lite_upsample_bilinear_if32of32+0x3a>
 8011cd6:	bf00      	nop
 8011cd8:	00000000 	.word	0x00000000

08011cdc <forward_lite_upsample_bilinear_is8os8>:
 8011cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ce0:	ed2d 8b0a 	vpush	{d8-d12}
 8011ce4:	b08f      	sub	sp, #60	@ 0x3c
 8011ce6:	4682      	mov	sl, r0
 8011ce8:	9104      	str	r1, [sp, #16]
 8011cea:	f89d 1094 	ldrb.w	r1, [sp, #148]	@ 0x94
 8011cee:	9f22      	ldr	r7, [sp, #136]	@ 0x88
 8011cf0:	f8dd b090 	ldr.w	fp, [sp, #144]	@ 0x90
 8011cf4:	9206      	str	r2, [sp, #24]
 8011cf6:	2900      	cmp	r1, #0
 8011cf8:	f000 80aa 	beq.w	8011e50 <forward_lite_upsample_bilinear_is8os8+0x174>
 8011cfc:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8011d00:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8011d04:	ee70 aae7 	vsub.f32	s21, s1, s15
 8011d08:	ee70 7a67 	vsub.f32	s15, s0, s15
 8011d0c:	ee6a aa87 	vmul.f32	s21, s21, s14
 8011d10:	ee27 9a87 	vmul.f32	s18, s15, s14
 8011d14:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8011d18:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8011d1a:	ee87 baa0 	vdiv.f32	s22, s15, s1
 8011d1e:	eec7 9a80 	vdiv.f32	s19, s15, s0
 8011d22:	2a00      	cmp	r2, #0
 8011d24:	f000 808f 	beq.w	8011e46 <forward_lite_upsample_bilinear_is8os8+0x16a>
 8011d28:	3b01      	subs	r3, #1
 8011d2a:	eddf 8a4c 	vldr	s17, [pc, #304]	@ 8011e5c <forward_lite_upsample_bilinear_is8os8+0x180>
 8011d2e:	ee07 3a90 	vmov	s15, r3
 8011d32:	9b06      	ldr	r3, [sp, #24]
 8011d34:	1e5a      	subs	r2, r3, #1
 8011d36:	fb0b f303 	mul.w	r3, fp, r3
 8011d3a:	eeb8 aa67 	vcvt.f32.u32	s20, s15
 8011d3e:	ee0c 2a90 	vmov	s25, r2
 8011d42:	9305      	str	r3, [sp, #20]
 8011d44:	fb07 f30b 	mul.w	r3, r7, fp
 8011d48:	eef8 ca6c 	vcvt.f32.u32	s25, s25
 8011d4c:	9307      	str	r3, [sp, #28]
 8011d4e:	2300      	movs	r3, #0
 8011d50:	9303      	str	r3, [sp, #12]
 8011d52:	eddd 7a03 	vldr	s15, [sp, #12]
 8011d56:	9b05      	ldr	r3, [sp, #20]
 8011d58:	eef8 ba67 	vcvt.f32.u32	s23, s15
 8011d5c:	ee7b baea 	vsub.f32	s23, s23, s21
 8011d60:	ee6b ba8b 	vmul.f32	s23, s23, s22
 8011d64:	fecb baa8 	vmaxnm.f32	s23, s23, s17
 8011d68:	fecb baca 	vminnm.f32	s23, s23, s20
 8011d6c:	eef4 ba4a 	vcmp.f32	s23, s20
 8011d70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d74:	bf14      	ite	ne
 8011d76:	4698      	movne	r8, r3
 8011d78:	f04f 0800 	moveq.w	r8, #0
 8011d7c:	2f00      	cmp	r7, #0
 8011d7e:	d05c      	beq.n	8011e3a <forward_lite_upsample_bilinear_is8os8+0x15e>
 8011d80:	eebc 7aeb 	vcvt.u32.f32	s14, s23
 8011d84:	9b06      	ldr	r3, [sp, #24]
 8011d86:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 8011d8a:	9722      	str	r7, [sp, #136]	@ 0x88
 8011d8c:	9d04      	ldr	r5, [sp, #16]
 8011d8e:	4647      	mov	r7, r8
 8011d90:	eef8 7a47 	vcvt.f32.u32	s15, s14
 8011d94:	ee17 6a10 	vmov	r6, s14
 8011d98:	ee38 ca6b 	vsub.f32	s24, s16, s23
 8011d9c:	2400      	movs	r4, #0
 8011d9e:	fb03 f606 	mul.w	r6, r3, r6
 8011da2:	f10d 0928 	add.w	r9, sp, #40	@ 0x28
 8011da6:	ee7b bae7 	vsub.f32	s23, s23, s15
 8011daa:	f8dd 8088 	ldr.w	r8, [sp, #136]	@ 0x88
 8011dae:	ee3c ca27 	vadd.f32	s24, s24, s15
 8011db2:	ee07 4a90 	vmov	s15, r4
 8011db6:	3401      	adds	r4, #1
 8011db8:	4629      	mov	r1, r5
 8011dba:	465a      	mov	r2, fp
 8011dbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011dc0:	f8cd 9000 	str.w	r9, [sp]
 8011dc4:	9709      	str	r7, [sp, #36]	@ 0x24
 8011dc6:	445d      	add	r5, fp
 8011dc8:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8011dcc:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8011dd0:	fec7 7aa8 	vmaxnm.f32	s15, s15, s17
 8011dd4:	fec7 7aec 	vminnm.f32	s15, s15, s25
 8011dd8:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 8011ddc:	eef4 7a6c 	vcmp.f32	s15, s25
 8011de0:	ee38 7a67 	vsub.f32	s14, s16, s15
 8011de4:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 8011de8:	ee16 0a90 	vmov	r0, s13
 8011dec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011df0:	4430      	add	r0, r6
 8011df2:	ee37 7a06 	vadd.f32	s14, s14, s12
 8011df6:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8011dfa:	bf14      	ite	ne
 8011dfc:	465b      	movne	r3, fp
 8011dfe:	2300      	moveq	r3, #0
 8011e00:	fb0b a000 	mla	r0, fp, r0, sl
 8011e04:	ee67 5a0c 	vmul.f32	s11, s14, s24
 8011e08:	ee27 6a8c 	vmul.f32	s12, s15, s24
 8011e0c:	9308      	str	r3, [sp, #32]
 8011e0e:	ee27 7a2b 	vmul.f32	s14, s14, s23
 8011e12:	ab08      	add	r3, sp, #32
 8011e14:	ee67 7aab 	vmul.f32	s15, s15, s23
 8011e18:	edcd 5a0a 	vstr	s11, [sp, #40]	@ 0x28
 8011e1c:	ed8d 6a0b 	vstr	s12, [sp, #44]	@ 0x2c
 8011e20:	ed8d 7a0c 	vstr	s14, [sp, #48]	@ 0x30
 8011e24:	edcd 7a0d 	vstr	s15, [sp, #52]	@ 0x34
 8011e28:	f001 f920 	bl	801306c <lite_bilinear_is8os8_kernel>
 8011e2c:	45a0      	cmp	r8, r4
 8011e2e:	d1c0      	bne.n	8011db2 <forward_lite_upsample_bilinear_is8os8+0xd6>
 8011e30:	9b04      	ldr	r3, [sp, #16]
 8011e32:	4647      	mov	r7, r8
 8011e34:	9a07      	ldr	r2, [sp, #28]
 8011e36:	4413      	add	r3, r2
 8011e38:	9304      	str	r3, [sp, #16]
 8011e3a:	9b03      	ldr	r3, [sp, #12]
 8011e3c:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8011e3e:	3301      	adds	r3, #1
 8011e40:	429a      	cmp	r2, r3
 8011e42:	9303      	str	r3, [sp, #12]
 8011e44:	d185      	bne.n	8011d52 <forward_lite_upsample_bilinear_is8os8+0x76>
 8011e46:	b00f      	add	sp, #60	@ 0x3c
 8011e48:	ecbd 8b0a 	vpop	{d8-d12}
 8011e4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e50:	eddf aa02 	vldr	s21, [pc, #8]	@ 8011e5c <forward_lite_upsample_bilinear_is8os8+0x180>
 8011e54:	eeb0 9a6a 	vmov.f32	s18, s21
 8011e58:	e75c      	b.n	8011d14 <forward_lite_upsample_bilinear_is8os8+0x38>
 8011e5a:	bf00      	nop
 8011e5c:	00000000 	.word	0x00000000

08011e60 <forward_lite_upsample_bilinear_iu8ou8>:
 8011e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e64:	ed2d 8b0a 	vpush	{d8-d12}
 8011e68:	b08f      	sub	sp, #60	@ 0x3c
 8011e6a:	4682      	mov	sl, r0
 8011e6c:	9104      	str	r1, [sp, #16]
 8011e6e:	f89d 1094 	ldrb.w	r1, [sp, #148]	@ 0x94
 8011e72:	9f22      	ldr	r7, [sp, #136]	@ 0x88
 8011e74:	f8dd b090 	ldr.w	fp, [sp, #144]	@ 0x90
 8011e78:	9206      	str	r2, [sp, #24]
 8011e7a:	2900      	cmp	r1, #0
 8011e7c:	f000 80aa 	beq.w	8011fd4 <forward_lite_upsample_bilinear_iu8ou8+0x174>
 8011e80:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8011e84:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8011e88:	ee70 aae7 	vsub.f32	s21, s1, s15
 8011e8c:	ee70 7a67 	vsub.f32	s15, s0, s15
 8011e90:	ee6a aa87 	vmul.f32	s21, s21, s14
 8011e94:	ee27 9a87 	vmul.f32	s18, s15, s14
 8011e98:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8011e9c:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8011e9e:	ee87 baa0 	vdiv.f32	s22, s15, s1
 8011ea2:	eec7 9a80 	vdiv.f32	s19, s15, s0
 8011ea6:	2a00      	cmp	r2, #0
 8011ea8:	f000 808f 	beq.w	8011fca <forward_lite_upsample_bilinear_iu8ou8+0x16a>
 8011eac:	3b01      	subs	r3, #1
 8011eae:	eddf 8a4c 	vldr	s17, [pc, #304]	@ 8011fe0 <forward_lite_upsample_bilinear_iu8ou8+0x180>
 8011eb2:	ee07 3a90 	vmov	s15, r3
 8011eb6:	9b06      	ldr	r3, [sp, #24]
 8011eb8:	1e5a      	subs	r2, r3, #1
 8011eba:	fb0b f303 	mul.w	r3, fp, r3
 8011ebe:	eeb8 aa67 	vcvt.f32.u32	s20, s15
 8011ec2:	ee0c 2a90 	vmov	s25, r2
 8011ec6:	9305      	str	r3, [sp, #20]
 8011ec8:	fb07 f30b 	mul.w	r3, r7, fp
 8011ecc:	eef8 ca6c 	vcvt.f32.u32	s25, s25
 8011ed0:	9307      	str	r3, [sp, #28]
 8011ed2:	2300      	movs	r3, #0
 8011ed4:	9303      	str	r3, [sp, #12]
 8011ed6:	eddd 7a03 	vldr	s15, [sp, #12]
 8011eda:	9b05      	ldr	r3, [sp, #20]
 8011edc:	eef8 ba67 	vcvt.f32.u32	s23, s15
 8011ee0:	ee7b baea 	vsub.f32	s23, s23, s21
 8011ee4:	ee6b ba8b 	vmul.f32	s23, s23, s22
 8011ee8:	fecb baa8 	vmaxnm.f32	s23, s23, s17
 8011eec:	fecb baca 	vminnm.f32	s23, s23, s20
 8011ef0:	eef4 ba4a 	vcmp.f32	s23, s20
 8011ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ef8:	bf14      	ite	ne
 8011efa:	4698      	movne	r8, r3
 8011efc:	f04f 0800 	moveq.w	r8, #0
 8011f00:	2f00      	cmp	r7, #0
 8011f02:	d05c      	beq.n	8011fbe <forward_lite_upsample_bilinear_iu8ou8+0x15e>
 8011f04:	eebc 7aeb 	vcvt.u32.f32	s14, s23
 8011f08:	9b06      	ldr	r3, [sp, #24]
 8011f0a:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 8011f0e:	9722      	str	r7, [sp, #136]	@ 0x88
 8011f10:	9d04      	ldr	r5, [sp, #16]
 8011f12:	4647      	mov	r7, r8
 8011f14:	eef8 7a47 	vcvt.f32.u32	s15, s14
 8011f18:	ee17 6a10 	vmov	r6, s14
 8011f1c:	ee38 ca6b 	vsub.f32	s24, s16, s23
 8011f20:	2400      	movs	r4, #0
 8011f22:	fb03 f606 	mul.w	r6, r3, r6
 8011f26:	f10d 0928 	add.w	r9, sp, #40	@ 0x28
 8011f2a:	ee7b bae7 	vsub.f32	s23, s23, s15
 8011f2e:	f8dd 8088 	ldr.w	r8, [sp, #136]	@ 0x88
 8011f32:	ee3c ca27 	vadd.f32	s24, s24, s15
 8011f36:	ee07 4a90 	vmov	s15, r4
 8011f3a:	3401      	adds	r4, #1
 8011f3c:	4629      	mov	r1, r5
 8011f3e:	465a      	mov	r2, fp
 8011f40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011f44:	f8cd 9000 	str.w	r9, [sp]
 8011f48:	9709      	str	r7, [sp, #36]	@ 0x24
 8011f4a:	445d      	add	r5, fp
 8011f4c:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8011f50:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8011f54:	fec7 7aa8 	vmaxnm.f32	s15, s15, s17
 8011f58:	fec7 7aec 	vminnm.f32	s15, s15, s25
 8011f5c:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 8011f60:	eef4 7a6c 	vcmp.f32	s15, s25
 8011f64:	ee38 7a67 	vsub.f32	s14, s16, s15
 8011f68:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 8011f6c:	ee16 0a90 	vmov	r0, s13
 8011f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f74:	4430      	add	r0, r6
 8011f76:	ee37 7a06 	vadd.f32	s14, s14, s12
 8011f7a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8011f7e:	bf14      	ite	ne
 8011f80:	465b      	movne	r3, fp
 8011f82:	2300      	moveq	r3, #0
 8011f84:	fb0b a000 	mla	r0, fp, r0, sl
 8011f88:	ee67 5a0c 	vmul.f32	s11, s14, s24
 8011f8c:	ee27 6a8c 	vmul.f32	s12, s15, s24
 8011f90:	9308      	str	r3, [sp, #32]
 8011f92:	ee27 7a2b 	vmul.f32	s14, s14, s23
 8011f96:	ab08      	add	r3, sp, #32
 8011f98:	ee67 7aab 	vmul.f32	s15, s15, s23
 8011f9c:	edcd 5a0a 	vstr	s11, [sp, #40]	@ 0x28
 8011fa0:	ed8d 6a0b 	vstr	s12, [sp, #44]	@ 0x2c
 8011fa4:	ed8d 7a0c 	vstr	s14, [sp, #48]	@ 0x30
 8011fa8:	edcd 7a0d 	vstr	s15, [sp, #52]	@ 0x34
 8011fac:	f001 f8bc 	bl	8013128 <lite_bilinear_iu8ou8_kernel>
 8011fb0:	45a0      	cmp	r8, r4
 8011fb2:	d1c0      	bne.n	8011f36 <forward_lite_upsample_bilinear_iu8ou8+0xd6>
 8011fb4:	9b04      	ldr	r3, [sp, #16]
 8011fb6:	4647      	mov	r7, r8
 8011fb8:	9a07      	ldr	r2, [sp, #28]
 8011fba:	4413      	add	r3, r2
 8011fbc:	9304      	str	r3, [sp, #16]
 8011fbe:	9b03      	ldr	r3, [sp, #12]
 8011fc0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8011fc2:	3301      	adds	r3, #1
 8011fc4:	429a      	cmp	r2, r3
 8011fc6:	9303      	str	r3, [sp, #12]
 8011fc8:	d185      	bne.n	8011ed6 <forward_lite_upsample_bilinear_iu8ou8+0x76>
 8011fca:	b00f      	add	sp, #60	@ 0x3c
 8011fcc:	ecbd 8b0a 	vpop	{d8-d12}
 8011fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fd4:	eddf aa02 	vldr	s21, [pc, #8]	@ 8011fe0 <forward_lite_upsample_bilinear_iu8ou8+0x180>
 8011fd8:	eeb0 9a6a 	vmov.f32	s18, s21
 8011fdc:	e75c      	b.n	8011e98 <forward_lite_upsample_bilinear_iu8ou8+0x38>
 8011fde:	bf00      	nop
 8011fe0:	00000000 	.word	0x00000000

08011fe4 <forward_lite_upsample_bilinear_is16os16>:
 8011fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fe8:	ed2d 8b0a 	vpush	{d8-d12}
 8011fec:	b08f      	sub	sp, #60	@ 0x3c
 8011fee:	4683      	mov	fp, r0
 8011ff0:	9104      	str	r1, [sp, #16]
 8011ff2:	f89d 1094 	ldrb.w	r1, [sp, #148]	@ 0x94
 8011ff6:	f8dd 8088 	ldr.w	r8, [sp, #136]	@ 0x88
 8011ffa:	f8dd a090 	ldr.w	sl, [sp, #144]	@ 0x90
 8011ffe:	9206      	str	r2, [sp, #24]
 8012000:	2900      	cmp	r1, #0
 8012002:	f000 80a7 	beq.w	8012154 <forward_lite_upsample_bilinear_is16os16+0x170>
 8012006:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801200a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801200e:	ee70 aae7 	vsub.f32	s21, s1, s15
 8012012:	ee70 7a67 	vsub.f32	s15, s0, s15
 8012016:	ee6a aa87 	vmul.f32	s21, s21, s14
 801201a:	ee27 9a87 	vmul.f32	s18, s15, s14
 801201e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8012022:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8012024:	ee87 baa0 	vdiv.f32	s22, s15, s1
 8012028:	eec7 9a80 	vdiv.f32	s19, s15, s0
 801202c:	2a00      	cmp	r2, #0
 801202e:	f000 808c 	beq.w	801214a <forward_lite_upsample_bilinear_is16os16+0x166>
 8012032:	3b01      	subs	r3, #1
 8012034:	ea4f 064a 	mov.w	r6, sl, lsl #1
 8012038:	eddf 8a49 	vldr	s17, [pc, #292]	@ 8012160 <forward_lite_upsample_bilinear_is16os16+0x17c>
 801203c:	ee07 3a90 	vmov	s15, r3
 8012040:	9b06      	ldr	r3, [sp, #24]
 8012042:	1e5a      	subs	r2, r3, #1
 8012044:	fb0a f303 	mul.w	r3, sl, r3
 8012048:	eeb8 aa67 	vcvt.f32.u32	s20, s15
 801204c:	ee0c 2a90 	vmov	s25, r2
 8012050:	9305      	str	r3, [sp, #20]
 8012052:	2300      	movs	r3, #0
 8012054:	eef8 ca6c 	vcvt.f32.u32	s25, s25
 8012058:	9303      	str	r3, [sp, #12]
 801205a:	fb06 f308 	mul.w	r3, r6, r8
 801205e:	9307      	str	r3, [sp, #28]
 8012060:	eddd 7a03 	vldr	s15, [sp, #12]
 8012064:	9b05      	ldr	r3, [sp, #20]
 8012066:	eef8 ba67 	vcvt.f32.u32	s23, s15
 801206a:	ee7b baea 	vsub.f32	s23, s23, s21
 801206e:	ee6b ba8b 	vmul.f32	s23, s23, s22
 8012072:	fecb baa8 	vmaxnm.f32	s23, s23, s17
 8012076:	fecb baca 	vminnm.f32	s23, s23, s20
 801207a:	eef4 ba4a 	vcmp.f32	s23, s20
 801207e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012082:	bf14      	ite	ne
 8012084:	4699      	movne	r9, r3
 8012086:	f04f 0900 	moveq.w	r9, #0
 801208a:	f1b8 0f00 	cmp.w	r8, #0
 801208e:	d056      	beq.n	801213e <forward_lite_upsample_bilinear_is16os16+0x15a>
 8012090:	eebc 7aeb 	vcvt.u32.f32	s14, s23
 8012094:	9b06      	ldr	r3, [sp, #24]
 8012096:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 801209a:	9d04      	ldr	r5, [sp, #16]
 801209c:	2400      	movs	r4, #0
 801209e:	eef8 7a47 	vcvt.f32.u32	s15, s14
 80120a2:	ee17 7a10 	vmov	r7, s14
 80120a6:	ee38 ca6b 	vsub.f32	s24, s16, s23
 80120aa:	fb03 f707 	mul.w	r7, r3, r7
 80120ae:	ee7b bae7 	vsub.f32	s23, s23, s15
 80120b2:	ee3c ca27 	vadd.f32	s24, s24, s15
 80120b6:	ee07 4a90 	vmov	s15, r4
 80120ba:	ab0a      	add	r3, sp, #40	@ 0x28
 80120bc:	3401      	adds	r4, #1
 80120be:	4629      	mov	r1, r5
 80120c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80120c4:	9300      	str	r3, [sp, #0]
 80120c6:	4652      	mov	r2, sl
 80120c8:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
 80120cc:	4435      	add	r5, r6
 80120ce:	ee77 7ac9 	vsub.f32	s15, s15, s18
 80120d2:	ee67 7aa9 	vmul.f32	s15, s15, s19
 80120d6:	fec7 7aa8 	vmaxnm.f32	s15, s15, s17
 80120da:	fec7 7aec 	vminnm.f32	s15, s15, s25
 80120de:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 80120e2:	eef4 7a6c 	vcmp.f32	s15, s25
 80120e6:	ee38 7a67 	vsub.f32	s14, s16, s15
 80120ea:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 80120ee:	ee16 0a90 	vmov	r0, s13
 80120f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120f6:	4438      	add	r0, r7
 80120f8:	ee37 7a06 	vadd.f32	s14, s14, s12
 80120fc:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8012100:	bf14      	ite	ne
 8012102:	4653      	movne	r3, sl
 8012104:	2300      	moveq	r3, #0
 8012106:	fb06 b000 	mla	r0, r6, r0, fp
 801210a:	ee67 5a0c 	vmul.f32	s11, s14, s24
 801210e:	ee27 6a8c 	vmul.f32	s12, s15, s24
 8012112:	9308      	str	r3, [sp, #32]
 8012114:	ee27 7a2b 	vmul.f32	s14, s14, s23
 8012118:	ab08      	add	r3, sp, #32
 801211a:	ee67 7aab 	vmul.f32	s15, s15, s23
 801211e:	edcd 5a0a 	vstr	s11, [sp, #40]	@ 0x28
 8012122:	ed8d 6a0b 	vstr	s12, [sp, #44]	@ 0x2c
 8012126:	ed8d 7a0c 	vstr	s14, [sp, #48]	@ 0x30
 801212a:	edcd 7a0d 	vstr	s15, [sp, #52]	@ 0x34
 801212e:	f001 f845 	bl	80131bc <lite_bilinear_is16os16_kernel>
 8012132:	45a0      	cmp	r8, r4
 8012134:	d1bf      	bne.n	80120b6 <forward_lite_upsample_bilinear_is16os16+0xd2>
 8012136:	9b04      	ldr	r3, [sp, #16]
 8012138:	9a07      	ldr	r2, [sp, #28]
 801213a:	4413      	add	r3, r2
 801213c:	9304      	str	r3, [sp, #16]
 801213e:	9b03      	ldr	r3, [sp, #12]
 8012140:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8012142:	3301      	adds	r3, #1
 8012144:	429a      	cmp	r2, r3
 8012146:	9303      	str	r3, [sp, #12]
 8012148:	d18a      	bne.n	8012060 <forward_lite_upsample_bilinear_is16os16+0x7c>
 801214a:	b00f      	add	sp, #60	@ 0x3c
 801214c:	ecbd 8b0a 	vpop	{d8-d12}
 8012150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012154:	eddf aa02 	vldr	s21, [pc, #8]	@ 8012160 <forward_lite_upsample_bilinear_is16os16+0x17c>
 8012158:	eeb0 9a6a 	vmov.f32	s18, s21
 801215c:	e75f      	b.n	801201e <forward_lite_upsample_bilinear_is16os16+0x3a>
 801215e:	bf00      	nop
 8012160:	00000000 	.word	0x00000000

08012164 <forward_lite_upsample_bilinear_iu16ou16>:
 8012164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012168:	ed2d 8b0a 	vpush	{d8-d12}
 801216c:	b08f      	sub	sp, #60	@ 0x3c
 801216e:	4683      	mov	fp, r0
 8012170:	9104      	str	r1, [sp, #16]
 8012172:	f89d 1094 	ldrb.w	r1, [sp, #148]	@ 0x94
 8012176:	f8dd 8088 	ldr.w	r8, [sp, #136]	@ 0x88
 801217a:	f8dd a090 	ldr.w	sl, [sp, #144]	@ 0x90
 801217e:	9206      	str	r2, [sp, #24]
 8012180:	2900      	cmp	r1, #0
 8012182:	f000 80a7 	beq.w	80122d4 <forward_lite_upsample_bilinear_iu16ou16+0x170>
 8012186:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801218a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801218e:	ee70 aae7 	vsub.f32	s21, s1, s15
 8012192:	ee70 7a67 	vsub.f32	s15, s0, s15
 8012196:	ee6a aa87 	vmul.f32	s21, s21, s14
 801219a:	ee27 9a87 	vmul.f32	s18, s15, s14
 801219e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80121a2:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80121a4:	ee87 baa0 	vdiv.f32	s22, s15, s1
 80121a8:	eec7 9a80 	vdiv.f32	s19, s15, s0
 80121ac:	2a00      	cmp	r2, #0
 80121ae:	f000 808c 	beq.w	80122ca <forward_lite_upsample_bilinear_iu16ou16+0x166>
 80121b2:	3b01      	subs	r3, #1
 80121b4:	ea4f 064a 	mov.w	r6, sl, lsl #1
 80121b8:	eddf 8a49 	vldr	s17, [pc, #292]	@ 80122e0 <forward_lite_upsample_bilinear_iu16ou16+0x17c>
 80121bc:	ee07 3a90 	vmov	s15, r3
 80121c0:	9b06      	ldr	r3, [sp, #24]
 80121c2:	1e5a      	subs	r2, r3, #1
 80121c4:	fb0a f303 	mul.w	r3, sl, r3
 80121c8:	eeb8 aa67 	vcvt.f32.u32	s20, s15
 80121cc:	ee0c 2a90 	vmov	s25, r2
 80121d0:	9305      	str	r3, [sp, #20]
 80121d2:	2300      	movs	r3, #0
 80121d4:	eef8 ca6c 	vcvt.f32.u32	s25, s25
 80121d8:	9303      	str	r3, [sp, #12]
 80121da:	fb06 f308 	mul.w	r3, r6, r8
 80121de:	9307      	str	r3, [sp, #28]
 80121e0:	eddd 7a03 	vldr	s15, [sp, #12]
 80121e4:	9b05      	ldr	r3, [sp, #20]
 80121e6:	eef8 ba67 	vcvt.f32.u32	s23, s15
 80121ea:	ee7b baea 	vsub.f32	s23, s23, s21
 80121ee:	ee6b ba8b 	vmul.f32	s23, s23, s22
 80121f2:	fecb baa8 	vmaxnm.f32	s23, s23, s17
 80121f6:	fecb baca 	vminnm.f32	s23, s23, s20
 80121fa:	eef4 ba4a 	vcmp.f32	s23, s20
 80121fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012202:	bf14      	ite	ne
 8012204:	4699      	movne	r9, r3
 8012206:	f04f 0900 	moveq.w	r9, #0
 801220a:	f1b8 0f00 	cmp.w	r8, #0
 801220e:	d056      	beq.n	80122be <forward_lite_upsample_bilinear_iu16ou16+0x15a>
 8012210:	eebc 7aeb 	vcvt.u32.f32	s14, s23
 8012214:	9b06      	ldr	r3, [sp, #24]
 8012216:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 801221a:	9d04      	ldr	r5, [sp, #16]
 801221c:	2400      	movs	r4, #0
 801221e:	eef8 7a47 	vcvt.f32.u32	s15, s14
 8012222:	ee17 7a10 	vmov	r7, s14
 8012226:	ee38 ca6b 	vsub.f32	s24, s16, s23
 801222a:	fb03 f707 	mul.w	r7, r3, r7
 801222e:	ee7b bae7 	vsub.f32	s23, s23, s15
 8012232:	ee3c ca27 	vadd.f32	s24, s24, s15
 8012236:	ee07 4a90 	vmov	s15, r4
 801223a:	ab0a      	add	r3, sp, #40	@ 0x28
 801223c:	3401      	adds	r4, #1
 801223e:	4629      	mov	r1, r5
 8012240:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012244:	9300      	str	r3, [sp, #0]
 8012246:	4652      	mov	r2, sl
 8012248:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
 801224c:	4435      	add	r5, r6
 801224e:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8012252:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8012256:	fec7 7aa8 	vmaxnm.f32	s15, s15, s17
 801225a:	fec7 7aec 	vminnm.f32	s15, s15, s25
 801225e:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 8012262:	eef4 7a6c 	vcmp.f32	s15, s25
 8012266:	ee38 7a67 	vsub.f32	s14, s16, s15
 801226a:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 801226e:	ee16 0a90 	vmov	r0, s13
 8012272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012276:	4438      	add	r0, r7
 8012278:	ee37 7a06 	vadd.f32	s14, s14, s12
 801227c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8012280:	bf14      	ite	ne
 8012282:	4653      	movne	r3, sl
 8012284:	2300      	moveq	r3, #0
 8012286:	fb06 b000 	mla	r0, r6, r0, fp
 801228a:	ee67 5a0c 	vmul.f32	s11, s14, s24
 801228e:	ee27 6a8c 	vmul.f32	s12, s15, s24
 8012292:	9308      	str	r3, [sp, #32]
 8012294:	ee27 7a2b 	vmul.f32	s14, s14, s23
 8012298:	ab08      	add	r3, sp, #32
 801229a:	ee67 7aab 	vmul.f32	s15, s15, s23
 801229e:	edcd 5a0a 	vstr	s11, [sp, #40]	@ 0x28
 80122a2:	ed8d 6a0b 	vstr	s12, [sp, #44]	@ 0x2c
 80122a6:	ed8d 7a0c 	vstr	s14, [sp, #48]	@ 0x30
 80122aa:	edcd 7a0d 	vstr	s15, [sp, #52]	@ 0x34
 80122ae:	f000 ffdb 	bl	8013268 <lite_bilinear_iu16ou16_kernel>
 80122b2:	45a0      	cmp	r8, r4
 80122b4:	d1bf      	bne.n	8012236 <forward_lite_upsample_bilinear_iu16ou16+0xd2>
 80122b6:	9b04      	ldr	r3, [sp, #16]
 80122b8:	9a07      	ldr	r2, [sp, #28]
 80122ba:	4413      	add	r3, r2
 80122bc:	9304      	str	r3, [sp, #16]
 80122be:	9b03      	ldr	r3, [sp, #12]
 80122c0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80122c2:	3301      	adds	r3, #1
 80122c4:	429a      	cmp	r2, r3
 80122c6:	9303      	str	r3, [sp, #12]
 80122c8:	d18a      	bne.n	80121e0 <forward_lite_upsample_bilinear_iu16ou16+0x7c>
 80122ca:	b00f      	add	sp, #60	@ 0x3c
 80122cc:	ecbd 8b0a 	vpop	{d8-d12}
 80122d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122d4:	eddf aa02 	vldr	s21, [pc, #8]	@ 80122e0 <forward_lite_upsample_bilinear_iu16ou16+0x17c>
 80122d8:	eeb0 9a6a 	vmov.f32	s18, s21
 80122dc:	e75f      	b.n	801219e <forward_lite_upsample_bilinear_iu16ou16+0x3a>
 80122de:	bf00      	nop
 80122e0:	00000000 	.word	0x00000000

080122e4 <forward_lite_dense_if32of32wf32>:
 80122e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122e8:	ed2d 8b0c 	vpush	{d8-d13}
 80122ec:	e9d0 2305 	ldrd	r2, r3, [r0, #20]
 80122f0:	6801      	ldr	r1, [r0, #0]
 80122f2:	b083      	sub	sp, #12
 80122f4:	fb02 f303 	mul.w	r3, r2, r3
 80122f8:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80122fc:	9100      	str	r1, [sp, #0]
 80122fe:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8012302:	4299      	cmp	r1, r3
 8012304:	9301      	str	r3, [sp, #4]
 8012306:	f080 811c 	bcs.w	8012542 <forward_lite_dense_if32of32wf32+0x25e>
 801230a:	4607      	mov	r7, r0
 801230c:	6904      	ldr	r4, [r0, #16]
 801230e:	0096      	lsls	r6, r2, #2
 8012310:	9b00      	ldr	r3, [sp, #0]
 8012312:	68bd      	ldr	r5, [r7, #8]
 8012314:	eb03 0e06 	add.w	lr, r3, r6
 8012318:	461e      	mov	r6, r3
 801231a:	459e      	cmp	lr, r3
 801231c:	f240 8103 	bls.w	8012526 <forward_lite_dense_if32of32wf32+0x242>
 8012320:	f1a4 0c10 	sub.w	ip, r4, #16
 8012324:	ea4f 0984 	mov.w	r9, r4, lsl #2
 8012328:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 801232c:	f10c 0c01 	add.w	ip, ip, #1
 8012330:	ea4f 1b8c 	mov.w	fp, ip, lsl #6
 8012334:	eb08 1c8c 	add.w	ip, r8, ip, lsl #6
 8012338:	2c0f      	cmp	r4, #15
 801233a:	f240 8107 	bls.w	801254c <forward_lite_dense_if32of32wf32+0x268>
 801233e:	f108 0240 	add.w	r2, r8, #64	@ 0x40
 8012342:	f105 0340 	add.w	r3, r5, #64	@ 0x40
 8012346:	ed9f 7a95 	vldr	s14, [pc, #596]	@ 801259c <forward_lite_dense_if32of32wf32+0x2b8>
 801234a:	4621      	mov	r1, r4
 801234c:	ed53 6a0f 	vldr	s13, [r3, #-60]	@ 0xffffffc4
 8012350:	3910      	subs	r1, #16
 8012352:	ed52 7a0f 	vldr	s15, [r2, #-60]	@ 0xffffffc4
 8012356:	3340      	adds	r3, #64	@ 0x40
 8012358:	ed52 4a10 	vldr	s9, [r2, #-64]	@ 0xffffffc0
 801235c:	290f      	cmp	r1, #15
 801235e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012362:	ed13 5a20 	vldr	s10, [r3, #-128]	@ 0xffffff80
 8012366:	ed52 5a0e 	vldr	s11, [r2, #-56]	@ 0xffffffc8
 801236a:	f102 0240 	add.w	r2, r2, #64	@ 0x40
 801236e:	ed13 6a1e 	vldr	s12, [r3, #-120]	@ 0xffffff88
 8012372:	eee4 7a85 	vfma.f32	s15, s9, s10
 8012376:	ed53 6a1d 	vldr	s13, [r3, #-116]	@ 0xffffff8c
 801237a:	ed12 da1d 	vldr	s26, [r2, #-116]	@ 0xffffff8c
 801237e:	ed52 ca1c 	vldr	s25, [r2, #-112]	@ 0xffffff90
 8012382:	ed13 ca1c 	vldr	s24, [r3, #-112]	@ 0xffffff90
 8012386:	ed52 ba1b 	vldr	s23, [r2, #-108]	@ 0xffffff94
 801238a:	ed13 ba1b 	vldr	s22, [r3, #-108]	@ 0xffffff94
 801238e:	eee5 7a86 	vfma.f32	s15, s11, s12
 8012392:	ed52 aa1a 	vldr	s21, [r2, #-104]	@ 0xffffff98
 8012396:	ed13 aa1a 	vldr	s20, [r3, #-104]	@ 0xffffff98
 801239a:	ed52 9a19 	vldr	s19, [r2, #-100]	@ 0xffffff9c
 801239e:	ed13 9a19 	vldr	s18, [r3, #-100]	@ 0xffffff9c
 80123a2:	ed52 8a18 	vldr	s17, [r2, #-96]	@ 0xffffffa0
 80123a6:	ed13 8a18 	vldr	s16, [r3, #-96]	@ 0xffffffa0
 80123aa:	eeed 7a26 	vfma.f32	s15, s26, s13
 80123ae:	ed12 0a17 	vldr	s0, [r2, #-92]	@ 0xffffffa4
 80123b2:	ed53 0a17 	vldr	s1, [r3, #-92]	@ 0xffffffa4
 80123b6:	ed12 1a16 	vldr	s2, [r2, #-88]	@ 0xffffffa8
 80123ba:	ed53 1a16 	vldr	s3, [r3, #-88]	@ 0xffffffa8
 80123be:	ed12 2a15 	vldr	s4, [r2, #-84]	@ 0xffffffac
 80123c2:	ed53 2a15 	vldr	s5, [r3, #-84]	@ 0xffffffac
 80123c6:	eeec 7a8c 	vfma.f32	s15, s25, s24
 80123ca:	ed12 3a14 	vldr	s6, [r2, #-80]	@ 0xffffffb0
 80123ce:	ed53 3a14 	vldr	s7, [r3, #-80]	@ 0xffffffb0
 80123d2:	ed12 4a13 	vldr	s8, [r2, #-76]	@ 0xffffffb4
 80123d6:	ed53 4a13 	vldr	s9, [r3, #-76]	@ 0xffffffb4
 80123da:	ed12 5a12 	vldr	s10, [r2, #-72]	@ 0xffffffb8
 80123de:	ed53 5a12 	vldr	s11, [r3, #-72]	@ 0xffffffb8
 80123e2:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 80123e6:	ed12 6a11 	vldr	s12, [r2, #-68]	@ 0xffffffbc
 80123ea:	ed53 6a11 	vldr	s13, [r3, #-68]	@ 0xffffffbc
 80123ee:	eeea 7a8a 	vfma.f32	s15, s21, s20
 80123f2:	eee9 7a89 	vfma.f32	s15, s19, s18
 80123f6:	eee8 7a88 	vfma.f32	s15, s17, s16
 80123fa:	eee0 7a20 	vfma.f32	s15, s0, s1
 80123fe:	eee1 7a21 	vfma.f32	s15, s2, s3
 8012402:	eee2 7a22 	vfma.f32	s15, s4, s5
 8012406:	eee3 7a23 	vfma.f32	s15, s6, s7
 801240a:	eee4 7a24 	vfma.f32	s15, s8, s9
 801240e:	eee5 7a25 	vfma.f32	s15, s10, s11
 8012412:	eee6 7a26 	vfma.f32	s15, s12, s13
 8012416:	ee37 7a27 	vadd.f32	s14, s14, s15
 801241a:	d897      	bhi.n	801234c <forward_lite_dense_if32of32wf32+0x68>
 801241c:	eb05 020b 	add.w	r2, r5, fp
 8012420:	f004 010f 	and.w	r1, r4, #15
 8012424:	4663      	mov	r3, ip
 8012426:	2903      	cmp	r1, #3
 8012428:	d95f      	bls.n	80124ea <forward_lite_dense_if32of32wf32+0x206>
 801242a:	edd2 6a01 	vldr	s13, [r2, #4]
 801242e:	1f08      	subs	r0, r1, #4
 8012430:	edd3 7a01 	vldr	s15, [r3, #4]
 8012434:	ed93 4a00 	vldr	s8, [r3]
 8012438:	2803      	cmp	r0, #3
 801243a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801243e:	edd2 4a00 	vldr	s9, [r2]
 8012442:	ed93 5a02 	vldr	s10, [r3, #8]
 8012446:	edd2 5a02 	vldr	s11, [r2, #8]
 801244a:	eee4 7a24 	vfma.f32	s15, s8, s9
 801244e:	ed93 6a03 	vldr	s12, [r3, #12]
 8012452:	edd2 6a03 	vldr	s13, [r2, #12]
 8012456:	ee77 7a27 	vadd.f32	s15, s14, s15
 801245a:	eee5 7a25 	vfma.f32	s15, s10, s11
 801245e:	eee6 7a26 	vfma.f32	s15, s12, s13
 8012462:	eeb0 7a67 	vmov.f32	s14, s15
 8012466:	d938      	bls.n	80124da <forward_lite_dense_if32of32wf32+0x1f6>
 8012468:	edd2 6a05 	vldr	s13, [r2, #20]
 801246c:	f1a1 0a08 	sub.w	sl, r1, #8
 8012470:	edd3 7a05 	vldr	s15, [r3, #20]
 8012474:	ed93 4a04 	vldr	s8, [r3, #16]
 8012478:	f1ba 0f03 	cmp.w	sl, #3
 801247c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012480:	edd2 4a04 	vldr	s9, [r2, #16]
 8012484:	ed93 5a06 	vldr	s10, [r3, #24]
 8012488:	edd2 5a06 	vldr	s11, [r2, #24]
 801248c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8012490:	ed93 6a07 	vldr	s12, [r3, #28]
 8012494:	edd2 6a07 	vldr	s13, [r2, #28]
 8012498:	eee5 7a25 	vfma.f32	s15, s10, s11
 801249c:	eee6 7a26 	vfma.f32	s15, s12, s13
 80124a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80124a4:	d919      	bls.n	80124da <forward_lite_dense_if32of32wf32+0x1f6>
 80124a6:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 80124aa:	edd2 7a09 	vldr	s15, [r2, #36]	@ 0x24
 80124ae:	ed92 4a08 	vldr	s8, [r2, #32]
 80124b2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80124b6:	edd3 4a08 	vldr	s9, [r3, #32]
 80124ba:	ed92 5a0a 	vldr	s10, [r2, #40]	@ 0x28
 80124be:	edd3 5a0a 	vldr	s11, [r3, #40]	@ 0x28
 80124c2:	eee4 7a24 	vfma.f32	s15, s8, s9
 80124c6:	ed92 6a0b 	vldr	s12, [r2, #44]	@ 0x2c
 80124ca:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 80124ce:	eee5 7a25 	vfma.f32	s15, s10, s11
 80124d2:	eee6 7a26 	vfma.f32	s15, s12, s13
 80124d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80124da:	0880      	lsrs	r0, r0, #2
 80124dc:	f001 0103 	and.w	r1, r1, #3
 80124e0:	3001      	adds	r0, #1
 80124e2:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 80124e6:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 80124ea:	b1a9      	cbz	r1, 8012518 <forward_lite_dense_if32of32wf32+0x234>
 80124ec:	edd3 6a00 	vldr	s13, [r3]
 80124f0:	3901      	subs	r1, #1
 80124f2:	edd2 7a00 	vldr	s15, [r2]
 80124f6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80124fa:	d00d      	beq.n	8012518 <forward_lite_dense_if32of32wf32+0x234>
 80124fc:	edd3 6a01 	vldr	s13, [r3, #4]
 8012500:	2901      	cmp	r1, #1
 8012502:	edd2 7a01 	vldr	s15, [r2, #4]
 8012506:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801250a:	d005      	beq.n	8012518 <forward_lite_dense_if32of32wf32+0x234>
 801250c:	edd2 6a02 	vldr	s13, [r2, #8]
 8012510:	edd3 7a02 	vldr	s15, [r3, #8]
 8012514:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012518:	eca6 7a01 	vstmia	r6!, {s14}
 801251c:	45b6      	cmp	lr, r6
 801251e:	444d      	add	r5, r9
 8012520:	f63f af0a 	bhi.w	8012338 <forward_lite_dense_if32of32wf32+0x54>
 8012524:	697a      	ldr	r2, [r7, #20]
 8012526:	68fb      	ldr	r3, [r7, #12]
 8012528:	b9b3      	cbnz	r3, 8012558 <forward_lite_dense_if32of32wf32+0x274>
 801252a:	9b00      	ldr	r3, [sp, #0]
 801252c:	0096      	lsls	r6, r2, #2
 801252e:	9901      	ldr	r1, [sp, #4]
 8012530:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8012534:	693c      	ldr	r4, [r7, #16]
 8012536:	4299      	cmp	r1, r3
 8012538:	eb08 0884 	add.w	r8, r8, r4, lsl #2
 801253c:	9300      	str	r3, [sp, #0]
 801253e:	f63f aee7 	bhi.w	8012310 <forward_lite_dense_if32of32wf32+0x2c>
 8012542:	b003      	add	sp, #12
 8012544:	ecbd 8b0c 	vpop	{d8-d13}
 8012548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801254c:	4621      	mov	r1, r4
 801254e:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 801259c <forward_lite_dense_if32of32wf32+0x2b8>
 8012552:	462a      	mov	r2, r5
 8012554:	4643      	mov	r3, r8
 8012556:	e766      	b.n	8012426 <forward_lite_dense_if32of32wf32+0x142>
 8012558:	2a00      	cmp	r2, #0
 801255a:	d0e6      	beq.n	801252a <forward_lite_dense_if32of32wf32+0x246>
 801255c:	9a00      	ldr	r2, [sp, #0]
 801255e:	ed93 7a00 	vldr	s14, [r3]
 8012562:	edd2 7a00 	vldr	s15, [r2]
 8012566:	4613      	mov	r3, r2
 8012568:	ee77 7a87 	vadd.f32	s15, s15, s14
 801256c:	edc2 7a00 	vstr	s15, [r2]
 8012570:	697a      	ldr	r2, [r7, #20]
 8012572:	2a01      	cmp	r2, #1
 8012574:	d9d9      	bls.n	801252a <forward_lite_dense_if32of32wf32+0x246>
 8012576:	1d19      	adds	r1, r3, #4
 8012578:	2301      	movs	r3, #1
 801257a:	68fa      	ldr	r2, [r7, #12]
 801257c:	ed91 7a00 	vldr	s14, [r1]
 8012580:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8012584:	3301      	adds	r3, #1
 8012586:	edd2 7a00 	vldr	s15, [r2]
 801258a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801258e:	ece1 7a01 	vstmia	r1!, {s15}
 8012592:	697a      	ldr	r2, [r7, #20]
 8012594:	429a      	cmp	r2, r3
 8012596:	d8f0      	bhi.n	801257a <forward_lite_dense_if32of32wf32+0x296>
 8012598:	e7c7      	b.n	801252a <forward_lite_dense_if32of32wf32+0x246>
 801259a:	bf00      	nop
 801259c:	00000000 	.word	0x00000000

080125a0 <forward_lite_dense_if32of32wf32_lut4>:
 80125a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125a4:	b08d      	sub	sp, #52	@ 0x34
 80125a6:	4605      	mov	r5, r0
 80125a8:	460c      	mov	r4, r1
 80125aa:	9005      	str	r0, [sp, #20]
 80125ac:	4618      	mov	r0, r3
 80125ae:	920a      	str	r2, [sp, #40]	@ 0x28
 80125b0:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 80125b2:	e9dd 2319 	ldrd	r2, r3, [sp, #100]	@ 0x64
 80125b6:	fb02 f303 	mul.w	r3, r2, r3
 80125ba:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80125be:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 80125c0:	9308      	str	r3, [sp, #32]
 80125c2:	b126      	cbz	r6, 80125ce <forward_lite_dense_if32of32wf32_lut4+0x2e>
 80125c4:	2240      	movs	r2, #64	@ 0x40
 80125c6:	4631      	mov	r1, r6
 80125c8:	f000 fbe0 	bl	8012d8c <st_int8_copy>
 80125cc:	4630      	mov	r0, r6
 80125ce:	9b05      	ldr	r3, [sp, #20]
 80125d0:	9a08      	ldr	r2, [sp, #32]
 80125d2:	4293      	cmp	r3, r2
 80125d4:	f080 80f7 	bcs.w	80127c6 <forward_lite_dense_if32of32wf32_lut4+0x226>
 80125d8:	08eb      	lsrs	r3, r5, #3
 80125da:	f005 0101 	and.w	r1, r5, #1
 80125de:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80125e0:	f025 0801 	bic.w	r8, r5, #1
 80125e4:	eb04 1a43 	add.w	sl, r4, r3, lsl #5
 80125e8:	9301      	str	r3, [sp, #4]
 80125ea:	009b      	lsls	r3, r3, #2
 80125ec:	9102      	str	r1, [sp, #8]
 80125ee:	0092      	lsls	r2, r2, #2
 80125f0:	f104 0b20 	add.w	fp, r4, #32
 80125f4:	00a9      	lsls	r1, r5, #2
 80125f6:	9304      	str	r3, [sp, #16]
 80125f8:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 80125fc:	9b05      	ldr	r3, [sp, #20]
 80125fe:	9207      	str	r2, [sp, #28]
 8012600:	9109      	str	r1, [sp, #36]	@ 0x24
 8012602:	920b      	str	r2, [sp, #44]	@ 0x2c
 8012604:	9a07      	ldr	r2, [sp, #28]
 8012606:	eb03 0902 	add.w	r9, r3, r2
 801260a:	f1ab 0220 	sub.w	r2, fp, #32
 801260e:	4599      	cmp	r9, r3
 8012610:	9206      	str	r2, [sp, #24]
 8012612:	f240 80db 	bls.w	80127cc <forward_lite_dense_if32of32wf32_lut4+0x22c>
 8012616:	469e      	mov	lr, r3
 8012618:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801261a:	f108 33ff 	add.w	r3, r8, #4294967295
 801261e:	9303      	str	r3, [sp, #12]
 8012620:	9b01      	ldr	r3, [sp, #4]
 8012622:	2b00      	cmp	r3, #0
 8012624:	f000 80b4 	beq.w	8012790 <forward_lite_dense_if32of32wf32_lut4+0x1f0>
 8012628:	9b04      	ldr	r3, [sp, #16]
 801262a:	ed9f 7a71 	vldr	s14, [pc, #452]	@ 80127f0 <forward_lite_dense_if32of32wf32_lut4+0x250>
 801262e:	18d4      	adds	r4, r2, r3
 8012630:	465b      	mov	r3, fp
 8012632:	7816      	ldrb	r6, [r2, #0]
 8012634:	3204      	adds	r2, #4
 8012636:	ed53 2a07 	vldr	s5, [r3, #-28]	@ 0xffffffe4
 801263a:	3320      	adds	r3, #32
 801263c:	f006 070f 	and.w	r7, r6, #15
 8012640:	0936      	lsrs	r6, r6, #4
 8012642:	f812 5c03 	ldrb.w	r5, [r2, #-3]
 8012646:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 801264a:	ed13 4a10 	vldr	s8, [r3, #-64]	@ 0xffffffc0
 801264e:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8012652:	ed53 3a0e 	vldr	s7, [r3, #-56]	@ 0xffffffc8
 8012656:	edd7 7a00 	vldr	s15, [r7]
 801265a:	ed96 3a00 	vldr	s6, [r6]
 801265e:	092e      	lsrs	r6, r5, #4
 8012660:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8012664:	f005 050f 	and.w	r5, r5, #15
 8012668:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 801266c:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 8012670:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8012674:	ed13 5a0d 	vldr	s10, [r3, #-52]	@ 0xffffffcc
 8012678:	eee3 7a04 	vfma.f32	s15, s6, s8
 801267c:	ed96 3a00 	vldr	s6, [r6]
 8012680:	ed95 4a00 	vldr	s8, [r5]
 8012684:	090d      	lsrs	r5, r1, #4
 8012686:	ed53 4a0c 	vldr	s9, [r3, #-48]	@ 0xffffffd0
 801268a:	f001 010f 	and.w	r1, r1, #15
 801268e:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8012692:	ed13 6a0b 	vldr	s12, [r3, #-44]	@ 0xffffffd4
 8012696:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801269a:	ed53 5a0a 	vldr	s11, [r3, #-40]	@ 0xffffffd8
 801269e:	ed53 6a09 	vldr	s13, [r3, #-36]	@ 0xffffffdc
 80126a2:	eee3 7a23 	vfma.f32	s15, s6, s7
 80126a6:	eee4 7a05 	vfma.f32	s15, s8, s10
 80126aa:	ed95 4a00 	vldr	s8, [r5]
 80126ae:	ed91 5a00 	vldr	s10, [r1]
 80126b2:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 80126b6:	42a2      	cmp	r2, r4
 80126b8:	ea4f 1511 	mov.w	r5, r1, lsr #4
 80126bc:	f001 010f 	and.w	r1, r1, #15
 80126c0:	eee4 7a24 	vfma.f32	s15, s8, s9
 80126c4:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80126c8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80126cc:	eee5 7a06 	vfma.f32	s15, s10, s12
 80126d0:	ed95 5a00 	vldr	s10, [r5]
 80126d4:	ed91 6a00 	vldr	s12, [r1]
 80126d8:	eee5 7a25 	vfma.f32	s15, s10, s11
 80126dc:	eee6 7a26 	vfma.f32	s15, s12, s13
 80126e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80126e4:	d1a5      	bne.n	8012632 <forward_lite_dense_if32of32wf32_lut4+0x92>
 80126e6:	4656      	mov	r6, sl
 80126e8:	4546      	cmp	r6, r8
 80126ea:	d257      	bcs.n	801279c <forward_lite_dense_if32of32wf32_lut4+0x1fc>
 80126ec:	9b03      	ldr	r3, [sp, #12]
 80126ee:	f106 0208 	add.w	r2, r6, #8
 80126f2:	1e61      	subs	r1, r4, #1
 80126f4:	1b9d      	subs	r5, r3, r6
 80126f6:	08ef      	lsrs	r7, r5, #3
 80126f8:	eb04 05d5 	add.w	r5, r4, r5, lsr #3
 80126fc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8012700:	3208      	adds	r2, #8
 8012702:	ed52 5a03 	vldr	s11, [r2, #-12]
 8012706:	f003 0c0f 	and.w	ip, r3, #15
 801270a:	091b      	lsrs	r3, r3, #4
 801270c:	ed52 6a04 	vldr	s13, [r2, #-16]
 8012710:	42a9      	cmp	r1, r5
 8012712:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8012716:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801271a:	eddc 7a00 	vldr	s15, [ip]
 801271e:	ed93 6a00 	vldr	s12, [r3]
 8012722:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8012726:	eee6 7a26 	vfma.f32	s15, s12, s13
 801272a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801272e:	d1e5      	bne.n	80126fc <forward_lite_dense_if32of32wf32_lut4+0x15c>
 8012730:	3701      	adds	r7, #1
 8012732:	19e2      	adds	r2, r4, r7
 8012734:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
 8012738:	9b02      	ldr	r3, [sp, #8]
 801273a:	b30b      	cbz	r3, 8012780 <forward_lite_dense_if32of32wf32_lut4+0x1e0>
 801273c:	f812 3b01 	ldrb.w	r3, [r2], #1
 8012740:	edd6 7a00 	vldr	s15, [r6]
 8012744:	091b      	lsrs	r3, r3, #4
 8012746:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801274a:	edd3 6a00 	vldr	s13, [r3]
 801274e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012752:	ecae 7a01 	vstmia	lr!, {s14}
 8012756:	45f1      	cmp	r9, lr
 8012758:	f63f af62 	bhi.w	8012620 <forward_lite_dense_if32of32wf32_lut4+0x80>
 801275c:	9b05      	ldr	r3, [sp, #20]
 801275e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8012760:	1899      	adds	r1, r3, r2
 8012762:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8012764:	b9e3      	cbnz	r3, 80127a0 <forward_lite_dense_if32of32wf32_lut4+0x200>
 8012766:	9b08      	ldr	r3, [sp, #32]
 8012768:	428b      	cmp	r3, r1
 801276a:	d92c      	bls.n	80127c6 <forward_lite_dense_if32of32wf32_lut4+0x226>
 801276c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801276e:	4498      	add	r8, r3
 8012770:	449a      	add	sl, r3
 8012772:	449b      	add	fp, r3
 8012774:	9b05      	ldr	r3, [sp, #20]
 8012776:	4599      	cmp	r9, r3
 8012778:	d92a      	bls.n	80127d0 <forward_lite_dense_if32of32wf32_lut4+0x230>
 801277a:	460b      	mov	r3, r1
 801277c:	9105      	str	r1, [sp, #20]
 801277e:	e741      	b.n	8012604 <forward_lite_dense_if32of32wf32_lut4+0x64>
 8012780:	ecae 7a01 	vstmia	lr!, {s14}
 8012784:	45f1      	cmp	r9, lr
 8012786:	d9e9      	bls.n	801275c <forward_lite_dense_if32of32wf32_lut4+0x1bc>
 8012788:	9b01      	ldr	r3, [sp, #4]
 801278a:	2b00      	cmp	r3, #0
 801278c:	f47f af4c 	bne.w	8012628 <forward_lite_dense_if32of32wf32_lut4+0x88>
 8012790:	9e06      	ldr	r6, [sp, #24]
 8012792:	4614      	mov	r4, r2
 8012794:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 80127f0 <forward_lite_dense_if32of32wf32_lut4+0x250>
 8012798:	4546      	cmp	r6, r8
 801279a:	d3a7      	bcc.n	80126ec <forward_lite_dense_if32of32wf32_lut4+0x14c>
 801279c:	4622      	mov	r2, r4
 801279e:	e7cb      	b.n	8012738 <forward_lite_dense_if32of32wf32_lut4+0x198>
 80127a0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	d0df      	beq.n	8012766 <forward_lite_dense_if32of32wf32_lut4+0x1c6>
 80127a6:	9b07      	ldr	r3, [sp, #28]
 80127a8:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80127aa:	1acb      	subs	r3, r1, r3
 80127ac:	edd3 7a00 	vldr	s15, [r3]
 80127b0:	ecb2 7a01 	vldmia	r2!, {s14}
 80127b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80127b8:	ece3 7a01 	vstmia	r3!, {s15}
 80127bc:	428b      	cmp	r3, r1
 80127be:	d1f5      	bne.n	80127ac <forward_lite_dense_if32of32wf32_lut4+0x20c>
 80127c0:	9b08      	ldr	r3, [sp, #32]
 80127c2:	428b      	cmp	r3, r1
 80127c4:	d8d2      	bhi.n	801276c <forward_lite_dense_if32of32wf32_lut4+0x1cc>
 80127c6:	b00d      	add	sp, #52	@ 0x34
 80127c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80127cc:	4619      	mov	r1, r3
 80127ce:	e7c8      	b.n	8012762 <forward_lite_dense_if32of32wf32_lut4+0x1c2>
 80127d0:	9b07      	ldr	r3, [sp, #28]
 80127d2:	1acb      	subs	r3, r1, r3
 80127d4:	461a      	mov	r2, r3
 80127d6:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 80127d8:	ed92 7a00 	vldr	s14, [r2]
 80127dc:	ecf0 7a01 	vldmia	r0!, {s15}
 80127e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80127e4:	ece2 7a01 	vstmia	r2!, {s15}
 80127e8:	428a      	cmp	r2, r1
 80127ea:	d1f5      	bne.n	80127d8 <forward_lite_dense_if32of32wf32_lut4+0x238>
 80127ec:	e7f2      	b.n	80127d4 <forward_lite_dense_if32of32wf32_lut4+0x234>
 80127ee:	bf00      	nop
 80127f0:	00000000 	.word	0x00000000

080127f4 <forward_lite_dense_if32of32wf32_lut8>:
 80127f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127f8:	b091      	sub	sp, #68	@ 0x44
 80127fa:	4699      	mov	r9, r3
 80127fc:	468b      	mov	fp, r1
 80127fe:	920e      	str	r2, [sp, #56]	@ 0x38
 8012800:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 8012802:	f8dd 8070 	ldr.w	r8, [sp, #112]	@ 0x70
 8012806:	9003      	str	r0, [sp, #12]
 8012808:	e9dd 231d 	ldrd	r2, r3, [sp, #116]	@ 0x74
 801280c:	fb02 f303 	mul.w	r3, r2, r3
 8012810:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8012814:	930c      	str	r3, [sp, #48]	@ 0x30
 8012816:	b134      	cbz	r4, 8012826 <forward_lite_dense_if32of32wf32_lut8+0x32>
 8012818:	4648      	mov	r0, r9
 801281a:	46a1      	mov	r9, r4
 801281c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8012820:	4621      	mov	r1, r4
 8012822:	f000 fab3 	bl	8012d8c <st_int8_copy>
 8012826:	9b03      	ldr	r3, [sp, #12]
 8012828:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801282a:	4293      	cmp	r3, r2
 801282c:	f080 8084 	bcs.w	8012938 <forward_lite_dense_if32of32wf32_lut8+0x144>
 8012830:	4bb7      	ldr	r3, [pc, #732]	@ (8012b10 <forward_lite_dense_if32of32wf32_lut8+0x31c>)
 8012832:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8012834:	4443      	add	r3, r8
 8012836:	9d03      	ldr	r5, [sp, #12]
 8012838:	0092      	lsls	r2, r2, #2
 801283a:	eddf 3ab6 	vldr	s7, [pc, #728]	@ 8012b14 <forward_lite_dense_if32of32wf32_lut8+0x320>
 801283e:	009b      	lsls	r3, r3, #2
 8012840:	920b      	str	r2, [sp, #44]	@ 0x2c
 8012842:	f103 0120 	add.w	r1, r3, #32
 8012846:	930d      	str	r3, [sp, #52]	@ 0x34
 8012848:	445b      	add	r3, fp
 801284a:	920f      	str	r2, [sp, #60]	@ 0x3c
 801284c:	9105      	str	r1, [sp, #20]
 801284e:	9300      	str	r3, [sp, #0]
 8012850:	eb0b 0301 	add.w	r3, fp, r1
 8012854:	469a      	mov	sl, r3
 8012856:	469e      	mov	lr, r3
 8012858:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801285a:	eb05 0c03 	add.w	ip, r5, r3
 801285e:	45ac      	cmp	ip, r5
 8012860:	d952      	bls.n	8012908 <forward_lite_dense_if32of32wf32_lut8+0x114>
 8012862:	9800      	ldr	r0, [sp, #0]
 8012864:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012866:	f100 011f 	add.w	r1, r0, #31
 801286a:	eba0 020b 	sub.w	r2, r0, fp
 801286e:	445b      	add	r3, fp
 8012870:	9101      	str	r1, [sp, #4]
 8012872:	eba1 010b 	sub.w	r1, r1, fp
 8012876:	0952      	lsrs	r2, r2, #5
 8012878:	9306      	str	r3, [sp, #24]
 801287a:	0889      	lsrs	r1, r1, #2
 801287c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801287e:	3101      	adds	r1, #1
 8012880:	9102      	str	r1, [sp, #8]
 8012882:	1c51      	adds	r1, r2, #1
 8012884:	00d2      	lsls	r2, r2, #3
 8012886:	3210      	adds	r2, #16
 8012888:	920a      	str	r2, [sp, #40]	@ 0x28
 801288a:	00ca      	lsls	r2, r1, #3
 801288c:	9208      	str	r2, [sp, #32]
 801288e:	eb0b 1241 	add.w	r2, fp, r1, lsl #5
 8012892:	9209      	str	r2, [sp, #36]	@ 0x24
 8012894:	1f02      	subs	r2, r0, #4
 8012896:	9204      	str	r2, [sp, #16]
 8012898:	f10b 0204 	add.w	r2, fp, #4
 801289c:	9207      	str	r2, [sp, #28]
 801289e:	f1b8 0f07 	cmp.w	r8, #7
 80128a2:	d84c      	bhi.n	801293e <forward_lite_dense_if32of32wf32_lut8+0x14a>
 80128a4:	45d3      	cmp	fp, sl
 80128a6:	ed9f 7a9b 	vldr	s14, [pc, #620]	@ 8012b14 <forward_lite_dense_if32of32wf32_lut8+0x320>
 80128aa:	d20f      	bcs.n	80128cc <forward_lite_dense_if32of32wf32_lut8+0xd8>
 80128ac:	4659      	mov	r1, fp
 80128ae:	4618      	mov	r0, r3
 80128b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80128b4:	ecf1 7a01 	vldmia	r1!, {s15}
 80128b8:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 80128bc:	4551      	cmp	r1, sl
 80128be:	edd2 6a00 	vldr	s13, [r2]
 80128c2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80128c6:	d3f3      	bcc.n	80128b0 <forward_lite_dense_if32of32wf32_lut8+0xbc>
 80128c8:	9a02      	ldr	r2, [sp, #8]
 80128ca:	4413      	add	r3, r2
 80128cc:	eca5 7a01 	vstmia	r5!, {s14}
 80128d0:	45ac      	cmp	ip, r5
 80128d2:	d8e4      	bhi.n	801289e <forward_lite_dense_if32of32wf32_lut8+0xaa>
 80128d4:	9b03      	ldr	r3, [sp, #12]
 80128d6:	46f3      	mov	fp, lr
 80128d8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80128da:	1899      	adds	r1, r3, r2
 80128dc:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80128de:	b9c3      	cbnz	r3, 8012912 <forward_lite_dense_if32of32wf32_lut8+0x11e>
 80128e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80128e2:	428b      	cmp	r3, r1
 80128e4:	d928      	bls.n	8012938 <forward_lite_dense_if32of32wf32_lut8+0x144>
 80128e6:	9b00      	ldr	r3, [sp, #0]
 80128e8:	9a05      	ldr	r2, [sp, #20]
 80128ea:	4413      	add	r3, r2
 80128ec:	4492      	add	sl, r2
 80128ee:	9300      	str	r3, [sp, #0]
 80128f0:	9b03      	ldr	r3, [sp, #12]
 80128f2:	459c      	cmp	ip, r3
 80128f4:	f240 821e 	bls.w	8012d34 <forward_lite_dense_if32of32wf32_lut8+0x540>
 80128f8:	460d      	mov	r5, r1
 80128fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80128fc:	4496      	add	lr, r2
 80128fe:	9103      	str	r1, [sp, #12]
 8012900:	eb05 0c03 	add.w	ip, r5, r3
 8012904:	45ac      	cmp	ip, r5
 8012906:	d8ac      	bhi.n	8012862 <forward_lite_dense_if32of32wf32_lut8+0x6e>
 8012908:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801290a:	4629      	mov	r1, r5
 801290c:	46f3      	mov	fp, lr
 801290e:	2b00      	cmp	r3, #0
 8012910:	d0e6      	beq.n	80128e0 <forward_lite_dense_if32of32wf32_lut8+0xec>
 8012912:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012914:	2b00      	cmp	r3, #0
 8012916:	d0e3      	beq.n	80128e0 <forward_lite_dense_if32of32wf32_lut8+0xec>
 8012918:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801291a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801291c:	1acb      	subs	r3, r1, r3
 801291e:	edd3 7a00 	vldr	s15, [r3]
 8012922:	ecb2 7a01 	vldmia	r2!, {s14}
 8012926:	ee77 7a87 	vadd.f32	s15, s15, s14
 801292a:	ece3 7a01 	vstmia	r3!, {s15}
 801292e:	428b      	cmp	r3, r1
 8012930:	d1f5      	bne.n	801291e <forward_lite_dense_if32of32wf32_lut8+0x12a>
 8012932:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012934:	428b      	cmp	r3, r1
 8012936:	d8d6      	bhi.n	80128e6 <forward_lite_dense_if32of32wf32_lut8+0xf2>
 8012938:	b011      	add	sp, #68	@ 0x44
 801293a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801293e:	f003 0203 	and.w	r2, r3, #3
 8012942:	2a02      	cmp	r2, #2
 8012944:	f000 81ee 	beq.w	8012d24 <forward_lite_dense_if32of32wf32_lut8+0x530>
 8012948:	2a03      	cmp	r2, #3
 801294a:	f000 80e5 	beq.w	8012b18 <forward_lite_dense_if32of32wf32_lut8+0x324>
 801294e:	2a01      	cmp	r2, #1
 8012950:	f000 81d2 	beq.w	8012cf8 <forward_lite_dense_if32of32wf32_lut8+0x504>
 8012954:	9a06      	ldr	r2, [sp, #24]
 8012956:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 8012b14 <forward_lite_dense_if32of32wf32_lut8+0x320>
 801295a:	4593      	cmp	fp, r2
 801295c:	f200 81e8 	bhi.w	8012d30 <forward_lite_dense_if32of32wf32_lut8+0x53c>
 8012960:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8012962:	f103 0208 	add.w	r2, r3, #8
 8012966:	f10b 0120 	add.w	r1, fp, #32
 801296a:	18c4      	adds	r4, r0, r3
 801296c:	f812 0c07 	ldrb.w	r0, [r2, #-7]
 8012970:	3208      	adds	r2, #8
 8012972:	ed51 2a07 	vldr	s5, [r1, #-28]	@ 0xffffffe4
 8012976:	3120      	adds	r1, #32
 8012978:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 801297c:	ed11 3a10 	vldr	s6, [r1, #-64]	@ 0xffffffc0
 8012980:	ed11 4a0e 	vldr	s8, [r1, #-56]	@ 0xffffffc8
 8012984:	edd0 7a00 	vldr	s15, [r0]
 8012988:	f812 0c10 	ldrb.w	r0, [r2, #-16]
 801298c:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8012990:	ed51 4a0d 	vldr	s9, [r1, #-52]	@ 0xffffffcc
 8012994:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8012998:	ed11 5a0c 	vldr	s10, [r1, #-48]	@ 0xffffffd0
 801299c:	ed51 5a0b 	vldr	s11, [r1, #-44]	@ 0xffffffd4
 80129a0:	edd0 2a00 	vldr	s5, [r0]
 80129a4:	f812 0c0e 	ldrb.w	r0, [r2, #-14]
 80129a8:	eee2 7a83 	vfma.f32	s15, s5, s6
 80129ac:	ed11 6a0a 	vldr	s12, [r1, #-40]	@ 0xffffffd8
 80129b0:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 80129b4:	ed51 6a09 	vldr	s13, [r1, #-36]	@ 0xffffffdc
 80129b8:	ed90 3a00 	vldr	s6, [r0]
 80129bc:	f812 0c0d 	ldrb.w	r0, [r2, #-13]
 80129c0:	eee3 7a04 	vfma.f32	s15, s6, s8
 80129c4:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 80129c8:	ed90 4a00 	vldr	s8, [r0]
 80129cc:	f812 0c0c 	ldrb.w	r0, [r2, #-12]
 80129d0:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 80129d4:	eee4 7a24 	vfma.f32	s15, s8, s9
 80129d8:	edd0 4a00 	vldr	s9, [r0]
 80129dc:	f812 0c0b 	ldrb.w	r0, [r2, #-11]
 80129e0:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 80129e4:	eee4 7a85 	vfma.f32	s15, s9, s10
 80129e8:	ed90 5a00 	vldr	s10, [r0]
 80129ec:	f812 0c0a 	ldrb.w	r0, [r2, #-10]
 80129f0:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 80129f4:	eee5 7a25 	vfma.f32	s15, s10, s11
 80129f8:	edd0 5a00 	vldr	s11, [r0]
 80129fc:	f812 0c09 	ldrb.w	r0, [r2, #-9]
 8012a00:	42a2      	cmp	r2, r4
 8012a02:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8012a06:	eee5 7a86 	vfma.f32	s15, s11, s12
 8012a0a:	ed90 6a00 	vldr	s12, [r0]
 8012a0e:	eee6 7a26 	vfma.f32	s15, s12, s13
 8012a12:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012a16:	d1a9      	bne.n	801296c <forward_lite_dense_if32of32wf32_lut8+0x178>
 8012a18:	9a08      	ldr	r2, [sp, #32]
 8012a1a:	4413      	add	r3, r2
 8012a1c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012a1e:	4572      	cmp	r2, lr
 8012a20:	f4bf af54 	bcs.w	80128cc <forward_lite_dense_if32of32wf32_lut8+0xd8>
 8012a24:	7819      	ldrb	r1, [r3, #0]
 8012a26:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8012a2a:	edd1 7a00 	vldr	s15, [r1]
 8012a2e:	4611      	mov	r1, r2
 8012a30:	ecf1 6a01 	vldmia	r1!, {s13}
 8012a34:	458a      	cmp	sl, r1
 8012a36:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012a3a:	d963      	bls.n	8012b04 <forward_lite_dense_if32of32wf32_lut8+0x310>
 8012a3c:	7859      	ldrb	r1, [r3, #1]
 8012a3e:	edd2 6a01 	vldr	s13, [r2, #4]
 8012a42:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8012a46:	edd1 7a00 	vldr	s15, [r1]
 8012a4a:	f102 0108 	add.w	r1, r2, #8
 8012a4e:	458a      	cmp	sl, r1
 8012a50:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012a54:	d956      	bls.n	8012b04 <forward_lite_dense_if32of32wf32_lut8+0x310>
 8012a56:	7899      	ldrb	r1, [r3, #2]
 8012a58:	edd2 6a02 	vldr	s13, [r2, #8]
 8012a5c:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8012a60:	edd1 7a00 	vldr	s15, [r1]
 8012a64:	f102 010c 	add.w	r1, r2, #12
 8012a68:	458a      	cmp	sl, r1
 8012a6a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012a6e:	d949      	bls.n	8012b04 <forward_lite_dense_if32of32wf32_lut8+0x310>
 8012a70:	78d9      	ldrb	r1, [r3, #3]
 8012a72:	edd2 6a03 	vldr	s13, [r2, #12]
 8012a76:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8012a7a:	edd1 7a00 	vldr	s15, [r1]
 8012a7e:	f102 0110 	add.w	r1, r2, #16
 8012a82:	458a      	cmp	sl, r1
 8012a84:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012a88:	d93c      	bls.n	8012b04 <forward_lite_dense_if32of32wf32_lut8+0x310>
 8012a8a:	7919      	ldrb	r1, [r3, #4]
 8012a8c:	edd2 6a04 	vldr	s13, [r2, #16]
 8012a90:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8012a94:	edd1 7a00 	vldr	s15, [r1]
 8012a98:	f102 0114 	add.w	r1, r2, #20
 8012a9c:	458a      	cmp	sl, r1
 8012a9e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012aa2:	d92f      	bls.n	8012b04 <forward_lite_dense_if32of32wf32_lut8+0x310>
 8012aa4:	7959      	ldrb	r1, [r3, #5]
 8012aa6:	edd2 6a05 	vldr	s13, [r2, #20]
 8012aaa:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8012aae:	edd1 7a00 	vldr	s15, [r1]
 8012ab2:	f102 0118 	add.w	r1, r2, #24
 8012ab6:	458a      	cmp	sl, r1
 8012ab8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012abc:	d922      	bls.n	8012b04 <forward_lite_dense_if32of32wf32_lut8+0x310>
 8012abe:	7999      	ldrb	r1, [r3, #6]
 8012ac0:	edd2 6a06 	vldr	s13, [r2, #24]
 8012ac4:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8012ac8:	edd1 7a00 	vldr	s15, [r1]
 8012acc:	f102 011c 	add.w	r1, r2, #28
 8012ad0:	458a      	cmp	sl, r1
 8012ad2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012ad6:	d915      	bls.n	8012b04 <forward_lite_dense_if32of32wf32_lut8+0x310>
 8012ad8:	79d9      	ldrb	r1, [r3, #7]
 8012ada:	edd2 6a07 	vldr	s13, [r2, #28]
 8012ade:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8012ae2:	edd1 7a00 	vldr	s15, [r1]
 8012ae6:	f102 0120 	add.w	r1, r2, #32
 8012aea:	458a      	cmp	sl, r1
 8012aec:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012af0:	d908      	bls.n	8012b04 <forward_lite_dense_if32of32wf32_lut8+0x310>
 8012af2:	7a19      	ldrb	r1, [r3, #8]
 8012af4:	edd2 7a08 	vldr	s15, [r2, #32]
 8012af8:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8012afc:	edd1 6a00 	vldr	s13, [r1]
 8012b00:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012b04:	9901      	ldr	r1, [sp, #4]
 8012b06:	1a8a      	subs	r2, r1, r2
 8012b08:	eb03 0292 	add.w	r2, r3, r2, lsr #2
 8012b0c:	1c53      	adds	r3, r2, #1
 8012b0e:	e6dd      	b.n	80128cc <forward_lite_dense_if32of32wf32_lut8+0xd8>
 8012b10:	3ffffff8 	.word	0x3ffffff8
 8012b14:	00000000 	.word	0x00000000
 8012b18:	eeb0 7a63 	vmov.f32	s14, s7
 8012b1c:	465a      	mov	r2, fp
 8012b1e:	461f      	mov	r7, r3
 8012b20:	4610      	mov	r0, r2
 8012b22:	f817 1b01 	ldrb.w	r1, [r7], #1
 8012b26:	ecf0 7a01 	vldmia	r0!, {s15}
 8012b2a:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8012b2e:	edd1 6a00 	vldr	s13, [r1]
 8012b32:	9900      	ldr	r1, [sp, #0]
 8012b34:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012b38:	4288      	cmp	r0, r1
 8012b3a:	f200 80f7 	bhi.w	8012d2c <forward_lite_dense_if32of32wf32_lut8+0x538>
 8012b3e:	9904      	ldr	r1, [sp, #16]
 8012b40:	f103 0411 	add.w	r4, r3, #17
 8012b44:	3309      	adds	r3, #9
 8012b46:	1a8e      	subs	r6, r1, r2
 8012b48:	3224      	adds	r2, #36	@ 0x24
 8012b4a:	0976      	lsrs	r6, r6, #5
 8012b4c:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8012b50:	f813 1c07 	ldrb.w	r1, [r3, #-7]
 8012b54:	3308      	adds	r3, #8
 8012b56:	ed52 2a07 	vldr	s5, [r2, #-28]	@ 0xffffffe4
 8012b5a:	3220      	adds	r2, #32
 8012b5c:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8012b60:	ed12 3a10 	vldr	s6, [r2, #-64]	@ 0xffffffc0
 8012b64:	ed12 4a0e 	vldr	s8, [r2, #-56]	@ 0xffffffc8
 8012b68:	edd1 7a00 	vldr	s15, [r1]
 8012b6c:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 8012b70:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8012b74:	ed52 4a0d 	vldr	s9, [r2, #-52]	@ 0xffffffcc
 8012b78:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8012b7c:	ed12 5a0c 	vldr	s10, [r2, #-48]	@ 0xffffffd0
 8012b80:	ed52 5a0b 	vldr	s11, [r2, #-44]	@ 0xffffffd4
 8012b84:	edd1 2a00 	vldr	s5, [r1]
 8012b88:	f813 1c0e 	ldrb.w	r1, [r3, #-14]
 8012b8c:	eee2 7a83 	vfma.f32	s15, s5, s6
 8012b90:	ed12 6a0a 	vldr	s12, [r2, #-40]	@ 0xffffffd8
 8012b94:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8012b98:	ed52 6a09 	vldr	s13, [r2, #-36]	@ 0xffffffdc
 8012b9c:	ed91 3a00 	vldr	s6, [r1]
 8012ba0:	f813 1c0d 	ldrb.w	r1, [r3, #-13]
 8012ba4:	eee3 7a04 	vfma.f32	s15, s6, s8
 8012ba8:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8012bac:	ed91 4a00 	vldr	s8, [r1]
 8012bb0:	f813 1c0c 	ldrb.w	r1, [r3, #-12]
 8012bb4:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8012bb8:	eee4 7a24 	vfma.f32	s15, s8, s9
 8012bbc:	edd1 4a00 	vldr	s9, [r1]
 8012bc0:	f813 1c0b 	ldrb.w	r1, [r3, #-11]
 8012bc4:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8012bc8:	eee4 7a85 	vfma.f32	s15, s9, s10
 8012bcc:	ed91 5a00 	vldr	s10, [r1]
 8012bd0:	f813 1c0a 	ldrb.w	r1, [r3, #-10]
 8012bd4:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8012bd8:	eee5 7a25 	vfma.f32	s15, s10, s11
 8012bdc:	edd1 5a00 	vldr	s11, [r1]
 8012be0:	f813 1c09 	ldrb.w	r1, [r3, #-9]
 8012be4:	42a3      	cmp	r3, r4
 8012be6:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8012bea:	eee5 7a86 	vfma.f32	s15, s11, s12
 8012bee:	ed91 6a00 	vldr	s12, [r1]
 8012bf2:	eee6 7a26 	vfma.f32	s15, s12, s13
 8012bf6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012bfa:	d1a9      	bne.n	8012b50 <forward_lite_dense_if32of32wf32_lut8+0x35c>
 8012bfc:	3601      	adds	r6, #1
 8012bfe:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
 8012c02:	eb00 1046 	add.w	r0, r0, r6, lsl #5
 8012c06:	4550      	cmp	r0, sl
 8012c08:	f4bf ae60 	bcs.w	80128cc <forward_lite_dense_if32of32wf32_lut8+0xd8>
 8012c0c:	781a      	ldrb	r2, [r3, #0]
 8012c0e:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8012c12:	edd2 7a00 	vldr	s15, [r2]
 8012c16:	4602      	mov	r2, r0
 8012c18:	ecf2 6a01 	vldmia	r2!, {s13}
 8012c1c:	4592      	cmp	sl, r2
 8012c1e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012c22:	d963      	bls.n	8012cec <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 8012c24:	785a      	ldrb	r2, [r3, #1]
 8012c26:	edd0 6a01 	vldr	s13, [r0, #4]
 8012c2a:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8012c2e:	edd2 7a00 	vldr	s15, [r2]
 8012c32:	f100 0208 	add.w	r2, r0, #8
 8012c36:	4592      	cmp	sl, r2
 8012c38:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012c3c:	d956      	bls.n	8012cec <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 8012c3e:	789a      	ldrb	r2, [r3, #2]
 8012c40:	edd0 6a02 	vldr	s13, [r0, #8]
 8012c44:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8012c48:	edd2 7a00 	vldr	s15, [r2]
 8012c4c:	f100 020c 	add.w	r2, r0, #12
 8012c50:	4592      	cmp	sl, r2
 8012c52:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012c56:	d949      	bls.n	8012cec <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 8012c58:	78da      	ldrb	r2, [r3, #3]
 8012c5a:	edd0 6a03 	vldr	s13, [r0, #12]
 8012c5e:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8012c62:	edd2 7a00 	vldr	s15, [r2]
 8012c66:	f100 0210 	add.w	r2, r0, #16
 8012c6a:	4592      	cmp	sl, r2
 8012c6c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012c70:	d93c      	bls.n	8012cec <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 8012c72:	791a      	ldrb	r2, [r3, #4]
 8012c74:	edd0 6a04 	vldr	s13, [r0, #16]
 8012c78:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8012c7c:	edd2 7a00 	vldr	s15, [r2]
 8012c80:	f100 0214 	add.w	r2, r0, #20
 8012c84:	4592      	cmp	sl, r2
 8012c86:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012c8a:	d92f      	bls.n	8012cec <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 8012c8c:	795a      	ldrb	r2, [r3, #5]
 8012c8e:	edd0 6a05 	vldr	s13, [r0, #20]
 8012c92:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8012c96:	edd2 7a00 	vldr	s15, [r2]
 8012c9a:	f100 0218 	add.w	r2, r0, #24
 8012c9e:	4596      	cmp	lr, r2
 8012ca0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012ca4:	d922      	bls.n	8012cec <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 8012ca6:	799a      	ldrb	r2, [r3, #6]
 8012ca8:	edd0 6a06 	vldr	s13, [r0, #24]
 8012cac:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8012cb0:	edd2 7a00 	vldr	s15, [r2]
 8012cb4:	f100 021c 	add.w	r2, r0, #28
 8012cb8:	4596      	cmp	lr, r2
 8012cba:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012cbe:	d915      	bls.n	8012cec <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 8012cc0:	79da      	ldrb	r2, [r3, #7]
 8012cc2:	edd0 6a07 	vldr	s13, [r0, #28]
 8012cc6:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8012cca:	edd2 7a00 	vldr	s15, [r2]
 8012cce:	f100 0220 	add.w	r2, r0, #32
 8012cd2:	4596      	cmp	lr, r2
 8012cd4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012cd8:	d908      	bls.n	8012cec <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 8012cda:	7a1a      	ldrb	r2, [r3, #8]
 8012cdc:	edd0 7a08 	vldr	s15, [r0, #32]
 8012ce0:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8012ce4:	edd2 6a00 	vldr	s13, [r2]
 8012ce8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012cec:	9a01      	ldr	r2, [sp, #4]
 8012cee:	1a10      	subs	r0, r2, r0
 8012cf0:	eb03 0090 	add.w	r0, r3, r0, lsr #2
 8012cf4:	1c43      	adds	r3, r0, #1
 8012cf6:	e5e9      	b.n	80128cc <forward_lite_dense_if32of32wf32_lut8+0xd8>
 8012cf8:	f813 1b01 	ldrb.w	r1, [r3], #1
 8012cfc:	eddb 7a00 	vldr	s15, [fp]
 8012d00:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8012d04:	9a07      	ldr	r2, [sp, #28]
 8012d06:	ed91 7a00 	vldr	s14, [r1]
 8012d0a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012d0e:	f813 1b01 	ldrb.w	r1, [r3], #1
 8012d12:	ecf2 7a01 	vldmia	r2!, {s15}
 8012d16:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8012d1a:	edd1 6a00 	vldr	s13, [r1]
 8012d1e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012d22:	e6fc      	b.n	8012b1e <forward_lite_dense_if32of32wf32_lut8+0x32a>
 8012d24:	eeb0 7a63 	vmov.f32	s14, s7
 8012d28:	465a      	mov	r2, fp
 8012d2a:	e7f0      	b.n	8012d0e <forward_lite_dense_if32of32wf32_lut8+0x51a>
 8012d2c:	463b      	mov	r3, r7
 8012d2e:	e76a      	b.n	8012c06 <forward_lite_dense_if32of32wf32_lut8+0x412>
 8012d30:	465a      	mov	r2, fp
 8012d32:	e674      	b.n	8012a1e <forward_lite_dense_if32of32wf32_lut8+0x22a>
 8012d34:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012d36:	1acb      	subs	r3, r1, r3
 8012d38:	461a      	mov	r2, r3
 8012d3a:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8012d3c:	ed92 7a00 	vldr	s14, [r2]
 8012d40:	ecf0 7a01 	vldmia	r0!, {s15}
 8012d44:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012d48:	ece2 7a01 	vstmia	r2!, {s15}
 8012d4c:	4291      	cmp	r1, r2
 8012d4e:	d1f5      	bne.n	8012d3c <forward_lite_dense_if32of32wf32_lut8+0x548>
 8012d50:	e7f2      	b.n	8012d38 <forward_lite_dense_if32of32wf32_lut8+0x544>
 8012d52:	bf00      	nop

08012d54 <forward_lite_nl_relu_if32of32>:
 8012d54:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8012d58:	4413      	add	r3, r2
 8012d5a:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 8012d5e:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 8012d62:	4291      	cmp	r1, r2
 8012d64:	d80f      	bhi.n	8012d86 <forward_lite_nl_relu_if32of32+0x32>
 8012d66:	f10c 0104 	add.w	r1, ip, #4
 8012d6a:	1d13      	adds	r3, r2, #4
 8012d6c:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8012d88 <forward_lite_nl_relu_if32of32+0x34>
 8012d70:	eba2 020c 	sub.w	r2, r2, ip
 8012d74:	4408      	add	r0, r1
 8012d76:	ed73 7a01 	vldmdb	r3!, {s15}
 8012d7a:	4293      	cmp	r3, r2
 8012d7c:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8012d80:	ed60 7a01 	vstmdb	r0!, {s15}
 8012d84:	d1f7      	bne.n	8012d76 <forward_lite_nl_relu_if32of32+0x22>
 8012d86:	4770      	bx	lr
 8012d88:	00000000 	.word	0x00000000

08012d8c <st_int8_copy>:
 8012d8c:	4288      	cmp	r0, r1
 8012d8e:	d023      	beq.n	8012dd8 <st_int8_copy+0x4c>
 8012d90:	b312      	cbz	r2, 8012dd8 <st_int8_copy+0x4c>
 8012d92:	4288      	cmp	r0, r1
 8012d94:	eb00 0302 	add.w	r3, r0, r2
 8012d98:	d20b      	bcs.n	8012db2 <st_int8_copy+0x26>
 8012d9a:	4299      	cmp	r1, r3
 8012d9c:	d209      	bcs.n	8012db2 <st_int8_copy+0x26>
 8012d9e:	4298      	cmp	r0, r3
 8012da0:	440a      	add	r2, r1
 8012da2:	d219      	bcs.n	8012dd8 <st_int8_copy+0x4c>
 8012da4:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 8012da8:	4298      	cmp	r0, r3
 8012daa:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8012dae:	d1f9      	bne.n	8012da4 <st_int8_copy+0x18>
 8012db0:	4770      	bx	lr
 8012db2:	2a03      	cmp	r2, #3
 8012db4:	d811      	bhi.n	8012dda <st_int8_copy+0x4e>
 8012db6:	f810 3b01 	ldrb.w	r3, [r0], #1
 8012dba:	f801 3b01 	strb.w	r3, [r1], #1
 8012dbe:	2a01      	cmp	r2, #1
 8012dc0:	d00a      	beq.n	8012dd8 <st_int8_copy+0x4c>
 8012dc2:	f810 3b01 	ldrb.w	r3, [r0], #1
 8012dc6:	f801 3b01 	strb.w	r3, [r1], #1
 8012dca:	2a02      	cmp	r2, #2
 8012dcc:	d004      	beq.n	8012dd8 <st_int8_copy+0x4c>
 8012dce:	f810 3b01 	ldrb.w	r3, [r0], #1
 8012dd2:	f801 3b01 	strb.w	r3, [r1], #1
 8012dd6:	4770      	bx	lr
 8012dd8:	4770      	bx	lr
 8012dda:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012dde:	f001 0403 	and.w	r4, r1, #3
 8012de2:	f000 0e03 	and.w	lr, r0, #3
 8012de6:	f1c4 0304 	rsb	r3, r4, #4
 8012dea:	eba2 0c03 	sub.w	ip, r2, r3
 8012dee:	f810 3b01 	ldrb.w	r3, [r0], #1
 8012df2:	f801 3b01 	strb.w	r3, [r1], #1
 8012df6:	2c03      	cmp	r4, #3
 8012df8:	f1c4 0202 	rsb	r2, r4, #2
 8012dfc:	d00e      	beq.n	8012e1c <st_int8_copy+0x90>
 8012dfe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8012e02:	f801 3b01 	strb.w	r3, [r1], #1
 8012e06:	2a00      	cmp	r2, #0
 8012e08:	dd08      	ble.n	8012e1c <st_int8_copy+0x90>
 8012e0a:	f810 3b01 	ldrb.w	r3, [r0], #1
 8012e0e:	f801 3b01 	strb.w	r3, [r1], #1
 8012e12:	b91c      	cbnz	r4, 8012e1c <st_int8_copy+0x90>
 8012e14:	f810 3b01 	ldrb.w	r3, [r0], #1
 8012e18:	f801 3b01 	strb.w	r3, [r1], #1
 8012e1c:	4574      	cmp	r4, lr
 8012e1e:	d02b      	beq.n	8012e78 <st_int8_copy+0xec>
 8012e20:	ea4f 131c 	mov.w	r3, ip, lsr #4
 8012e24:	1e5a      	subs	r2, r3, #1
 8012e26:	b153      	cbz	r3, 8012e3e <st_int8_copy+0xb2>
 8012e28:	f850 3b04 	ldr.w	r3, [r0], #4
 8012e2c:	f850 4b04 	ldr.w	r4, [r0], #4
 8012e30:	f850 5b04 	ldr.w	r5, [r0], #4
 8012e34:	f850 6b04 	ldr.w	r6, [r0], #4
 8012e38:	c178      	stmia	r1!, {r3, r4, r5, r6}
 8012e3a:	3a01      	subs	r2, #1
 8012e3c:	d2f4      	bcs.n	8012e28 <st_int8_copy+0x9c>
 8012e3e:	f01c 0f08 	tst.w	ip, #8
 8012e42:	d004      	beq.n	8012e4e <st_int8_copy+0xc2>
 8012e44:	f850 3b04 	ldr.w	r3, [r0], #4
 8012e48:	f850 4b04 	ldr.w	r4, [r0], #4
 8012e4c:	c118      	stmia	r1!, {r3, r4}
 8012e4e:	f01c 0f04 	tst.w	ip, #4
 8012e52:	d003      	beq.n	8012e5c <st_int8_copy+0xd0>
 8012e54:	f850 3b04 	ldr.w	r3, [r0], #4
 8012e58:	f841 3b04 	str.w	r3, [r1], #4
 8012e5c:	f01c 0f02 	tst.w	ip, #2
 8012e60:	d003      	beq.n	8012e6a <st_int8_copy+0xde>
 8012e62:	f830 3b02 	ldrh.w	r3, [r0], #2
 8012e66:	f821 3b02 	strh.w	r3, [r1], #2
 8012e6a:	f01c 0f01 	tst.w	ip, #1
 8012e6e:	d001      	beq.n	8012e74 <st_int8_copy+0xe8>
 8012e70:	7803      	ldrb	r3, [r0, #0]
 8012e72:	700b      	strb	r3, [r1, #0]
 8012e74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012e78:	ea4f 139c 	mov.w	r3, ip, lsr #6
 8012e7c:	f103 39ff 	add.w	r9, r3, #4294967295
 8012e80:	b183      	cbz	r3, 8012ea4 <st_int8_copy+0x118>
 8012e82:	4688      	mov	r8, r1
 8012e84:	4686      	mov	lr, r0
 8012e86:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 8012e8a:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 8012e8e:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 8012e92:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 8012e96:	f109 39ff 	add.w	r9, r9, #4294967295
 8012e9a:	4641      	mov	r1, r8
 8012e9c:	4670      	mov	r0, lr
 8012e9e:	f1b9 3fff 	cmp.w	r9, #4294967295
 8012ea2:	d1ee      	bne.n	8012e82 <st_int8_copy+0xf6>
 8012ea4:	f01c 0f20 	tst.w	ip, #32
 8012ea8:	d007      	beq.n	8012eba <st_int8_copy+0x12e>
 8012eaa:	4688      	mov	r8, r1
 8012eac:	4686      	mov	lr, r0
 8012eae:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 8012eb2:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 8012eb6:	4641      	mov	r1, r8
 8012eb8:	4670      	mov	r0, lr
 8012eba:	f01c 0f10 	tst.w	ip, #16
 8012ebe:	d001      	beq.n	8012ec4 <st_int8_copy+0x138>
 8012ec0:	c878      	ldmia	r0!, {r3, r4, r5, r6}
 8012ec2:	c178      	stmia	r1!, {r3, r4, r5, r6}
 8012ec4:	f01c 0f08 	tst.w	ip, #8
 8012ec8:	d0c1      	beq.n	8012e4e <st_int8_copy+0xc2>
 8012eca:	c818      	ldmia	r0!, {r3, r4}
 8012ecc:	c118      	stmia	r1!, {r3, r4}
 8012ece:	e7be      	b.n	8012e4e <st_int8_copy+0xc2>

08012ed0 <ai_array_to_buffer_fmt>:
 8012ed0:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8012ed4:	2b02      	cmp	r3, #2
 8012ed6:	d055      	beq.n	8012f84 <ai_array_to_buffer_fmt+0xb4>
 8012ed8:	f020 437e 	bic.w	r3, r0, #4261412864	@ 0xfe000000
 8012edc:	4a2c      	ldr	r2, [pc, #176]	@ (8012f90 <ai_array_to_buffer_fmt+0xc0>)
 8012ede:	4293      	cmp	r3, r2
 8012ee0:	d010      	beq.n	8012f04 <ai_array_to_buffer_fmt+0x34>
 8012ee2:	dc21      	bgt.n	8012f28 <ai_array_to_buffer_fmt+0x58>
 8012ee4:	4a2b      	ldr	r2, [pc, #172]	@ (8012f94 <ai_array_to_buffer_fmt+0xc4>)
 8012ee6:	4293      	cmp	r3, r2
 8012ee8:	d00c      	beq.n	8012f04 <ai_array_to_buffer_fmt+0x34>
 8012eea:	dd0f      	ble.n	8012f0c <ai_array_to_buffer_fmt+0x3c>
 8012eec:	4a2a      	ldr	r2, [pc, #168]	@ (8012f98 <ai_array_to_buffer_fmt+0xc8>)
 8012eee:	4293      	cmp	r3, r2
 8012ef0:	d008      	beq.n	8012f04 <ai_array_to_buffer_fmt+0x34>
 8012ef2:	f502 32fa 	add.w	r2, r2, #128000	@ 0x1f400
 8012ef6:	4293      	cmp	r3, r2
 8012ef8:	d004      	beq.n	8012f04 <ai_array_to_buffer_fmt+0x34>
 8012efa:	4a28      	ldr	r2, [pc, #160]	@ (8012f9c <ai_array_to_buffer_fmt+0xcc>)
 8012efc:	4293      	cmp	r3, r2
 8012efe:	bf0c      	ite	eq
 8012f00:	4613      	moveq	r3, r2
 8012f02:	2340      	movne	r3, #64	@ 0x40
 8012f04:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8012f08:	4318      	orrs	r0, r3
 8012f0a:	4770      	bx	lr
 8012f0c:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8012f10:	4293      	cmp	r3, r2
 8012f12:	d0f7      	beq.n	8012f04 <ai_array_to_buffer_fmt+0x34>
 8012f14:	dd2c      	ble.n	8012f70 <ai_array_to_buffer_fmt+0xa0>
 8012f16:	4a22      	ldr	r2, [pc, #136]	@ (8012fa0 <ai_array_to_buffer_fmt+0xd0>)
 8012f18:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8012f1c:	4293      	cmp	r3, r2
 8012f1e:	bf0c      	ite	eq
 8012f20:	4613      	moveq	r3, r2
 8012f22:	2340      	movne	r3, #64	@ 0x40
 8012f24:	4318      	orrs	r0, r3
 8012f26:	4770      	bx	lr
 8012f28:	4a1e      	ldr	r2, [pc, #120]	@ (8012fa4 <ai_array_to_buffer_fmt+0xd4>)
 8012f2a:	4293      	cmp	r3, r2
 8012f2c:	d0ea      	beq.n	8012f04 <ai_array_to_buffer_fmt+0x34>
 8012f2e:	dd10      	ble.n	8012f52 <ai_array_to_buffer_fmt+0x82>
 8012f30:	4a1d      	ldr	r2, [pc, #116]	@ (8012fa8 <ai_array_to_buffer_fmt+0xd8>)
 8012f32:	4293      	cmp	r3, r2
 8012f34:	d0e6      	beq.n	8012f04 <ai_array_to_buffer_fmt+0x34>
 8012f36:	f202 72f1 	addw	r2, r2, #2033	@ 0x7f1
 8012f3a:	4293      	cmp	r3, r2
 8012f3c:	d0e2      	beq.n	8012f04 <ai_array_to_buffer_fmt+0x34>
 8012f3e:	f5a2 6200 	sub.w	r2, r2, #2048	@ 0x800
 8012f42:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8012f46:	4293      	cmp	r3, r2
 8012f48:	bf0c      	ite	eq
 8012f4a:	4613      	moveq	r3, r2
 8012f4c:	2340      	movne	r3, #64	@ 0x40
 8012f4e:	4318      	orrs	r0, r3
 8012f50:	4770      	bx	lr
 8012f52:	f2a2 3287 	subw	r2, r2, #903	@ 0x387
 8012f56:	4293      	cmp	r3, r2
 8012f58:	d0d4      	beq.n	8012f04 <ai_array_to_buffer_fmt+0x34>
 8012f5a:	f502 7260 	add.w	r2, r2, #896	@ 0x380
 8012f5e:	4293      	cmp	r3, r2
 8012f60:	d0d0      	beq.n	8012f04 <ai_array_to_buffer_fmt+0x34>
 8012f62:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8012f66:	4293      	cmp	r3, r2
 8012f68:	bf0c      	ite	eq
 8012f6a:	4613      	moveq	r3, r2
 8012f6c:	2340      	movne	r3, #64	@ 0x40
 8012f6e:	e7c9      	b.n	8012f04 <ai_array_to_buffer_fmt+0x34>
 8012f70:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8012f74:	4293      	cmp	r3, r2
 8012f76:	d0c5      	beq.n	8012f04 <ai_array_to_buffer_fmt+0x34>
 8012f78:	3280      	adds	r2, #128	@ 0x80
 8012f7a:	4293      	cmp	r3, r2
 8012f7c:	bf0c      	ite	eq
 8012f7e:	4613      	moveq	r3, r2
 8012f80:	2340      	movne	r3, #64	@ 0x40
 8012f82:	e7bf      	b.n	8012f04 <ai_array_to_buffer_fmt+0x34>
 8012f84:	4b09      	ldr	r3, [pc, #36]	@ (8012fac <ai_array_to_buffer_fmt+0xdc>)
 8012f86:	4003      	ands	r3, r0
 8012f88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8012f8c:	e7ba      	b.n	8012f04 <ai_array_to_buffer_fmt+0x34>
 8012f8e:	bf00      	nop
 8012f90:	00821040 	.word	0x00821040
 8012f94:	00040840 	.word	0x00040840
 8012f98:	00041040 	.word	0x00041040
 8012f9c:	0004084f 	.word	0x0004084f
 8012fa0:	00040447 	.word	0x00040447
 8012fa4:	00840447 	.word	0x00840447
 8012fa8:	0084084f 	.word	0x0084084f
 8012fac:	00803fff 	.word	0x00803fff

08012fb0 <ai_array_get_byte_size>:
 8012fb0:	b321      	cbz	r1, 8012ffc <ai_array_get_byte_size+0x4c>
 8012fb2:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8012fb6:	f46f 7288 	mvn.w	r2, #272	@ 0x110
 8012fba:	f3c0 5c41 	ubfx	ip, r0, #21, #2
 8012fbe:	fb03 f101 	mul.w	r1, r3, r1
 8012fc2:	b500      	push	{lr}
 8012fc4:	f3c0 4e43 	ubfx	lr, r0, #17, #4
 8012fc8:	3107      	adds	r1, #7
 8012fca:	11c0      	asrs	r0, r0, #7
 8012fcc:	fa42 f20e 	asr.w	r2, r2, lr
 8012fd0:	f021 0107 	bic.w	r1, r1, #7
 8012fd4:	07d2      	lsls	r2, r2, #31
 8012fd6:	fa21 f10c 	lsr.w	r1, r1, ip
 8012fda:	d505      	bpl.n	8012fe8 <ai_array_get_byte_size+0x38>
 8012fdc:	2300      	movs	r3, #0
 8012fde:	3107      	adds	r1, #7
 8012fe0:	4419      	add	r1, r3
 8012fe2:	08c8      	lsrs	r0, r1, #3
 8012fe4:	f85d fb04 	ldr.w	pc, [sp], #4
 8012fe8:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8012fec:	3107      	adds	r1, #7
 8012fee:	fa40 f00c 	asr.w	r0, r0, ip
 8012ff2:	4083      	lsls	r3, r0
 8012ff4:	4419      	add	r1, r3
 8012ff6:	08c8      	lsrs	r0, r1, #3
 8012ff8:	f85d fb04 	ldr.w	pc, [sp], #4
 8012ffc:	4608      	mov	r0, r1
 8012ffe:	4770      	bx	lr

08013000 <ai_version_get>:
 8013000:	0212      	lsls	r2, r2, #8
 8013002:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8013006:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 801300a:	4770      	bx	lr

0801300c <lite_bilinear_if32of32_kernel>:
 801300c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801300e:	9d05      	ldr	r5, [sp, #20]
 8013010:	b352      	cbz	r2, 8013068 <lite_bilinear_if32of32_kernel+0x5c>
 8013012:	f04f 0c00 	mov.w	ip, #0
 8013016:	edd5 4a02 	vldr	s9, [r5, #8]
 801301a:	f10c 0c01 	add.w	ip, ip, #1
 801301e:	ed95 5a01 	vldr	s10, [r5, #4]
 8013022:	ed90 6a00 	vldr	s12, [r0]
 8013026:	4562      	cmp	r2, ip
 8013028:	edd5 5a00 	vldr	s11, [r5]
 801302c:	edd5 6a03 	vldr	s13, [r5, #12]
 8013030:	e9d3 4600 	ldrd	r4, r6, [r3]
 8013034:	eb00 0786 	add.w	r7, r0, r6, lsl #2
 8013038:	eb00 0e84 	add.w	lr, r0, r4, lsl #2
 801303c:	4434      	add	r4, r6
 801303e:	edd7 7a00 	vldr	s15, [r7]
 8013042:	ed9e 7a00 	vldr	s14, [lr]
 8013046:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 801304a:	ee67 7aa4 	vmul.f32	s15, s15, s9
 801304e:	f100 0004 	add.w	r0, r0, #4
 8013052:	eee5 7a07 	vfma.f32	s15, s10, s14
 8013056:	ed94 7a00 	vldr	s14, [r4]
 801305a:	eee5 7a86 	vfma.f32	s15, s11, s12
 801305e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8013062:	ece1 7a01 	vstmia	r1!, {s15}
 8013066:	d1d6      	bne.n	8013016 <lite_bilinear_if32of32_kernel+0xa>
 8013068:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801306a:	bf00      	nop

0801306c <lite_bilinear_is8os8_kernel>:
 801306c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013070:	9c07      	ldr	r4, [sp, #28]
 8013072:	2a00      	cmp	r2, #0
 8013074:	d04b      	beq.n	801310e <lite_bilinear_is8os8_kernel+0xa2>
 8013076:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 801307a:	eb01 0e02 	add.w	lr, r1, r2
 801307e:	f100 3cff 	add.w	ip, r0, #4294967295
 8013082:	f1c0 0501 	rsb	r5, r0, #1
 8013086:	685f      	ldr	r7, [r3, #4]
 8013088:	eb05 060c 	add.w	r6, r5, ip
 801308c:	681a      	ldr	r2, [r3, #0]
 801308e:	eb00 0807 	add.w	r8, r0, r7
 8013092:	edd4 3a02 	vldr	s7, [r4, #8]
 8013096:	4402      	add	r2, r0
 8013098:	ed94 4a01 	vldr	s8, [r4, #4]
 801309c:	f918 8006 	ldrsb.w	r8, [r8, r6]
 80130a0:	f91c 9f01 	ldrsb.w	r9, [ip, #1]!
 80130a4:	ee07 8a90 	vmov	s15, r8
 80130a8:	f912 8006 	ldrsb.w	r8, [r2, r6]
 80130ac:	ee06 9a90 	vmov	s13, r9
 80130b0:	443a      	add	r2, r7
 80130b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80130b6:	ee06 8a10 	vmov	s12, r8
 80130ba:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80130be:	edd4 4a00 	vldr	s9, [r4]
 80130c2:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80130c6:	5792      	ldrsb	r2, [r2, r6]
 80130c8:	ee67 7aa3 	vmul.f32	s15, s15, s7
 80130cc:	ed94 5a03 	vldr	s10, [r4, #12]
 80130d0:	ee07 2a10 	vmov	s14, r2
 80130d4:	eee4 7a06 	vfma.f32	s15, s8, s12
 80130d8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80130dc:	eee4 7aa6 	vfma.f32	s15, s9, s13
 80130e0:	eee5 7a07 	vfma.f32	s15, s10, s14
 80130e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80130e8:	ee37 7aa5 	vadd.f32	s14, s15, s11
 80130ec:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80130f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130f4:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80130f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80130fc:	dd09      	ble.n	8013112 <lite_bilinear_is8os8_kernel+0xa6>
 80130fe:	ee17 2a10 	vmov	r2, s14
 8013102:	f302 0207 	ssat	r2, #8, r2
 8013106:	f801 2b01 	strb.w	r2, [r1], #1
 801310a:	4571      	cmp	r1, lr
 801310c:	d1bb      	bne.n	8013086 <lite_bilinear_is8os8_kernel+0x1a>
 801310e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013112:	ee17 2a90 	vmov	r2, s15
 8013116:	f302 0207 	ssat	r2, #8, r2
 801311a:	f801 2b01 	strb.w	r2, [r1], #1
 801311e:	4571      	cmp	r1, lr
 8013120:	d1b1      	bne.n	8013086 <lite_bilinear_is8os8_kernel+0x1a>
 8013122:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013126:	bf00      	nop

08013128 <lite_bilinear_iu8ou8_kernel>:
 8013128:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801312c:	9c07      	ldr	r4, [sp, #28]
 801312e:	2a00      	cmp	r2, #0
 8013130:	d042      	beq.n	80131b8 <lite_bilinear_iu8ou8_kernel+0x90>
 8013132:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 8013136:	eb01 0e02 	add.w	lr, r1, r2
 801313a:	f100 3cff 	add.w	ip, r0, #4294967295
 801313e:	f1c0 0501 	rsb	r5, r0, #1
 8013142:	eb05 060c 	add.w	r6, r5, ip
 8013146:	f81c 2f01 	ldrb.w	r2, [ip, #1]!
 801314a:	eef0 7a44 	vmov.f32	s15, s8
 801314e:	edd4 6a00 	vldr	s13, [r4]
 8013152:	ee07 2a10 	vmov	s14, r2
 8013156:	681a      	ldr	r2, [r3, #0]
 8013158:	685f      	ldr	r7, [r3, #4]
 801315a:	4402      	add	r2, r0
 801315c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8013160:	eb00 0807 	add.w	r8, r0, r7
 8013164:	edd4 4a01 	vldr	s9, [r4, #4]
 8013168:	f812 9006 	ldrb.w	r9, [r2, r6]
 801316c:	443a      	add	r2, r7
 801316e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8013172:	f818 8006 	ldrb.w	r8, [r8, r6]
 8013176:	ee06 9a10 	vmov	s12, r9
 801317a:	ed94 5a02 	vldr	s10, [r4, #8]
 801317e:	ee06 8a90 	vmov	s13, r8
 8013182:	5d92      	ldrb	r2, [r2, r6]
 8013184:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8013188:	edd4 5a03 	vldr	s11, [r4, #12]
 801318c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8013190:	ee07 2a10 	vmov	s14, r2
 8013194:	eee4 7a86 	vfma.f32	s15, s9, s12
 8013198:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801319c:	eee5 7a26 	vfma.f32	s15, s10, s13
 80131a0:	eee5 7a87 	vfma.f32	s15, s11, s14
 80131a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80131a8:	ee17 2a90 	vmov	r2, s15
 80131ac:	f382 0208 	usat	r2, #8, r2
 80131b0:	f801 2b01 	strb.w	r2, [r1], #1
 80131b4:	4571      	cmp	r1, lr
 80131b6:	d1c4      	bne.n	8013142 <lite_bilinear_iu8ou8_kernel+0x1a>
 80131b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080131bc <lite_bilinear_is16os16_kernel>:
 80131bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80131c0:	9d07      	ldr	r5, [sp, #28]
 80131c2:	2a00      	cmp	r2, #0
 80131c4:	d04e      	beq.n	8013264 <lite_bilinear_is16os16_kernel+0xa8>
 80131c6:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 80131ca:	f1a0 0e02 	sub.w	lr, r0, #2
 80131ce:	f04f 0c00 	mov.w	ip, #0
 80131d2:	ed95 7a02 	vldr	s14, [r5, #8]
 80131d6:	ed95 4a01 	vldr	s8, [r5, #4]
 80131da:	f93e 9f02 	ldrsh.w	r9, [lr, #2]!
 80131de:	edd5 4a00 	vldr	s9, [r5]
 80131e2:	ee06 9a90 	vmov	s13, r9
 80131e6:	ed95 5a03 	vldr	s10, [r5, #12]
 80131ea:	e9d3 4600 	ldrd	r4, r6, [r3]
 80131ee:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80131f2:	eb06 080c 	add.w	r8, r6, ip
 80131f6:	eb04 070c 	add.w	r7, r4, ip
 80131fa:	4434      	add	r4, r6
 80131fc:	f930 6018 	ldrsh.w	r6, [r0, r8, lsl #1]
 8013200:	4464      	add	r4, ip
 8013202:	ee07 6a90 	vmov	s15, r6
 8013206:	f930 6017 	ldrsh.w	r6, [r0, r7, lsl #1]
 801320a:	f930 4014 	ldrsh.w	r4, [r0, r4, lsl #1]
 801320e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013212:	ee06 6a10 	vmov	s12, r6
 8013216:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 801321a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801321e:	ee07 4a10 	vmov	s14, r4
 8013222:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013226:	eee4 7a06 	vfma.f32	s15, s8, s12
 801322a:	eee4 7aa6 	vfma.f32	s15, s9, s13
 801322e:	eee5 7a07 	vfma.f32	s15, s10, s14
 8013232:	ee37 7aa5 	vadd.f32	s14, s15, s11
 8013236:	ee77 6ae5 	vsub.f32	s13, s15, s11
 801323a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801323e:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8013242:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8013246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801324a:	bfcc      	ite	gt
 801324c:	ee17 4a10 	vmovgt	r4, s14
 8013250:	ee16 4a90 	vmovle	r4, s13
 8013254:	f304 040f 	ssat	r4, #16, r4
 8013258:	f10c 0c01 	add.w	ip, ip, #1
 801325c:	f821 4b02 	strh.w	r4, [r1], #2
 8013260:	4562      	cmp	r2, ip
 8013262:	d1b6      	bne.n	80131d2 <lite_bilinear_is16os16_kernel+0x16>
 8013264:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08013268 <lite_bilinear_iu16ou16_kernel>:
 8013268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801326c:	9d06      	ldr	r5, [sp, #24]
 801326e:	2a00      	cmp	r2, #0
 8013270:	d042      	beq.n	80132f8 <lite_bilinear_iu16ou16_kernel+0x90>
 8013272:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 8013276:	1e86      	subs	r6, r0, #2
 8013278:	f04f 0e00 	mov.w	lr, #0
 801327c:	f836 4f02 	ldrh.w	r4, [r6, #2]!
 8013280:	eef0 7a44 	vmov.f32	s15, s8
 8013284:	edd5 6a00 	vldr	s13, [r5]
 8013288:	ee07 4a10 	vmov	s14, r4
 801328c:	681c      	ldr	r4, [r3, #0]
 801328e:	685f      	ldr	r7, [r3, #4]
 8013290:	eb04 080e 	add.w	r8, r4, lr
 8013294:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8013298:	eb07 0c0e 	add.w	ip, r7, lr
 801329c:	edd5 4a01 	vldr	s9, [r5, #4]
 80132a0:	f830 8018 	ldrh.w	r8, [r0, r8, lsl #1]
 80132a4:	443c      	add	r4, r7
 80132a6:	eee6 7a87 	vfma.f32	s15, s13, s14
 80132aa:	f830 701c 	ldrh.w	r7, [r0, ip, lsl #1]
 80132ae:	ee06 8a10 	vmov	s12, r8
 80132b2:	4474      	add	r4, lr
 80132b4:	ee06 7a90 	vmov	s13, r7
 80132b8:	ed95 5a02 	vldr	s10, [r5, #8]
 80132bc:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80132c0:	f830 4014 	ldrh.w	r4, [r0, r4, lsl #1]
 80132c4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80132c8:	edd5 5a03 	vldr	s11, [r5, #12]
 80132cc:	ee07 4a10 	vmov	s14, r4
 80132d0:	eee4 7a86 	vfma.f32	s15, s9, s12
 80132d4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80132d8:	eee5 7a26 	vfma.f32	s15, s10, s13
 80132dc:	eee5 7a87 	vfma.f32	s15, s11, s14
 80132e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80132e4:	ee17 ca90 	vmov	ip, s15
 80132e8:	f38c 0c10 	usat	ip, #16, ip
 80132ec:	f10e 0e01 	add.w	lr, lr, #1
 80132f0:	f821 cb02 	strh.w	ip, [r1], #2
 80132f4:	4572      	cmp	r2, lr
 80132f6:	d1c1      	bne.n	801327c <lite_bilinear_iu16ou16_kernel+0x14>
 80132f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080132fc <malloc>:
 80132fc:	4b02      	ldr	r3, [pc, #8]	@ (8013308 <malloc+0xc>)
 80132fe:	4601      	mov	r1, r0
 8013300:	6818      	ldr	r0, [r3, #0]
 8013302:	f000 b825 	b.w	8013350 <_malloc_r>
 8013306:	bf00      	nop
 8013308:	20000810 	.word	0x20000810

0801330c <sbrk_aligned>:
 801330c:	b570      	push	{r4, r5, r6, lr}
 801330e:	4e0f      	ldr	r6, [pc, #60]	@ (801334c <sbrk_aligned+0x40>)
 8013310:	460c      	mov	r4, r1
 8013312:	6831      	ldr	r1, [r6, #0]
 8013314:	4605      	mov	r5, r0
 8013316:	b911      	cbnz	r1, 801331e <sbrk_aligned+0x12>
 8013318:	f000 ff48 	bl	80141ac <_sbrk_r>
 801331c:	6030      	str	r0, [r6, #0]
 801331e:	4621      	mov	r1, r4
 8013320:	4628      	mov	r0, r5
 8013322:	f000 ff43 	bl	80141ac <_sbrk_r>
 8013326:	1c43      	adds	r3, r0, #1
 8013328:	d103      	bne.n	8013332 <sbrk_aligned+0x26>
 801332a:	f04f 34ff 	mov.w	r4, #4294967295
 801332e:	4620      	mov	r0, r4
 8013330:	bd70      	pop	{r4, r5, r6, pc}
 8013332:	1cc4      	adds	r4, r0, #3
 8013334:	f024 0403 	bic.w	r4, r4, #3
 8013338:	42a0      	cmp	r0, r4
 801333a:	d0f8      	beq.n	801332e <sbrk_aligned+0x22>
 801333c:	1a21      	subs	r1, r4, r0
 801333e:	4628      	mov	r0, r5
 8013340:	f000 ff34 	bl	80141ac <_sbrk_r>
 8013344:	3001      	adds	r0, #1
 8013346:	d1f2      	bne.n	801332e <sbrk_aligned+0x22>
 8013348:	e7ef      	b.n	801332a <sbrk_aligned+0x1e>
 801334a:	bf00      	nop
 801334c:	2001eb00 	.word	0x2001eb00

08013350 <_malloc_r>:
 8013350:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013354:	1ccd      	adds	r5, r1, #3
 8013356:	f025 0503 	bic.w	r5, r5, #3
 801335a:	3508      	adds	r5, #8
 801335c:	2d0c      	cmp	r5, #12
 801335e:	bf38      	it	cc
 8013360:	250c      	movcc	r5, #12
 8013362:	2d00      	cmp	r5, #0
 8013364:	4606      	mov	r6, r0
 8013366:	db01      	blt.n	801336c <_malloc_r+0x1c>
 8013368:	42a9      	cmp	r1, r5
 801336a:	d904      	bls.n	8013376 <_malloc_r+0x26>
 801336c:	230c      	movs	r3, #12
 801336e:	6033      	str	r3, [r6, #0]
 8013370:	2000      	movs	r0, #0
 8013372:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013376:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801344c <_malloc_r+0xfc>
 801337a:	f000 f869 	bl	8013450 <__malloc_lock>
 801337e:	f8d8 3000 	ldr.w	r3, [r8]
 8013382:	461c      	mov	r4, r3
 8013384:	bb44      	cbnz	r4, 80133d8 <_malloc_r+0x88>
 8013386:	4629      	mov	r1, r5
 8013388:	4630      	mov	r0, r6
 801338a:	f7ff ffbf 	bl	801330c <sbrk_aligned>
 801338e:	1c43      	adds	r3, r0, #1
 8013390:	4604      	mov	r4, r0
 8013392:	d158      	bne.n	8013446 <_malloc_r+0xf6>
 8013394:	f8d8 4000 	ldr.w	r4, [r8]
 8013398:	4627      	mov	r7, r4
 801339a:	2f00      	cmp	r7, #0
 801339c:	d143      	bne.n	8013426 <_malloc_r+0xd6>
 801339e:	2c00      	cmp	r4, #0
 80133a0:	d04b      	beq.n	801343a <_malloc_r+0xea>
 80133a2:	6823      	ldr	r3, [r4, #0]
 80133a4:	4639      	mov	r1, r7
 80133a6:	4630      	mov	r0, r6
 80133a8:	eb04 0903 	add.w	r9, r4, r3
 80133ac:	f000 fefe 	bl	80141ac <_sbrk_r>
 80133b0:	4581      	cmp	r9, r0
 80133b2:	d142      	bne.n	801343a <_malloc_r+0xea>
 80133b4:	6821      	ldr	r1, [r4, #0]
 80133b6:	1a6d      	subs	r5, r5, r1
 80133b8:	4629      	mov	r1, r5
 80133ba:	4630      	mov	r0, r6
 80133bc:	f7ff ffa6 	bl	801330c <sbrk_aligned>
 80133c0:	3001      	adds	r0, #1
 80133c2:	d03a      	beq.n	801343a <_malloc_r+0xea>
 80133c4:	6823      	ldr	r3, [r4, #0]
 80133c6:	442b      	add	r3, r5
 80133c8:	6023      	str	r3, [r4, #0]
 80133ca:	f8d8 3000 	ldr.w	r3, [r8]
 80133ce:	685a      	ldr	r2, [r3, #4]
 80133d0:	bb62      	cbnz	r2, 801342c <_malloc_r+0xdc>
 80133d2:	f8c8 7000 	str.w	r7, [r8]
 80133d6:	e00f      	b.n	80133f8 <_malloc_r+0xa8>
 80133d8:	6822      	ldr	r2, [r4, #0]
 80133da:	1b52      	subs	r2, r2, r5
 80133dc:	d420      	bmi.n	8013420 <_malloc_r+0xd0>
 80133de:	2a0b      	cmp	r2, #11
 80133e0:	d917      	bls.n	8013412 <_malloc_r+0xc2>
 80133e2:	1961      	adds	r1, r4, r5
 80133e4:	42a3      	cmp	r3, r4
 80133e6:	6025      	str	r5, [r4, #0]
 80133e8:	bf18      	it	ne
 80133ea:	6059      	strne	r1, [r3, #4]
 80133ec:	6863      	ldr	r3, [r4, #4]
 80133ee:	bf08      	it	eq
 80133f0:	f8c8 1000 	streq.w	r1, [r8]
 80133f4:	5162      	str	r2, [r4, r5]
 80133f6:	604b      	str	r3, [r1, #4]
 80133f8:	4630      	mov	r0, r6
 80133fa:	f000 f82f 	bl	801345c <__malloc_unlock>
 80133fe:	f104 000b 	add.w	r0, r4, #11
 8013402:	1d23      	adds	r3, r4, #4
 8013404:	f020 0007 	bic.w	r0, r0, #7
 8013408:	1ac2      	subs	r2, r0, r3
 801340a:	bf1c      	itt	ne
 801340c:	1a1b      	subne	r3, r3, r0
 801340e:	50a3      	strne	r3, [r4, r2]
 8013410:	e7af      	b.n	8013372 <_malloc_r+0x22>
 8013412:	6862      	ldr	r2, [r4, #4]
 8013414:	42a3      	cmp	r3, r4
 8013416:	bf0c      	ite	eq
 8013418:	f8c8 2000 	streq.w	r2, [r8]
 801341c:	605a      	strne	r2, [r3, #4]
 801341e:	e7eb      	b.n	80133f8 <_malloc_r+0xa8>
 8013420:	4623      	mov	r3, r4
 8013422:	6864      	ldr	r4, [r4, #4]
 8013424:	e7ae      	b.n	8013384 <_malloc_r+0x34>
 8013426:	463c      	mov	r4, r7
 8013428:	687f      	ldr	r7, [r7, #4]
 801342a:	e7b6      	b.n	801339a <_malloc_r+0x4a>
 801342c:	461a      	mov	r2, r3
 801342e:	685b      	ldr	r3, [r3, #4]
 8013430:	42a3      	cmp	r3, r4
 8013432:	d1fb      	bne.n	801342c <_malloc_r+0xdc>
 8013434:	2300      	movs	r3, #0
 8013436:	6053      	str	r3, [r2, #4]
 8013438:	e7de      	b.n	80133f8 <_malloc_r+0xa8>
 801343a:	230c      	movs	r3, #12
 801343c:	6033      	str	r3, [r6, #0]
 801343e:	4630      	mov	r0, r6
 8013440:	f000 f80c 	bl	801345c <__malloc_unlock>
 8013444:	e794      	b.n	8013370 <_malloc_r+0x20>
 8013446:	6005      	str	r5, [r0, #0]
 8013448:	e7d6      	b.n	80133f8 <_malloc_r+0xa8>
 801344a:	bf00      	nop
 801344c:	2001eb04 	.word	0x2001eb04

08013450 <__malloc_lock>:
 8013450:	4801      	ldr	r0, [pc, #4]	@ (8013458 <__malloc_lock+0x8>)
 8013452:	f000 bef8 	b.w	8014246 <__retarget_lock_acquire_recursive>
 8013456:	bf00      	nop
 8013458:	2001ec48 	.word	0x2001ec48

0801345c <__malloc_unlock>:
 801345c:	4801      	ldr	r0, [pc, #4]	@ (8013464 <__malloc_unlock+0x8>)
 801345e:	f000 bef3 	b.w	8014248 <__retarget_lock_release_recursive>
 8013462:	bf00      	nop
 8013464:	2001ec48 	.word	0x2001ec48

08013468 <__cvt>:
 8013468:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801346c:	ec57 6b10 	vmov	r6, r7, d0
 8013470:	2f00      	cmp	r7, #0
 8013472:	460c      	mov	r4, r1
 8013474:	4619      	mov	r1, r3
 8013476:	463b      	mov	r3, r7
 8013478:	bfbb      	ittet	lt
 801347a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801347e:	461f      	movlt	r7, r3
 8013480:	2300      	movge	r3, #0
 8013482:	232d      	movlt	r3, #45	@ 0x2d
 8013484:	700b      	strb	r3, [r1, #0]
 8013486:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013488:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 801348c:	4691      	mov	r9, r2
 801348e:	f023 0820 	bic.w	r8, r3, #32
 8013492:	bfbc      	itt	lt
 8013494:	4632      	movlt	r2, r6
 8013496:	4616      	movlt	r6, r2
 8013498:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801349c:	d005      	beq.n	80134aa <__cvt+0x42>
 801349e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80134a2:	d100      	bne.n	80134a6 <__cvt+0x3e>
 80134a4:	3401      	adds	r4, #1
 80134a6:	2102      	movs	r1, #2
 80134a8:	e000      	b.n	80134ac <__cvt+0x44>
 80134aa:	2103      	movs	r1, #3
 80134ac:	ab03      	add	r3, sp, #12
 80134ae:	9301      	str	r3, [sp, #4]
 80134b0:	ab02      	add	r3, sp, #8
 80134b2:	9300      	str	r3, [sp, #0]
 80134b4:	ec47 6b10 	vmov	d0, r6, r7
 80134b8:	4653      	mov	r3, sl
 80134ba:	4622      	mov	r2, r4
 80134bc:	f000 ff5c 	bl	8014378 <_dtoa_r>
 80134c0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80134c4:	4605      	mov	r5, r0
 80134c6:	d119      	bne.n	80134fc <__cvt+0x94>
 80134c8:	f019 0f01 	tst.w	r9, #1
 80134cc:	d00e      	beq.n	80134ec <__cvt+0x84>
 80134ce:	eb00 0904 	add.w	r9, r0, r4
 80134d2:	2200      	movs	r2, #0
 80134d4:	2300      	movs	r3, #0
 80134d6:	4630      	mov	r0, r6
 80134d8:	4639      	mov	r1, r7
 80134da:	f7ed fb75 	bl	8000bc8 <__aeabi_dcmpeq>
 80134de:	b108      	cbz	r0, 80134e4 <__cvt+0x7c>
 80134e0:	f8cd 900c 	str.w	r9, [sp, #12]
 80134e4:	2230      	movs	r2, #48	@ 0x30
 80134e6:	9b03      	ldr	r3, [sp, #12]
 80134e8:	454b      	cmp	r3, r9
 80134ea:	d31e      	bcc.n	801352a <__cvt+0xc2>
 80134ec:	9b03      	ldr	r3, [sp, #12]
 80134ee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80134f0:	1b5b      	subs	r3, r3, r5
 80134f2:	4628      	mov	r0, r5
 80134f4:	6013      	str	r3, [r2, #0]
 80134f6:	b004      	add	sp, #16
 80134f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80134fc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8013500:	eb00 0904 	add.w	r9, r0, r4
 8013504:	d1e5      	bne.n	80134d2 <__cvt+0x6a>
 8013506:	7803      	ldrb	r3, [r0, #0]
 8013508:	2b30      	cmp	r3, #48	@ 0x30
 801350a:	d10a      	bne.n	8013522 <__cvt+0xba>
 801350c:	2200      	movs	r2, #0
 801350e:	2300      	movs	r3, #0
 8013510:	4630      	mov	r0, r6
 8013512:	4639      	mov	r1, r7
 8013514:	f7ed fb58 	bl	8000bc8 <__aeabi_dcmpeq>
 8013518:	b918      	cbnz	r0, 8013522 <__cvt+0xba>
 801351a:	f1c4 0401 	rsb	r4, r4, #1
 801351e:	f8ca 4000 	str.w	r4, [sl]
 8013522:	f8da 3000 	ldr.w	r3, [sl]
 8013526:	4499      	add	r9, r3
 8013528:	e7d3      	b.n	80134d2 <__cvt+0x6a>
 801352a:	1c59      	adds	r1, r3, #1
 801352c:	9103      	str	r1, [sp, #12]
 801352e:	701a      	strb	r2, [r3, #0]
 8013530:	e7d9      	b.n	80134e6 <__cvt+0x7e>

08013532 <__exponent>:
 8013532:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013534:	2900      	cmp	r1, #0
 8013536:	bfba      	itte	lt
 8013538:	4249      	neglt	r1, r1
 801353a:	232d      	movlt	r3, #45	@ 0x2d
 801353c:	232b      	movge	r3, #43	@ 0x2b
 801353e:	2909      	cmp	r1, #9
 8013540:	7002      	strb	r2, [r0, #0]
 8013542:	7043      	strb	r3, [r0, #1]
 8013544:	dd29      	ble.n	801359a <__exponent+0x68>
 8013546:	f10d 0307 	add.w	r3, sp, #7
 801354a:	461d      	mov	r5, r3
 801354c:	270a      	movs	r7, #10
 801354e:	461a      	mov	r2, r3
 8013550:	fbb1 f6f7 	udiv	r6, r1, r7
 8013554:	fb07 1416 	mls	r4, r7, r6, r1
 8013558:	3430      	adds	r4, #48	@ 0x30
 801355a:	f802 4c01 	strb.w	r4, [r2, #-1]
 801355e:	460c      	mov	r4, r1
 8013560:	2c63      	cmp	r4, #99	@ 0x63
 8013562:	f103 33ff 	add.w	r3, r3, #4294967295
 8013566:	4631      	mov	r1, r6
 8013568:	dcf1      	bgt.n	801354e <__exponent+0x1c>
 801356a:	3130      	adds	r1, #48	@ 0x30
 801356c:	1e94      	subs	r4, r2, #2
 801356e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8013572:	1c41      	adds	r1, r0, #1
 8013574:	4623      	mov	r3, r4
 8013576:	42ab      	cmp	r3, r5
 8013578:	d30a      	bcc.n	8013590 <__exponent+0x5e>
 801357a:	f10d 0309 	add.w	r3, sp, #9
 801357e:	1a9b      	subs	r3, r3, r2
 8013580:	42ac      	cmp	r4, r5
 8013582:	bf88      	it	hi
 8013584:	2300      	movhi	r3, #0
 8013586:	3302      	adds	r3, #2
 8013588:	4403      	add	r3, r0
 801358a:	1a18      	subs	r0, r3, r0
 801358c:	b003      	add	sp, #12
 801358e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013590:	f813 6b01 	ldrb.w	r6, [r3], #1
 8013594:	f801 6f01 	strb.w	r6, [r1, #1]!
 8013598:	e7ed      	b.n	8013576 <__exponent+0x44>
 801359a:	2330      	movs	r3, #48	@ 0x30
 801359c:	3130      	adds	r1, #48	@ 0x30
 801359e:	7083      	strb	r3, [r0, #2]
 80135a0:	70c1      	strb	r1, [r0, #3]
 80135a2:	1d03      	adds	r3, r0, #4
 80135a4:	e7f1      	b.n	801358a <__exponent+0x58>
	...

080135a8 <_printf_float>:
 80135a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135ac:	b08d      	sub	sp, #52	@ 0x34
 80135ae:	460c      	mov	r4, r1
 80135b0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80135b4:	4616      	mov	r6, r2
 80135b6:	461f      	mov	r7, r3
 80135b8:	4605      	mov	r5, r0
 80135ba:	f000 fdbf 	bl	801413c <_localeconv_r>
 80135be:	6803      	ldr	r3, [r0, #0]
 80135c0:	9304      	str	r3, [sp, #16]
 80135c2:	4618      	mov	r0, r3
 80135c4:	f7ec fed4 	bl	8000370 <strlen>
 80135c8:	2300      	movs	r3, #0
 80135ca:	930a      	str	r3, [sp, #40]	@ 0x28
 80135cc:	f8d8 3000 	ldr.w	r3, [r8]
 80135d0:	9005      	str	r0, [sp, #20]
 80135d2:	3307      	adds	r3, #7
 80135d4:	f023 0307 	bic.w	r3, r3, #7
 80135d8:	f103 0208 	add.w	r2, r3, #8
 80135dc:	f894 a018 	ldrb.w	sl, [r4, #24]
 80135e0:	f8d4 b000 	ldr.w	fp, [r4]
 80135e4:	f8c8 2000 	str.w	r2, [r8]
 80135e8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80135ec:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80135f0:	9307      	str	r3, [sp, #28]
 80135f2:	f8cd 8018 	str.w	r8, [sp, #24]
 80135f6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80135fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80135fe:	4b9c      	ldr	r3, [pc, #624]	@ (8013870 <_printf_float+0x2c8>)
 8013600:	f04f 32ff 	mov.w	r2, #4294967295
 8013604:	f7ed fb12 	bl	8000c2c <__aeabi_dcmpun>
 8013608:	bb70      	cbnz	r0, 8013668 <_printf_float+0xc0>
 801360a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801360e:	4b98      	ldr	r3, [pc, #608]	@ (8013870 <_printf_float+0x2c8>)
 8013610:	f04f 32ff 	mov.w	r2, #4294967295
 8013614:	f7ed faec 	bl	8000bf0 <__aeabi_dcmple>
 8013618:	bb30      	cbnz	r0, 8013668 <_printf_float+0xc0>
 801361a:	2200      	movs	r2, #0
 801361c:	2300      	movs	r3, #0
 801361e:	4640      	mov	r0, r8
 8013620:	4649      	mov	r1, r9
 8013622:	f7ed fadb 	bl	8000bdc <__aeabi_dcmplt>
 8013626:	b110      	cbz	r0, 801362e <_printf_float+0x86>
 8013628:	232d      	movs	r3, #45	@ 0x2d
 801362a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801362e:	4a91      	ldr	r2, [pc, #580]	@ (8013874 <_printf_float+0x2cc>)
 8013630:	4b91      	ldr	r3, [pc, #580]	@ (8013878 <_printf_float+0x2d0>)
 8013632:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8013636:	bf94      	ite	ls
 8013638:	4690      	movls	r8, r2
 801363a:	4698      	movhi	r8, r3
 801363c:	2303      	movs	r3, #3
 801363e:	6123      	str	r3, [r4, #16]
 8013640:	f02b 0304 	bic.w	r3, fp, #4
 8013644:	6023      	str	r3, [r4, #0]
 8013646:	f04f 0900 	mov.w	r9, #0
 801364a:	9700      	str	r7, [sp, #0]
 801364c:	4633      	mov	r3, r6
 801364e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8013650:	4621      	mov	r1, r4
 8013652:	4628      	mov	r0, r5
 8013654:	f000 f9d2 	bl	80139fc <_printf_common>
 8013658:	3001      	adds	r0, #1
 801365a:	f040 808d 	bne.w	8013778 <_printf_float+0x1d0>
 801365e:	f04f 30ff 	mov.w	r0, #4294967295
 8013662:	b00d      	add	sp, #52	@ 0x34
 8013664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013668:	4642      	mov	r2, r8
 801366a:	464b      	mov	r3, r9
 801366c:	4640      	mov	r0, r8
 801366e:	4649      	mov	r1, r9
 8013670:	f7ed fadc 	bl	8000c2c <__aeabi_dcmpun>
 8013674:	b140      	cbz	r0, 8013688 <_printf_float+0xe0>
 8013676:	464b      	mov	r3, r9
 8013678:	2b00      	cmp	r3, #0
 801367a:	bfbc      	itt	lt
 801367c:	232d      	movlt	r3, #45	@ 0x2d
 801367e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8013682:	4a7e      	ldr	r2, [pc, #504]	@ (801387c <_printf_float+0x2d4>)
 8013684:	4b7e      	ldr	r3, [pc, #504]	@ (8013880 <_printf_float+0x2d8>)
 8013686:	e7d4      	b.n	8013632 <_printf_float+0x8a>
 8013688:	6863      	ldr	r3, [r4, #4]
 801368a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801368e:	9206      	str	r2, [sp, #24]
 8013690:	1c5a      	adds	r2, r3, #1
 8013692:	d13b      	bne.n	801370c <_printf_float+0x164>
 8013694:	2306      	movs	r3, #6
 8013696:	6063      	str	r3, [r4, #4]
 8013698:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 801369c:	2300      	movs	r3, #0
 801369e:	6022      	str	r2, [r4, #0]
 80136a0:	9303      	str	r3, [sp, #12]
 80136a2:	ab0a      	add	r3, sp, #40	@ 0x28
 80136a4:	e9cd a301 	strd	sl, r3, [sp, #4]
 80136a8:	ab09      	add	r3, sp, #36	@ 0x24
 80136aa:	9300      	str	r3, [sp, #0]
 80136ac:	6861      	ldr	r1, [r4, #4]
 80136ae:	ec49 8b10 	vmov	d0, r8, r9
 80136b2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80136b6:	4628      	mov	r0, r5
 80136b8:	f7ff fed6 	bl	8013468 <__cvt>
 80136bc:	9b06      	ldr	r3, [sp, #24]
 80136be:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80136c0:	2b47      	cmp	r3, #71	@ 0x47
 80136c2:	4680      	mov	r8, r0
 80136c4:	d129      	bne.n	801371a <_printf_float+0x172>
 80136c6:	1cc8      	adds	r0, r1, #3
 80136c8:	db02      	blt.n	80136d0 <_printf_float+0x128>
 80136ca:	6863      	ldr	r3, [r4, #4]
 80136cc:	4299      	cmp	r1, r3
 80136ce:	dd41      	ble.n	8013754 <_printf_float+0x1ac>
 80136d0:	f1aa 0a02 	sub.w	sl, sl, #2
 80136d4:	fa5f fa8a 	uxtb.w	sl, sl
 80136d8:	3901      	subs	r1, #1
 80136da:	4652      	mov	r2, sl
 80136dc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80136e0:	9109      	str	r1, [sp, #36]	@ 0x24
 80136e2:	f7ff ff26 	bl	8013532 <__exponent>
 80136e6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80136e8:	1813      	adds	r3, r2, r0
 80136ea:	2a01      	cmp	r2, #1
 80136ec:	4681      	mov	r9, r0
 80136ee:	6123      	str	r3, [r4, #16]
 80136f0:	dc02      	bgt.n	80136f8 <_printf_float+0x150>
 80136f2:	6822      	ldr	r2, [r4, #0]
 80136f4:	07d2      	lsls	r2, r2, #31
 80136f6:	d501      	bpl.n	80136fc <_printf_float+0x154>
 80136f8:	3301      	adds	r3, #1
 80136fa:	6123      	str	r3, [r4, #16]
 80136fc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8013700:	2b00      	cmp	r3, #0
 8013702:	d0a2      	beq.n	801364a <_printf_float+0xa2>
 8013704:	232d      	movs	r3, #45	@ 0x2d
 8013706:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801370a:	e79e      	b.n	801364a <_printf_float+0xa2>
 801370c:	9a06      	ldr	r2, [sp, #24]
 801370e:	2a47      	cmp	r2, #71	@ 0x47
 8013710:	d1c2      	bne.n	8013698 <_printf_float+0xf0>
 8013712:	2b00      	cmp	r3, #0
 8013714:	d1c0      	bne.n	8013698 <_printf_float+0xf0>
 8013716:	2301      	movs	r3, #1
 8013718:	e7bd      	b.n	8013696 <_printf_float+0xee>
 801371a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801371e:	d9db      	bls.n	80136d8 <_printf_float+0x130>
 8013720:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8013724:	d118      	bne.n	8013758 <_printf_float+0x1b0>
 8013726:	2900      	cmp	r1, #0
 8013728:	6863      	ldr	r3, [r4, #4]
 801372a:	dd0b      	ble.n	8013744 <_printf_float+0x19c>
 801372c:	6121      	str	r1, [r4, #16]
 801372e:	b913      	cbnz	r3, 8013736 <_printf_float+0x18e>
 8013730:	6822      	ldr	r2, [r4, #0]
 8013732:	07d0      	lsls	r0, r2, #31
 8013734:	d502      	bpl.n	801373c <_printf_float+0x194>
 8013736:	3301      	adds	r3, #1
 8013738:	440b      	add	r3, r1
 801373a:	6123      	str	r3, [r4, #16]
 801373c:	65a1      	str	r1, [r4, #88]	@ 0x58
 801373e:	f04f 0900 	mov.w	r9, #0
 8013742:	e7db      	b.n	80136fc <_printf_float+0x154>
 8013744:	b913      	cbnz	r3, 801374c <_printf_float+0x1a4>
 8013746:	6822      	ldr	r2, [r4, #0]
 8013748:	07d2      	lsls	r2, r2, #31
 801374a:	d501      	bpl.n	8013750 <_printf_float+0x1a8>
 801374c:	3302      	adds	r3, #2
 801374e:	e7f4      	b.n	801373a <_printf_float+0x192>
 8013750:	2301      	movs	r3, #1
 8013752:	e7f2      	b.n	801373a <_printf_float+0x192>
 8013754:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8013758:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801375a:	4299      	cmp	r1, r3
 801375c:	db05      	blt.n	801376a <_printf_float+0x1c2>
 801375e:	6823      	ldr	r3, [r4, #0]
 8013760:	6121      	str	r1, [r4, #16]
 8013762:	07d8      	lsls	r0, r3, #31
 8013764:	d5ea      	bpl.n	801373c <_printf_float+0x194>
 8013766:	1c4b      	adds	r3, r1, #1
 8013768:	e7e7      	b.n	801373a <_printf_float+0x192>
 801376a:	2900      	cmp	r1, #0
 801376c:	bfd4      	ite	le
 801376e:	f1c1 0202 	rsble	r2, r1, #2
 8013772:	2201      	movgt	r2, #1
 8013774:	4413      	add	r3, r2
 8013776:	e7e0      	b.n	801373a <_printf_float+0x192>
 8013778:	6823      	ldr	r3, [r4, #0]
 801377a:	055a      	lsls	r2, r3, #21
 801377c:	d407      	bmi.n	801378e <_printf_float+0x1e6>
 801377e:	6923      	ldr	r3, [r4, #16]
 8013780:	4642      	mov	r2, r8
 8013782:	4631      	mov	r1, r6
 8013784:	4628      	mov	r0, r5
 8013786:	47b8      	blx	r7
 8013788:	3001      	adds	r0, #1
 801378a:	d12b      	bne.n	80137e4 <_printf_float+0x23c>
 801378c:	e767      	b.n	801365e <_printf_float+0xb6>
 801378e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8013792:	f240 80dd 	bls.w	8013950 <_printf_float+0x3a8>
 8013796:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801379a:	2200      	movs	r2, #0
 801379c:	2300      	movs	r3, #0
 801379e:	f7ed fa13 	bl	8000bc8 <__aeabi_dcmpeq>
 80137a2:	2800      	cmp	r0, #0
 80137a4:	d033      	beq.n	801380e <_printf_float+0x266>
 80137a6:	4a37      	ldr	r2, [pc, #220]	@ (8013884 <_printf_float+0x2dc>)
 80137a8:	2301      	movs	r3, #1
 80137aa:	4631      	mov	r1, r6
 80137ac:	4628      	mov	r0, r5
 80137ae:	47b8      	blx	r7
 80137b0:	3001      	adds	r0, #1
 80137b2:	f43f af54 	beq.w	801365e <_printf_float+0xb6>
 80137b6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80137ba:	4543      	cmp	r3, r8
 80137bc:	db02      	blt.n	80137c4 <_printf_float+0x21c>
 80137be:	6823      	ldr	r3, [r4, #0]
 80137c0:	07d8      	lsls	r0, r3, #31
 80137c2:	d50f      	bpl.n	80137e4 <_printf_float+0x23c>
 80137c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80137c8:	4631      	mov	r1, r6
 80137ca:	4628      	mov	r0, r5
 80137cc:	47b8      	blx	r7
 80137ce:	3001      	adds	r0, #1
 80137d0:	f43f af45 	beq.w	801365e <_printf_float+0xb6>
 80137d4:	f04f 0900 	mov.w	r9, #0
 80137d8:	f108 38ff 	add.w	r8, r8, #4294967295
 80137dc:	f104 0a1a 	add.w	sl, r4, #26
 80137e0:	45c8      	cmp	r8, r9
 80137e2:	dc09      	bgt.n	80137f8 <_printf_float+0x250>
 80137e4:	6823      	ldr	r3, [r4, #0]
 80137e6:	079b      	lsls	r3, r3, #30
 80137e8:	f100 8103 	bmi.w	80139f2 <_printf_float+0x44a>
 80137ec:	68e0      	ldr	r0, [r4, #12]
 80137ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80137f0:	4298      	cmp	r0, r3
 80137f2:	bfb8      	it	lt
 80137f4:	4618      	movlt	r0, r3
 80137f6:	e734      	b.n	8013662 <_printf_float+0xba>
 80137f8:	2301      	movs	r3, #1
 80137fa:	4652      	mov	r2, sl
 80137fc:	4631      	mov	r1, r6
 80137fe:	4628      	mov	r0, r5
 8013800:	47b8      	blx	r7
 8013802:	3001      	adds	r0, #1
 8013804:	f43f af2b 	beq.w	801365e <_printf_float+0xb6>
 8013808:	f109 0901 	add.w	r9, r9, #1
 801380c:	e7e8      	b.n	80137e0 <_printf_float+0x238>
 801380e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013810:	2b00      	cmp	r3, #0
 8013812:	dc39      	bgt.n	8013888 <_printf_float+0x2e0>
 8013814:	4a1b      	ldr	r2, [pc, #108]	@ (8013884 <_printf_float+0x2dc>)
 8013816:	2301      	movs	r3, #1
 8013818:	4631      	mov	r1, r6
 801381a:	4628      	mov	r0, r5
 801381c:	47b8      	blx	r7
 801381e:	3001      	adds	r0, #1
 8013820:	f43f af1d 	beq.w	801365e <_printf_float+0xb6>
 8013824:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8013828:	ea59 0303 	orrs.w	r3, r9, r3
 801382c:	d102      	bne.n	8013834 <_printf_float+0x28c>
 801382e:	6823      	ldr	r3, [r4, #0]
 8013830:	07d9      	lsls	r1, r3, #31
 8013832:	d5d7      	bpl.n	80137e4 <_printf_float+0x23c>
 8013834:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013838:	4631      	mov	r1, r6
 801383a:	4628      	mov	r0, r5
 801383c:	47b8      	blx	r7
 801383e:	3001      	adds	r0, #1
 8013840:	f43f af0d 	beq.w	801365e <_printf_float+0xb6>
 8013844:	f04f 0a00 	mov.w	sl, #0
 8013848:	f104 0b1a 	add.w	fp, r4, #26
 801384c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801384e:	425b      	negs	r3, r3
 8013850:	4553      	cmp	r3, sl
 8013852:	dc01      	bgt.n	8013858 <_printf_float+0x2b0>
 8013854:	464b      	mov	r3, r9
 8013856:	e793      	b.n	8013780 <_printf_float+0x1d8>
 8013858:	2301      	movs	r3, #1
 801385a:	465a      	mov	r2, fp
 801385c:	4631      	mov	r1, r6
 801385e:	4628      	mov	r0, r5
 8013860:	47b8      	blx	r7
 8013862:	3001      	adds	r0, #1
 8013864:	f43f aefb 	beq.w	801365e <_printf_float+0xb6>
 8013868:	f10a 0a01 	add.w	sl, sl, #1
 801386c:	e7ee      	b.n	801384c <_printf_float+0x2a4>
 801386e:	bf00      	nop
 8013870:	7fefffff 	.word	0x7fefffff
 8013874:	080d3c70 	.word	0x080d3c70
 8013878:	080d3c74 	.word	0x080d3c74
 801387c:	080d3c78 	.word	0x080d3c78
 8013880:	080d3c7c 	.word	0x080d3c7c
 8013884:	080d3c80 	.word	0x080d3c80
 8013888:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801388a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801388e:	4553      	cmp	r3, sl
 8013890:	bfa8      	it	ge
 8013892:	4653      	movge	r3, sl
 8013894:	2b00      	cmp	r3, #0
 8013896:	4699      	mov	r9, r3
 8013898:	dc36      	bgt.n	8013908 <_printf_float+0x360>
 801389a:	f04f 0b00 	mov.w	fp, #0
 801389e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80138a2:	f104 021a 	add.w	r2, r4, #26
 80138a6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80138a8:	9306      	str	r3, [sp, #24]
 80138aa:	eba3 0309 	sub.w	r3, r3, r9
 80138ae:	455b      	cmp	r3, fp
 80138b0:	dc31      	bgt.n	8013916 <_printf_float+0x36e>
 80138b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80138b4:	459a      	cmp	sl, r3
 80138b6:	dc3a      	bgt.n	801392e <_printf_float+0x386>
 80138b8:	6823      	ldr	r3, [r4, #0]
 80138ba:	07da      	lsls	r2, r3, #31
 80138bc:	d437      	bmi.n	801392e <_printf_float+0x386>
 80138be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80138c0:	ebaa 0903 	sub.w	r9, sl, r3
 80138c4:	9b06      	ldr	r3, [sp, #24]
 80138c6:	ebaa 0303 	sub.w	r3, sl, r3
 80138ca:	4599      	cmp	r9, r3
 80138cc:	bfa8      	it	ge
 80138ce:	4699      	movge	r9, r3
 80138d0:	f1b9 0f00 	cmp.w	r9, #0
 80138d4:	dc33      	bgt.n	801393e <_printf_float+0x396>
 80138d6:	f04f 0800 	mov.w	r8, #0
 80138da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80138de:	f104 0b1a 	add.w	fp, r4, #26
 80138e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80138e4:	ebaa 0303 	sub.w	r3, sl, r3
 80138e8:	eba3 0309 	sub.w	r3, r3, r9
 80138ec:	4543      	cmp	r3, r8
 80138ee:	f77f af79 	ble.w	80137e4 <_printf_float+0x23c>
 80138f2:	2301      	movs	r3, #1
 80138f4:	465a      	mov	r2, fp
 80138f6:	4631      	mov	r1, r6
 80138f8:	4628      	mov	r0, r5
 80138fa:	47b8      	blx	r7
 80138fc:	3001      	adds	r0, #1
 80138fe:	f43f aeae 	beq.w	801365e <_printf_float+0xb6>
 8013902:	f108 0801 	add.w	r8, r8, #1
 8013906:	e7ec      	b.n	80138e2 <_printf_float+0x33a>
 8013908:	4642      	mov	r2, r8
 801390a:	4631      	mov	r1, r6
 801390c:	4628      	mov	r0, r5
 801390e:	47b8      	blx	r7
 8013910:	3001      	adds	r0, #1
 8013912:	d1c2      	bne.n	801389a <_printf_float+0x2f2>
 8013914:	e6a3      	b.n	801365e <_printf_float+0xb6>
 8013916:	2301      	movs	r3, #1
 8013918:	4631      	mov	r1, r6
 801391a:	4628      	mov	r0, r5
 801391c:	9206      	str	r2, [sp, #24]
 801391e:	47b8      	blx	r7
 8013920:	3001      	adds	r0, #1
 8013922:	f43f ae9c 	beq.w	801365e <_printf_float+0xb6>
 8013926:	9a06      	ldr	r2, [sp, #24]
 8013928:	f10b 0b01 	add.w	fp, fp, #1
 801392c:	e7bb      	b.n	80138a6 <_printf_float+0x2fe>
 801392e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013932:	4631      	mov	r1, r6
 8013934:	4628      	mov	r0, r5
 8013936:	47b8      	blx	r7
 8013938:	3001      	adds	r0, #1
 801393a:	d1c0      	bne.n	80138be <_printf_float+0x316>
 801393c:	e68f      	b.n	801365e <_printf_float+0xb6>
 801393e:	9a06      	ldr	r2, [sp, #24]
 8013940:	464b      	mov	r3, r9
 8013942:	4442      	add	r2, r8
 8013944:	4631      	mov	r1, r6
 8013946:	4628      	mov	r0, r5
 8013948:	47b8      	blx	r7
 801394a:	3001      	adds	r0, #1
 801394c:	d1c3      	bne.n	80138d6 <_printf_float+0x32e>
 801394e:	e686      	b.n	801365e <_printf_float+0xb6>
 8013950:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8013954:	f1ba 0f01 	cmp.w	sl, #1
 8013958:	dc01      	bgt.n	801395e <_printf_float+0x3b6>
 801395a:	07db      	lsls	r3, r3, #31
 801395c:	d536      	bpl.n	80139cc <_printf_float+0x424>
 801395e:	2301      	movs	r3, #1
 8013960:	4642      	mov	r2, r8
 8013962:	4631      	mov	r1, r6
 8013964:	4628      	mov	r0, r5
 8013966:	47b8      	blx	r7
 8013968:	3001      	adds	r0, #1
 801396a:	f43f ae78 	beq.w	801365e <_printf_float+0xb6>
 801396e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013972:	4631      	mov	r1, r6
 8013974:	4628      	mov	r0, r5
 8013976:	47b8      	blx	r7
 8013978:	3001      	adds	r0, #1
 801397a:	f43f ae70 	beq.w	801365e <_printf_float+0xb6>
 801397e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8013982:	2200      	movs	r2, #0
 8013984:	2300      	movs	r3, #0
 8013986:	f10a 3aff 	add.w	sl, sl, #4294967295
 801398a:	f7ed f91d 	bl	8000bc8 <__aeabi_dcmpeq>
 801398e:	b9c0      	cbnz	r0, 80139c2 <_printf_float+0x41a>
 8013990:	4653      	mov	r3, sl
 8013992:	f108 0201 	add.w	r2, r8, #1
 8013996:	4631      	mov	r1, r6
 8013998:	4628      	mov	r0, r5
 801399a:	47b8      	blx	r7
 801399c:	3001      	adds	r0, #1
 801399e:	d10c      	bne.n	80139ba <_printf_float+0x412>
 80139a0:	e65d      	b.n	801365e <_printf_float+0xb6>
 80139a2:	2301      	movs	r3, #1
 80139a4:	465a      	mov	r2, fp
 80139a6:	4631      	mov	r1, r6
 80139a8:	4628      	mov	r0, r5
 80139aa:	47b8      	blx	r7
 80139ac:	3001      	adds	r0, #1
 80139ae:	f43f ae56 	beq.w	801365e <_printf_float+0xb6>
 80139b2:	f108 0801 	add.w	r8, r8, #1
 80139b6:	45d0      	cmp	r8, sl
 80139b8:	dbf3      	blt.n	80139a2 <_printf_float+0x3fa>
 80139ba:	464b      	mov	r3, r9
 80139bc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80139c0:	e6df      	b.n	8013782 <_printf_float+0x1da>
 80139c2:	f04f 0800 	mov.w	r8, #0
 80139c6:	f104 0b1a 	add.w	fp, r4, #26
 80139ca:	e7f4      	b.n	80139b6 <_printf_float+0x40e>
 80139cc:	2301      	movs	r3, #1
 80139ce:	4642      	mov	r2, r8
 80139d0:	e7e1      	b.n	8013996 <_printf_float+0x3ee>
 80139d2:	2301      	movs	r3, #1
 80139d4:	464a      	mov	r2, r9
 80139d6:	4631      	mov	r1, r6
 80139d8:	4628      	mov	r0, r5
 80139da:	47b8      	blx	r7
 80139dc:	3001      	adds	r0, #1
 80139de:	f43f ae3e 	beq.w	801365e <_printf_float+0xb6>
 80139e2:	f108 0801 	add.w	r8, r8, #1
 80139e6:	68e3      	ldr	r3, [r4, #12]
 80139e8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80139ea:	1a5b      	subs	r3, r3, r1
 80139ec:	4543      	cmp	r3, r8
 80139ee:	dcf0      	bgt.n	80139d2 <_printf_float+0x42a>
 80139f0:	e6fc      	b.n	80137ec <_printf_float+0x244>
 80139f2:	f04f 0800 	mov.w	r8, #0
 80139f6:	f104 0919 	add.w	r9, r4, #25
 80139fa:	e7f4      	b.n	80139e6 <_printf_float+0x43e>

080139fc <_printf_common>:
 80139fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013a00:	4616      	mov	r6, r2
 8013a02:	4698      	mov	r8, r3
 8013a04:	688a      	ldr	r2, [r1, #8]
 8013a06:	690b      	ldr	r3, [r1, #16]
 8013a08:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013a0c:	4293      	cmp	r3, r2
 8013a0e:	bfb8      	it	lt
 8013a10:	4613      	movlt	r3, r2
 8013a12:	6033      	str	r3, [r6, #0]
 8013a14:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8013a18:	4607      	mov	r7, r0
 8013a1a:	460c      	mov	r4, r1
 8013a1c:	b10a      	cbz	r2, 8013a22 <_printf_common+0x26>
 8013a1e:	3301      	adds	r3, #1
 8013a20:	6033      	str	r3, [r6, #0]
 8013a22:	6823      	ldr	r3, [r4, #0]
 8013a24:	0699      	lsls	r1, r3, #26
 8013a26:	bf42      	ittt	mi
 8013a28:	6833      	ldrmi	r3, [r6, #0]
 8013a2a:	3302      	addmi	r3, #2
 8013a2c:	6033      	strmi	r3, [r6, #0]
 8013a2e:	6825      	ldr	r5, [r4, #0]
 8013a30:	f015 0506 	ands.w	r5, r5, #6
 8013a34:	d106      	bne.n	8013a44 <_printf_common+0x48>
 8013a36:	f104 0a19 	add.w	sl, r4, #25
 8013a3a:	68e3      	ldr	r3, [r4, #12]
 8013a3c:	6832      	ldr	r2, [r6, #0]
 8013a3e:	1a9b      	subs	r3, r3, r2
 8013a40:	42ab      	cmp	r3, r5
 8013a42:	dc26      	bgt.n	8013a92 <_printf_common+0x96>
 8013a44:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8013a48:	6822      	ldr	r2, [r4, #0]
 8013a4a:	3b00      	subs	r3, #0
 8013a4c:	bf18      	it	ne
 8013a4e:	2301      	movne	r3, #1
 8013a50:	0692      	lsls	r2, r2, #26
 8013a52:	d42b      	bmi.n	8013aac <_printf_common+0xb0>
 8013a54:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8013a58:	4641      	mov	r1, r8
 8013a5a:	4638      	mov	r0, r7
 8013a5c:	47c8      	blx	r9
 8013a5e:	3001      	adds	r0, #1
 8013a60:	d01e      	beq.n	8013aa0 <_printf_common+0xa4>
 8013a62:	6823      	ldr	r3, [r4, #0]
 8013a64:	6922      	ldr	r2, [r4, #16]
 8013a66:	f003 0306 	and.w	r3, r3, #6
 8013a6a:	2b04      	cmp	r3, #4
 8013a6c:	bf02      	ittt	eq
 8013a6e:	68e5      	ldreq	r5, [r4, #12]
 8013a70:	6833      	ldreq	r3, [r6, #0]
 8013a72:	1aed      	subeq	r5, r5, r3
 8013a74:	68a3      	ldr	r3, [r4, #8]
 8013a76:	bf0c      	ite	eq
 8013a78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013a7c:	2500      	movne	r5, #0
 8013a7e:	4293      	cmp	r3, r2
 8013a80:	bfc4      	itt	gt
 8013a82:	1a9b      	subgt	r3, r3, r2
 8013a84:	18ed      	addgt	r5, r5, r3
 8013a86:	2600      	movs	r6, #0
 8013a88:	341a      	adds	r4, #26
 8013a8a:	42b5      	cmp	r5, r6
 8013a8c:	d11a      	bne.n	8013ac4 <_printf_common+0xc8>
 8013a8e:	2000      	movs	r0, #0
 8013a90:	e008      	b.n	8013aa4 <_printf_common+0xa8>
 8013a92:	2301      	movs	r3, #1
 8013a94:	4652      	mov	r2, sl
 8013a96:	4641      	mov	r1, r8
 8013a98:	4638      	mov	r0, r7
 8013a9a:	47c8      	blx	r9
 8013a9c:	3001      	adds	r0, #1
 8013a9e:	d103      	bne.n	8013aa8 <_printf_common+0xac>
 8013aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8013aa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013aa8:	3501      	adds	r5, #1
 8013aaa:	e7c6      	b.n	8013a3a <_printf_common+0x3e>
 8013aac:	18e1      	adds	r1, r4, r3
 8013aae:	1c5a      	adds	r2, r3, #1
 8013ab0:	2030      	movs	r0, #48	@ 0x30
 8013ab2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8013ab6:	4422      	add	r2, r4
 8013ab8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8013abc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8013ac0:	3302      	adds	r3, #2
 8013ac2:	e7c7      	b.n	8013a54 <_printf_common+0x58>
 8013ac4:	2301      	movs	r3, #1
 8013ac6:	4622      	mov	r2, r4
 8013ac8:	4641      	mov	r1, r8
 8013aca:	4638      	mov	r0, r7
 8013acc:	47c8      	blx	r9
 8013ace:	3001      	adds	r0, #1
 8013ad0:	d0e6      	beq.n	8013aa0 <_printf_common+0xa4>
 8013ad2:	3601      	adds	r6, #1
 8013ad4:	e7d9      	b.n	8013a8a <_printf_common+0x8e>
	...

08013ad8 <_printf_i>:
 8013ad8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013adc:	7e0f      	ldrb	r7, [r1, #24]
 8013ade:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8013ae0:	2f78      	cmp	r7, #120	@ 0x78
 8013ae2:	4691      	mov	r9, r2
 8013ae4:	4680      	mov	r8, r0
 8013ae6:	460c      	mov	r4, r1
 8013ae8:	469a      	mov	sl, r3
 8013aea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8013aee:	d807      	bhi.n	8013b00 <_printf_i+0x28>
 8013af0:	2f62      	cmp	r7, #98	@ 0x62
 8013af2:	d80a      	bhi.n	8013b0a <_printf_i+0x32>
 8013af4:	2f00      	cmp	r7, #0
 8013af6:	f000 80d2 	beq.w	8013c9e <_printf_i+0x1c6>
 8013afa:	2f58      	cmp	r7, #88	@ 0x58
 8013afc:	f000 80b9 	beq.w	8013c72 <_printf_i+0x19a>
 8013b00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013b04:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8013b08:	e03a      	b.n	8013b80 <_printf_i+0xa8>
 8013b0a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8013b0e:	2b15      	cmp	r3, #21
 8013b10:	d8f6      	bhi.n	8013b00 <_printf_i+0x28>
 8013b12:	a101      	add	r1, pc, #4	@ (adr r1, 8013b18 <_printf_i+0x40>)
 8013b14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013b18:	08013b71 	.word	0x08013b71
 8013b1c:	08013b85 	.word	0x08013b85
 8013b20:	08013b01 	.word	0x08013b01
 8013b24:	08013b01 	.word	0x08013b01
 8013b28:	08013b01 	.word	0x08013b01
 8013b2c:	08013b01 	.word	0x08013b01
 8013b30:	08013b85 	.word	0x08013b85
 8013b34:	08013b01 	.word	0x08013b01
 8013b38:	08013b01 	.word	0x08013b01
 8013b3c:	08013b01 	.word	0x08013b01
 8013b40:	08013b01 	.word	0x08013b01
 8013b44:	08013c85 	.word	0x08013c85
 8013b48:	08013baf 	.word	0x08013baf
 8013b4c:	08013c3f 	.word	0x08013c3f
 8013b50:	08013b01 	.word	0x08013b01
 8013b54:	08013b01 	.word	0x08013b01
 8013b58:	08013ca7 	.word	0x08013ca7
 8013b5c:	08013b01 	.word	0x08013b01
 8013b60:	08013baf 	.word	0x08013baf
 8013b64:	08013b01 	.word	0x08013b01
 8013b68:	08013b01 	.word	0x08013b01
 8013b6c:	08013c47 	.word	0x08013c47
 8013b70:	6833      	ldr	r3, [r6, #0]
 8013b72:	1d1a      	adds	r2, r3, #4
 8013b74:	681b      	ldr	r3, [r3, #0]
 8013b76:	6032      	str	r2, [r6, #0]
 8013b78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013b7c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8013b80:	2301      	movs	r3, #1
 8013b82:	e09d      	b.n	8013cc0 <_printf_i+0x1e8>
 8013b84:	6833      	ldr	r3, [r6, #0]
 8013b86:	6820      	ldr	r0, [r4, #0]
 8013b88:	1d19      	adds	r1, r3, #4
 8013b8a:	6031      	str	r1, [r6, #0]
 8013b8c:	0606      	lsls	r6, r0, #24
 8013b8e:	d501      	bpl.n	8013b94 <_printf_i+0xbc>
 8013b90:	681d      	ldr	r5, [r3, #0]
 8013b92:	e003      	b.n	8013b9c <_printf_i+0xc4>
 8013b94:	0645      	lsls	r5, r0, #25
 8013b96:	d5fb      	bpl.n	8013b90 <_printf_i+0xb8>
 8013b98:	f9b3 5000 	ldrsh.w	r5, [r3]
 8013b9c:	2d00      	cmp	r5, #0
 8013b9e:	da03      	bge.n	8013ba8 <_printf_i+0xd0>
 8013ba0:	232d      	movs	r3, #45	@ 0x2d
 8013ba2:	426d      	negs	r5, r5
 8013ba4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013ba8:	4859      	ldr	r0, [pc, #356]	@ (8013d10 <_printf_i+0x238>)
 8013baa:	230a      	movs	r3, #10
 8013bac:	e011      	b.n	8013bd2 <_printf_i+0xfa>
 8013bae:	6821      	ldr	r1, [r4, #0]
 8013bb0:	6833      	ldr	r3, [r6, #0]
 8013bb2:	0608      	lsls	r0, r1, #24
 8013bb4:	f853 5b04 	ldr.w	r5, [r3], #4
 8013bb8:	d402      	bmi.n	8013bc0 <_printf_i+0xe8>
 8013bba:	0649      	lsls	r1, r1, #25
 8013bbc:	bf48      	it	mi
 8013bbe:	b2ad      	uxthmi	r5, r5
 8013bc0:	2f6f      	cmp	r7, #111	@ 0x6f
 8013bc2:	4853      	ldr	r0, [pc, #332]	@ (8013d10 <_printf_i+0x238>)
 8013bc4:	6033      	str	r3, [r6, #0]
 8013bc6:	bf14      	ite	ne
 8013bc8:	230a      	movne	r3, #10
 8013bca:	2308      	moveq	r3, #8
 8013bcc:	2100      	movs	r1, #0
 8013bce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8013bd2:	6866      	ldr	r6, [r4, #4]
 8013bd4:	60a6      	str	r6, [r4, #8]
 8013bd6:	2e00      	cmp	r6, #0
 8013bd8:	bfa2      	ittt	ge
 8013bda:	6821      	ldrge	r1, [r4, #0]
 8013bdc:	f021 0104 	bicge.w	r1, r1, #4
 8013be0:	6021      	strge	r1, [r4, #0]
 8013be2:	b90d      	cbnz	r5, 8013be8 <_printf_i+0x110>
 8013be4:	2e00      	cmp	r6, #0
 8013be6:	d04b      	beq.n	8013c80 <_printf_i+0x1a8>
 8013be8:	4616      	mov	r6, r2
 8013bea:	fbb5 f1f3 	udiv	r1, r5, r3
 8013bee:	fb03 5711 	mls	r7, r3, r1, r5
 8013bf2:	5dc7      	ldrb	r7, [r0, r7]
 8013bf4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013bf8:	462f      	mov	r7, r5
 8013bfa:	42bb      	cmp	r3, r7
 8013bfc:	460d      	mov	r5, r1
 8013bfe:	d9f4      	bls.n	8013bea <_printf_i+0x112>
 8013c00:	2b08      	cmp	r3, #8
 8013c02:	d10b      	bne.n	8013c1c <_printf_i+0x144>
 8013c04:	6823      	ldr	r3, [r4, #0]
 8013c06:	07df      	lsls	r7, r3, #31
 8013c08:	d508      	bpl.n	8013c1c <_printf_i+0x144>
 8013c0a:	6923      	ldr	r3, [r4, #16]
 8013c0c:	6861      	ldr	r1, [r4, #4]
 8013c0e:	4299      	cmp	r1, r3
 8013c10:	bfde      	ittt	le
 8013c12:	2330      	movle	r3, #48	@ 0x30
 8013c14:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013c18:	f106 36ff 	addle.w	r6, r6, #4294967295
 8013c1c:	1b92      	subs	r2, r2, r6
 8013c1e:	6122      	str	r2, [r4, #16]
 8013c20:	f8cd a000 	str.w	sl, [sp]
 8013c24:	464b      	mov	r3, r9
 8013c26:	aa03      	add	r2, sp, #12
 8013c28:	4621      	mov	r1, r4
 8013c2a:	4640      	mov	r0, r8
 8013c2c:	f7ff fee6 	bl	80139fc <_printf_common>
 8013c30:	3001      	adds	r0, #1
 8013c32:	d14a      	bne.n	8013cca <_printf_i+0x1f2>
 8013c34:	f04f 30ff 	mov.w	r0, #4294967295
 8013c38:	b004      	add	sp, #16
 8013c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013c3e:	6823      	ldr	r3, [r4, #0]
 8013c40:	f043 0320 	orr.w	r3, r3, #32
 8013c44:	6023      	str	r3, [r4, #0]
 8013c46:	4833      	ldr	r0, [pc, #204]	@ (8013d14 <_printf_i+0x23c>)
 8013c48:	2778      	movs	r7, #120	@ 0x78
 8013c4a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8013c4e:	6823      	ldr	r3, [r4, #0]
 8013c50:	6831      	ldr	r1, [r6, #0]
 8013c52:	061f      	lsls	r7, r3, #24
 8013c54:	f851 5b04 	ldr.w	r5, [r1], #4
 8013c58:	d402      	bmi.n	8013c60 <_printf_i+0x188>
 8013c5a:	065f      	lsls	r7, r3, #25
 8013c5c:	bf48      	it	mi
 8013c5e:	b2ad      	uxthmi	r5, r5
 8013c60:	6031      	str	r1, [r6, #0]
 8013c62:	07d9      	lsls	r1, r3, #31
 8013c64:	bf44      	itt	mi
 8013c66:	f043 0320 	orrmi.w	r3, r3, #32
 8013c6a:	6023      	strmi	r3, [r4, #0]
 8013c6c:	b11d      	cbz	r5, 8013c76 <_printf_i+0x19e>
 8013c6e:	2310      	movs	r3, #16
 8013c70:	e7ac      	b.n	8013bcc <_printf_i+0xf4>
 8013c72:	4827      	ldr	r0, [pc, #156]	@ (8013d10 <_printf_i+0x238>)
 8013c74:	e7e9      	b.n	8013c4a <_printf_i+0x172>
 8013c76:	6823      	ldr	r3, [r4, #0]
 8013c78:	f023 0320 	bic.w	r3, r3, #32
 8013c7c:	6023      	str	r3, [r4, #0]
 8013c7e:	e7f6      	b.n	8013c6e <_printf_i+0x196>
 8013c80:	4616      	mov	r6, r2
 8013c82:	e7bd      	b.n	8013c00 <_printf_i+0x128>
 8013c84:	6833      	ldr	r3, [r6, #0]
 8013c86:	6825      	ldr	r5, [r4, #0]
 8013c88:	6961      	ldr	r1, [r4, #20]
 8013c8a:	1d18      	adds	r0, r3, #4
 8013c8c:	6030      	str	r0, [r6, #0]
 8013c8e:	062e      	lsls	r6, r5, #24
 8013c90:	681b      	ldr	r3, [r3, #0]
 8013c92:	d501      	bpl.n	8013c98 <_printf_i+0x1c0>
 8013c94:	6019      	str	r1, [r3, #0]
 8013c96:	e002      	b.n	8013c9e <_printf_i+0x1c6>
 8013c98:	0668      	lsls	r0, r5, #25
 8013c9a:	d5fb      	bpl.n	8013c94 <_printf_i+0x1bc>
 8013c9c:	8019      	strh	r1, [r3, #0]
 8013c9e:	2300      	movs	r3, #0
 8013ca0:	6123      	str	r3, [r4, #16]
 8013ca2:	4616      	mov	r6, r2
 8013ca4:	e7bc      	b.n	8013c20 <_printf_i+0x148>
 8013ca6:	6833      	ldr	r3, [r6, #0]
 8013ca8:	1d1a      	adds	r2, r3, #4
 8013caa:	6032      	str	r2, [r6, #0]
 8013cac:	681e      	ldr	r6, [r3, #0]
 8013cae:	6862      	ldr	r2, [r4, #4]
 8013cb0:	2100      	movs	r1, #0
 8013cb2:	4630      	mov	r0, r6
 8013cb4:	f7ec fb0c 	bl	80002d0 <memchr>
 8013cb8:	b108      	cbz	r0, 8013cbe <_printf_i+0x1e6>
 8013cba:	1b80      	subs	r0, r0, r6
 8013cbc:	6060      	str	r0, [r4, #4]
 8013cbe:	6863      	ldr	r3, [r4, #4]
 8013cc0:	6123      	str	r3, [r4, #16]
 8013cc2:	2300      	movs	r3, #0
 8013cc4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013cc8:	e7aa      	b.n	8013c20 <_printf_i+0x148>
 8013cca:	6923      	ldr	r3, [r4, #16]
 8013ccc:	4632      	mov	r2, r6
 8013cce:	4649      	mov	r1, r9
 8013cd0:	4640      	mov	r0, r8
 8013cd2:	47d0      	blx	sl
 8013cd4:	3001      	adds	r0, #1
 8013cd6:	d0ad      	beq.n	8013c34 <_printf_i+0x15c>
 8013cd8:	6823      	ldr	r3, [r4, #0]
 8013cda:	079b      	lsls	r3, r3, #30
 8013cdc:	d413      	bmi.n	8013d06 <_printf_i+0x22e>
 8013cde:	68e0      	ldr	r0, [r4, #12]
 8013ce0:	9b03      	ldr	r3, [sp, #12]
 8013ce2:	4298      	cmp	r0, r3
 8013ce4:	bfb8      	it	lt
 8013ce6:	4618      	movlt	r0, r3
 8013ce8:	e7a6      	b.n	8013c38 <_printf_i+0x160>
 8013cea:	2301      	movs	r3, #1
 8013cec:	4632      	mov	r2, r6
 8013cee:	4649      	mov	r1, r9
 8013cf0:	4640      	mov	r0, r8
 8013cf2:	47d0      	blx	sl
 8013cf4:	3001      	adds	r0, #1
 8013cf6:	d09d      	beq.n	8013c34 <_printf_i+0x15c>
 8013cf8:	3501      	adds	r5, #1
 8013cfa:	68e3      	ldr	r3, [r4, #12]
 8013cfc:	9903      	ldr	r1, [sp, #12]
 8013cfe:	1a5b      	subs	r3, r3, r1
 8013d00:	42ab      	cmp	r3, r5
 8013d02:	dcf2      	bgt.n	8013cea <_printf_i+0x212>
 8013d04:	e7eb      	b.n	8013cde <_printf_i+0x206>
 8013d06:	2500      	movs	r5, #0
 8013d08:	f104 0619 	add.w	r6, r4, #25
 8013d0c:	e7f5      	b.n	8013cfa <_printf_i+0x222>
 8013d0e:	bf00      	nop
 8013d10:	080d3c82 	.word	0x080d3c82
 8013d14:	080d3c93 	.word	0x080d3c93

08013d18 <std>:
 8013d18:	2300      	movs	r3, #0
 8013d1a:	b510      	push	{r4, lr}
 8013d1c:	4604      	mov	r4, r0
 8013d1e:	e9c0 3300 	strd	r3, r3, [r0]
 8013d22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013d26:	6083      	str	r3, [r0, #8]
 8013d28:	8181      	strh	r1, [r0, #12]
 8013d2a:	6643      	str	r3, [r0, #100]	@ 0x64
 8013d2c:	81c2      	strh	r2, [r0, #14]
 8013d2e:	6183      	str	r3, [r0, #24]
 8013d30:	4619      	mov	r1, r3
 8013d32:	2208      	movs	r2, #8
 8013d34:	305c      	adds	r0, #92	@ 0x5c
 8013d36:	f000 f9f9 	bl	801412c <memset>
 8013d3a:	4b0d      	ldr	r3, [pc, #52]	@ (8013d70 <std+0x58>)
 8013d3c:	6263      	str	r3, [r4, #36]	@ 0x24
 8013d3e:	4b0d      	ldr	r3, [pc, #52]	@ (8013d74 <std+0x5c>)
 8013d40:	62a3      	str	r3, [r4, #40]	@ 0x28
 8013d42:	4b0d      	ldr	r3, [pc, #52]	@ (8013d78 <std+0x60>)
 8013d44:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8013d46:	4b0d      	ldr	r3, [pc, #52]	@ (8013d7c <std+0x64>)
 8013d48:	6323      	str	r3, [r4, #48]	@ 0x30
 8013d4a:	4b0d      	ldr	r3, [pc, #52]	@ (8013d80 <std+0x68>)
 8013d4c:	6224      	str	r4, [r4, #32]
 8013d4e:	429c      	cmp	r4, r3
 8013d50:	d006      	beq.n	8013d60 <std+0x48>
 8013d52:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8013d56:	4294      	cmp	r4, r2
 8013d58:	d002      	beq.n	8013d60 <std+0x48>
 8013d5a:	33d0      	adds	r3, #208	@ 0xd0
 8013d5c:	429c      	cmp	r4, r3
 8013d5e:	d105      	bne.n	8013d6c <std+0x54>
 8013d60:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8013d64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013d68:	f000 ba6c 	b.w	8014244 <__retarget_lock_init_recursive>
 8013d6c:	bd10      	pop	{r4, pc}
 8013d6e:	bf00      	nop
 8013d70:	08013f7d 	.word	0x08013f7d
 8013d74:	08013f9f 	.word	0x08013f9f
 8013d78:	08013fd7 	.word	0x08013fd7
 8013d7c:	08013ffb 	.word	0x08013ffb
 8013d80:	2001eb08 	.word	0x2001eb08

08013d84 <stdio_exit_handler>:
 8013d84:	4a02      	ldr	r2, [pc, #8]	@ (8013d90 <stdio_exit_handler+0xc>)
 8013d86:	4903      	ldr	r1, [pc, #12]	@ (8013d94 <stdio_exit_handler+0x10>)
 8013d88:	4803      	ldr	r0, [pc, #12]	@ (8013d98 <stdio_exit_handler+0x14>)
 8013d8a:	f000 b869 	b.w	8013e60 <_fwalk_sglue>
 8013d8e:	bf00      	nop
 8013d90:	20000804 	.word	0x20000804
 8013d94:	08015a25 	.word	0x08015a25
 8013d98:	20000814 	.word	0x20000814

08013d9c <cleanup_stdio>:
 8013d9c:	6841      	ldr	r1, [r0, #4]
 8013d9e:	4b0c      	ldr	r3, [pc, #48]	@ (8013dd0 <cleanup_stdio+0x34>)
 8013da0:	4299      	cmp	r1, r3
 8013da2:	b510      	push	{r4, lr}
 8013da4:	4604      	mov	r4, r0
 8013da6:	d001      	beq.n	8013dac <cleanup_stdio+0x10>
 8013da8:	f001 fe3c 	bl	8015a24 <_fflush_r>
 8013dac:	68a1      	ldr	r1, [r4, #8]
 8013dae:	4b09      	ldr	r3, [pc, #36]	@ (8013dd4 <cleanup_stdio+0x38>)
 8013db0:	4299      	cmp	r1, r3
 8013db2:	d002      	beq.n	8013dba <cleanup_stdio+0x1e>
 8013db4:	4620      	mov	r0, r4
 8013db6:	f001 fe35 	bl	8015a24 <_fflush_r>
 8013dba:	68e1      	ldr	r1, [r4, #12]
 8013dbc:	4b06      	ldr	r3, [pc, #24]	@ (8013dd8 <cleanup_stdio+0x3c>)
 8013dbe:	4299      	cmp	r1, r3
 8013dc0:	d004      	beq.n	8013dcc <cleanup_stdio+0x30>
 8013dc2:	4620      	mov	r0, r4
 8013dc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013dc8:	f001 be2c 	b.w	8015a24 <_fflush_r>
 8013dcc:	bd10      	pop	{r4, pc}
 8013dce:	bf00      	nop
 8013dd0:	2001eb08 	.word	0x2001eb08
 8013dd4:	2001eb70 	.word	0x2001eb70
 8013dd8:	2001ebd8 	.word	0x2001ebd8

08013ddc <global_stdio_init.part.0>:
 8013ddc:	b510      	push	{r4, lr}
 8013dde:	4b0b      	ldr	r3, [pc, #44]	@ (8013e0c <global_stdio_init.part.0+0x30>)
 8013de0:	4c0b      	ldr	r4, [pc, #44]	@ (8013e10 <global_stdio_init.part.0+0x34>)
 8013de2:	4a0c      	ldr	r2, [pc, #48]	@ (8013e14 <global_stdio_init.part.0+0x38>)
 8013de4:	601a      	str	r2, [r3, #0]
 8013de6:	4620      	mov	r0, r4
 8013de8:	2200      	movs	r2, #0
 8013dea:	2104      	movs	r1, #4
 8013dec:	f7ff ff94 	bl	8013d18 <std>
 8013df0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8013df4:	2201      	movs	r2, #1
 8013df6:	2109      	movs	r1, #9
 8013df8:	f7ff ff8e 	bl	8013d18 <std>
 8013dfc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8013e00:	2202      	movs	r2, #2
 8013e02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013e06:	2112      	movs	r1, #18
 8013e08:	f7ff bf86 	b.w	8013d18 <std>
 8013e0c:	2001ec40 	.word	0x2001ec40
 8013e10:	2001eb08 	.word	0x2001eb08
 8013e14:	08013d85 	.word	0x08013d85

08013e18 <__sfp_lock_acquire>:
 8013e18:	4801      	ldr	r0, [pc, #4]	@ (8013e20 <__sfp_lock_acquire+0x8>)
 8013e1a:	f000 ba14 	b.w	8014246 <__retarget_lock_acquire_recursive>
 8013e1e:	bf00      	nop
 8013e20:	2001ec49 	.word	0x2001ec49

08013e24 <__sfp_lock_release>:
 8013e24:	4801      	ldr	r0, [pc, #4]	@ (8013e2c <__sfp_lock_release+0x8>)
 8013e26:	f000 ba0f 	b.w	8014248 <__retarget_lock_release_recursive>
 8013e2a:	bf00      	nop
 8013e2c:	2001ec49 	.word	0x2001ec49

08013e30 <__sinit>:
 8013e30:	b510      	push	{r4, lr}
 8013e32:	4604      	mov	r4, r0
 8013e34:	f7ff fff0 	bl	8013e18 <__sfp_lock_acquire>
 8013e38:	6a23      	ldr	r3, [r4, #32]
 8013e3a:	b11b      	cbz	r3, 8013e44 <__sinit+0x14>
 8013e3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013e40:	f7ff bff0 	b.w	8013e24 <__sfp_lock_release>
 8013e44:	4b04      	ldr	r3, [pc, #16]	@ (8013e58 <__sinit+0x28>)
 8013e46:	6223      	str	r3, [r4, #32]
 8013e48:	4b04      	ldr	r3, [pc, #16]	@ (8013e5c <__sinit+0x2c>)
 8013e4a:	681b      	ldr	r3, [r3, #0]
 8013e4c:	2b00      	cmp	r3, #0
 8013e4e:	d1f5      	bne.n	8013e3c <__sinit+0xc>
 8013e50:	f7ff ffc4 	bl	8013ddc <global_stdio_init.part.0>
 8013e54:	e7f2      	b.n	8013e3c <__sinit+0xc>
 8013e56:	bf00      	nop
 8013e58:	08013d9d 	.word	0x08013d9d
 8013e5c:	2001ec40 	.word	0x2001ec40

08013e60 <_fwalk_sglue>:
 8013e60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013e64:	4607      	mov	r7, r0
 8013e66:	4688      	mov	r8, r1
 8013e68:	4614      	mov	r4, r2
 8013e6a:	2600      	movs	r6, #0
 8013e6c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013e70:	f1b9 0901 	subs.w	r9, r9, #1
 8013e74:	d505      	bpl.n	8013e82 <_fwalk_sglue+0x22>
 8013e76:	6824      	ldr	r4, [r4, #0]
 8013e78:	2c00      	cmp	r4, #0
 8013e7a:	d1f7      	bne.n	8013e6c <_fwalk_sglue+0xc>
 8013e7c:	4630      	mov	r0, r6
 8013e7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013e82:	89ab      	ldrh	r3, [r5, #12]
 8013e84:	2b01      	cmp	r3, #1
 8013e86:	d907      	bls.n	8013e98 <_fwalk_sglue+0x38>
 8013e88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013e8c:	3301      	adds	r3, #1
 8013e8e:	d003      	beq.n	8013e98 <_fwalk_sglue+0x38>
 8013e90:	4629      	mov	r1, r5
 8013e92:	4638      	mov	r0, r7
 8013e94:	47c0      	blx	r8
 8013e96:	4306      	orrs	r6, r0
 8013e98:	3568      	adds	r5, #104	@ 0x68
 8013e9a:	e7e9      	b.n	8013e70 <_fwalk_sglue+0x10>

08013e9c <iprintf>:
 8013e9c:	b40f      	push	{r0, r1, r2, r3}
 8013e9e:	b507      	push	{r0, r1, r2, lr}
 8013ea0:	4906      	ldr	r1, [pc, #24]	@ (8013ebc <iprintf+0x20>)
 8013ea2:	ab04      	add	r3, sp, #16
 8013ea4:	6808      	ldr	r0, [r1, #0]
 8013ea6:	f853 2b04 	ldr.w	r2, [r3], #4
 8013eaa:	6881      	ldr	r1, [r0, #8]
 8013eac:	9301      	str	r3, [sp, #4]
 8013eae:	f001 fc1d 	bl	80156ec <_vfiprintf_r>
 8013eb2:	b003      	add	sp, #12
 8013eb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8013eb8:	b004      	add	sp, #16
 8013eba:	4770      	bx	lr
 8013ebc:	20000810 	.word	0x20000810

08013ec0 <_puts_r>:
 8013ec0:	6a03      	ldr	r3, [r0, #32]
 8013ec2:	b570      	push	{r4, r5, r6, lr}
 8013ec4:	6884      	ldr	r4, [r0, #8]
 8013ec6:	4605      	mov	r5, r0
 8013ec8:	460e      	mov	r6, r1
 8013eca:	b90b      	cbnz	r3, 8013ed0 <_puts_r+0x10>
 8013ecc:	f7ff ffb0 	bl	8013e30 <__sinit>
 8013ed0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013ed2:	07db      	lsls	r3, r3, #31
 8013ed4:	d405      	bmi.n	8013ee2 <_puts_r+0x22>
 8013ed6:	89a3      	ldrh	r3, [r4, #12]
 8013ed8:	0598      	lsls	r0, r3, #22
 8013eda:	d402      	bmi.n	8013ee2 <_puts_r+0x22>
 8013edc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013ede:	f000 f9b2 	bl	8014246 <__retarget_lock_acquire_recursive>
 8013ee2:	89a3      	ldrh	r3, [r4, #12]
 8013ee4:	0719      	lsls	r1, r3, #28
 8013ee6:	d502      	bpl.n	8013eee <_puts_r+0x2e>
 8013ee8:	6923      	ldr	r3, [r4, #16]
 8013eea:	2b00      	cmp	r3, #0
 8013eec:	d135      	bne.n	8013f5a <_puts_r+0x9a>
 8013eee:	4621      	mov	r1, r4
 8013ef0:	4628      	mov	r0, r5
 8013ef2:	f000 f8c5 	bl	8014080 <__swsetup_r>
 8013ef6:	b380      	cbz	r0, 8013f5a <_puts_r+0x9a>
 8013ef8:	f04f 35ff 	mov.w	r5, #4294967295
 8013efc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013efe:	07da      	lsls	r2, r3, #31
 8013f00:	d405      	bmi.n	8013f0e <_puts_r+0x4e>
 8013f02:	89a3      	ldrh	r3, [r4, #12]
 8013f04:	059b      	lsls	r3, r3, #22
 8013f06:	d402      	bmi.n	8013f0e <_puts_r+0x4e>
 8013f08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013f0a:	f000 f99d 	bl	8014248 <__retarget_lock_release_recursive>
 8013f0e:	4628      	mov	r0, r5
 8013f10:	bd70      	pop	{r4, r5, r6, pc}
 8013f12:	2b00      	cmp	r3, #0
 8013f14:	da04      	bge.n	8013f20 <_puts_r+0x60>
 8013f16:	69a2      	ldr	r2, [r4, #24]
 8013f18:	429a      	cmp	r2, r3
 8013f1a:	dc17      	bgt.n	8013f4c <_puts_r+0x8c>
 8013f1c:	290a      	cmp	r1, #10
 8013f1e:	d015      	beq.n	8013f4c <_puts_r+0x8c>
 8013f20:	6823      	ldr	r3, [r4, #0]
 8013f22:	1c5a      	adds	r2, r3, #1
 8013f24:	6022      	str	r2, [r4, #0]
 8013f26:	7019      	strb	r1, [r3, #0]
 8013f28:	68a3      	ldr	r3, [r4, #8]
 8013f2a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8013f2e:	3b01      	subs	r3, #1
 8013f30:	60a3      	str	r3, [r4, #8]
 8013f32:	2900      	cmp	r1, #0
 8013f34:	d1ed      	bne.n	8013f12 <_puts_r+0x52>
 8013f36:	2b00      	cmp	r3, #0
 8013f38:	da11      	bge.n	8013f5e <_puts_r+0x9e>
 8013f3a:	4622      	mov	r2, r4
 8013f3c:	210a      	movs	r1, #10
 8013f3e:	4628      	mov	r0, r5
 8013f40:	f000 f85f 	bl	8014002 <__swbuf_r>
 8013f44:	3001      	adds	r0, #1
 8013f46:	d0d7      	beq.n	8013ef8 <_puts_r+0x38>
 8013f48:	250a      	movs	r5, #10
 8013f4a:	e7d7      	b.n	8013efc <_puts_r+0x3c>
 8013f4c:	4622      	mov	r2, r4
 8013f4e:	4628      	mov	r0, r5
 8013f50:	f000 f857 	bl	8014002 <__swbuf_r>
 8013f54:	3001      	adds	r0, #1
 8013f56:	d1e7      	bne.n	8013f28 <_puts_r+0x68>
 8013f58:	e7ce      	b.n	8013ef8 <_puts_r+0x38>
 8013f5a:	3e01      	subs	r6, #1
 8013f5c:	e7e4      	b.n	8013f28 <_puts_r+0x68>
 8013f5e:	6823      	ldr	r3, [r4, #0]
 8013f60:	1c5a      	adds	r2, r3, #1
 8013f62:	6022      	str	r2, [r4, #0]
 8013f64:	220a      	movs	r2, #10
 8013f66:	701a      	strb	r2, [r3, #0]
 8013f68:	e7ee      	b.n	8013f48 <_puts_r+0x88>
	...

08013f6c <puts>:
 8013f6c:	4b02      	ldr	r3, [pc, #8]	@ (8013f78 <puts+0xc>)
 8013f6e:	4601      	mov	r1, r0
 8013f70:	6818      	ldr	r0, [r3, #0]
 8013f72:	f7ff bfa5 	b.w	8013ec0 <_puts_r>
 8013f76:	bf00      	nop
 8013f78:	20000810 	.word	0x20000810

08013f7c <__sread>:
 8013f7c:	b510      	push	{r4, lr}
 8013f7e:	460c      	mov	r4, r1
 8013f80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013f84:	f000 f900 	bl	8014188 <_read_r>
 8013f88:	2800      	cmp	r0, #0
 8013f8a:	bfab      	itete	ge
 8013f8c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8013f8e:	89a3      	ldrhlt	r3, [r4, #12]
 8013f90:	181b      	addge	r3, r3, r0
 8013f92:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8013f96:	bfac      	ite	ge
 8013f98:	6563      	strge	r3, [r4, #84]	@ 0x54
 8013f9a:	81a3      	strhlt	r3, [r4, #12]
 8013f9c:	bd10      	pop	{r4, pc}

08013f9e <__swrite>:
 8013f9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013fa2:	461f      	mov	r7, r3
 8013fa4:	898b      	ldrh	r3, [r1, #12]
 8013fa6:	05db      	lsls	r3, r3, #23
 8013fa8:	4605      	mov	r5, r0
 8013faa:	460c      	mov	r4, r1
 8013fac:	4616      	mov	r6, r2
 8013fae:	d505      	bpl.n	8013fbc <__swrite+0x1e>
 8013fb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013fb4:	2302      	movs	r3, #2
 8013fb6:	2200      	movs	r2, #0
 8013fb8:	f000 f8d4 	bl	8014164 <_lseek_r>
 8013fbc:	89a3      	ldrh	r3, [r4, #12]
 8013fbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013fc2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8013fc6:	81a3      	strh	r3, [r4, #12]
 8013fc8:	4632      	mov	r2, r6
 8013fca:	463b      	mov	r3, r7
 8013fcc:	4628      	mov	r0, r5
 8013fce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013fd2:	f000 b8fb 	b.w	80141cc <_write_r>

08013fd6 <__sseek>:
 8013fd6:	b510      	push	{r4, lr}
 8013fd8:	460c      	mov	r4, r1
 8013fda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013fde:	f000 f8c1 	bl	8014164 <_lseek_r>
 8013fe2:	1c43      	adds	r3, r0, #1
 8013fe4:	89a3      	ldrh	r3, [r4, #12]
 8013fe6:	bf15      	itete	ne
 8013fe8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8013fea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8013fee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8013ff2:	81a3      	strheq	r3, [r4, #12]
 8013ff4:	bf18      	it	ne
 8013ff6:	81a3      	strhne	r3, [r4, #12]
 8013ff8:	bd10      	pop	{r4, pc}

08013ffa <__sclose>:
 8013ffa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013ffe:	f000 b8a1 	b.w	8014144 <_close_r>

08014002 <__swbuf_r>:
 8014002:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014004:	460e      	mov	r6, r1
 8014006:	4614      	mov	r4, r2
 8014008:	4605      	mov	r5, r0
 801400a:	b118      	cbz	r0, 8014014 <__swbuf_r+0x12>
 801400c:	6a03      	ldr	r3, [r0, #32]
 801400e:	b90b      	cbnz	r3, 8014014 <__swbuf_r+0x12>
 8014010:	f7ff ff0e 	bl	8013e30 <__sinit>
 8014014:	69a3      	ldr	r3, [r4, #24]
 8014016:	60a3      	str	r3, [r4, #8]
 8014018:	89a3      	ldrh	r3, [r4, #12]
 801401a:	071a      	lsls	r2, r3, #28
 801401c:	d501      	bpl.n	8014022 <__swbuf_r+0x20>
 801401e:	6923      	ldr	r3, [r4, #16]
 8014020:	b943      	cbnz	r3, 8014034 <__swbuf_r+0x32>
 8014022:	4621      	mov	r1, r4
 8014024:	4628      	mov	r0, r5
 8014026:	f000 f82b 	bl	8014080 <__swsetup_r>
 801402a:	b118      	cbz	r0, 8014034 <__swbuf_r+0x32>
 801402c:	f04f 37ff 	mov.w	r7, #4294967295
 8014030:	4638      	mov	r0, r7
 8014032:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014034:	6823      	ldr	r3, [r4, #0]
 8014036:	6922      	ldr	r2, [r4, #16]
 8014038:	1a98      	subs	r0, r3, r2
 801403a:	6963      	ldr	r3, [r4, #20]
 801403c:	b2f6      	uxtb	r6, r6
 801403e:	4283      	cmp	r3, r0
 8014040:	4637      	mov	r7, r6
 8014042:	dc05      	bgt.n	8014050 <__swbuf_r+0x4e>
 8014044:	4621      	mov	r1, r4
 8014046:	4628      	mov	r0, r5
 8014048:	f001 fcec 	bl	8015a24 <_fflush_r>
 801404c:	2800      	cmp	r0, #0
 801404e:	d1ed      	bne.n	801402c <__swbuf_r+0x2a>
 8014050:	68a3      	ldr	r3, [r4, #8]
 8014052:	3b01      	subs	r3, #1
 8014054:	60a3      	str	r3, [r4, #8]
 8014056:	6823      	ldr	r3, [r4, #0]
 8014058:	1c5a      	adds	r2, r3, #1
 801405a:	6022      	str	r2, [r4, #0]
 801405c:	701e      	strb	r6, [r3, #0]
 801405e:	6962      	ldr	r2, [r4, #20]
 8014060:	1c43      	adds	r3, r0, #1
 8014062:	429a      	cmp	r2, r3
 8014064:	d004      	beq.n	8014070 <__swbuf_r+0x6e>
 8014066:	89a3      	ldrh	r3, [r4, #12]
 8014068:	07db      	lsls	r3, r3, #31
 801406a:	d5e1      	bpl.n	8014030 <__swbuf_r+0x2e>
 801406c:	2e0a      	cmp	r6, #10
 801406e:	d1df      	bne.n	8014030 <__swbuf_r+0x2e>
 8014070:	4621      	mov	r1, r4
 8014072:	4628      	mov	r0, r5
 8014074:	f001 fcd6 	bl	8015a24 <_fflush_r>
 8014078:	2800      	cmp	r0, #0
 801407a:	d0d9      	beq.n	8014030 <__swbuf_r+0x2e>
 801407c:	e7d6      	b.n	801402c <__swbuf_r+0x2a>
	...

08014080 <__swsetup_r>:
 8014080:	b538      	push	{r3, r4, r5, lr}
 8014082:	4b29      	ldr	r3, [pc, #164]	@ (8014128 <__swsetup_r+0xa8>)
 8014084:	4605      	mov	r5, r0
 8014086:	6818      	ldr	r0, [r3, #0]
 8014088:	460c      	mov	r4, r1
 801408a:	b118      	cbz	r0, 8014094 <__swsetup_r+0x14>
 801408c:	6a03      	ldr	r3, [r0, #32]
 801408e:	b90b      	cbnz	r3, 8014094 <__swsetup_r+0x14>
 8014090:	f7ff fece 	bl	8013e30 <__sinit>
 8014094:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014098:	0719      	lsls	r1, r3, #28
 801409a:	d422      	bmi.n	80140e2 <__swsetup_r+0x62>
 801409c:	06da      	lsls	r2, r3, #27
 801409e:	d407      	bmi.n	80140b0 <__swsetup_r+0x30>
 80140a0:	2209      	movs	r2, #9
 80140a2:	602a      	str	r2, [r5, #0]
 80140a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80140a8:	81a3      	strh	r3, [r4, #12]
 80140aa:	f04f 30ff 	mov.w	r0, #4294967295
 80140ae:	e033      	b.n	8014118 <__swsetup_r+0x98>
 80140b0:	0758      	lsls	r0, r3, #29
 80140b2:	d512      	bpl.n	80140da <__swsetup_r+0x5a>
 80140b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80140b6:	b141      	cbz	r1, 80140ca <__swsetup_r+0x4a>
 80140b8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80140bc:	4299      	cmp	r1, r3
 80140be:	d002      	beq.n	80140c6 <__swsetup_r+0x46>
 80140c0:	4628      	mov	r0, r5
 80140c2:	f000 ff1d 	bl	8014f00 <_free_r>
 80140c6:	2300      	movs	r3, #0
 80140c8:	6363      	str	r3, [r4, #52]	@ 0x34
 80140ca:	89a3      	ldrh	r3, [r4, #12]
 80140cc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80140d0:	81a3      	strh	r3, [r4, #12]
 80140d2:	2300      	movs	r3, #0
 80140d4:	6063      	str	r3, [r4, #4]
 80140d6:	6923      	ldr	r3, [r4, #16]
 80140d8:	6023      	str	r3, [r4, #0]
 80140da:	89a3      	ldrh	r3, [r4, #12]
 80140dc:	f043 0308 	orr.w	r3, r3, #8
 80140e0:	81a3      	strh	r3, [r4, #12]
 80140e2:	6923      	ldr	r3, [r4, #16]
 80140e4:	b94b      	cbnz	r3, 80140fa <__swsetup_r+0x7a>
 80140e6:	89a3      	ldrh	r3, [r4, #12]
 80140e8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80140ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80140f0:	d003      	beq.n	80140fa <__swsetup_r+0x7a>
 80140f2:	4621      	mov	r1, r4
 80140f4:	4628      	mov	r0, r5
 80140f6:	f001 fce3 	bl	8015ac0 <__smakebuf_r>
 80140fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80140fe:	f013 0201 	ands.w	r2, r3, #1
 8014102:	d00a      	beq.n	801411a <__swsetup_r+0x9a>
 8014104:	2200      	movs	r2, #0
 8014106:	60a2      	str	r2, [r4, #8]
 8014108:	6962      	ldr	r2, [r4, #20]
 801410a:	4252      	negs	r2, r2
 801410c:	61a2      	str	r2, [r4, #24]
 801410e:	6922      	ldr	r2, [r4, #16]
 8014110:	b942      	cbnz	r2, 8014124 <__swsetup_r+0xa4>
 8014112:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8014116:	d1c5      	bne.n	80140a4 <__swsetup_r+0x24>
 8014118:	bd38      	pop	{r3, r4, r5, pc}
 801411a:	0799      	lsls	r1, r3, #30
 801411c:	bf58      	it	pl
 801411e:	6962      	ldrpl	r2, [r4, #20]
 8014120:	60a2      	str	r2, [r4, #8]
 8014122:	e7f4      	b.n	801410e <__swsetup_r+0x8e>
 8014124:	2000      	movs	r0, #0
 8014126:	e7f7      	b.n	8014118 <__swsetup_r+0x98>
 8014128:	20000810 	.word	0x20000810

0801412c <memset>:
 801412c:	4402      	add	r2, r0
 801412e:	4603      	mov	r3, r0
 8014130:	4293      	cmp	r3, r2
 8014132:	d100      	bne.n	8014136 <memset+0xa>
 8014134:	4770      	bx	lr
 8014136:	f803 1b01 	strb.w	r1, [r3], #1
 801413a:	e7f9      	b.n	8014130 <memset+0x4>

0801413c <_localeconv_r>:
 801413c:	4800      	ldr	r0, [pc, #0]	@ (8014140 <_localeconv_r+0x4>)
 801413e:	4770      	bx	lr
 8014140:	20000950 	.word	0x20000950

08014144 <_close_r>:
 8014144:	b538      	push	{r3, r4, r5, lr}
 8014146:	4d06      	ldr	r5, [pc, #24]	@ (8014160 <_close_r+0x1c>)
 8014148:	2300      	movs	r3, #0
 801414a:	4604      	mov	r4, r0
 801414c:	4608      	mov	r0, r1
 801414e:	602b      	str	r3, [r5, #0]
 8014150:	f7ee f9a4 	bl	800249c <_close>
 8014154:	1c43      	adds	r3, r0, #1
 8014156:	d102      	bne.n	801415e <_close_r+0x1a>
 8014158:	682b      	ldr	r3, [r5, #0]
 801415a:	b103      	cbz	r3, 801415e <_close_r+0x1a>
 801415c:	6023      	str	r3, [r4, #0]
 801415e:	bd38      	pop	{r3, r4, r5, pc}
 8014160:	2001ec44 	.word	0x2001ec44

08014164 <_lseek_r>:
 8014164:	b538      	push	{r3, r4, r5, lr}
 8014166:	4d07      	ldr	r5, [pc, #28]	@ (8014184 <_lseek_r+0x20>)
 8014168:	4604      	mov	r4, r0
 801416a:	4608      	mov	r0, r1
 801416c:	4611      	mov	r1, r2
 801416e:	2200      	movs	r2, #0
 8014170:	602a      	str	r2, [r5, #0]
 8014172:	461a      	mov	r2, r3
 8014174:	f7ee f9b9 	bl	80024ea <_lseek>
 8014178:	1c43      	adds	r3, r0, #1
 801417a:	d102      	bne.n	8014182 <_lseek_r+0x1e>
 801417c:	682b      	ldr	r3, [r5, #0]
 801417e:	b103      	cbz	r3, 8014182 <_lseek_r+0x1e>
 8014180:	6023      	str	r3, [r4, #0]
 8014182:	bd38      	pop	{r3, r4, r5, pc}
 8014184:	2001ec44 	.word	0x2001ec44

08014188 <_read_r>:
 8014188:	b538      	push	{r3, r4, r5, lr}
 801418a:	4d07      	ldr	r5, [pc, #28]	@ (80141a8 <_read_r+0x20>)
 801418c:	4604      	mov	r4, r0
 801418e:	4608      	mov	r0, r1
 8014190:	4611      	mov	r1, r2
 8014192:	2200      	movs	r2, #0
 8014194:	602a      	str	r2, [r5, #0]
 8014196:	461a      	mov	r2, r3
 8014198:	f7ee f947 	bl	800242a <_read>
 801419c:	1c43      	adds	r3, r0, #1
 801419e:	d102      	bne.n	80141a6 <_read_r+0x1e>
 80141a0:	682b      	ldr	r3, [r5, #0]
 80141a2:	b103      	cbz	r3, 80141a6 <_read_r+0x1e>
 80141a4:	6023      	str	r3, [r4, #0]
 80141a6:	bd38      	pop	{r3, r4, r5, pc}
 80141a8:	2001ec44 	.word	0x2001ec44

080141ac <_sbrk_r>:
 80141ac:	b538      	push	{r3, r4, r5, lr}
 80141ae:	4d06      	ldr	r5, [pc, #24]	@ (80141c8 <_sbrk_r+0x1c>)
 80141b0:	2300      	movs	r3, #0
 80141b2:	4604      	mov	r4, r0
 80141b4:	4608      	mov	r0, r1
 80141b6:	602b      	str	r3, [r5, #0]
 80141b8:	f7ee f9a4 	bl	8002504 <_sbrk>
 80141bc:	1c43      	adds	r3, r0, #1
 80141be:	d102      	bne.n	80141c6 <_sbrk_r+0x1a>
 80141c0:	682b      	ldr	r3, [r5, #0]
 80141c2:	b103      	cbz	r3, 80141c6 <_sbrk_r+0x1a>
 80141c4:	6023      	str	r3, [r4, #0]
 80141c6:	bd38      	pop	{r3, r4, r5, pc}
 80141c8:	2001ec44 	.word	0x2001ec44

080141cc <_write_r>:
 80141cc:	b538      	push	{r3, r4, r5, lr}
 80141ce:	4d07      	ldr	r5, [pc, #28]	@ (80141ec <_write_r+0x20>)
 80141d0:	4604      	mov	r4, r0
 80141d2:	4608      	mov	r0, r1
 80141d4:	4611      	mov	r1, r2
 80141d6:	2200      	movs	r2, #0
 80141d8:	602a      	str	r2, [r5, #0]
 80141da:	461a      	mov	r2, r3
 80141dc:	f7ee f942 	bl	8002464 <_write>
 80141e0:	1c43      	adds	r3, r0, #1
 80141e2:	d102      	bne.n	80141ea <_write_r+0x1e>
 80141e4:	682b      	ldr	r3, [r5, #0]
 80141e6:	b103      	cbz	r3, 80141ea <_write_r+0x1e>
 80141e8:	6023      	str	r3, [r4, #0]
 80141ea:	bd38      	pop	{r3, r4, r5, pc}
 80141ec:	2001ec44 	.word	0x2001ec44

080141f0 <__errno>:
 80141f0:	4b01      	ldr	r3, [pc, #4]	@ (80141f8 <__errno+0x8>)
 80141f2:	6818      	ldr	r0, [r3, #0]
 80141f4:	4770      	bx	lr
 80141f6:	bf00      	nop
 80141f8:	20000810 	.word	0x20000810

080141fc <__libc_init_array>:
 80141fc:	b570      	push	{r4, r5, r6, lr}
 80141fe:	4d0d      	ldr	r5, [pc, #52]	@ (8014234 <__libc_init_array+0x38>)
 8014200:	4c0d      	ldr	r4, [pc, #52]	@ (8014238 <__libc_init_array+0x3c>)
 8014202:	1b64      	subs	r4, r4, r5
 8014204:	10a4      	asrs	r4, r4, #2
 8014206:	2600      	movs	r6, #0
 8014208:	42a6      	cmp	r6, r4
 801420a:	d109      	bne.n	8014220 <__libc_init_array+0x24>
 801420c:	4d0b      	ldr	r5, [pc, #44]	@ (801423c <__libc_init_array+0x40>)
 801420e:	4c0c      	ldr	r4, [pc, #48]	@ (8014240 <__libc_init_array+0x44>)
 8014210:	f002 fabc 	bl	801678c <_init>
 8014214:	1b64      	subs	r4, r4, r5
 8014216:	10a4      	asrs	r4, r4, #2
 8014218:	2600      	movs	r6, #0
 801421a:	42a6      	cmp	r6, r4
 801421c:	d105      	bne.n	801422a <__libc_init_array+0x2e>
 801421e:	bd70      	pop	{r4, r5, r6, pc}
 8014220:	f855 3b04 	ldr.w	r3, [r5], #4
 8014224:	4798      	blx	r3
 8014226:	3601      	adds	r6, #1
 8014228:	e7ee      	b.n	8014208 <__libc_init_array+0xc>
 801422a:	f855 3b04 	ldr.w	r3, [r5], #4
 801422e:	4798      	blx	r3
 8014230:	3601      	adds	r6, #1
 8014232:	e7f2      	b.n	801421a <__libc_init_array+0x1e>
 8014234:	080d43b8 	.word	0x080d43b8
 8014238:	080d43b8 	.word	0x080d43b8
 801423c:	080d43b8 	.word	0x080d43b8
 8014240:	080d43bc 	.word	0x080d43bc

08014244 <__retarget_lock_init_recursive>:
 8014244:	4770      	bx	lr

08014246 <__retarget_lock_acquire_recursive>:
 8014246:	4770      	bx	lr

08014248 <__retarget_lock_release_recursive>:
 8014248:	4770      	bx	lr

0801424a <memcpy>:
 801424a:	440a      	add	r2, r1
 801424c:	4291      	cmp	r1, r2
 801424e:	f100 33ff 	add.w	r3, r0, #4294967295
 8014252:	d100      	bne.n	8014256 <memcpy+0xc>
 8014254:	4770      	bx	lr
 8014256:	b510      	push	{r4, lr}
 8014258:	f811 4b01 	ldrb.w	r4, [r1], #1
 801425c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014260:	4291      	cmp	r1, r2
 8014262:	d1f9      	bne.n	8014258 <memcpy+0xe>
 8014264:	bd10      	pop	{r4, pc}

08014266 <quorem>:
 8014266:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801426a:	6903      	ldr	r3, [r0, #16]
 801426c:	690c      	ldr	r4, [r1, #16]
 801426e:	42a3      	cmp	r3, r4
 8014270:	4607      	mov	r7, r0
 8014272:	db7e      	blt.n	8014372 <quorem+0x10c>
 8014274:	3c01      	subs	r4, #1
 8014276:	f101 0814 	add.w	r8, r1, #20
 801427a:	00a3      	lsls	r3, r4, #2
 801427c:	f100 0514 	add.w	r5, r0, #20
 8014280:	9300      	str	r3, [sp, #0]
 8014282:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014286:	9301      	str	r3, [sp, #4]
 8014288:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801428c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014290:	3301      	adds	r3, #1
 8014292:	429a      	cmp	r2, r3
 8014294:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8014298:	fbb2 f6f3 	udiv	r6, r2, r3
 801429c:	d32e      	bcc.n	80142fc <quorem+0x96>
 801429e:	f04f 0a00 	mov.w	sl, #0
 80142a2:	46c4      	mov	ip, r8
 80142a4:	46ae      	mov	lr, r5
 80142a6:	46d3      	mov	fp, sl
 80142a8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80142ac:	b298      	uxth	r0, r3
 80142ae:	fb06 a000 	mla	r0, r6, r0, sl
 80142b2:	0c02      	lsrs	r2, r0, #16
 80142b4:	0c1b      	lsrs	r3, r3, #16
 80142b6:	fb06 2303 	mla	r3, r6, r3, r2
 80142ba:	f8de 2000 	ldr.w	r2, [lr]
 80142be:	b280      	uxth	r0, r0
 80142c0:	b292      	uxth	r2, r2
 80142c2:	1a12      	subs	r2, r2, r0
 80142c4:	445a      	add	r2, fp
 80142c6:	f8de 0000 	ldr.w	r0, [lr]
 80142ca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80142ce:	b29b      	uxth	r3, r3
 80142d0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80142d4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80142d8:	b292      	uxth	r2, r2
 80142da:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80142de:	45e1      	cmp	r9, ip
 80142e0:	f84e 2b04 	str.w	r2, [lr], #4
 80142e4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80142e8:	d2de      	bcs.n	80142a8 <quorem+0x42>
 80142ea:	9b00      	ldr	r3, [sp, #0]
 80142ec:	58eb      	ldr	r3, [r5, r3]
 80142ee:	b92b      	cbnz	r3, 80142fc <quorem+0x96>
 80142f0:	9b01      	ldr	r3, [sp, #4]
 80142f2:	3b04      	subs	r3, #4
 80142f4:	429d      	cmp	r5, r3
 80142f6:	461a      	mov	r2, r3
 80142f8:	d32f      	bcc.n	801435a <quorem+0xf4>
 80142fa:	613c      	str	r4, [r7, #16]
 80142fc:	4638      	mov	r0, r7
 80142fe:	f001 f8c3 	bl	8015488 <__mcmp>
 8014302:	2800      	cmp	r0, #0
 8014304:	db25      	blt.n	8014352 <quorem+0xec>
 8014306:	4629      	mov	r1, r5
 8014308:	2000      	movs	r0, #0
 801430a:	f858 2b04 	ldr.w	r2, [r8], #4
 801430e:	f8d1 c000 	ldr.w	ip, [r1]
 8014312:	fa1f fe82 	uxth.w	lr, r2
 8014316:	fa1f f38c 	uxth.w	r3, ip
 801431a:	eba3 030e 	sub.w	r3, r3, lr
 801431e:	4403      	add	r3, r0
 8014320:	0c12      	lsrs	r2, r2, #16
 8014322:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8014326:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801432a:	b29b      	uxth	r3, r3
 801432c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014330:	45c1      	cmp	r9, r8
 8014332:	f841 3b04 	str.w	r3, [r1], #4
 8014336:	ea4f 4022 	mov.w	r0, r2, asr #16
 801433a:	d2e6      	bcs.n	801430a <quorem+0xa4>
 801433c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014340:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014344:	b922      	cbnz	r2, 8014350 <quorem+0xea>
 8014346:	3b04      	subs	r3, #4
 8014348:	429d      	cmp	r5, r3
 801434a:	461a      	mov	r2, r3
 801434c:	d30b      	bcc.n	8014366 <quorem+0x100>
 801434e:	613c      	str	r4, [r7, #16]
 8014350:	3601      	adds	r6, #1
 8014352:	4630      	mov	r0, r6
 8014354:	b003      	add	sp, #12
 8014356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801435a:	6812      	ldr	r2, [r2, #0]
 801435c:	3b04      	subs	r3, #4
 801435e:	2a00      	cmp	r2, #0
 8014360:	d1cb      	bne.n	80142fa <quorem+0x94>
 8014362:	3c01      	subs	r4, #1
 8014364:	e7c6      	b.n	80142f4 <quorem+0x8e>
 8014366:	6812      	ldr	r2, [r2, #0]
 8014368:	3b04      	subs	r3, #4
 801436a:	2a00      	cmp	r2, #0
 801436c:	d1ef      	bne.n	801434e <quorem+0xe8>
 801436e:	3c01      	subs	r4, #1
 8014370:	e7ea      	b.n	8014348 <quorem+0xe2>
 8014372:	2000      	movs	r0, #0
 8014374:	e7ee      	b.n	8014354 <quorem+0xee>
	...

08014378 <_dtoa_r>:
 8014378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801437c:	69c7      	ldr	r7, [r0, #28]
 801437e:	b099      	sub	sp, #100	@ 0x64
 8014380:	ed8d 0b02 	vstr	d0, [sp, #8]
 8014384:	ec55 4b10 	vmov	r4, r5, d0
 8014388:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801438a:	9109      	str	r1, [sp, #36]	@ 0x24
 801438c:	4683      	mov	fp, r0
 801438e:	920e      	str	r2, [sp, #56]	@ 0x38
 8014390:	9313      	str	r3, [sp, #76]	@ 0x4c
 8014392:	b97f      	cbnz	r7, 80143b4 <_dtoa_r+0x3c>
 8014394:	2010      	movs	r0, #16
 8014396:	f7fe ffb1 	bl	80132fc <malloc>
 801439a:	4602      	mov	r2, r0
 801439c:	f8cb 001c 	str.w	r0, [fp, #28]
 80143a0:	b920      	cbnz	r0, 80143ac <_dtoa_r+0x34>
 80143a2:	4ba7      	ldr	r3, [pc, #668]	@ (8014640 <_dtoa_r+0x2c8>)
 80143a4:	21ef      	movs	r1, #239	@ 0xef
 80143a6:	48a7      	ldr	r0, [pc, #668]	@ (8014644 <_dtoa_r+0x2cc>)
 80143a8:	f001 fbe8 	bl	8015b7c <__assert_func>
 80143ac:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80143b0:	6007      	str	r7, [r0, #0]
 80143b2:	60c7      	str	r7, [r0, #12]
 80143b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80143b8:	6819      	ldr	r1, [r3, #0]
 80143ba:	b159      	cbz	r1, 80143d4 <_dtoa_r+0x5c>
 80143bc:	685a      	ldr	r2, [r3, #4]
 80143be:	604a      	str	r2, [r1, #4]
 80143c0:	2301      	movs	r3, #1
 80143c2:	4093      	lsls	r3, r2
 80143c4:	608b      	str	r3, [r1, #8]
 80143c6:	4658      	mov	r0, fp
 80143c8:	f000 fe24 	bl	8015014 <_Bfree>
 80143cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80143d0:	2200      	movs	r2, #0
 80143d2:	601a      	str	r2, [r3, #0]
 80143d4:	1e2b      	subs	r3, r5, #0
 80143d6:	bfb9      	ittee	lt
 80143d8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80143dc:	9303      	strlt	r3, [sp, #12]
 80143de:	2300      	movge	r3, #0
 80143e0:	6033      	strge	r3, [r6, #0]
 80143e2:	9f03      	ldr	r7, [sp, #12]
 80143e4:	4b98      	ldr	r3, [pc, #608]	@ (8014648 <_dtoa_r+0x2d0>)
 80143e6:	bfbc      	itt	lt
 80143e8:	2201      	movlt	r2, #1
 80143ea:	6032      	strlt	r2, [r6, #0]
 80143ec:	43bb      	bics	r3, r7
 80143ee:	d112      	bne.n	8014416 <_dtoa_r+0x9e>
 80143f0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80143f2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80143f6:	6013      	str	r3, [r2, #0]
 80143f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80143fc:	4323      	orrs	r3, r4
 80143fe:	f000 854d 	beq.w	8014e9c <_dtoa_r+0xb24>
 8014402:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8014404:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801465c <_dtoa_r+0x2e4>
 8014408:	2b00      	cmp	r3, #0
 801440a:	f000 854f 	beq.w	8014eac <_dtoa_r+0xb34>
 801440e:	f10a 0303 	add.w	r3, sl, #3
 8014412:	f000 bd49 	b.w	8014ea8 <_dtoa_r+0xb30>
 8014416:	ed9d 7b02 	vldr	d7, [sp, #8]
 801441a:	2200      	movs	r2, #0
 801441c:	ec51 0b17 	vmov	r0, r1, d7
 8014420:	2300      	movs	r3, #0
 8014422:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8014426:	f7ec fbcf 	bl	8000bc8 <__aeabi_dcmpeq>
 801442a:	4680      	mov	r8, r0
 801442c:	b158      	cbz	r0, 8014446 <_dtoa_r+0xce>
 801442e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8014430:	2301      	movs	r3, #1
 8014432:	6013      	str	r3, [r2, #0]
 8014434:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8014436:	b113      	cbz	r3, 801443e <_dtoa_r+0xc6>
 8014438:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801443a:	4b84      	ldr	r3, [pc, #528]	@ (801464c <_dtoa_r+0x2d4>)
 801443c:	6013      	str	r3, [r2, #0]
 801443e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8014660 <_dtoa_r+0x2e8>
 8014442:	f000 bd33 	b.w	8014eac <_dtoa_r+0xb34>
 8014446:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801444a:	aa16      	add	r2, sp, #88	@ 0x58
 801444c:	a917      	add	r1, sp, #92	@ 0x5c
 801444e:	4658      	mov	r0, fp
 8014450:	f001 f8ca 	bl	80155e8 <__d2b>
 8014454:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8014458:	4681      	mov	r9, r0
 801445a:	2e00      	cmp	r6, #0
 801445c:	d077      	beq.n	801454e <_dtoa_r+0x1d6>
 801445e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014460:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8014464:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014468:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801446c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8014470:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8014474:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8014478:	4619      	mov	r1, r3
 801447a:	2200      	movs	r2, #0
 801447c:	4b74      	ldr	r3, [pc, #464]	@ (8014650 <_dtoa_r+0x2d8>)
 801447e:	f7eb ff83 	bl	8000388 <__aeabi_dsub>
 8014482:	a369      	add	r3, pc, #420	@ (adr r3, 8014628 <_dtoa_r+0x2b0>)
 8014484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014488:	f7ec f936 	bl	80006f8 <__aeabi_dmul>
 801448c:	a368      	add	r3, pc, #416	@ (adr r3, 8014630 <_dtoa_r+0x2b8>)
 801448e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014492:	f7eb ff7b 	bl	800038c <__adddf3>
 8014496:	4604      	mov	r4, r0
 8014498:	4630      	mov	r0, r6
 801449a:	460d      	mov	r5, r1
 801449c:	f7ec f8c2 	bl	8000624 <__aeabi_i2d>
 80144a0:	a365      	add	r3, pc, #404	@ (adr r3, 8014638 <_dtoa_r+0x2c0>)
 80144a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144a6:	f7ec f927 	bl	80006f8 <__aeabi_dmul>
 80144aa:	4602      	mov	r2, r0
 80144ac:	460b      	mov	r3, r1
 80144ae:	4620      	mov	r0, r4
 80144b0:	4629      	mov	r1, r5
 80144b2:	f7eb ff6b 	bl	800038c <__adddf3>
 80144b6:	4604      	mov	r4, r0
 80144b8:	460d      	mov	r5, r1
 80144ba:	f7ec fbcd 	bl	8000c58 <__aeabi_d2iz>
 80144be:	2200      	movs	r2, #0
 80144c0:	4607      	mov	r7, r0
 80144c2:	2300      	movs	r3, #0
 80144c4:	4620      	mov	r0, r4
 80144c6:	4629      	mov	r1, r5
 80144c8:	f7ec fb88 	bl	8000bdc <__aeabi_dcmplt>
 80144cc:	b140      	cbz	r0, 80144e0 <_dtoa_r+0x168>
 80144ce:	4638      	mov	r0, r7
 80144d0:	f7ec f8a8 	bl	8000624 <__aeabi_i2d>
 80144d4:	4622      	mov	r2, r4
 80144d6:	462b      	mov	r3, r5
 80144d8:	f7ec fb76 	bl	8000bc8 <__aeabi_dcmpeq>
 80144dc:	b900      	cbnz	r0, 80144e0 <_dtoa_r+0x168>
 80144de:	3f01      	subs	r7, #1
 80144e0:	2f16      	cmp	r7, #22
 80144e2:	d851      	bhi.n	8014588 <_dtoa_r+0x210>
 80144e4:	4b5b      	ldr	r3, [pc, #364]	@ (8014654 <_dtoa_r+0x2dc>)
 80144e6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80144ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80144f2:	f7ec fb73 	bl	8000bdc <__aeabi_dcmplt>
 80144f6:	2800      	cmp	r0, #0
 80144f8:	d048      	beq.n	801458c <_dtoa_r+0x214>
 80144fa:	3f01      	subs	r7, #1
 80144fc:	2300      	movs	r3, #0
 80144fe:	9312      	str	r3, [sp, #72]	@ 0x48
 8014500:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8014502:	1b9b      	subs	r3, r3, r6
 8014504:	1e5a      	subs	r2, r3, #1
 8014506:	bf44      	itt	mi
 8014508:	f1c3 0801 	rsbmi	r8, r3, #1
 801450c:	2300      	movmi	r3, #0
 801450e:	9208      	str	r2, [sp, #32]
 8014510:	bf54      	ite	pl
 8014512:	f04f 0800 	movpl.w	r8, #0
 8014516:	9308      	strmi	r3, [sp, #32]
 8014518:	2f00      	cmp	r7, #0
 801451a:	db39      	blt.n	8014590 <_dtoa_r+0x218>
 801451c:	9b08      	ldr	r3, [sp, #32]
 801451e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8014520:	443b      	add	r3, r7
 8014522:	9308      	str	r3, [sp, #32]
 8014524:	2300      	movs	r3, #0
 8014526:	930a      	str	r3, [sp, #40]	@ 0x28
 8014528:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801452a:	2b09      	cmp	r3, #9
 801452c:	d864      	bhi.n	80145f8 <_dtoa_r+0x280>
 801452e:	2b05      	cmp	r3, #5
 8014530:	bfc4      	itt	gt
 8014532:	3b04      	subgt	r3, #4
 8014534:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8014536:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014538:	f1a3 0302 	sub.w	r3, r3, #2
 801453c:	bfcc      	ite	gt
 801453e:	2400      	movgt	r4, #0
 8014540:	2401      	movle	r4, #1
 8014542:	2b03      	cmp	r3, #3
 8014544:	d863      	bhi.n	801460e <_dtoa_r+0x296>
 8014546:	e8df f003 	tbb	[pc, r3]
 801454a:	372a      	.short	0x372a
 801454c:	5535      	.short	0x5535
 801454e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8014552:	441e      	add	r6, r3
 8014554:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8014558:	2b20      	cmp	r3, #32
 801455a:	bfc1      	itttt	gt
 801455c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8014560:	409f      	lslgt	r7, r3
 8014562:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8014566:	fa24 f303 	lsrgt.w	r3, r4, r3
 801456a:	bfd6      	itet	le
 801456c:	f1c3 0320 	rsble	r3, r3, #32
 8014570:	ea47 0003 	orrgt.w	r0, r7, r3
 8014574:	fa04 f003 	lslle.w	r0, r4, r3
 8014578:	f7ec f844 	bl	8000604 <__aeabi_ui2d>
 801457c:	2201      	movs	r2, #1
 801457e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8014582:	3e01      	subs	r6, #1
 8014584:	9214      	str	r2, [sp, #80]	@ 0x50
 8014586:	e777      	b.n	8014478 <_dtoa_r+0x100>
 8014588:	2301      	movs	r3, #1
 801458a:	e7b8      	b.n	80144fe <_dtoa_r+0x186>
 801458c:	9012      	str	r0, [sp, #72]	@ 0x48
 801458e:	e7b7      	b.n	8014500 <_dtoa_r+0x188>
 8014590:	427b      	negs	r3, r7
 8014592:	930a      	str	r3, [sp, #40]	@ 0x28
 8014594:	2300      	movs	r3, #0
 8014596:	eba8 0807 	sub.w	r8, r8, r7
 801459a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801459c:	e7c4      	b.n	8014528 <_dtoa_r+0x1b0>
 801459e:	2300      	movs	r3, #0
 80145a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80145a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80145a4:	2b00      	cmp	r3, #0
 80145a6:	dc35      	bgt.n	8014614 <_dtoa_r+0x29c>
 80145a8:	2301      	movs	r3, #1
 80145aa:	9300      	str	r3, [sp, #0]
 80145ac:	9307      	str	r3, [sp, #28]
 80145ae:	461a      	mov	r2, r3
 80145b0:	920e      	str	r2, [sp, #56]	@ 0x38
 80145b2:	e00b      	b.n	80145cc <_dtoa_r+0x254>
 80145b4:	2301      	movs	r3, #1
 80145b6:	e7f3      	b.n	80145a0 <_dtoa_r+0x228>
 80145b8:	2300      	movs	r3, #0
 80145ba:	930b      	str	r3, [sp, #44]	@ 0x2c
 80145bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80145be:	18fb      	adds	r3, r7, r3
 80145c0:	9300      	str	r3, [sp, #0]
 80145c2:	3301      	adds	r3, #1
 80145c4:	2b01      	cmp	r3, #1
 80145c6:	9307      	str	r3, [sp, #28]
 80145c8:	bfb8      	it	lt
 80145ca:	2301      	movlt	r3, #1
 80145cc:	f8db 001c 	ldr.w	r0, [fp, #28]
 80145d0:	2100      	movs	r1, #0
 80145d2:	2204      	movs	r2, #4
 80145d4:	f102 0514 	add.w	r5, r2, #20
 80145d8:	429d      	cmp	r5, r3
 80145da:	d91f      	bls.n	801461c <_dtoa_r+0x2a4>
 80145dc:	6041      	str	r1, [r0, #4]
 80145de:	4658      	mov	r0, fp
 80145e0:	f000 fcd8 	bl	8014f94 <_Balloc>
 80145e4:	4682      	mov	sl, r0
 80145e6:	2800      	cmp	r0, #0
 80145e8:	d13c      	bne.n	8014664 <_dtoa_r+0x2ec>
 80145ea:	4b1b      	ldr	r3, [pc, #108]	@ (8014658 <_dtoa_r+0x2e0>)
 80145ec:	4602      	mov	r2, r0
 80145ee:	f240 11af 	movw	r1, #431	@ 0x1af
 80145f2:	e6d8      	b.n	80143a6 <_dtoa_r+0x2e>
 80145f4:	2301      	movs	r3, #1
 80145f6:	e7e0      	b.n	80145ba <_dtoa_r+0x242>
 80145f8:	2401      	movs	r4, #1
 80145fa:	2300      	movs	r3, #0
 80145fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80145fe:	940b      	str	r4, [sp, #44]	@ 0x2c
 8014600:	f04f 33ff 	mov.w	r3, #4294967295
 8014604:	9300      	str	r3, [sp, #0]
 8014606:	9307      	str	r3, [sp, #28]
 8014608:	2200      	movs	r2, #0
 801460a:	2312      	movs	r3, #18
 801460c:	e7d0      	b.n	80145b0 <_dtoa_r+0x238>
 801460e:	2301      	movs	r3, #1
 8014610:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014612:	e7f5      	b.n	8014600 <_dtoa_r+0x288>
 8014614:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014616:	9300      	str	r3, [sp, #0]
 8014618:	9307      	str	r3, [sp, #28]
 801461a:	e7d7      	b.n	80145cc <_dtoa_r+0x254>
 801461c:	3101      	adds	r1, #1
 801461e:	0052      	lsls	r2, r2, #1
 8014620:	e7d8      	b.n	80145d4 <_dtoa_r+0x25c>
 8014622:	bf00      	nop
 8014624:	f3af 8000 	nop.w
 8014628:	636f4361 	.word	0x636f4361
 801462c:	3fd287a7 	.word	0x3fd287a7
 8014630:	8b60c8b3 	.word	0x8b60c8b3
 8014634:	3fc68a28 	.word	0x3fc68a28
 8014638:	509f79fb 	.word	0x509f79fb
 801463c:	3fd34413 	.word	0x3fd34413
 8014640:	080d3cb1 	.word	0x080d3cb1
 8014644:	080d3cc8 	.word	0x080d3cc8
 8014648:	7ff00000 	.word	0x7ff00000
 801464c:	080d3c81 	.word	0x080d3c81
 8014650:	3ff80000 	.word	0x3ff80000
 8014654:	080d3dc0 	.word	0x080d3dc0
 8014658:	080d3d20 	.word	0x080d3d20
 801465c:	080d3cad 	.word	0x080d3cad
 8014660:	080d3c80 	.word	0x080d3c80
 8014664:	f8db 301c 	ldr.w	r3, [fp, #28]
 8014668:	6018      	str	r0, [r3, #0]
 801466a:	9b07      	ldr	r3, [sp, #28]
 801466c:	2b0e      	cmp	r3, #14
 801466e:	f200 80a4 	bhi.w	80147ba <_dtoa_r+0x442>
 8014672:	2c00      	cmp	r4, #0
 8014674:	f000 80a1 	beq.w	80147ba <_dtoa_r+0x442>
 8014678:	2f00      	cmp	r7, #0
 801467a:	dd33      	ble.n	80146e4 <_dtoa_r+0x36c>
 801467c:	4bad      	ldr	r3, [pc, #692]	@ (8014934 <_dtoa_r+0x5bc>)
 801467e:	f007 020f 	and.w	r2, r7, #15
 8014682:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014686:	ed93 7b00 	vldr	d7, [r3]
 801468a:	05f8      	lsls	r0, r7, #23
 801468c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8014690:	ea4f 1427 	mov.w	r4, r7, asr #4
 8014694:	d516      	bpl.n	80146c4 <_dtoa_r+0x34c>
 8014696:	4ba8      	ldr	r3, [pc, #672]	@ (8014938 <_dtoa_r+0x5c0>)
 8014698:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801469c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80146a0:	f7ec f954 	bl	800094c <__aeabi_ddiv>
 80146a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80146a8:	f004 040f 	and.w	r4, r4, #15
 80146ac:	2603      	movs	r6, #3
 80146ae:	4da2      	ldr	r5, [pc, #648]	@ (8014938 <_dtoa_r+0x5c0>)
 80146b0:	b954      	cbnz	r4, 80146c8 <_dtoa_r+0x350>
 80146b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80146b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80146ba:	f7ec f947 	bl	800094c <__aeabi_ddiv>
 80146be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80146c2:	e028      	b.n	8014716 <_dtoa_r+0x39e>
 80146c4:	2602      	movs	r6, #2
 80146c6:	e7f2      	b.n	80146ae <_dtoa_r+0x336>
 80146c8:	07e1      	lsls	r1, r4, #31
 80146ca:	d508      	bpl.n	80146de <_dtoa_r+0x366>
 80146cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80146d0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80146d4:	f7ec f810 	bl	80006f8 <__aeabi_dmul>
 80146d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80146dc:	3601      	adds	r6, #1
 80146de:	1064      	asrs	r4, r4, #1
 80146e0:	3508      	adds	r5, #8
 80146e2:	e7e5      	b.n	80146b0 <_dtoa_r+0x338>
 80146e4:	f000 80d2 	beq.w	801488c <_dtoa_r+0x514>
 80146e8:	427c      	negs	r4, r7
 80146ea:	4b92      	ldr	r3, [pc, #584]	@ (8014934 <_dtoa_r+0x5bc>)
 80146ec:	4d92      	ldr	r5, [pc, #584]	@ (8014938 <_dtoa_r+0x5c0>)
 80146ee:	f004 020f 	and.w	r2, r4, #15
 80146f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80146f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146fa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80146fe:	f7eb fffb 	bl	80006f8 <__aeabi_dmul>
 8014702:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014706:	1124      	asrs	r4, r4, #4
 8014708:	2300      	movs	r3, #0
 801470a:	2602      	movs	r6, #2
 801470c:	2c00      	cmp	r4, #0
 801470e:	f040 80b2 	bne.w	8014876 <_dtoa_r+0x4fe>
 8014712:	2b00      	cmp	r3, #0
 8014714:	d1d3      	bne.n	80146be <_dtoa_r+0x346>
 8014716:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8014718:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801471c:	2b00      	cmp	r3, #0
 801471e:	f000 80b7 	beq.w	8014890 <_dtoa_r+0x518>
 8014722:	4b86      	ldr	r3, [pc, #536]	@ (801493c <_dtoa_r+0x5c4>)
 8014724:	2200      	movs	r2, #0
 8014726:	4620      	mov	r0, r4
 8014728:	4629      	mov	r1, r5
 801472a:	f7ec fa57 	bl	8000bdc <__aeabi_dcmplt>
 801472e:	2800      	cmp	r0, #0
 8014730:	f000 80ae 	beq.w	8014890 <_dtoa_r+0x518>
 8014734:	9b07      	ldr	r3, [sp, #28]
 8014736:	2b00      	cmp	r3, #0
 8014738:	f000 80aa 	beq.w	8014890 <_dtoa_r+0x518>
 801473c:	9b00      	ldr	r3, [sp, #0]
 801473e:	2b00      	cmp	r3, #0
 8014740:	dd37      	ble.n	80147b2 <_dtoa_r+0x43a>
 8014742:	1e7b      	subs	r3, r7, #1
 8014744:	9304      	str	r3, [sp, #16]
 8014746:	4620      	mov	r0, r4
 8014748:	4b7d      	ldr	r3, [pc, #500]	@ (8014940 <_dtoa_r+0x5c8>)
 801474a:	2200      	movs	r2, #0
 801474c:	4629      	mov	r1, r5
 801474e:	f7eb ffd3 	bl	80006f8 <__aeabi_dmul>
 8014752:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014756:	9c00      	ldr	r4, [sp, #0]
 8014758:	3601      	adds	r6, #1
 801475a:	4630      	mov	r0, r6
 801475c:	f7eb ff62 	bl	8000624 <__aeabi_i2d>
 8014760:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014764:	f7eb ffc8 	bl	80006f8 <__aeabi_dmul>
 8014768:	4b76      	ldr	r3, [pc, #472]	@ (8014944 <_dtoa_r+0x5cc>)
 801476a:	2200      	movs	r2, #0
 801476c:	f7eb fe0e 	bl	800038c <__adddf3>
 8014770:	4605      	mov	r5, r0
 8014772:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8014776:	2c00      	cmp	r4, #0
 8014778:	f040 808d 	bne.w	8014896 <_dtoa_r+0x51e>
 801477c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014780:	4b71      	ldr	r3, [pc, #452]	@ (8014948 <_dtoa_r+0x5d0>)
 8014782:	2200      	movs	r2, #0
 8014784:	f7eb fe00 	bl	8000388 <__aeabi_dsub>
 8014788:	4602      	mov	r2, r0
 801478a:	460b      	mov	r3, r1
 801478c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8014790:	462a      	mov	r2, r5
 8014792:	4633      	mov	r3, r6
 8014794:	f7ec fa40 	bl	8000c18 <__aeabi_dcmpgt>
 8014798:	2800      	cmp	r0, #0
 801479a:	f040 828b 	bne.w	8014cb4 <_dtoa_r+0x93c>
 801479e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80147a2:	462a      	mov	r2, r5
 80147a4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80147a8:	f7ec fa18 	bl	8000bdc <__aeabi_dcmplt>
 80147ac:	2800      	cmp	r0, #0
 80147ae:	f040 8128 	bne.w	8014a02 <_dtoa_r+0x68a>
 80147b2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80147b6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80147ba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80147bc:	2b00      	cmp	r3, #0
 80147be:	f2c0 815a 	blt.w	8014a76 <_dtoa_r+0x6fe>
 80147c2:	2f0e      	cmp	r7, #14
 80147c4:	f300 8157 	bgt.w	8014a76 <_dtoa_r+0x6fe>
 80147c8:	4b5a      	ldr	r3, [pc, #360]	@ (8014934 <_dtoa_r+0x5bc>)
 80147ca:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80147ce:	ed93 7b00 	vldr	d7, [r3]
 80147d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80147d4:	2b00      	cmp	r3, #0
 80147d6:	ed8d 7b00 	vstr	d7, [sp]
 80147da:	da03      	bge.n	80147e4 <_dtoa_r+0x46c>
 80147dc:	9b07      	ldr	r3, [sp, #28]
 80147de:	2b00      	cmp	r3, #0
 80147e0:	f340 8101 	ble.w	80149e6 <_dtoa_r+0x66e>
 80147e4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80147e8:	4656      	mov	r6, sl
 80147ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 80147ee:	4620      	mov	r0, r4
 80147f0:	4629      	mov	r1, r5
 80147f2:	f7ec f8ab 	bl	800094c <__aeabi_ddiv>
 80147f6:	f7ec fa2f 	bl	8000c58 <__aeabi_d2iz>
 80147fa:	4680      	mov	r8, r0
 80147fc:	f7eb ff12 	bl	8000624 <__aeabi_i2d>
 8014800:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014804:	f7eb ff78 	bl	80006f8 <__aeabi_dmul>
 8014808:	4602      	mov	r2, r0
 801480a:	460b      	mov	r3, r1
 801480c:	4620      	mov	r0, r4
 801480e:	4629      	mov	r1, r5
 8014810:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8014814:	f7eb fdb8 	bl	8000388 <__aeabi_dsub>
 8014818:	f806 4b01 	strb.w	r4, [r6], #1
 801481c:	9d07      	ldr	r5, [sp, #28]
 801481e:	eba6 040a 	sub.w	r4, r6, sl
 8014822:	42a5      	cmp	r5, r4
 8014824:	4602      	mov	r2, r0
 8014826:	460b      	mov	r3, r1
 8014828:	f040 8117 	bne.w	8014a5a <_dtoa_r+0x6e2>
 801482c:	f7eb fdae 	bl	800038c <__adddf3>
 8014830:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014834:	4604      	mov	r4, r0
 8014836:	460d      	mov	r5, r1
 8014838:	f7ec f9ee 	bl	8000c18 <__aeabi_dcmpgt>
 801483c:	2800      	cmp	r0, #0
 801483e:	f040 80f9 	bne.w	8014a34 <_dtoa_r+0x6bc>
 8014842:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014846:	4620      	mov	r0, r4
 8014848:	4629      	mov	r1, r5
 801484a:	f7ec f9bd 	bl	8000bc8 <__aeabi_dcmpeq>
 801484e:	b118      	cbz	r0, 8014858 <_dtoa_r+0x4e0>
 8014850:	f018 0f01 	tst.w	r8, #1
 8014854:	f040 80ee 	bne.w	8014a34 <_dtoa_r+0x6bc>
 8014858:	4649      	mov	r1, r9
 801485a:	4658      	mov	r0, fp
 801485c:	f000 fbda 	bl	8015014 <_Bfree>
 8014860:	2300      	movs	r3, #0
 8014862:	7033      	strb	r3, [r6, #0]
 8014864:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8014866:	3701      	adds	r7, #1
 8014868:	601f      	str	r7, [r3, #0]
 801486a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801486c:	2b00      	cmp	r3, #0
 801486e:	f000 831d 	beq.w	8014eac <_dtoa_r+0xb34>
 8014872:	601e      	str	r6, [r3, #0]
 8014874:	e31a      	b.n	8014eac <_dtoa_r+0xb34>
 8014876:	07e2      	lsls	r2, r4, #31
 8014878:	d505      	bpl.n	8014886 <_dtoa_r+0x50e>
 801487a:	e9d5 2300 	ldrd	r2, r3, [r5]
 801487e:	f7eb ff3b 	bl	80006f8 <__aeabi_dmul>
 8014882:	3601      	adds	r6, #1
 8014884:	2301      	movs	r3, #1
 8014886:	1064      	asrs	r4, r4, #1
 8014888:	3508      	adds	r5, #8
 801488a:	e73f      	b.n	801470c <_dtoa_r+0x394>
 801488c:	2602      	movs	r6, #2
 801488e:	e742      	b.n	8014716 <_dtoa_r+0x39e>
 8014890:	9c07      	ldr	r4, [sp, #28]
 8014892:	9704      	str	r7, [sp, #16]
 8014894:	e761      	b.n	801475a <_dtoa_r+0x3e2>
 8014896:	4b27      	ldr	r3, [pc, #156]	@ (8014934 <_dtoa_r+0x5bc>)
 8014898:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801489a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801489e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80148a2:	4454      	add	r4, sl
 80148a4:	2900      	cmp	r1, #0
 80148a6:	d053      	beq.n	8014950 <_dtoa_r+0x5d8>
 80148a8:	4928      	ldr	r1, [pc, #160]	@ (801494c <_dtoa_r+0x5d4>)
 80148aa:	2000      	movs	r0, #0
 80148ac:	f7ec f84e 	bl	800094c <__aeabi_ddiv>
 80148b0:	4633      	mov	r3, r6
 80148b2:	462a      	mov	r2, r5
 80148b4:	f7eb fd68 	bl	8000388 <__aeabi_dsub>
 80148b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80148bc:	4656      	mov	r6, sl
 80148be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80148c2:	f7ec f9c9 	bl	8000c58 <__aeabi_d2iz>
 80148c6:	4605      	mov	r5, r0
 80148c8:	f7eb feac 	bl	8000624 <__aeabi_i2d>
 80148cc:	4602      	mov	r2, r0
 80148ce:	460b      	mov	r3, r1
 80148d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80148d4:	f7eb fd58 	bl	8000388 <__aeabi_dsub>
 80148d8:	3530      	adds	r5, #48	@ 0x30
 80148da:	4602      	mov	r2, r0
 80148dc:	460b      	mov	r3, r1
 80148de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80148e2:	f806 5b01 	strb.w	r5, [r6], #1
 80148e6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80148ea:	f7ec f977 	bl	8000bdc <__aeabi_dcmplt>
 80148ee:	2800      	cmp	r0, #0
 80148f0:	d171      	bne.n	80149d6 <_dtoa_r+0x65e>
 80148f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80148f6:	4911      	ldr	r1, [pc, #68]	@ (801493c <_dtoa_r+0x5c4>)
 80148f8:	2000      	movs	r0, #0
 80148fa:	f7eb fd45 	bl	8000388 <__aeabi_dsub>
 80148fe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8014902:	f7ec f96b 	bl	8000bdc <__aeabi_dcmplt>
 8014906:	2800      	cmp	r0, #0
 8014908:	f040 8095 	bne.w	8014a36 <_dtoa_r+0x6be>
 801490c:	42a6      	cmp	r6, r4
 801490e:	f43f af50 	beq.w	80147b2 <_dtoa_r+0x43a>
 8014912:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8014916:	4b0a      	ldr	r3, [pc, #40]	@ (8014940 <_dtoa_r+0x5c8>)
 8014918:	2200      	movs	r2, #0
 801491a:	f7eb feed 	bl	80006f8 <__aeabi_dmul>
 801491e:	4b08      	ldr	r3, [pc, #32]	@ (8014940 <_dtoa_r+0x5c8>)
 8014920:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8014924:	2200      	movs	r2, #0
 8014926:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801492a:	f7eb fee5 	bl	80006f8 <__aeabi_dmul>
 801492e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014932:	e7c4      	b.n	80148be <_dtoa_r+0x546>
 8014934:	080d3dc0 	.word	0x080d3dc0
 8014938:	080d3d98 	.word	0x080d3d98
 801493c:	3ff00000 	.word	0x3ff00000
 8014940:	40240000 	.word	0x40240000
 8014944:	401c0000 	.word	0x401c0000
 8014948:	40140000 	.word	0x40140000
 801494c:	3fe00000 	.word	0x3fe00000
 8014950:	4631      	mov	r1, r6
 8014952:	4628      	mov	r0, r5
 8014954:	f7eb fed0 	bl	80006f8 <__aeabi_dmul>
 8014958:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801495c:	9415      	str	r4, [sp, #84]	@ 0x54
 801495e:	4656      	mov	r6, sl
 8014960:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014964:	f7ec f978 	bl	8000c58 <__aeabi_d2iz>
 8014968:	4605      	mov	r5, r0
 801496a:	f7eb fe5b 	bl	8000624 <__aeabi_i2d>
 801496e:	4602      	mov	r2, r0
 8014970:	460b      	mov	r3, r1
 8014972:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014976:	f7eb fd07 	bl	8000388 <__aeabi_dsub>
 801497a:	3530      	adds	r5, #48	@ 0x30
 801497c:	f806 5b01 	strb.w	r5, [r6], #1
 8014980:	4602      	mov	r2, r0
 8014982:	460b      	mov	r3, r1
 8014984:	42a6      	cmp	r6, r4
 8014986:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801498a:	f04f 0200 	mov.w	r2, #0
 801498e:	d124      	bne.n	80149da <_dtoa_r+0x662>
 8014990:	4bac      	ldr	r3, [pc, #688]	@ (8014c44 <_dtoa_r+0x8cc>)
 8014992:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8014996:	f7eb fcf9 	bl	800038c <__adddf3>
 801499a:	4602      	mov	r2, r0
 801499c:	460b      	mov	r3, r1
 801499e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80149a2:	f7ec f939 	bl	8000c18 <__aeabi_dcmpgt>
 80149a6:	2800      	cmp	r0, #0
 80149a8:	d145      	bne.n	8014a36 <_dtoa_r+0x6be>
 80149aa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80149ae:	49a5      	ldr	r1, [pc, #660]	@ (8014c44 <_dtoa_r+0x8cc>)
 80149b0:	2000      	movs	r0, #0
 80149b2:	f7eb fce9 	bl	8000388 <__aeabi_dsub>
 80149b6:	4602      	mov	r2, r0
 80149b8:	460b      	mov	r3, r1
 80149ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80149be:	f7ec f90d 	bl	8000bdc <__aeabi_dcmplt>
 80149c2:	2800      	cmp	r0, #0
 80149c4:	f43f aef5 	beq.w	80147b2 <_dtoa_r+0x43a>
 80149c8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80149ca:	1e73      	subs	r3, r6, #1
 80149cc:	9315      	str	r3, [sp, #84]	@ 0x54
 80149ce:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80149d2:	2b30      	cmp	r3, #48	@ 0x30
 80149d4:	d0f8      	beq.n	80149c8 <_dtoa_r+0x650>
 80149d6:	9f04      	ldr	r7, [sp, #16]
 80149d8:	e73e      	b.n	8014858 <_dtoa_r+0x4e0>
 80149da:	4b9b      	ldr	r3, [pc, #620]	@ (8014c48 <_dtoa_r+0x8d0>)
 80149dc:	f7eb fe8c 	bl	80006f8 <__aeabi_dmul>
 80149e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80149e4:	e7bc      	b.n	8014960 <_dtoa_r+0x5e8>
 80149e6:	d10c      	bne.n	8014a02 <_dtoa_r+0x68a>
 80149e8:	4b98      	ldr	r3, [pc, #608]	@ (8014c4c <_dtoa_r+0x8d4>)
 80149ea:	2200      	movs	r2, #0
 80149ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80149f0:	f7eb fe82 	bl	80006f8 <__aeabi_dmul>
 80149f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80149f8:	f7ec f904 	bl	8000c04 <__aeabi_dcmpge>
 80149fc:	2800      	cmp	r0, #0
 80149fe:	f000 8157 	beq.w	8014cb0 <_dtoa_r+0x938>
 8014a02:	2400      	movs	r4, #0
 8014a04:	4625      	mov	r5, r4
 8014a06:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014a08:	43db      	mvns	r3, r3
 8014a0a:	9304      	str	r3, [sp, #16]
 8014a0c:	4656      	mov	r6, sl
 8014a0e:	2700      	movs	r7, #0
 8014a10:	4621      	mov	r1, r4
 8014a12:	4658      	mov	r0, fp
 8014a14:	f000 fafe 	bl	8015014 <_Bfree>
 8014a18:	2d00      	cmp	r5, #0
 8014a1a:	d0dc      	beq.n	80149d6 <_dtoa_r+0x65e>
 8014a1c:	b12f      	cbz	r7, 8014a2a <_dtoa_r+0x6b2>
 8014a1e:	42af      	cmp	r7, r5
 8014a20:	d003      	beq.n	8014a2a <_dtoa_r+0x6b2>
 8014a22:	4639      	mov	r1, r7
 8014a24:	4658      	mov	r0, fp
 8014a26:	f000 faf5 	bl	8015014 <_Bfree>
 8014a2a:	4629      	mov	r1, r5
 8014a2c:	4658      	mov	r0, fp
 8014a2e:	f000 faf1 	bl	8015014 <_Bfree>
 8014a32:	e7d0      	b.n	80149d6 <_dtoa_r+0x65e>
 8014a34:	9704      	str	r7, [sp, #16]
 8014a36:	4633      	mov	r3, r6
 8014a38:	461e      	mov	r6, r3
 8014a3a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014a3e:	2a39      	cmp	r2, #57	@ 0x39
 8014a40:	d107      	bne.n	8014a52 <_dtoa_r+0x6da>
 8014a42:	459a      	cmp	sl, r3
 8014a44:	d1f8      	bne.n	8014a38 <_dtoa_r+0x6c0>
 8014a46:	9a04      	ldr	r2, [sp, #16]
 8014a48:	3201      	adds	r2, #1
 8014a4a:	9204      	str	r2, [sp, #16]
 8014a4c:	2230      	movs	r2, #48	@ 0x30
 8014a4e:	f88a 2000 	strb.w	r2, [sl]
 8014a52:	781a      	ldrb	r2, [r3, #0]
 8014a54:	3201      	adds	r2, #1
 8014a56:	701a      	strb	r2, [r3, #0]
 8014a58:	e7bd      	b.n	80149d6 <_dtoa_r+0x65e>
 8014a5a:	4b7b      	ldr	r3, [pc, #492]	@ (8014c48 <_dtoa_r+0x8d0>)
 8014a5c:	2200      	movs	r2, #0
 8014a5e:	f7eb fe4b 	bl	80006f8 <__aeabi_dmul>
 8014a62:	2200      	movs	r2, #0
 8014a64:	2300      	movs	r3, #0
 8014a66:	4604      	mov	r4, r0
 8014a68:	460d      	mov	r5, r1
 8014a6a:	f7ec f8ad 	bl	8000bc8 <__aeabi_dcmpeq>
 8014a6e:	2800      	cmp	r0, #0
 8014a70:	f43f aebb 	beq.w	80147ea <_dtoa_r+0x472>
 8014a74:	e6f0      	b.n	8014858 <_dtoa_r+0x4e0>
 8014a76:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8014a78:	2a00      	cmp	r2, #0
 8014a7a:	f000 80db 	beq.w	8014c34 <_dtoa_r+0x8bc>
 8014a7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014a80:	2a01      	cmp	r2, #1
 8014a82:	f300 80bf 	bgt.w	8014c04 <_dtoa_r+0x88c>
 8014a86:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8014a88:	2a00      	cmp	r2, #0
 8014a8a:	f000 80b7 	beq.w	8014bfc <_dtoa_r+0x884>
 8014a8e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8014a92:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8014a94:	4646      	mov	r6, r8
 8014a96:	9a08      	ldr	r2, [sp, #32]
 8014a98:	2101      	movs	r1, #1
 8014a9a:	441a      	add	r2, r3
 8014a9c:	4658      	mov	r0, fp
 8014a9e:	4498      	add	r8, r3
 8014aa0:	9208      	str	r2, [sp, #32]
 8014aa2:	f000 fb6b 	bl	801517c <__i2b>
 8014aa6:	4605      	mov	r5, r0
 8014aa8:	b15e      	cbz	r6, 8014ac2 <_dtoa_r+0x74a>
 8014aaa:	9b08      	ldr	r3, [sp, #32]
 8014aac:	2b00      	cmp	r3, #0
 8014aae:	dd08      	ble.n	8014ac2 <_dtoa_r+0x74a>
 8014ab0:	42b3      	cmp	r3, r6
 8014ab2:	9a08      	ldr	r2, [sp, #32]
 8014ab4:	bfa8      	it	ge
 8014ab6:	4633      	movge	r3, r6
 8014ab8:	eba8 0803 	sub.w	r8, r8, r3
 8014abc:	1af6      	subs	r6, r6, r3
 8014abe:	1ad3      	subs	r3, r2, r3
 8014ac0:	9308      	str	r3, [sp, #32]
 8014ac2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014ac4:	b1f3      	cbz	r3, 8014b04 <_dtoa_r+0x78c>
 8014ac6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014ac8:	2b00      	cmp	r3, #0
 8014aca:	f000 80b7 	beq.w	8014c3c <_dtoa_r+0x8c4>
 8014ace:	b18c      	cbz	r4, 8014af4 <_dtoa_r+0x77c>
 8014ad0:	4629      	mov	r1, r5
 8014ad2:	4622      	mov	r2, r4
 8014ad4:	4658      	mov	r0, fp
 8014ad6:	f000 fc11 	bl	80152fc <__pow5mult>
 8014ada:	464a      	mov	r2, r9
 8014adc:	4601      	mov	r1, r0
 8014ade:	4605      	mov	r5, r0
 8014ae0:	4658      	mov	r0, fp
 8014ae2:	f000 fb61 	bl	80151a8 <__multiply>
 8014ae6:	4649      	mov	r1, r9
 8014ae8:	9004      	str	r0, [sp, #16]
 8014aea:	4658      	mov	r0, fp
 8014aec:	f000 fa92 	bl	8015014 <_Bfree>
 8014af0:	9b04      	ldr	r3, [sp, #16]
 8014af2:	4699      	mov	r9, r3
 8014af4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014af6:	1b1a      	subs	r2, r3, r4
 8014af8:	d004      	beq.n	8014b04 <_dtoa_r+0x78c>
 8014afa:	4649      	mov	r1, r9
 8014afc:	4658      	mov	r0, fp
 8014afe:	f000 fbfd 	bl	80152fc <__pow5mult>
 8014b02:	4681      	mov	r9, r0
 8014b04:	2101      	movs	r1, #1
 8014b06:	4658      	mov	r0, fp
 8014b08:	f000 fb38 	bl	801517c <__i2b>
 8014b0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014b0e:	4604      	mov	r4, r0
 8014b10:	2b00      	cmp	r3, #0
 8014b12:	f000 81cf 	beq.w	8014eb4 <_dtoa_r+0xb3c>
 8014b16:	461a      	mov	r2, r3
 8014b18:	4601      	mov	r1, r0
 8014b1a:	4658      	mov	r0, fp
 8014b1c:	f000 fbee 	bl	80152fc <__pow5mult>
 8014b20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014b22:	2b01      	cmp	r3, #1
 8014b24:	4604      	mov	r4, r0
 8014b26:	f300 8095 	bgt.w	8014c54 <_dtoa_r+0x8dc>
 8014b2a:	9b02      	ldr	r3, [sp, #8]
 8014b2c:	2b00      	cmp	r3, #0
 8014b2e:	f040 8087 	bne.w	8014c40 <_dtoa_r+0x8c8>
 8014b32:	9b03      	ldr	r3, [sp, #12]
 8014b34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014b38:	2b00      	cmp	r3, #0
 8014b3a:	f040 8089 	bne.w	8014c50 <_dtoa_r+0x8d8>
 8014b3e:	9b03      	ldr	r3, [sp, #12]
 8014b40:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8014b44:	0d1b      	lsrs	r3, r3, #20
 8014b46:	051b      	lsls	r3, r3, #20
 8014b48:	b12b      	cbz	r3, 8014b56 <_dtoa_r+0x7de>
 8014b4a:	9b08      	ldr	r3, [sp, #32]
 8014b4c:	3301      	adds	r3, #1
 8014b4e:	9308      	str	r3, [sp, #32]
 8014b50:	f108 0801 	add.w	r8, r8, #1
 8014b54:	2301      	movs	r3, #1
 8014b56:	930a      	str	r3, [sp, #40]	@ 0x28
 8014b58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014b5a:	2b00      	cmp	r3, #0
 8014b5c:	f000 81b0 	beq.w	8014ec0 <_dtoa_r+0xb48>
 8014b60:	6923      	ldr	r3, [r4, #16]
 8014b62:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8014b66:	6918      	ldr	r0, [r3, #16]
 8014b68:	f000 fabc 	bl	80150e4 <__hi0bits>
 8014b6c:	f1c0 0020 	rsb	r0, r0, #32
 8014b70:	9b08      	ldr	r3, [sp, #32]
 8014b72:	4418      	add	r0, r3
 8014b74:	f010 001f 	ands.w	r0, r0, #31
 8014b78:	d077      	beq.n	8014c6a <_dtoa_r+0x8f2>
 8014b7a:	f1c0 0320 	rsb	r3, r0, #32
 8014b7e:	2b04      	cmp	r3, #4
 8014b80:	dd6b      	ble.n	8014c5a <_dtoa_r+0x8e2>
 8014b82:	9b08      	ldr	r3, [sp, #32]
 8014b84:	f1c0 001c 	rsb	r0, r0, #28
 8014b88:	4403      	add	r3, r0
 8014b8a:	4480      	add	r8, r0
 8014b8c:	4406      	add	r6, r0
 8014b8e:	9308      	str	r3, [sp, #32]
 8014b90:	f1b8 0f00 	cmp.w	r8, #0
 8014b94:	dd05      	ble.n	8014ba2 <_dtoa_r+0x82a>
 8014b96:	4649      	mov	r1, r9
 8014b98:	4642      	mov	r2, r8
 8014b9a:	4658      	mov	r0, fp
 8014b9c:	f000 fc08 	bl	80153b0 <__lshift>
 8014ba0:	4681      	mov	r9, r0
 8014ba2:	9b08      	ldr	r3, [sp, #32]
 8014ba4:	2b00      	cmp	r3, #0
 8014ba6:	dd05      	ble.n	8014bb4 <_dtoa_r+0x83c>
 8014ba8:	4621      	mov	r1, r4
 8014baa:	461a      	mov	r2, r3
 8014bac:	4658      	mov	r0, fp
 8014bae:	f000 fbff 	bl	80153b0 <__lshift>
 8014bb2:	4604      	mov	r4, r0
 8014bb4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8014bb6:	2b00      	cmp	r3, #0
 8014bb8:	d059      	beq.n	8014c6e <_dtoa_r+0x8f6>
 8014bba:	4621      	mov	r1, r4
 8014bbc:	4648      	mov	r0, r9
 8014bbe:	f000 fc63 	bl	8015488 <__mcmp>
 8014bc2:	2800      	cmp	r0, #0
 8014bc4:	da53      	bge.n	8014c6e <_dtoa_r+0x8f6>
 8014bc6:	1e7b      	subs	r3, r7, #1
 8014bc8:	9304      	str	r3, [sp, #16]
 8014bca:	4649      	mov	r1, r9
 8014bcc:	2300      	movs	r3, #0
 8014bce:	220a      	movs	r2, #10
 8014bd0:	4658      	mov	r0, fp
 8014bd2:	f000 fa41 	bl	8015058 <__multadd>
 8014bd6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014bd8:	4681      	mov	r9, r0
 8014bda:	2b00      	cmp	r3, #0
 8014bdc:	f000 8172 	beq.w	8014ec4 <_dtoa_r+0xb4c>
 8014be0:	2300      	movs	r3, #0
 8014be2:	4629      	mov	r1, r5
 8014be4:	220a      	movs	r2, #10
 8014be6:	4658      	mov	r0, fp
 8014be8:	f000 fa36 	bl	8015058 <__multadd>
 8014bec:	9b00      	ldr	r3, [sp, #0]
 8014bee:	2b00      	cmp	r3, #0
 8014bf0:	4605      	mov	r5, r0
 8014bf2:	dc67      	bgt.n	8014cc4 <_dtoa_r+0x94c>
 8014bf4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014bf6:	2b02      	cmp	r3, #2
 8014bf8:	dc41      	bgt.n	8014c7e <_dtoa_r+0x906>
 8014bfa:	e063      	b.n	8014cc4 <_dtoa_r+0x94c>
 8014bfc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8014bfe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8014c02:	e746      	b.n	8014a92 <_dtoa_r+0x71a>
 8014c04:	9b07      	ldr	r3, [sp, #28]
 8014c06:	1e5c      	subs	r4, r3, #1
 8014c08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014c0a:	42a3      	cmp	r3, r4
 8014c0c:	bfbf      	itttt	lt
 8014c0e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8014c10:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8014c12:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8014c14:	1ae3      	sublt	r3, r4, r3
 8014c16:	bfb4      	ite	lt
 8014c18:	18d2      	addlt	r2, r2, r3
 8014c1a:	1b1c      	subge	r4, r3, r4
 8014c1c:	9b07      	ldr	r3, [sp, #28]
 8014c1e:	bfbc      	itt	lt
 8014c20:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8014c22:	2400      	movlt	r4, #0
 8014c24:	2b00      	cmp	r3, #0
 8014c26:	bfb5      	itete	lt
 8014c28:	eba8 0603 	sublt.w	r6, r8, r3
 8014c2c:	9b07      	ldrge	r3, [sp, #28]
 8014c2e:	2300      	movlt	r3, #0
 8014c30:	4646      	movge	r6, r8
 8014c32:	e730      	b.n	8014a96 <_dtoa_r+0x71e>
 8014c34:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8014c36:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8014c38:	4646      	mov	r6, r8
 8014c3a:	e735      	b.n	8014aa8 <_dtoa_r+0x730>
 8014c3c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014c3e:	e75c      	b.n	8014afa <_dtoa_r+0x782>
 8014c40:	2300      	movs	r3, #0
 8014c42:	e788      	b.n	8014b56 <_dtoa_r+0x7de>
 8014c44:	3fe00000 	.word	0x3fe00000
 8014c48:	40240000 	.word	0x40240000
 8014c4c:	40140000 	.word	0x40140000
 8014c50:	9b02      	ldr	r3, [sp, #8]
 8014c52:	e780      	b.n	8014b56 <_dtoa_r+0x7de>
 8014c54:	2300      	movs	r3, #0
 8014c56:	930a      	str	r3, [sp, #40]	@ 0x28
 8014c58:	e782      	b.n	8014b60 <_dtoa_r+0x7e8>
 8014c5a:	d099      	beq.n	8014b90 <_dtoa_r+0x818>
 8014c5c:	9a08      	ldr	r2, [sp, #32]
 8014c5e:	331c      	adds	r3, #28
 8014c60:	441a      	add	r2, r3
 8014c62:	4498      	add	r8, r3
 8014c64:	441e      	add	r6, r3
 8014c66:	9208      	str	r2, [sp, #32]
 8014c68:	e792      	b.n	8014b90 <_dtoa_r+0x818>
 8014c6a:	4603      	mov	r3, r0
 8014c6c:	e7f6      	b.n	8014c5c <_dtoa_r+0x8e4>
 8014c6e:	9b07      	ldr	r3, [sp, #28]
 8014c70:	9704      	str	r7, [sp, #16]
 8014c72:	2b00      	cmp	r3, #0
 8014c74:	dc20      	bgt.n	8014cb8 <_dtoa_r+0x940>
 8014c76:	9300      	str	r3, [sp, #0]
 8014c78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014c7a:	2b02      	cmp	r3, #2
 8014c7c:	dd1e      	ble.n	8014cbc <_dtoa_r+0x944>
 8014c7e:	9b00      	ldr	r3, [sp, #0]
 8014c80:	2b00      	cmp	r3, #0
 8014c82:	f47f aec0 	bne.w	8014a06 <_dtoa_r+0x68e>
 8014c86:	4621      	mov	r1, r4
 8014c88:	2205      	movs	r2, #5
 8014c8a:	4658      	mov	r0, fp
 8014c8c:	f000 f9e4 	bl	8015058 <__multadd>
 8014c90:	4601      	mov	r1, r0
 8014c92:	4604      	mov	r4, r0
 8014c94:	4648      	mov	r0, r9
 8014c96:	f000 fbf7 	bl	8015488 <__mcmp>
 8014c9a:	2800      	cmp	r0, #0
 8014c9c:	f77f aeb3 	ble.w	8014a06 <_dtoa_r+0x68e>
 8014ca0:	4656      	mov	r6, sl
 8014ca2:	2331      	movs	r3, #49	@ 0x31
 8014ca4:	f806 3b01 	strb.w	r3, [r6], #1
 8014ca8:	9b04      	ldr	r3, [sp, #16]
 8014caa:	3301      	adds	r3, #1
 8014cac:	9304      	str	r3, [sp, #16]
 8014cae:	e6ae      	b.n	8014a0e <_dtoa_r+0x696>
 8014cb0:	9c07      	ldr	r4, [sp, #28]
 8014cb2:	9704      	str	r7, [sp, #16]
 8014cb4:	4625      	mov	r5, r4
 8014cb6:	e7f3      	b.n	8014ca0 <_dtoa_r+0x928>
 8014cb8:	9b07      	ldr	r3, [sp, #28]
 8014cba:	9300      	str	r3, [sp, #0]
 8014cbc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014cbe:	2b00      	cmp	r3, #0
 8014cc0:	f000 8104 	beq.w	8014ecc <_dtoa_r+0xb54>
 8014cc4:	2e00      	cmp	r6, #0
 8014cc6:	dd05      	ble.n	8014cd4 <_dtoa_r+0x95c>
 8014cc8:	4629      	mov	r1, r5
 8014cca:	4632      	mov	r2, r6
 8014ccc:	4658      	mov	r0, fp
 8014cce:	f000 fb6f 	bl	80153b0 <__lshift>
 8014cd2:	4605      	mov	r5, r0
 8014cd4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014cd6:	2b00      	cmp	r3, #0
 8014cd8:	d05a      	beq.n	8014d90 <_dtoa_r+0xa18>
 8014cda:	6869      	ldr	r1, [r5, #4]
 8014cdc:	4658      	mov	r0, fp
 8014cde:	f000 f959 	bl	8014f94 <_Balloc>
 8014ce2:	4606      	mov	r6, r0
 8014ce4:	b928      	cbnz	r0, 8014cf2 <_dtoa_r+0x97a>
 8014ce6:	4b84      	ldr	r3, [pc, #528]	@ (8014ef8 <_dtoa_r+0xb80>)
 8014ce8:	4602      	mov	r2, r0
 8014cea:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8014cee:	f7ff bb5a 	b.w	80143a6 <_dtoa_r+0x2e>
 8014cf2:	692a      	ldr	r2, [r5, #16]
 8014cf4:	3202      	adds	r2, #2
 8014cf6:	0092      	lsls	r2, r2, #2
 8014cf8:	f105 010c 	add.w	r1, r5, #12
 8014cfc:	300c      	adds	r0, #12
 8014cfe:	f7ff faa4 	bl	801424a <memcpy>
 8014d02:	2201      	movs	r2, #1
 8014d04:	4631      	mov	r1, r6
 8014d06:	4658      	mov	r0, fp
 8014d08:	f000 fb52 	bl	80153b0 <__lshift>
 8014d0c:	f10a 0301 	add.w	r3, sl, #1
 8014d10:	9307      	str	r3, [sp, #28]
 8014d12:	9b00      	ldr	r3, [sp, #0]
 8014d14:	4453      	add	r3, sl
 8014d16:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014d18:	9b02      	ldr	r3, [sp, #8]
 8014d1a:	f003 0301 	and.w	r3, r3, #1
 8014d1e:	462f      	mov	r7, r5
 8014d20:	930a      	str	r3, [sp, #40]	@ 0x28
 8014d22:	4605      	mov	r5, r0
 8014d24:	9b07      	ldr	r3, [sp, #28]
 8014d26:	4621      	mov	r1, r4
 8014d28:	3b01      	subs	r3, #1
 8014d2a:	4648      	mov	r0, r9
 8014d2c:	9300      	str	r3, [sp, #0]
 8014d2e:	f7ff fa9a 	bl	8014266 <quorem>
 8014d32:	4639      	mov	r1, r7
 8014d34:	9002      	str	r0, [sp, #8]
 8014d36:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8014d3a:	4648      	mov	r0, r9
 8014d3c:	f000 fba4 	bl	8015488 <__mcmp>
 8014d40:	462a      	mov	r2, r5
 8014d42:	9008      	str	r0, [sp, #32]
 8014d44:	4621      	mov	r1, r4
 8014d46:	4658      	mov	r0, fp
 8014d48:	f000 fbba 	bl	80154c0 <__mdiff>
 8014d4c:	68c2      	ldr	r2, [r0, #12]
 8014d4e:	4606      	mov	r6, r0
 8014d50:	bb02      	cbnz	r2, 8014d94 <_dtoa_r+0xa1c>
 8014d52:	4601      	mov	r1, r0
 8014d54:	4648      	mov	r0, r9
 8014d56:	f000 fb97 	bl	8015488 <__mcmp>
 8014d5a:	4602      	mov	r2, r0
 8014d5c:	4631      	mov	r1, r6
 8014d5e:	4658      	mov	r0, fp
 8014d60:	920e      	str	r2, [sp, #56]	@ 0x38
 8014d62:	f000 f957 	bl	8015014 <_Bfree>
 8014d66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014d68:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014d6a:	9e07      	ldr	r6, [sp, #28]
 8014d6c:	ea43 0102 	orr.w	r1, r3, r2
 8014d70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014d72:	4319      	orrs	r1, r3
 8014d74:	d110      	bne.n	8014d98 <_dtoa_r+0xa20>
 8014d76:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8014d7a:	d029      	beq.n	8014dd0 <_dtoa_r+0xa58>
 8014d7c:	9b08      	ldr	r3, [sp, #32]
 8014d7e:	2b00      	cmp	r3, #0
 8014d80:	dd02      	ble.n	8014d88 <_dtoa_r+0xa10>
 8014d82:	9b02      	ldr	r3, [sp, #8]
 8014d84:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8014d88:	9b00      	ldr	r3, [sp, #0]
 8014d8a:	f883 8000 	strb.w	r8, [r3]
 8014d8e:	e63f      	b.n	8014a10 <_dtoa_r+0x698>
 8014d90:	4628      	mov	r0, r5
 8014d92:	e7bb      	b.n	8014d0c <_dtoa_r+0x994>
 8014d94:	2201      	movs	r2, #1
 8014d96:	e7e1      	b.n	8014d5c <_dtoa_r+0x9e4>
 8014d98:	9b08      	ldr	r3, [sp, #32]
 8014d9a:	2b00      	cmp	r3, #0
 8014d9c:	db04      	blt.n	8014da8 <_dtoa_r+0xa30>
 8014d9e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8014da0:	430b      	orrs	r3, r1
 8014da2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8014da4:	430b      	orrs	r3, r1
 8014da6:	d120      	bne.n	8014dea <_dtoa_r+0xa72>
 8014da8:	2a00      	cmp	r2, #0
 8014daa:	dded      	ble.n	8014d88 <_dtoa_r+0xa10>
 8014dac:	4649      	mov	r1, r9
 8014dae:	2201      	movs	r2, #1
 8014db0:	4658      	mov	r0, fp
 8014db2:	f000 fafd 	bl	80153b0 <__lshift>
 8014db6:	4621      	mov	r1, r4
 8014db8:	4681      	mov	r9, r0
 8014dba:	f000 fb65 	bl	8015488 <__mcmp>
 8014dbe:	2800      	cmp	r0, #0
 8014dc0:	dc03      	bgt.n	8014dca <_dtoa_r+0xa52>
 8014dc2:	d1e1      	bne.n	8014d88 <_dtoa_r+0xa10>
 8014dc4:	f018 0f01 	tst.w	r8, #1
 8014dc8:	d0de      	beq.n	8014d88 <_dtoa_r+0xa10>
 8014dca:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8014dce:	d1d8      	bne.n	8014d82 <_dtoa_r+0xa0a>
 8014dd0:	9a00      	ldr	r2, [sp, #0]
 8014dd2:	2339      	movs	r3, #57	@ 0x39
 8014dd4:	7013      	strb	r3, [r2, #0]
 8014dd6:	4633      	mov	r3, r6
 8014dd8:	461e      	mov	r6, r3
 8014dda:	3b01      	subs	r3, #1
 8014ddc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8014de0:	2a39      	cmp	r2, #57	@ 0x39
 8014de2:	d052      	beq.n	8014e8a <_dtoa_r+0xb12>
 8014de4:	3201      	adds	r2, #1
 8014de6:	701a      	strb	r2, [r3, #0]
 8014de8:	e612      	b.n	8014a10 <_dtoa_r+0x698>
 8014dea:	2a00      	cmp	r2, #0
 8014dec:	dd07      	ble.n	8014dfe <_dtoa_r+0xa86>
 8014dee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8014df2:	d0ed      	beq.n	8014dd0 <_dtoa_r+0xa58>
 8014df4:	9a00      	ldr	r2, [sp, #0]
 8014df6:	f108 0301 	add.w	r3, r8, #1
 8014dfa:	7013      	strb	r3, [r2, #0]
 8014dfc:	e608      	b.n	8014a10 <_dtoa_r+0x698>
 8014dfe:	9b07      	ldr	r3, [sp, #28]
 8014e00:	9a07      	ldr	r2, [sp, #28]
 8014e02:	f803 8c01 	strb.w	r8, [r3, #-1]
 8014e06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014e08:	4293      	cmp	r3, r2
 8014e0a:	d028      	beq.n	8014e5e <_dtoa_r+0xae6>
 8014e0c:	4649      	mov	r1, r9
 8014e0e:	2300      	movs	r3, #0
 8014e10:	220a      	movs	r2, #10
 8014e12:	4658      	mov	r0, fp
 8014e14:	f000 f920 	bl	8015058 <__multadd>
 8014e18:	42af      	cmp	r7, r5
 8014e1a:	4681      	mov	r9, r0
 8014e1c:	f04f 0300 	mov.w	r3, #0
 8014e20:	f04f 020a 	mov.w	r2, #10
 8014e24:	4639      	mov	r1, r7
 8014e26:	4658      	mov	r0, fp
 8014e28:	d107      	bne.n	8014e3a <_dtoa_r+0xac2>
 8014e2a:	f000 f915 	bl	8015058 <__multadd>
 8014e2e:	4607      	mov	r7, r0
 8014e30:	4605      	mov	r5, r0
 8014e32:	9b07      	ldr	r3, [sp, #28]
 8014e34:	3301      	adds	r3, #1
 8014e36:	9307      	str	r3, [sp, #28]
 8014e38:	e774      	b.n	8014d24 <_dtoa_r+0x9ac>
 8014e3a:	f000 f90d 	bl	8015058 <__multadd>
 8014e3e:	4629      	mov	r1, r5
 8014e40:	4607      	mov	r7, r0
 8014e42:	2300      	movs	r3, #0
 8014e44:	220a      	movs	r2, #10
 8014e46:	4658      	mov	r0, fp
 8014e48:	f000 f906 	bl	8015058 <__multadd>
 8014e4c:	4605      	mov	r5, r0
 8014e4e:	e7f0      	b.n	8014e32 <_dtoa_r+0xaba>
 8014e50:	9b00      	ldr	r3, [sp, #0]
 8014e52:	2b00      	cmp	r3, #0
 8014e54:	bfcc      	ite	gt
 8014e56:	461e      	movgt	r6, r3
 8014e58:	2601      	movle	r6, #1
 8014e5a:	4456      	add	r6, sl
 8014e5c:	2700      	movs	r7, #0
 8014e5e:	4649      	mov	r1, r9
 8014e60:	2201      	movs	r2, #1
 8014e62:	4658      	mov	r0, fp
 8014e64:	f000 faa4 	bl	80153b0 <__lshift>
 8014e68:	4621      	mov	r1, r4
 8014e6a:	4681      	mov	r9, r0
 8014e6c:	f000 fb0c 	bl	8015488 <__mcmp>
 8014e70:	2800      	cmp	r0, #0
 8014e72:	dcb0      	bgt.n	8014dd6 <_dtoa_r+0xa5e>
 8014e74:	d102      	bne.n	8014e7c <_dtoa_r+0xb04>
 8014e76:	f018 0f01 	tst.w	r8, #1
 8014e7a:	d1ac      	bne.n	8014dd6 <_dtoa_r+0xa5e>
 8014e7c:	4633      	mov	r3, r6
 8014e7e:	461e      	mov	r6, r3
 8014e80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014e84:	2a30      	cmp	r2, #48	@ 0x30
 8014e86:	d0fa      	beq.n	8014e7e <_dtoa_r+0xb06>
 8014e88:	e5c2      	b.n	8014a10 <_dtoa_r+0x698>
 8014e8a:	459a      	cmp	sl, r3
 8014e8c:	d1a4      	bne.n	8014dd8 <_dtoa_r+0xa60>
 8014e8e:	9b04      	ldr	r3, [sp, #16]
 8014e90:	3301      	adds	r3, #1
 8014e92:	9304      	str	r3, [sp, #16]
 8014e94:	2331      	movs	r3, #49	@ 0x31
 8014e96:	f88a 3000 	strb.w	r3, [sl]
 8014e9a:	e5b9      	b.n	8014a10 <_dtoa_r+0x698>
 8014e9c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8014e9e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8014efc <_dtoa_r+0xb84>
 8014ea2:	b11b      	cbz	r3, 8014eac <_dtoa_r+0xb34>
 8014ea4:	f10a 0308 	add.w	r3, sl, #8
 8014ea8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8014eaa:	6013      	str	r3, [r2, #0]
 8014eac:	4650      	mov	r0, sl
 8014eae:	b019      	add	sp, #100	@ 0x64
 8014eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014eb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014eb6:	2b01      	cmp	r3, #1
 8014eb8:	f77f ae37 	ble.w	8014b2a <_dtoa_r+0x7b2>
 8014ebc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014ebe:	930a      	str	r3, [sp, #40]	@ 0x28
 8014ec0:	2001      	movs	r0, #1
 8014ec2:	e655      	b.n	8014b70 <_dtoa_r+0x7f8>
 8014ec4:	9b00      	ldr	r3, [sp, #0]
 8014ec6:	2b00      	cmp	r3, #0
 8014ec8:	f77f aed6 	ble.w	8014c78 <_dtoa_r+0x900>
 8014ecc:	4656      	mov	r6, sl
 8014ece:	4621      	mov	r1, r4
 8014ed0:	4648      	mov	r0, r9
 8014ed2:	f7ff f9c8 	bl	8014266 <quorem>
 8014ed6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8014eda:	f806 8b01 	strb.w	r8, [r6], #1
 8014ede:	9b00      	ldr	r3, [sp, #0]
 8014ee0:	eba6 020a 	sub.w	r2, r6, sl
 8014ee4:	4293      	cmp	r3, r2
 8014ee6:	ddb3      	ble.n	8014e50 <_dtoa_r+0xad8>
 8014ee8:	4649      	mov	r1, r9
 8014eea:	2300      	movs	r3, #0
 8014eec:	220a      	movs	r2, #10
 8014eee:	4658      	mov	r0, fp
 8014ef0:	f000 f8b2 	bl	8015058 <__multadd>
 8014ef4:	4681      	mov	r9, r0
 8014ef6:	e7ea      	b.n	8014ece <_dtoa_r+0xb56>
 8014ef8:	080d3d20 	.word	0x080d3d20
 8014efc:	080d3ca4 	.word	0x080d3ca4

08014f00 <_free_r>:
 8014f00:	b538      	push	{r3, r4, r5, lr}
 8014f02:	4605      	mov	r5, r0
 8014f04:	2900      	cmp	r1, #0
 8014f06:	d041      	beq.n	8014f8c <_free_r+0x8c>
 8014f08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014f0c:	1f0c      	subs	r4, r1, #4
 8014f0e:	2b00      	cmp	r3, #0
 8014f10:	bfb8      	it	lt
 8014f12:	18e4      	addlt	r4, r4, r3
 8014f14:	f7fe fa9c 	bl	8013450 <__malloc_lock>
 8014f18:	4a1d      	ldr	r2, [pc, #116]	@ (8014f90 <_free_r+0x90>)
 8014f1a:	6813      	ldr	r3, [r2, #0]
 8014f1c:	b933      	cbnz	r3, 8014f2c <_free_r+0x2c>
 8014f1e:	6063      	str	r3, [r4, #4]
 8014f20:	6014      	str	r4, [r2, #0]
 8014f22:	4628      	mov	r0, r5
 8014f24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014f28:	f7fe ba98 	b.w	801345c <__malloc_unlock>
 8014f2c:	42a3      	cmp	r3, r4
 8014f2e:	d908      	bls.n	8014f42 <_free_r+0x42>
 8014f30:	6820      	ldr	r0, [r4, #0]
 8014f32:	1821      	adds	r1, r4, r0
 8014f34:	428b      	cmp	r3, r1
 8014f36:	bf01      	itttt	eq
 8014f38:	6819      	ldreq	r1, [r3, #0]
 8014f3a:	685b      	ldreq	r3, [r3, #4]
 8014f3c:	1809      	addeq	r1, r1, r0
 8014f3e:	6021      	streq	r1, [r4, #0]
 8014f40:	e7ed      	b.n	8014f1e <_free_r+0x1e>
 8014f42:	461a      	mov	r2, r3
 8014f44:	685b      	ldr	r3, [r3, #4]
 8014f46:	b10b      	cbz	r3, 8014f4c <_free_r+0x4c>
 8014f48:	42a3      	cmp	r3, r4
 8014f4a:	d9fa      	bls.n	8014f42 <_free_r+0x42>
 8014f4c:	6811      	ldr	r1, [r2, #0]
 8014f4e:	1850      	adds	r0, r2, r1
 8014f50:	42a0      	cmp	r0, r4
 8014f52:	d10b      	bne.n	8014f6c <_free_r+0x6c>
 8014f54:	6820      	ldr	r0, [r4, #0]
 8014f56:	4401      	add	r1, r0
 8014f58:	1850      	adds	r0, r2, r1
 8014f5a:	4283      	cmp	r3, r0
 8014f5c:	6011      	str	r1, [r2, #0]
 8014f5e:	d1e0      	bne.n	8014f22 <_free_r+0x22>
 8014f60:	6818      	ldr	r0, [r3, #0]
 8014f62:	685b      	ldr	r3, [r3, #4]
 8014f64:	6053      	str	r3, [r2, #4]
 8014f66:	4408      	add	r0, r1
 8014f68:	6010      	str	r0, [r2, #0]
 8014f6a:	e7da      	b.n	8014f22 <_free_r+0x22>
 8014f6c:	d902      	bls.n	8014f74 <_free_r+0x74>
 8014f6e:	230c      	movs	r3, #12
 8014f70:	602b      	str	r3, [r5, #0]
 8014f72:	e7d6      	b.n	8014f22 <_free_r+0x22>
 8014f74:	6820      	ldr	r0, [r4, #0]
 8014f76:	1821      	adds	r1, r4, r0
 8014f78:	428b      	cmp	r3, r1
 8014f7a:	bf04      	itt	eq
 8014f7c:	6819      	ldreq	r1, [r3, #0]
 8014f7e:	685b      	ldreq	r3, [r3, #4]
 8014f80:	6063      	str	r3, [r4, #4]
 8014f82:	bf04      	itt	eq
 8014f84:	1809      	addeq	r1, r1, r0
 8014f86:	6021      	streq	r1, [r4, #0]
 8014f88:	6054      	str	r4, [r2, #4]
 8014f8a:	e7ca      	b.n	8014f22 <_free_r+0x22>
 8014f8c:	bd38      	pop	{r3, r4, r5, pc}
 8014f8e:	bf00      	nop
 8014f90:	2001eb04 	.word	0x2001eb04

08014f94 <_Balloc>:
 8014f94:	b570      	push	{r4, r5, r6, lr}
 8014f96:	69c6      	ldr	r6, [r0, #28]
 8014f98:	4604      	mov	r4, r0
 8014f9a:	460d      	mov	r5, r1
 8014f9c:	b976      	cbnz	r6, 8014fbc <_Balloc+0x28>
 8014f9e:	2010      	movs	r0, #16
 8014fa0:	f7fe f9ac 	bl	80132fc <malloc>
 8014fa4:	4602      	mov	r2, r0
 8014fa6:	61e0      	str	r0, [r4, #28]
 8014fa8:	b920      	cbnz	r0, 8014fb4 <_Balloc+0x20>
 8014faa:	4b18      	ldr	r3, [pc, #96]	@ (801500c <_Balloc+0x78>)
 8014fac:	4818      	ldr	r0, [pc, #96]	@ (8015010 <_Balloc+0x7c>)
 8014fae:	216b      	movs	r1, #107	@ 0x6b
 8014fb0:	f000 fde4 	bl	8015b7c <__assert_func>
 8014fb4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014fb8:	6006      	str	r6, [r0, #0]
 8014fba:	60c6      	str	r6, [r0, #12]
 8014fbc:	69e6      	ldr	r6, [r4, #28]
 8014fbe:	68f3      	ldr	r3, [r6, #12]
 8014fc0:	b183      	cbz	r3, 8014fe4 <_Balloc+0x50>
 8014fc2:	69e3      	ldr	r3, [r4, #28]
 8014fc4:	68db      	ldr	r3, [r3, #12]
 8014fc6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8014fca:	b9b8      	cbnz	r0, 8014ffc <_Balloc+0x68>
 8014fcc:	2101      	movs	r1, #1
 8014fce:	fa01 f605 	lsl.w	r6, r1, r5
 8014fd2:	1d72      	adds	r2, r6, #5
 8014fd4:	0092      	lsls	r2, r2, #2
 8014fd6:	4620      	mov	r0, r4
 8014fd8:	f000 fdee 	bl	8015bb8 <_calloc_r>
 8014fdc:	b160      	cbz	r0, 8014ff8 <_Balloc+0x64>
 8014fde:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8014fe2:	e00e      	b.n	8015002 <_Balloc+0x6e>
 8014fe4:	2221      	movs	r2, #33	@ 0x21
 8014fe6:	2104      	movs	r1, #4
 8014fe8:	4620      	mov	r0, r4
 8014fea:	f000 fde5 	bl	8015bb8 <_calloc_r>
 8014fee:	69e3      	ldr	r3, [r4, #28]
 8014ff0:	60f0      	str	r0, [r6, #12]
 8014ff2:	68db      	ldr	r3, [r3, #12]
 8014ff4:	2b00      	cmp	r3, #0
 8014ff6:	d1e4      	bne.n	8014fc2 <_Balloc+0x2e>
 8014ff8:	2000      	movs	r0, #0
 8014ffa:	bd70      	pop	{r4, r5, r6, pc}
 8014ffc:	6802      	ldr	r2, [r0, #0]
 8014ffe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015002:	2300      	movs	r3, #0
 8015004:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015008:	e7f7      	b.n	8014ffa <_Balloc+0x66>
 801500a:	bf00      	nop
 801500c:	080d3cb1 	.word	0x080d3cb1
 8015010:	080d3d31 	.word	0x080d3d31

08015014 <_Bfree>:
 8015014:	b570      	push	{r4, r5, r6, lr}
 8015016:	69c6      	ldr	r6, [r0, #28]
 8015018:	4605      	mov	r5, r0
 801501a:	460c      	mov	r4, r1
 801501c:	b976      	cbnz	r6, 801503c <_Bfree+0x28>
 801501e:	2010      	movs	r0, #16
 8015020:	f7fe f96c 	bl	80132fc <malloc>
 8015024:	4602      	mov	r2, r0
 8015026:	61e8      	str	r0, [r5, #28]
 8015028:	b920      	cbnz	r0, 8015034 <_Bfree+0x20>
 801502a:	4b09      	ldr	r3, [pc, #36]	@ (8015050 <_Bfree+0x3c>)
 801502c:	4809      	ldr	r0, [pc, #36]	@ (8015054 <_Bfree+0x40>)
 801502e:	218f      	movs	r1, #143	@ 0x8f
 8015030:	f000 fda4 	bl	8015b7c <__assert_func>
 8015034:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015038:	6006      	str	r6, [r0, #0]
 801503a:	60c6      	str	r6, [r0, #12]
 801503c:	b13c      	cbz	r4, 801504e <_Bfree+0x3a>
 801503e:	69eb      	ldr	r3, [r5, #28]
 8015040:	6862      	ldr	r2, [r4, #4]
 8015042:	68db      	ldr	r3, [r3, #12]
 8015044:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015048:	6021      	str	r1, [r4, #0]
 801504a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801504e:	bd70      	pop	{r4, r5, r6, pc}
 8015050:	080d3cb1 	.word	0x080d3cb1
 8015054:	080d3d31 	.word	0x080d3d31

08015058 <__multadd>:
 8015058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801505c:	690d      	ldr	r5, [r1, #16]
 801505e:	4607      	mov	r7, r0
 8015060:	460c      	mov	r4, r1
 8015062:	461e      	mov	r6, r3
 8015064:	f101 0c14 	add.w	ip, r1, #20
 8015068:	2000      	movs	r0, #0
 801506a:	f8dc 3000 	ldr.w	r3, [ip]
 801506e:	b299      	uxth	r1, r3
 8015070:	fb02 6101 	mla	r1, r2, r1, r6
 8015074:	0c1e      	lsrs	r6, r3, #16
 8015076:	0c0b      	lsrs	r3, r1, #16
 8015078:	fb02 3306 	mla	r3, r2, r6, r3
 801507c:	b289      	uxth	r1, r1
 801507e:	3001      	adds	r0, #1
 8015080:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8015084:	4285      	cmp	r5, r0
 8015086:	f84c 1b04 	str.w	r1, [ip], #4
 801508a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801508e:	dcec      	bgt.n	801506a <__multadd+0x12>
 8015090:	b30e      	cbz	r6, 80150d6 <__multadd+0x7e>
 8015092:	68a3      	ldr	r3, [r4, #8]
 8015094:	42ab      	cmp	r3, r5
 8015096:	dc19      	bgt.n	80150cc <__multadd+0x74>
 8015098:	6861      	ldr	r1, [r4, #4]
 801509a:	4638      	mov	r0, r7
 801509c:	3101      	adds	r1, #1
 801509e:	f7ff ff79 	bl	8014f94 <_Balloc>
 80150a2:	4680      	mov	r8, r0
 80150a4:	b928      	cbnz	r0, 80150b2 <__multadd+0x5a>
 80150a6:	4602      	mov	r2, r0
 80150a8:	4b0c      	ldr	r3, [pc, #48]	@ (80150dc <__multadd+0x84>)
 80150aa:	480d      	ldr	r0, [pc, #52]	@ (80150e0 <__multadd+0x88>)
 80150ac:	21ba      	movs	r1, #186	@ 0xba
 80150ae:	f000 fd65 	bl	8015b7c <__assert_func>
 80150b2:	6922      	ldr	r2, [r4, #16]
 80150b4:	3202      	adds	r2, #2
 80150b6:	f104 010c 	add.w	r1, r4, #12
 80150ba:	0092      	lsls	r2, r2, #2
 80150bc:	300c      	adds	r0, #12
 80150be:	f7ff f8c4 	bl	801424a <memcpy>
 80150c2:	4621      	mov	r1, r4
 80150c4:	4638      	mov	r0, r7
 80150c6:	f7ff ffa5 	bl	8015014 <_Bfree>
 80150ca:	4644      	mov	r4, r8
 80150cc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80150d0:	3501      	adds	r5, #1
 80150d2:	615e      	str	r6, [r3, #20]
 80150d4:	6125      	str	r5, [r4, #16]
 80150d6:	4620      	mov	r0, r4
 80150d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80150dc:	080d3d20 	.word	0x080d3d20
 80150e0:	080d3d31 	.word	0x080d3d31

080150e4 <__hi0bits>:
 80150e4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80150e8:	4603      	mov	r3, r0
 80150ea:	bf36      	itet	cc
 80150ec:	0403      	lslcc	r3, r0, #16
 80150ee:	2000      	movcs	r0, #0
 80150f0:	2010      	movcc	r0, #16
 80150f2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80150f6:	bf3c      	itt	cc
 80150f8:	021b      	lslcc	r3, r3, #8
 80150fa:	3008      	addcc	r0, #8
 80150fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8015100:	bf3c      	itt	cc
 8015102:	011b      	lslcc	r3, r3, #4
 8015104:	3004      	addcc	r0, #4
 8015106:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801510a:	bf3c      	itt	cc
 801510c:	009b      	lslcc	r3, r3, #2
 801510e:	3002      	addcc	r0, #2
 8015110:	2b00      	cmp	r3, #0
 8015112:	db05      	blt.n	8015120 <__hi0bits+0x3c>
 8015114:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8015118:	f100 0001 	add.w	r0, r0, #1
 801511c:	bf08      	it	eq
 801511e:	2020      	moveq	r0, #32
 8015120:	4770      	bx	lr

08015122 <__lo0bits>:
 8015122:	6803      	ldr	r3, [r0, #0]
 8015124:	4602      	mov	r2, r0
 8015126:	f013 0007 	ands.w	r0, r3, #7
 801512a:	d00b      	beq.n	8015144 <__lo0bits+0x22>
 801512c:	07d9      	lsls	r1, r3, #31
 801512e:	d421      	bmi.n	8015174 <__lo0bits+0x52>
 8015130:	0798      	lsls	r0, r3, #30
 8015132:	bf49      	itett	mi
 8015134:	085b      	lsrmi	r3, r3, #1
 8015136:	089b      	lsrpl	r3, r3, #2
 8015138:	2001      	movmi	r0, #1
 801513a:	6013      	strmi	r3, [r2, #0]
 801513c:	bf5c      	itt	pl
 801513e:	6013      	strpl	r3, [r2, #0]
 8015140:	2002      	movpl	r0, #2
 8015142:	4770      	bx	lr
 8015144:	b299      	uxth	r1, r3
 8015146:	b909      	cbnz	r1, 801514c <__lo0bits+0x2a>
 8015148:	0c1b      	lsrs	r3, r3, #16
 801514a:	2010      	movs	r0, #16
 801514c:	b2d9      	uxtb	r1, r3
 801514e:	b909      	cbnz	r1, 8015154 <__lo0bits+0x32>
 8015150:	3008      	adds	r0, #8
 8015152:	0a1b      	lsrs	r3, r3, #8
 8015154:	0719      	lsls	r1, r3, #28
 8015156:	bf04      	itt	eq
 8015158:	091b      	lsreq	r3, r3, #4
 801515a:	3004      	addeq	r0, #4
 801515c:	0799      	lsls	r1, r3, #30
 801515e:	bf04      	itt	eq
 8015160:	089b      	lsreq	r3, r3, #2
 8015162:	3002      	addeq	r0, #2
 8015164:	07d9      	lsls	r1, r3, #31
 8015166:	d403      	bmi.n	8015170 <__lo0bits+0x4e>
 8015168:	085b      	lsrs	r3, r3, #1
 801516a:	f100 0001 	add.w	r0, r0, #1
 801516e:	d003      	beq.n	8015178 <__lo0bits+0x56>
 8015170:	6013      	str	r3, [r2, #0]
 8015172:	4770      	bx	lr
 8015174:	2000      	movs	r0, #0
 8015176:	4770      	bx	lr
 8015178:	2020      	movs	r0, #32
 801517a:	4770      	bx	lr

0801517c <__i2b>:
 801517c:	b510      	push	{r4, lr}
 801517e:	460c      	mov	r4, r1
 8015180:	2101      	movs	r1, #1
 8015182:	f7ff ff07 	bl	8014f94 <_Balloc>
 8015186:	4602      	mov	r2, r0
 8015188:	b928      	cbnz	r0, 8015196 <__i2b+0x1a>
 801518a:	4b05      	ldr	r3, [pc, #20]	@ (80151a0 <__i2b+0x24>)
 801518c:	4805      	ldr	r0, [pc, #20]	@ (80151a4 <__i2b+0x28>)
 801518e:	f240 1145 	movw	r1, #325	@ 0x145
 8015192:	f000 fcf3 	bl	8015b7c <__assert_func>
 8015196:	2301      	movs	r3, #1
 8015198:	6144      	str	r4, [r0, #20]
 801519a:	6103      	str	r3, [r0, #16]
 801519c:	bd10      	pop	{r4, pc}
 801519e:	bf00      	nop
 80151a0:	080d3d20 	.word	0x080d3d20
 80151a4:	080d3d31 	.word	0x080d3d31

080151a8 <__multiply>:
 80151a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80151ac:	4614      	mov	r4, r2
 80151ae:	690a      	ldr	r2, [r1, #16]
 80151b0:	6923      	ldr	r3, [r4, #16]
 80151b2:	429a      	cmp	r2, r3
 80151b4:	bfa8      	it	ge
 80151b6:	4623      	movge	r3, r4
 80151b8:	460f      	mov	r7, r1
 80151ba:	bfa4      	itt	ge
 80151bc:	460c      	movge	r4, r1
 80151be:	461f      	movge	r7, r3
 80151c0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80151c4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80151c8:	68a3      	ldr	r3, [r4, #8]
 80151ca:	6861      	ldr	r1, [r4, #4]
 80151cc:	eb0a 0609 	add.w	r6, sl, r9
 80151d0:	42b3      	cmp	r3, r6
 80151d2:	b085      	sub	sp, #20
 80151d4:	bfb8      	it	lt
 80151d6:	3101      	addlt	r1, #1
 80151d8:	f7ff fedc 	bl	8014f94 <_Balloc>
 80151dc:	b930      	cbnz	r0, 80151ec <__multiply+0x44>
 80151de:	4602      	mov	r2, r0
 80151e0:	4b44      	ldr	r3, [pc, #272]	@ (80152f4 <__multiply+0x14c>)
 80151e2:	4845      	ldr	r0, [pc, #276]	@ (80152f8 <__multiply+0x150>)
 80151e4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80151e8:	f000 fcc8 	bl	8015b7c <__assert_func>
 80151ec:	f100 0514 	add.w	r5, r0, #20
 80151f0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80151f4:	462b      	mov	r3, r5
 80151f6:	2200      	movs	r2, #0
 80151f8:	4543      	cmp	r3, r8
 80151fa:	d321      	bcc.n	8015240 <__multiply+0x98>
 80151fc:	f107 0114 	add.w	r1, r7, #20
 8015200:	f104 0214 	add.w	r2, r4, #20
 8015204:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8015208:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801520c:	9302      	str	r3, [sp, #8]
 801520e:	1b13      	subs	r3, r2, r4
 8015210:	3b15      	subs	r3, #21
 8015212:	f023 0303 	bic.w	r3, r3, #3
 8015216:	3304      	adds	r3, #4
 8015218:	f104 0715 	add.w	r7, r4, #21
 801521c:	42ba      	cmp	r2, r7
 801521e:	bf38      	it	cc
 8015220:	2304      	movcc	r3, #4
 8015222:	9301      	str	r3, [sp, #4]
 8015224:	9b02      	ldr	r3, [sp, #8]
 8015226:	9103      	str	r1, [sp, #12]
 8015228:	428b      	cmp	r3, r1
 801522a:	d80c      	bhi.n	8015246 <__multiply+0x9e>
 801522c:	2e00      	cmp	r6, #0
 801522e:	dd03      	ble.n	8015238 <__multiply+0x90>
 8015230:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8015234:	2b00      	cmp	r3, #0
 8015236:	d05b      	beq.n	80152f0 <__multiply+0x148>
 8015238:	6106      	str	r6, [r0, #16]
 801523a:	b005      	add	sp, #20
 801523c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015240:	f843 2b04 	str.w	r2, [r3], #4
 8015244:	e7d8      	b.n	80151f8 <__multiply+0x50>
 8015246:	f8b1 a000 	ldrh.w	sl, [r1]
 801524a:	f1ba 0f00 	cmp.w	sl, #0
 801524e:	d024      	beq.n	801529a <__multiply+0xf2>
 8015250:	f104 0e14 	add.w	lr, r4, #20
 8015254:	46a9      	mov	r9, r5
 8015256:	f04f 0c00 	mov.w	ip, #0
 801525a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801525e:	f8d9 3000 	ldr.w	r3, [r9]
 8015262:	fa1f fb87 	uxth.w	fp, r7
 8015266:	b29b      	uxth	r3, r3
 8015268:	fb0a 330b 	mla	r3, sl, fp, r3
 801526c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8015270:	f8d9 7000 	ldr.w	r7, [r9]
 8015274:	4463      	add	r3, ip
 8015276:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801527a:	fb0a c70b 	mla	r7, sl, fp, ip
 801527e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8015282:	b29b      	uxth	r3, r3
 8015284:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8015288:	4572      	cmp	r2, lr
 801528a:	f849 3b04 	str.w	r3, [r9], #4
 801528e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8015292:	d8e2      	bhi.n	801525a <__multiply+0xb2>
 8015294:	9b01      	ldr	r3, [sp, #4]
 8015296:	f845 c003 	str.w	ip, [r5, r3]
 801529a:	9b03      	ldr	r3, [sp, #12]
 801529c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80152a0:	3104      	adds	r1, #4
 80152a2:	f1b9 0f00 	cmp.w	r9, #0
 80152a6:	d021      	beq.n	80152ec <__multiply+0x144>
 80152a8:	682b      	ldr	r3, [r5, #0]
 80152aa:	f104 0c14 	add.w	ip, r4, #20
 80152ae:	46ae      	mov	lr, r5
 80152b0:	f04f 0a00 	mov.w	sl, #0
 80152b4:	f8bc b000 	ldrh.w	fp, [ip]
 80152b8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80152bc:	fb09 770b 	mla	r7, r9, fp, r7
 80152c0:	4457      	add	r7, sl
 80152c2:	b29b      	uxth	r3, r3
 80152c4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80152c8:	f84e 3b04 	str.w	r3, [lr], #4
 80152cc:	f85c 3b04 	ldr.w	r3, [ip], #4
 80152d0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80152d4:	f8be 3000 	ldrh.w	r3, [lr]
 80152d8:	fb09 330a 	mla	r3, r9, sl, r3
 80152dc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80152e0:	4562      	cmp	r2, ip
 80152e2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80152e6:	d8e5      	bhi.n	80152b4 <__multiply+0x10c>
 80152e8:	9f01      	ldr	r7, [sp, #4]
 80152ea:	51eb      	str	r3, [r5, r7]
 80152ec:	3504      	adds	r5, #4
 80152ee:	e799      	b.n	8015224 <__multiply+0x7c>
 80152f0:	3e01      	subs	r6, #1
 80152f2:	e79b      	b.n	801522c <__multiply+0x84>
 80152f4:	080d3d20 	.word	0x080d3d20
 80152f8:	080d3d31 	.word	0x080d3d31

080152fc <__pow5mult>:
 80152fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015300:	4615      	mov	r5, r2
 8015302:	f012 0203 	ands.w	r2, r2, #3
 8015306:	4607      	mov	r7, r0
 8015308:	460e      	mov	r6, r1
 801530a:	d007      	beq.n	801531c <__pow5mult+0x20>
 801530c:	4c25      	ldr	r4, [pc, #148]	@ (80153a4 <__pow5mult+0xa8>)
 801530e:	3a01      	subs	r2, #1
 8015310:	2300      	movs	r3, #0
 8015312:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015316:	f7ff fe9f 	bl	8015058 <__multadd>
 801531a:	4606      	mov	r6, r0
 801531c:	10ad      	asrs	r5, r5, #2
 801531e:	d03d      	beq.n	801539c <__pow5mult+0xa0>
 8015320:	69fc      	ldr	r4, [r7, #28]
 8015322:	b97c      	cbnz	r4, 8015344 <__pow5mult+0x48>
 8015324:	2010      	movs	r0, #16
 8015326:	f7fd ffe9 	bl	80132fc <malloc>
 801532a:	4602      	mov	r2, r0
 801532c:	61f8      	str	r0, [r7, #28]
 801532e:	b928      	cbnz	r0, 801533c <__pow5mult+0x40>
 8015330:	4b1d      	ldr	r3, [pc, #116]	@ (80153a8 <__pow5mult+0xac>)
 8015332:	481e      	ldr	r0, [pc, #120]	@ (80153ac <__pow5mult+0xb0>)
 8015334:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8015338:	f000 fc20 	bl	8015b7c <__assert_func>
 801533c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015340:	6004      	str	r4, [r0, #0]
 8015342:	60c4      	str	r4, [r0, #12]
 8015344:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8015348:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801534c:	b94c      	cbnz	r4, 8015362 <__pow5mult+0x66>
 801534e:	f240 2171 	movw	r1, #625	@ 0x271
 8015352:	4638      	mov	r0, r7
 8015354:	f7ff ff12 	bl	801517c <__i2b>
 8015358:	2300      	movs	r3, #0
 801535a:	f8c8 0008 	str.w	r0, [r8, #8]
 801535e:	4604      	mov	r4, r0
 8015360:	6003      	str	r3, [r0, #0]
 8015362:	f04f 0900 	mov.w	r9, #0
 8015366:	07eb      	lsls	r3, r5, #31
 8015368:	d50a      	bpl.n	8015380 <__pow5mult+0x84>
 801536a:	4631      	mov	r1, r6
 801536c:	4622      	mov	r2, r4
 801536e:	4638      	mov	r0, r7
 8015370:	f7ff ff1a 	bl	80151a8 <__multiply>
 8015374:	4631      	mov	r1, r6
 8015376:	4680      	mov	r8, r0
 8015378:	4638      	mov	r0, r7
 801537a:	f7ff fe4b 	bl	8015014 <_Bfree>
 801537e:	4646      	mov	r6, r8
 8015380:	106d      	asrs	r5, r5, #1
 8015382:	d00b      	beq.n	801539c <__pow5mult+0xa0>
 8015384:	6820      	ldr	r0, [r4, #0]
 8015386:	b938      	cbnz	r0, 8015398 <__pow5mult+0x9c>
 8015388:	4622      	mov	r2, r4
 801538a:	4621      	mov	r1, r4
 801538c:	4638      	mov	r0, r7
 801538e:	f7ff ff0b 	bl	80151a8 <__multiply>
 8015392:	6020      	str	r0, [r4, #0]
 8015394:	f8c0 9000 	str.w	r9, [r0]
 8015398:	4604      	mov	r4, r0
 801539a:	e7e4      	b.n	8015366 <__pow5mult+0x6a>
 801539c:	4630      	mov	r0, r6
 801539e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80153a2:	bf00      	nop
 80153a4:	080d3d8c 	.word	0x080d3d8c
 80153a8:	080d3cb1 	.word	0x080d3cb1
 80153ac:	080d3d31 	.word	0x080d3d31

080153b0 <__lshift>:
 80153b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80153b4:	460c      	mov	r4, r1
 80153b6:	6849      	ldr	r1, [r1, #4]
 80153b8:	6923      	ldr	r3, [r4, #16]
 80153ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80153be:	68a3      	ldr	r3, [r4, #8]
 80153c0:	4607      	mov	r7, r0
 80153c2:	4691      	mov	r9, r2
 80153c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80153c8:	f108 0601 	add.w	r6, r8, #1
 80153cc:	42b3      	cmp	r3, r6
 80153ce:	db0b      	blt.n	80153e8 <__lshift+0x38>
 80153d0:	4638      	mov	r0, r7
 80153d2:	f7ff fddf 	bl	8014f94 <_Balloc>
 80153d6:	4605      	mov	r5, r0
 80153d8:	b948      	cbnz	r0, 80153ee <__lshift+0x3e>
 80153da:	4602      	mov	r2, r0
 80153dc:	4b28      	ldr	r3, [pc, #160]	@ (8015480 <__lshift+0xd0>)
 80153de:	4829      	ldr	r0, [pc, #164]	@ (8015484 <__lshift+0xd4>)
 80153e0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80153e4:	f000 fbca 	bl	8015b7c <__assert_func>
 80153e8:	3101      	adds	r1, #1
 80153ea:	005b      	lsls	r3, r3, #1
 80153ec:	e7ee      	b.n	80153cc <__lshift+0x1c>
 80153ee:	2300      	movs	r3, #0
 80153f0:	f100 0114 	add.w	r1, r0, #20
 80153f4:	f100 0210 	add.w	r2, r0, #16
 80153f8:	4618      	mov	r0, r3
 80153fa:	4553      	cmp	r3, sl
 80153fc:	db33      	blt.n	8015466 <__lshift+0xb6>
 80153fe:	6920      	ldr	r0, [r4, #16]
 8015400:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015404:	f104 0314 	add.w	r3, r4, #20
 8015408:	f019 091f 	ands.w	r9, r9, #31
 801540c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015410:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8015414:	d02b      	beq.n	801546e <__lshift+0xbe>
 8015416:	f1c9 0e20 	rsb	lr, r9, #32
 801541a:	468a      	mov	sl, r1
 801541c:	2200      	movs	r2, #0
 801541e:	6818      	ldr	r0, [r3, #0]
 8015420:	fa00 f009 	lsl.w	r0, r0, r9
 8015424:	4310      	orrs	r0, r2
 8015426:	f84a 0b04 	str.w	r0, [sl], #4
 801542a:	f853 2b04 	ldr.w	r2, [r3], #4
 801542e:	459c      	cmp	ip, r3
 8015430:	fa22 f20e 	lsr.w	r2, r2, lr
 8015434:	d8f3      	bhi.n	801541e <__lshift+0x6e>
 8015436:	ebac 0304 	sub.w	r3, ip, r4
 801543a:	3b15      	subs	r3, #21
 801543c:	f023 0303 	bic.w	r3, r3, #3
 8015440:	3304      	adds	r3, #4
 8015442:	f104 0015 	add.w	r0, r4, #21
 8015446:	4584      	cmp	ip, r0
 8015448:	bf38      	it	cc
 801544a:	2304      	movcc	r3, #4
 801544c:	50ca      	str	r2, [r1, r3]
 801544e:	b10a      	cbz	r2, 8015454 <__lshift+0xa4>
 8015450:	f108 0602 	add.w	r6, r8, #2
 8015454:	3e01      	subs	r6, #1
 8015456:	4638      	mov	r0, r7
 8015458:	612e      	str	r6, [r5, #16]
 801545a:	4621      	mov	r1, r4
 801545c:	f7ff fdda 	bl	8015014 <_Bfree>
 8015460:	4628      	mov	r0, r5
 8015462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015466:	f842 0f04 	str.w	r0, [r2, #4]!
 801546a:	3301      	adds	r3, #1
 801546c:	e7c5      	b.n	80153fa <__lshift+0x4a>
 801546e:	3904      	subs	r1, #4
 8015470:	f853 2b04 	ldr.w	r2, [r3], #4
 8015474:	f841 2f04 	str.w	r2, [r1, #4]!
 8015478:	459c      	cmp	ip, r3
 801547a:	d8f9      	bhi.n	8015470 <__lshift+0xc0>
 801547c:	e7ea      	b.n	8015454 <__lshift+0xa4>
 801547e:	bf00      	nop
 8015480:	080d3d20 	.word	0x080d3d20
 8015484:	080d3d31 	.word	0x080d3d31

08015488 <__mcmp>:
 8015488:	690a      	ldr	r2, [r1, #16]
 801548a:	4603      	mov	r3, r0
 801548c:	6900      	ldr	r0, [r0, #16]
 801548e:	1a80      	subs	r0, r0, r2
 8015490:	b530      	push	{r4, r5, lr}
 8015492:	d10e      	bne.n	80154b2 <__mcmp+0x2a>
 8015494:	3314      	adds	r3, #20
 8015496:	3114      	adds	r1, #20
 8015498:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801549c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80154a0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80154a4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80154a8:	4295      	cmp	r5, r2
 80154aa:	d003      	beq.n	80154b4 <__mcmp+0x2c>
 80154ac:	d205      	bcs.n	80154ba <__mcmp+0x32>
 80154ae:	f04f 30ff 	mov.w	r0, #4294967295
 80154b2:	bd30      	pop	{r4, r5, pc}
 80154b4:	42a3      	cmp	r3, r4
 80154b6:	d3f3      	bcc.n	80154a0 <__mcmp+0x18>
 80154b8:	e7fb      	b.n	80154b2 <__mcmp+0x2a>
 80154ba:	2001      	movs	r0, #1
 80154bc:	e7f9      	b.n	80154b2 <__mcmp+0x2a>
	...

080154c0 <__mdiff>:
 80154c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80154c4:	4689      	mov	r9, r1
 80154c6:	4606      	mov	r6, r0
 80154c8:	4611      	mov	r1, r2
 80154ca:	4648      	mov	r0, r9
 80154cc:	4614      	mov	r4, r2
 80154ce:	f7ff ffdb 	bl	8015488 <__mcmp>
 80154d2:	1e05      	subs	r5, r0, #0
 80154d4:	d112      	bne.n	80154fc <__mdiff+0x3c>
 80154d6:	4629      	mov	r1, r5
 80154d8:	4630      	mov	r0, r6
 80154da:	f7ff fd5b 	bl	8014f94 <_Balloc>
 80154de:	4602      	mov	r2, r0
 80154e0:	b928      	cbnz	r0, 80154ee <__mdiff+0x2e>
 80154e2:	4b3f      	ldr	r3, [pc, #252]	@ (80155e0 <__mdiff+0x120>)
 80154e4:	f240 2137 	movw	r1, #567	@ 0x237
 80154e8:	483e      	ldr	r0, [pc, #248]	@ (80155e4 <__mdiff+0x124>)
 80154ea:	f000 fb47 	bl	8015b7c <__assert_func>
 80154ee:	2301      	movs	r3, #1
 80154f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80154f4:	4610      	mov	r0, r2
 80154f6:	b003      	add	sp, #12
 80154f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80154fc:	bfbc      	itt	lt
 80154fe:	464b      	movlt	r3, r9
 8015500:	46a1      	movlt	r9, r4
 8015502:	4630      	mov	r0, r6
 8015504:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8015508:	bfba      	itte	lt
 801550a:	461c      	movlt	r4, r3
 801550c:	2501      	movlt	r5, #1
 801550e:	2500      	movge	r5, #0
 8015510:	f7ff fd40 	bl	8014f94 <_Balloc>
 8015514:	4602      	mov	r2, r0
 8015516:	b918      	cbnz	r0, 8015520 <__mdiff+0x60>
 8015518:	4b31      	ldr	r3, [pc, #196]	@ (80155e0 <__mdiff+0x120>)
 801551a:	f240 2145 	movw	r1, #581	@ 0x245
 801551e:	e7e3      	b.n	80154e8 <__mdiff+0x28>
 8015520:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8015524:	6926      	ldr	r6, [r4, #16]
 8015526:	60c5      	str	r5, [r0, #12]
 8015528:	f109 0310 	add.w	r3, r9, #16
 801552c:	f109 0514 	add.w	r5, r9, #20
 8015530:	f104 0e14 	add.w	lr, r4, #20
 8015534:	f100 0b14 	add.w	fp, r0, #20
 8015538:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801553c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8015540:	9301      	str	r3, [sp, #4]
 8015542:	46d9      	mov	r9, fp
 8015544:	f04f 0c00 	mov.w	ip, #0
 8015548:	9b01      	ldr	r3, [sp, #4]
 801554a:	f85e 0b04 	ldr.w	r0, [lr], #4
 801554e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8015552:	9301      	str	r3, [sp, #4]
 8015554:	fa1f f38a 	uxth.w	r3, sl
 8015558:	4619      	mov	r1, r3
 801555a:	b283      	uxth	r3, r0
 801555c:	1acb      	subs	r3, r1, r3
 801555e:	0c00      	lsrs	r0, r0, #16
 8015560:	4463      	add	r3, ip
 8015562:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8015566:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801556a:	b29b      	uxth	r3, r3
 801556c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8015570:	4576      	cmp	r6, lr
 8015572:	f849 3b04 	str.w	r3, [r9], #4
 8015576:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801557a:	d8e5      	bhi.n	8015548 <__mdiff+0x88>
 801557c:	1b33      	subs	r3, r6, r4
 801557e:	3b15      	subs	r3, #21
 8015580:	f023 0303 	bic.w	r3, r3, #3
 8015584:	3415      	adds	r4, #21
 8015586:	3304      	adds	r3, #4
 8015588:	42a6      	cmp	r6, r4
 801558a:	bf38      	it	cc
 801558c:	2304      	movcc	r3, #4
 801558e:	441d      	add	r5, r3
 8015590:	445b      	add	r3, fp
 8015592:	461e      	mov	r6, r3
 8015594:	462c      	mov	r4, r5
 8015596:	4544      	cmp	r4, r8
 8015598:	d30e      	bcc.n	80155b8 <__mdiff+0xf8>
 801559a:	f108 0103 	add.w	r1, r8, #3
 801559e:	1b49      	subs	r1, r1, r5
 80155a0:	f021 0103 	bic.w	r1, r1, #3
 80155a4:	3d03      	subs	r5, #3
 80155a6:	45a8      	cmp	r8, r5
 80155a8:	bf38      	it	cc
 80155aa:	2100      	movcc	r1, #0
 80155ac:	440b      	add	r3, r1
 80155ae:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80155b2:	b191      	cbz	r1, 80155da <__mdiff+0x11a>
 80155b4:	6117      	str	r7, [r2, #16]
 80155b6:	e79d      	b.n	80154f4 <__mdiff+0x34>
 80155b8:	f854 1b04 	ldr.w	r1, [r4], #4
 80155bc:	46e6      	mov	lr, ip
 80155be:	0c08      	lsrs	r0, r1, #16
 80155c0:	fa1c fc81 	uxtah	ip, ip, r1
 80155c4:	4471      	add	r1, lr
 80155c6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80155ca:	b289      	uxth	r1, r1
 80155cc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80155d0:	f846 1b04 	str.w	r1, [r6], #4
 80155d4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80155d8:	e7dd      	b.n	8015596 <__mdiff+0xd6>
 80155da:	3f01      	subs	r7, #1
 80155dc:	e7e7      	b.n	80155ae <__mdiff+0xee>
 80155de:	bf00      	nop
 80155e0:	080d3d20 	.word	0x080d3d20
 80155e4:	080d3d31 	.word	0x080d3d31

080155e8 <__d2b>:
 80155e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80155ec:	460f      	mov	r7, r1
 80155ee:	2101      	movs	r1, #1
 80155f0:	ec59 8b10 	vmov	r8, r9, d0
 80155f4:	4616      	mov	r6, r2
 80155f6:	f7ff fccd 	bl	8014f94 <_Balloc>
 80155fa:	4604      	mov	r4, r0
 80155fc:	b930      	cbnz	r0, 801560c <__d2b+0x24>
 80155fe:	4602      	mov	r2, r0
 8015600:	4b23      	ldr	r3, [pc, #140]	@ (8015690 <__d2b+0xa8>)
 8015602:	4824      	ldr	r0, [pc, #144]	@ (8015694 <__d2b+0xac>)
 8015604:	f240 310f 	movw	r1, #783	@ 0x30f
 8015608:	f000 fab8 	bl	8015b7c <__assert_func>
 801560c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8015610:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015614:	b10d      	cbz	r5, 801561a <__d2b+0x32>
 8015616:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801561a:	9301      	str	r3, [sp, #4]
 801561c:	f1b8 0300 	subs.w	r3, r8, #0
 8015620:	d023      	beq.n	801566a <__d2b+0x82>
 8015622:	4668      	mov	r0, sp
 8015624:	9300      	str	r3, [sp, #0]
 8015626:	f7ff fd7c 	bl	8015122 <__lo0bits>
 801562a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801562e:	b1d0      	cbz	r0, 8015666 <__d2b+0x7e>
 8015630:	f1c0 0320 	rsb	r3, r0, #32
 8015634:	fa02 f303 	lsl.w	r3, r2, r3
 8015638:	430b      	orrs	r3, r1
 801563a:	40c2      	lsrs	r2, r0
 801563c:	6163      	str	r3, [r4, #20]
 801563e:	9201      	str	r2, [sp, #4]
 8015640:	9b01      	ldr	r3, [sp, #4]
 8015642:	61a3      	str	r3, [r4, #24]
 8015644:	2b00      	cmp	r3, #0
 8015646:	bf0c      	ite	eq
 8015648:	2201      	moveq	r2, #1
 801564a:	2202      	movne	r2, #2
 801564c:	6122      	str	r2, [r4, #16]
 801564e:	b1a5      	cbz	r5, 801567a <__d2b+0x92>
 8015650:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8015654:	4405      	add	r5, r0
 8015656:	603d      	str	r5, [r7, #0]
 8015658:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801565c:	6030      	str	r0, [r6, #0]
 801565e:	4620      	mov	r0, r4
 8015660:	b003      	add	sp, #12
 8015662:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015666:	6161      	str	r1, [r4, #20]
 8015668:	e7ea      	b.n	8015640 <__d2b+0x58>
 801566a:	a801      	add	r0, sp, #4
 801566c:	f7ff fd59 	bl	8015122 <__lo0bits>
 8015670:	9b01      	ldr	r3, [sp, #4]
 8015672:	6163      	str	r3, [r4, #20]
 8015674:	3020      	adds	r0, #32
 8015676:	2201      	movs	r2, #1
 8015678:	e7e8      	b.n	801564c <__d2b+0x64>
 801567a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801567e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8015682:	6038      	str	r0, [r7, #0]
 8015684:	6918      	ldr	r0, [r3, #16]
 8015686:	f7ff fd2d 	bl	80150e4 <__hi0bits>
 801568a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801568e:	e7e5      	b.n	801565c <__d2b+0x74>
 8015690:	080d3d20 	.word	0x080d3d20
 8015694:	080d3d31 	.word	0x080d3d31

08015698 <__sfputc_r>:
 8015698:	6893      	ldr	r3, [r2, #8]
 801569a:	3b01      	subs	r3, #1
 801569c:	2b00      	cmp	r3, #0
 801569e:	b410      	push	{r4}
 80156a0:	6093      	str	r3, [r2, #8]
 80156a2:	da08      	bge.n	80156b6 <__sfputc_r+0x1e>
 80156a4:	6994      	ldr	r4, [r2, #24]
 80156a6:	42a3      	cmp	r3, r4
 80156a8:	db01      	blt.n	80156ae <__sfputc_r+0x16>
 80156aa:	290a      	cmp	r1, #10
 80156ac:	d103      	bne.n	80156b6 <__sfputc_r+0x1e>
 80156ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80156b2:	f7fe bca6 	b.w	8014002 <__swbuf_r>
 80156b6:	6813      	ldr	r3, [r2, #0]
 80156b8:	1c58      	adds	r0, r3, #1
 80156ba:	6010      	str	r0, [r2, #0]
 80156bc:	7019      	strb	r1, [r3, #0]
 80156be:	4608      	mov	r0, r1
 80156c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80156c4:	4770      	bx	lr

080156c6 <__sfputs_r>:
 80156c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80156c8:	4606      	mov	r6, r0
 80156ca:	460f      	mov	r7, r1
 80156cc:	4614      	mov	r4, r2
 80156ce:	18d5      	adds	r5, r2, r3
 80156d0:	42ac      	cmp	r4, r5
 80156d2:	d101      	bne.n	80156d8 <__sfputs_r+0x12>
 80156d4:	2000      	movs	r0, #0
 80156d6:	e007      	b.n	80156e8 <__sfputs_r+0x22>
 80156d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80156dc:	463a      	mov	r2, r7
 80156de:	4630      	mov	r0, r6
 80156e0:	f7ff ffda 	bl	8015698 <__sfputc_r>
 80156e4:	1c43      	adds	r3, r0, #1
 80156e6:	d1f3      	bne.n	80156d0 <__sfputs_r+0xa>
 80156e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080156ec <_vfiprintf_r>:
 80156ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80156f0:	460d      	mov	r5, r1
 80156f2:	b09d      	sub	sp, #116	@ 0x74
 80156f4:	4614      	mov	r4, r2
 80156f6:	4698      	mov	r8, r3
 80156f8:	4606      	mov	r6, r0
 80156fa:	b118      	cbz	r0, 8015704 <_vfiprintf_r+0x18>
 80156fc:	6a03      	ldr	r3, [r0, #32]
 80156fe:	b90b      	cbnz	r3, 8015704 <_vfiprintf_r+0x18>
 8015700:	f7fe fb96 	bl	8013e30 <__sinit>
 8015704:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015706:	07d9      	lsls	r1, r3, #31
 8015708:	d405      	bmi.n	8015716 <_vfiprintf_r+0x2a>
 801570a:	89ab      	ldrh	r3, [r5, #12]
 801570c:	059a      	lsls	r2, r3, #22
 801570e:	d402      	bmi.n	8015716 <_vfiprintf_r+0x2a>
 8015710:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015712:	f7fe fd98 	bl	8014246 <__retarget_lock_acquire_recursive>
 8015716:	89ab      	ldrh	r3, [r5, #12]
 8015718:	071b      	lsls	r3, r3, #28
 801571a:	d501      	bpl.n	8015720 <_vfiprintf_r+0x34>
 801571c:	692b      	ldr	r3, [r5, #16]
 801571e:	b99b      	cbnz	r3, 8015748 <_vfiprintf_r+0x5c>
 8015720:	4629      	mov	r1, r5
 8015722:	4630      	mov	r0, r6
 8015724:	f7fe fcac 	bl	8014080 <__swsetup_r>
 8015728:	b170      	cbz	r0, 8015748 <_vfiprintf_r+0x5c>
 801572a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801572c:	07dc      	lsls	r4, r3, #31
 801572e:	d504      	bpl.n	801573a <_vfiprintf_r+0x4e>
 8015730:	f04f 30ff 	mov.w	r0, #4294967295
 8015734:	b01d      	add	sp, #116	@ 0x74
 8015736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801573a:	89ab      	ldrh	r3, [r5, #12]
 801573c:	0598      	lsls	r0, r3, #22
 801573e:	d4f7      	bmi.n	8015730 <_vfiprintf_r+0x44>
 8015740:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015742:	f7fe fd81 	bl	8014248 <__retarget_lock_release_recursive>
 8015746:	e7f3      	b.n	8015730 <_vfiprintf_r+0x44>
 8015748:	2300      	movs	r3, #0
 801574a:	9309      	str	r3, [sp, #36]	@ 0x24
 801574c:	2320      	movs	r3, #32
 801574e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015752:	f8cd 800c 	str.w	r8, [sp, #12]
 8015756:	2330      	movs	r3, #48	@ 0x30
 8015758:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8015908 <_vfiprintf_r+0x21c>
 801575c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015760:	f04f 0901 	mov.w	r9, #1
 8015764:	4623      	mov	r3, r4
 8015766:	469a      	mov	sl, r3
 8015768:	f813 2b01 	ldrb.w	r2, [r3], #1
 801576c:	b10a      	cbz	r2, 8015772 <_vfiprintf_r+0x86>
 801576e:	2a25      	cmp	r2, #37	@ 0x25
 8015770:	d1f9      	bne.n	8015766 <_vfiprintf_r+0x7a>
 8015772:	ebba 0b04 	subs.w	fp, sl, r4
 8015776:	d00b      	beq.n	8015790 <_vfiprintf_r+0xa4>
 8015778:	465b      	mov	r3, fp
 801577a:	4622      	mov	r2, r4
 801577c:	4629      	mov	r1, r5
 801577e:	4630      	mov	r0, r6
 8015780:	f7ff ffa1 	bl	80156c6 <__sfputs_r>
 8015784:	3001      	adds	r0, #1
 8015786:	f000 80a7 	beq.w	80158d8 <_vfiprintf_r+0x1ec>
 801578a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801578c:	445a      	add	r2, fp
 801578e:	9209      	str	r2, [sp, #36]	@ 0x24
 8015790:	f89a 3000 	ldrb.w	r3, [sl]
 8015794:	2b00      	cmp	r3, #0
 8015796:	f000 809f 	beq.w	80158d8 <_vfiprintf_r+0x1ec>
 801579a:	2300      	movs	r3, #0
 801579c:	f04f 32ff 	mov.w	r2, #4294967295
 80157a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80157a4:	f10a 0a01 	add.w	sl, sl, #1
 80157a8:	9304      	str	r3, [sp, #16]
 80157aa:	9307      	str	r3, [sp, #28]
 80157ac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80157b0:	931a      	str	r3, [sp, #104]	@ 0x68
 80157b2:	4654      	mov	r4, sl
 80157b4:	2205      	movs	r2, #5
 80157b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80157ba:	4853      	ldr	r0, [pc, #332]	@ (8015908 <_vfiprintf_r+0x21c>)
 80157bc:	f7ea fd88 	bl	80002d0 <memchr>
 80157c0:	9a04      	ldr	r2, [sp, #16]
 80157c2:	b9d8      	cbnz	r0, 80157fc <_vfiprintf_r+0x110>
 80157c4:	06d1      	lsls	r1, r2, #27
 80157c6:	bf44      	itt	mi
 80157c8:	2320      	movmi	r3, #32
 80157ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80157ce:	0713      	lsls	r3, r2, #28
 80157d0:	bf44      	itt	mi
 80157d2:	232b      	movmi	r3, #43	@ 0x2b
 80157d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80157d8:	f89a 3000 	ldrb.w	r3, [sl]
 80157dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80157de:	d015      	beq.n	801580c <_vfiprintf_r+0x120>
 80157e0:	9a07      	ldr	r2, [sp, #28]
 80157e2:	4654      	mov	r4, sl
 80157e4:	2000      	movs	r0, #0
 80157e6:	f04f 0c0a 	mov.w	ip, #10
 80157ea:	4621      	mov	r1, r4
 80157ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80157f0:	3b30      	subs	r3, #48	@ 0x30
 80157f2:	2b09      	cmp	r3, #9
 80157f4:	d94b      	bls.n	801588e <_vfiprintf_r+0x1a2>
 80157f6:	b1b0      	cbz	r0, 8015826 <_vfiprintf_r+0x13a>
 80157f8:	9207      	str	r2, [sp, #28]
 80157fa:	e014      	b.n	8015826 <_vfiprintf_r+0x13a>
 80157fc:	eba0 0308 	sub.w	r3, r0, r8
 8015800:	fa09 f303 	lsl.w	r3, r9, r3
 8015804:	4313      	orrs	r3, r2
 8015806:	9304      	str	r3, [sp, #16]
 8015808:	46a2      	mov	sl, r4
 801580a:	e7d2      	b.n	80157b2 <_vfiprintf_r+0xc6>
 801580c:	9b03      	ldr	r3, [sp, #12]
 801580e:	1d19      	adds	r1, r3, #4
 8015810:	681b      	ldr	r3, [r3, #0]
 8015812:	9103      	str	r1, [sp, #12]
 8015814:	2b00      	cmp	r3, #0
 8015816:	bfbb      	ittet	lt
 8015818:	425b      	neglt	r3, r3
 801581a:	f042 0202 	orrlt.w	r2, r2, #2
 801581e:	9307      	strge	r3, [sp, #28]
 8015820:	9307      	strlt	r3, [sp, #28]
 8015822:	bfb8      	it	lt
 8015824:	9204      	strlt	r2, [sp, #16]
 8015826:	7823      	ldrb	r3, [r4, #0]
 8015828:	2b2e      	cmp	r3, #46	@ 0x2e
 801582a:	d10a      	bne.n	8015842 <_vfiprintf_r+0x156>
 801582c:	7863      	ldrb	r3, [r4, #1]
 801582e:	2b2a      	cmp	r3, #42	@ 0x2a
 8015830:	d132      	bne.n	8015898 <_vfiprintf_r+0x1ac>
 8015832:	9b03      	ldr	r3, [sp, #12]
 8015834:	1d1a      	adds	r2, r3, #4
 8015836:	681b      	ldr	r3, [r3, #0]
 8015838:	9203      	str	r2, [sp, #12]
 801583a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801583e:	3402      	adds	r4, #2
 8015840:	9305      	str	r3, [sp, #20]
 8015842:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8015918 <_vfiprintf_r+0x22c>
 8015846:	7821      	ldrb	r1, [r4, #0]
 8015848:	2203      	movs	r2, #3
 801584a:	4650      	mov	r0, sl
 801584c:	f7ea fd40 	bl	80002d0 <memchr>
 8015850:	b138      	cbz	r0, 8015862 <_vfiprintf_r+0x176>
 8015852:	9b04      	ldr	r3, [sp, #16]
 8015854:	eba0 000a 	sub.w	r0, r0, sl
 8015858:	2240      	movs	r2, #64	@ 0x40
 801585a:	4082      	lsls	r2, r0
 801585c:	4313      	orrs	r3, r2
 801585e:	3401      	adds	r4, #1
 8015860:	9304      	str	r3, [sp, #16]
 8015862:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015866:	4829      	ldr	r0, [pc, #164]	@ (801590c <_vfiprintf_r+0x220>)
 8015868:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801586c:	2206      	movs	r2, #6
 801586e:	f7ea fd2f 	bl	80002d0 <memchr>
 8015872:	2800      	cmp	r0, #0
 8015874:	d03f      	beq.n	80158f6 <_vfiprintf_r+0x20a>
 8015876:	4b26      	ldr	r3, [pc, #152]	@ (8015910 <_vfiprintf_r+0x224>)
 8015878:	bb1b      	cbnz	r3, 80158c2 <_vfiprintf_r+0x1d6>
 801587a:	9b03      	ldr	r3, [sp, #12]
 801587c:	3307      	adds	r3, #7
 801587e:	f023 0307 	bic.w	r3, r3, #7
 8015882:	3308      	adds	r3, #8
 8015884:	9303      	str	r3, [sp, #12]
 8015886:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015888:	443b      	add	r3, r7
 801588a:	9309      	str	r3, [sp, #36]	@ 0x24
 801588c:	e76a      	b.n	8015764 <_vfiprintf_r+0x78>
 801588e:	fb0c 3202 	mla	r2, ip, r2, r3
 8015892:	460c      	mov	r4, r1
 8015894:	2001      	movs	r0, #1
 8015896:	e7a8      	b.n	80157ea <_vfiprintf_r+0xfe>
 8015898:	2300      	movs	r3, #0
 801589a:	3401      	adds	r4, #1
 801589c:	9305      	str	r3, [sp, #20]
 801589e:	4619      	mov	r1, r3
 80158a0:	f04f 0c0a 	mov.w	ip, #10
 80158a4:	4620      	mov	r0, r4
 80158a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80158aa:	3a30      	subs	r2, #48	@ 0x30
 80158ac:	2a09      	cmp	r2, #9
 80158ae:	d903      	bls.n	80158b8 <_vfiprintf_r+0x1cc>
 80158b0:	2b00      	cmp	r3, #0
 80158b2:	d0c6      	beq.n	8015842 <_vfiprintf_r+0x156>
 80158b4:	9105      	str	r1, [sp, #20]
 80158b6:	e7c4      	b.n	8015842 <_vfiprintf_r+0x156>
 80158b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80158bc:	4604      	mov	r4, r0
 80158be:	2301      	movs	r3, #1
 80158c0:	e7f0      	b.n	80158a4 <_vfiprintf_r+0x1b8>
 80158c2:	ab03      	add	r3, sp, #12
 80158c4:	9300      	str	r3, [sp, #0]
 80158c6:	462a      	mov	r2, r5
 80158c8:	4b12      	ldr	r3, [pc, #72]	@ (8015914 <_vfiprintf_r+0x228>)
 80158ca:	a904      	add	r1, sp, #16
 80158cc:	4630      	mov	r0, r6
 80158ce:	f7fd fe6b 	bl	80135a8 <_printf_float>
 80158d2:	4607      	mov	r7, r0
 80158d4:	1c78      	adds	r0, r7, #1
 80158d6:	d1d6      	bne.n	8015886 <_vfiprintf_r+0x19a>
 80158d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80158da:	07d9      	lsls	r1, r3, #31
 80158dc:	d405      	bmi.n	80158ea <_vfiprintf_r+0x1fe>
 80158de:	89ab      	ldrh	r3, [r5, #12]
 80158e0:	059a      	lsls	r2, r3, #22
 80158e2:	d402      	bmi.n	80158ea <_vfiprintf_r+0x1fe>
 80158e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80158e6:	f7fe fcaf 	bl	8014248 <__retarget_lock_release_recursive>
 80158ea:	89ab      	ldrh	r3, [r5, #12]
 80158ec:	065b      	lsls	r3, r3, #25
 80158ee:	f53f af1f 	bmi.w	8015730 <_vfiprintf_r+0x44>
 80158f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80158f4:	e71e      	b.n	8015734 <_vfiprintf_r+0x48>
 80158f6:	ab03      	add	r3, sp, #12
 80158f8:	9300      	str	r3, [sp, #0]
 80158fa:	462a      	mov	r2, r5
 80158fc:	4b05      	ldr	r3, [pc, #20]	@ (8015914 <_vfiprintf_r+0x228>)
 80158fe:	a904      	add	r1, sp, #16
 8015900:	4630      	mov	r0, r6
 8015902:	f7fe f8e9 	bl	8013ad8 <_printf_i>
 8015906:	e7e4      	b.n	80158d2 <_vfiprintf_r+0x1e6>
 8015908:	080d3e88 	.word	0x080d3e88
 801590c:	080d3e92 	.word	0x080d3e92
 8015910:	080135a9 	.word	0x080135a9
 8015914:	080156c7 	.word	0x080156c7
 8015918:	080d3e8e 	.word	0x080d3e8e

0801591c <__sflush_r>:
 801591c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8015920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015924:	0716      	lsls	r6, r2, #28
 8015926:	4605      	mov	r5, r0
 8015928:	460c      	mov	r4, r1
 801592a:	d454      	bmi.n	80159d6 <__sflush_r+0xba>
 801592c:	684b      	ldr	r3, [r1, #4]
 801592e:	2b00      	cmp	r3, #0
 8015930:	dc02      	bgt.n	8015938 <__sflush_r+0x1c>
 8015932:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8015934:	2b00      	cmp	r3, #0
 8015936:	dd48      	ble.n	80159ca <__sflush_r+0xae>
 8015938:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801593a:	2e00      	cmp	r6, #0
 801593c:	d045      	beq.n	80159ca <__sflush_r+0xae>
 801593e:	2300      	movs	r3, #0
 8015940:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8015944:	682f      	ldr	r7, [r5, #0]
 8015946:	6a21      	ldr	r1, [r4, #32]
 8015948:	602b      	str	r3, [r5, #0]
 801594a:	d030      	beq.n	80159ae <__sflush_r+0x92>
 801594c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801594e:	89a3      	ldrh	r3, [r4, #12]
 8015950:	0759      	lsls	r1, r3, #29
 8015952:	d505      	bpl.n	8015960 <__sflush_r+0x44>
 8015954:	6863      	ldr	r3, [r4, #4]
 8015956:	1ad2      	subs	r2, r2, r3
 8015958:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801595a:	b10b      	cbz	r3, 8015960 <__sflush_r+0x44>
 801595c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801595e:	1ad2      	subs	r2, r2, r3
 8015960:	2300      	movs	r3, #0
 8015962:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8015964:	6a21      	ldr	r1, [r4, #32]
 8015966:	4628      	mov	r0, r5
 8015968:	47b0      	blx	r6
 801596a:	1c43      	adds	r3, r0, #1
 801596c:	89a3      	ldrh	r3, [r4, #12]
 801596e:	d106      	bne.n	801597e <__sflush_r+0x62>
 8015970:	6829      	ldr	r1, [r5, #0]
 8015972:	291d      	cmp	r1, #29
 8015974:	d82b      	bhi.n	80159ce <__sflush_r+0xb2>
 8015976:	4a2a      	ldr	r2, [pc, #168]	@ (8015a20 <__sflush_r+0x104>)
 8015978:	410a      	asrs	r2, r1
 801597a:	07d6      	lsls	r6, r2, #31
 801597c:	d427      	bmi.n	80159ce <__sflush_r+0xb2>
 801597e:	2200      	movs	r2, #0
 8015980:	6062      	str	r2, [r4, #4]
 8015982:	04d9      	lsls	r1, r3, #19
 8015984:	6922      	ldr	r2, [r4, #16]
 8015986:	6022      	str	r2, [r4, #0]
 8015988:	d504      	bpl.n	8015994 <__sflush_r+0x78>
 801598a:	1c42      	adds	r2, r0, #1
 801598c:	d101      	bne.n	8015992 <__sflush_r+0x76>
 801598e:	682b      	ldr	r3, [r5, #0]
 8015990:	b903      	cbnz	r3, 8015994 <__sflush_r+0x78>
 8015992:	6560      	str	r0, [r4, #84]	@ 0x54
 8015994:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015996:	602f      	str	r7, [r5, #0]
 8015998:	b1b9      	cbz	r1, 80159ca <__sflush_r+0xae>
 801599a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801599e:	4299      	cmp	r1, r3
 80159a0:	d002      	beq.n	80159a8 <__sflush_r+0x8c>
 80159a2:	4628      	mov	r0, r5
 80159a4:	f7ff faac 	bl	8014f00 <_free_r>
 80159a8:	2300      	movs	r3, #0
 80159aa:	6363      	str	r3, [r4, #52]	@ 0x34
 80159ac:	e00d      	b.n	80159ca <__sflush_r+0xae>
 80159ae:	2301      	movs	r3, #1
 80159b0:	4628      	mov	r0, r5
 80159b2:	47b0      	blx	r6
 80159b4:	4602      	mov	r2, r0
 80159b6:	1c50      	adds	r0, r2, #1
 80159b8:	d1c9      	bne.n	801594e <__sflush_r+0x32>
 80159ba:	682b      	ldr	r3, [r5, #0]
 80159bc:	2b00      	cmp	r3, #0
 80159be:	d0c6      	beq.n	801594e <__sflush_r+0x32>
 80159c0:	2b1d      	cmp	r3, #29
 80159c2:	d001      	beq.n	80159c8 <__sflush_r+0xac>
 80159c4:	2b16      	cmp	r3, #22
 80159c6:	d11e      	bne.n	8015a06 <__sflush_r+0xea>
 80159c8:	602f      	str	r7, [r5, #0]
 80159ca:	2000      	movs	r0, #0
 80159cc:	e022      	b.n	8015a14 <__sflush_r+0xf8>
 80159ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80159d2:	b21b      	sxth	r3, r3
 80159d4:	e01b      	b.n	8015a0e <__sflush_r+0xf2>
 80159d6:	690f      	ldr	r7, [r1, #16]
 80159d8:	2f00      	cmp	r7, #0
 80159da:	d0f6      	beq.n	80159ca <__sflush_r+0xae>
 80159dc:	0793      	lsls	r3, r2, #30
 80159de:	680e      	ldr	r6, [r1, #0]
 80159e0:	bf08      	it	eq
 80159e2:	694b      	ldreq	r3, [r1, #20]
 80159e4:	600f      	str	r7, [r1, #0]
 80159e6:	bf18      	it	ne
 80159e8:	2300      	movne	r3, #0
 80159ea:	eba6 0807 	sub.w	r8, r6, r7
 80159ee:	608b      	str	r3, [r1, #8]
 80159f0:	f1b8 0f00 	cmp.w	r8, #0
 80159f4:	dde9      	ble.n	80159ca <__sflush_r+0xae>
 80159f6:	6a21      	ldr	r1, [r4, #32]
 80159f8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80159fa:	4643      	mov	r3, r8
 80159fc:	463a      	mov	r2, r7
 80159fe:	4628      	mov	r0, r5
 8015a00:	47b0      	blx	r6
 8015a02:	2800      	cmp	r0, #0
 8015a04:	dc08      	bgt.n	8015a18 <__sflush_r+0xfc>
 8015a06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015a0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015a0e:	81a3      	strh	r3, [r4, #12]
 8015a10:	f04f 30ff 	mov.w	r0, #4294967295
 8015a14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a18:	4407      	add	r7, r0
 8015a1a:	eba8 0800 	sub.w	r8, r8, r0
 8015a1e:	e7e7      	b.n	80159f0 <__sflush_r+0xd4>
 8015a20:	dfbffffe 	.word	0xdfbffffe

08015a24 <_fflush_r>:
 8015a24:	b538      	push	{r3, r4, r5, lr}
 8015a26:	690b      	ldr	r3, [r1, #16]
 8015a28:	4605      	mov	r5, r0
 8015a2a:	460c      	mov	r4, r1
 8015a2c:	b913      	cbnz	r3, 8015a34 <_fflush_r+0x10>
 8015a2e:	2500      	movs	r5, #0
 8015a30:	4628      	mov	r0, r5
 8015a32:	bd38      	pop	{r3, r4, r5, pc}
 8015a34:	b118      	cbz	r0, 8015a3e <_fflush_r+0x1a>
 8015a36:	6a03      	ldr	r3, [r0, #32]
 8015a38:	b90b      	cbnz	r3, 8015a3e <_fflush_r+0x1a>
 8015a3a:	f7fe f9f9 	bl	8013e30 <__sinit>
 8015a3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015a42:	2b00      	cmp	r3, #0
 8015a44:	d0f3      	beq.n	8015a2e <_fflush_r+0xa>
 8015a46:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8015a48:	07d0      	lsls	r0, r2, #31
 8015a4a:	d404      	bmi.n	8015a56 <_fflush_r+0x32>
 8015a4c:	0599      	lsls	r1, r3, #22
 8015a4e:	d402      	bmi.n	8015a56 <_fflush_r+0x32>
 8015a50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015a52:	f7fe fbf8 	bl	8014246 <__retarget_lock_acquire_recursive>
 8015a56:	4628      	mov	r0, r5
 8015a58:	4621      	mov	r1, r4
 8015a5a:	f7ff ff5f 	bl	801591c <__sflush_r>
 8015a5e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015a60:	07da      	lsls	r2, r3, #31
 8015a62:	4605      	mov	r5, r0
 8015a64:	d4e4      	bmi.n	8015a30 <_fflush_r+0xc>
 8015a66:	89a3      	ldrh	r3, [r4, #12]
 8015a68:	059b      	lsls	r3, r3, #22
 8015a6a:	d4e1      	bmi.n	8015a30 <_fflush_r+0xc>
 8015a6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015a6e:	f7fe fbeb 	bl	8014248 <__retarget_lock_release_recursive>
 8015a72:	e7dd      	b.n	8015a30 <_fflush_r+0xc>

08015a74 <__swhatbuf_r>:
 8015a74:	b570      	push	{r4, r5, r6, lr}
 8015a76:	460c      	mov	r4, r1
 8015a78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015a7c:	2900      	cmp	r1, #0
 8015a7e:	b096      	sub	sp, #88	@ 0x58
 8015a80:	4615      	mov	r5, r2
 8015a82:	461e      	mov	r6, r3
 8015a84:	da0d      	bge.n	8015aa2 <__swhatbuf_r+0x2e>
 8015a86:	89a3      	ldrh	r3, [r4, #12]
 8015a88:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8015a8c:	f04f 0100 	mov.w	r1, #0
 8015a90:	bf14      	ite	ne
 8015a92:	2340      	movne	r3, #64	@ 0x40
 8015a94:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8015a98:	2000      	movs	r0, #0
 8015a9a:	6031      	str	r1, [r6, #0]
 8015a9c:	602b      	str	r3, [r5, #0]
 8015a9e:	b016      	add	sp, #88	@ 0x58
 8015aa0:	bd70      	pop	{r4, r5, r6, pc}
 8015aa2:	466a      	mov	r2, sp
 8015aa4:	f000 f848 	bl	8015b38 <_fstat_r>
 8015aa8:	2800      	cmp	r0, #0
 8015aaa:	dbec      	blt.n	8015a86 <__swhatbuf_r+0x12>
 8015aac:	9901      	ldr	r1, [sp, #4]
 8015aae:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8015ab2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8015ab6:	4259      	negs	r1, r3
 8015ab8:	4159      	adcs	r1, r3
 8015aba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8015abe:	e7eb      	b.n	8015a98 <__swhatbuf_r+0x24>

08015ac0 <__smakebuf_r>:
 8015ac0:	898b      	ldrh	r3, [r1, #12]
 8015ac2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015ac4:	079d      	lsls	r5, r3, #30
 8015ac6:	4606      	mov	r6, r0
 8015ac8:	460c      	mov	r4, r1
 8015aca:	d507      	bpl.n	8015adc <__smakebuf_r+0x1c>
 8015acc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8015ad0:	6023      	str	r3, [r4, #0]
 8015ad2:	6123      	str	r3, [r4, #16]
 8015ad4:	2301      	movs	r3, #1
 8015ad6:	6163      	str	r3, [r4, #20]
 8015ad8:	b003      	add	sp, #12
 8015ada:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015adc:	ab01      	add	r3, sp, #4
 8015ade:	466a      	mov	r2, sp
 8015ae0:	f7ff ffc8 	bl	8015a74 <__swhatbuf_r>
 8015ae4:	9f00      	ldr	r7, [sp, #0]
 8015ae6:	4605      	mov	r5, r0
 8015ae8:	4639      	mov	r1, r7
 8015aea:	4630      	mov	r0, r6
 8015aec:	f7fd fc30 	bl	8013350 <_malloc_r>
 8015af0:	b948      	cbnz	r0, 8015b06 <__smakebuf_r+0x46>
 8015af2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015af6:	059a      	lsls	r2, r3, #22
 8015af8:	d4ee      	bmi.n	8015ad8 <__smakebuf_r+0x18>
 8015afa:	f023 0303 	bic.w	r3, r3, #3
 8015afe:	f043 0302 	orr.w	r3, r3, #2
 8015b02:	81a3      	strh	r3, [r4, #12]
 8015b04:	e7e2      	b.n	8015acc <__smakebuf_r+0xc>
 8015b06:	89a3      	ldrh	r3, [r4, #12]
 8015b08:	6020      	str	r0, [r4, #0]
 8015b0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015b0e:	81a3      	strh	r3, [r4, #12]
 8015b10:	9b01      	ldr	r3, [sp, #4]
 8015b12:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8015b16:	b15b      	cbz	r3, 8015b30 <__smakebuf_r+0x70>
 8015b18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015b1c:	4630      	mov	r0, r6
 8015b1e:	f000 f81d 	bl	8015b5c <_isatty_r>
 8015b22:	b128      	cbz	r0, 8015b30 <__smakebuf_r+0x70>
 8015b24:	89a3      	ldrh	r3, [r4, #12]
 8015b26:	f023 0303 	bic.w	r3, r3, #3
 8015b2a:	f043 0301 	orr.w	r3, r3, #1
 8015b2e:	81a3      	strh	r3, [r4, #12]
 8015b30:	89a3      	ldrh	r3, [r4, #12]
 8015b32:	431d      	orrs	r5, r3
 8015b34:	81a5      	strh	r5, [r4, #12]
 8015b36:	e7cf      	b.n	8015ad8 <__smakebuf_r+0x18>

08015b38 <_fstat_r>:
 8015b38:	b538      	push	{r3, r4, r5, lr}
 8015b3a:	4d07      	ldr	r5, [pc, #28]	@ (8015b58 <_fstat_r+0x20>)
 8015b3c:	2300      	movs	r3, #0
 8015b3e:	4604      	mov	r4, r0
 8015b40:	4608      	mov	r0, r1
 8015b42:	4611      	mov	r1, r2
 8015b44:	602b      	str	r3, [r5, #0]
 8015b46:	f7ec fcb5 	bl	80024b4 <_fstat>
 8015b4a:	1c43      	adds	r3, r0, #1
 8015b4c:	d102      	bne.n	8015b54 <_fstat_r+0x1c>
 8015b4e:	682b      	ldr	r3, [r5, #0]
 8015b50:	b103      	cbz	r3, 8015b54 <_fstat_r+0x1c>
 8015b52:	6023      	str	r3, [r4, #0]
 8015b54:	bd38      	pop	{r3, r4, r5, pc}
 8015b56:	bf00      	nop
 8015b58:	2001ec44 	.word	0x2001ec44

08015b5c <_isatty_r>:
 8015b5c:	b538      	push	{r3, r4, r5, lr}
 8015b5e:	4d06      	ldr	r5, [pc, #24]	@ (8015b78 <_isatty_r+0x1c>)
 8015b60:	2300      	movs	r3, #0
 8015b62:	4604      	mov	r4, r0
 8015b64:	4608      	mov	r0, r1
 8015b66:	602b      	str	r3, [r5, #0]
 8015b68:	f7ec fcb4 	bl	80024d4 <_isatty>
 8015b6c:	1c43      	adds	r3, r0, #1
 8015b6e:	d102      	bne.n	8015b76 <_isatty_r+0x1a>
 8015b70:	682b      	ldr	r3, [r5, #0]
 8015b72:	b103      	cbz	r3, 8015b76 <_isatty_r+0x1a>
 8015b74:	6023      	str	r3, [r4, #0]
 8015b76:	bd38      	pop	{r3, r4, r5, pc}
 8015b78:	2001ec44 	.word	0x2001ec44

08015b7c <__assert_func>:
 8015b7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015b7e:	4614      	mov	r4, r2
 8015b80:	461a      	mov	r2, r3
 8015b82:	4b09      	ldr	r3, [pc, #36]	@ (8015ba8 <__assert_func+0x2c>)
 8015b84:	681b      	ldr	r3, [r3, #0]
 8015b86:	4605      	mov	r5, r0
 8015b88:	68d8      	ldr	r0, [r3, #12]
 8015b8a:	b954      	cbnz	r4, 8015ba2 <__assert_func+0x26>
 8015b8c:	4b07      	ldr	r3, [pc, #28]	@ (8015bac <__assert_func+0x30>)
 8015b8e:	461c      	mov	r4, r3
 8015b90:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015b94:	9100      	str	r1, [sp, #0]
 8015b96:	462b      	mov	r3, r5
 8015b98:	4905      	ldr	r1, [pc, #20]	@ (8015bb0 <__assert_func+0x34>)
 8015b9a:	f000 f841 	bl	8015c20 <fiprintf>
 8015b9e:	f000 f851 	bl	8015c44 <abort>
 8015ba2:	4b04      	ldr	r3, [pc, #16]	@ (8015bb4 <__assert_func+0x38>)
 8015ba4:	e7f4      	b.n	8015b90 <__assert_func+0x14>
 8015ba6:	bf00      	nop
 8015ba8:	20000810 	.word	0x20000810
 8015bac:	080d3ede 	.word	0x080d3ede
 8015bb0:	080d3eb0 	.word	0x080d3eb0
 8015bb4:	080d3ea3 	.word	0x080d3ea3

08015bb8 <_calloc_r>:
 8015bb8:	b570      	push	{r4, r5, r6, lr}
 8015bba:	fba1 5402 	umull	r5, r4, r1, r2
 8015bbe:	b93c      	cbnz	r4, 8015bd0 <_calloc_r+0x18>
 8015bc0:	4629      	mov	r1, r5
 8015bc2:	f7fd fbc5 	bl	8013350 <_malloc_r>
 8015bc6:	4606      	mov	r6, r0
 8015bc8:	b928      	cbnz	r0, 8015bd6 <_calloc_r+0x1e>
 8015bca:	2600      	movs	r6, #0
 8015bcc:	4630      	mov	r0, r6
 8015bce:	bd70      	pop	{r4, r5, r6, pc}
 8015bd0:	220c      	movs	r2, #12
 8015bd2:	6002      	str	r2, [r0, #0]
 8015bd4:	e7f9      	b.n	8015bca <_calloc_r+0x12>
 8015bd6:	462a      	mov	r2, r5
 8015bd8:	4621      	mov	r1, r4
 8015bda:	f7fe faa7 	bl	801412c <memset>
 8015bde:	e7f5      	b.n	8015bcc <_calloc_r+0x14>

08015be0 <__ascii_mbtowc>:
 8015be0:	b082      	sub	sp, #8
 8015be2:	b901      	cbnz	r1, 8015be6 <__ascii_mbtowc+0x6>
 8015be4:	a901      	add	r1, sp, #4
 8015be6:	b142      	cbz	r2, 8015bfa <__ascii_mbtowc+0x1a>
 8015be8:	b14b      	cbz	r3, 8015bfe <__ascii_mbtowc+0x1e>
 8015bea:	7813      	ldrb	r3, [r2, #0]
 8015bec:	600b      	str	r3, [r1, #0]
 8015bee:	7812      	ldrb	r2, [r2, #0]
 8015bf0:	1e10      	subs	r0, r2, #0
 8015bf2:	bf18      	it	ne
 8015bf4:	2001      	movne	r0, #1
 8015bf6:	b002      	add	sp, #8
 8015bf8:	4770      	bx	lr
 8015bfa:	4610      	mov	r0, r2
 8015bfc:	e7fb      	b.n	8015bf6 <__ascii_mbtowc+0x16>
 8015bfe:	f06f 0001 	mvn.w	r0, #1
 8015c02:	e7f8      	b.n	8015bf6 <__ascii_mbtowc+0x16>

08015c04 <__ascii_wctomb>:
 8015c04:	4603      	mov	r3, r0
 8015c06:	4608      	mov	r0, r1
 8015c08:	b141      	cbz	r1, 8015c1c <__ascii_wctomb+0x18>
 8015c0a:	2aff      	cmp	r2, #255	@ 0xff
 8015c0c:	d904      	bls.n	8015c18 <__ascii_wctomb+0x14>
 8015c0e:	228a      	movs	r2, #138	@ 0x8a
 8015c10:	601a      	str	r2, [r3, #0]
 8015c12:	f04f 30ff 	mov.w	r0, #4294967295
 8015c16:	4770      	bx	lr
 8015c18:	700a      	strb	r2, [r1, #0]
 8015c1a:	2001      	movs	r0, #1
 8015c1c:	4770      	bx	lr
	...

08015c20 <fiprintf>:
 8015c20:	b40e      	push	{r1, r2, r3}
 8015c22:	b503      	push	{r0, r1, lr}
 8015c24:	4601      	mov	r1, r0
 8015c26:	ab03      	add	r3, sp, #12
 8015c28:	4805      	ldr	r0, [pc, #20]	@ (8015c40 <fiprintf+0x20>)
 8015c2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8015c2e:	6800      	ldr	r0, [r0, #0]
 8015c30:	9301      	str	r3, [sp, #4]
 8015c32:	f7ff fd5b 	bl	80156ec <_vfiprintf_r>
 8015c36:	b002      	add	sp, #8
 8015c38:	f85d eb04 	ldr.w	lr, [sp], #4
 8015c3c:	b003      	add	sp, #12
 8015c3e:	4770      	bx	lr
 8015c40:	20000810 	.word	0x20000810

08015c44 <abort>:
 8015c44:	b508      	push	{r3, lr}
 8015c46:	2006      	movs	r0, #6
 8015c48:	f000 f82c 	bl	8015ca4 <raise>
 8015c4c:	2001      	movs	r0, #1
 8015c4e:	f7ec fbe1 	bl	8002414 <_exit>

08015c52 <_raise_r>:
 8015c52:	291f      	cmp	r1, #31
 8015c54:	b538      	push	{r3, r4, r5, lr}
 8015c56:	4605      	mov	r5, r0
 8015c58:	460c      	mov	r4, r1
 8015c5a:	d904      	bls.n	8015c66 <_raise_r+0x14>
 8015c5c:	2316      	movs	r3, #22
 8015c5e:	6003      	str	r3, [r0, #0]
 8015c60:	f04f 30ff 	mov.w	r0, #4294967295
 8015c64:	bd38      	pop	{r3, r4, r5, pc}
 8015c66:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8015c68:	b112      	cbz	r2, 8015c70 <_raise_r+0x1e>
 8015c6a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015c6e:	b94b      	cbnz	r3, 8015c84 <_raise_r+0x32>
 8015c70:	4628      	mov	r0, r5
 8015c72:	f000 f831 	bl	8015cd8 <_getpid_r>
 8015c76:	4622      	mov	r2, r4
 8015c78:	4601      	mov	r1, r0
 8015c7a:	4628      	mov	r0, r5
 8015c7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015c80:	f000 b818 	b.w	8015cb4 <_kill_r>
 8015c84:	2b01      	cmp	r3, #1
 8015c86:	d00a      	beq.n	8015c9e <_raise_r+0x4c>
 8015c88:	1c59      	adds	r1, r3, #1
 8015c8a:	d103      	bne.n	8015c94 <_raise_r+0x42>
 8015c8c:	2316      	movs	r3, #22
 8015c8e:	6003      	str	r3, [r0, #0]
 8015c90:	2001      	movs	r0, #1
 8015c92:	e7e7      	b.n	8015c64 <_raise_r+0x12>
 8015c94:	2100      	movs	r1, #0
 8015c96:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8015c9a:	4620      	mov	r0, r4
 8015c9c:	4798      	blx	r3
 8015c9e:	2000      	movs	r0, #0
 8015ca0:	e7e0      	b.n	8015c64 <_raise_r+0x12>
	...

08015ca4 <raise>:
 8015ca4:	4b02      	ldr	r3, [pc, #8]	@ (8015cb0 <raise+0xc>)
 8015ca6:	4601      	mov	r1, r0
 8015ca8:	6818      	ldr	r0, [r3, #0]
 8015caa:	f7ff bfd2 	b.w	8015c52 <_raise_r>
 8015cae:	bf00      	nop
 8015cb0:	20000810 	.word	0x20000810

08015cb4 <_kill_r>:
 8015cb4:	b538      	push	{r3, r4, r5, lr}
 8015cb6:	4d07      	ldr	r5, [pc, #28]	@ (8015cd4 <_kill_r+0x20>)
 8015cb8:	2300      	movs	r3, #0
 8015cba:	4604      	mov	r4, r0
 8015cbc:	4608      	mov	r0, r1
 8015cbe:	4611      	mov	r1, r2
 8015cc0:	602b      	str	r3, [r5, #0]
 8015cc2:	f7ec fb97 	bl	80023f4 <_kill>
 8015cc6:	1c43      	adds	r3, r0, #1
 8015cc8:	d102      	bne.n	8015cd0 <_kill_r+0x1c>
 8015cca:	682b      	ldr	r3, [r5, #0]
 8015ccc:	b103      	cbz	r3, 8015cd0 <_kill_r+0x1c>
 8015cce:	6023      	str	r3, [r4, #0]
 8015cd0:	bd38      	pop	{r3, r4, r5, pc}
 8015cd2:	bf00      	nop
 8015cd4:	2001ec44 	.word	0x2001ec44

08015cd8 <_getpid_r>:
 8015cd8:	f7ec bb84 	b.w	80023e4 <_getpid>

08015cdc <sqrtf>:
 8015cdc:	b508      	push	{r3, lr}
 8015cde:	ed2d 8b02 	vpush	{d8}
 8015ce2:	eeb0 8a40 	vmov.f32	s16, s0
 8015ce6:	f000 f862 	bl	8015dae <__ieee754_sqrtf>
 8015cea:	eeb4 8a48 	vcmp.f32	s16, s16
 8015cee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015cf2:	d60c      	bvs.n	8015d0e <sqrtf+0x32>
 8015cf4:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8015d14 <sqrtf+0x38>
 8015cf8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8015cfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d00:	d505      	bpl.n	8015d0e <sqrtf+0x32>
 8015d02:	f7fe fa75 	bl	80141f0 <__errno>
 8015d06:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8015d0a:	2321      	movs	r3, #33	@ 0x21
 8015d0c:	6003      	str	r3, [r0, #0]
 8015d0e:	ecbd 8b02 	vpop	{d8}
 8015d12:	bd08      	pop	{r3, pc}
 8015d14:	00000000 	.word	0x00000000

08015d18 <cosf>:
 8015d18:	ee10 3a10 	vmov	r3, s0
 8015d1c:	b507      	push	{r0, r1, r2, lr}
 8015d1e:	4a1e      	ldr	r2, [pc, #120]	@ (8015d98 <cosf+0x80>)
 8015d20:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8015d24:	4293      	cmp	r3, r2
 8015d26:	d806      	bhi.n	8015d36 <cosf+0x1e>
 8015d28:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8015d9c <cosf+0x84>
 8015d2c:	b003      	add	sp, #12
 8015d2e:	f85d eb04 	ldr.w	lr, [sp], #4
 8015d32:	f000 b83f 	b.w	8015db4 <__kernel_cosf>
 8015d36:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8015d3a:	d304      	bcc.n	8015d46 <cosf+0x2e>
 8015d3c:	ee30 0a40 	vsub.f32	s0, s0, s0
 8015d40:	b003      	add	sp, #12
 8015d42:	f85d fb04 	ldr.w	pc, [sp], #4
 8015d46:	4668      	mov	r0, sp
 8015d48:	f000 f8d4 	bl	8015ef4 <__ieee754_rem_pio2f>
 8015d4c:	f000 0003 	and.w	r0, r0, #3
 8015d50:	2801      	cmp	r0, #1
 8015d52:	d009      	beq.n	8015d68 <cosf+0x50>
 8015d54:	2802      	cmp	r0, #2
 8015d56:	d010      	beq.n	8015d7a <cosf+0x62>
 8015d58:	b9b0      	cbnz	r0, 8015d88 <cosf+0x70>
 8015d5a:	eddd 0a01 	vldr	s1, [sp, #4]
 8015d5e:	ed9d 0a00 	vldr	s0, [sp]
 8015d62:	f000 f827 	bl	8015db4 <__kernel_cosf>
 8015d66:	e7eb      	b.n	8015d40 <cosf+0x28>
 8015d68:	eddd 0a01 	vldr	s1, [sp, #4]
 8015d6c:	ed9d 0a00 	vldr	s0, [sp]
 8015d70:	f000 f878 	bl	8015e64 <__kernel_sinf>
 8015d74:	eeb1 0a40 	vneg.f32	s0, s0
 8015d78:	e7e2      	b.n	8015d40 <cosf+0x28>
 8015d7a:	eddd 0a01 	vldr	s1, [sp, #4]
 8015d7e:	ed9d 0a00 	vldr	s0, [sp]
 8015d82:	f000 f817 	bl	8015db4 <__kernel_cosf>
 8015d86:	e7f5      	b.n	8015d74 <cosf+0x5c>
 8015d88:	eddd 0a01 	vldr	s1, [sp, #4]
 8015d8c:	ed9d 0a00 	vldr	s0, [sp]
 8015d90:	2001      	movs	r0, #1
 8015d92:	f000 f867 	bl	8015e64 <__kernel_sinf>
 8015d96:	e7d3      	b.n	8015d40 <cosf+0x28>
 8015d98:	3f490fd8 	.word	0x3f490fd8
 8015d9c:	00000000 	.word	0x00000000

08015da0 <fabsf>:
 8015da0:	ee10 3a10 	vmov	r3, s0
 8015da4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8015da8:	ee00 3a10 	vmov	s0, r3
 8015dac:	4770      	bx	lr

08015dae <__ieee754_sqrtf>:
 8015dae:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8015db2:	4770      	bx	lr

08015db4 <__kernel_cosf>:
 8015db4:	ee10 3a10 	vmov	r3, s0
 8015db8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8015dbc:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8015dc0:	eef0 6a40 	vmov.f32	s13, s0
 8015dc4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8015dc8:	d204      	bcs.n	8015dd4 <__kernel_cosf+0x20>
 8015dca:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8015dce:	ee17 2a90 	vmov	r2, s15
 8015dd2:	b342      	cbz	r2, 8015e26 <__kernel_cosf+0x72>
 8015dd4:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8015dd8:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8015e44 <__kernel_cosf+0x90>
 8015ddc:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8015e48 <__kernel_cosf+0x94>
 8015de0:	4a1a      	ldr	r2, [pc, #104]	@ (8015e4c <__kernel_cosf+0x98>)
 8015de2:	eea7 6a27 	vfma.f32	s12, s14, s15
 8015de6:	4293      	cmp	r3, r2
 8015de8:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8015e50 <__kernel_cosf+0x9c>
 8015dec:	eee6 7a07 	vfma.f32	s15, s12, s14
 8015df0:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8015e54 <__kernel_cosf+0xa0>
 8015df4:	eea7 6a87 	vfma.f32	s12, s15, s14
 8015df8:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8015e58 <__kernel_cosf+0xa4>
 8015dfc:	eee6 7a07 	vfma.f32	s15, s12, s14
 8015e00:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8015e5c <__kernel_cosf+0xa8>
 8015e04:	eea7 6a87 	vfma.f32	s12, s15, s14
 8015e08:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8015e0c:	ee26 6a07 	vmul.f32	s12, s12, s14
 8015e10:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8015e14:	eee7 0a06 	vfma.f32	s1, s14, s12
 8015e18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015e1c:	d804      	bhi.n	8015e28 <__kernel_cosf+0x74>
 8015e1e:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8015e22:	ee30 0a67 	vsub.f32	s0, s0, s15
 8015e26:	4770      	bx	lr
 8015e28:	4a0d      	ldr	r2, [pc, #52]	@ (8015e60 <__kernel_cosf+0xac>)
 8015e2a:	4293      	cmp	r3, r2
 8015e2c:	bf9a      	itte	ls
 8015e2e:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8015e32:	ee07 3a10 	vmovls	s14, r3
 8015e36:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8015e3a:	ee30 0a47 	vsub.f32	s0, s0, s14
 8015e3e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015e42:	e7ec      	b.n	8015e1e <__kernel_cosf+0x6a>
 8015e44:	ad47d74e 	.word	0xad47d74e
 8015e48:	310f74f6 	.word	0x310f74f6
 8015e4c:	3e999999 	.word	0x3e999999
 8015e50:	b493f27c 	.word	0xb493f27c
 8015e54:	37d00d01 	.word	0x37d00d01
 8015e58:	bab60b61 	.word	0xbab60b61
 8015e5c:	3d2aaaab 	.word	0x3d2aaaab
 8015e60:	3f480000 	.word	0x3f480000

08015e64 <__kernel_sinf>:
 8015e64:	ee10 3a10 	vmov	r3, s0
 8015e68:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8015e6c:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8015e70:	d204      	bcs.n	8015e7c <__kernel_sinf+0x18>
 8015e72:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8015e76:	ee17 3a90 	vmov	r3, s15
 8015e7a:	b35b      	cbz	r3, 8015ed4 <__kernel_sinf+0x70>
 8015e7c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8015e80:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8015ed8 <__kernel_sinf+0x74>
 8015e84:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8015edc <__kernel_sinf+0x78>
 8015e88:	eea7 6a27 	vfma.f32	s12, s14, s15
 8015e8c:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8015ee0 <__kernel_sinf+0x7c>
 8015e90:	eee6 7a07 	vfma.f32	s15, s12, s14
 8015e94:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8015ee4 <__kernel_sinf+0x80>
 8015e98:	eea7 6a87 	vfma.f32	s12, s15, s14
 8015e9c:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8015ee8 <__kernel_sinf+0x84>
 8015ea0:	ee60 6a07 	vmul.f32	s13, s0, s14
 8015ea4:	eee6 7a07 	vfma.f32	s15, s12, s14
 8015ea8:	b930      	cbnz	r0, 8015eb8 <__kernel_sinf+0x54>
 8015eaa:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8015eec <__kernel_sinf+0x88>
 8015eae:	eea7 6a27 	vfma.f32	s12, s14, s15
 8015eb2:	eea6 0a26 	vfma.f32	s0, s12, s13
 8015eb6:	4770      	bx	lr
 8015eb8:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8015ebc:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8015ec0:	eee0 7a86 	vfma.f32	s15, s1, s12
 8015ec4:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8015ec8:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8015ef0 <__kernel_sinf+0x8c>
 8015ecc:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8015ed0:	ee30 0a60 	vsub.f32	s0, s0, s1
 8015ed4:	4770      	bx	lr
 8015ed6:	bf00      	nop
 8015ed8:	2f2ec9d3 	.word	0x2f2ec9d3
 8015edc:	b2d72f34 	.word	0xb2d72f34
 8015ee0:	3638ef1b 	.word	0x3638ef1b
 8015ee4:	b9500d01 	.word	0xb9500d01
 8015ee8:	3c088889 	.word	0x3c088889
 8015eec:	be2aaaab 	.word	0xbe2aaaab
 8015ef0:	3e2aaaab 	.word	0x3e2aaaab

08015ef4 <__ieee754_rem_pio2f>:
 8015ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015ef6:	ee10 6a10 	vmov	r6, s0
 8015efa:	4b88      	ldr	r3, [pc, #544]	@ (801611c <__ieee754_rem_pio2f+0x228>)
 8015efc:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8015f00:	429d      	cmp	r5, r3
 8015f02:	b087      	sub	sp, #28
 8015f04:	4604      	mov	r4, r0
 8015f06:	d805      	bhi.n	8015f14 <__ieee754_rem_pio2f+0x20>
 8015f08:	2300      	movs	r3, #0
 8015f0a:	ed80 0a00 	vstr	s0, [r0]
 8015f0e:	6043      	str	r3, [r0, #4]
 8015f10:	2000      	movs	r0, #0
 8015f12:	e022      	b.n	8015f5a <__ieee754_rem_pio2f+0x66>
 8015f14:	4b82      	ldr	r3, [pc, #520]	@ (8016120 <__ieee754_rem_pio2f+0x22c>)
 8015f16:	429d      	cmp	r5, r3
 8015f18:	d83a      	bhi.n	8015f90 <__ieee754_rem_pio2f+0x9c>
 8015f1a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8015f1e:	2e00      	cmp	r6, #0
 8015f20:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8016124 <__ieee754_rem_pio2f+0x230>
 8015f24:	4a80      	ldr	r2, [pc, #512]	@ (8016128 <__ieee754_rem_pio2f+0x234>)
 8015f26:	f023 030f 	bic.w	r3, r3, #15
 8015f2a:	dd18      	ble.n	8015f5e <__ieee754_rem_pio2f+0x6a>
 8015f2c:	4293      	cmp	r3, r2
 8015f2e:	ee70 7a47 	vsub.f32	s15, s0, s14
 8015f32:	bf09      	itett	eq
 8015f34:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 801612c <__ieee754_rem_pio2f+0x238>
 8015f38:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8016130 <__ieee754_rem_pio2f+0x23c>
 8015f3c:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8016134 <__ieee754_rem_pio2f+0x240>
 8015f40:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8015f44:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8015f48:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015f4c:	ed80 7a00 	vstr	s14, [r0]
 8015f50:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8015f54:	edc0 7a01 	vstr	s15, [r0, #4]
 8015f58:	2001      	movs	r0, #1
 8015f5a:	b007      	add	sp, #28
 8015f5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015f5e:	4293      	cmp	r3, r2
 8015f60:	ee70 7a07 	vadd.f32	s15, s0, s14
 8015f64:	bf09      	itett	eq
 8015f66:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 801612c <__ieee754_rem_pio2f+0x238>
 8015f6a:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8016130 <__ieee754_rem_pio2f+0x23c>
 8015f6e:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8016134 <__ieee754_rem_pio2f+0x240>
 8015f72:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8015f76:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8015f7a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015f7e:	ed80 7a00 	vstr	s14, [r0]
 8015f82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015f86:	edc0 7a01 	vstr	s15, [r0, #4]
 8015f8a:	f04f 30ff 	mov.w	r0, #4294967295
 8015f8e:	e7e4      	b.n	8015f5a <__ieee754_rem_pio2f+0x66>
 8015f90:	4b69      	ldr	r3, [pc, #420]	@ (8016138 <__ieee754_rem_pio2f+0x244>)
 8015f92:	429d      	cmp	r5, r3
 8015f94:	d873      	bhi.n	801607e <__ieee754_rem_pio2f+0x18a>
 8015f96:	f7ff ff03 	bl	8015da0 <fabsf>
 8015f9a:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 801613c <__ieee754_rem_pio2f+0x248>
 8015f9e:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8015fa2:	eee0 7a07 	vfma.f32	s15, s0, s14
 8015fa6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015faa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8015fae:	ee17 0a90 	vmov	r0, s15
 8015fb2:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8016124 <__ieee754_rem_pio2f+0x230>
 8015fb6:	eea7 0a67 	vfms.f32	s0, s14, s15
 8015fba:	281f      	cmp	r0, #31
 8015fbc:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8016130 <__ieee754_rem_pio2f+0x23c>
 8015fc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015fc4:	eeb1 6a47 	vneg.f32	s12, s14
 8015fc8:	ee70 6a67 	vsub.f32	s13, s0, s15
 8015fcc:	ee16 1a90 	vmov	r1, s13
 8015fd0:	dc09      	bgt.n	8015fe6 <__ieee754_rem_pio2f+0xf2>
 8015fd2:	4a5b      	ldr	r2, [pc, #364]	@ (8016140 <__ieee754_rem_pio2f+0x24c>)
 8015fd4:	1e47      	subs	r7, r0, #1
 8015fd6:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8015fda:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8015fde:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8015fe2:	4293      	cmp	r3, r2
 8015fe4:	d107      	bne.n	8015ff6 <__ieee754_rem_pio2f+0x102>
 8015fe6:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8015fea:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8015fee:	2a08      	cmp	r2, #8
 8015ff0:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8015ff4:	dc14      	bgt.n	8016020 <__ieee754_rem_pio2f+0x12c>
 8015ff6:	6021      	str	r1, [r4, #0]
 8015ff8:	ed94 7a00 	vldr	s14, [r4]
 8015ffc:	ee30 0a47 	vsub.f32	s0, s0, s14
 8016000:	2e00      	cmp	r6, #0
 8016002:	ee30 0a67 	vsub.f32	s0, s0, s15
 8016006:	ed84 0a01 	vstr	s0, [r4, #4]
 801600a:	daa6      	bge.n	8015f5a <__ieee754_rem_pio2f+0x66>
 801600c:	eeb1 7a47 	vneg.f32	s14, s14
 8016010:	eeb1 0a40 	vneg.f32	s0, s0
 8016014:	ed84 7a00 	vstr	s14, [r4]
 8016018:	ed84 0a01 	vstr	s0, [r4, #4]
 801601c:	4240      	negs	r0, r0
 801601e:	e79c      	b.n	8015f5a <__ieee754_rem_pio2f+0x66>
 8016020:	eddf 5a42 	vldr	s11, [pc, #264]	@ 801612c <__ieee754_rem_pio2f+0x238>
 8016024:	eef0 6a40 	vmov.f32	s13, s0
 8016028:	eee6 6a25 	vfma.f32	s13, s12, s11
 801602c:	ee70 7a66 	vsub.f32	s15, s0, s13
 8016030:	eee6 7a25 	vfma.f32	s15, s12, s11
 8016034:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8016134 <__ieee754_rem_pio2f+0x240>
 8016038:	eed7 7a25 	vfnms.f32	s15, s14, s11
 801603c:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8016040:	ee15 2a90 	vmov	r2, s11
 8016044:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8016048:	1a5b      	subs	r3, r3, r1
 801604a:	2b19      	cmp	r3, #25
 801604c:	dc04      	bgt.n	8016058 <__ieee754_rem_pio2f+0x164>
 801604e:	edc4 5a00 	vstr	s11, [r4]
 8016052:	eeb0 0a66 	vmov.f32	s0, s13
 8016056:	e7cf      	b.n	8015ff8 <__ieee754_rem_pio2f+0x104>
 8016058:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8016144 <__ieee754_rem_pio2f+0x250>
 801605c:	eeb0 0a66 	vmov.f32	s0, s13
 8016060:	eea6 0a25 	vfma.f32	s0, s12, s11
 8016064:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8016068:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8016148 <__ieee754_rem_pio2f+0x254>
 801606c:	eee6 7a25 	vfma.f32	s15, s12, s11
 8016070:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8016074:	ee30 7a67 	vsub.f32	s14, s0, s15
 8016078:	ed84 7a00 	vstr	s14, [r4]
 801607c:	e7bc      	b.n	8015ff8 <__ieee754_rem_pio2f+0x104>
 801607e:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8016082:	d306      	bcc.n	8016092 <__ieee754_rem_pio2f+0x19e>
 8016084:	ee70 7a40 	vsub.f32	s15, s0, s0
 8016088:	edc0 7a01 	vstr	s15, [r0, #4]
 801608c:	edc0 7a00 	vstr	s15, [r0]
 8016090:	e73e      	b.n	8015f10 <__ieee754_rem_pio2f+0x1c>
 8016092:	15ea      	asrs	r2, r5, #23
 8016094:	3a86      	subs	r2, #134	@ 0x86
 8016096:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 801609a:	ee07 3a90 	vmov	s15, r3
 801609e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80160a2:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 801614c <__ieee754_rem_pio2f+0x258>
 80160a6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80160aa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80160ae:	ed8d 7a03 	vstr	s14, [sp, #12]
 80160b2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80160b6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80160ba:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80160be:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80160c2:	ed8d 7a04 	vstr	s14, [sp, #16]
 80160c6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80160ca:	eef5 7a40 	vcmp.f32	s15, #0.0
 80160ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80160d2:	edcd 7a05 	vstr	s15, [sp, #20]
 80160d6:	d11e      	bne.n	8016116 <__ieee754_rem_pio2f+0x222>
 80160d8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80160dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80160e0:	bf0c      	ite	eq
 80160e2:	2301      	moveq	r3, #1
 80160e4:	2302      	movne	r3, #2
 80160e6:	491a      	ldr	r1, [pc, #104]	@ (8016150 <__ieee754_rem_pio2f+0x25c>)
 80160e8:	9101      	str	r1, [sp, #4]
 80160ea:	2102      	movs	r1, #2
 80160ec:	9100      	str	r1, [sp, #0]
 80160ee:	a803      	add	r0, sp, #12
 80160f0:	4621      	mov	r1, r4
 80160f2:	f000 f895 	bl	8016220 <__kernel_rem_pio2f>
 80160f6:	2e00      	cmp	r6, #0
 80160f8:	f6bf af2f 	bge.w	8015f5a <__ieee754_rem_pio2f+0x66>
 80160fc:	edd4 7a00 	vldr	s15, [r4]
 8016100:	eef1 7a67 	vneg.f32	s15, s15
 8016104:	edc4 7a00 	vstr	s15, [r4]
 8016108:	edd4 7a01 	vldr	s15, [r4, #4]
 801610c:	eef1 7a67 	vneg.f32	s15, s15
 8016110:	edc4 7a01 	vstr	s15, [r4, #4]
 8016114:	e782      	b.n	801601c <__ieee754_rem_pio2f+0x128>
 8016116:	2303      	movs	r3, #3
 8016118:	e7e5      	b.n	80160e6 <__ieee754_rem_pio2f+0x1f2>
 801611a:	bf00      	nop
 801611c:	3f490fd8 	.word	0x3f490fd8
 8016120:	4016cbe3 	.word	0x4016cbe3
 8016124:	3fc90f80 	.word	0x3fc90f80
 8016128:	3fc90fd0 	.word	0x3fc90fd0
 801612c:	37354400 	.word	0x37354400
 8016130:	37354443 	.word	0x37354443
 8016134:	2e85a308 	.word	0x2e85a308
 8016138:	43490f80 	.word	0x43490f80
 801613c:	3f22f984 	.word	0x3f22f984
 8016140:	080d3fe0 	.word	0x080d3fe0
 8016144:	2e85a300 	.word	0x2e85a300
 8016148:	248d3132 	.word	0x248d3132
 801614c:	43800000 	.word	0x43800000
 8016150:	080d4060 	.word	0x080d4060

08016154 <scalbnf>:
 8016154:	ee10 3a10 	vmov	r3, s0
 8016158:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 801615c:	d02b      	beq.n	80161b6 <scalbnf+0x62>
 801615e:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8016162:	d302      	bcc.n	801616a <scalbnf+0x16>
 8016164:	ee30 0a00 	vadd.f32	s0, s0, s0
 8016168:	4770      	bx	lr
 801616a:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 801616e:	d123      	bne.n	80161b8 <scalbnf+0x64>
 8016170:	4b24      	ldr	r3, [pc, #144]	@ (8016204 <scalbnf+0xb0>)
 8016172:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8016208 <scalbnf+0xb4>
 8016176:	4298      	cmp	r0, r3
 8016178:	ee20 0a27 	vmul.f32	s0, s0, s15
 801617c:	db17      	blt.n	80161ae <scalbnf+0x5a>
 801617e:	ee10 3a10 	vmov	r3, s0
 8016182:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8016186:	3a19      	subs	r2, #25
 8016188:	f24c 3150 	movw	r1, #50000	@ 0xc350
 801618c:	4288      	cmp	r0, r1
 801618e:	dd15      	ble.n	80161bc <scalbnf+0x68>
 8016190:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 801620c <scalbnf+0xb8>
 8016194:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8016210 <scalbnf+0xbc>
 8016198:	ee10 3a10 	vmov	r3, s0
 801619c:	eeb0 7a67 	vmov.f32	s14, s15
 80161a0:	2b00      	cmp	r3, #0
 80161a2:	bfb8      	it	lt
 80161a4:	eef0 7a66 	vmovlt.f32	s15, s13
 80161a8:	ee27 0a87 	vmul.f32	s0, s15, s14
 80161ac:	4770      	bx	lr
 80161ae:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8016214 <scalbnf+0xc0>
 80161b2:	ee27 0a80 	vmul.f32	s0, s15, s0
 80161b6:	4770      	bx	lr
 80161b8:	0dd2      	lsrs	r2, r2, #23
 80161ba:	e7e5      	b.n	8016188 <scalbnf+0x34>
 80161bc:	4410      	add	r0, r2
 80161be:	28fe      	cmp	r0, #254	@ 0xfe
 80161c0:	dce6      	bgt.n	8016190 <scalbnf+0x3c>
 80161c2:	2800      	cmp	r0, #0
 80161c4:	dd06      	ble.n	80161d4 <scalbnf+0x80>
 80161c6:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80161ca:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80161ce:	ee00 3a10 	vmov	s0, r3
 80161d2:	4770      	bx	lr
 80161d4:	f110 0f16 	cmn.w	r0, #22
 80161d8:	da09      	bge.n	80161ee <scalbnf+0x9a>
 80161da:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8016214 <scalbnf+0xc0>
 80161de:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8016218 <scalbnf+0xc4>
 80161e2:	ee10 3a10 	vmov	r3, s0
 80161e6:	eeb0 7a67 	vmov.f32	s14, s15
 80161ea:	2b00      	cmp	r3, #0
 80161ec:	e7d9      	b.n	80161a2 <scalbnf+0x4e>
 80161ee:	3019      	adds	r0, #25
 80161f0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80161f4:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80161f8:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 801621c <scalbnf+0xc8>
 80161fc:	ee07 3a90 	vmov	s15, r3
 8016200:	e7d7      	b.n	80161b2 <scalbnf+0x5e>
 8016202:	bf00      	nop
 8016204:	ffff3cb0 	.word	0xffff3cb0
 8016208:	4c000000 	.word	0x4c000000
 801620c:	7149f2ca 	.word	0x7149f2ca
 8016210:	f149f2ca 	.word	0xf149f2ca
 8016214:	0da24260 	.word	0x0da24260
 8016218:	8da24260 	.word	0x8da24260
 801621c:	33000000 	.word	0x33000000

08016220 <__kernel_rem_pio2f>:
 8016220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016224:	ed2d 8b04 	vpush	{d8-d9}
 8016228:	b0d9      	sub	sp, #356	@ 0x164
 801622a:	4690      	mov	r8, r2
 801622c:	9001      	str	r0, [sp, #4]
 801622e:	4ab9      	ldr	r2, [pc, #740]	@ (8016514 <__kernel_rem_pio2f+0x2f4>)
 8016230:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8016232:	f118 0f04 	cmn.w	r8, #4
 8016236:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 801623a:	460f      	mov	r7, r1
 801623c:	f103 3bff 	add.w	fp, r3, #4294967295
 8016240:	db27      	blt.n	8016292 <__kernel_rem_pio2f+0x72>
 8016242:	f1b8 0203 	subs.w	r2, r8, #3
 8016246:	bf48      	it	mi
 8016248:	f108 0204 	addmi.w	r2, r8, #4
 801624c:	10d2      	asrs	r2, r2, #3
 801624e:	1c55      	adds	r5, r2, #1
 8016250:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8016252:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 8016524 <__kernel_rem_pio2f+0x304>
 8016256:	00e8      	lsls	r0, r5, #3
 8016258:	eba2 060b 	sub.w	r6, r2, fp
 801625c:	9002      	str	r0, [sp, #8]
 801625e:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8016262:	eb0a 0c0b 	add.w	ip, sl, fp
 8016266:	ac1c      	add	r4, sp, #112	@ 0x70
 8016268:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 801626c:	2000      	movs	r0, #0
 801626e:	4560      	cmp	r0, ip
 8016270:	dd11      	ble.n	8016296 <__kernel_rem_pio2f+0x76>
 8016272:	a91c      	add	r1, sp, #112	@ 0x70
 8016274:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8016278:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 801627c:	f04f 0c00 	mov.w	ip, #0
 8016280:	45d4      	cmp	ip, sl
 8016282:	dc27      	bgt.n	80162d4 <__kernel_rem_pio2f+0xb4>
 8016284:	f8dd e004 	ldr.w	lr, [sp, #4]
 8016288:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 8016524 <__kernel_rem_pio2f+0x304>
 801628c:	4606      	mov	r6, r0
 801628e:	2400      	movs	r4, #0
 8016290:	e016      	b.n	80162c0 <__kernel_rem_pio2f+0xa0>
 8016292:	2200      	movs	r2, #0
 8016294:	e7db      	b.n	801624e <__kernel_rem_pio2f+0x2e>
 8016296:	42c6      	cmn	r6, r0
 8016298:	bf5d      	ittte	pl
 801629a:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 801629e:	ee07 1a90 	vmovpl	s15, r1
 80162a2:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80162a6:	eef0 7a47 	vmovmi.f32	s15, s14
 80162aa:	ece4 7a01 	vstmia	r4!, {s15}
 80162ae:	3001      	adds	r0, #1
 80162b0:	e7dd      	b.n	801626e <__kernel_rem_pio2f+0x4e>
 80162b2:	ecfe 6a01 	vldmia	lr!, {s13}
 80162b6:	ed96 7a00 	vldr	s14, [r6]
 80162ba:	eee6 7a87 	vfma.f32	s15, s13, s14
 80162be:	3401      	adds	r4, #1
 80162c0:	455c      	cmp	r4, fp
 80162c2:	f1a6 0604 	sub.w	r6, r6, #4
 80162c6:	ddf4      	ble.n	80162b2 <__kernel_rem_pio2f+0x92>
 80162c8:	ece9 7a01 	vstmia	r9!, {s15}
 80162cc:	f10c 0c01 	add.w	ip, ip, #1
 80162d0:	3004      	adds	r0, #4
 80162d2:	e7d5      	b.n	8016280 <__kernel_rem_pio2f+0x60>
 80162d4:	a908      	add	r1, sp, #32
 80162d6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80162da:	9104      	str	r1, [sp, #16]
 80162dc:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 80162de:	eddf 8a90 	vldr	s17, [pc, #576]	@ 8016520 <__kernel_rem_pio2f+0x300>
 80162e2:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 801651c <__kernel_rem_pio2f+0x2fc>
 80162e6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80162ea:	9203      	str	r2, [sp, #12]
 80162ec:	4654      	mov	r4, sl
 80162ee:	00a2      	lsls	r2, r4, #2
 80162f0:	9205      	str	r2, [sp, #20]
 80162f2:	aa58      	add	r2, sp, #352	@ 0x160
 80162f4:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 80162f8:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 80162fc:	a944      	add	r1, sp, #272	@ 0x110
 80162fe:	aa08      	add	r2, sp, #32
 8016300:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8016304:	4694      	mov	ip, r2
 8016306:	4626      	mov	r6, r4
 8016308:	2e00      	cmp	r6, #0
 801630a:	f1a0 0004 	sub.w	r0, r0, #4
 801630e:	dc4c      	bgt.n	80163aa <__kernel_rem_pio2f+0x18a>
 8016310:	4628      	mov	r0, r5
 8016312:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8016316:	f7ff ff1d 	bl	8016154 <scalbnf>
 801631a:	eeb0 8a40 	vmov.f32	s16, s0
 801631e:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8016322:	ee28 0a00 	vmul.f32	s0, s16, s0
 8016326:	f000 f9ed 	bl	8016704 <floorf>
 801632a:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 801632e:	eea0 8a67 	vfms.f32	s16, s0, s15
 8016332:	2d00      	cmp	r5, #0
 8016334:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016338:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801633c:	ee17 9a90 	vmov	r9, s15
 8016340:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016344:	ee38 8a67 	vsub.f32	s16, s16, s15
 8016348:	dd41      	ble.n	80163ce <__kernel_rem_pio2f+0x1ae>
 801634a:	f104 3cff 	add.w	ip, r4, #4294967295
 801634e:	a908      	add	r1, sp, #32
 8016350:	f1c5 0e08 	rsb	lr, r5, #8
 8016354:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8016358:	fa46 f00e 	asr.w	r0, r6, lr
 801635c:	4481      	add	r9, r0
 801635e:	fa00 f00e 	lsl.w	r0, r0, lr
 8016362:	1a36      	subs	r6, r6, r0
 8016364:	f1c5 0007 	rsb	r0, r5, #7
 8016368:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 801636c:	4106      	asrs	r6, r0
 801636e:	2e00      	cmp	r6, #0
 8016370:	dd3c      	ble.n	80163ec <__kernel_rem_pio2f+0x1cc>
 8016372:	f04f 0e00 	mov.w	lr, #0
 8016376:	f109 0901 	add.w	r9, r9, #1
 801637a:	4670      	mov	r0, lr
 801637c:	4574      	cmp	r4, lr
 801637e:	dc68      	bgt.n	8016452 <__kernel_rem_pio2f+0x232>
 8016380:	2d00      	cmp	r5, #0
 8016382:	dd03      	ble.n	801638c <__kernel_rem_pio2f+0x16c>
 8016384:	2d01      	cmp	r5, #1
 8016386:	d074      	beq.n	8016472 <__kernel_rem_pio2f+0x252>
 8016388:	2d02      	cmp	r5, #2
 801638a:	d07d      	beq.n	8016488 <__kernel_rem_pio2f+0x268>
 801638c:	2e02      	cmp	r6, #2
 801638e:	d12d      	bne.n	80163ec <__kernel_rem_pio2f+0x1cc>
 8016390:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8016394:	ee30 8a48 	vsub.f32	s16, s0, s16
 8016398:	b340      	cbz	r0, 80163ec <__kernel_rem_pio2f+0x1cc>
 801639a:	4628      	mov	r0, r5
 801639c:	9306      	str	r3, [sp, #24]
 801639e:	f7ff fed9 	bl	8016154 <scalbnf>
 80163a2:	9b06      	ldr	r3, [sp, #24]
 80163a4:	ee38 8a40 	vsub.f32	s16, s16, s0
 80163a8:	e020      	b.n	80163ec <__kernel_rem_pio2f+0x1cc>
 80163aa:	ee60 7a28 	vmul.f32	s15, s0, s17
 80163ae:	3e01      	subs	r6, #1
 80163b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80163b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80163b8:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80163bc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80163c0:	ecac 0a01 	vstmia	ip!, {s0}
 80163c4:	ed90 0a00 	vldr	s0, [r0]
 80163c8:	ee37 0a80 	vadd.f32	s0, s15, s0
 80163cc:	e79c      	b.n	8016308 <__kernel_rem_pio2f+0xe8>
 80163ce:	d105      	bne.n	80163dc <__kernel_rem_pio2f+0x1bc>
 80163d0:	1e60      	subs	r0, r4, #1
 80163d2:	a908      	add	r1, sp, #32
 80163d4:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 80163d8:	11f6      	asrs	r6, r6, #7
 80163da:	e7c8      	b.n	801636e <__kernel_rem_pio2f+0x14e>
 80163dc:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80163e0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80163e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80163e8:	da31      	bge.n	801644e <__kernel_rem_pio2f+0x22e>
 80163ea:	2600      	movs	r6, #0
 80163ec:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80163f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80163f4:	f040 8098 	bne.w	8016528 <__kernel_rem_pio2f+0x308>
 80163f8:	1e60      	subs	r0, r4, #1
 80163fa:	2200      	movs	r2, #0
 80163fc:	4550      	cmp	r0, sl
 80163fe:	da4b      	bge.n	8016498 <__kernel_rem_pio2f+0x278>
 8016400:	2a00      	cmp	r2, #0
 8016402:	d065      	beq.n	80164d0 <__kernel_rem_pio2f+0x2b0>
 8016404:	3c01      	subs	r4, #1
 8016406:	ab08      	add	r3, sp, #32
 8016408:	3d08      	subs	r5, #8
 801640a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801640e:	2b00      	cmp	r3, #0
 8016410:	d0f8      	beq.n	8016404 <__kernel_rem_pio2f+0x1e4>
 8016412:	4628      	mov	r0, r5
 8016414:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8016418:	f7ff fe9c 	bl	8016154 <scalbnf>
 801641c:	1c63      	adds	r3, r4, #1
 801641e:	aa44      	add	r2, sp, #272	@ 0x110
 8016420:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8016520 <__kernel_rem_pio2f+0x300>
 8016424:	0099      	lsls	r1, r3, #2
 8016426:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801642a:	4623      	mov	r3, r4
 801642c:	2b00      	cmp	r3, #0
 801642e:	f280 80a9 	bge.w	8016584 <__kernel_rem_pio2f+0x364>
 8016432:	4623      	mov	r3, r4
 8016434:	2b00      	cmp	r3, #0
 8016436:	f2c0 80c7 	blt.w	80165c8 <__kernel_rem_pio2f+0x3a8>
 801643a:	aa44      	add	r2, sp, #272	@ 0x110
 801643c:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8016440:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8016518 <__kernel_rem_pio2f+0x2f8>
 8016444:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8016524 <__kernel_rem_pio2f+0x304>
 8016448:	2000      	movs	r0, #0
 801644a:	1ae2      	subs	r2, r4, r3
 801644c:	e0b1      	b.n	80165b2 <__kernel_rem_pio2f+0x392>
 801644e:	2602      	movs	r6, #2
 8016450:	e78f      	b.n	8016372 <__kernel_rem_pio2f+0x152>
 8016452:	f852 1b04 	ldr.w	r1, [r2], #4
 8016456:	b948      	cbnz	r0, 801646c <__kernel_rem_pio2f+0x24c>
 8016458:	b121      	cbz	r1, 8016464 <__kernel_rem_pio2f+0x244>
 801645a:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 801645e:	f842 1c04 	str.w	r1, [r2, #-4]
 8016462:	2101      	movs	r1, #1
 8016464:	f10e 0e01 	add.w	lr, lr, #1
 8016468:	4608      	mov	r0, r1
 801646a:	e787      	b.n	801637c <__kernel_rem_pio2f+0x15c>
 801646c:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8016470:	e7f5      	b.n	801645e <__kernel_rem_pio2f+0x23e>
 8016472:	f104 3cff 	add.w	ip, r4, #4294967295
 8016476:	aa08      	add	r2, sp, #32
 8016478:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801647c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8016480:	a908      	add	r1, sp, #32
 8016482:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8016486:	e781      	b.n	801638c <__kernel_rem_pio2f+0x16c>
 8016488:	f104 3cff 	add.w	ip, r4, #4294967295
 801648c:	aa08      	add	r2, sp, #32
 801648e:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8016492:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8016496:	e7f3      	b.n	8016480 <__kernel_rem_pio2f+0x260>
 8016498:	a908      	add	r1, sp, #32
 801649a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801649e:	3801      	subs	r0, #1
 80164a0:	430a      	orrs	r2, r1
 80164a2:	e7ab      	b.n	80163fc <__kernel_rem_pio2f+0x1dc>
 80164a4:	3201      	adds	r2, #1
 80164a6:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 80164aa:	2e00      	cmp	r6, #0
 80164ac:	d0fa      	beq.n	80164a4 <__kernel_rem_pio2f+0x284>
 80164ae:	9905      	ldr	r1, [sp, #20]
 80164b0:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 80164b4:	eb0d 0001 	add.w	r0, sp, r1
 80164b8:	18e6      	adds	r6, r4, r3
 80164ba:	a91c      	add	r1, sp, #112	@ 0x70
 80164bc:	f104 0c01 	add.w	ip, r4, #1
 80164c0:	384c      	subs	r0, #76	@ 0x4c
 80164c2:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 80164c6:	4422      	add	r2, r4
 80164c8:	4562      	cmp	r2, ip
 80164ca:	da04      	bge.n	80164d6 <__kernel_rem_pio2f+0x2b6>
 80164cc:	4614      	mov	r4, r2
 80164ce:	e70e      	b.n	80162ee <__kernel_rem_pio2f+0xce>
 80164d0:	9804      	ldr	r0, [sp, #16]
 80164d2:	2201      	movs	r2, #1
 80164d4:	e7e7      	b.n	80164a6 <__kernel_rem_pio2f+0x286>
 80164d6:	9903      	ldr	r1, [sp, #12]
 80164d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80164dc:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 80164e0:	9105      	str	r1, [sp, #20]
 80164e2:	ee07 1a90 	vmov	s15, r1
 80164e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80164ea:	2400      	movs	r4, #0
 80164ec:	ece6 7a01 	vstmia	r6!, {s15}
 80164f0:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8016524 <__kernel_rem_pio2f+0x304>
 80164f4:	46b1      	mov	r9, r6
 80164f6:	455c      	cmp	r4, fp
 80164f8:	dd04      	ble.n	8016504 <__kernel_rem_pio2f+0x2e4>
 80164fa:	ece0 7a01 	vstmia	r0!, {s15}
 80164fe:	f10c 0c01 	add.w	ip, ip, #1
 8016502:	e7e1      	b.n	80164c8 <__kernel_rem_pio2f+0x2a8>
 8016504:	ecfe 6a01 	vldmia	lr!, {s13}
 8016508:	ed39 7a01 	vldmdb	r9!, {s14}
 801650c:	3401      	adds	r4, #1
 801650e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8016512:	e7f0      	b.n	80164f6 <__kernel_rem_pio2f+0x2d6>
 8016514:	080d43a4 	.word	0x080d43a4
 8016518:	080d4378 	.word	0x080d4378
 801651c:	43800000 	.word	0x43800000
 8016520:	3b800000 	.word	0x3b800000
 8016524:	00000000 	.word	0x00000000
 8016528:	9b02      	ldr	r3, [sp, #8]
 801652a:	eeb0 0a48 	vmov.f32	s0, s16
 801652e:	eba3 0008 	sub.w	r0, r3, r8
 8016532:	f7ff fe0f 	bl	8016154 <scalbnf>
 8016536:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 801651c <__kernel_rem_pio2f+0x2fc>
 801653a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801653e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016542:	db19      	blt.n	8016578 <__kernel_rem_pio2f+0x358>
 8016544:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8016520 <__kernel_rem_pio2f+0x300>
 8016548:	ee60 7a27 	vmul.f32	s15, s0, s15
 801654c:	aa08      	add	r2, sp, #32
 801654e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016552:	3508      	adds	r5, #8
 8016554:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016558:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801655c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016560:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8016564:	ee10 3a10 	vmov	r3, s0
 8016568:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801656c:	ee17 3a90 	vmov	r3, s15
 8016570:	3401      	adds	r4, #1
 8016572:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8016576:	e74c      	b.n	8016412 <__kernel_rem_pio2f+0x1f2>
 8016578:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801657c:	aa08      	add	r2, sp, #32
 801657e:	ee10 3a10 	vmov	r3, s0
 8016582:	e7f6      	b.n	8016572 <__kernel_rem_pio2f+0x352>
 8016584:	a808      	add	r0, sp, #32
 8016586:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801658a:	9001      	str	r0, [sp, #4]
 801658c:	ee07 0a90 	vmov	s15, r0
 8016590:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016594:	3b01      	subs	r3, #1
 8016596:	ee67 7a80 	vmul.f32	s15, s15, s0
 801659a:	ee20 0a07 	vmul.f32	s0, s0, s14
 801659e:	ed62 7a01 	vstmdb	r2!, {s15}
 80165a2:	e743      	b.n	801642c <__kernel_rem_pio2f+0x20c>
 80165a4:	ecfc 6a01 	vldmia	ip!, {s13}
 80165a8:	ecb5 7a01 	vldmia	r5!, {s14}
 80165ac:	eee6 7a87 	vfma.f32	s15, s13, s14
 80165b0:	3001      	adds	r0, #1
 80165b2:	4550      	cmp	r0, sl
 80165b4:	dc01      	bgt.n	80165ba <__kernel_rem_pio2f+0x39a>
 80165b6:	4282      	cmp	r2, r0
 80165b8:	daf4      	bge.n	80165a4 <__kernel_rem_pio2f+0x384>
 80165ba:	a858      	add	r0, sp, #352	@ 0x160
 80165bc:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80165c0:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 80165c4:	3b01      	subs	r3, #1
 80165c6:	e735      	b.n	8016434 <__kernel_rem_pio2f+0x214>
 80165c8:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 80165ca:	2b02      	cmp	r3, #2
 80165cc:	dc09      	bgt.n	80165e2 <__kernel_rem_pio2f+0x3c2>
 80165ce:	2b00      	cmp	r3, #0
 80165d0:	dc2b      	bgt.n	801662a <__kernel_rem_pio2f+0x40a>
 80165d2:	d044      	beq.n	801665e <__kernel_rem_pio2f+0x43e>
 80165d4:	f009 0007 	and.w	r0, r9, #7
 80165d8:	b059      	add	sp, #356	@ 0x164
 80165da:	ecbd 8b04 	vpop	{d8-d9}
 80165de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80165e2:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 80165e4:	2b03      	cmp	r3, #3
 80165e6:	d1f5      	bne.n	80165d4 <__kernel_rem_pio2f+0x3b4>
 80165e8:	aa30      	add	r2, sp, #192	@ 0xc0
 80165ea:	1f0b      	subs	r3, r1, #4
 80165ec:	4413      	add	r3, r2
 80165ee:	461a      	mov	r2, r3
 80165f0:	4620      	mov	r0, r4
 80165f2:	2800      	cmp	r0, #0
 80165f4:	f1a2 0204 	sub.w	r2, r2, #4
 80165f8:	dc52      	bgt.n	80166a0 <__kernel_rem_pio2f+0x480>
 80165fa:	4622      	mov	r2, r4
 80165fc:	2a01      	cmp	r2, #1
 80165fe:	f1a3 0304 	sub.w	r3, r3, #4
 8016602:	dc5d      	bgt.n	80166c0 <__kernel_rem_pio2f+0x4a0>
 8016604:	ab30      	add	r3, sp, #192	@ 0xc0
 8016606:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 8016524 <__kernel_rem_pio2f+0x304>
 801660a:	440b      	add	r3, r1
 801660c:	2c01      	cmp	r4, #1
 801660e:	dc67      	bgt.n	80166e0 <__kernel_rem_pio2f+0x4c0>
 8016610:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8016614:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8016618:	2e00      	cmp	r6, #0
 801661a:	d167      	bne.n	80166ec <__kernel_rem_pio2f+0x4cc>
 801661c:	edc7 6a00 	vstr	s13, [r7]
 8016620:	ed87 7a01 	vstr	s14, [r7, #4]
 8016624:	edc7 7a02 	vstr	s15, [r7, #8]
 8016628:	e7d4      	b.n	80165d4 <__kernel_rem_pio2f+0x3b4>
 801662a:	ab30      	add	r3, sp, #192	@ 0xc0
 801662c:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 8016524 <__kernel_rem_pio2f+0x304>
 8016630:	440b      	add	r3, r1
 8016632:	4622      	mov	r2, r4
 8016634:	2a00      	cmp	r2, #0
 8016636:	da24      	bge.n	8016682 <__kernel_rem_pio2f+0x462>
 8016638:	b34e      	cbz	r6, 801668e <__kernel_rem_pio2f+0x46e>
 801663a:	eef1 7a47 	vneg.f32	s15, s14
 801663e:	edc7 7a00 	vstr	s15, [r7]
 8016642:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8016646:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801664a:	aa31      	add	r2, sp, #196	@ 0xc4
 801664c:	2301      	movs	r3, #1
 801664e:	429c      	cmp	r4, r3
 8016650:	da20      	bge.n	8016694 <__kernel_rem_pio2f+0x474>
 8016652:	b10e      	cbz	r6, 8016658 <__kernel_rem_pio2f+0x438>
 8016654:	eef1 7a67 	vneg.f32	s15, s15
 8016658:	edc7 7a01 	vstr	s15, [r7, #4]
 801665c:	e7ba      	b.n	80165d4 <__kernel_rem_pio2f+0x3b4>
 801665e:	ab30      	add	r3, sp, #192	@ 0xc0
 8016660:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 8016524 <__kernel_rem_pio2f+0x304>
 8016664:	440b      	add	r3, r1
 8016666:	2c00      	cmp	r4, #0
 8016668:	da05      	bge.n	8016676 <__kernel_rem_pio2f+0x456>
 801666a:	b10e      	cbz	r6, 8016670 <__kernel_rem_pio2f+0x450>
 801666c:	eef1 7a67 	vneg.f32	s15, s15
 8016670:	edc7 7a00 	vstr	s15, [r7]
 8016674:	e7ae      	b.n	80165d4 <__kernel_rem_pio2f+0x3b4>
 8016676:	ed33 7a01 	vldmdb	r3!, {s14}
 801667a:	3c01      	subs	r4, #1
 801667c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016680:	e7f1      	b.n	8016666 <__kernel_rem_pio2f+0x446>
 8016682:	ed73 7a01 	vldmdb	r3!, {s15}
 8016686:	3a01      	subs	r2, #1
 8016688:	ee37 7a27 	vadd.f32	s14, s14, s15
 801668c:	e7d2      	b.n	8016634 <__kernel_rem_pio2f+0x414>
 801668e:	eef0 7a47 	vmov.f32	s15, s14
 8016692:	e7d4      	b.n	801663e <__kernel_rem_pio2f+0x41e>
 8016694:	ecb2 7a01 	vldmia	r2!, {s14}
 8016698:	3301      	adds	r3, #1
 801669a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801669e:	e7d6      	b.n	801664e <__kernel_rem_pio2f+0x42e>
 80166a0:	edd2 7a00 	vldr	s15, [r2]
 80166a4:	edd2 6a01 	vldr	s13, [r2, #4]
 80166a8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80166ac:	3801      	subs	r0, #1
 80166ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80166b2:	ed82 7a00 	vstr	s14, [r2]
 80166b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80166ba:	edc2 7a01 	vstr	s15, [r2, #4]
 80166be:	e798      	b.n	80165f2 <__kernel_rem_pio2f+0x3d2>
 80166c0:	edd3 7a00 	vldr	s15, [r3]
 80166c4:	edd3 6a01 	vldr	s13, [r3, #4]
 80166c8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80166cc:	3a01      	subs	r2, #1
 80166ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80166d2:	ed83 7a00 	vstr	s14, [r3]
 80166d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80166da:	edc3 7a01 	vstr	s15, [r3, #4]
 80166de:	e78d      	b.n	80165fc <__kernel_rem_pio2f+0x3dc>
 80166e0:	ed33 7a01 	vldmdb	r3!, {s14}
 80166e4:	3c01      	subs	r4, #1
 80166e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80166ea:	e78f      	b.n	801660c <__kernel_rem_pio2f+0x3ec>
 80166ec:	eef1 6a66 	vneg.f32	s13, s13
 80166f0:	eeb1 7a47 	vneg.f32	s14, s14
 80166f4:	edc7 6a00 	vstr	s13, [r7]
 80166f8:	ed87 7a01 	vstr	s14, [r7, #4]
 80166fc:	eef1 7a67 	vneg.f32	s15, s15
 8016700:	e790      	b.n	8016624 <__kernel_rem_pio2f+0x404>
 8016702:	bf00      	nop

08016704 <floorf>:
 8016704:	ee10 3a10 	vmov	r3, s0
 8016708:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801670c:	3a7f      	subs	r2, #127	@ 0x7f
 801670e:	2a16      	cmp	r2, #22
 8016710:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8016714:	dc2b      	bgt.n	801676e <floorf+0x6a>
 8016716:	2a00      	cmp	r2, #0
 8016718:	da12      	bge.n	8016740 <floorf+0x3c>
 801671a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8016780 <floorf+0x7c>
 801671e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8016722:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8016726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801672a:	dd06      	ble.n	801673a <floorf+0x36>
 801672c:	2b00      	cmp	r3, #0
 801672e:	da24      	bge.n	801677a <floorf+0x76>
 8016730:	2900      	cmp	r1, #0
 8016732:	4b14      	ldr	r3, [pc, #80]	@ (8016784 <floorf+0x80>)
 8016734:	bf08      	it	eq
 8016736:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 801673a:	ee00 3a10 	vmov	s0, r3
 801673e:	4770      	bx	lr
 8016740:	4911      	ldr	r1, [pc, #68]	@ (8016788 <floorf+0x84>)
 8016742:	4111      	asrs	r1, r2
 8016744:	420b      	tst	r3, r1
 8016746:	d0fa      	beq.n	801673e <floorf+0x3a>
 8016748:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8016780 <floorf+0x7c>
 801674c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8016750:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8016754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016758:	ddef      	ble.n	801673a <floorf+0x36>
 801675a:	2b00      	cmp	r3, #0
 801675c:	bfbe      	ittt	lt
 801675e:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8016762:	fa40 f202 	asrlt.w	r2, r0, r2
 8016766:	189b      	addlt	r3, r3, r2
 8016768:	ea23 0301 	bic.w	r3, r3, r1
 801676c:	e7e5      	b.n	801673a <floorf+0x36>
 801676e:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8016772:	d3e4      	bcc.n	801673e <floorf+0x3a>
 8016774:	ee30 0a00 	vadd.f32	s0, s0, s0
 8016778:	4770      	bx	lr
 801677a:	2300      	movs	r3, #0
 801677c:	e7dd      	b.n	801673a <floorf+0x36>
 801677e:	bf00      	nop
 8016780:	7149f2ca 	.word	0x7149f2ca
 8016784:	bf800000 	.word	0xbf800000
 8016788:	007fffff 	.word	0x007fffff

0801678c <_init>:
 801678c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801678e:	bf00      	nop
 8016790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016792:	bc08      	pop	{r3}
 8016794:	469e      	mov	lr, r3
 8016796:	4770      	bx	lr

08016798 <_fini>:
 8016798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801679a:	bf00      	nop
 801679c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801679e:	bc08      	pop	{r3}
 80167a0:	469e      	mov	lr, r3
 80167a2:	4770      	bx	lr
