
Microphone_wav_SD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000109d4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000850  08010ba8  08010ba8  00011ba8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080113f8  080113f8  00013214  2**0
                  CONTENTS
  4 .ARM          00000008  080113f8  080113f8  000123f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011400  08011400  00013214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011400  08011400  00012400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011404  08011404  00012404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000214  20000000  08011408  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005560  20000214  0801161c  00013214  2**2
                  ALLOC
 10 ._user_heap_stack 00004004  20005774  0801161c  00013774  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00013214  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cd88  00000000  00000000  00013244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004622  00000000  00000000  0002ffcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017d0  00000000  00000000  000345f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000124b  00000000  00000000  00035dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b68a  00000000  00000000  0003700b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000217a7  00000000  00000000  00062695  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f9642  00000000  00000000  00083e3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017d47e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000070ec  00000000  00000000  0017d4c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  001845b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000214 	.word	0x20000214
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08010b8c 	.word	0x08010b8c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000218 	.word	0x20000218
 800020c:	08010b8c 	.word	0x08010b8c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96a 	b.w	8000ed4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	460c      	mov	r4, r1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d14e      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c24:	4694      	mov	ip, r2
 8000c26:	458c      	cmp	ip, r1
 8000c28:	4686      	mov	lr, r0
 8000c2a:	fab2 f282 	clz	r2, r2
 8000c2e:	d962      	bls.n	8000cf6 <__udivmoddi4+0xde>
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0320 	rsb	r3, r2, #32
 8000c36:	4091      	lsls	r1, r2
 8000c38:	fa20 f303 	lsr.w	r3, r0, r3
 8000c3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c40:	4319      	orrs	r1, r3
 8000c42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4a:	fa1f f68c 	uxth.w	r6, ip
 8000c4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c56:	fb07 1114 	mls	r1, r7, r4, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb04 f106 	mul.w	r1, r4, r6
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c6e:	f080 8112 	bcs.w	8000e96 <__udivmoddi4+0x27e>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 810f 	bls.w	8000e96 <__udivmoddi4+0x27e>
 8000c78:	3c02      	subs	r4, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a59      	subs	r1, r3, r1
 8000c7e:	fa1f f38e 	uxth.w	r3, lr
 8000c82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c86:	fb07 1110 	mls	r1, r7, r0, r1
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb00 f606 	mul.w	r6, r0, r6
 8000c92:	429e      	cmp	r6, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x94>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c9e:	f080 80fc 	bcs.w	8000e9a <__udivmoddi4+0x282>
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	f240 80f9 	bls.w	8000e9a <__udivmoddi4+0x282>
 8000ca8:	4463      	add	r3, ip
 8000caa:	3802      	subs	r0, #2
 8000cac:	1b9b      	subs	r3, r3, r6
 8000cae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	b11d      	cbz	r5, 8000cbe <__udivmoddi4+0xa6>
 8000cb6:	40d3      	lsrs	r3, r2
 8000cb8:	2200      	movs	r2, #0
 8000cba:	e9c5 3200 	strd	r3, r2, [r5]
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d905      	bls.n	8000cd2 <__udivmoddi4+0xba>
 8000cc6:	b10d      	cbz	r5, 8000ccc <__udivmoddi4+0xb4>
 8000cc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e7f5      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cd2:	fab3 f183 	clz	r1, r3
 8000cd6:	2900      	cmp	r1, #0
 8000cd8:	d146      	bne.n	8000d68 <__udivmoddi4+0x150>
 8000cda:	42a3      	cmp	r3, r4
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xcc>
 8000cde:	4290      	cmp	r0, r2
 8000ce0:	f0c0 80f0 	bcc.w	8000ec4 <__udivmoddi4+0x2ac>
 8000ce4:	1a86      	subs	r6, r0, r2
 8000ce6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	2d00      	cmp	r5, #0
 8000cee:	d0e6      	beq.n	8000cbe <__udivmoddi4+0xa6>
 8000cf0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cf4:	e7e3      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	f040 8090 	bne.w	8000e1c <__udivmoddi4+0x204>
 8000cfc:	eba1 040c 	sub.w	r4, r1, ip
 8000d00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d04:	fa1f f78c 	uxth.w	r7, ip
 8000d08:	2101      	movs	r1, #1
 8000d0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb08 4416 	mls	r4, r8, r6, r4
 8000d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1a:	fb07 f006 	mul.w	r0, r7, r6
 8000d1e:	4298      	cmp	r0, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x11c>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x11a>
 8000d2c:	4298      	cmp	r0, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000d32:	4626      	mov	r6, r4
 8000d34:	1a1c      	subs	r4, r3, r0
 8000d36:	fa1f f38e 	uxth.w	r3, lr
 8000d3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d46:	fb00 f707 	mul.w	r7, r0, r7
 8000d4a:	429f      	cmp	r7, r3
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0x148>
 8000d4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d52:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x146>
 8000d58:	429f      	cmp	r7, r3
 8000d5a:	f200 80b0 	bhi.w	8000ebe <__udivmoddi4+0x2a6>
 8000d5e:	4620      	mov	r0, r4
 8000d60:	1bdb      	subs	r3, r3, r7
 8000d62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d66:	e7a5      	b.n	8000cb4 <__udivmoddi4+0x9c>
 8000d68:	f1c1 0620 	rsb	r6, r1, #32
 8000d6c:	408b      	lsls	r3, r1
 8000d6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d72:	431f      	orrs	r7, r3
 8000d74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d78:	fa04 f301 	lsl.w	r3, r4, r1
 8000d7c:	ea43 030c 	orr.w	r3, r3, ip
 8000d80:	40f4      	lsrs	r4, r6
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	0c38      	lsrs	r0, r7, #16
 8000d88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d90:	fa1f fc87 	uxth.w	ip, r7
 8000d94:	fb00 441e 	mls	r4, r0, lr, r4
 8000d98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000da0:	45a1      	cmp	r9, r4
 8000da2:	fa02 f201 	lsl.w	r2, r2, r1
 8000da6:	d90a      	bls.n	8000dbe <__udivmoddi4+0x1a6>
 8000da8:	193c      	adds	r4, r7, r4
 8000daa:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dae:	f080 8084 	bcs.w	8000eba <__udivmoddi4+0x2a2>
 8000db2:	45a1      	cmp	r9, r4
 8000db4:	f240 8081 	bls.w	8000eba <__udivmoddi4+0x2a2>
 8000db8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dbc:	443c      	add	r4, r7
 8000dbe:	eba4 0409 	sub.w	r4, r4, r9
 8000dc2:	fa1f f983 	uxth.w	r9, r3
 8000dc6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dca:	fb00 4413 	mls	r4, r0, r3, r4
 8000dce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd6:	45a4      	cmp	ip, r4
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x1d2>
 8000dda:	193c      	adds	r4, r7, r4
 8000ddc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000de0:	d267      	bcs.n	8000eb2 <__udivmoddi4+0x29a>
 8000de2:	45a4      	cmp	ip, r4
 8000de4:	d965      	bls.n	8000eb2 <__udivmoddi4+0x29a>
 8000de6:	3b02      	subs	r3, #2
 8000de8:	443c      	add	r4, r7
 8000dea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dee:	fba0 9302 	umull	r9, r3, r0, r2
 8000df2:	eba4 040c 	sub.w	r4, r4, ip
 8000df6:	429c      	cmp	r4, r3
 8000df8:	46ce      	mov	lr, r9
 8000dfa:	469c      	mov	ip, r3
 8000dfc:	d351      	bcc.n	8000ea2 <__udivmoddi4+0x28a>
 8000dfe:	d04e      	beq.n	8000e9e <__udivmoddi4+0x286>
 8000e00:	b155      	cbz	r5, 8000e18 <__udivmoddi4+0x200>
 8000e02:	ebb8 030e 	subs.w	r3, r8, lr
 8000e06:	eb64 040c 	sbc.w	r4, r4, ip
 8000e0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0e:	40cb      	lsrs	r3, r1
 8000e10:	431e      	orrs	r6, r3
 8000e12:	40cc      	lsrs	r4, r1
 8000e14:	e9c5 6400 	strd	r6, r4, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	e750      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f103 	lsr.w	r1, r0, r3
 8000e24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e28:	fa24 f303 	lsr.w	r3, r4, r3
 8000e2c:	4094      	lsls	r4, r2
 8000e2e:	430c      	orrs	r4, r1
 8000e30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e34:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e38:	fa1f f78c 	uxth.w	r7, ip
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3110 	mls	r1, r8, r0, r3
 8000e44:	0c23      	lsrs	r3, r4, #16
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb00 f107 	mul.w	r1, r0, r7
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x24c>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e5a:	d22c      	bcs.n	8000eb6 <__udivmoddi4+0x29e>
 8000e5c:	4299      	cmp	r1, r3
 8000e5e:	d92a      	bls.n	8000eb6 <__udivmoddi4+0x29e>
 8000e60:	3802      	subs	r0, #2
 8000e62:	4463      	add	r3, ip
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e6c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb01 f307 	mul.w	r3, r1, r7
 8000e78:	42a3      	cmp	r3, r4
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x276>
 8000e7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e80:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e84:	d213      	bcs.n	8000eae <__udivmoddi4+0x296>
 8000e86:	42a3      	cmp	r3, r4
 8000e88:	d911      	bls.n	8000eae <__udivmoddi4+0x296>
 8000e8a:	3902      	subs	r1, #2
 8000e8c:	4464      	add	r4, ip
 8000e8e:	1ae4      	subs	r4, r4, r3
 8000e90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e94:	e739      	b.n	8000d0a <__udivmoddi4+0xf2>
 8000e96:	4604      	mov	r4, r0
 8000e98:	e6f0      	b.n	8000c7c <__udivmoddi4+0x64>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e706      	b.n	8000cac <__udivmoddi4+0x94>
 8000e9e:	45c8      	cmp	r8, r9
 8000ea0:	d2ae      	bcs.n	8000e00 <__udivmoddi4+0x1e8>
 8000ea2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ea6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eaa:	3801      	subs	r0, #1
 8000eac:	e7a8      	b.n	8000e00 <__udivmoddi4+0x1e8>
 8000eae:	4631      	mov	r1, r6
 8000eb0:	e7ed      	b.n	8000e8e <__udivmoddi4+0x276>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	e799      	b.n	8000dea <__udivmoddi4+0x1d2>
 8000eb6:	4630      	mov	r0, r6
 8000eb8:	e7d4      	b.n	8000e64 <__udivmoddi4+0x24c>
 8000eba:	46d6      	mov	lr, sl
 8000ebc:	e77f      	b.n	8000dbe <__udivmoddi4+0x1a6>
 8000ebe:	4463      	add	r3, ip
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	e74d      	b.n	8000d60 <__udivmoddi4+0x148>
 8000ec4:	4606      	mov	r6, r0
 8000ec6:	4623      	mov	r3, r4
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e70f      	b.n	8000cec <__udivmoddi4+0xd4>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	4463      	add	r3, ip
 8000ed0:	e730      	b.n	8000d34 <__udivmoddi4+0x11c>
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000ede:	4b14      	ldr	r3, [pc, #80]	@ (8000f30 <MX_DMA_Init+0x58>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee2:	4a13      	ldr	r2, [pc, #76]	@ (8000f30 <MX_DMA_Init+0x58>)
 8000ee4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000ee8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eea:	4b11      	ldr	r3, [pc, #68]	@ (8000f30 <MX_DMA_Init+0x58>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000ef2:	607b      	str	r3, [r7, #4]
 8000ef4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	2100      	movs	r1, #0
 8000efa:	2039      	movs	r0, #57	@ 0x39
 8000efc:	f003 faad 	bl	800445a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000f00:	2039      	movs	r0, #57	@ 0x39
 8000f02:	f003 fac6 	bl	8004492 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 2, 0);
 8000f06:	2200      	movs	r2, #0
 8000f08:	2102      	movs	r1, #2
 8000f0a:	203b      	movs	r0, #59	@ 0x3b
 8000f0c:	f003 faa5 	bl	800445a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000f10:	203b      	movs	r0, #59	@ 0x3b
 8000f12:	f003 fabe 	bl	8004492 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 2, 0);
 8000f16:	2200      	movs	r2, #0
 8000f18:	2102      	movs	r1, #2
 8000f1a:	2045      	movs	r0, #69	@ 0x45
 8000f1c:	f003 fa9d 	bl	800445a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000f20:	2045      	movs	r0, #69	@ 0x45
 8000f22:	f003 fab6 	bl	8004492 <HAL_NVIC_EnableIRQ>

}
 8000f26:	bf00      	nop
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40023800 	.word	0x40023800

08000f34 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b090      	sub	sp, #64	@ 0x40
 8000f38:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	605a      	str	r2, [r3, #4]
 8000f44:	609a      	str	r2, [r3, #8]
 8000f46:	60da      	str	r2, [r3, #12]
 8000f48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f4a:	4ba6      	ldr	r3, [pc, #664]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4e:	4aa5      	ldr	r2, [pc, #660]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 8000f50:	f043 0310 	orr.w	r3, r3, #16
 8000f54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f56:	4ba3      	ldr	r3, [pc, #652]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5a:	f003 0310 	and.w	r3, r3, #16
 8000f5e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f62:	4ba0      	ldr	r3, [pc, #640]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f66:	4a9f      	ldr	r2, [pc, #636]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 8000f68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f6e:	4b9d      	ldr	r3, [pc, #628]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f76:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f7a:	4b9a      	ldr	r3, [pc, #616]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7e:	4a99      	ldr	r2, [pc, #612]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 8000f80:	f043 0302 	orr.w	r3, r3, #2
 8000f84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f86:	4b97      	ldr	r3, [pc, #604]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8a:	f003 0302 	and.w	r3, r3, #2
 8000f8e:	623b      	str	r3, [r7, #32]
 8000f90:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f92:	4b94      	ldr	r3, [pc, #592]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f96:	4a93      	ldr	r2, [pc, #588]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 8000f98:	f043 0308 	orr.w	r3, r3, #8
 8000f9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f9e:	4b91      	ldr	r3, [pc, #580]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa2:	f003 0308 	and.w	r3, r3, #8
 8000fa6:	61fb      	str	r3, [r7, #28]
 8000fa8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000faa:	4b8e      	ldr	r3, [pc, #568]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fae:	4a8d      	ldr	r2, [pc, #564]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 8000fb0:	f043 0304 	orr.w	r3, r3, #4
 8000fb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fb6:	4b8b      	ldr	r3, [pc, #556]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fba:	f003 0304 	and.w	r3, r3, #4
 8000fbe:	61bb      	str	r3, [r7, #24]
 8000fc0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc2:	4b88      	ldr	r3, [pc, #544]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc6:	4a87      	ldr	r2, [pc, #540]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 8000fc8:	f043 0301 	orr.w	r3, r3, #1
 8000fcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fce:	4b85      	ldr	r3, [pc, #532]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	617b      	str	r3, [r7, #20]
 8000fd8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000fda:	4b82      	ldr	r3, [pc, #520]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fde:	4a81      	ldr	r2, [pc, #516]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 8000fe0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000fe4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fe6:	4b7f      	ldr	r3, [pc, #508]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000fee:	613b      	str	r3, [r7, #16]
 8000ff0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000ff2:	4b7c      	ldr	r3, [pc, #496]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff6:	4a7b      	ldr	r2, [pc, #492]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 8000ff8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ffc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ffe:	4b79      	ldr	r3, [pc, #484]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001002:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800100a:	4b76      	ldr	r3, [pc, #472]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100e:	4a75      	ldr	r2, [pc, #468]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 8001010:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001014:	6313      	str	r3, [r2, #48]	@ 0x30
 8001016:	4b73      	ldr	r3, [pc, #460]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800101e:	60bb      	str	r3, [r7, #8]
 8001020:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001022:	4b70      	ldr	r3, [pc, #448]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001026:	4a6f      	ldr	r2, [pc, #444]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 8001028:	f043 0320 	orr.w	r3, r3, #32
 800102c:	6313      	str	r3, [r2, #48]	@ 0x30
 800102e:	4b6d      	ldr	r3, [pc, #436]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001032:	f003 0320 	and.w	r3, r3, #32
 8001036:	607b      	str	r3, [r7, #4]
 8001038:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800103a:	4b6a      	ldr	r3, [pc, #424]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103e:	4a69      	ldr	r2, [pc, #420]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 8001040:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001044:	6313      	str	r3, [r2, #48]	@ 0x30
 8001046:	4b67      	ldr	r3, [pc, #412]	@ (80011e4 <MX_GPIO_Init+0x2b0>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800104e:	603b      	str	r3, [r7, #0]
 8001050:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 8001052:	2200      	movs	r2, #0
 8001054:	2102      	movs	r1, #2
 8001056:	4864      	ldr	r0, [pc, #400]	@ (80011e8 <MX_GPIO_Init+0x2b4>)
 8001058:	f004 f97a 	bl	8005350 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE2 PE1 PE0
                           PE8 PE9 PE11 PE14
                           PE7 PE10 PE12 PE15
                           PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0
 800105c:	f64f 738f 	movw	r3, #65423	@ 0xff8f
 8001060:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14
                          |GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001062:	2303      	movs	r3, #3
 8001064:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800106a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800106e:	4619      	mov	r1, r3
 8001070:	485e      	ldr	r0, [pc, #376]	@ (80011ec <MX_GPIO_Init+0x2b8>)
 8001072:	f003 fe9d 	bl	8004db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG14 PG13 PG15 PG11
                           PG12 PG10 PG9 PG8
                           PG7 PG6 PG1 PG3
                           PG2 PG0 PG5 PG4 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_11
 8001076:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800107a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_12|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8
                          |GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1|GPIO_PIN_3
                          |GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800107c:	2303      	movs	r3, #3
 800107e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001080:	2300      	movs	r3, #0
 8001082:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001084:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001088:	4619      	mov	r1, r3
 800108a:	4859      	ldr	r0, [pc, #356]	@ (80011f0 <MX_GPIO_Init+0x2bc>)
 800108c:	f003 fe90 	bl	8004db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB5 PB4 PB3
                           PB9 PB6 PB13 PB12
                           PB2 PB10 PB1 PB0
                           PB11 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3
 8001090:	f64f 737f 	movw	r3, #65407	@ 0xff7f
 8001094:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_13|GPIO_PIN_12
                          |GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_1|GPIO_PIN_0
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001096:	2303      	movs	r3, #3
 8001098:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800109e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010a2:	4619      	mov	r1, r3
 80010a4:	4853      	ldr	r0, [pc, #332]	@ (80011f4 <MX_GPIO_Init+0x2c0>)
 80010a6:	f003 fe83 	bl	8004db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD7 PD6 PD0 PD5
                           PD3 PD1 PD4 PD15
                           PD10 PD14 PD9 PD8
                           PD12 PD13 PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_0|GPIO_PIN_5
 80010aa:	f64f 73fb 	movw	r3, #65531	@ 0xfffb
 80010ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_15
                          |GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010b0:	2303      	movs	r3, #3
 80010b2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b4:	2300      	movs	r3, #0
 80010b6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010b8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010bc:	4619      	mov	r1, r3
 80010be:	484e      	ldr	r0, [pc, #312]	@ (80011f8 <MX_GPIO_Init+0x2c4>)
 80010c0:	f003 fe76 	bl	8004db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA15 PA12 PA11 PA10
                           PA8 PA1 PA0 PA4
                           PA2 PA6 PA5 PA3
                           PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10
 80010c4:	f649 53ff 	movw	r3, #40447	@ 0x9dff
 80010c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_4
                          |GPIO_PIN_2|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_3
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010ca:	2303      	movs	r3, #3
 80010cc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010d6:	4619      	mov	r1, r3
 80010d8:	4848      	ldr	r0, [pc, #288]	@ (80011fc <MX_GPIO_Init+0x2c8>)
 80010da:	f003 fe69 	bl	8004db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ13 PJ12 PJ14 PJ15
                           PJ11 PJ8 PJ10 PJ7
                           PJ9 PJ6 PJ4 PJ5
                           PJ3 PJ2 PJ0 PJ1 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15
 80010de:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80010e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_7
                          |GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010e4:	2303      	movs	r3, #3
 80010e6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e8:	2300      	movs	r3, #0
 80010ea:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80010ec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010f0:	4619      	mov	r1, r3
 80010f2:	4843      	ldr	r0, [pc, #268]	@ (8001200 <MX_GPIO_Init+0x2cc>)
 80010f4:	f003 fe5c 	bl	8004db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC11 PC10 PC14 PC15
                           PC9 PC7 PC6 PC3
                           PC0 PC1 PC2 PC4
                           PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15
 80010f8:	f64c 63ff 	movw	r3, #52991	@ 0xceff
 80010fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_9|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_3
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010fe:	2303      	movs	r3, #3
 8001100:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001102:	2300      	movs	r3, #0
 8001104:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001106:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800110a:	4619      	mov	r1, r3
 800110c:	483d      	ldr	r0, [pc, #244]	@ (8001204 <MX_GPIO_Init+0x2d0>)
 800110e:	f003 fe4f 	bl	8004db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI8 PI4 PI3 PI2
                           PI5 PI7 PI10 PI6
                           PI12 PI9 PI0 PI13
                           PI15 PI14 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2
 8001112:	f24f 73fd 	movw	r3, #63485	@ 0xf7fd
 8001116:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_6
                          |GPIO_PIN_12|GPIO_PIN_9|GPIO_PIN_0|GPIO_PIN_13
                          |GPIO_PIN_15|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001118:	2303      	movs	r3, #3
 800111a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111c:	2300      	movs	r3, #0
 800111e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001120:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001124:	4619      	mov	r1, r3
 8001126:	4830      	ldr	r0, [pc, #192]	@ (80011e8 <MX_GPIO_Init+0x2b4>)
 8001128:	f003 fe42 	bl	8004db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PK7 PK6 PK5 PK4
                           PK3 PK1 PK2 PK0 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
 800112c:	23ff      	movs	r3, #255	@ 0xff
 800112e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001130:	2303      	movs	r3, #3
 8001132:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001138:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800113c:	4619      	mov	r1, r3
 800113e:	4832      	ldr	r0, [pc, #200]	@ (8001208 <MX_GPIO_Init+0x2d4>)
 8001140:	f003 fe36 	bl	8004db0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001144:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001148:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800114a:	2300      	movs	r3, #0
 800114c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114e:	2300      	movs	r3, #0
 8001150:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001152:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001156:	4619      	mov	r1, r3
 8001158:	482a      	ldr	r0, [pc, #168]	@ (8001204 <MX_GPIO_Init+0x2d0>)
 800115a:	f003 fe29 	bl	8004db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3
                           PF4 PF7 PF6 PF5
                           PF10 PF9 PF8 PF12
                           PF15 PF13 PF14 PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800115e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001162:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_4|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8|GPIO_PIN_12
                          |GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001164:	2303      	movs	r3, #3
 8001166:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001168:	2300      	movs	r3, #0
 800116a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800116c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001170:	4619      	mov	r1, r3
 8001172:	4826      	ldr	r0, [pc, #152]	@ (800120c <MX_GPIO_Init+0x2d8>)
 8001174:	f003 fe1c 	bl	8004db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH15 PH13 PH14 PH4
                           PH5 PH3 PH2 PH12
                           PH7 PH9 PH11 PH6
                           PH8 PH10 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_4
 8001178:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800117c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_12
                          |GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_6
                          |GPIO_PIN_8|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800117e:	2303      	movs	r3, #3
 8001180:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001182:	2300      	movs	r3, #0
 8001184:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001186:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800118a:	4619      	mov	r1, r3
 800118c:	4820      	ldr	r0, [pc, #128]	@ (8001210 <MX_GPIO_Init+0x2dc>)
 800118e:	f003 fe0f 	bl	8004db0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 8001192:	2302      	movs	r3, #2
 8001194:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001196:	2301      	movs	r3, #1
 8001198:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119a:	2300      	movs	r3, #0
 800119c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119e:	2300      	movs	r3, #0
 80011a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 80011a2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011a6:	4619      	mov	r1, r3
 80011a8:	480f      	ldr	r0, [pc, #60]	@ (80011e8 <MX_GPIO_Init+0x2b4>)
 80011aa:	f003 fe01 	bl	8004db0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 80011ae:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80011b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011b4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80011b8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ba:	2300      	movs	r3, #0
 80011bc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 80011be:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011c2:	4619      	mov	r1, r3
 80011c4:	4808      	ldr	r0, [pc, #32]	@ (80011e8 <MX_GPIO_Init+0x2b4>)
 80011c6:	f003 fdf3 	bl	8004db0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80011ca:	2200      	movs	r2, #0
 80011cc:	2100      	movs	r1, #0
 80011ce:	2028      	movs	r0, #40	@ 0x28
 80011d0:	f003 f943 	bl	800445a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80011d4:	2028      	movs	r0, #40	@ 0x28
 80011d6:	f003 f95c 	bl	8004492 <HAL_NVIC_EnableIRQ>

}
 80011da:	bf00      	nop
 80011dc:	3740      	adds	r7, #64	@ 0x40
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	40023800 	.word	0x40023800
 80011e8:	40022000 	.word	0x40022000
 80011ec:	40021000 	.word	0x40021000
 80011f0:	40021800 	.word	0x40021800
 80011f4:	40020400 	.word	0x40020400
 80011f8:	40020c00 	.word	0x40020c00
 80011fc:	40020000 	.word	0x40020000
 8001200:	40022400 	.word	0x40022400
 8001204:	40020800 	.word	0x40020800
 8001208:	40022800 	.word	0x40022800
 800120c:	40021400 	.word	0x40021400
 8001210:	40021c00 	.word	0x40021c00

08001214 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001218:	f3bf 8f4f 	dsb	sy
}
 800121c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800121e:	f3bf 8f6f 	isb	sy
}
 8001222:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001224:	4b0d      	ldr	r3, [pc, #52]	@ (800125c <SCB_EnableICache+0x48>)
 8001226:	2200      	movs	r2, #0
 8001228:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800122c:	f3bf 8f4f 	dsb	sy
}
 8001230:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001232:	f3bf 8f6f 	isb	sy
}
 8001236:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001238:	4b08      	ldr	r3, [pc, #32]	@ (800125c <SCB_EnableICache+0x48>)
 800123a:	695b      	ldr	r3, [r3, #20]
 800123c:	4a07      	ldr	r2, [pc, #28]	@ (800125c <SCB_EnableICache+0x48>)
 800123e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001242:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001244:	f3bf 8f4f 	dsb	sy
}
 8001248:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800124a:	f3bf 8f6f 	isb	sy
}
 800124e:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8001250:	bf00      	nop
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	e000ed00 	.word	0xe000ed00

08001260 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8001260:	b480      	push	{r7}
 8001262:	b085      	sub	sp, #20
 8001264:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001266:	4b1f      	ldr	r3, [pc, #124]	@ (80012e4 <SCB_EnableDCache+0x84>)
 8001268:	2200      	movs	r2, #0
 800126a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800126e:	f3bf 8f4f 	dsb	sy
}
 8001272:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001274:	4b1b      	ldr	r3, [pc, #108]	@ (80012e4 <SCB_EnableDCache+0x84>)
 8001276:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800127a:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	0b5b      	lsrs	r3, r3, #13
 8001280:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001284:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	08db      	lsrs	r3, r3, #3
 800128a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800128e:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	015a      	lsls	r2, r3, #5
 8001294:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8001298:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800129a:	68ba      	ldr	r2, [r7, #8]
 800129c:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800129e:	4911      	ldr	r1, [pc, #68]	@ (80012e4 <SCB_EnableDCache+0x84>)
 80012a0:	4313      	orrs	r3, r2
 80012a2:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	1e5a      	subs	r2, r3, #1
 80012aa:	60ba      	str	r2, [r7, #8]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d1ef      	bne.n	8001290 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	1e5a      	subs	r2, r3, #1
 80012b4:	60fa      	str	r2, [r7, #12]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d1e5      	bne.n	8001286 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80012ba:	f3bf 8f4f 	dsb	sy
}
 80012be:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80012c0:	4b08      	ldr	r3, [pc, #32]	@ (80012e4 <SCB_EnableDCache+0x84>)
 80012c2:	695b      	ldr	r3, [r3, #20]
 80012c4:	4a07      	ldr	r2, [pc, #28]	@ (80012e4 <SCB_EnableDCache+0x84>)
 80012c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012ca:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80012cc:	f3bf 8f4f 	dsb	sy
}
 80012d0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012d2:	f3bf 8f6f 	isb	sy
}
 80012d6:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80012d8:	bf00      	nop
 80012da:	3714      	adds	r7, #20
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr
 80012e4:	e000ed00 	.word	0xe000ed00

080012e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* Enable the CPU Cache */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80012ec:	f7ff ff92 	bl	8001214 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80012f0:	f7ff ffb6 	bl	8001260 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012f4:	f002 ff54 	bl	80041a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012f8:	f000 f860 	bl	80013bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012fc:	f7ff fe1a 	bl	8000f34 <MX_GPIO_Init>
  MX_DMA_Init();
 8001300:	f7ff fdea 	bl	8000ed8 <MX_DMA_Init>
  MX_SAI1_Init();
 8001304:	f000 fa20 	bl	8001748 <MX_SAI1_Init>
  MX_USART1_UART_Init();
 8001308:	f000 fdd8 	bl	8001ebc <MX_USART1_UART_Init>
  MX_FATFS_Init();
 800130c:	f009 fbd0 	bl	800aab0 <MX_FATFS_Init>
  MX_SDMMC1_SD_Init();
 8001310:	f000 fb3e 	bl	8001990 <MX_SDMMC1_SD_Init>
  /* USER CODE BEGIN 2 */

  /* We format the SD card */
  printf("SD card init...\r\n");
 8001314:	4821      	ldr	r0, [pc, #132]	@ (800139c <main+0xb4>)
 8001316:	f00d fd7f 	bl	800ee18 <puts>
  SDCard_InitAndFormat();
 800131a:	f000 f8fd 	bl	8001518 <SDCard_InitAndFormat>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  /* Standby : waiting for the button to be pressed to start recording */
	  check_button_release();
 800131e:	f000 f8e7 	bl	80014f0 <check_button_release>
	  printf("Waiting for input to record...\r\n");
 8001322:	481f      	ldr	r0, [pc, #124]	@ (80013a0 <main+0xb8>)
 8001324:	f00d fd78 	bl	800ee18 <puts>
	  HAL_Delay(1000);
 8001328:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800132c:	f002 ff96 	bl	800425c <HAL_Delay>

	  if (button_pressed == 1)
 8001330:	4b1c      	ldr	r3, [pc, #112]	@ (80013a4 <main+0xbc>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	b2db      	uxtb	r3, r3
 8001336:	2b01      	cmp	r3, #1
 8001338:	d1f1      	bne.n	800131e <main+0x36>
	  {
		  /* Toggle the green led to visually show action */
		  HAL_GPIO_TogglePin(USR_LED_GPIO_Port, USR_LED_Pin);
 800133a:	2102      	movs	r1, #2
 800133c:	481a      	ldr	r0, [pc, #104]	@ (80013a8 <main+0xc0>)
 800133e:	f004 f820 	bl	8005382 <HAL_GPIO_TogglePin>
		  HAL_Delay(100);
 8001342:	2064      	movs	r0, #100	@ 0x64
 8001344:	f002 ff8a 	bl	800425c <HAL_Delay>
		  HAL_GPIO_TogglePin(USR_LED_GPIO_Port, USR_LED_Pin);
 8001348:	2102      	movs	r1, #2
 800134a:	4817      	ldr	r0, [pc, #92]	@ (80013a8 <main+0xc0>)
 800134c:	f004 f819 	bl	8005382 <HAL_GPIO_TogglePin>
		  HAL_Delay(100);
 8001350:	2064      	movs	r0, #100	@ 0x64
 8001352:	f002 ff83 	bl	800425c <HAL_Delay>

		  /* If the program is not already recording... */
		  if(AudioState == AUDIO_STATE_IDLE)
 8001356:	4b15      	ldr	r3, [pc, #84]	@ (80013ac <main+0xc4>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d108      	bne.n	8001370 <main+0x88>
		  {
		    /* Configure the audio recorder: sampling frequency, bits-depth, number of channels */
		    AUDIO_REC_Start();
 800135e:	f009 f839 	bl	800a3d4 <AUDIO_REC_Start>
		  }

		  /* While recording, we loop the recording process */
		  while(AudioState == AUDIO_STATE_RECORD)
 8001362:	e005      	b.n	8001370 <main+0x88>
		  {
		    status = AUDIO_REC_Process();
 8001364:	f009 f8bc 	bl	800a4e0 <AUDIO_REC_Process>
 8001368:	4603      	mov	r3, r0
 800136a:	461a      	mov	r2, r3
 800136c:	4b10      	ldr	r3, [pc, #64]	@ (80013b0 <main+0xc8>)
 800136e:	701a      	strb	r2, [r3, #0]
		  while(AudioState == AUDIO_STATE_RECORD)
 8001370:	4b0e      	ldr	r3, [pc, #56]	@ (80013ac <main+0xc4>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	2b05      	cmp	r3, #5
 8001376:	d0f5      	beq.n	8001364 <main+0x7c>
		  }

		  /* Once we stop recording, we correctly close the .WAV */
		  if (AudioState == AUDIO_STATE_STOP)
 8001378:	4b0c      	ldr	r3, [pc, #48]	@ (80013ac <main+0xc4>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	2b0a      	cmp	r3, #10
 800137e:	d108      	bne.n	8001392 <main+0xaa>
		  {
			status = AUDIO_REC_Process();
 8001380:	f009 f8ae 	bl	800a4e0 <AUDIO_REC_Process>
 8001384:	4603      	mov	r3, r0
 8001386:	461a      	mov	r2, r3
 8001388:	4b09      	ldr	r3, [pc, #36]	@ (80013b0 <main+0xc8>)
 800138a:	701a      	strb	r2, [r3, #0]
		    printf("Recording stopped.\r\n");
 800138c:	4809      	ldr	r0, [pc, #36]	@ (80013b4 <main+0xcc>)
 800138e:	f00d fd43 	bl	800ee18 <puts>
		  }

		  ReadWAVFileInfo("WAVE.wav");
 8001392:	4809      	ldr	r0, [pc, #36]	@ (80013b8 <main+0xd0>)
 8001394:	f000 f910 	bl	80015b8 <ReadWAVFileInfo>
  {
 8001398:	e7c1      	b.n	800131e <main+0x36>
 800139a:	bf00      	nop
 800139c:	08010bd0 	.word	0x08010bd0
 80013a0:	08010be4 	.word	0x08010be4
 80013a4:	20000434 	.word	0x20000434
 80013a8:	40022000 	.word	0x40022000
 80013ac:	20000230 	.word	0x20000230
 80013b0:	20000231 	.word	0x20000231
 80013b4:	08010c04 	.word	0x08010c04
 80013b8:	08010c18 	.word	0x08010c18

080013bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b094      	sub	sp, #80	@ 0x50
 80013c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013c2:	f107 0320 	add.w	r3, r7, #32
 80013c6:	2230      	movs	r2, #48	@ 0x30
 80013c8:	2100      	movs	r1, #0
 80013ca:	4618      	mov	r0, r3
 80013cc:	f00d fe04 	bl	800efd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013d0:	f107 030c 	add.w	r3, r7, #12
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	60da      	str	r2, [r3, #12]
 80013de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013e0:	4b2a      	ldr	r3, [pc, #168]	@ (800148c <SystemClock_Config+0xd0>)
 80013e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e4:	4a29      	ldr	r2, [pc, #164]	@ (800148c <SystemClock_Config+0xd0>)
 80013e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80013ec:	4b27      	ldr	r3, [pc, #156]	@ (800148c <SystemClock_Config+0xd0>)
 80013ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013f4:	60bb      	str	r3, [r7, #8]
 80013f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013f8:	4b25      	ldr	r3, [pc, #148]	@ (8001490 <SystemClock_Config+0xd4>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a24      	ldr	r2, [pc, #144]	@ (8001490 <SystemClock_Config+0xd4>)
 80013fe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001402:	6013      	str	r3, [r2, #0]
 8001404:	4b22      	ldr	r3, [pc, #136]	@ (8001490 <SystemClock_Config+0xd4>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800140c:	607b      	str	r3, [r7, #4]
 800140e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001410:	2302      	movs	r3, #2
 8001412:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001414:	2301      	movs	r3, #1
 8001416:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001418:	2310      	movs	r3, #16
 800141a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800141c:	2302      	movs	r3, #2
 800141e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001420:	2300      	movs	r3, #0
 8001422:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001424:	2308      	movs	r3, #8
 8001426:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 200;
 8001428:	23c8      	movs	r3, #200	@ 0xc8
 800142a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800142c:	2302      	movs	r3, #2
 800142e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001430:	2308      	movs	r3, #8
 8001432:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001434:	f107 0320 	add.w	r3, r7, #32
 8001438:	4618      	mov	r0, r3
 800143a:	f004 fe03 	bl	8006044 <HAL_RCC_OscConfig>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001444:	f000 f97a 	bl	800173c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001448:	f004 fdac 	bl	8005fa4 <HAL_PWREx_EnableOverDrive>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001452:	f000 f973 	bl	800173c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001456:	230f      	movs	r3, #15
 8001458:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800145a:	2302      	movs	r3, #2
 800145c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800145e:	2300      	movs	r3, #0
 8001460:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001462:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001466:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001468:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800146c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800146e:	f107 030c 	add.w	r3, r7, #12
 8001472:	2106      	movs	r1, #6
 8001474:	4618      	mov	r0, r3
 8001476:	f005 f889 	bl	800658c <HAL_RCC_ClockConfig>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001480:	f000 f95c 	bl	800173c <Error_Handler>
  }
}
 8001484:	bf00      	nop
 8001486:	3750      	adds	r7, #80	@ 0x50
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	40023800 	.word	0x40023800
 8001490:	40007000 	.word	0x40007000

08001494 <__io_putchar>:

/* USER CODE BEGIN 4 */

/* Needed to send messages easier to terminal for debugging */
PUTCHAR_PROTOTYPE
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
/* Place your implementation of fputc here */
/* e.g. write a character to the USART2 and Loop until the end
of transmission */
HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 100);
 800149c:	1d39      	adds	r1, r7, #4
 800149e:	2364      	movs	r3, #100	@ 0x64
 80014a0:	2201      	movs	r2, #1
 80014a2:	4804      	ldr	r0, [pc, #16]	@ (80014b4 <__io_putchar+0x20>)
 80014a4:	f007 fdac 	bl	8009000 <HAL_UART_Transmit>
return ch;
 80014a8:	687b      	ldr	r3, [r7, #4]
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	20000668 	.word	0x20000668

080014b8 <HAL_GPIO_EXTI_Callback>:
/* ======================================================== */


/* User button interruption and variable change */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	4603      	mov	r3, r0
 80014c0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);

  if (GPIO_Pin == USR_BTN_Pin && button_pressed == 0)
 80014c2:	88fb      	ldrh	r3, [r7, #6]
 80014c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80014c8:	d10a      	bne.n	80014e0 <HAL_GPIO_EXTI_Callback+0x28>
 80014ca:	4b07      	ldr	r3, [pc, #28]	@ (80014e8 <HAL_GPIO_EXTI_Callback+0x30>)
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d105      	bne.n	80014e0 <HAL_GPIO_EXTI_Callback+0x28>
      {
	  	  button_pressed = 1;
 80014d4:	4b04      	ldr	r3, [pc, #16]	@ (80014e8 <HAL_GPIO_EXTI_Callback+0x30>)
 80014d6:	2201      	movs	r2, #1
 80014d8:	701a      	strb	r2, [r3, #0]
	  	  printf("Button pressed...\r\n");
 80014da:	4804      	ldr	r0, [pc, #16]	@ (80014ec <HAL_GPIO_EXTI_Callback+0x34>)
 80014dc:	f00d fc9c 	bl	800ee18 <puts>
      }
}
 80014e0:	bf00      	nop
 80014e2:	3708      	adds	r7, #8
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	20000434 	.word	0x20000434
 80014ec:	08010c24 	.word	0x08010c24

080014f0 <check_button_release>:
/* ======================================================== */


/* Used to verify the state of the button */
void check_button_release()
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
    if (HAL_GPIO_ReadPin(GPIOI, USR_BTN_Pin) == GPIO_PIN_RESET) button_pressed = 0;
 80014f4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80014f8:	4805      	ldr	r0, [pc, #20]	@ (8001510 <check_button_release+0x20>)
 80014fa:	f003 ff11 	bl	8005320 <HAL_GPIO_ReadPin>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d102      	bne.n	800150a <check_button_release+0x1a>
 8001504:	4b03      	ldr	r3, [pc, #12]	@ (8001514 <check_button_release+0x24>)
 8001506:	2200      	movs	r2, #0
 8001508:	701a      	strb	r2, [r3, #0]
}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	40022000 	.word	0x40022000
 8001514:	20000434 	.word	0x20000434

08001518 <SDCard_InitAndFormat>:
/* ======================================================== */


/* Used to initialize the SD card */
void SDCard_InitAndFormat(void) {
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af02      	add	r7, sp, #8
    FRESULT res;

    // Mount the file system
    res = f_mount(&SDFatFS, (TCHAR const *)SDPath, 0);
 800151e:	2200      	movs	r2, #0
 8001520:	491e      	ldr	r1, [pc, #120]	@ (800159c <SDCard_InitAndFormat+0x84>)
 8001522:	481f      	ldr	r0, [pc, #124]	@ (80015a0 <SDCard_InitAndFormat+0x88>)
 8001524:	f00b fa52 	bl	800c9cc <f_mount>
 8001528:	4603      	mov	r3, r0
 800152a:	71fb      	strb	r3, [r7, #7]
    if (res != FR_OK) {
 800152c:	79fb      	ldrb	r3, [r7, #7]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d006      	beq.n	8001540 <SDCard_InitAndFormat+0x28>
        printf("Error: Failed to mount SD card (Code: %d).\r\n", res);
 8001532:	79fb      	ldrb	r3, [r7, #7]
 8001534:	4619      	mov	r1, r3
 8001536:	481b      	ldr	r0, [pc, #108]	@ (80015a4 <SDCard_InitAndFormat+0x8c>)
 8001538:	f00d fc06 	bl	800ed48 <iprintf>
        Error_Handler();
 800153c:	f000 f8fe 	bl	800173c <Error_Handler>
    }

    // Format the SD card
    res = f_mkfs((TCHAR const *)SDPath, FM_ANY, 0, workBuffer_init, sizeof(workBuffer_init));
 8001540:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001544:	9300      	str	r3, [sp, #0]
 8001546:	4b18      	ldr	r3, [pc, #96]	@ (80015a8 <SDCard_InitAndFormat+0x90>)
 8001548:	2200      	movs	r2, #0
 800154a:	2107      	movs	r1, #7
 800154c:	4813      	ldr	r0, [pc, #76]	@ (800159c <SDCard_InitAndFormat+0x84>)
 800154e:	f00c f9a3 	bl	800d898 <f_mkfs>
 8001552:	4603      	mov	r3, r0
 8001554:	71fb      	strb	r3, [r7, #7]
    if (res != FR_OK) {
 8001556:	79fb      	ldrb	r3, [r7, #7]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d006      	beq.n	800156a <SDCard_InitAndFormat+0x52>
        printf("Error: Failed to format SD card (Code: %d).\r\n", res);
 800155c:	79fb      	ldrb	r3, [r7, #7]
 800155e:	4619      	mov	r1, r3
 8001560:	4812      	ldr	r0, [pc, #72]	@ (80015ac <SDCard_InitAndFormat+0x94>)
 8001562:	f00d fbf1 	bl	800ed48 <iprintf>
        Error_Handler();
 8001566:	f000 f8e9 	bl	800173c <Error_Handler>
    }

    // Unmount the file system to complete formatting
    res = f_mount(NULL, (TCHAR const *)SDPath, 0);
 800156a:	2200      	movs	r2, #0
 800156c:	490b      	ldr	r1, [pc, #44]	@ (800159c <SDCard_InitAndFormat+0x84>)
 800156e:	2000      	movs	r0, #0
 8001570:	f00b fa2c 	bl	800c9cc <f_mount>
 8001574:	4603      	mov	r3, r0
 8001576:	71fb      	strb	r3, [r7, #7]
    if (res != FR_OK) {
 8001578:	79fb      	ldrb	r3, [r7, #7]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d006      	beq.n	800158c <SDCard_InitAndFormat+0x74>
        printf("Error: Failed to unmount SD card after formatting (Code: %d).\r\n", res);
 800157e:	79fb      	ldrb	r3, [r7, #7]
 8001580:	4619      	mov	r1, r3
 8001582:	480b      	ldr	r0, [pc, #44]	@ (80015b0 <SDCard_InitAndFormat+0x98>)
 8001584:	f00d fbe0 	bl	800ed48 <iprintf>
        Error_Handler();
 8001588:	f000 f8d8 	bl	800173c <Error_Handler>
    }



    printf("SD card initialized and formatted successfully.\r\n");
 800158c:	4809      	ldr	r0, [pc, #36]	@ (80015b4 <SDCard_InitAndFormat+0x9c>)
 800158e:	f00d fc43 	bl	800ee18 <puts>
}
 8001592:	bf00      	nop
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	200053b8 	.word	0x200053b8
 80015a0:	200053bc 	.word	0x200053bc
 80015a4:	08010c38 	.word	0x08010c38
 80015a8:	20000234 	.word	0x20000234
 80015ac:	08010c68 	.word	0x08010c68
 80015b0:	08010c98 	.word	0x08010c98
 80015b4:	08010cd8 	.word	0x08010cd8

080015b8 <ReadWAVFileInfo>:
}
/* ======================================================== */


/* Debug function : reads the characteristics of a .wav file in the SD card */
void ReadWAVFileInfo(const char *filename) {
 80015b8:	b580      	push	{r7, lr}
 80015ba:	f5ad 7d1c 	sub.w	sp, sp, #624	@ 0x270
 80015be:	af00      	add	r7, sp, #0
 80015c0:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 80015c4:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 80015c8:	6018      	str	r0, [r3, #0]
    WAV_Header header;      // WAV file header
    UINT bytesRead;         // Number of bytes read
    FRESULT res;

    // Open the WAV file
    res = f_open(&file, filename, FA_READ);
 80015ca:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 80015ce:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 80015d2:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 80015d6:	2201      	movs	r2, #1
 80015d8:	6819      	ldr	r1, [r3, #0]
 80015da:	f00b fa3d 	bl	800ca58 <f_open>
 80015de:	4603      	mov	r3, r0
 80015e0:	f887 326f 	strb.w	r3, [r7, #623]	@ 0x26f
    if (res != FR_OK) {
 80015e4:	f897 326f 	ldrb.w	r3, [r7, #623]	@ 0x26f
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d00a      	beq.n	8001602 <ReadWAVFileInfo+0x4a>
        printf("Error: Failed to open file '%s' (Code: %d).\n", filename, res);
 80015ec:	f897 226f 	ldrb.w	r2, [r7, #623]	@ 0x26f
 80015f0:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 80015f4:	f5a3 731b 	sub.w	r3, r3, #620	@ 0x26c
 80015f8:	6819      	ldr	r1, [r3, #0]
 80015fa:	4843      	ldr	r0, [pc, #268]	@ (8001708 <ReadWAVFileInfo+0x150>)
 80015fc:	f00d fba4 	bl	800ed48 <iprintf>
        return;
 8001600:	e07d      	b.n	80016fe <ReadWAVFileInfo+0x146>
    }

    // Read the WAV file header
    res = f_read(&file, &header, sizeof(WAV_Header), &bytesRead);
 8001602:	f107 030c 	add.w	r3, r7, #12
 8001606:	f107 0110 	add.w	r1, r7, #16
 800160a:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 800160e:	222c      	movs	r2, #44	@ 0x2c
 8001610:	f00b fbdc 	bl	800cdcc <f_read>
 8001614:	4603      	mov	r3, r0
 8001616:	f887 326f 	strb.w	r3, [r7, #623]	@ 0x26f
    if (res != FR_OK || bytesRead != sizeof(WAV_Header)) {
 800161a:	f897 326f 	ldrb.w	r3, [r7, #623]	@ 0x26f
 800161e:	2b00      	cmp	r3, #0
 8001620:	d106      	bne.n	8001630 <ReadWAVFileInfo+0x78>
 8001622:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8001626:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2b2c      	cmp	r3, #44	@ 0x2c
 800162e:	d00b      	beq.n	8001648 <ReadWAVFileInfo+0x90>
        printf("Error: Failed to read WAV file header (Code: %d).\n", res);
 8001630:	f897 326f 	ldrb.w	r3, [r7, #623]	@ 0x26f
 8001634:	4619      	mov	r1, r3
 8001636:	4835      	ldr	r0, [pc, #212]	@ (800170c <ReadWAVFileInfo+0x154>)
 8001638:	f00d fb86 	bl	800ed48 <iprintf>
        f_close(&file);
 800163c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001640:	4618      	mov	r0, r3
 8001642:	f00b fef5 	bl	800d430 <f_close>
        return;
 8001646:	e05a      	b.n	80016fe <ReadWAVFileInfo+0x146>
    }

    // Print WAV file information
    printf("WAV File Info:\r\n");
 8001648:	4831      	ldr	r0, [pc, #196]	@ (8001710 <ReadWAVFileInfo+0x158>)
 800164a:	f00d fbe5 	bl	800ee18 <puts>
    printf("  ChunkID: %.4s\r\n", header.ChunkID);
 800164e:	f107 0310 	add.w	r3, r7, #16
 8001652:	4619      	mov	r1, r3
 8001654:	482f      	ldr	r0, [pc, #188]	@ (8001714 <ReadWAVFileInfo+0x15c>)
 8001656:	f00d fb77 	bl	800ed48 <iprintf>
    printf("  Format: %.4s\r\n", header.Format);
 800165a:	f107 0310 	add.w	r3, r7, #16
 800165e:	3308      	adds	r3, #8
 8001660:	4619      	mov	r1, r3
 8001662:	482d      	ldr	r0, [pc, #180]	@ (8001718 <ReadWAVFileInfo+0x160>)
 8001664:	f00d fb70 	bl	800ed48 <iprintf>
    printf("  Audio Format: %d\r\n", header.AudioFormat);
 8001668:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 800166c:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8001670:	8a9b      	ldrh	r3, [r3, #20]
 8001672:	4619      	mov	r1, r3
 8001674:	4829      	ldr	r0, [pc, #164]	@ (800171c <ReadWAVFileInfo+0x164>)
 8001676:	f00d fb67 	bl	800ed48 <iprintf>
    printf("  Number of Channels: %d\r\n", header.NumChannels);
 800167a:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 800167e:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8001682:	8adb      	ldrh	r3, [r3, #22]
 8001684:	4619      	mov	r1, r3
 8001686:	4826      	ldr	r0, [pc, #152]	@ (8001720 <ReadWAVFileInfo+0x168>)
 8001688:	f00d fb5e 	bl	800ed48 <iprintf>
    printf("  Sample Rate: %d Hz\r\n", header.SampleRate);
 800168c:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8001690:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8001694:	699b      	ldr	r3, [r3, #24]
 8001696:	4619      	mov	r1, r3
 8001698:	4822      	ldr	r0, [pc, #136]	@ (8001724 <ReadWAVFileInfo+0x16c>)
 800169a:	f00d fb55 	bl	800ed48 <iprintf>
    printf("  Byte Rate: %d\r\n", header.ByteRate);
 800169e:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 80016a2:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 80016a6:	69db      	ldr	r3, [r3, #28]
 80016a8:	4619      	mov	r1, r3
 80016aa:	481f      	ldr	r0, [pc, #124]	@ (8001728 <ReadWAVFileInfo+0x170>)
 80016ac:	f00d fb4c 	bl	800ed48 <iprintf>
    printf("  Block Align: %d\r\n", header.BlockAlign);
 80016b0:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 80016b4:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 80016b8:	8c1b      	ldrh	r3, [r3, #32]
 80016ba:	4619      	mov	r1, r3
 80016bc:	481b      	ldr	r0, [pc, #108]	@ (800172c <ReadWAVFileInfo+0x174>)
 80016be:	f00d fb43 	bl	800ed48 <iprintf>
    printf("  Bits Per Sample: %d\r\n", header.BitsPerSample);
 80016c2:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 80016c6:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 80016ca:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80016cc:	4619      	mov	r1, r3
 80016ce:	4818      	ldr	r0, [pc, #96]	@ (8001730 <ReadWAVFileInfo+0x178>)
 80016d0:	f00d fb3a 	bl	800ed48 <iprintf>
    printf("  Subchunk2ID: %.4s\r\n", header.Subchunk2ID);
 80016d4:	f107 0310 	add.w	r3, r7, #16
 80016d8:	3324      	adds	r3, #36	@ 0x24
 80016da:	4619      	mov	r1, r3
 80016dc:	4815      	ldr	r0, [pc, #84]	@ (8001734 <ReadWAVFileInfo+0x17c>)
 80016de:	f00d fb33 	bl	800ed48 <iprintf>
    printf("  Subchunk2Size: %d bytes\r\n", header.Subchunk2Size);
 80016e2:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 80016e6:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 80016ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016ec:	4619      	mov	r1, r3
 80016ee:	4812      	ldr	r0, [pc, #72]	@ (8001738 <ReadWAVFileInfo+0x180>)
 80016f0:	f00d fb2a 	bl	800ed48 <iprintf>

    // Close the file
    f_close(&file);
 80016f4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80016f8:	4618      	mov	r0, r3
 80016fa:	f00b fe99 	bl	800d430 <f_close>
}
 80016fe:	f507 771c 	add.w	r7, r7, #624	@ 0x270
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	08010d20 	.word	0x08010d20
 800170c:	08010d50 	.word	0x08010d50
 8001710:	08010d84 	.word	0x08010d84
 8001714:	08010d94 	.word	0x08010d94
 8001718:	08010da8 	.word	0x08010da8
 800171c:	08010dbc 	.word	0x08010dbc
 8001720:	08010dd4 	.word	0x08010dd4
 8001724:	08010df0 	.word	0x08010df0
 8001728:	08010e08 	.word	0x08010e08
 800172c:	08010e1c 	.word	0x08010e1c
 8001730:	08010e30 	.word	0x08010e30
 8001734:	08010e48 	.word	0x08010e48
 8001738:	08010e60 	.word	0x08010e60

0800173c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001740:	b672      	cpsid	i
}
 8001742:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001744:	bf00      	nop
 8001746:	e7fd      	b.n	8001744 <Error_Handler+0x8>

08001748 <MX_SAI1_Init>:
SAI_HandleTypeDef hsai_BlockA1;
DMA_HandleTypeDef hdma_sai1_a;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 800174c:	4b27      	ldr	r3, [pc, #156]	@ (80017ec <MX_SAI1_Init+0xa4>)
 800174e:	4a28      	ldr	r2, [pc, #160]	@ (80017f0 <MX_SAI1_Init+0xa8>)
 8001750:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8001752:	4b26      	ldr	r3, [pc, #152]	@ (80017ec <MX_SAI1_Init+0xa4>)
 8001754:	2200      	movs	r2, #0
 8001756:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_RX;
 8001758:	4b24      	ldr	r3, [pc, #144]	@ (80017ec <MX_SAI1_Init+0xa4>)
 800175a:	2201      	movs	r2, #1
 800175c:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_16;
 800175e:	4b23      	ldr	r3, [pc, #140]	@ (80017ec <MX_SAI1_Init+0xa4>)
 8001760:	2280      	movs	r2, #128	@ 0x80
 8001762:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001764:	4b21      	ldr	r3, [pc, #132]	@ (80017ec <MX_SAI1_Init+0xa4>)
 8001766:	2200      	movs	r2, #0
 8001768:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800176a:	4b20      	ldr	r3, [pc, #128]	@ (80017ec <MX_SAI1_Init+0xa4>)
 800176c:	2200      	movs	r2, #0
 800176e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8001770:	4b1e      	ldr	r3, [pc, #120]	@ (80017ec <MX_SAI1_Init+0xa4>)
 8001772:	2200      	movs	r2, #0
 8001774:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001776:	4b1d      	ldr	r3, [pc, #116]	@ (80017ec <MX_SAI1_Init+0xa4>)
 8001778:	2200      	movs	r2, #0
 800177a:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800177c:	4b1b      	ldr	r3, [pc, #108]	@ (80017ec <MX_SAI1_Init+0xa4>)
 800177e:	2200      	movs	r2, #0
 8001780:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001782:	4b1a      	ldr	r3, [pc, #104]	@ (80017ec <MX_SAI1_Init+0xa4>)
 8001784:	2200      	movs	r2, #0
 8001786:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_16K;
 8001788:	4b18      	ldr	r3, [pc, #96]	@ (80017ec <MX_SAI1_Init+0xa4>)
 800178a:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 800178e:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001790:	4b16      	ldr	r3, [pc, #88]	@ (80017ec <MX_SAI1_Init+0xa4>)
 8001792:	2200      	movs	r2, #0
 8001794:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001796:	4b15      	ldr	r3, [pc, #84]	@ (80017ec <MX_SAI1_Init+0xa4>)
 8001798:	2200      	movs	r2, #0
 800179a:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 800179c:	4b13      	ldr	r3, [pc, #76]	@ (80017ec <MX_SAI1_Init+0xa4>)
 800179e:	2200      	movs	r2, #0
 80017a0:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA1.FrameInit.FrameLength = 16;
 80017a2:	4b12      	ldr	r3, [pc, #72]	@ (80017ec <MX_SAI1_Init+0xa4>)
 80017a4:	2210      	movs	r2, #16
 80017a6:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 80017a8:	4b10      	ldr	r3, [pc, #64]	@ (80017ec <MX_SAI1_Init+0xa4>)
 80017aa:	2201      	movs	r2, #1
 80017ac:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80017ae:	4b0f      	ldr	r3, [pc, #60]	@ (80017ec <MX_SAI1_Init+0xa4>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80017b4:	4b0d      	ldr	r3, [pc, #52]	@ (80017ec <MX_SAI1_Init+0xa4>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80017ba:	4b0c      	ldr	r3, [pc, #48]	@ (80017ec <MX_SAI1_Init+0xa4>)
 80017bc:	2200      	movs	r2, #0
 80017be:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 80017c0:	4b0a      	ldr	r3, [pc, #40]	@ (80017ec <MX_SAI1_Init+0xa4>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80017c6:	4b09      	ldr	r3, [pc, #36]	@ (80017ec <MX_SAI1_Init+0xa4>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 80017cc:	4b07      	ldr	r3, [pc, #28]	@ (80017ec <MX_SAI1_Init+0xa4>)
 80017ce:	2201      	movs	r2, #1
 80017d0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 80017d2:	4b06      	ldr	r3, [pc, #24]	@ (80017ec <MX_SAI1_Init+0xa4>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 80017d8:	4804      	ldr	r0, [pc, #16]	@ (80017ec <MX_SAI1_Init+0xa4>)
 80017da:	f005 fef9 	bl	80075d0 <HAL_SAI_Init>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <MX_SAI1_Init+0xa0>
  {
    Error_Handler();
 80017e4:	f7ff ffaa 	bl	800173c <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 80017e8:	bf00      	nop
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	20000438 	.word	0x20000438
 80017f0:	40015804 	.word	0x40015804

080017f4 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b0aa      	sub	sp, #168	@ 0xa8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017fc:	f107 0310 	add.w	r3, r7, #16
 8001800:	2284      	movs	r2, #132	@ 0x84
 8001802:	2100      	movs	r1, #0
 8001804:	4618      	mov	r0, r3
 8001806:	f00d fbe7 	bl	800efd8 <memset>
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a41      	ldr	r2, [pc, #260]	@ (8001914 <HAL_SAI_MspInit+0x120>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d17b      	bne.n	800190c <HAL_SAI_MspInit+0x118>
    {
    /* SAI1 clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8001814:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8001818:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 800181a:	2332      	movs	r3, #50	@ 0x32
 800181c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800181e:	2302      	movs	r3, #2
 8001820:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001822:	2302      	movs	r3, #2
 8001824:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8001826:	2300      	movs	r3, #0
 8001828:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 800182a:	2301      	movs	r3, #1
 800182c:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800182e:	2300      	movs	r3, #0
 8001830:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI;
 8001832:	2300      	movs	r3, #0
 8001834:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001836:	f107 0310 	add.w	r3, r7, #16
 800183a:	4618      	mov	r0, r3
 800183c:	f005 f88c 	bl	8006958 <HAL_RCCEx_PeriphCLKConfig>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <HAL_SAI_MspInit+0x56>
    {
      Error_Handler();
 8001846:	f7ff ff79 	bl	800173c <Error_Handler>
    }

    if (SAI1_client == 0)
 800184a:	4b33      	ldr	r3, [pc, #204]	@ (8001918 <HAL_SAI_MspInit+0x124>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d10b      	bne.n	800186a <HAL_SAI_MspInit+0x76>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001852:	4b32      	ldr	r3, [pc, #200]	@ (800191c <HAL_SAI_MspInit+0x128>)
 8001854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001856:	4a31      	ldr	r2, [pc, #196]	@ (800191c <HAL_SAI_MspInit+0x128>)
 8001858:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800185c:	6453      	str	r3, [r2, #68]	@ 0x44
 800185e:	4b2f      	ldr	r3, [pc, #188]	@ (800191c <HAL_SAI_MspInit+0x128>)
 8001860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001862:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001866:	60fb      	str	r3, [r7, #12]
 8001868:	68fb      	ldr	r3, [r7, #12]
    }
    SAI1_client ++;
 800186a:	4b2b      	ldr	r3, [pc, #172]	@ (8001918 <HAL_SAI_MspInit+0x124>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	3301      	adds	r3, #1
 8001870:	4a29      	ldr	r2, [pc, #164]	@ (8001918 <HAL_SAI_MspInit+0x124>)
 8001872:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001874:	2370      	movs	r3, #112	@ 0x70
 8001876:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187a:	2302      	movs	r3, #2
 800187c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001880:	2300      	movs	r3, #0
 8001882:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001886:	2300      	movs	r3, #0
 8001888:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800188c:	2306      	movs	r3, #6
 800188e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001892:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001896:	4619      	mov	r1, r3
 8001898:	4821      	ldr	r0, [pc, #132]	@ (8001920 <HAL_SAI_MspInit+0x12c>)
 800189a:	f003 fa89 	bl	8004db0 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA2_Stream1;
 800189e:	4b21      	ldr	r3, [pc, #132]	@ (8001924 <HAL_SAI_MspInit+0x130>)
 80018a0:	4a21      	ldr	r2, [pc, #132]	@ (8001928 <HAL_SAI_MspInit+0x134>)
 80018a2:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Channel = DMA_CHANNEL_0;
 80018a4:	4b1f      	ldr	r3, [pc, #124]	@ (8001924 <HAL_SAI_MspInit+0x130>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018aa:	4b1e      	ldr	r3, [pc, #120]	@ (8001924 <HAL_SAI_MspInit+0x130>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 80018b0:	4b1c      	ldr	r3, [pc, #112]	@ (8001924 <HAL_SAI_MspInit+0x130>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 80018b6:	4b1b      	ldr	r3, [pc, #108]	@ (8001924 <HAL_SAI_MspInit+0x130>)
 80018b8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80018bc:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80018be:	4b19      	ldr	r3, [pc, #100]	@ (8001924 <HAL_SAI_MspInit+0x130>)
 80018c0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80018c4:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80018c6:	4b17      	ldr	r3, [pc, #92]	@ (8001924 <HAL_SAI_MspInit+0x130>)
 80018c8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018cc:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 80018ce:	4b15      	ldr	r3, [pc, #84]	@ (8001924 <HAL_SAI_MspInit+0x130>)
 80018d0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80018d4:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_HIGH;
 80018d6:	4b13      	ldr	r3, [pc, #76]	@ (8001924 <HAL_SAI_MspInit+0x130>)
 80018d8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80018dc:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018de:	4b11      	ldr	r3, [pc, #68]	@ (8001924 <HAL_SAI_MspInit+0x130>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 80018e4:	480f      	ldr	r0, [pc, #60]	@ (8001924 <HAL_SAI_MspInit+0x130>)
 80018e6:	f002 fdef 	bl	80044c8 <HAL_DMA_Init>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <HAL_SAI_MspInit+0x100>
    {
      Error_Handler();
 80018f0:	f7ff ff24 	bl	800173c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	4a0b      	ldr	r2, [pc, #44]	@ (8001924 <HAL_SAI_MspInit+0x130>)
 80018f8:	671a      	str	r2, [r3, #112]	@ 0x70
 80018fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001924 <HAL_SAI_MspInit+0x130>)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	4a08      	ldr	r2, [pc, #32]	@ (8001924 <HAL_SAI_MspInit+0x130>)
 8001904:	66da      	str	r2, [r3, #108]	@ 0x6c
 8001906:	4a07      	ldr	r2, [pc, #28]	@ (8001924 <HAL_SAI_MspInit+0x130>)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6393      	str	r3, [r2, #56]	@ 0x38
    }
}
 800190c:	bf00      	nop
 800190e:	37a8      	adds	r7, #168	@ 0xa8
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	40015804 	.word	0x40015804
 8001918:	2000051c 	.word	0x2000051c
 800191c:	40023800 	.word	0x40023800
 8001920:	40021000 	.word	0x40021000
 8001924:	200004bc 	.word	0x200004bc
 8001928:	40026428 	.word	0x40026428

0800192c <HAL_SAI_MspDeInit>:

void HAL_SAI_MspDeInit(SAI_HandleTypeDef* saiHandle)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]

/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a11      	ldr	r2, [pc, #68]	@ (8001980 <HAL_SAI_MspDeInit+0x54>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d11c      	bne.n	8001978 <HAL_SAI_MspDeInit+0x4c>
    {
    SAI1_client --;
 800193e:	4b11      	ldr	r3, [pc, #68]	@ (8001984 <HAL_SAI_MspDeInit+0x58>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	3b01      	subs	r3, #1
 8001944:	4a0f      	ldr	r2, [pc, #60]	@ (8001984 <HAL_SAI_MspDeInit+0x58>)
 8001946:	6013      	str	r3, [r2, #0]
    if (SAI1_client == 0)
 8001948:	4b0e      	ldr	r3, [pc, #56]	@ (8001984 <HAL_SAI_MspDeInit+0x58>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d105      	bne.n	800195c <HAL_SAI_MspDeInit+0x30>
      {
      /* Peripheral clock disable */
       __HAL_RCC_SAI1_CLK_DISABLE();
 8001950:	4b0d      	ldr	r3, [pc, #52]	@ (8001988 <HAL_SAI_MspDeInit+0x5c>)
 8001952:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001954:	4a0c      	ldr	r2, [pc, #48]	@ (8001988 <HAL_SAI_MspDeInit+0x5c>)
 8001956:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800195a:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SAI1_A_Block_A GPIO Configuration
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6);
 800195c:	2170      	movs	r1, #112	@ 0x70
 800195e:	480b      	ldr	r0, [pc, #44]	@ (800198c <HAL_SAI_MspDeInit+0x60>)
 8001960:	f003 fbd2 	bl	8005108 <HAL_GPIO_DeInit>

    HAL_DMA_DeInit(saiHandle->hdmarx);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001968:	4618      	mov	r0, r3
 800196a:	f002 fe5b 	bl	8004624 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(saiHandle->hdmatx);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001972:	4618      	mov	r0, r3
 8001974:	f002 fe56 	bl	8004624 <HAL_DMA_DeInit>
    }
}
 8001978:	bf00      	nop
 800197a:	3708      	adds	r7, #8
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	40015804 	.word	0x40015804
 8001984:	2000051c 	.word	0x2000051c
 8001988:	40023800 	.word	0x40023800
 800198c:	40021000 	.word	0x40021000

08001990 <MX_SDMMC1_SD_Init>:
DMA_HandleTypeDef hdma_sdmmc1_tx;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001994:	4b0c      	ldr	r3, [pc, #48]	@ (80019c8 <MX_SDMMC1_SD_Init+0x38>)
 8001996:	4a0d      	ldr	r2, [pc, #52]	@ (80019cc <MX_SDMMC1_SD_Init+0x3c>)
 8001998:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800199a:	4b0b      	ldr	r3, [pc, #44]	@ (80019c8 <MX_SDMMC1_SD_Init+0x38>)
 800199c:	2200      	movs	r2, #0
 800199e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 80019a0:	4b09      	ldr	r3, [pc, #36]	@ (80019c8 <MX_SDMMC1_SD_Init+0x38>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80019a6:	4b08      	ldr	r3, [pc, #32]	@ (80019c8 <MX_SDMMC1_SD_Init+0x38>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 80019ac:	4b06      	ldr	r3, [pc, #24]	@ (80019c8 <MX_SDMMC1_SD_Init+0x38>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80019b2:	4b05      	ldr	r3, [pc, #20]	@ (80019c8 <MX_SDMMC1_SD_Init+0x38>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 80019b8:	4b03      	ldr	r3, [pc, #12]	@ (80019c8 <MX_SDMMC1_SD_Init+0x38>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80019be:	bf00      	nop
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	20000520 	.word	0x20000520
 80019cc:	40012c00 	.word	0x40012c00

080019d0 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b0ac      	sub	sp, #176	@ 0xb0
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]
 80019e0:	605a      	str	r2, [r3, #4]
 80019e2:	609a      	str	r2, [r3, #8]
 80019e4:	60da      	str	r2, [r3, #12]
 80019e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019e8:	f107 0318 	add.w	r3, r7, #24
 80019ec:	2284      	movs	r2, #132	@ 0x84
 80019ee:	2100      	movs	r1, #0
 80019f0:	4618      	mov	r0, r3
 80019f2:	f00d faf1 	bl	800efd8 <memset>
  if(sdHandle->Instance==SDMMC1)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a74      	ldr	r2, [pc, #464]	@ (8001bcc <HAL_SD_MspInit+0x1fc>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	f040 80e0 	bne.w	8001bc2 <HAL_SD_MspInit+0x1f2>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 8001a02:	f44f 0320 	mov.w	r3, #10485760	@ 0xa00000
 8001a06:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a14:	f107 0318 	add.w	r3, r7, #24
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f004 ff9d 	bl	8006958 <HAL_RCCEx_PeriphCLKConfig>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <HAL_SD_MspInit+0x58>
    {
      Error_Handler();
 8001a24:	f7ff fe8a 	bl	800173c <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001a28:	4b69      	ldr	r3, [pc, #420]	@ (8001bd0 <HAL_SD_MspInit+0x200>)
 8001a2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a2c:	4a68      	ldr	r2, [pc, #416]	@ (8001bd0 <HAL_SD_MspInit+0x200>)
 8001a2e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001a32:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a34:	4b66      	ldr	r3, [pc, #408]	@ (8001bd0 <HAL_SD_MspInit+0x200>)
 8001a36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a3c:	617b      	str	r3, [r7, #20]
 8001a3e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a40:	4b63      	ldr	r3, [pc, #396]	@ (8001bd0 <HAL_SD_MspInit+0x200>)
 8001a42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a44:	4a62      	ldr	r2, [pc, #392]	@ (8001bd0 <HAL_SD_MspInit+0x200>)
 8001a46:	f043 0304 	orr.w	r3, r3, #4
 8001a4a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a4c:	4b60      	ldr	r3, [pc, #384]	@ (8001bd0 <HAL_SD_MspInit+0x200>)
 8001a4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a50:	f003 0304 	and.w	r3, r3, #4
 8001a54:	613b      	str	r3, [r7, #16]
 8001a56:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a58:	4b5d      	ldr	r3, [pc, #372]	@ (8001bd0 <HAL_SD_MspInit+0x200>)
 8001a5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a5c:	4a5c      	ldr	r2, [pc, #368]	@ (8001bd0 <HAL_SD_MspInit+0x200>)
 8001a5e:	f043 0308 	orr.w	r3, r3, #8
 8001a62:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a64:	4b5a      	ldr	r3, [pc, #360]	@ (8001bd0 <HAL_SD_MspInit+0x200>)
 8001a66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a68:	f003 0308 	and.w	r3, r3, #8
 8001a6c:	60fb      	str	r3, [r7, #12]
 8001a6e:	68fb      	ldr	r3, [r7, #12]
    /**SDMMC1 GPIO Configuration
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_8;
 8001a70:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8001a74:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a78:	2302      	movs	r3, #2
 8001a7a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a84:	2303      	movs	r3, #3
 8001a86:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001a8a:	230c      	movs	r3, #12
 8001a8c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a90:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001a94:	4619      	mov	r1, r3
 8001a96:	484f      	ldr	r0, [pc, #316]	@ (8001bd4 <HAL_SD_MspInit+0x204>)
 8001a98:	f003 f98a 	bl	8004db0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001a9c:	2304      	movs	r3, #4
 8001a9e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001ab4:	230c      	movs	r3, #12
 8001ab6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001aba:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4845      	ldr	r0, [pc, #276]	@ (8001bd8 <HAL_SD_MspInit+0x208>)
 8001ac2:	f003 f975 	bl	8004db0 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 8001ac6:	4b45      	ldr	r3, [pc, #276]	@ (8001bdc <HAL_SD_MspInit+0x20c>)
 8001ac8:	4a45      	ldr	r2, [pc, #276]	@ (8001be0 <HAL_SD_MspInit+0x210>)
 8001aca:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 8001acc:	4b43      	ldr	r3, [pc, #268]	@ (8001bdc <HAL_SD_MspInit+0x20c>)
 8001ace:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001ad2:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ad4:	4b41      	ldr	r3, [pc, #260]	@ (8001bdc <HAL_SD_MspInit+0x20c>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ada:	4b40      	ldr	r3, [pc, #256]	@ (8001bdc <HAL_SD_MspInit+0x20c>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ae0:	4b3e      	ldr	r3, [pc, #248]	@ (8001bdc <HAL_SD_MspInit+0x20c>)
 8001ae2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ae6:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001ae8:	4b3c      	ldr	r3, [pc, #240]	@ (8001bdc <HAL_SD_MspInit+0x20c>)
 8001aea:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001aee:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001af0:	4b3a      	ldr	r3, [pc, #232]	@ (8001bdc <HAL_SD_MspInit+0x20c>)
 8001af2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001af6:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8001af8:	4b38      	ldr	r3, [pc, #224]	@ (8001bdc <HAL_SD_MspInit+0x20c>)
 8001afa:	2220      	movs	r2, #32
 8001afc:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001afe:	4b37      	ldr	r3, [pc, #220]	@ (8001bdc <HAL_SD_MspInit+0x20c>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001b04:	4b35      	ldr	r3, [pc, #212]	@ (8001bdc <HAL_SD_MspInit+0x20c>)
 8001b06:	2204      	movs	r2, #4
 8001b08:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001b0a:	4b34      	ldr	r3, [pc, #208]	@ (8001bdc <HAL_SD_MspInit+0x20c>)
 8001b0c:	2203      	movs	r2, #3
 8001b0e:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 8001b10:	4b32      	ldr	r3, [pc, #200]	@ (8001bdc <HAL_SD_MspInit+0x20c>)
 8001b12:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001b16:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001b18:	4b30      	ldr	r3, [pc, #192]	@ (8001bdc <HAL_SD_MspInit+0x20c>)
 8001b1a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001b1e:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8001b20:	482e      	ldr	r0, [pc, #184]	@ (8001bdc <HAL_SD_MspInit+0x20c>)
 8001b22:	f002 fcd1 	bl	80044c8 <HAL_DMA_Init>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <HAL_SD_MspInit+0x160>
    {
      Error_Handler();
 8001b2c:	f7ff fe06 	bl	800173c <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdmmc1_rx);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	4a2a      	ldr	r2, [pc, #168]	@ (8001bdc <HAL_SD_MspInit+0x20c>)
 8001b34:	641a      	str	r2, [r3, #64]	@ 0x40
 8001b36:	4a29      	ldr	r2, [pc, #164]	@ (8001bdc <HAL_SD_MspInit+0x20c>)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 8001b3c:	4b29      	ldr	r3, [pc, #164]	@ (8001be4 <HAL_SD_MspInit+0x214>)
 8001b3e:	4a2a      	ldr	r2, [pc, #168]	@ (8001be8 <HAL_SD_MspInit+0x218>)
 8001b40:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 8001b42:	4b28      	ldr	r3, [pc, #160]	@ (8001be4 <HAL_SD_MspInit+0x214>)
 8001b44:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001b48:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b4a:	4b26      	ldr	r3, [pc, #152]	@ (8001be4 <HAL_SD_MspInit+0x214>)
 8001b4c:	2240      	movs	r2, #64	@ 0x40
 8001b4e:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b50:	4b24      	ldr	r3, [pc, #144]	@ (8001be4 <HAL_SD_MspInit+0x214>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b56:	4b23      	ldr	r3, [pc, #140]	@ (8001be4 <HAL_SD_MspInit+0x214>)
 8001b58:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b5c:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001b5e:	4b21      	ldr	r3, [pc, #132]	@ (8001be4 <HAL_SD_MspInit+0x214>)
 8001b60:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001b64:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001b66:	4b1f      	ldr	r3, [pc, #124]	@ (8001be4 <HAL_SD_MspInit+0x214>)
 8001b68:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001b6c:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 8001b6e:	4b1d      	ldr	r3, [pc, #116]	@ (8001be4 <HAL_SD_MspInit+0x214>)
 8001b70:	2220      	movs	r2, #32
 8001b72:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001b74:	4b1b      	ldr	r3, [pc, #108]	@ (8001be4 <HAL_SD_MspInit+0x214>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001b7a:	4b1a      	ldr	r3, [pc, #104]	@ (8001be4 <HAL_SD_MspInit+0x214>)
 8001b7c:	2204      	movs	r2, #4
 8001b7e:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001b80:	4b18      	ldr	r3, [pc, #96]	@ (8001be4 <HAL_SD_MspInit+0x214>)
 8001b82:	2203      	movs	r2, #3
 8001b84:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 8001b86:	4b17      	ldr	r3, [pc, #92]	@ (8001be4 <HAL_SD_MspInit+0x214>)
 8001b88:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001b8c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001b8e:	4b15      	ldr	r3, [pc, #84]	@ (8001be4 <HAL_SD_MspInit+0x214>)
 8001b90:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001b94:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 8001b96:	4813      	ldr	r0, [pc, #76]	@ (8001be4 <HAL_SD_MspInit+0x214>)
 8001b98:	f002 fc96 	bl	80044c8 <HAL_DMA_Init>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <HAL_SD_MspInit+0x1d6>
    {
      Error_Handler();
 8001ba2:	f7ff fdcb 	bl	800173c <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdmmc1_tx);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a0e      	ldr	r2, [pc, #56]	@ (8001be4 <HAL_SD_MspInit+0x214>)
 8001baa:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001bac:	4a0d      	ldr	r2, [pc, #52]	@ (8001be4 <HAL_SD_MspInit+0x214>)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 1, 0);
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	2101      	movs	r1, #1
 8001bb6:	2031      	movs	r0, #49	@ 0x31
 8001bb8:	f002 fc4f 	bl	800445a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001bbc:	2031      	movs	r0, #49	@ 0x31
 8001bbe:	f002 fc68 	bl	8004492 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8001bc2:	bf00      	nop
 8001bc4:	37b0      	adds	r7, #176	@ 0xb0
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	40012c00 	.word	0x40012c00
 8001bd0:	40023800 	.word	0x40023800
 8001bd4:	40020800 	.word	0x40020800
 8001bd8:	40020c00 	.word	0x40020c00
 8001bdc:	200005a4 	.word	0x200005a4
 8001be0:	40026458 	.word	0x40026458
 8001be4:	20000604 	.word	0x20000604
 8001be8:	400264a0 	.word	0x400264a0

08001bec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001bf2:	4b0f      	ldr	r3, [pc, #60]	@ (8001c30 <HAL_MspInit+0x44>)
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf6:	4a0e      	ldr	r2, [pc, #56]	@ (8001c30 <HAL_MspInit+0x44>)
 8001bf8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bfc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bfe:	4b0c      	ldr	r3, [pc, #48]	@ (8001c30 <HAL_MspInit+0x44>)
 8001c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c06:	607b      	str	r3, [r7, #4]
 8001c08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c0a:	4b09      	ldr	r3, [pc, #36]	@ (8001c30 <HAL_MspInit+0x44>)
 8001c0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c0e:	4a08      	ldr	r2, [pc, #32]	@ (8001c30 <HAL_MspInit+0x44>)
 8001c10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c14:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c16:	4b06      	ldr	r3, [pc, #24]	@ (8001c30 <HAL_MspInit+0x44>)
 8001c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c1e:	603b      	str	r3, [r7, #0]
 8001c20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c22:	bf00      	nop
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	40023800 	.word	0x40023800

08001c34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c38:	bf00      	nop
 8001c3a:	e7fd      	b.n	8001c38 <NMI_Handler+0x4>

08001c3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c40:	bf00      	nop
 8001c42:	e7fd      	b.n	8001c40 <HardFault_Handler+0x4>

08001c44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c48:	bf00      	nop
 8001c4a:	e7fd      	b.n	8001c48 <MemManage_Handler+0x4>

08001c4c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c50:	bf00      	nop
 8001c52:	e7fd      	b.n	8001c50 <BusFault_Handler+0x4>

08001c54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c58:	bf00      	nop
 8001c5a:	e7fd      	b.n	8001c58 <UsageFault_Handler+0x4>

08001c5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c60:	bf00      	nop
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr

08001c6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c6a:	b480      	push	{r7}
 8001c6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c6e:	bf00      	nop
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c7c:	bf00      	nop
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr

08001c86 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c86:	b580      	push	{r7, lr}
 8001c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c8a:	f002 fac7 	bl	800421c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c8e:	bf00      	nop
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001c92:	b580      	push	{r7, lr}
 8001c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 8001c96:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001c9a:	f003 fb8d 	bl	80053b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001c9e:	bf00      	nop
 8001ca0:	bd80      	pop	{r7, pc}
	...

08001ca4 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001ca8:	4802      	ldr	r0, [pc, #8]	@ (8001cb4 <SDMMC1_IRQHandler+0x10>)
 8001caa:	f006 fab3 	bl	8008214 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8001cae:	bf00      	nop
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	20000520 	.word	0x20000520

08001cb8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8001cbc:	4802      	ldr	r0, [pc, #8]	@ (8001cc8 <DMA2_Stream1_IRQHandler+0x10>)
 8001cbe:	f002 fe01 	bl	80048c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001cc2:	bf00      	nop
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	200004bc 	.word	0x200004bc

08001ccc <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8001cd0:	4802      	ldr	r0, [pc, #8]	@ (8001cdc <DMA2_Stream3_IRQHandler+0x10>)
 8001cd2:	f002 fdf7 	bl	80048c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001cd6:	bf00      	nop
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	200005a4 	.word	0x200005a4

08001ce0 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8001ce4:	4802      	ldr	r0, [pc, #8]	@ (8001cf0 <DMA2_Stream6_IRQHandler+0x10>)
 8001ce6:	f002 fded 	bl	80048c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001cea:	bf00      	nop
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	20000604 	.word	0x20000604

08001cf4 <DMA2_Stream7_IRQHandler>:
  * @brief This function handles DMA2 Stream 7 interrupt request.
  * @param None
  * @retval None
  */
void AUDIO_IN_SAIx_DMAx_IRQHandler(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
	//extern SAI_HandleTypeDef haudio_in_sai;
	HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
 8001cf8:	4b03      	ldr	r3, [pc, #12]	@ (8001d08 <DMA2_Stream7_IRQHandler+0x14>)
 8001cfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f002 fde1 	bl	80048c4 <HAL_DMA_IRQHandler>
}
 8001d02:	bf00      	nop
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	200007d4 	.word	0x200007d4

08001d0c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  return 1;
 8001d10:	2301      	movs	r3, #1
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <_kill>:

int _kill(int pid, int sig)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d26:	f00d f9b9 	bl	800f09c <__errno>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2216      	movs	r2, #22
 8001d2e:	601a      	str	r2, [r3, #0]
  return -1;
 8001d30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3708      	adds	r7, #8
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <_exit>:

void _exit (int status)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d44:	f04f 31ff 	mov.w	r1, #4294967295
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f7ff ffe7 	bl	8001d1c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d4e:	bf00      	nop
 8001d50:	e7fd      	b.n	8001d4e <_exit+0x12>

08001d52 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b086      	sub	sp, #24
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	60f8      	str	r0, [r7, #12]
 8001d5a:	60b9      	str	r1, [r7, #8]
 8001d5c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d5e:	2300      	movs	r3, #0
 8001d60:	617b      	str	r3, [r7, #20]
 8001d62:	e00a      	b.n	8001d7a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d64:	f3af 8000 	nop.w
 8001d68:	4601      	mov	r1, r0
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	1c5a      	adds	r2, r3, #1
 8001d6e:	60ba      	str	r2, [r7, #8]
 8001d70:	b2ca      	uxtb	r2, r1
 8001d72:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	3301      	adds	r3, #1
 8001d78:	617b      	str	r3, [r7, #20]
 8001d7a:	697a      	ldr	r2, [r7, #20]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	dbf0      	blt.n	8001d64 <_read+0x12>
  }

  return len;
 8001d82:	687b      	ldr	r3, [r7, #4]
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3718      	adds	r7, #24
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b086      	sub	sp, #24
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	60f8      	str	r0, [r7, #12]
 8001d94:	60b9      	str	r1, [r7, #8]
 8001d96:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d98:	2300      	movs	r3, #0
 8001d9a:	617b      	str	r3, [r7, #20]
 8001d9c:	e009      	b.n	8001db2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	1c5a      	adds	r2, r3, #1
 8001da2:	60ba      	str	r2, [r7, #8]
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7ff fb74 	bl	8001494 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	3301      	adds	r3, #1
 8001db0:	617b      	str	r3, [r7, #20]
 8001db2:	697a      	ldr	r2, [r7, #20]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	429a      	cmp	r2, r3
 8001db8:	dbf1      	blt.n	8001d9e <_write+0x12>
  }
  return len;
 8001dba:	687b      	ldr	r3, [r7, #4]
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3718      	adds	r7, #24
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}

08001dc4 <_close>:

int _close(int file)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001dcc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001dec:	605a      	str	r2, [r3, #4]
  return 0;
 8001dee:	2300      	movs	r3, #0
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <_isatty>:

int _isatty(int file)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e04:	2301      	movs	r3, #1
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr

08001e12 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e12:	b480      	push	{r7}
 8001e14:	b085      	sub	sp, #20
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	60f8      	str	r0, [r7, #12]
 8001e1a:	60b9      	str	r1, [r7, #8]
 8001e1c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e1e:	2300      	movs	r3, #0
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3714      	adds	r7, #20
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b086      	sub	sp, #24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e34:	4a14      	ldr	r2, [pc, #80]	@ (8001e88 <_sbrk+0x5c>)
 8001e36:	4b15      	ldr	r3, [pc, #84]	@ (8001e8c <_sbrk+0x60>)
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e40:	4b13      	ldr	r3, [pc, #76]	@ (8001e90 <_sbrk+0x64>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d102      	bne.n	8001e4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e48:	4b11      	ldr	r3, [pc, #68]	@ (8001e90 <_sbrk+0x64>)
 8001e4a:	4a12      	ldr	r2, [pc, #72]	@ (8001e94 <_sbrk+0x68>)
 8001e4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e4e:	4b10      	ldr	r3, [pc, #64]	@ (8001e90 <_sbrk+0x64>)
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4413      	add	r3, r2
 8001e56:	693a      	ldr	r2, [r7, #16]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d207      	bcs.n	8001e6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e5c:	f00d f91e 	bl	800f09c <__errno>
 8001e60:	4603      	mov	r3, r0
 8001e62:	220c      	movs	r2, #12
 8001e64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e66:	f04f 33ff 	mov.w	r3, #4294967295
 8001e6a:	e009      	b.n	8001e80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e6c:	4b08      	ldr	r3, [pc, #32]	@ (8001e90 <_sbrk+0x64>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e72:	4b07      	ldr	r3, [pc, #28]	@ (8001e90 <_sbrk+0x64>)
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4413      	add	r3, r2
 8001e7a:	4a05      	ldr	r2, [pc, #20]	@ (8001e90 <_sbrk+0x64>)
 8001e7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3718      	adds	r7, #24
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	20050000 	.word	0x20050000
 8001e8c:	00002000 	.word	0x00002000
 8001e90:	20000664 	.word	0x20000664
 8001e94:	20005778 	.word	0x20005778

08001e98 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e9c:	4b06      	ldr	r3, [pc, #24]	@ (8001eb8 <SystemInit+0x20>)
 8001e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ea2:	4a05      	ldr	r2, [pc, #20]	@ (8001eb8 <SystemInit+0x20>)
 8001ea4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ea8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001eac:	bf00      	nop
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	e000ed00 	.word	0xe000ed00

08001ebc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ec0:	4b14      	ldr	r3, [pc, #80]	@ (8001f14 <MX_USART1_UART_Init+0x58>)
 8001ec2:	4a15      	ldr	r2, [pc, #84]	@ (8001f18 <MX_USART1_UART_Init+0x5c>)
 8001ec4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001ec6:	4b13      	ldr	r3, [pc, #76]	@ (8001f14 <MX_USART1_UART_Init+0x58>)
 8001ec8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ecc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ece:	4b11      	ldr	r3, [pc, #68]	@ (8001f14 <MX_USART1_UART_Init+0x58>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ed4:	4b0f      	ldr	r3, [pc, #60]	@ (8001f14 <MX_USART1_UART_Init+0x58>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001eda:	4b0e      	ldr	r3, [pc, #56]	@ (8001f14 <MX_USART1_UART_Init+0x58>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ee0:	4b0c      	ldr	r3, [pc, #48]	@ (8001f14 <MX_USART1_UART_Init+0x58>)
 8001ee2:	220c      	movs	r2, #12
 8001ee4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ee6:	4b0b      	ldr	r3, [pc, #44]	@ (8001f14 <MX_USART1_UART_Init+0x58>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001eec:	4b09      	ldr	r3, [pc, #36]	@ (8001f14 <MX_USART1_UART_Init+0x58>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ef2:	4b08      	ldr	r3, [pc, #32]	@ (8001f14 <MX_USART1_UART_Init+0x58>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ef8:	4b06      	ldr	r3, [pc, #24]	@ (8001f14 <MX_USART1_UART_Init+0x58>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001efe:	4805      	ldr	r0, [pc, #20]	@ (8001f14 <MX_USART1_UART_Init+0x58>)
 8001f00:	f007 f830 	bl	8008f64 <HAL_UART_Init>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001f0a:	f7ff fc17 	bl	800173c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f0e:	bf00      	nop
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	20000668 	.word	0x20000668
 8001f18:	40011000 	.word	0x40011000

08001f1c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b0ac      	sub	sp, #176	@ 0xb0
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f24:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	605a      	str	r2, [r3, #4]
 8001f2e:	609a      	str	r2, [r3, #8]
 8001f30:	60da      	str	r2, [r3, #12]
 8001f32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f34:	f107 0318 	add.w	r3, r7, #24
 8001f38:	2284      	movs	r2, #132	@ 0x84
 8001f3a:	2100      	movs	r1, #0
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f00d f84b 	bl	800efd8 <memset>
  if(uartHandle->Instance==USART1)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a32      	ldr	r2, [pc, #200]	@ (8002010 <HAL_UART_MspInit+0xf4>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d15c      	bne.n	8002006 <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001f4c:	2340      	movs	r3, #64	@ 0x40
 8001f4e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001f50:	2300      	movs	r3, #0
 8001f52:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f54:	f107 0318 	add.w	r3, r7, #24
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f004 fcfd 	bl	8006958 <HAL_RCCEx_PeriphCLKConfig>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001f64:	f7ff fbea 	bl	800173c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f68:	4b2a      	ldr	r3, [pc, #168]	@ (8002014 <HAL_UART_MspInit+0xf8>)
 8001f6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f6c:	4a29      	ldr	r2, [pc, #164]	@ (8002014 <HAL_UART_MspInit+0xf8>)
 8001f6e:	f043 0310 	orr.w	r3, r3, #16
 8001f72:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f74:	4b27      	ldr	r3, [pc, #156]	@ (8002014 <HAL_UART_MspInit+0xf8>)
 8001f76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f78:	f003 0310 	and.w	r3, r3, #16
 8001f7c:	617b      	str	r3, [r7, #20]
 8001f7e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f80:	4b24      	ldr	r3, [pc, #144]	@ (8002014 <HAL_UART_MspInit+0xf8>)
 8001f82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f84:	4a23      	ldr	r2, [pc, #140]	@ (8002014 <HAL_UART_MspInit+0xf8>)
 8001f86:	f043 0302 	orr.w	r3, r3, #2
 8001f8a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f8c:	4b21      	ldr	r3, [pc, #132]	@ (8002014 <HAL_UART_MspInit+0xf8>)
 8001f8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f90:	f003 0302 	and.w	r3, r3, #2
 8001f94:	613b      	str	r3, [r7, #16]
 8001f96:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f98:	4b1e      	ldr	r3, [pc, #120]	@ (8002014 <HAL_UART_MspInit+0xf8>)
 8001f9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f9c:	4a1d      	ldr	r2, [pc, #116]	@ (8002014 <HAL_UART_MspInit+0xf8>)
 8001f9e:	f043 0301 	orr.w	r3, r3, #1
 8001fa2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fa4:	4b1b      	ldr	r3, [pc, #108]	@ (8002014 <HAL_UART_MspInit+0xf8>)
 8001fa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa8:	f003 0301 	and.w	r3, r3, #1
 8001fac:	60fb      	str	r3, [r7, #12]
 8001fae:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001fb0:	2380      	movs	r3, #128	@ 0x80
 8001fb2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001fc8:	2307      	movs	r3, #7
 8001fca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fce:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	4810      	ldr	r0, [pc, #64]	@ (8002018 <HAL_UART_MspInit+0xfc>)
 8001fd6:	f002 feeb 	bl	8004db0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001fda:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001fde:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ff4:	2307      	movs	r3, #7
 8001ff6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ffa:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001ffe:	4619      	mov	r1, r3
 8002000:	4806      	ldr	r0, [pc, #24]	@ (800201c <HAL_UART_MspInit+0x100>)
 8002002:	f002 fed5 	bl	8004db0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002006:	bf00      	nop
 8002008:	37b0      	adds	r7, #176	@ 0xb0
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	40011000 	.word	0x40011000
 8002014:	40023800 	.word	0x40023800
 8002018:	40020400 	.word	0x40020400
 800201c:	40020000 	.word	0x40020000

08002020 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002020:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002058 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002024:	f7ff ff38 	bl	8001e98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002028:	480c      	ldr	r0, [pc, #48]	@ (800205c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800202a:	490d      	ldr	r1, [pc, #52]	@ (8002060 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800202c:	4a0d      	ldr	r2, [pc, #52]	@ (8002064 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800202e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002030:	e002      	b.n	8002038 <LoopCopyDataInit>

08002032 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002032:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002034:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002036:	3304      	adds	r3, #4

08002038 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002038:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800203a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800203c:	d3f9      	bcc.n	8002032 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800203e:	4a0a      	ldr	r2, [pc, #40]	@ (8002068 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002040:	4c0a      	ldr	r4, [pc, #40]	@ (800206c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002042:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002044:	e001      	b.n	800204a <LoopFillZerobss>

08002046 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002046:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002048:	3204      	adds	r2, #4

0800204a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800204a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800204c:	d3fb      	bcc.n	8002046 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800204e:	f00d f82b 	bl	800f0a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002052:	f7ff f949 	bl	80012e8 <main>
  bx  lr    
 8002056:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002058:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800205c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002060:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 8002064:	08011408 	.word	0x08011408
  ldr r2, =_sbss
 8002068:	20000214 	.word	0x20000214
  ldr r4, =_ebss
 800206c:	20005774 	.word	0x20005774

08002070 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002070:	e7fe      	b.n	8002070 <ADC_IRQHandler>
	...

08002074 <wm8994_Init>:
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param AudioFreq: Audio Frequency 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Init(uint16_t DeviceAddr, uint16_t OutputInputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b088      	sub	sp, #32
 8002078:	af00      	add	r7, sp, #0
 800207a:	607b      	str	r3, [r7, #4]
 800207c:	4603      	mov	r3, r0
 800207e:	81fb      	strh	r3, [r7, #14]
 8002080:	460b      	mov	r3, r1
 8002082:	81bb      	strh	r3, [r7, #12]
 8002084:	4613      	mov	r3, r2
 8002086:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8002088:	2300      	movs	r3, #0
 800208a:	61fb      	str	r3, [r7, #28]
  uint16_t output_device = OutputInputDevice & 0xFF;
 800208c:	89bb      	ldrh	r3, [r7, #12]
 800208e:	b2db      	uxtb	r3, r3
 8002090:	833b      	strh	r3, [r7, #24]
  uint16_t input_device = OutputInputDevice & 0xFF00;
 8002092:	89bb      	ldrh	r3, [r7, #12]
 8002094:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002098:	82fb      	strh	r3, [r7, #22]
  uint16_t power_mgnt_reg_1 = 0;
 800209a:	2300      	movs	r3, #0
 800209c:	837b      	strh	r3, [r7, #26]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 800209e:	f001 fc71 	bl	8003984 <AUDIO_IO_Init>
  /* wm8994 Errata Work-Arounds */
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 80020a2:	89fb      	ldrh	r3, [r7, #14]
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	2203      	movs	r2, #3
 80020a8:	f44f 7181 	mov.w	r1, #258	@ 0x102
 80020ac:	4618      	mov	r0, r3
 80020ae:	f001 fafb 	bl	80036a8 <CODEC_IO_Write>
 80020b2:	4603      	mov	r3, r0
 80020b4:	461a      	mov	r2, r3
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	4413      	add	r3, r2
 80020ba:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x817, 0x0000);
 80020bc:	89fb      	ldrh	r3, [r7, #14]
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	2200      	movs	r2, #0
 80020c2:	f640 0117 	movw	r1, #2071	@ 0x817
 80020c6:	4618      	mov	r0, r3
 80020c8:	f001 faee 	bl	80036a8 <CODEC_IO_Write>
 80020cc:	4603      	mov	r3, r0
 80020ce:	461a      	mov	r2, r3
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	4413      	add	r3, r2
 80020d4:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0000);
 80020d6:	89fb      	ldrh	r3, [r7, #14]
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	2200      	movs	r2, #0
 80020dc:	f44f 7181 	mov.w	r1, #258	@ 0x102
 80020e0:	4618      	mov	r0, r3
 80020e2:	f001 fae1 	bl	80036a8 <CODEC_IO_Write>
 80020e6:	4603      	mov	r3, r0
 80020e8:	461a      	mov	r2, r3
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	4413      	add	r3, r2
 80020ee:	61fb      	str	r3, [r7, #28]

  /* Enable VMID soft start (fast), Start-up Bias Current Enabled */
  counter += CODEC_IO_Write(DeviceAddr, 0x39, 0x006C);
 80020f0:	89fb      	ldrh	r3, [r7, #14]
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	226c      	movs	r2, #108	@ 0x6c
 80020f6:	2139      	movs	r1, #57	@ 0x39
 80020f8:	4618      	mov	r0, r3
 80020fa:	f001 fad5 	bl	80036a8 <CODEC_IO_Write>
 80020fe:	4603      	mov	r3, r0
 8002100:	461a      	mov	r2, r3
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	4413      	add	r3, r2
 8002106:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID */
  if (input_device > 0)
 8002108:	8afb      	ldrh	r3, [r7, #22]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d00c      	beq.n	8002128 <wm8994_Init+0xb4>
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0013);
 800210e:	89fb      	ldrh	r3, [r7, #14]
 8002110:	b2db      	uxtb	r3, r3
 8002112:	2213      	movs	r2, #19
 8002114:	2101      	movs	r1, #1
 8002116:	4618      	mov	r0, r3
 8002118:	f001 fac6 	bl	80036a8 <CODEC_IO_Write>
 800211c:	4603      	mov	r3, r0
 800211e:	461a      	mov	r2, r3
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	4413      	add	r3, r2
 8002124:	61fb      	str	r3, [r7, #28]
 8002126:	e00b      	b.n	8002140 <wm8994_Init+0xcc>
  }
  else
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0003);
 8002128:	89fb      	ldrh	r3, [r7, #14]
 800212a:	b2db      	uxtb	r3, r3
 800212c:	2203      	movs	r2, #3
 800212e:	2101      	movs	r1, #1
 8002130:	4618      	mov	r0, r3
 8002132:	f001 fab9 	bl	80036a8 <CODEC_IO_Write>
 8002136:	4603      	mov	r3, r0
 8002138:	461a      	mov	r2, r3
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	4413      	add	r3, r2
 800213e:	61fb      	str	r3, [r7, #28]
  }

  /* Add Delay */
  AUDIO_IO_Delay(50);
 8002140:	2032      	movs	r0, #50	@ 0x32
 8002142:	f001 fc87 	bl	8003a54 <AUDIO_IO_Delay>

  /* Path Configurations for output */
  if (output_device > 0)
 8002146:	8b3b      	ldrh	r3, [r7, #24]
 8002148:	2b00      	cmp	r3, #0
 800214a:	f000 815f 	beq.w	800240c <wm8994_Init+0x398>
  {
    outputEnabled = 1;
 800214e:	4bae      	ldr	r3, [pc, #696]	@ (8002408 <wm8994_Init+0x394>)
 8002150:	2201      	movs	r2, #1
 8002152:	601a      	str	r2, [r3, #0]

    switch (output_device)
 8002154:	8b3b      	ldrh	r3, [r7, #24]
 8002156:	2b03      	cmp	r3, #3
 8002158:	f000 808c 	beq.w	8002274 <wm8994_Init+0x200>
 800215c:	2b03      	cmp	r3, #3
 800215e:	f300 8111 	bgt.w	8002384 <wm8994_Init+0x310>
 8002162:	2b01      	cmp	r3, #1
 8002164:	d002      	beq.n	800216c <wm8994_Init+0xf8>
 8002166:	2b02      	cmp	r3, #2
 8002168:	d042      	beq.n	80021f0 <wm8994_Init+0x17c>
 800216a:	e10b      	b.n	8002384 <wm8994_Init+0x310>
    {
    case OUTPUT_DEVICE_SPEAKER:
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 800216c:	89fb      	ldrh	r3, [r7, #14]
 800216e:	b2db      	uxtb	r3, r3
 8002170:	f640 420c 	movw	r2, #3084	@ 0xc0c
 8002174:	2105      	movs	r1, #5
 8002176:	4618      	mov	r0, r3
 8002178:	f001 fa96 	bl	80036a8 <CODEC_IO_Write>
 800217c:	4603      	mov	r3, r0
 800217e:	461a      	mov	r2, r3
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	4413      	add	r3, r2
 8002184:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8002186:	89fb      	ldrh	r3, [r7, #14]
 8002188:	b2db      	uxtb	r3, r3
 800218a:	2200      	movs	r2, #0
 800218c:	f240 6101 	movw	r1, #1537	@ 0x601
 8002190:	4618      	mov	r0, r3
 8002192:	f001 fa89 	bl	80036a8 <CODEC_IO_Write>
 8002196:	4603      	mov	r3, r0
 8002198:	461a      	mov	r2, r3
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	4413      	add	r3, r2
 800219e:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 80021a0:	89fb      	ldrh	r3, [r7, #14]
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	2200      	movs	r2, #0
 80021a6:	f240 6102 	movw	r1, #1538	@ 0x602
 80021aa:	4618      	mov	r0, r3
 80021ac:	f001 fa7c 	bl	80036a8 <CODEC_IO_Write>
 80021b0:	4603      	mov	r3, r0
 80021b2:	461a      	mov	r2, r3
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	4413      	add	r3, r2
 80021b8:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 80021ba:	89fb      	ldrh	r3, [r7, #14]
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	2202      	movs	r2, #2
 80021c0:	f240 6104 	movw	r1, #1540	@ 0x604
 80021c4:	4618      	mov	r0, r3
 80021c6:	f001 fa6f 	bl	80036a8 <CODEC_IO_Write>
 80021ca:	4603      	mov	r3, r0
 80021cc:	461a      	mov	r2, r3
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	4413      	add	r3, r2
 80021d2:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 80021d4:	89fb      	ldrh	r3, [r7, #14]
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	2202      	movs	r2, #2
 80021da:	f240 6105 	movw	r1, #1541	@ 0x605
 80021de:	4618      	mov	r0, r3
 80021e0:	f001 fa62 	bl	80036a8 <CODEC_IO_Write>
 80021e4:	4603      	mov	r3, r0
 80021e6:	461a      	mov	r2, r3
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	4413      	add	r3, r2
 80021ec:	61fb      	str	r3, [r7, #28]
      break;
 80021ee:	e110      	b.n	8002412 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_HEADPHONE:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 80021f0:	89fb      	ldrh	r3, [r7, #14]
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	f240 3203 	movw	r2, #771	@ 0x303
 80021f8:	2105      	movs	r1, #5
 80021fa:	4618      	mov	r0, r3
 80021fc:	f001 fa54 	bl	80036a8 <CODEC_IO_Write>
 8002200:	4603      	mov	r3, r0
 8002202:	461a      	mov	r2, r3
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	4413      	add	r3, r2
 8002208:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800220a:	89fb      	ldrh	r3, [r7, #14]
 800220c:	b2db      	uxtb	r3, r3
 800220e:	2201      	movs	r2, #1
 8002210:	f240 6101 	movw	r1, #1537	@ 0x601
 8002214:	4618      	mov	r0, r3
 8002216:	f001 fa47 	bl	80036a8 <CODEC_IO_Write>
 800221a:	4603      	mov	r3, r0
 800221c:	461a      	mov	r2, r3
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	4413      	add	r3, r2
 8002222:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8002224:	89fb      	ldrh	r3, [r7, #14]
 8002226:	b2db      	uxtb	r3, r3
 8002228:	2201      	movs	r2, #1
 800222a:	f240 6102 	movw	r1, #1538	@ 0x602
 800222e:	4618      	mov	r0, r3
 8002230:	f001 fa3a 	bl	80036a8 <CODEC_IO_Write>
 8002234:	4603      	mov	r3, r0
 8002236:	461a      	mov	r2, r3
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	4413      	add	r3, r2
 800223c:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 800223e:	89fb      	ldrh	r3, [r7, #14]
 8002240:	b2db      	uxtb	r3, r3
 8002242:	2200      	movs	r2, #0
 8002244:	f240 6104 	movw	r1, #1540	@ 0x604
 8002248:	4618      	mov	r0, r3
 800224a:	f001 fa2d 	bl	80036a8 <CODEC_IO_Write>
 800224e:	4603      	mov	r3, r0
 8002250:	461a      	mov	r2, r3
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	4413      	add	r3, r2
 8002256:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8002258:	89fb      	ldrh	r3, [r7, #14]
 800225a:	b2db      	uxtb	r3, r3
 800225c:	2200      	movs	r2, #0
 800225e:	f240 6105 	movw	r1, #1541	@ 0x605
 8002262:	4618      	mov	r0, r3
 8002264:	f001 fa20 	bl	80036a8 <CODEC_IO_Write>
 8002268:	4603      	mov	r3, r0
 800226a:	461a      	mov	r2, r3
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	4413      	add	r3, r2
 8002270:	61fb      	str	r3, [r7, #28]
      break;
 8002272:	e0ce      	b.n	8002412 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_BOTH:
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8002274:	8afb      	ldrh	r3, [r7, #22]
 8002276:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800227a:	d141      	bne.n	8002300 <wm8994_Init+0x28c>
      {
        /* Enable DAC1 (Left), Enable DAC1 (Right),
        also Enable DAC2 (Left), Enable DAC2 (Right)*/
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 800227c:	89fb      	ldrh	r3, [r7, #14]
 800227e:	b2db      	uxtb	r3, r3
 8002280:	f640 720f 	movw	r2, #3855	@ 0xf0f
 8002284:	2105      	movs	r1, #5
 8002286:	4618      	mov	r0, r3
 8002288:	f001 fa0e 	bl	80036a8 <CODEC_IO_Write>
 800228c:	4603      	mov	r3, r0
 800228e:	461a      	mov	r2, r3
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	4413      	add	r3, r2
 8002294:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0003);
 8002296:	89fb      	ldrh	r3, [r7, #14]
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2203      	movs	r2, #3
 800229c:	f240 6101 	movw	r1, #1537	@ 0x601
 80022a0:	4618      	mov	r0, r3
 80022a2:	f001 fa01 	bl	80036a8 <CODEC_IO_Write>
 80022a6:	4603      	mov	r3, r0
 80022a8:	461a      	mov	r2, r3
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	4413      	add	r3, r2
 80022ae:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0003);
 80022b0:	89fb      	ldrh	r3, [r7, #14]
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	2203      	movs	r2, #3
 80022b6:	f240 6102 	movw	r1, #1538	@ 0x602
 80022ba:	4618      	mov	r0, r3
 80022bc:	f001 f9f4 	bl	80036a8 <CODEC_IO_Write>
 80022c0:	4603      	mov	r3, r0
 80022c2:	461a      	mov	r2, r3
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	4413      	add	r3, r2
 80022c8:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0003);
 80022ca:	89fb      	ldrh	r3, [r7, #14]
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	2203      	movs	r2, #3
 80022d0:	f240 6104 	movw	r1, #1540	@ 0x604
 80022d4:	4618      	mov	r0, r3
 80022d6:	f001 f9e7 	bl	80036a8 <CODEC_IO_Write>
 80022da:	4603      	mov	r3, r0
 80022dc:	461a      	mov	r2, r3
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	4413      	add	r3, r2
 80022e2:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0003);
 80022e4:	89fb      	ldrh	r3, [r7, #14]
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	2203      	movs	r2, #3
 80022ea:	f240 6105 	movw	r1, #1541	@ 0x605
 80022ee:	4618      	mov	r0, r3
 80022f0:	f001 f9da 	bl	80036a8 <CODEC_IO_Write>
 80022f4:	4603      	mov	r3, r0
 80022f6:	461a      	mov	r2, r3
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	4413      	add	r3, r2
 80022fc:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
        
        /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
      }
      break;
 80022fe:	e088      	b.n	8002412 <wm8994_Init+0x39e>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8002300:	89fb      	ldrh	r3, [r7, #14]
 8002302:	b2db      	uxtb	r3, r3
 8002304:	f640 720f 	movw	r2, #3855	@ 0xf0f
 8002308:	2105      	movs	r1, #5
 800230a:	4618      	mov	r0, r3
 800230c:	f001 f9cc 	bl	80036a8 <CODEC_IO_Write>
 8002310:	4603      	mov	r3, r0
 8002312:	461a      	mov	r2, r3
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	4413      	add	r3, r2
 8002318:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800231a:	89fb      	ldrh	r3, [r7, #14]
 800231c:	b2db      	uxtb	r3, r3
 800231e:	2201      	movs	r2, #1
 8002320:	f240 6101 	movw	r1, #1537	@ 0x601
 8002324:	4618      	mov	r0, r3
 8002326:	f001 f9bf 	bl	80036a8 <CODEC_IO_Write>
 800232a:	4603      	mov	r3, r0
 800232c:	461a      	mov	r2, r3
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	4413      	add	r3, r2
 8002332:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8002334:	89fb      	ldrh	r3, [r7, #14]
 8002336:	b2db      	uxtb	r3, r3
 8002338:	2201      	movs	r2, #1
 800233a:	f240 6102 	movw	r1, #1538	@ 0x602
 800233e:	4618      	mov	r0, r3
 8002340:	f001 f9b2 	bl	80036a8 <CODEC_IO_Write>
 8002344:	4603      	mov	r3, r0
 8002346:	461a      	mov	r2, r3
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	4413      	add	r3, r2
 800234c:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 800234e:	89fb      	ldrh	r3, [r7, #14]
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2202      	movs	r2, #2
 8002354:	f240 6104 	movw	r1, #1540	@ 0x604
 8002358:	4618      	mov	r0, r3
 800235a:	f001 f9a5 	bl	80036a8 <CODEC_IO_Write>
 800235e:	4603      	mov	r3, r0
 8002360:	461a      	mov	r2, r3
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	4413      	add	r3, r2
 8002366:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
 8002368:	89fb      	ldrh	r3, [r7, #14]
 800236a:	b2db      	uxtb	r3, r3
 800236c:	2202      	movs	r2, #2
 800236e:	f240 6105 	movw	r1, #1541	@ 0x605
 8002372:	4618      	mov	r0, r3
 8002374:	f001 f998 	bl	80036a8 <CODEC_IO_Write>
 8002378:	4603      	mov	r3, r0
 800237a:	461a      	mov	r2, r3
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	4413      	add	r3, r2
 8002380:	61fb      	str	r3, [r7, #28]
      break;
 8002382:	e046      	b.n	8002412 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_AUTO :
    default:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8002384:	89fb      	ldrh	r3, [r7, #14]
 8002386:	b2db      	uxtb	r3, r3
 8002388:	f240 3203 	movw	r2, #771	@ 0x303
 800238c:	2105      	movs	r1, #5
 800238e:	4618      	mov	r0, r3
 8002390:	f001 f98a 	bl	80036a8 <CODEC_IO_Write>
 8002394:	4603      	mov	r3, r0
 8002396:	461a      	mov	r2, r3
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	4413      	add	r3, r2
 800239c:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800239e:	89fb      	ldrh	r3, [r7, #14]
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	2201      	movs	r2, #1
 80023a4:	f240 6101 	movw	r1, #1537	@ 0x601
 80023a8:	4618      	mov	r0, r3
 80023aa:	f001 f97d 	bl	80036a8 <CODEC_IO_Write>
 80023ae:	4603      	mov	r3, r0
 80023b0:	461a      	mov	r2, r3
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	4413      	add	r3, r2
 80023b6:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80023b8:	89fb      	ldrh	r3, [r7, #14]
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	2201      	movs	r2, #1
 80023be:	f240 6102 	movw	r1, #1538	@ 0x602
 80023c2:	4618      	mov	r0, r3
 80023c4:	f001 f970 	bl	80036a8 <CODEC_IO_Write>
 80023c8:	4603      	mov	r3, r0
 80023ca:	461a      	mov	r2, r3
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	4413      	add	r3, r2
 80023d0:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 80023d2:	89fb      	ldrh	r3, [r7, #14]
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	2200      	movs	r2, #0
 80023d8:	f240 6104 	movw	r1, #1540	@ 0x604
 80023dc:	4618      	mov	r0, r3
 80023de:	f001 f963 	bl	80036a8 <CODEC_IO_Write>
 80023e2:	4603      	mov	r3, r0
 80023e4:	461a      	mov	r2, r3
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	4413      	add	r3, r2
 80023ea:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 80023ec:	89fb      	ldrh	r3, [r7, #14]
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	2200      	movs	r2, #0
 80023f2:	f240 6105 	movw	r1, #1541	@ 0x605
 80023f6:	4618      	mov	r0, r3
 80023f8:	f001 f956 	bl	80036a8 <CODEC_IO_Write>
 80023fc:	4603      	mov	r3, r0
 80023fe:	461a      	mov	r2, r3
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	4413      	add	r3, r2
 8002404:	61fb      	str	r3, [r7, #28]
      break;
 8002406:	e004      	b.n	8002412 <wm8994_Init+0x39e>
 8002408:	200006f0 	.word	0x200006f0
    }
  }
  else
  {
    outputEnabled = 0;
 800240c:	4b99      	ldr	r3, [pc, #612]	@ (8002674 <wm8994_Init+0x600>)
 800240e:	2200      	movs	r2, #0
 8002410:	601a      	str	r2, [r3, #0]
  }

  /* Path Configurations for input */
  if (input_device > 0)
 8002412:	8afb      	ldrh	r3, [r7, #22]
 8002414:	2b00      	cmp	r3, #0
 8002416:	f000 81ab 	beq.w	8002770 <wm8994_Init+0x6fc>
  {
    inputEnabled = 1;
 800241a:	4b97      	ldr	r3, [pc, #604]	@ (8002678 <wm8994_Init+0x604>)
 800241c:	2201      	movs	r2, #1
 800241e:	601a      	str	r2, [r3, #0]
    switch (input_device)
 8002420:	8afb      	ldrh	r3, [r7, #22]
 8002422:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002426:	f000 8129 	beq.w	800267c <wm8994_Init+0x608>
 800242a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800242e:	f300 819b 	bgt.w	8002768 <wm8994_Init+0x6f4>
 8002432:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002436:	d05a      	beq.n	80024ee <wm8994_Init+0x47a>
 8002438:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800243c:	f300 8194 	bgt.w	8002768 <wm8994_Init+0x6f4>
 8002440:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002444:	f000 80c6 	beq.w	80025d4 <wm8994_Init+0x560>
 8002448:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800244c:	f040 818c 	bne.w	8002768 <wm8994_Init+0x6f4>
    {
    case INPUT_DEVICE_DIGITAL_MICROPHONE_2 :
      /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
       * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0C30);
 8002450:	89fb      	ldrh	r3, [r7, #14]
 8002452:	b2db      	uxtb	r3, r3
 8002454:	f44f 6243 	mov.w	r2, #3120	@ 0xc30
 8002458:	2104      	movs	r1, #4
 800245a:	4618      	mov	r0, r3
 800245c:	f001 f924 	bl	80036a8 <CODEC_IO_Write>
 8002460:	4603      	mov	r3, r0
 8002462:	461a      	mov	r2, r3
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	4413      	add	r3, r2
 8002468:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 800246a:	89fb      	ldrh	r3, [r7, #14]
 800246c:	b2db      	uxtb	r3, r3
 800246e:	22db      	movs	r2, #219	@ 0xdb
 8002470:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 8002474:	4618      	mov	r0, r3
 8002476:	f001 f917 	bl	80036a8 <CODEC_IO_Write>
 800247a:	4603      	mov	r3, r0
 800247c:	461a      	mov	r2, r3
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	4413      	add	r3, r2
 8002482:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6000);
 8002484:	89fb      	ldrh	r3, [r7, #14]
 8002486:	b2db      	uxtb	r3, r3
 8002488:	f44f 42c0 	mov.w	r2, #24576	@ 0x6000
 800248c:	2102      	movs	r1, #2
 800248e:	4618      	mov	r0, r3
 8002490:	f001 f90a 	bl	80036a8 <CODEC_IO_Write>
 8002494:	4603      	mov	r3, r0
 8002496:	461a      	mov	r2, r3
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	4413      	add	r3, r2
 800249c:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 800249e:	89fb      	ldrh	r3, [r7, #14]
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	2202      	movs	r2, #2
 80024a4:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 80024a8:	4618      	mov	r0, r3
 80024aa:	f001 f8fd 	bl	80036a8 <CODEC_IO_Write>
 80024ae:	4603      	mov	r3, r0
 80024b0:	461a      	mov	r2, r3
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	4413      	add	r3, r2
 80024b6:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 80024b8:	89fb      	ldrh	r3, [r7, #14]
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	2202      	movs	r2, #2
 80024be:	f240 6109 	movw	r1, #1545	@ 0x609
 80024c2:	4618      	mov	r0, r3
 80024c4:	f001 f8f0 	bl	80036a8 <CODEC_IO_Write>
 80024c8:	4603      	mov	r3, r0
 80024ca:	461a      	mov	r2, r3
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	4413      	add	r3, r2
 80024d0:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000E);
 80024d2:	89fb      	ldrh	r3, [r7, #14]
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	220e      	movs	r2, #14
 80024d8:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 80024dc:	4618      	mov	r0, r3
 80024de:	f001 f8e3 	bl	80036a8 <CODEC_IO_Write>
 80024e2:	4603      	mov	r3, r0
 80024e4:	461a      	mov	r2, r3
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	4413      	add	r3, r2
 80024ea:	61fb      	str	r3, [r7, #28]
      break;
 80024ec:	e143      	b.n	8002776 <wm8994_Init+0x702>

    case INPUT_DEVICE_INPUT_LINE_1 :
      /* IN1LN_TO_IN1L, IN1LP_TO_VMID, IN1RN_TO_IN1R, IN1RP_TO_VMID */
      counter += CODEC_IO_Write(DeviceAddr, 0x28, 0x0011);
 80024ee:	89fb      	ldrh	r3, [r7, #14]
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	2211      	movs	r2, #17
 80024f4:	2128      	movs	r1, #40	@ 0x28
 80024f6:	4618      	mov	r0, r3
 80024f8:	f001 f8d6 	bl	80036a8 <CODEC_IO_Write>
 80024fc:	4603      	mov	r3, r0
 80024fe:	461a      	mov	r2, r3
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	4413      	add	r3, r2
 8002504:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1L_TO_MIXINL and +30dB on IN1L PGA output */
      counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0035);
 8002506:	89fb      	ldrh	r3, [r7, #14]
 8002508:	b2db      	uxtb	r3, r3
 800250a:	2235      	movs	r2, #53	@ 0x35
 800250c:	2129      	movs	r1, #41	@ 0x29
 800250e:	4618      	mov	r0, r3
 8002510:	f001 f8ca 	bl	80036a8 <CODEC_IO_Write>
 8002514:	4603      	mov	r3, r0
 8002516:	461a      	mov	r2, r3
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	4413      	add	r3, r2
 800251c:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R_TO_MIXINL, Gain = +30dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0035);
 800251e:	89fb      	ldrh	r3, [r7, #14]
 8002520:	b2db      	uxtb	r3, r3
 8002522:	2235      	movs	r2, #53	@ 0x35
 8002524:	212a      	movs	r1, #42	@ 0x2a
 8002526:	4618      	mov	r0, r3
 8002528:	f001 f8be 	bl	80036a8 <CODEC_IO_Write>
 800252c:	4603      	mov	r3, r0
 800252e:	461a      	mov	r2, r3
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	4413      	add	r3, r2
 8002534:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0303);
 8002536:	89fb      	ldrh	r3, [r7, #14]
 8002538:	b2db      	uxtb	r3, r3
 800253a:	f240 3203 	movw	r2, #771	@ 0x303
 800253e:	2104      	movs	r1, #4
 8002540:	4618      	mov	r0, r3
 8002542:	f001 f8b1 	bl	80036a8 <CODEC_IO_Write>
 8002546:	4603      	mov	r3, r0
 8002548:	461a      	mov	r2, r3
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	4413      	add	r3, r2
 800254e:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8002550:	89fb      	ldrh	r3, [r7, #14]
 8002552:	b2db      	uxtb	r3, r3
 8002554:	22db      	movs	r2, #219	@ 0xdb
 8002556:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 800255a:	4618      	mov	r0, r3
 800255c:	f001 f8a4 	bl	80036a8 <CODEC_IO_Write>
 8002560:	4603      	mov	r3, r0
 8002562:	461a      	mov	r2, r3
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	4413      	add	r3, r2
 8002568:	61fb      	str	r3, [r7, #28]

      /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 800256a:	89fb      	ldrh	r3, [r7, #14]
 800256c:	b2db      	uxtb	r3, r3
 800256e:	f246 3250 	movw	r2, #25424	@ 0x6350
 8002572:	2102      	movs	r1, #2
 8002574:	4618      	mov	r0, r3
 8002576:	f001 f897 	bl	80036a8 <CODEC_IO_Write>
 800257a:	4603      	mov	r3, r0
 800257c:	461a      	mov	r2, r3
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	4413      	add	r3, r2
 8002582:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8002584:	89fb      	ldrh	r3, [r7, #14]
 8002586:	b2db      	uxtb	r3, r3
 8002588:	2202      	movs	r2, #2
 800258a:	f240 6106 	movw	r1, #1542	@ 0x606
 800258e:	4618      	mov	r0, r3
 8002590:	f001 f88a 	bl	80036a8 <CODEC_IO_Write>
 8002594:	4603      	mov	r3, r0
 8002596:	461a      	mov	r2, r3
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	4413      	add	r3, r2
 800259c:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 800259e:	89fb      	ldrh	r3, [r7, #14]
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	2202      	movs	r2, #2
 80025a4:	f240 6107 	movw	r1, #1543	@ 0x607
 80025a8:	4618      	mov	r0, r3
 80025aa:	f001 f87d 	bl	80036a8 <CODEC_IO_Write>
 80025ae:	4603      	mov	r3, r0
 80025b0:	461a      	mov	r2, r3
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	4413      	add	r3, r2
 80025b6:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 80025b8:	89fb      	ldrh	r3, [r7, #14]
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	220d      	movs	r2, #13
 80025be:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 80025c2:	4618      	mov	r0, r3
 80025c4:	f001 f870 	bl	80036a8 <CODEC_IO_Write>
 80025c8:	4603      	mov	r3, r0
 80025ca:	461a      	mov	r2, r3
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	4413      	add	r3, r2
 80025d0:	61fb      	str	r3, [r7, #28]
      break;
 80025d2:	e0d0      	b.n	8002776 <wm8994_Init+0x702>

    case INPUT_DEVICE_DIGITAL_MICROPHONE_1 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x030C);
 80025d4:	89fb      	ldrh	r3, [r7, #14]
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	f44f 7243 	mov.w	r2, #780	@ 0x30c
 80025dc:	2104      	movs	r1, #4
 80025de:	4618      	mov	r0, r3
 80025e0:	f001 f862 	bl	80036a8 <CODEC_IO_Write>
 80025e4:	4603      	mov	r3, r0
 80025e6:	461a      	mov	r2, r3
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	4413      	add	r3, r2
 80025ec:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 80025ee:	89fb      	ldrh	r3, [r7, #14]
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	22db      	movs	r2, #219	@ 0xdb
 80025f4:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 80025f8:	4618      	mov	r0, r3
 80025fa:	f001 f855 	bl	80036a8 <CODEC_IO_Write>
 80025fe:	4603      	mov	r3, r0
 8002600:	461a      	mov	r2, r3
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	4413      	add	r3, r2
 8002606:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8002608:	89fb      	ldrh	r3, [r7, #14]
 800260a:	b2db      	uxtb	r3, r3
 800260c:	f246 3250 	movw	r2, #25424	@ 0x6350
 8002610:	2102      	movs	r1, #2
 8002612:	4618      	mov	r0, r3
 8002614:	f001 f848 	bl	80036a8 <CODEC_IO_Write>
 8002618:	4603      	mov	r3, r0
 800261a:	461a      	mov	r2, r3
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	4413      	add	r3, r2
 8002620:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8002622:	89fb      	ldrh	r3, [r7, #14]
 8002624:	b2db      	uxtb	r3, r3
 8002626:	2202      	movs	r2, #2
 8002628:	f240 6106 	movw	r1, #1542	@ 0x606
 800262c:	4618      	mov	r0, r3
 800262e:	f001 f83b 	bl	80036a8 <CODEC_IO_Write>
 8002632:	4603      	mov	r3, r0
 8002634:	461a      	mov	r2, r3
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	4413      	add	r3, r2
 800263a:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 800263c:	89fb      	ldrh	r3, [r7, #14]
 800263e:	b2db      	uxtb	r3, r3
 8002640:	2202      	movs	r2, #2
 8002642:	f240 6107 	movw	r1, #1543	@ 0x607
 8002646:	4618      	mov	r0, r3
 8002648:	f001 f82e 	bl	80036a8 <CODEC_IO_Write>
 800264c:	4603      	mov	r3, r0
 800264e:	461a      	mov	r2, r3
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	4413      	add	r3, r2
 8002654:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8002656:	89fb      	ldrh	r3, [r7, #14]
 8002658:	b2db      	uxtb	r3, r3
 800265a:	220d      	movs	r2, #13
 800265c:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8002660:	4618      	mov	r0, r3
 8002662:	f001 f821 	bl	80036a8 <CODEC_IO_Write>
 8002666:	4603      	mov	r3, r0
 8002668:	461a      	mov	r2, r3
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	4413      	add	r3, r2
 800266e:	61fb      	str	r3, [r7, #28]
      break; 
 8002670:	e081      	b.n	8002776 <wm8994_Init+0x702>
 8002672:	bf00      	nop
 8002674:	200006f0 	.word	0x200006f0
 8002678:	200006f4 	.word	0x200006f4
    case INPUT_DEVICE_DIGITAL_MIC1_MIC2 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0F3C);
 800267c:	89fb      	ldrh	r3, [r7, #14]
 800267e:	b2db      	uxtb	r3, r3
 8002680:	f640 723c 	movw	r2, #3900	@ 0xf3c
 8002684:	2104      	movs	r1, #4
 8002686:	4618      	mov	r0, r3
 8002688:	f001 f80e 	bl	80036a8 <CODEC_IO_Write>
 800268c:	4603      	mov	r3, r0
 800268e:	461a      	mov	r2, r3
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	4413      	add	r3, r2
 8002694:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8002696:	89fb      	ldrh	r3, [r7, #14]
 8002698:	b2db      	uxtb	r3, r3
 800269a:	22db      	movs	r2, #219	@ 0xdb
 800269c:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 80026a0:	4618      	mov	r0, r3
 80026a2:	f001 f801 	bl	80036a8 <CODEC_IO_Write>
 80026a6:	4603      	mov	r3, r0
 80026a8:	461a      	mov	r2, r3
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	4413      	add	r3, r2
 80026ae:	61fb      	str	r3, [r7, #28]
      
      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 80026b0:	89fb      	ldrh	r3, [r7, #14]
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	22db      	movs	r2, #219	@ 0xdb
 80026b6:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 80026ba:	4618      	mov	r0, r3
 80026bc:	f000 fff4 	bl	80036a8 <CODEC_IO_Write>
 80026c0:	4603      	mov	r3, r0
 80026c2:	461a      	mov	r2, r3
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	4413      	add	r3, r2
 80026c8:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x63A0);
 80026ca:	89fb      	ldrh	r3, [r7, #14]
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	f246 32a0 	movw	r2, #25504	@ 0x63a0
 80026d2:	2102      	movs	r1, #2
 80026d4:	4618      	mov	r0, r3
 80026d6:	f000 ffe7 	bl	80036a8 <CODEC_IO_Write>
 80026da:	4603      	mov	r3, r0
 80026dc:	461a      	mov	r2, r3
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	4413      	add	r3, r2
 80026e2:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 80026e4:	89fb      	ldrh	r3, [r7, #14]
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	2202      	movs	r2, #2
 80026ea:	f240 6106 	movw	r1, #1542	@ 0x606
 80026ee:	4618      	mov	r0, r3
 80026f0:	f000 ffda 	bl	80036a8 <CODEC_IO_Write>
 80026f4:	4603      	mov	r3, r0
 80026f6:	461a      	mov	r2, r3
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	4413      	add	r3, r2
 80026fc:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 80026fe:	89fb      	ldrh	r3, [r7, #14]
 8002700:	b2db      	uxtb	r3, r3
 8002702:	2202      	movs	r2, #2
 8002704:	f240 6107 	movw	r1, #1543	@ 0x607
 8002708:	4618      	mov	r0, r3
 800270a:	f000 ffcd 	bl	80036a8 <CODEC_IO_Write>
 800270e:	4603      	mov	r3, r0
 8002710:	461a      	mov	r2, r3
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	4413      	add	r3, r2
 8002716:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8002718:	89fb      	ldrh	r3, [r7, #14]
 800271a:	b2db      	uxtb	r3, r3
 800271c:	2202      	movs	r2, #2
 800271e:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 8002722:	4618      	mov	r0, r3
 8002724:	f000 ffc0 	bl	80036a8 <CODEC_IO_Write>
 8002728:	4603      	mov	r3, r0
 800272a:	461a      	mov	r2, r3
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	4413      	add	r3, r2
 8002730:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8002732:	89fb      	ldrh	r3, [r7, #14]
 8002734:	b2db      	uxtb	r3, r3
 8002736:	2202      	movs	r2, #2
 8002738:	f240 6109 	movw	r1, #1545	@ 0x609
 800273c:	4618      	mov	r0, r3
 800273e:	f000 ffb3 	bl	80036a8 <CODEC_IO_Write>
 8002742:	4603      	mov	r3, r0
 8002744:	461a      	mov	r2, r3
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	4413      	add	r3, r2
 800274a:	61fb      	str	r3, [r7, #28]
      
      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 800274c:	89fb      	ldrh	r3, [r7, #14]
 800274e:	b2db      	uxtb	r3, r3
 8002750:	220d      	movs	r2, #13
 8002752:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8002756:	4618      	mov	r0, r3
 8002758:	f000 ffa6 	bl	80036a8 <CODEC_IO_Write>
 800275c:	4603      	mov	r3, r0
 800275e:	461a      	mov	r2, r3
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	4413      	add	r3, r2
 8002764:	61fb      	str	r3, [r7, #28]
      break;    
 8002766:	e006      	b.n	8002776 <wm8994_Init+0x702>
    case INPUT_DEVICE_INPUT_LINE_2 :
    default:
      /* Actually, no other input devices supported */
      counter++;
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	3301      	adds	r3, #1
 800276c:	61fb      	str	r3, [r7, #28]
      break;
 800276e:	e002      	b.n	8002776 <wm8994_Init+0x702>
    }
  }
  else
  {
    inputEnabled = 0;
 8002770:	4ba4      	ldr	r3, [pc, #656]	@ (8002a04 <wm8994_Init+0x990>)
 8002772:	2200      	movs	r2, #0
 8002774:	601a      	str	r2, [r3, #0]
  }
  
  /*  Clock Configurations */
  switch (AudioFreq)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4aa3      	ldr	r2, [pc, #652]	@ (8002a08 <wm8994_Init+0x994>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d079      	beq.n	8002872 <wm8994_Init+0x7fe>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4aa1      	ldr	r2, [pc, #644]	@ (8002a08 <wm8994_Init+0x994>)
 8002782:	4293      	cmp	r3, r2
 8002784:	f200 80ad 	bhi.w	80028e2 <wm8994_Init+0x86e>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 800278e:	4293      	cmp	r3, r2
 8002790:	d061      	beq.n	8002856 <wm8994_Init+0x7e2>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8002798:	4293      	cmp	r3, r2
 800279a:	f200 80a2 	bhi.w	80028e2 <wm8994_Init+0x86e>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f64a 4244 	movw	r2, #44100	@ 0xac44
 80027a4:	4293      	cmp	r3, r2
 80027a6:	f000 808e 	beq.w	80028c6 <wm8994_Init+0x852>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f64a 4244 	movw	r2, #44100	@ 0xac44
 80027b0:	4293      	cmp	r3, r2
 80027b2:	f200 8096 	bhi.w	80028e2 <wm8994_Init+0x86e>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 80027bc:	d03d      	beq.n	800283a <wm8994_Init+0x7c6>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 80027c4:	f200 808d 	bhi.w	80028e2 <wm8994_Init+0x86e>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f245 6222 	movw	r2, #22050	@ 0x5622
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d06b      	beq.n	80028aa <wm8994_Init+0x836>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f245 6222 	movw	r2, #22050	@ 0x5622
 80027d8:	4293      	cmp	r3, r2
 80027da:	f200 8082 	bhi.w	80028e2 <wm8994_Init+0x86e>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 80027e4:	d01b      	beq.n	800281e <wm8994_Init+0x7aa>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 80027ec:	d879      	bhi.n	80028e2 <wm8994_Init+0x86e>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 80027f4:	d005      	beq.n	8002802 <wm8994_Init+0x78e>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	f642 3211 	movw	r2, #11025	@ 0x2b11
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d046      	beq.n	800288e <wm8994_Init+0x81a>
 8002800:	e06f      	b.n	80028e2 <wm8994_Init+0x86e>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8002802:	89fb      	ldrh	r3, [r7, #14]
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2203      	movs	r2, #3
 8002808:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800280c:	4618      	mov	r0, r3
 800280e:	f000 ff4b 	bl	80036a8 <CODEC_IO_Write>
 8002812:	4603      	mov	r3, r0
 8002814:	461a      	mov	r2, r3
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	4413      	add	r3, r2
 800281a:	61fb      	str	r3, [r7, #28]
    break;
 800281c:	e06f      	b.n	80028fe <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 800281e:	89fb      	ldrh	r3, [r7, #14]
 8002820:	b2db      	uxtb	r3, r3
 8002822:	2233      	movs	r2, #51	@ 0x33
 8002824:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002828:	4618      	mov	r0, r3
 800282a:	f000 ff3d 	bl	80036a8 <CODEC_IO_Write>
 800282e:	4603      	mov	r3, r0
 8002830:	461a      	mov	r2, r3
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	4413      	add	r3, r2
 8002836:	61fb      	str	r3, [r7, #28]
    break;
 8002838:	e061      	b.n	80028fe <wm8994_Init+0x88a>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 800283a:	89fb      	ldrh	r3, [r7, #14]
 800283c:	b2db      	uxtb	r3, r3
 800283e:	2263      	movs	r2, #99	@ 0x63
 8002840:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002844:	4618      	mov	r0, r3
 8002846:	f000 ff2f 	bl	80036a8 <CODEC_IO_Write>
 800284a:	4603      	mov	r3, r0
 800284c:	461a      	mov	r2, r3
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	4413      	add	r3, r2
 8002852:	61fb      	str	r3, [r7, #28]
    break;
 8002854:	e053      	b.n	80028fe <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8002856:	89fb      	ldrh	r3, [r7, #14]
 8002858:	b2db      	uxtb	r3, r3
 800285a:	2283      	movs	r2, #131	@ 0x83
 800285c:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002860:	4618      	mov	r0, r3
 8002862:	f000 ff21 	bl	80036a8 <CODEC_IO_Write>
 8002866:	4603      	mov	r3, r0
 8002868:	461a      	mov	r2, r3
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	4413      	add	r3, r2
 800286e:	61fb      	str	r3, [r7, #28]
    break;
 8002870:	e045      	b.n	80028fe <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 8002872:	89fb      	ldrh	r3, [r7, #14]
 8002874:	b2db      	uxtb	r3, r3
 8002876:	22a3      	movs	r2, #163	@ 0xa3
 8002878:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800287c:	4618      	mov	r0, r3
 800287e:	f000 ff13 	bl	80036a8 <CODEC_IO_Write>
 8002882:	4603      	mov	r3, r0
 8002884:	461a      	mov	r2, r3
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	4413      	add	r3, r2
 800288a:	61fb      	str	r3, [r7, #28]
    break;
 800288c:	e037      	b.n	80028fe <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 800288e:	89fb      	ldrh	r3, [r7, #14]
 8002890:	b2db      	uxtb	r3, r3
 8002892:	2213      	movs	r2, #19
 8002894:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002898:	4618      	mov	r0, r3
 800289a:	f000 ff05 	bl	80036a8 <CODEC_IO_Write>
 800289e:	4603      	mov	r3, r0
 80028a0:	461a      	mov	r2, r3
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	4413      	add	r3, r2
 80028a6:	61fb      	str	r3, [r7, #28]
    break;
 80028a8:	e029      	b.n	80028fe <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 80028aa:	89fb      	ldrh	r3, [r7, #14]
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	2243      	movs	r2, #67	@ 0x43
 80028b0:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80028b4:	4618      	mov	r0, r3
 80028b6:	f000 fef7 	bl	80036a8 <CODEC_IO_Write>
 80028ba:	4603      	mov	r3, r0
 80028bc:	461a      	mov	r2, r3
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	4413      	add	r3, r2
 80028c2:	61fb      	str	r3, [r7, #28]
    break;
 80028c4:	e01b      	b.n	80028fe <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 80028c6:	89fb      	ldrh	r3, [r7, #14]
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	2273      	movs	r2, #115	@ 0x73
 80028cc:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80028d0:	4618      	mov	r0, r3
 80028d2:	f000 fee9 	bl	80036a8 <CODEC_IO_Write>
 80028d6:	4603      	mov	r3, r0
 80028d8:	461a      	mov	r2, r3
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	4413      	add	r3, r2
 80028de:	61fb      	str	r3, [r7, #28]
    break; 
 80028e0:	e00d      	b.n	80028fe <wm8994_Init+0x88a>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 80028e2:	89fb      	ldrh	r3, [r7, #14]
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	2283      	movs	r2, #131	@ 0x83
 80028e8:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80028ec:	4618      	mov	r0, r3
 80028ee:	f000 fedb 	bl	80036a8 <CODEC_IO_Write>
 80028f2:	4603      	mov	r3, r0
 80028f4:	461a      	mov	r2, r3
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	4413      	add	r3, r2
 80028fa:	61fb      	str	r3, [r7, #28]
    break; 
 80028fc:	bf00      	nop
  }

  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80028fe:	8afb      	ldrh	r3, [r7, #22]
 8002900:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002904:	d10e      	bne.n	8002924 <wm8994_Init+0x8b0>
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4018);    
 8002906:	89fb      	ldrh	r3, [r7, #14]
 8002908:	b2db      	uxtb	r3, r3
 800290a:	f244 0218 	movw	r2, #16408	@ 0x4018
 800290e:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8002912:	4618      	mov	r0, r3
 8002914:	f000 fec8 	bl	80036a8 <CODEC_IO_Write>
 8002918:	4603      	mov	r3, r0
 800291a:	461a      	mov	r2, r3
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	4413      	add	r3, r2
 8002920:	61fb      	str	r3, [r7, #28]
 8002922:	e00d      	b.n	8002940 <wm8994_Init+0x8cc>
  }
  else
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4010);
 8002924:	89fb      	ldrh	r3, [r7, #14]
 8002926:	b2db      	uxtb	r3, r3
 8002928:	f244 0210 	movw	r2, #16400	@ 0x4010
 800292c:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8002930:	4618      	mov	r0, r3
 8002932:	f000 feb9 	bl	80036a8 <CODEC_IO_Write>
 8002936:	4603      	mov	r3, r0
 8002938:	461a      	mov	r2, r3
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	4413      	add	r3, r2
 800293e:	61fb      	str	r3, [r7, #28]
  }
  
  /* slave mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x302, 0x0000);
 8002940:	89fb      	ldrh	r3, [r7, #14]
 8002942:	b2db      	uxtb	r3, r3
 8002944:	2200      	movs	r2, #0
 8002946:	f240 3102 	movw	r1, #770	@ 0x302
 800294a:	4618      	mov	r0, r3
 800294c:	f000 feac 	bl	80036a8 <CODEC_IO_Write>
 8002950:	4603      	mov	r3, r0
 8002952:	461a      	mov	r2, r3
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	4413      	add	r3, r2
 8002958:	61fb      	str	r3, [r7, #28]
  
  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  counter += CODEC_IO_Write(DeviceAddr, 0x208, 0x000A);
 800295a:	89fb      	ldrh	r3, [r7, #14]
 800295c:	b2db      	uxtb	r3, r3
 800295e:	220a      	movs	r2, #10
 8002960:	f44f 7102 	mov.w	r1, #520	@ 0x208
 8002964:	4618      	mov	r0, r3
 8002966:	f000 fe9f 	bl	80036a8 <CODEC_IO_Write>
 800296a:	4603      	mov	r3, r0
 800296c:	461a      	mov	r2, r3
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	4413      	add	r3, r2
 8002972:	61fb      	str	r3, [r7, #28]
  
  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0001);
 8002974:	89fb      	ldrh	r3, [r7, #14]
 8002976:	b2db      	uxtb	r3, r3
 8002978:	2201      	movs	r2, #1
 800297a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800297e:	4618      	mov	r0, r3
 8002980:	f000 fe92 	bl	80036a8 <CODEC_IO_Write>
 8002984:	4603      	mov	r3, r0
 8002986:	461a      	mov	r2, r3
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	4413      	add	r3, r2
 800298c:	61fb      	str	r3, [r7, #28]

  if (output_device > 0)  /* Audio output selected */
 800298e:	8b3b      	ldrh	r3, [r7, #24]
 8002990:	2b00      	cmp	r3, #0
 8002992:	f000 817b 	beq.w	8002c8c <wm8994_Init+0xc18>
  {
    if (output_device == OUTPUT_DEVICE_HEADPHONE)
 8002996:	8b3b      	ldrh	r3, [r7, #24]
 8002998:	2b02      	cmp	r3, #2
 800299a:	d157      	bne.n	8002a4c <wm8994_Init+0x9d8>
    {      
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0100);
 800299c:	89fb      	ldrh	r3, [r7, #14]
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80029a4:	212d      	movs	r1, #45	@ 0x2d
 80029a6:	4618      	mov	r0, r3
 80029a8:	f000 fe7e 	bl	80036a8 <CODEC_IO_Write>
 80029ac:	4603      	mov	r3, r0
 80029ae:	461a      	mov	r2, r3
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	4413      	add	r3, r2
 80029b4:	61fb      	str	r3, [r7, #28]
      
      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0100);    
 80029b6:	89fb      	ldrh	r3, [r7, #14]
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80029be:	212e      	movs	r1, #46	@ 0x2e
 80029c0:	4618      	mov	r0, r3
 80029c2:	f000 fe71 	bl	80036a8 <CODEC_IO_Write>
 80029c6:	4603      	mov	r3, r0
 80029c8:	461a      	mov	r2, r3
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	4413      	add	r3, r2
 80029ce:	61fb      	str	r3, [r7, #28]
            
      /* Startup sequence for Headphone */
      if(ColdStartup)
 80029d0:	4b0e      	ldr	r3, [pc, #56]	@ (8002a0c <wm8994_Init+0x998>)
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d01b      	beq.n	8002a10 <wm8994_Init+0x99c>
      {
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8100);
 80029d8:	89fb      	ldrh	r3, [r7, #14]
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	f44f 4201 	mov.w	r2, #33024	@ 0x8100
 80029e0:	f44f 7188 	mov.w	r1, #272	@ 0x110
 80029e4:	4618      	mov	r0, r3
 80029e6:	f000 fe5f 	bl	80036a8 <CODEC_IO_Write>
 80029ea:	4603      	mov	r3, r0
 80029ec:	461a      	mov	r2, r3
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	4413      	add	r3, r2
 80029f2:	61fb      	str	r3, [r7, #28]
        
        ColdStartup=0;
 80029f4:	4b05      	ldr	r3, [pc, #20]	@ (8002a0c <wm8994_Init+0x998>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	701a      	strb	r2, [r3, #0]
        /* Add Delay */
        AUDIO_IO_Delay(300);
 80029fa:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80029fe:	f001 f829 	bl	8003a54 <AUDIO_IO_Delay>
 8002a02:	e016      	b.n	8002a32 <wm8994_Init+0x9be>
 8002a04:	200006f4 	.word	0x200006f4
 8002a08:	00017700 	.word	0x00017700
 8002a0c:	20000034 	.word	0x20000034
      }
      else /* Headphone Warm Start-Up */
      { 
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8108);
 8002a10:	89fb      	ldrh	r3, [r7, #14]
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	f248 1208 	movw	r2, #33032	@ 0x8108
 8002a18:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f000 fe43 	bl	80036a8 <CODEC_IO_Write>
 8002a22:	4603      	mov	r3, r0
 8002a24:	461a      	mov	r2, r3
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	4413      	add	r3, r2
 8002a2a:	61fb      	str	r3, [r7, #28]
        /* Add Delay */
        AUDIO_IO_Delay(50);
 8002a2c:	2032      	movs	r0, #50	@ 0x32
 8002a2e:	f001 f811 	bl	8003a54 <AUDIO_IO_Delay>
      }

      /* Soft un-Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 8002a32:	89fb      	ldrh	r3, [r7, #14]
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	2200      	movs	r2, #0
 8002a38:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f000 fe33 	bl	80036a8 <CODEC_IO_Write>
 8002a42:	4603      	mov	r3, r0
 8002a44:	461a      	mov	r2, r3
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	4413      	add	r3, r2
 8002a4a:	61fb      	str	r3, [r7, #28]
    }
    /* Analog Output Configuration */

    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0300);
 8002a4c:	89fb      	ldrh	r3, [r7, #14]
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002a54:	2103      	movs	r1, #3
 8002a56:	4618      	mov	r0, r3
 8002a58:	f000 fe26 	bl	80036a8 <CODEC_IO_Write>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	461a      	mov	r2, r3
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	4413      	add	r3, r2
 8002a64:	61fb      	str	r3, [r7, #28]

    /* Left Speaker Mixer Volume = 0dB */
    counter += CODEC_IO_Write(DeviceAddr, 0x22, 0x0000);
 8002a66:	89fb      	ldrh	r3, [r7, #14]
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	2122      	movs	r1, #34	@ 0x22
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f000 fe1a 	bl	80036a8 <CODEC_IO_Write>
 8002a74:	4603      	mov	r3, r0
 8002a76:	461a      	mov	r2, r3
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	61fb      	str	r3, [r7, #28]

    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x23, 0x0000);
 8002a7e:	89fb      	ldrh	r3, [r7, #14]
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	2200      	movs	r2, #0
 8002a84:	2123      	movs	r1, #35	@ 0x23
 8002a86:	4618      	mov	r0, r3
 8002a88:	f000 fe0e 	bl	80036a8 <CODEC_IO_Write>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	461a      	mov	r2, r3
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	4413      	add	r3, r2
 8002a94:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x36, 0x0300);
 8002a96:	89fb      	ldrh	r3, [r7, #14]
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002a9e:	2136      	movs	r1, #54	@ 0x36
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f000 fe01 	bl	80036a8 <CODEC_IO_Write>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	4413      	add	r3, r2
 8002aae:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x3003);
 8002ab0:	89fb      	ldrh	r3, [r7, #14]
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	f243 0203 	movw	r2, #12291	@ 0x3003
 8002ab8:	2101      	movs	r1, #1
 8002aba:	4618      	mov	r0, r3
 8002abc:	f000 fdf4 	bl	80036a8 <CODEC_IO_Write>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	61fb      	str	r3, [r7, #28]

    /* Headphone/Speaker Enable */

    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8002aca:	8afb      	ldrh	r3, [r7, #22]
 8002acc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ad0:	d10d      	bne.n	8002aee <wm8994_Init+0xa7a>
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0205);
 8002ad2:	89fb      	ldrh	r3, [r7, #14]
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	f240 2205 	movw	r2, #517	@ 0x205
 8002ada:	2151      	movs	r1, #81	@ 0x51
 8002adc:	4618      	mov	r0, r3
 8002ade:	f000 fde3 	bl	80036a8 <CODEC_IO_Write>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	4413      	add	r3, r2
 8002aea:	61fb      	str	r3, [r7, #28]
 8002aec:	e00b      	b.n	8002b06 <wm8994_Init+0xa92>
    }
    else
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0005);      
 8002aee:	89fb      	ldrh	r3, [r7, #14]
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	2205      	movs	r2, #5
 8002af4:	2151      	movs	r1, #81	@ 0x51
 8002af6:	4618      	mov	r0, r3
 8002af8:	f000 fdd6 	bl	80036a8 <CODEC_IO_Write>
 8002afc:	4603      	mov	r3, r0
 8002afe:	461a      	mov	r2, r3
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	4413      	add	r3, r2
 8002b04:	61fb      	str	r3, [r7, #28]
    }

    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 8002b06:	8b7b      	ldrh	r3, [r7, #26]
 8002b08:	f443 534c 	orr.w	r3, r3, #13056	@ 0x3300
 8002b0c:	f043 0303 	orr.w	r3, r3, #3
 8002b10:	837b      	strh	r3, [r7, #26]
    counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8002b12:	89fb      	ldrh	r3, [r7, #14]
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	8b7a      	ldrh	r2, [r7, #26]
 8002b18:	2101      	movs	r1, #1
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f000 fdc4 	bl	80036a8 <CODEC_IO_Write>
 8002b20:	4603      	mov	r3, r0
 8002b22:	461a      	mov	r2, r3
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	4413      	add	r3, r2
 8002b28:	61fb      	str	r3, [r7, #28]

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x0022);
 8002b2a:	89fb      	ldrh	r3, [r7, #14]
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	2222      	movs	r2, #34	@ 0x22
 8002b30:	2160      	movs	r1, #96	@ 0x60
 8002b32:	4618      	mov	r0, r3
 8002b34:	f000 fdb8 	bl	80036a8 <CODEC_IO_Write>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	4413      	add	r3, r2
 8002b40:	61fb      	str	r3, [r7, #28]

    /* Enable Charge Pump */
    counter += CODEC_IO_Write(DeviceAddr, 0x4C, 0x9F25);
 8002b42:	89fb      	ldrh	r3, [r7, #14]
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	f649 7225 	movw	r2, #40741	@ 0x9f25
 8002b4a:	214c      	movs	r1, #76	@ 0x4c
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f000 fdab 	bl	80036a8 <CODEC_IO_Write>
 8002b52:	4603      	mov	r3, r0
 8002b54:	461a      	mov	r2, r3
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	4413      	add	r3, r2
 8002b5a:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(15);
 8002b5c:	200f      	movs	r0, #15
 8002b5e:	f000 ff79 	bl	8003a54 <AUDIO_IO_Delay>

    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0001);
 8002b62:	89fb      	ldrh	r3, [r7, #14]
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	2201      	movs	r2, #1
 8002b68:	212d      	movs	r1, #45	@ 0x2d
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f000 fd9c 	bl	80036a8 <CODEC_IO_Write>
 8002b70:	4603      	mov	r3, r0
 8002b72:	461a      	mov	r2, r3
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	4413      	add	r3, r2
 8002b78:	61fb      	str	r3, [r7, #28]

    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0001);
 8002b7a:	89fb      	ldrh	r3, [r7, #14]
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	2201      	movs	r2, #1
 8002b80:	212e      	movs	r1, #46	@ 0x2e
 8002b82:	4618      	mov	r0, r3
 8002b84:	f000 fd90 	bl	80036a8 <CODEC_IO_Write>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	4413      	add	r3, r2
 8002b90:	61fb      	str	r3, [r7, #28]

    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0030 | 0x0300);
 8002b92:	89fb      	ldrh	r3, [r7, #14]
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	f44f 724c 	mov.w	r2, #816	@ 0x330
 8002b9a:	2103      	movs	r1, #3
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f000 fd83 	bl	80036a8 <CODEC_IO_Write>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	4413      	add	r3, r2
 8002baa:	61fb      	str	r3, [r7, #28]

    /* Enable DC Servo and trigger start-up mode on left and right channels */
    counter += CODEC_IO_Write(DeviceAddr, 0x54, 0x0033);
 8002bac:	89fb      	ldrh	r3, [r7, #14]
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	2233      	movs	r2, #51	@ 0x33
 8002bb2:	2154      	movs	r1, #84	@ 0x54
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f000 fd77 	bl	80036a8 <CODEC_IO_Write>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(257);
 8002bc4:	f240 1001 	movw	r0, #257	@ 0x101
 8002bc8:	f000 ff44 	bl	8003a54 <AUDIO_IO_Delay>

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x00EE);
 8002bcc:	89fb      	ldrh	r3, [r7, #14]
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	22ee      	movs	r2, #238	@ 0xee
 8002bd2:	2160      	movs	r1, #96	@ 0x60
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f000 fd67 	bl	80036a8 <CODEC_IO_Write>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	461a      	mov	r2, r3
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	4413      	add	r3, r2
 8002be2:	61fb      	str	r3, [r7, #28]

    /* Unmutes */

    /* Unmute DAC 1 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x610, 0x00C0);
 8002be4:	89fb      	ldrh	r3, [r7, #14]
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	22c0      	movs	r2, #192	@ 0xc0
 8002bea:	f44f 61c2 	mov.w	r1, #1552	@ 0x610
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f000 fd5a 	bl	80036a8 <CODEC_IO_Write>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	4413      	add	r3, r2
 8002bfc:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 1 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x611, 0x00C0);
 8002bfe:	89fb      	ldrh	r3, [r7, #14]
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	22c0      	movs	r2, #192	@ 0xc0
 8002c04:	f240 6111 	movw	r1, #1553	@ 0x611
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f000 fd4d 	bl	80036a8 <CODEC_IO_Write>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	461a      	mov	r2, r3
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	4413      	add	r3, r2
 8002c16:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 0 DAC path */
    counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 8002c18:	89fb      	ldrh	r3, [r7, #14]
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	2210      	movs	r2, #16
 8002c1e:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8002c22:	4618      	mov	r0, r3
 8002c24:	f000 fd40 	bl	80036a8 <CODEC_IO_Write>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	4413      	add	r3, r2
 8002c30:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x612, 0x00C0);
 8002c32:	89fb      	ldrh	r3, [r7, #14]
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	22c0      	movs	r2, #192	@ 0xc0
 8002c38:	f240 6112 	movw	r1, #1554	@ 0x612
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f000 fd33 	bl	80036a8 <CODEC_IO_Write>
 8002c42:	4603      	mov	r3, r0
 8002c44:	461a      	mov	r2, r3
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	4413      	add	r3, r2
 8002c4a:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x613, 0x00C0);
 8002c4c:	89fb      	ldrh	r3, [r7, #14]
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	22c0      	movs	r2, #192	@ 0xc0
 8002c52:	f240 6113 	movw	r1, #1555	@ 0x613
 8002c56:	4618      	mov	r0, r3
 8002c58:	f000 fd26 	bl	80036a8 <CODEC_IO_Write>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	461a      	mov	r2, r3
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	4413      	add	r3, r2
 8002c64:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 8002c66:	89fb      	ldrh	r3, [r7, #14]
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	2210      	movs	r2, #16
 8002c6c:	f240 4122 	movw	r1, #1058	@ 0x422
 8002c70:	4618      	mov	r0, r3
 8002c72:	f000 fd19 	bl	80036a8 <CODEC_IO_Write>
 8002c76:	4603      	mov	r3, r0
 8002c78:	461a      	mov	r2, r3
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	61fb      	str	r3, [r7, #28]
    
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8002c80:	7afa      	ldrb	r2, [r7, #11]
 8002c82:	89fb      	ldrh	r3, [r7, #14]
 8002c84:	4611      	mov	r1, r2
 8002c86:	4618      	mov	r0, r3
 8002c88:	f000 f984 	bl	8002f94 <wm8994_SetVolume>
  }

  if (input_device > 0) /* Audio input selected */
 8002c8c:	8afb      	ldrh	r3, [r7, #22]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	f000 80a6 	beq.w	8002de0 <wm8994_Init+0xd6c>
  {
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 8002c94:	8afb      	ldrh	r3, [r7, #22]
 8002c96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c9a:	d003      	beq.n	8002ca4 <wm8994_Init+0xc30>
 8002c9c:	8afb      	ldrh	r3, [r7, #22]
 8002c9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ca2:	d12b      	bne.n	8002cfc <wm8994_Init+0xc88>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8002ca4:	8b7b      	ldrh	r3, [r7, #26]
 8002ca6:	f043 0313 	orr.w	r3, r3, #19
 8002caa:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8002cac:	89fb      	ldrh	r3, [r7, #14]
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	8b7a      	ldrh	r2, [r7, #26]
 8002cb2:	2101      	movs	r1, #1
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f000 fcf7 	bl	80036a8 <CODEC_IO_Write>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	4413      	add	r3, r2
 8002cc2:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8002cc4:	89fb      	ldrh	r3, [r7, #14]
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	2202      	movs	r2, #2
 8002cca:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f000 fcea 	bl	80036a8 <CODEC_IO_Write>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	4413      	add	r3, r2
 8002cdc:	61fb      	str	r3, [r7, #28]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x3800);
 8002cde:	89fb      	ldrh	r3, [r7, #14]
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002ce6:	f240 4111 	movw	r1, #1041	@ 0x411
 8002cea:	4618      	mov	r0, r3
 8002cec:	f000 fcdc 	bl	80036a8 <CODEC_IO_Write>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	4413      	add	r3, r2
 8002cf8:	61fb      	str	r3, [r7, #28]
 8002cfa:	e06b      	b.n	8002dd4 <wm8994_Init+0xd60>
    }
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8002cfc:	8afb      	ldrh	r3, [r7, #22]
 8002cfe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d02:	d139      	bne.n	8002d78 <wm8994_Init+0xd04>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8002d04:	8b7b      	ldrh	r3, [r7, #26]
 8002d06:	f043 0313 	orr.w	r3, r3, #19
 8002d0a:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8002d0c:	89fb      	ldrh	r3, [r7, #14]
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	8b7a      	ldrh	r2, [r7, #26]
 8002d12:	2101      	movs	r1, #1
 8002d14:	4618      	mov	r0, r3
 8002d16:	f000 fcc7 	bl	80036a8 <CODEC_IO_Write>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	4413      	add	r3, r2
 8002d22:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8002d24:	89fb      	ldrh	r3, [r7, #14]
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	2202      	movs	r2, #2
 8002d2a:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f000 fcba 	bl	80036a8 <CODEC_IO_Write>
 8002d34:	4603      	mov	r3, r0
 8002d36:	461a      	mov	r2, r3
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	61fb      	str	r3, [r7, #28]
    
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8002d3e:	89fb      	ldrh	r3, [r7, #14]
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8002d46:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f000 fcac 	bl	80036a8 <CODEC_IO_Write>
 8002d50:	4603      	mov	r3, r0
 8002d52:	461a      	mov	r2, r3
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	4413      	add	r3, r2
 8002d58:	61fb      	str	r3, [r7, #28]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x1800);      
 8002d5a:	89fb      	ldrh	r3, [r7, #14]
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8002d62:	f240 4111 	movw	r1, #1041	@ 0x411
 8002d66:	4618      	mov	r0, r3
 8002d68:	f000 fc9e 	bl	80036a8 <CODEC_IO_Write>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	461a      	mov	r2, r3
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	4413      	add	r3, r2
 8002d74:	61fb      	str	r3, [r7, #28]
 8002d76:	e02d      	b.n	8002dd4 <wm8994_Init+0xd60>
    }    
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 8002d78:	8afb      	ldrh	r3, [r7, #22]
 8002d7a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002d7e:	d003      	beq.n	8002d88 <wm8994_Init+0xd14>
 8002d80:	8afb      	ldrh	r3, [r7, #22]
 8002d82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d86:	d125      	bne.n	8002dd4 <wm8994_Init+0xd60>
    {

      /* Disable mute on IN1L, IN1L Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x18, 0x000B);
 8002d88:	89fb      	ldrh	r3, [r7, #14]
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	220b      	movs	r2, #11
 8002d8e:	2118      	movs	r1, #24
 8002d90:	4618      	mov	r0, r3
 8002d92:	f000 fc89 	bl	80036a8 <CODEC_IO_Write>
 8002d96:	4603      	mov	r3, r0
 8002d98:	461a      	mov	r2, r3
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	4413      	add	r3, r2
 8002d9e:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R, IN1R Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x1A, 0x000B);
 8002da0:	89fb      	ldrh	r3, [r7, #14]
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	220b      	movs	r2, #11
 8002da6:	211a      	movs	r1, #26
 8002da8:	4618      	mov	r0, r3
 8002daa:	f000 fc7d 	bl	80036a8 <CODEC_IO_Write>
 8002dae:	4603      	mov	r3, r0
 8002db0:	461a      	mov	r2, r3
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	4413      	add	r3, r2
 8002db6:	61fb      	str	r3, [r7, #28]

      /* AIF ADC1 HPF enable, HPF cut = hifi mode fc=4Hz at fs=48kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8002db8:	89fb      	ldrh	r3, [r7, #14]
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8002dc0:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f000 fc6f 	bl	80036a8 <CODEC_IO_Write>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	461a      	mov	r2, r3
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	4413      	add	r3, r2
 8002dd2:	61fb      	str	r3, [r7, #28]
    }
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8002dd4:	7afa      	ldrb	r2, [r7, #11]
 8002dd6:	89fb      	ldrh	r3, [r7, #14]
 8002dd8:	4611      	mov	r1, r2
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f000 f8da 	bl	8002f94 <wm8994_SetVolume>
  }
  /* Return communication control value */
  return counter;  
 8002de0:	69fb      	ldr	r3, [r7, #28]
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3720      	adds	r7, #32
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop

08002dec <wm8994_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void wm8994_DeInit(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 8002df0:	f000 fdd2 	bl	8003998 <AUDIO_IO_DeInit>
}
 8002df4:	bf00      	nop
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <wm8994_ReadID>:
  * @brief  Get the WM8994 ID.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval The WM8994 ID 
  */
uint32_t wm8994_ReadID(uint16_t DeviceAddr)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	4603      	mov	r3, r0
 8002e00:	80fb      	strh	r3, [r7, #6]
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 8002e02:	f000 fdbf 	bl	8003984 <AUDIO_IO_Init>

  return ((uint32_t)AUDIO_IO_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 8002e06:	88fb      	ldrh	r3, [r7, #6]
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	2100      	movs	r1, #0
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f000 fdf5 	bl	80039fc <AUDIO_IO_Read>
 8002e12:	4603      	mov	r3, r0
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3708      	adds	r7, #8
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <wm8994_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	4603      	mov	r3, r0
 8002e24:	6039      	str	r1, [r7, #0]
 8002e26:	80fb      	strh	r3, [r7, #6]
 8002e28:	4613      	mov	r3, r2
 8002e2a:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8002e30:	88fb      	ldrh	r3, [r7, #6]
 8002e32:	2100      	movs	r1, #0
 8002e34:	4618      	mov	r0, r3
 8002e36:	f000 f9d1 	bl	80031dc <wm8994_SetMute>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	4413      	add	r3, r2
 8002e40:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8002e42:	68fb      	ldr	r3, [r7, #12]
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3710      	adds	r7, #16
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <wm8994_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Pause(uint16_t DeviceAddr)
{  
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	4603      	mov	r3, r0
 8002e54:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8002e56:	2300      	movs	r3, #0
 8002e58:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8002e5a:	88fb      	ldrh	r3, [r7, #6]
 8002e5c:	2101      	movs	r1, #1
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f000 f9bc 	bl	80031dc <wm8994_SetMute>
 8002e64:	4602      	mov	r2, r0
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	4413      	add	r3, r2
 8002e6a:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x01);
 8002e6c:	88fb      	ldrh	r3, [r7, #6]
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	2201      	movs	r2, #1
 8002e72:	2102      	movs	r1, #2
 8002e74:	4618      	mov	r0, r3
 8002e76:	f000 fc17 	bl	80036a8 <CODEC_IO_Write>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	4413      	add	r3, r2
 8002e82:	60fb      	str	r3, [r7, #12]
 
  return counter;
 8002e84:	68fb      	ldr	r3, [r7, #12]
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3710      	adds	r7, #16
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}

08002e8e <wm8994_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Resume(uint16_t DeviceAddr)
{
 8002e8e:	b580      	push	{r7, lr}
 8002e90:	b084      	sub	sp, #16
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	4603      	mov	r3, r0
 8002e96:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8002e9c:	88fb      	ldrh	r3, [r7, #6]
 8002e9e:	2100      	movs	r1, #0
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f000 f99b 	bl	80031dc <wm8994_SetMute>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	4413      	add	r3, r2
 8002eac:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8002eae:	68fb      	ldr	r3, [r7, #12]
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3710      	adds	r7, #16
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <wm8994_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	6039      	str	r1, [r7, #0]
 8002ec2:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	60fb      	str	r3, [r7, #12]

  if (outputEnabled != 0)
 8002ec8:	4b31      	ldr	r3, [pc, #196]	@ (8002f90 <wm8994_Stop+0xd8>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d05a      	beq.n	8002f86 <wm8994_Stop+0xce>
  {
    /* Mute the output first */
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8002ed0:	88fb      	ldrh	r3, [r7, #6]
 8002ed2:	2101      	movs	r1, #1
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f000 f981 	bl	80031dc <wm8994_SetMute>
 8002eda:	4602      	mov	r2, r0
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	4413      	add	r3, r2
 8002ee0:	60fb      	str	r3, [r7, #12]

    if (CodecPdwnMode == CODEC_PDWN_SW)
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d04e      	beq.n	8002f86 <wm8994_Stop+0xce>
      /* Only output mute required*/
    }
    else /* CODEC_PDWN_HW */
    {
      /* Mute the AIF1 Timeslot 0 DAC1 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8002ee8:	88fb      	ldrh	r3, [r7, #6]
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ef0:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f000 fbd7 	bl	80036a8 <CODEC_IO_Write>
 8002efa:	4603      	mov	r3, r0
 8002efc:	461a      	mov	r2, r3
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	4413      	add	r3, r2
 8002f02:	60fb      	str	r3, [r7, #12]

      /* Mute the AIF1 Timeslot 1 DAC2 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 8002f04:	88fb      	ldrh	r3, [r7, #6]
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f0c:	f240 4122 	movw	r1, #1058	@ 0x422
 8002f10:	4618      	mov	r0, r3
 8002f12:	f000 fbc9 	bl	80036a8 <CODEC_IO_Write>
 8002f16:	4603      	mov	r3, r0
 8002f18:	461a      	mov	r2, r3
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	4413      	add	r3, r2
 8002f1e:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1L_TO_HPOUT1L */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0000);
 8002f20:	88fb      	ldrh	r3, [r7, #6]
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	2200      	movs	r2, #0
 8002f26:	212d      	movs	r1, #45	@ 0x2d
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f000 fbbd 	bl	80036a8 <CODEC_IO_Write>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	461a      	mov	r2, r3
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	4413      	add	r3, r2
 8002f36:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1R_TO_HPOUT1R */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0000);
 8002f38:	88fb      	ldrh	r3, [r7, #6]
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	212e      	movs	r1, #46	@ 0x2e
 8002f40:	4618      	mov	r0, r3
 8002f42:	f000 fbb1 	bl	80036a8 <CODEC_IO_Write>
 8002f46:	4603      	mov	r3, r0
 8002f48:	461a      	mov	r2, r3
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	4413      	add	r3, r2
 8002f4e:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1 and DAC2 */
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0000);
 8002f50:	88fb      	ldrh	r3, [r7, #6]
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	2200      	movs	r2, #0
 8002f56:	2105      	movs	r1, #5
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f000 fba5 	bl	80036a8 <CODEC_IO_Write>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	461a      	mov	r2, r3
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	4413      	add	r3, r2
 8002f66:	60fb      	str	r3, [r7, #12]

      /* Reset Codec by writing in 0x0000 address register */
      counter += CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8002f68:	88fb      	ldrh	r3, [r7, #6]
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	2100      	movs	r1, #0
 8002f70:	4618      	mov	r0, r3
 8002f72:	f000 fb99 	bl	80036a8 <CODEC_IO_Write>
 8002f76:	4603      	mov	r3, r0
 8002f78:	461a      	mov	r2, r3
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	4413      	add	r3, r2
 8002f7e:	60fb      	str	r3, [r7, #12]

      outputEnabled = 0;
 8002f80:	4b03      	ldr	r3, [pc, #12]	@ (8002f90 <wm8994_Stop+0xd8>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	601a      	str	r2, [r3, #0]
    }
  }
  return counter;
 8002f86:	68fb      	ldr	r3, [r7, #12]
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3710      	adds	r7, #16
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	200006f0 	.word	0x200006f0

08002f94 <wm8994_SetVolume>:
  * @param Volume: a byte value from 0 to 255 (refer to codec registers 
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	460a      	mov	r2, r1
 8002f9e:	80fb      	strh	r3, [r7, #6]
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8002fa8:	797b      	ldrb	r3, [r7, #5]
 8002faa:	2b64      	cmp	r3, #100	@ 0x64
 8002fac:	d80b      	bhi.n	8002fc6 <wm8994_SetVolume+0x32>
 8002fae:	797a      	ldrb	r2, [r7, #5]
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	019b      	lsls	r3, r3, #6
 8002fb4:	1a9b      	subs	r3, r3, r2
 8002fb6:	4a86      	ldr	r2, [pc, #536]	@ (80031d0 <wm8994_SetVolume+0x23c>)
 8002fb8:	fb82 1203 	smull	r1, r2, r2, r3
 8002fbc:	1152      	asrs	r2, r2, #5
 8002fbe:	17db      	asrs	r3, r3, #31
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	e000      	b.n	8002fc8 <wm8994_SetVolume+0x34>
 8002fc6:	2364      	movs	r3, #100	@ 0x64
 8002fc8:	72fb      	strb	r3, [r7, #11]

  /* Output volume */
  if (outputEnabled != 0)
 8002fca:	4b82      	ldr	r3, [pc, #520]	@ (80031d4 <wm8994_SetVolume+0x240>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	f000 809b 	beq.w	800310a <wm8994_SetVolume+0x176>
  {
    if(convertedvol > 0x3E)
 8002fd4:	7afb      	ldrb	r3, [r7, #11]
 8002fd6:	2b3e      	cmp	r3, #62	@ 0x3e
 8002fd8:	d93d      	bls.n	8003056 <wm8994_SetVolume+0xc2>
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8002fda:	88fb      	ldrh	r3, [r7, #6]
 8002fdc:	2100      	movs	r1, #0
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f000 f8fc 	bl	80031dc <wm8994_SetMute>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	4413      	add	r3, r2
 8002fea:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 8002fec:	88fb      	ldrh	r3, [r7, #6]
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	f240 127f 	movw	r2, #383	@ 0x17f
 8002ff4:	211c      	movs	r1, #28
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f000 fb56 	bl	80036a8 <CODEC_IO_Write>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	461a      	mov	r2, r3
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	4413      	add	r3, r2
 8003004:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 8003006:	88fb      	ldrh	r3, [r7, #6]
 8003008:	b2db      	uxtb	r3, r3
 800300a:	f240 127f 	movw	r2, #383	@ 0x17f
 800300e:	211d      	movs	r1, #29
 8003010:	4618      	mov	r0, r3
 8003012:	f000 fb49 	bl	80036a8 <CODEC_IO_Write>
 8003016:	4603      	mov	r3, r0
 8003018:	461a      	mov	r2, r3
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	4413      	add	r3, r2
 800301e:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 8003020:	88fb      	ldrh	r3, [r7, #6]
 8003022:	b2db      	uxtb	r3, r3
 8003024:	f240 127f 	movw	r2, #383	@ 0x17f
 8003028:	2126      	movs	r1, #38	@ 0x26
 800302a:	4618      	mov	r0, r3
 800302c:	f000 fb3c 	bl	80036a8 <CODEC_IO_Write>
 8003030:	4603      	mov	r3, r0
 8003032:	461a      	mov	r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	4413      	add	r3, r2
 8003038:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 800303a:	88fb      	ldrh	r3, [r7, #6]
 800303c:	b2db      	uxtb	r3, r3
 800303e:	f240 127f 	movw	r2, #383	@ 0x17f
 8003042:	2127      	movs	r1, #39	@ 0x27
 8003044:	4618      	mov	r0, r3
 8003046:	f000 fb2f 	bl	80036a8 <CODEC_IO_Write>
 800304a:	4603      	mov	r3, r0
 800304c:	461a      	mov	r2, r3
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	4413      	add	r3, r2
 8003052:	60fb      	str	r3, [r7, #12]
 8003054:	e059      	b.n	800310a <wm8994_SetVolume+0x176>
    }
    else if (Volume == 0)
 8003056:	797b      	ldrb	r3, [r7, #5]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d109      	bne.n	8003070 <wm8994_SetVolume+0xdc>
    {
      /* Mute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 800305c:	88fb      	ldrh	r3, [r7, #6]
 800305e:	2101      	movs	r1, #1
 8003060:	4618      	mov	r0, r3
 8003062:	f000 f8bb 	bl	80031dc <wm8994_SetMute>
 8003066:	4602      	mov	r2, r0
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	4413      	add	r3, r2
 800306c:	60fb      	str	r3, [r7, #12]
 800306e:	e04c      	b.n	800310a <wm8994_SetVolume+0x176>
    }
    else
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8003070:	88fb      	ldrh	r3, [r7, #6]
 8003072:	2100      	movs	r1, #0
 8003074:	4618      	mov	r0, r3
 8003076:	f000 f8b1 	bl	80031dc <wm8994_SetMute>
 800307a:	4602      	mov	r2, r0
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	4413      	add	r3, r2
 8003080:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 8003082:	88fb      	ldrh	r3, [r7, #6]
 8003084:	b2d8      	uxtb	r0, r3
 8003086:	7afb      	ldrb	r3, [r7, #11]
 8003088:	b21b      	sxth	r3, r3
 800308a:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 800308e:	b21b      	sxth	r3, r3
 8003090:	b29b      	uxth	r3, r3
 8003092:	461a      	mov	r2, r3
 8003094:	211c      	movs	r1, #28
 8003096:	f000 fb07 	bl	80036a8 <CODEC_IO_Write>
 800309a:	4603      	mov	r3, r0
 800309c:	461a      	mov	r2, r3
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	4413      	add	r3, r2
 80030a2:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 80030a4:	88fb      	ldrh	r3, [r7, #6]
 80030a6:	b2d8      	uxtb	r0, r3
 80030a8:	7afb      	ldrb	r3, [r7, #11]
 80030aa:	b21b      	sxth	r3, r3
 80030ac:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 80030b0:	b21b      	sxth	r3, r3
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	461a      	mov	r2, r3
 80030b6:	211d      	movs	r1, #29
 80030b8:	f000 faf6 	bl	80036a8 <CODEC_IO_Write>
 80030bc:	4603      	mov	r3, r0
 80030be:	461a      	mov	r2, r3
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	4413      	add	r3, r2
 80030c4:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 80030c6:	88fb      	ldrh	r3, [r7, #6]
 80030c8:	b2d8      	uxtb	r0, r3
 80030ca:	7afb      	ldrb	r3, [r7, #11]
 80030cc:	b21b      	sxth	r3, r3
 80030ce:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 80030d2:	b21b      	sxth	r3, r3
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	461a      	mov	r2, r3
 80030d8:	2126      	movs	r1, #38	@ 0x26
 80030da:	f000 fae5 	bl	80036a8 <CODEC_IO_Write>
 80030de:	4603      	mov	r3, r0
 80030e0:	461a      	mov	r2, r3
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	4413      	add	r3, r2
 80030e6:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 80030e8:	88fb      	ldrh	r3, [r7, #6]
 80030ea:	b2d8      	uxtb	r0, r3
 80030ec:	7afb      	ldrb	r3, [r7, #11]
 80030ee:	b21b      	sxth	r3, r3
 80030f0:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 80030f4:	b21b      	sxth	r3, r3
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	461a      	mov	r2, r3
 80030fa:	2127      	movs	r1, #39	@ 0x27
 80030fc:	f000 fad4 	bl	80036a8 <CODEC_IO_Write>
 8003100:	4603      	mov	r3, r0
 8003102:	461a      	mov	r2, r3
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	4413      	add	r3, r2
 8003108:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Input volume */
  if (inputEnabled != 0)
 800310a:	4b33      	ldr	r3, [pc, #204]	@ (80031d8 <wm8994_SetVolume+0x244>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d059      	beq.n	80031c6 <wm8994_SetVolume+0x232>
  {
    convertedvol = VOLUME_IN_CONVERT(Volume);
 8003112:	797b      	ldrb	r3, [r7, #5]
 8003114:	2b63      	cmp	r3, #99	@ 0x63
 8003116:	d80c      	bhi.n	8003132 <wm8994_SetVolume+0x19e>
 8003118:	797a      	ldrb	r2, [r7, #5]
 800311a:	4613      	mov	r3, r2
 800311c:	011b      	lsls	r3, r3, #4
 800311e:	1a9b      	subs	r3, r3, r2
 8003120:	011b      	lsls	r3, r3, #4
 8003122:	4a2b      	ldr	r2, [pc, #172]	@ (80031d0 <wm8994_SetVolume+0x23c>)
 8003124:	fb82 1203 	smull	r1, r2, r2, r3
 8003128:	1152      	asrs	r2, r2, #5
 800312a:	17db      	asrs	r3, r3, #31
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	b2db      	uxtb	r3, r3
 8003130:	e000      	b.n	8003134 <wm8994_SetVolume+0x1a0>
 8003132:	23ef      	movs	r3, #239	@ 0xef
 8003134:	72fb      	strb	r3, [r7, #11]

    /* Left AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 8003136:	88fb      	ldrh	r3, [r7, #6]
 8003138:	b2d8      	uxtb	r0, r3
 800313a:	7afb      	ldrb	r3, [r7, #11]
 800313c:	b21b      	sxth	r3, r3
 800313e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003142:	b21b      	sxth	r3, r3
 8003144:	b29b      	uxth	r3, r3
 8003146:	461a      	mov	r2, r3
 8003148:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800314c:	f000 faac 	bl	80036a8 <CODEC_IO_Write>
 8003150:	4603      	mov	r3, r0
 8003152:	461a      	mov	r2, r3
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	4413      	add	r3, r2
 8003158:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x401, convertedvol | 0x100);
 800315a:	88fb      	ldrh	r3, [r7, #6]
 800315c:	b2d8      	uxtb	r0, r3
 800315e:	7afb      	ldrb	r3, [r7, #11]
 8003160:	b21b      	sxth	r3, r3
 8003162:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003166:	b21b      	sxth	r3, r3
 8003168:	b29b      	uxth	r3, r3
 800316a:	461a      	mov	r2, r3
 800316c:	f240 4101 	movw	r1, #1025	@ 0x401
 8003170:	f000 fa9a 	bl	80036a8 <CODEC_IO_Write>
 8003174:	4603      	mov	r3, r0
 8003176:	461a      	mov	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	4413      	add	r3, r2
 800317c:	60fb      	str	r3, [r7, #12]

    /* Left AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x404, convertedvol | 0x100);
 800317e:	88fb      	ldrh	r3, [r7, #6]
 8003180:	b2d8      	uxtb	r0, r3
 8003182:	7afb      	ldrb	r3, [r7, #11]
 8003184:	b21b      	sxth	r3, r3
 8003186:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800318a:	b21b      	sxth	r3, r3
 800318c:	b29b      	uxth	r3, r3
 800318e:	461a      	mov	r2, r3
 8003190:	f240 4104 	movw	r1, #1028	@ 0x404
 8003194:	f000 fa88 	bl	80036a8 <CODEC_IO_Write>
 8003198:	4603      	mov	r3, r0
 800319a:	461a      	mov	r2, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	4413      	add	r3, r2
 80031a0:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x405, convertedvol | 0x100);
 80031a2:	88fb      	ldrh	r3, [r7, #6]
 80031a4:	b2d8      	uxtb	r0, r3
 80031a6:	7afb      	ldrb	r3, [r7, #11]
 80031a8:	b21b      	sxth	r3, r3
 80031aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031ae:	b21b      	sxth	r3, r3
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	461a      	mov	r2, r3
 80031b4:	f240 4105 	movw	r1, #1029	@ 0x405
 80031b8:	f000 fa76 	bl	80036a8 <CODEC_IO_Write>
 80031bc:	4603      	mov	r3, r0
 80031be:	461a      	mov	r2, r3
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	4413      	add	r3, r2
 80031c4:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 80031c6:	68fb      	ldr	r3, [r7, #12]
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3710      	adds	r7, #16
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	51eb851f 	.word	0x51eb851f
 80031d4:	200006f0 	.word	0x200006f0
 80031d8:	200006f4 	.word	0x200006f4

080031dc <wm8994_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	4603      	mov	r3, r0
 80031e4:	6039      	str	r1, [r7, #0]
 80031e6:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80031e8:	2300      	movs	r3, #0
 80031ea:	60fb      	str	r3, [r7, #12]
  
  if (outputEnabled != 0)
 80031ec:	4b21      	ldr	r3, [pc, #132]	@ (8003274 <wm8994_SetMute+0x98>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d039      	beq.n	8003268 <wm8994_SetMute+0x8c>
  {
    /* Set the Mute mode */
    if(Cmd == AUDIO_MUTE_ON)
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d11c      	bne.n	8003234 <wm8994_SetMute+0x58>
    {
      /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 80031fa:	88fb      	ldrh	r3, [r7, #6]
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003202:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8003206:	4618      	mov	r0, r3
 8003208:	f000 fa4e 	bl	80036a8 <CODEC_IO_Write>
 800320c:	4603      	mov	r3, r0
 800320e:	461a      	mov	r2, r3
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	4413      	add	r3, r2
 8003214:	60fb      	str	r3, [r7, #12]

      /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 8003216:	88fb      	ldrh	r3, [r7, #6]
 8003218:	b2db      	uxtb	r3, r3
 800321a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800321e:	f240 4122 	movw	r1, #1058	@ 0x422
 8003222:	4618      	mov	r0, r3
 8003224:	f000 fa40 	bl	80036a8 <CODEC_IO_Write>
 8003228:	4603      	mov	r3, r0
 800322a:	461a      	mov	r2, r3
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	4413      	add	r3, r2
 8003230:	60fb      	str	r3, [r7, #12]
 8003232:	e019      	b.n	8003268 <wm8994_SetMute+0x8c>
    }
    else /* AUDIO_MUTE_OFF Disable the Mute */
    {
      /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 8003234:	88fb      	ldrh	r3, [r7, #6]
 8003236:	b2db      	uxtb	r3, r3
 8003238:	2210      	movs	r2, #16
 800323a:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 800323e:	4618      	mov	r0, r3
 8003240:	f000 fa32 	bl	80036a8 <CODEC_IO_Write>
 8003244:	4603      	mov	r3, r0
 8003246:	461a      	mov	r2, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	4413      	add	r3, r2
 800324c:	60fb      	str	r3, [r7, #12]

      /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 800324e:	88fb      	ldrh	r3, [r7, #6]
 8003250:	b2db      	uxtb	r3, r3
 8003252:	2210      	movs	r2, #16
 8003254:	f240 4122 	movw	r1, #1058	@ 0x422
 8003258:	4618      	mov	r0, r3
 800325a:	f000 fa25 	bl	80036a8 <CODEC_IO_Write>
 800325e:	4603      	mov	r3, r0
 8003260:	461a      	mov	r2, r3
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	4413      	add	r3, r2
 8003266:	60fb      	str	r3, [r7, #12]
    }
  }
  return counter;
 8003268:	68fb      	ldr	r3, [r7, #12]
}
 800326a:	4618      	mov	r0, r3
 800326c:	3710      	adds	r7, #16
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	200006f0 	.word	0x200006f0

08003278 <wm8994_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	4603      	mov	r3, r0
 8003280:	460a      	mov	r2, r1
 8003282:	80fb      	strh	r3, [r7, #6]
 8003284:	4613      	mov	r3, r2
 8003286:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 8003288:	2300      	movs	r3, #0
 800328a:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 800328c:	797b      	ldrb	r3, [r7, #5]
 800328e:	2b03      	cmp	r3, #3
 8003290:	f000 808c 	beq.w	80033ac <wm8994_SetOutputMode+0x134>
 8003294:	2b03      	cmp	r3, #3
 8003296:	f300 80cb 	bgt.w	8003430 <wm8994_SetOutputMode+0x1b8>
 800329a:	2b01      	cmp	r3, #1
 800329c:	d002      	beq.n	80032a4 <wm8994_SetOutputMode+0x2c>
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d042      	beq.n	8003328 <wm8994_SetOutputMode+0xb0>
 80032a2:	e0c5      	b.n	8003430 <wm8994_SetOutputMode+0x1b8>
  {
  case OUTPUT_DEVICE_SPEAKER:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    Disable DAC2 (Left), Disable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 80032a4:	88fb      	ldrh	r3, [r7, #6]
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	f640 420c 	movw	r2, #3084	@ 0xc0c
 80032ac:	2105      	movs	r1, #5
 80032ae:	4618      	mov	r0, r3
 80032b0:	f000 f9fa 	bl	80036a8 <CODEC_IO_Write>
 80032b4:	4603      	mov	r3, r0
 80032b6:	461a      	mov	r2, r3
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	4413      	add	r3, r2
 80032bc:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 80032be:	88fb      	ldrh	r3, [r7, #6]
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	2200      	movs	r2, #0
 80032c4:	f240 6101 	movw	r1, #1537	@ 0x601
 80032c8:	4618      	mov	r0, r3
 80032ca:	f000 f9ed 	bl	80036a8 <CODEC_IO_Write>
 80032ce:	4603      	mov	r3, r0
 80032d0:	461a      	mov	r2, r3
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	4413      	add	r3, r2
 80032d6:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 80032d8:	88fb      	ldrh	r3, [r7, #6]
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	2200      	movs	r2, #0
 80032de:	f240 6102 	movw	r1, #1538	@ 0x602
 80032e2:	4618      	mov	r0, r3
 80032e4:	f000 f9e0 	bl	80036a8 <CODEC_IO_Write>
 80032e8:	4603      	mov	r3, r0
 80032ea:	461a      	mov	r2, r3
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	4413      	add	r3, r2
 80032f0:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 80032f2:	88fb      	ldrh	r3, [r7, #6]
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	2202      	movs	r2, #2
 80032f8:	f240 6104 	movw	r1, #1540	@ 0x604
 80032fc:	4618      	mov	r0, r3
 80032fe:	f000 f9d3 	bl	80036a8 <CODEC_IO_Write>
 8003302:	4603      	mov	r3, r0
 8003304:	461a      	mov	r2, r3
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	4413      	add	r3, r2
 800330a:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 800330c:	88fb      	ldrh	r3, [r7, #6]
 800330e:	b2db      	uxtb	r3, r3
 8003310:	2202      	movs	r2, #2
 8003312:	f240 6105 	movw	r1, #1541	@ 0x605
 8003316:	4618      	mov	r0, r3
 8003318:	f000 f9c6 	bl	80036a8 <CODEC_IO_Write>
 800331c:	4603      	mov	r3, r0
 800331e:	461a      	mov	r2, r3
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	4413      	add	r3, r2
 8003324:	60fb      	str	r3, [r7, #12]
    break;
 8003326:	e0c5      	b.n	80034b4 <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8003328:	88fb      	ldrh	r3, [r7, #6]
 800332a:	b2db      	uxtb	r3, r3
 800332c:	f240 3203 	movw	r2, #771	@ 0x303
 8003330:	2105      	movs	r1, #5
 8003332:	4618      	mov	r0, r3
 8003334:	f000 f9b8 	bl	80036a8 <CODEC_IO_Write>
 8003338:	4603      	mov	r3, r0
 800333a:	461a      	mov	r2, r3
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	4413      	add	r3, r2
 8003340:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8003342:	88fb      	ldrh	r3, [r7, #6]
 8003344:	b2db      	uxtb	r3, r3
 8003346:	2201      	movs	r2, #1
 8003348:	f240 6101 	movw	r1, #1537	@ 0x601
 800334c:	4618      	mov	r0, r3
 800334e:	f000 f9ab 	bl	80036a8 <CODEC_IO_Write>
 8003352:	4603      	mov	r3, r0
 8003354:	461a      	mov	r2, r3
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	4413      	add	r3, r2
 800335a:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 800335c:	88fb      	ldrh	r3, [r7, #6]
 800335e:	b2db      	uxtb	r3, r3
 8003360:	2201      	movs	r2, #1
 8003362:	f240 6102 	movw	r1, #1538	@ 0x602
 8003366:	4618      	mov	r0, r3
 8003368:	f000 f99e 	bl	80036a8 <CODEC_IO_Write>
 800336c:	4603      	mov	r3, r0
 800336e:	461a      	mov	r2, r3
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	4413      	add	r3, r2
 8003374:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8003376:	88fb      	ldrh	r3, [r7, #6]
 8003378:	b2db      	uxtb	r3, r3
 800337a:	2200      	movs	r2, #0
 800337c:	f240 6104 	movw	r1, #1540	@ 0x604
 8003380:	4618      	mov	r0, r3
 8003382:	f000 f991 	bl	80036a8 <CODEC_IO_Write>
 8003386:	4603      	mov	r3, r0
 8003388:	461a      	mov	r2, r3
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	4413      	add	r3, r2
 800338e:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8003390:	88fb      	ldrh	r3, [r7, #6]
 8003392:	b2db      	uxtb	r3, r3
 8003394:	2200      	movs	r2, #0
 8003396:	f240 6105 	movw	r1, #1541	@ 0x605
 800339a:	4618      	mov	r0, r3
 800339c:	f000 f984 	bl	80036a8 <CODEC_IO_Write>
 80033a0:	4603      	mov	r3, r0
 80033a2:	461a      	mov	r2, r3
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	4413      	add	r3, r2
 80033a8:	60fb      	str	r3, [r7, #12]
    break;
 80033aa:	e083      	b.n	80034b4 <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_BOTH:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    also Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 80033ac:	88fb      	ldrh	r3, [r7, #6]
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	f640 720f 	movw	r2, #3855	@ 0xf0f
 80033b4:	2105      	movs	r1, #5
 80033b6:	4618      	mov	r0, r3
 80033b8:	f000 f976 	bl	80036a8 <CODEC_IO_Write>
 80033bc:	4603      	mov	r3, r0
 80033be:	461a      	mov	r2, r3
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	4413      	add	r3, r2
 80033c4:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80033c6:	88fb      	ldrh	r3, [r7, #6]
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	2201      	movs	r2, #1
 80033cc:	f240 6101 	movw	r1, #1537	@ 0x601
 80033d0:	4618      	mov	r0, r3
 80033d2:	f000 f969 	bl	80036a8 <CODEC_IO_Write>
 80033d6:	4603      	mov	r3, r0
 80033d8:	461a      	mov	r2, r3
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	4413      	add	r3, r2
 80033de:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80033e0:	88fb      	ldrh	r3, [r7, #6]
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	2201      	movs	r2, #1
 80033e6:	f240 6102 	movw	r1, #1538	@ 0x602
 80033ea:	4618      	mov	r0, r3
 80033ec:	f000 f95c 	bl	80036a8 <CODEC_IO_Write>
 80033f0:	4603      	mov	r3, r0
 80033f2:	461a      	mov	r2, r3
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	4413      	add	r3, r2
 80033f8:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 80033fa:	88fb      	ldrh	r3, [r7, #6]
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	2202      	movs	r2, #2
 8003400:	f240 6104 	movw	r1, #1540	@ 0x604
 8003404:	4618      	mov	r0, r3
 8003406:	f000 f94f 	bl	80036a8 <CODEC_IO_Write>
 800340a:	4603      	mov	r3, r0
 800340c:	461a      	mov	r2, r3
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	4413      	add	r3, r2
 8003412:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8003414:	88fb      	ldrh	r3, [r7, #6]
 8003416:	b2db      	uxtb	r3, r3
 8003418:	2202      	movs	r2, #2
 800341a:	f240 6105 	movw	r1, #1541	@ 0x605
 800341e:	4618      	mov	r0, r3
 8003420:	f000 f942 	bl	80036a8 <CODEC_IO_Write>
 8003424:	4603      	mov	r3, r0
 8003426:	461a      	mov	r2, r3
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	4413      	add	r3, r2
 800342c:	60fb      	str	r3, [r7, #12]
    break;
 800342e:	e041      	b.n	80034b4 <wm8994_SetOutputMode+0x23c>
    
  default:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8003430:	88fb      	ldrh	r3, [r7, #6]
 8003432:	b2db      	uxtb	r3, r3
 8003434:	f240 3203 	movw	r2, #771	@ 0x303
 8003438:	2105      	movs	r1, #5
 800343a:	4618      	mov	r0, r3
 800343c:	f000 f934 	bl	80036a8 <CODEC_IO_Write>
 8003440:	4603      	mov	r3, r0
 8003442:	461a      	mov	r2, r3
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	4413      	add	r3, r2
 8003448:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800344a:	88fb      	ldrh	r3, [r7, #6]
 800344c:	b2db      	uxtb	r3, r3
 800344e:	2201      	movs	r2, #1
 8003450:	f240 6101 	movw	r1, #1537	@ 0x601
 8003454:	4618      	mov	r0, r3
 8003456:	f000 f927 	bl	80036a8 <CODEC_IO_Write>
 800345a:	4603      	mov	r3, r0
 800345c:	461a      	mov	r2, r3
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	4413      	add	r3, r2
 8003462:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8003464:	88fb      	ldrh	r3, [r7, #6]
 8003466:	b2db      	uxtb	r3, r3
 8003468:	2201      	movs	r2, #1
 800346a:	f240 6102 	movw	r1, #1538	@ 0x602
 800346e:	4618      	mov	r0, r3
 8003470:	f000 f91a 	bl	80036a8 <CODEC_IO_Write>
 8003474:	4603      	mov	r3, r0
 8003476:	461a      	mov	r2, r3
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	4413      	add	r3, r2
 800347c:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 800347e:	88fb      	ldrh	r3, [r7, #6]
 8003480:	b2db      	uxtb	r3, r3
 8003482:	2200      	movs	r2, #0
 8003484:	f240 6104 	movw	r1, #1540	@ 0x604
 8003488:	4618      	mov	r0, r3
 800348a:	f000 f90d 	bl	80036a8 <CODEC_IO_Write>
 800348e:	4603      	mov	r3, r0
 8003490:	461a      	mov	r2, r3
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	4413      	add	r3, r2
 8003496:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8003498:	88fb      	ldrh	r3, [r7, #6]
 800349a:	b2db      	uxtb	r3, r3
 800349c:	2200      	movs	r2, #0
 800349e:	f240 6105 	movw	r1, #1541	@ 0x605
 80034a2:	4618      	mov	r0, r3
 80034a4:	f000 f900 	bl	80036a8 <CODEC_IO_Write>
 80034a8:	4603      	mov	r3, r0
 80034aa:	461a      	mov	r2, r3
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	4413      	add	r3, r2
 80034b0:	60fb      	str	r3, [r7, #12]
    break;    
 80034b2:	bf00      	nop
  }  
  return counter;
 80034b4:	68fb      	ldr	r3, [r7, #12]
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3710      	adds	r7, #16
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
	...

080034c0 <wm8994_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	4603      	mov	r3, r0
 80034c8:	6039      	str	r1, [r7, #0]
 80034ca:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80034cc:	2300      	movs	r3, #0
 80034ce:	60fb      	str	r3, [r7, #12]
 
  /*  Clock Configurations */
  switch (AudioFreq)
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	4a64      	ldr	r2, [pc, #400]	@ (8003664 <wm8994_SetFrequency+0x1a4>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d079      	beq.n	80035cc <wm8994_SetFrequency+0x10c>
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	4a62      	ldr	r2, [pc, #392]	@ (8003664 <wm8994_SetFrequency+0x1a4>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	f200 80ad 	bhi.w	800363c <wm8994_SetFrequency+0x17c>
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d061      	beq.n	80035b0 <wm8994_SetFrequency+0xf0>
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 80034f2:	4293      	cmp	r3, r2
 80034f4:	f200 80a2 	bhi.w	800363c <wm8994_SetFrequency+0x17c>
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	f64a 4244 	movw	r2, #44100	@ 0xac44
 80034fe:	4293      	cmp	r3, r2
 8003500:	f000 808e 	beq.w	8003620 <wm8994_SetFrequency+0x160>
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	f64a 4244 	movw	r2, #44100	@ 0xac44
 800350a:	4293      	cmp	r3, r2
 800350c:	f200 8096 	bhi.w	800363c <wm8994_SetFrequency+0x17c>
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8003516:	d03d      	beq.n	8003594 <wm8994_SetFrequency+0xd4>
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 800351e:	f200 808d 	bhi.w	800363c <wm8994_SetFrequency+0x17c>
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	f245 6222 	movw	r2, #22050	@ 0x5622
 8003528:	4293      	cmp	r3, r2
 800352a:	d06b      	beq.n	8003604 <wm8994_SetFrequency+0x144>
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	f245 6222 	movw	r2, #22050	@ 0x5622
 8003532:	4293      	cmp	r3, r2
 8003534:	f200 8082 	bhi.w	800363c <wm8994_SetFrequency+0x17c>
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 800353e:	d01b      	beq.n	8003578 <wm8994_SetFrequency+0xb8>
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8003546:	d879      	bhi.n	800363c <wm8994_SetFrequency+0x17c>
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 800354e:	d005      	beq.n	800355c <wm8994_SetFrequency+0x9c>
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	f642 3211 	movw	r2, #11025	@ 0x2b11
 8003556:	4293      	cmp	r3, r2
 8003558:	d046      	beq.n	80035e8 <wm8994_SetFrequency+0x128>
 800355a:	e06f      	b.n	800363c <wm8994_SetFrequency+0x17c>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 800355c:	88fb      	ldrh	r3, [r7, #6]
 800355e:	b2db      	uxtb	r3, r3
 8003560:	2203      	movs	r2, #3
 8003562:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003566:	4618      	mov	r0, r3
 8003568:	f000 f89e 	bl	80036a8 <CODEC_IO_Write>
 800356c:	4603      	mov	r3, r0
 800356e:	461a      	mov	r2, r3
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	4413      	add	r3, r2
 8003574:	60fb      	str	r3, [r7, #12]
    break;
 8003576:	e06f      	b.n	8003658 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 8003578:	88fb      	ldrh	r3, [r7, #6]
 800357a:	b2db      	uxtb	r3, r3
 800357c:	2233      	movs	r2, #51	@ 0x33
 800357e:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003582:	4618      	mov	r0, r3
 8003584:	f000 f890 	bl	80036a8 <CODEC_IO_Write>
 8003588:	4603      	mov	r3, r0
 800358a:	461a      	mov	r2, r3
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	4413      	add	r3, r2
 8003590:	60fb      	str	r3, [r7, #12]
    break;
 8003592:	e061      	b.n	8003658 <wm8994_SetFrequency+0x198>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 8003594:	88fb      	ldrh	r3, [r7, #6]
 8003596:	b2db      	uxtb	r3, r3
 8003598:	2263      	movs	r2, #99	@ 0x63
 800359a:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800359e:	4618      	mov	r0, r3
 80035a0:	f000 f882 	bl	80036a8 <CODEC_IO_Write>
 80035a4:	4603      	mov	r3, r0
 80035a6:	461a      	mov	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	4413      	add	r3, r2
 80035ac:	60fb      	str	r3, [r7, #12]
    break;
 80035ae:	e053      	b.n	8003658 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 80035b0:	88fb      	ldrh	r3, [r7, #6]
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	2283      	movs	r2, #131	@ 0x83
 80035b6:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80035ba:	4618      	mov	r0, r3
 80035bc:	f000 f874 	bl	80036a8 <CODEC_IO_Write>
 80035c0:	4603      	mov	r3, r0
 80035c2:	461a      	mov	r2, r3
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	4413      	add	r3, r2
 80035c8:	60fb      	str	r3, [r7, #12]
    break;
 80035ca:	e045      	b.n	8003658 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 80035cc:	88fb      	ldrh	r3, [r7, #6]
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	22a3      	movs	r2, #163	@ 0xa3
 80035d2:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80035d6:	4618      	mov	r0, r3
 80035d8:	f000 f866 	bl	80036a8 <CODEC_IO_Write>
 80035dc:	4603      	mov	r3, r0
 80035de:	461a      	mov	r2, r3
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	4413      	add	r3, r2
 80035e4:	60fb      	str	r3, [r7, #12]
    break;
 80035e6:	e037      	b.n	8003658 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 80035e8:	88fb      	ldrh	r3, [r7, #6]
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	2213      	movs	r2, #19
 80035ee:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80035f2:	4618      	mov	r0, r3
 80035f4:	f000 f858 	bl	80036a8 <CODEC_IO_Write>
 80035f8:	4603      	mov	r3, r0
 80035fa:	461a      	mov	r2, r3
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	4413      	add	r3, r2
 8003600:	60fb      	str	r3, [r7, #12]
    break;
 8003602:	e029      	b.n	8003658 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8003604:	88fb      	ldrh	r3, [r7, #6]
 8003606:	b2db      	uxtb	r3, r3
 8003608:	2243      	movs	r2, #67	@ 0x43
 800360a:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800360e:	4618      	mov	r0, r3
 8003610:	f000 f84a 	bl	80036a8 <CODEC_IO_Write>
 8003614:	4603      	mov	r3, r0
 8003616:	461a      	mov	r2, r3
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	4413      	add	r3, r2
 800361c:	60fb      	str	r3, [r7, #12]
    break;
 800361e:	e01b      	b.n	8003658 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 8003620:	88fb      	ldrh	r3, [r7, #6]
 8003622:	b2db      	uxtb	r3, r3
 8003624:	2273      	movs	r2, #115	@ 0x73
 8003626:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800362a:	4618      	mov	r0, r3
 800362c:	f000 f83c 	bl	80036a8 <CODEC_IO_Write>
 8003630:	4603      	mov	r3, r0
 8003632:	461a      	mov	r2, r3
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	4413      	add	r3, r2
 8003638:	60fb      	str	r3, [r7, #12]
    break; 
 800363a:	e00d      	b.n	8003658 <wm8994_SetFrequency+0x198>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 800363c:	88fb      	ldrh	r3, [r7, #6]
 800363e:	b2db      	uxtb	r3, r3
 8003640:	2283      	movs	r2, #131	@ 0x83
 8003642:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003646:	4618      	mov	r0, r3
 8003648:	f000 f82e 	bl	80036a8 <CODEC_IO_Write>
 800364c:	4603      	mov	r3, r0
 800364e:	461a      	mov	r2, r3
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	4413      	add	r3, r2
 8003654:	60fb      	str	r3, [r7, #12]
    break; 
 8003656:	bf00      	nop
  }
  return counter;
 8003658:	68fb      	ldr	r3, [r7, #12]
}
 800365a:	4618      	mov	r0, r3
 800365c:	3710      	adds	r7, #16
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	00017700 	.word	0x00017700

08003668 <wm8994_Reset>:
  * @brief Resets wm8994 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Reset(uint16_t DeviceAddr)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b084      	sub	sp, #16
 800366c:	af00      	add	r7, sp, #0
 800366e:	4603      	mov	r3, r0
 8003670:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8003672:	2300      	movs	r3, #0
 8003674:	60fb      	str	r3, [r7, #12]
  
  /* Reset Codec by writing in 0x0000 address register */
  counter = CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8003676:	88fb      	ldrh	r3, [r7, #6]
 8003678:	b2db      	uxtb	r3, r3
 800367a:	2200      	movs	r2, #0
 800367c:	2100      	movs	r1, #0
 800367e:	4618      	mov	r0, r3
 8003680:	f000 f812 	bl	80036a8 <CODEC_IO_Write>
 8003684:	4603      	mov	r3, r0
 8003686:	60fb      	str	r3, [r7, #12]
  outputEnabled = 0;
 8003688:	4b05      	ldr	r3, [pc, #20]	@ (80036a0 <wm8994_Reset+0x38>)
 800368a:	2200      	movs	r2, #0
 800368c:	601a      	str	r2, [r3, #0]
  inputEnabled=0;
 800368e:	4b05      	ldr	r3, [pc, #20]	@ (80036a4 <wm8994_Reset+0x3c>)
 8003690:	2200      	movs	r2, #0
 8003692:	601a      	str	r2, [r3, #0]

  return counter;
 8003694:	68fb      	ldr	r3, [r7, #12]
}
 8003696:	4618      	mov	r0, r3
 8003698:	3710      	adds	r7, #16
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	200006f0 	.word	0x200006f0
 80036a4:	200006f4 	.word	0x200006f4

080036a8 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	4603      	mov	r3, r0
 80036b0:	71fb      	strb	r3, [r7, #7]
 80036b2:	460b      	mov	r3, r1
 80036b4:	80bb      	strh	r3, [r7, #4]
 80036b6:	4613      	mov	r3, r2
 80036b8:	807b      	strh	r3, [r7, #2]
  uint32_t result = 0;
 80036ba:	2300      	movs	r3, #0
 80036bc:	60fb      	str	r3, [r7, #12]
  
 AUDIO_IO_Write(Addr, Reg, Value);
 80036be:	887a      	ldrh	r2, [r7, #2]
 80036c0:	88b9      	ldrh	r1, [r7, #4]
 80036c2:	79fb      	ldrb	r3, [r7, #7]
 80036c4:	4618      	mov	r0, r3
 80036c6:	f000 f96f 	bl	80039a8 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	b2db      	uxtb	r3, r3
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3710      	adds	r7, #16
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
	...

080036d8 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b08c      	sub	sp, #48	@ 0x30
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	4a51      	ldr	r2, [pc, #324]	@ (8003828 <I2Cx_MspInit+0x150>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d14d      	bne.n	8003784 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80036e8:	4b50      	ldr	r3, [pc, #320]	@ (800382c <I2Cx_MspInit+0x154>)
 80036ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ec:	4a4f      	ldr	r2, [pc, #316]	@ (800382c <I2Cx_MspInit+0x154>)
 80036ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80036f4:	4b4d      	ldr	r3, [pc, #308]	@ (800382c <I2Cx_MspInit+0x154>)
 80036f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036fc:	61bb      	str	r3, [r7, #24]
 80036fe:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8003700:	2380      	movs	r3, #128	@ 0x80
 8003702:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8003704:	2312      	movs	r3, #18
 8003706:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8003708:	2300      	movs	r3, #0
 800370a:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800370c:	2302      	movs	r3, #2
 800370e:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8003710:	2304      	movs	r3, #4
 8003712:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003714:	f107 031c 	add.w	r3, r7, #28
 8003718:	4619      	mov	r1, r3
 800371a:	4845      	ldr	r0, [pc, #276]	@ (8003830 <I2Cx_MspInit+0x158>)
 800371c:	f001 fb48 	bl	8004db0 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8003720:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003724:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003726:	f107 031c 	add.w	r3, r7, #28
 800372a:	4619      	mov	r1, r3
 800372c:	4840      	ldr	r0, [pc, #256]	@ (8003830 <I2Cx_MspInit+0x158>)
 800372e:	f001 fb3f 	bl	8004db0 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8003732:	4b3e      	ldr	r3, [pc, #248]	@ (800382c <I2Cx_MspInit+0x154>)
 8003734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003736:	4a3d      	ldr	r2, [pc, #244]	@ (800382c <I2Cx_MspInit+0x154>)
 8003738:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800373c:	6413      	str	r3, [r2, #64]	@ 0x40
 800373e:	4b3b      	ldr	r3, [pc, #236]	@ (800382c <I2Cx_MspInit+0x154>)
 8003740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003742:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003746:	617b      	str	r3, [r7, #20]
 8003748:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 800374a:	4b38      	ldr	r3, [pc, #224]	@ (800382c <I2Cx_MspInit+0x154>)
 800374c:	6a1b      	ldr	r3, [r3, #32]
 800374e:	4a37      	ldr	r2, [pc, #220]	@ (800382c <I2Cx_MspInit+0x154>)
 8003750:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003754:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8003756:	4b35      	ldr	r3, [pc, #212]	@ (800382c <I2Cx_MspInit+0x154>)
 8003758:	6a1b      	ldr	r3, [r3, #32]
 800375a:	4a34      	ldr	r2, [pc, #208]	@ (800382c <I2Cx_MspInit+0x154>)
 800375c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003760:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8003762:	2200      	movs	r2, #0
 8003764:	210f      	movs	r1, #15
 8003766:	2048      	movs	r0, #72	@ 0x48
 8003768:	f000 fe77 	bl	800445a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 800376c:	2048      	movs	r0, #72	@ 0x48
 800376e:	f000 fe90 	bl	8004492 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8003772:	2200      	movs	r2, #0
 8003774:	210f      	movs	r1, #15
 8003776:	2049      	movs	r0, #73	@ 0x49
 8003778:	f000 fe6f 	bl	800445a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 800377c:	2049      	movs	r0, #73	@ 0x49
 800377e:	f000 fe88 	bl	8004492 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8003782:	e04d      	b.n	8003820 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8003784:	4b29      	ldr	r3, [pc, #164]	@ (800382c <I2Cx_MspInit+0x154>)
 8003786:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003788:	4a28      	ldr	r2, [pc, #160]	@ (800382c <I2Cx_MspInit+0x154>)
 800378a:	f043 0302 	orr.w	r3, r3, #2
 800378e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003790:	4b26      	ldr	r3, [pc, #152]	@ (800382c <I2Cx_MspInit+0x154>)
 8003792:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003794:	f003 0302 	and.w	r3, r3, #2
 8003798:	613b      	str	r3, [r7, #16]
 800379a:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 800379c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80037a0:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80037a2:	2312      	movs	r3, #18
 80037a4:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80037a6:	2300      	movs	r3, #0
 80037a8:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80037aa:	2302      	movs	r3, #2
 80037ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 80037ae:	2304      	movs	r3, #4
 80037b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80037b2:	f107 031c 	add.w	r3, r7, #28
 80037b6:	4619      	mov	r1, r3
 80037b8:	481e      	ldr	r0, [pc, #120]	@ (8003834 <I2Cx_MspInit+0x15c>)
 80037ba:	f001 faf9 	bl	8004db0 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 80037be:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80037c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80037c4:	f107 031c 	add.w	r3, r7, #28
 80037c8:	4619      	mov	r1, r3
 80037ca:	481a      	ldr	r0, [pc, #104]	@ (8003834 <I2Cx_MspInit+0x15c>)
 80037cc:	f001 faf0 	bl	8004db0 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 80037d0:	4b16      	ldr	r3, [pc, #88]	@ (800382c <I2Cx_MspInit+0x154>)
 80037d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037d4:	4a15      	ldr	r2, [pc, #84]	@ (800382c <I2Cx_MspInit+0x154>)
 80037d6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80037da:	6413      	str	r3, [r2, #64]	@ 0x40
 80037dc:	4b13      	ldr	r3, [pc, #76]	@ (800382c <I2Cx_MspInit+0x154>)
 80037de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037e4:	60fb      	str	r3, [r7, #12]
 80037e6:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 80037e8:	4b10      	ldr	r3, [pc, #64]	@ (800382c <I2Cx_MspInit+0x154>)
 80037ea:	6a1b      	ldr	r3, [r3, #32]
 80037ec:	4a0f      	ldr	r2, [pc, #60]	@ (800382c <I2Cx_MspInit+0x154>)
 80037ee:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80037f2:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 80037f4:	4b0d      	ldr	r3, [pc, #52]	@ (800382c <I2Cx_MspInit+0x154>)
 80037f6:	6a1b      	ldr	r3, [r3, #32]
 80037f8:	4a0c      	ldr	r2, [pc, #48]	@ (800382c <I2Cx_MspInit+0x154>)
 80037fa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80037fe:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8003800:	2200      	movs	r2, #0
 8003802:	210f      	movs	r1, #15
 8003804:	201f      	movs	r0, #31
 8003806:	f000 fe28 	bl	800445a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 800380a:	201f      	movs	r0, #31
 800380c:	f000 fe41 	bl	8004492 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8003810:	2200      	movs	r2, #0
 8003812:	210f      	movs	r1, #15
 8003814:	2020      	movs	r0, #32
 8003816:	f000 fe20 	bl	800445a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 800381a:	2020      	movs	r0, #32
 800381c:	f000 fe39 	bl	8004492 <HAL_NVIC_EnableIRQ>
}
 8003820:	bf00      	nop
 8003822:	3730      	adds	r7, #48	@ 0x30
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}
 8003828:	200006f8 	.word	0x200006f8
 800382c:	40023800 	.word	0x40023800
 8003830:	40021c00 	.word	0x40021c00
 8003834:	40020400 	.word	0x40020400

08003838 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f002 f8df 	bl	8005a04 <HAL_I2C_GetState>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d125      	bne.n	8003898 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	4a14      	ldr	r2, [pc, #80]	@ (80038a0 <I2Cx_Init+0x68>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d103      	bne.n	800385c <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	4a13      	ldr	r2, [pc, #76]	@ (80038a4 <I2Cx_Init+0x6c>)
 8003858:	601a      	str	r2, [r3, #0]
 800385a:	e002      	b.n	8003862 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	4a12      	ldr	r2, [pc, #72]	@ (80038a8 <I2Cx_Init+0x70>)
 8003860:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a11      	ldr	r2, [pc, #68]	@ (80038ac <I2Cx_Init+0x74>)
 8003866:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2201      	movs	r2, #1
 8003872:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f7ff ff23 	bl	80036d8 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f001 fda8 	bl	80053e8 <HAL_I2C_Init>
  }
}
 8003898:	bf00      	nop
 800389a:	3708      	adds	r7, #8
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	200006f8 	.word	0x200006f8
 80038a4:	40005c00 	.word	0x40005c00
 80038a8:	40005400 	.word	0x40005400
 80038ac:	40912732 	.word	0x40912732

080038b0 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b08a      	sub	sp, #40	@ 0x28
 80038b4:	af04      	add	r7, sp, #16
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	4608      	mov	r0, r1
 80038ba:	4611      	mov	r1, r2
 80038bc:	461a      	mov	r2, r3
 80038be:	4603      	mov	r3, r0
 80038c0:	72fb      	strb	r3, [r7, #11]
 80038c2:	460b      	mov	r3, r1
 80038c4:	813b      	strh	r3, [r7, #8]
 80038c6:	4613      	mov	r3, r2
 80038c8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80038ca:	2300      	movs	r3, #0
 80038cc:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80038ce:	7afb      	ldrb	r3, [r7, #11]
 80038d0:	b299      	uxth	r1, r3
 80038d2:	88f8      	ldrh	r0, [r7, #6]
 80038d4:	893a      	ldrh	r2, [r7, #8]
 80038d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80038da:	9302      	str	r3, [sp, #8]
 80038dc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80038de:	9301      	str	r3, [sp, #4]
 80038e0:	6a3b      	ldr	r3, [r7, #32]
 80038e2:	9300      	str	r3, [sp, #0]
 80038e4:	4603      	mov	r3, r0
 80038e6:	68f8      	ldr	r0, [r7, #12]
 80038e8:	f001 ff72 	bl	80057d0 <HAL_I2C_Mem_Read>
 80038ec:	4603      	mov	r3, r0
 80038ee:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80038f0:	7dfb      	ldrb	r3, [r7, #23]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d004      	beq.n	8003900 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 80038f6:	7afb      	ldrb	r3, [r7, #11]
 80038f8:	4619      	mov	r1, r3
 80038fa:	68f8      	ldr	r0, [r7, #12]
 80038fc:	f000 f832 	bl	8003964 <I2Cx_Error>
  }
  return status;    
 8003900:	7dfb      	ldrb	r3, [r7, #23]
}
 8003902:	4618      	mov	r0, r3
 8003904:	3718      	adds	r7, #24
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}

0800390a <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 800390a:	b580      	push	{r7, lr}
 800390c:	b08a      	sub	sp, #40	@ 0x28
 800390e:	af04      	add	r7, sp, #16
 8003910:	60f8      	str	r0, [r7, #12]
 8003912:	4608      	mov	r0, r1
 8003914:	4611      	mov	r1, r2
 8003916:	461a      	mov	r2, r3
 8003918:	4603      	mov	r3, r0
 800391a:	72fb      	strb	r3, [r7, #11]
 800391c:	460b      	mov	r3, r1
 800391e:	813b      	strh	r3, [r7, #8]
 8003920:	4613      	mov	r3, r2
 8003922:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003924:	2300      	movs	r3, #0
 8003926:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003928:	7afb      	ldrb	r3, [r7, #11]
 800392a:	b299      	uxth	r1, r3
 800392c:	88f8      	ldrh	r0, [r7, #6]
 800392e:	893a      	ldrh	r2, [r7, #8]
 8003930:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003934:	9302      	str	r3, [sp, #8]
 8003936:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003938:	9301      	str	r3, [sp, #4]
 800393a:	6a3b      	ldr	r3, [r7, #32]
 800393c:	9300      	str	r3, [sp, #0]
 800393e:	4603      	mov	r3, r0
 8003940:	68f8      	ldr	r0, [r7, #12]
 8003942:	f001 fe31 	bl	80055a8 <HAL_I2C_Mem_Write>
 8003946:	4603      	mov	r3, r0
 8003948:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800394a:	7dfb      	ldrb	r3, [r7, #23]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d004      	beq.n	800395a <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8003950:	7afb      	ldrb	r3, [r7, #11]
 8003952:	4619      	mov	r1, r3
 8003954:	68f8      	ldr	r0, [r7, #12]
 8003956:	f000 f805 	bl	8003964 <I2Cx_Error>
  }
  return status;
 800395a:	7dfb      	ldrb	r3, [r7, #23]
}
 800395c:	4618      	mov	r0, r3
 800395e:	3718      	adds	r7, #24
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	460b      	mov	r3, r1
 800396e:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f001 fdd5 	bl	8005520 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f7ff ff5e 	bl	8003838 <I2Cx_Init>
}
 800397c:	bf00      	nop
 800397e:	3708      	adds	r7, #8
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <AUDIO_IO_Init>:
/**
  * @brief  Initializes Audio low level.
  * @retval None
  */
void AUDIO_IO_Init(void) 
{
 8003984:	b580      	push	{r7, lr}
 8003986:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8003988:	4802      	ldr	r0, [pc, #8]	@ (8003994 <AUDIO_IO_Init+0x10>)
 800398a:	f7ff ff55 	bl	8003838 <I2Cx_Init>
}
 800398e:	bf00      	nop
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	200006f8 	.word	0x200006f8

08003998 <AUDIO_IO_DeInit>:
/**
  * @brief  Deinitializes Audio low level.
  * @retval None
  */
void AUDIO_IO_DeInit(void)
{
 8003998:	b480      	push	{r7}
 800399a:	af00      	add	r7, sp, #0
}
 800399c:	bf00      	nop
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr
	...

080039a8 <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b086      	sub	sp, #24
 80039ac:	af02      	add	r7, sp, #8
 80039ae:	4603      	mov	r3, r0
 80039b0:	71fb      	strb	r3, [r7, #7]
 80039b2:	460b      	mov	r3, r1
 80039b4:	80bb      	strh	r3, [r7, #4]
 80039b6:	4613      	mov	r3, r2
 80039b8:	807b      	strh	r3, [r7, #2]
  uint16_t tmp = Value;
 80039ba:	887b      	ldrh	r3, [r7, #2]
 80039bc:	81fb      	strh	r3, [r7, #14]
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
 80039be:	89fb      	ldrh	r3, [r7, #14]
 80039c0:	0a1b      	lsrs	r3, r3, #8
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	807b      	strh	r3, [r7, #2]
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 80039c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80039ca:	021b      	lsls	r3, r3, #8
 80039cc:	b21a      	sxth	r2, r3
 80039ce:	887b      	ldrh	r3, [r7, #2]
 80039d0:	b21b      	sxth	r3, r3
 80039d2:	4313      	orrs	r3, r2
 80039d4:	b21b      	sxth	r3, r3
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	807b      	strh	r3, [r7, #2]
  
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 80039da:	88ba      	ldrh	r2, [r7, #4]
 80039dc:	79f9      	ldrb	r1, [r7, #7]
 80039de:	2302      	movs	r3, #2
 80039e0:	9301      	str	r3, [sp, #4]
 80039e2:	1cbb      	adds	r3, r7, #2
 80039e4:	9300      	str	r3, [sp, #0]
 80039e6:	2302      	movs	r3, #2
 80039e8:	4803      	ldr	r0, [pc, #12]	@ (80039f8 <AUDIO_IO_Write+0x50>)
 80039ea:	f7ff ff8e 	bl	800390a <I2Cx_WriteMultiple>
}
 80039ee:	bf00      	nop
 80039f0:	3710      	adds	r7, #16
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	200006f8 	.word	0x200006f8

080039fc <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint16_t AUDIO_IO_Read(uint8_t Addr, uint16_t Reg)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b086      	sub	sp, #24
 8003a00:	af02      	add	r7, sp, #8
 8003a02:	4603      	mov	r3, r0
 8003a04:	460a      	mov	r2, r1
 8003a06:	71fb      	strb	r3, [r7, #7]
 8003a08:	4613      	mov	r3, r2
 8003a0a:	80bb      	strh	r3, [r7, #4]
  uint16_t read_value = 0, tmp = 0;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	81bb      	strh	r3, [r7, #12]
 8003a10:	2300      	movs	r3, #0
 8003a12:	81fb      	strh	r3, [r7, #14]
  
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 8003a14:	88ba      	ldrh	r2, [r7, #4]
 8003a16:	79f9      	ldrb	r1, [r7, #7]
 8003a18:	2302      	movs	r3, #2
 8003a1a:	9301      	str	r3, [sp, #4]
 8003a1c:	f107 030c 	add.w	r3, r7, #12
 8003a20:	9300      	str	r3, [sp, #0]
 8003a22:	2302      	movs	r3, #2
 8003a24:	480a      	ldr	r0, [pc, #40]	@ (8003a50 <AUDIO_IO_Read+0x54>)
 8003a26:	f7ff ff43 	bl	80038b0 <I2Cx_ReadMultiple>
  
  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
 8003a2a:	89bb      	ldrh	r3, [r7, #12]
 8003a2c:	0a1b      	lsrs	r3, r3, #8
 8003a2e:	81fb      	strh	r3, [r7, #14]
  
  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 8003a30:	89bb      	ldrh	r3, [r7, #12]
 8003a32:	b21b      	sxth	r3, r3
 8003a34:	021b      	lsls	r3, r3, #8
 8003a36:	b21a      	sxth	r2, r3
 8003a38:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	b21b      	sxth	r3, r3
 8003a40:	81fb      	strh	r3, [r7, #14]
  
  read_value = tmp;
 8003a42:	89fb      	ldrh	r3, [r7, #14]
 8003a44:	81bb      	strh	r3, [r7, #12]
  
  return read_value;
 8003a46:	89bb      	ldrh	r3, [r7, #12]
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3710      	adds	r7, #16
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	200006f8 	.word	0x200006f8

08003a54 <AUDIO_IO_Delay>:
  * @brief  AUDIO Codec delay 
  * @param  Delay: Delay in ms
  * @retval None
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b082      	sub	sp, #8
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f000 fbfd 	bl	800425c <HAL_Delay>
}
 8003a62:	bf00      	nop
 8003a64:	3708      	adds	r7, #8
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
	...

08003a6c <HAL_SAI_ErrorCallback>:
  * @brief  SAI error callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  HAL_SAI_StateTypeDef audio_out_state;
  HAL_SAI_StateTypeDef audio_in_state;

  audio_out_state = HAL_SAI_GetState(&haudio_out_sai);
 8003a74:	480e      	ldr	r0, [pc, #56]	@ (8003ab0 <HAL_SAI_ErrorCallback+0x44>)
 8003a76:	f004 f85f 	bl	8007b38 <HAL_SAI_GetState>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	73fb      	strb	r3, [r7, #15]
  audio_in_state = HAL_SAI_GetState(&haudio_in_sai);
 8003a7e:	480d      	ldr	r0, [pc, #52]	@ (8003ab4 <HAL_SAI_ErrorCallback+0x48>)
 8003a80:	f004 f85a 	bl	8007b38 <HAL_SAI_GetState>
 8003a84:	4603      	mov	r3, r0
 8003a86:	73bb      	strb	r3, [r7, #14]

  /* Determines if it is an audio out or audio in error */
  if ((audio_out_state == HAL_SAI_STATE_BUSY) || (audio_out_state == HAL_SAI_STATE_BUSY_TX))
 8003a88:	7bfb      	ldrb	r3, [r7, #15]
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d002      	beq.n	8003a94 <HAL_SAI_ErrorCallback+0x28>
 8003a8e:	7bfb      	ldrb	r3, [r7, #15]
 8003a90:	2b12      	cmp	r3, #18
 8003a92:	d101      	bne.n	8003a98 <HAL_SAI_ErrorCallback+0x2c>
  {
    BSP_AUDIO_OUT_Error_CallBack();
 8003a94:	f000 f810 	bl	8003ab8 <BSP_AUDIO_OUT_Error_CallBack>
  }

  if ((audio_in_state == HAL_SAI_STATE_BUSY) || (audio_in_state == HAL_SAI_STATE_BUSY_RX))
 8003a98:	7bbb      	ldrb	r3, [r7, #14]
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d002      	beq.n	8003aa4 <HAL_SAI_ErrorCallback+0x38>
 8003a9e:	7bbb      	ldrb	r3, [r7, #14]
 8003aa0:	2b22      	cmp	r3, #34	@ 0x22
 8003aa2:	d101      	bne.n	8003aa8 <HAL_SAI_ErrorCallback+0x3c>
  {
    BSP_AUDIO_IN_Error_CallBack();
 8003aa4:	f000 f9f6 	bl	8003e94 <BSP_AUDIO_IN_Error_CallBack>
  }
}
 8003aa8:	bf00      	nop
 8003aaa:	3710      	adds	r7, #16
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	20000750 	.word	0x20000750
 8003ab4:	200007d4 	.word	0x200007d4

08003ab8 <BSP_AUDIO_OUT_Error_CallBack>:
/**
  * @brief  Manages the DMA FIFO error event.
  * @retval None
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(void)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	af00      	add	r7, sp, #0
}
 8003abc:	bf00      	nop
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr
	...

08003ac8 <BSP_AUDIO_OUT_MspInit>:
  * @param  hsai: SAI handle
  * @param  Params
  * @retval None
  */
__weak void BSP_AUDIO_OUT_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{ 
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b08c      	sub	sp, #48	@ 0x30
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_sai_tx;
  GPIO_InitTypeDef  gpio_init_structure;  

  /* Enable SAI clock */
  AUDIO_OUT_SAIx_CLK_ENABLE();
 8003ad2:	4b63      	ldr	r3, [pc, #396]	@ (8003c60 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ad6:	4a62      	ldr	r2, [pc, #392]	@ (8003c60 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003ad8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003adc:	6453      	str	r3, [r2, #68]	@ 0x44
 8003ade:	4b60      	ldr	r3, [pc, #384]	@ (8003c60 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ae2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003ae6:	61bb      	str	r3, [r7, #24]
 8003ae8:	69bb      	ldr	r3, [r7, #24]
  
  /* Enable GPIO clock */
  AUDIO_OUT_SAIx_MCLK_ENABLE();
 8003aea:	4b5d      	ldr	r3, [pc, #372]	@ (8003c60 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aee:	4a5c      	ldr	r2, [pc, #368]	@ (8003c60 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003af0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003af4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003af6:	4b5a      	ldr	r3, [pc, #360]	@ (8003c60 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003afa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003afe:	617b      	str	r3, [r7, #20]
 8003b00:	697b      	ldr	r3, [r7, #20]
  AUDIO_OUT_SAIx_SCK_SD_ENABLE();
 8003b02:	4b57      	ldr	r3, [pc, #348]	@ (8003c60 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b06:	4a56      	ldr	r2, [pc, #344]	@ (8003c60 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003b08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b0e:	4b54      	ldr	r3, [pc, #336]	@ (8003c60 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b16:	613b      	str	r3, [r7, #16]
 8003b18:	693b      	ldr	r3, [r7, #16]
  AUDIO_OUT_SAIx_FS_ENABLE();
 8003b1a:	4b51      	ldr	r3, [pc, #324]	@ (8003c60 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b1e:	4a50      	ldr	r2, [pc, #320]	@ (8003c60 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003b20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b24:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b26:	4b4e      	ldr	r3, [pc, #312]	@ (8003c60 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b2e:	60fb      	str	r3, [r7, #12]
 8003b30:	68fb      	ldr	r3, [r7, #12]
  /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN;
 8003b32:	2380      	movs	r3, #128	@ 0x80
 8003b34:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8003b36:	2302      	movs	r3, #2
 8003b38:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8003b42:	230a      	movs	r3, #10
 8003b44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
 8003b46:	f107 031c 	add.w	r3, r7, #28
 8003b4a:	4619      	mov	r1, r3
 8003b4c:	4845      	ldr	r0, [pc, #276]	@ (8003c64 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8003b4e:	f001 f92f 	bl	8004db0 <HAL_GPIO_Init>

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_SCK_PIN;
 8003b52:	2320      	movs	r3, #32
 8003b54:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8003b56:	2302      	movs	r3, #2
 8003b58:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SCK_AF;
 8003b62:	230a      	movs	r3, #10
 8003b64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 8003b66:	f107 031c 	add.w	r3, r7, #28
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	483d      	ldr	r0, [pc, #244]	@ (8003c64 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8003b6e:	f001 f91f 	bl	8004db0 <HAL_GPIO_Init>

  gpio_init_structure.Pin =  AUDIO_OUT_SAIx_SD_PIN;
 8003b72:	2340      	movs	r3, #64	@ 0x40
 8003b74:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8003b76:	2302      	movs	r3, #2
 8003b78:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8003b82:	230a      	movs	r3, #10
 8003b84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 8003b86:	f107 031c 	add.w	r3, r7, #28
 8003b8a:	4619      	mov	r1, r3
 8003b8c:	4835      	ldr	r0, [pc, #212]	@ (8003c64 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8003b8e:	f001 f90f 	bl	8004db0 <HAL_GPIO_Init>

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 8003b92:	2310      	movs	r3, #16
 8003b94:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8003b96:	2302      	movs	r3, #2
 8003b98:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8003ba2:	230a      	movs	r3, #10
 8003ba4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 8003ba6:	f107 031c 	add.w	r3, r7, #28
 8003baa:	4619      	mov	r1, r3
 8003bac:	482d      	ldr	r0, [pc, #180]	@ (8003c64 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8003bae:	f001 f8ff 	bl	8004db0 <HAL_GPIO_Init>

  /* Enable the DMA clock */
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 8003bb2:	4b2b      	ldr	r3, [pc, #172]	@ (8003c60 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bb6:	4a2a      	ldr	r2, [pc, #168]	@ (8003c60 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003bb8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003bbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003bbe:	4b28      	ldr	r3, [pc, #160]	@ (8003c60 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bc6:	60bb      	str	r3, [r7, #8]
 8003bc8:	68bb      	ldr	r3, [r7, #8]
    
  if(hsai->Instance == AUDIO_OUT_SAIx)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a26      	ldr	r2, [pc, #152]	@ (8003c68 <BSP_AUDIO_OUT_MspInit+0x1a0>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d138      	bne.n	8003c46 <BSP_AUDIO_OUT_MspInit+0x17e>
  {
    /* Configure the hdma_saiTx handle parameters */   
    hdma_sai_tx.Init.Channel             = AUDIO_OUT_SAIx_DMAx_CHANNEL;
 8003bd4:	4b25      	ldr	r3, [pc, #148]	@ (8003c6c <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003bd6:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8003bda:	605a      	str	r2, [r3, #4]
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8003bdc:	4b23      	ldr	r3, [pc, #140]	@ (8003c6c <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003bde:	2240      	movs	r2, #64	@ 0x40
 8003be0:	609a      	str	r2, [r3, #8]
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8003be2:	4b22      	ldr	r3, [pc, #136]	@ (8003c6c <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003be4:	2200      	movs	r2, #0
 8003be6:	60da      	str	r2, [r3, #12]
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8003be8:	4b20      	ldr	r3, [pc, #128]	@ (8003c6c <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003bea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003bee:	611a      	str	r2, [r3, #16]
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
 8003bf0:	4b1e      	ldr	r3, [pc, #120]	@ (8003c6c <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003bf2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003bf6:	615a      	str	r2, [r3, #20]
    hdma_sai_tx.Init.MemDataAlignment    = AUDIO_OUT_SAIx_DMAx_MEM_DATA_SIZE;
 8003bf8:	4b1c      	ldr	r3, [pc, #112]	@ (8003c6c <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003bfa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003bfe:	619a      	str	r2, [r3, #24]
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
 8003c00:	4b1a      	ldr	r3, [pc, #104]	@ (8003c6c <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003c02:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003c06:	61da      	str	r2, [r3, #28]
    hdma_sai_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 8003c08:	4b18      	ldr	r3, [pc, #96]	@ (8003c6c <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003c0a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003c0e:	621a      	str	r2, [r3, #32]
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 8003c10:	4b16      	ldr	r3, [pc, #88]	@ (8003c6c <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003c12:	2204      	movs	r2, #4
 8003c14:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sai_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003c16:	4b15      	ldr	r3, [pc, #84]	@ (8003c6c <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003c18:	2203      	movs	r2, #3
 8003c1a:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sai_tx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003c1c:	4b13      	ldr	r3, [pc, #76]	@ (8003c6c <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003c1e:	2200      	movs	r2, #0
 8003c20:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8003c22:	4b12      	ldr	r3, [pc, #72]	@ (8003c6c <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003c24:	2200      	movs	r2, #0
 8003c26:	631a      	str	r2, [r3, #48]	@ 0x30
    
    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 8003c28:	4b10      	ldr	r3, [pc, #64]	@ (8003c6c <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003c2a:	4a11      	ldr	r2, [pc, #68]	@ (8003c70 <BSP_AUDIO_OUT_MspInit+0x1a8>)
 8003c2c:	601a      	str	r2, [r3, #0]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a0e      	ldr	r2, [pc, #56]	@ (8003c6c <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003c32:	66da      	str	r2, [r3, #108]	@ 0x6c
 8003c34:	4a0d      	ldr	r2, [pc, #52]	@ (8003c6c <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6393      	str	r3, [r2, #56]	@ 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_tx);
 8003c3a:	480c      	ldr	r0, [pc, #48]	@ (8003c6c <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003c3c:	f000 fcf2 	bl	8004624 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_tx);      
 8003c40:	480a      	ldr	r0, [pc, #40]	@ (8003c6c <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003c42:	f000 fc41 	bl	80044c8 <HAL_DMA_Init>
  }
  
  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 8003c46:	2200      	movs	r2, #0
 8003c48:	210e      	movs	r1, #14
 8003c4a:	203c      	movs	r0, #60	@ 0x3c
 8003c4c:	f000 fc05 	bl	800445a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ); 
 8003c50:	203c      	movs	r0, #60	@ 0x3c
 8003c52:	f000 fc1e 	bl	8004492 <HAL_NVIC_EnableIRQ>
}
 8003c56:	bf00      	nop
 8003c58:	3730      	adds	r7, #48	@ 0x30
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	40023800 	.word	0x40023800
 8003c64:	40022000 	.word	0x40022000
 8003c68:	40015c04 	.word	0x40015c04
 8003c6c:	20000858 	.word	0x20000858
 8003c70:	40026470 	.word	0x40026470

08003c74 <BSP_AUDIO_OUT_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application     
  * @retval None
  */
__weak void BSP_AUDIO_OUT_ClockConfig(SAI_HandleTypeDef *hsai, uint32_t AudioFreq, void *Params)
{ 
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b0a6      	sub	sp, #152	@ 0x98
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	60f8      	str	r0, [r7, #12]
 8003c7c:	60b9      	str	r1, [r7, #8]
 8003c7e:	607a      	str	r2, [r7, #4]
  RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;

  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 8003c80:	f107 0314 	add.w	r3, r7, #20
 8003c84:	4618      	mov	r0, r3
 8003c86:	f003 fa57 	bl	8007138 <HAL_RCCEx_GetPeriphCLKConfig>
  
  /* Set the PLL configuration according to the audio frequency */
  if((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K) || (AudioFreq == AUDIO_FREQUENCY_44K))
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	f642 3211 	movw	r2, #11025	@ 0x2b11
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d009      	beq.n	8003ca8 <BSP_AUDIO_OUT_ClockConfig+0x34>
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	f245 6222 	movw	r2, #22050	@ 0x5622
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d004      	beq.n	8003ca8 <BSP_AUDIO_OUT_ClockConfig+0x34>
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d112      	bne.n	8003cce <BSP_AUDIO_OUT_ClockConfig+0x5a>
  {
    /* Configure PLLI2S prescalers */
    /* PLLI2S_VCO: VCO_429M
    I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 429/2 = 214.5 Mhz
    I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 214.5/19 = 11.289 Mhz */
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8003ca8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003cac:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8003cae:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003cb2:	657b      	str	r3, [r7, #84]	@ 0x54
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 429;
 8003cb4:	f240 13ad 	movw	r3, #429	@ 0x1ad
 8003cb8:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 2;
 8003cba:	2302      	movs	r3, #2
 8003cbc:	623b      	str	r3, [r7, #32]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 19;
 8003cbe:	2313      	movs	r3, #19
 8003cc0:	63bb      	str	r3, [r7, #56]	@ 0x38
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8003cc2:	f107 0314 	add.w	r3, r7, #20
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f002 fe46 	bl	8006958 <HAL_RCCEx_PeriphCLKConfig>
 8003ccc:	e012      	b.n	8003cf4 <BSP_AUDIO_OUT_ClockConfig+0x80>
  {
    /* I2S clock config
    PLLI2S_VCO: VCO_344M
    I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 344/7 = 49.142 Mhz
    I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 49.142/1 = 49.142 Mhz */
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8003cce:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003cd2:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8003cd4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003cd8:	657b      	str	r3, [r7, #84]	@ 0x54
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 344;
 8003cda:	f44f 73ac 	mov.w	r3, #344	@ 0x158
 8003cde:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 7;
 8003ce0:	2307      	movs	r3, #7
 8003ce2:	623b      	str	r3, [r7, #32]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 1;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	63bb      	str	r3, [r7, #56]	@ 0x38
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8003ce8:	f107 0314 	add.w	r3, r7, #20
 8003cec:	4618      	mov	r0, r3
 8003cee:	f002 fe33 	bl	8006958 <HAL_RCCEx_PeriphCLKConfig>
  }
}
 8003cf2:	bf00      	nop
 8003cf4:	bf00      	nop
 8003cf6:	3798      	adds	r7, #152	@ 0x98
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <BSP_AUDIO_IN_Init>:
  * @param  BitRes: Audio frequency to be configured.
  * @param  ChnlNbr: Channel number.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_Init(uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b084      	sub	sp, #16
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	60f8      	str	r0, [r7, #12]
 8003d04:	60b9      	str	r1, [r7, #8]
 8003d06:	607a      	str	r2, [r7, #4]
  return BSP_AUDIO_IN_InitEx(INPUT_DEVICE_DIGITAL_MICROPHONE_2, AudioFreq, BitRes, ChnlNbr); 
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	68ba      	ldr	r2, [r7, #8]
 8003d0c:	68f9      	ldr	r1, [r7, #12]
 8003d0e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8003d12:	f000 f805 	bl	8003d20 <BSP_AUDIO_IN_InitEx>
 8003d16:	4603      	mov	r3, r0
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3710      	adds	r7, #16
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <BSP_AUDIO_IN_InitEx>:
  * @param  BitRes: Audio frequency to be configured.
  * @param  ChnlNbr: Channel number.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_InitEx(uint16_t InputDevice, uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr)
{
 8003d20:	b590      	push	{r4, r7, lr}
 8003d22:	b089      	sub	sp, #36	@ 0x24
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	60b9      	str	r1, [r7, #8]
 8003d28:	607a      	str	r2, [r7, #4]
 8003d2a:	603b      	str	r3, [r7, #0]
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = AUDIO_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	77fb      	strb	r3, [r7, #31]
  uint32_t deviceid = 0x00;
 8003d34:	2300      	movs	r3, #0
 8003d36:	617b      	str	r3, [r7, #20]
  uint32_t slot_active;

  if ((InputDevice != INPUT_DEVICE_INPUT_LINE_1) &&       /* Only INPUT_LINE_1 and MICROPHONE_2 inputs supported */
 8003d38:	89fb      	ldrh	r3, [r7, #14]
 8003d3a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d3e:	d006      	beq.n	8003d4e <BSP_AUDIO_IN_InitEx+0x2e>
 8003d40:	89fb      	ldrh	r3, [r7, #14]
 8003d42:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d46:	d002      	beq.n	8003d4e <BSP_AUDIO_IN_InitEx+0x2e>
      (InputDevice != INPUT_DEVICE_DIGITAL_MICROPHONE_2))
  {
    ret = AUDIO_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	77fb      	strb	r3, [r7, #31]
 8003d4c:	e046      	b.n	8003ddc <BSP_AUDIO_IN_InitEx+0xbc>
  }
  else
  {
    /* Disable SAI */
    SAIx_In_DeInit();
 8003d4e:	f000 fa11 	bl	8004174 <SAIx_In_DeInit>

    /* PLL clock is set depending on the AudioFreq (44.1khz vs 48khz groups) */
    BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL); /* Clock config is shared between AUDIO IN and OUT */
 8003d52:	2200      	movs	r2, #0
 8003d54:	68b9      	ldr	r1, [r7, #8]
 8003d56:	4824      	ldr	r0, [pc, #144]	@ (8003de8 <BSP_AUDIO_IN_InitEx+0xc8>)
 8003d58:	f7ff ff8c 	bl	8003c74 <BSP_AUDIO_OUT_ClockConfig>

    /* SAI data transfer preparation:
    Prepare the Media to be used for the audio transfer from SAI peripheral to memory */
    haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8003d5c:	4b22      	ldr	r3, [pc, #136]	@ (8003de8 <BSP_AUDIO_IN_InitEx+0xc8>)
 8003d5e:	4a23      	ldr	r2, [pc, #140]	@ (8003dec <BSP_AUDIO_IN_InitEx+0xcc>)
 8003d60:	601a      	str	r2, [r3, #0]
    if(HAL_SAI_GetState(&haudio_in_sai) == HAL_SAI_STATE_RESET)
 8003d62:	4821      	ldr	r0, [pc, #132]	@ (8003de8 <BSP_AUDIO_IN_InitEx+0xc8>)
 8003d64:	f003 fee8 	bl	8007b38 <HAL_SAI_GetState>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d107      	bne.n	8003d7e <BSP_AUDIO_IN_InitEx+0x5e>
    {
      /* Init the SAI MSP: this __weak function can be redefined by the application*/
      BSP_AUDIO_OUT_MspInit(&haudio_in_sai, NULL);  /* Initialize GPIOs for SAI2 block A Master signals */
 8003d6e:	2100      	movs	r1, #0
 8003d70:	481d      	ldr	r0, [pc, #116]	@ (8003de8 <BSP_AUDIO_IN_InitEx+0xc8>)
 8003d72:	f7ff fea9 	bl	8003ac8 <BSP_AUDIO_OUT_MspInit>
      BSP_AUDIO_IN_MspInit(&haudio_in_sai, NULL);
 8003d76:	2100      	movs	r1, #0
 8003d78:	481b      	ldr	r0, [pc, #108]	@ (8003de8 <BSP_AUDIO_IN_InitEx+0xc8>)
 8003d7a:	f000 f893 	bl	8003ea4 <BSP_AUDIO_IN_MspInit>

    /* Configure SAI in master RX mode :
     *   - SAI2_block_A in master RX mode
     *   - SAI2_block_B in slave RX mode synchronous from SAI2_block_A
     */
    if (InputDevice == INPUT_DEVICE_DIGITAL_MICROPHONE_2)
 8003d7e:	89fb      	ldrh	r3, [r7, #14]
 8003d80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d84:	d102      	bne.n	8003d8c <BSP_AUDIO_IN_InitEx+0x6c>
    {
      slot_active = CODEC_AUDIOFRAME_SLOT_13;
 8003d86:	230a      	movs	r3, #10
 8003d88:	61bb      	str	r3, [r7, #24]
 8003d8a:	e001      	b.n	8003d90 <BSP_AUDIO_IN_InitEx+0x70>
    }
    else
    {
      slot_active = CODEC_AUDIOFRAME_SLOT_02;
 8003d8c:	2305      	movs	r3, #5
 8003d8e:	61bb      	str	r3, [r7, #24]
    }
    SAIx_In_Init(SAI_MODEMASTER_RX, slot_active, AudioFreq);
 8003d90:	68ba      	ldr	r2, [r7, #8]
 8003d92:	69b9      	ldr	r1, [r7, #24]
 8003d94:	2001      	movs	r0, #1
 8003d96:	f000 f937 	bl	8004008 <SAIx_In_Init>

    /* wm8994 codec initialization */
    deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 8003d9a:	4b15      	ldr	r3, [pc, #84]	@ (8003df0 <BSP_AUDIO_IN_InitEx+0xd0>)
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	2034      	movs	r0, #52	@ 0x34
 8003da0:	4798      	blx	r3
 8003da2:	6178      	str	r0, [r7, #20]

    if((deviceid) == WM8994_ID)
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	f648 1294 	movw	r2, #35220	@ 0x8994
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d109      	bne.n	8003dc2 <BSP_AUDIO_IN_InitEx+0xa2>
    {
      /* Reset the Codec Registers */
      wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 8003dae:	4b10      	ldr	r3, [pc, #64]	@ (8003df0 <BSP_AUDIO_IN_InitEx+0xd0>)
 8003db0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003db2:	2034      	movs	r0, #52	@ 0x34
 8003db4:	4798      	blx	r3
      /* Initialize the audio driver structure */
      audio_drv = &wm8994_drv;
 8003db6:	4b0f      	ldr	r3, [pc, #60]	@ (8003df4 <BSP_AUDIO_IN_InitEx+0xd4>)
 8003db8:	4a0d      	ldr	r2, [pc, #52]	@ (8003df0 <BSP_AUDIO_IN_InitEx+0xd0>)
 8003dba:	601a      	str	r2, [r3, #0]
      ret = AUDIO_OK;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	77fb      	strb	r3, [r7, #31]
 8003dc0:	e001      	b.n	8003dc6 <BSP_AUDIO_IN_InitEx+0xa6>
    }
    else
    {
      ret = AUDIO_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	77fb      	strb	r3, [r7, #31]
    }

    if(ret == AUDIO_OK)
 8003dc6:	7ffb      	ldrb	r3, [r7, #31]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d107      	bne.n	8003ddc <BSP_AUDIO_IN_InitEx+0xbc>
    {
      /* Initialize the codec internal registers */
      audio_drv->Init(AUDIO_I2C_ADDRESS, InputDevice, 100, AudioFreq);
 8003dcc:	4b09      	ldr	r3, [pc, #36]	@ (8003df4 <BSP_AUDIO_IN_InitEx+0xd4>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681c      	ldr	r4, [r3, #0]
 8003dd2:	89f9      	ldrh	r1, [r7, #14]
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	2264      	movs	r2, #100	@ 0x64
 8003dd8:	2034      	movs	r0, #52	@ 0x34
 8003dda:	47a0      	blx	r4
    }
  }
  return ret;
 8003ddc:	7ffb      	ldrb	r3, [r7, #31]
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3724      	adds	r7, #36	@ 0x24
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd90      	pop	{r4, r7, pc}
 8003de6:	bf00      	nop
 8003de8:	200007d4 	.word	0x200007d4
 8003dec:	40015c24 	.word	0x40015c24
 8003df0:	20000004 	.word	0x20000004
 8003df4:	2000074c 	.word	0x2000074c

08003df8 <BSP_AUDIO_IN_Record>:
  * @param  size: size of the recorded buffer in number of elements (typically number of half-words)
  *               Be careful that it is not the same unit than BSP_AUDIO_OUT_Play function
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t  BSP_AUDIO_IN_Record(uint16_t* pbuf, uint32_t size)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b084      	sub	sp, #16
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	6039      	str	r1, [r7, #0]
  uint32_t ret = AUDIO_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	60fb      	str	r3, [r7, #12]
  
  /* Start the process receive DMA */
  HAL_SAI_Receive_DMA(&haudio_in_sai, (uint8_t*)pbuf, size);
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	6879      	ldr	r1, [r7, #4]
 8003e0e:	4805      	ldr	r0, [pc, #20]	@ (8003e24 <BSP_AUDIO_IN_Record+0x2c>)
 8003e10:	f003 fe04 	bl	8007a1c <HAL_SAI_Receive_DMA>
  
  /* Return AUDIO_OK when all operations are correctly done */
  ret = AUDIO_OK;
 8003e14:	2300      	movs	r3, #0
 8003e16:	60fb      	str	r3, [r7, #12]
  
  return ret;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	b2db      	uxtb	r3, r3
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3710      	adds	r7, #16
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	200007d4 	.word	0x200007d4

08003e28 <BSP_AUDIO_IN_Stop>:
  *           - CODEC_PDWN_HW: completely shut down the codec (physically).
  *                            Then need to reconfigure the Codec after power on.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_Stop(uint32_t Option)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b082      	sub	sp, #8
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  /* Call the Media layer stop function */
  HAL_SAI_DMAStop(&haudio_in_sai);
 8003e30:	480c      	ldr	r0, [pc, #48]	@ (8003e64 <BSP_AUDIO_IN_Stop+0x3c>)
 8003e32:	f003 fd80 	bl	8007936 <HAL_SAI_DMAStop>
  
  /* Call Audio Codec Stop function */
  if(audio_drv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
 8003e36:	4b0c      	ldr	r3, [pc, #48]	@ (8003e68 <BSP_AUDIO_IN_Stop+0x40>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	699b      	ldr	r3, [r3, #24]
 8003e3c:	6879      	ldr	r1, [r7, #4]
 8003e3e:	2034      	movs	r0, #52	@ 0x34
 8003e40:	4798      	blx	r3
 8003e42:	4603      	mov	r3, r0
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d001      	beq.n	8003e4c <BSP_AUDIO_IN_Stop+0x24>
  {
    return AUDIO_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e006      	b.n	8003e5a <BSP_AUDIO_IN_Stop+0x32>
  }
  else
  {
    if(Option == CODEC_PDWN_HW)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d102      	bne.n	8003e58 <BSP_AUDIO_IN_Stop+0x30>
    {
      /* Wait at least 100us */
      HAL_Delay(1);
 8003e52:	2001      	movs	r0, #1
 8003e54:	f000 fa02 	bl	800425c <HAL_Delay>
    }
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 8003e58:	2300      	movs	r3, #0
  }
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3708      	adds	r7, #8
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	200007d4 	.word	0x200007d4
 8003e68:	2000074c 	.word	0x2000074c

08003e6c <HAL_SAI_RxCpltCallback>:
  * @brief  Rx Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b082      	sub	sp, #8
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 8003e74:	f006 fc0c 	bl	800a690 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8003e78:	bf00      	nop
 8003e7a:	3708      	adds	r7, #8
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <HAL_SAI_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
  BSP_AUDIO_IN_HalfTransfer_CallBack();
 8003e88:	f006 fc4a 	bl	800a720 <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 8003e8c:	bf00      	nop
 8003e8e:	3708      	adds	r7, #8
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}

08003e94 <BSP_AUDIO_IN_Error_CallBack>:
/**
  * @brief  Audio IN Error callback function.
  * @retval None
  */
__weak void BSP_AUDIO_IN_Error_CallBack(void)
{   
 8003e94:	b480      	push	{r7}
 8003e96:	af00      	add	r7, sp, #0
  /* This function is called when an Interrupt due to transfer error on or peripheral
     error occurs. */
}
 8003e98:	bf00      	nop
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr
	...

08003ea4 <BSP_AUDIO_IN_MspInit>:
  * @param  hsai: SAI handle
  * @param  Params
  * @retval None
  */
__weak void BSP_AUDIO_IN_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b08c      	sub	sp, #48	@ 0x30
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
 8003eac:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_sai_rx;
  GPIO_InitTypeDef  gpio_init_structure;  

  /* Enable SAI clock */
  AUDIO_IN_SAIx_CLK_ENABLE();
 8003eae:	4b50      	ldr	r3, [pc, #320]	@ (8003ff0 <BSP_AUDIO_IN_MspInit+0x14c>)
 8003eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eb2:	4a4f      	ldr	r2, [pc, #316]	@ (8003ff0 <BSP_AUDIO_IN_MspInit+0x14c>)
 8003eb4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003eb8:	6453      	str	r3, [r2, #68]	@ 0x44
 8003eba:	4b4d      	ldr	r3, [pc, #308]	@ (8003ff0 <BSP_AUDIO_IN_MspInit+0x14c>)
 8003ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ebe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003ec2:	61bb      	str	r3, [r7, #24]
 8003ec4:	69bb      	ldr	r3, [r7, #24]
  
  /* Enable SD GPIO clock */
  AUDIO_IN_SAIx_SD_ENABLE();
 8003ec6:	4b4a      	ldr	r3, [pc, #296]	@ (8003ff0 <BSP_AUDIO_IN_MspInit+0x14c>)
 8003ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eca:	4a49      	ldr	r2, [pc, #292]	@ (8003ff0 <BSP_AUDIO_IN_MspInit+0x14c>)
 8003ecc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ed0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ed2:	4b47      	ldr	r3, [pc, #284]	@ (8003ff0 <BSP_AUDIO_IN_MspInit+0x14c>)
 8003ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ed6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003eda:	617b      	str	r3, [r7, #20]
 8003edc:	697b      	ldr	r3, [r7, #20]
  /* CODEC_SAI pin configuration: SD pin */
  gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
 8003ede:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003ee2:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8003ee4:	2302      	movs	r3, #2
 8003ee6:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8003eec:	2302      	movs	r3, #2
 8003eee:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_IN_SAIx_SD_AF;
 8003ef0:	230a      	movs	r3, #10
 8003ef2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 8003ef4:	f107 031c 	add.w	r3, r7, #28
 8003ef8:	4619      	mov	r1, r3
 8003efa:	483e      	ldr	r0, [pc, #248]	@ (8003ff4 <BSP_AUDIO_IN_MspInit+0x150>)
 8003efc:	f000 ff58 	bl	8004db0 <HAL_GPIO_Init>

  /* Enable Audio INT GPIO clock */
  AUDIO_IN_INT_GPIO_ENABLE();
 8003f00:	4b3b      	ldr	r3, [pc, #236]	@ (8003ff0 <BSP_AUDIO_IN_MspInit+0x14c>)
 8003f02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f04:	4a3a      	ldr	r2, [pc, #232]	@ (8003ff0 <BSP_AUDIO_IN_MspInit+0x14c>)
 8003f06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f0a:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f0c:	4b38      	ldr	r3, [pc, #224]	@ (8003ff0 <BSP_AUDIO_IN_MspInit+0x14c>)
 8003f0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f14:	613b      	str	r3, [r7, #16]
 8003f16:	693b      	ldr	r3, [r7, #16]
  /* Audio INT pin configuration: input */
  gpio_init_structure.Pin = AUDIO_IN_INT_GPIO_PIN;
 8003f18:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f1c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8003f22:	2300      	movs	r3, #0
 8003f24:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8003f26:	2302      	movs	r3, #2
 8003f28:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(AUDIO_IN_INT_GPIO_PORT, &gpio_init_structure);
 8003f2a:	f107 031c 	add.w	r3, r7, #28
 8003f2e:	4619      	mov	r1, r3
 8003f30:	4831      	ldr	r0, [pc, #196]	@ (8003ff8 <BSP_AUDIO_IN_MspInit+0x154>)
 8003f32:	f000 ff3d 	bl	8004db0 <HAL_GPIO_Init>

  /* Enable the DMA clock */
  AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 8003f36:	4b2e      	ldr	r3, [pc, #184]	@ (8003ff0 <BSP_AUDIO_IN_MspInit+0x14c>)
 8003f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f3a:	4a2d      	ldr	r2, [pc, #180]	@ (8003ff0 <BSP_AUDIO_IN_MspInit+0x14c>)
 8003f3c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003f40:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f42:	4b2b      	ldr	r3, [pc, #172]	@ (8003ff0 <BSP_AUDIO_IN_MspInit+0x14c>)
 8003f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f4a:	60fb      	str	r3, [r7, #12]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
    
  if(hsai->Instance == AUDIO_IN_SAIx)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a2a      	ldr	r2, [pc, #168]	@ (8003ffc <BSP_AUDIO_IN_MspInit+0x158>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d137      	bne.n	8003fc8 <BSP_AUDIO_IN_MspInit+0x124>
  {
    /* Configure the hdma_sai_rx handle parameters */
    hdma_sai_rx.Init.Channel             = AUDIO_IN_SAIx_DMAx_CHANNEL;
 8003f58:	4b29      	ldr	r3, [pc, #164]	@ (8004000 <BSP_AUDIO_IN_MspInit+0x15c>)
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	605a      	str	r2, [r3, #4]
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8003f5e:	4b28      	ldr	r3, [pc, #160]	@ (8004000 <BSP_AUDIO_IN_MspInit+0x15c>)
 8003f60:	2200      	movs	r2, #0
 8003f62:	609a      	str	r2, [r3, #8]
    hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8003f64:	4b26      	ldr	r3, [pc, #152]	@ (8004000 <BSP_AUDIO_IN_MspInit+0x15c>)
 8003f66:	2200      	movs	r2, #0
 8003f68:	60da      	str	r2, [r3, #12]
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8003f6a:	4b25      	ldr	r3, [pc, #148]	@ (8004000 <BSP_AUDIO_IN_MspInit+0x15c>)
 8003f6c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003f70:	611a      	str	r2, [r3, #16]
    hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAIx_DMAx_PERIPH_DATA_SIZE;
 8003f72:	4b23      	ldr	r3, [pc, #140]	@ (8004000 <BSP_AUDIO_IN_MspInit+0x15c>)
 8003f74:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003f78:	615a      	str	r2, [r3, #20]
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
 8003f7a:	4b21      	ldr	r3, [pc, #132]	@ (8004000 <BSP_AUDIO_IN_MspInit+0x15c>)
 8003f7c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003f80:	619a      	str	r2, [r3, #24]
    hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 8003f82:	4b1f      	ldr	r3, [pc, #124]	@ (8004000 <BSP_AUDIO_IN_MspInit+0x15c>)
 8003f84:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003f88:	61da      	str	r2, [r3, #28]
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8003f8a:	4b1d      	ldr	r3, [pc, #116]	@ (8004000 <BSP_AUDIO_IN_MspInit+0x15c>)
 8003f8c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003f90:	621a      	str	r2, [r3, #32]
    hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8003f92:	4b1b      	ldr	r3, [pc, #108]	@ (8004000 <BSP_AUDIO_IN_MspInit+0x15c>)
 8003f94:	2200      	movs	r2, #0
 8003f96:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003f98:	4b19      	ldr	r3, [pc, #100]	@ (8004000 <BSP_AUDIO_IN_MspInit+0x15c>)
 8003f9a:	2203      	movs	r2, #3
 8003f9c:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003f9e:	4b18      	ldr	r3, [pc, #96]	@ (8004000 <BSP_AUDIO_IN_MspInit+0x15c>)
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 8003fa4:	4b16      	ldr	r3, [pc, #88]	@ (8004000 <BSP_AUDIO_IN_MspInit+0x15c>)
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	631a      	str	r2, [r3, #48]	@ 0x30
    
    hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 8003faa:	4b15      	ldr	r3, [pc, #84]	@ (8004000 <BSP_AUDIO_IN_MspInit+0x15c>)
 8003fac:	4a15      	ldr	r2, [pc, #84]	@ (8004004 <BSP_AUDIO_IN_MspInit+0x160>)
 8003fae:	601a      	str	r2, [r3, #0]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	4a13      	ldr	r2, [pc, #76]	@ (8004000 <BSP_AUDIO_IN_MspInit+0x15c>)
 8003fb4:	671a      	str	r2, [r3, #112]	@ 0x70
 8003fb6:	4a12      	ldr	r2, [pc, #72]	@ (8004000 <BSP_AUDIO_IN_MspInit+0x15c>)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6393      	str	r3, [r2, #56]	@ 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_rx);
 8003fbc:	4810      	ldr	r0, [pc, #64]	@ (8004000 <BSP_AUDIO_IN_MspInit+0x15c>)
 8003fbe:	f000 fb31 	bl	8004624 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_rx);
 8003fc2:	480f      	ldr	r0, [pc, #60]	@ (8004000 <BSP_AUDIO_IN_MspInit+0x15c>)
 8003fc4:	f000 fa80 	bl	80044c8 <HAL_DMA_Init>
  }
  
  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8003fc8:	2200      	movs	r2, #0
 8003fca:	210f      	movs	r1, #15
 8003fcc:	2046      	movs	r0, #70	@ 0x46
 8003fce:	f000 fa44 	bl	800445a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 8003fd2:	2046      	movs	r0, #70	@ 0x46
 8003fd4:	f000 fa5d 	bl	8004492 <HAL_NVIC_EnableIRQ>

  /* Audio INT IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_IN_INT_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8003fd8:	2200      	movs	r2, #0
 8003fda:	210f      	movs	r1, #15
 8003fdc:	2028      	movs	r0, #40	@ 0x28
 8003fde:	f000 fa3c 	bl	800445a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_INT_IRQ);
 8003fe2:	2028      	movs	r0, #40	@ 0x28
 8003fe4:	f000 fa55 	bl	8004492 <HAL_NVIC_EnableIRQ>
}
 8003fe8:	bf00      	nop
 8003fea:	3730      	adds	r7, #48	@ 0x30
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	40023800 	.word	0x40023800
 8003ff4:	40021800 	.word	0x40021800
 8003ff8:	40021c00 	.word	0x40021c00
 8003ffc:	40015c24 	.word	0x40015c24
 8004000:	200008b8 	.word	0x200008b8
 8004004:	400264b8 	.word	0x400264b8

08004008 <SAIx_In_Init>:
  * @param  SlotActive: CODEC_AUDIOFRAME_SLOT_02 or CODEC_AUDIOFRAME_SLOT_13
  * @param  AudioFreq: Audio frequency to be configured for the SAI peripheral.
  * @retval None
  */
static void SAIx_In_Init(uint32_t SaiOutMode, uint32_t SlotActive, uint32_t AudioFreq)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b084      	sub	sp, #16
 800400c:	af00      	add	r7, sp, #0
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	607a      	str	r2, [r7, #4]
  /* Initialize SAI2 block A in MASTER RX */
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8004014:	4b53      	ldr	r3, [pc, #332]	@ (8004164 <SAIx_In_Init+0x15c>)
 8004016:	4a54      	ldr	r2, [pc, #336]	@ (8004168 <SAIx_In_Init+0x160>)
 8004018:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 800401a:	4b52      	ldr	r3, [pc, #328]	@ (8004164 <SAIx_In_Init+0x15c>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	4b50      	ldr	r3, [pc, #320]	@ (8004164 <SAIx_In_Init+0x15c>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004028:	601a      	str	r2, [r3, #0]

  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
 800402a:	4a4e      	ldr	r2, [pc, #312]	@ (8004164 <SAIx_In_Init+0x15c>)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	61d3      	str	r3, [r2, #28]
  haudio_out_sai.Init.AudioMode = SaiOutMode;
 8004030:	4a4c      	ldr	r2, [pc, #304]	@ (8004164 <SAIx_In_Init+0x15c>)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	6053      	str	r3, [r2, #4]
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 8004036:	4b4b      	ldr	r3, [pc, #300]	@ (8004164 <SAIx_In_Init+0x15c>)
 8004038:	2200      	movs	r2, #0
 800403a:	615a      	str	r2, [r3, #20]
  haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 800403c:	4b49      	ldr	r3, [pc, #292]	@ (8004164 <SAIx_In_Init+0x15c>)
 800403e:	2200      	movs	r2, #0
 8004040:	631a      	str	r2, [r3, #48]	@ 0x30
  haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
 8004042:	4b48      	ldr	r3, [pc, #288]	@ (8004164 <SAIx_In_Init+0x15c>)
 8004044:	2280      	movs	r2, #128	@ 0x80
 8004046:	635a      	str	r2, [r3, #52]	@ 0x34
  haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8004048:	4b46      	ldr	r3, [pc, #280]	@ (8004164 <SAIx_In_Init+0x15c>)
 800404a:	2200      	movs	r2, #0
 800404c:	639a      	str	r2, [r3, #56]	@ 0x38
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 800404e:	4b45      	ldr	r3, [pc, #276]	@ (8004164 <SAIx_In_Init+0x15c>)
 8004050:	2201      	movs	r2, #1
 8004052:	63da      	str	r2, [r3, #60]	@ 0x3c
  haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
 8004054:	4b43      	ldr	r3, [pc, #268]	@ (8004164 <SAIx_In_Init+0x15c>)
 8004056:	2200      	movs	r2, #0
 8004058:	609a      	str	r2, [r3, #8]
  haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 800405a:	4b42      	ldr	r3, [pc, #264]	@ (8004164 <SAIx_In_Init+0x15c>)
 800405c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004060:	611a      	str	r2, [r3, #16]
  haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8004062:	4b40      	ldr	r3, [pc, #256]	@ (8004164 <SAIx_In_Init+0x15c>)
 8004064:	2201      	movs	r2, #1
 8004066:	619a      	str	r2, [r3, #24]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  haudio_out_sai.FrameInit.FrameLength = 64;
 8004068:	4b3e      	ldr	r3, [pc, #248]	@ (8004164 <SAIx_In_Init+0x15c>)
 800406a:	2240      	movs	r2, #64	@ 0x40
 800406c:	641a      	str	r2, [r3, #64]	@ 0x40
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 800406e:	4b3d      	ldr	r3, [pc, #244]	@ (8004164 <SAIx_In_Init+0x15c>)
 8004070:	2220      	movs	r2, #32
 8004072:	645a      	str	r2, [r3, #68]	@ 0x44
  haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8004074:	4b3b      	ldr	r3, [pc, #236]	@ (8004164 <SAIx_In_Init+0x15c>)
 8004076:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800407a:	649a      	str	r2, [r3, #72]	@ 0x48
  haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800407c:	4b39      	ldr	r3, [pc, #228]	@ (8004164 <SAIx_In_Init+0x15c>)
 800407e:	2200      	movs	r2, #0
 8004080:	64da      	str	r2, [r3, #76]	@ 0x4c
  haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8004082:	4b38      	ldr	r3, [pc, #224]	@ (8004164 <SAIx_In_Init+0x15c>)
 8004084:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8004088:	651a      	str	r2, [r3, #80]	@ 0x50
  /* Configure SAI Block_x Slot
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot actives */
  haudio_out_sai.SlotInit.FirstBitOffset = 0;
 800408a:	4b36      	ldr	r3, [pc, #216]	@ (8004164 <SAIx_In_Init+0x15c>)
 800408c:	2200      	movs	r2, #0
 800408e:	655a      	str	r2, [r3, #84]	@ 0x54
  haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8004090:	4b34      	ldr	r3, [pc, #208]	@ (8004164 <SAIx_In_Init+0x15c>)
 8004092:	2200      	movs	r2, #0
 8004094:	659a      	str	r2, [r3, #88]	@ 0x58
  haudio_out_sai.SlotInit.SlotNumber = 4;
 8004096:	4b33      	ldr	r3, [pc, #204]	@ (8004164 <SAIx_In_Init+0x15c>)
 8004098:	2204      	movs	r2, #4
 800409a:	65da      	str	r2, [r3, #92]	@ 0x5c
  haudio_out_sai.SlotInit.SlotActive = SlotActive;
 800409c:	4a31      	ldr	r2, [pc, #196]	@ (8004164 <SAIx_In_Init+0x15c>)
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	6613      	str	r3, [r2, #96]	@ 0x60

  HAL_SAI_Init(&haudio_out_sai);
 80040a2:	4830      	ldr	r0, [pc, #192]	@ (8004164 <SAIx_In_Init+0x15c>)
 80040a4:	f003 fa94 	bl	80075d0 <HAL_SAI_Init>

  /* Initialize SAI2 block B in SLAVE RX synchronous from SAI2 block A */
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 80040a8:	4b30      	ldr	r3, [pc, #192]	@ (800416c <SAIx_In_Init+0x164>)
 80040aa:	4a31      	ldr	r2, [pc, #196]	@ (8004170 <SAIx_In_Init+0x168>)
 80040ac:	601a      	str	r2, [r3, #0]
  
  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 80040ae:	4b2f      	ldr	r3, [pc, #188]	@ (800416c <SAIx_In_Init+0x164>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	4b2d      	ldr	r3, [pc, #180]	@ (800416c <SAIx_In_Init+0x164>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80040bc:	601a      	str	r2, [r3, #0]
  
  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  haudio_in_sai.Init.AudioFrequency = AudioFreq;
 80040be:	4a2b      	ldr	r2, [pc, #172]	@ (800416c <SAIx_In_Init+0x164>)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	61d3      	str	r3, [r2, #28]
  haudio_in_sai.Init.AudioMode = SAI_MODESLAVE_RX;
 80040c4:	4b29      	ldr	r3, [pc, #164]	@ (800416c <SAIx_In_Init+0x164>)
 80040c6:	2203      	movs	r2, #3
 80040c8:	605a      	str	r2, [r3, #4]
  haudio_in_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 80040ca:	4b28      	ldr	r3, [pc, #160]	@ (800416c <SAIx_In_Init+0x164>)
 80040cc:	2200      	movs	r2, #0
 80040ce:	615a      	str	r2, [r3, #20]
  haudio_in_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 80040d0:	4b26      	ldr	r3, [pc, #152]	@ (800416c <SAIx_In_Init+0x164>)
 80040d2:	2200      	movs	r2, #0
 80040d4:	631a      	str	r2, [r3, #48]	@ 0x30
  haudio_in_sai.Init.DataSize = SAI_DATASIZE_16;
 80040d6:	4b25      	ldr	r3, [pc, #148]	@ (800416c <SAIx_In_Init+0x164>)
 80040d8:	2280      	movs	r2, #128	@ 0x80
 80040da:	635a      	str	r2, [r3, #52]	@ 0x34
  haudio_in_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80040dc:	4b23      	ldr	r3, [pc, #140]	@ (800416c <SAIx_In_Init+0x164>)
 80040de:	2200      	movs	r2, #0
 80040e0:	639a      	str	r2, [r3, #56]	@ 0x38
  haudio_in_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 80040e2:	4b22      	ldr	r3, [pc, #136]	@ (800416c <SAIx_In_Init+0x164>)
 80040e4:	2201      	movs	r2, #1
 80040e6:	63da      	str	r2, [r3, #60]	@ 0x3c
  haudio_in_sai.Init.Synchro = SAI_SYNCHRONOUS;
 80040e8:	4b20      	ldr	r3, [pc, #128]	@ (800416c <SAIx_In_Init+0x164>)
 80040ea:	2201      	movs	r2, #1
 80040ec:	609a      	str	r2, [r3, #8]
  haudio_in_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLED;
 80040ee:	4b1f      	ldr	r3, [pc, #124]	@ (800416c <SAIx_In_Init+0x164>)
 80040f0:	2200      	movs	r2, #0
 80040f2:	611a      	str	r2, [r3, #16]
  haudio_in_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 80040f4:	4b1d      	ldr	r3, [pc, #116]	@ (800416c <SAIx_In_Init+0x164>)
 80040f6:	2201      	movs	r2, #1
 80040f8:	619a      	str	r2, [r3, #24]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  haudio_in_sai.FrameInit.FrameLength = 64;
 80040fa:	4b1c      	ldr	r3, [pc, #112]	@ (800416c <SAIx_In_Init+0x164>)
 80040fc:	2240      	movs	r2, #64	@ 0x40
 80040fe:	641a      	str	r2, [r3, #64]	@ 0x40
  haudio_in_sai.FrameInit.ActiveFrameLength = 32;
 8004100:	4b1a      	ldr	r3, [pc, #104]	@ (800416c <SAIx_In_Init+0x164>)
 8004102:	2220      	movs	r2, #32
 8004104:	645a      	str	r2, [r3, #68]	@ 0x44
  haudio_in_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8004106:	4b19      	ldr	r3, [pc, #100]	@ (800416c <SAIx_In_Init+0x164>)
 8004108:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800410c:	649a      	str	r2, [r3, #72]	@ 0x48
  haudio_in_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800410e:	4b17      	ldr	r3, [pc, #92]	@ (800416c <SAIx_In_Init+0x164>)
 8004110:	2200      	movs	r2, #0
 8004112:	64da      	str	r2, [r3, #76]	@ 0x4c
  haudio_in_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8004114:	4b15      	ldr	r3, [pc, #84]	@ (800416c <SAIx_In_Init+0x164>)
 8004116:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800411a:	651a      	str	r2, [r3, #80]	@ 0x50
  /* Configure SAI Block_x Slot
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot active */
  haudio_in_sai.SlotInit.FirstBitOffset = 0;
 800411c:	4b13      	ldr	r3, [pc, #76]	@ (800416c <SAIx_In_Init+0x164>)
 800411e:	2200      	movs	r2, #0
 8004120:	655a      	str	r2, [r3, #84]	@ 0x54
  haudio_in_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8004122:	4b12      	ldr	r3, [pc, #72]	@ (800416c <SAIx_In_Init+0x164>)
 8004124:	2200      	movs	r2, #0
 8004126:	659a      	str	r2, [r3, #88]	@ 0x58
  haudio_in_sai.SlotInit.SlotNumber = 4;
 8004128:	4b10      	ldr	r3, [pc, #64]	@ (800416c <SAIx_In_Init+0x164>)
 800412a:	2204      	movs	r2, #4
 800412c:	65da      	str	r2, [r3, #92]	@ 0x5c
  haudio_in_sai.SlotInit.SlotActive = SlotActive;
 800412e:	4a0f      	ldr	r2, [pc, #60]	@ (800416c <SAIx_In_Init+0x164>)
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	6613      	str	r3, [r2, #96]	@ 0x60

  HAL_SAI_Init(&haudio_in_sai);
 8004134:	480d      	ldr	r0, [pc, #52]	@ (800416c <SAIx_In_Init+0x164>)
 8004136:	f003 fa4b 	bl	80075d0 <HAL_SAI_Init>

  /* Enable SAI peripheral to generate MCLK */
  __HAL_SAI_ENABLE(&haudio_out_sai);
 800413a:	4b0a      	ldr	r3, [pc, #40]	@ (8004164 <SAIx_In_Init+0x15c>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	4b08      	ldr	r3, [pc, #32]	@ (8004164 <SAIx_In_Init+0x15c>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004148:	601a      	str	r2, [r3, #0]

  /* Enable SAI peripheral */
  __HAL_SAI_ENABLE(&haudio_in_sai);
 800414a:	4b08      	ldr	r3, [pc, #32]	@ (800416c <SAIx_In_Init+0x164>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	4b06      	ldr	r3, [pc, #24]	@ (800416c <SAIx_In_Init+0x164>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004158:	601a      	str	r2, [r3, #0]
}
 800415a:	bf00      	nop
 800415c:	3710      	adds	r7, #16
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	20000750 	.word	0x20000750
 8004168:	40015c04 	.word	0x40015c04
 800416c:	200007d4 	.word	0x200007d4
 8004170:	40015c24 	.word	0x40015c24

08004174 <SAIx_In_DeInit>:
/**
  * @brief  Deinitializes the output Audio Codec audio interface (SAI).
  * @retval None
  */
static void SAIx_In_DeInit(void)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	af00      	add	r7, sp, #0
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8004178:	4b07      	ldr	r3, [pc, #28]	@ (8004198 <SAIx_In_DeInit+0x24>)
 800417a:	4a08      	ldr	r2, [pc, #32]	@ (800419c <SAIx_In_DeInit+0x28>)
 800417c:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 800417e:	4b06      	ldr	r3, [pc, #24]	@ (8004198 <SAIx_In_DeInit+0x24>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	4b04      	ldr	r3, [pc, #16]	@ (8004198 <SAIx_In_DeInit+0x24>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800418c:	601a      	str	r2, [r3, #0]

  HAL_SAI_DeInit(&haudio_in_sai);
 800418e:	4802      	ldr	r0, [pc, #8]	@ (8004198 <SAIx_In_DeInit+0x24>)
 8004190:	f003 fb9c 	bl	80078cc <HAL_SAI_DeInit>
}
 8004194:	bf00      	nop
 8004196:	bd80      	pop	{r7, pc}
 8004198:	200007d4 	.word	0x200007d4
 800419c:	40015c24 	.word	0x40015c24

080041a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80041a4:	2003      	movs	r0, #3
 80041a6:	f000 f94d 	bl	8004444 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80041aa:	2000      	movs	r0, #0
 80041ac:	f000 f806 	bl	80041bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80041b0:	f7fd fd1c 	bl	8001bec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80041b4:	2300      	movs	r3, #0
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	bd80      	pop	{r7, pc}
	...

080041bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80041c4:	4b12      	ldr	r3, [pc, #72]	@ (8004210 <HAL_InitTick+0x54>)
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	4b12      	ldr	r3, [pc, #72]	@ (8004214 <HAL_InitTick+0x58>)
 80041ca:	781b      	ldrb	r3, [r3, #0]
 80041cc:	4619      	mov	r1, r3
 80041ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80041d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80041d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80041da:	4618      	mov	r0, r3
 80041dc:	f000 f967 	bl	80044ae <HAL_SYSTICK_Config>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d001      	beq.n	80041ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e00e      	b.n	8004208 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2b0f      	cmp	r3, #15
 80041ee:	d80a      	bhi.n	8004206 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80041f0:	2200      	movs	r2, #0
 80041f2:	6879      	ldr	r1, [r7, #4]
 80041f4:	f04f 30ff 	mov.w	r0, #4294967295
 80041f8:	f000 f92f 	bl	800445a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80041fc:	4a06      	ldr	r2, [pc, #24]	@ (8004218 <HAL_InitTick+0x5c>)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004202:	2300      	movs	r3, #0
 8004204:	e000      	b.n	8004208 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
}
 8004208:	4618      	mov	r0, r3
 800420a:	3708      	adds	r7, #8
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}
 8004210:	20000000 	.word	0x20000000
 8004214:	2000003c 	.word	0x2000003c
 8004218:	20000038 	.word	0x20000038

0800421c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800421c:	b480      	push	{r7}
 800421e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004220:	4b06      	ldr	r3, [pc, #24]	@ (800423c <HAL_IncTick+0x20>)
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	461a      	mov	r2, r3
 8004226:	4b06      	ldr	r3, [pc, #24]	@ (8004240 <HAL_IncTick+0x24>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4413      	add	r3, r2
 800422c:	4a04      	ldr	r2, [pc, #16]	@ (8004240 <HAL_IncTick+0x24>)
 800422e:	6013      	str	r3, [r2, #0]
}
 8004230:	bf00      	nop
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	2000003c 	.word	0x2000003c
 8004240:	20000918 	.word	0x20000918

08004244 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004244:	b480      	push	{r7}
 8004246:	af00      	add	r7, sp, #0
  return uwTick;
 8004248:	4b03      	ldr	r3, [pc, #12]	@ (8004258 <HAL_GetTick+0x14>)
 800424a:	681b      	ldr	r3, [r3, #0]
}
 800424c:	4618      	mov	r0, r3
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr
 8004256:	bf00      	nop
 8004258:	20000918 	.word	0x20000918

0800425c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004264:	f7ff ffee 	bl	8004244 <HAL_GetTick>
 8004268:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004274:	d005      	beq.n	8004282 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004276:	4b0a      	ldr	r3, [pc, #40]	@ (80042a0 <HAL_Delay+0x44>)
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	461a      	mov	r2, r3
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	4413      	add	r3, r2
 8004280:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004282:	bf00      	nop
 8004284:	f7ff ffde 	bl	8004244 <HAL_GetTick>
 8004288:	4602      	mov	r2, r0
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	68fa      	ldr	r2, [r7, #12]
 8004290:	429a      	cmp	r2, r3
 8004292:	d8f7      	bhi.n	8004284 <HAL_Delay+0x28>
  {
  }
}
 8004294:	bf00      	nop
 8004296:	bf00      	nop
 8004298:	3710      	adds	r7, #16
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	2000003c 	.word	0x2000003c

080042a4 <__NVIC_SetPriorityGrouping>:
{
 80042a4:	b480      	push	{r7}
 80042a6:	b085      	sub	sp, #20
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f003 0307 	and.w	r3, r3, #7
 80042b2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80042b4:	4b0b      	ldr	r3, [pc, #44]	@ (80042e4 <__NVIC_SetPriorityGrouping+0x40>)
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80042ba:	68ba      	ldr	r2, [r7, #8]
 80042bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80042c0:	4013      	ands	r3, r2
 80042c2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80042cc:	4b06      	ldr	r3, [pc, #24]	@ (80042e8 <__NVIC_SetPriorityGrouping+0x44>)
 80042ce:	4313      	orrs	r3, r2
 80042d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80042d2:	4a04      	ldr	r2, [pc, #16]	@ (80042e4 <__NVIC_SetPriorityGrouping+0x40>)
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	60d3      	str	r3, [r2, #12]
}
 80042d8:	bf00      	nop
 80042da:	3714      	adds	r7, #20
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr
 80042e4:	e000ed00 	.word	0xe000ed00
 80042e8:	05fa0000 	.word	0x05fa0000

080042ec <__NVIC_GetPriorityGrouping>:
{
 80042ec:	b480      	push	{r7}
 80042ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80042f0:	4b04      	ldr	r3, [pc, #16]	@ (8004304 <__NVIC_GetPriorityGrouping+0x18>)
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	0a1b      	lsrs	r3, r3, #8
 80042f6:	f003 0307 	and.w	r3, r3, #7
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr
 8004304:	e000ed00 	.word	0xe000ed00

08004308 <__NVIC_EnableIRQ>:
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	4603      	mov	r3, r0
 8004310:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004316:	2b00      	cmp	r3, #0
 8004318:	db0b      	blt.n	8004332 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800431a:	79fb      	ldrb	r3, [r7, #7]
 800431c:	f003 021f 	and.w	r2, r3, #31
 8004320:	4907      	ldr	r1, [pc, #28]	@ (8004340 <__NVIC_EnableIRQ+0x38>)
 8004322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004326:	095b      	lsrs	r3, r3, #5
 8004328:	2001      	movs	r0, #1
 800432a:	fa00 f202 	lsl.w	r2, r0, r2
 800432e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004332:	bf00      	nop
 8004334:	370c      	adds	r7, #12
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr
 800433e:	bf00      	nop
 8004340:	e000e100 	.word	0xe000e100

08004344 <__NVIC_SetPriority>:
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	4603      	mov	r3, r0
 800434c:	6039      	str	r1, [r7, #0]
 800434e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004354:	2b00      	cmp	r3, #0
 8004356:	db0a      	blt.n	800436e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	b2da      	uxtb	r2, r3
 800435c:	490c      	ldr	r1, [pc, #48]	@ (8004390 <__NVIC_SetPriority+0x4c>)
 800435e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004362:	0112      	lsls	r2, r2, #4
 8004364:	b2d2      	uxtb	r2, r2
 8004366:	440b      	add	r3, r1
 8004368:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800436c:	e00a      	b.n	8004384 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	b2da      	uxtb	r2, r3
 8004372:	4908      	ldr	r1, [pc, #32]	@ (8004394 <__NVIC_SetPriority+0x50>)
 8004374:	79fb      	ldrb	r3, [r7, #7]
 8004376:	f003 030f 	and.w	r3, r3, #15
 800437a:	3b04      	subs	r3, #4
 800437c:	0112      	lsls	r2, r2, #4
 800437e:	b2d2      	uxtb	r2, r2
 8004380:	440b      	add	r3, r1
 8004382:	761a      	strb	r2, [r3, #24]
}
 8004384:	bf00      	nop
 8004386:	370c      	adds	r7, #12
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr
 8004390:	e000e100 	.word	0xe000e100
 8004394:	e000ed00 	.word	0xe000ed00

08004398 <NVIC_EncodePriority>:
{
 8004398:	b480      	push	{r7}
 800439a:	b089      	sub	sp, #36	@ 0x24
 800439c:	af00      	add	r7, sp, #0
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f003 0307 	and.w	r3, r3, #7
 80043aa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80043ac:	69fb      	ldr	r3, [r7, #28]
 80043ae:	f1c3 0307 	rsb	r3, r3, #7
 80043b2:	2b04      	cmp	r3, #4
 80043b4:	bf28      	it	cs
 80043b6:	2304      	movcs	r3, #4
 80043b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	3304      	adds	r3, #4
 80043be:	2b06      	cmp	r3, #6
 80043c0:	d902      	bls.n	80043c8 <NVIC_EncodePriority+0x30>
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	3b03      	subs	r3, #3
 80043c6:	e000      	b.n	80043ca <NVIC_EncodePriority+0x32>
 80043c8:	2300      	movs	r3, #0
 80043ca:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043cc:	f04f 32ff 	mov.w	r2, #4294967295
 80043d0:	69bb      	ldr	r3, [r7, #24]
 80043d2:	fa02 f303 	lsl.w	r3, r2, r3
 80043d6:	43da      	mvns	r2, r3
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	401a      	ands	r2, r3
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80043e0:	f04f 31ff 	mov.w	r1, #4294967295
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	fa01 f303 	lsl.w	r3, r1, r3
 80043ea:	43d9      	mvns	r1, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043f0:	4313      	orrs	r3, r2
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3724      	adds	r7, #36	@ 0x24
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr
	...

08004400 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b082      	sub	sp, #8
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	3b01      	subs	r3, #1
 800440c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004410:	d301      	bcc.n	8004416 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004412:	2301      	movs	r3, #1
 8004414:	e00f      	b.n	8004436 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004416:	4a0a      	ldr	r2, [pc, #40]	@ (8004440 <SysTick_Config+0x40>)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	3b01      	subs	r3, #1
 800441c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800441e:	210f      	movs	r1, #15
 8004420:	f04f 30ff 	mov.w	r0, #4294967295
 8004424:	f7ff ff8e 	bl	8004344 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004428:	4b05      	ldr	r3, [pc, #20]	@ (8004440 <SysTick_Config+0x40>)
 800442a:	2200      	movs	r2, #0
 800442c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800442e:	4b04      	ldr	r3, [pc, #16]	@ (8004440 <SysTick_Config+0x40>)
 8004430:	2207      	movs	r2, #7
 8004432:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004434:	2300      	movs	r3, #0
}
 8004436:	4618      	mov	r0, r3
 8004438:	3708      	adds	r7, #8
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	e000e010 	.word	0xe000e010

08004444 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b082      	sub	sp, #8
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f7ff ff29 	bl	80042a4 <__NVIC_SetPriorityGrouping>
}
 8004452:	bf00      	nop
 8004454:	3708      	adds	r7, #8
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}

0800445a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800445a:	b580      	push	{r7, lr}
 800445c:	b086      	sub	sp, #24
 800445e:	af00      	add	r7, sp, #0
 8004460:	4603      	mov	r3, r0
 8004462:	60b9      	str	r1, [r7, #8]
 8004464:	607a      	str	r2, [r7, #4]
 8004466:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004468:	2300      	movs	r3, #0
 800446a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800446c:	f7ff ff3e 	bl	80042ec <__NVIC_GetPriorityGrouping>
 8004470:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	68b9      	ldr	r1, [r7, #8]
 8004476:	6978      	ldr	r0, [r7, #20]
 8004478:	f7ff ff8e 	bl	8004398 <NVIC_EncodePriority>
 800447c:	4602      	mov	r2, r0
 800447e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004482:	4611      	mov	r1, r2
 8004484:	4618      	mov	r0, r3
 8004486:	f7ff ff5d 	bl	8004344 <__NVIC_SetPriority>
}
 800448a:	bf00      	nop
 800448c:	3718      	adds	r7, #24
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}

08004492 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004492:	b580      	push	{r7, lr}
 8004494:	b082      	sub	sp, #8
 8004496:	af00      	add	r7, sp, #0
 8004498:	4603      	mov	r3, r0
 800449a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800449c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044a0:	4618      	mov	r0, r3
 80044a2:	f7ff ff31 	bl	8004308 <__NVIC_EnableIRQ>
}
 80044a6:	bf00      	nop
 80044a8:	3708      	adds	r7, #8
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}

080044ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80044ae:	b580      	push	{r7, lr}
 80044b0:	b082      	sub	sp, #8
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f7ff ffa2 	bl	8004400 <SysTick_Config>
 80044bc:	4603      	mov	r3, r0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3708      	adds	r7, #8
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
	...

080044c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b086      	sub	sp, #24
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80044d0:	2300      	movs	r3, #0
 80044d2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80044d4:	f7ff feb6 	bl	8004244 <HAL_GetTick>
 80044d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d101      	bne.n	80044e4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e099      	b.n	8004618 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2202      	movs	r2, #2
 80044e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f022 0201 	bic.w	r2, r2, #1
 8004502:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004504:	e00f      	b.n	8004526 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004506:	f7ff fe9d 	bl	8004244 <HAL_GetTick>
 800450a:	4602      	mov	r2, r0
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	2b05      	cmp	r3, #5
 8004512:	d908      	bls.n	8004526 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2220      	movs	r2, #32
 8004518:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2203      	movs	r2, #3
 800451e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e078      	b.n	8004618 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0301 	and.w	r3, r3, #1
 8004530:	2b00      	cmp	r3, #0
 8004532:	d1e8      	bne.n	8004506 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800453c:	697a      	ldr	r2, [r7, #20]
 800453e:	4b38      	ldr	r3, [pc, #224]	@ (8004620 <HAL_DMA_Init+0x158>)
 8004540:	4013      	ands	r3, r2
 8004542:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	685a      	ldr	r2, [r3, #4]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004552:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	691b      	ldr	r3, [r3, #16]
 8004558:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800455e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	699b      	ldr	r3, [r3, #24]
 8004564:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800456a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6a1b      	ldr	r3, [r3, #32]
 8004570:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004572:	697a      	ldr	r2, [r7, #20]
 8004574:	4313      	orrs	r3, r2
 8004576:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800457c:	2b04      	cmp	r3, #4
 800457e:	d107      	bne.n	8004590 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004588:	4313      	orrs	r3, r2
 800458a:	697a      	ldr	r2, [r7, #20]
 800458c:	4313      	orrs	r3, r2
 800458e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	697a      	ldr	r2, [r7, #20]
 8004596:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	695b      	ldr	r3, [r3, #20]
 800459e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	f023 0307 	bic.w	r3, r3, #7
 80045a6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ac:	697a      	ldr	r2, [r7, #20]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045b6:	2b04      	cmp	r3, #4
 80045b8:	d117      	bne.n	80045ea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045be:	697a      	ldr	r2, [r7, #20]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d00e      	beq.n	80045ea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f000 fb73 	bl	8004cb8 <DMA_CheckFifoParam>
 80045d2:	4603      	mov	r3, r0
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d008      	beq.n	80045ea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2240      	movs	r2, #64	@ 0x40
 80045dc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80045e6:	2301      	movs	r3, #1
 80045e8:	e016      	b.n	8004618 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	697a      	ldr	r2, [r7, #20]
 80045f0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f000 fb2a 	bl	8004c4c <DMA_CalcBaseAndBitshift>
 80045f8:	4603      	mov	r3, r0
 80045fa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004600:	223f      	movs	r2, #63	@ 0x3f
 8004602:	409a      	lsls	r2, r3
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2200      	movs	r2, #0
 800460c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2201      	movs	r2, #1
 8004612:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004616:	2300      	movs	r3, #0
}
 8004618:	4618      	mov	r0, r3
 800461a:	3718      	adds	r7, #24
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}
 8004620:	f010803f 	.word	0xf010803f

08004624 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b084      	sub	sp, #16
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d101      	bne.n	8004636 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e050      	b.n	80046d8 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800463c:	b2db      	uxtb	r3, r3
 800463e:	2b02      	cmp	r3, #2
 8004640:	d101      	bne.n	8004646 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8004642:	2302      	movs	r3, #2
 8004644:	e048      	b.n	80046d8 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f022 0201 	bic.w	r2, r2, #1
 8004654:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	2200      	movs	r2, #0
 800465c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	2200      	movs	r2, #0
 8004664:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	2200      	movs	r2, #0
 800466c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	2200      	movs	r2, #0
 8004674:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	2200      	movs	r2, #0
 800467c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	2221      	movs	r2, #33	@ 0x21
 8004684:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f000 fae0 	bl	8004c4c <DMA_CalcBaseAndBitshift>
 800468c:	4603      	mov	r3, r0
 800468e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004694:	223f      	movs	r2, #63	@ 0x3f
 8004696:	409a      	lsls	r2, r3
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2200      	movs	r2, #0
 80046a0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2200      	movs	r2, #0
 80046c4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2200      	movs	r2, #0
 80046ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80046d6:	2300      	movs	r3, #0
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3710      	adds	r7, #16
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}

080046e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b086      	sub	sp, #24
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	607a      	str	r2, [r7, #4]
 80046ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046ee:	2300      	movs	r3, #0
 80046f0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046f6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d101      	bne.n	8004706 <HAL_DMA_Start_IT+0x26>
 8004702:	2302      	movs	r3, #2
 8004704:	e048      	b.n	8004798 <HAL_DMA_Start_IT+0xb8>
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2201      	movs	r2, #1
 800470a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004714:	b2db      	uxtb	r3, r3
 8004716:	2b01      	cmp	r3, #1
 8004718:	d137      	bne.n	800478a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2202      	movs	r2, #2
 800471e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2200      	movs	r2, #0
 8004726:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	68b9      	ldr	r1, [r7, #8]
 800472e:	68f8      	ldr	r0, [r7, #12]
 8004730:	f000 fa5e 	bl	8004bf0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004738:	223f      	movs	r2, #63	@ 0x3f
 800473a:	409a      	lsls	r2, r3
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f042 0216 	orr.w	r2, r2, #22
 800474e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	695a      	ldr	r2, [r3, #20]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800475e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004764:	2b00      	cmp	r3, #0
 8004766:	d007      	beq.n	8004778 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f042 0208 	orr.w	r2, r2, #8
 8004776:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f042 0201 	orr.w	r2, r2, #1
 8004786:	601a      	str	r2, [r3, #0]
 8004788:	e005      	b.n	8004796 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2200      	movs	r2, #0
 800478e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004792:	2302      	movs	r3, #2
 8004794:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004796:	7dfb      	ldrb	r3, [r7, #23]
}
 8004798:	4618      	mov	r0, r3
 800479a:	3718      	adds	r7, #24
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}

080047a0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047ac:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80047ae:	f7ff fd49 	bl	8004244 <HAL_GetTick>
 80047b2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	2b02      	cmp	r3, #2
 80047be:	d008      	beq.n	80047d2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2280      	movs	r2, #128	@ 0x80
 80047c4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e052      	b.n	8004878 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f022 0216 	bic.w	r2, r2, #22
 80047e0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	695a      	ldr	r2, [r3, #20]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80047f0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d103      	bne.n	8004802 <HAL_DMA_Abort+0x62>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d007      	beq.n	8004812 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f022 0208 	bic.w	r2, r2, #8
 8004810:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f022 0201 	bic.w	r2, r2, #1
 8004820:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004822:	e013      	b.n	800484c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004824:	f7ff fd0e 	bl	8004244 <HAL_GetTick>
 8004828:	4602      	mov	r2, r0
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	2b05      	cmp	r3, #5
 8004830:	d90c      	bls.n	800484c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2220      	movs	r2, #32
 8004836:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2203      	movs	r2, #3
 800483c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8004848:	2303      	movs	r3, #3
 800484a:	e015      	b.n	8004878 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 0301 	and.w	r3, r3, #1
 8004856:	2b00      	cmp	r3, #0
 8004858:	d1e4      	bne.n	8004824 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800485e:	223f      	movs	r2, #63	@ 0x3f
 8004860:	409a      	lsls	r2, r3
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2201      	movs	r2, #1
 800486a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8004876:	2300      	movs	r3, #0
}
 8004878:	4618      	mov	r0, r3
 800487a:	3710      	adds	r7, #16
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}

08004880 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800488e:	b2db      	uxtb	r3, r3
 8004890:	2b02      	cmp	r3, #2
 8004892:	d004      	beq.n	800489e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2280      	movs	r2, #128	@ 0x80
 8004898:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e00c      	b.n	80048b8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2205      	movs	r2, #5
 80048a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f022 0201 	bic.w	r2, r2, #1
 80048b4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80048b6:	2300      	movs	r3, #0
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	370c      	adds	r7, #12
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr

080048c4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b086      	sub	sp, #24
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80048cc:	2300      	movs	r3, #0
 80048ce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80048d0:	4b8e      	ldr	r3, [pc, #568]	@ (8004b0c <HAL_DMA_IRQHandler+0x248>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a8e      	ldr	r2, [pc, #568]	@ (8004b10 <HAL_DMA_IRQHandler+0x24c>)
 80048d6:	fba2 2303 	umull	r2, r3, r2, r3
 80048da:	0a9b      	lsrs	r3, r3, #10
 80048dc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048e2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048ee:	2208      	movs	r2, #8
 80048f0:	409a      	lsls	r2, r3
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	4013      	ands	r3, r2
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d01a      	beq.n	8004930 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 0304 	and.w	r3, r3, #4
 8004904:	2b00      	cmp	r3, #0
 8004906:	d013      	beq.n	8004930 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f022 0204 	bic.w	r2, r2, #4
 8004916:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800491c:	2208      	movs	r2, #8
 800491e:	409a      	lsls	r2, r3
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004928:	f043 0201 	orr.w	r2, r3, #1
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004934:	2201      	movs	r2, #1
 8004936:	409a      	lsls	r2, r3
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	4013      	ands	r3, r2
 800493c:	2b00      	cmp	r3, #0
 800493e:	d012      	beq.n	8004966 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	695b      	ldr	r3, [r3, #20]
 8004946:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800494a:	2b00      	cmp	r3, #0
 800494c:	d00b      	beq.n	8004966 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004952:	2201      	movs	r2, #1
 8004954:	409a      	lsls	r2, r3
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800495e:	f043 0202 	orr.w	r2, r3, #2
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800496a:	2204      	movs	r2, #4
 800496c:	409a      	lsls	r2, r3
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	4013      	ands	r3, r2
 8004972:	2b00      	cmp	r3, #0
 8004974:	d012      	beq.n	800499c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 0302 	and.w	r3, r3, #2
 8004980:	2b00      	cmp	r3, #0
 8004982:	d00b      	beq.n	800499c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004988:	2204      	movs	r2, #4
 800498a:	409a      	lsls	r2, r3
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004994:	f043 0204 	orr.w	r2, r3, #4
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049a0:	2210      	movs	r2, #16
 80049a2:	409a      	lsls	r2, r3
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	4013      	ands	r3, r2
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d043      	beq.n	8004a34 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 0308 	and.w	r3, r3, #8
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d03c      	beq.n	8004a34 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049be:	2210      	movs	r2, #16
 80049c0:	409a      	lsls	r2, r3
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d018      	beq.n	8004a06 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d108      	bne.n	80049f4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d024      	beq.n	8004a34 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	4798      	blx	r3
 80049f2:	e01f      	b.n	8004a34 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d01b      	beq.n	8004a34 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	4798      	blx	r3
 8004a04:	e016      	b.n	8004a34 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d107      	bne.n	8004a24 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f022 0208 	bic.w	r2, r2, #8
 8004a22:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d003      	beq.n	8004a34 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a38:	2220      	movs	r2, #32
 8004a3a:	409a      	lsls	r2, r3
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	4013      	ands	r3, r2
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	f000 808f 	beq.w	8004b64 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 0310 	and.w	r3, r3, #16
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	f000 8087 	beq.w	8004b64 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a5a:	2220      	movs	r2, #32
 8004a5c:	409a      	lsls	r2, r3
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	2b05      	cmp	r3, #5
 8004a6c:	d136      	bne.n	8004adc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f022 0216 	bic.w	r2, r2, #22
 8004a7c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	695a      	ldr	r2, [r3, #20]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004a8c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d103      	bne.n	8004a9e <HAL_DMA_IRQHandler+0x1da>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d007      	beq.n	8004aae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f022 0208 	bic.w	r2, r2, #8
 8004aac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ab2:	223f      	movs	r2, #63	@ 0x3f
 8004ab4:	409a      	lsls	r2, r3
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2201      	movs	r2, #1
 8004abe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d07e      	beq.n	8004bd0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	4798      	blx	r3
        }
        return;
 8004ada:	e079      	b.n	8004bd0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d01d      	beq.n	8004b26 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d10d      	bne.n	8004b14 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d031      	beq.n	8004b64 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	4798      	blx	r3
 8004b08:	e02c      	b.n	8004b64 <HAL_DMA_IRQHandler+0x2a0>
 8004b0a:	bf00      	nop
 8004b0c:	20000000 	.word	0x20000000
 8004b10:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d023      	beq.n	8004b64 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	4798      	blx	r3
 8004b24:	e01e      	b.n	8004b64 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d10f      	bne.n	8004b54 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f022 0210 	bic.w	r2, r2, #16
 8004b42:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d003      	beq.n	8004b64 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d032      	beq.n	8004bd2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b70:	f003 0301 	and.w	r3, r3, #1
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d022      	beq.n	8004bbe <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2205      	movs	r2, #5
 8004b7c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f022 0201 	bic.w	r2, r2, #1
 8004b8e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	3301      	adds	r3, #1
 8004b94:	60bb      	str	r3, [r7, #8]
 8004b96:	697a      	ldr	r2, [r7, #20]
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d307      	bcc.n	8004bac <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 0301 	and.w	r3, r3, #1
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d1f2      	bne.n	8004b90 <HAL_DMA_IRQHandler+0x2cc>
 8004baa:	e000      	b.n	8004bae <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004bac:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d005      	beq.n	8004bd2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	4798      	blx	r3
 8004bce:	e000      	b.n	8004bd2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004bd0:	bf00      	nop
    }
  }
}
 8004bd2:	3718      	adds	r7, #24
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}

08004bd8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	370c      	adds	r7, #12
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr

08004bf0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b085      	sub	sp, #20
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	60f8      	str	r0, [r7, #12]
 8004bf8:	60b9      	str	r1, [r7, #8]
 8004bfa:	607a      	str	r2, [r7, #4]
 8004bfc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004c0c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	683a      	ldr	r2, [r7, #0]
 8004c14:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	2b40      	cmp	r3, #64	@ 0x40
 8004c1c:	d108      	bne.n	8004c30 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	68ba      	ldr	r2, [r7, #8]
 8004c2c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004c2e:	e007      	b.n	8004c40 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	68ba      	ldr	r2, [r7, #8]
 8004c36:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	60da      	str	r2, [r3, #12]
}
 8004c40:	bf00      	nop
 8004c42:	3714      	adds	r7, #20
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr

08004c4c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b085      	sub	sp, #20
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	3b10      	subs	r3, #16
 8004c5c:	4a13      	ldr	r2, [pc, #76]	@ (8004cac <DMA_CalcBaseAndBitshift+0x60>)
 8004c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c62:	091b      	lsrs	r3, r3, #4
 8004c64:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004c66:	4a12      	ldr	r2, [pc, #72]	@ (8004cb0 <DMA_CalcBaseAndBitshift+0x64>)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	4413      	add	r3, r2
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	461a      	mov	r2, r3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2b03      	cmp	r3, #3
 8004c78:	d908      	bls.n	8004c8c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	461a      	mov	r2, r3
 8004c80:	4b0c      	ldr	r3, [pc, #48]	@ (8004cb4 <DMA_CalcBaseAndBitshift+0x68>)
 8004c82:	4013      	ands	r3, r2
 8004c84:	1d1a      	adds	r2, r3, #4
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	659a      	str	r2, [r3, #88]	@ 0x58
 8004c8a:	e006      	b.n	8004c9a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	461a      	mov	r2, r3
 8004c92:	4b08      	ldr	r3, [pc, #32]	@ (8004cb4 <DMA_CalcBaseAndBitshift+0x68>)
 8004c94:	4013      	ands	r3, r2
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3714      	adds	r7, #20
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr
 8004caa:	bf00      	nop
 8004cac:	aaaaaaab 	.word	0xaaaaaaab
 8004cb0:	08010fd0 	.word	0x08010fd0
 8004cb4:	fffffc00 	.word	0xfffffc00

08004cb8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b085      	sub	sp, #20
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cc8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	699b      	ldr	r3, [r3, #24]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d11f      	bne.n	8004d12 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	2b03      	cmp	r3, #3
 8004cd6:	d856      	bhi.n	8004d86 <DMA_CheckFifoParam+0xce>
 8004cd8:	a201      	add	r2, pc, #4	@ (adr r2, 8004ce0 <DMA_CheckFifoParam+0x28>)
 8004cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cde:	bf00      	nop
 8004ce0:	08004cf1 	.word	0x08004cf1
 8004ce4:	08004d03 	.word	0x08004d03
 8004ce8:	08004cf1 	.word	0x08004cf1
 8004cec:	08004d87 	.word	0x08004d87
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cf4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d046      	beq.n	8004d8a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d00:	e043      	b.n	8004d8a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d06:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004d0a:	d140      	bne.n	8004d8e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d10:	e03d      	b.n	8004d8e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	699b      	ldr	r3, [r3, #24]
 8004d16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d1a:	d121      	bne.n	8004d60 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	2b03      	cmp	r3, #3
 8004d20:	d837      	bhi.n	8004d92 <DMA_CheckFifoParam+0xda>
 8004d22:	a201      	add	r2, pc, #4	@ (adr r2, 8004d28 <DMA_CheckFifoParam+0x70>)
 8004d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d28:	08004d39 	.word	0x08004d39
 8004d2c:	08004d3f 	.word	0x08004d3f
 8004d30:	08004d39 	.word	0x08004d39
 8004d34:	08004d51 	.word	0x08004d51
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	73fb      	strb	r3, [r7, #15]
      break;
 8004d3c:	e030      	b.n	8004da0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d42:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d025      	beq.n	8004d96 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d4e:	e022      	b.n	8004d96 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d54:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004d58:	d11f      	bne.n	8004d9a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004d5e:	e01c      	b.n	8004d9a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	2b02      	cmp	r3, #2
 8004d64:	d903      	bls.n	8004d6e <DMA_CheckFifoParam+0xb6>
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	2b03      	cmp	r3, #3
 8004d6a:	d003      	beq.n	8004d74 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004d6c:	e018      	b.n	8004da0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	73fb      	strb	r3, [r7, #15]
      break;
 8004d72:	e015      	b.n	8004da0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d78:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d00e      	beq.n	8004d9e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	73fb      	strb	r3, [r7, #15]
      break;
 8004d84:	e00b      	b.n	8004d9e <DMA_CheckFifoParam+0xe6>
      break;
 8004d86:	bf00      	nop
 8004d88:	e00a      	b.n	8004da0 <DMA_CheckFifoParam+0xe8>
      break;
 8004d8a:	bf00      	nop
 8004d8c:	e008      	b.n	8004da0 <DMA_CheckFifoParam+0xe8>
      break;
 8004d8e:	bf00      	nop
 8004d90:	e006      	b.n	8004da0 <DMA_CheckFifoParam+0xe8>
      break;
 8004d92:	bf00      	nop
 8004d94:	e004      	b.n	8004da0 <DMA_CheckFifoParam+0xe8>
      break;
 8004d96:	bf00      	nop
 8004d98:	e002      	b.n	8004da0 <DMA_CheckFifoParam+0xe8>
      break;   
 8004d9a:	bf00      	nop
 8004d9c:	e000      	b.n	8004da0 <DMA_CheckFifoParam+0xe8>
      break;
 8004d9e:	bf00      	nop
    }
  } 
  
  return status; 
 8004da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3714      	adds	r7, #20
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr
 8004dae:	bf00      	nop

08004db0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b089      	sub	sp, #36	@ 0x24
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8004dca:	2300      	movs	r3, #0
 8004dcc:	61fb      	str	r3, [r7, #28]
 8004dce:	e175      	b.n	80050bc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	697a      	ldr	r2, [r7, #20]
 8004de0:	4013      	ands	r3, r2
 8004de2:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8004de4:	693a      	ldr	r2, [r7, #16]
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	429a      	cmp	r2, r3
 8004dea:	f040 8164 	bne.w	80050b6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	f003 0303 	and.w	r3, r3, #3
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d005      	beq.n	8004e06 <HAL_GPIO_Init+0x56>
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	f003 0303 	and.w	r3, r3, #3
 8004e02:	2b02      	cmp	r3, #2
 8004e04:	d130      	bne.n	8004e68 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	005b      	lsls	r3, r3, #1
 8004e10:	2203      	movs	r2, #3
 8004e12:	fa02 f303 	lsl.w	r3, r2, r3
 8004e16:	43db      	mvns	r3, r3
 8004e18:	69ba      	ldr	r2, [r7, #24]
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	68da      	ldr	r2, [r3, #12]
 8004e22:	69fb      	ldr	r3, [r7, #28]
 8004e24:	005b      	lsls	r3, r3, #1
 8004e26:	fa02 f303 	lsl.w	r3, r2, r3
 8004e2a:	69ba      	ldr	r2, [r7, #24]
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	69ba      	ldr	r2, [r7, #24]
 8004e34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	fa02 f303 	lsl.w	r3, r2, r3
 8004e44:	43db      	mvns	r3, r3
 8004e46:	69ba      	ldr	r2, [r7, #24]
 8004e48:	4013      	ands	r3, r2
 8004e4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	091b      	lsrs	r3, r3, #4
 8004e52:	f003 0201 	and.w	r2, r3, #1
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	fa02 f303 	lsl.w	r3, r2, r3
 8004e5c:	69ba      	ldr	r2, [r7, #24]
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	69ba      	ldr	r2, [r7, #24]
 8004e66:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	f003 0303 	and.w	r3, r3, #3
 8004e70:	2b03      	cmp	r3, #3
 8004e72:	d017      	beq.n	8004ea4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004e7a:	69fb      	ldr	r3, [r7, #28]
 8004e7c:	005b      	lsls	r3, r3, #1
 8004e7e:	2203      	movs	r2, #3
 8004e80:	fa02 f303 	lsl.w	r3, r2, r3
 8004e84:	43db      	mvns	r3, r3
 8004e86:	69ba      	ldr	r2, [r7, #24]
 8004e88:	4013      	ands	r3, r2
 8004e8a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	689a      	ldr	r2, [r3, #8]
 8004e90:	69fb      	ldr	r3, [r7, #28]
 8004e92:	005b      	lsls	r3, r3, #1
 8004e94:	fa02 f303 	lsl.w	r3, r2, r3
 8004e98:	69ba      	ldr	r2, [r7, #24]
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	69ba      	ldr	r2, [r7, #24]
 8004ea2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	f003 0303 	and.w	r3, r3, #3
 8004eac:	2b02      	cmp	r3, #2
 8004eae:	d123      	bne.n	8004ef8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	08da      	lsrs	r2, r3, #3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	3208      	adds	r2, #8
 8004eb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004ebe:	69fb      	ldr	r3, [r7, #28]
 8004ec0:	f003 0307 	and.w	r3, r3, #7
 8004ec4:	009b      	lsls	r3, r3, #2
 8004ec6:	220f      	movs	r2, #15
 8004ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ecc:	43db      	mvns	r3, r3
 8004ece:	69ba      	ldr	r2, [r7, #24]
 8004ed0:	4013      	ands	r3, r2
 8004ed2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	691a      	ldr	r2, [r3, #16]
 8004ed8:	69fb      	ldr	r3, [r7, #28]
 8004eda:	f003 0307 	and.w	r3, r3, #7
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee4:	69ba      	ldr	r2, [r7, #24]
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	08da      	lsrs	r2, r3, #3
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	3208      	adds	r2, #8
 8004ef2:	69b9      	ldr	r1, [r7, #24]
 8004ef4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004efe:	69fb      	ldr	r3, [r7, #28]
 8004f00:	005b      	lsls	r3, r3, #1
 8004f02:	2203      	movs	r2, #3
 8004f04:	fa02 f303 	lsl.w	r3, r2, r3
 8004f08:	43db      	mvns	r3, r3
 8004f0a:	69ba      	ldr	r2, [r7, #24]
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	f003 0203 	and.w	r2, r3, #3
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	005b      	lsls	r3, r3, #1
 8004f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f20:	69ba      	ldr	r2, [r7, #24]
 8004f22:	4313      	orrs	r3, r2
 8004f24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	69ba      	ldr	r2, [r7, #24]
 8004f2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	f000 80be 	beq.w	80050b6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f3a:	4b66      	ldr	r3, [pc, #408]	@ (80050d4 <HAL_GPIO_Init+0x324>)
 8004f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f3e:	4a65      	ldr	r2, [pc, #404]	@ (80050d4 <HAL_GPIO_Init+0x324>)
 8004f40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004f44:	6453      	str	r3, [r2, #68]	@ 0x44
 8004f46:	4b63      	ldr	r3, [pc, #396]	@ (80050d4 <HAL_GPIO_Init+0x324>)
 8004f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f4e:	60fb      	str	r3, [r7, #12]
 8004f50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004f52:	4a61      	ldr	r2, [pc, #388]	@ (80050d8 <HAL_GPIO_Init+0x328>)
 8004f54:	69fb      	ldr	r3, [r7, #28]
 8004f56:	089b      	lsrs	r3, r3, #2
 8004f58:	3302      	adds	r3, #2
 8004f5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004f60:	69fb      	ldr	r3, [r7, #28]
 8004f62:	f003 0303 	and.w	r3, r3, #3
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	220f      	movs	r2, #15
 8004f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f6e:	43db      	mvns	r3, r3
 8004f70:	69ba      	ldr	r2, [r7, #24]
 8004f72:	4013      	ands	r3, r2
 8004f74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4a58      	ldr	r2, [pc, #352]	@ (80050dc <HAL_GPIO_Init+0x32c>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d037      	beq.n	8004fee <HAL_GPIO_Init+0x23e>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4a57      	ldr	r2, [pc, #348]	@ (80050e0 <HAL_GPIO_Init+0x330>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d031      	beq.n	8004fea <HAL_GPIO_Init+0x23a>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4a56      	ldr	r2, [pc, #344]	@ (80050e4 <HAL_GPIO_Init+0x334>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d02b      	beq.n	8004fe6 <HAL_GPIO_Init+0x236>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4a55      	ldr	r2, [pc, #340]	@ (80050e8 <HAL_GPIO_Init+0x338>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d025      	beq.n	8004fe2 <HAL_GPIO_Init+0x232>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4a54      	ldr	r2, [pc, #336]	@ (80050ec <HAL_GPIO_Init+0x33c>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d01f      	beq.n	8004fde <HAL_GPIO_Init+0x22e>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a53      	ldr	r2, [pc, #332]	@ (80050f0 <HAL_GPIO_Init+0x340>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d019      	beq.n	8004fda <HAL_GPIO_Init+0x22a>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a52      	ldr	r2, [pc, #328]	@ (80050f4 <HAL_GPIO_Init+0x344>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d013      	beq.n	8004fd6 <HAL_GPIO_Init+0x226>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4a51      	ldr	r2, [pc, #324]	@ (80050f8 <HAL_GPIO_Init+0x348>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d00d      	beq.n	8004fd2 <HAL_GPIO_Init+0x222>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a50      	ldr	r2, [pc, #320]	@ (80050fc <HAL_GPIO_Init+0x34c>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d007      	beq.n	8004fce <HAL_GPIO_Init+0x21e>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a4f      	ldr	r2, [pc, #316]	@ (8005100 <HAL_GPIO_Init+0x350>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d101      	bne.n	8004fca <HAL_GPIO_Init+0x21a>
 8004fc6:	2309      	movs	r3, #9
 8004fc8:	e012      	b.n	8004ff0 <HAL_GPIO_Init+0x240>
 8004fca:	230a      	movs	r3, #10
 8004fcc:	e010      	b.n	8004ff0 <HAL_GPIO_Init+0x240>
 8004fce:	2308      	movs	r3, #8
 8004fd0:	e00e      	b.n	8004ff0 <HAL_GPIO_Init+0x240>
 8004fd2:	2307      	movs	r3, #7
 8004fd4:	e00c      	b.n	8004ff0 <HAL_GPIO_Init+0x240>
 8004fd6:	2306      	movs	r3, #6
 8004fd8:	e00a      	b.n	8004ff0 <HAL_GPIO_Init+0x240>
 8004fda:	2305      	movs	r3, #5
 8004fdc:	e008      	b.n	8004ff0 <HAL_GPIO_Init+0x240>
 8004fde:	2304      	movs	r3, #4
 8004fe0:	e006      	b.n	8004ff0 <HAL_GPIO_Init+0x240>
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	e004      	b.n	8004ff0 <HAL_GPIO_Init+0x240>
 8004fe6:	2302      	movs	r3, #2
 8004fe8:	e002      	b.n	8004ff0 <HAL_GPIO_Init+0x240>
 8004fea:	2301      	movs	r3, #1
 8004fec:	e000      	b.n	8004ff0 <HAL_GPIO_Init+0x240>
 8004fee:	2300      	movs	r3, #0
 8004ff0:	69fa      	ldr	r2, [r7, #28]
 8004ff2:	f002 0203 	and.w	r2, r2, #3
 8004ff6:	0092      	lsls	r2, r2, #2
 8004ff8:	4093      	lsls	r3, r2
 8004ffa:	69ba      	ldr	r2, [r7, #24]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005000:	4935      	ldr	r1, [pc, #212]	@ (80050d8 <HAL_GPIO_Init+0x328>)
 8005002:	69fb      	ldr	r3, [r7, #28]
 8005004:	089b      	lsrs	r3, r3, #2
 8005006:	3302      	adds	r3, #2
 8005008:	69ba      	ldr	r2, [r7, #24]
 800500a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800500e:	4b3d      	ldr	r3, [pc, #244]	@ (8005104 <HAL_GPIO_Init+0x354>)
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	43db      	mvns	r3, r3
 8005018:	69ba      	ldr	r2, [r7, #24]
 800501a:	4013      	ands	r3, r2
 800501c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d003      	beq.n	8005032 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800502a:	69ba      	ldr	r2, [r7, #24]
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	4313      	orrs	r3, r2
 8005030:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005032:	4a34      	ldr	r2, [pc, #208]	@ (8005104 <HAL_GPIO_Init+0x354>)
 8005034:	69bb      	ldr	r3, [r7, #24]
 8005036:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005038:	4b32      	ldr	r3, [pc, #200]	@ (8005104 <HAL_GPIO_Init+0x354>)
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	43db      	mvns	r3, r3
 8005042:	69ba      	ldr	r2, [r7, #24]
 8005044:	4013      	ands	r3, r2
 8005046:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005050:	2b00      	cmp	r3, #0
 8005052:	d003      	beq.n	800505c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005054:	69ba      	ldr	r2, [r7, #24]
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	4313      	orrs	r3, r2
 800505a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800505c:	4a29      	ldr	r2, [pc, #164]	@ (8005104 <HAL_GPIO_Init+0x354>)
 800505e:	69bb      	ldr	r3, [r7, #24]
 8005060:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005062:	4b28      	ldr	r3, [pc, #160]	@ (8005104 <HAL_GPIO_Init+0x354>)
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	43db      	mvns	r3, r3
 800506c:	69ba      	ldr	r2, [r7, #24]
 800506e:	4013      	ands	r3, r2
 8005070:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800507a:	2b00      	cmp	r3, #0
 800507c:	d003      	beq.n	8005086 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800507e:	69ba      	ldr	r2, [r7, #24]
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	4313      	orrs	r3, r2
 8005084:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005086:	4a1f      	ldr	r2, [pc, #124]	@ (8005104 <HAL_GPIO_Init+0x354>)
 8005088:	69bb      	ldr	r3, [r7, #24]
 800508a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800508c:	4b1d      	ldr	r3, [pc, #116]	@ (8005104 <HAL_GPIO_Init+0x354>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	43db      	mvns	r3, r3
 8005096:	69ba      	ldr	r2, [r7, #24]
 8005098:	4013      	ands	r3, r2
 800509a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d003      	beq.n	80050b0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80050a8:	69ba      	ldr	r2, [r7, #24]
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	4313      	orrs	r3, r2
 80050ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80050b0:	4a14      	ldr	r2, [pc, #80]	@ (8005104 <HAL_GPIO_Init+0x354>)
 80050b2:	69bb      	ldr	r3, [r7, #24]
 80050b4:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	3301      	adds	r3, #1
 80050ba:	61fb      	str	r3, [r7, #28]
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	2b0f      	cmp	r3, #15
 80050c0:	f67f ae86 	bls.w	8004dd0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80050c4:	bf00      	nop
 80050c6:	bf00      	nop
 80050c8:	3724      	adds	r7, #36	@ 0x24
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr
 80050d2:	bf00      	nop
 80050d4:	40023800 	.word	0x40023800
 80050d8:	40013800 	.word	0x40013800
 80050dc:	40020000 	.word	0x40020000
 80050e0:	40020400 	.word	0x40020400
 80050e4:	40020800 	.word	0x40020800
 80050e8:	40020c00 	.word	0x40020c00
 80050ec:	40021000 	.word	0x40021000
 80050f0:	40021400 	.word	0x40021400
 80050f4:	40021800 	.word	0x40021800
 80050f8:	40021c00 	.word	0x40021c00
 80050fc:	40022000 	.word	0x40022000
 8005100:	40022400 	.word	0x40022400
 8005104:	40013c00 	.word	0x40013c00

08005108 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005108:	b480      	push	{r7}
 800510a:	b087      	sub	sp, #28
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8005112:	2300      	movs	r3, #0
 8005114:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8005116:	2300      	movs	r3, #0
 8005118:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 800511a:	2300      	movs	r3, #0
 800511c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800511e:	2300      	movs	r3, #0
 8005120:	617b      	str	r3, [r7, #20]
 8005122:	e0d9      	b.n	80052d8 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005124:	2201      	movs	r2, #1
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	fa02 f303 	lsl.w	r3, r2, r3
 800512c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800512e:	683a      	ldr	r2, [r7, #0]
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	4013      	ands	r3, r2
 8005134:	60fb      	str	r3, [r7, #12]

    if (iocurrent == ioposition)
 8005136:	68fa      	ldr	r2, [r7, #12]
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	429a      	cmp	r2, r3
 800513c:	f040 80c9 	bne.w	80052d2 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8005140:	4a6b      	ldr	r2, [pc, #428]	@ (80052f0 <HAL_GPIO_DeInit+0x1e8>)
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	089b      	lsrs	r3, r3, #2
 8005146:	3302      	adds	r3, #2
 8005148:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800514c:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	f003 0303 	and.w	r3, r3, #3
 8005154:	009b      	lsls	r3, r3, #2
 8005156:	220f      	movs	r2, #15
 8005158:	fa02 f303 	lsl.w	r3, r2, r3
 800515c:	68ba      	ldr	r2, [r7, #8]
 800515e:	4013      	ands	r3, r2
 8005160:	60bb      	str	r3, [r7, #8]
      if (tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4a63      	ldr	r2, [pc, #396]	@ (80052f4 <HAL_GPIO_DeInit+0x1ec>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d037      	beq.n	80051da <HAL_GPIO_DeInit+0xd2>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4a62      	ldr	r2, [pc, #392]	@ (80052f8 <HAL_GPIO_DeInit+0x1f0>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d031      	beq.n	80051d6 <HAL_GPIO_DeInit+0xce>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4a61      	ldr	r2, [pc, #388]	@ (80052fc <HAL_GPIO_DeInit+0x1f4>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d02b      	beq.n	80051d2 <HAL_GPIO_DeInit+0xca>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4a60      	ldr	r2, [pc, #384]	@ (8005300 <HAL_GPIO_DeInit+0x1f8>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d025      	beq.n	80051ce <HAL_GPIO_DeInit+0xc6>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4a5f      	ldr	r2, [pc, #380]	@ (8005304 <HAL_GPIO_DeInit+0x1fc>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d01f      	beq.n	80051ca <HAL_GPIO_DeInit+0xc2>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a5e      	ldr	r2, [pc, #376]	@ (8005308 <HAL_GPIO_DeInit+0x200>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d019      	beq.n	80051c6 <HAL_GPIO_DeInit+0xbe>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a5d      	ldr	r2, [pc, #372]	@ (800530c <HAL_GPIO_DeInit+0x204>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d013      	beq.n	80051c2 <HAL_GPIO_DeInit+0xba>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a5c      	ldr	r2, [pc, #368]	@ (8005310 <HAL_GPIO_DeInit+0x208>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d00d      	beq.n	80051be <HAL_GPIO_DeInit+0xb6>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4a5b      	ldr	r2, [pc, #364]	@ (8005314 <HAL_GPIO_DeInit+0x20c>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d007      	beq.n	80051ba <HAL_GPIO_DeInit+0xb2>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a5a      	ldr	r2, [pc, #360]	@ (8005318 <HAL_GPIO_DeInit+0x210>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d101      	bne.n	80051b6 <HAL_GPIO_DeInit+0xae>
 80051b2:	2309      	movs	r3, #9
 80051b4:	e012      	b.n	80051dc <HAL_GPIO_DeInit+0xd4>
 80051b6:	230a      	movs	r3, #10
 80051b8:	e010      	b.n	80051dc <HAL_GPIO_DeInit+0xd4>
 80051ba:	2308      	movs	r3, #8
 80051bc:	e00e      	b.n	80051dc <HAL_GPIO_DeInit+0xd4>
 80051be:	2307      	movs	r3, #7
 80051c0:	e00c      	b.n	80051dc <HAL_GPIO_DeInit+0xd4>
 80051c2:	2306      	movs	r3, #6
 80051c4:	e00a      	b.n	80051dc <HAL_GPIO_DeInit+0xd4>
 80051c6:	2305      	movs	r3, #5
 80051c8:	e008      	b.n	80051dc <HAL_GPIO_DeInit+0xd4>
 80051ca:	2304      	movs	r3, #4
 80051cc:	e006      	b.n	80051dc <HAL_GPIO_DeInit+0xd4>
 80051ce:	2303      	movs	r3, #3
 80051d0:	e004      	b.n	80051dc <HAL_GPIO_DeInit+0xd4>
 80051d2:	2302      	movs	r3, #2
 80051d4:	e002      	b.n	80051dc <HAL_GPIO_DeInit+0xd4>
 80051d6:	2301      	movs	r3, #1
 80051d8:	e000      	b.n	80051dc <HAL_GPIO_DeInit+0xd4>
 80051da:	2300      	movs	r3, #0
 80051dc:	697a      	ldr	r2, [r7, #20]
 80051de:	f002 0203 	and.w	r2, r2, #3
 80051e2:	0092      	lsls	r2, r2, #2
 80051e4:	4093      	lsls	r3, r2
 80051e6:	68ba      	ldr	r2, [r7, #8]
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d132      	bne.n	8005252 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80051ec:	4b4b      	ldr	r3, [pc, #300]	@ (800531c <HAL_GPIO_DeInit+0x214>)
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	43db      	mvns	r3, r3
 80051f4:	4949      	ldr	r1, [pc, #292]	@ (800531c <HAL_GPIO_DeInit+0x214>)
 80051f6:	4013      	ands	r3, r2
 80051f8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80051fa:	4b48      	ldr	r3, [pc, #288]	@ (800531c <HAL_GPIO_DeInit+0x214>)
 80051fc:	685a      	ldr	r2, [r3, #4]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	43db      	mvns	r3, r3
 8005202:	4946      	ldr	r1, [pc, #280]	@ (800531c <HAL_GPIO_DeInit+0x214>)
 8005204:	4013      	ands	r3, r2
 8005206:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005208:	4b44      	ldr	r3, [pc, #272]	@ (800531c <HAL_GPIO_DeInit+0x214>)
 800520a:	68da      	ldr	r2, [r3, #12]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	43db      	mvns	r3, r3
 8005210:	4942      	ldr	r1, [pc, #264]	@ (800531c <HAL_GPIO_DeInit+0x214>)
 8005212:	4013      	ands	r3, r2
 8005214:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005216:	4b41      	ldr	r3, [pc, #260]	@ (800531c <HAL_GPIO_DeInit+0x214>)
 8005218:	689a      	ldr	r2, [r3, #8]
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	43db      	mvns	r3, r3
 800521e:	493f      	ldr	r1, [pc, #252]	@ (800531c <HAL_GPIO_DeInit+0x214>)
 8005220:	4013      	ands	r3, r2
 8005222:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	f003 0303 	and.w	r3, r3, #3
 800522a:	009b      	lsls	r3, r3, #2
 800522c:	220f      	movs	r2, #15
 800522e:	fa02 f303 	lsl.w	r3, r2, r3
 8005232:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8005234:	4a2e      	ldr	r2, [pc, #184]	@ (80052f0 <HAL_GPIO_DeInit+0x1e8>)
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	089b      	lsrs	r3, r3, #2
 800523a:	3302      	adds	r3, #2
 800523c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	43da      	mvns	r2, r3
 8005244:	482a      	ldr	r0, [pc, #168]	@ (80052f0 <HAL_GPIO_DeInit+0x1e8>)
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	089b      	lsrs	r3, r3, #2
 800524a:	400a      	ands	r2, r1
 800524c:	3302      	adds	r3, #2
 800524e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	005b      	lsls	r3, r3, #1
 800525a:	2103      	movs	r1, #3
 800525c:	fa01 f303 	lsl.w	r3, r1, r3
 8005260:	43db      	mvns	r3, r3
 8005262:	401a      	ands	r2, r3
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	08da      	lsrs	r2, r3, #3
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	3208      	adds	r2, #8
 8005270:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	f003 0307 	and.w	r3, r3, #7
 800527a:	009b      	lsls	r3, r3, #2
 800527c:	220f      	movs	r2, #15
 800527e:	fa02 f303 	lsl.w	r3, r2, r3
 8005282:	43db      	mvns	r3, r3
 8005284:	697a      	ldr	r2, [r7, #20]
 8005286:	08d2      	lsrs	r2, r2, #3
 8005288:	4019      	ands	r1, r3
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	3208      	adds	r2, #8
 800528e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	68da      	ldr	r2, [r3, #12]
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	005b      	lsls	r3, r3, #1
 800529a:	2103      	movs	r1, #3
 800529c:	fa01 f303 	lsl.w	r3, r1, r3
 80052a0:	43db      	mvns	r3, r3
 80052a2:	401a      	ands	r2, r3
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	685a      	ldr	r2, [r3, #4]
 80052ac:	2101      	movs	r1, #1
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	fa01 f303 	lsl.w	r3, r1, r3
 80052b4:	43db      	mvns	r3, r3
 80052b6:	401a      	ands	r2, r3
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	689a      	ldr	r2, [r3, #8]
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	005b      	lsls	r3, r3, #1
 80052c4:	2103      	movs	r1, #3
 80052c6:	fa01 f303 	lsl.w	r3, r1, r3
 80052ca:	43db      	mvns	r3, r3
 80052cc:	401a      	ands	r2, r3
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	609a      	str	r2, [r3, #8]
  for (position = 0; position < GPIO_NUMBER; position++)
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	3301      	adds	r3, #1
 80052d6:	617b      	str	r3, [r7, #20]
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	2b0f      	cmp	r3, #15
 80052dc:	f67f af22 	bls.w	8005124 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80052e0:	bf00      	nop
 80052e2:	bf00      	nop
 80052e4:	371c      	adds	r7, #28
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr
 80052ee:	bf00      	nop
 80052f0:	40013800 	.word	0x40013800
 80052f4:	40020000 	.word	0x40020000
 80052f8:	40020400 	.word	0x40020400
 80052fc:	40020800 	.word	0x40020800
 8005300:	40020c00 	.word	0x40020c00
 8005304:	40021000 	.word	0x40021000
 8005308:	40021400 	.word	0x40021400
 800530c:	40021800 	.word	0x40021800
 8005310:	40021c00 	.word	0x40021c00
 8005314:	40022000 	.word	0x40022000
 8005318:	40022400 	.word	0x40022400
 800531c:	40013c00 	.word	0x40013c00

08005320 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005320:	b480      	push	{r7}
 8005322:	b085      	sub	sp, #20
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	460b      	mov	r3, r1
 800532a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	691a      	ldr	r2, [r3, #16]
 8005330:	887b      	ldrh	r3, [r7, #2]
 8005332:	4013      	ands	r3, r2
 8005334:	2b00      	cmp	r3, #0
 8005336:	d002      	beq.n	800533e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005338:	2301      	movs	r3, #1
 800533a:	73fb      	strb	r3, [r7, #15]
 800533c:	e001      	b.n	8005342 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800533e:	2300      	movs	r3, #0
 8005340:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005342:	7bfb      	ldrb	r3, [r7, #15]
}
 8005344:	4618      	mov	r0, r3
 8005346:	3714      	adds	r7, #20
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr

08005350 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005350:	b480      	push	{r7}
 8005352:	b083      	sub	sp, #12
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	460b      	mov	r3, r1
 800535a:	807b      	strh	r3, [r7, #2]
 800535c:	4613      	mov	r3, r2
 800535e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005360:	787b      	ldrb	r3, [r7, #1]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d003      	beq.n	800536e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005366:	887a      	ldrh	r2, [r7, #2]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800536c:	e003      	b.n	8005376 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800536e:	887b      	ldrh	r3, [r7, #2]
 8005370:	041a      	lsls	r2, r3, #16
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	619a      	str	r2, [r3, #24]
}
 8005376:	bf00      	nop
 8005378:	370c      	adds	r7, #12
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr

08005382 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005382:	b480      	push	{r7}
 8005384:	b085      	sub	sp, #20
 8005386:	af00      	add	r7, sp, #0
 8005388:	6078      	str	r0, [r7, #4]
 800538a:	460b      	mov	r3, r1
 800538c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	695b      	ldr	r3, [r3, #20]
 8005392:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005394:	887a      	ldrh	r2, [r7, #2]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	4013      	ands	r3, r2
 800539a:	041a      	lsls	r2, r3, #16
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	43d9      	mvns	r1, r3
 80053a0:	887b      	ldrh	r3, [r7, #2]
 80053a2:	400b      	ands	r3, r1
 80053a4:	431a      	orrs	r2, r3
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	619a      	str	r2, [r3, #24]
}
 80053aa:	bf00      	nop
 80053ac:	3714      	adds	r7, #20
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr
	...

080053b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b082      	sub	sp, #8
 80053bc:	af00      	add	r7, sp, #0
 80053be:	4603      	mov	r3, r0
 80053c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80053c2:	4b08      	ldr	r3, [pc, #32]	@ (80053e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80053c4:	695a      	ldr	r2, [r3, #20]
 80053c6:	88fb      	ldrh	r3, [r7, #6]
 80053c8:	4013      	ands	r3, r2
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d006      	beq.n	80053dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80053ce:	4a05      	ldr	r2, [pc, #20]	@ (80053e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80053d0:	88fb      	ldrh	r3, [r7, #6]
 80053d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80053d4:	88fb      	ldrh	r3, [r7, #6]
 80053d6:	4618      	mov	r0, r3
 80053d8:	f7fc f86e 	bl	80014b8 <HAL_GPIO_EXTI_Callback>
  }
}
 80053dc:	bf00      	nop
 80053de:	3708      	adds	r7, #8
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}
 80053e4:	40013c00 	.word	0x40013c00

080053e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b082      	sub	sp, #8
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d101      	bne.n	80053fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	e08b      	b.n	8005512 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005400:	b2db      	uxtb	r3, r3
 8005402:	2b00      	cmp	r3, #0
 8005404:	d106      	bne.n	8005414 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f000 f8b5 	bl	800557e <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2224      	movs	r2, #36	@ 0x24
 8005418:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f022 0201 	bic.w	r2, r2, #1
 800542a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	685a      	ldr	r2, [r3, #4]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005438:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	689a      	ldr	r2, [r3, #8]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005448:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	68db      	ldr	r3, [r3, #12]
 800544e:	2b01      	cmp	r3, #1
 8005450:	d107      	bne.n	8005462 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	689a      	ldr	r2, [r3, #8]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800545e:	609a      	str	r2, [r3, #8]
 8005460:	e006      	b.n	8005470 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	689a      	ldr	r2, [r3, #8]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800546e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	68db      	ldr	r3, [r3, #12]
 8005474:	2b02      	cmp	r3, #2
 8005476:	d108      	bne.n	800548a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	685a      	ldr	r2, [r3, #4]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005486:	605a      	str	r2, [r3, #4]
 8005488:	e007      	b.n	800549a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	685a      	ldr	r2, [r3, #4]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005498:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	6859      	ldr	r1, [r3, #4]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	4b1d      	ldr	r3, [pc, #116]	@ (800551c <HAL_I2C_Init+0x134>)
 80054a6:	430b      	orrs	r3, r1
 80054a8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	68da      	ldr	r2, [r3, #12]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80054b8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	691a      	ldr	r2, [r3, #16]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	695b      	ldr	r3, [r3, #20]
 80054c2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	699b      	ldr	r3, [r3, #24]
 80054ca:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	430a      	orrs	r2, r1
 80054d2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	69d9      	ldr	r1, [r3, #28]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6a1a      	ldr	r2, [r3, #32]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	430a      	orrs	r2, r1
 80054e2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f042 0201 	orr.w	r2, r2, #1
 80054f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2220      	movs	r2, #32
 80054fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005510:	2300      	movs	r3, #0
}
 8005512:	4618      	mov	r0, r3
 8005514:	3708      	adds	r7, #8
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
 800551a:	bf00      	nop
 800551c:	02008000 	.word	0x02008000

08005520 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b082      	sub	sp, #8
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d101      	bne.n	8005532 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	e021      	b.n	8005576 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2224      	movs	r2, #36	@ 0x24
 8005536:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f022 0201 	bic.w	r2, r2, #1
 8005548:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 f821 	bl	8005592 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2200      	movs	r2, #0
 8005554:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2200      	movs	r2, #0
 800555a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2200      	movs	r2, #0
 8005570:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005574:	2300      	movs	r3, #0
}
 8005576:	4618      	mov	r0, r3
 8005578:	3708      	adds	r7, #8
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}

0800557e <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800557e:	b480      	push	{r7}
 8005580:	b083      	sub	sp, #12
 8005582:	af00      	add	r7, sp, #0
 8005584:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8005586:	bf00      	nop
 8005588:	370c      	adds	r7, #12
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr

08005592 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8005592:	b480      	push	{r7}
 8005594:	b083      	sub	sp, #12
 8005596:	af00      	add	r7, sp, #0
 8005598:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800559a:	bf00      	nop
 800559c:	370c      	adds	r7, #12
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr
	...

080055a8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b088      	sub	sp, #32
 80055ac:	af02      	add	r7, sp, #8
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	4608      	mov	r0, r1
 80055b2:	4611      	mov	r1, r2
 80055b4:	461a      	mov	r2, r3
 80055b6:	4603      	mov	r3, r0
 80055b8:	817b      	strh	r3, [r7, #10]
 80055ba:	460b      	mov	r3, r1
 80055bc:	813b      	strh	r3, [r7, #8]
 80055be:	4613      	mov	r3, r2
 80055c0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	2b20      	cmp	r3, #32
 80055cc:	f040 80f9 	bne.w	80057c2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80055d0:	6a3b      	ldr	r3, [r7, #32]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d002      	beq.n	80055dc <HAL_I2C_Mem_Write+0x34>
 80055d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d105      	bne.n	80055e8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80055e2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	e0ed      	b.n	80057c4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	d101      	bne.n	80055f6 <HAL_I2C_Mem_Write+0x4e>
 80055f2:	2302      	movs	r3, #2
 80055f4:	e0e6      	b.n	80057c4 <HAL_I2C_Mem_Write+0x21c>
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2201      	movs	r2, #1
 80055fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80055fe:	f7fe fe21 	bl	8004244 <HAL_GetTick>
 8005602:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	9300      	str	r3, [sp, #0]
 8005608:	2319      	movs	r3, #25
 800560a:	2201      	movs	r2, #1
 800560c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005610:	68f8      	ldr	r0, [r7, #12]
 8005612:	f000 fad1 	bl	8005bb8 <I2C_WaitOnFlagUntilTimeout>
 8005616:	4603      	mov	r3, r0
 8005618:	2b00      	cmp	r3, #0
 800561a:	d001      	beq.n	8005620 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800561c:	2301      	movs	r3, #1
 800561e:	e0d1      	b.n	80057c4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2221      	movs	r2, #33	@ 0x21
 8005624:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2240      	movs	r2, #64	@ 0x40
 800562c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2200      	movs	r2, #0
 8005634:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	6a3a      	ldr	r2, [r7, #32]
 800563a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005640:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2200      	movs	r2, #0
 8005646:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005648:	88f8      	ldrh	r0, [r7, #6]
 800564a:	893a      	ldrh	r2, [r7, #8]
 800564c:	8979      	ldrh	r1, [r7, #10]
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	9301      	str	r3, [sp, #4]
 8005652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005654:	9300      	str	r3, [sp, #0]
 8005656:	4603      	mov	r3, r0
 8005658:	68f8      	ldr	r0, [r7, #12]
 800565a:	f000 f9e1 	bl	8005a20 <I2C_RequestMemoryWrite>
 800565e:	4603      	mov	r3, r0
 8005660:	2b00      	cmp	r3, #0
 8005662:	d005      	beq.n	8005670 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2200      	movs	r2, #0
 8005668:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800566c:	2301      	movs	r3, #1
 800566e:	e0a9      	b.n	80057c4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005674:	b29b      	uxth	r3, r3
 8005676:	2bff      	cmp	r3, #255	@ 0xff
 8005678:	d90e      	bls.n	8005698 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	22ff      	movs	r2, #255	@ 0xff
 800567e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005684:	b2da      	uxtb	r2, r3
 8005686:	8979      	ldrh	r1, [r7, #10]
 8005688:	2300      	movs	r3, #0
 800568a:	9300      	str	r3, [sp, #0]
 800568c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005690:	68f8      	ldr	r0, [r7, #12]
 8005692:	f000 fc55 	bl	8005f40 <I2C_TransferConfig>
 8005696:	e00f      	b.n	80056b8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800569c:	b29a      	uxth	r2, r3
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056a6:	b2da      	uxtb	r2, r3
 80056a8:	8979      	ldrh	r1, [r7, #10]
 80056aa:	2300      	movs	r3, #0
 80056ac:	9300      	str	r3, [sp, #0]
 80056ae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80056b2:	68f8      	ldr	r0, [r7, #12]
 80056b4:	f000 fc44 	bl	8005f40 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056b8:	697a      	ldr	r2, [r7, #20]
 80056ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80056bc:	68f8      	ldr	r0, [r7, #12]
 80056be:	f000 fad4 	bl	8005c6a <I2C_WaitOnTXISFlagUntilTimeout>
 80056c2:	4603      	mov	r3, r0
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d001      	beq.n	80056cc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	e07b      	b.n	80057c4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056d0:	781a      	ldrb	r2, [r3, #0]
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056dc:	1c5a      	adds	r2, r3, #1
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	3b01      	subs	r3, #1
 80056ea:	b29a      	uxth	r2, r3
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056f4:	3b01      	subs	r3, #1
 80056f6:	b29a      	uxth	r2, r3
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005700:	b29b      	uxth	r3, r3
 8005702:	2b00      	cmp	r3, #0
 8005704:	d034      	beq.n	8005770 <HAL_I2C_Mem_Write+0x1c8>
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800570a:	2b00      	cmp	r3, #0
 800570c:	d130      	bne.n	8005770 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	9300      	str	r3, [sp, #0]
 8005712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005714:	2200      	movs	r2, #0
 8005716:	2180      	movs	r1, #128	@ 0x80
 8005718:	68f8      	ldr	r0, [r7, #12]
 800571a:	f000 fa4d 	bl	8005bb8 <I2C_WaitOnFlagUntilTimeout>
 800571e:	4603      	mov	r3, r0
 8005720:	2b00      	cmp	r3, #0
 8005722:	d001      	beq.n	8005728 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	e04d      	b.n	80057c4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800572c:	b29b      	uxth	r3, r3
 800572e:	2bff      	cmp	r3, #255	@ 0xff
 8005730:	d90e      	bls.n	8005750 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	22ff      	movs	r2, #255	@ 0xff
 8005736:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800573c:	b2da      	uxtb	r2, r3
 800573e:	8979      	ldrh	r1, [r7, #10]
 8005740:	2300      	movs	r3, #0
 8005742:	9300      	str	r3, [sp, #0]
 8005744:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005748:	68f8      	ldr	r0, [r7, #12]
 800574a:	f000 fbf9 	bl	8005f40 <I2C_TransferConfig>
 800574e:	e00f      	b.n	8005770 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005754:	b29a      	uxth	r2, r3
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800575e:	b2da      	uxtb	r2, r3
 8005760:	8979      	ldrh	r1, [r7, #10]
 8005762:	2300      	movs	r3, #0
 8005764:	9300      	str	r3, [sp, #0]
 8005766:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800576a:	68f8      	ldr	r0, [r7, #12]
 800576c:	f000 fbe8 	bl	8005f40 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005774:	b29b      	uxth	r3, r3
 8005776:	2b00      	cmp	r3, #0
 8005778:	d19e      	bne.n	80056b8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800577a:	697a      	ldr	r2, [r7, #20]
 800577c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800577e:	68f8      	ldr	r0, [r7, #12]
 8005780:	f000 faba 	bl	8005cf8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005784:	4603      	mov	r3, r0
 8005786:	2b00      	cmp	r3, #0
 8005788:	d001      	beq.n	800578e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	e01a      	b.n	80057c4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	2220      	movs	r2, #32
 8005794:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	6859      	ldr	r1, [r3, #4]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	4b0a      	ldr	r3, [pc, #40]	@ (80057cc <HAL_I2C_Mem_Write+0x224>)
 80057a2:	400b      	ands	r3, r1
 80057a4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2220      	movs	r2, #32
 80057aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2200      	movs	r2, #0
 80057b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2200      	movs	r2, #0
 80057ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80057be:	2300      	movs	r3, #0
 80057c0:	e000      	b.n	80057c4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80057c2:	2302      	movs	r3, #2
  }
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	3718      	adds	r7, #24
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}
 80057cc:	fe00e800 	.word	0xfe00e800

080057d0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b088      	sub	sp, #32
 80057d4:	af02      	add	r7, sp, #8
 80057d6:	60f8      	str	r0, [r7, #12]
 80057d8:	4608      	mov	r0, r1
 80057da:	4611      	mov	r1, r2
 80057dc:	461a      	mov	r2, r3
 80057de:	4603      	mov	r3, r0
 80057e0:	817b      	strh	r3, [r7, #10]
 80057e2:	460b      	mov	r3, r1
 80057e4:	813b      	strh	r3, [r7, #8]
 80057e6:	4613      	mov	r3, r2
 80057e8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057f0:	b2db      	uxtb	r3, r3
 80057f2:	2b20      	cmp	r3, #32
 80057f4:	f040 80fd 	bne.w	80059f2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80057f8:	6a3b      	ldr	r3, [r7, #32]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d002      	beq.n	8005804 <HAL_I2C_Mem_Read+0x34>
 80057fe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005800:	2b00      	cmp	r3, #0
 8005802:	d105      	bne.n	8005810 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800580a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	e0f1      	b.n	80059f4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005816:	2b01      	cmp	r3, #1
 8005818:	d101      	bne.n	800581e <HAL_I2C_Mem_Read+0x4e>
 800581a:	2302      	movs	r3, #2
 800581c:	e0ea      	b.n	80059f4 <HAL_I2C_Mem_Read+0x224>
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2201      	movs	r2, #1
 8005822:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005826:	f7fe fd0d 	bl	8004244 <HAL_GetTick>
 800582a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	9300      	str	r3, [sp, #0]
 8005830:	2319      	movs	r3, #25
 8005832:	2201      	movs	r2, #1
 8005834:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005838:	68f8      	ldr	r0, [r7, #12]
 800583a:	f000 f9bd 	bl	8005bb8 <I2C_WaitOnFlagUntilTimeout>
 800583e:	4603      	mov	r3, r0
 8005840:	2b00      	cmp	r3, #0
 8005842:	d001      	beq.n	8005848 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	e0d5      	b.n	80059f4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2222      	movs	r2, #34	@ 0x22
 800584c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2240      	movs	r2, #64	@ 0x40
 8005854:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2200      	movs	r2, #0
 800585c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	6a3a      	ldr	r2, [r7, #32]
 8005862:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005868:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2200      	movs	r2, #0
 800586e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005870:	88f8      	ldrh	r0, [r7, #6]
 8005872:	893a      	ldrh	r2, [r7, #8]
 8005874:	8979      	ldrh	r1, [r7, #10]
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	9301      	str	r3, [sp, #4]
 800587a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800587c:	9300      	str	r3, [sp, #0]
 800587e:	4603      	mov	r3, r0
 8005880:	68f8      	ldr	r0, [r7, #12]
 8005882:	f000 f921 	bl	8005ac8 <I2C_RequestMemoryRead>
 8005886:	4603      	mov	r3, r0
 8005888:	2b00      	cmp	r3, #0
 800588a:	d005      	beq.n	8005898 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2200      	movs	r2, #0
 8005890:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	e0ad      	b.n	80059f4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800589c:	b29b      	uxth	r3, r3
 800589e:	2bff      	cmp	r3, #255	@ 0xff
 80058a0:	d90e      	bls.n	80058c0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2201      	movs	r2, #1
 80058a6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058ac:	b2da      	uxtb	r2, r3
 80058ae:	8979      	ldrh	r1, [r7, #10]
 80058b0:	4b52      	ldr	r3, [pc, #328]	@ (80059fc <HAL_I2C_Mem_Read+0x22c>)
 80058b2:	9300      	str	r3, [sp, #0]
 80058b4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80058b8:	68f8      	ldr	r0, [r7, #12]
 80058ba:	f000 fb41 	bl	8005f40 <I2C_TransferConfig>
 80058be:	e00f      	b.n	80058e0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058c4:	b29a      	uxth	r2, r3
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058ce:	b2da      	uxtb	r2, r3
 80058d0:	8979      	ldrh	r1, [r7, #10]
 80058d2:	4b4a      	ldr	r3, [pc, #296]	@ (80059fc <HAL_I2C_Mem_Read+0x22c>)
 80058d4:	9300      	str	r3, [sp, #0]
 80058d6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80058da:	68f8      	ldr	r0, [r7, #12]
 80058dc:	f000 fb30 	bl	8005f40 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	9300      	str	r3, [sp, #0]
 80058e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058e6:	2200      	movs	r2, #0
 80058e8:	2104      	movs	r1, #4
 80058ea:	68f8      	ldr	r0, [r7, #12]
 80058ec:	f000 f964 	bl	8005bb8 <I2C_WaitOnFlagUntilTimeout>
 80058f0:	4603      	mov	r3, r0
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d001      	beq.n	80058fa <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	e07c      	b.n	80059f4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005904:	b2d2      	uxtb	r2, r2
 8005906:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800590c:	1c5a      	adds	r2, r3, #1
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005916:	3b01      	subs	r3, #1
 8005918:	b29a      	uxth	r2, r3
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005922:	b29b      	uxth	r3, r3
 8005924:	3b01      	subs	r3, #1
 8005926:	b29a      	uxth	r2, r3
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005930:	b29b      	uxth	r3, r3
 8005932:	2b00      	cmp	r3, #0
 8005934:	d034      	beq.n	80059a0 <HAL_I2C_Mem_Read+0x1d0>
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800593a:	2b00      	cmp	r3, #0
 800593c:	d130      	bne.n	80059a0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	9300      	str	r3, [sp, #0]
 8005942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005944:	2200      	movs	r2, #0
 8005946:	2180      	movs	r1, #128	@ 0x80
 8005948:	68f8      	ldr	r0, [r7, #12]
 800594a:	f000 f935 	bl	8005bb8 <I2C_WaitOnFlagUntilTimeout>
 800594e:	4603      	mov	r3, r0
 8005950:	2b00      	cmp	r3, #0
 8005952:	d001      	beq.n	8005958 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	e04d      	b.n	80059f4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800595c:	b29b      	uxth	r3, r3
 800595e:	2bff      	cmp	r3, #255	@ 0xff
 8005960:	d90e      	bls.n	8005980 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2201      	movs	r2, #1
 8005966:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800596c:	b2da      	uxtb	r2, r3
 800596e:	8979      	ldrh	r1, [r7, #10]
 8005970:	2300      	movs	r3, #0
 8005972:	9300      	str	r3, [sp, #0]
 8005974:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005978:	68f8      	ldr	r0, [r7, #12]
 800597a:	f000 fae1 	bl	8005f40 <I2C_TransferConfig>
 800597e:	e00f      	b.n	80059a0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005984:	b29a      	uxth	r2, r3
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800598e:	b2da      	uxtb	r2, r3
 8005990:	8979      	ldrh	r1, [r7, #10]
 8005992:	2300      	movs	r3, #0
 8005994:	9300      	str	r3, [sp, #0]
 8005996:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800599a:	68f8      	ldr	r0, [r7, #12]
 800599c:	f000 fad0 	bl	8005f40 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d19a      	bne.n	80058e0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059aa:	697a      	ldr	r2, [r7, #20]
 80059ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80059ae:	68f8      	ldr	r0, [r7, #12]
 80059b0:	f000 f9a2 	bl	8005cf8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80059b4:	4603      	mov	r3, r0
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d001      	beq.n	80059be <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	e01a      	b.n	80059f4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	2220      	movs	r2, #32
 80059c4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	6859      	ldr	r1, [r3, #4]
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	4b0b      	ldr	r3, [pc, #44]	@ (8005a00 <HAL_I2C_Mem_Read+0x230>)
 80059d2:	400b      	ands	r3, r1
 80059d4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2220      	movs	r2, #32
 80059da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2200      	movs	r2, #0
 80059e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2200      	movs	r2, #0
 80059ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80059ee:	2300      	movs	r3, #0
 80059f0:	e000      	b.n	80059f4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80059f2:	2302      	movs	r3, #2
  }
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3718      	adds	r7, #24
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}
 80059fc:	80002400 	.word	0x80002400
 8005a00:	fe00e800 	.word	0xfe00e800

08005a04 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b083      	sub	sp, #12
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a12:	b2db      	uxtb	r3, r3
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	370c      	adds	r7, #12
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr

08005a20 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b086      	sub	sp, #24
 8005a24:	af02      	add	r7, sp, #8
 8005a26:	60f8      	str	r0, [r7, #12]
 8005a28:	4608      	mov	r0, r1
 8005a2a:	4611      	mov	r1, r2
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	4603      	mov	r3, r0
 8005a30:	817b      	strh	r3, [r7, #10]
 8005a32:	460b      	mov	r3, r1
 8005a34:	813b      	strh	r3, [r7, #8]
 8005a36:	4613      	mov	r3, r2
 8005a38:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005a3a:	88fb      	ldrh	r3, [r7, #6]
 8005a3c:	b2da      	uxtb	r2, r3
 8005a3e:	8979      	ldrh	r1, [r7, #10]
 8005a40:	4b20      	ldr	r3, [pc, #128]	@ (8005ac4 <I2C_RequestMemoryWrite+0xa4>)
 8005a42:	9300      	str	r3, [sp, #0]
 8005a44:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005a48:	68f8      	ldr	r0, [r7, #12]
 8005a4a:	f000 fa79 	bl	8005f40 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a4e:	69fa      	ldr	r2, [r7, #28]
 8005a50:	69b9      	ldr	r1, [r7, #24]
 8005a52:	68f8      	ldr	r0, [r7, #12]
 8005a54:	f000 f909 	bl	8005c6a <I2C_WaitOnTXISFlagUntilTimeout>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d001      	beq.n	8005a62 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	e02c      	b.n	8005abc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005a62:	88fb      	ldrh	r3, [r7, #6]
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d105      	bne.n	8005a74 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005a68:	893b      	ldrh	r3, [r7, #8]
 8005a6a:	b2da      	uxtb	r2, r3
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	629a      	str	r2, [r3, #40]	@ 0x28
 8005a72:	e015      	b.n	8005aa0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005a74:	893b      	ldrh	r3, [r7, #8]
 8005a76:	0a1b      	lsrs	r3, r3, #8
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	b2da      	uxtb	r2, r3
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a82:	69fa      	ldr	r2, [r7, #28]
 8005a84:	69b9      	ldr	r1, [r7, #24]
 8005a86:	68f8      	ldr	r0, [r7, #12]
 8005a88:	f000 f8ef 	bl	8005c6a <I2C_WaitOnTXISFlagUntilTimeout>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d001      	beq.n	8005a96 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	e012      	b.n	8005abc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005a96:	893b      	ldrh	r3, [r7, #8]
 8005a98:	b2da      	uxtb	r2, r3
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005aa0:	69fb      	ldr	r3, [r7, #28]
 8005aa2:	9300      	str	r3, [sp, #0]
 8005aa4:	69bb      	ldr	r3, [r7, #24]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	2180      	movs	r1, #128	@ 0x80
 8005aaa:	68f8      	ldr	r0, [r7, #12]
 8005aac:	f000 f884 	bl	8005bb8 <I2C_WaitOnFlagUntilTimeout>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d001      	beq.n	8005aba <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e000      	b.n	8005abc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005aba:	2300      	movs	r3, #0
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3710      	adds	r7, #16
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}
 8005ac4:	80002000 	.word	0x80002000

08005ac8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b086      	sub	sp, #24
 8005acc:	af02      	add	r7, sp, #8
 8005ace:	60f8      	str	r0, [r7, #12]
 8005ad0:	4608      	mov	r0, r1
 8005ad2:	4611      	mov	r1, r2
 8005ad4:	461a      	mov	r2, r3
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	817b      	strh	r3, [r7, #10]
 8005ada:	460b      	mov	r3, r1
 8005adc:	813b      	strh	r3, [r7, #8]
 8005ade:	4613      	mov	r3, r2
 8005ae0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005ae2:	88fb      	ldrh	r3, [r7, #6]
 8005ae4:	b2da      	uxtb	r2, r3
 8005ae6:	8979      	ldrh	r1, [r7, #10]
 8005ae8:	4b20      	ldr	r3, [pc, #128]	@ (8005b6c <I2C_RequestMemoryRead+0xa4>)
 8005aea:	9300      	str	r3, [sp, #0]
 8005aec:	2300      	movs	r3, #0
 8005aee:	68f8      	ldr	r0, [r7, #12]
 8005af0:	f000 fa26 	bl	8005f40 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005af4:	69fa      	ldr	r2, [r7, #28]
 8005af6:	69b9      	ldr	r1, [r7, #24]
 8005af8:	68f8      	ldr	r0, [r7, #12]
 8005afa:	f000 f8b6 	bl	8005c6a <I2C_WaitOnTXISFlagUntilTimeout>
 8005afe:	4603      	mov	r3, r0
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d001      	beq.n	8005b08 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005b04:	2301      	movs	r3, #1
 8005b06:	e02c      	b.n	8005b62 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005b08:	88fb      	ldrh	r3, [r7, #6]
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	d105      	bne.n	8005b1a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005b0e:	893b      	ldrh	r3, [r7, #8]
 8005b10:	b2da      	uxtb	r2, r3
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	629a      	str	r2, [r3, #40]	@ 0x28
 8005b18:	e015      	b.n	8005b46 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005b1a:	893b      	ldrh	r3, [r7, #8]
 8005b1c:	0a1b      	lsrs	r3, r3, #8
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	b2da      	uxtb	r2, r3
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b28:	69fa      	ldr	r2, [r7, #28]
 8005b2a:	69b9      	ldr	r1, [r7, #24]
 8005b2c:	68f8      	ldr	r0, [r7, #12]
 8005b2e:	f000 f89c 	bl	8005c6a <I2C_WaitOnTXISFlagUntilTimeout>
 8005b32:	4603      	mov	r3, r0
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d001      	beq.n	8005b3c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	e012      	b.n	8005b62 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005b3c:	893b      	ldrh	r3, [r7, #8]
 8005b3e:	b2da      	uxtb	r2, r3
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005b46:	69fb      	ldr	r3, [r7, #28]
 8005b48:	9300      	str	r3, [sp, #0]
 8005b4a:	69bb      	ldr	r3, [r7, #24]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	2140      	movs	r1, #64	@ 0x40
 8005b50:	68f8      	ldr	r0, [r7, #12]
 8005b52:	f000 f831 	bl	8005bb8 <I2C_WaitOnFlagUntilTimeout>
 8005b56:	4603      	mov	r3, r0
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d001      	beq.n	8005b60 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	e000      	b.n	8005b62 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005b60:	2300      	movs	r3, #0
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3710      	adds	r7, #16
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}
 8005b6a:	bf00      	nop
 8005b6c:	80002000 	.word	0x80002000

08005b70 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b083      	sub	sp, #12
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	699b      	ldr	r3, [r3, #24]
 8005b7e:	f003 0302 	and.w	r3, r3, #2
 8005b82:	2b02      	cmp	r3, #2
 8005b84:	d103      	bne.n	8005b8e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	699b      	ldr	r3, [r3, #24]
 8005b94:	f003 0301 	and.w	r3, r3, #1
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d007      	beq.n	8005bac <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	699a      	ldr	r2, [r3, #24]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f042 0201 	orr.w	r2, r2, #1
 8005baa:	619a      	str	r2, [r3, #24]
  }
}
 8005bac:	bf00      	nop
 8005bae:	370c      	adds	r7, #12
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr

08005bb8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b084      	sub	sp, #16
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	60f8      	str	r0, [r7, #12]
 8005bc0:	60b9      	str	r1, [r7, #8]
 8005bc2:	603b      	str	r3, [r7, #0]
 8005bc4:	4613      	mov	r3, r2
 8005bc6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005bc8:	e03b      	b.n	8005c42 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bca:	69ba      	ldr	r2, [r7, #24]
 8005bcc:	6839      	ldr	r1, [r7, #0]
 8005bce:	68f8      	ldr	r0, [r7, #12]
 8005bd0:	f000 f8d6 	bl	8005d80 <I2C_IsErrorOccurred>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d001      	beq.n	8005bde <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e041      	b.n	8005c62 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005be4:	d02d      	beq.n	8005c42 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005be6:	f7fe fb2d 	bl	8004244 <HAL_GetTick>
 8005bea:	4602      	mov	r2, r0
 8005bec:	69bb      	ldr	r3, [r7, #24]
 8005bee:	1ad3      	subs	r3, r2, r3
 8005bf0:	683a      	ldr	r2, [r7, #0]
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d302      	bcc.n	8005bfc <I2C_WaitOnFlagUntilTimeout+0x44>
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d122      	bne.n	8005c42 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	699a      	ldr	r2, [r3, #24]
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	4013      	ands	r3, r2
 8005c06:	68ba      	ldr	r2, [r7, #8]
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	bf0c      	ite	eq
 8005c0c:	2301      	moveq	r3, #1
 8005c0e:	2300      	movne	r3, #0
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	461a      	mov	r2, r3
 8005c14:	79fb      	ldrb	r3, [r7, #7]
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d113      	bne.n	8005c42 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c1e:	f043 0220 	orr.w	r2, r3, #32
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2220      	movs	r2, #32
 8005c2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2200      	movs	r2, #0
 8005c32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e00f      	b.n	8005c62 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	699a      	ldr	r2, [r3, #24]
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	4013      	ands	r3, r2
 8005c4c:	68ba      	ldr	r2, [r7, #8]
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	bf0c      	ite	eq
 8005c52:	2301      	moveq	r3, #1
 8005c54:	2300      	movne	r3, #0
 8005c56:	b2db      	uxtb	r3, r3
 8005c58:	461a      	mov	r2, r3
 8005c5a:	79fb      	ldrb	r3, [r7, #7]
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d0b4      	beq.n	8005bca <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c60:	2300      	movs	r3, #0
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3710      	adds	r7, #16
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}

08005c6a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005c6a:	b580      	push	{r7, lr}
 8005c6c:	b084      	sub	sp, #16
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	60f8      	str	r0, [r7, #12]
 8005c72:	60b9      	str	r1, [r7, #8]
 8005c74:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005c76:	e033      	b.n	8005ce0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c78:	687a      	ldr	r2, [r7, #4]
 8005c7a:	68b9      	ldr	r1, [r7, #8]
 8005c7c:	68f8      	ldr	r0, [r7, #12]
 8005c7e:	f000 f87f 	bl	8005d80 <I2C_IsErrorOccurred>
 8005c82:	4603      	mov	r3, r0
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d001      	beq.n	8005c8c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	e031      	b.n	8005cf0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c92:	d025      	beq.n	8005ce0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c94:	f7fe fad6 	bl	8004244 <HAL_GetTick>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	1ad3      	subs	r3, r2, r3
 8005c9e:	68ba      	ldr	r2, [r7, #8]
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	d302      	bcc.n	8005caa <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d11a      	bne.n	8005ce0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	699b      	ldr	r3, [r3, #24]
 8005cb0:	f003 0302 	and.w	r3, r3, #2
 8005cb4:	2b02      	cmp	r3, #2
 8005cb6:	d013      	beq.n	8005ce0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cbc:	f043 0220 	orr.w	r2, r3, #32
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2220      	movs	r2, #32
 8005cc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	e007      	b.n	8005cf0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	699b      	ldr	r3, [r3, #24]
 8005ce6:	f003 0302 	and.w	r3, r3, #2
 8005cea:	2b02      	cmp	r3, #2
 8005cec:	d1c4      	bne.n	8005c78 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005cee:	2300      	movs	r3, #0
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3710      	adds	r7, #16
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}

08005cf8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b084      	sub	sp, #16
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	60f8      	str	r0, [r7, #12]
 8005d00:	60b9      	str	r1, [r7, #8]
 8005d02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005d04:	e02f      	b.n	8005d66 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d06:	687a      	ldr	r2, [r7, #4]
 8005d08:	68b9      	ldr	r1, [r7, #8]
 8005d0a:	68f8      	ldr	r0, [r7, #12]
 8005d0c:	f000 f838 	bl	8005d80 <I2C_IsErrorOccurred>
 8005d10:	4603      	mov	r3, r0
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d001      	beq.n	8005d1a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e02d      	b.n	8005d76 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d1a:	f7fe fa93 	bl	8004244 <HAL_GetTick>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	1ad3      	subs	r3, r2, r3
 8005d24:	68ba      	ldr	r2, [r7, #8]
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d302      	bcc.n	8005d30 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d11a      	bne.n	8005d66 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	699b      	ldr	r3, [r3, #24]
 8005d36:	f003 0320 	and.w	r3, r3, #32
 8005d3a:	2b20      	cmp	r3, #32
 8005d3c:	d013      	beq.n	8005d66 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d42:	f043 0220 	orr.w	r2, r3, #32
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2220      	movs	r2, #32
 8005d4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2200      	movs	r2, #0
 8005d56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005d62:	2301      	movs	r3, #1
 8005d64:	e007      	b.n	8005d76 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	699b      	ldr	r3, [r3, #24]
 8005d6c:	f003 0320 	and.w	r3, r3, #32
 8005d70:	2b20      	cmp	r3, #32
 8005d72:	d1c8      	bne.n	8005d06 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005d74:	2300      	movs	r3, #0
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3710      	adds	r7, #16
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
	...

08005d80 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b08a      	sub	sp, #40	@ 0x28
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	60f8      	str	r0, [r7, #12]
 8005d88:	60b9      	str	r1, [r7, #8]
 8005d8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	699b      	ldr	r3, [r3, #24]
 8005d98:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005da2:	69bb      	ldr	r3, [r7, #24]
 8005da4:	f003 0310 	and.w	r3, r3, #16
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d068      	beq.n	8005e7e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	2210      	movs	r2, #16
 8005db2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005db4:	e049      	b.n	8005e4a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dbc:	d045      	beq.n	8005e4a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005dbe:	f7fe fa41 	bl	8004244 <HAL_GetTick>
 8005dc2:	4602      	mov	r2, r0
 8005dc4:	69fb      	ldr	r3, [r7, #28]
 8005dc6:	1ad3      	subs	r3, r2, r3
 8005dc8:	68ba      	ldr	r2, [r7, #8]
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d302      	bcc.n	8005dd4 <I2C_IsErrorOccurred+0x54>
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d13a      	bne.n	8005e4a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005dde:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005de6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	699b      	ldr	r3, [r3, #24]
 8005dee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005df2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005df6:	d121      	bne.n	8005e3c <I2C_IsErrorOccurred+0xbc>
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005dfe:	d01d      	beq.n	8005e3c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005e00:	7cfb      	ldrb	r3, [r7, #19]
 8005e02:	2b20      	cmp	r3, #32
 8005e04:	d01a      	beq.n	8005e3c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	685a      	ldr	r2, [r3, #4]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005e14:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005e16:	f7fe fa15 	bl	8004244 <HAL_GetTick>
 8005e1a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e1c:	e00e      	b.n	8005e3c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005e1e:	f7fe fa11 	bl	8004244 <HAL_GetTick>
 8005e22:	4602      	mov	r2, r0
 8005e24:	69fb      	ldr	r3, [r7, #28]
 8005e26:	1ad3      	subs	r3, r2, r3
 8005e28:	2b19      	cmp	r3, #25
 8005e2a:	d907      	bls.n	8005e3c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005e2c:	6a3b      	ldr	r3, [r7, #32]
 8005e2e:	f043 0320 	orr.w	r3, r3, #32
 8005e32:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8005e3a:	e006      	b.n	8005e4a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	699b      	ldr	r3, [r3, #24]
 8005e42:	f003 0320 	and.w	r3, r3, #32
 8005e46:	2b20      	cmp	r3, #32
 8005e48:	d1e9      	bne.n	8005e1e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	699b      	ldr	r3, [r3, #24]
 8005e50:	f003 0320 	and.w	r3, r3, #32
 8005e54:	2b20      	cmp	r3, #32
 8005e56:	d003      	beq.n	8005e60 <I2C_IsErrorOccurred+0xe0>
 8005e58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d0aa      	beq.n	8005db6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005e60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d103      	bne.n	8005e70 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	2220      	movs	r2, #32
 8005e6e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005e70:	6a3b      	ldr	r3, [r7, #32]
 8005e72:	f043 0304 	orr.w	r3, r3, #4
 8005e76:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	699b      	ldr	r3, [r3, #24]
 8005e84:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005e86:	69bb      	ldr	r3, [r7, #24]
 8005e88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d00b      	beq.n	8005ea8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005e90:	6a3b      	ldr	r3, [r7, #32]
 8005e92:	f043 0301 	orr.w	r3, r3, #1
 8005e96:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005ea0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005ea8:	69bb      	ldr	r3, [r7, #24]
 8005eaa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d00b      	beq.n	8005eca <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005eb2:	6a3b      	ldr	r3, [r7, #32]
 8005eb4:	f043 0308 	orr.w	r3, r3, #8
 8005eb8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005ec2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005eca:	69bb      	ldr	r3, [r7, #24]
 8005ecc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d00b      	beq.n	8005eec <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005ed4:	6a3b      	ldr	r3, [r7, #32]
 8005ed6:	f043 0302 	orr.w	r3, r3, #2
 8005eda:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ee4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005eec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d01c      	beq.n	8005f2e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005ef4:	68f8      	ldr	r0, [r7, #12]
 8005ef6:	f7ff fe3b 	bl	8005b70 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	6859      	ldr	r1, [r3, #4]
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	4b0d      	ldr	r3, [pc, #52]	@ (8005f3c <I2C_IsErrorOccurred+0x1bc>)
 8005f06:	400b      	ands	r3, r1
 8005f08:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005f0e:	6a3b      	ldr	r3, [r7, #32]
 8005f10:	431a      	orrs	r2, r3
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2220      	movs	r2, #32
 8005f1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2200      	movs	r2, #0
 8005f22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005f2e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3728      	adds	r7, #40	@ 0x28
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}
 8005f3a:	bf00      	nop
 8005f3c:	fe00e800 	.word	0xfe00e800

08005f40 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b087      	sub	sp, #28
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	60f8      	str	r0, [r7, #12]
 8005f48:	607b      	str	r3, [r7, #4]
 8005f4a:	460b      	mov	r3, r1
 8005f4c:	817b      	strh	r3, [r7, #10]
 8005f4e:	4613      	mov	r3, r2
 8005f50:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005f52:	897b      	ldrh	r3, [r7, #10]
 8005f54:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005f58:	7a7b      	ldrb	r3, [r7, #9]
 8005f5a:	041b      	lsls	r3, r3, #16
 8005f5c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005f60:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005f66:	6a3b      	ldr	r3, [r7, #32]
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005f6e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	685a      	ldr	r2, [r3, #4]
 8005f76:	6a3b      	ldr	r3, [r7, #32]
 8005f78:	0d5b      	lsrs	r3, r3, #21
 8005f7a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005f7e:	4b08      	ldr	r3, [pc, #32]	@ (8005fa0 <I2C_TransferConfig+0x60>)
 8005f80:	430b      	orrs	r3, r1
 8005f82:	43db      	mvns	r3, r3
 8005f84:	ea02 0103 	and.w	r1, r2, r3
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	697a      	ldr	r2, [r7, #20]
 8005f8e:	430a      	orrs	r2, r1
 8005f90:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005f92:	bf00      	nop
 8005f94:	371c      	adds	r7, #28
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr
 8005f9e:	bf00      	nop
 8005fa0:	03ff63ff 	.word	0x03ff63ff

08005fa4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b082      	sub	sp, #8
 8005fa8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8005faa:	2300      	movs	r3, #0
 8005fac:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005fae:	4b23      	ldr	r3, [pc, #140]	@ (800603c <HAL_PWREx_EnableOverDrive+0x98>)
 8005fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fb2:	4a22      	ldr	r2, [pc, #136]	@ (800603c <HAL_PWREx_EnableOverDrive+0x98>)
 8005fb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005fb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8005fba:	4b20      	ldr	r3, [pc, #128]	@ (800603c <HAL_PWREx_EnableOverDrive+0x98>)
 8005fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005fc2:	603b      	str	r3, [r7, #0]
 8005fc4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005fc6:	4b1e      	ldr	r3, [pc, #120]	@ (8006040 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a1d      	ldr	r2, [pc, #116]	@ (8006040 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005fcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005fd0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005fd2:	f7fe f937 	bl	8004244 <HAL_GetTick>
 8005fd6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005fd8:	e009      	b.n	8005fee <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005fda:	f7fe f933 	bl	8004244 <HAL_GetTick>
 8005fde:	4602      	mov	r2, r0
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	1ad3      	subs	r3, r2, r3
 8005fe4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005fe8:	d901      	bls.n	8005fee <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8005fea:	2303      	movs	r3, #3
 8005fec:	e022      	b.n	8006034 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005fee:	4b14      	ldr	r3, [pc, #80]	@ (8006040 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005ff6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ffa:	d1ee      	bne.n	8005fda <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005ffc:	4b10      	ldr	r3, [pc, #64]	@ (8006040 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a0f      	ldr	r2, [pc, #60]	@ (8006040 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006002:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006006:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006008:	f7fe f91c 	bl	8004244 <HAL_GetTick>
 800600c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800600e:	e009      	b.n	8006024 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006010:	f7fe f918 	bl	8004244 <HAL_GetTick>
 8006014:	4602      	mov	r2, r0
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	1ad3      	subs	r3, r2, r3
 800601a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800601e:	d901      	bls.n	8006024 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006020:	2303      	movs	r3, #3
 8006022:	e007      	b.n	8006034 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006024:	4b06      	ldr	r3, [pc, #24]	@ (8006040 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800602c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006030:	d1ee      	bne.n	8006010 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006032:	2300      	movs	r3, #0
}
 8006034:	4618      	mov	r0, r3
 8006036:	3708      	adds	r7, #8
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}
 800603c:	40023800 	.word	0x40023800
 8006040:	40007000 	.word	0x40007000

08006044 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b086      	sub	sp, #24
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800604c:	2300      	movs	r3, #0
 800604e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d101      	bne.n	800605a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	e291      	b.n	800657e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f003 0301 	and.w	r3, r3, #1
 8006062:	2b00      	cmp	r3, #0
 8006064:	f000 8087 	beq.w	8006176 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006068:	4b96      	ldr	r3, [pc, #600]	@ (80062c4 <HAL_RCC_OscConfig+0x280>)
 800606a:	689b      	ldr	r3, [r3, #8]
 800606c:	f003 030c 	and.w	r3, r3, #12
 8006070:	2b04      	cmp	r3, #4
 8006072:	d00c      	beq.n	800608e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006074:	4b93      	ldr	r3, [pc, #588]	@ (80062c4 <HAL_RCC_OscConfig+0x280>)
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	f003 030c 	and.w	r3, r3, #12
 800607c:	2b08      	cmp	r3, #8
 800607e:	d112      	bne.n	80060a6 <HAL_RCC_OscConfig+0x62>
 8006080:	4b90      	ldr	r3, [pc, #576]	@ (80062c4 <HAL_RCC_OscConfig+0x280>)
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006088:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800608c:	d10b      	bne.n	80060a6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800608e:	4b8d      	ldr	r3, [pc, #564]	@ (80062c4 <HAL_RCC_OscConfig+0x280>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006096:	2b00      	cmp	r3, #0
 8006098:	d06c      	beq.n	8006174 <HAL_RCC_OscConfig+0x130>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d168      	bne.n	8006174 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	e26b      	b.n	800657e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060ae:	d106      	bne.n	80060be <HAL_RCC_OscConfig+0x7a>
 80060b0:	4b84      	ldr	r3, [pc, #528]	@ (80062c4 <HAL_RCC_OscConfig+0x280>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a83      	ldr	r2, [pc, #524]	@ (80062c4 <HAL_RCC_OscConfig+0x280>)
 80060b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060ba:	6013      	str	r3, [r2, #0]
 80060bc:	e02e      	b.n	800611c <HAL_RCC_OscConfig+0xd8>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d10c      	bne.n	80060e0 <HAL_RCC_OscConfig+0x9c>
 80060c6:	4b7f      	ldr	r3, [pc, #508]	@ (80062c4 <HAL_RCC_OscConfig+0x280>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a7e      	ldr	r2, [pc, #504]	@ (80062c4 <HAL_RCC_OscConfig+0x280>)
 80060cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80060d0:	6013      	str	r3, [r2, #0]
 80060d2:	4b7c      	ldr	r3, [pc, #496]	@ (80062c4 <HAL_RCC_OscConfig+0x280>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a7b      	ldr	r2, [pc, #492]	@ (80062c4 <HAL_RCC_OscConfig+0x280>)
 80060d8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80060dc:	6013      	str	r3, [r2, #0]
 80060de:	e01d      	b.n	800611c <HAL_RCC_OscConfig+0xd8>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80060e8:	d10c      	bne.n	8006104 <HAL_RCC_OscConfig+0xc0>
 80060ea:	4b76      	ldr	r3, [pc, #472]	@ (80062c4 <HAL_RCC_OscConfig+0x280>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a75      	ldr	r2, [pc, #468]	@ (80062c4 <HAL_RCC_OscConfig+0x280>)
 80060f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80060f4:	6013      	str	r3, [r2, #0]
 80060f6:	4b73      	ldr	r3, [pc, #460]	@ (80062c4 <HAL_RCC_OscConfig+0x280>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a72      	ldr	r2, [pc, #456]	@ (80062c4 <HAL_RCC_OscConfig+0x280>)
 80060fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006100:	6013      	str	r3, [r2, #0]
 8006102:	e00b      	b.n	800611c <HAL_RCC_OscConfig+0xd8>
 8006104:	4b6f      	ldr	r3, [pc, #444]	@ (80062c4 <HAL_RCC_OscConfig+0x280>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a6e      	ldr	r2, [pc, #440]	@ (80062c4 <HAL_RCC_OscConfig+0x280>)
 800610a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800610e:	6013      	str	r3, [r2, #0]
 8006110:	4b6c      	ldr	r3, [pc, #432]	@ (80062c4 <HAL_RCC_OscConfig+0x280>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a6b      	ldr	r2, [pc, #428]	@ (80062c4 <HAL_RCC_OscConfig+0x280>)
 8006116:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800611a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d013      	beq.n	800614c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006124:	f7fe f88e 	bl	8004244 <HAL_GetTick>
 8006128:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800612a:	e008      	b.n	800613e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800612c:	f7fe f88a 	bl	8004244 <HAL_GetTick>
 8006130:	4602      	mov	r2, r0
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	1ad3      	subs	r3, r2, r3
 8006136:	2b64      	cmp	r3, #100	@ 0x64
 8006138:	d901      	bls.n	800613e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800613a:	2303      	movs	r3, #3
 800613c:	e21f      	b.n	800657e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800613e:	4b61      	ldr	r3, [pc, #388]	@ (80062c4 <HAL_RCC_OscConfig+0x280>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006146:	2b00      	cmp	r3, #0
 8006148:	d0f0      	beq.n	800612c <HAL_RCC_OscConfig+0xe8>
 800614a:	e014      	b.n	8006176 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800614c:	f7fe f87a 	bl	8004244 <HAL_GetTick>
 8006150:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006152:	e008      	b.n	8006166 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006154:	f7fe f876 	bl	8004244 <HAL_GetTick>
 8006158:	4602      	mov	r2, r0
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	1ad3      	subs	r3, r2, r3
 800615e:	2b64      	cmp	r3, #100	@ 0x64
 8006160:	d901      	bls.n	8006166 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006162:	2303      	movs	r3, #3
 8006164:	e20b      	b.n	800657e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006166:	4b57      	ldr	r3, [pc, #348]	@ (80062c4 <HAL_RCC_OscConfig+0x280>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800616e:	2b00      	cmp	r3, #0
 8006170:	d1f0      	bne.n	8006154 <HAL_RCC_OscConfig+0x110>
 8006172:	e000      	b.n	8006176 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006174:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f003 0302 	and.w	r3, r3, #2
 800617e:	2b00      	cmp	r3, #0
 8006180:	d069      	beq.n	8006256 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006182:	4b50      	ldr	r3, [pc, #320]	@ (80062c4 <HAL_RCC_OscConfig+0x280>)
 8006184:	689b      	ldr	r3, [r3, #8]
 8006186:	f003 030c 	and.w	r3, r3, #12
 800618a:	2b00      	cmp	r3, #0
 800618c:	d00b      	beq.n	80061a6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800618e:	4b4d      	ldr	r3, [pc, #308]	@ (80062c4 <HAL_RCC_OscConfig+0x280>)
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	f003 030c 	and.w	r3, r3, #12
 8006196:	2b08      	cmp	r3, #8
 8006198:	d11c      	bne.n	80061d4 <HAL_RCC_OscConfig+0x190>
 800619a:	4b4a      	ldr	r3, [pc, #296]	@ (80062c4 <HAL_RCC_OscConfig+0x280>)
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d116      	bne.n	80061d4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80061a6:	4b47      	ldr	r3, [pc, #284]	@ (80062c4 <HAL_RCC_OscConfig+0x280>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f003 0302 	and.w	r3, r3, #2
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d005      	beq.n	80061be <HAL_RCC_OscConfig+0x17a>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	68db      	ldr	r3, [r3, #12]
 80061b6:	2b01      	cmp	r3, #1
 80061b8:	d001      	beq.n	80061be <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	e1df      	b.n	800657e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061be:	4b41      	ldr	r3, [pc, #260]	@ (80062c4 <HAL_RCC_OscConfig+0x280>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	691b      	ldr	r3, [r3, #16]
 80061ca:	00db      	lsls	r3, r3, #3
 80061cc:	493d      	ldr	r1, [pc, #244]	@ (80062c4 <HAL_RCC_OscConfig+0x280>)
 80061ce:	4313      	orrs	r3, r2
 80061d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80061d2:	e040      	b.n	8006256 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	68db      	ldr	r3, [r3, #12]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d023      	beq.n	8006224 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80061dc:	4b39      	ldr	r3, [pc, #228]	@ (80062c4 <HAL_RCC_OscConfig+0x280>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a38      	ldr	r2, [pc, #224]	@ (80062c4 <HAL_RCC_OscConfig+0x280>)
 80061e2:	f043 0301 	orr.w	r3, r3, #1
 80061e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061e8:	f7fe f82c 	bl	8004244 <HAL_GetTick>
 80061ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061ee:	e008      	b.n	8006202 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80061f0:	f7fe f828 	bl	8004244 <HAL_GetTick>
 80061f4:	4602      	mov	r2, r0
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	1ad3      	subs	r3, r2, r3
 80061fa:	2b02      	cmp	r3, #2
 80061fc:	d901      	bls.n	8006202 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80061fe:	2303      	movs	r3, #3
 8006200:	e1bd      	b.n	800657e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006202:	4b30      	ldr	r3, [pc, #192]	@ (80062c4 <HAL_RCC_OscConfig+0x280>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f003 0302 	and.w	r3, r3, #2
 800620a:	2b00      	cmp	r3, #0
 800620c:	d0f0      	beq.n	80061f0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800620e:	4b2d      	ldr	r3, [pc, #180]	@ (80062c4 <HAL_RCC_OscConfig+0x280>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	691b      	ldr	r3, [r3, #16]
 800621a:	00db      	lsls	r3, r3, #3
 800621c:	4929      	ldr	r1, [pc, #164]	@ (80062c4 <HAL_RCC_OscConfig+0x280>)
 800621e:	4313      	orrs	r3, r2
 8006220:	600b      	str	r3, [r1, #0]
 8006222:	e018      	b.n	8006256 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006224:	4b27      	ldr	r3, [pc, #156]	@ (80062c4 <HAL_RCC_OscConfig+0x280>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a26      	ldr	r2, [pc, #152]	@ (80062c4 <HAL_RCC_OscConfig+0x280>)
 800622a:	f023 0301 	bic.w	r3, r3, #1
 800622e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006230:	f7fe f808 	bl	8004244 <HAL_GetTick>
 8006234:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006236:	e008      	b.n	800624a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006238:	f7fe f804 	bl	8004244 <HAL_GetTick>
 800623c:	4602      	mov	r2, r0
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	1ad3      	subs	r3, r2, r3
 8006242:	2b02      	cmp	r3, #2
 8006244:	d901      	bls.n	800624a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006246:	2303      	movs	r3, #3
 8006248:	e199      	b.n	800657e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800624a:	4b1e      	ldr	r3, [pc, #120]	@ (80062c4 <HAL_RCC_OscConfig+0x280>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f003 0302 	and.w	r3, r3, #2
 8006252:	2b00      	cmp	r3, #0
 8006254:	d1f0      	bne.n	8006238 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f003 0308 	and.w	r3, r3, #8
 800625e:	2b00      	cmp	r3, #0
 8006260:	d038      	beq.n	80062d4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	695b      	ldr	r3, [r3, #20]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d019      	beq.n	800629e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800626a:	4b16      	ldr	r3, [pc, #88]	@ (80062c4 <HAL_RCC_OscConfig+0x280>)
 800626c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800626e:	4a15      	ldr	r2, [pc, #84]	@ (80062c4 <HAL_RCC_OscConfig+0x280>)
 8006270:	f043 0301 	orr.w	r3, r3, #1
 8006274:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006276:	f7fd ffe5 	bl	8004244 <HAL_GetTick>
 800627a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800627c:	e008      	b.n	8006290 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800627e:	f7fd ffe1 	bl	8004244 <HAL_GetTick>
 8006282:	4602      	mov	r2, r0
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	1ad3      	subs	r3, r2, r3
 8006288:	2b02      	cmp	r3, #2
 800628a:	d901      	bls.n	8006290 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800628c:	2303      	movs	r3, #3
 800628e:	e176      	b.n	800657e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006290:	4b0c      	ldr	r3, [pc, #48]	@ (80062c4 <HAL_RCC_OscConfig+0x280>)
 8006292:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006294:	f003 0302 	and.w	r3, r3, #2
 8006298:	2b00      	cmp	r3, #0
 800629a:	d0f0      	beq.n	800627e <HAL_RCC_OscConfig+0x23a>
 800629c:	e01a      	b.n	80062d4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800629e:	4b09      	ldr	r3, [pc, #36]	@ (80062c4 <HAL_RCC_OscConfig+0x280>)
 80062a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062a2:	4a08      	ldr	r2, [pc, #32]	@ (80062c4 <HAL_RCC_OscConfig+0x280>)
 80062a4:	f023 0301 	bic.w	r3, r3, #1
 80062a8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062aa:	f7fd ffcb 	bl	8004244 <HAL_GetTick>
 80062ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80062b0:	e00a      	b.n	80062c8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80062b2:	f7fd ffc7 	bl	8004244 <HAL_GetTick>
 80062b6:	4602      	mov	r2, r0
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	1ad3      	subs	r3, r2, r3
 80062bc:	2b02      	cmp	r3, #2
 80062be:	d903      	bls.n	80062c8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80062c0:	2303      	movs	r3, #3
 80062c2:	e15c      	b.n	800657e <HAL_RCC_OscConfig+0x53a>
 80062c4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80062c8:	4b91      	ldr	r3, [pc, #580]	@ (8006510 <HAL_RCC_OscConfig+0x4cc>)
 80062ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062cc:	f003 0302 	and.w	r3, r3, #2
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d1ee      	bne.n	80062b2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f003 0304 	and.w	r3, r3, #4
 80062dc:	2b00      	cmp	r3, #0
 80062de:	f000 80a4 	beq.w	800642a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80062e2:	4b8b      	ldr	r3, [pc, #556]	@ (8006510 <HAL_RCC_OscConfig+0x4cc>)
 80062e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d10d      	bne.n	800630a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80062ee:	4b88      	ldr	r3, [pc, #544]	@ (8006510 <HAL_RCC_OscConfig+0x4cc>)
 80062f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062f2:	4a87      	ldr	r2, [pc, #540]	@ (8006510 <HAL_RCC_OscConfig+0x4cc>)
 80062f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80062f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80062fa:	4b85      	ldr	r3, [pc, #532]	@ (8006510 <HAL_RCC_OscConfig+0x4cc>)
 80062fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006302:	60bb      	str	r3, [r7, #8]
 8006304:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006306:	2301      	movs	r3, #1
 8006308:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800630a:	4b82      	ldr	r3, [pc, #520]	@ (8006514 <HAL_RCC_OscConfig+0x4d0>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006312:	2b00      	cmp	r3, #0
 8006314:	d118      	bne.n	8006348 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006316:	4b7f      	ldr	r3, [pc, #508]	@ (8006514 <HAL_RCC_OscConfig+0x4d0>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a7e      	ldr	r2, [pc, #504]	@ (8006514 <HAL_RCC_OscConfig+0x4d0>)
 800631c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006320:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006322:	f7fd ff8f 	bl	8004244 <HAL_GetTick>
 8006326:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006328:	e008      	b.n	800633c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800632a:	f7fd ff8b 	bl	8004244 <HAL_GetTick>
 800632e:	4602      	mov	r2, r0
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	1ad3      	subs	r3, r2, r3
 8006334:	2b64      	cmp	r3, #100	@ 0x64
 8006336:	d901      	bls.n	800633c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006338:	2303      	movs	r3, #3
 800633a:	e120      	b.n	800657e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800633c:	4b75      	ldr	r3, [pc, #468]	@ (8006514 <HAL_RCC_OscConfig+0x4d0>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006344:	2b00      	cmp	r3, #0
 8006346:	d0f0      	beq.n	800632a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	2b01      	cmp	r3, #1
 800634e:	d106      	bne.n	800635e <HAL_RCC_OscConfig+0x31a>
 8006350:	4b6f      	ldr	r3, [pc, #444]	@ (8006510 <HAL_RCC_OscConfig+0x4cc>)
 8006352:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006354:	4a6e      	ldr	r2, [pc, #440]	@ (8006510 <HAL_RCC_OscConfig+0x4cc>)
 8006356:	f043 0301 	orr.w	r3, r3, #1
 800635a:	6713      	str	r3, [r2, #112]	@ 0x70
 800635c:	e02d      	b.n	80063ba <HAL_RCC_OscConfig+0x376>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	689b      	ldr	r3, [r3, #8]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d10c      	bne.n	8006380 <HAL_RCC_OscConfig+0x33c>
 8006366:	4b6a      	ldr	r3, [pc, #424]	@ (8006510 <HAL_RCC_OscConfig+0x4cc>)
 8006368:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800636a:	4a69      	ldr	r2, [pc, #420]	@ (8006510 <HAL_RCC_OscConfig+0x4cc>)
 800636c:	f023 0301 	bic.w	r3, r3, #1
 8006370:	6713      	str	r3, [r2, #112]	@ 0x70
 8006372:	4b67      	ldr	r3, [pc, #412]	@ (8006510 <HAL_RCC_OscConfig+0x4cc>)
 8006374:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006376:	4a66      	ldr	r2, [pc, #408]	@ (8006510 <HAL_RCC_OscConfig+0x4cc>)
 8006378:	f023 0304 	bic.w	r3, r3, #4
 800637c:	6713      	str	r3, [r2, #112]	@ 0x70
 800637e:	e01c      	b.n	80063ba <HAL_RCC_OscConfig+0x376>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	2b05      	cmp	r3, #5
 8006386:	d10c      	bne.n	80063a2 <HAL_RCC_OscConfig+0x35e>
 8006388:	4b61      	ldr	r3, [pc, #388]	@ (8006510 <HAL_RCC_OscConfig+0x4cc>)
 800638a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800638c:	4a60      	ldr	r2, [pc, #384]	@ (8006510 <HAL_RCC_OscConfig+0x4cc>)
 800638e:	f043 0304 	orr.w	r3, r3, #4
 8006392:	6713      	str	r3, [r2, #112]	@ 0x70
 8006394:	4b5e      	ldr	r3, [pc, #376]	@ (8006510 <HAL_RCC_OscConfig+0x4cc>)
 8006396:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006398:	4a5d      	ldr	r2, [pc, #372]	@ (8006510 <HAL_RCC_OscConfig+0x4cc>)
 800639a:	f043 0301 	orr.w	r3, r3, #1
 800639e:	6713      	str	r3, [r2, #112]	@ 0x70
 80063a0:	e00b      	b.n	80063ba <HAL_RCC_OscConfig+0x376>
 80063a2:	4b5b      	ldr	r3, [pc, #364]	@ (8006510 <HAL_RCC_OscConfig+0x4cc>)
 80063a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063a6:	4a5a      	ldr	r2, [pc, #360]	@ (8006510 <HAL_RCC_OscConfig+0x4cc>)
 80063a8:	f023 0301 	bic.w	r3, r3, #1
 80063ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80063ae:	4b58      	ldr	r3, [pc, #352]	@ (8006510 <HAL_RCC_OscConfig+0x4cc>)
 80063b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063b2:	4a57      	ldr	r2, [pc, #348]	@ (8006510 <HAL_RCC_OscConfig+0x4cc>)
 80063b4:	f023 0304 	bic.w	r3, r3, #4
 80063b8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d015      	beq.n	80063ee <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063c2:	f7fd ff3f 	bl	8004244 <HAL_GetTick>
 80063c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063c8:	e00a      	b.n	80063e0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063ca:	f7fd ff3b 	bl	8004244 <HAL_GetTick>
 80063ce:	4602      	mov	r2, r0
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	1ad3      	subs	r3, r2, r3
 80063d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063d8:	4293      	cmp	r3, r2
 80063da:	d901      	bls.n	80063e0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80063dc:	2303      	movs	r3, #3
 80063de:	e0ce      	b.n	800657e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063e0:	4b4b      	ldr	r3, [pc, #300]	@ (8006510 <HAL_RCC_OscConfig+0x4cc>)
 80063e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063e4:	f003 0302 	and.w	r3, r3, #2
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d0ee      	beq.n	80063ca <HAL_RCC_OscConfig+0x386>
 80063ec:	e014      	b.n	8006418 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063ee:	f7fd ff29 	bl	8004244 <HAL_GetTick>
 80063f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80063f4:	e00a      	b.n	800640c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063f6:	f7fd ff25 	bl	8004244 <HAL_GetTick>
 80063fa:	4602      	mov	r2, r0
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	1ad3      	subs	r3, r2, r3
 8006400:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006404:	4293      	cmp	r3, r2
 8006406:	d901      	bls.n	800640c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006408:	2303      	movs	r3, #3
 800640a:	e0b8      	b.n	800657e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800640c:	4b40      	ldr	r3, [pc, #256]	@ (8006510 <HAL_RCC_OscConfig+0x4cc>)
 800640e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006410:	f003 0302 	and.w	r3, r3, #2
 8006414:	2b00      	cmp	r3, #0
 8006416:	d1ee      	bne.n	80063f6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006418:	7dfb      	ldrb	r3, [r7, #23]
 800641a:	2b01      	cmp	r3, #1
 800641c:	d105      	bne.n	800642a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800641e:	4b3c      	ldr	r3, [pc, #240]	@ (8006510 <HAL_RCC_OscConfig+0x4cc>)
 8006420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006422:	4a3b      	ldr	r2, [pc, #236]	@ (8006510 <HAL_RCC_OscConfig+0x4cc>)
 8006424:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006428:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	699b      	ldr	r3, [r3, #24]
 800642e:	2b00      	cmp	r3, #0
 8006430:	f000 80a4 	beq.w	800657c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006434:	4b36      	ldr	r3, [pc, #216]	@ (8006510 <HAL_RCC_OscConfig+0x4cc>)
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	f003 030c 	and.w	r3, r3, #12
 800643c:	2b08      	cmp	r3, #8
 800643e:	d06b      	beq.n	8006518 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	699b      	ldr	r3, [r3, #24]
 8006444:	2b02      	cmp	r3, #2
 8006446:	d149      	bne.n	80064dc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006448:	4b31      	ldr	r3, [pc, #196]	@ (8006510 <HAL_RCC_OscConfig+0x4cc>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a30      	ldr	r2, [pc, #192]	@ (8006510 <HAL_RCC_OscConfig+0x4cc>)
 800644e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006452:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006454:	f7fd fef6 	bl	8004244 <HAL_GetTick>
 8006458:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800645a:	e008      	b.n	800646e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800645c:	f7fd fef2 	bl	8004244 <HAL_GetTick>
 8006460:	4602      	mov	r2, r0
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	1ad3      	subs	r3, r2, r3
 8006466:	2b02      	cmp	r3, #2
 8006468:	d901      	bls.n	800646e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800646a:	2303      	movs	r3, #3
 800646c:	e087      	b.n	800657e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800646e:	4b28      	ldr	r3, [pc, #160]	@ (8006510 <HAL_RCC_OscConfig+0x4cc>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006476:	2b00      	cmp	r3, #0
 8006478:	d1f0      	bne.n	800645c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	69da      	ldr	r2, [r3, #28]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6a1b      	ldr	r3, [r3, #32]
 8006482:	431a      	orrs	r2, r3
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006488:	019b      	lsls	r3, r3, #6
 800648a:	431a      	orrs	r2, r3
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006490:	085b      	lsrs	r3, r3, #1
 8006492:	3b01      	subs	r3, #1
 8006494:	041b      	lsls	r3, r3, #16
 8006496:	431a      	orrs	r2, r3
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800649c:	061b      	lsls	r3, r3, #24
 800649e:	4313      	orrs	r3, r2
 80064a0:	4a1b      	ldr	r2, [pc, #108]	@ (8006510 <HAL_RCC_OscConfig+0x4cc>)
 80064a2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80064a6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80064a8:	4b19      	ldr	r3, [pc, #100]	@ (8006510 <HAL_RCC_OscConfig+0x4cc>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a18      	ldr	r2, [pc, #96]	@ (8006510 <HAL_RCC_OscConfig+0x4cc>)
 80064ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80064b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064b4:	f7fd fec6 	bl	8004244 <HAL_GetTick>
 80064b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064ba:	e008      	b.n	80064ce <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064bc:	f7fd fec2 	bl	8004244 <HAL_GetTick>
 80064c0:	4602      	mov	r2, r0
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	1ad3      	subs	r3, r2, r3
 80064c6:	2b02      	cmp	r3, #2
 80064c8:	d901      	bls.n	80064ce <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80064ca:	2303      	movs	r3, #3
 80064cc:	e057      	b.n	800657e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064ce:	4b10      	ldr	r3, [pc, #64]	@ (8006510 <HAL_RCC_OscConfig+0x4cc>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d0f0      	beq.n	80064bc <HAL_RCC_OscConfig+0x478>
 80064da:	e04f      	b.n	800657c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064dc:	4b0c      	ldr	r3, [pc, #48]	@ (8006510 <HAL_RCC_OscConfig+0x4cc>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a0b      	ldr	r2, [pc, #44]	@ (8006510 <HAL_RCC_OscConfig+0x4cc>)
 80064e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80064e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064e8:	f7fd feac 	bl	8004244 <HAL_GetTick>
 80064ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064ee:	e008      	b.n	8006502 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064f0:	f7fd fea8 	bl	8004244 <HAL_GetTick>
 80064f4:	4602      	mov	r2, r0
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	1ad3      	subs	r3, r2, r3
 80064fa:	2b02      	cmp	r3, #2
 80064fc:	d901      	bls.n	8006502 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80064fe:	2303      	movs	r3, #3
 8006500:	e03d      	b.n	800657e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006502:	4b03      	ldr	r3, [pc, #12]	@ (8006510 <HAL_RCC_OscConfig+0x4cc>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800650a:	2b00      	cmp	r3, #0
 800650c:	d1f0      	bne.n	80064f0 <HAL_RCC_OscConfig+0x4ac>
 800650e:	e035      	b.n	800657c <HAL_RCC_OscConfig+0x538>
 8006510:	40023800 	.word	0x40023800
 8006514:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006518:	4b1b      	ldr	r3, [pc, #108]	@ (8006588 <HAL_RCC_OscConfig+0x544>)
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	699b      	ldr	r3, [r3, #24]
 8006522:	2b01      	cmp	r3, #1
 8006524:	d028      	beq.n	8006578 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006530:	429a      	cmp	r2, r3
 8006532:	d121      	bne.n	8006578 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800653e:	429a      	cmp	r2, r3
 8006540:	d11a      	bne.n	8006578 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006542:	68fa      	ldr	r2, [r7, #12]
 8006544:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006548:	4013      	ands	r3, r2
 800654a:	687a      	ldr	r2, [r7, #4]
 800654c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800654e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006550:	4293      	cmp	r3, r2
 8006552:	d111      	bne.n	8006578 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800655e:	085b      	lsrs	r3, r3, #1
 8006560:	3b01      	subs	r3, #1
 8006562:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006564:	429a      	cmp	r2, r3
 8006566:	d107      	bne.n	8006578 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006572:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006574:	429a      	cmp	r2, r3
 8006576:	d001      	beq.n	800657c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006578:	2301      	movs	r3, #1
 800657a:	e000      	b.n	800657e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800657c:	2300      	movs	r3, #0
}
 800657e:	4618      	mov	r0, r3
 8006580:	3718      	adds	r7, #24
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}
 8006586:	bf00      	nop
 8006588:	40023800 	.word	0x40023800

0800658c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b084      	sub	sp, #16
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006596:	2300      	movs	r3, #0
 8006598:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d101      	bne.n	80065a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80065a0:	2301      	movs	r3, #1
 80065a2:	e0d0      	b.n	8006746 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80065a4:	4b6a      	ldr	r3, [pc, #424]	@ (8006750 <HAL_RCC_ClockConfig+0x1c4>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f003 030f 	and.w	r3, r3, #15
 80065ac:	683a      	ldr	r2, [r7, #0]
 80065ae:	429a      	cmp	r2, r3
 80065b0:	d910      	bls.n	80065d4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065b2:	4b67      	ldr	r3, [pc, #412]	@ (8006750 <HAL_RCC_ClockConfig+0x1c4>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f023 020f 	bic.w	r2, r3, #15
 80065ba:	4965      	ldr	r1, [pc, #404]	@ (8006750 <HAL_RCC_ClockConfig+0x1c4>)
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	4313      	orrs	r3, r2
 80065c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065c2:	4b63      	ldr	r3, [pc, #396]	@ (8006750 <HAL_RCC_ClockConfig+0x1c4>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f003 030f 	and.w	r3, r3, #15
 80065ca:	683a      	ldr	r2, [r7, #0]
 80065cc:	429a      	cmp	r2, r3
 80065ce:	d001      	beq.n	80065d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80065d0:	2301      	movs	r3, #1
 80065d2:	e0b8      	b.n	8006746 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f003 0302 	and.w	r3, r3, #2
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d020      	beq.n	8006622 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f003 0304 	and.w	r3, r3, #4
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d005      	beq.n	80065f8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80065ec:	4b59      	ldr	r3, [pc, #356]	@ (8006754 <HAL_RCC_ClockConfig+0x1c8>)
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	4a58      	ldr	r2, [pc, #352]	@ (8006754 <HAL_RCC_ClockConfig+0x1c8>)
 80065f2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80065f6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f003 0308 	and.w	r3, r3, #8
 8006600:	2b00      	cmp	r3, #0
 8006602:	d005      	beq.n	8006610 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006604:	4b53      	ldr	r3, [pc, #332]	@ (8006754 <HAL_RCC_ClockConfig+0x1c8>)
 8006606:	689b      	ldr	r3, [r3, #8]
 8006608:	4a52      	ldr	r2, [pc, #328]	@ (8006754 <HAL_RCC_ClockConfig+0x1c8>)
 800660a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800660e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006610:	4b50      	ldr	r3, [pc, #320]	@ (8006754 <HAL_RCC_ClockConfig+0x1c8>)
 8006612:	689b      	ldr	r3, [r3, #8]
 8006614:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	689b      	ldr	r3, [r3, #8]
 800661c:	494d      	ldr	r1, [pc, #308]	@ (8006754 <HAL_RCC_ClockConfig+0x1c8>)
 800661e:	4313      	orrs	r3, r2
 8006620:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f003 0301 	and.w	r3, r3, #1
 800662a:	2b00      	cmp	r3, #0
 800662c:	d040      	beq.n	80066b0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	2b01      	cmp	r3, #1
 8006634:	d107      	bne.n	8006646 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006636:	4b47      	ldr	r3, [pc, #284]	@ (8006754 <HAL_RCC_ClockConfig+0x1c8>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800663e:	2b00      	cmp	r3, #0
 8006640:	d115      	bne.n	800666e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006642:	2301      	movs	r3, #1
 8006644:	e07f      	b.n	8006746 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	2b02      	cmp	r3, #2
 800664c:	d107      	bne.n	800665e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800664e:	4b41      	ldr	r3, [pc, #260]	@ (8006754 <HAL_RCC_ClockConfig+0x1c8>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006656:	2b00      	cmp	r3, #0
 8006658:	d109      	bne.n	800666e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800665a:	2301      	movs	r3, #1
 800665c:	e073      	b.n	8006746 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800665e:	4b3d      	ldr	r3, [pc, #244]	@ (8006754 <HAL_RCC_ClockConfig+0x1c8>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f003 0302 	and.w	r3, r3, #2
 8006666:	2b00      	cmp	r3, #0
 8006668:	d101      	bne.n	800666e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	e06b      	b.n	8006746 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800666e:	4b39      	ldr	r3, [pc, #228]	@ (8006754 <HAL_RCC_ClockConfig+0x1c8>)
 8006670:	689b      	ldr	r3, [r3, #8]
 8006672:	f023 0203 	bic.w	r2, r3, #3
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	4936      	ldr	r1, [pc, #216]	@ (8006754 <HAL_RCC_ClockConfig+0x1c8>)
 800667c:	4313      	orrs	r3, r2
 800667e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006680:	f7fd fde0 	bl	8004244 <HAL_GetTick>
 8006684:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006686:	e00a      	b.n	800669e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006688:	f7fd fddc 	bl	8004244 <HAL_GetTick>
 800668c:	4602      	mov	r2, r0
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	1ad3      	subs	r3, r2, r3
 8006692:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006696:	4293      	cmp	r3, r2
 8006698:	d901      	bls.n	800669e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800669a:	2303      	movs	r3, #3
 800669c:	e053      	b.n	8006746 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800669e:	4b2d      	ldr	r3, [pc, #180]	@ (8006754 <HAL_RCC_ClockConfig+0x1c8>)
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	f003 020c 	and.w	r2, r3, #12
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	009b      	lsls	r3, r3, #2
 80066ac:	429a      	cmp	r2, r3
 80066ae:	d1eb      	bne.n	8006688 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80066b0:	4b27      	ldr	r3, [pc, #156]	@ (8006750 <HAL_RCC_ClockConfig+0x1c4>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f003 030f 	and.w	r3, r3, #15
 80066b8:	683a      	ldr	r2, [r7, #0]
 80066ba:	429a      	cmp	r2, r3
 80066bc:	d210      	bcs.n	80066e0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066be:	4b24      	ldr	r3, [pc, #144]	@ (8006750 <HAL_RCC_ClockConfig+0x1c4>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f023 020f 	bic.w	r2, r3, #15
 80066c6:	4922      	ldr	r1, [pc, #136]	@ (8006750 <HAL_RCC_ClockConfig+0x1c4>)
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	4313      	orrs	r3, r2
 80066cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80066ce:	4b20      	ldr	r3, [pc, #128]	@ (8006750 <HAL_RCC_ClockConfig+0x1c4>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f003 030f 	and.w	r3, r3, #15
 80066d6:	683a      	ldr	r2, [r7, #0]
 80066d8:	429a      	cmp	r2, r3
 80066da:	d001      	beq.n	80066e0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80066dc:	2301      	movs	r3, #1
 80066de:	e032      	b.n	8006746 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f003 0304 	and.w	r3, r3, #4
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d008      	beq.n	80066fe <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80066ec:	4b19      	ldr	r3, [pc, #100]	@ (8006754 <HAL_RCC_ClockConfig+0x1c8>)
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	4916      	ldr	r1, [pc, #88]	@ (8006754 <HAL_RCC_ClockConfig+0x1c8>)
 80066fa:	4313      	orrs	r3, r2
 80066fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f003 0308 	and.w	r3, r3, #8
 8006706:	2b00      	cmp	r3, #0
 8006708:	d009      	beq.n	800671e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800670a:	4b12      	ldr	r3, [pc, #72]	@ (8006754 <HAL_RCC_ClockConfig+0x1c8>)
 800670c:	689b      	ldr	r3, [r3, #8]
 800670e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	691b      	ldr	r3, [r3, #16]
 8006716:	00db      	lsls	r3, r3, #3
 8006718:	490e      	ldr	r1, [pc, #56]	@ (8006754 <HAL_RCC_ClockConfig+0x1c8>)
 800671a:	4313      	orrs	r3, r2
 800671c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800671e:	f000 f821 	bl	8006764 <HAL_RCC_GetSysClockFreq>
 8006722:	4602      	mov	r2, r0
 8006724:	4b0b      	ldr	r3, [pc, #44]	@ (8006754 <HAL_RCC_ClockConfig+0x1c8>)
 8006726:	689b      	ldr	r3, [r3, #8]
 8006728:	091b      	lsrs	r3, r3, #4
 800672a:	f003 030f 	and.w	r3, r3, #15
 800672e:	490a      	ldr	r1, [pc, #40]	@ (8006758 <HAL_RCC_ClockConfig+0x1cc>)
 8006730:	5ccb      	ldrb	r3, [r1, r3]
 8006732:	fa22 f303 	lsr.w	r3, r2, r3
 8006736:	4a09      	ldr	r2, [pc, #36]	@ (800675c <HAL_RCC_ClockConfig+0x1d0>)
 8006738:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800673a:	4b09      	ldr	r3, [pc, #36]	@ (8006760 <HAL_RCC_ClockConfig+0x1d4>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4618      	mov	r0, r3
 8006740:	f7fd fd3c 	bl	80041bc <HAL_InitTick>

  return HAL_OK;
 8006744:	2300      	movs	r3, #0
}
 8006746:	4618      	mov	r0, r3
 8006748:	3710      	adds	r7, #16
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}
 800674e:	bf00      	nop
 8006750:	40023c00 	.word	0x40023c00
 8006754:	40023800 	.word	0x40023800
 8006758:	08010fb8 	.word	0x08010fb8
 800675c:	20000000 	.word	0x20000000
 8006760:	20000038 	.word	0x20000038

08006764 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006764:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006768:	b090      	sub	sp, #64	@ 0x40
 800676a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800676c:	2300      	movs	r3, #0
 800676e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006770:	2300      	movs	r3, #0
 8006772:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006774:	2300      	movs	r3, #0
 8006776:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8006778:	2300      	movs	r3, #0
 800677a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800677c:	4b59      	ldr	r3, [pc, #356]	@ (80068e4 <HAL_RCC_GetSysClockFreq+0x180>)
 800677e:	689b      	ldr	r3, [r3, #8]
 8006780:	f003 030c 	and.w	r3, r3, #12
 8006784:	2b08      	cmp	r3, #8
 8006786:	d00d      	beq.n	80067a4 <HAL_RCC_GetSysClockFreq+0x40>
 8006788:	2b08      	cmp	r3, #8
 800678a:	f200 80a1 	bhi.w	80068d0 <HAL_RCC_GetSysClockFreq+0x16c>
 800678e:	2b00      	cmp	r3, #0
 8006790:	d002      	beq.n	8006798 <HAL_RCC_GetSysClockFreq+0x34>
 8006792:	2b04      	cmp	r3, #4
 8006794:	d003      	beq.n	800679e <HAL_RCC_GetSysClockFreq+0x3a>
 8006796:	e09b      	b.n	80068d0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006798:	4b53      	ldr	r3, [pc, #332]	@ (80068e8 <HAL_RCC_GetSysClockFreq+0x184>)
 800679a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800679c:	e09b      	b.n	80068d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800679e:	4b53      	ldr	r3, [pc, #332]	@ (80068ec <HAL_RCC_GetSysClockFreq+0x188>)
 80067a0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80067a2:	e098      	b.n	80068d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80067a4:	4b4f      	ldr	r3, [pc, #316]	@ (80068e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80067ac:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80067ae:	4b4d      	ldr	r3, [pc, #308]	@ (80068e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d028      	beq.n	800680c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80067ba:	4b4a      	ldr	r3, [pc, #296]	@ (80068e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	099b      	lsrs	r3, r3, #6
 80067c0:	2200      	movs	r2, #0
 80067c2:	623b      	str	r3, [r7, #32]
 80067c4:	627a      	str	r2, [r7, #36]	@ 0x24
 80067c6:	6a3b      	ldr	r3, [r7, #32]
 80067c8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80067cc:	2100      	movs	r1, #0
 80067ce:	4b47      	ldr	r3, [pc, #284]	@ (80068ec <HAL_RCC_GetSysClockFreq+0x188>)
 80067d0:	fb03 f201 	mul.w	r2, r3, r1
 80067d4:	2300      	movs	r3, #0
 80067d6:	fb00 f303 	mul.w	r3, r0, r3
 80067da:	4413      	add	r3, r2
 80067dc:	4a43      	ldr	r2, [pc, #268]	@ (80068ec <HAL_RCC_GetSysClockFreq+0x188>)
 80067de:	fba0 1202 	umull	r1, r2, r0, r2
 80067e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80067e4:	460a      	mov	r2, r1
 80067e6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80067e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80067ea:	4413      	add	r3, r2
 80067ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80067ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067f0:	2200      	movs	r2, #0
 80067f2:	61bb      	str	r3, [r7, #24]
 80067f4:	61fa      	str	r2, [r7, #28]
 80067f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80067fa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80067fe:	f7fa f9f3 	bl	8000be8 <__aeabi_uldivmod>
 8006802:	4602      	mov	r2, r0
 8006804:	460b      	mov	r3, r1
 8006806:	4613      	mov	r3, r2
 8006808:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800680a:	e053      	b.n	80068b4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800680c:	4b35      	ldr	r3, [pc, #212]	@ (80068e4 <HAL_RCC_GetSysClockFreq+0x180>)
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	099b      	lsrs	r3, r3, #6
 8006812:	2200      	movs	r2, #0
 8006814:	613b      	str	r3, [r7, #16]
 8006816:	617a      	str	r2, [r7, #20]
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800681e:	f04f 0b00 	mov.w	fp, #0
 8006822:	4652      	mov	r2, sl
 8006824:	465b      	mov	r3, fp
 8006826:	f04f 0000 	mov.w	r0, #0
 800682a:	f04f 0100 	mov.w	r1, #0
 800682e:	0159      	lsls	r1, r3, #5
 8006830:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006834:	0150      	lsls	r0, r2, #5
 8006836:	4602      	mov	r2, r0
 8006838:	460b      	mov	r3, r1
 800683a:	ebb2 080a 	subs.w	r8, r2, sl
 800683e:	eb63 090b 	sbc.w	r9, r3, fp
 8006842:	f04f 0200 	mov.w	r2, #0
 8006846:	f04f 0300 	mov.w	r3, #0
 800684a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800684e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006852:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006856:	ebb2 0408 	subs.w	r4, r2, r8
 800685a:	eb63 0509 	sbc.w	r5, r3, r9
 800685e:	f04f 0200 	mov.w	r2, #0
 8006862:	f04f 0300 	mov.w	r3, #0
 8006866:	00eb      	lsls	r3, r5, #3
 8006868:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800686c:	00e2      	lsls	r2, r4, #3
 800686e:	4614      	mov	r4, r2
 8006870:	461d      	mov	r5, r3
 8006872:	eb14 030a 	adds.w	r3, r4, sl
 8006876:	603b      	str	r3, [r7, #0]
 8006878:	eb45 030b 	adc.w	r3, r5, fp
 800687c:	607b      	str	r3, [r7, #4]
 800687e:	f04f 0200 	mov.w	r2, #0
 8006882:	f04f 0300 	mov.w	r3, #0
 8006886:	e9d7 4500 	ldrd	r4, r5, [r7]
 800688a:	4629      	mov	r1, r5
 800688c:	028b      	lsls	r3, r1, #10
 800688e:	4621      	mov	r1, r4
 8006890:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006894:	4621      	mov	r1, r4
 8006896:	028a      	lsls	r2, r1, #10
 8006898:	4610      	mov	r0, r2
 800689a:	4619      	mov	r1, r3
 800689c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800689e:	2200      	movs	r2, #0
 80068a0:	60bb      	str	r3, [r7, #8]
 80068a2:	60fa      	str	r2, [r7, #12]
 80068a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80068a8:	f7fa f99e 	bl	8000be8 <__aeabi_uldivmod>
 80068ac:	4602      	mov	r2, r0
 80068ae:	460b      	mov	r3, r1
 80068b0:	4613      	mov	r3, r2
 80068b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80068b4:	4b0b      	ldr	r3, [pc, #44]	@ (80068e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	0c1b      	lsrs	r3, r3, #16
 80068ba:	f003 0303 	and.w	r3, r3, #3
 80068be:	3301      	adds	r3, #1
 80068c0:	005b      	lsls	r3, r3, #1
 80068c2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80068c4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80068c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80068cc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80068ce:	e002      	b.n	80068d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80068d0:	4b05      	ldr	r3, [pc, #20]	@ (80068e8 <HAL_RCC_GetSysClockFreq+0x184>)
 80068d2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80068d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80068d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80068d8:	4618      	mov	r0, r3
 80068da:	3740      	adds	r7, #64	@ 0x40
 80068dc:	46bd      	mov	sp, r7
 80068de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80068e2:	bf00      	nop
 80068e4:	40023800 	.word	0x40023800
 80068e8:	00f42400 	.word	0x00f42400
 80068ec:	017d7840 	.word	0x017d7840

080068f0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80068f0:	b480      	push	{r7}
 80068f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80068f4:	4b03      	ldr	r3, [pc, #12]	@ (8006904 <HAL_RCC_GetHCLKFreq+0x14>)
 80068f6:	681b      	ldr	r3, [r3, #0]
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr
 8006902:	bf00      	nop
 8006904:	20000000 	.word	0x20000000

08006908 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800690c:	f7ff fff0 	bl	80068f0 <HAL_RCC_GetHCLKFreq>
 8006910:	4602      	mov	r2, r0
 8006912:	4b05      	ldr	r3, [pc, #20]	@ (8006928 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	0a9b      	lsrs	r3, r3, #10
 8006918:	f003 0307 	and.w	r3, r3, #7
 800691c:	4903      	ldr	r1, [pc, #12]	@ (800692c <HAL_RCC_GetPCLK1Freq+0x24>)
 800691e:	5ccb      	ldrb	r3, [r1, r3]
 8006920:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006924:	4618      	mov	r0, r3
 8006926:	bd80      	pop	{r7, pc}
 8006928:	40023800 	.word	0x40023800
 800692c:	08010fc8 	.word	0x08010fc8

08006930 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006934:	f7ff ffdc 	bl	80068f0 <HAL_RCC_GetHCLKFreq>
 8006938:	4602      	mov	r2, r0
 800693a:	4b05      	ldr	r3, [pc, #20]	@ (8006950 <HAL_RCC_GetPCLK2Freq+0x20>)
 800693c:	689b      	ldr	r3, [r3, #8]
 800693e:	0b5b      	lsrs	r3, r3, #13
 8006940:	f003 0307 	and.w	r3, r3, #7
 8006944:	4903      	ldr	r1, [pc, #12]	@ (8006954 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006946:	5ccb      	ldrb	r3, [r1, r3]
 8006948:	fa22 f303 	lsr.w	r3, r2, r3
}
 800694c:	4618      	mov	r0, r3
 800694e:	bd80      	pop	{r7, pc}
 8006950:	40023800 	.word	0x40023800
 8006954:	08010fc8 	.word	0x08010fc8

08006958 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b088      	sub	sp, #32
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006960:	2300      	movs	r3, #0
 8006962:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006964:	2300      	movs	r3, #0
 8006966:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006968:	2300      	movs	r3, #0
 800696a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800696c:	2300      	movs	r3, #0
 800696e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006970:	2300      	movs	r3, #0
 8006972:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f003 0301 	and.w	r3, r3, #1
 800697c:	2b00      	cmp	r3, #0
 800697e:	d012      	beq.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006980:	4b69      	ldr	r3, [pc, #420]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006982:	689b      	ldr	r3, [r3, #8]
 8006984:	4a68      	ldr	r2, [pc, #416]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006986:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800698a:	6093      	str	r3, [r2, #8]
 800698c:	4b66      	ldr	r3, [pc, #408]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800698e:	689a      	ldr	r2, [r3, #8]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006994:	4964      	ldr	r1, [pc, #400]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006996:	4313      	orrs	r3, r2
 8006998:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d101      	bne.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80069a2:	2301      	movs	r3, #1
 80069a4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d017      	beq.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80069b2:	4b5d      	ldr	r3, [pc, #372]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80069b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80069b8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069c0:	4959      	ldr	r1, [pc, #356]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80069c2:	4313      	orrs	r3, r2
 80069c4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069cc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80069d0:	d101      	bne.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80069d2:	2301      	movs	r3, #1
 80069d4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d101      	bne.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80069de:	2301      	movs	r3, #1
 80069e0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d017      	beq.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80069ee:	4b4e      	ldr	r3, [pc, #312]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80069f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80069f4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069fc:	494a      	ldr	r1, [pc, #296]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80069fe:	4313      	orrs	r3, r2
 8006a00:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a08:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006a0c:	d101      	bne.n	8006a12 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d101      	bne.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d001      	beq.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f003 0320 	and.w	r3, r3, #32
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	f000 808b 	beq.w	8006b52 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006a3c:	4b3a      	ldr	r3, [pc, #232]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a40:	4a39      	ldr	r2, [pc, #228]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a46:	6413      	str	r3, [r2, #64]	@ 0x40
 8006a48:	4b37      	ldr	r3, [pc, #220]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a50:	60bb      	str	r3, [r7, #8]
 8006a52:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006a54:	4b35      	ldr	r3, [pc, #212]	@ (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a34      	ldr	r2, [pc, #208]	@ (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006a5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a60:	f7fd fbf0 	bl	8004244 <HAL_GetTick>
 8006a64:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006a66:	e008      	b.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a68:	f7fd fbec 	bl	8004244 <HAL_GetTick>
 8006a6c:	4602      	mov	r2, r0
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	1ad3      	subs	r3, r2, r3
 8006a72:	2b64      	cmp	r3, #100	@ 0x64
 8006a74:	d901      	bls.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006a76:	2303      	movs	r3, #3
 8006a78:	e357      	b.n	800712a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006a7a:	4b2c      	ldr	r3, [pc, #176]	@ (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d0f0      	beq.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006a86:	4b28      	ldr	r3, [pc, #160]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a8e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d035      	beq.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a9e:	693a      	ldr	r2, [r7, #16]
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	d02e      	beq.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006aa4:	4b20      	ldr	r3, [pc, #128]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006aa6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006aa8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006aac:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006aae:	4b1e      	ldr	r3, [pc, #120]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ab0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ab2:	4a1d      	ldr	r2, [pc, #116]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ab4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ab8:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006aba:	4b1b      	ldr	r3, [pc, #108]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006abc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006abe:	4a1a      	ldr	r2, [pc, #104]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ac0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ac4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006ac6:	4a18      	ldr	r2, [pc, #96]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006acc:	4b16      	ldr	r3, [pc, #88]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ace:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ad0:	f003 0301 	and.w	r3, r3, #1
 8006ad4:	2b01      	cmp	r3, #1
 8006ad6:	d114      	bne.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ad8:	f7fd fbb4 	bl	8004244 <HAL_GetTick>
 8006adc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ade:	e00a      	b.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ae0:	f7fd fbb0 	bl	8004244 <HAL_GetTick>
 8006ae4:	4602      	mov	r2, r0
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	1ad3      	subs	r3, r2, r3
 8006aea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d901      	bls.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006af2:	2303      	movs	r3, #3
 8006af4:	e319      	b.n	800712a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006af6:	4b0c      	ldr	r3, [pc, #48]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006af8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006afa:	f003 0302 	and.w	r3, r3, #2
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d0ee      	beq.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b0a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b0e:	d111      	bne.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006b10:	4b05      	ldr	r3, [pc, #20]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b12:	689b      	ldr	r3, [r3, #8]
 8006b14:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006b1c:	4b04      	ldr	r3, [pc, #16]	@ (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006b1e:	400b      	ands	r3, r1
 8006b20:	4901      	ldr	r1, [pc, #4]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b22:	4313      	orrs	r3, r2
 8006b24:	608b      	str	r3, [r1, #8]
 8006b26:	e00b      	b.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006b28:	40023800 	.word	0x40023800
 8006b2c:	40007000 	.word	0x40007000
 8006b30:	0ffffcff 	.word	0x0ffffcff
 8006b34:	4baa      	ldr	r3, [pc, #680]	@ (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006b36:	689b      	ldr	r3, [r3, #8]
 8006b38:	4aa9      	ldr	r2, [pc, #676]	@ (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006b3a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006b3e:	6093      	str	r3, [r2, #8]
 8006b40:	4ba7      	ldr	r3, [pc, #668]	@ (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006b42:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b4c:	49a4      	ldr	r1, [pc, #656]	@ (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f003 0310 	and.w	r3, r3, #16
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d010      	beq.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006b5e:	4ba0      	ldr	r3, [pc, #640]	@ (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006b60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006b64:	4a9e      	ldr	r2, [pc, #632]	@ (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006b66:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006b6a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8006b6e:	4b9c      	ldr	r3, [pc, #624]	@ (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006b70:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b78:	4999      	ldr	r1, [pc, #612]	@ (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d00a      	beq.n	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006b8c:	4b94      	ldr	r3, [pc, #592]	@ (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b92:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b9a:	4991      	ldr	r1, [pc, #580]	@ (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d00a      	beq.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006bae:	4b8c      	ldr	r3, [pc, #560]	@ (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bb4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006bbc:	4988      	ldr	r1, [pc, #544]	@ (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d00a      	beq.n	8006be6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006bd0:	4b83      	ldr	r3, [pc, #524]	@ (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bd6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006bde:	4980      	ldr	r1, [pc, #512]	@ (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006be0:	4313      	orrs	r3, r2
 8006be2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d00a      	beq.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006bf2:	4b7b      	ldr	r3, [pc, #492]	@ (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bf8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c00:	4977      	ldr	r1, [pc, #476]	@ (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c02:	4313      	orrs	r3, r2
 8006c04:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d00a      	beq.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006c14:	4b72      	ldr	r3, [pc, #456]	@ (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c1a:	f023 0203 	bic.w	r2, r3, #3
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c22:	496f      	ldr	r1, [pc, #444]	@ (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c24:	4313      	orrs	r3, r2
 8006c26:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d00a      	beq.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006c36:	4b6a      	ldr	r3, [pc, #424]	@ (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c3c:	f023 020c 	bic.w	r2, r3, #12
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c44:	4966      	ldr	r1, [pc, #408]	@ (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c46:	4313      	orrs	r3, r2
 8006c48:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d00a      	beq.n	8006c6e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006c58:	4b61      	ldr	r3, [pc, #388]	@ (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c5e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c66:	495e      	ldr	r1, [pc, #376]	@ (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d00a      	beq.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006c7a:	4b59      	ldr	r3, [pc, #356]	@ (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c80:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c88:	4955      	ldr	r1, [pc, #340]	@ (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d00a      	beq.n	8006cb2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006c9c:	4b50      	ldr	r3, [pc, #320]	@ (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ca2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006caa:	494d      	ldr	r1, [pc, #308]	@ (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006cac:	4313      	orrs	r3, r2
 8006cae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d00a      	beq.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006cbe:	4b48      	ldr	r3, [pc, #288]	@ (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cc4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ccc:	4944      	ldr	r1, [pc, #272]	@ (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d00a      	beq.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006ce0:	4b3f      	ldr	r3, [pc, #252]	@ (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ce6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006cee:	493c      	ldr	r1, [pc, #240]	@ (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d00a      	beq.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006d02:	4b37      	ldr	r3, [pc, #220]	@ (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d08:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d10:	4933      	ldr	r1, [pc, #204]	@ (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d12:	4313      	orrs	r3, r2
 8006d14:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d00a      	beq.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006d24:	4b2e      	ldr	r3, [pc, #184]	@ (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d2a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006d32:	492b      	ldr	r1, [pc, #172]	@ (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d34:	4313      	orrs	r3, r2
 8006d36:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d011      	beq.n	8006d6a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006d46:	4b26      	ldr	r3, [pc, #152]	@ (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d4c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006d54:	4922      	ldr	r1, [pc, #136]	@ (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d56:	4313      	orrs	r3, r2
 8006d58:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006d60:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006d64:	d101      	bne.n	8006d6a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8006d66:	2301      	movs	r3, #1
 8006d68:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f003 0308 	and.w	r3, r3, #8
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d001      	beq.n	8006d7a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8006d76:	2301      	movs	r3, #1
 8006d78:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d00a      	beq.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006d86:	4b16      	ldr	r3, [pc, #88]	@ (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d8c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d94:	4912      	ldr	r1, [pc, #72]	@ (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d96:	4313      	orrs	r3, r2
 8006d98:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d00b      	beq.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006da8:	4b0d      	ldr	r3, [pc, #52]	@ (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006dae:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006db8:	4909      	ldr	r1, [pc, #36]	@ (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006dc0:	69fb      	ldr	r3, [r7, #28]
 8006dc2:	2b01      	cmp	r3, #1
 8006dc4:	d006      	beq.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	f000 80d9 	beq.w	8006f86 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006dd4:	4b02      	ldr	r3, [pc, #8]	@ (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a01      	ldr	r2, [pc, #4]	@ (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006dda:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006dde:	e001      	b.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8006de0:	40023800 	.word	0x40023800
 8006de4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006de6:	f7fd fa2d 	bl	8004244 <HAL_GetTick>
 8006dea:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006dec:	e008      	b.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006dee:	f7fd fa29 	bl	8004244 <HAL_GetTick>
 8006df2:	4602      	mov	r2, r0
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	1ad3      	subs	r3, r2, r3
 8006df8:	2b64      	cmp	r3, #100	@ 0x64
 8006dfa:	d901      	bls.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006dfc:	2303      	movs	r3, #3
 8006dfe:	e194      	b.n	800712a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006e00:	4b6c      	ldr	r3, [pc, #432]	@ (8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d1f0      	bne.n	8006dee <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f003 0301 	and.w	r3, r3, #1
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d021      	beq.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d11d      	bne.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006e20:	4b64      	ldr	r3, [pc, #400]	@ (8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006e22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006e26:	0c1b      	lsrs	r3, r3, #16
 8006e28:	f003 0303 	and.w	r3, r3, #3
 8006e2c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006e2e:	4b61      	ldr	r3, [pc, #388]	@ (8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006e30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006e34:	0e1b      	lsrs	r3, r3, #24
 8006e36:	f003 030f 	and.w	r3, r3, #15
 8006e3a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	019a      	lsls	r2, r3, #6
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	041b      	lsls	r3, r3, #16
 8006e46:	431a      	orrs	r2, r3
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	061b      	lsls	r3, r3, #24
 8006e4c:	431a      	orrs	r2, r3
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	689b      	ldr	r3, [r3, #8]
 8006e52:	071b      	lsls	r3, r3, #28
 8006e54:	4957      	ldr	r1, [pc, #348]	@ (8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006e56:	4313      	orrs	r3, r2
 8006e58:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d004      	beq.n	8006e72 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e6c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006e70:	d00a      	beq.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d02e      	beq.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e82:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006e86:	d129      	bne.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006e88:	4b4a      	ldr	r3, [pc, #296]	@ (8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006e8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006e8e:	0c1b      	lsrs	r3, r3, #16
 8006e90:	f003 0303 	and.w	r3, r3, #3
 8006e94:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006e96:	4b47      	ldr	r3, [pc, #284]	@ (8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006e98:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006e9c:	0f1b      	lsrs	r3, r3, #28
 8006e9e:	f003 0307 	and.w	r3, r3, #7
 8006ea2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	019a      	lsls	r2, r3, #6
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	041b      	lsls	r3, r3, #16
 8006eae:	431a      	orrs	r2, r3
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	68db      	ldr	r3, [r3, #12]
 8006eb4:	061b      	lsls	r3, r3, #24
 8006eb6:	431a      	orrs	r2, r3
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	071b      	lsls	r3, r3, #28
 8006ebc:	493d      	ldr	r1, [pc, #244]	@ (8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006ec4:	4b3b      	ldr	r3, [pc, #236]	@ (8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006ec6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006eca:	f023 021f 	bic.w	r2, r3, #31
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ed2:	3b01      	subs	r3, #1
 8006ed4:	4937      	ldr	r1, [pc, #220]	@ (8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d01d      	beq.n	8006f24 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006ee8:	4b32      	ldr	r3, [pc, #200]	@ (8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006eea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006eee:	0e1b      	lsrs	r3, r3, #24
 8006ef0:	f003 030f 	and.w	r3, r3, #15
 8006ef4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006ef6:	4b2f      	ldr	r3, [pc, #188]	@ (8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006ef8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006efc:	0f1b      	lsrs	r3, r3, #28
 8006efe:	f003 0307 	and.w	r3, r3, #7
 8006f02:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	019a      	lsls	r2, r3, #6
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	691b      	ldr	r3, [r3, #16]
 8006f0e:	041b      	lsls	r3, r3, #16
 8006f10:	431a      	orrs	r2, r3
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	061b      	lsls	r3, r3, #24
 8006f16:	431a      	orrs	r2, r3
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	071b      	lsls	r3, r3, #28
 8006f1c:	4925      	ldr	r1, [pc, #148]	@ (8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d011      	beq.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	019a      	lsls	r2, r3, #6
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	691b      	ldr	r3, [r3, #16]
 8006f3a:	041b      	lsls	r3, r3, #16
 8006f3c:	431a      	orrs	r2, r3
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	68db      	ldr	r3, [r3, #12]
 8006f42:	061b      	lsls	r3, r3, #24
 8006f44:	431a      	orrs	r2, r3
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	689b      	ldr	r3, [r3, #8]
 8006f4a:	071b      	lsls	r3, r3, #28
 8006f4c:	4919      	ldr	r1, [pc, #100]	@ (8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006f54:	4b17      	ldr	r3, [pc, #92]	@ (8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a16      	ldr	r2, [pc, #88]	@ (8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006f5a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006f5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f60:	f7fd f970 	bl	8004244 <HAL_GetTick>
 8006f64:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006f66:	e008      	b.n	8006f7a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006f68:	f7fd f96c 	bl	8004244 <HAL_GetTick>
 8006f6c:	4602      	mov	r2, r0
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	1ad3      	subs	r3, r2, r3
 8006f72:	2b64      	cmp	r3, #100	@ 0x64
 8006f74:	d901      	bls.n	8006f7a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006f76:	2303      	movs	r3, #3
 8006f78:	e0d7      	b.n	800712a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006f7a:	4b0e      	ldr	r3, [pc, #56]	@ (8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d0f0      	beq.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006f86:	69bb      	ldr	r3, [r7, #24]
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	f040 80cd 	bne.w	8007128 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006f8e:	4b09      	ldr	r3, [pc, #36]	@ (8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a08      	ldr	r2, [pc, #32]	@ (8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006f94:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006f98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f9a:	f7fd f953 	bl	8004244 <HAL_GetTick>
 8006f9e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006fa0:	e00a      	b.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006fa2:	f7fd f94f 	bl	8004244 <HAL_GetTick>
 8006fa6:	4602      	mov	r2, r0
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	1ad3      	subs	r3, r2, r3
 8006fac:	2b64      	cmp	r3, #100	@ 0x64
 8006fae:	d903      	bls.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006fb0:	2303      	movs	r3, #3
 8006fb2:	e0ba      	b.n	800712a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8006fb4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006fb8:	4b5e      	ldr	r3, [pc, #376]	@ (8007134 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006fc0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006fc4:	d0ed      	beq.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d003      	beq.n	8006fda <HAL_RCCEx_PeriphCLKConfig+0x682>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d009      	beq.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d02e      	beq.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d12a      	bne.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006fee:	4b51      	ldr	r3, [pc, #324]	@ (8007134 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ff4:	0c1b      	lsrs	r3, r3, #16
 8006ff6:	f003 0303 	and.w	r3, r3, #3
 8006ffa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006ffc:	4b4d      	ldr	r3, [pc, #308]	@ (8007134 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007002:	0f1b      	lsrs	r3, r3, #28
 8007004:	f003 0307 	and.w	r3, r3, #7
 8007008:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	695b      	ldr	r3, [r3, #20]
 800700e:	019a      	lsls	r2, r3, #6
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	041b      	lsls	r3, r3, #16
 8007014:	431a      	orrs	r2, r3
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	699b      	ldr	r3, [r3, #24]
 800701a:	061b      	lsls	r3, r3, #24
 800701c:	431a      	orrs	r2, r3
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	071b      	lsls	r3, r3, #28
 8007022:	4944      	ldr	r1, [pc, #272]	@ (8007134 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007024:	4313      	orrs	r3, r2
 8007026:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800702a:	4b42      	ldr	r3, [pc, #264]	@ (8007134 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800702c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007030:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007038:	3b01      	subs	r3, #1
 800703a:	021b      	lsls	r3, r3, #8
 800703c:	493d      	ldr	r1, [pc, #244]	@ (8007134 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800703e:	4313      	orrs	r3, r2
 8007040:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800704c:	2b00      	cmp	r3, #0
 800704e:	d022      	beq.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007054:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007058:	d11d      	bne.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800705a:	4b36      	ldr	r3, [pc, #216]	@ (8007134 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800705c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007060:	0e1b      	lsrs	r3, r3, #24
 8007062:	f003 030f 	and.w	r3, r3, #15
 8007066:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007068:	4b32      	ldr	r3, [pc, #200]	@ (8007134 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800706a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800706e:	0f1b      	lsrs	r3, r3, #28
 8007070:	f003 0307 	and.w	r3, r3, #7
 8007074:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	695b      	ldr	r3, [r3, #20]
 800707a:	019a      	lsls	r2, r3, #6
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6a1b      	ldr	r3, [r3, #32]
 8007080:	041b      	lsls	r3, r3, #16
 8007082:	431a      	orrs	r2, r3
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	061b      	lsls	r3, r3, #24
 8007088:	431a      	orrs	r2, r3
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	071b      	lsls	r3, r3, #28
 800708e:	4929      	ldr	r1, [pc, #164]	@ (8007134 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007090:	4313      	orrs	r3, r2
 8007092:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f003 0308 	and.w	r3, r3, #8
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d028      	beq.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80070a2:	4b24      	ldr	r3, [pc, #144]	@ (8007134 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80070a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070a8:	0e1b      	lsrs	r3, r3, #24
 80070aa:	f003 030f 	and.w	r3, r3, #15
 80070ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80070b0:	4b20      	ldr	r3, [pc, #128]	@ (8007134 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80070b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070b6:	0c1b      	lsrs	r3, r3, #16
 80070b8:	f003 0303 	and.w	r3, r3, #3
 80070bc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	695b      	ldr	r3, [r3, #20]
 80070c2:	019a      	lsls	r2, r3, #6
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	041b      	lsls	r3, r3, #16
 80070c8:	431a      	orrs	r2, r3
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	061b      	lsls	r3, r3, #24
 80070ce:	431a      	orrs	r2, r3
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	69db      	ldr	r3, [r3, #28]
 80070d4:	071b      	lsls	r3, r3, #28
 80070d6:	4917      	ldr	r1, [pc, #92]	@ (8007134 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80070d8:	4313      	orrs	r3, r2
 80070da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80070de:	4b15      	ldr	r3, [pc, #84]	@ (8007134 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80070e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80070e4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070ec:	4911      	ldr	r1, [pc, #68]	@ (8007134 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80070ee:	4313      	orrs	r3, r2
 80070f0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80070f4:	4b0f      	ldr	r3, [pc, #60]	@ (8007134 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a0e      	ldr	r2, [pc, #56]	@ (8007134 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80070fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80070fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007100:	f7fd f8a0 	bl	8004244 <HAL_GetTick>
 8007104:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007106:	e008      	b.n	800711a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007108:	f7fd f89c 	bl	8004244 <HAL_GetTick>
 800710c:	4602      	mov	r2, r0
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	1ad3      	subs	r3, r2, r3
 8007112:	2b64      	cmp	r3, #100	@ 0x64
 8007114:	d901      	bls.n	800711a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007116:	2303      	movs	r3, #3
 8007118:	e007      	b.n	800712a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800711a:	4b06      	ldr	r3, [pc, #24]	@ (8007134 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007122:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007126:	d1ef      	bne.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8007128:	2300      	movs	r3, #0
}
 800712a:	4618      	mov	r0, r3
 800712c:	3720      	adds	r7, #32
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}
 8007132:	bf00      	nop
 8007134:	40023800 	.word	0x40023800

08007138 <HAL_RCCEx_GetPeriphCLKConfig>:
  *         RCC configuration registers.
  * @param  PeriphClkInit pointer to the configured RCC_PeriphCLKInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007138:	b480      	push	{r7}
 800713a:	b085      	sub	sp, #20
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0;
 8007140:	2300      	movs	r3, #0
 8007142:	60fb      	str	r3, [r7, #12]
                                        RCC_PERIPHCLK_USART6   | RCC_PERIPHCLK_UART7    |\
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48    | RCC_PERIPHCLK_SDMMC2   |\
                                        RCC_PERIPHCLK_DFSDM1   | RCC_PERIPHCLK_DFSDM1_AUDIO;
#else
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	4a80      	ldr	r2, [pc, #512]	@ (8007348 <HAL_RCCEx_GetPeriphCLKConfig+0x210>)
 8007148:	601a      	str	r2, [r3, #0]
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 800714a:	4b80      	ldr	r3, [pc, #512]	@ (800734c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800714c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007150:	099b      	lsrs	r3, r3, #6
 8007152:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800715a:	4b7c      	ldr	r3, [pc, #496]	@ (800734c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800715c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007160:	0c1b      	lsrs	r3, r3, #16
 8007162:	f003 0203 	and.w	r2, r3, #3
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800716a:	4b78      	ldr	r3, [pc, #480]	@ (800734c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800716c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007170:	0e1b      	lsrs	r3, r3, #24
 8007172:	f003 020f 	and.w	r2, r3, #15
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800717a:	4b74      	ldr	r3, [pc, #464]	@ (800734c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800717c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007180:	0f1b      	lsrs	r3, r3, #28
 8007182:	f003 0207 	and.w	r2, r3, #7
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	609a      	str	r2, [r3, #8]

  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLSAICFGR_PLLSAIN_Pos);
 800718a:	4b70      	ldr	r3, [pc, #448]	@ (800734c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800718c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007190:	099b      	lsrs	r3, r3, #6
 8007192:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800719a:	4b6c      	ldr	r3, [pc, #432]	@ (800734c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800719c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071a0:	0c1b      	lsrs	r3, r3, #16
 80071a2:	f003 0203 	and.w	r2, r3, #3
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	621a      	str	r2, [r3, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80071aa:	4b68      	ldr	r3, [pc, #416]	@ (800734c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80071ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071b0:	0e1b      	lsrs	r3, r3, #24
 80071b2:	f003 020f 	and.w	r2, r3, #15
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	619a      	str	r2, [r3, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80071ba:	4b64      	ldr	r3, [pc, #400]	@ (800734c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80071bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071c0:	0f1b      	lsrs	r3, r3, #28
 80071c2:	f003 0207 	and.w	r2, r3, #7
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	61da      	str	r2, [r3, #28]

  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> RCC_DCKCFGR1_PLLI2SDIVQ_Pos);
 80071ca:	4b60      	ldr	r3, [pc, #384]	@ (800734c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80071cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80071d0:	f003 021f 	and.w	r2, r3, #31
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	625a      	str	r2, [r3, #36]	@ 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> RCC_DCKCFGR1_PLLSAIDIVQ_Pos);
 80071d8:	4b5c      	ldr	r3, [pc, #368]	@ (800734c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80071da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80071de:	0a1b      	lsrs	r3, r3, #8
 80071e0:	f003 021f 	and.w	r2, r3, #31
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	629a      	str	r2, [r3, #40]	@ 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> RCC_DCKCFGR1_PLLSAIDIVR_Pos);
 80071e8:	4b58      	ldr	r3, [pc, #352]	@ (800734c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80071ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80071ee:	0c1b      	lsrs	r3, r3, #16
 80071f0:	f003 0203 	and.w	r2, r3, #3
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 80071f8:	4b54      	ldr	r3, [pc, #336]	@ (800734c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80071fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80071fe:	f403 1240 	and.w	r2, r3, #3145728	@ 0x300000
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 8007206:	4b51      	ldr	r3, [pc, #324]	@ (800734c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007208:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800720c:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
 8007214:	4b4d      	ldr	r3, [pc, #308]	@ (800734c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007216:	689b      	ldr	r3, [r3, #8]
 8007218:	f403 0200 	and.w	r2, r3, #8388608	@ 0x800000
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 8007220:	4b4a      	ldr	r3, [pc, #296]	@ (800734c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007222:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007226:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
 800722e:	4b47      	ldr	r3, [pc, #284]	@ (800734c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007230:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007234:	f403 2240 	and.w	r2, r3, #786432	@ 0xc0000
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
 800723c:	4b43      	ldr	r3, [pc, #268]	@ (800734c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800723e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007242:	f403 1240 	and.w	r2, r3, #3145728	@ 0x300000
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
 800724a:	4b40      	ldr	r3, [pc, #256]	@ (800734c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800724c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007250:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 8007258:	4b3c      	ldr	r3, [pc, #240]	@ (800734c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800725a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800725e:	f003 0203 	and.w	r2, r3, #3
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 8007266:	4b39      	ldr	r3, [pc, #228]	@ (800734c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007268:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800726c:	f003 020c 	and.w	r2, r3, #12
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 8007274:	4b35      	ldr	r3, [pc, #212]	@ (800734c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007276:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800727a:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
 8007282:	4b32      	ldr	r3, [pc, #200]	@ (800734c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007284:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007288:	f003 02c0 	and.w	r2, r3, #192	@ 0xc0
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
 8007290:	4b2e      	ldr	r3, [pc, #184]	@ (800734c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007292:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007296:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
 800729e:	4b2b      	ldr	r3, [pc, #172]	@ (800734c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80072a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072a4:	f403 6240 	and.w	r2, r3, #3072	@ 0xc00
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
 80072ac:	4b27      	ldr	r3, [pc, #156]	@ (800734c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80072ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072b2:	f403 5240 	and.w	r2, r3, #12288	@ 0x3000
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
 80072ba:	4b24      	ldr	r3, [pc, #144]	@ (800734c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80072bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072c0:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 80072c8:	4b20      	ldr	r3, [pc, #128]	@ (800734c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80072ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072ce:	f003 7240 	and.w	r2, r3, #50331648	@ 0x3000000
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 80072d6:	4b1d      	ldr	r3, [pc, #116]	@ (800734c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80072d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072dc:	f003 6280 	and.w	r2, r3, #67108864	@ 0x4000000
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 80072e4:	4b19      	ldr	r3, [pc, #100]	@ (800734c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80072e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072ea:	f003 6200 	and.w	r2, r3, #134217728	@ 0x8000000
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
 80072f2:	4b16      	ldr	r3, [pc, #88]	@ (800734c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80072f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072f8:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8007302:	4b12      	ldr	r3, [pc, #72]	@ (800734c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007304:	689b      	ldr	r3, [r3, #8]
 8007306:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800730a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 800730c:	4b0f      	ldr	r3, [pc, #60]	@ (800734c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800730e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007310:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	431a      	orrs	r2, r3
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
 800731c:	4b0b      	ldr	r3, [pc, #44]	@ (800734c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800731e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007322:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007326:	2b00      	cmp	r3, #0
 8007328:	d103      	bne.n	8007332 <HAL_RCCEx_GetPeriphCLKConfig+0x1fa>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2200      	movs	r2, #0
 800732e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 8007330:	e003      	b.n	800733a <HAL_RCCEx_GetPeriphCLKConfig+0x202>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007338:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800733a:	bf00      	nop
 800733c:	3714      	adds	r7, #20
 800733e:	46bd      	mov	sp, r7
 8007340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007344:	4770      	bx	lr
 8007346:	bf00      	nop
 8007348:	00fffff1 	.word	0x00fffff1
 800734c:	40023800 	.word	0x40023800

08007350 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007350:	b480      	push	{r7}
 8007352:	b087      	sub	sp, #28
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8007358:	2300      	movs	r3, #0
 800735a:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 800735c:	2300      	movs	r3, #0
 800735e:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8007360:	2300      	movs	r3, #0
 8007362:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8007364:	2300      	movs	r3, #0
 8007366:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800736e:	f040 808d 	bne.w	800748c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 8007372:	4b93      	ldr	r3, [pc, #588]	@ (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007374:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007378:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8007380:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007388:	d07c      	beq.n	8007484 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007390:	d87b      	bhi.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d004      	beq.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800739e:	d039      	beq.n	8007414 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 80073a0:	e073      	b.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80073a2:	4b87      	ldr	r3, [pc, #540]	@ (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80073a4:	685b      	ldr	r3, [r3, #4]
 80073a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d108      	bne.n	80073c0 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80073ae:	4b84      	ldr	r3, [pc, #528]	@ (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80073b0:	685b      	ldr	r3, [r3, #4]
 80073b2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80073b6:	4a83      	ldr	r2, [pc, #524]	@ (80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80073b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80073bc:	613b      	str	r3, [r7, #16]
 80073be:	e007      	b.n	80073d0 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80073c0:	4b7f      	ldr	r3, [pc, #508]	@ (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80073c2:	685b      	ldr	r3, [r3, #4]
 80073c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80073c8:	4a7f      	ldr	r2, [pc, #508]	@ (80075c8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80073ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80073ce:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80073d0:	4b7b      	ldr	r3, [pc, #492]	@ (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80073d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073d6:	0e1b      	lsrs	r3, r3, #24
 80073d8:	f003 030f 	and.w	r3, r3, #15
 80073dc:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80073de:	4b78      	ldr	r3, [pc, #480]	@ (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80073e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073e4:	099b      	lsrs	r3, r3, #6
 80073e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073ea:	693a      	ldr	r2, [r7, #16]
 80073ec:	fb03 f202 	mul.w	r2, r3, r2
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80073f6:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80073f8:	4b71      	ldr	r3, [pc, #452]	@ (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80073fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80073fe:	0a1b      	lsrs	r3, r3, #8
 8007400:	f003 031f 	and.w	r3, r3, #31
 8007404:	3301      	adds	r3, #1
 8007406:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007408:	697a      	ldr	r2, [r7, #20]
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007410:	617b      	str	r3, [r7, #20]
        break;
 8007412:	e03b      	b.n	800748c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007414:	4b6a      	ldr	r3, [pc, #424]	@ (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800741c:	2b00      	cmp	r3, #0
 800741e:	d108      	bne.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007420:	4b67      	ldr	r3, [pc, #412]	@ (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007422:	685b      	ldr	r3, [r3, #4]
 8007424:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007428:	4a66      	ldr	r2, [pc, #408]	@ (80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800742a:	fbb2 f3f3 	udiv	r3, r2, r3
 800742e:	613b      	str	r3, [r7, #16]
 8007430:	e007      	b.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007432:	4b63      	ldr	r3, [pc, #396]	@ (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007434:	685b      	ldr	r3, [r3, #4]
 8007436:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800743a:	4a63      	ldr	r2, [pc, #396]	@ (80075c8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800743c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007440:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8007442:	4b5f      	ldr	r3, [pc, #380]	@ (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007444:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007448:	0e1b      	lsrs	r3, r3, #24
 800744a:	f003 030f 	and.w	r3, r3, #15
 800744e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8007450:	4b5b      	ldr	r3, [pc, #364]	@ (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007452:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007456:	099b      	lsrs	r3, r3, #6
 8007458:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800745c:	693a      	ldr	r2, [r7, #16]
 800745e:	fb03 f202 	mul.w	r2, r3, r2
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	fbb2 f3f3 	udiv	r3, r2, r3
 8007468:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800746a:	4b55      	ldr	r3, [pc, #340]	@ (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800746c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007470:	f003 031f 	and.w	r3, r3, #31
 8007474:	3301      	adds	r3, #1
 8007476:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007478:	697a      	ldr	r2, [r7, #20]
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007480:	617b      	str	r3, [r7, #20]
        break;
 8007482:	e003      	b.n	800748c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 8007484:	4b51      	ldr	r3, [pc, #324]	@ (80075cc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8007486:	617b      	str	r3, [r7, #20]
        break;
 8007488:	e000      	b.n	800748c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 800748a:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007492:	f040 808d 	bne.w	80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 8007496:	4b4a      	ldr	r3, [pc, #296]	@ (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007498:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800749c:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80074a4:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80074ac:	d07c      	beq.n	80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80074b4:	d87b      	bhi.n	80075ae <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d004      	beq.n	80074c6 <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80074c2:	d039      	beq.n	8007538 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 80074c4:	e073      	b.n	80075ae <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80074c6:	4b3e      	ldr	r3, [pc, #248]	@ (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80074c8:	685b      	ldr	r3, [r3, #4]
 80074ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d108      	bne.n	80074e4 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80074d2:	4b3b      	ldr	r3, [pc, #236]	@ (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80074da:	4a3a      	ldr	r2, [pc, #232]	@ (80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80074dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80074e0:	613b      	str	r3, [r7, #16]
 80074e2:	e007      	b.n	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80074e4:	4b36      	ldr	r3, [pc, #216]	@ (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80074e6:	685b      	ldr	r3, [r3, #4]
 80074e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80074ec:	4a36      	ldr	r2, [pc, #216]	@ (80075c8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80074ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80074f2:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80074f4:	4b32      	ldr	r3, [pc, #200]	@ (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80074f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074fa:	0e1b      	lsrs	r3, r3, #24
 80074fc:	f003 030f 	and.w	r3, r3, #15
 8007500:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8007502:	4b2f      	ldr	r3, [pc, #188]	@ (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007504:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007508:	099b      	lsrs	r3, r3, #6
 800750a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800750e:	693a      	ldr	r2, [r7, #16]
 8007510:	fb03 f202 	mul.w	r2, r3, r2
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	fbb2 f3f3 	udiv	r3, r2, r3
 800751a:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800751c:	4b28      	ldr	r3, [pc, #160]	@ (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800751e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007522:	0a1b      	lsrs	r3, r3, #8
 8007524:	f003 031f 	and.w	r3, r3, #31
 8007528:	3301      	adds	r3, #1
 800752a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800752c:	697a      	ldr	r2, [r7, #20]
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	fbb2 f3f3 	udiv	r3, r2, r3
 8007534:	617b      	str	r3, [r7, #20]
        break;
 8007536:	e03b      	b.n	80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007538:	4b21      	ldr	r3, [pc, #132]	@ (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007540:	2b00      	cmp	r3, #0
 8007542:	d108      	bne.n	8007556 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007544:	4b1e      	ldr	r3, [pc, #120]	@ (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007546:	685b      	ldr	r3, [r3, #4]
 8007548:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800754c:	4a1d      	ldr	r2, [pc, #116]	@ (80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800754e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007552:	613b      	str	r3, [r7, #16]
 8007554:	e007      	b.n	8007566 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007556:	4b1a      	ldr	r3, [pc, #104]	@ (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007558:	685b      	ldr	r3, [r3, #4]
 800755a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800755e:	4a1a      	ldr	r2, [pc, #104]	@ (80075c8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007560:	fbb2 f3f3 	udiv	r3, r2, r3
 8007564:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8007566:	4b16      	ldr	r3, [pc, #88]	@ (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007568:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800756c:	0e1b      	lsrs	r3, r3, #24
 800756e:	f003 030f 	and.w	r3, r3, #15
 8007572:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8007574:	4b12      	ldr	r3, [pc, #72]	@ (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007576:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800757a:	099b      	lsrs	r3, r3, #6
 800757c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007580:	693a      	ldr	r2, [r7, #16]
 8007582:	fb03 f202 	mul.w	r2, r3, r2
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	fbb2 f3f3 	udiv	r3, r2, r3
 800758c:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800758e:	4b0c      	ldr	r3, [pc, #48]	@ (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007590:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007594:	f003 031f 	and.w	r3, r3, #31
 8007598:	3301      	adds	r3, #1
 800759a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800759c:	697a      	ldr	r2, [r7, #20]
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80075a4:	617b      	str	r3, [r7, #20]
        break;
 80075a6:	e003      	b.n	80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 80075a8:	4b08      	ldr	r3, [pc, #32]	@ (80075cc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80075aa:	617b      	str	r3, [r7, #20]
        break;
 80075ac:	e000      	b.n	80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 80075ae:	bf00      	nop
      }
    }
  }

  return frequency;
 80075b0:	697b      	ldr	r3, [r7, #20]
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	371c      	adds	r7, #28
 80075b6:	46bd      	mov	sp, r7
 80075b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075bc:	4770      	bx	lr
 80075be:	bf00      	nop
 80075c0:	40023800 	.word	0x40023800
 80075c4:	00f42400 	.word	0x00f42400
 80075c8:	017d7840 	.word	0x017d7840
 80075cc:	00bb8000 	.word	0x00bb8000

080075d0 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b088      	sub	sp, #32
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 80075d8:	2300      	movs	r3, #0
 80075da:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 80075dc:	2300      	movs	r3, #0
 80075de:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 80075e0:	2300      	movs	r3, #0
 80075e2:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d101      	bne.n	80075ee <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 80075ea:	2301      	movs	r3, #1
 80075ec:	e156      	b.n	800789c <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80075f4:	b2db      	uxtb	r3, r3
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d106      	bne.n	8007608 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2200      	movs	r2, #0
 80075fe:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f7fa f8f6 	bl	80017f4 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2202      	movs	r2, #2
 800760c:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f000 fad5 	bl	8007bc0 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	68db      	ldr	r3, [r3, #12]
 800761a:	2b02      	cmp	r3, #2
 800761c:	d00c      	beq.n	8007638 <HAL_SAI_Init+0x68>
 800761e:	2b02      	cmp	r3, #2
 8007620:	d80d      	bhi.n	800763e <HAL_SAI_Init+0x6e>
 8007622:	2b00      	cmp	r3, #0
 8007624:	d002      	beq.n	800762c <HAL_SAI_Init+0x5c>
 8007626:	2b01      	cmp	r3, #1
 8007628:	d003      	beq.n	8007632 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800762a:	e008      	b.n	800763e <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 800762c:	2300      	movs	r3, #0
 800762e:	61fb      	str	r3, [r7, #28]
      break;
 8007630:	e006      	b.n	8007640 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8007632:	2310      	movs	r3, #16
 8007634:	61fb      	str	r3, [r7, #28]
      break;
 8007636:	e003      	b.n	8007640 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8007638:	2320      	movs	r3, #32
 800763a:	61fb      	str	r3, [r7, #28]
      break;
 800763c:	e000      	b.n	8007640 <HAL_SAI_Init+0x70>
      break;
 800763e:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	689b      	ldr	r3, [r3, #8]
 8007644:	2b03      	cmp	r3, #3
 8007646:	d81e      	bhi.n	8007686 <HAL_SAI_Init+0xb6>
 8007648:	a201      	add	r2, pc, #4	@ (adr r2, 8007650 <HAL_SAI_Init+0x80>)
 800764a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800764e:	bf00      	nop
 8007650:	08007661 	.word	0x08007661
 8007654:	08007667 	.word	0x08007667
 8007658:	0800766f 	.word	0x0800766f
 800765c:	08007677 	.word	0x08007677
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 8007660:	2300      	movs	r3, #0
 8007662:	617b      	str	r3, [r7, #20]
    }
    break;
 8007664:	e010      	b.n	8007688 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8007666:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800766a:	617b      	str	r3, [r7, #20]
    }
    break;
 800766c:	e00c      	b.n	8007688 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800766e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007672:	617b      	str	r3, [r7, #20]
    }
    break;
 8007674:	e008      	b.n	8007688 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007676:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800767a:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800767c:	69fb      	ldr	r3, [r7, #28]
 800767e:	f043 0301 	orr.w	r3, r3, #1
 8007682:	61fb      	str	r3, [r7, #28]
    }
    break;
 8007684:	e000      	b.n	8007688 <HAL_SAI_Init+0xb8>
    default:
      break;
 8007686:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a85      	ldr	r2, [pc, #532]	@ (80078a4 <HAL_SAI_Init+0x2d4>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d004      	beq.n	800769c <HAL_SAI_Init+0xcc>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4a84      	ldr	r2, [pc, #528]	@ (80078a8 <HAL_SAI_Init+0x2d8>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d103      	bne.n	80076a4 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 800769c:	4a83      	ldr	r2, [pc, #524]	@ (80078ac <HAL_SAI_Init+0x2dc>)
 800769e:	69fb      	ldr	r3, [r7, #28]
 80076a0:	6013      	str	r3, [r2, #0]
 80076a2:	e002      	b.n	80076aa <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 80076a4:	4a82      	ldr	r2, [pc, #520]	@ (80078b0 <HAL_SAI_Init+0x2e0>)
 80076a6:	69fb      	ldr	r3, [r7, #28]
 80076a8:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	69db      	ldr	r3, [r3, #28]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d04c      	beq.n	800774c <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 80076b2:	2300      	movs	r3, #0
 80076b4:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4a7a      	ldr	r2, [pc, #488]	@ (80078a4 <HAL_SAI_Init+0x2d4>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d004      	beq.n	80076ca <HAL_SAI_Init+0xfa>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a78      	ldr	r2, [pc, #480]	@ (80078a8 <HAL_SAI_Init+0x2d8>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d104      	bne.n	80076d4 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80076ca:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80076ce:	f7ff fe3f 	bl	8007350 <HAL_RCCEx_GetPeriphCLKFreq>
 80076d2:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4a76      	ldr	r2, [pc, #472]	@ (80078b4 <HAL_SAI_Init+0x2e4>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d004      	beq.n	80076e8 <HAL_SAI_Init+0x118>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4a75      	ldr	r2, [pc, #468]	@ (80078b8 <HAL_SAI_Init+0x2e8>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d104      	bne.n	80076f2 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80076e8:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80076ec:	f7ff fe30 	bl	8007350 <HAL_RCCEx_GetPeriphCLKFreq>
 80076f0:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 80076f2:	693a      	ldr	r2, [r7, #16]
 80076f4:	4613      	mov	r3, r2
 80076f6:	009b      	lsls	r3, r3, #2
 80076f8:	4413      	add	r3, r2
 80076fa:	005b      	lsls	r3, r3, #1
 80076fc:	461a      	mov	r2, r3
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	69db      	ldr	r3, [r3, #28]
 8007702:	025b      	lsls	r3, r3, #9
 8007704:	fbb2 f3f3 	udiv	r3, r2, r3
 8007708:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	4a6b      	ldr	r2, [pc, #428]	@ (80078bc <HAL_SAI_Init+0x2ec>)
 800770e:	fba2 2303 	umull	r2, r3, r2, r3
 8007712:	08da      	lsrs	r2, r3, #3
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 8007718:	68f9      	ldr	r1, [r7, #12]
 800771a:	4b68      	ldr	r3, [pc, #416]	@ (80078bc <HAL_SAI_Init+0x2ec>)
 800771c:	fba3 2301 	umull	r2, r3, r3, r1
 8007720:	08da      	lsrs	r2, r3, #3
 8007722:	4613      	mov	r3, r2
 8007724:	009b      	lsls	r3, r3, #2
 8007726:	4413      	add	r3, r2
 8007728:	005b      	lsls	r3, r3, #1
 800772a:	1aca      	subs	r2, r1, r3
 800772c:	2a08      	cmp	r2, #8
 800772e:	d904      	bls.n	800773a <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6a1b      	ldr	r3, [r3, #32]
 8007734:	1c5a      	adds	r2, r3, #1
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800773e:	2b04      	cmp	r3, #4
 8007740:	d104      	bne.n	800774c <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6a1b      	ldr	r3, [r3, #32]
 8007746:	085a      	lsrs	r2, r3, #1
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	685b      	ldr	r3, [r3, #4]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d003      	beq.n	800775c <HAL_SAI_Init+0x18c>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	685b      	ldr	r3, [r3, #4]
 8007758:	2b02      	cmp	r3, #2
 800775a:	d109      	bne.n	8007770 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007760:	2b01      	cmp	r3, #1
 8007762:	d101      	bne.n	8007768 <HAL_SAI_Init+0x198>
 8007764:	2300      	movs	r3, #0
 8007766:	e001      	b.n	800776c <HAL_SAI_Init+0x19c>
 8007768:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800776c:	61bb      	str	r3, [r7, #24]
 800776e:	e008      	b.n	8007782 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007774:	2b01      	cmp	r3, #1
 8007776:	d102      	bne.n	800777e <HAL_SAI_Init+0x1ae>
 8007778:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800777c:	e000      	b.n	8007780 <HAL_SAI_Init+0x1b0>
 800777e:	2300      	movs	r3, #0
 8007780:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	6819      	ldr	r1, [r3, #0]
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681a      	ldr	r2, [r3, #0]
 800778c:	4b4c      	ldr	r3, [pc, #304]	@ (80078c0 <HAL_SAI_Init+0x2f0>)
 800778e:	400b      	ands	r3, r1
 8007790:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	6819      	ldr	r1, [r3, #0]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	685a      	ldr	r2, [r3, #4]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077a0:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80077a6:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077ac:	431a      	orrs	r2, r3
 80077ae:	69bb      	ldr	r3, [r7, #24]
 80077b0:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                               \
 80077ba:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	691b      	ldr	r3, [r3, #16]
 80077c0:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80077c6:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6a1b      	ldr	r3, [r3, #32]
 80077cc:	051b      	lsls	r3, r3, #20
 80077ce:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	430a      	orrs	r2, r1
 80077d6:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	6859      	ldr	r1, [r3, #4]
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681a      	ldr	r2, [r3, #0]
 80077e2:	4b38      	ldr	r3, [pc, #224]	@ (80078c4 <HAL_SAI_Init+0x2f4>)
 80077e4:	400b      	ands	r3, r1
 80077e6:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	6859      	ldr	r1, [r3, #4]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	699a      	ldr	r2, [r3, #24]
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077f6:	431a      	orrs	r2, r3
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077fc:	431a      	orrs	r2, r3
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	430a      	orrs	r2, r1
 8007804:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	6899      	ldr	r1, [r3, #8]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681a      	ldr	r2, [r3, #0]
 8007810:	4b2d      	ldr	r3, [pc, #180]	@ (80078c8 <HAL_SAI_Init+0x2f8>)
 8007812:	400b      	ands	r3, r1
 8007814:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	6899      	ldr	r1, [r3, #8]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007820:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8007826:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 800782c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 8007832:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007838:	3b01      	subs	r3, #1
 800783a:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800783c:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	430a      	orrs	r2, r1
 8007844:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	68d9      	ldr	r1, [r3, #12]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681a      	ldr	r2, [r3, #0]
 8007850:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8007854:	400b      	ands	r3, r1
 8007856:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	68d9      	ldr	r1, [r3, #12]
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007866:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800786c:	041b      	lsls	r3, r3, #16
 800786e:	431a      	orrs	r2, r3
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007874:	3b01      	subs	r3, #1
 8007876:	021b      	lsls	r3, r3, #8
 8007878:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	430a      	orrs	r2, r1
 8007880:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2200      	movs	r2, #0
 8007886:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2201      	movs	r2, #1
 800788e:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2200      	movs	r2, #0
 8007896:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 800789a:	2300      	movs	r3, #0
}
 800789c:	4618      	mov	r0, r3
 800789e:	3720      	adds	r7, #32
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}
 80078a4:	40015804 	.word	0x40015804
 80078a8:	40015824 	.word	0x40015824
 80078ac:	40015800 	.word	0x40015800
 80078b0:	40015c00 	.word	0x40015c00
 80078b4:	40015c04 	.word	0x40015c04
 80078b8:	40015c24 	.word	0x40015c24
 80078bc:	cccccccd 	.word	0xcccccccd
 80078c0:	ff05c010 	.word	0xff05c010
 80078c4:	ffff1ff0 	.word	0xffff1ff0
 80078c8:	fff88000 	.word	0xfff88000

080078cc <HAL_SAI_DeInit>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DeInit(SAI_HandleTypeDef *hsai)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b082      	sub	sp, #8
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d101      	bne.n	80078de <HAL_SAI_DeInit+0x12>
  {
    return HAL_ERROR;
 80078da:	2301      	movs	r3, #1
 80078dc:	e027      	b.n	800792e <HAL_SAI_DeInit+0x62>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2202      	movs	r2, #2
 80078e2:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	2200      	movs	r2, #0
 80078ec:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f04f 32ff 	mov.w	r2, #4294967295
 80078f6:	619a      	str	r2, [r3, #24]

  /* Disable the SAI */
  SAI_Disable(hsai);
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f000 f961 	bl	8007bc0 <SAI_Disable>

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	685a      	ldr	r2, [r3, #4]
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f042 0208 	orr.w	r2, r2, #8
 800790c:	605a      	str	r2, [r3, #4]
  {
    hsai->MspDeInitCallback = HAL_SAI_MspDeInit;
  }
  hsai->MspDeInitCallback(hsai);
#else
  HAL_SAI_MspDeInit(hsai);
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f7fa f80c 	bl	800192c <HAL_SAI_MspDeInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2200      	movs	r2, #0
 8007918:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_RESET;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2200      	movs	r2, #0
 8007920:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2200      	movs	r2, #0
 8007928:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 800792c:	2300      	movs	r3, #0
}
 800792e:	4618      	mov	r0, r3
 8007930:	3708      	adds	r7, #8
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}

08007936 <HAL_SAI_DMAStop>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DMAStop(SAI_HandleTypeDef *hsai)
{
 8007936:	b580      	push	{r7, lr}
 8007938:	b084      	sub	sp, #16
 800793a:	af00      	add	r7, sp, #0
 800793c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800793e:	2300      	movs	r3, #0
 8007940:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8007948:	2b01      	cmp	r3, #1
 800794a:	d101      	bne.n	8007950 <HAL_SAI_DMAStop+0x1a>
 800794c:	2302      	movs	r3, #2
 800794e:	e061      	b.n	8007a14 <HAL_SAI_DMAStop+0xde>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2201      	movs	r2, #1
 8007954:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  /* Disable SAI peripheral */
  SAI_Disable(hsai);
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f000 f931 	bl	8007bc0 <SAI_Disable>

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	681a      	ldr	r2, [r3, #0]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800796c:	601a      	str	r2, [r3, #0]

  /* Abort the SAI Tx DMA Stream */
  if ((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007972:	2b00      	cmp	r3, #0
 8007974:	d01c      	beq.n	80079b0 <HAL_SAI_DMAStop+0x7a>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800797c:	b2db      	uxtb	r3, r3
 800797e:	2b12      	cmp	r3, #18
 8007980:	d116      	bne.n	80079b0 <HAL_SAI_DMAStop+0x7a>
  {
    if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007986:	4618      	mov	r0, r3
 8007988:	f7fc ff0a 	bl	80047a0 <HAL_DMA_Abort>
 800798c:	4603      	mov	r3, r0
 800798e:	2b00      	cmp	r3, #0
 8007990:	d00e      	beq.n	80079b0 <HAL_SAI_DMAStop+0x7a>
    {
      /* If the DMA Tx errorCode is different from DMA No Transfer then return Error */
      if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007996:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007998:	2b80      	cmp	r3, #128	@ 0x80
 800799a:	d009      	beq.n	80079b0 <HAL_SAI_DMAStop+0x7a>
      {
        status = HAL_ERROR;
 800799c:	2301      	movs	r3, #1
 800799e:	73fb      	strb	r3, [r7, #15]
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80079a6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }
    }
  }

  /* Abort the SAI Rx DMA Stream */
  if ((hsai->hdmarx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_RX))
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d01c      	beq.n	80079f2 <HAL_SAI_DMAStop+0xbc>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80079be:	b2db      	uxtb	r3, r3
 80079c0:	2b22      	cmp	r3, #34	@ 0x22
 80079c2:	d116      	bne.n	80079f2 <HAL_SAI_DMAStop+0xbc>
  {
    if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079c8:	4618      	mov	r0, r3
 80079ca:	f7fc fee9 	bl	80047a0 <HAL_DMA_Abort>
 80079ce:	4603      	mov	r3, r0
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d00e      	beq.n	80079f2 <HAL_SAI_DMAStop+0xbc>
    {
      /* If the DMA Rx errorCode is different from DMA No Transfer then return Error */
      if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079da:	2b80      	cmp	r3, #128	@ 0x80
 80079dc:	d009      	beq.n	80079f2 <HAL_SAI_DMAStop+0xbc>
      {
        status = HAL_ERROR;
 80079de:	2301      	movs	r3, #1
 80079e0:	73fb      	strb	r3, [r7, #15]
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80079e8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }
    }
  }

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	685a      	ldr	r2, [r3, #4]
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f042 0208 	orr.w	r2, r2, #8
 8007a00:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2201      	movs	r2, #1
 8007a06:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return status;
 8007a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3710      	adds	r7, #16
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}

08007a1c <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b084      	sub	sp, #16
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	60f8      	str	r0, [r7, #12]
 8007a24:	60b9      	str	r1, [r7, #8]
 8007a26:	4613      	mov	r3, r2
 8007a28:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0))
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d002      	beq.n	8007a36 <HAL_SAI_Receive_DMA+0x1a>
 8007a30:	88fb      	ldrh	r3, [r7, #6]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d101      	bne.n	8007a3a <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8007a36:	2301      	movs	r3, #1
 8007a38:	e074      	b.n	8007b24 <HAL_SAI_Receive_DMA+0x108>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8007a40:	b2db      	uxtb	r3, r3
 8007a42:	2b01      	cmp	r3, #1
 8007a44:	d16d      	bne.n	8007b22 <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8007a4c:	2b01      	cmp	r3, #1
 8007a4e:	d101      	bne.n	8007a54 <HAL_SAI_Receive_DMA+0x38>
 8007a50:	2302      	movs	r3, #2
 8007a52:	e067      	b.n	8007b24 <HAL_SAI_Receive_DMA+0x108>
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	2201      	movs	r2, #1
 8007a58:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    hsai->pBuffPtr = pData;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	68ba      	ldr	r2, [r7, #8]
 8007a60:	665a      	str	r2, [r3, #100]	@ 0x64
    hsai->XferSize = Size;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	88fa      	ldrh	r2, [r7, #6]
 8007a66:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    hsai->XferCount = Size;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	88fa      	ldrh	r2, [r7, #6]
 8007a6e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	2200      	movs	r2, #0
 8007a76:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	2222      	movs	r2, #34	@ 0x22
 8007a7e:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a86:	4a29      	ldr	r2, [pc, #164]	@ (8007b2c <HAL_SAI_Receive_DMA+0x110>)
 8007a88:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a8e:	4a28      	ldr	r2, [pc, #160]	@ (8007b30 <HAL_SAI_Receive_DMA+0x114>)
 8007a90:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a96:	4a27      	ldr	r2, [pc, #156]	@ (8007b34 <HAL_SAI_Receive_DMA+0x118>)
 8007a98:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	331c      	adds	r3, #28
 8007aac:	4619      	mov	r1, r3
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ab2:	461a      	mov	r2, r3
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007aba:	f7fc fe11 	bl	80046e0 <HAL_DMA_Start_IT>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d005      	beq.n	8007ad0 <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      return  HAL_ERROR;
 8007acc:	2301      	movs	r3, #1
 8007ace:	e029      	b.n	8007b24 <HAL_SAI_Receive_DMA+0x108>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8007ad0:	2100      	movs	r1, #0
 8007ad2:	68f8      	ldr	r0, [r7, #12]
 8007ad4:	f000 f83e 	bl	8007b54 <SAI_InterruptFlag>
 8007ad8:	4601      	mov	r1, r0
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	691a      	ldr	r2, [r3, #16]
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	430a      	orrs	r2, r1
 8007ae6:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	681a      	ldr	r2, [r3, #0]
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8007af6:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d107      	bne.n	8007b16 <HAL_SAI_Receive_DMA+0xfa>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	681a      	ldr	r2, [r3, #0]
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8007b14:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	e000      	b.n	8007b24 <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 8007b22:	2302      	movs	r3, #2
  }
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	3710      	adds	r7, #16
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}
 8007b2c:	08007c91 	.word	0x08007c91
 8007b30:	08007c31 	.word	0x08007c31
 8007b34:	08007cad 	.word	0x08007cad

08007b38 <HAL_SAI_GetState>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL state
  */
HAL_SAI_StateTypeDef HAL_SAI_GetState(const SAI_HandleTypeDef *hsai)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b083      	sub	sp, #12
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
  return hsai->State;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8007b46:	b2db      	uxtb	r3, r3
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	370c      	adds	r7, #12
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b52:	4770      	bx	lr

08007b54 <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, uint32_t mode)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b085      	sub	sp, #20
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
 8007b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8007b5e:	2301      	movs	r3, #1
 8007b60:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	2b01      	cmp	r3, #1
 8007b66:	d103      	bne.n	8007b70 <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	f043 0308 	orr.w	r3, r3, #8
 8007b6e:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b74:	2b08      	cmp	r3, #8
 8007b76:	d10b      	bne.n	8007b90 <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8007b7c:	2b03      	cmp	r3, #3
 8007b7e:	d003      	beq.n	8007b88 <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	685b      	ldr	r3, [r3, #4]
 8007b84:	2b01      	cmp	r3, #1
 8007b86:	d103      	bne.n	8007b90 <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	f043 0310 	orr.w	r3, r3, #16
 8007b8e:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	2b03      	cmp	r3, #3
 8007b96:	d003      	beq.n	8007ba0 <SAI_InterruptFlag+0x4c>
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	2b02      	cmp	r3, #2
 8007b9e:	d104      	bne.n	8007baa <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007ba6:	60fb      	str	r3, [r7, #12]
 8007ba8:	e003      	b.n	8007bb2 <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	f043 0304 	orr.w	r3, r3, #4
 8007bb0:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	3714      	adds	r7, #20
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbe:	4770      	bx	lr

08007bc0 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	b085      	sub	sp, #20
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8007bc8:	4b17      	ldr	r3, [pc, #92]	@ (8007c28 <SAI_Disable+0x68>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4a17      	ldr	r2, [pc, #92]	@ (8007c2c <SAI_Disable+0x6c>)
 8007bce:	fba2 2303 	umull	r2, r3, r2, r3
 8007bd2:	0b1b      	lsrs	r3, r3, #12
 8007bd4:	009b      	lsls	r3, r3, #2
 8007bd6:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8007bd8:	2300      	movs	r3, #0
 8007bda:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	681a      	ldr	r2, [r3, #0]
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8007bea:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	1e5a      	subs	r2, r3, #1
 8007bf0:	60fa      	str	r2, [r7, #12]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d10a      	bne.n	8007c0c <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007bfc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 8007c06:	2303      	movs	r3, #3
 8007c08:	72fb      	strb	r3, [r7, #11]
      break;
 8007c0a:	e006      	b.n	8007c1a <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d1e8      	bne.n	8007bec <SAI_Disable+0x2c>

  return status;
 8007c1a:	7afb      	ldrb	r3, [r7, #11]
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	3714      	adds	r7, #20
 8007c20:	46bd      	mov	sp, r7
 8007c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c26:	4770      	bx	lr
 8007c28:	20000000 	.word	0x20000000
 8007c2c:	95cbec1b 	.word	0x95cbec1b

08007c30 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b084      	sub	sp, #16
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c3c:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	69db      	ldr	r3, [r3, #28]
 8007c42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c46:	d01c      	beq.n	8007c82 <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	681a      	ldr	r2, [r3, #0]
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8007c56:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8007c60:	2100      	movs	r1, #0
 8007c62:	68f8      	ldr	r0, [r7, #12]
 8007c64:	f7ff ff76 	bl	8007b54 <SAI_InterruptFlag>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	43d9      	mvns	r1, r3
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	691a      	ldr	r2, [r3, #16]
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	400a      	ands	r2, r1
 8007c78:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2201      	movs	r2, #1
 8007c7e:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 8007c82:	68f8      	ldr	r0, [r7, #12]
 8007c84:	f7fc f8f2 	bl	8003e6c <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8007c88:	bf00      	nop
 8007c8a:	3710      	adds	r7, #16
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}

08007c90 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b084      	sub	sp, #16
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c9c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 8007c9e:	68f8      	ldr	r0, [r7, #12]
 8007ca0:	f7fc f8ee 	bl	8003e80 <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8007ca4:	bf00      	nop
 8007ca6:	3710      	adds	r7, #16
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bd80      	pop	{r7, pc}

08007cac <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b084      	sub	sp, #16
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cb8:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007cc0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007cce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cd0:	2b01      	cmp	r3, #1
 8007cd2:	d004      	beq.n	8007cde <SAI_DMAError+0x32>
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007cd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cda:	2b01      	cmp	r3, #1
 8007cdc:	d112      	bne.n	8007d04 <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	681a      	ldr	r2, [r3, #0]
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8007cec:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 8007cee:	68f8      	ldr	r0, [r7, #12]
 8007cf0:	f7ff ff66 	bl	8007bc0 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8007d04:	68f8      	ldr	r0, [r7, #12]
 8007d06:	f7fb feb1 	bl	8003a6c <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8007d0a:	bf00      	nop
 8007d0c:	3710      	adds	r7, #16
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}

08007d12 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007d12:	b580      	push	{r7, lr}
 8007d14:	b082      	sub	sp, #8
 8007d16:	af00      	add	r7, sp, #0
 8007d18:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d101      	bne.n	8007d24 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007d20:	2301      	movs	r3, #1
 8007d22:	e022      	b.n	8007d6a <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007d2a:	b2db      	uxtb	r3, r3
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d105      	bne.n	8007d3c <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2200      	movs	r2, #0
 8007d34:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f7f9 fe4a 	bl	80019d0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2203      	movs	r2, #3
 8007d40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f000 f815 	bl	8007d74 <HAL_SD_InitCard>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d001      	beq.n	8007d54 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007d50:	2301      	movs	r3, #1
 8007d52:	e00a      	b.n	8007d6a <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2200      	movs	r2, #0
 8007d58:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2201      	movs	r2, #1
 8007d64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007d68:	2300      	movs	r3, #0
}
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	3708      	adds	r7, #8
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}
	...

08007d74 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007d74:	b5b0      	push	{r4, r5, r7, lr}
 8007d76:	b08e      	sub	sp, #56	@ 0x38
 8007d78:	af04      	add	r7, sp, #16
 8007d7a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8007d80:	2300      	movs	r3, #0
 8007d82:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8007d84:	2300      	movs	r3, #0
 8007d86:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8007d88:	2300      	movs	r3, #0
 8007d8a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8007d90:	2376      	movs	r3, #118	@ 0x76
 8007d92:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681d      	ldr	r5, [r3, #0]
 8007d98:	466c      	mov	r4, sp
 8007d9a:	f107 0314 	add.w	r3, r7, #20
 8007d9e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007da2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007da6:	f107 0308 	add.w	r3, r7, #8
 8007daa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007dac:	4628      	mov	r0, r5
 8007dae:	f001 fddf 	bl	8009970 <SDMMC_Init>
 8007db2:	4603      	mov	r3, r0
 8007db4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8007db8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d001      	beq.n	8007dc4 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	e059      	b.n	8007e78 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	685a      	ldr	r2, [r3, #4]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007dd2:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	4618      	mov	r0, r3
 8007dda:	f001 fe13 	bl	8009a04 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	685a      	ldr	r2, [r3, #4]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007dec:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8007dee:	2002      	movs	r0, #2
 8007df0:	f7fc fa34 	bl	800425c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f000 ff59 	bl	8008cac <SD_PowerON>
 8007dfa:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007dfc:	6a3b      	ldr	r3, [r7, #32]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d00b      	beq.n	8007e1a <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2201      	movs	r2, #1
 8007e06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007e0e:	6a3b      	ldr	r3, [r7, #32]
 8007e10:	431a      	orrs	r2, r3
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8007e16:	2301      	movs	r3, #1
 8007e18:	e02e      	b.n	8007e78 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f000 fe78 	bl	8008b10 <SD_InitCard>
 8007e20:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007e22:	6a3b      	ldr	r3, [r7, #32]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d00b      	beq.n	8007e40 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2201      	movs	r2, #1
 8007e2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007e34:	6a3b      	ldr	r3, [r7, #32]
 8007e36:	431a      	orrs	r2, r3
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	e01b      	b.n	8007e78 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007e48:	4618      	mov	r0, r3
 8007e4a:	f001 fe6d 	bl	8009b28 <SDMMC_CmdBlockLength>
 8007e4e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007e50:	6a3b      	ldr	r3, [r7, #32]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d00f      	beq.n	8007e76 <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	4a09      	ldr	r2, [pc, #36]	@ (8007e80 <HAL_SD_InitCard+0x10c>)
 8007e5c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007e62:	6a3b      	ldr	r3, [r7, #32]
 8007e64:	431a      	orrs	r2, r3
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2201      	movs	r2, #1
 8007e6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007e72:	2301      	movs	r3, #1
 8007e74:	e000      	b.n	8007e78 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 8007e76:	2300      	movs	r3, #0
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	3728      	adds	r7, #40	@ 0x28
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bdb0      	pop	{r4, r5, r7, pc}
 8007e80:	004005ff 	.word	0x004005ff

08007e84 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b08c      	sub	sp, #48	@ 0x30
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	60f8      	str	r0, [r7, #12]
 8007e8c:	60b9      	str	r1, [r7, #8]
 8007e8e:	607a      	str	r2, [r7, #4]
 8007e90:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d107      	bne.n	8007eac <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ea0:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	e0c3      	b.n	8008034 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007eb2:	b2db      	uxtb	r3, r3
 8007eb4:	2b01      	cmp	r3, #1
 8007eb6:	f040 80bc 	bne.w	8008032 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007ec0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	441a      	add	r2, r3
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007eca:	429a      	cmp	r2, r3
 8007ecc:	d907      	bls.n	8007ede <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ed2:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8007eda:	2301      	movs	r3, #1
 8007edc:	e0aa      	b.n	8008034 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	2203      	movs	r2, #3
 8007ee2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	2200      	movs	r2, #0
 8007eec:	62da      	str	r2, [r3, #44]	@ 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 8007efc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f02:	4a4e      	ldr	r2, [pc, #312]	@ (800803c <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8007f04:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f0a:	4a4d      	ldr	r2, [pc, #308]	@ (8008040 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8007f0c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f12:	2200      	movs	r2, #0
 8007f14:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f2e:	689a      	ldr	r2, [r3, #8]
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	430a      	orrs	r2, r1
 8007f38:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	3380      	adds	r3, #128	@ 0x80
 8007f44:	4619      	mov	r1, r3
 8007f46:	68ba      	ldr	r2, [r7, #8]
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	025b      	lsls	r3, r3, #9
 8007f4c:	089b      	lsrs	r3, r3, #2
 8007f4e:	f7fc fbc7 	bl	80046e0 <HAL_DMA_Start_IT>
 8007f52:	4603      	mov	r3, r0
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d017      	beq.n	8007f88 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 8007f66:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	4a35      	ldr	r2, [pc, #212]	@ (8008044 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8007f6e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f74:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	2201      	movs	r2, #1
 8007f80:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8007f84:	2301      	movs	r3, #1
 8007f86:	e055      	b.n	8008034 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f042 0208 	orr.w	r2, r2, #8
 8007f96:	62da      	str	r2, [r3, #44]	@ 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f9c:	2b01      	cmp	r3, #1
 8007f9e:	d002      	beq.n	8007fa6 <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 8007fa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fa2:	025b      	lsls	r3, r3, #9
 8007fa4:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8007faa:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	025b      	lsls	r3, r3, #9
 8007fb0:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007fb2:	2390      	movs	r3, #144	@ 0x90
 8007fb4:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007fb6:	2302      	movs	r3, #2
 8007fb8:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f107 0210 	add.w	r2, r7, #16
 8007fca:	4611      	mov	r1, r2
 8007fcc:	4618      	mov	r0, r3
 8007fce:	f001 fd7f 	bl	8009ad0 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	2b01      	cmp	r3, #1
 8007fd6:	d90a      	bls.n	8007fee <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	2282      	movs	r2, #130	@ 0x82
 8007fdc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	f001 fde3 	bl	8009bb0 <SDMMC_CmdReadMultiBlock>
 8007fea:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8007fec:	e009      	b.n	8008002 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	2281      	movs	r2, #129	@ 0x81
 8007ff2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f001 fdb6 	bl	8009b6c <SDMMC_CmdReadSingleBlock>
 8008000:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8008002:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008004:	2b00      	cmp	r3, #0
 8008006:	d012      	beq.n	800802e <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	4a0d      	ldr	r2, [pc, #52]	@ (8008044 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800800e:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008014:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008016:	431a      	orrs	r2, r3
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	2201      	movs	r2, #1
 8008020:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	2200      	movs	r2, #0
 8008028:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800802a:	2301      	movs	r3, #1
 800802c:	e002      	b.n	8008034 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 800802e:	2300      	movs	r3, #0
 8008030:	e000      	b.n	8008034 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 8008032:	2302      	movs	r3, #2
  }
}
 8008034:	4618      	mov	r0, r3
 8008036:	3730      	adds	r7, #48	@ 0x30
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}
 800803c:	0800891f 	.word	0x0800891f
 8008040:	08008991 	.word	0x08008991
 8008044:	004005ff 	.word	0x004005ff

08008048 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b08c      	sub	sp, #48	@ 0x30
 800804c:	af00      	add	r7, sp, #0
 800804e:	60f8      	str	r0, [r7, #12]
 8008050:	60b9      	str	r1, [r7, #8]
 8008052:	607a      	str	r2, [r7, #4]
 8008054:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d107      	bne.n	8008070 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008064:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800806c:	2301      	movs	r3, #1
 800806e:	e0c6      	b.n	80081fe <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008076:	b2db      	uxtb	r3, r3
 8008078:	2b01      	cmp	r3, #1
 800807a:	f040 80bf 	bne.w	80081fc <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	2200      	movs	r2, #0
 8008082:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008084:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	441a      	add	r2, r3
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800808e:	429a      	cmp	r2, r3
 8008090:	d907      	bls.n	80080a2 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008096:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800809e:	2301      	movs	r3, #1
 80080a0:	e0ad      	b.n	80081fe <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	2203      	movs	r2, #3
 80080a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	2200      	movs	r2, #0
 80080b0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f042 021a 	orr.w	r2, r2, #26
 80080c0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080c6:	4a50      	ldr	r2, [pc, #320]	@ (8008208 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 80080c8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080ce:	4a4f      	ldr	r2, [pc, #316]	@ (800820c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80080d0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080d6:	2200      	movs	r2, #0
 80080d8:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080de:	2b01      	cmp	r3, #1
 80080e0:	d002      	beq.n	80080e8 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 80080e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080e4:	025b      	lsls	r3, r3, #9
 80080e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	2b01      	cmp	r3, #1
 80080ec:	d90a      	bls.n	8008104 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	22a0      	movs	r2, #160	@ 0xa0
 80080f2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80080fa:	4618      	mov	r0, r3
 80080fc:	f001 fd9c 	bl	8009c38 <SDMMC_CmdWriteMultiBlock>
 8008100:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8008102:	e009      	b.n	8008118 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	2290      	movs	r2, #144	@ 0x90
 8008108:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008110:	4618      	mov	r0, r3
 8008112:	f001 fd6f 	bl	8009bf4 <SDMMC_CmdWriteSingleBlock>
 8008116:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800811a:	2b00      	cmp	r3, #0
 800811c:	d012      	beq.n	8008144 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	4a3b      	ldr	r2, [pc, #236]	@ (8008210 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8008124:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800812a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800812c:	431a      	orrs	r2, r3
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	2201      	movs	r2, #1
 8008136:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	2200      	movs	r2, #0
 800813e:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8008140:	2301      	movs	r3, #1
 8008142:	e05c      	b.n	80081fe <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f042 0208 	orr.w	r2, r2, #8
 8008152:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008158:	2240      	movs	r2, #64	@ 0x40
 800815a:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800816c:	689a      	ldr	r2, [r3, #8]
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	430a      	orrs	r2, r1
 8008176:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800817c:	68b9      	ldr	r1, [r7, #8]
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	3380      	adds	r3, #128	@ 0x80
 8008184:	461a      	mov	r2, r3
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	025b      	lsls	r3, r3, #9
 800818a:	089b      	lsrs	r3, r3, #2
 800818c:	f7fc faa8 	bl	80046e0 <HAL_DMA_Start_IT>
 8008190:	4603      	mov	r3, r0
 8008192:	2b00      	cmp	r3, #0
 8008194:	d01a      	beq.n	80081cc <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f022 021a 	bic.w	r2, r2, #26
 80081a4:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	4a19      	ldr	r2, [pc, #100]	@ (8008210 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80081ac:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081b2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	2201      	movs	r2, #1
 80081be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	2200      	movs	r2, #0
 80081c6:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80081c8:	2301      	movs	r3, #1
 80081ca:	e018      	b.n	80081fe <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80081cc:	f04f 33ff 	mov.w	r3, #4294967295
 80081d0:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	025b      	lsls	r3, r3, #9
 80081d6:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80081d8:	2390      	movs	r3, #144	@ 0x90
 80081da:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80081dc:	2300      	movs	r3, #0
 80081de:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80081e0:	2300      	movs	r3, #0
 80081e2:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80081e4:	2301      	movs	r3, #1
 80081e6:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f107 0210 	add.w	r2, r7, #16
 80081f0:	4611      	mov	r1, r2
 80081f2:	4618      	mov	r0, r3
 80081f4:	f001 fc6c 	bl	8009ad0 <SDMMC_ConfigData>

      return HAL_OK;
 80081f8:	2300      	movs	r3, #0
 80081fa:	e000      	b.n	80081fe <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 80081fc:	2302      	movs	r3, #2
  }
}
 80081fe:	4618      	mov	r0, r3
 8008200:	3730      	adds	r7, #48	@ 0x30
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}
 8008206:	bf00      	nop
 8008208:	080088f5 	.word	0x080088f5
 800820c:	08008991 	.word	0x08008991
 8008210:	004005ff 	.word	0x004005ff

08008214 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b084      	sub	sp, #16
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008220:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008228:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800822c:	2b00      	cmp	r3, #0
 800822e:	d008      	beq.n	8008242 <HAL_SD_IRQHandler+0x2e>
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	f003 0308 	and.w	r3, r3, #8
 8008236:	2b00      	cmp	r3, #0
 8008238:	d003      	beq.n	8008242 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f000 fdec 	bl	8008e18 <SD_Read_IT>
 8008240:	e15a      	b.n	80084f8 <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008248:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800824c:	2b00      	cmp	r3, #0
 800824e:	f000 808d 	beq.w	800836c <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800825a:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681a      	ldr	r2, [r3, #0]
 8008266:	4b9a      	ldr	r3, [pc, #616]	@ (80084d0 <HAL_SD_IRQHandler+0x2bc>)
 8008268:	400b      	ands	r3, r1
 800826a:	63d3      	str	r3, [r2, #60]	@ 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f022 0201 	bic.w	r2, r2, #1
 800827a:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	f003 0308 	and.w	r3, r3, #8
 8008282:	2b00      	cmp	r3, #0
 8008284:	d039      	beq.n	80082fa <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	f003 0302 	and.w	r3, r3, #2
 800828c:	2b00      	cmp	r3, #0
 800828e:	d104      	bne.n	800829a <HAL_SD_IRQHandler+0x86>
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	f003 0320 	and.w	r3, r3, #32
 8008296:	2b00      	cmp	r3, #0
 8008298:	d011      	beq.n	80082be <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	4618      	mov	r0, r3
 80082a0:	f001 fcec 	bl	8009c7c <SDMMC_CmdStopTransfer>
 80082a4:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d008      	beq.n	80082be <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	431a      	orrs	r2, r3
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f000 f921 	bl	8008500 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f240 523a 	movw	r2, #1338	@ 0x53a
 80082c6:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2201      	movs	r2, #1
 80082cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2200      	movs	r2, #0
 80082d4:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	f003 0301 	and.w	r3, r3, #1
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d104      	bne.n	80082ea <HAL_SD_IRQHandler+0xd6>
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	f003 0302 	and.w	r3, r3, #2
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d003      	beq.n	80082f2 <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f002 fc78 	bl	800abe0 <HAL_SD_RxCpltCallback>
 80082f0:	e102      	b.n	80084f8 <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f002 fc6a 	bl	800abcc <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80082f8:	e0fe      	b.n	80084f8 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008300:	2b00      	cmp	r3, #0
 8008302:	f000 80f9 	beq.w	80084f8 <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	f003 0320 	and.w	r3, r3, #32
 800830c:	2b00      	cmp	r3, #0
 800830e:	d011      	beq.n	8008334 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	4618      	mov	r0, r3
 8008316:	f001 fcb1 	bl	8009c7c <SDMMC_CmdStopTransfer>
 800831a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d008      	beq.n	8008334 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	431a      	orrs	r2, r3
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f000 f8e6 	bl	8008500 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	f003 0301 	and.w	r3, r3, #1
 800833a:	2b00      	cmp	r3, #0
 800833c:	f040 80dc 	bne.w	80084f8 <HAL_SD_IRQHandler+0x2e4>
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	f003 0302 	and.w	r3, r3, #2
 8008346:	2b00      	cmp	r3, #0
 8008348:	f040 80d6 	bne.w	80084f8 <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f022 0208 	bic.w	r2, r2, #8
 800835a:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2201      	movs	r2, #1
 8008360:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f002 fc31 	bl	800abcc <HAL_SD_TxCpltCallback>
}
 800836a:	e0c5      	b.n	80084f8 <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008372:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008376:	2b00      	cmp	r3, #0
 8008378:	d008      	beq.n	800838c <HAL_SD_IRQHandler+0x178>
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	f003 0308 	and.w	r3, r3, #8
 8008380:	2b00      	cmp	r3, #0
 8008382:	d003      	beq.n	800838c <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f000 fd98 	bl	8008eba <SD_Write_IT>
 800838a:	e0b5      	b.n	80084f8 <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008392:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 8008396:	2b00      	cmp	r3, #0
 8008398:	f000 80ae 	beq.w	80084f8 <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083a2:	f003 0302 	and.w	r3, r3, #2
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d005      	beq.n	80083b6 <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083ae:	f043 0202 	orr.w	r2, r3, #2
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083bc:	f003 0308 	and.w	r3, r3, #8
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d005      	beq.n	80083d0 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083c8:	f043 0208 	orr.w	r2, r3, #8
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083d6:	f003 0320 	and.w	r3, r3, #32
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d005      	beq.n	80083ea <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083e2:	f043 0220 	orr.w	r2, r3, #32
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083f0:	f003 0310 	and.w	r3, r3, #16
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d005      	beq.n	8008404 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083fc:	f043 0210 	orr.w	r2, r3, #16
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f240 523a 	movw	r2, #1338	@ 0x53a
 800840c:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800841c:	63da      	str	r2, [r3, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	4618      	mov	r0, r3
 8008424:	f001 fc2a 	bl	8009c7c <SDMMC_CmdStopTransfer>
 8008428:	4602      	mov	r2, r0
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800842e:	431a      	orrs	r2, r3
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	f003 0308 	and.w	r3, r3, #8
 800843a:	2b00      	cmp	r3, #0
 800843c:	d00a      	beq.n	8008454 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2201      	movs	r2, #1
 8008442:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2200      	movs	r2, #0
 800844a:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f000 f857 	bl	8008500 <HAL_SD_ErrorCallback>
}
 8008452:	e051      	b.n	80084f8 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800845a:	2b00      	cmp	r3, #0
 800845c:	d04c      	beq.n	80084f8 <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	f003 0310 	and.w	r3, r3, #16
 8008464:	2b00      	cmp	r3, #0
 8008466:	d104      	bne.n	8008472 <HAL_SD_IRQHandler+0x25e>
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	f003 0320 	and.w	r3, r3, #32
 800846e:	2b00      	cmp	r3, #0
 8008470:	d011      	beq.n	8008496 <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008476:	4a17      	ldr	r2, [pc, #92]	@ (80084d4 <HAL_SD_IRQHandler+0x2c0>)
 8008478:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800847e:	4618      	mov	r0, r3
 8008480:	f7fc f9fe 	bl	8004880 <HAL_DMA_Abort_IT>
 8008484:	4603      	mov	r3, r0
 8008486:	2b00      	cmp	r3, #0
 8008488:	d036      	beq.n	80084f8 <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800848e:	4618      	mov	r0, r3
 8008490:	f000 fad0 	bl	8008a34 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8008494:	e030      	b.n	80084f8 <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	f003 0301 	and.w	r3, r3, #1
 800849c:	2b00      	cmp	r3, #0
 800849e:	d104      	bne.n	80084aa <HAL_SD_IRQHandler+0x296>
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	f003 0302 	and.w	r3, r3, #2
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d018      	beq.n	80084dc <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084ae:	4a0a      	ldr	r2, [pc, #40]	@ (80084d8 <HAL_SD_IRQHandler+0x2c4>)
 80084b0:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084b6:	4618      	mov	r0, r3
 80084b8:	f7fc f9e2 	bl	8004880 <HAL_DMA_Abort_IT>
 80084bc:	4603      	mov	r3, r0
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d01a      	beq.n	80084f8 <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084c6:	4618      	mov	r0, r3
 80084c8:	f000 faeb 	bl	8008aa2 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80084cc:	e014      	b.n	80084f8 <HAL_SD_IRQHandler+0x2e4>
 80084ce:	bf00      	nop
 80084d0:	ffff3ec5 	.word	0xffff3ec5
 80084d4:	08008a35 	.word	0x08008a35
 80084d8:	08008aa3 	.word	0x08008aa3
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2200      	movs	r2, #0
 80084e0:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2201      	movs	r2, #1
 80084e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2200      	movs	r2, #0
 80084ee:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f002 fb61 	bl	800abb8 <HAL_SD_AbortCallback>
}
 80084f6:	e7ff      	b.n	80084f8 <HAL_SD_IRQHandler+0x2e4>
 80084f8:	bf00      	nop
 80084fa:	3710      	adds	r7, #16
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd80      	pop	{r7, pc}

08008500 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8008500:	b480      	push	{r7}
 8008502:	b083      	sub	sp, #12
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8008508:	bf00      	nop
 800850a:	370c      	adds	r7, #12
 800850c:	46bd      	mov	sp, r7
 800850e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008512:	4770      	bx	lr

08008514 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008514:	b480      	push	{r7}
 8008516:	b083      	sub	sp, #12
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
 800851c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008522:	0f9b      	lsrs	r3, r3, #30
 8008524:	b2da      	uxtb	r2, r3
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800852e:	0e9b      	lsrs	r3, r3, #26
 8008530:	b2db      	uxtb	r3, r3
 8008532:	f003 030f 	and.w	r3, r3, #15
 8008536:	b2da      	uxtb	r2, r3
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008540:	0e1b      	lsrs	r3, r3, #24
 8008542:	b2db      	uxtb	r3, r3
 8008544:	f003 0303 	and.w	r3, r3, #3
 8008548:	b2da      	uxtb	r2, r3
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008552:	0c1b      	lsrs	r3, r3, #16
 8008554:	b2da      	uxtb	r2, r3
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800855e:	0a1b      	lsrs	r3, r3, #8
 8008560:	b2da      	uxtb	r2, r3
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800856a:	b2da      	uxtb	r2, r3
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008574:	0d1b      	lsrs	r3, r3, #20
 8008576:	b29a      	uxth	r2, r3
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008580:	0c1b      	lsrs	r3, r3, #16
 8008582:	b2db      	uxtb	r3, r3
 8008584:	f003 030f 	and.w	r3, r3, #15
 8008588:	b2da      	uxtb	r2, r3
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008592:	0bdb      	lsrs	r3, r3, #15
 8008594:	b2db      	uxtb	r3, r3
 8008596:	f003 0301 	and.w	r3, r3, #1
 800859a:	b2da      	uxtb	r2, r3
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80085a4:	0b9b      	lsrs	r3, r3, #14
 80085a6:	b2db      	uxtb	r3, r3
 80085a8:	f003 0301 	and.w	r3, r3, #1
 80085ac:	b2da      	uxtb	r2, r3
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80085b6:	0b5b      	lsrs	r3, r3, #13
 80085b8:	b2db      	uxtb	r3, r3
 80085ba:	f003 0301 	and.w	r3, r3, #1
 80085be:	b2da      	uxtb	r2, r3
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80085c8:	0b1b      	lsrs	r3, r3, #12
 80085ca:	b2db      	uxtb	r3, r3
 80085cc:	f003 0301 	and.w	r3, r3, #1
 80085d0:	b2da      	uxtb	r2, r3
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	2200      	movs	r2, #0
 80085da:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d163      	bne.n	80086ac <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80085e8:	009a      	lsls	r2, r3, #2
 80085ea:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80085ee:	4013      	ands	r3, r2
 80085f0:	687a      	ldr	r2, [r7, #4]
 80085f2:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 80085f4:	0f92      	lsrs	r2, r2, #30
 80085f6:	431a      	orrs	r2, r3
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008600:	0edb      	lsrs	r3, r3, #27
 8008602:	b2db      	uxtb	r3, r3
 8008604:	f003 0307 	and.w	r3, r3, #7
 8008608:	b2da      	uxtb	r2, r3
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008612:	0e1b      	lsrs	r3, r3, #24
 8008614:	b2db      	uxtb	r3, r3
 8008616:	f003 0307 	and.w	r3, r3, #7
 800861a:	b2da      	uxtb	r2, r3
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008624:	0d5b      	lsrs	r3, r3, #21
 8008626:	b2db      	uxtb	r3, r3
 8008628:	f003 0307 	and.w	r3, r3, #7
 800862c:	b2da      	uxtb	r2, r3
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008636:	0c9b      	lsrs	r3, r3, #18
 8008638:	b2db      	uxtb	r3, r3
 800863a:	f003 0307 	and.w	r3, r3, #7
 800863e:	b2da      	uxtb	r2, r3
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008648:	0bdb      	lsrs	r3, r3, #15
 800864a:	b2db      	uxtb	r3, r3
 800864c:	f003 0307 	and.w	r3, r3, #7
 8008650:	b2da      	uxtb	r2, r3
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	691b      	ldr	r3, [r3, #16]
 800865a:	1c5a      	adds	r2, r3, #1
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	7e1b      	ldrb	r3, [r3, #24]
 8008664:	b2db      	uxtb	r3, r3
 8008666:	f003 0307 	and.w	r3, r3, #7
 800866a:	3302      	adds	r3, #2
 800866c:	2201      	movs	r2, #1
 800866e:	fa02 f303 	lsl.w	r3, r2, r3
 8008672:	687a      	ldr	r2, [r7, #4]
 8008674:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8008676:	fb03 f202 	mul.w	r2, r3, r2
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	7a1b      	ldrb	r3, [r3, #8]
 8008682:	b2db      	uxtb	r3, r3
 8008684:	f003 030f 	and.w	r3, r3, #15
 8008688:	2201      	movs	r2, #1
 800868a:	409a      	lsls	r2, r3
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008694:	687a      	ldr	r2, [r7, #4]
 8008696:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8008698:	0a52      	lsrs	r2, r2, #9
 800869a:	fb03 f202 	mul.w	r2, r3, r2
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80086a8:	661a      	str	r2, [r3, #96]	@ 0x60
 80086aa:	e031      	b.n	8008710 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086b0:	2b01      	cmp	r3, #1
 80086b2:	d11d      	bne.n	80086f0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80086b8:	041b      	lsls	r3, r3, #16
 80086ba:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80086c2:	0c1b      	lsrs	r3, r3, #16
 80086c4:	431a      	orrs	r2, r3
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	691b      	ldr	r3, [r3, #16]
 80086ce:	3301      	adds	r3, #1
 80086d0:	029a      	lsls	r2, r3, #10
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80086e4:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	661a      	str	r2, [r3, #96]	@ 0x60
 80086ee:	e00f      	b.n	8008710 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	4a58      	ldr	r2, [pc, #352]	@ (8008858 <HAL_SD_GetCardCSD+0x344>)
 80086f6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086fc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2201      	movs	r2, #1
 8008708:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800870c:	2301      	movs	r3, #1
 800870e:	e09d      	b.n	800884c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008714:	0b9b      	lsrs	r3, r3, #14
 8008716:	b2db      	uxtb	r3, r3
 8008718:	f003 0301 	and.w	r3, r3, #1
 800871c:	b2da      	uxtb	r2, r3
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008726:	09db      	lsrs	r3, r3, #7
 8008728:	b2db      	uxtb	r3, r3
 800872a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800872e:	b2da      	uxtb	r2, r3
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008738:	b2db      	uxtb	r3, r3
 800873a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800873e:	b2da      	uxtb	r2, r3
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008748:	0fdb      	lsrs	r3, r3, #31
 800874a:	b2da      	uxtb	r2, r3
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008754:	0f5b      	lsrs	r3, r3, #29
 8008756:	b2db      	uxtb	r3, r3
 8008758:	f003 0303 	and.w	r3, r3, #3
 800875c:	b2da      	uxtb	r2, r3
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008766:	0e9b      	lsrs	r3, r3, #26
 8008768:	b2db      	uxtb	r3, r3
 800876a:	f003 0307 	and.w	r3, r3, #7
 800876e:	b2da      	uxtb	r2, r3
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008778:	0d9b      	lsrs	r3, r3, #22
 800877a:	b2db      	uxtb	r3, r3
 800877c:	f003 030f 	and.w	r3, r3, #15
 8008780:	b2da      	uxtb	r2, r3
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800878a:	0d5b      	lsrs	r3, r3, #21
 800878c:	b2db      	uxtb	r3, r3
 800878e:	f003 0301 	and.w	r3, r3, #1
 8008792:	b2da      	uxtb	r2, r3
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	2200      	movs	r2, #0
 800879e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80087a6:	0c1b      	lsrs	r3, r3, #16
 80087a8:	b2db      	uxtb	r3, r3
 80087aa:	f003 0301 	and.w	r3, r3, #1
 80087ae:	b2da      	uxtb	r2, r3
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80087ba:	0bdb      	lsrs	r3, r3, #15
 80087bc:	b2db      	uxtb	r3, r3
 80087be:	f003 0301 	and.w	r3, r3, #1
 80087c2:	b2da      	uxtb	r2, r3
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80087ce:	0b9b      	lsrs	r3, r3, #14
 80087d0:	b2db      	uxtb	r3, r3
 80087d2:	f003 0301 	and.w	r3, r3, #1
 80087d6:	b2da      	uxtb	r2, r3
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80087e2:	0b5b      	lsrs	r3, r3, #13
 80087e4:	b2db      	uxtb	r3, r3
 80087e6:	f003 0301 	and.w	r3, r3, #1
 80087ea:	b2da      	uxtb	r2, r3
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80087f6:	0b1b      	lsrs	r3, r3, #12
 80087f8:	b2db      	uxtb	r3, r3
 80087fa:	f003 0301 	and.w	r3, r3, #1
 80087fe:	b2da      	uxtb	r2, r3
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800880a:	0a9b      	lsrs	r3, r3, #10
 800880c:	b2db      	uxtb	r3, r3
 800880e:	f003 0303 	and.w	r3, r3, #3
 8008812:	b2da      	uxtb	r2, r3
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800881e:	0a1b      	lsrs	r3, r3, #8
 8008820:	b2db      	uxtb	r3, r3
 8008822:	f003 0303 	and.w	r3, r3, #3
 8008826:	b2da      	uxtb	r2, r3
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008832:	085b      	lsrs	r3, r3, #1
 8008834:	b2db      	uxtb	r3, r3
 8008836:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800883a:	b2da      	uxtb	r2, r3
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	2201      	movs	r2, #1
 8008846:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800884a:	2300      	movs	r3, #0
}
 800884c:	4618      	mov	r0, r3
 800884e:	370c      	adds	r7, #12
 8008850:	46bd      	mov	sp, r7
 8008852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008856:	4770      	bx	lr
 8008858:	004005ff 	.word	0x004005ff

0800885c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800885c:	b480      	push	{r7}
 800885e:	b083      	sub	sp, #12
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
 8008864:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80088a6:	2300      	movs	r3, #0
}
 80088a8:	4618      	mov	r0, r3
 80088aa:	370c      	adds	r7, #12
 80088ac:	46bd      	mov	sp, r7
 80088ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b2:	4770      	bx	lr

080088b4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b086      	sub	sp, #24
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80088bc:	2300      	movs	r3, #0
 80088be:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80088c0:	f107 030c 	add.w	r3, r7, #12
 80088c4:	4619      	mov	r1, r3
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f000 fa7e 	bl	8008dc8 <SD_SendStatus>
 80088cc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80088ce:	697b      	ldr	r3, [r7, #20]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d005      	beq.n	80088e0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80088d8:	697b      	ldr	r3, [r7, #20]
 80088da:	431a      	orrs	r2, r3
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	0a5b      	lsrs	r3, r3, #9
 80088e4:	f003 030f 	and.w	r3, r3, #15
 80088e8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80088ea:	693b      	ldr	r3, [r7, #16]
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	3718      	adds	r7, #24
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}

080088f4 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80088f4:	b480      	push	{r7}
 80088f6:	b085      	sub	sp, #20
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008900:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008910:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8008912:	bf00      	nop
 8008914:	3714      	adds	r7, #20
 8008916:	46bd      	mov	sp, r7
 8008918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891c:	4770      	bx	lr

0800891e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800891e:	b580      	push	{r7, lr}
 8008920:	b084      	sub	sp, #16
 8008922:	af00      	add	r7, sp, #0
 8008924:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800892a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008930:	2b82      	cmp	r3, #130	@ 0x82
 8008932:	d111      	bne.n	8008958 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	4618      	mov	r0, r3
 800893a:	f001 f99f 	bl	8009c7c <SDMMC_CmdStopTransfer>
 800893e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d008      	beq.n	8008958 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	431a      	orrs	r2, r3
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8008952:	68f8      	ldr	r0, [r7, #12]
 8008954:	f7ff fdd4 	bl	8008500 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f022 0208 	bic.w	r2, r2, #8
 8008966:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f240 523a 	movw	r2, #1338	@ 0x53a
 8008970:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	2201      	movs	r2, #1
 8008976:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	2200      	movs	r2, #0
 800897e:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8008980:	68f8      	ldr	r0, [r7, #12]
 8008982:	f002 f92d 	bl	800abe0 <HAL_SD_RxCpltCallback>
#endif
}
 8008986:	bf00      	nop
 8008988:	3710      	adds	r7, #16
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}
	...

08008990 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b086      	sub	sp, #24
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800899c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f7fc f91a 	bl	8004bd8 <HAL_DMA_GetError>
 80089a4:	4603      	mov	r3, r0
 80089a6:	2b02      	cmp	r3, #2
 80089a8:	d03e      	beq.n	8008a28 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089b0:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089b8:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80089ba:	693b      	ldr	r3, [r7, #16]
 80089bc:	2b01      	cmp	r3, #1
 80089be:	d002      	beq.n	80089c6 <SD_DMAError+0x36>
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	2b01      	cmp	r3, #1
 80089c4:	d12d      	bne.n	8008a22 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80089c6:	697b      	ldr	r3, [r7, #20]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	4a19      	ldr	r2, [pc, #100]	@ (8008a30 <SD_DMAError+0xa0>)
 80089cc:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80089ce:	697b      	ldr	r3, [r7, #20]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 80089dc:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80089de:	697b      	ldr	r3, [r7, #20]
 80089e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089e2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80089ea:	6978      	ldr	r0, [r7, #20]
 80089ec:	f7ff ff62 	bl	80088b4 <HAL_SD_GetCardState>
 80089f0:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	2b06      	cmp	r3, #6
 80089f6:	d002      	beq.n	80089fe <SD_DMAError+0x6e>
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	2b05      	cmp	r3, #5
 80089fc:	d10a      	bne.n	8008a14 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80089fe:	697b      	ldr	r3, [r7, #20]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	4618      	mov	r0, r3
 8008a04:	f001 f93a 	bl	8009c7c <SDMMC_CmdStopTransfer>
 8008a08:	4602      	mov	r2, r0
 8008a0a:	697b      	ldr	r3, [r7, #20]
 8008a0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a0e:	431a      	orrs	r2, r3
 8008a10:	697b      	ldr	r3, [r7, #20]
 8008a12:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8008a14:	697b      	ldr	r3, [r7, #20]
 8008a16:	2201      	movs	r2, #1
 8008a18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008a1c:	697b      	ldr	r3, [r7, #20]
 8008a1e:	2200      	movs	r2, #0
 8008a20:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8008a22:	6978      	ldr	r0, [r7, #20]
 8008a24:	f7ff fd6c 	bl	8008500 <HAL_SD_ErrorCallback>
#endif
  }
}
 8008a28:	bf00      	nop
 8008a2a:	3718      	adds	r7, #24
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}
 8008a30:	004005ff 	.word	0x004005ff

08008a34 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b084      	sub	sp, #16
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a40:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f240 523a 	movw	r2, #1338	@ 0x53a
 8008a4a:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8008a4c:	68f8      	ldr	r0, [r7, #12]
 8008a4e:	f7ff ff31 	bl	80088b4 <HAL_SD_GetCardState>
 8008a52:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	2201      	movs	r2, #1
 8008a58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	2200      	movs	r2, #0
 8008a60:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	2b06      	cmp	r3, #6
 8008a66:	d002      	beq.n	8008a6e <SD_DMATxAbort+0x3a>
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	2b05      	cmp	r3, #5
 8008a6c:	d10a      	bne.n	8008a84 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	4618      	mov	r0, r3
 8008a74:	f001 f902 	bl	8009c7c <SDMMC_CmdStopTransfer>
 8008a78:	4602      	mov	r2, r0
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a7e:	431a      	orrs	r2, r3
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d103      	bne.n	8008a94 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8008a8c:	68f8      	ldr	r0, [r7, #12]
 8008a8e:	f002 f893 	bl	800abb8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8008a92:	e002      	b.n	8008a9a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8008a94:	68f8      	ldr	r0, [r7, #12]
 8008a96:	f7ff fd33 	bl	8008500 <HAL_SD_ErrorCallback>
}
 8008a9a:	bf00      	nop
 8008a9c:	3710      	adds	r7, #16
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}

08008aa2 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8008aa2:	b580      	push	{r7, lr}
 8008aa4:	b084      	sub	sp, #16
 8008aa6:	af00      	add	r7, sp, #0
 8008aa8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008aae:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f240 523a 	movw	r2, #1338	@ 0x53a
 8008ab8:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8008aba:	68f8      	ldr	r0, [r7, #12]
 8008abc:	f7ff fefa 	bl	80088b4 <HAL_SD_GetCardState>
 8008ac0:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	2201      	movs	r2, #1
 8008ac6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	2200      	movs	r2, #0
 8008ace:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	2b06      	cmp	r3, #6
 8008ad4:	d002      	beq.n	8008adc <SD_DMARxAbort+0x3a>
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	2b05      	cmp	r3, #5
 8008ada:	d10a      	bne.n	8008af2 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	f001 f8cb 	bl	8009c7c <SDMMC_CmdStopTransfer>
 8008ae6:	4602      	mov	r2, r0
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008aec:	431a      	orrs	r2, r3
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d103      	bne.n	8008b02 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8008afa:	68f8      	ldr	r0, [r7, #12]
 8008afc:	f002 f85c 	bl	800abb8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8008b00:	e002      	b.n	8008b08 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8008b02:	68f8      	ldr	r0, [r7, #12]
 8008b04:	f7ff fcfc 	bl	8008500 <HAL_SD_ErrorCallback>
}
 8008b08:	bf00      	nop
 8008b0a:	3710      	adds	r7, #16
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bd80      	pop	{r7, pc}

08008b10 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008b10:	b5b0      	push	{r4, r5, r7, lr}
 8008b12:	b094      	sub	sp, #80	@ 0x50
 8008b14:	af04      	add	r7, sp, #16
 8008b16:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008b18:	2301      	movs	r3, #1
 8008b1a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	4618      	mov	r0, r3
 8008b22:	f000 ff7d 	bl	8009a20 <SDMMC_GetPowerState>
 8008b26:	4603      	mov	r3, r0
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d102      	bne.n	8008b32 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008b2c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8008b30:	e0b8      	b.n	8008ca4 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b36:	2b03      	cmp	r3, #3
 8008b38:	d02f      	beq.n	8008b9a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	4618      	mov	r0, r3
 8008b40:	f001 f964 	bl	8009e0c <SDMMC_CmdSendCID>
 8008b44:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008b46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d001      	beq.n	8008b50 <SD_InitCard+0x40>
    {
      return errorstate;
 8008b4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b4e:	e0a9      	b.n	8008ca4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	2100      	movs	r1, #0
 8008b56:	4618      	mov	r0, r3
 8008b58:	f000 ffa7 	bl	8009aaa <SDMMC_GetResponse>
 8008b5c:	4602      	mov	r2, r0
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	2104      	movs	r1, #4
 8008b68:	4618      	mov	r0, r3
 8008b6a:	f000 ff9e 	bl	8009aaa <SDMMC_GetResponse>
 8008b6e:	4602      	mov	r2, r0
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	2108      	movs	r1, #8
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f000 ff95 	bl	8009aaa <SDMMC_GetResponse>
 8008b80:	4602      	mov	r2, r0
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	210c      	movs	r1, #12
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	f000 ff8c 	bl	8009aaa <SDMMC_GetResponse>
 8008b92:	4602      	mov	r2, r0
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b9e:	2b03      	cmp	r3, #3
 8008ba0:	d00d      	beq.n	8008bbe <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f107 020e 	add.w	r2, r7, #14
 8008baa:	4611      	mov	r1, r2
 8008bac:	4618      	mov	r0, r3
 8008bae:	f001 f96a 	bl	8009e86 <SDMMC_CmdSetRelAdd>
 8008bb2:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008bb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d001      	beq.n	8008bbe <SD_InitCard+0xae>
    {
      return errorstate;
 8008bba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008bbc:	e072      	b.n	8008ca4 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008bc2:	2b03      	cmp	r3, #3
 8008bc4:	d036      	beq.n	8008c34 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008bc6:	89fb      	ldrh	r3, [r7, #14]
 8008bc8:	461a      	mov	r2, r3
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681a      	ldr	r2, [r3, #0]
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008bd6:	041b      	lsls	r3, r3, #16
 8008bd8:	4619      	mov	r1, r3
 8008bda:	4610      	mov	r0, r2
 8008bdc:	f001 f934 	bl	8009e48 <SDMMC_CmdSendCSD>
 8008be0:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008be2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d001      	beq.n	8008bec <SD_InitCard+0xdc>
    {
      return errorstate;
 8008be8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008bea:	e05b      	b.n	8008ca4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	2100      	movs	r1, #0
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	f000 ff59 	bl	8009aaa <SDMMC_GetResponse>
 8008bf8:	4602      	mov	r2, r0
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	2104      	movs	r1, #4
 8008c04:	4618      	mov	r0, r3
 8008c06:	f000 ff50 	bl	8009aaa <SDMMC_GetResponse>
 8008c0a:	4602      	mov	r2, r0
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	2108      	movs	r1, #8
 8008c16:	4618      	mov	r0, r3
 8008c18:	f000 ff47 	bl	8009aaa <SDMMC_GetResponse>
 8008c1c:	4602      	mov	r2, r0
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	210c      	movs	r1, #12
 8008c28:	4618      	mov	r0, r3
 8008c2a:	f000 ff3e 	bl	8009aaa <SDMMC_GetResponse>
 8008c2e:	4602      	mov	r2, r0
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	2104      	movs	r1, #4
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f000 ff35 	bl	8009aaa <SDMMC_GetResponse>
 8008c40:	4603      	mov	r3, r0
 8008c42:	0d1a      	lsrs	r2, r3, #20
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008c48:	f107 0310 	add.w	r3, r7, #16
 8008c4c:	4619      	mov	r1, r3
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	f7ff fc60 	bl	8008514 <HAL_SD_GetCardCSD>
 8008c54:	4603      	mov	r3, r0
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d002      	beq.n	8008c60 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008c5a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008c5e:	e021      	b.n	8008ca4 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6819      	ldr	r1, [r3, #0]
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c68:	041b      	lsls	r3, r3, #16
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	461c      	mov	r4, r3
 8008c6e:	4615      	mov	r5, r2
 8008c70:	4622      	mov	r2, r4
 8008c72:	462b      	mov	r3, r5
 8008c74:	4608      	mov	r0, r1
 8008c76:	f001 f823 	bl	8009cc0 <SDMMC_CmdSelDesel>
 8008c7a:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d001      	beq.n	8008c86 <SD_InitCard+0x176>
  {
    return errorstate;
 8008c82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c84:	e00e      	b.n	8008ca4 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681d      	ldr	r5, [r3, #0]
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	466c      	mov	r4, sp
 8008c8e:	f103 0210 	add.w	r2, r3, #16
 8008c92:	ca07      	ldmia	r2, {r0, r1, r2}
 8008c94:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008c98:	3304      	adds	r3, #4
 8008c9a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008c9c:	4628      	mov	r0, r5
 8008c9e:	f000 fe67 	bl	8009970 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008ca2:	2300      	movs	r3, #0
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	3740      	adds	r7, #64	@ 0x40
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bdb0      	pop	{r4, r5, r7, pc}

08008cac <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b086      	sub	sp, #24
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8008cb8:	2300      	movs	r3, #0
 8008cba:	617b      	str	r3, [r7, #20]
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	f001 f81e 	bl	8009d06 <SDMMC_CmdGoIdleState>
 8008cca:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d001      	beq.n	8008cd6 <SD_PowerON+0x2a>
  {
    return errorstate;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	e072      	b.n	8008dbc <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	4618      	mov	r0, r3
 8008cdc:	f001 f831 	bl	8009d42 <SDMMC_CmdOperCond>
 8008ce0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d00d      	beq.n	8008d04 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2200      	movs	r2, #0
 8008cec:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f001 f807 	bl	8009d06 <SDMMC_CmdGoIdleState>
 8008cf8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d004      	beq.n	8008d0a <SD_PowerON+0x5e>
    {
      return errorstate;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	e05b      	b.n	8008dbc <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2201      	movs	r2, #1
 8008d08:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008d0e:	2b01      	cmp	r3, #1
 8008d10:	d137      	bne.n	8008d82 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	2100      	movs	r1, #0
 8008d18:	4618      	mov	r0, r3
 8008d1a:	f001 f831 	bl	8009d80 <SDMMC_CmdAppCommand>
 8008d1e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d02d      	beq.n	8008d82 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008d26:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008d2a:	e047      	b.n	8008dbc <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	2100      	movs	r1, #0
 8008d32:	4618      	mov	r0, r3
 8008d34:	f001 f824 	bl	8009d80 <SDMMC_CmdAppCommand>
 8008d38:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d001      	beq.n	8008d44 <SD_PowerON+0x98>
    {
      return errorstate;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	e03b      	b.n	8008dbc <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	491e      	ldr	r1, [pc, #120]	@ (8008dc4 <SD_PowerON+0x118>)
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f001 f83a 	bl	8009dc4 <SDMMC_CmdAppOperCommand>
 8008d50:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d002      	beq.n	8008d5e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008d58:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008d5c:	e02e      	b.n	8008dbc <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	2100      	movs	r1, #0
 8008d64:	4618      	mov	r0, r3
 8008d66:	f000 fea0 	bl	8009aaa <SDMMC_GetResponse>
 8008d6a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008d6c:	697b      	ldr	r3, [r7, #20]
 8008d6e:	0fdb      	lsrs	r3, r3, #31
 8008d70:	2b01      	cmp	r3, #1
 8008d72:	d101      	bne.n	8008d78 <SD_PowerON+0xcc>
 8008d74:	2301      	movs	r3, #1
 8008d76:	e000      	b.n	8008d7a <SD_PowerON+0xce>
 8008d78:	2300      	movs	r3, #0
 8008d7a:	613b      	str	r3, [r7, #16]

    count++;
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	3301      	adds	r3, #1
 8008d80:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008d82:	68bb      	ldr	r3, [r7, #8]
 8008d84:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8008d88:	4293      	cmp	r3, r2
 8008d8a:	d802      	bhi.n	8008d92 <SD_PowerON+0xe6>
 8008d8c:	693b      	ldr	r3, [r7, #16]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d0cc      	beq.n	8008d2c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	d902      	bls.n	8008da2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008d9c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008da0:	e00c      	b.n	8008dbc <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008da2:	697b      	ldr	r3, [r7, #20]
 8008da4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d003      	beq.n	8008db4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2201      	movs	r2, #1
 8008db0:	645a      	str	r2, [r3, #68]	@ 0x44
 8008db2:	e002      	b.n	8008dba <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2200      	movs	r2, #0
 8008db8:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8008dba:	2300      	movs	r3, #0
}
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	3718      	adds	r7, #24
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	bd80      	pop	{r7, pc}
 8008dc4:	c1100000 	.word	0xc1100000

08008dc8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b084      	sub	sp, #16
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
 8008dd0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d102      	bne.n	8008dde <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008dd8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008ddc:	e018      	b.n	8008e10 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681a      	ldr	r2, [r3, #0]
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008de6:	041b      	lsls	r3, r3, #16
 8008de8:	4619      	mov	r1, r3
 8008dea:	4610      	mov	r0, r2
 8008dec:	f001 f86c 	bl	8009ec8 <SDMMC_CmdSendStatus>
 8008df0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d001      	beq.n	8008dfc <SD_SendStatus+0x34>
  {
    return errorstate;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	e009      	b.n	8008e10 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	2100      	movs	r1, #0
 8008e02:	4618      	mov	r0, r3
 8008e04:	f000 fe51 	bl	8009aaa <SDMMC_GetResponse>
 8008e08:	4602      	mov	r2, r0
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008e0e:	2300      	movs	r3, #0
}
 8008e10:	4618      	mov	r0, r3
 8008e12:	3710      	adds	r7, #16
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}

08008e18 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b086      	sub	sp, #24
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e24:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e2a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8008e2c:	693b      	ldr	r3, [r7, #16]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d03f      	beq.n	8008eb2 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8008e32:	2300      	movs	r3, #0
 8008e34:	617b      	str	r3, [r7, #20]
 8008e36:	e033      	b.n	8008ea0 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	f000 fdc3 	bl	80099c8 <SDMMC_ReadFIFO>
 8008e42:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	b2da      	uxtb	r2, r3
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	3301      	adds	r3, #1
 8008e50:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008e52:	693b      	ldr	r3, [r7, #16]
 8008e54:	3b01      	subs	r3, #1
 8008e56:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	0a1b      	lsrs	r3, r3, #8
 8008e5c:	b2da      	uxtb	r2, r3
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	3301      	adds	r3, #1
 8008e66:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008e68:	693b      	ldr	r3, [r7, #16]
 8008e6a:	3b01      	subs	r3, #1
 8008e6c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8008e6e:	68bb      	ldr	r3, [r7, #8]
 8008e70:	0c1b      	lsrs	r3, r3, #16
 8008e72:	b2da      	uxtb	r2, r3
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	3301      	adds	r3, #1
 8008e7c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008e7e:	693b      	ldr	r3, [r7, #16]
 8008e80:	3b01      	subs	r3, #1
 8008e82:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	0e1b      	lsrs	r3, r3, #24
 8008e88:	b2da      	uxtb	r2, r3
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	3301      	adds	r3, #1
 8008e92:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	3b01      	subs	r3, #1
 8008e98:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8008e9a:	697b      	ldr	r3, [r7, #20]
 8008e9c:	3301      	adds	r3, #1
 8008e9e:	617b      	str	r3, [r7, #20]
 8008ea0:	697b      	ldr	r3, [r7, #20]
 8008ea2:	2b07      	cmp	r3, #7
 8008ea4:	d9c8      	bls.n	8008e38 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	68fa      	ldr	r2, [r7, #12]
 8008eaa:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	693a      	ldr	r2, [r7, #16]
 8008eb0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 8008eb2:	bf00      	nop
 8008eb4:	3718      	adds	r7, #24
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bd80      	pop	{r7, pc}

08008eba <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8008eba:	b580      	push	{r7, lr}
 8008ebc:	b086      	sub	sp, #24
 8008ebe:	af00      	add	r7, sp, #0
 8008ec0:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6a1b      	ldr	r3, [r3, #32]
 8008ec6:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ecc:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8008ece:	693b      	ldr	r3, [r7, #16]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d043      	beq.n	8008f5c <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	617b      	str	r3, [r7, #20]
 8008ed8:	e037      	b.n	8008f4a <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	781b      	ldrb	r3, [r3, #0]
 8008ede:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	3301      	adds	r3, #1
 8008ee4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008ee6:	693b      	ldr	r3, [r7, #16]
 8008ee8:	3b01      	subs	r3, #1
 8008eea:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	781b      	ldrb	r3, [r3, #0]
 8008ef0:	021a      	lsls	r2, r3, #8
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	4313      	orrs	r3, r2
 8008ef6:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	3301      	adds	r3, #1
 8008efc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008efe:	693b      	ldr	r3, [r7, #16]
 8008f00:	3b01      	subs	r3, #1
 8008f02:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	781b      	ldrb	r3, [r3, #0]
 8008f08:	041a      	lsls	r2, r3, #16
 8008f0a:	68bb      	ldr	r3, [r7, #8]
 8008f0c:	4313      	orrs	r3, r2
 8008f0e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	3301      	adds	r3, #1
 8008f14:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008f16:	693b      	ldr	r3, [r7, #16]
 8008f18:	3b01      	subs	r3, #1
 8008f1a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	781b      	ldrb	r3, [r3, #0]
 8008f20:	061a      	lsls	r2, r3, #24
 8008f22:	68bb      	ldr	r3, [r7, #8]
 8008f24:	4313      	orrs	r3, r2
 8008f26:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	3301      	adds	r3, #1
 8008f2c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008f2e:	693b      	ldr	r3, [r7, #16]
 8008f30:	3b01      	subs	r3, #1
 8008f32:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f107 0208 	add.w	r2, r7, #8
 8008f3c:	4611      	mov	r1, r2
 8008f3e:	4618      	mov	r0, r3
 8008f40:	f000 fd4f 	bl	80099e2 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8008f44:	697b      	ldr	r3, [r7, #20]
 8008f46:	3301      	adds	r3, #1
 8008f48:	617b      	str	r3, [r7, #20]
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	2b07      	cmp	r3, #7
 8008f4e:	d9c4      	bls.n	8008eda <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	68fa      	ldr	r2, [r7, #12]
 8008f54:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	693a      	ldr	r2, [r7, #16]
 8008f5a:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 8008f5c:	bf00      	nop
 8008f5e:	3718      	adds	r7, #24
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd80      	pop	{r7, pc}

08008f64 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b082      	sub	sp, #8
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d101      	bne.n	8008f76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008f72:	2301      	movs	r3, #1
 8008f74:	e040      	b.n	8008ff8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d106      	bne.n	8008f8c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2200      	movs	r2, #0
 8008f82:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f7f8 ffc8 	bl	8001f1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2224      	movs	r2, #36	@ 0x24
 8008f90:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	681a      	ldr	r2, [r3, #0]
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f022 0201 	bic.w	r2, r2, #1
 8008fa0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d002      	beq.n	8008fb0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f000 fb16 	bl	80095dc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	f000 f8af 	bl	8009114 <UART_SetConfig>
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	2b01      	cmp	r3, #1
 8008fba:	d101      	bne.n	8008fc0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8008fbc:	2301      	movs	r3, #1
 8008fbe:	e01b      	b.n	8008ff8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	685a      	ldr	r2, [r3, #4]
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008fce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	689a      	ldr	r2, [r3, #8]
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008fde:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	681a      	ldr	r2, [r3, #0]
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f042 0201 	orr.w	r2, r2, #1
 8008fee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f000 fb95 	bl	8009720 <UART_CheckIdleState>
 8008ff6:	4603      	mov	r3, r0
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	3708      	adds	r7, #8
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bd80      	pop	{r7, pc}

08009000 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b08a      	sub	sp, #40	@ 0x28
 8009004:	af02      	add	r7, sp, #8
 8009006:	60f8      	str	r0, [r7, #12]
 8009008:	60b9      	str	r1, [r7, #8]
 800900a:	603b      	str	r3, [r7, #0]
 800900c:	4613      	mov	r3, r2
 800900e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009014:	2b20      	cmp	r3, #32
 8009016:	d177      	bne.n	8009108 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d002      	beq.n	8009024 <HAL_UART_Transmit+0x24>
 800901e:	88fb      	ldrh	r3, [r7, #6]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d101      	bne.n	8009028 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8009024:	2301      	movs	r3, #1
 8009026:	e070      	b.n	800910a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	2200      	movs	r2, #0
 800902c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	2221      	movs	r2, #33	@ 0x21
 8009034:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009036:	f7fb f905 	bl	8004244 <HAL_GetTick>
 800903a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	88fa      	ldrh	r2, [r7, #6]
 8009040:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	88fa      	ldrh	r2, [r7, #6]
 8009048:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	689b      	ldr	r3, [r3, #8]
 8009050:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009054:	d108      	bne.n	8009068 <HAL_UART_Transmit+0x68>
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	691b      	ldr	r3, [r3, #16]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d104      	bne.n	8009068 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800905e:	2300      	movs	r3, #0
 8009060:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009062:	68bb      	ldr	r3, [r7, #8]
 8009064:	61bb      	str	r3, [r7, #24]
 8009066:	e003      	b.n	8009070 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800906c:	2300      	movs	r3, #0
 800906e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009070:	e02f      	b.n	80090d2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	9300      	str	r3, [sp, #0]
 8009076:	697b      	ldr	r3, [r7, #20]
 8009078:	2200      	movs	r2, #0
 800907a:	2180      	movs	r1, #128	@ 0x80
 800907c:	68f8      	ldr	r0, [r7, #12]
 800907e:	f000 fba6 	bl	80097ce <UART_WaitOnFlagUntilTimeout>
 8009082:	4603      	mov	r3, r0
 8009084:	2b00      	cmp	r3, #0
 8009086:	d004      	beq.n	8009092 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	2220      	movs	r2, #32
 800908c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800908e:	2303      	movs	r3, #3
 8009090:	e03b      	b.n	800910a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8009092:	69fb      	ldr	r3, [r7, #28]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d10b      	bne.n	80090b0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009098:	69bb      	ldr	r3, [r7, #24]
 800909a:	881b      	ldrh	r3, [r3, #0]
 800909c:	461a      	mov	r2, r3
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80090a6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80090a8:	69bb      	ldr	r3, [r7, #24]
 80090aa:	3302      	adds	r3, #2
 80090ac:	61bb      	str	r3, [r7, #24]
 80090ae:	e007      	b.n	80090c0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80090b0:	69fb      	ldr	r3, [r7, #28]
 80090b2:	781a      	ldrb	r2, [r3, #0]
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80090ba:	69fb      	ldr	r3, [r7, #28]
 80090bc:	3301      	adds	r3, #1
 80090be:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80090c6:	b29b      	uxth	r3, r3
 80090c8:	3b01      	subs	r3, #1
 80090ca:	b29a      	uxth	r2, r3
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80090d8:	b29b      	uxth	r3, r3
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d1c9      	bne.n	8009072 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	9300      	str	r3, [sp, #0]
 80090e2:	697b      	ldr	r3, [r7, #20]
 80090e4:	2200      	movs	r2, #0
 80090e6:	2140      	movs	r1, #64	@ 0x40
 80090e8:	68f8      	ldr	r0, [r7, #12]
 80090ea:	f000 fb70 	bl	80097ce <UART_WaitOnFlagUntilTimeout>
 80090ee:	4603      	mov	r3, r0
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d004      	beq.n	80090fe <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	2220      	movs	r2, #32
 80090f8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80090fa:	2303      	movs	r3, #3
 80090fc:	e005      	b.n	800910a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	2220      	movs	r2, #32
 8009102:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8009104:	2300      	movs	r3, #0
 8009106:	e000      	b.n	800910a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8009108:	2302      	movs	r3, #2
  }
}
 800910a:	4618      	mov	r0, r3
 800910c:	3720      	adds	r7, #32
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}
	...

08009114 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b088      	sub	sp, #32
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800911c:	2300      	movs	r3, #0
 800911e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	689a      	ldr	r2, [r3, #8]
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	691b      	ldr	r3, [r3, #16]
 8009128:	431a      	orrs	r2, r3
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	695b      	ldr	r3, [r3, #20]
 800912e:	431a      	orrs	r2, r3
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	69db      	ldr	r3, [r3, #28]
 8009134:	4313      	orrs	r3, r2
 8009136:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	681a      	ldr	r2, [r3, #0]
 800913e:	4ba6      	ldr	r3, [pc, #664]	@ (80093d8 <UART_SetConfig+0x2c4>)
 8009140:	4013      	ands	r3, r2
 8009142:	687a      	ldr	r2, [r7, #4]
 8009144:	6812      	ldr	r2, [r2, #0]
 8009146:	6979      	ldr	r1, [r7, #20]
 8009148:	430b      	orrs	r3, r1
 800914a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	685b      	ldr	r3, [r3, #4]
 8009152:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	68da      	ldr	r2, [r3, #12]
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	430a      	orrs	r2, r1
 8009160:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	699b      	ldr	r3, [r3, #24]
 8009166:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6a1b      	ldr	r3, [r3, #32]
 800916c:	697a      	ldr	r2, [r7, #20]
 800916e:	4313      	orrs	r3, r2
 8009170:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	689b      	ldr	r3, [r3, #8]
 8009178:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	697a      	ldr	r2, [r7, #20]
 8009182:	430a      	orrs	r2, r1
 8009184:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	4a94      	ldr	r2, [pc, #592]	@ (80093dc <UART_SetConfig+0x2c8>)
 800918c:	4293      	cmp	r3, r2
 800918e:	d120      	bne.n	80091d2 <UART_SetConfig+0xbe>
 8009190:	4b93      	ldr	r3, [pc, #588]	@ (80093e0 <UART_SetConfig+0x2cc>)
 8009192:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009196:	f003 0303 	and.w	r3, r3, #3
 800919a:	2b03      	cmp	r3, #3
 800919c:	d816      	bhi.n	80091cc <UART_SetConfig+0xb8>
 800919e:	a201      	add	r2, pc, #4	@ (adr r2, 80091a4 <UART_SetConfig+0x90>)
 80091a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091a4:	080091b5 	.word	0x080091b5
 80091a8:	080091c1 	.word	0x080091c1
 80091ac:	080091bb 	.word	0x080091bb
 80091b0:	080091c7 	.word	0x080091c7
 80091b4:	2301      	movs	r3, #1
 80091b6:	77fb      	strb	r3, [r7, #31]
 80091b8:	e150      	b.n	800945c <UART_SetConfig+0x348>
 80091ba:	2302      	movs	r3, #2
 80091bc:	77fb      	strb	r3, [r7, #31]
 80091be:	e14d      	b.n	800945c <UART_SetConfig+0x348>
 80091c0:	2304      	movs	r3, #4
 80091c2:	77fb      	strb	r3, [r7, #31]
 80091c4:	e14a      	b.n	800945c <UART_SetConfig+0x348>
 80091c6:	2308      	movs	r3, #8
 80091c8:	77fb      	strb	r3, [r7, #31]
 80091ca:	e147      	b.n	800945c <UART_SetConfig+0x348>
 80091cc:	2310      	movs	r3, #16
 80091ce:	77fb      	strb	r3, [r7, #31]
 80091d0:	e144      	b.n	800945c <UART_SetConfig+0x348>
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	4a83      	ldr	r2, [pc, #524]	@ (80093e4 <UART_SetConfig+0x2d0>)
 80091d8:	4293      	cmp	r3, r2
 80091da:	d132      	bne.n	8009242 <UART_SetConfig+0x12e>
 80091dc:	4b80      	ldr	r3, [pc, #512]	@ (80093e0 <UART_SetConfig+0x2cc>)
 80091de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80091e2:	f003 030c 	and.w	r3, r3, #12
 80091e6:	2b0c      	cmp	r3, #12
 80091e8:	d828      	bhi.n	800923c <UART_SetConfig+0x128>
 80091ea:	a201      	add	r2, pc, #4	@ (adr r2, 80091f0 <UART_SetConfig+0xdc>)
 80091ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091f0:	08009225 	.word	0x08009225
 80091f4:	0800923d 	.word	0x0800923d
 80091f8:	0800923d 	.word	0x0800923d
 80091fc:	0800923d 	.word	0x0800923d
 8009200:	08009231 	.word	0x08009231
 8009204:	0800923d 	.word	0x0800923d
 8009208:	0800923d 	.word	0x0800923d
 800920c:	0800923d 	.word	0x0800923d
 8009210:	0800922b 	.word	0x0800922b
 8009214:	0800923d 	.word	0x0800923d
 8009218:	0800923d 	.word	0x0800923d
 800921c:	0800923d 	.word	0x0800923d
 8009220:	08009237 	.word	0x08009237
 8009224:	2300      	movs	r3, #0
 8009226:	77fb      	strb	r3, [r7, #31]
 8009228:	e118      	b.n	800945c <UART_SetConfig+0x348>
 800922a:	2302      	movs	r3, #2
 800922c:	77fb      	strb	r3, [r7, #31]
 800922e:	e115      	b.n	800945c <UART_SetConfig+0x348>
 8009230:	2304      	movs	r3, #4
 8009232:	77fb      	strb	r3, [r7, #31]
 8009234:	e112      	b.n	800945c <UART_SetConfig+0x348>
 8009236:	2308      	movs	r3, #8
 8009238:	77fb      	strb	r3, [r7, #31]
 800923a:	e10f      	b.n	800945c <UART_SetConfig+0x348>
 800923c:	2310      	movs	r3, #16
 800923e:	77fb      	strb	r3, [r7, #31]
 8009240:	e10c      	b.n	800945c <UART_SetConfig+0x348>
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	4a68      	ldr	r2, [pc, #416]	@ (80093e8 <UART_SetConfig+0x2d4>)
 8009248:	4293      	cmp	r3, r2
 800924a:	d120      	bne.n	800928e <UART_SetConfig+0x17a>
 800924c:	4b64      	ldr	r3, [pc, #400]	@ (80093e0 <UART_SetConfig+0x2cc>)
 800924e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009252:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009256:	2b30      	cmp	r3, #48	@ 0x30
 8009258:	d013      	beq.n	8009282 <UART_SetConfig+0x16e>
 800925a:	2b30      	cmp	r3, #48	@ 0x30
 800925c:	d814      	bhi.n	8009288 <UART_SetConfig+0x174>
 800925e:	2b20      	cmp	r3, #32
 8009260:	d009      	beq.n	8009276 <UART_SetConfig+0x162>
 8009262:	2b20      	cmp	r3, #32
 8009264:	d810      	bhi.n	8009288 <UART_SetConfig+0x174>
 8009266:	2b00      	cmp	r3, #0
 8009268:	d002      	beq.n	8009270 <UART_SetConfig+0x15c>
 800926a:	2b10      	cmp	r3, #16
 800926c:	d006      	beq.n	800927c <UART_SetConfig+0x168>
 800926e:	e00b      	b.n	8009288 <UART_SetConfig+0x174>
 8009270:	2300      	movs	r3, #0
 8009272:	77fb      	strb	r3, [r7, #31]
 8009274:	e0f2      	b.n	800945c <UART_SetConfig+0x348>
 8009276:	2302      	movs	r3, #2
 8009278:	77fb      	strb	r3, [r7, #31]
 800927a:	e0ef      	b.n	800945c <UART_SetConfig+0x348>
 800927c:	2304      	movs	r3, #4
 800927e:	77fb      	strb	r3, [r7, #31]
 8009280:	e0ec      	b.n	800945c <UART_SetConfig+0x348>
 8009282:	2308      	movs	r3, #8
 8009284:	77fb      	strb	r3, [r7, #31]
 8009286:	e0e9      	b.n	800945c <UART_SetConfig+0x348>
 8009288:	2310      	movs	r3, #16
 800928a:	77fb      	strb	r3, [r7, #31]
 800928c:	e0e6      	b.n	800945c <UART_SetConfig+0x348>
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	4a56      	ldr	r2, [pc, #344]	@ (80093ec <UART_SetConfig+0x2d8>)
 8009294:	4293      	cmp	r3, r2
 8009296:	d120      	bne.n	80092da <UART_SetConfig+0x1c6>
 8009298:	4b51      	ldr	r3, [pc, #324]	@ (80093e0 <UART_SetConfig+0x2cc>)
 800929a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800929e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80092a2:	2bc0      	cmp	r3, #192	@ 0xc0
 80092a4:	d013      	beq.n	80092ce <UART_SetConfig+0x1ba>
 80092a6:	2bc0      	cmp	r3, #192	@ 0xc0
 80092a8:	d814      	bhi.n	80092d4 <UART_SetConfig+0x1c0>
 80092aa:	2b80      	cmp	r3, #128	@ 0x80
 80092ac:	d009      	beq.n	80092c2 <UART_SetConfig+0x1ae>
 80092ae:	2b80      	cmp	r3, #128	@ 0x80
 80092b0:	d810      	bhi.n	80092d4 <UART_SetConfig+0x1c0>
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d002      	beq.n	80092bc <UART_SetConfig+0x1a8>
 80092b6:	2b40      	cmp	r3, #64	@ 0x40
 80092b8:	d006      	beq.n	80092c8 <UART_SetConfig+0x1b4>
 80092ba:	e00b      	b.n	80092d4 <UART_SetConfig+0x1c0>
 80092bc:	2300      	movs	r3, #0
 80092be:	77fb      	strb	r3, [r7, #31]
 80092c0:	e0cc      	b.n	800945c <UART_SetConfig+0x348>
 80092c2:	2302      	movs	r3, #2
 80092c4:	77fb      	strb	r3, [r7, #31]
 80092c6:	e0c9      	b.n	800945c <UART_SetConfig+0x348>
 80092c8:	2304      	movs	r3, #4
 80092ca:	77fb      	strb	r3, [r7, #31]
 80092cc:	e0c6      	b.n	800945c <UART_SetConfig+0x348>
 80092ce:	2308      	movs	r3, #8
 80092d0:	77fb      	strb	r3, [r7, #31]
 80092d2:	e0c3      	b.n	800945c <UART_SetConfig+0x348>
 80092d4:	2310      	movs	r3, #16
 80092d6:	77fb      	strb	r3, [r7, #31]
 80092d8:	e0c0      	b.n	800945c <UART_SetConfig+0x348>
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	4a44      	ldr	r2, [pc, #272]	@ (80093f0 <UART_SetConfig+0x2dc>)
 80092e0:	4293      	cmp	r3, r2
 80092e2:	d125      	bne.n	8009330 <UART_SetConfig+0x21c>
 80092e4:	4b3e      	ldr	r3, [pc, #248]	@ (80093e0 <UART_SetConfig+0x2cc>)
 80092e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80092ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80092f2:	d017      	beq.n	8009324 <UART_SetConfig+0x210>
 80092f4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80092f8:	d817      	bhi.n	800932a <UART_SetConfig+0x216>
 80092fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80092fe:	d00b      	beq.n	8009318 <UART_SetConfig+0x204>
 8009300:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009304:	d811      	bhi.n	800932a <UART_SetConfig+0x216>
 8009306:	2b00      	cmp	r3, #0
 8009308:	d003      	beq.n	8009312 <UART_SetConfig+0x1fe>
 800930a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800930e:	d006      	beq.n	800931e <UART_SetConfig+0x20a>
 8009310:	e00b      	b.n	800932a <UART_SetConfig+0x216>
 8009312:	2300      	movs	r3, #0
 8009314:	77fb      	strb	r3, [r7, #31]
 8009316:	e0a1      	b.n	800945c <UART_SetConfig+0x348>
 8009318:	2302      	movs	r3, #2
 800931a:	77fb      	strb	r3, [r7, #31]
 800931c:	e09e      	b.n	800945c <UART_SetConfig+0x348>
 800931e:	2304      	movs	r3, #4
 8009320:	77fb      	strb	r3, [r7, #31]
 8009322:	e09b      	b.n	800945c <UART_SetConfig+0x348>
 8009324:	2308      	movs	r3, #8
 8009326:	77fb      	strb	r3, [r7, #31]
 8009328:	e098      	b.n	800945c <UART_SetConfig+0x348>
 800932a:	2310      	movs	r3, #16
 800932c:	77fb      	strb	r3, [r7, #31]
 800932e:	e095      	b.n	800945c <UART_SetConfig+0x348>
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	4a2f      	ldr	r2, [pc, #188]	@ (80093f4 <UART_SetConfig+0x2e0>)
 8009336:	4293      	cmp	r3, r2
 8009338:	d125      	bne.n	8009386 <UART_SetConfig+0x272>
 800933a:	4b29      	ldr	r3, [pc, #164]	@ (80093e0 <UART_SetConfig+0x2cc>)
 800933c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009340:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009344:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009348:	d017      	beq.n	800937a <UART_SetConfig+0x266>
 800934a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800934e:	d817      	bhi.n	8009380 <UART_SetConfig+0x26c>
 8009350:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009354:	d00b      	beq.n	800936e <UART_SetConfig+0x25a>
 8009356:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800935a:	d811      	bhi.n	8009380 <UART_SetConfig+0x26c>
 800935c:	2b00      	cmp	r3, #0
 800935e:	d003      	beq.n	8009368 <UART_SetConfig+0x254>
 8009360:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009364:	d006      	beq.n	8009374 <UART_SetConfig+0x260>
 8009366:	e00b      	b.n	8009380 <UART_SetConfig+0x26c>
 8009368:	2301      	movs	r3, #1
 800936a:	77fb      	strb	r3, [r7, #31]
 800936c:	e076      	b.n	800945c <UART_SetConfig+0x348>
 800936e:	2302      	movs	r3, #2
 8009370:	77fb      	strb	r3, [r7, #31]
 8009372:	e073      	b.n	800945c <UART_SetConfig+0x348>
 8009374:	2304      	movs	r3, #4
 8009376:	77fb      	strb	r3, [r7, #31]
 8009378:	e070      	b.n	800945c <UART_SetConfig+0x348>
 800937a:	2308      	movs	r3, #8
 800937c:	77fb      	strb	r3, [r7, #31]
 800937e:	e06d      	b.n	800945c <UART_SetConfig+0x348>
 8009380:	2310      	movs	r3, #16
 8009382:	77fb      	strb	r3, [r7, #31]
 8009384:	e06a      	b.n	800945c <UART_SetConfig+0x348>
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	4a1b      	ldr	r2, [pc, #108]	@ (80093f8 <UART_SetConfig+0x2e4>)
 800938c:	4293      	cmp	r3, r2
 800938e:	d138      	bne.n	8009402 <UART_SetConfig+0x2ee>
 8009390:	4b13      	ldr	r3, [pc, #76]	@ (80093e0 <UART_SetConfig+0x2cc>)
 8009392:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009396:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800939a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800939e:	d017      	beq.n	80093d0 <UART_SetConfig+0x2bc>
 80093a0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80093a4:	d82a      	bhi.n	80093fc <UART_SetConfig+0x2e8>
 80093a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80093aa:	d00b      	beq.n	80093c4 <UART_SetConfig+0x2b0>
 80093ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80093b0:	d824      	bhi.n	80093fc <UART_SetConfig+0x2e8>
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d003      	beq.n	80093be <UART_SetConfig+0x2aa>
 80093b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80093ba:	d006      	beq.n	80093ca <UART_SetConfig+0x2b6>
 80093bc:	e01e      	b.n	80093fc <UART_SetConfig+0x2e8>
 80093be:	2300      	movs	r3, #0
 80093c0:	77fb      	strb	r3, [r7, #31]
 80093c2:	e04b      	b.n	800945c <UART_SetConfig+0x348>
 80093c4:	2302      	movs	r3, #2
 80093c6:	77fb      	strb	r3, [r7, #31]
 80093c8:	e048      	b.n	800945c <UART_SetConfig+0x348>
 80093ca:	2304      	movs	r3, #4
 80093cc:	77fb      	strb	r3, [r7, #31]
 80093ce:	e045      	b.n	800945c <UART_SetConfig+0x348>
 80093d0:	2308      	movs	r3, #8
 80093d2:	77fb      	strb	r3, [r7, #31]
 80093d4:	e042      	b.n	800945c <UART_SetConfig+0x348>
 80093d6:	bf00      	nop
 80093d8:	efff69f3 	.word	0xefff69f3
 80093dc:	40011000 	.word	0x40011000
 80093e0:	40023800 	.word	0x40023800
 80093e4:	40004400 	.word	0x40004400
 80093e8:	40004800 	.word	0x40004800
 80093ec:	40004c00 	.word	0x40004c00
 80093f0:	40005000 	.word	0x40005000
 80093f4:	40011400 	.word	0x40011400
 80093f8:	40007800 	.word	0x40007800
 80093fc:	2310      	movs	r3, #16
 80093fe:	77fb      	strb	r3, [r7, #31]
 8009400:	e02c      	b.n	800945c <UART_SetConfig+0x348>
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	4a72      	ldr	r2, [pc, #456]	@ (80095d0 <UART_SetConfig+0x4bc>)
 8009408:	4293      	cmp	r3, r2
 800940a:	d125      	bne.n	8009458 <UART_SetConfig+0x344>
 800940c:	4b71      	ldr	r3, [pc, #452]	@ (80095d4 <UART_SetConfig+0x4c0>)
 800940e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009412:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8009416:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800941a:	d017      	beq.n	800944c <UART_SetConfig+0x338>
 800941c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8009420:	d817      	bhi.n	8009452 <UART_SetConfig+0x33e>
 8009422:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009426:	d00b      	beq.n	8009440 <UART_SetConfig+0x32c>
 8009428:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800942c:	d811      	bhi.n	8009452 <UART_SetConfig+0x33e>
 800942e:	2b00      	cmp	r3, #0
 8009430:	d003      	beq.n	800943a <UART_SetConfig+0x326>
 8009432:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009436:	d006      	beq.n	8009446 <UART_SetConfig+0x332>
 8009438:	e00b      	b.n	8009452 <UART_SetConfig+0x33e>
 800943a:	2300      	movs	r3, #0
 800943c:	77fb      	strb	r3, [r7, #31]
 800943e:	e00d      	b.n	800945c <UART_SetConfig+0x348>
 8009440:	2302      	movs	r3, #2
 8009442:	77fb      	strb	r3, [r7, #31]
 8009444:	e00a      	b.n	800945c <UART_SetConfig+0x348>
 8009446:	2304      	movs	r3, #4
 8009448:	77fb      	strb	r3, [r7, #31]
 800944a:	e007      	b.n	800945c <UART_SetConfig+0x348>
 800944c:	2308      	movs	r3, #8
 800944e:	77fb      	strb	r3, [r7, #31]
 8009450:	e004      	b.n	800945c <UART_SetConfig+0x348>
 8009452:	2310      	movs	r3, #16
 8009454:	77fb      	strb	r3, [r7, #31]
 8009456:	e001      	b.n	800945c <UART_SetConfig+0x348>
 8009458:	2310      	movs	r3, #16
 800945a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	69db      	ldr	r3, [r3, #28]
 8009460:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009464:	d15b      	bne.n	800951e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8009466:	7ffb      	ldrb	r3, [r7, #31]
 8009468:	2b08      	cmp	r3, #8
 800946a:	d828      	bhi.n	80094be <UART_SetConfig+0x3aa>
 800946c:	a201      	add	r2, pc, #4	@ (adr r2, 8009474 <UART_SetConfig+0x360>)
 800946e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009472:	bf00      	nop
 8009474:	08009499 	.word	0x08009499
 8009478:	080094a1 	.word	0x080094a1
 800947c:	080094a9 	.word	0x080094a9
 8009480:	080094bf 	.word	0x080094bf
 8009484:	080094af 	.word	0x080094af
 8009488:	080094bf 	.word	0x080094bf
 800948c:	080094bf 	.word	0x080094bf
 8009490:	080094bf 	.word	0x080094bf
 8009494:	080094b7 	.word	0x080094b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009498:	f7fd fa36 	bl	8006908 <HAL_RCC_GetPCLK1Freq>
 800949c:	61b8      	str	r0, [r7, #24]
        break;
 800949e:	e013      	b.n	80094c8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80094a0:	f7fd fa46 	bl	8006930 <HAL_RCC_GetPCLK2Freq>
 80094a4:	61b8      	str	r0, [r7, #24]
        break;
 80094a6:	e00f      	b.n	80094c8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80094a8:	4b4b      	ldr	r3, [pc, #300]	@ (80095d8 <UART_SetConfig+0x4c4>)
 80094aa:	61bb      	str	r3, [r7, #24]
        break;
 80094ac:	e00c      	b.n	80094c8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80094ae:	f7fd f959 	bl	8006764 <HAL_RCC_GetSysClockFreq>
 80094b2:	61b8      	str	r0, [r7, #24]
        break;
 80094b4:	e008      	b.n	80094c8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80094b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80094ba:	61bb      	str	r3, [r7, #24]
        break;
 80094bc:	e004      	b.n	80094c8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80094be:	2300      	movs	r3, #0
 80094c0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80094c2:	2301      	movs	r3, #1
 80094c4:	77bb      	strb	r3, [r7, #30]
        break;
 80094c6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80094c8:	69bb      	ldr	r3, [r7, #24]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d074      	beq.n	80095b8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80094ce:	69bb      	ldr	r3, [r7, #24]
 80094d0:	005a      	lsls	r2, r3, #1
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	685b      	ldr	r3, [r3, #4]
 80094d6:	085b      	lsrs	r3, r3, #1
 80094d8:	441a      	add	r2, r3
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	685b      	ldr	r3, [r3, #4]
 80094de:	fbb2 f3f3 	udiv	r3, r2, r3
 80094e2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80094e4:	693b      	ldr	r3, [r7, #16]
 80094e6:	2b0f      	cmp	r3, #15
 80094e8:	d916      	bls.n	8009518 <UART_SetConfig+0x404>
 80094ea:	693b      	ldr	r3, [r7, #16]
 80094ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80094f0:	d212      	bcs.n	8009518 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80094f2:	693b      	ldr	r3, [r7, #16]
 80094f4:	b29b      	uxth	r3, r3
 80094f6:	f023 030f 	bic.w	r3, r3, #15
 80094fa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80094fc:	693b      	ldr	r3, [r7, #16]
 80094fe:	085b      	lsrs	r3, r3, #1
 8009500:	b29b      	uxth	r3, r3
 8009502:	f003 0307 	and.w	r3, r3, #7
 8009506:	b29a      	uxth	r2, r3
 8009508:	89fb      	ldrh	r3, [r7, #14]
 800950a:	4313      	orrs	r3, r2
 800950c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	89fa      	ldrh	r2, [r7, #14]
 8009514:	60da      	str	r2, [r3, #12]
 8009516:	e04f      	b.n	80095b8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009518:	2301      	movs	r3, #1
 800951a:	77bb      	strb	r3, [r7, #30]
 800951c:	e04c      	b.n	80095b8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800951e:	7ffb      	ldrb	r3, [r7, #31]
 8009520:	2b08      	cmp	r3, #8
 8009522:	d828      	bhi.n	8009576 <UART_SetConfig+0x462>
 8009524:	a201      	add	r2, pc, #4	@ (adr r2, 800952c <UART_SetConfig+0x418>)
 8009526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800952a:	bf00      	nop
 800952c:	08009551 	.word	0x08009551
 8009530:	08009559 	.word	0x08009559
 8009534:	08009561 	.word	0x08009561
 8009538:	08009577 	.word	0x08009577
 800953c:	08009567 	.word	0x08009567
 8009540:	08009577 	.word	0x08009577
 8009544:	08009577 	.word	0x08009577
 8009548:	08009577 	.word	0x08009577
 800954c:	0800956f 	.word	0x0800956f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009550:	f7fd f9da 	bl	8006908 <HAL_RCC_GetPCLK1Freq>
 8009554:	61b8      	str	r0, [r7, #24]
        break;
 8009556:	e013      	b.n	8009580 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009558:	f7fd f9ea 	bl	8006930 <HAL_RCC_GetPCLK2Freq>
 800955c:	61b8      	str	r0, [r7, #24]
        break;
 800955e:	e00f      	b.n	8009580 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009560:	4b1d      	ldr	r3, [pc, #116]	@ (80095d8 <UART_SetConfig+0x4c4>)
 8009562:	61bb      	str	r3, [r7, #24]
        break;
 8009564:	e00c      	b.n	8009580 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009566:	f7fd f8fd 	bl	8006764 <HAL_RCC_GetSysClockFreq>
 800956a:	61b8      	str	r0, [r7, #24]
        break;
 800956c:	e008      	b.n	8009580 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800956e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009572:	61bb      	str	r3, [r7, #24]
        break;
 8009574:	e004      	b.n	8009580 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8009576:	2300      	movs	r3, #0
 8009578:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800957a:	2301      	movs	r3, #1
 800957c:	77bb      	strb	r3, [r7, #30]
        break;
 800957e:	bf00      	nop
    }

    if (pclk != 0U)
 8009580:	69bb      	ldr	r3, [r7, #24]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d018      	beq.n	80095b8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	685b      	ldr	r3, [r3, #4]
 800958a:	085a      	lsrs	r2, r3, #1
 800958c:	69bb      	ldr	r3, [r7, #24]
 800958e:	441a      	add	r2, r3
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	685b      	ldr	r3, [r3, #4]
 8009594:	fbb2 f3f3 	udiv	r3, r2, r3
 8009598:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800959a:	693b      	ldr	r3, [r7, #16]
 800959c:	2b0f      	cmp	r3, #15
 800959e:	d909      	bls.n	80095b4 <UART_SetConfig+0x4a0>
 80095a0:	693b      	ldr	r3, [r7, #16]
 80095a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80095a6:	d205      	bcs.n	80095b4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80095a8:	693b      	ldr	r3, [r7, #16]
 80095aa:	b29a      	uxth	r2, r3
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	60da      	str	r2, [r3, #12]
 80095b2:	e001      	b.n	80095b8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80095b4:	2301      	movs	r3, #1
 80095b6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2200      	movs	r2, #0
 80095bc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2200      	movs	r2, #0
 80095c2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80095c4:	7fbb      	ldrb	r3, [r7, #30]
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	3720      	adds	r7, #32
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}
 80095ce:	bf00      	nop
 80095d0:	40007c00 	.word	0x40007c00
 80095d4:	40023800 	.word	0x40023800
 80095d8:	00f42400 	.word	0x00f42400

080095dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80095dc:	b480      	push	{r7}
 80095de:	b083      	sub	sp, #12
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095e8:	f003 0308 	and.w	r3, r3, #8
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d00a      	beq.n	8009606 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	685b      	ldr	r3, [r3, #4]
 80095f6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	430a      	orrs	r2, r1
 8009604:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800960a:	f003 0301 	and.w	r3, r3, #1
 800960e:	2b00      	cmp	r3, #0
 8009610:	d00a      	beq.n	8009628 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	685b      	ldr	r3, [r3, #4]
 8009618:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	430a      	orrs	r2, r1
 8009626:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800962c:	f003 0302 	and.w	r3, r3, #2
 8009630:	2b00      	cmp	r3, #0
 8009632:	d00a      	beq.n	800964a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	685b      	ldr	r3, [r3, #4]
 800963a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	430a      	orrs	r2, r1
 8009648:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800964e:	f003 0304 	and.w	r3, r3, #4
 8009652:	2b00      	cmp	r3, #0
 8009654:	d00a      	beq.n	800966c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	685b      	ldr	r3, [r3, #4]
 800965c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	430a      	orrs	r2, r1
 800966a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009670:	f003 0310 	and.w	r3, r3, #16
 8009674:	2b00      	cmp	r3, #0
 8009676:	d00a      	beq.n	800968e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	689b      	ldr	r3, [r3, #8]
 800967e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	430a      	orrs	r2, r1
 800968c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009692:	f003 0320 	and.w	r3, r3, #32
 8009696:	2b00      	cmp	r3, #0
 8009698:	d00a      	beq.n	80096b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	689b      	ldr	r3, [r3, #8]
 80096a0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	430a      	orrs	r2, r1
 80096ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d01a      	beq.n	80096f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	685b      	ldr	r3, [r3, #4]
 80096c2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	430a      	orrs	r2, r1
 80096d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80096da:	d10a      	bne.n	80096f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	685b      	ldr	r3, [r3, #4]
 80096e2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	430a      	orrs	r2, r1
 80096f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d00a      	beq.n	8009714 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	685b      	ldr	r3, [r3, #4]
 8009704:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	430a      	orrs	r2, r1
 8009712:	605a      	str	r2, [r3, #4]
  }
}
 8009714:	bf00      	nop
 8009716:	370c      	adds	r7, #12
 8009718:	46bd      	mov	sp, r7
 800971a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971e:	4770      	bx	lr

08009720 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b08c      	sub	sp, #48	@ 0x30
 8009724:	af02      	add	r7, sp, #8
 8009726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2200      	movs	r2, #0
 800972c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009730:	f7fa fd88 	bl	8004244 <HAL_GetTick>
 8009734:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f003 0308 	and.w	r3, r3, #8
 8009740:	2b08      	cmp	r3, #8
 8009742:	d12e      	bne.n	80097a2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009744:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009748:	9300      	str	r3, [sp, #0]
 800974a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800974c:	2200      	movs	r2, #0
 800974e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009752:	6878      	ldr	r0, [r7, #4]
 8009754:	f000 f83b 	bl	80097ce <UART_WaitOnFlagUntilTimeout>
 8009758:	4603      	mov	r3, r0
 800975a:	2b00      	cmp	r3, #0
 800975c:	d021      	beq.n	80097a2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009764:	693b      	ldr	r3, [r7, #16]
 8009766:	e853 3f00 	ldrex	r3, [r3]
 800976a:	60fb      	str	r3, [r7, #12]
   return(result);
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009772:	623b      	str	r3, [r7, #32]
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	461a      	mov	r2, r3
 800977a:	6a3b      	ldr	r3, [r7, #32]
 800977c:	61fb      	str	r3, [r7, #28]
 800977e:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009780:	69b9      	ldr	r1, [r7, #24]
 8009782:	69fa      	ldr	r2, [r7, #28]
 8009784:	e841 2300 	strex	r3, r2, [r1]
 8009788:	617b      	str	r3, [r7, #20]
   return(result);
 800978a:	697b      	ldr	r3, [r7, #20]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d1e6      	bne.n	800975e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2220      	movs	r2, #32
 8009794:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	2200      	movs	r2, #0
 800979a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800979e:	2303      	movs	r3, #3
 80097a0:	e011      	b.n	80097c6 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2220      	movs	r2, #32
 80097a6:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2220      	movs	r2, #32
 80097ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2200      	movs	r2, #0
 80097b4:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	2200      	movs	r2, #0
 80097ba:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2200      	movs	r2, #0
 80097c0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80097c4:	2300      	movs	r3, #0
}
 80097c6:	4618      	mov	r0, r3
 80097c8:	3728      	adds	r7, #40	@ 0x28
 80097ca:	46bd      	mov	sp, r7
 80097cc:	bd80      	pop	{r7, pc}

080097ce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80097ce:	b580      	push	{r7, lr}
 80097d0:	b084      	sub	sp, #16
 80097d2:	af00      	add	r7, sp, #0
 80097d4:	60f8      	str	r0, [r7, #12]
 80097d6:	60b9      	str	r1, [r7, #8]
 80097d8:	603b      	str	r3, [r7, #0]
 80097da:	4613      	mov	r3, r2
 80097dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80097de:	e04f      	b.n	8009880 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80097e0:	69bb      	ldr	r3, [r7, #24]
 80097e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097e6:	d04b      	beq.n	8009880 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80097e8:	f7fa fd2c 	bl	8004244 <HAL_GetTick>
 80097ec:	4602      	mov	r2, r0
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	1ad3      	subs	r3, r2, r3
 80097f2:	69ba      	ldr	r2, [r7, #24]
 80097f4:	429a      	cmp	r2, r3
 80097f6:	d302      	bcc.n	80097fe <UART_WaitOnFlagUntilTimeout+0x30>
 80097f8:	69bb      	ldr	r3, [r7, #24]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d101      	bne.n	8009802 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80097fe:	2303      	movs	r3, #3
 8009800:	e04e      	b.n	80098a0 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	f003 0304 	and.w	r3, r3, #4
 800980c:	2b00      	cmp	r3, #0
 800980e:	d037      	beq.n	8009880 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	2b80      	cmp	r3, #128	@ 0x80
 8009814:	d034      	beq.n	8009880 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009816:	68bb      	ldr	r3, [r7, #8]
 8009818:	2b40      	cmp	r3, #64	@ 0x40
 800981a:	d031      	beq.n	8009880 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	69db      	ldr	r3, [r3, #28]
 8009822:	f003 0308 	and.w	r3, r3, #8
 8009826:	2b08      	cmp	r3, #8
 8009828:	d110      	bne.n	800984c <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	2208      	movs	r2, #8
 8009830:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009832:	68f8      	ldr	r0, [r7, #12]
 8009834:	f000 f838 	bl	80098a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	2208      	movs	r2, #8
 800983c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	2200      	movs	r2, #0
 8009844:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8009848:	2301      	movs	r3, #1
 800984a:	e029      	b.n	80098a0 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	69db      	ldr	r3, [r3, #28]
 8009852:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009856:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800985a:	d111      	bne.n	8009880 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009864:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009866:	68f8      	ldr	r0, [r7, #12]
 8009868:	f000 f81e 	bl	80098a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	2220      	movs	r2, #32
 8009870:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	2200      	movs	r2, #0
 8009878:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800987c:	2303      	movs	r3, #3
 800987e:	e00f      	b.n	80098a0 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	69da      	ldr	r2, [r3, #28]
 8009886:	68bb      	ldr	r3, [r7, #8]
 8009888:	4013      	ands	r3, r2
 800988a:	68ba      	ldr	r2, [r7, #8]
 800988c:	429a      	cmp	r2, r3
 800988e:	bf0c      	ite	eq
 8009890:	2301      	moveq	r3, #1
 8009892:	2300      	movne	r3, #0
 8009894:	b2db      	uxtb	r3, r3
 8009896:	461a      	mov	r2, r3
 8009898:	79fb      	ldrb	r3, [r7, #7]
 800989a:	429a      	cmp	r2, r3
 800989c:	d0a0      	beq.n	80097e0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800989e:	2300      	movs	r3, #0
}
 80098a0:	4618      	mov	r0, r3
 80098a2:	3710      	adds	r7, #16
 80098a4:	46bd      	mov	sp, r7
 80098a6:	bd80      	pop	{r7, pc}

080098a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80098a8:	b480      	push	{r7}
 80098aa:	b095      	sub	sp, #84	@ 0x54
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098b8:	e853 3f00 	ldrex	r3, [r3]
 80098bc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80098be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80098c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	461a      	mov	r2, r3
 80098cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80098ce:	643b      	str	r3, [r7, #64]	@ 0x40
 80098d0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098d2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80098d4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80098d6:	e841 2300 	strex	r3, r2, [r1]
 80098da:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80098dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d1e6      	bne.n	80098b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	3308      	adds	r3, #8
 80098e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098ea:	6a3b      	ldr	r3, [r7, #32]
 80098ec:	e853 3f00 	ldrex	r3, [r3]
 80098f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80098f2:	69fb      	ldr	r3, [r7, #28]
 80098f4:	f023 0301 	bic.w	r3, r3, #1
 80098f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	3308      	adds	r3, #8
 8009900:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009902:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009904:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009906:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009908:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800990a:	e841 2300 	strex	r3, r2, [r1]
 800990e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009912:	2b00      	cmp	r3, #0
 8009914:	d1e5      	bne.n	80098e2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800991a:	2b01      	cmp	r3, #1
 800991c:	d118      	bne.n	8009950 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	e853 3f00 	ldrex	r3, [r3]
 800992a:	60bb      	str	r3, [r7, #8]
   return(result);
 800992c:	68bb      	ldr	r3, [r7, #8]
 800992e:	f023 0310 	bic.w	r3, r3, #16
 8009932:	647b      	str	r3, [r7, #68]	@ 0x44
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	461a      	mov	r2, r3
 800993a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800993c:	61bb      	str	r3, [r7, #24]
 800993e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009940:	6979      	ldr	r1, [r7, #20]
 8009942:	69ba      	ldr	r2, [r7, #24]
 8009944:	e841 2300 	strex	r3, r2, [r1]
 8009948:	613b      	str	r3, [r7, #16]
   return(result);
 800994a:	693b      	ldr	r3, [r7, #16]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d1e6      	bne.n	800991e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2220      	movs	r2, #32
 8009954:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2200      	movs	r2, #0
 800995c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2200      	movs	r2, #0
 8009962:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8009964:	bf00      	nop
 8009966:	3754      	adds	r7, #84	@ 0x54
 8009968:	46bd      	mov	sp, r7
 800996a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996e:	4770      	bx	lr

08009970 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8009970:	b084      	sub	sp, #16
 8009972:	b480      	push	{r7}
 8009974:	b085      	sub	sp, #20
 8009976:	af00      	add	r7, sp, #0
 8009978:	6078      	str	r0, [r7, #4]
 800997a:	f107 001c 	add.w	r0, r7, #28
 800997e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8009982:	2300      	movs	r3, #0
 8009984:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8009986:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8009988:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800998a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800998c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800998e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8009990:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8009992:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8009994:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8009996:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009998:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800999a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800999c:	68fa      	ldr	r2, [r7, #12]
 800999e:	4313      	orrs	r3, r2
 80099a0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	685a      	ldr	r2, [r3, #4]
 80099a6:	4b07      	ldr	r3, [pc, #28]	@ (80099c4 <SDMMC_Init+0x54>)
 80099a8:	4013      	ands	r3, r2
 80099aa:	68fa      	ldr	r2, [r7, #12]
 80099ac:	431a      	orrs	r2, r3
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80099b2:	2300      	movs	r3, #0
}
 80099b4:	4618      	mov	r0, r3
 80099b6:	3714      	adds	r7, #20
 80099b8:	46bd      	mov	sp, r7
 80099ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099be:	b004      	add	sp, #16
 80099c0:	4770      	bx	lr
 80099c2:	bf00      	nop
 80099c4:	ffff8100 	.word	0xffff8100

080099c8 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80099c8:	b480      	push	{r7}
 80099ca:	b083      	sub	sp, #12
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 80099d6:	4618      	mov	r0, r3
 80099d8:	370c      	adds	r7, #12
 80099da:	46bd      	mov	sp, r7
 80099dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e0:	4770      	bx	lr

080099e2 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 80099e2:	b480      	push	{r7}
 80099e4:	b083      	sub	sp, #12
 80099e6:	af00      	add	r7, sp, #0
 80099e8:	6078      	str	r0, [r7, #4]
 80099ea:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	681a      	ldr	r2, [r3, #0]
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 80099f6:	2300      	movs	r3, #0
}
 80099f8:	4618      	mov	r0, r3
 80099fa:	370c      	adds	r7, #12
 80099fc:	46bd      	mov	sp, r7
 80099fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a02:	4770      	bx	lr

08009a04 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8009a04:	b480      	push	{r7}
 8009a06:	b083      	sub	sp, #12
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2203      	movs	r2, #3
 8009a10:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8009a12:	2300      	movs	r3, #0
}
 8009a14:	4618      	mov	r0, r3
 8009a16:	370c      	adds	r7, #12
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1e:	4770      	bx	lr

08009a20 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8009a20:	b480      	push	{r7}
 8009a22:	b083      	sub	sp, #12
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	f003 0303 	and.w	r3, r3, #3
}
 8009a30:	4618      	mov	r0, r3
 8009a32:	370c      	adds	r7, #12
 8009a34:	46bd      	mov	sp, r7
 8009a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3a:	4770      	bx	lr

08009a3c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8009a3c:	b480      	push	{r7}
 8009a3e:	b085      	sub	sp, #20
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
 8009a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009a46:	2300      	movs	r3, #0
 8009a48:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	681a      	ldr	r2, [r3, #0]
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009a5a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8009a60:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8009a66:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009a68:	68fa      	ldr	r2, [r7, #12]
 8009a6a:	4313      	orrs	r3, r2
 8009a6c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	68da      	ldr	r2, [r3, #12]
 8009a72:	4b06      	ldr	r3, [pc, #24]	@ (8009a8c <SDMMC_SendCommand+0x50>)
 8009a74:	4013      	ands	r3, r2
 8009a76:	68fa      	ldr	r2, [r7, #12]
 8009a78:	431a      	orrs	r2, r3
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8009a7e:	2300      	movs	r3, #0
}
 8009a80:	4618      	mov	r0, r3
 8009a82:	3714      	adds	r7, #20
 8009a84:	46bd      	mov	sp, r7
 8009a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8a:	4770      	bx	lr
 8009a8c:	fffff000 	.word	0xfffff000

08009a90 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8009a90:	b480      	push	{r7}
 8009a92:	b083      	sub	sp, #12
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	691b      	ldr	r3, [r3, #16]
 8009a9c:	b2db      	uxtb	r3, r3
}
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	370c      	adds	r7, #12
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa8:	4770      	bx	lr

08009aaa <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8009aaa:	b480      	push	{r7}
 8009aac:	b085      	sub	sp, #20
 8009aae:	af00      	add	r7, sp, #0
 8009ab0:	6078      	str	r0, [r7, #4]
 8009ab2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	3314      	adds	r3, #20
 8009ab8:	461a      	mov	r2, r3
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	4413      	add	r3, r2
 8009abe:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	681b      	ldr	r3, [r3, #0]
}  
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	3714      	adds	r7, #20
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ace:	4770      	bx	lr

08009ad0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8009ad0:	b480      	push	{r7}
 8009ad2:	b085      	sub	sp, #20
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
 8009ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009ada:	2300      	movs	r3, #0
 8009adc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	681a      	ldr	r2, [r3, #0]
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	685a      	ldr	r2, [r3, #4]
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009af6:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8009afc:	431a      	orrs	r2, r3
                       Data->DPSM);
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8009b02:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009b04:	68fa      	ldr	r2, [r7, #12]
 8009b06:	4313      	orrs	r3, r2
 8009b08:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b0e:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	431a      	orrs	r2, r3
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8009b1a:	2300      	movs	r3, #0

}
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	3714      	adds	r7, #20
 8009b20:	46bd      	mov	sp, r7
 8009b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b26:	4770      	bx	lr

08009b28 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b088      	sub	sp, #32
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
 8009b30:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009b36:	2310      	movs	r3, #16
 8009b38:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009b3a:	2340      	movs	r3, #64	@ 0x40
 8009b3c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009b3e:	2300      	movs	r3, #0
 8009b40:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009b42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009b46:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009b48:	f107 0308 	add.w	r3, r7, #8
 8009b4c:	4619      	mov	r1, r3
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f7ff ff74 	bl	8009a3c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8009b54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009b58:	2110      	movs	r1, #16
 8009b5a:	6878      	ldr	r0, [r7, #4]
 8009b5c:	f000 f9d6 	bl	8009f0c <SDMMC_GetCmdResp1>
 8009b60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b62:	69fb      	ldr	r3, [r7, #28]
}
 8009b64:	4618      	mov	r0, r3
 8009b66:	3720      	adds	r7, #32
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	bd80      	pop	{r7, pc}

08009b6c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b088      	sub	sp, #32
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
 8009b74:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8009b7a:	2311      	movs	r3, #17
 8009b7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009b7e:	2340      	movs	r3, #64	@ 0x40
 8009b80:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009b82:	2300      	movs	r3, #0
 8009b84:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009b86:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009b8a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009b8c:	f107 0308 	add.w	r3, r7, #8
 8009b90:	4619      	mov	r1, r3
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f7ff ff52 	bl	8009a3c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009b98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009b9c:	2111      	movs	r1, #17
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	f000 f9b4 	bl	8009f0c <SDMMC_GetCmdResp1>
 8009ba4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ba6:	69fb      	ldr	r3, [r7, #28]
}
 8009ba8:	4618      	mov	r0, r3
 8009baa:	3720      	adds	r7, #32
 8009bac:	46bd      	mov	sp, r7
 8009bae:	bd80      	pop	{r7, pc}

08009bb0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b088      	sub	sp, #32
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
 8009bb8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8009bbe:	2312      	movs	r3, #18
 8009bc0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009bc2:	2340      	movs	r3, #64	@ 0x40
 8009bc4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009bca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009bce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009bd0:	f107 0308 	add.w	r3, r7, #8
 8009bd4:	4619      	mov	r1, r3
 8009bd6:	6878      	ldr	r0, [r7, #4]
 8009bd8:	f7ff ff30 	bl	8009a3c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009bdc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009be0:	2112      	movs	r1, #18
 8009be2:	6878      	ldr	r0, [r7, #4]
 8009be4:	f000 f992 	bl	8009f0c <SDMMC_GetCmdResp1>
 8009be8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009bea:	69fb      	ldr	r3, [r7, #28]
}
 8009bec:	4618      	mov	r0, r3
 8009bee:	3720      	adds	r7, #32
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	bd80      	pop	{r7, pc}

08009bf4 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b088      	sub	sp, #32
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
 8009bfc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009c02:	2318      	movs	r3, #24
 8009c04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009c06:	2340      	movs	r3, #64	@ 0x40
 8009c08:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009c0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009c12:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009c14:	f107 0308 	add.w	r3, r7, #8
 8009c18:	4619      	mov	r1, r3
 8009c1a:	6878      	ldr	r0, [r7, #4]
 8009c1c:	f7ff ff0e 	bl	8009a3c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009c20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009c24:	2118      	movs	r1, #24
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	f000 f970 	bl	8009f0c <SDMMC_GetCmdResp1>
 8009c2c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c2e:	69fb      	ldr	r3, [r7, #28]
}
 8009c30:	4618      	mov	r0, r3
 8009c32:	3720      	adds	r7, #32
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bd80      	pop	{r7, pc}

08009c38 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b088      	sub	sp, #32
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
 8009c40:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8009c46:	2319      	movs	r3, #25
 8009c48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009c4a:	2340      	movs	r3, #64	@ 0x40
 8009c4c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009c4e:	2300      	movs	r3, #0
 8009c50:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009c52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009c56:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009c58:	f107 0308 	add.w	r3, r7, #8
 8009c5c:	4619      	mov	r1, r3
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	f7ff feec 	bl	8009a3c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009c64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009c68:	2119      	movs	r1, #25
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	f000 f94e 	bl	8009f0c <SDMMC_GetCmdResp1>
 8009c70:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c72:	69fb      	ldr	r3, [r7, #28]
}
 8009c74:	4618      	mov	r0, r3
 8009c76:	3720      	adds	r7, #32
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bd80      	pop	{r7, pc}

08009c7c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b088      	sub	sp, #32
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8009c84:	2300      	movs	r3, #0
 8009c86:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009c88:	230c      	movs	r3, #12
 8009c8a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009c8c:	2340      	movs	r3, #64	@ 0x40
 8009c8e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009c90:	2300      	movs	r3, #0
 8009c92:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009c94:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009c98:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009c9a:	f107 0308 	add.w	r3, r7, #8
 8009c9e:	4619      	mov	r1, r3
 8009ca0:	6878      	ldr	r0, [r7, #4]
 8009ca2:	f7ff fecb 	bl	8009a3c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8009ca6:	4a05      	ldr	r2, [pc, #20]	@ (8009cbc <SDMMC_CmdStopTransfer+0x40>)
 8009ca8:	210c      	movs	r1, #12
 8009caa:	6878      	ldr	r0, [r7, #4]
 8009cac:	f000 f92e 	bl	8009f0c <SDMMC_GetCmdResp1>
 8009cb0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009cb2:	69fb      	ldr	r3, [r7, #28]
}
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	3720      	adds	r7, #32
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bd80      	pop	{r7, pc}
 8009cbc:	05f5e100 	.word	0x05f5e100

08009cc0 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b08a      	sub	sp, #40	@ 0x28
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	60f8      	str	r0, [r7, #12]
 8009cc8:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009cd0:	2307      	movs	r3, #7
 8009cd2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009cd4:	2340      	movs	r3, #64	@ 0x40
 8009cd6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009cd8:	2300      	movs	r3, #0
 8009cda:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009cdc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009ce0:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009ce2:	f107 0310 	add.w	r3, r7, #16
 8009ce6:	4619      	mov	r1, r3
 8009ce8:	68f8      	ldr	r0, [r7, #12]
 8009cea:	f7ff fea7 	bl	8009a3c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8009cee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009cf2:	2107      	movs	r1, #7
 8009cf4:	68f8      	ldr	r0, [r7, #12]
 8009cf6:	f000 f909 	bl	8009f0c <SDMMC_GetCmdResp1>
 8009cfa:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8009cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009cfe:	4618      	mov	r0, r3
 8009d00:	3728      	adds	r7, #40	@ 0x28
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bd80      	pop	{r7, pc}

08009d06 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8009d06:	b580      	push	{r7, lr}
 8009d08:	b088      	sub	sp, #32
 8009d0a:	af00      	add	r7, sp, #0
 8009d0c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8009d0e:	2300      	movs	r3, #0
 8009d10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009d12:	2300      	movs	r3, #0
 8009d14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8009d16:	2300      	movs	r3, #0
 8009d18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009d1e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009d22:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009d24:	f107 0308 	add.w	r3, r7, #8
 8009d28:	4619      	mov	r1, r3
 8009d2a:	6878      	ldr	r0, [r7, #4]
 8009d2c:	f7ff fe86 	bl	8009a3c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8009d30:	6878      	ldr	r0, [r7, #4]
 8009d32:	f000 fb23 	bl	800a37c <SDMMC_GetCmdError>
 8009d36:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d38:	69fb      	ldr	r3, [r7, #28]
}
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	3720      	adds	r7, #32
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	bd80      	pop	{r7, pc}

08009d42 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8009d42:	b580      	push	{r7, lr}
 8009d44:	b088      	sub	sp, #32
 8009d46:	af00      	add	r7, sp, #0
 8009d48:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009d4a:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8009d4e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009d50:	2308      	movs	r3, #8
 8009d52:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009d54:	2340      	movs	r3, #64	@ 0x40
 8009d56:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009d58:	2300      	movs	r3, #0
 8009d5a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009d5c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009d60:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009d62:	f107 0308 	add.w	r3, r7, #8
 8009d66:	4619      	mov	r1, r3
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	f7ff fe67 	bl	8009a3c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f000 fab6 	bl	800a2e0 <SDMMC_GetCmdResp7>
 8009d74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d76:	69fb      	ldr	r3, [r7, #28]
}
 8009d78:	4618      	mov	r0, r3
 8009d7a:	3720      	adds	r7, #32
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	bd80      	pop	{r7, pc}

08009d80 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b088      	sub	sp, #32
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
 8009d88:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009d8e:	2337      	movs	r3, #55	@ 0x37
 8009d90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009d92:	2340      	movs	r3, #64	@ 0x40
 8009d94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009d96:	2300      	movs	r3, #0
 8009d98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009d9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009d9e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009da0:	f107 0308 	add.w	r3, r7, #8
 8009da4:	4619      	mov	r1, r3
 8009da6:	6878      	ldr	r0, [r7, #4]
 8009da8:	f7ff fe48 	bl	8009a3c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8009dac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009db0:	2137      	movs	r1, #55	@ 0x37
 8009db2:	6878      	ldr	r0, [r7, #4]
 8009db4:	f000 f8aa 	bl	8009f0c <SDMMC_GetCmdResp1>
 8009db8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009dba:	69fb      	ldr	r3, [r7, #28]
}
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	3720      	adds	r7, #32
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	bd80      	pop	{r7, pc}

08009dc4 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b088      	sub	sp, #32
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
 8009dcc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8009dce:	683a      	ldr	r2, [r7, #0]
 8009dd0:	4b0d      	ldr	r3, [pc, #52]	@ (8009e08 <SDMMC_CmdAppOperCommand+0x44>)
 8009dd2:	4313      	orrs	r3, r2
 8009dd4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009dd6:	2329      	movs	r3, #41	@ 0x29
 8009dd8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009dda:	2340      	movs	r3, #64	@ 0x40
 8009ddc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009dde:	2300      	movs	r3, #0
 8009de0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009de2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009de6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009de8:	f107 0308 	add.w	r3, r7, #8
 8009dec:	4619      	mov	r1, r3
 8009dee:	6878      	ldr	r0, [r7, #4]
 8009df0:	f7ff fe24 	bl	8009a3c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	f000 f9bf 	bl	800a178 <SDMMC_GetCmdResp3>
 8009dfa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009dfc:	69fb      	ldr	r3, [r7, #28]
}
 8009dfe:	4618      	mov	r0, r3
 8009e00:	3720      	adds	r7, #32
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bd80      	pop	{r7, pc}
 8009e06:	bf00      	nop
 8009e08:	80100000 	.word	0x80100000

08009e0c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b088      	sub	sp, #32
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8009e14:	2300      	movs	r3, #0
 8009e16:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009e18:	2302      	movs	r3, #2
 8009e1a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009e1c:	23c0      	movs	r3, #192	@ 0xc0
 8009e1e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009e20:	2300      	movs	r3, #0
 8009e22:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009e24:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009e28:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009e2a:	f107 0308 	add.w	r3, r7, #8
 8009e2e:	4619      	mov	r1, r3
 8009e30:	6878      	ldr	r0, [r7, #4]
 8009e32:	f7ff fe03 	bl	8009a3c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009e36:	6878      	ldr	r0, [r7, #4]
 8009e38:	f000 f956 	bl	800a0e8 <SDMMC_GetCmdResp2>
 8009e3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e3e:	69fb      	ldr	r3, [r7, #28]
}
 8009e40:	4618      	mov	r0, r3
 8009e42:	3720      	adds	r7, #32
 8009e44:	46bd      	mov	sp, r7
 8009e46:	bd80      	pop	{r7, pc}

08009e48 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b088      	sub	sp, #32
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
 8009e50:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009e56:	2309      	movs	r3, #9
 8009e58:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009e5a:	23c0      	movs	r3, #192	@ 0xc0
 8009e5c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009e5e:	2300      	movs	r3, #0
 8009e60:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009e62:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009e66:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009e68:	f107 0308 	add.w	r3, r7, #8
 8009e6c:	4619      	mov	r1, r3
 8009e6e:	6878      	ldr	r0, [r7, #4]
 8009e70:	f7ff fde4 	bl	8009a3c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009e74:	6878      	ldr	r0, [r7, #4]
 8009e76:	f000 f937 	bl	800a0e8 <SDMMC_GetCmdResp2>
 8009e7a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e7c:	69fb      	ldr	r3, [r7, #28]
}
 8009e7e:	4618      	mov	r0, r3
 8009e80:	3720      	adds	r7, #32
 8009e82:	46bd      	mov	sp, r7
 8009e84:	bd80      	pop	{r7, pc}

08009e86 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8009e86:	b580      	push	{r7, lr}
 8009e88:	b088      	sub	sp, #32
 8009e8a:	af00      	add	r7, sp, #0
 8009e8c:	6078      	str	r0, [r7, #4]
 8009e8e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009e90:	2300      	movs	r3, #0
 8009e92:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009e94:	2303      	movs	r3, #3
 8009e96:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009e98:	2340      	movs	r3, #64	@ 0x40
 8009e9a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009ea0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009ea4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009ea6:	f107 0308 	add.w	r3, r7, #8
 8009eaa:	4619      	mov	r1, r3
 8009eac:	6878      	ldr	r0, [r7, #4]
 8009eae:	f7ff fdc5 	bl	8009a3c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009eb2:	683a      	ldr	r2, [r7, #0]
 8009eb4:	2103      	movs	r1, #3
 8009eb6:	6878      	ldr	r0, [r7, #4]
 8009eb8:	f000 f99c 	bl	800a1f4 <SDMMC_GetCmdResp6>
 8009ebc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ebe:	69fb      	ldr	r3, [r7, #28]
}
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	3720      	adds	r7, #32
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	bd80      	pop	{r7, pc}

08009ec8 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b088      	sub	sp, #32
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
 8009ed0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009ed6:	230d      	movs	r3, #13
 8009ed8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009eda:	2340      	movs	r3, #64	@ 0x40
 8009edc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009ede:	2300      	movs	r3, #0
 8009ee0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009ee2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009ee6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009ee8:	f107 0308 	add.w	r3, r7, #8
 8009eec:	4619      	mov	r1, r3
 8009eee:	6878      	ldr	r0, [r7, #4]
 8009ef0:	f7ff fda4 	bl	8009a3c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8009ef4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009ef8:	210d      	movs	r1, #13
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	f000 f806 	bl	8009f0c <SDMMC_GetCmdResp1>
 8009f00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f02:	69fb      	ldr	r3, [r7, #28]
}
 8009f04:	4618      	mov	r0, r3
 8009f06:	3720      	adds	r7, #32
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	bd80      	pop	{r7, pc}

08009f0c <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b088      	sub	sp, #32
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	60f8      	str	r0, [r7, #12]
 8009f14:	460b      	mov	r3, r1
 8009f16:	607a      	str	r2, [r7, #4]
 8009f18:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009f1a:	4b70      	ldr	r3, [pc, #448]	@ (800a0dc <SDMMC_GetCmdResp1+0x1d0>)
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	4a70      	ldr	r2, [pc, #448]	@ (800a0e0 <SDMMC_GetCmdResp1+0x1d4>)
 8009f20:	fba2 2303 	umull	r2, r3, r2, r3
 8009f24:	0a5a      	lsrs	r2, r3, #9
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	fb02 f303 	mul.w	r3, r2, r3
 8009f2c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8009f2e:	69fb      	ldr	r3, [r7, #28]
 8009f30:	1e5a      	subs	r2, r3, #1
 8009f32:	61fa      	str	r2, [r7, #28]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d102      	bne.n	8009f3e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009f38:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009f3c:	e0c9      	b.n	800a0d2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f42:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009f44:	69bb      	ldr	r3, [r7, #24]
 8009f46:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d0ef      	beq.n	8009f2e <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009f4e:	69bb      	ldr	r3, [r7, #24]
 8009f50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d1ea      	bne.n	8009f2e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f5c:	f003 0304 	and.w	r3, r3, #4
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d004      	beq.n	8009f6e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	2204      	movs	r2, #4
 8009f68:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009f6a:	2304      	movs	r3, #4
 8009f6c:	e0b1      	b.n	800a0d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f72:	f003 0301 	and.w	r3, r3, #1
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d004      	beq.n	8009f84 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	2201      	movs	r2, #1
 8009f7e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009f80:	2301      	movs	r3, #1
 8009f82:	e0a6      	b.n	800a0d2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	22c5      	movs	r2, #197	@ 0xc5
 8009f88:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009f8a:	68f8      	ldr	r0, [r7, #12]
 8009f8c:	f7ff fd80 	bl	8009a90 <SDMMC_GetCommandResponse>
 8009f90:	4603      	mov	r3, r0
 8009f92:	461a      	mov	r2, r3
 8009f94:	7afb      	ldrb	r3, [r7, #11]
 8009f96:	4293      	cmp	r3, r2
 8009f98:	d001      	beq.n	8009f9e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009f9a:	2301      	movs	r3, #1
 8009f9c:	e099      	b.n	800a0d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009f9e:	2100      	movs	r1, #0
 8009fa0:	68f8      	ldr	r0, [r7, #12]
 8009fa2:	f7ff fd82 	bl	8009aaa <SDMMC_GetResponse>
 8009fa6:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009fa8:	697a      	ldr	r2, [r7, #20]
 8009faa:	4b4e      	ldr	r3, [pc, #312]	@ (800a0e4 <SDMMC_GetCmdResp1+0x1d8>)
 8009fac:	4013      	ands	r3, r2
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d101      	bne.n	8009fb6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	e08d      	b.n	800a0d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009fb6:	697b      	ldr	r3, [r7, #20]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	da02      	bge.n	8009fc2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009fbc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009fc0:	e087      	b.n	800a0d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009fc2:	697b      	ldr	r3, [r7, #20]
 8009fc4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d001      	beq.n	8009fd0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009fcc:	2340      	movs	r3, #64	@ 0x40
 8009fce:	e080      	b.n	800a0d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009fd0:	697b      	ldr	r3, [r7, #20]
 8009fd2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d001      	beq.n	8009fde <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009fda:	2380      	movs	r3, #128	@ 0x80
 8009fdc:	e079      	b.n	800a0d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009fde:	697b      	ldr	r3, [r7, #20]
 8009fe0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d002      	beq.n	8009fee <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009fe8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009fec:	e071      	b.n	800a0d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009fee:	697b      	ldr	r3, [r7, #20]
 8009ff0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d002      	beq.n	8009ffe <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009ff8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009ffc:	e069      	b.n	800a0d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009ffe:	697b      	ldr	r3, [r7, #20]
 800a000:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a004:	2b00      	cmp	r3, #0
 800a006:	d002      	beq.n	800a00e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a008:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a00c:	e061      	b.n	800a0d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a00e:	697b      	ldr	r3, [r7, #20]
 800a010:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a014:	2b00      	cmp	r3, #0
 800a016:	d002      	beq.n	800a01e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a018:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a01c:	e059      	b.n	800a0d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a01e:	697b      	ldr	r3, [r7, #20]
 800a020:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a024:	2b00      	cmp	r3, #0
 800a026:	d002      	beq.n	800a02e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a028:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a02c:	e051      	b.n	800a0d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a02e:	697b      	ldr	r3, [r7, #20]
 800a030:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a034:	2b00      	cmp	r3, #0
 800a036:	d002      	beq.n	800a03e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a038:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a03c:	e049      	b.n	800a0d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a03e:	697b      	ldr	r3, [r7, #20]
 800a040:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a044:	2b00      	cmp	r3, #0
 800a046:	d002      	beq.n	800a04e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a048:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800a04c:	e041      	b.n	800a0d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a04e:	697b      	ldr	r3, [r7, #20]
 800a050:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a054:	2b00      	cmp	r3, #0
 800a056:	d002      	beq.n	800a05e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800a058:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a05c:	e039      	b.n	800a0d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a05e:	697b      	ldr	r3, [r7, #20]
 800a060:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a064:	2b00      	cmp	r3, #0
 800a066:	d002      	beq.n	800a06e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a068:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800a06c:	e031      	b.n	800a0d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a06e:	697b      	ldr	r3, [r7, #20]
 800a070:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a074:	2b00      	cmp	r3, #0
 800a076:	d002      	beq.n	800a07e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a078:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800a07c:	e029      	b.n	800a0d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a07e:	697b      	ldr	r3, [r7, #20]
 800a080:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a084:	2b00      	cmp	r3, #0
 800a086:	d002      	beq.n	800a08e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a088:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a08c:	e021      	b.n	800a0d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a08e:	697b      	ldr	r3, [r7, #20]
 800a090:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a094:	2b00      	cmp	r3, #0
 800a096:	d002      	beq.n	800a09e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a098:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800a09c:	e019      	b.n	800a0d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a09e:	697b      	ldr	r3, [r7, #20]
 800a0a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d002      	beq.n	800a0ae <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a0a8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800a0ac:	e011      	b.n	800a0d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a0ae:	697b      	ldr	r3, [r7, #20]
 800a0b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d002      	beq.n	800a0be <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a0b8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800a0bc:	e009      	b.n	800a0d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a0be:	697b      	ldr	r3, [r7, #20]
 800a0c0:	f003 0308 	and.w	r3, r3, #8
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d002      	beq.n	800a0ce <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a0c8:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800a0cc:	e001      	b.n	800a0d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a0ce:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	3720      	adds	r7, #32
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}
 800a0da:	bf00      	nop
 800a0dc:	20000000 	.word	0x20000000
 800a0e0:	10624dd3 	.word	0x10624dd3
 800a0e4:	fdffe008 	.word	0xfdffe008

0800a0e8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800a0e8:	b480      	push	{r7}
 800a0ea:	b085      	sub	sp, #20
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a0f0:	4b1f      	ldr	r3, [pc, #124]	@ (800a170 <SDMMC_GetCmdResp2+0x88>)
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	4a1f      	ldr	r2, [pc, #124]	@ (800a174 <SDMMC_GetCmdResp2+0x8c>)
 800a0f6:	fba2 2303 	umull	r2, r3, r2, r3
 800a0fa:	0a5b      	lsrs	r3, r3, #9
 800a0fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a100:	fb02 f303 	mul.w	r3, r2, r3
 800a104:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	1e5a      	subs	r2, r3, #1
 800a10a:	60fa      	str	r2, [r7, #12]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d102      	bne.n	800a116 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a110:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a114:	e026      	b.n	800a164 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a11a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a11c:	68bb      	ldr	r3, [r7, #8]
 800a11e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a122:	2b00      	cmp	r3, #0
 800a124:	d0ef      	beq.n	800a106 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a126:	68bb      	ldr	r3, [r7, #8]
 800a128:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d1ea      	bne.n	800a106 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a134:	f003 0304 	and.w	r3, r3, #4
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d004      	beq.n	800a146 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	2204      	movs	r2, #4
 800a140:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a142:	2304      	movs	r3, #4
 800a144:	e00e      	b.n	800a164 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a14a:	f003 0301 	and.w	r3, r3, #1
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d004      	beq.n	800a15c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	2201      	movs	r2, #1
 800a156:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a158:	2301      	movs	r3, #1
 800a15a:	e003      	b.n	800a164 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	22c5      	movs	r2, #197	@ 0xc5
 800a160:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800a162:	2300      	movs	r3, #0
}
 800a164:	4618      	mov	r0, r3
 800a166:	3714      	adds	r7, #20
 800a168:	46bd      	mov	sp, r7
 800a16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16e:	4770      	bx	lr
 800a170:	20000000 	.word	0x20000000
 800a174:	10624dd3 	.word	0x10624dd3

0800a178 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800a178:	b480      	push	{r7}
 800a17a:	b085      	sub	sp, #20
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a180:	4b1a      	ldr	r3, [pc, #104]	@ (800a1ec <SDMMC_GetCmdResp3+0x74>)
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	4a1a      	ldr	r2, [pc, #104]	@ (800a1f0 <SDMMC_GetCmdResp3+0x78>)
 800a186:	fba2 2303 	umull	r2, r3, r2, r3
 800a18a:	0a5b      	lsrs	r3, r3, #9
 800a18c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a190:	fb02 f303 	mul.w	r3, r2, r3
 800a194:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	1e5a      	subs	r2, r3, #1
 800a19a:	60fa      	str	r2, [r7, #12]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d102      	bne.n	800a1a6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a1a0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a1a4:	e01b      	b.n	800a1de <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a1aa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a1ac:	68bb      	ldr	r3, [r7, #8]
 800a1ae:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d0ef      	beq.n	800a196 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a1b6:	68bb      	ldr	r3, [r7, #8]
 800a1b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d1ea      	bne.n	800a196 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a1c4:	f003 0304 	and.w	r3, r3, #4
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d004      	beq.n	800a1d6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2204      	movs	r2, #4
 800a1d0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a1d2:	2304      	movs	r3, #4
 800a1d4:	e003      	b.n	800a1de <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	22c5      	movs	r2, #197	@ 0xc5
 800a1da:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a1dc:	2300      	movs	r3, #0
}
 800a1de:	4618      	mov	r0, r3
 800a1e0:	3714      	adds	r7, #20
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e8:	4770      	bx	lr
 800a1ea:	bf00      	nop
 800a1ec:	20000000 	.word	0x20000000
 800a1f0:	10624dd3 	.word	0x10624dd3

0800a1f4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b088      	sub	sp, #32
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	60f8      	str	r0, [r7, #12]
 800a1fc:	460b      	mov	r3, r1
 800a1fe:	607a      	str	r2, [r7, #4]
 800a200:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a202:	4b35      	ldr	r3, [pc, #212]	@ (800a2d8 <SDMMC_GetCmdResp6+0xe4>)
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	4a35      	ldr	r2, [pc, #212]	@ (800a2dc <SDMMC_GetCmdResp6+0xe8>)
 800a208:	fba2 2303 	umull	r2, r3, r2, r3
 800a20c:	0a5b      	lsrs	r3, r3, #9
 800a20e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a212:	fb02 f303 	mul.w	r3, r2, r3
 800a216:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a218:	69fb      	ldr	r3, [r7, #28]
 800a21a:	1e5a      	subs	r2, r3, #1
 800a21c:	61fa      	str	r2, [r7, #28]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d102      	bne.n	800a228 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a222:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a226:	e052      	b.n	800a2ce <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a22c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a22e:	69bb      	ldr	r3, [r7, #24]
 800a230:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a234:	2b00      	cmp	r3, #0
 800a236:	d0ef      	beq.n	800a218 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a238:	69bb      	ldr	r3, [r7, #24]
 800a23a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d1ea      	bne.n	800a218 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a246:	f003 0304 	and.w	r3, r3, #4
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d004      	beq.n	800a258 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	2204      	movs	r2, #4
 800a252:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a254:	2304      	movs	r3, #4
 800a256:	e03a      	b.n	800a2ce <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a25c:	f003 0301 	and.w	r3, r3, #1
 800a260:	2b00      	cmp	r3, #0
 800a262:	d004      	beq.n	800a26e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	2201      	movs	r2, #1
 800a268:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a26a:	2301      	movs	r3, #1
 800a26c:	e02f      	b.n	800a2ce <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a26e:	68f8      	ldr	r0, [r7, #12]
 800a270:	f7ff fc0e 	bl	8009a90 <SDMMC_GetCommandResponse>
 800a274:	4603      	mov	r3, r0
 800a276:	461a      	mov	r2, r3
 800a278:	7afb      	ldrb	r3, [r7, #11]
 800a27a:	4293      	cmp	r3, r2
 800a27c:	d001      	beq.n	800a282 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a27e:	2301      	movs	r3, #1
 800a280:	e025      	b.n	800a2ce <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	22c5      	movs	r2, #197	@ 0xc5
 800a286:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a288:	2100      	movs	r1, #0
 800a28a:	68f8      	ldr	r0, [r7, #12]
 800a28c:	f7ff fc0d 	bl	8009aaa <SDMMC_GetResponse>
 800a290:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800a292:	697b      	ldr	r3, [r7, #20]
 800a294:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d106      	bne.n	800a2aa <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800a29c:	697b      	ldr	r3, [r7, #20]
 800a29e:	0c1b      	lsrs	r3, r3, #16
 800a2a0:	b29a      	uxth	r2, r3
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	e011      	b.n	800a2ce <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a2aa:	697b      	ldr	r3, [r7, #20]
 800a2ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d002      	beq.n	800a2ba <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a2b4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a2b8:	e009      	b.n	800a2ce <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a2ba:	697b      	ldr	r3, [r7, #20]
 800a2bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d002      	beq.n	800a2ca <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a2c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a2c8:	e001      	b.n	800a2ce <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a2ca:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	3720      	adds	r7, #32
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bd80      	pop	{r7, pc}
 800a2d6:	bf00      	nop
 800a2d8:	20000000 	.word	0x20000000
 800a2dc:	10624dd3 	.word	0x10624dd3

0800a2e0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800a2e0:	b480      	push	{r7}
 800a2e2:	b085      	sub	sp, #20
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a2e8:	4b22      	ldr	r3, [pc, #136]	@ (800a374 <SDMMC_GetCmdResp7+0x94>)
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	4a22      	ldr	r2, [pc, #136]	@ (800a378 <SDMMC_GetCmdResp7+0x98>)
 800a2ee:	fba2 2303 	umull	r2, r3, r2, r3
 800a2f2:	0a5b      	lsrs	r3, r3, #9
 800a2f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a2f8:	fb02 f303 	mul.w	r3, r2, r3
 800a2fc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	1e5a      	subs	r2, r3, #1
 800a302:	60fa      	str	r2, [r7, #12]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d102      	bne.n	800a30e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a308:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a30c:	e02c      	b.n	800a368 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a312:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d0ef      	beq.n	800a2fe <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a31e:	68bb      	ldr	r3, [r7, #8]
 800a320:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a324:	2b00      	cmp	r3, #0
 800a326:	d1ea      	bne.n	800a2fe <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a32c:	f003 0304 	and.w	r3, r3, #4
 800a330:	2b00      	cmp	r3, #0
 800a332:	d004      	beq.n	800a33e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2204      	movs	r2, #4
 800a338:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a33a:	2304      	movs	r3, #4
 800a33c:	e014      	b.n	800a368 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a342:	f003 0301 	and.w	r3, r3, #1
 800a346:	2b00      	cmp	r3, #0
 800a348:	d004      	beq.n	800a354 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2201      	movs	r2, #1
 800a34e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a350:	2301      	movs	r3, #1
 800a352:	e009      	b.n	800a368 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a358:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d002      	beq.n	800a366 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	2240      	movs	r2, #64	@ 0x40
 800a364:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a366:	2300      	movs	r3, #0
  
}
 800a368:	4618      	mov	r0, r3
 800a36a:	3714      	adds	r7, #20
 800a36c:	46bd      	mov	sp, r7
 800a36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a372:	4770      	bx	lr
 800a374:	20000000 	.word	0x20000000
 800a378:	10624dd3 	.word	0x10624dd3

0800a37c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800a37c:	b480      	push	{r7}
 800a37e:	b085      	sub	sp, #20
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a384:	4b11      	ldr	r3, [pc, #68]	@ (800a3cc <SDMMC_GetCmdError+0x50>)
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	4a11      	ldr	r2, [pc, #68]	@ (800a3d0 <SDMMC_GetCmdError+0x54>)
 800a38a:	fba2 2303 	umull	r2, r3, r2, r3
 800a38e:	0a5b      	lsrs	r3, r3, #9
 800a390:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a394:	fb02 f303 	mul.w	r3, r2, r3
 800a398:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	1e5a      	subs	r2, r3, #1
 800a39e:	60fa      	str	r2, [r7, #12]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d102      	bne.n	800a3aa <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a3a4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a3a8:	e009      	b.n	800a3be <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a3ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d0f1      	beq.n	800a39a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	22c5      	movs	r2, #197	@ 0xc5
 800a3ba:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800a3bc:	2300      	movs	r3, #0
}
 800a3be:	4618      	mov	r0, r3
 800a3c0:	3714      	adds	r7, #20
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c8:	4770      	bx	lr
 800a3ca:	bf00      	nop
 800a3cc:	20000000 	.word	0x20000000
 800a3d0:	10624dd3 	.word	0x10624dd3

0800a3d4 <AUDIO_REC_Start>:
  * @brief  Starts Audio streaming.    
  * @param  None
  * @retval Audio error
  */ 
AUDIO_ErrorTypeDef AUDIO_REC_Start(void)
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b090      	sub	sp, #64	@ 0x40
 800a3d8:	af00      	add	r7, sp, #0
  uint32_t byteswritten = 0;
 800a3da:	2300      	movs	r3, #0
 800a3dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint8_t str[FILEMGR_FILE_NAME_SIZE + 20];

  uwVolume = 100;
 800a3de:	4b33      	ldr	r3, [pc, #204]	@ (800a4ac <AUDIO_REC_Start+0xd8>)
 800a3e0:	2264      	movs	r2, #100	@ 0x64
 800a3e2:	601a      	str	r2, [r3, #0]

  /* Create a new file system */
  if (f_mount(&SDFatFS, (TCHAR const*) SDPath, 0) != FR_OK) {
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	4932      	ldr	r1, [pc, #200]	@ (800a4b0 <AUDIO_REC_Start+0xdc>)
 800a3e8:	4832      	ldr	r0, [pc, #200]	@ (800a4b4 <AUDIO_REC_Start+0xe0>)
 800a3ea:	f002 faef 	bl	800c9cc <f_mount>
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d002      	beq.n	800a3fa <AUDIO_REC_Start+0x26>
    	Error_Handler(); /* FatFs Initialization Error */
 800a3f4:	f7f7 f9a2 	bl	800173c <Error_Handler>
 800a3f8:	e052      	b.n	800a4a0 <AUDIO_REC_Start+0xcc>
  } else {
	  printf("SD card mounted\r\n");
 800a3fa:	482f      	ldr	r0, [pc, #188]	@ (800a4b8 <AUDIO_REC_Start+0xe4>)
 800a3fc:	f004 fd0c 	bl	800ee18 <puts>
		  	  sizeof(workBuffer)) != FR_OK) {
		  Error_Handler(); / * FatFs Format Error */
//	  } else {
//	  */

	  printf("WAV file created\r\n");
 800a400:	482e      	ldr	r0, [pc, #184]	@ (800a4bc <AUDIO_REC_Start+0xe8>)
 800a402:	f004 fd09 	bl	800ee18 <puts>
	  if(f_open(&WavFile, REC_WAVE_NAME, FA_CREATE_ALWAYS | FA_WRITE) == FR_OK)
 800a406:	220a      	movs	r2, #10
 800a408:	492d      	ldr	r1, [pc, #180]	@ (800a4c0 <AUDIO_REC_Start+0xec>)
 800a40a:	482e      	ldr	r0, [pc, #184]	@ (800a4c4 <AUDIO_REC_Start+0xf0>)
 800a40c:	f002 fb24 	bl	800ca58 <f_open>
 800a410:	4603      	mov	r3, r0
 800a412:	2b00      	cmp	r3, #0
 800a414:	d144      	bne.n	800a4a0 <AUDIO_REC_Start+0xcc>
	  {
		/* Initialize header file */
		WavProcess_EncInit(DEFAULT_AUDIO_IN_FREQ, pHeaderBuff);
 800a416:	492c      	ldr	r1, [pc, #176]	@ (800a4c8 <AUDIO_REC_Start+0xf4>)
 800a418:	f44f 507a 	mov.w	r0, #16000	@ 0x3e80
 800a41c:	f000 f9c8 	bl	800a7b0 <WavProcess_EncInit>

		/* Write header file */
		if(f_write(&WavFile, pHeaderBuff, 44, (void*)&byteswritten) == FR_OK)
 800a420:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800a424:	222c      	movs	r2, #44	@ 0x2c
 800a426:	4928      	ldr	r1, [pc, #160]	@ (800a4c8 <AUDIO_REC_Start+0xf4>)
 800a428:	4826      	ldr	r0, [pc, #152]	@ (800a4c4 <AUDIO_REC_Start+0xf0>)
 800a42a:	f002 fe0e 	bl	800d04a <f_write>
 800a42e:	4603      	mov	r3, r0
 800a430:	2b00      	cmp	r3, #0
 800a432:	d135      	bne.n	800a4a0 <AUDIO_REC_Start+0xcc>
		{
		  printf("State : ready to record\r\n");
 800a434:	4825      	ldr	r0, [pc, #148]	@ (800a4cc <AUDIO_REC_Start+0xf8>)
 800a436:	f004 fcef 	bl	800ee18 <puts>
		  AudioState = AUDIO_STATE_RECORD;
 800a43a:	4b25      	ldr	r3, [pc, #148]	@ (800a4d0 <AUDIO_REC_Start+0xfc>)
 800a43c:	2205      	movs	r2, #5
 800a43e:	701a      	strb	r2, [r3, #0]

			if(byteswritten != 0)
 800a440:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a442:	2b00      	cmp	r3, #0
 800a444:	d02c      	beq.n	800a4a0 <AUDIO_REC_Start+0xcc>
			{
			  BSP_AUDIO_IN_Init(DEFAULT_AUDIO_IN_FREQ, DEFAULT_AUDIO_IN_BIT_RESOLUTION, DEFAULT_AUDIO_IN_CHANNEL_NBR);
 800a446:	2202      	movs	r2, #2
 800a448:	2110      	movs	r1, #16
 800a44a:	f44f 507a 	mov.w	r0, #16000	@ 0x3e80
 800a44e:	f7f9 fc55 	bl	8003cfc <BSP_AUDIO_IN_Init>
			  printf("Recording config initialized\r\n");
 800a452:	4820      	ldr	r0, [pc, #128]	@ (800a4d4 <AUDIO_REC_Start+0x100>)
 800a454:	f004 fce0 	bl	800ee18 <puts>
			  BSP_AUDIO_IN_Record((uint16_t*)&BufferCtl.pcm_buff[0], AUDIO_IN_PCM_BUFFER_SIZE);
 800a458:	f44f 5110 	mov.w	r1, #9216	@ 0x2400
 800a45c:	481e      	ldr	r0, [pc, #120]	@ (800a4d8 <AUDIO_REC_Start+0x104>)
 800a45e:	f7f9 fccb 	bl	8003df8 <BSP_AUDIO_IN_Record>
			  printf("Recording started...\r\n");
 800a462:	481e      	ldr	r0, [pc, #120]	@ (800a4dc <AUDIO_REC_Start+0x108>)
 800a464:	f004 fcd8 	bl	800ee18 <puts>
			  BufferCtl.fptr = byteswritten;
 800a468:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a46a:	4a1b      	ldr	r2, [pc, #108]	@ (800a4d8 <AUDIO_REC_Start+0x104>)
 800a46c:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 800a470:	f8c2 380c 	str.w	r3, [r2, #2060]	@ 0x80c
			  BufferCtl.pcm_ptr = 0;
 800a474:	4b18      	ldr	r3, [pc, #96]	@ (800a4d8 <AUDIO_REC_Start+0x104>)
 800a476:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800a47a:	461a      	mov	r2, r3
 800a47c:	2300      	movs	r3, #0
 800a47e:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800
			  BufferCtl.offset = 0;
 800a482:	4b15      	ldr	r3, [pc, #84]	@ (800a4d8 <AUDIO_REC_Start+0x104>)
 800a484:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800a488:	461a      	mov	r2, r3
 800a48a:	2300      	movs	r3, #0
 800a48c:	f8c2 3808 	str.w	r3, [r2, #2056]	@ 0x808
			  BufferCtl.wr_state = BUFFER_EMPTY;
 800a490:	4b11      	ldr	r3, [pc, #68]	@ (800a4d8 <AUDIO_REC_Start+0x104>)
 800a492:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800a496:	2200      	movs	r2, #0
 800a498:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
			  return AUDIO_ERROR_NONE;
 800a49c:	2300      	movs	r3, #0
 800a49e:	e000      	b.n	800a4a2 <AUDIO_REC_Start+0xce>
			}
		}
	  }
	  //}
  }
  return AUDIO_ERROR_IO;
 800a4a0:	2301      	movs	r3, #1
}
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	3740      	adds	r7, #64	@ 0x40
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	bd80      	pop	{r7, pc}
 800a4aa:	bf00      	nop
 800a4ac:	20000040 	.word	0x20000040
 800a4b0:	200053b8 	.word	0x200053b8
 800a4b4:	200053bc 	.word	0x200053bc
 800a4b8:	08010e7c 	.word	0x08010e7c
 800a4bc:	08010e90 	.word	0x08010e90
 800a4c0:	08010ea4 	.word	0x08010ea4
 800a4c4:	20005184 	.word	0x20005184
 800a4c8:	2000091c 	.word	0x2000091c
 800a4cc:	08010eb0 	.word	0x08010eb0
 800a4d0:	20000230 	.word	0x20000230
 800a4d4:	08010ecc 	.word	0x08010ecc
 800a4d8:	20000948 	.word	0x20000948
 800a4dc:	08010eec 	.word	0x08010eec

0800a4e0 <AUDIO_REC_Process>:
  * @brief  Manages Audio process. 
  * @param  None
  * @retval Audio error
  */
AUDIO_ErrorTypeDef AUDIO_REC_Process(void)
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b088      	sub	sp, #32
 800a4e4:	af00      	add	r7, sp, #0
  uint32_t byteswritten = 0;
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	617b      	str	r3, [r7, #20]
  AUDIO_ErrorTypeDef audio_error = AUDIO_ERROR_NONE;
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	77fb      	strb	r3, [r7, #31]
  uint32_t elapsed_time; 
  static uint32_t prev_elapsed_time = 0xFFFFFFFF;
  uint8_t str[16];
  //static TS_StateTypeDef  TS_State={0};
  //printf("PRE SWITCH\r\n");
  switch(AudioState)
 800a4ee:	4b59      	ldr	r3, [pc, #356]	@ (800a654 <AUDIO_REC_Process+0x174>)
 800a4f0:	781b      	ldrb	r3, [r3, #0]
 800a4f2:	2b05      	cmp	r3, #5
 800a4f4:	d002      	beq.n	800a4fc <AUDIO_REC_Process+0x1c>
 800a4f6:	2b0a      	cmp	r3, #10
 800a4f8:	d079      	beq.n	800a5ee <AUDIO_REC_Process+0x10e>

  	case AUDIO_STATE_IDLE:
  	case AUDIO_STATE_INIT:
  	default:
      /* Do Nothing */
      break;
 800a4fa:	e0a7      	b.n	800a64c <AUDIO_REC_Process+0x16c>
      if(BufferCtl.fptr >= REC_SAMPLE_LENGTH)
 800a4fc:	4b56      	ldr	r3, [pc, #344]	@ (800a658 <AUDIO_REC_Process+0x178>)
 800a4fe:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800a502:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800a506:	4a55      	ldr	r2, [pc, #340]	@ (800a65c <AUDIO_REC_Process+0x17c>)
 800a508:	4293      	cmp	r3, r2
 800a50a:	d903      	bls.n	800a514 <AUDIO_REC_Process+0x34>
        AudioState = AUDIO_STATE_STOP;
 800a50c:	4b51      	ldr	r3, [pc, #324]	@ (800a654 <AUDIO_REC_Process+0x174>)
 800a50e:	220a      	movs	r2, #10
 800a510:	701a      	strb	r2, [r3, #0]
        break;
 800a512:	e09b      	b.n	800a64c <AUDIO_REC_Process+0x16c>
      if(BufferCtl.wr_state == BUFFER_FULL)
 800a514:	4b50      	ldr	r3, [pc, #320]	@ (800a658 <AUDIO_REC_Process+0x178>)
 800a516:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800a51a:	f893 3804 	ldrb.w	r3, [r3, #2052]	@ 0x804
 800a51e:	2b01      	cmp	r3, #1
 800a520:	d128      	bne.n	800a574 <AUDIO_REC_Process+0x94>
        if(f_write(&WavFile, (uint8_t*)(BufferCtl.pcm_buff + BufferCtl.offset),
 800a522:	4b4d      	ldr	r3, [pc, #308]	@ (800a658 <AUDIO_REC_Process+0x178>)
 800a524:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800a528:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 800a52c:	005b      	lsls	r3, r3, #1
 800a52e:	4a4a      	ldr	r2, [pc, #296]	@ (800a658 <AUDIO_REC_Process+0x178>)
 800a530:	1899      	adds	r1, r3, r2
 800a532:	f107 0314 	add.w	r3, r7, #20
 800a536:	f44f 5210 	mov.w	r2, #9216	@ 0x2400
 800a53a:	4849      	ldr	r0, [pc, #292]	@ (800a660 <AUDIO_REC_Process+0x180>)
 800a53c:	f002 fd85 	bl	800d04a <f_write>
 800a540:	4603      	mov	r3, r0
 800a542:	2b00      	cmp	r3, #0
 800a544:	d004      	beq.n	800a550 <AUDIO_REC_Process+0x70>
          printf("recording failed\r\n");
 800a546:	4847      	ldr	r0, [pc, #284]	@ (800a664 <AUDIO_REC_Process+0x184>)
 800a548:	f004 fc66 	bl	800ee18 <puts>
          return AUDIO_ERROR_IO;
 800a54c:	2301      	movs	r3, #1
 800a54e:	e07d      	b.n	800a64c <AUDIO_REC_Process+0x16c>
        BufferCtl.fptr += byteswritten;
 800a550:	4b41      	ldr	r3, [pc, #260]	@ (800a658 <AUDIO_REC_Process+0x178>)
 800a552:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800a556:	f8d3 280c 	ldr.w	r2, [r3, #2060]	@ 0x80c
 800a55a:	697b      	ldr	r3, [r7, #20]
 800a55c:	4413      	add	r3, r2
 800a55e:	4a3e      	ldr	r2, [pc, #248]	@ (800a658 <AUDIO_REC_Process+0x178>)
 800a560:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 800a564:	f8c2 380c 	str.w	r3, [r2, #2060]	@ 0x80c
        BufferCtl.wr_state =  BUFFER_EMPTY;
 800a568:	4b3b      	ldr	r3, [pc, #236]	@ (800a658 <AUDIO_REC_Process+0x178>)
 800a56a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800a56e:	2200      	movs	r2, #0
 800a570:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
      elapsed_time = BufferCtl.fptr / (DEFAULT_AUDIO_IN_FREQ * DEFAULT_AUDIO_IN_CHANNEL_NBR * 2);
 800a574:	4b38      	ldr	r3, [pc, #224]	@ (800a658 <AUDIO_REC_Process+0x178>)
 800a576:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800a57a:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800a57e:	4a3a      	ldr	r2, [pc, #232]	@ (800a668 <AUDIO_REC_Process+0x188>)
 800a580:	fba2 2303 	umull	r2, r3, r2, r3
 800a584:	0b1b      	lsrs	r3, r3, #12
 800a586:	61bb      	str	r3, [r7, #24]
      if(prev_elapsed_time != elapsed_time)
 800a588:	4b38      	ldr	r3, [pc, #224]	@ (800a66c <AUDIO_REC_Process+0x18c>)
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	69ba      	ldr	r2, [r7, #24]
 800a58e:	429a      	cmp	r2, r3
 800a590:	d05b      	beq.n	800a64a <AUDIO_REC_Process+0x16a>
        prev_elapsed_time = elapsed_time;
 800a592:	4a36      	ldr	r2, [pc, #216]	@ (800a66c <AUDIO_REC_Process+0x18c>)
 800a594:	69bb      	ldr	r3, [r7, #24]
 800a596:	6013      	str	r3, [r2, #0]
        printf("Elapsed time : \r\n");
 800a598:	4835      	ldr	r0, [pc, #212]	@ (800a670 <AUDIO_REC_Process+0x190>)
 800a59a:	f004 fc3d 	bl	800ee18 <puts>
        printf("[%02d:%02d]\r\n", (int)(elapsed_time /60), (int)(elapsed_time%60));
 800a59e:	69bb      	ldr	r3, [r7, #24]
 800a5a0:	4a34      	ldr	r2, [pc, #208]	@ (800a674 <AUDIO_REC_Process+0x194>)
 800a5a2:	fba2 2303 	umull	r2, r3, r2, r3
 800a5a6:	095b      	lsrs	r3, r3, #5
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	69b9      	ldr	r1, [r7, #24]
 800a5ac:	4b31      	ldr	r3, [pc, #196]	@ (800a674 <AUDIO_REC_Process+0x194>)
 800a5ae:	fba3 2301 	umull	r2, r3, r3, r1
 800a5b2:	095a      	lsrs	r2, r3, #5
 800a5b4:	4613      	mov	r3, r2
 800a5b6:	011b      	lsls	r3, r3, #4
 800a5b8:	1a9b      	subs	r3, r3, r2
 800a5ba:	009b      	lsls	r3, r3, #2
 800a5bc:	1aca      	subs	r2, r1, r3
 800a5be:	4613      	mov	r3, r2
 800a5c0:	461a      	mov	r2, r3
 800a5c2:	4601      	mov	r1, r0
 800a5c4:	482c      	ldr	r0, [pc, #176]	@ (800a678 <AUDIO_REC_Process+0x198>)
 800a5c6:	f004 fbbf 	bl	800ed48 <iprintf>
        printf("File size : \r\n");
 800a5ca:	482c      	ldr	r0, [pc, #176]	@ (800a67c <AUDIO_REC_Process+0x19c>)
 800a5cc:	f004 fc24 	bl	800ee18 <puts>
        printf("%4d KB\r\n", (int)((int32_t)BufferCtl.fptr/1024));
 800a5d0:	4b21      	ldr	r3, [pc, #132]	@ (800a658 <AUDIO_REC_Process+0x178>)
 800a5d2:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800a5d6:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	da01      	bge.n	800a5e2 <AUDIO_REC_Process+0x102>
 800a5de:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 800a5e2:	129b      	asrs	r3, r3, #10
 800a5e4:	4619      	mov	r1, r3
 800a5e6:	4826      	ldr	r0, [pc, #152]	@ (800a680 <AUDIO_REC_Process+0x1a0>)
 800a5e8:	f004 fbae 	bl	800ed48 <iprintf>
      break;
 800a5ec:	e02d      	b.n	800a64a <AUDIO_REC_Process+0x16a>
      BSP_AUDIO_IN_Stop(CODEC_PDWN_SW);
 800a5ee:	2002      	movs	r0, #2
 800a5f0:	f7f9 fc1a 	bl	8003e28 <BSP_AUDIO_IN_Stop>
      HAL_Delay(300);
 800a5f4:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800a5f8:	f7f9 fe30 	bl	800425c <HAL_Delay>
      if(f_lseek(&WavFile, 0) == FR_OK)
 800a5fc:	2100      	movs	r1, #0
 800a5fe:	4818      	ldr	r0, [pc, #96]	@ (800a660 <AUDIO_REC_Process+0x180>)
 800a600:	f002 ff40 	bl	800d484 <f_lseek>
 800a604:	4603      	mov	r3, r0
 800a606:	2b00      	cmp	r3, #0
 800a608:	d113      	bne.n	800a632 <AUDIO_REC_Process+0x152>
        WavProcess_HeaderUpdate(pHeaderBuff, &WaveFormat);
 800a60a:	491e      	ldr	r1, [pc, #120]	@ (800a684 <AUDIO_REC_Process+0x1a4>)
 800a60c:	481e      	ldr	r0, [pc, #120]	@ (800a688 <AUDIO_REC_Process+0x1a8>)
 800a60e:	f000 f9e7 	bl	800a9e0 <WavProcess_HeaderUpdate>
        if(f_write(&WavFile, pHeaderBuff, sizeof(WAVE_FormatTypeDef), (void*)&byteswritten) == FR_OK)
 800a612:	f107 0314 	add.w	r3, r7, #20
 800a616:	222c      	movs	r2, #44	@ 0x2c
 800a618:	491b      	ldr	r1, [pc, #108]	@ (800a688 <AUDIO_REC_Process+0x1a8>)
 800a61a:	4811      	ldr	r0, [pc, #68]	@ (800a660 <AUDIO_REC_Process+0x180>)
 800a61c:	f002 fd15 	bl	800d04a <f_write>
 800a620:	4603      	mov	r3, r0
 800a622:	2b00      	cmp	r3, #0
 800a624:	d102      	bne.n	800a62c <AUDIO_REC_Process+0x14c>
          audio_error = AUDIO_ERROR_EOF;
 800a626:	2302      	movs	r3, #2
 800a628:	77fb      	strb	r3, [r7, #31]
 800a62a:	e004      	b.n	800a636 <AUDIO_REC_Process+0x156>
          audio_error = AUDIO_ERROR_IO;
 800a62c:	2301      	movs	r3, #1
 800a62e:	77fb      	strb	r3, [r7, #31]
 800a630:	e001      	b.n	800a636 <AUDIO_REC_Process+0x156>
        audio_error = AUDIO_ERROR_IO;
 800a632:	2301      	movs	r3, #1
 800a634:	77fb      	strb	r3, [r7, #31]
      AudioState = AUDIO_STATE_IDLE;
 800a636:	4b07      	ldr	r3, [pc, #28]	@ (800a654 <AUDIO_REC_Process+0x174>)
 800a638:	2200      	movs	r2, #0
 800a63a:	701a      	strb	r2, [r3, #0]
      f_close(&WavFile);
 800a63c:	4808      	ldr	r0, [pc, #32]	@ (800a660 <AUDIO_REC_Process+0x180>)
 800a63e:	f002 fef7 	bl	800d430 <f_close>
      printf("wave file closed success\r\n");
 800a642:	4812      	ldr	r0, [pc, #72]	@ (800a68c <AUDIO_REC_Process+0x1ac>)
 800a644:	f004 fbe8 	bl	800ee18 <puts>
      break;
 800a648:	e000      	b.n	800a64c <AUDIO_REC_Process+0x16c>
      break;
 800a64a:	bf00      	nop
      return audio_error;
    }
}
 800a64c:	4618      	mov	r0, r3
 800a64e:	3720      	adds	r7, #32
 800a650:	46bd      	mov	sp, r7
 800a652:	bd80      	pop	{r7, pc}
 800a654:	20000230 	.word	0x20000230
 800a658:	20000948 	.word	0x20000948
 800a65c:	0004e1ff 	.word	0x0004e1ff
 800a660:	20005184 	.word	0x20005184
 800a664:	08010f04 	.word	0x08010f04
 800a668:	10624dd3 	.word	0x10624dd3
 800a66c:	20000044 	.word	0x20000044
 800a670:	08010f18 	.word	0x08010f18
 800a674:	88888889 	.word	0x88888889
 800a678:	08010f2c 	.word	0x08010f2c
 800a67c:	08010f3c 	.word	0x08010f3c
 800a680:	08010f4c 	.word	0x08010f4c
 800a684:	20005158 	.word	0x20005158
 800a688:	2000091c 	.word	0x2000091c
 800a68c:	08010f58 	.word	0x08010f58

0800a690 <BSP_AUDIO_IN_TransferComplete_CallBack>:
  * @brief  Calculates the remaining file size and new position of the pointer.
  * @param  None
  * @retval None
  */
void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
 800a690:	b480      	push	{r7}
 800a692:	af00      	add	r7, sp, #0
  BufferCtl.pcm_ptr+= AUDIO_IN_PCM_BUFFER_SIZE/2;
 800a694:	4b21      	ldr	r3, [pc, #132]	@ (800a71c <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800a696:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800a69a:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800a69e:	f503 5390 	add.w	r3, r3, #4608	@ 0x1200
 800a6a2:	4a1e      	ldr	r2, [pc, #120]	@ (800a71c <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800a6a4:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 800a6a8:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800
  if(BufferCtl.pcm_ptr == AUDIO_IN_PCM_BUFFER_SIZE/2)
 800a6ac:	4b1b      	ldr	r3, [pc, #108]	@ (800a71c <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800a6ae:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800a6b2:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800a6b6:	f5b3 5f90 	cmp.w	r3, #4608	@ 0x1200
 800a6ba:	d10c      	bne.n	800a6d6 <BSP_AUDIO_IN_TransferComplete_CallBack+0x46>
  {
    BufferCtl.wr_state   =  BUFFER_FULL;
 800a6bc:	4b17      	ldr	r3, [pc, #92]	@ (800a71c <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800a6be:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800a6c2:	2201      	movs	r2, #1
 800a6c4:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
    BufferCtl.offset  = 0;
 800a6c8:	4b14      	ldr	r3, [pc, #80]	@ (800a71c <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800a6ca:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800a6ce:	461a      	mov	r2, r3
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	f8c2 3808 	str.w	r3, [r2, #2056]	@ 0x808
  }
  
  if(BufferCtl.pcm_ptr >= AUDIO_IN_PCM_BUFFER_SIZE)
 800a6d6:	4b11      	ldr	r3, [pc, #68]	@ (800a71c <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800a6d8:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800a6dc:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800a6e0:	f5b3 5f10 	cmp.w	r3, #9216	@ 0x2400
 800a6e4:	d314      	bcc.n	800a710 <BSP_AUDIO_IN_TransferComplete_CallBack+0x80>
  {
    BufferCtl.wr_state   =  BUFFER_FULL;
 800a6e6:	4b0d      	ldr	r3, [pc, #52]	@ (800a71c <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800a6e8:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800a6ec:	2201      	movs	r2, #1
 800a6ee:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
    BufferCtl.offset  = AUDIO_IN_PCM_BUFFER_SIZE/2;    
 800a6f2:	4b0a      	ldr	r3, [pc, #40]	@ (800a71c <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800a6f4:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800a6f8:	461a      	mov	r2, r3
 800a6fa:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 800a6fe:	f8c2 3808 	str.w	r3, [r2, #2056]	@ 0x808
    BufferCtl.pcm_ptr = 0;
 800a702:	4b06      	ldr	r3, [pc, #24]	@ (800a71c <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800a704:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800a708:	461a      	mov	r2, r3
 800a70a:	2300      	movs	r3, #0
 800a70c:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800
  }
}
 800a710:	bf00      	nop
 800a712:	46bd      	mov	sp, r7
 800a714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a718:	4770      	bx	lr
 800a71a:	bf00      	nop
 800a71c:	20000948 	.word	0x20000948

0800a720 <BSP_AUDIO_IN_HalfTransfer_CallBack>:
  * @brief  Manages the DMA Half Transfer complete interrupt.
  * @param  None
  * @retval None
  */
void BSP_AUDIO_IN_HalfTransfer_CallBack(void)
{ 
 800a720:	b480      	push	{r7}
 800a722:	af00      	add	r7, sp, #0
  BufferCtl.pcm_ptr+= AUDIO_IN_PCM_BUFFER_SIZE/2;
 800a724:	4b21      	ldr	r3, [pc, #132]	@ (800a7ac <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800a726:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800a72a:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800a72e:	f503 5390 	add.w	r3, r3, #4608	@ 0x1200
 800a732:	4a1e      	ldr	r2, [pc, #120]	@ (800a7ac <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800a734:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 800a738:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800
  if(BufferCtl.pcm_ptr == AUDIO_IN_PCM_BUFFER_SIZE/2)
 800a73c:	4b1b      	ldr	r3, [pc, #108]	@ (800a7ac <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800a73e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800a742:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800a746:	f5b3 5f90 	cmp.w	r3, #4608	@ 0x1200
 800a74a:	d10c      	bne.n	800a766 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x46>
  {
    BufferCtl.wr_state   =  BUFFER_FULL;
 800a74c:	4b17      	ldr	r3, [pc, #92]	@ (800a7ac <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800a74e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800a752:	2201      	movs	r2, #1
 800a754:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
    BufferCtl.offset  = 0;
 800a758:	4b14      	ldr	r3, [pc, #80]	@ (800a7ac <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800a75a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800a75e:	461a      	mov	r2, r3
 800a760:	2300      	movs	r3, #0
 800a762:	f8c2 3808 	str.w	r3, [r2, #2056]	@ 0x808
  }
  
  if(BufferCtl.pcm_ptr >= AUDIO_IN_PCM_BUFFER_SIZE)
 800a766:	4b11      	ldr	r3, [pc, #68]	@ (800a7ac <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800a768:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800a76c:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800a770:	f5b3 5f10 	cmp.w	r3, #9216	@ 0x2400
 800a774:	d314      	bcc.n	800a7a0 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x80>
  {
    BufferCtl.wr_state   =  BUFFER_FULL;
 800a776:	4b0d      	ldr	r3, [pc, #52]	@ (800a7ac <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800a778:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800a77c:	2201      	movs	r2, #1
 800a77e:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
    BufferCtl.offset  = AUDIO_IN_PCM_BUFFER_SIZE/2;    
 800a782:	4b0a      	ldr	r3, [pc, #40]	@ (800a7ac <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800a784:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800a788:	461a      	mov	r2, r3
 800a78a:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 800a78e:	f8c2 3808 	str.w	r3, [r2, #2056]	@ 0x808
    BufferCtl.pcm_ptr = 0;
 800a792:	4b06      	ldr	r3, [pc, #24]	@ (800a7ac <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800a794:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800a798:	461a      	mov	r2, r3
 800a79a:	2300      	movs	r3, #0
 800a79c:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800
  }
}
 800a7a0:	bf00      	nop
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a8:	4770      	bx	lr
 800a7aa:	bf00      	nop
 800a7ac:	20000948 	.word	0x20000948

0800a7b0 <WavProcess_EncInit>:
  * @param  Freq: Sampling frequency.
  * @param  pHeader: Pointer to the WAV file header to be written.  
  * @retval 0 if success, !0 else.
  */
static uint32_t WavProcess_EncInit(uint32_t Freq, uint8_t *pHeader)
{  
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b082      	sub	sp, #8
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
 800a7b8:	6039      	str	r1, [r7, #0]
  /* Initialize the encoder structure */
  WaveFormat.SampleRate = Freq;        /* Audio sampling frequency */
 800a7ba:	4a1b      	ldr	r2, [pc, #108]	@ (800a828 <WavProcess_EncInit+0x78>)
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	6193      	str	r3, [r2, #24]
  WaveFormat.NbrChannels = 2;          /* Number of channels: 1:Mono or 2:Stereo */
 800a7c0:	4b19      	ldr	r3, [pc, #100]	@ (800a828 <WavProcess_EncInit+0x78>)
 800a7c2:	2202      	movs	r2, #2
 800a7c4:	82da      	strh	r2, [r3, #22]
  WaveFormat.BitPerSample = 16;        /* Number of bits per sample (16, 24 or 32) */
 800a7c6:	4b18      	ldr	r3, [pc, #96]	@ (800a828 <WavProcess_EncInit+0x78>)
 800a7c8:	2210      	movs	r2, #16
 800a7ca:	845a      	strh	r2, [r3, #34]	@ 0x22
  WaveFormat.FileSize = 0x001D4C00;    /* Total length of useful audio data (payload) */
 800a7cc:	4b16      	ldr	r3, [pc, #88]	@ (800a828 <WavProcess_EncInit+0x78>)
 800a7ce:	4a17      	ldr	r2, [pc, #92]	@ (800a82c <WavProcess_EncInit+0x7c>)
 800a7d0:	605a      	str	r2, [r3, #4]
  WaveFormat.SubChunk1Size = 44;       /* The file header chunk size */
 800a7d2:	4b15      	ldr	r3, [pc, #84]	@ (800a828 <WavProcess_EncInit+0x78>)
 800a7d4:	222c      	movs	r2, #44	@ 0x2c
 800a7d6:	611a      	str	r2, [r3, #16]
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
 800a7d8:	4b13      	ldr	r3, [pc, #76]	@ (800a828 <WavProcess_EncInit+0x78>)
 800a7da:	699b      	ldr	r3, [r3, #24]
                        (WaveFormat.BitPerSample/8) * \
 800a7dc:	4a12      	ldr	r2, [pc, #72]	@ (800a828 <WavProcess_EncInit+0x78>)
 800a7de:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 800a7e0:	08d2      	lsrs	r2, r2, #3
 800a7e2:	b292      	uxth	r2, r2
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
 800a7e4:	fb02 f303 	mul.w	r3, r2, r3
                         WaveFormat.NbrChannels);     /* Number of bytes per second  (sample rate * block align)  */
 800a7e8:	4a0f      	ldr	r2, [pc, #60]	@ (800a828 <WavProcess_EncInit+0x78>)
 800a7ea:	8ad2      	ldrh	r2, [r2, #22]
                        (WaveFormat.BitPerSample/8) * \
 800a7ec:	fb02 f303 	mul.w	r3, r2, r3
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
 800a7f0:	4a0d      	ldr	r2, [pc, #52]	@ (800a828 <WavProcess_EncInit+0x78>)
 800a7f2:	61d3      	str	r3, [r2, #28]
  WaveFormat.BlockAlign = WaveFormat.NbrChannels * \
 800a7f4:	4b0c      	ldr	r3, [pc, #48]	@ (800a828 <WavProcess_EncInit+0x78>)
 800a7f6:	8ada      	ldrh	r2, [r3, #22]
                         (WaveFormat.BitPerSample/8); /* channels * bits/sample / 8 */
 800a7f8:	4b0b      	ldr	r3, [pc, #44]	@ (800a828 <WavProcess_EncInit+0x78>)
 800a7fa:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
  WaveFormat.BlockAlign = WaveFormat.NbrChannels * \
 800a7fc:	08db      	lsrs	r3, r3, #3
 800a7fe:	b29b      	uxth	r3, r3
 800a800:	fb12 f303 	smulbb	r3, r2, r3
 800a804:	b29a      	uxth	r2, r3
 800a806:	4b08      	ldr	r3, [pc, #32]	@ (800a828 <WavProcess_EncInit+0x78>)
 800a808:	841a      	strh	r2, [r3, #32]
  
  /* Parse the wav file header and extract required information */
  if(WavProcess_HeaderInit(pHeader, &WaveFormat))
 800a80a:	4907      	ldr	r1, [pc, #28]	@ (800a828 <WavProcess_EncInit+0x78>)
 800a80c:	6838      	ldr	r0, [r7, #0]
 800a80e:	f000 f80f 	bl	800a830 <WavProcess_HeaderInit>
 800a812:	4603      	mov	r3, r0
 800a814:	2b00      	cmp	r3, #0
 800a816:	d001      	beq.n	800a81c <WavProcess_EncInit+0x6c>
  {
    return 1;
 800a818:	2301      	movs	r3, #1
 800a81a:	e000      	b.n	800a81e <WavProcess_EncInit+0x6e>
  }
  return 0;
 800a81c:	2300      	movs	r3, #0
}
 800a81e:	4618      	mov	r0, r3
 800a820:	3708      	adds	r7, #8
 800a822:	46bd      	mov	sp, r7
 800a824:	bd80      	pop	{r7, pc}
 800a826:	bf00      	nop
 800a828:	20005158 	.word	0x20005158
 800a82c:	001d4c00 	.word	0x001d4c00

0800a830 <WavProcess_HeaderInit>:
  * @param  pHeader: Header Buffer to be filled
  * @param  pWaveFormatStruct: Pointer to the wave structure to be filled.
  * @retval 0 if passed, !0 if failed.
  */
static uint32_t WavProcess_HeaderInit(uint8_t* pHeader, WAVE_FormatTypeDef* pWaveFormatStruct)
{
 800a830:	b480      	push	{r7}
 800a832:	b083      	sub	sp, #12
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
 800a838:	6039      	str	r1, [r7, #0]
  /* Write chunkID, must be 'RIFF'  ------------------------------------------*/
  pHeader[0] = 'R';
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	2252      	movs	r2, #82	@ 0x52
 800a83e:	701a      	strb	r2, [r3, #0]
  pHeader[1] = 'I';
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	3301      	adds	r3, #1
 800a844:	2249      	movs	r2, #73	@ 0x49
 800a846:	701a      	strb	r2, [r3, #0]
  pHeader[2] = 'F';
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	3302      	adds	r3, #2
 800a84c:	2246      	movs	r2, #70	@ 0x46
 800a84e:	701a      	strb	r2, [r3, #0]
  pHeader[3] = 'F';
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	3303      	adds	r3, #3
 800a854:	2246      	movs	r2, #70	@ 0x46
 800a856:	701a      	strb	r2, [r3, #0]
  
  /* Write the file length ---------------------------------------------------*/
  /* The sampling time: this value will be written back at the end of the 
     recording operation.  Example: 661500 Bytes = 0x000A17FC, byte[7]=0x00, byte[4]=0xFC */
  pHeader[4] = 0x00;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	3304      	adds	r3, #4
 800a85c:	2200      	movs	r2, #0
 800a85e:	701a      	strb	r2, [r3, #0]
  pHeader[5] = 0x4C;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	3305      	adds	r3, #5
 800a864:	224c      	movs	r2, #76	@ 0x4c
 800a866:	701a      	strb	r2, [r3, #0]
  pHeader[6] = 0x1D;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	3306      	adds	r3, #6
 800a86c:	221d      	movs	r2, #29
 800a86e:	701a      	strb	r2, [r3, #0]
  pHeader[7] = 0x00;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	3307      	adds	r3, #7
 800a874:	2200      	movs	r2, #0
 800a876:	701a      	strb	r2, [r3, #0]
  /* Write the file format, must be 'WAVE' -----------------------------------*/
  pHeader[8]  = 'W';
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	3308      	adds	r3, #8
 800a87c:	2257      	movs	r2, #87	@ 0x57
 800a87e:	701a      	strb	r2, [r3, #0]
  pHeader[9]  = 'A';
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	3309      	adds	r3, #9
 800a884:	2241      	movs	r2, #65	@ 0x41
 800a886:	701a      	strb	r2, [r3, #0]
  pHeader[10] = 'V';
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	330a      	adds	r3, #10
 800a88c:	2256      	movs	r2, #86	@ 0x56
 800a88e:	701a      	strb	r2, [r3, #0]
  pHeader[11] = 'E';
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	330b      	adds	r3, #11
 800a894:	2245      	movs	r2, #69	@ 0x45
 800a896:	701a      	strb	r2, [r3, #0]
  
  /* Write the format chunk, must be'fmt ' -----------------------------------*/
  pHeader[12]  = 'f';
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	330c      	adds	r3, #12
 800a89c:	2266      	movs	r2, #102	@ 0x66
 800a89e:	701a      	strb	r2, [r3, #0]
  pHeader[13]  = 'm';
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	330d      	adds	r3, #13
 800a8a4:	226d      	movs	r2, #109	@ 0x6d
 800a8a6:	701a      	strb	r2, [r3, #0]
  pHeader[14]  = 't';
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	330e      	adds	r3, #14
 800a8ac:	2274      	movs	r2, #116	@ 0x74
 800a8ae:	701a      	strb	r2, [r3, #0]
  pHeader[15]  = ' ';
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	330f      	adds	r3, #15
 800a8b4:	2220      	movs	r2, #32
 800a8b6:	701a      	strb	r2, [r3, #0]
  
  /* Write the length of the 'fmt' data, must be 0x10 ------------------------*/
  pHeader[16]  = 0x10;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	3310      	adds	r3, #16
 800a8bc:	2210      	movs	r2, #16
 800a8be:	701a      	strb	r2, [r3, #0]
  pHeader[17]  = 0x00;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	3311      	adds	r3, #17
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	701a      	strb	r2, [r3, #0]
  pHeader[18]  = 0x00;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	3312      	adds	r3, #18
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	701a      	strb	r2, [r3, #0]
  pHeader[19]  = 0x00;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	3313      	adds	r3, #19
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	701a      	strb	r2, [r3, #0]
  
  /* Write the audio format, must be 0x01 (PCM) ------------------------------*/
  pHeader[20]  = 0x01;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	3314      	adds	r3, #20
 800a8dc:	2201      	movs	r2, #1
 800a8de:	701a      	strb	r2, [r3, #0]
  pHeader[21]  = 0x00;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	3315      	adds	r3, #21
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	701a      	strb	r2, [r3, #0]
  
  /* Write the number of channels, ie. 0x01 (Mono) ---------------------------*/
  pHeader[22]  = pWaveFormatStruct->NbrChannels;
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	8ada      	ldrh	r2, [r3, #22]
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	3316      	adds	r3, #22
 800a8f0:	b2d2      	uxtb	r2, r2
 800a8f2:	701a      	strb	r2, [r3, #0]
  pHeader[23]  = 0x00;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	3317      	adds	r3, #23
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	701a      	strb	r2, [r3, #0]
  
  /* Write the Sample Rate in Hz ---------------------------------------------*/
  /* Write Little Endian ie. 8000 = 0x00001F40 => byte[24]=0x40, byte[27]=0x00*/
  pHeader[24]  = (uint8_t)((pWaveFormatStruct->SampleRate & 0xFF));
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	699a      	ldr	r2, [r3, #24]
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	3318      	adds	r3, #24
 800a904:	b2d2      	uxtb	r2, r2
 800a906:	701a      	strb	r2, [r3, #0]
  pHeader[25]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 8) & 0xFF);
 800a908:	683b      	ldr	r3, [r7, #0]
 800a90a:	699b      	ldr	r3, [r3, #24]
 800a90c:	0a1a      	lsrs	r2, r3, #8
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	3319      	adds	r3, #25
 800a912:	b2d2      	uxtb	r2, r2
 800a914:	701a      	strb	r2, [r3, #0]
  pHeader[26]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 16) & 0xFF);
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	699b      	ldr	r3, [r3, #24]
 800a91a:	0c1a      	lsrs	r2, r3, #16
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	331a      	adds	r3, #26
 800a920:	b2d2      	uxtb	r2, r2
 800a922:	701a      	strb	r2, [r3, #0]
  pHeader[27]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 24) & 0xFF);
 800a924:	683b      	ldr	r3, [r7, #0]
 800a926:	699b      	ldr	r3, [r3, #24]
 800a928:	0e1a      	lsrs	r2, r3, #24
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	331b      	adds	r3, #27
 800a92e:	b2d2      	uxtb	r2, r2
 800a930:	701a      	strb	r2, [r3, #0]
  
  /* Write the Byte Rate -----------------------------------------------------*/
  pHeader[28]  = (uint8_t)((pWaveFormatStruct->ByteRate & 0xFF));
 800a932:	683b      	ldr	r3, [r7, #0]
 800a934:	69da      	ldr	r2, [r3, #28]
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	331c      	adds	r3, #28
 800a93a:	b2d2      	uxtb	r2, r2
 800a93c:	701a      	strb	r2, [r3, #0]
  pHeader[29]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 8) & 0xFF);
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	69db      	ldr	r3, [r3, #28]
 800a942:	0a1a      	lsrs	r2, r3, #8
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	331d      	adds	r3, #29
 800a948:	b2d2      	uxtb	r2, r2
 800a94a:	701a      	strb	r2, [r3, #0]
  pHeader[30]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 16) & 0xFF);
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	69db      	ldr	r3, [r3, #28]
 800a950:	0c1a      	lsrs	r2, r3, #16
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	331e      	adds	r3, #30
 800a956:	b2d2      	uxtb	r2, r2
 800a958:	701a      	strb	r2, [r3, #0]
  pHeader[31]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 24) & 0xFF);
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	69db      	ldr	r3, [r3, #28]
 800a95e:	0e1a      	lsrs	r2, r3, #24
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	331f      	adds	r3, #31
 800a964:	b2d2      	uxtb	r2, r2
 800a966:	701a      	strb	r2, [r3, #0]
  
  /* Write the block alignment -----------------------------------------------*/
  pHeader[32]  = pWaveFormatStruct->BlockAlign;
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	8c1a      	ldrh	r2, [r3, #32]
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	3320      	adds	r3, #32
 800a970:	b2d2      	uxtb	r2, r2
 800a972:	701a      	strb	r2, [r3, #0]
  pHeader[33]  = 0x00;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	3321      	adds	r3, #33	@ 0x21
 800a978:	2200      	movs	r2, #0
 800a97a:	701a      	strb	r2, [r3, #0]
  
  /* Write the number of bits per sample -------------------------------------*/
  pHeader[34]  = pWaveFormatStruct->BitPerSample;
 800a97c:	683b      	ldr	r3, [r7, #0]
 800a97e:	8c5a      	ldrh	r2, [r3, #34]	@ 0x22
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	3322      	adds	r3, #34	@ 0x22
 800a984:	b2d2      	uxtb	r2, r2
 800a986:	701a      	strb	r2, [r3, #0]
  pHeader[35]  = 0x00;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	3323      	adds	r3, #35	@ 0x23
 800a98c:	2200      	movs	r2, #0
 800a98e:	701a      	strb	r2, [r3, #0]
  
  /* Write the Data chunk, must be 'data' ------------------------------------*/
  pHeader[36]  = 'd';
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	3324      	adds	r3, #36	@ 0x24
 800a994:	2264      	movs	r2, #100	@ 0x64
 800a996:	701a      	strb	r2, [r3, #0]
  pHeader[37]  = 'a';
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	3325      	adds	r3, #37	@ 0x25
 800a99c:	2261      	movs	r2, #97	@ 0x61
 800a99e:	701a      	strb	r2, [r3, #0]
  pHeader[38]  = 't';
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	3326      	adds	r3, #38	@ 0x26
 800a9a4:	2274      	movs	r2, #116	@ 0x74
 800a9a6:	701a      	strb	r2, [r3, #0]
  pHeader[39]  = 'a';
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	3327      	adds	r3, #39	@ 0x27
 800a9ac:	2261      	movs	r2, #97	@ 0x61
 800a9ae:	701a      	strb	r2, [r3, #0]
  
  /* Write the number of sample data -----------------------------------------*/
  /* This variable will be written back at the end of the recording operation */
  pHeader[40]  = 0x00;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	3328      	adds	r3, #40	@ 0x28
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	701a      	strb	r2, [r3, #0]
  pHeader[41]  = 0x4C;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	3329      	adds	r3, #41	@ 0x29
 800a9bc:	224c      	movs	r2, #76	@ 0x4c
 800a9be:	701a      	strb	r2, [r3, #0]
  pHeader[42]  = 0x1D;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	332a      	adds	r3, #42	@ 0x2a
 800a9c4:	221d      	movs	r2, #29
 800a9c6:	701a      	strb	r2, [r3, #0]
  pHeader[43]  = 0x00;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	332b      	adds	r3, #43	@ 0x2b
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	701a      	strb	r2, [r3, #0]
  
  /* Return 0 if all operations are OK */
  return 0;
 800a9d0:	2300      	movs	r3, #0
}
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	370c      	adds	r7, #12
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9dc:	4770      	bx	lr
	...

0800a9e0 <WavProcess_HeaderUpdate>:
  * @param  pHeader: Header Buffer to be filled
  * @param  pWaveFormatStruct: Pointer to the wave structure to be filled.
  * @retval 0 if passed, !0 if failed.
  */
static uint32_t WavProcess_HeaderUpdate(uint8_t* pHeader, WAVE_FormatTypeDef* pWaveFormatStruct)
{
 800a9e0:	b480      	push	{r7}
 800a9e2:	b083      	sub	sp, #12
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
 800a9e8:	6039      	str	r1, [r7, #0]
  /* Write the file length ---------------------------------------------------*/
  /* The sampling time: this value will be written back at the end of the 
     recording operation.  Example: 661500 Bytes = 0x000A17FC, byte[7]=0x00, byte[4]=0xFC */
  pHeader[4] = (uint8_t)(BufferCtl.fptr);
 800a9ea:	4b30      	ldr	r3, [pc, #192]	@ (800aaac <WavProcess_HeaderUpdate+0xcc>)
 800a9ec:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800a9f0:	f8d3 280c 	ldr.w	r2, [r3, #2060]	@ 0x80c
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	3304      	adds	r3, #4
 800a9f8:	b2d2      	uxtb	r2, r2
 800a9fa:	701a      	strb	r2, [r3, #0]
  pHeader[5] = (uint8_t)(BufferCtl.fptr >> 8);
 800a9fc:	4b2b      	ldr	r3, [pc, #172]	@ (800aaac <WavProcess_HeaderUpdate+0xcc>)
 800a9fe:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800aa02:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800aa06:	0a1a      	lsrs	r2, r3, #8
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	3305      	adds	r3, #5
 800aa0c:	b2d2      	uxtb	r2, r2
 800aa0e:	701a      	strb	r2, [r3, #0]
  pHeader[6] = (uint8_t)(BufferCtl.fptr >> 16);
 800aa10:	4b26      	ldr	r3, [pc, #152]	@ (800aaac <WavProcess_HeaderUpdate+0xcc>)
 800aa12:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800aa16:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800aa1a:	0c1a      	lsrs	r2, r3, #16
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	3306      	adds	r3, #6
 800aa20:	b2d2      	uxtb	r2, r2
 800aa22:	701a      	strb	r2, [r3, #0]
  pHeader[7] = (uint8_t)(BufferCtl.fptr >> 24);
 800aa24:	4b21      	ldr	r3, [pc, #132]	@ (800aaac <WavProcess_HeaderUpdate+0xcc>)
 800aa26:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800aa2a:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800aa2e:	0e1a      	lsrs	r2, r3, #24
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	3307      	adds	r3, #7
 800aa34:	b2d2      	uxtb	r2, r2
 800aa36:	701a      	strb	r2, [r3, #0]
  /* Write the number of sample data -----------------------------------------*/
  /* This variable will be written back at the end of the recording operation */
  BufferCtl.fptr -=44;
 800aa38:	4b1c      	ldr	r3, [pc, #112]	@ (800aaac <WavProcess_HeaderUpdate+0xcc>)
 800aa3a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800aa3e:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800aa42:	3b2c      	subs	r3, #44	@ 0x2c
 800aa44:	4a19      	ldr	r2, [pc, #100]	@ (800aaac <WavProcess_HeaderUpdate+0xcc>)
 800aa46:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 800aa4a:	f8c2 380c 	str.w	r3, [r2, #2060]	@ 0x80c
  pHeader[40] = (uint8_t)(BufferCtl.fptr); 
 800aa4e:	4b17      	ldr	r3, [pc, #92]	@ (800aaac <WavProcess_HeaderUpdate+0xcc>)
 800aa50:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800aa54:	f8d3 280c 	ldr.w	r2, [r3, #2060]	@ 0x80c
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	3328      	adds	r3, #40	@ 0x28
 800aa5c:	b2d2      	uxtb	r2, r2
 800aa5e:	701a      	strb	r2, [r3, #0]
  pHeader[41] = (uint8_t)(BufferCtl.fptr >> 8);
 800aa60:	4b12      	ldr	r3, [pc, #72]	@ (800aaac <WavProcess_HeaderUpdate+0xcc>)
 800aa62:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800aa66:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800aa6a:	0a1a      	lsrs	r2, r3, #8
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	3329      	adds	r3, #41	@ 0x29
 800aa70:	b2d2      	uxtb	r2, r2
 800aa72:	701a      	strb	r2, [r3, #0]
  pHeader[42] = (uint8_t)(BufferCtl.fptr >> 16);
 800aa74:	4b0d      	ldr	r3, [pc, #52]	@ (800aaac <WavProcess_HeaderUpdate+0xcc>)
 800aa76:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800aa7a:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800aa7e:	0c1a      	lsrs	r2, r3, #16
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	332a      	adds	r3, #42	@ 0x2a
 800aa84:	b2d2      	uxtb	r2, r2
 800aa86:	701a      	strb	r2, [r3, #0]
  pHeader[43] = (uint8_t)(BufferCtl.fptr >> 24); 
 800aa88:	4b08      	ldr	r3, [pc, #32]	@ (800aaac <WavProcess_HeaderUpdate+0xcc>)
 800aa8a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800aa8e:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800aa92:	0e1a      	lsrs	r2, r3, #24
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	332b      	adds	r3, #43	@ 0x2b
 800aa98:	b2d2      	uxtb	r2, r2
 800aa9a:	701a      	strb	r2, [r3, #0]
  
  /* Return 0 if all operations are OK */
  return 0;
 800aa9c:	2300      	movs	r3, #0
}
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	370c      	adds	r7, #12
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa8:	4770      	bx	lr
 800aaaa:	bf00      	nop
 800aaac:	20000948 	.word	0x20000948

0800aab0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800aab4:	4904      	ldr	r1, [pc, #16]	@ (800aac8 <MX_FATFS_Init+0x18>)
 800aab6:	4805      	ldr	r0, [pc, #20]	@ (800aacc <MX_FATFS_Init+0x1c>)
 800aab8:	f003 fb66 	bl	800e188 <FATFS_LinkDriver>
 800aabc:	4603      	mov	r3, r0
 800aabe:	461a      	mov	r2, r3
 800aac0:	4b03      	ldr	r3, [pc, #12]	@ (800aad0 <MX_FATFS_Init+0x20>)
 800aac2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800aac4:	bf00      	nop
 800aac6:	bd80      	pop	{r7, pc}
 800aac8:	200053b8 	.word	0x200053b8
 800aacc:	08010fd8 	.word	0x08010fd8
 800aad0:	200053b4 	.word	0x200053b4

0800aad4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800aad4:	b480      	push	{r7}
 800aad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800aad8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800aada:	4618      	mov	r0, r3
 800aadc:	46bd      	mov	sp, r7
 800aade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae2:	4770      	bx	lr

0800aae4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b082      	sub	sp, #8
 800aae8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800aaea:	2300      	movs	r3, #0
 800aaec:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800aaee:	f000 f888 	bl	800ac02 <BSP_SD_IsDetected>
 800aaf2:	4603      	mov	r3, r0
 800aaf4:	2b01      	cmp	r3, #1
 800aaf6:	d001      	beq.n	800aafc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800aaf8:	2302      	movs	r3, #2
 800aafa:	e005      	b.n	800ab08 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800aafc:	4804      	ldr	r0, [pc, #16]	@ (800ab10 <BSP_SD_Init+0x2c>)
 800aafe:	f7fd f908 	bl	8007d12 <HAL_SD_Init>
 800ab02:	4603      	mov	r3, r0
 800ab04:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800ab06:	79fb      	ldrb	r3, [r7, #7]
}
 800ab08:	4618      	mov	r0, r3
 800ab0a:	3708      	adds	r7, #8
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	bd80      	pop	{r7, pc}
 800ab10:	20000520 	.word	0x20000520

0800ab14 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b086      	sub	sp, #24
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	60f8      	str	r0, [r7, #12]
 800ab1c:	60b9      	str	r1, [r7, #8]
 800ab1e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800ab20:	2300      	movs	r3, #0
 800ab22:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	68ba      	ldr	r2, [r7, #8]
 800ab28:	68f9      	ldr	r1, [r7, #12]
 800ab2a:	4806      	ldr	r0, [pc, #24]	@ (800ab44 <BSP_SD_ReadBlocks_DMA+0x30>)
 800ab2c:	f7fd f9aa 	bl	8007e84 <HAL_SD_ReadBlocks_DMA>
 800ab30:	4603      	mov	r3, r0
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d001      	beq.n	800ab3a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800ab36:	2301      	movs	r3, #1
 800ab38:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ab3a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	3718      	adds	r7, #24
 800ab40:	46bd      	mov	sp, r7
 800ab42:	bd80      	pop	{r7, pc}
 800ab44:	20000520 	.word	0x20000520

0800ab48 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b086      	sub	sp, #24
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	60f8      	str	r0, [r7, #12]
 800ab50:	60b9      	str	r1, [r7, #8]
 800ab52:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800ab54:	2300      	movs	r3, #0
 800ab56:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	68ba      	ldr	r2, [r7, #8]
 800ab5c:	68f9      	ldr	r1, [r7, #12]
 800ab5e:	4806      	ldr	r0, [pc, #24]	@ (800ab78 <BSP_SD_WriteBlocks_DMA+0x30>)
 800ab60:	f7fd fa72 	bl	8008048 <HAL_SD_WriteBlocks_DMA>
 800ab64:	4603      	mov	r3, r0
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d001      	beq.n	800ab6e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800ab6a:	2301      	movs	r3, #1
 800ab6c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ab6e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab70:	4618      	mov	r0, r3
 800ab72:	3718      	adds	r7, #24
 800ab74:	46bd      	mov	sp, r7
 800ab76:	bd80      	pop	{r7, pc}
 800ab78:	20000520 	.word	0x20000520

0800ab7c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800ab80:	4805      	ldr	r0, [pc, #20]	@ (800ab98 <BSP_SD_GetCardState+0x1c>)
 800ab82:	f7fd fe97 	bl	80088b4 <HAL_SD_GetCardState>
 800ab86:	4603      	mov	r3, r0
 800ab88:	2b04      	cmp	r3, #4
 800ab8a:	bf14      	ite	ne
 800ab8c:	2301      	movne	r3, #1
 800ab8e:	2300      	moveq	r3, #0
 800ab90:	b2db      	uxtb	r3, r3
}
 800ab92:	4618      	mov	r0, r3
 800ab94:	bd80      	pop	{r7, pc}
 800ab96:	bf00      	nop
 800ab98:	20000520 	.word	0x20000520

0800ab9c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b082      	sub	sp, #8
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800aba4:	6879      	ldr	r1, [r7, #4]
 800aba6:	4803      	ldr	r0, [pc, #12]	@ (800abb4 <BSP_SD_GetCardInfo+0x18>)
 800aba8:	f7fd fe58 	bl	800885c <HAL_SD_GetCardInfo>
}
 800abac:	bf00      	nop
 800abae:	3708      	adds	r7, #8
 800abb0:	46bd      	mov	sp, r7
 800abb2:	bd80      	pop	{r7, pc}
 800abb4:	20000520 	.word	0x20000520

0800abb8 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	b082      	sub	sp, #8
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800abc0:	f000 f818 	bl	800abf4 <BSP_SD_AbortCallback>
}
 800abc4:	bf00      	nop
 800abc6:	3708      	adds	r7, #8
 800abc8:	46bd      	mov	sp, r7
 800abca:	bd80      	pop	{r7, pc}

0800abcc <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b082      	sub	sp, #8
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800abd4:	f000 f9a8 	bl	800af28 <BSP_SD_WriteCpltCallback>
}
 800abd8:	bf00      	nop
 800abda:	3708      	adds	r7, #8
 800abdc:	46bd      	mov	sp, r7
 800abde:	bd80      	pop	{r7, pc}

0800abe0 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b082      	sub	sp, #8
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800abe8:	f000 f9aa 	bl	800af40 <BSP_SD_ReadCpltCallback>
}
 800abec:	bf00      	nop
 800abee:	3708      	adds	r7, #8
 800abf0:	46bd      	mov	sp, r7
 800abf2:	bd80      	pop	{r7, pc}

0800abf4 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800abf4:	b480      	push	{r7}
 800abf6:	af00      	add	r7, sp, #0

}
 800abf8:	bf00      	nop
 800abfa:	46bd      	mov	sp, r7
 800abfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac00:	4770      	bx	lr

0800ac02 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800ac02:	b580      	push	{r7, lr}
 800ac04:	b082      	sub	sp, #8
 800ac06:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800ac08:	2301      	movs	r3, #1
 800ac0a:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800ac0c:	f000 f80c 	bl	800ac28 <BSP_PlatformIsDetected>
 800ac10:	4603      	mov	r3, r0
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d101      	bne.n	800ac1a <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800ac16:	2300      	movs	r3, #0
 800ac18:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800ac1a:	79fb      	ldrb	r3, [r7, #7]
 800ac1c:	b2db      	uxtb	r3, r3
}
 800ac1e:	4618      	mov	r0, r3
 800ac20:	3708      	adds	r7, #8
 800ac22:	46bd      	mov	sp, r7
 800ac24:	bd80      	pop	{r7, pc}
	...

0800ac28 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b082      	sub	sp, #8
 800ac2c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800ac2e:	2301      	movs	r3, #1
 800ac30:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800ac32:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800ac36:	4806      	ldr	r0, [pc, #24]	@ (800ac50 <BSP_PlatformIsDetected+0x28>)
 800ac38:	f7fa fb72 	bl	8005320 <HAL_GPIO_ReadPin>
 800ac3c:	4603      	mov	r3, r0
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d001      	beq.n	800ac46 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800ac42:	2300      	movs	r3, #0
 800ac44:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800ac46:	79fb      	ldrb	r3, [r7, #7]
}
 800ac48:	4618      	mov	r0, r3
 800ac4a:	3708      	adds	r7, #8
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	bd80      	pop	{r7, pc}
 800ac50:	40020800 	.word	0x40020800

0800ac54 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b084      	sub	sp, #16
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800ac5c:	f7f9 faf2 	bl	8004244 <HAL_GetTick>
 800ac60:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800ac62:	e006      	b.n	800ac72 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ac64:	f7ff ff8a 	bl	800ab7c <BSP_SD_GetCardState>
 800ac68:	4603      	mov	r3, r0
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d101      	bne.n	800ac72 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800ac6e:	2300      	movs	r3, #0
 800ac70:	e009      	b.n	800ac86 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800ac72:	f7f9 fae7 	bl	8004244 <HAL_GetTick>
 800ac76:	4602      	mov	r2, r0
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	1ad3      	subs	r3, r2, r3
 800ac7c:	687a      	ldr	r2, [r7, #4]
 800ac7e:	429a      	cmp	r2, r3
 800ac80:	d8f0      	bhi.n	800ac64 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800ac82:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ac86:	4618      	mov	r0, r3
 800ac88:	3710      	adds	r7, #16
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	bd80      	pop	{r7, pc}
	...

0800ac90 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b082      	sub	sp, #8
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	4603      	mov	r3, r0
 800ac98:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800ac9a:	4b0b      	ldr	r3, [pc, #44]	@ (800acc8 <SD_CheckStatus+0x38>)
 800ac9c:	2201      	movs	r2, #1
 800ac9e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800aca0:	f7ff ff6c 	bl	800ab7c <BSP_SD_GetCardState>
 800aca4:	4603      	mov	r3, r0
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d107      	bne.n	800acba <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800acaa:	4b07      	ldr	r3, [pc, #28]	@ (800acc8 <SD_CheckStatus+0x38>)
 800acac:	781b      	ldrb	r3, [r3, #0]
 800acae:	b2db      	uxtb	r3, r3
 800acb0:	f023 0301 	bic.w	r3, r3, #1
 800acb4:	b2da      	uxtb	r2, r3
 800acb6:	4b04      	ldr	r3, [pc, #16]	@ (800acc8 <SD_CheckStatus+0x38>)
 800acb8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800acba:	4b03      	ldr	r3, [pc, #12]	@ (800acc8 <SD_CheckStatus+0x38>)
 800acbc:	781b      	ldrb	r3, [r3, #0]
 800acbe:	b2db      	uxtb	r3, r3
}
 800acc0:	4618      	mov	r0, r3
 800acc2:	3708      	adds	r7, #8
 800acc4:	46bd      	mov	sp, r7
 800acc6:	bd80      	pop	{r7, pc}
 800acc8:	20000048 	.word	0x20000048

0800accc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b082      	sub	sp, #8
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	4603      	mov	r3, r0
 800acd4:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800acd6:	f7ff ff05 	bl	800aae4 <BSP_SD_Init>
 800acda:	4603      	mov	r3, r0
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d107      	bne.n	800acf0 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800ace0:	79fb      	ldrb	r3, [r7, #7]
 800ace2:	4618      	mov	r0, r3
 800ace4:	f7ff ffd4 	bl	800ac90 <SD_CheckStatus>
 800ace8:	4603      	mov	r3, r0
 800acea:	461a      	mov	r2, r3
 800acec:	4b04      	ldr	r3, [pc, #16]	@ (800ad00 <SD_initialize+0x34>)
 800acee:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800acf0:	4b03      	ldr	r3, [pc, #12]	@ (800ad00 <SD_initialize+0x34>)
 800acf2:	781b      	ldrb	r3, [r3, #0]
 800acf4:	b2db      	uxtb	r3, r3
}
 800acf6:	4618      	mov	r0, r3
 800acf8:	3708      	adds	r7, #8
 800acfa:	46bd      	mov	sp, r7
 800acfc:	bd80      	pop	{r7, pc}
 800acfe:	bf00      	nop
 800ad00:	20000048 	.word	0x20000048

0800ad04 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b082      	sub	sp, #8
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	4603      	mov	r3, r0
 800ad0c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800ad0e:	79fb      	ldrb	r3, [r7, #7]
 800ad10:	4618      	mov	r0, r3
 800ad12:	f7ff ffbd 	bl	800ac90 <SD_CheckStatus>
 800ad16:	4603      	mov	r3, r0
}
 800ad18:	4618      	mov	r0, r3
 800ad1a:	3708      	adds	r7, #8
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	bd80      	pop	{r7, pc}

0800ad20 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b086      	sub	sp, #24
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	60b9      	str	r1, [r7, #8]
 800ad28:	607a      	str	r2, [r7, #4]
 800ad2a:	603b      	str	r3, [r7, #0]
 800ad2c:	4603      	mov	r3, r0
 800ad2e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ad30:	2301      	movs	r3, #1
 800ad32:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800ad34:	f247 5030 	movw	r0, #30000	@ 0x7530
 800ad38:	f7ff ff8c 	bl	800ac54 <SD_CheckStatusWithTimeout>
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	da01      	bge.n	800ad46 <SD_read+0x26>
  {
    return res;
 800ad42:	7dfb      	ldrb	r3, [r7, #23]
 800ad44:	e03b      	b.n	800adbe <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800ad46:	683a      	ldr	r2, [r7, #0]
 800ad48:	6879      	ldr	r1, [r7, #4]
 800ad4a:	68b8      	ldr	r0, [r7, #8]
 800ad4c:	f7ff fee2 	bl	800ab14 <BSP_SD_ReadBlocks_DMA>
 800ad50:	4603      	mov	r3, r0
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d132      	bne.n	800adbc <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800ad56:	4b1c      	ldr	r3, [pc, #112]	@ (800adc8 <SD_read+0xa8>)
 800ad58:	2200      	movs	r2, #0
 800ad5a:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800ad5c:	f7f9 fa72 	bl	8004244 <HAL_GetTick>
 800ad60:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800ad62:	bf00      	nop
 800ad64:	4b18      	ldr	r3, [pc, #96]	@ (800adc8 <SD_read+0xa8>)
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d108      	bne.n	800ad7e <SD_read+0x5e>
 800ad6c:	f7f9 fa6a 	bl	8004244 <HAL_GetTick>
 800ad70:	4602      	mov	r2, r0
 800ad72:	693b      	ldr	r3, [r7, #16]
 800ad74:	1ad3      	subs	r3, r2, r3
 800ad76:	f247 522f 	movw	r2, #29999	@ 0x752f
 800ad7a:	4293      	cmp	r3, r2
 800ad7c:	d9f2      	bls.n	800ad64 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800ad7e:	4b12      	ldr	r3, [pc, #72]	@ (800adc8 <SD_read+0xa8>)
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d102      	bne.n	800ad8c <SD_read+0x6c>
      {
        res = RES_ERROR;
 800ad86:	2301      	movs	r3, #1
 800ad88:	75fb      	strb	r3, [r7, #23]
 800ad8a:	e017      	b.n	800adbc <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800ad8c:	4b0e      	ldr	r3, [pc, #56]	@ (800adc8 <SD_read+0xa8>)
 800ad8e:	2200      	movs	r2, #0
 800ad90:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800ad92:	f7f9 fa57 	bl	8004244 <HAL_GetTick>
 800ad96:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800ad98:	e007      	b.n	800adaa <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ad9a:	f7ff feef 	bl	800ab7c <BSP_SD_GetCardState>
 800ad9e:	4603      	mov	r3, r0
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d102      	bne.n	800adaa <SD_read+0x8a>
          {
            res = RES_OK;
 800ada4:	2300      	movs	r3, #0
 800ada6:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800ada8:	e008      	b.n	800adbc <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800adaa:	f7f9 fa4b 	bl	8004244 <HAL_GetTick>
 800adae:	4602      	mov	r2, r0
 800adb0:	693b      	ldr	r3, [r7, #16]
 800adb2:	1ad3      	subs	r3, r2, r3
 800adb4:	f247 522f 	movw	r2, #29999	@ 0x752f
 800adb8:	4293      	cmp	r3, r2
 800adba:	d9ee      	bls.n	800ad9a <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800adbc:	7dfb      	ldrb	r3, [r7, #23]
}
 800adbe:	4618      	mov	r0, r3
 800adc0:	3718      	adds	r7, #24
 800adc2:	46bd      	mov	sp, r7
 800adc4:	bd80      	pop	{r7, pc}
 800adc6:	bf00      	nop
 800adc8:	200055f0 	.word	0x200055f0

0800adcc <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b086      	sub	sp, #24
 800add0:	af00      	add	r7, sp, #0
 800add2:	60b9      	str	r1, [r7, #8]
 800add4:	607a      	str	r2, [r7, #4]
 800add6:	603b      	str	r3, [r7, #0]
 800add8:	4603      	mov	r3, r0
 800adda:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800addc:	2301      	movs	r3, #1
 800adde:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800ade0:	4b24      	ldr	r3, [pc, #144]	@ (800ae74 <SD_write+0xa8>)
 800ade2:	2200      	movs	r2, #0
 800ade4:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800ade6:	f247 5030 	movw	r0, #30000	@ 0x7530
 800adea:	f7ff ff33 	bl	800ac54 <SD_CheckStatusWithTimeout>
 800adee:	4603      	mov	r3, r0
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	da01      	bge.n	800adf8 <SD_write+0x2c>
  {
    return res;
 800adf4:	7dfb      	ldrb	r3, [r7, #23]
 800adf6:	e038      	b.n	800ae6a <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800adf8:	683a      	ldr	r2, [r7, #0]
 800adfa:	6879      	ldr	r1, [r7, #4]
 800adfc:	68b8      	ldr	r0, [r7, #8]
 800adfe:	f7ff fea3 	bl	800ab48 <BSP_SD_WriteBlocks_DMA>
 800ae02:	4603      	mov	r3, r0
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d12f      	bne.n	800ae68 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800ae08:	f7f9 fa1c 	bl	8004244 <HAL_GetTick>
 800ae0c:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800ae0e:	bf00      	nop
 800ae10:	4b18      	ldr	r3, [pc, #96]	@ (800ae74 <SD_write+0xa8>)
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d108      	bne.n	800ae2a <SD_write+0x5e>
 800ae18:	f7f9 fa14 	bl	8004244 <HAL_GetTick>
 800ae1c:	4602      	mov	r2, r0
 800ae1e:	693b      	ldr	r3, [r7, #16]
 800ae20:	1ad3      	subs	r3, r2, r3
 800ae22:	f247 522f 	movw	r2, #29999	@ 0x752f
 800ae26:	4293      	cmp	r3, r2
 800ae28:	d9f2      	bls.n	800ae10 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800ae2a:	4b12      	ldr	r3, [pc, #72]	@ (800ae74 <SD_write+0xa8>)
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d102      	bne.n	800ae38 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800ae32:	2301      	movs	r3, #1
 800ae34:	75fb      	strb	r3, [r7, #23]
 800ae36:	e017      	b.n	800ae68 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800ae38:	4b0e      	ldr	r3, [pc, #56]	@ (800ae74 <SD_write+0xa8>)
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800ae3e:	f7f9 fa01 	bl	8004244 <HAL_GetTick>
 800ae42:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800ae44:	e007      	b.n	800ae56 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ae46:	f7ff fe99 	bl	800ab7c <BSP_SD_GetCardState>
 800ae4a:	4603      	mov	r3, r0
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d102      	bne.n	800ae56 <SD_write+0x8a>
          {
            res = RES_OK;
 800ae50:	2300      	movs	r3, #0
 800ae52:	75fb      	strb	r3, [r7, #23]
            break;
 800ae54:	e008      	b.n	800ae68 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800ae56:	f7f9 f9f5 	bl	8004244 <HAL_GetTick>
 800ae5a:	4602      	mov	r2, r0
 800ae5c:	693b      	ldr	r3, [r7, #16]
 800ae5e:	1ad3      	subs	r3, r2, r3
 800ae60:	f247 522f 	movw	r2, #29999	@ 0x752f
 800ae64:	4293      	cmp	r3, r2
 800ae66:	d9ee      	bls.n	800ae46 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800ae68:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	3718      	adds	r7, #24
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	bd80      	pop	{r7, pc}
 800ae72:	bf00      	nop
 800ae74:	200055ec 	.word	0x200055ec

0800ae78 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b08c      	sub	sp, #48	@ 0x30
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	4603      	mov	r3, r0
 800ae80:	603a      	str	r2, [r7, #0]
 800ae82:	71fb      	strb	r3, [r7, #7]
 800ae84:	460b      	mov	r3, r1
 800ae86:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800ae88:	2301      	movs	r3, #1
 800ae8a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ae8e:	4b25      	ldr	r3, [pc, #148]	@ (800af24 <SD_ioctl+0xac>)
 800ae90:	781b      	ldrb	r3, [r3, #0]
 800ae92:	b2db      	uxtb	r3, r3
 800ae94:	f003 0301 	and.w	r3, r3, #1
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d001      	beq.n	800aea0 <SD_ioctl+0x28>
 800ae9c:	2303      	movs	r3, #3
 800ae9e:	e03c      	b.n	800af1a <SD_ioctl+0xa2>

  switch (cmd)
 800aea0:	79bb      	ldrb	r3, [r7, #6]
 800aea2:	2b03      	cmp	r3, #3
 800aea4:	d834      	bhi.n	800af10 <SD_ioctl+0x98>
 800aea6:	a201      	add	r2, pc, #4	@ (adr r2, 800aeac <SD_ioctl+0x34>)
 800aea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aeac:	0800aebd 	.word	0x0800aebd
 800aeb0:	0800aec5 	.word	0x0800aec5
 800aeb4:	0800aedd 	.word	0x0800aedd
 800aeb8:	0800aef7 	.word	0x0800aef7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800aebc:	2300      	movs	r3, #0
 800aebe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800aec2:	e028      	b.n	800af16 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800aec4:	f107 030c 	add.w	r3, r7, #12
 800aec8:	4618      	mov	r0, r3
 800aeca:	f7ff fe67 	bl	800ab9c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800aece:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aed0:	683b      	ldr	r3, [r7, #0]
 800aed2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800aed4:	2300      	movs	r3, #0
 800aed6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800aeda:	e01c      	b.n	800af16 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800aedc:	f107 030c 	add.w	r3, r7, #12
 800aee0:	4618      	mov	r0, r3
 800aee2:	f7ff fe5b 	bl	800ab9c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800aee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aee8:	b29a      	uxth	r2, r3
 800aeea:	683b      	ldr	r3, [r7, #0]
 800aeec:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800aeee:	2300      	movs	r3, #0
 800aef0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800aef4:	e00f      	b.n	800af16 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800aef6:	f107 030c 	add.w	r3, r7, #12
 800aefa:	4618      	mov	r0, r3
 800aefc:	f7ff fe4e 	bl	800ab9c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800af00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af02:	0a5a      	lsrs	r2, r3, #9
 800af04:	683b      	ldr	r3, [r7, #0]
 800af06:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800af08:	2300      	movs	r3, #0
 800af0a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800af0e:	e002      	b.n	800af16 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800af10:	2304      	movs	r3, #4
 800af12:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800af16:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800af1a:	4618      	mov	r0, r3
 800af1c:	3730      	adds	r7, #48	@ 0x30
 800af1e:	46bd      	mov	sp, r7
 800af20:	bd80      	pop	{r7, pc}
 800af22:	bf00      	nop
 800af24:	20000048 	.word	0x20000048

0800af28 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800af28:	b480      	push	{r7}
 800af2a:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800af2c:	4b03      	ldr	r3, [pc, #12]	@ (800af3c <BSP_SD_WriteCpltCallback+0x14>)
 800af2e:	2201      	movs	r2, #1
 800af30:	601a      	str	r2, [r3, #0]
}
 800af32:	bf00      	nop
 800af34:	46bd      	mov	sp, r7
 800af36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3a:	4770      	bx	lr
 800af3c:	200055ec 	.word	0x200055ec

0800af40 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800af40:	b480      	push	{r7}
 800af42:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800af44:	4b03      	ldr	r3, [pc, #12]	@ (800af54 <BSP_SD_ReadCpltCallback+0x14>)
 800af46:	2201      	movs	r2, #1
 800af48:	601a      	str	r2, [r3, #0]
}
 800af4a:	bf00      	nop
 800af4c:	46bd      	mov	sp, r7
 800af4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af52:	4770      	bx	lr
 800af54:	200055f0 	.word	0x200055f0

0800af58 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b084      	sub	sp, #16
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	4603      	mov	r3, r0
 800af60:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800af62:	79fb      	ldrb	r3, [r7, #7]
 800af64:	4a08      	ldr	r2, [pc, #32]	@ (800af88 <disk_status+0x30>)
 800af66:	009b      	lsls	r3, r3, #2
 800af68:	4413      	add	r3, r2
 800af6a:	685b      	ldr	r3, [r3, #4]
 800af6c:	685b      	ldr	r3, [r3, #4]
 800af6e:	79fa      	ldrb	r2, [r7, #7]
 800af70:	4905      	ldr	r1, [pc, #20]	@ (800af88 <disk_status+0x30>)
 800af72:	440a      	add	r2, r1
 800af74:	7a12      	ldrb	r2, [r2, #8]
 800af76:	4610      	mov	r0, r2
 800af78:	4798      	blx	r3
 800af7a:	4603      	mov	r3, r0
 800af7c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800af7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800af80:	4618      	mov	r0, r3
 800af82:	3710      	adds	r7, #16
 800af84:	46bd      	mov	sp, r7
 800af86:	bd80      	pop	{r7, pc}
 800af88:	2000561c 	.word	0x2000561c

0800af8c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b084      	sub	sp, #16
 800af90:	af00      	add	r7, sp, #0
 800af92:	4603      	mov	r3, r0
 800af94:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800af96:	2300      	movs	r3, #0
 800af98:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800af9a:	79fb      	ldrb	r3, [r7, #7]
 800af9c:	4a0d      	ldr	r2, [pc, #52]	@ (800afd4 <disk_initialize+0x48>)
 800af9e:	5cd3      	ldrb	r3, [r2, r3]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d111      	bne.n	800afc8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800afa4:	79fb      	ldrb	r3, [r7, #7]
 800afa6:	4a0b      	ldr	r2, [pc, #44]	@ (800afd4 <disk_initialize+0x48>)
 800afa8:	2101      	movs	r1, #1
 800afaa:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800afac:	79fb      	ldrb	r3, [r7, #7]
 800afae:	4a09      	ldr	r2, [pc, #36]	@ (800afd4 <disk_initialize+0x48>)
 800afb0:	009b      	lsls	r3, r3, #2
 800afb2:	4413      	add	r3, r2
 800afb4:	685b      	ldr	r3, [r3, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	79fa      	ldrb	r2, [r7, #7]
 800afba:	4906      	ldr	r1, [pc, #24]	@ (800afd4 <disk_initialize+0x48>)
 800afbc:	440a      	add	r2, r1
 800afbe:	7a12      	ldrb	r2, [r2, #8]
 800afc0:	4610      	mov	r0, r2
 800afc2:	4798      	blx	r3
 800afc4:	4603      	mov	r3, r0
 800afc6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800afc8:	7bfb      	ldrb	r3, [r7, #15]
}
 800afca:	4618      	mov	r0, r3
 800afcc:	3710      	adds	r7, #16
 800afce:	46bd      	mov	sp, r7
 800afd0:	bd80      	pop	{r7, pc}
 800afd2:	bf00      	nop
 800afd4:	2000561c 	.word	0x2000561c

0800afd8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800afd8:	b590      	push	{r4, r7, lr}
 800afda:	b087      	sub	sp, #28
 800afdc:	af00      	add	r7, sp, #0
 800afde:	60b9      	str	r1, [r7, #8]
 800afe0:	607a      	str	r2, [r7, #4]
 800afe2:	603b      	str	r3, [r7, #0]
 800afe4:	4603      	mov	r3, r0
 800afe6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800afe8:	7bfb      	ldrb	r3, [r7, #15]
 800afea:	4a0a      	ldr	r2, [pc, #40]	@ (800b014 <disk_read+0x3c>)
 800afec:	009b      	lsls	r3, r3, #2
 800afee:	4413      	add	r3, r2
 800aff0:	685b      	ldr	r3, [r3, #4]
 800aff2:	689c      	ldr	r4, [r3, #8]
 800aff4:	7bfb      	ldrb	r3, [r7, #15]
 800aff6:	4a07      	ldr	r2, [pc, #28]	@ (800b014 <disk_read+0x3c>)
 800aff8:	4413      	add	r3, r2
 800affa:	7a18      	ldrb	r0, [r3, #8]
 800affc:	683b      	ldr	r3, [r7, #0]
 800affe:	687a      	ldr	r2, [r7, #4]
 800b000:	68b9      	ldr	r1, [r7, #8]
 800b002:	47a0      	blx	r4
 800b004:	4603      	mov	r3, r0
 800b006:	75fb      	strb	r3, [r7, #23]
  return res;
 800b008:	7dfb      	ldrb	r3, [r7, #23]
}
 800b00a:	4618      	mov	r0, r3
 800b00c:	371c      	adds	r7, #28
 800b00e:	46bd      	mov	sp, r7
 800b010:	bd90      	pop	{r4, r7, pc}
 800b012:	bf00      	nop
 800b014:	2000561c 	.word	0x2000561c

0800b018 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b018:	b590      	push	{r4, r7, lr}
 800b01a:	b087      	sub	sp, #28
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	60b9      	str	r1, [r7, #8]
 800b020:	607a      	str	r2, [r7, #4]
 800b022:	603b      	str	r3, [r7, #0]
 800b024:	4603      	mov	r3, r0
 800b026:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b028:	7bfb      	ldrb	r3, [r7, #15]
 800b02a:	4a0a      	ldr	r2, [pc, #40]	@ (800b054 <disk_write+0x3c>)
 800b02c:	009b      	lsls	r3, r3, #2
 800b02e:	4413      	add	r3, r2
 800b030:	685b      	ldr	r3, [r3, #4]
 800b032:	68dc      	ldr	r4, [r3, #12]
 800b034:	7bfb      	ldrb	r3, [r7, #15]
 800b036:	4a07      	ldr	r2, [pc, #28]	@ (800b054 <disk_write+0x3c>)
 800b038:	4413      	add	r3, r2
 800b03a:	7a18      	ldrb	r0, [r3, #8]
 800b03c:	683b      	ldr	r3, [r7, #0]
 800b03e:	687a      	ldr	r2, [r7, #4]
 800b040:	68b9      	ldr	r1, [r7, #8]
 800b042:	47a0      	blx	r4
 800b044:	4603      	mov	r3, r0
 800b046:	75fb      	strb	r3, [r7, #23]
  return res;
 800b048:	7dfb      	ldrb	r3, [r7, #23]
}
 800b04a:	4618      	mov	r0, r3
 800b04c:	371c      	adds	r7, #28
 800b04e:	46bd      	mov	sp, r7
 800b050:	bd90      	pop	{r4, r7, pc}
 800b052:	bf00      	nop
 800b054:	2000561c 	.word	0x2000561c

0800b058 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	b084      	sub	sp, #16
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	4603      	mov	r3, r0
 800b060:	603a      	str	r2, [r7, #0]
 800b062:	71fb      	strb	r3, [r7, #7]
 800b064:	460b      	mov	r3, r1
 800b066:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b068:	79fb      	ldrb	r3, [r7, #7]
 800b06a:	4a09      	ldr	r2, [pc, #36]	@ (800b090 <disk_ioctl+0x38>)
 800b06c:	009b      	lsls	r3, r3, #2
 800b06e:	4413      	add	r3, r2
 800b070:	685b      	ldr	r3, [r3, #4]
 800b072:	691b      	ldr	r3, [r3, #16]
 800b074:	79fa      	ldrb	r2, [r7, #7]
 800b076:	4906      	ldr	r1, [pc, #24]	@ (800b090 <disk_ioctl+0x38>)
 800b078:	440a      	add	r2, r1
 800b07a:	7a10      	ldrb	r0, [r2, #8]
 800b07c:	79b9      	ldrb	r1, [r7, #6]
 800b07e:	683a      	ldr	r2, [r7, #0]
 800b080:	4798      	blx	r3
 800b082:	4603      	mov	r3, r0
 800b084:	73fb      	strb	r3, [r7, #15]
  return res;
 800b086:	7bfb      	ldrb	r3, [r7, #15]
}
 800b088:	4618      	mov	r0, r3
 800b08a:	3710      	adds	r7, #16
 800b08c:	46bd      	mov	sp, r7
 800b08e:	bd80      	pop	{r7, pc}
 800b090:	2000561c 	.word	0x2000561c

0800b094 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b094:	b480      	push	{r7}
 800b096:	b085      	sub	sp, #20
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	3301      	adds	r3, #1
 800b0a0:	781b      	ldrb	r3, [r3, #0]
 800b0a2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b0a4:	89fb      	ldrh	r3, [r7, #14]
 800b0a6:	021b      	lsls	r3, r3, #8
 800b0a8:	b21a      	sxth	r2, r3
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	781b      	ldrb	r3, [r3, #0]
 800b0ae:	b21b      	sxth	r3, r3
 800b0b0:	4313      	orrs	r3, r2
 800b0b2:	b21b      	sxth	r3, r3
 800b0b4:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b0b6:	89fb      	ldrh	r3, [r7, #14]
}
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	3714      	adds	r7, #20
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c2:	4770      	bx	lr

0800b0c4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b0c4:	b480      	push	{r7}
 800b0c6:	b085      	sub	sp, #20
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	3303      	adds	r3, #3
 800b0d0:	781b      	ldrb	r3, [r3, #0]
 800b0d2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	021b      	lsls	r3, r3, #8
 800b0d8:	687a      	ldr	r2, [r7, #4]
 800b0da:	3202      	adds	r2, #2
 800b0dc:	7812      	ldrb	r2, [r2, #0]
 800b0de:	4313      	orrs	r3, r2
 800b0e0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	021b      	lsls	r3, r3, #8
 800b0e6:	687a      	ldr	r2, [r7, #4]
 800b0e8:	3201      	adds	r2, #1
 800b0ea:	7812      	ldrb	r2, [r2, #0]
 800b0ec:	4313      	orrs	r3, r2
 800b0ee:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	021b      	lsls	r3, r3, #8
 800b0f4:	687a      	ldr	r2, [r7, #4]
 800b0f6:	7812      	ldrb	r2, [r2, #0]
 800b0f8:	4313      	orrs	r3, r2
 800b0fa:	60fb      	str	r3, [r7, #12]
	return rv;
 800b0fc:	68fb      	ldr	r3, [r7, #12]
}
 800b0fe:	4618      	mov	r0, r3
 800b100:	3714      	adds	r7, #20
 800b102:	46bd      	mov	sp, r7
 800b104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b108:	4770      	bx	lr

0800b10a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b10a:	b480      	push	{r7}
 800b10c:	b083      	sub	sp, #12
 800b10e:	af00      	add	r7, sp, #0
 800b110:	6078      	str	r0, [r7, #4]
 800b112:	460b      	mov	r3, r1
 800b114:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	1c5a      	adds	r2, r3, #1
 800b11a:	607a      	str	r2, [r7, #4]
 800b11c:	887a      	ldrh	r2, [r7, #2]
 800b11e:	b2d2      	uxtb	r2, r2
 800b120:	701a      	strb	r2, [r3, #0]
 800b122:	887b      	ldrh	r3, [r7, #2]
 800b124:	0a1b      	lsrs	r3, r3, #8
 800b126:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	1c5a      	adds	r2, r3, #1
 800b12c:	607a      	str	r2, [r7, #4]
 800b12e:	887a      	ldrh	r2, [r7, #2]
 800b130:	b2d2      	uxtb	r2, r2
 800b132:	701a      	strb	r2, [r3, #0]
}
 800b134:	bf00      	nop
 800b136:	370c      	adds	r7, #12
 800b138:	46bd      	mov	sp, r7
 800b13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13e:	4770      	bx	lr

0800b140 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800b140:	b480      	push	{r7}
 800b142:	b083      	sub	sp, #12
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
 800b148:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	1c5a      	adds	r2, r3, #1
 800b14e:	607a      	str	r2, [r7, #4]
 800b150:	683a      	ldr	r2, [r7, #0]
 800b152:	b2d2      	uxtb	r2, r2
 800b154:	701a      	strb	r2, [r3, #0]
 800b156:	683b      	ldr	r3, [r7, #0]
 800b158:	0a1b      	lsrs	r3, r3, #8
 800b15a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	1c5a      	adds	r2, r3, #1
 800b160:	607a      	str	r2, [r7, #4]
 800b162:	683a      	ldr	r2, [r7, #0]
 800b164:	b2d2      	uxtb	r2, r2
 800b166:	701a      	strb	r2, [r3, #0]
 800b168:	683b      	ldr	r3, [r7, #0]
 800b16a:	0a1b      	lsrs	r3, r3, #8
 800b16c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	1c5a      	adds	r2, r3, #1
 800b172:	607a      	str	r2, [r7, #4]
 800b174:	683a      	ldr	r2, [r7, #0]
 800b176:	b2d2      	uxtb	r2, r2
 800b178:	701a      	strb	r2, [r3, #0]
 800b17a:	683b      	ldr	r3, [r7, #0]
 800b17c:	0a1b      	lsrs	r3, r3, #8
 800b17e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	1c5a      	adds	r2, r3, #1
 800b184:	607a      	str	r2, [r7, #4]
 800b186:	683a      	ldr	r2, [r7, #0]
 800b188:	b2d2      	uxtb	r2, r2
 800b18a:	701a      	strb	r2, [r3, #0]
}
 800b18c:	bf00      	nop
 800b18e:	370c      	adds	r7, #12
 800b190:	46bd      	mov	sp, r7
 800b192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b196:	4770      	bx	lr

0800b198 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800b198:	b480      	push	{r7}
 800b19a:	b087      	sub	sp, #28
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	60f8      	str	r0, [r7, #12]
 800b1a0:	60b9      	str	r1, [r7, #8]
 800b1a2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800b1a8:	68bb      	ldr	r3, [r7, #8]
 800b1aa:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d00d      	beq.n	800b1ce <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800b1b2:	693a      	ldr	r2, [r7, #16]
 800b1b4:	1c53      	adds	r3, r2, #1
 800b1b6:	613b      	str	r3, [r7, #16]
 800b1b8:	697b      	ldr	r3, [r7, #20]
 800b1ba:	1c59      	adds	r1, r3, #1
 800b1bc:	6179      	str	r1, [r7, #20]
 800b1be:	7812      	ldrb	r2, [r2, #0]
 800b1c0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	3b01      	subs	r3, #1
 800b1c6:	607b      	str	r3, [r7, #4]
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d1f1      	bne.n	800b1b2 <mem_cpy+0x1a>
	}
}
 800b1ce:	bf00      	nop
 800b1d0:	371c      	adds	r7, #28
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d8:	4770      	bx	lr

0800b1da <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b1da:	b480      	push	{r7}
 800b1dc:	b087      	sub	sp, #28
 800b1de:	af00      	add	r7, sp, #0
 800b1e0:	60f8      	str	r0, [r7, #12]
 800b1e2:	60b9      	str	r1, [r7, #8]
 800b1e4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800b1ea:	697b      	ldr	r3, [r7, #20]
 800b1ec:	1c5a      	adds	r2, r3, #1
 800b1ee:	617a      	str	r2, [r7, #20]
 800b1f0:	68ba      	ldr	r2, [r7, #8]
 800b1f2:	b2d2      	uxtb	r2, r2
 800b1f4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	3b01      	subs	r3, #1
 800b1fa:	607b      	str	r3, [r7, #4]
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d1f3      	bne.n	800b1ea <mem_set+0x10>
}
 800b202:	bf00      	nop
 800b204:	bf00      	nop
 800b206:	371c      	adds	r7, #28
 800b208:	46bd      	mov	sp, r7
 800b20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20e:	4770      	bx	lr

0800b210 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800b210:	b480      	push	{r7}
 800b212:	b089      	sub	sp, #36	@ 0x24
 800b214:	af00      	add	r7, sp, #0
 800b216:	60f8      	str	r0, [r7, #12]
 800b218:	60b9      	str	r1, [r7, #8]
 800b21a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	61fb      	str	r3, [r7, #28]
 800b220:	68bb      	ldr	r3, [r7, #8]
 800b222:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b224:	2300      	movs	r3, #0
 800b226:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800b228:	69fb      	ldr	r3, [r7, #28]
 800b22a:	1c5a      	adds	r2, r3, #1
 800b22c:	61fa      	str	r2, [r7, #28]
 800b22e:	781b      	ldrb	r3, [r3, #0]
 800b230:	4619      	mov	r1, r3
 800b232:	69bb      	ldr	r3, [r7, #24]
 800b234:	1c5a      	adds	r2, r3, #1
 800b236:	61ba      	str	r2, [r7, #24]
 800b238:	781b      	ldrb	r3, [r3, #0]
 800b23a:	1acb      	subs	r3, r1, r3
 800b23c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	3b01      	subs	r3, #1
 800b242:	607b      	str	r3, [r7, #4]
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d002      	beq.n	800b250 <mem_cmp+0x40>
 800b24a:	697b      	ldr	r3, [r7, #20]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d0eb      	beq.n	800b228 <mem_cmp+0x18>

	return r;
 800b250:	697b      	ldr	r3, [r7, #20]
}
 800b252:	4618      	mov	r0, r3
 800b254:	3724      	adds	r7, #36	@ 0x24
 800b256:	46bd      	mov	sp, r7
 800b258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25c:	4770      	bx	lr

0800b25e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800b25e:	b480      	push	{r7}
 800b260:	b083      	sub	sp, #12
 800b262:	af00      	add	r7, sp, #0
 800b264:	6078      	str	r0, [r7, #4]
 800b266:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b268:	e002      	b.n	800b270 <chk_chr+0x12>
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	3301      	adds	r3, #1
 800b26e:	607b      	str	r3, [r7, #4]
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	781b      	ldrb	r3, [r3, #0]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d005      	beq.n	800b284 <chk_chr+0x26>
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	781b      	ldrb	r3, [r3, #0]
 800b27c:	461a      	mov	r2, r3
 800b27e:	683b      	ldr	r3, [r7, #0]
 800b280:	4293      	cmp	r3, r2
 800b282:	d1f2      	bne.n	800b26a <chk_chr+0xc>
	return *str;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	781b      	ldrb	r3, [r3, #0]
}
 800b288:	4618      	mov	r0, r3
 800b28a:	370c      	adds	r7, #12
 800b28c:	46bd      	mov	sp, r7
 800b28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b292:	4770      	bx	lr

0800b294 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b294:	b480      	push	{r7}
 800b296:	b085      	sub	sp, #20
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
 800b29c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b29e:	2300      	movs	r3, #0
 800b2a0:	60bb      	str	r3, [r7, #8]
 800b2a2:	68bb      	ldr	r3, [r7, #8]
 800b2a4:	60fb      	str	r3, [r7, #12]
 800b2a6:	e029      	b.n	800b2fc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800b2a8:	4a27      	ldr	r2, [pc, #156]	@ (800b348 <chk_lock+0xb4>)
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	011b      	lsls	r3, r3, #4
 800b2ae:	4413      	add	r3, r2
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d01d      	beq.n	800b2f2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b2b6:	4a24      	ldr	r2, [pc, #144]	@ (800b348 <chk_lock+0xb4>)
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	011b      	lsls	r3, r3, #4
 800b2bc:	4413      	add	r3, r2
 800b2be:	681a      	ldr	r2, [r3, #0]
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	429a      	cmp	r2, r3
 800b2c6:	d116      	bne.n	800b2f6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800b2c8:	4a1f      	ldr	r2, [pc, #124]	@ (800b348 <chk_lock+0xb4>)
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	011b      	lsls	r3, r3, #4
 800b2ce:	4413      	add	r3, r2
 800b2d0:	3304      	adds	r3, #4
 800b2d2:	681a      	ldr	r2, [r3, #0]
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b2d8:	429a      	cmp	r2, r3
 800b2da:	d10c      	bne.n	800b2f6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b2dc:	4a1a      	ldr	r2, [pc, #104]	@ (800b348 <chk_lock+0xb4>)
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	011b      	lsls	r3, r3, #4
 800b2e2:	4413      	add	r3, r2
 800b2e4:	3308      	adds	r3, #8
 800b2e6:	681a      	ldr	r2, [r3, #0]
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800b2ec:	429a      	cmp	r2, r3
 800b2ee:	d102      	bne.n	800b2f6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b2f0:	e007      	b.n	800b302 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800b2f2:	2301      	movs	r3, #1
 800b2f4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	3301      	adds	r3, #1
 800b2fa:	60fb      	str	r3, [r7, #12]
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	2b01      	cmp	r3, #1
 800b300:	d9d2      	bls.n	800b2a8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	2b02      	cmp	r3, #2
 800b306:	d109      	bne.n	800b31c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800b308:	68bb      	ldr	r3, [r7, #8]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d102      	bne.n	800b314 <chk_lock+0x80>
 800b30e:	683b      	ldr	r3, [r7, #0]
 800b310:	2b02      	cmp	r3, #2
 800b312:	d101      	bne.n	800b318 <chk_lock+0x84>
 800b314:	2300      	movs	r3, #0
 800b316:	e010      	b.n	800b33a <chk_lock+0xa6>
 800b318:	2312      	movs	r3, #18
 800b31a:	e00e      	b.n	800b33a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800b31c:	683b      	ldr	r3, [r7, #0]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d108      	bne.n	800b334 <chk_lock+0xa0>
 800b322:	4a09      	ldr	r2, [pc, #36]	@ (800b348 <chk_lock+0xb4>)
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	011b      	lsls	r3, r3, #4
 800b328:	4413      	add	r3, r2
 800b32a:	330c      	adds	r3, #12
 800b32c:	881b      	ldrh	r3, [r3, #0]
 800b32e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b332:	d101      	bne.n	800b338 <chk_lock+0xa4>
 800b334:	2310      	movs	r3, #16
 800b336:	e000      	b.n	800b33a <chk_lock+0xa6>
 800b338:	2300      	movs	r3, #0
}
 800b33a:	4618      	mov	r0, r3
 800b33c:	3714      	adds	r7, #20
 800b33e:	46bd      	mov	sp, r7
 800b340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b344:	4770      	bx	lr
 800b346:	bf00      	nop
 800b348:	200055fc 	.word	0x200055fc

0800b34c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800b34c:	b480      	push	{r7}
 800b34e:	b083      	sub	sp, #12
 800b350:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b352:	2300      	movs	r3, #0
 800b354:	607b      	str	r3, [r7, #4]
 800b356:	e002      	b.n	800b35e <enq_lock+0x12>
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	3301      	adds	r3, #1
 800b35c:	607b      	str	r3, [r7, #4]
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	2b01      	cmp	r3, #1
 800b362:	d806      	bhi.n	800b372 <enq_lock+0x26>
 800b364:	4a09      	ldr	r2, [pc, #36]	@ (800b38c <enq_lock+0x40>)
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	011b      	lsls	r3, r3, #4
 800b36a:	4413      	add	r3, r2
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d1f2      	bne.n	800b358 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	2b02      	cmp	r3, #2
 800b376:	bf14      	ite	ne
 800b378:	2301      	movne	r3, #1
 800b37a:	2300      	moveq	r3, #0
 800b37c:	b2db      	uxtb	r3, r3
}
 800b37e:	4618      	mov	r0, r3
 800b380:	370c      	adds	r7, #12
 800b382:	46bd      	mov	sp, r7
 800b384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b388:	4770      	bx	lr
 800b38a:	bf00      	nop
 800b38c:	200055fc 	.word	0x200055fc

0800b390 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b390:	b480      	push	{r7}
 800b392:	b085      	sub	sp, #20
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
 800b398:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b39a:	2300      	movs	r3, #0
 800b39c:	60fb      	str	r3, [r7, #12]
 800b39e:	e01f      	b.n	800b3e0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800b3a0:	4a41      	ldr	r2, [pc, #260]	@ (800b4a8 <inc_lock+0x118>)
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	011b      	lsls	r3, r3, #4
 800b3a6:	4413      	add	r3, r2
 800b3a8:	681a      	ldr	r2, [r3, #0]
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	429a      	cmp	r2, r3
 800b3b0:	d113      	bne.n	800b3da <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800b3b2:	4a3d      	ldr	r2, [pc, #244]	@ (800b4a8 <inc_lock+0x118>)
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	011b      	lsls	r3, r3, #4
 800b3b8:	4413      	add	r3, r2
 800b3ba:	3304      	adds	r3, #4
 800b3bc:	681a      	ldr	r2, [r3, #0]
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800b3c2:	429a      	cmp	r2, r3
 800b3c4:	d109      	bne.n	800b3da <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800b3c6:	4a38      	ldr	r2, [pc, #224]	@ (800b4a8 <inc_lock+0x118>)
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	011b      	lsls	r3, r3, #4
 800b3cc:	4413      	add	r3, r2
 800b3ce:	3308      	adds	r3, #8
 800b3d0:	681a      	ldr	r2, [r3, #0]
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800b3d6:	429a      	cmp	r2, r3
 800b3d8:	d006      	beq.n	800b3e8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	3301      	adds	r3, #1
 800b3de:	60fb      	str	r3, [r7, #12]
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	2b01      	cmp	r3, #1
 800b3e4:	d9dc      	bls.n	800b3a0 <inc_lock+0x10>
 800b3e6:	e000      	b.n	800b3ea <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800b3e8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	2b02      	cmp	r3, #2
 800b3ee:	d132      	bne.n	800b456 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	60fb      	str	r3, [r7, #12]
 800b3f4:	e002      	b.n	800b3fc <inc_lock+0x6c>
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	3301      	adds	r3, #1
 800b3fa:	60fb      	str	r3, [r7, #12]
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	2b01      	cmp	r3, #1
 800b400:	d806      	bhi.n	800b410 <inc_lock+0x80>
 800b402:	4a29      	ldr	r2, [pc, #164]	@ (800b4a8 <inc_lock+0x118>)
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	011b      	lsls	r3, r3, #4
 800b408:	4413      	add	r3, r2
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d1f2      	bne.n	800b3f6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	2b02      	cmp	r3, #2
 800b414:	d101      	bne.n	800b41a <inc_lock+0x8a>
 800b416:	2300      	movs	r3, #0
 800b418:	e040      	b.n	800b49c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681a      	ldr	r2, [r3, #0]
 800b41e:	4922      	ldr	r1, [pc, #136]	@ (800b4a8 <inc_lock+0x118>)
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	011b      	lsls	r3, r3, #4
 800b424:	440b      	add	r3, r1
 800b426:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	689a      	ldr	r2, [r3, #8]
 800b42c:	491e      	ldr	r1, [pc, #120]	@ (800b4a8 <inc_lock+0x118>)
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	011b      	lsls	r3, r3, #4
 800b432:	440b      	add	r3, r1
 800b434:	3304      	adds	r3, #4
 800b436:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	695a      	ldr	r2, [r3, #20]
 800b43c:	491a      	ldr	r1, [pc, #104]	@ (800b4a8 <inc_lock+0x118>)
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	011b      	lsls	r3, r3, #4
 800b442:	440b      	add	r3, r1
 800b444:	3308      	adds	r3, #8
 800b446:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800b448:	4a17      	ldr	r2, [pc, #92]	@ (800b4a8 <inc_lock+0x118>)
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	011b      	lsls	r3, r3, #4
 800b44e:	4413      	add	r3, r2
 800b450:	330c      	adds	r3, #12
 800b452:	2200      	movs	r2, #0
 800b454:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b456:	683b      	ldr	r3, [r7, #0]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d009      	beq.n	800b470 <inc_lock+0xe0>
 800b45c:	4a12      	ldr	r2, [pc, #72]	@ (800b4a8 <inc_lock+0x118>)
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	011b      	lsls	r3, r3, #4
 800b462:	4413      	add	r3, r2
 800b464:	330c      	adds	r3, #12
 800b466:	881b      	ldrh	r3, [r3, #0]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d001      	beq.n	800b470 <inc_lock+0xe0>
 800b46c:	2300      	movs	r3, #0
 800b46e:	e015      	b.n	800b49c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b470:	683b      	ldr	r3, [r7, #0]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d108      	bne.n	800b488 <inc_lock+0xf8>
 800b476:	4a0c      	ldr	r2, [pc, #48]	@ (800b4a8 <inc_lock+0x118>)
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	011b      	lsls	r3, r3, #4
 800b47c:	4413      	add	r3, r2
 800b47e:	330c      	adds	r3, #12
 800b480:	881b      	ldrh	r3, [r3, #0]
 800b482:	3301      	adds	r3, #1
 800b484:	b29a      	uxth	r2, r3
 800b486:	e001      	b.n	800b48c <inc_lock+0xfc>
 800b488:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b48c:	4906      	ldr	r1, [pc, #24]	@ (800b4a8 <inc_lock+0x118>)
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	011b      	lsls	r3, r3, #4
 800b492:	440b      	add	r3, r1
 800b494:	330c      	adds	r3, #12
 800b496:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	3301      	adds	r3, #1
}
 800b49c:	4618      	mov	r0, r3
 800b49e:	3714      	adds	r7, #20
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a6:	4770      	bx	lr
 800b4a8:	200055fc 	.word	0x200055fc

0800b4ac <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800b4ac:	b480      	push	{r7}
 800b4ae:	b085      	sub	sp, #20
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	3b01      	subs	r3, #1
 800b4b8:	607b      	str	r3, [r7, #4]
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	2b01      	cmp	r3, #1
 800b4be:	d825      	bhi.n	800b50c <dec_lock+0x60>
		n = Files[i].ctr;
 800b4c0:	4a17      	ldr	r2, [pc, #92]	@ (800b520 <dec_lock+0x74>)
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	011b      	lsls	r3, r3, #4
 800b4c6:	4413      	add	r3, r2
 800b4c8:	330c      	adds	r3, #12
 800b4ca:	881b      	ldrh	r3, [r3, #0]
 800b4cc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800b4ce:	89fb      	ldrh	r3, [r7, #14]
 800b4d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b4d4:	d101      	bne.n	800b4da <dec_lock+0x2e>
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800b4da:	89fb      	ldrh	r3, [r7, #14]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d002      	beq.n	800b4e6 <dec_lock+0x3a>
 800b4e0:	89fb      	ldrh	r3, [r7, #14]
 800b4e2:	3b01      	subs	r3, #1
 800b4e4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800b4e6:	4a0e      	ldr	r2, [pc, #56]	@ (800b520 <dec_lock+0x74>)
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	011b      	lsls	r3, r3, #4
 800b4ec:	4413      	add	r3, r2
 800b4ee:	330c      	adds	r3, #12
 800b4f0:	89fa      	ldrh	r2, [r7, #14]
 800b4f2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800b4f4:	89fb      	ldrh	r3, [r7, #14]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d105      	bne.n	800b506 <dec_lock+0x5a>
 800b4fa:	4a09      	ldr	r2, [pc, #36]	@ (800b520 <dec_lock+0x74>)
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	011b      	lsls	r3, r3, #4
 800b500:	4413      	add	r3, r2
 800b502:	2200      	movs	r2, #0
 800b504:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800b506:	2300      	movs	r3, #0
 800b508:	737b      	strb	r3, [r7, #13]
 800b50a:	e001      	b.n	800b510 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800b50c:	2302      	movs	r3, #2
 800b50e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800b510:	7b7b      	ldrb	r3, [r7, #13]
}
 800b512:	4618      	mov	r0, r3
 800b514:	3714      	adds	r7, #20
 800b516:	46bd      	mov	sp, r7
 800b518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51c:	4770      	bx	lr
 800b51e:	bf00      	nop
 800b520:	200055fc 	.word	0x200055fc

0800b524 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800b524:	b480      	push	{r7}
 800b526:	b085      	sub	sp, #20
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800b52c:	2300      	movs	r3, #0
 800b52e:	60fb      	str	r3, [r7, #12]
 800b530:	e010      	b.n	800b554 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b532:	4a0d      	ldr	r2, [pc, #52]	@ (800b568 <clear_lock+0x44>)
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	011b      	lsls	r3, r3, #4
 800b538:	4413      	add	r3, r2
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	687a      	ldr	r2, [r7, #4]
 800b53e:	429a      	cmp	r2, r3
 800b540:	d105      	bne.n	800b54e <clear_lock+0x2a>
 800b542:	4a09      	ldr	r2, [pc, #36]	@ (800b568 <clear_lock+0x44>)
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	011b      	lsls	r3, r3, #4
 800b548:	4413      	add	r3, r2
 800b54a:	2200      	movs	r2, #0
 800b54c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	3301      	adds	r3, #1
 800b552:	60fb      	str	r3, [r7, #12]
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	2b01      	cmp	r3, #1
 800b558:	d9eb      	bls.n	800b532 <clear_lock+0xe>
	}
}
 800b55a:	bf00      	nop
 800b55c:	bf00      	nop
 800b55e:	3714      	adds	r7, #20
 800b560:	46bd      	mov	sp, r7
 800b562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b566:	4770      	bx	lr
 800b568:	200055fc 	.word	0x200055fc

0800b56c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b086      	sub	sp, #24
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b574:	2300      	movs	r3, #0
 800b576:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	78db      	ldrb	r3, [r3, #3]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d034      	beq.n	800b5ea <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b584:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	7858      	ldrb	r0, [r3, #1]
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b590:	2301      	movs	r3, #1
 800b592:	697a      	ldr	r2, [r7, #20]
 800b594:	f7ff fd40 	bl	800b018 <disk_write>
 800b598:	4603      	mov	r3, r0
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d002      	beq.n	800b5a4 <sync_window+0x38>
			res = FR_DISK_ERR;
 800b59e:	2301      	movs	r3, #1
 800b5a0:	73fb      	strb	r3, [r7, #15]
 800b5a2:	e022      	b.n	800b5ea <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	6a1b      	ldr	r3, [r3, #32]
 800b5ae:	697a      	ldr	r2, [r7, #20]
 800b5b0:	1ad2      	subs	r2, r2, r3
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	699b      	ldr	r3, [r3, #24]
 800b5b6:	429a      	cmp	r2, r3
 800b5b8:	d217      	bcs.n	800b5ea <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	789b      	ldrb	r3, [r3, #2]
 800b5be:	613b      	str	r3, [r7, #16]
 800b5c0:	e010      	b.n	800b5e4 <sync_window+0x78>
					wsect += fs->fsize;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	699b      	ldr	r3, [r3, #24]
 800b5c6:	697a      	ldr	r2, [r7, #20]
 800b5c8:	4413      	add	r3, r2
 800b5ca:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	7858      	ldrb	r0, [r3, #1]
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b5d6:	2301      	movs	r3, #1
 800b5d8:	697a      	ldr	r2, [r7, #20]
 800b5da:	f7ff fd1d 	bl	800b018 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b5de:	693b      	ldr	r3, [r7, #16]
 800b5e0:	3b01      	subs	r3, #1
 800b5e2:	613b      	str	r3, [r7, #16]
 800b5e4:	693b      	ldr	r3, [r7, #16]
 800b5e6:	2b01      	cmp	r3, #1
 800b5e8:	d8eb      	bhi.n	800b5c2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800b5ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	3718      	adds	r7, #24
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	bd80      	pop	{r7, pc}

0800b5f4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b084      	sub	sp, #16
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
 800b5fc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b5fe:	2300      	movs	r3, #0
 800b600:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b606:	683a      	ldr	r2, [r7, #0]
 800b608:	429a      	cmp	r2, r3
 800b60a:	d01b      	beq.n	800b644 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800b60c:	6878      	ldr	r0, [r7, #4]
 800b60e:	f7ff ffad 	bl	800b56c <sync_window>
 800b612:	4603      	mov	r3, r0
 800b614:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b616:	7bfb      	ldrb	r3, [r7, #15]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d113      	bne.n	800b644 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	7858      	ldrb	r0, [r3, #1]
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b626:	2301      	movs	r3, #1
 800b628:	683a      	ldr	r2, [r7, #0]
 800b62a:	f7ff fcd5 	bl	800afd8 <disk_read>
 800b62e:	4603      	mov	r3, r0
 800b630:	2b00      	cmp	r3, #0
 800b632:	d004      	beq.n	800b63e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b634:	f04f 33ff 	mov.w	r3, #4294967295
 800b638:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b63a:	2301      	movs	r3, #1
 800b63c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	683a      	ldr	r2, [r7, #0]
 800b642:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800b644:	7bfb      	ldrb	r3, [r7, #15]
}
 800b646:	4618      	mov	r0, r3
 800b648:	3710      	adds	r7, #16
 800b64a:	46bd      	mov	sp, r7
 800b64c:	bd80      	pop	{r7, pc}
	...

0800b650 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800b650:	b580      	push	{r7, lr}
 800b652:	b084      	sub	sp, #16
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800b658:	6878      	ldr	r0, [r7, #4]
 800b65a:	f7ff ff87 	bl	800b56c <sync_window>
 800b65e:	4603      	mov	r3, r0
 800b660:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b662:	7bfb      	ldrb	r3, [r7, #15]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d158      	bne.n	800b71a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	781b      	ldrb	r3, [r3, #0]
 800b66c:	2b03      	cmp	r3, #3
 800b66e:	d148      	bne.n	800b702 <sync_fs+0xb2>
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	791b      	ldrb	r3, [r3, #4]
 800b674:	2b01      	cmp	r3, #1
 800b676:	d144      	bne.n	800b702 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	3330      	adds	r3, #48	@ 0x30
 800b67c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b680:	2100      	movs	r1, #0
 800b682:	4618      	mov	r0, r3
 800b684:	f7ff fda9 	bl	800b1da <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	3330      	adds	r3, #48	@ 0x30
 800b68c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800b690:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800b694:	4618      	mov	r0, r3
 800b696:	f7ff fd38 	bl	800b10a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	3330      	adds	r3, #48	@ 0x30
 800b69e:	4921      	ldr	r1, [pc, #132]	@ (800b724 <sync_fs+0xd4>)
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	f7ff fd4d 	bl	800b140 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	3330      	adds	r3, #48	@ 0x30
 800b6aa:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800b6ae:	491e      	ldr	r1, [pc, #120]	@ (800b728 <sync_fs+0xd8>)
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	f7ff fd45 	bl	800b140 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	3330      	adds	r3, #48	@ 0x30
 800b6ba:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	691b      	ldr	r3, [r3, #16]
 800b6c2:	4619      	mov	r1, r3
 800b6c4:	4610      	mov	r0, r2
 800b6c6:	f7ff fd3b 	bl	800b140 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	3330      	adds	r3, #48	@ 0x30
 800b6ce:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	68db      	ldr	r3, [r3, #12]
 800b6d6:	4619      	mov	r1, r3
 800b6d8:	4610      	mov	r0, r2
 800b6da:	f7ff fd31 	bl	800b140 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	69db      	ldr	r3, [r3, #28]
 800b6e2:	1c5a      	adds	r2, r3, #1
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	7858      	ldrb	r0, [r3, #1]
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b6f6:	2301      	movs	r3, #1
 800b6f8:	f7ff fc8e 	bl	800b018 <disk_write>
			fs->fsi_flag = 0;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	2200      	movs	r2, #0
 800b700:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	785b      	ldrb	r3, [r3, #1]
 800b706:	2200      	movs	r2, #0
 800b708:	2100      	movs	r1, #0
 800b70a:	4618      	mov	r0, r3
 800b70c:	f7ff fca4 	bl	800b058 <disk_ioctl>
 800b710:	4603      	mov	r3, r0
 800b712:	2b00      	cmp	r3, #0
 800b714:	d001      	beq.n	800b71a <sync_fs+0xca>
 800b716:	2301      	movs	r3, #1
 800b718:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800b71a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b71c:	4618      	mov	r0, r3
 800b71e:	3710      	adds	r7, #16
 800b720:	46bd      	mov	sp, r7
 800b722:	bd80      	pop	{r7, pc}
 800b724:	41615252 	.word	0x41615252
 800b728:	61417272 	.word	0x61417272

0800b72c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b72c:	b480      	push	{r7}
 800b72e:	b083      	sub	sp, #12
 800b730:	af00      	add	r7, sp, #0
 800b732:	6078      	str	r0, [r7, #4]
 800b734:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800b736:	683b      	ldr	r3, [r7, #0]
 800b738:	3b02      	subs	r3, #2
 800b73a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	695b      	ldr	r3, [r3, #20]
 800b740:	3b02      	subs	r3, #2
 800b742:	683a      	ldr	r2, [r7, #0]
 800b744:	429a      	cmp	r2, r3
 800b746:	d301      	bcc.n	800b74c <clust2sect+0x20>
 800b748:	2300      	movs	r3, #0
 800b74a:	e008      	b.n	800b75e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	895b      	ldrh	r3, [r3, #10]
 800b750:	461a      	mov	r2, r3
 800b752:	683b      	ldr	r3, [r7, #0]
 800b754:	fb03 f202 	mul.w	r2, r3, r2
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b75c:	4413      	add	r3, r2
}
 800b75e:	4618      	mov	r0, r3
 800b760:	370c      	adds	r7, #12
 800b762:	46bd      	mov	sp, r7
 800b764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b768:	4770      	bx	lr

0800b76a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800b76a:	b580      	push	{r7, lr}
 800b76c:	b086      	sub	sp, #24
 800b76e:	af00      	add	r7, sp, #0
 800b770:	6078      	str	r0, [r7, #4]
 800b772:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b77a:	683b      	ldr	r3, [r7, #0]
 800b77c:	2b01      	cmp	r3, #1
 800b77e:	d904      	bls.n	800b78a <get_fat+0x20>
 800b780:	693b      	ldr	r3, [r7, #16]
 800b782:	695b      	ldr	r3, [r3, #20]
 800b784:	683a      	ldr	r2, [r7, #0]
 800b786:	429a      	cmp	r2, r3
 800b788:	d302      	bcc.n	800b790 <get_fat+0x26>
		val = 1;	/* Internal error */
 800b78a:	2301      	movs	r3, #1
 800b78c:	617b      	str	r3, [r7, #20]
 800b78e:	e08e      	b.n	800b8ae <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b790:	f04f 33ff 	mov.w	r3, #4294967295
 800b794:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800b796:	693b      	ldr	r3, [r7, #16]
 800b798:	781b      	ldrb	r3, [r3, #0]
 800b79a:	2b03      	cmp	r3, #3
 800b79c:	d061      	beq.n	800b862 <get_fat+0xf8>
 800b79e:	2b03      	cmp	r3, #3
 800b7a0:	dc7b      	bgt.n	800b89a <get_fat+0x130>
 800b7a2:	2b01      	cmp	r3, #1
 800b7a4:	d002      	beq.n	800b7ac <get_fat+0x42>
 800b7a6:	2b02      	cmp	r3, #2
 800b7a8:	d041      	beq.n	800b82e <get_fat+0xc4>
 800b7aa:	e076      	b.n	800b89a <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b7ac:	683b      	ldr	r3, [r7, #0]
 800b7ae:	60fb      	str	r3, [r7, #12]
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	085b      	lsrs	r3, r3, #1
 800b7b4:	68fa      	ldr	r2, [r7, #12]
 800b7b6:	4413      	add	r3, r2
 800b7b8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b7ba:	693b      	ldr	r3, [r7, #16]
 800b7bc:	6a1a      	ldr	r2, [r3, #32]
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	0a5b      	lsrs	r3, r3, #9
 800b7c2:	4413      	add	r3, r2
 800b7c4:	4619      	mov	r1, r3
 800b7c6:	6938      	ldr	r0, [r7, #16]
 800b7c8:	f7ff ff14 	bl	800b5f4 <move_window>
 800b7cc:	4603      	mov	r3, r0
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d166      	bne.n	800b8a0 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	1c5a      	adds	r2, r3, #1
 800b7d6:	60fa      	str	r2, [r7, #12]
 800b7d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7dc:	693a      	ldr	r2, [r7, #16]
 800b7de:	4413      	add	r3, r2
 800b7e0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b7e4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b7e6:	693b      	ldr	r3, [r7, #16]
 800b7e8:	6a1a      	ldr	r2, [r3, #32]
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	0a5b      	lsrs	r3, r3, #9
 800b7ee:	4413      	add	r3, r2
 800b7f0:	4619      	mov	r1, r3
 800b7f2:	6938      	ldr	r0, [r7, #16]
 800b7f4:	f7ff fefe 	bl	800b5f4 <move_window>
 800b7f8:	4603      	mov	r3, r0
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d152      	bne.n	800b8a4 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b804:	693a      	ldr	r2, [r7, #16]
 800b806:	4413      	add	r3, r2
 800b808:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b80c:	021b      	lsls	r3, r3, #8
 800b80e:	68ba      	ldr	r2, [r7, #8]
 800b810:	4313      	orrs	r3, r2
 800b812:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b814:	683b      	ldr	r3, [r7, #0]
 800b816:	f003 0301 	and.w	r3, r3, #1
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d002      	beq.n	800b824 <get_fat+0xba>
 800b81e:	68bb      	ldr	r3, [r7, #8]
 800b820:	091b      	lsrs	r3, r3, #4
 800b822:	e002      	b.n	800b82a <get_fat+0xc0>
 800b824:	68bb      	ldr	r3, [r7, #8]
 800b826:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b82a:	617b      	str	r3, [r7, #20]
			break;
 800b82c:	e03f      	b.n	800b8ae <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b82e:	693b      	ldr	r3, [r7, #16]
 800b830:	6a1a      	ldr	r2, [r3, #32]
 800b832:	683b      	ldr	r3, [r7, #0]
 800b834:	0a1b      	lsrs	r3, r3, #8
 800b836:	4413      	add	r3, r2
 800b838:	4619      	mov	r1, r3
 800b83a:	6938      	ldr	r0, [r7, #16]
 800b83c:	f7ff feda 	bl	800b5f4 <move_window>
 800b840:	4603      	mov	r3, r0
 800b842:	2b00      	cmp	r3, #0
 800b844:	d130      	bne.n	800b8a8 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b846:	693b      	ldr	r3, [r7, #16]
 800b848:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b84c:	683b      	ldr	r3, [r7, #0]
 800b84e:	005b      	lsls	r3, r3, #1
 800b850:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800b854:	4413      	add	r3, r2
 800b856:	4618      	mov	r0, r3
 800b858:	f7ff fc1c 	bl	800b094 <ld_word>
 800b85c:	4603      	mov	r3, r0
 800b85e:	617b      	str	r3, [r7, #20]
			break;
 800b860:	e025      	b.n	800b8ae <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b862:	693b      	ldr	r3, [r7, #16]
 800b864:	6a1a      	ldr	r2, [r3, #32]
 800b866:	683b      	ldr	r3, [r7, #0]
 800b868:	09db      	lsrs	r3, r3, #7
 800b86a:	4413      	add	r3, r2
 800b86c:	4619      	mov	r1, r3
 800b86e:	6938      	ldr	r0, [r7, #16]
 800b870:	f7ff fec0 	bl	800b5f4 <move_window>
 800b874:	4603      	mov	r3, r0
 800b876:	2b00      	cmp	r3, #0
 800b878:	d118      	bne.n	800b8ac <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b87a:	693b      	ldr	r3, [r7, #16]
 800b87c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b880:	683b      	ldr	r3, [r7, #0]
 800b882:	009b      	lsls	r3, r3, #2
 800b884:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800b888:	4413      	add	r3, r2
 800b88a:	4618      	mov	r0, r3
 800b88c:	f7ff fc1a 	bl	800b0c4 <ld_dword>
 800b890:	4603      	mov	r3, r0
 800b892:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800b896:	617b      	str	r3, [r7, #20]
			break;
 800b898:	e009      	b.n	800b8ae <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800b89a:	2301      	movs	r3, #1
 800b89c:	617b      	str	r3, [r7, #20]
 800b89e:	e006      	b.n	800b8ae <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b8a0:	bf00      	nop
 800b8a2:	e004      	b.n	800b8ae <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b8a4:	bf00      	nop
 800b8a6:	e002      	b.n	800b8ae <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b8a8:	bf00      	nop
 800b8aa:	e000      	b.n	800b8ae <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b8ac:	bf00      	nop
		}
	}

	return val;
 800b8ae:	697b      	ldr	r3, [r7, #20]
}
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	3718      	adds	r7, #24
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	bd80      	pop	{r7, pc}

0800b8b8 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800b8b8:	b590      	push	{r4, r7, lr}
 800b8ba:	b089      	sub	sp, #36	@ 0x24
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	60f8      	str	r0, [r7, #12]
 800b8c0:	60b9      	str	r1, [r7, #8]
 800b8c2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800b8c4:	2302      	movs	r3, #2
 800b8c6:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b8c8:	68bb      	ldr	r3, [r7, #8]
 800b8ca:	2b01      	cmp	r3, #1
 800b8cc:	f240 80d9 	bls.w	800ba82 <put_fat+0x1ca>
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	695b      	ldr	r3, [r3, #20]
 800b8d4:	68ba      	ldr	r2, [r7, #8]
 800b8d6:	429a      	cmp	r2, r3
 800b8d8:	f080 80d3 	bcs.w	800ba82 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	781b      	ldrb	r3, [r3, #0]
 800b8e0:	2b03      	cmp	r3, #3
 800b8e2:	f000 8096 	beq.w	800ba12 <put_fat+0x15a>
 800b8e6:	2b03      	cmp	r3, #3
 800b8e8:	f300 80cb 	bgt.w	800ba82 <put_fat+0x1ca>
 800b8ec:	2b01      	cmp	r3, #1
 800b8ee:	d002      	beq.n	800b8f6 <put_fat+0x3e>
 800b8f0:	2b02      	cmp	r3, #2
 800b8f2:	d06e      	beq.n	800b9d2 <put_fat+0x11a>
 800b8f4:	e0c5      	b.n	800ba82 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800b8f6:	68bb      	ldr	r3, [r7, #8]
 800b8f8:	61bb      	str	r3, [r7, #24]
 800b8fa:	69bb      	ldr	r3, [r7, #24]
 800b8fc:	085b      	lsrs	r3, r3, #1
 800b8fe:	69ba      	ldr	r2, [r7, #24]
 800b900:	4413      	add	r3, r2
 800b902:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	6a1a      	ldr	r2, [r3, #32]
 800b908:	69bb      	ldr	r3, [r7, #24]
 800b90a:	0a5b      	lsrs	r3, r3, #9
 800b90c:	4413      	add	r3, r2
 800b90e:	4619      	mov	r1, r3
 800b910:	68f8      	ldr	r0, [r7, #12]
 800b912:	f7ff fe6f 	bl	800b5f4 <move_window>
 800b916:	4603      	mov	r3, r0
 800b918:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b91a:	7ffb      	ldrb	r3, [r7, #31]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	f040 80a9 	bne.w	800ba74 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b928:	69bb      	ldr	r3, [r7, #24]
 800b92a:	1c59      	adds	r1, r3, #1
 800b92c:	61b9      	str	r1, [r7, #24]
 800b92e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b932:	4413      	add	r3, r2
 800b934:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b936:	68bb      	ldr	r3, [r7, #8]
 800b938:	f003 0301 	and.w	r3, r3, #1
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d00d      	beq.n	800b95c <put_fat+0xa4>
 800b940:	697b      	ldr	r3, [r7, #20]
 800b942:	781b      	ldrb	r3, [r3, #0]
 800b944:	b25b      	sxtb	r3, r3
 800b946:	f003 030f 	and.w	r3, r3, #15
 800b94a:	b25a      	sxtb	r2, r3
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	b2db      	uxtb	r3, r3
 800b950:	011b      	lsls	r3, r3, #4
 800b952:	b25b      	sxtb	r3, r3
 800b954:	4313      	orrs	r3, r2
 800b956:	b25b      	sxtb	r3, r3
 800b958:	b2db      	uxtb	r3, r3
 800b95a:	e001      	b.n	800b960 <put_fat+0xa8>
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	b2db      	uxtb	r3, r3
 800b960:	697a      	ldr	r2, [r7, #20]
 800b962:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	2201      	movs	r2, #1
 800b968:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	6a1a      	ldr	r2, [r3, #32]
 800b96e:	69bb      	ldr	r3, [r7, #24]
 800b970:	0a5b      	lsrs	r3, r3, #9
 800b972:	4413      	add	r3, r2
 800b974:	4619      	mov	r1, r3
 800b976:	68f8      	ldr	r0, [r7, #12]
 800b978:	f7ff fe3c 	bl	800b5f4 <move_window>
 800b97c:	4603      	mov	r3, r0
 800b97e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b980:	7ffb      	ldrb	r3, [r7, #31]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d178      	bne.n	800ba78 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b98c:	69bb      	ldr	r3, [r7, #24]
 800b98e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b992:	4413      	add	r3, r2
 800b994:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b996:	68bb      	ldr	r3, [r7, #8]
 800b998:	f003 0301 	and.w	r3, r3, #1
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d003      	beq.n	800b9a8 <put_fat+0xf0>
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	091b      	lsrs	r3, r3, #4
 800b9a4:	b2db      	uxtb	r3, r3
 800b9a6:	e00e      	b.n	800b9c6 <put_fat+0x10e>
 800b9a8:	697b      	ldr	r3, [r7, #20]
 800b9aa:	781b      	ldrb	r3, [r3, #0]
 800b9ac:	b25b      	sxtb	r3, r3
 800b9ae:	f023 030f 	bic.w	r3, r3, #15
 800b9b2:	b25a      	sxtb	r2, r3
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	0a1b      	lsrs	r3, r3, #8
 800b9b8:	b25b      	sxtb	r3, r3
 800b9ba:	f003 030f 	and.w	r3, r3, #15
 800b9be:	b25b      	sxtb	r3, r3
 800b9c0:	4313      	orrs	r3, r2
 800b9c2:	b25b      	sxtb	r3, r3
 800b9c4:	b2db      	uxtb	r3, r3
 800b9c6:	697a      	ldr	r2, [r7, #20]
 800b9c8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	2201      	movs	r2, #1
 800b9ce:	70da      	strb	r2, [r3, #3]
			break;
 800b9d0:	e057      	b.n	800ba82 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	6a1a      	ldr	r2, [r3, #32]
 800b9d6:	68bb      	ldr	r3, [r7, #8]
 800b9d8:	0a1b      	lsrs	r3, r3, #8
 800b9da:	4413      	add	r3, r2
 800b9dc:	4619      	mov	r1, r3
 800b9de:	68f8      	ldr	r0, [r7, #12]
 800b9e0:	f7ff fe08 	bl	800b5f4 <move_window>
 800b9e4:	4603      	mov	r3, r0
 800b9e6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b9e8:	7ffb      	ldrb	r3, [r7, #31]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d146      	bne.n	800ba7c <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b9f4:	68bb      	ldr	r3, [r7, #8]
 800b9f6:	005b      	lsls	r3, r3, #1
 800b9f8:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800b9fc:	4413      	add	r3, r2
 800b9fe:	687a      	ldr	r2, [r7, #4]
 800ba00:	b292      	uxth	r2, r2
 800ba02:	4611      	mov	r1, r2
 800ba04:	4618      	mov	r0, r3
 800ba06:	f7ff fb80 	bl	800b10a <st_word>
			fs->wflag = 1;
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	2201      	movs	r2, #1
 800ba0e:	70da      	strb	r2, [r3, #3]
			break;
 800ba10:	e037      	b.n	800ba82 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	6a1a      	ldr	r2, [r3, #32]
 800ba16:	68bb      	ldr	r3, [r7, #8]
 800ba18:	09db      	lsrs	r3, r3, #7
 800ba1a:	4413      	add	r3, r2
 800ba1c:	4619      	mov	r1, r3
 800ba1e:	68f8      	ldr	r0, [r7, #12]
 800ba20:	f7ff fde8 	bl	800b5f4 <move_window>
 800ba24:	4603      	mov	r3, r0
 800ba26:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ba28:	7ffb      	ldrb	r3, [r7, #31]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d128      	bne.n	800ba80 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ba3a:	68bb      	ldr	r3, [r7, #8]
 800ba3c:	009b      	lsls	r3, r3, #2
 800ba3e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800ba42:	4413      	add	r3, r2
 800ba44:	4618      	mov	r0, r3
 800ba46:	f7ff fb3d 	bl	800b0c4 <ld_dword>
 800ba4a:	4603      	mov	r3, r0
 800ba4c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800ba50:	4323      	orrs	r3, r4
 800ba52:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ba5a:	68bb      	ldr	r3, [r7, #8]
 800ba5c:	009b      	lsls	r3, r3, #2
 800ba5e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800ba62:	4413      	add	r3, r2
 800ba64:	6879      	ldr	r1, [r7, #4]
 800ba66:	4618      	mov	r0, r3
 800ba68:	f7ff fb6a 	bl	800b140 <st_dword>
			fs->wflag = 1;
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	2201      	movs	r2, #1
 800ba70:	70da      	strb	r2, [r3, #3]
			break;
 800ba72:	e006      	b.n	800ba82 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ba74:	bf00      	nop
 800ba76:	e004      	b.n	800ba82 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ba78:	bf00      	nop
 800ba7a:	e002      	b.n	800ba82 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ba7c:	bf00      	nop
 800ba7e:	e000      	b.n	800ba82 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ba80:	bf00      	nop
		}
	}
	return res;
 800ba82:	7ffb      	ldrb	r3, [r7, #31]
}
 800ba84:	4618      	mov	r0, r3
 800ba86:	3724      	adds	r7, #36	@ 0x24
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	bd90      	pop	{r4, r7, pc}

0800ba8c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	b088      	sub	sp, #32
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	60f8      	str	r0, [r7, #12]
 800ba94:	60b9      	str	r1, [r7, #8]
 800ba96:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800ba98:	2300      	movs	r3, #0
 800ba9a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800baa2:	68bb      	ldr	r3, [r7, #8]
 800baa4:	2b01      	cmp	r3, #1
 800baa6:	d904      	bls.n	800bab2 <remove_chain+0x26>
 800baa8:	69bb      	ldr	r3, [r7, #24]
 800baaa:	695b      	ldr	r3, [r3, #20]
 800baac:	68ba      	ldr	r2, [r7, #8]
 800baae:	429a      	cmp	r2, r3
 800bab0:	d301      	bcc.n	800bab6 <remove_chain+0x2a>
 800bab2:	2302      	movs	r3, #2
 800bab4:	e04b      	b.n	800bb4e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d00c      	beq.n	800bad6 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800babc:	f04f 32ff 	mov.w	r2, #4294967295
 800bac0:	6879      	ldr	r1, [r7, #4]
 800bac2:	69b8      	ldr	r0, [r7, #24]
 800bac4:	f7ff fef8 	bl	800b8b8 <put_fat>
 800bac8:	4603      	mov	r3, r0
 800baca:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800bacc:	7ffb      	ldrb	r3, [r7, #31]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d001      	beq.n	800bad6 <remove_chain+0x4a>
 800bad2:	7ffb      	ldrb	r3, [r7, #31]
 800bad4:	e03b      	b.n	800bb4e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800bad6:	68b9      	ldr	r1, [r7, #8]
 800bad8:	68f8      	ldr	r0, [r7, #12]
 800bada:	f7ff fe46 	bl	800b76a <get_fat>
 800bade:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800bae0:	697b      	ldr	r3, [r7, #20]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d031      	beq.n	800bb4a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800bae6:	697b      	ldr	r3, [r7, #20]
 800bae8:	2b01      	cmp	r3, #1
 800baea:	d101      	bne.n	800baf0 <remove_chain+0x64>
 800baec:	2302      	movs	r3, #2
 800baee:	e02e      	b.n	800bb4e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800baf0:	697b      	ldr	r3, [r7, #20]
 800baf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800baf6:	d101      	bne.n	800bafc <remove_chain+0x70>
 800baf8:	2301      	movs	r3, #1
 800bafa:	e028      	b.n	800bb4e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800bafc:	2200      	movs	r2, #0
 800bafe:	68b9      	ldr	r1, [r7, #8]
 800bb00:	69b8      	ldr	r0, [r7, #24]
 800bb02:	f7ff fed9 	bl	800b8b8 <put_fat>
 800bb06:	4603      	mov	r3, r0
 800bb08:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800bb0a:	7ffb      	ldrb	r3, [r7, #31]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d001      	beq.n	800bb14 <remove_chain+0x88>
 800bb10:	7ffb      	ldrb	r3, [r7, #31]
 800bb12:	e01c      	b.n	800bb4e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800bb14:	69bb      	ldr	r3, [r7, #24]
 800bb16:	691a      	ldr	r2, [r3, #16]
 800bb18:	69bb      	ldr	r3, [r7, #24]
 800bb1a:	695b      	ldr	r3, [r3, #20]
 800bb1c:	3b02      	subs	r3, #2
 800bb1e:	429a      	cmp	r2, r3
 800bb20:	d20b      	bcs.n	800bb3a <remove_chain+0xae>
			fs->free_clst++;
 800bb22:	69bb      	ldr	r3, [r7, #24]
 800bb24:	691b      	ldr	r3, [r3, #16]
 800bb26:	1c5a      	adds	r2, r3, #1
 800bb28:	69bb      	ldr	r3, [r7, #24]
 800bb2a:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800bb2c:	69bb      	ldr	r3, [r7, #24]
 800bb2e:	791b      	ldrb	r3, [r3, #4]
 800bb30:	f043 0301 	orr.w	r3, r3, #1
 800bb34:	b2da      	uxtb	r2, r3
 800bb36:	69bb      	ldr	r3, [r7, #24]
 800bb38:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800bb3a:	697b      	ldr	r3, [r7, #20]
 800bb3c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800bb3e:	69bb      	ldr	r3, [r7, #24]
 800bb40:	695b      	ldr	r3, [r3, #20]
 800bb42:	68ba      	ldr	r2, [r7, #8]
 800bb44:	429a      	cmp	r2, r3
 800bb46:	d3c6      	bcc.n	800bad6 <remove_chain+0x4a>
 800bb48:	e000      	b.n	800bb4c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800bb4a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800bb4c:	2300      	movs	r3, #0
}
 800bb4e:	4618      	mov	r0, r3
 800bb50:	3720      	adds	r7, #32
 800bb52:	46bd      	mov	sp, r7
 800bb54:	bd80      	pop	{r7, pc}

0800bb56 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800bb56:	b580      	push	{r7, lr}
 800bb58:	b088      	sub	sp, #32
 800bb5a:	af00      	add	r7, sp, #0
 800bb5c:	6078      	str	r0, [r7, #4]
 800bb5e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800bb66:	683b      	ldr	r3, [r7, #0]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d10d      	bne.n	800bb88 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800bb6c:	693b      	ldr	r3, [r7, #16]
 800bb6e:	68db      	ldr	r3, [r3, #12]
 800bb70:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800bb72:	69bb      	ldr	r3, [r7, #24]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d004      	beq.n	800bb82 <create_chain+0x2c>
 800bb78:	693b      	ldr	r3, [r7, #16]
 800bb7a:	695b      	ldr	r3, [r3, #20]
 800bb7c:	69ba      	ldr	r2, [r7, #24]
 800bb7e:	429a      	cmp	r2, r3
 800bb80:	d31b      	bcc.n	800bbba <create_chain+0x64>
 800bb82:	2301      	movs	r3, #1
 800bb84:	61bb      	str	r3, [r7, #24]
 800bb86:	e018      	b.n	800bbba <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800bb88:	6839      	ldr	r1, [r7, #0]
 800bb8a:	6878      	ldr	r0, [r7, #4]
 800bb8c:	f7ff fded 	bl	800b76a <get_fat>
 800bb90:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	2b01      	cmp	r3, #1
 800bb96:	d801      	bhi.n	800bb9c <create_chain+0x46>
 800bb98:	2301      	movs	r3, #1
 800bb9a:	e070      	b.n	800bc7e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bba2:	d101      	bne.n	800bba8 <create_chain+0x52>
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	e06a      	b.n	800bc7e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800bba8:	693b      	ldr	r3, [r7, #16]
 800bbaa:	695b      	ldr	r3, [r3, #20]
 800bbac:	68fa      	ldr	r2, [r7, #12]
 800bbae:	429a      	cmp	r2, r3
 800bbb0:	d201      	bcs.n	800bbb6 <create_chain+0x60>
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	e063      	b.n	800bc7e <create_chain+0x128>
		scl = clst;
 800bbb6:	683b      	ldr	r3, [r7, #0]
 800bbb8:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800bbba:	69bb      	ldr	r3, [r7, #24]
 800bbbc:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800bbbe:	69fb      	ldr	r3, [r7, #28]
 800bbc0:	3301      	adds	r3, #1
 800bbc2:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800bbc4:	693b      	ldr	r3, [r7, #16]
 800bbc6:	695b      	ldr	r3, [r3, #20]
 800bbc8:	69fa      	ldr	r2, [r7, #28]
 800bbca:	429a      	cmp	r2, r3
 800bbcc:	d307      	bcc.n	800bbde <create_chain+0x88>
				ncl = 2;
 800bbce:	2302      	movs	r3, #2
 800bbd0:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800bbd2:	69fa      	ldr	r2, [r7, #28]
 800bbd4:	69bb      	ldr	r3, [r7, #24]
 800bbd6:	429a      	cmp	r2, r3
 800bbd8:	d901      	bls.n	800bbde <create_chain+0x88>
 800bbda:	2300      	movs	r3, #0
 800bbdc:	e04f      	b.n	800bc7e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800bbde:	69f9      	ldr	r1, [r7, #28]
 800bbe0:	6878      	ldr	r0, [r7, #4]
 800bbe2:	f7ff fdc2 	bl	800b76a <get_fat>
 800bbe6:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d00e      	beq.n	800bc0c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	2b01      	cmp	r3, #1
 800bbf2:	d003      	beq.n	800bbfc <create_chain+0xa6>
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbfa:	d101      	bne.n	800bc00 <create_chain+0xaa>
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	e03e      	b.n	800bc7e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800bc00:	69fa      	ldr	r2, [r7, #28]
 800bc02:	69bb      	ldr	r3, [r7, #24]
 800bc04:	429a      	cmp	r2, r3
 800bc06:	d1da      	bne.n	800bbbe <create_chain+0x68>
 800bc08:	2300      	movs	r3, #0
 800bc0a:	e038      	b.n	800bc7e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800bc0c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800bc0e:	f04f 32ff 	mov.w	r2, #4294967295
 800bc12:	69f9      	ldr	r1, [r7, #28]
 800bc14:	6938      	ldr	r0, [r7, #16]
 800bc16:	f7ff fe4f 	bl	800b8b8 <put_fat>
 800bc1a:	4603      	mov	r3, r0
 800bc1c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800bc1e:	7dfb      	ldrb	r3, [r7, #23]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d109      	bne.n	800bc38 <create_chain+0xe2>
 800bc24:	683b      	ldr	r3, [r7, #0]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d006      	beq.n	800bc38 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800bc2a:	69fa      	ldr	r2, [r7, #28]
 800bc2c:	6839      	ldr	r1, [r7, #0]
 800bc2e:	6938      	ldr	r0, [r7, #16]
 800bc30:	f7ff fe42 	bl	800b8b8 <put_fat>
 800bc34:	4603      	mov	r3, r0
 800bc36:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800bc38:	7dfb      	ldrb	r3, [r7, #23]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d116      	bne.n	800bc6c <create_chain+0x116>
		fs->last_clst = ncl;
 800bc3e:	693b      	ldr	r3, [r7, #16]
 800bc40:	69fa      	ldr	r2, [r7, #28]
 800bc42:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800bc44:	693b      	ldr	r3, [r7, #16]
 800bc46:	691a      	ldr	r2, [r3, #16]
 800bc48:	693b      	ldr	r3, [r7, #16]
 800bc4a:	695b      	ldr	r3, [r3, #20]
 800bc4c:	3b02      	subs	r3, #2
 800bc4e:	429a      	cmp	r2, r3
 800bc50:	d804      	bhi.n	800bc5c <create_chain+0x106>
 800bc52:	693b      	ldr	r3, [r7, #16]
 800bc54:	691b      	ldr	r3, [r3, #16]
 800bc56:	1e5a      	subs	r2, r3, #1
 800bc58:	693b      	ldr	r3, [r7, #16]
 800bc5a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800bc5c:	693b      	ldr	r3, [r7, #16]
 800bc5e:	791b      	ldrb	r3, [r3, #4]
 800bc60:	f043 0301 	orr.w	r3, r3, #1
 800bc64:	b2da      	uxtb	r2, r3
 800bc66:	693b      	ldr	r3, [r7, #16]
 800bc68:	711a      	strb	r2, [r3, #4]
 800bc6a:	e007      	b.n	800bc7c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800bc6c:	7dfb      	ldrb	r3, [r7, #23]
 800bc6e:	2b01      	cmp	r3, #1
 800bc70:	d102      	bne.n	800bc78 <create_chain+0x122>
 800bc72:	f04f 33ff 	mov.w	r3, #4294967295
 800bc76:	e000      	b.n	800bc7a <create_chain+0x124>
 800bc78:	2301      	movs	r3, #1
 800bc7a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800bc7c:	69fb      	ldr	r3, [r7, #28]
}
 800bc7e:	4618      	mov	r0, r3
 800bc80:	3720      	adds	r7, #32
 800bc82:	46bd      	mov	sp, r7
 800bc84:	bd80      	pop	{r7, pc}

0800bc86 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800bc86:	b480      	push	{r7}
 800bc88:	b087      	sub	sp, #28
 800bc8a:	af00      	add	r7, sp, #0
 800bc8c:	6078      	str	r0, [r7, #4]
 800bc8e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc9a:	3304      	adds	r3, #4
 800bc9c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800bc9e:	683b      	ldr	r3, [r7, #0]
 800bca0:	0a5b      	lsrs	r3, r3, #9
 800bca2:	68fa      	ldr	r2, [r7, #12]
 800bca4:	8952      	ldrh	r2, [r2, #10]
 800bca6:	fbb3 f3f2 	udiv	r3, r3, r2
 800bcaa:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800bcac:	693b      	ldr	r3, [r7, #16]
 800bcae:	1d1a      	adds	r2, r3, #4
 800bcb0:	613a      	str	r2, [r7, #16]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800bcb6:	68bb      	ldr	r3, [r7, #8]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d101      	bne.n	800bcc0 <clmt_clust+0x3a>
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	e010      	b.n	800bce2 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800bcc0:	697a      	ldr	r2, [r7, #20]
 800bcc2:	68bb      	ldr	r3, [r7, #8]
 800bcc4:	429a      	cmp	r2, r3
 800bcc6:	d307      	bcc.n	800bcd8 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800bcc8:	697a      	ldr	r2, [r7, #20]
 800bcca:	68bb      	ldr	r3, [r7, #8]
 800bccc:	1ad3      	subs	r3, r2, r3
 800bcce:	617b      	str	r3, [r7, #20]
 800bcd0:	693b      	ldr	r3, [r7, #16]
 800bcd2:	3304      	adds	r3, #4
 800bcd4:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800bcd6:	e7e9      	b.n	800bcac <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800bcd8:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800bcda:	693b      	ldr	r3, [r7, #16]
 800bcdc:	681a      	ldr	r2, [r3, #0]
 800bcde:	697b      	ldr	r3, [r7, #20]
 800bce0:	4413      	add	r3, r2
}
 800bce2:	4618      	mov	r0, r3
 800bce4:	371c      	adds	r7, #28
 800bce6:	46bd      	mov	sp, r7
 800bce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcec:	4770      	bx	lr

0800bcee <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800bcee:	b580      	push	{r7, lr}
 800bcf0:	b086      	sub	sp, #24
 800bcf2:	af00      	add	r7, sp, #0
 800bcf4:	6078      	str	r0, [r7, #4]
 800bcf6:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800bcfe:	683b      	ldr	r3, [r7, #0]
 800bd00:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bd04:	d204      	bcs.n	800bd10 <dir_sdi+0x22>
 800bd06:	683b      	ldr	r3, [r7, #0]
 800bd08:	f003 031f 	and.w	r3, r3, #31
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d001      	beq.n	800bd14 <dir_sdi+0x26>
		return FR_INT_ERR;
 800bd10:	2302      	movs	r3, #2
 800bd12:	e063      	b.n	800bddc <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	683a      	ldr	r2, [r7, #0]
 800bd18:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	689b      	ldr	r3, [r3, #8]
 800bd1e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800bd20:	697b      	ldr	r3, [r7, #20]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d106      	bne.n	800bd34 <dir_sdi+0x46>
 800bd26:	693b      	ldr	r3, [r7, #16]
 800bd28:	781b      	ldrb	r3, [r3, #0]
 800bd2a:	2b02      	cmp	r3, #2
 800bd2c:	d902      	bls.n	800bd34 <dir_sdi+0x46>
		clst = fs->dirbase;
 800bd2e:	693b      	ldr	r3, [r7, #16]
 800bd30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd32:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800bd34:	697b      	ldr	r3, [r7, #20]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d10c      	bne.n	800bd54 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800bd3a:	683b      	ldr	r3, [r7, #0]
 800bd3c:	095b      	lsrs	r3, r3, #5
 800bd3e:	693a      	ldr	r2, [r7, #16]
 800bd40:	8912      	ldrh	r2, [r2, #8]
 800bd42:	4293      	cmp	r3, r2
 800bd44:	d301      	bcc.n	800bd4a <dir_sdi+0x5c>
 800bd46:	2302      	movs	r3, #2
 800bd48:	e048      	b.n	800bddc <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800bd4a:	693b      	ldr	r3, [r7, #16]
 800bd4c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	61da      	str	r2, [r3, #28]
 800bd52:	e029      	b.n	800bda8 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800bd54:	693b      	ldr	r3, [r7, #16]
 800bd56:	895b      	ldrh	r3, [r3, #10]
 800bd58:	025b      	lsls	r3, r3, #9
 800bd5a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800bd5c:	e019      	b.n	800bd92 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	6979      	ldr	r1, [r7, #20]
 800bd62:	4618      	mov	r0, r3
 800bd64:	f7ff fd01 	bl	800b76a <get_fat>
 800bd68:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800bd6a:	697b      	ldr	r3, [r7, #20]
 800bd6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd70:	d101      	bne.n	800bd76 <dir_sdi+0x88>
 800bd72:	2301      	movs	r3, #1
 800bd74:	e032      	b.n	800bddc <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800bd76:	697b      	ldr	r3, [r7, #20]
 800bd78:	2b01      	cmp	r3, #1
 800bd7a:	d904      	bls.n	800bd86 <dir_sdi+0x98>
 800bd7c:	693b      	ldr	r3, [r7, #16]
 800bd7e:	695b      	ldr	r3, [r3, #20]
 800bd80:	697a      	ldr	r2, [r7, #20]
 800bd82:	429a      	cmp	r2, r3
 800bd84:	d301      	bcc.n	800bd8a <dir_sdi+0x9c>
 800bd86:	2302      	movs	r3, #2
 800bd88:	e028      	b.n	800bddc <dir_sdi+0xee>
			ofs -= csz;
 800bd8a:	683a      	ldr	r2, [r7, #0]
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	1ad3      	subs	r3, r2, r3
 800bd90:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800bd92:	683a      	ldr	r2, [r7, #0]
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	429a      	cmp	r2, r3
 800bd98:	d2e1      	bcs.n	800bd5e <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800bd9a:	6979      	ldr	r1, [r7, #20]
 800bd9c:	6938      	ldr	r0, [r7, #16]
 800bd9e:	f7ff fcc5 	bl	800b72c <clust2sect>
 800bda2:	4602      	mov	r2, r0
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	697a      	ldr	r2, [r7, #20]
 800bdac:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	69db      	ldr	r3, [r3, #28]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d101      	bne.n	800bdba <dir_sdi+0xcc>
 800bdb6:	2302      	movs	r3, #2
 800bdb8:	e010      	b.n	800bddc <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	69da      	ldr	r2, [r3, #28]
 800bdbe:	683b      	ldr	r3, [r7, #0]
 800bdc0:	0a5b      	lsrs	r3, r3, #9
 800bdc2:	441a      	add	r2, r3
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800bdc8:	693b      	ldr	r3, [r7, #16]
 800bdca:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bdce:	683b      	ldr	r3, [r7, #0]
 800bdd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bdd4:	441a      	add	r2, r3
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800bdda:	2300      	movs	r3, #0
}
 800bddc:	4618      	mov	r0, r3
 800bdde:	3718      	adds	r7, #24
 800bde0:	46bd      	mov	sp, r7
 800bde2:	bd80      	pop	{r7, pc}

0800bde4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b086      	sub	sp, #24
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	6078      	str	r0, [r7, #4]
 800bdec:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	695b      	ldr	r3, [r3, #20]
 800bdf8:	3320      	adds	r3, #32
 800bdfa:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	69db      	ldr	r3, [r3, #28]
 800be00:	2b00      	cmp	r3, #0
 800be02:	d003      	beq.n	800be0c <dir_next+0x28>
 800be04:	68bb      	ldr	r3, [r7, #8]
 800be06:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800be0a:	d301      	bcc.n	800be10 <dir_next+0x2c>
 800be0c:	2304      	movs	r3, #4
 800be0e:	e0aa      	b.n	800bf66 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800be10:	68bb      	ldr	r3, [r7, #8]
 800be12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be16:	2b00      	cmp	r3, #0
 800be18:	f040 8098 	bne.w	800bf4c <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	69db      	ldr	r3, [r3, #28]
 800be20:	1c5a      	adds	r2, r3, #1
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	699b      	ldr	r3, [r3, #24]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d10b      	bne.n	800be46 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800be2e:	68bb      	ldr	r3, [r7, #8]
 800be30:	095b      	lsrs	r3, r3, #5
 800be32:	68fa      	ldr	r2, [r7, #12]
 800be34:	8912      	ldrh	r2, [r2, #8]
 800be36:	4293      	cmp	r3, r2
 800be38:	f0c0 8088 	bcc.w	800bf4c <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	2200      	movs	r2, #0
 800be40:	61da      	str	r2, [r3, #28]
 800be42:	2304      	movs	r3, #4
 800be44:	e08f      	b.n	800bf66 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800be46:	68bb      	ldr	r3, [r7, #8]
 800be48:	0a5b      	lsrs	r3, r3, #9
 800be4a:	68fa      	ldr	r2, [r7, #12]
 800be4c:	8952      	ldrh	r2, [r2, #10]
 800be4e:	3a01      	subs	r2, #1
 800be50:	4013      	ands	r3, r2
 800be52:	2b00      	cmp	r3, #0
 800be54:	d17a      	bne.n	800bf4c <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800be56:	687a      	ldr	r2, [r7, #4]
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	699b      	ldr	r3, [r3, #24]
 800be5c:	4619      	mov	r1, r3
 800be5e:	4610      	mov	r0, r2
 800be60:	f7ff fc83 	bl	800b76a <get_fat>
 800be64:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800be66:	697b      	ldr	r3, [r7, #20]
 800be68:	2b01      	cmp	r3, #1
 800be6a:	d801      	bhi.n	800be70 <dir_next+0x8c>
 800be6c:	2302      	movs	r3, #2
 800be6e:	e07a      	b.n	800bf66 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800be70:	697b      	ldr	r3, [r7, #20]
 800be72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be76:	d101      	bne.n	800be7c <dir_next+0x98>
 800be78:	2301      	movs	r3, #1
 800be7a:	e074      	b.n	800bf66 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	695b      	ldr	r3, [r3, #20]
 800be80:	697a      	ldr	r2, [r7, #20]
 800be82:	429a      	cmp	r2, r3
 800be84:	d358      	bcc.n	800bf38 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800be86:	683b      	ldr	r3, [r7, #0]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d104      	bne.n	800be96 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	2200      	movs	r2, #0
 800be90:	61da      	str	r2, [r3, #28]
 800be92:	2304      	movs	r3, #4
 800be94:	e067      	b.n	800bf66 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800be96:	687a      	ldr	r2, [r7, #4]
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	699b      	ldr	r3, [r3, #24]
 800be9c:	4619      	mov	r1, r3
 800be9e:	4610      	mov	r0, r2
 800bea0:	f7ff fe59 	bl	800bb56 <create_chain>
 800bea4:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800bea6:	697b      	ldr	r3, [r7, #20]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d101      	bne.n	800beb0 <dir_next+0xcc>
 800beac:	2307      	movs	r3, #7
 800beae:	e05a      	b.n	800bf66 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800beb0:	697b      	ldr	r3, [r7, #20]
 800beb2:	2b01      	cmp	r3, #1
 800beb4:	d101      	bne.n	800beba <dir_next+0xd6>
 800beb6:	2302      	movs	r3, #2
 800beb8:	e055      	b.n	800bf66 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800beba:	697b      	ldr	r3, [r7, #20]
 800bebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bec0:	d101      	bne.n	800bec6 <dir_next+0xe2>
 800bec2:	2301      	movs	r3, #1
 800bec4:	e04f      	b.n	800bf66 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800bec6:	68f8      	ldr	r0, [r7, #12]
 800bec8:	f7ff fb50 	bl	800b56c <sync_window>
 800becc:	4603      	mov	r3, r0
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d001      	beq.n	800bed6 <dir_next+0xf2>
 800bed2:	2301      	movs	r3, #1
 800bed4:	e047      	b.n	800bf66 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	3330      	adds	r3, #48	@ 0x30
 800beda:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bede:	2100      	movs	r1, #0
 800bee0:	4618      	mov	r0, r3
 800bee2:	f7ff f97a 	bl	800b1da <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800bee6:	2300      	movs	r3, #0
 800bee8:	613b      	str	r3, [r7, #16]
 800beea:	6979      	ldr	r1, [r7, #20]
 800beec:	68f8      	ldr	r0, [r7, #12]
 800beee:	f7ff fc1d 	bl	800b72c <clust2sect>
 800bef2:	4602      	mov	r2, r0
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	62da      	str	r2, [r3, #44]	@ 0x2c
 800bef8:	e012      	b.n	800bf20 <dir_next+0x13c>
						fs->wflag = 1;
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	2201      	movs	r2, #1
 800befe:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800bf00:	68f8      	ldr	r0, [r7, #12]
 800bf02:	f7ff fb33 	bl	800b56c <sync_window>
 800bf06:	4603      	mov	r3, r0
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d001      	beq.n	800bf10 <dir_next+0x12c>
 800bf0c:	2301      	movs	r3, #1
 800bf0e:	e02a      	b.n	800bf66 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800bf10:	693b      	ldr	r3, [r7, #16]
 800bf12:	3301      	adds	r3, #1
 800bf14:	613b      	str	r3, [r7, #16]
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf1a:	1c5a      	adds	r2, r3, #1
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	62da      	str	r2, [r3, #44]	@ 0x2c
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	895b      	ldrh	r3, [r3, #10]
 800bf24:	461a      	mov	r2, r3
 800bf26:	693b      	ldr	r3, [r7, #16]
 800bf28:	4293      	cmp	r3, r2
 800bf2a:	d3e6      	bcc.n	800befa <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf30:	693b      	ldr	r3, [r7, #16]
 800bf32:	1ad2      	subs	r2, r2, r3
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	697a      	ldr	r2, [r7, #20]
 800bf3c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800bf3e:	6979      	ldr	r1, [r7, #20]
 800bf40:	68f8      	ldr	r0, [r7, #12]
 800bf42:	f7ff fbf3 	bl	800b72c <clust2sect>
 800bf46:	4602      	mov	r2, r0
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	68ba      	ldr	r2, [r7, #8]
 800bf50:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bf58:	68bb      	ldr	r3, [r7, #8]
 800bf5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf5e:	441a      	add	r2, r3
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800bf64:	2300      	movs	r3, #0
}
 800bf66:	4618      	mov	r0, r3
 800bf68:	3718      	adds	r7, #24
 800bf6a:	46bd      	mov	sp, r7
 800bf6c:	bd80      	pop	{r7, pc}

0800bf6e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800bf6e:	b580      	push	{r7, lr}
 800bf70:	b086      	sub	sp, #24
 800bf72:	af00      	add	r7, sp, #0
 800bf74:	6078      	str	r0, [r7, #4]
 800bf76:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800bf7e:	2100      	movs	r1, #0
 800bf80:	6878      	ldr	r0, [r7, #4]
 800bf82:	f7ff feb4 	bl	800bcee <dir_sdi>
 800bf86:	4603      	mov	r3, r0
 800bf88:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800bf8a:	7dfb      	ldrb	r3, [r7, #23]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d12b      	bne.n	800bfe8 <dir_alloc+0x7a>
		n = 0;
 800bf90:	2300      	movs	r3, #0
 800bf92:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	69db      	ldr	r3, [r3, #28]
 800bf98:	4619      	mov	r1, r3
 800bf9a:	68f8      	ldr	r0, [r7, #12]
 800bf9c:	f7ff fb2a 	bl	800b5f4 <move_window>
 800bfa0:	4603      	mov	r3, r0
 800bfa2:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800bfa4:	7dfb      	ldrb	r3, [r7, #23]
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d11d      	bne.n	800bfe6 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	6a1b      	ldr	r3, [r3, #32]
 800bfae:	781b      	ldrb	r3, [r3, #0]
 800bfb0:	2be5      	cmp	r3, #229	@ 0xe5
 800bfb2:	d004      	beq.n	800bfbe <dir_alloc+0x50>
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	6a1b      	ldr	r3, [r3, #32]
 800bfb8:	781b      	ldrb	r3, [r3, #0]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d107      	bne.n	800bfce <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800bfbe:	693b      	ldr	r3, [r7, #16]
 800bfc0:	3301      	adds	r3, #1
 800bfc2:	613b      	str	r3, [r7, #16]
 800bfc4:	693a      	ldr	r2, [r7, #16]
 800bfc6:	683b      	ldr	r3, [r7, #0]
 800bfc8:	429a      	cmp	r2, r3
 800bfca:	d102      	bne.n	800bfd2 <dir_alloc+0x64>
 800bfcc:	e00c      	b.n	800bfe8 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800bfce:	2300      	movs	r3, #0
 800bfd0:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800bfd2:	2101      	movs	r1, #1
 800bfd4:	6878      	ldr	r0, [r7, #4]
 800bfd6:	f7ff ff05 	bl	800bde4 <dir_next>
 800bfda:	4603      	mov	r3, r0
 800bfdc:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800bfde:	7dfb      	ldrb	r3, [r7, #23]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d0d7      	beq.n	800bf94 <dir_alloc+0x26>
 800bfe4:	e000      	b.n	800bfe8 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800bfe6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800bfe8:	7dfb      	ldrb	r3, [r7, #23]
 800bfea:	2b04      	cmp	r3, #4
 800bfec:	d101      	bne.n	800bff2 <dir_alloc+0x84>
 800bfee:	2307      	movs	r3, #7
 800bff0:	75fb      	strb	r3, [r7, #23]
	return res;
 800bff2:	7dfb      	ldrb	r3, [r7, #23]
}
 800bff4:	4618      	mov	r0, r3
 800bff6:	3718      	adds	r7, #24
 800bff8:	46bd      	mov	sp, r7
 800bffa:	bd80      	pop	{r7, pc}

0800bffc <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800bffc:	b580      	push	{r7, lr}
 800bffe:	b084      	sub	sp, #16
 800c000:	af00      	add	r7, sp, #0
 800c002:	6078      	str	r0, [r7, #4]
 800c004:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c006:	683b      	ldr	r3, [r7, #0]
 800c008:	331a      	adds	r3, #26
 800c00a:	4618      	mov	r0, r3
 800c00c:	f7ff f842 	bl	800b094 <ld_word>
 800c010:	4603      	mov	r3, r0
 800c012:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	781b      	ldrb	r3, [r3, #0]
 800c018:	2b03      	cmp	r3, #3
 800c01a:	d109      	bne.n	800c030 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c01c:	683b      	ldr	r3, [r7, #0]
 800c01e:	3314      	adds	r3, #20
 800c020:	4618      	mov	r0, r3
 800c022:	f7ff f837 	bl	800b094 <ld_word>
 800c026:	4603      	mov	r3, r0
 800c028:	041b      	lsls	r3, r3, #16
 800c02a:	68fa      	ldr	r2, [r7, #12]
 800c02c:	4313      	orrs	r3, r2
 800c02e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c030:	68fb      	ldr	r3, [r7, #12]
}
 800c032:	4618      	mov	r0, r3
 800c034:	3710      	adds	r7, #16
 800c036:	46bd      	mov	sp, r7
 800c038:	bd80      	pop	{r7, pc}

0800c03a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c03a:	b580      	push	{r7, lr}
 800c03c:	b084      	sub	sp, #16
 800c03e:	af00      	add	r7, sp, #0
 800c040:	60f8      	str	r0, [r7, #12]
 800c042:	60b9      	str	r1, [r7, #8]
 800c044:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c046:	68bb      	ldr	r3, [r7, #8]
 800c048:	331a      	adds	r3, #26
 800c04a:	687a      	ldr	r2, [r7, #4]
 800c04c:	b292      	uxth	r2, r2
 800c04e:	4611      	mov	r1, r2
 800c050:	4618      	mov	r0, r3
 800c052:	f7ff f85a 	bl	800b10a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	781b      	ldrb	r3, [r3, #0]
 800c05a:	2b03      	cmp	r3, #3
 800c05c:	d109      	bne.n	800c072 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c05e:	68bb      	ldr	r3, [r7, #8]
 800c060:	f103 0214 	add.w	r2, r3, #20
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	0c1b      	lsrs	r3, r3, #16
 800c068:	b29b      	uxth	r3, r3
 800c06a:	4619      	mov	r1, r3
 800c06c:	4610      	mov	r0, r2
 800c06e:	f7ff f84c 	bl	800b10a <st_word>
	}
}
 800c072:	bf00      	nop
 800c074:	3710      	adds	r7, #16
 800c076:	46bd      	mov	sp, r7
 800c078:	bd80      	pop	{r7, pc}

0800c07a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800c07a:	b580      	push	{r7, lr}
 800c07c:	b086      	sub	sp, #24
 800c07e:	af00      	add	r7, sp, #0
 800c080:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c088:	2100      	movs	r1, #0
 800c08a:	6878      	ldr	r0, [r7, #4]
 800c08c:	f7ff fe2f 	bl	800bcee <dir_sdi>
 800c090:	4603      	mov	r3, r0
 800c092:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800c094:	7dfb      	ldrb	r3, [r7, #23]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d001      	beq.n	800c09e <dir_find+0x24>
 800c09a:	7dfb      	ldrb	r3, [r7, #23]
 800c09c:	e03e      	b.n	800c11c <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	69db      	ldr	r3, [r3, #28]
 800c0a2:	4619      	mov	r1, r3
 800c0a4:	6938      	ldr	r0, [r7, #16]
 800c0a6:	f7ff faa5 	bl	800b5f4 <move_window>
 800c0aa:	4603      	mov	r3, r0
 800c0ac:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c0ae:	7dfb      	ldrb	r3, [r7, #23]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d12f      	bne.n	800c114 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	6a1b      	ldr	r3, [r3, #32]
 800c0b8:	781b      	ldrb	r3, [r3, #0]
 800c0ba:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c0bc:	7bfb      	ldrb	r3, [r7, #15]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d102      	bne.n	800c0c8 <dir_find+0x4e>
 800c0c2:	2304      	movs	r3, #4
 800c0c4:	75fb      	strb	r3, [r7, #23]
 800c0c6:	e028      	b.n	800c11a <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	6a1b      	ldr	r3, [r3, #32]
 800c0cc:	330b      	adds	r3, #11
 800c0ce:	781b      	ldrb	r3, [r3, #0]
 800c0d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c0d4:	b2da      	uxtb	r2, r3
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	6a1b      	ldr	r3, [r3, #32]
 800c0de:	330b      	adds	r3, #11
 800c0e0:	781b      	ldrb	r3, [r3, #0]
 800c0e2:	f003 0308 	and.w	r3, r3, #8
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d10a      	bne.n	800c100 <dir_find+0x86>
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	6a18      	ldr	r0, [r3, #32]
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	3324      	adds	r3, #36	@ 0x24
 800c0f2:	220b      	movs	r2, #11
 800c0f4:	4619      	mov	r1, r3
 800c0f6:	f7ff f88b 	bl	800b210 <mem_cmp>
 800c0fa:	4603      	mov	r3, r0
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d00b      	beq.n	800c118 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c100:	2100      	movs	r1, #0
 800c102:	6878      	ldr	r0, [r7, #4]
 800c104:	f7ff fe6e 	bl	800bde4 <dir_next>
 800c108:	4603      	mov	r3, r0
 800c10a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800c10c:	7dfb      	ldrb	r3, [r7, #23]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d0c5      	beq.n	800c09e <dir_find+0x24>
 800c112:	e002      	b.n	800c11a <dir_find+0xa0>
		if (res != FR_OK) break;
 800c114:	bf00      	nop
 800c116:	e000      	b.n	800c11a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c118:	bf00      	nop

	return res;
 800c11a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c11c:	4618      	mov	r0, r3
 800c11e:	3718      	adds	r7, #24
 800c120:	46bd      	mov	sp, r7
 800c122:	bd80      	pop	{r7, pc}

0800c124 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c124:	b580      	push	{r7, lr}
 800c126:	b084      	sub	sp, #16
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800c132:	2101      	movs	r1, #1
 800c134:	6878      	ldr	r0, [r7, #4]
 800c136:	f7ff ff1a 	bl	800bf6e <dir_alloc>
 800c13a:	4603      	mov	r3, r0
 800c13c:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c13e:	7bfb      	ldrb	r3, [r7, #15]
 800c140:	2b00      	cmp	r3, #0
 800c142:	d11c      	bne.n	800c17e <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	69db      	ldr	r3, [r3, #28]
 800c148:	4619      	mov	r1, r3
 800c14a:	68b8      	ldr	r0, [r7, #8]
 800c14c:	f7ff fa52 	bl	800b5f4 <move_window>
 800c150:	4603      	mov	r3, r0
 800c152:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c154:	7bfb      	ldrb	r3, [r7, #15]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d111      	bne.n	800c17e <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	6a1b      	ldr	r3, [r3, #32]
 800c15e:	2220      	movs	r2, #32
 800c160:	2100      	movs	r1, #0
 800c162:	4618      	mov	r0, r3
 800c164:	f7ff f839 	bl	800b1da <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	6a18      	ldr	r0, [r3, #32]
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	3324      	adds	r3, #36	@ 0x24
 800c170:	220b      	movs	r2, #11
 800c172:	4619      	mov	r1, r3
 800c174:	f7ff f810 	bl	800b198 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800c178:	68bb      	ldr	r3, [r7, #8]
 800c17a:	2201      	movs	r2, #1
 800c17c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800c17e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c180:	4618      	mov	r0, r3
 800c182:	3710      	adds	r7, #16
 800c184:	46bd      	mov	sp, r7
 800c186:	bd80      	pop	{r7, pc}

0800c188 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c188:	b580      	push	{r7, lr}
 800c18a:	b088      	sub	sp, #32
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	6078      	str	r0, [r7, #4]
 800c190:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800c192:	683b      	ldr	r3, [r7, #0]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	60fb      	str	r3, [r7, #12]
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	3324      	adds	r3, #36	@ 0x24
 800c19c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800c19e:	220b      	movs	r2, #11
 800c1a0:	2120      	movs	r1, #32
 800c1a2:	68b8      	ldr	r0, [r7, #8]
 800c1a4:	f7ff f819 	bl	800b1da <mem_set>
	si = i = 0; ni = 8;
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	613b      	str	r3, [r7, #16]
 800c1ac:	693b      	ldr	r3, [r7, #16]
 800c1ae:	61fb      	str	r3, [r7, #28]
 800c1b0:	2308      	movs	r3, #8
 800c1b2:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800c1b4:	69fb      	ldr	r3, [r7, #28]
 800c1b6:	1c5a      	adds	r2, r3, #1
 800c1b8:	61fa      	str	r2, [r7, #28]
 800c1ba:	68fa      	ldr	r2, [r7, #12]
 800c1bc:	4413      	add	r3, r2
 800c1be:	781b      	ldrb	r3, [r3, #0]
 800c1c0:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c1c2:	7efb      	ldrb	r3, [r7, #27]
 800c1c4:	2b20      	cmp	r3, #32
 800c1c6:	d94e      	bls.n	800c266 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800c1c8:	7efb      	ldrb	r3, [r7, #27]
 800c1ca:	2b2f      	cmp	r3, #47	@ 0x2f
 800c1cc:	d006      	beq.n	800c1dc <create_name+0x54>
 800c1ce:	7efb      	ldrb	r3, [r7, #27]
 800c1d0:	2b5c      	cmp	r3, #92	@ 0x5c
 800c1d2:	d110      	bne.n	800c1f6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c1d4:	e002      	b.n	800c1dc <create_name+0x54>
 800c1d6:	69fb      	ldr	r3, [r7, #28]
 800c1d8:	3301      	adds	r3, #1
 800c1da:	61fb      	str	r3, [r7, #28]
 800c1dc:	68fa      	ldr	r2, [r7, #12]
 800c1de:	69fb      	ldr	r3, [r7, #28]
 800c1e0:	4413      	add	r3, r2
 800c1e2:	781b      	ldrb	r3, [r3, #0]
 800c1e4:	2b2f      	cmp	r3, #47	@ 0x2f
 800c1e6:	d0f6      	beq.n	800c1d6 <create_name+0x4e>
 800c1e8:	68fa      	ldr	r2, [r7, #12]
 800c1ea:	69fb      	ldr	r3, [r7, #28]
 800c1ec:	4413      	add	r3, r2
 800c1ee:	781b      	ldrb	r3, [r3, #0]
 800c1f0:	2b5c      	cmp	r3, #92	@ 0x5c
 800c1f2:	d0f0      	beq.n	800c1d6 <create_name+0x4e>
			break;
 800c1f4:	e038      	b.n	800c268 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800c1f6:	7efb      	ldrb	r3, [r7, #27]
 800c1f8:	2b2e      	cmp	r3, #46	@ 0x2e
 800c1fa:	d003      	beq.n	800c204 <create_name+0x7c>
 800c1fc:	693a      	ldr	r2, [r7, #16]
 800c1fe:	697b      	ldr	r3, [r7, #20]
 800c200:	429a      	cmp	r2, r3
 800c202:	d30c      	bcc.n	800c21e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800c204:	697b      	ldr	r3, [r7, #20]
 800c206:	2b0b      	cmp	r3, #11
 800c208:	d002      	beq.n	800c210 <create_name+0x88>
 800c20a:	7efb      	ldrb	r3, [r7, #27]
 800c20c:	2b2e      	cmp	r3, #46	@ 0x2e
 800c20e:	d001      	beq.n	800c214 <create_name+0x8c>
 800c210:	2306      	movs	r3, #6
 800c212:	e044      	b.n	800c29e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800c214:	2308      	movs	r3, #8
 800c216:	613b      	str	r3, [r7, #16]
 800c218:	230b      	movs	r3, #11
 800c21a:	617b      	str	r3, [r7, #20]
			continue;
 800c21c:	e022      	b.n	800c264 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800c21e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c222:	2b00      	cmp	r3, #0
 800c224:	da04      	bge.n	800c230 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800c226:	7efb      	ldrb	r3, [r7, #27]
 800c228:	3b80      	subs	r3, #128	@ 0x80
 800c22a:	4a1f      	ldr	r2, [pc, #124]	@ (800c2a8 <create_name+0x120>)
 800c22c:	5cd3      	ldrb	r3, [r2, r3]
 800c22e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800c230:	7efb      	ldrb	r3, [r7, #27]
 800c232:	4619      	mov	r1, r3
 800c234:	481d      	ldr	r0, [pc, #116]	@ (800c2ac <create_name+0x124>)
 800c236:	f7ff f812 	bl	800b25e <chk_chr>
 800c23a:	4603      	mov	r3, r0
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d001      	beq.n	800c244 <create_name+0xbc>
 800c240:	2306      	movs	r3, #6
 800c242:	e02c      	b.n	800c29e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800c244:	7efb      	ldrb	r3, [r7, #27]
 800c246:	2b60      	cmp	r3, #96	@ 0x60
 800c248:	d905      	bls.n	800c256 <create_name+0xce>
 800c24a:	7efb      	ldrb	r3, [r7, #27]
 800c24c:	2b7a      	cmp	r3, #122	@ 0x7a
 800c24e:	d802      	bhi.n	800c256 <create_name+0xce>
 800c250:	7efb      	ldrb	r3, [r7, #27]
 800c252:	3b20      	subs	r3, #32
 800c254:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800c256:	693b      	ldr	r3, [r7, #16]
 800c258:	1c5a      	adds	r2, r3, #1
 800c25a:	613a      	str	r2, [r7, #16]
 800c25c:	68ba      	ldr	r2, [r7, #8]
 800c25e:	4413      	add	r3, r2
 800c260:	7efa      	ldrb	r2, [r7, #27]
 800c262:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800c264:	e7a6      	b.n	800c1b4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c266:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800c268:	68fa      	ldr	r2, [r7, #12]
 800c26a:	69fb      	ldr	r3, [r7, #28]
 800c26c:	441a      	add	r2, r3
 800c26e:	683b      	ldr	r3, [r7, #0]
 800c270:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800c272:	693b      	ldr	r3, [r7, #16]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d101      	bne.n	800c27c <create_name+0xf4>
 800c278:	2306      	movs	r3, #6
 800c27a:	e010      	b.n	800c29e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c27c:	68bb      	ldr	r3, [r7, #8]
 800c27e:	781b      	ldrb	r3, [r3, #0]
 800c280:	2be5      	cmp	r3, #229	@ 0xe5
 800c282:	d102      	bne.n	800c28a <create_name+0x102>
 800c284:	68bb      	ldr	r3, [r7, #8]
 800c286:	2205      	movs	r2, #5
 800c288:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c28a:	7efb      	ldrb	r3, [r7, #27]
 800c28c:	2b20      	cmp	r3, #32
 800c28e:	d801      	bhi.n	800c294 <create_name+0x10c>
 800c290:	2204      	movs	r2, #4
 800c292:	e000      	b.n	800c296 <create_name+0x10e>
 800c294:	2200      	movs	r2, #0
 800c296:	68bb      	ldr	r3, [r7, #8]
 800c298:	330b      	adds	r3, #11
 800c29a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800c29c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800c29e:	4618      	mov	r0, r3
 800c2a0:	3720      	adds	r7, #32
 800c2a2:	46bd      	mov	sp, r7
 800c2a4:	bd80      	pop	{r7, pc}
 800c2a6:	bf00      	nop
 800c2a8:	08010fec 	.word	0x08010fec
 800c2ac:	08010f74 	.word	0x08010f74

0800c2b0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c2b0:	b580      	push	{r7, lr}
 800c2b2:	b086      	sub	sp, #24
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	6078      	str	r0, [r7, #4]
 800c2b8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800c2be:	693b      	ldr	r3, [r7, #16]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c2c4:	e002      	b.n	800c2cc <follow_path+0x1c>
 800c2c6:	683b      	ldr	r3, [r7, #0]
 800c2c8:	3301      	adds	r3, #1
 800c2ca:	603b      	str	r3, [r7, #0]
 800c2cc:	683b      	ldr	r3, [r7, #0]
 800c2ce:	781b      	ldrb	r3, [r3, #0]
 800c2d0:	2b2f      	cmp	r3, #47	@ 0x2f
 800c2d2:	d0f8      	beq.n	800c2c6 <follow_path+0x16>
 800c2d4:	683b      	ldr	r3, [r7, #0]
 800c2d6:	781b      	ldrb	r3, [r3, #0]
 800c2d8:	2b5c      	cmp	r3, #92	@ 0x5c
 800c2da:	d0f4      	beq.n	800c2c6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800c2dc:	693b      	ldr	r3, [r7, #16]
 800c2de:	2200      	movs	r2, #0
 800c2e0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c2e2:	683b      	ldr	r3, [r7, #0]
 800c2e4:	781b      	ldrb	r3, [r3, #0]
 800c2e6:	2b1f      	cmp	r3, #31
 800c2e8:	d80a      	bhi.n	800c300 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	2280      	movs	r2, #128	@ 0x80
 800c2ee:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800c2f2:	2100      	movs	r1, #0
 800c2f4:	6878      	ldr	r0, [r7, #4]
 800c2f6:	f7ff fcfa 	bl	800bcee <dir_sdi>
 800c2fa:	4603      	mov	r3, r0
 800c2fc:	75fb      	strb	r3, [r7, #23]
 800c2fe:	e043      	b.n	800c388 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c300:	463b      	mov	r3, r7
 800c302:	4619      	mov	r1, r3
 800c304:	6878      	ldr	r0, [r7, #4]
 800c306:	f7ff ff3f 	bl	800c188 <create_name>
 800c30a:	4603      	mov	r3, r0
 800c30c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c30e:	7dfb      	ldrb	r3, [r7, #23]
 800c310:	2b00      	cmp	r3, #0
 800c312:	d134      	bne.n	800c37e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c314:	6878      	ldr	r0, [r7, #4]
 800c316:	f7ff feb0 	bl	800c07a <dir_find>
 800c31a:	4603      	mov	r3, r0
 800c31c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800c324:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800c326:	7dfb      	ldrb	r3, [r7, #23]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d00a      	beq.n	800c342 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c32c:	7dfb      	ldrb	r3, [r7, #23]
 800c32e:	2b04      	cmp	r3, #4
 800c330:	d127      	bne.n	800c382 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c332:	7afb      	ldrb	r3, [r7, #11]
 800c334:	f003 0304 	and.w	r3, r3, #4
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d122      	bne.n	800c382 <follow_path+0xd2>
 800c33c:	2305      	movs	r3, #5
 800c33e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800c340:	e01f      	b.n	800c382 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c342:	7afb      	ldrb	r3, [r7, #11]
 800c344:	f003 0304 	and.w	r3, r3, #4
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d11c      	bne.n	800c386 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c34c:	693b      	ldr	r3, [r7, #16]
 800c34e:	799b      	ldrb	r3, [r3, #6]
 800c350:	f003 0310 	and.w	r3, r3, #16
 800c354:	2b00      	cmp	r3, #0
 800c356:	d102      	bne.n	800c35e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800c358:	2305      	movs	r3, #5
 800c35a:	75fb      	strb	r3, [r7, #23]
 800c35c:	e014      	b.n	800c388 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	695b      	ldr	r3, [r3, #20]
 800c368:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c36c:	4413      	add	r3, r2
 800c36e:	4619      	mov	r1, r3
 800c370:	68f8      	ldr	r0, [r7, #12]
 800c372:	f7ff fe43 	bl	800bffc <ld_clust>
 800c376:	4602      	mov	r2, r0
 800c378:	693b      	ldr	r3, [r7, #16]
 800c37a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c37c:	e7c0      	b.n	800c300 <follow_path+0x50>
			if (res != FR_OK) break;
 800c37e:	bf00      	nop
 800c380:	e002      	b.n	800c388 <follow_path+0xd8>
				break;
 800c382:	bf00      	nop
 800c384:	e000      	b.n	800c388 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c386:	bf00      	nop
			}
		}
	}

	return res;
 800c388:	7dfb      	ldrb	r3, [r7, #23]
}
 800c38a:	4618      	mov	r0, r3
 800c38c:	3718      	adds	r7, #24
 800c38e:	46bd      	mov	sp, r7
 800c390:	bd80      	pop	{r7, pc}

0800c392 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c392:	b480      	push	{r7}
 800c394:	b087      	sub	sp, #28
 800c396:	af00      	add	r7, sp, #0
 800c398:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c39a:	f04f 33ff 	mov.w	r3, #4294967295
 800c39e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d031      	beq.n	800c40c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	617b      	str	r3, [r7, #20]
 800c3ae:	e002      	b.n	800c3b6 <get_ldnumber+0x24>
 800c3b0:	697b      	ldr	r3, [r7, #20]
 800c3b2:	3301      	adds	r3, #1
 800c3b4:	617b      	str	r3, [r7, #20]
 800c3b6:	697b      	ldr	r3, [r7, #20]
 800c3b8:	781b      	ldrb	r3, [r3, #0]
 800c3ba:	2b20      	cmp	r3, #32
 800c3bc:	d903      	bls.n	800c3c6 <get_ldnumber+0x34>
 800c3be:	697b      	ldr	r3, [r7, #20]
 800c3c0:	781b      	ldrb	r3, [r3, #0]
 800c3c2:	2b3a      	cmp	r3, #58	@ 0x3a
 800c3c4:	d1f4      	bne.n	800c3b0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c3c6:	697b      	ldr	r3, [r7, #20]
 800c3c8:	781b      	ldrb	r3, [r3, #0]
 800c3ca:	2b3a      	cmp	r3, #58	@ 0x3a
 800c3cc:	d11c      	bne.n	800c408 <get_ldnumber+0x76>
			tp = *path;
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	1c5a      	adds	r2, r3, #1
 800c3d8:	60fa      	str	r2, [r7, #12]
 800c3da:	781b      	ldrb	r3, [r3, #0]
 800c3dc:	3b30      	subs	r3, #48	@ 0x30
 800c3de:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c3e0:	68bb      	ldr	r3, [r7, #8]
 800c3e2:	2b09      	cmp	r3, #9
 800c3e4:	d80e      	bhi.n	800c404 <get_ldnumber+0x72>
 800c3e6:	68fa      	ldr	r2, [r7, #12]
 800c3e8:	697b      	ldr	r3, [r7, #20]
 800c3ea:	429a      	cmp	r2, r3
 800c3ec:	d10a      	bne.n	800c404 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c3ee:	68bb      	ldr	r3, [r7, #8]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d107      	bne.n	800c404 <get_ldnumber+0x72>
					vol = (int)i;
 800c3f4:	68bb      	ldr	r3, [r7, #8]
 800c3f6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c3f8:	697b      	ldr	r3, [r7, #20]
 800c3fa:	3301      	adds	r3, #1
 800c3fc:	617b      	str	r3, [r7, #20]
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	697a      	ldr	r2, [r7, #20]
 800c402:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c404:	693b      	ldr	r3, [r7, #16]
 800c406:	e002      	b.n	800c40e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c408:	2300      	movs	r3, #0
 800c40a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c40c:	693b      	ldr	r3, [r7, #16]
}
 800c40e:	4618      	mov	r0, r3
 800c410:	371c      	adds	r7, #28
 800c412:	46bd      	mov	sp, r7
 800c414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c418:	4770      	bx	lr
	...

0800c41c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b082      	sub	sp, #8
 800c420:	af00      	add	r7, sp, #0
 800c422:	6078      	str	r0, [r7, #4]
 800c424:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	2200      	movs	r2, #0
 800c42a:	70da      	strb	r2, [r3, #3]
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	f04f 32ff 	mov.w	r2, #4294967295
 800c432:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c434:	6839      	ldr	r1, [r7, #0]
 800c436:	6878      	ldr	r0, [r7, #4]
 800c438:	f7ff f8dc 	bl	800b5f4 <move_window>
 800c43c:	4603      	mov	r3, r0
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d001      	beq.n	800c446 <check_fs+0x2a>
 800c442:	2304      	movs	r3, #4
 800c444:	e038      	b.n	800c4b8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	3330      	adds	r3, #48	@ 0x30
 800c44a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800c44e:	4618      	mov	r0, r3
 800c450:	f7fe fe20 	bl	800b094 <ld_word>
 800c454:	4603      	mov	r3, r0
 800c456:	461a      	mov	r2, r3
 800c458:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800c45c:	429a      	cmp	r2, r3
 800c45e:	d001      	beq.n	800c464 <check_fs+0x48>
 800c460:	2303      	movs	r3, #3
 800c462:	e029      	b.n	800c4b8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c46a:	2be9      	cmp	r3, #233	@ 0xe9
 800c46c:	d009      	beq.n	800c482 <check_fs+0x66>
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c474:	2beb      	cmp	r3, #235	@ 0xeb
 800c476:	d11e      	bne.n	800c4b6 <check_fs+0x9a>
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800c47e:	2b90      	cmp	r3, #144	@ 0x90
 800c480:	d119      	bne.n	800c4b6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	3330      	adds	r3, #48	@ 0x30
 800c486:	3336      	adds	r3, #54	@ 0x36
 800c488:	4618      	mov	r0, r3
 800c48a:	f7fe fe1b 	bl	800b0c4 <ld_dword>
 800c48e:	4603      	mov	r3, r0
 800c490:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800c494:	4a0a      	ldr	r2, [pc, #40]	@ (800c4c0 <check_fs+0xa4>)
 800c496:	4293      	cmp	r3, r2
 800c498:	d101      	bne.n	800c49e <check_fs+0x82>
 800c49a:	2300      	movs	r3, #0
 800c49c:	e00c      	b.n	800c4b8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	3330      	adds	r3, #48	@ 0x30
 800c4a2:	3352      	adds	r3, #82	@ 0x52
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	f7fe fe0d 	bl	800b0c4 <ld_dword>
 800c4aa:	4603      	mov	r3, r0
 800c4ac:	4a05      	ldr	r2, [pc, #20]	@ (800c4c4 <check_fs+0xa8>)
 800c4ae:	4293      	cmp	r3, r2
 800c4b0:	d101      	bne.n	800c4b6 <check_fs+0x9a>
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	e000      	b.n	800c4b8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800c4b6:	2302      	movs	r3, #2
}
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	3708      	adds	r7, #8
 800c4bc:	46bd      	mov	sp, r7
 800c4be:	bd80      	pop	{r7, pc}
 800c4c0:	00544146 	.word	0x00544146
 800c4c4:	33544146 	.word	0x33544146

0800c4c8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800c4c8:	b580      	push	{r7, lr}
 800c4ca:	b096      	sub	sp, #88	@ 0x58
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	60f8      	str	r0, [r7, #12]
 800c4d0:	60b9      	str	r1, [r7, #8]
 800c4d2:	4613      	mov	r3, r2
 800c4d4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800c4d6:	68bb      	ldr	r3, [r7, #8]
 800c4d8:	2200      	movs	r2, #0
 800c4da:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c4dc:	68f8      	ldr	r0, [r7, #12]
 800c4de:	f7ff ff58 	bl	800c392 <get_ldnumber>
 800c4e2:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c4e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	da01      	bge.n	800c4ee <find_volume+0x26>
 800c4ea:	230b      	movs	r3, #11
 800c4ec:	e22d      	b.n	800c94a <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c4ee:	4aa1      	ldr	r2, [pc, #644]	@ (800c774 <find_volume+0x2ac>)
 800c4f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c4f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c4f6:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c4f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d101      	bne.n	800c502 <find_volume+0x3a>
 800c4fe:	230c      	movs	r3, #12
 800c500:	e223      	b.n	800c94a <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800c502:	68bb      	ldr	r3, [r7, #8]
 800c504:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c506:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800c508:	79fb      	ldrb	r3, [r7, #7]
 800c50a:	f023 0301 	bic.w	r3, r3, #1
 800c50e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800c510:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c512:	781b      	ldrb	r3, [r3, #0]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d01a      	beq.n	800c54e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800c518:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c51a:	785b      	ldrb	r3, [r3, #1]
 800c51c:	4618      	mov	r0, r3
 800c51e:	f7fe fd1b 	bl	800af58 <disk_status>
 800c522:	4603      	mov	r3, r0
 800c524:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c528:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c52c:	f003 0301 	and.w	r3, r3, #1
 800c530:	2b00      	cmp	r3, #0
 800c532:	d10c      	bne.n	800c54e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800c534:	79fb      	ldrb	r3, [r7, #7]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d007      	beq.n	800c54a <find_volume+0x82>
 800c53a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c53e:	f003 0304 	and.w	r3, r3, #4
 800c542:	2b00      	cmp	r3, #0
 800c544:	d001      	beq.n	800c54a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800c546:	230a      	movs	r3, #10
 800c548:	e1ff      	b.n	800c94a <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800c54a:	2300      	movs	r3, #0
 800c54c:	e1fd      	b.n	800c94a <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c54e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c550:	2200      	movs	r2, #0
 800c552:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c554:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c556:	b2da      	uxtb	r2, r3
 800c558:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c55a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c55c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c55e:	785b      	ldrb	r3, [r3, #1]
 800c560:	4618      	mov	r0, r3
 800c562:	f7fe fd13 	bl	800af8c <disk_initialize>
 800c566:	4603      	mov	r3, r0
 800c568:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800c56c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c570:	f003 0301 	and.w	r3, r3, #1
 800c574:	2b00      	cmp	r3, #0
 800c576:	d001      	beq.n	800c57c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c578:	2303      	movs	r3, #3
 800c57a:	e1e6      	b.n	800c94a <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800c57c:	79fb      	ldrb	r3, [r7, #7]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d007      	beq.n	800c592 <find_volume+0xca>
 800c582:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c586:	f003 0304 	and.w	r3, r3, #4
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d001      	beq.n	800c592 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800c58e:	230a      	movs	r3, #10
 800c590:	e1db      	b.n	800c94a <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800c592:	2300      	movs	r3, #0
 800c594:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800c596:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c598:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c59a:	f7ff ff3f 	bl	800c41c <check_fs>
 800c59e:	4603      	mov	r3, r0
 800c5a0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800c5a4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c5a8:	2b02      	cmp	r3, #2
 800c5aa:	d149      	bne.n	800c640 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	643b      	str	r3, [r7, #64]	@ 0x40
 800c5b0:	e01e      	b.n	800c5f0 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800c5b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5b4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c5b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c5ba:	011b      	lsls	r3, r3, #4
 800c5bc:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800c5c0:	4413      	add	r3, r2
 800c5c2:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800c5c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5c6:	3304      	adds	r3, #4
 800c5c8:	781b      	ldrb	r3, [r3, #0]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d006      	beq.n	800c5dc <find_volume+0x114>
 800c5ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5d0:	3308      	adds	r3, #8
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	f7fe fd76 	bl	800b0c4 <ld_dword>
 800c5d8:	4602      	mov	r2, r0
 800c5da:	e000      	b.n	800c5de <find_volume+0x116>
 800c5dc:	2200      	movs	r2, #0
 800c5de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c5e0:	009b      	lsls	r3, r3, #2
 800c5e2:	3358      	adds	r3, #88	@ 0x58
 800c5e4:	443b      	add	r3, r7
 800c5e6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c5ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c5ec:	3301      	adds	r3, #1
 800c5ee:	643b      	str	r3, [r7, #64]	@ 0x40
 800c5f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c5f2:	2b03      	cmp	r3, #3
 800c5f4:	d9dd      	bls.n	800c5b2 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800c5fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d002      	beq.n	800c606 <find_volume+0x13e>
 800c600:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c602:	3b01      	subs	r3, #1
 800c604:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800c606:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c608:	009b      	lsls	r3, r3, #2
 800c60a:	3358      	adds	r3, #88	@ 0x58
 800c60c:	443b      	add	r3, r7
 800c60e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800c612:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800c614:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c616:	2b00      	cmp	r3, #0
 800c618:	d005      	beq.n	800c626 <find_volume+0x15e>
 800c61a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c61c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c61e:	f7ff fefd 	bl	800c41c <check_fs>
 800c622:	4603      	mov	r3, r0
 800c624:	e000      	b.n	800c628 <find_volume+0x160>
 800c626:	2303      	movs	r3, #3
 800c628:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800c62c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c630:	2b01      	cmp	r3, #1
 800c632:	d905      	bls.n	800c640 <find_volume+0x178>
 800c634:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c636:	3301      	adds	r3, #1
 800c638:	643b      	str	r3, [r7, #64]	@ 0x40
 800c63a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c63c:	2b03      	cmp	r3, #3
 800c63e:	d9e2      	bls.n	800c606 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c640:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c644:	2b04      	cmp	r3, #4
 800c646:	d101      	bne.n	800c64c <find_volume+0x184>
 800c648:	2301      	movs	r3, #1
 800c64a:	e17e      	b.n	800c94a <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800c64c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c650:	2b01      	cmp	r3, #1
 800c652:	d901      	bls.n	800c658 <find_volume+0x190>
 800c654:	230d      	movs	r3, #13
 800c656:	e178      	b.n	800c94a <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c658:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c65a:	3330      	adds	r3, #48	@ 0x30
 800c65c:	330b      	adds	r3, #11
 800c65e:	4618      	mov	r0, r3
 800c660:	f7fe fd18 	bl	800b094 <ld_word>
 800c664:	4603      	mov	r3, r0
 800c666:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c66a:	d001      	beq.n	800c670 <find_volume+0x1a8>
 800c66c:	230d      	movs	r3, #13
 800c66e:	e16c      	b.n	800c94a <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800c670:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c672:	3330      	adds	r3, #48	@ 0x30
 800c674:	3316      	adds	r3, #22
 800c676:	4618      	mov	r0, r3
 800c678:	f7fe fd0c 	bl	800b094 <ld_word>
 800c67c:	4603      	mov	r3, r0
 800c67e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800c680:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c682:	2b00      	cmp	r3, #0
 800c684:	d106      	bne.n	800c694 <find_volume+0x1cc>
 800c686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c688:	3330      	adds	r3, #48	@ 0x30
 800c68a:	3324      	adds	r3, #36	@ 0x24
 800c68c:	4618      	mov	r0, r3
 800c68e:	f7fe fd19 	bl	800b0c4 <ld_dword>
 800c692:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800c694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c696:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c698:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800c69a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c69c:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800c6a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6a2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c6a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6a6:	789b      	ldrb	r3, [r3, #2]
 800c6a8:	2b01      	cmp	r3, #1
 800c6aa:	d005      	beq.n	800c6b8 <find_volume+0x1f0>
 800c6ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6ae:	789b      	ldrb	r3, [r3, #2]
 800c6b0:	2b02      	cmp	r3, #2
 800c6b2:	d001      	beq.n	800c6b8 <find_volume+0x1f0>
 800c6b4:	230d      	movs	r3, #13
 800c6b6:	e148      	b.n	800c94a <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800c6b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6ba:	789b      	ldrb	r3, [r3, #2]
 800c6bc:	461a      	mov	r2, r3
 800c6be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c6c0:	fb02 f303 	mul.w	r3, r2, r3
 800c6c4:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800c6c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c6cc:	461a      	mov	r2, r3
 800c6ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6d0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c6d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6d4:	895b      	ldrh	r3, [r3, #10]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d008      	beq.n	800c6ec <find_volume+0x224>
 800c6da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6dc:	895b      	ldrh	r3, [r3, #10]
 800c6de:	461a      	mov	r2, r3
 800c6e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6e2:	895b      	ldrh	r3, [r3, #10]
 800c6e4:	3b01      	subs	r3, #1
 800c6e6:	4013      	ands	r3, r2
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d001      	beq.n	800c6f0 <find_volume+0x228>
 800c6ec:	230d      	movs	r3, #13
 800c6ee:	e12c      	b.n	800c94a <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800c6f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6f2:	3330      	adds	r3, #48	@ 0x30
 800c6f4:	3311      	adds	r3, #17
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	f7fe fccc 	bl	800b094 <ld_word>
 800c6fc:	4603      	mov	r3, r0
 800c6fe:	461a      	mov	r2, r3
 800c700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c702:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800c704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c706:	891b      	ldrh	r3, [r3, #8]
 800c708:	f003 030f 	and.w	r3, r3, #15
 800c70c:	b29b      	uxth	r3, r3
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d001      	beq.n	800c716 <find_volume+0x24e>
 800c712:	230d      	movs	r3, #13
 800c714:	e119      	b.n	800c94a <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800c716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c718:	3330      	adds	r3, #48	@ 0x30
 800c71a:	3313      	adds	r3, #19
 800c71c:	4618      	mov	r0, r3
 800c71e:	f7fe fcb9 	bl	800b094 <ld_word>
 800c722:	4603      	mov	r3, r0
 800c724:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800c726:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d106      	bne.n	800c73a <find_volume+0x272>
 800c72c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c72e:	3330      	adds	r3, #48	@ 0x30
 800c730:	3320      	adds	r3, #32
 800c732:	4618      	mov	r0, r3
 800c734:	f7fe fcc6 	bl	800b0c4 <ld_dword>
 800c738:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800c73a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c73c:	3330      	adds	r3, #48	@ 0x30
 800c73e:	330e      	adds	r3, #14
 800c740:	4618      	mov	r0, r3
 800c742:	f7fe fca7 	bl	800b094 <ld_word>
 800c746:	4603      	mov	r3, r0
 800c748:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800c74a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d101      	bne.n	800c754 <find_volume+0x28c>
 800c750:	230d      	movs	r3, #13
 800c752:	e0fa      	b.n	800c94a <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800c754:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800c756:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c758:	4413      	add	r3, r2
 800c75a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c75c:	8912      	ldrh	r2, [r2, #8]
 800c75e:	0912      	lsrs	r2, r2, #4
 800c760:	b292      	uxth	r2, r2
 800c762:	4413      	add	r3, r2
 800c764:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800c766:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c76a:	429a      	cmp	r2, r3
 800c76c:	d204      	bcs.n	800c778 <find_volume+0x2b0>
 800c76e:	230d      	movs	r3, #13
 800c770:	e0eb      	b.n	800c94a <find_volume+0x482>
 800c772:	bf00      	nop
 800c774:	200055f4 	.word	0x200055f4
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800c778:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c77a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c77c:	1ad3      	subs	r3, r2, r3
 800c77e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c780:	8952      	ldrh	r2, [r2, #10]
 800c782:	fbb3 f3f2 	udiv	r3, r3, r2
 800c786:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d101      	bne.n	800c792 <find_volume+0x2ca>
 800c78e:	230d      	movs	r3, #13
 800c790:	e0db      	b.n	800c94a <find_volume+0x482>
		fmt = FS_FAT32;
 800c792:	2303      	movs	r3, #3
 800c794:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800c798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c79a:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800c79e:	4293      	cmp	r3, r2
 800c7a0:	d802      	bhi.n	800c7a8 <find_volume+0x2e0>
 800c7a2:	2302      	movs	r3, #2
 800c7a4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800c7a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7aa:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800c7ae:	4293      	cmp	r3, r2
 800c7b0:	d802      	bhi.n	800c7b8 <find_volume+0x2f0>
 800c7b2:	2301      	movs	r3, #1
 800c7b4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c7b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7ba:	1c9a      	adds	r2, r3, #2
 800c7bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7be:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800c7c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7c2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c7c4:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c7c6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800c7c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c7ca:	441a      	add	r2, r3
 800c7cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7ce:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800c7d0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c7d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7d4:	441a      	add	r2, r3
 800c7d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7d8:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800c7da:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c7de:	2b03      	cmp	r3, #3
 800c7e0:	d11e      	bne.n	800c820 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c7e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7e4:	3330      	adds	r3, #48	@ 0x30
 800c7e6:	332a      	adds	r3, #42	@ 0x2a
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	f7fe fc53 	bl	800b094 <ld_word>
 800c7ee:	4603      	mov	r3, r0
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d001      	beq.n	800c7f8 <find_volume+0x330>
 800c7f4:	230d      	movs	r3, #13
 800c7f6:	e0a8      	b.n	800c94a <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800c7f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7fa:	891b      	ldrh	r3, [r3, #8]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d001      	beq.n	800c804 <find_volume+0x33c>
 800c800:	230d      	movs	r3, #13
 800c802:	e0a2      	b.n	800c94a <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800c804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c806:	3330      	adds	r3, #48	@ 0x30
 800c808:	332c      	adds	r3, #44	@ 0x2c
 800c80a:	4618      	mov	r0, r3
 800c80c:	f7fe fc5a 	bl	800b0c4 <ld_dword>
 800c810:	4602      	mov	r2, r0
 800c812:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c814:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800c816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c818:	695b      	ldr	r3, [r3, #20]
 800c81a:	009b      	lsls	r3, r3, #2
 800c81c:	647b      	str	r3, [r7, #68]	@ 0x44
 800c81e:	e01f      	b.n	800c860 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c820:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c822:	891b      	ldrh	r3, [r3, #8]
 800c824:	2b00      	cmp	r3, #0
 800c826:	d101      	bne.n	800c82c <find_volume+0x364>
 800c828:	230d      	movs	r3, #13
 800c82a:	e08e      	b.n	800c94a <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800c82c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c82e:	6a1a      	ldr	r2, [r3, #32]
 800c830:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c832:	441a      	add	r2, r3
 800c834:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c836:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c838:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c83c:	2b02      	cmp	r3, #2
 800c83e:	d103      	bne.n	800c848 <find_volume+0x380>
 800c840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c842:	695b      	ldr	r3, [r3, #20]
 800c844:	005b      	lsls	r3, r3, #1
 800c846:	e00a      	b.n	800c85e <find_volume+0x396>
 800c848:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c84a:	695a      	ldr	r2, [r3, #20]
 800c84c:	4613      	mov	r3, r2
 800c84e:	005b      	lsls	r3, r3, #1
 800c850:	4413      	add	r3, r2
 800c852:	085a      	lsrs	r2, r3, #1
 800c854:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c856:	695b      	ldr	r3, [r3, #20]
 800c858:	f003 0301 	and.w	r3, r3, #1
 800c85c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800c85e:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c860:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c862:	699a      	ldr	r2, [r3, #24]
 800c864:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c866:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800c86a:	0a5b      	lsrs	r3, r3, #9
 800c86c:	429a      	cmp	r2, r3
 800c86e:	d201      	bcs.n	800c874 <find_volume+0x3ac>
 800c870:	230d      	movs	r3, #13
 800c872:	e06a      	b.n	800c94a <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c874:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c876:	f04f 32ff 	mov.w	r2, #4294967295
 800c87a:	611a      	str	r2, [r3, #16]
 800c87c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c87e:	691a      	ldr	r2, [r3, #16]
 800c880:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c882:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800c884:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c886:	2280      	movs	r2, #128	@ 0x80
 800c888:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800c88a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c88e:	2b03      	cmp	r3, #3
 800c890:	d149      	bne.n	800c926 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800c892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c894:	3330      	adds	r3, #48	@ 0x30
 800c896:	3330      	adds	r3, #48	@ 0x30
 800c898:	4618      	mov	r0, r3
 800c89a:	f7fe fbfb 	bl	800b094 <ld_word>
 800c89e:	4603      	mov	r3, r0
 800c8a0:	2b01      	cmp	r3, #1
 800c8a2:	d140      	bne.n	800c926 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800c8a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c8a6:	3301      	adds	r3, #1
 800c8a8:	4619      	mov	r1, r3
 800c8aa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c8ac:	f7fe fea2 	bl	800b5f4 <move_window>
 800c8b0:	4603      	mov	r3, r0
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d137      	bne.n	800c926 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800c8b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8b8:	2200      	movs	r2, #0
 800c8ba:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800c8bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8be:	3330      	adds	r3, #48	@ 0x30
 800c8c0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	f7fe fbe5 	bl	800b094 <ld_word>
 800c8ca:	4603      	mov	r3, r0
 800c8cc:	461a      	mov	r2, r3
 800c8ce:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800c8d2:	429a      	cmp	r2, r3
 800c8d4:	d127      	bne.n	800c926 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800c8d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8d8:	3330      	adds	r3, #48	@ 0x30
 800c8da:	4618      	mov	r0, r3
 800c8dc:	f7fe fbf2 	bl	800b0c4 <ld_dword>
 800c8e0:	4603      	mov	r3, r0
 800c8e2:	4a1c      	ldr	r2, [pc, #112]	@ (800c954 <find_volume+0x48c>)
 800c8e4:	4293      	cmp	r3, r2
 800c8e6:	d11e      	bne.n	800c926 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800c8e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8ea:	3330      	adds	r3, #48	@ 0x30
 800c8ec:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	f7fe fbe7 	bl	800b0c4 <ld_dword>
 800c8f6:	4603      	mov	r3, r0
 800c8f8:	4a17      	ldr	r2, [pc, #92]	@ (800c958 <find_volume+0x490>)
 800c8fa:	4293      	cmp	r3, r2
 800c8fc:	d113      	bne.n	800c926 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800c8fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c900:	3330      	adds	r3, #48	@ 0x30
 800c902:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800c906:	4618      	mov	r0, r3
 800c908:	f7fe fbdc 	bl	800b0c4 <ld_dword>
 800c90c:	4602      	mov	r2, r0
 800c90e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c910:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800c912:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c914:	3330      	adds	r3, #48	@ 0x30
 800c916:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800c91a:	4618      	mov	r0, r3
 800c91c:	f7fe fbd2 	bl	800b0c4 <ld_dword>
 800c920:	4602      	mov	r2, r0
 800c922:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c924:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800c926:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c928:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800c92c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800c92e:	4b0b      	ldr	r3, [pc, #44]	@ (800c95c <find_volume+0x494>)
 800c930:	881b      	ldrh	r3, [r3, #0]
 800c932:	3301      	adds	r3, #1
 800c934:	b29a      	uxth	r2, r3
 800c936:	4b09      	ldr	r3, [pc, #36]	@ (800c95c <find_volume+0x494>)
 800c938:	801a      	strh	r2, [r3, #0]
 800c93a:	4b08      	ldr	r3, [pc, #32]	@ (800c95c <find_volume+0x494>)
 800c93c:	881a      	ldrh	r2, [r3, #0]
 800c93e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c940:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800c942:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c944:	f7fe fdee 	bl	800b524 <clear_lock>
#endif
	return FR_OK;
 800c948:	2300      	movs	r3, #0
}
 800c94a:	4618      	mov	r0, r3
 800c94c:	3758      	adds	r7, #88	@ 0x58
 800c94e:	46bd      	mov	sp, r7
 800c950:	bd80      	pop	{r7, pc}
 800c952:	bf00      	nop
 800c954:	41615252 	.word	0x41615252
 800c958:	61417272 	.word	0x61417272
 800c95c:	200055f8 	.word	0x200055f8

0800c960 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800c960:	b580      	push	{r7, lr}
 800c962:	b084      	sub	sp, #16
 800c964:	af00      	add	r7, sp, #0
 800c966:	6078      	str	r0, [r7, #4]
 800c968:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800c96a:	2309      	movs	r3, #9
 800c96c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	2b00      	cmp	r3, #0
 800c972:	d01c      	beq.n	800c9ae <validate+0x4e>
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d018      	beq.n	800c9ae <validate+0x4e>
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	781b      	ldrb	r3, [r3, #0]
 800c982:	2b00      	cmp	r3, #0
 800c984:	d013      	beq.n	800c9ae <validate+0x4e>
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	889a      	ldrh	r2, [r3, #4]
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	88db      	ldrh	r3, [r3, #6]
 800c990:	429a      	cmp	r2, r3
 800c992:	d10c      	bne.n	800c9ae <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	785b      	ldrb	r3, [r3, #1]
 800c99a:	4618      	mov	r0, r3
 800c99c:	f7fe fadc 	bl	800af58 <disk_status>
 800c9a0:	4603      	mov	r3, r0
 800c9a2:	f003 0301 	and.w	r3, r3, #1
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d101      	bne.n	800c9ae <validate+0x4e>
			res = FR_OK;
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c9ae:	7bfb      	ldrb	r3, [r7, #15]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d102      	bne.n	800c9ba <validate+0x5a>
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	e000      	b.n	800c9bc <validate+0x5c>
 800c9ba:	2300      	movs	r3, #0
 800c9bc:	683a      	ldr	r2, [r7, #0]
 800c9be:	6013      	str	r3, [r2, #0]
	return res;
 800c9c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	3710      	adds	r7, #16
 800c9c6:	46bd      	mov	sp, r7
 800c9c8:	bd80      	pop	{r7, pc}
	...

0800c9cc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c9cc:	b580      	push	{r7, lr}
 800c9ce:	b088      	sub	sp, #32
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	60f8      	str	r0, [r7, #12]
 800c9d4:	60b9      	str	r1, [r7, #8]
 800c9d6:	4613      	mov	r3, r2
 800c9d8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c9da:	68bb      	ldr	r3, [r7, #8]
 800c9dc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800c9de:	f107 0310 	add.w	r3, r7, #16
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	f7ff fcd5 	bl	800c392 <get_ldnumber>
 800c9e8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800c9ea:	69fb      	ldr	r3, [r7, #28]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	da01      	bge.n	800c9f4 <f_mount+0x28>
 800c9f0:	230b      	movs	r3, #11
 800c9f2:	e02b      	b.n	800ca4c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c9f4:	4a17      	ldr	r2, [pc, #92]	@ (800ca54 <f_mount+0x88>)
 800c9f6:	69fb      	ldr	r3, [r7, #28]
 800c9f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c9fc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c9fe:	69bb      	ldr	r3, [r7, #24]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d005      	beq.n	800ca10 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800ca04:	69b8      	ldr	r0, [r7, #24]
 800ca06:	f7fe fd8d 	bl	800b524 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800ca0a:	69bb      	ldr	r3, [r7, #24]
 800ca0c:	2200      	movs	r2, #0
 800ca0e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d002      	beq.n	800ca1c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	2200      	movs	r2, #0
 800ca1a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800ca1c:	68fa      	ldr	r2, [r7, #12]
 800ca1e:	490d      	ldr	r1, [pc, #52]	@ (800ca54 <f_mount+0x88>)
 800ca20:	69fb      	ldr	r3, [r7, #28]
 800ca22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d002      	beq.n	800ca32 <f_mount+0x66>
 800ca2c:	79fb      	ldrb	r3, [r7, #7]
 800ca2e:	2b01      	cmp	r3, #1
 800ca30:	d001      	beq.n	800ca36 <f_mount+0x6a>
 800ca32:	2300      	movs	r3, #0
 800ca34:	e00a      	b.n	800ca4c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800ca36:	f107 010c 	add.w	r1, r7, #12
 800ca3a:	f107 0308 	add.w	r3, r7, #8
 800ca3e:	2200      	movs	r2, #0
 800ca40:	4618      	mov	r0, r3
 800ca42:	f7ff fd41 	bl	800c4c8 <find_volume>
 800ca46:	4603      	mov	r3, r0
 800ca48:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800ca4a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	3720      	adds	r7, #32
 800ca50:	46bd      	mov	sp, r7
 800ca52:	bd80      	pop	{r7, pc}
 800ca54:	200055f4 	.word	0x200055f4

0800ca58 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	b098      	sub	sp, #96	@ 0x60
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	60f8      	str	r0, [r7, #12]
 800ca60:	60b9      	str	r1, [r7, #8]
 800ca62:	4613      	mov	r3, r2
 800ca64:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d101      	bne.n	800ca70 <f_open+0x18>
 800ca6c:	2309      	movs	r3, #9
 800ca6e:	e1a9      	b.n	800cdc4 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800ca70:	79fb      	ldrb	r3, [r7, #7]
 800ca72:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ca76:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800ca78:	79fa      	ldrb	r2, [r7, #7]
 800ca7a:	f107 0110 	add.w	r1, r7, #16
 800ca7e:	f107 0308 	add.w	r3, r7, #8
 800ca82:	4618      	mov	r0, r3
 800ca84:	f7ff fd20 	bl	800c4c8 <find_volume>
 800ca88:	4603      	mov	r3, r0
 800ca8a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800ca8e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	f040 818d 	bne.w	800cdb2 <f_open+0x35a>
		dj.obj.fs = fs;
 800ca98:	693b      	ldr	r3, [r7, #16]
 800ca9a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800ca9c:	68ba      	ldr	r2, [r7, #8]
 800ca9e:	f107 0314 	add.w	r3, r7, #20
 800caa2:	4611      	mov	r1, r2
 800caa4:	4618      	mov	r0, r3
 800caa6:	f7ff fc03 	bl	800c2b0 <follow_path>
 800caaa:	4603      	mov	r3, r0
 800caac:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800cab0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d118      	bne.n	800caea <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800cab8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800cabc:	b25b      	sxtb	r3, r3
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	da03      	bge.n	800caca <f_open+0x72>
				res = FR_INVALID_NAME;
 800cac2:	2306      	movs	r3, #6
 800cac4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800cac8:	e00f      	b.n	800caea <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800caca:	79fb      	ldrb	r3, [r7, #7]
 800cacc:	2b01      	cmp	r3, #1
 800cace:	bf8c      	ite	hi
 800cad0:	2301      	movhi	r3, #1
 800cad2:	2300      	movls	r3, #0
 800cad4:	b2db      	uxtb	r3, r3
 800cad6:	461a      	mov	r2, r3
 800cad8:	f107 0314 	add.w	r3, r7, #20
 800cadc:	4611      	mov	r1, r2
 800cade:	4618      	mov	r0, r3
 800cae0:	f7fe fbd8 	bl	800b294 <chk_lock>
 800cae4:	4603      	mov	r3, r0
 800cae6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800caea:	79fb      	ldrb	r3, [r7, #7]
 800caec:	f003 031c 	and.w	r3, r3, #28
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d07f      	beq.n	800cbf4 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800caf4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d017      	beq.n	800cb2c <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800cafc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cb00:	2b04      	cmp	r3, #4
 800cb02:	d10e      	bne.n	800cb22 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800cb04:	f7fe fc22 	bl	800b34c <enq_lock>
 800cb08:	4603      	mov	r3, r0
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d006      	beq.n	800cb1c <f_open+0xc4>
 800cb0e:	f107 0314 	add.w	r3, r7, #20
 800cb12:	4618      	mov	r0, r3
 800cb14:	f7ff fb06 	bl	800c124 <dir_register>
 800cb18:	4603      	mov	r3, r0
 800cb1a:	e000      	b.n	800cb1e <f_open+0xc6>
 800cb1c:	2312      	movs	r3, #18
 800cb1e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800cb22:	79fb      	ldrb	r3, [r7, #7]
 800cb24:	f043 0308 	orr.w	r3, r3, #8
 800cb28:	71fb      	strb	r3, [r7, #7]
 800cb2a:	e010      	b.n	800cb4e <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800cb2c:	7ebb      	ldrb	r3, [r7, #26]
 800cb2e:	f003 0311 	and.w	r3, r3, #17
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d003      	beq.n	800cb3e <f_open+0xe6>
					res = FR_DENIED;
 800cb36:	2307      	movs	r3, #7
 800cb38:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800cb3c:	e007      	b.n	800cb4e <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800cb3e:	79fb      	ldrb	r3, [r7, #7]
 800cb40:	f003 0304 	and.w	r3, r3, #4
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d002      	beq.n	800cb4e <f_open+0xf6>
 800cb48:	2308      	movs	r3, #8
 800cb4a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800cb4e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d168      	bne.n	800cc28 <f_open+0x1d0>
 800cb56:	79fb      	ldrb	r3, [r7, #7]
 800cb58:	f003 0308 	and.w	r3, r3, #8
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d063      	beq.n	800cc28 <f_open+0x1d0>
				dw = GET_FATTIME();
 800cb60:	f7fd ffb8 	bl	800aad4 <get_fattime>
 800cb64:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800cb66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb68:	330e      	adds	r3, #14
 800cb6a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	f7fe fae7 	bl	800b140 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800cb72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb74:	3316      	adds	r3, #22
 800cb76:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800cb78:	4618      	mov	r0, r3
 800cb7a:	f7fe fae1 	bl	800b140 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800cb7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb80:	330b      	adds	r3, #11
 800cb82:	2220      	movs	r2, #32
 800cb84:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800cb86:	693b      	ldr	r3, [r7, #16]
 800cb88:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cb8a:	4611      	mov	r1, r2
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	f7ff fa35 	bl	800bffc <ld_clust>
 800cb92:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800cb94:	693b      	ldr	r3, [r7, #16]
 800cb96:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800cb98:	2200      	movs	r2, #0
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	f7ff fa4d 	bl	800c03a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800cba0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cba2:	331c      	adds	r3, #28
 800cba4:	2100      	movs	r1, #0
 800cba6:	4618      	mov	r0, r3
 800cba8:	f7fe faca 	bl	800b140 <st_dword>
					fs->wflag = 1;
 800cbac:	693b      	ldr	r3, [r7, #16]
 800cbae:	2201      	movs	r2, #1
 800cbb0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800cbb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d037      	beq.n	800cc28 <f_open+0x1d0>
						dw = fs->winsect;
 800cbb8:	693b      	ldr	r3, [r7, #16]
 800cbba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cbbc:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800cbbe:	f107 0314 	add.w	r3, r7, #20
 800cbc2:	2200      	movs	r2, #0
 800cbc4:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800cbc6:	4618      	mov	r0, r3
 800cbc8:	f7fe ff60 	bl	800ba8c <remove_chain>
 800cbcc:	4603      	mov	r3, r0
 800cbce:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800cbd2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d126      	bne.n	800cc28 <f_open+0x1d0>
							res = move_window(fs, dw);
 800cbda:	693b      	ldr	r3, [r7, #16]
 800cbdc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800cbde:	4618      	mov	r0, r3
 800cbe0:	f7fe fd08 	bl	800b5f4 <move_window>
 800cbe4:	4603      	mov	r3, r0
 800cbe6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800cbea:	693b      	ldr	r3, [r7, #16]
 800cbec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800cbee:	3a01      	subs	r2, #1
 800cbf0:	60da      	str	r2, [r3, #12]
 800cbf2:	e019      	b.n	800cc28 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800cbf4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d115      	bne.n	800cc28 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800cbfc:	7ebb      	ldrb	r3, [r7, #26]
 800cbfe:	f003 0310 	and.w	r3, r3, #16
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d003      	beq.n	800cc0e <f_open+0x1b6>
					res = FR_NO_FILE;
 800cc06:	2304      	movs	r3, #4
 800cc08:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800cc0c:	e00c      	b.n	800cc28 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800cc0e:	79fb      	ldrb	r3, [r7, #7]
 800cc10:	f003 0302 	and.w	r3, r3, #2
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d007      	beq.n	800cc28 <f_open+0x1d0>
 800cc18:	7ebb      	ldrb	r3, [r7, #26]
 800cc1a:	f003 0301 	and.w	r3, r3, #1
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d002      	beq.n	800cc28 <f_open+0x1d0>
						res = FR_DENIED;
 800cc22:	2307      	movs	r3, #7
 800cc24:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800cc28:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d126      	bne.n	800cc7e <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800cc30:	79fb      	ldrb	r3, [r7, #7]
 800cc32:	f003 0308 	and.w	r3, r3, #8
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d003      	beq.n	800cc42 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800cc3a:	79fb      	ldrb	r3, [r7, #7]
 800cc3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cc40:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800cc42:	693b      	ldr	r3, [r7, #16]
 800cc44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800cc4a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800cc50:	79fb      	ldrb	r3, [r7, #7]
 800cc52:	2b01      	cmp	r3, #1
 800cc54:	bf8c      	ite	hi
 800cc56:	2301      	movhi	r3, #1
 800cc58:	2300      	movls	r3, #0
 800cc5a:	b2db      	uxtb	r3, r3
 800cc5c:	461a      	mov	r2, r3
 800cc5e:	f107 0314 	add.w	r3, r7, #20
 800cc62:	4611      	mov	r1, r2
 800cc64:	4618      	mov	r0, r3
 800cc66:	f7fe fb93 	bl	800b390 <inc_lock>
 800cc6a:	4602      	mov	r2, r0
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	691b      	ldr	r3, [r3, #16]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d102      	bne.n	800cc7e <f_open+0x226>
 800cc78:	2302      	movs	r3, #2
 800cc7a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800cc7e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	f040 8095 	bne.w	800cdb2 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800cc88:	693b      	ldr	r3, [r7, #16]
 800cc8a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cc8c:	4611      	mov	r1, r2
 800cc8e:	4618      	mov	r0, r3
 800cc90:	f7ff f9b4 	bl	800bffc <ld_clust>
 800cc94:	4602      	mov	r2, r0
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800cc9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc9c:	331c      	adds	r3, #28
 800cc9e:	4618      	mov	r0, r3
 800cca0:	f7fe fa10 	bl	800b0c4 <ld_dword>
 800cca4:	4602      	mov	r2, r0
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	2200      	movs	r2, #0
 800ccae:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800ccb0:	693a      	ldr	r2, [r7, #16]
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800ccb6:	693b      	ldr	r3, [r7, #16]
 800ccb8:	88da      	ldrh	r2, [r3, #6]
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	79fa      	ldrb	r2, [r7, #7]
 800ccc2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	2200      	movs	r2, #0
 800ccc8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	2200      	movs	r2, #0
 800ccce:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	2200      	movs	r2, #0
 800ccd4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	3330      	adds	r3, #48	@ 0x30
 800ccda:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ccde:	2100      	movs	r1, #0
 800cce0:	4618      	mov	r0, r3
 800cce2:	f7fe fa7a 	bl	800b1da <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800cce6:	79fb      	ldrb	r3, [r7, #7]
 800cce8:	f003 0320 	and.w	r3, r3, #32
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d060      	beq.n	800cdb2 <f_open+0x35a>
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	68db      	ldr	r3, [r3, #12]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d05c      	beq.n	800cdb2 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	68da      	ldr	r2, [r3, #12]
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800cd00:	693b      	ldr	r3, [r7, #16]
 800cd02:	895b      	ldrh	r3, [r3, #10]
 800cd04:	025b      	lsls	r3, r3, #9
 800cd06:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	689b      	ldr	r3, [r3, #8]
 800cd0c:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	68db      	ldr	r3, [r3, #12]
 800cd12:	657b      	str	r3, [r7, #84]	@ 0x54
 800cd14:	e016      	b.n	800cd44 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	f7fe fd25 	bl	800b76a <get_fat>
 800cd20:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800cd22:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cd24:	2b01      	cmp	r3, #1
 800cd26:	d802      	bhi.n	800cd2e <f_open+0x2d6>
 800cd28:	2302      	movs	r3, #2
 800cd2a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800cd2e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cd30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd34:	d102      	bne.n	800cd3c <f_open+0x2e4>
 800cd36:	2301      	movs	r3, #1
 800cd38:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800cd3c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800cd3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cd40:	1ad3      	subs	r3, r2, r3
 800cd42:	657b      	str	r3, [r7, #84]	@ 0x54
 800cd44:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d103      	bne.n	800cd54 <f_open+0x2fc>
 800cd4c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800cd4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cd50:	429a      	cmp	r2, r3
 800cd52:	d8e0      	bhi.n	800cd16 <f_open+0x2be>
				}
				fp->clust = clst;
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cd58:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800cd5a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d127      	bne.n	800cdb2 <f_open+0x35a>
 800cd62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cd64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d022      	beq.n	800cdb2 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800cd6c:	693b      	ldr	r3, [r7, #16]
 800cd6e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800cd70:	4618      	mov	r0, r3
 800cd72:	f7fe fcdb 	bl	800b72c <clust2sect>
 800cd76:	6478      	str	r0, [r7, #68]	@ 0x44
 800cd78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d103      	bne.n	800cd86 <f_open+0x32e>
						res = FR_INT_ERR;
 800cd7e:	2302      	movs	r3, #2
 800cd80:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800cd84:	e015      	b.n	800cdb2 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800cd86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cd88:	0a5a      	lsrs	r2, r3, #9
 800cd8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cd8c:	441a      	add	r2, r3
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800cd92:	693b      	ldr	r3, [r7, #16]
 800cd94:	7858      	ldrb	r0, [r3, #1]
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	6a1a      	ldr	r2, [r3, #32]
 800cda0:	2301      	movs	r3, #1
 800cda2:	f7fe f919 	bl	800afd8 <disk_read>
 800cda6:	4603      	mov	r3, r0
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d002      	beq.n	800cdb2 <f_open+0x35a>
 800cdac:	2301      	movs	r3, #1
 800cdae:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800cdb2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d002      	beq.n	800cdc0 <f_open+0x368>
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	2200      	movs	r2, #0
 800cdbe:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800cdc0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	3760      	adds	r7, #96	@ 0x60
 800cdc8:	46bd      	mov	sp, r7
 800cdca:	bd80      	pop	{r7, pc}

0800cdcc <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	b08e      	sub	sp, #56	@ 0x38
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	60f8      	str	r0, [r7, #12]
 800cdd4:	60b9      	str	r1, [r7, #8]
 800cdd6:	607a      	str	r2, [r7, #4]
 800cdd8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800cdda:	68bb      	ldr	r3, [r7, #8]
 800cddc:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800cdde:	683b      	ldr	r3, [r7, #0]
 800cde0:	2200      	movs	r2, #0
 800cde2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	f107 0214 	add.w	r2, r7, #20
 800cdea:	4611      	mov	r1, r2
 800cdec:	4618      	mov	r0, r3
 800cdee:	f7ff fdb7 	bl	800c960 <validate>
 800cdf2:	4603      	mov	r3, r0
 800cdf4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800cdf8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d107      	bne.n	800ce10 <f_read+0x44>
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	7d5b      	ldrb	r3, [r3, #21]
 800ce04:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800ce08:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d002      	beq.n	800ce16 <f_read+0x4a>
 800ce10:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ce14:	e115      	b.n	800d042 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	7d1b      	ldrb	r3, [r3, #20]
 800ce1a:	f003 0301 	and.w	r3, r3, #1
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d101      	bne.n	800ce26 <f_read+0x5a>
 800ce22:	2307      	movs	r3, #7
 800ce24:	e10d      	b.n	800d042 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	68da      	ldr	r2, [r3, #12]
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	699b      	ldr	r3, [r3, #24]
 800ce2e:	1ad3      	subs	r3, r2, r3
 800ce30:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800ce32:	687a      	ldr	r2, [r7, #4]
 800ce34:	6a3b      	ldr	r3, [r7, #32]
 800ce36:	429a      	cmp	r2, r3
 800ce38:	f240 80fe 	bls.w	800d038 <f_read+0x26c>
 800ce3c:	6a3b      	ldr	r3, [r7, #32]
 800ce3e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800ce40:	e0fa      	b.n	800d038 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	699b      	ldr	r3, [r3, #24]
 800ce46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	f040 80c6 	bne.w	800cfdc <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	699b      	ldr	r3, [r3, #24]
 800ce54:	0a5b      	lsrs	r3, r3, #9
 800ce56:	697a      	ldr	r2, [r7, #20]
 800ce58:	8952      	ldrh	r2, [r2, #10]
 800ce5a:	3a01      	subs	r2, #1
 800ce5c:	4013      	ands	r3, r2
 800ce5e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800ce60:	69fb      	ldr	r3, [r7, #28]
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d12f      	bne.n	800cec6 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	699b      	ldr	r3, [r3, #24]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d103      	bne.n	800ce76 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	689b      	ldr	r3, [r3, #8]
 800ce72:	633b      	str	r3, [r7, #48]	@ 0x30
 800ce74:	e013      	b.n	800ce9e <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d007      	beq.n	800ce8e <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	699b      	ldr	r3, [r3, #24]
 800ce82:	4619      	mov	r1, r3
 800ce84:	68f8      	ldr	r0, [r7, #12]
 800ce86:	f7fe fefe 	bl	800bc86 <clmt_clust>
 800ce8a:	6338      	str	r0, [r7, #48]	@ 0x30
 800ce8c:	e007      	b.n	800ce9e <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800ce8e:	68fa      	ldr	r2, [r7, #12]
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	69db      	ldr	r3, [r3, #28]
 800ce94:	4619      	mov	r1, r3
 800ce96:	4610      	mov	r0, r2
 800ce98:	f7fe fc67 	bl	800b76a <get_fat>
 800ce9c:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800ce9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cea0:	2b01      	cmp	r3, #1
 800cea2:	d804      	bhi.n	800ceae <f_read+0xe2>
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	2202      	movs	r2, #2
 800cea8:	755a      	strb	r2, [r3, #21]
 800ceaa:	2302      	movs	r3, #2
 800ceac:	e0c9      	b.n	800d042 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ceae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ceb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ceb4:	d104      	bne.n	800cec0 <f_read+0xf4>
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	2201      	movs	r2, #1
 800ceba:	755a      	strb	r2, [r3, #21]
 800cebc:	2301      	movs	r3, #1
 800cebe:	e0c0      	b.n	800d042 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cec4:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800cec6:	697a      	ldr	r2, [r7, #20]
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	69db      	ldr	r3, [r3, #28]
 800cecc:	4619      	mov	r1, r3
 800cece:	4610      	mov	r0, r2
 800ced0:	f7fe fc2c 	bl	800b72c <clust2sect>
 800ced4:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ced6:	69bb      	ldr	r3, [r7, #24]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d104      	bne.n	800cee6 <f_read+0x11a>
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	2202      	movs	r2, #2
 800cee0:	755a      	strb	r2, [r3, #21]
 800cee2:	2302      	movs	r3, #2
 800cee4:	e0ad      	b.n	800d042 <f_read+0x276>
			sect += csect;
 800cee6:	69ba      	ldr	r2, [r7, #24]
 800cee8:	69fb      	ldr	r3, [r7, #28]
 800ceea:	4413      	add	r3, r2
 800ceec:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	0a5b      	lsrs	r3, r3, #9
 800cef2:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800cef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d039      	beq.n	800cf6e <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800cefa:	69fa      	ldr	r2, [r7, #28]
 800cefc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cefe:	4413      	add	r3, r2
 800cf00:	697a      	ldr	r2, [r7, #20]
 800cf02:	8952      	ldrh	r2, [r2, #10]
 800cf04:	4293      	cmp	r3, r2
 800cf06:	d905      	bls.n	800cf14 <f_read+0x148>
					cc = fs->csize - csect;
 800cf08:	697b      	ldr	r3, [r7, #20]
 800cf0a:	895b      	ldrh	r3, [r3, #10]
 800cf0c:	461a      	mov	r2, r3
 800cf0e:	69fb      	ldr	r3, [r7, #28]
 800cf10:	1ad3      	subs	r3, r2, r3
 800cf12:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cf14:	697b      	ldr	r3, [r7, #20]
 800cf16:	7858      	ldrb	r0, [r3, #1]
 800cf18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf1a:	69ba      	ldr	r2, [r7, #24]
 800cf1c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800cf1e:	f7fe f85b 	bl	800afd8 <disk_read>
 800cf22:	4603      	mov	r3, r0
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d004      	beq.n	800cf32 <f_read+0x166>
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	2201      	movs	r2, #1
 800cf2c:	755a      	strb	r2, [r3, #21]
 800cf2e:	2301      	movs	r3, #1
 800cf30:	e087      	b.n	800d042 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	7d1b      	ldrb	r3, [r3, #20]
 800cf36:	b25b      	sxtb	r3, r3
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	da14      	bge.n	800cf66 <f_read+0x19a>
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	6a1a      	ldr	r2, [r3, #32]
 800cf40:	69bb      	ldr	r3, [r7, #24]
 800cf42:	1ad3      	subs	r3, r2, r3
 800cf44:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cf46:	429a      	cmp	r2, r3
 800cf48:	d90d      	bls.n	800cf66 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	6a1a      	ldr	r2, [r3, #32]
 800cf4e:	69bb      	ldr	r3, [r7, #24]
 800cf50:	1ad3      	subs	r3, r2, r3
 800cf52:	025b      	lsls	r3, r3, #9
 800cf54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cf56:	18d0      	adds	r0, r2, r3
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	3330      	adds	r3, #48	@ 0x30
 800cf5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cf60:	4619      	mov	r1, r3
 800cf62:	f7fe f919 	bl	800b198 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800cf66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf68:	025b      	lsls	r3, r3, #9
 800cf6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800cf6c:	e050      	b.n	800d010 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	6a1b      	ldr	r3, [r3, #32]
 800cf72:	69ba      	ldr	r2, [r7, #24]
 800cf74:	429a      	cmp	r2, r3
 800cf76:	d02e      	beq.n	800cfd6 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	7d1b      	ldrb	r3, [r3, #20]
 800cf7c:	b25b      	sxtb	r3, r3
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	da18      	bge.n	800cfb4 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cf82:	697b      	ldr	r3, [r7, #20]
 800cf84:	7858      	ldrb	r0, [r3, #1]
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	6a1a      	ldr	r2, [r3, #32]
 800cf90:	2301      	movs	r3, #1
 800cf92:	f7fe f841 	bl	800b018 <disk_write>
 800cf96:	4603      	mov	r3, r0
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d004      	beq.n	800cfa6 <f_read+0x1da>
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	2201      	movs	r2, #1
 800cfa0:	755a      	strb	r2, [r3, #21]
 800cfa2:	2301      	movs	r3, #1
 800cfa4:	e04d      	b.n	800d042 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	7d1b      	ldrb	r3, [r3, #20]
 800cfaa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cfae:	b2da      	uxtb	r2, r3
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800cfb4:	697b      	ldr	r3, [r7, #20]
 800cfb6:	7858      	ldrb	r0, [r3, #1]
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cfbe:	2301      	movs	r3, #1
 800cfc0:	69ba      	ldr	r2, [r7, #24]
 800cfc2:	f7fe f809 	bl	800afd8 <disk_read>
 800cfc6:	4603      	mov	r3, r0
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d004      	beq.n	800cfd6 <f_read+0x20a>
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	2201      	movs	r2, #1
 800cfd0:	755a      	strb	r2, [r3, #21]
 800cfd2:	2301      	movs	r3, #1
 800cfd4:	e035      	b.n	800d042 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	69ba      	ldr	r2, [r7, #24]
 800cfda:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	699b      	ldr	r3, [r3, #24]
 800cfe0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cfe4:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800cfe8:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800cfea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	429a      	cmp	r2, r3
 800cff0:	d901      	bls.n	800cff6 <f_read+0x22a>
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	699b      	ldr	r3, [r3, #24]
 800d000:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d004:	4413      	add	r3, r2
 800d006:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d008:	4619      	mov	r1, r3
 800d00a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d00c:	f7fe f8c4 	bl	800b198 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800d010:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d012:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d014:	4413      	add	r3, r2
 800d016:	627b      	str	r3, [r7, #36]	@ 0x24
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	699a      	ldr	r2, [r3, #24]
 800d01c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d01e:	441a      	add	r2, r3
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	619a      	str	r2, [r3, #24]
 800d024:	683b      	ldr	r3, [r7, #0]
 800d026:	681a      	ldr	r2, [r3, #0]
 800d028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d02a:	441a      	add	r2, r3
 800d02c:	683b      	ldr	r3, [r7, #0]
 800d02e:	601a      	str	r2, [r3, #0]
 800d030:	687a      	ldr	r2, [r7, #4]
 800d032:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d034:	1ad3      	subs	r3, r2, r3
 800d036:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	f47f af01 	bne.w	800ce42 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800d040:	2300      	movs	r3, #0
}
 800d042:	4618      	mov	r0, r3
 800d044:	3738      	adds	r7, #56	@ 0x38
 800d046:	46bd      	mov	sp, r7
 800d048:	bd80      	pop	{r7, pc}

0800d04a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800d04a:	b580      	push	{r7, lr}
 800d04c:	b08c      	sub	sp, #48	@ 0x30
 800d04e:	af00      	add	r7, sp, #0
 800d050:	60f8      	str	r0, [r7, #12]
 800d052:	60b9      	str	r1, [r7, #8]
 800d054:	607a      	str	r2, [r7, #4]
 800d056:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800d058:	68bb      	ldr	r3, [r7, #8]
 800d05a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800d05c:	683b      	ldr	r3, [r7, #0]
 800d05e:	2200      	movs	r2, #0
 800d060:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	f107 0210 	add.w	r2, r7, #16
 800d068:	4611      	mov	r1, r2
 800d06a:	4618      	mov	r0, r3
 800d06c:	f7ff fc78 	bl	800c960 <validate>
 800d070:	4603      	mov	r3, r0
 800d072:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d076:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d107      	bne.n	800d08e <f_write+0x44>
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	7d5b      	ldrb	r3, [r3, #21]
 800d082:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800d086:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d002      	beq.n	800d094 <f_write+0x4a>
 800d08e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d092:	e14b      	b.n	800d32c <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	7d1b      	ldrb	r3, [r3, #20]
 800d098:	f003 0302 	and.w	r3, r3, #2
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d101      	bne.n	800d0a4 <f_write+0x5a>
 800d0a0:	2307      	movs	r3, #7
 800d0a2:	e143      	b.n	800d32c <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	699a      	ldr	r2, [r3, #24]
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	441a      	add	r2, r3
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	699b      	ldr	r3, [r3, #24]
 800d0b0:	429a      	cmp	r2, r3
 800d0b2:	f080 812d 	bcs.w	800d310 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	699b      	ldr	r3, [r3, #24]
 800d0ba:	43db      	mvns	r3, r3
 800d0bc:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800d0be:	e127      	b.n	800d310 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	699b      	ldr	r3, [r3, #24]
 800d0c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	f040 80e3 	bne.w	800d294 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	699b      	ldr	r3, [r3, #24]
 800d0d2:	0a5b      	lsrs	r3, r3, #9
 800d0d4:	693a      	ldr	r2, [r7, #16]
 800d0d6:	8952      	ldrh	r2, [r2, #10]
 800d0d8:	3a01      	subs	r2, #1
 800d0da:	4013      	ands	r3, r2
 800d0dc:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800d0de:	69bb      	ldr	r3, [r7, #24]
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d143      	bne.n	800d16c <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	699b      	ldr	r3, [r3, #24]
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d10c      	bne.n	800d106 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	689b      	ldr	r3, [r3, #8]
 800d0f0:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800d0f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d11a      	bne.n	800d12e <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	2100      	movs	r1, #0
 800d0fc:	4618      	mov	r0, r3
 800d0fe:	f7fe fd2a 	bl	800bb56 <create_chain>
 800d102:	62b8      	str	r0, [r7, #40]	@ 0x28
 800d104:	e013      	b.n	800d12e <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d007      	beq.n	800d11e <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	699b      	ldr	r3, [r3, #24]
 800d112:	4619      	mov	r1, r3
 800d114:	68f8      	ldr	r0, [r7, #12]
 800d116:	f7fe fdb6 	bl	800bc86 <clmt_clust>
 800d11a:	62b8      	str	r0, [r7, #40]	@ 0x28
 800d11c:	e007      	b.n	800d12e <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800d11e:	68fa      	ldr	r2, [r7, #12]
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	69db      	ldr	r3, [r3, #28]
 800d124:	4619      	mov	r1, r3
 800d126:	4610      	mov	r0, r2
 800d128:	f7fe fd15 	bl	800bb56 <create_chain>
 800d12c:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d12e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d130:	2b00      	cmp	r3, #0
 800d132:	f000 80f2 	beq.w	800d31a <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d136:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d138:	2b01      	cmp	r3, #1
 800d13a:	d104      	bne.n	800d146 <f_write+0xfc>
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	2202      	movs	r2, #2
 800d140:	755a      	strb	r2, [r3, #21]
 800d142:	2302      	movs	r3, #2
 800d144:	e0f2      	b.n	800d32c <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d14c:	d104      	bne.n	800d158 <f_write+0x10e>
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	2201      	movs	r2, #1
 800d152:	755a      	strb	r2, [r3, #21]
 800d154:	2301      	movs	r3, #1
 800d156:	e0e9      	b.n	800d32c <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d15c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	689b      	ldr	r3, [r3, #8]
 800d162:	2b00      	cmp	r3, #0
 800d164:	d102      	bne.n	800d16c <f_write+0x122>
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d16a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	7d1b      	ldrb	r3, [r3, #20]
 800d170:	b25b      	sxtb	r3, r3
 800d172:	2b00      	cmp	r3, #0
 800d174:	da18      	bge.n	800d1a8 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d176:	693b      	ldr	r3, [r7, #16]
 800d178:	7858      	ldrb	r0, [r3, #1]
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	6a1a      	ldr	r2, [r3, #32]
 800d184:	2301      	movs	r3, #1
 800d186:	f7fd ff47 	bl	800b018 <disk_write>
 800d18a:	4603      	mov	r3, r0
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d004      	beq.n	800d19a <f_write+0x150>
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	2201      	movs	r2, #1
 800d194:	755a      	strb	r2, [r3, #21]
 800d196:	2301      	movs	r3, #1
 800d198:	e0c8      	b.n	800d32c <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	7d1b      	ldrb	r3, [r3, #20]
 800d19e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d1a2:	b2da      	uxtb	r2, r3
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d1a8:	693a      	ldr	r2, [r7, #16]
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	69db      	ldr	r3, [r3, #28]
 800d1ae:	4619      	mov	r1, r3
 800d1b0:	4610      	mov	r0, r2
 800d1b2:	f7fe fabb 	bl	800b72c <clust2sect>
 800d1b6:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d1b8:	697b      	ldr	r3, [r7, #20]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d104      	bne.n	800d1c8 <f_write+0x17e>
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	2202      	movs	r2, #2
 800d1c2:	755a      	strb	r2, [r3, #21]
 800d1c4:	2302      	movs	r3, #2
 800d1c6:	e0b1      	b.n	800d32c <f_write+0x2e2>
			sect += csect;
 800d1c8:	697a      	ldr	r2, [r7, #20]
 800d1ca:	69bb      	ldr	r3, [r7, #24]
 800d1cc:	4413      	add	r3, r2
 800d1ce:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	0a5b      	lsrs	r3, r3, #9
 800d1d4:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800d1d6:	6a3b      	ldr	r3, [r7, #32]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d03c      	beq.n	800d256 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d1dc:	69ba      	ldr	r2, [r7, #24]
 800d1de:	6a3b      	ldr	r3, [r7, #32]
 800d1e0:	4413      	add	r3, r2
 800d1e2:	693a      	ldr	r2, [r7, #16]
 800d1e4:	8952      	ldrh	r2, [r2, #10]
 800d1e6:	4293      	cmp	r3, r2
 800d1e8:	d905      	bls.n	800d1f6 <f_write+0x1ac>
					cc = fs->csize - csect;
 800d1ea:	693b      	ldr	r3, [r7, #16]
 800d1ec:	895b      	ldrh	r3, [r3, #10]
 800d1ee:	461a      	mov	r2, r3
 800d1f0:	69bb      	ldr	r3, [r7, #24]
 800d1f2:	1ad3      	subs	r3, r2, r3
 800d1f4:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d1f6:	693b      	ldr	r3, [r7, #16]
 800d1f8:	7858      	ldrb	r0, [r3, #1]
 800d1fa:	6a3b      	ldr	r3, [r7, #32]
 800d1fc:	697a      	ldr	r2, [r7, #20]
 800d1fe:	69f9      	ldr	r1, [r7, #28]
 800d200:	f7fd ff0a 	bl	800b018 <disk_write>
 800d204:	4603      	mov	r3, r0
 800d206:	2b00      	cmp	r3, #0
 800d208:	d004      	beq.n	800d214 <f_write+0x1ca>
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	2201      	movs	r2, #1
 800d20e:	755a      	strb	r2, [r3, #21]
 800d210:	2301      	movs	r3, #1
 800d212:	e08b      	b.n	800d32c <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	6a1a      	ldr	r2, [r3, #32]
 800d218:	697b      	ldr	r3, [r7, #20]
 800d21a:	1ad3      	subs	r3, r2, r3
 800d21c:	6a3a      	ldr	r2, [r7, #32]
 800d21e:	429a      	cmp	r2, r3
 800d220:	d915      	bls.n	800d24e <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	6a1a      	ldr	r2, [r3, #32]
 800d22c:	697b      	ldr	r3, [r7, #20]
 800d22e:	1ad3      	subs	r3, r2, r3
 800d230:	025b      	lsls	r3, r3, #9
 800d232:	69fa      	ldr	r2, [r7, #28]
 800d234:	4413      	add	r3, r2
 800d236:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d23a:	4619      	mov	r1, r3
 800d23c:	f7fd ffac 	bl	800b198 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	7d1b      	ldrb	r3, [r3, #20]
 800d244:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d248:	b2da      	uxtb	r2, r3
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800d24e:	6a3b      	ldr	r3, [r7, #32]
 800d250:	025b      	lsls	r3, r3, #9
 800d252:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800d254:	e03f      	b.n	800d2d6 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	6a1b      	ldr	r3, [r3, #32]
 800d25a:	697a      	ldr	r2, [r7, #20]
 800d25c:	429a      	cmp	r2, r3
 800d25e:	d016      	beq.n	800d28e <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	699a      	ldr	r2, [r3, #24]
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d268:	429a      	cmp	r2, r3
 800d26a:	d210      	bcs.n	800d28e <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800d26c:	693b      	ldr	r3, [r7, #16]
 800d26e:	7858      	ldrb	r0, [r3, #1]
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d276:	2301      	movs	r3, #1
 800d278:	697a      	ldr	r2, [r7, #20]
 800d27a:	f7fd fead 	bl	800afd8 <disk_read>
 800d27e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800d280:	2b00      	cmp	r3, #0
 800d282:	d004      	beq.n	800d28e <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	2201      	movs	r2, #1
 800d288:	755a      	strb	r2, [r3, #21]
 800d28a:	2301      	movs	r3, #1
 800d28c:	e04e      	b.n	800d32c <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	697a      	ldr	r2, [r7, #20]
 800d292:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	699b      	ldr	r3, [r3, #24]
 800d298:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d29c:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800d2a0:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800d2a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	429a      	cmp	r2, r3
 800d2a8:	d901      	bls.n	800d2ae <f_write+0x264>
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	699b      	ldr	r3, [r3, #24]
 800d2b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d2bc:	4413      	add	r3, r2
 800d2be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d2c0:	69f9      	ldr	r1, [r7, #28]
 800d2c2:	4618      	mov	r0, r3
 800d2c4:	f7fd ff68 	bl	800b198 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	7d1b      	ldrb	r3, [r3, #20]
 800d2cc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d2d0:	b2da      	uxtb	r2, r3
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800d2d6:	69fa      	ldr	r2, [r7, #28]
 800d2d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2da:	4413      	add	r3, r2
 800d2dc:	61fb      	str	r3, [r7, #28]
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	699a      	ldr	r2, [r3, #24]
 800d2e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2e4:	441a      	add	r2, r3
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	619a      	str	r2, [r3, #24]
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	68da      	ldr	r2, [r3, #12]
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	699b      	ldr	r3, [r3, #24]
 800d2f2:	429a      	cmp	r2, r3
 800d2f4:	bf38      	it	cc
 800d2f6:	461a      	movcc	r2, r3
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	60da      	str	r2, [r3, #12]
 800d2fc:	683b      	ldr	r3, [r7, #0]
 800d2fe:	681a      	ldr	r2, [r3, #0]
 800d300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d302:	441a      	add	r2, r3
 800d304:	683b      	ldr	r3, [r7, #0]
 800d306:	601a      	str	r2, [r3, #0]
 800d308:	687a      	ldr	r2, [r7, #4]
 800d30a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d30c:	1ad3      	subs	r3, r2, r3
 800d30e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	2b00      	cmp	r3, #0
 800d314:	f47f aed4 	bne.w	800d0c0 <f_write+0x76>
 800d318:	e000      	b.n	800d31c <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d31a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	7d1b      	ldrb	r3, [r3, #20]
 800d320:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d324:	b2da      	uxtb	r2, r3
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800d32a:	2300      	movs	r3, #0
}
 800d32c:	4618      	mov	r0, r3
 800d32e:	3730      	adds	r7, #48	@ 0x30
 800d330:	46bd      	mov	sp, r7
 800d332:	bd80      	pop	{r7, pc}

0800d334 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d334:	b580      	push	{r7, lr}
 800d336:	b086      	sub	sp, #24
 800d338:	af00      	add	r7, sp, #0
 800d33a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	f107 0208 	add.w	r2, r7, #8
 800d342:	4611      	mov	r1, r2
 800d344:	4618      	mov	r0, r3
 800d346:	f7ff fb0b 	bl	800c960 <validate>
 800d34a:	4603      	mov	r3, r0
 800d34c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d34e:	7dfb      	ldrb	r3, [r7, #23]
 800d350:	2b00      	cmp	r3, #0
 800d352:	d168      	bne.n	800d426 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	7d1b      	ldrb	r3, [r3, #20]
 800d358:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d062      	beq.n	800d426 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	7d1b      	ldrb	r3, [r3, #20]
 800d364:	b25b      	sxtb	r3, r3
 800d366:	2b00      	cmp	r3, #0
 800d368:	da15      	bge.n	800d396 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d36a:	68bb      	ldr	r3, [r7, #8]
 800d36c:	7858      	ldrb	r0, [r3, #1]
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	6a1a      	ldr	r2, [r3, #32]
 800d378:	2301      	movs	r3, #1
 800d37a:	f7fd fe4d 	bl	800b018 <disk_write>
 800d37e:	4603      	mov	r3, r0
 800d380:	2b00      	cmp	r3, #0
 800d382:	d001      	beq.n	800d388 <f_sync+0x54>
 800d384:	2301      	movs	r3, #1
 800d386:	e04f      	b.n	800d428 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	7d1b      	ldrb	r3, [r3, #20]
 800d38c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d390:	b2da      	uxtb	r2, r3
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d396:	f7fd fb9d 	bl	800aad4 <get_fattime>
 800d39a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d39c:	68ba      	ldr	r2, [r7, #8]
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d3a2:	4619      	mov	r1, r3
 800d3a4:	4610      	mov	r0, r2
 800d3a6:	f7fe f925 	bl	800b5f4 <move_window>
 800d3aa:	4603      	mov	r3, r0
 800d3ac:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800d3ae:	7dfb      	ldrb	r3, [r7, #23]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d138      	bne.n	800d426 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d3b8:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	330b      	adds	r3, #11
 800d3be:	781a      	ldrb	r2, [r3, #0]
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	330b      	adds	r3, #11
 800d3c4:	f042 0220 	orr.w	r2, r2, #32
 800d3c8:	b2d2      	uxtb	r2, r2
 800d3ca:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	6818      	ldr	r0, [r3, #0]
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	689b      	ldr	r3, [r3, #8]
 800d3d4:	461a      	mov	r2, r3
 800d3d6:	68f9      	ldr	r1, [r7, #12]
 800d3d8:	f7fe fe2f 	bl	800c03a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	f103 021c 	add.w	r2, r3, #28
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	68db      	ldr	r3, [r3, #12]
 800d3e6:	4619      	mov	r1, r3
 800d3e8:	4610      	mov	r0, r2
 800d3ea:	f7fd fea9 	bl	800b140 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	3316      	adds	r3, #22
 800d3f2:	6939      	ldr	r1, [r7, #16]
 800d3f4:	4618      	mov	r0, r3
 800d3f6:	f7fd fea3 	bl	800b140 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	3312      	adds	r3, #18
 800d3fe:	2100      	movs	r1, #0
 800d400:	4618      	mov	r0, r3
 800d402:	f7fd fe82 	bl	800b10a <st_word>
					fs->wflag = 1;
 800d406:	68bb      	ldr	r3, [r7, #8]
 800d408:	2201      	movs	r2, #1
 800d40a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d40c:	68bb      	ldr	r3, [r7, #8]
 800d40e:	4618      	mov	r0, r3
 800d410:	f7fe f91e 	bl	800b650 <sync_fs>
 800d414:	4603      	mov	r3, r0
 800d416:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	7d1b      	ldrb	r3, [r3, #20]
 800d41c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d420:	b2da      	uxtb	r2, r3
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800d426:	7dfb      	ldrb	r3, [r7, #23]
}
 800d428:	4618      	mov	r0, r3
 800d42a:	3718      	adds	r7, #24
 800d42c:	46bd      	mov	sp, r7
 800d42e:	bd80      	pop	{r7, pc}

0800d430 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800d430:	b580      	push	{r7, lr}
 800d432:	b084      	sub	sp, #16
 800d434:	af00      	add	r7, sp, #0
 800d436:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d438:	6878      	ldr	r0, [r7, #4]
 800d43a:	f7ff ff7b 	bl	800d334 <f_sync>
 800d43e:	4603      	mov	r3, r0
 800d440:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d442:	7bfb      	ldrb	r3, [r7, #15]
 800d444:	2b00      	cmp	r3, #0
 800d446:	d118      	bne.n	800d47a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	f107 0208 	add.w	r2, r7, #8
 800d44e:	4611      	mov	r1, r2
 800d450:	4618      	mov	r0, r3
 800d452:	f7ff fa85 	bl	800c960 <validate>
 800d456:	4603      	mov	r3, r0
 800d458:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d45a:	7bfb      	ldrb	r3, [r7, #15]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d10c      	bne.n	800d47a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	691b      	ldr	r3, [r3, #16]
 800d464:	4618      	mov	r0, r3
 800d466:	f7fe f821 	bl	800b4ac <dec_lock>
 800d46a:	4603      	mov	r3, r0
 800d46c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d46e:	7bfb      	ldrb	r3, [r7, #15]
 800d470:	2b00      	cmp	r3, #0
 800d472:	d102      	bne.n	800d47a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	2200      	movs	r2, #0
 800d478:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800d47a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d47c:	4618      	mov	r0, r3
 800d47e:	3710      	adds	r7, #16
 800d480:	46bd      	mov	sp, r7
 800d482:	bd80      	pop	{r7, pc}

0800d484 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800d484:	b580      	push	{r7, lr}
 800d486:	b090      	sub	sp, #64	@ 0x40
 800d488:	af00      	add	r7, sp, #0
 800d48a:	6078      	str	r0, [r7, #4]
 800d48c:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	f107 0208 	add.w	r2, r7, #8
 800d494:	4611      	mov	r1, r2
 800d496:	4618      	mov	r0, r3
 800d498:	f7ff fa62 	bl	800c960 <validate>
 800d49c:	4603      	mov	r3, r0
 800d49e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800d4a2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d103      	bne.n	800d4b2 <f_lseek+0x2e>
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	7d5b      	ldrb	r3, [r3, #21]
 800d4ae:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800d4b2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d002      	beq.n	800d4c0 <f_lseek+0x3c>
 800d4ba:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d4be:	e1e6      	b.n	800d88e <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	f000 80d1 	beq.w	800d66c <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800d4ca:	683b      	ldr	r3, [r7, #0]
 800d4cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4d0:	d15a      	bne.n	800d588 <f_lseek+0x104>
			tbl = fp->cltbl;
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d4d6:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800d4d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4da:	1d1a      	adds	r2, r3, #4
 800d4dc:	627a      	str	r2, [r7, #36]	@ 0x24
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	617b      	str	r3, [r7, #20]
 800d4e2:	2302      	movs	r3, #2
 800d4e4:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	689b      	ldr	r3, [r3, #8]
 800d4ea:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800d4ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d03a      	beq.n	800d568 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800d4f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4f4:	613b      	str	r3, [r7, #16]
 800d4f6:	2300      	movs	r3, #0
 800d4f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d4fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4fc:	3302      	adds	r3, #2
 800d4fe:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800d500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d502:	60fb      	str	r3, [r7, #12]
 800d504:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d506:	3301      	adds	r3, #1
 800d508:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d50e:	4618      	mov	r0, r3
 800d510:	f7fe f92b 	bl	800b76a <get_fat>
 800d514:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800d516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d518:	2b01      	cmp	r3, #1
 800d51a:	d804      	bhi.n	800d526 <f_lseek+0xa2>
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	2202      	movs	r2, #2
 800d520:	755a      	strb	r2, [r3, #21]
 800d522:	2302      	movs	r3, #2
 800d524:	e1b3      	b.n	800d88e <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d52c:	d104      	bne.n	800d538 <f_lseek+0xb4>
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	2201      	movs	r2, #1
 800d532:	755a      	strb	r2, [r3, #21]
 800d534:	2301      	movs	r3, #1
 800d536:	e1aa      	b.n	800d88e <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	3301      	adds	r3, #1
 800d53c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d53e:	429a      	cmp	r2, r3
 800d540:	d0de      	beq.n	800d500 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800d542:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d544:	697b      	ldr	r3, [r7, #20]
 800d546:	429a      	cmp	r2, r3
 800d548:	d809      	bhi.n	800d55e <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800d54a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d54c:	1d1a      	adds	r2, r3, #4
 800d54e:	627a      	str	r2, [r7, #36]	@ 0x24
 800d550:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d552:	601a      	str	r2, [r3, #0]
 800d554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d556:	1d1a      	adds	r2, r3, #4
 800d558:	627a      	str	r2, [r7, #36]	@ 0x24
 800d55a:	693a      	ldr	r2, [r7, #16]
 800d55c:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800d55e:	68bb      	ldr	r3, [r7, #8]
 800d560:	695b      	ldr	r3, [r3, #20]
 800d562:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d564:	429a      	cmp	r2, r3
 800d566:	d3c4      	bcc.n	800d4f2 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d56c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d56e:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800d570:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d572:	697b      	ldr	r3, [r7, #20]
 800d574:	429a      	cmp	r2, r3
 800d576:	d803      	bhi.n	800d580 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800d578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d57a:	2200      	movs	r2, #0
 800d57c:	601a      	str	r2, [r3, #0]
 800d57e:	e184      	b.n	800d88a <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800d580:	2311      	movs	r3, #17
 800d582:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800d586:	e180      	b.n	800d88a <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	68db      	ldr	r3, [r3, #12]
 800d58c:	683a      	ldr	r2, [r7, #0]
 800d58e:	429a      	cmp	r2, r3
 800d590:	d902      	bls.n	800d598 <f_lseek+0x114>
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	68db      	ldr	r3, [r3, #12]
 800d596:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	683a      	ldr	r2, [r7, #0]
 800d59c:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800d59e:	683b      	ldr	r3, [r7, #0]
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	f000 8172 	beq.w	800d88a <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800d5a6:	683b      	ldr	r3, [r7, #0]
 800d5a8:	3b01      	subs	r3, #1
 800d5aa:	4619      	mov	r1, r3
 800d5ac:	6878      	ldr	r0, [r7, #4]
 800d5ae:	f7fe fb6a 	bl	800bc86 <clmt_clust>
 800d5b2:	4602      	mov	r2, r0
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800d5b8:	68ba      	ldr	r2, [r7, #8]
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	69db      	ldr	r3, [r3, #28]
 800d5be:	4619      	mov	r1, r3
 800d5c0:	4610      	mov	r0, r2
 800d5c2:	f7fe f8b3 	bl	800b72c <clust2sect>
 800d5c6:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800d5c8:	69bb      	ldr	r3, [r7, #24]
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d104      	bne.n	800d5d8 <f_lseek+0x154>
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	2202      	movs	r2, #2
 800d5d2:	755a      	strb	r2, [r3, #21]
 800d5d4:	2302      	movs	r3, #2
 800d5d6:	e15a      	b.n	800d88e <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800d5d8:	683b      	ldr	r3, [r7, #0]
 800d5da:	3b01      	subs	r3, #1
 800d5dc:	0a5b      	lsrs	r3, r3, #9
 800d5de:	68ba      	ldr	r2, [r7, #8]
 800d5e0:	8952      	ldrh	r2, [r2, #10]
 800d5e2:	3a01      	subs	r2, #1
 800d5e4:	4013      	ands	r3, r2
 800d5e6:	69ba      	ldr	r2, [r7, #24]
 800d5e8:	4413      	add	r3, r2
 800d5ea:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	699b      	ldr	r3, [r3, #24]
 800d5f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	f000 8148 	beq.w	800d88a <f_lseek+0x406>
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	6a1b      	ldr	r3, [r3, #32]
 800d5fe:	69ba      	ldr	r2, [r7, #24]
 800d600:	429a      	cmp	r2, r3
 800d602:	f000 8142 	beq.w	800d88a <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	7d1b      	ldrb	r3, [r3, #20]
 800d60a:	b25b      	sxtb	r3, r3
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	da18      	bge.n	800d642 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d610:	68bb      	ldr	r3, [r7, #8]
 800d612:	7858      	ldrb	r0, [r3, #1]
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	6a1a      	ldr	r2, [r3, #32]
 800d61e:	2301      	movs	r3, #1
 800d620:	f7fd fcfa 	bl	800b018 <disk_write>
 800d624:	4603      	mov	r3, r0
 800d626:	2b00      	cmp	r3, #0
 800d628:	d004      	beq.n	800d634 <f_lseek+0x1b0>
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	2201      	movs	r2, #1
 800d62e:	755a      	strb	r2, [r3, #21]
 800d630:	2301      	movs	r3, #1
 800d632:	e12c      	b.n	800d88e <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	7d1b      	ldrb	r3, [r3, #20]
 800d638:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d63c:	b2da      	uxtb	r2, r3
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800d642:	68bb      	ldr	r3, [r7, #8]
 800d644:	7858      	ldrb	r0, [r3, #1]
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d64c:	2301      	movs	r3, #1
 800d64e:	69ba      	ldr	r2, [r7, #24]
 800d650:	f7fd fcc2 	bl	800afd8 <disk_read>
 800d654:	4603      	mov	r3, r0
 800d656:	2b00      	cmp	r3, #0
 800d658:	d004      	beq.n	800d664 <f_lseek+0x1e0>
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	2201      	movs	r2, #1
 800d65e:	755a      	strb	r2, [r3, #21]
 800d660:	2301      	movs	r3, #1
 800d662:	e114      	b.n	800d88e <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	69ba      	ldr	r2, [r7, #24]
 800d668:	621a      	str	r2, [r3, #32]
 800d66a:	e10e      	b.n	800d88a <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	68db      	ldr	r3, [r3, #12]
 800d670:	683a      	ldr	r2, [r7, #0]
 800d672:	429a      	cmp	r2, r3
 800d674:	d908      	bls.n	800d688 <f_lseek+0x204>
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	7d1b      	ldrb	r3, [r3, #20]
 800d67a:	f003 0302 	and.w	r3, r3, #2
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d102      	bne.n	800d688 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	68db      	ldr	r3, [r3, #12]
 800d686:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	699b      	ldr	r3, [r3, #24]
 800d68c:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800d68e:	2300      	movs	r3, #0
 800d690:	637b      	str	r3, [r7, #52]	@ 0x34
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d696:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800d698:	683b      	ldr	r3, [r7, #0]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	f000 80a7 	beq.w	800d7ee <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800d6a0:	68bb      	ldr	r3, [r7, #8]
 800d6a2:	895b      	ldrh	r3, [r3, #10]
 800d6a4:	025b      	lsls	r3, r3, #9
 800d6a6:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800d6a8:	6a3b      	ldr	r3, [r7, #32]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d01b      	beq.n	800d6e6 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800d6ae:	683b      	ldr	r3, [r7, #0]
 800d6b0:	1e5a      	subs	r2, r3, #1
 800d6b2:	69fb      	ldr	r3, [r7, #28]
 800d6b4:	fbb2 f2f3 	udiv	r2, r2, r3
 800d6b8:	6a3b      	ldr	r3, [r7, #32]
 800d6ba:	1e59      	subs	r1, r3, #1
 800d6bc:	69fb      	ldr	r3, [r7, #28]
 800d6be:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800d6c2:	429a      	cmp	r2, r3
 800d6c4:	d30f      	bcc.n	800d6e6 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800d6c6:	6a3b      	ldr	r3, [r7, #32]
 800d6c8:	1e5a      	subs	r2, r3, #1
 800d6ca:	69fb      	ldr	r3, [r7, #28]
 800d6cc:	425b      	negs	r3, r3
 800d6ce:	401a      	ands	r2, r3
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	699b      	ldr	r3, [r3, #24]
 800d6d8:	683a      	ldr	r2, [r7, #0]
 800d6da:	1ad3      	subs	r3, r2, r3
 800d6dc:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	69db      	ldr	r3, [r3, #28]
 800d6e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d6e4:	e022      	b.n	800d72c <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	689b      	ldr	r3, [r3, #8]
 800d6ea:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800d6ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d119      	bne.n	800d726 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	2100      	movs	r1, #0
 800d6f6:	4618      	mov	r0, r3
 800d6f8:	f7fe fa2d 	bl	800bb56 <create_chain>
 800d6fc:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d6fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d700:	2b01      	cmp	r3, #1
 800d702:	d104      	bne.n	800d70e <f_lseek+0x28a>
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	2202      	movs	r2, #2
 800d708:	755a      	strb	r2, [r3, #21]
 800d70a:	2302      	movs	r3, #2
 800d70c:	e0bf      	b.n	800d88e <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d70e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d710:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d714:	d104      	bne.n	800d720 <f_lseek+0x29c>
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	2201      	movs	r2, #1
 800d71a:	755a      	strb	r2, [r3, #21]
 800d71c:	2301      	movs	r3, #1
 800d71e:	e0b6      	b.n	800d88e <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d724:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d72a:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800d72c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d05d      	beq.n	800d7ee <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800d732:	e03a      	b.n	800d7aa <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800d734:	683a      	ldr	r2, [r7, #0]
 800d736:	69fb      	ldr	r3, [r7, #28]
 800d738:	1ad3      	subs	r3, r2, r3
 800d73a:	603b      	str	r3, [r7, #0]
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	699a      	ldr	r2, [r3, #24]
 800d740:	69fb      	ldr	r3, [r7, #28]
 800d742:	441a      	add	r2, r3
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	7d1b      	ldrb	r3, [r3, #20]
 800d74c:	f003 0302 	and.w	r3, r3, #2
 800d750:	2b00      	cmp	r3, #0
 800d752:	d00b      	beq.n	800d76c <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d758:	4618      	mov	r0, r3
 800d75a:	f7fe f9fc 	bl	800bb56 <create_chain>
 800d75e:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800d760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d762:	2b00      	cmp	r3, #0
 800d764:	d108      	bne.n	800d778 <f_lseek+0x2f4>
							ofs = 0; break;
 800d766:	2300      	movs	r3, #0
 800d768:	603b      	str	r3, [r7, #0]
 800d76a:	e022      	b.n	800d7b2 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d770:	4618      	mov	r0, r3
 800d772:	f7fd fffa 	bl	800b76a <get_fat>
 800d776:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d778:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d77a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d77e:	d104      	bne.n	800d78a <f_lseek+0x306>
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	2201      	movs	r2, #1
 800d784:	755a      	strb	r2, [r3, #21]
 800d786:	2301      	movs	r3, #1
 800d788:	e081      	b.n	800d88e <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800d78a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d78c:	2b01      	cmp	r3, #1
 800d78e:	d904      	bls.n	800d79a <f_lseek+0x316>
 800d790:	68bb      	ldr	r3, [r7, #8]
 800d792:	695b      	ldr	r3, [r3, #20]
 800d794:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d796:	429a      	cmp	r2, r3
 800d798:	d304      	bcc.n	800d7a4 <f_lseek+0x320>
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	2202      	movs	r2, #2
 800d79e:	755a      	strb	r2, [r3, #21]
 800d7a0:	2302      	movs	r3, #2
 800d7a2:	e074      	b.n	800d88e <f_lseek+0x40a>
					fp->clust = clst;
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d7a8:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800d7aa:	683a      	ldr	r2, [r7, #0]
 800d7ac:	69fb      	ldr	r3, [r7, #28]
 800d7ae:	429a      	cmp	r2, r3
 800d7b0:	d8c0      	bhi.n	800d734 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	699a      	ldr	r2, [r3, #24]
 800d7b6:	683b      	ldr	r3, [r7, #0]
 800d7b8:	441a      	add	r2, r3
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800d7be:	683b      	ldr	r3, [r7, #0]
 800d7c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d012      	beq.n	800d7ee <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800d7c8:	68bb      	ldr	r3, [r7, #8]
 800d7ca:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d7cc:	4618      	mov	r0, r3
 800d7ce:	f7fd ffad 	bl	800b72c <clust2sect>
 800d7d2:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800d7d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d104      	bne.n	800d7e4 <f_lseek+0x360>
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	2202      	movs	r2, #2
 800d7de:	755a      	strb	r2, [r3, #21]
 800d7e0:	2302      	movs	r3, #2
 800d7e2:	e054      	b.n	800d88e <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800d7e4:	683b      	ldr	r3, [r7, #0]
 800d7e6:	0a5b      	lsrs	r3, r3, #9
 800d7e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d7ea:	4413      	add	r3, r2
 800d7ec:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	699a      	ldr	r2, [r3, #24]
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	68db      	ldr	r3, [r3, #12]
 800d7f6:	429a      	cmp	r2, r3
 800d7f8:	d90a      	bls.n	800d810 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	699a      	ldr	r2, [r3, #24]
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	7d1b      	ldrb	r3, [r3, #20]
 800d806:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d80a:	b2da      	uxtb	r2, r3
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	699b      	ldr	r3, [r3, #24]
 800d814:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d036      	beq.n	800d88a <f_lseek+0x406>
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	6a1b      	ldr	r3, [r3, #32]
 800d820:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d822:	429a      	cmp	r2, r3
 800d824:	d031      	beq.n	800d88a <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	7d1b      	ldrb	r3, [r3, #20]
 800d82a:	b25b      	sxtb	r3, r3
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	da18      	bge.n	800d862 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d830:	68bb      	ldr	r3, [r7, #8]
 800d832:	7858      	ldrb	r0, [r3, #1]
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	6a1a      	ldr	r2, [r3, #32]
 800d83e:	2301      	movs	r3, #1
 800d840:	f7fd fbea 	bl	800b018 <disk_write>
 800d844:	4603      	mov	r3, r0
 800d846:	2b00      	cmp	r3, #0
 800d848:	d004      	beq.n	800d854 <f_lseek+0x3d0>
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	2201      	movs	r2, #1
 800d84e:	755a      	strb	r2, [r3, #21]
 800d850:	2301      	movs	r3, #1
 800d852:	e01c      	b.n	800d88e <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	7d1b      	ldrb	r3, [r3, #20]
 800d858:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d85c:	b2da      	uxtb	r2, r3
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d862:	68bb      	ldr	r3, [r7, #8]
 800d864:	7858      	ldrb	r0, [r3, #1]
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d86c:	2301      	movs	r3, #1
 800d86e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d870:	f7fd fbb2 	bl	800afd8 <disk_read>
 800d874:	4603      	mov	r3, r0
 800d876:	2b00      	cmp	r3, #0
 800d878:	d004      	beq.n	800d884 <f_lseek+0x400>
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	2201      	movs	r2, #1
 800d87e:	755a      	strb	r2, [r3, #21]
 800d880:	2301      	movs	r3, #1
 800d882:	e004      	b.n	800d88e <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d888:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800d88a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800d88e:	4618      	mov	r0, r3
 800d890:	3740      	adds	r7, #64	@ 0x40
 800d892:	46bd      	mov	sp, r7
 800d894:	bd80      	pop	{r7, pc}
	...

0800d898 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 800d898:	b590      	push	{r4, r7, lr}
 800d89a:	b09d      	sub	sp, #116	@ 0x74
 800d89c:	af00      	add	r7, sp, #0
 800d89e:	60f8      	str	r0, [r7, #12]
 800d8a0:	607a      	str	r2, [r7, #4]
 800d8a2:	603b      	str	r3, [r7, #0]
 800d8a4:	460b      	mov	r3, r1
 800d8a6:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 800d8a8:	2301      	movs	r3, #1
 800d8aa:	647b      	str	r3, [r7, #68]	@ 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 800d8ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d8b0:	643b      	str	r3, [r7, #64]	@ 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800d8b2:	f107 030c 	add.w	r3, r7, #12
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	f7fe fd6b 	bl	800c392 <get_ldnumber>
 800d8bc:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800d8be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	da02      	bge.n	800d8ca <f_mkfs+0x32>
 800d8c4:	230b      	movs	r3, #11
 800d8c6:	f000 bc0d 	b.w	800e0e4 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 800d8ca:	4a94      	ldr	r2, [pc, #592]	@ (800db1c <f_mkfs+0x284>)
 800d8cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d8ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d005      	beq.n	800d8e2 <f_mkfs+0x4a>
 800d8d6:	4a91      	ldr	r2, [pc, #580]	@ (800db1c <f_mkfs+0x284>)
 800d8d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d8da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d8de:	2200      	movs	r2, #0
 800d8e0:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 800d8e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d8e4:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 800d8e8:	2300      	movs	r3, #0
 800d8ea:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 800d8ee:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	f7fd fb4a 	bl	800af8c <disk_initialize>
 800d8f8:	4603      	mov	r3, r0
 800d8fa:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 800d8fe:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800d902:	f003 0301 	and.w	r3, r3, #1
 800d906:	2b00      	cmp	r3, #0
 800d908:	d001      	beq.n	800d90e <f_mkfs+0x76>
 800d90a:	2303      	movs	r3, #3
 800d90c:	e3ea      	b.n	800e0e4 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 800d90e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800d912:	f003 0304 	and.w	r3, r3, #4
 800d916:	2b00      	cmp	r3, #0
 800d918:	d001      	beq.n	800d91e <f_mkfs+0x86>
 800d91a:	230a      	movs	r3, #10
 800d91c:	e3e2      	b.n	800e0e4 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 800d91e:	f107 0214 	add.w	r2, r7, #20
 800d922:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800d926:	2103      	movs	r1, #3
 800d928:	4618      	mov	r0, r3
 800d92a:	f7fd fb95 	bl	800b058 <disk_ioctl>
 800d92e:	4603      	mov	r3, r0
 800d930:	2b00      	cmp	r3, #0
 800d932:	d10c      	bne.n	800d94e <f_mkfs+0xb6>
 800d934:	697b      	ldr	r3, [r7, #20]
 800d936:	2b00      	cmp	r3, #0
 800d938:	d009      	beq.n	800d94e <f_mkfs+0xb6>
 800d93a:	697b      	ldr	r3, [r7, #20]
 800d93c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d940:	d805      	bhi.n	800d94e <f_mkfs+0xb6>
 800d942:	697b      	ldr	r3, [r7, #20]
 800d944:	1e5a      	subs	r2, r3, #1
 800d946:	697b      	ldr	r3, [r7, #20]
 800d948:	4013      	ands	r3, r2
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d001      	beq.n	800d952 <f_mkfs+0xba>
 800d94e:	2301      	movs	r3, #1
 800d950:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 800d952:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d956:	86fb      	strh	r3, [r7, #54]	@ 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d003      	beq.n	800d966 <f_mkfs+0xce>
 800d95e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d960:	687a      	ldr	r2, [r7, #4]
 800d962:	429a      	cmp	r2, r3
 800d964:	d309      	bcc.n	800d97a <f_mkfs+0xe2>
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d96c:	d805      	bhi.n	800d97a <f_mkfs+0xe2>
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	1e5a      	subs	r2, r3, #1
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	4013      	ands	r3, r2
 800d976:	2b00      	cmp	r3, #0
 800d978:	d001      	beq.n	800d97e <f_mkfs+0xe6>
 800d97a:	2313      	movs	r3, #19
 800d97c:	e3b2      	b.n	800e0e4 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 800d97e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d980:	687a      	ldr	r2, [r7, #4]
 800d982:	fbb2 f3f3 	udiv	r3, r2, r3
 800d986:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 800d988:	683b      	ldr	r3, [r7, #0]
 800d98a:	633b      	str	r3, [r7, #48]	@ 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 800d98c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d98e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d992:	fbb2 f3f3 	udiv	r3, r2, r3
 800d996:	62fb      	str	r3, [r7, #44]	@ 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 800d998:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800d99a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d99c:	fb02 f303 	mul.w	r3, r2, r3
 800d9a0:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 800d9a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d101      	bne.n	800d9ac <f_mkfs+0x114>
 800d9a8:	230e      	movs	r3, #14
 800d9aa:	e39b      	b.n	800e0e4 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 800d9ac:	f107 0210 	add.w	r2, r7, #16
 800d9b0:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800d9b4:	2101      	movs	r1, #1
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	f7fd fb4e 	bl	800b058 <disk_ioctl>
 800d9bc:	4603      	mov	r3, r0
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d001      	beq.n	800d9c6 <f_mkfs+0x12e>
 800d9c2:	2301      	movs	r3, #1
 800d9c4:	e38e      	b.n	800e0e4 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 800d9c6:	7afb      	ldrb	r3, [r7, #11]
 800d9c8:	f003 0308 	and.w	r3, r3, #8
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d001      	beq.n	800d9d4 <f_mkfs+0x13c>
 800d9d0:	2300      	movs	r3, #0
 800d9d2:	e000      	b.n	800d9d6 <f_mkfs+0x13e>
 800d9d4:	233f      	movs	r3, #63	@ 0x3f
 800d9d6:	627b      	str	r3, [r7, #36]	@ 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 800d9d8:	693b      	ldr	r3, [r7, #16]
 800d9da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d9dc:	429a      	cmp	r2, r3
 800d9de:	d901      	bls.n	800d9e4 <f_mkfs+0x14c>
 800d9e0:	230e      	movs	r3, #14
 800d9e2:	e37f      	b.n	800e0e4 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 800d9e4:	693a      	ldr	r2, [r7, #16]
 800d9e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9e8:	1ad3      	subs	r3, r2, r3
 800d9ea:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 800d9ec:	693b      	ldr	r3, [r7, #16]
 800d9ee:	2b7f      	cmp	r3, #127	@ 0x7f
 800d9f0:	d801      	bhi.n	800d9f6 <f_mkfs+0x15e>
 800d9f2:	230e      	movs	r3, #14
 800d9f4:	e376      	b.n	800e0e4 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	2b80      	cmp	r3, #128	@ 0x80
 800d9fa:	d901      	bls.n	800da00 <f_mkfs+0x168>
 800d9fc:	2313      	movs	r3, #19
 800d9fe:	e371      	b.n	800e0e4 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 800da00:	7afb      	ldrb	r3, [r7, #11]
 800da02:	f003 0302 	and.w	r3, r3, #2
 800da06:	2b00      	cmp	r3, #0
 800da08:	d00d      	beq.n	800da26 <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 800da0a:	7afb      	ldrb	r3, [r7, #11]
 800da0c:	f003 0307 	and.w	r3, r3, #7
 800da10:	2b02      	cmp	r3, #2
 800da12:	d004      	beq.n	800da1e <f_mkfs+0x186>
 800da14:	7afb      	ldrb	r3, [r7, #11]
 800da16:	f003 0301 	and.w	r3, r3, #1
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d103      	bne.n	800da26 <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 800da1e:	2303      	movs	r3, #3
 800da20:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800da24:	e009      	b.n	800da3a <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 800da26:	7afb      	ldrb	r3, [r7, #11]
 800da28:	f003 0301 	and.w	r3, r3, #1
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d101      	bne.n	800da34 <f_mkfs+0x19c>
 800da30:	2313      	movs	r3, #19
 800da32:	e357      	b.n	800e0e4 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 800da34:	2302      	movs	r3, #2
 800da36:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	653b      	str	r3, [r7, #80]	@ 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 800da3e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800da42:	2b03      	cmp	r3, #3
 800da44:	d13c      	bne.n	800dac0 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 800da46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d11b      	bne.n	800da84 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800da4c:	693b      	ldr	r3, [r7, #16]
 800da4e:	0c5b      	lsrs	r3, r3, #17
 800da50:	65fb      	str	r3, [r7, #92]	@ 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800da52:	2300      	movs	r3, #0
 800da54:	64bb      	str	r3, [r7, #72]	@ 0x48
 800da56:	2301      	movs	r3, #1
 800da58:	653b      	str	r3, [r7, #80]	@ 0x50
 800da5a:	e005      	b.n	800da68 <f_mkfs+0x1d0>
 800da5c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800da5e:	3301      	adds	r3, #1
 800da60:	64bb      	str	r3, [r7, #72]	@ 0x48
 800da62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800da64:	005b      	lsls	r3, r3, #1
 800da66:	653b      	str	r3, [r7, #80]	@ 0x50
 800da68:	4a2d      	ldr	r2, [pc, #180]	@ (800db20 <f_mkfs+0x288>)
 800da6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800da6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800da70:	2b00      	cmp	r3, #0
 800da72:	d007      	beq.n	800da84 <f_mkfs+0x1ec>
 800da74:	4a2a      	ldr	r2, [pc, #168]	@ (800db20 <f_mkfs+0x288>)
 800da76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800da78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800da7c:	461a      	mov	r2, r3
 800da7e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800da80:	4293      	cmp	r3, r2
 800da82:	d2eb      	bcs.n	800da5c <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 800da84:	693a      	ldr	r2, [r7, #16]
 800da86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800da88:	fbb2 f3f3 	udiv	r3, r2, r3
 800da8c:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800da8e:	6a3b      	ldr	r3, [r7, #32]
 800da90:	3302      	adds	r3, #2
 800da92:	009a      	lsls	r2, r3, #2
 800da94:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800da96:	4413      	add	r3, r2
 800da98:	1e5a      	subs	r2, r3, #1
 800da9a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800da9c:	fbb2 f3f3 	udiv	r3, r2, r3
 800daa0:	66bb      	str	r3, [r7, #104]	@ 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 800daa2:	2320      	movs	r3, #32
 800daa4:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_dir = 0;		/* No static directory */
 800daa6:	2300      	movs	r3, #0
 800daa8:	66fb      	str	r3, [r7, #108]	@ 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 800daaa:	6a3b      	ldr	r3, [r7, #32]
 800daac:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800dab0:	4293      	cmp	r3, r2
 800dab2:	d903      	bls.n	800dabc <f_mkfs+0x224>
 800dab4:	6a3b      	ldr	r3, [r7, #32]
 800dab6:	4a1b      	ldr	r2, [pc, #108]	@ (800db24 <f_mkfs+0x28c>)
 800dab8:	4293      	cmp	r3, r2
 800daba:	d952      	bls.n	800db62 <f_mkfs+0x2ca>
 800dabc:	230e      	movs	r3, #14
 800dabe:	e311      	b.n	800e0e4 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 800dac0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d11b      	bne.n	800dafe <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800dac6:	693b      	ldr	r3, [r7, #16]
 800dac8:	0b1b      	lsrs	r3, r3, #12
 800daca:	65fb      	str	r3, [r7, #92]	@ 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800dacc:	2300      	movs	r3, #0
 800dace:	64bb      	str	r3, [r7, #72]	@ 0x48
 800dad0:	2301      	movs	r3, #1
 800dad2:	653b      	str	r3, [r7, #80]	@ 0x50
 800dad4:	e005      	b.n	800dae2 <f_mkfs+0x24a>
 800dad6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dad8:	3301      	adds	r3, #1
 800dada:	64bb      	str	r3, [r7, #72]	@ 0x48
 800dadc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dade:	005b      	lsls	r3, r3, #1
 800dae0:	653b      	str	r3, [r7, #80]	@ 0x50
 800dae2:	4a11      	ldr	r2, [pc, #68]	@ (800db28 <f_mkfs+0x290>)
 800dae4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dae6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800daea:	2b00      	cmp	r3, #0
 800daec:	d007      	beq.n	800dafe <f_mkfs+0x266>
 800daee:	4a0e      	ldr	r2, [pc, #56]	@ (800db28 <f_mkfs+0x290>)
 800daf0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800daf2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800daf6:	461a      	mov	r2, r3
 800daf8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dafa:	4293      	cmp	r3, r2
 800dafc:	d2eb      	bcs.n	800dad6 <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 800dafe:	693a      	ldr	r2, [r7, #16]
 800db00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800db02:	fbb2 f3f3 	udiv	r3, r2, r3
 800db06:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 800db08:	6a3b      	ldr	r3, [r7, #32]
 800db0a:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800db0e:	4293      	cmp	r3, r2
 800db10:	d90c      	bls.n	800db2c <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800db12:	6a3b      	ldr	r3, [r7, #32]
 800db14:	3302      	adds	r3, #2
 800db16:	005b      	lsls	r3, r3, #1
 800db18:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800db1a:	e012      	b.n	800db42 <f_mkfs+0x2aa>
 800db1c:	200055f4 	.word	0x200055f4
 800db20:	0801106c 	.word	0x0801106c
 800db24:	0ffffff5 	.word	0x0ffffff5
 800db28:	0801107c 	.word	0x0801107c
				} else {
					fmt = FS_FAT12;
 800db2c:	2301      	movs	r3, #1
 800db2e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800db32:	6a3a      	ldr	r2, [r7, #32]
 800db34:	4613      	mov	r3, r2
 800db36:	005b      	lsls	r3, r3, #1
 800db38:	4413      	add	r3, r2
 800db3a:	3301      	adds	r3, #1
 800db3c:	085b      	lsrs	r3, r3, #1
 800db3e:	3303      	adds	r3, #3
 800db40:	65fb      	str	r3, [r7, #92]	@ 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800db42:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800db44:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800db46:	4413      	add	r3, r2
 800db48:	1e5a      	subs	r2, r3, #1
 800db4a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800db4c:	fbb2 f3f3 	udiv	r3, r2, r3
 800db50:	66bb      	str	r3, [r7, #104]	@ 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 800db52:	2301      	movs	r3, #1
 800db54:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 800db56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800db58:	015a      	lsls	r2, r3, #5
 800db5a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800db5c:	fbb2 f3f3 	udiv	r3, r2, r3
 800db60:	66fb      	str	r3, [r7, #108]	@ 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800db62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800db64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800db66:	4413      	add	r3, r2
 800db68:	65bb      	str	r3, [r7, #88]	@ 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 800db6a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800db6c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800db6e:	fb03 f202 	mul.w	r2, r3, r2
 800db72:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800db74:	4413      	add	r3, r2
 800db76:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800db78:	4413      	add	r3, r2
 800db7a:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 800db7c:	697a      	ldr	r2, [r7, #20]
 800db7e:	69fb      	ldr	r3, [r7, #28]
 800db80:	4413      	add	r3, r2
 800db82:	1e5a      	subs	r2, r3, #1
 800db84:	697b      	ldr	r3, [r7, #20]
 800db86:	425b      	negs	r3, r3
 800db88:	401a      	ands	r2, r3
 800db8a:	69fb      	ldr	r3, [r7, #28]
 800db8c:	1ad3      	subs	r3, r2, r3
 800db8e:	65fb      	str	r3, [r7, #92]	@ 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 800db90:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800db94:	2b03      	cmp	r3, #3
 800db96:	d108      	bne.n	800dbaa <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 800db98:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800db9a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800db9c:	4413      	add	r3, r2
 800db9e:	657b      	str	r3, [r7, #84]	@ 0x54
 800dba0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800dba2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dba4:	4413      	add	r3, r2
 800dba6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800dba8:	e006      	b.n	800dbb8 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 800dbaa:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800dbac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dbae:	fbb2 f3f3 	udiv	r3, r2, r3
 800dbb2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800dbb4:	4413      	add	r3, r2
 800dbb6:	66bb      	str	r3, [r7, #104]	@ 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 800dbb8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dbba:	011a      	lsls	r2, r3, #4
 800dbbc:	69fb      	ldr	r3, [r7, #28]
 800dbbe:	441a      	add	r2, r3
 800dbc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbc2:	1ad2      	subs	r2, r2, r3
 800dbc4:	693b      	ldr	r3, [r7, #16]
 800dbc6:	429a      	cmp	r2, r3
 800dbc8:	d901      	bls.n	800dbce <f_mkfs+0x336>
 800dbca:	230e      	movs	r3, #14
 800dbcc:	e28a      	b.n	800e0e4 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 800dbce:	693a      	ldr	r2, [r7, #16]
 800dbd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dbd2:	1ad2      	subs	r2, r2, r3
 800dbd4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800dbd6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800dbd8:	fb01 f303 	mul.w	r3, r1, r3
 800dbdc:	1ad2      	subs	r2, r2, r3
 800dbde:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dbe0:	1ad2      	subs	r2, r2, r3
 800dbe2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dbe4:	fbb2 f3f3 	udiv	r3, r2, r3
 800dbe8:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 800dbea:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800dbee:	2b03      	cmp	r3, #3
 800dbf0:	d10f      	bne.n	800dc12 <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 800dbf2:	6a3b      	ldr	r3, [r7, #32]
 800dbf4:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800dbf8:	4293      	cmp	r3, r2
 800dbfa:	d80a      	bhi.n	800dc12 <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d105      	bne.n	800dc0e <f_mkfs+0x376>
 800dc02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dc04:	085b      	lsrs	r3, r3, #1
 800dc06:	607b      	str	r3, [r7, #4]
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d144      	bne.n	800dc98 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 800dc0e:	230e      	movs	r3, #14
 800dc10:	e268      	b.n	800e0e4 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 800dc12:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800dc16:	2b02      	cmp	r3, #2
 800dc18:	d133      	bne.n	800dc82 <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800dc1a:	6a3b      	ldr	r3, [r7, #32]
 800dc1c:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800dc20:	4293      	cmp	r3, r2
 800dc22:	d91e      	bls.n	800dc62 <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d107      	bne.n	800dc3a <f_mkfs+0x3a2>
 800dc2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dc2c:	005b      	lsls	r3, r3, #1
 800dc2e:	2b40      	cmp	r3, #64	@ 0x40
 800dc30:	d803      	bhi.n	800dc3a <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 800dc32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dc34:	005b      	lsls	r3, r3, #1
 800dc36:	607b      	str	r3, [r7, #4]
 800dc38:	e033      	b.n	800dca2 <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 800dc3a:	7afb      	ldrb	r3, [r7, #11]
 800dc3c:	f003 0302 	and.w	r3, r3, #2
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d003      	beq.n	800dc4c <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800dc44:	2303      	movs	r3, #3
 800dc46:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800dc4a:	e02a      	b.n	800dca2 <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d105      	bne.n	800dc5e <f_mkfs+0x3c6>
 800dc52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dc54:	005b      	lsls	r3, r3, #1
 800dc56:	607b      	str	r3, [r7, #4]
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	2b80      	cmp	r3, #128	@ 0x80
 800dc5c:	d91e      	bls.n	800dc9c <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 800dc5e:	230e      	movs	r3, #14
 800dc60:	e240      	b.n	800e0e4 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800dc62:	6a3b      	ldr	r3, [r7, #32]
 800dc64:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800dc68:	4293      	cmp	r3, r2
 800dc6a:	d80a      	bhi.n	800dc82 <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d105      	bne.n	800dc7e <f_mkfs+0x3e6>
 800dc72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dc74:	005b      	lsls	r3, r3, #1
 800dc76:	607b      	str	r3, [r7, #4]
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	2b80      	cmp	r3, #128	@ 0x80
 800dc7c:	d910      	bls.n	800dca0 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 800dc7e:	230e      	movs	r3, #14
 800dc80:	e230      	b.n	800e0e4 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 800dc82:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800dc86:	2b01      	cmp	r3, #1
 800dc88:	d10c      	bne.n	800dca4 <f_mkfs+0x40c>
 800dc8a:	6a3b      	ldr	r3, [r7, #32]
 800dc8c:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800dc90:	4293      	cmp	r3, r2
 800dc92:	d907      	bls.n	800dca4 <f_mkfs+0x40c>
 800dc94:	230e      	movs	r3, #14
 800dc96:	e225      	b.n	800e0e4 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800dc98:	bf00      	nop
 800dc9a:	e6ce      	b.n	800da3a <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800dc9c:	bf00      	nop
 800dc9e:	e6cc      	b.n	800da3a <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800dca0:	bf00      	nop
			pau = au;
 800dca2:	e6ca      	b.n	800da3a <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 800dca4:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 800dca6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800dca8:	461a      	mov	r2, r3
 800dcaa:	2100      	movs	r1, #0
 800dcac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dcae:	f7fd fa94 	bl	800b1da <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 800dcb2:	220b      	movs	r2, #11
 800dcb4:	49b2      	ldr	r1, [pc, #712]	@ (800df80 <f_mkfs+0x6e8>)
 800dcb6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dcb8:	f7fd fa6e 	bl	800b198 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800dcbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcbe:	330b      	adds	r3, #11
 800dcc0:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800dcc2:	4611      	mov	r1, r2
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	f7fd fa20 	bl	800b10a <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800dcca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dccc:	330d      	adds	r3, #13
 800dcce:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800dcd0:	b2d2      	uxtb	r2, r2
 800dcd2:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800dcd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcd6:	330e      	adds	r3, #14
 800dcd8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800dcda:	b292      	uxth	r2, r2
 800dcdc:	4611      	mov	r1, r2
 800dcde:	4618      	mov	r0, r3
 800dce0:	f7fd fa13 	bl	800b10a <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 800dce4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dce6:	3310      	adds	r3, #16
 800dce8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800dcea:	b2d2      	uxtb	r2, r2
 800dcec:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 800dcee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcf0:	f103 0211 	add.w	r2, r3, #17
 800dcf4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800dcf8:	2b03      	cmp	r3, #3
 800dcfa:	d002      	beq.n	800dd02 <f_mkfs+0x46a>
 800dcfc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dcfe:	b29b      	uxth	r3, r3
 800dd00:	e000      	b.n	800dd04 <f_mkfs+0x46c>
 800dd02:	2300      	movs	r3, #0
 800dd04:	4619      	mov	r1, r3
 800dd06:	4610      	mov	r0, r2
 800dd08:	f7fd f9ff 	bl	800b10a <st_word>
		if (sz_vol < 0x10000) {
 800dd0c:	693b      	ldr	r3, [r7, #16]
 800dd0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dd12:	d208      	bcs.n	800dd26 <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800dd14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd16:	3313      	adds	r3, #19
 800dd18:	693a      	ldr	r2, [r7, #16]
 800dd1a:	b292      	uxth	r2, r2
 800dd1c:	4611      	mov	r1, r2
 800dd1e:	4618      	mov	r0, r3
 800dd20:	f7fd f9f3 	bl	800b10a <st_word>
 800dd24:	e006      	b.n	800dd34 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 800dd26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd28:	3320      	adds	r3, #32
 800dd2a:	693a      	ldr	r2, [r7, #16]
 800dd2c:	4611      	mov	r1, r2
 800dd2e:	4618      	mov	r0, r3
 800dd30:	f7fd fa06 	bl	800b140 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800dd34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd36:	3315      	adds	r3, #21
 800dd38:	22f8      	movs	r2, #248	@ 0xf8
 800dd3a:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800dd3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd3e:	3318      	adds	r3, #24
 800dd40:	213f      	movs	r1, #63	@ 0x3f
 800dd42:	4618      	mov	r0, r3
 800dd44:	f7fd f9e1 	bl	800b10a <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800dd48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd4a:	331a      	adds	r3, #26
 800dd4c:	21ff      	movs	r1, #255	@ 0xff
 800dd4e:	4618      	mov	r0, r3
 800dd50:	f7fd f9db 	bl	800b10a <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 800dd54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd56:	331c      	adds	r3, #28
 800dd58:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800dd5a:	4618      	mov	r0, r3
 800dd5c:	f7fd f9f0 	bl	800b140 <st_dword>
		if (fmt == FS_FAT32) {
 800dd60:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800dd64:	2b03      	cmp	r3, #3
 800dd66:	d131      	bne.n	800ddcc <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 800dd68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd6a:	f103 0443 	add.w	r4, r3, #67	@ 0x43
 800dd6e:	f7fc feb1 	bl	800aad4 <get_fattime>
 800dd72:	4603      	mov	r3, r0
 800dd74:	4619      	mov	r1, r3
 800dd76:	4620      	mov	r0, r4
 800dd78:	f7fd f9e2 	bl	800b140 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800dd7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd7e:	3324      	adds	r3, #36	@ 0x24
 800dd80:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800dd82:	4618      	mov	r0, r3
 800dd84:	f7fd f9dc 	bl	800b140 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800dd88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd8a:	332c      	adds	r3, #44	@ 0x2c
 800dd8c:	2102      	movs	r1, #2
 800dd8e:	4618      	mov	r0, r3
 800dd90:	f7fd f9d6 	bl	800b140 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800dd94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd96:	3330      	adds	r3, #48	@ 0x30
 800dd98:	2101      	movs	r1, #1
 800dd9a:	4618      	mov	r0, r3
 800dd9c:	f7fd f9b5 	bl	800b10a <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800dda0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dda2:	3332      	adds	r3, #50	@ 0x32
 800dda4:	2106      	movs	r1, #6
 800dda6:	4618      	mov	r0, r3
 800dda8:	f7fd f9af 	bl	800b10a <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800ddac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddae:	3340      	adds	r3, #64	@ 0x40
 800ddb0:	2280      	movs	r2, #128	@ 0x80
 800ddb2:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800ddb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddb6:	3342      	adds	r3, #66	@ 0x42
 800ddb8:	2229      	movs	r2, #41	@ 0x29
 800ddba:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800ddbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddbe:	3347      	adds	r3, #71	@ 0x47
 800ddc0:	2213      	movs	r2, #19
 800ddc2:	4970      	ldr	r1, [pc, #448]	@ (800df84 <f_mkfs+0x6ec>)
 800ddc4:	4618      	mov	r0, r3
 800ddc6:	f7fd f9e7 	bl	800b198 <mem_cpy>
 800ddca:	e020      	b.n	800de0e <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 800ddcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddce:	f103 0427 	add.w	r4, r3, #39	@ 0x27
 800ddd2:	f7fc fe7f 	bl	800aad4 <get_fattime>
 800ddd6:	4603      	mov	r3, r0
 800ddd8:	4619      	mov	r1, r3
 800ddda:	4620      	mov	r0, r4
 800dddc:	f7fd f9b0 	bl	800b140 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800dde0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dde2:	3316      	adds	r3, #22
 800dde4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800dde6:	b292      	uxth	r2, r2
 800dde8:	4611      	mov	r1, r2
 800ddea:	4618      	mov	r0, r3
 800ddec:	f7fd f98d 	bl	800b10a <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800ddf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddf2:	3324      	adds	r3, #36	@ 0x24
 800ddf4:	2280      	movs	r2, #128	@ 0x80
 800ddf6:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800ddf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddfa:	3326      	adds	r3, #38	@ 0x26
 800ddfc:	2229      	movs	r2, #41	@ 0x29
 800ddfe:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800de00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de02:	332b      	adds	r3, #43	@ 0x2b
 800de04:	2213      	movs	r2, #19
 800de06:	4960      	ldr	r1, [pc, #384]	@ (800df88 <f_mkfs+0x6f0>)
 800de08:	4618      	mov	r0, r3
 800de0a:	f7fd f9c5 	bl	800b198 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800de0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de10:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800de14:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800de18:	4618      	mov	r0, r3
 800de1a:	f7fd f976 	bl	800b10a <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 800de1e:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 800de22:	2301      	movs	r3, #1
 800de24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800de26:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800de28:	f7fd f8f6 	bl	800b018 <disk_write>
 800de2c:	4603      	mov	r3, r0
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d001      	beq.n	800de36 <f_mkfs+0x59e>
 800de32:	2301      	movs	r3, #1
 800de34:	e156      	b.n	800e0e4 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 800de36:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800de3a:	2b03      	cmp	r3, #3
 800de3c:	d140      	bne.n	800dec0 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800de3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de40:	1d9a      	adds	r2, r3, #6
 800de42:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 800de46:	2301      	movs	r3, #1
 800de48:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800de4a:	f7fd f8e5 	bl	800b018 <disk_write>
			mem_set(buf, 0, ss);
 800de4e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800de50:	461a      	mov	r2, r3
 800de52:	2100      	movs	r1, #0
 800de54:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800de56:	f7fd f9c0 	bl	800b1da <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800de5a:	494c      	ldr	r1, [pc, #304]	@ (800df8c <f_mkfs+0x6f4>)
 800de5c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800de5e:	f7fd f96f 	bl	800b140 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 800de62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de64:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800de68:	4949      	ldr	r1, [pc, #292]	@ (800df90 <f_mkfs+0x6f8>)
 800de6a:	4618      	mov	r0, r3
 800de6c:	f7fd f968 	bl	800b140 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800de70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de72:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800de76:	6a3b      	ldr	r3, [r7, #32]
 800de78:	3b01      	subs	r3, #1
 800de7a:	4619      	mov	r1, r3
 800de7c:	4610      	mov	r0, r2
 800de7e:	f7fd f95f 	bl	800b140 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800de82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de84:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800de88:	2102      	movs	r1, #2
 800de8a:	4618      	mov	r0, r3
 800de8c:	f7fd f958 	bl	800b140 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800de90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de92:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800de96:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800de9a:	4618      	mov	r0, r3
 800de9c:	f7fd f935 	bl	800b10a <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800dea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dea2:	1dda      	adds	r2, r3, #7
 800dea4:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 800dea8:	2301      	movs	r3, #1
 800deaa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800deac:	f7fd f8b4 	bl	800b018 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800deb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800deb2:	1c5a      	adds	r2, r3, #1
 800deb4:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 800deb8:	2301      	movs	r3, #1
 800deba:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800debc:	f7fd f8ac 	bl	800b018 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 800dec0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dec2:	2100      	movs	r1, #0
 800dec4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dec6:	f7fd f988 	bl	800b1da <mem_set>
		sect = b_fat;		/* FAT start sector */
 800deca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800decc:	667b      	str	r3, [r7, #100]	@ 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800dece:	2300      	movs	r3, #0
 800ded0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ded2:	e04b      	b.n	800df6c <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 800ded4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800ded8:	2b03      	cmp	r3, #3
 800deda:	d113      	bne.n	800df04 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 800dedc:	f06f 0107 	mvn.w	r1, #7
 800dee0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dee2:	f7fd f92d 	bl	800b140 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 800dee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dee8:	3304      	adds	r3, #4
 800deea:	f04f 31ff 	mov.w	r1, #4294967295
 800deee:	4618      	mov	r0, r3
 800def0:	f7fd f926 	bl	800b140 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 800def4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800def6:	3308      	adds	r3, #8
 800def8:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 800defc:	4618      	mov	r0, r3
 800defe:	f7fd f91f 	bl	800b140 <st_dword>
 800df02:	e00b      	b.n	800df1c <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 800df04:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800df08:	2b01      	cmp	r3, #1
 800df0a:	d101      	bne.n	800df10 <f_mkfs+0x678>
 800df0c:	4b21      	ldr	r3, [pc, #132]	@ (800df94 <f_mkfs+0x6fc>)
 800df0e:	e001      	b.n	800df14 <f_mkfs+0x67c>
 800df10:	f06f 0307 	mvn.w	r3, #7
 800df14:	4619      	mov	r1, r3
 800df16:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800df18:	f7fd f912 	bl	800b140 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800df1c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800df1e:	663b      	str	r3, [r7, #96]	@ 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800df20:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800df22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df24:	4293      	cmp	r3, r2
 800df26:	bf28      	it	cs
 800df28:	4613      	movcs	r3, r2
 800df2a:	65fb      	str	r3, [r7, #92]	@ 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800df2c:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 800df30:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800df32:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800df34:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800df36:	f7fd f86f 	bl	800b018 <disk_write>
 800df3a:	4603      	mov	r3, r0
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d001      	beq.n	800df44 <f_mkfs+0x6ac>
 800df40:	2301      	movs	r3, #1
 800df42:	e0cf      	b.n	800e0e4 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 800df44:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800df46:	461a      	mov	r2, r3
 800df48:	2100      	movs	r1, #0
 800df4a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800df4c:	f7fd f945 	bl	800b1da <mem_set>
				sect += n; nsect -= n;
 800df50:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800df52:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800df54:	4413      	add	r3, r2
 800df56:	667b      	str	r3, [r7, #100]	@ 0x64
 800df58:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800df5a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800df5c:	1ad3      	subs	r3, r2, r3
 800df5e:	663b      	str	r3, [r7, #96]	@ 0x60
			} while (nsect);
 800df60:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800df62:	2b00      	cmp	r3, #0
 800df64:	d1dc      	bne.n	800df20 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800df66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800df68:	3301      	adds	r3, #1
 800df6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800df6c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800df6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800df70:	429a      	cmp	r2, r3
 800df72:	d3af      	bcc.n	800ded4 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800df74:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800df78:	2b03      	cmp	r3, #3
 800df7a:	d10d      	bne.n	800df98 <f_mkfs+0x700>
 800df7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800df7e:	e00c      	b.n	800df9a <f_mkfs+0x702>
 800df80:	08010f84 	.word	0x08010f84
 800df84:	08010f90 	.word	0x08010f90
 800df88:	08010fa4 	.word	0x08010fa4
 800df8c:	41615252 	.word	0x41615252
 800df90:	61417272 	.word	0x61417272
 800df94:	00fffff8 	.word	0x00fffff8
 800df98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800df9a:	663b      	str	r3, [r7, #96]	@ 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800df9c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800df9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfa0:	4293      	cmp	r3, r2
 800dfa2:	bf28      	it	cs
 800dfa4:	4613      	movcs	r3, r2
 800dfa6:	65fb      	str	r3, [r7, #92]	@ 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800dfa8:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 800dfac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dfae:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800dfb0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800dfb2:	f7fd f831 	bl	800b018 <disk_write>
 800dfb6:	4603      	mov	r3, r0
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d001      	beq.n	800dfc0 <f_mkfs+0x728>
 800dfbc:	2301      	movs	r3, #1
 800dfbe:	e091      	b.n	800e0e4 <f_mkfs+0x84c>
			sect += n; nsect -= n;
 800dfc0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800dfc2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dfc4:	4413      	add	r3, r2
 800dfc6:	667b      	str	r3, [r7, #100]	@ 0x64
 800dfc8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800dfca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dfcc:	1ad3      	subs	r3, r2, r3
 800dfce:	663b      	str	r3, [r7, #96]	@ 0x60
		} while (nsect);
 800dfd0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d1e2      	bne.n	800df9c <f_mkfs+0x704>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 800dfd6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800dfda:	2b03      	cmp	r3, #3
 800dfdc:	d103      	bne.n	800dfe6 <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 800dfde:	230c      	movs	r3, #12
 800dfe0:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 800dfe4:	e010      	b.n	800e008 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 800dfe6:	693b      	ldr	r3, [r7, #16]
 800dfe8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dfec:	d303      	bcc.n	800dff6 <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 800dfee:	2306      	movs	r3, #6
 800dff0:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 800dff4:	e008      	b.n	800e008 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 800dff6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800dffa:	2b02      	cmp	r3, #2
 800dffc:	d101      	bne.n	800e002 <f_mkfs+0x76a>
 800dffe:	2304      	movs	r3, #4
 800e000:	e000      	b.n	800e004 <f_mkfs+0x76c>
 800e002:	2301      	movs	r3, #1
 800e004:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 800e008:	7afb      	ldrb	r3, [r7, #11]
 800e00a:	f003 0308 	and.w	r3, r3, #8
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d15b      	bne.n	800e0ca <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 800e012:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e014:	461a      	mov	r2, r3
 800e016:	2100      	movs	r1, #0
 800e018:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e01a:	f7fd f8de 	bl	800b1da <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800e01e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e020:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800e024:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800e028:	4618      	mov	r0, r3
 800e02a:	f7fd f86e 	bl	800b10a <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 800e02e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e030:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800e034:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 800e036:	69bb      	ldr	r3, [r7, #24]
 800e038:	2200      	movs	r2, #0
 800e03a:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 800e03c:	69bb      	ldr	r3, [r7, #24]
 800e03e:	3301      	adds	r3, #1
 800e040:	2201      	movs	r2, #1
 800e042:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 800e044:	69bb      	ldr	r3, [r7, #24]
 800e046:	3302      	adds	r3, #2
 800e048:	2201      	movs	r2, #1
 800e04a:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 800e04c:	69bb      	ldr	r3, [r7, #24]
 800e04e:	3303      	adds	r3, #3
 800e050:	2200      	movs	r2, #0
 800e052:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 800e054:	69bb      	ldr	r3, [r7, #24]
 800e056:	3304      	adds	r3, #4
 800e058:	f897 204e 	ldrb.w	r2, [r7, #78]	@ 0x4e
 800e05c:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 800e05e:	693a      	ldr	r2, [r7, #16]
 800e060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e062:	441a      	add	r2, r3
 800e064:	4b21      	ldr	r3, [pc, #132]	@ (800e0ec <f_mkfs+0x854>)
 800e066:	fba3 1302 	umull	r1, r3, r3, r2
 800e06a:	1ad2      	subs	r2, r2, r3
 800e06c:	0852      	lsrs	r2, r2, #1
 800e06e:	4413      	add	r3, r2
 800e070:	0b5b      	lsrs	r3, r3, #13
 800e072:	65fb      	str	r3, [r7, #92]	@ 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 800e074:	69bb      	ldr	r3, [r7, #24]
 800e076:	3305      	adds	r3, #5
 800e078:	22fe      	movs	r2, #254	@ 0xfe
 800e07a:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 800e07c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e07e:	089b      	lsrs	r3, r3, #2
 800e080:	b2da      	uxtb	r2, r3
 800e082:	69bb      	ldr	r3, [r7, #24]
 800e084:	3306      	adds	r3, #6
 800e086:	f042 023f 	orr.w	r2, r2, #63	@ 0x3f
 800e08a:	b2d2      	uxtb	r2, r2
 800e08c:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 800e08e:	69bb      	ldr	r3, [r7, #24]
 800e090:	3307      	adds	r3, #7
 800e092:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800e094:	b2d2      	uxtb	r2, r2
 800e096:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 800e098:	69bb      	ldr	r3, [r7, #24]
 800e09a:	3308      	adds	r3, #8
 800e09c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e09e:	4618      	mov	r0, r3
 800e0a0:	f7fd f84e 	bl	800b140 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 800e0a4:	69bb      	ldr	r3, [r7, #24]
 800e0a6:	330c      	adds	r3, #12
 800e0a8:	693a      	ldr	r2, [r7, #16]
 800e0aa:	4611      	mov	r1, r2
 800e0ac:	4618      	mov	r0, r3
 800e0ae:	f7fd f847 	bl	800b140 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800e0b2:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 800e0b6:	2301      	movs	r3, #1
 800e0b8:	2200      	movs	r2, #0
 800e0ba:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e0bc:	f7fc ffac 	bl	800b018 <disk_write>
 800e0c0:	4603      	mov	r3, r0
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d001      	beq.n	800e0ca <f_mkfs+0x832>
 800e0c6:	2301      	movs	r3, #1
 800e0c8:	e00c      	b.n	800e0e4 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 800e0ca:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800e0ce:	2200      	movs	r2, #0
 800e0d0:	2100      	movs	r1, #0
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	f7fc ffc0 	bl	800b058 <disk_ioctl>
 800e0d8:	4603      	mov	r3, r0
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d001      	beq.n	800e0e2 <f_mkfs+0x84a>
 800e0de:	2301      	movs	r3, #1
 800e0e0:	e000      	b.n	800e0e4 <f_mkfs+0x84c>

	return FR_OK;
 800e0e2:	2300      	movs	r3, #0
}
 800e0e4:	4618      	mov	r0, r3
 800e0e6:	3774      	adds	r7, #116	@ 0x74
 800e0e8:	46bd      	mov	sp, r7
 800e0ea:	bd90      	pop	{r4, r7, pc}
 800e0ec:	0515565b 	.word	0x0515565b

0800e0f0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e0f0:	b480      	push	{r7}
 800e0f2:	b087      	sub	sp, #28
 800e0f4:	af00      	add	r7, sp, #0
 800e0f6:	60f8      	str	r0, [r7, #12]
 800e0f8:	60b9      	str	r1, [r7, #8]
 800e0fa:	4613      	mov	r3, r2
 800e0fc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e0fe:	2301      	movs	r3, #1
 800e100:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e102:	2300      	movs	r3, #0
 800e104:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e106:	4b1f      	ldr	r3, [pc, #124]	@ (800e184 <FATFS_LinkDriverEx+0x94>)
 800e108:	7a5b      	ldrb	r3, [r3, #9]
 800e10a:	b2db      	uxtb	r3, r3
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d131      	bne.n	800e174 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e110:	4b1c      	ldr	r3, [pc, #112]	@ (800e184 <FATFS_LinkDriverEx+0x94>)
 800e112:	7a5b      	ldrb	r3, [r3, #9]
 800e114:	b2db      	uxtb	r3, r3
 800e116:	461a      	mov	r2, r3
 800e118:	4b1a      	ldr	r3, [pc, #104]	@ (800e184 <FATFS_LinkDriverEx+0x94>)
 800e11a:	2100      	movs	r1, #0
 800e11c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e11e:	4b19      	ldr	r3, [pc, #100]	@ (800e184 <FATFS_LinkDriverEx+0x94>)
 800e120:	7a5b      	ldrb	r3, [r3, #9]
 800e122:	b2db      	uxtb	r3, r3
 800e124:	4a17      	ldr	r2, [pc, #92]	@ (800e184 <FATFS_LinkDriverEx+0x94>)
 800e126:	009b      	lsls	r3, r3, #2
 800e128:	4413      	add	r3, r2
 800e12a:	68fa      	ldr	r2, [r7, #12]
 800e12c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e12e:	4b15      	ldr	r3, [pc, #84]	@ (800e184 <FATFS_LinkDriverEx+0x94>)
 800e130:	7a5b      	ldrb	r3, [r3, #9]
 800e132:	b2db      	uxtb	r3, r3
 800e134:	461a      	mov	r2, r3
 800e136:	4b13      	ldr	r3, [pc, #76]	@ (800e184 <FATFS_LinkDriverEx+0x94>)
 800e138:	4413      	add	r3, r2
 800e13a:	79fa      	ldrb	r2, [r7, #7]
 800e13c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e13e:	4b11      	ldr	r3, [pc, #68]	@ (800e184 <FATFS_LinkDriverEx+0x94>)
 800e140:	7a5b      	ldrb	r3, [r3, #9]
 800e142:	b2db      	uxtb	r3, r3
 800e144:	1c5a      	adds	r2, r3, #1
 800e146:	b2d1      	uxtb	r1, r2
 800e148:	4a0e      	ldr	r2, [pc, #56]	@ (800e184 <FATFS_LinkDriverEx+0x94>)
 800e14a:	7251      	strb	r1, [r2, #9]
 800e14c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e14e:	7dbb      	ldrb	r3, [r7, #22]
 800e150:	3330      	adds	r3, #48	@ 0x30
 800e152:	b2da      	uxtb	r2, r3
 800e154:	68bb      	ldr	r3, [r7, #8]
 800e156:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e158:	68bb      	ldr	r3, [r7, #8]
 800e15a:	3301      	adds	r3, #1
 800e15c:	223a      	movs	r2, #58	@ 0x3a
 800e15e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e160:	68bb      	ldr	r3, [r7, #8]
 800e162:	3302      	adds	r3, #2
 800e164:	222f      	movs	r2, #47	@ 0x2f
 800e166:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e168:	68bb      	ldr	r3, [r7, #8]
 800e16a:	3303      	adds	r3, #3
 800e16c:	2200      	movs	r2, #0
 800e16e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e170:	2300      	movs	r3, #0
 800e172:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e174:	7dfb      	ldrb	r3, [r7, #23]
}
 800e176:	4618      	mov	r0, r3
 800e178:	371c      	adds	r7, #28
 800e17a:	46bd      	mov	sp, r7
 800e17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e180:	4770      	bx	lr
 800e182:	bf00      	nop
 800e184:	2000561c 	.word	0x2000561c

0800e188 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e188:	b580      	push	{r7, lr}
 800e18a:	b082      	sub	sp, #8
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	6078      	str	r0, [r7, #4]
 800e190:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e192:	2200      	movs	r2, #0
 800e194:	6839      	ldr	r1, [r7, #0]
 800e196:	6878      	ldr	r0, [r7, #4]
 800e198:	f7ff ffaa 	bl	800e0f0 <FATFS_LinkDriverEx>
 800e19c:	4603      	mov	r3, r0
}
 800e19e:	4618      	mov	r0, r3
 800e1a0:	3708      	adds	r7, #8
 800e1a2:	46bd      	mov	sp, r7
 800e1a4:	bd80      	pop	{r7, pc}
	...

0800e1a8 <malloc>:
 800e1a8:	4b02      	ldr	r3, [pc, #8]	@ (800e1b4 <malloc+0xc>)
 800e1aa:	4601      	mov	r1, r0
 800e1ac:	6818      	ldr	r0, [r3, #0]
 800e1ae:	f000 b825 	b.w	800e1fc <_malloc_r>
 800e1b2:	bf00      	nop
 800e1b4:	20000058 	.word	0x20000058

0800e1b8 <sbrk_aligned>:
 800e1b8:	b570      	push	{r4, r5, r6, lr}
 800e1ba:	4e0f      	ldr	r6, [pc, #60]	@ (800e1f8 <sbrk_aligned+0x40>)
 800e1bc:	460c      	mov	r4, r1
 800e1be:	6831      	ldr	r1, [r6, #0]
 800e1c0:	4605      	mov	r5, r0
 800e1c2:	b911      	cbnz	r1, 800e1ca <sbrk_aligned+0x12>
 800e1c4:	f000 ff48 	bl	800f058 <_sbrk_r>
 800e1c8:	6030      	str	r0, [r6, #0]
 800e1ca:	4621      	mov	r1, r4
 800e1cc:	4628      	mov	r0, r5
 800e1ce:	f000 ff43 	bl	800f058 <_sbrk_r>
 800e1d2:	1c43      	adds	r3, r0, #1
 800e1d4:	d103      	bne.n	800e1de <sbrk_aligned+0x26>
 800e1d6:	f04f 34ff 	mov.w	r4, #4294967295
 800e1da:	4620      	mov	r0, r4
 800e1dc:	bd70      	pop	{r4, r5, r6, pc}
 800e1de:	1cc4      	adds	r4, r0, #3
 800e1e0:	f024 0403 	bic.w	r4, r4, #3
 800e1e4:	42a0      	cmp	r0, r4
 800e1e6:	d0f8      	beq.n	800e1da <sbrk_aligned+0x22>
 800e1e8:	1a21      	subs	r1, r4, r0
 800e1ea:	4628      	mov	r0, r5
 800e1ec:	f000 ff34 	bl	800f058 <_sbrk_r>
 800e1f0:	3001      	adds	r0, #1
 800e1f2:	d1f2      	bne.n	800e1da <sbrk_aligned+0x22>
 800e1f4:	e7ef      	b.n	800e1d6 <sbrk_aligned+0x1e>
 800e1f6:	bf00      	nop
 800e1f8:	20005628 	.word	0x20005628

0800e1fc <_malloc_r>:
 800e1fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e200:	1ccd      	adds	r5, r1, #3
 800e202:	f025 0503 	bic.w	r5, r5, #3
 800e206:	3508      	adds	r5, #8
 800e208:	2d0c      	cmp	r5, #12
 800e20a:	bf38      	it	cc
 800e20c:	250c      	movcc	r5, #12
 800e20e:	2d00      	cmp	r5, #0
 800e210:	4606      	mov	r6, r0
 800e212:	db01      	blt.n	800e218 <_malloc_r+0x1c>
 800e214:	42a9      	cmp	r1, r5
 800e216:	d904      	bls.n	800e222 <_malloc_r+0x26>
 800e218:	230c      	movs	r3, #12
 800e21a:	6033      	str	r3, [r6, #0]
 800e21c:	2000      	movs	r0, #0
 800e21e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e222:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e2f8 <_malloc_r+0xfc>
 800e226:	f000 f869 	bl	800e2fc <__malloc_lock>
 800e22a:	f8d8 3000 	ldr.w	r3, [r8]
 800e22e:	461c      	mov	r4, r3
 800e230:	bb44      	cbnz	r4, 800e284 <_malloc_r+0x88>
 800e232:	4629      	mov	r1, r5
 800e234:	4630      	mov	r0, r6
 800e236:	f7ff ffbf 	bl	800e1b8 <sbrk_aligned>
 800e23a:	1c43      	adds	r3, r0, #1
 800e23c:	4604      	mov	r4, r0
 800e23e:	d158      	bne.n	800e2f2 <_malloc_r+0xf6>
 800e240:	f8d8 4000 	ldr.w	r4, [r8]
 800e244:	4627      	mov	r7, r4
 800e246:	2f00      	cmp	r7, #0
 800e248:	d143      	bne.n	800e2d2 <_malloc_r+0xd6>
 800e24a:	2c00      	cmp	r4, #0
 800e24c:	d04b      	beq.n	800e2e6 <_malloc_r+0xea>
 800e24e:	6823      	ldr	r3, [r4, #0]
 800e250:	4639      	mov	r1, r7
 800e252:	4630      	mov	r0, r6
 800e254:	eb04 0903 	add.w	r9, r4, r3
 800e258:	f000 fefe 	bl	800f058 <_sbrk_r>
 800e25c:	4581      	cmp	r9, r0
 800e25e:	d142      	bne.n	800e2e6 <_malloc_r+0xea>
 800e260:	6821      	ldr	r1, [r4, #0]
 800e262:	1a6d      	subs	r5, r5, r1
 800e264:	4629      	mov	r1, r5
 800e266:	4630      	mov	r0, r6
 800e268:	f7ff ffa6 	bl	800e1b8 <sbrk_aligned>
 800e26c:	3001      	adds	r0, #1
 800e26e:	d03a      	beq.n	800e2e6 <_malloc_r+0xea>
 800e270:	6823      	ldr	r3, [r4, #0]
 800e272:	442b      	add	r3, r5
 800e274:	6023      	str	r3, [r4, #0]
 800e276:	f8d8 3000 	ldr.w	r3, [r8]
 800e27a:	685a      	ldr	r2, [r3, #4]
 800e27c:	bb62      	cbnz	r2, 800e2d8 <_malloc_r+0xdc>
 800e27e:	f8c8 7000 	str.w	r7, [r8]
 800e282:	e00f      	b.n	800e2a4 <_malloc_r+0xa8>
 800e284:	6822      	ldr	r2, [r4, #0]
 800e286:	1b52      	subs	r2, r2, r5
 800e288:	d420      	bmi.n	800e2cc <_malloc_r+0xd0>
 800e28a:	2a0b      	cmp	r2, #11
 800e28c:	d917      	bls.n	800e2be <_malloc_r+0xc2>
 800e28e:	1961      	adds	r1, r4, r5
 800e290:	42a3      	cmp	r3, r4
 800e292:	6025      	str	r5, [r4, #0]
 800e294:	bf18      	it	ne
 800e296:	6059      	strne	r1, [r3, #4]
 800e298:	6863      	ldr	r3, [r4, #4]
 800e29a:	bf08      	it	eq
 800e29c:	f8c8 1000 	streq.w	r1, [r8]
 800e2a0:	5162      	str	r2, [r4, r5]
 800e2a2:	604b      	str	r3, [r1, #4]
 800e2a4:	4630      	mov	r0, r6
 800e2a6:	f000 f82f 	bl	800e308 <__malloc_unlock>
 800e2aa:	f104 000b 	add.w	r0, r4, #11
 800e2ae:	1d23      	adds	r3, r4, #4
 800e2b0:	f020 0007 	bic.w	r0, r0, #7
 800e2b4:	1ac2      	subs	r2, r0, r3
 800e2b6:	bf1c      	itt	ne
 800e2b8:	1a1b      	subne	r3, r3, r0
 800e2ba:	50a3      	strne	r3, [r4, r2]
 800e2bc:	e7af      	b.n	800e21e <_malloc_r+0x22>
 800e2be:	6862      	ldr	r2, [r4, #4]
 800e2c0:	42a3      	cmp	r3, r4
 800e2c2:	bf0c      	ite	eq
 800e2c4:	f8c8 2000 	streq.w	r2, [r8]
 800e2c8:	605a      	strne	r2, [r3, #4]
 800e2ca:	e7eb      	b.n	800e2a4 <_malloc_r+0xa8>
 800e2cc:	4623      	mov	r3, r4
 800e2ce:	6864      	ldr	r4, [r4, #4]
 800e2d0:	e7ae      	b.n	800e230 <_malloc_r+0x34>
 800e2d2:	463c      	mov	r4, r7
 800e2d4:	687f      	ldr	r7, [r7, #4]
 800e2d6:	e7b6      	b.n	800e246 <_malloc_r+0x4a>
 800e2d8:	461a      	mov	r2, r3
 800e2da:	685b      	ldr	r3, [r3, #4]
 800e2dc:	42a3      	cmp	r3, r4
 800e2de:	d1fb      	bne.n	800e2d8 <_malloc_r+0xdc>
 800e2e0:	2300      	movs	r3, #0
 800e2e2:	6053      	str	r3, [r2, #4]
 800e2e4:	e7de      	b.n	800e2a4 <_malloc_r+0xa8>
 800e2e6:	230c      	movs	r3, #12
 800e2e8:	6033      	str	r3, [r6, #0]
 800e2ea:	4630      	mov	r0, r6
 800e2ec:	f000 f80c 	bl	800e308 <__malloc_unlock>
 800e2f0:	e794      	b.n	800e21c <_malloc_r+0x20>
 800e2f2:	6005      	str	r5, [r0, #0]
 800e2f4:	e7d6      	b.n	800e2a4 <_malloc_r+0xa8>
 800e2f6:	bf00      	nop
 800e2f8:	2000562c 	.word	0x2000562c

0800e2fc <__malloc_lock>:
 800e2fc:	4801      	ldr	r0, [pc, #4]	@ (800e304 <__malloc_lock+0x8>)
 800e2fe:	f000 bef8 	b.w	800f0f2 <__retarget_lock_acquire_recursive>
 800e302:	bf00      	nop
 800e304:	20005770 	.word	0x20005770

0800e308 <__malloc_unlock>:
 800e308:	4801      	ldr	r0, [pc, #4]	@ (800e310 <__malloc_unlock+0x8>)
 800e30a:	f000 bef3 	b.w	800f0f4 <__retarget_lock_release_recursive>
 800e30e:	bf00      	nop
 800e310:	20005770 	.word	0x20005770

0800e314 <__cvt>:
 800e314:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e318:	ec57 6b10 	vmov	r6, r7, d0
 800e31c:	2f00      	cmp	r7, #0
 800e31e:	460c      	mov	r4, r1
 800e320:	4619      	mov	r1, r3
 800e322:	463b      	mov	r3, r7
 800e324:	bfbb      	ittet	lt
 800e326:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800e32a:	461f      	movlt	r7, r3
 800e32c:	2300      	movge	r3, #0
 800e32e:	232d      	movlt	r3, #45	@ 0x2d
 800e330:	700b      	strb	r3, [r1, #0]
 800e332:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e334:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800e338:	4691      	mov	r9, r2
 800e33a:	f023 0820 	bic.w	r8, r3, #32
 800e33e:	bfbc      	itt	lt
 800e340:	4632      	movlt	r2, r6
 800e342:	4616      	movlt	r6, r2
 800e344:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e348:	d005      	beq.n	800e356 <__cvt+0x42>
 800e34a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800e34e:	d100      	bne.n	800e352 <__cvt+0x3e>
 800e350:	3401      	adds	r4, #1
 800e352:	2102      	movs	r1, #2
 800e354:	e000      	b.n	800e358 <__cvt+0x44>
 800e356:	2103      	movs	r1, #3
 800e358:	ab03      	add	r3, sp, #12
 800e35a:	9301      	str	r3, [sp, #4]
 800e35c:	ab02      	add	r3, sp, #8
 800e35e:	9300      	str	r3, [sp, #0]
 800e360:	ec47 6b10 	vmov	d0, r6, r7
 800e364:	4653      	mov	r3, sl
 800e366:	4622      	mov	r2, r4
 800e368:	f000 ff5e 	bl	800f228 <_dtoa_r>
 800e36c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800e370:	4605      	mov	r5, r0
 800e372:	d119      	bne.n	800e3a8 <__cvt+0x94>
 800e374:	f019 0f01 	tst.w	r9, #1
 800e378:	d00e      	beq.n	800e398 <__cvt+0x84>
 800e37a:	eb00 0904 	add.w	r9, r0, r4
 800e37e:	2200      	movs	r2, #0
 800e380:	2300      	movs	r3, #0
 800e382:	4630      	mov	r0, r6
 800e384:	4639      	mov	r1, r7
 800e386:	f7f2 fbbf 	bl	8000b08 <__aeabi_dcmpeq>
 800e38a:	b108      	cbz	r0, 800e390 <__cvt+0x7c>
 800e38c:	f8cd 900c 	str.w	r9, [sp, #12]
 800e390:	2230      	movs	r2, #48	@ 0x30
 800e392:	9b03      	ldr	r3, [sp, #12]
 800e394:	454b      	cmp	r3, r9
 800e396:	d31e      	bcc.n	800e3d6 <__cvt+0xc2>
 800e398:	9b03      	ldr	r3, [sp, #12]
 800e39a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e39c:	1b5b      	subs	r3, r3, r5
 800e39e:	4628      	mov	r0, r5
 800e3a0:	6013      	str	r3, [r2, #0]
 800e3a2:	b004      	add	sp, #16
 800e3a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3a8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e3ac:	eb00 0904 	add.w	r9, r0, r4
 800e3b0:	d1e5      	bne.n	800e37e <__cvt+0x6a>
 800e3b2:	7803      	ldrb	r3, [r0, #0]
 800e3b4:	2b30      	cmp	r3, #48	@ 0x30
 800e3b6:	d10a      	bne.n	800e3ce <__cvt+0xba>
 800e3b8:	2200      	movs	r2, #0
 800e3ba:	2300      	movs	r3, #0
 800e3bc:	4630      	mov	r0, r6
 800e3be:	4639      	mov	r1, r7
 800e3c0:	f7f2 fba2 	bl	8000b08 <__aeabi_dcmpeq>
 800e3c4:	b918      	cbnz	r0, 800e3ce <__cvt+0xba>
 800e3c6:	f1c4 0401 	rsb	r4, r4, #1
 800e3ca:	f8ca 4000 	str.w	r4, [sl]
 800e3ce:	f8da 3000 	ldr.w	r3, [sl]
 800e3d2:	4499      	add	r9, r3
 800e3d4:	e7d3      	b.n	800e37e <__cvt+0x6a>
 800e3d6:	1c59      	adds	r1, r3, #1
 800e3d8:	9103      	str	r1, [sp, #12]
 800e3da:	701a      	strb	r2, [r3, #0]
 800e3dc:	e7d9      	b.n	800e392 <__cvt+0x7e>

0800e3de <__exponent>:
 800e3de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e3e0:	2900      	cmp	r1, #0
 800e3e2:	bfba      	itte	lt
 800e3e4:	4249      	neglt	r1, r1
 800e3e6:	232d      	movlt	r3, #45	@ 0x2d
 800e3e8:	232b      	movge	r3, #43	@ 0x2b
 800e3ea:	2909      	cmp	r1, #9
 800e3ec:	7002      	strb	r2, [r0, #0]
 800e3ee:	7043      	strb	r3, [r0, #1]
 800e3f0:	dd29      	ble.n	800e446 <__exponent+0x68>
 800e3f2:	f10d 0307 	add.w	r3, sp, #7
 800e3f6:	461d      	mov	r5, r3
 800e3f8:	270a      	movs	r7, #10
 800e3fa:	461a      	mov	r2, r3
 800e3fc:	fbb1 f6f7 	udiv	r6, r1, r7
 800e400:	fb07 1416 	mls	r4, r7, r6, r1
 800e404:	3430      	adds	r4, #48	@ 0x30
 800e406:	f802 4c01 	strb.w	r4, [r2, #-1]
 800e40a:	460c      	mov	r4, r1
 800e40c:	2c63      	cmp	r4, #99	@ 0x63
 800e40e:	f103 33ff 	add.w	r3, r3, #4294967295
 800e412:	4631      	mov	r1, r6
 800e414:	dcf1      	bgt.n	800e3fa <__exponent+0x1c>
 800e416:	3130      	adds	r1, #48	@ 0x30
 800e418:	1e94      	subs	r4, r2, #2
 800e41a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e41e:	1c41      	adds	r1, r0, #1
 800e420:	4623      	mov	r3, r4
 800e422:	42ab      	cmp	r3, r5
 800e424:	d30a      	bcc.n	800e43c <__exponent+0x5e>
 800e426:	f10d 0309 	add.w	r3, sp, #9
 800e42a:	1a9b      	subs	r3, r3, r2
 800e42c:	42ac      	cmp	r4, r5
 800e42e:	bf88      	it	hi
 800e430:	2300      	movhi	r3, #0
 800e432:	3302      	adds	r3, #2
 800e434:	4403      	add	r3, r0
 800e436:	1a18      	subs	r0, r3, r0
 800e438:	b003      	add	sp, #12
 800e43a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e43c:	f813 6b01 	ldrb.w	r6, [r3], #1
 800e440:	f801 6f01 	strb.w	r6, [r1, #1]!
 800e444:	e7ed      	b.n	800e422 <__exponent+0x44>
 800e446:	2330      	movs	r3, #48	@ 0x30
 800e448:	3130      	adds	r1, #48	@ 0x30
 800e44a:	7083      	strb	r3, [r0, #2]
 800e44c:	70c1      	strb	r1, [r0, #3]
 800e44e:	1d03      	adds	r3, r0, #4
 800e450:	e7f1      	b.n	800e436 <__exponent+0x58>
	...

0800e454 <_printf_float>:
 800e454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e458:	b08d      	sub	sp, #52	@ 0x34
 800e45a:	460c      	mov	r4, r1
 800e45c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800e460:	4616      	mov	r6, r2
 800e462:	461f      	mov	r7, r3
 800e464:	4605      	mov	r5, r0
 800e466:	f000 fdbf 	bl	800efe8 <_localeconv_r>
 800e46a:	6803      	ldr	r3, [r0, #0]
 800e46c:	9304      	str	r3, [sp, #16]
 800e46e:	4618      	mov	r0, r3
 800e470:	f7f1 ff1e 	bl	80002b0 <strlen>
 800e474:	2300      	movs	r3, #0
 800e476:	930a      	str	r3, [sp, #40]	@ 0x28
 800e478:	f8d8 3000 	ldr.w	r3, [r8]
 800e47c:	9005      	str	r0, [sp, #20]
 800e47e:	3307      	adds	r3, #7
 800e480:	f023 0307 	bic.w	r3, r3, #7
 800e484:	f103 0208 	add.w	r2, r3, #8
 800e488:	f894 a018 	ldrb.w	sl, [r4, #24]
 800e48c:	f8d4 b000 	ldr.w	fp, [r4]
 800e490:	f8c8 2000 	str.w	r2, [r8]
 800e494:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e498:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800e49c:	9307      	str	r3, [sp, #28]
 800e49e:	f8cd 8018 	str.w	r8, [sp, #24]
 800e4a2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800e4a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e4aa:	4b9c      	ldr	r3, [pc, #624]	@ (800e71c <_printf_float+0x2c8>)
 800e4ac:	f04f 32ff 	mov.w	r2, #4294967295
 800e4b0:	f7f2 fb5c 	bl	8000b6c <__aeabi_dcmpun>
 800e4b4:	bb70      	cbnz	r0, 800e514 <_printf_float+0xc0>
 800e4b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e4ba:	4b98      	ldr	r3, [pc, #608]	@ (800e71c <_printf_float+0x2c8>)
 800e4bc:	f04f 32ff 	mov.w	r2, #4294967295
 800e4c0:	f7f2 fb36 	bl	8000b30 <__aeabi_dcmple>
 800e4c4:	bb30      	cbnz	r0, 800e514 <_printf_float+0xc0>
 800e4c6:	2200      	movs	r2, #0
 800e4c8:	2300      	movs	r3, #0
 800e4ca:	4640      	mov	r0, r8
 800e4cc:	4649      	mov	r1, r9
 800e4ce:	f7f2 fb25 	bl	8000b1c <__aeabi_dcmplt>
 800e4d2:	b110      	cbz	r0, 800e4da <_printf_float+0x86>
 800e4d4:	232d      	movs	r3, #45	@ 0x2d
 800e4d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e4da:	4a91      	ldr	r2, [pc, #580]	@ (800e720 <_printf_float+0x2cc>)
 800e4dc:	4b91      	ldr	r3, [pc, #580]	@ (800e724 <_printf_float+0x2d0>)
 800e4de:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e4e2:	bf94      	ite	ls
 800e4e4:	4690      	movls	r8, r2
 800e4e6:	4698      	movhi	r8, r3
 800e4e8:	2303      	movs	r3, #3
 800e4ea:	6123      	str	r3, [r4, #16]
 800e4ec:	f02b 0304 	bic.w	r3, fp, #4
 800e4f0:	6023      	str	r3, [r4, #0]
 800e4f2:	f04f 0900 	mov.w	r9, #0
 800e4f6:	9700      	str	r7, [sp, #0]
 800e4f8:	4633      	mov	r3, r6
 800e4fa:	aa0b      	add	r2, sp, #44	@ 0x2c
 800e4fc:	4621      	mov	r1, r4
 800e4fe:	4628      	mov	r0, r5
 800e500:	f000 f9d2 	bl	800e8a8 <_printf_common>
 800e504:	3001      	adds	r0, #1
 800e506:	f040 808d 	bne.w	800e624 <_printf_float+0x1d0>
 800e50a:	f04f 30ff 	mov.w	r0, #4294967295
 800e50e:	b00d      	add	sp, #52	@ 0x34
 800e510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e514:	4642      	mov	r2, r8
 800e516:	464b      	mov	r3, r9
 800e518:	4640      	mov	r0, r8
 800e51a:	4649      	mov	r1, r9
 800e51c:	f7f2 fb26 	bl	8000b6c <__aeabi_dcmpun>
 800e520:	b140      	cbz	r0, 800e534 <_printf_float+0xe0>
 800e522:	464b      	mov	r3, r9
 800e524:	2b00      	cmp	r3, #0
 800e526:	bfbc      	itt	lt
 800e528:	232d      	movlt	r3, #45	@ 0x2d
 800e52a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800e52e:	4a7e      	ldr	r2, [pc, #504]	@ (800e728 <_printf_float+0x2d4>)
 800e530:	4b7e      	ldr	r3, [pc, #504]	@ (800e72c <_printf_float+0x2d8>)
 800e532:	e7d4      	b.n	800e4de <_printf_float+0x8a>
 800e534:	6863      	ldr	r3, [r4, #4]
 800e536:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800e53a:	9206      	str	r2, [sp, #24]
 800e53c:	1c5a      	adds	r2, r3, #1
 800e53e:	d13b      	bne.n	800e5b8 <_printf_float+0x164>
 800e540:	2306      	movs	r3, #6
 800e542:	6063      	str	r3, [r4, #4]
 800e544:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800e548:	2300      	movs	r3, #0
 800e54a:	6022      	str	r2, [r4, #0]
 800e54c:	9303      	str	r3, [sp, #12]
 800e54e:	ab0a      	add	r3, sp, #40	@ 0x28
 800e550:	e9cd a301 	strd	sl, r3, [sp, #4]
 800e554:	ab09      	add	r3, sp, #36	@ 0x24
 800e556:	9300      	str	r3, [sp, #0]
 800e558:	6861      	ldr	r1, [r4, #4]
 800e55a:	ec49 8b10 	vmov	d0, r8, r9
 800e55e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800e562:	4628      	mov	r0, r5
 800e564:	f7ff fed6 	bl	800e314 <__cvt>
 800e568:	9b06      	ldr	r3, [sp, #24]
 800e56a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e56c:	2b47      	cmp	r3, #71	@ 0x47
 800e56e:	4680      	mov	r8, r0
 800e570:	d129      	bne.n	800e5c6 <_printf_float+0x172>
 800e572:	1cc8      	adds	r0, r1, #3
 800e574:	db02      	blt.n	800e57c <_printf_float+0x128>
 800e576:	6863      	ldr	r3, [r4, #4]
 800e578:	4299      	cmp	r1, r3
 800e57a:	dd41      	ble.n	800e600 <_printf_float+0x1ac>
 800e57c:	f1aa 0a02 	sub.w	sl, sl, #2
 800e580:	fa5f fa8a 	uxtb.w	sl, sl
 800e584:	3901      	subs	r1, #1
 800e586:	4652      	mov	r2, sl
 800e588:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800e58c:	9109      	str	r1, [sp, #36]	@ 0x24
 800e58e:	f7ff ff26 	bl	800e3de <__exponent>
 800e592:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e594:	1813      	adds	r3, r2, r0
 800e596:	2a01      	cmp	r2, #1
 800e598:	4681      	mov	r9, r0
 800e59a:	6123      	str	r3, [r4, #16]
 800e59c:	dc02      	bgt.n	800e5a4 <_printf_float+0x150>
 800e59e:	6822      	ldr	r2, [r4, #0]
 800e5a0:	07d2      	lsls	r2, r2, #31
 800e5a2:	d501      	bpl.n	800e5a8 <_printf_float+0x154>
 800e5a4:	3301      	adds	r3, #1
 800e5a6:	6123      	str	r3, [r4, #16]
 800e5a8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d0a2      	beq.n	800e4f6 <_printf_float+0xa2>
 800e5b0:	232d      	movs	r3, #45	@ 0x2d
 800e5b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e5b6:	e79e      	b.n	800e4f6 <_printf_float+0xa2>
 800e5b8:	9a06      	ldr	r2, [sp, #24]
 800e5ba:	2a47      	cmp	r2, #71	@ 0x47
 800e5bc:	d1c2      	bne.n	800e544 <_printf_float+0xf0>
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d1c0      	bne.n	800e544 <_printf_float+0xf0>
 800e5c2:	2301      	movs	r3, #1
 800e5c4:	e7bd      	b.n	800e542 <_printf_float+0xee>
 800e5c6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e5ca:	d9db      	bls.n	800e584 <_printf_float+0x130>
 800e5cc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800e5d0:	d118      	bne.n	800e604 <_printf_float+0x1b0>
 800e5d2:	2900      	cmp	r1, #0
 800e5d4:	6863      	ldr	r3, [r4, #4]
 800e5d6:	dd0b      	ble.n	800e5f0 <_printf_float+0x19c>
 800e5d8:	6121      	str	r1, [r4, #16]
 800e5da:	b913      	cbnz	r3, 800e5e2 <_printf_float+0x18e>
 800e5dc:	6822      	ldr	r2, [r4, #0]
 800e5de:	07d0      	lsls	r0, r2, #31
 800e5e0:	d502      	bpl.n	800e5e8 <_printf_float+0x194>
 800e5e2:	3301      	adds	r3, #1
 800e5e4:	440b      	add	r3, r1
 800e5e6:	6123      	str	r3, [r4, #16]
 800e5e8:	65a1      	str	r1, [r4, #88]	@ 0x58
 800e5ea:	f04f 0900 	mov.w	r9, #0
 800e5ee:	e7db      	b.n	800e5a8 <_printf_float+0x154>
 800e5f0:	b913      	cbnz	r3, 800e5f8 <_printf_float+0x1a4>
 800e5f2:	6822      	ldr	r2, [r4, #0]
 800e5f4:	07d2      	lsls	r2, r2, #31
 800e5f6:	d501      	bpl.n	800e5fc <_printf_float+0x1a8>
 800e5f8:	3302      	adds	r3, #2
 800e5fa:	e7f4      	b.n	800e5e6 <_printf_float+0x192>
 800e5fc:	2301      	movs	r3, #1
 800e5fe:	e7f2      	b.n	800e5e6 <_printf_float+0x192>
 800e600:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800e604:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e606:	4299      	cmp	r1, r3
 800e608:	db05      	blt.n	800e616 <_printf_float+0x1c2>
 800e60a:	6823      	ldr	r3, [r4, #0]
 800e60c:	6121      	str	r1, [r4, #16]
 800e60e:	07d8      	lsls	r0, r3, #31
 800e610:	d5ea      	bpl.n	800e5e8 <_printf_float+0x194>
 800e612:	1c4b      	adds	r3, r1, #1
 800e614:	e7e7      	b.n	800e5e6 <_printf_float+0x192>
 800e616:	2900      	cmp	r1, #0
 800e618:	bfd4      	ite	le
 800e61a:	f1c1 0202 	rsble	r2, r1, #2
 800e61e:	2201      	movgt	r2, #1
 800e620:	4413      	add	r3, r2
 800e622:	e7e0      	b.n	800e5e6 <_printf_float+0x192>
 800e624:	6823      	ldr	r3, [r4, #0]
 800e626:	055a      	lsls	r2, r3, #21
 800e628:	d407      	bmi.n	800e63a <_printf_float+0x1e6>
 800e62a:	6923      	ldr	r3, [r4, #16]
 800e62c:	4642      	mov	r2, r8
 800e62e:	4631      	mov	r1, r6
 800e630:	4628      	mov	r0, r5
 800e632:	47b8      	blx	r7
 800e634:	3001      	adds	r0, #1
 800e636:	d12b      	bne.n	800e690 <_printf_float+0x23c>
 800e638:	e767      	b.n	800e50a <_printf_float+0xb6>
 800e63a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e63e:	f240 80dd 	bls.w	800e7fc <_printf_float+0x3a8>
 800e642:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e646:	2200      	movs	r2, #0
 800e648:	2300      	movs	r3, #0
 800e64a:	f7f2 fa5d 	bl	8000b08 <__aeabi_dcmpeq>
 800e64e:	2800      	cmp	r0, #0
 800e650:	d033      	beq.n	800e6ba <_printf_float+0x266>
 800e652:	4a37      	ldr	r2, [pc, #220]	@ (800e730 <_printf_float+0x2dc>)
 800e654:	2301      	movs	r3, #1
 800e656:	4631      	mov	r1, r6
 800e658:	4628      	mov	r0, r5
 800e65a:	47b8      	blx	r7
 800e65c:	3001      	adds	r0, #1
 800e65e:	f43f af54 	beq.w	800e50a <_printf_float+0xb6>
 800e662:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800e666:	4543      	cmp	r3, r8
 800e668:	db02      	blt.n	800e670 <_printf_float+0x21c>
 800e66a:	6823      	ldr	r3, [r4, #0]
 800e66c:	07d8      	lsls	r0, r3, #31
 800e66e:	d50f      	bpl.n	800e690 <_printf_float+0x23c>
 800e670:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e674:	4631      	mov	r1, r6
 800e676:	4628      	mov	r0, r5
 800e678:	47b8      	blx	r7
 800e67a:	3001      	adds	r0, #1
 800e67c:	f43f af45 	beq.w	800e50a <_printf_float+0xb6>
 800e680:	f04f 0900 	mov.w	r9, #0
 800e684:	f108 38ff 	add.w	r8, r8, #4294967295
 800e688:	f104 0a1a 	add.w	sl, r4, #26
 800e68c:	45c8      	cmp	r8, r9
 800e68e:	dc09      	bgt.n	800e6a4 <_printf_float+0x250>
 800e690:	6823      	ldr	r3, [r4, #0]
 800e692:	079b      	lsls	r3, r3, #30
 800e694:	f100 8103 	bmi.w	800e89e <_printf_float+0x44a>
 800e698:	68e0      	ldr	r0, [r4, #12]
 800e69a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e69c:	4298      	cmp	r0, r3
 800e69e:	bfb8      	it	lt
 800e6a0:	4618      	movlt	r0, r3
 800e6a2:	e734      	b.n	800e50e <_printf_float+0xba>
 800e6a4:	2301      	movs	r3, #1
 800e6a6:	4652      	mov	r2, sl
 800e6a8:	4631      	mov	r1, r6
 800e6aa:	4628      	mov	r0, r5
 800e6ac:	47b8      	blx	r7
 800e6ae:	3001      	adds	r0, #1
 800e6b0:	f43f af2b 	beq.w	800e50a <_printf_float+0xb6>
 800e6b4:	f109 0901 	add.w	r9, r9, #1
 800e6b8:	e7e8      	b.n	800e68c <_printf_float+0x238>
 800e6ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	dc39      	bgt.n	800e734 <_printf_float+0x2e0>
 800e6c0:	4a1b      	ldr	r2, [pc, #108]	@ (800e730 <_printf_float+0x2dc>)
 800e6c2:	2301      	movs	r3, #1
 800e6c4:	4631      	mov	r1, r6
 800e6c6:	4628      	mov	r0, r5
 800e6c8:	47b8      	blx	r7
 800e6ca:	3001      	adds	r0, #1
 800e6cc:	f43f af1d 	beq.w	800e50a <_printf_float+0xb6>
 800e6d0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800e6d4:	ea59 0303 	orrs.w	r3, r9, r3
 800e6d8:	d102      	bne.n	800e6e0 <_printf_float+0x28c>
 800e6da:	6823      	ldr	r3, [r4, #0]
 800e6dc:	07d9      	lsls	r1, r3, #31
 800e6de:	d5d7      	bpl.n	800e690 <_printf_float+0x23c>
 800e6e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e6e4:	4631      	mov	r1, r6
 800e6e6:	4628      	mov	r0, r5
 800e6e8:	47b8      	blx	r7
 800e6ea:	3001      	adds	r0, #1
 800e6ec:	f43f af0d 	beq.w	800e50a <_printf_float+0xb6>
 800e6f0:	f04f 0a00 	mov.w	sl, #0
 800e6f4:	f104 0b1a 	add.w	fp, r4, #26
 800e6f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e6fa:	425b      	negs	r3, r3
 800e6fc:	4553      	cmp	r3, sl
 800e6fe:	dc01      	bgt.n	800e704 <_printf_float+0x2b0>
 800e700:	464b      	mov	r3, r9
 800e702:	e793      	b.n	800e62c <_printf_float+0x1d8>
 800e704:	2301      	movs	r3, #1
 800e706:	465a      	mov	r2, fp
 800e708:	4631      	mov	r1, r6
 800e70a:	4628      	mov	r0, r5
 800e70c:	47b8      	blx	r7
 800e70e:	3001      	adds	r0, #1
 800e710:	f43f aefb 	beq.w	800e50a <_printf_float+0xb6>
 800e714:	f10a 0a01 	add.w	sl, sl, #1
 800e718:	e7ee      	b.n	800e6f8 <_printf_float+0x2a4>
 800e71a:	bf00      	nop
 800e71c:	7fefffff 	.word	0x7fefffff
 800e720:	0801108a 	.word	0x0801108a
 800e724:	0801108e 	.word	0x0801108e
 800e728:	08011092 	.word	0x08011092
 800e72c:	08011096 	.word	0x08011096
 800e730:	0801109a 	.word	0x0801109a
 800e734:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e736:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e73a:	4553      	cmp	r3, sl
 800e73c:	bfa8      	it	ge
 800e73e:	4653      	movge	r3, sl
 800e740:	2b00      	cmp	r3, #0
 800e742:	4699      	mov	r9, r3
 800e744:	dc36      	bgt.n	800e7b4 <_printf_float+0x360>
 800e746:	f04f 0b00 	mov.w	fp, #0
 800e74a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e74e:	f104 021a 	add.w	r2, r4, #26
 800e752:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e754:	9306      	str	r3, [sp, #24]
 800e756:	eba3 0309 	sub.w	r3, r3, r9
 800e75a:	455b      	cmp	r3, fp
 800e75c:	dc31      	bgt.n	800e7c2 <_printf_float+0x36e>
 800e75e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e760:	459a      	cmp	sl, r3
 800e762:	dc3a      	bgt.n	800e7da <_printf_float+0x386>
 800e764:	6823      	ldr	r3, [r4, #0]
 800e766:	07da      	lsls	r2, r3, #31
 800e768:	d437      	bmi.n	800e7da <_printf_float+0x386>
 800e76a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e76c:	ebaa 0903 	sub.w	r9, sl, r3
 800e770:	9b06      	ldr	r3, [sp, #24]
 800e772:	ebaa 0303 	sub.w	r3, sl, r3
 800e776:	4599      	cmp	r9, r3
 800e778:	bfa8      	it	ge
 800e77a:	4699      	movge	r9, r3
 800e77c:	f1b9 0f00 	cmp.w	r9, #0
 800e780:	dc33      	bgt.n	800e7ea <_printf_float+0x396>
 800e782:	f04f 0800 	mov.w	r8, #0
 800e786:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e78a:	f104 0b1a 	add.w	fp, r4, #26
 800e78e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e790:	ebaa 0303 	sub.w	r3, sl, r3
 800e794:	eba3 0309 	sub.w	r3, r3, r9
 800e798:	4543      	cmp	r3, r8
 800e79a:	f77f af79 	ble.w	800e690 <_printf_float+0x23c>
 800e79e:	2301      	movs	r3, #1
 800e7a0:	465a      	mov	r2, fp
 800e7a2:	4631      	mov	r1, r6
 800e7a4:	4628      	mov	r0, r5
 800e7a6:	47b8      	blx	r7
 800e7a8:	3001      	adds	r0, #1
 800e7aa:	f43f aeae 	beq.w	800e50a <_printf_float+0xb6>
 800e7ae:	f108 0801 	add.w	r8, r8, #1
 800e7b2:	e7ec      	b.n	800e78e <_printf_float+0x33a>
 800e7b4:	4642      	mov	r2, r8
 800e7b6:	4631      	mov	r1, r6
 800e7b8:	4628      	mov	r0, r5
 800e7ba:	47b8      	blx	r7
 800e7bc:	3001      	adds	r0, #1
 800e7be:	d1c2      	bne.n	800e746 <_printf_float+0x2f2>
 800e7c0:	e6a3      	b.n	800e50a <_printf_float+0xb6>
 800e7c2:	2301      	movs	r3, #1
 800e7c4:	4631      	mov	r1, r6
 800e7c6:	4628      	mov	r0, r5
 800e7c8:	9206      	str	r2, [sp, #24]
 800e7ca:	47b8      	blx	r7
 800e7cc:	3001      	adds	r0, #1
 800e7ce:	f43f ae9c 	beq.w	800e50a <_printf_float+0xb6>
 800e7d2:	9a06      	ldr	r2, [sp, #24]
 800e7d4:	f10b 0b01 	add.w	fp, fp, #1
 800e7d8:	e7bb      	b.n	800e752 <_printf_float+0x2fe>
 800e7da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e7de:	4631      	mov	r1, r6
 800e7e0:	4628      	mov	r0, r5
 800e7e2:	47b8      	blx	r7
 800e7e4:	3001      	adds	r0, #1
 800e7e6:	d1c0      	bne.n	800e76a <_printf_float+0x316>
 800e7e8:	e68f      	b.n	800e50a <_printf_float+0xb6>
 800e7ea:	9a06      	ldr	r2, [sp, #24]
 800e7ec:	464b      	mov	r3, r9
 800e7ee:	4442      	add	r2, r8
 800e7f0:	4631      	mov	r1, r6
 800e7f2:	4628      	mov	r0, r5
 800e7f4:	47b8      	blx	r7
 800e7f6:	3001      	adds	r0, #1
 800e7f8:	d1c3      	bne.n	800e782 <_printf_float+0x32e>
 800e7fa:	e686      	b.n	800e50a <_printf_float+0xb6>
 800e7fc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e800:	f1ba 0f01 	cmp.w	sl, #1
 800e804:	dc01      	bgt.n	800e80a <_printf_float+0x3b6>
 800e806:	07db      	lsls	r3, r3, #31
 800e808:	d536      	bpl.n	800e878 <_printf_float+0x424>
 800e80a:	2301      	movs	r3, #1
 800e80c:	4642      	mov	r2, r8
 800e80e:	4631      	mov	r1, r6
 800e810:	4628      	mov	r0, r5
 800e812:	47b8      	blx	r7
 800e814:	3001      	adds	r0, #1
 800e816:	f43f ae78 	beq.w	800e50a <_printf_float+0xb6>
 800e81a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e81e:	4631      	mov	r1, r6
 800e820:	4628      	mov	r0, r5
 800e822:	47b8      	blx	r7
 800e824:	3001      	adds	r0, #1
 800e826:	f43f ae70 	beq.w	800e50a <_printf_float+0xb6>
 800e82a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e82e:	2200      	movs	r2, #0
 800e830:	2300      	movs	r3, #0
 800e832:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e836:	f7f2 f967 	bl	8000b08 <__aeabi_dcmpeq>
 800e83a:	b9c0      	cbnz	r0, 800e86e <_printf_float+0x41a>
 800e83c:	4653      	mov	r3, sl
 800e83e:	f108 0201 	add.w	r2, r8, #1
 800e842:	4631      	mov	r1, r6
 800e844:	4628      	mov	r0, r5
 800e846:	47b8      	blx	r7
 800e848:	3001      	adds	r0, #1
 800e84a:	d10c      	bne.n	800e866 <_printf_float+0x412>
 800e84c:	e65d      	b.n	800e50a <_printf_float+0xb6>
 800e84e:	2301      	movs	r3, #1
 800e850:	465a      	mov	r2, fp
 800e852:	4631      	mov	r1, r6
 800e854:	4628      	mov	r0, r5
 800e856:	47b8      	blx	r7
 800e858:	3001      	adds	r0, #1
 800e85a:	f43f ae56 	beq.w	800e50a <_printf_float+0xb6>
 800e85e:	f108 0801 	add.w	r8, r8, #1
 800e862:	45d0      	cmp	r8, sl
 800e864:	dbf3      	blt.n	800e84e <_printf_float+0x3fa>
 800e866:	464b      	mov	r3, r9
 800e868:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800e86c:	e6df      	b.n	800e62e <_printf_float+0x1da>
 800e86e:	f04f 0800 	mov.w	r8, #0
 800e872:	f104 0b1a 	add.w	fp, r4, #26
 800e876:	e7f4      	b.n	800e862 <_printf_float+0x40e>
 800e878:	2301      	movs	r3, #1
 800e87a:	4642      	mov	r2, r8
 800e87c:	e7e1      	b.n	800e842 <_printf_float+0x3ee>
 800e87e:	2301      	movs	r3, #1
 800e880:	464a      	mov	r2, r9
 800e882:	4631      	mov	r1, r6
 800e884:	4628      	mov	r0, r5
 800e886:	47b8      	blx	r7
 800e888:	3001      	adds	r0, #1
 800e88a:	f43f ae3e 	beq.w	800e50a <_printf_float+0xb6>
 800e88e:	f108 0801 	add.w	r8, r8, #1
 800e892:	68e3      	ldr	r3, [r4, #12]
 800e894:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e896:	1a5b      	subs	r3, r3, r1
 800e898:	4543      	cmp	r3, r8
 800e89a:	dcf0      	bgt.n	800e87e <_printf_float+0x42a>
 800e89c:	e6fc      	b.n	800e698 <_printf_float+0x244>
 800e89e:	f04f 0800 	mov.w	r8, #0
 800e8a2:	f104 0919 	add.w	r9, r4, #25
 800e8a6:	e7f4      	b.n	800e892 <_printf_float+0x43e>

0800e8a8 <_printf_common>:
 800e8a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e8ac:	4616      	mov	r6, r2
 800e8ae:	4698      	mov	r8, r3
 800e8b0:	688a      	ldr	r2, [r1, #8]
 800e8b2:	690b      	ldr	r3, [r1, #16]
 800e8b4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e8b8:	4293      	cmp	r3, r2
 800e8ba:	bfb8      	it	lt
 800e8bc:	4613      	movlt	r3, r2
 800e8be:	6033      	str	r3, [r6, #0]
 800e8c0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e8c4:	4607      	mov	r7, r0
 800e8c6:	460c      	mov	r4, r1
 800e8c8:	b10a      	cbz	r2, 800e8ce <_printf_common+0x26>
 800e8ca:	3301      	adds	r3, #1
 800e8cc:	6033      	str	r3, [r6, #0]
 800e8ce:	6823      	ldr	r3, [r4, #0]
 800e8d0:	0699      	lsls	r1, r3, #26
 800e8d2:	bf42      	ittt	mi
 800e8d4:	6833      	ldrmi	r3, [r6, #0]
 800e8d6:	3302      	addmi	r3, #2
 800e8d8:	6033      	strmi	r3, [r6, #0]
 800e8da:	6825      	ldr	r5, [r4, #0]
 800e8dc:	f015 0506 	ands.w	r5, r5, #6
 800e8e0:	d106      	bne.n	800e8f0 <_printf_common+0x48>
 800e8e2:	f104 0a19 	add.w	sl, r4, #25
 800e8e6:	68e3      	ldr	r3, [r4, #12]
 800e8e8:	6832      	ldr	r2, [r6, #0]
 800e8ea:	1a9b      	subs	r3, r3, r2
 800e8ec:	42ab      	cmp	r3, r5
 800e8ee:	dc26      	bgt.n	800e93e <_printf_common+0x96>
 800e8f0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e8f4:	6822      	ldr	r2, [r4, #0]
 800e8f6:	3b00      	subs	r3, #0
 800e8f8:	bf18      	it	ne
 800e8fa:	2301      	movne	r3, #1
 800e8fc:	0692      	lsls	r2, r2, #26
 800e8fe:	d42b      	bmi.n	800e958 <_printf_common+0xb0>
 800e900:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e904:	4641      	mov	r1, r8
 800e906:	4638      	mov	r0, r7
 800e908:	47c8      	blx	r9
 800e90a:	3001      	adds	r0, #1
 800e90c:	d01e      	beq.n	800e94c <_printf_common+0xa4>
 800e90e:	6823      	ldr	r3, [r4, #0]
 800e910:	6922      	ldr	r2, [r4, #16]
 800e912:	f003 0306 	and.w	r3, r3, #6
 800e916:	2b04      	cmp	r3, #4
 800e918:	bf02      	ittt	eq
 800e91a:	68e5      	ldreq	r5, [r4, #12]
 800e91c:	6833      	ldreq	r3, [r6, #0]
 800e91e:	1aed      	subeq	r5, r5, r3
 800e920:	68a3      	ldr	r3, [r4, #8]
 800e922:	bf0c      	ite	eq
 800e924:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e928:	2500      	movne	r5, #0
 800e92a:	4293      	cmp	r3, r2
 800e92c:	bfc4      	itt	gt
 800e92e:	1a9b      	subgt	r3, r3, r2
 800e930:	18ed      	addgt	r5, r5, r3
 800e932:	2600      	movs	r6, #0
 800e934:	341a      	adds	r4, #26
 800e936:	42b5      	cmp	r5, r6
 800e938:	d11a      	bne.n	800e970 <_printf_common+0xc8>
 800e93a:	2000      	movs	r0, #0
 800e93c:	e008      	b.n	800e950 <_printf_common+0xa8>
 800e93e:	2301      	movs	r3, #1
 800e940:	4652      	mov	r2, sl
 800e942:	4641      	mov	r1, r8
 800e944:	4638      	mov	r0, r7
 800e946:	47c8      	blx	r9
 800e948:	3001      	adds	r0, #1
 800e94a:	d103      	bne.n	800e954 <_printf_common+0xac>
 800e94c:	f04f 30ff 	mov.w	r0, #4294967295
 800e950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e954:	3501      	adds	r5, #1
 800e956:	e7c6      	b.n	800e8e6 <_printf_common+0x3e>
 800e958:	18e1      	adds	r1, r4, r3
 800e95a:	1c5a      	adds	r2, r3, #1
 800e95c:	2030      	movs	r0, #48	@ 0x30
 800e95e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e962:	4422      	add	r2, r4
 800e964:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e968:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e96c:	3302      	adds	r3, #2
 800e96e:	e7c7      	b.n	800e900 <_printf_common+0x58>
 800e970:	2301      	movs	r3, #1
 800e972:	4622      	mov	r2, r4
 800e974:	4641      	mov	r1, r8
 800e976:	4638      	mov	r0, r7
 800e978:	47c8      	blx	r9
 800e97a:	3001      	adds	r0, #1
 800e97c:	d0e6      	beq.n	800e94c <_printf_common+0xa4>
 800e97e:	3601      	adds	r6, #1
 800e980:	e7d9      	b.n	800e936 <_printf_common+0x8e>
	...

0800e984 <_printf_i>:
 800e984:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e988:	7e0f      	ldrb	r7, [r1, #24]
 800e98a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e98c:	2f78      	cmp	r7, #120	@ 0x78
 800e98e:	4691      	mov	r9, r2
 800e990:	4680      	mov	r8, r0
 800e992:	460c      	mov	r4, r1
 800e994:	469a      	mov	sl, r3
 800e996:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e99a:	d807      	bhi.n	800e9ac <_printf_i+0x28>
 800e99c:	2f62      	cmp	r7, #98	@ 0x62
 800e99e:	d80a      	bhi.n	800e9b6 <_printf_i+0x32>
 800e9a0:	2f00      	cmp	r7, #0
 800e9a2:	f000 80d2 	beq.w	800eb4a <_printf_i+0x1c6>
 800e9a6:	2f58      	cmp	r7, #88	@ 0x58
 800e9a8:	f000 80b9 	beq.w	800eb1e <_printf_i+0x19a>
 800e9ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e9b0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e9b4:	e03a      	b.n	800ea2c <_printf_i+0xa8>
 800e9b6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e9ba:	2b15      	cmp	r3, #21
 800e9bc:	d8f6      	bhi.n	800e9ac <_printf_i+0x28>
 800e9be:	a101      	add	r1, pc, #4	@ (adr r1, 800e9c4 <_printf_i+0x40>)
 800e9c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e9c4:	0800ea1d 	.word	0x0800ea1d
 800e9c8:	0800ea31 	.word	0x0800ea31
 800e9cc:	0800e9ad 	.word	0x0800e9ad
 800e9d0:	0800e9ad 	.word	0x0800e9ad
 800e9d4:	0800e9ad 	.word	0x0800e9ad
 800e9d8:	0800e9ad 	.word	0x0800e9ad
 800e9dc:	0800ea31 	.word	0x0800ea31
 800e9e0:	0800e9ad 	.word	0x0800e9ad
 800e9e4:	0800e9ad 	.word	0x0800e9ad
 800e9e8:	0800e9ad 	.word	0x0800e9ad
 800e9ec:	0800e9ad 	.word	0x0800e9ad
 800e9f0:	0800eb31 	.word	0x0800eb31
 800e9f4:	0800ea5b 	.word	0x0800ea5b
 800e9f8:	0800eaeb 	.word	0x0800eaeb
 800e9fc:	0800e9ad 	.word	0x0800e9ad
 800ea00:	0800e9ad 	.word	0x0800e9ad
 800ea04:	0800eb53 	.word	0x0800eb53
 800ea08:	0800e9ad 	.word	0x0800e9ad
 800ea0c:	0800ea5b 	.word	0x0800ea5b
 800ea10:	0800e9ad 	.word	0x0800e9ad
 800ea14:	0800e9ad 	.word	0x0800e9ad
 800ea18:	0800eaf3 	.word	0x0800eaf3
 800ea1c:	6833      	ldr	r3, [r6, #0]
 800ea1e:	1d1a      	adds	r2, r3, #4
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	6032      	str	r2, [r6, #0]
 800ea24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ea28:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ea2c:	2301      	movs	r3, #1
 800ea2e:	e09d      	b.n	800eb6c <_printf_i+0x1e8>
 800ea30:	6833      	ldr	r3, [r6, #0]
 800ea32:	6820      	ldr	r0, [r4, #0]
 800ea34:	1d19      	adds	r1, r3, #4
 800ea36:	6031      	str	r1, [r6, #0]
 800ea38:	0606      	lsls	r6, r0, #24
 800ea3a:	d501      	bpl.n	800ea40 <_printf_i+0xbc>
 800ea3c:	681d      	ldr	r5, [r3, #0]
 800ea3e:	e003      	b.n	800ea48 <_printf_i+0xc4>
 800ea40:	0645      	lsls	r5, r0, #25
 800ea42:	d5fb      	bpl.n	800ea3c <_printf_i+0xb8>
 800ea44:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ea48:	2d00      	cmp	r5, #0
 800ea4a:	da03      	bge.n	800ea54 <_printf_i+0xd0>
 800ea4c:	232d      	movs	r3, #45	@ 0x2d
 800ea4e:	426d      	negs	r5, r5
 800ea50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ea54:	4859      	ldr	r0, [pc, #356]	@ (800ebbc <_printf_i+0x238>)
 800ea56:	230a      	movs	r3, #10
 800ea58:	e011      	b.n	800ea7e <_printf_i+0xfa>
 800ea5a:	6821      	ldr	r1, [r4, #0]
 800ea5c:	6833      	ldr	r3, [r6, #0]
 800ea5e:	0608      	lsls	r0, r1, #24
 800ea60:	f853 5b04 	ldr.w	r5, [r3], #4
 800ea64:	d402      	bmi.n	800ea6c <_printf_i+0xe8>
 800ea66:	0649      	lsls	r1, r1, #25
 800ea68:	bf48      	it	mi
 800ea6a:	b2ad      	uxthmi	r5, r5
 800ea6c:	2f6f      	cmp	r7, #111	@ 0x6f
 800ea6e:	4853      	ldr	r0, [pc, #332]	@ (800ebbc <_printf_i+0x238>)
 800ea70:	6033      	str	r3, [r6, #0]
 800ea72:	bf14      	ite	ne
 800ea74:	230a      	movne	r3, #10
 800ea76:	2308      	moveq	r3, #8
 800ea78:	2100      	movs	r1, #0
 800ea7a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ea7e:	6866      	ldr	r6, [r4, #4]
 800ea80:	60a6      	str	r6, [r4, #8]
 800ea82:	2e00      	cmp	r6, #0
 800ea84:	bfa2      	ittt	ge
 800ea86:	6821      	ldrge	r1, [r4, #0]
 800ea88:	f021 0104 	bicge.w	r1, r1, #4
 800ea8c:	6021      	strge	r1, [r4, #0]
 800ea8e:	b90d      	cbnz	r5, 800ea94 <_printf_i+0x110>
 800ea90:	2e00      	cmp	r6, #0
 800ea92:	d04b      	beq.n	800eb2c <_printf_i+0x1a8>
 800ea94:	4616      	mov	r6, r2
 800ea96:	fbb5 f1f3 	udiv	r1, r5, r3
 800ea9a:	fb03 5711 	mls	r7, r3, r1, r5
 800ea9e:	5dc7      	ldrb	r7, [r0, r7]
 800eaa0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800eaa4:	462f      	mov	r7, r5
 800eaa6:	42bb      	cmp	r3, r7
 800eaa8:	460d      	mov	r5, r1
 800eaaa:	d9f4      	bls.n	800ea96 <_printf_i+0x112>
 800eaac:	2b08      	cmp	r3, #8
 800eaae:	d10b      	bne.n	800eac8 <_printf_i+0x144>
 800eab0:	6823      	ldr	r3, [r4, #0]
 800eab2:	07df      	lsls	r7, r3, #31
 800eab4:	d508      	bpl.n	800eac8 <_printf_i+0x144>
 800eab6:	6923      	ldr	r3, [r4, #16]
 800eab8:	6861      	ldr	r1, [r4, #4]
 800eaba:	4299      	cmp	r1, r3
 800eabc:	bfde      	ittt	le
 800eabe:	2330      	movle	r3, #48	@ 0x30
 800eac0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800eac4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800eac8:	1b92      	subs	r2, r2, r6
 800eaca:	6122      	str	r2, [r4, #16]
 800eacc:	f8cd a000 	str.w	sl, [sp]
 800ead0:	464b      	mov	r3, r9
 800ead2:	aa03      	add	r2, sp, #12
 800ead4:	4621      	mov	r1, r4
 800ead6:	4640      	mov	r0, r8
 800ead8:	f7ff fee6 	bl	800e8a8 <_printf_common>
 800eadc:	3001      	adds	r0, #1
 800eade:	d14a      	bne.n	800eb76 <_printf_i+0x1f2>
 800eae0:	f04f 30ff 	mov.w	r0, #4294967295
 800eae4:	b004      	add	sp, #16
 800eae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eaea:	6823      	ldr	r3, [r4, #0]
 800eaec:	f043 0320 	orr.w	r3, r3, #32
 800eaf0:	6023      	str	r3, [r4, #0]
 800eaf2:	4833      	ldr	r0, [pc, #204]	@ (800ebc0 <_printf_i+0x23c>)
 800eaf4:	2778      	movs	r7, #120	@ 0x78
 800eaf6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800eafa:	6823      	ldr	r3, [r4, #0]
 800eafc:	6831      	ldr	r1, [r6, #0]
 800eafe:	061f      	lsls	r7, r3, #24
 800eb00:	f851 5b04 	ldr.w	r5, [r1], #4
 800eb04:	d402      	bmi.n	800eb0c <_printf_i+0x188>
 800eb06:	065f      	lsls	r7, r3, #25
 800eb08:	bf48      	it	mi
 800eb0a:	b2ad      	uxthmi	r5, r5
 800eb0c:	6031      	str	r1, [r6, #0]
 800eb0e:	07d9      	lsls	r1, r3, #31
 800eb10:	bf44      	itt	mi
 800eb12:	f043 0320 	orrmi.w	r3, r3, #32
 800eb16:	6023      	strmi	r3, [r4, #0]
 800eb18:	b11d      	cbz	r5, 800eb22 <_printf_i+0x19e>
 800eb1a:	2310      	movs	r3, #16
 800eb1c:	e7ac      	b.n	800ea78 <_printf_i+0xf4>
 800eb1e:	4827      	ldr	r0, [pc, #156]	@ (800ebbc <_printf_i+0x238>)
 800eb20:	e7e9      	b.n	800eaf6 <_printf_i+0x172>
 800eb22:	6823      	ldr	r3, [r4, #0]
 800eb24:	f023 0320 	bic.w	r3, r3, #32
 800eb28:	6023      	str	r3, [r4, #0]
 800eb2a:	e7f6      	b.n	800eb1a <_printf_i+0x196>
 800eb2c:	4616      	mov	r6, r2
 800eb2e:	e7bd      	b.n	800eaac <_printf_i+0x128>
 800eb30:	6833      	ldr	r3, [r6, #0]
 800eb32:	6825      	ldr	r5, [r4, #0]
 800eb34:	6961      	ldr	r1, [r4, #20]
 800eb36:	1d18      	adds	r0, r3, #4
 800eb38:	6030      	str	r0, [r6, #0]
 800eb3a:	062e      	lsls	r6, r5, #24
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	d501      	bpl.n	800eb44 <_printf_i+0x1c0>
 800eb40:	6019      	str	r1, [r3, #0]
 800eb42:	e002      	b.n	800eb4a <_printf_i+0x1c6>
 800eb44:	0668      	lsls	r0, r5, #25
 800eb46:	d5fb      	bpl.n	800eb40 <_printf_i+0x1bc>
 800eb48:	8019      	strh	r1, [r3, #0]
 800eb4a:	2300      	movs	r3, #0
 800eb4c:	6123      	str	r3, [r4, #16]
 800eb4e:	4616      	mov	r6, r2
 800eb50:	e7bc      	b.n	800eacc <_printf_i+0x148>
 800eb52:	6833      	ldr	r3, [r6, #0]
 800eb54:	1d1a      	adds	r2, r3, #4
 800eb56:	6032      	str	r2, [r6, #0]
 800eb58:	681e      	ldr	r6, [r3, #0]
 800eb5a:	6862      	ldr	r2, [r4, #4]
 800eb5c:	2100      	movs	r1, #0
 800eb5e:	4630      	mov	r0, r6
 800eb60:	f7f1 fb56 	bl	8000210 <memchr>
 800eb64:	b108      	cbz	r0, 800eb6a <_printf_i+0x1e6>
 800eb66:	1b80      	subs	r0, r0, r6
 800eb68:	6060      	str	r0, [r4, #4]
 800eb6a:	6863      	ldr	r3, [r4, #4]
 800eb6c:	6123      	str	r3, [r4, #16]
 800eb6e:	2300      	movs	r3, #0
 800eb70:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800eb74:	e7aa      	b.n	800eacc <_printf_i+0x148>
 800eb76:	6923      	ldr	r3, [r4, #16]
 800eb78:	4632      	mov	r2, r6
 800eb7a:	4649      	mov	r1, r9
 800eb7c:	4640      	mov	r0, r8
 800eb7e:	47d0      	blx	sl
 800eb80:	3001      	adds	r0, #1
 800eb82:	d0ad      	beq.n	800eae0 <_printf_i+0x15c>
 800eb84:	6823      	ldr	r3, [r4, #0]
 800eb86:	079b      	lsls	r3, r3, #30
 800eb88:	d413      	bmi.n	800ebb2 <_printf_i+0x22e>
 800eb8a:	68e0      	ldr	r0, [r4, #12]
 800eb8c:	9b03      	ldr	r3, [sp, #12]
 800eb8e:	4298      	cmp	r0, r3
 800eb90:	bfb8      	it	lt
 800eb92:	4618      	movlt	r0, r3
 800eb94:	e7a6      	b.n	800eae4 <_printf_i+0x160>
 800eb96:	2301      	movs	r3, #1
 800eb98:	4632      	mov	r2, r6
 800eb9a:	4649      	mov	r1, r9
 800eb9c:	4640      	mov	r0, r8
 800eb9e:	47d0      	blx	sl
 800eba0:	3001      	adds	r0, #1
 800eba2:	d09d      	beq.n	800eae0 <_printf_i+0x15c>
 800eba4:	3501      	adds	r5, #1
 800eba6:	68e3      	ldr	r3, [r4, #12]
 800eba8:	9903      	ldr	r1, [sp, #12]
 800ebaa:	1a5b      	subs	r3, r3, r1
 800ebac:	42ab      	cmp	r3, r5
 800ebae:	dcf2      	bgt.n	800eb96 <_printf_i+0x212>
 800ebb0:	e7eb      	b.n	800eb8a <_printf_i+0x206>
 800ebb2:	2500      	movs	r5, #0
 800ebb4:	f104 0619 	add.w	r6, r4, #25
 800ebb8:	e7f5      	b.n	800eba6 <_printf_i+0x222>
 800ebba:	bf00      	nop
 800ebbc:	0801109c 	.word	0x0801109c
 800ebc0:	080110ad 	.word	0x080110ad

0800ebc4 <std>:
 800ebc4:	2300      	movs	r3, #0
 800ebc6:	b510      	push	{r4, lr}
 800ebc8:	4604      	mov	r4, r0
 800ebca:	e9c0 3300 	strd	r3, r3, [r0]
 800ebce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ebd2:	6083      	str	r3, [r0, #8]
 800ebd4:	8181      	strh	r1, [r0, #12]
 800ebd6:	6643      	str	r3, [r0, #100]	@ 0x64
 800ebd8:	81c2      	strh	r2, [r0, #14]
 800ebda:	6183      	str	r3, [r0, #24]
 800ebdc:	4619      	mov	r1, r3
 800ebde:	2208      	movs	r2, #8
 800ebe0:	305c      	adds	r0, #92	@ 0x5c
 800ebe2:	f000 f9f9 	bl	800efd8 <memset>
 800ebe6:	4b0d      	ldr	r3, [pc, #52]	@ (800ec1c <std+0x58>)
 800ebe8:	6263      	str	r3, [r4, #36]	@ 0x24
 800ebea:	4b0d      	ldr	r3, [pc, #52]	@ (800ec20 <std+0x5c>)
 800ebec:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ebee:	4b0d      	ldr	r3, [pc, #52]	@ (800ec24 <std+0x60>)
 800ebf0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ebf2:	4b0d      	ldr	r3, [pc, #52]	@ (800ec28 <std+0x64>)
 800ebf4:	6323      	str	r3, [r4, #48]	@ 0x30
 800ebf6:	4b0d      	ldr	r3, [pc, #52]	@ (800ec2c <std+0x68>)
 800ebf8:	6224      	str	r4, [r4, #32]
 800ebfa:	429c      	cmp	r4, r3
 800ebfc:	d006      	beq.n	800ec0c <std+0x48>
 800ebfe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ec02:	4294      	cmp	r4, r2
 800ec04:	d002      	beq.n	800ec0c <std+0x48>
 800ec06:	33d0      	adds	r3, #208	@ 0xd0
 800ec08:	429c      	cmp	r4, r3
 800ec0a:	d105      	bne.n	800ec18 <std+0x54>
 800ec0c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ec10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ec14:	f000 ba6c 	b.w	800f0f0 <__retarget_lock_init_recursive>
 800ec18:	bd10      	pop	{r4, pc}
 800ec1a:	bf00      	nop
 800ec1c:	0800ee29 	.word	0x0800ee29
 800ec20:	0800ee4b 	.word	0x0800ee4b
 800ec24:	0800ee83 	.word	0x0800ee83
 800ec28:	0800eea7 	.word	0x0800eea7
 800ec2c:	20005630 	.word	0x20005630

0800ec30 <stdio_exit_handler>:
 800ec30:	4a02      	ldr	r2, [pc, #8]	@ (800ec3c <stdio_exit_handler+0xc>)
 800ec32:	4903      	ldr	r1, [pc, #12]	@ (800ec40 <stdio_exit_handler+0x10>)
 800ec34:	4803      	ldr	r0, [pc, #12]	@ (800ec44 <stdio_exit_handler+0x14>)
 800ec36:	f000 b869 	b.w	800ed0c <_fwalk_sglue>
 800ec3a:	bf00      	nop
 800ec3c:	2000004c 	.word	0x2000004c
 800ec40:	080108d5 	.word	0x080108d5
 800ec44:	2000005c 	.word	0x2000005c

0800ec48 <cleanup_stdio>:
 800ec48:	6841      	ldr	r1, [r0, #4]
 800ec4a:	4b0c      	ldr	r3, [pc, #48]	@ (800ec7c <cleanup_stdio+0x34>)
 800ec4c:	4299      	cmp	r1, r3
 800ec4e:	b510      	push	{r4, lr}
 800ec50:	4604      	mov	r4, r0
 800ec52:	d001      	beq.n	800ec58 <cleanup_stdio+0x10>
 800ec54:	f001 fe3e 	bl	80108d4 <_fflush_r>
 800ec58:	68a1      	ldr	r1, [r4, #8]
 800ec5a:	4b09      	ldr	r3, [pc, #36]	@ (800ec80 <cleanup_stdio+0x38>)
 800ec5c:	4299      	cmp	r1, r3
 800ec5e:	d002      	beq.n	800ec66 <cleanup_stdio+0x1e>
 800ec60:	4620      	mov	r0, r4
 800ec62:	f001 fe37 	bl	80108d4 <_fflush_r>
 800ec66:	68e1      	ldr	r1, [r4, #12]
 800ec68:	4b06      	ldr	r3, [pc, #24]	@ (800ec84 <cleanup_stdio+0x3c>)
 800ec6a:	4299      	cmp	r1, r3
 800ec6c:	d004      	beq.n	800ec78 <cleanup_stdio+0x30>
 800ec6e:	4620      	mov	r0, r4
 800ec70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ec74:	f001 be2e 	b.w	80108d4 <_fflush_r>
 800ec78:	bd10      	pop	{r4, pc}
 800ec7a:	bf00      	nop
 800ec7c:	20005630 	.word	0x20005630
 800ec80:	20005698 	.word	0x20005698
 800ec84:	20005700 	.word	0x20005700

0800ec88 <global_stdio_init.part.0>:
 800ec88:	b510      	push	{r4, lr}
 800ec8a:	4b0b      	ldr	r3, [pc, #44]	@ (800ecb8 <global_stdio_init.part.0+0x30>)
 800ec8c:	4c0b      	ldr	r4, [pc, #44]	@ (800ecbc <global_stdio_init.part.0+0x34>)
 800ec8e:	4a0c      	ldr	r2, [pc, #48]	@ (800ecc0 <global_stdio_init.part.0+0x38>)
 800ec90:	601a      	str	r2, [r3, #0]
 800ec92:	4620      	mov	r0, r4
 800ec94:	2200      	movs	r2, #0
 800ec96:	2104      	movs	r1, #4
 800ec98:	f7ff ff94 	bl	800ebc4 <std>
 800ec9c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800eca0:	2201      	movs	r2, #1
 800eca2:	2109      	movs	r1, #9
 800eca4:	f7ff ff8e 	bl	800ebc4 <std>
 800eca8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ecac:	2202      	movs	r2, #2
 800ecae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ecb2:	2112      	movs	r1, #18
 800ecb4:	f7ff bf86 	b.w	800ebc4 <std>
 800ecb8:	20005768 	.word	0x20005768
 800ecbc:	20005630 	.word	0x20005630
 800ecc0:	0800ec31 	.word	0x0800ec31

0800ecc4 <__sfp_lock_acquire>:
 800ecc4:	4801      	ldr	r0, [pc, #4]	@ (800eccc <__sfp_lock_acquire+0x8>)
 800ecc6:	f000 ba14 	b.w	800f0f2 <__retarget_lock_acquire_recursive>
 800ecca:	bf00      	nop
 800eccc:	20005771 	.word	0x20005771

0800ecd0 <__sfp_lock_release>:
 800ecd0:	4801      	ldr	r0, [pc, #4]	@ (800ecd8 <__sfp_lock_release+0x8>)
 800ecd2:	f000 ba0f 	b.w	800f0f4 <__retarget_lock_release_recursive>
 800ecd6:	bf00      	nop
 800ecd8:	20005771 	.word	0x20005771

0800ecdc <__sinit>:
 800ecdc:	b510      	push	{r4, lr}
 800ecde:	4604      	mov	r4, r0
 800ece0:	f7ff fff0 	bl	800ecc4 <__sfp_lock_acquire>
 800ece4:	6a23      	ldr	r3, [r4, #32]
 800ece6:	b11b      	cbz	r3, 800ecf0 <__sinit+0x14>
 800ece8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ecec:	f7ff bff0 	b.w	800ecd0 <__sfp_lock_release>
 800ecf0:	4b04      	ldr	r3, [pc, #16]	@ (800ed04 <__sinit+0x28>)
 800ecf2:	6223      	str	r3, [r4, #32]
 800ecf4:	4b04      	ldr	r3, [pc, #16]	@ (800ed08 <__sinit+0x2c>)
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d1f5      	bne.n	800ece8 <__sinit+0xc>
 800ecfc:	f7ff ffc4 	bl	800ec88 <global_stdio_init.part.0>
 800ed00:	e7f2      	b.n	800ece8 <__sinit+0xc>
 800ed02:	bf00      	nop
 800ed04:	0800ec49 	.word	0x0800ec49
 800ed08:	20005768 	.word	0x20005768

0800ed0c <_fwalk_sglue>:
 800ed0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed10:	4607      	mov	r7, r0
 800ed12:	4688      	mov	r8, r1
 800ed14:	4614      	mov	r4, r2
 800ed16:	2600      	movs	r6, #0
 800ed18:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ed1c:	f1b9 0901 	subs.w	r9, r9, #1
 800ed20:	d505      	bpl.n	800ed2e <_fwalk_sglue+0x22>
 800ed22:	6824      	ldr	r4, [r4, #0]
 800ed24:	2c00      	cmp	r4, #0
 800ed26:	d1f7      	bne.n	800ed18 <_fwalk_sglue+0xc>
 800ed28:	4630      	mov	r0, r6
 800ed2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed2e:	89ab      	ldrh	r3, [r5, #12]
 800ed30:	2b01      	cmp	r3, #1
 800ed32:	d907      	bls.n	800ed44 <_fwalk_sglue+0x38>
 800ed34:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ed38:	3301      	adds	r3, #1
 800ed3a:	d003      	beq.n	800ed44 <_fwalk_sglue+0x38>
 800ed3c:	4629      	mov	r1, r5
 800ed3e:	4638      	mov	r0, r7
 800ed40:	47c0      	blx	r8
 800ed42:	4306      	orrs	r6, r0
 800ed44:	3568      	adds	r5, #104	@ 0x68
 800ed46:	e7e9      	b.n	800ed1c <_fwalk_sglue+0x10>

0800ed48 <iprintf>:
 800ed48:	b40f      	push	{r0, r1, r2, r3}
 800ed4a:	b507      	push	{r0, r1, r2, lr}
 800ed4c:	4906      	ldr	r1, [pc, #24]	@ (800ed68 <iprintf+0x20>)
 800ed4e:	ab04      	add	r3, sp, #16
 800ed50:	6808      	ldr	r0, [r1, #0]
 800ed52:	f853 2b04 	ldr.w	r2, [r3], #4
 800ed56:	6881      	ldr	r1, [r0, #8]
 800ed58:	9301      	str	r3, [sp, #4]
 800ed5a:	f001 fc1f 	bl	801059c <_vfiprintf_r>
 800ed5e:	b003      	add	sp, #12
 800ed60:	f85d eb04 	ldr.w	lr, [sp], #4
 800ed64:	b004      	add	sp, #16
 800ed66:	4770      	bx	lr
 800ed68:	20000058 	.word	0x20000058

0800ed6c <_puts_r>:
 800ed6c:	6a03      	ldr	r3, [r0, #32]
 800ed6e:	b570      	push	{r4, r5, r6, lr}
 800ed70:	6884      	ldr	r4, [r0, #8]
 800ed72:	4605      	mov	r5, r0
 800ed74:	460e      	mov	r6, r1
 800ed76:	b90b      	cbnz	r3, 800ed7c <_puts_r+0x10>
 800ed78:	f7ff ffb0 	bl	800ecdc <__sinit>
 800ed7c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ed7e:	07db      	lsls	r3, r3, #31
 800ed80:	d405      	bmi.n	800ed8e <_puts_r+0x22>
 800ed82:	89a3      	ldrh	r3, [r4, #12]
 800ed84:	0598      	lsls	r0, r3, #22
 800ed86:	d402      	bmi.n	800ed8e <_puts_r+0x22>
 800ed88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ed8a:	f000 f9b2 	bl	800f0f2 <__retarget_lock_acquire_recursive>
 800ed8e:	89a3      	ldrh	r3, [r4, #12]
 800ed90:	0719      	lsls	r1, r3, #28
 800ed92:	d502      	bpl.n	800ed9a <_puts_r+0x2e>
 800ed94:	6923      	ldr	r3, [r4, #16]
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d135      	bne.n	800ee06 <_puts_r+0x9a>
 800ed9a:	4621      	mov	r1, r4
 800ed9c:	4628      	mov	r0, r5
 800ed9e:	f000 f8c5 	bl	800ef2c <__swsetup_r>
 800eda2:	b380      	cbz	r0, 800ee06 <_puts_r+0x9a>
 800eda4:	f04f 35ff 	mov.w	r5, #4294967295
 800eda8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800edaa:	07da      	lsls	r2, r3, #31
 800edac:	d405      	bmi.n	800edba <_puts_r+0x4e>
 800edae:	89a3      	ldrh	r3, [r4, #12]
 800edb0:	059b      	lsls	r3, r3, #22
 800edb2:	d402      	bmi.n	800edba <_puts_r+0x4e>
 800edb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800edb6:	f000 f99d 	bl	800f0f4 <__retarget_lock_release_recursive>
 800edba:	4628      	mov	r0, r5
 800edbc:	bd70      	pop	{r4, r5, r6, pc}
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	da04      	bge.n	800edcc <_puts_r+0x60>
 800edc2:	69a2      	ldr	r2, [r4, #24]
 800edc4:	429a      	cmp	r2, r3
 800edc6:	dc17      	bgt.n	800edf8 <_puts_r+0x8c>
 800edc8:	290a      	cmp	r1, #10
 800edca:	d015      	beq.n	800edf8 <_puts_r+0x8c>
 800edcc:	6823      	ldr	r3, [r4, #0]
 800edce:	1c5a      	adds	r2, r3, #1
 800edd0:	6022      	str	r2, [r4, #0]
 800edd2:	7019      	strb	r1, [r3, #0]
 800edd4:	68a3      	ldr	r3, [r4, #8]
 800edd6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800edda:	3b01      	subs	r3, #1
 800eddc:	60a3      	str	r3, [r4, #8]
 800edde:	2900      	cmp	r1, #0
 800ede0:	d1ed      	bne.n	800edbe <_puts_r+0x52>
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	da11      	bge.n	800ee0a <_puts_r+0x9e>
 800ede6:	4622      	mov	r2, r4
 800ede8:	210a      	movs	r1, #10
 800edea:	4628      	mov	r0, r5
 800edec:	f000 f85f 	bl	800eeae <__swbuf_r>
 800edf0:	3001      	adds	r0, #1
 800edf2:	d0d7      	beq.n	800eda4 <_puts_r+0x38>
 800edf4:	250a      	movs	r5, #10
 800edf6:	e7d7      	b.n	800eda8 <_puts_r+0x3c>
 800edf8:	4622      	mov	r2, r4
 800edfa:	4628      	mov	r0, r5
 800edfc:	f000 f857 	bl	800eeae <__swbuf_r>
 800ee00:	3001      	adds	r0, #1
 800ee02:	d1e7      	bne.n	800edd4 <_puts_r+0x68>
 800ee04:	e7ce      	b.n	800eda4 <_puts_r+0x38>
 800ee06:	3e01      	subs	r6, #1
 800ee08:	e7e4      	b.n	800edd4 <_puts_r+0x68>
 800ee0a:	6823      	ldr	r3, [r4, #0]
 800ee0c:	1c5a      	adds	r2, r3, #1
 800ee0e:	6022      	str	r2, [r4, #0]
 800ee10:	220a      	movs	r2, #10
 800ee12:	701a      	strb	r2, [r3, #0]
 800ee14:	e7ee      	b.n	800edf4 <_puts_r+0x88>
	...

0800ee18 <puts>:
 800ee18:	4b02      	ldr	r3, [pc, #8]	@ (800ee24 <puts+0xc>)
 800ee1a:	4601      	mov	r1, r0
 800ee1c:	6818      	ldr	r0, [r3, #0]
 800ee1e:	f7ff bfa5 	b.w	800ed6c <_puts_r>
 800ee22:	bf00      	nop
 800ee24:	20000058 	.word	0x20000058

0800ee28 <__sread>:
 800ee28:	b510      	push	{r4, lr}
 800ee2a:	460c      	mov	r4, r1
 800ee2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee30:	f000 f900 	bl	800f034 <_read_r>
 800ee34:	2800      	cmp	r0, #0
 800ee36:	bfab      	itete	ge
 800ee38:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ee3a:	89a3      	ldrhlt	r3, [r4, #12]
 800ee3c:	181b      	addge	r3, r3, r0
 800ee3e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ee42:	bfac      	ite	ge
 800ee44:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ee46:	81a3      	strhlt	r3, [r4, #12]
 800ee48:	bd10      	pop	{r4, pc}

0800ee4a <__swrite>:
 800ee4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee4e:	461f      	mov	r7, r3
 800ee50:	898b      	ldrh	r3, [r1, #12]
 800ee52:	05db      	lsls	r3, r3, #23
 800ee54:	4605      	mov	r5, r0
 800ee56:	460c      	mov	r4, r1
 800ee58:	4616      	mov	r6, r2
 800ee5a:	d505      	bpl.n	800ee68 <__swrite+0x1e>
 800ee5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee60:	2302      	movs	r3, #2
 800ee62:	2200      	movs	r2, #0
 800ee64:	f000 f8d4 	bl	800f010 <_lseek_r>
 800ee68:	89a3      	ldrh	r3, [r4, #12]
 800ee6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ee6e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ee72:	81a3      	strh	r3, [r4, #12]
 800ee74:	4632      	mov	r2, r6
 800ee76:	463b      	mov	r3, r7
 800ee78:	4628      	mov	r0, r5
 800ee7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ee7e:	f000 b8fb 	b.w	800f078 <_write_r>

0800ee82 <__sseek>:
 800ee82:	b510      	push	{r4, lr}
 800ee84:	460c      	mov	r4, r1
 800ee86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee8a:	f000 f8c1 	bl	800f010 <_lseek_r>
 800ee8e:	1c43      	adds	r3, r0, #1
 800ee90:	89a3      	ldrh	r3, [r4, #12]
 800ee92:	bf15      	itete	ne
 800ee94:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ee96:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ee9a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ee9e:	81a3      	strheq	r3, [r4, #12]
 800eea0:	bf18      	it	ne
 800eea2:	81a3      	strhne	r3, [r4, #12]
 800eea4:	bd10      	pop	{r4, pc}

0800eea6 <__sclose>:
 800eea6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eeaa:	f000 b8a1 	b.w	800eff0 <_close_r>

0800eeae <__swbuf_r>:
 800eeae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eeb0:	460e      	mov	r6, r1
 800eeb2:	4614      	mov	r4, r2
 800eeb4:	4605      	mov	r5, r0
 800eeb6:	b118      	cbz	r0, 800eec0 <__swbuf_r+0x12>
 800eeb8:	6a03      	ldr	r3, [r0, #32]
 800eeba:	b90b      	cbnz	r3, 800eec0 <__swbuf_r+0x12>
 800eebc:	f7ff ff0e 	bl	800ecdc <__sinit>
 800eec0:	69a3      	ldr	r3, [r4, #24]
 800eec2:	60a3      	str	r3, [r4, #8]
 800eec4:	89a3      	ldrh	r3, [r4, #12]
 800eec6:	071a      	lsls	r2, r3, #28
 800eec8:	d501      	bpl.n	800eece <__swbuf_r+0x20>
 800eeca:	6923      	ldr	r3, [r4, #16]
 800eecc:	b943      	cbnz	r3, 800eee0 <__swbuf_r+0x32>
 800eece:	4621      	mov	r1, r4
 800eed0:	4628      	mov	r0, r5
 800eed2:	f000 f82b 	bl	800ef2c <__swsetup_r>
 800eed6:	b118      	cbz	r0, 800eee0 <__swbuf_r+0x32>
 800eed8:	f04f 37ff 	mov.w	r7, #4294967295
 800eedc:	4638      	mov	r0, r7
 800eede:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eee0:	6823      	ldr	r3, [r4, #0]
 800eee2:	6922      	ldr	r2, [r4, #16]
 800eee4:	1a98      	subs	r0, r3, r2
 800eee6:	6963      	ldr	r3, [r4, #20]
 800eee8:	b2f6      	uxtb	r6, r6
 800eeea:	4283      	cmp	r3, r0
 800eeec:	4637      	mov	r7, r6
 800eeee:	dc05      	bgt.n	800eefc <__swbuf_r+0x4e>
 800eef0:	4621      	mov	r1, r4
 800eef2:	4628      	mov	r0, r5
 800eef4:	f001 fcee 	bl	80108d4 <_fflush_r>
 800eef8:	2800      	cmp	r0, #0
 800eefa:	d1ed      	bne.n	800eed8 <__swbuf_r+0x2a>
 800eefc:	68a3      	ldr	r3, [r4, #8]
 800eefe:	3b01      	subs	r3, #1
 800ef00:	60a3      	str	r3, [r4, #8]
 800ef02:	6823      	ldr	r3, [r4, #0]
 800ef04:	1c5a      	adds	r2, r3, #1
 800ef06:	6022      	str	r2, [r4, #0]
 800ef08:	701e      	strb	r6, [r3, #0]
 800ef0a:	6962      	ldr	r2, [r4, #20]
 800ef0c:	1c43      	adds	r3, r0, #1
 800ef0e:	429a      	cmp	r2, r3
 800ef10:	d004      	beq.n	800ef1c <__swbuf_r+0x6e>
 800ef12:	89a3      	ldrh	r3, [r4, #12]
 800ef14:	07db      	lsls	r3, r3, #31
 800ef16:	d5e1      	bpl.n	800eedc <__swbuf_r+0x2e>
 800ef18:	2e0a      	cmp	r6, #10
 800ef1a:	d1df      	bne.n	800eedc <__swbuf_r+0x2e>
 800ef1c:	4621      	mov	r1, r4
 800ef1e:	4628      	mov	r0, r5
 800ef20:	f001 fcd8 	bl	80108d4 <_fflush_r>
 800ef24:	2800      	cmp	r0, #0
 800ef26:	d0d9      	beq.n	800eedc <__swbuf_r+0x2e>
 800ef28:	e7d6      	b.n	800eed8 <__swbuf_r+0x2a>
	...

0800ef2c <__swsetup_r>:
 800ef2c:	b538      	push	{r3, r4, r5, lr}
 800ef2e:	4b29      	ldr	r3, [pc, #164]	@ (800efd4 <__swsetup_r+0xa8>)
 800ef30:	4605      	mov	r5, r0
 800ef32:	6818      	ldr	r0, [r3, #0]
 800ef34:	460c      	mov	r4, r1
 800ef36:	b118      	cbz	r0, 800ef40 <__swsetup_r+0x14>
 800ef38:	6a03      	ldr	r3, [r0, #32]
 800ef3a:	b90b      	cbnz	r3, 800ef40 <__swsetup_r+0x14>
 800ef3c:	f7ff fece 	bl	800ecdc <__sinit>
 800ef40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ef44:	0719      	lsls	r1, r3, #28
 800ef46:	d422      	bmi.n	800ef8e <__swsetup_r+0x62>
 800ef48:	06da      	lsls	r2, r3, #27
 800ef4a:	d407      	bmi.n	800ef5c <__swsetup_r+0x30>
 800ef4c:	2209      	movs	r2, #9
 800ef4e:	602a      	str	r2, [r5, #0]
 800ef50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ef54:	81a3      	strh	r3, [r4, #12]
 800ef56:	f04f 30ff 	mov.w	r0, #4294967295
 800ef5a:	e033      	b.n	800efc4 <__swsetup_r+0x98>
 800ef5c:	0758      	lsls	r0, r3, #29
 800ef5e:	d512      	bpl.n	800ef86 <__swsetup_r+0x5a>
 800ef60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ef62:	b141      	cbz	r1, 800ef76 <__swsetup_r+0x4a>
 800ef64:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ef68:	4299      	cmp	r1, r3
 800ef6a:	d002      	beq.n	800ef72 <__swsetup_r+0x46>
 800ef6c:	4628      	mov	r0, r5
 800ef6e:	f000 ff1f 	bl	800fdb0 <_free_r>
 800ef72:	2300      	movs	r3, #0
 800ef74:	6363      	str	r3, [r4, #52]	@ 0x34
 800ef76:	89a3      	ldrh	r3, [r4, #12]
 800ef78:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ef7c:	81a3      	strh	r3, [r4, #12]
 800ef7e:	2300      	movs	r3, #0
 800ef80:	6063      	str	r3, [r4, #4]
 800ef82:	6923      	ldr	r3, [r4, #16]
 800ef84:	6023      	str	r3, [r4, #0]
 800ef86:	89a3      	ldrh	r3, [r4, #12]
 800ef88:	f043 0308 	orr.w	r3, r3, #8
 800ef8c:	81a3      	strh	r3, [r4, #12]
 800ef8e:	6923      	ldr	r3, [r4, #16]
 800ef90:	b94b      	cbnz	r3, 800efa6 <__swsetup_r+0x7a>
 800ef92:	89a3      	ldrh	r3, [r4, #12]
 800ef94:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ef98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ef9c:	d003      	beq.n	800efa6 <__swsetup_r+0x7a>
 800ef9e:	4621      	mov	r1, r4
 800efa0:	4628      	mov	r0, r5
 800efa2:	f001 fce5 	bl	8010970 <__smakebuf_r>
 800efa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800efaa:	f013 0201 	ands.w	r2, r3, #1
 800efae:	d00a      	beq.n	800efc6 <__swsetup_r+0x9a>
 800efb0:	2200      	movs	r2, #0
 800efb2:	60a2      	str	r2, [r4, #8]
 800efb4:	6962      	ldr	r2, [r4, #20]
 800efb6:	4252      	negs	r2, r2
 800efb8:	61a2      	str	r2, [r4, #24]
 800efba:	6922      	ldr	r2, [r4, #16]
 800efbc:	b942      	cbnz	r2, 800efd0 <__swsetup_r+0xa4>
 800efbe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800efc2:	d1c5      	bne.n	800ef50 <__swsetup_r+0x24>
 800efc4:	bd38      	pop	{r3, r4, r5, pc}
 800efc6:	0799      	lsls	r1, r3, #30
 800efc8:	bf58      	it	pl
 800efca:	6962      	ldrpl	r2, [r4, #20]
 800efcc:	60a2      	str	r2, [r4, #8]
 800efce:	e7f4      	b.n	800efba <__swsetup_r+0x8e>
 800efd0:	2000      	movs	r0, #0
 800efd2:	e7f7      	b.n	800efc4 <__swsetup_r+0x98>
 800efd4:	20000058 	.word	0x20000058

0800efd8 <memset>:
 800efd8:	4402      	add	r2, r0
 800efda:	4603      	mov	r3, r0
 800efdc:	4293      	cmp	r3, r2
 800efde:	d100      	bne.n	800efe2 <memset+0xa>
 800efe0:	4770      	bx	lr
 800efe2:	f803 1b01 	strb.w	r1, [r3], #1
 800efe6:	e7f9      	b.n	800efdc <memset+0x4>

0800efe8 <_localeconv_r>:
 800efe8:	4800      	ldr	r0, [pc, #0]	@ (800efec <_localeconv_r+0x4>)
 800efea:	4770      	bx	lr
 800efec:	20000198 	.word	0x20000198

0800eff0 <_close_r>:
 800eff0:	b538      	push	{r3, r4, r5, lr}
 800eff2:	4d06      	ldr	r5, [pc, #24]	@ (800f00c <_close_r+0x1c>)
 800eff4:	2300      	movs	r3, #0
 800eff6:	4604      	mov	r4, r0
 800eff8:	4608      	mov	r0, r1
 800effa:	602b      	str	r3, [r5, #0]
 800effc:	f7f2 fee2 	bl	8001dc4 <_close>
 800f000:	1c43      	adds	r3, r0, #1
 800f002:	d102      	bne.n	800f00a <_close_r+0x1a>
 800f004:	682b      	ldr	r3, [r5, #0]
 800f006:	b103      	cbz	r3, 800f00a <_close_r+0x1a>
 800f008:	6023      	str	r3, [r4, #0]
 800f00a:	bd38      	pop	{r3, r4, r5, pc}
 800f00c:	2000576c 	.word	0x2000576c

0800f010 <_lseek_r>:
 800f010:	b538      	push	{r3, r4, r5, lr}
 800f012:	4d07      	ldr	r5, [pc, #28]	@ (800f030 <_lseek_r+0x20>)
 800f014:	4604      	mov	r4, r0
 800f016:	4608      	mov	r0, r1
 800f018:	4611      	mov	r1, r2
 800f01a:	2200      	movs	r2, #0
 800f01c:	602a      	str	r2, [r5, #0]
 800f01e:	461a      	mov	r2, r3
 800f020:	f7f2 fef7 	bl	8001e12 <_lseek>
 800f024:	1c43      	adds	r3, r0, #1
 800f026:	d102      	bne.n	800f02e <_lseek_r+0x1e>
 800f028:	682b      	ldr	r3, [r5, #0]
 800f02a:	b103      	cbz	r3, 800f02e <_lseek_r+0x1e>
 800f02c:	6023      	str	r3, [r4, #0]
 800f02e:	bd38      	pop	{r3, r4, r5, pc}
 800f030:	2000576c 	.word	0x2000576c

0800f034 <_read_r>:
 800f034:	b538      	push	{r3, r4, r5, lr}
 800f036:	4d07      	ldr	r5, [pc, #28]	@ (800f054 <_read_r+0x20>)
 800f038:	4604      	mov	r4, r0
 800f03a:	4608      	mov	r0, r1
 800f03c:	4611      	mov	r1, r2
 800f03e:	2200      	movs	r2, #0
 800f040:	602a      	str	r2, [r5, #0]
 800f042:	461a      	mov	r2, r3
 800f044:	f7f2 fe85 	bl	8001d52 <_read>
 800f048:	1c43      	adds	r3, r0, #1
 800f04a:	d102      	bne.n	800f052 <_read_r+0x1e>
 800f04c:	682b      	ldr	r3, [r5, #0]
 800f04e:	b103      	cbz	r3, 800f052 <_read_r+0x1e>
 800f050:	6023      	str	r3, [r4, #0]
 800f052:	bd38      	pop	{r3, r4, r5, pc}
 800f054:	2000576c 	.word	0x2000576c

0800f058 <_sbrk_r>:
 800f058:	b538      	push	{r3, r4, r5, lr}
 800f05a:	4d06      	ldr	r5, [pc, #24]	@ (800f074 <_sbrk_r+0x1c>)
 800f05c:	2300      	movs	r3, #0
 800f05e:	4604      	mov	r4, r0
 800f060:	4608      	mov	r0, r1
 800f062:	602b      	str	r3, [r5, #0]
 800f064:	f7f2 fee2 	bl	8001e2c <_sbrk>
 800f068:	1c43      	adds	r3, r0, #1
 800f06a:	d102      	bne.n	800f072 <_sbrk_r+0x1a>
 800f06c:	682b      	ldr	r3, [r5, #0]
 800f06e:	b103      	cbz	r3, 800f072 <_sbrk_r+0x1a>
 800f070:	6023      	str	r3, [r4, #0]
 800f072:	bd38      	pop	{r3, r4, r5, pc}
 800f074:	2000576c 	.word	0x2000576c

0800f078 <_write_r>:
 800f078:	b538      	push	{r3, r4, r5, lr}
 800f07a:	4d07      	ldr	r5, [pc, #28]	@ (800f098 <_write_r+0x20>)
 800f07c:	4604      	mov	r4, r0
 800f07e:	4608      	mov	r0, r1
 800f080:	4611      	mov	r1, r2
 800f082:	2200      	movs	r2, #0
 800f084:	602a      	str	r2, [r5, #0]
 800f086:	461a      	mov	r2, r3
 800f088:	f7f2 fe80 	bl	8001d8c <_write>
 800f08c:	1c43      	adds	r3, r0, #1
 800f08e:	d102      	bne.n	800f096 <_write_r+0x1e>
 800f090:	682b      	ldr	r3, [r5, #0]
 800f092:	b103      	cbz	r3, 800f096 <_write_r+0x1e>
 800f094:	6023      	str	r3, [r4, #0]
 800f096:	bd38      	pop	{r3, r4, r5, pc}
 800f098:	2000576c 	.word	0x2000576c

0800f09c <__errno>:
 800f09c:	4b01      	ldr	r3, [pc, #4]	@ (800f0a4 <__errno+0x8>)
 800f09e:	6818      	ldr	r0, [r3, #0]
 800f0a0:	4770      	bx	lr
 800f0a2:	bf00      	nop
 800f0a4:	20000058 	.word	0x20000058

0800f0a8 <__libc_init_array>:
 800f0a8:	b570      	push	{r4, r5, r6, lr}
 800f0aa:	4d0d      	ldr	r5, [pc, #52]	@ (800f0e0 <__libc_init_array+0x38>)
 800f0ac:	4c0d      	ldr	r4, [pc, #52]	@ (800f0e4 <__libc_init_array+0x3c>)
 800f0ae:	1b64      	subs	r4, r4, r5
 800f0b0:	10a4      	asrs	r4, r4, #2
 800f0b2:	2600      	movs	r6, #0
 800f0b4:	42a6      	cmp	r6, r4
 800f0b6:	d109      	bne.n	800f0cc <__libc_init_array+0x24>
 800f0b8:	4d0b      	ldr	r5, [pc, #44]	@ (800f0e8 <__libc_init_array+0x40>)
 800f0ba:	4c0c      	ldr	r4, [pc, #48]	@ (800f0ec <__libc_init_array+0x44>)
 800f0bc:	f001 fd66 	bl	8010b8c <_init>
 800f0c0:	1b64      	subs	r4, r4, r5
 800f0c2:	10a4      	asrs	r4, r4, #2
 800f0c4:	2600      	movs	r6, #0
 800f0c6:	42a6      	cmp	r6, r4
 800f0c8:	d105      	bne.n	800f0d6 <__libc_init_array+0x2e>
 800f0ca:	bd70      	pop	{r4, r5, r6, pc}
 800f0cc:	f855 3b04 	ldr.w	r3, [r5], #4
 800f0d0:	4798      	blx	r3
 800f0d2:	3601      	adds	r6, #1
 800f0d4:	e7ee      	b.n	800f0b4 <__libc_init_array+0xc>
 800f0d6:	f855 3b04 	ldr.w	r3, [r5], #4
 800f0da:	4798      	blx	r3
 800f0dc:	3601      	adds	r6, #1
 800f0de:	e7f2      	b.n	800f0c6 <__libc_init_array+0x1e>
 800f0e0:	08011400 	.word	0x08011400
 800f0e4:	08011400 	.word	0x08011400
 800f0e8:	08011400 	.word	0x08011400
 800f0ec:	08011404 	.word	0x08011404

0800f0f0 <__retarget_lock_init_recursive>:
 800f0f0:	4770      	bx	lr

0800f0f2 <__retarget_lock_acquire_recursive>:
 800f0f2:	4770      	bx	lr

0800f0f4 <__retarget_lock_release_recursive>:
 800f0f4:	4770      	bx	lr

0800f0f6 <memcpy>:
 800f0f6:	440a      	add	r2, r1
 800f0f8:	4291      	cmp	r1, r2
 800f0fa:	f100 33ff 	add.w	r3, r0, #4294967295
 800f0fe:	d100      	bne.n	800f102 <memcpy+0xc>
 800f100:	4770      	bx	lr
 800f102:	b510      	push	{r4, lr}
 800f104:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f108:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f10c:	4291      	cmp	r1, r2
 800f10e:	d1f9      	bne.n	800f104 <memcpy+0xe>
 800f110:	bd10      	pop	{r4, pc}

0800f112 <quorem>:
 800f112:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f116:	6903      	ldr	r3, [r0, #16]
 800f118:	690c      	ldr	r4, [r1, #16]
 800f11a:	42a3      	cmp	r3, r4
 800f11c:	4607      	mov	r7, r0
 800f11e:	db7e      	blt.n	800f21e <quorem+0x10c>
 800f120:	3c01      	subs	r4, #1
 800f122:	f101 0814 	add.w	r8, r1, #20
 800f126:	00a3      	lsls	r3, r4, #2
 800f128:	f100 0514 	add.w	r5, r0, #20
 800f12c:	9300      	str	r3, [sp, #0]
 800f12e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f132:	9301      	str	r3, [sp, #4]
 800f134:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f138:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f13c:	3301      	adds	r3, #1
 800f13e:	429a      	cmp	r2, r3
 800f140:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f144:	fbb2 f6f3 	udiv	r6, r2, r3
 800f148:	d32e      	bcc.n	800f1a8 <quorem+0x96>
 800f14a:	f04f 0a00 	mov.w	sl, #0
 800f14e:	46c4      	mov	ip, r8
 800f150:	46ae      	mov	lr, r5
 800f152:	46d3      	mov	fp, sl
 800f154:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f158:	b298      	uxth	r0, r3
 800f15a:	fb06 a000 	mla	r0, r6, r0, sl
 800f15e:	0c02      	lsrs	r2, r0, #16
 800f160:	0c1b      	lsrs	r3, r3, #16
 800f162:	fb06 2303 	mla	r3, r6, r3, r2
 800f166:	f8de 2000 	ldr.w	r2, [lr]
 800f16a:	b280      	uxth	r0, r0
 800f16c:	b292      	uxth	r2, r2
 800f16e:	1a12      	subs	r2, r2, r0
 800f170:	445a      	add	r2, fp
 800f172:	f8de 0000 	ldr.w	r0, [lr]
 800f176:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f17a:	b29b      	uxth	r3, r3
 800f17c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800f180:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800f184:	b292      	uxth	r2, r2
 800f186:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800f18a:	45e1      	cmp	r9, ip
 800f18c:	f84e 2b04 	str.w	r2, [lr], #4
 800f190:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800f194:	d2de      	bcs.n	800f154 <quorem+0x42>
 800f196:	9b00      	ldr	r3, [sp, #0]
 800f198:	58eb      	ldr	r3, [r5, r3]
 800f19a:	b92b      	cbnz	r3, 800f1a8 <quorem+0x96>
 800f19c:	9b01      	ldr	r3, [sp, #4]
 800f19e:	3b04      	subs	r3, #4
 800f1a0:	429d      	cmp	r5, r3
 800f1a2:	461a      	mov	r2, r3
 800f1a4:	d32f      	bcc.n	800f206 <quorem+0xf4>
 800f1a6:	613c      	str	r4, [r7, #16]
 800f1a8:	4638      	mov	r0, r7
 800f1aa:	f001 f8c5 	bl	8010338 <__mcmp>
 800f1ae:	2800      	cmp	r0, #0
 800f1b0:	db25      	blt.n	800f1fe <quorem+0xec>
 800f1b2:	4629      	mov	r1, r5
 800f1b4:	2000      	movs	r0, #0
 800f1b6:	f858 2b04 	ldr.w	r2, [r8], #4
 800f1ba:	f8d1 c000 	ldr.w	ip, [r1]
 800f1be:	fa1f fe82 	uxth.w	lr, r2
 800f1c2:	fa1f f38c 	uxth.w	r3, ip
 800f1c6:	eba3 030e 	sub.w	r3, r3, lr
 800f1ca:	4403      	add	r3, r0
 800f1cc:	0c12      	lsrs	r2, r2, #16
 800f1ce:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800f1d2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800f1d6:	b29b      	uxth	r3, r3
 800f1d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f1dc:	45c1      	cmp	r9, r8
 800f1de:	f841 3b04 	str.w	r3, [r1], #4
 800f1e2:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f1e6:	d2e6      	bcs.n	800f1b6 <quorem+0xa4>
 800f1e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f1ec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f1f0:	b922      	cbnz	r2, 800f1fc <quorem+0xea>
 800f1f2:	3b04      	subs	r3, #4
 800f1f4:	429d      	cmp	r5, r3
 800f1f6:	461a      	mov	r2, r3
 800f1f8:	d30b      	bcc.n	800f212 <quorem+0x100>
 800f1fa:	613c      	str	r4, [r7, #16]
 800f1fc:	3601      	adds	r6, #1
 800f1fe:	4630      	mov	r0, r6
 800f200:	b003      	add	sp, #12
 800f202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f206:	6812      	ldr	r2, [r2, #0]
 800f208:	3b04      	subs	r3, #4
 800f20a:	2a00      	cmp	r2, #0
 800f20c:	d1cb      	bne.n	800f1a6 <quorem+0x94>
 800f20e:	3c01      	subs	r4, #1
 800f210:	e7c6      	b.n	800f1a0 <quorem+0x8e>
 800f212:	6812      	ldr	r2, [r2, #0]
 800f214:	3b04      	subs	r3, #4
 800f216:	2a00      	cmp	r2, #0
 800f218:	d1ef      	bne.n	800f1fa <quorem+0xe8>
 800f21a:	3c01      	subs	r4, #1
 800f21c:	e7ea      	b.n	800f1f4 <quorem+0xe2>
 800f21e:	2000      	movs	r0, #0
 800f220:	e7ee      	b.n	800f200 <quorem+0xee>
 800f222:	0000      	movs	r0, r0
 800f224:	0000      	movs	r0, r0
	...

0800f228 <_dtoa_r>:
 800f228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f22c:	69c7      	ldr	r7, [r0, #28]
 800f22e:	b099      	sub	sp, #100	@ 0x64
 800f230:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f234:	ec55 4b10 	vmov	r4, r5, d0
 800f238:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800f23a:	9109      	str	r1, [sp, #36]	@ 0x24
 800f23c:	4683      	mov	fp, r0
 800f23e:	920e      	str	r2, [sp, #56]	@ 0x38
 800f240:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f242:	b97f      	cbnz	r7, 800f264 <_dtoa_r+0x3c>
 800f244:	2010      	movs	r0, #16
 800f246:	f7fe ffaf 	bl	800e1a8 <malloc>
 800f24a:	4602      	mov	r2, r0
 800f24c:	f8cb 001c 	str.w	r0, [fp, #28]
 800f250:	b920      	cbnz	r0, 800f25c <_dtoa_r+0x34>
 800f252:	4ba7      	ldr	r3, [pc, #668]	@ (800f4f0 <_dtoa_r+0x2c8>)
 800f254:	21ef      	movs	r1, #239	@ 0xef
 800f256:	48a7      	ldr	r0, [pc, #668]	@ (800f4f4 <_dtoa_r+0x2cc>)
 800f258:	f001 fbe8 	bl	8010a2c <__assert_func>
 800f25c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800f260:	6007      	str	r7, [r0, #0]
 800f262:	60c7      	str	r7, [r0, #12]
 800f264:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f268:	6819      	ldr	r1, [r3, #0]
 800f26a:	b159      	cbz	r1, 800f284 <_dtoa_r+0x5c>
 800f26c:	685a      	ldr	r2, [r3, #4]
 800f26e:	604a      	str	r2, [r1, #4]
 800f270:	2301      	movs	r3, #1
 800f272:	4093      	lsls	r3, r2
 800f274:	608b      	str	r3, [r1, #8]
 800f276:	4658      	mov	r0, fp
 800f278:	f000 fe24 	bl	800fec4 <_Bfree>
 800f27c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f280:	2200      	movs	r2, #0
 800f282:	601a      	str	r2, [r3, #0]
 800f284:	1e2b      	subs	r3, r5, #0
 800f286:	bfb9      	ittee	lt
 800f288:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800f28c:	9303      	strlt	r3, [sp, #12]
 800f28e:	2300      	movge	r3, #0
 800f290:	6033      	strge	r3, [r6, #0]
 800f292:	9f03      	ldr	r7, [sp, #12]
 800f294:	4b98      	ldr	r3, [pc, #608]	@ (800f4f8 <_dtoa_r+0x2d0>)
 800f296:	bfbc      	itt	lt
 800f298:	2201      	movlt	r2, #1
 800f29a:	6032      	strlt	r2, [r6, #0]
 800f29c:	43bb      	bics	r3, r7
 800f29e:	d112      	bne.n	800f2c6 <_dtoa_r+0x9e>
 800f2a0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f2a2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800f2a6:	6013      	str	r3, [r2, #0]
 800f2a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f2ac:	4323      	orrs	r3, r4
 800f2ae:	f000 854d 	beq.w	800fd4c <_dtoa_r+0xb24>
 800f2b2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f2b4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800f50c <_dtoa_r+0x2e4>
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	f000 854f 	beq.w	800fd5c <_dtoa_r+0xb34>
 800f2be:	f10a 0303 	add.w	r3, sl, #3
 800f2c2:	f000 bd49 	b.w	800fd58 <_dtoa_r+0xb30>
 800f2c6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f2ca:	2200      	movs	r2, #0
 800f2cc:	ec51 0b17 	vmov	r0, r1, d7
 800f2d0:	2300      	movs	r3, #0
 800f2d2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800f2d6:	f7f1 fc17 	bl	8000b08 <__aeabi_dcmpeq>
 800f2da:	4680      	mov	r8, r0
 800f2dc:	b158      	cbz	r0, 800f2f6 <_dtoa_r+0xce>
 800f2de:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f2e0:	2301      	movs	r3, #1
 800f2e2:	6013      	str	r3, [r2, #0]
 800f2e4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f2e6:	b113      	cbz	r3, 800f2ee <_dtoa_r+0xc6>
 800f2e8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800f2ea:	4b84      	ldr	r3, [pc, #528]	@ (800f4fc <_dtoa_r+0x2d4>)
 800f2ec:	6013      	str	r3, [r2, #0]
 800f2ee:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800f510 <_dtoa_r+0x2e8>
 800f2f2:	f000 bd33 	b.w	800fd5c <_dtoa_r+0xb34>
 800f2f6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800f2fa:	aa16      	add	r2, sp, #88	@ 0x58
 800f2fc:	a917      	add	r1, sp, #92	@ 0x5c
 800f2fe:	4658      	mov	r0, fp
 800f300:	f001 f8ca 	bl	8010498 <__d2b>
 800f304:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800f308:	4681      	mov	r9, r0
 800f30a:	2e00      	cmp	r6, #0
 800f30c:	d077      	beq.n	800f3fe <_dtoa_r+0x1d6>
 800f30e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f310:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800f314:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f318:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f31c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800f320:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800f324:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800f328:	4619      	mov	r1, r3
 800f32a:	2200      	movs	r2, #0
 800f32c:	4b74      	ldr	r3, [pc, #464]	@ (800f500 <_dtoa_r+0x2d8>)
 800f32e:	f7f0 ffcb 	bl	80002c8 <__aeabi_dsub>
 800f332:	a369      	add	r3, pc, #420	@ (adr r3, 800f4d8 <_dtoa_r+0x2b0>)
 800f334:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f338:	f7f1 f97e 	bl	8000638 <__aeabi_dmul>
 800f33c:	a368      	add	r3, pc, #416	@ (adr r3, 800f4e0 <_dtoa_r+0x2b8>)
 800f33e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f342:	f7f0 ffc3 	bl	80002cc <__adddf3>
 800f346:	4604      	mov	r4, r0
 800f348:	4630      	mov	r0, r6
 800f34a:	460d      	mov	r5, r1
 800f34c:	f7f1 f90a 	bl	8000564 <__aeabi_i2d>
 800f350:	a365      	add	r3, pc, #404	@ (adr r3, 800f4e8 <_dtoa_r+0x2c0>)
 800f352:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f356:	f7f1 f96f 	bl	8000638 <__aeabi_dmul>
 800f35a:	4602      	mov	r2, r0
 800f35c:	460b      	mov	r3, r1
 800f35e:	4620      	mov	r0, r4
 800f360:	4629      	mov	r1, r5
 800f362:	f7f0 ffb3 	bl	80002cc <__adddf3>
 800f366:	4604      	mov	r4, r0
 800f368:	460d      	mov	r5, r1
 800f36a:	f7f1 fc15 	bl	8000b98 <__aeabi_d2iz>
 800f36e:	2200      	movs	r2, #0
 800f370:	4607      	mov	r7, r0
 800f372:	2300      	movs	r3, #0
 800f374:	4620      	mov	r0, r4
 800f376:	4629      	mov	r1, r5
 800f378:	f7f1 fbd0 	bl	8000b1c <__aeabi_dcmplt>
 800f37c:	b140      	cbz	r0, 800f390 <_dtoa_r+0x168>
 800f37e:	4638      	mov	r0, r7
 800f380:	f7f1 f8f0 	bl	8000564 <__aeabi_i2d>
 800f384:	4622      	mov	r2, r4
 800f386:	462b      	mov	r3, r5
 800f388:	f7f1 fbbe 	bl	8000b08 <__aeabi_dcmpeq>
 800f38c:	b900      	cbnz	r0, 800f390 <_dtoa_r+0x168>
 800f38e:	3f01      	subs	r7, #1
 800f390:	2f16      	cmp	r7, #22
 800f392:	d851      	bhi.n	800f438 <_dtoa_r+0x210>
 800f394:	4b5b      	ldr	r3, [pc, #364]	@ (800f504 <_dtoa_r+0x2dc>)
 800f396:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f39a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f39e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f3a2:	f7f1 fbbb 	bl	8000b1c <__aeabi_dcmplt>
 800f3a6:	2800      	cmp	r0, #0
 800f3a8:	d048      	beq.n	800f43c <_dtoa_r+0x214>
 800f3aa:	3f01      	subs	r7, #1
 800f3ac:	2300      	movs	r3, #0
 800f3ae:	9312      	str	r3, [sp, #72]	@ 0x48
 800f3b0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f3b2:	1b9b      	subs	r3, r3, r6
 800f3b4:	1e5a      	subs	r2, r3, #1
 800f3b6:	bf44      	itt	mi
 800f3b8:	f1c3 0801 	rsbmi	r8, r3, #1
 800f3bc:	2300      	movmi	r3, #0
 800f3be:	9208      	str	r2, [sp, #32]
 800f3c0:	bf54      	ite	pl
 800f3c2:	f04f 0800 	movpl.w	r8, #0
 800f3c6:	9308      	strmi	r3, [sp, #32]
 800f3c8:	2f00      	cmp	r7, #0
 800f3ca:	db39      	blt.n	800f440 <_dtoa_r+0x218>
 800f3cc:	9b08      	ldr	r3, [sp, #32]
 800f3ce:	970f      	str	r7, [sp, #60]	@ 0x3c
 800f3d0:	443b      	add	r3, r7
 800f3d2:	9308      	str	r3, [sp, #32]
 800f3d4:	2300      	movs	r3, #0
 800f3d6:	930a      	str	r3, [sp, #40]	@ 0x28
 800f3d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f3da:	2b09      	cmp	r3, #9
 800f3dc:	d864      	bhi.n	800f4a8 <_dtoa_r+0x280>
 800f3de:	2b05      	cmp	r3, #5
 800f3e0:	bfc4      	itt	gt
 800f3e2:	3b04      	subgt	r3, #4
 800f3e4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800f3e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f3e8:	f1a3 0302 	sub.w	r3, r3, #2
 800f3ec:	bfcc      	ite	gt
 800f3ee:	2400      	movgt	r4, #0
 800f3f0:	2401      	movle	r4, #1
 800f3f2:	2b03      	cmp	r3, #3
 800f3f4:	d863      	bhi.n	800f4be <_dtoa_r+0x296>
 800f3f6:	e8df f003 	tbb	[pc, r3]
 800f3fa:	372a      	.short	0x372a
 800f3fc:	5535      	.short	0x5535
 800f3fe:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800f402:	441e      	add	r6, r3
 800f404:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800f408:	2b20      	cmp	r3, #32
 800f40a:	bfc1      	itttt	gt
 800f40c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800f410:	409f      	lslgt	r7, r3
 800f412:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800f416:	fa24 f303 	lsrgt.w	r3, r4, r3
 800f41a:	bfd6      	itet	le
 800f41c:	f1c3 0320 	rsble	r3, r3, #32
 800f420:	ea47 0003 	orrgt.w	r0, r7, r3
 800f424:	fa04 f003 	lslle.w	r0, r4, r3
 800f428:	f7f1 f88c 	bl	8000544 <__aeabi_ui2d>
 800f42c:	2201      	movs	r2, #1
 800f42e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800f432:	3e01      	subs	r6, #1
 800f434:	9214      	str	r2, [sp, #80]	@ 0x50
 800f436:	e777      	b.n	800f328 <_dtoa_r+0x100>
 800f438:	2301      	movs	r3, #1
 800f43a:	e7b8      	b.n	800f3ae <_dtoa_r+0x186>
 800f43c:	9012      	str	r0, [sp, #72]	@ 0x48
 800f43e:	e7b7      	b.n	800f3b0 <_dtoa_r+0x188>
 800f440:	427b      	negs	r3, r7
 800f442:	930a      	str	r3, [sp, #40]	@ 0x28
 800f444:	2300      	movs	r3, #0
 800f446:	eba8 0807 	sub.w	r8, r8, r7
 800f44a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f44c:	e7c4      	b.n	800f3d8 <_dtoa_r+0x1b0>
 800f44e:	2300      	movs	r3, #0
 800f450:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f452:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f454:	2b00      	cmp	r3, #0
 800f456:	dc35      	bgt.n	800f4c4 <_dtoa_r+0x29c>
 800f458:	2301      	movs	r3, #1
 800f45a:	9300      	str	r3, [sp, #0]
 800f45c:	9307      	str	r3, [sp, #28]
 800f45e:	461a      	mov	r2, r3
 800f460:	920e      	str	r2, [sp, #56]	@ 0x38
 800f462:	e00b      	b.n	800f47c <_dtoa_r+0x254>
 800f464:	2301      	movs	r3, #1
 800f466:	e7f3      	b.n	800f450 <_dtoa_r+0x228>
 800f468:	2300      	movs	r3, #0
 800f46a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f46c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f46e:	18fb      	adds	r3, r7, r3
 800f470:	9300      	str	r3, [sp, #0]
 800f472:	3301      	adds	r3, #1
 800f474:	2b01      	cmp	r3, #1
 800f476:	9307      	str	r3, [sp, #28]
 800f478:	bfb8      	it	lt
 800f47a:	2301      	movlt	r3, #1
 800f47c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800f480:	2100      	movs	r1, #0
 800f482:	2204      	movs	r2, #4
 800f484:	f102 0514 	add.w	r5, r2, #20
 800f488:	429d      	cmp	r5, r3
 800f48a:	d91f      	bls.n	800f4cc <_dtoa_r+0x2a4>
 800f48c:	6041      	str	r1, [r0, #4]
 800f48e:	4658      	mov	r0, fp
 800f490:	f000 fcd8 	bl	800fe44 <_Balloc>
 800f494:	4682      	mov	sl, r0
 800f496:	2800      	cmp	r0, #0
 800f498:	d13c      	bne.n	800f514 <_dtoa_r+0x2ec>
 800f49a:	4b1b      	ldr	r3, [pc, #108]	@ (800f508 <_dtoa_r+0x2e0>)
 800f49c:	4602      	mov	r2, r0
 800f49e:	f240 11af 	movw	r1, #431	@ 0x1af
 800f4a2:	e6d8      	b.n	800f256 <_dtoa_r+0x2e>
 800f4a4:	2301      	movs	r3, #1
 800f4a6:	e7e0      	b.n	800f46a <_dtoa_r+0x242>
 800f4a8:	2401      	movs	r4, #1
 800f4aa:	2300      	movs	r3, #0
 800f4ac:	9309      	str	r3, [sp, #36]	@ 0x24
 800f4ae:	940b      	str	r4, [sp, #44]	@ 0x2c
 800f4b0:	f04f 33ff 	mov.w	r3, #4294967295
 800f4b4:	9300      	str	r3, [sp, #0]
 800f4b6:	9307      	str	r3, [sp, #28]
 800f4b8:	2200      	movs	r2, #0
 800f4ba:	2312      	movs	r3, #18
 800f4bc:	e7d0      	b.n	800f460 <_dtoa_r+0x238>
 800f4be:	2301      	movs	r3, #1
 800f4c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f4c2:	e7f5      	b.n	800f4b0 <_dtoa_r+0x288>
 800f4c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f4c6:	9300      	str	r3, [sp, #0]
 800f4c8:	9307      	str	r3, [sp, #28]
 800f4ca:	e7d7      	b.n	800f47c <_dtoa_r+0x254>
 800f4cc:	3101      	adds	r1, #1
 800f4ce:	0052      	lsls	r2, r2, #1
 800f4d0:	e7d8      	b.n	800f484 <_dtoa_r+0x25c>
 800f4d2:	bf00      	nop
 800f4d4:	f3af 8000 	nop.w
 800f4d8:	636f4361 	.word	0x636f4361
 800f4dc:	3fd287a7 	.word	0x3fd287a7
 800f4e0:	8b60c8b3 	.word	0x8b60c8b3
 800f4e4:	3fc68a28 	.word	0x3fc68a28
 800f4e8:	509f79fb 	.word	0x509f79fb
 800f4ec:	3fd34413 	.word	0x3fd34413
 800f4f0:	080110cb 	.word	0x080110cb
 800f4f4:	080110e2 	.word	0x080110e2
 800f4f8:	7ff00000 	.word	0x7ff00000
 800f4fc:	0801109b 	.word	0x0801109b
 800f500:	3ff80000 	.word	0x3ff80000
 800f504:	080111d8 	.word	0x080111d8
 800f508:	0801113a 	.word	0x0801113a
 800f50c:	080110c7 	.word	0x080110c7
 800f510:	0801109a 	.word	0x0801109a
 800f514:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f518:	6018      	str	r0, [r3, #0]
 800f51a:	9b07      	ldr	r3, [sp, #28]
 800f51c:	2b0e      	cmp	r3, #14
 800f51e:	f200 80a4 	bhi.w	800f66a <_dtoa_r+0x442>
 800f522:	2c00      	cmp	r4, #0
 800f524:	f000 80a1 	beq.w	800f66a <_dtoa_r+0x442>
 800f528:	2f00      	cmp	r7, #0
 800f52a:	dd33      	ble.n	800f594 <_dtoa_r+0x36c>
 800f52c:	4bad      	ldr	r3, [pc, #692]	@ (800f7e4 <_dtoa_r+0x5bc>)
 800f52e:	f007 020f 	and.w	r2, r7, #15
 800f532:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f536:	ed93 7b00 	vldr	d7, [r3]
 800f53a:	05f8      	lsls	r0, r7, #23
 800f53c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800f540:	ea4f 1427 	mov.w	r4, r7, asr #4
 800f544:	d516      	bpl.n	800f574 <_dtoa_r+0x34c>
 800f546:	4ba8      	ldr	r3, [pc, #672]	@ (800f7e8 <_dtoa_r+0x5c0>)
 800f548:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f54c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f550:	f7f1 f99c 	bl	800088c <__aeabi_ddiv>
 800f554:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f558:	f004 040f 	and.w	r4, r4, #15
 800f55c:	2603      	movs	r6, #3
 800f55e:	4da2      	ldr	r5, [pc, #648]	@ (800f7e8 <_dtoa_r+0x5c0>)
 800f560:	b954      	cbnz	r4, 800f578 <_dtoa_r+0x350>
 800f562:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f566:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f56a:	f7f1 f98f 	bl	800088c <__aeabi_ddiv>
 800f56e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f572:	e028      	b.n	800f5c6 <_dtoa_r+0x39e>
 800f574:	2602      	movs	r6, #2
 800f576:	e7f2      	b.n	800f55e <_dtoa_r+0x336>
 800f578:	07e1      	lsls	r1, r4, #31
 800f57a:	d508      	bpl.n	800f58e <_dtoa_r+0x366>
 800f57c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f580:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f584:	f7f1 f858 	bl	8000638 <__aeabi_dmul>
 800f588:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f58c:	3601      	adds	r6, #1
 800f58e:	1064      	asrs	r4, r4, #1
 800f590:	3508      	adds	r5, #8
 800f592:	e7e5      	b.n	800f560 <_dtoa_r+0x338>
 800f594:	f000 80d2 	beq.w	800f73c <_dtoa_r+0x514>
 800f598:	427c      	negs	r4, r7
 800f59a:	4b92      	ldr	r3, [pc, #584]	@ (800f7e4 <_dtoa_r+0x5bc>)
 800f59c:	4d92      	ldr	r5, [pc, #584]	@ (800f7e8 <_dtoa_r+0x5c0>)
 800f59e:	f004 020f 	and.w	r2, r4, #15
 800f5a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f5a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5aa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f5ae:	f7f1 f843 	bl	8000638 <__aeabi_dmul>
 800f5b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f5b6:	1124      	asrs	r4, r4, #4
 800f5b8:	2300      	movs	r3, #0
 800f5ba:	2602      	movs	r6, #2
 800f5bc:	2c00      	cmp	r4, #0
 800f5be:	f040 80b2 	bne.w	800f726 <_dtoa_r+0x4fe>
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d1d3      	bne.n	800f56e <_dtoa_r+0x346>
 800f5c6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f5c8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	f000 80b7 	beq.w	800f740 <_dtoa_r+0x518>
 800f5d2:	4b86      	ldr	r3, [pc, #536]	@ (800f7ec <_dtoa_r+0x5c4>)
 800f5d4:	2200      	movs	r2, #0
 800f5d6:	4620      	mov	r0, r4
 800f5d8:	4629      	mov	r1, r5
 800f5da:	f7f1 fa9f 	bl	8000b1c <__aeabi_dcmplt>
 800f5de:	2800      	cmp	r0, #0
 800f5e0:	f000 80ae 	beq.w	800f740 <_dtoa_r+0x518>
 800f5e4:	9b07      	ldr	r3, [sp, #28]
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	f000 80aa 	beq.w	800f740 <_dtoa_r+0x518>
 800f5ec:	9b00      	ldr	r3, [sp, #0]
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	dd37      	ble.n	800f662 <_dtoa_r+0x43a>
 800f5f2:	1e7b      	subs	r3, r7, #1
 800f5f4:	9304      	str	r3, [sp, #16]
 800f5f6:	4620      	mov	r0, r4
 800f5f8:	4b7d      	ldr	r3, [pc, #500]	@ (800f7f0 <_dtoa_r+0x5c8>)
 800f5fa:	2200      	movs	r2, #0
 800f5fc:	4629      	mov	r1, r5
 800f5fe:	f7f1 f81b 	bl	8000638 <__aeabi_dmul>
 800f602:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f606:	9c00      	ldr	r4, [sp, #0]
 800f608:	3601      	adds	r6, #1
 800f60a:	4630      	mov	r0, r6
 800f60c:	f7f0 ffaa 	bl	8000564 <__aeabi_i2d>
 800f610:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f614:	f7f1 f810 	bl	8000638 <__aeabi_dmul>
 800f618:	4b76      	ldr	r3, [pc, #472]	@ (800f7f4 <_dtoa_r+0x5cc>)
 800f61a:	2200      	movs	r2, #0
 800f61c:	f7f0 fe56 	bl	80002cc <__adddf3>
 800f620:	4605      	mov	r5, r0
 800f622:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800f626:	2c00      	cmp	r4, #0
 800f628:	f040 808d 	bne.w	800f746 <_dtoa_r+0x51e>
 800f62c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f630:	4b71      	ldr	r3, [pc, #452]	@ (800f7f8 <_dtoa_r+0x5d0>)
 800f632:	2200      	movs	r2, #0
 800f634:	f7f0 fe48 	bl	80002c8 <__aeabi_dsub>
 800f638:	4602      	mov	r2, r0
 800f63a:	460b      	mov	r3, r1
 800f63c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f640:	462a      	mov	r2, r5
 800f642:	4633      	mov	r3, r6
 800f644:	f7f1 fa88 	bl	8000b58 <__aeabi_dcmpgt>
 800f648:	2800      	cmp	r0, #0
 800f64a:	f040 828b 	bne.w	800fb64 <_dtoa_r+0x93c>
 800f64e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f652:	462a      	mov	r2, r5
 800f654:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800f658:	f7f1 fa60 	bl	8000b1c <__aeabi_dcmplt>
 800f65c:	2800      	cmp	r0, #0
 800f65e:	f040 8128 	bne.w	800f8b2 <_dtoa_r+0x68a>
 800f662:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800f666:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800f66a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	f2c0 815a 	blt.w	800f926 <_dtoa_r+0x6fe>
 800f672:	2f0e      	cmp	r7, #14
 800f674:	f300 8157 	bgt.w	800f926 <_dtoa_r+0x6fe>
 800f678:	4b5a      	ldr	r3, [pc, #360]	@ (800f7e4 <_dtoa_r+0x5bc>)
 800f67a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f67e:	ed93 7b00 	vldr	d7, [r3]
 800f682:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f684:	2b00      	cmp	r3, #0
 800f686:	ed8d 7b00 	vstr	d7, [sp]
 800f68a:	da03      	bge.n	800f694 <_dtoa_r+0x46c>
 800f68c:	9b07      	ldr	r3, [sp, #28]
 800f68e:	2b00      	cmp	r3, #0
 800f690:	f340 8101 	ble.w	800f896 <_dtoa_r+0x66e>
 800f694:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f698:	4656      	mov	r6, sl
 800f69a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f69e:	4620      	mov	r0, r4
 800f6a0:	4629      	mov	r1, r5
 800f6a2:	f7f1 f8f3 	bl	800088c <__aeabi_ddiv>
 800f6a6:	f7f1 fa77 	bl	8000b98 <__aeabi_d2iz>
 800f6aa:	4680      	mov	r8, r0
 800f6ac:	f7f0 ff5a 	bl	8000564 <__aeabi_i2d>
 800f6b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f6b4:	f7f0 ffc0 	bl	8000638 <__aeabi_dmul>
 800f6b8:	4602      	mov	r2, r0
 800f6ba:	460b      	mov	r3, r1
 800f6bc:	4620      	mov	r0, r4
 800f6be:	4629      	mov	r1, r5
 800f6c0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800f6c4:	f7f0 fe00 	bl	80002c8 <__aeabi_dsub>
 800f6c8:	f806 4b01 	strb.w	r4, [r6], #1
 800f6cc:	9d07      	ldr	r5, [sp, #28]
 800f6ce:	eba6 040a 	sub.w	r4, r6, sl
 800f6d2:	42a5      	cmp	r5, r4
 800f6d4:	4602      	mov	r2, r0
 800f6d6:	460b      	mov	r3, r1
 800f6d8:	f040 8117 	bne.w	800f90a <_dtoa_r+0x6e2>
 800f6dc:	f7f0 fdf6 	bl	80002cc <__adddf3>
 800f6e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f6e4:	4604      	mov	r4, r0
 800f6e6:	460d      	mov	r5, r1
 800f6e8:	f7f1 fa36 	bl	8000b58 <__aeabi_dcmpgt>
 800f6ec:	2800      	cmp	r0, #0
 800f6ee:	f040 80f9 	bne.w	800f8e4 <_dtoa_r+0x6bc>
 800f6f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f6f6:	4620      	mov	r0, r4
 800f6f8:	4629      	mov	r1, r5
 800f6fa:	f7f1 fa05 	bl	8000b08 <__aeabi_dcmpeq>
 800f6fe:	b118      	cbz	r0, 800f708 <_dtoa_r+0x4e0>
 800f700:	f018 0f01 	tst.w	r8, #1
 800f704:	f040 80ee 	bne.w	800f8e4 <_dtoa_r+0x6bc>
 800f708:	4649      	mov	r1, r9
 800f70a:	4658      	mov	r0, fp
 800f70c:	f000 fbda 	bl	800fec4 <_Bfree>
 800f710:	2300      	movs	r3, #0
 800f712:	7033      	strb	r3, [r6, #0]
 800f714:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f716:	3701      	adds	r7, #1
 800f718:	601f      	str	r7, [r3, #0]
 800f71a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	f000 831d 	beq.w	800fd5c <_dtoa_r+0xb34>
 800f722:	601e      	str	r6, [r3, #0]
 800f724:	e31a      	b.n	800fd5c <_dtoa_r+0xb34>
 800f726:	07e2      	lsls	r2, r4, #31
 800f728:	d505      	bpl.n	800f736 <_dtoa_r+0x50e>
 800f72a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f72e:	f7f0 ff83 	bl	8000638 <__aeabi_dmul>
 800f732:	3601      	adds	r6, #1
 800f734:	2301      	movs	r3, #1
 800f736:	1064      	asrs	r4, r4, #1
 800f738:	3508      	adds	r5, #8
 800f73a:	e73f      	b.n	800f5bc <_dtoa_r+0x394>
 800f73c:	2602      	movs	r6, #2
 800f73e:	e742      	b.n	800f5c6 <_dtoa_r+0x39e>
 800f740:	9c07      	ldr	r4, [sp, #28]
 800f742:	9704      	str	r7, [sp, #16]
 800f744:	e761      	b.n	800f60a <_dtoa_r+0x3e2>
 800f746:	4b27      	ldr	r3, [pc, #156]	@ (800f7e4 <_dtoa_r+0x5bc>)
 800f748:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f74a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f74e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f752:	4454      	add	r4, sl
 800f754:	2900      	cmp	r1, #0
 800f756:	d053      	beq.n	800f800 <_dtoa_r+0x5d8>
 800f758:	4928      	ldr	r1, [pc, #160]	@ (800f7fc <_dtoa_r+0x5d4>)
 800f75a:	2000      	movs	r0, #0
 800f75c:	f7f1 f896 	bl	800088c <__aeabi_ddiv>
 800f760:	4633      	mov	r3, r6
 800f762:	462a      	mov	r2, r5
 800f764:	f7f0 fdb0 	bl	80002c8 <__aeabi_dsub>
 800f768:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f76c:	4656      	mov	r6, sl
 800f76e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f772:	f7f1 fa11 	bl	8000b98 <__aeabi_d2iz>
 800f776:	4605      	mov	r5, r0
 800f778:	f7f0 fef4 	bl	8000564 <__aeabi_i2d>
 800f77c:	4602      	mov	r2, r0
 800f77e:	460b      	mov	r3, r1
 800f780:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f784:	f7f0 fda0 	bl	80002c8 <__aeabi_dsub>
 800f788:	3530      	adds	r5, #48	@ 0x30
 800f78a:	4602      	mov	r2, r0
 800f78c:	460b      	mov	r3, r1
 800f78e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f792:	f806 5b01 	strb.w	r5, [r6], #1
 800f796:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f79a:	f7f1 f9bf 	bl	8000b1c <__aeabi_dcmplt>
 800f79e:	2800      	cmp	r0, #0
 800f7a0:	d171      	bne.n	800f886 <_dtoa_r+0x65e>
 800f7a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f7a6:	4911      	ldr	r1, [pc, #68]	@ (800f7ec <_dtoa_r+0x5c4>)
 800f7a8:	2000      	movs	r0, #0
 800f7aa:	f7f0 fd8d 	bl	80002c8 <__aeabi_dsub>
 800f7ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f7b2:	f7f1 f9b3 	bl	8000b1c <__aeabi_dcmplt>
 800f7b6:	2800      	cmp	r0, #0
 800f7b8:	f040 8095 	bne.w	800f8e6 <_dtoa_r+0x6be>
 800f7bc:	42a6      	cmp	r6, r4
 800f7be:	f43f af50 	beq.w	800f662 <_dtoa_r+0x43a>
 800f7c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800f7c6:	4b0a      	ldr	r3, [pc, #40]	@ (800f7f0 <_dtoa_r+0x5c8>)
 800f7c8:	2200      	movs	r2, #0
 800f7ca:	f7f0 ff35 	bl	8000638 <__aeabi_dmul>
 800f7ce:	4b08      	ldr	r3, [pc, #32]	@ (800f7f0 <_dtoa_r+0x5c8>)
 800f7d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f7d4:	2200      	movs	r2, #0
 800f7d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f7da:	f7f0 ff2d 	bl	8000638 <__aeabi_dmul>
 800f7de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f7e2:	e7c4      	b.n	800f76e <_dtoa_r+0x546>
 800f7e4:	080111d8 	.word	0x080111d8
 800f7e8:	080111b0 	.word	0x080111b0
 800f7ec:	3ff00000 	.word	0x3ff00000
 800f7f0:	40240000 	.word	0x40240000
 800f7f4:	401c0000 	.word	0x401c0000
 800f7f8:	40140000 	.word	0x40140000
 800f7fc:	3fe00000 	.word	0x3fe00000
 800f800:	4631      	mov	r1, r6
 800f802:	4628      	mov	r0, r5
 800f804:	f7f0 ff18 	bl	8000638 <__aeabi_dmul>
 800f808:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f80c:	9415      	str	r4, [sp, #84]	@ 0x54
 800f80e:	4656      	mov	r6, sl
 800f810:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f814:	f7f1 f9c0 	bl	8000b98 <__aeabi_d2iz>
 800f818:	4605      	mov	r5, r0
 800f81a:	f7f0 fea3 	bl	8000564 <__aeabi_i2d>
 800f81e:	4602      	mov	r2, r0
 800f820:	460b      	mov	r3, r1
 800f822:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f826:	f7f0 fd4f 	bl	80002c8 <__aeabi_dsub>
 800f82a:	3530      	adds	r5, #48	@ 0x30
 800f82c:	f806 5b01 	strb.w	r5, [r6], #1
 800f830:	4602      	mov	r2, r0
 800f832:	460b      	mov	r3, r1
 800f834:	42a6      	cmp	r6, r4
 800f836:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f83a:	f04f 0200 	mov.w	r2, #0
 800f83e:	d124      	bne.n	800f88a <_dtoa_r+0x662>
 800f840:	4bac      	ldr	r3, [pc, #688]	@ (800faf4 <_dtoa_r+0x8cc>)
 800f842:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800f846:	f7f0 fd41 	bl	80002cc <__adddf3>
 800f84a:	4602      	mov	r2, r0
 800f84c:	460b      	mov	r3, r1
 800f84e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f852:	f7f1 f981 	bl	8000b58 <__aeabi_dcmpgt>
 800f856:	2800      	cmp	r0, #0
 800f858:	d145      	bne.n	800f8e6 <_dtoa_r+0x6be>
 800f85a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f85e:	49a5      	ldr	r1, [pc, #660]	@ (800faf4 <_dtoa_r+0x8cc>)
 800f860:	2000      	movs	r0, #0
 800f862:	f7f0 fd31 	bl	80002c8 <__aeabi_dsub>
 800f866:	4602      	mov	r2, r0
 800f868:	460b      	mov	r3, r1
 800f86a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f86e:	f7f1 f955 	bl	8000b1c <__aeabi_dcmplt>
 800f872:	2800      	cmp	r0, #0
 800f874:	f43f aef5 	beq.w	800f662 <_dtoa_r+0x43a>
 800f878:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800f87a:	1e73      	subs	r3, r6, #1
 800f87c:	9315      	str	r3, [sp, #84]	@ 0x54
 800f87e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f882:	2b30      	cmp	r3, #48	@ 0x30
 800f884:	d0f8      	beq.n	800f878 <_dtoa_r+0x650>
 800f886:	9f04      	ldr	r7, [sp, #16]
 800f888:	e73e      	b.n	800f708 <_dtoa_r+0x4e0>
 800f88a:	4b9b      	ldr	r3, [pc, #620]	@ (800faf8 <_dtoa_r+0x8d0>)
 800f88c:	f7f0 fed4 	bl	8000638 <__aeabi_dmul>
 800f890:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f894:	e7bc      	b.n	800f810 <_dtoa_r+0x5e8>
 800f896:	d10c      	bne.n	800f8b2 <_dtoa_r+0x68a>
 800f898:	4b98      	ldr	r3, [pc, #608]	@ (800fafc <_dtoa_r+0x8d4>)
 800f89a:	2200      	movs	r2, #0
 800f89c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f8a0:	f7f0 feca 	bl	8000638 <__aeabi_dmul>
 800f8a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f8a8:	f7f1 f94c 	bl	8000b44 <__aeabi_dcmpge>
 800f8ac:	2800      	cmp	r0, #0
 800f8ae:	f000 8157 	beq.w	800fb60 <_dtoa_r+0x938>
 800f8b2:	2400      	movs	r4, #0
 800f8b4:	4625      	mov	r5, r4
 800f8b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f8b8:	43db      	mvns	r3, r3
 800f8ba:	9304      	str	r3, [sp, #16]
 800f8bc:	4656      	mov	r6, sl
 800f8be:	2700      	movs	r7, #0
 800f8c0:	4621      	mov	r1, r4
 800f8c2:	4658      	mov	r0, fp
 800f8c4:	f000 fafe 	bl	800fec4 <_Bfree>
 800f8c8:	2d00      	cmp	r5, #0
 800f8ca:	d0dc      	beq.n	800f886 <_dtoa_r+0x65e>
 800f8cc:	b12f      	cbz	r7, 800f8da <_dtoa_r+0x6b2>
 800f8ce:	42af      	cmp	r7, r5
 800f8d0:	d003      	beq.n	800f8da <_dtoa_r+0x6b2>
 800f8d2:	4639      	mov	r1, r7
 800f8d4:	4658      	mov	r0, fp
 800f8d6:	f000 faf5 	bl	800fec4 <_Bfree>
 800f8da:	4629      	mov	r1, r5
 800f8dc:	4658      	mov	r0, fp
 800f8de:	f000 faf1 	bl	800fec4 <_Bfree>
 800f8e2:	e7d0      	b.n	800f886 <_dtoa_r+0x65e>
 800f8e4:	9704      	str	r7, [sp, #16]
 800f8e6:	4633      	mov	r3, r6
 800f8e8:	461e      	mov	r6, r3
 800f8ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f8ee:	2a39      	cmp	r2, #57	@ 0x39
 800f8f0:	d107      	bne.n	800f902 <_dtoa_r+0x6da>
 800f8f2:	459a      	cmp	sl, r3
 800f8f4:	d1f8      	bne.n	800f8e8 <_dtoa_r+0x6c0>
 800f8f6:	9a04      	ldr	r2, [sp, #16]
 800f8f8:	3201      	adds	r2, #1
 800f8fa:	9204      	str	r2, [sp, #16]
 800f8fc:	2230      	movs	r2, #48	@ 0x30
 800f8fe:	f88a 2000 	strb.w	r2, [sl]
 800f902:	781a      	ldrb	r2, [r3, #0]
 800f904:	3201      	adds	r2, #1
 800f906:	701a      	strb	r2, [r3, #0]
 800f908:	e7bd      	b.n	800f886 <_dtoa_r+0x65e>
 800f90a:	4b7b      	ldr	r3, [pc, #492]	@ (800faf8 <_dtoa_r+0x8d0>)
 800f90c:	2200      	movs	r2, #0
 800f90e:	f7f0 fe93 	bl	8000638 <__aeabi_dmul>
 800f912:	2200      	movs	r2, #0
 800f914:	2300      	movs	r3, #0
 800f916:	4604      	mov	r4, r0
 800f918:	460d      	mov	r5, r1
 800f91a:	f7f1 f8f5 	bl	8000b08 <__aeabi_dcmpeq>
 800f91e:	2800      	cmp	r0, #0
 800f920:	f43f aebb 	beq.w	800f69a <_dtoa_r+0x472>
 800f924:	e6f0      	b.n	800f708 <_dtoa_r+0x4e0>
 800f926:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f928:	2a00      	cmp	r2, #0
 800f92a:	f000 80db 	beq.w	800fae4 <_dtoa_r+0x8bc>
 800f92e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f930:	2a01      	cmp	r2, #1
 800f932:	f300 80bf 	bgt.w	800fab4 <_dtoa_r+0x88c>
 800f936:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800f938:	2a00      	cmp	r2, #0
 800f93a:	f000 80b7 	beq.w	800faac <_dtoa_r+0x884>
 800f93e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800f942:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f944:	4646      	mov	r6, r8
 800f946:	9a08      	ldr	r2, [sp, #32]
 800f948:	2101      	movs	r1, #1
 800f94a:	441a      	add	r2, r3
 800f94c:	4658      	mov	r0, fp
 800f94e:	4498      	add	r8, r3
 800f950:	9208      	str	r2, [sp, #32]
 800f952:	f000 fb6b 	bl	801002c <__i2b>
 800f956:	4605      	mov	r5, r0
 800f958:	b15e      	cbz	r6, 800f972 <_dtoa_r+0x74a>
 800f95a:	9b08      	ldr	r3, [sp, #32]
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	dd08      	ble.n	800f972 <_dtoa_r+0x74a>
 800f960:	42b3      	cmp	r3, r6
 800f962:	9a08      	ldr	r2, [sp, #32]
 800f964:	bfa8      	it	ge
 800f966:	4633      	movge	r3, r6
 800f968:	eba8 0803 	sub.w	r8, r8, r3
 800f96c:	1af6      	subs	r6, r6, r3
 800f96e:	1ad3      	subs	r3, r2, r3
 800f970:	9308      	str	r3, [sp, #32]
 800f972:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f974:	b1f3      	cbz	r3, 800f9b4 <_dtoa_r+0x78c>
 800f976:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f978:	2b00      	cmp	r3, #0
 800f97a:	f000 80b7 	beq.w	800faec <_dtoa_r+0x8c4>
 800f97e:	b18c      	cbz	r4, 800f9a4 <_dtoa_r+0x77c>
 800f980:	4629      	mov	r1, r5
 800f982:	4622      	mov	r2, r4
 800f984:	4658      	mov	r0, fp
 800f986:	f000 fc11 	bl	80101ac <__pow5mult>
 800f98a:	464a      	mov	r2, r9
 800f98c:	4601      	mov	r1, r0
 800f98e:	4605      	mov	r5, r0
 800f990:	4658      	mov	r0, fp
 800f992:	f000 fb61 	bl	8010058 <__multiply>
 800f996:	4649      	mov	r1, r9
 800f998:	9004      	str	r0, [sp, #16]
 800f99a:	4658      	mov	r0, fp
 800f99c:	f000 fa92 	bl	800fec4 <_Bfree>
 800f9a0:	9b04      	ldr	r3, [sp, #16]
 800f9a2:	4699      	mov	r9, r3
 800f9a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f9a6:	1b1a      	subs	r2, r3, r4
 800f9a8:	d004      	beq.n	800f9b4 <_dtoa_r+0x78c>
 800f9aa:	4649      	mov	r1, r9
 800f9ac:	4658      	mov	r0, fp
 800f9ae:	f000 fbfd 	bl	80101ac <__pow5mult>
 800f9b2:	4681      	mov	r9, r0
 800f9b4:	2101      	movs	r1, #1
 800f9b6:	4658      	mov	r0, fp
 800f9b8:	f000 fb38 	bl	801002c <__i2b>
 800f9bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f9be:	4604      	mov	r4, r0
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	f000 81cf 	beq.w	800fd64 <_dtoa_r+0xb3c>
 800f9c6:	461a      	mov	r2, r3
 800f9c8:	4601      	mov	r1, r0
 800f9ca:	4658      	mov	r0, fp
 800f9cc:	f000 fbee 	bl	80101ac <__pow5mult>
 800f9d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f9d2:	2b01      	cmp	r3, #1
 800f9d4:	4604      	mov	r4, r0
 800f9d6:	f300 8095 	bgt.w	800fb04 <_dtoa_r+0x8dc>
 800f9da:	9b02      	ldr	r3, [sp, #8]
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	f040 8087 	bne.w	800faf0 <_dtoa_r+0x8c8>
 800f9e2:	9b03      	ldr	r3, [sp, #12]
 800f9e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	f040 8089 	bne.w	800fb00 <_dtoa_r+0x8d8>
 800f9ee:	9b03      	ldr	r3, [sp, #12]
 800f9f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f9f4:	0d1b      	lsrs	r3, r3, #20
 800f9f6:	051b      	lsls	r3, r3, #20
 800f9f8:	b12b      	cbz	r3, 800fa06 <_dtoa_r+0x7de>
 800f9fa:	9b08      	ldr	r3, [sp, #32]
 800f9fc:	3301      	adds	r3, #1
 800f9fe:	9308      	str	r3, [sp, #32]
 800fa00:	f108 0801 	add.w	r8, r8, #1
 800fa04:	2301      	movs	r3, #1
 800fa06:	930a      	str	r3, [sp, #40]	@ 0x28
 800fa08:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	f000 81b0 	beq.w	800fd70 <_dtoa_r+0xb48>
 800fa10:	6923      	ldr	r3, [r4, #16]
 800fa12:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800fa16:	6918      	ldr	r0, [r3, #16]
 800fa18:	f000 fabc 	bl	800ff94 <__hi0bits>
 800fa1c:	f1c0 0020 	rsb	r0, r0, #32
 800fa20:	9b08      	ldr	r3, [sp, #32]
 800fa22:	4418      	add	r0, r3
 800fa24:	f010 001f 	ands.w	r0, r0, #31
 800fa28:	d077      	beq.n	800fb1a <_dtoa_r+0x8f2>
 800fa2a:	f1c0 0320 	rsb	r3, r0, #32
 800fa2e:	2b04      	cmp	r3, #4
 800fa30:	dd6b      	ble.n	800fb0a <_dtoa_r+0x8e2>
 800fa32:	9b08      	ldr	r3, [sp, #32]
 800fa34:	f1c0 001c 	rsb	r0, r0, #28
 800fa38:	4403      	add	r3, r0
 800fa3a:	4480      	add	r8, r0
 800fa3c:	4406      	add	r6, r0
 800fa3e:	9308      	str	r3, [sp, #32]
 800fa40:	f1b8 0f00 	cmp.w	r8, #0
 800fa44:	dd05      	ble.n	800fa52 <_dtoa_r+0x82a>
 800fa46:	4649      	mov	r1, r9
 800fa48:	4642      	mov	r2, r8
 800fa4a:	4658      	mov	r0, fp
 800fa4c:	f000 fc08 	bl	8010260 <__lshift>
 800fa50:	4681      	mov	r9, r0
 800fa52:	9b08      	ldr	r3, [sp, #32]
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	dd05      	ble.n	800fa64 <_dtoa_r+0x83c>
 800fa58:	4621      	mov	r1, r4
 800fa5a:	461a      	mov	r2, r3
 800fa5c:	4658      	mov	r0, fp
 800fa5e:	f000 fbff 	bl	8010260 <__lshift>
 800fa62:	4604      	mov	r4, r0
 800fa64:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d059      	beq.n	800fb1e <_dtoa_r+0x8f6>
 800fa6a:	4621      	mov	r1, r4
 800fa6c:	4648      	mov	r0, r9
 800fa6e:	f000 fc63 	bl	8010338 <__mcmp>
 800fa72:	2800      	cmp	r0, #0
 800fa74:	da53      	bge.n	800fb1e <_dtoa_r+0x8f6>
 800fa76:	1e7b      	subs	r3, r7, #1
 800fa78:	9304      	str	r3, [sp, #16]
 800fa7a:	4649      	mov	r1, r9
 800fa7c:	2300      	movs	r3, #0
 800fa7e:	220a      	movs	r2, #10
 800fa80:	4658      	mov	r0, fp
 800fa82:	f000 fa41 	bl	800ff08 <__multadd>
 800fa86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fa88:	4681      	mov	r9, r0
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	f000 8172 	beq.w	800fd74 <_dtoa_r+0xb4c>
 800fa90:	2300      	movs	r3, #0
 800fa92:	4629      	mov	r1, r5
 800fa94:	220a      	movs	r2, #10
 800fa96:	4658      	mov	r0, fp
 800fa98:	f000 fa36 	bl	800ff08 <__multadd>
 800fa9c:	9b00      	ldr	r3, [sp, #0]
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	4605      	mov	r5, r0
 800faa2:	dc67      	bgt.n	800fb74 <_dtoa_r+0x94c>
 800faa4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800faa6:	2b02      	cmp	r3, #2
 800faa8:	dc41      	bgt.n	800fb2e <_dtoa_r+0x906>
 800faaa:	e063      	b.n	800fb74 <_dtoa_r+0x94c>
 800faac:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800faae:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800fab2:	e746      	b.n	800f942 <_dtoa_r+0x71a>
 800fab4:	9b07      	ldr	r3, [sp, #28]
 800fab6:	1e5c      	subs	r4, r3, #1
 800fab8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800faba:	42a3      	cmp	r3, r4
 800fabc:	bfbf      	itttt	lt
 800fabe:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800fac0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800fac2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800fac4:	1ae3      	sublt	r3, r4, r3
 800fac6:	bfb4      	ite	lt
 800fac8:	18d2      	addlt	r2, r2, r3
 800faca:	1b1c      	subge	r4, r3, r4
 800facc:	9b07      	ldr	r3, [sp, #28]
 800face:	bfbc      	itt	lt
 800fad0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800fad2:	2400      	movlt	r4, #0
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	bfb5      	itete	lt
 800fad8:	eba8 0603 	sublt.w	r6, r8, r3
 800fadc:	9b07      	ldrge	r3, [sp, #28]
 800fade:	2300      	movlt	r3, #0
 800fae0:	4646      	movge	r6, r8
 800fae2:	e730      	b.n	800f946 <_dtoa_r+0x71e>
 800fae4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800fae6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800fae8:	4646      	mov	r6, r8
 800faea:	e735      	b.n	800f958 <_dtoa_r+0x730>
 800faec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800faee:	e75c      	b.n	800f9aa <_dtoa_r+0x782>
 800faf0:	2300      	movs	r3, #0
 800faf2:	e788      	b.n	800fa06 <_dtoa_r+0x7de>
 800faf4:	3fe00000 	.word	0x3fe00000
 800faf8:	40240000 	.word	0x40240000
 800fafc:	40140000 	.word	0x40140000
 800fb00:	9b02      	ldr	r3, [sp, #8]
 800fb02:	e780      	b.n	800fa06 <_dtoa_r+0x7de>
 800fb04:	2300      	movs	r3, #0
 800fb06:	930a      	str	r3, [sp, #40]	@ 0x28
 800fb08:	e782      	b.n	800fa10 <_dtoa_r+0x7e8>
 800fb0a:	d099      	beq.n	800fa40 <_dtoa_r+0x818>
 800fb0c:	9a08      	ldr	r2, [sp, #32]
 800fb0e:	331c      	adds	r3, #28
 800fb10:	441a      	add	r2, r3
 800fb12:	4498      	add	r8, r3
 800fb14:	441e      	add	r6, r3
 800fb16:	9208      	str	r2, [sp, #32]
 800fb18:	e792      	b.n	800fa40 <_dtoa_r+0x818>
 800fb1a:	4603      	mov	r3, r0
 800fb1c:	e7f6      	b.n	800fb0c <_dtoa_r+0x8e4>
 800fb1e:	9b07      	ldr	r3, [sp, #28]
 800fb20:	9704      	str	r7, [sp, #16]
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	dc20      	bgt.n	800fb68 <_dtoa_r+0x940>
 800fb26:	9300      	str	r3, [sp, #0]
 800fb28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fb2a:	2b02      	cmp	r3, #2
 800fb2c:	dd1e      	ble.n	800fb6c <_dtoa_r+0x944>
 800fb2e:	9b00      	ldr	r3, [sp, #0]
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	f47f aec0 	bne.w	800f8b6 <_dtoa_r+0x68e>
 800fb36:	4621      	mov	r1, r4
 800fb38:	2205      	movs	r2, #5
 800fb3a:	4658      	mov	r0, fp
 800fb3c:	f000 f9e4 	bl	800ff08 <__multadd>
 800fb40:	4601      	mov	r1, r0
 800fb42:	4604      	mov	r4, r0
 800fb44:	4648      	mov	r0, r9
 800fb46:	f000 fbf7 	bl	8010338 <__mcmp>
 800fb4a:	2800      	cmp	r0, #0
 800fb4c:	f77f aeb3 	ble.w	800f8b6 <_dtoa_r+0x68e>
 800fb50:	4656      	mov	r6, sl
 800fb52:	2331      	movs	r3, #49	@ 0x31
 800fb54:	f806 3b01 	strb.w	r3, [r6], #1
 800fb58:	9b04      	ldr	r3, [sp, #16]
 800fb5a:	3301      	adds	r3, #1
 800fb5c:	9304      	str	r3, [sp, #16]
 800fb5e:	e6ae      	b.n	800f8be <_dtoa_r+0x696>
 800fb60:	9c07      	ldr	r4, [sp, #28]
 800fb62:	9704      	str	r7, [sp, #16]
 800fb64:	4625      	mov	r5, r4
 800fb66:	e7f3      	b.n	800fb50 <_dtoa_r+0x928>
 800fb68:	9b07      	ldr	r3, [sp, #28]
 800fb6a:	9300      	str	r3, [sp, #0]
 800fb6c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	f000 8104 	beq.w	800fd7c <_dtoa_r+0xb54>
 800fb74:	2e00      	cmp	r6, #0
 800fb76:	dd05      	ble.n	800fb84 <_dtoa_r+0x95c>
 800fb78:	4629      	mov	r1, r5
 800fb7a:	4632      	mov	r2, r6
 800fb7c:	4658      	mov	r0, fp
 800fb7e:	f000 fb6f 	bl	8010260 <__lshift>
 800fb82:	4605      	mov	r5, r0
 800fb84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d05a      	beq.n	800fc40 <_dtoa_r+0xa18>
 800fb8a:	6869      	ldr	r1, [r5, #4]
 800fb8c:	4658      	mov	r0, fp
 800fb8e:	f000 f959 	bl	800fe44 <_Balloc>
 800fb92:	4606      	mov	r6, r0
 800fb94:	b928      	cbnz	r0, 800fba2 <_dtoa_r+0x97a>
 800fb96:	4b84      	ldr	r3, [pc, #528]	@ (800fda8 <_dtoa_r+0xb80>)
 800fb98:	4602      	mov	r2, r0
 800fb9a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800fb9e:	f7ff bb5a 	b.w	800f256 <_dtoa_r+0x2e>
 800fba2:	692a      	ldr	r2, [r5, #16]
 800fba4:	3202      	adds	r2, #2
 800fba6:	0092      	lsls	r2, r2, #2
 800fba8:	f105 010c 	add.w	r1, r5, #12
 800fbac:	300c      	adds	r0, #12
 800fbae:	f7ff faa2 	bl	800f0f6 <memcpy>
 800fbb2:	2201      	movs	r2, #1
 800fbb4:	4631      	mov	r1, r6
 800fbb6:	4658      	mov	r0, fp
 800fbb8:	f000 fb52 	bl	8010260 <__lshift>
 800fbbc:	f10a 0301 	add.w	r3, sl, #1
 800fbc0:	9307      	str	r3, [sp, #28]
 800fbc2:	9b00      	ldr	r3, [sp, #0]
 800fbc4:	4453      	add	r3, sl
 800fbc6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fbc8:	9b02      	ldr	r3, [sp, #8]
 800fbca:	f003 0301 	and.w	r3, r3, #1
 800fbce:	462f      	mov	r7, r5
 800fbd0:	930a      	str	r3, [sp, #40]	@ 0x28
 800fbd2:	4605      	mov	r5, r0
 800fbd4:	9b07      	ldr	r3, [sp, #28]
 800fbd6:	4621      	mov	r1, r4
 800fbd8:	3b01      	subs	r3, #1
 800fbda:	4648      	mov	r0, r9
 800fbdc:	9300      	str	r3, [sp, #0]
 800fbde:	f7ff fa98 	bl	800f112 <quorem>
 800fbe2:	4639      	mov	r1, r7
 800fbe4:	9002      	str	r0, [sp, #8]
 800fbe6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800fbea:	4648      	mov	r0, r9
 800fbec:	f000 fba4 	bl	8010338 <__mcmp>
 800fbf0:	462a      	mov	r2, r5
 800fbf2:	9008      	str	r0, [sp, #32]
 800fbf4:	4621      	mov	r1, r4
 800fbf6:	4658      	mov	r0, fp
 800fbf8:	f000 fbba 	bl	8010370 <__mdiff>
 800fbfc:	68c2      	ldr	r2, [r0, #12]
 800fbfe:	4606      	mov	r6, r0
 800fc00:	bb02      	cbnz	r2, 800fc44 <_dtoa_r+0xa1c>
 800fc02:	4601      	mov	r1, r0
 800fc04:	4648      	mov	r0, r9
 800fc06:	f000 fb97 	bl	8010338 <__mcmp>
 800fc0a:	4602      	mov	r2, r0
 800fc0c:	4631      	mov	r1, r6
 800fc0e:	4658      	mov	r0, fp
 800fc10:	920e      	str	r2, [sp, #56]	@ 0x38
 800fc12:	f000 f957 	bl	800fec4 <_Bfree>
 800fc16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fc18:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fc1a:	9e07      	ldr	r6, [sp, #28]
 800fc1c:	ea43 0102 	orr.w	r1, r3, r2
 800fc20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fc22:	4319      	orrs	r1, r3
 800fc24:	d110      	bne.n	800fc48 <_dtoa_r+0xa20>
 800fc26:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800fc2a:	d029      	beq.n	800fc80 <_dtoa_r+0xa58>
 800fc2c:	9b08      	ldr	r3, [sp, #32]
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	dd02      	ble.n	800fc38 <_dtoa_r+0xa10>
 800fc32:	9b02      	ldr	r3, [sp, #8]
 800fc34:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800fc38:	9b00      	ldr	r3, [sp, #0]
 800fc3a:	f883 8000 	strb.w	r8, [r3]
 800fc3e:	e63f      	b.n	800f8c0 <_dtoa_r+0x698>
 800fc40:	4628      	mov	r0, r5
 800fc42:	e7bb      	b.n	800fbbc <_dtoa_r+0x994>
 800fc44:	2201      	movs	r2, #1
 800fc46:	e7e1      	b.n	800fc0c <_dtoa_r+0x9e4>
 800fc48:	9b08      	ldr	r3, [sp, #32]
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	db04      	blt.n	800fc58 <_dtoa_r+0xa30>
 800fc4e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800fc50:	430b      	orrs	r3, r1
 800fc52:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800fc54:	430b      	orrs	r3, r1
 800fc56:	d120      	bne.n	800fc9a <_dtoa_r+0xa72>
 800fc58:	2a00      	cmp	r2, #0
 800fc5a:	dded      	ble.n	800fc38 <_dtoa_r+0xa10>
 800fc5c:	4649      	mov	r1, r9
 800fc5e:	2201      	movs	r2, #1
 800fc60:	4658      	mov	r0, fp
 800fc62:	f000 fafd 	bl	8010260 <__lshift>
 800fc66:	4621      	mov	r1, r4
 800fc68:	4681      	mov	r9, r0
 800fc6a:	f000 fb65 	bl	8010338 <__mcmp>
 800fc6e:	2800      	cmp	r0, #0
 800fc70:	dc03      	bgt.n	800fc7a <_dtoa_r+0xa52>
 800fc72:	d1e1      	bne.n	800fc38 <_dtoa_r+0xa10>
 800fc74:	f018 0f01 	tst.w	r8, #1
 800fc78:	d0de      	beq.n	800fc38 <_dtoa_r+0xa10>
 800fc7a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800fc7e:	d1d8      	bne.n	800fc32 <_dtoa_r+0xa0a>
 800fc80:	9a00      	ldr	r2, [sp, #0]
 800fc82:	2339      	movs	r3, #57	@ 0x39
 800fc84:	7013      	strb	r3, [r2, #0]
 800fc86:	4633      	mov	r3, r6
 800fc88:	461e      	mov	r6, r3
 800fc8a:	3b01      	subs	r3, #1
 800fc8c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800fc90:	2a39      	cmp	r2, #57	@ 0x39
 800fc92:	d052      	beq.n	800fd3a <_dtoa_r+0xb12>
 800fc94:	3201      	adds	r2, #1
 800fc96:	701a      	strb	r2, [r3, #0]
 800fc98:	e612      	b.n	800f8c0 <_dtoa_r+0x698>
 800fc9a:	2a00      	cmp	r2, #0
 800fc9c:	dd07      	ble.n	800fcae <_dtoa_r+0xa86>
 800fc9e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800fca2:	d0ed      	beq.n	800fc80 <_dtoa_r+0xa58>
 800fca4:	9a00      	ldr	r2, [sp, #0]
 800fca6:	f108 0301 	add.w	r3, r8, #1
 800fcaa:	7013      	strb	r3, [r2, #0]
 800fcac:	e608      	b.n	800f8c0 <_dtoa_r+0x698>
 800fcae:	9b07      	ldr	r3, [sp, #28]
 800fcb0:	9a07      	ldr	r2, [sp, #28]
 800fcb2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800fcb6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fcb8:	4293      	cmp	r3, r2
 800fcba:	d028      	beq.n	800fd0e <_dtoa_r+0xae6>
 800fcbc:	4649      	mov	r1, r9
 800fcbe:	2300      	movs	r3, #0
 800fcc0:	220a      	movs	r2, #10
 800fcc2:	4658      	mov	r0, fp
 800fcc4:	f000 f920 	bl	800ff08 <__multadd>
 800fcc8:	42af      	cmp	r7, r5
 800fcca:	4681      	mov	r9, r0
 800fccc:	f04f 0300 	mov.w	r3, #0
 800fcd0:	f04f 020a 	mov.w	r2, #10
 800fcd4:	4639      	mov	r1, r7
 800fcd6:	4658      	mov	r0, fp
 800fcd8:	d107      	bne.n	800fcea <_dtoa_r+0xac2>
 800fcda:	f000 f915 	bl	800ff08 <__multadd>
 800fcde:	4607      	mov	r7, r0
 800fce0:	4605      	mov	r5, r0
 800fce2:	9b07      	ldr	r3, [sp, #28]
 800fce4:	3301      	adds	r3, #1
 800fce6:	9307      	str	r3, [sp, #28]
 800fce8:	e774      	b.n	800fbd4 <_dtoa_r+0x9ac>
 800fcea:	f000 f90d 	bl	800ff08 <__multadd>
 800fcee:	4629      	mov	r1, r5
 800fcf0:	4607      	mov	r7, r0
 800fcf2:	2300      	movs	r3, #0
 800fcf4:	220a      	movs	r2, #10
 800fcf6:	4658      	mov	r0, fp
 800fcf8:	f000 f906 	bl	800ff08 <__multadd>
 800fcfc:	4605      	mov	r5, r0
 800fcfe:	e7f0      	b.n	800fce2 <_dtoa_r+0xaba>
 800fd00:	9b00      	ldr	r3, [sp, #0]
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	bfcc      	ite	gt
 800fd06:	461e      	movgt	r6, r3
 800fd08:	2601      	movle	r6, #1
 800fd0a:	4456      	add	r6, sl
 800fd0c:	2700      	movs	r7, #0
 800fd0e:	4649      	mov	r1, r9
 800fd10:	2201      	movs	r2, #1
 800fd12:	4658      	mov	r0, fp
 800fd14:	f000 faa4 	bl	8010260 <__lshift>
 800fd18:	4621      	mov	r1, r4
 800fd1a:	4681      	mov	r9, r0
 800fd1c:	f000 fb0c 	bl	8010338 <__mcmp>
 800fd20:	2800      	cmp	r0, #0
 800fd22:	dcb0      	bgt.n	800fc86 <_dtoa_r+0xa5e>
 800fd24:	d102      	bne.n	800fd2c <_dtoa_r+0xb04>
 800fd26:	f018 0f01 	tst.w	r8, #1
 800fd2a:	d1ac      	bne.n	800fc86 <_dtoa_r+0xa5e>
 800fd2c:	4633      	mov	r3, r6
 800fd2e:	461e      	mov	r6, r3
 800fd30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fd34:	2a30      	cmp	r2, #48	@ 0x30
 800fd36:	d0fa      	beq.n	800fd2e <_dtoa_r+0xb06>
 800fd38:	e5c2      	b.n	800f8c0 <_dtoa_r+0x698>
 800fd3a:	459a      	cmp	sl, r3
 800fd3c:	d1a4      	bne.n	800fc88 <_dtoa_r+0xa60>
 800fd3e:	9b04      	ldr	r3, [sp, #16]
 800fd40:	3301      	adds	r3, #1
 800fd42:	9304      	str	r3, [sp, #16]
 800fd44:	2331      	movs	r3, #49	@ 0x31
 800fd46:	f88a 3000 	strb.w	r3, [sl]
 800fd4a:	e5b9      	b.n	800f8c0 <_dtoa_r+0x698>
 800fd4c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800fd4e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800fdac <_dtoa_r+0xb84>
 800fd52:	b11b      	cbz	r3, 800fd5c <_dtoa_r+0xb34>
 800fd54:	f10a 0308 	add.w	r3, sl, #8
 800fd58:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800fd5a:	6013      	str	r3, [r2, #0]
 800fd5c:	4650      	mov	r0, sl
 800fd5e:	b019      	add	sp, #100	@ 0x64
 800fd60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fd66:	2b01      	cmp	r3, #1
 800fd68:	f77f ae37 	ble.w	800f9da <_dtoa_r+0x7b2>
 800fd6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fd6e:	930a      	str	r3, [sp, #40]	@ 0x28
 800fd70:	2001      	movs	r0, #1
 800fd72:	e655      	b.n	800fa20 <_dtoa_r+0x7f8>
 800fd74:	9b00      	ldr	r3, [sp, #0]
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	f77f aed6 	ble.w	800fb28 <_dtoa_r+0x900>
 800fd7c:	4656      	mov	r6, sl
 800fd7e:	4621      	mov	r1, r4
 800fd80:	4648      	mov	r0, r9
 800fd82:	f7ff f9c6 	bl	800f112 <quorem>
 800fd86:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800fd8a:	f806 8b01 	strb.w	r8, [r6], #1
 800fd8e:	9b00      	ldr	r3, [sp, #0]
 800fd90:	eba6 020a 	sub.w	r2, r6, sl
 800fd94:	4293      	cmp	r3, r2
 800fd96:	ddb3      	ble.n	800fd00 <_dtoa_r+0xad8>
 800fd98:	4649      	mov	r1, r9
 800fd9a:	2300      	movs	r3, #0
 800fd9c:	220a      	movs	r2, #10
 800fd9e:	4658      	mov	r0, fp
 800fda0:	f000 f8b2 	bl	800ff08 <__multadd>
 800fda4:	4681      	mov	r9, r0
 800fda6:	e7ea      	b.n	800fd7e <_dtoa_r+0xb56>
 800fda8:	0801113a 	.word	0x0801113a
 800fdac:	080110be 	.word	0x080110be

0800fdb0 <_free_r>:
 800fdb0:	b538      	push	{r3, r4, r5, lr}
 800fdb2:	4605      	mov	r5, r0
 800fdb4:	2900      	cmp	r1, #0
 800fdb6:	d041      	beq.n	800fe3c <_free_r+0x8c>
 800fdb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fdbc:	1f0c      	subs	r4, r1, #4
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	bfb8      	it	lt
 800fdc2:	18e4      	addlt	r4, r4, r3
 800fdc4:	f7fe fa9a 	bl	800e2fc <__malloc_lock>
 800fdc8:	4a1d      	ldr	r2, [pc, #116]	@ (800fe40 <_free_r+0x90>)
 800fdca:	6813      	ldr	r3, [r2, #0]
 800fdcc:	b933      	cbnz	r3, 800fddc <_free_r+0x2c>
 800fdce:	6063      	str	r3, [r4, #4]
 800fdd0:	6014      	str	r4, [r2, #0]
 800fdd2:	4628      	mov	r0, r5
 800fdd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fdd8:	f7fe ba96 	b.w	800e308 <__malloc_unlock>
 800fddc:	42a3      	cmp	r3, r4
 800fdde:	d908      	bls.n	800fdf2 <_free_r+0x42>
 800fde0:	6820      	ldr	r0, [r4, #0]
 800fde2:	1821      	adds	r1, r4, r0
 800fde4:	428b      	cmp	r3, r1
 800fde6:	bf01      	itttt	eq
 800fde8:	6819      	ldreq	r1, [r3, #0]
 800fdea:	685b      	ldreq	r3, [r3, #4]
 800fdec:	1809      	addeq	r1, r1, r0
 800fdee:	6021      	streq	r1, [r4, #0]
 800fdf0:	e7ed      	b.n	800fdce <_free_r+0x1e>
 800fdf2:	461a      	mov	r2, r3
 800fdf4:	685b      	ldr	r3, [r3, #4]
 800fdf6:	b10b      	cbz	r3, 800fdfc <_free_r+0x4c>
 800fdf8:	42a3      	cmp	r3, r4
 800fdfa:	d9fa      	bls.n	800fdf2 <_free_r+0x42>
 800fdfc:	6811      	ldr	r1, [r2, #0]
 800fdfe:	1850      	adds	r0, r2, r1
 800fe00:	42a0      	cmp	r0, r4
 800fe02:	d10b      	bne.n	800fe1c <_free_r+0x6c>
 800fe04:	6820      	ldr	r0, [r4, #0]
 800fe06:	4401      	add	r1, r0
 800fe08:	1850      	adds	r0, r2, r1
 800fe0a:	4283      	cmp	r3, r0
 800fe0c:	6011      	str	r1, [r2, #0]
 800fe0e:	d1e0      	bne.n	800fdd2 <_free_r+0x22>
 800fe10:	6818      	ldr	r0, [r3, #0]
 800fe12:	685b      	ldr	r3, [r3, #4]
 800fe14:	6053      	str	r3, [r2, #4]
 800fe16:	4408      	add	r0, r1
 800fe18:	6010      	str	r0, [r2, #0]
 800fe1a:	e7da      	b.n	800fdd2 <_free_r+0x22>
 800fe1c:	d902      	bls.n	800fe24 <_free_r+0x74>
 800fe1e:	230c      	movs	r3, #12
 800fe20:	602b      	str	r3, [r5, #0]
 800fe22:	e7d6      	b.n	800fdd2 <_free_r+0x22>
 800fe24:	6820      	ldr	r0, [r4, #0]
 800fe26:	1821      	adds	r1, r4, r0
 800fe28:	428b      	cmp	r3, r1
 800fe2a:	bf04      	itt	eq
 800fe2c:	6819      	ldreq	r1, [r3, #0]
 800fe2e:	685b      	ldreq	r3, [r3, #4]
 800fe30:	6063      	str	r3, [r4, #4]
 800fe32:	bf04      	itt	eq
 800fe34:	1809      	addeq	r1, r1, r0
 800fe36:	6021      	streq	r1, [r4, #0]
 800fe38:	6054      	str	r4, [r2, #4]
 800fe3a:	e7ca      	b.n	800fdd2 <_free_r+0x22>
 800fe3c:	bd38      	pop	{r3, r4, r5, pc}
 800fe3e:	bf00      	nop
 800fe40:	2000562c 	.word	0x2000562c

0800fe44 <_Balloc>:
 800fe44:	b570      	push	{r4, r5, r6, lr}
 800fe46:	69c6      	ldr	r6, [r0, #28]
 800fe48:	4604      	mov	r4, r0
 800fe4a:	460d      	mov	r5, r1
 800fe4c:	b976      	cbnz	r6, 800fe6c <_Balloc+0x28>
 800fe4e:	2010      	movs	r0, #16
 800fe50:	f7fe f9aa 	bl	800e1a8 <malloc>
 800fe54:	4602      	mov	r2, r0
 800fe56:	61e0      	str	r0, [r4, #28]
 800fe58:	b920      	cbnz	r0, 800fe64 <_Balloc+0x20>
 800fe5a:	4b18      	ldr	r3, [pc, #96]	@ (800febc <_Balloc+0x78>)
 800fe5c:	4818      	ldr	r0, [pc, #96]	@ (800fec0 <_Balloc+0x7c>)
 800fe5e:	216b      	movs	r1, #107	@ 0x6b
 800fe60:	f000 fde4 	bl	8010a2c <__assert_func>
 800fe64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fe68:	6006      	str	r6, [r0, #0]
 800fe6a:	60c6      	str	r6, [r0, #12]
 800fe6c:	69e6      	ldr	r6, [r4, #28]
 800fe6e:	68f3      	ldr	r3, [r6, #12]
 800fe70:	b183      	cbz	r3, 800fe94 <_Balloc+0x50>
 800fe72:	69e3      	ldr	r3, [r4, #28]
 800fe74:	68db      	ldr	r3, [r3, #12]
 800fe76:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fe7a:	b9b8      	cbnz	r0, 800feac <_Balloc+0x68>
 800fe7c:	2101      	movs	r1, #1
 800fe7e:	fa01 f605 	lsl.w	r6, r1, r5
 800fe82:	1d72      	adds	r2, r6, #5
 800fe84:	0092      	lsls	r2, r2, #2
 800fe86:	4620      	mov	r0, r4
 800fe88:	f000 fdee 	bl	8010a68 <_calloc_r>
 800fe8c:	b160      	cbz	r0, 800fea8 <_Balloc+0x64>
 800fe8e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fe92:	e00e      	b.n	800feb2 <_Balloc+0x6e>
 800fe94:	2221      	movs	r2, #33	@ 0x21
 800fe96:	2104      	movs	r1, #4
 800fe98:	4620      	mov	r0, r4
 800fe9a:	f000 fde5 	bl	8010a68 <_calloc_r>
 800fe9e:	69e3      	ldr	r3, [r4, #28]
 800fea0:	60f0      	str	r0, [r6, #12]
 800fea2:	68db      	ldr	r3, [r3, #12]
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d1e4      	bne.n	800fe72 <_Balloc+0x2e>
 800fea8:	2000      	movs	r0, #0
 800feaa:	bd70      	pop	{r4, r5, r6, pc}
 800feac:	6802      	ldr	r2, [r0, #0]
 800feae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800feb2:	2300      	movs	r3, #0
 800feb4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800feb8:	e7f7      	b.n	800feaa <_Balloc+0x66>
 800feba:	bf00      	nop
 800febc:	080110cb 	.word	0x080110cb
 800fec0:	0801114b 	.word	0x0801114b

0800fec4 <_Bfree>:
 800fec4:	b570      	push	{r4, r5, r6, lr}
 800fec6:	69c6      	ldr	r6, [r0, #28]
 800fec8:	4605      	mov	r5, r0
 800feca:	460c      	mov	r4, r1
 800fecc:	b976      	cbnz	r6, 800feec <_Bfree+0x28>
 800fece:	2010      	movs	r0, #16
 800fed0:	f7fe f96a 	bl	800e1a8 <malloc>
 800fed4:	4602      	mov	r2, r0
 800fed6:	61e8      	str	r0, [r5, #28]
 800fed8:	b920      	cbnz	r0, 800fee4 <_Bfree+0x20>
 800feda:	4b09      	ldr	r3, [pc, #36]	@ (800ff00 <_Bfree+0x3c>)
 800fedc:	4809      	ldr	r0, [pc, #36]	@ (800ff04 <_Bfree+0x40>)
 800fede:	218f      	movs	r1, #143	@ 0x8f
 800fee0:	f000 fda4 	bl	8010a2c <__assert_func>
 800fee4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fee8:	6006      	str	r6, [r0, #0]
 800feea:	60c6      	str	r6, [r0, #12]
 800feec:	b13c      	cbz	r4, 800fefe <_Bfree+0x3a>
 800feee:	69eb      	ldr	r3, [r5, #28]
 800fef0:	6862      	ldr	r2, [r4, #4]
 800fef2:	68db      	ldr	r3, [r3, #12]
 800fef4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fef8:	6021      	str	r1, [r4, #0]
 800fefa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fefe:	bd70      	pop	{r4, r5, r6, pc}
 800ff00:	080110cb 	.word	0x080110cb
 800ff04:	0801114b 	.word	0x0801114b

0800ff08 <__multadd>:
 800ff08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff0c:	690d      	ldr	r5, [r1, #16]
 800ff0e:	4607      	mov	r7, r0
 800ff10:	460c      	mov	r4, r1
 800ff12:	461e      	mov	r6, r3
 800ff14:	f101 0c14 	add.w	ip, r1, #20
 800ff18:	2000      	movs	r0, #0
 800ff1a:	f8dc 3000 	ldr.w	r3, [ip]
 800ff1e:	b299      	uxth	r1, r3
 800ff20:	fb02 6101 	mla	r1, r2, r1, r6
 800ff24:	0c1e      	lsrs	r6, r3, #16
 800ff26:	0c0b      	lsrs	r3, r1, #16
 800ff28:	fb02 3306 	mla	r3, r2, r6, r3
 800ff2c:	b289      	uxth	r1, r1
 800ff2e:	3001      	adds	r0, #1
 800ff30:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ff34:	4285      	cmp	r5, r0
 800ff36:	f84c 1b04 	str.w	r1, [ip], #4
 800ff3a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ff3e:	dcec      	bgt.n	800ff1a <__multadd+0x12>
 800ff40:	b30e      	cbz	r6, 800ff86 <__multadd+0x7e>
 800ff42:	68a3      	ldr	r3, [r4, #8]
 800ff44:	42ab      	cmp	r3, r5
 800ff46:	dc19      	bgt.n	800ff7c <__multadd+0x74>
 800ff48:	6861      	ldr	r1, [r4, #4]
 800ff4a:	4638      	mov	r0, r7
 800ff4c:	3101      	adds	r1, #1
 800ff4e:	f7ff ff79 	bl	800fe44 <_Balloc>
 800ff52:	4680      	mov	r8, r0
 800ff54:	b928      	cbnz	r0, 800ff62 <__multadd+0x5a>
 800ff56:	4602      	mov	r2, r0
 800ff58:	4b0c      	ldr	r3, [pc, #48]	@ (800ff8c <__multadd+0x84>)
 800ff5a:	480d      	ldr	r0, [pc, #52]	@ (800ff90 <__multadd+0x88>)
 800ff5c:	21ba      	movs	r1, #186	@ 0xba
 800ff5e:	f000 fd65 	bl	8010a2c <__assert_func>
 800ff62:	6922      	ldr	r2, [r4, #16]
 800ff64:	3202      	adds	r2, #2
 800ff66:	f104 010c 	add.w	r1, r4, #12
 800ff6a:	0092      	lsls	r2, r2, #2
 800ff6c:	300c      	adds	r0, #12
 800ff6e:	f7ff f8c2 	bl	800f0f6 <memcpy>
 800ff72:	4621      	mov	r1, r4
 800ff74:	4638      	mov	r0, r7
 800ff76:	f7ff ffa5 	bl	800fec4 <_Bfree>
 800ff7a:	4644      	mov	r4, r8
 800ff7c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ff80:	3501      	adds	r5, #1
 800ff82:	615e      	str	r6, [r3, #20]
 800ff84:	6125      	str	r5, [r4, #16]
 800ff86:	4620      	mov	r0, r4
 800ff88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff8c:	0801113a 	.word	0x0801113a
 800ff90:	0801114b 	.word	0x0801114b

0800ff94 <__hi0bits>:
 800ff94:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ff98:	4603      	mov	r3, r0
 800ff9a:	bf36      	itet	cc
 800ff9c:	0403      	lslcc	r3, r0, #16
 800ff9e:	2000      	movcs	r0, #0
 800ffa0:	2010      	movcc	r0, #16
 800ffa2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ffa6:	bf3c      	itt	cc
 800ffa8:	021b      	lslcc	r3, r3, #8
 800ffaa:	3008      	addcc	r0, #8
 800ffac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ffb0:	bf3c      	itt	cc
 800ffb2:	011b      	lslcc	r3, r3, #4
 800ffb4:	3004      	addcc	r0, #4
 800ffb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ffba:	bf3c      	itt	cc
 800ffbc:	009b      	lslcc	r3, r3, #2
 800ffbe:	3002      	addcc	r0, #2
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	db05      	blt.n	800ffd0 <__hi0bits+0x3c>
 800ffc4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ffc8:	f100 0001 	add.w	r0, r0, #1
 800ffcc:	bf08      	it	eq
 800ffce:	2020      	moveq	r0, #32
 800ffd0:	4770      	bx	lr

0800ffd2 <__lo0bits>:
 800ffd2:	6803      	ldr	r3, [r0, #0]
 800ffd4:	4602      	mov	r2, r0
 800ffd6:	f013 0007 	ands.w	r0, r3, #7
 800ffda:	d00b      	beq.n	800fff4 <__lo0bits+0x22>
 800ffdc:	07d9      	lsls	r1, r3, #31
 800ffde:	d421      	bmi.n	8010024 <__lo0bits+0x52>
 800ffe0:	0798      	lsls	r0, r3, #30
 800ffe2:	bf49      	itett	mi
 800ffe4:	085b      	lsrmi	r3, r3, #1
 800ffe6:	089b      	lsrpl	r3, r3, #2
 800ffe8:	2001      	movmi	r0, #1
 800ffea:	6013      	strmi	r3, [r2, #0]
 800ffec:	bf5c      	itt	pl
 800ffee:	6013      	strpl	r3, [r2, #0]
 800fff0:	2002      	movpl	r0, #2
 800fff2:	4770      	bx	lr
 800fff4:	b299      	uxth	r1, r3
 800fff6:	b909      	cbnz	r1, 800fffc <__lo0bits+0x2a>
 800fff8:	0c1b      	lsrs	r3, r3, #16
 800fffa:	2010      	movs	r0, #16
 800fffc:	b2d9      	uxtb	r1, r3
 800fffe:	b909      	cbnz	r1, 8010004 <__lo0bits+0x32>
 8010000:	3008      	adds	r0, #8
 8010002:	0a1b      	lsrs	r3, r3, #8
 8010004:	0719      	lsls	r1, r3, #28
 8010006:	bf04      	itt	eq
 8010008:	091b      	lsreq	r3, r3, #4
 801000a:	3004      	addeq	r0, #4
 801000c:	0799      	lsls	r1, r3, #30
 801000e:	bf04      	itt	eq
 8010010:	089b      	lsreq	r3, r3, #2
 8010012:	3002      	addeq	r0, #2
 8010014:	07d9      	lsls	r1, r3, #31
 8010016:	d403      	bmi.n	8010020 <__lo0bits+0x4e>
 8010018:	085b      	lsrs	r3, r3, #1
 801001a:	f100 0001 	add.w	r0, r0, #1
 801001e:	d003      	beq.n	8010028 <__lo0bits+0x56>
 8010020:	6013      	str	r3, [r2, #0]
 8010022:	4770      	bx	lr
 8010024:	2000      	movs	r0, #0
 8010026:	4770      	bx	lr
 8010028:	2020      	movs	r0, #32
 801002a:	4770      	bx	lr

0801002c <__i2b>:
 801002c:	b510      	push	{r4, lr}
 801002e:	460c      	mov	r4, r1
 8010030:	2101      	movs	r1, #1
 8010032:	f7ff ff07 	bl	800fe44 <_Balloc>
 8010036:	4602      	mov	r2, r0
 8010038:	b928      	cbnz	r0, 8010046 <__i2b+0x1a>
 801003a:	4b05      	ldr	r3, [pc, #20]	@ (8010050 <__i2b+0x24>)
 801003c:	4805      	ldr	r0, [pc, #20]	@ (8010054 <__i2b+0x28>)
 801003e:	f240 1145 	movw	r1, #325	@ 0x145
 8010042:	f000 fcf3 	bl	8010a2c <__assert_func>
 8010046:	2301      	movs	r3, #1
 8010048:	6144      	str	r4, [r0, #20]
 801004a:	6103      	str	r3, [r0, #16]
 801004c:	bd10      	pop	{r4, pc}
 801004e:	bf00      	nop
 8010050:	0801113a 	.word	0x0801113a
 8010054:	0801114b 	.word	0x0801114b

08010058 <__multiply>:
 8010058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801005c:	4614      	mov	r4, r2
 801005e:	690a      	ldr	r2, [r1, #16]
 8010060:	6923      	ldr	r3, [r4, #16]
 8010062:	429a      	cmp	r2, r3
 8010064:	bfa8      	it	ge
 8010066:	4623      	movge	r3, r4
 8010068:	460f      	mov	r7, r1
 801006a:	bfa4      	itt	ge
 801006c:	460c      	movge	r4, r1
 801006e:	461f      	movge	r7, r3
 8010070:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8010074:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8010078:	68a3      	ldr	r3, [r4, #8]
 801007a:	6861      	ldr	r1, [r4, #4]
 801007c:	eb0a 0609 	add.w	r6, sl, r9
 8010080:	42b3      	cmp	r3, r6
 8010082:	b085      	sub	sp, #20
 8010084:	bfb8      	it	lt
 8010086:	3101      	addlt	r1, #1
 8010088:	f7ff fedc 	bl	800fe44 <_Balloc>
 801008c:	b930      	cbnz	r0, 801009c <__multiply+0x44>
 801008e:	4602      	mov	r2, r0
 8010090:	4b44      	ldr	r3, [pc, #272]	@ (80101a4 <__multiply+0x14c>)
 8010092:	4845      	ldr	r0, [pc, #276]	@ (80101a8 <__multiply+0x150>)
 8010094:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8010098:	f000 fcc8 	bl	8010a2c <__assert_func>
 801009c:	f100 0514 	add.w	r5, r0, #20
 80100a0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80100a4:	462b      	mov	r3, r5
 80100a6:	2200      	movs	r2, #0
 80100a8:	4543      	cmp	r3, r8
 80100aa:	d321      	bcc.n	80100f0 <__multiply+0x98>
 80100ac:	f107 0114 	add.w	r1, r7, #20
 80100b0:	f104 0214 	add.w	r2, r4, #20
 80100b4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80100b8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80100bc:	9302      	str	r3, [sp, #8]
 80100be:	1b13      	subs	r3, r2, r4
 80100c0:	3b15      	subs	r3, #21
 80100c2:	f023 0303 	bic.w	r3, r3, #3
 80100c6:	3304      	adds	r3, #4
 80100c8:	f104 0715 	add.w	r7, r4, #21
 80100cc:	42ba      	cmp	r2, r7
 80100ce:	bf38      	it	cc
 80100d0:	2304      	movcc	r3, #4
 80100d2:	9301      	str	r3, [sp, #4]
 80100d4:	9b02      	ldr	r3, [sp, #8]
 80100d6:	9103      	str	r1, [sp, #12]
 80100d8:	428b      	cmp	r3, r1
 80100da:	d80c      	bhi.n	80100f6 <__multiply+0x9e>
 80100dc:	2e00      	cmp	r6, #0
 80100de:	dd03      	ble.n	80100e8 <__multiply+0x90>
 80100e0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	d05b      	beq.n	80101a0 <__multiply+0x148>
 80100e8:	6106      	str	r6, [r0, #16]
 80100ea:	b005      	add	sp, #20
 80100ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100f0:	f843 2b04 	str.w	r2, [r3], #4
 80100f4:	e7d8      	b.n	80100a8 <__multiply+0x50>
 80100f6:	f8b1 a000 	ldrh.w	sl, [r1]
 80100fa:	f1ba 0f00 	cmp.w	sl, #0
 80100fe:	d024      	beq.n	801014a <__multiply+0xf2>
 8010100:	f104 0e14 	add.w	lr, r4, #20
 8010104:	46a9      	mov	r9, r5
 8010106:	f04f 0c00 	mov.w	ip, #0
 801010a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801010e:	f8d9 3000 	ldr.w	r3, [r9]
 8010112:	fa1f fb87 	uxth.w	fp, r7
 8010116:	b29b      	uxth	r3, r3
 8010118:	fb0a 330b 	mla	r3, sl, fp, r3
 801011c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8010120:	f8d9 7000 	ldr.w	r7, [r9]
 8010124:	4463      	add	r3, ip
 8010126:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801012a:	fb0a c70b 	mla	r7, sl, fp, ip
 801012e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8010132:	b29b      	uxth	r3, r3
 8010134:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010138:	4572      	cmp	r2, lr
 801013a:	f849 3b04 	str.w	r3, [r9], #4
 801013e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8010142:	d8e2      	bhi.n	801010a <__multiply+0xb2>
 8010144:	9b01      	ldr	r3, [sp, #4]
 8010146:	f845 c003 	str.w	ip, [r5, r3]
 801014a:	9b03      	ldr	r3, [sp, #12]
 801014c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8010150:	3104      	adds	r1, #4
 8010152:	f1b9 0f00 	cmp.w	r9, #0
 8010156:	d021      	beq.n	801019c <__multiply+0x144>
 8010158:	682b      	ldr	r3, [r5, #0]
 801015a:	f104 0c14 	add.w	ip, r4, #20
 801015e:	46ae      	mov	lr, r5
 8010160:	f04f 0a00 	mov.w	sl, #0
 8010164:	f8bc b000 	ldrh.w	fp, [ip]
 8010168:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801016c:	fb09 770b 	mla	r7, r9, fp, r7
 8010170:	4457      	add	r7, sl
 8010172:	b29b      	uxth	r3, r3
 8010174:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010178:	f84e 3b04 	str.w	r3, [lr], #4
 801017c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010180:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010184:	f8be 3000 	ldrh.w	r3, [lr]
 8010188:	fb09 330a 	mla	r3, r9, sl, r3
 801018c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8010190:	4562      	cmp	r2, ip
 8010192:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010196:	d8e5      	bhi.n	8010164 <__multiply+0x10c>
 8010198:	9f01      	ldr	r7, [sp, #4]
 801019a:	51eb      	str	r3, [r5, r7]
 801019c:	3504      	adds	r5, #4
 801019e:	e799      	b.n	80100d4 <__multiply+0x7c>
 80101a0:	3e01      	subs	r6, #1
 80101a2:	e79b      	b.n	80100dc <__multiply+0x84>
 80101a4:	0801113a 	.word	0x0801113a
 80101a8:	0801114b 	.word	0x0801114b

080101ac <__pow5mult>:
 80101ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80101b0:	4615      	mov	r5, r2
 80101b2:	f012 0203 	ands.w	r2, r2, #3
 80101b6:	4607      	mov	r7, r0
 80101b8:	460e      	mov	r6, r1
 80101ba:	d007      	beq.n	80101cc <__pow5mult+0x20>
 80101bc:	4c25      	ldr	r4, [pc, #148]	@ (8010254 <__pow5mult+0xa8>)
 80101be:	3a01      	subs	r2, #1
 80101c0:	2300      	movs	r3, #0
 80101c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80101c6:	f7ff fe9f 	bl	800ff08 <__multadd>
 80101ca:	4606      	mov	r6, r0
 80101cc:	10ad      	asrs	r5, r5, #2
 80101ce:	d03d      	beq.n	801024c <__pow5mult+0xa0>
 80101d0:	69fc      	ldr	r4, [r7, #28]
 80101d2:	b97c      	cbnz	r4, 80101f4 <__pow5mult+0x48>
 80101d4:	2010      	movs	r0, #16
 80101d6:	f7fd ffe7 	bl	800e1a8 <malloc>
 80101da:	4602      	mov	r2, r0
 80101dc:	61f8      	str	r0, [r7, #28]
 80101de:	b928      	cbnz	r0, 80101ec <__pow5mult+0x40>
 80101e0:	4b1d      	ldr	r3, [pc, #116]	@ (8010258 <__pow5mult+0xac>)
 80101e2:	481e      	ldr	r0, [pc, #120]	@ (801025c <__pow5mult+0xb0>)
 80101e4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80101e8:	f000 fc20 	bl	8010a2c <__assert_func>
 80101ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80101f0:	6004      	str	r4, [r0, #0]
 80101f2:	60c4      	str	r4, [r0, #12]
 80101f4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80101f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80101fc:	b94c      	cbnz	r4, 8010212 <__pow5mult+0x66>
 80101fe:	f240 2171 	movw	r1, #625	@ 0x271
 8010202:	4638      	mov	r0, r7
 8010204:	f7ff ff12 	bl	801002c <__i2b>
 8010208:	2300      	movs	r3, #0
 801020a:	f8c8 0008 	str.w	r0, [r8, #8]
 801020e:	4604      	mov	r4, r0
 8010210:	6003      	str	r3, [r0, #0]
 8010212:	f04f 0900 	mov.w	r9, #0
 8010216:	07eb      	lsls	r3, r5, #31
 8010218:	d50a      	bpl.n	8010230 <__pow5mult+0x84>
 801021a:	4631      	mov	r1, r6
 801021c:	4622      	mov	r2, r4
 801021e:	4638      	mov	r0, r7
 8010220:	f7ff ff1a 	bl	8010058 <__multiply>
 8010224:	4631      	mov	r1, r6
 8010226:	4680      	mov	r8, r0
 8010228:	4638      	mov	r0, r7
 801022a:	f7ff fe4b 	bl	800fec4 <_Bfree>
 801022e:	4646      	mov	r6, r8
 8010230:	106d      	asrs	r5, r5, #1
 8010232:	d00b      	beq.n	801024c <__pow5mult+0xa0>
 8010234:	6820      	ldr	r0, [r4, #0]
 8010236:	b938      	cbnz	r0, 8010248 <__pow5mult+0x9c>
 8010238:	4622      	mov	r2, r4
 801023a:	4621      	mov	r1, r4
 801023c:	4638      	mov	r0, r7
 801023e:	f7ff ff0b 	bl	8010058 <__multiply>
 8010242:	6020      	str	r0, [r4, #0]
 8010244:	f8c0 9000 	str.w	r9, [r0]
 8010248:	4604      	mov	r4, r0
 801024a:	e7e4      	b.n	8010216 <__pow5mult+0x6a>
 801024c:	4630      	mov	r0, r6
 801024e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010252:	bf00      	nop
 8010254:	080111a4 	.word	0x080111a4
 8010258:	080110cb 	.word	0x080110cb
 801025c:	0801114b 	.word	0x0801114b

08010260 <__lshift>:
 8010260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010264:	460c      	mov	r4, r1
 8010266:	6849      	ldr	r1, [r1, #4]
 8010268:	6923      	ldr	r3, [r4, #16]
 801026a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801026e:	68a3      	ldr	r3, [r4, #8]
 8010270:	4607      	mov	r7, r0
 8010272:	4691      	mov	r9, r2
 8010274:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010278:	f108 0601 	add.w	r6, r8, #1
 801027c:	42b3      	cmp	r3, r6
 801027e:	db0b      	blt.n	8010298 <__lshift+0x38>
 8010280:	4638      	mov	r0, r7
 8010282:	f7ff fddf 	bl	800fe44 <_Balloc>
 8010286:	4605      	mov	r5, r0
 8010288:	b948      	cbnz	r0, 801029e <__lshift+0x3e>
 801028a:	4602      	mov	r2, r0
 801028c:	4b28      	ldr	r3, [pc, #160]	@ (8010330 <__lshift+0xd0>)
 801028e:	4829      	ldr	r0, [pc, #164]	@ (8010334 <__lshift+0xd4>)
 8010290:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8010294:	f000 fbca 	bl	8010a2c <__assert_func>
 8010298:	3101      	adds	r1, #1
 801029a:	005b      	lsls	r3, r3, #1
 801029c:	e7ee      	b.n	801027c <__lshift+0x1c>
 801029e:	2300      	movs	r3, #0
 80102a0:	f100 0114 	add.w	r1, r0, #20
 80102a4:	f100 0210 	add.w	r2, r0, #16
 80102a8:	4618      	mov	r0, r3
 80102aa:	4553      	cmp	r3, sl
 80102ac:	db33      	blt.n	8010316 <__lshift+0xb6>
 80102ae:	6920      	ldr	r0, [r4, #16]
 80102b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80102b4:	f104 0314 	add.w	r3, r4, #20
 80102b8:	f019 091f 	ands.w	r9, r9, #31
 80102bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80102c0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80102c4:	d02b      	beq.n	801031e <__lshift+0xbe>
 80102c6:	f1c9 0e20 	rsb	lr, r9, #32
 80102ca:	468a      	mov	sl, r1
 80102cc:	2200      	movs	r2, #0
 80102ce:	6818      	ldr	r0, [r3, #0]
 80102d0:	fa00 f009 	lsl.w	r0, r0, r9
 80102d4:	4310      	orrs	r0, r2
 80102d6:	f84a 0b04 	str.w	r0, [sl], #4
 80102da:	f853 2b04 	ldr.w	r2, [r3], #4
 80102de:	459c      	cmp	ip, r3
 80102e0:	fa22 f20e 	lsr.w	r2, r2, lr
 80102e4:	d8f3      	bhi.n	80102ce <__lshift+0x6e>
 80102e6:	ebac 0304 	sub.w	r3, ip, r4
 80102ea:	3b15      	subs	r3, #21
 80102ec:	f023 0303 	bic.w	r3, r3, #3
 80102f0:	3304      	adds	r3, #4
 80102f2:	f104 0015 	add.w	r0, r4, #21
 80102f6:	4584      	cmp	ip, r0
 80102f8:	bf38      	it	cc
 80102fa:	2304      	movcc	r3, #4
 80102fc:	50ca      	str	r2, [r1, r3]
 80102fe:	b10a      	cbz	r2, 8010304 <__lshift+0xa4>
 8010300:	f108 0602 	add.w	r6, r8, #2
 8010304:	3e01      	subs	r6, #1
 8010306:	4638      	mov	r0, r7
 8010308:	612e      	str	r6, [r5, #16]
 801030a:	4621      	mov	r1, r4
 801030c:	f7ff fdda 	bl	800fec4 <_Bfree>
 8010310:	4628      	mov	r0, r5
 8010312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010316:	f842 0f04 	str.w	r0, [r2, #4]!
 801031a:	3301      	adds	r3, #1
 801031c:	e7c5      	b.n	80102aa <__lshift+0x4a>
 801031e:	3904      	subs	r1, #4
 8010320:	f853 2b04 	ldr.w	r2, [r3], #4
 8010324:	f841 2f04 	str.w	r2, [r1, #4]!
 8010328:	459c      	cmp	ip, r3
 801032a:	d8f9      	bhi.n	8010320 <__lshift+0xc0>
 801032c:	e7ea      	b.n	8010304 <__lshift+0xa4>
 801032e:	bf00      	nop
 8010330:	0801113a 	.word	0x0801113a
 8010334:	0801114b 	.word	0x0801114b

08010338 <__mcmp>:
 8010338:	690a      	ldr	r2, [r1, #16]
 801033a:	4603      	mov	r3, r0
 801033c:	6900      	ldr	r0, [r0, #16]
 801033e:	1a80      	subs	r0, r0, r2
 8010340:	b530      	push	{r4, r5, lr}
 8010342:	d10e      	bne.n	8010362 <__mcmp+0x2a>
 8010344:	3314      	adds	r3, #20
 8010346:	3114      	adds	r1, #20
 8010348:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801034c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010350:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010354:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010358:	4295      	cmp	r5, r2
 801035a:	d003      	beq.n	8010364 <__mcmp+0x2c>
 801035c:	d205      	bcs.n	801036a <__mcmp+0x32>
 801035e:	f04f 30ff 	mov.w	r0, #4294967295
 8010362:	bd30      	pop	{r4, r5, pc}
 8010364:	42a3      	cmp	r3, r4
 8010366:	d3f3      	bcc.n	8010350 <__mcmp+0x18>
 8010368:	e7fb      	b.n	8010362 <__mcmp+0x2a>
 801036a:	2001      	movs	r0, #1
 801036c:	e7f9      	b.n	8010362 <__mcmp+0x2a>
	...

08010370 <__mdiff>:
 8010370:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010374:	4689      	mov	r9, r1
 8010376:	4606      	mov	r6, r0
 8010378:	4611      	mov	r1, r2
 801037a:	4648      	mov	r0, r9
 801037c:	4614      	mov	r4, r2
 801037e:	f7ff ffdb 	bl	8010338 <__mcmp>
 8010382:	1e05      	subs	r5, r0, #0
 8010384:	d112      	bne.n	80103ac <__mdiff+0x3c>
 8010386:	4629      	mov	r1, r5
 8010388:	4630      	mov	r0, r6
 801038a:	f7ff fd5b 	bl	800fe44 <_Balloc>
 801038e:	4602      	mov	r2, r0
 8010390:	b928      	cbnz	r0, 801039e <__mdiff+0x2e>
 8010392:	4b3f      	ldr	r3, [pc, #252]	@ (8010490 <__mdiff+0x120>)
 8010394:	f240 2137 	movw	r1, #567	@ 0x237
 8010398:	483e      	ldr	r0, [pc, #248]	@ (8010494 <__mdiff+0x124>)
 801039a:	f000 fb47 	bl	8010a2c <__assert_func>
 801039e:	2301      	movs	r3, #1
 80103a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80103a4:	4610      	mov	r0, r2
 80103a6:	b003      	add	sp, #12
 80103a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103ac:	bfbc      	itt	lt
 80103ae:	464b      	movlt	r3, r9
 80103b0:	46a1      	movlt	r9, r4
 80103b2:	4630      	mov	r0, r6
 80103b4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80103b8:	bfba      	itte	lt
 80103ba:	461c      	movlt	r4, r3
 80103bc:	2501      	movlt	r5, #1
 80103be:	2500      	movge	r5, #0
 80103c0:	f7ff fd40 	bl	800fe44 <_Balloc>
 80103c4:	4602      	mov	r2, r0
 80103c6:	b918      	cbnz	r0, 80103d0 <__mdiff+0x60>
 80103c8:	4b31      	ldr	r3, [pc, #196]	@ (8010490 <__mdiff+0x120>)
 80103ca:	f240 2145 	movw	r1, #581	@ 0x245
 80103ce:	e7e3      	b.n	8010398 <__mdiff+0x28>
 80103d0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80103d4:	6926      	ldr	r6, [r4, #16]
 80103d6:	60c5      	str	r5, [r0, #12]
 80103d8:	f109 0310 	add.w	r3, r9, #16
 80103dc:	f109 0514 	add.w	r5, r9, #20
 80103e0:	f104 0e14 	add.w	lr, r4, #20
 80103e4:	f100 0b14 	add.w	fp, r0, #20
 80103e8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80103ec:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80103f0:	9301      	str	r3, [sp, #4]
 80103f2:	46d9      	mov	r9, fp
 80103f4:	f04f 0c00 	mov.w	ip, #0
 80103f8:	9b01      	ldr	r3, [sp, #4]
 80103fa:	f85e 0b04 	ldr.w	r0, [lr], #4
 80103fe:	f853 af04 	ldr.w	sl, [r3, #4]!
 8010402:	9301      	str	r3, [sp, #4]
 8010404:	fa1f f38a 	uxth.w	r3, sl
 8010408:	4619      	mov	r1, r3
 801040a:	b283      	uxth	r3, r0
 801040c:	1acb      	subs	r3, r1, r3
 801040e:	0c00      	lsrs	r0, r0, #16
 8010410:	4463      	add	r3, ip
 8010412:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8010416:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801041a:	b29b      	uxth	r3, r3
 801041c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8010420:	4576      	cmp	r6, lr
 8010422:	f849 3b04 	str.w	r3, [r9], #4
 8010426:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801042a:	d8e5      	bhi.n	80103f8 <__mdiff+0x88>
 801042c:	1b33      	subs	r3, r6, r4
 801042e:	3b15      	subs	r3, #21
 8010430:	f023 0303 	bic.w	r3, r3, #3
 8010434:	3415      	adds	r4, #21
 8010436:	3304      	adds	r3, #4
 8010438:	42a6      	cmp	r6, r4
 801043a:	bf38      	it	cc
 801043c:	2304      	movcc	r3, #4
 801043e:	441d      	add	r5, r3
 8010440:	445b      	add	r3, fp
 8010442:	461e      	mov	r6, r3
 8010444:	462c      	mov	r4, r5
 8010446:	4544      	cmp	r4, r8
 8010448:	d30e      	bcc.n	8010468 <__mdiff+0xf8>
 801044a:	f108 0103 	add.w	r1, r8, #3
 801044e:	1b49      	subs	r1, r1, r5
 8010450:	f021 0103 	bic.w	r1, r1, #3
 8010454:	3d03      	subs	r5, #3
 8010456:	45a8      	cmp	r8, r5
 8010458:	bf38      	it	cc
 801045a:	2100      	movcc	r1, #0
 801045c:	440b      	add	r3, r1
 801045e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010462:	b191      	cbz	r1, 801048a <__mdiff+0x11a>
 8010464:	6117      	str	r7, [r2, #16]
 8010466:	e79d      	b.n	80103a4 <__mdiff+0x34>
 8010468:	f854 1b04 	ldr.w	r1, [r4], #4
 801046c:	46e6      	mov	lr, ip
 801046e:	0c08      	lsrs	r0, r1, #16
 8010470:	fa1c fc81 	uxtah	ip, ip, r1
 8010474:	4471      	add	r1, lr
 8010476:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801047a:	b289      	uxth	r1, r1
 801047c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8010480:	f846 1b04 	str.w	r1, [r6], #4
 8010484:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010488:	e7dd      	b.n	8010446 <__mdiff+0xd6>
 801048a:	3f01      	subs	r7, #1
 801048c:	e7e7      	b.n	801045e <__mdiff+0xee>
 801048e:	bf00      	nop
 8010490:	0801113a 	.word	0x0801113a
 8010494:	0801114b 	.word	0x0801114b

08010498 <__d2b>:
 8010498:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801049c:	460f      	mov	r7, r1
 801049e:	2101      	movs	r1, #1
 80104a0:	ec59 8b10 	vmov	r8, r9, d0
 80104a4:	4616      	mov	r6, r2
 80104a6:	f7ff fccd 	bl	800fe44 <_Balloc>
 80104aa:	4604      	mov	r4, r0
 80104ac:	b930      	cbnz	r0, 80104bc <__d2b+0x24>
 80104ae:	4602      	mov	r2, r0
 80104b0:	4b23      	ldr	r3, [pc, #140]	@ (8010540 <__d2b+0xa8>)
 80104b2:	4824      	ldr	r0, [pc, #144]	@ (8010544 <__d2b+0xac>)
 80104b4:	f240 310f 	movw	r1, #783	@ 0x30f
 80104b8:	f000 fab8 	bl	8010a2c <__assert_func>
 80104bc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80104c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80104c4:	b10d      	cbz	r5, 80104ca <__d2b+0x32>
 80104c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80104ca:	9301      	str	r3, [sp, #4]
 80104cc:	f1b8 0300 	subs.w	r3, r8, #0
 80104d0:	d023      	beq.n	801051a <__d2b+0x82>
 80104d2:	4668      	mov	r0, sp
 80104d4:	9300      	str	r3, [sp, #0]
 80104d6:	f7ff fd7c 	bl	800ffd2 <__lo0bits>
 80104da:	e9dd 1200 	ldrd	r1, r2, [sp]
 80104de:	b1d0      	cbz	r0, 8010516 <__d2b+0x7e>
 80104e0:	f1c0 0320 	rsb	r3, r0, #32
 80104e4:	fa02 f303 	lsl.w	r3, r2, r3
 80104e8:	430b      	orrs	r3, r1
 80104ea:	40c2      	lsrs	r2, r0
 80104ec:	6163      	str	r3, [r4, #20]
 80104ee:	9201      	str	r2, [sp, #4]
 80104f0:	9b01      	ldr	r3, [sp, #4]
 80104f2:	61a3      	str	r3, [r4, #24]
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	bf0c      	ite	eq
 80104f8:	2201      	moveq	r2, #1
 80104fa:	2202      	movne	r2, #2
 80104fc:	6122      	str	r2, [r4, #16]
 80104fe:	b1a5      	cbz	r5, 801052a <__d2b+0x92>
 8010500:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8010504:	4405      	add	r5, r0
 8010506:	603d      	str	r5, [r7, #0]
 8010508:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801050c:	6030      	str	r0, [r6, #0]
 801050e:	4620      	mov	r0, r4
 8010510:	b003      	add	sp, #12
 8010512:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010516:	6161      	str	r1, [r4, #20]
 8010518:	e7ea      	b.n	80104f0 <__d2b+0x58>
 801051a:	a801      	add	r0, sp, #4
 801051c:	f7ff fd59 	bl	800ffd2 <__lo0bits>
 8010520:	9b01      	ldr	r3, [sp, #4]
 8010522:	6163      	str	r3, [r4, #20]
 8010524:	3020      	adds	r0, #32
 8010526:	2201      	movs	r2, #1
 8010528:	e7e8      	b.n	80104fc <__d2b+0x64>
 801052a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801052e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8010532:	6038      	str	r0, [r7, #0]
 8010534:	6918      	ldr	r0, [r3, #16]
 8010536:	f7ff fd2d 	bl	800ff94 <__hi0bits>
 801053a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801053e:	e7e5      	b.n	801050c <__d2b+0x74>
 8010540:	0801113a 	.word	0x0801113a
 8010544:	0801114b 	.word	0x0801114b

08010548 <__sfputc_r>:
 8010548:	6893      	ldr	r3, [r2, #8]
 801054a:	3b01      	subs	r3, #1
 801054c:	2b00      	cmp	r3, #0
 801054e:	b410      	push	{r4}
 8010550:	6093      	str	r3, [r2, #8]
 8010552:	da08      	bge.n	8010566 <__sfputc_r+0x1e>
 8010554:	6994      	ldr	r4, [r2, #24]
 8010556:	42a3      	cmp	r3, r4
 8010558:	db01      	blt.n	801055e <__sfputc_r+0x16>
 801055a:	290a      	cmp	r1, #10
 801055c:	d103      	bne.n	8010566 <__sfputc_r+0x1e>
 801055e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010562:	f7fe bca4 	b.w	800eeae <__swbuf_r>
 8010566:	6813      	ldr	r3, [r2, #0]
 8010568:	1c58      	adds	r0, r3, #1
 801056a:	6010      	str	r0, [r2, #0]
 801056c:	7019      	strb	r1, [r3, #0]
 801056e:	4608      	mov	r0, r1
 8010570:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010574:	4770      	bx	lr

08010576 <__sfputs_r>:
 8010576:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010578:	4606      	mov	r6, r0
 801057a:	460f      	mov	r7, r1
 801057c:	4614      	mov	r4, r2
 801057e:	18d5      	adds	r5, r2, r3
 8010580:	42ac      	cmp	r4, r5
 8010582:	d101      	bne.n	8010588 <__sfputs_r+0x12>
 8010584:	2000      	movs	r0, #0
 8010586:	e007      	b.n	8010598 <__sfputs_r+0x22>
 8010588:	f814 1b01 	ldrb.w	r1, [r4], #1
 801058c:	463a      	mov	r2, r7
 801058e:	4630      	mov	r0, r6
 8010590:	f7ff ffda 	bl	8010548 <__sfputc_r>
 8010594:	1c43      	adds	r3, r0, #1
 8010596:	d1f3      	bne.n	8010580 <__sfputs_r+0xa>
 8010598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801059c <_vfiprintf_r>:
 801059c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105a0:	460d      	mov	r5, r1
 80105a2:	b09d      	sub	sp, #116	@ 0x74
 80105a4:	4614      	mov	r4, r2
 80105a6:	4698      	mov	r8, r3
 80105a8:	4606      	mov	r6, r0
 80105aa:	b118      	cbz	r0, 80105b4 <_vfiprintf_r+0x18>
 80105ac:	6a03      	ldr	r3, [r0, #32]
 80105ae:	b90b      	cbnz	r3, 80105b4 <_vfiprintf_r+0x18>
 80105b0:	f7fe fb94 	bl	800ecdc <__sinit>
 80105b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80105b6:	07d9      	lsls	r1, r3, #31
 80105b8:	d405      	bmi.n	80105c6 <_vfiprintf_r+0x2a>
 80105ba:	89ab      	ldrh	r3, [r5, #12]
 80105bc:	059a      	lsls	r2, r3, #22
 80105be:	d402      	bmi.n	80105c6 <_vfiprintf_r+0x2a>
 80105c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80105c2:	f7fe fd96 	bl	800f0f2 <__retarget_lock_acquire_recursive>
 80105c6:	89ab      	ldrh	r3, [r5, #12]
 80105c8:	071b      	lsls	r3, r3, #28
 80105ca:	d501      	bpl.n	80105d0 <_vfiprintf_r+0x34>
 80105cc:	692b      	ldr	r3, [r5, #16]
 80105ce:	b99b      	cbnz	r3, 80105f8 <_vfiprintf_r+0x5c>
 80105d0:	4629      	mov	r1, r5
 80105d2:	4630      	mov	r0, r6
 80105d4:	f7fe fcaa 	bl	800ef2c <__swsetup_r>
 80105d8:	b170      	cbz	r0, 80105f8 <_vfiprintf_r+0x5c>
 80105da:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80105dc:	07dc      	lsls	r4, r3, #31
 80105de:	d504      	bpl.n	80105ea <_vfiprintf_r+0x4e>
 80105e0:	f04f 30ff 	mov.w	r0, #4294967295
 80105e4:	b01d      	add	sp, #116	@ 0x74
 80105e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105ea:	89ab      	ldrh	r3, [r5, #12]
 80105ec:	0598      	lsls	r0, r3, #22
 80105ee:	d4f7      	bmi.n	80105e0 <_vfiprintf_r+0x44>
 80105f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80105f2:	f7fe fd7f 	bl	800f0f4 <__retarget_lock_release_recursive>
 80105f6:	e7f3      	b.n	80105e0 <_vfiprintf_r+0x44>
 80105f8:	2300      	movs	r3, #0
 80105fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80105fc:	2320      	movs	r3, #32
 80105fe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010602:	f8cd 800c 	str.w	r8, [sp, #12]
 8010606:	2330      	movs	r3, #48	@ 0x30
 8010608:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80107b8 <_vfiprintf_r+0x21c>
 801060c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010610:	f04f 0901 	mov.w	r9, #1
 8010614:	4623      	mov	r3, r4
 8010616:	469a      	mov	sl, r3
 8010618:	f813 2b01 	ldrb.w	r2, [r3], #1
 801061c:	b10a      	cbz	r2, 8010622 <_vfiprintf_r+0x86>
 801061e:	2a25      	cmp	r2, #37	@ 0x25
 8010620:	d1f9      	bne.n	8010616 <_vfiprintf_r+0x7a>
 8010622:	ebba 0b04 	subs.w	fp, sl, r4
 8010626:	d00b      	beq.n	8010640 <_vfiprintf_r+0xa4>
 8010628:	465b      	mov	r3, fp
 801062a:	4622      	mov	r2, r4
 801062c:	4629      	mov	r1, r5
 801062e:	4630      	mov	r0, r6
 8010630:	f7ff ffa1 	bl	8010576 <__sfputs_r>
 8010634:	3001      	adds	r0, #1
 8010636:	f000 80a7 	beq.w	8010788 <_vfiprintf_r+0x1ec>
 801063a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801063c:	445a      	add	r2, fp
 801063e:	9209      	str	r2, [sp, #36]	@ 0x24
 8010640:	f89a 3000 	ldrb.w	r3, [sl]
 8010644:	2b00      	cmp	r3, #0
 8010646:	f000 809f 	beq.w	8010788 <_vfiprintf_r+0x1ec>
 801064a:	2300      	movs	r3, #0
 801064c:	f04f 32ff 	mov.w	r2, #4294967295
 8010650:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010654:	f10a 0a01 	add.w	sl, sl, #1
 8010658:	9304      	str	r3, [sp, #16]
 801065a:	9307      	str	r3, [sp, #28]
 801065c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010660:	931a      	str	r3, [sp, #104]	@ 0x68
 8010662:	4654      	mov	r4, sl
 8010664:	2205      	movs	r2, #5
 8010666:	f814 1b01 	ldrb.w	r1, [r4], #1
 801066a:	4853      	ldr	r0, [pc, #332]	@ (80107b8 <_vfiprintf_r+0x21c>)
 801066c:	f7ef fdd0 	bl	8000210 <memchr>
 8010670:	9a04      	ldr	r2, [sp, #16]
 8010672:	b9d8      	cbnz	r0, 80106ac <_vfiprintf_r+0x110>
 8010674:	06d1      	lsls	r1, r2, #27
 8010676:	bf44      	itt	mi
 8010678:	2320      	movmi	r3, #32
 801067a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801067e:	0713      	lsls	r3, r2, #28
 8010680:	bf44      	itt	mi
 8010682:	232b      	movmi	r3, #43	@ 0x2b
 8010684:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010688:	f89a 3000 	ldrb.w	r3, [sl]
 801068c:	2b2a      	cmp	r3, #42	@ 0x2a
 801068e:	d015      	beq.n	80106bc <_vfiprintf_r+0x120>
 8010690:	9a07      	ldr	r2, [sp, #28]
 8010692:	4654      	mov	r4, sl
 8010694:	2000      	movs	r0, #0
 8010696:	f04f 0c0a 	mov.w	ip, #10
 801069a:	4621      	mov	r1, r4
 801069c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80106a0:	3b30      	subs	r3, #48	@ 0x30
 80106a2:	2b09      	cmp	r3, #9
 80106a4:	d94b      	bls.n	801073e <_vfiprintf_r+0x1a2>
 80106a6:	b1b0      	cbz	r0, 80106d6 <_vfiprintf_r+0x13a>
 80106a8:	9207      	str	r2, [sp, #28]
 80106aa:	e014      	b.n	80106d6 <_vfiprintf_r+0x13a>
 80106ac:	eba0 0308 	sub.w	r3, r0, r8
 80106b0:	fa09 f303 	lsl.w	r3, r9, r3
 80106b4:	4313      	orrs	r3, r2
 80106b6:	9304      	str	r3, [sp, #16]
 80106b8:	46a2      	mov	sl, r4
 80106ba:	e7d2      	b.n	8010662 <_vfiprintf_r+0xc6>
 80106bc:	9b03      	ldr	r3, [sp, #12]
 80106be:	1d19      	adds	r1, r3, #4
 80106c0:	681b      	ldr	r3, [r3, #0]
 80106c2:	9103      	str	r1, [sp, #12]
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	bfbb      	ittet	lt
 80106c8:	425b      	neglt	r3, r3
 80106ca:	f042 0202 	orrlt.w	r2, r2, #2
 80106ce:	9307      	strge	r3, [sp, #28]
 80106d0:	9307      	strlt	r3, [sp, #28]
 80106d2:	bfb8      	it	lt
 80106d4:	9204      	strlt	r2, [sp, #16]
 80106d6:	7823      	ldrb	r3, [r4, #0]
 80106d8:	2b2e      	cmp	r3, #46	@ 0x2e
 80106da:	d10a      	bne.n	80106f2 <_vfiprintf_r+0x156>
 80106dc:	7863      	ldrb	r3, [r4, #1]
 80106de:	2b2a      	cmp	r3, #42	@ 0x2a
 80106e0:	d132      	bne.n	8010748 <_vfiprintf_r+0x1ac>
 80106e2:	9b03      	ldr	r3, [sp, #12]
 80106e4:	1d1a      	adds	r2, r3, #4
 80106e6:	681b      	ldr	r3, [r3, #0]
 80106e8:	9203      	str	r2, [sp, #12]
 80106ea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80106ee:	3402      	adds	r4, #2
 80106f0:	9305      	str	r3, [sp, #20]
 80106f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80107c8 <_vfiprintf_r+0x22c>
 80106f6:	7821      	ldrb	r1, [r4, #0]
 80106f8:	2203      	movs	r2, #3
 80106fa:	4650      	mov	r0, sl
 80106fc:	f7ef fd88 	bl	8000210 <memchr>
 8010700:	b138      	cbz	r0, 8010712 <_vfiprintf_r+0x176>
 8010702:	9b04      	ldr	r3, [sp, #16]
 8010704:	eba0 000a 	sub.w	r0, r0, sl
 8010708:	2240      	movs	r2, #64	@ 0x40
 801070a:	4082      	lsls	r2, r0
 801070c:	4313      	orrs	r3, r2
 801070e:	3401      	adds	r4, #1
 8010710:	9304      	str	r3, [sp, #16]
 8010712:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010716:	4829      	ldr	r0, [pc, #164]	@ (80107bc <_vfiprintf_r+0x220>)
 8010718:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801071c:	2206      	movs	r2, #6
 801071e:	f7ef fd77 	bl	8000210 <memchr>
 8010722:	2800      	cmp	r0, #0
 8010724:	d03f      	beq.n	80107a6 <_vfiprintf_r+0x20a>
 8010726:	4b26      	ldr	r3, [pc, #152]	@ (80107c0 <_vfiprintf_r+0x224>)
 8010728:	bb1b      	cbnz	r3, 8010772 <_vfiprintf_r+0x1d6>
 801072a:	9b03      	ldr	r3, [sp, #12]
 801072c:	3307      	adds	r3, #7
 801072e:	f023 0307 	bic.w	r3, r3, #7
 8010732:	3308      	adds	r3, #8
 8010734:	9303      	str	r3, [sp, #12]
 8010736:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010738:	443b      	add	r3, r7
 801073a:	9309      	str	r3, [sp, #36]	@ 0x24
 801073c:	e76a      	b.n	8010614 <_vfiprintf_r+0x78>
 801073e:	fb0c 3202 	mla	r2, ip, r2, r3
 8010742:	460c      	mov	r4, r1
 8010744:	2001      	movs	r0, #1
 8010746:	e7a8      	b.n	801069a <_vfiprintf_r+0xfe>
 8010748:	2300      	movs	r3, #0
 801074a:	3401      	adds	r4, #1
 801074c:	9305      	str	r3, [sp, #20]
 801074e:	4619      	mov	r1, r3
 8010750:	f04f 0c0a 	mov.w	ip, #10
 8010754:	4620      	mov	r0, r4
 8010756:	f810 2b01 	ldrb.w	r2, [r0], #1
 801075a:	3a30      	subs	r2, #48	@ 0x30
 801075c:	2a09      	cmp	r2, #9
 801075e:	d903      	bls.n	8010768 <_vfiprintf_r+0x1cc>
 8010760:	2b00      	cmp	r3, #0
 8010762:	d0c6      	beq.n	80106f2 <_vfiprintf_r+0x156>
 8010764:	9105      	str	r1, [sp, #20]
 8010766:	e7c4      	b.n	80106f2 <_vfiprintf_r+0x156>
 8010768:	fb0c 2101 	mla	r1, ip, r1, r2
 801076c:	4604      	mov	r4, r0
 801076e:	2301      	movs	r3, #1
 8010770:	e7f0      	b.n	8010754 <_vfiprintf_r+0x1b8>
 8010772:	ab03      	add	r3, sp, #12
 8010774:	9300      	str	r3, [sp, #0]
 8010776:	462a      	mov	r2, r5
 8010778:	4b12      	ldr	r3, [pc, #72]	@ (80107c4 <_vfiprintf_r+0x228>)
 801077a:	a904      	add	r1, sp, #16
 801077c:	4630      	mov	r0, r6
 801077e:	f7fd fe69 	bl	800e454 <_printf_float>
 8010782:	4607      	mov	r7, r0
 8010784:	1c78      	adds	r0, r7, #1
 8010786:	d1d6      	bne.n	8010736 <_vfiprintf_r+0x19a>
 8010788:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801078a:	07d9      	lsls	r1, r3, #31
 801078c:	d405      	bmi.n	801079a <_vfiprintf_r+0x1fe>
 801078e:	89ab      	ldrh	r3, [r5, #12]
 8010790:	059a      	lsls	r2, r3, #22
 8010792:	d402      	bmi.n	801079a <_vfiprintf_r+0x1fe>
 8010794:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010796:	f7fe fcad 	bl	800f0f4 <__retarget_lock_release_recursive>
 801079a:	89ab      	ldrh	r3, [r5, #12]
 801079c:	065b      	lsls	r3, r3, #25
 801079e:	f53f af1f 	bmi.w	80105e0 <_vfiprintf_r+0x44>
 80107a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80107a4:	e71e      	b.n	80105e4 <_vfiprintf_r+0x48>
 80107a6:	ab03      	add	r3, sp, #12
 80107a8:	9300      	str	r3, [sp, #0]
 80107aa:	462a      	mov	r2, r5
 80107ac:	4b05      	ldr	r3, [pc, #20]	@ (80107c4 <_vfiprintf_r+0x228>)
 80107ae:	a904      	add	r1, sp, #16
 80107b0:	4630      	mov	r0, r6
 80107b2:	f7fe f8e7 	bl	800e984 <_printf_i>
 80107b6:	e7e4      	b.n	8010782 <_vfiprintf_r+0x1e6>
 80107b8:	080112a0 	.word	0x080112a0
 80107bc:	080112aa 	.word	0x080112aa
 80107c0:	0800e455 	.word	0x0800e455
 80107c4:	08010577 	.word	0x08010577
 80107c8:	080112a6 	.word	0x080112a6

080107cc <__sflush_r>:
 80107cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80107d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80107d4:	0716      	lsls	r6, r2, #28
 80107d6:	4605      	mov	r5, r0
 80107d8:	460c      	mov	r4, r1
 80107da:	d454      	bmi.n	8010886 <__sflush_r+0xba>
 80107dc:	684b      	ldr	r3, [r1, #4]
 80107de:	2b00      	cmp	r3, #0
 80107e0:	dc02      	bgt.n	80107e8 <__sflush_r+0x1c>
 80107e2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	dd48      	ble.n	801087a <__sflush_r+0xae>
 80107e8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80107ea:	2e00      	cmp	r6, #0
 80107ec:	d045      	beq.n	801087a <__sflush_r+0xae>
 80107ee:	2300      	movs	r3, #0
 80107f0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80107f4:	682f      	ldr	r7, [r5, #0]
 80107f6:	6a21      	ldr	r1, [r4, #32]
 80107f8:	602b      	str	r3, [r5, #0]
 80107fa:	d030      	beq.n	801085e <__sflush_r+0x92>
 80107fc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80107fe:	89a3      	ldrh	r3, [r4, #12]
 8010800:	0759      	lsls	r1, r3, #29
 8010802:	d505      	bpl.n	8010810 <__sflush_r+0x44>
 8010804:	6863      	ldr	r3, [r4, #4]
 8010806:	1ad2      	subs	r2, r2, r3
 8010808:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801080a:	b10b      	cbz	r3, 8010810 <__sflush_r+0x44>
 801080c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801080e:	1ad2      	subs	r2, r2, r3
 8010810:	2300      	movs	r3, #0
 8010812:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010814:	6a21      	ldr	r1, [r4, #32]
 8010816:	4628      	mov	r0, r5
 8010818:	47b0      	blx	r6
 801081a:	1c43      	adds	r3, r0, #1
 801081c:	89a3      	ldrh	r3, [r4, #12]
 801081e:	d106      	bne.n	801082e <__sflush_r+0x62>
 8010820:	6829      	ldr	r1, [r5, #0]
 8010822:	291d      	cmp	r1, #29
 8010824:	d82b      	bhi.n	801087e <__sflush_r+0xb2>
 8010826:	4a2a      	ldr	r2, [pc, #168]	@ (80108d0 <__sflush_r+0x104>)
 8010828:	410a      	asrs	r2, r1
 801082a:	07d6      	lsls	r6, r2, #31
 801082c:	d427      	bmi.n	801087e <__sflush_r+0xb2>
 801082e:	2200      	movs	r2, #0
 8010830:	6062      	str	r2, [r4, #4]
 8010832:	04d9      	lsls	r1, r3, #19
 8010834:	6922      	ldr	r2, [r4, #16]
 8010836:	6022      	str	r2, [r4, #0]
 8010838:	d504      	bpl.n	8010844 <__sflush_r+0x78>
 801083a:	1c42      	adds	r2, r0, #1
 801083c:	d101      	bne.n	8010842 <__sflush_r+0x76>
 801083e:	682b      	ldr	r3, [r5, #0]
 8010840:	b903      	cbnz	r3, 8010844 <__sflush_r+0x78>
 8010842:	6560      	str	r0, [r4, #84]	@ 0x54
 8010844:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010846:	602f      	str	r7, [r5, #0]
 8010848:	b1b9      	cbz	r1, 801087a <__sflush_r+0xae>
 801084a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801084e:	4299      	cmp	r1, r3
 8010850:	d002      	beq.n	8010858 <__sflush_r+0x8c>
 8010852:	4628      	mov	r0, r5
 8010854:	f7ff faac 	bl	800fdb0 <_free_r>
 8010858:	2300      	movs	r3, #0
 801085a:	6363      	str	r3, [r4, #52]	@ 0x34
 801085c:	e00d      	b.n	801087a <__sflush_r+0xae>
 801085e:	2301      	movs	r3, #1
 8010860:	4628      	mov	r0, r5
 8010862:	47b0      	blx	r6
 8010864:	4602      	mov	r2, r0
 8010866:	1c50      	adds	r0, r2, #1
 8010868:	d1c9      	bne.n	80107fe <__sflush_r+0x32>
 801086a:	682b      	ldr	r3, [r5, #0]
 801086c:	2b00      	cmp	r3, #0
 801086e:	d0c6      	beq.n	80107fe <__sflush_r+0x32>
 8010870:	2b1d      	cmp	r3, #29
 8010872:	d001      	beq.n	8010878 <__sflush_r+0xac>
 8010874:	2b16      	cmp	r3, #22
 8010876:	d11e      	bne.n	80108b6 <__sflush_r+0xea>
 8010878:	602f      	str	r7, [r5, #0]
 801087a:	2000      	movs	r0, #0
 801087c:	e022      	b.n	80108c4 <__sflush_r+0xf8>
 801087e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010882:	b21b      	sxth	r3, r3
 8010884:	e01b      	b.n	80108be <__sflush_r+0xf2>
 8010886:	690f      	ldr	r7, [r1, #16]
 8010888:	2f00      	cmp	r7, #0
 801088a:	d0f6      	beq.n	801087a <__sflush_r+0xae>
 801088c:	0793      	lsls	r3, r2, #30
 801088e:	680e      	ldr	r6, [r1, #0]
 8010890:	bf08      	it	eq
 8010892:	694b      	ldreq	r3, [r1, #20]
 8010894:	600f      	str	r7, [r1, #0]
 8010896:	bf18      	it	ne
 8010898:	2300      	movne	r3, #0
 801089a:	eba6 0807 	sub.w	r8, r6, r7
 801089e:	608b      	str	r3, [r1, #8]
 80108a0:	f1b8 0f00 	cmp.w	r8, #0
 80108a4:	dde9      	ble.n	801087a <__sflush_r+0xae>
 80108a6:	6a21      	ldr	r1, [r4, #32]
 80108a8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80108aa:	4643      	mov	r3, r8
 80108ac:	463a      	mov	r2, r7
 80108ae:	4628      	mov	r0, r5
 80108b0:	47b0      	blx	r6
 80108b2:	2800      	cmp	r0, #0
 80108b4:	dc08      	bgt.n	80108c8 <__sflush_r+0xfc>
 80108b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80108ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80108be:	81a3      	strh	r3, [r4, #12]
 80108c0:	f04f 30ff 	mov.w	r0, #4294967295
 80108c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80108c8:	4407      	add	r7, r0
 80108ca:	eba8 0800 	sub.w	r8, r8, r0
 80108ce:	e7e7      	b.n	80108a0 <__sflush_r+0xd4>
 80108d0:	dfbffffe 	.word	0xdfbffffe

080108d4 <_fflush_r>:
 80108d4:	b538      	push	{r3, r4, r5, lr}
 80108d6:	690b      	ldr	r3, [r1, #16]
 80108d8:	4605      	mov	r5, r0
 80108da:	460c      	mov	r4, r1
 80108dc:	b913      	cbnz	r3, 80108e4 <_fflush_r+0x10>
 80108de:	2500      	movs	r5, #0
 80108e0:	4628      	mov	r0, r5
 80108e2:	bd38      	pop	{r3, r4, r5, pc}
 80108e4:	b118      	cbz	r0, 80108ee <_fflush_r+0x1a>
 80108e6:	6a03      	ldr	r3, [r0, #32]
 80108e8:	b90b      	cbnz	r3, 80108ee <_fflush_r+0x1a>
 80108ea:	f7fe f9f7 	bl	800ecdc <__sinit>
 80108ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d0f3      	beq.n	80108de <_fflush_r+0xa>
 80108f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80108f8:	07d0      	lsls	r0, r2, #31
 80108fa:	d404      	bmi.n	8010906 <_fflush_r+0x32>
 80108fc:	0599      	lsls	r1, r3, #22
 80108fe:	d402      	bmi.n	8010906 <_fflush_r+0x32>
 8010900:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010902:	f7fe fbf6 	bl	800f0f2 <__retarget_lock_acquire_recursive>
 8010906:	4628      	mov	r0, r5
 8010908:	4621      	mov	r1, r4
 801090a:	f7ff ff5f 	bl	80107cc <__sflush_r>
 801090e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010910:	07da      	lsls	r2, r3, #31
 8010912:	4605      	mov	r5, r0
 8010914:	d4e4      	bmi.n	80108e0 <_fflush_r+0xc>
 8010916:	89a3      	ldrh	r3, [r4, #12]
 8010918:	059b      	lsls	r3, r3, #22
 801091a:	d4e1      	bmi.n	80108e0 <_fflush_r+0xc>
 801091c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801091e:	f7fe fbe9 	bl	800f0f4 <__retarget_lock_release_recursive>
 8010922:	e7dd      	b.n	80108e0 <_fflush_r+0xc>

08010924 <__swhatbuf_r>:
 8010924:	b570      	push	{r4, r5, r6, lr}
 8010926:	460c      	mov	r4, r1
 8010928:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801092c:	2900      	cmp	r1, #0
 801092e:	b096      	sub	sp, #88	@ 0x58
 8010930:	4615      	mov	r5, r2
 8010932:	461e      	mov	r6, r3
 8010934:	da0d      	bge.n	8010952 <__swhatbuf_r+0x2e>
 8010936:	89a3      	ldrh	r3, [r4, #12]
 8010938:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801093c:	f04f 0100 	mov.w	r1, #0
 8010940:	bf14      	ite	ne
 8010942:	2340      	movne	r3, #64	@ 0x40
 8010944:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010948:	2000      	movs	r0, #0
 801094a:	6031      	str	r1, [r6, #0]
 801094c:	602b      	str	r3, [r5, #0]
 801094e:	b016      	add	sp, #88	@ 0x58
 8010950:	bd70      	pop	{r4, r5, r6, pc}
 8010952:	466a      	mov	r2, sp
 8010954:	f000 f848 	bl	80109e8 <_fstat_r>
 8010958:	2800      	cmp	r0, #0
 801095a:	dbec      	blt.n	8010936 <__swhatbuf_r+0x12>
 801095c:	9901      	ldr	r1, [sp, #4]
 801095e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010962:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010966:	4259      	negs	r1, r3
 8010968:	4159      	adcs	r1, r3
 801096a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801096e:	e7eb      	b.n	8010948 <__swhatbuf_r+0x24>

08010970 <__smakebuf_r>:
 8010970:	898b      	ldrh	r3, [r1, #12]
 8010972:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010974:	079d      	lsls	r5, r3, #30
 8010976:	4606      	mov	r6, r0
 8010978:	460c      	mov	r4, r1
 801097a:	d507      	bpl.n	801098c <__smakebuf_r+0x1c>
 801097c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010980:	6023      	str	r3, [r4, #0]
 8010982:	6123      	str	r3, [r4, #16]
 8010984:	2301      	movs	r3, #1
 8010986:	6163      	str	r3, [r4, #20]
 8010988:	b003      	add	sp, #12
 801098a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801098c:	ab01      	add	r3, sp, #4
 801098e:	466a      	mov	r2, sp
 8010990:	f7ff ffc8 	bl	8010924 <__swhatbuf_r>
 8010994:	9f00      	ldr	r7, [sp, #0]
 8010996:	4605      	mov	r5, r0
 8010998:	4639      	mov	r1, r7
 801099a:	4630      	mov	r0, r6
 801099c:	f7fd fc2e 	bl	800e1fc <_malloc_r>
 80109a0:	b948      	cbnz	r0, 80109b6 <__smakebuf_r+0x46>
 80109a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80109a6:	059a      	lsls	r2, r3, #22
 80109a8:	d4ee      	bmi.n	8010988 <__smakebuf_r+0x18>
 80109aa:	f023 0303 	bic.w	r3, r3, #3
 80109ae:	f043 0302 	orr.w	r3, r3, #2
 80109b2:	81a3      	strh	r3, [r4, #12]
 80109b4:	e7e2      	b.n	801097c <__smakebuf_r+0xc>
 80109b6:	89a3      	ldrh	r3, [r4, #12]
 80109b8:	6020      	str	r0, [r4, #0]
 80109ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80109be:	81a3      	strh	r3, [r4, #12]
 80109c0:	9b01      	ldr	r3, [sp, #4]
 80109c2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80109c6:	b15b      	cbz	r3, 80109e0 <__smakebuf_r+0x70>
 80109c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80109cc:	4630      	mov	r0, r6
 80109ce:	f000 f81d 	bl	8010a0c <_isatty_r>
 80109d2:	b128      	cbz	r0, 80109e0 <__smakebuf_r+0x70>
 80109d4:	89a3      	ldrh	r3, [r4, #12]
 80109d6:	f023 0303 	bic.w	r3, r3, #3
 80109da:	f043 0301 	orr.w	r3, r3, #1
 80109de:	81a3      	strh	r3, [r4, #12]
 80109e0:	89a3      	ldrh	r3, [r4, #12]
 80109e2:	431d      	orrs	r5, r3
 80109e4:	81a5      	strh	r5, [r4, #12]
 80109e6:	e7cf      	b.n	8010988 <__smakebuf_r+0x18>

080109e8 <_fstat_r>:
 80109e8:	b538      	push	{r3, r4, r5, lr}
 80109ea:	4d07      	ldr	r5, [pc, #28]	@ (8010a08 <_fstat_r+0x20>)
 80109ec:	2300      	movs	r3, #0
 80109ee:	4604      	mov	r4, r0
 80109f0:	4608      	mov	r0, r1
 80109f2:	4611      	mov	r1, r2
 80109f4:	602b      	str	r3, [r5, #0]
 80109f6:	f7f1 f9f1 	bl	8001ddc <_fstat>
 80109fa:	1c43      	adds	r3, r0, #1
 80109fc:	d102      	bne.n	8010a04 <_fstat_r+0x1c>
 80109fe:	682b      	ldr	r3, [r5, #0]
 8010a00:	b103      	cbz	r3, 8010a04 <_fstat_r+0x1c>
 8010a02:	6023      	str	r3, [r4, #0]
 8010a04:	bd38      	pop	{r3, r4, r5, pc}
 8010a06:	bf00      	nop
 8010a08:	2000576c 	.word	0x2000576c

08010a0c <_isatty_r>:
 8010a0c:	b538      	push	{r3, r4, r5, lr}
 8010a0e:	4d06      	ldr	r5, [pc, #24]	@ (8010a28 <_isatty_r+0x1c>)
 8010a10:	2300      	movs	r3, #0
 8010a12:	4604      	mov	r4, r0
 8010a14:	4608      	mov	r0, r1
 8010a16:	602b      	str	r3, [r5, #0]
 8010a18:	f7f1 f9f0 	bl	8001dfc <_isatty>
 8010a1c:	1c43      	adds	r3, r0, #1
 8010a1e:	d102      	bne.n	8010a26 <_isatty_r+0x1a>
 8010a20:	682b      	ldr	r3, [r5, #0]
 8010a22:	b103      	cbz	r3, 8010a26 <_isatty_r+0x1a>
 8010a24:	6023      	str	r3, [r4, #0]
 8010a26:	bd38      	pop	{r3, r4, r5, pc}
 8010a28:	2000576c 	.word	0x2000576c

08010a2c <__assert_func>:
 8010a2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010a2e:	4614      	mov	r4, r2
 8010a30:	461a      	mov	r2, r3
 8010a32:	4b09      	ldr	r3, [pc, #36]	@ (8010a58 <__assert_func+0x2c>)
 8010a34:	681b      	ldr	r3, [r3, #0]
 8010a36:	4605      	mov	r5, r0
 8010a38:	68d8      	ldr	r0, [r3, #12]
 8010a3a:	b954      	cbnz	r4, 8010a52 <__assert_func+0x26>
 8010a3c:	4b07      	ldr	r3, [pc, #28]	@ (8010a5c <__assert_func+0x30>)
 8010a3e:	461c      	mov	r4, r3
 8010a40:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010a44:	9100      	str	r1, [sp, #0]
 8010a46:	462b      	mov	r3, r5
 8010a48:	4905      	ldr	r1, [pc, #20]	@ (8010a60 <__assert_func+0x34>)
 8010a4a:	f000 f841 	bl	8010ad0 <fiprintf>
 8010a4e:	f000 f851 	bl	8010af4 <abort>
 8010a52:	4b04      	ldr	r3, [pc, #16]	@ (8010a64 <__assert_func+0x38>)
 8010a54:	e7f4      	b.n	8010a40 <__assert_func+0x14>
 8010a56:	bf00      	nop
 8010a58:	20000058 	.word	0x20000058
 8010a5c:	080112f6 	.word	0x080112f6
 8010a60:	080112c8 	.word	0x080112c8
 8010a64:	080112bb 	.word	0x080112bb

08010a68 <_calloc_r>:
 8010a68:	b570      	push	{r4, r5, r6, lr}
 8010a6a:	fba1 5402 	umull	r5, r4, r1, r2
 8010a6e:	b93c      	cbnz	r4, 8010a80 <_calloc_r+0x18>
 8010a70:	4629      	mov	r1, r5
 8010a72:	f7fd fbc3 	bl	800e1fc <_malloc_r>
 8010a76:	4606      	mov	r6, r0
 8010a78:	b928      	cbnz	r0, 8010a86 <_calloc_r+0x1e>
 8010a7a:	2600      	movs	r6, #0
 8010a7c:	4630      	mov	r0, r6
 8010a7e:	bd70      	pop	{r4, r5, r6, pc}
 8010a80:	220c      	movs	r2, #12
 8010a82:	6002      	str	r2, [r0, #0]
 8010a84:	e7f9      	b.n	8010a7a <_calloc_r+0x12>
 8010a86:	462a      	mov	r2, r5
 8010a88:	4621      	mov	r1, r4
 8010a8a:	f7fe faa5 	bl	800efd8 <memset>
 8010a8e:	e7f5      	b.n	8010a7c <_calloc_r+0x14>

08010a90 <__ascii_mbtowc>:
 8010a90:	b082      	sub	sp, #8
 8010a92:	b901      	cbnz	r1, 8010a96 <__ascii_mbtowc+0x6>
 8010a94:	a901      	add	r1, sp, #4
 8010a96:	b142      	cbz	r2, 8010aaa <__ascii_mbtowc+0x1a>
 8010a98:	b14b      	cbz	r3, 8010aae <__ascii_mbtowc+0x1e>
 8010a9a:	7813      	ldrb	r3, [r2, #0]
 8010a9c:	600b      	str	r3, [r1, #0]
 8010a9e:	7812      	ldrb	r2, [r2, #0]
 8010aa0:	1e10      	subs	r0, r2, #0
 8010aa2:	bf18      	it	ne
 8010aa4:	2001      	movne	r0, #1
 8010aa6:	b002      	add	sp, #8
 8010aa8:	4770      	bx	lr
 8010aaa:	4610      	mov	r0, r2
 8010aac:	e7fb      	b.n	8010aa6 <__ascii_mbtowc+0x16>
 8010aae:	f06f 0001 	mvn.w	r0, #1
 8010ab2:	e7f8      	b.n	8010aa6 <__ascii_mbtowc+0x16>

08010ab4 <__ascii_wctomb>:
 8010ab4:	4603      	mov	r3, r0
 8010ab6:	4608      	mov	r0, r1
 8010ab8:	b141      	cbz	r1, 8010acc <__ascii_wctomb+0x18>
 8010aba:	2aff      	cmp	r2, #255	@ 0xff
 8010abc:	d904      	bls.n	8010ac8 <__ascii_wctomb+0x14>
 8010abe:	228a      	movs	r2, #138	@ 0x8a
 8010ac0:	601a      	str	r2, [r3, #0]
 8010ac2:	f04f 30ff 	mov.w	r0, #4294967295
 8010ac6:	4770      	bx	lr
 8010ac8:	700a      	strb	r2, [r1, #0]
 8010aca:	2001      	movs	r0, #1
 8010acc:	4770      	bx	lr
	...

08010ad0 <fiprintf>:
 8010ad0:	b40e      	push	{r1, r2, r3}
 8010ad2:	b503      	push	{r0, r1, lr}
 8010ad4:	4601      	mov	r1, r0
 8010ad6:	ab03      	add	r3, sp, #12
 8010ad8:	4805      	ldr	r0, [pc, #20]	@ (8010af0 <fiprintf+0x20>)
 8010ada:	f853 2b04 	ldr.w	r2, [r3], #4
 8010ade:	6800      	ldr	r0, [r0, #0]
 8010ae0:	9301      	str	r3, [sp, #4]
 8010ae2:	f7ff fd5b 	bl	801059c <_vfiprintf_r>
 8010ae6:	b002      	add	sp, #8
 8010ae8:	f85d eb04 	ldr.w	lr, [sp], #4
 8010aec:	b003      	add	sp, #12
 8010aee:	4770      	bx	lr
 8010af0:	20000058 	.word	0x20000058

08010af4 <abort>:
 8010af4:	b508      	push	{r3, lr}
 8010af6:	2006      	movs	r0, #6
 8010af8:	f000 f82c 	bl	8010b54 <raise>
 8010afc:	2001      	movs	r0, #1
 8010afe:	f7f1 f91d 	bl	8001d3c <_exit>

08010b02 <_raise_r>:
 8010b02:	291f      	cmp	r1, #31
 8010b04:	b538      	push	{r3, r4, r5, lr}
 8010b06:	4605      	mov	r5, r0
 8010b08:	460c      	mov	r4, r1
 8010b0a:	d904      	bls.n	8010b16 <_raise_r+0x14>
 8010b0c:	2316      	movs	r3, #22
 8010b0e:	6003      	str	r3, [r0, #0]
 8010b10:	f04f 30ff 	mov.w	r0, #4294967295
 8010b14:	bd38      	pop	{r3, r4, r5, pc}
 8010b16:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010b18:	b112      	cbz	r2, 8010b20 <_raise_r+0x1e>
 8010b1a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010b1e:	b94b      	cbnz	r3, 8010b34 <_raise_r+0x32>
 8010b20:	4628      	mov	r0, r5
 8010b22:	f000 f831 	bl	8010b88 <_getpid_r>
 8010b26:	4622      	mov	r2, r4
 8010b28:	4601      	mov	r1, r0
 8010b2a:	4628      	mov	r0, r5
 8010b2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010b30:	f000 b818 	b.w	8010b64 <_kill_r>
 8010b34:	2b01      	cmp	r3, #1
 8010b36:	d00a      	beq.n	8010b4e <_raise_r+0x4c>
 8010b38:	1c59      	adds	r1, r3, #1
 8010b3a:	d103      	bne.n	8010b44 <_raise_r+0x42>
 8010b3c:	2316      	movs	r3, #22
 8010b3e:	6003      	str	r3, [r0, #0]
 8010b40:	2001      	movs	r0, #1
 8010b42:	e7e7      	b.n	8010b14 <_raise_r+0x12>
 8010b44:	2100      	movs	r1, #0
 8010b46:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010b4a:	4620      	mov	r0, r4
 8010b4c:	4798      	blx	r3
 8010b4e:	2000      	movs	r0, #0
 8010b50:	e7e0      	b.n	8010b14 <_raise_r+0x12>
	...

08010b54 <raise>:
 8010b54:	4b02      	ldr	r3, [pc, #8]	@ (8010b60 <raise+0xc>)
 8010b56:	4601      	mov	r1, r0
 8010b58:	6818      	ldr	r0, [r3, #0]
 8010b5a:	f7ff bfd2 	b.w	8010b02 <_raise_r>
 8010b5e:	bf00      	nop
 8010b60:	20000058 	.word	0x20000058

08010b64 <_kill_r>:
 8010b64:	b538      	push	{r3, r4, r5, lr}
 8010b66:	4d07      	ldr	r5, [pc, #28]	@ (8010b84 <_kill_r+0x20>)
 8010b68:	2300      	movs	r3, #0
 8010b6a:	4604      	mov	r4, r0
 8010b6c:	4608      	mov	r0, r1
 8010b6e:	4611      	mov	r1, r2
 8010b70:	602b      	str	r3, [r5, #0]
 8010b72:	f7f1 f8d3 	bl	8001d1c <_kill>
 8010b76:	1c43      	adds	r3, r0, #1
 8010b78:	d102      	bne.n	8010b80 <_kill_r+0x1c>
 8010b7a:	682b      	ldr	r3, [r5, #0]
 8010b7c:	b103      	cbz	r3, 8010b80 <_kill_r+0x1c>
 8010b7e:	6023      	str	r3, [r4, #0]
 8010b80:	bd38      	pop	{r3, r4, r5, pc}
 8010b82:	bf00      	nop
 8010b84:	2000576c 	.word	0x2000576c

08010b88 <_getpid_r>:
 8010b88:	f7f1 b8c0 	b.w	8001d0c <_getpid>

08010b8c <_init>:
 8010b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b8e:	bf00      	nop
 8010b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010b92:	bc08      	pop	{r3}
 8010b94:	469e      	mov	lr, r3
 8010b96:	4770      	bx	lr

08010b98 <_fini>:
 8010b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b9a:	bf00      	nop
 8010b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010b9e:	bc08      	pop	{r3}
 8010ba0:	469e      	mov	lr, r3
 8010ba2:	4770      	bx	lr
