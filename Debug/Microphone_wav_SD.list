
Microphone_wav_SD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000171f8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000bdc70  080173e0  080173e0  000183e0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080d5050  080d5050  000d79e4  2**0
                  CONTENTS
  4 .ARM          00000008  080d5050  080d5050  000d6050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080d5058  080d5058  000d79e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080d5058  080d5058  000d6058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080d505c  080d505c  000d605c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000009e4  20000000  080d5060  000d7000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0002dec0  200009e4  080d5a44  000d79e4  2**2
                  ALLOC
 10 ._user_heap_stack 00004004  2002e8a4  080d5a44  000d88a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000d79e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022ce4  00000000  00000000  000d7a14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000057da  00000000  00000000  000fa6f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a98  00000000  00000000  000ffed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000137e  00000000  00000000  00101970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002dc87  00000000  00000000  00102cee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000272d0  00000000  00000000  00130975  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001055a6  00000000  00000000  00157c45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000f4  00000000  00000000  0025d1eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007d24  00000000  00000000  0025d2e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00265004  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00003a35  00000000  00000000  0026506c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000128  00000000  00000000  00268aa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200009e4 	.word	0x200009e4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080173b0 	.word	0x080173b0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200009e8 	.word	0x200009e8
 800020c:	080173b0 	.word	0x080173b0

08000210 <arm_bitreversal_32>:
 8000210:	1c4b      	adds	r3, r1, #1
 8000212:	2b01      	cmp	r3, #1
 8000214:	bf98      	it	ls
 8000216:	4770      	bxls	lr
 8000218:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800021c:	1c91      	adds	r1, r2, #2
 800021e:	089b      	lsrs	r3, r3, #2

08000220 <arm_bitreversal_32_0>:
 8000220:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000224:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000228:	880a      	ldrh	r2, [r1, #0]
 800022a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 800022e:	4480      	add	r8, r0
 8000230:	4481      	add	r9, r0
 8000232:	4402      	add	r2, r0
 8000234:	4484      	add	ip, r0
 8000236:	f8d9 7000 	ldr.w	r7, [r9]
 800023a:	f8d8 6000 	ldr.w	r6, [r8]
 800023e:	6815      	ldr	r5, [r2, #0]
 8000240:	f8dc 4000 	ldr.w	r4, [ip]
 8000244:	f8c9 6000 	str.w	r6, [r9]
 8000248:	f8c8 7000 	str.w	r7, [r8]
 800024c:	f8cc 5000 	str.w	r5, [ip]
 8000250:	6014      	str	r4, [r2, #0]
 8000252:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000256:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800025a:	6855      	ldr	r5, [r2, #4]
 800025c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000260:	f8c9 6004 	str.w	r6, [r9, #4]
 8000264:	f8c8 7004 	str.w	r7, [r8, #4]
 8000268:	f8cc 5004 	str.w	r5, [ip, #4]
 800026c:	6054      	str	r4, [r2, #4]
 800026e:	3108      	adds	r1, #8
 8000270:	3b01      	subs	r3, #1
 8000272:	d1d5      	bne.n	8000220 <arm_bitreversal_32_0>
 8000274:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000278:	4770      	bx	lr

0800027a <arm_bitreversal_16>:
 800027a:	1c4b      	adds	r3, r1, #1
 800027c:	2b01      	cmp	r3, #1
 800027e:	bf98      	it	ls
 8000280:	4770      	bxls	lr
 8000282:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000286:	1c91      	adds	r1, r2, #2
 8000288:	089b      	lsrs	r3, r3, #2

0800028a <arm_bitreversal_16_0>:
 800028a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800028e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000292:	880a      	ldrh	r2, [r1, #0]
 8000294:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000298:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800029c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 80002a0:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 80002a4:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 80002a8:	f8d9 7000 	ldr.w	r7, [r9]
 80002ac:	f8d8 6000 	ldr.w	r6, [r8]
 80002b0:	6815      	ldr	r5, [r2, #0]
 80002b2:	f8dc 4000 	ldr.w	r4, [ip]
 80002b6:	f8c9 6000 	str.w	r6, [r9]
 80002ba:	f8c8 7000 	str.w	r7, [r8]
 80002be:	f8cc 5000 	str.w	r5, [ip]
 80002c2:	6014      	str	r4, [r2, #0]
 80002c4:	3108      	adds	r1, #8
 80002c6:	3b01      	subs	r3, #1
 80002c8:	d1df      	bne.n	800028a <arm_bitreversal_16_0>
 80002ca:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002ce:	4770      	bx	lr

080002d0 <memchr>:
 80002d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002d4:	2a10      	cmp	r2, #16
 80002d6:	db2b      	blt.n	8000330 <memchr+0x60>
 80002d8:	f010 0f07 	tst.w	r0, #7
 80002dc:	d008      	beq.n	80002f0 <memchr+0x20>
 80002de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e2:	3a01      	subs	r2, #1
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d02d      	beq.n	8000344 <memchr+0x74>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	b342      	cbz	r2, 8000340 <memchr+0x70>
 80002ee:	d1f6      	bne.n	80002de <memchr+0xe>
 80002f0:	b4f0      	push	{r4, r5, r6, r7}
 80002f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002fa:	f022 0407 	bic.w	r4, r2, #7
 80002fe:	f07f 0700 	mvns.w	r7, #0
 8000302:	2300      	movs	r3, #0
 8000304:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000308:	3c08      	subs	r4, #8
 800030a:	ea85 0501 	eor.w	r5, r5, r1
 800030e:	ea86 0601 	eor.w	r6, r6, r1
 8000312:	fa85 f547 	uadd8	r5, r5, r7
 8000316:	faa3 f587 	sel	r5, r3, r7
 800031a:	fa86 f647 	uadd8	r6, r6, r7
 800031e:	faa5 f687 	sel	r6, r5, r7
 8000322:	b98e      	cbnz	r6, 8000348 <memchr+0x78>
 8000324:	d1ee      	bne.n	8000304 <memchr+0x34>
 8000326:	bcf0      	pop	{r4, r5, r6, r7}
 8000328:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800032c:	f002 0207 	and.w	r2, r2, #7
 8000330:	b132      	cbz	r2, 8000340 <memchr+0x70>
 8000332:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000336:	3a01      	subs	r2, #1
 8000338:	ea83 0301 	eor.w	r3, r3, r1
 800033c:	b113      	cbz	r3, 8000344 <memchr+0x74>
 800033e:	d1f8      	bne.n	8000332 <memchr+0x62>
 8000340:	2000      	movs	r0, #0
 8000342:	4770      	bx	lr
 8000344:	3801      	subs	r0, #1
 8000346:	4770      	bx	lr
 8000348:	2d00      	cmp	r5, #0
 800034a:	bf06      	itte	eq
 800034c:	4635      	moveq	r5, r6
 800034e:	3803      	subeq	r0, #3
 8000350:	3807      	subne	r0, #7
 8000352:	f015 0f01 	tst.w	r5, #1
 8000356:	d107      	bne.n	8000368 <memchr+0x98>
 8000358:	3001      	adds	r0, #1
 800035a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800035e:	bf02      	ittt	eq
 8000360:	3001      	addeq	r0, #1
 8000362:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000366:	3001      	addeq	r0, #1
 8000368:	bcf0      	pop	{r4, r5, r6, r7}
 800036a:	3801      	subs	r0, #1
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop

08000370 <strlen>:
 8000370:	4603      	mov	r3, r0
 8000372:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000376:	2a00      	cmp	r2, #0
 8000378:	d1fb      	bne.n	8000372 <strlen+0x2>
 800037a:	1a18      	subs	r0, r3, r0
 800037c:	3801      	subs	r0, #1
 800037e:	4770      	bx	lr

08000380 <__aeabi_drsub>:
 8000380:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000384:	e002      	b.n	800038c <__adddf3>
 8000386:	bf00      	nop

08000388 <__aeabi_dsub>:
 8000388:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800038c <__adddf3>:
 800038c:	b530      	push	{r4, r5, lr}
 800038e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000392:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	bf1f      	itttt	ne
 80003a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003b2:	f000 80e2 	beq.w	800057a <__adddf3+0x1ee>
 80003b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003be:	bfb8      	it	lt
 80003c0:	426d      	neglt	r5, r5
 80003c2:	dd0c      	ble.n	80003de <__adddf3+0x52>
 80003c4:	442c      	add	r4, r5
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	ea82 0000 	eor.w	r0, r2, r0
 80003d2:	ea83 0101 	eor.w	r1, r3, r1
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	2d36      	cmp	r5, #54	@ 0x36
 80003e0:	bf88      	it	hi
 80003e2:	bd30      	pophi	{r4, r5, pc}
 80003e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80003f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003f4:	d002      	beq.n	80003fc <__adddf3+0x70>
 80003f6:	4240      	negs	r0, r0
 80003f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000400:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000404:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000408:	d002      	beq.n	8000410 <__adddf3+0x84>
 800040a:	4252      	negs	r2, r2
 800040c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000410:	ea94 0f05 	teq	r4, r5
 8000414:	f000 80a7 	beq.w	8000566 <__adddf3+0x1da>
 8000418:	f1a4 0401 	sub.w	r4, r4, #1
 800041c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000420:	db0d      	blt.n	800043e <__adddf3+0xb2>
 8000422:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000426:	fa22 f205 	lsr.w	r2, r2, r5
 800042a:	1880      	adds	r0, r0, r2
 800042c:	f141 0100 	adc.w	r1, r1, #0
 8000430:	fa03 f20e 	lsl.w	r2, r3, lr
 8000434:	1880      	adds	r0, r0, r2
 8000436:	fa43 f305 	asr.w	r3, r3, r5
 800043a:	4159      	adcs	r1, r3
 800043c:	e00e      	b.n	800045c <__adddf3+0xd0>
 800043e:	f1a5 0520 	sub.w	r5, r5, #32
 8000442:	f10e 0e20 	add.w	lr, lr, #32
 8000446:	2a01      	cmp	r2, #1
 8000448:	fa03 fc0e 	lsl.w	ip, r3, lr
 800044c:	bf28      	it	cs
 800044e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000452:	fa43 f305 	asr.w	r3, r3, r5
 8000456:	18c0      	adds	r0, r0, r3
 8000458:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000460:	d507      	bpl.n	8000472 <__adddf3+0xe6>
 8000462:	f04f 0e00 	mov.w	lr, #0
 8000466:	f1dc 0c00 	rsbs	ip, ip, #0
 800046a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800046e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000472:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000476:	d31b      	bcc.n	80004b0 <__adddf3+0x124>
 8000478:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800047c:	d30c      	bcc.n	8000498 <__adddf3+0x10c>
 800047e:	0849      	lsrs	r1, r1, #1
 8000480:	ea5f 0030 	movs.w	r0, r0, rrx
 8000484:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000488:	f104 0401 	add.w	r4, r4, #1
 800048c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000490:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000494:	f080 809a 	bcs.w	80005cc <__adddf3+0x240>
 8000498:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800049c:	bf08      	it	eq
 800049e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004a2:	f150 0000 	adcs.w	r0, r0, #0
 80004a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004aa:	ea41 0105 	orr.w	r1, r1, r5
 80004ae:	bd30      	pop	{r4, r5, pc}
 80004b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004b4:	4140      	adcs	r0, r0
 80004b6:	eb41 0101 	adc.w	r1, r1, r1
 80004ba:	3c01      	subs	r4, #1
 80004bc:	bf28      	it	cs
 80004be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004c2:	d2e9      	bcs.n	8000498 <__adddf3+0x10c>
 80004c4:	f091 0f00 	teq	r1, #0
 80004c8:	bf04      	itt	eq
 80004ca:	4601      	moveq	r1, r0
 80004cc:	2000      	moveq	r0, #0
 80004ce:	fab1 f381 	clz	r3, r1
 80004d2:	bf08      	it	eq
 80004d4:	3320      	addeq	r3, #32
 80004d6:	f1a3 030b 	sub.w	r3, r3, #11
 80004da:	f1b3 0220 	subs.w	r2, r3, #32
 80004de:	da0c      	bge.n	80004fa <__adddf3+0x16e>
 80004e0:	320c      	adds	r2, #12
 80004e2:	dd08      	ble.n	80004f6 <__adddf3+0x16a>
 80004e4:	f102 0c14 	add.w	ip, r2, #20
 80004e8:	f1c2 020c 	rsb	r2, r2, #12
 80004ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80004f0:	fa21 f102 	lsr.w	r1, r1, r2
 80004f4:	e00c      	b.n	8000510 <__adddf3+0x184>
 80004f6:	f102 0214 	add.w	r2, r2, #20
 80004fa:	bfd8      	it	le
 80004fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000500:	fa01 f102 	lsl.w	r1, r1, r2
 8000504:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000508:	bfdc      	itt	le
 800050a:	ea41 010c 	orrle.w	r1, r1, ip
 800050e:	4090      	lslle	r0, r2
 8000510:	1ae4      	subs	r4, r4, r3
 8000512:	bfa2      	ittt	ge
 8000514:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000518:	4329      	orrge	r1, r5
 800051a:	bd30      	popge	{r4, r5, pc}
 800051c:	ea6f 0404 	mvn.w	r4, r4
 8000520:	3c1f      	subs	r4, #31
 8000522:	da1c      	bge.n	800055e <__adddf3+0x1d2>
 8000524:	340c      	adds	r4, #12
 8000526:	dc0e      	bgt.n	8000546 <__adddf3+0x1ba>
 8000528:	f104 0414 	add.w	r4, r4, #20
 800052c:	f1c4 0220 	rsb	r2, r4, #32
 8000530:	fa20 f004 	lsr.w	r0, r0, r4
 8000534:	fa01 f302 	lsl.w	r3, r1, r2
 8000538:	ea40 0003 	orr.w	r0, r0, r3
 800053c:	fa21 f304 	lsr.w	r3, r1, r4
 8000540:	ea45 0103 	orr.w	r1, r5, r3
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	f1c4 040c 	rsb	r4, r4, #12
 800054a:	f1c4 0220 	rsb	r2, r4, #32
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 f304 	lsl.w	r3, r1, r4
 8000556:	ea40 0003 	orr.w	r0, r0, r3
 800055a:	4629      	mov	r1, r5
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	fa21 f004 	lsr.w	r0, r1, r4
 8000562:	4629      	mov	r1, r5
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f094 0f00 	teq	r4, #0
 800056a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800056e:	bf06      	itte	eq
 8000570:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000574:	3401      	addeq	r4, #1
 8000576:	3d01      	subne	r5, #1
 8000578:	e74e      	b.n	8000418 <__adddf3+0x8c>
 800057a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800057e:	bf18      	it	ne
 8000580:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000584:	d029      	beq.n	80005da <__adddf3+0x24e>
 8000586:	ea94 0f05 	teq	r4, r5
 800058a:	bf08      	it	eq
 800058c:	ea90 0f02 	teqeq	r0, r2
 8000590:	d005      	beq.n	800059e <__adddf3+0x212>
 8000592:	ea54 0c00 	orrs.w	ip, r4, r0
 8000596:	bf04      	itt	eq
 8000598:	4619      	moveq	r1, r3
 800059a:	4610      	moveq	r0, r2
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	ea91 0f03 	teq	r1, r3
 80005a2:	bf1e      	ittt	ne
 80005a4:	2100      	movne	r1, #0
 80005a6:	2000      	movne	r0, #0
 80005a8:	bd30      	popne	{r4, r5, pc}
 80005aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ae:	d105      	bne.n	80005bc <__adddf3+0x230>
 80005b0:	0040      	lsls	r0, r0, #1
 80005b2:	4149      	adcs	r1, r1
 80005b4:	bf28      	it	cs
 80005b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ba:	bd30      	pop	{r4, r5, pc}
 80005bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005c0:	bf3c      	itt	cc
 80005c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005c6:	bd30      	popcc	{r4, r5, pc}
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005d4:	f04f 0000 	mov.w	r0, #0
 80005d8:	bd30      	pop	{r4, r5, pc}
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf1a      	itte	ne
 80005e0:	4619      	movne	r1, r3
 80005e2:	4610      	movne	r0, r2
 80005e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005e8:	bf1c      	itt	ne
 80005ea:	460b      	movne	r3, r1
 80005ec:	4602      	movne	r2, r0
 80005ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005f2:	bf06      	itte	eq
 80005f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005f8:	ea91 0f03 	teqeq	r1, r3
 80005fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	bf00      	nop

08000604 <__aeabi_ui2d>:
 8000604:	f090 0f00 	teq	r0, #0
 8000608:	bf04      	itt	eq
 800060a:	2100      	moveq	r1, #0
 800060c:	4770      	bxeq	lr
 800060e:	b530      	push	{r4, r5, lr}
 8000610:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000614:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000618:	f04f 0500 	mov.w	r5, #0
 800061c:	f04f 0100 	mov.w	r1, #0
 8000620:	e750      	b.n	80004c4 <__adddf3+0x138>
 8000622:	bf00      	nop

08000624 <__aeabi_i2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000638:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800063c:	bf48      	it	mi
 800063e:	4240      	negmi	r0, r0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e73e      	b.n	80004c4 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_f2d>:
 8000648:	0042      	lsls	r2, r0, #1
 800064a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800064e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000652:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000656:	bf1f      	itttt	ne
 8000658:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800065c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000660:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000664:	4770      	bxne	lr
 8000666:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800066a:	bf08      	it	eq
 800066c:	4770      	bxeq	lr
 800066e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000672:	bf04      	itt	eq
 8000674:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000678:	4770      	bxeq	lr
 800067a:	b530      	push	{r4, r5, lr}
 800067c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000680:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000684:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000688:	e71c      	b.n	80004c4 <__adddf3+0x138>
 800068a:	bf00      	nop

0800068c <__aeabi_ul2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f04f 0500 	mov.w	r5, #0
 800069a:	e00a      	b.n	80006b2 <__aeabi_l2d+0x16>

0800069c <__aeabi_l2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006aa:	d502      	bpl.n	80006b2 <__aeabi_l2d+0x16>
 80006ac:	4240      	negs	r0, r0
 80006ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006be:	f43f aed8 	beq.w	8000472 <__adddf3+0xe6>
 80006c2:	f04f 0203 	mov.w	r2, #3
 80006c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ca:	bf18      	it	ne
 80006cc:	3203      	addne	r2, #3
 80006ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006d2:	bf18      	it	ne
 80006d4:	3203      	addne	r2, #3
 80006d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006da:	f1c2 0320 	rsb	r3, r2, #32
 80006de:	fa00 fc03 	lsl.w	ip, r0, r3
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ea:	ea40 000e 	orr.w	r0, r0, lr
 80006ee:	fa21 f102 	lsr.w	r1, r1, r2
 80006f2:	4414      	add	r4, r2
 80006f4:	e6bd      	b.n	8000472 <__adddf3+0xe6>
 80006f6:	bf00      	nop

080006f8 <__aeabi_dmul>:
 80006f8:	b570      	push	{r4, r5, r6, lr}
 80006fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80006fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000702:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000706:	bf1d      	ittte	ne
 8000708:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800070c:	ea94 0f0c 	teqne	r4, ip
 8000710:	ea95 0f0c 	teqne	r5, ip
 8000714:	f000 f8de 	bleq	80008d4 <__aeabi_dmul+0x1dc>
 8000718:	442c      	add	r4, r5
 800071a:	ea81 0603 	eor.w	r6, r1, r3
 800071e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000722:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000726:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800072a:	bf18      	it	ne
 800072c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000730:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000734:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000738:	d038      	beq.n	80007ac <__aeabi_dmul+0xb4>
 800073a:	fba0 ce02 	umull	ip, lr, r0, r2
 800073e:	f04f 0500 	mov.w	r5, #0
 8000742:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000746:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800074a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800074e:	f04f 0600 	mov.w	r6, #0
 8000752:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000756:	f09c 0f00 	teq	ip, #0
 800075a:	bf18      	it	ne
 800075c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000760:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000764:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000768:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800076c:	d204      	bcs.n	8000778 <__aeabi_dmul+0x80>
 800076e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000772:	416d      	adcs	r5, r5
 8000774:	eb46 0606 	adc.w	r6, r6, r6
 8000778:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800077c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000780:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000784:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000788:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800078c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000790:	bf88      	it	hi
 8000792:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000796:	d81e      	bhi.n	80007d6 <__aeabi_dmul+0xde>
 8000798:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800079c:	bf08      	it	eq
 800079e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80007a2:	f150 0000 	adcs.w	r0, r0, #0
 80007a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80007b0:	ea46 0101 	orr.w	r1, r6, r1
 80007b4:	ea40 0002 	orr.w	r0, r0, r2
 80007b8:	ea81 0103 	eor.w	r1, r1, r3
 80007bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007c0:	bfc2      	ittt	gt
 80007c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007ca:	bd70      	popgt	{r4, r5, r6, pc}
 80007cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80007d0:	f04f 0e00 	mov.w	lr, #0
 80007d4:	3c01      	subs	r4, #1
 80007d6:	f300 80ab 	bgt.w	8000930 <__aeabi_dmul+0x238>
 80007da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80007de:	bfde      	ittt	le
 80007e0:	2000      	movle	r0, #0
 80007e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80007e6:	bd70      	pople	{r4, r5, r6, pc}
 80007e8:	f1c4 0400 	rsb	r4, r4, #0
 80007ec:	3c20      	subs	r4, #32
 80007ee:	da35      	bge.n	800085c <__aeabi_dmul+0x164>
 80007f0:	340c      	adds	r4, #12
 80007f2:	dc1b      	bgt.n	800082c <__aeabi_dmul+0x134>
 80007f4:	f104 0414 	add.w	r4, r4, #20
 80007f8:	f1c4 0520 	rsb	r5, r4, #32
 80007fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000800:	fa20 f004 	lsr.w	r0, r0, r4
 8000804:	fa01 f205 	lsl.w	r2, r1, r5
 8000808:	ea40 0002 	orr.w	r0, r0, r2
 800080c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000810:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000814:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000818:	fa21 f604 	lsr.w	r6, r1, r4
 800081c:	eb42 0106 	adc.w	r1, r2, r6
 8000820:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000824:	bf08      	it	eq
 8000826:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800082a:	bd70      	pop	{r4, r5, r6, pc}
 800082c:	f1c4 040c 	rsb	r4, r4, #12
 8000830:	f1c4 0520 	rsb	r5, r4, #32
 8000834:	fa00 f304 	lsl.w	r3, r0, r4
 8000838:	fa20 f005 	lsr.w	r0, r0, r5
 800083c:	fa01 f204 	lsl.w	r2, r1, r4
 8000840:	ea40 0002 	orr.w	r0, r0, r2
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800084c:	f141 0100 	adc.w	r1, r1, #0
 8000850:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000854:	bf08      	it	eq
 8000856:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f1c4 0520 	rsb	r5, r4, #32
 8000860:	fa00 f205 	lsl.w	r2, r0, r5
 8000864:	ea4e 0e02 	orr.w	lr, lr, r2
 8000868:	fa20 f304 	lsr.w	r3, r0, r4
 800086c:	fa01 f205 	lsl.w	r2, r1, r5
 8000870:	ea43 0302 	orr.w	r3, r3, r2
 8000874:	fa21 f004 	lsr.w	r0, r1, r4
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800087c:	fa21 f204 	lsr.w	r2, r1, r4
 8000880:	ea20 0002 	bic.w	r0, r0, r2
 8000884:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000888:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800088c:	bf08      	it	eq
 800088e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000892:	bd70      	pop	{r4, r5, r6, pc}
 8000894:	f094 0f00 	teq	r4, #0
 8000898:	d10f      	bne.n	80008ba <__aeabi_dmul+0x1c2>
 800089a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800089e:	0040      	lsls	r0, r0, #1
 80008a0:	eb41 0101 	adc.w	r1, r1, r1
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	bf08      	it	eq
 80008aa:	3c01      	subeq	r4, #1
 80008ac:	d0f7      	beq.n	800089e <__aeabi_dmul+0x1a6>
 80008ae:	ea41 0106 	orr.w	r1, r1, r6
 80008b2:	f095 0f00 	teq	r5, #0
 80008b6:	bf18      	it	ne
 80008b8:	4770      	bxne	lr
 80008ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80008be:	0052      	lsls	r2, r2, #1
 80008c0:	eb43 0303 	adc.w	r3, r3, r3
 80008c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80008c8:	bf08      	it	eq
 80008ca:	3d01      	subeq	r5, #1
 80008cc:	d0f7      	beq.n	80008be <__aeabi_dmul+0x1c6>
 80008ce:	ea43 0306 	orr.w	r3, r3, r6
 80008d2:	4770      	bx	lr
 80008d4:	ea94 0f0c 	teq	r4, ip
 80008d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008dc:	bf18      	it	ne
 80008de:	ea95 0f0c 	teqne	r5, ip
 80008e2:	d00c      	beq.n	80008fe <__aeabi_dmul+0x206>
 80008e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e8:	bf18      	it	ne
 80008ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ee:	d1d1      	bne.n	8000894 <__aeabi_dmul+0x19c>
 80008f0:	ea81 0103 	eor.w	r1, r1, r3
 80008f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008f8:	f04f 0000 	mov.w	r0, #0
 80008fc:	bd70      	pop	{r4, r5, r6, pc}
 80008fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000902:	bf06      	itte	eq
 8000904:	4610      	moveq	r0, r2
 8000906:	4619      	moveq	r1, r3
 8000908:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090c:	d019      	beq.n	8000942 <__aeabi_dmul+0x24a>
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	d102      	bne.n	800091a <__aeabi_dmul+0x222>
 8000914:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000918:	d113      	bne.n	8000942 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	d105      	bne.n	800092c <__aeabi_dmul+0x234>
 8000920:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000924:	bf1c      	itt	ne
 8000926:	4610      	movne	r0, r2
 8000928:	4619      	movne	r1, r3
 800092a:	d10a      	bne.n	8000942 <__aeabi_dmul+0x24a>
 800092c:	ea81 0103 	eor.w	r1, r1, r3
 8000930:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000934:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000938:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800093c:	f04f 0000 	mov.w	r0, #0
 8000940:	bd70      	pop	{r4, r5, r6, pc}
 8000942:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000946:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800094a:	bd70      	pop	{r4, r5, r6, pc}

0800094c <__aeabi_ddiv>:
 800094c:	b570      	push	{r4, r5, r6, lr}
 800094e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000952:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000956:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800095a:	bf1d      	ittte	ne
 800095c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000960:	ea94 0f0c 	teqne	r4, ip
 8000964:	ea95 0f0c 	teqne	r5, ip
 8000968:	f000 f8a7 	bleq	8000aba <__aeabi_ddiv+0x16e>
 800096c:	eba4 0405 	sub.w	r4, r4, r5
 8000970:	ea81 0e03 	eor.w	lr, r1, r3
 8000974:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000978:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800097c:	f000 8088 	beq.w	8000a90 <__aeabi_ddiv+0x144>
 8000980:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000984:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000988:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800098c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000990:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000994:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000998:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800099c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80009a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80009a4:	429d      	cmp	r5, r3
 80009a6:	bf08      	it	eq
 80009a8:	4296      	cmpeq	r6, r2
 80009aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80009ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80009b2:	d202      	bcs.n	80009ba <__aeabi_ddiv+0x6e>
 80009b4:	085b      	lsrs	r3, r3, #1
 80009b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ba:	1ab6      	subs	r6, r6, r2
 80009bc:	eb65 0503 	sbc.w	r5, r5, r3
 80009c0:	085b      	lsrs	r3, r3, #1
 80009c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80009ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80009ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80009d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009d6:	bf22      	ittt	cs
 80009d8:	1ab6      	subcs	r6, r6, r2
 80009da:	4675      	movcs	r5, lr
 80009dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80009e0:	085b      	lsrs	r3, r3, #1
 80009e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ee:	bf22      	ittt	cs
 80009f0:	1ab6      	subcs	r6, r6, r2
 80009f2:	4675      	movcs	r5, lr
 80009f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009f8:	085b      	lsrs	r3, r3, #1
 80009fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80009fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a02:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a06:	bf22      	ittt	cs
 8000a08:	1ab6      	subcs	r6, r6, r2
 8000a0a:	4675      	movcs	r5, lr
 8000a0c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a10:	085b      	lsrs	r3, r3, #1
 8000a12:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a16:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a1a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a1e:	bf22      	ittt	cs
 8000a20:	1ab6      	subcs	r6, r6, r2
 8000a22:	4675      	movcs	r5, lr
 8000a24:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a28:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a2c:	d018      	beq.n	8000a60 <__aeabi_ddiv+0x114>
 8000a2e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a32:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a36:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a3a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a3e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a42:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a46:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a4a:	d1c0      	bne.n	80009ce <__aeabi_ddiv+0x82>
 8000a4c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a50:	d10b      	bne.n	8000a6a <__aeabi_ddiv+0x11e>
 8000a52:	ea41 0100 	orr.w	r1, r1, r0
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000a5e:	e7b6      	b.n	80009ce <__aeabi_ddiv+0x82>
 8000a60:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a64:	bf04      	itt	eq
 8000a66:	4301      	orreq	r1, r0
 8000a68:	2000      	moveq	r0, #0
 8000a6a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000a6e:	bf88      	it	hi
 8000a70:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000a74:	f63f aeaf 	bhi.w	80007d6 <__aeabi_dmul+0xde>
 8000a78:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a7c:	bf04      	itt	eq
 8000a7e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a82:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a86:	f150 0000 	adcs.w	r0, r0, #0
 8000a8a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a8e:	bd70      	pop	{r4, r5, r6, pc}
 8000a90:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a94:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a98:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a9c:	bfc2      	ittt	gt
 8000a9e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000aa2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000aa6:	bd70      	popgt	{r4, r5, r6, pc}
 8000aa8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000aac:	f04f 0e00 	mov.w	lr, #0
 8000ab0:	3c01      	subs	r4, #1
 8000ab2:	e690      	b.n	80007d6 <__aeabi_dmul+0xde>
 8000ab4:	ea45 0e06 	orr.w	lr, r5, r6
 8000ab8:	e68d      	b.n	80007d6 <__aeabi_dmul+0xde>
 8000aba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000abe:	ea94 0f0c 	teq	r4, ip
 8000ac2:	bf08      	it	eq
 8000ac4:	ea95 0f0c 	teqeq	r5, ip
 8000ac8:	f43f af3b 	beq.w	8000942 <__aeabi_dmul+0x24a>
 8000acc:	ea94 0f0c 	teq	r4, ip
 8000ad0:	d10a      	bne.n	8000ae8 <__aeabi_ddiv+0x19c>
 8000ad2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000ad6:	f47f af34 	bne.w	8000942 <__aeabi_dmul+0x24a>
 8000ada:	ea95 0f0c 	teq	r5, ip
 8000ade:	f47f af25 	bne.w	800092c <__aeabi_dmul+0x234>
 8000ae2:	4610      	mov	r0, r2
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	e72c      	b.n	8000942 <__aeabi_dmul+0x24a>
 8000ae8:	ea95 0f0c 	teq	r5, ip
 8000aec:	d106      	bne.n	8000afc <__aeabi_ddiv+0x1b0>
 8000aee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000af2:	f43f aefd 	beq.w	80008f0 <__aeabi_dmul+0x1f8>
 8000af6:	4610      	mov	r0, r2
 8000af8:	4619      	mov	r1, r3
 8000afa:	e722      	b.n	8000942 <__aeabi_dmul+0x24a>
 8000afc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b00:	bf18      	it	ne
 8000b02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b06:	f47f aec5 	bne.w	8000894 <__aeabi_dmul+0x19c>
 8000b0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b0e:	f47f af0d 	bne.w	800092c <__aeabi_dmul+0x234>
 8000b12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b16:	f47f aeeb 	bne.w	80008f0 <__aeabi_dmul+0x1f8>
 8000b1a:	e712      	b.n	8000942 <__aeabi_dmul+0x24a>

08000b1c <__gedf2>:
 8000b1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000b20:	e006      	b.n	8000b30 <__cmpdf2+0x4>
 8000b22:	bf00      	nop

08000b24 <__ledf2>:
 8000b24:	f04f 0c01 	mov.w	ip, #1
 8000b28:	e002      	b.n	8000b30 <__cmpdf2+0x4>
 8000b2a:	bf00      	nop

08000b2c <__cmpdf2>:
 8000b2c:	f04f 0c01 	mov.w	ip, #1
 8000b30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	bf18      	it	ne
 8000b42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b46:	d01b      	beq.n	8000b80 <__cmpdf2+0x54>
 8000b48:	b001      	add	sp, #4
 8000b4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b4e:	bf0c      	ite	eq
 8000b50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b54:	ea91 0f03 	teqne	r1, r3
 8000b58:	bf02      	ittt	eq
 8000b5a:	ea90 0f02 	teqeq	r0, r2
 8000b5e:	2000      	moveq	r0, #0
 8000b60:	4770      	bxeq	lr
 8000b62:	f110 0f00 	cmn.w	r0, #0
 8000b66:	ea91 0f03 	teq	r1, r3
 8000b6a:	bf58      	it	pl
 8000b6c:	4299      	cmppl	r1, r3
 8000b6e:	bf08      	it	eq
 8000b70:	4290      	cmpeq	r0, r2
 8000b72:	bf2c      	ite	cs
 8000b74:	17d8      	asrcs	r0, r3, #31
 8000b76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b7a:	f040 0001 	orr.w	r0, r0, #1
 8000b7e:	4770      	bx	lr
 8000b80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b88:	d102      	bne.n	8000b90 <__cmpdf2+0x64>
 8000b8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8e:	d107      	bne.n	8000ba0 <__cmpdf2+0x74>
 8000b90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b98:	d1d6      	bne.n	8000b48 <__cmpdf2+0x1c>
 8000b9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9e:	d0d3      	beq.n	8000b48 <__cmpdf2+0x1c>
 8000ba0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_cdrcmple>:
 8000ba8:	4684      	mov	ip, r0
 8000baa:	4610      	mov	r0, r2
 8000bac:	4662      	mov	r2, ip
 8000bae:	468c      	mov	ip, r1
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4663      	mov	r3, ip
 8000bb4:	e000      	b.n	8000bb8 <__aeabi_cdcmpeq>
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_cdcmpeq>:
 8000bb8:	b501      	push	{r0, lr}
 8000bba:	f7ff ffb7 	bl	8000b2c <__cmpdf2>
 8000bbe:	2800      	cmp	r0, #0
 8000bc0:	bf48      	it	mi
 8000bc2:	f110 0f00 	cmnmi.w	r0, #0
 8000bc6:	bd01      	pop	{r0, pc}

08000bc8 <__aeabi_dcmpeq>:
 8000bc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bcc:	f7ff fff4 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000bd0:	bf0c      	ite	eq
 8000bd2:	2001      	moveq	r0, #1
 8000bd4:	2000      	movne	r0, #0
 8000bd6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bda:	bf00      	nop

08000bdc <__aeabi_dcmplt>:
 8000bdc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be0:	f7ff ffea 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000be4:	bf34      	ite	cc
 8000be6:	2001      	movcc	r0, #1
 8000be8:	2000      	movcs	r0, #0
 8000bea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bee:	bf00      	nop

08000bf0 <__aeabi_dcmple>:
 8000bf0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf4:	f7ff ffe0 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000bf8:	bf94      	ite	ls
 8000bfa:	2001      	movls	r0, #1
 8000bfc:	2000      	movhi	r0, #0
 8000bfe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c02:	bf00      	nop

08000c04 <__aeabi_dcmpge>:
 8000c04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c08:	f7ff ffce 	bl	8000ba8 <__aeabi_cdrcmple>
 8000c0c:	bf94      	ite	ls
 8000c0e:	2001      	movls	r0, #1
 8000c10:	2000      	movhi	r0, #0
 8000c12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c16:	bf00      	nop

08000c18 <__aeabi_dcmpgt>:
 8000c18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c1c:	f7ff ffc4 	bl	8000ba8 <__aeabi_cdrcmple>
 8000c20:	bf34      	ite	cc
 8000c22:	2001      	movcc	r0, #1
 8000c24:	2000      	movcs	r0, #0
 8000c26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c2a:	bf00      	nop

08000c2c <__aeabi_dcmpun>:
 8000c2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c34:	d102      	bne.n	8000c3c <__aeabi_dcmpun+0x10>
 8000c36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c3a:	d10a      	bne.n	8000c52 <__aeabi_dcmpun+0x26>
 8000c3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c44:	d102      	bne.n	8000c4c <__aeabi_dcmpun+0x20>
 8000c46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c4a:	d102      	bne.n	8000c52 <__aeabi_dcmpun+0x26>
 8000c4c:	f04f 0000 	mov.w	r0, #0
 8000c50:	4770      	bx	lr
 8000c52:	f04f 0001 	mov.w	r0, #1
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_d2iz>:
 8000c58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c60:	d215      	bcs.n	8000c8e <__aeabi_d2iz+0x36>
 8000c62:	d511      	bpl.n	8000c88 <__aeabi_d2iz+0x30>
 8000c64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c6c:	d912      	bls.n	8000c94 <__aeabi_d2iz+0x3c>
 8000c6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c82:	bf18      	it	ne
 8000c84:	4240      	negne	r0, r0
 8000c86:	4770      	bx	lr
 8000c88:	f04f 0000 	mov.w	r0, #0
 8000c8c:	4770      	bx	lr
 8000c8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c92:	d105      	bne.n	8000ca0 <__aeabi_d2iz+0x48>
 8000c94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000c98:	bf08      	it	eq
 8000c9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000c9e:	4770      	bx	lr
 8000ca0:	f04f 0000 	mov.w	r0, #0
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_d2f>:
 8000ca8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000cac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000cb0:	bf24      	itt	cs
 8000cb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000cb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000cba:	d90d      	bls.n	8000cd8 <__aeabi_d2f+0x30>
 8000cbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000cc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000cc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000cc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ccc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000cd0:	bf08      	it	eq
 8000cd2:	f020 0001 	biceq.w	r0, r0, #1
 8000cd6:	4770      	bx	lr
 8000cd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000cdc:	d121      	bne.n	8000d22 <__aeabi_d2f+0x7a>
 8000cde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ce2:	bfbc      	itt	lt
 8000ce4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ce8:	4770      	bxlt	lr
 8000cea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000cee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000cf2:	f1c2 0218 	rsb	r2, r2, #24
 8000cf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000cfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000d02:	bf18      	it	ne
 8000d04:	f040 0001 	orrne.w	r0, r0, #1
 8000d08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000d10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000d14:	ea40 000c 	orr.w	r0, r0, ip
 8000d18:	fa23 f302 	lsr.w	r3, r3, r2
 8000d1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d20:	e7cc      	b.n	8000cbc <__aeabi_d2f+0x14>
 8000d22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000d26:	d107      	bne.n	8000d38 <__aeabi_d2f+0x90>
 8000d28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000d2c:	bf1e      	ittt	ne
 8000d2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000d32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000d36:	4770      	bxne	lr
 8000d38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000d3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop

08000d48 <__aeabi_uldivmod>:
 8000d48:	b953      	cbnz	r3, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4a:	b94a      	cbnz	r2, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4c:	2900      	cmp	r1, #0
 8000d4e:	bf08      	it	eq
 8000d50:	2800      	cmpeq	r0, #0
 8000d52:	bf1c      	itt	ne
 8000d54:	f04f 31ff 	movne.w	r1, #4294967295
 8000d58:	f04f 30ff 	movne.w	r0, #4294967295
 8000d5c:	f000 b96a 	b.w	8001034 <__aeabi_idiv0>
 8000d60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d68:	f000 f806 	bl	8000d78 <__udivmoddi4>
 8000d6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d74:	b004      	add	sp, #16
 8000d76:	4770      	bx	lr

08000d78 <__udivmoddi4>:
 8000d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d7c:	9d08      	ldr	r5, [sp, #32]
 8000d7e:	460c      	mov	r4, r1
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d14e      	bne.n	8000e22 <__udivmoddi4+0xaa>
 8000d84:	4694      	mov	ip, r2
 8000d86:	458c      	cmp	ip, r1
 8000d88:	4686      	mov	lr, r0
 8000d8a:	fab2 f282 	clz	r2, r2
 8000d8e:	d962      	bls.n	8000e56 <__udivmoddi4+0xde>
 8000d90:	b14a      	cbz	r2, 8000da6 <__udivmoddi4+0x2e>
 8000d92:	f1c2 0320 	rsb	r3, r2, #32
 8000d96:	4091      	lsls	r1, r2
 8000d98:	fa20 f303 	lsr.w	r3, r0, r3
 8000d9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000da0:	4319      	orrs	r1, r3
 8000da2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000daa:	fa1f f68c 	uxth.w	r6, ip
 8000dae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000db2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db6:	fb07 1114 	mls	r1, r7, r4, r1
 8000dba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dbe:	fb04 f106 	mul.w	r1, r4, r6
 8000dc2:	4299      	cmp	r1, r3
 8000dc4:	d90a      	bls.n	8000ddc <__udivmoddi4+0x64>
 8000dc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dca:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dce:	f080 8112 	bcs.w	8000ff6 <__udivmoddi4+0x27e>
 8000dd2:	4299      	cmp	r1, r3
 8000dd4:	f240 810f 	bls.w	8000ff6 <__udivmoddi4+0x27e>
 8000dd8:	3c02      	subs	r4, #2
 8000dda:	4463      	add	r3, ip
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	fa1f f38e 	uxth.w	r3, lr
 8000de2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de6:	fb07 1110 	mls	r1, r7, r0, r1
 8000dea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dee:	fb00 f606 	mul.w	r6, r0, r6
 8000df2:	429e      	cmp	r6, r3
 8000df4:	d90a      	bls.n	8000e0c <__udivmoddi4+0x94>
 8000df6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dfa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfe:	f080 80fc 	bcs.w	8000ffa <__udivmoddi4+0x282>
 8000e02:	429e      	cmp	r6, r3
 8000e04:	f240 80f9 	bls.w	8000ffa <__udivmoddi4+0x282>
 8000e08:	4463      	add	r3, ip
 8000e0a:	3802      	subs	r0, #2
 8000e0c:	1b9b      	subs	r3, r3, r6
 8000e0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e12:	2100      	movs	r1, #0
 8000e14:	b11d      	cbz	r5, 8000e1e <__udivmoddi4+0xa6>
 8000e16:	40d3      	lsrs	r3, r2
 8000e18:	2200      	movs	r2, #0
 8000e1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e22:	428b      	cmp	r3, r1
 8000e24:	d905      	bls.n	8000e32 <__udivmoddi4+0xba>
 8000e26:	b10d      	cbz	r5, 8000e2c <__udivmoddi4+0xb4>
 8000e28:	e9c5 0100 	strd	r0, r1, [r5]
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	4608      	mov	r0, r1
 8000e30:	e7f5      	b.n	8000e1e <__udivmoddi4+0xa6>
 8000e32:	fab3 f183 	clz	r1, r3
 8000e36:	2900      	cmp	r1, #0
 8000e38:	d146      	bne.n	8000ec8 <__udivmoddi4+0x150>
 8000e3a:	42a3      	cmp	r3, r4
 8000e3c:	d302      	bcc.n	8000e44 <__udivmoddi4+0xcc>
 8000e3e:	4290      	cmp	r0, r2
 8000e40:	f0c0 80f0 	bcc.w	8001024 <__udivmoddi4+0x2ac>
 8000e44:	1a86      	subs	r6, r0, r2
 8000e46:	eb64 0303 	sbc.w	r3, r4, r3
 8000e4a:	2001      	movs	r0, #1
 8000e4c:	2d00      	cmp	r5, #0
 8000e4e:	d0e6      	beq.n	8000e1e <__udivmoddi4+0xa6>
 8000e50:	e9c5 6300 	strd	r6, r3, [r5]
 8000e54:	e7e3      	b.n	8000e1e <__udivmoddi4+0xa6>
 8000e56:	2a00      	cmp	r2, #0
 8000e58:	f040 8090 	bne.w	8000f7c <__udivmoddi4+0x204>
 8000e5c:	eba1 040c 	sub.w	r4, r1, ip
 8000e60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e64:	fa1f f78c 	uxth.w	r7, ip
 8000e68:	2101      	movs	r1, #1
 8000e6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e72:	fb08 4416 	mls	r4, r8, r6, r4
 8000e76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e7a:	fb07 f006 	mul.w	r0, r7, r6
 8000e7e:	4298      	cmp	r0, r3
 8000e80:	d908      	bls.n	8000e94 <__udivmoddi4+0x11c>
 8000e82:	eb1c 0303 	adds.w	r3, ip, r3
 8000e86:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e8a:	d202      	bcs.n	8000e92 <__udivmoddi4+0x11a>
 8000e8c:	4298      	cmp	r0, r3
 8000e8e:	f200 80cd 	bhi.w	800102c <__udivmoddi4+0x2b4>
 8000e92:	4626      	mov	r6, r4
 8000e94:	1a1c      	subs	r4, r3, r0
 8000e96:	fa1f f38e 	uxth.w	r3, lr
 8000e9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000ea2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea6:	fb00 f707 	mul.w	r7, r0, r7
 8000eaa:	429f      	cmp	r7, r3
 8000eac:	d908      	bls.n	8000ec0 <__udivmoddi4+0x148>
 8000eae:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb6:	d202      	bcs.n	8000ebe <__udivmoddi4+0x146>
 8000eb8:	429f      	cmp	r7, r3
 8000eba:	f200 80b0 	bhi.w	800101e <__udivmoddi4+0x2a6>
 8000ebe:	4620      	mov	r0, r4
 8000ec0:	1bdb      	subs	r3, r3, r7
 8000ec2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec6:	e7a5      	b.n	8000e14 <__udivmoddi4+0x9c>
 8000ec8:	f1c1 0620 	rsb	r6, r1, #32
 8000ecc:	408b      	lsls	r3, r1
 8000ece:	fa22 f706 	lsr.w	r7, r2, r6
 8000ed2:	431f      	orrs	r7, r3
 8000ed4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed8:	fa04 f301 	lsl.w	r3, r4, r1
 8000edc:	ea43 030c 	orr.w	r3, r3, ip
 8000ee0:	40f4      	lsrs	r4, r6
 8000ee2:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee6:	0c38      	lsrs	r0, r7, #16
 8000ee8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000eec:	fbb4 fef0 	udiv	lr, r4, r0
 8000ef0:	fa1f fc87 	uxth.w	ip, r7
 8000ef4:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000efc:	fb0e f90c 	mul.w	r9, lr, ip
 8000f00:	45a1      	cmp	r9, r4
 8000f02:	fa02 f201 	lsl.w	r2, r2, r1
 8000f06:	d90a      	bls.n	8000f1e <__udivmoddi4+0x1a6>
 8000f08:	193c      	adds	r4, r7, r4
 8000f0a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f0e:	f080 8084 	bcs.w	800101a <__udivmoddi4+0x2a2>
 8000f12:	45a1      	cmp	r9, r4
 8000f14:	f240 8081 	bls.w	800101a <__udivmoddi4+0x2a2>
 8000f18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f1c:	443c      	add	r4, r7
 8000f1e:	eba4 0409 	sub.w	r4, r4, r9
 8000f22:	fa1f f983 	uxth.w	r9, r3
 8000f26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f36:	45a4      	cmp	ip, r4
 8000f38:	d907      	bls.n	8000f4a <__udivmoddi4+0x1d2>
 8000f3a:	193c      	adds	r4, r7, r4
 8000f3c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f40:	d267      	bcs.n	8001012 <__udivmoddi4+0x29a>
 8000f42:	45a4      	cmp	ip, r4
 8000f44:	d965      	bls.n	8001012 <__udivmoddi4+0x29a>
 8000f46:	3b02      	subs	r3, #2
 8000f48:	443c      	add	r4, r7
 8000f4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000f52:	eba4 040c 	sub.w	r4, r4, ip
 8000f56:	429c      	cmp	r4, r3
 8000f58:	46ce      	mov	lr, r9
 8000f5a:	469c      	mov	ip, r3
 8000f5c:	d351      	bcc.n	8001002 <__udivmoddi4+0x28a>
 8000f5e:	d04e      	beq.n	8000ffe <__udivmoddi4+0x286>
 8000f60:	b155      	cbz	r5, 8000f78 <__udivmoddi4+0x200>
 8000f62:	ebb8 030e 	subs.w	r3, r8, lr
 8000f66:	eb64 040c 	sbc.w	r4, r4, ip
 8000f6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6e:	40cb      	lsrs	r3, r1
 8000f70:	431e      	orrs	r6, r3
 8000f72:	40cc      	lsrs	r4, r1
 8000f74:	e9c5 6400 	strd	r6, r4, [r5]
 8000f78:	2100      	movs	r1, #0
 8000f7a:	e750      	b.n	8000e1e <__udivmoddi4+0xa6>
 8000f7c:	f1c2 0320 	rsb	r3, r2, #32
 8000f80:	fa20 f103 	lsr.w	r1, r0, r3
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	fa24 f303 	lsr.w	r3, r4, r3
 8000f8c:	4094      	lsls	r4, r2
 8000f8e:	430c      	orrs	r4, r1
 8000f90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f98:	fa1f f78c 	uxth.w	r7, ip
 8000f9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000fa0:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa4:	0c23      	lsrs	r3, r4, #16
 8000fa6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000faa:	fb00 f107 	mul.w	r1, r0, r7
 8000fae:	4299      	cmp	r1, r3
 8000fb0:	d908      	bls.n	8000fc4 <__udivmoddi4+0x24c>
 8000fb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fba:	d22c      	bcs.n	8001016 <__udivmoddi4+0x29e>
 8000fbc:	4299      	cmp	r1, r3
 8000fbe:	d92a      	bls.n	8001016 <__udivmoddi4+0x29e>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	4463      	add	r3, ip
 8000fc4:	1a5b      	subs	r3, r3, r1
 8000fc6:	b2a4      	uxth	r4, r4
 8000fc8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fcc:	fb08 3311 	mls	r3, r8, r1, r3
 8000fd0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd4:	fb01 f307 	mul.w	r3, r1, r7
 8000fd8:	42a3      	cmp	r3, r4
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x276>
 8000fdc:	eb1c 0404 	adds.w	r4, ip, r4
 8000fe0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fe4:	d213      	bcs.n	800100e <__udivmoddi4+0x296>
 8000fe6:	42a3      	cmp	r3, r4
 8000fe8:	d911      	bls.n	800100e <__udivmoddi4+0x296>
 8000fea:	3902      	subs	r1, #2
 8000fec:	4464      	add	r4, ip
 8000fee:	1ae4      	subs	r4, r4, r3
 8000ff0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff4:	e739      	b.n	8000e6a <__udivmoddi4+0xf2>
 8000ff6:	4604      	mov	r4, r0
 8000ff8:	e6f0      	b.n	8000ddc <__udivmoddi4+0x64>
 8000ffa:	4608      	mov	r0, r1
 8000ffc:	e706      	b.n	8000e0c <__udivmoddi4+0x94>
 8000ffe:	45c8      	cmp	r8, r9
 8001000:	d2ae      	bcs.n	8000f60 <__udivmoddi4+0x1e8>
 8001002:	ebb9 0e02 	subs.w	lr, r9, r2
 8001006:	eb63 0c07 	sbc.w	ip, r3, r7
 800100a:	3801      	subs	r0, #1
 800100c:	e7a8      	b.n	8000f60 <__udivmoddi4+0x1e8>
 800100e:	4631      	mov	r1, r6
 8001010:	e7ed      	b.n	8000fee <__udivmoddi4+0x276>
 8001012:	4603      	mov	r3, r0
 8001014:	e799      	b.n	8000f4a <__udivmoddi4+0x1d2>
 8001016:	4630      	mov	r0, r6
 8001018:	e7d4      	b.n	8000fc4 <__udivmoddi4+0x24c>
 800101a:	46d6      	mov	lr, sl
 800101c:	e77f      	b.n	8000f1e <__udivmoddi4+0x1a6>
 800101e:	4463      	add	r3, ip
 8001020:	3802      	subs	r0, #2
 8001022:	e74d      	b.n	8000ec0 <__udivmoddi4+0x148>
 8001024:	4606      	mov	r6, r0
 8001026:	4623      	mov	r3, r4
 8001028:	4608      	mov	r0, r1
 800102a:	e70f      	b.n	8000e4c <__udivmoddi4+0xd4>
 800102c:	3e02      	subs	r6, #2
 800102e:	4463      	add	r3, ip
 8001030:	e730      	b.n	8000e94 <__udivmoddi4+0x11c>
 8001032:	bf00      	nop

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800103c:	4b0d      	ldr	r3, [pc, #52]	@ (8001074 <MX_CRC_Init+0x3c>)
 800103e:	4a0e      	ldr	r2, [pc, #56]	@ (8001078 <MX_CRC_Init+0x40>)
 8001040:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001042:	4b0c      	ldr	r3, [pc, #48]	@ (8001074 <MX_CRC_Init+0x3c>)
 8001044:	2200      	movs	r2, #0
 8001046:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001048:	4b0a      	ldr	r3, [pc, #40]	@ (8001074 <MX_CRC_Init+0x3c>)
 800104a:	2200      	movs	r2, #0
 800104c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800104e:	4b09      	ldr	r3, [pc, #36]	@ (8001074 <MX_CRC_Init+0x3c>)
 8001050:	2200      	movs	r2, #0
 8001052:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001054:	4b07      	ldr	r3, [pc, #28]	@ (8001074 <MX_CRC_Init+0x3c>)
 8001056:	2200      	movs	r2, #0
 8001058:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800105a:	4b06      	ldr	r3, [pc, #24]	@ (8001074 <MX_CRC_Init+0x3c>)
 800105c:	2201      	movs	r2, #1
 800105e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001060:	4804      	ldr	r0, [pc, #16]	@ (8001074 <MX_CRC_Init+0x3c>)
 8001062:	f003 ff21 	bl	8004ea8 <HAL_CRC_Init>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800106c:	f001 f856 	bl	800211c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001070:	bf00      	nop
 8001072:	bd80      	pop	{r7, pc}
 8001074:	20000a00 	.word	0x20000a00
 8001078:	40023000 	.word	0x40023000

0800107c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 800107c:	b480      	push	{r7}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a0a      	ldr	r2, [pc, #40]	@ (80010b4 <HAL_CRC_MspInit+0x38>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d10b      	bne.n	80010a6 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800108e:	4b0a      	ldr	r3, [pc, #40]	@ (80010b8 <HAL_CRC_MspInit+0x3c>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001092:	4a09      	ldr	r2, [pc, #36]	@ (80010b8 <HAL_CRC_MspInit+0x3c>)
 8001094:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001098:	6313      	str	r3, [r2, #48]	@ 0x30
 800109a:	4b07      	ldr	r3, [pc, #28]	@ (80010b8 <HAL_CRC_MspInit+0x3c>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80010a6:	bf00      	nop
 80010a8:	3714      	adds	r7, #20
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	40023000 	.word	0x40023000
 80010b8:	40023800 	.word	0x40023800

080010bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80010c2:	4b14      	ldr	r3, [pc, #80]	@ (8001114 <MX_DMA_Init+0x58>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c6:	4a13      	ldr	r2, [pc, #76]	@ (8001114 <MX_DMA_Init+0x58>)
 80010c8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80010cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ce:	4b11      	ldr	r3, [pc, #68]	@ (8001114 <MX_DMA_Init+0x58>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010d6:	607b      	str	r3, [r7, #4]
 80010d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80010da:	2200      	movs	r2, #0
 80010dc:	2100      	movs	r1, #0
 80010de:	2039      	movs	r0, #57	@ 0x39
 80010e0:	f003 feab 	bl	8004e3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80010e4:	2039      	movs	r0, #57	@ 0x39
 80010e6:	f003 fec4 	bl	8004e72 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 2, 0);
 80010ea:	2200      	movs	r2, #0
 80010ec:	2102      	movs	r1, #2
 80010ee:	203b      	movs	r0, #59	@ 0x3b
 80010f0:	f003 fea3 	bl	8004e3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80010f4:	203b      	movs	r0, #59	@ 0x3b
 80010f6:	f003 febc 	bl	8004e72 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 2, 0);
 80010fa:	2200      	movs	r2, #0
 80010fc:	2102      	movs	r1, #2
 80010fe:	2045      	movs	r0, #69	@ 0x45
 8001100:	f003 fe9b 	bl	8004e3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001104:	2045      	movs	r0, #69	@ 0x45
 8001106:	f003 feb4 	bl	8004e72 <HAL_NVIC_EnableIRQ>

}
 800110a:	bf00      	nop
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40023800 	.word	0x40023800

08001118 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b090      	sub	sp, #64	@ 0x40
 800111c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	605a      	str	r2, [r3, #4]
 8001128:	609a      	str	r2, [r3, #8]
 800112a:	60da      	str	r2, [r3, #12]
 800112c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800112e:	4ba6      	ldr	r3, [pc, #664]	@ (80013c8 <MX_GPIO_Init+0x2b0>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001132:	4aa5      	ldr	r2, [pc, #660]	@ (80013c8 <MX_GPIO_Init+0x2b0>)
 8001134:	f043 0310 	orr.w	r3, r3, #16
 8001138:	6313      	str	r3, [r2, #48]	@ 0x30
 800113a:	4ba3      	ldr	r3, [pc, #652]	@ (80013c8 <MX_GPIO_Init+0x2b0>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113e:	f003 0310 	and.w	r3, r3, #16
 8001142:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001146:	4ba0      	ldr	r3, [pc, #640]	@ (80013c8 <MX_GPIO_Init+0x2b0>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114a:	4a9f      	ldr	r2, [pc, #636]	@ (80013c8 <MX_GPIO_Init+0x2b0>)
 800114c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001150:	6313      	str	r3, [r2, #48]	@ 0x30
 8001152:	4b9d      	ldr	r3, [pc, #628]	@ (80013c8 <MX_GPIO_Init+0x2b0>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001156:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800115a:	627b      	str	r3, [r7, #36]	@ 0x24
 800115c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800115e:	4b9a      	ldr	r3, [pc, #616]	@ (80013c8 <MX_GPIO_Init+0x2b0>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001162:	4a99      	ldr	r2, [pc, #612]	@ (80013c8 <MX_GPIO_Init+0x2b0>)
 8001164:	f043 0302 	orr.w	r3, r3, #2
 8001168:	6313      	str	r3, [r2, #48]	@ 0x30
 800116a:	4b97      	ldr	r3, [pc, #604]	@ (80013c8 <MX_GPIO_Init+0x2b0>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116e:	f003 0302 	and.w	r3, r3, #2
 8001172:	623b      	str	r3, [r7, #32]
 8001174:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001176:	4b94      	ldr	r3, [pc, #592]	@ (80013c8 <MX_GPIO_Init+0x2b0>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117a:	4a93      	ldr	r2, [pc, #588]	@ (80013c8 <MX_GPIO_Init+0x2b0>)
 800117c:	f043 0308 	orr.w	r3, r3, #8
 8001180:	6313      	str	r3, [r2, #48]	@ 0x30
 8001182:	4b91      	ldr	r3, [pc, #580]	@ (80013c8 <MX_GPIO_Init+0x2b0>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001186:	f003 0308 	and.w	r3, r3, #8
 800118a:	61fb      	str	r3, [r7, #28]
 800118c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800118e:	4b8e      	ldr	r3, [pc, #568]	@ (80013c8 <MX_GPIO_Init+0x2b0>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001192:	4a8d      	ldr	r2, [pc, #564]	@ (80013c8 <MX_GPIO_Init+0x2b0>)
 8001194:	f043 0304 	orr.w	r3, r3, #4
 8001198:	6313      	str	r3, [r2, #48]	@ 0x30
 800119a:	4b8b      	ldr	r3, [pc, #556]	@ (80013c8 <MX_GPIO_Init+0x2b0>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119e:	f003 0304 	and.w	r3, r3, #4
 80011a2:	61bb      	str	r3, [r7, #24]
 80011a4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a6:	4b88      	ldr	r3, [pc, #544]	@ (80013c8 <MX_GPIO_Init+0x2b0>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011aa:	4a87      	ldr	r2, [pc, #540]	@ (80013c8 <MX_GPIO_Init+0x2b0>)
 80011ac:	f043 0301 	orr.w	r3, r3, #1
 80011b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011b2:	4b85      	ldr	r3, [pc, #532]	@ (80013c8 <MX_GPIO_Init+0x2b0>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b6:	f003 0301 	and.w	r3, r3, #1
 80011ba:	617b      	str	r3, [r7, #20]
 80011bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80011be:	4b82      	ldr	r3, [pc, #520]	@ (80013c8 <MX_GPIO_Init+0x2b0>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c2:	4a81      	ldr	r2, [pc, #516]	@ (80013c8 <MX_GPIO_Init+0x2b0>)
 80011c4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ca:	4b7f      	ldr	r3, [pc, #508]	@ (80013c8 <MX_GPIO_Init+0x2b0>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80011d2:	613b      	str	r3, [r7, #16]
 80011d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80011d6:	4b7c      	ldr	r3, [pc, #496]	@ (80013c8 <MX_GPIO_Init+0x2b0>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011da:	4a7b      	ldr	r2, [pc, #492]	@ (80013c8 <MX_GPIO_Init+0x2b0>)
 80011dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011e2:	4b79      	ldr	r3, [pc, #484]	@ (80013c8 <MX_GPIO_Init+0x2b0>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80011ee:	4b76      	ldr	r3, [pc, #472]	@ (80013c8 <MX_GPIO_Init+0x2b0>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f2:	4a75      	ldr	r2, [pc, #468]	@ (80013c8 <MX_GPIO_Init+0x2b0>)
 80011f4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011fa:	4b73      	ldr	r3, [pc, #460]	@ (80013c8 <MX_GPIO_Init+0x2b0>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001202:	60bb      	str	r3, [r7, #8]
 8001204:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001206:	4b70      	ldr	r3, [pc, #448]	@ (80013c8 <MX_GPIO_Init+0x2b0>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120a:	4a6f      	ldr	r2, [pc, #444]	@ (80013c8 <MX_GPIO_Init+0x2b0>)
 800120c:	f043 0320 	orr.w	r3, r3, #32
 8001210:	6313      	str	r3, [r2, #48]	@ 0x30
 8001212:	4b6d      	ldr	r3, [pc, #436]	@ (80013c8 <MX_GPIO_Init+0x2b0>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001216:	f003 0320 	and.w	r3, r3, #32
 800121a:	607b      	str	r3, [r7, #4]
 800121c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800121e:	4b6a      	ldr	r3, [pc, #424]	@ (80013c8 <MX_GPIO_Init+0x2b0>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001222:	4a69      	ldr	r2, [pc, #420]	@ (80013c8 <MX_GPIO_Init+0x2b0>)
 8001224:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001228:	6313      	str	r3, [r2, #48]	@ 0x30
 800122a:	4b67      	ldr	r3, [pc, #412]	@ (80013c8 <MX_GPIO_Init+0x2b0>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001232:	603b      	str	r3, [r7, #0]
 8001234:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 8001236:	2200      	movs	r2, #0
 8001238:	2102      	movs	r1, #2
 800123a:	4864      	ldr	r0, [pc, #400]	@ (80013cc <MX_GPIO_Init+0x2b4>)
 800123c:	f004 fe6a 	bl	8005f14 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE2 PE1 PE0
                           PE8 PE9 PE11 PE14
                           PE7 PE10 PE12 PE15
                           PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0
 8001240:	f64f 738f 	movw	r3, #65423	@ 0xff8f
 8001244:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14
                          |GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001246:	2303      	movs	r3, #3
 8001248:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124a:	2300      	movs	r3, #0
 800124c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800124e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001252:	4619      	mov	r1, r3
 8001254:	485e      	ldr	r0, [pc, #376]	@ (80013d0 <MX_GPIO_Init+0x2b8>)
 8001256:	f004 fb8d 	bl	8005974 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG14 PG13 PG15 PG11
                           PG12 PG10 PG9 PG8
                           PG7 PG6 PG1 PG3
                           PG2 PG0 PG5 PG4 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_11
 800125a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800125e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_12|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8
                          |GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1|GPIO_PIN_3
                          |GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001260:	2303      	movs	r3, #3
 8001262:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001264:	2300      	movs	r3, #0
 8001266:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001268:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800126c:	4619      	mov	r1, r3
 800126e:	4859      	ldr	r0, [pc, #356]	@ (80013d4 <MX_GPIO_Init+0x2bc>)
 8001270:	f004 fb80 	bl	8005974 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB5 PB4 PB3
                           PB9 PB6 PB13 PB12
                           PB2 PB10 PB1 PB0
                           PB11 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3
 8001274:	f64f 737f 	movw	r3, #65407	@ 0xff7f
 8001278:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_13|GPIO_PIN_12
                          |GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_1|GPIO_PIN_0
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800127a:	2303      	movs	r3, #3
 800127c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001282:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001286:	4619      	mov	r1, r3
 8001288:	4853      	ldr	r0, [pc, #332]	@ (80013d8 <MX_GPIO_Init+0x2c0>)
 800128a:	f004 fb73 	bl	8005974 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD7 PD6 PD0 PD5
                           PD3 PD1 PD4 PD15
                           PD10 PD14 PD9 PD8
                           PD12 PD13 PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_0|GPIO_PIN_5
 800128e:	f64f 73fb 	movw	r3, #65531	@ 0xfffb
 8001292:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_15
                          |GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001294:	2303      	movs	r3, #3
 8001296:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800129c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012a0:	4619      	mov	r1, r3
 80012a2:	484e      	ldr	r0, [pc, #312]	@ (80013dc <MX_GPIO_Init+0x2c4>)
 80012a4:	f004 fb66 	bl	8005974 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA15 PA12 PA11 PA10
                           PA8 PA1 PA0 PA4
                           PA2 PA6 PA5 PA3
                           PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10
 80012a8:	f649 53ff 	movw	r3, #40447	@ 0x9dff
 80012ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_4
                          |GPIO_PIN_2|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_3
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012ae:	2303      	movs	r3, #3
 80012b0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012ba:	4619      	mov	r1, r3
 80012bc:	4848      	ldr	r0, [pc, #288]	@ (80013e0 <MX_GPIO_Init+0x2c8>)
 80012be:	f004 fb59 	bl	8005974 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ13 PJ12 PJ14 PJ15
                           PJ11 PJ8 PJ10 PJ7
                           PJ9 PJ6 PJ4 PJ5
                           PJ3 PJ2 PJ0 PJ1 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15
 80012c2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80012c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_7
                          |GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012c8:	2303      	movs	r3, #3
 80012ca:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012cc:	2300      	movs	r3, #0
 80012ce:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80012d0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012d4:	4619      	mov	r1, r3
 80012d6:	4843      	ldr	r0, [pc, #268]	@ (80013e4 <MX_GPIO_Init+0x2cc>)
 80012d8:	f004 fb4c 	bl	8005974 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC11 PC10 PC14 PC15
                           PC9 PC7 PC6 PC3
                           PC0 PC1 PC2 PC4
                           PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15
 80012dc:	f64c 63ff 	movw	r3, #52991	@ 0xceff
 80012e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_9|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_3
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012e2:	2303      	movs	r3, #3
 80012e4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012ee:	4619      	mov	r1, r3
 80012f0:	483d      	ldr	r0, [pc, #244]	@ (80013e8 <MX_GPIO_Init+0x2d0>)
 80012f2:	f004 fb3f 	bl	8005974 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI8 PI4 PI3 PI2
                           PI5 PI7 PI10 PI6
                           PI12 PI9 PI0 PI13
                           PI15 PI14 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2
 80012f6:	f24f 73fd 	movw	r3, #63485	@ 0xf7fd
 80012fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_6
                          |GPIO_PIN_12|GPIO_PIN_9|GPIO_PIN_0|GPIO_PIN_13
                          |GPIO_PIN_15|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012fc:	2303      	movs	r3, #3
 80012fe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001304:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001308:	4619      	mov	r1, r3
 800130a:	4830      	ldr	r0, [pc, #192]	@ (80013cc <MX_GPIO_Init+0x2b4>)
 800130c:	f004 fb32 	bl	8005974 <HAL_GPIO_Init>

  /*Configure GPIO pins : PK7 PK6 PK5 PK4
                           PK3 PK1 PK2 PK0 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
 8001310:	23ff      	movs	r3, #255	@ 0xff
 8001312:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001314:	2303      	movs	r3, #3
 8001316:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001318:	2300      	movs	r3, #0
 800131a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800131c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001320:	4619      	mov	r1, r3
 8001322:	4832      	ldr	r0, [pc, #200]	@ (80013ec <MX_GPIO_Init+0x2d4>)
 8001324:	f004 fb26 	bl	8005974 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001328:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800132c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800132e:	2300      	movs	r3, #0
 8001330:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001332:	2300      	movs	r3, #0
 8001334:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001336:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800133a:	4619      	mov	r1, r3
 800133c:	482a      	ldr	r0, [pc, #168]	@ (80013e8 <MX_GPIO_Init+0x2d0>)
 800133e:	f004 fb19 	bl	8005974 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3
                           PF4 PF7 PF6 PF5
                           PF10 PF9 PF8 PF12
                           PF15 PF13 PF14 PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001342:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001346:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_4|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8|GPIO_PIN_12
                          |GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001348:	2303      	movs	r3, #3
 800134a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134c:	2300      	movs	r3, #0
 800134e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001350:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001354:	4619      	mov	r1, r3
 8001356:	4826      	ldr	r0, [pc, #152]	@ (80013f0 <MX_GPIO_Init+0x2d8>)
 8001358:	f004 fb0c 	bl	8005974 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH15 PH13 PH14 PH4
                           PH5 PH3 PH2 PH12
                           PH7 PH9 PH11 PH6
                           PH8 PH10 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_4
 800135c:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8001360:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_12
                          |GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_6
                          |GPIO_PIN_8|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001362:	2303      	movs	r3, #3
 8001364:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001366:	2300      	movs	r3, #0
 8001368:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800136a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800136e:	4619      	mov	r1, r3
 8001370:	4820      	ldr	r0, [pc, #128]	@ (80013f4 <MX_GPIO_Init+0x2dc>)
 8001372:	f004 faff 	bl	8005974 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 8001376:	2302      	movs	r3, #2
 8001378:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800137a:	2301      	movs	r3, #1
 800137c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137e:	2300      	movs	r3, #0
 8001380:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001382:	2300      	movs	r3, #0
 8001384:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 8001386:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800138a:	4619      	mov	r1, r3
 800138c:	480f      	ldr	r0, [pc, #60]	@ (80013cc <MX_GPIO_Init+0x2b4>)
 800138e:	f004 faf1 	bl	8005974 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 8001392:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001396:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001398:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800139c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 80013a2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80013a6:	4619      	mov	r1, r3
 80013a8:	4808      	ldr	r0, [pc, #32]	@ (80013cc <MX_GPIO_Init+0x2b4>)
 80013aa:	f004 fae3 	bl	8005974 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80013ae:	2200      	movs	r2, #0
 80013b0:	2100      	movs	r1, #0
 80013b2:	2028      	movs	r0, #40	@ 0x28
 80013b4:	f003 fd41 	bl	8004e3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80013b8:	2028      	movs	r0, #40	@ 0x28
 80013ba:	f003 fd5a 	bl	8004e72 <HAL_NVIC_EnableIRQ>

}
 80013be:	bf00      	nop
 80013c0:	3740      	adds	r7, #64	@ 0x40
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	40023800 	.word	0x40023800
 80013cc:	40022000 	.word	0x40022000
 80013d0:	40021000 	.word	0x40021000
 80013d4:	40021800 	.word	0x40021800
 80013d8:	40020400 	.word	0x40020400
 80013dc:	40020c00 	.word	0x40020c00
 80013e0:	40020000 	.word	0x40020000
 80013e4:	40022400 	.word	0x40022400
 80013e8:	40020800 	.word	0x40020800
 80013ec:	40022800 	.word	0x40022800
 80013f0:	40021400 	.word	0x40021400
 80013f4:	40021c00 	.word	0x40021c00

080013f8 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80013fc:	f3bf 8f4f 	dsb	sy
}
 8001400:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001402:	f3bf 8f6f 	isb	sy
}
 8001406:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001408:	4b0d      	ldr	r3, [pc, #52]	@ (8001440 <SCB_EnableICache+0x48>)
 800140a:	2200      	movs	r2, #0
 800140c:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001410:	f3bf 8f4f 	dsb	sy
}
 8001414:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001416:	f3bf 8f6f 	isb	sy
}
 800141a:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800141c:	4b08      	ldr	r3, [pc, #32]	@ (8001440 <SCB_EnableICache+0x48>)
 800141e:	695b      	ldr	r3, [r3, #20]
 8001420:	4a07      	ldr	r2, [pc, #28]	@ (8001440 <SCB_EnableICache+0x48>)
 8001422:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001426:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001428:	f3bf 8f4f 	dsb	sy
}
 800142c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800142e:	f3bf 8f6f 	isb	sy
}
 8001432:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8001434:	bf00      	nop
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	e000ed00 	.word	0xe000ed00

08001444 <SCB_DisableICache>:
/**
  \brief   Disable I-Cache
  \details Turns off I-Cache
  */
__STATIC_INLINE void SCB_DisableICache (void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8001448:	f3bf 8f4f 	dsb	sy
}
 800144c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800144e:	f3bf 8f6f 	isb	sy
}
 8001452:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001454:	4b0a      	ldr	r3, [pc, #40]	@ (8001480 <SCB_DisableICache+0x3c>)
 8001456:	695b      	ldr	r3, [r3, #20]
 8001458:	4a09      	ldr	r2, [pc, #36]	@ (8001480 <SCB_DisableICache+0x3c>)
 800145a:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800145e:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001460:	4b07      	ldr	r3, [pc, #28]	@ (8001480 <SCB_DisableICache+0x3c>)
 8001462:	2200      	movs	r2, #0
 8001464:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001468:	f3bf 8f4f 	dsb	sy
}
 800146c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800146e:	f3bf 8f6f 	isb	sy
}
 8001472:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8001474:	bf00      	nop
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	e000ed00 	.word	0xe000ed00

08001484 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8001484:	b480      	push	{r7}
 8001486:	b085      	sub	sp, #20
 8001488:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800148a:	4b1f      	ldr	r3, [pc, #124]	@ (8001508 <SCB_EnableDCache+0x84>)
 800148c:	2200      	movs	r2, #0
 800148e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001492:	f3bf 8f4f 	dsb	sy
}
 8001496:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001498:	4b1b      	ldr	r3, [pc, #108]	@ (8001508 <SCB_EnableDCache+0x84>)
 800149a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800149e:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	0b5b      	lsrs	r3, r3, #13
 80014a4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80014a8:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	08db      	lsrs	r3, r3, #3
 80014ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80014b2:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	015a      	lsls	r2, r3, #5
 80014b8:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 80014bc:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80014be:	68ba      	ldr	r2, [r7, #8]
 80014c0:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80014c2:	4911      	ldr	r1, [pc, #68]	@ (8001508 <SCB_EnableDCache+0x84>)
 80014c4:	4313      	orrs	r3, r2
 80014c6:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	1e5a      	subs	r2, r3, #1
 80014ce:	60ba      	str	r2, [r7, #8]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d1ef      	bne.n	80014b4 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	1e5a      	subs	r2, r3, #1
 80014d8:	60fa      	str	r2, [r7, #12]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d1e5      	bne.n	80014aa <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80014de:	f3bf 8f4f 	dsb	sy
}
 80014e2:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80014e4:	4b08      	ldr	r3, [pc, #32]	@ (8001508 <SCB_EnableDCache+0x84>)
 80014e6:	695b      	ldr	r3, [r3, #20]
 80014e8:	4a07      	ldr	r2, [pc, #28]	@ (8001508 <SCB_EnableDCache+0x84>)
 80014ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014ee:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80014f0:	f3bf 8f4f 	dsb	sy
}
 80014f4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80014f6:	f3bf 8f6f 	isb	sy
}
 80014fa:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80014fc:	bf00      	nop
 80014fe:	3714      	adds	r7, #20
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr
 8001508:	e000ed00 	.word	0xe000ed00

0800150c <SCB_DisableDCache>:
/**
  \brief   Disable D-Cache
  \details Turns off D-Cache
  */
__STATIC_INLINE void SCB_DisableDCache (void)
{
 800150c:	b480      	push	{r7}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001512:	4b1f      	ldr	r3, [pc, #124]	@ (8001590 <SCB_DisableDCache+0x84>)
 8001514:	2200      	movs	r2, #0
 8001516:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800151a:	f3bf 8f4f 	dsb	sy
}
 800151e:	bf00      	nop
    __DSB();

    SCB->CCR &= ~(uint32_t)SCB_CCR_DC_Msk;  /* disable D-Cache */
 8001520:	4b1b      	ldr	r3, [pc, #108]	@ (8001590 <SCB_DisableDCache+0x84>)
 8001522:	695b      	ldr	r3, [r3, #20]
 8001524:	4a1a      	ldr	r2, [pc, #104]	@ (8001590 <SCB_DisableDCache+0x84>)
 8001526:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800152a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800152c:	f3bf 8f4f 	dsb	sy
}
 8001530:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001532:	4b17      	ldr	r3, [pc, #92]	@ (8001590 <SCB_DisableDCache+0x84>)
 8001534:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001538:	607b      	str	r3, [r7, #4]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	0b5b      	lsrs	r3, r3, #13
 800153e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001542:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	08db      	lsrs	r3, r3, #3
 8001548:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800154c:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	015a      	lsls	r2, r3, #5
 8001552:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8001556:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8001558:	68ba      	ldr	r2, [r7, #8]
 800155a:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800155c:	490c      	ldr	r1, [pc, #48]	@ (8001590 <SCB_DisableDCache+0x84>)
 800155e:	4313      	orrs	r3, r2
 8001560:	f8c1 3274 	str.w	r3, [r1, #628]	@ 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	1e5a      	subs	r2, r3, #1
 8001568:	60ba      	str	r2, [r7, #8]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d1ef      	bne.n	800154e <SCB_DisableDCache+0x42>
    } while(sets-- != 0U);
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	1e5a      	subs	r2, r3, #1
 8001572:	60fa      	str	r2, [r7, #12]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d1e5      	bne.n	8001544 <SCB_DisableDCache+0x38>
  __ASM volatile ("dsb 0xF":::"memory");
 8001578:	f3bf 8f4f 	dsb	sy
}
 800157c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800157e:	f3bf 8f6f 	isb	sy
}
 8001582:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8001584:	bf00      	nop
 8001586:	3714      	adds	r7, #20
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	e000ed00 	.word	0xe000ed00

08001594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001594:	b5b0      	push	{r4, r5, r7, lr}
 8001596:	f5ad 6d8e 	sub.w	sp, sp, #1136	@ 0x470
 800159a:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* Enable the CPU Cache */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 800159c:	f7ff ff2c 	bl	80013f8 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80015a0:	f7ff ff70 	bl	8001484 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015a4:	f003 faec 	bl	8004b80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015a8:	f000 fb7c 	bl	8001ca4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015ac:	f7ff fdb4 	bl	8001118 <MX_GPIO_Init>
  MX_DMA_Init();
 80015b0:	f7ff fd84 	bl	80010bc <MX_DMA_Init>
  MX_SAI1_Init();
 80015b4:	f000 fdb8 	bl	8002128 <MX_SAI1_Init>
  MX_USART1_UART_Init();
 80015b8:	f001 f970 	bl	800289c <MX_USART1_UART_Init>
  MX_FATFS_Init();
 80015bc:	f00a f858 	bl	800b670 <MX_FATFS_Init>
  MX_SDMMC1_SD_Init();
 80015c0:	f000 fed6 	bl	8002370 <MX_SDMMC1_SD_Init>
  MX_CRC_Init();
 80015c4:	f7ff fd38 	bl	8001038 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

  /* We format the SD card */
  printf("SD card init...\r\n");
 80015c8:	48ab      	ldr	r0, [pc, #684]	@ (8001878 <main+0x2e4>)
 80015ca:	f013 f947 	bl	801485c <puts>
  SDCard_InitAndFormat();
 80015ce:	f000 fc17 	bl	8001e00 <SDCard_InitAndFormat>

  AI_Init();
 80015d2:	f000 fcff 	bl	8001fd4 <AI_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  	uint32_t write_index = 0;
 80015d6:	2300      	movs	r3, #0
 80015d8:	f8c7 3434 	str.w	r3, [r7, #1076]	@ 0x434
    while (1)
    {
        check_button_release();
 80015dc:	f000 fbfc 	bl	8001dd8 <check_button_release>
        printf("Waiting for input to record...\r\n");
 80015e0:	48a6      	ldr	r0, [pc, #664]	@ (800187c <main+0x2e8>)
 80015e2:	f013 f93b 	bl	801485c <puts>
        HAL_Delay(1000);
 80015e6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80015ea:	f003 fb27 	bl	8004c3c <HAL_Delay>

        SCB_DisableDCache();
 80015ee:	f7ff ff8d 	bl	800150c <SCB_DisableDCache>
        SCB_DisableICache();
 80015f2:	f7ff ff27 	bl	8001444 <SCB_DisableICache>

        if (button_pressed == 1)
 80015f6:	4ba2      	ldr	r3, [pc, #648]	@ (8001880 <main+0x2ec>)
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	f040 8342 	bne.w	8001c86 <main+0x6f2>
        {
            /* Toggle the green led to visually show action */
            HAL_GPIO_TogglePin(USR_LED_GPIO_Port, USR_LED_Pin);
 8001602:	2102      	movs	r1, #2
 8001604:	489f      	ldr	r0, [pc, #636]	@ (8001884 <main+0x2f0>)
 8001606:	f004 fc9e 	bl	8005f46 <HAL_GPIO_TogglePin>
            HAL_Delay(100);
 800160a:	2064      	movs	r0, #100	@ 0x64
 800160c:	f003 fb16 	bl	8004c3c <HAL_Delay>
            HAL_GPIO_TogglePin(USR_LED_GPIO_Port, USR_LED_Pin);
 8001610:	2102      	movs	r1, #2
 8001612:	489c      	ldr	r0, [pc, #624]	@ (8001884 <main+0x2f0>)
 8001614:	f004 fc97 	bl	8005f46 <HAL_GPIO_TogglePin>
            HAL_Delay(100);
 8001618:	2064      	movs	r0, #100	@ 0x64
 800161a:	f003 fb0f 	bl	8004c3c <HAL_Delay>

            /* If the program is not already recording... */
            if (AudioState == AUDIO_STATE_IDLE)
 800161e:	4b9a      	ldr	r3, [pc, #616]	@ (8001888 <main+0x2f4>)
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d108      	bne.n	8001638 <main+0xa4>
            {
                /* Configure the audio recorder: sampling frequency, bits-depth, number of channels */
                AUDIO_REC_Start();
 8001626:	f009 fcb7 	bl	800af98 <AUDIO_REC_Start>
            }

            /* While recording, we loop the recording process */
            while (AudioState == AUDIO_STATE_RECORD)
 800162a:	e005      	b.n	8001638 <main+0xa4>
            {
                status = AUDIO_REC_Process();
 800162c:	f009 fd3a 	bl	800b0a4 <AUDIO_REC_Process>
 8001630:	4603      	mov	r3, r0
 8001632:	461a      	mov	r2, r3
 8001634:	4b95      	ldr	r3, [pc, #596]	@ (800188c <main+0x2f8>)
 8001636:	701a      	strb	r2, [r3, #0]
            while (AudioState == AUDIO_STATE_RECORD)
 8001638:	4b93      	ldr	r3, [pc, #588]	@ (8001888 <main+0x2f4>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	2b05      	cmp	r3, #5
 800163e:	d0f5      	beq.n	800162c <main+0x98>
            }

            /* Once we stop recording, we correctly close the .WAV */
            if (AudioState == AUDIO_STATE_STOP)
 8001640:	4b91      	ldr	r3, [pc, #580]	@ (8001888 <main+0x2f4>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	2b0a      	cmp	r3, #10
 8001646:	d108      	bne.n	800165a <main+0xc6>
            {
                status = AUDIO_REC_Process();
 8001648:	f009 fd2c 	bl	800b0a4 <AUDIO_REC_Process>
 800164c:	4603      	mov	r3, r0
 800164e:	461a      	mov	r2, r3
 8001650:	4b8e      	ldr	r3, [pc, #568]	@ (800188c <main+0x2f8>)
 8001652:	701a      	strb	r2, [r3, #0]
                printf("Recording stopped.\r\n");
 8001654:	488e      	ldr	r0, [pc, #568]	@ (8001890 <main+0x2fc>)
 8001656:	f013 f901 	bl	801485c <puts>
            //ReadWAVFileInfo("WAVE.wav");

            /* Audio processing step*/

            // We read the contents of the file, save the info in the "audio_buffer" variable
            read_wav_file("WAVE.wav", waveform);
 800165a:	498e      	ldr	r1, [pc, #568]	@ (8001894 <main+0x300>)
 800165c:	488e      	ldr	r0, [pc, #568]	@ (8001898 <main+0x304>)
 800165e:	f000 fc1f 	bl	8001ea0 <read_wav_file>

            printf("Shape of audio_buffer: (%u,)\r\n", sizeof(waveform) / sizeof(waveform[0]));
 8001662:	f44f 517a 	mov.w	r1, #16000	@ 0x3e80
 8001666:	488d      	ldr	r0, [pc, #564]	@ (800189c <main+0x308>)
 8001668:	f013 f890 	bl	801478c <iprintf>

            // We create a fast fft instance (lookup)
        	if (arm_rfft_fast_init_f32(&fft, FFT_SIZE) != ARM_MATH_SUCCESS) {
 800166c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001670:	488b      	ldr	r0, [pc, #556]	@ (80018a0 <main+0x30c>)
 8001672:	f00d fdd3 	bl	800f21c <arm_rfft_fast_init_f32>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d002      	beq.n	8001682 <main+0xee>
        		printf("Failed to init RFFT");
 800167c:	4889      	ldr	r0, [pc, #548]	@ (80018a4 <main+0x310>)
 800167e:	f013 f885 	bl	801478c <iprintf>
        	}

        	// We create a hanning window, of size 256
            static float32_t hanning[FFT_SIZE];
        	arm_hanning_f32(hanning, FFT_SIZE);
 8001682:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001686:	4888      	ldr	r0, [pc, #544]	@ (80018a8 <main+0x314>)
 8001688:	f000 fc5e 	bl	8001f48 <arm_hanning_f32>

        	printf("Normalizing audio\r\n");
 800168c:	4887      	ldr	r0, [pc, #540]	@ (80018ac <main+0x318>)
 800168e:	f013 f8e5 	bl	801485c <puts>
        	// Normalisation de l'audio
        	float min = 32767.0f;  // Set min to the maximum positive value for 16-bit signed integer
 8001692:	4b87      	ldr	r3, [pc, #540]	@ (80018b0 <main+0x31c>)
 8001694:	f207 4264 	addw	r2, r7, #1124	@ 0x464
 8001698:	6013      	str	r3, [r2, #0]
        	float max = -32768.0f; // Set max to the minimum negative value for 16-bit signed integer
 800169a:	f04f 4347 	mov.w	r3, #3338665984	@ 0xc7000000
 800169e:	f507 628c 	add.w	r2, r7, #1120	@ 0x460
 80016a2:	6013      	str	r3, [r2, #0]


        	for (uint32_t i = 0; i < sizeof(waveform) / sizeof(waveform[0]); i++) {
 80016a4:	2300      	movs	r3, #0
 80016a6:	f8c7 345c 	str.w	r3, [r7, #1116]	@ 0x45c
 80016aa:	e03d      	b.n	8001728 <main+0x194>
        	    int16_t val = waveform[i];  // Directly access the int16_t sample
 80016ac:	4a79      	ldr	r2, [pc, #484]	@ (8001894 <main+0x300>)
 80016ae:	f8d7 345c 	ldr.w	r3, [r7, #1116]	@ 0x45c
 80016b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016b6:	f8a7 341a 	strh.w	r3, [r7, #1050]	@ 0x41a
        	    if ((float)val < min) min = (float)val;  // Compare values and update min
 80016ba:	f9b7 341a 	ldrsh.w	r3, [r7, #1050]	@ 0x41a
 80016be:	ee07 3a90 	vmov	s15, r3
 80016c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016c6:	f207 4364 	addw	r3, r7, #1124	@ 0x464
 80016ca:	ed93 7a00 	vldr	s14, [r3]
 80016ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016d6:	dd09      	ble.n	80016ec <main+0x158>
 80016d8:	f9b7 341a 	ldrsh.w	r3, [r7, #1050]	@ 0x41a
 80016dc:	ee07 3a90 	vmov	s15, r3
 80016e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016e4:	f207 4364 	addw	r3, r7, #1124	@ 0x464
 80016e8:	edc3 7a00 	vstr	s15, [r3]
        	    if ((float)val > max) max = (float)val;  // Compare values and update max
 80016ec:	f9b7 341a 	ldrsh.w	r3, [r7, #1050]	@ 0x41a
 80016f0:	ee07 3a90 	vmov	s15, r3
 80016f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016f8:	f507 638c 	add.w	r3, r7, #1120	@ 0x460
 80016fc:	ed93 7a00 	vldr	s14, [r3]
 8001700:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001708:	d509      	bpl.n	800171e <main+0x18a>
 800170a:	f9b7 341a 	ldrsh.w	r3, [r7, #1050]	@ 0x41a
 800170e:	ee07 3a90 	vmov	s15, r3
 8001712:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001716:	f507 638c 	add.w	r3, r7, #1120	@ 0x460
 800171a:	edc3 7a00 	vstr	s15, [r3]
        	for (uint32_t i = 0; i < sizeof(waveform) / sizeof(waveform[0]); i++) {
 800171e:	f8d7 345c 	ldr.w	r3, [r7, #1116]	@ 0x45c
 8001722:	3301      	adds	r3, #1
 8001724:	f8c7 345c 	str.w	r3, [r7, #1116]	@ 0x45c
 8001728:	f8d7 345c 	ldr.w	r3, [r7, #1116]	@ 0x45c
 800172c:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8001730:	d3bc      	bcc.n	80016ac <main+0x118>
        	}
        	printf("Normalizing audio OK\r\n");
 8001732:	4860      	ldr	r0, [pc, #384]	@ (80018b4 <main+0x320>)
 8001734:	f013 f892 	bl	801485c <puts>

        	printf("Min value: %.2f, Max value: %.2f\r\n", min, max);
 8001738:	f207 4364 	addw	r3, r7, #1124	@ 0x464
 800173c:	6818      	ldr	r0, [r3, #0]
 800173e:	f7fe ff83 	bl	8000648 <__aeabi_f2d>
 8001742:	4604      	mov	r4, r0
 8001744:	460d      	mov	r5, r1
 8001746:	f507 638c 	add.w	r3, r7, #1120	@ 0x460
 800174a:	6818      	ldr	r0, [r3, #0]
 800174c:	f7fe ff7c 	bl	8000648 <__aeabi_f2d>
 8001750:	4602      	mov	r2, r0
 8001752:	460b      	mov	r3, r1
 8001754:	e9cd 2300 	strd	r2, r3, [sp]
 8001758:	4622      	mov	r2, r4
 800175a:	462b      	mov	r3, r5
 800175c:	4856      	ldr	r0, [pc, #344]	@ (80018b8 <main+0x324>)
 800175e:	f013 f815 	bl	801478c <iprintf>

        	printf("Conversion, bias removal and hanning application\r\n");
 8001762:	4856      	ldr	r0, [pc, #344]	@ (80018bc <main+0x328>)
 8001764:	f013 f87a 	bl	801485c <puts>
        	// Conversion waveform to float (-1 to 1), Remove DC bias (mean subtraction), applies Hanning window
        	for (uint32_t idx = 0; idx < 124; idx++) {
 8001768:	2300      	movs	r3, #0
 800176a:	f8c7 3458 	str.w	r3, [r7, #1112]	@ 0x458
 800176e:	e184      	b.n	8001a7a <main+0x4e6>
        	    float dst[FFT_SIZE];
        	    static float mag[FFT_SIZE + 1];
        	    double sum = 0;
 8001770:	f04f 0200 	mov.w	r2, #0
 8001774:	f04f 0300 	mov.w	r3, #0
 8001778:	f507 618a 	add.w	r1, r7, #1104	@ 0x450
 800177c:	e9c1 2300 	strd	r2, r3, [r1]
        	    static float* signal_chunk = mag;

        	    for (uint32_t i = 0; i < FFT_SIZE; i++) {
 8001780:	2300      	movs	r3, #0
 8001782:	f8c7 344c 	str.w	r3, [r7, #1100]	@ 0x44c
 8001786:	e05b      	b.n	8001840 <main+0x2ac>
        	        signal_chunk[i] = (float)((uint16_t)waveform[idx * frame_step + i]);
 8001788:	2280      	movs	r2, #128	@ 0x80
 800178a:	f8d7 3458 	ldr.w	r3, [r7, #1112]	@ 0x458
 800178e:	fb03 f202 	mul.w	r2, r3, r2
 8001792:	f8d7 344c 	ldr.w	r3, [r7, #1100]	@ 0x44c
 8001796:	4413      	add	r3, r2
 8001798:	4a3e      	ldr	r2, [pc, #248]	@ (8001894 <main+0x300>)
 800179a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800179e:	4b48      	ldr	r3, [pc, #288]	@ (80018c0 <main+0x32c>)
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	f8d7 344c 	ldr.w	r3, [r7, #1100]	@ 0x44c
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	4413      	add	r3, r2
 80017aa:	ee07 1a90 	vmov	s15, r1
 80017ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017b2:	edc3 7a00 	vstr	s15, [r3]
        	        // Normalize from -1 to 1
        	        signal_chunk[i] = (2.0f * (signal_chunk[i] - min) / (max - min)) - 1;
 80017b6:	4b42      	ldr	r3, [pc, #264]	@ (80018c0 <main+0x32c>)
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	f8d7 344c 	ldr.w	r3, [r7, #1100]	@ 0x44c
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	4413      	add	r3, r2
 80017c2:	ed93 7a00 	vldr	s14, [r3]
 80017c6:	f207 4364 	addw	r3, r7, #1124	@ 0x464
 80017ca:	edd3 7a00 	vldr	s15, [r3]
 80017ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017d2:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80017d6:	f507 638c 	add.w	r3, r7, #1120	@ 0x460
 80017da:	ed93 7a00 	vldr	s14, [r3]
 80017de:	f207 4364 	addw	r3, r7, #1124	@ 0x464
 80017e2:	edd3 7a00 	vldr	s15, [r3]
 80017e6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80017ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017ee:	4b34      	ldr	r3, [pc, #208]	@ (80018c0 <main+0x32c>)
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	f8d7 344c 	ldr.w	r3, [r7, #1100]	@ 0x44c
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	4413      	add	r3, r2
 80017fa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80017fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001802:	edc3 7a00 	vstr	s15, [r3]
        	        sum += signal_chunk[i];
 8001806:	4b2e      	ldr	r3, [pc, #184]	@ (80018c0 <main+0x32c>)
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	f8d7 344c 	ldr.w	r3, [r7, #1100]	@ 0x44c
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	4413      	add	r3, r2
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4618      	mov	r0, r3
 8001816:	f7fe ff17 	bl	8000648 <__aeabi_f2d>
 800181a:	4602      	mov	r2, r0
 800181c:	460b      	mov	r3, r1
 800181e:	f507 618a 	add.w	r1, r7, #1104	@ 0x450
 8001822:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001826:	f7fe fdb1 	bl	800038c <__adddf3>
 800182a:	4602      	mov	r2, r0
 800182c:	460b      	mov	r3, r1
 800182e:	f507 618a 	add.w	r1, r7, #1104	@ 0x450
 8001832:	e9c1 2300 	strd	r2, r3, [r1]
        	    for (uint32_t i = 0; i < FFT_SIZE; i++) {
 8001836:	f8d7 344c 	ldr.w	r3, [r7, #1100]	@ 0x44c
 800183a:	3301      	adds	r3, #1
 800183c:	f8c7 344c 	str.w	r3, [r7, #1100]	@ 0x44c
 8001840:	f8d7 344c 	ldr.w	r3, [r7, #1100]	@ 0x44c
 8001844:	2bff      	cmp	r3, #255	@ 0xff
 8001846:	d99f      	bls.n	8001788 <main+0x1f4>
        	    }

    			// Remove DC component
    			float mean = (float)(sum / (double)FFT_SIZE);
 8001848:	f04f 0200 	mov.w	r2, #0
 800184c:	4b1d      	ldr	r3, [pc, #116]	@ (80018c4 <main+0x330>)
 800184e:	f507 618a 	add.w	r1, r7, #1104	@ 0x450
 8001852:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001856:	f7ff f879 	bl	800094c <__aeabi_ddiv>
 800185a:	4602      	mov	r2, r0
 800185c:	460b      	mov	r3, r1
 800185e:	4610      	mov	r0, r2
 8001860:	4619      	mov	r1, r3
 8001862:	f7ff fa21 	bl	8000ca8 <__aeabi_d2f>
 8001866:	4603      	mov	r3, r0
 8001868:	f207 4224 	addw	r2, r7, #1060	@ 0x424
 800186c:	6013      	str	r3, [r2, #0]
    			for (uint32_t i = 0; i < FFT_SIZE; i++) {
 800186e:	2300      	movs	r3, #0
 8001870:	f8c7 3448 	str.w	r3, [r7, #1096]	@ 0x448
 8001874:	e05c      	b.n	8001930 <main+0x39c>
 8001876:	bf00      	nop
 8001878:	08017408 	.word	0x08017408
 800187c:	0801741c 	.word	0x0801741c
 8001880:	20028cb8 	.word	0x20028cb8
 8001884:	40022000 	.word	0x40022000
 8001888:	20000a24 	.word	0x20000a24
 800188c:	20000a25 	.word	0x20000a25
 8001890:	0801743c 	.word	0x0801743c
 8001894:	20020ea4 	.word	0x20020ea4
 8001898:	08017450 	.word	0x08017450
 800189c:	0801745c 	.word	0x0801745c
 80018a0:	20028ca0 	.word	0x20028ca0
 80018a4:	0801747c 	.word	0x0801747c
 80018a8:	20028cbc 	.word	0x20028cbc
 80018ac:	08017490 	.word	0x08017490
 80018b0:	46fffe00 	.word	0x46fffe00
 80018b4:	080174a4 	.word	0x080174a4
 80018b8:	080174bc 	.word	0x080174bc
 80018bc:	080174e0 	.word	0x080174e0
 80018c0:	20000018 	.word	0x20000018
 80018c4:	40700000 	.word	0x40700000
    				signal_chunk[i] = signal_chunk[i] - mean;
 80018c8:	4bbf      	ldr	r3, [pc, #764]	@ (8001bc8 <main+0x634>)
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	f8d7 3448 	ldr.w	r3, [r7, #1096]	@ 0x448
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	4413      	add	r3, r2
 80018d4:	ed93 7a00 	vldr	s14, [r3]
 80018d8:	4bbb      	ldr	r3, [pc, #748]	@ (8001bc8 <main+0x634>)
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	f8d7 3448 	ldr.w	r3, [r7, #1096]	@ 0x448
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	4413      	add	r3, r2
 80018e4:	f207 4224 	addw	r2, r7, #1060	@ 0x424
 80018e8:	edd2 7a00 	vldr	s15, [r2]
 80018ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018f0:	edc3 7a00 	vstr	s15, [r3]

    				// Apply window function
    				signal_chunk[i] *= hanning[i];
 80018f4:	4bb4      	ldr	r3, [pc, #720]	@ (8001bc8 <main+0x634>)
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	f8d7 3448 	ldr.w	r3, [r7, #1096]	@ 0x448
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	4413      	add	r3, r2
 8001900:	ed93 7a00 	vldr	s14, [r3]
 8001904:	4ab1      	ldr	r2, [pc, #708]	@ (8001bcc <main+0x638>)
 8001906:	f8d7 3448 	ldr.w	r3, [r7, #1096]	@ 0x448
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	4413      	add	r3, r2
 800190e:	edd3 7a00 	vldr	s15, [r3]
 8001912:	4bad      	ldr	r3, [pc, #692]	@ (8001bc8 <main+0x634>)
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	f8d7 3448 	ldr.w	r3, [r7, #1096]	@ 0x448
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	4413      	add	r3, r2
 800191e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001922:	edc3 7a00 	vstr	s15, [r3]
    			for (uint32_t i = 0; i < FFT_SIZE; i++) {
 8001926:	f8d7 3448 	ldr.w	r3, [r7, #1096]	@ 0x448
 800192a:	3301      	adds	r3, #1
 800192c:	f8c7 3448 	str.w	r3, [r7, #1096]	@ 0x448
 8001930:	f8d7 3448 	ldr.w	r3, [r7, #1096]	@ 0x448
 8001934:	2bff      	cmp	r3, #255	@ 0xff
 8001936:	d9c7      	bls.n	80018c8 <main+0x334>
    			}

    			// Compute FFT
    			arm_rfft_fast_f32(&fft, signal_chunk, dst, 0);
 8001938:	4ba3      	ldr	r3, [pc, #652]	@ (8001bc8 <main+0x634>)
 800193a:	6819      	ldr	r1, [r3, #0]
 800193c:	f107 0208 	add.w	r2, r7, #8
 8001940:	2300      	movs	r3, #0
 8001942:	48a3      	ldr	r0, [pc, #652]	@ (8001bd0 <main+0x63c>)
 8001944:	f00d fd1e 	bl	800f384 <arm_rfft_fast_f32>

    			// The first "complex" is actually to reals, X[0] and X[N/2]
				float first_real = (dst[0] < 0.0f) ? (-1.0f * dst[0]) : dst[0];
 8001948:	f507 638d 	add.w	r3, r7, #1128	@ 0x468
 800194c:	f5a3 638c 	sub.w	r3, r3, #1120	@ 0x460
 8001950:	edd3 7a00 	vldr	s15, [r3]
 8001954:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800195c:	d508      	bpl.n	8001970 <main+0x3dc>
 800195e:	f507 638d 	add.w	r3, r7, #1128	@ 0x468
 8001962:	f5a3 638c 	sub.w	r3, r3, #1120	@ 0x460
 8001966:	edd3 7a00 	vldr	s15, [r3]
 800196a:	eef1 7a67 	vneg.f32	s15, s15
 800196e:	e005      	b.n	800197c <main+0x3e8>
 8001970:	f507 638d 	add.w	r3, r7, #1128	@ 0x468
 8001974:	f5a3 638c 	sub.w	r3, r3, #1120	@ 0x460
 8001978:	edd3 7a00 	vldr	s15, [r3]
 800197c:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8001980:	edc3 7a00 	vstr	s15, [r3]
				float second_real = (dst[1] < 0.0f) ? (-1.0f * dst[1]) : dst[1];
 8001984:	f507 638d 	add.w	r3, r7, #1128	@ 0x468
 8001988:	f5a3 638c 	sub.w	r3, r3, #1120	@ 0x460
 800198c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001990:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001998:	d508      	bpl.n	80019ac <main+0x418>
 800199a:	f507 638d 	add.w	r3, r7, #1128	@ 0x468
 800199e:	f5a3 638c 	sub.w	r3, r3, #1120	@ 0x460
 80019a2:	edd3 7a01 	vldr	s15, [r3, #4]
 80019a6:	eef1 7a67 	vneg.f32	s15, s15
 80019aa:	e005      	b.n	80019b8 <main+0x424>
 80019ac:	f507 638d 	add.w	r3, r7, #1128	@ 0x468
 80019b0:	f5a3 638c 	sub.w	r3, r3, #1120	@ 0x460
 80019b4:	edd3 7a01 	vldr	s15, [r3, #4]
 80019b8:	f207 431c 	addw	r3, r7, #1052	@ 0x41c
 80019bc:	edc3 7a00 	vstr	s15, [r3]

				// Take the magnitude for all the complex values in between
				arm_cmplx_mag_f32(dst + 2, mag + 1, FFT_SIZE / 2);
 80019c0:	f107 0308 	add.w	r3, r7, #8
 80019c4:	3308      	adds	r3, #8
 80019c6:	4983      	ldr	r1, [pc, #524]	@ (8001bd4 <main+0x640>)
 80019c8:	2280      	movs	r2, #128	@ 0x80
 80019ca:	4618      	mov	r0, r3
 80019cc:	f00e f93e 	bl	800fc4c <arm_cmplx_mag_f32>

				// Fill in the two real numbers at 0 and N/2
				mag[0] = first_real;
 80019d0:	4a81      	ldr	r2, [pc, #516]	@ (8001bd8 <main+0x644>)
 80019d2:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	6013      	str	r3, [r2, #0]
				mag[128] = second_real;
 80019da:	4a7f      	ldr	r2, [pc, #508]	@ (8001bd8 <main+0x644>)
 80019dc:	f207 431c 	addw	r3, r7, #1052	@ 0x41c
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

				for (uint32_t i = 0; i < 129; i++) {
 80019e6:	2300      	movs	r3, #0
 80019e8:	f8c7 3444 	str.w	r3, [r7, #1092]	@ 0x444
 80019ec:	e03c      	b.n	8001a68 <main+0x4d4>
					// We can't override waveform[129 * idx + 128] yet
					// because we need it for the next iteration, so we need to store
					// it separately
					if (i < 128) {
 80019ee:	f8d7 3444 	ldr.w	r3, [r7, #1092]	@ 0x444
 80019f2:	2b7f      	cmp	r3, #127	@ 0x7f
 80019f4:	d81c      	bhi.n	8001a30 <main+0x49c>
						((uint16_t*)waveform)[128 * idx + i] = (uint8_t)(mag[i] * 8.0f);
 80019f6:	4a78      	ldr	r2, [pc, #480]	@ (8001bd8 <main+0x644>)
 80019f8:	f8d7 3444 	ldr.w	r3, [r7, #1092]	@ 0x444
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	4413      	add	r3, r2
 8001a00:	edd3 7a00 	vldr	s15, [r3]
 8001a04:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 8001a08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a10:	edc7 7a01 	vstr	s15, [r7, #4]
 8001a14:	793b      	ldrb	r3, [r7, #4]
 8001a16:	b2d9      	uxtb	r1, r3
 8001a18:	f8d7 3458 	ldr.w	r3, [r7, #1112]	@ 0x458
 8001a1c:	01da      	lsls	r2, r3, #7
 8001a1e:	f8d7 3444 	ldr.w	r3, [r7, #1092]	@ 0x444
 8001a22:	4413      	add	r3, r2
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	4a6d      	ldr	r2, [pc, #436]	@ (8001bdc <main+0x648>)
 8001a28:	4413      	add	r3, r2
 8001a2a:	460a      	mov	r2, r1
 8001a2c:	801a      	strh	r2, [r3, #0]
 8001a2e:	e016      	b.n	8001a5e <main+0x4ca>
					}
					else {
						last_ffts[idx] = (uint8_t)(mag[i] * 8.0f);
 8001a30:	4a69      	ldr	r2, [pc, #420]	@ (8001bd8 <main+0x644>)
 8001a32:	f8d7 3444 	ldr.w	r3, [r7, #1092]	@ 0x444
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	4413      	add	r3, r2
 8001a3a:	edd3 7a00 	vldr	s15, [r3]
 8001a3e:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 8001a42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a4a:	edc7 7a01 	vstr	s15, [r7, #4]
 8001a4e:	793b      	ldrb	r3, [r7, #4]
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	4619      	mov	r1, r3
 8001a54:	4a62      	ldr	r2, [pc, #392]	@ (8001be0 <main+0x64c>)
 8001a56:	f8d7 3458 	ldr.w	r3, [r7, #1112]	@ 0x458
 8001a5a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				for (uint32_t i = 0; i < 129; i++) {
 8001a5e:	f8d7 3444 	ldr.w	r3, [r7, #1092]	@ 0x444
 8001a62:	3301      	adds	r3, #1
 8001a64:	f8c7 3444 	str.w	r3, [r7, #1092]	@ 0x444
 8001a68:	f8d7 3444 	ldr.w	r3, [r7, #1092]	@ 0x444
 8001a6c:	2b80      	cmp	r3, #128	@ 0x80
 8001a6e:	d9be      	bls.n	80019ee <main+0x45a>
        	for (uint32_t idx = 0; idx < 124; idx++) {
 8001a70:	f8d7 3458 	ldr.w	r3, [r7, #1112]	@ 0x458
 8001a74:	3301      	adds	r3, #1
 8001a76:	f8c7 3458 	str.w	r3, [r7, #1112]	@ 0x458
 8001a7a:	f8d7 3458 	ldr.w	r3, [r7, #1112]	@ 0x458
 8001a7e:	2b7b      	cmp	r3, #123	@ 0x7b
 8001a80:	f67f ae76 	bls.w	8001770 <main+0x1dc>
					}
				}
			}

			// Spectrogram formatting
			uint8_t* input_tensor = waveform;
 8001a84:	4b55      	ldr	r3, [pc, #340]	@ (8001bdc <main+0x648>)
 8001a86:	f8c7 3430 	str.w	r3, [r7, #1072]	@ 0x430
			uint32_t input_tensor_len = 124 * 129;
 8001a8a:	f643 637c 	movw	r3, #15996	@ 0x3e7c
 8001a8e:	f8c7 342c 	str.w	r3, [r7, #1068]	@ 0x42c

			for (uint32_t idx = 123; idx > 0; idx--){
 8001a92:	237b      	movs	r3, #123	@ 0x7b
 8001a94:	f8c7 3440 	str.w	r3, [r7, #1088]	@ 0x440
 8001a98:	e035      	b.n	8001b06 <main+0x572>
			    uint8_t tmp[128];
			    memcpy(tmp, waveform + (idx * 128), 128);
 8001a9a:	f8d7 3440 	ldr.w	r3, [r7, #1088]	@ 0x440
 8001a9e:	021b      	lsls	r3, r3, #8
 8001aa0:	4a4e      	ldr	r2, [pc, #312]	@ (8001bdc <main+0x648>)
 8001aa2:	441a      	add	r2, r3
 8001aa4:	f507 638d 	add.w	r3, r7, #1128	@ 0x468
 8001aa8:	f5a3 638c 	sub.w	r3, r3, #1120	@ 0x460
 8001aac:	4618      	mov	r0, r3
 8001aae:	4611      	mov	r1, r2
 8001ab0:	2380      	movs	r3, #128	@ 0x80
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	f013 f861 	bl	8014b7a <memcpy>
			    memcpy(waveform + (idx * 128 + idx), tmp, 128);
 8001ab8:	f8d7 2440 	ldr.w	r2, [r7, #1088]	@ 0x440
 8001abc:	4613      	mov	r3, r2
 8001abe:	01db      	lsls	r3, r3, #7
 8001ac0:	4413      	add	r3, r2
 8001ac2:	005b      	lsls	r3, r3, #1
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	4b45      	ldr	r3, [pc, #276]	@ (8001bdc <main+0x648>)
 8001ac8:	441a      	add	r2, r3
 8001aca:	f507 638d 	add.w	r3, r7, #1128	@ 0x468
 8001ace:	f5a3 638c 	sub.w	r3, r3, #1120	@ 0x460
 8001ad2:	4610      	mov	r0, r2
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	2380      	movs	r3, #128	@ 0x80
 8001ad8:	461a      	mov	r2, r3
 8001ada:	f013 f84e 	bl	8014b7a <memcpy>
			    waveform[idx * 128 + (idx - 1)] = last_ffts[idx - 1];
 8001ade:	f8d7 3440 	ldr.w	r3, [r7, #1088]	@ 0x440
 8001ae2:	1e59      	subs	r1, r3, #1
 8001ae4:	f8d7 2440 	ldr.w	r2, [r7, #1088]	@ 0x440
 8001ae8:	4613      	mov	r3, r2
 8001aea:	01db      	lsls	r3, r3, #7
 8001aec:	4413      	add	r3, r2
 8001aee:	3b01      	subs	r3, #1
 8001af0:	4a3b      	ldr	r2, [pc, #236]	@ (8001be0 <main+0x64c>)
 8001af2:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8001af6:	4a39      	ldr	r2, [pc, #228]	@ (8001bdc <main+0x648>)
 8001af8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for (uint32_t idx = 123; idx > 0; idx--){
 8001afc:	f8d7 3440 	ldr.w	r3, [r7, #1088]	@ 0x440
 8001b00:	3b01      	subs	r3, #1
 8001b02:	f8c7 3440 	str.w	r3, [r7, #1088]	@ 0x440
 8001b06:	f8d7 3440 	ldr.w	r3, [r7, #1088]	@ 0x440
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d1c5      	bne.n	8001a9a <main+0x506>
        	}

			res = f_open(&file, "data.txt", FA_WRITE | FA_CREATE_ALWAYS);
 8001b0e:	220a      	movs	r2, #10
 8001b10:	4934      	ldr	r1, [pc, #208]	@ (8001be4 <main+0x650>)
 8001b12:	4835      	ldr	r0, [pc, #212]	@ (8001be8 <main+0x654>)
 8001b14:	f00b fd80 	bl	800d618 <f_open>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	4b33      	ldr	r3, [pc, #204]	@ (8001bec <main+0x658>)
 8001b1e:	701a      	strb	r2, [r3, #0]
			    if (res == FR_OK) {
 8001b20:	4b32      	ldr	r3, [pc, #200]	@ (8001bec <main+0x658>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d144      	bne.n	8001bb2 <main+0x61e>
			        // Write the opening bracket
			        f_write(&file, "[", 1, &bw);
 8001b28:	4b31      	ldr	r3, [pc, #196]	@ (8001bf0 <main+0x65c>)
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	4931      	ldr	r1, [pc, #196]	@ (8001bf4 <main+0x660>)
 8001b2e:	482e      	ldr	r0, [pc, #184]	@ (8001be8 <main+0x654>)
 8001b30:	f00c f86b 	bl	800dc0a <f_write>

			        // Write the data
			        char buffer[16];  // Buffer to store formatted numbers
			        for (uint32_t i = 0; i < input_tensor_len; i++) {
 8001b34:	2300      	movs	r3, #0
 8001b36:	f8c7 343c 	str.w	r3, [r7, #1084]	@ 0x43c
 8001b3a:	e02a      	b.n	8001b92 <main+0x5fe>
			            sprintf(buffer, "%u", input_tensor[i]);  // Convert number to string
 8001b3c:	f8d7 2430 	ldr.w	r2, [r7, #1072]	@ 0x430
 8001b40:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 8001b44:	4413      	add	r3, r2
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	461a      	mov	r2, r3
 8001b4a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8001b4e:	492a      	ldr	r1, [pc, #168]	@ (8001bf8 <main+0x664>)
 8001b50:	4618      	mov	r0, r3
 8001b52:	f012 fe8b 	bl	801486c <siprintf>
			            f_write(&file, buffer, strlen(buffer), &bw);
 8001b56:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7fe fc08 	bl	8000370 <strlen>
 8001b60:	4602      	mov	r2, r0
 8001b62:	f507 6181 	add.w	r1, r7, #1032	@ 0x408
 8001b66:	4b22      	ldr	r3, [pc, #136]	@ (8001bf0 <main+0x65c>)
 8001b68:	481f      	ldr	r0, [pc, #124]	@ (8001be8 <main+0x654>)
 8001b6a:	f00c f84e 	bl	800dc0a <f_write>
			            if (i < input_tensor_len - 1) {
 8001b6e:	f8d7 342c 	ldr.w	r3, [r7, #1068]	@ 0x42c
 8001b72:	3b01      	subs	r3, #1
 8001b74:	f8d7 243c 	ldr.w	r2, [r7, #1084]	@ 0x43c
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d205      	bcs.n	8001b88 <main+0x5f4>
			                f_write(&file, ", ", 2, &bw);
 8001b7c:	4b1c      	ldr	r3, [pc, #112]	@ (8001bf0 <main+0x65c>)
 8001b7e:	2202      	movs	r2, #2
 8001b80:	491e      	ldr	r1, [pc, #120]	@ (8001bfc <main+0x668>)
 8001b82:	4819      	ldr	r0, [pc, #100]	@ (8001be8 <main+0x654>)
 8001b84:	f00c f841 	bl	800dc0a <f_write>
			        for (uint32_t i = 0; i < input_tensor_len; i++) {
 8001b88:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	f8c7 343c 	str.w	r3, [r7, #1084]	@ 0x43c
 8001b92:	f8d7 243c 	ldr.w	r2, [r7, #1084]	@ 0x43c
 8001b96:	f8d7 342c 	ldr.w	r3, [r7, #1068]	@ 0x42c
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d3ce      	bcc.n	8001b3c <main+0x5a8>
			            }
			        }

			        // Write the closing bracket and newline
			        f_write(&file, "]\n", 2, &bw);
 8001b9e:	4b14      	ldr	r3, [pc, #80]	@ (8001bf0 <main+0x65c>)
 8001ba0:	2202      	movs	r2, #2
 8001ba2:	4917      	ldr	r1, [pc, #92]	@ (8001c00 <main+0x66c>)
 8001ba4:	4810      	ldr	r0, [pc, #64]	@ (8001be8 <main+0x654>)
 8001ba6:	f00c f830 	bl	800dc0a <f_write>

			        // Close the file
			        f_close(&file);
 8001baa:	480f      	ldr	r0, [pc, #60]	@ (8001be8 <main+0x654>)
 8001bac:	f00c fa20 	bl	800dff0 <f_close>
 8001bb0:	e002      	b.n	8001bb8 <main+0x624>
			    } else {
			        printf("Failed to open file!\r\n");
 8001bb2:	4814      	ldr	r0, [pc, #80]	@ (8001c04 <main+0x670>)
 8001bb4:	f012 fe52 	bl	801485c <puts>
			    }

			printf("Conversion, bias removal and hanning application OK\r\n");
 8001bb8:	4813      	ldr	r0, [pc, #76]	@ (8001c08 <main+0x674>)
 8001bba:	f012 fe4f 	bl	801485c <puts>

			for (uint32_t i = 0; i < AI_NETWORK_IN_1_SIZE; i++) {
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	f8c7 3438 	str.w	r3, [r7, #1080]	@ 0x438
 8001bc4:	e038      	b.n	8001c38 <main+0x6a4>
 8001bc6:	bf00      	nop
 8001bc8:	20000018 	.word	0x20000018
 8001bcc:	20028cbc 	.word	0x20028cbc
 8001bd0:	20028ca0 	.word	0x20028ca0
 8001bd4:	200290c0 	.word	0x200290c0
 8001bd8:	200290bc 	.word	0x200290bc
 8001bdc:	20020ea4 	.word	0x20020ea4
 8001be0:	20028ba4 	.word	0x20028ba4
 8001be4:	08017514 	.word	0x08017514
 8001be8:	20000c30 	.word	0x20000c30
 8001bec:	20000c28 	.word	0x20000c28
 8001bf0:	20000c2c 	.word	0x20000c2c
 8001bf4:	08017520 	.word	0x08017520
 8001bf8:	08017524 	.word	0x08017524
 8001bfc:	08017528 	.word	0x08017528
 8001c00:	0801752c 	.word	0x0801752c
 8001c04:	08017530 	.word	0x08017530
 8001c08:	08017548 	.word	0x08017548
			    aiInData[i] = input_tensor[i];  // Use MFCC or spectrogram values
 8001c0c:	f8d7 2430 	ldr.w	r2, [r7, #1072]	@ 0x430
 8001c10:	f8d7 3438 	ldr.w	r3, [r7, #1080]	@ 0x438
 8001c14:	4413      	add	r3, r2
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	ee07 3a90 	vmov	s15, r3
 8001c1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c20:	4a1b      	ldr	r2, [pc, #108]	@ (8001c90 <main+0x6fc>)
 8001c22:	f8d7 3438 	ldr.w	r3, [r7, #1080]	@ 0x438
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	4413      	add	r3, r2
 8001c2a:	edc3 7a00 	vstr	s15, [r3]
			for (uint32_t i = 0; i < AI_NETWORK_IN_1_SIZE; i++) {
 8001c2e:	f8d7 3438 	ldr.w	r3, [r7, #1080]	@ 0x438
 8001c32:	3301      	adds	r3, #1
 8001c34:	f8c7 3438 	str.w	r3, [r7, #1080]	@ 0x438
 8001c38:	f8d7 3438 	ldr.w	r3, [r7, #1080]	@ 0x438
 8001c3c:	f643 627b 	movw	r2, #15995	@ 0x3e7b
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d9e3      	bls.n	8001c0c <main+0x678>
			}
			printf("Running inference\r\n");
 8001c44:	4813      	ldr	r0, [pc, #76]	@ (8001c94 <main+0x700>)
 8001c46:	f012 fe09 	bl	801485c <puts>
			AI_Run(aiInData, aiOutData);
 8001c4a:	4913      	ldr	r1, [pc, #76]	@ (8001c98 <main+0x704>)
 8001c4c:	4810      	ldr	r0, [pc, #64]	@ (8001c90 <main+0x6fc>)
 8001c4e:	f000 f9fd 	bl	800204c <AI_Run>

			uint32_t class = argmax(aiOutData, AI_NETWORK_OUT_1_SIZE);
 8001c52:	2106      	movs	r1, #6
 8001c54:	4810      	ldr	r0, [pc, #64]	@ (8001c98 <main+0x704>)
 8001c56:	f000 fa31 	bl	80020bc <argmax>
 8001c5a:	f8c7 0428 	str.w	r0, [r7, #1064]	@ 0x428
			printf("Detected Word: %s (Confidence: %8.6f)\r\n", activities[class], aiOutData[class]);
 8001c5e:	4a0f      	ldr	r2, [pc, #60]	@ (8001c9c <main+0x708>)
 8001c60:	f8d7 3428 	ldr.w	r3, [r7, #1064]	@ 0x428
 8001c64:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8001c68:	4a0b      	ldr	r2, [pc, #44]	@ (8001c98 <main+0x704>)
 8001c6a:	f8d7 3428 	ldr.w	r3, [r7, #1064]	@ 0x428
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	4413      	add	r3, r2
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7fe fce7 	bl	8000648 <__aeabi_f2d>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	4621      	mov	r1, r4
 8001c80:	4807      	ldr	r0, [pc, #28]	@ (8001ca0 <main+0x70c>)
 8001c82:	f012 fd83 	bl	801478c <iprintf>
        }

        HAL_Delay(100);  // Small delay for stability
 8001c86:	2064      	movs	r0, #100	@ 0x64
 8001c88:	f002 ffd8 	bl	8004c3c <HAL_Delay>
    {
 8001c8c:	e4a6      	b.n	80015dc <main+0x48>
 8001c8e:	bf00      	nop
 8001c90:	20000e64 	.word	0x20000e64
 8001c94:	08017580 	.word	0x08017580
 8001c98:	20010854 	.word	0x20010854
 8001c9c:	20000000 	.word	0x20000000
 8001ca0:	08017594 	.word	0x08017594

08001ca4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b094      	sub	sp, #80	@ 0x50
 8001ca8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001caa:	f107 0320 	add.w	r3, r7, #32
 8001cae:	2230      	movs	r2, #48	@ 0x30
 8001cb0:	2100      	movs	r1, #0
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f012 fed2 	bl	8014a5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cb8:	f107 030c 	add.w	r3, r7, #12
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]
 8001cc0:	605a      	str	r2, [r3, #4]
 8001cc2:	609a      	str	r2, [r3, #8]
 8001cc4:	60da      	str	r2, [r3, #12]
 8001cc6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cc8:	4b2a      	ldr	r3, [pc, #168]	@ (8001d74 <SystemClock_Config+0xd0>)
 8001cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ccc:	4a29      	ldr	r2, [pc, #164]	@ (8001d74 <SystemClock_Config+0xd0>)
 8001cce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cd2:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cd4:	4b27      	ldr	r3, [pc, #156]	@ (8001d74 <SystemClock_Config+0xd0>)
 8001cd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cdc:	60bb      	str	r3, [r7, #8]
 8001cde:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ce0:	4b25      	ldr	r3, [pc, #148]	@ (8001d78 <SystemClock_Config+0xd4>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a24      	ldr	r2, [pc, #144]	@ (8001d78 <SystemClock_Config+0xd4>)
 8001ce6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001cea:	6013      	str	r3, [r2, #0]
 8001cec:	4b22      	ldr	r3, [pc, #136]	@ (8001d78 <SystemClock_Config+0xd4>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001cf4:	607b      	str	r3, [r7, #4]
 8001cf6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d00:	2310      	movs	r3, #16
 8001d02:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d04:	2302      	movs	r3, #2
 8001d06:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001d0c:	2308      	movs	r3, #8
 8001d0e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 200;
 8001d10:	23c8      	movs	r3, #200	@ 0xc8
 8001d12:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d14:	2302      	movs	r3, #2
 8001d16:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001d18:	2308      	movs	r3, #8
 8001d1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d1c:	f107 0320 	add.w	r3, r7, #32
 8001d20:	4618      	mov	r0, r3
 8001d22:	f004 ff71 	bl	8006c08 <HAL_RCC_OscConfig>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001d2c:	f000 f9f6 	bl	800211c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001d30:	f004 ff1a 	bl	8006b68 <HAL_PWREx_EnableOverDrive>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001d3a:	f000 f9ef 	bl	800211c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d3e:	230f      	movs	r3, #15
 8001d40:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d42:	2302      	movs	r3, #2
 8001d44:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d46:	2300      	movs	r3, #0
 8001d48:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001d4a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001d4e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001d50:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d54:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001d56:	f107 030c 	add.w	r3, r7, #12
 8001d5a:	2106      	movs	r1, #6
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f005 f9f7 	bl	8007150 <HAL_RCC_ClockConfig>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001d68:	f000 f9d8 	bl	800211c <Error_Handler>
  }
}
 8001d6c:	bf00      	nop
 8001d6e:	3750      	adds	r7, #80	@ 0x50
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	40023800 	.word	0x40023800
 8001d78:	40007000 	.word	0x40007000

08001d7c <__io_putchar>:

/* USER CODE BEGIN 4 */

/* Needed to send messages easier to terminal for debugging */
PUTCHAR_PROTOTYPE
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
/* Place your implementation of fputc here */
/* e.g. write a character to the USART2 and Loop until the end
of transmission */
HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 100);
 8001d84:	1d39      	adds	r1, r7, #4
 8001d86:	2364      	movs	r3, #100	@ 0x64
 8001d88:	2201      	movs	r2, #1
 8001d8a:	4804      	ldr	r0, [pc, #16]	@ (8001d9c <__io_putchar+0x20>)
 8001d8c:	f007 ff1a 	bl	8009bc4 <HAL_UART_Transmit>
return ch;
 8001d90:	687b      	ldr	r3, [r7, #4]
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	200296f0 	.word	0x200296f0

08001da0 <HAL_GPIO_EXTI_Callback>:
/* ======================================================== */


/* User button interruption and variable change */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	4603      	mov	r3, r0
 8001da8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);

  if (GPIO_Pin == USR_BTN_Pin && button_pressed == 0)
 8001daa:	88fb      	ldrh	r3, [r7, #6]
 8001dac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001db0:	d10a      	bne.n	8001dc8 <HAL_GPIO_EXTI_Callback+0x28>
 8001db2:	4b07      	ldr	r3, [pc, #28]	@ (8001dd0 <HAL_GPIO_EXTI_Callback+0x30>)
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d105      	bne.n	8001dc8 <HAL_GPIO_EXTI_Callback+0x28>
      {
	  	  button_pressed = 1;
 8001dbc:	4b04      	ldr	r3, [pc, #16]	@ (8001dd0 <HAL_GPIO_EXTI_Callback+0x30>)
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	701a      	strb	r2, [r3, #0]
	  	  printf("Button pressed...\r\n");
 8001dc2:	4804      	ldr	r0, [pc, #16]	@ (8001dd4 <HAL_GPIO_EXTI_Callback+0x34>)
 8001dc4:	f012 fd4a 	bl	801485c <puts>
      }
}
 8001dc8:	bf00      	nop
 8001dca:	3708      	adds	r7, #8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	20028cb8 	.word	0x20028cb8
 8001dd4:	080175bc 	.word	0x080175bc

08001dd8 <check_button_release>:
/* ======================================================== */


/* Used to verify the state of the button */
void check_button_release()
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
    if (HAL_GPIO_ReadPin(GPIOI, USR_BTN_Pin) == GPIO_PIN_RESET) button_pressed = 0;
 8001ddc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001de0:	4805      	ldr	r0, [pc, #20]	@ (8001df8 <check_button_release+0x20>)
 8001de2:	f004 f87f 	bl	8005ee4 <HAL_GPIO_ReadPin>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d102      	bne.n	8001df2 <check_button_release+0x1a>
 8001dec:	4b03      	ldr	r3, [pc, #12]	@ (8001dfc <check_button_release+0x24>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	701a      	strb	r2, [r3, #0]
}
 8001df2:	bf00      	nop
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	40022000 	.word	0x40022000
 8001dfc:	20028cb8 	.word	0x20028cb8

08001e00 <SDCard_InitAndFormat>:
/* ======================================================== */


/* Used to initialize the SD card */
void SDCard_InitAndFormat(void) {
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af02      	add	r7, sp, #8
    FRESULT res;

    // Mount the file system
    res = f_mount(&SDFatFS, (TCHAR const *)SDPath, 0);
 8001e06:	2200      	movs	r2, #0
 8001e08:	491e      	ldr	r1, [pc, #120]	@ (8001e84 <SDCard_InitAndFormat+0x84>)
 8001e0a:	481f      	ldr	r0, [pc, #124]	@ (8001e88 <SDCard_InitAndFormat+0x88>)
 8001e0c:	f00b fbbe 	bl	800d58c <f_mount>
 8001e10:	4603      	mov	r3, r0
 8001e12:	71fb      	strb	r3, [r7, #7]
    if (res != FR_OK) {
 8001e14:	79fb      	ldrb	r3, [r7, #7]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d006      	beq.n	8001e28 <SDCard_InitAndFormat+0x28>
        printf("Error: Failed to mount SD card (Code: %d).\r\n", res);
 8001e1a:	79fb      	ldrb	r3, [r7, #7]
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	481b      	ldr	r0, [pc, #108]	@ (8001e8c <SDCard_InitAndFormat+0x8c>)
 8001e20:	f012 fcb4 	bl	801478c <iprintf>
        Error_Handler();
 8001e24:	f000 f97a 	bl	800211c <Error_Handler>
    }

    // Format the SD card
    res = f_mkfs((TCHAR const *)SDPath, FM_ANY, 0, workBuffer_init, sizeof(workBuffer_init));
 8001e28:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001e2c:	9300      	str	r3, [sp, #0]
 8001e2e:	4b18      	ldr	r3, [pc, #96]	@ (8001e90 <SDCard_InitAndFormat+0x90>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	2107      	movs	r1, #7
 8001e34:	4813      	ldr	r0, [pc, #76]	@ (8001e84 <SDCard_InitAndFormat+0x84>)
 8001e36:	f00c fb0f 	bl	800e458 <f_mkfs>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	71fb      	strb	r3, [r7, #7]
    if (res != FR_OK) {
 8001e3e:	79fb      	ldrb	r3, [r7, #7]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d006      	beq.n	8001e52 <SDCard_InitAndFormat+0x52>
        printf("Error: Failed to format SD card (Code: %d).\r\n", res);
 8001e44:	79fb      	ldrb	r3, [r7, #7]
 8001e46:	4619      	mov	r1, r3
 8001e48:	4812      	ldr	r0, [pc, #72]	@ (8001e94 <SDCard_InitAndFormat+0x94>)
 8001e4a:	f012 fc9f 	bl	801478c <iprintf>
        Error_Handler();
 8001e4e:	f000 f965 	bl	800211c <Error_Handler>
    }

    // Unmount the file system to complete formatting
    res = f_mount(NULL, (TCHAR const *)SDPath, 0);
 8001e52:	2200      	movs	r2, #0
 8001e54:	490b      	ldr	r1, [pc, #44]	@ (8001e84 <SDCard_InitAndFormat+0x84>)
 8001e56:	2000      	movs	r0, #0
 8001e58:	f00b fb98 	bl	800d58c <f_mount>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	71fb      	strb	r3, [r7, #7]
    if (res != FR_OK) {
 8001e60:	79fb      	ldrb	r3, [r7, #7]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d006      	beq.n	8001e74 <SDCard_InitAndFormat+0x74>
        printf("Error: Failed to unmount SD card after formatting (Code: %d).\r\n", res);
 8001e66:	79fb      	ldrb	r3, [r7, #7]
 8001e68:	4619      	mov	r1, r3
 8001e6a:	480b      	ldr	r0, [pc, #44]	@ (8001e98 <SDCard_InitAndFormat+0x98>)
 8001e6c:	f012 fc8e 	bl	801478c <iprintf>
        Error_Handler();
 8001e70:	f000 f954 	bl	800211c <Error_Handler>
    }

    printf("SD card initialized and formatted successfully.\r\n");
 8001e74:	4809      	ldr	r0, [pc, #36]	@ (8001e9c <SDCard_InitAndFormat+0x9c>)
 8001e76:	f012 fcf1 	bl	801485c <puts>
}
 8001e7a:	bf00      	nop
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	2002e440 	.word	0x2002e440
 8001e88:	2002e444 	.word	0x2002e444
 8001e8c:	080175d0 	.word	0x080175d0
 8001e90:	20000a28 	.word	0x20000a28
 8001e94:	08017600 	.word	0x08017600
 8001e98:	08017630 	.word	0x08017630
 8001e9c:	08017670 	.word	0x08017670

08001ea0 <read_wav_file>:
    // Close the file
    f_close(&file);
}
/* ======================================================== */

int read_wav_file(const char *filename, int16_t *buffer) {
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	f5ad 7d10 	sub.w	sp, sp, #576	@ 0x240
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001eac:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8001eb0:	6018      	str	r0, [r3, #0]
 8001eb2:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001eb6:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8001eba:	6019      	str	r1, [r3, #0]
    FIL file;
    UINT bytes_read;
    FRESULT result = f_open(&file, filename, FA_READ);
 8001ebc:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001ec0:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8001ec4:	f107 000c 	add.w	r0, r7, #12
 8001ec8:	2201      	movs	r2, #1
 8001eca:	6819      	ldr	r1, [r3, #0]
 8001ecc:	f00b fba4 	bl	800d618 <f_open>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	f887 323f 	strb.w	r3, [r7, #575]	@ 0x23f

    if (result != FR_OK) {
 8001ed6:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d002      	beq.n	8001ee4 <read_wav_file+0x44>
        return -1;  // File open error
 8001ede:	f04f 33ff 	mov.w	r3, #4294967295
 8001ee2:	e02a      	b.n	8001f3a <read_wav_file+0x9a>
    }

    // Skip WAV header (44 bytes)
    f_lseek(&file, 44);
 8001ee4:	f107 030c 	add.w	r3, r7, #12
 8001ee8:	212c      	movs	r1, #44	@ 0x2c
 8001eea:	4618      	mov	r0, r3
 8001eec:	f00c f8aa 	bl	800e044 <f_lseek>

    // Read audio samples into the buffer
    result = f_read(&file, buffer, BUFFER_SIZE * sizeof(int16_t), &bytes_read);
 8001ef0:	f107 0308 	add.w	r3, r7, #8
 8001ef4:	f507 7210 	add.w	r2, r7, #576	@ 0x240
 8001ef8:	f5a2 7110 	sub.w	r1, r2, #576	@ 0x240
 8001efc:	f107 000c 	add.w	r0, r7, #12
 8001f00:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001f04:	6809      	ldr	r1, [r1, #0]
 8001f06:	f00b fd41 	bl	800d98c <f_read>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	f887 323f 	strb.w	r3, [r7, #575]	@ 0x23f

    if (result != FR_OK) {
 8001f10:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d007      	beq.n	8001f28 <read_wav_file+0x88>
        f_close(&file);
 8001f18:	f107 030c 	add.w	r3, r7, #12
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f00c f867 	bl	800dff0 <f_close>
        return -1;  // Read error
 8001f22:	f04f 33ff 	mov.w	r3, #4294967295
 8001f26:	e008      	b.n	8001f3a <read_wav_file+0x9a>
    }

    f_close(&file);
 8001f28:	f107 030c 	add.w	r3, r7, #12
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f00c f85f 	bl	800dff0 <f_close>
    printf("file successfully read! \r\n");
 8001f32:	4804      	ldr	r0, [pc, #16]	@ (8001f44 <read_wav_file+0xa4>)
 8001f34:	f012 fc92 	bl	801485c <puts>
    return 0;  // Success
 8001f38:	2300      	movs	r3, #0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f507 7710 	add.w	r7, r7, #576	@ 0x240
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	08017814 	.word	0x08017814

08001f48 <arm_hanning_f32>:


void arm_hanning_f32(float32_t * pDst, uint32_t blockSize) {
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b086      	sub	sp, #24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
   float32_t k = 2.0f / ((float32_t) blockSize);
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	ee07 3a90 	vmov	s15, r3
 8001f58:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f5c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001f60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f64:	edc7 7a04 	vstr	s15, [r7, #16]
   float32_t w;

   for(uint32_t i=0;i<blockSize;i++)
 8001f68:	2300      	movs	r3, #0
 8001f6a:	617b      	str	r3, [r7, #20]
 8001f6c:	e027      	b.n	8001fbe <arm_hanning_f32+0x76>
   {
     w = PI * i * k;
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	ee07 3a90 	vmov	s15, r3
 8001f74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f78:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8001fd0 <arm_hanning_f32+0x88>
 8001f7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f80:	ed97 7a04 	vldr	s14, [r7, #16]
 8001f84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f88:	edc7 7a03 	vstr	s15, [r7, #12]
     w = 0.5f * (1.0f - cosf (w));
 8001f8c:	ed97 0a03 	vldr	s0, [r7, #12]
 8001f90:	f014 fcd4 	bl	801693c <cosf>
 8001f94:	eef0 7a40 	vmov.f32	s15, s0
 8001f98:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001f9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fa0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001fa4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fa8:	edc7 7a03 	vstr	s15, [r7, #12]
     pDst[i] = w;
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	68fa      	ldr	r2, [r7, #12]
 8001fb6:	601a      	str	r2, [r3, #0]
   for(uint32_t i=0;i<blockSize;i++)
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	3301      	adds	r3, #1
 8001fbc:	617b      	str	r3, [r7, #20]
 8001fbe:	697a      	ldr	r2, [r7, #20]
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d3d3      	bcc.n	8001f6e <arm_hanning_f32+0x26>
   }
}
 8001fc6:	bf00      	nop
 8001fc8:	bf00      	nop
 8001fca:	3718      	adds	r7, #24
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	40490fdb 	.word	0x40490fdb

08001fd4 <AI_Init>:

static void AI_Init(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
  ai_error err;

  /* Create a local array with the addresses of the activations buffers */
  const ai_handle act_addr[] = { activations };
 8001fda:	4b17      	ldr	r3, [pc, #92]	@ (8002038 <AI_Init+0x64>)
 8001fdc:	603b      	str	r3, [r7, #0]
  /* Create an instance of the model */
  err = ai_network_create_and_init(&network, act_addr, NULL);
 8001fde:	463b      	mov	r3, r7
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	4815      	ldr	r0, [pc, #84]	@ (800203c <AI_Init+0x68>)
 8001fe6:	f00c fff3 	bl	800efd0 <ai_network_create_and_init>
 8001fea:	4603      	mov	r3, r0
 8001fec:	607b      	str	r3, [r7, #4]
  if (err.type != AI_ERROR_NONE) {
 8001fee:	793b      	ldrb	r3, [r7, #4]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d00a      	beq.n	800200a <AI_Init+0x36>
    printf("ai_network_create error - type=%d code=%d\r\n", err.type, err.code);
 8001ff4:	793b      	ldrb	r3, [r7, #4]
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8001ffe:	461a      	mov	r2, r3
 8002000:	480f      	ldr	r0, [pc, #60]	@ (8002040 <AI_Init+0x6c>)
 8002002:	f012 fbc3 	bl	801478c <iprintf>
    Error_Handler();
 8002006:	f000 f889 	bl	800211c <Error_Handler>
  }
  ai_input = ai_network_inputs_get(network, NULL);
 800200a:	4b0c      	ldr	r3, [pc, #48]	@ (800203c <AI_Init+0x68>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	2100      	movs	r1, #0
 8002010:	4618      	mov	r0, r3
 8002012:	f00d f85b 	bl	800f0cc <ai_network_inputs_get>
 8002016:	4603      	mov	r3, r0
 8002018:	4a0a      	ldr	r2, [pc, #40]	@ (8002044 <AI_Init+0x70>)
 800201a:	6013      	str	r3, [r2, #0]
  ai_output = ai_network_outputs_get(network, NULL);
 800201c:	4b07      	ldr	r3, [pc, #28]	@ (800203c <AI_Init+0x68>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2100      	movs	r1, #0
 8002022:	4618      	mov	r0, r3
 8002024:	f00d f86c 	bl	800f100 <ai_network_outputs_get>
 8002028:	4603      	mov	r3, r0
 800202a:	4a07      	ldr	r2, [pc, #28]	@ (8002048 <AI_Init+0x74>)
 800202c:	6013      	str	r3, [r2, #0]
}
 800202e:	bf00      	nop
 8002030:	3708      	adds	r7, #8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	2001086c 	.word	0x2001086c
 800203c:	20000e60 	.word	0x20000e60
 8002040:	08017830 	.word	0x08017830
 8002044:	20020e9c 	.word	0x20020e9c
 8002048:	20020ea0 	.word	0x20020ea0

0800204c <AI_Run>:


static void AI_Run(float *pIn, float *pOut)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	6039      	str	r1, [r7, #0]
  ai_i32 batch;
  ai_error err;

  /* Update IO handlers with the data payload */
  ai_input[0].data = AI_HANDLE_PTR(pIn);
 8002056:	4b15      	ldr	r3, [pc, #84]	@ (80020ac <AI_Run+0x60>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	605a      	str	r2, [r3, #4]
  ai_output[0].data = AI_HANDLE_PTR(pOut);
 800205e:	4b14      	ldr	r3, [pc, #80]	@ (80020b0 <AI_Run+0x64>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	683a      	ldr	r2, [r7, #0]
 8002064:	605a      	str	r2, [r3, #4]

  batch = ai_network_run(network, ai_input, ai_output);
 8002066:	4b13      	ldr	r3, [pc, #76]	@ (80020b4 <AI_Run+0x68>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a10      	ldr	r2, [pc, #64]	@ (80020ac <AI_Run+0x60>)
 800206c:	6811      	ldr	r1, [r2, #0]
 800206e:	4a10      	ldr	r2, [pc, #64]	@ (80020b0 <AI_Run+0x64>)
 8002070:	6812      	ldr	r2, [r2, #0]
 8002072:	4618      	mov	r0, r3
 8002074:	f00d f89a 	bl	800f1ac <ai_network_run>
 8002078:	60f8      	str	r0, [r7, #12]
  if (batch != 1) {
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2b01      	cmp	r3, #1
 800207e:	d011      	beq.n	80020a4 <AI_Run+0x58>
    err = ai_network_get_error(network);
 8002080:	4b0c      	ldr	r3, [pc, #48]	@ (80020b4 <AI_Run+0x68>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4618      	mov	r0, r3
 8002086:	f00c ff81 	bl	800ef8c <ai_network_get_error>
 800208a:	4603      	mov	r3, r0
 800208c:	60bb      	str	r3, [r7, #8]
    printf("AI ai_network_run error - type=%d code=%d\r\n", err.type, err.code);
 800208e:	7a3b      	ldrb	r3, [r7, #8]
 8002090:	4619      	mov	r1, r3
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8002098:	461a      	mov	r2, r3
 800209a:	4807      	ldr	r0, [pc, #28]	@ (80020b8 <AI_Run+0x6c>)
 800209c:	f012 fb76 	bl	801478c <iprintf>
    Error_Handler();
 80020a0:	f000 f83c 	bl	800211c <Error_Handler>
  }
}
 80020a4:	bf00      	nop
 80020a6:	3710      	adds	r7, #16
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	20020e9c 	.word	0x20020e9c
 80020b0:	20020ea0 	.word	0x20020ea0
 80020b4:	20000e60 	.word	0x20000e60
 80020b8:	0801785c 	.word	0x0801785c

080020bc <argmax>:

static uint32_t argmax(const float * values, uint32_t len)
{
 80020bc:	b480      	push	{r7}
 80020be:	b087      	sub	sp, #28
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
  float max_value = values[0];
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	617b      	str	r3, [r7, #20]
  uint32_t max_index = 0;
 80020cc:	2300      	movs	r3, #0
 80020ce:	613b      	str	r3, [r7, #16]
  for (uint32_t i = 1; i < len; i++) {
 80020d0:	2301      	movs	r3, #1
 80020d2:	60fb      	str	r3, [r7, #12]
 80020d4:	e017      	b.n	8002106 <argmax+0x4a>
    if (values[i] > max_value) {
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	4413      	add	r3, r2
 80020de:	edd3 7a00 	vldr	s15, [r3]
 80020e2:	ed97 7a05 	vldr	s14, [r7, #20]
 80020e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020ee:	d507      	bpl.n	8002100 <argmax+0x44>
      max_value = values[i];
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	4413      	add	r3, r2
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	617b      	str	r3, [r7, #20]
      max_index = i;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	613b      	str	r3, [r7, #16]
  for (uint32_t i = 1; i < len; i++) {
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	3301      	adds	r3, #1
 8002104:	60fb      	str	r3, [r7, #12]
 8002106:	68fa      	ldr	r2, [r7, #12]
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	429a      	cmp	r2, r3
 800210c:	d3e3      	bcc.n	80020d6 <argmax+0x1a>
    }
  }
  return max_index;
 800210e:	693b      	ldr	r3, [r7, #16]
}
 8002110:	4618      	mov	r0, r3
 8002112:	371c      	adds	r7, #28
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002120:	b672      	cpsid	i
}
 8002122:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002124:	bf00      	nop
 8002126:	e7fd      	b.n	8002124 <Error_Handler+0x8>

08002128 <MX_SAI1_Init>:
SAI_HandleTypeDef hsai_BlockA1;
DMA_HandleTypeDef hdma_sai1_a;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 800212c:	4b27      	ldr	r3, [pc, #156]	@ (80021cc <MX_SAI1_Init+0xa4>)
 800212e:	4a28      	ldr	r2, [pc, #160]	@ (80021d0 <MX_SAI1_Init+0xa8>)
 8002130:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8002132:	4b26      	ldr	r3, [pc, #152]	@ (80021cc <MX_SAI1_Init+0xa4>)
 8002134:	2200      	movs	r2, #0
 8002136:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_RX;
 8002138:	4b24      	ldr	r3, [pc, #144]	@ (80021cc <MX_SAI1_Init+0xa4>)
 800213a:	2201      	movs	r2, #1
 800213c:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_16;
 800213e:	4b23      	ldr	r3, [pc, #140]	@ (80021cc <MX_SAI1_Init+0xa4>)
 8002140:	2280      	movs	r2, #128	@ 0x80
 8002142:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8002144:	4b21      	ldr	r3, [pc, #132]	@ (80021cc <MX_SAI1_Init+0xa4>)
 8002146:	2200      	movs	r2, #0
 8002148:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800214a:	4b20      	ldr	r3, [pc, #128]	@ (80021cc <MX_SAI1_Init+0xa4>)
 800214c:	2200      	movs	r2, #0
 800214e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8002150:	4b1e      	ldr	r3, [pc, #120]	@ (80021cc <MX_SAI1_Init+0xa4>)
 8002152:	2200      	movs	r2, #0
 8002154:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002156:	4b1d      	ldr	r3, [pc, #116]	@ (80021cc <MX_SAI1_Init+0xa4>)
 8002158:	2200      	movs	r2, #0
 800215a:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800215c:	4b1b      	ldr	r3, [pc, #108]	@ (80021cc <MX_SAI1_Init+0xa4>)
 800215e:	2200      	movs	r2, #0
 8002160:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8002162:	4b1a      	ldr	r3, [pc, #104]	@ (80021cc <MX_SAI1_Init+0xa4>)
 8002164:	2200      	movs	r2, #0
 8002166:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_16K;
 8002168:	4b18      	ldr	r3, [pc, #96]	@ (80021cc <MX_SAI1_Init+0xa4>)
 800216a:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 800216e:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8002170:	4b16      	ldr	r3, [pc, #88]	@ (80021cc <MX_SAI1_Init+0xa4>)
 8002172:	2200      	movs	r2, #0
 8002174:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8002176:	4b15      	ldr	r3, [pc, #84]	@ (80021cc <MX_SAI1_Init+0xa4>)
 8002178:	2200      	movs	r2, #0
 800217a:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 800217c:	4b13      	ldr	r3, [pc, #76]	@ (80021cc <MX_SAI1_Init+0xa4>)
 800217e:	2200      	movs	r2, #0
 8002180:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA1.FrameInit.FrameLength = 16;
 8002182:	4b12      	ldr	r3, [pc, #72]	@ (80021cc <MX_SAI1_Init+0xa4>)
 8002184:	2210      	movs	r2, #16
 8002186:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8002188:	4b10      	ldr	r3, [pc, #64]	@ (80021cc <MX_SAI1_Init+0xa4>)
 800218a:	2201      	movs	r2, #1
 800218c:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800218e:	4b0f      	ldr	r3, [pc, #60]	@ (80021cc <MX_SAI1_Init+0xa4>)
 8002190:	2200      	movs	r2, #0
 8002192:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8002194:	4b0d      	ldr	r3, [pc, #52]	@ (80021cc <MX_SAI1_Init+0xa4>)
 8002196:	2200      	movs	r2, #0
 8002198:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800219a:	4b0c      	ldr	r3, [pc, #48]	@ (80021cc <MX_SAI1_Init+0xa4>)
 800219c:	2200      	movs	r2, #0
 800219e:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 80021a0:	4b0a      	ldr	r3, [pc, #40]	@ (80021cc <MX_SAI1_Init+0xa4>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80021a6:	4b09      	ldr	r3, [pc, #36]	@ (80021cc <MX_SAI1_Init+0xa4>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 80021ac:	4b07      	ldr	r3, [pc, #28]	@ (80021cc <MX_SAI1_Init+0xa4>)
 80021ae:	2201      	movs	r2, #1
 80021b0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 80021b2:	4b06      	ldr	r3, [pc, #24]	@ (80021cc <MX_SAI1_Init+0xa4>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 80021b8:	4804      	ldr	r0, [pc, #16]	@ (80021cc <MX_SAI1_Init+0xa4>)
 80021ba:	f005 ffeb 	bl	8008194 <HAL_SAI_Init>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <MX_SAI1_Init+0xa0>
  {
    Error_Handler();
 80021c4:	f7ff ffaa 	bl	800211c <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 80021c8:	bf00      	nop
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	200294c0 	.word	0x200294c0
 80021d0:	40015804 	.word	0x40015804

080021d4 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b0aa      	sub	sp, #168	@ 0xa8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021dc:	f107 0310 	add.w	r3, r7, #16
 80021e0:	2284      	movs	r2, #132	@ 0x84
 80021e2:	2100      	movs	r1, #0
 80021e4:	4618      	mov	r0, r3
 80021e6:	f012 fc39 	bl	8014a5c <memset>
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a41      	ldr	r2, [pc, #260]	@ (80022f4 <HAL_SAI_MspInit+0x120>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d17b      	bne.n	80022ec <HAL_SAI_MspInit+0x118>
    {
    /* SAI1 clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 80021f4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80021f8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 80021fa:	2332      	movs	r3, #50	@ 0x32
 80021fc:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80021fe:	2302      	movs	r3, #2
 8002200:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8002202:	2302      	movs	r3, #2
 8002204:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8002206:	2300      	movs	r3, #0
 8002208:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 800220a:	2301      	movs	r3, #1
 800220c:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800220e:	2300      	movs	r3, #0
 8002210:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI;
 8002212:	2300      	movs	r3, #0
 8002214:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002216:	f107 0310 	add.w	r3, r7, #16
 800221a:	4618      	mov	r0, r3
 800221c:	f005 f97e 	bl	800751c <HAL_RCCEx_PeriphCLKConfig>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <HAL_SAI_MspInit+0x56>
    {
      Error_Handler();
 8002226:	f7ff ff79 	bl	800211c <Error_Handler>
    }

    if (SAI1_client == 0)
 800222a:	4b33      	ldr	r3, [pc, #204]	@ (80022f8 <HAL_SAI_MspInit+0x124>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d10b      	bne.n	800224a <HAL_SAI_MspInit+0x76>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8002232:	4b32      	ldr	r3, [pc, #200]	@ (80022fc <HAL_SAI_MspInit+0x128>)
 8002234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002236:	4a31      	ldr	r2, [pc, #196]	@ (80022fc <HAL_SAI_MspInit+0x128>)
 8002238:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800223c:	6453      	str	r3, [r2, #68]	@ 0x44
 800223e:	4b2f      	ldr	r3, [pc, #188]	@ (80022fc <HAL_SAI_MspInit+0x128>)
 8002240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002242:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002246:	60fb      	str	r3, [r7, #12]
 8002248:	68fb      	ldr	r3, [r7, #12]
    }
    SAI1_client ++;
 800224a:	4b2b      	ldr	r3, [pc, #172]	@ (80022f8 <HAL_SAI_MspInit+0x124>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	3301      	adds	r3, #1
 8002250:	4a29      	ldr	r2, [pc, #164]	@ (80022f8 <HAL_SAI_MspInit+0x124>)
 8002252:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002254:	2370      	movs	r3, #112	@ 0x70
 8002256:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800225a:	2302      	movs	r3, #2
 800225c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002260:	2300      	movs	r3, #0
 8002262:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002266:	2300      	movs	r3, #0
 8002268:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800226c:	2306      	movs	r3, #6
 800226e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002272:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002276:	4619      	mov	r1, r3
 8002278:	4821      	ldr	r0, [pc, #132]	@ (8002300 <HAL_SAI_MspInit+0x12c>)
 800227a:	f003 fb7b 	bl	8005974 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA2_Stream1;
 800227e:	4b21      	ldr	r3, [pc, #132]	@ (8002304 <HAL_SAI_MspInit+0x130>)
 8002280:	4a21      	ldr	r2, [pc, #132]	@ (8002308 <HAL_SAI_MspInit+0x134>)
 8002282:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Channel = DMA_CHANNEL_0;
 8002284:	4b1f      	ldr	r3, [pc, #124]	@ (8002304 <HAL_SAI_MspInit+0x130>)
 8002286:	2200      	movs	r2, #0
 8002288:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800228a:	4b1e      	ldr	r3, [pc, #120]	@ (8002304 <HAL_SAI_MspInit+0x130>)
 800228c:	2200      	movs	r2, #0
 800228e:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8002290:	4b1c      	ldr	r3, [pc, #112]	@ (8002304 <HAL_SAI_MspInit+0x130>)
 8002292:	2200      	movs	r2, #0
 8002294:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8002296:	4b1b      	ldr	r3, [pc, #108]	@ (8002304 <HAL_SAI_MspInit+0x130>)
 8002298:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800229c:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800229e:	4b19      	ldr	r3, [pc, #100]	@ (8002304 <HAL_SAI_MspInit+0x130>)
 80022a0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80022a4:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80022a6:	4b17      	ldr	r3, [pc, #92]	@ (8002304 <HAL_SAI_MspInit+0x130>)
 80022a8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80022ac:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 80022ae:	4b15      	ldr	r3, [pc, #84]	@ (8002304 <HAL_SAI_MspInit+0x130>)
 80022b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80022b4:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_HIGH;
 80022b6:	4b13      	ldr	r3, [pc, #76]	@ (8002304 <HAL_SAI_MspInit+0x130>)
 80022b8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80022bc:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80022be:	4b11      	ldr	r3, [pc, #68]	@ (8002304 <HAL_SAI_MspInit+0x130>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 80022c4:	480f      	ldr	r0, [pc, #60]	@ (8002304 <HAL_SAI_MspInit+0x130>)
 80022c6:	f002 fee1 	bl	800508c <HAL_DMA_Init>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d001      	beq.n	80022d4 <HAL_SAI_MspInit+0x100>
    {
      Error_Handler();
 80022d0:	f7ff ff24 	bl	800211c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	4a0b      	ldr	r2, [pc, #44]	@ (8002304 <HAL_SAI_MspInit+0x130>)
 80022d8:	671a      	str	r2, [r3, #112]	@ 0x70
 80022da:	4a0a      	ldr	r2, [pc, #40]	@ (8002304 <HAL_SAI_MspInit+0x130>)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	4a08      	ldr	r2, [pc, #32]	@ (8002304 <HAL_SAI_MspInit+0x130>)
 80022e4:	66da      	str	r2, [r3, #108]	@ 0x6c
 80022e6:	4a07      	ldr	r2, [pc, #28]	@ (8002304 <HAL_SAI_MspInit+0x130>)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6393      	str	r3, [r2, #56]	@ 0x38
    }
}
 80022ec:	bf00      	nop
 80022ee:	37a8      	adds	r7, #168	@ 0xa8
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40015804 	.word	0x40015804
 80022f8:	200295a4 	.word	0x200295a4
 80022fc:	40023800 	.word	0x40023800
 8002300:	40021000 	.word	0x40021000
 8002304:	20029544 	.word	0x20029544
 8002308:	40026428 	.word	0x40026428

0800230c <HAL_SAI_MspDeInit>:

void HAL_SAI_MspDeInit(SAI_HandleTypeDef* saiHandle)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]

/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a11      	ldr	r2, [pc, #68]	@ (8002360 <HAL_SAI_MspDeInit+0x54>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d11c      	bne.n	8002358 <HAL_SAI_MspDeInit+0x4c>
    {
    SAI1_client --;
 800231e:	4b11      	ldr	r3, [pc, #68]	@ (8002364 <HAL_SAI_MspDeInit+0x58>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	3b01      	subs	r3, #1
 8002324:	4a0f      	ldr	r2, [pc, #60]	@ (8002364 <HAL_SAI_MspDeInit+0x58>)
 8002326:	6013      	str	r3, [r2, #0]
    if (SAI1_client == 0)
 8002328:	4b0e      	ldr	r3, [pc, #56]	@ (8002364 <HAL_SAI_MspDeInit+0x58>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d105      	bne.n	800233c <HAL_SAI_MspDeInit+0x30>
      {
      /* Peripheral clock disable */
       __HAL_RCC_SAI1_CLK_DISABLE();
 8002330:	4b0d      	ldr	r3, [pc, #52]	@ (8002368 <HAL_SAI_MspDeInit+0x5c>)
 8002332:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002334:	4a0c      	ldr	r2, [pc, #48]	@ (8002368 <HAL_SAI_MspDeInit+0x5c>)
 8002336:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800233a:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SAI1_A_Block_A GPIO Configuration
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6);
 800233c:	2170      	movs	r1, #112	@ 0x70
 800233e:	480b      	ldr	r0, [pc, #44]	@ (800236c <HAL_SAI_MspDeInit+0x60>)
 8002340:	f003 fcc4 	bl	8005ccc <HAL_GPIO_DeInit>

    HAL_DMA_DeInit(saiHandle->hdmarx);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002348:	4618      	mov	r0, r3
 800234a:	f002 ff4d 	bl	80051e8 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(saiHandle->hdmatx);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002352:	4618      	mov	r0, r3
 8002354:	f002 ff48 	bl	80051e8 <HAL_DMA_DeInit>
    }
}
 8002358:	bf00      	nop
 800235a:	3708      	adds	r7, #8
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	40015804 	.word	0x40015804
 8002364:	200295a4 	.word	0x200295a4
 8002368:	40023800 	.word	0x40023800
 800236c:	40021000 	.word	0x40021000

08002370 <MX_SDMMC1_SD_Init>:
DMA_HandleTypeDef hdma_sdmmc1_tx;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8002374:	4b0c      	ldr	r3, [pc, #48]	@ (80023a8 <MX_SDMMC1_SD_Init+0x38>)
 8002376:	4a0d      	ldr	r2, [pc, #52]	@ (80023ac <MX_SDMMC1_SD_Init+0x3c>)
 8002378:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800237a:	4b0b      	ldr	r3, [pc, #44]	@ (80023a8 <MX_SDMMC1_SD_Init+0x38>)
 800237c:	2200      	movs	r2, #0
 800237e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8002380:	4b09      	ldr	r3, [pc, #36]	@ (80023a8 <MX_SDMMC1_SD_Init+0x38>)
 8002382:	2200      	movs	r2, #0
 8002384:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8002386:	4b08      	ldr	r3, [pc, #32]	@ (80023a8 <MX_SDMMC1_SD_Init+0x38>)
 8002388:	2200      	movs	r2, #0
 800238a:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 800238c:	4b06      	ldr	r3, [pc, #24]	@ (80023a8 <MX_SDMMC1_SD_Init+0x38>)
 800238e:	2200      	movs	r2, #0
 8002390:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8002392:	4b05      	ldr	r3, [pc, #20]	@ (80023a8 <MX_SDMMC1_SD_Init+0x38>)
 8002394:	2200      	movs	r2, #0
 8002396:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8002398:	4b03      	ldr	r3, [pc, #12]	@ (80023a8 <MX_SDMMC1_SD_Init+0x38>)
 800239a:	2200      	movs	r2, #0
 800239c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800239e:	bf00      	nop
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr
 80023a8:	200295a8 	.word	0x200295a8
 80023ac:	40012c00 	.word	0x40012c00

080023b0 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b0ac      	sub	sp, #176	@ 0xb0
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80023bc:	2200      	movs	r2, #0
 80023be:	601a      	str	r2, [r3, #0]
 80023c0:	605a      	str	r2, [r3, #4]
 80023c2:	609a      	str	r2, [r3, #8]
 80023c4:	60da      	str	r2, [r3, #12]
 80023c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80023c8:	f107 0318 	add.w	r3, r7, #24
 80023cc:	2284      	movs	r2, #132	@ 0x84
 80023ce:	2100      	movs	r1, #0
 80023d0:	4618      	mov	r0, r3
 80023d2:	f012 fb43 	bl	8014a5c <memset>
  if(sdHandle->Instance==SDMMC1)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a74      	ldr	r2, [pc, #464]	@ (80025ac <HAL_SD_MspInit+0x1fc>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	f040 80e0 	bne.w	80025a2 <HAL_SD_MspInit+0x1f2>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 80023e2:	f44f 0320 	mov.w	r3, #10485760	@ 0xa00000
 80023e6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80023e8:	2300      	movs	r3, #0
 80023ea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80023ee:	2300      	movs	r3, #0
 80023f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023f4:	f107 0318 	add.w	r3, r7, #24
 80023f8:	4618      	mov	r0, r3
 80023fa:	f005 f88f 	bl	800751c <HAL_RCCEx_PeriphCLKConfig>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d001      	beq.n	8002408 <HAL_SD_MspInit+0x58>
    {
      Error_Handler();
 8002404:	f7ff fe8a 	bl	800211c <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002408:	4b69      	ldr	r3, [pc, #420]	@ (80025b0 <HAL_SD_MspInit+0x200>)
 800240a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800240c:	4a68      	ldr	r2, [pc, #416]	@ (80025b0 <HAL_SD_MspInit+0x200>)
 800240e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002412:	6453      	str	r3, [r2, #68]	@ 0x44
 8002414:	4b66      	ldr	r3, [pc, #408]	@ (80025b0 <HAL_SD_MspInit+0x200>)
 8002416:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002418:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800241c:	617b      	str	r3, [r7, #20]
 800241e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002420:	4b63      	ldr	r3, [pc, #396]	@ (80025b0 <HAL_SD_MspInit+0x200>)
 8002422:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002424:	4a62      	ldr	r2, [pc, #392]	@ (80025b0 <HAL_SD_MspInit+0x200>)
 8002426:	f043 0304 	orr.w	r3, r3, #4
 800242a:	6313      	str	r3, [r2, #48]	@ 0x30
 800242c:	4b60      	ldr	r3, [pc, #384]	@ (80025b0 <HAL_SD_MspInit+0x200>)
 800242e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002430:	f003 0304 	and.w	r3, r3, #4
 8002434:	613b      	str	r3, [r7, #16]
 8002436:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002438:	4b5d      	ldr	r3, [pc, #372]	@ (80025b0 <HAL_SD_MspInit+0x200>)
 800243a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800243c:	4a5c      	ldr	r2, [pc, #368]	@ (80025b0 <HAL_SD_MspInit+0x200>)
 800243e:	f043 0308 	orr.w	r3, r3, #8
 8002442:	6313      	str	r3, [r2, #48]	@ 0x30
 8002444:	4b5a      	ldr	r3, [pc, #360]	@ (80025b0 <HAL_SD_MspInit+0x200>)
 8002446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002448:	f003 0308 	and.w	r3, r3, #8
 800244c:	60fb      	str	r3, [r7, #12]
 800244e:	68fb      	ldr	r3, [r7, #12]
    /**SDMMC1 GPIO Configuration
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_8;
 8002450:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8002454:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002458:	2302      	movs	r3, #2
 800245a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245e:	2300      	movs	r3, #0
 8002460:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002464:	2303      	movs	r3, #3
 8002466:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800246a:	230c      	movs	r3, #12
 800246c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002470:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002474:	4619      	mov	r1, r3
 8002476:	484f      	ldr	r0, [pc, #316]	@ (80025b4 <HAL_SD_MspInit+0x204>)
 8002478:	f003 fa7c 	bl	8005974 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800247c:	2304      	movs	r3, #4
 800247e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002482:	2302      	movs	r3, #2
 8002484:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002488:	2300      	movs	r3, #0
 800248a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800248e:	2303      	movs	r3, #3
 8002490:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002494:	230c      	movs	r3, #12
 8002496:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800249a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800249e:	4619      	mov	r1, r3
 80024a0:	4845      	ldr	r0, [pc, #276]	@ (80025b8 <HAL_SD_MspInit+0x208>)
 80024a2:	f003 fa67 	bl	8005974 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 80024a6:	4b45      	ldr	r3, [pc, #276]	@ (80025bc <HAL_SD_MspInit+0x20c>)
 80024a8:	4a45      	ldr	r2, [pc, #276]	@ (80025c0 <HAL_SD_MspInit+0x210>)
 80024aa:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 80024ac:	4b43      	ldr	r3, [pc, #268]	@ (80025bc <HAL_SD_MspInit+0x20c>)
 80024ae:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80024b2:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80024b4:	4b41      	ldr	r3, [pc, #260]	@ (80025bc <HAL_SD_MspInit+0x20c>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024ba:	4b40      	ldr	r3, [pc, #256]	@ (80025bc <HAL_SD_MspInit+0x20c>)
 80024bc:	2200      	movs	r2, #0
 80024be:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80024c0:	4b3e      	ldr	r3, [pc, #248]	@ (80025bc <HAL_SD_MspInit+0x20c>)
 80024c2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80024c6:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80024c8:	4b3c      	ldr	r3, [pc, #240]	@ (80025bc <HAL_SD_MspInit+0x20c>)
 80024ca:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80024ce:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80024d0:	4b3a      	ldr	r3, [pc, #232]	@ (80025bc <HAL_SD_MspInit+0x20c>)
 80024d2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80024d6:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 80024d8:	4b38      	ldr	r3, [pc, #224]	@ (80025bc <HAL_SD_MspInit+0x20c>)
 80024da:	2220      	movs	r2, #32
 80024dc:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80024de:	4b37      	ldr	r3, [pc, #220]	@ (80025bc <HAL_SD_MspInit+0x20c>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80024e4:	4b35      	ldr	r3, [pc, #212]	@ (80025bc <HAL_SD_MspInit+0x20c>)
 80024e6:	2204      	movs	r2, #4
 80024e8:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80024ea:	4b34      	ldr	r3, [pc, #208]	@ (80025bc <HAL_SD_MspInit+0x20c>)
 80024ec:	2203      	movs	r2, #3
 80024ee:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 80024f0:	4b32      	ldr	r3, [pc, #200]	@ (80025bc <HAL_SD_MspInit+0x20c>)
 80024f2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80024f6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80024f8:	4b30      	ldr	r3, [pc, #192]	@ (80025bc <HAL_SD_MspInit+0x20c>)
 80024fa:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80024fe:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8002500:	482e      	ldr	r0, [pc, #184]	@ (80025bc <HAL_SD_MspInit+0x20c>)
 8002502:	f002 fdc3 	bl	800508c <HAL_DMA_Init>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <HAL_SD_MspInit+0x160>
    {
      Error_Handler();
 800250c:	f7ff fe06 	bl	800211c <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdmmc1_rx);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4a2a      	ldr	r2, [pc, #168]	@ (80025bc <HAL_SD_MspInit+0x20c>)
 8002514:	641a      	str	r2, [r3, #64]	@ 0x40
 8002516:	4a29      	ldr	r2, [pc, #164]	@ (80025bc <HAL_SD_MspInit+0x20c>)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 800251c:	4b29      	ldr	r3, [pc, #164]	@ (80025c4 <HAL_SD_MspInit+0x214>)
 800251e:	4a2a      	ldr	r2, [pc, #168]	@ (80025c8 <HAL_SD_MspInit+0x218>)
 8002520:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 8002522:	4b28      	ldr	r3, [pc, #160]	@ (80025c4 <HAL_SD_MspInit+0x214>)
 8002524:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002528:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800252a:	4b26      	ldr	r3, [pc, #152]	@ (80025c4 <HAL_SD_MspInit+0x214>)
 800252c:	2240      	movs	r2, #64	@ 0x40
 800252e:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002530:	4b24      	ldr	r3, [pc, #144]	@ (80025c4 <HAL_SD_MspInit+0x214>)
 8002532:	2200      	movs	r2, #0
 8002534:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002536:	4b23      	ldr	r3, [pc, #140]	@ (80025c4 <HAL_SD_MspInit+0x214>)
 8002538:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800253c:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800253e:	4b21      	ldr	r3, [pc, #132]	@ (80025c4 <HAL_SD_MspInit+0x214>)
 8002540:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002544:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002546:	4b1f      	ldr	r3, [pc, #124]	@ (80025c4 <HAL_SD_MspInit+0x214>)
 8002548:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800254c:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 800254e:	4b1d      	ldr	r3, [pc, #116]	@ (80025c4 <HAL_SD_MspInit+0x214>)
 8002550:	2220      	movs	r2, #32
 8002552:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002554:	4b1b      	ldr	r3, [pc, #108]	@ (80025c4 <HAL_SD_MspInit+0x214>)
 8002556:	2200      	movs	r2, #0
 8002558:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800255a:	4b1a      	ldr	r3, [pc, #104]	@ (80025c4 <HAL_SD_MspInit+0x214>)
 800255c:	2204      	movs	r2, #4
 800255e:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002560:	4b18      	ldr	r3, [pc, #96]	@ (80025c4 <HAL_SD_MspInit+0x214>)
 8002562:	2203      	movs	r2, #3
 8002564:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 8002566:	4b17      	ldr	r3, [pc, #92]	@ (80025c4 <HAL_SD_MspInit+0x214>)
 8002568:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800256c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800256e:	4b15      	ldr	r3, [pc, #84]	@ (80025c4 <HAL_SD_MspInit+0x214>)
 8002570:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002574:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 8002576:	4813      	ldr	r0, [pc, #76]	@ (80025c4 <HAL_SD_MspInit+0x214>)
 8002578:	f002 fd88 	bl	800508c <HAL_DMA_Init>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d001      	beq.n	8002586 <HAL_SD_MspInit+0x1d6>
    {
      Error_Handler();
 8002582:	f7ff fdcb 	bl	800211c <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdmmc1_tx);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a0e      	ldr	r2, [pc, #56]	@ (80025c4 <HAL_SD_MspInit+0x214>)
 800258a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800258c:	4a0d      	ldr	r2, [pc, #52]	@ (80025c4 <HAL_SD_MspInit+0x214>)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 1, 0);
 8002592:	2200      	movs	r2, #0
 8002594:	2101      	movs	r1, #1
 8002596:	2031      	movs	r0, #49	@ 0x31
 8002598:	f002 fc4f 	bl	8004e3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 800259c:	2031      	movs	r0, #49	@ 0x31
 800259e:	f002 fc68 	bl	8004e72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 80025a2:	bf00      	nop
 80025a4:	37b0      	adds	r7, #176	@ 0xb0
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	40012c00 	.word	0x40012c00
 80025b0:	40023800 	.word	0x40023800
 80025b4:	40020800 	.word	0x40020800
 80025b8:	40020c00 	.word	0x40020c00
 80025bc:	2002962c 	.word	0x2002962c
 80025c0:	40026458 	.word	0x40026458
 80025c4:	2002968c 	.word	0x2002968c
 80025c8:	400264a0 	.word	0x400264a0

080025cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80025d2:	4b0f      	ldr	r3, [pc, #60]	@ (8002610 <HAL_MspInit+0x44>)
 80025d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025d6:	4a0e      	ldr	r2, [pc, #56]	@ (8002610 <HAL_MspInit+0x44>)
 80025d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80025de:	4b0c      	ldr	r3, [pc, #48]	@ (8002610 <HAL_MspInit+0x44>)
 80025e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025e6:	607b      	str	r3, [r7, #4]
 80025e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ea:	4b09      	ldr	r3, [pc, #36]	@ (8002610 <HAL_MspInit+0x44>)
 80025ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ee:	4a08      	ldr	r2, [pc, #32]	@ (8002610 <HAL_MspInit+0x44>)
 80025f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80025f6:	4b06      	ldr	r3, [pc, #24]	@ (8002610 <HAL_MspInit+0x44>)
 80025f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025fe:	603b      	str	r3, [r7, #0]
 8002600:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002602:	bf00      	nop
 8002604:	370c      	adds	r7, #12
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	40023800 	.word	0x40023800

08002614 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002618:	bf00      	nop
 800261a:	e7fd      	b.n	8002618 <NMI_Handler+0x4>

0800261c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002620:	bf00      	nop
 8002622:	e7fd      	b.n	8002620 <HardFault_Handler+0x4>

08002624 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002628:	bf00      	nop
 800262a:	e7fd      	b.n	8002628 <MemManage_Handler+0x4>

0800262c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002630:	bf00      	nop
 8002632:	e7fd      	b.n	8002630 <BusFault_Handler+0x4>

08002634 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002638:	bf00      	nop
 800263a:	e7fd      	b.n	8002638 <UsageFault_Handler+0x4>

0800263c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002640:	bf00      	nop
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr

0800264a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800264a:	b480      	push	{r7}
 800264c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800264e:	bf00      	nop
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800265c:	bf00      	nop
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr

08002666 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002666:	b580      	push	{r7, lr}
 8002668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800266a:	f002 fac7 	bl	8004bfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800266e:	bf00      	nop
 8002670:	bd80      	pop	{r7, pc}

08002672 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002672:	b580      	push	{r7, lr}
 8002674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 8002676:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800267a:	f003 fc7f 	bl	8005f7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800267e:	bf00      	nop
 8002680:	bd80      	pop	{r7, pc}
	...

08002684 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8002688:	4802      	ldr	r0, [pc, #8]	@ (8002694 <SDMMC1_IRQHandler+0x10>)
 800268a:	f006 fba5 	bl	8008dd8 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800268e:	bf00      	nop
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	200295a8 	.word	0x200295a8

08002698 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 800269c:	4802      	ldr	r0, [pc, #8]	@ (80026a8 <DMA2_Stream1_IRQHandler+0x10>)
 800269e:	f002 fef3 	bl	8005488 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80026a2:	bf00      	nop
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	20029544 	.word	0x20029544

080026ac <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 80026b0:	4802      	ldr	r0, [pc, #8]	@ (80026bc <DMA2_Stream3_IRQHandler+0x10>)
 80026b2:	f002 fee9 	bl	8005488 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80026b6:	bf00      	nop
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	2002962c 	.word	0x2002962c

080026c0 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 80026c4:	4802      	ldr	r0, [pc, #8]	@ (80026d0 <DMA2_Stream6_IRQHandler+0x10>)
 80026c6:	f002 fedf 	bl	8005488 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80026ca:	bf00      	nop
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	2002968c 	.word	0x2002968c

080026d4 <DMA2_Stream7_IRQHandler>:
  * @brief This function handles DMA2 Stream 7 interrupt request.
  * @param None
  * @retval None
  */
void AUDIO_IN_SAIx_DMAx_IRQHandler(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
	//extern SAI_HandleTypeDef haudio_in_sai;
	HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
 80026d8:	4b03      	ldr	r3, [pc, #12]	@ (80026e8 <DMA2_Stream7_IRQHandler+0x14>)
 80026da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026dc:	4618      	mov	r0, r3
 80026de:	f002 fed3 	bl	8005488 <HAL_DMA_IRQHandler>
}
 80026e2:	bf00      	nop
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	2002985c 	.word	0x2002985c

080026ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0
  return 1;
 80026f0:	2301      	movs	r3, #1
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <_kill>:

int _kill(int pid, int sig)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002706:	f012 fa0b 	bl	8014b20 <__errno>
 800270a:	4603      	mov	r3, r0
 800270c:	2216      	movs	r2, #22
 800270e:	601a      	str	r2, [r3, #0]
  return -1;
 8002710:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002714:	4618      	mov	r0, r3
 8002716:	3708      	adds	r7, #8
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}

0800271c <_exit>:

void _exit (int status)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002724:	f04f 31ff 	mov.w	r1, #4294967295
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f7ff ffe7 	bl	80026fc <_kill>
  while (1) {}    /* Make sure we hang here */
 800272e:	bf00      	nop
 8002730:	e7fd      	b.n	800272e <_exit+0x12>

08002732 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002732:	b580      	push	{r7, lr}
 8002734:	b086      	sub	sp, #24
 8002736:	af00      	add	r7, sp, #0
 8002738:	60f8      	str	r0, [r7, #12]
 800273a:	60b9      	str	r1, [r7, #8]
 800273c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800273e:	2300      	movs	r3, #0
 8002740:	617b      	str	r3, [r7, #20]
 8002742:	e00a      	b.n	800275a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002744:	f3af 8000 	nop.w
 8002748:	4601      	mov	r1, r0
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	1c5a      	adds	r2, r3, #1
 800274e:	60ba      	str	r2, [r7, #8]
 8002750:	b2ca      	uxtb	r2, r1
 8002752:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	3301      	adds	r3, #1
 8002758:	617b      	str	r3, [r7, #20]
 800275a:	697a      	ldr	r2, [r7, #20]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	429a      	cmp	r2, r3
 8002760:	dbf0      	blt.n	8002744 <_read+0x12>
  }

  return len;
 8002762:	687b      	ldr	r3, [r7, #4]
}
 8002764:	4618      	mov	r0, r3
 8002766:	3718      	adds	r7, #24
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}

0800276c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b086      	sub	sp, #24
 8002770:	af00      	add	r7, sp, #0
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	60b9      	str	r1, [r7, #8]
 8002776:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002778:	2300      	movs	r3, #0
 800277a:	617b      	str	r3, [r7, #20]
 800277c:	e009      	b.n	8002792 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	1c5a      	adds	r2, r3, #1
 8002782:	60ba      	str	r2, [r7, #8]
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	4618      	mov	r0, r3
 8002788:	f7ff faf8 	bl	8001d7c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	3301      	adds	r3, #1
 8002790:	617b      	str	r3, [r7, #20]
 8002792:	697a      	ldr	r2, [r7, #20]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	429a      	cmp	r2, r3
 8002798:	dbf1      	blt.n	800277e <_write+0x12>
  }
  return len;
 800279a:	687b      	ldr	r3, [r7, #4]
}
 800279c:	4618      	mov	r0, r3
 800279e:	3718      	adds	r7, #24
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <_close>:

int _close(int file)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80027ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	370c      	adds	r7, #12
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr

080027bc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80027cc:	605a      	str	r2, [r3, #4]
  return 0;
 80027ce:	2300      	movs	r3, #0
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <_isatty>:

int _isatty(int file)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80027e4:	2301      	movs	r3, #1
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr

080027f2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80027f2:	b480      	push	{r7}
 80027f4:	b085      	sub	sp, #20
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	60f8      	str	r0, [r7, #12]
 80027fa:	60b9      	str	r1, [r7, #8]
 80027fc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80027fe:	2300      	movs	r3, #0
}
 8002800:	4618      	mov	r0, r3
 8002802:	3714      	adds	r7, #20
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b086      	sub	sp, #24
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002814:	4a14      	ldr	r2, [pc, #80]	@ (8002868 <_sbrk+0x5c>)
 8002816:	4b15      	ldr	r3, [pc, #84]	@ (800286c <_sbrk+0x60>)
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002820:	4b13      	ldr	r3, [pc, #76]	@ (8002870 <_sbrk+0x64>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d102      	bne.n	800282e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002828:	4b11      	ldr	r3, [pc, #68]	@ (8002870 <_sbrk+0x64>)
 800282a:	4a12      	ldr	r2, [pc, #72]	@ (8002874 <_sbrk+0x68>)
 800282c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800282e:	4b10      	ldr	r3, [pc, #64]	@ (8002870 <_sbrk+0x64>)
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4413      	add	r3, r2
 8002836:	693a      	ldr	r2, [r7, #16]
 8002838:	429a      	cmp	r2, r3
 800283a:	d207      	bcs.n	800284c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800283c:	f012 f970 	bl	8014b20 <__errno>
 8002840:	4603      	mov	r3, r0
 8002842:	220c      	movs	r2, #12
 8002844:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002846:	f04f 33ff 	mov.w	r3, #4294967295
 800284a:	e009      	b.n	8002860 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800284c:	4b08      	ldr	r3, [pc, #32]	@ (8002870 <_sbrk+0x64>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002852:	4b07      	ldr	r3, [pc, #28]	@ (8002870 <_sbrk+0x64>)
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4413      	add	r3, r2
 800285a:	4a05      	ldr	r2, [pc, #20]	@ (8002870 <_sbrk+0x64>)
 800285c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800285e:	68fb      	ldr	r3, [r7, #12]
}
 8002860:	4618      	mov	r0, r3
 8002862:	3718      	adds	r7, #24
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	20050000 	.word	0x20050000
 800286c:	00002000 	.word	0x00002000
 8002870:	200296ec 	.word	0x200296ec
 8002874:	2002e8a8 	.word	0x2002e8a8

08002878 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800287c:	4b06      	ldr	r3, [pc, #24]	@ (8002898 <SystemInit+0x20>)
 800287e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002882:	4a05      	ldr	r2, [pc, #20]	@ (8002898 <SystemInit+0x20>)
 8002884:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002888:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800288c:	bf00      	nop
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	e000ed00 	.word	0xe000ed00

0800289c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80028a0:	4b14      	ldr	r3, [pc, #80]	@ (80028f4 <MX_USART1_UART_Init+0x58>)
 80028a2:	4a15      	ldr	r2, [pc, #84]	@ (80028f8 <MX_USART1_UART_Init+0x5c>)
 80028a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80028a6:	4b13      	ldr	r3, [pc, #76]	@ (80028f4 <MX_USART1_UART_Init+0x58>)
 80028a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80028ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80028ae:	4b11      	ldr	r3, [pc, #68]	@ (80028f4 <MX_USART1_UART_Init+0x58>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80028b4:	4b0f      	ldr	r3, [pc, #60]	@ (80028f4 <MX_USART1_UART_Init+0x58>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80028ba:	4b0e      	ldr	r3, [pc, #56]	@ (80028f4 <MX_USART1_UART_Init+0x58>)
 80028bc:	2200      	movs	r2, #0
 80028be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80028c0:	4b0c      	ldr	r3, [pc, #48]	@ (80028f4 <MX_USART1_UART_Init+0x58>)
 80028c2:	220c      	movs	r2, #12
 80028c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028c6:	4b0b      	ldr	r3, [pc, #44]	@ (80028f4 <MX_USART1_UART_Init+0x58>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80028cc:	4b09      	ldr	r3, [pc, #36]	@ (80028f4 <MX_USART1_UART_Init+0x58>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80028d2:	4b08      	ldr	r3, [pc, #32]	@ (80028f4 <MX_USART1_UART_Init+0x58>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80028d8:	4b06      	ldr	r3, [pc, #24]	@ (80028f4 <MX_USART1_UART_Init+0x58>)
 80028da:	2200      	movs	r2, #0
 80028dc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80028de:	4805      	ldr	r0, [pc, #20]	@ (80028f4 <MX_USART1_UART_Init+0x58>)
 80028e0:	f007 f922 	bl	8009b28 <HAL_UART_Init>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d001      	beq.n	80028ee <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80028ea:	f7ff fc17 	bl	800211c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80028ee:	bf00      	nop
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	200296f0 	.word	0x200296f0
 80028f8:	40011000 	.word	0x40011000

080028fc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b0ac      	sub	sp, #176	@ 0xb0
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002904:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002908:	2200      	movs	r2, #0
 800290a:	601a      	str	r2, [r3, #0]
 800290c:	605a      	str	r2, [r3, #4]
 800290e:	609a      	str	r2, [r3, #8]
 8002910:	60da      	str	r2, [r3, #12]
 8002912:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002914:	f107 0318 	add.w	r3, r7, #24
 8002918:	2284      	movs	r2, #132	@ 0x84
 800291a:	2100      	movs	r1, #0
 800291c:	4618      	mov	r0, r3
 800291e:	f012 f89d 	bl	8014a5c <memset>
  if(uartHandle->Instance==USART1)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a32      	ldr	r2, [pc, #200]	@ (80029f0 <HAL_UART_MspInit+0xf4>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d15c      	bne.n	80029e6 <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800292c:	2340      	movs	r3, #64	@ 0x40
 800292e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002930:	2300      	movs	r3, #0
 8002932:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002934:	f107 0318 	add.w	r3, r7, #24
 8002938:	4618      	mov	r0, r3
 800293a:	f004 fdef 	bl	800751c <HAL_RCCEx_PeriphCLKConfig>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d001      	beq.n	8002948 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002944:	f7ff fbea 	bl	800211c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002948:	4b2a      	ldr	r3, [pc, #168]	@ (80029f4 <HAL_UART_MspInit+0xf8>)
 800294a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800294c:	4a29      	ldr	r2, [pc, #164]	@ (80029f4 <HAL_UART_MspInit+0xf8>)
 800294e:	f043 0310 	orr.w	r3, r3, #16
 8002952:	6453      	str	r3, [r2, #68]	@ 0x44
 8002954:	4b27      	ldr	r3, [pc, #156]	@ (80029f4 <HAL_UART_MspInit+0xf8>)
 8002956:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002958:	f003 0310 	and.w	r3, r3, #16
 800295c:	617b      	str	r3, [r7, #20]
 800295e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002960:	4b24      	ldr	r3, [pc, #144]	@ (80029f4 <HAL_UART_MspInit+0xf8>)
 8002962:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002964:	4a23      	ldr	r2, [pc, #140]	@ (80029f4 <HAL_UART_MspInit+0xf8>)
 8002966:	f043 0302 	orr.w	r3, r3, #2
 800296a:	6313      	str	r3, [r2, #48]	@ 0x30
 800296c:	4b21      	ldr	r3, [pc, #132]	@ (80029f4 <HAL_UART_MspInit+0xf8>)
 800296e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002970:	f003 0302 	and.w	r3, r3, #2
 8002974:	613b      	str	r3, [r7, #16]
 8002976:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002978:	4b1e      	ldr	r3, [pc, #120]	@ (80029f4 <HAL_UART_MspInit+0xf8>)
 800297a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800297c:	4a1d      	ldr	r2, [pc, #116]	@ (80029f4 <HAL_UART_MspInit+0xf8>)
 800297e:	f043 0301 	orr.w	r3, r3, #1
 8002982:	6313      	str	r3, [r2, #48]	@ 0x30
 8002984:	4b1b      	ldr	r3, [pc, #108]	@ (80029f4 <HAL_UART_MspInit+0xf8>)
 8002986:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002988:	f003 0301 	and.w	r3, r3, #1
 800298c:	60fb      	str	r3, [r7, #12]
 800298e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002990:	2380      	movs	r3, #128	@ 0x80
 8002992:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002996:	2302      	movs	r3, #2
 8002998:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800299c:	2300      	movs	r3, #0
 800299e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029a2:	2303      	movs	r3, #3
 80029a4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80029a8:	2307      	movs	r3, #7
 80029aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029ae:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80029b2:	4619      	mov	r1, r3
 80029b4:	4810      	ldr	r0, [pc, #64]	@ (80029f8 <HAL_UART_MspInit+0xfc>)
 80029b6:	f002 ffdd 	bl	8005974 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80029ba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80029be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c2:	2302      	movs	r3, #2
 80029c4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c8:	2300      	movs	r3, #0
 80029ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029ce:	2303      	movs	r3, #3
 80029d0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80029d4:	2307      	movs	r3, #7
 80029d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029da:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80029de:	4619      	mov	r1, r3
 80029e0:	4806      	ldr	r0, [pc, #24]	@ (80029fc <HAL_UART_MspInit+0x100>)
 80029e2:	f002 ffc7 	bl	8005974 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80029e6:	bf00      	nop
 80029e8:	37b0      	adds	r7, #176	@ 0xb0
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	40011000 	.word	0x40011000
 80029f4:	40023800 	.word	0x40023800
 80029f8:	40020400 	.word	0x40020400
 80029fc:	40020000 	.word	0x40020000

08002a00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002a00:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002a38 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002a04:	f7ff ff38 	bl	8002878 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a08:	480c      	ldr	r0, [pc, #48]	@ (8002a3c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002a0a:	490d      	ldr	r1, [pc, #52]	@ (8002a40 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002a0c:	4a0d      	ldr	r2, [pc, #52]	@ (8002a44 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002a0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a10:	e002      	b.n	8002a18 <LoopCopyDataInit>

08002a12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a16:	3304      	adds	r3, #4

08002a18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a1c:	d3f9      	bcc.n	8002a12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a1e:	4a0a      	ldr	r2, [pc, #40]	@ (8002a48 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002a20:	4c0a      	ldr	r4, [pc, #40]	@ (8002a4c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002a22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a24:	e001      	b.n	8002a2a <LoopFillZerobss>

08002a26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a28:	3204      	adds	r2, #4

08002a2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a2c:	d3fb      	bcc.n	8002a26 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002a2e:	f012 f87d 	bl	8014b2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a32:	f7fe fdaf 	bl	8001594 <main>
  bx  lr    
 8002a36:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002a38:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002a3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a40:	200009e4 	.word	0x200009e4
  ldr r2, =_sidata
 8002a44:	080d5060 	.word	0x080d5060
  ldr r2, =_sbss
 8002a48:	200009e4 	.word	0x200009e4
  ldr r4, =_ebss
 8002a4c:	2002e8a4 	.word	0x2002e8a4

08002a50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a50:	e7fe      	b.n	8002a50 <ADC_IRQHandler>
	...

08002a54 <wm8994_Init>:
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param AudioFreq: Audio Frequency 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Init(uint16_t DeviceAddr, uint16_t OutputInputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b088      	sub	sp, #32
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	607b      	str	r3, [r7, #4]
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	81fb      	strh	r3, [r7, #14]
 8002a60:	460b      	mov	r3, r1
 8002a62:	81bb      	strh	r3, [r7, #12]
 8002a64:	4613      	mov	r3, r2
 8002a66:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	61fb      	str	r3, [r7, #28]
  uint16_t output_device = OutputInputDevice & 0xFF;
 8002a6c:	89bb      	ldrh	r3, [r7, #12]
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	833b      	strh	r3, [r7, #24]
  uint16_t input_device = OutputInputDevice & 0xFF00;
 8002a72:	89bb      	ldrh	r3, [r7, #12]
 8002a74:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002a78:	82fb      	strh	r3, [r7, #22]
  uint16_t power_mgnt_reg_1 = 0;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	837b      	strh	r3, [r7, #26]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 8002a7e:	f001 fc71 	bl	8004364 <AUDIO_IO_Init>
  /* wm8994 Errata Work-Arounds */
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 8002a82:	89fb      	ldrh	r3, [r7, #14]
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	2203      	movs	r2, #3
 8002a88:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f001 fafb 	bl	8004088 <CODEC_IO_Write>
 8002a92:	4603      	mov	r3, r0
 8002a94:	461a      	mov	r2, r3
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	4413      	add	r3, r2
 8002a9a:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x817, 0x0000);
 8002a9c:	89fb      	ldrh	r3, [r7, #14]
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f640 0117 	movw	r1, #2071	@ 0x817
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f001 faee 	bl	8004088 <CODEC_IO_Write>
 8002aac:	4603      	mov	r3, r0
 8002aae:	461a      	mov	r2, r3
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	4413      	add	r3, r2
 8002ab4:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0000);
 8002ab6:	89fb      	ldrh	r3, [r7, #14]
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	2200      	movs	r2, #0
 8002abc:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f001 fae1 	bl	8004088 <CODEC_IO_Write>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	461a      	mov	r2, r3
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	4413      	add	r3, r2
 8002ace:	61fb      	str	r3, [r7, #28]

  /* Enable VMID soft start (fast), Start-up Bias Current Enabled */
  counter += CODEC_IO_Write(DeviceAddr, 0x39, 0x006C);
 8002ad0:	89fb      	ldrh	r3, [r7, #14]
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	226c      	movs	r2, #108	@ 0x6c
 8002ad6:	2139      	movs	r1, #57	@ 0x39
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f001 fad5 	bl	8004088 <CODEC_IO_Write>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	4413      	add	r3, r2
 8002ae6:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID */
  if (input_device > 0)
 8002ae8:	8afb      	ldrh	r3, [r7, #22]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d00c      	beq.n	8002b08 <wm8994_Init+0xb4>
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0013);
 8002aee:	89fb      	ldrh	r3, [r7, #14]
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	2213      	movs	r2, #19
 8002af4:	2101      	movs	r1, #1
 8002af6:	4618      	mov	r0, r3
 8002af8:	f001 fac6 	bl	8004088 <CODEC_IO_Write>
 8002afc:	4603      	mov	r3, r0
 8002afe:	461a      	mov	r2, r3
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	4413      	add	r3, r2
 8002b04:	61fb      	str	r3, [r7, #28]
 8002b06:	e00b      	b.n	8002b20 <wm8994_Init+0xcc>
  }
  else
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0003);
 8002b08:	89fb      	ldrh	r3, [r7, #14]
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	2203      	movs	r2, #3
 8002b0e:	2101      	movs	r1, #1
 8002b10:	4618      	mov	r0, r3
 8002b12:	f001 fab9 	bl	8004088 <CODEC_IO_Write>
 8002b16:	4603      	mov	r3, r0
 8002b18:	461a      	mov	r2, r3
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	4413      	add	r3, r2
 8002b1e:	61fb      	str	r3, [r7, #28]
  }

  /* Add Delay */
  AUDIO_IO_Delay(50);
 8002b20:	2032      	movs	r0, #50	@ 0x32
 8002b22:	f001 fc87 	bl	8004434 <AUDIO_IO_Delay>

  /* Path Configurations for output */
  if (output_device > 0)
 8002b26:	8b3b      	ldrh	r3, [r7, #24]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	f000 815f 	beq.w	8002dec <wm8994_Init+0x398>
  {
    outputEnabled = 1;
 8002b2e:	4bae      	ldr	r3, [pc, #696]	@ (8002de8 <wm8994_Init+0x394>)
 8002b30:	2201      	movs	r2, #1
 8002b32:	601a      	str	r2, [r3, #0]

    switch (output_device)
 8002b34:	8b3b      	ldrh	r3, [r7, #24]
 8002b36:	2b03      	cmp	r3, #3
 8002b38:	f000 808c 	beq.w	8002c54 <wm8994_Init+0x200>
 8002b3c:	2b03      	cmp	r3, #3
 8002b3e:	f300 8111 	bgt.w	8002d64 <wm8994_Init+0x310>
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d002      	beq.n	8002b4c <wm8994_Init+0xf8>
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d042      	beq.n	8002bd0 <wm8994_Init+0x17c>
 8002b4a:	e10b      	b.n	8002d64 <wm8994_Init+0x310>
    {
    case OUTPUT_DEVICE_SPEAKER:
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8002b4c:	89fb      	ldrh	r3, [r7, #14]
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	f640 420c 	movw	r2, #3084	@ 0xc0c
 8002b54:	2105      	movs	r1, #5
 8002b56:	4618      	mov	r0, r3
 8002b58:	f001 fa96 	bl	8004088 <CODEC_IO_Write>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	461a      	mov	r2, r3
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	4413      	add	r3, r2
 8002b64:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8002b66:	89fb      	ldrh	r3, [r7, #14]
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f240 6101 	movw	r1, #1537	@ 0x601
 8002b70:	4618      	mov	r0, r3
 8002b72:	f001 fa89 	bl	8004088 <CODEC_IO_Write>
 8002b76:	4603      	mov	r3, r0
 8002b78:	461a      	mov	r2, r3
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	4413      	add	r3, r2
 8002b7e:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8002b80:	89fb      	ldrh	r3, [r7, #14]
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	2200      	movs	r2, #0
 8002b86:	f240 6102 	movw	r1, #1538	@ 0x602
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f001 fa7c 	bl	8004088 <CODEC_IO_Write>
 8002b90:	4603      	mov	r3, r0
 8002b92:	461a      	mov	r2, r3
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	4413      	add	r3, r2
 8002b98:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8002b9a:	89fb      	ldrh	r3, [r7, #14]
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	2202      	movs	r2, #2
 8002ba0:	f240 6104 	movw	r1, #1540	@ 0x604
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f001 fa6f 	bl	8004088 <CODEC_IO_Write>
 8002baa:	4603      	mov	r3, r0
 8002bac:	461a      	mov	r2, r3
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	4413      	add	r3, r2
 8002bb2:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8002bb4:	89fb      	ldrh	r3, [r7, #14]
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	2202      	movs	r2, #2
 8002bba:	f240 6105 	movw	r1, #1541	@ 0x605
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f001 fa62 	bl	8004088 <CODEC_IO_Write>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	4413      	add	r3, r2
 8002bcc:	61fb      	str	r3, [r7, #28]
      break;
 8002bce:	e110      	b.n	8002df2 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_HEADPHONE:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8002bd0:	89fb      	ldrh	r3, [r7, #14]
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	f240 3203 	movw	r2, #771	@ 0x303
 8002bd8:	2105      	movs	r1, #5
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f001 fa54 	bl	8004088 <CODEC_IO_Write>
 8002be0:	4603      	mov	r3, r0
 8002be2:	461a      	mov	r2, r3
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	4413      	add	r3, r2
 8002be8:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8002bea:	89fb      	ldrh	r3, [r7, #14]
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f240 6101 	movw	r1, #1537	@ 0x601
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f001 fa47 	bl	8004088 <CODEC_IO_Write>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	4413      	add	r3, r2
 8002c02:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8002c04:	89fb      	ldrh	r3, [r7, #14]
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	2201      	movs	r2, #1
 8002c0a:	f240 6102 	movw	r1, #1538	@ 0x602
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f001 fa3a 	bl	8004088 <CODEC_IO_Write>
 8002c14:	4603      	mov	r3, r0
 8002c16:	461a      	mov	r2, r3
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	4413      	add	r3, r2
 8002c1c:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8002c1e:	89fb      	ldrh	r3, [r7, #14]
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	2200      	movs	r2, #0
 8002c24:	f240 6104 	movw	r1, #1540	@ 0x604
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f001 fa2d 	bl	8004088 <CODEC_IO_Write>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	461a      	mov	r2, r3
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	4413      	add	r3, r2
 8002c36:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8002c38:	89fb      	ldrh	r3, [r7, #14]
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f240 6105 	movw	r1, #1541	@ 0x605
 8002c42:	4618      	mov	r0, r3
 8002c44:	f001 fa20 	bl	8004088 <CODEC_IO_Write>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	4413      	add	r3, r2
 8002c50:	61fb      	str	r3, [r7, #28]
      break;
 8002c52:	e0ce      	b.n	8002df2 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_BOTH:
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8002c54:	8afb      	ldrh	r3, [r7, #22]
 8002c56:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002c5a:	d141      	bne.n	8002ce0 <wm8994_Init+0x28c>
      {
        /* Enable DAC1 (Left), Enable DAC1 (Right),
        also Enable DAC2 (Left), Enable DAC2 (Right)*/
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8002c5c:	89fb      	ldrh	r3, [r7, #14]
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	f640 720f 	movw	r2, #3855	@ 0xf0f
 8002c64:	2105      	movs	r1, #5
 8002c66:	4618      	mov	r0, r3
 8002c68:	f001 fa0e 	bl	8004088 <CODEC_IO_Write>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	461a      	mov	r2, r3
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	4413      	add	r3, r2
 8002c74:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0003);
 8002c76:	89fb      	ldrh	r3, [r7, #14]
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	2203      	movs	r2, #3
 8002c7c:	f240 6101 	movw	r1, #1537	@ 0x601
 8002c80:	4618      	mov	r0, r3
 8002c82:	f001 fa01 	bl	8004088 <CODEC_IO_Write>
 8002c86:	4603      	mov	r3, r0
 8002c88:	461a      	mov	r2, r3
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	4413      	add	r3, r2
 8002c8e:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0003);
 8002c90:	89fb      	ldrh	r3, [r7, #14]
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	2203      	movs	r2, #3
 8002c96:	f240 6102 	movw	r1, #1538	@ 0x602
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f001 f9f4 	bl	8004088 <CODEC_IO_Write>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	4413      	add	r3, r2
 8002ca8:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0003);
 8002caa:	89fb      	ldrh	r3, [r7, #14]
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	2203      	movs	r2, #3
 8002cb0:	f240 6104 	movw	r1, #1540	@ 0x604
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f001 f9e7 	bl	8004088 <CODEC_IO_Write>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	4413      	add	r3, r2
 8002cc2:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0003);
 8002cc4:	89fb      	ldrh	r3, [r7, #14]
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	2203      	movs	r2, #3
 8002cca:	f240 6105 	movw	r1, #1541	@ 0x605
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f001 f9da 	bl	8004088 <CODEC_IO_Write>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	4413      	add	r3, r2
 8002cdc:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
        
        /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
      }
      break;
 8002cde:	e088      	b.n	8002df2 <wm8994_Init+0x39e>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8002ce0:	89fb      	ldrh	r3, [r7, #14]
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	f640 720f 	movw	r2, #3855	@ 0xf0f
 8002ce8:	2105      	movs	r1, #5
 8002cea:	4618      	mov	r0, r3
 8002cec:	f001 f9cc 	bl	8004088 <CODEC_IO_Write>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	4413      	add	r3, r2
 8002cf8:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8002cfa:	89fb      	ldrh	r3, [r7, #14]
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f240 6101 	movw	r1, #1537	@ 0x601
 8002d04:	4618      	mov	r0, r3
 8002d06:	f001 f9bf 	bl	8004088 <CODEC_IO_Write>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	4413      	add	r3, r2
 8002d12:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8002d14:	89fb      	ldrh	r3, [r7, #14]
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	2201      	movs	r2, #1
 8002d1a:	f240 6102 	movw	r1, #1538	@ 0x602
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f001 f9b2 	bl	8004088 <CODEC_IO_Write>
 8002d24:	4603      	mov	r3, r0
 8002d26:	461a      	mov	r2, r3
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8002d2e:	89fb      	ldrh	r3, [r7, #14]
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	2202      	movs	r2, #2
 8002d34:	f240 6104 	movw	r1, #1540	@ 0x604
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f001 f9a5 	bl	8004088 <CODEC_IO_Write>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	461a      	mov	r2, r3
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	4413      	add	r3, r2
 8002d46:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
 8002d48:	89fb      	ldrh	r3, [r7, #14]
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	2202      	movs	r2, #2
 8002d4e:	f240 6105 	movw	r1, #1541	@ 0x605
 8002d52:	4618      	mov	r0, r3
 8002d54:	f001 f998 	bl	8004088 <CODEC_IO_Write>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	4413      	add	r3, r2
 8002d60:	61fb      	str	r3, [r7, #28]
      break;
 8002d62:	e046      	b.n	8002df2 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_AUTO :
    default:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8002d64:	89fb      	ldrh	r3, [r7, #14]
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	f240 3203 	movw	r2, #771	@ 0x303
 8002d6c:	2105      	movs	r1, #5
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f001 f98a 	bl	8004088 <CODEC_IO_Write>
 8002d74:	4603      	mov	r3, r0
 8002d76:	461a      	mov	r2, r3
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8002d7e:	89fb      	ldrh	r3, [r7, #14]
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	2201      	movs	r2, #1
 8002d84:	f240 6101 	movw	r1, #1537	@ 0x601
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f001 f97d 	bl	8004088 <CODEC_IO_Write>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	461a      	mov	r2, r3
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	4413      	add	r3, r2
 8002d96:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8002d98:	89fb      	ldrh	r3, [r7, #14]
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	f240 6102 	movw	r1, #1538	@ 0x602
 8002da2:	4618      	mov	r0, r3
 8002da4:	f001 f970 	bl	8004088 <CODEC_IO_Write>
 8002da8:	4603      	mov	r3, r0
 8002daa:	461a      	mov	r2, r3
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	4413      	add	r3, r2
 8002db0:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8002db2:	89fb      	ldrh	r3, [r7, #14]
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	2200      	movs	r2, #0
 8002db8:	f240 6104 	movw	r1, #1540	@ 0x604
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f001 f963 	bl	8004088 <CODEC_IO_Write>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	4413      	add	r3, r2
 8002dca:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8002dcc:	89fb      	ldrh	r3, [r7, #14]
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f240 6105 	movw	r1, #1541	@ 0x605
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f001 f956 	bl	8004088 <CODEC_IO_Write>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	461a      	mov	r2, r3
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	4413      	add	r3, r2
 8002de4:	61fb      	str	r3, [r7, #28]
      break;
 8002de6:	e004      	b.n	8002df2 <wm8994_Init+0x39e>
 8002de8:	20029778 	.word	0x20029778
    }
  }
  else
  {
    outputEnabled = 0;
 8002dec:	4b99      	ldr	r3, [pc, #612]	@ (8003054 <wm8994_Init+0x600>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	601a      	str	r2, [r3, #0]
  }

  /* Path Configurations for input */
  if (input_device > 0)
 8002df2:	8afb      	ldrh	r3, [r7, #22]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	f000 81ab 	beq.w	8003150 <wm8994_Init+0x6fc>
  {
    inputEnabled = 1;
 8002dfa:	4b97      	ldr	r3, [pc, #604]	@ (8003058 <wm8994_Init+0x604>)
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	601a      	str	r2, [r3, #0]
    switch (input_device)
 8002e00:	8afb      	ldrh	r3, [r7, #22]
 8002e02:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e06:	f000 8129 	beq.w	800305c <wm8994_Init+0x608>
 8002e0a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e0e:	f300 819b 	bgt.w	8003148 <wm8994_Init+0x6f4>
 8002e12:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002e16:	d05a      	beq.n	8002ece <wm8994_Init+0x47a>
 8002e18:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002e1c:	f300 8194 	bgt.w	8003148 <wm8994_Init+0x6f4>
 8002e20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e24:	f000 80c6 	beq.w	8002fb4 <wm8994_Init+0x560>
 8002e28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e2c:	f040 818c 	bne.w	8003148 <wm8994_Init+0x6f4>
    {
    case INPUT_DEVICE_DIGITAL_MICROPHONE_2 :
      /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
       * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0C30);
 8002e30:	89fb      	ldrh	r3, [r7, #14]
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	f44f 6243 	mov.w	r2, #3120	@ 0xc30
 8002e38:	2104      	movs	r1, #4
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f001 f924 	bl	8004088 <CODEC_IO_Write>
 8002e40:	4603      	mov	r3, r0
 8002e42:	461a      	mov	r2, r3
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	4413      	add	r3, r2
 8002e48:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8002e4a:	89fb      	ldrh	r3, [r7, #14]
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	22db      	movs	r2, #219	@ 0xdb
 8002e50:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 8002e54:	4618      	mov	r0, r3
 8002e56:	f001 f917 	bl	8004088 <CODEC_IO_Write>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	4413      	add	r3, r2
 8002e62:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6000);
 8002e64:	89fb      	ldrh	r3, [r7, #14]
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	f44f 42c0 	mov.w	r2, #24576	@ 0x6000
 8002e6c:	2102      	movs	r1, #2
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f001 f90a 	bl	8004088 <CODEC_IO_Write>
 8002e74:	4603      	mov	r3, r0
 8002e76:	461a      	mov	r2, r3
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	4413      	add	r3, r2
 8002e7c:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8002e7e:	89fb      	ldrh	r3, [r7, #14]
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	2202      	movs	r2, #2
 8002e84:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f001 f8fd 	bl	8004088 <CODEC_IO_Write>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	461a      	mov	r2, r3
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	4413      	add	r3, r2
 8002e96:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8002e98:	89fb      	ldrh	r3, [r7, #14]
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	2202      	movs	r2, #2
 8002e9e:	f240 6109 	movw	r1, #1545	@ 0x609
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f001 f8f0 	bl	8004088 <CODEC_IO_Write>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	461a      	mov	r2, r3
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	4413      	add	r3, r2
 8002eb0:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000E);
 8002eb2:	89fb      	ldrh	r3, [r7, #14]
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	220e      	movs	r2, #14
 8002eb8:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f001 f8e3 	bl	8004088 <CODEC_IO_Write>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	4413      	add	r3, r2
 8002eca:	61fb      	str	r3, [r7, #28]
      break;
 8002ecc:	e143      	b.n	8003156 <wm8994_Init+0x702>

    case INPUT_DEVICE_INPUT_LINE_1 :
      /* IN1LN_TO_IN1L, IN1LP_TO_VMID, IN1RN_TO_IN1R, IN1RP_TO_VMID */
      counter += CODEC_IO_Write(DeviceAddr, 0x28, 0x0011);
 8002ece:	89fb      	ldrh	r3, [r7, #14]
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2211      	movs	r2, #17
 8002ed4:	2128      	movs	r1, #40	@ 0x28
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f001 f8d6 	bl	8004088 <CODEC_IO_Write>
 8002edc:	4603      	mov	r3, r0
 8002ede:	461a      	mov	r2, r3
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	4413      	add	r3, r2
 8002ee4:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1L_TO_MIXINL and +30dB on IN1L PGA output */
      counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0035);
 8002ee6:	89fb      	ldrh	r3, [r7, #14]
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	2235      	movs	r2, #53	@ 0x35
 8002eec:	2129      	movs	r1, #41	@ 0x29
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f001 f8ca 	bl	8004088 <CODEC_IO_Write>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	4413      	add	r3, r2
 8002efc:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R_TO_MIXINL, Gain = +30dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0035);
 8002efe:	89fb      	ldrh	r3, [r7, #14]
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	2235      	movs	r2, #53	@ 0x35
 8002f04:	212a      	movs	r1, #42	@ 0x2a
 8002f06:	4618      	mov	r0, r3
 8002f08:	f001 f8be 	bl	8004088 <CODEC_IO_Write>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	461a      	mov	r2, r3
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	4413      	add	r3, r2
 8002f14:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0303);
 8002f16:	89fb      	ldrh	r3, [r7, #14]
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	f240 3203 	movw	r2, #771	@ 0x303
 8002f1e:	2104      	movs	r1, #4
 8002f20:	4618      	mov	r0, r3
 8002f22:	f001 f8b1 	bl	8004088 <CODEC_IO_Write>
 8002f26:	4603      	mov	r3, r0
 8002f28:	461a      	mov	r2, r3
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	4413      	add	r3, r2
 8002f2e:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8002f30:	89fb      	ldrh	r3, [r7, #14]
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	22db      	movs	r2, #219	@ 0xdb
 8002f36:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f001 f8a4 	bl	8004088 <CODEC_IO_Write>
 8002f40:	4603      	mov	r3, r0
 8002f42:	461a      	mov	r2, r3
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	4413      	add	r3, r2
 8002f48:	61fb      	str	r3, [r7, #28]

      /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8002f4a:	89fb      	ldrh	r3, [r7, #14]
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	f246 3250 	movw	r2, #25424	@ 0x6350
 8002f52:	2102      	movs	r1, #2
 8002f54:	4618      	mov	r0, r3
 8002f56:	f001 f897 	bl	8004088 <CODEC_IO_Write>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	4413      	add	r3, r2
 8002f62:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8002f64:	89fb      	ldrh	r3, [r7, #14]
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	2202      	movs	r2, #2
 8002f6a:	f240 6106 	movw	r1, #1542	@ 0x606
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f001 f88a 	bl	8004088 <CODEC_IO_Write>
 8002f74:	4603      	mov	r3, r0
 8002f76:	461a      	mov	r2, r3
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	4413      	add	r3, r2
 8002f7c:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8002f7e:	89fb      	ldrh	r3, [r7, #14]
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2202      	movs	r2, #2
 8002f84:	f240 6107 	movw	r1, #1543	@ 0x607
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f001 f87d 	bl	8004088 <CODEC_IO_Write>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	461a      	mov	r2, r3
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	4413      	add	r3, r2
 8002f96:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8002f98:	89fb      	ldrh	r3, [r7, #14]
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	220d      	movs	r2, #13
 8002f9e:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f001 f870 	bl	8004088 <CODEC_IO_Write>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	461a      	mov	r2, r3
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	4413      	add	r3, r2
 8002fb0:	61fb      	str	r3, [r7, #28]
      break;
 8002fb2:	e0d0      	b.n	8003156 <wm8994_Init+0x702>

    case INPUT_DEVICE_DIGITAL_MICROPHONE_1 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x030C);
 8002fb4:	89fb      	ldrh	r3, [r7, #14]
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	f44f 7243 	mov.w	r2, #780	@ 0x30c
 8002fbc:	2104      	movs	r1, #4
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f001 f862 	bl	8004088 <CODEC_IO_Write>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	4413      	add	r3, r2
 8002fcc:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8002fce:	89fb      	ldrh	r3, [r7, #14]
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	22db      	movs	r2, #219	@ 0xdb
 8002fd4:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f001 f855 	bl	8004088 <CODEC_IO_Write>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	4413      	add	r3, r2
 8002fe6:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8002fe8:	89fb      	ldrh	r3, [r7, #14]
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	f246 3250 	movw	r2, #25424	@ 0x6350
 8002ff0:	2102      	movs	r1, #2
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f001 f848 	bl	8004088 <CODEC_IO_Write>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	4413      	add	r3, r2
 8003000:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8003002:	89fb      	ldrh	r3, [r7, #14]
 8003004:	b2db      	uxtb	r3, r3
 8003006:	2202      	movs	r2, #2
 8003008:	f240 6106 	movw	r1, #1542	@ 0x606
 800300c:	4618      	mov	r0, r3
 800300e:	f001 f83b 	bl	8004088 <CODEC_IO_Write>
 8003012:	4603      	mov	r3, r0
 8003014:	461a      	mov	r2, r3
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	4413      	add	r3, r2
 800301a:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 800301c:	89fb      	ldrh	r3, [r7, #14]
 800301e:	b2db      	uxtb	r3, r3
 8003020:	2202      	movs	r2, #2
 8003022:	f240 6107 	movw	r1, #1543	@ 0x607
 8003026:	4618      	mov	r0, r3
 8003028:	f001 f82e 	bl	8004088 <CODEC_IO_Write>
 800302c:	4603      	mov	r3, r0
 800302e:	461a      	mov	r2, r3
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	4413      	add	r3, r2
 8003034:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8003036:	89fb      	ldrh	r3, [r7, #14]
 8003038:	b2db      	uxtb	r3, r3
 800303a:	220d      	movs	r2, #13
 800303c:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8003040:	4618      	mov	r0, r3
 8003042:	f001 f821 	bl	8004088 <CODEC_IO_Write>
 8003046:	4603      	mov	r3, r0
 8003048:	461a      	mov	r2, r3
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	4413      	add	r3, r2
 800304e:	61fb      	str	r3, [r7, #28]
      break; 
 8003050:	e081      	b.n	8003156 <wm8994_Init+0x702>
 8003052:	bf00      	nop
 8003054:	20029778 	.word	0x20029778
 8003058:	2002977c 	.word	0x2002977c
    case INPUT_DEVICE_DIGITAL_MIC1_MIC2 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0F3C);
 800305c:	89fb      	ldrh	r3, [r7, #14]
 800305e:	b2db      	uxtb	r3, r3
 8003060:	f640 723c 	movw	r2, #3900	@ 0xf3c
 8003064:	2104      	movs	r1, #4
 8003066:	4618      	mov	r0, r3
 8003068:	f001 f80e 	bl	8004088 <CODEC_IO_Write>
 800306c:	4603      	mov	r3, r0
 800306e:	461a      	mov	r2, r3
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	4413      	add	r3, r2
 8003074:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8003076:	89fb      	ldrh	r3, [r7, #14]
 8003078:	b2db      	uxtb	r3, r3
 800307a:	22db      	movs	r2, #219	@ 0xdb
 800307c:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 8003080:	4618      	mov	r0, r3
 8003082:	f001 f801 	bl	8004088 <CODEC_IO_Write>
 8003086:	4603      	mov	r3, r0
 8003088:	461a      	mov	r2, r3
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	4413      	add	r3, r2
 800308e:	61fb      	str	r3, [r7, #28]
      
      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8003090:	89fb      	ldrh	r3, [r7, #14]
 8003092:	b2db      	uxtb	r3, r3
 8003094:	22db      	movs	r2, #219	@ 0xdb
 8003096:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 800309a:	4618      	mov	r0, r3
 800309c:	f000 fff4 	bl	8004088 <CODEC_IO_Write>
 80030a0:	4603      	mov	r3, r0
 80030a2:	461a      	mov	r2, r3
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	4413      	add	r3, r2
 80030a8:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x63A0);
 80030aa:	89fb      	ldrh	r3, [r7, #14]
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	f246 32a0 	movw	r2, #25504	@ 0x63a0
 80030b2:	2102      	movs	r1, #2
 80030b4:	4618      	mov	r0, r3
 80030b6:	f000 ffe7 	bl	8004088 <CODEC_IO_Write>
 80030ba:	4603      	mov	r3, r0
 80030bc:	461a      	mov	r2, r3
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	4413      	add	r3, r2
 80030c2:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 80030c4:	89fb      	ldrh	r3, [r7, #14]
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	2202      	movs	r2, #2
 80030ca:	f240 6106 	movw	r1, #1542	@ 0x606
 80030ce:	4618      	mov	r0, r3
 80030d0:	f000 ffda 	bl	8004088 <CODEC_IO_Write>
 80030d4:	4603      	mov	r3, r0
 80030d6:	461a      	mov	r2, r3
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	4413      	add	r3, r2
 80030dc:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 80030de:	89fb      	ldrh	r3, [r7, #14]
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	2202      	movs	r2, #2
 80030e4:	f240 6107 	movw	r1, #1543	@ 0x607
 80030e8:	4618      	mov	r0, r3
 80030ea:	f000 ffcd 	bl	8004088 <CODEC_IO_Write>
 80030ee:	4603      	mov	r3, r0
 80030f0:	461a      	mov	r2, r3
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	4413      	add	r3, r2
 80030f6:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 80030f8:	89fb      	ldrh	r3, [r7, #14]
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	2202      	movs	r2, #2
 80030fe:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 8003102:	4618      	mov	r0, r3
 8003104:	f000 ffc0 	bl	8004088 <CODEC_IO_Write>
 8003108:	4603      	mov	r3, r0
 800310a:	461a      	mov	r2, r3
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	4413      	add	r3, r2
 8003110:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8003112:	89fb      	ldrh	r3, [r7, #14]
 8003114:	b2db      	uxtb	r3, r3
 8003116:	2202      	movs	r2, #2
 8003118:	f240 6109 	movw	r1, #1545	@ 0x609
 800311c:	4618      	mov	r0, r3
 800311e:	f000 ffb3 	bl	8004088 <CODEC_IO_Write>
 8003122:	4603      	mov	r3, r0
 8003124:	461a      	mov	r2, r3
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	4413      	add	r3, r2
 800312a:	61fb      	str	r3, [r7, #28]
      
      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 800312c:	89fb      	ldrh	r3, [r7, #14]
 800312e:	b2db      	uxtb	r3, r3
 8003130:	220d      	movs	r2, #13
 8003132:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8003136:	4618      	mov	r0, r3
 8003138:	f000 ffa6 	bl	8004088 <CODEC_IO_Write>
 800313c:	4603      	mov	r3, r0
 800313e:	461a      	mov	r2, r3
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	4413      	add	r3, r2
 8003144:	61fb      	str	r3, [r7, #28]
      break;    
 8003146:	e006      	b.n	8003156 <wm8994_Init+0x702>
    case INPUT_DEVICE_INPUT_LINE_2 :
    default:
      /* Actually, no other input devices supported */
      counter++;
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	3301      	adds	r3, #1
 800314c:	61fb      	str	r3, [r7, #28]
      break;
 800314e:	e002      	b.n	8003156 <wm8994_Init+0x702>
    }
  }
  else
  {
    inputEnabled = 0;
 8003150:	4ba4      	ldr	r3, [pc, #656]	@ (80033e4 <wm8994_Init+0x990>)
 8003152:	2200      	movs	r2, #0
 8003154:	601a      	str	r2, [r3, #0]
  }
  
  /*  Clock Configurations */
  switch (AudioFreq)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4aa3      	ldr	r2, [pc, #652]	@ (80033e8 <wm8994_Init+0x994>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d079      	beq.n	8003252 <wm8994_Init+0x7fe>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4aa1      	ldr	r2, [pc, #644]	@ (80033e8 <wm8994_Init+0x994>)
 8003162:	4293      	cmp	r3, r2
 8003164:	f200 80ad 	bhi.w	80032c2 <wm8994_Init+0x86e>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 800316e:	4293      	cmp	r3, r2
 8003170:	d061      	beq.n	8003236 <wm8994_Init+0x7e2>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8003178:	4293      	cmp	r3, r2
 800317a:	f200 80a2 	bhi.w	80032c2 <wm8994_Init+0x86e>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8003184:	4293      	cmp	r3, r2
 8003186:	f000 808e 	beq.w	80032a6 <wm8994_Init+0x852>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8003190:	4293      	cmp	r3, r2
 8003192:	f200 8096 	bhi.w	80032c2 <wm8994_Init+0x86e>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 800319c:	d03d      	beq.n	800321a <wm8994_Init+0x7c6>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 80031a4:	f200 808d 	bhi.w	80032c2 <wm8994_Init+0x86e>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f245 6222 	movw	r2, #22050	@ 0x5622
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d06b      	beq.n	800328a <wm8994_Init+0x836>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f245 6222 	movw	r2, #22050	@ 0x5622
 80031b8:	4293      	cmp	r3, r2
 80031ba:	f200 8082 	bhi.w	80032c2 <wm8994_Init+0x86e>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 80031c4:	d01b      	beq.n	80031fe <wm8994_Init+0x7aa>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 80031cc:	d879      	bhi.n	80032c2 <wm8994_Init+0x86e>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 80031d4:	d005      	beq.n	80031e2 <wm8994_Init+0x78e>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f642 3211 	movw	r2, #11025	@ 0x2b11
 80031dc:	4293      	cmp	r3, r2
 80031de:	d046      	beq.n	800326e <wm8994_Init+0x81a>
 80031e0:	e06f      	b.n	80032c2 <wm8994_Init+0x86e>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 80031e2:	89fb      	ldrh	r3, [r7, #14]
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	2203      	movs	r2, #3
 80031e8:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80031ec:	4618      	mov	r0, r3
 80031ee:	f000 ff4b 	bl	8004088 <CODEC_IO_Write>
 80031f2:	4603      	mov	r3, r0
 80031f4:	461a      	mov	r2, r3
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	4413      	add	r3, r2
 80031fa:	61fb      	str	r3, [r7, #28]
    break;
 80031fc:	e06f      	b.n	80032de <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 80031fe:	89fb      	ldrh	r3, [r7, #14]
 8003200:	b2db      	uxtb	r3, r3
 8003202:	2233      	movs	r2, #51	@ 0x33
 8003204:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003208:	4618      	mov	r0, r3
 800320a:	f000 ff3d 	bl	8004088 <CODEC_IO_Write>
 800320e:	4603      	mov	r3, r0
 8003210:	461a      	mov	r2, r3
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	4413      	add	r3, r2
 8003216:	61fb      	str	r3, [r7, #28]
    break;
 8003218:	e061      	b.n	80032de <wm8994_Init+0x88a>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 800321a:	89fb      	ldrh	r3, [r7, #14]
 800321c:	b2db      	uxtb	r3, r3
 800321e:	2263      	movs	r2, #99	@ 0x63
 8003220:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003224:	4618      	mov	r0, r3
 8003226:	f000 ff2f 	bl	8004088 <CODEC_IO_Write>
 800322a:	4603      	mov	r3, r0
 800322c:	461a      	mov	r2, r3
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	4413      	add	r3, r2
 8003232:	61fb      	str	r3, [r7, #28]
    break;
 8003234:	e053      	b.n	80032de <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8003236:	89fb      	ldrh	r3, [r7, #14]
 8003238:	b2db      	uxtb	r3, r3
 800323a:	2283      	movs	r2, #131	@ 0x83
 800323c:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003240:	4618      	mov	r0, r3
 8003242:	f000 ff21 	bl	8004088 <CODEC_IO_Write>
 8003246:	4603      	mov	r3, r0
 8003248:	461a      	mov	r2, r3
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	4413      	add	r3, r2
 800324e:	61fb      	str	r3, [r7, #28]
    break;
 8003250:	e045      	b.n	80032de <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 8003252:	89fb      	ldrh	r3, [r7, #14]
 8003254:	b2db      	uxtb	r3, r3
 8003256:	22a3      	movs	r2, #163	@ 0xa3
 8003258:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800325c:	4618      	mov	r0, r3
 800325e:	f000 ff13 	bl	8004088 <CODEC_IO_Write>
 8003262:	4603      	mov	r3, r0
 8003264:	461a      	mov	r2, r3
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	4413      	add	r3, r2
 800326a:	61fb      	str	r3, [r7, #28]
    break;
 800326c:	e037      	b.n	80032de <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 800326e:	89fb      	ldrh	r3, [r7, #14]
 8003270:	b2db      	uxtb	r3, r3
 8003272:	2213      	movs	r2, #19
 8003274:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003278:	4618      	mov	r0, r3
 800327a:	f000 ff05 	bl	8004088 <CODEC_IO_Write>
 800327e:	4603      	mov	r3, r0
 8003280:	461a      	mov	r2, r3
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	4413      	add	r3, r2
 8003286:	61fb      	str	r3, [r7, #28]
    break;
 8003288:	e029      	b.n	80032de <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 800328a:	89fb      	ldrh	r3, [r7, #14]
 800328c:	b2db      	uxtb	r3, r3
 800328e:	2243      	movs	r2, #67	@ 0x43
 8003290:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003294:	4618      	mov	r0, r3
 8003296:	f000 fef7 	bl	8004088 <CODEC_IO_Write>
 800329a:	4603      	mov	r3, r0
 800329c:	461a      	mov	r2, r3
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	4413      	add	r3, r2
 80032a2:	61fb      	str	r3, [r7, #28]
    break;
 80032a4:	e01b      	b.n	80032de <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 80032a6:	89fb      	ldrh	r3, [r7, #14]
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	2273      	movs	r2, #115	@ 0x73
 80032ac:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80032b0:	4618      	mov	r0, r3
 80032b2:	f000 fee9 	bl	8004088 <CODEC_IO_Write>
 80032b6:	4603      	mov	r3, r0
 80032b8:	461a      	mov	r2, r3
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	4413      	add	r3, r2
 80032be:	61fb      	str	r3, [r7, #28]
    break; 
 80032c0:	e00d      	b.n	80032de <wm8994_Init+0x88a>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 80032c2:	89fb      	ldrh	r3, [r7, #14]
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	2283      	movs	r2, #131	@ 0x83
 80032c8:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80032cc:	4618      	mov	r0, r3
 80032ce:	f000 fedb 	bl	8004088 <CODEC_IO_Write>
 80032d2:	4603      	mov	r3, r0
 80032d4:	461a      	mov	r2, r3
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	4413      	add	r3, r2
 80032da:	61fb      	str	r3, [r7, #28]
    break; 
 80032dc:	bf00      	nop
  }

  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80032de:	8afb      	ldrh	r3, [r7, #22]
 80032e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80032e4:	d10e      	bne.n	8003304 <wm8994_Init+0x8b0>
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4018);    
 80032e6:	89fb      	ldrh	r3, [r7, #14]
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	f244 0218 	movw	r2, #16408	@ 0x4018
 80032ee:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80032f2:	4618      	mov	r0, r3
 80032f4:	f000 fec8 	bl	8004088 <CODEC_IO_Write>
 80032f8:	4603      	mov	r3, r0
 80032fa:	461a      	mov	r2, r3
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	4413      	add	r3, r2
 8003300:	61fb      	str	r3, [r7, #28]
 8003302:	e00d      	b.n	8003320 <wm8994_Init+0x8cc>
  }
  else
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4010);
 8003304:	89fb      	ldrh	r3, [r7, #14]
 8003306:	b2db      	uxtb	r3, r3
 8003308:	f244 0210 	movw	r2, #16400	@ 0x4010
 800330c:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8003310:	4618      	mov	r0, r3
 8003312:	f000 feb9 	bl	8004088 <CODEC_IO_Write>
 8003316:	4603      	mov	r3, r0
 8003318:	461a      	mov	r2, r3
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	4413      	add	r3, r2
 800331e:	61fb      	str	r3, [r7, #28]
  }
  
  /* slave mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x302, 0x0000);
 8003320:	89fb      	ldrh	r3, [r7, #14]
 8003322:	b2db      	uxtb	r3, r3
 8003324:	2200      	movs	r2, #0
 8003326:	f240 3102 	movw	r1, #770	@ 0x302
 800332a:	4618      	mov	r0, r3
 800332c:	f000 feac 	bl	8004088 <CODEC_IO_Write>
 8003330:	4603      	mov	r3, r0
 8003332:	461a      	mov	r2, r3
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	4413      	add	r3, r2
 8003338:	61fb      	str	r3, [r7, #28]
  
  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  counter += CODEC_IO_Write(DeviceAddr, 0x208, 0x000A);
 800333a:	89fb      	ldrh	r3, [r7, #14]
 800333c:	b2db      	uxtb	r3, r3
 800333e:	220a      	movs	r2, #10
 8003340:	f44f 7102 	mov.w	r1, #520	@ 0x208
 8003344:	4618      	mov	r0, r3
 8003346:	f000 fe9f 	bl	8004088 <CODEC_IO_Write>
 800334a:	4603      	mov	r3, r0
 800334c:	461a      	mov	r2, r3
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	4413      	add	r3, r2
 8003352:	61fb      	str	r3, [r7, #28]
  
  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0001);
 8003354:	89fb      	ldrh	r3, [r7, #14]
 8003356:	b2db      	uxtb	r3, r3
 8003358:	2201      	movs	r2, #1
 800335a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800335e:	4618      	mov	r0, r3
 8003360:	f000 fe92 	bl	8004088 <CODEC_IO_Write>
 8003364:	4603      	mov	r3, r0
 8003366:	461a      	mov	r2, r3
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	4413      	add	r3, r2
 800336c:	61fb      	str	r3, [r7, #28]

  if (output_device > 0)  /* Audio output selected */
 800336e:	8b3b      	ldrh	r3, [r7, #24]
 8003370:	2b00      	cmp	r3, #0
 8003372:	f000 817b 	beq.w	800366c <wm8994_Init+0xc18>
  {
    if (output_device == OUTPUT_DEVICE_HEADPHONE)
 8003376:	8b3b      	ldrh	r3, [r7, #24]
 8003378:	2b02      	cmp	r3, #2
 800337a:	d157      	bne.n	800342c <wm8994_Init+0x9d8>
    {      
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0100);
 800337c:	89fb      	ldrh	r3, [r7, #14]
 800337e:	b2db      	uxtb	r3, r3
 8003380:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003384:	212d      	movs	r1, #45	@ 0x2d
 8003386:	4618      	mov	r0, r3
 8003388:	f000 fe7e 	bl	8004088 <CODEC_IO_Write>
 800338c:	4603      	mov	r3, r0
 800338e:	461a      	mov	r2, r3
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	4413      	add	r3, r2
 8003394:	61fb      	str	r3, [r7, #28]
      
      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0100);    
 8003396:	89fb      	ldrh	r3, [r7, #14]
 8003398:	b2db      	uxtb	r3, r3
 800339a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800339e:	212e      	movs	r1, #46	@ 0x2e
 80033a0:	4618      	mov	r0, r3
 80033a2:	f000 fe71 	bl	8004088 <CODEC_IO_Write>
 80033a6:	4603      	mov	r3, r0
 80033a8:	461a      	mov	r2, r3
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	4413      	add	r3, r2
 80033ae:	61fb      	str	r3, [r7, #28]
            
      /* Startup sequence for Headphone */
      if(ColdStartup)
 80033b0:	4b0e      	ldr	r3, [pc, #56]	@ (80033ec <wm8994_Init+0x998>)
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d01b      	beq.n	80033f0 <wm8994_Init+0x99c>
      {
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8100);
 80033b8:	89fb      	ldrh	r3, [r7, #14]
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	f44f 4201 	mov.w	r2, #33024	@ 0x8100
 80033c0:	f44f 7188 	mov.w	r1, #272	@ 0x110
 80033c4:	4618      	mov	r0, r3
 80033c6:	f000 fe5f 	bl	8004088 <CODEC_IO_Write>
 80033ca:	4603      	mov	r3, r0
 80033cc:	461a      	mov	r2, r3
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	4413      	add	r3, r2
 80033d2:	61fb      	str	r3, [r7, #28]
        
        ColdStartup=0;
 80033d4:	4b05      	ldr	r3, [pc, #20]	@ (80033ec <wm8994_Init+0x998>)
 80033d6:	2200      	movs	r2, #0
 80033d8:	701a      	strb	r2, [r3, #0]
        /* Add Delay */
        AUDIO_IO_Delay(300);
 80033da:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80033de:	f001 f829 	bl	8004434 <AUDIO_IO_Delay>
 80033e2:	e016      	b.n	8003412 <wm8994_Init+0x9be>
 80033e4:	2002977c 	.word	0x2002977c
 80033e8:	00017700 	.word	0x00017700
 80033ec:	20000050 	.word	0x20000050
      }
      else /* Headphone Warm Start-Up */
      { 
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8108);
 80033f0:	89fb      	ldrh	r3, [r7, #14]
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	f248 1208 	movw	r2, #33032	@ 0x8108
 80033f8:	f44f 7188 	mov.w	r1, #272	@ 0x110
 80033fc:	4618      	mov	r0, r3
 80033fe:	f000 fe43 	bl	8004088 <CODEC_IO_Write>
 8003402:	4603      	mov	r3, r0
 8003404:	461a      	mov	r2, r3
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	4413      	add	r3, r2
 800340a:	61fb      	str	r3, [r7, #28]
        /* Add Delay */
        AUDIO_IO_Delay(50);
 800340c:	2032      	movs	r0, #50	@ 0x32
 800340e:	f001 f811 	bl	8004434 <AUDIO_IO_Delay>
      }

      /* Soft un-Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 8003412:	89fb      	ldrh	r3, [r7, #14]
 8003414:	b2db      	uxtb	r3, r3
 8003416:	2200      	movs	r2, #0
 8003418:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 800341c:	4618      	mov	r0, r3
 800341e:	f000 fe33 	bl	8004088 <CODEC_IO_Write>
 8003422:	4603      	mov	r3, r0
 8003424:	461a      	mov	r2, r3
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	4413      	add	r3, r2
 800342a:	61fb      	str	r3, [r7, #28]
    }
    /* Analog Output Configuration */

    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0300);
 800342c:	89fb      	ldrh	r3, [r7, #14]
 800342e:	b2db      	uxtb	r3, r3
 8003430:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8003434:	2103      	movs	r1, #3
 8003436:	4618      	mov	r0, r3
 8003438:	f000 fe26 	bl	8004088 <CODEC_IO_Write>
 800343c:	4603      	mov	r3, r0
 800343e:	461a      	mov	r2, r3
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	4413      	add	r3, r2
 8003444:	61fb      	str	r3, [r7, #28]

    /* Left Speaker Mixer Volume = 0dB */
    counter += CODEC_IO_Write(DeviceAddr, 0x22, 0x0000);
 8003446:	89fb      	ldrh	r3, [r7, #14]
 8003448:	b2db      	uxtb	r3, r3
 800344a:	2200      	movs	r2, #0
 800344c:	2122      	movs	r1, #34	@ 0x22
 800344e:	4618      	mov	r0, r3
 8003450:	f000 fe1a 	bl	8004088 <CODEC_IO_Write>
 8003454:	4603      	mov	r3, r0
 8003456:	461a      	mov	r2, r3
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	4413      	add	r3, r2
 800345c:	61fb      	str	r3, [r7, #28]

    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x23, 0x0000);
 800345e:	89fb      	ldrh	r3, [r7, #14]
 8003460:	b2db      	uxtb	r3, r3
 8003462:	2200      	movs	r2, #0
 8003464:	2123      	movs	r1, #35	@ 0x23
 8003466:	4618      	mov	r0, r3
 8003468:	f000 fe0e 	bl	8004088 <CODEC_IO_Write>
 800346c:	4603      	mov	r3, r0
 800346e:	461a      	mov	r2, r3
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	4413      	add	r3, r2
 8003474:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x36, 0x0300);
 8003476:	89fb      	ldrh	r3, [r7, #14]
 8003478:	b2db      	uxtb	r3, r3
 800347a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800347e:	2136      	movs	r1, #54	@ 0x36
 8003480:	4618      	mov	r0, r3
 8003482:	f000 fe01 	bl	8004088 <CODEC_IO_Write>
 8003486:	4603      	mov	r3, r0
 8003488:	461a      	mov	r2, r3
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	4413      	add	r3, r2
 800348e:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x3003);
 8003490:	89fb      	ldrh	r3, [r7, #14]
 8003492:	b2db      	uxtb	r3, r3
 8003494:	f243 0203 	movw	r2, #12291	@ 0x3003
 8003498:	2101      	movs	r1, #1
 800349a:	4618      	mov	r0, r3
 800349c:	f000 fdf4 	bl	8004088 <CODEC_IO_Write>
 80034a0:	4603      	mov	r3, r0
 80034a2:	461a      	mov	r2, r3
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	4413      	add	r3, r2
 80034a8:	61fb      	str	r3, [r7, #28]

    /* Headphone/Speaker Enable */

    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80034aa:	8afb      	ldrh	r3, [r7, #22]
 80034ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80034b0:	d10d      	bne.n	80034ce <wm8994_Init+0xa7a>
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0205);
 80034b2:	89fb      	ldrh	r3, [r7, #14]
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	f240 2205 	movw	r2, #517	@ 0x205
 80034ba:	2151      	movs	r1, #81	@ 0x51
 80034bc:	4618      	mov	r0, r3
 80034be:	f000 fde3 	bl	8004088 <CODEC_IO_Write>
 80034c2:	4603      	mov	r3, r0
 80034c4:	461a      	mov	r2, r3
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	4413      	add	r3, r2
 80034ca:	61fb      	str	r3, [r7, #28]
 80034cc:	e00b      	b.n	80034e6 <wm8994_Init+0xa92>
    }
    else
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0005);      
 80034ce:	89fb      	ldrh	r3, [r7, #14]
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	2205      	movs	r2, #5
 80034d4:	2151      	movs	r1, #81	@ 0x51
 80034d6:	4618      	mov	r0, r3
 80034d8:	f000 fdd6 	bl	8004088 <CODEC_IO_Write>
 80034dc:	4603      	mov	r3, r0
 80034de:	461a      	mov	r2, r3
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	4413      	add	r3, r2
 80034e4:	61fb      	str	r3, [r7, #28]
    }

    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 80034e6:	8b7b      	ldrh	r3, [r7, #26]
 80034e8:	f443 534c 	orr.w	r3, r3, #13056	@ 0x3300
 80034ec:	f043 0303 	orr.w	r3, r3, #3
 80034f0:	837b      	strh	r3, [r7, #26]
    counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 80034f2:	89fb      	ldrh	r3, [r7, #14]
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	8b7a      	ldrh	r2, [r7, #26]
 80034f8:	2101      	movs	r1, #1
 80034fa:	4618      	mov	r0, r3
 80034fc:	f000 fdc4 	bl	8004088 <CODEC_IO_Write>
 8003500:	4603      	mov	r3, r0
 8003502:	461a      	mov	r2, r3
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	4413      	add	r3, r2
 8003508:	61fb      	str	r3, [r7, #28]

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x0022);
 800350a:	89fb      	ldrh	r3, [r7, #14]
 800350c:	b2db      	uxtb	r3, r3
 800350e:	2222      	movs	r2, #34	@ 0x22
 8003510:	2160      	movs	r1, #96	@ 0x60
 8003512:	4618      	mov	r0, r3
 8003514:	f000 fdb8 	bl	8004088 <CODEC_IO_Write>
 8003518:	4603      	mov	r3, r0
 800351a:	461a      	mov	r2, r3
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	4413      	add	r3, r2
 8003520:	61fb      	str	r3, [r7, #28]

    /* Enable Charge Pump */
    counter += CODEC_IO_Write(DeviceAddr, 0x4C, 0x9F25);
 8003522:	89fb      	ldrh	r3, [r7, #14]
 8003524:	b2db      	uxtb	r3, r3
 8003526:	f649 7225 	movw	r2, #40741	@ 0x9f25
 800352a:	214c      	movs	r1, #76	@ 0x4c
 800352c:	4618      	mov	r0, r3
 800352e:	f000 fdab 	bl	8004088 <CODEC_IO_Write>
 8003532:	4603      	mov	r3, r0
 8003534:	461a      	mov	r2, r3
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	4413      	add	r3, r2
 800353a:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(15);
 800353c:	200f      	movs	r0, #15
 800353e:	f000 ff79 	bl	8004434 <AUDIO_IO_Delay>

    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0001);
 8003542:	89fb      	ldrh	r3, [r7, #14]
 8003544:	b2db      	uxtb	r3, r3
 8003546:	2201      	movs	r2, #1
 8003548:	212d      	movs	r1, #45	@ 0x2d
 800354a:	4618      	mov	r0, r3
 800354c:	f000 fd9c 	bl	8004088 <CODEC_IO_Write>
 8003550:	4603      	mov	r3, r0
 8003552:	461a      	mov	r2, r3
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	4413      	add	r3, r2
 8003558:	61fb      	str	r3, [r7, #28]

    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0001);
 800355a:	89fb      	ldrh	r3, [r7, #14]
 800355c:	b2db      	uxtb	r3, r3
 800355e:	2201      	movs	r2, #1
 8003560:	212e      	movs	r1, #46	@ 0x2e
 8003562:	4618      	mov	r0, r3
 8003564:	f000 fd90 	bl	8004088 <CODEC_IO_Write>
 8003568:	4603      	mov	r3, r0
 800356a:	461a      	mov	r2, r3
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	4413      	add	r3, r2
 8003570:	61fb      	str	r3, [r7, #28]

    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0030 | 0x0300);
 8003572:	89fb      	ldrh	r3, [r7, #14]
 8003574:	b2db      	uxtb	r3, r3
 8003576:	f44f 724c 	mov.w	r2, #816	@ 0x330
 800357a:	2103      	movs	r1, #3
 800357c:	4618      	mov	r0, r3
 800357e:	f000 fd83 	bl	8004088 <CODEC_IO_Write>
 8003582:	4603      	mov	r3, r0
 8003584:	461a      	mov	r2, r3
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	4413      	add	r3, r2
 800358a:	61fb      	str	r3, [r7, #28]

    /* Enable DC Servo and trigger start-up mode on left and right channels */
    counter += CODEC_IO_Write(DeviceAddr, 0x54, 0x0033);
 800358c:	89fb      	ldrh	r3, [r7, #14]
 800358e:	b2db      	uxtb	r3, r3
 8003590:	2233      	movs	r2, #51	@ 0x33
 8003592:	2154      	movs	r1, #84	@ 0x54
 8003594:	4618      	mov	r0, r3
 8003596:	f000 fd77 	bl	8004088 <CODEC_IO_Write>
 800359a:	4603      	mov	r3, r0
 800359c:	461a      	mov	r2, r3
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	4413      	add	r3, r2
 80035a2:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(257);
 80035a4:	f240 1001 	movw	r0, #257	@ 0x101
 80035a8:	f000 ff44 	bl	8004434 <AUDIO_IO_Delay>

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x00EE);
 80035ac:	89fb      	ldrh	r3, [r7, #14]
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	22ee      	movs	r2, #238	@ 0xee
 80035b2:	2160      	movs	r1, #96	@ 0x60
 80035b4:	4618      	mov	r0, r3
 80035b6:	f000 fd67 	bl	8004088 <CODEC_IO_Write>
 80035ba:	4603      	mov	r3, r0
 80035bc:	461a      	mov	r2, r3
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	4413      	add	r3, r2
 80035c2:	61fb      	str	r3, [r7, #28]

    /* Unmutes */

    /* Unmute DAC 1 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x610, 0x00C0);
 80035c4:	89fb      	ldrh	r3, [r7, #14]
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	22c0      	movs	r2, #192	@ 0xc0
 80035ca:	f44f 61c2 	mov.w	r1, #1552	@ 0x610
 80035ce:	4618      	mov	r0, r3
 80035d0:	f000 fd5a 	bl	8004088 <CODEC_IO_Write>
 80035d4:	4603      	mov	r3, r0
 80035d6:	461a      	mov	r2, r3
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	4413      	add	r3, r2
 80035dc:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 1 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x611, 0x00C0);
 80035de:	89fb      	ldrh	r3, [r7, #14]
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	22c0      	movs	r2, #192	@ 0xc0
 80035e4:	f240 6111 	movw	r1, #1553	@ 0x611
 80035e8:	4618      	mov	r0, r3
 80035ea:	f000 fd4d 	bl	8004088 <CODEC_IO_Write>
 80035ee:	4603      	mov	r3, r0
 80035f0:	461a      	mov	r2, r3
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	4413      	add	r3, r2
 80035f6:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 0 DAC path */
    counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 80035f8:	89fb      	ldrh	r3, [r7, #14]
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	2210      	movs	r2, #16
 80035fe:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8003602:	4618      	mov	r0, r3
 8003604:	f000 fd40 	bl	8004088 <CODEC_IO_Write>
 8003608:	4603      	mov	r3, r0
 800360a:	461a      	mov	r2, r3
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	4413      	add	r3, r2
 8003610:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x612, 0x00C0);
 8003612:	89fb      	ldrh	r3, [r7, #14]
 8003614:	b2db      	uxtb	r3, r3
 8003616:	22c0      	movs	r2, #192	@ 0xc0
 8003618:	f240 6112 	movw	r1, #1554	@ 0x612
 800361c:	4618      	mov	r0, r3
 800361e:	f000 fd33 	bl	8004088 <CODEC_IO_Write>
 8003622:	4603      	mov	r3, r0
 8003624:	461a      	mov	r2, r3
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	4413      	add	r3, r2
 800362a:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x613, 0x00C0);
 800362c:	89fb      	ldrh	r3, [r7, #14]
 800362e:	b2db      	uxtb	r3, r3
 8003630:	22c0      	movs	r2, #192	@ 0xc0
 8003632:	f240 6113 	movw	r1, #1555	@ 0x613
 8003636:	4618      	mov	r0, r3
 8003638:	f000 fd26 	bl	8004088 <CODEC_IO_Write>
 800363c:	4603      	mov	r3, r0
 800363e:	461a      	mov	r2, r3
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	4413      	add	r3, r2
 8003644:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 8003646:	89fb      	ldrh	r3, [r7, #14]
 8003648:	b2db      	uxtb	r3, r3
 800364a:	2210      	movs	r2, #16
 800364c:	f240 4122 	movw	r1, #1058	@ 0x422
 8003650:	4618      	mov	r0, r3
 8003652:	f000 fd19 	bl	8004088 <CODEC_IO_Write>
 8003656:	4603      	mov	r3, r0
 8003658:	461a      	mov	r2, r3
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	4413      	add	r3, r2
 800365e:	61fb      	str	r3, [r7, #28]
    
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8003660:	7afa      	ldrb	r2, [r7, #11]
 8003662:	89fb      	ldrh	r3, [r7, #14]
 8003664:	4611      	mov	r1, r2
 8003666:	4618      	mov	r0, r3
 8003668:	f000 f984 	bl	8003974 <wm8994_SetVolume>
  }

  if (input_device > 0) /* Audio input selected */
 800366c:	8afb      	ldrh	r3, [r7, #22]
 800366e:	2b00      	cmp	r3, #0
 8003670:	f000 80a6 	beq.w	80037c0 <wm8994_Init+0xd6c>
  {
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 8003674:	8afb      	ldrh	r3, [r7, #22]
 8003676:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800367a:	d003      	beq.n	8003684 <wm8994_Init+0xc30>
 800367c:	8afb      	ldrh	r3, [r7, #22]
 800367e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003682:	d12b      	bne.n	80036dc <wm8994_Init+0xc88>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8003684:	8b7b      	ldrh	r3, [r7, #26]
 8003686:	f043 0313 	orr.w	r3, r3, #19
 800368a:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 800368c:	89fb      	ldrh	r3, [r7, #14]
 800368e:	b2db      	uxtb	r3, r3
 8003690:	8b7a      	ldrh	r2, [r7, #26]
 8003692:	2101      	movs	r1, #1
 8003694:	4618      	mov	r0, r3
 8003696:	f000 fcf7 	bl	8004088 <CODEC_IO_Write>
 800369a:	4603      	mov	r3, r0
 800369c:	461a      	mov	r2, r3
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	4413      	add	r3, r2
 80036a2:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 80036a4:	89fb      	ldrh	r3, [r7, #14]
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	2202      	movs	r2, #2
 80036aa:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 80036ae:	4618      	mov	r0, r3
 80036b0:	f000 fcea 	bl	8004088 <CODEC_IO_Write>
 80036b4:	4603      	mov	r3, r0
 80036b6:	461a      	mov	r2, r3
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	4413      	add	r3, r2
 80036bc:	61fb      	str	r3, [r7, #28]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x3800);
 80036be:	89fb      	ldrh	r3, [r7, #14]
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80036c6:	f240 4111 	movw	r1, #1041	@ 0x411
 80036ca:	4618      	mov	r0, r3
 80036cc:	f000 fcdc 	bl	8004088 <CODEC_IO_Write>
 80036d0:	4603      	mov	r3, r0
 80036d2:	461a      	mov	r2, r3
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	4413      	add	r3, r2
 80036d8:	61fb      	str	r3, [r7, #28]
 80036da:	e06b      	b.n	80037b4 <wm8994_Init+0xd60>
    }
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80036dc:	8afb      	ldrh	r3, [r7, #22]
 80036de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80036e2:	d139      	bne.n	8003758 <wm8994_Init+0xd04>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 80036e4:	8b7b      	ldrh	r3, [r7, #26]
 80036e6:	f043 0313 	orr.w	r3, r3, #19
 80036ea:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 80036ec:	89fb      	ldrh	r3, [r7, #14]
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	8b7a      	ldrh	r2, [r7, #26]
 80036f2:	2101      	movs	r1, #1
 80036f4:	4618      	mov	r0, r3
 80036f6:	f000 fcc7 	bl	8004088 <CODEC_IO_Write>
 80036fa:	4603      	mov	r3, r0
 80036fc:	461a      	mov	r2, r3
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	4413      	add	r3, r2
 8003702:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8003704:	89fb      	ldrh	r3, [r7, #14]
 8003706:	b2db      	uxtb	r3, r3
 8003708:	2202      	movs	r2, #2
 800370a:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 800370e:	4618      	mov	r0, r3
 8003710:	f000 fcba 	bl	8004088 <CODEC_IO_Write>
 8003714:	4603      	mov	r3, r0
 8003716:	461a      	mov	r2, r3
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	4413      	add	r3, r2
 800371c:	61fb      	str	r3, [r7, #28]
    
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 800371e:	89fb      	ldrh	r3, [r7, #14]
 8003720:	b2db      	uxtb	r3, r3
 8003722:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8003726:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 800372a:	4618      	mov	r0, r3
 800372c:	f000 fcac 	bl	8004088 <CODEC_IO_Write>
 8003730:	4603      	mov	r3, r0
 8003732:	461a      	mov	r2, r3
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	4413      	add	r3, r2
 8003738:	61fb      	str	r3, [r7, #28]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x1800);      
 800373a:	89fb      	ldrh	r3, [r7, #14]
 800373c:	b2db      	uxtb	r3, r3
 800373e:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8003742:	f240 4111 	movw	r1, #1041	@ 0x411
 8003746:	4618      	mov	r0, r3
 8003748:	f000 fc9e 	bl	8004088 <CODEC_IO_Write>
 800374c:	4603      	mov	r3, r0
 800374e:	461a      	mov	r2, r3
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	4413      	add	r3, r2
 8003754:	61fb      	str	r3, [r7, #28]
 8003756:	e02d      	b.n	80037b4 <wm8994_Init+0xd60>
    }    
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 8003758:	8afb      	ldrh	r3, [r7, #22]
 800375a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800375e:	d003      	beq.n	8003768 <wm8994_Init+0xd14>
 8003760:	8afb      	ldrh	r3, [r7, #22]
 8003762:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003766:	d125      	bne.n	80037b4 <wm8994_Init+0xd60>
    {

      /* Disable mute on IN1L, IN1L Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x18, 0x000B);
 8003768:	89fb      	ldrh	r3, [r7, #14]
 800376a:	b2db      	uxtb	r3, r3
 800376c:	220b      	movs	r2, #11
 800376e:	2118      	movs	r1, #24
 8003770:	4618      	mov	r0, r3
 8003772:	f000 fc89 	bl	8004088 <CODEC_IO_Write>
 8003776:	4603      	mov	r3, r0
 8003778:	461a      	mov	r2, r3
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	4413      	add	r3, r2
 800377e:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R, IN1R Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x1A, 0x000B);
 8003780:	89fb      	ldrh	r3, [r7, #14]
 8003782:	b2db      	uxtb	r3, r3
 8003784:	220b      	movs	r2, #11
 8003786:	211a      	movs	r1, #26
 8003788:	4618      	mov	r0, r3
 800378a:	f000 fc7d 	bl	8004088 <CODEC_IO_Write>
 800378e:	4603      	mov	r3, r0
 8003790:	461a      	mov	r2, r3
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	4413      	add	r3, r2
 8003796:	61fb      	str	r3, [r7, #28]

      /* AIF ADC1 HPF enable, HPF cut = hifi mode fc=4Hz at fs=48kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8003798:	89fb      	ldrh	r3, [r7, #14]
 800379a:	b2db      	uxtb	r3, r3
 800379c:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 80037a0:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 80037a4:	4618      	mov	r0, r3
 80037a6:	f000 fc6f 	bl	8004088 <CODEC_IO_Write>
 80037aa:	4603      	mov	r3, r0
 80037ac:	461a      	mov	r2, r3
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	4413      	add	r3, r2
 80037b2:	61fb      	str	r3, [r7, #28]
    }
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 80037b4:	7afa      	ldrb	r2, [r7, #11]
 80037b6:	89fb      	ldrh	r3, [r7, #14]
 80037b8:	4611      	mov	r1, r2
 80037ba:	4618      	mov	r0, r3
 80037bc:	f000 f8da 	bl	8003974 <wm8994_SetVolume>
  }
  /* Return communication control value */
  return counter;  
 80037c0:	69fb      	ldr	r3, [r7, #28]
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3720      	adds	r7, #32
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop

080037cc <wm8994_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void wm8994_DeInit(void)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 80037d0:	f000 fdd2 	bl	8004378 <AUDIO_IO_DeInit>
}
 80037d4:	bf00      	nop
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <wm8994_ReadID>:
  * @brief  Get the WM8994 ID.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval The WM8994 ID 
  */
uint32_t wm8994_ReadID(uint16_t DeviceAddr)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
 80037de:	4603      	mov	r3, r0
 80037e0:	80fb      	strh	r3, [r7, #6]
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 80037e2:	f000 fdbf 	bl	8004364 <AUDIO_IO_Init>

  return ((uint32_t)AUDIO_IO_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 80037e6:	88fb      	ldrh	r3, [r7, #6]
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	2100      	movs	r1, #0
 80037ec:	4618      	mov	r0, r3
 80037ee:	f000 fdf5 	bl	80043dc <AUDIO_IO_Read>
 80037f2:	4603      	mov	r3, r0
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3708      	adds	r7, #8
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <wm8994_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	4603      	mov	r3, r0
 8003804:	6039      	str	r1, [r7, #0]
 8003806:	80fb      	strh	r3, [r7, #6]
 8003808:	4613      	mov	r3, r2
 800380a:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 800380c:	2300      	movs	r3, #0
 800380e:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8003810:	88fb      	ldrh	r3, [r7, #6]
 8003812:	2100      	movs	r1, #0
 8003814:	4618      	mov	r0, r3
 8003816:	f000 f9d1 	bl	8003bbc <wm8994_SetMute>
 800381a:	4602      	mov	r2, r0
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	4413      	add	r3, r2
 8003820:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8003822:	68fb      	ldr	r3, [r7, #12]
}
 8003824:	4618      	mov	r0, r3
 8003826:	3710      	adds	r7, #16
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}

0800382c <wm8994_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Pause(uint16_t DeviceAddr)
{  
 800382c:	b580      	push	{r7, lr}
 800382e:	b084      	sub	sp, #16
 8003830:	af00      	add	r7, sp, #0
 8003832:	4603      	mov	r3, r0
 8003834:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8003836:	2300      	movs	r3, #0
 8003838:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 800383a:	88fb      	ldrh	r3, [r7, #6]
 800383c:	2101      	movs	r1, #1
 800383e:	4618      	mov	r0, r3
 8003840:	f000 f9bc 	bl	8003bbc <wm8994_SetMute>
 8003844:	4602      	mov	r2, r0
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	4413      	add	r3, r2
 800384a:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x01);
 800384c:	88fb      	ldrh	r3, [r7, #6]
 800384e:	b2db      	uxtb	r3, r3
 8003850:	2201      	movs	r2, #1
 8003852:	2102      	movs	r1, #2
 8003854:	4618      	mov	r0, r3
 8003856:	f000 fc17 	bl	8004088 <CODEC_IO_Write>
 800385a:	4603      	mov	r3, r0
 800385c:	461a      	mov	r2, r3
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	4413      	add	r3, r2
 8003862:	60fb      	str	r3, [r7, #12]
 
  return counter;
 8003864:	68fb      	ldr	r3, [r7, #12]
}
 8003866:	4618      	mov	r0, r3
 8003868:	3710      	adds	r7, #16
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}

0800386e <wm8994_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Resume(uint16_t DeviceAddr)
{
 800386e:	b580      	push	{r7, lr}
 8003870:	b084      	sub	sp, #16
 8003872:	af00      	add	r7, sp, #0
 8003874:	4603      	mov	r3, r0
 8003876:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8003878:	2300      	movs	r3, #0
 800387a:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 800387c:	88fb      	ldrh	r3, [r7, #6]
 800387e:	2100      	movs	r1, #0
 8003880:	4618      	mov	r0, r3
 8003882:	f000 f99b 	bl	8003bbc <wm8994_SetMute>
 8003886:	4602      	mov	r2, r0
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	4413      	add	r3, r2
 800388c:	60fb      	str	r3, [r7, #12]
  
  return counter;
 800388e:	68fb      	ldr	r3, [r7, #12]
}
 8003890:	4618      	mov	r0, r3
 8003892:	3710      	adds	r7, #16
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}

08003898 <wm8994_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	4603      	mov	r3, r0
 80038a0:	6039      	str	r1, [r7, #0]
 80038a2:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80038a4:	2300      	movs	r3, #0
 80038a6:	60fb      	str	r3, [r7, #12]

  if (outputEnabled != 0)
 80038a8:	4b31      	ldr	r3, [pc, #196]	@ (8003970 <wm8994_Stop+0xd8>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d05a      	beq.n	8003966 <wm8994_Stop+0xce>
  {
    /* Mute the output first */
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 80038b0:	88fb      	ldrh	r3, [r7, #6]
 80038b2:	2101      	movs	r1, #1
 80038b4:	4618      	mov	r0, r3
 80038b6:	f000 f981 	bl	8003bbc <wm8994_SetMute>
 80038ba:	4602      	mov	r2, r0
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	4413      	add	r3, r2
 80038c0:	60fb      	str	r3, [r7, #12]

    if (CodecPdwnMode == CODEC_PDWN_SW)
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d04e      	beq.n	8003966 <wm8994_Stop+0xce>
      /* Only output mute required*/
    }
    else /* CODEC_PDWN_HW */
    {
      /* Mute the AIF1 Timeslot 0 DAC1 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 80038c8:	88fb      	ldrh	r3, [r7, #6]
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80038d0:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 80038d4:	4618      	mov	r0, r3
 80038d6:	f000 fbd7 	bl	8004088 <CODEC_IO_Write>
 80038da:	4603      	mov	r3, r0
 80038dc:	461a      	mov	r2, r3
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	4413      	add	r3, r2
 80038e2:	60fb      	str	r3, [r7, #12]

      /* Mute the AIF1 Timeslot 1 DAC2 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 80038e4:	88fb      	ldrh	r3, [r7, #6]
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80038ec:	f240 4122 	movw	r1, #1058	@ 0x422
 80038f0:	4618      	mov	r0, r3
 80038f2:	f000 fbc9 	bl	8004088 <CODEC_IO_Write>
 80038f6:	4603      	mov	r3, r0
 80038f8:	461a      	mov	r2, r3
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	4413      	add	r3, r2
 80038fe:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1L_TO_HPOUT1L */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0000);
 8003900:	88fb      	ldrh	r3, [r7, #6]
 8003902:	b2db      	uxtb	r3, r3
 8003904:	2200      	movs	r2, #0
 8003906:	212d      	movs	r1, #45	@ 0x2d
 8003908:	4618      	mov	r0, r3
 800390a:	f000 fbbd 	bl	8004088 <CODEC_IO_Write>
 800390e:	4603      	mov	r3, r0
 8003910:	461a      	mov	r2, r3
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	4413      	add	r3, r2
 8003916:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1R_TO_HPOUT1R */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0000);
 8003918:	88fb      	ldrh	r3, [r7, #6]
 800391a:	b2db      	uxtb	r3, r3
 800391c:	2200      	movs	r2, #0
 800391e:	212e      	movs	r1, #46	@ 0x2e
 8003920:	4618      	mov	r0, r3
 8003922:	f000 fbb1 	bl	8004088 <CODEC_IO_Write>
 8003926:	4603      	mov	r3, r0
 8003928:	461a      	mov	r2, r3
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	4413      	add	r3, r2
 800392e:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1 and DAC2 */
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0000);
 8003930:	88fb      	ldrh	r3, [r7, #6]
 8003932:	b2db      	uxtb	r3, r3
 8003934:	2200      	movs	r2, #0
 8003936:	2105      	movs	r1, #5
 8003938:	4618      	mov	r0, r3
 800393a:	f000 fba5 	bl	8004088 <CODEC_IO_Write>
 800393e:	4603      	mov	r3, r0
 8003940:	461a      	mov	r2, r3
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	4413      	add	r3, r2
 8003946:	60fb      	str	r3, [r7, #12]

      /* Reset Codec by writing in 0x0000 address register */
      counter += CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8003948:	88fb      	ldrh	r3, [r7, #6]
 800394a:	b2db      	uxtb	r3, r3
 800394c:	2200      	movs	r2, #0
 800394e:	2100      	movs	r1, #0
 8003950:	4618      	mov	r0, r3
 8003952:	f000 fb99 	bl	8004088 <CODEC_IO_Write>
 8003956:	4603      	mov	r3, r0
 8003958:	461a      	mov	r2, r3
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	4413      	add	r3, r2
 800395e:	60fb      	str	r3, [r7, #12]

      outputEnabled = 0;
 8003960:	4b03      	ldr	r3, [pc, #12]	@ (8003970 <wm8994_Stop+0xd8>)
 8003962:	2200      	movs	r2, #0
 8003964:	601a      	str	r2, [r3, #0]
    }
  }
  return counter;
 8003966:	68fb      	ldr	r3, [r7, #12]
}
 8003968:	4618      	mov	r0, r3
 800396a:	3710      	adds	r7, #16
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}
 8003970:	20029778 	.word	0x20029778

08003974 <wm8994_SetVolume>:
  * @param Volume: a byte value from 0 to 255 (refer to codec registers 
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	4603      	mov	r3, r0
 800397c:	460a      	mov	r2, r1
 800397e:	80fb      	strh	r3, [r7, #6]
 8003980:	4613      	mov	r3, r2
 8003982:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8003984:	2300      	movs	r3, #0
 8003986:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8003988:	797b      	ldrb	r3, [r7, #5]
 800398a:	2b64      	cmp	r3, #100	@ 0x64
 800398c:	d80b      	bhi.n	80039a6 <wm8994_SetVolume+0x32>
 800398e:	797a      	ldrb	r2, [r7, #5]
 8003990:	4613      	mov	r3, r2
 8003992:	019b      	lsls	r3, r3, #6
 8003994:	1a9b      	subs	r3, r3, r2
 8003996:	4a86      	ldr	r2, [pc, #536]	@ (8003bb0 <wm8994_SetVolume+0x23c>)
 8003998:	fb82 1203 	smull	r1, r2, r2, r3
 800399c:	1152      	asrs	r2, r2, #5
 800399e:	17db      	asrs	r3, r3, #31
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	e000      	b.n	80039a8 <wm8994_SetVolume+0x34>
 80039a6:	2364      	movs	r3, #100	@ 0x64
 80039a8:	72fb      	strb	r3, [r7, #11]

  /* Output volume */
  if (outputEnabled != 0)
 80039aa:	4b82      	ldr	r3, [pc, #520]	@ (8003bb4 <wm8994_SetVolume+0x240>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	f000 809b 	beq.w	8003aea <wm8994_SetVolume+0x176>
  {
    if(convertedvol > 0x3E)
 80039b4:	7afb      	ldrb	r3, [r7, #11]
 80039b6:	2b3e      	cmp	r3, #62	@ 0x3e
 80039b8:	d93d      	bls.n	8003a36 <wm8994_SetVolume+0xc2>
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80039ba:	88fb      	ldrh	r3, [r7, #6]
 80039bc:	2100      	movs	r1, #0
 80039be:	4618      	mov	r0, r3
 80039c0:	f000 f8fc 	bl	8003bbc <wm8994_SetMute>
 80039c4:	4602      	mov	r2, r0
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	4413      	add	r3, r2
 80039ca:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 80039cc:	88fb      	ldrh	r3, [r7, #6]
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	f240 127f 	movw	r2, #383	@ 0x17f
 80039d4:	211c      	movs	r1, #28
 80039d6:	4618      	mov	r0, r3
 80039d8:	f000 fb56 	bl	8004088 <CODEC_IO_Write>
 80039dc:	4603      	mov	r3, r0
 80039de:	461a      	mov	r2, r3
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	4413      	add	r3, r2
 80039e4:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 80039e6:	88fb      	ldrh	r3, [r7, #6]
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	f240 127f 	movw	r2, #383	@ 0x17f
 80039ee:	211d      	movs	r1, #29
 80039f0:	4618      	mov	r0, r3
 80039f2:	f000 fb49 	bl	8004088 <CODEC_IO_Write>
 80039f6:	4603      	mov	r3, r0
 80039f8:	461a      	mov	r2, r3
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	4413      	add	r3, r2
 80039fe:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 8003a00:	88fb      	ldrh	r3, [r7, #6]
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	f240 127f 	movw	r2, #383	@ 0x17f
 8003a08:	2126      	movs	r1, #38	@ 0x26
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f000 fb3c 	bl	8004088 <CODEC_IO_Write>
 8003a10:	4603      	mov	r3, r0
 8003a12:	461a      	mov	r2, r3
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	4413      	add	r3, r2
 8003a18:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 8003a1a:	88fb      	ldrh	r3, [r7, #6]
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	f240 127f 	movw	r2, #383	@ 0x17f
 8003a22:	2127      	movs	r1, #39	@ 0x27
 8003a24:	4618      	mov	r0, r3
 8003a26:	f000 fb2f 	bl	8004088 <CODEC_IO_Write>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	4413      	add	r3, r2
 8003a32:	60fb      	str	r3, [r7, #12]
 8003a34:	e059      	b.n	8003aea <wm8994_SetVolume+0x176>
    }
    else if (Volume == 0)
 8003a36:	797b      	ldrb	r3, [r7, #5]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d109      	bne.n	8003a50 <wm8994_SetVolume+0xdc>
    {
      /* Mute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8003a3c:	88fb      	ldrh	r3, [r7, #6]
 8003a3e:	2101      	movs	r1, #1
 8003a40:	4618      	mov	r0, r3
 8003a42:	f000 f8bb 	bl	8003bbc <wm8994_SetMute>
 8003a46:	4602      	mov	r2, r0
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	4413      	add	r3, r2
 8003a4c:	60fb      	str	r3, [r7, #12]
 8003a4e:	e04c      	b.n	8003aea <wm8994_SetVolume+0x176>
    }
    else
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8003a50:	88fb      	ldrh	r3, [r7, #6]
 8003a52:	2100      	movs	r1, #0
 8003a54:	4618      	mov	r0, r3
 8003a56:	f000 f8b1 	bl	8003bbc <wm8994_SetMute>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	4413      	add	r3, r2
 8003a60:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 8003a62:	88fb      	ldrh	r3, [r7, #6]
 8003a64:	b2d8      	uxtb	r0, r3
 8003a66:	7afb      	ldrb	r3, [r7, #11]
 8003a68:	b21b      	sxth	r3, r3
 8003a6a:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8003a6e:	b21b      	sxth	r3, r3
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	461a      	mov	r2, r3
 8003a74:	211c      	movs	r1, #28
 8003a76:	f000 fb07 	bl	8004088 <CODEC_IO_Write>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	4413      	add	r3, r2
 8003a82:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 8003a84:	88fb      	ldrh	r3, [r7, #6]
 8003a86:	b2d8      	uxtb	r0, r3
 8003a88:	7afb      	ldrb	r3, [r7, #11]
 8003a8a:	b21b      	sxth	r3, r3
 8003a8c:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8003a90:	b21b      	sxth	r3, r3
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	461a      	mov	r2, r3
 8003a96:	211d      	movs	r1, #29
 8003a98:	f000 faf6 	bl	8004088 <CODEC_IO_Write>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 8003aa6:	88fb      	ldrh	r3, [r7, #6]
 8003aa8:	b2d8      	uxtb	r0, r3
 8003aaa:	7afb      	ldrb	r3, [r7, #11]
 8003aac:	b21b      	sxth	r3, r3
 8003aae:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8003ab2:	b21b      	sxth	r3, r3
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	2126      	movs	r1, #38	@ 0x26
 8003aba:	f000 fae5 	bl	8004088 <CODEC_IO_Write>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	4413      	add	r3, r2
 8003ac6:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 8003ac8:	88fb      	ldrh	r3, [r7, #6]
 8003aca:	b2d8      	uxtb	r0, r3
 8003acc:	7afb      	ldrb	r3, [r7, #11]
 8003ace:	b21b      	sxth	r3, r3
 8003ad0:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8003ad4:	b21b      	sxth	r3, r3
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	461a      	mov	r2, r3
 8003ada:	2127      	movs	r1, #39	@ 0x27
 8003adc:	f000 fad4 	bl	8004088 <CODEC_IO_Write>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	4413      	add	r3, r2
 8003ae8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Input volume */
  if (inputEnabled != 0)
 8003aea:	4b33      	ldr	r3, [pc, #204]	@ (8003bb8 <wm8994_SetVolume+0x244>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d059      	beq.n	8003ba6 <wm8994_SetVolume+0x232>
  {
    convertedvol = VOLUME_IN_CONVERT(Volume);
 8003af2:	797b      	ldrb	r3, [r7, #5]
 8003af4:	2b63      	cmp	r3, #99	@ 0x63
 8003af6:	d80c      	bhi.n	8003b12 <wm8994_SetVolume+0x19e>
 8003af8:	797a      	ldrb	r2, [r7, #5]
 8003afa:	4613      	mov	r3, r2
 8003afc:	011b      	lsls	r3, r3, #4
 8003afe:	1a9b      	subs	r3, r3, r2
 8003b00:	011b      	lsls	r3, r3, #4
 8003b02:	4a2b      	ldr	r2, [pc, #172]	@ (8003bb0 <wm8994_SetVolume+0x23c>)
 8003b04:	fb82 1203 	smull	r1, r2, r2, r3
 8003b08:	1152      	asrs	r2, r2, #5
 8003b0a:	17db      	asrs	r3, r3, #31
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	e000      	b.n	8003b14 <wm8994_SetVolume+0x1a0>
 8003b12:	23ef      	movs	r3, #239	@ 0xef
 8003b14:	72fb      	strb	r3, [r7, #11]

    /* Left AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 8003b16:	88fb      	ldrh	r3, [r7, #6]
 8003b18:	b2d8      	uxtb	r0, r3
 8003b1a:	7afb      	ldrb	r3, [r7, #11]
 8003b1c:	b21b      	sxth	r3, r3
 8003b1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b22:	b21b      	sxth	r3, r3
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	461a      	mov	r2, r3
 8003b28:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003b2c:	f000 faac 	bl	8004088 <CODEC_IO_Write>
 8003b30:	4603      	mov	r3, r0
 8003b32:	461a      	mov	r2, r3
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	4413      	add	r3, r2
 8003b38:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x401, convertedvol | 0x100);
 8003b3a:	88fb      	ldrh	r3, [r7, #6]
 8003b3c:	b2d8      	uxtb	r0, r3
 8003b3e:	7afb      	ldrb	r3, [r7, #11]
 8003b40:	b21b      	sxth	r3, r3
 8003b42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b46:	b21b      	sxth	r3, r3
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	f240 4101 	movw	r1, #1025	@ 0x401
 8003b50:	f000 fa9a 	bl	8004088 <CODEC_IO_Write>
 8003b54:	4603      	mov	r3, r0
 8003b56:	461a      	mov	r2, r3
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	4413      	add	r3, r2
 8003b5c:	60fb      	str	r3, [r7, #12]

    /* Left AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x404, convertedvol | 0x100);
 8003b5e:	88fb      	ldrh	r3, [r7, #6]
 8003b60:	b2d8      	uxtb	r0, r3
 8003b62:	7afb      	ldrb	r3, [r7, #11]
 8003b64:	b21b      	sxth	r3, r3
 8003b66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b6a:	b21b      	sxth	r3, r3
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	461a      	mov	r2, r3
 8003b70:	f240 4104 	movw	r1, #1028	@ 0x404
 8003b74:	f000 fa88 	bl	8004088 <CODEC_IO_Write>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	4413      	add	r3, r2
 8003b80:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x405, convertedvol | 0x100);
 8003b82:	88fb      	ldrh	r3, [r7, #6]
 8003b84:	b2d8      	uxtb	r0, r3
 8003b86:	7afb      	ldrb	r3, [r7, #11]
 8003b88:	b21b      	sxth	r3, r3
 8003b8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b8e:	b21b      	sxth	r3, r3
 8003b90:	b29b      	uxth	r3, r3
 8003b92:	461a      	mov	r2, r3
 8003b94:	f240 4105 	movw	r1, #1029	@ 0x405
 8003b98:	f000 fa76 	bl	8004088 <CODEC_IO_Write>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	4413      	add	r3, r2
 8003ba4:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3710      	adds	r7, #16
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	51eb851f 	.word	0x51eb851f
 8003bb4:	20029778 	.word	0x20029778
 8003bb8:	2002977c 	.word	0x2002977c

08003bbc <wm8994_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	6039      	str	r1, [r7, #0]
 8003bc6:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	60fb      	str	r3, [r7, #12]
  
  if (outputEnabled != 0)
 8003bcc:	4b21      	ldr	r3, [pc, #132]	@ (8003c54 <wm8994_SetMute+0x98>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d039      	beq.n	8003c48 <wm8994_SetMute+0x8c>
  {
    /* Set the Mute mode */
    if(Cmd == AUDIO_MUTE_ON)
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d11c      	bne.n	8003c14 <wm8994_SetMute+0x58>
    {
      /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8003bda:	88fb      	ldrh	r3, [r7, #6]
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003be2:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8003be6:	4618      	mov	r0, r3
 8003be8:	f000 fa4e 	bl	8004088 <CODEC_IO_Write>
 8003bec:	4603      	mov	r3, r0
 8003bee:	461a      	mov	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	4413      	add	r3, r2
 8003bf4:	60fb      	str	r3, [r7, #12]

      /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 8003bf6:	88fb      	ldrh	r3, [r7, #6]
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003bfe:	f240 4122 	movw	r1, #1058	@ 0x422
 8003c02:	4618      	mov	r0, r3
 8003c04:	f000 fa40 	bl	8004088 <CODEC_IO_Write>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	4413      	add	r3, r2
 8003c10:	60fb      	str	r3, [r7, #12]
 8003c12:	e019      	b.n	8003c48 <wm8994_SetMute+0x8c>
    }
    else /* AUDIO_MUTE_OFF Disable the Mute */
    {
      /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 8003c14:	88fb      	ldrh	r3, [r7, #6]
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	2210      	movs	r2, #16
 8003c1a:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f000 fa32 	bl	8004088 <CODEC_IO_Write>
 8003c24:	4603      	mov	r3, r0
 8003c26:	461a      	mov	r2, r3
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	4413      	add	r3, r2
 8003c2c:	60fb      	str	r3, [r7, #12]

      /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 8003c2e:	88fb      	ldrh	r3, [r7, #6]
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	2210      	movs	r2, #16
 8003c34:	f240 4122 	movw	r1, #1058	@ 0x422
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f000 fa25 	bl	8004088 <CODEC_IO_Write>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	461a      	mov	r2, r3
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	4413      	add	r3, r2
 8003c46:	60fb      	str	r3, [r7, #12]
    }
  }
  return counter;
 8003c48:	68fb      	ldr	r3, [r7, #12]
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3710      	adds	r7, #16
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	20029778 	.word	0x20029778

08003c58 <wm8994_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	4603      	mov	r3, r0
 8003c60:	460a      	mov	r2, r1
 8003c62:	80fb      	strh	r3, [r7, #6]
 8003c64:	4613      	mov	r3, r2
 8003c66:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 8003c68:	2300      	movs	r3, #0
 8003c6a:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 8003c6c:	797b      	ldrb	r3, [r7, #5]
 8003c6e:	2b03      	cmp	r3, #3
 8003c70:	f000 808c 	beq.w	8003d8c <wm8994_SetOutputMode+0x134>
 8003c74:	2b03      	cmp	r3, #3
 8003c76:	f300 80cb 	bgt.w	8003e10 <wm8994_SetOutputMode+0x1b8>
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d002      	beq.n	8003c84 <wm8994_SetOutputMode+0x2c>
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d042      	beq.n	8003d08 <wm8994_SetOutputMode+0xb0>
 8003c82:	e0c5      	b.n	8003e10 <wm8994_SetOutputMode+0x1b8>
  {
  case OUTPUT_DEVICE_SPEAKER:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    Disable DAC2 (Left), Disable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8003c84:	88fb      	ldrh	r3, [r7, #6]
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	f640 420c 	movw	r2, #3084	@ 0xc0c
 8003c8c:	2105      	movs	r1, #5
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f000 f9fa 	bl	8004088 <CODEC_IO_Write>
 8003c94:	4603      	mov	r3, r0
 8003c96:	461a      	mov	r2, r3
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	4413      	add	r3, r2
 8003c9c:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8003c9e:	88fb      	ldrh	r3, [r7, #6]
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f240 6101 	movw	r1, #1537	@ 0x601
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f000 f9ed 	bl	8004088 <CODEC_IO_Write>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	4413      	add	r3, r2
 8003cb6:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8003cb8:	88fb      	ldrh	r3, [r7, #6]
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f240 6102 	movw	r1, #1538	@ 0x602
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f000 f9e0 	bl	8004088 <CODEC_IO_Write>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	461a      	mov	r2, r3
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	4413      	add	r3, r2
 8003cd0:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8003cd2:	88fb      	ldrh	r3, [r7, #6]
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	2202      	movs	r2, #2
 8003cd8:	f240 6104 	movw	r1, #1540	@ 0x604
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f000 f9d3 	bl	8004088 <CODEC_IO_Write>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	4413      	add	r3, r2
 8003cea:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8003cec:	88fb      	ldrh	r3, [r7, #6]
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	2202      	movs	r2, #2
 8003cf2:	f240 6105 	movw	r1, #1541	@ 0x605
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f000 f9c6 	bl	8004088 <CODEC_IO_Write>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	461a      	mov	r2, r3
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	4413      	add	r3, r2
 8003d04:	60fb      	str	r3, [r7, #12]
    break;
 8003d06:	e0c5      	b.n	8003e94 <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8003d08:	88fb      	ldrh	r3, [r7, #6]
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	f240 3203 	movw	r2, #771	@ 0x303
 8003d10:	2105      	movs	r1, #5
 8003d12:	4618      	mov	r0, r3
 8003d14:	f000 f9b8 	bl	8004088 <CODEC_IO_Write>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	4413      	add	r3, r2
 8003d20:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8003d22:	88fb      	ldrh	r3, [r7, #6]
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	2201      	movs	r2, #1
 8003d28:	f240 6101 	movw	r1, #1537	@ 0x601
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f000 f9ab 	bl	8004088 <CODEC_IO_Write>
 8003d32:	4603      	mov	r3, r0
 8003d34:	461a      	mov	r2, r3
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	4413      	add	r3, r2
 8003d3a:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8003d3c:	88fb      	ldrh	r3, [r7, #6]
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	2201      	movs	r2, #1
 8003d42:	f240 6102 	movw	r1, #1538	@ 0x602
 8003d46:	4618      	mov	r0, r3
 8003d48:	f000 f99e 	bl	8004088 <CODEC_IO_Write>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	461a      	mov	r2, r3
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	4413      	add	r3, r2
 8003d54:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8003d56:	88fb      	ldrh	r3, [r7, #6]
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f240 6104 	movw	r1, #1540	@ 0x604
 8003d60:	4618      	mov	r0, r3
 8003d62:	f000 f991 	bl	8004088 <CODEC_IO_Write>
 8003d66:	4603      	mov	r3, r0
 8003d68:	461a      	mov	r2, r3
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	4413      	add	r3, r2
 8003d6e:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8003d70:	88fb      	ldrh	r3, [r7, #6]
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	2200      	movs	r2, #0
 8003d76:	f240 6105 	movw	r1, #1541	@ 0x605
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f000 f984 	bl	8004088 <CODEC_IO_Write>
 8003d80:	4603      	mov	r3, r0
 8003d82:	461a      	mov	r2, r3
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	4413      	add	r3, r2
 8003d88:	60fb      	str	r3, [r7, #12]
    break;
 8003d8a:	e083      	b.n	8003e94 <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_BOTH:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    also Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8003d8c:	88fb      	ldrh	r3, [r7, #6]
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	f640 720f 	movw	r2, #3855	@ 0xf0f
 8003d94:	2105      	movs	r1, #5
 8003d96:	4618      	mov	r0, r3
 8003d98:	f000 f976 	bl	8004088 <CODEC_IO_Write>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	461a      	mov	r2, r3
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	4413      	add	r3, r2
 8003da4:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8003da6:	88fb      	ldrh	r3, [r7, #6]
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	2201      	movs	r2, #1
 8003dac:	f240 6101 	movw	r1, #1537	@ 0x601
 8003db0:	4618      	mov	r0, r3
 8003db2:	f000 f969 	bl	8004088 <CODEC_IO_Write>
 8003db6:	4603      	mov	r3, r0
 8003db8:	461a      	mov	r2, r3
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	4413      	add	r3, r2
 8003dbe:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8003dc0:	88fb      	ldrh	r3, [r7, #6]
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	f240 6102 	movw	r1, #1538	@ 0x602
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f000 f95c 	bl	8004088 <CODEC_IO_Write>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	4413      	add	r3, r2
 8003dd8:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8003dda:	88fb      	ldrh	r3, [r7, #6]
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	2202      	movs	r2, #2
 8003de0:	f240 6104 	movw	r1, #1540	@ 0x604
 8003de4:	4618      	mov	r0, r3
 8003de6:	f000 f94f 	bl	8004088 <CODEC_IO_Write>
 8003dea:	4603      	mov	r3, r0
 8003dec:	461a      	mov	r2, r3
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	4413      	add	r3, r2
 8003df2:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8003df4:	88fb      	ldrh	r3, [r7, #6]
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	2202      	movs	r2, #2
 8003dfa:	f240 6105 	movw	r1, #1541	@ 0x605
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f000 f942 	bl	8004088 <CODEC_IO_Write>
 8003e04:	4603      	mov	r3, r0
 8003e06:	461a      	mov	r2, r3
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	4413      	add	r3, r2
 8003e0c:	60fb      	str	r3, [r7, #12]
    break;
 8003e0e:	e041      	b.n	8003e94 <wm8994_SetOutputMode+0x23c>
    
  default:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8003e10:	88fb      	ldrh	r3, [r7, #6]
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	f240 3203 	movw	r2, #771	@ 0x303
 8003e18:	2105      	movs	r1, #5
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f000 f934 	bl	8004088 <CODEC_IO_Write>
 8003e20:	4603      	mov	r3, r0
 8003e22:	461a      	mov	r2, r3
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	4413      	add	r3, r2
 8003e28:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8003e2a:	88fb      	ldrh	r3, [r7, #6]
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f240 6101 	movw	r1, #1537	@ 0x601
 8003e34:	4618      	mov	r0, r3
 8003e36:	f000 f927 	bl	8004088 <CODEC_IO_Write>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	4413      	add	r3, r2
 8003e42:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8003e44:	88fb      	ldrh	r3, [r7, #6]
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	2201      	movs	r2, #1
 8003e4a:	f240 6102 	movw	r1, #1538	@ 0x602
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f000 f91a 	bl	8004088 <CODEC_IO_Write>
 8003e54:	4603      	mov	r3, r0
 8003e56:	461a      	mov	r2, r3
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	4413      	add	r3, r2
 8003e5c:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8003e5e:	88fb      	ldrh	r3, [r7, #6]
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	2200      	movs	r2, #0
 8003e64:	f240 6104 	movw	r1, #1540	@ 0x604
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f000 f90d 	bl	8004088 <CODEC_IO_Write>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	461a      	mov	r2, r3
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	4413      	add	r3, r2
 8003e76:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8003e78:	88fb      	ldrh	r3, [r7, #6]
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f240 6105 	movw	r1, #1541	@ 0x605
 8003e82:	4618      	mov	r0, r3
 8003e84:	f000 f900 	bl	8004088 <CODEC_IO_Write>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	4413      	add	r3, r2
 8003e90:	60fb      	str	r3, [r7, #12]
    break;    
 8003e92:	bf00      	nop
  }  
  return counter;
 8003e94:	68fb      	ldr	r3, [r7, #12]
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3710      	adds	r7, #16
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
	...

08003ea0 <wm8994_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	6039      	str	r1, [r7, #0]
 8003eaa:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8003eac:	2300      	movs	r3, #0
 8003eae:	60fb      	str	r3, [r7, #12]
 
  /*  Clock Configurations */
  switch (AudioFreq)
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	4a64      	ldr	r2, [pc, #400]	@ (8004044 <wm8994_SetFrequency+0x1a4>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d079      	beq.n	8003fac <wm8994_SetFrequency+0x10c>
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	4a62      	ldr	r2, [pc, #392]	@ (8004044 <wm8994_SetFrequency+0x1a4>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	f200 80ad 	bhi.w	800401c <wm8994_SetFrequency+0x17c>
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d061      	beq.n	8003f90 <wm8994_SetFrequency+0xf0>
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	f200 80a2 	bhi.w	800401c <wm8994_SetFrequency+0x17c>
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	f000 808e 	beq.w	8004000 <wm8994_SetFrequency+0x160>
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8003eea:	4293      	cmp	r3, r2
 8003eec:	f200 8096 	bhi.w	800401c <wm8994_SetFrequency+0x17c>
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8003ef6:	d03d      	beq.n	8003f74 <wm8994_SetFrequency+0xd4>
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8003efe:	f200 808d 	bhi.w	800401c <wm8994_SetFrequency+0x17c>
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	f245 6222 	movw	r2, #22050	@ 0x5622
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d06b      	beq.n	8003fe4 <wm8994_SetFrequency+0x144>
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	f245 6222 	movw	r2, #22050	@ 0x5622
 8003f12:	4293      	cmp	r3, r2
 8003f14:	f200 8082 	bhi.w	800401c <wm8994_SetFrequency+0x17c>
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8003f1e:	d01b      	beq.n	8003f58 <wm8994_SetFrequency+0xb8>
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8003f26:	d879      	bhi.n	800401c <wm8994_SetFrequency+0x17c>
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 8003f2e:	d005      	beq.n	8003f3c <wm8994_SetFrequency+0x9c>
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	f642 3211 	movw	r2, #11025	@ 0x2b11
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d046      	beq.n	8003fc8 <wm8994_SetFrequency+0x128>
 8003f3a:	e06f      	b.n	800401c <wm8994_SetFrequency+0x17c>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8003f3c:	88fb      	ldrh	r3, [r7, #6]
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	2203      	movs	r2, #3
 8003f42:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003f46:	4618      	mov	r0, r3
 8003f48:	f000 f89e 	bl	8004088 <CODEC_IO_Write>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	461a      	mov	r2, r3
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	4413      	add	r3, r2
 8003f54:	60fb      	str	r3, [r7, #12]
    break;
 8003f56:	e06f      	b.n	8004038 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 8003f58:	88fb      	ldrh	r3, [r7, #6]
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	2233      	movs	r2, #51	@ 0x33
 8003f5e:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003f62:	4618      	mov	r0, r3
 8003f64:	f000 f890 	bl	8004088 <CODEC_IO_Write>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	4413      	add	r3, r2
 8003f70:	60fb      	str	r3, [r7, #12]
    break;
 8003f72:	e061      	b.n	8004038 <wm8994_SetFrequency+0x198>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 8003f74:	88fb      	ldrh	r3, [r7, #6]
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	2263      	movs	r2, #99	@ 0x63
 8003f7a:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f000 f882 	bl	8004088 <CODEC_IO_Write>
 8003f84:	4603      	mov	r3, r0
 8003f86:	461a      	mov	r2, r3
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	4413      	add	r3, r2
 8003f8c:	60fb      	str	r3, [r7, #12]
    break;
 8003f8e:	e053      	b.n	8004038 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8003f90:	88fb      	ldrh	r3, [r7, #6]
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	2283      	movs	r2, #131	@ 0x83
 8003f96:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f000 f874 	bl	8004088 <CODEC_IO_Write>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	4413      	add	r3, r2
 8003fa8:	60fb      	str	r3, [r7, #12]
    break;
 8003faa:	e045      	b.n	8004038 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 8003fac:	88fb      	ldrh	r3, [r7, #6]
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	22a3      	movs	r2, #163	@ 0xa3
 8003fb2:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f000 f866 	bl	8004088 <CODEC_IO_Write>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	60fb      	str	r3, [r7, #12]
    break;
 8003fc6:	e037      	b.n	8004038 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 8003fc8:	88fb      	ldrh	r3, [r7, #6]
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	2213      	movs	r2, #19
 8003fce:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f000 f858 	bl	8004088 <CODEC_IO_Write>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	461a      	mov	r2, r3
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	4413      	add	r3, r2
 8003fe0:	60fb      	str	r3, [r7, #12]
    break;
 8003fe2:	e029      	b.n	8004038 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8003fe4:	88fb      	ldrh	r3, [r7, #6]
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	2243      	movs	r2, #67	@ 0x43
 8003fea:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f000 f84a 	bl	8004088 <CODEC_IO_Write>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	4413      	add	r3, r2
 8003ffc:	60fb      	str	r3, [r7, #12]
    break;
 8003ffe:	e01b      	b.n	8004038 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 8004000:	88fb      	ldrh	r3, [r7, #6]
 8004002:	b2db      	uxtb	r3, r3
 8004004:	2273      	movs	r2, #115	@ 0x73
 8004006:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800400a:	4618      	mov	r0, r3
 800400c:	f000 f83c 	bl	8004088 <CODEC_IO_Write>
 8004010:	4603      	mov	r3, r0
 8004012:	461a      	mov	r2, r3
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	4413      	add	r3, r2
 8004018:	60fb      	str	r3, [r7, #12]
    break; 
 800401a:	e00d      	b.n	8004038 <wm8994_SetFrequency+0x198>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 800401c:	88fb      	ldrh	r3, [r7, #6]
 800401e:	b2db      	uxtb	r3, r3
 8004020:	2283      	movs	r2, #131	@ 0x83
 8004022:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8004026:	4618      	mov	r0, r3
 8004028:	f000 f82e 	bl	8004088 <CODEC_IO_Write>
 800402c:	4603      	mov	r3, r0
 800402e:	461a      	mov	r2, r3
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	4413      	add	r3, r2
 8004034:	60fb      	str	r3, [r7, #12]
    break; 
 8004036:	bf00      	nop
  }
  return counter;
 8004038:	68fb      	ldr	r3, [r7, #12]
}
 800403a:	4618      	mov	r0, r3
 800403c:	3710      	adds	r7, #16
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	00017700 	.word	0x00017700

08004048 <wm8994_Reset>:
  * @brief Resets wm8994 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Reset(uint16_t DeviceAddr)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	4603      	mov	r3, r0
 8004050:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8004052:	2300      	movs	r3, #0
 8004054:	60fb      	str	r3, [r7, #12]
  
  /* Reset Codec by writing in 0x0000 address register */
  counter = CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8004056:	88fb      	ldrh	r3, [r7, #6]
 8004058:	b2db      	uxtb	r3, r3
 800405a:	2200      	movs	r2, #0
 800405c:	2100      	movs	r1, #0
 800405e:	4618      	mov	r0, r3
 8004060:	f000 f812 	bl	8004088 <CODEC_IO_Write>
 8004064:	4603      	mov	r3, r0
 8004066:	60fb      	str	r3, [r7, #12]
  outputEnabled = 0;
 8004068:	4b05      	ldr	r3, [pc, #20]	@ (8004080 <wm8994_Reset+0x38>)
 800406a:	2200      	movs	r2, #0
 800406c:	601a      	str	r2, [r3, #0]
  inputEnabled=0;
 800406e:	4b05      	ldr	r3, [pc, #20]	@ (8004084 <wm8994_Reset+0x3c>)
 8004070:	2200      	movs	r2, #0
 8004072:	601a      	str	r2, [r3, #0]

  return counter;
 8004074:	68fb      	ldr	r3, [r7, #12]
}
 8004076:	4618      	mov	r0, r3
 8004078:	3710      	adds	r7, #16
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop
 8004080:	20029778 	.word	0x20029778
 8004084:	2002977c 	.word	0x2002977c

08004088 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	4603      	mov	r3, r0
 8004090:	71fb      	strb	r3, [r7, #7]
 8004092:	460b      	mov	r3, r1
 8004094:	80bb      	strh	r3, [r7, #4]
 8004096:	4613      	mov	r3, r2
 8004098:	807b      	strh	r3, [r7, #2]
  uint32_t result = 0;
 800409a:	2300      	movs	r3, #0
 800409c:	60fb      	str	r3, [r7, #12]
  
 AUDIO_IO_Write(Addr, Reg, Value);
 800409e:	887a      	ldrh	r2, [r7, #2]
 80040a0:	88b9      	ldrh	r1, [r7, #4]
 80040a2:	79fb      	ldrb	r3, [r7, #7]
 80040a4:	4618      	mov	r0, r3
 80040a6:	f000 f96f 	bl	8004388 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	b2db      	uxtb	r3, r3
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3710      	adds	r7, #16
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
	...

080040b8 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b08c      	sub	sp, #48	@ 0x30
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	4a51      	ldr	r2, [pc, #324]	@ (8004208 <I2Cx_MspInit+0x150>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d14d      	bne.n	8004164 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80040c8:	4b50      	ldr	r3, [pc, #320]	@ (800420c <I2Cx_MspInit+0x154>)
 80040ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040cc:	4a4f      	ldr	r2, [pc, #316]	@ (800420c <I2Cx_MspInit+0x154>)
 80040ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80040d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80040d4:	4b4d      	ldr	r3, [pc, #308]	@ (800420c <I2Cx_MspInit+0x154>)
 80040d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040dc:	61bb      	str	r3, [r7, #24]
 80040de:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 80040e0:	2380      	movs	r3, #128	@ 0x80
 80040e2:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80040e4:	2312      	movs	r3, #18
 80040e6:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80040e8:	2300      	movs	r3, #0
 80040ea:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80040ec:	2302      	movs	r3, #2
 80040ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 80040f0:	2304      	movs	r3, #4
 80040f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80040f4:	f107 031c 	add.w	r3, r7, #28
 80040f8:	4619      	mov	r1, r3
 80040fa:	4845      	ldr	r0, [pc, #276]	@ (8004210 <I2Cx_MspInit+0x158>)
 80040fc:	f001 fc3a 	bl	8005974 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8004100:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004104:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8004106:	f107 031c 	add.w	r3, r7, #28
 800410a:	4619      	mov	r1, r3
 800410c:	4840      	ldr	r0, [pc, #256]	@ (8004210 <I2Cx_MspInit+0x158>)
 800410e:	f001 fc31 	bl	8005974 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8004112:	4b3e      	ldr	r3, [pc, #248]	@ (800420c <I2Cx_MspInit+0x154>)
 8004114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004116:	4a3d      	ldr	r2, [pc, #244]	@ (800420c <I2Cx_MspInit+0x154>)
 8004118:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800411c:	6413      	str	r3, [r2, #64]	@ 0x40
 800411e:	4b3b      	ldr	r3, [pc, #236]	@ (800420c <I2Cx_MspInit+0x154>)
 8004120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004122:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004126:	617b      	str	r3, [r7, #20]
 8004128:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 800412a:	4b38      	ldr	r3, [pc, #224]	@ (800420c <I2Cx_MspInit+0x154>)
 800412c:	6a1b      	ldr	r3, [r3, #32]
 800412e:	4a37      	ldr	r2, [pc, #220]	@ (800420c <I2Cx_MspInit+0x154>)
 8004130:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004134:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8004136:	4b35      	ldr	r3, [pc, #212]	@ (800420c <I2Cx_MspInit+0x154>)
 8004138:	6a1b      	ldr	r3, [r3, #32]
 800413a:	4a34      	ldr	r2, [pc, #208]	@ (800420c <I2Cx_MspInit+0x154>)
 800413c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004140:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8004142:	2200      	movs	r2, #0
 8004144:	210f      	movs	r1, #15
 8004146:	2048      	movs	r0, #72	@ 0x48
 8004148:	f000 fe77 	bl	8004e3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 800414c:	2048      	movs	r0, #72	@ 0x48
 800414e:	f000 fe90 	bl	8004e72 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8004152:	2200      	movs	r2, #0
 8004154:	210f      	movs	r1, #15
 8004156:	2049      	movs	r0, #73	@ 0x49
 8004158:	f000 fe6f 	bl	8004e3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 800415c:	2049      	movs	r0, #73	@ 0x49
 800415e:	f000 fe88 	bl	8004e72 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8004162:	e04d      	b.n	8004200 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8004164:	4b29      	ldr	r3, [pc, #164]	@ (800420c <I2Cx_MspInit+0x154>)
 8004166:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004168:	4a28      	ldr	r2, [pc, #160]	@ (800420c <I2Cx_MspInit+0x154>)
 800416a:	f043 0302 	orr.w	r3, r3, #2
 800416e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004170:	4b26      	ldr	r3, [pc, #152]	@ (800420c <I2Cx_MspInit+0x154>)
 8004172:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004174:	f003 0302 	and.w	r3, r3, #2
 8004178:	613b      	str	r3, [r7, #16]
 800417a:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 800417c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004180:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8004182:	2312      	movs	r3, #18
 8004184:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8004186:	2300      	movs	r3, #0
 8004188:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800418a:	2302      	movs	r3, #2
 800418c:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 800418e:	2304      	movs	r3, #4
 8004190:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8004192:	f107 031c 	add.w	r3, r7, #28
 8004196:	4619      	mov	r1, r3
 8004198:	481e      	ldr	r0, [pc, #120]	@ (8004214 <I2Cx_MspInit+0x15c>)
 800419a:	f001 fbeb 	bl	8005974 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 800419e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80041a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80041a4:	f107 031c 	add.w	r3, r7, #28
 80041a8:	4619      	mov	r1, r3
 80041aa:	481a      	ldr	r0, [pc, #104]	@ (8004214 <I2Cx_MspInit+0x15c>)
 80041ac:	f001 fbe2 	bl	8005974 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 80041b0:	4b16      	ldr	r3, [pc, #88]	@ (800420c <I2Cx_MspInit+0x154>)
 80041b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041b4:	4a15      	ldr	r2, [pc, #84]	@ (800420c <I2Cx_MspInit+0x154>)
 80041b6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80041ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80041bc:	4b13      	ldr	r3, [pc, #76]	@ (800420c <I2Cx_MspInit+0x154>)
 80041be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80041c4:	60fb      	str	r3, [r7, #12]
 80041c6:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 80041c8:	4b10      	ldr	r3, [pc, #64]	@ (800420c <I2Cx_MspInit+0x154>)
 80041ca:	6a1b      	ldr	r3, [r3, #32]
 80041cc:	4a0f      	ldr	r2, [pc, #60]	@ (800420c <I2Cx_MspInit+0x154>)
 80041ce:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80041d2:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 80041d4:	4b0d      	ldr	r3, [pc, #52]	@ (800420c <I2Cx_MspInit+0x154>)
 80041d6:	6a1b      	ldr	r3, [r3, #32]
 80041d8:	4a0c      	ldr	r2, [pc, #48]	@ (800420c <I2Cx_MspInit+0x154>)
 80041da:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80041de:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 80041e0:	2200      	movs	r2, #0
 80041e2:	210f      	movs	r1, #15
 80041e4:	201f      	movs	r0, #31
 80041e6:	f000 fe28 	bl	8004e3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 80041ea:	201f      	movs	r0, #31
 80041ec:	f000 fe41 	bl	8004e72 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 80041f0:	2200      	movs	r2, #0
 80041f2:	210f      	movs	r1, #15
 80041f4:	2020      	movs	r0, #32
 80041f6:	f000 fe20 	bl	8004e3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 80041fa:	2020      	movs	r0, #32
 80041fc:	f000 fe39 	bl	8004e72 <HAL_NVIC_EnableIRQ>
}
 8004200:	bf00      	nop
 8004202:	3730      	adds	r7, #48	@ 0x30
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}
 8004208:	20029780 	.word	0x20029780
 800420c:	40023800 	.word	0x40023800
 8004210:	40021c00 	.word	0x40021c00
 8004214:	40020400 	.word	0x40020400

08004218 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b082      	sub	sp, #8
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f002 f9d1 	bl	80065c8 <HAL_I2C_GetState>
 8004226:	4603      	mov	r3, r0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d125      	bne.n	8004278 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	4a14      	ldr	r2, [pc, #80]	@ (8004280 <I2Cx_Init+0x68>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d103      	bne.n	800423c <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	4a13      	ldr	r2, [pc, #76]	@ (8004284 <I2Cx_Init+0x6c>)
 8004238:	601a      	str	r2, [r3, #0]
 800423a:	e002      	b.n	8004242 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	4a12      	ldr	r2, [pc, #72]	@ (8004288 <I2Cx_Init+0x70>)
 8004240:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	4a11      	ldr	r2, [pc, #68]	@ (800428c <I2Cx_Init+0x74>)
 8004246:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2201      	movs	r2, #1
 8004252:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f7ff ff23 	bl	80040b8 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f001 fe9a 	bl	8005fac <HAL_I2C_Init>
  }
}
 8004278:	bf00      	nop
 800427a:	3708      	adds	r7, #8
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}
 8004280:	20029780 	.word	0x20029780
 8004284:	40005c00 	.word	0x40005c00
 8004288:	40005400 	.word	0x40005400
 800428c:	40912732 	.word	0x40912732

08004290 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b08a      	sub	sp, #40	@ 0x28
 8004294:	af04      	add	r7, sp, #16
 8004296:	60f8      	str	r0, [r7, #12]
 8004298:	4608      	mov	r0, r1
 800429a:	4611      	mov	r1, r2
 800429c:	461a      	mov	r2, r3
 800429e:	4603      	mov	r3, r0
 80042a0:	72fb      	strb	r3, [r7, #11]
 80042a2:	460b      	mov	r3, r1
 80042a4:	813b      	strh	r3, [r7, #8]
 80042a6:	4613      	mov	r3, r2
 80042a8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80042aa:	2300      	movs	r3, #0
 80042ac:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80042ae:	7afb      	ldrb	r3, [r7, #11]
 80042b0:	b299      	uxth	r1, r3
 80042b2:	88f8      	ldrh	r0, [r7, #6]
 80042b4:	893a      	ldrh	r2, [r7, #8]
 80042b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80042ba:	9302      	str	r3, [sp, #8]
 80042bc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80042be:	9301      	str	r3, [sp, #4]
 80042c0:	6a3b      	ldr	r3, [r7, #32]
 80042c2:	9300      	str	r3, [sp, #0]
 80042c4:	4603      	mov	r3, r0
 80042c6:	68f8      	ldr	r0, [r7, #12]
 80042c8:	f002 f864 	bl	8006394 <HAL_I2C_Mem_Read>
 80042cc:	4603      	mov	r3, r0
 80042ce:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80042d0:	7dfb      	ldrb	r3, [r7, #23]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d004      	beq.n	80042e0 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 80042d6:	7afb      	ldrb	r3, [r7, #11]
 80042d8:	4619      	mov	r1, r3
 80042da:	68f8      	ldr	r0, [r7, #12]
 80042dc:	f000 f832 	bl	8004344 <I2Cx_Error>
  }
  return status;    
 80042e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3718      	adds	r7, #24
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}

080042ea <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 80042ea:	b580      	push	{r7, lr}
 80042ec:	b08a      	sub	sp, #40	@ 0x28
 80042ee:	af04      	add	r7, sp, #16
 80042f0:	60f8      	str	r0, [r7, #12]
 80042f2:	4608      	mov	r0, r1
 80042f4:	4611      	mov	r1, r2
 80042f6:	461a      	mov	r2, r3
 80042f8:	4603      	mov	r3, r0
 80042fa:	72fb      	strb	r3, [r7, #11]
 80042fc:	460b      	mov	r3, r1
 80042fe:	813b      	strh	r3, [r7, #8]
 8004300:	4613      	mov	r3, r2
 8004302:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8004304:	2300      	movs	r3, #0
 8004306:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8004308:	7afb      	ldrb	r3, [r7, #11]
 800430a:	b299      	uxth	r1, r3
 800430c:	88f8      	ldrh	r0, [r7, #6]
 800430e:	893a      	ldrh	r2, [r7, #8]
 8004310:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004314:	9302      	str	r3, [sp, #8]
 8004316:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004318:	9301      	str	r3, [sp, #4]
 800431a:	6a3b      	ldr	r3, [r7, #32]
 800431c:	9300      	str	r3, [sp, #0]
 800431e:	4603      	mov	r3, r0
 8004320:	68f8      	ldr	r0, [r7, #12]
 8004322:	f001 ff23 	bl	800616c <HAL_I2C_Mem_Write>
 8004326:	4603      	mov	r3, r0
 8004328:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800432a:	7dfb      	ldrb	r3, [r7, #23]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d004      	beq.n	800433a <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8004330:	7afb      	ldrb	r3, [r7, #11]
 8004332:	4619      	mov	r1, r3
 8004334:	68f8      	ldr	r0, [r7, #12]
 8004336:	f000 f805 	bl	8004344 <I2Cx_Error>
  }
  return status;
 800433a:	7dfb      	ldrb	r3, [r7, #23]
}
 800433c:	4618      	mov	r0, r3
 800433e:	3718      	adds	r7, #24
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}

08004344 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b082      	sub	sp, #8
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	460b      	mov	r3, r1
 800434e:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f001 fec7 	bl	80060e4 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f7ff ff5e 	bl	8004218 <I2Cx_Init>
}
 800435c:	bf00      	nop
 800435e:	3708      	adds	r7, #8
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}

08004364 <AUDIO_IO_Init>:
/**
  * @brief  Initializes Audio low level.
  * @retval None
  */
void AUDIO_IO_Init(void) 
{
 8004364:	b580      	push	{r7, lr}
 8004366:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8004368:	4802      	ldr	r0, [pc, #8]	@ (8004374 <AUDIO_IO_Init+0x10>)
 800436a:	f7ff ff55 	bl	8004218 <I2Cx_Init>
}
 800436e:	bf00      	nop
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	20029780 	.word	0x20029780

08004378 <AUDIO_IO_DeInit>:
/**
  * @brief  Deinitializes Audio low level.
  * @retval None
  */
void AUDIO_IO_DeInit(void)
{
 8004378:	b480      	push	{r7}
 800437a:	af00      	add	r7, sp, #0
}
 800437c:	bf00      	nop
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr
	...

08004388 <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b086      	sub	sp, #24
 800438c:	af02      	add	r7, sp, #8
 800438e:	4603      	mov	r3, r0
 8004390:	71fb      	strb	r3, [r7, #7]
 8004392:	460b      	mov	r3, r1
 8004394:	80bb      	strh	r3, [r7, #4]
 8004396:	4613      	mov	r3, r2
 8004398:	807b      	strh	r3, [r7, #2]
  uint16_t tmp = Value;
 800439a:	887b      	ldrh	r3, [r7, #2]
 800439c:	81fb      	strh	r3, [r7, #14]
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
 800439e:	89fb      	ldrh	r3, [r7, #14]
 80043a0:	0a1b      	lsrs	r3, r3, #8
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	807b      	strh	r3, [r7, #2]
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 80043a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80043aa:	021b      	lsls	r3, r3, #8
 80043ac:	b21a      	sxth	r2, r3
 80043ae:	887b      	ldrh	r3, [r7, #2]
 80043b0:	b21b      	sxth	r3, r3
 80043b2:	4313      	orrs	r3, r2
 80043b4:	b21b      	sxth	r3, r3
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	807b      	strh	r3, [r7, #2]
  
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 80043ba:	88ba      	ldrh	r2, [r7, #4]
 80043bc:	79f9      	ldrb	r1, [r7, #7]
 80043be:	2302      	movs	r3, #2
 80043c0:	9301      	str	r3, [sp, #4]
 80043c2:	1cbb      	adds	r3, r7, #2
 80043c4:	9300      	str	r3, [sp, #0]
 80043c6:	2302      	movs	r3, #2
 80043c8:	4803      	ldr	r0, [pc, #12]	@ (80043d8 <AUDIO_IO_Write+0x50>)
 80043ca:	f7ff ff8e 	bl	80042ea <I2Cx_WriteMultiple>
}
 80043ce:	bf00      	nop
 80043d0:	3710      	adds	r7, #16
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	20029780 	.word	0x20029780

080043dc <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint16_t AUDIO_IO_Read(uint8_t Addr, uint16_t Reg)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b086      	sub	sp, #24
 80043e0:	af02      	add	r7, sp, #8
 80043e2:	4603      	mov	r3, r0
 80043e4:	460a      	mov	r2, r1
 80043e6:	71fb      	strb	r3, [r7, #7]
 80043e8:	4613      	mov	r3, r2
 80043ea:	80bb      	strh	r3, [r7, #4]
  uint16_t read_value = 0, tmp = 0;
 80043ec:	2300      	movs	r3, #0
 80043ee:	81bb      	strh	r3, [r7, #12]
 80043f0:	2300      	movs	r3, #0
 80043f2:	81fb      	strh	r3, [r7, #14]
  
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 80043f4:	88ba      	ldrh	r2, [r7, #4]
 80043f6:	79f9      	ldrb	r1, [r7, #7]
 80043f8:	2302      	movs	r3, #2
 80043fa:	9301      	str	r3, [sp, #4]
 80043fc:	f107 030c 	add.w	r3, r7, #12
 8004400:	9300      	str	r3, [sp, #0]
 8004402:	2302      	movs	r3, #2
 8004404:	480a      	ldr	r0, [pc, #40]	@ (8004430 <AUDIO_IO_Read+0x54>)
 8004406:	f7ff ff43 	bl	8004290 <I2Cx_ReadMultiple>
  
  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
 800440a:	89bb      	ldrh	r3, [r7, #12]
 800440c:	0a1b      	lsrs	r3, r3, #8
 800440e:	81fb      	strh	r3, [r7, #14]
  
  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 8004410:	89bb      	ldrh	r3, [r7, #12]
 8004412:	b21b      	sxth	r3, r3
 8004414:	021b      	lsls	r3, r3, #8
 8004416:	b21a      	sxth	r2, r3
 8004418:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800441c:	4313      	orrs	r3, r2
 800441e:	b21b      	sxth	r3, r3
 8004420:	81fb      	strh	r3, [r7, #14]
  
  read_value = tmp;
 8004422:	89fb      	ldrh	r3, [r7, #14]
 8004424:	81bb      	strh	r3, [r7, #12]
  
  return read_value;
 8004426:	89bb      	ldrh	r3, [r7, #12]
}
 8004428:	4618      	mov	r0, r3
 800442a:	3710      	adds	r7, #16
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}
 8004430:	20029780 	.word	0x20029780

08004434 <AUDIO_IO_Delay>:
  * @brief  AUDIO Codec delay 
  * @param  Delay: Delay in ms
  * @retval None
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b082      	sub	sp, #8
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f000 fbfd 	bl	8004c3c <HAL_Delay>
}
 8004442:	bf00      	nop
 8004444:	3708      	adds	r7, #8
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
	...

0800444c <HAL_SAI_ErrorCallback>:
  * @brief  SAI error callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b084      	sub	sp, #16
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  HAL_SAI_StateTypeDef audio_out_state;
  HAL_SAI_StateTypeDef audio_in_state;

  audio_out_state = HAL_SAI_GetState(&haudio_out_sai);
 8004454:	480e      	ldr	r0, [pc, #56]	@ (8004490 <HAL_SAI_ErrorCallback+0x44>)
 8004456:	f004 f951 	bl	80086fc <HAL_SAI_GetState>
 800445a:	4603      	mov	r3, r0
 800445c:	73fb      	strb	r3, [r7, #15]
  audio_in_state = HAL_SAI_GetState(&haudio_in_sai);
 800445e:	480d      	ldr	r0, [pc, #52]	@ (8004494 <HAL_SAI_ErrorCallback+0x48>)
 8004460:	f004 f94c 	bl	80086fc <HAL_SAI_GetState>
 8004464:	4603      	mov	r3, r0
 8004466:	73bb      	strb	r3, [r7, #14]

  /* Determines if it is an audio out or audio in error */
  if ((audio_out_state == HAL_SAI_STATE_BUSY) || (audio_out_state == HAL_SAI_STATE_BUSY_TX))
 8004468:	7bfb      	ldrb	r3, [r7, #15]
 800446a:	2b02      	cmp	r3, #2
 800446c:	d002      	beq.n	8004474 <HAL_SAI_ErrorCallback+0x28>
 800446e:	7bfb      	ldrb	r3, [r7, #15]
 8004470:	2b12      	cmp	r3, #18
 8004472:	d101      	bne.n	8004478 <HAL_SAI_ErrorCallback+0x2c>
  {
    BSP_AUDIO_OUT_Error_CallBack();
 8004474:	f000 f810 	bl	8004498 <BSP_AUDIO_OUT_Error_CallBack>
  }

  if ((audio_in_state == HAL_SAI_STATE_BUSY) || (audio_in_state == HAL_SAI_STATE_BUSY_RX))
 8004478:	7bbb      	ldrb	r3, [r7, #14]
 800447a:	2b02      	cmp	r3, #2
 800447c:	d002      	beq.n	8004484 <HAL_SAI_ErrorCallback+0x38>
 800447e:	7bbb      	ldrb	r3, [r7, #14]
 8004480:	2b22      	cmp	r3, #34	@ 0x22
 8004482:	d101      	bne.n	8004488 <HAL_SAI_ErrorCallback+0x3c>
  {
    BSP_AUDIO_IN_Error_CallBack();
 8004484:	f000 f9f6 	bl	8004874 <BSP_AUDIO_IN_Error_CallBack>
  }
}
 8004488:	bf00      	nop
 800448a:	3710      	adds	r7, #16
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}
 8004490:	200297d8 	.word	0x200297d8
 8004494:	2002985c 	.word	0x2002985c

08004498 <BSP_AUDIO_OUT_Error_CallBack>:
/**
  * @brief  Manages the DMA FIFO error event.
  * @retval None
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(void)
{
 8004498:	b480      	push	{r7}
 800449a:	af00      	add	r7, sp, #0
}
 800449c:	bf00      	nop
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr
	...

080044a8 <BSP_AUDIO_OUT_MspInit>:
  * @param  hsai: SAI handle
  * @param  Params
  * @retval None
  */
__weak void BSP_AUDIO_OUT_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{ 
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b08c      	sub	sp, #48	@ 0x30
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_sai_tx;
  GPIO_InitTypeDef  gpio_init_structure;  

  /* Enable SAI clock */
  AUDIO_OUT_SAIx_CLK_ENABLE();
 80044b2:	4b63      	ldr	r3, [pc, #396]	@ (8004640 <BSP_AUDIO_OUT_MspInit+0x198>)
 80044b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044b6:	4a62      	ldr	r2, [pc, #392]	@ (8004640 <BSP_AUDIO_OUT_MspInit+0x198>)
 80044b8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80044bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80044be:	4b60      	ldr	r3, [pc, #384]	@ (8004640 <BSP_AUDIO_OUT_MspInit+0x198>)
 80044c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80044c6:	61bb      	str	r3, [r7, #24]
 80044c8:	69bb      	ldr	r3, [r7, #24]
  
  /* Enable GPIO clock */
  AUDIO_OUT_SAIx_MCLK_ENABLE();
 80044ca:	4b5d      	ldr	r3, [pc, #372]	@ (8004640 <BSP_AUDIO_OUT_MspInit+0x198>)
 80044cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ce:	4a5c      	ldr	r2, [pc, #368]	@ (8004640 <BSP_AUDIO_OUT_MspInit+0x198>)
 80044d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80044d6:	4b5a      	ldr	r3, [pc, #360]	@ (8004640 <BSP_AUDIO_OUT_MspInit+0x198>)
 80044d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044de:	617b      	str	r3, [r7, #20]
 80044e0:	697b      	ldr	r3, [r7, #20]
  AUDIO_OUT_SAIx_SCK_SD_ENABLE();
 80044e2:	4b57      	ldr	r3, [pc, #348]	@ (8004640 <BSP_AUDIO_OUT_MspInit+0x198>)
 80044e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044e6:	4a56      	ldr	r2, [pc, #344]	@ (8004640 <BSP_AUDIO_OUT_MspInit+0x198>)
 80044e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80044ee:	4b54      	ldr	r3, [pc, #336]	@ (8004640 <BSP_AUDIO_OUT_MspInit+0x198>)
 80044f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044f6:	613b      	str	r3, [r7, #16]
 80044f8:	693b      	ldr	r3, [r7, #16]
  AUDIO_OUT_SAIx_FS_ENABLE();
 80044fa:	4b51      	ldr	r3, [pc, #324]	@ (8004640 <BSP_AUDIO_OUT_MspInit+0x198>)
 80044fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044fe:	4a50      	ldr	r2, [pc, #320]	@ (8004640 <BSP_AUDIO_OUT_MspInit+0x198>)
 8004500:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004504:	6313      	str	r3, [r2, #48]	@ 0x30
 8004506:	4b4e      	ldr	r3, [pc, #312]	@ (8004640 <BSP_AUDIO_OUT_MspInit+0x198>)
 8004508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800450a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800450e:	60fb      	str	r3, [r7, #12]
 8004510:	68fb      	ldr	r3, [r7, #12]
  /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN;
 8004512:	2380      	movs	r3, #128	@ 0x80
 8004514:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8004516:	2302      	movs	r3, #2
 8004518:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 800451a:	2300      	movs	r3, #0
 800451c:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 800451e:	2303      	movs	r3, #3
 8004520:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8004522:	230a      	movs	r3, #10
 8004524:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
 8004526:	f107 031c 	add.w	r3, r7, #28
 800452a:	4619      	mov	r1, r3
 800452c:	4845      	ldr	r0, [pc, #276]	@ (8004644 <BSP_AUDIO_OUT_MspInit+0x19c>)
 800452e:	f001 fa21 	bl	8005974 <HAL_GPIO_Init>

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_SCK_PIN;
 8004532:	2320      	movs	r3, #32
 8004534:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8004536:	2302      	movs	r3, #2
 8004538:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 800453a:	2300      	movs	r3, #0
 800453c:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 800453e:	2303      	movs	r3, #3
 8004540:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SCK_AF;
 8004542:	230a      	movs	r3, #10
 8004544:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 8004546:	f107 031c 	add.w	r3, r7, #28
 800454a:	4619      	mov	r1, r3
 800454c:	483d      	ldr	r0, [pc, #244]	@ (8004644 <BSP_AUDIO_OUT_MspInit+0x19c>)
 800454e:	f001 fa11 	bl	8005974 <HAL_GPIO_Init>

  gpio_init_structure.Pin =  AUDIO_OUT_SAIx_SD_PIN;
 8004552:	2340      	movs	r3, #64	@ 0x40
 8004554:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8004556:	2302      	movs	r3, #2
 8004558:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 800455a:	2300      	movs	r3, #0
 800455c:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 800455e:	2303      	movs	r3, #3
 8004560:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8004562:	230a      	movs	r3, #10
 8004564:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 8004566:	f107 031c 	add.w	r3, r7, #28
 800456a:	4619      	mov	r1, r3
 800456c:	4835      	ldr	r0, [pc, #212]	@ (8004644 <BSP_AUDIO_OUT_MspInit+0x19c>)
 800456e:	f001 fa01 	bl	8005974 <HAL_GPIO_Init>

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 8004572:	2310      	movs	r3, #16
 8004574:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8004576:	2302      	movs	r3, #2
 8004578:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 800457a:	2300      	movs	r3, #0
 800457c:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 800457e:	2303      	movs	r3, #3
 8004580:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8004582:	230a      	movs	r3, #10
 8004584:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 8004586:	f107 031c 	add.w	r3, r7, #28
 800458a:	4619      	mov	r1, r3
 800458c:	482d      	ldr	r0, [pc, #180]	@ (8004644 <BSP_AUDIO_OUT_MspInit+0x19c>)
 800458e:	f001 f9f1 	bl	8005974 <HAL_GPIO_Init>

  /* Enable the DMA clock */
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 8004592:	4b2b      	ldr	r3, [pc, #172]	@ (8004640 <BSP_AUDIO_OUT_MspInit+0x198>)
 8004594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004596:	4a2a      	ldr	r2, [pc, #168]	@ (8004640 <BSP_AUDIO_OUT_MspInit+0x198>)
 8004598:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800459c:	6313      	str	r3, [r2, #48]	@ 0x30
 800459e:	4b28      	ldr	r3, [pc, #160]	@ (8004640 <BSP_AUDIO_OUT_MspInit+0x198>)
 80045a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045a6:	60bb      	str	r3, [r7, #8]
 80045a8:	68bb      	ldr	r3, [r7, #8]
    
  if(hsai->Instance == AUDIO_OUT_SAIx)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a26      	ldr	r2, [pc, #152]	@ (8004648 <BSP_AUDIO_OUT_MspInit+0x1a0>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d138      	bne.n	8004626 <BSP_AUDIO_OUT_MspInit+0x17e>
  {
    /* Configure the hdma_saiTx handle parameters */   
    hdma_sai_tx.Init.Channel             = AUDIO_OUT_SAIx_DMAx_CHANNEL;
 80045b4:	4b25      	ldr	r3, [pc, #148]	@ (800464c <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80045b6:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80045ba:	605a      	str	r2, [r3, #4]
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 80045bc:	4b23      	ldr	r3, [pc, #140]	@ (800464c <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80045be:	2240      	movs	r2, #64	@ 0x40
 80045c0:	609a      	str	r2, [r3, #8]
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 80045c2:	4b22      	ldr	r3, [pc, #136]	@ (800464c <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80045c4:	2200      	movs	r2, #0
 80045c6:	60da      	str	r2, [r3, #12]
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
 80045c8:	4b20      	ldr	r3, [pc, #128]	@ (800464c <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80045ca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80045ce:	611a      	str	r2, [r3, #16]
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
 80045d0:	4b1e      	ldr	r3, [pc, #120]	@ (800464c <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80045d2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80045d6:	615a      	str	r2, [r3, #20]
    hdma_sai_tx.Init.MemDataAlignment    = AUDIO_OUT_SAIx_DMAx_MEM_DATA_SIZE;
 80045d8:	4b1c      	ldr	r3, [pc, #112]	@ (800464c <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80045da:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80045de:	619a      	str	r2, [r3, #24]
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
 80045e0:	4b1a      	ldr	r3, [pc, #104]	@ (800464c <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80045e2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80045e6:	61da      	str	r2, [r3, #28]
    hdma_sai_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 80045e8:	4b18      	ldr	r3, [pc, #96]	@ (800464c <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80045ea:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80045ee:	621a      	str	r2, [r3, #32]
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 80045f0:	4b16      	ldr	r3, [pc, #88]	@ (800464c <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80045f2:	2204      	movs	r2, #4
 80045f4:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sai_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80045f6:	4b15      	ldr	r3, [pc, #84]	@ (800464c <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80045f8:	2203      	movs	r2, #3
 80045fa:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sai_tx.Init.MemBurst            = DMA_MBURST_SINGLE;
 80045fc:	4b13      	ldr	r3, [pc, #76]	@ (800464c <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80045fe:	2200      	movs	r2, #0
 8004600:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8004602:	4b12      	ldr	r3, [pc, #72]	@ (800464c <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004604:	2200      	movs	r2, #0
 8004606:	631a      	str	r2, [r3, #48]	@ 0x30
    
    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 8004608:	4b10      	ldr	r3, [pc, #64]	@ (800464c <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800460a:	4a11      	ldr	r2, [pc, #68]	@ (8004650 <BSP_AUDIO_OUT_MspInit+0x1a8>)
 800460c:	601a      	str	r2, [r3, #0]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4a0e      	ldr	r2, [pc, #56]	@ (800464c <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004612:	66da      	str	r2, [r3, #108]	@ 0x6c
 8004614:	4a0d      	ldr	r2, [pc, #52]	@ (800464c <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6393      	str	r3, [r2, #56]	@ 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_tx);
 800461a:	480c      	ldr	r0, [pc, #48]	@ (800464c <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800461c:	f000 fde4 	bl	80051e8 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_tx);      
 8004620:	480a      	ldr	r0, [pc, #40]	@ (800464c <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004622:	f000 fd33 	bl	800508c <HAL_DMA_Init>
  }
  
  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 8004626:	2200      	movs	r2, #0
 8004628:	210e      	movs	r1, #14
 800462a:	203c      	movs	r0, #60	@ 0x3c
 800462c:	f000 fc05 	bl	8004e3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ); 
 8004630:	203c      	movs	r0, #60	@ 0x3c
 8004632:	f000 fc1e 	bl	8004e72 <HAL_NVIC_EnableIRQ>
}
 8004636:	bf00      	nop
 8004638:	3730      	adds	r7, #48	@ 0x30
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	40023800 	.word	0x40023800
 8004644:	40022000 	.word	0x40022000
 8004648:	40015c04 	.word	0x40015c04
 800464c:	200298e0 	.word	0x200298e0
 8004650:	40026470 	.word	0x40026470

08004654 <BSP_AUDIO_OUT_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application     
  * @retval None
  */
__weak void BSP_AUDIO_OUT_ClockConfig(SAI_HandleTypeDef *hsai, uint32_t AudioFreq, void *Params)
{ 
 8004654:	b580      	push	{r7, lr}
 8004656:	b0a6      	sub	sp, #152	@ 0x98
 8004658:	af00      	add	r7, sp, #0
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	60b9      	str	r1, [r7, #8]
 800465e:	607a      	str	r2, [r7, #4]
  RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;

  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 8004660:	f107 0314 	add.w	r3, r7, #20
 8004664:	4618      	mov	r0, r3
 8004666:	f003 fb49 	bl	8007cfc <HAL_RCCEx_GetPeriphCLKConfig>
  
  /* Set the PLL configuration according to the audio frequency */
  if((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K) || (AudioFreq == AUDIO_FREQUENCY_44K))
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	f642 3211 	movw	r2, #11025	@ 0x2b11
 8004670:	4293      	cmp	r3, r2
 8004672:	d009      	beq.n	8004688 <BSP_AUDIO_OUT_ClockConfig+0x34>
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	f245 6222 	movw	r2, #22050	@ 0x5622
 800467a:	4293      	cmp	r3, r2
 800467c:	d004      	beq.n	8004688 <BSP_AUDIO_OUT_ClockConfig+0x34>
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8004684:	4293      	cmp	r3, r2
 8004686:	d112      	bne.n	80046ae <BSP_AUDIO_OUT_ClockConfig+0x5a>
  {
    /* Configure PLLI2S prescalers */
    /* PLLI2S_VCO: VCO_429M
    I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 429/2 = 214.5 Mhz
    I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 214.5/19 = 11.289 Mhz */
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8004688:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800468c:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 800468e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004692:	657b      	str	r3, [r7, #84]	@ 0x54
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 429;
 8004694:	f240 13ad 	movw	r3, #429	@ 0x1ad
 8004698:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 2;
 800469a:	2302      	movs	r3, #2
 800469c:	623b      	str	r3, [r7, #32]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 19;
 800469e:	2313      	movs	r3, #19
 80046a0:	63bb      	str	r3, [r7, #56]	@ 0x38
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 80046a2:	f107 0314 	add.w	r3, r7, #20
 80046a6:	4618      	mov	r0, r3
 80046a8:	f002 ff38 	bl	800751c <HAL_RCCEx_PeriphCLKConfig>
 80046ac:	e012      	b.n	80046d4 <BSP_AUDIO_OUT_ClockConfig+0x80>
  {
    /* I2S clock config
    PLLI2S_VCO: VCO_344M
    I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 344/7 = 49.142 Mhz
    I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 49.142/1 = 49.142 Mhz */
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 80046ae:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80046b2:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 80046b4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80046b8:	657b      	str	r3, [r7, #84]	@ 0x54
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 344;
 80046ba:	f44f 73ac 	mov.w	r3, #344	@ 0x158
 80046be:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 7;
 80046c0:	2307      	movs	r3, #7
 80046c2:	623b      	str	r3, [r7, #32]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 1;
 80046c4:	2301      	movs	r3, #1
 80046c6:	63bb      	str	r3, [r7, #56]	@ 0x38
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 80046c8:	f107 0314 	add.w	r3, r7, #20
 80046cc:	4618      	mov	r0, r3
 80046ce:	f002 ff25 	bl	800751c <HAL_RCCEx_PeriphCLKConfig>
  }
}
 80046d2:	bf00      	nop
 80046d4:	bf00      	nop
 80046d6:	3798      	adds	r7, #152	@ 0x98
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}

080046dc <BSP_AUDIO_IN_Init>:
  * @param  BitRes: Audio frequency to be configured.
  * @param  ChnlNbr: Channel number.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_Init(uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b084      	sub	sp, #16
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	607a      	str	r2, [r7, #4]
  return BSP_AUDIO_IN_InitEx(INPUT_DEVICE_DIGITAL_MICROPHONE_2, AudioFreq, BitRes, ChnlNbr); 
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	68ba      	ldr	r2, [r7, #8]
 80046ec:	68f9      	ldr	r1, [r7, #12]
 80046ee:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80046f2:	f000 f805 	bl	8004700 <BSP_AUDIO_IN_InitEx>
 80046f6:	4603      	mov	r3, r0
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3710      	adds	r7, #16
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}

08004700 <BSP_AUDIO_IN_InitEx>:
  * @param  BitRes: Audio frequency to be configured.
  * @param  ChnlNbr: Channel number.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_InitEx(uint16_t InputDevice, uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr)
{
 8004700:	b590      	push	{r4, r7, lr}
 8004702:	b089      	sub	sp, #36	@ 0x24
 8004704:	af00      	add	r7, sp, #0
 8004706:	60b9      	str	r1, [r7, #8]
 8004708:	607a      	str	r2, [r7, #4]
 800470a:	603b      	str	r3, [r7, #0]
 800470c:	4603      	mov	r3, r0
 800470e:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = AUDIO_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	77fb      	strb	r3, [r7, #31]
  uint32_t deviceid = 0x00;
 8004714:	2300      	movs	r3, #0
 8004716:	617b      	str	r3, [r7, #20]
  uint32_t slot_active;

  if ((InputDevice != INPUT_DEVICE_INPUT_LINE_1) &&       /* Only INPUT_LINE_1 and MICROPHONE_2 inputs supported */
 8004718:	89fb      	ldrh	r3, [r7, #14]
 800471a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800471e:	d006      	beq.n	800472e <BSP_AUDIO_IN_InitEx+0x2e>
 8004720:	89fb      	ldrh	r3, [r7, #14]
 8004722:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004726:	d002      	beq.n	800472e <BSP_AUDIO_IN_InitEx+0x2e>
      (InputDevice != INPUT_DEVICE_DIGITAL_MICROPHONE_2))
  {
    ret = AUDIO_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	77fb      	strb	r3, [r7, #31]
 800472c:	e046      	b.n	80047bc <BSP_AUDIO_IN_InitEx+0xbc>
  }
  else
  {
    /* Disable SAI */
    SAIx_In_DeInit();
 800472e:	f000 fa11 	bl	8004b54 <SAIx_In_DeInit>

    /* PLL clock is set depending on the AudioFreq (44.1khz vs 48khz groups) */
    BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL); /* Clock config is shared between AUDIO IN and OUT */
 8004732:	2200      	movs	r2, #0
 8004734:	68b9      	ldr	r1, [r7, #8]
 8004736:	4824      	ldr	r0, [pc, #144]	@ (80047c8 <BSP_AUDIO_IN_InitEx+0xc8>)
 8004738:	f7ff ff8c 	bl	8004654 <BSP_AUDIO_OUT_ClockConfig>

    /* SAI data transfer preparation:
    Prepare the Media to be used for the audio transfer from SAI peripheral to memory */
    haudio_in_sai.Instance = AUDIO_IN_SAIx;
 800473c:	4b22      	ldr	r3, [pc, #136]	@ (80047c8 <BSP_AUDIO_IN_InitEx+0xc8>)
 800473e:	4a23      	ldr	r2, [pc, #140]	@ (80047cc <BSP_AUDIO_IN_InitEx+0xcc>)
 8004740:	601a      	str	r2, [r3, #0]
    if(HAL_SAI_GetState(&haudio_in_sai) == HAL_SAI_STATE_RESET)
 8004742:	4821      	ldr	r0, [pc, #132]	@ (80047c8 <BSP_AUDIO_IN_InitEx+0xc8>)
 8004744:	f003 ffda 	bl	80086fc <HAL_SAI_GetState>
 8004748:	4603      	mov	r3, r0
 800474a:	2b00      	cmp	r3, #0
 800474c:	d107      	bne.n	800475e <BSP_AUDIO_IN_InitEx+0x5e>
    {
      /* Init the SAI MSP: this __weak function can be redefined by the application*/
      BSP_AUDIO_OUT_MspInit(&haudio_in_sai, NULL);  /* Initialize GPIOs for SAI2 block A Master signals */
 800474e:	2100      	movs	r1, #0
 8004750:	481d      	ldr	r0, [pc, #116]	@ (80047c8 <BSP_AUDIO_IN_InitEx+0xc8>)
 8004752:	f7ff fea9 	bl	80044a8 <BSP_AUDIO_OUT_MspInit>
      BSP_AUDIO_IN_MspInit(&haudio_in_sai, NULL);
 8004756:	2100      	movs	r1, #0
 8004758:	481b      	ldr	r0, [pc, #108]	@ (80047c8 <BSP_AUDIO_IN_InitEx+0xc8>)
 800475a:	f000 f893 	bl	8004884 <BSP_AUDIO_IN_MspInit>

    /* Configure SAI in master RX mode :
     *   - SAI2_block_A in master RX mode
     *   - SAI2_block_B in slave RX mode synchronous from SAI2_block_A
     */
    if (InputDevice == INPUT_DEVICE_DIGITAL_MICROPHONE_2)
 800475e:	89fb      	ldrh	r3, [r7, #14]
 8004760:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004764:	d102      	bne.n	800476c <BSP_AUDIO_IN_InitEx+0x6c>
    {
      slot_active = CODEC_AUDIOFRAME_SLOT_13;
 8004766:	230a      	movs	r3, #10
 8004768:	61bb      	str	r3, [r7, #24]
 800476a:	e001      	b.n	8004770 <BSP_AUDIO_IN_InitEx+0x70>
    }
    else
    {
      slot_active = CODEC_AUDIOFRAME_SLOT_02;
 800476c:	2305      	movs	r3, #5
 800476e:	61bb      	str	r3, [r7, #24]
    }
    SAIx_In_Init(SAI_MODEMASTER_RX, slot_active, AudioFreq);
 8004770:	68ba      	ldr	r2, [r7, #8]
 8004772:	69b9      	ldr	r1, [r7, #24]
 8004774:	2001      	movs	r0, #1
 8004776:	f000 f937 	bl	80049e8 <SAIx_In_Init>

    /* wm8994 codec initialization */
    deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 800477a:	4b15      	ldr	r3, [pc, #84]	@ (80047d0 <BSP_AUDIO_IN_InitEx+0xd0>)
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	2034      	movs	r0, #52	@ 0x34
 8004780:	4798      	blx	r3
 8004782:	6178      	str	r0, [r7, #20]

    if((deviceid) == WM8994_ID)
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	f648 1294 	movw	r2, #35220	@ 0x8994
 800478a:	4293      	cmp	r3, r2
 800478c:	d109      	bne.n	80047a2 <BSP_AUDIO_IN_InitEx+0xa2>
    {
      /* Reset the Codec Registers */
      wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 800478e:	4b10      	ldr	r3, [pc, #64]	@ (80047d0 <BSP_AUDIO_IN_InitEx+0xd0>)
 8004790:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004792:	2034      	movs	r0, #52	@ 0x34
 8004794:	4798      	blx	r3
      /* Initialize the audio driver structure */
      audio_drv = &wm8994_drv;
 8004796:	4b0f      	ldr	r3, [pc, #60]	@ (80047d4 <BSP_AUDIO_IN_InitEx+0xd4>)
 8004798:	4a0d      	ldr	r2, [pc, #52]	@ (80047d0 <BSP_AUDIO_IN_InitEx+0xd0>)
 800479a:	601a      	str	r2, [r3, #0]
      ret = AUDIO_OK;
 800479c:	2300      	movs	r3, #0
 800479e:	77fb      	strb	r3, [r7, #31]
 80047a0:	e001      	b.n	80047a6 <BSP_AUDIO_IN_InitEx+0xa6>
    }
    else
    {
      ret = AUDIO_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	77fb      	strb	r3, [r7, #31]
    }

    if(ret == AUDIO_OK)
 80047a6:	7ffb      	ldrb	r3, [r7, #31]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d107      	bne.n	80047bc <BSP_AUDIO_IN_InitEx+0xbc>
    {
      /* Initialize the codec internal registers */
      audio_drv->Init(AUDIO_I2C_ADDRESS, InputDevice, 100, AudioFreq);
 80047ac:	4b09      	ldr	r3, [pc, #36]	@ (80047d4 <BSP_AUDIO_IN_InitEx+0xd4>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681c      	ldr	r4, [r3, #0]
 80047b2:	89f9      	ldrh	r1, [r7, #14]
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	2264      	movs	r2, #100	@ 0x64
 80047b8:	2034      	movs	r0, #52	@ 0x34
 80047ba:	47a0      	blx	r4
    }
  }
  return ret;
 80047bc:	7ffb      	ldrb	r3, [r7, #31]
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3724      	adds	r7, #36	@ 0x24
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd90      	pop	{r4, r7, pc}
 80047c6:	bf00      	nop
 80047c8:	2002985c 	.word	0x2002985c
 80047cc:	40015c24 	.word	0x40015c24
 80047d0:	20000020 	.word	0x20000020
 80047d4:	200297d4 	.word	0x200297d4

080047d8 <BSP_AUDIO_IN_Record>:
  * @param  size: size of the recorded buffer in number of elements (typically number of half-words)
  *               Be careful that it is not the same unit than BSP_AUDIO_OUT_Play function
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t  BSP_AUDIO_IN_Record(uint16_t* pbuf, uint32_t size)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
  uint32_t ret = AUDIO_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	60fb      	str	r3, [r7, #12]
  
  /* Start the process receive DMA */
  HAL_SAI_Receive_DMA(&haudio_in_sai, (uint8_t*)pbuf, size);
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	461a      	mov	r2, r3
 80047ec:	6879      	ldr	r1, [r7, #4]
 80047ee:	4805      	ldr	r0, [pc, #20]	@ (8004804 <BSP_AUDIO_IN_Record+0x2c>)
 80047f0:	f003 fef6 	bl	80085e0 <HAL_SAI_Receive_DMA>
  
  /* Return AUDIO_OK when all operations are correctly done */
  ret = AUDIO_OK;
 80047f4:	2300      	movs	r3, #0
 80047f6:	60fb      	str	r3, [r7, #12]
  
  return ret;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	b2db      	uxtb	r3, r3
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3710      	adds	r7, #16
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}
 8004804:	2002985c 	.word	0x2002985c

08004808 <BSP_AUDIO_IN_Stop>:
  *           - CODEC_PDWN_HW: completely shut down the codec (physically).
  *                            Then need to reconfigure the Codec after power on.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_Stop(uint32_t Option)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b082      	sub	sp, #8
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  /* Call the Media layer stop function */
  HAL_SAI_DMAStop(&haudio_in_sai);
 8004810:	480c      	ldr	r0, [pc, #48]	@ (8004844 <BSP_AUDIO_IN_Stop+0x3c>)
 8004812:	f003 fe72 	bl	80084fa <HAL_SAI_DMAStop>
  
  /* Call Audio Codec Stop function */
  if(audio_drv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
 8004816:	4b0c      	ldr	r3, [pc, #48]	@ (8004848 <BSP_AUDIO_IN_Stop+0x40>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	699b      	ldr	r3, [r3, #24]
 800481c:	6879      	ldr	r1, [r7, #4]
 800481e:	2034      	movs	r0, #52	@ 0x34
 8004820:	4798      	blx	r3
 8004822:	4603      	mov	r3, r0
 8004824:	2b00      	cmp	r3, #0
 8004826:	d001      	beq.n	800482c <BSP_AUDIO_IN_Stop+0x24>
  {
    return AUDIO_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	e006      	b.n	800483a <BSP_AUDIO_IN_Stop+0x32>
  }
  else
  {
    if(Option == CODEC_PDWN_HW)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2b01      	cmp	r3, #1
 8004830:	d102      	bne.n	8004838 <BSP_AUDIO_IN_Stop+0x30>
    {
      /* Wait at least 100us */
      HAL_Delay(1);
 8004832:	2001      	movs	r0, #1
 8004834:	f000 fa02 	bl	8004c3c <HAL_Delay>
    }
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 8004838:	2300      	movs	r3, #0
  }
}
 800483a:	4618      	mov	r0, r3
 800483c:	3708      	adds	r7, #8
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	2002985c 	.word	0x2002985c
 8004848:	200297d4 	.word	0x200297d4

0800484c <HAL_SAI_RxCpltCallback>:
  * @brief  Rx Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b082      	sub	sp, #8
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 8004854:	f006 fcfc 	bl	800b250 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8004858:	bf00      	nop
 800485a:	3708      	adds	r7, #8
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}

08004860 <HAL_SAI_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b082      	sub	sp, #8
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
  BSP_AUDIO_IN_HalfTransfer_CallBack();
 8004868:	f006 fd3a 	bl	800b2e0 <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 800486c:	bf00      	nop
 800486e:	3708      	adds	r7, #8
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}

08004874 <BSP_AUDIO_IN_Error_CallBack>:
/**
  * @brief  Audio IN Error callback function.
  * @retval None
  */
__weak void BSP_AUDIO_IN_Error_CallBack(void)
{   
 8004874:	b480      	push	{r7}
 8004876:	af00      	add	r7, sp, #0
  /* This function is called when an Interrupt due to transfer error on or peripheral
     error occurs. */
}
 8004878:	bf00      	nop
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr
	...

08004884 <BSP_AUDIO_IN_MspInit>:
  * @param  hsai: SAI handle
  * @param  Params
  * @retval None
  */
__weak void BSP_AUDIO_IN_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b08c      	sub	sp, #48	@ 0x30
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_sai_rx;
  GPIO_InitTypeDef  gpio_init_structure;  

  /* Enable SAI clock */
  AUDIO_IN_SAIx_CLK_ENABLE();
 800488e:	4b50      	ldr	r3, [pc, #320]	@ (80049d0 <BSP_AUDIO_IN_MspInit+0x14c>)
 8004890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004892:	4a4f      	ldr	r2, [pc, #316]	@ (80049d0 <BSP_AUDIO_IN_MspInit+0x14c>)
 8004894:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004898:	6453      	str	r3, [r2, #68]	@ 0x44
 800489a:	4b4d      	ldr	r3, [pc, #308]	@ (80049d0 <BSP_AUDIO_IN_MspInit+0x14c>)
 800489c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800489e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80048a2:	61bb      	str	r3, [r7, #24]
 80048a4:	69bb      	ldr	r3, [r7, #24]
  
  /* Enable SD GPIO clock */
  AUDIO_IN_SAIx_SD_ENABLE();
 80048a6:	4b4a      	ldr	r3, [pc, #296]	@ (80049d0 <BSP_AUDIO_IN_MspInit+0x14c>)
 80048a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048aa:	4a49      	ldr	r2, [pc, #292]	@ (80049d0 <BSP_AUDIO_IN_MspInit+0x14c>)
 80048ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80048b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80048b2:	4b47      	ldr	r3, [pc, #284]	@ (80049d0 <BSP_AUDIO_IN_MspInit+0x14c>)
 80048b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048ba:	617b      	str	r3, [r7, #20]
 80048bc:	697b      	ldr	r3, [r7, #20]
  /* CODEC_SAI pin configuration: SD pin */
  gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
 80048be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80048c2:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80048c4:	2302      	movs	r3, #2
 80048c6:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80048c8:	2300      	movs	r3, #0
 80048ca:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80048cc:	2302      	movs	r3, #2
 80048ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_IN_SAIx_SD_AF;
 80048d0:	230a      	movs	r3, #10
 80048d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 80048d4:	f107 031c 	add.w	r3, r7, #28
 80048d8:	4619      	mov	r1, r3
 80048da:	483e      	ldr	r0, [pc, #248]	@ (80049d4 <BSP_AUDIO_IN_MspInit+0x150>)
 80048dc:	f001 f84a 	bl	8005974 <HAL_GPIO_Init>

  /* Enable Audio INT GPIO clock */
  AUDIO_IN_INT_GPIO_ENABLE();
 80048e0:	4b3b      	ldr	r3, [pc, #236]	@ (80049d0 <BSP_AUDIO_IN_MspInit+0x14c>)
 80048e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048e4:	4a3a      	ldr	r2, [pc, #232]	@ (80049d0 <BSP_AUDIO_IN_MspInit+0x14c>)
 80048e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80048ec:	4b38      	ldr	r3, [pc, #224]	@ (80049d0 <BSP_AUDIO_IN_MspInit+0x14c>)
 80048ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048f4:	613b      	str	r3, [r7, #16]
 80048f6:	693b      	ldr	r3, [r7, #16]
  /* Audio INT pin configuration: input */
  gpio_init_structure.Pin = AUDIO_IN_INT_GPIO_PIN;
 80048f8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048fc:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80048fe:	2300      	movs	r3, #0
 8004900:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8004902:	2300      	movs	r3, #0
 8004904:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8004906:	2302      	movs	r3, #2
 8004908:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(AUDIO_IN_INT_GPIO_PORT, &gpio_init_structure);
 800490a:	f107 031c 	add.w	r3, r7, #28
 800490e:	4619      	mov	r1, r3
 8004910:	4831      	ldr	r0, [pc, #196]	@ (80049d8 <BSP_AUDIO_IN_MspInit+0x154>)
 8004912:	f001 f82f 	bl	8005974 <HAL_GPIO_Init>

  /* Enable the DMA clock */
  AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 8004916:	4b2e      	ldr	r3, [pc, #184]	@ (80049d0 <BSP_AUDIO_IN_MspInit+0x14c>)
 8004918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800491a:	4a2d      	ldr	r2, [pc, #180]	@ (80049d0 <BSP_AUDIO_IN_MspInit+0x14c>)
 800491c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004920:	6313      	str	r3, [r2, #48]	@ 0x30
 8004922:	4b2b      	ldr	r3, [pc, #172]	@ (80049d0 <BSP_AUDIO_IN_MspInit+0x14c>)
 8004924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004926:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800492a:	60fb      	str	r3, [r7, #12]
 800492c:	68fb      	ldr	r3, [r7, #12]
    
  if(hsai->Instance == AUDIO_IN_SAIx)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a2a      	ldr	r2, [pc, #168]	@ (80049dc <BSP_AUDIO_IN_MspInit+0x158>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d137      	bne.n	80049a8 <BSP_AUDIO_IN_MspInit+0x124>
  {
    /* Configure the hdma_sai_rx handle parameters */
    hdma_sai_rx.Init.Channel             = AUDIO_IN_SAIx_DMAx_CHANNEL;
 8004938:	4b29      	ldr	r3, [pc, #164]	@ (80049e0 <BSP_AUDIO_IN_MspInit+0x15c>)
 800493a:	2200      	movs	r2, #0
 800493c:	605a      	str	r2, [r3, #4]
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 800493e:	4b28      	ldr	r3, [pc, #160]	@ (80049e0 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004940:	2200      	movs	r2, #0
 8004942:	609a      	str	r2, [r3, #8]
    hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8004944:	4b26      	ldr	r3, [pc, #152]	@ (80049e0 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004946:	2200      	movs	r2, #0
 8004948:	60da      	str	r2, [r3, #12]
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
 800494a:	4b25      	ldr	r3, [pc, #148]	@ (80049e0 <BSP_AUDIO_IN_MspInit+0x15c>)
 800494c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004950:	611a      	str	r2, [r3, #16]
    hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAIx_DMAx_PERIPH_DATA_SIZE;
 8004952:	4b23      	ldr	r3, [pc, #140]	@ (80049e0 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004954:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004958:	615a      	str	r2, [r3, #20]
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
 800495a:	4b21      	ldr	r3, [pc, #132]	@ (80049e0 <BSP_AUDIO_IN_MspInit+0x15c>)
 800495c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004960:	619a      	str	r2, [r3, #24]
    hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 8004962:	4b1f      	ldr	r3, [pc, #124]	@ (80049e0 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004964:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004968:	61da      	str	r2, [r3, #28]
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 800496a:	4b1d      	ldr	r3, [pc, #116]	@ (80049e0 <BSP_AUDIO_IN_MspInit+0x15c>)
 800496c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004970:	621a      	str	r2, [r3, #32]
    hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8004972:	4b1b      	ldr	r3, [pc, #108]	@ (80049e0 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004974:	2200      	movs	r2, #0
 8004976:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8004978:	4b19      	ldr	r3, [pc, #100]	@ (80049e0 <BSP_AUDIO_IN_MspInit+0x15c>)
 800497a:	2203      	movs	r2, #3
 800497c:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
 800497e:	4b18      	ldr	r3, [pc, #96]	@ (80049e0 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004980:	2200      	movs	r2, #0
 8004982:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 8004984:	4b16      	ldr	r3, [pc, #88]	@ (80049e0 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004986:	2200      	movs	r2, #0
 8004988:	631a      	str	r2, [r3, #48]	@ 0x30
    
    hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 800498a:	4b15      	ldr	r3, [pc, #84]	@ (80049e0 <BSP_AUDIO_IN_MspInit+0x15c>)
 800498c:	4a15      	ldr	r2, [pc, #84]	@ (80049e4 <BSP_AUDIO_IN_MspInit+0x160>)
 800498e:	601a      	str	r2, [r3, #0]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	4a13      	ldr	r2, [pc, #76]	@ (80049e0 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004994:	671a      	str	r2, [r3, #112]	@ 0x70
 8004996:	4a12      	ldr	r2, [pc, #72]	@ (80049e0 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6393      	str	r3, [r2, #56]	@ 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_rx);
 800499c:	4810      	ldr	r0, [pc, #64]	@ (80049e0 <BSP_AUDIO_IN_MspInit+0x15c>)
 800499e:	f000 fc23 	bl	80051e8 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_rx);
 80049a2:	480f      	ldr	r0, [pc, #60]	@ (80049e0 <BSP_AUDIO_IN_MspInit+0x15c>)
 80049a4:	f000 fb72 	bl	800508c <HAL_DMA_Init>
  }
  
  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 80049a8:	2200      	movs	r2, #0
 80049aa:	210f      	movs	r1, #15
 80049ac:	2046      	movs	r0, #70	@ 0x46
 80049ae:	f000 fa44 	bl	8004e3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 80049b2:	2046      	movs	r0, #70	@ 0x46
 80049b4:	f000 fa5d 	bl	8004e72 <HAL_NVIC_EnableIRQ>

  /* Audio INT IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_IN_INT_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 80049b8:	2200      	movs	r2, #0
 80049ba:	210f      	movs	r1, #15
 80049bc:	2028      	movs	r0, #40	@ 0x28
 80049be:	f000 fa3c 	bl	8004e3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_INT_IRQ);
 80049c2:	2028      	movs	r0, #40	@ 0x28
 80049c4:	f000 fa55 	bl	8004e72 <HAL_NVIC_EnableIRQ>
}
 80049c8:	bf00      	nop
 80049ca:	3730      	adds	r7, #48	@ 0x30
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	40023800 	.word	0x40023800
 80049d4:	40021800 	.word	0x40021800
 80049d8:	40021c00 	.word	0x40021c00
 80049dc:	40015c24 	.word	0x40015c24
 80049e0:	20029940 	.word	0x20029940
 80049e4:	400264b8 	.word	0x400264b8

080049e8 <SAIx_In_Init>:
  * @param  SlotActive: CODEC_AUDIOFRAME_SLOT_02 or CODEC_AUDIOFRAME_SLOT_13
  * @param  AudioFreq: Audio frequency to be configured for the SAI peripheral.
  * @retval None
  */
static void SAIx_In_Init(uint32_t SaiOutMode, uint32_t SlotActive, uint32_t AudioFreq)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b084      	sub	sp, #16
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	60f8      	str	r0, [r7, #12]
 80049f0:	60b9      	str	r1, [r7, #8]
 80049f2:	607a      	str	r2, [r7, #4]
  /* Initialize SAI2 block A in MASTER RX */
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 80049f4:	4b53      	ldr	r3, [pc, #332]	@ (8004b44 <SAIx_In_Init+0x15c>)
 80049f6:	4a54      	ldr	r2, [pc, #336]	@ (8004b48 <SAIx_In_Init+0x160>)
 80049f8:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 80049fa:	4b52      	ldr	r3, [pc, #328]	@ (8004b44 <SAIx_In_Init+0x15c>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	4b50      	ldr	r3, [pc, #320]	@ (8004b44 <SAIx_In_Init+0x15c>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004a08:	601a      	str	r2, [r3, #0]

  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
 8004a0a:	4a4e      	ldr	r2, [pc, #312]	@ (8004b44 <SAIx_In_Init+0x15c>)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	61d3      	str	r3, [r2, #28]
  haudio_out_sai.Init.AudioMode = SaiOutMode;
 8004a10:	4a4c      	ldr	r2, [pc, #304]	@ (8004b44 <SAIx_In_Init+0x15c>)
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	6053      	str	r3, [r2, #4]
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 8004a16:	4b4b      	ldr	r3, [pc, #300]	@ (8004b44 <SAIx_In_Init+0x15c>)
 8004a18:	2200      	movs	r2, #0
 8004a1a:	615a      	str	r2, [r3, #20]
  haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 8004a1c:	4b49      	ldr	r3, [pc, #292]	@ (8004b44 <SAIx_In_Init+0x15c>)
 8004a1e:	2200      	movs	r2, #0
 8004a20:	631a      	str	r2, [r3, #48]	@ 0x30
  haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
 8004a22:	4b48      	ldr	r3, [pc, #288]	@ (8004b44 <SAIx_In_Init+0x15c>)
 8004a24:	2280      	movs	r2, #128	@ 0x80
 8004a26:	635a      	str	r2, [r3, #52]	@ 0x34
  haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8004a28:	4b46      	ldr	r3, [pc, #280]	@ (8004b44 <SAIx_In_Init+0x15c>)
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	639a      	str	r2, [r3, #56]	@ 0x38
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8004a2e:	4b45      	ldr	r3, [pc, #276]	@ (8004b44 <SAIx_In_Init+0x15c>)
 8004a30:	2201      	movs	r2, #1
 8004a32:	63da      	str	r2, [r3, #60]	@ 0x3c
  haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
 8004a34:	4b43      	ldr	r3, [pc, #268]	@ (8004b44 <SAIx_In_Init+0x15c>)
 8004a36:	2200      	movs	r2, #0
 8004a38:	609a      	str	r2, [r3, #8]
  haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 8004a3a:	4b42      	ldr	r3, [pc, #264]	@ (8004b44 <SAIx_In_Init+0x15c>)
 8004a3c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004a40:	611a      	str	r2, [r3, #16]
  haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8004a42:	4b40      	ldr	r3, [pc, #256]	@ (8004b44 <SAIx_In_Init+0x15c>)
 8004a44:	2201      	movs	r2, #1
 8004a46:	619a      	str	r2, [r3, #24]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  haudio_out_sai.FrameInit.FrameLength = 64;
 8004a48:	4b3e      	ldr	r3, [pc, #248]	@ (8004b44 <SAIx_In_Init+0x15c>)
 8004a4a:	2240      	movs	r2, #64	@ 0x40
 8004a4c:	641a      	str	r2, [r3, #64]	@ 0x40
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 8004a4e:	4b3d      	ldr	r3, [pc, #244]	@ (8004b44 <SAIx_In_Init+0x15c>)
 8004a50:	2220      	movs	r2, #32
 8004a52:	645a      	str	r2, [r3, #68]	@ 0x44
  haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8004a54:	4b3b      	ldr	r3, [pc, #236]	@ (8004b44 <SAIx_In_Init+0x15c>)
 8004a56:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004a5a:	649a      	str	r2, [r3, #72]	@ 0x48
  haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8004a5c:	4b39      	ldr	r3, [pc, #228]	@ (8004b44 <SAIx_In_Init+0x15c>)
 8004a5e:	2200      	movs	r2, #0
 8004a60:	64da      	str	r2, [r3, #76]	@ 0x4c
  haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8004a62:	4b38      	ldr	r3, [pc, #224]	@ (8004b44 <SAIx_In_Init+0x15c>)
 8004a64:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8004a68:	651a      	str	r2, [r3, #80]	@ 0x50
  /* Configure SAI Block_x Slot
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot actives */
  haudio_out_sai.SlotInit.FirstBitOffset = 0;
 8004a6a:	4b36      	ldr	r3, [pc, #216]	@ (8004b44 <SAIx_In_Init+0x15c>)
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	655a      	str	r2, [r3, #84]	@ 0x54
  haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8004a70:	4b34      	ldr	r3, [pc, #208]	@ (8004b44 <SAIx_In_Init+0x15c>)
 8004a72:	2200      	movs	r2, #0
 8004a74:	659a      	str	r2, [r3, #88]	@ 0x58
  haudio_out_sai.SlotInit.SlotNumber = 4;
 8004a76:	4b33      	ldr	r3, [pc, #204]	@ (8004b44 <SAIx_In_Init+0x15c>)
 8004a78:	2204      	movs	r2, #4
 8004a7a:	65da      	str	r2, [r3, #92]	@ 0x5c
  haudio_out_sai.SlotInit.SlotActive = SlotActive;
 8004a7c:	4a31      	ldr	r2, [pc, #196]	@ (8004b44 <SAIx_In_Init+0x15c>)
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	6613      	str	r3, [r2, #96]	@ 0x60

  HAL_SAI_Init(&haudio_out_sai);
 8004a82:	4830      	ldr	r0, [pc, #192]	@ (8004b44 <SAIx_In_Init+0x15c>)
 8004a84:	f003 fb86 	bl	8008194 <HAL_SAI_Init>

  /* Initialize SAI2 block B in SLAVE RX synchronous from SAI2 block A */
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8004a88:	4b30      	ldr	r3, [pc, #192]	@ (8004b4c <SAIx_In_Init+0x164>)
 8004a8a:	4a31      	ldr	r2, [pc, #196]	@ (8004b50 <SAIx_In_Init+0x168>)
 8004a8c:	601a      	str	r2, [r3, #0]
  
  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 8004a8e:	4b2f      	ldr	r3, [pc, #188]	@ (8004b4c <SAIx_In_Init+0x164>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	4b2d      	ldr	r3, [pc, #180]	@ (8004b4c <SAIx_In_Init+0x164>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004a9c:	601a      	str	r2, [r3, #0]
  
  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  haudio_in_sai.Init.AudioFrequency = AudioFreq;
 8004a9e:	4a2b      	ldr	r2, [pc, #172]	@ (8004b4c <SAIx_In_Init+0x164>)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	61d3      	str	r3, [r2, #28]
  haudio_in_sai.Init.AudioMode = SAI_MODESLAVE_RX;
 8004aa4:	4b29      	ldr	r3, [pc, #164]	@ (8004b4c <SAIx_In_Init+0x164>)
 8004aa6:	2203      	movs	r2, #3
 8004aa8:	605a      	str	r2, [r3, #4]
  haudio_in_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 8004aaa:	4b28      	ldr	r3, [pc, #160]	@ (8004b4c <SAIx_In_Init+0x164>)
 8004aac:	2200      	movs	r2, #0
 8004aae:	615a      	str	r2, [r3, #20]
  haudio_in_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 8004ab0:	4b26      	ldr	r3, [pc, #152]	@ (8004b4c <SAIx_In_Init+0x164>)
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	631a      	str	r2, [r3, #48]	@ 0x30
  haudio_in_sai.Init.DataSize = SAI_DATASIZE_16;
 8004ab6:	4b25      	ldr	r3, [pc, #148]	@ (8004b4c <SAIx_In_Init+0x164>)
 8004ab8:	2280      	movs	r2, #128	@ 0x80
 8004aba:	635a      	str	r2, [r3, #52]	@ 0x34
  haudio_in_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8004abc:	4b23      	ldr	r3, [pc, #140]	@ (8004b4c <SAIx_In_Init+0x164>)
 8004abe:	2200      	movs	r2, #0
 8004ac0:	639a      	str	r2, [r3, #56]	@ 0x38
  haudio_in_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8004ac2:	4b22      	ldr	r3, [pc, #136]	@ (8004b4c <SAIx_In_Init+0x164>)
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	63da      	str	r2, [r3, #60]	@ 0x3c
  haudio_in_sai.Init.Synchro = SAI_SYNCHRONOUS;
 8004ac8:	4b20      	ldr	r3, [pc, #128]	@ (8004b4c <SAIx_In_Init+0x164>)
 8004aca:	2201      	movs	r2, #1
 8004acc:	609a      	str	r2, [r3, #8]
  haudio_in_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLED;
 8004ace:	4b1f      	ldr	r3, [pc, #124]	@ (8004b4c <SAIx_In_Init+0x164>)
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	611a      	str	r2, [r3, #16]
  haudio_in_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8004ad4:	4b1d      	ldr	r3, [pc, #116]	@ (8004b4c <SAIx_In_Init+0x164>)
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	619a      	str	r2, [r3, #24]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  haudio_in_sai.FrameInit.FrameLength = 64;
 8004ada:	4b1c      	ldr	r3, [pc, #112]	@ (8004b4c <SAIx_In_Init+0x164>)
 8004adc:	2240      	movs	r2, #64	@ 0x40
 8004ade:	641a      	str	r2, [r3, #64]	@ 0x40
  haudio_in_sai.FrameInit.ActiveFrameLength = 32;
 8004ae0:	4b1a      	ldr	r3, [pc, #104]	@ (8004b4c <SAIx_In_Init+0x164>)
 8004ae2:	2220      	movs	r2, #32
 8004ae4:	645a      	str	r2, [r3, #68]	@ 0x44
  haudio_in_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8004ae6:	4b19      	ldr	r3, [pc, #100]	@ (8004b4c <SAIx_In_Init+0x164>)
 8004ae8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004aec:	649a      	str	r2, [r3, #72]	@ 0x48
  haudio_in_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8004aee:	4b17      	ldr	r3, [pc, #92]	@ (8004b4c <SAIx_In_Init+0x164>)
 8004af0:	2200      	movs	r2, #0
 8004af2:	64da      	str	r2, [r3, #76]	@ 0x4c
  haudio_in_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8004af4:	4b15      	ldr	r3, [pc, #84]	@ (8004b4c <SAIx_In_Init+0x164>)
 8004af6:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8004afa:	651a      	str	r2, [r3, #80]	@ 0x50
  /* Configure SAI Block_x Slot
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot active */
  haudio_in_sai.SlotInit.FirstBitOffset = 0;
 8004afc:	4b13      	ldr	r3, [pc, #76]	@ (8004b4c <SAIx_In_Init+0x164>)
 8004afe:	2200      	movs	r2, #0
 8004b00:	655a      	str	r2, [r3, #84]	@ 0x54
  haudio_in_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8004b02:	4b12      	ldr	r3, [pc, #72]	@ (8004b4c <SAIx_In_Init+0x164>)
 8004b04:	2200      	movs	r2, #0
 8004b06:	659a      	str	r2, [r3, #88]	@ 0x58
  haudio_in_sai.SlotInit.SlotNumber = 4;
 8004b08:	4b10      	ldr	r3, [pc, #64]	@ (8004b4c <SAIx_In_Init+0x164>)
 8004b0a:	2204      	movs	r2, #4
 8004b0c:	65da      	str	r2, [r3, #92]	@ 0x5c
  haudio_in_sai.SlotInit.SlotActive = SlotActive;
 8004b0e:	4a0f      	ldr	r2, [pc, #60]	@ (8004b4c <SAIx_In_Init+0x164>)
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	6613      	str	r3, [r2, #96]	@ 0x60

  HAL_SAI_Init(&haudio_in_sai);
 8004b14:	480d      	ldr	r0, [pc, #52]	@ (8004b4c <SAIx_In_Init+0x164>)
 8004b16:	f003 fb3d 	bl	8008194 <HAL_SAI_Init>

  /* Enable SAI peripheral to generate MCLK */
  __HAL_SAI_ENABLE(&haudio_out_sai);
 8004b1a:	4b0a      	ldr	r3, [pc, #40]	@ (8004b44 <SAIx_In_Init+0x15c>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	4b08      	ldr	r3, [pc, #32]	@ (8004b44 <SAIx_In_Init+0x15c>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004b28:	601a      	str	r2, [r3, #0]

  /* Enable SAI peripheral */
  __HAL_SAI_ENABLE(&haudio_in_sai);
 8004b2a:	4b08      	ldr	r3, [pc, #32]	@ (8004b4c <SAIx_In_Init+0x164>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	4b06      	ldr	r3, [pc, #24]	@ (8004b4c <SAIx_In_Init+0x164>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004b38:	601a      	str	r2, [r3, #0]
}
 8004b3a:	bf00      	nop
 8004b3c:	3710      	adds	r7, #16
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}
 8004b42:	bf00      	nop
 8004b44:	200297d8 	.word	0x200297d8
 8004b48:	40015c04 	.word	0x40015c04
 8004b4c:	2002985c 	.word	0x2002985c
 8004b50:	40015c24 	.word	0x40015c24

08004b54 <SAIx_In_DeInit>:
/**
  * @brief  Deinitializes the output Audio Codec audio interface (SAI).
  * @retval None
  */
static void SAIx_In_DeInit(void)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	af00      	add	r7, sp, #0
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8004b58:	4b07      	ldr	r3, [pc, #28]	@ (8004b78 <SAIx_In_DeInit+0x24>)
 8004b5a:	4a08      	ldr	r2, [pc, #32]	@ (8004b7c <SAIx_In_DeInit+0x28>)
 8004b5c:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 8004b5e:	4b06      	ldr	r3, [pc, #24]	@ (8004b78 <SAIx_In_DeInit+0x24>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	4b04      	ldr	r3, [pc, #16]	@ (8004b78 <SAIx_In_DeInit+0x24>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004b6c:	601a      	str	r2, [r3, #0]

  HAL_SAI_DeInit(&haudio_in_sai);
 8004b6e:	4802      	ldr	r0, [pc, #8]	@ (8004b78 <SAIx_In_DeInit+0x24>)
 8004b70:	f003 fc8e 	bl	8008490 <HAL_SAI_DeInit>
}
 8004b74:	bf00      	nop
 8004b76:	bd80      	pop	{r7, pc}
 8004b78:	2002985c 	.word	0x2002985c
 8004b7c:	40015c24 	.word	0x40015c24

08004b80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004b84:	2003      	movs	r0, #3
 8004b86:	f000 f94d 	bl	8004e24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004b8a:	2000      	movs	r0, #0
 8004b8c:	f000 f806 	bl	8004b9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004b90:	f7fd fd1c 	bl	80025cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004b94:	2300      	movs	r3, #0
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	bd80      	pop	{r7, pc}
	...

08004b9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b082      	sub	sp, #8
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004ba4:	4b12      	ldr	r3, [pc, #72]	@ (8004bf0 <HAL_InitTick+0x54>)
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	4b12      	ldr	r3, [pc, #72]	@ (8004bf4 <HAL_InitTick+0x58>)
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	4619      	mov	r1, r3
 8004bae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004bb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8004bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f000 f967 	bl	8004e8e <HAL_SYSTICK_Config>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d001      	beq.n	8004bca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e00e      	b.n	8004be8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2b0f      	cmp	r3, #15
 8004bce:	d80a      	bhi.n	8004be6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	6879      	ldr	r1, [r7, #4]
 8004bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8004bd8:	f000 f92f 	bl	8004e3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004bdc:	4a06      	ldr	r2, [pc, #24]	@ (8004bf8 <HAL_InitTick+0x5c>)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004be2:	2300      	movs	r3, #0
 8004be4:	e000      	b.n	8004be8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3708      	adds	r7, #8
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}
 8004bf0:	2000001c 	.word	0x2000001c
 8004bf4:	20000058 	.word	0x20000058
 8004bf8:	20000054 	.word	0x20000054

08004bfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004c00:	4b06      	ldr	r3, [pc, #24]	@ (8004c1c <HAL_IncTick+0x20>)
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	461a      	mov	r2, r3
 8004c06:	4b06      	ldr	r3, [pc, #24]	@ (8004c20 <HAL_IncTick+0x24>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4413      	add	r3, r2
 8004c0c:	4a04      	ldr	r2, [pc, #16]	@ (8004c20 <HAL_IncTick+0x24>)
 8004c0e:	6013      	str	r3, [r2, #0]
}
 8004c10:	bf00      	nop
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr
 8004c1a:	bf00      	nop
 8004c1c:	20000058 	.word	0x20000058
 8004c20:	200299a0 	.word	0x200299a0

08004c24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004c24:	b480      	push	{r7}
 8004c26:	af00      	add	r7, sp, #0
  return uwTick;
 8004c28:	4b03      	ldr	r3, [pc, #12]	@ (8004c38 <HAL_GetTick+0x14>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr
 8004c36:	bf00      	nop
 8004c38:	200299a0 	.word	0x200299a0

08004c3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b084      	sub	sp, #16
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004c44:	f7ff ffee 	bl	8004c24 <HAL_GetTick>
 8004c48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c54:	d005      	beq.n	8004c62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004c56:	4b0a      	ldr	r3, [pc, #40]	@ (8004c80 <HAL_Delay+0x44>)
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	4413      	add	r3, r2
 8004c60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004c62:	bf00      	nop
 8004c64:	f7ff ffde 	bl	8004c24 <HAL_GetTick>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	1ad3      	subs	r3, r2, r3
 8004c6e:	68fa      	ldr	r2, [r7, #12]
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d8f7      	bhi.n	8004c64 <HAL_Delay+0x28>
  {
  }
}
 8004c74:	bf00      	nop
 8004c76:	bf00      	nop
 8004c78:	3710      	adds	r7, #16
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	20000058 	.word	0x20000058

08004c84 <__NVIC_SetPriorityGrouping>:
{
 8004c84:	b480      	push	{r7}
 8004c86:	b085      	sub	sp, #20
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f003 0307 	and.w	r3, r3, #7
 8004c92:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004c94:	4b0b      	ldr	r3, [pc, #44]	@ (8004cc4 <__NVIC_SetPriorityGrouping+0x40>)
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004c9a:	68ba      	ldr	r2, [r7, #8]
 8004c9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004cac:	4b06      	ldr	r3, [pc, #24]	@ (8004cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004cb2:	4a04      	ldr	r2, [pc, #16]	@ (8004cc4 <__NVIC_SetPriorityGrouping+0x40>)
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	60d3      	str	r3, [r2, #12]
}
 8004cb8:	bf00      	nop
 8004cba:	3714      	adds	r7, #20
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc2:	4770      	bx	lr
 8004cc4:	e000ed00 	.word	0xe000ed00
 8004cc8:	05fa0000 	.word	0x05fa0000

08004ccc <__NVIC_GetPriorityGrouping>:
{
 8004ccc:	b480      	push	{r7}
 8004cce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004cd0:	4b04      	ldr	r3, [pc, #16]	@ (8004ce4 <__NVIC_GetPriorityGrouping+0x18>)
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	0a1b      	lsrs	r3, r3, #8
 8004cd6:	f003 0307 	and.w	r3, r3, #7
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr
 8004ce4:	e000ed00 	.word	0xe000ed00

08004ce8 <__NVIC_EnableIRQ>:
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b083      	sub	sp, #12
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	4603      	mov	r3, r0
 8004cf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	db0b      	blt.n	8004d12 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004cfa:	79fb      	ldrb	r3, [r7, #7]
 8004cfc:	f003 021f 	and.w	r2, r3, #31
 8004d00:	4907      	ldr	r1, [pc, #28]	@ (8004d20 <__NVIC_EnableIRQ+0x38>)
 8004d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d06:	095b      	lsrs	r3, r3, #5
 8004d08:	2001      	movs	r0, #1
 8004d0a:	fa00 f202 	lsl.w	r2, r0, r2
 8004d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004d12:	bf00      	nop
 8004d14:	370c      	adds	r7, #12
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr
 8004d1e:	bf00      	nop
 8004d20:	e000e100 	.word	0xe000e100

08004d24 <__NVIC_SetPriority>:
{
 8004d24:	b480      	push	{r7}
 8004d26:	b083      	sub	sp, #12
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	6039      	str	r1, [r7, #0]
 8004d2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	db0a      	blt.n	8004d4e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	b2da      	uxtb	r2, r3
 8004d3c:	490c      	ldr	r1, [pc, #48]	@ (8004d70 <__NVIC_SetPriority+0x4c>)
 8004d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d42:	0112      	lsls	r2, r2, #4
 8004d44:	b2d2      	uxtb	r2, r2
 8004d46:	440b      	add	r3, r1
 8004d48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004d4c:	e00a      	b.n	8004d64 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	b2da      	uxtb	r2, r3
 8004d52:	4908      	ldr	r1, [pc, #32]	@ (8004d74 <__NVIC_SetPriority+0x50>)
 8004d54:	79fb      	ldrb	r3, [r7, #7]
 8004d56:	f003 030f 	and.w	r3, r3, #15
 8004d5a:	3b04      	subs	r3, #4
 8004d5c:	0112      	lsls	r2, r2, #4
 8004d5e:	b2d2      	uxtb	r2, r2
 8004d60:	440b      	add	r3, r1
 8004d62:	761a      	strb	r2, [r3, #24]
}
 8004d64:	bf00      	nop
 8004d66:	370c      	adds	r7, #12
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr
 8004d70:	e000e100 	.word	0xe000e100
 8004d74:	e000ed00 	.word	0xe000ed00

08004d78 <NVIC_EncodePriority>:
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b089      	sub	sp, #36	@ 0x24
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	60f8      	str	r0, [r7, #12]
 8004d80:	60b9      	str	r1, [r7, #8]
 8004d82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f003 0307 	and.w	r3, r3, #7
 8004d8a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004d8c:	69fb      	ldr	r3, [r7, #28]
 8004d8e:	f1c3 0307 	rsb	r3, r3, #7
 8004d92:	2b04      	cmp	r3, #4
 8004d94:	bf28      	it	cs
 8004d96:	2304      	movcs	r3, #4
 8004d98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004d9a:	69fb      	ldr	r3, [r7, #28]
 8004d9c:	3304      	adds	r3, #4
 8004d9e:	2b06      	cmp	r3, #6
 8004da0:	d902      	bls.n	8004da8 <NVIC_EncodePriority+0x30>
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	3b03      	subs	r3, #3
 8004da6:	e000      	b.n	8004daa <NVIC_EncodePriority+0x32>
 8004da8:	2300      	movs	r3, #0
 8004daa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004dac:	f04f 32ff 	mov.w	r2, #4294967295
 8004db0:	69bb      	ldr	r3, [r7, #24]
 8004db2:	fa02 f303 	lsl.w	r3, r2, r3
 8004db6:	43da      	mvns	r2, r3
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	401a      	ands	r2, r3
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004dc0:	f04f 31ff 	mov.w	r1, #4294967295
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8004dca:	43d9      	mvns	r1, r3
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004dd0:	4313      	orrs	r3, r2
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3724      	adds	r7, #36	@ 0x24
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr
	...

08004de0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b082      	sub	sp, #8
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	3b01      	subs	r3, #1
 8004dec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004df0:	d301      	bcc.n	8004df6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004df2:	2301      	movs	r3, #1
 8004df4:	e00f      	b.n	8004e16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004df6:	4a0a      	ldr	r2, [pc, #40]	@ (8004e20 <SysTick_Config+0x40>)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	3b01      	subs	r3, #1
 8004dfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004dfe:	210f      	movs	r1, #15
 8004e00:	f04f 30ff 	mov.w	r0, #4294967295
 8004e04:	f7ff ff8e 	bl	8004d24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004e08:	4b05      	ldr	r3, [pc, #20]	@ (8004e20 <SysTick_Config+0x40>)
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004e0e:	4b04      	ldr	r3, [pc, #16]	@ (8004e20 <SysTick_Config+0x40>)
 8004e10:	2207      	movs	r2, #7
 8004e12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004e14:	2300      	movs	r3, #0
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3708      	adds	r7, #8
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	e000e010 	.word	0xe000e010

08004e24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b082      	sub	sp, #8
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f7ff ff29 	bl	8004c84 <__NVIC_SetPriorityGrouping>
}
 8004e32:	bf00      	nop
 8004e34:	3708      	adds	r7, #8
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}

08004e3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004e3a:	b580      	push	{r7, lr}
 8004e3c:	b086      	sub	sp, #24
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	4603      	mov	r3, r0
 8004e42:	60b9      	str	r1, [r7, #8]
 8004e44:	607a      	str	r2, [r7, #4]
 8004e46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004e4c:	f7ff ff3e 	bl	8004ccc <__NVIC_GetPriorityGrouping>
 8004e50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	68b9      	ldr	r1, [r7, #8]
 8004e56:	6978      	ldr	r0, [r7, #20]
 8004e58:	f7ff ff8e 	bl	8004d78 <NVIC_EncodePriority>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e62:	4611      	mov	r1, r2
 8004e64:	4618      	mov	r0, r3
 8004e66:	f7ff ff5d 	bl	8004d24 <__NVIC_SetPriority>
}
 8004e6a:	bf00      	nop
 8004e6c:	3718      	adds	r7, #24
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}

08004e72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e72:	b580      	push	{r7, lr}
 8004e74:	b082      	sub	sp, #8
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	4603      	mov	r3, r0
 8004e7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004e7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e80:	4618      	mov	r0, r3
 8004e82:	f7ff ff31 	bl	8004ce8 <__NVIC_EnableIRQ>
}
 8004e86:	bf00      	nop
 8004e88:	3708      	adds	r7, #8
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}

08004e8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004e8e:	b580      	push	{r7, lr}
 8004e90:	b082      	sub	sp, #8
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f7ff ffa2 	bl	8004de0 <SysTick_Config>
 8004e9c:	4603      	mov	r3, r0
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3708      	adds	r7, #8
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
	...

08004ea8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b082      	sub	sp, #8
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d101      	bne.n	8004eba <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e054      	b.n	8004f64 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	7f5b      	ldrb	r3, [r3, #29]
 8004ebe:	b2db      	uxtb	r3, r3
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d105      	bne.n	8004ed0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f7fc f8d6 	bl	800107c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2202      	movs	r2, #2
 8004ed4:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	791b      	ldrb	r3, [r3, #4]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d10c      	bne.n	8004ef8 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a22      	ldr	r2, [pc, #136]	@ (8004f6c <HAL_CRC_Init+0xc4>)
 8004ee4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	689a      	ldr	r2, [r3, #8]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f022 0218 	bic.w	r2, r2, #24
 8004ef4:	609a      	str	r2, [r3, #8]
 8004ef6:	e00c      	b.n	8004f12 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6899      	ldr	r1, [r3, #8]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	461a      	mov	r2, r3
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f000 f834 	bl	8004f70 <HAL_CRCEx_Polynomial_Set>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d001      	beq.n	8004f12 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e028      	b.n	8004f64 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	795b      	ldrb	r3, [r3, #5]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d105      	bne.n	8004f26 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f04f 32ff 	mov.w	r2, #4294967295
 8004f22:	611a      	str	r2, [r3, #16]
 8004f24:	e004      	b.n	8004f30 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	6912      	ldr	r2, [r2, #16]
 8004f2e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	695a      	ldr	r2, [r3, #20]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	430a      	orrs	r2, r1
 8004f44:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	699a      	ldr	r2, [r3, #24]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	430a      	orrs	r2, r1
 8004f5a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8004f62:	2300      	movs	r3, #0
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3708      	adds	r7, #8
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	04c11db7 	.word	0x04c11db7

08004f70 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b087      	sub	sp, #28
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	60b9      	str	r1, [r7, #8]
 8004f7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004f80:	231f      	movs	r3, #31
 8004f82:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	f003 0301 	and.w	r3, r3, #1
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d102      	bne.n	8004f94 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	75fb      	strb	r3, [r7, #23]
 8004f92:	e063      	b.n	800505c <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004f94:	bf00      	nop
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	1e5a      	subs	r2, r3, #1
 8004f9a:	613a      	str	r2, [r7, #16]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d009      	beq.n	8004fb4 <HAL_CRCEx_Polynomial_Set+0x44>
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	f003 031f 	and.w	r3, r3, #31
 8004fa6:	68ba      	ldr	r2, [r7, #8]
 8004fa8:	fa22 f303 	lsr.w	r3, r2, r3
 8004fac:	f003 0301 	and.w	r3, r3, #1
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d0f0      	beq.n	8004f96 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2b18      	cmp	r3, #24
 8004fb8:	d846      	bhi.n	8005048 <HAL_CRCEx_Polynomial_Set+0xd8>
 8004fba:	a201      	add	r2, pc, #4	@ (adr r2, 8004fc0 <HAL_CRCEx_Polynomial_Set+0x50>)
 8004fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fc0:	0800504f 	.word	0x0800504f
 8004fc4:	08005049 	.word	0x08005049
 8004fc8:	08005049 	.word	0x08005049
 8004fcc:	08005049 	.word	0x08005049
 8004fd0:	08005049 	.word	0x08005049
 8004fd4:	08005049 	.word	0x08005049
 8004fd8:	08005049 	.word	0x08005049
 8004fdc:	08005049 	.word	0x08005049
 8004fe0:	0800503d 	.word	0x0800503d
 8004fe4:	08005049 	.word	0x08005049
 8004fe8:	08005049 	.word	0x08005049
 8004fec:	08005049 	.word	0x08005049
 8004ff0:	08005049 	.word	0x08005049
 8004ff4:	08005049 	.word	0x08005049
 8004ff8:	08005049 	.word	0x08005049
 8004ffc:	08005049 	.word	0x08005049
 8005000:	08005031 	.word	0x08005031
 8005004:	08005049 	.word	0x08005049
 8005008:	08005049 	.word	0x08005049
 800500c:	08005049 	.word	0x08005049
 8005010:	08005049 	.word	0x08005049
 8005014:	08005049 	.word	0x08005049
 8005018:	08005049 	.word	0x08005049
 800501c:	08005049 	.word	0x08005049
 8005020:	08005025 	.word	0x08005025
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	2b06      	cmp	r3, #6
 8005028:	d913      	bls.n	8005052 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800502e:	e010      	b.n	8005052 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	2b07      	cmp	r3, #7
 8005034:	d90f      	bls.n	8005056 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800503a:	e00c      	b.n	8005056 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	2b0f      	cmp	r3, #15
 8005040:	d90b      	bls.n	800505a <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8005046:	e008      	b.n	800505a <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	75fb      	strb	r3, [r7, #23]
        break;
 800504c:	e006      	b.n	800505c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800504e:	bf00      	nop
 8005050:	e004      	b.n	800505c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005052:	bf00      	nop
 8005054:	e002      	b.n	800505c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005056:	bf00      	nop
 8005058:	e000      	b.n	800505c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800505a:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 800505c:	7dfb      	ldrb	r3, [r7, #23]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d10d      	bne.n	800507e <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	68ba      	ldr	r2, [r7, #8]
 8005068:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	f023 0118 	bic.w	r1, r3, #24
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	430a      	orrs	r2, r1
 800507c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800507e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005080:	4618      	mov	r0, r3
 8005082:	371c      	adds	r7, #28
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr

0800508c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b086      	sub	sp, #24
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005094:	2300      	movs	r3, #0
 8005096:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005098:	f7ff fdc4 	bl	8004c24 <HAL_GetTick>
 800509c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d101      	bne.n	80050a8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	e099      	b.n	80051dc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2202      	movs	r2, #2
 80050ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f022 0201 	bic.w	r2, r2, #1
 80050c6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80050c8:	e00f      	b.n	80050ea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80050ca:	f7ff fdab 	bl	8004c24 <HAL_GetTick>
 80050ce:	4602      	mov	r2, r0
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	1ad3      	subs	r3, r2, r3
 80050d4:	2b05      	cmp	r3, #5
 80050d6:	d908      	bls.n	80050ea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2220      	movs	r2, #32
 80050dc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2203      	movs	r2, #3
 80050e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80050e6:	2303      	movs	r3, #3
 80050e8:	e078      	b.n	80051dc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 0301 	and.w	r3, r3, #1
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d1e8      	bne.n	80050ca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005100:	697a      	ldr	r2, [r7, #20]
 8005102:	4b38      	ldr	r3, [pc, #224]	@ (80051e4 <HAL_DMA_Init+0x158>)
 8005104:	4013      	ands	r3, r2
 8005106:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	685a      	ldr	r2, [r3, #4]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005116:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	691b      	ldr	r3, [r3, #16]
 800511c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005122:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	699b      	ldr	r3, [r3, #24]
 8005128:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800512e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6a1b      	ldr	r3, [r3, #32]
 8005134:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005136:	697a      	ldr	r2, [r7, #20]
 8005138:	4313      	orrs	r3, r2
 800513a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005140:	2b04      	cmp	r3, #4
 8005142:	d107      	bne.n	8005154 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800514c:	4313      	orrs	r3, r2
 800514e:	697a      	ldr	r2, [r7, #20]
 8005150:	4313      	orrs	r3, r2
 8005152:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	697a      	ldr	r2, [r7, #20]
 800515a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	695b      	ldr	r3, [r3, #20]
 8005162:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	f023 0307 	bic.w	r3, r3, #7
 800516a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005170:	697a      	ldr	r2, [r7, #20]
 8005172:	4313      	orrs	r3, r2
 8005174:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800517a:	2b04      	cmp	r3, #4
 800517c:	d117      	bne.n	80051ae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005182:	697a      	ldr	r2, [r7, #20]
 8005184:	4313      	orrs	r3, r2
 8005186:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800518c:	2b00      	cmp	r3, #0
 800518e:	d00e      	beq.n	80051ae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f000 fb73 	bl	800587c <DMA_CheckFifoParam>
 8005196:	4603      	mov	r3, r0
 8005198:	2b00      	cmp	r3, #0
 800519a:	d008      	beq.n	80051ae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2240      	movs	r2, #64	@ 0x40
 80051a0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80051aa:	2301      	movs	r3, #1
 80051ac:	e016      	b.n	80051dc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	697a      	ldr	r2, [r7, #20]
 80051b4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f000 fb2a 	bl	8005810 <DMA_CalcBaseAndBitshift>
 80051bc:	4603      	mov	r3, r0
 80051be:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051c4:	223f      	movs	r2, #63	@ 0x3f
 80051c6:	409a      	lsls	r2, r3
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2200      	movs	r2, #0
 80051d0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2201      	movs	r2, #1
 80051d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80051da:	2300      	movs	r3, #0
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3718      	adds	r7, #24
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}
 80051e4:	f010803f 	.word	0xf010803f

080051e8 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b084      	sub	sp, #16
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d101      	bne.n	80051fa <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	e050      	b.n	800529c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005200:	b2db      	uxtb	r3, r3
 8005202:	2b02      	cmp	r3, #2
 8005204:	d101      	bne.n	800520a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8005206:	2302      	movs	r3, #2
 8005208:	e048      	b.n	800529c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f022 0201 	bic.w	r2, r2, #1
 8005218:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	2200      	movs	r2, #0
 8005220:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	2200      	movs	r2, #0
 8005228:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	2200      	movs	r2, #0
 8005230:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	2200      	movs	r2, #0
 8005238:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	2200      	movs	r2, #0
 8005240:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	2221      	movs	r2, #33	@ 0x21
 8005248:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f000 fae0 	bl	8005810 <DMA_CalcBaseAndBitshift>
 8005250:	4603      	mov	r3, r0
 8005252:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005258:	223f      	movs	r2, #63	@ 0x3f
 800525a:	409a      	lsls	r2, r3
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2200      	movs	r2, #0
 800526a:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2200      	movs	r2, #0
 8005270:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2200      	movs	r2, #0
 8005282:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800529a:	2300      	movs	r3, #0
}
 800529c:	4618      	mov	r0, r3
 800529e:	3710      	adds	r7, #16
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}

080052a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b086      	sub	sp, #24
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	60f8      	str	r0, [r7, #12]
 80052ac:	60b9      	str	r1, [r7, #8]
 80052ae:	607a      	str	r2, [r7, #4]
 80052b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052b2:	2300      	movs	r3, #0
 80052b4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052ba:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d101      	bne.n	80052ca <HAL_DMA_Start_IT+0x26>
 80052c6:	2302      	movs	r3, #2
 80052c8:	e048      	b.n	800535c <HAL_DMA_Start_IT+0xb8>
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2201      	movs	r2, #1
 80052ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d137      	bne.n	800534e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2202      	movs	r2, #2
 80052e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2200      	movs	r2, #0
 80052ea:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	687a      	ldr	r2, [r7, #4]
 80052f0:	68b9      	ldr	r1, [r7, #8]
 80052f2:	68f8      	ldr	r0, [r7, #12]
 80052f4:	f000 fa5e 	bl	80057b4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052fc:	223f      	movs	r2, #63	@ 0x3f
 80052fe:	409a      	lsls	r2, r3
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f042 0216 	orr.w	r2, r2, #22
 8005312:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	695a      	ldr	r2, [r3, #20]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005322:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005328:	2b00      	cmp	r3, #0
 800532a:	d007      	beq.n	800533c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f042 0208 	orr.w	r2, r2, #8
 800533a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f042 0201 	orr.w	r2, r2, #1
 800534a:	601a      	str	r2, [r3, #0]
 800534c:	e005      	b.n	800535a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2200      	movs	r2, #0
 8005352:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005356:	2302      	movs	r3, #2
 8005358:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800535a:	7dfb      	ldrb	r3, [r7, #23]
}
 800535c:	4618      	mov	r0, r3
 800535e:	3718      	adds	r7, #24
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}

08005364 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005370:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005372:	f7ff fc57 	bl	8004c24 <HAL_GetTick>
 8005376:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800537e:	b2db      	uxtb	r3, r3
 8005380:	2b02      	cmp	r3, #2
 8005382:	d008      	beq.n	8005396 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2280      	movs	r2, #128	@ 0x80
 8005388:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	e052      	b.n	800543c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f022 0216 	bic.w	r2, r2, #22
 80053a4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	695a      	ldr	r2, [r3, #20]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80053b4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d103      	bne.n	80053c6 <HAL_DMA_Abort+0x62>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d007      	beq.n	80053d6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f022 0208 	bic.w	r2, r2, #8
 80053d4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f022 0201 	bic.w	r2, r2, #1
 80053e4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80053e6:	e013      	b.n	8005410 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80053e8:	f7ff fc1c 	bl	8004c24 <HAL_GetTick>
 80053ec:	4602      	mov	r2, r0
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	1ad3      	subs	r3, r2, r3
 80053f2:	2b05      	cmp	r3, #5
 80053f4:	d90c      	bls.n	8005410 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2220      	movs	r2, #32
 80053fa:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2203      	movs	r2, #3
 8005400:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2200      	movs	r2, #0
 8005408:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 800540c:	2303      	movs	r3, #3
 800540e:	e015      	b.n	800543c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 0301 	and.w	r3, r3, #1
 800541a:	2b00      	cmp	r3, #0
 800541c:	d1e4      	bne.n	80053e8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005422:	223f      	movs	r2, #63	@ 0x3f
 8005424:	409a      	lsls	r2, r3
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2201      	movs	r2, #1
 800542e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2200      	movs	r2, #0
 8005436:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 800543a:	2300      	movs	r3, #0
}
 800543c:	4618      	mov	r0, r3
 800543e:	3710      	adds	r7, #16
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}

08005444 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005444:	b480      	push	{r7}
 8005446:	b083      	sub	sp, #12
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005452:	b2db      	uxtb	r3, r3
 8005454:	2b02      	cmp	r3, #2
 8005456:	d004      	beq.n	8005462 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2280      	movs	r2, #128	@ 0x80
 800545c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	e00c      	b.n	800547c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2205      	movs	r2, #5
 8005466:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f022 0201 	bic.w	r2, r2, #1
 8005478:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800547a:	2300      	movs	r3, #0
}
 800547c:	4618      	mov	r0, r3
 800547e:	370c      	adds	r7, #12
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr

08005488 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b086      	sub	sp, #24
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8005490:	2300      	movs	r3, #0
 8005492:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8005494:	4b8e      	ldr	r3, [pc, #568]	@ (80056d0 <HAL_DMA_IRQHandler+0x248>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a8e      	ldr	r2, [pc, #568]	@ (80056d4 <HAL_DMA_IRQHandler+0x24c>)
 800549a:	fba2 2303 	umull	r2, r3, r2, r3
 800549e:	0a9b      	lsrs	r3, r3, #10
 80054a0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054a6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054b2:	2208      	movs	r2, #8
 80054b4:	409a      	lsls	r2, r3
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	4013      	ands	r3, r2
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d01a      	beq.n	80054f4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 0304 	and.w	r3, r3, #4
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d013      	beq.n	80054f4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f022 0204 	bic.w	r2, r2, #4
 80054da:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054e0:	2208      	movs	r2, #8
 80054e2:	409a      	lsls	r2, r3
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054ec:	f043 0201 	orr.w	r2, r3, #1
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054f8:	2201      	movs	r2, #1
 80054fa:	409a      	lsls	r2, r3
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	4013      	ands	r3, r2
 8005500:	2b00      	cmp	r3, #0
 8005502:	d012      	beq.n	800552a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	695b      	ldr	r3, [r3, #20]
 800550a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800550e:	2b00      	cmp	r3, #0
 8005510:	d00b      	beq.n	800552a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005516:	2201      	movs	r2, #1
 8005518:	409a      	lsls	r2, r3
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005522:	f043 0202 	orr.w	r2, r3, #2
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800552e:	2204      	movs	r2, #4
 8005530:	409a      	lsls	r2, r3
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	4013      	ands	r3, r2
 8005536:	2b00      	cmp	r3, #0
 8005538:	d012      	beq.n	8005560 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f003 0302 	and.w	r3, r3, #2
 8005544:	2b00      	cmp	r3, #0
 8005546:	d00b      	beq.n	8005560 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800554c:	2204      	movs	r2, #4
 800554e:	409a      	lsls	r2, r3
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005558:	f043 0204 	orr.w	r2, r3, #4
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005564:	2210      	movs	r2, #16
 8005566:	409a      	lsls	r2, r3
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	4013      	ands	r3, r2
 800556c:	2b00      	cmp	r3, #0
 800556e:	d043      	beq.n	80055f8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f003 0308 	and.w	r3, r3, #8
 800557a:	2b00      	cmp	r3, #0
 800557c:	d03c      	beq.n	80055f8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005582:	2210      	movs	r2, #16
 8005584:	409a      	lsls	r2, r3
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005594:	2b00      	cmp	r3, #0
 8005596:	d018      	beq.n	80055ca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d108      	bne.n	80055b8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d024      	beq.n	80055f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	4798      	blx	r3
 80055b6:	e01f      	b.n	80055f8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d01b      	beq.n	80055f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	4798      	blx	r3
 80055c8:	e016      	b.n	80055f8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d107      	bne.n	80055e8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f022 0208 	bic.w	r2, r2, #8
 80055e6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d003      	beq.n	80055f8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055fc:	2220      	movs	r2, #32
 80055fe:	409a      	lsls	r2, r3
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	4013      	ands	r3, r2
 8005604:	2b00      	cmp	r3, #0
 8005606:	f000 808f 	beq.w	8005728 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f003 0310 	and.w	r3, r3, #16
 8005614:	2b00      	cmp	r3, #0
 8005616:	f000 8087 	beq.w	8005728 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800561e:	2220      	movs	r2, #32
 8005620:	409a      	lsls	r2, r3
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800562c:	b2db      	uxtb	r3, r3
 800562e:	2b05      	cmp	r3, #5
 8005630:	d136      	bne.n	80056a0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f022 0216 	bic.w	r2, r2, #22
 8005640:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	695a      	ldr	r2, [r3, #20]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005650:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005656:	2b00      	cmp	r3, #0
 8005658:	d103      	bne.n	8005662 <HAL_DMA_IRQHandler+0x1da>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800565e:	2b00      	cmp	r3, #0
 8005660:	d007      	beq.n	8005672 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f022 0208 	bic.w	r2, r2, #8
 8005670:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005676:	223f      	movs	r2, #63	@ 0x3f
 8005678:	409a      	lsls	r2, r3
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2201      	movs	r2, #1
 8005682:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2200      	movs	r2, #0
 800568a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005692:	2b00      	cmp	r3, #0
 8005694:	d07e      	beq.n	8005794 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	4798      	blx	r3
        }
        return;
 800569e:	e079      	b.n	8005794 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d01d      	beq.n	80056ea <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d10d      	bne.n	80056d8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d031      	beq.n	8005728 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	4798      	blx	r3
 80056cc:	e02c      	b.n	8005728 <HAL_DMA_IRQHandler+0x2a0>
 80056ce:	bf00      	nop
 80056d0:	2000001c 	.word	0x2000001c
 80056d4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d023      	beq.n	8005728 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	4798      	blx	r3
 80056e8:	e01e      	b.n	8005728 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d10f      	bne.n	8005718 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f022 0210 	bic.w	r2, r2, #16
 8005706:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2200      	movs	r2, #0
 8005714:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800571c:	2b00      	cmp	r3, #0
 800571e:	d003      	beq.n	8005728 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800572c:	2b00      	cmp	r3, #0
 800572e:	d032      	beq.n	8005796 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005734:	f003 0301 	and.w	r3, r3, #1
 8005738:	2b00      	cmp	r3, #0
 800573a:	d022      	beq.n	8005782 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2205      	movs	r2, #5
 8005740:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f022 0201 	bic.w	r2, r2, #1
 8005752:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	3301      	adds	r3, #1
 8005758:	60bb      	str	r3, [r7, #8]
 800575a:	697a      	ldr	r2, [r7, #20]
 800575c:	429a      	cmp	r2, r3
 800575e:	d307      	bcc.n	8005770 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f003 0301 	and.w	r3, r3, #1
 800576a:	2b00      	cmp	r3, #0
 800576c:	d1f2      	bne.n	8005754 <HAL_DMA_IRQHandler+0x2cc>
 800576e:	e000      	b.n	8005772 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005770:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2201      	movs	r2, #1
 8005776:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2200      	movs	r2, #0
 800577e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005786:	2b00      	cmp	r3, #0
 8005788:	d005      	beq.n	8005796 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	4798      	blx	r3
 8005792:	e000      	b.n	8005796 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005794:	bf00      	nop
    }
  }
}
 8005796:	3718      	adds	r7, #24
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}

0800579c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800579c:	b480      	push	{r7}
 800579e:	b083      	sub	sp, #12
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	370c      	adds	r7, #12
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr

080057b4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b085      	sub	sp, #20
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	60f8      	str	r0, [r7, #12]
 80057bc:	60b9      	str	r1, [r7, #8]
 80057be:	607a      	str	r2, [r7, #4]
 80057c0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80057d0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	683a      	ldr	r2, [r7, #0]
 80057d8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	2b40      	cmp	r3, #64	@ 0x40
 80057e0:	d108      	bne.n	80057f4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	68ba      	ldr	r2, [r7, #8]
 80057f0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80057f2:	e007      	b.n	8005804 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	68ba      	ldr	r2, [r7, #8]
 80057fa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	60da      	str	r2, [r3, #12]
}
 8005804:	bf00      	nop
 8005806:	3714      	adds	r7, #20
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr

08005810 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005810:	b480      	push	{r7}
 8005812:	b085      	sub	sp, #20
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	b2db      	uxtb	r3, r3
 800581e:	3b10      	subs	r3, #16
 8005820:	4a13      	ldr	r2, [pc, #76]	@ (8005870 <DMA_CalcBaseAndBitshift+0x60>)
 8005822:	fba2 2303 	umull	r2, r3, r2, r3
 8005826:	091b      	lsrs	r3, r3, #4
 8005828:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800582a:	4a12      	ldr	r2, [pc, #72]	@ (8005874 <DMA_CalcBaseAndBitshift+0x64>)
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	4413      	add	r3, r2
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	461a      	mov	r2, r3
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2b03      	cmp	r3, #3
 800583c:	d908      	bls.n	8005850 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	461a      	mov	r2, r3
 8005844:	4b0c      	ldr	r3, [pc, #48]	@ (8005878 <DMA_CalcBaseAndBitshift+0x68>)
 8005846:	4013      	ands	r3, r2
 8005848:	1d1a      	adds	r2, r3, #4
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	659a      	str	r2, [r3, #88]	@ 0x58
 800584e:	e006      	b.n	800585e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	461a      	mov	r2, r3
 8005856:	4b08      	ldr	r3, [pc, #32]	@ (8005878 <DMA_CalcBaseAndBitshift+0x68>)
 8005858:	4013      	ands	r3, r2
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005862:	4618      	mov	r0, r3
 8005864:	3714      	adds	r7, #20
 8005866:	46bd      	mov	sp, r7
 8005868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586c:	4770      	bx	lr
 800586e:	bf00      	nop
 8005870:	aaaaaaab 	.word	0xaaaaaaab
 8005874:	08017a0c 	.word	0x08017a0c
 8005878:	fffffc00 	.word	0xfffffc00

0800587c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800587c:	b480      	push	{r7}
 800587e:	b085      	sub	sp, #20
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005884:	2300      	movs	r3, #0
 8005886:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800588c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	699b      	ldr	r3, [r3, #24]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d11f      	bne.n	80058d6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	2b03      	cmp	r3, #3
 800589a:	d856      	bhi.n	800594a <DMA_CheckFifoParam+0xce>
 800589c:	a201      	add	r2, pc, #4	@ (adr r2, 80058a4 <DMA_CheckFifoParam+0x28>)
 800589e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058a2:	bf00      	nop
 80058a4:	080058b5 	.word	0x080058b5
 80058a8:	080058c7 	.word	0x080058c7
 80058ac:	080058b5 	.word	0x080058b5
 80058b0:	0800594b 	.word	0x0800594b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d046      	beq.n	800594e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058c4:	e043      	b.n	800594e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058ca:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80058ce:	d140      	bne.n	8005952 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058d4:	e03d      	b.n	8005952 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	699b      	ldr	r3, [r3, #24]
 80058da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058de:	d121      	bne.n	8005924 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	2b03      	cmp	r3, #3
 80058e4:	d837      	bhi.n	8005956 <DMA_CheckFifoParam+0xda>
 80058e6:	a201      	add	r2, pc, #4	@ (adr r2, 80058ec <DMA_CheckFifoParam+0x70>)
 80058e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ec:	080058fd 	.word	0x080058fd
 80058f0:	08005903 	.word	0x08005903
 80058f4:	080058fd 	.word	0x080058fd
 80058f8:	08005915 	.word	0x08005915
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80058fc:	2301      	movs	r3, #1
 80058fe:	73fb      	strb	r3, [r7, #15]
      break;
 8005900:	e030      	b.n	8005964 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005906:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800590a:	2b00      	cmp	r3, #0
 800590c:	d025      	beq.n	800595a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005912:	e022      	b.n	800595a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005918:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800591c:	d11f      	bne.n	800595e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005922:	e01c      	b.n	800595e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	2b02      	cmp	r3, #2
 8005928:	d903      	bls.n	8005932 <DMA_CheckFifoParam+0xb6>
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	2b03      	cmp	r3, #3
 800592e:	d003      	beq.n	8005938 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005930:	e018      	b.n	8005964 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	73fb      	strb	r3, [r7, #15]
      break;
 8005936:	e015      	b.n	8005964 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800593c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005940:	2b00      	cmp	r3, #0
 8005942:	d00e      	beq.n	8005962 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	73fb      	strb	r3, [r7, #15]
      break;
 8005948:	e00b      	b.n	8005962 <DMA_CheckFifoParam+0xe6>
      break;
 800594a:	bf00      	nop
 800594c:	e00a      	b.n	8005964 <DMA_CheckFifoParam+0xe8>
      break;
 800594e:	bf00      	nop
 8005950:	e008      	b.n	8005964 <DMA_CheckFifoParam+0xe8>
      break;
 8005952:	bf00      	nop
 8005954:	e006      	b.n	8005964 <DMA_CheckFifoParam+0xe8>
      break;
 8005956:	bf00      	nop
 8005958:	e004      	b.n	8005964 <DMA_CheckFifoParam+0xe8>
      break;
 800595a:	bf00      	nop
 800595c:	e002      	b.n	8005964 <DMA_CheckFifoParam+0xe8>
      break;   
 800595e:	bf00      	nop
 8005960:	e000      	b.n	8005964 <DMA_CheckFifoParam+0xe8>
      break;
 8005962:	bf00      	nop
    }
  } 
  
  return status; 
 8005964:	7bfb      	ldrb	r3, [r7, #15]
}
 8005966:	4618      	mov	r0, r3
 8005968:	3714      	adds	r7, #20
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr
 8005972:	bf00      	nop

08005974 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005974:	b480      	push	{r7}
 8005976:	b089      	sub	sp, #36	@ 0x24
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800597e:	2300      	movs	r3, #0
 8005980:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005982:	2300      	movs	r3, #0
 8005984:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005986:	2300      	movs	r3, #0
 8005988:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800598a:	2300      	movs	r3, #0
 800598c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800598e:	2300      	movs	r3, #0
 8005990:	61fb      	str	r3, [r7, #28]
 8005992:	e175      	b.n	8005c80 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005994:	2201      	movs	r2, #1
 8005996:	69fb      	ldr	r3, [r7, #28]
 8005998:	fa02 f303 	lsl.w	r3, r2, r3
 800599c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	697a      	ldr	r2, [r7, #20]
 80059a4:	4013      	ands	r3, r2
 80059a6:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80059a8:	693a      	ldr	r2, [r7, #16]
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	429a      	cmp	r2, r3
 80059ae:	f040 8164 	bne.w	8005c7a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	f003 0303 	and.w	r3, r3, #3
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d005      	beq.n	80059ca <HAL_GPIO_Init+0x56>
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	f003 0303 	and.w	r3, r3, #3
 80059c6:	2b02      	cmp	r3, #2
 80059c8:	d130      	bne.n	8005a2c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80059d0:	69fb      	ldr	r3, [r7, #28]
 80059d2:	005b      	lsls	r3, r3, #1
 80059d4:	2203      	movs	r2, #3
 80059d6:	fa02 f303 	lsl.w	r3, r2, r3
 80059da:	43db      	mvns	r3, r3
 80059dc:	69ba      	ldr	r2, [r7, #24]
 80059de:	4013      	ands	r3, r2
 80059e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	68da      	ldr	r2, [r3, #12]
 80059e6:	69fb      	ldr	r3, [r7, #28]
 80059e8:	005b      	lsls	r3, r3, #1
 80059ea:	fa02 f303 	lsl.w	r3, r2, r3
 80059ee:	69ba      	ldr	r2, [r7, #24]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	69ba      	ldr	r2, [r7, #24]
 80059f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005a00:	2201      	movs	r2, #1
 8005a02:	69fb      	ldr	r3, [r7, #28]
 8005a04:	fa02 f303 	lsl.w	r3, r2, r3
 8005a08:	43db      	mvns	r3, r3
 8005a0a:	69ba      	ldr	r2, [r7, #24]
 8005a0c:	4013      	ands	r3, r2
 8005a0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	091b      	lsrs	r3, r3, #4
 8005a16:	f003 0201 	and.w	r2, r3, #1
 8005a1a:	69fb      	ldr	r3, [r7, #28]
 8005a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a20:	69ba      	ldr	r2, [r7, #24]
 8005a22:	4313      	orrs	r3, r2
 8005a24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	69ba      	ldr	r2, [r7, #24]
 8005a2a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	f003 0303 	and.w	r3, r3, #3
 8005a34:	2b03      	cmp	r3, #3
 8005a36:	d017      	beq.n	8005a68 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005a3e:	69fb      	ldr	r3, [r7, #28]
 8005a40:	005b      	lsls	r3, r3, #1
 8005a42:	2203      	movs	r2, #3
 8005a44:	fa02 f303 	lsl.w	r3, r2, r3
 8005a48:	43db      	mvns	r3, r3
 8005a4a:	69ba      	ldr	r2, [r7, #24]
 8005a4c:	4013      	ands	r3, r2
 8005a4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	689a      	ldr	r2, [r3, #8]
 8005a54:	69fb      	ldr	r3, [r7, #28]
 8005a56:	005b      	lsls	r3, r3, #1
 8005a58:	fa02 f303 	lsl.w	r3, r2, r3
 8005a5c:	69ba      	ldr	r2, [r7, #24]
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	69ba      	ldr	r2, [r7, #24]
 8005a66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	f003 0303 	and.w	r3, r3, #3
 8005a70:	2b02      	cmp	r3, #2
 8005a72:	d123      	bne.n	8005abc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005a74:	69fb      	ldr	r3, [r7, #28]
 8005a76:	08da      	lsrs	r2, r3, #3
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	3208      	adds	r2, #8
 8005a7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	f003 0307 	and.w	r3, r3, #7
 8005a88:	009b      	lsls	r3, r3, #2
 8005a8a:	220f      	movs	r2, #15
 8005a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a90:	43db      	mvns	r3, r3
 8005a92:	69ba      	ldr	r2, [r7, #24]
 8005a94:	4013      	ands	r3, r2
 8005a96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	691a      	ldr	r2, [r3, #16]
 8005a9c:	69fb      	ldr	r3, [r7, #28]
 8005a9e:	f003 0307 	and.w	r3, r3, #7
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8005aa8:	69ba      	ldr	r2, [r7, #24]
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005aae:	69fb      	ldr	r3, [r7, #28]
 8005ab0:	08da      	lsrs	r2, r3, #3
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	3208      	adds	r2, #8
 8005ab6:	69b9      	ldr	r1, [r7, #24]
 8005ab8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005ac2:	69fb      	ldr	r3, [r7, #28]
 8005ac4:	005b      	lsls	r3, r3, #1
 8005ac6:	2203      	movs	r2, #3
 8005ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8005acc:	43db      	mvns	r3, r3
 8005ace:	69ba      	ldr	r2, [r7, #24]
 8005ad0:	4013      	ands	r3, r2
 8005ad2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	f003 0203 	and.w	r2, r3, #3
 8005adc:	69fb      	ldr	r3, [r7, #28]
 8005ade:	005b      	lsls	r3, r3, #1
 8005ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ae4:	69ba      	ldr	r2, [r7, #24]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	69ba      	ldr	r2, [r7, #24]
 8005aee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	f000 80be 	beq.w	8005c7a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005afe:	4b66      	ldr	r3, [pc, #408]	@ (8005c98 <HAL_GPIO_Init+0x324>)
 8005b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b02:	4a65      	ldr	r2, [pc, #404]	@ (8005c98 <HAL_GPIO_Init+0x324>)
 8005b04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005b08:	6453      	str	r3, [r2, #68]	@ 0x44
 8005b0a:	4b63      	ldr	r3, [pc, #396]	@ (8005c98 <HAL_GPIO_Init+0x324>)
 8005b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005b12:	60fb      	str	r3, [r7, #12]
 8005b14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005b16:	4a61      	ldr	r2, [pc, #388]	@ (8005c9c <HAL_GPIO_Init+0x328>)
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	089b      	lsrs	r3, r3, #2
 8005b1c:	3302      	adds	r3, #2
 8005b1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b22:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005b24:	69fb      	ldr	r3, [r7, #28]
 8005b26:	f003 0303 	and.w	r3, r3, #3
 8005b2a:	009b      	lsls	r3, r3, #2
 8005b2c:	220f      	movs	r2, #15
 8005b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b32:	43db      	mvns	r3, r3
 8005b34:	69ba      	ldr	r2, [r7, #24]
 8005b36:	4013      	ands	r3, r2
 8005b38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	4a58      	ldr	r2, [pc, #352]	@ (8005ca0 <HAL_GPIO_Init+0x32c>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d037      	beq.n	8005bb2 <HAL_GPIO_Init+0x23e>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4a57      	ldr	r2, [pc, #348]	@ (8005ca4 <HAL_GPIO_Init+0x330>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d031      	beq.n	8005bae <HAL_GPIO_Init+0x23a>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4a56      	ldr	r2, [pc, #344]	@ (8005ca8 <HAL_GPIO_Init+0x334>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d02b      	beq.n	8005baa <HAL_GPIO_Init+0x236>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4a55      	ldr	r2, [pc, #340]	@ (8005cac <HAL_GPIO_Init+0x338>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d025      	beq.n	8005ba6 <HAL_GPIO_Init+0x232>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4a54      	ldr	r2, [pc, #336]	@ (8005cb0 <HAL_GPIO_Init+0x33c>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d01f      	beq.n	8005ba2 <HAL_GPIO_Init+0x22e>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4a53      	ldr	r2, [pc, #332]	@ (8005cb4 <HAL_GPIO_Init+0x340>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d019      	beq.n	8005b9e <HAL_GPIO_Init+0x22a>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4a52      	ldr	r2, [pc, #328]	@ (8005cb8 <HAL_GPIO_Init+0x344>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d013      	beq.n	8005b9a <HAL_GPIO_Init+0x226>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4a51      	ldr	r2, [pc, #324]	@ (8005cbc <HAL_GPIO_Init+0x348>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d00d      	beq.n	8005b96 <HAL_GPIO_Init+0x222>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4a50      	ldr	r2, [pc, #320]	@ (8005cc0 <HAL_GPIO_Init+0x34c>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d007      	beq.n	8005b92 <HAL_GPIO_Init+0x21e>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	4a4f      	ldr	r2, [pc, #316]	@ (8005cc4 <HAL_GPIO_Init+0x350>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d101      	bne.n	8005b8e <HAL_GPIO_Init+0x21a>
 8005b8a:	2309      	movs	r3, #9
 8005b8c:	e012      	b.n	8005bb4 <HAL_GPIO_Init+0x240>
 8005b8e:	230a      	movs	r3, #10
 8005b90:	e010      	b.n	8005bb4 <HAL_GPIO_Init+0x240>
 8005b92:	2308      	movs	r3, #8
 8005b94:	e00e      	b.n	8005bb4 <HAL_GPIO_Init+0x240>
 8005b96:	2307      	movs	r3, #7
 8005b98:	e00c      	b.n	8005bb4 <HAL_GPIO_Init+0x240>
 8005b9a:	2306      	movs	r3, #6
 8005b9c:	e00a      	b.n	8005bb4 <HAL_GPIO_Init+0x240>
 8005b9e:	2305      	movs	r3, #5
 8005ba0:	e008      	b.n	8005bb4 <HAL_GPIO_Init+0x240>
 8005ba2:	2304      	movs	r3, #4
 8005ba4:	e006      	b.n	8005bb4 <HAL_GPIO_Init+0x240>
 8005ba6:	2303      	movs	r3, #3
 8005ba8:	e004      	b.n	8005bb4 <HAL_GPIO_Init+0x240>
 8005baa:	2302      	movs	r3, #2
 8005bac:	e002      	b.n	8005bb4 <HAL_GPIO_Init+0x240>
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e000      	b.n	8005bb4 <HAL_GPIO_Init+0x240>
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	69fa      	ldr	r2, [r7, #28]
 8005bb6:	f002 0203 	and.w	r2, r2, #3
 8005bba:	0092      	lsls	r2, r2, #2
 8005bbc:	4093      	lsls	r3, r2
 8005bbe:	69ba      	ldr	r2, [r7, #24]
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005bc4:	4935      	ldr	r1, [pc, #212]	@ (8005c9c <HAL_GPIO_Init+0x328>)
 8005bc6:	69fb      	ldr	r3, [r7, #28]
 8005bc8:	089b      	lsrs	r3, r3, #2
 8005bca:	3302      	adds	r3, #2
 8005bcc:	69ba      	ldr	r2, [r7, #24]
 8005bce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005bd2:	4b3d      	ldr	r3, [pc, #244]	@ (8005cc8 <HAL_GPIO_Init+0x354>)
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	43db      	mvns	r3, r3
 8005bdc:	69ba      	ldr	r2, [r7, #24]
 8005bde:	4013      	ands	r3, r2
 8005be0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d003      	beq.n	8005bf6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005bee:	69ba      	ldr	r2, [r7, #24]
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005bf6:	4a34      	ldr	r2, [pc, #208]	@ (8005cc8 <HAL_GPIO_Init+0x354>)
 8005bf8:	69bb      	ldr	r3, [r7, #24]
 8005bfa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005bfc:	4b32      	ldr	r3, [pc, #200]	@ (8005cc8 <HAL_GPIO_Init+0x354>)
 8005bfe:	68db      	ldr	r3, [r3, #12]
 8005c00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	43db      	mvns	r3, r3
 8005c06:	69ba      	ldr	r2, [r7, #24]
 8005c08:	4013      	ands	r3, r2
 8005c0a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d003      	beq.n	8005c20 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005c18:	69ba      	ldr	r2, [r7, #24]
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005c20:	4a29      	ldr	r2, [pc, #164]	@ (8005cc8 <HAL_GPIO_Init+0x354>)
 8005c22:	69bb      	ldr	r3, [r7, #24]
 8005c24:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005c26:	4b28      	ldr	r3, [pc, #160]	@ (8005cc8 <HAL_GPIO_Init+0x354>)
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	43db      	mvns	r3, r3
 8005c30:	69ba      	ldr	r2, [r7, #24]
 8005c32:	4013      	ands	r3, r2
 8005c34:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d003      	beq.n	8005c4a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005c42:	69ba      	ldr	r2, [r7, #24]
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	4313      	orrs	r3, r2
 8005c48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005c4a:	4a1f      	ldr	r2, [pc, #124]	@ (8005cc8 <HAL_GPIO_Init+0x354>)
 8005c4c:	69bb      	ldr	r3, [r7, #24]
 8005c4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005c50:	4b1d      	ldr	r3, [pc, #116]	@ (8005cc8 <HAL_GPIO_Init+0x354>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	43db      	mvns	r3, r3
 8005c5a:	69ba      	ldr	r2, [r7, #24]
 8005c5c:	4013      	ands	r3, r2
 8005c5e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d003      	beq.n	8005c74 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005c6c:	69ba      	ldr	r2, [r7, #24]
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	4313      	orrs	r3, r2
 8005c72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005c74:	4a14      	ldr	r2, [pc, #80]	@ (8005cc8 <HAL_GPIO_Init+0x354>)
 8005c76:	69bb      	ldr	r3, [r7, #24]
 8005c78:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8005c7a:	69fb      	ldr	r3, [r7, #28]
 8005c7c:	3301      	adds	r3, #1
 8005c7e:	61fb      	str	r3, [r7, #28]
 8005c80:	69fb      	ldr	r3, [r7, #28]
 8005c82:	2b0f      	cmp	r3, #15
 8005c84:	f67f ae86 	bls.w	8005994 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005c88:	bf00      	nop
 8005c8a:	bf00      	nop
 8005c8c:	3724      	adds	r7, #36	@ 0x24
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr
 8005c96:	bf00      	nop
 8005c98:	40023800 	.word	0x40023800
 8005c9c:	40013800 	.word	0x40013800
 8005ca0:	40020000 	.word	0x40020000
 8005ca4:	40020400 	.word	0x40020400
 8005ca8:	40020800 	.word	0x40020800
 8005cac:	40020c00 	.word	0x40020c00
 8005cb0:	40021000 	.word	0x40021000
 8005cb4:	40021400 	.word	0x40021400
 8005cb8:	40021800 	.word	0x40021800
 8005cbc:	40021c00 	.word	0x40021c00
 8005cc0:	40022000 	.word	0x40022000
 8005cc4:	40022400 	.word	0x40022400
 8005cc8:	40013c00 	.word	0x40013c00

08005ccc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b087      	sub	sp, #28
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
 8005cd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	617b      	str	r3, [r7, #20]
 8005ce6:	e0d9      	b.n	8005e9c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005ce8:	2201      	movs	r2, #1
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005cf2:	683a      	ldr	r2, [r7, #0]
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	4013      	ands	r3, r2
 8005cf8:	60fb      	str	r3, [r7, #12]

    if (iocurrent == ioposition)
 8005cfa:	68fa      	ldr	r2, [r7, #12]
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	f040 80c9 	bne.w	8005e96 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8005d04:	4a6b      	ldr	r2, [pc, #428]	@ (8005eb4 <HAL_GPIO_DeInit+0x1e8>)
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	089b      	lsrs	r3, r3, #2
 8005d0a:	3302      	adds	r3, #2
 8005d0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d10:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	f003 0303 	and.w	r3, r3, #3
 8005d18:	009b      	lsls	r3, r3, #2
 8005d1a:	220f      	movs	r2, #15
 8005d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d20:	68ba      	ldr	r2, [r7, #8]
 8005d22:	4013      	ands	r3, r2
 8005d24:	60bb      	str	r3, [r7, #8]
      if (tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	4a63      	ldr	r2, [pc, #396]	@ (8005eb8 <HAL_GPIO_DeInit+0x1ec>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d037      	beq.n	8005d9e <HAL_GPIO_DeInit+0xd2>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4a62      	ldr	r2, [pc, #392]	@ (8005ebc <HAL_GPIO_DeInit+0x1f0>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d031      	beq.n	8005d9a <HAL_GPIO_DeInit+0xce>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	4a61      	ldr	r2, [pc, #388]	@ (8005ec0 <HAL_GPIO_DeInit+0x1f4>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d02b      	beq.n	8005d96 <HAL_GPIO_DeInit+0xca>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	4a60      	ldr	r2, [pc, #384]	@ (8005ec4 <HAL_GPIO_DeInit+0x1f8>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d025      	beq.n	8005d92 <HAL_GPIO_DeInit+0xc6>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4a5f      	ldr	r2, [pc, #380]	@ (8005ec8 <HAL_GPIO_DeInit+0x1fc>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d01f      	beq.n	8005d8e <HAL_GPIO_DeInit+0xc2>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	4a5e      	ldr	r2, [pc, #376]	@ (8005ecc <HAL_GPIO_DeInit+0x200>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d019      	beq.n	8005d8a <HAL_GPIO_DeInit+0xbe>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4a5d      	ldr	r2, [pc, #372]	@ (8005ed0 <HAL_GPIO_DeInit+0x204>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d013      	beq.n	8005d86 <HAL_GPIO_DeInit+0xba>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	4a5c      	ldr	r2, [pc, #368]	@ (8005ed4 <HAL_GPIO_DeInit+0x208>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d00d      	beq.n	8005d82 <HAL_GPIO_DeInit+0xb6>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	4a5b      	ldr	r2, [pc, #364]	@ (8005ed8 <HAL_GPIO_DeInit+0x20c>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d007      	beq.n	8005d7e <HAL_GPIO_DeInit+0xb2>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	4a5a      	ldr	r2, [pc, #360]	@ (8005edc <HAL_GPIO_DeInit+0x210>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d101      	bne.n	8005d7a <HAL_GPIO_DeInit+0xae>
 8005d76:	2309      	movs	r3, #9
 8005d78:	e012      	b.n	8005da0 <HAL_GPIO_DeInit+0xd4>
 8005d7a:	230a      	movs	r3, #10
 8005d7c:	e010      	b.n	8005da0 <HAL_GPIO_DeInit+0xd4>
 8005d7e:	2308      	movs	r3, #8
 8005d80:	e00e      	b.n	8005da0 <HAL_GPIO_DeInit+0xd4>
 8005d82:	2307      	movs	r3, #7
 8005d84:	e00c      	b.n	8005da0 <HAL_GPIO_DeInit+0xd4>
 8005d86:	2306      	movs	r3, #6
 8005d88:	e00a      	b.n	8005da0 <HAL_GPIO_DeInit+0xd4>
 8005d8a:	2305      	movs	r3, #5
 8005d8c:	e008      	b.n	8005da0 <HAL_GPIO_DeInit+0xd4>
 8005d8e:	2304      	movs	r3, #4
 8005d90:	e006      	b.n	8005da0 <HAL_GPIO_DeInit+0xd4>
 8005d92:	2303      	movs	r3, #3
 8005d94:	e004      	b.n	8005da0 <HAL_GPIO_DeInit+0xd4>
 8005d96:	2302      	movs	r3, #2
 8005d98:	e002      	b.n	8005da0 <HAL_GPIO_DeInit+0xd4>
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	e000      	b.n	8005da0 <HAL_GPIO_DeInit+0xd4>
 8005d9e:	2300      	movs	r3, #0
 8005da0:	697a      	ldr	r2, [r7, #20]
 8005da2:	f002 0203 	and.w	r2, r2, #3
 8005da6:	0092      	lsls	r2, r2, #2
 8005da8:	4093      	lsls	r3, r2
 8005daa:	68ba      	ldr	r2, [r7, #8]
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d132      	bne.n	8005e16 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005db0:	4b4b      	ldr	r3, [pc, #300]	@ (8005ee0 <HAL_GPIO_DeInit+0x214>)
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	43db      	mvns	r3, r3
 8005db8:	4949      	ldr	r1, [pc, #292]	@ (8005ee0 <HAL_GPIO_DeInit+0x214>)
 8005dba:	4013      	ands	r3, r2
 8005dbc:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005dbe:	4b48      	ldr	r3, [pc, #288]	@ (8005ee0 <HAL_GPIO_DeInit+0x214>)
 8005dc0:	685a      	ldr	r2, [r3, #4]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	43db      	mvns	r3, r3
 8005dc6:	4946      	ldr	r1, [pc, #280]	@ (8005ee0 <HAL_GPIO_DeInit+0x214>)
 8005dc8:	4013      	ands	r3, r2
 8005dca:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005dcc:	4b44      	ldr	r3, [pc, #272]	@ (8005ee0 <HAL_GPIO_DeInit+0x214>)
 8005dce:	68da      	ldr	r2, [r3, #12]
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	43db      	mvns	r3, r3
 8005dd4:	4942      	ldr	r1, [pc, #264]	@ (8005ee0 <HAL_GPIO_DeInit+0x214>)
 8005dd6:	4013      	ands	r3, r2
 8005dd8:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005dda:	4b41      	ldr	r3, [pc, #260]	@ (8005ee0 <HAL_GPIO_DeInit+0x214>)
 8005ddc:	689a      	ldr	r2, [r3, #8]
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	43db      	mvns	r3, r3
 8005de2:	493f      	ldr	r1, [pc, #252]	@ (8005ee0 <HAL_GPIO_DeInit+0x214>)
 8005de4:	4013      	ands	r3, r2
 8005de6:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	f003 0303 	and.w	r3, r3, #3
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	220f      	movs	r2, #15
 8005df2:	fa02 f303 	lsl.w	r3, r2, r3
 8005df6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8005df8:	4a2e      	ldr	r2, [pc, #184]	@ (8005eb4 <HAL_GPIO_DeInit+0x1e8>)
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	089b      	lsrs	r3, r3, #2
 8005dfe:	3302      	adds	r3, #2
 8005e00:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	43da      	mvns	r2, r3
 8005e08:	482a      	ldr	r0, [pc, #168]	@ (8005eb4 <HAL_GPIO_DeInit+0x1e8>)
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	089b      	lsrs	r3, r3, #2
 8005e0e:	400a      	ands	r2, r1
 8005e10:	3302      	adds	r3, #2
 8005e12:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	005b      	lsls	r3, r3, #1
 8005e1e:	2103      	movs	r1, #3
 8005e20:	fa01 f303 	lsl.w	r3, r1, r3
 8005e24:	43db      	mvns	r3, r3
 8005e26:	401a      	ands	r2, r3
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	08da      	lsrs	r2, r3, #3
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	3208      	adds	r2, #8
 8005e34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	f003 0307 	and.w	r3, r3, #7
 8005e3e:	009b      	lsls	r3, r3, #2
 8005e40:	220f      	movs	r2, #15
 8005e42:	fa02 f303 	lsl.w	r3, r2, r3
 8005e46:	43db      	mvns	r3, r3
 8005e48:	697a      	ldr	r2, [r7, #20]
 8005e4a:	08d2      	lsrs	r2, r2, #3
 8005e4c:	4019      	ands	r1, r3
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	3208      	adds	r2, #8
 8005e52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	68da      	ldr	r2, [r3, #12]
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	005b      	lsls	r3, r3, #1
 8005e5e:	2103      	movs	r1, #3
 8005e60:	fa01 f303 	lsl.w	r3, r1, r3
 8005e64:	43db      	mvns	r3, r3
 8005e66:	401a      	ands	r2, r3
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	685a      	ldr	r2, [r3, #4]
 8005e70:	2101      	movs	r1, #1
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	fa01 f303 	lsl.w	r3, r1, r3
 8005e78:	43db      	mvns	r3, r3
 8005e7a:	401a      	ands	r2, r3
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	689a      	ldr	r2, [r3, #8]
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	005b      	lsls	r3, r3, #1
 8005e88:	2103      	movs	r1, #3
 8005e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8005e8e:	43db      	mvns	r3, r3
 8005e90:	401a      	ands	r2, r3
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	609a      	str	r2, [r3, #8]
  for (position = 0; position < GPIO_NUMBER; position++)
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	3301      	adds	r3, #1
 8005e9a:	617b      	str	r3, [r7, #20]
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	2b0f      	cmp	r3, #15
 8005ea0:	f67f af22 	bls.w	8005ce8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005ea4:	bf00      	nop
 8005ea6:	bf00      	nop
 8005ea8:	371c      	adds	r7, #28
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb0:	4770      	bx	lr
 8005eb2:	bf00      	nop
 8005eb4:	40013800 	.word	0x40013800
 8005eb8:	40020000 	.word	0x40020000
 8005ebc:	40020400 	.word	0x40020400
 8005ec0:	40020800 	.word	0x40020800
 8005ec4:	40020c00 	.word	0x40020c00
 8005ec8:	40021000 	.word	0x40021000
 8005ecc:	40021400 	.word	0x40021400
 8005ed0:	40021800 	.word	0x40021800
 8005ed4:	40021c00 	.word	0x40021c00
 8005ed8:	40022000 	.word	0x40022000
 8005edc:	40022400 	.word	0x40022400
 8005ee0:	40013c00 	.word	0x40013c00

08005ee4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b085      	sub	sp, #20
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	460b      	mov	r3, r1
 8005eee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	691a      	ldr	r2, [r3, #16]
 8005ef4:	887b      	ldrh	r3, [r7, #2]
 8005ef6:	4013      	ands	r3, r2
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d002      	beq.n	8005f02 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005efc:	2301      	movs	r3, #1
 8005efe:	73fb      	strb	r3, [r7, #15]
 8005f00:	e001      	b.n	8005f06 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005f02:	2300      	movs	r3, #0
 8005f04:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3714      	adds	r7, #20
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr

08005f14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b083      	sub	sp, #12
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	460b      	mov	r3, r1
 8005f1e:	807b      	strh	r3, [r7, #2]
 8005f20:	4613      	mov	r3, r2
 8005f22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005f24:	787b      	ldrb	r3, [r7, #1]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d003      	beq.n	8005f32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005f2a:	887a      	ldrh	r2, [r7, #2]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005f30:	e003      	b.n	8005f3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005f32:	887b      	ldrh	r3, [r7, #2]
 8005f34:	041a      	lsls	r2, r3, #16
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	619a      	str	r2, [r3, #24]
}
 8005f3a:	bf00      	nop
 8005f3c:	370c      	adds	r7, #12
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr

08005f46 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005f46:	b480      	push	{r7}
 8005f48:	b085      	sub	sp, #20
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	6078      	str	r0, [r7, #4]
 8005f4e:	460b      	mov	r3, r1
 8005f50:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	695b      	ldr	r3, [r3, #20]
 8005f56:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005f58:	887a      	ldrh	r2, [r7, #2]
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	4013      	ands	r3, r2
 8005f5e:	041a      	lsls	r2, r3, #16
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	43d9      	mvns	r1, r3
 8005f64:	887b      	ldrh	r3, [r7, #2]
 8005f66:	400b      	ands	r3, r1
 8005f68:	431a      	orrs	r2, r3
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	619a      	str	r2, [r3, #24]
}
 8005f6e:	bf00      	nop
 8005f70:	3714      	adds	r7, #20
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr
	...

08005f7c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b082      	sub	sp, #8
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	4603      	mov	r3, r0
 8005f84:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005f86:	4b08      	ldr	r3, [pc, #32]	@ (8005fa8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005f88:	695a      	ldr	r2, [r3, #20]
 8005f8a:	88fb      	ldrh	r3, [r7, #6]
 8005f8c:	4013      	ands	r3, r2
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d006      	beq.n	8005fa0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005f92:	4a05      	ldr	r2, [pc, #20]	@ (8005fa8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005f94:	88fb      	ldrh	r3, [r7, #6]
 8005f96:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005f98:	88fb      	ldrh	r3, [r7, #6]
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f7fb ff00 	bl	8001da0 <HAL_GPIO_EXTI_Callback>
  }
}
 8005fa0:	bf00      	nop
 8005fa2:	3708      	adds	r7, #8
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}
 8005fa8:	40013c00 	.word	0x40013c00

08005fac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b082      	sub	sp, #8
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d101      	bne.n	8005fbe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e08b      	b.n	80060d6 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d106      	bne.n	8005fd8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f000 f8b5 	bl	8006142 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2224      	movs	r2, #36	@ 0x24
 8005fdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f022 0201 	bic.w	r2, r2, #1
 8005fee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	685a      	ldr	r2, [r3, #4]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005ffc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	689a      	ldr	r2, [r3, #8]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800600c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	68db      	ldr	r3, [r3, #12]
 8006012:	2b01      	cmp	r3, #1
 8006014:	d107      	bne.n	8006026 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	689a      	ldr	r2, [r3, #8]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006022:	609a      	str	r2, [r3, #8]
 8006024:	e006      	b.n	8006034 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	689a      	ldr	r2, [r3, #8]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006032:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	68db      	ldr	r3, [r3, #12]
 8006038:	2b02      	cmp	r3, #2
 800603a:	d108      	bne.n	800604e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	685a      	ldr	r2, [r3, #4]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800604a:	605a      	str	r2, [r3, #4]
 800604c:	e007      	b.n	800605e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	685a      	ldr	r2, [r3, #4]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800605c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	6859      	ldr	r1, [r3, #4]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681a      	ldr	r2, [r3, #0]
 8006068:	4b1d      	ldr	r3, [pc, #116]	@ (80060e0 <HAL_I2C_Init+0x134>)
 800606a:	430b      	orrs	r3, r1
 800606c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	68da      	ldr	r2, [r3, #12]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800607c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	691a      	ldr	r2, [r3, #16]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	695b      	ldr	r3, [r3, #20]
 8006086:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	699b      	ldr	r3, [r3, #24]
 800608e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	430a      	orrs	r2, r1
 8006096:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	69d9      	ldr	r1, [r3, #28]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6a1a      	ldr	r2, [r3, #32]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	430a      	orrs	r2, r1
 80060a6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	681a      	ldr	r2, [r3, #0]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f042 0201 	orr.w	r2, r2, #1
 80060b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2200      	movs	r2, #0
 80060bc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2220      	movs	r2, #32
 80060c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2200      	movs	r2, #0
 80060ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2200      	movs	r2, #0
 80060d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80060d4:	2300      	movs	r3, #0
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3708      	adds	r7, #8
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}
 80060de:	bf00      	nop
 80060e0:	02008000 	.word	0x02008000

080060e4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b082      	sub	sp, #8
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d101      	bne.n	80060f6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	e021      	b.n	800613a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2224      	movs	r2, #36	@ 0x24
 80060fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	681a      	ldr	r2, [r3, #0]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f022 0201 	bic.w	r2, r2, #1
 800610c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 f821 	bl	8006156 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2200      	movs	r2, #0
 8006118:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2200      	movs	r2, #0
 800611e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2200      	movs	r2, #0
 8006126:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2200      	movs	r2, #0
 800612c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2200      	movs	r2, #0
 8006134:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006138:	2300      	movs	r3, #0
}
 800613a:	4618      	mov	r0, r3
 800613c:	3708      	adds	r7, #8
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}

08006142 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8006142:	b480      	push	{r7}
 8006144:	b083      	sub	sp, #12
 8006146:	af00      	add	r7, sp, #0
 8006148:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800614a:	bf00      	nop
 800614c:	370c      	adds	r7, #12
 800614e:	46bd      	mov	sp, r7
 8006150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006154:	4770      	bx	lr

08006156 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8006156:	b480      	push	{r7}
 8006158:	b083      	sub	sp, #12
 800615a:	af00      	add	r7, sp, #0
 800615c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800615e:	bf00      	nop
 8006160:	370c      	adds	r7, #12
 8006162:	46bd      	mov	sp, r7
 8006164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006168:	4770      	bx	lr
	...

0800616c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b088      	sub	sp, #32
 8006170:	af02      	add	r7, sp, #8
 8006172:	60f8      	str	r0, [r7, #12]
 8006174:	4608      	mov	r0, r1
 8006176:	4611      	mov	r1, r2
 8006178:	461a      	mov	r2, r3
 800617a:	4603      	mov	r3, r0
 800617c:	817b      	strh	r3, [r7, #10]
 800617e:	460b      	mov	r3, r1
 8006180:	813b      	strh	r3, [r7, #8]
 8006182:	4613      	mov	r3, r2
 8006184:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800618c:	b2db      	uxtb	r3, r3
 800618e:	2b20      	cmp	r3, #32
 8006190:	f040 80f9 	bne.w	8006386 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006194:	6a3b      	ldr	r3, [r7, #32]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d002      	beq.n	80061a0 <HAL_I2C_Mem_Write+0x34>
 800619a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800619c:	2b00      	cmp	r3, #0
 800619e:	d105      	bne.n	80061ac <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80061a6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80061a8:	2301      	movs	r3, #1
 80061aa:	e0ed      	b.n	8006388 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d101      	bne.n	80061ba <HAL_I2C_Mem_Write+0x4e>
 80061b6:	2302      	movs	r3, #2
 80061b8:	e0e6      	b.n	8006388 <HAL_I2C_Mem_Write+0x21c>
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2201      	movs	r2, #1
 80061be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80061c2:	f7fe fd2f 	bl	8004c24 <HAL_GetTick>
 80061c6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	9300      	str	r3, [sp, #0]
 80061cc:	2319      	movs	r3, #25
 80061ce:	2201      	movs	r2, #1
 80061d0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80061d4:	68f8      	ldr	r0, [r7, #12]
 80061d6:	f000 fad1 	bl	800677c <I2C_WaitOnFlagUntilTimeout>
 80061da:	4603      	mov	r3, r0
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d001      	beq.n	80061e4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80061e0:	2301      	movs	r3, #1
 80061e2:	e0d1      	b.n	8006388 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2221      	movs	r2, #33	@ 0x21
 80061e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2240      	movs	r2, #64	@ 0x40
 80061f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2200      	movs	r2, #0
 80061f8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	6a3a      	ldr	r2, [r7, #32]
 80061fe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006204:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2200      	movs	r2, #0
 800620a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800620c:	88f8      	ldrh	r0, [r7, #6]
 800620e:	893a      	ldrh	r2, [r7, #8]
 8006210:	8979      	ldrh	r1, [r7, #10]
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	9301      	str	r3, [sp, #4]
 8006216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006218:	9300      	str	r3, [sp, #0]
 800621a:	4603      	mov	r3, r0
 800621c:	68f8      	ldr	r0, [r7, #12]
 800621e:	f000 f9e1 	bl	80065e4 <I2C_RequestMemoryWrite>
 8006222:	4603      	mov	r3, r0
 8006224:	2b00      	cmp	r3, #0
 8006226:	d005      	beq.n	8006234 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2200      	movs	r2, #0
 800622c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	e0a9      	b.n	8006388 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006238:	b29b      	uxth	r3, r3
 800623a:	2bff      	cmp	r3, #255	@ 0xff
 800623c:	d90e      	bls.n	800625c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	22ff      	movs	r2, #255	@ 0xff
 8006242:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006248:	b2da      	uxtb	r2, r3
 800624a:	8979      	ldrh	r1, [r7, #10]
 800624c:	2300      	movs	r3, #0
 800624e:	9300      	str	r3, [sp, #0]
 8006250:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006254:	68f8      	ldr	r0, [r7, #12]
 8006256:	f000 fc55 	bl	8006b04 <I2C_TransferConfig>
 800625a:	e00f      	b.n	800627c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006260:	b29a      	uxth	r2, r3
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800626a:	b2da      	uxtb	r2, r3
 800626c:	8979      	ldrh	r1, [r7, #10]
 800626e:	2300      	movs	r3, #0
 8006270:	9300      	str	r3, [sp, #0]
 8006272:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006276:	68f8      	ldr	r0, [r7, #12]
 8006278:	f000 fc44 	bl	8006b04 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800627c:	697a      	ldr	r2, [r7, #20]
 800627e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006280:	68f8      	ldr	r0, [r7, #12]
 8006282:	f000 fad4 	bl	800682e <I2C_WaitOnTXISFlagUntilTimeout>
 8006286:	4603      	mov	r3, r0
 8006288:	2b00      	cmp	r3, #0
 800628a:	d001      	beq.n	8006290 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800628c:	2301      	movs	r3, #1
 800628e:	e07b      	b.n	8006388 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006294:	781a      	ldrb	r2, [r3, #0]
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062a0:	1c5a      	adds	r2, r3, #1
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	3b01      	subs	r3, #1
 80062ae:	b29a      	uxth	r2, r3
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062b8:	3b01      	subs	r3, #1
 80062ba:	b29a      	uxth	r2, r3
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d034      	beq.n	8006334 <HAL_I2C_Mem_Write+0x1c8>
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d130      	bne.n	8006334 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	9300      	str	r3, [sp, #0]
 80062d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062d8:	2200      	movs	r2, #0
 80062da:	2180      	movs	r1, #128	@ 0x80
 80062dc:	68f8      	ldr	r0, [r7, #12]
 80062de:	f000 fa4d 	bl	800677c <I2C_WaitOnFlagUntilTimeout>
 80062e2:	4603      	mov	r3, r0
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d001      	beq.n	80062ec <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80062e8:	2301      	movs	r3, #1
 80062ea:	e04d      	b.n	8006388 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	2bff      	cmp	r3, #255	@ 0xff
 80062f4:	d90e      	bls.n	8006314 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	22ff      	movs	r2, #255	@ 0xff
 80062fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006300:	b2da      	uxtb	r2, r3
 8006302:	8979      	ldrh	r1, [r7, #10]
 8006304:	2300      	movs	r3, #0
 8006306:	9300      	str	r3, [sp, #0]
 8006308:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800630c:	68f8      	ldr	r0, [r7, #12]
 800630e:	f000 fbf9 	bl	8006b04 <I2C_TransferConfig>
 8006312:	e00f      	b.n	8006334 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006318:	b29a      	uxth	r2, r3
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006322:	b2da      	uxtb	r2, r3
 8006324:	8979      	ldrh	r1, [r7, #10]
 8006326:	2300      	movs	r3, #0
 8006328:	9300      	str	r3, [sp, #0]
 800632a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800632e:	68f8      	ldr	r0, [r7, #12]
 8006330:	f000 fbe8 	bl	8006b04 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006338:	b29b      	uxth	r3, r3
 800633a:	2b00      	cmp	r3, #0
 800633c:	d19e      	bne.n	800627c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800633e:	697a      	ldr	r2, [r7, #20]
 8006340:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006342:	68f8      	ldr	r0, [r7, #12]
 8006344:	f000 faba 	bl	80068bc <I2C_WaitOnSTOPFlagUntilTimeout>
 8006348:	4603      	mov	r3, r0
 800634a:	2b00      	cmp	r3, #0
 800634c:	d001      	beq.n	8006352 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800634e:	2301      	movs	r3, #1
 8006350:	e01a      	b.n	8006388 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	2220      	movs	r2, #32
 8006358:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	6859      	ldr	r1, [r3, #4]
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681a      	ldr	r2, [r3, #0]
 8006364:	4b0a      	ldr	r3, [pc, #40]	@ (8006390 <HAL_I2C_Mem_Write+0x224>)
 8006366:	400b      	ands	r3, r1
 8006368:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2220      	movs	r2, #32
 800636e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2200      	movs	r2, #0
 8006376:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2200      	movs	r2, #0
 800637e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006382:	2300      	movs	r3, #0
 8006384:	e000      	b.n	8006388 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006386:	2302      	movs	r3, #2
  }
}
 8006388:	4618      	mov	r0, r3
 800638a:	3718      	adds	r7, #24
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}
 8006390:	fe00e800 	.word	0xfe00e800

08006394 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b088      	sub	sp, #32
 8006398:	af02      	add	r7, sp, #8
 800639a:	60f8      	str	r0, [r7, #12]
 800639c:	4608      	mov	r0, r1
 800639e:	4611      	mov	r1, r2
 80063a0:	461a      	mov	r2, r3
 80063a2:	4603      	mov	r3, r0
 80063a4:	817b      	strh	r3, [r7, #10]
 80063a6:	460b      	mov	r3, r1
 80063a8:	813b      	strh	r3, [r7, #8]
 80063aa:	4613      	mov	r3, r2
 80063ac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	2b20      	cmp	r3, #32
 80063b8:	f040 80fd 	bne.w	80065b6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80063bc:	6a3b      	ldr	r3, [r7, #32]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d002      	beq.n	80063c8 <HAL_I2C_Mem_Read+0x34>
 80063c2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d105      	bne.n	80063d4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80063ce:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80063d0:	2301      	movs	r3, #1
 80063d2:	e0f1      	b.n	80065b8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80063da:	2b01      	cmp	r3, #1
 80063dc:	d101      	bne.n	80063e2 <HAL_I2C_Mem_Read+0x4e>
 80063de:	2302      	movs	r3, #2
 80063e0:	e0ea      	b.n	80065b8 <HAL_I2C_Mem_Read+0x224>
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2201      	movs	r2, #1
 80063e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80063ea:	f7fe fc1b 	bl	8004c24 <HAL_GetTick>
 80063ee:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	9300      	str	r3, [sp, #0]
 80063f4:	2319      	movs	r3, #25
 80063f6:	2201      	movs	r2, #1
 80063f8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80063fc:	68f8      	ldr	r0, [r7, #12]
 80063fe:	f000 f9bd 	bl	800677c <I2C_WaitOnFlagUntilTimeout>
 8006402:	4603      	mov	r3, r0
 8006404:	2b00      	cmp	r3, #0
 8006406:	d001      	beq.n	800640c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006408:	2301      	movs	r3, #1
 800640a:	e0d5      	b.n	80065b8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2222      	movs	r2, #34	@ 0x22
 8006410:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2240      	movs	r2, #64	@ 0x40
 8006418:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	2200      	movs	r2, #0
 8006420:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	6a3a      	ldr	r2, [r7, #32]
 8006426:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800642c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2200      	movs	r2, #0
 8006432:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006434:	88f8      	ldrh	r0, [r7, #6]
 8006436:	893a      	ldrh	r2, [r7, #8]
 8006438:	8979      	ldrh	r1, [r7, #10]
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	9301      	str	r3, [sp, #4]
 800643e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006440:	9300      	str	r3, [sp, #0]
 8006442:	4603      	mov	r3, r0
 8006444:	68f8      	ldr	r0, [r7, #12]
 8006446:	f000 f921 	bl	800668c <I2C_RequestMemoryRead>
 800644a:	4603      	mov	r3, r0
 800644c:	2b00      	cmp	r3, #0
 800644e:	d005      	beq.n	800645c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2200      	movs	r2, #0
 8006454:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8006458:	2301      	movs	r3, #1
 800645a:	e0ad      	b.n	80065b8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006460:	b29b      	uxth	r3, r3
 8006462:	2bff      	cmp	r3, #255	@ 0xff
 8006464:	d90e      	bls.n	8006484 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2201      	movs	r2, #1
 800646a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006470:	b2da      	uxtb	r2, r3
 8006472:	8979      	ldrh	r1, [r7, #10]
 8006474:	4b52      	ldr	r3, [pc, #328]	@ (80065c0 <HAL_I2C_Mem_Read+0x22c>)
 8006476:	9300      	str	r3, [sp, #0]
 8006478:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800647c:	68f8      	ldr	r0, [r7, #12]
 800647e:	f000 fb41 	bl	8006b04 <I2C_TransferConfig>
 8006482:	e00f      	b.n	80064a4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006488:	b29a      	uxth	r2, r3
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006492:	b2da      	uxtb	r2, r3
 8006494:	8979      	ldrh	r1, [r7, #10]
 8006496:	4b4a      	ldr	r3, [pc, #296]	@ (80065c0 <HAL_I2C_Mem_Read+0x22c>)
 8006498:	9300      	str	r3, [sp, #0]
 800649a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800649e:	68f8      	ldr	r0, [r7, #12]
 80064a0:	f000 fb30 	bl	8006b04 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	9300      	str	r3, [sp, #0]
 80064a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064aa:	2200      	movs	r2, #0
 80064ac:	2104      	movs	r1, #4
 80064ae:	68f8      	ldr	r0, [r7, #12]
 80064b0:	f000 f964 	bl	800677c <I2C_WaitOnFlagUntilTimeout>
 80064b4:	4603      	mov	r3, r0
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d001      	beq.n	80064be <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	e07c      	b.n	80065b8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064c8:	b2d2      	uxtb	r2, r2
 80064ca:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064d0:	1c5a      	adds	r2, r3, #1
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064da:	3b01      	subs	r3, #1
 80064dc:	b29a      	uxth	r2, r3
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064e6:	b29b      	uxth	r3, r3
 80064e8:	3b01      	subs	r3, #1
 80064ea:	b29a      	uxth	r2, r3
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064f4:	b29b      	uxth	r3, r3
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d034      	beq.n	8006564 <HAL_I2C_Mem_Read+0x1d0>
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d130      	bne.n	8006564 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	9300      	str	r3, [sp, #0]
 8006506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006508:	2200      	movs	r2, #0
 800650a:	2180      	movs	r1, #128	@ 0x80
 800650c:	68f8      	ldr	r0, [r7, #12]
 800650e:	f000 f935 	bl	800677c <I2C_WaitOnFlagUntilTimeout>
 8006512:	4603      	mov	r3, r0
 8006514:	2b00      	cmp	r3, #0
 8006516:	d001      	beq.n	800651c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006518:	2301      	movs	r3, #1
 800651a:	e04d      	b.n	80065b8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006520:	b29b      	uxth	r3, r3
 8006522:	2bff      	cmp	r3, #255	@ 0xff
 8006524:	d90e      	bls.n	8006544 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2201      	movs	r2, #1
 800652a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006530:	b2da      	uxtb	r2, r3
 8006532:	8979      	ldrh	r1, [r7, #10]
 8006534:	2300      	movs	r3, #0
 8006536:	9300      	str	r3, [sp, #0]
 8006538:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800653c:	68f8      	ldr	r0, [r7, #12]
 800653e:	f000 fae1 	bl	8006b04 <I2C_TransferConfig>
 8006542:	e00f      	b.n	8006564 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006548:	b29a      	uxth	r2, r3
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006552:	b2da      	uxtb	r2, r3
 8006554:	8979      	ldrh	r1, [r7, #10]
 8006556:	2300      	movs	r3, #0
 8006558:	9300      	str	r3, [sp, #0]
 800655a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800655e:	68f8      	ldr	r0, [r7, #12]
 8006560:	f000 fad0 	bl	8006b04 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006568:	b29b      	uxth	r3, r3
 800656a:	2b00      	cmp	r3, #0
 800656c:	d19a      	bne.n	80064a4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800656e:	697a      	ldr	r2, [r7, #20]
 8006570:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006572:	68f8      	ldr	r0, [r7, #12]
 8006574:	f000 f9a2 	bl	80068bc <I2C_WaitOnSTOPFlagUntilTimeout>
 8006578:	4603      	mov	r3, r0
 800657a:	2b00      	cmp	r3, #0
 800657c:	d001      	beq.n	8006582 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800657e:	2301      	movs	r3, #1
 8006580:	e01a      	b.n	80065b8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	2220      	movs	r2, #32
 8006588:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	6859      	ldr	r1, [r3, #4]
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	4b0b      	ldr	r3, [pc, #44]	@ (80065c4 <HAL_I2C_Mem_Read+0x230>)
 8006596:	400b      	ands	r3, r1
 8006598:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2220      	movs	r2, #32
 800659e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2200      	movs	r2, #0
 80065a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2200      	movs	r2, #0
 80065ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80065b2:	2300      	movs	r3, #0
 80065b4:	e000      	b.n	80065b8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80065b6:	2302      	movs	r3, #2
  }
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3718      	adds	r7, #24
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}
 80065c0:	80002400 	.word	0x80002400
 80065c4:	fe00e800 	.word	0xfe00e800

080065c8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b083      	sub	sp, #12
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065d6:	b2db      	uxtb	r3, r3
}
 80065d8:	4618      	mov	r0, r3
 80065da:	370c      	adds	r7, #12
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr

080065e4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b086      	sub	sp, #24
 80065e8:	af02      	add	r7, sp, #8
 80065ea:	60f8      	str	r0, [r7, #12]
 80065ec:	4608      	mov	r0, r1
 80065ee:	4611      	mov	r1, r2
 80065f0:	461a      	mov	r2, r3
 80065f2:	4603      	mov	r3, r0
 80065f4:	817b      	strh	r3, [r7, #10]
 80065f6:	460b      	mov	r3, r1
 80065f8:	813b      	strh	r3, [r7, #8]
 80065fa:	4613      	mov	r3, r2
 80065fc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80065fe:	88fb      	ldrh	r3, [r7, #6]
 8006600:	b2da      	uxtb	r2, r3
 8006602:	8979      	ldrh	r1, [r7, #10]
 8006604:	4b20      	ldr	r3, [pc, #128]	@ (8006688 <I2C_RequestMemoryWrite+0xa4>)
 8006606:	9300      	str	r3, [sp, #0]
 8006608:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800660c:	68f8      	ldr	r0, [r7, #12]
 800660e:	f000 fa79 	bl	8006b04 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006612:	69fa      	ldr	r2, [r7, #28]
 8006614:	69b9      	ldr	r1, [r7, #24]
 8006616:	68f8      	ldr	r0, [r7, #12]
 8006618:	f000 f909 	bl	800682e <I2C_WaitOnTXISFlagUntilTimeout>
 800661c:	4603      	mov	r3, r0
 800661e:	2b00      	cmp	r3, #0
 8006620:	d001      	beq.n	8006626 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	e02c      	b.n	8006680 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006626:	88fb      	ldrh	r3, [r7, #6]
 8006628:	2b01      	cmp	r3, #1
 800662a:	d105      	bne.n	8006638 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800662c:	893b      	ldrh	r3, [r7, #8]
 800662e:	b2da      	uxtb	r2, r3
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	629a      	str	r2, [r3, #40]	@ 0x28
 8006636:	e015      	b.n	8006664 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006638:	893b      	ldrh	r3, [r7, #8]
 800663a:	0a1b      	lsrs	r3, r3, #8
 800663c:	b29b      	uxth	r3, r3
 800663e:	b2da      	uxtb	r2, r3
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006646:	69fa      	ldr	r2, [r7, #28]
 8006648:	69b9      	ldr	r1, [r7, #24]
 800664a:	68f8      	ldr	r0, [r7, #12]
 800664c:	f000 f8ef 	bl	800682e <I2C_WaitOnTXISFlagUntilTimeout>
 8006650:	4603      	mov	r3, r0
 8006652:	2b00      	cmp	r3, #0
 8006654:	d001      	beq.n	800665a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006656:	2301      	movs	r3, #1
 8006658:	e012      	b.n	8006680 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800665a:	893b      	ldrh	r3, [r7, #8]
 800665c:	b2da      	uxtb	r2, r3
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006664:	69fb      	ldr	r3, [r7, #28]
 8006666:	9300      	str	r3, [sp, #0]
 8006668:	69bb      	ldr	r3, [r7, #24]
 800666a:	2200      	movs	r2, #0
 800666c:	2180      	movs	r1, #128	@ 0x80
 800666e:	68f8      	ldr	r0, [r7, #12]
 8006670:	f000 f884 	bl	800677c <I2C_WaitOnFlagUntilTimeout>
 8006674:	4603      	mov	r3, r0
 8006676:	2b00      	cmp	r3, #0
 8006678:	d001      	beq.n	800667e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800667a:	2301      	movs	r3, #1
 800667c:	e000      	b.n	8006680 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800667e:	2300      	movs	r3, #0
}
 8006680:	4618      	mov	r0, r3
 8006682:	3710      	adds	r7, #16
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}
 8006688:	80002000 	.word	0x80002000

0800668c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b086      	sub	sp, #24
 8006690:	af02      	add	r7, sp, #8
 8006692:	60f8      	str	r0, [r7, #12]
 8006694:	4608      	mov	r0, r1
 8006696:	4611      	mov	r1, r2
 8006698:	461a      	mov	r2, r3
 800669a:	4603      	mov	r3, r0
 800669c:	817b      	strh	r3, [r7, #10]
 800669e:	460b      	mov	r3, r1
 80066a0:	813b      	strh	r3, [r7, #8]
 80066a2:	4613      	mov	r3, r2
 80066a4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80066a6:	88fb      	ldrh	r3, [r7, #6]
 80066a8:	b2da      	uxtb	r2, r3
 80066aa:	8979      	ldrh	r1, [r7, #10]
 80066ac:	4b20      	ldr	r3, [pc, #128]	@ (8006730 <I2C_RequestMemoryRead+0xa4>)
 80066ae:	9300      	str	r3, [sp, #0]
 80066b0:	2300      	movs	r3, #0
 80066b2:	68f8      	ldr	r0, [r7, #12]
 80066b4:	f000 fa26 	bl	8006b04 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80066b8:	69fa      	ldr	r2, [r7, #28]
 80066ba:	69b9      	ldr	r1, [r7, #24]
 80066bc:	68f8      	ldr	r0, [r7, #12]
 80066be:	f000 f8b6 	bl	800682e <I2C_WaitOnTXISFlagUntilTimeout>
 80066c2:	4603      	mov	r3, r0
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d001      	beq.n	80066cc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80066c8:	2301      	movs	r3, #1
 80066ca:	e02c      	b.n	8006726 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80066cc:	88fb      	ldrh	r3, [r7, #6]
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d105      	bne.n	80066de <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80066d2:	893b      	ldrh	r3, [r7, #8]
 80066d4:	b2da      	uxtb	r2, r3
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	629a      	str	r2, [r3, #40]	@ 0x28
 80066dc:	e015      	b.n	800670a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80066de:	893b      	ldrh	r3, [r7, #8]
 80066e0:	0a1b      	lsrs	r3, r3, #8
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	b2da      	uxtb	r2, r3
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80066ec:	69fa      	ldr	r2, [r7, #28]
 80066ee:	69b9      	ldr	r1, [r7, #24]
 80066f0:	68f8      	ldr	r0, [r7, #12]
 80066f2:	f000 f89c 	bl	800682e <I2C_WaitOnTXISFlagUntilTimeout>
 80066f6:	4603      	mov	r3, r0
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d001      	beq.n	8006700 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80066fc:	2301      	movs	r3, #1
 80066fe:	e012      	b.n	8006726 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006700:	893b      	ldrh	r3, [r7, #8]
 8006702:	b2da      	uxtb	r2, r3
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800670a:	69fb      	ldr	r3, [r7, #28]
 800670c:	9300      	str	r3, [sp, #0]
 800670e:	69bb      	ldr	r3, [r7, #24]
 8006710:	2200      	movs	r2, #0
 8006712:	2140      	movs	r1, #64	@ 0x40
 8006714:	68f8      	ldr	r0, [r7, #12]
 8006716:	f000 f831 	bl	800677c <I2C_WaitOnFlagUntilTimeout>
 800671a:	4603      	mov	r3, r0
 800671c:	2b00      	cmp	r3, #0
 800671e:	d001      	beq.n	8006724 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006720:	2301      	movs	r3, #1
 8006722:	e000      	b.n	8006726 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006724:	2300      	movs	r3, #0
}
 8006726:	4618      	mov	r0, r3
 8006728:	3710      	adds	r7, #16
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}
 800672e:	bf00      	nop
 8006730:	80002000 	.word	0x80002000

08006734 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006734:	b480      	push	{r7}
 8006736:	b083      	sub	sp, #12
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	699b      	ldr	r3, [r3, #24]
 8006742:	f003 0302 	and.w	r3, r3, #2
 8006746:	2b02      	cmp	r3, #2
 8006748:	d103      	bne.n	8006752 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	2200      	movs	r2, #0
 8006750:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	699b      	ldr	r3, [r3, #24]
 8006758:	f003 0301 	and.w	r3, r3, #1
 800675c:	2b01      	cmp	r3, #1
 800675e:	d007      	beq.n	8006770 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	699a      	ldr	r2, [r3, #24]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f042 0201 	orr.w	r2, r2, #1
 800676e:	619a      	str	r2, [r3, #24]
  }
}
 8006770:	bf00      	nop
 8006772:	370c      	adds	r7, #12
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr

0800677c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b084      	sub	sp, #16
 8006780:	af00      	add	r7, sp, #0
 8006782:	60f8      	str	r0, [r7, #12]
 8006784:	60b9      	str	r1, [r7, #8]
 8006786:	603b      	str	r3, [r7, #0]
 8006788:	4613      	mov	r3, r2
 800678a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800678c:	e03b      	b.n	8006806 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800678e:	69ba      	ldr	r2, [r7, #24]
 8006790:	6839      	ldr	r1, [r7, #0]
 8006792:	68f8      	ldr	r0, [r7, #12]
 8006794:	f000 f8d6 	bl	8006944 <I2C_IsErrorOccurred>
 8006798:	4603      	mov	r3, r0
 800679a:	2b00      	cmp	r3, #0
 800679c:	d001      	beq.n	80067a2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800679e:	2301      	movs	r3, #1
 80067a0:	e041      	b.n	8006826 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067a8:	d02d      	beq.n	8006806 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067aa:	f7fe fa3b 	bl	8004c24 <HAL_GetTick>
 80067ae:	4602      	mov	r2, r0
 80067b0:	69bb      	ldr	r3, [r7, #24]
 80067b2:	1ad3      	subs	r3, r2, r3
 80067b4:	683a      	ldr	r2, [r7, #0]
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d302      	bcc.n	80067c0 <I2C_WaitOnFlagUntilTimeout+0x44>
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d122      	bne.n	8006806 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	699a      	ldr	r2, [r3, #24]
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	4013      	ands	r3, r2
 80067ca:	68ba      	ldr	r2, [r7, #8]
 80067cc:	429a      	cmp	r2, r3
 80067ce:	bf0c      	ite	eq
 80067d0:	2301      	moveq	r3, #1
 80067d2:	2300      	movne	r3, #0
 80067d4:	b2db      	uxtb	r3, r3
 80067d6:	461a      	mov	r2, r3
 80067d8:	79fb      	ldrb	r3, [r7, #7]
 80067da:	429a      	cmp	r2, r3
 80067dc:	d113      	bne.n	8006806 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067e2:	f043 0220 	orr.w	r2, r3, #32
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2220      	movs	r2, #32
 80067ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2200      	movs	r2, #0
 80067f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2200      	movs	r2, #0
 80067fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8006802:	2301      	movs	r3, #1
 8006804:	e00f      	b.n	8006826 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	699a      	ldr	r2, [r3, #24]
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	4013      	ands	r3, r2
 8006810:	68ba      	ldr	r2, [r7, #8]
 8006812:	429a      	cmp	r2, r3
 8006814:	bf0c      	ite	eq
 8006816:	2301      	moveq	r3, #1
 8006818:	2300      	movne	r3, #0
 800681a:	b2db      	uxtb	r3, r3
 800681c:	461a      	mov	r2, r3
 800681e:	79fb      	ldrb	r3, [r7, #7]
 8006820:	429a      	cmp	r2, r3
 8006822:	d0b4      	beq.n	800678e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006824:	2300      	movs	r3, #0
}
 8006826:	4618      	mov	r0, r3
 8006828:	3710      	adds	r7, #16
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}

0800682e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800682e:	b580      	push	{r7, lr}
 8006830:	b084      	sub	sp, #16
 8006832:	af00      	add	r7, sp, #0
 8006834:	60f8      	str	r0, [r7, #12]
 8006836:	60b9      	str	r1, [r7, #8]
 8006838:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800683a:	e033      	b.n	80068a4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800683c:	687a      	ldr	r2, [r7, #4]
 800683e:	68b9      	ldr	r1, [r7, #8]
 8006840:	68f8      	ldr	r0, [r7, #12]
 8006842:	f000 f87f 	bl	8006944 <I2C_IsErrorOccurred>
 8006846:	4603      	mov	r3, r0
 8006848:	2b00      	cmp	r3, #0
 800684a:	d001      	beq.n	8006850 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800684c:	2301      	movs	r3, #1
 800684e:	e031      	b.n	80068b4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006856:	d025      	beq.n	80068a4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006858:	f7fe f9e4 	bl	8004c24 <HAL_GetTick>
 800685c:	4602      	mov	r2, r0
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	1ad3      	subs	r3, r2, r3
 8006862:	68ba      	ldr	r2, [r7, #8]
 8006864:	429a      	cmp	r2, r3
 8006866:	d302      	bcc.n	800686e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d11a      	bne.n	80068a4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	699b      	ldr	r3, [r3, #24]
 8006874:	f003 0302 	and.w	r3, r3, #2
 8006878:	2b02      	cmp	r3, #2
 800687a:	d013      	beq.n	80068a4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006880:	f043 0220 	orr.w	r2, r3, #32
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2220      	movs	r2, #32
 800688c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2200      	movs	r2, #0
 8006894:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2200      	movs	r2, #0
 800689c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	e007      	b.n	80068b4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	699b      	ldr	r3, [r3, #24]
 80068aa:	f003 0302 	and.w	r3, r3, #2
 80068ae:	2b02      	cmp	r3, #2
 80068b0:	d1c4      	bne.n	800683c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80068b2:	2300      	movs	r3, #0
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3710      	adds	r7, #16
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}

080068bc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b084      	sub	sp, #16
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	60f8      	str	r0, [r7, #12]
 80068c4:	60b9      	str	r1, [r7, #8]
 80068c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80068c8:	e02f      	b.n	800692a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80068ca:	687a      	ldr	r2, [r7, #4]
 80068cc:	68b9      	ldr	r1, [r7, #8]
 80068ce:	68f8      	ldr	r0, [r7, #12]
 80068d0:	f000 f838 	bl	8006944 <I2C_IsErrorOccurred>
 80068d4:	4603      	mov	r3, r0
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d001      	beq.n	80068de <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80068da:	2301      	movs	r3, #1
 80068dc:	e02d      	b.n	800693a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068de:	f7fe f9a1 	bl	8004c24 <HAL_GetTick>
 80068e2:	4602      	mov	r2, r0
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	1ad3      	subs	r3, r2, r3
 80068e8:	68ba      	ldr	r2, [r7, #8]
 80068ea:	429a      	cmp	r2, r3
 80068ec:	d302      	bcc.n	80068f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d11a      	bne.n	800692a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	699b      	ldr	r3, [r3, #24]
 80068fa:	f003 0320 	and.w	r3, r3, #32
 80068fe:	2b20      	cmp	r3, #32
 8006900:	d013      	beq.n	800692a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006906:	f043 0220 	orr.w	r2, r3, #32
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2220      	movs	r2, #32
 8006912:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	2200      	movs	r2, #0
 800691a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2200      	movs	r2, #0
 8006922:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8006926:	2301      	movs	r3, #1
 8006928:	e007      	b.n	800693a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	699b      	ldr	r3, [r3, #24]
 8006930:	f003 0320 	and.w	r3, r3, #32
 8006934:	2b20      	cmp	r3, #32
 8006936:	d1c8      	bne.n	80068ca <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006938:	2300      	movs	r3, #0
}
 800693a:	4618      	mov	r0, r3
 800693c:	3710      	adds	r7, #16
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}
	...

08006944 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b08a      	sub	sp, #40	@ 0x28
 8006948:	af00      	add	r7, sp, #0
 800694a:	60f8      	str	r0, [r7, #12]
 800694c:	60b9      	str	r1, [r7, #8]
 800694e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006950:	2300      	movs	r3, #0
 8006952:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	699b      	ldr	r3, [r3, #24]
 800695c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800695e:	2300      	movs	r3, #0
 8006960:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006966:	69bb      	ldr	r3, [r7, #24]
 8006968:	f003 0310 	and.w	r3, r3, #16
 800696c:	2b00      	cmp	r3, #0
 800696e:	d068      	beq.n	8006a42 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	2210      	movs	r2, #16
 8006976:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006978:	e049      	b.n	8006a0e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006980:	d045      	beq.n	8006a0e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006982:	f7fe f94f 	bl	8004c24 <HAL_GetTick>
 8006986:	4602      	mov	r2, r0
 8006988:	69fb      	ldr	r3, [r7, #28]
 800698a:	1ad3      	subs	r3, r2, r3
 800698c:	68ba      	ldr	r2, [r7, #8]
 800698e:	429a      	cmp	r2, r3
 8006990:	d302      	bcc.n	8006998 <I2C_IsErrorOccurred+0x54>
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d13a      	bne.n	8006a0e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80069a2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80069aa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	699b      	ldr	r3, [r3, #24]
 80069b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80069b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80069ba:	d121      	bne.n	8006a00 <I2C_IsErrorOccurred+0xbc>
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80069c2:	d01d      	beq.n	8006a00 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80069c4:	7cfb      	ldrb	r3, [r7, #19]
 80069c6:	2b20      	cmp	r3, #32
 80069c8:	d01a      	beq.n	8006a00 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	685a      	ldr	r2, [r3, #4]
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80069d8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80069da:	f7fe f923 	bl	8004c24 <HAL_GetTick>
 80069de:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80069e0:	e00e      	b.n	8006a00 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80069e2:	f7fe f91f 	bl	8004c24 <HAL_GetTick>
 80069e6:	4602      	mov	r2, r0
 80069e8:	69fb      	ldr	r3, [r7, #28]
 80069ea:	1ad3      	subs	r3, r2, r3
 80069ec:	2b19      	cmp	r3, #25
 80069ee:	d907      	bls.n	8006a00 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80069f0:	6a3b      	ldr	r3, [r7, #32]
 80069f2:	f043 0320 	orr.w	r3, r3, #32
 80069f6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80069f8:	2301      	movs	r3, #1
 80069fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80069fe:	e006      	b.n	8006a0e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	699b      	ldr	r3, [r3, #24]
 8006a06:	f003 0320 	and.w	r3, r3, #32
 8006a0a:	2b20      	cmp	r3, #32
 8006a0c:	d1e9      	bne.n	80069e2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	699b      	ldr	r3, [r3, #24]
 8006a14:	f003 0320 	and.w	r3, r3, #32
 8006a18:	2b20      	cmp	r3, #32
 8006a1a:	d003      	beq.n	8006a24 <I2C_IsErrorOccurred+0xe0>
 8006a1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d0aa      	beq.n	800697a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006a24:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d103      	bne.n	8006a34 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	2220      	movs	r2, #32
 8006a32:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006a34:	6a3b      	ldr	r3, [r7, #32]
 8006a36:	f043 0304 	orr.w	r3, r3, #4
 8006a3a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	699b      	ldr	r3, [r3, #24]
 8006a48:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006a4a:	69bb      	ldr	r3, [r7, #24]
 8006a4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d00b      	beq.n	8006a6c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006a54:	6a3b      	ldr	r3, [r7, #32]
 8006a56:	f043 0301 	orr.w	r3, r3, #1
 8006a5a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006a64:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006a66:	2301      	movs	r3, #1
 8006a68:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006a6c:	69bb      	ldr	r3, [r7, #24]
 8006a6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d00b      	beq.n	8006a8e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006a76:	6a3b      	ldr	r3, [r7, #32]
 8006a78:	f043 0308 	orr.w	r3, r3, #8
 8006a7c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006a86:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006a8e:	69bb      	ldr	r3, [r7, #24]
 8006a90:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d00b      	beq.n	8006ab0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006a98:	6a3b      	ldr	r3, [r7, #32]
 8006a9a:	f043 0302 	orr.w	r3, r3, #2
 8006a9e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006aa8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006aaa:	2301      	movs	r3, #1
 8006aac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8006ab0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d01c      	beq.n	8006af2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006ab8:	68f8      	ldr	r0, [r7, #12]
 8006aba:	f7ff fe3b 	bl	8006734 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	6859      	ldr	r1, [r3, #4]
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681a      	ldr	r2, [r3, #0]
 8006ac8:	4b0d      	ldr	r3, [pc, #52]	@ (8006b00 <I2C_IsErrorOccurred+0x1bc>)
 8006aca:	400b      	ands	r3, r1
 8006acc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006ad2:	6a3b      	ldr	r3, [r7, #32]
 8006ad4:	431a      	orrs	r2, r3
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2220      	movs	r2, #32
 8006ade:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2200      	movs	r2, #0
 8006aee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8006af2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3728      	adds	r7, #40	@ 0x28
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}
 8006afe:	bf00      	nop
 8006b00:	fe00e800 	.word	0xfe00e800

08006b04 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b087      	sub	sp, #28
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	60f8      	str	r0, [r7, #12]
 8006b0c:	607b      	str	r3, [r7, #4]
 8006b0e:	460b      	mov	r3, r1
 8006b10:	817b      	strh	r3, [r7, #10]
 8006b12:	4613      	mov	r3, r2
 8006b14:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006b16:	897b      	ldrh	r3, [r7, #10]
 8006b18:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006b1c:	7a7b      	ldrb	r3, [r7, #9]
 8006b1e:	041b      	lsls	r3, r3, #16
 8006b20:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006b24:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006b2a:	6a3b      	ldr	r3, [r7, #32]
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006b32:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	685a      	ldr	r2, [r3, #4]
 8006b3a:	6a3b      	ldr	r3, [r7, #32]
 8006b3c:	0d5b      	lsrs	r3, r3, #21
 8006b3e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8006b42:	4b08      	ldr	r3, [pc, #32]	@ (8006b64 <I2C_TransferConfig+0x60>)
 8006b44:	430b      	orrs	r3, r1
 8006b46:	43db      	mvns	r3, r3
 8006b48:	ea02 0103 	and.w	r1, r2, r3
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	697a      	ldr	r2, [r7, #20]
 8006b52:	430a      	orrs	r2, r1
 8006b54:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006b56:	bf00      	nop
 8006b58:	371c      	adds	r7, #28
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b60:	4770      	bx	lr
 8006b62:	bf00      	nop
 8006b64:	03ff63ff 	.word	0x03ff63ff

08006b68 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b082      	sub	sp, #8
 8006b6c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006b72:	4b23      	ldr	r3, [pc, #140]	@ (8006c00 <HAL_PWREx_EnableOverDrive+0x98>)
 8006b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b76:	4a22      	ldr	r2, [pc, #136]	@ (8006c00 <HAL_PWREx_EnableOverDrive+0x98>)
 8006b78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8006b7e:	4b20      	ldr	r3, [pc, #128]	@ (8006c00 <HAL_PWREx_EnableOverDrive+0x98>)
 8006b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b86:	603b      	str	r3, [r7, #0]
 8006b88:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006b8a:	4b1e      	ldr	r3, [pc, #120]	@ (8006c04 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a1d      	ldr	r2, [pc, #116]	@ (8006c04 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006b90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b94:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006b96:	f7fe f845 	bl	8004c24 <HAL_GetTick>
 8006b9a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006b9c:	e009      	b.n	8006bb2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006b9e:	f7fe f841 	bl	8004c24 <HAL_GetTick>
 8006ba2:	4602      	mov	r2, r0
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	1ad3      	subs	r3, r2, r3
 8006ba8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006bac:	d901      	bls.n	8006bb2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006bae:	2303      	movs	r3, #3
 8006bb0:	e022      	b.n	8006bf8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006bb2:	4b14      	ldr	r3, [pc, #80]	@ (8006c04 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006bba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006bbe:	d1ee      	bne.n	8006b9e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006bc0:	4b10      	ldr	r3, [pc, #64]	@ (8006c04 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a0f      	ldr	r2, [pc, #60]	@ (8006c04 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006bc6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006bca:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006bcc:	f7fe f82a 	bl	8004c24 <HAL_GetTick>
 8006bd0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006bd2:	e009      	b.n	8006be8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006bd4:	f7fe f826 	bl	8004c24 <HAL_GetTick>
 8006bd8:	4602      	mov	r2, r0
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	1ad3      	subs	r3, r2, r3
 8006bde:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006be2:	d901      	bls.n	8006be8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006be4:	2303      	movs	r3, #3
 8006be6:	e007      	b.n	8006bf8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006be8:	4b06      	ldr	r3, [pc, #24]	@ (8006c04 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bf0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006bf4:	d1ee      	bne.n	8006bd4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006bf6:	2300      	movs	r3, #0
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3708      	adds	r7, #8
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}
 8006c00:	40023800 	.word	0x40023800
 8006c04:	40007000 	.word	0x40007000

08006c08 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b086      	sub	sp, #24
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006c10:	2300      	movs	r3, #0
 8006c12:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d101      	bne.n	8006c1e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	e291      	b.n	8007142 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f003 0301 	and.w	r3, r3, #1
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	f000 8087 	beq.w	8006d3a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006c2c:	4b96      	ldr	r3, [pc, #600]	@ (8006e88 <HAL_RCC_OscConfig+0x280>)
 8006c2e:	689b      	ldr	r3, [r3, #8]
 8006c30:	f003 030c 	and.w	r3, r3, #12
 8006c34:	2b04      	cmp	r3, #4
 8006c36:	d00c      	beq.n	8006c52 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006c38:	4b93      	ldr	r3, [pc, #588]	@ (8006e88 <HAL_RCC_OscConfig+0x280>)
 8006c3a:	689b      	ldr	r3, [r3, #8]
 8006c3c:	f003 030c 	and.w	r3, r3, #12
 8006c40:	2b08      	cmp	r3, #8
 8006c42:	d112      	bne.n	8006c6a <HAL_RCC_OscConfig+0x62>
 8006c44:	4b90      	ldr	r3, [pc, #576]	@ (8006e88 <HAL_RCC_OscConfig+0x280>)
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006c4c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006c50:	d10b      	bne.n	8006c6a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c52:	4b8d      	ldr	r3, [pc, #564]	@ (8006e88 <HAL_RCC_OscConfig+0x280>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d06c      	beq.n	8006d38 <HAL_RCC_OscConfig+0x130>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d168      	bne.n	8006d38 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006c66:	2301      	movs	r3, #1
 8006c68:	e26b      	b.n	8007142 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c72:	d106      	bne.n	8006c82 <HAL_RCC_OscConfig+0x7a>
 8006c74:	4b84      	ldr	r3, [pc, #528]	@ (8006e88 <HAL_RCC_OscConfig+0x280>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a83      	ldr	r2, [pc, #524]	@ (8006e88 <HAL_RCC_OscConfig+0x280>)
 8006c7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c7e:	6013      	str	r3, [r2, #0]
 8006c80:	e02e      	b.n	8006ce0 <HAL_RCC_OscConfig+0xd8>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d10c      	bne.n	8006ca4 <HAL_RCC_OscConfig+0x9c>
 8006c8a:	4b7f      	ldr	r3, [pc, #508]	@ (8006e88 <HAL_RCC_OscConfig+0x280>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a7e      	ldr	r2, [pc, #504]	@ (8006e88 <HAL_RCC_OscConfig+0x280>)
 8006c90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006c94:	6013      	str	r3, [r2, #0]
 8006c96:	4b7c      	ldr	r3, [pc, #496]	@ (8006e88 <HAL_RCC_OscConfig+0x280>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a7b      	ldr	r2, [pc, #492]	@ (8006e88 <HAL_RCC_OscConfig+0x280>)
 8006c9c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006ca0:	6013      	str	r3, [r2, #0]
 8006ca2:	e01d      	b.n	8006ce0 <HAL_RCC_OscConfig+0xd8>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006cac:	d10c      	bne.n	8006cc8 <HAL_RCC_OscConfig+0xc0>
 8006cae:	4b76      	ldr	r3, [pc, #472]	@ (8006e88 <HAL_RCC_OscConfig+0x280>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a75      	ldr	r2, [pc, #468]	@ (8006e88 <HAL_RCC_OscConfig+0x280>)
 8006cb4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006cb8:	6013      	str	r3, [r2, #0]
 8006cba:	4b73      	ldr	r3, [pc, #460]	@ (8006e88 <HAL_RCC_OscConfig+0x280>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a72      	ldr	r2, [pc, #456]	@ (8006e88 <HAL_RCC_OscConfig+0x280>)
 8006cc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006cc4:	6013      	str	r3, [r2, #0]
 8006cc6:	e00b      	b.n	8006ce0 <HAL_RCC_OscConfig+0xd8>
 8006cc8:	4b6f      	ldr	r3, [pc, #444]	@ (8006e88 <HAL_RCC_OscConfig+0x280>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a6e      	ldr	r2, [pc, #440]	@ (8006e88 <HAL_RCC_OscConfig+0x280>)
 8006cce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006cd2:	6013      	str	r3, [r2, #0]
 8006cd4:	4b6c      	ldr	r3, [pc, #432]	@ (8006e88 <HAL_RCC_OscConfig+0x280>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a6b      	ldr	r2, [pc, #428]	@ (8006e88 <HAL_RCC_OscConfig+0x280>)
 8006cda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006cde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d013      	beq.n	8006d10 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ce8:	f7fd ff9c 	bl	8004c24 <HAL_GetTick>
 8006cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006cee:	e008      	b.n	8006d02 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006cf0:	f7fd ff98 	bl	8004c24 <HAL_GetTick>
 8006cf4:	4602      	mov	r2, r0
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	1ad3      	subs	r3, r2, r3
 8006cfa:	2b64      	cmp	r3, #100	@ 0x64
 8006cfc:	d901      	bls.n	8006d02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006cfe:	2303      	movs	r3, #3
 8006d00:	e21f      	b.n	8007142 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d02:	4b61      	ldr	r3, [pc, #388]	@ (8006e88 <HAL_RCC_OscConfig+0x280>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d0f0      	beq.n	8006cf0 <HAL_RCC_OscConfig+0xe8>
 8006d0e:	e014      	b.n	8006d3a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d10:	f7fd ff88 	bl	8004c24 <HAL_GetTick>
 8006d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d16:	e008      	b.n	8006d2a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006d18:	f7fd ff84 	bl	8004c24 <HAL_GetTick>
 8006d1c:	4602      	mov	r2, r0
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	1ad3      	subs	r3, r2, r3
 8006d22:	2b64      	cmp	r3, #100	@ 0x64
 8006d24:	d901      	bls.n	8006d2a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006d26:	2303      	movs	r3, #3
 8006d28:	e20b      	b.n	8007142 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d2a:	4b57      	ldr	r3, [pc, #348]	@ (8006e88 <HAL_RCC_OscConfig+0x280>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d1f0      	bne.n	8006d18 <HAL_RCC_OscConfig+0x110>
 8006d36:	e000      	b.n	8006d3a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f003 0302 	and.w	r3, r3, #2
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d069      	beq.n	8006e1a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006d46:	4b50      	ldr	r3, [pc, #320]	@ (8006e88 <HAL_RCC_OscConfig+0x280>)
 8006d48:	689b      	ldr	r3, [r3, #8]
 8006d4a:	f003 030c 	and.w	r3, r3, #12
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d00b      	beq.n	8006d6a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006d52:	4b4d      	ldr	r3, [pc, #308]	@ (8006e88 <HAL_RCC_OscConfig+0x280>)
 8006d54:	689b      	ldr	r3, [r3, #8]
 8006d56:	f003 030c 	and.w	r3, r3, #12
 8006d5a:	2b08      	cmp	r3, #8
 8006d5c:	d11c      	bne.n	8006d98 <HAL_RCC_OscConfig+0x190>
 8006d5e:	4b4a      	ldr	r3, [pc, #296]	@ (8006e88 <HAL_RCC_OscConfig+0x280>)
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d116      	bne.n	8006d98 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d6a:	4b47      	ldr	r3, [pc, #284]	@ (8006e88 <HAL_RCC_OscConfig+0x280>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f003 0302 	and.w	r3, r3, #2
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d005      	beq.n	8006d82 <HAL_RCC_OscConfig+0x17a>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	68db      	ldr	r3, [r3, #12]
 8006d7a:	2b01      	cmp	r3, #1
 8006d7c:	d001      	beq.n	8006d82 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006d7e:	2301      	movs	r3, #1
 8006d80:	e1df      	b.n	8007142 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d82:	4b41      	ldr	r3, [pc, #260]	@ (8006e88 <HAL_RCC_OscConfig+0x280>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	691b      	ldr	r3, [r3, #16]
 8006d8e:	00db      	lsls	r3, r3, #3
 8006d90:	493d      	ldr	r1, [pc, #244]	@ (8006e88 <HAL_RCC_OscConfig+0x280>)
 8006d92:	4313      	orrs	r3, r2
 8006d94:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d96:	e040      	b.n	8006e1a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	68db      	ldr	r3, [r3, #12]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d023      	beq.n	8006de8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006da0:	4b39      	ldr	r3, [pc, #228]	@ (8006e88 <HAL_RCC_OscConfig+0x280>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a38      	ldr	r2, [pc, #224]	@ (8006e88 <HAL_RCC_OscConfig+0x280>)
 8006da6:	f043 0301 	orr.w	r3, r3, #1
 8006daa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dac:	f7fd ff3a 	bl	8004c24 <HAL_GetTick>
 8006db0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006db2:	e008      	b.n	8006dc6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006db4:	f7fd ff36 	bl	8004c24 <HAL_GetTick>
 8006db8:	4602      	mov	r2, r0
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	1ad3      	subs	r3, r2, r3
 8006dbe:	2b02      	cmp	r3, #2
 8006dc0:	d901      	bls.n	8006dc6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006dc2:	2303      	movs	r3, #3
 8006dc4:	e1bd      	b.n	8007142 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006dc6:	4b30      	ldr	r3, [pc, #192]	@ (8006e88 <HAL_RCC_OscConfig+0x280>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f003 0302 	and.w	r3, r3, #2
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d0f0      	beq.n	8006db4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006dd2:	4b2d      	ldr	r3, [pc, #180]	@ (8006e88 <HAL_RCC_OscConfig+0x280>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	691b      	ldr	r3, [r3, #16]
 8006dde:	00db      	lsls	r3, r3, #3
 8006de0:	4929      	ldr	r1, [pc, #164]	@ (8006e88 <HAL_RCC_OscConfig+0x280>)
 8006de2:	4313      	orrs	r3, r2
 8006de4:	600b      	str	r3, [r1, #0]
 8006de6:	e018      	b.n	8006e1a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006de8:	4b27      	ldr	r3, [pc, #156]	@ (8006e88 <HAL_RCC_OscConfig+0x280>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a26      	ldr	r2, [pc, #152]	@ (8006e88 <HAL_RCC_OscConfig+0x280>)
 8006dee:	f023 0301 	bic.w	r3, r3, #1
 8006df2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006df4:	f7fd ff16 	bl	8004c24 <HAL_GetTick>
 8006df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006dfa:	e008      	b.n	8006e0e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006dfc:	f7fd ff12 	bl	8004c24 <HAL_GetTick>
 8006e00:	4602      	mov	r2, r0
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	1ad3      	subs	r3, r2, r3
 8006e06:	2b02      	cmp	r3, #2
 8006e08:	d901      	bls.n	8006e0e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006e0a:	2303      	movs	r3, #3
 8006e0c:	e199      	b.n	8007142 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e0e:	4b1e      	ldr	r3, [pc, #120]	@ (8006e88 <HAL_RCC_OscConfig+0x280>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f003 0302 	and.w	r3, r3, #2
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d1f0      	bne.n	8006dfc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f003 0308 	and.w	r3, r3, #8
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d038      	beq.n	8006e98 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	695b      	ldr	r3, [r3, #20]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d019      	beq.n	8006e62 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006e2e:	4b16      	ldr	r3, [pc, #88]	@ (8006e88 <HAL_RCC_OscConfig+0x280>)
 8006e30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e32:	4a15      	ldr	r2, [pc, #84]	@ (8006e88 <HAL_RCC_OscConfig+0x280>)
 8006e34:	f043 0301 	orr.w	r3, r3, #1
 8006e38:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e3a:	f7fd fef3 	bl	8004c24 <HAL_GetTick>
 8006e3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e40:	e008      	b.n	8006e54 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006e42:	f7fd feef 	bl	8004c24 <HAL_GetTick>
 8006e46:	4602      	mov	r2, r0
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	1ad3      	subs	r3, r2, r3
 8006e4c:	2b02      	cmp	r3, #2
 8006e4e:	d901      	bls.n	8006e54 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006e50:	2303      	movs	r3, #3
 8006e52:	e176      	b.n	8007142 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e54:	4b0c      	ldr	r3, [pc, #48]	@ (8006e88 <HAL_RCC_OscConfig+0x280>)
 8006e56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e58:	f003 0302 	and.w	r3, r3, #2
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d0f0      	beq.n	8006e42 <HAL_RCC_OscConfig+0x23a>
 8006e60:	e01a      	b.n	8006e98 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006e62:	4b09      	ldr	r3, [pc, #36]	@ (8006e88 <HAL_RCC_OscConfig+0x280>)
 8006e64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e66:	4a08      	ldr	r2, [pc, #32]	@ (8006e88 <HAL_RCC_OscConfig+0x280>)
 8006e68:	f023 0301 	bic.w	r3, r3, #1
 8006e6c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e6e:	f7fd fed9 	bl	8004c24 <HAL_GetTick>
 8006e72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e74:	e00a      	b.n	8006e8c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006e76:	f7fd fed5 	bl	8004c24 <HAL_GetTick>
 8006e7a:	4602      	mov	r2, r0
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	1ad3      	subs	r3, r2, r3
 8006e80:	2b02      	cmp	r3, #2
 8006e82:	d903      	bls.n	8006e8c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006e84:	2303      	movs	r3, #3
 8006e86:	e15c      	b.n	8007142 <HAL_RCC_OscConfig+0x53a>
 8006e88:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e8c:	4b91      	ldr	r3, [pc, #580]	@ (80070d4 <HAL_RCC_OscConfig+0x4cc>)
 8006e8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e90:	f003 0302 	and.w	r3, r3, #2
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d1ee      	bne.n	8006e76 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f003 0304 	and.w	r3, r3, #4
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	f000 80a4 	beq.w	8006fee <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006ea6:	4b8b      	ldr	r3, [pc, #556]	@ (80070d4 <HAL_RCC_OscConfig+0x4cc>)
 8006ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eaa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d10d      	bne.n	8006ece <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006eb2:	4b88      	ldr	r3, [pc, #544]	@ (80070d4 <HAL_RCC_OscConfig+0x4cc>)
 8006eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eb6:	4a87      	ldr	r2, [pc, #540]	@ (80070d4 <HAL_RCC_OscConfig+0x4cc>)
 8006eb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ebc:	6413      	str	r3, [r2, #64]	@ 0x40
 8006ebe:	4b85      	ldr	r3, [pc, #532]	@ (80070d4 <HAL_RCC_OscConfig+0x4cc>)
 8006ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ec2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ec6:	60bb      	str	r3, [r7, #8]
 8006ec8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006ece:	4b82      	ldr	r3, [pc, #520]	@ (80070d8 <HAL_RCC_OscConfig+0x4d0>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d118      	bne.n	8006f0c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006eda:	4b7f      	ldr	r3, [pc, #508]	@ (80070d8 <HAL_RCC_OscConfig+0x4d0>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4a7e      	ldr	r2, [pc, #504]	@ (80070d8 <HAL_RCC_OscConfig+0x4d0>)
 8006ee0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ee4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006ee6:	f7fd fe9d 	bl	8004c24 <HAL_GetTick>
 8006eea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006eec:	e008      	b.n	8006f00 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006eee:	f7fd fe99 	bl	8004c24 <HAL_GetTick>
 8006ef2:	4602      	mov	r2, r0
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	1ad3      	subs	r3, r2, r3
 8006ef8:	2b64      	cmp	r3, #100	@ 0x64
 8006efa:	d901      	bls.n	8006f00 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006efc:	2303      	movs	r3, #3
 8006efe:	e120      	b.n	8007142 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006f00:	4b75      	ldr	r3, [pc, #468]	@ (80070d8 <HAL_RCC_OscConfig+0x4d0>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d0f0      	beq.n	8006eee <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d106      	bne.n	8006f22 <HAL_RCC_OscConfig+0x31a>
 8006f14:	4b6f      	ldr	r3, [pc, #444]	@ (80070d4 <HAL_RCC_OscConfig+0x4cc>)
 8006f16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f18:	4a6e      	ldr	r2, [pc, #440]	@ (80070d4 <HAL_RCC_OscConfig+0x4cc>)
 8006f1a:	f043 0301 	orr.w	r3, r3, #1
 8006f1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006f20:	e02d      	b.n	8006f7e <HAL_RCC_OscConfig+0x376>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	689b      	ldr	r3, [r3, #8]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d10c      	bne.n	8006f44 <HAL_RCC_OscConfig+0x33c>
 8006f2a:	4b6a      	ldr	r3, [pc, #424]	@ (80070d4 <HAL_RCC_OscConfig+0x4cc>)
 8006f2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f2e:	4a69      	ldr	r2, [pc, #420]	@ (80070d4 <HAL_RCC_OscConfig+0x4cc>)
 8006f30:	f023 0301 	bic.w	r3, r3, #1
 8006f34:	6713      	str	r3, [r2, #112]	@ 0x70
 8006f36:	4b67      	ldr	r3, [pc, #412]	@ (80070d4 <HAL_RCC_OscConfig+0x4cc>)
 8006f38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f3a:	4a66      	ldr	r2, [pc, #408]	@ (80070d4 <HAL_RCC_OscConfig+0x4cc>)
 8006f3c:	f023 0304 	bic.w	r3, r3, #4
 8006f40:	6713      	str	r3, [r2, #112]	@ 0x70
 8006f42:	e01c      	b.n	8006f7e <HAL_RCC_OscConfig+0x376>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	689b      	ldr	r3, [r3, #8]
 8006f48:	2b05      	cmp	r3, #5
 8006f4a:	d10c      	bne.n	8006f66 <HAL_RCC_OscConfig+0x35e>
 8006f4c:	4b61      	ldr	r3, [pc, #388]	@ (80070d4 <HAL_RCC_OscConfig+0x4cc>)
 8006f4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f50:	4a60      	ldr	r2, [pc, #384]	@ (80070d4 <HAL_RCC_OscConfig+0x4cc>)
 8006f52:	f043 0304 	orr.w	r3, r3, #4
 8006f56:	6713      	str	r3, [r2, #112]	@ 0x70
 8006f58:	4b5e      	ldr	r3, [pc, #376]	@ (80070d4 <HAL_RCC_OscConfig+0x4cc>)
 8006f5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f5c:	4a5d      	ldr	r2, [pc, #372]	@ (80070d4 <HAL_RCC_OscConfig+0x4cc>)
 8006f5e:	f043 0301 	orr.w	r3, r3, #1
 8006f62:	6713      	str	r3, [r2, #112]	@ 0x70
 8006f64:	e00b      	b.n	8006f7e <HAL_RCC_OscConfig+0x376>
 8006f66:	4b5b      	ldr	r3, [pc, #364]	@ (80070d4 <HAL_RCC_OscConfig+0x4cc>)
 8006f68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f6a:	4a5a      	ldr	r2, [pc, #360]	@ (80070d4 <HAL_RCC_OscConfig+0x4cc>)
 8006f6c:	f023 0301 	bic.w	r3, r3, #1
 8006f70:	6713      	str	r3, [r2, #112]	@ 0x70
 8006f72:	4b58      	ldr	r3, [pc, #352]	@ (80070d4 <HAL_RCC_OscConfig+0x4cc>)
 8006f74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f76:	4a57      	ldr	r2, [pc, #348]	@ (80070d4 <HAL_RCC_OscConfig+0x4cc>)
 8006f78:	f023 0304 	bic.w	r3, r3, #4
 8006f7c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	689b      	ldr	r3, [r3, #8]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d015      	beq.n	8006fb2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f86:	f7fd fe4d 	bl	8004c24 <HAL_GetTick>
 8006f8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f8c:	e00a      	b.n	8006fa4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f8e:	f7fd fe49 	bl	8004c24 <HAL_GetTick>
 8006f92:	4602      	mov	r2, r0
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	1ad3      	subs	r3, r2, r3
 8006f98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d901      	bls.n	8006fa4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006fa0:	2303      	movs	r3, #3
 8006fa2:	e0ce      	b.n	8007142 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006fa4:	4b4b      	ldr	r3, [pc, #300]	@ (80070d4 <HAL_RCC_OscConfig+0x4cc>)
 8006fa6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fa8:	f003 0302 	and.w	r3, r3, #2
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d0ee      	beq.n	8006f8e <HAL_RCC_OscConfig+0x386>
 8006fb0:	e014      	b.n	8006fdc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fb2:	f7fd fe37 	bl	8004c24 <HAL_GetTick>
 8006fb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006fb8:	e00a      	b.n	8006fd0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006fba:	f7fd fe33 	bl	8004c24 <HAL_GetTick>
 8006fbe:	4602      	mov	r2, r0
 8006fc0:	693b      	ldr	r3, [r7, #16]
 8006fc2:	1ad3      	subs	r3, r2, r3
 8006fc4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d901      	bls.n	8006fd0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006fcc:	2303      	movs	r3, #3
 8006fce:	e0b8      	b.n	8007142 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006fd0:	4b40      	ldr	r3, [pc, #256]	@ (80070d4 <HAL_RCC_OscConfig+0x4cc>)
 8006fd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fd4:	f003 0302 	and.w	r3, r3, #2
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d1ee      	bne.n	8006fba <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006fdc:	7dfb      	ldrb	r3, [r7, #23]
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	d105      	bne.n	8006fee <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006fe2:	4b3c      	ldr	r3, [pc, #240]	@ (80070d4 <HAL_RCC_OscConfig+0x4cc>)
 8006fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fe6:	4a3b      	ldr	r2, [pc, #236]	@ (80070d4 <HAL_RCC_OscConfig+0x4cc>)
 8006fe8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006fec:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	699b      	ldr	r3, [r3, #24]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	f000 80a4 	beq.w	8007140 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006ff8:	4b36      	ldr	r3, [pc, #216]	@ (80070d4 <HAL_RCC_OscConfig+0x4cc>)
 8006ffa:	689b      	ldr	r3, [r3, #8]
 8006ffc:	f003 030c 	and.w	r3, r3, #12
 8007000:	2b08      	cmp	r3, #8
 8007002:	d06b      	beq.n	80070dc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	699b      	ldr	r3, [r3, #24]
 8007008:	2b02      	cmp	r3, #2
 800700a:	d149      	bne.n	80070a0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800700c:	4b31      	ldr	r3, [pc, #196]	@ (80070d4 <HAL_RCC_OscConfig+0x4cc>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a30      	ldr	r2, [pc, #192]	@ (80070d4 <HAL_RCC_OscConfig+0x4cc>)
 8007012:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007016:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007018:	f7fd fe04 	bl	8004c24 <HAL_GetTick>
 800701c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800701e:	e008      	b.n	8007032 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007020:	f7fd fe00 	bl	8004c24 <HAL_GetTick>
 8007024:	4602      	mov	r2, r0
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	1ad3      	subs	r3, r2, r3
 800702a:	2b02      	cmp	r3, #2
 800702c:	d901      	bls.n	8007032 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800702e:	2303      	movs	r3, #3
 8007030:	e087      	b.n	8007142 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007032:	4b28      	ldr	r3, [pc, #160]	@ (80070d4 <HAL_RCC_OscConfig+0x4cc>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800703a:	2b00      	cmp	r3, #0
 800703c:	d1f0      	bne.n	8007020 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	69da      	ldr	r2, [r3, #28]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6a1b      	ldr	r3, [r3, #32]
 8007046:	431a      	orrs	r2, r3
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800704c:	019b      	lsls	r3, r3, #6
 800704e:	431a      	orrs	r2, r3
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007054:	085b      	lsrs	r3, r3, #1
 8007056:	3b01      	subs	r3, #1
 8007058:	041b      	lsls	r3, r3, #16
 800705a:	431a      	orrs	r2, r3
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007060:	061b      	lsls	r3, r3, #24
 8007062:	4313      	orrs	r3, r2
 8007064:	4a1b      	ldr	r2, [pc, #108]	@ (80070d4 <HAL_RCC_OscConfig+0x4cc>)
 8007066:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800706a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800706c:	4b19      	ldr	r3, [pc, #100]	@ (80070d4 <HAL_RCC_OscConfig+0x4cc>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a18      	ldr	r2, [pc, #96]	@ (80070d4 <HAL_RCC_OscConfig+0x4cc>)
 8007072:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007076:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007078:	f7fd fdd4 	bl	8004c24 <HAL_GetTick>
 800707c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800707e:	e008      	b.n	8007092 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007080:	f7fd fdd0 	bl	8004c24 <HAL_GetTick>
 8007084:	4602      	mov	r2, r0
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	1ad3      	subs	r3, r2, r3
 800708a:	2b02      	cmp	r3, #2
 800708c:	d901      	bls.n	8007092 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800708e:	2303      	movs	r3, #3
 8007090:	e057      	b.n	8007142 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007092:	4b10      	ldr	r3, [pc, #64]	@ (80070d4 <HAL_RCC_OscConfig+0x4cc>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800709a:	2b00      	cmp	r3, #0
 800709c:	d0f0      	beq.n	8007080 <HAL_RCC_OscConfig+0x478>
 800709e:	e04f      	b.n	8007140 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80070a0:	4b0c      	ldr	r3, [pc, #48]	@ (80070d4 <HAL_RCC_OscConfig+0x4cc>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a0b      	ldr	r2, [pc, #44]	@ (80070d4 <HAL_RCC_OscConfig+0x4cc>)
 80070a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80070aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070ac:	f7fd fdba 	bl	8004c24 <HAL_GetTick>
 80070b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070b2:	e008      	b.n	80070c6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070b4:	f7fd fdb6 	bl	8004c24 <HAL_GetTick>
 80070b8:	4602      	mov	r2, r0
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	1ad3      	subs	r3, r2, r3
 80070be:	2b02      	cmp	r3, #2
 80070c0:	d901      	bls.n	80070c6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80070c2:	2303      	movs	r3, #3
 80070c4:	e03d      	b.n	8007142 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070c6:	4b03      	ldr	r3, [pc, #12]	@ (80070d4 <HAL_RCC_OscConfig+0x4cc>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d1f0      	bne.n	80070b4 <HAL_RCC_OscConfig+0x4ac>
 80070d2:	e035      	b.n	8007140 <HAL_RCC_OscConfig+0x538>
 80070d4:	40023800 	.word	0x40023800
 80070d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80070dc:	4b1b      	ldr	r3, [pc, #108]	@ (800714c <HAL_RCC_OscConfig+0x544>)
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	699b      	ldr	r3, [r3, #24]
 80070e6:	2b01      	cmp	r3, #1
 80070e8:	d028      	beq.n	800713c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80070f4:	429a      	cmp	r2, r3
 80070f6:	d121      	bne.n	800713c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007102:	429a      	cmp	r2, r3
 8007104:	d11a      	bne.n	800713c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007106:	68fa      	ldr	r2, [r7, #12]
 8007108:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800710c:	4013      	ands	r3, r2
 800710e:	687a      	ldr	r2, [r7, #4]
 8007110:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007112:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007114:	4293      	cmp	r3, r2
 8007116:	d111      	bne.n	800713c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007122:	085b      	lsrs	r3, r3, #1
 8007124:	3b01      	subs	r3, #1
 8007126:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007128:	429a      	cmp	r2, r3
 800712a:	d107      	bne.n	800713c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007136:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007138:	429a      	cmp	r2, r3
 800713a:	d001      	beq.n	8007140 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800713c:	2301      	movs	r3, #1
 800713e:	e000      	b.n	8007142 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007140:	2300      	movs	r3, #0
}
 8007142:	4618      	mov	r0, r3
 8007144:	3718      	adds	r7, #24
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}
 800714a:	bf00      	nop
 800714c:	40023800 	.word	0x40023800

08007150 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b084      	sub	sp, #16
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
 8007158:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800715a:	2300      	movs	r3, #0
 800715c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d101      	bne.n	8007168 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007164:	2301      	movs	r3, #1
 8007166:	e0d0      	b.n	800730a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007168:	4b6a      	ldr	r3, [pc, #424]	@ (8007314 <HAL_RCC_ClockConfig+0x1c4>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f003 030f 	and.w	r3, r3, #15
 8007170:	683a      	ldr	r2, [r7, #0]
 8007172:	429a      	cmp	r2, r3
 8007174:	d910      	bls.n	8007198 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007176:	4b67      	ldr	r3, [pc, #412]	@ (8007314 <HAL_RCC_ClockConfig+0x1c4>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f023 020f 	bic.w	r2, r3, #15
 800717e:	4965      	ldr	r1, [pc, #404]	@ (8007314 <HAL_RCC_ClockConfig+0x1c4>)
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	4313      	orrs	r3, r2
 8007184:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007186:	4b63      	ldr	r3, [pc, #396]	@ (8007314 <HAL_RCC_ClockConfig+0x1c4>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f003 030f 	and.w	r3, r3, #15
 800718e:	683a      	ldr	r2, [r7, #0]
 8007190:	429a      	cmp	r2, r3
 8007192:	d001      	beq.n	8007198 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007194:	2301      	movs	r3, #1
 8007196:	e0b8      	b.n	800730a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f003 0302 	and.w	r3, r3, #2
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d020      	beq.n	80071e6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f003 0304 	and.w	r3, r3, #4
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d005      	beq.n	80071bc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80071b0:	4b59      	ldr	r3, [pc, #356]	@ (8007318 <HAL_RCC_ClockConfig+0x1c8>)
 80071b2:	689b      	ldr	r3, [r3, #8]
 80071b4:	4a58      	ldr	r2, [pc, #352]	@ (8007318 <HAL_RCC_ClockConfig+0x1c8>)
 80071b6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80071ba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f003 0308 	and.w	r3, r3, #8
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d005      	beq.n	80071d4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80071c8:	4b53      	ldr	r3, [pc, #332]	@ (8007318 <HAL_RCC_ClockConfig+0x1c8>)
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	4a52      	ldr	r2, [pc, #328]	@ (8007318 <HAL_RCC_ClockConfig+0x1c8>)
 80071ce:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80071d2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80071d4:	4b50      	ldr	r3, [pc, #320]	@ (8007318 <HAL_RCC_ClockConfig+0x1c8>)
 80071d6:	689b      	ldr	r3, [r3, #8]
 80071d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	689b      	ldr	r3, [r3, #8]
 80071e0:	494d      	ldr	r1, [pc, #308]	@ (8007318 <HAL_RCC_ClockConfig+0x1c8>)
 80071e2:	4313      	orrs	r3, r2
 80071e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f003 0301 	and.w	r3, r3, #1
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d040      	beq.n	8007274 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	2b01      	cmp	r3, #1
 80071f8:	d107      	bne.n	800720a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80071fa:	4b47      	ldr	r3, [pc, #284]	@ (8007318 <HAL_RCC_ClockConfig+0x1c8>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007202:	2b00      	cmp	r3, #0
 8007204:	d115      	bne.n	8007232 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007206:	2301      	movs	r3, #1
 8007208:	e07f      	b.n	800730a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	685b      	ldr	r3, [r3, #4]
 800720e:	2b02      	cmp	r3, #2
 8007210:	d107      	bne.n	8007222 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007212:	4b41      	ldr	r3, [pc, #260]	@ (8007318 <HAL_RCC_ClockConfig+0x1c8>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800721a:	2b00      	cmp	r3, #0
 800721c:	d109      	bne.n	8007232 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800721e:	2301      	movs	r3, #1
 8007220:	e073      	b.n	800730a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007222:	4b3d      	ldr	r3, [pc, #244]	@ (8007318 <HAL_RCC_ClockConfig+0x1c8>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f003 0302 	and.w	r3, r3, #2
 800722a:	2b00      	cmp	r3, #0
 800722c:	d101      	bne.n	8007232 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800722e:	2301      	movs	r3, #1
 8007230:	e06b      	b.n	800730a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007232:	4b39      	ldr	r3, [pc, #228]	@ (8007318 <HAL_RCC_ClockConfig+0x1c8>)
 8007234:	689b      	ldr	r3, [r3, #8]
 8007236:	f023 0203 	bic.w	r2, r3, #3
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	4936      	ldr	r1, [pc, #216]	@ (8007318 <HAL_RCC_ClockConfig+0x1c8>)
 8007240:	4313      	orrs	r3, r2
 8007242:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007244:	f7fd fcee 	bl	8004c24 <HAL_GetTick>
 8007248:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800724a:	e00a      	b.n	8007262 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800724c:	f7fd fcea 	bl	8004c24 <HAL_GetTick>
 8007250:	4602      	mov	r2, r0
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	1ad3      	subs	r3, r2, r3
 8007256:	f241 3288 	movw	r2, #5000	@ 0x1388
 800725a:	4293      	cmp	r3, r2
 800725c:	d901      	bls.n	8007262 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800725e:	2303      	movs	r3, #3
 8007260:	e053      	b.n	800730a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007262:	4b2d      	ldr	r3, [pc, #180]	@ (8007318 <HAL_RCC_ClockConfig+0x1c8>)
 8007264:	689b      	ldr	r3, [r3, #8]
 8007266:	f003 020c 	and.w	r2, r3, #12
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	685b      	ldr	r3, [r3, #4]
 800726e:	009b      	lsls	r3, r3, #2
 8007270:	429a      	cmp	r2, r3
 8007272:	d1eb      	bne.n	800724c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007274:	4b27      	ldr	r3, [pc, #156]	@ (8007314 <HAL_RCC_ClockConfig+0x1c4>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f003 030f 	and.w	r3, r3, #15
 800727c:	683a      	ldr	r2, [r7, #0]
 800727e:	429a      	cmp	r2, r3
 8007280:	d210      	bcs.n	80072a4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007282:	4b24      	ldr	r3, [pc, #144]	@ (8007314 <HAL_RCC_ClockConfig+0x1c4>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f023 020f 	bic.w	r2, r3, #15
 800728a:	4922      	ldr	r1, [pc, #136]	@ (8007314 <HAL_RCC_ClockConfig+0x1c4>)
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	4313      	orrs	r3, r2
 8007290:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007292:	4b20      	ldr	r3, [pc, #128]	@ (8007314 <HAL_RCC_ClockConfig+0x1c4>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f003 030f 	and.w	r3, r3, #15
 800729a:	683a      	ldr	r2, [r7, #0]
 800729c:	429a      	cmp	r2, r3
 800729e:	d001      	beq.n	80072a4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80072a0:	2301      	movs	r3, #1
 80072a2:	e032      	b.n	800730a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f003 0304 	and.w	r3, r3, #4
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d008      	beq.n	80072c2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80072b0:	4b19      	ldr	r3, [pc, #100]	@ (8007318 <HAL_RCC_ClockConfig+0x1c8>)
 80072b2:	689b      	ldr	r3, [r3, #8]
 80072b4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	68db      	ldr	r3, [r3, #12]
 80072bc:	4916      	ldr	r1, [pc, #88]	@ (8007318 <HAL_RCC_ClockConfig+0x1c8>)
 80072be:	4313      	orrs	r3, r2
 80072c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f003 0308 	and.w	r3, r3, #8
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d009      	beq.n	80072e2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80072ce:	4b12      	ldr	r3, [pc, #72]	@ (8007318 <HAL_RCC_ClockConfig+0x1c8>)
 80072d0:	689b      	ldr	r3, [r3, #8]
 80072d2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	691b      	ldr	r3, [r3, #16]
 80072da:	00db      	lsls	r3, r3, #3
 80072dc:	490e      	ldr	r1, [pc, #56]	@ (8007318 <HAL_RCC_ClockConfig+0x1c8>)
 80072de:	4313      	orrs	r3, r2
 80072e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80072e2:	f000 f821 	bl	8007328 <HAL_RCC_GetSysClockFreq>
 80072e6:	4602      	mov	r2, r0
 80072e8:	4b0b      	ldr	r3, [pc, #44]	@ (8007318 <HAL_RCC_ClockConfig+0x1c8>)
 80072ea:	689b      	ldr	r3, [r3, #8]
 80072ec:	091b      	lsrs	r3, r3, #4
 80072ee:	f003 030f 	and.w	r3, r3, #15
 80072f2:	490a      	ldr	r1, [pc, #40]	@ (800731c <HAL_RCC_ClockConfig+0x1cc>)
 80072f4:	5ccb      	ldrb	r3, [r1, r3]
 80072f6:	fa22 f303 	lsr.w	r3, r2, r3
 80072fa:	4a09      	ldr	r2, [pc, #36]	@ (8007320 <HAL_RCC_ClockConfig+0x1d0>)
 80072fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80072fe:	4b09      	ldr	r3, [pc, #36]	@ (8007324 <HAL_RCC_ClockConfig+0x1d4>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4618      	mov	r0, r3
 8007304:	f7fd fc4a 	bl	8004b9c <HAL_InitTick>

  return HAL_OK;
 8007308:	2300      	movs	r3, #0
}
 800730a:	4618      	mov	r0, r3
 800730c:	3710      	adds	r7, #16
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}
 8007312:	bf00      	nop
 8007314:	40023c00 	.word	0x40023c00
 8007318:	40023800 	.word	0x40023800
 800731c:	080179f4 	.word	0x080179f4
 8007320:	2000001c 	.word	0x2000001c
 8007324:	20000054 	.word	0x20000054

08007328 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007328:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800732c:	b090      	sub	sp, #64	@ 0x40
 800732e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007330:	2300      	movs	r3, #0
 8007332:	637b      	str	r3, [r7, #52]	@ 0x34
 8007334:	2300      	movs	r3, #0
 8007336:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007338:	2300      	movs	r3, #0
 800733a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 800733c:	2300      	movs	r3, #0
 800733e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007340:	4b59      	ldr	r3, [pc, #356]	@ (80074a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8007342:	689b      	ldr	r3, [r3, #8]
 8007344:	f003 030c 	and.w	r3, r3, #12
 8007348:	2b08      	cmp	r3, #8
 800734a:	d00d      	beq.n	8007368 <HAL_RCC_GetSysClockFreq+0x40>
 800734c:	2b08      	cmp	r3, #8
 800734e:	f200 80a1 	bhi.w	8007494 <HAL_RCC_GetSysClockFreq+0x16c>
 8007352:	2b00      	cmp	r3, #0
 8007354:	d002      	beq.n	800735c <HAL_RCC_GetSysClockFreq+0x34>
 8007356:	2b04      	cmp	r3, #4
 8007358:	d003      	beq.n	8007362 <HAL_RCC_GetSysClockFreq+0x3a>
 800735a:	e09b      	b.n	8007494 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800735c:	4b53      	ldr	r3, [pc, #332]	@ (80074ac <HAL_RCC_GetSysClockFreq+0x184>)
 800735e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007360:	e09b      	b.n	800749a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007362:	4b53      	ldr	r3, [pc, #332]	@ (80074b0 <HAL_RCC_GetSysClockFreq+0x188>)
 8007364:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007366:	e098      	b.n	800749a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007368:	4b4f      	ldr	r3, [pc, #316]	@ (80074a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800736a:	685b      	ldr	r3, [r3, #4]
 800736c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007370:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007372:	4b4d      	ldr	r3, [pc, #308]	@ (80074a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800737a:	2b00      	cmp	r3, #0
 800737c:	d028      	beq.n	80073d0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800737e:	4b4a      	ldr	r3, [pc, #296]	@ (80074a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8007380:	685b      	ldr	r3, [r3, #4]
 8007382:	099b      	lsrs	r3, r3, #6
 8007384:	2200      	movs	r2, #0
 8007386:	623b      	str	r3, [r7, #32]
 8007388:	627a      	str	r2, [r7, #36]	@ 0x24
 800738a:	6a3b      	ldr	r3, [r7, #32]
 800738c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007390:	2100      	movs	r1, #0
 8007392:	4b47      	ldr	r3, [pc, #284]	@ (80074b0 <HAL_RCC_GetSysClockFreq+0x188>)
 8007394:	fb03 f201 	mul.w	r2, r3, r1
 8007398:	2300      	movs	r3, #0
 800739a:	fb00 f303 	mul.w	r3, r0, r3
 800739e:	4413      	add	r3, r2
 80073a0:	4a43      	ldr	r2, [pc, #268]	@ (80074b0 <HAL_RCC_GetSysClockFreq+0x188>)
 80073a2:	fba0 1202 	umull	r1, r2, r0, r2
 80073a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80073a8:	460a      	mov	r2, r1
 80073aa:	62ba      	str	r2, [r7, #40]	@ 0x28
 80073ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80073ae:	4413      	add	r3, r2
 80073b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80073b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073b4:	2200      	movs	r2, #0
 80073b6:	61bb      	str	r3, [r7, #24]
 80073b8:	61fa      	str	r2, [r7, #28]
 80073ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80073be:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80073c2:	f7f9 fcc1 	bl	8000d48 <__aeabi_uldivmod>
 80073c6:	4602      	mov	r2, r0
 80073c8:	460b      	mov	r3, r1
 80073ca:	4613      	mov	r3, r2
 80073cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80073ce:	e053      	b.n	8007478 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80073d0:	4b35      	ldr	r3, [pc, #212]	@ (80074a8 <HAL_RCC_GetSysClockFreq+0x180>)
 80073d2:	685b      	ldr	r3, [r3, #4]
 80073d4:	099b      	lsrs	r3, r3, #6
 80073d6:	2200      	movs	r2, #0
 80073d8:	613b      	str	r3, [r7, #16]
 80073da:	617a      	str	r2, [r7, #20]
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80073e2:	f04f 0b00 	mov.w	fp, #0
 80073e6:	4652      	mov	r2, sl
 80073e8:	465b      	mov	r3, fp
 80073ea:	f04f 0000 	mov.w	r0, #0
 80073ee:	f04f 0100 	mov.w	r1, #0
 80073f2:	0159      	lsls	r1, r3, #5
 80073f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80073f8:	0150      	lsls	r0, r2, #5
 80073fa:	4602      	mov	r2, r0
 80073fc:	460b      	mov	r3, r1
 80073fe:	ebb2 080a 	subs.w	r8, r2, sl
 8007402:	eb63 090b 	sbc.w	r9, r3, fp
 8007406:	f04f 0200 	mov.w	r2, #0
 800740a:	f04f 0300 	mov.w	r3, #0
 800740e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007412:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007416:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800741a:	ebb2 0408 	subs.w	r4, r2, r8
 800741e:	eb63 0509 	sbc.w	r5, r3, r9
 8007422:	f04f 0200 	mov.w	r2, #0
 8007426:	f04f 0300 	mov.w	r3, #0
 800742a:	00eb      	lsls	r3, r5, #3
 800742c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007430:	00e2      	lsls	r2, r4, #3
 8007432:	4614      	mov	r4, r2
 8007434:	461d      	mov	r5, r3
 8007436:	eb14 030a 	adds.w	r3, r4, sl
 800743a:	603b      	str	r3, [r7, #0]
 800743c:	eb45 030b 	adc.w	r3, r5, fp
 8007440:	607b      	str	r3, [r7, #4]
 8007442:	f04f 0200 	mov.w	r2, #0
 8007446:	f04f 0300 	mov.w	r3, #0
 800744a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800744e:	4629      	mov	r1, r5
 8007450:	028b      	lsls	r3, r1, #10
 8007452:	4621      	mov	r1, r4
 8007454:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007458:	4621      	mov	r1, r4
 800745a:	028a      	lsls	r2, r1, #10
 800745c:	4610      	mov	r0, r2
 800745e:	4619      	mov	r1, r3
 8007460:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007462:	2200      	movs	r2, #0
 8007464:	60bb      	str	r3, [r7, #8]
 8007466:	60fa      	str	r2, [r7, #12]
 8007468:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800746c:	f7f9 fc6c 	bl	8000d48 <__aeabi_uldivmod>
 8007470:	4602      	mov	r2, r0
 8007472:	460b      	mov	r3, r1
 8007474:	4613      	mov	r3, r2
 8007476:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007478:	4b0b      	ldr	r3, [pc, #44]	@ (80074a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800747a:	685b      	ldr	r3, [r3, #4]
 800747c:	0c1b      	lsrs	r3, r3, #16
 800747e:	f003 0303 	and.w	r3, r3, #3
 8007482:	3301      	adds	r3, #1
 8007484:	005b      	lsls	r3, r3, #1
 8007486:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8007488:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800748a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800748c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007490:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007492:	e002      	b.n	800749a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007494:	4b05      	ldr	r3, [pc, #20]	@ (80074ac <HAL_RCC_GetSysClockFreq+0x184>)
 8007496:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007498:	bf00      	nop
    }
  }
  return sysclockfreq;
 800749a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800749c:	4618      	mov	r0, r3
 800749e:	3740      	adds	r7, #64	@ 0x40
 80074a0:	46bd      	mov	sp, r7
 80074a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80074a6:	bf00      	nop
 80074a8:	40023800 	.word	0x40023800
 80074ac:	00f42400 	.word	0x00f42400
 80074b0:	017d7840 	.word	0x017d7840

080074b4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80074b4:	b480      	push	{r7}
 80074b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80074b8:	4b03      	ldr	r3, [pc, #12]	@ (80074c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80074ba:	681b      	ldr	r3, [r3, #0]
}
 80074bc:	4618      	mov	r0, r3
 80074be:	46bd      	mov	sp, r7
 80074c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c4:	4770      	bx	lr
 80074c6:	bf00      	nop
 80074c8:	2000001c 	.word	0x2000001c

080074cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80074d0:	f7ff fff0 	bl	80074b4 <HAL_RCC_GetHCLKFreq>
 80074d4:	4602      	mov	r2, r0
 80074d6:	4b05      	ldr	r3, [pc, #20]	@ (80074ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80074d8:	689b      	ldr	r3, [r3, #8]
 80074da:	0a9b      	lsrs	r3, r3, #10
 80074dc:	f003 0307 	and.w	r3, r3, #7
 80074e0:	4903      	ldr	r1, [pc, #12]	@ (80074f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80074e2:	5ccb      	ldrb	r3, [r1, r3]
 80074e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	bd80      	pop	{r7, pc}
 80074ec:	40023800 	.word	0x40023800
 80074f0:	08017a04 	.word	0x08017a04

080074f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80074f8:	f7ff ffdc 	bl	80074b4 <HAL_RCC_GetHCLKFreq>
 80074fc:	4602      	mov	r2, r0
 80074fe:	4b05      	ldr	r3, [pc, #20]	@ (8007514 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007500:	689b      	ldr	r3, [r3, #8]
 8007502:	0b5b      	lsrs	r3, r3, #13
 8007504:	f003 0307 	and.w	r3, r3, #7
 8007508:	4903      	ldr	r1, [pc, #12]	@ (8007518 <HAL_RCC_GetPCLK2Freq+0x24>)
 800750a:	5ccb      	ldrb	r3, [r1, r3]
 800750c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007510:	4618      	mov	r0, r3
 8007512:	bd80      	pop	{r7, pc}
 8007514:	40023800 	.word	0x40023800
 8007518:	08017a04 	.word	0x08017a04

0800751c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b088      	sub	sp, #32
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007524:	2300      	movs	r3, #0
 8007526:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007528:	2300      	movs	r3, #0
 800752a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800752c:	2300      	movs	r3, #0
 800752e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007530:	2300      	movs	r3, #0
 8007532:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007534:	2300      	movs	r3, #0
 8007536:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f003 0301 	and.w	r3, r3, #1
 8007540:	2b00      	cmp	r3, #0
 8007542:	d012      	beq.n	800756a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007544:	4b69      	ldr	r3, [pc, #420]	@ (80076ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007546:	689b      	ldr	r3, [r3, #8]
 8007548:	4a68      	ldr	r2, [pc, #416]	@ (80076ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800754a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800754e:	6093      	str	r3, [r2, #8]
 8007550:	4b66      	ldr	r3, [pc, #408]	@ (80076ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007552:	689a      	ldr	r2, [r3, #8]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007558:	4964      	ldr	r1, [pc, #400]	@ (80076ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800755a:	4313      	orrs	r3, r2
 800755c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007562:	2b00      	cmp	r3, #0
 8007564:	d101      	bne.n	800756a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007566:	2301      	movs	r3, #1
 8007568:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007572:	2b00      	cmp	r3, #0
 8007574:	d017      	beq.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007576:	4b5d      	ldr	r3, [pc, #372]	@ (80076ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007578:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800757c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007584:	4959      	ldr	r1, [pc, #356]	@ (80076ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007586:	4313      	orrs	r3, r2
 8007588:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007590:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007594:	d101      	bne.n	800759a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007596:	2301      	movs	r3, #1
 8007598:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d101      	bne.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80075a2:	2301      	movs	r3, #1
 80075a4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d017      	beq.n	80075e2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80075b2:	4b4e      	ldr	r3, [pc, #312]	@ (80076ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80075b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80075b8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075c0:	494a      	ldr	r1, [pc, #296]	@ (80076ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80075c2:	4313      	orrs	r3, r2
 80075c4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075cc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80075d0:	d101      	bne.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80075d2:	2301      	movs	r3, #1
 80075d4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d101      	bne.n	80075e2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80075de:	2301      	movs	r3, #1
 80075e0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d001      	beq.n	80075f2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80075ee:	2301      	movs	r3, #1
 80075f0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f003 0320 	and.w	r3, r3, #32
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	f000 808b 	beq.w	8007716 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007600:	4b3a      	ldr	r3, [pc, #232]	@ (80076ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007604:	4a39      	ldr	r2, [pc, #228]	@ (80076ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007606:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800760a:	6413      	str	r3, [r2, #64]	@ 0x40
 800760c:	4b37      	ldr	r3, [pc, #220]	@ (80076ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800760e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007610:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007614:	60bb      	str	r3, [r7, #8]
 8007616:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007618:	4b35      	ldr	r3, [pc, #212]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4a34      	ldr	r2, [pc, #208]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800761e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007622:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007624:	f7fd fafe 	bl	8004c24 <HAL_GetTick>
 8007628:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800762a:	e008      	b.n	800763e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800762c:	f7fd fafa 	bl	8004c24 <HAL_GetTick>
 8007630:	4602      	mov	r2, r0
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	1ad3      	subs	r3, r2, r3
 8007636:	2b64      	cmp	r3, #100	@ 0x64
 8007638:	d901      	bls.n	800763e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800763a:	2303      	movs	r3, #3
 800763c:	e357      	b.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800763e:	4b2c      	ldr	r3, [pc, #176]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007646:	2b00      	cmp	r3, #0
 8007648:	d0f0      	beq.n	800762c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800764a:	4b28      	ldr	r3, [pc, #160]	@ (80076ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800764c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800764e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007652:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d035      	beq.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800765e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007662:	693a      	ldr	r2, [r7, #16]
 8007664:	429a      	cmp	r2, r3
 8007666:	d02e      	beq.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007668:	4b20      	ldr	r3, [pc, #128]	@ (80076ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800766a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800766c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007670:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007672:	4b1e      	ldr	r3, [pc, #120]	@ (80076ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007674:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007676:	4a1d      	ldr	r2, [pc, #116]	@ (80076ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007678:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800767c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800767e:	4b1b      	ldr	r3, [pc, #108]	@ (80076ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007680:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007682:	4a1a      	ldr	r2, [pc, #104]	@ (80076ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007684:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007688:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800768a:	4a18      	ldr	r2, [pc, #96]	@ (80076ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800768c:	693b      	ldr	r3, [r7, #16]
 800768e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007690:	4b16      	ldr	r3, [pc, #88]	@ (80076ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007692:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007694:	f003 0301 	and.w	r3, r3, #1
 8007698:	2b01      	cmp	r3, #1
 800769a:	d114      	bne.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800769c:	f7fd fac2 	bl	8004c24 <HAL_GetTick>
 80076a0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80076a2:	e00a      	b.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80076a4:	f7fd fabe 	bl	8004c24 <HAL_GetTick>
 80076a8:	4602      	mov	r2, r0
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	1ad3      	subs	r3, r2, r3
 80076ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d901      	bls.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80076b6:	2303      	movs	r3, #3
 80076b8:	e319      	b.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80076ba:	4b0c      	ldr	r3, [pc, #48]	@ (80076ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80076bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076be:	f003 0302 	and.w	r3, r3, #2
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d0ee      	beq.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80076ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80076d2:	d111      	bne.n	80076f8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80076d4:	4b05      	ldr	r3, [pc, #20]	@ (80076ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80076d6:	689b      	ldr	r3, [r3, #8]
 80076d8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80076e0:	4b04      	ldr	r3, [pc, #16]	@ (80076f4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80076e2:	400b      	ands	r3, r1
 80076e4:	4901      	ldr	r1, [pc, #4]	@ (80076ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80076e6:	4313      	orrs	r3, r2
 80076e8:	608b      	str	r3, [r1, #8]
 80076ea:	e00b      	b.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80076ec:	40023800 	.word	0x40023800
 80076f0:	40007000 	.word	0x40007000
 80076f4:	0ffffcff 	.word	0x0ffffcff
 80076f8:	4baa      	ldr	r3, [pc, #680]	@ (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80076fa:	689b      	ldr	r3, [r3, #8]
 80076fc:	4aa9      	ldr	r2, [pc, #676]	@ (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80076fe:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8007702:	6093      	str	r3, [r2, #8]
 8007704:	4ba7      	ldr	r3, [pc, #668]	@ (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007706:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800770c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007710:	49a4      	ldr	r1, [pc, #656]	@ (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007712:	4313      	orrs	r3, r2
 8007714:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f003 0310 	and.w	r3, r3, #16
 800771e:	2b00      	cmp	r3, #0
 8007720:	d010      	beq.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007722:	4ba0      	ldr	r3, [pc, #640]	@ (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007724:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007728:	4a9e      	ldr	r2, [pc, #632]	@ (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800772a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800772e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8007732:	4b9c      	ldr	r3, [pc, #624]	@ (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007734:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800773c:	4999      	ldr	r1, [pc, #612]	@ (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800773e:	4313      	orrs	r3, r2
 8007740:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800774c:	2b00      	cmp	r3, #0
 800774e:	d00a      	beq.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007750:	4b94      	ldr	r3, [pc, #592]	@ (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007752:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007756:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800775e:	4991      	ldr	r1, [pc, #580]	@ (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007760:	4313      	orrs	r3, r2
 8007762:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800776e:	2b00      	cmp	r3, #0
 8007770:	d00a      	beq.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007772:	4b8c      	ldr	r3, [pc, #560]	@ (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007774:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007778:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007780:	4988      	ldr	r1, [pc, #544]	@ (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007782:	4313      	orrs	r3, r2
 8007784:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007790:	2b00      	cmp	r3, #0
 8007792:	d00a      	beq.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007794:	4b83      	ldr	r3, [pc, #524]	@ (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007796:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800779a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80077a2:	4980      	ldr	r1, [pc, #512]	@ (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80077a4:	4313      	orrs	r3, r2
 80077a6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d00a      	beq.n	80077cc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80077b6:	4b7b      	ldr	r3, [pc, #492]	@ (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80077b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077bc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077c4:	4977      	ldr	r1, [pc, #476]	@ (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80077c6:	4313      	orrs	r3, r2
 80077c8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d00a      	beq.n	80077ee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80077d8:	4b72      	ldr	r3, [pc, #456]	@ (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80077da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077de:	f023 0203 	bic.w	r2, r3, #3
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077e6:	496f      	ldr	r1, [pc, #444]	@ (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80077e8:	4313      	orrs	r3, r2
 80077ea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d00a      	beq.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80077fa:	4b6a      	ldr	r3, [pc, #424]	@ (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80077fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007800:	f023 020c 	bic.w	r2, r3, #12
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007808:	4966      	ldr	r1, [pc, #408]	@ (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800780a:	4313      	orrs	r3, r2
 800780c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007818:	2b00      	cmp	r3, #0
 800781a:	d00a      	beq.n	8007832 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800781c:	4b61      	ldr	r3, [pc, #388]	@ (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800781e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007822:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800782a:	495e      	ldr	r1, [pc, #376]	@ (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800782c:	4313      	orrs	r3, r2
 800782e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800783a:	2b00      	cmp	r3, #0
 800783c:	d00a      	beq.n	8007854 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800783e:	4b59      	ldr	r3, [pc, #356]	@ (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007840:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007844:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800784c:	4955      	ldr	r1, [pc, #340]	@ (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800784e:	4313      	orrs	r3, r2
 8007850:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800785c:	2b00      	cmp	r3, #0
 800785e:	d00a      	beq.n	8007876 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007860:	4b50      	ldr	r3, [pc, #320]	@ (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007862:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007866:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800786e:	494d      	ldr	r1, [pc, #308]	@ (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007870:	4313      	orrs	r3, r2
 8007872:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800787e:	2b00      	cmp	r3, #0
 8007880:	d00a      	beq.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007882:	4b48      	ldr	r3, [pc, #288]	@ (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007884:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007888:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007890:	4944      	ldr	r1, [pc, #272]	@ (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007892:	4313      	orrs	r3, r2
 8007894:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d00a      	beq.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80078a4:	4b3f      	ldr	r3, [pc, #252]	@ (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80078a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078aa:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80078b2:	493c      	ldr	r1, [pc, #240]	@ (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80078b4:	4313      	orrs	r3, r2
 80078b6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d00a      	beq.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80078c6:	4b37      	ldr	r3, [pc, #220]	@ (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80078c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078cc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80078d4:	4933      	ldr	r1, [pc, #204]	@ (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80078d6:	4313      	orrs	r3, r2
 80078d8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d00a      	beq.n	80078fe <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80078e8:	4b2e      	ldr	r3, [pc, #184]	@ (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80078ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078ee:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80078f6:	492b      	ldr	r1, [pc, #172]	@ (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80078f8:	4313      	orrs	r3, r2
 80078fa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007906:	2b00      	cmp	r3, #0
 8007908:	d011      	beq.n	800792e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800790a:	4b26      	ldr	r3, [pc, #152]	@ (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800790c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007910:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007918:	4922      	ldr	r1, [pc, #136]	@ (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800791a:	4313      	orrs	r3, r2
 800791c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007924:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007928:	d101      	bne.n	800792e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800792a:	2301      	movs	r3, #1
 800792c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f003 0308 	and.w	r3, r3, #8
 8007936:	2b00      	cmp	r3, #0
 8007938:	d001      	beq.n	800793e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800793a:	2301      	movs	r3, #1
 800793c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007946:	2b00      	cmp	r3, #0
 8007948:	d00a      	beq.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800794a:	4b16      	ldr	r3, [pc, #88]	@ (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800794c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007950:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007958:	4912      	ldr	r1, [pc, #72]	@ (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800795a:	4313      	orrs	r3, r2
 800795c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007968:	2b00      	cmp	r3, #0
 800796a:	d00b      	beq.n	8007984 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800796c:	4b0d      	ldr	r3, [pc, #52]	@ (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800796e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007972:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800797c:	4909      	ldr	r1, [pc, #36]	@ (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800797e:	4313      	orrs	r3, r2
 8007980:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007984:	69fb      	ldr	r3, [r7, #28]
 8007986:	2b01      	cmp	r3, #1
 8007988:	d006      	beq.n	8007998 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007992:	2b00      	cmp	r3, #0
 8007994:	f000 80d9 	beq.w	8007b4a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007998:	4b02      	ldr	r3, [pc, #8]	@ (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4a01      	ldr	r2, [pc, #4]	@ (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800799e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80079a2:	e001      	b.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80079a4:	40023800 	.word	0x40023800
 80079a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079aa:	f7fd f93b 	bl	8004c24 <HAL_GetTick>
 80079ae:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80079b0:	e008      	b.n	80079c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80079b2:	f7fd f937 	bl	8004c24 <HAL_GetTick>
 80079b6:	4602      	mov	r2, r0
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	1ad3      	subs	r3, r2, r3
 80079bc:	2b64      	cmp	r3, #100	@ 0x64
 80079be:	d901      	bls.n	80079c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80079c0:	2303      	movs	r3, #3
 80079c2:	e194      	b.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80079c4:	4b6c      	ldr	r3, [pc, #432]	@ (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d1f0      	bne.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f003 0301 	and.w	r3, r3, #1
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d021      	beq.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d11d      	bne.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80079e4:	4b64      	ldr	r3, [pc, #400]	@ (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80079e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80079ea:	0c1b      	lsrs	r3, r3, #16
 80079ec:	f003 0303 	and.w	r3, r3, #3
 80079f0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80079f2:	4b61      	ldr	r3, [pc, #388]	@ (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80079f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80079f8:	0e1b      	lsrs	r3, r3, #24
 80079fa:	f003 030f 	and.w	r3, r3, #15
 80079fe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	685b      	ldr	r3, [r3, #4]
 8007a04:	019a      	lsls	r2, r3, #6
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	041b      	lsls	r3, r3, #16
 8007a0a:	431a      	orrs	r2, r3
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	061b      	lsls	r3, r3, #24
 8007a10:	431a      	orrs	r2, r3
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	689b      	ldr	r3, [r3, #8]
 8007a16:	071b      	lsls	r3, r3, #28
 8007a18:	4957      	ldr	r1, [pc, #348]	@ (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d004      	beq.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a30:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007a34:	d00a      	beq.n	8007a4c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d02e      	beq.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a46:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007a4a:	d129      	bne.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007a4c:	4b4a      	ldr	r3, [pc, #296]	@ (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007a4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a52:	0c1b      	lsrs	r3, r3, #16
 8007a54:	f003 0303 	and.w	r3, r3, #3
 8007a58:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007a5a:	4b47      	ldr	r3, [pc, #284]	@ (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007a5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a60:	0f1b      	lsrs	r3, r3, #28
 8007a62:	f003 0307 	and.w	r3, r3, #7
 8007a66:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	685b      	ldr	r3, [r3, #4]
 8007a6c:	019a      	lsls	r2, r3, #6
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	041b      	lsls	r3, r3, #16
 8007a72:	431a      	orrs	r2, r3
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	68db      	ldr	r3, [r3, #12]
 8007a78:	061b      	lsls	r3, r3, #24
 8007a7a:	431a      	orrs	r2, r3
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	071b      	lsls	r3, r3, #28
 8007a80:	493d      	ldr	r1, [pc, #244]	@ (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007a82:	4313      	orrs	r3, r2
 8007a84:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007a88:	4b3b      	ldr	r3, [pc, #236]	@ (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007a8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a8e:	f023 021f 	bic.w	r2, r3, #31
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a96:	3b01      	subs	r3, #1
 8007a98:	4937      	ldr	r1, [pc, #220]	@ (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d01d      	beq.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007aac:	4b32      	ldr	r3, [pc, #200]	@ (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007aae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ab2:	0e1b      	lsrs	r3, r3, #24
 8007ab4:	f003 030f 	and.w	r3, r3, #15
 8007ab8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007aba:	4b2f      	ldr	r3, [pc, #188]	@ (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007abc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ac0:	0f1b      	lsrs	r3, r3, #28
 8007ac2:	f003 0307 	and.w	r3, r3, #7
 8007ac6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	685b      	ldr	r3, [r3, #4]
 8007acc:	019a      	lsls	r2, r3, #6
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	691b      	ldr	r3, [r3, #16]
 8007ad2:	041b      	lsls	r3, r3, #16
 8007ad4:	431a      	orrs	r2, r3
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	061b      	lsls	r3, r3, #24
 8007ada:	431a      	orrs	r2, r3
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	071b      	lsls	r3, r3, #28
 8007ae0:	4925      	ldr	r1, [pc, #148]	@ (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d011      	beq.n	8007b18 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	685b      	ldr	r3, [r3, #4]
 8007af8:	019a      	lsls	r2, r3, #6
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	691b      	ldr	r3, [r3, #16]
 8007afe:	041b      	lsls	r3, r3, #16
 8007b00:	431a      	orrs	r2, r3
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	68db      	ldr	r3, [r3, #12]
 8007b06:	061b      	lsls	r3, r3, #24
 8007b08:	431a      	orrs	r2, r3
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	689b      	ldr	r3, [r3, #8]
 8007b0e:	071b      	lsls	r3, r3, #28
 8007b10:	4919      	ldr	r1, [pc, #100]	@ (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007b12:	4313      	orrs	r3, r2
 8007b14:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007b18:	4b17      	ldr	r3, [pc, #92]	@ (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4a16      	ldr	r2, [pc, #88]	@ (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007b1e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007b22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b24:	f7fd f87e 	bl	8004c24 <HAL_GetTick>
 8007b28:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007b2a:	e008      	b.n	8007b3e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007b2c:	f7fd f87a 	bl	8004c24 <HAL_GetTick>
 8007b30:	4602      	mov	r2, r0
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	1ad3      	subs	r3, r2, r3
 8007b36:	2b64      	cmp	r3, #100	@ 0x64
 8007b38:	d901      	bls.n	8007b3e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007b3a:	2303      	movs	r3, #3
 8007b3c:	e0d7      	b.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007b3e:	4b0e      	ldr	r3, [pc, #56]	@ (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d0f0      	beq.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007b4a:	69bb      	ldr	r3, [r7, #24]
 8007b4c:	2b01      	cmp	r3, #1
 8007b4e:	f040 80cd 	bne.w	8007cec <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007b52:	4b09      	ldr	r3, [pc, #36]	@ (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4a08      	ldr	r2, [pc, #32]	@ (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007b58:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007b5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b5e:	f7fd f861 	bl	8004c24 <HAL_GetTick>
 8007b62:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007b64:	e00a      	b.n	8007b7c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007b66:	f7fd f85d 	bl	8004c24 <HAL_GetTick>
 8007b6a:	4602      	mov	r2, r0
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	1ad3      	subs	r3, r2, r3
 8007b70:	2b64      	cmp	r3, #100	@ 0x64
 8007b72:	d903      	bls.n	8007b7c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007b74:	2303      	movs	r3, #3
 8007b76:	e0ba      	b.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8007b78:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007b7c:	4b5e      	ldr	r3, [pc, #376]	@ (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007b84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b88:	d0ed      	beq.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d003      	beq.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d009      	beq.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d02e      	beq.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d12a      	bne.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007bb2:	4b51      	ldr	r3, [pc, #324]	@ (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007bb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bb8:	0c1b      	lsrs	r3, r3, #16
 8007bba:	f003 0303 	and.w	r3, r3, #3
 8007bbe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007bc0:	4b4d      	ldr	r3, [pc, #308]	@ (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bc6:	0f1b      	lsrs	r3, r3, #28
 8007bc8:	f003 0307 	and.w	r3, r3, #7
 8007bcc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	695b      	ldr	r3, [r3, #20]
 8007bd2:	019a      	lsls	r2, r3, #6
 8007bd4:	693b      	ldr	r3, [r7, #16]
 8007bd6:	041b      	lsls	r3, r3, #16
 8007bd8:	431a      	orrs	r2, r3
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	699b      	ldr	r3, [r3, #24]
 8007bde:	061b      	lsls	r3, r3, #24
 8007be0:	431a      	orrs	r2, r3
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	071b      	lsls	r3, r3, #28
 8007be6:	4944      	ldr	r1, [pc, #272]	@ (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007be8:	4313      	orrs	r3, r2
 8007bea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007bee:	4b42      	ldr	r3, [pc, #264]	@ (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007bf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007bf4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bfc:	3b01      	subs	r3, #1
 8007bfe:	021b      	lsls	r3, r3, #8
 8007c00:	493d      	ldr	r1, [pc, #244]	@ (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007c02:	4313      	orrs	r3, r2
 8007c04:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d022      	beq.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007c18:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007c1c:	d11d      	bne.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007c1e:	4b36      	ldr	r3, [pc, #216]	@ (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c24:	0e1b      	lsrs	r3, r3, #24
 8007c26:	f003 030f 	and.w	r3, r3, #15
 8007c2a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007c2c:	4b32      	ldr	r3, [pc, #200]	@ (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c32:	0f1b      	lsrs	r3, r3, #28
 8007c34:	f003 0307 	and.w	r3, r3, #7
 8007c38:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	695b      	ldr	r3, [r3, #20]
 8007c3e:	019a      	lsls	r2, r3, #6
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6a1b      	ldr	r3, [r3, #32]
 8007c44:	041b      	lsls	r3, r3, #16
 8007c46:	431a      	orrs	r2, r3
 8007c48:	693b      	ldr	r3, [r7, #16]
 8007c4a:	061b      	lsls	r3, r3, #24
 8007c4c:	431a      	orrs	r2, r3
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	071b      	lsls	r3, r3, #28
 8007c52:	4929      	ldr	r1, [pc, #164]	@ (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007c54:	4313      	orrs	r3, r2
 8007c56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f003 0308 	and.w	r3, r3, #8
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d028      	beq.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007c66:	4b24      	ldr	r3, [pc, #144]	@ (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c6c:	0e1b      	lsrs	r3, r3, #24
 8007c6e:	f003 030f 	and.w	r3, r3, #15
 8007c72:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007c74:	4b20      	ldr	r3, [pc, #128]	@ (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c7a:	0c1b      	lsrs	r3, r3, #16
 8007c7c:	f003 0303 	and.w	r3, r3, #3
 8007c80:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	695b      	ldr	r3, [r3, #20]
 8007c86:	019a      	lsls	r2, r3, #6
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	041b      	lsls	r3, r3, #16
 8007c8c:	431a      	orrs	r2, r3
 8007c8e:	693b      	ldr	r3, [r7, #16]
 8007c90:	061b      	lsls	r3, r3, #24
 8007c92:	431a      	orrs	r2, r3
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	69db      	ldr	r3, [r3, #28]
 8007c98:	071b      	lsls	r3, r3, #28
 8007c9a:	4917      	ldr	r1, [pc, #92]	@ (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007ca2:	4b15      	ldr	r3, [pc, #84]	@ (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007ca4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007ca8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cb0:	4911      	ldr	r1, [pc, #68]	@ (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007cb2:	4313      	orrs	r3, r2
 8007cb4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007cb8:	4b0f      	ldr	r3, [pc, #60]	@ (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4a0e      	ldr	r2, [pc, #56]	@ (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007cbe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007cc2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007cc4:	f7fc ffae 	bl	8004c24 <HAL_GetTick>
 8007cc8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007cca:	e008      	b.n	8007cde <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007ccc:	f7fc ffaa 	bl	8004c24 <HAL_GetTick>
 8007cd0:	4602      	mov	r2, r0
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	1ad3      	subs	r3, r2, r3
 8007cd6:	2b64      	cmp	r3, #100	@ 0x64
 8007cd8:	d901      	bls.n	8007cde <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007cda:	2303      	movs	r3, #3
 8007cdc:	e007      	b.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007cde:	4b06      	ldr	r3, [pc, #24]	@ (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007ce6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007cea:	d1ef      	bne.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8007cec:	2300      	movs	r3, #0
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3720      	adds	r7, #32
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}
 8007cf6:	bf00      	nop
 8007cf8:	40023800 	.word	0x40023800

08007cfc <HAL_RCCEx_GetPeriphCLKConfig>:
  *         RCC configuration registers.
  * @param  PeriphClkInit pointer to the configured RCC_PeriphCLKInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b085      	sub	sp, #20
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0;
 8007d04:	2300      	movs	r3, #0
 8007d06:	60fb      	str	r3, [r7, #12]
                                        RCC_PERIPHCLK_USART6   | RCC_PERIPHCLK_UART7    |\
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48    | RCC_PERIPHCLK_SDMMC2   |\
                                        RCC_PERIPHCLK_DFSDM1   | RCC_PERIPHCLK_DFSDM1_AUDIO;
#else
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	4a80      	ldr	r2, [pc, #512]	@ (8007f0c <HAL_RCCEx_GetPeriphCLKConfig+0x210>)
 8007d0c:	601a      	str	r2, [r3, #0]
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8007d0e:	4b80      	ldr	r3, [pc, #512]	@ (8007f10 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007d10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d14:	099b      	lsrs	r3, r3, #6
 8007d16:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007d1e:	4b7c      	ldr	r3, [pc, #496]	@ (8007f10 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007d20:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d24:	0c1b      	lsrs	r3, r3, #16
 8007d26:	f003 0203 	and.w	r2, r3, #3
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007d2e:	4b78      	ldr	r3, [pc, #480]	@ (8007f10 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007d30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d34:	0e1b      	lsrs	r3, r3, #24
 8007d36:	f003 020f 	and.w	r2, r3, #15
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007d3e:	4b74      	ldr	r3, [pc, #464]	@ (8007f10 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007d40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d44:	0f1b      	lsrs	r3, r3, #28
 8007d46:	f003 0207 	and.w	r2, r3, #7
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	609a      	str	r2, [r3, #8]

  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLSAICFGR_PLLSAIN_Pos);
 8007d4e:	4b70      	ldr	r3, [pc, #448]	@ (8007f10 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d54:	099b      	lsrs	r3, r3, #6
 8007d56:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007d5e:	4b6c      	ldr	r3, [pc, #432]	@ (8007f10 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007d60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d64:	0c1b      	lsrs	r3, r3, #16
 8007d66:	f003 0203 	and.w	r2, r3, #3
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	621a      	str	r2, [r3, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007d6e:	4b68      	ldr	r3, [pc, #416]	@ (8007f10 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d74:	0e1b      	lsrs	r3, r3, #24
 8007d76:	f003 020f 	and.w	r2, r3, #15
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	619a      	str	r2, [r3, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007d7e:	4b64      	ldr	r3, [pc, #400]	@ (8007f10 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d84:	0f1b      	lsrs	r3, r3, #28
 8007d86:	f003 0207 	and.w	r2, r3, #7
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	61da      	str	r2, [r3, #28]

  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> RCC_DCKCFGR1_PLLI2SDIVQ_Pos);
 8007d8e:	4b60      	ldr	r3, [pc, #384]	@ (8007f10 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007d90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007d94:	f003 021f 	and.w	r2, r3, #31
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	625a      	str	r2, [r3, #36]	@ 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> RCC_DCKCFGR1_PLLSAIDIVQ_Pos);
 8007d9c:	4b5c      	ldr	r3, [pc, #368]	@ (8007f10 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007d9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007da2:	0a1b      	lsrs	r3, r3, #8
 8007da4:	f003 021f 	and.w	r2, r3, #31
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	629a      	str	r2, [r3, #40]	@ 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> RCC_DCKCFGR1_PLLSAIDIVR_Pos);
 8007dac:	4b58      	ldr	r3, [pc, #352]	@ (8007f10 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007dae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007db2:	0c1b      	lsrs	r3, r3, #16
 8007db4:	f003 0203 	and.w	r2, r3, #3
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 8007dbc:	4b54      	ldr	r3, [pc, #336]	@ (8007f10 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007dbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007dc2:	f403 1240 	and.w	r2, r3, #3145728	@ 0x300000
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 8007dca:	4b51      	ldr	r3, [pc, #324]	@ (8007f10 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007dcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007dd0:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
 8007dd8:	4b4d      	ldr	r3, [pc, #308]	@ (8007f10 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007dda:	689b      	ldr	r3, [r3, #8]
 8007ddc:	f403 0200 	and.w	r2, r3, #8388608	@ 0x800000
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 8007de4:	4b4a      	ldr	r3, [pc, #296]	@ (8007f10 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007dea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
 8007df2:	4b47      	ldr	r3, [pc, #284]	@ (8007f10 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007df8:	f403 2240 	and.w	r2, r3, #786432	@ 0xc0000
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
 8007e00:	4b43      	ldr	r3, [pc, #268]	@ (8007f10 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e06:	f403 1240 	and.w	r2, r3, #3145728	@ 0x300000
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
 8007e0e:	4b40      	ldr	r3, [pc, #256]	@ (8007f10 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e14:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 8007e1c:	4b3c      	ldr	r3, [pc, #240]	@ (8007f10 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e22:	f003 0203 	and.w	r2, r3, #3
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 8007e2a:	4b39      	ldr	r3, [pc, #228]	@ (8007f10 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e30:	f003 020c 	and.w	r2, r3, #12
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 8007e38:	4b35      	ldr	r3, [pc, #212]	@ (8007f10 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e3e:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
 8007e46:	4b32      	ldr	r3, [pc, #200]	@ (8007f10 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e4c:	f003 02c0 	and.w	r2, r3, #192	@ 0xc0
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
 8007e54:	4b2e      	ldr	r3, [pc, #184]	@ (8007f10 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e5a:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
 8007e62:	4b2b      	ldr	r3, [pc, #172]	@ (8007f10 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e68:	f403 6240 	and.w	r2, r3, #3072	@ 0xc00
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
 8007e70:	4b27      	ldr	r3, [pc, #156]	@ (8007f10 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e76:	f403 5240 	and.w	r2, r3, #12288	@ 0x3000
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
 8007e7e:	4b24      	ldr	r3, [pc, #144]	@ (8007f10 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e84:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 8007e8c:	4b20      	ldr	r3, [pc, #128]	@ (8007f10 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e92:	f003 7240 	and.w	r2, r3, #50331648	@ 0x3000000
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 8007e9a:	4b1d      	ldr	r3, [pc, #116]	@ (8007f10 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ea0:	f003 6280 	and.w	r2, r3, #67108864	@ 0x4000000
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 8007ea8:	4b19      	ldr	r3, [pc, #100]	@ (8007f10 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007eae:	f003 6200 	and.w	r2, r3, #134217728	@ 0x8000000
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
 8007eb6:	4b16      	ldr	r3, [pc, #88]	@ (8007f10 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ebc:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8007ec6:	4b12      	ldr	r3, [pc, #72]	@ (8007f10 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007ec8:	689b      	ldr	r3, [r3, #8]
 8007eca:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8007ece:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8007ed0:	4b0f      	ldr	r3, [pc, #60]	@ (8007f10 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007ed2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ed4:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	431a      	orrs	r2, r3
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
 8007ee0:	4b0b      	ldr	r3, [pc, #44]	@ (8007f10 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8007ee2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007ee6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d103      	bne.n	8007ef6 <HAL_RCCEx_GetPeriphCLKConfig+0x1fa>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 8007ef4:	e003      	b.n	8007efe <HAL_RCCEx_GetPeriphCLKConfig+0x202>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007efc:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8007efe:	bf00      	nop
 8007f00:	3714      	adds	r7, #20
 8007f02:	46bd      	mov	sp, r7
 8007f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f08:	4770      	bx	lr
 8007f0a:	bf00      	nop
 8007f0c:	00fffff1 	.word	0x00fffff1
 8007f10:	40023800 	.word	0x40023800

08007f14 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007f14:	b480      	push	{r7}
 8007f16:	b087      	sub	sp, #28
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8007f20:	2300      	movs	r3, #0
 8007f22:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8007f24:	2300      	movs	r3, #0
 8007f26:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007f32:	f040 808d 	bne.w	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 8007f36:	4b93      	ldr	r3, [pc, #588]	@ (8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007f38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007f3c:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8007f44:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007f4c:	d07c      	beq.n	8008048 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007f54:	d87b      	bhi.n	800804e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d004      	beq.n	8007f66 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f62:	d039      	beq.n	8007fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8007f64:	e073      	b.n	800804e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007f66:	4b87      	ldr	r3, [pc, #540]	@ (8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007f68:	685b      	ldr	r3, [r3, #4]
 8007f6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d108      	bne.n	8007f84 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007f72:	4b84      	ldr	r3, [pc, #528]	@ (8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007f74:	685b      	ldr	r3, [r3, #4]
 8007f76:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007f7a:	4a83      	ldr	r2, [pc, #524]	@ (8008188 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8007f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f80:	613b      	str	r3, [r7, #16]
 8007f82:	e007      	b.n	8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007f84:	4b7f      	ldr	r3, [pc, #508]	@ (8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007f86:	685b      	ldr	r3, [r3, #4]
 8007f88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007f8c:	4a7f      	ldr	r2, [pc, #508]	@ (800818c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f92:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8007f94:	4b7b      	ldr	r3, [pc, #492]	@ (8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f9a:	0e1b      	lsrs	r3, r3, #24
 8007f9c:	f003 030f 	and.w	r3, r3, #15
 8007fa0:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8007fa2:	4b78      	ldr	r3, [pc, #480]	@ (8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007fa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fa8:	099b      	lsrs	r3, r3, #6
 8007faa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fae:	693a      	ldr	r2, [r7, #16]
 8007fb0:	fb03 f202 	mul.w	r2, r3, r2
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fba:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8007fbc:	4b71      	ldr	r3, [pc, #452]	@ (8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007fbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007fc2:	0a1b      	lsrs	r3, r3, #8
 8007fc4:	f003 031f 	and.w	r3, r3, #31
 8007fc8:	3301      	adds	r3, #1
 8007fca:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007fcc:	697a      	ldr	r2, [r7, #20]
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fd4:	617b      	str	r3, [r7, #20]
        break;
 8007fd6:	e03b      	b.n	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007fd8:	4b6a      	ldr	r3, [pc, #424]	@ (8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007fda:	685b      	ldr	r3, [r3, #4]
 8007fdc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d108      	bne.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007fe4:	4b67      	ldr	r3, [pc, #412]	@ (8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007fe6:	685b      	ldr	r3, [r3, #4]
 8007fe8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007fec:	4a66      	ldr	r2, [pc, #408]	@ (8008188 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8007fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ff2:	613b      	str	r3, [r7, #16]
 8007ff4:	e007      	b.n	8008006 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007ff6:	4b63      	ldr	r3, [pc, #396]	@ (8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007ff8:	685b      	ldr	r3, [r3, #4]
 8007ffa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007ffe:	4a63      	ldr	r2, [pc, #396]	@ (800818c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008000:	fbb2 f3f3 	udiv	r3, r2, r3
 8008004:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8008006:	4b5f      	ldr	r3, [pc, #380]	@ (8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008008:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800800c:	0e1b      	lsrs	r3, r3, #24
 800800e:	f003 030f 	and.w	r3, r3, #15
 8008012:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8008014:	4b5b      	ldr	r3, [pc, #364]	@ (8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008016:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800801a:	099b      	lsrs	r3, r3, #6
 800801c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008020:	693a      	ldr	r2, [r7, #16]
 8008022:	fb03 f202 	mul.w	r2, r3, r2
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	fbb2 f3f3 	udiv	r3, r2, r3
 800802c:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800802e:	4b55      	ldr	r3, [pc, #340]	@ (8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008030:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008034:	f003 031f 	and.w	r3, r3, #31
 8008038:	3301      	adds	r3, #1
 800803a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800803c:	697a      	ldr	r2, [r7, #20]
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	fbb2 f3f3 	udiv	r3, r2, r3
 8008044:	617b      	str	r3, [r7, #20]
        break;
 8008046:	e003      	b.n	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 8008048:	4b51      	ldr	r3, [pc, #324]	@ (8008190 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800804a:	617b      	str	r3, [r7, #20]
        break;
 800804c:	e000      	b.n	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 800804e:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008056:	f040 808d 	bne.w	8008174 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 800805a:	4b4a      	ldr	r3, [pc, #296]	@ (8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800805c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008060:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8008068:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008070:	d07c      	beq.n	800816c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8008072:	68bb      	ldr	r3, [r7, #8]
 8008074:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008078:	d87b      	bhi.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d004      	beq.n	800808a <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008086:	d039      	beq.n	80080fc <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8008088:	e073      	b.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800808a:	4b3e      	ldr	r3, [pc, #248]	@ (8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800808c:	685b      	ldr	r3, [r3, #4]
 800808e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008092:	2b00      	cmp	r3, #0
 8008094:	d108      	bne.n	80080a8 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008096:	4b3b      	ldr	r3, [pc, #236]	@ (8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008098:	685b      	ldr	r3, [r3, #4]
 800809a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800809e:	4a3a      	ldr	r2, [pc, #232]	@ (8008188 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80080a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80080a4:	613b      	str	r3, [r7, #16]
 80080a6:	e007      	b.n	80080b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80080a8:	4b36      	ldr	r3, [pc, #216]	@ (8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80080aa:	685b      	ldr	r3, [r3, #4]
 80080ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80080b0:	4a36      	ldr	r2, [pc, #216]	@ (800818c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80080b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80080b6:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80080b8:	4b32      	ldr	r3, [pc, #200]	@ (8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80080ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080be:	0e1b      	lsrs	r3, r3, #24
 80080c0:	f003 030f 	and.w	r3, r3, #15
 80080c4:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80080c6:	4b2f      	ldr	r3, [pc, #188]	@ (8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80080c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080cc:	099b      	lsrs	r3, r3, #6
 80080ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080d2:	693a      	ldr	r2, [r7, #16]
 80080d4:	fb03 f202 	mul.w	r2, r3, r2
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	fbb2 f3f3 	udiv	r3, r2, r3
 80080de:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80080e0:	4b28      	ldr	r3, [pc, #160]	@ (8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80080e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80080e6:	0a1b      	lsrs	r3, r3, #8
 80080e8:	f003 031f 	and.w	r3, r3, #31
 80080ec:	3301      	adds	r3, #1
 80080ee:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80080f0:	697a      	ldr	r2, [r7, #20]
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80080f8:	617b      	str	r3, [r7, #20]
        break;
 80080fa:	e03b      	b.n	8008174 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80080fc:	4b21      	ldr	r3, [pc, #132]	@ (8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008104:	2b00      	cmp	r3, #0
 8008106:	d108      	bne.n	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008108:	4b1e      	ldr	r3, [pc, #120]	@ (8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800810a:	685b      	ldr	r3, [r3, #4]
 800810c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008110:	4a1d      	ldr	r2, [pc, #116]	@ (8008188 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8008112:	fbb2 f3f3 	udiv	r3, r2, r3
 8008116:	613b      	str	r3, [r7, #16]
 8008118:	e007      	b.n	800812a <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800811a:	4b1a      	ldr	r3, [pc, #104]	@ (8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800811c:	685b      	ldr	r3, [r3, #4]
 800811e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008122:	4a1a      	ldr	r2, [pc, #104]	@ (800818c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008124:	fbb2 f3f3 	udiv	r3, r2, r3
 8008128:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800812a:	4b16      	ldr	r3, [pc, #88]	@ (8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800812c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008130:	0e1b      	lsrs	r3, r3, #24
 8008132:	f003 030f 	and.w	r3, r3, #15
 8008136:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8008138:	4b12      	ldr	r3, [pc, #72]	@ (8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800813a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800813e:	099b      	lsrs	r3, r3, #6
 8008140:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008144:	693a      	ldr	r2, [r7, #16]
 8008146:	fb03 f202 	mul.w	r2, r3, r2
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008150:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8008152:	4b0c      	ldr	r3, [pc, #48]	@ (8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008154:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008158:	f003 031f 	and.w	r3, r3, #31
 800815c:	3301      	adds	r3, #1
 800815e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008160:	697a      	ldr	r2, [r7, #20]
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	fbb2 f3f3 	udiv	r3, r2, r3
 8008168:	617b      	str	r3, [r7, #20]
        break;
 800816a:	e003      	b.n	8008174 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 800816c:	4b08      	ldr	r3, [pc, #32]	@ (8008190 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800816e:	617b      	str	r3, [r7, #20]
        break;
 8008170:	e000      	b.n	8008174 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 8008172:	bf00      	nop
      }
    }
  }

  return frequency;
 8008174:	697b      	ldr	r3, [r7, #20]
}
 8008176:	4618      	mov	r0, r3
 8008178:	371c      	adds	r7, #28
 800817a:	46bd      	mov	sp, r7
 800817c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008180:	4770      	bx	lr
 8008182:	bf00      	nop
 8008184:	40023800 	.word	0x40023800
 8008188:	00f42400 	.word	0x00f42400
 800818c:	017d7840 	.word	0x017d7840
 8008190:	00bb8000 	.word	0x00bb8000

08008194 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b088      	sub	sp, #32
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800819c:	2300      	movs	r3, #0
 800819e:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 80081a0:	2300      	movs	r3, #0
 80081a2:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 80081a4:	2300      	movs	r3, #0
 80081a6:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d101      	bne.n	80081b2 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 80081ae:	2301      	movs	r3, #1
 80081b0:	e156      	b.n	8008460 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80081b8:	b2db      	uxtb	r3, r3
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d106      	bne.n	80081cc <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2200      	movs	r2, #0
 80081c2:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f7fa f804 	bl	80021d4 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2202      	movs	r2, #2
 80081d0:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f000 fad5 	bl	8008784 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	68db      	ldr	r3, [r3, #12]
 80081de:	2b02      	cmp	r3, #2
 80081e0:	d00c      	beq.n	80081fc <HAL_SAI_Init+0x68>
 80081e2:	2b02      	cmp	r3, #2
 80081e4:	d80d      	bhi.n	8008202 <HAL_SAI_Init+0x6e>
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d002      	beq.n	80081f0 <HAL_SAI_Init+0x5c>
 80081ea:	2b01      	cmp	r3, #1
 80081ec:	d003      	beq.n	80081f6 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 80081ee:	e008      	b.n	8008202 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 80081f0:	2300      	movs	r3, #0
 80081f2:	61fb      	str	r3, [r7, #28]
      break;
 80081f4:	e006      	b.n	8008204 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80081f6:	2310      	movs	r3, #16
 80081f8:	61fb      	str	r3, [r7, #28]
      break;
 80081fa:	e003      	b.n	8008204 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80081fc:	2320      	movs	r3, #32
 80081fe:	61fb      	str	r3, [r7, #28]
      break;
 8008200:	e000      	b.n	8008204 <HAL_SAI_Init+0x70>
      break;
 8008202:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	689b      	ldr	r3, [r3, #8]
 8008208:	2b03      	cmp	r3, #3
 800820a:	d81e      	bhi.n	800824a <HAL_SAI_Init+0xb6>
 800820c:	a201      	add	r2, pc, #4	@ (adr r2, 8008214 <HAL_SAI_Init+0x80>)
 800820e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008212:	bf00      	nop
 8008214:	08008225 	.word	0x08008225
 8008218:	0800822b 	.word	0x0800822b
 800821c:	08008233 	.word	0x08008233
 8008220:	0800823b 	.word	0x0800823b
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 8008224:	2300      	movs	r3, #0
 8008226:	617b      	str	r3, [r7, #20]
    }
    break;
 8008228:	e010      	b.n	800824c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800822a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800822e:	617b      	str	r3, [r7, #20]
    }
    break;
 8008230:	e00c      	b.n	800824c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8008232:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008236:	617b      	str	r3, [r7, #20]
    }
    break;
 8008238:	e008      	b.n	800824c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800823a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800823e:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8008240:	69fb      	ldr	r3, [r7, #28]
 8008242:	f043 0301 	orr.w	r3, r3, #1
 8008246:	61fb      	str	r3, [r7, #28]
    }
    break;
 8008248:	e000      	b.n	800824c <HAL_SAI_Init+0xb8>
    default:
      break;
 800824a:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4a85      	ldr	r2, [pc, #532]	@ (8008468 <HAL_SAI_Init+0x2d4>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d004      	beq.n	8008260 <HAL_SAI_Init+0xcc>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	4a84      	ldr	r2, [pc, #528]	@ (800846c <HAL_SAI_Init+0x2d8>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d103      	bne.n	8008268 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8008260:	4a83      	ldr	r2, [pc, #524]	@ (8008470 <HAL_SAI_Init+0x2dc>)
 8008262:	69fb      	ldr	r3, [r7, #28]
 8008264:	6013      	str	r3, [r2, #0]
 8008266:	e002      	b.n	800826e <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8008268:	4a82      	ldr	r2, [pc, #520]	@ (8008474 <HAL_SAI_Init+0x2e0>)
 800826a:	69fb      	ldr	r3, [r7, #28]
 800826c:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	69db      	ldr	r3, [r3, #28]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d04c      	beq.n	8008310 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 8008276:	2300      	movs	r3, #0
 8008278:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4a7a      	ldr	r2, [pc, #488]	@ (8008468 <HAL_SAI_Init+0x2d4>)
 8008280:	4293      	cmp	r3, r2
 8008282:	d004      	beq.n	800828e <HAL_SAI_Init+0xfa>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4a78      	ldr	r2, [pc, #480]	@ (800846c <HAL_SAI_Init+0x2d8>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d104      	bne.n	8008298 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800828e:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8008292:	f7ff fe3f 	bl	8007f14 <HAL_RCCEx_GetPeriphCLKFreq>
 8008296:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	4a76      	ldr	r2, [pc, #472]	@ (8008478 <HAL_SAI_Init+0x2e4>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d004      	beq.n	80082ac <HAL_SAI_Init+0x118>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	4a75      	ldr	r2, [pc, #468]	@ (800847c <HAL_SAI_Init+0x2e8>)
 80082a8:	4293      	cmp	r3, r2
 80082aa:	d104      	bne.n	80082b6 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80082ac:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80082b0:	f7ff fe30 	bl	8007f14 <HAL_RCCEx_GetPeriphCLKFreq>
 80082b4:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 80082b6:	693a      	ldr	r2, [r7, #16]
 80082b8:	4613      	mov	r3, r2
 80082ba:	009b      	lsls	r3, r3, #2
 80082bc:	4413      	add	r3, r2
 80082be:	005b      	lsls	r3, r3, #1
 80082c0:	461a      	mov	r2, r3
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	69db      	ldr	r3, [r3, #28]
 80082c6:	025b      	lsls	r3, r3, #9
 80082c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80082cc:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	4a6b      	ldr	r2, [pc, #428]	@ (8008480 <HAL_SAI_Init+0x2ec>)
 80082d2:	fba2 2303 	umull	r2, r3, r2, r3
 80082d6:	08da      	lsrs	r2, r3, #3
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 80082dc:	68f9      	ldr	r1, [r7, #12]
 80082de:	4b68      	ldr	r3, [pc, #416]	@ (8008480 <HAL_SAI_Init+0x2ec>)
 80082e0:	fba3 2301 	umull	r2, r3, r3, r1
 80082e4:	08da      	lsrs	r2, r3, #3
 80082e6:	4613      	mov	r3, r2
 80082e8:	009b      	lsls	r3, r3, #2
 80082ea:	4413      	add	r3, r2
 80082ec:	005b      	lsls	r3, r3, #1
 80082ee:	1aca      	subs	r2, r1, r3
 80082f0:	2a08      	cmp	r2, #8
 80082f2:	d904      	bls.n	80082fe <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6a1b      	ldr	r3, [r3, #32]
 80082f8:	1c5a      	adds	r2, r3, #1
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008302:	2b04      	cmp	r3, #4
 8008304:	d104      	bne.n	8008310 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6a1b      	ldr	r3, [r3, #32]
 800830a:	085a      	lsrs	r2, r3, #1
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	685b      	ldr	r3, [r3, #4]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d003      	beq.n	8008320 <HAL_SAI_Init+0x18c>
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	685b      	ldr	r3, [r3, #4]
 800831c:	2b02      	cmp	r3, #2
 800831e:	d109      	bne.n	8008334 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008324:	2b01      	cmp	r3, #1
 8008326:	d101      	bne.n	800832c <HAL_SAI_Init+0x198>
 8008328:	2300      	movs	r3, #0
 800832a:	e001      	b.n	8008330 <HAL_SAI_Init+0x19c>
 800832c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008330:	61bb      	str	r3, [r7, #24]
 8008332:	e008      	b.n	8008346 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008338:	2b01      	cmp	r3, #1
 800833a:	d102      	bne.n	8008342 <HAL_SAI_Init+0x1ae>
 800833c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008340:	e000      	b.n	8008344 <HAL_SAI_Init+0x1b0>
 8008342:	2300      	movs	r3, #0
 8008344:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	6819      	ldr	r1, [r3, #0]
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681a      	ldr	r2, [r3, #0]
 8008350:	4b4c      	ldr	r3, [pc, #304]	@ (8008484 <HAL_SAI_Init+0x2f0>)
 8008352:	400b      	ands	r3, r1
 8008354:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	6819      	ldr	r1, [r3, #0]
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	685a      	ldr	r2, [r3, #4]
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008364:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800836a:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008370:	431a      	orrs	r2, r3
 8008372:	69bb      	ldr	r3, [r7, #24]
 8008374:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 8008376:	697b      	ldr	r3, [r7, #20]
 8008378:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                               \
 800837e:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	691b      	ldr	r3, [r3, #16]
 8008384:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800838a:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6a1b      	ldr	r3, [r3, #32]
 8008390:	051b      	lsls	r3, r3, #20
 8008392:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	430a      	orrs	r2, r1
 800839a:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	6859      	ldr	r1, [r3, #4]
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681a      	ldr	r2, [r3, #0]
 80083a6:	4b38      	ldr	r3, [pc, #224]	@ (8008488 <HAL_SAI_Init+0x2f4>)
 80083a8:	400b      	ands	r3, r1
 80083aa:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	6859      	ldr	r1, [r3, #4]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	699a      	ldr	r2, [r3, #24]
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083ba:	431a      	orrs	r2, r3
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083c0:	431a      	orrs	r2, r3
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	430a      	orrs	r2, r1
 80083c8:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	6899      	ldr	r1, [r3, #8]
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681a      	ldr	r2, [r3, #0]
 80083d4:	4b2d      	ldr	r3, [pc, #180]	@ (800848c <HAL_SAI_Init+0x2f8>)
 80083d6:	400b      	ands	r3, r1
 80083d8:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	6899      	ldr	r1, [r3, #8]
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083e4:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80083ea:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 80083f0:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 80083f6:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083fc:	3b01      	subs	r3, #1
 80083fe:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8008400:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	430a      	orrs	r2, r1
 8008408:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	68d9      	ldr	r1, [r3, #12]
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681a      	ldr	r2, [r3, #0]
 8008414:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8008418:	400b      	ands	r3, r1
 800841a:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	68d9      	ldr	r1, [r3, #12]
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800842a:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008430:	041b      	lsls	r3, r3, #16
 8008432:	431a      	orrs	r2, r3
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008438:	3b01      	subs	r3, #1
 800843a:	021b      	lsls	r3, r3, #8
 800843c:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	430a      	orrs	r2, r1
 8008444:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2200      	movs	r2, #0
 800844a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2201      	movs	r2, #1
 8008452:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2200      	movs	r2, #0
 800845a:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 800845e:	2300      	movs	r3, #0
}
 8008460:	4618      	mov	r0, r3
 8008462:	3720      	adds	r7, #32
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}
 8008468:	40015804 	.word	0x40015804
 800846c:	40015824 	.word	0x40015824
 8008470:	40015800 	.word	0x40015800
 8008474:	40015c00 	.word	0x40015c00
 8008478:	40015c04 	.word	0x40015c04
 800847c:	40015c24 	.word	0x40015c24
 8008480:	cccccccd 	.word	0xcccccccd
 8008484:	ff05c010 	.word	0xff05c010
 8008488:	ffff1ff0 	.word	0xffff1ff0
 800848c:	fff88000 	.word	0xfff88000

08008490 <HAL_SAI_DeInit>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DeInit(SAI_HandleTypeDef *hsai)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b082      	sub	sp, #8
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d101      	bne.n	80084a2 <HAL_SAI_DeInit+0x12>
  {
    return HAL_ERROR;
 800849e:	2301      	movs	r3, #1
 80084a0:	e027      	b.n	80084f2 <HAL_SAI_DeInit+0x62>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2202      	movs	r2, #2
 80084a6:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	2200      	movs	r2, #0
 80084b0:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f04f 32ff 	mov.w	r2, #4294967295
 80084ba:	619a      	str	r2, [r3, #24]

  /* Disable the SAI */
  SAI_Disable(hsai);
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f000 f961 	bl	8008784 <SAI_Disable>

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	685a      	ldr	r2, [r3, #4]
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f042 0208 	orr.w	r2, r2, #8
 80084d0:	605a      	str	r2, [r3, #4]
  {
    hsai->MspDeInitCallback = HAL_SAI_MspDeInit;
  }
  hsai->MspDeInitCallback(hsai);
#else
  HAL_SAI_MspDeInit(hsai);
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f7f9 ff1a 	bl	800230c <HAL_SAI_MspDeInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2200      	movs	r2, #0
 80084dc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_RESET;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2200      	movs	r2, #0
 80084e4:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2200      	movs	r2, #0
 80084ec:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 80084f0:	2300      	movs	r3, #0
}
 80084f2:	4618      	mov	r0, r3
 80084f4:	3708      	adds	r7, #8
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}

080084fa <HAL_SAI_DMAStop>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DMAStop(SAI_HandleTypeDef *hsai)
{
 80084fa:	b580      	push	{r7, lr}
 80084fc:	b084      	sub	sp, #16
 80084fe:	af00      	add	r7, sp, #0
 8008500:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008502:	2300      	movs	r3, #0
 8008504:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800850c:	2b01      	cmp	r3, #1
 800850e:	d101      	bne.n	8008514 <HAL_SAI_DMAStop+0x1a>
 8008510:	2302      	movs	r3, #2
 8008512:	e061      	b.n	80085d8 <HAL_SAI_DMAStop+0xde>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2201      	movs	r2, #1
 8008518:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  /* Disable SAI peripheral */
  SAI_Disable(hsai);
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	f000 f931 	bl	8008784 <SAI_Disable>

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	681a      	ldr	r2, [r3, #0]
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8008530:	601a      	str	r2, [r3, #0]

  /* Abort the SAI Tx DMA Stream */
  if ((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008536:	2b00      	cmp	r3, #0
 8008538:	d01c      	beq.n	8008574 <HAL_SAI_DMAStop+0x7a>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8008540:	b2db      	uxtb	r3, r3
 8008542:	2b12      	cmp	r3, #18
 8008544:	d116      	bne.n	8008574 <HAL_SAI_DMAStop+0x7a>
  {
    if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800854a:	4618      	mov	r0, r3
 800854c:	f7fc ff0a 	bl	8005364 <HAL_DMA_Abort>
 8008550:	4603      	mov	r3, r0
 8008552:	2b00      	cmp	r3, #0
 8008554:	d00e      	beq.n	8008574 <HAL_SAI_DMAStop+0x7a>
    {
      /* If the DMA Tx errorCode is different from DMA No Transfer then return Error */
      if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800855a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800855c:	2b80      	cmp	r3, #128	@ 0x80
 800855e:	d009      	beq.n	8008574 <HAL_SAI_DMAStop+0x7a>
      {
        status = HAL_ERROR;
 8008560:	2301      	movs	r3, #1
 8008562:	73fb      	strb	r3, [r7, #15]
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800856a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }
    }
  }

  /* Abort the SAI Rx DMA Stream */
  if ((hsai->hdmarx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_RX))
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008578:	2b00      	cmp	r3, #0
 800857a:	d01c      	beq.n	80085b6 <HAL_SAI_DMAStop+0xbc>
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8008582:	b2db      	uxtb	r3, r3
 8008584:	2b22      	cmp	r3, #34	@ 0x22
 8008586:	d116      	bne.n	80085b6 <HAL_SAI_DMAStop+0xbc>
  {
    if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800858c:	4618      	mov	r0, r3
 800858e:	f7fc fee9 	bl	8005364 <HAL_DMA_Abort>
 8008592:	4603      	mov	r3, r0
 8008594:	2b00      	cmp	r3, #0
 8008596:	d00e      	beq.n	80085b6 <HAL_SAI_DMAStop+0xbc>
    {
      /* If the DMA Rx errorCode is different from DMA No Transfer then return Error */
      if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800859c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800859e:	2b80      	cmp	r3, #128	@ 0x80
 80085a0:	d009      	beq.n	80085b6 <HAL_SAI_DMAStop+0xbc>
      {
        status = HAL_ERROR;
 80085a2:	2301      	movs	r3, #1
 80085a4:	73fb      	strb	r3, [r7, #15]
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80085ac:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }
    }
  }

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	685a      	ldr	r2, [r3, #4]
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f042 0208 	orr.w	r2, r2, #8
 80085c4:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2201      	movs	r2, #1
 80085ca:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2200      	movs	r2, #0
 80085d2:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return status;
 80085d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80085d8:	4618      	mov	r0, r3
 80085da:	3710      	adds	r7, #16
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd80      	pop	{r7, pc}

080085e0 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b084      	sub	sp, #16
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	60f8      	str	r0, [r7, #12]
 80085e8:	60b9      	str	r1, [r7, #8]
 80085ea:	4613      	mov	r3, r2
 80085ec:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0))
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d002      	beq.n	80085fa <HAL_SAI_Receive_DMA+0x1a>
 80085f4:	88fb      	ldrh	r3, [r7, #6]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d101      	bne.n	80085fe <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 80085fa:	2301      	movs	r3, #1
 80085fc:	e074      	b.n	80086e8 <HAL_SAI_Receive_DMA+0x108>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8008604:	b2db      	uxtb	r3, r3
 8008606:	2b01      	cmp	r3, #1
 8008608:	d16d      	bne.n	80086e6 <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8008610:	2b01      	cmp	r3, #1
 8008612:	d101      	bne.n	8008618 <HAL_SAI_Receive_DMA+0x38>
 8008614:	2302      	movs	r3, #2
 8008616:	e067      	b.n	80086e8 <HAL_SAI_Receive_DMA+0x108>
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	2201      	movs	r2, #1
 800861c:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    hsai->pBuffPtr = pData;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	68ba      	ldr	r2, [r7, #8]
 8008624:	665a      	str	r2, [r3, #100]	@ 0x64
    hsai->XferSize = Size;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	88fa      	ldrh	r2, [r7, #6]
 800862a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    hsai->XferCount = Size;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	88fa      	ldrh	r2, [r7, #6]
 8008632:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	2200      	movs	r2, #0
 800863a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	2222      	movs	r2, #34	@ 0x22
 8008642:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800864a:	4a29      	ldr	r2, [pc, #164]	@ (80086f0 <HAL_SAI_Receive_DMA+0x110>)
 800864c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008652:	4a28      	ldr	r2, [pc, #160]	@ (80086f4 <HAL_SAI_Receive_DMA+0x114>)
 8008654:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800865a:	4a27      	ldr	r2, [pc, #156]	@ (80086f8 <HAL_SAI_Receive_DMA+0x118>)
 800865c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008662:	2200      	movs	r2, #0
 8008664:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	331c      	adds	r3, #28
 8008670:	4619      	mov	r1, r3
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008676:	461a      	mov	r2, r3
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800867e:	f7fc fe11 	bl	80052a4 <HAL_DMA_Start_IT>
 8008682:	4603      	mov	r3, r0
 8008684:	2b00      	cmp	r3, #0
 8008686:	d005      	beq.n	8008694 <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	2200      	movs	r2, #0
 800868c:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      return  HAL_ERROR;
 8008690:	2301      	movs	r3, #1
 8008692:	e029      	b.n	80086e8 <HAL_SAI_Receive_DMA+0x108>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8008694:	2100      	movs	r1, #0
 8008696:	68f8      	ldr	r0, [r7, #12]
 8008698:	f000 f83e 	bl	8008718 <SAI_InterruptFlag>
 800869c:	4601      	mov	r1, r0
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	691a      	ldr	r2, [r3, #16]
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	430a      	orrs	r2, r1
 80086aa:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	681a      	ldr	r2, [r3, #0]
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80086ba:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d107      	bne.n	80086da <HAL_SAI_Receive_DMA+0xfa>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	681a      	ldr	r2, [r3, #0]
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80086d8:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	2200      	movs	r2, #0
 80086de:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80086e2:	2300      	movs	r3, #0
 80086e4:	e000      	b.n	80086e8 <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 80086e6:	2302      	movs	r3, #2
  }
}
 80086e8:	4618      	mov	r0, r3
 80086ea:	3710      	adds	r7, #16
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bd80      	pop	{r7, pc}
 80086f0:	08008855 	.word	0x08008855
 80086f4:	080087f5 	.word	0x080087f5
 80086f8:	08008871 	.word	0x08008871

080086fc <HAL_SAI_GetState>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL state
  */
HAL_SAI_StateTypeDef HAL_SAI_GetState(const SAI_HandleTypeDef *hsai)
{
 80086fc:	b480      	push	{r7}
 80086fe:	b083      	sub	sp, #12
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
  return hsai->State;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800870a:	b2db      	uxtb	r3, r3
}
 800870c:	4618      	mov	r0, r3
 800870e:	370c      	adds	r7, #12
 8008710:	46bd      	mov	sp, r7
 8008712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008716:	4770      	bx	lr

08008718 <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, uint32_t mode)
{
 8008718:	b480      	push	{r7}
 800871a:	b085      	sub	sp, #20
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
 8008720:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8008722:	2301      	movs	r3, #1
 8008724:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	2b01      	cmp	r3, #1
 800872a:	d103      	bne.n	8008734 <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	f043 0308 	orr.w	r3, r3, #8
 8008732:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008738:	2b08      	cmp	r3, #8
 800873a:	d10b      	bne.n	8008754 <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8008740:	2b03      	cmp	r3, #3
 8008742:	d003      	beq.n	800874c <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	685b      	ldr	r3, [r3, #4]
 8008748:	2b01      	cmp	r3, #1
 800874a:	d103      	bne.n	8008754 <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	f043 0310 	orr.w	r3, r3, #16
 8008752:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	685b      	ldr	r3, [r3, #4]
 8008758:	2b03      	cmp	r3, #3
 800875a:	d003      	beq.n	8008764 <SAI_InterruptFlag+0x4c>
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	685b      	ldr	r3, [r3, #4]
 8008760:	2b02      	cmp	r3, #2
 8008762:	d104      	bne.n	800876e <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800876a:	60fb      	str	r3, [r7, #12]
 800876c:	e003      	b.n	8008776 <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	f043 0304 	orr.w	r3, r3, #4
 8008774:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8008776:	68fb      	ldr	r3, [r7, #12]
}
 8008778:	4618      	mov	r0, r3
 800877a:	3714      	adds	r7, #20
 800877c:	46bd      	mov	sp, r7
 800877e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008782:	4770      	bx	lr

08008784 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8008784:	b480      	push	{r7}
 8008786:	b085      	sub	sp, #20
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 800878c:	4b17      	ldr	r3, [pc, #92]	@ (80087ec <SAI_Disable+0x68>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	4a17      	ldr	r2, [pc, #92]	@ (80087f0 <SAI_Disable+0x6c>)
 8008792:	fba2 2303 	umull	r2, r3, r2, r3
 8008796:	0b1b      	lsrs	r3, r3, #12
 8008798:	009b      	lsls	r3, r3, #2
 800879a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800879c:	2300      	movs	r3, #0
 800879e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	681a      	ldr	r2, [r3, #0]
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80087ae:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	1e5a      	subs	r2, r3, #1
 80087b4:	60fa      	str	r2, [r7, #12]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d10a      	bne.n	80087d0 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087c0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 80087ca:	2303      	movs	r3, #3
 80087cc:	72fb      	strb	r3, [r7, #11]
      break;
 80087ce:	e006      	b.n	80087de <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d1e8      	bne.n	80087b0 <SAI_Disable+0x2c>

  return status;
 80087de:	7afb      	ldrb	r3, [r7, #11]
}
 80087e0:	4618      	mov	r0, r3
 80087e2:	3714      	adds	r7, #20
 80087e4:	46bd      	mov	sp, r7
 80087e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ea:	4770      	bx	lr
 80087ec:	2000001c 	.word	0x2000001c
 80087f0:	95cbec1b 	.word	0x95cbec1b

080087f4 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b084      	sub	sp, #16
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008800:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	69db      	ldr	r3, [r3, #28]
 8008806:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800880a:	d01c      	beq.n	8008846 <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	681a      	ldr	r2, [r3, #0]
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800881a:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	2200      	movs	r2, #0
 8008820:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8008824:	2100      	movs	r1, #0
 8008826:	68f8      	ldr	r0, [r7, #12]
 8008828:	f7ff ff76 	bl	8008718 <SAI_InterruptFlag>
 800882c:	4603      	mov	r3, r0
 800882e:	43d9      	mvns	r1, r3
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	691a      	ldr	r2, [r3, #16]
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	400a      	ands	r2, r1
 800883c:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	2201      	movs	r2, #1
 8008842:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 8008846:	68f8      	ldr	r0, [r7, #12]
 8008848:	f7fc f800 	bl	800484c <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800884c:	bf00      	nop
 800884e:	3710      	adds	r7, #16
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}

08008854 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b084      	sub	sp, #16
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008860:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 8008862:	68f8      	ldr	r0, [r7, #12]
 8008864:	f7fb fffc 	bl	8004860 <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8008868:	bf00      	nop
 800886a:	3710      	adds	r7, #16
 800886c:	46bd      	mov	sp, r7
 800886e:	bd80      	pop	{r7, pc}

08008870 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b084      	sub	sp, #16
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800887c:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008884:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008892:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008894:	2b01      	cmp	r3, #1
 8008896:	d004      	beq.n	80088a2 <SAI_DMAError+0x32>
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800889c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800889e:	2b01      	cmp	r3, #1
 80088a0:	d112      	bne.n	80088c8 <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	681a      	ldr	r2, [r3, #0]
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80088b0:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 80088b2:	68f8      	ldr	r0, [r7, #12]
 80088b4:	f7ff ff66 	bl	8008784 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	2201      	movs	r2, #1
 80088bc:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	2200      	movs	r2, #0
 80088c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 80088c8:	68f8      	ldr	r0, [r7, #12]
 80088ca:	f7fb fdbf 	bl	800444c <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 80088ce:	bf00      	nop
 80088d0:	3710      	adds	r7, #16
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}

080088d6 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80088d6:	b580      	push	{r7, lr}
 80088d8:	b082      	sub	sp, #8
 80088da:	af00      	add	r7, sp, #0
 80088dc:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d101      	bne.n	80088e8 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80088e4:	2301      	movs	r3, #1
 80088e6:	e022      	b.n	800892e <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80088ee:	b2db      	uxtb	r3, r3
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d105      	bne.n	8008900 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2200      	movs	r2, #0
 80088f8:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	f7f9 fd58 	bl	80023b0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2203      	movs	r2, #3
 8008904:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008908:	6878      	ldr	r0, [r7, #4]
 800890a:	f000 f815 	bl	8008938 <HAL_SD_InitCard>
 800890e:	4603      	mov	r3, r0
 8008910:	2b00      	cmp	r3, #0
 8008912:	d001      	beq.n	8008918 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008914:	2301      	movs	r3, #1
 8008916:	e00a      	b.n	800892e <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2200      	movs	r2, #0
 800891c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2200      	movs	r2, #0
 8008922:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2201      	movs	r2, #1
 8008928:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800892c:	2300      	movs	r3, #0
}
 800892e:	4618      	mov	r0, r3
 8008930:	3708      	adds	r7, #8
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}
	...

08008938 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008938:	b5b0      	push	{r4, r5, r7, lr}
 800893a:	b08e      	sub	sp, #56	@ 0x38
 800893c:	af04      	add	r7, sp, #16
 800893e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008940:	2300      	movs	r3, #0
 8008942:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8008944:	2300      	movs	r3, #0
 8008946:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8008948:	2300      	movs	r3, #0
 800894a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800894c:	2300      	movs	r3, #0
 800894e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008950:	2300      	movs	r3, #0
 8008952:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8008954:	2376      	movs	r3, #118	@ 0x76
 8008956:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681d      	ldr	r5, [r3, #0]
 800895c:	466c      	mov	r4, sp
 800895e:	f107 0314 	add.w	r3, r7, #20
 8008962:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008966:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800896a:	f107 0308 	add.w	r3, r7, #8
 800896e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008970:	4628      	mov	r0, r5
 8008972:	f001 fddf 	bl	800a534 <SDMMC_Init>
 8008976:	4603      	mov	r3, r0
 8008978:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 800897c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008980:	2b00      	cmp	r3, #0
 8008982:	d001      	beq.n	8008988 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8008984:	2301      	movs	r3, #1
 8008986:	e059      	b.n	8008a3c <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	685a      	ldr	r2, [r3, #4]
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008996:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	4618      	mov	r0, r3
 800899e:	f001 fe13 	bl	800a5c8 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	685a      	ldr	r2, [r3, #4]
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80089b0:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80089b2:	2002      	movs	r0, #2
 80089b4:	f7fc f942 	bl	8004c3c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f000 ff59 	bl	8009870 <SD_PowerON>
 80089be:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80089c0:	6a3b      	ldr	r3, [r7, #32]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d00b      	beq.n	80089de <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2201      	movs	r2, #1
 80089ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80089d2:	6a3b      	ldr	r3, [r7, #32]
 80089d4:	431a      	orrs	r2, r3
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80089da:	2301      	movs	r3, #1
 80089dc:	e02e      	b.n	8008a3c <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f000 fe78 	bl	80096d4 <SD_InitCard>
 80089e4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80089e6:	6a3b      	ldr	r3, [r7, #32]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d00b      	beq.n	8008a04 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2201      	movs	r2, #1
 80089f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80089f8:	6a3b      	ldr	r3, [r7, #32]
 80089fa:	431a      	orrs	r2, r3
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8008a00:	2301      	movs	r3, #1
 8008a02:	e01b      	b.n	8008a3c <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	f001 fe6d 	bl	800a6ec <SDMMC_CmdBlockLength>
 8008a12:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008a14:	6a3b      	ldr	r3, [r7, #32]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d00f      	beq.n	8008a3a <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	4a09      	ldr	r2, [pc, #36]	@ (8008a44 <HAL_SD_InitCard+0x10c>)
 8008a20:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008a26:	6a3b      	ldr	r3, [r7, #32]
 8008a28:	431a      	orrs	r2, r3
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2201      	movs	r2, #1
 8008a32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008a36:	2301      	movs	r3, #1
 8008a38:	e000      	b.n	8008a3c <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 8008a3a:	2300      	movs	r3, #0
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	3728      	adds	r7, #40	@ 0x28
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bdb0      	pop	{r4, r5, r7, pc}
 8008a44:	004005ff 	.word	0x004005ff

08008a48 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b08c      	sub	sp, #48	@ 0x30
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	60f8      	str	r0, [r7, #12]
 8008a50:	60b9      	str	r1, [r7, #8]
 8008a52:	607a      	str	r2, [r7, #4]
 8008a54:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d107      	bne.n	8008a70 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a64:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	e0c3      	b.n	8008bf8 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008a76:	b2db      	uxtb	r3, r3
 8008a78:	2b01      	cmp	r3, #1
 8008a7a:	f040 80bc 	bne.w	8008bf6 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	2200      	movs	r2, #0
 8008a82:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008a84:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	441a      	add	r2, r3
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008a8e:	429a      	cmp	r2, r3
 8008a90:	d907      	bls.n	8008aa2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a96:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	e0aa      	b.n	8008bf8 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	2203      	movs	r2, #3
 8008aa6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	62da      	str	r2, [r3, #44]	@ 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 8008ac0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ac6:	4a4e      	ldr	r2, [pc, #312]	@ (8008c00 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8008ac8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ace:	4a4d      	ldr	r2, [pc, #308]	@ (8008c04 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8008ad0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ade:	2200      	movs	r2, #0
 8008ae0:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008af2:	689a      	ldr	r2, [r3, #8]
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	430a      	orrs	r2, r1
 8008afc:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	3380      	adds	r3, #128	@ 0x80
 8008b08:	4619      	mov	r1, r3
 8008b0a:	68ba      	ldr	r2, [r7, #8]
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	025b      	lsls	r3, r3, #9
 8008b10:	089b      	lsrs	r3, r3, #2
 8008b12:	f7fc fbc7 	bl	80052a4 <HAL_DMA_Start_IT>
 8008b16:	4603      	mov	r3, r0
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d017      	beq.n	8008b4c <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 8008b2a:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	4a35      	ldr	r2, [pc, #212]	@ (8008c08 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8008b32:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b38:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	2201      	movs	r2, #1
 8008b44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8008b48:	2301      	movs	r3, #1
 8008b4a:	e055      	b.n	8008bf8 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f042 0208 	orr.w	r2, r2, #8
 8008b5a:	62da      	str	r2, [r3, #44]	@ 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b60:	2b01      	cmp	r3, #1
 8008b62:	d002      	beq.n	8008b6a <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 8008b64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b66:	025b      	lsls	r3, r3, #9
 8008b68:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8008b6e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	025b      	lsls	r3, r3, #9
 8008b74:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008b76:	2390      	movs	r3, #144	@ 0x90
 8008b78:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008b7a:	2302      	movs	r3, #2
 8008b7c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8008b82:	2301      	movs	r3, #1
 8008b84:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f107 0210 	add.w	r2, r7, #16
 8008b8e:	4611      	mov	r1, r2
 8008b90:	4618      	mov	r0, r3
 8008b92:	f001 fd7f 	bl	800a694 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	2b01      	cmp	r3, #1
 8008b9a:	d90a      	bls.n	8008bb2 <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	2282      	movs	r2, #130	@ 0x82
 8008ba0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008ba8:	4618      	mov	r0, r3
 8008baa:	f001 fde3 	bl	800a774 <SDMMC_CmdReadMultiBlock>
 8008bae:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8008bb0:	e009      	b.n	8008bc6 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	2281      	movs	r2, #129	@ 0x81
 8008bb6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	f001 fdb6 	bl	800a730 <SDMMC_CmdReadSingleBlock>
 8008bc4:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8008bc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d012      	beq.n	8008bf2 <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	4a0d      	ldr	r2, [pc, #52]	@ (8008c08 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8008bd2:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008bd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bda:	431a      	orrs	r2, r3
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	2201      	movs	r2, #1
 8008be4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	2200      	movs	r2, #0
 8008bec:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8008bee:	2301      	movs	r3, #1
 8008bf0:	e002      	b.n	8008bf8 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	e000      	b.n	8008bf8 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 8008bf6:	2302      	movs	r3, #2
  }
}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	3730      	adds	r7, #48	@ 0x30
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bd80      	pop	{r7, pc}
 8008c00:	080094e3 	.word	0x080094e3
 8008c04:	08009555 	.word	0x08009555
 8008c08:	004005ff 	.word	0x004005ff

08008c0c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b08c      	sub	sp, #48	@ 0x30
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	60f8      	str	r0, [r7, #12]
 8008c14:	60b9      	str	r1, [r7, #8]
 8008c16:	607a      	str	r2, [r7, #4]
 8008c18:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8008c1e:	68bb      	ldr	r3, [r7, #8]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d107      	bne.n	8008c34 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c28:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8008c30:	2301      	movs	r3, #1
 8008c32:	e0c6      	b.n	8008dc2 <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008c3a:	b2db      	uxtb	r3, r3
 8008c3c:	2b01      	cmp	r3, #1
 8008c3e:	f040 80bf 	bne.w	8008dc0 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	2200      	movs	r2, #0
 8008c46:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008c48:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	441a      	add	r2, r3
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008c52:	429a      	cmp	r2, r3
 8008c54:	d907      	bls.n	8008c66 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c5a:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8008c62:	2301      	movs	r3, #1
 8008c64:	e0ad      	b.n	8008dc2 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	2203      	movs	r2, #3
 8008c6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	2200      	movs	r2, #0
 8008c74:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f042 021a 	orr.w	r2, r2, #26
 8008c84:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c8a:	4a50      	ldr	r2, [pc, #320]	@ (8008dcc <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8008c8c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c92:	4a4f      	ldr	r2, [pc, #316]	@ (8008dd0 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8008c94:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ca2:	2b01      	cmp	r3, #1
 8008ca4:	d002      	beq.n	8008cac <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8008ca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ca8:	025b      	lsls	r3, r3, #9
 8008caa:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	2b01      	cmp	r3, #1
 8008cb0:	d90a      	bls.n	8008cc8 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	22a0      	movs	r2, #160	@ 0xa0
 8008cb6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	f001 fd9c 	bl	800a7fc <SDMMC_CmdWriteMultiBlock>
 8008cc4:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8008cc6:	e009      	b.n	8008cdc <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	2290      	movs	r2, #144	@ 0x90
 8008ccc:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	f001 fd6f 	bl	800a7b8 <SDMMC_CmdWriteSingleBlock>
 8008cda:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008cdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d012      	beq.n	8008d08 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	4a3b      	ldr	r2, [pc, #236]	@ (8008dd4 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8008ce8:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008cee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cf0:	431a      	orrs	r2, r3
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	2201      	movs	r2, #1
 8008cfa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	2200      	movs	r2, #0
 8008d02:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8008d04:	2301      	movs	r3, #1
 8008d06:	e05c      	b.n	8008dc2 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	f042 0208 	orr.w	r2, r2, #8
 8008d16:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d1c:	2240      	movs	r2, #64	@ 0x40
 8008d1e:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d30:	689a      	ldr	r2, [r3, #8]
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	430a      	orrs	r2, r1
 8008d3a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8008d40:	68b9      	ldr	r1, [r7, #8]
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	3380      	adds	r3, #128	@ 0x80
 8008d48:	461a      	mov	r2, r3
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	025b      	lsls	r3, r3, #9
 8008d4e:	089b      	lsrs	r3, r3, #2
 8008d50:	f7fc faa8 	bl	80052a4 <HAL_DMA_Start_IT>
 8008d54:	4603      	mov	r3, r0
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d01a      	beq.n	8008d90 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f022 021a 	bic.w	r2, r2, #26
 8008d68:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	4a19      	ldr	r2, [pc, #100]	@ (8008dd4 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8008d70:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d76:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	2201      	movs	r2, #1
 8008d82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	2200      	movs	r2, #0
 8008d8a:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8008d8c:	2301      	movs	r3, #1
 8008d8e:	e018      	b.n	8008dc2 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008d90:	f04f 33ff 	mov.w	r3, #4294967295
 8008d94:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	025b      	lsls	r3, r3, #9
 8008d9a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008d9c:	2390      	movs	r3, #144	@ 0x90
 8008d9e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8008da0:	2300      	movs	r3, #0
 8008da2:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008da4:	2300      	movs	r3, #0
 8008da6:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8008da8:	2301      	movs	r3, #1
 8008daa:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f107 0210 	add.w	r2, r7, #16
 8008db4:	4611      	mov	r1, r2
 8008db6:	4618      	mov	r0, r3
 8008db8:	f001 fc6c 	bl	800a694 <SDMMC_ConfigData>

      return HAL_OK;
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	e000      	b.n	8008dc2 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 8008dc0:	2302      	movs	r3, #2
  }
}
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	3730      	adds	r7, #48	@ 0x30
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd80      	pop	{r7, pc}
 8008dca:	bf00      	nop
 8008dcc:	080094b9 	.word	0x080094b9
 8008dd0:	08009555 	.word	0x08009555
 8008dd4:	004005ff 	.word	0x004005ff

08008dd8 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b084      	sub	sp, #16
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008de4:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008dec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d008      	beq.n	8008e06 <HAL_SD_IRQHandler+0x2e>
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	f003 0308 	and.w	r3, r3, #8
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d003      	beq.n	8008e06 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	f000 fdec 	bl	80099dc <SD_Read_IT>
 8008e04:	e15a      	b.n	80090bc <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	f000 808d 	beq.w	8008f30 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008e1e:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681a      	ldr	r2, [r3, #0]
 8008e2a:	4b9a      	ldr	r3, [pc, #616]	@ (8009094 <HAL_SD_IRQHandler+0x2bc>)
 8008e2c:	400b      	ands	r3, r1
 8008e2e:	63d3      	str	r3, [r2, #60]	@ 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	f022 0201 	bic.w	r2, r2, #1
 8008e3e:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	f003 0308 	and.w	r3, r3, #8
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d039      	beq.n	8008ebe <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	f003 0302 	and.w	r3, r3, #2
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d104      	bne.n	8008e5e <HAL_SD_IRQHandler+0x86>
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	f003 0320 	and.w	r3, r3, #32
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d011      	beq.n	8008e82 <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	4618      	mov	r0, r3
 8008e64:	f001 fcec 	bl	800a840 <SDMMC_CmdStopTransfer>
 8008e68:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008e6a:	68bb      	ldr	r3, [r7, #8]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d008      	beq.n	8008e82 <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	431a      	orrs	r2, r3
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	f000 f921 	bl	80090c4 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f240 523a 	movw	r2, #1338	@ 0x53a
 8008e8a:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2201      	movs	r2, #1
 8008e90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2200      	movs	r2, #0
 8008e98:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	f003 0301 	and.w	r3, r3, #1
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d104      	bne.n	8008eae <HAL_SD_IRQHandler+0xd6>
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	f003 0302 	and.w	r3, r3, #2
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d003      	beq.n	8008eb6 <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f002 fc76 	bl	800b7a0 <HAL_SD_RxCpltCallback>
 8008eb4:	e102      	b.n	80090bc <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f002 fc68 	bl	800b78c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008ebc:	e0fe      	b.n	80090bc <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	f000 80f9 	beq.w	80090bc <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	f003 0320 	and.w	r3, r3, #32
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d011      	beq.n	8008ef8 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	4618      	mov	r0, r3
 8008eda:	f001 fcb1 	bl	800a840 <SDMMC_CmdStopTransfer>
 8008ede:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d008      	beq.n	8008ef8 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008eea:	68bb      	ldr	r3, [r7, #8]
 8008eec:	431a      	orrs	r2, r3
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f000 f8e6 	bl	80090c4 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	f003 0301 	and.w	r3, r3, #1
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	f040 80dc 	bne.w	80090bc <HAL_SD_IRQHandler+0x2e4>
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	f003 0302 	and.w	r3, r3, #2
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	f040 80d6 	bne.w	80090bc <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f022 0208 	bic.w	r2, r2, #8
 8008f1e:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2201      	movs	r2, #1
 8008f24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	f002 fc2f 	bl	800b78c <HAL_SD_TxCpltCallback>
}
 8008f2e:	e0c5      	b.n	80090bc <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d008      	beq.n	8008f50 <HAL_SD_IRQHandler+0x178>
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	f003 0308 	and.w	r3, r3, #8
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d003      	beq.n	8008f50 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	f000 fd98 	bl	8009a7e <SD_Write_IT>
 8008f4e:	e0b5      	b.n	80090bc <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f56:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	f000 80ae 	beq.w	80090bc <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f66:	f003 0302 	and.w	r3, r3, #2
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d005      	beq.n	8008f7a <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f72:	f043 0202 	orr.w	r2, r3, #2
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f80:	f003 0308 	and.w	r3, r3, #8
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d005      	beq.n	8008f94 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f8c:	f043 0208 	orr.w	r2, r3, #8
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f9a:	f003 0320 	and.w	r3, r3, #32
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d005      	beq.n	8008fae <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fa6:	f043 0220 	orr.w	r2, r3, #32
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008fb4:	f003 0310 	and.w	r3, r3, #16
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d005      	beq.n	8008fc8 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fc0:	f043 0210 	orr.w	r2, r3, #16
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f240 523a 	movw	r2, #1338	@ 0x53a
 8008fd0:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8008fe0:	63da      	str	r2, [r3, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	f001 fc2a 	bl	800a840 <SDMMC_CmdStopTransfer>
 8008fec:	4602      	mov	r2, r0
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ff2:	431a      	orrs	r2, r3
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	f003 0308 	and.w	r3, r3, #8
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d00a      	beq.n	8009018 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2201      	movs	r2, #1
 8009006:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2200      	movs	r2, #0
 800900e:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	f000 f857 	bl	80090c4 <HAL_SD_ErrorCallback>
}
 8009016:	e051      	b.n	80090bc <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800901e:	2b00      	cmp	r3, #0
 8009020:	d04c      	beq.n	80090bc <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	f003 0310 	and.w	r3, r3, #16
 8009028:	2b00      	cmp	r3, #0
 800902a:	d104      	bne.n	8009036 <HAL_SD_IRQHandler+0x25e>
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	f003 0320 	and.w	r3, r3, #32
 8009032:	2b00      	cmp	r3, #0
 8009034:	d011      	beq.n	800905a <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800903a:	4a17      	ldr	r2, [pc, #92]	@ (8009098 <HAL_SD_IRQHandler+0x2c0>)
 800903c:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009042:	4618      	mov	r0, r3
 8009044:	f7fc f9fe 	bl	8005444 <HAL_DMA_Abort_IT>
 8009048:	4603      	mov	r3, r0
 800904a:	2b00      	cmp	r3, #0
 800904c:	d036      	beq.n	80090bc <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009052:	4618      	mov	r0, r3
 8009054:	f000 fad0 	bl	80095f8 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8009058:	e030      	b.n	80090bc <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	f003 0301 	and.w	r3, r3, #1
 8009060:	2b00      	cmp	r3, #0
 8009062:	d104      	bne.n	800906e <HAL_SD_IRQHandler+0x296>
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	f003 0302 	and.w	r3, r3, #2
 800906a:	2b00      	cmp	r3, #0
 800906c:	d018      	beq.n	80090a0 <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009072:	4a0a      	ldr	r2, [pc, #40]	@ (800909c <HAL_SD_IRQHandler+0x2c4>)
 8009074:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800907a:	4618      	mov	r0, r3
 800907c:	f7fc f9e2 	bl	8005444 <HAL_DMA_Abort_IT>
 8009080:	4603      	mov	r3, r0
 8009082:	2b00      	cmp	r3, #0
 8009084:	d01a      	beq.n	80090bc <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800908a:	4618      	mov	r0, r3
 800908c:	f000 faeb 	bl	8009666 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8009090:	e014      	b.n	80090bc <HAL_SD_IRQHandler+0x2e4>
 8009092:	bf00      	nop
 8009094:	ffff3ec5 	.word	0xffff3ec5
 8009098:	080095f9 	.word	0x080095f9
 800909c:	08009667 	.word	0x08009667
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2200      	movs	r2, #0
 80090a4:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2201      	movs	r2, #1
 80090aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2200      	movs	r2, #0
 80090b2:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 80090b4:	6878      	ldr	r0, [r7, #4]
 80090b6:	f002 fb5f 	bl	800b778 <HAL_SD_AbortCallback>
}
 80090ba:	e7ff      	b.n	80090bc <HAL_SD_IRQHandler+0x2e4>
 80090bc:	bf00      	nop
 80090be:	3710      	adds	r7, #16
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}

080090c4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80090c4:	b480      	push	{r7}
 80090c6:	b083      	sub	sp, #12
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80090cc:	bf00      	nop
 80090ce:	370c      	adds	r7, #12
 80090d0:	46bd      	mov	sp, r7
 80090d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d6:	4770      	bx	lr

080090d8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80090d8:	b480      	push	{r7}
 80090da:	b083      	sub	sp, #12
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
 80090e0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80090e6:	0f9b      	lsrs	r3, r3, #30
 80090e8:	b2da      	uxtb	r2, r3
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80090f2:	0e9b      	lsrs	r3, r3, #26
 80090f4:	b2db      	uxtb	r3, r3
 80090f6:	f003 030f 	and.w	r3, r3, #15
 80090fa:	b2da      	uxtb	r2, r3
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009104:	0e1b      	lsrs	r3, r3, #24
 8009106:	b2db      	uxtb	r3, r3
 8009108:	f003 0303 	and.w	r3, r3, #3
 800910c:	b2da      	uxtb	r2, r3
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009116:	0c1b      	lsrs	r3, r3, #16
 8009118:	b2da      	uxtb	r2, r3
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009122:	0a1b      	lsrs	r3, r3, #8
 8009124:	b2da      	uxtb	r2, r3
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800912e:	b2da      	uxtb	r2, r3
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009138:	0d1b      	lsrs	r3, r3, #20
 800913a:	b29a      	uxth	r2, r3
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009144:	0c1b      	lsrs	r3, r3, #16
 8009146:	b2db      	uxtb	r3, r3
 8009148:	f003 030f 	and.w	r3, r3, #15
 800914c:	b2da      	uxtb	r2, r3
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009156:	0bdb      	lsrs	r3, r3, #15
 8009158:	b2db      	uxtb	r3, r3
 800915a:	f003 0301 	and.w	r3, r3, #1
 800915e:	b2da      	uxtb	r2, r3
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009168:	0b9b      	lsrs	r3, r3, #14
 800916a:	b2db      	uxtb	r3, r3
 800916c:	f003 0301 	and.w	r3, r3, #1
 8009170:	b2da      	uxtb	r2, r3
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800917a:	0b5b      	lsrs	r3, r3, #13
 800917c:	b2db      	uxtb	r3, r3
 800917e:	f003 0301 	and.w	r3, r3, #1
 8009182:	b2da      	uxtb	r2, r3
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800918c:	0b1b      	lsrs	r3, r3, #12
 800918e:	b2db      	uxtb	r3, r3
 8009190:	f003 0301 	and.w	r3, r3, #1
 8009194:	b2da      	uxtb	r2, r3
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	2200      	movs	r2, #0
 800919e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d163      	bne.n	8009270 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80091ac:	009a      	lsls	r2, r3, #2
 80091ae:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80091b2:	4013      	ands	r3, r2
 80091b4:	687a      	ldr	r2, [r7, #4]
 80091b6:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 80091b8:	0f92      	lsrs	r2, r2, #30
 80091ba:	431a      	orrs	r2, r3
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80091c4:	0edb      	lsrs	r3, r3, #27
 80091c6:	b2db      	uxtb	r3, r3
 80091c8:	f003 0307 	and.w	r3, r3, #7
 80091cc:	b2da      	uxtb	r2, r3
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80091d6:	0e1b      	lsrs	r3, r3, #24
 80091d8:	b2db      	uxtb	r3, r3
 80091da:	f003 0307 	and.w	r3, r3, #7
 80091de:	b2da      	uxtb	r2, r3
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80091e8:	0d5b      	lsrs	r3, r3, #21
 80091ea:	b2db      	uxtb	r3, r3
 80091ec:	f003 0307 	and.w	r3, r3, #7
 80091f0:	b2da      	uxtb	r2, r3
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80091fa:	0c9b      	lsrs	r3, r3, #18
 80091fc:	b2db      	uxtb	r3, r3
 80091fe:	f003 0307 	and.w	r3, r3, #7
 8009202:	b2da      	uxtb	r2, r3
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800920c:	0bdb      	lsrs	r3, r3, #15
 800920e:	b2db      	uxtb	r3, r3
 8009210:	f003 0307 	and.w	r3, r3, #7
 8009214:	b2da      	uxtb	r2, r3
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	691b      	ldr	r3, [r3, #16]
 800921e:	1c5a      	adds	r2, r3, #1
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	7e1b      	ldrb	r3, [r3, #24]
 8009228:	b2db      	uxtb	r3, r3
 800922a:	f003 0307 	and.w	r3, r3, #7
 800922e:	3302      	adds	r3, #2
 8009230:	2201      	movs	r2, #1
 8009232:	fa02 f303 	lsl.w	r3, r2, r3
 8009236:	687a      	ldr	r2, [r7, #4]
 8009238:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800923a:	fb03 f202 	mul.w	r2, r3, r2
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	7a1b      	ldrb	r3, [r3, #8]
 8009246:	b2db      	uxtb	r3, r3
 8009248:	f003 030f 	and.w	r3, r3, #15
 800924c:	2201      	movs	r2, #1
 800924e:	409a      	lsls	r2, r3
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009258:	687a      	ldr	r2, [r7, #4]
 800925a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800925c:	0a52      	lsrs	r2, r2, #9
 800925e:	fb03 f202 	mul.w	r2, r3, r2
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800926c:	661a      	str	r2, [r3, #96]	@ 0x60
 800926e:	e031      	b.n	80092d4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009274:	2b01      	cmp	r3, #1
 8009276:	d11d      	bne.n	80092b4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800927c:	041b      	lsls	r3, r3, #16
 800927e:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009286:	0c1b      	lsrs	r3, r3, #16
 8009288:	431a      	orrs	r2, r3
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	691b      	ldr	r3, [r3, #16]
 8009292:	3301      	adds	r3, #1
 8009294:	029a      	lsls	r2, r3, #10
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80092a8:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	661a      	str	r2, [r3, #96]	@ 0x60
 80092b2:	e00f      	b.n	80092d4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	4a58      	ldr	r2, [pc, #352]	@ (800941c <HAL_SD_GetCardCSD+0x344>)
 80092ba:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092c0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2201      	movs	r2, #1
 80092cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80092d0:	2301      	movs	r3, #1
 80092d2:	e09d      	b.n	8009410 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80092d8:	0b9b      	lsrs	r3, r3, #14
 80092da:	b2db      	uxtb	r3, r3
 80092dc:	f003 0301 	and.w	r3, r3, #1
 80092e0:	b2da      	uxtb	r2, r3
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80092ea:	09db      	lsrs	r3, r3, #7
 80092ec:	b2db      	uxtb	r3, r3
 80092ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80092f2:	b2da      	uxtb	r2, r3
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80092fc:	b2db      	uxtb	r3, r3
 80092fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009302:	b2da      	uxtb	r2, r3
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800930c:	0fdb      	lsrs	r3, r3, #31
 800930e:	b2da      	uxtb	r2, r3
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009318:	0f5b      	lsrs	r3, r3, #29
 800931a:	b2db      	uxtb	r3, r3
 800931c:	f003 0303 	and.w	r3, r3, #3
 8009320:	b2da      	uxtb	r2, r3
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800932a:	0e9b      	lsrs	r3, r3, #26
 800932c:	b2db      	uxtb	r3, r3
 800932e:	f003 0307 	and.w	r3, r3, #7
 8009332:	b2da      	uxtb	r2, r3
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800933c:	0d9b      	lsrs	r3, r3, #22
 800933e:	b2db      	uxtb	r3, r3
 8009340:	f003 030f 	and.w	r3, r3, #15
 8009344:	b2da      	uxtb	r2, r3
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800934e:	0d5b      	lsrs	r3, r3, #21
 8009350:	b2db      	uxtb	r3, r3
 8009352:	f003 0301 	and.w	r3, r3, #1
 8009356:	b2da      	uxtb	r2, r3
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	2200      	movs	r2, #0
 8009362:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800936a:	0c1b      	lsrs	r3, r3, #16
 800936c:	b2db      	uxtb	r3, r3
 800936e:	f003 0301 	and.w	r3, r3, #1
 8009372:	b2da      	uxtb	r2, r3
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800937e:	0bdb      	lsrs	r3, r3, #15
 8009380:	b2db      	uxtb	r3, r3
 8009382:	f003 0301 	and.w	r3, r3, #1
 8009386:	b2da      	uxtb	r2, r3
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009392:	0b9b      	lsrs	r3, r3, #14
 8009394:	b2db      	uxtb	r3, r3
 8009396:	f003 0301 	and.w	r3, r3, #1
 800939a:	b2da      	uxtb	r2, r3
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80093a6:	0b5b      	lsrs	r3, r3, #13
 80093a8:	b2db      	uxtb	r3, r3
 80093aa:	f003 0301 	and.w	r3, r3, #1
 80093ae:	b2da      	uxtb	r2, r3
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80093ba:	0b1b      	lsrs	r3, r3, #12
 80093bc:	b2db      	uxtb	r3, r3
 80093be:	f003 0301 	and.w	r3, r3, #1
 80093c2:	b2da      	uxtb	r2, r3
 80093c4:	683b      	ldr	r3, [r7, #0]
 80093c6:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80093ce:	0a9b      	lsrs	r3, r3, #10
 80093d0:	b2db      	uxtb	r3, r3
 80093d2:	f003 0303 	and.w	r3, r3, #3
 80093d6:	b2da      	uxtb	r2, r3
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80093e2:	0a1b      	lsrs	r3, r3, #8
 80093e4:	b2db      	uxtb	r3, r3
 80093e6:	f003 0303 	and.w	r3, r3, #3
 80093ea:	b2da      	uxtb	r2, r3
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80093f6:	085b      	lsrs	r3, r3, #1
 80093f8:	b2db      	uxtb	r3, r3
 80093fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80093fe:	b2da      	uxtb	r2, r3
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	2201      	movs	r2, #1
 800940a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800940e:	2300      	movs	r3, #0
}
 8009410:	4618      	mov	r0, r3
 8009412:	370c      	adds	r7, #12
 8009414:	46bd      	mov	sp, r7
 8009416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941a:	4770      	bx	lr
 800941c:	004005ff 	.word	0x004005ff

08009420 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009420:	b480      	push	{r7}
 8009422:	b083      	sub	sp, #12
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
 8009428:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800946a:	2300      	movs	r3, #0
}
 800946c:	4618      	mov	r0, r3
 800946e:	370c      	adds	r7, #12
 8009470:	46bd      	mov	sp, r7
 8009472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009476:	4770      	bx	lr

08009478 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b086      	sub	sp, #24
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009480:	2300      	movs	r3, #0
 8009482:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009484:	f107 030c 	add.w	r3, r7, #12
 8009488:	4619      	mov	r1, r3
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f000 fa7e 	bl	800998c <SD_SendStatus>
 8009490:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009492:	697b      	ldr	r3, [r7, #20]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d005      	beq.n	80094a4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800949c:	697b      	ldr	r3, [r7, #20]
 800949e:	431a      	orrs	r2, r3
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	0a5b      	lsrs	r3, r3, #9
 80094a8:	f003 030f 	and.w	r3, r3, #15
 80094ac:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80094ae:	693b      	ldr	r3, [r7, #16]
}
 80094b0:	4618      	mov	r0, r3
 80094b2:	3718      	adds	r7, #24
 80094b4:	46bd      	mov	sp, r7
 80094b6:	bd80      	pop	{r7, pc}

080094b8 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80094b8:	b480      	push	{r7}
 80094ba:	b085      	sub	sp, #20
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094c4:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80094d4:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80094d6:	bf00      	nop
 80094d8:	3714      	adds	r7, #20
 80094da:	46bd      	mov	sp, r7
 80094dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e0:	4770      	bx	lr

080094e2 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80094e2:	b580      	push	{r7, lr}
 80094e4:	b084      	sub	sp, #16
 80094e6:	af00      	add	r7, sp, #0
 80094e8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094ee:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094f4:	2b82      	cmp	r3, #130	@ 0x82
 80094f6:	d111      	bne.n	800951c <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	4618      	mov	r0, r3
 80094fe:	f001 f99f 	bl	800a840 <SDMMC_CmdStopTransfer>
 8009502:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d008      	beq.n	800951c <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800950e:	68bb      	ldr	r3, [r7, #8]
 8009510:	431a      	orrs	r2, r3
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8009516:	68f8      	ldr	r0, [r7, #12]
 8009518:	f7ff fdd4 	bl	80090c4 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	f022 0208 	bic.w	r2, r2, #8
 800952a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f240 523a 	movw	r2, #1338	@ 0x53a
 8009534:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	2201      	movs	r2, #1
 800953a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	2200      	movs	r2, #0
 8009542:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8009544:	68f8      	ldr	r0, [r7, #12]
 8009546:	f002 f92b 	bl	800b7a0 <HAL_SD_RxCpltCallback>
#endif
}
 800954a:	bf00      	nop
 800954c:	3710      	adds	r7, #16
 800954e:	46bd      	mov	sp, r7
 8009550:	bd80      	pop	{r7, pc}
	...

08009554 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b086      	sub	sp, #24
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009560:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f7fc f91a 	bl	800579c <HAL_DMA_GetError>
 8009568:	4603      	mov	r3, r0
 800956a:	2b02      	cmp	r3, #2
 800956c:	d03e      	beq.n	80095ec <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800956e:	697b      	ldr	r3, [r7, #20]
 8009570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009572:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009574:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8009576:	697b      	ldr	r3, [r7, #20]
 8009578:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800957a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800957c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800957e:	693b      	ldr	r3, [r7, #16]
 8009580:	2b01      	cmp	r3, #1
 8009582:	d002      	beq.n	800958a <SD_DMAError+0x36>
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	2b01      	cmp	r3, #1
 8009588:	d12d      	bne.n	80095e6 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800958a:	697b      	ldr	r3, [r7, #20]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	4a19      	ldr	r2, [pc, #100]	@ (80095f4 <SD_DMAError+0xa0>)
 8009590:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009598:	697b      	ldr	r3, [r7, #20]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 80095a0:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80095a2:	697b      	ldr	r3, [r7, #20]
 80095a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095a6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80095aa:	697b      	ldr	r3, [r7, #20]
 80095ac:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80095ae:	6978      	ldr	r0, [r7, #20]
 80095b0:	f7ff ff62 	bl	8009478 <HAL_SD_GetCardState>
 80095b4:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80095b6:	68bb      	ldr	r3, [r7, #8]
 80095b8:	2b06      	cmp	r3, #6
 80095ba:	d002      	beq.n	80095c2 <SD_DMAError+0x6e>
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	2b05      	cmp	r3, #5
 80095c0:	d10a      	bne.n	80095d8 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80095c2:	697b      	ldr	r3, [r7, #20]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	4618      	mov	r0, r3
 80095c8:	f001 f93a 	bl	800a840 <SDMMC_CmdStopTransfer>
 80095cc:	4602      	mov	r2, r0
 80095ce:	697b      	ldr	r3, [r7, #20]
 80095d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095d2:	431a      	orrs	r2, r3
 80095d4:	697b      	ldr	r3, [r7, #20]
 80095d6:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80095d8:	697b      	ldr	r3, [r7, #20]
 80095da:	2201      	movs	r2, #1
 80095dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80095e0:	697b      	ldr	r3, [r7, #20]
 80095e2:	2200      	movs	r2, #0
 80095e4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80095e6:	6978      	ldr	r0, [r7, #20]
 80095e8:	f7ff fd6c 	bl	80090c4 <HAL_SD_ErrorCallback>
#endif
  }
}
 80095ec:	bf00      	nop
 80095ee:	3718      	adds	r7, #24
 80095f0:	46bd      	mov	sp, r7
 80095f2:	bd80      	pop	{r7, pc}
 80095f4:	004005ff 	.word	0x004005ff

080095f8 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b084      	sub	sp, #16
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009604:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f240 523a 	movw	r2, #1338	@ 0x53a
 800960e:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8009610:	68f8      	ldr	r0, [r7, #12]
 8009612:	f7ff ff31 	bl	8009478 <HAL_SD_GetCardState>
 8009616:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	2201      	movs	r2, #1
 800961c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	2200      	movs	r2, #0
 8009624:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009626:	68bb      	ldr	r3, [r7, #8]
 8009628:	2b06      	cmp	r3, #6
 800962a:	d002      	beq.n	8009632 <SD_DMATxAbort+0x3a>
 800962c:	68bb      	ldr	r3, [r7, #8]
 800962e:	2b05      	cmp	r3, #5
 8009630:	d10a      	bne.n	8009648 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	4618      	mov	r0, r3
 8009638:	f001 f902 	bl	800a840 <SDMMC_CmdStopTransfer>
 800963c:	4602      	mov	r2, r0
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009642:	431a      	orrs	r2, r3
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800964c:	2b00      	cmp	r3, #0
 800964e:	d103      	bne.n	8009658 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8009650:	68f8      	ldr	r0, [r7, #12]
 8009652:	f002 f891 	bl	800b778 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8009656:	e002      	b.n	800965e <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8009658:	68f8      	ldr	r0, [r7, #12]
 800965a:	f7ff fd33 	bl	80090c4 <HAL_SD_ErrorCallback>
}
 800965e:	bf00      	nop
 8009660:	3710      	adds	r7, #16
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}

08009666 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8009666:	b580      	push	{r7, lr}
 8009668:	b084      	sub	sp, #16
 800966a:	af00      	add	r7, sp, #0
 800966c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009672:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f240 523a 	movw	r2, #1338	@ 0x53a
 800967c:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800967e:	68f8      	ldr	r0, [r7, #12]
 8009680:	f7ff fefa 	bl	8009478 <HAL_SD_GetCardState>
 8009684:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	2201      	movs	r2, #1
 800968a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	2200      	movs	r2, #0
 8009692:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	2b06      	cmp	r3, #6
 8009698:	d002      	beq.n	80096a0 <SD_DMARxAbort+0x3a>
 800969a:	68bb      	ldr	r3, [r7, #8]
 800969c:	2b05      	cmp	r3, #5
 800969e:	d10a      	bne.n	80096b6 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	4618      	mov	r0, r3
 80096a6:	f001 f8cb 	bl	800a840 <SDMMC_CmdStopTransfer>
 80096aa:	4602      	mov	r2, r0
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096b0:	431a      	orrs	r2, r3
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d103      	bne.n	80096c6 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80096be:	68f8      	ldr	r0, [r7, #12]
 80096c0:	f002 f85a 	bl	800b778 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80096c4:	e002      	b.n	80096cc <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80096c6:	68f8      	ldr	r0, [r7, #12]
 80096c8:	f7ff fcfc 	bl	80090c4 <HAL_SD_ErrorCallback>
}
 80096cc:	bf00      	nop
 80096ce:	3710      	adds	r7, #16
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd80      	pop	{r7, pc}

080096d4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80096d4:	b5b0      	push	{r4, r5, r7, lr}
 80096d6:	b094      	sub	sp, #80	@ 0x50
 80096d8:	af04      	add	r7, sp, #16
 80096da:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80096dc:	2301      	movs	r3, #1
 80096de:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	4618      	mov	r0, r3
 80096e6:	f000 ff7d 	bl	800a5e4 <SDMMC_GetPowerState>
 80096ea:	4603      	mov	r3, r0
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d102      	bne.n	80096f6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80096f0:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80096f4:	e0b8      	b.n	8009868 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80096fa:	2b03      	cmp	r3, #3
 80096fc:	d02f      	beq.n	800975e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	4618      	mov	r0, r3
 8009704:	f001 f964 	bl	800a9d0 <SDMMC_CmdSendCID>
 8009708:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800970a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800970c:	2b00      	cmp	r3, #0
 800970e:	d001      	beq.n	8009714 <SD_InitCard+0x40>
    {
      return errorstate;
 8009710:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009712:	e0a9      	b.n	8009868 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	2100      	movs	r1, #0
 800971a:	4618      	mov	r0, r3
 800971c:	f000 ffa7 	bl	800a66e <SDMMC_GetResponse>
 8009720:	4602      	mov	r2, r0
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	2104      	movs	r1, #4
 800972c:	4618      	mov	r0, r3
 800972e:	f000 ff9e 	bl	800a66e <SDMMC_GetResponse>
 8009732:	4602      	mov	r2, r0
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	2108      	movs	r1, #8
 800973e:	4618      	mov	r0, r3
 8009740:	f000 ff95 	bl	800a66e <SDMMC_GetResponse>
 8009744:	4602      	mov	r2, r0
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	210c      	movs	r1, #12
 8009750:	4618      	mov	r0, r3
 8009752:	f000 ff8c 	bl	800a66e <SDMMC_GetResponse>
 8009756:	4602      	mov	r2, r0
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009762:	2b03      	cmp	r3, #3
 8009764:	d00d      	beq.n	8009782 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f107 020e 	add.w	r2, r7, #14
 800976e:	4611      	mov	r1, r2
 8009770:	4618      	mov	r0, r3
 8009772:	f001 f96a 	bl	800aa4a <SDMMC_CmdSetRelAdd>
 8009776:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009778:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800977a:	2b00      	cmp	r3, #0
 800977c:	d001      	beq.n	8009782 <SD_InitCard+0xae>
    {
      return errorstate;
 800977e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009780:	e072      	b.n	8009868 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009786:	2b03      	cmp	r3, #3
 8009788:	d036      	beq.n	80097f8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800978a:	89fb      	ldrh	r3, [r7, #14]
 800978c:	461a      	mov	r2, r3
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681a      	ldr	r2, [r3, #0]
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800979a:	041b      	lsls	r3, r3, #16
 800979c:	4619      	mov	r1, r3
 800979e:	4610      	mov	r0, r2
 80097a0:	f001 f934 	bl	800aa0c <SDMMC_CmdSendCSD>
 80097a4:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80097a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d001      	beq.n	80097b0 <SD_InitCard+0xdc>
    {
      return errorstate;
 80097ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80097ae:	e05b      	b.n	8009868 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	2100      	movs	r1, #0
 80097b6:	4618      	mov	r0, r3
 80097b8:	f000 ff59 	bl	800a66e <SDMMC_GetResponse>
 80097bc:	4602      	mov	r2, r0
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	2104      	movs	r1, #4
 80097c8:	4618      	mov	r0, r3
 80097ca:	f000 ff50 	bl	800a66e <SDMMC_GetResponse>
 80097ce:	4602      	mov	r2, r0
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	2108      	movs	r1, #8
 80097da:	4618      	mov	r0, r3
 80097dc:	f000 ff47 	bl	800a66e <SDMMC_GetResponse>
 80097e0:	4602      	mov	r2, r0
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	210c      	movs	r1, #12
 80097ec:	4618      	mov	r0, r3
 80097ee:	f000 ff3e 	bl	800a66e <SDMMC_GetResponse>
 80097f2:	4602      	mov	r2, r0
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	2104      	movs	r1, #4
 80097fe:	4618      	mov	r0, r3
 8009800:	f000 ff35 	bl	800a66e <SDMMC_GetResponse>
 8009804:	4603      	mov	r3, r0
 8009806:	0d1a      	lsrs	r2, r3, #20
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800980c:	f107 0310 	add.w	r3, r7, #16
 8009810:	4619      	mov	r1, r3
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f7ff fc60 	bl	80090d8 <HAL_SD_GetCardCSD>
 8009818:	4603      	mov	r3, r0
 800981a:	2b00      	cmp	r3, #0
 800981c:	d002      	beq.n	8009824 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800981e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009822:	e021      	b.n	8009868 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	6819      	ldr	r1, [r3, #0]
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800982c:	041b      	lsls	r3, r3, #16
 800982e:	2200      	movs	r2, #0
 8009830:	461c      	mov	r4, r3
 8009832:	4615      	mov	r5, r2
 8009834:	4622      	mov	r2, r4
 8009836:	462b      	mov	r3, r5
 8009838:	4608      	mov	r0, r1
 800983a:	f001 f823 	bl	800a884 <SDMMC_CmdSelDesel>
 800983e:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009840:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009842:	2b00      	cmp	r3, #0
 8009844:	d001      	beq.n	800984a <SD_InitCard+0x176>
  {
    return errorstate;
 8009846:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009848:	e00e      	b.n	8009868 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681d      	ldr	r5, [r3, #0]
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	466c      	mov	r4, sp
 8009852:	f103 0210 	add.w	r2, r3, #16
 8009856:	ca07      	ldmia	r2, {r0, r1, r2}
 8009858:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800985c:	3304      	adds	r3, #4
 800985e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009860:	4628      	mov	r0, r5
 8009862:	f000 fe67 	bl	800a534 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009866:	2300      	movs	r3, #0
}
 8009868:	4618      	mov	r0, r3
 800986a:	3740      	adds	r7, #64	@ 0x40
 800986c:	46bd      	mov	sp, r7
 800986e:	bdb0      	pop	{r4, r5, r7, pc}

08009870 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b086      	sub	sp, #24
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009878:	2300      	movs	r3, #0
 800987a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800987c:	2300      	movs	r3, #0
 800987e:	617b      	str	r3, [r7, #20]
 8009880:	2300      	movs	r3, #0
 8009882:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	4618      	mov	r0, r3
 800988a:	f001 f81e 	bl	800a8ca <SDMMC_CmdGoIdleState>
 800988e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d001      	beq.n	800989a <SD_PowerON+0x2a>
  {
    return errorstate;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	e072      	b.n	8009980 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	4618      	mov	r0, r3
 80098a0:	f001 f831 	bl	800a906 <SDMMC_CmdOperCond>
 80098a4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d00d      	beq.n	80098c8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2200      	movs	r2, #0
 80098b0:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	4618      	mov	r0, r3
 80098b8:	f001 f807 	bl	800a8ca <SDMMC_CmdGoIdleState>
 80098bc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d004      	beq.n	80098ce <SD_PowerON+0x5e>
    {
      return errorstate;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	e05b      	b.n	8009980 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2201      	movs	r2, #1
 80098cc:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80098d2:	2b01      	cmp	r3, #1
 80098d4:	d137      	bne.n	8009946 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	2100      	movs	r1, #0
 80098dc:	4618      	mov	r0, r3
 80098de:	f001 f831 	bl	800a944 <SDMMC_CmdAppCommand>
 80098e2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d02d      	beq.n	8009946 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80098ea:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80098ee:	e047      	b.n	8009980 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	2100      	movs	r1, #0
 80098f6:	4618      	mov	r0, r3
 80098f8:	f001 f824 	bl	800a944 <SDMMC_CmdAppCommand>
 80098fc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d001      	beq.n	8009908 <SD_PowerON+0x98>
    {
      return errorstate;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	e03b      	b.n	8009980 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	491e      	ldr	r1, [pc, #120]	@ (8009988 <SD_PowerON+0x118>)
 800990e:	4618      	mov	r0, r3
 8009910:	f001 f83a 	bl	800a988 <SDMMC_CmdAppOperCommand>
 8009914:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d002      	beq.n	8009922 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800991c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009920:	e02e      	b.n	8009980 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	2100      	movs	r1, #0
 8009928:	4618      	mov	r0, r3
 800992a:	f000 fea0 	bl	800a66e <SDMMC_GetResponse>
 800992e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009930:	697b      	ldr	r3, [r7, #20]
 8009932:	0fdb      	lsrs	r3, r3, #31
 8009934:	2b01      	cmp	r3, #1
 8009936:	d101      	bne.n	800993c <SD_PowerON+0xcc>
 8009938:	2301      	movs	r3, #1
 800993a:	e000      	b.n	800993e <SD_PowerON+0xce>
 800993c:	2300      	movs	r3, #0
 800993e:	613b      	str	r3, [r7, #16]

    count++;
 8009940:	68bb      	ldr	r3, [r7, #8]
 8009942:	3301      	adds	r3, #1
 8009944:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009946:	68bb      	ldr	r3, [r7, #8]
 8009948:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800994c:	4293      	cmp	r3, r2
 800994e:	d802      	bhi.n	8009956 <SD_PowerON+0xe6>
 8009950:	693b      	ldr	r3, [r7, #16]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d0cc      	beq.n	80098f0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8009956:	68bb      	ldr	r3, [r7, #8]
 8009958:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800995c:	4293      	cmp	r3, r2
 800995e:	d902      	bls.n	8009966 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009960:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009964:	e00c      	b.n	8009980 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009966:	697b      	ldr	r3, [r7, #20]
 8009968:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800996c:	2b00      	cmp	r3, #0
 800996e:	d003      	beq.n	8009978 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2201      	movs	r2, #1
 8009974:	645a      	str	r2, [r3, #68]	@ 0x44
 8009976:	e002      	b.n	800997e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2200      	movs	r2, #0
 800997c:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800997e:	2300      	movs	r3, #0
}
 8009980:	4618      	mov	r0, r3
 8009982:	3718      	adds	r7, #24
 8009984:	46bd      	mov	sp, r7
 8009986:	bd80      	pop	{r7, pc}
 8009988:	c1100000 	.word	0xc1100000

0800998c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b084      	sub	sp, #16
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
 8009994:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8009996:	683b      	ldr	r3, [r7, #0]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d102      	bne.n	80099a2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800999c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80099a0:	e018      	b.n	80099d4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681a      	ldr	r2, [r3, #0]
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80099aa:	041b      	lsls	r3, r3, #16
 80099ac:	4619      	mov	r1, r3
 80099ae:	4610      	mov	r0, r2
 80099b0:	f001 f86c 	bl	800aa8c <SDMMC_CmdSendStatus>
 80099b4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d001      	beq.n	80099c0 <SD_SendStatus+0x34>
  {
    return errorstate;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	e009      	b.n	80099d4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	2100      	movs	r1, #0
 80099c6:	4618      	mov	r0, r3
 80099c8:	f000 fe51 	bl	800a66e <SDMMC_GetResponse>
 80099cc:	4602      	mov	r2, r0
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80099d2:	2300      	movs	r3, #0
}
 80099d4:	4618      	mov	r0, r3
 80099d6:	3710      	adds	r7, #16
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}

080099dc <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b086      	sub	sp, #24
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099e8:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099ee:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80099f0:	693b      	ldr	r3, [r7, #16]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d03f      	beq.n	8009a76 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80099f6:	2300      	movs	r3, #0
 80099f8:	617b      	str	r3, [r7, #20]
 80099fa:	e033      	b.n	8009a64 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	4618      	mov	r0, r3
 8009a02:	f000 fdc3 	bl	800a58c <SDMMC_ReadFIFO>
 8009a06:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8009a08:	68bb      	ldr	r3, [r7, #8]
 8009a0a:	b2da      	uxtb	r2, r3
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	3301      	adds	r3, #1
 8009a14:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009a16:	693b      	ldr	r3, [r7, #16]
 8009a18:	3b01      	subs	r3, #1
 8009a1a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8009a1c:	68bb      	ldr	r3, [r7, #8]
 8009a1e:	0a1b      	lsrs	r3, r3, #8
 8009a20:	b2da      	uxtb	r2, r3
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	3301      	adds	r3, #1
 8009a2a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009a2c:	693b      	ldr	r3, [r7, #16]
 8009a2e:	3b01      	subs	r3, #1
 8009a30:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8009a32:	68bb      	ldr	r3, [r7, #8]
 8009a34:	0c1b      	lsrs	r3, r3, #16
 8009a36:	b2da      	uxtb	r2, r3
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	3301      	adds	r3, #1
 8009a40:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009a42:	693b      	ldr	r3, [r7, #16]
 8009a44:	3b01      	subs	r3, #1
 8009a46:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8009a48:	68bb      	ldr	r3, [r7, #8]
 8009a4a:	0e1b      	lsrs	r3, r3, #24
 8009a4c:	b2da      	uxtb	r2, r3
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	3301      	adds	r3, #1
 8009a56:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009a58:	693b      	ldr	r3, [r7, #16]
 8009a5a:	3b01      	subs	r3, #1
 8009a5c:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8009a5e:	697b      	ldr	r3, [r7, #20]
 8009a60:	3301      	adds	r3, #1
 8009a62:	617b      	str	r3, [r7, #20]
 8009a64:	697b      	ldr	r3, [r7, #20]
 8009a66:	2b07      	cmp	r3, #7
 8009a68:	d9c8      	bls.n	80099fc <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	68fa      	ldr	r2, [r7, #12]
 8009a6e:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	693a      	ldr	r2, [r7, #16]
 8009a74:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 8009a76:	bf00      	nop
 8009a78:	3718      	adds	r7, #24
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd80      	pop	{r7, pc}

08009a7e <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8009a7e:	b580      	push	{r7, lr}
 8009a80:	b086      	sub	sp, #24
 8009a82:	af00      	add	r7, sp, #0
 8009a84:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6a1b      	ldr	r3, [r3, #32]
 8009a8a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a90:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8009a92:	693b      	ldr	r3, [r7, #16]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d043      	beq.n	8009b20 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8009a98:	2300      	movs	r3, #0
 8009a9a:	617b      	str	r3, [r7, #20]
 8009a9c:	e037      	b.n	8009b0e <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	781b      	ldrb	r3, [r3, #0]
 8009aa2:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	3301      	adds	r3, #1
 8009aa8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009aaa:	693b      	ldr	r3, [r7, #16]
 8009aac:	3b01      	subs	r3, #1
 8009aae:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	781b      	ldrb	r3, [r3, #0]
 8009ab4:	021a      	lsls	r2, r3, #8
 8009ab6:	68bb      	ldr	r3, [r7, #8]
 8009ab8:	4313      	orrs	r3, r2
 8009aba:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	3301      	adds	r3, #1
 8009ac0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009ac2:	693b      	ldr	r3, [r7, #16]
 8009ac4:	3b01      	subs	r3, #1
 8009ac6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	781b      	ldrb	r3, [r3, #0]
 8009acc:	041a      	lsls	r2, r3, #16
 8009ace:	68bb      	ldr	r3, [r7, #8]
 8009ad0:	4313      	orrs	r3, r2
 8009ad2:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	3301      	adds	r3, #1
 8009ad8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009ada:	693b      	ldr	r3, [r7, #16]
 8009adc:	3b01      	subs	r3, #1
 8009ade:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	781b      	ldrb	r3, [r3, #0]
 8009ae4:	061a      	lsls	r2, r3, #24
 8009ae6:	68bb      	ldr	r3, [r7, #8]
 8009ae8:	4313      	orrs	r3, r2
 8009aea:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	3301      	adds	r3, #1
 8009af0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009af2:	693b      	ldr	r3, [r7, #16]
 8009af4:	3b01      	subs	r3, #1
 8009af6:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	f107 0208 	add.w	r2, r7, #8
 8009b00:	4611      	mov	r1, r2
 8009b02:	4618      	mov	r0, r3
 8009b04:	f000 fd4f 	bl	800a5a6 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8009b08:	697b      	ldr	r3, [r7, #20]
 8009b0a:	3301      	adds	r3, #1
 8009b0c:	617b      	str	r3, [r7, #20]
 8009b0e:	697b      	ldr	r3, [r7, #20]
 8009b10:	2b07      	cmp	r3, #7
 8009b12:	d9c4      	bls.n	8009a9e <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	68fa      	ldr	r2, [r7, #12]
 8009b18:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	693a      	ldr	r2, [r7, #16]
 8009b1e:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 8009b20:	bf00      	nop
 8009b22:	3718      	adds	r7, #24
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bd80      	pop	{r7, pc}

08009b28 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b082      	sub	sp, #8
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d101      	bne.n	8009b3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009b36:	2301      	movs	r3, #1
 8009b38:	e040      	b.n	8009bbc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d106      	bne.n	8009b50 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2200      	movs	r2, #0
 8009b46:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009b4a:	6878      	ldr	r0, [r7, #4]
 8009b4c:	f7f8 fed6 	bl	80028fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2224      	movs	r2, #36	@ 0x24
 8009b54:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	681a      	ldr	r2, [r3, #0]
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	f022 0201 	bic.w	r2, r2, #1
 8009b64:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d002      	beq.n	8009b74 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8009b6e:	6878      	ldr	r0, [r7, #4]
 8009b70:	f000 fb16 	bl	800a1a0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009b74:	6878      	ldr	r0, [r7, #4]
 8009b76:	f000 f8af 	bl	8009cd8 <UART_SetConfig>
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	2b01      	cmp	r3, #1
 8009b7e:	d101      	bne.n	8009b84 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8009b80:	2301      	movs	r3, #1
 8009b82:	e01b      	b.n	8009bbc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	685a      	ldr	r2, [r3, #4]
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009b92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	689a      	ldr	r2, [r3, #8]
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009ba2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	681a      	ldr	r2, [r3, #0]
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	f042 0201 	orr.w	r2, r2, #1
 8009bb2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009bb4:	6878      	ldr	r0, [r7, #4]
 8009bb6:	f000 fb95 	bl	800a2e4 <UART_CheckIdleState>
 8009bba:	4603      	mov	r3, r0
}
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	3708      	adds	r7, #8
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bd80      	pop	{r7, pc}

08009bc4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b08a      	sub	sp, #40	@ 0x28
 8009bc8:	af02      	add	r7, sp, #8
 8009bca:	60f8      	str	r0, [r7, #12]
 8009bcc:	60b9      	str	r1, [r7, #8]
 8009bce:	603b      	str	r3, [r7, #0]
 8009bd0:	4613      	mov	r3, r2
 8009bd2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009bd8:	2b20      	cmp	r3, #32
 8009bda:	d177      	bne.n	8009ccc <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8009bdc:	68bb      	ldr	r3, [r7, #8]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d002      	beq.n	8009be8 <HAL_UART_Transmit+0x24>
 8009be2:	88fb      	ldrh	r3, [r7, #6]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d101      	bne.n	8009bec <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8009be8:	2301      	movs	r3, #1
 8009bea:	e070      	b.n	8009cce <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	2200      	movs	r2, #0
 8009bf0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	2221      	movs	r2, #33	@ 0x21
 8009bf8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009bfa:	f7fb f813 	bl	8004c24 <HAL_GetTick>
 8009bfe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	88fa      	ldrh	r2, [r7, #6]
 8009c04:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	88fa      	ldrh	r2, [r7, #6]
 8009c0c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	689b      	ldr	r3, [r3, #8]
 8009c14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009c18:	d108      	bne.n	8009c2c <HAL_UART_Transmit+0x68>
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	691b      	ldr	r3, [r3, #16]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d104      	bne.n	8009c2c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8009c22:	2300      	movs	r3, #0
 8009c24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009c26:	68bb      	ldr	r3, [r7, #8]
 8009c28:	61bb      	str	r3, [r7, #24]
 8009c2a:	e003      	b.n	8009c34 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8009c2c:	68bb      	ldr	r3, [r7, #8]
 8009c2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009c30:	2300      	movs	r3, #0
 8009c32:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009c34:	e02f      	b.n	8009c96 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	9300      	str	r3, [sp, #0]
 8009c3a:	697b      	ldr	r3, [r7, #20]
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	2180      	movs	r1, #128	@ 0x80
 8009c40:	68f8      	ldr	r0, [r7, #12]
 8009c42:	f000 fba6 	bl	800a392 <UART_WaitOnFlagUntilTimeout>
 8009c46:	4603      	mov	r3, r0
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d004      	beq.n	8009c56 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	2220      	movs	r2, #32
 8009c50:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8009c52:	2303      	movs	r3, #3
 8009c54:	e03b      	b.n	8009cce <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8009c56:	69fb      	ldr	r3, [r7, #28]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d10b      	bne.n	8009c74 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009c5c:	69bb      	ldr	r3, [r7, #24]
 8009c5e:	881b      	ldrh	r3, [r3, #0]
 8009c60:	461a      	mov	r2, r3
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009c6a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8009c6c:	69bb      	ldr	r3, [r7, #24]
 8009c6e:	3302      	adds	r3, #2
 8009c70:	61bb      	str	r3, [r7, #24]
 8009c72:	e007      	b.n	8009c84 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009c74:	69fb      	ldr	r3, [r7, #28]
 8009c76:	781a      	ldrb	r2, [r3, #0]
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009c7e:	69fb      	ldr	r3, [r7, #28]
 8009c80:	3301      	adds	r3, #1
 8009c82:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8009c8a:	b29b      	uxth	r3, r3
 8009c8c:	3b01      	subs	r3, #1
 8009c8e:	b29a      	uxth	r2, r3
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8009c9c:	b29b      	uxth	r3, r3
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d1c9      	bne.n	8009c36 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	9300      	str	r3, [sp, #0]
 8009ca6:	697b      	ldr	r3, [r7, #20]
 8009ca8:	2200      	movs	r2, #0
 8009caa:	2140      	movs	r1, #64	@ 0x40
 8009cac:	68f8      	ldr	r0, [r7, #12]
 8009cae:	f000 fb70 	bl	800a392 <UART_WaitOnFlagUntilTimeout>
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d004      	beq.n	8009cc2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	2220      	movs	r2, #32
 8009cbc:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8009cbe:	2303      	movs	r3, #3
 8009cc0:	e005      	b.n	8009cce <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	2220      	movs	r2, #32
 8009cc6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8009cc8:	2300      	movs	r3, #0
 8009cca:	e000      	b.n	8009cce <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8009ccc:	2302      	movs	r3, #2
  }
}
 8009cce:	4618      	mov	r0, r3
 8009cd0:	3720      	adds	r7, #32
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	bd80      	pop	{r7, pc}
	...

08009cd8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b088      	sub	sp, #32
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	689a      	ldr	r2, [r3, #8]
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	691b      	ldr	r3, [r3, #16]
 8009cec:	431a      	orrs	r2, r3
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	695b      	ldr	r3, [r3, #20]
 8009cf2:	431a      	orrs	r2, r3
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	69db      	ldr	r3, [r3, #28]
 8009cf8:	4313      	orrs	r3, r2
 8009cfa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	681a      	ldr	r2, [r3, #0]
 8009d02:	4ba6      	ldr	r3, [pc, #664]	@ (8009f9c <UART_SetConfig+0x2c4>)
 8009d04:	4013      	ands	r3, r2
 8009d06:	687a      	ldr	r2, [r7, #4]
 8009d08:	6812      	ldr	r2, [r2, #0]
 8009d0a:	6979      	ldr	r1, [r7, #20]
 8009d0c:	430b      	orrs	r3, r1
 8009d0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	685b      	ldr	r3, [r3, #4]
 8009d16:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	68da      	ldr	r2, [r3, #12]
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	430a      	orrs	r2, r1
 8009d24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	699b      	ldr	r3, [r3, #24]
 8009d2a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	6a1b      	ldr	r3, [r3, #32]
 8009d30:	697a      	ldr	r2, [r7, #20]
 8009d32:	4313      	orrs	r3, r2
 8009d34:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	689b      	ldr	r3, [r3, #8]
 8009d3c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	697a      	ldr	r2, [r7, #20]
 8009d46:	430a      	orrs	r2, r1
 8009d48:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	4a94      	ldr	r2, [pc, #592]	@ (8009fa0 <UART_SetConfig+0x2c8>)
 8009d50:	4293      	cmp	r3, r2
 8009d52:	d120      	bne.n	8009d96 <UART_SetConfig+0xbe>
 8009d54:	4b93      	ldr	r3, [pc, #588]	@ (8009fa4 <UART_SetConfig+0x2cc>)
 8009d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d5a:	f003 0303 	and.w	r3, r3, #3
 8009d5e:	2b03      	cmp	r3, #3
 8009d60:	d816      	bhi.n	8009d90 <UART_SetConfig+0xb8>
 8009d62:	a201      	add	r2, pc, #4	@ (adr r2, 8009d68 <UART_SetConfig+0x90>)
 8009d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d68:	08009d79 	.word	0x08009d79
 8009d6c:	08009d85 	.word	0x08009d85
 8009d70:	08009d7f 	.word	0x08009d7f
 8009d74:	08009d8b 	.word	0x08009d8b
 8009d78:	2301      	movs	r3, #1
 8009d7a:	77fb      	strb	r3, [r7, #31]
 8009d7c:	e150      	b.n	800a020 <UART_SetConfig+0x348>
 8009d7e:	2302      	movs	r3, #2
 8009d80:	77fb      	strb	r3, [r7, #31]
 8009d82:	e14d      	b.n	800a020 <UART_SetConfig+0x348>
 8009d84:	2304      	movs	r3, #4
 8009d86:	77fb      	strb	r3, [r7, #31]
 8009d88:	e14a      	b.n	800a020 <UART_SetConfig+0x348>
 8009d8a:	2308      	movs	r3, #8
 8009d8c:	77fb      	strb	r3, [r7, #31]
 8009d8e:	e147      	b.n	800a020 <UART_SetConfig+0x348>
 8009d90:	2310      	movs	r3, #16
 8009d92:	77fb      	strb	r3, [r7, #31]
 8009d94:	e144      	b.n	800a020 <UART_SetConfig+0x348>
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	4a83      	ldr	r2, [pc, #524]	@ (8009fa8 <UART_SetConfig+0x2d0>)
 8009d9c:	4293      	cmp	r3, r2
 8009d9e:	d132      	bne.n	8009e06 <UART_SetConfig+0x12e>
 8009da0:	4b80      	ldr	r3, [pc, #512]	@ (8009fa4 <UART_SetConfig+0x2cc>)
 8009da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009da6:	f003 030c 	and.w	r3, r3, #12
 8009daa:	2b0c      	cmp	r3, #12
 8009dac:	d828      	bhi.n	8009e00 <UART_SetConfig+0x128>
 8009dae:	a201      	add	r2, pc, #4	@ (adr r2, 8009db4 <UART_SetConfig+0xdc>)
 8009db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009db4:	08009de9 	.word	0x08009de9
 8009db8:	08009e01 	.word	0x08009e01
 8009dbc:	08009e01 	.word	0x08009e01
 8009dc0:	08009e01 	.word	0x08009e01
 8009dc4:	08009df5 	.word	0x08009df5
 8009dc8:	08009e01 	.word	0x08009e01
 8009dcc:	08009e01 	.word	0x08009e01
 8009dd0:	08009e01 	.word	0x08009e01
 8009dd4:	08009def 	.word	0x08009def
 8009dd8:	08009e01 	.word	0x08009e01
 8009ddc:	08009e01 	.word	0x08009e01
 8009de0:	08009e01 	.word	0x08009e01
 8009de4:	08009dfb 	.word	0x08009dfb
 8009de8:	2300      	movs	r3, #0
 8009dea:	77fb      	strb	r3, [r7, #31]
 8009dec:	e118      	b.n	800a020 <UART_SetConfig+0x348>
 8009dee:	2302      	movs	r3, #2
 8009df0:	77fb      	strb	r3, [r7, #31]
 8009df2:	e115      	b.n	800a020 <UART_SetConfig+0x348>
 8009df4:	2304      	movs	r3, #4
 8009df6:	77fb      	strb	r3, [r7, #31]
 8009df8:	e112      	b.n	800a020 <UART_SetConfig+0x348>
 8009dfa:	2308      	movs	r3, #8
 8009dfc:	77fb      	strb	r3, [r7, #31]
 8009dfe:	e10f      	b.n	800a020 <UART_SetConfig+0x348>
 8009e00:	2310      	movs	r3, #16
 8009e02:	77fb      	strb	r3, [r7, #31]
 8009e04:	e10c      	b.n	800a020 <UART_SetConfig+0x348>
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	4a68      	ldr	r2, [pc, #416]	@ (8009fac <UART_SetConfig+0x2d4>)
 8009e0c:	4293      	cmp	r3, r2
 8009e0e:	d120      	bne.n	8009e52 <UART_SetConfig+0x17a>
 8009e10:	4b64      	ldr	r3, [pc, #400]	@ (8009fa4 <UART_SetConfig+0x2cc>)
 8009e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e16:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009e1a:	2b30      	cmp	r3, #48	@ 0x30
 8009e1c:	d013      	beq.n	8009e46 <UART_SetConfig+0x16e>
 8009e1e:	2b30      	cmp	r3, #48	@ 0x30
 8009e20:	d814      	bhi.n	8009e4c <UART_SetConfig+0x174>
 8009e22:	2b20      	cmp	r3, #32
 8009e24:	d009      	beq.n	8009e3a <UART_SetConfig+0x162>
 8009e26:	2b20      	cmp	r3, #32
 8009e28:	d810      	bhi.n	8009e4c <UART_SetConfig+0x174>
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d002      	beq.n	8009e34 <UART_SetConfig+0x15c>
 8009e2e:	2b10      	cmp	r3, #16
 8009e30:	d006      	beq.n	8009e40 <UART_SetConfig+0x168>
 8009e32:	e00b      	b.n	8009e4c <UART_SetConfig+0x174>
 8009e34:	2300      	movs	r3, #0
 8009e36:	77fb      	strb	r3, [r7, #31]
 8009e38:	e0f2      	b.n	800a020 <UART_SetConfig+0x348>
 8009e3a:	2302      	movs	r3, #2
 8009e3c:	77fb      	strb	r3, [r7, #31]
 8009e3e:	e0ef      	b.n	800a020 <UART_SetConfig+0x348>
 8009e40:	2304      	movs	r3, #4
 8009e42:	77fb      	strb	r3, [r7, #31]
 8009e44:	e0ec      	b.n	800a020 <UART_SetConfig+0x348>
 8009e46:	2308      	movs	r3, #8
 8009e48:	77fb      	strb	r3, [r7, #31]
 8009e4a:	e0e9      	b.n	800a020 <UART_SetConfig+0x348>
 8009e4c:	2310      	movs	r3, #16
 8009e4e:	77fb      	strb	r3, [r7, #31]
 8009e50:	e0e6      	b.n	800a020 <UART_SetConfig+0x348>
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	4a56      	ldr	r2, [pc, #344]	@ (8009fb0 <UART_SetConfig+0x2d8>)
 8009e58:	4293      	cmp	r3, r2
 8009e5a:	d120      	bne.n	8009e9e <UART_SetConfig+0x1c6>
 8009e5c:	4b51      	ldr	r3, [pc, #324]	@ (8009fa4 <UART_SetConfig+0x2cc>)
 8009e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e62:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009e66:	2bc0      	cmp	r3, #192	@ 0xc0
 8009e68:	d013      	beq.n	8009e92 <UART_SetConfig+0x1ba>
 8009e6a:	2bc0      	cmp	r3, #192	@ 0xc0
 8009e6c:	d814      	bhi.n	8009e98 <UART_SetConfig+0x1c0>
 8009e6e:	2b80      	cmp	r3, #128	@ 0x80
 8009e70:	d009      	beq.n	8009e86 <UART_SetConfig+0x1ae>
 8009e72:	2b80      	cmp	r3, #128	@ 0x80
 8009e74:	d810      	bhi.n	8009e98 <UART_SetConfig+0x1c0>
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d002      	beq.n	8009e80 <UART_SetConfig+0x1a8>
 8009e7a:	2b40      	cmp	r3, #64	@ 0x40
 8009e7c:	d006      	beq.n	8009e8c <UART_SetConfig+0x1b4>
 8009e7e:	e00b      	b.n	8009e98 <UART_SetConfig+0x1c0>
 8009e80:	2300      	movs	r3, #0
 8009e82:	77fb      	strb	r3, [r7, #31]
 8009e84:	e0cc      	b.n	800a020 <UART_SetConfig+0x348>
 8009e86:	2302      	movs	r3, #2
 8009e88:	77fb      	strb	r3, [r7, #31]
 8009e8a:	e0c9      	b.n	800a020 <UART_SetConfig+0x348>
 8009e8c:	2304      	movs	r3, #4
 8009e8e:	77fb      	strb	r3, [r7, #31]
 8009e90:	e0c6      	b.n	800a020 <UART_SetConfig+0x348>
 8009e92:	2308      	movs	r3, #8
 8009e94:	77fb      	strb	r3, [r7, #31]
 8009e96:	e0c3      	b.n	800a020 <UART_SetConfig+0x348>
 8009e98:	2310      	movs	r3, #16
 8009e9a:	77fb      	strb	r3, [r7, #31]
 8009e9c:	e0c0      	b.n	800a020 <UART_SetConfig+0x348>
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	4a44      	ldr	r2, [pc, #272]	@ (8009fb4 <UART_SetConfig+0x2dc>)
 8009ea4:	4293      	cmp	r3, r2
 8009ea6:	d125      	bne.n	8009ef4 <UART_SetConfig+0x21c>
 8009ea8:	4b3e      	ldr	r3, [pc, #248]	@ (8009fa4 <UART_SetConfig+0x2cc>)
 8009eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009eae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009eb2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009eb6:	d017      	beq.n	8009ee8 <UART_SetConfig+0x210>
 8009eb8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009ebc:	d817      	bhi.n	8009eee <UART_SetConfig+0x216>
 8009ebe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009ec2:	d00b      	beq.n	8009edc <UART_SetConfig+0x204>
 8009ec4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009ec8:	d811      	bhi.n	8009eee <UART_SetConfig+0x216>
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d003      	beq.n	8009ed6 <UART_SetConfig+0x1fe>
 8009ece:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009ed2:	d006      	beq.n	8009ee2 <UART_SetConfig+0x20a>
 8009ed4:	e00b      	b.n	8009eee <UART_SetConfig+0x216>
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	77fb      	strb	r3, [r7, #31]
 8009eda:	e0a1      	b.n	800a020 <UART_SetConfig+0x348>
 8009edc:	2302      	movs	r3, #2
 8009ede:	77fb      	strb	r3, [r7, #31]
 8009ee0:	e09e      	b.n	800a020 <UART_SetConfig+0x348>
 8009ee2:	2304      	movs	r3, #4
 8009ee4:	77fb      	strb	r3, [r7, #31]
 8009ee6:	e09b      	b.n	800a020 <UART_SetConfig+0x348>
 8009ee8:	2308      	movs	r3, #8
 8009eea:	77fb      	strb	r3, [r7, #31]
 8009eec:	e098      	b.n	800a020 <UART_SetConfig+0x348>
 8009eee:	2310      	movs	r3, #16
 8009ef0:	77fb      	strb	r3, [r7, #31]
 8009ef2:	e095      	b.n	800a020 <UART_SetConfig+0x348>
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	4a2f      	ldr	r2, [pc, #188]	@ (8009fb8 <UART_SetConfig+0x2e0>)
 8009efa:	4293      	cmp	r3, r2
 8009efc:	d125      	bne.n	8009f4a <UART_SetConfig+0x272>
 8009efe:	4b29      	ldr	r3, [pc, #164]	@ (8009fa4 <UART_SetConfig+0x2cc>)
 8009f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009f04:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009f08:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009f0c:	d017      	beq.n	8009f3e <UART_SetConfig+0x266>
 8009f0e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009f12:	d817      	bhi.n	8009f44 <UART_SetConfig+0x26c>
 8009f14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009f18:	d00b      	beq.n	8009f32 <UART_SetConfig+0x25a>
 8009f1a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009f1e:	d811      	bhi.n	8009f44 <UART_SetConfig+0x26c>
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d003      	beq.n	8009f2c <UART_SetConfig+0x254>
 8009f24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009f28:	d006      	beq.n	8009f38 <UART_SetConfig+0x260>
 8009f2a:	e00b      	b.n	8009f44 <UART_SetConfig+0x26c>
 8009f2c:	2301      	movs	r3, #1
 8009f2e:	77fb      	strb	r3, [r7, #31]
 8009f30:	e076      	b.n	800a020 <UART_SetConfig+0x348>
 8009f32:	2302      	movs	r3, #2
 8009f34:	77fb      	strb	r3, [r7, #31]
 8009f36:	e073      	b.n	800a020 <UART_SetConfig+0x348>
 8009f38:	2304      	movs	r3, #4
 8009f3a:	77fb      	strb	r3, [r7, #31]
 8009f3c:	e070      	b.n	800a020 <UART_SetConfig+0x348>
 8009f3e:	2308      	movs	r3, #8
 8009f40:	77fb      	strb	r3, [r7, #31]
 8009f42:	e06d      	b.n	800a020 <UART_SetConfig+0x348>
 8009f44:	2310      	movs	r3, #16
 8009f46:	77fb      	strb	r3, [r7, #31]
 8009f48:	e06a      	b.n	800a020 <UART_SetConfig+0x348>
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	4a1b      	ldr	r2, [pc, #108]	@ (8009fbc <UART_SetConfig+0x2e4>)
 8009f50:	4293      	cmp	r3, r2
 8009f52:	d138      	bne.n	8009fc6 <UART_SetConfig+0x2ee>
 8009f54:	4b13      	ldr	r3, [pc, #76]	@ (8009fa4 <UART_SetConfig+0x2cc>)
 8009f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009f5a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8009f5e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009f62:	d017      	beq.n	8009f94 <UART_SetConfig+0x2bc>
 8009f64:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009f68:	d82a      	bhi.n	8009fc0 <UART_SetConfig+0x2e8>
 8009f6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009f6e:	d00b      	beq.n	8009f88 <UART_SetConfig+0x2b0>
 8009f70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009f74:	d824      	bhi.n	8009fc0 <UART_SetConfig+0x2e8>
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d003      	beq.n	8009f82 <UART_SetConfig+0x2aa>
 8009f7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009f7e:	d006      	beq.n	8009f8e <UART_SetConfig+0x2b6>
 8009f80:	e01e      	b.n	8009fc0 <UART_SetConfig+0x2e8>
 8009f82:	2300      	movs	r3, #0
 8009f84:	77fb      	strb	r3, [r7, #31]
 8009f86:	e04b      	b.n	800a020 <UART_SetConfig+0x348>
 8009f88:	2302      	movs	r3, #2
 8009f8a:	77fb      	strb	r3, [r7, #31]
 8009f8c:	e048      	b.n	800a020 <UART_SetConfig+0x348>
 8009f8e:	2304      	movs	r3, #4
 8009f90:	77fb      	strb	r3, [r7, #31]
 8009f92:	e045      	b.n	800a020 <UART_SetConfig+0x348>
 8009f94:	2308      	movs	r3, #8
 8009f96:	77fb      	strb	r3, [r7, #31]
 8009f98:	e042      	b.n	800a020 <UART_SetConfig+0x348>
 8009f9a:	bf00      	nop
 8009f9c:	efff69f3 	.word	0xefff69f3
 8009fa0:	40011000 	.word	0x40011000
 8009fa4:	40023800 	.word	0x40023800
 8009fa8:	40004400 	.word	0x40004400
 8009fac:	40004800 	.word	0x40004800
 8009fb0:	40004c00 	.word	0x40004c00
 8009fb4:	40005000 	.word	0x40005000
 8009fb8:	40011400 	.word	0x40011400
 8009fbc:	40007800 	.word	0x40007800
 8009fc0:	2310      	movs	r3, #16
 8009fc2:	77fb      	strb	r3, [r7, #31]
 8009fc4:	e02c      	b.n	800a020 <UART_SetConfig+0x348>
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	4a72      	ldr	r2, [pc, #456]	@ (800a194 <UART_SetConfig+0x4bc>)
 8009fcc:	4293      	cmp	r3, r2
 8009fce:	d125      	bne.n	800a01c <UART_SetConfig+0x344>
 8009fd0:	4b71      	ldr	r3, [pc, #452]	@ (800a198 <UART_SetConfig+0x4c0>)
 8009fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009fd6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8009fda:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8009fde:	d017      	beq.n	800a010 <UART_SetConfig+0x338>
 8009fe0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8009fe4:	d817      	bhi.n	800a016 <UART_SetConfig+0x33e>
 8009fe6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009fea:	d00b      	beq.n	800a004 <UART_SetConfig+0x32c>
 8009fec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009ff0:	d811      	bhi.n	800a016 <UART_SetConfig+0x33e>
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d003      	beq.n	8009ffe <UART_SetConfig+0x326>
 8009ff6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009ffa:	d006      	beq.n	800a00a <UART_SetConfig+0x332>
 8009ffc:	e00b      	b.n	800a016 <UART_SetConfig+0x33e>
 8009ffe:	2300      	movs	r3, #0
 800a000:	77fb      	strb	r3, [r7, #31]
 800a002:	e00d      	b.n	800a020 <UART_SetConfig+0x348>
 800a004:	2302      	movs	r3, #2
 800a006:	77fb      	strb	r3, [r7, #31]
 800a008:	e00a      	b.n	800a020 <UART_SetConfig+0x348>
 800a00a:	2304      	movs	r3, #4
 800a00c:	77fb      	strb	r3, [r7, #31]
 800a00e:	e007      	b.n	800a020 <UART_SetConfig+0x348>
 800a010:	2308      	movs	r3, #8
 800a012:	77fb      	strb	r3, [r7, #31]
 800a014:	e004      	b.n	800a020 <UART_SetConfig+0x348>
 800a016:	2310      	movs	r3, #16
 800a018:	77fb      	strb	r3, [r7, #31]
 800a01a:	e001      	b.n	800a020 <UART_SetConfig+0x348>
 800a01c:	2310      	movs	r3, #16
 800a01e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	69db      	ldr	r3, [r3, #28]
 800a024:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a028:	d15b      	bne.n	800a0e2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800a02a:	7ffb      	ldrb	r3, [r7, #31]
 800a02c:	2b08      	cmp	r3, #8
 800a02e:	d828      	bhi.n	800a082 <UART_SetConfig+0x3aa>
 800a030:	a201      	add	r2, pc, #4	@ (adr r2, 800a038 <UART_SetConfig+0x360>)
 800a032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a036:	bf00      	nop
 800a038:	0800a05d 	.word	0x0800a05d
 800a03c:	0800a065 	.word	0x0800a065
 800a040:	0800a06d 	.word	0x0800a06d
 800a044:	0800a083 	.word	0x0800a083
 800a048:	0800a073 	.word	0x0800a073
 800a04c:	0800a083 	.word	0x0800a083
 800a050:	0800a083 	.word	0x0800a083
 800a054:	0800a083 	.word	0x0800a083
 800a058:	0800a07b 	.word	0x0800a07b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a05c:	f7fd fa36 	bl	80074cc <HAL_RCC_GetPCLK1Freq>
 800a060:	61b8      	str	r0, [r7, #24]
        break;
 800a062:	e013      	b.n	800a08c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a064:	f7fd fa46 	bl	80074f4 <HAL_RCC_GetPCLK2Freq>
 800a068:	61b8      	str	r0, [r7, #24]
        break;
 800a06a:	e00f      	b.n	800a08c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a06c:	4b4b      	ldr	r3, [pc, #300]	@ (800a19c <UART_SetConfig+0x4c4>)
 800a06e:	61bb      	str	r3, [r7, #24]
        break;
 800a070:	e00c      	b.n	800a08c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a072:	f7fd f959 	bl	8007328 <HAL_RCC_GetSysClockFreq>
 800a076:	61b8      	str	r0, [r7, #24]
        break;
 800a078:	e008      	b.n	800a08c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a07a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a07e:	61bb      	str	r3, [r7, #24]
        break;
 800a080:	e004      	b.n	800a08c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800a082:	2300      	movs	r3, #0
 800a084:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a086:	2301      	movs	r3, #1
 800a088:	77bb      	strb	r3, [r7, #30]
        break;
 800a08a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a08c:	69bb      	ldr	r3, [r7, #24]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d074      	beq.n	800a17c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a092:	69bb      	ldr	r3, [r7, #24]
 800a094:	005a      	lsls	r2, r3, #1
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	685b      	ldr	r3, [r3, #4]
 800a09a:	085b      	lsrs	r3, r3, #1
 800a09c:	441a      	add	r2, r3
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	685b      	ldr	r3, [r3, #4]
 800a0a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0a6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a0a8:	693b      	ldr	r3, [r7, #16]
 800a0aa:	2b0f      	cmp	r3, #15
 800a0ac:	d916      	bls.n	800a0dc <UART_SetConfig+0x404>
 800a0ae:	693b      	ldr	r3, [r7, #16]
 800a0b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a0b4:	d212      	bcs.n	800a0dc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a0b6:	693b      	ldr	r3, [r7, #16]
 800a0b8:	b29b      	uxth	r3, r3
 800a0ba:	f023 030f 	bic.w	r3, r3, #15
 800a0be:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a0c0:	693b      	ldr	r3, [r7, #16]
 800a0c2:	085b      	lsrs	r3, r3, #1
 800a0c4:	b29b      	uxth	r3, r3
 800a0c6:	f003 0307 	and.w	r3, r3, #7
 800a0ca:	b29a      	uxth	r2, r3
 800a0cc:	89fb      	ldrh	r3, [r7, #14]
 800a0ce:	4313      	orrs	r3, r2
 800a0d0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	89fa      	ldrh	r2, [r7, #14]
 800a0d8:	60da      	str	r2, [r3, #12]
 800a0da:	e04f      	b.n	800a17c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800a0dc:	2301      	movs	r3, #1
 800a0de:	77bb      	strb	r3, [r7, #30]
 800a0e0:	e04c      	b.n	800a17c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a0e2:	7ffb      	ldrb	r3, [r7, #31]
 800a0e4:	2b08      	cmp	r3, #8
 800a0e6:	d828      	bhi.n	800a13a <UART_SetConfig+0x462>
 800a0e8:	a201      	add	r2, pc, #4	@ (adr r2, 800a0f0 <UART_SetConfig+0x418>)
 800a0ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0ee:	bf00      	nop
 800a0f0:	0800a115 	.word	0x0800a115
 800a0f4:	0800a11d 	.word	0x0800a11d
 800a0f8:	0800a125 	.word	0x0800a125
 800a0fc:	0800a13b 	.word	0x0800a13b
 800a100:	0800a12b 	.word	0x0800a12b
 800a104:	0800a13b 	.word	0x0800a13b
 800a108:	0800a13b 	.word	0x0800a13b
 800a10c:	0800a13b 	.word	0x0800a13b
 800a110:	0800a133 	.word	0x0800a133
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a114:	f7fd f9da 	bl	80074cc <HAL_RCC_GetPCLK1Freq>
 800a118:	61b8      	str	r0, [r7, #24]
        break;
 800a11a:	e013      	b.n	800a144 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a11c:	f7fd f9ea 	bl	80074f4 <HAL_RCC_GetPCLK2Freq>
 800a120:	61b8      	str	r0, [r7, #24]
        break;
 800a122:	e00f      	b.n	800a144 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a124:	4b1d      	ldr	r3, [pc, #116]	@ (800a19c <UART_SetConfig+0x4c4>)
 800a126:	61bb      	str	r3, [r7, #24]
        break;
 800a128:	e00c      	b.n	800a144 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a12a:	f7fd f8fd 	bl	8007328 <HAL_RCC_GetSysClockFreq>
 800a12e:	61b8      	str	r0, [r7, #24]
        break;
 800a130:	e008      	b.n	800a144 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a132:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a136:	61bb      	str	r3, [r7, #24]
        break;
 800a138:	e004      	b.n	800a144 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800a13a:	2300      	movs	r3, #0
 800a13c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a13e:	2301      	movs	r3, #1
 800a140:	77bb      	strb	r3, [r7, #30]
        break;
 800a142:	bf00      	nop
    }

    if (pclk != 0U)
 800a144:	69bb      	ldr	r3, [r7, #24]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d018      	beq.n	800a17c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	685b      	ldr	r3, [r3, #4]
 800a14e:	085a      	lsrs	r2, r3, #1
 800a150:	69bb      	ldr	r3, [r7, #24]
 800a152:	441a      	add	r2, r3
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	685b      	ldr	r3, [r3, #4]
 800a158:	fbb2 f3f3 	udiv	r3, r2, r3
 800a15c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a15e:	693b      	ldr	r3, [r7, #16]
 800a160:	2b0f      	cmp	r3, #15
 800a162:	d909      	bls.n	800a178 <UART_SetConfig+0x4a0>
 800a164:	693b      	ldr	r3, [r7, #16]
 800a166:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a16a:	d205      	bcs.n	800a178 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a16c:	693b      	ldr	r3, [r7, #16]
 800a16e:	b29a      	uxth	r2, r3
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	60da      	str	r2, [r3, #12]
 800a176:	e001      	b.n	800a17c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800a178:	2301      	movs	r3, #1
 800a17a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2200      	movs	r2, #0
 800a180:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2200      	movs	r2, #0
 800a186:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800a188:	7fbb      	ldrb	r3, [r7, #30]
}
 800a18a:	4618      	mov	r0, r3
 800a18c:	3720      	adds	r7, #32
 800a18e:	46bd      	mov	sp, r7
 800a190:	bd80      	pop	{r7, pc}
 800a192:	bf00      	nop
 800a194:	40007c00 	.word	0x40007c00
 800a198:	40023800 	.word	0x40023800
 800a19c:	00f42400 	.word	0x00f42400

0800a1a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a1a0:	b480      	push	{r7}
 800a1a2:	b083      	sub	sp, #12
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1ac:	f003 0308 	and.w	r3, r3, #8
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d00a      	beq.n	800a1ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	685b      	ldr	r3, [r3, #4]
 800a1ba:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	430a      	orrs	r2, r1
 800a1c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1ce:	f003 0301 	and.w	r3, r3, #1
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d00a      	beq.n	800a1ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	685b      	ldr	r3, [r3, #4]
 800a1dc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	430a      	orrs	r2, r1
 800a1ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1f0:	f003 0302 	and.w	r3, r3, #2
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d00a      	beq.n	800a20e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	685b      	ldr	r3, [r3, #4]
 800a1fe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	430a      	orrs	r2, r1
 800a20c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a212:	f003 0304 	and.w	r3, r3, #4
 800a216:	2b00      	cmp	r3, #0
 800a218:	d00a      	beq.n	800a230 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	685b      	ldr	r3, [r3, #4]
 800a220:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	430a      	orrs	r2, r1
 800a22e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a234:	f003 0310 	and.w	r3, r3, #16
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d00a      	beq.n	800a252 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	689b      	ldr	r3, [r3, #8]
 800a242:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	430a      	orrs	r2, r1
 800a250:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a256:	f003 0320 	and.w	r3, r3, #32
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d00a      	beq.n	800a274 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	689b      	ldr	r3, [r3, #8]
 800a264:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	430a      	orrs	r2, r1
 800a272:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a278:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d01a      	beq.n	800a2b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	685b      	ldr	r3, [r3, #4]
 800a286:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	430a      	orrs	r2, r1
 800a294:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a29a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a29e:	d10a      	bne.n	800a2b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	685b      	ldr	r3, [r3, #4]
 800a2a6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	430a      	orrs	r2, r1
 800a2b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d00a      	beq.n	800a2d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	685b      	ldr	r3, [r3, #4]
 800a2c8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	430a      	orrs	r2, r1
 800a2d6:	605a      	str	r2, [r3, #4]
  }
}
 800a2d8:	bf00      	nop
 800a2da:	370c      	adds	r7, #12
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e2:	4770      	bx	lr

0800a2e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b08c      	sub	sp, #48	@ 0x30
 800a2e8:	af02      	add	r7, sp, #8
 800a2ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a2f4:	f7fa fc96 	bl	8004c24 <HAL_GetTick>
 800a2f8:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	f003 0308 	and.w	r3, r3, #8
 800a304:	2b08      	cmp	r3, #8
 800a306:	d12e      	bne.n	800a366 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a308:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a30c:	9300      	str	r3, [sp, #0]
 800a30e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a310:	2200      	movs	r2, #0
 800a312:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a316:	6878      	ldr	r0, [r7, #4]
 800a318:	f000 f83b 	bl	800a392 <UART_WaitOnFlagUntilTimeout>
 800a31c:	4603      	mov	r3, r0
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d021      	beq.n	800a366 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a328:	693b      	ldr	r3, [r7, #16]
 800a32a:	e853 3f00 	ldrex	r3, [r3]
 800a32e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a336:	623b      	str	r3, [r7, #32]
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	461a      	mov	r2, r3
 800a33e:	6a3b      	ldr	r3, [r7, #32]
 800a340:	61fb      	str	r3, [r7, #28]
 800a342:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a344:	69b9      	ldr	r1, [r7, #24]
 800a346:	69fa      	ldr	r2, [r7, #28]
 800a348:	e841 2300 	strex	r3, r2, [r1]
 800a34c:	617b      	str	r3, [r7, #20]
   return(result);
 800a34e:	697b      	ldr	r3, [r7, #20]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d1e6      	bne.n	800a322 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2220      	movs	r2, #32
 800a358:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	2200      	movs	r2, #0
 800a35e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a362:	2303      	movs	r3, #3
 800a364:	e011      	b.n	800a38a <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	2220      	movs	r2, #32
 800a36a:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2220      	movs	r2, #32
 800a370:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2200      	movs	r2, #0
 800a378:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	2200      	movs	r2, #0
 800a37e:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2200      	movs	r2, #0
 800a384:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800a388:	2300      	movs	r3, #0
}
 800a38a:	4618      	mov	r0, r3
 800a38c:	3728      	adds	r7, #40	@ 0x28
 800a38e:	46bd      	mov	sp, r7
 800a390:	bd80      	pop	{r7, pc}

0800a392 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a392:	b580      	push	{r7, lr}
 800a394:	b084      	sub	sp, #16
 800a396:	af00      	add	r7, sp, #0
 800a398:	60f8      	str	r0, [r7, #12]
 800a39a:	60b9      	str	r1, [r7, #8]
 800a39c:	603b      	str	r3, [r7, #0]
 800a39e:	4613      	mov	r3, r2
 800a3a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a3a2:	e04f      	b.n	800a444 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a3a4:	69bb      	ldr	r3, [r7, #24]
 800a3a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3aa:	d04b      	beq.n	800a444 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a3ac:	f7fa fc3a 	bl	8004c24 <HAL_GetTick>
 800a3b0:	4602      	mov	r2, r0
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	1ad3      	subs	r3, r2, r3
 800a3b6:	69ba      	ldr	r2, [r7, #24]
 800a3b8:	429a      	cmp	r2, r3
 800a3ba:	d302      	bcc.n	800a3c2 <UART_WaitOnFlagUntilTimeout+0x30>
 800a3bc:	69bb      	ldr	r3, [r7, #24]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d101      	bne.n	800a3c6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a3c2:	2303      	movs	r3, #3
 800a3c4:	e04e      	b.n	800a464 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	f003 0304 	and.w	r3, r3, #4
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d037      	beq.n	800a444 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a3d4:	68bb      	ldr	r3, [r7, #8]
 800a3d6:	2b80      	cmp	r3, #128	@ 0x80
 800a3d8:	d034      	beq.n	800a444 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a3da:	68bb      	ldr	r3, [r7, #8]
 800a3dc:	2b40      	cmp	r3, #64	@ 0x40
 800a3de:	d031      	beq.n	800a444 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	69db      	ldr	r3, [r3, #28]
 800a3e6:	f003 0308 	and.w	r3, r3, #8
 800a3ea:	2b08      	cmp	r3, #8
 800a3ec:	d110      	bne.n	800a410 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	2208      	movs	r2, #8
 800a3f4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a3f6:	68f8      	ldr	r0, [r7, #12]
 800a3f8:	f000 f838 	bl	800a46c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	2208      	movs	r2, #8
 800a400:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	2200      	movs	r2, #0
 800a408:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800a40c:	2301      	movs	r3, #1
 800a40e:	e029      	b.n	800a464 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	69db      	ldr	r3, [r3, #28]
 800a416:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a41a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a41e:	d111      	bne.n	800a444 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a428:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a42a:	68f8      	ldr	r0, [r7, #12]
 800a42c:	f000 f81e 	bl	800a46c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	2220      	movs	r2, #32
 800a434:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	2200      	movs	r2, #0
 800a43c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800a440:	2303      	movs	r3, #3
 800a442:	e00f      	b.n	800a464 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	69da      	ldr	r2, [r3, #28]
 800a44a:	68bb      	ldr	r3, [r7, #8]
 800a44c:	4013      	ands	r3, r2
 800a44e:	68ba      	ldr	r2, [r7, #8]
 800a450:	429a      	cmp	r2, r3
 800a452:	bf0c      	ite	eq
 800a454:	2301      	moveq	r3, #1
 800a456:	2300      	movne	r3, #0
 800a458:	b2db      	uxtb	r3, r3
 800a45a:	461a      	mov	r2, r3
 800a45c:	79fb      	ldrb	r3, [r7, #7]
 800a45e:	429a      	cmp	r2, r3
 800a460:	d0a0      	beq.n	800a3a4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a462:	2300      	movs	r3, #0
}
 800a464:	4618      	mov	r0, r3
 800a466:	3710      	adds	r7, #16
 800a468:	46bd      	mov	sp, r7
 800a46a:	bd80      	pop	{r7, pc}

0800a46c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a46c:	b480      	push	{r7}
 800a46e:	b095      	sub	sp, #84	@ 0x54
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a47a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a47c:	e853 3f00 	ldrex	r3, [r3]
 800a480:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a484:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a488:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	461a      	mov	r2, r3
 800a490:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a492:	643b      	str	r3, [r7, #64]	@ 0x40
 800a494:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a496:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a498:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a49a:	e841 2300 	strex	r3, r2, [r1]
 800a49e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a4a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d1e6      	bne.n	800a474 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	3308      	adds	r3, #8
 800a4ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4ae:	6a3b      	ldr	r3, [r7, #32]
 800a4b0:	e853 3f00 	ldrex	r3, [r3]
 800a4b4:	61fb      	str	r3, [r7, #28]
   return(result);
 800a4b6:	69fb      	ldr	r3, [r7, #28]
 800a4b8:	f023 0301 	bic.w	r3, r3, #1
 800a4bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	3308      	adds	r3, #8
 800a4c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a4c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a4c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a4cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a4ce:	e841 2300 	strex	r3, r2, [r1]
 800a4d2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a4d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d1e5      	bne.n	800a4a6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a4de:	2b01      	cmp	r3, #1
 800a4e0:	d118      	bne.n	800a514 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	e853 3f00 	ldrex	r3, [r3]
 800a4ee:	60bb      	str	r3, [r7, #8]
   return(result);
 800a4f0:	68bb      	ldr	r3, [r7, #8]
 800a4f2:	f023 0310 	bic.w	r3, r3, #16
 800a4f6:	647b      	str	r3, [r7, #68]	@ 0x44
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	461a      	mov	r2, r3
 800a4fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a500:	61bb      	str	r3, [r7, #24]
 800a502:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a504:	6979      	ldr	r1, [r7, #20]
 800a506:	69ba      	ldr	r2, [r7, #24]
 800a508:	e841 2300 	strex	r3, r2, [r1]
 800a50c:	613b      	str	r3, [r7, #16]
   return(result);
 800a50e:	693b      	ldr	r3, [r7, #16]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d1e6      	bne.n	800a4e2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2220      	movs	r2, #32
 800a518:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2200      	movs	r2, #0
 800a520:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	2200      	movs	r2, #0
 800a526:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800a528:	bf00      	nop
 800a52a:	3754      	adds	r7, #84	@ 0x54
 800a52c:	46bd      	mov	sp, r7
 800a52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a532:	4770      	bx	lr

0800a534 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800a534:	b084      	sub	sp, #16
 800a536:	b480      	push	{r7}
 800a538:	b085      	sub	sp, #20
 800a53a:	af00      	add	r7, sp, #0
 800a53c:	6078      	str	r0, [r7, #4]
 800a53e:	f107 001c 	add.w	r0, r7, #28
 800a542:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a546:	2300      	movs	r3, #0
 800a548:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800a54a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800a54c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800a54e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800a550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800a552:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800a554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800a556:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800a558:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800a55a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a55c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800a55e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800a560:	68fa      	ldr	r2, [r7, #12]
 800a562:	4313      	orrs	r3, r2
 800a564:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	685a      	ldr	r2, [r3, #4]
 800a56a:	4b07      	ldr	r3, [pc, #28]	@ (800a588 <SDMMC_Init+0x54>)
 800a56c:	4013      	ands	r3, r2
 800a56e:	68fa      	ldr	r2, [r7, #12]
 800a570:	431a      	orrs	r2, r3
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a576:	2300      	movs	r3, #0
}
 800a578:	4618      	mov	r0, r3
 800a57a:	3714      	adds	r7, #20
 800a57c:	46bd      	mov	sp, r7
 800a57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a582:	b004      	add	sp, #16
 800a584:	4770      	bx	lr
 800a586:	bf00      	nop
 800a588:	ffff8100 	.word	0xffff8100

0800a58c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800a58c:	b480      	push	{r7}
 800a58e:	b083      	sub	sp, #12
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800a59a:	4618      	mov	r0, r3
 800a59c:	370c      	adds	r7, #12
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a4:	4770      	bx	lr

0800a5a6 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800a5a6:	b480      	push	{r7}
 800a5a8:	b083      	sub	sp, #12
 800a5aa:	af00      	add	r7, sp, #0
 800a5ac:	6078      	str	r0, [r7, #4]
 800a5ae:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	681a      	ldr	r2, [r3, #0]
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800a5ba:	2300      	movs	r3, #0
}
 800a5bc:	4618      	mov	r0, r3
 800a5be:	370c      	adds	r7, #12
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c6:	4770      	bx	lr

0800a5c8 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800a5c8:	b480      	push	{r7}
 800a5ca:	b083      	sub	sp, #12
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	2203      	movs	r2, #3
 800a5d4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800a5d6:	2300      	movs	r3, #0
}
 800a5d8:	4618      	mov	r0, r3
 800a5da:	370c      	adds	r7, #12
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e2:	4770      	bx	lr

0800a5e4 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800a5e4:	b480      	push	{r7}
 800a5e6:	b083      	sub	sp, #12
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	f003 0303 	and.w	r3, r3, #3
}
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	370c      	adds	r7, #12
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fe:	4770      	bx	lr

0800a600 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800a600:	b480      	push	{r7}
 800a602:	b085      	sub	sp, #20
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
 800a608:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a60a:	2300      	movs	r3, #0
 800a60c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800a60e:	683b      	ldr	r3, [r7, #0]
 800a610:	681a      	ldr	r2, [r3, #0]
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a616:	683b      	ldr	r3, [r7, #0]
 800a618:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a61e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800a620:	683b      	ldr	r3, [r7, #0]
 800a622:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800a624:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a626:	683b      	ldr	r3, [r7, #0]
 800a628:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800a62a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a62c:	68fa      	ldr	r2, [r7, #12]
 800a62e:	4313      	orrs	r3, r2
 800a630:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	68da      	ldr	r2, [r3, #12]
 800a636:	4b06      	ldr	r3, [pc, #24]	@ (800a650 <SDMMC_SendCommand+0x50>)
 800a638:	4013      	ands	r3, r2
 800a63a:	68fa      	ldr	r2, [r7, #12]
 800a63c:	431a      	orrs	r2, r3
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800a642:	2300      	movs	r3, #0
}
 800a644:	4618      	mov	r0, r3
 800a646:	3714      	adds	r7, #20
 800a648:	46bd      	mov	sp, r7
 800a64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64e:	4770      	bx	lr
 800a650:	fffff000 	.word	0xfffff000

0800a654 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800a654:	b480      	push	{r7}
 800a656:	b083      	sub	sp, #12
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	691b      	ldr	r3, [r3, #16]
 800a660:	b2db      	uxtb	r3, r3
}
 800a662:	4618      	mov	r0, r3
 800a664:	370c      	adds	r7, #12
 800a666:	46bd      	mov	sp, r7
 800a668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66c:	4770      	bx	lr

0800a66e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800a66e:	b480      	push	{r7}
 800a670:	b085      	sub	sp, #20
 800a672:	af00      	add	r7, sp, #0
 800a674:	6078      	str	r0, [r7, #4]
 800a676:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	3314      	adds	r3, #20
 800a67c:	461a      	mov	r2, r3
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	4413      	add	r3, r2
 800a682:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	681b      	ldr	r3, [r3, #0]
}  
 800a688:	4618      	mov	r0, r3
 800a68a:	3714      	adds	r7, #20
 800a68c:	46bd      	mov	sp, r7
 800a68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a692:	4770      	bx	lr

0800a694 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800a694:	b480      	push	{r7}
 800a696:	b085      	sub	sp, #20
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
 800a69c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a69e:	2300      	movs	r3, #0
 800a6a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800a6a2:	683b      	ldr	r3, [r7, #0]
 800a6a4:	681a      	ldr	r2, [r3, #0]
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	685a      	ldr	r2, [r3, #4]
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a6b2:	683b      	ldr	r3, [r7, #0]
 800a6b4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a6ba:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800a6bc:	683b      	ldr	r3, [r7, #0]
 800a6be:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800a6c0:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a6c2:	683b      	ldr	r3, [r7, #0]
 800a6c4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800a6c6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a6c8:	68fa      	ldr	r2, [r7, #12]
 800a6ca:	4313      	orrs	r3, r2
 800a6cc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6d2:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	431a      	orrs	r2, r3
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800a6de:	2300      	movs	r3, #0

}
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	3714      	adds	r7, #20
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ea:	4770      	bx	lr

0800a6ec <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b088      	sub	sp, #32
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
 800a6f4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a6f6:	683b      	ldr	r3, [r7, #0]
 800a6f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a6fa:	2310      	movs	r3, #16
 800a6fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a6fe:	2340      	movs	r3, #64	@ 0x40
 800a700:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a702:	2300      	movs	r3, #0
 800a704:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a706:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a70a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a70c:	f107 0308 	add.w	r3, r7, #8
 800a710:	4619      	mov	r1, r3
 800a712:	6878      	ldr	r0, [r7, #4]
 800a714:	f7ff ff74 	bl	800a600 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800a718:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a71c:	2110      	movs	r1, #16
 800a71e:	6878      	ldr	r0, [r7, #4]
 800a720:	f000 f9d6 	bl	800aad0 <SDMMC_GetCmdResp1>
 800a724:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a726:	69fb      	ldr	r3, [r7, #28]
}
 800a728:	4618      	mov	r0, r3
 800a72a:	3720      	adds	r7, #32
 800a72c:	46bd      	mov	sp, r7
 800a72e:	bd80      	pop	{r7, pc}

0800a730 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b088      	sub	sp, #32
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
 800a738:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a73a:	683b      	ldr	r3, [r7, #0]
 800a73c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800a73e:	2311      	movs	r3, #17
 800a740:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a742:	2340      	movs	r3, #64	@ 0x40
 800a744:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a746:	2300      	movs	r3, #0
 800a748:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a74a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a74e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a750:	f107 0308 	add.w	r3, r7, #8
 800a754:	4619      	mov	r1, r3
 800a756:	6878      	ldr	r0, [r7, #4]
 800a758:	f7ff ff52 	bl	800a600 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800a75c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a760:	2111      	movs	r1, #17
 800a762:	6878      	ldr	r0, [r7, #4]
 800a764:	f000 f9b4 	bl	800aad0 <SDMMC_GetCmdResp1>
 800a768:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a76a:	69fb      	ldr	r3, [r7, #28]
}
 800a76c:	4618      	mov	r0, r3
 800a76e:	3720      	adds	r7, #32
 800a770:	46bd      	mov	sp, r7
 800a772:	bd80      	pop	{r7, pc}

0800a774 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b088      	sub	sp, #32
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
 800a77c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a77e:	683b      	ldr	r3, [r7, #0]
 800a780:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800a782:	2312      	movs	r3, #18
 800a784:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a786:	2340      	movs	r3, #64	@ 0x40
 800a788:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a78a:	2300      	movs	r3, #0
 800a78c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a78e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a792:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a794:	f107 0308 	add.w	r3, r7, #8
 800a798:	4619      	mov	r1, r3
 800a79a:	6878      	ldr	r0, [r7, #4]
 800a79c:	f7ff ff30 	bl	800a600 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800a7a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a7a4:	2112      	movs	r1, #18
 800a7a6:	6878      	ldr	r0, [r7, #4]
 800a7a8:	f000 f992 	bl	800aad0 <SDMMC_GetCmdResp1>
 800a7ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a7ae:	69fb      	ldr	r3, [r7, #28]
}
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	3720      	adds	r7, #32
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	bd80      	pop	{r7, pc}

0800a7b8 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b088      	sub	sp, #32
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
 800a7c0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800a7c6:	2318      	movs	r3, #24
 800a7c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a7ca:	2340      	movs	r3, #64	@ 0x40
 800a7cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a7d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a7d6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a7d8:	f107 0308 	add.w	r3, r7, #8
 800a7dc:	4619      	mov	r1, r3
 800a7de:	6878      	ldr	r0, [r7, #4]
 800a7e0:	f7ff ff0e 	bl	800a600 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800a7e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a7e8:	2118      	movs	r1, #24
 800a7ea:	6878      	ldr	r0, [r7, #4]
 800a7ec:	f000 f970 	bl	800aad0 <SDMMC_GetCmdResp1>
 800a7f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a7f2:	69fb      	ldr	r3, [r7, #28]
}
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	3720      	adds	r7, #32
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	bd80      	pop	{r7, pc}

0800a7fc <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b088      	sub	sp, #32
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
 800a804:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a806:	683b      	ldr	r3, [r7, #0]
 800a808:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800a80a:	2319      	movs	r3, #25
 800a80c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a80e:	2340      	movs	r3, #64	@ 0x40
 800a810:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a812:	2300      	movs	r3, #0
 800a814:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a816:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a81a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a81c:	f107 0308 	add.w	r3, r7, #8
 800a820:	4619      	mov	r1, r3
 800a822:	6878      	ldr	r0, [r7, #4]
 800a824:	f7ff feec 	bl	800a600 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800a828:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a82c:	2119      	movs	r1, #25
 800a82e:	6878      	ldr	r0, [r7, #4]
 800a830:	f000 f94e 	bl	800aad0 <SDMMC_GetCmdResp1>
 800a834:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a836:	69fb      	ldr	r3, [r7, #28]
}
 800a838:	4618      	mov	r0, r3
 800a83a:	3720      	adds	r7, #32
 800a83c:	46bd      	mov	sp, r7
 800a83e:	bd80      	pop	{r7, pc}

0800a840 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b088      	sub	sp, #32
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800a848:	2300      	movs	r3, #0
 800a84a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800a84c:	230c      	movs	r3, #12
 800a84e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a850:	2340      	movs	r3, #64	@ 0x40
 800a852:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a854:	2300      	movs	r3, #0
 800a856:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a858:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a85c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a85e:	f107 0308 	add.w	r3, r7, #8
 800a862:	4619      	mov	r1, r3
 800a864:	6878      	ldr	r0, [r7, #4]
 800a866:	f7ff fecb 	bl	800a600 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800a86a:	4a05      	ldr	r2, [pc, #20]	@ (800a880 <SDMMC_CmdStopTransfer+0x40>)
 800a86c:	210c      	movs	r1, #12
 800a86e:	6878      	ldr	r0, [r7, #4]
 800a870:	f000 f92e 	bl	800aad0 <SDMMC_GetCmdResp1>
 800a874:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a876:	69fb      	ldr	r3, [r7, #28]
}
 800a878:	4618      	mov	r0, r3
 800a87a:	3720      	adds	r7, #32
 800a87c:	46bd      	mov	sp, r7
 800a87e:	bd80      	pop	{r7, pc}
 800a880:	05f5e100 	.word	0x05f5e100

0800a884 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800a884:	b580      	push	{r7, lr}
 800a886:	b08a      	sub	sp, #40	@ 0x28
 800a888:	af00      	add	r7, sp, #0
 800a88a:	60f8      	str	r0, [r7, #12]
 800a88c:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a894:	2307      	movs	r3, #7
 800a896:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a898:	2340      	movs	r3, #64	@ 0x40
 800a89a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a89c:	2300      	movs	r3, #0
 800a89e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a8a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a8a4:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a8a6:	f107 0310 	add.w	r3, r7, #16
 800a8aa:	4619      	mov	r1, r3
 800a8ac:	68f8      	ldr	r0, [r7, #12]
 800a8ae:	f7ff fea7 	bl	800a600 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800a8b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a8b6:	2107      	movs	r1, #7
 800a8b8:	68f8      	ldr	r0, [r7, #12]
 800a8ba:	f000 f909 	bl	800aad0 <SDMMC_GetCmdResp1>
 800a8be:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800a8c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	3728      	adds	r7, #40	@ 0x28
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	bd80      	pop	{r7, pc}

0800a8ca <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800a8ca:	b580      	push	{r7, lr}
 800a8cc:	b088      	sub	sp, #32
 800a8ce:	af00      	add	r7, sp, #0
 800a8d0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800a8da:	2300      	movs	r3, #0
 800a8dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a8de:	2300      	movs	r3, #0
 800a8e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a8e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a8e6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a8e8:	f107 0308 	add.w	r3, r7, #8
 800a8ec:	4619      	mov	r1, r3
 800a8ee:	6878      	ldr	r0, [r7, #4]
 800a8f0:	f7ff fe86 	bl	800a600 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800a8f4:	6878      	ldr	r0, [r7, #4]
 800a8f6:	f000 fb23 	bl	800af40 <SDMMC_GetCmdError>
 800a8fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a8fc:	69fb      	ldr	r3, [r7, #28]
}
 800a8fe:	4618      	mov	r0, r3
 800a900:	3720      	adds	r7, #32
 800a902:	46bd      	mov	sp, r7
 800a904:	bd80      	pop	{r7, pc}

0800a906 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800a906:	b580      	push	{r7, lr}
 800a908:	b088      	sub	sp, #32
 800a90a:	af00      	add	r7, sp, #0
 800a90c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a90e:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800a912:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a914:	2308      	movs	r3, #8
 800a916:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a918:	2340      	movs	r3, #64	@ 0x40
 800a91a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a91c:	2300      	movs	r3, #0
 800a91e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a920:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a924:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a926:	f107 0308 	add.w	r3, r7, #8
 800a92a:	4619      	mov	r1, r3
 800a92c:	6878      	ldr	r0, [r7, #4]
 800a92e:	f7ff fe67 	bl	800a600 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800a932:	6878      	ldr	r0, [r7, #4]
 800a934:	f000 fab6 	bl	800aea4 <SDMMC_GetCmdResp7>
 800a938:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a93a:	69fb      	ldr	r3, [r7, #28]
}
 800a93c:	4618      	mov	r0, r3
 800a93e:	3720      	adds	r7, #32
 800a940:	46bd      	mov	sp, r7
 800a942:	bd80      	pop	{r7, pc}

0800a944 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b088      	sub	sp, #32
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
 800a94c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a952:	2337      	movs	r3, #55	@ 0x37
 800a954:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a956:	2340      	movs	r3, #64	@ 0x40
 800a958:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a95a:	2300      	movs	r3, #0
 800a95c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a95e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a962:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a964:	f107 0308 	add.w	r3, r7, #8
 800a968:	4619      	mov	r1, r3
 800a96a:	6878      	ldr	r0, [r7, #4]
 800a96c:	f7ff fe48 	bl	800a600 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800a970:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a974:	2137      	movs	r1, #55	@ 0x37
 800a976:	6878      	ldr	r0, [r7, #4]
 800a978:	f000 f8aa 	bl	800aad0 <SDMMC_GetCmdResp1>
 800a97c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a97e:	69fb      	ldr	r3, [r7, #28]
}
 800a980:	4618      	mov	r0, r3
 800a982:	3720      	adds	r7, #32
 800a984:	46bd      	mov	sp, r7
 800a986:	bd80      	pop	{r7, pc}

0800a988 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b088      	sub	sp, #32
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
 800a990:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800a992:	683a      	ldr	r2, [r7, #0]
 800a994:	4b0d      	ldr	r3, [pc, #52]	@ (800a9cc <SDMMC_CmdAppOperCommand+0x44>)
 800a996:	4313      	orrs	r3, r2
 800a998:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a99a:	2329      	movs	r3, #41	@ 0x29
 800a99c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a99e:	2340      	movs	r3, #64	@ 0x40
 800a9a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a9a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a9aa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a9ac:	f107 0308 	add.w	r3, r7, #8
 800a9b0:	4619      	mov	r1, r3
 800a9b2:	6878      	ldr	r0, [r7, #4]
 800a9b4:	f7ff fe24 	bl	800a600 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800a9b8:	6878      	ldr	r0, [r7, #4]
 800a9ba:	f000 f9bf 	bl	800ad3c <SDMMC_GetCmdResp3>
 800a9be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a9c0:	69fb      	ldr	r3, [r7, #28]
}
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	3720      	adds	r7, #32
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	bd80      	pop	{r7, pc}
 800a9ca:	bf00      	nop
 800a9cc:	80100000 	.word	0x80100000

0800a9d0 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b088      	sub	sp, #32
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a9d8:	2300      	movs	r3, #0
 800a9da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a9dc:	2302      	movs	r3, #2
 800a9de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a9e0:	23c0      	movs	r3, #192	@ 0xc0
 800a9e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a9e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a9ec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a9ee:	f107 0308 	add.w	r3, r7, #8
 800a9f2:	4619      	mov	r1, r3
 800a9f4:	6878      	ldr	r0, [r7, #4]
 800a9f6:	f7ff fe03 	bl	800a600 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a9fa:	6878      	ldr	r0, [r7, #4]
 800a9fc:	f000 f956 	bl	800acac <SDMMC_GetCmdResp2>
 800aa00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aa02:	69fb      	ldr	r3, [r7, #28]
}
 800aa04:	4618      	mov	r0, r3
 800aa06:	3720      	adds	r7, #32
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	bd80      	pop	{r7, pc}

0800aa0c <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b088      	sub	sp, #32
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
 800aa14:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800aa16:	683b      	ldr	r3, [r7, #0]
 800aa18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800aa1a:	2309      	movs	r3, #9
 800aa1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800aa1e:	23c0      	movs	r3, #192	@ 0xc0
 800aa20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aa22:	2300      	movs	r3, #0
 800aa24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aa26:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800aa2a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aa2c:	f107 0308 	add.w	r3, r7, #8
 800aa30:	4619      	mov	r1, r3
 800aa32:	6878      	ldr	r0, [r7, #4]
 800aa34:	f7ff fde4 	bl	800a600 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800aa38:	6878      	ldr	r0, [r7, #4]
 800aa3a:	f000 f937 	bl	800acac <SDMMC_GetCmdResp2>
 800aa3e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aa40:	69fb      	ldr	r3, [r7, #28]
}
 800aa42:	4618      	mov	r0, r3
 800aa44:	3720      	adds	r7, #32
 800aa46:	46bd      	mov	sp, r7
 800aa48:	bd80      	pop	{r7, pc}

0800aa4a <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800aa4a:	b580      	push	{r7, lr}
 800aa4c:	b088      	sub	sp, #32
 800aa4e:	af00      	add	r7, sp, #0
 800aa50:	6078      	str	r0, [r7, #4]
 800aa52:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800aa54:	2300      	movs	r3, #0
 800aa56:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800aa58:	2303      	movs	r3, #3
 800aa5a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aa5c:	2340      	movs	r3, #64	@ 0x40
 800aa5e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aa60:	2300      	movs	r3, #0
 800aa62:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aa64:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800aa68:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aa6a:	f107 0308 	add.w	r3, r7, #8
 800aa6e:	4619      	mov	r1, r3
 800aa70:	6878      	ldr	r0, [r7, #4]
 800aa72:	f7ff fdc5 	bl	800a600 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800aa76:	683a      	ldr	r2, [r7, #0]
 800aa78:	2103      	movs	r1, #3
 800aa7a:	6878      	ldr	r0, [r7, #4]
 800aa7c:	f000 f99c 	bl	800adb8 <SDMMC_GetCmdResp6>
 800aa80:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aa82:	69fb      	ldr	r3, [r7, #28]
}
 800aa84:	4618      	mov	r0, r3
 800aa86:	3720      	adds	r7, #32
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	bd80      	pop	{r7, pc}

0800aa8c <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b088      	sub	sp, #32
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
 800aa94:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800aa96:	683b      	ldr	r3, [r7, #0]
 800aa98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800aa9a:	230d      	movs	r3, #13
 800aa9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aa9e:	2340      	movs	r3, #64	@ 0x40
 800aaa0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aaa6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800aaaa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aaac:	f107 0308 	add.w	r3, r7, #8
 800aab0:	4619      	mov	r1, r3
 800aab2:	6878      	ldr	r0, [r7, #4]
 800aab4:	f7ff fda4 	bl	800a600 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800aab8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aabc:	210d      	movs	r1, #13
 800aabe:	6878      	ldr	r0, [r7, #4]
 800aac0:	f000 f806 	bl	800aad0 <SDMMC_GetCmdResp1>
 800aac4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aac6:	69fb      	ldr	r3, [r7, #28]
}
 800aac8:	4618      	mov	r0, r3
 800aaca:	3720      	adds	r7, #32
 800aacc:	46bd      	mov	sp, r7
 800aace:	bd80      	pop	{r7, pc}

0800aad0 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b088      	sub	sp, #32
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	60f8      	str	r0, [r7, #12]
 800aad8:	460b      	mov	r3, r1
 800aada:	607a      	str	r2, [r7, #4]
 800aadc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800aade:	4b70      	ldr	r3, [pc, #448]	@ (800aca0 <SDMMC_GetCmdResp1+0x1d0>)
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	4a70      	ldr	r2, [pc, #448]	@ (800aca4 <SDMMC_GetCmdResp1+0x1d4>)
 800aae4:	fba2 2303 	umull	r2, r3, r2, r3
 800aae8:	0a5a      	lsrs	r2, r3, #9
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	fb02 f303 	mul.w	r3, r2, r3
 800aaf0:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800aaf2:	69fb      	ldr	r3, [r7, #28]
 800aaf4:	1e5a      	subs	r2, r3, #1
 800aaf6:	61fa      	str	r2, [r7, #28]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d102      	bne.n	800ab02 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aafc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ab00:	e0c9      	b.n	800ac96 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab06:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ab08:	69bb      	ldr	r3, [r7, #24]
 800ab0a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d0ef      	beq.n	800aaf2 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ab12:	69bb      	ldr	r3, [r7, #24]
 800ab14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d1ea      	bne.n	800aaf2 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab20:	f003 0304 	and.w	r3, r3, #4
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d004      	beq.n	800ab32 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	2204      	movs	r2, #4
 800ab2c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ab2e:	2304      	movs	r3, #4
 800ab30:	e0b1      	b.n	800ac96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab36:	f003 0301 	and.w	r3, r3, #1
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d004      	beq.n	800ab48 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	2201      	movs	r2, #1
 800ab42:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ab44:	2301      	movs	r3, #1
 800ab46:	e0a6      	b.n	800ac96 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	22c5      	movs	r2, #197	@ 0xc5
 800ab4c:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ab4e:	68f8      	ldr	r0, [r7, #12]
 800ab50:	f7ff fd80 	bl	800a654 <SDMMC_GetCommandResponse>
 800ab54:	4603      	mov	r3, r0
 800ab56:	461a      	mov	r2, r3
 800ab58:	7afb      	ldrb	r3, [r7, #11]
 800ab5a:	4293      	cmp	r3, r2
 800ab5c:	d001      	beq.n	800ab62 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ab5e:	2301      	movs	r3, #1
 800ab60:	e099      	b.n	800ac96 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800ab62:	2100      	movs	r1, #0
 800ab64:	68f8      	ldr	r0, [r7, #12]
 800ab66:	f7ff fd82 	bl	800a66e <SDMMC_GetResponse>
 800ab6a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800ab6c:	697a      	ldr	r2, [r7, #20]
 800ab6e:	4b4e      	ldr	r3, [pc, #312]	@ (800aca8 <SDMMC_GetCmdResp1+0x1d8>)
 800ab70:	4013      	ands	r3, r2
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d101      	bne.n	800ab7a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800ab76:	2300      	movs	r3, #0
 800ab78:	e08d      	b.n	800ac96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800ab7a:	697b      	ldr	r3, [r7, #20]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	da02      	bge.n	800ab86 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800ab80:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ab84:	e087      	b.n	800ac96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ab86:	697b      	ldr	r3, [r7, #20]
 800ab88:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d001      	beq.n	800ab94 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800ab90:	2340      	movs	r3, #64	@ 0x40
 800ab92:	e080      	b.n	800ac96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ab94:	697b      	ldr	r3, [r7, #20]
 800ab96:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d001      	beq.n	800aba2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800ab9e:	2380      	movs	r3, #128	@ 0x80
 800aba0:	e079      	b.n	800ac96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800aba2:	697b      	ldr	r3, [r7, #20]
 800aba4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d002      	beq.n	800abb2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800abac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800abb0:	e071      	b.n	800ac96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800abb2:	697b      	ldr	r3, [r7, #20]
 800abb4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d002      	beq.n	800abc2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800abbc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800abc0:	e069      	b.n	800ac96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800abc2:	697b      	ldr	r3, [r7, #20]
 800abc4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d002      	beq.n	800abd2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800abcc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800abd0:	e061      	b.n	800ac96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800abd2:	697b      	ldr	r3, [r7, #20]
 800abd4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d002      	beq.n	800abe2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800abdc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800abe0:	e059      	b.n	800ac96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800abe2:	697b      	ldr	r3, [r7, #20]
 800abe4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d002      	beq.n	800abf2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800abec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800abf0:	e051      	b.n	800ac96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800abf2:	697b      	ldr	r3, [r7, #20]
 800abf4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d002      	beq.n	800ac02 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800abfc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ac00:	e049      	b.n	800ac96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800ac02:	697b      	ldr	r3, [r7, #20]
 800ac04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d002      	beq.n	800ac12 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800ac0c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800ac10:	e041      	b.n	800ac96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800ac12:	697b      	ldr	r3, [r7, #20]
 800ac14:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d002      	beq.n	800ac22 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800ac1c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ac20:	e039      	b.n	800ac96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800ac22:	697b      	ldr	r3, [r7, #20]
 800ac24:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d002      	beq.n	800ac32 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800ac2c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800ac30:	e031      	b.n	800ac96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800ac32:	697b      	ldr	r3, [r7, #20]
 800ac34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d002      	beq.n	800ac42 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800ac3c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800ac40:	e029      	b.n	800ac96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800ac42:	697b      	ldr	r3, [r7, #20]
 800ac44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d002      	beq.n	800ac52 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800ac4c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800ac50:	e021      	b.n	800ac96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800ac52:	697b      	ldr	r3, [r7, #20]
 800ac54:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d002      	beq.n	800ac62 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800ac5c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800ac60:	e019      	b.n	800ac96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800ac62:	697b      	ldr	r3, [r7, #20]
 800ac64:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d002      	beq.n	800ac72 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800ac6c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800ac70:	e011      	b.n	800ac96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800ac72:	697b      	ldr	r3, [r7, #20]
 800ac74:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d002      	beq.n	800ac82 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800ac7c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800ac80:	e009      	b.n	800ac96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800ac82:	697b      	ldr	r3, [r7, #20]
 800ac84:	f003 0308 	and.w	r3, r3, #8
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d002      	beq.n	800ac92 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800ac8c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800ac90:	e001      	b.n	800ac96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ac92:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800ac96:	4618      	mov	r0, r3
 800ac98:	3720      	adds	r7, #32
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	bd80      	pop	{r7, pc}
 800ac9e:	bf00      	nop
 800aca0:	2000001c 	.word	0x2000001c
 800aca4:	10624dd3 	.word	0x10624dd3
 800aca8:	fdffe008 	.word	0xfdffe008

0800acac <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800acac:	b480      	push	{r7}
 800acae:	b085      	sub	sp, #20
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800acb4:	4b1f      	ldr	r3, [pc, #124]	@ (800ad34 <SDMMC_GetCmdResp2+0x88>)
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	4a1f      	ldr	r2, [pc, #124]	@ (800ad38 <SDMMC_GetCmdResp2+0x8c>)
 800acba:	fba2 2303 	umull	r2, r3, r2, r3
 800acbe:	0a5b      	lsrs	r3, r3, #9
 800acc0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800acc4:	fb02 f303 	mul.w	r3, r2, r3
 800acc8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	1e5a      	subs	r2, r3, #1
 800acce:	60fa      	str	r2, [r7, #12]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d102      	bne.n	800acda <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800acd4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800acd8:	e026      	b.n	800ad28 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800acde:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ace0:	68bb      	ldr	r3, [r7, #8]
 800ace2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d0ef      	beq.n	800acca <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800acea:	68bb      	ldr	r3, [r7, #8]
 800acec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d1ea      	bne.n	800acca <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800acf8:	f003 0304 	and.w	r3, r3, #4
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d004      	beq.n	800ad0a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2204      	movs	r2, #4
 800ad04:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ad06:	2304      	movs	r3, #4
 800ad08:	e00e      	b.n	800ad28 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad0e:	f003 0301 	and.w	r3, r3, #1
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d004      	beq.n	800ad20 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	2201      	movs	r2, #1
 800ad1a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ad1c:	2301      	movs	r3, #1
 800ad1e:	e003      	b.n	800ad28 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	22c5      	movs	r2, #197	@ 0xc5
 800ad24:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800ad26:	2300      	movs	r3, #0
}
 800ad28:	4618      	mov	r0, r3
 800ad2a:	3714      	adds	r7, #20
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad32:	4770      	bx	lr
 800ad34:	2000001c 	.word	0x2000001c
 800ad38:	10624dd3 	.word	0x10624dd3

0800ad3c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800ad3c:	b480      	push	{r7}
 800ad3e:	b085      	sub	sp, #20
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ad44:	4b1a      	ldr	r3, [pc, #104]	@ (800adb0 <SDMMC_GetCmdResp3+0x74>)
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	4a1a      	ldr	r2, [pc, #104]	@ (800adb4 <SDMMC_GetCmdResp3+0x78>)
 800ad4a:	fba2 2303 	umull	r2, r3, r2, r3
 800ad4e:	0a5b      	lsrs	r3, r3, #9
 800ad50:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ad54:	fb02 f303 	mul.w	r3, r2, r3
 800ad58:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	1e5a      	subs	r2, r3, #1
 800ad5e:	60fa      	str	r2, [r7, #12]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d102      	bne.n	800ad6a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ad64:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ad68:	e01b      	b.n	800ada2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad6e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ad70:	68bb      	ldr	r3, [r7, #8]
 800ad72:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d0ef      	beq.n	800ad5a <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ad7a:	68bb      	ldr	r3, [r7, #8]
 800ad7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d1ea      	bne.n	800ad5a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad88:	f003 0304 	and.w	r3, r3, #4
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d004      	beq.n	800ad9a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2204      	movs	r2, #4
 800ad94:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ad96:	2304      	movs	r3, #4
 800ad98:	e003      	b.n	800ada2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	22c5      	movs	r2, #197	@ 0xc5
 800ad9e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800ada0:	2300      	movs	r3, #0
}
 800ada2:	4618      	mov	r0, r3
 800ada4:	3714      	adds	r7, #20
 800ada6:	46bd      	mov	sp, r7
 800ada8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adac:	4770      	bx	lr
 800adae:	bf00      	nop
 800adb0:	2000001c 	.word	0x2000001c
 800adb4:	10624dd3 	.word	0x10624dd3

0800adb8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b088      	sub	sp, #32
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	60f8      	str	r0, [r7, #12]
 800adc0:	460b      	mov	r3, r1
 800adc2:	607a      	str	r2, [r7, #4]
 800adc4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800adc6:	4b35      	ldr	r3, [pc, #212]	@ (800ae9c <SDMMC_GetCmdResp6+0xe4>)
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	4a35      	ldr	r2, [pc, #212]	@ (800aea0 <SDMMC_GetCmdResp6+0xe8>)
 800adcc:	fba2 2303 	umull	r2, r3, r2, r3
 800add0:	0a5b      	lsrs	r3, r3, #9
 800add2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800add6:	fb02 f303 	mul.w	r3, r2, r3
 800adda:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800addc:	69fb      	ldr	r3, [r7, #28]
 800adde:	1e5a      	subs	r2, r3, #1
 800ade0:	61fa      	str	r2, [r7, #28]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d102      	bne.n	800adec <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ade6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800adea:	e052      	b.n	800ae92 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800adf0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800adf2:	69bb      	ldr	r3, [r7, #24]
 800adf4:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d0ef      	beq.n	800addc <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800adfc:	69bb      	ldr	r3, [r7, #24]
 800adfe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d1ea      	bne.n	800addc <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae0a:	f003 0304 	and.w	r3, r3, #4
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d004      	beq.n	800ae1c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	2204      	movs	r2, #4
 800ae16:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ae18:	2304      	movs	r3, #4
 800ae1a:	e03a      	b.n	800ae92 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae20:	f003 0301 	and.w	r3, r3, #1
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d004      	beq.n	800ae32 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	2201      	movs	r2, #1
 800ae2c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ae2e:	2301      	movs	r3, #1
 800ae30:	e02f      	b.n	800ae92 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ae32:	68f8      	ldr	r0, [r7, #12]
 800ae34:	f7ff fc0e 	bl	800a654 <SDMMC_GetCommandResponse>
 800ae38:	4603      	mov	r3, r0
 800ae3a:	461a      	mov	r2, r3
 800ae3c:	7afb      	ldrb	r3, [r7, #11]
 800ae3e:	4293      	cmp	r3, r2
 800ae40:	d001      	beq.n	800ae46 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ae42:	2301      	movs	r3, #1
 800ae44:	e025      	b.n	800ae92 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	22c5      	movs	r2, #197	@ 0xc5
 800ae4a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800ae4c:	2100      	movs	r1, #0
 800ae4e:	68f8      	ldr	r0, [r7, #12]
 800ae50:	f7ff fc0d 	bl	800a66e <SDMMC_GetResponse>
 800ae54:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800ae56:	697b      	ldr	r3, [r7, #20]
 800ae58:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d106      	bne.n	800ae6e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800ae60:	697b      	ldr	r3, [r7, #20]
 800ae62:	0c1b      	lsrs	r3, r3, #16
 800ae64:	b29a      	uxth	r2, r3
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	e011      	b.n	800ae92 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800ae6e:	697b      	ldr	r3, [r7, #20]
 800ae70:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d002      	beq.n	800ae7e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ae78:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ae7c:	e009      	b.n	800ae92 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800ae7e:	697b      	ldr	r3, [r7, #20]
 800ae80:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d002      	beq.n	800ae8e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ae88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ae8c:	e001      	b.n	800ae92 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ae8e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800ae92:	4618      	mov	r0, r3
 800ae94:	3720      	adds	r7, #32
 800ae96:	46bd      	mov	sp, r7
 800ae98:	bd80      	pop	{r7, pc}
 800ae9a:	bf00      	nop
 800ae9c:	2000001c 	.word	0x2000001c
 800aea0:	10624dd3 	.word	0x10624dd3

0800aea4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800aea4:	b480      	push	{r7}
 800aea6:	b085      	sub	sp, #20
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800aeac:	4b22      	ldr	r3, [pc, #136]	@ (800af38 <SDMMC_GetCmdResp7+0x94>)
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	4a22      	ldr	r2, [pc, #136]	@ (800af3c <SDMMC_GetCmdResp7+0x98>)
 800aeb2:	fba2 2303 	umull	r2, r3, r2, r3
 800aeb6:	0a5b      	lsrs	r3, r3, #9
 800aeb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aebc:	fb02 f303 	mul.w	r3, r2, r3
 800aec0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	1e5a      	subs	r2, r3, #1
 800aec6:	60fa      	str	r2, [r7, #12]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d102      	bne.n	800aed2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aecc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800aed0:	e02c      	b.n	800af2c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aed6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800aed8:	68bb      	ldr	r3, [r7, #8]
 800aeda:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d0ef      	beq.n	800aec2 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800aee2:	68bb      	ldr	r3, [r7, #8]
 800aee4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d1ea      	bne.n	800aec2 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aef0:	f003 0304 	and.w	r3, r3, #4
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d004      	beq.n	800af02 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	2204      	movs	r2, #4
 800aefc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800aefe:	2304      	movs	r3, #4
 800af00:	e014      	b.n	800af2c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af06:	f003 0301 	and.w	r3, r3, #1
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d004      	beq.n	800af18 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	2201      	movs	r2, #1
 800af12:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800af14:	2301      	movs	r3, #1
 800af16:	e009      	b.n	800af2c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af20:	2b00      	cmp	r3, #0
 800af22:	d002      	beq.n	800af2a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	2240      	movs	r2, #64	@ 0x40
 800af28:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800af2a:	2300      	movs	r3, #0
  
}
 800af2c:	4618      	mov	r0, r3
 800af2e:	3714      	adds	r7, #20
 800af30:	46bd      	mov	sp, r7
 800af32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af36:	4770      	bx	lr
 800af38:	2000001c 	.word	0x2000001c
 800af3c:	10624dd3 	.word	0x10624dd3

0800af40 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800af40:	b480      	push	{r7}
 800af42:	b085      	sub	sp, #20
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800af48:	4b11      	ldr	r3, [pc, #68]	@ (800af90 <SDMMC_GetCmdError+0x50>)
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	4a11      	ldr	r2, [pc, #68]	@ (800af94 <SDMMC_GetCmdError+0x54>)
 800af4e:	fba2 2303 	umull	r2, r3, r2, r3
 800af52:	0a5b      	lsrs	r3, r3, #9
 800af54:	f241 3288 	movw	r2, #5000	@ 0x1388
 800af58:	fb02 f303 	mul.w	r3, r2, r3
 800af5c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	1e5a      	subs	r2, r3, #1
 800af62:	60fa      	str	r2, [r7, #12]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d102      	bne.n	800af6e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800af68:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800af6c:	e009      	b.n	800af82 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800af76:	2b00      	cmp	r3, #0
 800af78:	d0f1      	beq.n	800af5e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	22c5      	movs	r2, #197	@ 0xc5
 800af7e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800af80:	2300      	movs	r3, #0
}
 800af82:	4618      	mov	r0, r3
 800af84:	3714      	adds	r7, #20
 800af86:	46bd      	mov	sp, r7
 800af88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8c:	4770      	bx	lr
 800af8e:	bf00      	nop
 800af90:	2000001c 	.word	0x2000001c
 800af94:	10624dd3 	.word	0x10624dd3

0800af98 <AUDIO_REC_Start>:
  * @brief  Starts Audio streaming.    
  * @param  None
  * @retval Audio error
  */ 
AUDIO_ErrorTypeDef AUDIO_REC_Start(void)
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b090      	sub	sp, #64	@ 0x40
 800af9c:	af00      	add	r7, sp, #0
  uint32_t byteswritten = 0;
 800af9e:	2300      	movs	r3, #0
 800afa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint8_t str[FILEMGR_FILE_NAME_SIZE + 20];

  uwVolume = 100;
 800afa2:	4b33      	ldr	r3, [pc, #204]	@ (800b070 <AUDIO_REC_Start+0xd8>)
 800afa4:	2264      	movs	r2, #100	@ 0x64
 800afa6:	601a      	str	r2, [r3, #0]

  /* Create a new file system */
  if (f_mount(&SDFatFS, (TCHAR const*) SDPath, 0) != FR_OK) {
 800afa8:	2200      	movs	r2, #0
 800afaa:	4932      	ldr	r1, [pc, #200]	@ (800b074 <AUDIO_REC_Start+0xdc>)
 800afac:	4832      	ldr	r0, [pc, #200]	@ (800b078 <AUDIO_REC_Start+0xe0>)
 800afae:	f002 faed 	bl	800d58c <f_mount>
 800afb2:	4603      	mov	r3, r0
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d002      	beq.n	800afbe <AUDIO_REC_Start+0x26>
    	Error_Handler(); /* FatFs Initialization Error */
 800afb8:	f7f7 f8b0 	bl	800211c <Error_Handler>
 800afbc:	e052      	b.n	800b064 <AUDIO_REC_Start+0xcc>
  } else {
	  printf("SD card mounted\r\n");
 800afbe:	482f      	ldr	r0, [pc, #188]	@ (800b07c <AUDIO_REC_Start+0xe4>)
 800afc0:	f009 fc4c 	bl	801485c <puts>
		  	  sizeof(workBuffer)) != FR_OK) {
		  Error_Handler(); / * FatFs Format Error */
//	  } else {
//	  */

	  printf("WAV file created\r\n");
 800afc4:	482e      	ldr	r0, [pc, #184]	@ (800b080 <AUDIO_REC_Start+0xe8>)
 800afc6:	f009 fc49 	bl	801485c <puts>
	  if(f_open(&WavFile, REC_WAVE_NAME, FA_CREATE_ALWAYS | FA_WRITE) == FR_OK)
 800afca:	220a      	movs	r2, #10
 800afcc:	492d      	ldr	r1, [pc, #180]	@ (800b084 <AUDIO_REC_Start+0xec>)
 800afce:	482e      	ldr	r0, [pc, #184]	@ (800b088 <AUDIO_REC_Start+0xf0>)
 800afd0:	f002 fb22 	bl	800d618 <f_open>
 800afd4:	4603      	mov	r3, r0
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d144      	bne.n	800b064 <AUDIO_REC_Start+0xcc>
	  {
		/* Initialize header file */
		WavProcess_EncInit(DEFAULT_AUDIO_IN_FREQ, pHeaderBuff);
 800afda:	492c      	ldr	r1, [pc, #176]	@ (800b08c <AUDIO_REC_Start+0xf4>)
 800afdc:	f44f 507a 	mov.w	r0, #16000	@ 0x3e80
 800afe0:	f000 f9c6 	bl	800b370 <WavProcess_EncInit>

		/* Write header file */
		if(f_write(&WavFile, pHeaderBuff, 44, (void*)&byteswritten) == FR_OK)
 800afe4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800afe8:	222c      	movs	r2, #44	@ 0x2c
 800afea:	4928      	ldr	r1, [pc, #160]	@ (800b08c <AUDIO_REC_Start+0xf4>)
 800afec:	4826      	ldr	r0, [pc, #152]	@ (800b088 <AUDIO_REC_Start+0xf0>)
 800afee:	f002 fe0c 	bl	800dc0a <f_write>
 800aff2:	4603      	mov	r3, r0
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d135      	bne.n	800b064 <AUDIO_REC_Start+0xcc>
		{
		  printf("State : ready to record\r\n");
 800aff8:	4825      	ldr	r0, [pc, #148]	@ (800b090 <AUDIO_REC_Start+0xf8>)
 800affa:	f009 fc2f 	bl	801485c <puts>
		  AudioState = AUDIO_STATE_RECORD;
 800affe:	4b25      	ldr	r3, [pc, #148]	@ (800b094 <AUDIO_REC_Start+0xfc>)
 800b000:	2205      	movs	r2, #5
 800b002:	701a      	strb	r2, [r3, #0]

			if(byteswritten != 0)
 800b004:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b006:	2b00      	cmp	r3, #0
 800b008:	d02c      	beq.n	800b064 <AUDIO_REC_Start+0xcc>
			{
			  BSP_AUDIO_IN_Init(DEFAULT_AUDIO_IN_FREQ, DEFAULT_AUDIO_IN_BIT_RESOLUTION, DEFAULT_AUDIO_IN_CHANNEL_NBR);
 800b00a:	2202      	movs	r2, #2
 800b00c:	2110      	movs	r1, #16
 800b00e:	f44f 507a 	mov.w	r0, #16000	@ 0x3e80
 800b012:	f7f9 fb63 	bl	80046dc <BSP_AUDIO_IN_Init>
			  printf("Recording config initialized\r\n");
 800b016:	4820      	ldr	r0, [pc, #128]	@ (800b098 <AUDIO_REC_Start+0x100>)
 800b018:	f009 fc20 	bl	801485c <puts>
			  BSP_AUDIO_IN_Record((uint16_t*)&BufferCtl.pcm_buff[0], AUDIO_IN_PCM_BUFFER_SIZE);
 800b01c:	f44f 5110 	mov.w	r1, #9216	@ 0x2400
 800b020:	481e      	ldr	r0, [pc, #120]	@ (800b09c <AUDIO_REC_Start+0x104>)
 800b022:	f7f9 fbd9 	bl	80047d8 <BSP_AUDIO_IN_Record>
			  printf("Recording started...\r\n");
 800b026:	481e      	ldr	r0, [pc, #120]	@ (800b0a0 <AUDIO_REC_Start+0x108>)
 800b028:	f009 fc18 	bl	801485c <puts>
			  BufferCtl.fptr = byteswritten;
 800b02c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b02e:	4a1b      	ldr	r2, [pc, #108]	@ (800b09c <AUDIO_REC_Start+0x104>)
 800b030:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 800b034:	f8c2 380c 	str.w	r3, [r2, #2060]	@ 0x80c
			  BufferCtl.pcm_ptr = 0;
 800b038:	4b18      	ldr	r3, [pc, #96]	@ (800b09c <AUDIO_REC_Start+0x104>)
 800b03a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800b03e:	461a      	mov	r2, r3
 800b040:	2300      	movs	r3, #0
 800b042:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800
			  BufferCtl.offset = 0;
 800b046:	4b15      	ldr	r3, [pc, #84]	@ (800b09c <AUDIO_REC_Start+0x104>)
 800b048:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800b04c:	461a      	mov	r2, r3
 800b04e:	2300      	movs	r3, #0
 800b050:	f8c2 3808 	str.w	r3, [r2, #2056]	@ 0x808
			  BufferCtl.wr_state = BUFFER_EMPTY;
 800b054:	4b11      	ldr	r3, [pc, #68]	@ (800b09c <AUDIO_REC_Start+0x104>)
 800b056:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800b05a:	2200      	movs	r2, #0
 800b05c:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
			  return AUDIO_ERROR_NONE;
 800b060:	2300      	movs	r3, #0
 800b062:	e000      	b.n	800b066 <AUDIO_REC_Start+0xce>
			}
		}
	  }
	  //}
  }
  return AUDIO_ERROR_IO;
 800b064:	2301      	movs	r3, #1
}
 800b066:	4618      	mov	r0, r3
 800b068:	3740      	adds	r7, #64	@ 0x40
 800b06a:	46bd      	mov	sp, r7
 800b06c:	bd80      	pop	{r7, pc}
 800b06e:	bf00      	nop
 800b070:	2000005c 	.word	0x2000005c
 800b074:	2002e440 	.word	0x2002e440
 800b078:	2002e444 	.word	0x2002e444
 800b07c:	08017888 	.word	0x08017888
 800b080:	0801789c 	.word	0x0801789c
 800b084:	080178b0 	.word	0x080178b0
 800b088:	2002e20c 	.word	0x2002e20c
 800b08c:	200299a4 	.word	0x200299a4
 800b090:	080178bc 	.word	0x080178bc
 800b094:	20000a24 	.word	0x20000a24
 800b098:	080178d8 	.word	0x080178d8
 800b09c:	200299d0 	.word	0x200299d0
 800b0a0:	080178f8 	.word	0x080178f8

0800b0a4 <AUDIO_REC_Process>:
  * @brief  Manages Audio process. 
  * @param  None
  * @retval Audio error
  */
AUDIO_ErrorTypeDef AUDIO_REC_Process(void)
{
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	b088      	sub	sp, #32
 800b0a8:	af00      	add	r7, sp, #0
  uint32_t byteswritten = 0;
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	617b      	str	r3, [r7, #20]
  AUDIO_ErrorTypeDef audio_error = AUDIO_ERROR_NONE;
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	77fb      	strb	r3, [r7, #31]
  uint32_t elapsed_time; 
  static uint32_t prev_elapsed_time = 0xFFFFFFFF;
  uint8_t str[16];
  //static TS_StateTypeDef  TS_State={0};
  //printf("PRE SWITCH\r\n");
  switch(AudioState)
 800b0b2:	4b59      	ldr	r3, [pc, #356]	@ (800b218 <AUDIO_REC_Process+0x174>)
 800b0b4:	781b      	ldrb	r3, [r3, #0]
 800b0b6:	2b05      	cmp	r3, #5
 800b0b8:	d002      	beq.n	800b0c0 <AUDIO_REC_Process+0x1c>
 800b0ba:	2b0a      	cmp	r3, #10
 800b0bc:	d079      	beq.n	800b1b2 <AUDIO_REC_Process+0x10e>

  	case AUDIO_STATE_IDLE:
  	case AUDIO_STATE_INIT:
  	default:
      /* Do Nothing */
      break;
 800b0be:	e0a7      	b.n	800b210 <AUDIO_REC_Process+0x16c>
      if(BufferCtl.fptr >= REC_SAMPLE_LENGTH)
 800b0c0:	4b56      	ldr	r3, [pc, #344]	@ (800b21c <AUDIO_REC_Process+0x178>)
 800b0c2:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800b0c6:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800b0ca:	f5b3 4f7a 	cmp.w	r3, #64000	@ 0xfa00
 800b0ce:	d303      	bcc.n	800b0d8 <AUDIO_REC_Process+0x34>
        AudioState = AUDIO_STATE_STOP;
 800b0d0:	4b51      	ldr	r3, [pc, #324]	@ (800b218 <AUDIO_REC_Process+0x174>)
 800b0d2:	220a      	movs	r2, #10
 800b0d4:	701a      	strb	r2, [r3, #0]
        break;
 800b0d6:	e09b      	b.n	800b210 <AUDIO_REC_Process+0x16c>
      if(BufferCtl.wr_state == BUFFER_FULL)
 800b0d8:	4b50      	ldr	r3, [pc, #320]	@ (800b21c <AUDIO_REC_Process+0x178>)
 800b0da:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800b0de:	f893 3804 	ldrb.w	r3, [r3, #2052]	@ 0x804
 800b0e2:	2b01      	cmp	r3, #1
 800b0e4:	d128      	bne.n	800b138 <AUDIO_REC_Process+0x94>
        if(f_write(&WavFile, (uint8_t*)(BufferCtl.pcm_buff + BufferCtl.offset),
 800b0e6:	4b4d      	ldr	r3, [pc, #308]	@ (800b21c <AUDIO_REC_Process+0x178>)
 800b0e8:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800b0ec:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 800b0f0:	005b      	lsls	r3, r3, #1
 800b0f2:	4a4a      	ldr	r2, [pc, #296]	@ (800b21c <AUDIO_REC_Process+0x178>)
 800b0f4:	1899      	adds	r1, r3, r2
 800b0f6:	f107 0314 	add.w	r3, r7, #20
 800b0fa:	f44f 5210 	mov.w	r2, #9216	@ 0x2400
 800b0fe:	4848      	ldr	r0, [pc, #288]	@ (800b220 <AUDIO_REC_Process+0x17c>)
 800b100:	f002 fd83 	bl	800dc0a <f_write>
 800b104:	4603      	mov	r3, r0
 800b106:	2b00      	cmp	r3, #0
 800b108:	d004      	beq.n	800b114 <AUDIO_REC_Process+0x70>
          printf("recording failed\r\n");
 800b10a:	4846      	ldr	r0, [pc, #280]	@ (800b224 <AUDIO_REC_Process+0x180>)
 800b10c:	f009 fba6 	bl	801485c <puts>
          return AUDIO_ERROR_IO;
 800b110:	2301      	movs	r3, #1
 800b112:	e07d      	b.n	800b210 <AUDIO_REC_Process+0x16c>
        BufferCtl.fptr += byteswritten;
 800b114:	4b41      	ldr	r3, [pc, #260]	@ (800b21c <AUDIO_REC_Process+0x178>)
 800b116:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800b11a:	f8d3 280c 	ldr.w	r2, [r3, #2060]	@ 0x80c
 800b11e:	697b      	ldr	r3, [r7, #20]
 800b120:	4413      	add	r3, r2
 800b122:	4a3e      	ldr	r2, [pc, #248]	@ (800b21c <AUDIO_REC_Process+0x178>)
 800b124:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 800b128:	f8c2 380c 	str.w	r3, [r2, #2060]	@ 0x80c
        BufferCtl.wr_state =  BUFFER_EMPTY;
 800b12c:	4b3b      	ldr	r3, [pc, #236]	@ (800b21c <AUDIO_REC_Process+0x178>)
 800b12e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800b132:	2200      	movs	r2, #0
 800b134:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
      elapsed_time = BufferCtl.fptr / (DEFAULT_AUDIO_IN_FREQ * DEFAULT_AUDIO_IN_CHANNEL_NBR * 2);
 800b138:	4b38      	ldr	r3, [pc, #224]	@ (800b21c <AUDIO_REC_Process+0x178>)
 800b13a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800b13e:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800b142:	4a39      	ldr	r2, [pc, #228]	@ (800b228 <AUDIO_REC_Process+0x184>)
 800b144:	fba2 2303 	umull	r2, r3, r2, r3
 800b148:	0b1b      	lsrs	r3, r3, #12
 800b14a:	61bb      	str	r3, [r7, #24]
      if(prev_elapsed_time != elapsed_time)
 800b14c:	4b37      	ldr	r3, [pc, #220]	@ (800b22c <AUDIO_REC_Process+0x188>)
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	69ba      	ldr	r2, [r7, #24]
 800b152:	429a      	cmp	r2, r3
 800b154:	d05b      	beq.n	800b20e <AUDIO_REC_Process+0x16a>
        prev_elapsed_time = elapsed_time;
 800b156:	4a35      	ldr	r2, [pc, #212]	@ (800b22c <AUDIO_REC_Process+0x188>)
 800b158:	69bb      	ldr	r3, [r7, #24]
 800b15a:	6013      	str	r3, [r2, #0]
        printf("Elapsed time : \r\n");
 800b15c:	4834      	ldr	r0, [pc, #208]	@ (800b230 <AUDIO_REC_Process+0x18c>)
 800b15e:	f009 fb7d 	bl	801485c <puts>
        printf("[%02d:%02d]\r\n", (int)(elapsed_time /60), (int)(elapsed_time%60));
 800b162:	69bb      	ldr	r3, [r7, #24]
 800b164:	4a33      	ldr	r2, [pc, #204]	@ (800b234 <AUDIO_REC_Process+0x190>)
 800b166:	fba2 2303 	umull	r2, r3, r2, r3
 800b16a:	095b      	lsrs	r3, r3, #5
 800b16c:	4618      	mov	r0, r3
 800b16e:	69b9      	ldr	r1, [r7, #24]
 800b170:	4b30      	ldr	r3, [pc, #192]	@ (800b234 <AUDIO_REC_Process+0x190>)
 800b172:	fba3 2301 	umull	r2, r3, r3, r1
 800b176:	095a      	lsrs	r2, r3, #5
 800b178:	4613      	mov	r3, r2
 800b17a:	011b      	lsls	r3, r3, #4
 800b17c:	1a9b      	subs	r3, r3, r2
 800b17e:	009b      	lsls	r3, r3, #2
 800b180:	1aca      	subs	r2, r1, r3
 800b182:	4613      	mov	r3, r2
 800b184:	461a      	mov	r2, r3
 800b186:	4601      	mov	r1, r0
 800b188:	482b      	ldr	r0, [pc, #172]	@ (800b238 <AUDIO_REC_Process+0x194>)
 800b18a:	f009 faff 	bl	801478c <iprintf>
        printf("File size : \r\n");
 800b18e:	482b      	ldr	r0, [pc, #172]	@ (800b23c <AUDIO_REC_Process+0x198>)
 800b190:	f009 fb64 	bl	801485c <puts>
        printf("%4d KB\r\n", (int)((int32_t)BufferCtl.fptr/1024));
 800b194:	4b21      	ldr	r3, [pc, #132]	@ (800b21c <AUDIO_REC_Process+0x178>)
 800b196:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800b19a:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	da01      	bge.n	800b1a6 <AUDIO_REC_Process+0x102>
 800b1a2:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 800b1a6:	129b      	asrs	r3, r3, #10
 800b1a8:	4619      	mov	r1, r3
 800b1aa:	4825      	ldr	r0, [pc, #148]	@ (800b240 <AUDIO_REC_Process+0x19c>)
 800b1ac:	f009 faee 	bl	801478c <iprintf>
      break;
 800b1b0:	e02d      	b.n	800b20e <AUDIO_REC_Process+0x16a>
      BSP_AUDIO_IN_Stop(CODEC_PDWN_SW);
 800b1b2:	2002      	movs	r0, #2
 800b1b4:	f7f9 fb28 	bl	8004808 <BSP_AUDIO_IN_Stop>
      HAL_Delay(300);
 800b1b8:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800b1bc:	f7f9 fd3e 	bl	8004c3c <HAL_Delay>
      if(f_lseek(&WavFile, 0) == FR_OK)
 800b1c0:	2100      	movs	r1, #0
 800b1c2:	4817      	ldr	r0, [pc, #92]	@ (800b220 <AUDIO_REC_Process+0x17c>)
 800b1c4:	f002 ff3e 	bl	800e044 <f_lseek>
 800b1c8:	4603      	mov	r3, r0
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d113      	bne.n	800b1f6 <AUDIO_REC_Process+0x152>
        WavProcess_HeaderUpdate(pHeaderBuff, &WaveFormat);
 800b1ce:	491d      	ldr	r1, [pc, #116]	@ (800b244 <AUDIO_REC_Process+0x1a0>)
 800b1d0:	481d      	ldr	r0, [pc, #116]	@ (800b248 <AUDIO_REC_Process+0x1a4>)
 800b1d2:	f000 f9e5 	bl	800b5a0 <WavProcess_HeaderUpdate>
        if(f_write(&WavFile, pHeaderBuff, sizeof(WAVE_FormatTypeDef), (void*)&byteswritten) == FR_OK)
 800b1d6:	f107 0314 	add.w	r3, r7, #20
 800b1da:	222c      	movs	r2, #44	@ 0x2c
 800b1dc:	491a      	ldr	r1, [pc, #104]	@ (800b248 <AUDIO_REC_Process+0x1a4>)
 800b1de:	4810      	ldr	r0, [pc, #64]	@ (800b220 <AUDIO_REC_Process+0x17c>)
 800b1e0:	f002 fd13 	bl	800dc0a <f_write>
 800b1e4:	4603      	mov	r3, r0
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d102      	bne.n	800b1f0 <AUDIO_REC_Process+0x14c>
          audio_error = AUDIO_ERROR_EOF;
 800b1ea:	2302      	movs	r3, #2
 800b1ec:	77fb      	strb	r3, [r7, #31]
 800b1ee:	e004      	b.n	800b1fa <AUDIO_REC_Process+0x156>
          audio_error = AUDIO_ERROR_IO;
 800b1f0:	2301      	movs	r3, #1
 800b1f2:	77fb      	strb	r3, [r7, #31]
 800b1f4:	e001      	b.n	800b1fa <AUDIO_REC_Process+0x156>
        audio_error = AUDIO_ERROR_IO;
 800b1f6:	2301      	movs	r3, #1
 800b1f8:	77fb      	strb	r3, [r7, #31]
      AudioState = AUDIO_STATE_IDLE;
 800b1fa:	4b07      	ldr	r3, [pc, #28]	@ (800b218 <AUDIO_REC_Process+0x174>)
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	701a      	strb	r2, [r3, #0]
      f_close(&WavFile);
 800b200:	4807      	ldr	r0, [pc, #28]	@ (800b220 <AUDIO_REC_Process+0x17c>)
 800b202:	f002 fef5 	bl	800dff0 <f_close>
      printf("wave file closed success\r\n");
 800b206:	4811      	ldr	r0, [pc, #68]	@ (800b24c <AUDIO_REC_Process+0x1a8>)
 800b208:	f009 fb28 	bl	801485c <puts>
      break;
 800b20c:	e000      	b.n	800b210 <AUDIO_REC_Process+0x16c>
      break;
 800b20e:	bf00      	nop
      return audio_error;
    }
}
 800b210:	4618      	mov	r0, r3
 800b212:	3720      	adds	r7, #32
 800b214:	46bd      	mov	sp, r7
 800b216:	bd80      	pop	{r7, pc}
 800b218:	20000a24 	.word	0x20000a24
 800b21c:	200299d0 	.word	0x200299d0
 800b220:	2002e20c 	.word	0x2002e20c
 800b224:	08017910 	.word	0x08017910
 800b228:	10624dd3 	.word	0x10624dd3
 800b22c:	20000060 	.word	0x20000060
 800b230:	08017924 	.word	0x08017924
 800b234:	88888889 	.word	0x88888889
 800b238:	08017938 	.word	0x08017938
 800b23c:	08017948 	.word	0x08017948
 800b240:	08017958 	.word	0x08017958
 800b244:	2002e1e0 	.word	0x2002e1e0
 800b248:	200299a4 	.word	0x200299a4
 800b24c:	08017964 	.word	0x08017964

0800b250 <BSP_AUDIO_IN_TransferComplete_CallBack>:
  * @brief  Calculates the remaining file size and new position of the pointer.
  * @param  None
  * @retval None
  */
void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
 800b250:	b480      	push	{r7}
 800b252:	af00      	add	r7, sp, #0
  BufferCtl.pcm_ptr+= AUDIO_IN_PCM_BUFFER_SIZE/2;
 800b254:	4b21      	ldr	r3, [pc, #132]	@ (800b2dc <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800b256:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800b25a:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800b25e:	f503 5390 	add.w	r3, r3, #4608	@ 0x1200
 800b262:	4a1e      	ldr	r2, [pc, #120]	@ (800b2dc <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800b264:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 800b268:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800
  if(BufferCtl.pcm_ptr == AUDIO_IN_PCM_BUFFER_SIZE/2)
 800b26c:	4b1b      	ldr	r3, [pc, #108]	@ (800b2dc <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800b26e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800b272:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800b276:	f5b3 5f90 	cmp.w	r3, #4608	@ 0x1200
 800b27a:	d10c      	bne.n	800b296 <BSP_AUDIO_IN_TransferComplete_CallBack+0x46>
  {
    BufferCtl.wr_state   =  BUFFER_FULL;
 800b27c:	4b17      	ldr	r3, [pc, #92]	@ (800b2dc <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800b27e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800b282:	2201      	movs	r2, #1
 800b284:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
    BufferCtl.offset  = 0;
 800b288:	4b14      	ldr	r3, [pc, #80]	@ (800b2dc <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800b28a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800b28e:	461a      	mov	r2, r3
 800b290:	2300      	movs	r3, #0
 800b292:	f8c2 3808 	str.w	r3, [r2, #2056]	@ 0x808
  }
  
  if(BufferCtl.pcm_ptr >= AUDIO_IN_PCM_BUFFER_SIZE)
 800b296:	4b11      	ldr	r3, [pc, #68]	@ (800b2dc <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800b298:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800b29c:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800b2a0:	f5b3 5f10 	cmp.w	r3, #9216	@ 0x2400
 800b2a4:	d314      	bcc.n	800b2d0 <BSP_AUDIO_IN_TransferComplete_CallBack+0x80>
  {
    BufferCtl.wr_state   =  BUFFER_FULL;
 800b2a6:	4b0d      	ldr	r3, [pc, #52]	@ (800b2dc <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800b2a8:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800b2ac:	2201      	movs	r2, #1
 800b2ae:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
    BufferCtl.offset  = AUDIO_IN_PCM_BUFFER_SIZE/2;    
 800b2b2:	4b0a      	ldr	r3, [pc, #40]	@ (800b2dc <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800b2b4:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800b2b8:	461a      	mov	r2, r3
 800b2ba:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 800b2be:	f8c2 3808 	str.w	r3, [r2, #2056]	@ 0x808
    BufferCtl.pcm_ptr = 0;
 800b2c2:	4b06      	ldr	r3, [pc, #24]	@ (800b2dc <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800b2c4:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800b2c8:	461a      	mov	r2, r3
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800
  }
}
 800b2d0:	bf00      	nop
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d8:	4770      	bx	lr
 800b2da:	bf00      	nop
 800b2dc:	200299d0 	.word	0x200299d0

0800b2e0 <BSP_AUDIO_IN_HalfTransfer_CallBack>:
  * @brief  Manages the DMA Half Transfer complete interrupt.
  * @param  None
  * @retval None
  */
void BSP_AUDIO_IN_HalfTransfer_CallBack(void)
{ 
 800b2e0:	b480      	push	{r7}
 800b2e2:	af00      	add	r7, sp, #0
  BufferCtl.pcm_ptr+= AUDIO_IN_PCM_BUFFER_SIZE/2;
 800b2e4:	4b21      	ldr	r3, [pc, #132]	@ (800b36c <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800b2e6:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800b2ea:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800b2ee:	f503 5390 	add.w	r3, r3, #4608	@ 0x1200
 800b2f2:	4a1e      	ldr	r2, [pc, #120]	@ (800b36c <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800b2f4:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 800b2f8:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800
  if(BufferCtl.pcm_ptr == AUDIO_IN_PCM_BUFFER_SIZE/2)
 800b2fc:	4b1b      	ldr	r3, [pc, #108]	@ (800b36c <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800b2fe:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800b302:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800b306:	f5b3 5f90 	cmp.w	r3, #4608	@ 0x1200
 800b30a:	d10c      	bne.n	800b326 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x46>
  {
    BufferCtl.wr_state   =  BUFFER_FULL;
 800b30c:	4b17      	ldr	r3, [pc, #92]	@ (800b36c <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800b30e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800b312:	2201      	movs	r2, #1
 800b314:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
    BufferCtl.offset  = 0;
 800b318:	4b14      	ldr	r3, [pc, #80]	@ (800b36c <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800b31a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800b31e:	461a      	mov	r2, r3
 800b320:	2300      	movs	r3, #0
 800b322:	f8c2 3808 	str.w	r3, [r2, #2056]	@ 0x808
  }
  
  if(BufferCtl.pcm_ptr >= AUDIO_IN_PCM_BUFFER_SIZE)
 800b326:	4b11      	ldr	r3, [pc, #68]	@ (800b36c <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800b328:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800b32c:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800b330:	f5b3 5f10 	cmp.w	r3, #9216	@ 0x2400
 800b334:	d314      	bcc.n	800b360 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x80>
  {
    BufferCtl.wr_state   =  BUFFER_FULL;
 800b336:	4b0d      	ldr	r3, [pc, #52]	@ (800b36c <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800b338:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800b33c:	2201      	movs	r2, #1
 800b33e:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
    BufferCtl.offset  = AUDIO_IN_PCM_BUFFER_SIZE/2;    
 800b342:	4b0a      	ldr	r3, [pc, #40]	@ (800b36c <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800b344:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800b348:	461a      	mov	r2, r3
 800b34a:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 800b34e:	f8c2 3808 	str.w	r3, [r2, #2056]	@ 0x808
    BufferCtl.pcm_ptr = 0;
 800b352:	4b06      	ldr	r3, [pc, #24]	@ (800b36c <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800b354:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800b358:	461a      	mov	r2, r3
 800b35a:	2300      	movs	r3, #0
 800b35c:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800
  }
}
 800b360:	bf00      	nop
 800b362:	46bd      	mov	sp, r7
 800b364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b368:	4770      	bx	lr
 800b36a:	bf00      	nop
 800b36c:	200299d0 	.word	0x200299d0

0800b370 <WavProcess_EncInit>:
  * @param  Freq: Sampling frequency.
  * @param  pHeader: Pointer to the WAV file header to be written.  
  * @retval 0 if success, !0 else.
  */
static uint32_t WavProcess_EncInit(uint32_t Freq, uint8_t *pHeader)
{  
 800b370:	b580      	push	{r7, lr}
 800b372:	b082      	sub	sp, #8
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
 800b378:	6039      	str	r1, [r7, #0]
  /* Initialize the encoder structure */
  WaveFormat.SampleRate = Freq;        /* Audio sampling frequency */
 800b37a:	4a1b      	ldr	r2, [pc, #108]	@ (800b3e8 <WavProcess_EncInit+0x78>)
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	6193      	str	r3, [r2, #24]
  WaveFormat.NbrChannels = 2;          /* Number of channels: 1:Mono or 2:Stereo */
 800b380:	4b19      	ldr	r3, [pc, #100]	@ (800b3e8 <WavProcess_EncInit+0x78>)
 800b382:	2202      	movs	r2, #2
 800b384:	82da      	strh	r2, [r3, #22]
  WaveFormat.BitPerSample = 16;        /* Number of bits per sample (16, 24 or 32) */
 800b386:	4b18      	ldr	r3, [pc, #96]	@ (800b3e8 <WavProcess_EncInit+0x78>)
 800b388:	2210      	movs	r2, #16
 800b38a:	845a      	strh	r2, [r3, #34]	@ 0x22
  WaveFormat.FileSize = 0x001D4C00;    /* Total length of useful audio data (payload) */
 800b38c:	4b16      	ldr	r3, [pc, #88]	@ (800b3e8 <WavProcess_EncInit+0x78>)
 800b38e:	4a17      	ldr	r2, [pc, #92]	@ (800b3ec <WavProcess_EncInit+0x7c>)
 800b390:	605a      	str	r2, [r3, #4]
  WaveFormat.SubChunk1Size = 44;       /* The file header chunk size */
 800b392:	4b15      	ldr	r3, [pc, #84]	@ (800b3e8 <WavProcess_EncInit+0x78>)
 800b394:	222c      	movs	r2, #44	@ 0x2c
 800b396:	611a      	str	r2, [r3, #16]
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
 800b398:	4b13      	ldr	r3, [pc, #76]	@ (800b3e8 <WavProcess_EncInit+0x78>)
 800b39a:	699b      	ldr	r3, [r3, #24]
                        (WaveFormat.BitPerSample/8) * \
 800b39c:	4a12      	ldr	r2, [pc, #72]	@ (800b3e8 <WavProcess_EncInit+0x78>)
 800b39e:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 800b3a0:	08d2      	lsrs	r2, r2, #3
 800b3a2:	b292      	uxth	r2, r2
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
 800b3a4:	fb02 f303 	mul.w	r3, r2, r3
                         WaveFormat.NbrChannels);     /* Number of bytes per second  (sample rate * block align)  */
 800b3a8:	4a0f      	ldr	r2, [pc, #60]	@ (800b3e8 <WavProcess_EncInit+0x78>)
 800b3aa:	8ad2      	ldrh	r2, [r2, #22]
                        (WaveFormat.BitPerSample/8) * \
 800b3ac:	fb02 f303 	mul.w	r3, r2, r3
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
 800b3b0:	4a0d      	ldr	r2, [pc, #52]	@ (800b3e8 <WavProcess_EncInit+0x78>)
 800b3b2:	61d3      	str	r3, [r2, #28]
  WaveFormat.BlockAlign = WaveFormat.NbrChannels * \
 800b3b4:	4b0c      	ldr	r3, [pc, #48]	@ (800b3e8 <WavProcess_EncInit+0x78>)
 800b3b6:	8ada      	ldrh	r2, [r3, #22]
                         (WaveFormat.BitPerSample/8); /* channels * bits/sample / 8 */
 800b3b8:	4b0b      	ldr	r3, [pc, #44]	@ (800b3e8 <WavProcess_EncInit+0x78>)
 800b3ba:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
  WaveFormat.BlockAlign = WaveFormat.NbrChannels * \
 800b3bc:	08db      	lsrs	r3, r3, #3
 800b3be:	b29b      	uxth	r3, r3
 800b3c0:	fb12 f303 	smulbb	r3, r2, r3
 800b3c4:	b29a      	uxth	r2, r3
 800b3c6:	4b08      	ldr	r3, [pc, #32]	@ (800b3e8 <WavProcess_EncInit+0x78>)
 800b3c8:	841a      	strh	r2, [r3, #32]
  
  /* Parse the wav file header and extract required information */
  if(WavProcess_HeaderInit(pHeader, &WaveFormat))
 800b3ca:	4907      	ldr	r1, [pc, #28]	@ (800b3e8 <WavProcess_EncInit+0x78>)
 800b3cc:	6838      	ldr	r0, [r7, #0]
 800b3ce:	f000 f80f 	bl	800b3f0 <WavProcess_HeaderInit>
 800b3d2:	4603      	mov	r3, r0
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d001      	beq.n	800b3dc <WavProcess_EncInit+0x6c>
  {
    return 1;
 800b3d8:	2301      	movs	r3, #1
 800b3da:	e000      	b.n	800b3de <WavProcess_EncInit+0x6e>
  }
  return 0;
 800b3dc:	2300      	movs	r3, #0
}
 800b3de:	4618      	mov	r0, r3
 800b3e0:	3708      	adds	r7, #8
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	bd80      	pop	{r7, pc}
 800b3e6:	bf00      	nop
 800b3e8:	2002e1e0 	.word	0x2002e1e0
 800b3ec:	001d4c00 	.word	0x001d4c00

0800b3f0 <WavProcess_HeaderInit>:
  * @param  pHeader: Header Buffer to be filled
  * @param  pWaveFormatStruct: Pointer to the wave structure to be filled.
  * @retval 0 if passed, !0 if failed.
  */
static uint32_t WavProcess_HeaderInit(uint8_t* pHeader, WAVE_FormatTypeDef* pWaveFormatStruct)
{
 800b3f0:	b480      	push	{r7}
 800b3f2:	b083      	sub	sp, #12
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
 800b3f8:	6039      	str	r1, [r7, #0]
  /* Write chunkID, must be 'RIFF'  ------------------------------------------*/
  pHeader[0] = 'R';
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	2252      	movs	r2, #82	@ 0x52
 800b3fe:	701a      	strb	r2, [r3, #0]
  pHeader[1] = 'I';
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	3301      	adds	r3, #1
 800b404:	2249      	movs	r2, #73	@ 0x49
 800b406:	701a      	strb	r2, [r3, #0]
  pHeader[2] = 'F';
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	3302      	adds	r3, #2
 800b40c:	2246      	movs	r2, #70	@ 0x46
 800b40e:	701a      	strb	r2, [r3, #0]
  pHeader[3] = 'F';
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	3303      	adds	r3, #3
 800b414:	2246      	movs	r2, #70	@ 0x46
 800b416:	701a      	strb	r2, [r3, #0]
  
  /* Write the file length ---------------------------------------------------*/
  /* The sampling time: this value will be written back at the end of the 
     recording operation.  Example: 661500 Bytes = 0x000A17FC, byte[7]=0x00, byte[4]=0xFC */
  pHeader[4] = 0x00;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	3304      	adds	r3, #4
 800b41c:	2200      	movs	r2, #0
 800b41e:	701a      	strb	r2, [r3, #0]
  pHeader[5] = 0x4C;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	3305      	adds	r3, #5
 800b424:	224c      	movs	r2, #76	@ 0x4c
 800b426:	701a      	strb	r2, [r3, #0]
  pHeader[6] = 0x1D;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	3306      	adds	r3, #6
 800b42c:	221d      	movs	r2, #29
 800b42e:	701a      	strb	r2, [r3, #0]
  pHeader[7] = 0x00;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	3307      	adds	r3, #7
 800b434:	2200      	movs	r2, #0
 800b436:	701a      	strb	r2, [r3, #0]
  /* Write the file format, must be 'WAVE' -----------------------------------*/
  pHeader[8]  = 'W';
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	3308      	adds	r3, #8
 800b43c:	2257      	movs	r2, #87	@ 0x57
 800b43e:	701a      	strb	r2, [r3, #0]
  pHeader[9]  = 'A';
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	3309      	adds	r3, #9
 800b444:	2241      	movs	r2, #65	@ 0x41
 800b446:	701a      	strb	r2, [r3, #0]
  pHeader[10] = 'V';
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	330a      	adds	r3, #10
 800b44c:	2256      	movs	r2, #86	@ 0x56
 800b44e:	701a      	strb	r2, [r3, #0]
  pHeader[11] = 'E';
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	330b      	adds	r3, #11
 800b454:	2245      	movs	r2, #69	@ 0x45
 800b456:	701a      	strb	r2, [r3, #0]
  
  /* Write the format chunk, must be'fmt ' -----------------------------------*/
  pHeader[12]  = 'f';
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	330c      	adds	r3, #12
 800b45c:	2266      	movs	r2, #102	@ 0x66
 800b45e:	701a      	strb	r2, [r3, #0]
  pHeader[13]  = 'm';
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	330d      	adds	r3, #13
 800b464:	226d      	movs	r2, #109	@ 0x6d
 800b466:	701a      	strb	r2, [r3, #0]
  pHeader[14]  = 't';
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	330e      	adds	r3, #14
 800b46c:	2274      	movs	r2, #116	@ 0x74
 800b46e:	701a      	strb	r2, [r3, #0]
  pHeader[15]  = ' ';
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	330f      	adds	r3, #15
 800b474:	2220      	movs	r2, #32
 800b476:	701a      	strb	r2, [r3, #0]
  
  /* Write the length of the 'fmt' data, must be 0x10 ------------------------*/
  pHeader[16]  = 0x10;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	3310      	adds	r3, #16
 800b47c:	2210      	movs	r2, #16
 800b47e:	701a      	strb	r2, [r3, #0]
  pHeader[17]  = 0x00;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	3311      	adds	r3, #17
 800b484:	2200      	movs	r2, #0
 800b486:	701a      	strb	r2, [r3, #0]
  pHeader[18]  = 0x00;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	3312      	adds	r3, #18
 800b48c:	2200      	movs	r2, #0
 800b48e:	701a      	strb	r2, [r3, #0]
  pHeader[19]  = 0x00;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	3313      	adds	r3, #19
 800b494:	2200      	movs	r2, #0
 800b496:	701a      	strb	r2, [r3, #0]
  
  /* Write the audio format, must be 0x01 (PCM) ------------------------------*/
  pHeader[20]  = 0x01;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	3314      	adds	r3, #20
 800b49c:	2201      	movs	r2, #1
 800b49e:	701a      	strb	r2, [r3, #0]
  pHeader[21]  = 0x00;
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	3315      	adds	r3, #21
 800b4a4:	2200      	movs	r2, #0
 800b4a6:	701a      	strb	r2, [r3, #0]
  
  /* Write the number of channels, ie. 0x01 (Mono) ---------------------------*/
  pHeader[22]  = pWaveFormatStruct->NbrChannels;
 800b4a8:	683b      	ldr	r3, [r7, #0]
 800b4aa:	8ada      	ldrh	r2, [r3, #22]
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	3316      	adds	r3, #22
 800b4b0:	b2d2      	uxtb	r2, r2
 800b4b2:	701a      	strb	r2, [r3, #0]
  pHeader[23]  = 0x00;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	3317      	adds	r3, #23
 800b4b8:	2200      	movs	r2, #0
 800b4ba:	701a      	strb	r2, [r3, #0]
  
  /* Write the Sample Rate in Hz ---------------------------------------------*/
  /* Write Little Endian ie. 8000 = 0x00001F40 => byte[24]=0x40, byte[27]=0x00*/
  pHeader[24]  = (uint8_t)((pWaveFormatStruct->SampleRate & 0xFF));
 800b4bc:	683b      	ldr	r3, [r7, #0]
 800b4be:	699a      	ldr	r2, [r3, #24]
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	3318      	adds	r3, #24
 800b4c4:	b2d2      	uxtb	r2, r2
 800b4c6:	701a      	strb	r2, [r3, #0]
  pHeader[25]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 8) & 0xFF);
 800b4c8:	683b      	ldr	r3, [r7, #0]
 800b4ca:	699b      	ldr	r3, [r3, #24]
 800b4cc:	0a1a      	lsrs	r2, r3, #8
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	3319      	adds	r3, #25
 800b4d2:	b2d2      	uxtb	r2, r2
 800b4d4:	701a      	strb	r2, [r3, #0]
  pHeader[26]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 16) & 0xFF);
 800b4d6:	683b      	ldr	r3, [r7, #0]
 800b4d8:	699b      	ldr	r3, [r3, #24]
 800b4da:	0c1a      	lsrs	r2, r3, #16
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	331a      	adds	r3, #26
 800b4e0:	b2d2      	uxtb	r2, r2
 800b4e2:	701a      	strb	r2, [r3, #0]
  pHeader[27]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 24) & 0xFF);
 800b4e4:	683b      	ldr	r3, [r7, #0]
 800b4e6:	699b      	ldr	r3, [r3, #24]
 800b4e8:	0e1a      	lsrs	r2, r3, #24
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	331b      	adds	r3, #27
 800b4ee:	b2d2      	uxtb	r2, r2
 800b4f0:	701a      	strb	r2, [r3, #0]
  
  /* Write the Byte Rate -----------------------------------------------------*/
  pHeader[28]  = (uint8_t)((pWaveFormatStruct->ByteRate & 0xFF));
 800b4f2:	683b      	ldr	r3, [r7, #0]
 800b4f4:	69da      	ldr	r2, [r3, #28]
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	331c      	adds	r3, #28
 800b4fa:	b2d2      	uxtb	r2, r2
 800b4fc:	701a      	strb	r2, [r3, #0]
  pHeader[29]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 8) & 0xFF);
 800b4fe:	683b      	ldr	r3, [r7, #0]
 800b500:	69db      	ldr	r3, [r3, #28]
 800b502:	0a1a      	lsrs	r2, r3, #8
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	331d      	adds	r3, #29
 800b508:	b2d2      	uxtb	r2, r2
 800b50a:	701a      	strb	r2, [r3, #0]
  pHeader[30]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 16) & 0xFF);
 800b50c:	683b      	ldr	r3, [r7, #0]
 800b50e:	69db      	ldr	r3, [r3, #28]
 800b510:	0c1a      	lsrs	r2, r3, #16
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	331e      	adds	r3, #30
 800b516:	b2d2      	uxtb	r2, r2
 800b518:	701a      	strb	r2, [r3, #0]
  pHeader[31]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 24) & 0xFF);
 800b51a:	683b      	ldr	r3, [r7, #0]
 800b51c:	69db      	ldr	r3, [r3, #28]
 800b51e:	0e1a      	lsrs	r2, r3, #24
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	331f      	adds	r3, #31
 800b524:	b2d2      	uxtb	r2, r2
 800b526:	701a      	strb	r2, [r3, #0]
  
  /* Write the block alignment -----------------------------------------------*/
  pHeader[32]  = pWaveFormatStruct->BlockAlign;
 800b528:	683b      	ldr	r3, [r7, #0]
 800b52a:	8c1a      	ldrh	r2, [r3, #32]
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	3320      	adds	r3, #32
 800b530:	b2d2      	uxtb	r2, r2
 800b532:	701a      	strb	r2, [r3, #0]
  pHeader[33]  = 0x00;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	3321      	adds	r3, #33	@ 0x21
 800b538:	2200      	movs	r2, #0
 800b53a:	701a      	strb	r2, [r3, #0]
  
  /* Write the number of bits per sample -------------------------------------*/
  pHeader[34]  = pWaveFormatStruct->BitPerSample;
 800b53c:	683b      	ldr	r3, [r7, #0]
 800b53e:	8c5a      	ldrh	r2, [r3, #34]	@ 0x22
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	3322      	adds	r3, #34	@ 0x22
 800b544:	b2d2      	uxtb	r2, r2
 800b546:	701a      	strb	r2, [r3, #0]
  pHeader[35]  = 0x00;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	3323      	adds	r3, #35	@ 0x23
 800b54c:	2200      	movs	r2, #0
 800b54e:	701a      	strb	r2, [r3, #0]
  
  /* Write the Data chunk, must be 'data' ------------------------------------*/
  pHeader[36]  = 'd';
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	3324      	adds	r3, #36	@ 0x24
 800b554:	2264      	movs	r2, #100	@ 0x64
 800b556:	701a      	strb	r2, [r3, #0]
  pHeader[37]  = 'a';
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	3325      	adds	r3, #37	@ 0x25
 800b55c:	2261      	movs	r2, #97	@ 0x61
 800b55e:	701a      	strb	r2, [r3, #0]
  pHeader[38]  = 't';
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	3326      	adds	r3, #38	@ 0x26
 800b564:	2274      	movs	r2, #116	@ 0x74
 800b566:	701a      	strb	r2, [r3, #0]
  pHeader[39]  = 'a';
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	3327      	adds	r3, #39	@ 0x27
 800b56c:	2261      	movs	r2, #97	@ 0x61
 800b56e:	701a      	strb	r2, [r3, #0]
  
  /* Write the number of sample data -----------------------------------------*/
  /* This variable will be written back at the end of the recording operation */
  pHeader[40]  = 0x00;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	3328      	adds	r3, #40	@ 0x28
 800b574:	2200      	movs	r2, #0
 800b576:	701a      	strb	r2, [r3, #0]
  pHeader[41]  = 0x4C;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	3329      	adds	r3, #41	@ 0x29
 800b57c:	224c      	movs	r2, #76	@ 0x4c
 800b57e:	701a      	strb	r2, [r3, #0]
  pHeader[42]  = 0x1D;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	332a      	adds	r3, #42	@ 0x2a
 800b584:	221d      	movs	r2, #29
 800b586:	701a      	strb	r2, [r3, #0]
  pHeader[43]  = 0x00;
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	332b      	adds	r3, #43	@ 0x2b
 800b58c:	2200      	movs	r2, #0
 800b58e:	701a      	strb	r2, [r3, #0]
  
  /* Return 0 if all operations are OK */
  return 0;
 800b590:	2300      	movs	r3, #0
}
 800b592:	4618      	mov	r0, r3
 800b594:	370c      	adds	r7, #12
 800b596:	46bd      	mov	sp, r7
 800b598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59c:	4770      	bx	lr
	...

0800b5a0 <WavProcess_HeaderUpdate>:
  * @param  pHeader: Header Buffer to be filled
  * @param  pWaveFormatStruct: Pointer to the wave structure to be filled.
  * @retval 0 if passed, !0 if failed.
  */
static uint32_t WavProcess_HeaderUpdate(uint8_t* pHeader, WAVE_FormatTypeDef* pWaveFormatStruct)
{
 800b5a0:	b480      	push	{r7}
 800b5a2:	b083      	sub	sp, #12
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	6078      	str	r0, [r7, #4]
 800b5a8:	6039      	str	r1, [r7, #0]
  /* Write the file length ---------------------------------------------------*/
  /* The sampling time: this value will be written back at the end of the 
     recording operation.  Example: 661500 Bytes = 0x000A17FC, byte[7]=0x00, byte[4]=0xFC */
  pHeader[4] = (uint8_t)(BufferCtl.fptr);
 800b5aa:	4b30      	ldr	r3, [pc, #192]	@ (800b66c <WavProcess_HeaderUpdate+0xcc>)
 800b5ac:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800b5b0:	f8d3 280c 	ldr.w	r2, [r3, #2060]	@ 0x80c
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	3304      	adds	r3, #4
 800b5b8:	b2d2      	uxtb	r2, r2
 800b5ba:	701a      	strb	r2, [r3, #0]
  pHeader[5] = (uint8_t)(BufferCtl.fptr >> 8);
 800b5bc:	4b2b      	ldr	r3, [pc, #172]	@ (800b66c <WavProcess_HeaderUpdate+0xcc>)
 800b5be:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800b5c2:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800b5c6:	0a1a      	lsrs	r2, r3, #8
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	3305      	adds	r3, #5
 800b5cc:	b2d2      	uxtb	r2, r2
 800b5ce:	701a      	strb	r2, [r3, #0]
  pHeader[6] = (uint8_t)(BufferCtl.fptr >> 16);
 800b5d0:	4b26      	ldr	r3, [pc, #152]	@ (800b66c <WavProcess_HeaderUpdate+0xcc>)
 800b5d2:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800b5d6:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800b5da:	0c1a      	lsrs	r2, r3, #16
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	3306      	adds	r3, #6
 800b5e0:	b2d2      	uxtb	r2, r2
 800b5e2:	701a      	strb	r2, [r3, #0]
  pHeader[7] = (uint8_t)(BufferCtl.fptr >> 24);
 800b5e4:	4b21      	ldr	r3, [pc, #132]	@ (800b66c <WavProcess_HeaderUpdate+0xcc>)
 800b5e6:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800b5ea:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800b5ee:	0e1a      	lsrs	r2, r3, #24
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	3307      	adds	r3, #7
 800b5f4:	b2d2      	uxtb	r2, r2
 800b5f6:	701a      	strb	r2, [r3, #0]
  /* Write the number of sample data -----------------------------------------*/
  /* This variable will be written back at the end of the recording operation */
  BufferCtl.fptr -=44;
 800b5f8:	4b1c      	ldr	r3, [pc, #112]	@ (800b66c <WavProcess_HeaderUpdate+0xcc>)
 800b5fa:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800b5fe:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800b602:	3b2c      	subs	r3, #44	@ 0x2c
 800b604:	4a19      	ldr	r2, [pc, #100]	@ (800b66c <WavProcess_HeaderUpdate+0xcc>)
 800b606:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 800b60a:	f8c2 380c 	str.w	r3, [r2, #2060]	@ 0x80c
  pHeader[40] = (uint8_t)(BufferCtl.fptr); 
 800b60e:	4b17      	ldr	r3, [pc, #92]	@ (800b66c <WavProcess_HeaderUpdate+0xcc>)
 800b610:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800b614:	f8d3 280c 	ldr.w	r2, [r3, #2060]	@ 0x80c
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	3328      	adds	r3, #40	@ 0x28
 800b61c:	b2d2      	uxtb	r2, r2
 800b61e:	701a      	strb	r2, [r3, #0]
  pHeader[41] = (uint8_t)(BufferCtl.fptr >> 8);
 800b620:	4b12      	ldr	r3, [pc, #72]	@ (800b66c <WavProcess_HeaderUpdate+0xcc>)
 800b622:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800b626:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800b62a:	0a1a      	lsrs	r2, r3, #8
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	3329      	adds	r3, #41	@ 0x29
 800b630:	b2d2      	uxtb	r2, r2
 800b632:	701a      	strb	r2, [r3, #0]
  pHeader[42] = (uint8_t)(BufferCtl.fptr >> 16);
 800b634:	4b0d      	ldr	r3, [pc, #52]	@ (800b66c <WavProcess_HeaderUpdate+0xcc>)
 800b636:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800b63a:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800b63e:	0c1a      	lsrs	r2, r3, #16
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	332a      	adds	r3, #42	@ 0x2a
 800b644:	b2d2      	uxtb	r2, r2
 800b646:	701a      	strb	r2, [r3, #0]
  pHeader[43] = (uint8_t)(BufferCtl.fptr >> 24); 
 800b648:	4b08      	ldr	r3, [pc, #32]	@ (800b66c <WavProcess_HeaderUpdate+0xcc>)
 800b64a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800b64e:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800b652:	0e1a      	lsrs	r2, r3, #24
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	332b      	adds	r3, #43	@ 0x2b
 800b658:	b2d2      	uxtb	r2, r2
 800b65a:	701a      	strb	r2, [r3, #0]
  
  /* Return 0 if all operations are OK */
  return 0;
 800b65c:	2300      	movs	r3, #0
}
 800b65e:	4618      	mov	r0, r3
 800b660:	370c      	adds	r7, #12
 800b662:	46bd      	mov	sp, r7
 800b664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b668:	4770      	bx	lr
 800b66a:	bf00      	nop
 800b66c:	200299d0 	.word	0x200299d0

0800b670 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b670:	b580      	push	{r7, lr}
 800b672:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800b674:	4904      	ldr	r1, [pc, #16]	@ (800b688 <MX_FATFS_Init+0x18>)
 800b676:	4805      	ldr	r0, [pc, #20]	@ (800b68c <MX_FATFS_Init+0x1c>)
 800b678:	f003 fb66 	bl	800ed48 <FATFS_LinkDriver>
 800b67c:	4603      	mov	r3, r0
 800b67e:	461a      	mov	r2, r3
 800b680:	4b03      	ldr	r3, [pc, #12]	@ (800b690 <MX_FATFS_Init+0x20>)
 800b682:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b684:	bf00      	nop
 800b686:	bd80      	pop	{r7, pc}
 800b688:	2002e440 	.word	0x2002e440
 800b68c:	08017a14 	.word	0x08017a14
 800b690:	2002e43c 	.word	0x2002e43c

0800b694 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800b694:	b480      	push	{r7}
 800b696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800b698:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800b69a:	4618      	mov	r0, r3
 800b69c:	46bd      	mov	sp, r7
 800b69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a2:	4770      	bx	lr

0800b6a4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800b6a4:	b580      	push	{r7, lr}
 800b6a6:	b082      	sub	sp, #8
 800b6a8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800b6ae:	f000 f888 	bl	800b7c2 <BSP_SD_IsDetected>
 800b6b2:	4603      	mov	r3, r0
 800b6b4:	2b01      	cmp	r3, #1
 800b6b6:	d001      	beq.n	800b6bc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800b6b8:	2302      	movs	r3, #2
 800b6ba:	e005      	b.n	800b6c8 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800b6bc:	4804      	ldr	r0, [pc, #16]	@ (800b6d0 <BSP_SD_Init+0x2c>)
 800b6be:	f7fd f90a 	bl	80088d6 <HAL_SD_Init>
 800b6c2:	4603      	mov	r3, r0
 800b6c4:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800b6c6:	79fb      	ldrb	r3, [r7, #7]
}
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	3708      	adds	r7, #8
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	bd80      	pop	{r7, pc}
 800b6d0:	200295a8 	.word	0x200295a8

0800b6d4 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b086      	sub	sp, #24
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	60f8      	str	r0, [r7, #12]
 800b6dc:	60b9      	str	r1, [r7, #8]
 800b6de:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	68ba      	ldr	r2, [r7, #8]
 800b6e8:	68f9      	ldr	r1, [r7, #12]
 800b6ea:	4806      	ldr	r0, [pc, #24]	@ (800b704 <BSP_SD_ReadBlocks_DMA+0x30>)
 800b6ec:	f7fd f9ac 	bl	8008a48 <HAL_SD_ReadBlocks_DMA>
 800b6f0:	4603      	mov	r3, r0
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d001      	beq.n	800b6fa <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800b6f6:	2301      	movs	r3, #1
 800b6f8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b6fa:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	3718      	adds	r7, #24
 800b700:	46bd      	mov	sp, r7
 800b702:	bd80      	pop	{r7, pc}
 800b704:	200295a8 	.word	0x200295a8

0800b708 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800b708:	b580      	push	{r7, lr}
 800b70a:	b086      	sub	sp, #24
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	60f8      	str	r0, [r7, #12]
 800b710:	60b9      	str	r1, [r7, #8]
 800b712:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800b714:	2300      	movs	r3, #0
 800b716:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	68ba      	ldr	r2, [r7, #8]
 800b71c:	68f9      	ldr	r1, [r7, #12]
 800b71e:	4806      	ldr	r0, [pc, #24]	@ (800b738 <BSP_SD_WriteBlocks_DMA+0x30>)
 800b720:	f7fd fa74 	bl	8008c0c <HAL_SD_WriteBlocks_DMA>
 800b724:	4603      	mov	r3, r0
 800b726:	2b00      	cmp	r3, #0
 800b728:	d001      	beq.n	800b72e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800b72a:	2301      	movs	r3, #1
 800b72c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b72e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b730:	4618      	mov	r0, r3
 800b732:	3718      	adds	r7, #24
 800b734:	46bd      	mov	sp, r7
 800b736:	bd80      	pop	{r7, pc}
 800b738:	200295a8 	.word	0x200295a8

0800b73c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800b740:	4805      	ldr	r0, [pc, #20]	@ (800b758 <BSP_SD_GetCardState+0x1c>)
 800b742:	f7fd fe99 	bl	8009478 <HAL_SD_GetCardState>
 800b746:	4603      	mov	r3, r0
 800b748:	2b04      	cmp	r3, #4
 800b74a:	bf14      	ite	ne
 800b74c:	2301      	movne	r3, #1
 800b74e:	2300      	moveq	r3, #0
 800b750:	b2db      	uxtb	r3, r3
}
 800b752:	4618      	mov	r0, r3
 800b754:	bd80      	pop	{r7, pc}
 800b756:	bf00      	nop
 800b758:	200295a8 	.word	0x200295a8

0800b75c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b082      	sub	sp, #8
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800b764:	6879      	ldr	r1, [r7, #4]
 800b766:	4803      	ldr	r0, [pc, #12]	@ (800b774 <BSP_SD_GetCardInfo+0x18>)
 800b768:	f7fd fe5a 	bl	8009420 <HAL_SD_GetCardInfo>
}
 800b76c:	bf00      	nop
 800b76e:	3708      	adds	r7, #8
 800b770:	46bd      	mov	sp, r7
 800b772:	bd80      	pop	{r7, pc}
 800b774:	200295a8 	.word	0x200295a8

0800b778 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b082      	sub	sp, #8
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800b780:	f000 f818 	bl	800b7b4 <BSP_SD_AbortCallback>
}
 800b784:	bf00      	nop
 800b786:	3708      	adds	r7, #8
 800b788:	46bd      	mov	sp, r7
 800b78a:	bd80      	pop	{r7, pc}

0800b78c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800b78c:	b580      	push	{r7, lr}
 800b78e:	b082      	sub	sp, #8
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800b794:	f000 f9a8 	bl	800bae8 <BSP_SD_WriteCpltCallback>
}
 800b798:	bf00      	nop
 800b79a:	3708      	adds	r7, #8
 800b79c:	46bd      	mov	sp, r7
 800b79e:	bd80      	pop	{r7, pc}

0800b7a0 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b082      	sub	sp, #8
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800b7a8:	f000 f9aa 	bl	800bb00 <BSP_SD_ReadCpltCallback>
}
 800b7ac:	bf00      	nop
 800b7ae:	3708      	adds	r7, #8
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	bd80      	pop	{r7, pc}

0800b7b4 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800b7b4:	b480      	push	{r7}
 800b7b6:	af00      	add	r7, sp, #0

}
 800b7b8:	bf00      	nop
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c0:	4770      	bx	lr

0800b7c2 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800b7c2:	b580      	push	{r7, lr}
 800b7c4:	b082      	sub	sp, #8
 800b7c6:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800b7c8:	2301      	movs	r3, #1
 800b7ca:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800b7cc:	f000 f80c 	bl	800b7e8 <BSP_PlatformIsDetected>
 800b7d0:	4603      	mov	r3, r0
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d101      	bne.n	800b7da <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800b7da:	79fb      	ldrb	r3, [r7, #7]
 800b7dc:	b2db      	uxtb	r3, r3
}
 800b7de:	4618      	mov	r0, r3
 800b7e0:	3708      	adds	r7, #8
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	bd80      	pop	{r7, pc}
	...

0800b7e8 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b082      	sub	sp, #8
 800b7ec:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800b7ee:	2301      	movs	r3, #1
 800b7f0:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800b7f2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800b7f6:	4806      	ldr	r0, [pc, #24]	@ (800b810 <BSP_PlatformIsDetected+0x28>)
 800b7f8:	f7fa fb74 	bl	8005ee4 <HAL_GPIO_ReadPin>
 800b7fc:	4603      	mov	r3, r0
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d001      	beq.n	800b806 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800b802:	2300      	movs	r3, #0
 800b804:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800b806:	79fb      	ldrb	r3, [r7, #7]
}
 800b808:	4618      	mov	r0, r3
 800b80a:	3708      	adds	r7, #8
 800b80c:	46bd      	mov	sp, r7
 800b80e:	bd80      	pop	{r7, pc}
 800b810:	40020800 	.word	0x40020800

0800b814 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800b814:	b580      	push	{r7, lr}
 800b816:	b084      	sub	sp, #16
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800b81c:	f7f9 fa02 	bl	8004c24 <HAL_GetTick>
 800b820:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800b822:	e006      	b.n	800b832 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b824:	f7ff ff8a 	bl	800b73c <BSP_SD_GetCardState>
 800b828:	4603      	mov	r3, r0
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d101      	bne.n	800b832 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800b82e:	2300      	movs	r3, #0
 800b830:	e009      	b.n	800b846 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800b832:	f7f9 f9f7 	bl	8004c24 <HAL_GetTick>
 800b836:	4602      	mov	r2, r0
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	1ad3      	subs	r3, r2, r3
 800b83c:	687a      	ldr	r2, [r7, #4]
 800b83e:	429a      	cmp	r2, r3
 800b840:	d8f0      	bhi.n	800b824 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800b842:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b846:	4618      	mov	r0, r3
 800b848:	3710      	adds	r7, #16
 800b84a:	46bd      	mov	sp, r7
 800b84c:	bd80      	pop	{r7, pc}
	...

0800b850 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800b850:	b580      	push	{r7, lr}
 800b852:	b082      	sub	sp, #8
 800b854:	af00      	add	r7, sp, #0
 800b856:	4603      	mov	r3, r0
 800b858:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800b85a:	4b0b      	ldr	r3, [pc, #44]	@ (800b888 <SD_CheckStatus+0x38>)
 800b85c:	2201      	movs	r2, #1
 800b85e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800b860:	f7ff ff6c 	bl	800b73c <BSP_SD_GetCardState>
 800b864:	4603      	mov	r3, r0
 800b866:	2b00      	cmp	r3, #0
 800b868:	d107      	bne.n	800b87a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800b86a:	4b07      	ldr	r3, [pc, #28]	@ (800b888 <SD_CheckStatus+0x38>)
 800b86c:	781b      	ldrb	r3, [r3, #0]
 800b86e:	b2db      	uxtb	r3, r3
 800b870:	f023 0301 	bic.w	r3, r3, #1
 800b874:	b2da      	uxtb	r2, r3
 800b876:	4b04      	ldr	r3, [pc, #16]	@ (800b888 <SD_CheckStatus+0x38>)
 800b878:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800b87a:	4b03      	ldr	r3, [pc, #12]	@ (800b888 <SD_CheckStatus+0x38>)
 800b87c:	781b      	ldrb	r3, [r3, #0]
 800b87e:	b2db      	uxtb	r3, r3
}
 800b880:	4618      	mov	r0, r3
 800b882:	3708      	adds	r7, #8
 800b884:	46bd      	mov	sp, r7
 800b886:	bd80      	pop	{r7, pc}
 800b888:	20000064 	.word	0x20000064

0800b88c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800b88c:	b580      	push	{r7, lr}
 800b88e:	b082      	sub	sp, #8
 800b890:	af00      	add	r7, sp, #0
 800b892:	4603      	mov	r3, r0
 800b894:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800b896:	f7ff ff05 	bl	800b6a4 <BSP_SD_Init>
 800b89a:	4603      	mov	r3, r0
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d107      	bne.n	800b8b0 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800b8a0:	79fb      	ldrb	r3, [r7, #7]
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	f7ff ffd4 	bl	800b850 <SD_CheckStatus>
 800b8a8:	4603      	mov	r3, r0
 800b8aa:	461a      	mov	r2, r3
 800b8ac:	4b04      	ldr	r3, [pc, #16]	@ (800b8c0 <SD_initialize+0x34>)
 800b8ae:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800b8b0:	4b03      	ldr	r3, [pc, #12]	@ (800b8c0 <SD_initialize+0x34>)
 800b8b2:	781b      	ldrb	r3, [r3, #0]
 800b8b4:	b2db      	uxtb	r3, r3
}
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	3708      	adds	r7, #8
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	bd80      	pop	{r7, pc}
 800b8be:	bf00      	nop
 800b8c0:	20000064 	.word	0x20000064

0800b8c4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	b082      	sub	sp, #8
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800b8ce:	79fb      	ldrb	r3, [r7, #7]
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	f7ff ffbd 	bl	800b850 <SD_CheckStatus>
 800b8d6:	4603      	mov	r3, r0
}
 800b8d8:	4618      	mov	r0, r3
 800b8da:	3708      	adds	r7, #8
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	bd80      	pop	{r7, pc}

0800b8e0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b086      	sub	sp, #24
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	60b9      	str	r1, [r7, #8]
 800b8e8:	607a      	str	r2, [r7, #4]
 800b8ea:	603b      	str	r3, [r7, #0]
 800b8ec:	4603      	mov	r3, r0
 800b8ee:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b8f0:	2301      	movs	r3, #1
 800b8f2:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b8f4:	f247 5030 	movw	r0, #30000	@ 0x7530
 800b8f8:	f7ff ff8c 	bl	800b814 <SD_CheckStatusWithTimeout>
 800b8fc:	4603      	mov	r3, r0
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	da01      	bge.n	800b906 <SD_read+0x26>
  {
    return res;
 800b902:	7dfb      	ldrb	r3, [r7, #23]
 800b904:	e03b      	b.n	800b97e <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800b906:	683a      	ldr	r2, [r7, #0]
 800b908:	6879      	ldr	r1, [r7, #4]
 800b90a:	68b8      	ldr	r0, [r7, #8]
 800b90c:	f7ff fee2 	bl	800b6d4 <BSP_SD_ReadBlocks_DMA>
 800b910:	4603      	mov	r3, r0
 800b912:	2b00      	cmp	r3, #0
 800b914:	d132      	bne.n	800b97c <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800b916:	4b1c      	ldr	r3, [pc, #112]	@ (800b988 <SD_read+0xa8>)
 800b918:	2200      	movs	r2, #0
 800b91a:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800b91c:	f7f9 f982 	bl	8004c24 <HAL_GetTick>
 800b920:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800b922:	bf00      	nop
 800b924:	4b18      	ldr	r3, [pc, #96]	@ (800b988 <SD_read+0xa8>)
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d108      	bne.n	800b93e <SD_read+0x5e>
 800b92c:	f7f9 f97a 	bl	8004c24 <HAL_GetTick>
 800b930:	4602      	mov	r2, r0
 800b932:	693b      	ldr	r3, [r7, #16]
 800b934:	1ad3      	subs	r3, r2, r3
 800b936:	f247 522f 	movw	r2, #29999	@ 0x752f
 800b93a:	4293      	cmp	r3, r2
 800b93c:	d9f2      	bls.n	800b924 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800b93e:	4b12      	ldr	r3, [pc, #72]	@ (800b988 <SD_read+0xa8>)
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d102      	bne.n	800b94c <SD_read+0x6c>
      {
        res = RES_ERROR;
 800b946:	2301      	movs	r3, #1
 800b948:	75fb      	strb	r3, [r7, #23]
 800b94a:	e017      	b.n	800b97c <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800b94c:	4b0e      	ldr	r3, [pc, #56]	@ (800b988 <SD_read+0xa8>)
 800b94e:	2200      	movs	r2, #0
 800b950:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800b952:	f7f9 f967 	bl	8004c24 <HAL_GetTick>
 800b956:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b958:	e007      	b.n	800b96a <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b95a:	f7ff feef 	bl	800b73c <BSP_SD_GetCardState>
 800b95e:	4603      	mov	r3, r0
 800b960:	2b00      	cmp	r3, #0
 800b962:	d102      	bne.n	800b96a <SD_read+0x8a>
          {
            res = RES_OK;
 800b964:	2300      	movs	r3, #0
 800b966:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800b968:	e008      	b.n	800b97c <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b96a:	f7f9 f95b 	bl	8004c24 <HAL_GetTick>
 800b96e:	4602      	mov	r2, r0
 800b970:	693b      	ldr	r3, [r7, #16]
 800b972:	1ad3      	subs	r3, r2, r3
 800b974:	f247 522f 	movw	r2, #29999	@ 0x752f
 800b978:	4293      	cmp	r3, r2
 800b97a:	d9ee      	bls.n	800b95a <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800b97c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b97e:	4618      	mov	r0, r3
 800b980:	3718      	adds	r7, #24
 800b982:	46bd      	mov	sp, r7
 800b984:	bd80      	pop	{r7, pc}
 800b986:	bf00      	nop
 800b988:	2002e678 	.word	0x2002e678

0800b98c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b086      	sub	sp, #24
 800b990:	af00      	add	r7, sp, #0
 800b992:	60b9      	str	r1, [r7, #8]
 800b994:	607a      	str	r2, [r7, #4]
 800b996:	603b      	str	r3, [r7, #0]
 800b998:	4603      	mov	r3, r0
 800b99a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b99c:	2301      	movs	r3, #1
 800b99e:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800b9a0:	4b24      	ldr	r3, [pc, #144]	@ (800ba34 <SD_write+0xa8>)
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b9a6:	f247 5030 	movw	r0, #30000	@ 0x7530
 800b9aa:	f7ff ff33 	bl	800b814 <SD_CheckStatusWithTimeout>
 800b9ae:	4603      	mov	r3, r0
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	da01      	bge.n	800b9b8 <SD_write+0x2c>
  {
    return res;
 800b9b4:	7dfb      	ldrb	r3, [r7, #23]
 800b9b6:	e038      	b.n	800ba2a <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800b9b8:	683a      	ldr	r2, [r7, #0]
 800b9ba:	6879      	ldr	r1, [r7, #4]
 800b9bc:	68b8      	ldr	r0, [r7, #8]
 800b9be:	f7ff fea3 	bl	800b708 <BSP_SD_WriteBlocks_DMA>
 800b9c2:	4603      	mov	r3, r0
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d12f      	bne.n	800ba28 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800b9c8:	f7f9 f92c 	bl	8004c24 <HAL_GetTick>
 800b9cc:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800b9ce:	bf00      	nop
 800b9d0:	4b18      	ldr	r3, [pc, #96]	@ (800ba34 <SD_write+0xa8>)
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d108      	bne.n	800b9ea <SD_write+0x5e>
 800b9d8:	f7f9 f924 	bl	8004c24 <HAL_GetTick>
 800b9dc:	4602      	mov	r2, r0
 800b9de:	693b      	ldr	r3, [r7, #16]
 800b9e0:	1ad3      	subs	r3, r2, r3
 800b9e2:	f247 522f 	movw	r2, #29999	@ 0x752f
 800b9e6:	4293      	cmp	r3, r2
 800b9e8:	d9f2      	bls.n	800b9d0 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800b9ea:	4b12      	ldr	r3, [pc, #72]	@ (800ba34 <SD_write+0xa8>)
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d102      	bne.n	800b9f8 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800b9f2:	2301      	movs	r3, #1
 800b9f4:	75fb      	strb	r3, [r7, #23]
 800b9f6:	e017      	b.n	800ba28 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800b9f8:	4b0e      	ldr	r3, [pc, #56]	@ (800ba34 <SD_write+0xa8>)
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800b9fe:	f7f9 f911 	bl	8004c24 <HAL_GetTick>
 800ba02:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800ba04:	e007      	b.n	800ba16 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ba06:	f7ff fe99 	bl	800b73c <BSP_SD_GetCardState>
 800ba0a:	4603      	mov	r3, r0
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d102      	bne.n	800ba16 <SD_write+0x8a>
          {
            res = RES_OK;
 800ba10:	2300      	movs	r3, #0
 800ba12:	75fb      	strb	r3, [r7, #23]
            break;
 800ba14:	e008      	b.n	800ba28 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800ba16:	f7f9 f905 	bl	8004c24 <HAL_GetTick>
 800ba1a:	4602      	mov	r2, r0
 800ba1c:	693b      	ldr	r3, [r7, #16]
 800ba1e:	1ad3      	subs	r3, r2, r3
 800ba20:	f247 522f 	movw	r2, #29999	@ 0x752f
 800ba24:	4293      	cmp	r3, r2
 800ba26:	d9ee      	bls.n	800ba06 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800ba28:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	3718      	adds	r7, #24
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	bd80      	pop	{r7, pc}
 800ba32:	bf00      	nop
 800ba34:	2002e674 	.word	0x2002e674

0800ba38 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b08c      	sub	sp, #48	@ 0x30
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	4603      	mov	r3, r0
 800ba40:	603a      	str	r2, [r7, #0]
 800ba42:	71fb      	strb	r3, [r7, #7]
 800ba44:	460b      	mov	r3, r1
 800ba46:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800ba48:	2301      	movs	r3, #1
 800ba4a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ba4e:	4b25      	ldr	r3, [pc, #148]	@ (800bae4 <SD_ioctl+0xac>)
 800ba50:	781b      	ldrb	r3, [r3, #0]
 800ba52:	b2db      	uxtb	r3, r3
 800ba54:	f003 0301 	and.w	r3, r3, #1
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d001      	beq.n	800ba60 <SD_ioctl+0x28>
 800ba5c:	2303      	movs	r3, #3
 800ba5e:	e03c      	b.n	800bada <SD_ioctl+0xa2>

  switch (cmd)
 800ba60:	79bb      	ldrb	r3, [r7, #6]
 800ba62:	2b03      	cmp	r3, #3
 800ba64:	d834      	bhi.n	800bad0 <SD_ioctl+0x98>
 800ba66:	a201      	add	r2, pc, #4	@ (adr r2, 800ba6c <SD_ioctl+0x34>)
 800ba68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba6c:	0800ba7d 	.word	0x0800ba7d
 800ba70:	0800ba85 	.word	0x0800ba85
 800ba74:	0800ba9d 	.word	0x0800ba9d
 800ba78:	0800bab7 	.word	0x0800bab7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800ba82:	e028      	b.n	800bad6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800ba84:	f107 030c 	add.w	r3, r7, #12
 800ba88:	4618      	mov	r0, r3
 800ba8a:	f7ff fe67 	bl	800b75c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800ba8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ba90:	683b      	ldr	r3, [r7, #0]
 800ba92:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ba94:	2300      	movs	r3, #0
 800ba96:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800ba9a:	e01c      	b.n	800bad6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ba9c:	f107 030c 	add.w	r3, r7, #12
 800baa0:	4618      	mov	r0, r3
 800baa2:	f7ff fe5b 	bl	800b75c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800baa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800baa8:	b29a      	uxth	r2, r3
 800baaa:	683b      	ldr	r3, [r7, #0]
 800baac:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800baae:	2300      	movs	r3, #0
 800bab0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800bab4:	e00f      	b.n	800bad6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800bab6:	f107 030c 	add.w	r3, r7, #12
 800baba:	4618      	mov	r0, r3
 800babc:	f7ff fe4e 	bl	800b75c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800bac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bac2:	0a5a      	lsrs	r2, r3, #9
 800bac4:	683b      	ldr	r3, [r7, #0]
 800bac6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800bac8:	2300      	movs	r3, #0
 800baca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800bace:	e002      	b.n	800bad6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800bad0:	2304      	movs	r3, #4
 800bad2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800bad6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800bada:	4618      	mov	r0, r3
 800badc:	3730      	adds	r7, #48	@ 0x30
 800bade:	46bd      	mov	sp, r7
 800bae0:	bd80      	pop	{r7, pc}
 800bae2:	bf00      	nop
 800bae4:	20000064 	.word	0x20000064

0800bae8 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800bae8:	b480      	push	{r7}
 800baea:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800baec:	4b03      	ldr	r3, [pc, #12]	@ (800bafc <BSP_SD_WriteCpltCallback+0x14>)
 800baee:	2201      	movs	r2, #1
 800baf0:	601a      	str	r2, [r3, #0]
}
 800baf2:	bf00      	nop
 800baf4:	46bd      	mov	sp, r7
 800baf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafa:	4770      	bx	lr
 800bafc:	2002e674 	.word	0x2002e674

0800bb00 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800bb00:	b480      	push	{r7}
 800bb02:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800bb04:	4b03      	ldr	r3, [pc, #12]	@ (800bb14 <BSP_SD_ReadCpltCallback+0x14>)
 800bb06:	2201      	movs	r2, #1
 800bb08:	601a      	str	r2, [r3, #0]
}
 800bb0a:	bf00      	nop
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb12:	4770      	bx	lr
 800bb14:	2002e678 	.word	0x2002e678

0800bb18 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b084      	sub	sp, #16
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	4603      	mov	r3, r0
 800bb20:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800bb22:	79fb      	ldrb	r3, [r7, #7]
 800bb24:	4a08      	ldr	r2, [pc, #32]	@ (800bb48 <disk_status+0x30>)
 800bb26:	009b      	lsls	r3, r3, #2
 800bb28:	4413      	add	r3, r2
 800bb2a:	685b      	ldr	r3, [r3, #4]
 800bb2c:	685b      	ldr	r3, [r3, #4]
 800bb2e:	79fa      	ldrb	r2, [r7, #7]
 800bb30:	4905      	ldr	r1, [pc, #20]	@ (800bb48 <disk_status+0x30>)
 800bb32:	440a      	add	r2, r1
 800bb34:	7a12      	ldrb	r2, [r2, #8]
 800bb36:	4610      	mov	r0, r2
 800bb38:	4798      	blx	r3
 800bb3a:	4603      	mov	r3, r0
 800bb3c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800bb3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb40:	4618      	mov	r0, r3
 800bb42:	3710      	adds	r7, #16
 800bb44:	46bd      	mov	sp, r7
 800bb46:	bd80      	pop	{r7, pc}
 800bb48:	2002e6a4 	.word	0x2002e6a4

0800bb4c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b084      	sub	sp, #16
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	4603      	mov	r3, r0
 800bb54:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800bb56:	2300      	movs	r3, #0
 800bb58:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800bb5a:	79fb      	ldrb	r3, [r7, #7]
 800bb5c:	4a0d      	ldr	r2, [pc, #52]	@ (800bb94 <disk_initialize+0x48>)
 800bb5e:	5cd3      	ldrb	r3, [r2, r3]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d111      	bne.n	800bb88 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800bb64:	79fb      	ldrb	r3, [r7, #7]
 800bb66:	4a0b      	ldr	r2, [pc, #44]	@ (800bb94 <disk_initialize+0x48>)
 800bb68:	2101      	movs	r1, #1
 800bb6a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800bb6c:	79fb      	ldrb	r3, [r7, #7]
 800bb6e:	4a09      	ldr	r2, [pc, #36]	@ (800bb94 <disk_initialize+0x48>)
 800bb70:	009b      	lsls	r3, r3, #2
 800bb72:	4413      	add	r3, r2
 800bb74:	685b      	ldr	r3, [r3, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	79fa      	ldrb	r2, [r7, #7]
 800bb7a:	4906      	ldr	r1, [pc, #24]	@ (800bb94 <disk_initialize+0x48>)
 800bb7c:	440a      	add	r2, r1
 800bb7e:	7a12      	ldrb	r2, [r2, #8]
 800bb80:	4610      	mov	r0, r2
 800bb82:	4798      	blx	r3
 800bb84:	4603      	mov	r3, r0
 800bb86:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800bb88:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	3710      	adds	r7, #16
 800bb8e:	46bd      	mov	sp, r7
 800bb90:	bd80      	pop	{r7, pc}
 800bb92:	bf00      	nop
 800bb94:	2002e6a4 	.word	0x2002e6a4

0800bb98 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800bb98:	b590      	push	{r4, r7, lr}
 800bb9a:	b087      	sub	sp, #28
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	60b9      	str	r1, [r7, #8]
 800bba0:	607a      	str	r2, [r7, #4]
 800bba2:	603b      	str	r3, [r7, #0]
 800bba4:	4603      	mov	r3, r0
 800bba6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800bba8:	7bfb      	ldrb	r3, [r7, #15]
 800bbaa:	4a0a      	ldr	r2, [pc, #40]	@ (800bbd4 <disk_read+0x3c>)
 800bbac:	009b      	lsls	r3, r3, #2
 800bbae:	4413      	add	r3, r2
 800bbb0:	685b      	ldr	r3, [r3, #4]
 800bbb2:	689c      	ldr	r4, [r3, #8]
 800bbb4:	7bfb      	ldrb	r3, [r7, #15]
 800bbb6:	4a07      	ldr	r2, [pc, #28]	@ (800bbd4 <disk_read+0x3c>)
 800bbb8:	4413      	add	r3, r2
 800bbba:	7a18      	ldrb	r0, [r3, #8]
 800bbbc:	683b      	ldr	r3, [r7, #0]
 800bbbe:	687a      	ldr	r2, [r7, #4]
 800bbc0:	68b9      	ldr	r1, [r7, #8]
 800bbc2:	47a0      	blx	r4
 800bbc4:	4603      	mov	r3, r0
 800bbc6:	75fb      	strb	r3, [r7, #23]
  return res;
 800bbc8:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbca:	4618      	mov	r0, r3
 800bbcc:	371c      	adds	r7, #28
 800bbce:	46bd      	mov	sp, r7
 800bbd0:	bd90      	pop	{r4, r7, pc}
 800bbd2:	bf00      	nop
 800bbd4:	2002e6a4 	.word	0x2002e6a4

0800bbd8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800bbd8:	b590      	push	{r4, r7, lr}
 800bbda:	b087      	sub	sp, #28
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	60b9      	str	r1, [r7, #8]
 800bbe0:	607a      	str	r2, [r7, #4]
 800bbe2:	603b      	str	r3, [r7, #0]
 800bbe4:	4603      	mov	r3, r0
 800bbe6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800bbe8:	7bfb      	ldrb	r3, [r7, #15]
 800bbea:	4a0a      	ldr	r2, [pc, #40]	@ (800bc14 <disk_write+0x3c>)
 800bbec:	009b      	lsls	r3, r3, #2
 800bbee:	4413      	add	r3, r2
 800bbf0:	685b      	ldr	r3, [r3, #4]
 800bbf2:	68dc      	ldr	r4, [r3, #12]
 800bbf4:	7bfb      	ldrb	r3, [r7, #15]
 800bbf6:	4a07      	ldr	r2, [pc, #28]	@ (800bc14 <disk_write+0x3c>)
 800bbf8:	4413      	add	r3, r2
 800bbfa:	7a18      	ldrb	r0, [r3, #8]
 800bbfc:	683b      	ldr	r3, [r7, #0]
 800bbfe:	687a      	ldr	r2, [r7, #4]
 800bc00:	68b9      	ldr	r1, [r7, #8]
 800bc02:	47a0      	blx	r4
 800bc04:	4603      	mov	r3, r0
 800bc06:	75fb      	strb	r3, [r7, #23]
  return res;
 800bc08:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	371c      	adds	r7, #28
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	bd90      	pop	{r4, r7, pc}
 800bc12:	bf00      	nop
 800bc14:	2002e6a4 	.word	0x2002e6a4

0800bc18 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800bc18:	b580      	push	{r7, lr}
 800bc1a:	b084      	sub	sp, #16
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	4603      	mov	r3, r0
 800bc20:	603a      	str	r2, [r7, #0]
 800bc22:	71fb      	strb	r3, [r7, #7]
 800bc24:	460b      	mov	r3, r1
 800bc26:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800bc28:	79fb      	ldrb	r3, [r7, #7]
 800bc2a:	4a09      	ldr	r2, [pc, #36]	@ (800bc50 <disk_ioctl+0x38>)
 800bc2c:	009b      	lsls	r3, r3, #2
 800bc2e:	4413      	add	r3, r2
 800bc30:	685b      	ldr	r3, [r3, #4]
 800bc32:	691b      	ldr	r3, [r3, #16]
 800bc34:	79fa      	ldrb	r2, [r7, #7]
 800bc36:	4906      	ldr	r1, [pc, #24]	@ (800bc50 <disk_ioctl+0x38>)
 800bc38:	440a      	add	r2, r1
 800bc3a:	7a10      	ldrb	r0, [r2, #8]
 800bc3c:	79b9      	ldrb	r1, [r7, #6]
 800bc3e:	683a      	ldr	r2, [r7, #0]
 800bc40:	4798      	blx	r3
 800bc42:	4603      	mov	r3, r0
 800bc44:	73fb      	strb	r3, [r7, #15]
  return res;
 800bc46:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc48:	4618      	mov	r0, r3
 800bc4a:	3710      	adds	r7, #16
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	bd80      	pop	{r7, pc}
 800bc50:	2002e6a4 	.word	0x2002e6a4

0800bc54 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800bc54:	b480      	push	{r7}
 800bc56:	b085      	sub	sp, #20
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	3301      	adds	r3, #1
 800bc60:	781b      	ldrb	r3, [r3, #0]
 800bc62:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800bc64:	89fb      	ldrh	r3, [r7, #14]
 800bc66:	021b      	lsls	r3, r3, #8
 800bc68:	b21a      	sxth	r2, r3
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	781b      	ldrb	r3, [r3, #0]
 800bc6e:	b21b      	sxth	r3, r3
 800bc70:	4313      	orrs	r3, r2
 800bc72:	b21b      	sxth	r3, r3
 800bc74:	81fb      	strh	r3, [r7, #14]
	return rv;
 800bc76:	89fb      	ldrh	r3, [r7, #14]
}
 800bc78:	4618      	mov	r0, r3
 800bc7a:	3714      	adds	r7, #20
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc82:	4770      	bx	lr

0800bc84 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800bc84:	b480      	push	{r7}
 800bc86:	b085      	sub	sp, #20
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	3303      	adds	r3, #3
 800bc90:	781b      	ldrb	r3, [r3, #0]
 800bc92:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	021b      	lsls	r3, r3, #8
 800bc98:	687a      	ldr	r2, [r7, #4]
 800bc9a:	3202      	adds	r2, #2
 800bc9c:	7812      	ldrb	r2, [r2, #0]
 800bc9e:	4313      	orrs	r3, r2
 800bca0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	021b      	lsls	r3, r3, #8
 800bca6:	687a      	ldr	r2, [r7, #4]
 800bca8:	3201      	adds	r2, #1
 800bcaa:	7812      	ldrb	r2, [r2, #0]
 800bcac:	4313      	orrs	r3, r2
 800bcae:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	021b      	lsls	r3, r3, #8
 800bcb4:	687a      	ldr	r2, [r7, #4]
 800bcb6:	7812      	ldrb	r2, [r2, #0]
 800bcb8:	4313      	orrs	r3, r2
 800bcba:	60fb      	str	r3, [r7, #12]
	return rv;
 800bcbc:	68fb      	ldr	r3, [r7, #12]
}
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	3714      	adds	r7, #20
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc8:	4770      	bx	lr

0800bcca <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800bcca:	b480      	push	{r7}
 800bccc:	b083      	sub	sp, #12
 800bcce:	af00      	add	r7, sp, #0
 800bcd0:	6078      	str	r0, [r7, #4]
 800bcd2:	460b      	mov	r3, r1
 800bcd4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	1c5a      	adds	r2, r3, #1
 800bcda:	607a      	str	r2, [r7, #4]
 800bcdc:	887a      	ldrh	r2, [r7, #2]
 800bcde:	b2d2      	uxtb	r2, r2
 800bce0:	701a      	strb	r2, [r3, #0]
 800bce2:	887b      	ldrh	r3, [r7, #2]
 800bce4:	0a1b      	lsrs	r3, r3, #8
 800bce6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	1c5a      	adds	r2, r3, #1
 800bcec:	607a      	str	r2, [r7, #4]
 800bcee:	887a      	ldrh	r2, [r7, #2]
 800bcf0:	b2d2      	uxtb	r2, r2
 800bcf2:	701a      	strb	r2, [r3, #0]
}
 800bcf4:	bf00      	nop
 800bcf6:	370c      	adds	r7, #12
 800bcf8:	46bd      	mov	sp, r7
 800bcfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfe:	4770      	bx	lr

0800bd00 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800bd00:	b480      	push	{r7}
 800bd02:	b083      	sub	sp, #12
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	6078      	str	r0, [r7, #4]
 800bd08:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	1c5a      	adds	r2, r3, #1
 800bd0e:	607a      	str	r2, [r7, #4]
 800bd10:	683a      	ldr	r2, [r7, #0]
 800bd12:	b2d2      	uxtb	r2, r2
 800bd14:	701a      	strb	r2, [r3, #0]
 800bd16:	683b      	ldr	r3, [r7, #0]
 800bd18:	0a1b      	lsrs	r3, r3, #8
 800bd1a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	1c5a      	adds	r2, r3, #1
 800bd20:	607a      	str	r2, [r7, #4]
 800bd22:	683a      	ldr	r2, [r7, #0]
 800bd24:	b2d2      	uxtb	r2, r2
 800bd26:	701a      	strb	r2, [r3, #0]
 800bd28:	683b      	ldr	r3, [r7, #0]
 800bd2a:	0a1b      	lsrs	r3, r3, #8
 800bd2c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	1c5a      	adds	r2, r3, #1
 800bd32:	607a      	str	r2, [r7, #4]
 800bd34:	683a      	ldr	r2, [r7, #0]
 800bd36:	b2d2      	uxtb	r2, r2
 800bd38:	701a      	strb	r2, [r3, #0]
 800bd3a:	683b      	ldr	r3, [r7, #0]
 800bd3c:	0a1b      	lsrs	r3, r3, #8
 800bd3e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	1c5a      	adds	r2, r3, #1
 800bd44:	607a      	str	r2, [r7, #4]
 800bd46:	683a      	ldr	r2, [r7, #0]
 800bd48:	b2d2      	uxtb	r2, r2
 800bd4a:	701a      	strb	r2, [r3, #0]
}
 800bd4c:	bf00      	nop
 800bd4e:	370c      	adds	r7, #12
 800bd50:	46bd      	mov	sp, r7
 800bd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd56:	4770      	bx	lr

0800bd58 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800bd58:	b480      	push	{r7}
 800bd5a:	b087      	sub	sp, #28
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	60f8      	str	r0, [r7, #12]
 800bd60:	60b9      	str	r1, [r7, #8]
 800bd62:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800bd68:	68bb      	ldr	r3, [r7, #8]
 800bd6a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d00d      	beq.n	800bd8e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800bd72:	693a      	ldr	r2, [r7, #16]
 800bd74:	1c53      	adds	r3, r2, #1
 800bd76:	613b      	str	r3, [r7, #16]
 800bd78:	697b      	ldr	r3, [r7, #20]
 800bd7a:	1c59      	adds	r1, r3, #1
 800bd7c:	6179      	str	r1, [r7, #20]
 800bd7e:	7812      	ldrb	r2, [r2, #0]
 800bd80:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	3b01      	subs	r3, #1
 800bd86:	607b      	str	r3, [r7, #4]
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d1f1      	bne.n	800bd72 <mem_cpy+0x1a>
	}
}
 800bd8e:	bf00      	nop
 800bd90:	371c      	adds	r7, #28
 800bd92:	46bd      	mov	sp, r7
 800bd94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd98:	4770      	bx	lr

0800bd9a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800bd9a:	b480      	push	{r7}
 800bd9c:	b087      	sub	sp, #28
 800bd9e:	af00      	add	r7, sp, #0
 800bda0:	60f8      	str	r0, [r7, #12]
 800bda2:	60b9      	str	r1, [r7, #8]
 800bda4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800bdaa:	697b      	ldr	r3, [r7, #20]
 800bdac:	1c5a      	adds	r2, r3, #1
 800bdae:	617a      	str	r2, [r7, #20]
 800bdb0:	68ba      	ldr	r2, [r7, #8]
 800bdb2:	b2d2      	uxtb	r2, r2
 800bdb4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	3b01      	subs	r3, #1
 800bdba:	607b      	str	r3, [r7, #4]
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d1f3      	bne.n	800bdaa <mem_set+0x10>
}
 800bdc2:	bf00      	nop
 800bdc4:	bf00      	nop
 800bdc6:	371c      	adds	r7, #28
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdce:	4770      	bx	lr

0800bdd0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800bdd0:	b480      	push	{r7}
 800bdd2:	b089      	sub	sp, #36	@ 0x24
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	60f8      	str	r0, [r7, #12]
 800bdd8:	60b9      	str	r1, [r7, #8]
 800bdda:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	61fb      	str	r3, [r7, #28]
 800bde0:	68bb      	ldr	r3, [r7, #8]
 800bde2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800bde4:	2300      	movs	r3, #0
 800bde6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800bde8:	69fb      	ldr	r3, [r7, #28]
 800bdea:	1c5a      	adds	r2, r3, #1
 800bdec:	61fa      	str	r2, [r7, #28]
 800bdee:	781b      	ldrb	r3, [r3, #0]
 800bdf0:	4619      	mov	r1, r3
 800bdf2:	69bb      	ldr	r3, [r7, #24]
 800bdf4:	1c5a      	adds	r2, r3, #1
 800bdf6:	61ba      	str	r2, [r7, #24]
 800bdf8:	781b      	ldrb	r3, [r3, #0]
 800bdfa:	1acb      	subs	r3, r1, r3
 800bdfc:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	3b01      	subs	r3, #1
 800be02:	607b      	str	r3, [r7, #4]
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d002      	beq.n	800be10 <mem_cmp+0x40>
 800be0a:	697b      	ldr	r3, [r7, #20]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d0eb      	beq.n	800bde8 <mem_cmp+0x18>

	return r;
 800be10:	697b      	ldr	r3, [r7, #20]
}
 800be12:	4618      	mov	r0, r3
 800be14:	3724      	adds	r7, #36	@ 0x24
 800be16:	46bd      	mov	sp, r7
 800be18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1c:	4770      	bx	lr

0800be1e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800be1e:	b480      	push	{r7}
 800be20:	b083      	sub	sp, #12
 800be22:	af00      	add	r7, sp, #0
 800be24:	6078      	str	r0, [r7, #4]
 800be26:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800be28:	e002      	b.n	800be30 <chk_chr+0x12>
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	3301      	adds	r3, #1
 800be2e:	607b      	str	r3, [r7, #4]
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	781b      	ldrb	r3, [r3, #0]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d005      	beq.n	800be44 <chk_chr+0x26>
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	781b      	ldrb	r3, [r3, #0]
 800be3c:	461a      	mov	r2, r3
 800be3e:	683b      	ldr	r3, [r7, #0]
 800be40:	4293      	cmp	r3, r2
 800be42:	d1f2      	bne.n	800be2a <chk_chr+0xc>
	return *str;
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	781b      	ldrb	r3, [r3, #0]
}
 800be48:	4618      	mov	r0, r3
 800be4a:	370c      	adds	r7, #12
 800be4c:	46bd      	mov	sp, r7
 800be4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be52:	4770      	bx	lr

0800be54 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800be54:	b480      	push	{r7}
 800be56:	b085      	sub	sp, #20
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
 800be5c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800be5e:	2300      	movs	r3, #0
 800be60:	60bb      	str	r3, [r7, #8]
 800be62:	68bb      	ldr	r3, [r7, #8]
 800be64:	60fb      	str	r3, [r7, #12]
 800be66:	e029      	b.n	800bebc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800be68:	4a27      	ldr	r2, [pc, #156]	@ (800bf08 <chk_lock+0xb4>)
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	011b      	lsls	r3, r3, #4
 800be6e:	4413      	add	r3, r2
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d01d      	beq.n	800beb2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800be76:	4a24      	ldr	r2, [pc, #144]	@ (800bf08 <chk_lock+0xb4>)
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	011b      	lsls	r3, r3, #4
 800be7c:	4413      	add	r3, r2
 800be7e:	681a      	ldr	r2, [r3, #0]
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	429a      	cmp	r2, r3
 800be86:	d116      	bne.n	800beb6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800be88:	4a1f      	ldr	r2, [pc, #124]	@ (800bf08 <chk_lock+0xb4>)
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	011b      	lsls	r3, r3, #4
 800be8e:	4413      	add	r3, r2
 800be90:	3304      	adds	r3, #4
 800be92:	681a      	ldr	r2, [r3, #0]
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800be98:	429a      	cmp	r2, r3
 800be9a:	d10c      	bne.n	800beb6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800be9c:	4a1a      	ldr	r2, [pc, #104]	@ (800bf08 <chk_lock+0xb4>)
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	011b      	lsls	r3, r3, #4
 800bea2:	4413      	add	r3, r2
 800bea4:	3308      	adds	r3, #8
 800bea6:	681a      	ldr	r2, [r3, #0]
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800beac:	429a      	cmp	r2, r3
 800beae:	d102      	bne.n	800beb6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800beb0:	e007      	b.n	800bec2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800beb2:	2301      	movs	r3, #1
 800beb4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	3301      	adds	r3, #1
 800beba:	60fb      	str	r3, [r7, #12]
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	2b01      	cmp	r3, #1
 800bec0:	d9d2      	bls.n	800be68 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	2b02      	cmp	r3, #2
 800bec6:	d109      	bne.n	800bedc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800bec8:	68bb      	ldr	r3, [r7, #8]
 800beca:	2b00      	cmp	r3, #0
 800becc:	d102      	bne.n	800bed4 <chk_lock+0x80>
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	2b02      	cmp	r3, #2
 800bed2:	d101      	bne.n	800bed8 <chk_lock+0x84>
 800bed4:	2300      	movs	r3, #0
 800bed6:	e010      	b.n	800befa <chk_lock+0xa6>
 800bed8:	2312      	movs	r3, #18
 800beda:	e00e      	b.n	800befa <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800bedc:	683b      	ldr	r3, [r7, #0]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d108      	bne.n	800bef4 <chk_lock+0xa0>
 800bee2:	4a09      	ldr	r2, [pc, #36]	@ (800bf08 <chk_lock+0xb4>)
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	011b      	lsls	r3, r3, #4
 800bee8:	4413      	add	r3, r2
 800beea:	330c      	adds	r3, #12
 800beec:	881b      	ldrh	r3, [r3, #0]
 800beee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bef2:	d101      	bne.n	800bef8 <chk_lock+0xa4>
 800bef4:	2310      	movs	r3, #16
 800bef6:	e000      	b.n	800befa <chk_lock+0xa6>
 800bef8:	2300      	movs	r3, #0
}
 800befa:	4618      	mov	r0, r3
 800befc:	3714      	adds	r7, #20
 800befe:	46bd      	mov	sp, r7
 800bf00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf04:	4770      	bx	lr
 800bf06:	bf00      	nop
 800bf08:	2002e684 	.word	0x2002e684

0800bf0c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800bf0c:	b480      	push	{r7}
 800bf0e:	b083      	sub	sp, #12
 800bf10:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800bf12:	2300      	movs	r3, #0
 800bf14:	607b      	str	r3, [r7, #4]
 800bf16:	e002      	b.n	800bf1e <enq_lock+0x12>
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	3301      	adds	r3, #1
 800bf1c:	607b      	str	r3, [r7, #4]
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	2b01      	cmp	r3, #1
 800bf22:	d806      	bhi.n	800bf32 <enq_lock+0x26>
 800bf24:	4a09      	ldr	r2, [pc, #36]	@ (800bf4c <enq_lock+0x40>)
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	011b      	lsls	r3, r3, #4
 800bf2a:	4413      	add	r3, r2
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d1f2      	bne.n	800bf18 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	2b02      	cmp	r3, #2
 800bf36:	bf14      	ite	ne
 800bf38:	2301      	movne	r3, #1
 800bf3a:	2300      	moveq	r3, #0
 800bf3c:	b2db      	uxtb	r3, r3
}
 800bf3e:	4618      	mov	r0, r3
 800bf40:	370c      	adds	r7, #12
 800bf42:	46bd      	mov	sp, r7
 800bf44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf48:	4770      	bx	lr
 800bf4a:	bf00      	nop
 800bf4c:	2002e684 	.word	0x2002e684

0800bf50 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800bf50:	b480      	push	{r7}
 800bf52:	b085      	sub	sp, #20
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]
 800bf58:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	60fb      	str	r3, [r7, #12]
 800bf5e:	e01f      	b.n	800bfa0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800bf60:	4a41      	ldr	r2, [pc, #260]	@ (800c068 <inc_lock+0x118>)
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	011b      	lsls	r3, r3, #4
 800bf66:	4413      	add	r3, r2
 800bf68:	681a      	ldr	r2, [r3, #0]
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	429a      	cmp	r2, r3
 800bf70:	d113      	bne.n	800bf9a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800bf72:	4a3d      	ldr	r2, [pc, #244]	@ (800c068 <inc_lock+0x118>)
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	011b      	lsls	r3, r3, #4
 800bf78:	4413      	add	r3, r2
 800bf7a:	3304      	adds	r3, #4
 800bf7c:	681a      	ldr	r2, [r3, #0]
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800bf82:	429a      	cmp	r2, r3
 800bf84:	d109      	bne.n	800bf9a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800bf86:	4a38      	ldr	r2, [pc, #224]	@ (800c068 <inc_lock+0x118>)
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	011b      	lsls	r3, r3, #4
 800bf8c:	4413      	add	r3, r2
 800bf8e:	3308      	adds	r3, #8
 800bf90:	681a      	ldr	r2, [r3, #0]
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800bf96:	429a      	cmp	r2, r3
 800bf98:	d006      	beq.n	800bfa8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	3301      	adds	r3, #1
 800bf9e:	60fb      	str	r3, [r7, #12]
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	2b01      	cmp	r3, #1
 800bfa4:	d9dc      	bls.n	800bf60 <inc_lock+0x10>
 800bfa6:	e000      	b.n	800bfaa <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800bfa8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	2b02      	cmp	r3, #2
 800bfae:	d132      	bne.n	800c016 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	60fb      	str	r3, [r7, #12]
 800bfb4:	e002      	b.n	800bfbc <inc_lock+0x6c>
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	3301      	adds	r3, #1
 800bfba:	60fb      	str	r3, [r7, #12]
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	2b01      	cmp	r3, #1
 800bfc0:	d806      	bhi.n	800bfd0 <inc_lock+0x80>
 800bfc2:	4a29      	ldr	r2, [pc, #164]	@ (800c068 <inc_lock+0x118>)
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	011b      	lsls	r3, r3, #4
 800bfc8:	4413      	add	r3, r2
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d1f2      	bne.n	800bfb6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	2b02      	cmp	r3, #2
 800bfd4:	d101      	bne.n	800bfda <inc_lock+0x8a>
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	e040      	b.n	800c05c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	681a      	ldr	r2, [r3, #0]
 800bfde:	4922      	ldr	r1, [pc, #136]	@ (800c068 <inc_lock+0x118>)
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	011b      	lsls	r3, r3, #4
 800bfe4:	440b      	add	r3, r1
 800bfe6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	689a      	ldr	r2, [r3, #8]
 800bfec:	491e      	ldr	r1, [pc, #120]	@ (800c068 <inc_lock+0x118>)
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	011b      	lsls	r3, r3, #4
 800bff2:	440b      	add	r3, r1
 800bff4:	3304      	adds	r3, #4
 800bff6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	695a      	ldr	r2, [r3, #20]
 800bffc:	491a      	ldr	r1, [pc, #104]	@ (800c068 <inc_lock+0x118>)
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	011b      	lsls	r3, r3, #4
 800c002:	440b      	add	r3, r1
 800c004:	3308      	adds	r3, #8
 800c006:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800c008:	4a17      	ldr	r2, [pc, #92]	@ (800c068 <inc_lock+0x118>)
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	011b      	lsls	r3, r3, #4
 800c00e:	4413      	add	r3, r2
 800c010:	330c      	adds	r3, #12
 800c012:	2200      	movs	r2, #0
 800c014:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c016:	683b      	ldr	r3, [r7, #0]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d009      	beq.n	800c030 <inc_lock+0xe0>
 800c01c:	4a12      	ldr	r2, [pc, #72]	@ (800c068 <inc_lock+0x118>)
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	011b      	lsls	r3, r3, #4
 800c022:	4413      	add	r3, r2
 800c024:	330c      	adds	r3, #12
 800c026:	881b      	ldrh	r3, [r3, #0]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d001      	beq.n	800c030 <inc_lock+0xe0>
 800c02c:	2300      	movs	r3, #0
 800c02e:	e015      	b.n	800c05c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c030:	683b      	ldr	r3, [r7, #0]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d108      	bne.n	800c048 <inc_lock+0xf8>
 800c036:	4a0c      	ldr	r2, [pc, #48]	@ (800c068 <inc_lock+0x118>)
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	011b      	lsls	r3, r3, #4
 800c03c:	4413      	add	r3, r2
 800c03e:	330c      	adds	r3, #12
 800c040:	881b      	ldrh	r3, [r3, #0]
 800c042:	3301      	adds	r3, #1
 800c044:	b29a      	uxth	r2, r3
 800c046:	e001      	b.n	800c04c <inc_lock+0xfc>
 800c048:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c04c:	4906      	ldr	r1, [pc, #24]	@ (800c068 <inc_lock+0x118>)
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	011b      	lsls	r3, r3, #4
 800c052:	440b      	add	r3, r1
 800c054:	330c      	adds	r3, #12
 800c056:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	3301      	adds	r3, #1
}
 800c05c:	4618      	mov	r0, r3
 800c05e:	3714      	adds	r7, #20
 800c060:	46bd      	mov	sp, r7
 800c062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c066:	4770      	bx	lr
 800c068:	2002e684 	.word	0x2002e684

0800c06c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800c06c:	b480      	push	{r7}
 800c06e:	b085      	sub	sp, #20
 800c070:	af00      	add	r7, sp, #0
 800c072:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	3b01      	subs	r3, #1
 800c078:	607b      	str	r3, [r7, #4]
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	2b01      	cmp	r3, #1
 800c07e:	d825      	bhi.n	800c0cc <dec_lock+0x60>
		n = Files[i].ctr;
 800c080:	4a17      	ldr	r2, [pc, #92]	@ (800c0e0 <dec_lock+0x74>)
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	011b      	lsls	r3, r3, #4
 800c086:	4413      	add	r3, r2
 800c088:	330c      	adds	r3, #12
 800c08a:	881b      	ldrh	r3, [r3, #0]
 800c08c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800c08e:	89fb      	ldrh	r3, [r7, #14]
 800c090:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c094:	d101      	bne.n	800c09a <dec_lock+0x2e>
 800c096:	2300      	movs	r3, #0
 800c098:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800c09a:	89fb      	ldrh	r3, [r7, #14]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d002      	beq.n	800c0a6 <dec_lock+0x3a>
 800c0a0:	89fb      	ldrh	r3, [r7, #14]
 800c0a2:	3b01      	subs	r3, #1
 800c0a4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800c0a6:	4a0e      	ldr	r2, [pc, #56]	@ (800c0e0 <dec_lock+0x74>)
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	011b      	lsls	r3, r3, #4
 800c0ac:	4413      	add	r3, r2
 800c0ae:	330c      	adds	r3, #12
 800c0b0:	89fa      	ldrh	r2, [r7, #14]
 800c0b2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800c0b4:	89fb      	ldrh	r3, [r7, #14]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d105      	bne.n	800c0c6 <dec_lock+0x5a>
 800c0ba:	4a09      	ldr	r2, [pc, #36]	@ (800c0e0 <dec_lock+0x74>)
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	011b      	lsls	r3, r3, #4
 800c0c0:	4413      	add	r3, r2
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	737b      	strb	r3, [r7, #13]
 800c0ca:	e001      	b.n	800c0d0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800c0cc:	2302      	movs	r3, #2
 800c0ce:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800c0d0:	7b7b      	ldrb	r3, [r7, #13]
}
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	3714      	adds	r7, #20
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0dc:	4770      	bx	lr
 800c0de:	bf00      	nop
 800c0e0:	2002e684 	.word	0x2002e684

0800c0e4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800c0e4:	b480      	push	{r7}
 800c0e6:	b085      	sub	sp, #20
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	60fb      	str	r3, [r7, #12]
 800c0f0:	e010      	b.n	800c114 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c0f2:	4a0d      	ldr	r2, [pc, #52]	@ (800c128 <clear_lock+0x44>)
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	011b      	lsls	r3, r3, #4
 800c0f8:	4413      	add	r3, r2
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	687a      	ldr	r2, [r7, #4]
 800c0fe:	429a      	cmp	r2, r3
 800c100:	d105      	bne.n	800c10e <clear_lock+0x2a>
 800c102:	4a09      	ldr	r2, [pc, #36]	@ (800c128 <clear_lock+0x44>)
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	011b      	lsls	r3, r3, #4
 800c108:	4413      	add	r3, r2
 800c10a:	2200      	movs	r2, #0
 800c10c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	3301      	adds	r3, #1
 800c112:	60fb      	str	r3, [r7, #12]
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	2b01      	cmp	r3, #1
 800c118:	d9eb      	bls.n	800c0f2 <clear_lock+0xe>
	}
}
 800c11a:	bf00      	nop
 800c11c:	bf00      	nop
 800c11e:	3714      	adds	r7, #20
 800c120:	46bd      	mov	sp, r7
 800c122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c126:	4770      	bx	lr
 800c128:	2002e684 	.word	0x2002e684

0800c12c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800c12c:	b580      	push	{r7, lr}
 800c12e:	b086      	sub	sp, #24
 800c130:	af00      	add	r7, sp, #0
 800c132:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800c134:	2300      	movs	r3, #0
 800c136:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	78db      	ldrb	r3, [r3, #3]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d034      	beq.n	800c1aa <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c144:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	7858      	ldrb	r0, [r3, #1]
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c150:	2301      	movs	r3, #1
 800c152:	697a      	ldr	r2, [r7, #20]
 800c154:	f7ff fd40 	bl	800bbd8 <disk_write>
 800c158:	4603      	mov	r3, r0
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d002      	beq.n	800c164 <sync_window+0x38>
			res = FR_DISK_ERR;
 800c15e:	2301      	movs	r3, #1
 800c160:	73fb      	strb	r3, [r7, #15]
 800c162:	e022      	b.n	800c1aa <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	2200      	movs	r2, #0
 800c168:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	6a1b      	ldr	r3, [r3, #32]
 800c16e:	697a      	ldr	r2, [r7, #20]
 800c170:	1ad2      	subs	r2, r2, r3
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	699b      	ldr	r3, [r3, #24]
 800c176:	429a      	cmp	r2, r3
 800c178:	d217      	bcs.n	800c1aa <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	789b      	ldrb	r3, [r3, #2]
 800c17e:	613b      	str	r3, [r7, #16]
 800c180:	e010      	b.n	800c1a4 <sync_window+0x78>
					wsect += fs->fsize;
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	699b      	ldr	r3, [r3, #24]
 800c186:	697a      	ldr	r2, [r7, #20]
 800c188:	4413      	add	r3, r2
 800c18a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	7858      	ldrb	r0, [r3, #1]
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c196:	2301      	movs	r3, #1
 800c198:	697a      	ldr	r2, [r7, #20]
 800c19a:	f7ff fd1d 	bl	800bbd8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c19e:	693b      	ldr	r3, [r7, #16]
 800c1a0:	3b01      	subs	r3, #1
 800c1a2:	613b      	str	r3, [r7, #16]
 800c1a4:	693b      	ldr	r3, [r7, #16]
 800c1a6:	2b01      	cmp	r3, #1
 800c1a8:	d8eb      	bhi.n	800c182 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800c1aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	3718      	adds	r7, #24
 800c1b0:	46bd      	mov	sp, r7
 800c1b2:	bd80      	pop	{r7, pc}

0800c1b4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b084      	sub	sp, #16
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	6078      	str	r0, [r7, #4]
 800c1bc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800c1be:	2300      	movs	r3, #0
 800c1c0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1c6:	683a      	ldr	r2, [r7, #0]
 800c1c8:	429a      	cmp	r2, r3
 800c1ca:	d01b      	beq.n	800c204 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800c1cc:	6878      	ldr	r0, [r7, #4]
 800c1ce:	f7ff ffad 	bl	800c12c <sync_window>
 800c1d2:	4603      	mov	r3, r0
 800c1d4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800c1d6:	7bfb      	ldrb	r3, [r7, #15]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d113      	bne.n	800c204 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	7858      	ldrb	r0, [r3, #1]
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c1e6:	2301      	movs	r3, #1
 800c1e8:	683a      	ldr	r2, [r7, #0]
 800c1ea:	f7ff fcd5 	bl	800bb98 <disk_read>
 800c1ee:	4603      	mov	r3, r0
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d004      	beq.n	800c1fe <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800c1f4:	f04f 33ff 	mov.w	r3, #4294967295
 800c1f8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800c1fa:	2301      	movs	r3, #1
 800c1fc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	683a      	ldr	r2, [r7, #0]
 800c202:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800c204:	7bfb      	ldrb	r3, [r7, #15]
}
 800c206:	4618      	mov	r0, r3
 800c208:	3710      	adds	r7, #16
 800c20a:	46bd      	mov	sp, r7
 800c20c:	bd80      	pop	{r7, pc}
	...

0800c210 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800c210:	b580      	push	{r7, lr}
 800c212:	b084      	sub	sp, #16
 800c214:	af00      	add	r7, sp, #0
 800c216:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800c218:	6878      	ldr	r0, [r7, #4]
 800c21a:	f7ff ff87 	bl	800c12c <sync_window>
 800c21e:	4603      	mov	r3, r0
 800c220:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c222:	7bfb      	ldrb	r3, [r7, #15]
 800c224:	2b00      	cmp	r3, #0
 800c226:	d158      	bne.n	800c2da <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	781b      	ldrb	r3, [r3, #0]
 800c22c:	2b03      	cmp	r3, #3
 800c22e:	d148      	bne.n	800c2c2 <sync_fs+0xb2>
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	791b      	ldrb	r3, [r3, #4]
 800c234:	2b01      	cmp	r3, #1
 800c236:	d144      	bne.n	800c2c2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	3330      	adds	r3, #48	@ 0x30
 800c23c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c240:	2100      	movs	r1, #0
 800c242:	4618      	mov	r0, r3
 800c244:	f7ff fda9 	bl	800bd9a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	3330      	adds	r3, #48	@ 0x30
 800c24c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800c250:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800c254:	4618      	mov	r0, r3
 800c256:	f7ff fd38 	bl	800bcca <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	3330      	adds	r3, #48	@ 0x30
 800c25e:	4921      	ldr	r1, [pc, #132]	@ (800c2e4 <sync_fs+0xd4>)
 800c260:	4618      	mov	r0, r3
 800c262:	f7ff fd4d 	bl	800bd00 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	3330      	adds	r3, #48	@ 0x30
 800c26a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800c26e:	491e      	ldr	r1, [pc, #120]	@ (800c2e8 <sync_fs+0xd8>)
 800c270:	4618      	mov	r0, r3
 800c272:	f7ff fd45 	bl	800bd00 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	3330      	adds	r3, #48	@ 0x30
 800c27a:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	691b      	ldr	r3, [r3, #16]
 800c282:	4619      	mov	r1, r3
 800c284:	4610      	mov	r0, r2
 800c286:	f7ff fd3b 	bl	800bd00 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	3330      	adds	r3, #48	@ 0x30
 800c28e:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	68db      	ldr	r3, [r3, #12]
 800c296:	4619      	mov	r1, r3
 800c298:	4610      	mov	r0, r2
 800c29a:	f7ff fd31 	bl	800bd00 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	69db      	ldr	r3, [r3, #28]
 800c2a2:	1c5a      	adds	r2, r3, #1
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	7858      	ldrb	r0, [r3, #1]
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c2b6:	2301      	movs	r3, #1
 800c2b8:	f7ff fc8e 	bl	800bbd8 <disk_write>
			fs->fsi_flag = 0;
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	2200      	movs	r2, #0
 800c2c0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	785b      	ldrb	r3, [r3, #1]
 800c2c6:	2200      	movs	r2, #0
 800c2c8:	2100      	movs	r1, #0
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	f7ff fca4 	bl	800bc18 <disk_ioctl>
 800c2d0:	4603      	mov	r3, r0
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d001      	beq.n	800c2da <sync_fs+0xca>
 800c2d6:	2301      	movs	r3, #1
 800c2d8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800c2da:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2dc:	4618      	mov	r0, r3
 800c2de:	3710      	adds	r7, #16
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	bd80      	pop	{r7, pc}
 800c2e4:	41615252 	.word	0x41615252
 800c2e8:	61417272 	.word	0x61417272

0800c2ec <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800c2ec:	b480      	push	{r7}
 800c2ee:	b083      	sub	sp, #12
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
 800c2f4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800c2f6:	683b      	ldr	r3, [r7, #0]
 800c2f8:	3b02      	subs	r3, #2
 800c2fa:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	695b      	ldr	r3, [r3, #20]
 800c300:	3b02      	subs	r3, #2
 800c302:	683a      	ldr	r2, [r7, #0]
 800c304:	429a      	cmp	r2, r3
 800c306:	d301      	bcc.n	800c30c <clust2sect+0x20>
 800c308:	2300      	movs	r3, #0
 800c30a:	e008      	b.n	800c31e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	895b      	ldrh	r3, [r3, #10]
 800c310:	461a      	mov	r2, r3
 800c312:	683b      	ldr	r3, [r7, #0]
 800c314:	fb03 f202 	mul.w	r2, r3, r2
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c31c:	4413      	add	r3, r2
}
 800c31e:	4618      	mov	r0, r3
 800c320:	370c      	adds	r7, #12
 800c322:	46bd      	mov	sp, r7
 800c324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c328:	4770      	bx	lr

0800c32a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800c32a:	b580      	push	{r7, lr}
 800c32c:	b086      	sub	sp, #24
 800c32e:	af00      	add	r7, sp, #0
 800c330:	6078      	str	r0, [r7, #4]
 800c332:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c33a:	683b      	ldr	r3, [r7, #0]
 800c33c:	2b01      	cmp	r3, #1
 800c33e:	d904      	bls.n	800c34a <get_fat+0x20>
 800c340:	693b      	ldr	r3, [r7, #16]
 800c342:	695b      	ldr	r3, [r3, #20]
 800c344:	683a      	ldr	r2, [r7, #0]
 800c346:	429a      	cmp	r2, r3
 800c348:	d302      	bcc.n	800c350 <get_fat+0x26>
		val = 1;	/* Internal error */
 800c34a:	2301      	movs	r3, #1
 800c34c:	617b      	str	r3, [r7, #20]
 800c34e:	e08e      	b.n	800c46e <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c350:	f04f 33ff 	mov.w	r3, #4294967295
 800c354:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800c356:	693b      	ldr	r3, [r7, #16]
 800c358:	781b      	ldrb	r3, [r3, #0]
 800c35a:	2b03      	cmp	r3, #3
 800c35c:	d061      	beq.n	800c422 <get_fat+0xf8>
 800c35e:	2b03      	cmp	r3, #3
 800c360:	dc7b      	bgt.n	800c45a <get_fat+0x130>
 800c362:	2b01      	cmp	r3, #1
 800c364:	d002      	beq.n	800c36c <get_fat+0x42>
 800c366:	2b02      	cmp	r3, #2
 800c368:	d041      	beq.n	800c3ee <get_fat+0xc4>
 800c36a:	e076      	b.n	800c45a <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800c36c:	683b      	ldr	r3, [r7, #0]
 800c36e:	60fb      	str	r3, [r7, #12]
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	085b      	lsrs	r3, r3, #1
 800c374:	68fa      	ldr	r2, [r7, #12]
 800c376:	4413      	add	r3, r2
 800c378:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c37a:	693b      	ldr	r3, [r7, #16]
 800c37c:	6a1a      	ldr	r2, [r3, #32]
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	0a5b      	lsrs	r3, r3, #9
 800c382:	4413      	add	r3, r2
 800c384:	4619      	mov	r1, r3
 800c386:	6938      	ldr	r0, [r7, #16]
 800c388:	f7ff ff14 	bl	800c1b4 <move_window>
 800c38c:	4603      	mov	r3, r0
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d166      	bne.n	800c460 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	1c5a      	adds	r2, r3, #1
 800c396:	60fa      	str	r2, [r7, #12]
 800c398:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c39c:	693a      	ldr	r2, [r7, #16]
 800c39e:	4413      	add	r3, r2
 800c3a0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c3a4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c3a6:	693b      	ldr	r3, [r7, #16]
 800c3a8:	6a1a      	ldr	r2, [r3, #32]
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	0a5b      	lsrs	r3, r3, #9
 800c3ae:	4413      	add	r3, r2
 800c3b0:	4619      	mov	r1, r3
 800c3b2:	6938      	ldr	r0, [r7, #16]
 800c3b4:	f7ff fefe 	bl	800c1b4 <move_window>
 800c3b8:	4603      	mov	r3, r0
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d152      	bne.n	800c464 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3c4:	693a      	ldr	r2, [r7, #16]
 800c3c6:	4413      	add	r3, r2
 800c3c8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c3cc:	021b      	lsls	r3, r3, #8
 800c3ce:	68ba      	ldr	r2, [r7, #8]
 800c3d0:	4313      	orrs	r3, r2
 800c3d2:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c3d4:	683b      	ldr	r3, [r7, #0]
 800c3d6:	f003 0301 	and.w	r3, r3, #1
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d002      	beq.n	800c3e4 <get_fat+0xba>
 800c3de:	68bb      	ldr	r3, [r7, #8]
 800c3e0:	091b      	lsrs	r3, r3, #4
 800c3e2:	e002      	b.n	800c3ea <get_fat+0xc0>
 800c3e4:	68bb      	ldr	r3, [r7, #8]
 800c3e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c3ea:	617b      	str	r3, [r7, #20]
			break;
 800c3ec:	e03f      	b.n	800c46e <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c3ee:	693b      	ldr	r3, [r7, #16]
 800c3f0:	6a1a      	ldr	r2, [r3, #32]
 800c3f2:	683b      	ldr	r3, [r7, #0]
 800c3f4:	0a1b      	lsrs	r3, r3, #8
 800c3f6:	4413      	add	r3, r2
 800c3f8:	4619      	mov	r1, r3
 800c3fa:	6938      	ldr	r0, [r7, #16]
 800c3fc:	f7ff feda 	bl	800c1b4 <move_window>
 800c400:	4603      	mov	r3, r0
 800c402:	2b00      	cmp	r3, #0
 800c404:	d130      	bne.n	800c468 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800c406:	693b      	ldr	r3, [r7, #16]
 800c408:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c40c:	683b      	ldr	r3, [r7, #0]
 800c40e:	005b      	lsls	r3, r3, #1
 800c410:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800c414:	4413      	add	r3, r2
 800c416:	4618      	mov	r0, r3
 800c418:	f7ff fc1c 	bl	800bc54 <ld_word>
 800c41c:	4603      	mov	r3, r0
 800c41e:	617b      	str	r3, [r7, #20]
			break;
 800c420:	e025      	b.n	800c46e <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c422:	693b      	ldr	r3, [r7, #16]
 800c424:	6a1a      	ldr	r2, [r3, #32]
 800c426:	683b      	ldr	r3, [r7, #0]
 800c428:	09db      	lsrs	r3, r3, #7
 800c42a:	4413      	add	r3, r2
 800c42c:	4619      	mov	r1, r3
 800c42e:	6938      	ldr	r0, [r7, #16]
 800c430:	f7ff fec0 	bl	800c1b4 <move_window>
 800c434:	4603      	mov	r3, r0
 800c436:	2b00      	cmp	r3, #0
 800c438:	d118      	bne.n	800c46c <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800c43a:	693b      	ldr	r3, [r7, #16]
 800c43c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c440:	683b      	ldr	r3, [r7, #0]
 800c442:	009b      	lsls	r3, r3, #2
 800c444:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800c448:	4413      	add	r3, r2
 800c44a:	4618      	mov	r0, r3
 800c44c:	f7ff fc1a 	bl	800bc84 <ld_dword>
 800c450:	4603      	mov	r3, r0
 800c452:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800c456:	617b      	str	r3, [r7, #20]
			break;
 800c458:	e009      	b.n	800c46e <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800c45a:	2301      	movs	r3, #1
 800c45c:	617b      	str	r3, [r7, #20]
 800c45e:	e006      	b.n	800c46e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c460:	bf00      	nop
 800c462:	e004      	b.n	800c46e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c464:	bf00      	nop
 800c466:	e002      	b.n	800c46e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c468:	bf00      	nop
 800c46a:	e000      	b.n	800c46e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c46c:	bf00      	nop
		}
	}

	return val;
 800c46e:	697b      	ldr	r3, [r7, #20]
}
 800c470:	4618      	mov	r0, r3
 800c472:	3718      	adds	r7, #24
 800c474:	46bd      	mov	sp, r7
 800c476:	bd80      	pop	{r7, pc}

0800c478 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800c478:	b590      	push	{r4, r7, lr}
 800c47a:	b089      	sub	sp, #36	@ 0x24
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	60f8      	str	r0, [r7, #12]
 800c480:	60b9      	str	r1, [r7, #8]
 800c482:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800c484:	2302      	movs	r3, #2
 800c486:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800c488:	68bb      	ldr	r3, [r7, #8]
 800c48a:	2b01      	cmp	r3, #1
 800c48c:	f240 80d9 	bls.w	800c642 <put_fat+0x1ca>
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	695b      	ldr	r3, [r3, #20]
 800c494:	68ba      	ldr	r2, [r7, #8]
 800c496:	429a      	cmp	r2, r3
 800c498:	f080 80d3 	bcs.w	800c642 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	781b      	ldrb	r3, [r3, #0]
 800c4a0:	2b03      	cmp	r3, #3
 800c4a2:	f000 8096 	beq.w	800c5d2 <put_fat+0x15a>
 800c4a6:	2b03      	cmp	r3, #3
 800c4a8:	f300 80cb 	bgt.w	800c642 <put_fat+0x1ca>
 800c4ac:	2b01      	cmp	r3, #1
 800c4ae:	d002      	beq.n	800c4b6 <put_fat+0x3e>
 800c4b0:	2b02      	cmp	r3, #2
 800c4b2:	d06e      	beq.n	800c592 <put_fat+0x11a>
 800c4b4:	e0c5      	b.n	800c642 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800c4b6:	68bb      	ldr	r3, [r7, #8]
 800c4b8:	61bb      	str	r3, [r7, #24]
 800c4ba:	69bb      	ldr	r3, [r7, #24]
 800c4bc:	085b      	lsrs	r3, r3, #1
 800c4be:	69ba      	ldr	r2, [r7, #24]
 800c4c0:	4413      	add	r3, r2
 800c4c2:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	6a1a      	ldr	r2, [r3, #32]
 800c4c8:	69bb      	ldr	r3, [r7, #24]
 800c4ca:	0a5b      	lsrs	r3, r3, #9
 800c4cc:	4413      	add	r3, r2
 800c4ce:	4619      	mov	r1, r3
 800c4d0:	68f8      	ldr	r0, [r7, #12]
 800c4d2:	f7ff fe6f 	bl	800c1b4 <move_window>
 800c4d6:	4603      	mov	r3, r0
 800c4d8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c4da:	7ffb      	ldrb	r3, [r7, #31]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	f040 80a9 	bne.w	800c634 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c4e8:	69bb      	ldr	r3, [r7, #24]
 800c4ea:	1c59      	adds	r1, r3, #1
 800c4ec:	61b9      	str	r1, [r7, #24]
 800c4ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4f2:	4413      	add	r3, r2
 800c4f4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c4f6:	68bb      	ldr	r3, [r7, #8]
 800c4f8:	f003 0301 	and.w	r3, r3, #1
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d00d      	beq.n	800c51c <put_fat+0xa4>
 800c500:	697b      	ldr	r3, [r7, #20]
 800c502:	781b      	ldrb	r3, [r3, #0]
 800c504:	b25b      	sxtb	r3, r3
 800c506:	f003 030f 	and.w	r3, r3, #15
 800c50a:	b25a      	sxtb	r2, r3
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	b2db      	uxtb	r3, r3
 800c510:	011b      	lsls	r3, r3, #4
 800c512:	b25b      	sxtb	r3, r3
 800c514:	4313      	orrs	r3, r2
 800c516:	b25b      	sxtb	r3, r3
 800c518:	b2db      	uxtb	r3, r3
 800c51a:	e001      	b.n	800c520 <put_fat+0xa8>
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	b2db      	uxtb	r3, r3
 800c520:	697a      	ldr	r2, [r7, #20]
 800c522:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	2201      	movs	r2, #1
 800c528:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	6a1a      	ldr	r2, [r3, #32]
 800c52e:	69bb      	ldr	r3, [r7, #24]
 800c530:	0a5b      	lsrs	r3, r3, #9
 800c532:	4413      	add	r3, r2
 800c534:	4619      	mov	r1, r3
 800c536:	68f8      	ldr	r0, [r7, #12]
 800c538:	f7ff fe3c 	bl	800c1b4 <move_window>
 800c53c:	4603      	mov	r3, r0
 800c53e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c540:	7ffb      	ldrb	r3, [r7, #31]
 800c542:	2b00      	cmp	r3, #0
 800c544:	d178      	bne.n	800c638 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c54c:	69bb      	ldr	r3, [r7, #24]
 800c54e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c552:	4413      	add	r3, r2
 800c554:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c556:	68bb      	ldr	r3, [r7, #8]
 800c558:	f003 0301 	and.w	r3, r3, #1
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d003      	beq.n	800c568 <put_fat+0xf0>
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	091b      	lsrs	r3, r3, #4
 800c564:	b2db      	uxtb	r3, r3
 800c566:	e00e      	b.n	800c586 <put_fat+0x10e>
 800c568:	697b      	ldr	r3, [r7, #20]
 800c56a:	781b      	ldrb	r3, [r3, #0]
 800c56c:	b25b      	sxtb	r3, r3
 800c56e:	f023 030f 	bic.w	r3, r3, #15
 800c572:	b25a      	sxtb	r2, r3
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	0a1b      	lsrs	r3, r3, #8
 800c578:	b25b      	sxtb	r3, r3
 800c57a:	f003 030f 	and.w	r3, r3, #15
 800c57e:	b25b      	sxtb	r3, r3
 800c580:	4313      	orrs	r3, r2
 800c582:	b25b      	sxtb	r3, r3
 800c584:	b2db      	uxtb	r3, r3
 800c586:	697a      	ldr	r2, [r7, #20]
 800c588:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	2201      	movs	r2, #1
 800c58e:	70da      	strb	r2, [r3, #3]
			break;
 800c590:	e057      	b.n	800c642 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	6a1a      	ldr	r2, [r3, #32]
 800c596:	68bb      	ldr	r3, [r7, #8]
 800c598:	0a1b      	lsrs	r3, r3, #8
 800c59a:	4413      	add	r3, r2
 800c59c:	4619      	mov	r1, r3
 800c59e:	68f8      	ldr	r0, [r7, #12]
 800c5a0:	f7ff fe08 	bl	800c1b4 <move_window>
 800c5a4:	4603      	mov	r3, r0
 800c5a6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c5a8:	7ffb      	ldrb	r3, [r7, #31]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d146      	bne.n	800c63c <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c5b4:	68bb      	ldr	r3, [r7, #8]
 800c5b6:	005b      	lsls	r3, r3, #1
 800c5b8:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800c5bc:	4413      	add	r3, r2
 800c5be:	687a      	ldr	r2, [r7, #4]
 800c5c0:	b292      	uxth	r2, r2
 800c5c2:	4611      	mov	r1, r2
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	f7ff fb80 	bl	800bcca <st_word>
			fs->wflag = 1;
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	2201      	movs	r2, #1
 800c5ce:	70da      	strb	r2, [r3, #3]
			break;
 800c5d0:	e037      	b.n	800c642 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	6a1a      	ldr	r2, [r3, #32]
 800c5d6:	68bb      	ldr	r3, [r7, #8]
 800c5d8:	09db      	lsrs	r3, r3, #7
 800c5da:	4413      	add	r3, r2
 800c5dc:	4619      	mov	r1, r3
 800c5de:	68f8      	ldr	r0, [r7, #12]
 800c5e0:	f7ff fde8 	bl	800c1b4 <move_window>
 800c5e4:	4603      	mov	r3, r0
 800c5e6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c5e8:	7ffb      	ldrb	r3, [r7, #31]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d128      	bne.n	800c640 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c5fa:	68bb      	ldr	r3, [r7, #8]
 800c5fc:	009b      	lsls	r3, r3, #2
 800c5fe:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800c602:	4413      	add	r3, r2
 800c604:	4618      	mov	r0, r3
 800c606:	f7ff fb3d 	bl	800bc84 <ld_dword>
 800c60a:	4603      	mov	r3, r0
 800c60c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800c610:	4323      	orrs	r3, r4
 800c612:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c61a:	68bb      	ldr	r3, [r7, #8]
 800c61c:	009b      	lsls	r3, r3, #2
 800c61e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800c622:	4413      	add	r3, r2
 800c624:	6879      	ldr	r1, [r7, #4]
 800c626:	4618      	mov	r0, r3
 800c628:	f7ff fb6a 	bl	800bd00 <st_dword>
			fs->wflag = 1;
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	2201      	movs	r2, #1
 800c630:	70da      	strb	r2, [r3, #3]
			break;
 800c632:	e006      	b.n	800c642 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c634:	bf00      	nop
 800c636:	e004      	b.n	800c642 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c638:	bf00      	nop
 800c63a:	e002      	b.n	800c642 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c63c:	bf00      	nop
 800c63e:	e000      	b.n	800c642 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c640:	bf00      	nop
		}
	}
	return res;
 800c642:	7ffb      	ldrb	r3, [r7, #31]
}
 800c644:	4618      	mov	r0, r3
 800c646:	3724      	adds	r7, #36	@ 0x24
 800c648:	46bd      	mov	sp, r7
 800c64a:	bd90      	pop	{r4, r7, pc}

0800c64c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800c64c:	b580      	push	{r7, lr}
 800c64e:	b088      	sub	sp, #32
 800c650:	af00      	add	r7, sp, #0
 800c652:	60f8      	str	r0, [r7, #12]
 800c654:	60b9      	str	r1, [r7, #8]
 800c656:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800c658:	2300      	movs	r3, #0
 800c65a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800c662:	68bb      	ldr	r3, [r7, #8]
 800c664:	2b01      	cmp	r3, #1
 800c666:	d904      	bls.n	800c672 <remove_chain+0x26>
 800c668:	69bb      	ldr	r3, [r7, #24]
 800c66a:	695b      	ldr	r3, [r3, #20]
 800c66c:	68ba      	ldr	r2, [r7, #8]
 800c66e:	429a      	cmp	r2, r3
 800c670:	d301      	bcc.n	800c676 <remove_chain+0x2a>
 800c672:	2302      	movs	r3, #2
 800c674:	e04b      	b.n	800c70e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d00c      	beq.n	800c696 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800c67c:	f04f 32ff 	mov.w	r2, #4294967295
 800c680:	6879      	ldr	r1, [r7, #4]
 800c682:	69b8      	ldr	r0, [r7, #24]
 800c684:	f7ff fef8 	bl	800c478 <put_fat>
 800c688:	4603      	mov	r3, r0
 800c68a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800c68c:	7ffb      	ldrb	r3, [r7, #31]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d001      	beq.n	800c696 <remove_chain+0x4a>
 800c692:	7ffb      	ldrb	r3, [r7, #31]
 800c694:	e03b      	b.n	800c70e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800c696:	68b9      	ldr	r1, [r7, #8]
 800c698:	68f8      	ldr	r0, [r7, #12]
 800c69a:	f7ff fe46 	bl	800c32a <get_fat>
 800c69e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800c6a0:	697b      	ldr	r3, [r7, #20]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d031      	beq.n	800c70a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c6a6:	697b      	ldr	r3, [r7, #20]
 800c6a8:	2b01      	cmp	r3, #1
 800c6aa:	d101      	bne.n	800c6b0 <remove_chain+0x64>
 800c6ac:	2302      	movs	r3, #2
 800c6ae:	e02e      	b.n	800c70e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c6b0:	697b      	ldr	r3, [r7, #20]
 800c6b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6b6:	d101      	bne.n	800c6bc <remove_chain+0x70>
 800c6b8:	2301      	movs	r3, #1
 800c6ba:	e028      	b.n	800c70e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800c6bc:	2200      	movs	r2, #0
 800c6be:	68b9      	ldr	r1, [r7, #8]
 800c6c0:	69b8      	ldr	r0, [r7, #24]
 800c6c2:	f7ff fed9 	bl	800c478 <put_fat>
 800c6c6:	4603      	mov	r3, r0
 800c6c8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800c6ca:	7ffb      	ldrb	r3, [r7, #31]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d001      	beq.n	800c6d4 <remove_chain+0x88>
 800c6d0:	7ffb      	ldrb	r3, [r7, #31]
 800c6d2:	e01c      	b.n	800c70e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800c6d4:	69bb      	ldr	r3, [r7, #24]
 800c6d6:	691a      	ldr	r2, [r3, #16]
 800c6d8:	69bb      	ldr	r3, [r7, #24]
 800c6da:	695b      	ldr	r3, [r3, #20]
 800c6dc:	3b02      	subs	r3, #2
 800c6de:	429a      	cmp	r2, r3
 800c6e0:	d20b      	bcs.n	800c6fa <remove_chain+0xae>
			fs->free_clst++;
 800c6e2:	69bb      	ldr	r3, [r7, #24]
 800c6e4:	691b      	ldr	r3, [r3, #16]
 800c6e6:	1c5a      	adds	r2, r3, #1
 800c6e8:	69bb      	ldr	r3, [r7, #24]
 800c6ea:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800c6ec:	69bb      	ldr	r3, [r7, #24]
 800c6ee:	791b      	ldrb	r3, [r3, #4]
 800c6f0:	f043 0301 	orr.w	r3, r3, #1
 800c6f4:	b2da      	uxtb	r2, r3
 800c6f6:	69bb      	ldr	r3, [r7, #24]
 800c6f8:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800c6fa:	697b      	ldr	r3, [r7, #20]
 800c6fc:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800c6fe:	69bb      	ldr	r3, [r7, #24]
 800c700:	695b      	ldr	r3, [r3, #20]
 800c702:	68ba      	ldr	r2, [r7, #8]
 800c704:	429a      	cmp	r2, r3
 800c706:	d3c6      	bcc.n	800c696 <remove_chain+0x4a>
 800c708:	e000      	b.n	800c70c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800c70a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800c70c:	2300      	movs	r3, #0
}
 800c70e:	4618      	mov	r0, r3
 800c710:	3720      	adds	r7, #32
 800c712:	46bd      	mov	sp, r7
 800c714:	bd80      	pop	{r7, pc}

0800c716 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c716:	b580      	push	{r7, lr}
 800c718:	b088      	sub	sp, #32
 800c71a:	af00      	add	r7, sp, #0
 800c71c:	6078      	str	r0, [r7, #4]
 800c71e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c726:	683b      	ldr	r3, [r7, #0]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d10d      	bne.n	800c748 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800c72c:	693b      	ldr	r3, [r7, #16]
 800c72e:	68db      	ldr	r3, [r3, #12]
 800c730:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c732:	69bb      	ldr	r3, [r7, #24]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d004      	beq.n	800c742 <create_chain+0x2c>
 800c738:	693b      	ldr	r3, [r7, #16]
 800c73a:	695b      	ldr	r3, [r3, #20]
 800c73c:	69ba      	ldr	r2, [r7, #24]
 800c73e:	429a      	cmp	r2, r3
 800c740:	d31b      	bcc.n	800c77a <create_chain+0x64>
 800c742:	2301      	movs	r3, #1
 800c744:	61bb      	str	r3, [r7, #24]
 800c746:	e018      	b.n	800c77a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c748:	6839      	ldr	r1, [r7, #0]
 800c74a:	6878      	ldr	r0, [r7, #4]
 800c74c:	f7ff fded 	bl	800c32a <get_fat>
 800c750:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	2b01      	cmp	r3, #1
 800c756:	d801      	bhi.n	800c75c <create_chain+0x46>
 800c758:	2301      	movs	r3, #1
 800c75a:	e070      	b.n	800c83e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c762:	d101      	bne.n	800c768 <create_chain+0x52>
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	e06a      	b.n	800c83e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c768:	693b      	ldr	r3, [r7, #16]
 800c76a:	695b      	ldr	r3, [r3, #20]
 800c76c:	68fa      	ldr	r2, [r7, #12]
 800c76e:	429a      	cmp	r2, r3
 800c770:	d201      	bcs.n	800c776 <create_chain+0x60>
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	e063      	b.n	800c83e <create_chain+0x128>
		scl = clst;
 800c776:	683b      	ldr	r3, [r7, #0]
 800c778:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c77a:	69bb      	ldr	r3, [r7, #24]
 800c77c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c77e:	69fb      	ldr	r3, [r7, #28]
 800c780:	3301      	adds	r3, #1
 800c782:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c784:	693b      	ldr	r3, [r7, #16]
 800c786:	695b      	ldr	r3, [r3, #20]
 800c788:	69fa      	ldr	r2, [r7, #28]
 800c78a:	429a      	cmp	r2, r3
 800c78c:	d307      	bcc.n	800c79e <create_chain+0x88>
				ncl = 2;
 800c78e:	2302      	movs	r3, #2
 800c790:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c792:	69fa      	ldr	r2, [r7, #28]
 800c794:	69bb      	ldr	r3, [r7, #24]
 800c796:	429a      	cmp	r2, r3
 800c798:	d901      	bls.n	800c79e <create_chain+0x88>
 800c79a:	2300      	movs	r3, #0
 800c79c:	e04f      	b.n	800c83e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c79e:	69f9      	ldr	r1, [r7, #28]
 800c7a0:	6878      	ldr	r0, [r7, #4]
 800c7a2:	f7ff fdc2 	bl	800c32a <get_fat>
 800c7a6:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d00e      	beq.n	800c7cc <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	2b01      	cmp	r3, #1
 800c7b2:	d003      	beq.n	800c7bc <create_chain+0xa6>
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7ba:	d101      	bne.n	800c7c0 <create_chain+0xaa>
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	e03e      	b.n	800c83e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800c7c0:	69fa      	ldr	r2, [r7, #28]
 800c7c2:	69bb      	ldr	r3, [r7, #24]
 800c7c4:	429a      	cmp	r2, r3
 800c7c6:	d1da      	bne.n	800c77e <create_chain+0x68>
 800c7c8:	2300      	movs	r3, #0
 800c7ca:	e038      	b.n	800c83e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800c7cc:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c7ce:	f04f 32ff 	mov.w	r2, #4294967295
 800c7d2:	69f9      	ldr	r1, [r7, #28]
 800c7d4:	6938      	ldr	r0, [r7, #16]
 800c7d6:	f7ff fe4f 	bl	800c478 <put_fat>
 800c7da:	4603      	mov	r3, r0
 800c7dc:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c7de:	7dfb      	ldrb	r3, [r7, #23]
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d109      	bne.n	800c7f8 <create_chain+0xe2>
 800c7e4:	683b      	ldr	r3, [r7, #0]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d006      	beq.n	800c7f8 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c7ea:	69fa      	ldr	r2, [r7, #28]
 800c7ec:	6839      	ldr	r1, [r7, #0]
 800c7ee:	6938      	ldr	r0, [r7, #16]
 800c7f0:	f7ff fe42 	bl	800c478 <put_fat>
 800c7f4:	4603      	mov	r3, r0
 800c7f6:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c7f8:	7dfb      	ldrb	r3, [r7, #23]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d116      	bne.n	800c82c <create_chain+0x116>
		fs->last_clst = ncl;
 800c7fe:	693b      	ldr	r3, [r7, #16]
 800c800:	69fa      	ldr	r2, [r7, #28]
 800c802:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c804:	693b      	ldr	r3, [r7, #16]
 800c806:	691a      	ldr	r2, [r3, #16]
 800c808:	693b      	ldr	r3, [r7, #16]
 800c80a:	695b      	ldr	r3, [r3, #20]
 800c80c:	3b02      	subs	r3, #2
 800c80e:	429a      	cmp	r2, r3
 800c810:	d804      	bhi.n	800c81c <create_chain+0x106>
 800c812:	693b      	ldr	r3, [r7, #16]
 800c814:	691b      	ldr	r3, [r3, #16]
 800c816:	1e5a      	subs	r2, r3, #1
 800c818:	693b      	ldr	r3, [r7, #16]
 800c81a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800c81c:	693b      	ldr	r3, [r7, #16]
 800c81e:	791b      	ldrb	r3, [r3, #4]
 800c820:	f043 0301 	orr.w	r3, r3, #1
 800c824:	b2da      	uxtb	r2, r3
 800c826:	693b      	ldr	r3, [r7, #16]
 800c828:	711a      	strb	r2, [r3, #4]
 800c82a:	e007      	b.n	800c83c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c82c:	7dfb      	ldrb	r3, [r7, #23]
 800c82e:	2b01      	cmp	r3, #1
 800c830:	d102      	bne.n	800c838 <create_chain+0x122>
 800c832:	f04f 33ff 	mov.w	r3, #4294967295
 800c836:	e000      	b.n	800c83a <create_chain+0x124>
 800c838:	2301      	movs	r3, #1
 800c83a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c83c:	69fb      	ldr	r3, [r7, #28]
}
 800c83e:	4618      	mov	r0, r3
 800c840:	3720      	adds	r7, #32
 800c842:	46bd      	mov	sp, r7
 800c844:	bd80      	pop	{r7, pc}

0800c846 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800c846:	b480      	push	{r7}
 800c848:	b087      	sub	sp, #28
 800c84a:	af00      	add	r7, sp, #0
 800c84c:	6078      	str	r0, [r7, #4]
 800c84e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c85a:	3304      	adds	r3, #4
 800c85c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c85e:	683b      	ldr	r3, [r7, #0]
 800c860:	0a5b      	lsrs	r3, r3, #9
 800c862:	68fa      	ldr	r2, [r7, #12]
 800c864:	8952      	ldrh	r2, [r2, #10]
 800c866:	fbb3 f3f2 	udiv	r3, r3, r2
 800c86a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c86c:	693b      	ldr	r3, [r7, #16]
 800c86e:	1d1a      	adds	r2, r3, #4
 800c870:	613a      	str	r2, [r7, #16]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c876:	68bb      	ldr	r3, [r7, #8]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d101      	bne.n	800c880 <clmt_clust+0x3a>
 800c87c:	2300      	movs	r3, #0
 800c87e:	e010      	b.n	800c8a2 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800c880:	697a      	ldr	r2, [r7, #20]
 800c882:	68bb      	ldr	r3, [r7, #8]
 800c884:	429a      	cmp	r2, r3
 800c886:	d307      	bcc.n	800c898 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800c888:	697a      	ldr	r2, [r7, #20]
 800c88a:	68bb      	ldr	r3, [r7, #8]
 800c88c:	1ad3      	subs	r3, r2, r3
 800c88e:	617b      	str	r3, [r7, #20]
 800c890:	693b      	ldr	r3, [r7, #16]
 800c892:	3304      	adds	r3, #4
 800c894:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c896:	e7e9      	b.n	800c86c <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800c898:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800c89a:	693b      	ldr	r3, [r7, #16]
 800c89c:	681a      	ldr	r2, [r3, #0]
 800c89e:	697b      	ldr	r3, [r7, #20]
 800c8a0:	4413      	add	r3, r2
}
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	371c      	adds	r7, #28
 800c8a6:	46bd      	mov	sp, r7
 800c8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ac:	4770      	bx	lr

0800c8ae <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c8ae:	b580      	push	{r7, lr}
 800c8b0:	b086      	sub	sp, #24
 800c8b2:	af00      	add	r7, sp, #0
 800c8b4:	6078      	str	r0, [r7, #4]
 800c8b6:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c8be:	683b      	ldr	r3, [r7, #0]
 800c8c0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c8c4:	d204      	bcs.n	800c8d0 <dir_sdi+0x22>
 800c8c6:	683b      	ldr	r3, [r7, #0]
 800c8c8:	f003 031f 	and.w	r3, r3, #31
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d001      	beq.n	800c8d4 <dir_sdi+0x26>
		return FR_INT_ERR;
 800c8d0:	2302      	movs	r3, #2
 800c8d2:	e063      	b.n	800c99c <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	683a      	ldr	r2, [r7, #0]
 800c8d8:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	689b      	ldr	r3, [r3, #8]
 800c8de:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c8e0:	697b      	ldr	r3, [r7, #20]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d106      	bne.n	800c8f4 <dir_sdi+0x46>
 800c8e6:	693b      	ldr	r3, [r7, #16]
 800c8e8:	781b      	ldrb	r3, [r3, #0]
 800c8ea:	2b02      	cmp	r3, #2
 800c8ec:	d902      	bls.n	800c8f4 <dir_sdi+0x46>
		clst = fs->dirbase;
 800c8ee:	693b      	ldr	r3, [r7, #16]
 800c8f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8f2:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c8f4:	697b      	ldr	r3, [r7, #20]
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d10c      	bne.n	800c914 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c8fa:	683b      	ldr	r3, [r7, #0]
 800c8fc:	095b      	lsrs	r3, r3, #5
 800c8fe:	693a      	ldr	r2, [r7, #16]
 800c900:	8912      	ldrh	r2, [r2, #8]
 800c902:	4293      	cmp	r3, r2
 800c904:	d301      	bcc.n	800c90a <dir_sdi+0x5c>
 800c906:	2302      	movs	r3, #2
 800c908:	e048      	b.n	800c99c <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800c90a:	693b      	ldr	r3, [r7, #16]
 800c90c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	61da      	str	r2, [r3, #28]
 800c912:	e029      	b.n	800c968 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c914:	693b      	ldr	r3, [r7, #16]
 800c916:	895b      	ldrh	r3, [r3, #10]
 800c918:	025b      	lsls	r3, r3, #9
 800c91a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c91c:	e019      	b.n	800c952 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	6979      	ldr	r1, [r7, #20]
 800c922:	4618      	mov	r0, r3
 800c924:	f7ff fd01 	bl	800c32a <get_fat>
 800c928:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c92a:	697b      	ldr	r3, [r7, #20]
 800c92c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c930:	d101      	bne.n	800c936 <dir_sdi+0x88>
 800c932:	2301      	movs	r3, #1
 800c934:	e032      	b.n	800c99c <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c936:	697b      	ldr	r3, [r7, #20]
 800c938:	2b01      	cmp	r3, #1
 800c93a:	d904      	bls.n	800c946 <dir_sdi+0x98>
 800c93c:	693b      	ldr	r3, [r7, #16]
 800c93e:	695b      	ldr	r3, [r3, #20]
 800c940:	697a      	ldr	r2, [r7, #20]
 800c942:	429a      	cmp	r2, r3
 800c944:	d301      	bcc.n	800c94a <dir_sdi+0x9c>
 800c946:	2302      	movs	r3, #2
 800c948:	e028      	b.n	800c99c <dir_sdi+0xee>
			ofs -= csz;
 800c94a:	683a      	ldr	r2, [r7, #0]
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	1ad3      	subs	r3, r2, r3
 800c950:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c952:	683a      	ldr	r2, [r7, #0]
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	429a      	cmp	r2, r3
 800c958:	d2e1      	bcs.n	800c91e <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800c95a:	6979      	ldr	r1, [r7, #20]
 800c95c:	6938      	ldr	r0, [r7, #16]
 800c95e:	f7ff fcc5 	bl	800c2ec <clust2sect>
 800c962:	4602      	mov	r2, r0
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	697a      	ldr	r2, [r7, #20]
 800c96c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	69db      	ldr	r3, [r3, #28]
 800c972:	2b00      	cmp	r3, #0
 800c974:	d101      	bne.n	800c97a <dir_sdi+0xcc>
 800c976:	2302      	movs	r3, #2
 800c978:	e010      	b.n	800c99c <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	69da      	ldr	r2, [r3, #28]
 800c97e:	683b      	ldr	r3, [r7, #0]
 800c980:	0a5b      	lsrs	r3, r3, #9
 800c982:	441a      	add	r2, r3
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c988:	693b      	ldr	r3, [r7, #16]
 800c98a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c98e:	683b      	ldr	r3, [r7, #0]
 800c990:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c994:	441a      	add	r2, r3
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c99a:	2300      	movs	r3, #0
}
 800c99c:	4618      	mov	r0, r3
 800c99e:	3718      	adds	r7, #24
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	bd80      	pop	{r7, pc}

0800c9a4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c9a4:	b580      	push	{r7, lr}
 800c9a6:	b086      	sub	sp, #24
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	6078      	str	r0, [r7, #4]
 800c9ac:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	695b      	ldr	r3, [r3, #20]
 800c9b8:	3320      	adds	r3, #32
 800c9ba:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	69db      	ldr	r3, [r3, #28]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d003      	beq.n	800c9cc <dir_next+0x28>
 800c9c4:	68bb      	ldr	r3, [r7, #8]
 800c9c6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c9ca:	d301      	bcc.n	800c9d0 <dir_next+0x2c>
 800c9cc:	2304      	movs	r3, #4
 800c9ce:	e0aa      	b.n	800cb26 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c9d0:	68bb      	ldr	r3, [r7, #8]
 800c9d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	f040 8098 	bne.w	800cb0c <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	69db      	ldr	r3, [r3, #28]
 800c9e0:	1c5a      	adds	r2, r3, #1
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	699b      	ldr	r3, [r3, #24]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d10b      	bne.n	800ca06 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c9ee:	68bb      	ldr	r3, [r7, #8]
 800c9f0:	095b      	lsrs	r3, r3, #5
 800c9f2:	68fa      	ldr	r2, [r7, #12]
 800c9f4:	8912      	ldrh	r2, [r2, #8]
 800c9f6:	4293      	cmp	r3, r2
 800c9f8:	f0c0 8088 	bcc.w	800cb0c <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	2200      	movs	r2, #0
 800ca00:	61da      	str	r2, [r3, #28]
 800ca02:	2304      	movs	r3, #4
 800ca04:	e08f      	b.n	800cb26 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800ca06:	68bb      	ldr	r3, [r7, #8]
 800ca08:	0a5b      	lsrs	r3, r3, #9
 800ca0a:	68fa      	ldr	r2, [r7, #12]
 800ca0c:	8952      	ldrh	r2, [r2, #10]
 800ca0e:	3a01      	subs	r2, #1
 800ca10:	4013      	ands	r3, r2
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d17a      	bne.n	800cb0c <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800ca16:	687a      	ldr	r2, [r7, #4]
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	699b      	ldr	r3, [r3, #24]
 800ca1c:	4619      	mov	r1, r3
 800ca1e:	4610      	mov	r0, r2
 800ca20:	f7ff fc83 	bl	800c32a <get_fat>
 800ca24:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800ca26:	697b      	ldr	r3, [r7, #20]
 800ca28:	2b01      	cmp	r3, #1
 800ca2a:	d801      	bhi.n	800ca30 <dir_next+0x8c>
 800ca2c:	2302      	movs	r3, #2
 800ca2e:	e07a      	b.n	800cb26 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800ca30:	697b      	ldr	r3, [r7, #20]
 800ca32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca36:	d101      	bne.n	800ca3c <dir_next+0x98>
 800ca38:	2301      	movs	r3, #1
 800ca3a:	e074      	b.n	800cb26 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	695b      	ldr	r3, [r3, #20]
 800ca40:	697a      	ldr	r2, [r7, #20]
 800ca42:	429a      	cmp	r2, r3
 800ca44:	d358      	bcc.n	800caf8 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800ca46:	683b      	ldr	r3, [r7, #0]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d104      	bne.n	800ca56 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	2200      	movs	r2, #0
 800ca50:	61da      	str	r2, [r3, #28]
 800ca52:	2304      	movs	r3, #4
 800ca54:	e067      	b.n	800cb26 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800ca56:	687a      	ldr	r2, [r7, #4]
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	699b      	ldr	r3, [r3, #24]
 800ca5c:	4619      	mov	r1, r3
 800ca5e:	4610      	mov	r0, r2
 800ca60:	f7ff fe59 	bl	800c716 <create_chain>
 800ca64:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800ca66:	697b      	ldr	r3, [r7, #20]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d101      	bne.n	800ca70 <dir_next+0xcc>
 800ca6c:	2307      	movs	r3, #7
 800ca6e:	e05a      	b.n	800cb26 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800ca70:	697b      	ldr	r3, [r7, #20]
 800ca72:	2b01      	cmp	r3, #1
 800ca74:	d101      	bne.n	800ca7a <dir_next+0xd6>
 800ca76:	2302      	movs	r3, #2
 800ca78:	e055      	b.n	800cb26 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ca7a:	697b      	ldr	r3, [r7, #20]
 800ca7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca80:	d101      	bne.n	800ca86 <dir_next+0xe2>
 800ca82:	2301      	movs	r3, #1
 800ca84:	e04f      	b.n	800cb26 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800ca86:	68f8      	ldr	r0, [r7, #12]
 800ca88:	f7ff fb50 	bl	800c12c <sync_window>
 800ca8c:	4603      	mov	r3, r0
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d001      	beq.n	800ca96 <dir_next+0xf2>
 800ca92:	2301      	movs	r3, #1
 800ca94:	e047      	b.n	800cb26 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	3330      	adds	r3, #48	@ 0x30
 800ca9a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ca9e:	2100      	movs	r1, #0
 800caa0:	4618      	mov	r0, r3
 800caa2:	f7ff f97a 	bl	800bd9a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800caa6:	2300      	movs	r3, #0
 800caa8:	613b      	str	r3, [r7, #16]
 800caaa:	6979      	ldr	r1, [r7, #20]
 800caac:	68f8      	ldr	r0, [r7, #12]
 800caae:	f7ff fc1d 	bl	800c2ec <clust2sect>
 800cab2:	4602      	mov	r2, r0
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	62da      	str	r2, [r3, #44]	@ 0x2c
 800cab8:	e012      	b.n	800cae0 <dir_next+0x13c>
						fs->wflag = 1;
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	2201      	movs	r2, #1
 800cabe:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800cac0:	68f8      	ldr	r0, [r7, #12]
 800cac2:	f7ff fb33 	bl	800c12c <sync_window>
 800cac6:	4603      	mov	r3, r0
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d001      	beq.n	800cad0 <dir_next+0x12c>
 800cacc:	2301      	movs	r3, #1
 800cace:	e02a      	b.n	800cb26 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800cad0:	693b      	ldr	r3, [r7, #16]
 800cad2:	3301      	adds	r3, #1
 800cad4:	613b      	str	r3, [r7, #16]
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cada:	1c5a      	adds	r2, r3, #1
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	62da      	str	r2, [r3, #44]	@ 0x2c
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	895b      	ldrh	r3, [r3, #10]
 800cae4:	461a      	mov	r2, r3
 800cae6:	693b      	ldr	r3, [r7, #16]
 800cae8:	4293      	cmp	r3, r2
 800caea:	d3e6      	bcc.n	800caba <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800caf0:	693b      	ldr	r3, [r7, #16]
 800caf2:	1ad2      	subs	r2, r2, r3
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	697a      	ldr	r2, [r7, #20]
 800cafc:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800cafe:	6979      	ldr	r1, [r7, #20]
 800cb00:	68f8      	ldr	r0, [r7, #12]
 800cb02:	f7ff fbf3 	bl	800c2ec <clust2sect>
 800cb06:	4602      	mov	r2, r0
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	68ba      	ldr	r2, [r7, #8]
 800cb10:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cb18:	68bb      	ldr	r3, [r7, #8]
 800cb1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb1e:	441a      	add	r2, r3
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800cb24:	2300      	movs	r3, #0
}
 800cb26:	4618      	mov	r0, r3
 800cb28:	3718      	adds	r7, #24
 800cb2a:	46bd      	mov	sp, r7
 800cb2c:	bd80      	pop	{r7, pc}

0800cb2e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800cb2e:	b580      	push	{r7, lr}
 800cb30:	b086      	sub	sp, #24
 800cb32:	af00      	add	r7, sp, #0
 800cb34:	6078      	str	r0, [r7, #4]
 800cb36:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800cb3e:	2100      	movs	r1, #0
 800cb40:	6878      	ldr	r0, [r7, #4]
 800cb42:	f7ff feb4 	bl	800c8ae <dir_sdi>
 800cb46:	4603      	mov	r3, r0
 800cb48:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800cb4a:	7dfb      	ldrb	r3, [r7, #23]
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d12b      	bne.n	800cba8 <dir_alloc+0x7a>
		n = 0;
 800cb50:	2300      	movs	r3, #0
 800cb52:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	69db      	ldr	r3, [r3, #28]
 800cb58:	4619      	mov	r1, r3
 800cb5a:	68f8      	ldr	r0, [r7, #12]
 800cb5c:	f7ff fb2a 	bl	800c1b4 <move_window>
 800cb60:	4603      	mov	r3, r0
 800cb62:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800cb64:	7dfb      	ldrb	r3, [r7, #23]
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d11d      	bne.n	800cba6 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	6a1b      	ldr	r3, [r3, #32]
 800cb6e:	781b      	ldrb	r3, [r3, #0]
 800cb70:	2be5      	cmp	r3, #229	@ 0xe5
 800cb72:	d004      	beq.n	800cb7e <dir_alloc+0x50>
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	6a1b      	ldr	r3, [r3, #32]
 800cb78:	781b      	ldrb	r3, [r3, #0]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d107      	bne.n	800cb8e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800cb7e:	693b      	ldr	r3, [r7, #16]
 800cb80:	3301      	adds	r3, #1
 800cb82:	613b      	str	r3, [r7, #16]
 800cb84:	693a      	ldr	r2, [r7, #16]
 800cb86:	683b      	ldr	r3, [r7, #0]
 800cb88:	429a      	cmp	r2, r3
 800cb8a:	d102      	bne.n	800cb92 <dir_alloc+0x64>
 800cb8c:	e00c      	b.n	800cba8 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800cb8e:	2300      	movs	r3, #0
 800cb90:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800cb92:	2101      	movs	r1, #1
 800cb94:	6878      	ldr	r0, [r7, #4]
 800cb96:	f7ff ff05 	bl	800c9a4 <dir_next>
 800cb9a:	4603      	mov	r3, r0
 800cb9c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800cb9e:	7dfb      	ldrb	r3, [r7, #23]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d0d7      	beq.n	800cb54 <dir_alloc+0x26>
 800cba4:	e000      	b.n	800cba8 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800cba6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800cba8:	7dfb      	ldrb	r3, [r7, #23]
 800cbaa:	2b04      	cmp	r3, #4
 800cbac:	d101      	bne.n	800cbb2 <dir_alloc+0x84>
 800cbae:	2307      	movs	r3, #7
 800cbb0:	75fb      	strb	r3, [r7, #23]
	return res;
 800cbb2:	7dfb      	ldrb	r3, [r7, #23]
}
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	3718      	adds	r7, #24
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	bd80      	pop	{r7, pc}

0800cbbc <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b084      	sub	sp, #16
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	6078      	str	r0, [r7, #4]
 800cbc4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800cbc6:	683b      	ldr	r3, [r7, #0]
 800cbc8:	331a      	adds	r3, #26
 800cbca:	4618      	mov	r0, r3
 800cbcc:	f7ff f842 	bl	800bc54 <ld_word>
 800cbd0:	4603      	mov	r3, r0
 800cbd2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	781b      	ldrb	r3, [r3, #0]
 800cbd8:	2b03      	cmp	r3, #3
 800cbda:	d109      	bne.n	800cbf0 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800cbdc:	683b      	ldr	r3, [r7, #0]
 800cbde:	3314      	adds	r3, #20
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	f7ff f837 	bl	800bc54 <ld_word>
 800cbe6:	4603      	mov	r3, r0
 800cbe8:	041b      	lsls	r3, r3, #16
 800cbea:	68fa      	ldr	r2, [r7, #12]
 800cbec:	4313      	orrs	r3, r2
 800cbee:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800cbf0:	68fb      	ldr	r3, [r7, #12]
}
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	3710      	adds	r7, #16
 800cbf6:	46bd      	mov	sp, r7
 800cbf8:	bd80      	pop	{r7, pc}

0800cbfa <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800cbfa:	b580      	push	{r7, lr}
 800cbfc:	b084      	sub	sp, #16
 800cbfe:	af00      	add	r7, sp, #0
 800cc00:	60f8      	str	r0, [r7, #12]
 800cc02:	60b9      	str	r1, [r7, #8]
 800cc04:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800cc06:	68bb      	ldr	r3, [r7, #8]
 800cc08:	331a      	adds	r3, #26
 800cc0a:	687a      	ldr	r2, [r7, #4]
 800cc0c:	b292      	uxth	r2, r2
 800cc0e:	4611      	mov	r1, r2
 800cc10:	4618      	mov	r0, r3
 800cc12:	f7ff f85a 	bl	800bcca <st_word>
	if (fs->fs_type == FS_FAT32) {
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	781b      	ldrb	r3, [r3, #0]
 800cc1a:	2b03      	cmp	r3, #3
 800cc1c:	d109      	bne.n	800cc32 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800cc1e:	68bb      	ldr	r3, [r7, #8]
 800cc20:	f103 0214 	add.w	r2, r3, #20
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	0c1b      	lsrs	r3, r3, #16
 800cc28:	b29b      	uxth	r3, r3
 800cc2a:	4619      	mov	r1, r3
 800cc2c:	4610      	mov	r0, r2
 800cc2e:	f7ff f84c 	bl	800bcca <st_word>
	}
}
 800cc32:	bf00      	nop
 800cc34:	3710      	adds	r7, #16
 800cc36:	46bd      	mov	sp, r7
 800cc38:	bd80      	pop	{r7, pc}

0800cc3a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800cc3a:	b580      	push	{r7, lr}
 800cc3c:	b086      	sub	sp, #24
 800cc3e:	af00      	add	r7, sp, #0
 800cc40:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800cc48:	2100      	movs	r1, #0
 800cc4a:	6878      	ldr	r0, [r7, #4]
 800cc4c:	f7ff fe2f 	bl	800c8ae <dir_sdi>
 800cc50:	4603      	mov	r3, r0
 800cc52:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800cc54:	7dfb      	ldrb	r3, [r7, #23]
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d001      	beq.n	800cc5e <dir_find+0x24>
 800cc5a:	7dfb      	ldrb	r3, [r7, #23]
 800cc5c:	e03e      	b.n	800ccdc <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	69db      	ldr	r3, [r3, #28]
 800cc62:	4619      	mov	r1, r3
 800cc64:	6938      	ldr	r0, [r7, #16]
 800cc66:	f7ff faa5 	bl	800c1b4 <move_window>
 800cc6a:	4603      	mov	r3, r0
 800cc6c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800cc6e:	7dfb      	ldrb	r3, [r7, #23]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d12f      	bne.n	800ccd4 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	6a1b      	ldr	r3, [r3, #32]
 800cc78:	781b      	ldrb	r3, [r3, #0]
 800cc7a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800cc7c:	7bfb      	ldrb	r3, [r7, #15]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d102      	bne.n	800cc88 <dir_find+0x4e>
 800cc82:	2304      	movs	r3, #4
 800cc84:	75fb      	strb	r3, [r7, #23]
 800cc86:	e028      	b.n	800ccda <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	6a1b      	ldr	r3, [r3, #32]
 800cc8c:	330b      	adds	r3, #11
 800cc8e:	781b      	ldrb	r3, [r3, #0]
 800cc90:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800cc94:	b2da      	uxtb	r2, r3
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	6a1b      	ldr	r3, [r3, #32]
 800cc9e:	330b      	adds	r3, #11
 800cca0:	781b      	ldrb	r3, [r3, #0]
 800cca2:	f003 0308 	and.w	r3, r3, #8
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d10a      	bne.n	800ccc0 <dir_find+0x86>
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	6a18      	ldr	r0, [r3, #32]
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	3324      	adds	r3, #36	@ 0x24
 800ccb2:	220b      	movs	r2, #11
 800ccb4:	4619      	mov	r1, r3
 800ccb6:	f7ff f88b 	bl	800bdd0 <mem_cmp>
 800ccba:	4603      	mov	r3, r0
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d00b      	beq.n	800ccd8 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800ccc0:	2100      	movs	r1, #0
 800ccc2:	6878      	ldr	r0, [r7, #4]
 800ccc4:	f7ff fe6e 	bl	800c9a4 <dir_next>
 800ccc8:	4603      	mov	r3, r0
 800ccca:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800cccc:	7dfb      	ldrb	r3, [r7, #23]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d0c5      	beq.n	800cc5e <dir_find+0x24>
 800ccd2:	e002      	b.n	800ccda <dir_find+0xa0>
		if (res != FR_OK) break;
 800ccd4:	bf00      	nop
 800ccd6:	e000      	b.n	800ccda <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ccd8:	bf00      	nop

	return res;
 800ccda:	7dfb      	ldrb	r3, [r7, #23]
}
 800ccdc:	4618      	mov	r0, r3
 800ccde:	3718      	adds	r7, #24
 800cce0:	46bd      	mov	sp, r7
 800cce2:	bd80      	pop	{r7, pc}

0800cce4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800cce4:	b580      	push	{r7, lr}
 800cce6:	b084      	sub	sp, #16
 800cce8:	af00      	add	r7, sp, #0
 800ccea:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800ccf2:	2101      	movs	r1, #1
 800ccf4:	6878      	ldr	r0, [r7, #4]
 800ccf6:	f7ff ff1a 	bl	800cb2e <dir_alloc>
 800ccfa:	4603      	mov	r3, r0
 800ccfc:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800ccfe:	7bfb      	ldrb	r3, [r7, #15]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d11c      	bne.n	800cd3e <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	69db      	ldr	r3, [r3, #28]
 800cd08:	4619      	mov	r1, r3
 800cd0a:	68b8      	ldr	r0, [r7, #8]
 800cd0c:	f7ff fa52 	bl	800c1b4 <move_window>
 800cd10:	4603      	mov	r3, r0
 800cd12:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800cd14:	7bfb      	ldrb	r3, [r7, #15]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d111      	bne.n	800cd3e <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	6a1b      	ldr	r3, [r3, #32]
 800cd1e:	2220      	movs	r2, #32
 800cd20:	2100      	movs	r1, #0
 800cd22:	4618      	mov	r0, r3
 800cd24:	f7ff f839 	bl	800bd9a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	6a18      	ldr	r0, [r3, #32]
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	3324      	adds	r3, #36	@ 0x24
 800cd30:	220b      	movs	r2, #11
 800cd32:	4619      	mov	r1, r3
 800cd34:	f7ff f810 	bl	800bd58 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800cd38:	68bb      	ldr	r3, [r7, #8]
 800cd3a:	2201      	movs	r2, #1
 800cd3c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800cd3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd40:	4618      	mov	r0, r3
 800cd42:	3710      	adds	r7, #16
 800cd44:	46bd      	mov	sp, r7
 800cd46:	bd80      	pop	{r7, pc}

0800cd48 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800cd48:	b580      	push	{r7, lr}
 800cd4a:	b088      	sub	sp, #32
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	6078      	str	r0, [r7, #4]
 800cd50:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800cd52:	683b      	ldr	r3, [r7, #0]
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	60fb      	str	r3, [r7, #12]
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	3324      	adds	r3, #36	@ 0x24
 800cd5c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800cd5e:	220b      	movs	r2, #11
 800cd60:	2120      	movs	r1, #32
 800cd62:	68b8      	ldr	r0, [r7, #8]
 800cd64:	f7ff f819 	bl	800bd9a <mem_set>
	si = i = 0; ni = 8;
 800cd68:	2300      	movs	r3, #0
 800cd6a:	613b      	str	r3, [r7, #16]
 800cd6c:	693b      	ldr	r3, [r7, #16]
 800cd6e:	61fb      	str	r3, [r7, #28]
 800cd70:	2308      	movs	r3, #8
 800cd72:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800cd74:	69fb      	ldr	r3, [r7, #28]
 800cd76:	1c5a      	adds	r2, r3, #1
 800cd78:	61fa      	str	r2, [r7, #28]
 800cd7a:	68fa      	ldr	r2, [r7, #12]
 800cd7c:	4413      	add	r3, r2
 800cd7e:	781b      	ldrb	r3, [r3, #0]
 800cd80:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800cd82:	7efb      	ldrb	r3, [r7, #27]
 800cd84:	2b20      	cmp	r3, #32
 800cd86:	d94e      	bls.n	800ce26 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800cd88:	7efb      	ldrb	r3, [r7, #27]
 800cd8a:	2b2f      	cmp	r3, #47	@ 0x2f
 800cd8c:	d006      	beq.n	800cd9c <create_name+0x54>
 800cd8e:	7efb      	ldrb	r3, [r7, #27]
 800cd90:	2b5c      	cmp	r3, #92	@ 0x5c
 800cd92:	d110      	bne.n	800cdb6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800cd94:	e002      	b.n	800cd9c <create_name+0x54>
 800cd96:	69fb      	ldr	r3, [r7, #28]
 800cd98:	3301      	adds	r3, #1
 800cd9a:	61fb      	str	r3, [r7, #28]
 800cd9c:	68fa      	ldr	r2, [r7, #12]
 800cd9e:	69fb      	ldr	r3, [r7, #28]
 800cda0:	4413      	add	r3, r2
 800cda2:	781b      	ldrb	r3, [r3, #0]
 800cda4:	2b2f      	cmp	r3, #47	@ 0x2f
 800cda6:	d0f6      	beq.n	800cd96 <create_name+0x4e>
 800cda8:	68fa      	ldr	r2, [r7, #12]
 800cdaa:	69fb      	ldr	r3, [r7, #28]
 800cdac:	4413      	add	r3, r2
 800cdae:	781b      	ldrb	r3, [r3, #0]
 800cdb0:	2b5c      	cmp	r3, #92	@ 0x5c
 800cdb2:	d0f0      	beq.n	800cd96 <create_name+0x4e>
			break;
 800cdb4:	e038      	b.n	800ce28 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800cdb6:	7efb      	ldrb	r3, [r7, #27]
 800cdb8:	2b2e      	cmp	r3, #46	@ 0x2e
 800cdba:	d003      	beq.n	800cdc4 <create_name+0x7c>
 800cdbc:	693a      	ldr	r2, [r7, #16]
 800cdbe:	697b      	ldr	r3, [r7, #20]
 800cdc0:	429a      	cmp	r2, r3
 800cdc2:	d30c      	bcc.n	800cdde <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800cdc4:	697b      	ldr	r3, [r7, #20]
 800cdc6:	2b0b      	cmp	r3, #11
 800cdc8:	d002      	beq.n	800cdd0 <create_name+0x88>
 800cdca:	7efb      	ldrb	r3, [r7, #27]
 800cdcc:	2b2e      	cmp	r3, #46	@ 0x2e
 800cdce:	d001      	beq.n	800cdd4 <create_name+0x8c>
 800cdd0:	2306      	movs	r3, #6
 800cdd2:	e044      	b.n	800ce5e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800cdd4:	2308      	movs	r3, #8
 800cdd6:	613b      	str	r3, [r7, #16]
 800cdd8:	230b      	movs	r3, #11
 800cdda:	617b      	str	r3, [r7, #20]
			continue;
 800cddc:	e022      	b.n	800ce24 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800cdde:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	da04      	bge.n	800cdf0 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800cde6:	7efb      	ldrb	r3, [r7, #27]
 800cde8:	3b80      	subs	r3, #128	@ 0x80
 800cdea:	4a1f      	ldr	r2, [pc, #124]	@ (800ce68 <create_name+0x120>)
 800cdec:	5cd3      	ldrb	r3, [r2, r3]
 800cdee:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800cdf0:	7efb      	ldrb	r3, [r7, #27]
 800cdf2:	4619      	mov	r1, r3
 800cdf4:	481d      	ldr	r0, [pc, #116]	@ (800ce6c <create_name+0x124>)
 800cdf6:	f7ff f812 	bl	800be1e <chk_chr>
 800cdfa:	4603      	mov	r3, r0
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d001      	beq.n	800ce04 <create_name+0xbc>
 800ce00:	2306      	movs	r3, #6
 800ce02:	e02c      	b.n	800ce5e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800ce04:	7efb      	ldrb	r3, [r7, #27]
 800ce06:	2b60      	cmp	r3, #96	@ 0x60
 800ce08:	d905      	bls.n	800ce16 <create_name+0xce>
 800ce0a:	7efb      	ldrb	r3, [r7, #27]
 800ce0c:	2b7a      	cmp	r3, #122	@ 0x7a
 800ce0e:	d802      	bhi.n	800ce16 <create_name+0xce>
 800ce10:	7efb      	ldrb	r3, [r7, #27]
 800ce12:	3b20      	subs	r3, #32
 800ce14:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800ce16:	693b      	ldr	r3, [r7, #16]
 800ce18:	1c5a      	adds	r2, r3, #1
 800ce1a:	613a      	str	r2, [r7, #16]
 800ce1c:	68ba      	ldr	r2, [r7, #8]
 800ce1e:	4413      	add	r3, r2
 800ce20:	7efa      	ldrb	r2, [r7, #27]
 800ce22:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800ce24:	e7a6      	b.n	800cd74 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800ce26:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800ce28:	68fa      	ldr	r2, [r7, #12]
 800ce2a:	69fb      	ldr	r3, [r7, #28]
 800ce2c:	441a      	add	r2, r3
 800ce2e:	683b      	ldr	r3, [r7, #0]
 800ce30:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800ce32:	693b      	ldr	r3, [r7, #16]
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d101      	bne.n	800ce3c <create_name+0xf4>
 800ce38:	2306      	movs	r3, #6
 800ce3a:	e010      	b.n	800ce5e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800ce3c:	68bb      	ldr	r3, [r7, #8]
 800ce3e:	781b      	ldrb	r3, [r3, #0]
 800ce40:	2be5      	cmp	r3, #229	@ 0xe5
 800ce42:	d102      	bne.n	800ce4a <create_name+0x102>
 800ce44:	68bb      	ldr	r3, [r7, #8]
 800ce46:	2205      	movs	r2, #5
 800ce48:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800ce4a:	7efb      	ldrb	r3, [r7, #27]
 800ce4c:	2b20      	cmp	r3, #32
 800ce4e:	d801      	bhi.n	800ce54 <create_name+0x10c>
 800ce50:	2204      	movs	r2, #4
 800ce52:	e000      	b.n	800ce56 <create_name+0x10e>
 800ce54:	2200      	movs	r2, #0
 800ce56:	68bb      	ldr	r3, [r7, #8]
 800ce58:	330b      	adds	r3, #11
 800ce5a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800ce5c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800ce5e:	4618      	mov	r0, r3
 800ce60:	3720      	adds	r7, #32
 800ce62:	46bd      	mov	sp, r7
 800ce64:	bd80      	pop	{r7, pc}
 800ce66:	bf00      	nop
 800ce68:	08017a28 	.word	0x08017a28
 800ce6c:	08017980 	.word	0x08017980

0800ce70 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b086      	sub	sp, #24
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	6078      	str	r0, [r7, #4]
 800ce78:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800ce7e:	693b      	ldr	r3, [r7, #16]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800ce84:	e002      	b.n	800ce8c <follow_path+0x1c>
 800ce86:	683b      	ldr	r3, [r7, #0]
 800ce88:	3301      	adds	r3, #1
 800ce8a:	603b      	str	r3, [r7, #0]
 800ce8c:	683b      	ldr	r3, [r7, #0]
 800ce8e:	781b      	ldrb	r3, [r3, #0]
 800ce90:	2b2f      	cmp	r3, #47	@ 0x2f
 800ce92:	d0f8      	beq.n	800ce86 <follow_path+0x16>
 800ce94:	683b      	ldr	r3, [r7, #0]
 800ce96:	781b      	ldrb	r3, [r3, #0]
 800ce98:	2b5c      	cmp	r3, #92	@ 0x5c
 800ce9a:	d0f4      	beq.n	800ce86 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800ce9c:	693b      	ldr	r3, [r7, #16]
 800ce9e:	2200      	movs	r2, #0
 800cea0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800cea2:	683b      	ldr	r3, [r7, #0]
 800cea4:	781b      	ldrb	r3, [r3, #0]
 800cea6:	2b1f      	cmp	r3, #31
 800cea8:	d80a      	bhi.n	800cec0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	2280      	movs	r2, #128	@ 0x80
 800ceae:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800ceb2:	2100      	movs	r1, #0
 800ceb4:	6878      	ldr	r0, [r7, #4]
 800ceb6:	f7ff fcfa 	bl	800c8ae <dir_sdi>
 800ceba:	4603      	mov	r3, r0
 800cebc:	75fb      	strb	r3, [r7, #23]
 800cebe:	e043      	b.n	800cf48 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800cec0:	463b      	mov	r3, r7
 800cec2:	4619      	mov	r1, r3
 800cec4:	6878      	ldr	r0, [r7, #4]
 800cec6:	f7ff ff3f 	bl	800cd48 <create_name>
 800ceca:	4603      	mov	r3, r0
 800cecc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800cece:	7dfb      	ldrb	r3, [r7, #23]
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d134      	bne.n	800cf3e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800ced4:	6878      	ldr	r0, [r7, #4]
 800ced6:	f7ff feb0 	bl	800cc3a <dir_find>
 800ceda:	4603      	mov	r3, r0
 800cedc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800cee4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800cee6:	7dfb      	ldrb	r3, [r7, #23]
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d00a      	beq.n	800cf02 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ceec:	7dfb      	ldrb	r3, [r7, #23]
 800ceee:	2b04      	cmp	r3, #4
 800cef0:	d127      	bne.n	800cf42 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800cef2:	7afb      	ldrb	r3, [r7, #11]
 800cef4:	f003 0304 	and.w	r3, r3, #4
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d122      	bne.n	800cf42 <follow_path+0xd2>
 800cefc:	2305      	movs	r3, #5
 800cefe:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800cf00:	e01f      	b.n	800cf42 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800cf02:	7afb      	ldrb	r3, [r7, #11]
 800cf04:	f003 0304 	and.w	r3, r3, #4
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d11c      	bne.n	800cf46 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800cf0c:	693b      	ldr	r3, [r7, #16]
 800cf0e:	799b      	ldrb	r3, [r3, #6]
 800cf10:	f003 0310 	and.w	r3, r3, #16
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d102      	bne.n	800cf1e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800cf18:	2305      	movs	r3, #5
 800cf1a:	75fb      	strb	r3, [r7, #23]
 800cf1c:	e014      	b.n	800cf48 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	695b      	ldr	r3, [r3, #20]
 800cf28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf2c:	4413      	add	r3, r2
 800cf2e:	4619      	mov	r1, r3
 800cf30:	68f8      	ldr	r0, [r7, #12]
 800cf32:	f7ff fe43 	bl	800cbbc <ld_clust>
 800cf36:	4602      	mov	r2, r0
 800cf38:	693b      	ldr	r3, [r7, #16]
 800cf3a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800cf3c:	e7c0      	b.n	800cec0 <follow_path+0x50>
			if (res != FR_OK) break;
 800cf3e:	bf00      	nop
 800cf40:	e002      	b.n	800cf48 <follow_path+0xd8>
				break;
 800cf42:	bf00      	nop
 800cf44:	e000      	b.n	800cf48 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800cf46:	bf00      	nop
			}
		}
	}

	return res;
 800cf48:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf4a:	4618      	mov	r0, r3
 800cf4c:	3718      	adds	r7, #24
 800cf4e:	46bd      	mov	sp, r7
 800cf50:	bd80      	pop	{r7, pc}

0800cf52 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800cf52:	b480      	push	{r7}
 800cf54:	b087      	sub	sp, #28
 800cf56:	af00      	add	r7, sp, #0
 800cf58:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800cf5a:	f04f 33ff 	mov.w	r3, #4294967295
 800cf5e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d031      	beq.n	800cfcc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	617b      	str	r3, [r7, #20]
 800cf6e:	e002      	b.n	800cf76 <get_ldnumber+0x24>
 800cf70:	697b      	ldr	r3, [r7, #20]
 800cf72:	3301      	adds	r3, #1
 800cf74:	617b      	str	r3, [r7, #20]
 800cf76:	697b      	ldr	r3, [r7, #20]
 800cf78:	781b      	ldrb	r3, [r3, #0]
 800cf7a:	2b20      	cmp	r3, #32
 800cf7c:	d903      	bls.n	800cf86 <get_ldnumber+0x34>
 800cf7e:	697b      	ldr	r3, [r7, #20]
 800cf80:	781b      	ldrb	r3, [r3, #0]
 800cf82:	2b3a      	cmp	r3, #58	@ 0x3a
 800cf84:	d1f4      	bne.n	800cf70 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800cf86:	697b      	ldr	r3, [r7, #20]
 800cf88:	781b      	ldrb	r3, [r3, #0]
 800cf8a:	2b3a      	cmp	r3, #58	@ 0x3a
 800cf8c:	d11c      	bne.n	800cfc8 <get_ldnumber+0x76>
			tp = *path;
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	1c5a      	adds	r2, r3, #1
 800cf98:	60fa      	str	r2, [r7, #12]
 800cf9a:	781b      	ldrb	r3, [r3, #0]
 800cf9c:	3b30      	subs	r3, #48	@ 0x30
 800cf9e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800cfa0:	68bb      	ldr	r3, [r7, #8]
 800cfa2:	2b09      	cmp	r3, #9
 800cfa4:	d80e      	bhi.n	800cfc4 <get_ldnumber+0x72>
 800cfa6:	68fa      	ldr	r2, [r7, #12]
 800cfa8:	697b      	ldr	r3, [r7, #20]
 800cfaa:	429a      	cmp	r2, r3
 800cfac:	d10a      	bne.n	800cfc4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800cfae:	68bb      	ldr	r3, [r7, #8]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d107      	bne.n	800cfc4 <get_ldnumber+0x72>
					vol = (int)i;
 800cfb4:	68bb      	ldr	r3, [r7, #8]
 800cfb6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800cfb8:	697b      	ldr	r3, [r7, #20]
 800cfba:	3301      	adds	r3, #1
 800cfbc:	617b      	str	r3, [r7, #20]
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	697a      	ldr	r2, [r7, #20]
 800cfc2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800cfc4:	693b      	ldr	r3, [r7, #16]
 800cfc6:	e002      	b.n	800cfce <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800cfc8:	2300      	movs	r3, #0
 800cfca:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800cfcc:	693b      	ldr	r3, [r7, #16]
}
 800cfce:	4618      	mov	r0, r3
 800cfd0:	371c      	adds	r7, #28
 800cfd2:	46bd      	mov	sp, r7
 800cfd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd8:	4770      	bx	lr
	...

0800cfdc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	b082      	sub	sp, #8
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
 800cfe4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	2200      	movs	r2, #0
 800cfea:	70da      	strb	r2, [r3, #3]
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	f04f 32ff 	mov.w	r2, #4294967295
 800cff2:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800cff4:	6839      	ldr	r1, [r7, #0]
 800cff6:	6878      	ldr	r0, [r7, #4]
 800cff8:	f7ff f8dc 	bl	800c1b4 <move_window>
 800cffc:	4603      	mov	r3, r0
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d001      	beq.n	800d006 <check_fs+0x2a>
 800d002:	2304      	movs	r3, #4
 800d004:	e038      	b.n	800d078 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	3330      	adds	r3, #48	@ 0x30
 800d00a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800d00e:	4618      	mov	r0, r3
 800d010:	f7fe fe20 	bl	800bc54 <ld_word>
 800d014:	4603      	mov	r3, r0
 800d016:	461a      	mov	r2, r3
 800d018:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800d01c:	429a      	cmp	r2, r3
 800d01e:	d001      	beq.n	800d024 <check_fs+0x48>
 800d020:	2303      	movs	r3, #3
 800d022:	e029      	b.n	800d078 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d02a:	2be9      	cmp	r3, #233	@ 0xe9
 800d02c:	d009      	beq.n	800d042 <check_fs+0x66>
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d034:	2beb      	cmp	r3, #235	@ 0xeb
 800d036:	d11e      	bne.n	800d076 <check_fs+0x9a>
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800d03e:	2b90      	cmp	r3, #144	@ 0x90
 800d040:	d119      	bne.n	800d076 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	3330      	adds	r3, #48	@ 0x30
 800d046:	3336      	adds	r3, #54	@ 0x36
 800d048:	4618      	mov	r0, r3
 800d04a:	f7fe fe1b 	bl	800bc84 <ld_dword>
 800d04e:	4603      	mov	r3, r0
 800d050:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800d054:	4a0a      	ldr	r2, [pc, #40]	@ (800d080 <check_fs+0xa4>)
 800d056:	4293      	cmp	r3, r2
 800d058:	d101      	bne.n	800d05e <check_fs+0x82>
 800d05a:	2300      	movs	r3, #0
 800d05c:	e00c      	b.n	800d078 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	3330      	adds	r3, #48	@ 0x30
 800d062:	3352      	adds	r3, #82	@ 0x52
 800d064:	4618      	mov	r0, r3
 800d066:	f7fe fe0d 	bl	800bc84 <ld_dword>
 800d06a:	4603      	mov	r3, r0
 800d06c:	4a05      	ldr	r2, [pc, #20]	@ (800d084 <check_fs+0xa8>)
 800d06e:	4293      	cmp	r3, r2
 800d070:	d101      	bne.n	800d076 <check_fs+0x9a>
 800d072:	2300      	movs	r3, #0
 800d074:	e000      	b.n	800d078 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800d076:	2302      	movs	r3, #2
}
 800d078:	4618      	mov	r0, r3
 800d07a:	3708      	adds	r7, #8
 800d07c:	46bd      	mov	sp, r7
 800d07e:	bd80      	pop	{r7, pc}
 800d080:	00544146 	.word	0x00544146
 800d084:	33544146 	.word	0x33544146

0800d088 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800d088:	b580      	push	{r7, lr}
 800d08a:	b096      	sub	sp, #88	@ 0x58
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	60f8      	str	r0, [r7, #12]
 800d090:	60b9      	str	r1, [r7, #8]
 800d092:	4613      	mov	r3, r2
 800d094:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800d096:	68bb      	ldr	r3, [r7, #8]
 800d098:	2200      	movs	r2, #0
 800d09a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800d09c:	68f8      	ldr	r0, [r7, #12]
 800d09e:	f7ff ff58 	bl	800cf52 <get_ldnumber>
 800d0a2:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800d0a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	da01      	bge.n	800d0ae <find_volume+0x26>
 800d0aa:	230b      	movs	r3, #11
 800d0ac:	e22d      	b.n	800d50a <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800d0ae:	4aa1      	ldr	r2, [pc, #644]	@ (800d334 <find_volume+0x2ac>)
 800d0b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d0b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d0b6:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d0b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d101      	bne.n	800d0c2 <find_volume+0x3a>
 800d0be:	230c      	movs	r3, #12
 800d0c0:	e223      	b.n	800d50a <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800d0c2:	68bb      	ldr	r3, [r7, #8]
 800d0c4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d0c6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800d0c8:	79fb      	ldrb	r3, [r7, #7]
 800d0ca:	f023 0301 	bic.w	r3, r3, #1
 800d0ce:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800d0d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0d2:	781b      	ldrb	r3, [r3, #0]
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d01a      	beq.n	800d10e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800d0d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0da:	785b      	ldrb	r3, [r3, #1]
 800d0dc:	4618      	mov	r0, r3
 800d0de:	f7fe fd1b 	bl	800bb18 <disk_status>
 800d0e2:	4603      	mov	r3, r0
 800d0e4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800d0e8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d0ec:	f003 0301 	and.w	r3, r3, #1
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d10c      	bne.n	800d10e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800d0f4:	79fb      	ldrb	r3, [r7, #7]
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d007      	beq.n	800d10a <find_volume+0x82>
 800d0fa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d0fe:	f003 0304 	and.w	r3, r3, #4
 800d102:	2b00      	cmp	r3, #0
 800d104:	d001      	beq.n	800d10a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800d106:	230a      	movs	r3, #10
 800d108:	e1ff      	b.n	800d50a <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800d10a:	2300      	movs	r3, #0
 800d10c:	e1fd      	b.n	800d50a <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800d10e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d110:	2200      	movs	r2, #0
 800d112:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800d114:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d116:	b2da      	uxtb	r2, r3
 800d118:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d11a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800d11c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d11e:	785b      	ldrb	r3, [r3, #1]
 800d120:	4618      	mov	r0, r3
 800d122:	f7fe fd13 	bl	800bb4c <disk_initialize>
 800d126:	4603      	mov	r3, r0
 800d128:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800d12c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d130:	f003 0301 	and.w	r3, r3, #1
 800d134:	2b00      	cmp	r3, #0
 800d136:	d001      	beq.n	800d13c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d138:	2303      	movs	r3, #3
 800d13a:	e1e6      	b.n	800d50a <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800d13c:	79fb      	ldrb	r3, [r7, #7]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d007      	beq.n	800d152 <find_volume+0xca>
 800d142:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d146:	f003 0304 	and.w	r3, r3, #4
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d001      	beq.n	800d152 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800d14e:	230a      	movs	r3, #10
 800d150:	e1db      	b.n	800d50a <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800d152:	2300      	movs	r3, #0
 800d154:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800d156:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d158:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d15a:	f7ff ff3f 	bl	800cfdc <check_fs>
 800d15e:	4603      	mov	r3, r0
 800d160:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800d164:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d168:	2b02      	cmp	r3, #2
 800d16a:	d149      	bne.n	800d200 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d16c:	2300      	movs	r3, #0
 800d16e:	643b      	str	r3, [r7, #64]	@ 0x40
 800d170:	e01e      	b.n	800d1b0 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800d172:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d174:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d178:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d17a:	011b      	lsls	r3, r3, #4
 800d17c:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800d180:	4413      	add	r3, r2
 800d182:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d186:	3304      	adds	r3, #4
 800d188:	781b      	ldrb	r3, [r3, #0]
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d006      	beq.n	800d19c <find_volume+0x114>
 800d18e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d190:	3308      	adds	r3, #8
 800d192:	4618      	mov	r0, r3
 800d194:	f7fe fd76 	bl	800bc84 <ld_dword>
 800d198:	4602      	mov	r2, r0
 800d19a:	e000      	b.n	800d19e <find_volume+0x116>
 800d19c:	2200      	movs	r2, #0
 800d19e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d1a0:	009b      	lsls	r3, r3, #2
 800d1a2:	3358      	adds	r3, #88	@ 0x58
 800d1a4:	443b      	add	r3, r7
 800d1a6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d1aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d1ac:	3301      	adds	r3, #1
 800d1ae:	643b      	str	r3, [r7, #64]	@ 0x40
 800d1b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d1b2:	2b03      	cmp	r3, #3
 800d1b4:	d9dd      	bls.n	800d172 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800d1ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d002      	beq.n	800d1c6 <find_volume+0x13e>
 800d1c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d1c2:	3b01      	subs	r3, #1
 800d1c4:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800d1c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d1c8:	009b      	lsls	r3, r3, #2
 800d1ca:	3358      	adds	r3, #88	@ 0x58
 800d1cc:	443b      	add	r3, r7
 800d1ce:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800d1d2:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d1d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d005      	beq.n	800d1e6 <find_volume+0x15e>
 800d1da:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d1dc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d1de:	f7ff fefd 	bl	800cfdc <check_fs>
 800d1e2:	4603      	mov	r3, r0
 800d1e4:	e000      	b.n	800d1e8 <find_volume+0x160>
 800d1e6:	2303      	movs	r3, #3
 800d1e8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800d1ec:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d1f0:	2b01      	cmp	r3, #1
 800d1f2:	d905      	bls.n	800d200 <find_volume+0x178>
 800d1f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d1f6:	3301      	adds	r3, #1
 800d1f8:	643b      	str	r3, [r7, #64]	@ 0x40
 800d1fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d1fc:	2b03      	cmp	r3, #3
 800d1fe:	d9e2      	bls.n	800d1c6 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d200:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d204:	2b04      	cmp	r3, #4
 800d206:	d101      	bne.n	800d20c <find_volume+0x184>
 800d208:	2301      	movs	r3, #1
 800d20a:	e17e      	b.n	800d50a <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d20c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d210:	2b01      	cmp	r3, #1
 800d212:	d901      	bls.n	800d218 <find_volume+0x190>
 800d214:	230d      	movs	r3, #13
 800d216:	e178      	b.n	800d50a <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d218:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d21a:	3330      	adds	r3, #48	@ 0x30
 800d21c:	330b      	adds	r3, #11
 800d21e:	4618      	mov	r0, r3
 800d220:	f7fe fd18 	bl	800bc54 <ld_word>
 800d224:	4603      	mov	r3, r0
 800d226:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d22a:	d001      	beq.n	800d230 <find_volume+0x1a8>
 800d22c:	230d      	movs	r3, #13
 800d22e:	e16c      	b.n	800d50a <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800d230:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d232:	3330      	adds	r3, #48	@ 0x30
 800d234:	3316      	adds	r3, #22
 800d236:	4618      	mov	r0, r3
 800d238:	f7fe fd0c 	bl	800bc54 <ld_word>
 800d23c:	4603      	mov	r3, r0
 800d23e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800d240:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d242:	2b00      	cmp	r3, #0
 800d244:	d106      	bne.n	800d254 <find_volume+0x1cc>
 800d246:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d248:	3330      	adds	r3, #48	@ 0x30
 800d24a:	3324      	adds	r3, #36	@ 0x24
 800d24c:	4618      	mov	r0, r3
 800d24e:	f7fe fd19 	bl	800bc84 <ld_dword>
 800d252:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800d254:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d256:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d258:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800d25a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d25c:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800d260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d262:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d264:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d266:	789b      	ldrb	r3, [r3, #2]
 800d268:	2b01      	cmp	r3, #1
 800d26a:	d005      	beq.n	800d278 <find_volume+0x1f0>
 800d26c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d26e:	789b      	ldrb	r3, [r3, #2]
 800d270:	2b02      	cmp	r3, #2
 800d272:	d001      	beq.n	800d278 <find_volume+0x1f0>
 800d274:	230d      	movs	r3, #13
 800d276:	e148      	b.n	800d50a <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800d278:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d27a:	789b      	ldrb	r3, [r3, #2]
 800d27c:	461a      	mov	r2, r3
 800d27e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d280:	fb02 f303 	mul.w	r3, r2, r3
 800d284:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800d286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d288:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d28c:	461a      	mov	r2, r3
 800d28e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d290:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d292:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d294:	895b      	ldrh	r3, [r3, #10]
 800d296:	2b00      	cmp	r3, #0
 800d298:	d008      	beq.n	800d2ac <find_volume+0x224>
 800d29a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d29c:	895b      	ldrh	r3, [r3, #10]
 800d29e:	461a      	mov	r2, r3
 800d2a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2a2:	895b      	ldrh	r3, [r3, #10]
 800d2a4:	3b01      	subs	r3, #1
 800d2a6:	4013      	ands	r3, r2
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d001      	beq.n	800d2b0 <find_volume+0x228>
 800d2ac:	230d      	movs	r3, #13
 800d2ae:	e12c      	b.n	800d50a <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d2b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2b2:	3330      	adds	r3, #48	@ 0x30
 800d2b4:	3311      	adds	r3, #17
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	f7fe fccc 	bl	800bc54 <ld_word>
 800d2bc:	4603      	mov	r3, r0
 800d2be:	461a      	mov	r2, r3
 800d2c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2c2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d2c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2c6:	891b      	ldrh	r3, [r3, #8]
 800d2c8:	f003 030f 	and.w	r3, r3, #15
 800d2cc:	b29b      	uxth	r3, r3
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d001      	beq.n	800d2d6 <find_volume+0x24e>
 800d2d2:	230d      	movs	r3, #13
 800d2d4:	e119      	b.n	800d50a <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d2d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2d8:	3330      	adds	r3, #48	@ 0x30
 800d2da:	3313      	adds	r3, #19
 800d2dc:	4618      	mov	r0, r3
 800d2de:	f7fe fcb9 	bl	800bc54 <ld_word>
 800d2e2:	4603      	mov	r3, r0
 800d2e4:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d2e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d106      	bne.n	800d2fa <find_volume+0x272>
 800d2ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2ee:	3330      	adds	r3, #48	@ 0x30
 800d2f0:	3320      	adds	r3, #32
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	f7fe fcc6 	bl	800bc84 <ld_dword>
 800d2f8:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800d2fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2fc:	3330      	adds	r3, #48	@ 0x30
 800d2fe:	330e      	adds	r3, #14
 800d300:	4618      	mov	r0, r3
 800d302:	f7fe fca7 	bl	800bc54 <ld_word>
 800d306:	4603      	mov	r3, r0
 800d308:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d30a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d101      	bne.n	800d314 <find_volume+0x28c>
 800d310:	230d      	movs	r3, #13
 800d312:	e0fa      	b.n	800d50a <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d314:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800d316:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d318:	4413      	add	r3, r2
 800d31a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d31c:	8912      	ldrh	r2, [r2, #8]
 800d31e:	0912      	lsrs	r2, r2, #4
 800d320:	b292      	uxth	r2, r2
 800d322:	4413      	add	r3, r2
 800d324:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d326:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d32a:	429a      	cmp	r2, r3
 800d32c:	d204      	bcs.n	800d338 <find_volume+0x2b0>
 800d32e:	230d      	movs	r3, #13
 800d330:	e0eb      	b.n	800d50a <find_volume+0x482>
 800d332:	bf00      	nop
 800d334:	2002e67c 	.word	0x2002e67c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d338:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d33a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d33c:	1ad3      	subs	r3, r2, r3
 800d33e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d340:	8952      	ldrh	r2, [r2, #10]
 800d342:	fbb3 f3f2 	udiv	r3, r3, r2
 800d346:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d101      	bne.n	800d352 <find_volume+0x2ca>
 800d34e:	230d      	movs	r3, #13
 800d350:	e0db      	b.n	800d50a <find_volume+0x482>
		fmt = FS_FAT32;
 800d352:	2303      	movs	r3, #3
 800d354:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d35a:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800d35e:	4293      	cmp	r3, r2
 800d360:	d802      	bhi.n	800d368 <find_volume+0x2e0>
 800d362:	2302      	movs	r3, #2
 800d364:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d36a:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800d36e:	4293      	cmp	r3, r2
 800d370:	d802      	bhi.n	800d378 <find_volume+0x2f0>
 800d372:	2301      	movs	r3, #1
 800d374:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d37a:	1c9a      	adds	r2, r3, #2
 800d37c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d37e:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800d380:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d382:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d384:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d386:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800d388:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d38a:	441a      	add	r2, r3
 800d38c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d38e:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800d390:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d394:	441a      	add	r2, r3
 800d396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d398:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800d39a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d39e:	2b03      	cmp	r3, #3
 800d3a0:	d11e      	bne.n	800d3e0 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d3a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3a4:	3330      	adds	r3, #48	@ 0x30
 800d3a6:	332a      	adds	r3, #42	@ 0x2a
 800d3a8:	4618      	mov	r0, r3
 800d3aa:	f7fe fc53 	bl	800bc54 <ld_word>
 800d3ae:	4603      	mov	r3, r0
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d001      	beq.n	800d3b8 <find_volume+0x330>
 800d3b4:	230d      	movs	r3, #13
 800d3b6:	e0a8      	b.n	800d50a <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d3b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3ba:	891b      	ldrh	r3, [r3, #8]
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d001      	beq.n	800d3c4 <find_volume+0x33c>
 800d3c0:	230d      	movs	r3, #13
 800d3c2:	e0a2      	b.n	800d50a <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d3c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3c6:	3330      	adds	r3, #48	@ 0x30
 800d3c8:	332c      	adds	r3, #44	@ 0x2c
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	f7fe fc5a 	bl	800bc84 <ld_dword>
 800d3d0:	4602      	mov	r2, r0
 800d3d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3d4:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d3d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3d8:	695b      	ldr	r3, [r3, #20]
 800d3da:	009b      	lsls	r3, r3, #2
 800d3dc:	647b      	str	r3, [r7, #68]	@ 0x44
 800d3de:	e01f      	b.n	800d420 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d3e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3e2:	891b      	ldrh	r3, [r3, #8]
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d101      	bne.n	800d3ec <find_volume+0x364>
 800d3e8:	230d      	movs	r3, #13
 800d3ea:	e08e      	b.n	800d50a <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d3ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3ee:	6a1a      	ldr	r2, [r3, #32]
 800d3f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d3f2:	441a      	add	r2, r3
 800d3f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3f6:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d3f8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d3fc:	2b02      	cmp	r3, #2
 800d3fe:	d103      	bne.n	800d408 <find_volume+0x380>
 800d400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d402:	695b      	ldr	r3, [r3, #20]
 800d404:	005b      	lsls	r3, r3, #1
 800d406:	e00a      	b.n	800d41e <find_volume+0x396>
 800d408:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d40a:	695a      	ldr	r2, [r3, #20]
 800d40c:	4613      	mov	r3, r2
 800d40e:	005b      	lsls	r3, r3, #1
 800d410:	4413      	add	r3, r2
 800d412:	085a      	lsrs	r2, r3, #1
 800d414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d416:	695b      	ldr	r3, [r3, #20]
 800d418:	f003 0301 	and.w	r3, r3, #1
 800d41c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800d41e:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d420:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d422:	699a      	ldr	r2, [r3, #24]
 800d424:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d426:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800d42a:	0a5b      	lsrs	r3, r3, #9
 800d42c:	429a      	cmp	r2, r3
 800d42e:	d201      	bcs.n	800d434 <find_volume+0x3ac>
 800d430:	230d      	movs	r3, #13
 800d432:	e06a      	b.n	800d50a <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d434:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d436:	f04f 32ff 	mov.w	r2, #4294967295
 800d43a:	611a      	str	r2, [r3, #16]
 800d43c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d43e:	691a      	ldr	r2, [r3, #16]
 800d440:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d442:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800d444:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d446:	2280      	movs	r2, #128	@ 0x80
 800d448:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800d44a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d44e:	2b03      	cmp	r3, #3
 800d450:	d149      	bne.n	800d4e6 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d452:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d454:	3330      	adds	r3, #48	@ 0x30
 800d456:	3330      	adds	r3, #48	@ 0x30
 800d458:	4618      	mov	r0, r3
 800d45a:	f7fe fbfb 	bl	800bc54 <ld_word>
 800d45e:	4603      	mov	r3, r0
 800d460:	2b01      	cmp	r3, #1
 800d462:	d140      	bne.n	800d4e6 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d464:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d466:	3301      	adds	r3, #1
 800d468:	4619      	mov	r1, r3
 800d46a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d46c:	f7fe fea2 	bl	800c1b4 <move_window>
 800d470:	4603      	mov	r3, r0
 800d472:	2b00      	cmp	r3, #0
 800d474:	d137      	bne.n	800d4e6 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800d476:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d478:	2200      	movs	r2, #0
 800d47a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d47c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d47e:	3330      	adds	r3, #48	@ 0x30
 800d480:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800d484:	4618      	mov	r0, r3
 800d486:	f7fe fbe5 	bl	800bc54 <ld_word>
 800d48a:	4603      	mov	r3, r0
 800d48c:	461a      	mov	r2, r3
 800d48e:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800d492:	429a      	cmp	r2, r3
 800d494:	d127      	bne.n	800d4e6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d498:	3330      	adds	r3, #48	@ 0x30
 800d49a:	4618      	mov	r0, r3
 800d49c:	f7fe fbf2 	bl	800bc84 <ld_dword>
 800d4a0:	4603      	mov	r3, r0
 800d4a2:	4a1c      	ldr	r2, [pc, #112]	@ (800d514 <find_volume+0x48c>)
 800d4a4:	4293      	cmp	r3, r2
 800d4a6:	d11e      	bne.n	800d4e6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d4a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4aa:	3330      	adds	r3, #48	@ 0x30
 800d4ac:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800d4b0:	4618      	mov	r0, r3
 800d4b2:	f7fe fbe7 	bl	800bc84 <ld_dword>
 800d4b6:	4603      	mov	r3, r0
 800d4b8:	4a17      	ldr	r2, [pc, #92]	@ (800d518 <find_volume+0x490>)
 800d4ba:	4293      	cmp	r3, r2
 800d4bc:	d113      	bne.n	800d4e6 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800d4be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4c0:	3330      	adds	r3, #48	@ 0x30
 800d4c2:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800d4c6:	4618      	mov	r0, r3
 800d4c8:	f7fe fbdc 	bl	800bc84 <ld_dword>
 800d4cc:	4602      	mov	r2, r0
 800d4ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4d0:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d4d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4d4:	3330      	adds	r3, #48	@ 0x30
 800d4d6:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800d4da:	4618      	mov	r0, r3
 800d4dc:	f7fe fbd2 	bl	800bc84 <ld_dword>
 800d4e0:	4602      	mov	r2, r0
 800d4e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4e4:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800d4e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4e8:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800d4ec:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800d4ee:	4b0b      	ldr	r3, [pc, #44]	@ (800d51c <find_volume+0x494>)
 800d4f0:	881b      	ldrh	r3, [r3, #0]
 800d4f2:	3301      	adds	r3, #1
 800d4f4:	b29a      	uxth	r2, r3
 800d4f6:	4b09      	ldr	r3, [pc, #36]	@ (800d51c <find_volume+0x494>)
 800d4f8:	801a      	strh	r2, [r3, #0]
 800d4fa:	4b08      	ldr	r3, [pc, #32]	@ (800d51c <find_volume+0x494>)
 800d4fc:	881a      	ldrh	r2, [r3, #0]
 800d4fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d500:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800d502:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d504:	f7fe fdee 	bl	800c0e4 <clear_lock>
#endif
	return FR_OK;
 800d508:	2300      	movs	r3, #0
}
 800d50a:	4618      	mov	r0, r3
 800d50c:	3758      	adds	r7, #88	@ 0x58
 800d50e:	46bd      	mov	sp, r7
 800d510:	bd80      	pop	{r7, pc}
 800d512:	bf00      	nop
 800d514:	41615252 	.word	0x41615252
 800d518:	61417272 	.word	0x61417272
 800d51c:	2002e680 	.word	0x2002e680

0800d520 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800d520:	b580      	push	{r7, lr}
 800d522:	b084      	sub	sp, #16
 800d524:	af00      	add	r7, sp, #0
 800d526:	6078      	str	r0, [r7, #4]
 800d528:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800d52a:	2309      	movs	r3, #9
 800d52c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	2b00      	cmp	r3, #0
 800d532:	d01c      	beq.n	800d56e <validate+0x4e>
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d018      	beq.n	800d56e <validate+0x4e>
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	781b      	ldrb	r3, [r3, #0]
 800d542:	2b00      	cmp	r3, #0
 800d544:	d013      	beq.n	800d56e <validate+0x4e>
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	889a      	ldrh	r2, [r3, #4]
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	88db      	ldrh	r3, [r3, #6]
 800d550:	429a      	cmp	r2, r3
 800d552:	d10c      	bne.n	800d56e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	785b      	ldrb	r3, [r3, #1]
 800d55a:	4618      	mov	r0, r3
 800d55c:	f7fe fadc 	bl	800bb18 <disk_status>
 800d560:	4603      	mov	r3, r0
 800d562:	f003 0301 	and.w	r3, r3, #1
 800d566:	2b00      	cmp	r3, #0
 800d568:	d101      	bne.n	800d56e <validate+0x4e>
			res = FR_OK;
 800d56a:	2300      	movs	r3, #0
 800d56c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800d56e:	7bfb      	ldrb	r3, [r7, #15]
 800d570:	2b00      	cmp	r3, #0
 800d572:	d102      	bne.n	800d57a <validate+0x5a>
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	e000      	b.n	800d57c <validate+0x5c>
 800d57a:	2300      	movs	r3, #0
 800d57c:	683a      	ldr	r2, [r7, #0]
 800d57e:	6013      	str	r3, [r2, #0]
	return res;
 800d580:	7bfb      	ldrb	r3, [r7, #15]
}
 800d582:	4618      	mov	r0, r3
 800d584:	3710      	adds	r7, #16
 800d586:	46bd      	mov	sp, r7
 800d588:	bd80      	pop	{r7, pc}
	...

0800d58c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800d58c:	b580      	push	{r7, lr}
 800d58e:	b088      	sub	sp, #32
 800d590:	af00      	add	r7, sp, #0
 800d592:	60f8      	str	r0, [r7, #12]
 800d594:	60b9      	str	r1, [r7, #8]
 800d596:	4613      	mov	r3, r2
 800d598:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d59a:	68bb      	ldr	r3, [r7, #8]
 800d59c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800d59e:	f107 0310 	add.w	r3, r7, #16
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	f7ff fcd5 	bl	800cf52 <get_ldnumber>
 800d5a8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d5aa:	69fb      	ldr	r3, [r7, #28]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	da01      	bge.n	800d5b4 <f_mount+0x28>
 800d5b0:	230b      	movs	r3, #11
 800d5b2:	e02b      	b.n	800d60c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d5b4:	4a17      	ldr	r2, [pc, #92]	@ (800d614 <f_mount+0x88>)
 800d5b6:	69fb      	ldr	r3, [r7, #28]
 800d5b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d5bc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d5be:	69bb      	ldr	r3, [r7, #24]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d005      	beq.n	800d5d0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800d5c4:	69b8      	ldr	r0, [r7, #24]
 800d5c6:	f7fe fd8d 	bl	800c0e4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d5ca:	69bb      	ldr	r3, [r7, #24]
 800d5cc:	2200      	movs	r2, #0
 800d5ce:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d002      	beq.n	800d5dc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	2200      	movs	r2, #0
 800d5da:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d5dc:	68fa      	ldr	r2, [r7, #12]
 800d5de:	490d      	ldr	r1, [pc, #52]	@ (800d614 <f_mount+0x88>)
 800d5e0:	69fb      	ldr	r3, [r7, #28]
 800d5e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d002      	beq.n	800d5f2 <f_mount+0x66>
 800d5ec:	79fb      	ldrb	r3, [r7, #7]
 800d5ee:	2b01      	cmp	r3, #1
 800d5f0:	d001      	beq.n	800d5f6 <f_mount+0x6a>
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	e00a      	b.n	800d60c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d5f6:	f107 010c 	add.w	r1, r7, #12
 800d5fa:	f107 0308 	add.w	r3, r7, #8
 800d5fe:	2200      	movs	r2, #0
 800d600:	4618      	mov	r0, r3
 800d602:	f7ff fd41 	bl	800d088 <find_volume>
 800d606:	4603      	mov	r3, r0
 800d608:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800d60a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d60c:	4618      	mov	r0, r3
 800d60e:	3720      	adds	r7, #32
 800d610:	46bd      	mov	sp, r7
 800d612:	bd80      	pop	{r7, pc}
 800d614:	2002e67c 	.word	0x2002e67c

0800d618 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800d618:	b580      	push	{r7, lr}
 800d61a:	b098      	sub	sp, #96	@ 0x60
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	60f8      	str	r0, [r7, #12]
 800d620:	60b9      	str	r1, [r7, #8]
 800d622:	4613      	mov	r3, r2
 800d624:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d101      	bne.n	800d630 <f_open+0x18>
 800d62c:	2309      	movs	r3, #9
 800d62e:	e1a9      	b.n	800d984 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800d630:	79fb      	ldrb	r3, [r7, #7]
 800d632:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d636:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800d638:	79fa      	ldrb	r2, [r7, #7]
 800d63a:	f107 0110 	add.w	r1, r7, #16
 800d63e:	f107 0308 	add.w	r3, r7, #8
 800d642:	4618      	mov	r0, r3
 800d644:	f7ff fd20 	bl	800d088 <find_volume>
 800d648:	4603      	mov	r3, r0
 800d64a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800d64e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d652:	2b00      	cmp	r3, #0
 800d654:	f040 818d 	bne.w	800d972 <f_open+0x35a>
		dj.obj.fs = fs;
 800d658:	693b      	ldr	r3, [r7, #16]
 800d65a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800d65c:	68ba      	ldr	r2, [r7, #8]
 800d65e:	f107 0314 	add.w	r3, r7, #20
 800d662:	4611      	mov	r1, r2
 800d664:	4618      	mov	r0, r3
 800d666:	f7ff fc03 	bl	800ce70 <follow_path>
 800d66a:	4603      	mov	r3, r0
 800d66c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800d670:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d674:	2b00      	cmp	r3, #0
 800d676:	d118      	bne.n	800d6aa <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800d678:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d67c:	b25b      	sxtb	r3, r3
 800d67e:	2b00      	cmp	r3, #0
 800d680:	da03      	bge.n	800d68a <f_open+0x72>
				res = FR_INVALID_NAME;
 800d682:	2306      	movs	r3, #6
 800d684:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d688:	e00f      	b.n	800d6aa <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d68a:	79fb      	ldrb	r3, [r7, #7]
 800d68c:	2b01      	cmp	r3, #1
 800d68e:	bf8c      	ite	hi
 800d690:	2301      	movhi	r3, #1
 800d692:	2300      	movls	r3, #0
 800d694:	b2db      	uxtb	r3, r3
 800d696:	461a      	mov	r2, r3
 800d698:	f107 0314 	add.w	r3, r7, #20
 800d69c:	4611      	mov	r1, r2
 800d69e:	4618      	mov	r0, r3
 800d6a0:	f7fe fbd8 	bl	800be54 <chk_lock>
 800d6a4:	4603      	mov	r3, r0
 800d6a6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800d6aa:	79fb      	ldrb	r3, [r7, #7]
 800d6ac:	f003 031c 	and.w	r3, r3, #28
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d07f      	beq.n	800d7b4 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800d6b4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d017      	beq.n	800d6ec <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800d6bc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d6c0:	2b04      	cmp	r3, #4
 800d6c2:	d10e      	bne.n	800d6e2 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800d6c4:	f7fe fc22 	bl	800bf0c <enq_lock>
 800d6c8:	4603      	mov	r3, r0
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d006      	beq.n	800d6dc <f_open+0xc4>
 800d6ce:	f107 0314 	add.w	r3, r7, #20
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	f7ff fb06 	bl	800cce4 <dir_register>
 800d6d8:	4603      	mov	r3, r0
 800d6da:	e000      	b.n	800d6de <f_open+0xc6>
 800d6dc:	2312      	movs	r3, #18
 800d6de:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800d6e2:	79fb      	ldrb	r3, [r7, #7]
 800d6e4:	f043 0308 	orr.w	r3, r3, #8
 800d6e8:	71fb      	strb	r3, [r7, #7]
 800d6ea:	e010      	b.n	800d70e <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800d6ec:	7ebb      	ldrb	r3, [r7, #26]
 800d6ee:	f003 0311 	and.w	r3, r3, #17
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d003      	beq.n	800d6fe <f_open+0xe6>
					res = FR_DENIED;
 800d6f6:	2307      	movs	r3, #7
 800d6f8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d6fc:	e007      	b.n	800d70e <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800d6fe:	79fb      	ldrb	r3, [r7, #7]
 800d700:	f003 0304 	and.w	r3, r3, #4
 800d704:	2b00      	cmp	r3, #0
 800d706:	d002      	beq.n	800d70e <f_open+0xf6>
 800d708:	2308      	movs	r3, #8
 800d70a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800d70e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d712:	2b00      	cmp	r3, #0
 800d714:	d168      	bne.n	800d7e8 <f_open+0x1d0>
 800d716:	79fb      	ldrb	r3, [r7, #7]
 800d718:	f003 0308 	and.w	r3, r3, #8
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d063      	beq.n	800d7e8 <f_open+0x1d0>
				dw = GET_FATTIME();
 800d720:	f7fd ffb8 	bl	800b694 <get_fattime>
 800d724:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800d726:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d728:	330e      	adds	r3, #14
 800d72a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d72c:	4618      	mov	r0, r3
 800d72e:	f7fe fae7 	bl	800bd00 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800d732:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d734:	3316      	adds	r3, #22
 800d736:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d738:	4618      	mov	r0, r3
 800d73a:	f7fe fae1 	bl	800bd00 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800d73e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d740:	330b      	adds	r3, #11
 800d742:	2220      	movs	r2, #32
 800d744:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800d746:	693b      	ldr	r3, [r7, #16]
 800d748:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d74a:	4611      	mov	r1, r2
 800d74c:	4618      	mov	r0, r3
 800d74e:	f7ff fa35 	bl	800cbbc <ld_clust>
 800d752:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800d754:	693b      	ldr	r3, [r7, #16]
 800d756:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800d758:	2200      	movs	r2, #0
 800d75a:	4618      	mov	r0, r3
 800d75c:	f7ff fa4d 	bl	800cbfa <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800d760:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d762:	331c      	adds	r3, #28
 800d764:	2100      	movs	r1, #0
 800d766:	4618      	mov	r0, r3
 800d768:	f7fe faca 	bl	800bd00 <st_dword>
					fs->wflag = 1;
 800d76c:	693b      	ldr	r3, [r7, #16]
 800d76e:	2201      	movs	r2, #1
 800d770:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800d772:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d774:	2b00      	cmp	r3, #0
 800d776:	d037      	beq.n	800d7e8 <f_open+0x1d0>
						dw = fs->winsect;
 800d778:	693b      	ldr	r3, [r7, #16]
 800d77a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d77c:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800d77e:	f107 0314 	add.w	r3, r7, #20
 800d782:	2200      	movs	r2, #0
 800d784:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800d786:	4618      	mov	r0, r3
 800d788:	f7fe ff60 	bl	800c64c <remove_chain>
 800d78c:	4603      	mov	r3, r0
 800d78e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800d792:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d796:	2b00      	cmp	r3, #0
 800d798:	d126      	bne.n	800d7e8 <f_open+0x1d0>
							res = move_window(fs, dw);
 800d79a:	693b      	ldr	r3, [r7, #16]
 800d79c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d79e:	4618      	mov	r0, r3
 800d7a0:	f7fe fd08 	bl	800c1b4 <move_window>
 800d7a4:	4603      	mov	r3, r0
 800d7a6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800d7aa:	693b      	ldr	r3, [r7, #16]
 800d7ac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d7ae:	3a01      	subs	r2, #1
 800d7b0:	60da      	str	r2, [r3, #12]
 800d7b2:	e019      	b.n	800d7e8 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800d7b4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d115      	bne.n	800d7e8 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800d7bc:	7ebb      	ldrb	r3, [r7, #26]
 800d7be:	f003 0310 	and.w	r3, r3, #16
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d003      	beq.n	800d7ce <f_open+0x1b6>
					res = FR_NO_FILE;
 800d7c6:	2304      	movs	r3, #4
 800d7c8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d7cc:	e00c      	b.n	800d7e8 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800d7ce:	79fb      	ldrb	r3, [r7, #7]
 800d7d0:	f003 0302 	and.w	r3, r3, #2
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d007      	beq.n	800d7e8 <f_open+0x1d0>
 800d7d8:	7ebb      	ldrb	r3, [r7, #26]
 800d7da:	f003 0301 	and.w	r3, r3, #1
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d002      	beq.n	800d7e8 <f_open+0x1d0>
						res = FR_DENIED;
 800d7e2:	2307      	movs	r3, #7
 800d7e4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800d7e8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d126      	bne.n	800d83e <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800d7f0:	79fb      	ldrb	r3, [r7, #7]
 800d7f2:	f003 0308 	and.w	r3, r3, #8
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d003      	beq.n	800d802 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800d7fa:	79fb      	ldrb	r3, [r7, #7]
 800d7fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d800:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800d802:	693b      	ldr	r3, [r7, #16]
 800d804:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800d80a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d810:	79fb      	ldrb	r3, [r7, #7]
 800d812:	2b01      	cmp	r3, #1
 800d814:	bf8c      	ite	hi
 800d816:	2301      	movhi	r3, #1
 800d818:	2300      	movls	r3, #0
 800d81a:	b2db      	uxtb	r3, r3
 800d81c:	461a      	mov	r2, r3
 800d81e:	f107 0314 	add.w	r3, r7, #20
 800d822:	4611      	mov	r1, r2
 800d824:	4618      	mov	r0, r3
 800d826:	f7fe fb93 	bl	800bf50 <inc_lock>
 800d82a:	4602      	mov	r2, r0
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	691b      	ldr	r3, [r3, #16]
 800d834:	2b00      	cmp	r3, #0
 800d836:	d102      	bne.n	800d83e <f_open+0x226>
 800d838:	2302      	movs	r3, #2
 800d83a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800d83e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d842:	2b00      	cmp	r3, #0
 800d844:	f040 8095 	bne.w	800d972 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800d848:	693b      	ldr	r3, [r7, #16]
 800d84a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d84c:	4611      	mov	r1, r2
 800d84e:	4618      	mov	r0, r3
 800d850:	f7ff f9b4 	bl	800cbbc <ld_clust>
 800d854:	4602      	mov	r2, r0
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800d85a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d85c:	331c      	adds	r3, #28
 800d85e:	4618      	mov	r0, r3
 800d860:	f7fe fa10 	bl	800bc84 <ld_dword>
 800d864:	4602      	mov	r2, r0
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	2200      	movs	r2, #0
 800d86e:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800d870:	693a      	ldr	r2, [r7, #16]
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800d876:	693b      	ldr	r3, [r7, #16]
 800d878:	88da      	ldrh	r2, [r3, #6]
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	79fa      	ldrb	r2, [r7, #7]
 800d882:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	2200      	movs	r2, #0
 800d888:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	2200      	movs	r2, #0
 800d88e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	2200      	movs	r2, #0
 800d894:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	3330      	adds	r3, #48	@ 0x30
 800d89a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d89e:	2100      	movs	r1, #0
 800d8a0:	4618      	mov	r0, r3
 800d8a2:	f7fe fa7a 	bl	800bd9a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d8a6:	79fb      	ldrb	r3, [r7, #7]
 800d8a8:	f003 0320 	and.w	r3, r3, #32
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d060      	beq.n	800d972 <f_open+0x35a>
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	68db      	ldr	r3, [r3, #12]
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d05c      	beq.n	800d972 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	68da      	ldr	r2, [r3, #12]
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d8c0:	693b      	ldr	r3, [r7, #16]
 800d8c2:	895b      	ldrh	r3, [r3, #10]
 800d8c4:	025b      	lsls	r3, r3, #9
 800d8c6:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	689b      	ldr	r3, [r3, #8]
 800d8cc:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	68db      	ldr	r3, [r3, #12]
 800d8d2:	657b      	str	r3, [r7, #84]	@ 0x54
 800d8d4:	e016      	b.n	800d904 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d8da:	4618      	mov	r0, r3
 800d8dc:	f7fe fd25 	bl	800c32a <get_fat>
 800d8e0:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800d8e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d8e4:	2b01      	cmp	r3, #1
 800d8e6:	d802      	bhi.n	800d8ee <f_open+0x2d6>
 800d8e8:	2302      	movs	r3, #2
 800d8ea:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d8ee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d8f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8f4:	d102      	bne.n	800d8fc <f_open+0x2e4>
 800d8f6:	2301      	movs	r3, #1
 800d8f8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d8fc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d8fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d900:	1ad3      	subs	r3, r2, r3
 800d902:	657b      	str	r3, [r7, #84]	@ 0x54
 800d904:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d103      	bne.n	800d914 <f_open+0x2fc>
 800d90c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d90e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d910:	429a      	cmp	r2, r3
 800d912:	d8e0      	bhi.n	800d8d6 <f_open+0x2be>
				}
				fp->clust = clst;
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d918:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d91a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d127      	bne.n	800d972 <f_open+0x35a>
 800d922:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d924:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d022      	beq.n	800d972 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d92c:	693b      	ldr	r3, [r7, #16]
 800d92e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d930:	4618      	mov	r0, r3
 800d932:	f7fe fcdb 	bl	800c2ec <clust2sect>
 800d936:	6478      	str	r0, [r7, #68]	@ 0x44
 800d938:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d103      	bne.n	800d946 <f_open+0x32e>
						res = FR_INT_ERR;
 800d93e:	2302      	movs	r3, #2
 800d940:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d944:	e015      	b.n	800d972 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d946:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d948:	0a5a      	lsrs	r2, r3, #9
 800d94a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d94c:	441a      	add	r2, r3
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d952:	693b      	ldr	r3, [r7, #16]
 800d954:	7858      	ldrb	r0, [r3, #1]
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	6a1a      	ldr	r2, [r3, #32]
 800d960:	2301      	movs	r3, #1
 800d962:	f7fe f919 	bl	800bb98 <disk_read>
 800d966:	4603      	mov	r3, r0
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d002      	beq.n	800d972 <f_open+0x35a>
 800d96c:	2301      	movs	r3, #1
 800d96e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d972:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d976:	2b00      	cmp	r3, #0
 800d978:	d002      	beq.n	800d980 <f_open+0x368>
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	2200      	movs	r2, #0
 800d97e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d980:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800d984:	4618      	mov	r0, r3
 800d986:	3760      	adds	r7, #96	@ 0x60
 800d988:	46bd      	mov	sp, r7
 800d98a:	bd80      	pop	{r7, pc}

0800d98c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800d98c:	b580      	push	{r7, lr}
 800d98e:	b08e      	sub	sp, #56	@ 0x38
 800d990:	af00      	add	r7, sp, #0
 800d992:	60f8      	str	r0, [r7, #12]
 800d994:	60b9      	str	r1, [r7, #8]
 800d996:	607a      	str	r2, [r7, #4]
 800d998:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800d99a:	68bb      	ldr	r3, [r7, #8]
 800d99c:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800d99e:	683b      	ldr	r3, [r7, #0]
 800d9a0:	2200      	movs	r2, #0
 800d9a2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	f107 0214 	add.w	r2, r7, #20
 800d9aa:	4611      	mov	r1, r2
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	f7ff fdb7 	bl	800d520 <validate>
 800d9b2:	4603      	mov	r3, r0
 800d9b4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d9b8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d107      	bne.n	800d9d0 <f_read+0x44>
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	7d5b      	ldrb	r3, [r3, #21]
 800d9c4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800d9c8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d002      	beq.n	800d9d6 <f_read+0x4a>
 800d9d0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d9d4:	e115      	b.n	800dc02 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	7d1b      	ldrb	r3, [r3, #20]
 800d9da:	f003 0301 	and.w	r3, r3, #1
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d101      	bne.n	800d9e6 <f_read+0x5a>
 800d9e2:	2307      	movs	r3, #7
 800d9e4:	e10d      	b.n	800dc02 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	68da      	ldr	r2, [r3, #12]
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	699b      	ldr	r3, [r3, #24]
 800d9ee:	1ad3      	subs	r3, r2, r3
 800d9f0:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800d9f2:	687a      	ldr	r2, [r7, #4]
 800d9f4:	6a3b      	ldr	r3, [r7, #32]
 800d9f6:	429a      	cmp	r2, r3
 800d9f8:	f240 80fe 	bls.w	800dbf8 <f_read+0x26c>
 800d9fc:	6a3b      	ldr	r3, [r7, #32]
 800d9fe:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800da00:	e0fa      	b.n	800dbf8 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	699b      	ldr	r3, [r3, #24]
 800da06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	f040 80c6 	bne.w	800db9c <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	699b      	ldr	r3, [r3, #24]
 800da14:	0a5b      	lsrs	r3, r3, #9
 800da16:	697a      	ldr	r2, [r7, #20]
 800da18:	8952      	ldrh	r2, [r2, #10]
 800da1a:	3a01      	subs	r2, #1
 800da1c:	4013      	ands	r3, r2
 800da1e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800da20:	69fb      	ldr	r3, [r7, #28]
 800da22:	2b00      	cmp	r3, #0
 800da24:	d12f      	bne.n	800da86 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	699b      	ldr	r3, [r3, #24]
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d103      	bne.n	800da36 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	689b      	ldr	r3, [r3, #8]
 800da32:	633b      	str	r3, [r7, #48]	@ 0x30
 800da34:	e013      	b.n	800da5e <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d007      	beq.n	800da4e <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	699b      	ldr	r3, [r3, #24]
 800da42:	4619      	mov	r1, r3
 800da44:	68f8      	ldr	r0, [r7, #12]
 800da46:	f7fe fefe 	bl	800c846 <clmt_clust>
 800da4a:	6338      	str	r0, [r7, #48]	@ 0x30
 800da4c:	e007      	b.n	800da5e <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800da4e:	68fa      	ldr	r2, [r7, #12]
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	69db      	ldr	r3, [r3, #28]
 800da54:	4619      	mov	r1, r3
 800da56:	4610      	mov	r0, r2
 800da58:	f7fe fc67 	bl	800c32a <get_fat>
 800da5c:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800da5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da60:	2b01      	cmp	r3, #1
 800da62:	d804      	bhi.n	800da6e <f_read+0xe2>
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	2202      	movs	r2, #2
 800da68:	755a      	strb	r2, [r3, #21]
 800da6a:	2302      	movs	r3, #2
 800da6c:	e0c9      	b.n	800dc02 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800da6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da74:	d104      	bne.n	800da80 <f_read+0xf4>
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	2201      	movs	r2, #1
 800da7a:	755a      	strb	r2, [r3, #21]
 800da7c:	2301      	movs	r3, #1
 800da7e:	e0c0      	b.n	800dc02 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800da84:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800da86:	697a      	ldr	r2, [r7, #20]
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	69db      	ldr	r3, [r3, #28]
 800da8c:	4619      	mov	r1, r3
 800da8e:	4610      	mov	r0, r2
 800da90:	f7fe fc2c 	bl	800c2ec <clust2sect>
 800da94:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800da96:	69bb      	ldr	r3, [r7, #24]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d104      	bne.n	800daa6 <f_read+0x11a>
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	2202      	movs	r2, #2
 800daa0:	755a      	strb	r2, [r3, #21]
 800daa2:	2302      	movs	r3, #2
 800daa4:	e0ad      	b.n	800dc02 <f_read+0x276>
			sect += csect;
 800daa6:	69ba      	ldr	r2, [r7, #24]
 800daa8:	69fb      	ldr	r3, [r7, #28]
 800daaa:	4413      	add	r3, r2
 800daac:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	0a5b      	lsrs	r3, r3, #9
 800dab2:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800dab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d039      	beq.n	800db2e <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800daba:	69fa      	ldr	r2, [r7, #28]
 800dabc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dabe:	4413      	add	r3, r2
 800dac0:	697a      	ldr	r2, [r7, #20]
 800dac2:	8952      	ldrh	r2, [r2, #10]
 800dac4:	4293      	cmp	r3, r2
 800dac6:	d905      	bls.n	800dad4 <f_read+0x148>
					cc = fs->csize - csect;
 800dac8:	697b      	ldr	r3, [r7, #20]
 800daca:	895b      	ldrh	r3, [r3, #10]
 800dacc:	461a      	mov	r2, r3
 800dace:	69fb      	ldr	r3, [r7, #28]
 800dad0:	1ad3      	subs	r3, r2, r3
 800dad2:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800dad4:	697b      	ldr	r3, [r7, #20]
 800dad6:	7858      	ldrb	r0, [r3, #1]
 800dad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dada:	69ba      	ldr	r2, [r7, #24]
 800dadc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800dade:	f7fe f85b 	bl	800bb98 <disk_read>
 800dae2:	4603      	mov	r3, r0
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d004      	beq.n	800daf2 <f_read+0x166>
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	2201      	movs	r2, #1
 800daec:	755a      	strb	r2, [r3, #21]
 800daee:	2301      	movs	r3, #1
 800daf0:	e087      	b.n	800dc02 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	7d1b      	ldrb	r3, [r3, #20]
 800daf6:	b25b      	sxtb	r3, r3
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	da14      	bge.n	800db26 <f_read+0x19a>
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	6a1a      	ldr	r2, [r3, #32]
 800db00:	69bb      	ldr	r3, [r7, #24]
 800db02:	1ad3      	subs	r3, r2, r3
 800db04:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800db06:	429a      	cmp	r2, r3
 800db08:	d90d      	bls.n	800db26 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	6a1a      	ldr	r2, [r3, #32]
 800db0e:	69bb      	ldr	r3, [r7, #24]
 800db10:	1ad3      	subs	r3, r2, r3
 800db12:	025b      	lsls	r3, r3, #9
 800db14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800db16:	18d0      	adds	r0, r2, r3
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	3330      	adds	r3, #48	@ 0x30
 800db1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800db20:	4619      	mov	r1, r3
 800db22:	f7fe f919 	bl	800bd58 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800db26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db28:	025b      	lsls	r3, r3, #9
 800db2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800db2c:	e050      	b.n	800dbd0 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	6a1b      	ldr	r3, [r3, #32]
 800db32:	69ba      	ldr	r2, [r7, #24]
 800db34:	429a      	cmp	r2, r3
 800db36:	d02e      	beq.n	800db96 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	7d1b      	ldrb	r3, [r3, #20]
 800db3c:	b25b      	sxtb	r3, r3
 800db3e:	2b00      	cmp	r3, #0
 800db40:	da18      	bge.n	800db74 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800db42:	697b      	ldr	r3, [r7, #20]
 800db44:	7858      	ldrb	r0, [r3, #1]
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	6a1a      	ldr	r2, [r3, #32]
 800db50:	2301      	movs	r3, #1
 800db52:	f7fe f841 	bl	800bbd8 <disk_write>
 800db56:	4603      	mov	r3, r0
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d004      	beq.n	800db66 <f_read+0x1da>
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	2201      	movs	r2, #1
 800db60:	755a      	strb	r2, [r3, #21]
 800db62:	2301      	movs	r3, #1
 800db64:	e04d      	b.n	800dc02 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	7d1b      	ldrb	r3, [r3, #20]
 800db6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800db6e:	b2da      	uxtb	r2, r3
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800db74:	697b      	ldr	r3, [r7, #20]
 800db76:	7858      	ldrb	r0, [r3, #1]
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800db7e:	2301      	movs	r3, #1
 800db80:	69ba      	ldr	r2, [r7, #24]
 800db82:	f7fe f809 	bl	800bb98 <disk_read>
 800db86:	4603      	mov	r3, r0
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d004      	beq.n	800db96 <f_read+0x20a>
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	2201      	movs	r2, #1
 800db90:	755a      	strb	r2, [r3, #21]
 800db92:	2301      	movs	r3, #1
 800db94:	e035      	b.n	800dc02 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	69ba      	ldr	r2, [r7, #24]
 800db9a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	699b      	ldr	r3, [r3, #24]
 800dba0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dba4:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800dba8:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800dbaa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	429a      	cmp	r2, r3
 800dbb0:	d901      	bls.n	800dbb6 <f_read+0x22a>
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	699b      	ldr	r3, [r3, #24]
 800dbc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dbc4:	4413      	add	r3, r2
 800dbc6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dbc8:	4619      	mov	r1, r3
 800dbca:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800dbcc:	f7fe f8c4 	bl	800bd58 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800dbd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dbd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbd4:	4413      	add	r3, r2
 800dbd6:	627b      	str	r3, [r7, #36]	@ 0x24
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	699a      	ldr	r2, [r3, #24]
 800dbdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbde:	441a      	add	r2, r3
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	619a      	str	r2, [r3, #24]
 800dbe4:	683b      	ldr	r3, [r7, #0]
 800dbe6:	681a      	ldr	r2, [r3, #0]
 800dbe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbea:	441a      	add	r2, r3
 800dbec:	683b      	ldr	r3, [r7, #0]
 800dbee:	601a      	str	r2, [r3, #0]
 800dbf0:	687a      	ldr	r2, [r7, #4]
 800dbf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbf4:	1ad3      	subs	r3, r2, r3
 800dbf6:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	f47f af01 	bne.w	800da02 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800dc00:	2300      	movs	r3, #0
}
 800dc02:	4618      	mov	r0, r3
 800dc04:	3738      	adds	r7, #56	@ 0x38
 800dc06:	46bd      	mov	sp, r7
 800dc08:	bd80      	pop	{r7, pc}

0800dc0a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800dc0a:	b580      	push	{r7, lr}
 800dc0c:	b08c      	sub	sp, #48	@ 0x30
 800dc0e:	af00      	add	r7, sp, #0
 800dc10:	60f8      	str	r0, [r7, #12]
 800dc12:	60b9      	str	r1, [r7, #8]
 800dc14:	607a      	str	r2, [r7, #4]
 800dc16:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800dc18:	68bb      	ldr	r3, [r7, #8]
 800dc1a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800dc1c:	683b      	ldr	r3, [r7, #0]
 800dc1e:	2200      	movs	r2, #0
 800dc20:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	f107 0210 	add.w	r2, r7, #16
 800dc28:	4611      	mov	r1, r2
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	f7ff fc78 	bl	800d520 <validate>
 800dc30:	4603      	mov	r3, r0
 800dc32:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800dc36:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d107      	bne.n	800dc4e <f_write+0x44>
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	7d5b      	ldrb	r3, [r3, #21]
 800dc42:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800dc46:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d002      	beq.n	800dc54 <f_write+0x4a>
 800dc4e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800dc52:	e14b      	b.n	800deec <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	7d1b      	ldrb	r3, [r3, #20]
 800dc58:	f003 0302 	and.w	r3, r3, #2
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d101      	bne.n	800dc64 <f_write+0x5a>
 800dc60:	2307      	movs	r3, #7
 800dc62:	e143      	b.n	800deec <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	699a      	ldr	r2, [r3, #24]
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	441a      	add	r2, r3
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	699b      	ldr	r3, [r3, #24]
 800dc70:	429a      	cmp	r2, r3
 800dc72:	f080 812d 	bcs.w	800ded0 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	699b      	ldr	r3, [r3, #24]
 800dc7a:	43db      	mvns	r3, r3
 800dc7c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800dc7e:	e127      	b.n	800ded0 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	699b      	ldr	r3, [r3, #24]
 800dc84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	f040 80e3 	bne.w	800de54 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	699b      	ldr	r3, [r3, #24]
 800dc92:	0a5b      	lsrs	r3, r3, #9
 800dc94:	693a      	ldr	r2, [r7, #16]
 800dc96:	8952      	ldrh	r2, [r2, #10]
 800dc98:	3a01      	subs	r2, #1
 800dc9a:	4013      	ands	r3, r2
 800dc9c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800dc9e:	69bb      	ldr	r3, [r7, #24]
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d143      	bne.n	800dd2c <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	699b      	ldr	r3, [r3, #24]
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d10c      	bne.n	800dcc6 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	689b      	ldr	r3, [r3, #8]
 800dcb0:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800dcb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d11a      	bne.n	800dcee <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	2100      	movs	r1, #0
 800dcbc:	4618      	mov	r0, r3
 800dcbe:	f7fe fd2a 	bl	800c716 <create_chain>
 800dcc2:	62b8      	str	r0, [r7, #40]	@ 0x28
 800dcc4:	e013      	b.n	800dcee <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d007      	beq.n	800dcde <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	699b      	ldr	r3, [r3, #24]
 800dcd2:	4619      	mov	r1, r3
 800dcd4:	68f8      	ldr	r0, [r7, #12]
 800dcd6:	f7fe fdb6 	bl	800c846 <clmt_clust>
 800dcda:	62b8      	str	r0, [r7, #40]	@ 0x28
 800dcdc:	e007      	b.n	800dcee <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800dcde:	68fa      	ldr	r2, [r7, #12]
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	69db      	ldr	r3, [r3, #28]
 800dce4:	4619      	mov	r1, r3
 800dce6:	4610      	mov	r0, r2
 800dce8:	f7fe fd15 	bl	800c716 <create_chain>
 800dcec:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800dcee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	f000 80f2 	beq.w	800deda <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800dcf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcf8:	2b01      	cmp	r3, #1
 800dcfa:	d104      	bne.n	800dd06 <f_write+0xfc>
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	2202      	movs	r2, #2
 800dd00:	755a      	strb	r2, [r3, #21]
 800dd02:	2302      	movs	r3, #2
 800dd04:	e0f2      	b.n	800deec <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800dd06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd0c:	d104      	bne.n	800dd18 <f_write+0x10e>
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	2201      	movs	r2, #1
 800dd12:	755a      	strb	r2, [r3, #21]
 800dd14:	2301      	movs	r3, #1
 800dd16:	e0e9      	b.n	800deec <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dd1c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	689b      	ldr	r3, [r3, #8]
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d102      	bne.n	800dd2c <f_write+0x122>
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dd2a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	7d1b      	ldrb	r3, [r3, #20]
 800dd30:	b25b      	sxtb	r3, r3
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	da18      	bge.n	800dd68 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800dd36:	693b      	ldr	r3, [r7, #16]
 800dd38:	7858      	ldrb	r0, [r3, #1]
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	6a1a      	ldr	r2, [r3, #32]
 800dd44:	2301      	movs	r3, #1
 800dd46:	f7fd ff47 	bl	800bbd8 <disk_write>
 800dd4a:	4603      	mov	r3, r0
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d004      	beq.n	800dd5a <f_write+0x150>
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	2201      	movs	r2, #1
 800dd54:	755a      	strb	r2, [r3, #21]
 800dd56:	2301      	movs	r3, #1
 800dd58:	e0c8      	b.n	800deec <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	7d1b      	ldrb	r3, [r3, #20]
 800dd5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dd62:	b2da      	uxtb	r2, r3
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800dd68:	693a      	ldr	r2, [r7, #16]
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	69db      	ldr	r3, [r3, #28]
 800dd6e:	4619      	mov	r1, r3
 800dd70:	4610      	mov	r0, r2
 800dd72:	f7fe fabb 	bl	800c2ec <clust2sect>
 800dd76:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800dd78:	697b      	ldr	r3, [r7, #20]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d104      	bne.n	800dd88 <f_write+0x17e>
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	2202      	movs	r2, #2
 800dd82:	755a      	strb	r2, [r3, #21]
 800dd84:	2302      	movs	r3, #2
 800dd86:	e0b1      	b.n	800deec <f_write+0x2e2>
			sect += csect;
 800dd88:	697a      	ldr	r2, [r7, #20]
 800dd8a:	69bb      	ldr	r3, [r7, #24]
 800dd8c:	4413      	add	r3, r2
 800dd8e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	0a5b      	lsrs	r3, r3, #9
 800dd94:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800dd96:	6a3b      	ldr	r3, [r7, #32]
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d03c      	beq.n	800de16 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800dd9c:	69ba      	ldr	r2, [r7, #24]
 800dd9e:	6a3b      	ldr	r3, [r7, #32]
 800dda0:	4413      	add	r3, r2
 800dda2:	693a      	ldr	r2, [r7, #16]
 800dda4:	8952      	ldrh	r2, [r2, #10]
 800dda6:	4293      	cmp	r3, r2
 800dda8:	d905      	bls.n	800ddb6 <f_write+0x1ac>
					cc = fs->csize - csect;
 800ddaa:	693b      	ldr	r3, [r7, #16]
 800ddac:	895b      	ldrh	r3, [r3, #10]
 800ddae:	461a      	mov	r2, r3
 800ddb0:	69bb      	ldr	r3, [r7, #24]
 800ddb2:	1ad3      	subs	r3, r2, r3
 800ddb4:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ddb6:	693b      	ldr	r3, [r7, #16]
 800ddb8:	7858      	ldrb	r0, [r3, #1]
 800ddba:	6a3b      	ldr	r3, [r7, #32]
 800ddbc:	697a      	ldr	r2, [r7, #20]
 800ddbe:	69f9      	ldr	r1, [r7, #28]
 800ddc0:	f7fd ff0a 	bl	800bbd8 <disk_write>
 800ddc4:	4603      	mov	r3, r0
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d004      	beq.n	800ddd4 <f_write+0x1ca>
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	2201      	movs	r2, #1
 800ddce:	755a      	strb	r2, [r3, #21]
 800ddd0:	2301      	movs	r3, #1
 800ddd2:	e08b      	b.n	800deec <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	6a1a      	ldr	r2, [r3, #32]
 800ddd8:	697b      	ldr	r3, [r7, #20]
 800ddda:	1ad3      	subs	r3, r2, r3
 800dddc:	6a3a      	ldr	r2, [r7, #32]
 800ddde:	429a      	cmp	r2, r3
 800dde0:	d915      	bls.n	800de0e <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	6a1a      	ldr	r2, [r3, #32]
 800ddec:	697b      	ldr	r3, [r7, #20]
 800ddee:	1ad3      	subs	r3, r2, r3
 800ddf0:	025b      	lsls	r3, r3, #9
 800ddf2:	69fa      	ldr	r2, [r7, #28]
 800ddf4:	4413      	add	r3, r2
 800ddf6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ddfa:	4619      	mov	r1, r3
 800ddfc:	f7fd ffac 	bl	800bd58 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	7d1b      	ldrb	r3, [r3, #20]
 800de04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800de08:	b2da      	uxtb	r2, r3
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800de0e:	6a3b      	ldr	r3, [r7, #32]
 800de10:	025b      	lsls	r3, r3, #9
 800de12:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800de14:	e03f      	b.n	800de96 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	6a1b      	ldr	r3, [r3, #32]
 800de1a:	697a      	ldr	r2, [r7, #20]
 800de1c:	429a      	cmp	r2, r3
 800de1e:	d016      	beq.n	800de4e <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	699a      	ldr	r2, [r3, #24]
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800de28:	429a      	cmp	r2, r3
 800de2a:	d210      	bcs.n	800de4e <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800de2c:	693b      	ldr	r3, [r7, #16]
 800de2e:	7858      	ldrb	r0, [r3, #1]
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800de36:	2301      	movs	r3, #1
 800de38:	697a      	ldr	r2, [r7, #20]
 800de3a:	f7fd fead 	bl	800bb98 <disk_read>
 800de3e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800de40:	2b00      	cmp	r3, #0
 800de42:	d004      	beq.n	800de4e <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	2201      	movs	r2, #1
 800de48:	755a      	strb	r2, [r3, #21]
 800de4a:	2301      	movs	r3, #1
 800de4c:	e04e      	b.n	800deec <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	697a      	ldr	r2, [r7, #20]
 800de52:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	699b      	ldr	r3, [r3, #24]
 800de58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de5c:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800de60:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800de62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	429a      	cmp	r2, r3
 800de68:	d901      	bls.n	800de6e <f_write+0x264>
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	699b      	ldr	r3, [r3, #24]
 800de78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de7c:	4413      	add	r3, r2
 800de7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800de80:	69f9      	ldr	r1, [r7, #28]
 800de82:	4618      	mov	r0, r3
 800de84:	f7fd ff68 	bl	800bd58 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	7d1b      	ldrb	r3, [r3, #20]
 800de8c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800de90:	b2da      	uxtb	r2, r3
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800de96:	69fa      	ldr	r2, [r7, #28]
 800de98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de9a:	4413      	add	r3, r2
 800de9c:	61fb      	str	r3, [r7, #28]
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	699a      	ldr	r2, [r3, #24]
 800dea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dea4:	441a      	add	r2, r3
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	619a      	str	r2, [r3, #24]
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	68da      	ldr	r2, [r3, #12]
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	699b      	ldr	r3, [r3, #24]
 800deb2:	429a      	cmp	r2, r3
 800deb4:	bf38      	it	cc
 800deb6:	461a      	movcc	r2, r3
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	60da      	str	r2, [r3, #12]
 800debc:	683b      	ldr	r3, [r7, #0]
 800debe:	681a      	ldr	r2, [r3, #0]
 800dec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dec2:	441a      	add	r2, r3
 800dec4:	683b      	ldr	r3, [r7, #0]
 800dec6:	601a      	str	r2, [r3, #0]
 800dec8:	687a      	ldr	r2, [r7, #4]
 800deca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800decc:	1ad3      	subs	r3, r2, r3
 800dece:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	f47f aed4 	bne.w	800dc80 <f_write+0x76>
 800ded8:	e000      	b.n	800dedc <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800deda:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	7d1b      	ldrb	r3, [r3, #20]
 800dee0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dee4:	b2da      	uxtb	r2, r3
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800deea:	2300      	movs	r3, #0
}
 800deec:	4618      	mov	r0, r3
 800deee:	3730      	adds	r7, #48	@ 0x30
 800def0:	46bd      	mov	sp, r7
 800def2:	bd80      	pop	{r7, pc}

0800def4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800def4:	b580      	push	{r7, lr}
 800def6:	b086      	sub	sp, #24
 800def8:	af00      	add	r7, sp, #0
 800defa:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	f107 0208 	add.w	r2, r7, #8
 800df02:	4611      	mov	r1, r2
 800df04:	4618      	mov	r0, r3
 800df06:	f7ff fb0b 	bl	800d520 <validate>
 800df0a:	4603      	mov	r3, r0
 800df0c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800df0e:	7dfb      	ldrb	r3, [r7, #23]
 800df10:	2b00      	cmp	r3, #0
 800df12:	d168      	bne.n	800dfe6 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	7d1b      	ldrb	r3, [r3, #20]
 800df18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d062      	beq.n	800dfe6 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	7d1b      	ldrb	r3, [r3, #20]
 800df24:	b25b      	sxtb	r3, r3
 800df26:	2b00      	cmp	r3, #0
 800df28:	da15      	bge.n	800df56 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800df2a:	68bb      	ldr	r3, [r7, #8]
 800df2c:	7858      	ldrb	r0, [r3, #1]
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	6a1a      	ldr	r2, [r3, #32]
 800df38:	2301      	movs	r3, #1
 800df3a:	f7fd fe4d 	bl	800bbd8 <disk_write>
 800df3e:	4603      	mov	r3, r0
 800df40:	2b00      	cmp	r3, #0
 800df42:	d001      	beq.n	800df48 <f_sync+0x54>
 800df44:	2301      	movs	r3, #1
 800df46:	e04f      	b.n	800dfe8 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	7d1b      	ldrb	r3, [r3, #20]
 800df4c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800df50:	b2da      	uxtb	r2, r3
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800df56:	f7fd fb9d 	bl	800b694 <get_fattime>
 800df5a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800df5c:	68ba      	ldr	r2, [r7, #8]
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df62:	4619      	mov	r1, r3
 800df64:	4610      	mov	r0, r2
 800df66:	f7fe f925 	bl	800c1b4 <move_window>
 800df6a:	4603      	mov	r3, r0
 800df6c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800df6e:	7dfb      	ldrb	r3, [r7, #23]
 800df70:	2b00      	cmp	r3, #0
 800df72:	d138      	bne.n	800dfe6 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df78:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	330b      	adds	r3, #11
 800df7e:	781a      	ldrb	r2, [r3, #0]
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	330b      	adds	r3, #11
 800df84:	f042 0220 	orr.w	r2, r2, #32
 800df88:	b2d2      	uxtb	r2, r2
 800df8a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	6818      	ldr	r0, [r3, #0]
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	689b      	ldr	r3, [r3, #8]
 800df94:	461a      	mov	r2, r3
 800df96:	68f9      	ldr	r1, [r7, #12]
 800df98:	f7fe fe2f 	bl	800cbfa <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	f103 021c 	add.w	r2, r3, #28
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	68db      	ldr	r3, [r3, #12]
 800dfa6:	4619      	mov	r1, r3
 800dfa8:	4610      	mov	r0, r2
 800dfaa:	f7fd fea9 	bl	800bd00 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	3316      	adds	r3, #22
 800dfb2:	6939      	ldr	r1, [r7, #16]
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	f7fd fea3 	bl	800bd00 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	3312      	adds	r3, #18
 800dfbe:	2100      	movs	r1, #0
 800dfc0:	4618      	mov	r0, r3
 800dfc2:	f7fd fe82 	bl	800bcca <st_word>
					fs->wflag = 1;
 800dfc6:	68bb      	ldr	r3, [r7, #8]
 800dfc8:	2201      	movs	r2, #1
 800dfca:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800dfcc:	68bb      	ldr	r3, [r7, #8]
 800dfce:	4618      	mov	r0, r3
 800dfd0:	f7fe f91e 	bl	800c210 <sync_fs>
 800dfd4:	4603      	mov	r3, r0
 800dfd6:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	7d1b      	ldrb	r3, [r3, #20]
 800dfdc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dfe0:	b2da      	uxtb	r2, r3
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800dfe6:	7dfb      	ldrb	r3, [r7, #23]
}
 800dfe8:	4618      	mov	r0, r3
 800dfea:	3718      	adds	r7, #24
 800dfec:	46bd      	mov	sp, r7
 800dfee:	bd80      	pop	{r7, pc}

0800dff0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800dff0:	b580      	push	{r7, lr}
 800dff2:	b084      	sub	sp, #16
 800dff4:	af00      	add	r7, sp, #0
 800dff6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800dff8:	6878      	ldr	r0, [r7, #4]
 800dffa:	f7ff ff7b 	bl	800def4 <f_sync>
 800dffe:	4603      	mov	r3, r0
 800e000:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800e002:	7bfb      	ldrb	r3, [r7, #15]
 800e004:	2b00      	cmp	r3, #0
 800e006:	d118      	bne.n	800e03a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	f107 0208 	add.w	r2, r7, #8
 800e00e:	4611      	mov	r1, r2
 800e010:	4618      	mov	r0, r3
 800e012:	f7ff fa85 	bl	800d520 <validate>
 800e016:	4603      	mov	r3, r0
 800e018:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e01a:	7bfb      	ldrb	r3, [r7, #15]
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d10c      	bne.n	800e03a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	691b      	ldr	r3, [r3, #16]
 800e024:	4618      	mov	r0, r3
 800e026:	f7fe f821 	bl	800c06c <dec_lock>
 800e02a:	4603      	mov	r3, r0
 800e02c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800e02e:	7bfb      	ldrb	r3, [r7, #15]
 800e030:	2b00      	cmp	r3, #0
 800e032:	d102      	bne.n	800e03a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	2200      	movs	r2, #0
 800e038:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800e03a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e03c:	4618      	mov	r0, r3
 800e03e:	3710      	adds	r7, #16
 800e040:	46bd      	mov	sp, r7
 800e042:	bd80      	pop	{r7, pc}

0800e044 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800e044:	b580      	push	{r7, lr}
 800e046:	b090      	sub	sp, #64	@ 0x40
 800e048:	af00      	add	r7, sp, #0
 800e04a:	6078      	str	r0, [r7, #4]
 800e04c:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	f107 0208 	add.w	r2, r7, #8
 800e054:	4611      	mov	r1, r2
 800e056:	4618      	mov	r0, r3
 800e058:	f7ff fa62 	bl	800d520 <validate>
 800e05c:	4603      	mov	r3, r0
 800e05e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800e062:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e066:	2b00      	cmp	r3, #0
 800e068:	d103      	bne.n	800e072 <f_lseek+0x2e>
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	7d5b      	ldrb	r3, [r3, #21]
 800e06e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800e072:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e076:	2b00      	cmp	r3, #0
 800e078:	d002      	beq.n	800e080 <f_lseek+0x3c>
 800e07a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e07e:	e1e6      	b.n	800e44e <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e084:	2b00      	cmp	r3, #0
 800e086:	f000 80d1 	beq.w	800e22c <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800e08a:	683b      	ldr	r3, [r7, #0]
 800e08c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e090:	d15a      	bne.n	800e148 <f_lseek+0x104>
			tbl = fp->cltbl;
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e096:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800e098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e09a:	1d1a      	adds	r2, r3, #4
 800e09c:	627a      	str	r2, [r7, #36]	@ 0x24
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	617b      	str	r3, [r7, #20]
 800e0a2:	2302      	movs	r3, #2
 800e0a4:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	689b      	ldr	r3, [r3, #8]
 800e0aa:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800e0ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d03a      	beq.n	800e128 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800e0b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0b4:	613b      	str	r3, [r7, #16]
 800e0b6:	2300      	movs	r3, #0
 800e0b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e0ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0bc:	3302      	adds	r3, #2
 800e0be:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800e0c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0c2:	60fb      	str	r3, [r7, #12]
 800e0c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0c6:	3301      	adds	r3, #1
 800e0c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e0ce:	4618      	mov	r0, r3
 800e0d0:	f7fe f92b 	bl	800c32a <get_fat>
 800e0d4:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800e0d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0d8:	2b01      	cmp	r3, #1
 800e0da:	d804      	bhi.n	800e0e6 <f_lseek+0xa2>
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	2202      	movs	r2, #2
 800e0e0:	755a      	strb	r2, [r3, #21]
 800e0e2:	2302      	movs	r3, #2
 800e0e4:	e1b3      	b.n	800e44e <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e0e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0ec:	d104      	bne.n	800e0f8 <f_lseek+0xb4>
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	2201      	movs	r2, #1
 800e0f2:	755a      	strb	r2, [r3, #21]
 800e0f4:	2301      	movs	r3, #1
 800e0f6:	e1aa      	b.n	800e44e <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	3301      	adds	r3, #1
 800e0fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e0fe:	429a      	cmp	r2, r3
 800e100:	d0de      	beq.n	800e0c0 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800e102:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e104:	697b      	ldr	r3, [r7, #20]
 800e106:	429a      	cmp	r2, r3
 800e108:	d809      	bhi.n	800e11e <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800e10a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e10c:	1d1a      	adds	r2, r3, #4
 800e10e:	627a      	str	r2, [r7, #36]	@ 0x24
 800e110:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e112:	601a      	str	r2, [r3, #0]
 800e114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e116:	1d1a      	adds	r2, r3, #4
 800e118:	627a      	str	r2, [r7, #36]	@ 0x24
 800e11a:	693a      	ldr	r2, [r7, #16]
 800e11c:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800e11e:	68bb      	ldr	r3, [r7, #8]
 800e120:	695b      	ldr	r3, [r3, #20]
 800e122:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e124:	429a      	cmp	r2, r3
 800e126:	d3c4      	bcc.n	800e0b2 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e12c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e12e:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800e130:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e132:	697b      	ldr	r3, [r7, #20]
 800e134:	429a      	cmp	r2, r3
 800e136:	d803      	bhi.n	800e140 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800e138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e13a:	2200      	movs	r2, #0
 800e13c:	601a      	str	r2, [r3, #0]
 800e13e:	e184      	b.n	800e44a <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800e140:	2311      	movs	r3, #17
 800e142:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800e146:	e180      	b.n	800e44a <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	68db      	ldr	r3, [r3, #12]
 800e14c:	683a      	ldr	r2, [r7, #0]
 800e14e:	429a      	cmp	r2, r3
 800e150:	d902      	bls.n	800e158 <f_lseek+0x114>
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	68db      	ldr	r3, [r3, #12]
 800e156:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	683a      	ldr	r2, [r7, #0]
 800e15c:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800e15e:	683b      	ldr	r3, [r7, #0]
 800e160:	2b00      	cmp	r3, #0
 800e162:	f000 8172 	beq.w	800e44a <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800e166:	683b      	ldr	r3, [r7, #0]
 800e168:	3b01      	subs	r3, #1
 800e16a:	4619      	mov	r1, r3
 800e16c:	6878      	ldr	r0, [r7, #4]
 800e16e:	f7fe fb6a 	bl	800c846 <clmt_clust>
 800e172:	4602      	mov	r2, r0
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800e178:	68ba      	ldr	r2, [r7, #8]
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	69db      	ldr	r3, [r3, #28]
 800e17e:	4619      	mov	r1, r3
 800e180:	4610      	mov	r0, r2
 800e182:	f7fe f8b3 	bl	800c2ec <clust2sect>
 800e186:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800e188:	69bb      	ldr	r3, [r7, #24]
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d104      	bne.n	800e198 <f_lseek+0x154>
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	2202      	movs	r2, #2
 800e192:	755a      	strb	r2, [r3, #21]
 800e194:	2302      	movs	r3, #2
 800e196:	e15a      	b.n	800e44e <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800e198:	683b      	ldr	r3, [r7, #0]
 800e19a:	3b01      	subs	r3, #1
 800e19c:	0a5b      	lsrs	r3, r3, #9
 800e19e:	68ba      	ldr	r2, [r7, #8]
 800e1a0:	8952      	ldrh	r2, [r2, #10]
 800e1a2:	3a01      	subs	r2, #1
 800e1a4:	4013      	ands	r3, r2
 800e1a6:	69ba      	ldr	r2, [r7, #24]
 800e1a8:	4413      	add	r3, r2
 800e1aa:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	699b      	ldr	r3, [r3, #24]
 800e1b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	f000 8148 	beq.w	800e44a <f_lseek+0x406>
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	6a1b      	ldr	r3, [r3, #32]
 800e1be:	69ba      	ldr	r2, [r7, #24]
 800e1c0:	429a      	cmp	r2, r3
 800e1c2:	f000 8142 	beq.w	800e44a <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	7d1b      	ldrb	r3, [r3, #20]
 800e1ca:	b25b      	sxtb	r3, r3
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	da18      	bge.n	800e202 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e1d0:	68bb      	ldr	r3, [r7, #8]
 800e1d2:	7858      	ldrb	r0, [r3, #1]
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	6a1a      	ldr	r2, [r3, #32]
 800e1de:	2301      	movs	r3, #1
 800e1e0:	f7fd fcfa 	bl	800bbd8 <disk_write>
 800e1e4:	4603      	mov	r3, r0
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d004      	beq.n	800e1f4 <f_lseek+0x1b0>
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	2201      	movs	r2, #1
 800e1ee:	755a      	strb	r2, [r3, #21]
 800e1f0:	2301      	movs	r3, #1
 800e1f2:	e12c      	b.n	800e44e <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	7d1b      	ldrb	r3, [r3, #20]
 800e1f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e1fc:	b2da      	uxtb	r2, r3
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800e202:	68bb      	ldr	r3, [r7, #8]
 800e204:	7858      	ldrb	r0, [r3, #1]
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e20c:	2301      	movs	r3, #1
 800e20e:	69ba      	ldr	r2, [r7, #24]
 800e210:	f7fd fcc2 	bl	800bb98 <disk_read>
 800e214:	4603      	mov	r3, r0
 800e216:	2b00      	cmp	r3, #0
 800e218:	d004      	beq.n	800e224 <f_lseek+0x1e0>
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	2201      	movs	r2, #1
 800e21e:	755a      	strb	r2, [r3, #21]
 800e220:	2301      	movs	r3, #1
 800e222:	e114      	b.n	800e44e <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	69ba      	ldr	r2, [r7, #24]
 800e228:	621a      	str	r2, [r3, #32]
 800e22a:	e10e      	b.n	800e44a <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	68db      	ldr	r3, [r3, #12]
 800e230:	683a      	ldr	r2, [r7, #0]
 800e232:	429a      	cmp	r2, r3
 800e234:	d908      	bls.n	800e248 <f_lseek+0x204>
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	7d1b      	ldrb	r3, [r3, #20]
 800e23a:	f003 0302 	and.w	r3, r3, #2
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d102      	bne.n	800e248 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	68db      	ldr	r3, [r3, #12]
 800e246:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	699b      	ldr	r3, [r3, #24]
 800e24c:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800e24e:	2300      	movs	r3, #0
 800e250:	637b      	str	r3, [r7, #52]	@ 0x34
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e256:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800e258:	683b      	ldr	r3, [r7, #0]
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	f000 80a7 	beq.w	800e3ae <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800e260:	68bb      	ldr	r3, [r7, #8]
 800e262:	895b      	ldrh	r3, [r3, #10]
 800e264:	025b      	lsls	r3, r3, #9
 800e266:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800e268:	6a3b      	ldr	r3, [r7, #32]
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d01b      	beq.n	800e2a6 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800e26e:	683b      	ldr	r3, [r7, #0]
 800e270:	1e5a      	subs	r2, r3, #1
 800e272:	69fb      	ldr	r3, [r7, #28]
 800e274:	fbb2 f2f3 	udiv	r2, r2, r3
 800e278:	6a3b      	ldr	r3, [r7, #32]
 800e27a:	1e59      	subs	r1, r3, #1
 800e27c:	69fb      	ldr	r3, [r7, #28]
 800e27e:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800e282:	429a      	cmp	r2, r3
 800e284:	d30f      	bcc.n	800e2a6 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800e286:	6a3b      	ldr	r3, [r7, #32]
 800e288:	1e5a      	subs	r2, r3, #1
 800e28a:	69fb      	ldr	r3, [r7, #28]
 800e28c:	425b      	negs	r3, r3
 800e28e:	401a      	ands	r2, r3
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	699b      	ldr	r3, [r3, #24]
 800e298:	683a      	ldr	r2, [r7, #0]
 800e29a:	1ad3      	subs	r3, r2, r3
 800e29c:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	69db      	ldr	r3, [r3, #28]
 800e2a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e2a4:	e022      	b.n	800e2ec <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	689b      	ldr	r3, [r3, #8]
 800e2aa:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800e2ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d119      	bne.n	800e2e6 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	2100      	movs	r1, #0
 800e2b6:	4618      	mov	r0, r3
 800e2b8:	f7fe fa2d 	bl	800c716 <create_chain>
 800e2bc:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800e2be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2c0:	2b01      	cmp	r3, #1
 800e2c2:	d104      	bne.n	800e2ce <f_lseek+0x28a>
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	2202      	movs	r2, #2
 800e2c8:	755a      	strb	r2, [r3, #21]
 800e2ca:	2302      	movs	r3, #2
 800e2cc:	e0bf      	b.n	800e44e <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e2ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2d4:	d104      	bne.n	800e2e0 <f_lseek+0x29c>
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	2201      	movs	r2, #1
 800e2da:	755a      	strb	r2, [r3, #21]
 800e2dc:	2301      	movs	r3, #1
 800e2de:	e0b6      	b.n	800e44e <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e2e4:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e2ea:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800e2ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d05d      	beq.n	800e3ae <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800e2f2:	e03a      	b.n	800e36a <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800e2f4:	683a      	ldr	r2, [r7, #0]
 800e2f6:	69fb      	ldr	r3, [r7, #28]
 800e2f8:	1ad3      	subs	r3, r2, r3
 800e2fa:	603b      	str	r3, [r7, #0]
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	699a      	ldr	r2, [r3, #24]
 800e300:	69fb      	ldr	r3, [r7, #28]
 800e302:	441a      	add	r2, r3
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	7d1b      	ldrb	r3, [r3, #20]
 800e30c:	f003 0302 	and.w	r3, r3, #2
 800e310:	2b00      	cmp	r3, #0
 800e312:	d00b      	beq.n	800e32c <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800e318:	4618      	mov	r0, r3
 800e31a:	f7fe f9fc 	bl	800c716 <create_chain>
 800e31e:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800e320:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e322:	2b00      	cmp	r3, #0
 800e324:	d108      	bne.n	800e338 <f_lseek+0x2f4>
							ofs = 0; break;
 800e326:	2300      	movs	r3, #0
 800e328:	603b      	str	r3, [r7, #0]
 800e32a:	e022      	b.n	800e372 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800e330:	4618      	mov	r0, r3
 800e332:	f7fd fffa 	bl	800c32a <get_fat>
 800e336:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e338:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e33a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e33e:	d104      	bne.n	800e34a <f_lseek+0x306>
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	2201      	movs	r2, #1
 800e344:	755a      	strb	r2, [r3, #21]
 800e346:	2301      	movs	r3, #1
 800e348:	e081      	b.n	800e44e <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800e34a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e34c:	2b01      	cmp	r3, #1
 800e34e:	d904      	bls.n	800e35a <f_lseek+0x316>
 800e350:	68bb      	ldr	r3, [r7, #8]
 800e352:	695b      	ldr	r3, [r3, #20]
 800e354:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e356:	429a      	cmp	r2, r3
 800e358:	d304      	bcc.n	800e364 <f_lseek+0x320>
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	2202      	movs	r2, #2
 800e35e:	755a      	strb	r2, [r3, #21]
 800e360:	2302      	movs	r3, #2
 800e362:	e074      	b.n	800e44e <f_lseek+0x40a>
					fp->clust = clst;
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e368:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800e36a:	683a      	ldr	r2, [r7, #0]
 800e36c:	69fb      	ldr	r3, [r7, #28]
 800e36e:	429a      	cmp	r2, r3
 800e370:	d8c0      	bhi.n	800e2f4 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	699a      	ldr	r2, [r3, #24]
 800e376:	683b      	ldr	r3, [r7, #0]
 800e378:	441a      	add	r2, r3
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800e37e:	683b      	ldr	r3, [r7, #0]
 800e380:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e384:	2b00      	cmp	r3, #0
 800e386:	d012      	beq.n	800e3ae <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800e388:	68bb      	ldr	r3, [r7, #8]
 800e38a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800e38c:	4618      	mov	r0, r3
 800e38e:	f7fd ffad 	bl	800c2ec <clust2sect>
 800e392:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800e394:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e396:	2b00      	cmp	r3, #0
 800e398:	d104      	bne.n	800e3a4 <f_lseek+0x360>
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	2202      	movs	r2, #2
 800e39e:	755a      	strb	r2, [r3, #21]
 800e3a0:	2302      	movs	r3, #2
 800e3a2:	e054      	b.n	800e44e <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800e3a4:	683b      	ldr	r3, [r7, #0]
 800e3a6:	0a5b      	lsrs	r3, r3, #9
 800e3a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e3aa:	4413      	add	r3, r2
 800e3ac:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	699a      	ldr	r2, [r3, #24]
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	68db      	ldr	r3, [r3, #12]
 800e3b6:	429a      	cmp	r2, r3
 800e3b8:	d90a      	bls.n	800e3d0 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	699a      	ldr	r2, [r3, #24]
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	7d1b      	ldrb	r3, [r3, #20]
 800e3c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e3ca:	b2da      	uxtb	r2, r3
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	699b      	ldr	r3, [r3, #24]
 800e3d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d036      	beq.n	800e44a <f_lseek+0x406>
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	6a1b      	ldr	r3, [r3, #32]
 800e3e0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e3e2:	429a      	cmp	r2, r3
 800e3e4:	d031      	beq.n	800e44a <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	7d1b      	ldrb	r3, [r3, #20]
 800e3ea:	b25b      	sxtb	r3, r3
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	da18      	bge.n	800e422 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e3f0:	68bb      	ldr	r3, [r7, #8]
 800e3f2:	7858      	ldrb	r0, [r3, #1]
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	6a1a      	ldr	r2, [r3, #32]
 800e3fe:	2301      	movs	r3, #1
 800e400:	f7fd fbea 	bl	800bbd8 <disk_write>
 800e404:	4603      	mov	r3, r0
 800e406:	2b00      	cmp	r3, #0
 800e408:	d004      	beq.n	800e414 <f_lseek+0x3d0>
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	2201      	movs	r2, #1
 800e40e:	755a      	strb	r2, [r3, #21]
 800e410:	2301      	movs	r3, #1
 800e412:	e01c      	b.n	800e44e <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	7d1b      	ldrb	r3, [r3, #20]
 800e418:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e41c:	b2da      	uxtb	r2, r3
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800e422:	68bb      	ldr	r3, [r7, #8]
 800e424:	7858      	ldrb	r0, [r3, #1]
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e42c:	2301      	movs	r3, #1
 800e42e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e430:	f7fd fbb2 	bl	800bb98 <disk_read>
 800e434:	4603      	mov	r3, r0
 800e436:	2b00      	cmp	r3, #0
 800e438:	d004      	beq.n	800e444 <f_lseek+0x400>
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	2201      	movs	r2, #1
 800e43e:	755a      	strb	r2, [r3, #21]
 800e440:	2301      	movs	r3, #1
 800e442:	e004      	b.n	800e44e <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e448:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800e44a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800e44e:	4618      	mov	r0, r3
 800e450:	3740      	adds	r7, #64	@ 0x40
 800e452:	46bd      	mov	sp, r7
 800e454:	bd80      	pop	{r7, pc}
	...

0800e458 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 800e458:	b590      	push	{r4, r7, lr}
 800e45a:	b09d      	sub	sp, #116	@ 0x74
 800e45c:	af00      	add	r7, sp, #0
 800e45e:	60f8      	str	r0, [r7, #12]
 800e460:	607a      	str	r2, [r7, #4]
 800e462:	603b      	str	r3, [r7, #0]
 800e464:	460b      	mov	r3, r1
 800e466:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 800e468:	2301      	movs	r3, #1
 800e46a:	647b      	str	r3, [r7, #68]	@ 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 800e46c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e470:	643b      	str	r3, [r7, #64]	@ 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800e472:	f107 030c 	add.w	r3, r7, #12
 800e476:	4618      	mov	r0, r3
 800e478:	f7fe fd6b 	bl	800cf52 <get_ldnumber>
 800e47c:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800e47e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e480:	2b00      	cmp	r3, #0
 800e482:	da02      	bge.n	800e48a <f_mkfs+0x32>
 800e484:	230b      	movs	r3, #11
 800e486:	f000 bc0d 	b.w	800eca4 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 800e48a:	4a94      	ldr	r2, [pc, #592]	@ (800e6dc <f_mkfs+0x284>)
 800e48c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e48e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e492:	2b00      	cmp	r3, #0
 800e494:	d005      	beq.n	800e4a2 <f_mkfs+0x4a>
 800e496:	4a91      	ldr	r2, [pc, #580]	@ (800e6dc <f_mkfs+0x284>)
 800e498:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e49a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e49e:	2200      	movs	r2, #0
 800e4a0:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 800e4a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e4a4:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 800e4a8:	2300      	movs	r3, #0
 800e4aa:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 800e4ae:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800e4b2:	4618      	mov	r0, r3
 800e4b4:	f7fd fb4a 	bl	800bb4c <disk_initialize>
 800e4b8:	4603      	mov	r3, r0
 800e4ba:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 800e4be:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800e4c2:	f003 0301 	and.w	r3, r3, #1
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d001      	beq.n	800e4ce <f_mkfs+0x76>
 800e4ca:	2303      	movs	r3, #3
 800e4cc:	e3ea      	b.n	800eca4 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 800e4ce:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800e4d2:	f003 0304 	and.w	r3, r3, #4
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d001      	beq.n	800e4de <f_mkfs+0x86>
 800e4da:	230a      	movs	r3, #10
 800e4dc:	e3e2      	b.n	800eca4 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 800e4de:	f107 0214 	add.w	r2, r7, #20
 800e4e2:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800e4e6:	2103      	movs	r1, #3
 800e4e8:	4618      	mov	r0, r3
 800e4ea:	f7fd fb95 	bl	800bc18 <disk_ioctl>
 800e4ee:	4603      	mov	r3, r0
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d10c      	bne.n	800e50e <f_mkfs+0xb6>
 800e4f4:	697b      	ldr	r3, [r7, #20]
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d009      	beq.n	800e50e <f_mkfs+0xb6>
 800e4fa:	697b      	ldr	r3, [r7, #20]
 800e4fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e500:	d805      	bhi.n	800e50e <f_mkfs+0xb6>
 800e502:	697b      	ldr	r3, [r7, #20]
 800e504:	1e5a      	subs	r2, r3, #1
 800e506:	697b      	ldr	r3, [r7, #20]
 800e508:	4013      	ands	r3, r2
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d001      	beq.n	800e512 <f_mkfs+0xba>
 800e50e:	2301      	movs	r3, #1
 800e510:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 800e512:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e516:	86fb      	strh	r3, [r7, #54]	@ 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d003      	beq.n	800e526 <f_mkfs+0xce>
 800e51e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e520:	687a      	ldr	r2, [r7, #4]
 800e522:	429a      	cmp	r2, r3
 800e524:	d309      	bcc.n	800e53a <f_mkfs+0xe2>
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e52c:	d805      	bhi.n	800e53a <f_mkfs+0xe2>
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	1e5a      	subs	r2, r3, #1
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	4013      	ands	r3, r2
 800e536:	2b00      	cmp	r3, #0
 800e538:	d001      	beq.n	800e53e <f_mkfs+0xe6>
 800e53a:	2313      	movs	r3, #19
 800e53c:	e3b2      	b.n	800eca4 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 800e53e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e540:	687a      	ldr	r2, [r7, #4]
 800e542:	fbb2 f3f3 	udiv	r3, r2, r3
 800e546:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 800e548:	683b      	ldr	r3, [r7, #0]
 800e54a:	633b      	str	r3, [r7, #48]	@ 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 800e54c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e54e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800e552:	fbb2 f3f3 	udiv	r3, r2, r3
 800e556:	62fb      	str	r3, [r7, #44]	@ 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 800e558:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800e55a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e55c:	fb02 f303 	mul.w	r3, r2, r3
 800e560:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 800e562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e564:	2b00      	cmp	r3, #0
 800e566:	d101      	bne.n	800e56c <f_mkfs+0x114>
 800e568:	230e      	movs	r3, #14
 800e56a:	e39b      	b.n	800eca4 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 800e56c:	f107 0210 	add.w	r2, r7, #16
 800e570:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800e574:	2101      	movs	r1, #1
 800e576:	4618      	mov	r0, r3
 800e578:	f7fd fb4e 	bl	800bc18 <disk_ioctl>
 800e57c:	4603      	mov	r3, r0
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d001      	beq.n	800e586 <f_mkfs+0x12e>
 800e582:	2301      	movs	r3, #1
 800e584:	e38e      	b.n	800eca4 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 800e586:	7afb      	ldrb	r3, [r7, #11]
 800e588:	f003 0308 	and.w	r3, r3, #8
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d001      	beq.n	800e594 <f_mkfs+0x13c>
 800e590:	2300      	movs	r3, #0
 800e592:	e000      	b.n	800e596 <f_mkfs+0x13e>
 800e594:	233f      	movs	r3, #63	@ 0x3f
 800e596:	627b      	str	r3, [r7, #36]	@ 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 800e598:	693b      	ldr	r3, [r7, #16]
 800e59a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e59c:	429a      	cmp	r2, r3
 800e59e:	d901      	bls.n	800e5a4 <f_mkfs+0x14c>
 800e5a0:	230e      	movs	r3, #14
 800e5a2:	e37f      	b.n	800eca4 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 800e5a4:	693a      	ldr	r2, [r7, #16]
 800e5a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5a8:	1ad3      	subs	r3, r2, r3
 800e5aa:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 800e5ac:	693b      	ldr	r3, [r7, #16]
 800e5ae:	2b7f      	cmp	r3, #127	@ 0x7f
 800e5b0:	d801      	bhi.n	800e5b6 <f_mkfs+0x15e>
 800e5b2:	230e      	movs	r3, #14
 800e5b4:	e376      	b.n	800eca4 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	2b80      	cmp	r3, #128	@ 0x80
 800e5ba:	d901      	bls.n	800e5c0 <f_mkfs+0x168>
 800e5bc:	2313      	movs	r3, #19
 800e5be:	e371      	b.n	800eca4 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 800e5c0:	7afb      	ldrb	r3, [r7, #11]
 800e5c2:	f003 0302 	and.w	r3, r3, #2
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d00d      	beq.n	800e5e6 <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 800e5ca:	7afb      	ldrb	r3, [r7, #11]
 800e5cc:	f003 0307 	and.w	r3, r3, #7
 800e5d0:	2b02      	cmp	r3, #2
 800e5d2:	d004      	beq.n	800e5de <f_mkfs+0x186>
 800e5d4:	7afb      	ldrb	r3, [r7, #11]
 800e5d6:	f003 0301 	and.w	r3, r3, #1
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d103      	bne.n	800e5e6 <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 800e5de:	2303      	movs	r3, #3
 800e5e0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800e5e4:	e009      	b.n	800e5fa <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 800e5e6:	7afb      	ldrb	r3, [r7, #11]
 800e5e8:	f003 0301 	and.w	r3, r3, #1
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d101      	bne.n	800e5f4 <f_mkfs+0x19c>
 800e5f0:	2313      	movs	r3, #19
 800e5f2:	e357      	b.n	800eca4 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 800e5f4:	2302      	movs	r3, #2
 800e5f6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	653b      	str	r3, [r7, #80]	@ 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 800e5fe:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800e602:	2b03      	cmp	r3, #3
 800e604:	d13c      	bne.n	800e680 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 800e606:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d11b      	bne.n	800e644 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800e60c:	693b      	ldr	r3, [r7, #16]
 800e60e:	0c5b      	lsrs	r3, r3, #17
 800e610:	65fb      	str	r3, [r7, #92]	@ 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800e612:	2300      	movs	r3, #0
 800e614:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e616:	2301      	movs	r3, #1
 800e618:	653b      	str	r3, [r7, #80]	@ 0x50
 800e61a:	e005      	b.n	800e628 <f_mkfs+0x1d0>
 800e61c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e61e:	3301      	adds	r3, #1
 800e620:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e622:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e624:	005b      	lsls	r3, r3, #1
 800e626:	653b      	str	r3, [r7, #80]	@ 0x50
 800e628:	4a2d      	ldr	r2, [pc, #180]	@ (800e6e0 <f_mkfs+0x288>)
 800e62a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e62c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e630:	2b00      	cmp	r3, #0
 800e632:	d007      	beq.n	800e644 <f_mkfs+0x1ec>
 800e634:	4a2a      	ldr	r2, [pc, #168]	@ (800e6e0 <f_mkfs+0x288>)
 800e636:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e638:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e63c:	461a      	mov	r2, r3
 800e63e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e640:	4293      	cmp	r3, r2
 800e642:	d2eb      	bcs.n	800e61c <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 800e644:	693a      	ldr	r2, [r7, #16]
 800e646:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e648:	fbb2 f3f3 	udiv	r3, r2, r3
 800e64c:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800e64e:	6a3b      	ldr	r3, [r7, #32]
 800e650:	3302      	adds	r3, #2
 800e652:	009a      	lsls	r2, r3, #2
 800e654:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e656:	4413      	add	r3, r2
 800e658:	1e5a      	subs	r2, r3, #1
 800e65a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e65c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e660:	66bb      	str	r3, [r7, #104]	@ 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 800e662:	2320      	movs	r3, #32
 800e664:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_dir = 0;		/* No static directory */
 800e666:	2300      	movs	r3, #0
 800e668:	66fb      	str	r3, [r7, #108]	@ 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 800e66a:	6a3b      	ldr	r3, [r7, #32]
 800e66c:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800e670:	4293      	cmp	r3, r2
 800e672:	d903      	bls.n	800e67c <f_mkfs+0x224>
 800e674:	6a3b      	ldr	r3, [r7, #32]
 800e676:	4a1b      	ldr	r2, [pc, #108]	@ (800e6e4 <f_mkfs+0x28c>)
 800e678:	4293      	cmp	r3, r2
 800e67a:	d952      	bls.n	800e722 <f_mkfs+0x2ca>
 800e67c:	230e      	movs	r3, #14
 800e67e:	e311      	b.n	800eca4 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 800e680:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e682:	2b00      	cmp	r3, #0
 800e684:	d11b      	bne.n	800e6be <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800e686:	693b      	ldr	r3, [r7, #16]
 800e688:	0b1b      	lsrs	r3, r3, #12
 800e68a:	65fb      	str	r3, [r7, #92]	@ 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800e68c:	2300      	movs	r3, #0
 800e68e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e690:	2301      	movs	r3, #1
 800e692:	653b      	str	r3, [r7, #80]	@ 0x50
 800e694:	e005      	b.n	800e6a2 <f_mkfs+0x24a>
 800e696:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e698:	3301      	adds	r3, #1
 800e69a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e69c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e69e:	005b      	lsls	r3, r3, #1
 800e6a0:	653b      	str	r3, [r7, #80]	@ 0x50
 800e6a2:	4a11      	ldr	r2, [pc, #68]	@ (800e6e8 <f_mkfs+0x290>)
 800e6a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e6a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d007      	beq.n	800e6be <f_mkfs+0x266>
 800e6ae:	4a0e      	ldr	r2, [pc, #56]	@ (800e6e8 <f_mkfs+0x290>)
 800e6b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e6b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e6b6:	461a      	mov	r2, r3
 800e6b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e6ba:	4293      	cmp	r3, r2
 800e6bc:	d2eb      	bcs.n	800e696 <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 800e6be:	693a      	ldr	r2, [r7, #16]
 800e6c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e6c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800e6c6:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 800e6c8:	6a3b      	ldr	r3, [r7, #32]
 800e6ca:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800e6ce:	4293      	cmp	r3, r2
 800e6d0:	d90c      	bls.n	800e6ec <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800e6d2:	6a3b      	ldr	r3, [r7, #32]
 800e6d4:	3302      	adds	r3, #2
 800e6d6:	005b      	lsls	r3, r3, #1
 800e6d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e6da:	e012      	b.n	800e702 <f_mkfs+0x2aa>
 800e6dc:	2002e67c 	.word	0x2002e67c
 800e6e0:	08017aa8 	.word	0x08017aa8
 800e6e4:	0ffffff5 	.word	0x0ffffff5
 800e6e8:	08017ab8 	.word	0x08017ab8
				} else {
					fmt = FS_FAT12;
 800e6ec:	2301      	movs	r3, #1
 800e6ee:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800e6f2:	6a3a      	ldr	r2, [r7, #32]
 800e6f4:	4613      	mov	r3, r2
 800e6f6:	005b      	lsls	r3, r3, #1
 800e6f8:	4413      	add	r3, r2
 800e6fa:	3301      	adds	r3, #1
 800e6fc:	085b      	lsrs	r3, r3, #1
 800e6fe:	3303      	adds	r3, #3
 800e700:	65fb      	str	r3, [r7, #92]	@ 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800e702:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800e704:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e706:	4413      	add	r3, r2
 800e708:	1e5a      	subs	r2, r3, #1
 800e70a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e70c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e710:	66bb      	str	r3, [r7, #104]	@ 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 800e712:	2301      	movs	r3, #1
 800e714:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 800e716:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e718:	015a      	lsls	r2, r3, #5
 800e71a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e71c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e720:	66fb      	str	r3, [r7, #108]	@ 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800e722:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e724:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e726:	4413      	add	r3, r2
 800e728:	65bb      	str	r3, [r7, #88]	@ 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 800e72a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e72c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e72e:	fb03 f202 	mul.w	r2, r3, r2
 800e732:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e734:	4413      	add	r3, r2
 800e736:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800e738:	4413      	add	r3, r2
 800e73a:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 800e73c:	697a      	ldr	r2, [r7, #20]
 800e73e:	69fb      	ldr	r3, [r7, #28]
 800e740:	4413      	add	r3, r2
 800e742:	1e5a      	subs	r2, r3, #1
 800e744:	697b      	ldr	r3, [r7, #20]
 800e746:	425b      	negs	r3, r3
 800e748:	401a      	ands	r2, r3
 800e74a:	69fb      	ldr	r3, [r7, #28]
 800e74c:	1ad3      	subs	r3, r2, r3
 800e74e:	65fb      	str	r3, [r7, #92]	@ 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 800e750:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800e754:	2b03      	cmp	r3, #3
 800e756:	d108      	bne.n	800e76a <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 800e758:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e75a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e75c:	4413      	add	r3, r2
 800e75e:	657b      	str	r3, [r7, #84]	@ 0x54
 800e760:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e762:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e764:	4413      	add	r3, r2
 800e766:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e768:	e006      	b.n	800e778 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 800e76a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800e76c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e76e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e772:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800e774:	4413      	add	r3, r2
 800e776:	66bb      	str	r3, [r7, #104]	@ 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 800e778:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e77a:	011a      	lsls	r2, r3, #4
 800e77c:	69fb      	ldr	r3, [r7, #28]
 800e77e:	441a      	add	r2, r3
 800e780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e782:	1ad2      	subs	r2, r2, r3
 800e784:	693b      	ldr	r3, [r7, #16]
 800e786:	429a      	cmp	r2, r3
 800e788:	d901      	bls.n	800e78e <f_mkfs+0x336>
 800e78a:	230e      	movs	r3, #14
 800e78c:	e28a      	b.n	800eca4 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 800e78e:	693a      	ldr	r2, [r7, #16]
 800e790:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e792:	1ad2      	subs	r2, r2, r3
 800e794:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e796:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e798:	fb01 f303 	mul.w	r3, r1, r3
 800e79c:	1ad2      	subs	r2, r2, r3
 800e79e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e7a0:	1ad2      	subs	r2, r2, r3
 800e7a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e7a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800e7a8:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 800e7aa:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800e7ae:	2b03      	cmp	r3, #3
 800e7b0:	d10f      	bne.n	800e7d2 <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 800e7b2:	6a3b      	ldr	r3, [r7, #32]
 800e7b4:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800e7b8:	4293      	cmp	r3, r2
 800e7ba:	d80a      	bhi.n	800e7d2 <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d105      	bne.n	800e7ce <f_mkfs+0x376>
 800e7c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e7c4:	085b      	lsrs	r3, r3, #1
 800e7c6:	607b      	str	r3, [r7, #4]
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d144      	bne.n	800e858 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 800e7ce:	230e      	movs	r3, #14
 800e7d0:	e268      	b.n	800eca4 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 800e7d2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800e7d6:	2b02      	cmp	r3, #2
 800e7d8:	d133      	bne.n	800e842 <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800e7da:	6a3b      	ldr	r3, [r7, #32]
 800e7dc:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800e7e0:	4293      	cmp	r3, r2
 800e7e2:	d91e      	bls.n	800e822 <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d107      	bne.n	800e7fa <f_mkfs+0x3a2>
 800e7ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e7ec:	005b      	lsls	r3, r3, #1
 800e7ee:	2b40      	cmp	r3, #64	@ 0x40
 800e7f0:	d803      	bhi.n	800e7fa <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 800e7f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e7f4:	005b      	lsls	r3, r3, #1
 800e7f6:	607b      	str	r3, [r7, #4]
 800e7f8:	e033      	b.n	800e862 <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 800e7fa:	7afb      	ldrb	r3, [r7, #11]
 800e7fc:	f003 0302 	and.w	r3, r3, #2
 800e800:	2b00      	cmp	r3, #0
 800e802:	d003      	beq.n	800e80c <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800e804:	2303      	movs	r3, #3
 800e806:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800e80a:	e02a      	b.n	800e862 <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d105      	bne.n	800e81e <f_mkfs+0x3c6>
 800e812:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e814:	005b      	lsls	r3, r3, #1
 800e816:	607b      	str	r3, [r7, #4]
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	2b80      	cmp	r3, #128	@ 0x80
 800e81c:	d91e      	bls.n	800e85c <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 800e81e:	230e      	movs	r3, #14
 800e820:	e240      	b.n	800eca4 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800e822:	6a3b      	ldr	r3, [r7, #32]
 800e824:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800e828:	4293      	cmp	r3, r2
 800e82a:	d80a      	bhi.n	800e842 <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d105      	bne.n	800e83e <f_mkfs+0x3e6>
 800e832:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e834:	005b      	lsls	r3, r3, #1
 800e836:	607b      	str	r3, [r7, #4]
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	2b80      	cmp	r3, #128	@ 0x80
 800e83c:	d910      	bls.n	800e860 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 800e83e:	230e      	movs	r3, #14
 800e840:	e230      	b.n	800eca4 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 800e842:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800e846:	2b01      	cmp	r3, #1
 800e848:	d10c      	bne.n	800e864 <f_mkfs+0x40c>
 800e84a:	6a3b      	ldr	r3, [r7, #32]
 800e84c:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800e850:	4293      	cmp	r3, r2
 800e852:	d907      	bls.n	800e864 <f_mkfs+0x40c>
 800e854:	230e      	movs	r3, #14
 800e856:	e225      	b.n	800eca4 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800e858:	bf00      	nop
 800e85a:	e6ce      	b.n	800e5fa <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800e85c:	bf00      	nop
 800e85e:	e6cc      	b.n	800e5fa <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800e860:	bf00      	nop
			pau = au;
 800e862:	e6ca      	b.n	800e5fa <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 800e864:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 800e866:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e868:	461a      	mov	r2, r3
 800e86a:	2100      	movs	r1, #0
 800e86c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e86e:	f7fd fa94 	bl	800bd9a <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 800e872:	220b      	movs	r2, #11
 800e874:	49b2      	ldr	r1, [pc, #712]	@ (800eb40 <f_mkfs+0x6e8>)
 800e876:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e878:	f7fd fa6e 	bl	800bd58 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800e87c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e87e:	330b      	adds	r3, #11
 800e880:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800e882:	4611      	mov	r1, r2
 800e884:	4618      	mov	r0, r3
 800e886:	f7fd fa20 	bl	800bcca <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800e88a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e88c:	330d      	adds	r3, #13
 800e88e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e890:	b2d2      	uxtb	r2, r2
 800e892:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800e894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e896:	330e      	adds	r3, #14
 800e898:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e89a:	b292      	uxth	r2, r2
 800e89c:	4611      	mov	r1, r2
 800e89e:	4618      	mov	r0, r3
 800e8a0:	f7fd fa13 	bl	800bcca <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 800e8a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8a6:	3310      	adds	r3, #16
 800e8a8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e8aa:	b2d2      	uxtb	r2, r2
 800e8ac:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 800e8ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8b0:	f103 0211 	add.w	r2, r3, #17
 800e8b4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800e8b8:	2b03      	cmp	r3, #3
 800e8ba:	d002      	beq.n	800e8c2 <f_mkfs+0x46a>
 800e8bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e8be:	b29b      	uxth	r3, r3
 800e8c0:	e000      	b.n	800e8c4 <f_mkfs+0x46c>
 800e8c2:	2300      	movs	r3, #0
 800e8c4:	4619      	mov	r1, r3
 800e8c6:	4610      	mov	r0, r2
 800e8c8:	f7fd f9ff 	bl	800bcca <st_word>
		if (sz_vol < 0x10000) {
 800e8cc:	693b      	ldr	r3, [r7, #16]
 800e8ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e8d2:	d208      	bcs.n	800e8e6 <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800e8d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8d6:	3313      	adds	r3, #19
 800e8d8:	693a      	ldr	r2, [r7, #16]
 800e8da:	b292      	uxth	r2, r2
 800e8dc:	4611      	mov	r1, r2
 800e8de:	4618      	mov	r0, r3
 800e8e0:	f7fd f9f3 	bl	800bcca <st_word>
 800e8e4:	e006      	b.n	800e8f4 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 800e8e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8e8:	3320      	adds	r3, #32
 800e8ea:	693a      	ldr	r2, [r7, #16]
 800e8ec:	4611      	mov	r1, r2
 800e8ee:	4618      	mov	r0, r3
 800e8f0:	f7fd fa06 	bl	800bd00 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800e8f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8f6:	3315      	adds	r3, #21
 800e8f8:	22f8      	movs	r2, #248	@ 0xf8
 800e8fa:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800e8fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8fe:	3318      	adds	r3, #24
 800e900:	213f      	movs	r1, #63	@ 0x3f
 800e902:	4618      	mov	r0, r3
 800e904:	f7fd f9e1 	bl	800bcca <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800e908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e90a:	331a      	adds	r3, #26
 800e90c:	21ff      	movs	r1, #255	@ 0xff
 800e90e:	4618      	mov	r0, r3
 800e910:	f7fd f9db 	bl	800bcca <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 800e914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e916:	331c      	adds	r3, #28
 800e918:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e91a:	4618      	mov	r0, r3
 800e91c:	f7fd f9f0 	bl	800bd00 <st_dword>
		if (fmt == FS_FAT32) {
 800e920:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800e924:	2b03      	cmp	r3, #3
 800e926:	d131      	bne.n	800e98c <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 800e928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e92a:	f103 0443 	add.w	r4, r3, #67	@ 0x43
 800e92e:	f7fc feb1 	bl	800b694 <get_fattime>
 800e932:	4603      	mov	r3, r0
 800e934:	4619      	mov	r1, r3
 800e936:	4620      	mov	r0, r4
 800e938:	f7fd f9e2 	bl	800bd00 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800e93c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e93e:	3324      	adds	r3, #36	@ 0x24
 800e940:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800e942:	4618      	mov	r0, r3
 800e944:	f7fd f9dc 	bl	800bd00 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800e948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e94a:	332c      	adds	r3, #44	@ 0x2c
 800e94c:	2102      	movs	r1, #2
 800e94e:	4618      	mov	r0, r3
 800e950:	f7fd f9d6 	bl	800bd00 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800e954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e956:	3330      	adds	r3, #48	@ 0x30
 800e958:	2101      	movs	r1, #1
 800e95a:	4618      	mov	r0, r3
 800e95c:	f7fd f9b5 	bl	800bcca <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800e960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e962:	3332      	adds	r3, #50	@ 0x32
 800e964:	2106      	movs	r1, #6
 800e966:	4618      	mov	r0, r3
 800e968:	f7fd f9af 	bl	800bcca <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800e96c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e96e:	3340      	adds	r3, #64	@ 0x40
 800e970:	2280      	movs	r2, #128	@ 0x80
 800e972:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800e974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e976:	3342      	adds	r3, #66	@ 0x42
 800e978:	2229      	movs	r2, #41	@ 0x29
 800e97a:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800e97c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e97e:	3347      	adds	r3, #71	@ 0x47
 800e980:	2213      	movs	r2, #19
 800e982:	4970      	ldr	r1, [pc, #448]	@ (800eb44 <f_mkfs+0x6ec>)
 800e984:	4618      	mov	r0, r3
 800e986:	f7fd f9e7 	bl	800bd58 <mem_cpy>
 800e98a:	e020      	b.n	800e9ce <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 800e98c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e98e:	f103 0427 	add.w	r4, r3, #39	@ 0x27
 800e992:	f7fc fe7f 	bl	800b694 <get_fattime>
 800e996:	4603      	mov	r3, r0
 800e998:	4619      	mov	r1, r3
 800e99a:	4620      	mov	r0, r4
 800e99c:	f7fd f9b0 	bl	800bd00 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800e9a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9a2:	3316      	adds	r3, #22
 800e9a4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800e9a6:	b292      	uxth	r2, r2
 800e9a8:	4611      	mov	r1, r2
 800e9aa:	4618      	mov	r0, r3
 800e9ac:	f7fd f98d 	bl	800bcca <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800e9b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9b2:	3324      	adds	r3, #36	@ 0x24
 800e9b4:	2280      	movs	r2, #128	@ 0x80
 800e9b6:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800e9b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9ba:	3326      	adds	r3, #38	@ 0x26
 800e9bc:	2229      	movs	r2, #41	@ 0x29
 800e9be:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800e9c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9c2:	332b      	adds	r3, #43	@ 0x2b
 800e9c4:	2213      	movs	r2, #19
 800e9c6:	4960      	ldr	r1, [pc, #384]	@ (800eb48 <f_mkfs+0x6f0>)
 800e9c8:	4618      	mov	r0, r3
 800e9ca:	f7fd f9c5 	bl	800bd58 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800e9ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9d0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800e9d4:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800e9d8:	4618      	mov	r0, r3
 800e9da:	f7fd f976 	bl	800bcca <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 800e9de:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 800e9e2:	2301      	movs	r3, #1
 800e9e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e9e6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e9e8:	f7fd f8f6 	bl	800bbd8 <disk_write>
 800e9ec:	4603      	mov	r3, r0
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d001      	beq.n	800e9f6 <f_mkfs+0x59e>
 800e9f2:	2301      	movs	r3, #1
 800e9f4:	e156      	b.n	800eca4 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 800e9f6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800e9fa:	2b03      	cmp	r3, #3
 800e9fc:	d140      	bne.n	800ea80 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800e9fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea00:	1d9a      	adds	r2, r3, #6
 800ea02:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 800ea06:	2301      	movs	r3, #1
 800ea08:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ea0a:	f7fd f8e5 	bl	800bbd8 <disk_write>
			mem_set(buf, 0, ss);
 800ea0e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ea10:	461a      	mov	r2, r3
 800ea12:	2100      	movs	r1, #0
 800ea14:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ea16:	f7fd f9c0 	bl	800bd9a <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800ea1a:	494c      	ldr	r1, [pc, #304]	@ (800eb4c <f_mkfs+0x6f4>)
 800ea1c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ea1e:	f7fd f96f 	bl	800bd00 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 800ea22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea24:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800ea28:	4949      	ldr	r1, [pc, #292]	@ (800eb50 <f_mkfs+0x6f8>)
 800ea2a:	4618      	mov	r0, r3
 800ea2c:	f7fd f968 	bl	800bd00 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800ea30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea32:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800ea36:	6a3b      	ldr	r3, [r7, #32]
 800ea38:	3b01      	subs	r3, #1
 800ea3a:	4619      	mov	r1, r3
 800ea3c:	4610      	mov	r0, r2
 800ea3e:	f7fd f95f 	bl	800bd00 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800ea42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea44:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800ea48:	2102      	movs	r1, #2
 800ea4a:	4618      	mov	r0, r3
 800ea4c:	f7fd f958 	bl	800bd00 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800ea50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea52:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800ea56:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800ea5a:	4618      	mov	r0, r3
 800ea5c:	f7fd f935 	bl	800bcca <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800ea60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea62:	1dda      	adds	r2, r3, #7
 800ea64:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 800ea68:	2301      	movs	r3, #1
 800ea6a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ea6c:	f7fd f8b4 	bl	800bbd8 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800ea70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea72:	1c5a      	adds	r2, r3, #1
 800ea74:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 800ea78:	2301      	movs	r3, #1
 800ea7a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ea7c:	f7fd f8ac 	bl	800bbd8 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 800ea80:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ea82:	2100      	movs	r1, #0
 800ea84:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ea86:	f7fd f988 	bl	800bd9a <mem_set>
		sect = b_fat;		/* FAT start sector */
 800ea8a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ea8c:	667b      	str	r3, [r7, #100]	@ 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800ea8e:	2300      	movs	r3, #0
 800ea90:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ea92:	e04b      	b.n	800eb2c <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 800ea94:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800ea98:	2b03      	cmp	r3, #3
 800ea9a:	d113      	bne.n	800eac4 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 800ea9c:	f06f 0107 	mvn.w	r1, #7
 800eaa0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800eaa2:	f7fd f92d 	bl	800bd00 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 800eaa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eaa8:	3304      	adds	r3, #4
 800eaaa:	f04f 31ff 	mov.w	r1, #4294967295
 800eaae:	4618      	mov	r0, r3
 800eab0:	f7fd f926 	bl	800bd00 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 800eab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eab6:	3308      	adds	r3, #8
 800eab8:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 800eabc:	4618      	mov	r0, r3
 800eabe:	f7fd f91f 	bl	800bd00 <st_dword>
 800eac2:	e00b      	b.n	800eadc <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 800eac4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800eac8:	2b01      	cmp	r3, #1
 800eaca:	d101      	bne.n	800ead0 <f_mkfs+0x678>
 800eacc:	4b21      	ldr	r3, [pc, #132]	@ (800eb54 <f_mkfs+0x6fc>)
 800eace:	e001      	b.n	800ead4 <f_mkfs+0x67c>
 800ead0:	f06f 0307 	mvn.w	r3, #7
 800ead4:	4619      	mov	r1, r3
 800ead6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ead8:	f7fd f912 	bl	800bd00 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800eadc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800eade:	663b      	str	r3, [r7, #96]	@ 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800eae0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800eae2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eae4:	4293      	cmp	r3, r2
 800eae6:	bf28      	it	cs
 800eae8:	4613      	movcs	r3, r2
 800eaea:	65fb      	str	r3, [r7, #92]	@ 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800eaec:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 800eaf0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800eaf2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800eaf4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800eaf6:	f7fd f86f 	bl	800bbd8 <disk_write>
 800eafa:	4603      	mov	r3, r0
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d001      	beq.n	800eb04 <f_mkfs+0x6ac>
 800eb00:	2301      	movs	r3, #1
 800eb02:	e0cf      	b.n	800eca4 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 800eb04:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800eb06:	461a      	mov	r2, r3
 800eb08:	2100      	movs	r1, #0
 800eb0a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800eb0c:	f7fd f945 	bl	800bd9a <mem_set>
				sect += n; nsect -= n;
 800eb10:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800eb12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800eb14:	4413      	add	r3, r2
 800eb16:	667b      	str	r3, [r7, #100]	@ 0x64
 800eb18:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800eb1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800eb1c:	1ad3      	subs	r3, r2, r3
 800eb1e:	663b      	str	r3, [r7, #96]	@ 0x60
			} while (nsect);
 800eb20:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d1dc      	bne.n	800eae0 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800eb26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800eb28:	3301      	adds	r3, #1
 800eb2a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800eb2c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800eb2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eb30:	429a      	cmp	r2, r3
 800eb32:	d3af      	bcc.n	800ea94 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800eb34:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800eb38:	2b03      	cmp	r3, #3
 800eb3a:	d10d      	bne.n	800eb58 <f_mkfs+0x700>
 800eb3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800eb3e:	e00c      	b.n	800eb5a <f_mkfs+0x702>
 800eb40:	08017990 	.word	0x08017990
 800eb44:	0801799c 	.word	0x0801799c
 800eb48:	080179b0 	.word	0x080179b0
 800eb4c:	41615252 	.word	0x41615252
 800eb50:	61417272 	.word	0x61417272
 800eb54:	00fffff8 	.word	0x00fffff8
 800eb58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800eb5a:	663b      	str	r3, [r7, #96]	@ 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800eb5c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800eb5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb60:	4293      	cmp	r3, r2
 800eb62:	bf28      	it	cs
 800eb64:	4613      	movcs	r3, r2
 800eb66:	65fb      	str	r3, [r7, #92]	@ 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800eb68:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 800eb6c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800eb6e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800eb70:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800eb72:	f7fd f831 	bl	800bbd8 <disk_write>
 800eb76:	4603      	mov	r3, r0
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d001      	beq.n	800eb80 <f_mkfs+0x728>
 800eb7c:	2301      	movs	r3, #1
 800eb7e:	e091      	b.n	800eca4 <f_mkfs+0x84c>
			sect += n; nsect -= n;
 800eb80:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800eb82:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800eb84:	4413      	add	r3, r2
 800eb86:	667b      	str	r3, [r7, #100]	@ 0x64
 800eb88:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800eb8a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800eb8c:	1ad3      	subs	r3, r2, r3
 800eb8e:	663b      	str	r3, [r7, #96]	@ 0x60
		} while (nsect);
 800eb90:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d1e2      	bne.n	800eb5c <f_mkfs+0x704>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 800eb96:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800eb9a:	2b03      	cmp	r3, #3
 800eb9c:	d103      	bne.n	800eba6 <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 800eb9e:	230c      	movs	r3, #12
 800eba0:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 800eba4:	e010      	b.n	800ebc8 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 800eba6:	693b      	ldr	r3, [r7, #16]
 800eba8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ebac:	d303      	bcc.n	800ebb6 <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 800ebae:	2306      	movs	r3, #6
 800ebb0:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 800ebb4:	e008      	b.n	800ebc8 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 800ebb6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800ebba:	2b02      	cmp	r3, #2
 800ebbc:	d101      	bne.n	800ebc2 <f_mkfs+0x76a>
 800ebbe:	2304      	movs	r3, #4
 800ebc0:	e000      	b.n	800ebc4 <f_mkfs+0x76c>
 800ebc2:	2301      	movs	r3, #1
 800ebc4:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 800ebc8:	7afb      	ldrb	r3, [r7, #11]
 800ebca:	f003 0308 	and.w	r3, r3, #8
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d15b      	bne.n	800ec8a <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 800ebd2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ebd4:	461a      	mov	r2, r3
 800ebd6:	2100      	movs	r1, #0
 800ebd8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ebda:	f7fd f8de 	bl	800bd9a <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800ebde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebe0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800ebe4:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800ebe8:	4618      	mov	r0, r3
 800ebea:	f7fd f86e 	bl	800bcca <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 800ebee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebf0:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800ebf4:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 800ebf6:	69bb      	ldr	r3, [r7, #24]
 800ebf8:	2200      	movs	r2, #0
 800ebfa:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 800ebfc:	69bb      	ldr	r3, [r7, #24]
 800ebfe:	3301      	adds	r3, #1
 800ec00:	2201      	movs	r2, #1
 800ec02:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 800ec04:	69bb      	ldr	r3, [r7, #24]
 800ec06:	3302      	adds	r3, #2
 800ec08:	2201      	movs	r2, #1
 800ec0a:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 800ec0c:	69bb      	ldr	r3, [r7, #24]
 800ec0e:	3303      	adds	r3, #3
 800ec10:	2200      	movs	r2, #0
 800ec12:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 800ec14:	69bb      	ldr	r3, [r7, #24]
 800ec16:	3304      	adds	r3, #4
 800ec18:	f897 204e 	ldrb.w	r2, [r7, #78]	@ 0x4e
 800ec1c:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 800ec1e:	693a      	ldr	r2, [r7, #16]
 800ec20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec22:	441a      	add	r2, r3
 800ec24:	4b21      	ldr	r3, [pc, #132]	@ (800ecac <f_mkfs+0x854>)
 800ec26:	fba3 1302 	umull	r1, r3, r3, r2
 800ec2a:	1ad2      	subs	r2, r2, r3
 800ec2c:	0852      	lsrs	r2, r2, #1
 800ec2e:	4413      	add	r3, r2
 800ec30:	0b5b      	lsrs	r3, r3, #13
 800ec32:	65fb      	str	r3, [r7, #92]	@ 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 800ec34:	69bb      	ldr	r3, [r7, #24]
 800ec36:	3305      	adds	r3, #5
 800ec38:	22fe      	movs	r2, #254	@ 0xfe
 800ec3a:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 800ec3c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ec3e:	089b      	lsrs	r3, r3, #2
 800ec40:	b2da      	uxtb	r2, r3
 800ec42:	69bb      	ldr	r3, [r7, #24]
 800ec44:	3306      	adds	r3, #6
 800ec46:	f042 023f 	orr.w	r2, r2, #63	@ 0x3f
 800ec4a:	b2d2      	uxtb	r2, r2
 800ec4c:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 800ec4e:	69bb      	ldr	r3, [r7, #24]
 800ec50:	3307      	adds	r3, #7
 800ec52:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800ec54:	b2d2      	uxtb	r2, r2
 800ec56:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 800ec58:	69bb      	ldr	r3, [r7, #24]
 800ec5a:	3308      	adds	r3, #8
 800ec5c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ec5e:	4618      	mov	r0, r3
 800ec60:	f7fd f84e 	bl	800bd00 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 800ec64:	69bb      	ldr	r3, [r7, #24]
 800ec66:	330c      	adds	r3, #12
 800ec68:	693a      	ldr	r2, [r7, #16]
 800ec6a:	4611      	mov	r1, r2
 800ec6c:	4618      	mov	r0, r3
 800ec6e:	f7fd f847 	bl	800bd00 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800ec72:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 800ec76:	2301      	movs	r3, #1
 800ec78:	2200      	movs	r2, #0
 800ec7a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ec7c:	f7fc ffac 	bl	800bbd8 <disk_write>
 800ec80:	4603      	mov	r3, r0
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d001      	beq.n	800ec8a <f_mkfs+0x832>
 800ec86:	2301      	movs	r3, #1
 800ec88:	e00c      	b.n	800eca4 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 800ec8a:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800ec8e:	2200      	movs	r2, #0
 800ec90:	2100      	movs	r1, #0
 800ec92:	4618      	mov	r0, r3
 800ec94:	f7fc ffc0 	bl	800bc18 <disk_ioctl>
 800ec98:	4603      	mov	r3, r0
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d001      	beq.n	800eca2 <f_mkfs+0x84a>
 800ec9e:	2301      	movs	r3, #1
 800eca0:	e000      	b.n	800eca4 <f_mkfs+0x84c>

	return FR_OK;
 800eca2:	2300      	movs	r3, #0
}
 800eca4:	4618      	mov	r0, r3
 800eca6:	3774      	adds	r7, #116	@ 0x74
 800eca8:	46bd      	mov	sp, r7
 800ecaa:	bd90      	pop	{r4, r7, pc}
 800ecac:	0515565b 	.word	0x0515565b

0800ecb0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ecb0:	b480      	push	{r7}
 800ecb2:	b087      	sub	sp, #28
 800ecb4:	af00      	add	r7, sp, #0
 800ecb6:	60f8      	str	r0, [r7, #12]
 800ecb8:	60b9      	str	r1, [r7, #8]
 800ecba:	4613      	mov	r3, r2
 800ecbc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ecbe:	2301      	movs	r3, #1
 800ecc0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ecc2:	2300      	movs	r3, #0
 800ecc4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ecc6:	4b1f      	ldr	r3, [pc, #124]	@ (800ed44 <FATFS_LinkDriverEx+0x94>)
 800ecc8:	7a5b      	ldrb	r3, [r3, #9]
 800ecca:	b2db      	uxtb	r3, r3
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d131      	bne.n	800ed34 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ecd0:	4b1c      	ldr	r3, [pc, #112]	@ (800ed44 <FATFS_LinkDriverEx+0x94>)
 800ecd2:	7a5b      	ldrb	r3, [r3, #9]
 800ecd4:	b2db      	uxtb	r3, r3
 800ecd6:	461a      	mov	r2, r3
 800ecd8:	4b1a      	ldr	r3, [pc, #104]	@ (800ed44 <FATFS_LinkDriverEx+0x94>)
 800ecda:	2100      	movs	r1, #0
 800ecdc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ecde:	4b19      	ldr	r3, [pc, #100]	@ (800ed44 <FATFS_LinkDriverEx+0x94>)
 800ece0:	7a5b      	ldrb	r3, [r3, #9]
 800ece2:	b2db      	uxtb	r3, r3
 800ece4:	4a17      	ldr	r2, [pc, #92]	@ (800ed44 <FATFS_LinkDriverEx+0x94>)
 800ece6:	009b      	lsls	r3, r3, #2
 800ece8:	4413      	add	r3, r2
 800ecea:	68fa      	ldr	r2, [r7, #12]
 800ecec:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ecee:	4b15      	ldr	r3, [pc, #84]	@ (800ed44 <FATFS_LinkDriverEx+0x94>)
 800ecf0:	7a5b      	ldrb	r3, [r3, #9]
 800ecf2:	b2db      	uxtb	r3, r3
 800ecf4:	461a      	mov	r2, r3
 800ecf6:	4b13      	ldr	r3, [pc, #76]	@ (800ed44 <FATFS_LinkDriverEx+0x94>)
 800ecf8:	4413      	add	r3, r2
 800ecfa:	79fa      	ldrb	r2, [r7, #7]
 800ecfc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ecfe:	4b11      	ldr	r3, [pc, #68]	@ (800ed44 <FATFS_LinkDriverEx+0x94>)
 800ed00:	7a5b      	ldrb	r3, [r3, #9]
 800ed02:	b2db      	uxtb	r3, r3
 800ed04:	1c5a      	adds	r2, r3, #1
 800ed06:	b2d1      	uxtb	r1, r2
 800ed08:	4a0e      	ldr	r2, [pc, #56]	@ (800ed44 <FATFS_LinkDriverEx+0x94>)
 800ed0a:	7251      	strb	r1, [r2, #9]
 800ed0c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ed0e:	7dbb      	ldrb	r3, [r7, #22]
 800ed10:	3330      	adds	r3, #48	@ 0x30
 800ed12:	b2da      	uxtb	r2, r3
 800ed14:	68bb      	ldr	r3, [r7, #8]
 800ed16:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ed18:	68bb      	ldr	r3, [r7, #8]
 800ed1a:	3301      	adds	r3, #1
 800ed1c:	223a      	movs	r2, #58	@ 0x3a
 800ed1e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ed20:	68bb      	ldr	r3, [r7, #8]
 800ed22:	3302      	adds	r3, #2
 800ed24:	222f      	movs	r2, #47	@ 0x2f
 800ed26:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ed28:	68bb      	ldr	r3, [r7, #8]
 800ed2a:	3303      	adds	r3, #3
 800ed2c:	2200      	movs	r2, #0
 800ed2e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ed30:	2300      	movs	r3, #0
 800ed32:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ed34:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed36:	4618      	mov	r0, r3
 800ed38:	371c      	adds	r7, #28
 800ed3a:	46bd      	mov	sp, r7
 800ed3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed40:	4770      	bx	lr
 800ed42:	bf00      	nop
 800ed44:	2002e6a4 	.word	0x2002e6a4

0800ed48 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ed48:	b580      	push	{r7, lr}
 800ed4a:	b082      	sub	sp, #8
 800ed4c:	af00      	add	r7, sp, #0
 800ed4e:	6078      	str	r0, [r7, #4]
 800ed50:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ed52:	2200      	movs	r2, #0
 800ed54:	6839      	ldr	r1, [r7, #0]
 800ed56:	6878      	ldr	r0, [r7, #4]
 800ed58:	f7ff ffaa 	bl	800ecb0 <FATFS_LinkDriverEx>
 800ed5c:	4603      	mov	r3, r0
}
 800ed5e:	4618      	mov	r0, r3
 800ed60:	3708      	adds	r7, #8
 800ed62:	46bd      	mov	sp, r7
 800ed64:	bd80      	pop	{r7, pc}
	...

0800ed68 <network_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 800ed68:	b580      	push	{r7, lr}
 800ed6a:	b082      	sub	sp, #8
 800ed6c:	af00      	add	r7, sp, #0
 800ed6e:	6078      	str	r0, [r7, #4]
 800ed70:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 800ed72:	683a      	ldr	r2, [r7, #0]
 800ed74:	2101      	movs	r1, #1
 800ed76:	4831      	ldr	r0, [pc, #196]	@ (800ee3c <network_configure_activations+0xd4>)
 800ed78:	f001 fbe8 	bl	801054c <ai_platform_get_activations_map>
 800ed7c:	4603      	mov	r3, r0
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d051      	beq.n	800ee26 <network_configure_activations+0xbe>
    /* Updating activations (byte) offsets */
    
    serving_default_keras_tensor0_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800ed82:	4b2e      	ldr	r3, [pc, #184]	@ (800ee3c <network_configure_activations+0xd4>)
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	4a2e      	ldr	r2, [pc, #184]	@ (800ee40 <network_configure_activations+0xd8>)
 800ed88:	6093      	str	r3, [r2, #8]
    serving_default_keras_tensor0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800ed8a:	4b2c      	ldr	r3, [pc, #176]	@ (800ee3c <network_configure_activations+0xd4>)
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	4a2c      	ldr	r2, [pc, #176]	@ (800ee40 <network_configure_activations+0xd8>)
 800ed90:	60d3      	str	r3, [r2, #12]
    resize_0_output_array.data = AI_PTR(g_network_activations_map[0] + 63984);
 800ed92:	4b2a      	ldr	r3, [pc, #168]	@ (800ee3c <network_configure_activations+0xd4>)
 800ed94:	681a      	ldr	r2, [r3, #0]
 800ed96:	f64f 13f0 	movw	r3, #63984	@ 0xf9f0
 800ed9a:	4413      	add	r3, r2
 800ed9c:	4a29      	ldr	r2, [pc, #164]	@ (800ee44 <network_configure_activations+0xdc>)
 800ed9e:	6093      	str	r3, [r2, #8]
    resize_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 63984);
 800eda0:	4b26      	ldr	r3, [pc, #152]	@ (800ee3c <network_configure_activations+0xd4>)
 800eda2:	681a      	ldr	r2, [r3, #0]
 800eda4:	f64f 13f0 	movw	r3, #63984	@ 0xf9f0
 800eda8:	4413      	add	r3, r2
 800edaa:	4a26      	ldr	r2, [pc, #152]	@ (800ee44 <network_configure_activations+0xdc>)
 800edac:	60d3      	str	r3, [r2, #12]
    conv2d_1_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800edae:	4b23      	ldr	r3, [pc, #140]	@ (800ee3c <network_configure_activations+0xd4>)
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	4a25      	ldr	r2, [pc, #148]	@ (800ee48 <network_configure_activations+0xe0>)
 800edb4:	6093      	str	r3, [r2, #8]
    conv2d_1_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800edb6:	4b21      	ldr	r3, [pc, #132]	@ (800ee3c <network_configure_activations+0xd4>)
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	4a23      	ldr	r2, [pc, #140]	@ (800ee48 <network_configure_activations+0xe0>)
 800edbc:	60d3      	str	r3, [r2, #12]
    conv2d_1_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 36);
 800edbe:	4b1f      	ldr	r3, [pc, #124]	@ (800ee3c <network_configure_activations+0xd4>)
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	3324      	adds	r3, #36	@ 0x24
 800edc4:	4a21      	ldr	r2, [pc, #132]	@ (800ee4c <network_configure_activations+0xe4>)
 800edc6:	6093      	str	r3, [r2, #8]
    conv2d_1_scratch1_array.data_start = AI_PTR(g_network_activations_map[0] + 36);
 800edc8:	4b1c      	ldr	r3, [pc, #112]	@ (800ee3c <network_configure_activations+0xd4>)
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	3324      	adds	r3, #36	@ 0x24
 800edce:	4a1f      	ldr	r2, [pc, #124]	@ (800ee4c <network_configure_activations+0xe4>)
 800edd0:	60d3      	str	r3, [r2, #12]
    conv2d_1_output_array.data = AI_PTR(g_network_activations_map[0] + 3364);
 800edd2:	4b1a      	ldr	r3, [pc, #104]	@ (800ee3c <network_configure_activations+0xd4>)
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	f603 5324 	addw	r3, r3, #3364	@ 0xd24
 800edda:	4a1d      	ldr	r2, [pc, #116]	@ (800ee50 <network_configure_activations+0xe8>)
 800eddc:	6093      	str	r3, [r2, #8]
    conv2d_1_output_array.data_start = AI_PTR(g_network_activations_map[0] + 3364);
 800edde:	4b17      	ldr	r3, [pc, #92]	@ (800ee3c <network_configure_activations+0xd4>)
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	f603 5324 	addw	r3, r3, #3364	@ 0xd24
 800ede6:	4a1a      	ldr	r2, [pc, #104]	@ (800ee50 <network_configure_activations+0xe8>)
 800ede8:	60d3      	str	r3, [r2, #12]
    gemm_4_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800edea:	4b14      	ldr	r3, [pc, #80]	@ (800ee3c <network_configure_activations+0xd4>)
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	4a19      	ldr	r2, [pc, #100]	@ (800ee54 <network_configure_activations+0xec>)
 800edf0:	6093      	str	r3, [r2, #8]
    gemm_4_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800edf2:	4b12      	ldr	r3, [pc, #72]	@ (800ee3c <network_configure_activations+0xd4>)
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	4a17      	ldr	r2, [pc, #92]	@ (800ee54 <network_configure_activations+0xec>)
 800edf8:	60d3      	str	r3, [r2, #12]
    nl_4_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 256);
 800edfa:	4b10      	ldr	r3, [pc, #64]	@ (800ee3c <network_configure_activations+0xd4>)
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800ee02:	4a15      	ldr	r2, [pc, #84]	@ (800ee58 <network_configure_activations+0xf0>)
 800ee04:	6093      	str	r3, [r2, #8]
    nl_4_nl_output_array.data_start = AI_PTR(g_network_activations_map[0] + 256);
 800ee06:	4b0d      	ldr	r3, [pc, #52]	@ (800ee3c <network_configure_activations+0xd4>)
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800ee0e:	4a12      	ldr	r2, [pc, #72]	@ (800ee58 <network_configure_activations+0xf0>)
 800ee10:	60d3      	str	r3, [r2, #12]
    gemm_5_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800ee12:	4b0a      	ldr	r3, [pc, #40]	@ (800ee3c <network_configure_activations+0xd4>)
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	4a11      	ldr	r2, [pc, #68]	@ (800ee5c <network_configure_activations+0xf4>)
 800ee18:	6093      	str	r3, [r2, #8]
    gemm_5_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800ee1a:	4b08      	ldr	r3, [pc, #32]	@ (800ee3c <network_configure_activations+0xd4>)
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	4a0f      	ldr	r2, [pc, #60]	@ (800ee5c <network_configure_activations+0xf4>)
 800ee20:	60d3      	str	r3, [r2, #12]
    return true;
 800ee22:	2301      	movs	r3, #1
 800ee24:	e005      	b.n	800ee32 <network_configure_activations+0xca>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 800ee26:	2213      	movs	r2, #19
 800ee28:	2130      	movs	r1, #48	@ 0x30
 800ee2a:	6878      	ldr	r0, [r7, #4]
 800ee2c:	f001 fc0c 	bl	8010648 <ai_platform_network_set_error>
  return false;
 800ee30:	2300      	movs	r3, #0
}
 800ee32:	4618      	mov	r0, r3
 800ee34:	3708      	adds	r7, #8
 800ee36:	46bd      	mov	sp, r7
 800ee38:	bd80      	pop	{r7, pc}
 800ee3a:	bf00      	nop
 800ee3c:	2002e6b0 	.word	0x2002e6b0
 800ee40:	20000068 	.word	0x20000068
 800ee44:	20000078 	.word	0x20000078
 800ee48:	20000128 	.word	0x20000128
 800ee4c:	20000138 	.word	0x20000138
 800ee50:	20000088 	.word	0x20000088
 800ee54:	20000098 	.word	0x20000098
 800ee58:	200000a8 	.word	0x200000a8
 800ee5c:	200000b8 	.word	0x200000b8

0800ee60 <network_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 800ee60:	b580      	push	{r7, lr}
 800ee62:	b082      	sub	sp, #8
 800ee64:	af00      	add	r7, sp, #0
 800ee66:	6078      	str	r0, [r7, #4]
 800ee68:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 800ee6a:	683a      	ldr	r2, [r7, #0]
 800ee6c:	2101      	movs	r1, #1
 800ee6e:	483d      	ldr	r0, [pc, #244]	@ (800ef64 <network_configure_weights+0x104>)
 800ee70:	f001 fb14 	bl	801049c <ai_platform_get_weights_map>
 800ee74:	4603      	mov	r3, r0
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d069      	beq.n	800ef4e <network_configure_weights+0xee>
    /* Updating weights (byte) offsets */
    
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 800ee7a:	4b3b      	ldr	r3, [pc, #236]	@ (800ef68 <network_configure_weights+0x108>)
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ee82:	4a39      	ldr	r2, [pc, #228]	@ (800ef68 <network_configure_weights+0x108>)
 800ee84:	6013      	str	r3, [r2, #0]
    conv2d_1_weights_array.data = AI_PTR(g_network_weights_map[0] + 0);
 800ee86:	4b37      	ldr	r3, [pc, #220]	@ (800ef64 <network_configure_weights+0x104>)
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	4a37      	ldr	r2, [pc, #220]	@ (800ef68 <network_configure_weights+0x108>)
 800ee8c:	6093      	str	r3, [r2, #8]
    conv2d_1_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 0);
 800ee8e:	4b35      	ldr	r3, [pc, #212]	@ (800ef64 <network_configure_weights+0x104>)
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	4a35      	ldr	r2, [pc, #212]	@ (800ef68 <network_configure_weights+0x108>)
 800ee94:	60d3      	str	r3, [r2, #12]
    conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 800ee96:	4b35      	ldr	r3, [pc, #212]	@ (800ef6c <network_configure_weights+0x10c>)
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ee9e:	4a33      	ldr	r2, [pc, #204]	@ (800ef6c <network_configure_weights+0x10c>)
 800eea0:	6013      	str	r3, [r2, #0]
    conv2d_1_bias_array.data = AI_PTR(g_network_weights_map[0] + 576);
 800eea2:	4b30      	ldr	r3, [pc, #192]	@ (800ef64 <network_configure_weights+0x104>)
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 800eeaa:	4a30      	ldr	r2, [pc, #192]	@ (800ef6c <network_configure_weights+0x10c>)
 800eeac:	6093      	str	r3, [r2, #8]
    conv2d_1_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 576);
 800eeae:	4b2d      	ldr	r3, [pc, #180]	@ (800ef64 <network_configure_weights+0x104>)
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 800eeb6:	4a2d      	ldr	r2, [pc, #180]	@ (800ef6c <network_configure_weights+0x10c>)
 800eeb8:	60d3      	str	r3, [r2, #12]
    gemm_4_weights_array.format |= AI_FMT_FLAG_CONST;
 800eeba:	4b2d      	ldr	r3, [pc, #180]	@ (800ef70 <network_configure_weights+0x110>)
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800eec2:	4a2b      	ldr	r2, [pc, #172]	@ (800ef70 <network_configure_weights+0x110>)
 800eec4:	6013      	str	r3, [r2, #0]
    gemm_4_weights_array.data = AI_PTR(g_network_weights_map[0] + 640);
 800eec6:	4b27      	ldr	r3, [pc, #156]	@ (800ef64 <network_configure_weights+0x104>)
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 800eece:	4a28      	ldr	r2, [pc, #160]	@ (800ef70 <network_configure_weights+0x110>)
 800eed0:	6093      	str	r3, [r2, #8]
    gemm_4_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 640);
 800eed2:	4b24      	ldr	r3, [pc, #144]	@ (800ef64 <network_configure_weights+0x104>)
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 800eeda:	4a25      	ldr	r2, [pc, #148]	@ (800ef70 <network_configure_weights+0x110>)
 800eedc:	60d3      	str	r3, [r2, #12]
    gemm_4_bias_array.format |= AI_FMT_FLAG_CONST;
 800eede:	4b25      	ldr	r3, [pc, #148]	@ (800ef74 <network_configure_weights+0x114>)
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800eee6:	4a23      	ldr	r2, [pc, #140]	@ (800ef74 <network_configure_weights+0x114>)
 800eee8:	6013      	str	r3, [r2, #0]
    gemm_4_bias_array.data = AI_PTR(g_network_weights_map[0] + 692864);
 800eeea:	4b1e      	ldr	r3, [pc, #120]	@ (800ef64 <network_configure_weights+0x104>)
 800eeec:	681a      	ldr	r2, [r3, #0]
 800eeee:	4b22      	ldr	r3, [pc, #136]	@ (800ef78 <network_configure_weights+0x118>)
 800eef0:	4413      	add	r3, r2
 800eef2:	4a20      	ldr	r2, [pc, #128]	@ (800ef74 <network_configure_weights+0x114>)
 800eef4:	6093      	str	r3, [r2, #8]
    gemm_4_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 692864);
 800eef6:	4b1b      	ldr	r3, [pc, #108]	@ (800ef64 <network_configure_weights+0x104>)
 800eef8:	681a      	ldr	r2, [r3, #0]
 800eefa:	4b1f      	ldr	r3, [pc, #124]	@ (800ef78 <network_configure_weights+0x118>)
 800eefc:	4413      	add	r3, r2
 800eefe:	4a1d      	ldr	r2, [pc, #116]	@ (800ef74 <network_configure_weights+0x114>)
 800ef00:	60d3      	str	r3, [r2, #12]
    gemm_5_weights_array.format |= AI_FMT_FLAG_CONST;
 800ef02:	4b1e      	ldr	r3, [pc, #120]	@ (800ef7c <network_configure_weights+0x11c>)
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ef0a:	4a1c      	ldr	r2, [pc, #112]	@ (800ef7c <network_configure_weights+0x11c>)
 800ef0c:	6013      	str	r3, [r2, #0]
    gemm_5_weights_array.data = AI_PTR(g_network_weights_map[0] + 693120);
 800ef0e:	4b15      	ldr	r3, [pc, #84]	@ (800ef64 <network_configure_weights+0x104>)
 800ef10:	681a      	ldr	r2, [r3, #0]
 800ef12:	4b1b      	ldr	r3, [pc, #108]	@ (800ef80 <network_configure_weights+0x120>)
 800ef14:	4413      	add	r3, r2
 800ef16:	4a19      	ldr	r2, [pc, #100]	@ (800ef7c <network_configure_weights+0x11c>)
 800ef18:	6093      	str	r3, [r2, #8]
    gemm_5_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 693120);
 800ef1a:	4b12      	ldr	r3, [pc, #72]	@ (800ef64 <network_configure_weights+0x104>)
 800ef1c:	681a      	ldr	r2, [r3, #0]
 800ef1e:	4b18      	ldr	r3, [pc, #96]	@ (800ef80 <network_configure_weights+0x120>)
 800ef20:	4413      	add	r3, r2
 800ef22:	4a16      	ldr	r2, [pc, #88]	@ (800ef7c <network_configure_weights+0x11c>)
 800ef24:	60d3      	str	r3, [r2, #12]
    gemm_5_bias_array.format |= AI_FMT_FLAG_CONST;
 800ef26:	4b17      	ldr	r3, [pc, #92]	@ (800ef84 <network_configure_weights+0x124>)
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ef2e:	4a15      	ldr	r2, [pc, #84]	@ (800ef84 <network_configure_weights+0x124>)
 800ef30:	6013      	str	r3, [r2, #0]
    gemm_5_bias_array.data = AI_PTR(g_network_weights_map[0] + 694656);
 800ef32:	4b0c      	ldr	r3, [pc, #48]	@ (800ef64 <network_configure_weights+0x104>)
 800ef34:	681a      	ldr	r2, [r3, #0]
 800ef36:	4b14      	ldr	r3, [pc, #80]	@ (800ef88 <network_configure_weights+0x128>)
 800ef38:	4413      	add	r3, r2
 800ef3a:	4a12      	ldr	r2, [pc, #72]	@ (800ef84 <network_configure_weights+0x124>)
 800ef3c:	6093      	str	r3, [r2, #8]
    gemm_5_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 694656);
 800ef3e:	4b09      	ldr	r3, [pc, #36]	@ (800ef64 <network_configure_weights+0x104>)
 800ef40:	681a      	ldr	r2, [r3, #0]
 800ef42:	4b11      	ldr	r3, [pc, #68]	@ (800ef88 <network_configure_weights+0x128>)
 800ef44:	4413      	add	r3, r2
 800ef46:	4a0f      	ldr	r2, [pc, #60]	@ (800ef84 <network_configure_weights+0x124>)
 800ef48:	60d3      	str	r3, [r2, #12]
    return true;
 800ef4a:	2301      	movs	r3, #1
 800ef4c:	e005      	b.n	800ef5a <network_configure_weights+0xfa>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 800ef4e:	2212      	movs	r2, #18
 800ef50:	2130      	movs	r1, #48	@ 0x30
 800ef52:	6878      	ldr	r0, [r7, #4]
 800ef54:	f001 fb78 	bl	8010648 <ai_platform_network_set_error>
  return false;
 800ef58:	2300      	movs	r3, #0
}
 800ef5a:	4618      	mov	r0, r3
 800ef5c:	3708      	adds	r7, #8
 800ef5e:	46bd      	mov	sp, r7
 800ef60:	bd80      	pop	{r7, pc}
 800ef62:	bf00      	nop
 800ef64:	2002e6b4 	.word	0x2002e6b4
 800ef68:	200000c8 	.word	0x200000c8
 800ef6c:	200000d8 	.word	0x200000d8
 800ef70:	200000e8 	.word	0x200000e8
 800ef74:	200000f8 	.word	0x200000f8
 800ef78:	000a9280 	.word	0x000a9280
 800ef7c:	20000108 	.word	0x20000108
 800ef80:	000a9380 	.word	0x000a9380
 800ef84:	20000118 	.word	0x20000118
 800ef88:	000a9980 	.word	0x000a9980

0800ef8c <ai_network_get_error>:
}


AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 800ef8c:	b580      	push	{r7, lr}
 800ef8e:	b082      	sub	sp, #8
 800ef90:	af00      	add	r7, sp, #0
 800ef92:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 800ef94:	6878      	ldr	r0, [r7, #4]
 800ef96:	f001 fb4b 	bl	8010630 <ai_platform_network_get_error>
 800ef9a:	4603      	mov	r3, r0
}
 800ef9c:	4618      	mov	r0, r3
 800ef9e:	3708      	adds	r7, #8
 800efa0:	46bd      	mov	sp, r7
 800efa2:	bd80      	pop	{r7, pc}

0800efa4 <ai_network_create>:


AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800efa4:	b580      	push	{r7, lr}
 800efa6:	b084      	sub	sp, #16
 800efa8:	af02      	add	r7, sp, #8
 800efaa:	6078      	str	r0, [r7, #4]
 800efac:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800efae:	2300      	movs	r3, #0
 800efb0:	9301      	str	r3, [sp, #4]
 800efb2:	2305      	movs	r3, #5
 800efb4:	9300      	str	r3, [sp, #0]
 800efb6:	2301      	movs	r3, #1
 800efb8:	4a04      	ldr	r2, [pc, #16]	@ (800efcc <ai_network_create+0x28>)
 800efba:	6839      	ldr	r1, [r7, #0]
 800efbc:	6878      	ldr	r0, [r7, #4]
 800efbe:	f001 fc37 	bl	8010830 <ai_platform_network_create>
 800efc2:	4603      	mov	r3, r0
    network, network_config, 
    AI_CONTEXT_OBJ(&AI_NET_OBJ_INSTANCE),
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800efc4:	4618      	mov	r0, r3
 800efc6:	3708      	adds	r7, #8
 800efc8:	46bd      	mov	sp, r7
 800efca:	bd80      	pop	{r7, pc}
 800efcc:	20000778 	.word	0x20000778

0800efd0 <ai_network_create_and_init>:


AI_API_ENTRY
ai_error ai_network_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 800efd0:	b580      	push	{r7, lr}
 800efd2:	b094      	sub	sp, #80	@ 0x50
 800efd4:	af00      	add	r7, sp, #0
 800efd6:	60f8      	str	r0, [r7, #12]
 800efd8:	60b9      	str	r1, [r7, #8]
 800efda:	607a      	str	r2, [r7, #4]
  ai_error err;
  ai_network_params params;

  err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 800efdc:	2100      	movs	r1, #0
 800efde:	68f8      	ldr	r0, [r7, #12]
 800efe0:	f7ff ffe0 	bl	800efa4 <ai_network_create>
 800efe4:	4603      	mov	r3, r0
 800efe6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (err.type != AI_ERROR_NONE) {
 800efe8:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800efec:	2b00      	cmp	r3, #0
 800efee:	d001      	beq.n	800eff4 <ai_network_create_and_init+0x24>
    return err;
 800eff0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800eff2:	e067      	b.n	800f0c4 <ai_network_create_and_init+0xf4>
  }
  
  if (ai_network_data_params_get(&params) != true) {
 800eff4:	f107 0310 	add.w	r3, r7, #16
 800eff8:	4618      	mov	r0, r3
 800effa:	f000 f8e7 	bl	800f1cc <ai_network_data_params_get>
 800effe:	4603      	mov	r3, r0
 800f000:	f083 0301 	eor.w	r3, r3, #1
 800f004:	b2db      	uxtb	r3, r3
 800f006:	2b00      	cmp	r3, #0
 800f008:	d008      	beq.n	800f01c <ai_network_create_and_init+0x4c>
    err = ai_network_get_error(*network);
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	4618      	mov	r0, r3
 800f010:	f7ff ffbc 	bl	800ef8c <ai_network_get_error>
 800f014:	4603      	mov	r3, r0
 800f016:	64bb      	str	r3, [r7, #72]	@ 0x48
    return err;
 800f018:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f01a:	e053      	b.n	800f0c4 <ai_network_create_and_init+0xf4>
  }
#if defined(AI_NETWORK_DATA_ACTIVATIONS_COUNT)
  /* set the addresses of the activations buffers */
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 800f01c:	2300      	movs	r3, #0
 800f01e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800f022:	e012      	b.n	800f04a <ai_network_create_and_init+0x7a>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 800f024:	f8b7 104e 	ldrh.w	r1, [r7, #78]	@ 0x4e
 800f028:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800f02c:	009b      	lsls	r3, r3, #2
 800f02e:	68ba      	ldr	r2, [r7, #8]
 800f030:	4413      	add	r3, r2
 800f032:	681a      	ldr	r2, [r3, #0]
 800f034:	f107 0310 	add.w	r3, r7, #16
 800f038:	330c      	adds	r3, #12
 800f03a:	4618      	mov	r0, r3
 800f03c:	f001 fa1e 	bl	801047c <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 800f040:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800f044:	3301      	adds	r3, #1
 800f046:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800f04a:	68bb      	ldr	r3, [r7, #8]
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d004      	beq.n	800f05a <ai_network_create_and_init+0x8a>
 800f050:	8bfb      	ldrh	r3, [r7, #30]
 800f052:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800f056:	429a      	cmp	r2, r3
 800f058:	d3e4      	bcc.n	800f024 <ai_network_create_and_init+0x54>
  }
#endif
#if defined(AI_NETWORK_DATA_WEIGHTS_COUNT)
  /* set the addresses of the weight buffers */
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 800f05a:	2300      	movs	r3, #0
 800f05c:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800f060:	e012      	b.n	800f088 <ai_network_create_and_init+0xb8>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 800f062:	f8b7 104c 	ldrh.w	r1, [r7, #76]	@ 0x4c
 800f066:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800f06a:	009b      	lsls	r3, r3, #2
 800f06c:	687a      	ldr	r2, [r7, #4]
 800f06e:	4413      	add	r3, r2
 800f070:	681a      	ldr	r2, [r3, #0]
 800f072:	f107 0310 	add.w	r3, r7, #16
 800f076:	3304      	adds	r3, #4
 800f078:	4618      	mov	r0, r3
 800f07a:	f001 f9ff 	bl	801047c <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 800f07e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800f082:	3301      	adds	r3, #1
 800f084:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d004      	beq.n	800f098 <ai_network_create_and_init+0xc8>
 800f08e:	8afb      	ldrh	r3, [r7, #22]
 800f090:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 800f094:	429a      	cmp	r2, r3
 800f096:	d3e4      	bcc.n	800f062 <ai_network_create_and_init+0x92>
  }
#endif
  if (ai_network_init(*network, &params) != true) {
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	f107 0210 	add.w	r2, r7, #16
 800f0a0:	4611      	mov	r1, r2
 800f0a2:	4618      	mov	r0, r3
 800f0a4:	f000 f846 	bl	800f134 <ai_network_init>
 800f0a8:	4603      	mov	r3, r0
 800f0aa:	f083 0301 	eor.w	r3, r3, #1
 800f0ae:	b2db      	uxtb	r3, r3
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d006      	beq.n	800f0c2 <ai_network_create_and_init+0xf2>
    err = ai_network_get_error(*network);
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	4618      	mov	r0, r3
 800f0ba:	f7ff ff67 	bl	800ef8c <ai_network_get_error>
 800f0be:	4603      	mov	r3, r0
 800f0c0:	64bb      	str	r3, [r7, #72]	@ 0x48
  }
  return err;
 800f0c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800f0c4:	4618      	mov	r0, r3
 800f0c6:	3750      	adds	r7, #80	@ 0x50
 800f0c8:	46bd      	mov	sp, r7
 800f0ca:	bd80      	pop	{r7, pc}

0800f0cc <ai_network_inputs_get>:


AI_API_ENTRY
ai_buffer* ai_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 800f0cc:	b580      	push	{r7, lr}
 800f0ce:	b082      	sub	sp, #8
 800f0d0:	af00      	add	r7, sp, #0
 800f0d2:	6078      	str	r0, [r7, #4]
 800f0d4:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d104      	bne.n	800f0e6 <ai_network_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800f0dc:	4b06      	ldr	r3, [pc, #24]	@ (800f0f8 <ai_network_inputs_get+0x2c>)
 800f0de:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	4a06      	ldr	r2, [pc, #24]	@ (800f0fc <ai_network_inputs_get+0x30>)
 800f0e4:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 800f0e6:	6839      	ldr	r1, [r7, #0]
 800f0e8:	6878      	ldr	r0, [r7, #4]
 800f0ea:	f001 fab3 	bl	8010654 <ai_platform_inputs_get>
 800f0ee:	4603      	mov	r3, r0
}
 800f0f0:	4618      	mov	r0, r3
 800f0f2:	3708      	adds	r7, #8
 800f0f4:	46bd      	mov	sp, r7
 800f0f6:	bd80      	pop	{r7, pc}
 800f0f8:	20000778 	.word	0x20000778
 800f0fc:	a1c00100 	.word	0xa1c00100

0800f100 <ai_network_outputs_get>:


AI_API_ENTRY
ai_buffer* ai_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 800f100:	b580      	push	{r7, lr}
 800f102:	b082      	sub	sp, #8
 800f104:	af00      	add	r7, sp, #0
 800f106:	6078      	str	r0, [r7, #4]
 800f108:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d104      	bne.n	800f11a <ai_network_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800f110:	4b06      	ldr	r3, [pc, #24]	@ (800f12c <ai_network_outputs_get+0x2c>)
 800f112:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	4a06      	ldr	r2, [pc, #24]	@ (800f130 <ai_network_outputs_get+0x30>)
 800f118:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 800f11a:	6839      	ldr	r1, [r7, #0]
 800f11c:	6878      	ldr	r0, [r7, #4]
 800f11e:	f001 fb11 	bl	8010744 <ai_platform_outputs_get>
 800f122:	4603      	mov	r3, r0
}
 800f124:	4618      	mov	r0, r3
 800f126:	3708      	adds	r7, #8
 800f128:	46bd      	mov	sp, r7
 800f12a:	bd80      	pop	{r7, pc}
 800f12c:	20000778 	.word	0x20000778
 800f130:	a1c00100 	.word	0xa1c00100

0800f134 <ai_network_init>:


AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 800f134:	b580      	push	{r7, lr}
 800f136:	b084      	sub	sp, #16
 800f138:	af00      	add	r7, sp, #0
 800f13a:	6078      	str	r0, [r7, #4]
 800f13c:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_OBJ(ai_platform_network_init(network, params));
 800f13e:	6839      	ldr	r1, [r7, #0]
 800f140:	6878      	ldr	r0, [r7, #4]
 800f142:	f001 fbb7 	bl	80108b4 <ai_platform_network_init>
 800f146:	60f8      	str	r0, [r7, #12]
  ai_bool ok = true;
 800f148:	2301      	movs	r3, #1
 800f14a:	72fb      	strb	r3, [r7, #11]

  if (!net_ctx) return false;
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d101      	bne.n	800f156 <ai_network_init+0x22>
 800f152:	2300      	movs	r3, #0
 800f154:	e026      	b.n	800f1a4 <ai_network_init+0x70>
  ok &= network_configure_weights(net_ctx, params);
 800f156:	6839      	ldr	r1, [r7, #0]
 800f158:	68f8      	ldr	r0, [r7, #12]
 800f15a:	f7ff fe81 	bl	800ee60 <network_configure_weights>
 800f15e:	4603      	mov	r3, r0
 800f160:	461a      	mov	r2, r3
 800f162:	7afb      	ldrb	r3, [r7, #11]
 800f164:	4013      	ands	r3, r2
 800f166:	2b00      	cmp	r3, #0
 800f168:	bf14      	ite	ne
 800f16a:	2301      	movne	r3, #1
 800f16c:	2300      	moveq	r3, #0
 800f16e:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, params);
 800f170:	6839      	ldr	r1, [r7, #0]
 800f172:	68f8      	ldr	r0, [r7, #12]
 800f174:	f7ff fdf8 	bl	800ed68 <network_configure_activations>
 800f178:	4603      	mov	r3, r0
 800f17a:	461a      	mov	r2, r3
 800f17c:	7afb      	ldrb	r3, [r7, #11]
 800f17e:	4013      	ands	r3, r2
 800f180:	2b00      	cmp	r3, #0
 800f182:	bf14      	ite	ne
 800f184:	2301      	movne	r3, #1
 800f186:	2300      	moveq	r3, #0
 800f188:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 800f18a:	6878      	ldr	r0, [r7, #4]
 800f18c:	f001 fc52 	bl	8010a34 <ai_platform_network_post_init>
 800f190:	4603      	mov	r3, r0
 800f192:	461a      	mov	r2, r3
 800f194:	7afb      	ldrb	r3, [r7, #11]
 800f196:	4013      	ands	r3, r2
 800f198:	2b00      	cmp	r3, #0
 800f19a:	bf14      	ite	ne
 800f19c:	2301      	movne	r3, #1
 800f19e:	2300      	moveq	r3, #0
 800f1a0:	72fb      	strb	r3, [r7, #11]

  return ok;
 800f1a2:	7afb      	ldrb	r3, [r7, #11]
}
 800f1a4:	4618      	mov	r0, r3
 800f1a6:	3710      	adds	r7, #16
 800f1a8:	46bd      	mov	sp, r7
 800f1aa:	bd80      	pop	{r7, pc}

0800f1ac <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 800f1ac:	b580      	push	{r7, lr}
 800f1ae:	b084      	sub	sp, #16
 800f1b0:	af00      	add	r7, sp, #0
 800f1b2:	60f8      	str	r0, [r7, #12]
 800f1b4:	60b9      	str	r1, [r7, #8]
 800f1b6:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 800f1b8:	687a      	ldr	r2, [r7, #4]
 800f1ba:	68b9      	ldr	r1, [r7, #8]
 800f1bc:	68f8      	ldr	r0, [r7, #12]
 800f1be:	f001 fc69 	bl	8010a94 <ai_platform_network_process>
 800f1c2:	4603      	mov	r3, r0
}
 800f1c4:	4618      	mov	r0, r3
 800f1c6:	3710      	adds	r7, #16
 800f1c8:	46bd      	mov	sp, r7
 800f1ca:	bd80      	pop	{r7, pc}

0800f1cc <ai_network_data_params_get>:
 * @ingroup network_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
 800f1cc:	b580      	push	{r7, lr}
 800f1ce:	b086      	sub	sp, #24
 800f1d0:	af00      	add	r7, sp, #0
 800f1d2:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d101      	bne.n	800f1de <ai_network_data_params_get+0x12>
 800f1da:	2300      	movs	r3, #0
 800f1dc:	e016      	b.n	800f20c <ai_network_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 800f1de:	4a0d      	ldr	r2, [pc, #52]	@ (800f214 <ai_network_data_params_get+0x48>)
 800f1e0:	f107 0310 	add.w	r3, r7, #16
 800f1e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f1e8:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 800f1ec:	4a0a      	ldr	r2, [pc, #40]	@ (800f218 <ai_network_data_params_get+0x4c>)
 800f1ee:	f107 0308 	add.w	r3, r7, #8
 800f1f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f1f6:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 800f1fa:	f107 0210 	add.w	r2, r7, #16
 800f1fe:	f107 0308 	add.w	r3, r7, #8
 800f202:	4619      	mov	r1, r3
 800f204:	6878      	ldr	r0, [r7, #4]
 800f206:	f001 f9f9 	bl	80105fc <ai_platform_bind_network_params>
 800f20a:	4603      	mov	r3, r0
}
 800f20c:	4618      	mov	r0, r3
 800f20e:	3718      	adds	r7, #24
 800f210:	46bd      	mov	sp, r7
 800f212:	bd80      	pop	{r7, pc}
 800f214:	080179e4 	.word	0x080179e4
 800f218:	080179ec 	.word	0x080179ec

0800f21c <arm_rfft_fast_init_f32>:
 800f21c:	084b      	lsrs	r3, r1, #1
 800f21e:	2b80      	cmp	r3, #128	@ 0x80
 800f220:	b430      	push	{r4, r5}
 800f222:	8201      	strh	r1, [r0, #16]
 800f224:	8003      	strh	r3, [r0, #0]
 800f226:	d070      	beq.n	800f30a <arm_rfft_fast_init_f32+0xee>
 800f228:	d916      	bls.n	800f258 <arm_rfft_fast_init_f32+0x3c>
 800f22a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f22e:	d05f      	beq.n	800f2f0 <arm_rfft_fast_init_f32+0xd4>
 800f230:	d936      	bls.n	800f2a0 <arm_rfft_fast_init_f32+0x84>
 800f232:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f236:	d026      	beq.n	800f286 <arm_rfft_fast_init_f32+0x6a>
 800f238:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f23c:	d112      	bne.n	800f264 <arm_rfft_fast_init_f32+0x48>
 800f23e:	f44f 656e 	mov.w	r5, #3808	@ 0xee0
 800f242:	4c38      	ldr	r4, [pc, #224]	@ (800f324 <arm_rfft_fast_init_f32+0x108>)
 800f244:	4938      	ldr	r1, [pc, #224]	@ (800f328 <arm_rfft_fast_init_f32+0x10c>)
 800f246:	2300      	movs	r3, #0
 800f248:	4a38      	ldr	r2, [pc, #224]	@ (800f32c <arm_rfft_fast_init_f32+0x110>)
 800f24a:	8185      	strh	r5, [r0, #12]
 800f24c:	6084      	str	r4, [r0, #8]
 800f24e:	6041      	str	r1, [r0, #4]
 800f250:	6142      	str	r2, [r0, #20]
 800f252:	4618      	mov	r0, r3
 800f254:	bc30      	pop	{r4, r5}
 800f256:	4770      	bx	lr
 800f258:	2b20      	cmp	r3, #32
 800f25a:	d031      	beq.n	800f2c0 <arm_rfft_fast_init_f32+0xa4>
 800f25c:	2b40      	cmp	r3, #64	@ 0x40
 800f25e:	d006      	beq.n	800f26e <arm_rfft_fast_init_f32+0x52>
 800f260:	2b10      	cmp	r3, #16
 800f262:	d039      	beq.n	800f2d8 <arm_rfft_fast_init_f32+0xbc>
 800f264:	f04f 33ff 	mov.w	r3, #4294967295
 800f268:	bc30      	pop	{r4, r5}
 800f26a:	4618      	mov	r0, r3
 800f26c:	4770      	bx	lr
 800f26e:	2538      	movs	r5, #56	@ 0x38
 800f270:	4c2f      	ldr	r4, [pc, #188]	@ (800f330 <arm_rfft_fast_init_f32+0x114>)
 800f272:	4930      	ldr	r1, [pc, #192]	@ (800f334 <arm_rfft_fast_init_f32+0x118>)
 800f274:	2300      	movs	r3, #0
 800f276:	4a30      	ldr	r2, [pc, #192]	@ (800f338 <arm_rfft_fast_init_f32+0x11c>)
 800f278:	8185      	strh	r5, [r0, #12]
 800f27a:	6084      	str	r4, [r0, #8]
 800f27c:	6041      	str	r1, [r0, #4]
 800f27e:	6142      	str	r2, [r0, #20]
 800f280:	4618      	mov	r0, r3
 800f282:	bc30      	pop	{r4, r5}
 800f284:	4770      	bx	lr
 800f286:	f44f 65e1 	mov.w	r5, #1800	@ 0x708
 800f28a:	4c2c      	ldr	r4, [pc, #176]	@ (800f33c <arm_rfft_fast_init_f32+0x120>)
 800f28c:	492c      	ldr	r1, [pc, #176]	@ (800f340 <arm_rfft_fast_init_f32+0x124>)
 800f28e:	2300      	movs	r3, #0
 800f290:	4a2c      	ldr	r2, [pc, #176]	@ (800f344 <arm_rfft_fast_init_f32+0x128>)
 800f292:	8185      	strh	r5, [r0, #12]
 800f294:	6084      	str	r4, [r0, #8]
 800f296:	6041      	str	r1, [r0, #4]
 800f298:	6142      	str	r2, [r0, #20]
 800f29a:	4618      	mov	r0, r3
 800f29c:	bc30      	pop	{r4, r5}
 800f29e:	4770      	bx	lr
 800f2a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f2a4:	d1de      	bne.n	800f264 <arm_rfft_fast_init_f32+0x48>
 800f2a6:	f44f 75dc 	mov.w	r5, #440	@ 0x1b8
 800f2aa:	4c27      	ldr	r4, [pc, #156]	@ (800f348 <arm_rfft_fast_init_f32+0x12c>)
 800f2ac:	4927      	ldr	r1, [pc, #156]	@ (800f34c <arm_rfft_fast_init_f32+0x130>)
 800f2ae:	2300      	movs	r3, #0
 800f2b0:	4a27      	ldr	r2, [pc, #156]	@ (800f350 <arm_rfft_fast_init_f32+0x134>)
 800f2b2:	8185      	strh	r5, [r0, #12]
 800f2b4:	6084      	str	r4, [r0, #8]
 800f2b6:	6041      	str	r1, [r0, #4]
 800f2b8:	6142      	str	r2, [r0, #20]
 800f2ba:	4618      	mov	r0, r3
 800f2bc:	bc30      	pop	{r4, r5}
 800f2be:	4770      	bx	lr
 800f2c0:	2530      	movs	r5, #48	@ 0x30
 800f2c2:	4c24      	ldr	r4, [pc, #144]	@ (800f354 <arm_rfft_fast_init_f32+0x138>)
 800f2c4:	4924      	ldr	r1, [pc, #144]	@ (800f358 <arm_rfft_fast_init_f32+0x13c>)
 800f2c6:	2300      	movs	r3, #0
 800f2c8:	4a24      	ldr	r2, [pc, #144]	@ (800f35c <arm_rfft_fast_init_f32+0x140>)
 800f2ca:	8185      	strh	r5, [r0, #12]
 800f2cc:	6084      	str	r4, [r0, #8]
 800f2ce:	6041      	str	r1, [r0, #4]
 800f2d0:	6142      	str	r2, [r0, #20]
 800f2d2:	4618      	mov	r0, r3
 800f2d4:	bc30      	pop	{r4, r5}
 800f2d6:	4770      	bx	lr
 800f2d8:	2514      	movs	r5, #20
 800f2da:	4c21      	ldr	r4, [pc, #132]	@ (800f360 <arm_rfft_fast_init_f32+0x144>)
 800f2dc:	4921      	ldr	r1, [pc, #132]	@ (800f364 <arm_rfft_fast_init_f32+0x148>)
 800f2de:	2300      	movs	r3, #0
 800f2e0:	4a21      	ldr	r2, [pc, #132]	@ (800f368 <arm_rfft_fast_init_f32+0x14c>)
 800f2e2:	8185      	strh	r5, [r0, #12]
 800f2e4:	6084      	str	r4, [r0, #8]
 800f2e6:	6041      	str	r1, [r0, #4]
 800f2e8:	6142      	str	r2, [r0, #20]
 800f2ea:	4618      	mov	r0, r3
 800f2ec:	bc30      	pop	{r4, r5}
 800f2ee:	4770      	bx	lr
 800f2f0:	f44f 75e0 	mov.w	r5, #448	@ 0x1c0
 800f2f4:	4c1d      	ldr	r4, [pc, #116]	@ (800f36c <arm_rfft_fast_init_f32+0x150>)
 800f2f6:	491e      	ldr	r1, [pc, #120]	@ (800f370 <arm_rfft_fast_init_f32+0x154>)
 800f2f8:	2300      	movs	r3, #0
 800f2fa:	4a1e      	ldr	r2, [pc, #120]	@ (800f374 <arm_rfft_fast_init_f32+0x158>)
 800f2fc:	8185      	strh	r5, [r0, #12]
 800f2fe:	6084      	str	r4, [r0, #8]
 800f300:	6041      	str	r1, [r0, #4]
 800f302:	6142      	str	r2, [r0, #20]
 800f304:	4618      	mov	r0, r3
 800f306:	bc30      	pop	{r4, r5}
 800f308:	4770      	bx	lr
 800f30a:	25d0      	movs	r5, #208	@ 0xd0
 800f30c:	4c1a      	ldr	r4, [pc, #104]	@ (800f378 <arm_rfft_fast_init_f32+0x15c>)
 800f30e:	491b      	ldr	r1, [pc, #108]	@ (800f37c <arm_rfft_fast_init_f32+0x160>)
 800f310:	2300      	movs	r3, #0
 800f312:	4a1b      	ldr	r2, [pc, #108]	@ (800f380 <arm_rfft_fast_init_f32+0x164>)
 800f314:	8185      	strh	r5, [r0, #12]
 800f316:	6084      	str	r4, [r0, #8]
 800f318:	6041      	str	r1, [r0, #4]
 800f31a:	6142      	str	r2, [r0, #20]
 800f31c:	4618      	mov	r0, r3
 800f31e:	bc30      	pop	{r4, r5}
 800f320:	4770      	bx	lr
 800f322:	bf00      	nop
 800f324:	080d02c0 	.word	0x080d02c0
 800f328:	080c14b8 	.word	0x080c14b8
 800f32c:	080c7628 	.word	0x080c7628
 800f330:	080c55b8 	.word	0x080c55b8
 800f334:	080d2080 	.word	0x080d2080
 800f338:	080d4570 	.word	0x080d4570
 800f33c:	080cdfa8 	.word	0x080cdfa8
 800f340:	080cbea8 	.word	0x080cbea8
 800f344:	080c5628 	.word	0x080c5628
 800f348:	080d4200 	.word	0x080d4200
 800f34c:	080cb628 	.word	0x080cb628
 800f350:	080d2280 	.word	0x080d2280
 800f354:	080cee60 	.word	0x080cee60
 800f358:	080cdea8 	.word	0x080cdea8
 800f35c:	080c54b8 	.word	0x080c54b8
 800f360:	080cedb8 	.word	0x080cedb8
 800f364:	080cbe28 	.word	0x080cbe28
 800f368:	080cede0 	.word	0x080cede0
 800f36c:	080d2a80 	.word	0x080d2a80
 800f370:	080cf2c0 	.word	0x080cf2c0
 800f374:	080d2e00 	.word	0x080d2e00
 800f378:	080d4770 	.word	0x080d4770
 800f37c:	080ceec0 	.word	0x080ceec0
 800f380:	080d3e00 	.word	0x080d3e00

0800f384 <arm_rfft_fast_f32>:
 800f384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f388:	8a05      	ldrh	r5, [r0, #16]
 800f38a:	4606      	mov	r6, r0
 800f38c:	4617      	mov	r7, r2
 800f38e:	460c      	mov	r4, r1
 800f390:	086d      	lsrs	r5, r5, #1
 800f392:	8005      	strh	r5, [r0, #0]
 800f394:	2b00      	cmp	r3, #0
 800f396:	d15e      	bne.n	800f456 <arm_rfft_fast_f32+0xd2>
 800f398:	461a      	mov	r2, r3
 800f39a:	2301      	movs	r3, #1
 800f39c:	f000 fbde 	bl	800fb5c <arm_cfft_f32>
 800f3a0:	edd4 7a00 	vldr	s15, [r4]
 800f3a4:	ed94 7a01 	vldr	s14, [r4, #4]
 800f3a8:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800f3ac:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800f3b0:	8832      	ldrh	r2, [r6, #0]
 800f3b2:	ee37 7a07 	vadd.f32	s14, s14, s14
 800f3b6:	6975      	ldr	r5, [r6, #20]
 800f3b8:	3a01      	subs	r2, #1
 800f3ba:	eeb0 3a46 	vmov.f32	s6, s12
 800f3be:	3510      	adds	r5, #16
 800f3c0:	f107 0610 	add.w	r6, r7, #16
 800f3c4:	ee77 6a87 	vadd.f32	s13, s15, s14
 800f3c8:	eb04 00c2 	add.w	r0, r4, r2, lsl #3
 800f3cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f3d0:	f104 0310 	add.w	r3, r4, #16
 800f3d4:	3808      	subs	r0, #8
 800f3d6:	ee26 7a86 	vmul.f32	s14, s13, s12
 800f3da:	ee67 7a86 	vmul.f32	s15, s15, s12
 800f3de:	ed87 7a00 	vstr	s14, [r7]
 800f3e2:	edc7 7a01 	vstr	s15, [r7, #4]
 800f3e6:	ed90 7a02 	vldr	s14, [r0, #8]
 800f3ea:	3a01      	subs	r2, #1
 800f3ec:	ed53 6a02 	vldr	s13, [r3, #-8]
 800f3f0:	f1a0 0008 	sub.w	r0, r0, #8
 800f3f4:	ed15 6a02 	vldr	s12, [r5, #-8]
 800f3f8:	f103 0308 	add.w	r3, r3, #8
 800f3fc:	ee77 7a66 	vsub.f32	s15, s14, s13
 800f400:	edd0 3a05 	vldr	s7, [r0, #20]
 800f404:	ed13 5a03 	vldr	s10, [r3, #-12]
 800f408:	ee77 4a26 	vadd.f32	s9, s14, s13
 800f40c:	ed55 5a01 	vldr	s11, [r5, #-4]
 800f410:	f106 0608 	add.w	r6, r6, #8
 800f414:	ee66 6a27 	vmul.f32	s13, s12, s15
 800f418:	f105 0508 	add.w	r5, r5, #8
 800f41c:	ee33 4a85 	vadd.f32	s8, s7, s10
 800f420:	ee25 7aa7 	vmul.f32	s14, s11, s15
 800f424:	ee35 5a63 	vsub.f32	s10, s10, s7
 800f428:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800f42c:	ee26 6a04 	vmul.f32	s12, s12, s8
 800f430:	ee77 7a05 	vadd.f32	s15, s14, s10
 800f434:	ee65 5a84 	vmul.f32	s11, s11, s8
 800f438:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800f43c:	ee36 7aa5 	vadd.f32	s14, s13, s11
 800f440:	ee67 7a83 	vmul.f32	s15, s15, s6
 800f444:	ee27 7a03 	vmul.f32	s14, s14, s6
 800f448:	ed46 7a03 	vstr	s15, [r6, #-12]
 800f44c:	ed06 7a04 	vstr	s14, [r6, #-16]
 800f450:	d1c9      	bne.n	800f3e6 <arm_rfft_fast_f32+0x62>
 800f452:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f456:	edd1 7a00 	vldr	s15, [r1]
 800f45a:	eef6 3a00 	vmov.f32	s7, #96	@ 0x3f000000  0.5
 800f45e:	edd1 6a01 	vldr	s13, [r1, #4]
 800f462:	1e68      	subs	r0, r5, #1
 800f464:	6975      	ldr	r5, [r6, #20]
 800f466:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800f46a:	00c1      	lsls	r1, r0, #3
 800f46c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f470:	ee27 7a23 	vmul.f32	s14, s14, s7
 800f474:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800f478:	ed82 7a00 	vstr	s14, [r2]
 800f47c:	edc2 7a01 	vstr	s15, [r2, #4]
 800f480:	b3e0      	cbz	r0, 800f4fc <arm_rfft_fast_f32+0x178>
 800f482:	3908      	subs	r1, #8
 800f484:	f104 0210 	add.w	r2, r4, #16
 800f488:	3510      	adds	r5, #16
 800f48a:	440c      	add	r4, r1
 800f48c:	f107 0110 	add.w	r1, r7, #16
 800f490:	ed94 7a02 	vldr	s14, [r4, #8]
 800f494:	3801      	subs	r0, #1
 800f496:	ed52 6a02 	vldr	s13, [r2, #-8]
 800f49a:	f1a4 0408 	sub.w	r4, r4, #8
 800f49e:	ed15 6a02 	vldr	s12, [r5, #-8]
 800f4a2:	f102 0208 	add.w	r2, r2, #8
 800f4a6:	ee76 7ac7 	vsub.f32	s15, s13, s14
 800f4aa:	ed94 4a05 	vldr	s8, [r4, #20]
 800f4ae:	ed12 5a03 	vldr	s10, [r2, #-12]
 800f4b2:	ee77 6a26 	vadd.f32	s13, s14, s13
 800f4b6:	ed55 5a01 	vldr	s11, [r5, #-4]
 800f4ba:	f101 0108 	add.w	r1, r1, #8
 800f4be:	ee26 3a27 	vmul.f32	s6, s12, s15
 800f4c2:	f105 0508 	add.w	r5, r5, #8
 800f4c6:	ee74 4a05 	vadd.f32	s9, s8, s10
 800f4ca:	ee25 7aa7 	vmul.f32	s14, s11, s15
 800f4ce:	ee35 5a44 	vsub.f32	s10, s10, s8
 800f4d2:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800f4d6:	ee26 6a24 	vmul.f32	s12, s12, s9
 800f4da:	ee77 7a05 	vadd.f32	s15, s14, s10
 800f4de:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800f4e2:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800f4e6:	ee36 7ae5 	vsub.f32	s14, s13, s11
 800f4ea:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800f4ee:	ee27 7a23 	vmul.f32	s14, s14, s7
 800f4f2:	ed41 7a03 	vstr	s15, [r1, #-12]
 800f4f6:	ed01 7a04 	vstr	s14, [r1, #-16]
 800f4fa:	d1c9      	bne.n	800f490 <arm_rfft_fast_f32+0x10c>
 800f4fc:	461a      	mov	r2, r3
 800f4fe:	4639      	mov	r1, r7
 800f500:	4630      	mov	r0, r6
 800f502:	2301      	movs	r3, #1
 800f504:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f508:	f000 bb28 	b.w	800fb5c <arm_cfft_f32>

0800f50c <arm_cfft_radix8by2_f32>:
 800f50c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f510:	4607      	mov	r7, r0
 800f512:	4608      	mov	r0, r1
 800f514:	ed2d 8b06 	vpush	{d8-d10}
 800f518:	f8b7 e000 	ldrh.w	lr, [r7]
 800f51c:	687a      	ldr	r2, [r7, #4]
 800f51e:	ea4f 015e 	mov.w	r1, lr, lsr #1
 800f522:	eb00 088e 	add.w	r8, r0, lr, lsl #2
 800f526:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 800f52a:	f000 80b0 	beq.w	800f68e <arm_cfft_radix8by2_f32+0x182>
 800f52e:	008b      	lsls	r3, r1, #2
 800f530:	3210      	adds	r2, #16
 800f532:	f100 0610 	add.w	r6, r0, #16
 800f536:	f108 0510 	add.w	r5, r8, #16
 800f53a:	3310      	adds	r3, #16
 800f53c:	18c4      	adds	r4, r0, r3
 800f53e:	4443      	add	r3, r8
 800f540:	ed55 6a04 	vldr	s13, [r5, #-16]
 800f544:	f1be 0e01 	subs.w	lr, lr, #1
 800f548:	ed56 4a04 	vldr	s9, [r6, #-16]
 800f54c:	f104 0410 	add.w	r4, r4, #16
 800f550:	ed15 7a03 	vldr	s14, [r5, #-12]
 800f554:	f106 0610 	add.w	r6, r6, #16
 800f558:	ee74 9aa6 	vadd.f32	s19, s9, s13
 800f55c:	ed55 7a02 	vldr	s15, [r5, #-8]
 800f560:	ed55 2a01 	vldr	s5, [r5, #-4]
 800f564:	ee74 4ae6 	vsub.f32	s9, s9, s13
 800f568:	ed53 0a04 	vldr	s1, [r3, #-16]
 800f56c:	f102 0210 	add.w	r2, r2, #16
 800f570:	ed13 5a03 	vldr	s10, [r3, #-12]
 800f574:	f105 0510 	add.w	r5, r5, #16
 800f578:	ed13 3a02 	vldr	s6, [r3, #-8]
 800f57c:	f103 0310 	add.w	r3, r3, #16
 800f580:	ed54 3a06 	vldr	s7, [r4, #-24]	@ 0xffffffe8
 800f584:	ed14 4a05 	vldr	s8, [r4, #-20]	@ 0xffffffec
 800f588:	ed13 6a05 	vldr	s12, [r3, #-20]	@ 0xffffffec
 800f58c:	ee33 8a83 	vadd.f32	s16, s7, s6
 800f590:	ed56 6a07 	vldr	s13, [r6, #-28]	@ 0xffffffe4
 800f594:	ed16 2a05 	vldr	s4, [r6, #-20]	@ 0xffffffec
 800f598:	ee34 0a06 	vadd.f32	s0, s8, s12
 800f59c:	ed54 5a08 	vldr	s11, [r4, #-32]	@ 0xffffffe0
 800f5a0:	ee76 aa87 	vadd.f32	s21, s13, s14
 800f5a4:	ed14 1a07 	vldr	s2, [r4, #-28]	@ 0xffffffe4
 800f5a8:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800f5ac:	ed56 1a06 	vldr	s3, [r6, #-24]	@ 0xffffffe8
 800f5b0:	ee35 9aa0 	vadd.f32	s18, s11, s1
 800f5b4:	ed46 9a08 	vstr	s19, [r6, #-32]	@ 0xffffffe0
 800f5b8:	ee71 8a05 	vadd.f32	s17, s2, s10
 800f5bc:	ee31 aaa7 	vadd.f32	s20, s3, s15
 800f5c0:	ed46 aa07 	vstr	s21, [r6, #-28]	@ 0xffffffe4
 800f5c4:	ee72 9a22 	vadd.f32	s19, s4, s5
 800f5c8:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800f5cc:	ee35 5a41 	vsub.f32	s10, s10, s2
 800f5d0:	ed06 aa06 	vstr	s20, [r6, #-24]	@ 0xffffffe8
 800f5d4:	ed46 9a05 	vstr	s19, [r6, #-20]	@ 0xffffffec
 800f5d8:	ee36 6a44 	vsub.f32	s12, s12, s8
 800f5dc:	ed04 9a08 	vstr	s18, [r4, #-32]	@ 0xffffffe0
 800f5e0:	ee71 1ae7 	vsub.f32	s3, s3, s15
 800f5e4:	ed44 8a07 	vstr	s17, [r4, #-28]	@ 0xffffffe4
 800f5e8:	ee72 7a62 	vsub.f32	s15, s4, s5
 800f5ec:	ed04 8a06 	vstr	s16, [r4, #-24]	@ 0xffffffe8
 800f5f0:	ee73 2a63 	vsub.f32	s5, s6, s7
 800f5f4:	ed04 0a05 	vstr	s0, [r4, #-20]	@ 0xffffffec
 800f5f8:	ed12 4a08 	vldr	s8, [r2, #-32]	@ 0xffffffe0
 800f5fc:	ed52 6a07 	vldr	s13, [r2, #-28]	@ 0xffffffe4
 800f600:	ee24 3a84 	vmul.f32	s6, s9, s8
 800f604:	ee27 2a26 	vmul.f32	s4, s14, s13
 800f608:	ee64 4aa6 	vmul.f32	s9, s9, s13
 800f60c:	ee65 3aa6 	vmul.f32	s7, s11, s13
 800f610:	ee27 7a04 	vmul.f32	s14, s14, s8
 800f614:	ee65 5a84 	vmul.f32	s11, s11, s8
 800f618:	ee65 6a26 	vmul.f32	s13, s10, s13
 800f61c:	ee25 5a04 	vmul.f32	s10, s10, s8
 800f620:	ee37 7a64 	vsub.f32	s14, s14, s9
 800f624:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800f628:	ee33 4a02 	vadd.f32	s8, s6, s4
 800f62c:	ee33 5ac5 	vsub.f32	s10, s7, s10
 800f630:	ed05 7a07 	vstr	s14, [r5, #-28]	@ 0xffffffe4
 800f634:	ed05 4a08 	vstr	s8, [r5, #-32]	@ 0xffffffe0
 800f638:	ed03 5a08 	vstr	s10, [r3, #-32]	@ 0xffffffe0
 800f63c:	ed43 6a07 	vstr	s13, [r3, #-28]	@ 0xffffffe4
 800f640:	ed52 6a06 	vldr	s13, [r2, #-24]	@ 0xffffffe8
 800f644:	ed12 7a05 	vldr	s14, [r2, #-20]	@ 0xffffffec
 800f648:	ee61 4aa6 	vmul.f32	s9, s3, s13
 800f64c:	ee27 4a87 	vmul.f32	s8, s15, s14
 800f650:	ee61 5a87 	vmul.f32	s11, s3, s14
 800f654:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f658:	ee22 5a87 	vmul.f32	s10, s5, s14
 800f65c:	ee26 7a07 	vmul.f32	s14, s12, s14
 800f660:	ee26 6a26 	vmul.f32	s12, s12, s13
 800f664:	ee62 6aa6 	vmul.f32	s13, s5, s13
 800f668:	ee74 4a84 	vadd.f32	s9, s9, s8
 800f66c:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800f670:	ee35 6a46 	vsub.f32	s12, s10, s12
 800f674:	ee37 7a26 	vadd.f32	s14, s14, s13
 800f678:	ed45 4a06 	vstr	s9, [r5, #-24]	@ 0xffffffe8
 800f67c:	ed45 7a05 	vstr	s15, [r5, #-20]	@ 0xffffffec
 800f680:	ed03 6a06 	vstr	s12, [r3, #-24]	@ 0xffffffe8
 800f684:	ed03 7a05 	vstr	s14, [r3, #-20]	@ 0xffffffec
 800f688:	f47f af5a 	bne.w	800f540 <arm_cfft_radix8by2_f32+0x34>
 800f68c:	687a      	ldr	r2, [r7, #4]
 800f68e:	b28c      	uxth	r4, r1
 800f690:	2302      	movs	r3, #2
 800f692:	4621      	mov	r1, r4
 800f694:	f000 fbc2 	bl	800fe1c <arm_radix8_butterfly_f32>
 800f698:	4621      	mov	r1, r4
 800f69a:	687a      	ldr	r2, [r7, #4]
 800f69c:	4640      	mov	r0, r8
 800f69e:	2302      	movs	r3, #2
 800f6a0:	ecbd 8b06 	vpop	{d8-d10}
 800f6a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f6a8:	f000 bbb8 	b.w	800fe1c <arm_radix8_butterfly_f32>

0800f6ac <arm_cfft_radix8by4_f32>:
 800f6ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6b0:	ed2d 8b06 	vpush	{d8-d10}
 800f6b4:	8804      	ldrh	r4, [r0, #0]
 800f6b6:	b08f      	sub	sp, #60	@ 0x3c
 800f6b8:	ed91 6a00 	vldr	s12, [r1]
 800f6bc:	460a      	mov	r2, r1
 800f6be:	0864      	lsrs	r4, r4, #1
 800f6c0:	ed91 7a01 	vldr	s14, [r1, #4]
 800f6c4:	9101      	str	r1, [sp, #4]
 800f6c6:	00a3      	lsls	r3, r4, #2
 800f6c8:	6841      	ldr	r1, [r0, #4]
 800f6ca:	0864      	lsrs	r4, r4, #1
 800f6cc:	900c      	str	r0, [sp, #48]	@ 0x30
 800f6ce:	9205      	str	r2, [sp, #20]
 800f6d0:	f101 0610 	add.w	r6, r1, #16
 800f6d4:	4625      	mov	r5, r4
 800f6d6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800f6d8:	f101 0408 	add.w	r4, r1, #8
 800f6dc:	9602      	str	r6, [sp, #8]
 800f6de:	9407      	str	r4, [sp, #28]
 800f6e0:	18d4      	adds	r4, r2, r3
 800f6e2:	1eaa      	subs	r2, r5, #2
 800f6e4:	f101 0518 	add.w	r5, r1, #24
 800f6e8:	18e0      	adds	r0, r4, r3
 800f6ea:	edd4 4a00 	vldr	s9, [r4]
 800f6ee:	ed94 4a01 	vldr	s8, [r4, #4]
 800f6f2:	46a6      	mov	lr, r4
 800f6f4:	edd0 6a00 	vldr	s13, [r0]
 800f6f8:	18c7      	adds	r7, r0, r3
 800f6fa:	edd0 7a01 	vldr	s15, [r0, #4]
 800f6fe:	46a0      	mov	r8, r4
 800f700:	ee76 5a26 	vadd.f32	s11, s12, s13
 800f704:	ed97 5a00 	vldr	s10, [r7]
 800f708:	ee76 6a66 	vsub.f32	s13, s12, s13
 800f70c:	4604      	mov	r4, r0
 800f70e:	9506      	str	r5, [sp, #24]
 800f710:	4605      	mov	r5, r0
 800f712:	ee75 2aa4 	vadd.f32	s5, s11, s9
 800f716:	900a      	str	r0, [sp, #40]	@ 0x28
 800f718:	9801      	ldr	r0, [sp, #4]
 800f71a:	ee37 6a27 	vadd.f32	s12, s14, s15
 800f71e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f722:	ed97 3a01 	vldr	s6, [r7, #4]
 800f726:	ee72 2a85 	vadd.f32	s5, s5, s10
 800f72a:	46bc      	mov	ip, r7
 800f72c:	ee76 3a84 	vadd.f32	s7, s13, s8
 800f730:	9704      	str	r7, [sp, #16]
 800f732:	ee36 7a44 	vsub.f32	s14, s12, s8
 800f736:	f8cd e00c 	str.w	lr, [sp, #12]
 800f73a:	ee12 9a90 	vmov	r9, s5
 800f73e:	ee75 5ae4 	vsub.f32	s11, s11, s9
 800f742:	ee76 6ac4 	vsub.f32	s13, s13, s8
 800f746:	1f3e      	subs	r6, r7, #4
 800f748:	f840 9b08 	str.w	r9, [r0], #8
 800f74c:	ee37 4ae4 	vsub.f32	s8, s15, s9
 800f750:	edde 2a01 	vldr	s5, [lr, #4]
 800f754:	ee77 7aa4 	vadd.f32	s15, s15, s9
 800f758:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800f75c:	eddc 4a01 	vldr	s9, [ip, #4]
 800f760:	ee36 6a22 	vadd.f32	s12, s12, s5
 800f764:	9001      	str	r0, [sp, #4]
 800f766:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800f76a:	9805      	ldr	r0, [sp, #20]
 800f76c:	ee13 9a90 	vmov	r9, s7
 800f770:	ee37 7a43 	vsub.f32	s14, s14, s6
 800f774:	ee36 6a24 	vadd.f32	s12, s12, s9
 800f778:	f1ae 0704 	sub.w	r7, lr, #4
 800f77c:	ee74 4a05 	vadd.f32	s9, s8, s10
 800f780:	ee76 6a83 	vadd.f32	s13, s13, s6
 800f784:	ed80 6a01 	vstr	s12, [r0, #4]
 800f788:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800f78c:	f848 9b08 	str.w	r9, [r8], #8
 800f790:	edce 4a01 	vstr	s9, [lr, #4]
 800f794:	ee15 ea90 	vmov	lr, s11
 800f798:	f844 eb08 	str.w	lr, [r4], #8
 800f79c:	ee16 ea90 	vmov	lr, s13
 800f7a0:	9408      	str	r4, [sp, #32]
 800f7a2:	462c      	mov	r4, r5
 800f7a4:	ed85 7a01 	vstr	s14, [r5, #4]
 800f7a8:	9d04      	ldr	r5, [sp, #16]
 800f7aa:	f84c eb08 	str.w	lr, [ip], #8
 800f7ae:	edc5 7a01 	vstr	s15, [r5, #4]
 800f7b2:	0855      	lsrs	r5, r2, #1
 800f7b4:	9509      	str	r5, [sp, #36]	@ 0x24
 800f7b6:	f000 8130 	beq.w	800fa1a <arm_cfft_radix8by4_f32+0x36e>
 800f7ba:	9805      	ldr	r0, [sp, #20]
 800f7bc:	3b08      	subs	r3, #8
 800f7be:	46ab      	mov	fp, r5
 800f7c0:	f1a4 020c 	sub.w	r2, r4, #12
 800f7c4:	f100 0510 	add.w	r5, r0, #16
 800f7c8:	f101 0920 	add.w	r9, r1, #32
 800f7cc:	f101 0e30 	add.w	lr, r1, #48	@ 0x30
 800f7d0:	f8dd a008 	ldr.w	sl, [sp, #8]
 800f7d4:	4433      	add	r3, r6
 800f7d6:	3410      	adds	r4, #16
 800f7d8:	4660      	mov	r0, ip
 800f7da:	4641      	mov	r1, r8
 800f7dc:	f8cd c034 	str.w	ip, [sp, #52]	@ 0x34
 800f7e0:	ed54 6a02 	vldr	s13, [r4, #-8]
 800f7e4:	f1bb 0b01 	subs.w	fp, fp, #1
 800f7e8:	ed55 5a02 	vldr	s11, [r5, #-8]
 800f7ec:	f10a 0a08 	add.w	sl, sl, #8
 800f7f0:	edd1 7a00 	vldr	s15, [r1]
 800f7f4:	f105 0508 	add.w	r5, r5, #8
 800f7f8:	ee75 3aa6 	vadd.f32	s7, s11, s13
 800f7fc:	edd0 2a00 	vldr	s5, [r0]
 800f800:	ed14 7a01 	vldr	s14, [r4, #-4]
 800f804:	ee75 5ae6 	vsub.f32	s11, s11, s13
 800f808:	ed55 6a03 	vldr	s13, [r5, #-12]
 800f80c:	f1a2 0208 	sub.w	r2, r2, #8
 800f810:	ee73 4aa7 	vadd.f32	s9, s7, s15
 800f814:	ed90 2a01 	vldr	s4, [r0, #4]
 800f818:	ee36 5a87 	vadd.f32	s10, s13, s14
 800f81c:	ed91 6a01 	vldr	s12, [r1, #4]
 800f820:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800f824:	f109 0910 	add.w	r9, r9, #16
 800f828:	ee74 6aa2 	vadd.f32	s13, s9, s5
 800f82c:	f104 0408 	add.w	r4, r4, #8
 800f830:	ee73 3ae7 	vsub.f32	s7, s7, s15
 800f834:	f10e 0e18 	add.w	lr, lr, #24
 800f838:	ee37 3a67 	vsub.f32	s6, s14, s15
 800f83c:	f1a3 0308 	sub.w	r3, r3, #8
 800f840:	ed45 6a04 	vstr	s13, [r5, #-16]
 800f844:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f848:	edd1 6a01 	vldr	s13, [r1, #4]
 800f84c:	ee75 1a86 	vadd.f32	s3, s11, s12
 800f850:	edd0 4a01 	vldr	s9, [r0, #4]
 800f854:	ee33 3a22 	vadd.f32	s6, s6, s5
 800f858:	ee75 6a26 	vadd.f32	s13, s10, s13
 800f85c:	ee35 5a46 	vsub.f32	s10, s10, s12
 800f860:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800f864:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800f868:	ee71 1ac2 	vsub.f32	s3, s3, s4
 800f86c:	ee35 5a42 	vsub.f32	s10, s10, s4
 800f870:	ed45 6a03 	vstr	s13, [r5, #-12]
 800f874:	ee36 2a02 	vadd.f32	s4, s12, s4
 800f878:	edd6 7a00 	vldr	s15, [r6]
 800f87c:	ee73 3ae2 	vsub.f32	s7, s7, s5
 800f880:	ed97 1a00 	vldr	s2, [r7]
 800f884:	ee77 2a62 	vsub.f32	s5, s14, s5
 800f888:	ed92 8a04 	vldr	s16, [r2, #16]
 800f88c:	ee71 8a27 	vadd.f32	s17, s2, s15
 800f890:	ed93 aa04 	vldr	s20, [r3, #16]
 800f894:	ed16 7a01 	vldr	s14, [r6, #-4]
 800f898:	ee71 7a67 	vsub.f32	s15, s2, s15
 800f89c:	ed57 0a01 	vldr	s1, [r7, #-4]
 800f8a0:	ee38 1a4a 	vsub.f32	s2, s16, s20
 800f8a4:	ee38 6a88 	vadd.f32	s12, s17, s16
 800f8a8:	edd3 9a03 	vldr	s19, [r3, #12]
 800f8ac:	ee30 0a87 	vadd.f32	s0, s1, s14
 800f8b0:	ed92 9a03 	vldr	s18, [r2, #12]
 800f8b4:	ee78 5ac8 	vsub.f32	s11, s17, s16
 800f8b8:	ee36 6a0a 	vadd.f32	s12, s12, s20
 800f8bc:	ee30 7ac7 	vsub.f32	s14, s1, s14
 800f8c0:	ee37 4ac9 	vsub.f32	s8, s15, s18
 800f8c4:	ee16 ca10 	vmov	ip, s12
 800f8c8:	ee30 6a49 	vsub.f32	s12, s0, s18
 800f8cc:	ee77 4a01 	vadd.f32	s9, s14, s2
 800f8d0:	f847 c908 	str.w	ip, [r7], #-8
 800f8d4:	ee34 4a29 	vadd.f32	s8, s8, s19
 800f8d8:	edd2 8a03 	vldr	s17, [r2, #12]
 800f8dc:	ee39 9ac9 	vsub.f32	s18, s19, s18
 800f8e0:	ed93 8a03 	vldr	s16, [r3, #12]
 800f8e4:	ee71 0a47 	vsub.f32	s1, s2, s14
 800f8e8:	ee30 0a28 	vadd.f32	s0, s0, s17
 800f8ec:	ee39 1a67 	vsub.f32	s2, s18, s15
 800f8f0:	ee36 6a69 	vsub.f32	s12, s12, s19
 800f8f4:	ee30 0a08 	vadd.f32	s0, s0, s16
 800f8f8:	ee75 5aca 	vsub.f32	s11, s11, s20
 800f8fc:	ed87 0a01 	vstr	s0, [r7, #4]
 800f900:	ed1a 0a04 	vldr	s0, [sl, #-16]
 800f904:	ed5a 6a03 	vldr	s13, [sl, #-12]
 800f908:	ee21 8a80 	vmul.f32	s16, s3, s0
 800f90c:	ee23 7a26 	vmul.f32	s14, s6, s13
 800f910:	ee64 7a26 	vmul.f32	s15, s8, s13
 800f914:	ee61 1aa6 	vmul.f32	s3, s3, s13
 800f918:	ee24 4a00 	vmul.f32	s8, s8, s0
 800f91c:	ee23 3a00 	vmul.f32	s6, s6, s0
 800f920:	ee64 6aa6 	vmul.f32	s13, s9, s13
 800f924:	ee24 0a80 	vmul.f32	s0, s9, s0
 800f928:	ee38 7a07 	vadd.f32	s14, s16, s14
 800f92c:	ee76 6a84 	vadd.f32	s13, s13, s8
 800f930:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800f934:	ee33 3a61 	vsub.f32	s6, s6, s3
 800f938:	ee17 ca10 	vmov	ip, s14
 800f93c:	f841 cb08 	str.w	ip, [r1], #8
 800f940:	ed01 3a01 	vstr	s6, [r1, #-4]
 800f944:	ed82 0a04 	vstr	s0, [r2, #16]
 800f948:	edc2 6a03 	vstr	s13, [r2, #12]
 800f94c:	ed59 6a08 	vldr	s13, [r9, #-32]	@ 0xffffffe0
 800f950:	ed59 7a07 	vldr	s15, [r9, #-28]	@ 0xffffffe4
 800f954:	ee25 7ae6 	vnmul.f32	s14, s11, s13
 800f958:	ee23 4aa6 	vmul.f32	s8, s7, s13
 800f95c:	ee65 4a27 	vmul.f32	s9, s10, s15
 800f960:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800f964:	ee63 3aa7 	vmul.f32	s7, s7, s15
 800f968:	ee66 7a27 	vmul.f32	s15, s12, s15
 800f96c:	ee25 5a26 	vmul.f32	s10, s10, s13
 800f970:	ee66 6a26 	vmul.f32	s13, s12, s13
 800f974:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f978:	ee34 6a24 	vadd.f32	s12, s8, s9
 800f97c:	ee75 6ae6 	vsub.f32	s13, s11, s13
 800f980:	ee35 5a63 	vsub.f32	s10, s10, s7
 800f984:	ee17 ca90 	vmov	ip, s15
 800f988:	ed04 6a04 	vstr	s12, [r4, #-16]
 800f98c:	ed04 5a03 	vstr	s10, [r4, #-12]
 800f990:	f846 c908 	str.w	ip, [r6], #-8
 800f994:	edc6 6a01 	vstr	s13, [r6, #4]
 800f998:	ed5e 7a0c 	vldr	s15, [lr, #-48]	@ 0xffffffd0
 800f99c:	ed1e 7a0b 	vldr	s14, [lr, #-44]	@ 0xffffffd4
 800f9a0:	ee62 5a27 	vmul.f32	s11, s4, s15
 800f9a4:	ee22 6a87 	vmul.f32	s12, s5, s14
 800f9a8:	ee22 2a07 	vmul.f32	s4, s4, s14
 800f9ac:	ee62 2aa7 	vmul.f32	s5, s5, s15
 800f9b0:	ee61 6a07 	vmul.f32	s13, s2, s14
 800f9b4:	ee20 7a87 	vmul.f32	s14, s1, s14
 800f9b8:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800f9bc:	ee61 7a27 	vmul.f32	s15, s2, s15
 800f9c0:	ee35 6a86 	vadd.f32	s12, s11, s12
 800f9c4:	ee72 2ac2 	vsub.f32	s5, s5, s4
 800f9c8:	ee76 0ae0 	vsub.f32	s1, s13, s1
 800f9cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f9d0:	ee16 ca10 	vmov	ip, s12
 800f9d4:	f840 cb08 	str.w	ip, [r0], #8
 800f9d8:	ed40 2a01 	vstr	s5, [r0, #-4]
 800f9dc:	edc3 0a04 	vstr	s1, [r3, #16]
 800f9e0:	edc3 7a03 	vstr	s15, [r3, #12]
 800f9e4:	f47f aefc 	bne.w	800f7e0 <arm_cfft_radix8by4_f32+0x134>
 800f9e8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f9ea:	9802      	ldr	r0, [sp, #8]
 800f9ec:	00cb      	lsls	r3, r1, #3
 800f9ee:	f8dd c034 	ldr.w	ip, [sp, #52]	@ 0x34
 800f9f2:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800f9f6:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800f9fa:	4498      	add	r8, r3
 800f9fc:	449c      	add	ip, r3
 800f9fe:	9102      	str	r1, [sp, #8]
 800fa00:	9901      	ldr	r1, [sp, #4]
 800fa02:	4419      	add	r1, r3
 800fa04:	9101      	str	r1, [sp, #4]
 800fa06:	9907      	ldr	r1, [sp, #28]
 800fa08:	4419      	add	r1, r3
 800fa0a:	9107      	str	r1, [sp, #28]
 800fa0c:	9908      	ldr	r1, [sp, #32]
 800fa0e:	4419      	add	r1, r3
 800fa10:	9b06      	ldr	r3, [sp, #24]
 800fa12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fa16:	9108      	str	r1, [sp, #32]
 800fa18:	9306      	str	r3, [sp, #24]
 800fa1a:	9a01      	ldr	r2, [sp, #4]
 800fa1c:	2304      	movs	r3, #4
 800fa1e:	9e08      	ldr	r6, [sp, #32]
 800fa20:	edd2 7a00 	vldr	s15, [r2]
 800fa24:	ed96 7a00 	vldr	s14, [r6]
 800fa28:	edd8 2a00 	vldr	s5, [r8]
 800fa2c:	ee77 5a87 	vadd.f32	s11, s15, s14
 800fa30:	ed9c 3a00 	vldr	s6, [ip]
 800fa34:	ed92 6a01 	vldr	s12, [r2, #4]
 800fa38:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800fa3c:	edd6 6a01 	vldr	s13, [r6, #4]
 800fa40:	ee75 4aa2 	vadd.f32	s9, s11, s5
 800fa44:	ed9c 2a01 	vldr	s4, [ip, #4]
 800fa48:	ee36 5a26 	vadd.f32	s10, s12, s13
 800fa4c:	edd8 7a01 	vldr	s15, [r8, #4]
 800fa50:	ee76 6a66 	vsub.f32	s13, s12, s13
 800fa54:	9d02      	ldr	r5, [sp, #8]
 800fa56:	ee34 6a83 	vadd.f32	s12, s9, s6
 800fa5a:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 800fa5e:	ee37 4a27 	vadd.f32	s8, s14, s15
 800fa62:	9805      	ldr	r0, [sp, #20]
 800fa64:	ee76 4ae2 	vsub.f32	s9, s13, s5
 800fa68:	4621      	mov	r1, r4
 800fa6a:	ed82 6a00 	vstr	s12, [r2]
 800fa6e:	ee35 6ae2 	vsub.f32	s12, s11, s5
 800fa72:	edd8 3a01 	vldr	s7, [r8, #4]
 800fa76:	ee75 5a67 	vsub.f32	s11, s10, s15
 800fa7a:	eddc 1a01 	vldr	s3, [ip, #4]
 800fa7e:	ee34 4a42 	vsub.f32	s8, s8, s4
 800fa82:	ee75 3a23 	vadd.f32	s7, s10, s7
 800fa86:	ee74 4a83 	vadd.f32	s9, s9, s6
 800fa8a:	ee76 6aa2 	vadd.f32	s13, s13, s5
 800fa8e:	ee33 5aa1 	vadd.f32	s10, s7, s3
 800fa92:	ee37 7a67 	vsub.f32	s14, s14, s15
 800fa96:	ee36 6a43 	vsub.f32	s12, s12, s6
 800fa9a:	ed82 5a01 	vstr	s10, [r2, #4]
 800fa9e:	ee75 5ac2 	vsub.f32	s11, s11, s4
 800faa2:	9a07      	ldr	r2, [sp, #28]
 800faa4:	ee77 7a02 	vadd.f32	s15, s14, s4
 800faa8:	ee36 7ac3 	vsub.f32	s14, s13, s6
 800faac:	edd2 2a00 	vldr	s5, [r2]
 800fab0:	ed92 5a01 	vldr	s10, [r2, #4]
 800fab4:	ee64 3a22 	vmul.f32	s7, s8, s5
 800fab8:	ee24 4a05 	vmul.f32	s8, s8, s10
 800fabc:	ee24 5a85 	vmul.f32	s10, s9, s10
 800fac0:	ee64 4aa2 	vmul.f32	s9, s9, s5
 800fac4:	ee33 5a85 	vadd.f32	s10, s7, s10
 800fac8:	ee74 4ac4 	vsub.f32	s9, s9, s8
 800facc:	ed88 5a00 	vstr	s10, [r8]
 800fad0:	edc8 4a01 	vstr	s9, [r8, #4]
 800fad4:	edd5 4a01 	vldr	s9, [r5, #4]
 800fad8:	edd5 6a00 	vldr	s13, [r5]
 800fadc:	9d06      	ldr	r5, [sp, #24]
 800fade:	ee26 5a26 	vmul.f32	s10, s12, s13
 800fae2:	ee26 6a24 	vmul.f32	s12, s12, s9
 800fae6:	ee65 6aa6 	vmul.f32	s13, s11, s13
 800faea:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800faee:	ee36 6ac6 	vsub.f32	s12, s13, s12
 800faf2:	ee75 5a25 	vadd.f32	s11, s10, s11
 800faf6:	ed86 6a01 	vstr	s12, [r6, #4]
 800fafa:	edc6 5a00 	vstr	s11, [r6]
 800fafe:	edd5 5a01 	vldr	s11, [r5, #4]
 800fb02:	edd5 6a00 	vldr	s13, [r5]
 800fb06:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800fb08:	ee27 6aa6 	vmul.f32	s12, s15, s13
 800fb0c:	ee67 6a26 	vmul.f32	s13, s14, s13
 800fb10:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800fb14:	ee27 7a25 	vmul.f32	s14, s14, s11
 800fb18:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800fb1c:	ee36 7a07 	vadd.f32	s14, s12, s14
 800fb20:	edcc 7a01 	vstr	s15, [ip, #4]
 800fb24:	ed8c 7a00 	vstr	s14, [ip]
 800fb28:	6872      	ldr	r2, [r6, #4]
 800fb2a:	f000 f977 	bl	800fe1c <arm_radix8_butterfly_f32>
 800fb2e:	9803      	ldr	r0, [sp, #12]
 800fb30:	4621      	mov	r1, r4
 800fb32:	6872      	ldr	r2, [r6, #4]
 800fb34:	2304      	movs	r3, #4
 800fb36:	f000 f971 	bl	800fe1c <arm_radix8_butterfly_f32>
 800fb3a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800fb3c:	4621      	mov	r1, r4
 800fb3e:	6872      	ldr	r2, [r6, #4]
 800fb40:	2304      	movs	r3, #4
 800fb42:	f000 f96b 	bl	800fe1c <arm_radix8_butterfly_f32>
 800fb46:	4621      	mov	r1, r4
 800fb48:	6872      	ldr	r2, [r6, #4]
 800fb4a:	2304      	movs	r3, #4
 800fb4c:	9804      	ldr	r0, [sp, #16]
 800fb4e:	b00f      	add	sp, #60	@ 0x3c
 800fb50:	ecbd 8b06 	vpop	{d8-d10}
 800fb54:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb58:	f000 b960 	b.w	800fe1c <arm_radix8_butterfly_f32>

0800fb5c <arm_cfft_f32>:
 800fb5c:	2a01      	cmp	r2, #1
 800fb5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb62:	4606      	mov	r6, r0
 800fb64:	4617      	mov	r7, r2
 800fb66:	460c      	mov	r4, r1
 800fb68:	4698      	mov	r8, r3
 800fb6a:	8805      	ldrh	r5, [r0, #0]
 800fb6c:	d053      	beq.n	800fc16 <arm_cfft_f32+0xba>
 800fb6e:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 800fb72:	d04b      	beq.n	800fc0c <arm_cfft_f32+0xb0>
 800fb74:	d916      	bls.n	800fba4 <arm_cfft_f32+0x48>
 800fb76:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 800fb7a:	d01a      	beq.n	800fbb2 <arm_cfft_f32+0x56>
 800fb7c:	d95a      	bls.n	800fc34 <arm_cfft_f32+0xd8>
 800fb7e:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 800fb82:	d043      	beq.n	800fc0c <arm_cfft_f32+0xb0>
 800fb84:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 800fb88:	d105      	bne.n	800fb96 <arm_cfft_f32+0x3a>
 800fb8a:	2301      	movs	r3, #1
 800fb8c:	6872      	ldr	r2, [r6, #4]
 800fb8e:	4629      	mov	r1, r5
 800fb90:	4620      	mov	r0, r4
 800fb92:	f000 f943 	bl	800fe1c <arm_radix8_butterfly_f32>
 800fb96:	f1b8 0f00 	cmp.w	r8, #0
 800fb9a:	d111      	bne.n	800fbc0 <arm_cfft_f32+0x64>
 800fb9c:	2f01      	cmp	r7, #1
 800fb9e:	d016      	beq.n	800fbce <arm_cfft_f32+0x72>
 800fba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fba4:	2d20      	cmp	r5, #32
 800fba6:	d031      	beq.n	800fc0c <arm_cfft_f32+0xb0>
 800fba8:	d948      	bls.n	800fc3c <arm_cfft_f32+0xe0>
 800fbaa:	2d40      	cmp	r5, #64	@ 0x40
 800fbac:	d0ed      	beq.n	800fb8a <arm_cfft_f32+0x2e>
 800fbae:	2d80      	cmp	r5, #128	@ 0x80
 800fbb0:	d1f1      	bne.n	800fb96 <arm_cfft_f32+0x3a>
 800fbb2:	4621      	mov	r1, r4
 800fbb4:	4630      	mov	r0, r6
 800fbb6:	f7ff fca9 	bl	800f50c <arm_cfft_radix8by2_f32>
 800fbba:	f1b8 0f00 	cmp.w	r8, #0
 800fbbe:	d0ed      	beq.n	800fb9c <arm_cfft_f32+0x40>
 800fbc0:	68b2      	ldr	r2, [r6, #8]
 800fbc2:	4620      	mov	r0, r4
 800fbc4:	89b1      	ldrh	r1, [r6, #12]
 800fbc6:	f7f0 fb23 	bl	8000210 <arm_bitreversal_32>
 800fbca:	2f01      	cmp	r7, #1
 800fbcc:	d1e8      	bne.n	800fba0 <arm_cfft_f32+0x44>
 800fbce:	ee07 5a90 	vmov	s15, r5
 800fbd2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800fbd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fbda:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800fbde:	2d00      	cmp	r5, #0
 800fbe0:	d0de      	beq.n	800fba0 <arm_cfft_f32+0x44>
 800fbe2:	f104 0108 	add.w	r1, r4, #8
 800fbe6:	2300      	movs	r3, #0
 800fbe8:	ed11 7a02 	vldr	s14, [r1, #-8]
 800fbec:	3301      	adds	r3, #1
 800fbee:	ed51 7a01 	vldr	s15, [r1, #-4]
 800fbf2:	3108      	adds	r1, #8
 800fbf4:	429d      	cmp	r5, r3
 800fbf6:	ee27 7a26 	vmul.f32	s14, s14, s13
 800fbfa:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800fbfe:	ed01 7a04 	vstr	s14, [r1, #-16]
 800fc02:	ed41 7a03 	vstr	s15, [r1, #-12]
 800fc06:	d1ef      	bne.n	800fbe8 <arm_cfft_f32+0x8c>
 800fc08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc0c:	4621      	mov	r1, r4
 800fc0e:	4630      	mov	r0, r6
 800fc10:	f7ff fd4c 	bl	800f6ac <arm_cfft_radix8by4_f32>
 800fc14:	e7bf      	b.n	800fb96 <arm_cfft_f32+0x3a>
 800fc16:	b1a5      	cbz	r5, 800fc42 <arm_cfft_f32+0xe6>
 800fc18:	f101 030c 	add.w	r3, r1, #12
 800fc1c:	2200      	movs	r2, #0
 800fc1e:	ed53 7a02 	vldr	s15, [r3, #-8]
 800fc22:	3201      	adds	r2, #1
 800fc24:	3308      	adds	r3, #8
 800fc26:	eef1 7a67 	vneg.f32	s15, s15
 800fc2a:	4295      	cmp	r5, r2
 800fc2c:	ed43 7a04 	vstr	s15, [r3, #-16]
 800fc30:	d1f5      	bne.n	800fc1e <arm_cfft_f32+0xc2>
 800fc32:	e79c      	b.n	800fb6e <arm_cfft_f32+0x12>
 800fc34:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 800fc38:	d0a7      	beq.n	800fb8a <arm_cfft_f32+0x2e>
 800fc3a:	e7ac      	b.n	800fb96 <arm_cfft_f32+0x3a>
 800fc3c:	2d10      	cmp	r5, #16
 800fc3e:	d0b8      	beq.n	800fbb2 <arm_cfft_f32+0x56>
 800fc40:	e7a9      	b.n	800fb96 <arm_cfft_f32+0x3a>
 800fc42:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 800fc46:	d896      	bhi.n	800fb76 <arm_cfft_f32+0x1a>
 800fc48:	e7ac      	b.n	800fba4 <arm_cfft_f32+0x48>
 800fc4a:	bf00      	nop

0800fc4c <arm_cmplx_mag_f32>:
 800fc4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc50:	ea5f 0892 	movs.w	r8, r2, lsr #2
 800fc54:	b084      	sub	sp, #16
 800fc56:	d07f      	beq.n	800fd58 <arm_cmplx_mag_f32+0x10c>
 800fc58:	f100 0420 	add.w	r4, r0, #32
 800fc5c:	f101 0510 	add.w	r5, r1, #16
 800fc60:	4646      	mov	r6, r8
 800fc62:	2700      	movs	r7, #0
 800fc64:	e05a      	b.n	800fd1c <arm_cmplx_mag_f32+0xd0>
 800fc66:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800fc6a:	eeb4 0a40 	vcmp.f32	s0, s0
 800fc6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc72:	f040 80a4 	bne.w	800fdbe <arm_cmplx_mag_f32+0x172>
 800fc76:	ed05 0a04 	vstr	s0, [r5, #-16]
 800fc7a:	ed54 7a06 	vldr	s15, [r4, #-24]	@ 0xffffffe8
 800fc7e:	ed14 0a05 	vldr	s0, [r4, #-20]	@ 0xffffffec
 800fc82:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800fc86:	ee20 0a00 	vmul.f32	s0, s0, s0
 800fc8a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800fc8e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800fc92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc96:	f2c0 808f 	blt.w	800fdb8 <arm_cmplx_mag_f32+0x16c>
 800fc9a:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800fc9e:	eeb4 0a40 	vcmp.f32	s0, s0
 800fca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fca6:	f040 80af 	bne.w	800fe08 <arm_cmplx_mag_f32+0x1bc>
 800fcaa:	ed05 0a03 	vstr	s0, [r5, #-12]
 800fcae:	ed54 7a04 	vldr	s15, [r4, #-16]
 800fcb2:	ed14 0a03 	vldr	s0, [r4, #-12]
 800fcb6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800fcba:	ee20 0a00 	vmul.f32	s0, s0, s0
 800fcbe:	ee77 7a80 	vadd.f32	s15, s15, s0
 800fcc2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800fcc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcca:	db72      	blt.n	800fdb2 <arm_cmplx_mag_f32+0x166>
 800fccc:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800fcd0:	eeb4 0a40 	vcmp.f32	s0, s0
 800fcd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcd8:	f040 808c 	bne.w	800fdf4 <arm_cmplx_mag_f32+0x1a8>
 800fcdc:	ed05 0a02 	vstr	s0, [r5, #-8]
 800fce0:	ed54 7a02 	vldr	s15, [r4, #-8]
 800fce4:	ed14 0a01 	vldr	s0, [r4, #-4]
 800fce8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800fcec:	ee20 0a00 	vmul.f32	s0, s0, s0
 800fcf0:	ee77 7a80 	vadd.f32	s15, s15, s0
 800fcf4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800fcf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcfc:	db20      	blt.n	800fd40 <arm_cmplx_mag_f32+0xf4>
 800fcfe:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800fd02:	eeb4 0a40 	vcmp.f32	s0, s0
 800fd06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd0a:	d169      	bne.n	800fde0 <arm_cmplx_mag_f32+0x194>
 800fd0c:	3e01      	subs	r6, #1
 800fd0e:	ed05 0a01 	vstr	s0, [r5, #-4]
 800fd12:	f104 0420 	add.w	r4, r4, #32
 800fd16:	f105 0510 	add.w	r5, r5, #16
 800fd1a:	d019      	beq.n	800fd50 <arm_cmplx_mag_f32+0x104>
 800fd1c:	ed54 7a08 	vldr	s15, [r4, #-32]	@ 0xffffffe0
 800fd20:	ed14 0a07 	vldr	s0, [r4, #-28]	@ 0xffffffe4
 800fd24:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800fd28:	ee20 0a00 	vmul.f32	s0, s0, s0
 800fd2c:	ee77 7a80 	vadd.f32	s15, s15, s0
 800fd30:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800fd34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd38:	da95      	bge.n	800fc66 <arm_cmplx_mag_f32+0x1a>
 800fd3a:	f845 7c10 	str.w	r7, [r5, #-16]
 800fd3e:	e79c      	b.n	800fc7a <arm_cmplx_mag_f32+0x2e>
 800fd40:	3e01      	subs	r6, #1
 800fd42:	f845 7c04 	str.w	r7, [r5, #-4]
 800fd46:	f104 0420 	add.w	r4, r4, #32
 800fd4a:	f105 0510 	add.w	r5, r5, #16
 800fd4e:	d1e5      	bne.n	800fd1c <arm_cmplx_mag_f32+0xd0>
 800fd50:	eb00 1048 	add.w	r0, r0, r8, lsl #5
 800fd54:	eb01 1108 	add.w	r1, r1, r8, lsl #4
 800fd58:	f012 0503 	ands.w	r5, r2, #3
 800fd5c:	d026      	beq.n	800fdac <arm_cmplx_mag_f32+0x160>
 800fd5e:	f100 0408 	add.w	r4, r0, #8
 800fd62:	2600      	movs	r6, #0
 800fd64:	e00c      	b.n	800fd80 <arm_cmplx_mag_f32+0x134>
 800fd66:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800fd6a:	eeb4 0a40 	vcmp.f32	s0, s0
 800fd6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd72:	d12e      	bne.n	800fdd2 <arm_cmplx_mag_f32+0x186>
 800fd74:	3d01      	subs	r5, #1
 800fd76:	ed01 0a01 	vstr	s0, [r1, #-4]
 800fd7a:	f104 0408 	add.w	r4, r4, #8
 800fd7e:	d015      	beq.n	800fdac <arm_cmplx_mag_f32+0x160>
 800fd80:	ed54 7a02 	vldr	s15, [r4, #-8]
 800fd84:	3104      	adds	r1, #4
 800fd86:	ed14 0a01 	vldr	s0, [r4, #-4]
 800fd8a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800fd8e:	ee20 0a00 	vmul.f32	s0, s0, s0
 800fd92:	ee77 7a80 	vadd.f32	s15, s15, s0
 800fd96:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800fd9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd9e:	dae2      	bge.n	800fd66 <arm_cmplx_mag_f32+0x11a>
 800fda0:	3d01      	subs	r5, #1
 800fda2:	f841 6c04 	str.w	r6, [r1, #-4]
 800fda6:	f104 0408 	add.w	r4, r4, #8
 800fdaa:	d1e9      	bne.n	800fd80 <arm_cmplx_mag_f32+0x134>
 800fdac:	b004      	add	sp, #16
 800fdae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fdb2:	f845 7c08 	str.w	r7, [r5, #-8]
 800fdb6:	e793      	b.n	800fce0 <arm_cmplx_mag_f32+0x94>
 800fdb8:	f845 7c0c 	str.w	r7, [r5, #-12]
 800fdbc:	e777      	b.n	800fcae <arm_cmplx_mag_f32+0x62>
 800fdbe:	eeb0 0a67 	vmov.f32	s0, s15
 800fdc2:	9203      	str	r2, [sp, #12]
 800fdc4:	9102      	str	r1, [sp, #8]
 800fdc6:	9001      	str	r0, [sp, #4]
 800fdc8:	f006 fd9a 	bl	8016900 <sqrtf>
 800fdcc:	a801      	add	r0, sp, #4
 800fdce:	c807      	ldmia	r0, {r0, r1, r2}
 800fdd0:	e751      	b.n	800fc76 <arm_cmplx_mag_f32+0x2a>
 800fdd2:	eeb0 0a67 	vmov.f32	s0, s15
 800fdd6:	9101      	str	r1, [sp, #4]
 800fdd8:	f006 fd92 	bl	8016900 <sqrtf>
 800fddc:	9901      	ldr	r1, [sp, #4]
 800fdde:	e7c9      	b.n	800fd74 <arm_cmplx_mag_f32+0x128>
 800fde0:	eeb0 0a67 	vmov.f32	s0, s15
 800fde4:	9203      	str	r2, [sp, #12]
 800fde6:	9102      	str	r1, [sp, #8]
 800fde8:	9001      	str	r0, [sp, #4]
 800fdea:	f006 fd89 	bl	8016900 <sqrtf>
 800fdee:	a801      	add	r0, sp, #4
 800fdf0:	c807      	ldmia	r0, {r0, r1, r2}
 800fdf2:	e78b      	b.n	800fd0c <arm_cmplx_mag_f32+0xc0>
 800fdf4:	eeb0 0a67 	vmov.f32	s0, s15
 800fdf8:	9203      	str	r2, [sp, #12]
 800fdfa:	9102      	str	r1, [sp, #8]
 800fdfc:	9001      	str	r0, [sp, #4]
 800fdfe:	f006 fd7f 	bl	8016900 <sqrtf>
 800fe02:	a801      	add	r0, sp, #4
 800fe04:	c807      	ldmia	r0, {r0, r1, r2}
 800fe06:	e769      	b.n	800fcdc <arm_cmplx_mag_f32+0x90>
 800fe08:	eeb0 0a67 	vmov.f32	s0, s15
 800fe0c:	9203      	str	r2, [sp, #12]
 800fe0e:	9102      	str	r1, [sp, #8]
 800fe10:	9001      	str	r0, [sp, #4]
 800fe12:	f006 fd75 	bl	8016900 <sqrtf>
 800fe16:	a801      	add	r0, sp, #4
 800fe18:	c807      	ldmia	r0, {r0, r1, r2}
 800fe1a:	e746      	b.n	800fcaa <arm_cmplx_mag_f32+0x5e>

0800fe1c <arm_radix8_butterfly_f32>:
 800fe1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe20:	469e      	mov	lr, r3
 800fe22:	4603      	mov	r3, r0
 800fe24:	468a      	mov	sl, r1
 800fe26:	468b      	mov	fp, r1
 800fe28:	3304      	adds	r3, #4
 800fe2a:	ed2d 8b10 	vpush	{d8-d15}
 800fe2e:	469c      	mov	ip, r3
 800fe30:	b09d      	sub	sp, #116	@ 0x74
 800fe32:	ed9f 9ac3 	vldr	s18, [pc, #780]	@ 8010140 <arm_radix8_butterfly_f32+0x324>
 800fe36:	9019      	str	r0, [sp, #100]	@ 0x64
 800fe38:	921a      	str	r2, [sp, #104]	@ 0x68
 800fe3a:	931b      	str	r3, [sp, #108]	@ 0x6c
 800fe3c:	ea4f 03db 	mov.w	r3, fp, lsr #3
 800fe40:	f04f 0800 	mov.w	r8, #0
 800fe44:	461a      	mov	r2, r3
 800fe46:	9311      	str	r3, [sp, #68]	@ 0x44
 800fe48:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800fe4c:	4611      	mov	r1, r2
 800fe4e:	ea4f 09c2 	mov.w	r9, r2, lsl #3
 800fe52:	9300      	str	r3, [sp, #0]
 800fe54:	0053      	lsls	r3, r2, #1
 800fe56:	18d5      	adds	r5, r2, r3
 800fe58:	9301      	str	r3, [sp, #4]
 800fe5a:	0113      	lsls	r3, r2, #4
 800fe5c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800fe5e:	194c      	adds	r4, r1, r5
 800fe60:	eb02 0609 	add.w	r6, r2, r9
 800fe64:	9302      	str	r3, [sp, #8]
 800fe66:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800fe6a:	4613      	mov	r3, r2
 800fe6c:	190a      	adds	r2, r1, r4
 800fe6e:	eb06 0709 	add.w	r7, r6, r9
 800fe72:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800fe76:	1888      	adds	r0, r1, r2
 800fe78:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800fe7c:	4401      	add	r1, r0
 800fe7e:	3204      	adds	r2, #4
 800fe80:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800fe84:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800fe88:	9b00      	ldr	r3, [sp, #0]
 800fe8a:	3104      	adds	r1, #4
 800fe8c:	ed5c 7a01 	vldr	s15, [ip, #-4]
 800fe90:	44d8      	add	r8, fp
 800fe92:	ed90 7a00 	vldr	s14, [r0]
 800fe96:	ed94 5a00 	vldr	s10, [r4]
 800fe9a:	45c2      	cmp	sl, r8
 800fe9c:	edd7 3a00 	vldr	s7, [r7]
 800fea0:	ed96 6a00 	vldr	s12, [r6]
 800fea4:	ee37 1a85 	vadd.f32	s2, s15, s10
 800fea8:	ed52 6a01 	vldr	s13, [r2, #-4]
 800feac:	ee73 4a87 	vadd.f32	s9, s7, s14
 800feb0:	ee37 5ac5 	vsub.f32	s10, s15, s10
 800feb4:	edd5 7a00 	vldr	s15, [r5]
 800feb8:	ee73 3ac7 	vsub.f32	s7, s7, s14
 800febc:	ed11 7a01 	vldr	s14, [r1, #-4]
 800fec0:	ee36 2a26 	vadd.f32	s4, s12, s13
 800fec4:	ee37 4a87 	vadd.f32	s8, s15, s14
 800fec8:	ee76 6a66 	vsub.f32	s13, s12, s13
 800fecc:	ee71 5a24 	vadd.f32	s11, s2, s9
 800fed0:	ee32 6a04 	vadd.f32	s12, s4, s8
 800fed4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800fed8:	ee31 1a64 	vsub.f32	s2, s2, s9
 800fedc:	ee75 4a86 	vadd.f32	s9, s11, s12
 800fee0:	ee76 7ac7 	vsub.f32	s15, s13, s14
 800fee4:	ee75 5ac6 	vsub.f32	s11, s11, s12
 800fee8:	ed4c 4a01 	vstr	s9, [ip, #-4]
 800feec:	ee32 2a44 	vsub.f32	s4, s4, s8
 800fef0:	ee67 7a89 	vmul.f32	s15, s15, s18
 800fef4:	ed94 0a01 	vldr	s0, [r4, #4]
 800fef8:	edc4 5a00 	vstr	s11, [r4]
 800fefc:	ee36 7a87 	vadd.f32	s14, s13, s14
 800ff00:	edd6 5a01 	vldr	s11, [r6, #4]
 800ff04:	edd5 2a01 	vldr	s5, [r5, #4]
 800ff08:	ee75 1a27 	vadd.f32	s3, s10, s15
 800ff0c:	ed92 4a00 	vldr	s8, [r2]
 800ff10:	ee75 7a67 	vsub.f32	s15, s10, s15
 800ff14:	edd1 4a00 	vldr	s9, [r1]
 800ff18:	ee27 7a09 	vmul.f32	s14, s14, s18
 800ff1c:	ee35 3ac4 	vsub.f32	s6, s11, s8
 800ff20:	ed9c 6a00 	vldr	s12, [ip]
 800ff24:	ee72 6ae4 	vsub.f32	s13, s5, s9
 800ff28:	edd0 0a01 	vldr	s1, [r0, #4]
 800ff2c:	ed97 5a01 	vldr	s10, [r7, #4]
 800ff30:	ee35 4a84 	vadd.f32	s8, s11, s8
 800ff34:	ee72 4aa4 	vadd.f32	s9, s5, s9
 800ff38:	ee73 5a26 	vadd.f32	s11, s6, s13
 800ff3c:	ee76 2a00 	vadd.f32	s5, s12, s0
 800ff40:	ee73 6a66 	vsub.f32	s13, s6, s13
 800ff44:	ee36 6a40 	vsub.f32	s12, s12, s0
 800ff48:	ee35 0a20 	vadd.f32	s0, s10, s1
 800ff4c:	ee65 5a89 	vmul.f32	s11, s11, s18
 800ff50:	ee35 5a60 	vsub.f32	s10, s10, s1
 800ff54:	ee32 3a80 	vadd.f32	s6, s5, s0
 800ff58:	ee74 0a24 	vadd.f32	s1, s8, s9
 800ff5c:	ee66 6a89 	vmul.f32	s13, s13, s18
 800ff60:	ee74 4a64 	vsub.f32	s9, s8, s9
 800ff64:	ee32 4ac0 	vsub.f32	s8, s5, s0
 800ff68:	ee75 2a25 	vadd.f32	s5, s10, s11
 800ff6c:	ee33 0a20 	vadd.f32	s0, s6, s1
 800ff70:	ee75 5a65 	vsub.f32	s11, s10, s11
 800ff74:	ee33 3a60 	vsub.f32	s6, s6, s1
 800ff78:	ee36 5a26 	vadd.f32	s10, s12, s13
 800ff7c:	ed8c 0a00 	vstr	s0, [ip]
 800ff80:	ee76 6a66 	vsub.f32	s13, s12, s13
 800ff84:	449c      	add	ip, r3
 800ff86:	ee33 6a87 	vadd.f32	s12, s7, s14
 800ff8a:	ed84 3a01 	vstr	s6, [r4, #4]
 800ff8e:	ee33 7ac7 	vsub.f32	s14, s7, s14
 800ff92:	441c      	add	r4, r3
 800ff94:	ee71 3a24 	vadd.f32	s7, s2, s9
 800ff98:	ee71 4a64 	vsub.f32	s9, s2, s9
 800ff9c:	ee31 3aa2 	vadd.f32	s6, s3, s5
 800ffa0:	edc7 3a00 	vstr	s7, [r7]
 800ffa4:	ee34 1a42 	vsub.f32	s2, s8, s4
 800ffa8:	edc0 4a00 	vstr	s9, [r0]
 800ffac:	ee77 3aa5 	vadd.f32	s7, s15, s11
 800ffb0:	ee75 4a46 	vsub.f32	s9, s10, s12
 800ffb4:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800ffb8:	ed87 1a01 	vstr	s2, [r7, #4]
 800ffbc:	ee76 5ac7 	vsub.f32	s11, s13, s14
 800ffc0:	441f      	add	r7, r3
 800ffc2:	ee32 4a04 	vadd.f32	s8, s4, s8
 800ffc6:	ee71 1ae2 	vsub.f32	s3, s3, s5
 800ffca:	ee36 6a05 	vadd.f32	s12, s12, s10
 800ffce:	ee37 7a26 	vadd.f32	s14, s14, s13
 800ffd2:	ed80 4a01 	vstr	s8, [r0, #4]
 800ffd6:	ed86 3a00 	vstr	s6, [r6]
 800ffda:	4418      	add	r0, r3
 800ffdc:	ed41 1a01 	vstr	s3, [r1, #-4]
 800ffe0:	ed42 3a01 	vstr	s7, [r2, #-4]
 800ffe4:	edc5 7a00 	vstr	s15, [r5]
 800ffe8:	edc6 4a01 	vstr	s9, [r6, #4]
 800ffec:	441e      	add	r6, r3
 800ffee:	ed81 6a00 	vstr	s12, [r1]
 800fff2:	4419      	add	r1, r3
 800fff4:	edc2 5a00 	vstr	s11, [r2]
 800fff8:	441a      	add	r2, r3
 800fffa:	ed85 7a01 	vstr	s14, [r5, #4]
 800fffe:	441d      	add	r5, r3
 8010000:	f63f af44 	bhi.w	800fe8c <arm_radix8_butterfly_f32+0x70>
 8010004:	9300      	str	r3, [sp, #0]
 8010006:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010008:	2b07      	cmp	r3, #7
 801000a:	f240 81f4 	bls.w	80103f6 <arm_radix8_butterfly_f32+0x5da>
 801000e:	9901      	ldr	r1, [sp, #4]
 8010010:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 8010014:	9d02      	ldr	r5, [sp, #8]
 8010016:	ea4f 02ce 	mov.w	r2, lr, lsl #3
 801001a:	3101      	adds	r1, #1
 801001c:	eb04 000e 	add.w	r0, r4, lr
 8010020:	00e4      	lsls	r4, r4, #3
 8010022:	3508      	adds	r5, #8
 8010024:	4419      	add	r1, r3
 8010026:	eb00 0c0e 	add.w	ip, r0, lr
 801002a:	9413      	str	r4, [sp, #76]	@ 0x4c
 801002c:	00c0      	lsls	r0, r0, #3
 801002e:	185e      	adds	r6, r3, r1
 8010030:	4617      	mov	r7, r2
 8010032:	9218      	str	r2, [sp, #96]	@ 0x60
 8010034:	f109 0908 	add.w	r9, r9, #8
 8010038:	199c      	adds	r4, r3, r6
 801003a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801003c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801003e:	9012      	str	r0, [sp, #72]	@ 0x48
 8010040:	195d      	adds	r5, r3, r5
 8010042:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8010044:	443a      	add	r2, r7
 8010046:	950c      	str	r5, [sp, #48]	@ 0x30
 8010048:	4698      	mov	r8, r3
 801004a:	4420      	add	r0, r4
 801004c:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801004e:	19d7      	adds	r7, r2, r7
 8010050:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8010054:	4405      	add	r5, r0
 8010056:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 801005a:	9710      	str	r7, [sp, #64]	@ 0x40
 801005c:	eb0c 070e 	add.w	r7, ip, lr
 8010060:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8010064:	3404      	adds	r4, #4
 8010066:	3004      	adds	r0, #4
 8010068:	44c8      	add	r8, r9
 801006a:	f8cd c054 	str.w	ip, [sp, #84]	@ 0x54
 801006e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010070:	940a      	str	r4, [sp, #40]	@ 0x28
 8010072:	9009      	str	r0, [sp, #36]	@ 0x24
 8010074:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8010078:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 801007a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 801007e:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8010080:	f8cd 8034 	str.w	r8, [sp, #52]	@ 0x34
 8010084:	eb07 080e 	add.w	r8, r7, lr
 8010088:	eb04 0900 	add.w	r9, r4, r0
 801008c:	00f8      	lsls	r0, r7, #3
 801008e:	ea4f 0cc8 	mov.w	ip, r8, lsl #3
 8010092:	3504      	adds	r5, #4
 8010094:	4607      	mov	r7, r0
 8010096:	9017      	str	r0, [sp, #92]	@ 0x5c
 8010098:	910b      	str	r1, [sp, #44]	@ 0x2c
 801009a:	4618      	mov	r0, r3
 801009c:	eb03 01c6 	add.w	r1, r3, r6, lsl #3
 80100a0:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80100a2:	f8cd c050 	str.w	ip, [sp, #80]	@ 0x50
 80100a6:	18e3      	adds	r3, r4, r3
 80100a8:	9508      	str	r5, [sp, #32]
 80100aa:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80100ac:	910e      	str	r1, [sp, #56]	@ 0x38
 80100ae:	4621      	mov	r1, r4
 80100b0:	eb04 0805 	add.w	r8, r4, r5
 80100b4:	9304      	str	r3, [sp, #16]
 80100b6:	19e5      	adds	r5, r4, r7
 80100b8:	ea4f 130e 	mov.w	r3, lr, lsl #4
 80100bc:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80100be:	9316      	str	r3, [sp, #88]	@ 0x58
 80100c0:	190b      	adds	r3, r1, r4
 80100c2:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 80100c4:	9505      	str	r5, [sp, #20]
 80100c6:	9303      	str	r3, [sp, #12]
 80100c8:	f100 0308 	add.w	r3, r0, #8
 80100cc:	9707      	str	r7, [sp, #28]
 80100ce:	4638      	mov	r0, r7
 80100d0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80100d2:	2301      	movs	r3, #1
 80100d4:	9306      	str	r3, [sp, #24]
 80100d6:	9b00      	ldr	r3, [sp, #0]
 80100d8:	ed90 fa00 	vldr	s30, [r0]
 80100dc:	edd0 ba01 	vldr	s23, [r0, #4]
 80100e0:	9803      	ldr	r0, [sp, #12]
 80100e2:	9903      	ldr	r1, [sp, #12]
 80100e4:	ed90 ba01 	vldr	s22, [r0, #4]
 80100e8:	9804      	ldr	r0, [sp, #16]
 80100ea:	edd1 ea00 	vldr	s29, [r1]
 80100ee:	edd0 aa01 	vldr	s21, [r0, #4]
 80100f2:	9805      	ldr	r0, [sp, #20]
 80100f4:	9905      	ldr	r1, [sp, #20]
 80100f6:	edd0 7a01 	vldr	s15, [r0, #4]
 80100fa:	ed91 da00 	vldr	s26, [r1]
 80100fe:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8010100:	9c04      	ldr	r4, [sp, #16]
 8010102:	edcd 7a01 	vstr	s15, [sp, #4]
 8010106:	edd8 7a01 	vldr	s15, [r8, #4]
 801010a:	9100      	str	r1, [sp, #0]
 801010c:	edd2 fa00 	vldr	s31, [r2]
 8010110:	ed94 ea00 	vldr	s28, [r4]
 8010114:	ed92 ca01 	vldr	s24, [r2, #4]
 8010118:	f8dd e020 	ldr.w	lr, [sp, #32]
 801011c:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 801011e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8010120:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8010122:	edd9 da00 	vldr	s27, [r9]
 8010126:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8010128:	edd8 ca00 	vldr	s25, [r8]
 801012c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801012e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8010130:	f8dd c018 	ldr.w	ip, [sp, #24]
 8010134:	ed99 aa01 	vldr	s20, [r9, #4]
 8010138:	edcd 7a02 	vstr	s15, [sp, #8]
 801013c:	9800      	ldr	r0, [sp, #0]
 801013e:	e001      	b.n	8010144 <arm_radix8_butterfly_f32+0x328>
 8010140:	3f3504f3 	.word	0x3f3504f3
 8010144:	edd5 3a00 	vldr	s7, [r5]
 8010148:	44dc      	add	ip, fp
 801014a:	ed91 7a00 	vldr	s14, [r1]
 801014e:	edd4 8a00 	vldr	s17, [r4]
 8010152:	45e2      	cmp	sl, ip
 8010154:	ed57 7a01 	vldr	s15, [r7, #-4]
 8010158:	ed90 5a00 	vldr	s10, [r0]
 801015c:	ed56 5a01 	vldr	s11, [r6, #-4]
 8010160:	ee38 6aa7 	vadd.f32	s12, s17, s15
 8010164:	ed92 1a00 	vldr	s2, [r2]
 8010168:	ee78 4ae7 	vsub.f32	s9, s17, s15
 801016c:	ed1e 4a01 	vldr	s8, [lr, #-4]
 8010170:	ee75 9a25 	vadd.f32	s19, s10, s11
 8010174:	ee31 3a07 	vadd.f32	s6, s2, s14
 8010178:	ed92 8a01 	vldr	s16, [r2, #4]
 801017c:	ee73 6a84 	vadd.f32	s13, s7, s8
 8010180:	ee75 5a65 	vsub.f32	s11, s10, s11
 8010184:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8010188:	ee73 1a06 	vadd.f32	s3, s6, s12
 801018c:	ee39 5aa6 	vadd.f32	s10, s19, s13
 8010190:	ee75 7a84 	vadd.f32	s15, s11, s8
 8010194:	ee31 1a47 	vsub.f32	s2, s2, s14
 8010198:	ee31 7a85 	vadd.f32	s14, s3, s10
 801019c:	ee67 7a89 	vmul.f32	s15, s15, s18
 80101a0:	ee33 3a46 	vsub.f32	s6, s6, s12
 80101a4:	ed82 7a00 	vstr	s14, [r2]
 80101a8:	ee79 9ae6 	vsub.f32	s19, s19, s13
 80101ac:	ed96 6a00 	vldr	s12, [r6]
 80101b0:	ee34 2aa7 	vadd.f32	s4, s9, s15
 80101b4:	edd5 3a01 	vldr	s7, [r5, #4]
 80101b8:	ee74 8ae7 	vsub.f32	s17, s9, s15
 80101bc:	ed90 7a01 	vldr	s14, [r0, #4]
 80101c0:	ee35 4ac4 	vsub.f32	s8, s11, s8
 80101c4:	edde 4a00 	vldr	s9, [lr]
 80101c8:	ee31 5ac5 	vsub.f32	s10, s3, s10
 80101cc:	ee77 2a46 	vsub.f32	s5, s14, s12
 80101d0:	edd1 6a01 	vldr	s13, [r1, #4]
 80101d4:	ee73 7ae4 	vsub.f32	s15, s7, s9
 80101d8:	edd7 0a00 	vldr	s1, [r7]
 80101dc:	ee77 5a06 	vadd.f32	s11, s14, s12
 80101e0:	ed94 7a01 	vldr	s14, [r4, #4]
 80101e4:	ee33 6aa4 	vadd.f32	s12, s7, s9
 80101e8:	ee32 0ae7 	vsub.f32	s0, s5, s15
 80101ec:	ee78 4a66 	vsub.f32	s9, s16, s13
 80101f0:	ee78 3a26 	vadd.f32	s7, s16, s13
 80101f4:	ee72 2aa7 	vadd.f32	s5, s5, s15
 80101f8:	ee77 6a20 	vadd.f32	s13, s14, s1
 80101fc:	ee24 4a09 	vmul.f32	s8, s8, s18
 8010200:	ee37 7a60 	vsub.f32	s14, s14, s1
 8010204:	ee20 8a09 	vmul.f32	s16, s0, s18
 8010208:	ee75 0a86 	vadd.f32	s1, s11, s12
 801020c:	ee33 0aa6 	vadd.f32	s0, s7, s13
 8010210:	ee62 2a89 	vmul.f32	s5, s5, s18
 8010214:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8010218:	ee73 3ae6 	vsub.f32	s7, s7, s13
 801021c:	ee77 7a62 	vsub.f32	s15, s14, s5
 8010220:	ee74 5a88 	vadd.f32	s11, s9, s16
 8010224:	ee34 8ac8 	vsub.f32	s16, s9, s16
 8010228:	ee77 4a22 	vadd.f32	s9, s14, s5
 801022c:	ee71 2a04 	vadd.f32	s5, s2, s8
 8010230:	ee31 7a44 	vsub.f32	s14, s2, s8
 8010234:	ee30 1a60 	vsub.f32	s2, s0, s1
 8010238:	ee73 1a06 	vadd.f32	s3, s6, s12
 801023c:	ee33 6a46 	vsub.f32	s12, s6, s12
 8010240:	ee33 3ae9 	vsub.f32	s6, s7, s19
 8010244:	ee79 6aa3 	vadd.f32	s13, s19, s7
 8010248:	ee38 4a68 	vsub.f32	s8, s16, s17
 801024c:	ee75 3ac2 	vsub.f32	s7, s11, s4
 8010250:	ee72 5a25 	vadd.f32	s11, s4, s11
 8010254:	ee32 2aa4 	vadd.f32	s4, s5, s9
 8010258:	ee72 4ae4 	vsub.f32	s9, s5, s9
 801025c:	ee77 2a27 	vadd.f32	s5, s14, s15
 8010260:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010264:	ee78 7a88 	vadd.f32	s15, s17, s16
 8010268:	ee6e 8a05 	vmul.f32	s17, s28, s10
 801026c:	ee2a 8a81 	vmul.f32	s16, s21, s2
 8010270:	ee2a 5a85 	vmul.f32	s10, s21, s10
 8010274:	ee2e 1a01 	vmul.f32	s2, s28, s2
 8010278:	ee6f 9a21 	vmul.f32	s19, s30, s3
 801027c:	ee70 0a20 	vadd.f32	s1, s0, s1
 8010280:	ee6b 1aa1 	vmul.f32	s3, s23, s3
 8010284:	ee2b 0a83 	vmul.f32	s0, s23, s6
 8010288:	ee2f 3a03 	vmul.f32	s6, s30, s6
 801028c:	edc2 0a01 	vstr	s1, [r2, #4]
 8010290:	ee38 8a88 	vadd.f32	s16, s17, s16
 8010294:	441a      	add	r2, r3
 8010296:	ee6c 8a23 	vmul.f32	s17, s24, s7
 801029a:	ee31 5a45 	vsub.f32	s10, s2, s10
 801029e:	ee6f 3aa3 	vmul.f32	s7, s31, s7
 80102a2:	ed81 8a00 	vstr	s16, [r1]
 80102a6:	ee39 0a80 	vadd.f32	s0, s19, s0
 80102aa:	ee33 3a61 	vsub.f32	s6, s6, s3
 80102ae:	ed81 5a01 	vstr	s10, [r1, #4]
 80102b2:	ee6f 0a82 	vmul.f32	s1, s31, s4
 80102b6:	edcd 3a00 	vstr	s7, [sp]
 80102ba:	ed9d 5a02 	vldr	s10, [sp, #8]
 80102be:	ee2d 8a06 	vmul.f32	s16, s26, s12
 80102c2:	eddd 3a01 	vldr	s7, [sp, #4]
 80102c6:	ee6c 9aa4 	vmul.f32	s19, s25, s9
 80102ca:	ed84 0a00 	vstr	s0, [r4]
 80102ce:	ee65 4a24 	vmul.f32	s9, s10, s9
 80102d2:	ed84 3a01 	vstr	s6, [r4, #4]
 80102d6:	ee23 1aa6 	vmul.f32	s2, s7, s13
 80102da:	ee23 6a86 	vmul.f32	s12, s7, s12
 80102de:	eddd 3a00 	vldr	s7, [sp]
 80102e2:	ee25 5a25 	vmul.f32	s10, s10, s11
 80102e6:	4419      	add	r1, r3
 80102e8:	ee2d 0aa2 	vmul.f32	s0, s27, s5
 80102ec:	441c      	add	r4, r3
 80102ee:	ee6a 1a04 	vmul.f32	s3, s20, s8
 80102f2:	ee70 0aa8 	vadd.f32	s1, s1, s17
 80102f6:	ee2e 3a87 	vmul.f32	s6, s29, s14
 80102fa:	ee6b 8a27 	vmul.f32	s17, s22, s15
 80102fe:	ee2c 2a02 	vmul.f32	s4, s24, s4
 8010302:	ee6d 6a26 	vmul.f32	s13, s26, s13
 8010306:	ee6c 5aa5 	vmul.f32	s11, s25, s11
 801030a:	ee6a 2a22 	vmul.f32	s5, s20, s5
 801030e:	ee2d 4a84 	vmul.f32	s8, s27, s8
 8010312:	ee2b 7a07 	vmul.f32	s14, s22, s14
 8010316:	ee6e 7aa7 	vmul.f32	s15, s29, s15
 801031a:	ee73 3ac2 	vsub.f32	s7, s7, s4
 801031e:	ee38 8a01 	vadd.f32	s16, s16, s2
 8010322:	ee36 6ac6 	vsub.f32	s12, s13, s12
 8010326:	ee39 5a85 	vadd.f32	s10, s19, s10
 801032a:	ee75 4ae4 	vsub.f32	s9, s11, s9
 801032e:	ed07 8a01 	vstr	s16, [r7, #-4]
 8010332:	ee30 0a21 	vadd.f32	s0, s0, s3
 8010336:	ed87 6a00 	vstr	s12, [r7]
 801033a:	ee74 2a62 	vsub.f32	s5, s8, s5
 801033e:	edc0 0a00 	vstr	s1, [r0]
 8010342:	ee33 3a28 	vadd.f32	s6, s6, s17
 8010346:	edc0 3a01 	vstr	s7, [r0, #4]
 801034a:	ee37 7ac7 	vsub.f32	s14, s15, s14
 801034e:	ed0e 5a01 	vstr	s10, [lr, #-4]
 8010352:	edce 4a00 	vstr	s9, [lr]
 8010356:	4418      	add	r0, r3
 8010358:	ed06 0a01 	vstr	s0, [r6, #-4]
 801035c:	441f      	add	r7, r3
 801035e:	edc6 2a00 	vstr	s5, [r6]
 8010362:	449e      	add	lr, r3
 8010364:	ed85 3a00 	vstr	s6, [r5]
 8010368:	441e      	add	r6, r3
 801036a:	ed85 7a01 	vstr	s14, [r5, #4]
 801036e:	441d      	add	r5, r3
 8010370:	f63f aee8 	bhi.w	8010144 <arm_radix8_butterfly_f32+0x328>
 8010374:	9a06      	ldr	r2, [sp, #24]
 8010376:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8010378:	3201      	adds	r2, #1
 801037a:	4611      	mov	r1, r2
 801037c:	9206      	str	r2, [sp, #24]
 801037e:	9a07      	ldr	r2, [sp, #28]
 8010380:	4402      	add	r2, r0
 8010382:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8010384:	9207      	str	r2, [sp, #28]
 8010386:	9a03      	ldr	r2, [sp, #12]
 8010388:	4402      	add	r2, r0
 801038a:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801038c:	9203      	str	r2, [sp, #12]
 801038e:	9a04      	ldr	r2, [sp, #16]
 8010390:	4402      	add	r2, r0
 8010392:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8010394:	9204      	str	r2, [sp, #16]
 8010396:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8010398:	4491      	add	r9, r2
 801039a:	9a05      	ldr	r2, [sp, #20]
 801039c:	4402      	add	r2, r0
 801039e:	9205      	str	r2, [sp, #20]
 80103a0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80103a2:	4490      	add	r8, r2
 80103a4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80103a6:	3208      	adds	r2, #8
 80103a8:	920f      	str	r2, [sp, #60]	@ 0x3c
 80103aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80103ac:	3208      	adds	r2, #8
 80103ae:	920e      	str	r2, [sp, #56]	@ 0x38
 80103b0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80103b2:	3208      	adds	r2, #8
 80103b4:	920d      	str	r2, [sp, #52]	@ 0x34
 80103b6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80103b8:	3208      	adds	r2, #8
 80103ba:	920c      	str	r2, [sp, #48]	@ 0x30
 80103bc:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80103be:	3208      	adds	r2, #8
 80103c0:	920b      	str	r2, [sp, #44]	@ 0x2c
 80103c2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80103c4:	3208      	adds	r2, #8
 80103c6:	920a      	str	r2, [sp, #40]	@ 0x28
 80103c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80103ca:	3208      	adds	r2, #8
 80103cc:	9209      	str	r2, [sp, #36]	@ 0x24
 80103ce:	9a08      	ldr	r2, [sp, #32]
 80103d0:	3208      	adds	r2, #8
 80103d2:	9208      	str	r2, [sp, #32]
 80103d4:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80103d6:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80103d8:	4622      	mov	r2, r4
 80103da:	4288      	cmp	r0, r1
 80103dc:	d005      	beq.n	80103ea <arm_radix8_butterfly_f32+0x5ce>
 80103de:	9818      	ldr	r0, [sp, #96]	@ 0x60
 80103e0:	4621      	mov	r1, r4
 80103e2:	4401      	add	r1, r0
 80103e4:	9807      	ldr	r0, [sp, #28]
 80103e6:	9110      	str	r1, [sp, #64]	@ 0x40
 80103e8:	e676      	b.n	80100d8 <arm_radix8_butterfly_f32+0x2bc>
 80103ea:	4683      	mov	fp, r0
 80103ec:	f8bd e060 	ldrh.w	lr, [sp, #96]	@ 0x60
 80103f0:	f8dd c06c 	ldr.w	ip, [sp, #108]	@ 0x6c
 80103f4:	e522      	b.n	800fe3c <arm_radix8_butterfly_f32+0x20>
 80103f6:	b01d      	add	sp, #116	@ 0x74
 80103f8:	ecbd 8b10 	vpop	{d8-d15}
 80103fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010400 <ai_buffer_get_size>:
 8010400:	b368      	cbz	r0, 801045e <ai_buffer_get_size+0x5e>
 8010402:	4b17      	ldr	r3, [pc, #92]	@ (8010460 <ai_buffer_get_size+0x60>)
 8010404:	4a17      	ldr	r2, [pc, #92]	@ (8010464 <ai_buffer_get_size+0x64>)
 8010406:	b410      	push	{r4}
 8010408:	6804      	ldr	r4, [r0, #0]
 801040a:	4023      	ands	r3, r4
 801040c:	4293      	cmp	r3, r2
 801040e:	d123      	bne.n	8010458 <ai_buffer_get_size+0x58>
 8010410:	b311      	cbz	r1, 8010458 <ai_buffer_get_size+0x58>
 8010412:	6984      	ldr	r4, [r0, #24]
 8010414:	6862      	ldr	r2, [r4, #4]
 8010416:	321f      	adds	r2, #31
 8010418:	f022 021f 	bic.w	r2, r2, #31
 801041c:	7d03      	ldrb	r3, [r0, #20]
 801041e:	6941      	ldr	r1, [r0, #20]
 8010420:	f1a3 0301 	sub.w	r3, r3, #1
 8010424:	f3c1 2017 	ubfx	r0, r1, #8, #24
 8010428:	fab3 f383 	clz	r3, r3
 801042c:	095b      	lsrs	r3, r3, #5
 801042e:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 8010432:	da0c      	bge.n	801044e <ai_buffer_get_size+0x4e>
 8010434:	2b01      	cmp	r3, #1
 8010436:	d103      	bne.n	8010440 <ai_buffer_get_size+0x40>
 8010438:	2802      	cmp	r0, #2
 801043a:	f04f 0302 	mov.w	r3, #2
 801043e:	d006      	beq.n	801044e <ai_buffer_get_size+0x4e>
 8010440:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8010444:	3301      	adds	r3, #1
 8010446:	4298      	cmp	r0, r3
 8010448:	fb01 f202 	mul.w	r2, r1, r2
 801044c:	d1f2      	bne.n	8010434 <ai_buffer_get_size+0x34>
 801044e:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8010452:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010456:	4770      	bx	lr
 8010458:	6984      	ldr	r4, [r0, #24]
 801045a:	6862      	ldr	r2, [r4, #4]
 801045c:	e7de      	b.n	801041c <ai_buffer_get_size+0x1c>
 801045e:	4770      	bx	lr
 8010460:	017fffff 	.word	0x017fffff
 8010464:	000400c0 	.word	0x000400c0

08010468 <ai_buffer_array_sane>:
 8010468:	b138      	cbz	r0, 801047a <ai_buffer_array_sane+0x12>
 801046a:	6843      	ldr	r3, [r0, #4]
 801046c:	b123      	cbz	r3, 8010478 <ai_buffer_array_sane+0x10>
 801046e:	8840      	ldrh	r0, [r0, #2]
 8010470:	3800      	subs	r0, #0
 8010472:	bf18      	it	ne
 8010474:	2001      	movne	r0, #1
 8010476:	4770      	bx	lr
 8010478:	4618      	mov	r0, r3
 801047a:	4770      	bx	lr

0801047c <ai_buffer_array_item_set_address>:
 801047c:	b150      	cbz	r0, 8010494 <ai_buffer_array_item_set_address+0x18>
 801047e:	6843      	ldr	r3, [r0, #4]
 8010480:	b14b      	cbz	r3, 8010496 <ai_buffer_array_item_set_address+0x1a>
 8010482:	8840      	ldrh	r0, [r0, #2]
 8010484:	b900      	cbnz	r0, 8010488 <ai_buffer_array_item_set_address+0xc>
 8010486:	4770      	bx	lr
 8010488:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 801048c:	2001      	movs	r0, #1
 801048e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8010492:	605a      	str	r2, [r3, #4]
 8010494:	4770      	bx	lr
 8010496:	4618      	mov	r0, r3
 8010498:	4770      	bx	lr
 801049a:	bf00      	nop

0801049c <ai_platform_get_weights_map>:
 801049c:	2900      	cmp	r1, #0
 801049e:	bf18      	it	ne
 80104a0:	2800      	cmpne	r0, #0
 80104a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104a4:	bf0c      	ite	eq
 80104a6:	2401      	moveq	r4, #1
 80104a8:	2400      	movne	r4, #0
 80104aa:	2a00      	cmp	r2, #0
 80104ac:	bf08      	it	eq
 80104ae:	f044 0401 	orreq.w	r4, r4, #1
 80104b2:	b114      	cbz	r4, 80104ba <ai_platform_get_weights_map+0x1e>
 80104b4:	2400      	movs	r4, #0
 80104b6:	4620      	mov	r0, r4
 80104b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80104ba:	4616      	mov	r6, r2
 80104bc:	4b22      	ldr	r3, [pc, #136]	@ (8010548 <ai_platform_get_weights_map+0xac>)
 80104be:	6812      	ldr	r2, [r2, #0]
 80104c0:	4605      	mov	r5, r0
 80104c2:	460f      	mov	r7, r1
 80104c4:	429a      	cmp	r2, r3
 80104c6:	d022      	beq.n	801050e <ai_platform_get_weights_map+0x72>
 80104c8:	6870      	ldr	r0, [r6, #4]
 80104ca:	2800      	cmp	r0, #0
 80104cc:	d0f2      	beq.n	80104b4 <ai_platform_get_weights_map+0x18>
 80104ce:	6806      	ldr	r6, [r0, #0]
 80104d0:	429e      	cmp	r6, r3
 80104d2:	d006      	beq.n	80104e2 <ai_platform_get_weights_map+0x46>
 80104d4:	f1a1 0401 	sub.w	r4, r1, #1
 80104d8:	6028      	str	r0, [r5, #0]
 80104da:	fab4 f484 	clz	r4, r4
 80104de:	0964      	lsrs	r4, r4, #5
 80104e0:	e7e9      	b.n	80104b6 <ai_platform_get_weights_map+0x1a>
 80104e2:	3d04      	subs	r5, #4
 80104e4:	4602      	mov	r2, r0
 80104e6:	4621      	mov	r1, r4
 80104e8:	e000      	b.n	80104ec <ai_platform_get_weights_map+0x50>
 80104ea:	4619      	mov	r1, r3
 80104ec:	f852 3f04 	ldr.w	r3, [r2, #4]!
 80104f0:	42b3      	cmp	r3, r6
 80104f2:	d025      	beq.n	8010540 <ai_platform_get_weights_map+0xa4>
 80104f4:	f845 3f04 	str.w	r3, [r5, #4]!
 80104f8:	1c4b      	adds	r3, r1, #1
 80104fa:	429f      	cmp	r7, r3
 80104fc:	d8f5      	bhi.n	80104ea <ai_platform_get_weights_map+0x4e>
 80104fe:	d1da      	bne.n	80104b6 <ai_platform_get_weights_map+0x1a>
 8010500:	3102      	adds	r1, #2
 8010502:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 8010506:	42b3      	cmp	r3, r6
 8010508:	d1d5      	bne.n	80104b6 <ai_platform_get_weights_map+0x1a>
 801050a:	2401      	movs	r4, #1
 801050c:	e7d3      	b.n	80104b6 <ai_platform_get_weights_map+0x1a>
 801050e:	1d30      	adds	r0, r6, #4
 8010510:	f7ff ffaa 	bl	8010468 <ai_buffer_array_sane>
 8010514:	2800      	cmp	r0, #0
 8010516:	d0cd      	beq.n	80104b4 <ai_platform_get_weights_map+0x18>
 8010518:	88f3      	ldrh	r3, [r6, #6]
 801051a:	429f      	cmp	r7, r3
 801051c:	d1ca      	bne.n	80104b4 <ai_platform_get_weights_map+0x18>
 801051e:	3d04      	subs	r5, #4
 8010520:	4622      	mov	r2, r4
 8010522:	68b3      	ldr	r3, [r6, #8]
 8010524:	4423      	add	r3, r4
 8010526:	341c      	adds	r4, #28
 8010528:	685b      	ldr	r3, [r3, #4]
 801052a:	b123      	cbz	r3, 8010536 <ai_platform_get_weights_map+0x9a>
 801052c:	3201      	adds	r2, #1
 801052e:	f845 3f04 	str.w	r3, [r5, #4]!
 8010532:	4297      	cmp	r7, r2
 8010534:	d8f5      	bhi.n	8010522 <ai_platform_get_weights_map+0x86>
 8010536:	1abc      	subs	r4, r7, r2
 8010538:	fab4 f484 	clz	r4, r4
 801053c:	0964      	lsrs	r4, r4, #5
 801053e:	e7ba      	b.n	80104b6 <ai_platform_get_weights_map+0x1a>
 8010540:	428f      	cmp	r7, r1
 8010542:	d1b8      	bne.n	80104b6 <ai_platform_get_weights_map+0x1a>
 8010544:	e7e1      	b.n	801050a <ai_platform_get_weights_map+0x6e>
 8010546:	bf00      	nop
 8010548:	a1facade 	.word	0xa1facade

0801054c <ai_platform_get_activations_map>:
 801054c:	2900      	cmp	r1, #0
 801054e:	bf18      	it	ne
 8010550:	2800      	cmpne	r0, #0
 8010552:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010554:	bf0c      	ite	eq
 8010556:	2401      	moveq	r4, #1
 8010558:	2400      	movne	r4, #0
 801055a:	2a00      	cmp	r2, #0
 801055c:	bf08      	it	eq
 801055e:	f044 0401 	orreq.w	r4, r4, #1
 8010562:	b114      	cbz	r4, 801056a <ai_platform_get_activations_map+0x1e>
 8010564:	2400      	movs	r4, #0
 8010566:	4620      	mov	r0, r4
 8010568:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801056a:	4616      	mov	r6, r2
 801056c:	4b22      	ldr	r3, [pc, #136]	@ (80105f8 <ai_platform_get_activations_map+0xac>)
 801056e:	6812      	ldr	r2, [r2, #0]
 8010570:	4605      	mov	r5, r0
 8010572:	460f      	mov	r7, r1
 8010574:	429a      	cmp	r2, r3
 8010576:	d022      	beq.n	80105be <ai_platform_get_activations_map+0x72>
 8010578:	6a30      	ldr	r0, [r6, #32]
 801057a:	2800      	cmp	r0, #0
 801057c:	d0f2      	beq.n	8010564 <ai_platform_get_activations_map+0x18>
 801057e:	6806      	ldr	r6, [r0, #0]
 8010580:	429e      	cmp	r6, r3
 8010582:	d006      	beq.n	8010592 <ai_platform_get_activations_map+0x46>
 8010584:	f1a1 0401 	sub.w	r4, r1, #1
 8010588:	6028      	str	r0, [r5, #0]
 801058a:	fab4 f484 	clz	r4, r4
 801058e:	0964      	lsrs	r4, r4, #5
 8010590:	e7e9      	b.n	8010566 <ai_platform_get_activations_map+0x1a>
 8010592:	3d04      	subs	r5, #4
 8010594:	4602      	mov	r2, r0
 8010596:	4621      	mov	r1, r4
 8010598:	e000      	b.n	801059c <ai_platform_get_activations_map+0x50>
 801059a:	4619      	mov	r1, r3
 801059c:	f852 3f04 	ldr.w	r3, [r2, #4]!
 80105a0:	42b3      	cmp	r3, r6
 80105a2:	d026      	beq.n	80105f2 <ai_platform_get_activations_map+0xa6>
 80105a4:	f845 3f04 	str.w	r3, [r5, #4]!
 80105a8:	1c4b      	adds	r3, r1, #1
 80105aa:	429f      	cmp	r7, r3
 80105ac:	d8f5      	bhi.n	801059a <ai_platform_get_activations_map+0x4e>
 80105ae:	d1da      	bne.n	8010566 <ai_platform_get_activations_map+0x1a>
 80105b0:	3102      	adds	r1, #2
 80105b2:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 80105b6:	42b3      	cmp	r3, r6
 80105b8:	d1d5      	bne.n	8010566 <ai_platform_get_activations_map+0x1a>
 80105ba:	2401      	movs	r4, #1
 80105bc:	e7d3      	b.n	8010566 <ai_platform_get_activations_map+0x1a>
 80105be:	f106 000c 	add.w	r0, r6, #12
 80105c2:	f7ff ff51 	bl	8010468 <ai_buffer_array_sane>
 80105c6:	2800      	cmp	r0, #0
 80105c8:	d0cc      	beq.n	8010564 <ai_platform_get_activations_map+0x18>
 80105ca:	89f3      	ldrh	r3, [r6, #14]
 80105cc:	429f      	cmp	r7, r3
 80105ce:	d1c9      	bne.n	8010564 <ai_platform_get_activations_map+0x18>
 80105d0:	3d04      	subs	r5, #4
 80105d2:	4622      	mov	r2, r4
 80105d4:	6933      	ldr	r3, [r6, #16]
 80105d6:	4423      	add	r3, r4
 80105d8:	341c      	adds	r4, #28
 80105da:	685b      	ldr	r3, [r3, #4]
 80105dc:	b123      	cbz	r3, 80105e8 <ai_platform_get_activations_map+0x9c>
 80105de:	3201      	adds	r2, #1
 80105e0:	f845 3f04 	str.w	r3, [r5, #4]!
 80105e4:	4297      	cmp	r7, r2
 80105e6:	d8f5      	bhi.n	80105d4 <ai_platform_get_activations_map+0x88>
 80105e8:	1abc      	subs	r4, r7, r2
 80105ea:	fab4 f484 	clz	r4, r4
 80105ee:	0964      	lsrs	r4, r4, #5
 80105f0:	e7b9      	b.n	8010566 <ai_platform_get_activations_map+0x1a>
 80105f2:	428f      	cmp	r7, r1
 80105f4:	d1b7      	bne.n	8010566 <ai_platform_get_activations_map+0x1a>
 80105f6:	e7e0      	b.n	80105ba <ai_platform_get_activations_map+0x6e>
 80105f8:	a1facade 	.word	0xa1facade

080105fc <ai_platform_bind_network_params>:
 80105fc:	2a00      	cmp	r2, #0
 80105fe:	bf18      	it	ne
 8010600:	2900      	cmpne	r1, #0
 8010602:	d010      	beq.n	8010626 <ai_platform_bind_network_params+0x2a>
 8010604:	b178      	cbz	r0, 8010626 <ai_platform_bind_network_params+0x2a>
 8010606:	4603      	mov	r3, r0
 8010608:	4808      	ldr	r0, [pc, #32]	@ (801062c <ai_platform_bind_network_params+0x30>)
 801060a:	f103 0c0c 	add.w	ip, r3, #12
 801060e:	f843 0b04 	str.w	r0, [r3], #4
 8010612:	c903      	ldmia	r1, {r0, r1}
 8010614:	e883 0003 	stmia.w	r3, {r0, r1}
 8010618:	2301      	movs	r3, #1
 801061a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801061e:	e88c 0003 	stmia.w	ip, {r0, r1}
 8010622:	4618      	mov	r0, r3
 8010624:	4770      	bx	lr
 8010626:	2300      	movs	r3, #0
 8010628:	4618      	mov	r0, r3
 801062a:	4770      	bx	lr
 801062c:	a1facade 	.word	0xa1facade

08010630 <ai_platform_network_get_error>:
 8010630:	4b04      	ldr	r3, [pc, #16]	@ (8010644 <ai_platform_network_get_error+0x14>)
 8010632:	6802      	ldr	r2, [r0, #0]
 8010634:	4393      	bics	r3, r2
 8010636:	d102      	bne.n	801063e <ai_platform_network_get_error+0xe>
 8010638:	300c      	adds	r0, #12
 801063a:	f000 bc73 	b.w	8010f24 <core_get_error>
 801063e:	f241 0010 	movw	r0, #4112	@ 0x1010
 8010642:	4770      	bx	lr
 8010644:	a1c00100 	.word	0xa1c00100

08010648 <ai_platform_network_set_error>:
 8010648:	b110      	cbz	r0, 8010650 <ai_platform_network_set_error+0x8>
 801064a:	300c      	adds	r0, #12
 801064c:	f000 bc70 	b.w	8010f30 <core_set_error>
 8010650:	4770      	bx	lr
 8010652:	bf00      	nop

08010654 <ai_platform_inputs_get>:
 8010654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010658:	4b39      	ldr	r3, [pc, #228]	@ (8010740 <ai_platform_inputs_get+0xec>)
 801065a:	b085      	sub	sp, #20
 801065c:	6802      	ldr	r2, [r0, #0]
 801065e:	4393      	bics	r3, r2
 8010660:	e9cd 1002 	strd	r1, r0, [sp, #8]
 8010664:	d162      	bne.n	801072c <ai_platform_inputs_get+0xd8>
 8010666:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8010668:	2b00      	cmp	r3, #0
 801066a:	d051      	beq.n	8010710 <ai_platform_inputs_get+0xbc>
 801066c:	f8d0 a034 	ldr.w	sl, [r0, #52]	@ 0x34
 8010670:	f1ba 0f00 	cmp.w	sl, #0
 8010674:	d04c      	beq.n	8010710 <ai_platform_inputs_get+0xbc>
 8010676:	f04f 0900 	mov.w	r9, #0
 801067a:	464d      	mov	r5, r9
 801067c:	e016      	b.n	80106ac <ai_platform_inputs_get+0x58>
 801067e:	9901      	ldr	r1, [sp, #4]
 8010680:	2301      	movs	r3, #1
 8010682:	f848 3001 	str.w	r3, [r8, r1]
 8010686:	69b1      	ldr	r1, [r6, #24]
 8010688:	f04f 0301 	mov.w	r3, #1
 801068c:	684e      	ldr	r6, [r1, #4]
 801068e:	3501      	adds	r5, #1
 8010690:	f109 091c 	add.w	r9, r9, #28
 8010694:	7523      	strb	r3, [r4, #20]
 8010696:	2300      	movs	r3, #0
 8010698:	6961      	ldr	r1, [r4, #20]
 801069a:	6020      	str	r0, [r4, #0]
 801069c:	f36b 211f 	bfi	r1, fp, #8, #24
 80106a0:	e9c4 c701 	strd	ip, r7, [r4, #4]
 80106a4:	e9c4 3603 	strd	r3, r6, [r4, #12]
 80106a8:	e9c4 1205 	strd	r1, r2, [r4, #20]
 80106ac:	f8ba 3000 	ldrh.w	r3, [sl]
 80106b0:	b2ac      	uxth	r4, r5
 80106b2:	42ab      	cmp	r3, r5
 80106b4:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 80106b8:	9301      	str	r3, [sp, #4]
 80106ba:	d93b      	bls.n	8010734 <ai_platform_inputs_get+0xe0>
 80106bc:	f8da 3004 	ldr.w	r3, [sl, #4]
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	d037      	beq.n	8010734 <ai_platform_inputs_get+0xe0>
 80106c4:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 80106c8:	2e00      	cmp	r6, #0
 80106ca:	d033      	beq.n	8010734 <ai_platform_inputs_get+0xe0>
 80106cc:	f8da 3008 	ldr.w	r3, [sl, #8]
 80106d0:	69b2      	ldr	r2, [r6, #24]
 80106d2:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 80106d6:	6810      	ldr	r0, [r2, #0]
 80106d8:	68b3      	ldr	r3, [r6, #8]
 80106da:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 80106de:	68f2      	ldr	r2, [r6, #12]
 80106e0:	444c      	add	r4, r9
 80106e2:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 80106e6:	9200      	str	r2, [sp, #0]
 80106e8:	f003 f814 	bl	8013714 <ai_array_to_buffer_fmt>
 80106ec:	69b1      	ldr	r1, [r6, #24]
 80106ee:	9a00      	ldr	r2, [sp, #0]
 80106f0:	f8d1 c008 	ldr.w	ip, [r1, #8]
 80106f4:	2f00      	cmp	r7, #0
 80106f6:	d0c7      	beq.n	8010688 <ai_platform_inputs_get+0x34>
 80106f8:	2100      	movs	r1, #0
 80106fa:	f848 1035 	str.w	r1, [r8, r5, lsl #3]
 80106fe:	6831      	ldr	r1, [r6, #0]
 8010700:	6079      	str	r1, [r7, #4]
 8010702:	b111      	cbz	r1, 801070a <ai_platform_inputs_get+0xb6>
 8010704:	8849      	ldrh	r1, [r1, #2]
 8010706:	2900      	cmp	r1, #0
 8010708:	d1b9      	bne.n	801067e <ai_platform_inputs_get+0x2a>
 801070a:	69b1      	ldr	r1, [r6, #24]
 801070c:	2700      	movs	r7, #0
 801070e:	e7bb      	b.n	8010688 <ai_platform_inputs_get+0x34>
 8010710:	9803      	ldr	r0, [sp, #12]
 8010712:	2400      	movs	r4, #0
 8010714:	2218      	movs	r2, #24
 8010716:	2111      	movs	r1, #17
 8010718:	300c      	adds	r0, #12
 801071a:	f000 fc09 	bl	8010f30 <core_set_error>
 801071e:	4620      	mov	r0, r4
 8010720:	9b02      	ldr	r3, [sp, #8]
 8010722:	b103      	cbz	r3, 8010726 <ai_platform_inputs_get+0xd2>
 8010724:	801c      	strh	r4, [r3, #0]
 8010726:	b005      	add	sp, #20
 8010728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801072c:	2000      	movs	r0, #0
 801072e:	b005      	add	sp, #20
 8010730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010734:	2c00      	cmp	r4, #0
 8010736:	d0eb      	beq.n	8010710 <ai_platform_inputs_get+0xbc>
 8010738:	f8da 3008 	ldr.w	r3, [sl, #8]
 801073c:	6858      	ldr	r0, [r3, #4]
 801073e:	e7ef      	b.n	8010720 <ai_platform_inputs_get+0xcc>
 8010740:	a1c00100 	.word	0xa1c00100

08010744 <ai_platform_outputs_get>:
 8010744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010748:	4b38      	ldr	r3, [pc, #224]	@ (801082c <ai_platform_outputs_get+0xe8>)
 801074a:	b085      	sub	sp, #20
 801074c:	6802      	ldr	r2, [r0, #0]
 801074e:	4393      	bics	r3, r2
 8010750:	e9cd 1002 	strd	r1, r0, [sp, #8]
 8010754:	d15f      	bne.n	8010816 <ai_platform_outputs_get+0xd2>
 8010756:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8010758:	2b01      	cmp	r3, #1
 801075a:	d94e      	bls.n	80107fa <ai_platform_outputs_get+0xb6>
 801075c:	f04f 0900 	mov.w	r9, #0
 8010760:	f8d0 a034 	ldr.w	sl, [r0, #52]	@ 0x34
 8010764:	464d      	mov	r5, r9
 8010766:	e016      	b.n	8010796 <ai_platform_outputs_get+0x52>
 8010768:	9901      	ldr	r1, [sp, #4]
 801076a:	2301      	movs	r3, #1
 801076c:	f848 3001 	str.w	r3, [r8, r1]
 8010770:	69b1      	ldr	r1, [r6, #24]
 8010772:	f04f 0301 	mov.w	r3, #1
 8010776:	684e      	ldr	r6, [r1, #4]
 8010778:	3501      	adds	r5, #1
 801077a:	f109 091c 	add.w	r9, r9, #28
 801077e:	7523      	strb	r3, [r4, #20]
 8010780:	2300      	movs	r3, #0
 8010782:	6961      	ldr	r1, [r4, #20]
 8010784:	6020      	str	r0, [r4, #0]
 8010786:	f36b 211f 	bfi	r1, fp, #8, #24
 801078a:	e9c4 c701 	strd	ip, r7, [r4, #4]
 801078e:	e9c4 3603 	strd	r3, r6, [r4, #12]
 8010792:	e9c4 1205 	strd	r1, r2, [r4, #20]
 8010796:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 801079a:	b2ac      	uxth	r4, r5
 801079c:	42ab      	cmp	r3, r5
 801079e:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 80107a2:	9301      	str	r3, [sp, #4]
 80107a4:	d93b      	bls.n	801081e <ai_platform_outputs_get+0xda>
 80107a6:	f8da 3010 	ldr.w	r3, [sl, #16]
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d037      	beq.n	801081e <ai_platform_outputs_get+0xda>
 80107ae:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 80107b2:	2e00      	cmp	r6, #0
 80107b4:	d033      	beq.n	801081e <ai_platform_outputs_get+0xda>
 80107b6:	f8da 3014 	ldr.w	r3, [sl, #20]
 80107ba:	69b2      	ldr	r2, [r6, #24]
 80107bc:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 80107c0:	6810      	ldr	r0, [r2, #0]
 80107c2:	68b3      	ldr	r3, [r6, #8]
 80107c4:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 80107c8:	68f2      	ldr	r2, [r6, #12]
 80107ca:	444c      	add	r4, r9
 80107cc:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 80107d0:	9200      	str	r2, [sp, #0]
 80107d2:	f002 ff9f 	bl	8013714 <ai_array_to_buffer_fmt>
 80107d6:	69b1      	ldr	r1, [r6, #24]
 80107d8:	9a00      	ldr	r2, [sp, #0]
 80107da:	f8d1 c008 	ldr.w	ip, [r1, #8]
 80107de:	2f00      	cmp	r7, #0
 80107e0:	d0c7      	beq.n	8010772 <ai_platform_outputs_get+0x2e>
 80107e2:	2100      	movs	r1, #0
 80107e4:	f848 1035 	str.w	r1, [r8, r5, lsl #3]
 80107e8:	6831      	ldr	r1, [r6, #0]
 80107ea:	6079      	str	r1, [r7, #4]
 80107ec:	b111      	cbz	r1, 80107f4 <ai_platform_outputs_get+0xb0>
 80107ee:	8849      	ldrh	r1, [r1, #2]
 80107f0:	2900      	cmp	r1, #0
 80107f2:	d1b9      	bne.n	8010768 <ai_platform_outputs_get+0x24>
 80107f4:	69b1      	ldr	r1, [r6, #24]
 80107f6:	2700      	movs	r7, #0
 80107f8:	e7bb      	b.n	8010772 <ai_platform_outputs_get+0x2e>
 80107fa:	9803      	ldr	r0, [sp, #12]
 80107fc:	2400      	movs	r4, #0
 80107fe:	2218      	movs	r2, #24
 8010800:	2111      	movs	r1, #17
 8010802:	300c      	adds	r0, #12
 8010804:	f000 fb94 	bl	8010f30 <core_set_error>
 8010808:	4620      	mov	r0, r4
 801080a:	9b02      	ldr	r3, [sp, #8]
 801080c:	b103      	cbz	r3, 8010810 <ai_platform_outputs_get+0xcc>
 801080e:	801c      	strh	r4, [r3, #0]
 8010810:	b005      	add	sp, #20
 8010812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010816:	2000      	movs	r0, #0
 8010818:	b005      	add	sp, #20
 801081a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801081e:	2c00      	cmp	r4, #0
 8010820:	d0eb      	beq.n	80107fa <ai_platform_outputs_get+0xb6>
 8010822:	f8da 3014 	ldr.w	r3, [sl, #20]
 8010826:	6858      	ldr	r0, [r3, #4]
 8010828:	e7ef      	b.n	801080a <ai_platform_outputs_get+0xc6>
 801082a:	bf00      	nop
 801082c:	a1c00100 	.word	0xa1c00100

08010830 <ai_platform_network_create>:
 8010830:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010834:	b083      	sub	sp, #12
 8010836:	f89d 8028 	ldrb.w	r8, [sp, #40]	@ 0x28
 801083a:	f89d 902c 	ldrb.w	r9, [sp, #44]	@ 0x2c
 801083e:	b320      	cbz	r0, 801088a <ai_platform_network_create+0x5a>
 8010840:	6002      	str	r2, [r0, #0]
 8010842:	4616      	mov	r6, r2
 8010844:	461f      	mov	r7, r3
 8010846:	4604      	mov	r4, r0
 8010848:	f000 fb6a 	bl	8010f20 <core_init>
 801084c:	b970      	cbnz	r0, 801086c <ai_platform_network_create+0x3c>
 801084e:	2530      	movs	r5, #48	@ 0x30
 8010850:	2300      	movs	r3, #0
 8010852:	6023      	str	r3, [r4, #0]
 8010854:	2410      	movs	r4, #16
 8010856:	464a      	mov	r2, r9
 8010858:	4641      	mov	r1, r8
 801085a:	4638      	mov	r0, r7
 801085c:	f003 f804 	bl	8013868 <ai_version_get>
 8010860:	60b0      	str	r0, [r6, #8]
 8010862:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 8010866:	b003      	add	sp, #12
 8010868:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801086c:	2200      	movs	r2, #0
 801086e:	4641      	mov	r1, r8
 8010870:	4638      	mov	r0, r7
 8010872:	f002 fff9 	bl	8013868 <ai_version_get>
 8010876:	4605      	mov	r5, r0
 8010878:	2200      	movs	r2, #0
 801087a:	2105      	movs	r1, #5
 801087c:	2001      	movs	r0, #1
 801087e:	f002 fff3 	bl	8013868 <ai_version_get>
 8010882:	4285      	cmp	r5, r0
 8010884:	d008      	beq.n	8010898 <ai_platform_network_create+0x68>
 8010886:	2501      	movs	r5, #1
 8010888:	e7e2      	b.n	8010850 <ai_platform_network_create+0x20>
 801088a:	2510      	movs	r5, #16
 801088c:	462c      	mov	r4, r5
 801088e:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 8010892:	b003      	add	sp, #12
 8010894:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010898:	4b05      	ldr	r3, [pc, #20]	@ (80108b0 <ai_platform_network_create+0x80>)
 801089a:	a801      	add	r0, sp, #4
 801089c:	9301      	str	r3, [sp, #4]
 801089e:	f000 fb53 	bl	8010f48 <ai_check_custom_types>
 80108a2:	b110      	cbz	r0, 80108aa <ai_platform_network_create+0x7a>
 80108a4:	2400      	movs	r4, #0
 80108a6:	4625      	mov	r5, r4
 80108a8:	e7d5      	b.n	8010856 <ai_platform_network_create+0x26>
 80108aa:	2502      	movs	r5, #2
 80108ac:	e7d0      	b.n	8010850 <ai_platform_network_create+0x20>
 80108ae:	bf00      	nop
 80108b0:	84048403 	.word	0x84048403

080108b4 <ai_platform_network_init>:
 80108b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108b8:	4a5c      	ldr	r2, [pc, #368]	@ (8010a2c <ai_platform_network_init+0x178>)
 80108ba:	460c      	mov	r4, r1
 80108bc:	6801      	ldr	r1, [r0, #0]
 80108be:	438a      	bics	r2, r1
 80108c0:	d133      	bne.n	801092a <ai_platform_network_init+0x76>
 80108c2:	4605      	mov	r5, r0
 80108c4:	2c00      	cmp	r4, #0
 80108c6:	f000 8093 	beq.w	80109f0 <ai_platform_network_init+0x13c>
 80108ca:	f8d4 b000 	ldr.w	fp, [r4]
 80108ce:	4a58      	ldr	r2, [pc, #352]	@ (8010a30 <ai_platform_network_init+0x17c>)
 80108d0:	4593      	cmp	fp, r2
 80108d2:	d10f      	bne.n	80108f4 <ai_platform_network_init+0x40>
 80108d4:	e9d4 e803 	ldrd	lr, r8, [r4, #12]
 80108d8:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 80108dc:	4b53      	ldr	r3, [pc, #332]	@ (8010a2c <ai_platform_network_init+0x178>)
 80108de:	ea4f 4a1e 	mov.w	sl, lr, lsr #16
 80108e2:	0c32      	lsrs	r2, r6, #16
 80108e4:	4299      	cmp	r1, r3
 80108e6:	d02c      	beq.n	8010942 <ai_platform_network_init+0x8e>
 80108e8:	2303      	movs	r3, #3
 80108ea:	462c      	mov	r4, r5
 80108ec:	612b      	str	r3, [r5, #16]
 80108ee:	4620      	mov	r0, r4
 80108f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108f4:	4627      	mov	r7, r4
 80108f6:	2101      	movs	r1, #1
 80108f8:	6864      	ldr	r4, [r4, #4]
 80108fa:	4638      	mov	r0, r7
 80108fc:	f107 081c 	add.w	r8, r7, #28
 8010900:	f7ff fd7e 	bl	8010400 <ai_buffer_get_size>
 8010904:	4606      	mov	r6, r0
 8010906:	2101      	movs	r1, #1
 8010908:	4640      	mov	r0, r8
 801090a:	f8d7 9020 	ldr.w	r9, [r7, #32]
 801090e:	f7ff fd77 	bl	8010400 <ai_buffer_get_size>
 8010912:	b976      	cbnz	r6, 8010932 <ai_platform_network_init+0x7e>
 8010914:	2800      	cmp	r0, #0
 8010916:	d150      	bne.n	80109ba <ai_platform_network_init+0x106>
 8010918:	4680      	mov	r8, r0
 801091a:	4686      	mov	lr, r0
 801091c:	4606      	mov	r6, r0
 801091e:	4607      	mov	r7, r0
 8010920:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
 8010924:	6829      	ldr	r1, [r5, #0]
 8010926:	0436      	lsls	r6, r6, #16
 8010928:	e7d8      	b.n	80108dc <ai_platform_network_init+0x28>
 801092a:	2400      	movs	r4, #0
 801092c:	4620      	mov	r0, r4
 801092e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010932:	2800      	cmp	r0, #0
 8010934:	d13b      	bne.n	80109ae <ai_platform_network_init+0xfa>
 8010936:	4680      	mov	r8, r0
 8010938:	4686      	mov	lr, r0
 801093a:	2c00      	cmp	r4, #0
 801093c:	d05e      	beq.n	80109fc <ai_platform_network_init+0x148>
 801093e:	2601      	movs	r6, #1
 8010940:	e7ee      	b.n	8010920 <ai_platform_network_init+0x6c>
 8010942:	8c6b      	ldrh	r3, [r5, #34]	@ 0x22
 8010944:	4293      	cmp	r3, r2
 8010946:	4b3a      	ldr	r3, [pc, #232]	@ (8010a30 <ai_platform_network_init+0x17c>)
 8010948:	d33e      	bcc.n	80109c8 <ai_platform_network_init+0x114>
 801094a:	459b      	cmp	fp, r3
 801094c:	d03e      	beq.n	80109cc <ai_platform_network_init+0x118>
 801094e:	b1a2      	cbz	r2, 801097a <ai_platform_network_init+0xc6>
 8010950:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8010954:	f04f 0c00 	mov.w	ip, #0
 8010958:	ea4f 0982 	mov.w	r9, r2, lsl #2
 801095c:	6a6c      	ldr	r4, [r5, #36]	@ 0x24
 801095e:	eb07 0b0c 	add.w	fp, r7, ip
 8010962:	4464      	add	r4, ip
 8010964:	f10c 0c1c 	add.w	ip, ip, #28
 8010968:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 801096c:	45cc      	cmp	ip, r9
 801096e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010970:	e89b 0007 	ldmia.w	fp, {r0, r1, r2}
 8010974:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8010978:	d1f0      	bne.n	801095c <ai_platform_network_init+0xa8>
 801097a:	8d6b      	ldrh	r3, [r5, #42]	@ 0x2a
 801097c:	622e      	str	r6, [r5, #32]
 801097e:	4553      	cmp	r3, sl
 8010980:	d34b      	bcc.n	8010a1a <ai_platform_network_init+0x166>
 8010982:	f1ba 0f00 	cmp.w	sl, #0
 8010986:	d025      	beq.n	80109d4 <ai_platform_network_init+0x120>
 8010988:	ebca 0aca 	rsb	sl, sl, sl, lsl #3
 801098c:	2700      	movs	r7, #0
 801098e:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8010992:	6aec      	ldr	r4, [r5, #44]	@ 0x2c
 8010994:	eb08 0607 	add.w	r6, r8, r7
 8010998:	443c      	add	r4, r7
 801099a:	371c      	adds	r7, #28
 801099c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801099e:	4557      	cmp	r7, sl
 80109a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80109a2:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80109a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80109aa:	d1f2      	bne.n	8010992 <ai_platform_network_init+0xde>
 80109ac:	e012      	b.n	80109d4 <ai_platform_network_init+0x120>
 80109ae:	f1b9 0f00 	cmp.w	r9, #0
 80109b2:	d015      	beq.n	80109e0 <ai_platform_network_init+0x12c>
 80109b4:	f04f 0e01 	mov.w	lr, #1
 80109b8:	e7bf      	b.n	801093a <ai_platform_network_init+0x86>
 80109ba:	f1b9 0f00 	cmp.w	r9, #0
 80109be:	d00f      	beq.n	80109e0 <ai_platform_network_init+0x12c>
 80109c0:	f04f 0e01 	mov.w	lr, #1
 80109c4:	4637      	mov	r7, r6
 80109c6:	e7ab      	b.n	8010920 <ai_platform_network_init+0x6c>
 80109c8:	459b      	cmp	fp, r3
 80109ca:	d11e      	bne.n	8010a0a <ai_platform_network_init+0x156>
 80109cc:	f8c5 802c 	str.w	r8, [r5, #44]	@ 0x2c
 80109d0:	e9c5 6708 	strd	r6, r7, [r5, #32]
 80109d4:	4628      	mov	r0, r5
 80109d6:	f8c5 e028 	str.w	lr, [r5, #40]	@ 0x28
 80109da:	f000 fadd 	bl	8010f98 <ai_layers_init_all>
 80109de:	e783      	b.n	80108e8 <ai_platform_network_init+0x34>
 80109e0:	2213      	movs	r2, #19
 80109e2:	2110      	movs	r1, #16
 80109e4:	f105 000c 	add.w	r0, r5, #12
 80109e8:	2400      	movs	r4, #0
 80109ea:	f000 faa1 	bl	8010f30 <core_set_error>
 80109ee:	e77e      	b.n	80108ee <ai_platform_network_init+0x3a>
 80109f0:	2211      	movs	r2, #17
 80109f2:	2110      	movs	r1, #16
 80109f4:	300c      	adds	r0, #12
 80109f6:	f000 fa9b 	bl	8010f30 <core_set_error>
 80109fa:	e778      	b.n	80108ee <ai_platform_network_init+0x3a>
 80109fc:	2212      	movs	r2, #18
 80109fe:	2110      	movs	r1, #16
 8010a00:	f105 000c 	add.w	r0, r5, #12
 8010a04:	f000 fa94 	bl	8010f30 <core_set_error>
 8010a08:	e771      	b.n	80108ee <ai_platform_network_init+0x3a>
 8010a0a:	2212      	movs	r2, #18
 8010a0c:	2116      	movs	r1, #22
 8010a0e:	f105 000c 	add.w	r0, r5, #12
 8010a12:	2400      	movs	r4, #0
 8010a14:	f000 fa8c 	bl	8010f30 <core_set_error>
 8010a18:	e769      	b.n	80108ee <ai_platform_network_init+0x3a>
 8010a1a:	2213      	movs	r2, #19
 8010a1c:	2116      	movs	r1, #22
 8010a1e:	f105 000c 	add.w	r0, r5, #12
 8010a22:	2400      	movs	r4, #0
 8010a24:	f000 fa84 	bl	8010f30 <core_set_error>
 8010a28:	e761      	b.n	80108ee <ai_platform_network_init+0x3a>
 8010a2a:	bf00      	nop
 8010a2c:	a1c00100 	.word	0xa1c00100
 8010a30:	a1facade 	.word	0xa1facade

08010a34 <ai_platform_network_post_init>:
 8010a34:	b538      	push	{r3, r4, r5, lr}
 8010a36:	4b16      	ldr	r3, [pc, #88]	@ (8010a90 <ai_platform_network_post_init+0x5c>)
 8010a38:	6802      	ldr	r2, [r0, #0]
 8010a3a:	ea02 0103 	and.w	r1, r2, r3
 8010a3e:	4393      	bics	r3, r2
 8010a40:	d108      	bne.n	8010a54 <ai_platform_network_post_init+0x20>
 8010a42:	6903      	ldr	r3, [r0, #16]
 8010a44:	4604      	mov	r4, r0
 8010a46:	f013 0502 	ands.w	r5, r3, #2
 8010a4a:	d005      	beq.n	8010a58 <ai_platform_network_post_init+0x24>
 8010a4c:	428a      	cmp	r2, r1
 8010a4e:	d00a      	beq.n	8010a66 <ai_platform_network_post_init+0x32>
 8010a50:	2001      	movs	r0, #1
 8010a52:	bd38      	pop	{r3, r4, r5, pc}
 8010a54:	2000      	movs	r0, #0
 8010a56:	bd38      	pop	{r3, r4, r5, pc}
 8010a58:	2210      	movs	r2, #16
 8010a5a:	2111      	movs	r1, #17
 8010a5c:	300c      	adds	r0, #12
 8010a5e:	f000 fa67 	bl	8010f30 <core_set_error>
 8010a62:	4628      	mov	r0, r5
 8010a64:	bd38      	pop	{r3, r4, r5, pc}
 8010a66:	f000 faa5 	bl	8010fb4 <ai_layers_post_init_all>
 8010a6a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d0ef      	beq.n	8010a50 <ai_platform_network_post_init+0x1c>
 8010a70:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 8010a72:	e008      	b.n	8010a86 <ai_platform_network_post_init+0x52>
 8010a74:	e9d4 3210 	ldrd	r3, r2, [r4, #64]	@ 0x40
 8010a78:	4798      	blx	r3
 8010a7a:	692b      	ldr	r3, [r5, #16]
 8010a7c:	42ab      	cmp	r3, r5
 8010a7e:	461d      	mov	r5, r3
 8010a80:	d0e6      	beq.n	8010a50 <ai_platform_network_post_init+0x1c>
 8010a82:	2b00      	cmp	r3, #0
 8010a84:	d0e4      	beq.n	8010a50 <ai_platform_network_post_init+0x1c>
 8010a86:	4629      	mov	r1, r5
 8010a88:	2000      	movs	r0, #0
 8010a8a:	2d00      	cmp	r5, #0
 8010a8c:	d1f2      	bne.n	8010a74 <ai_platform_network_post_init+0x40>
 8010a8e:	e7df      	b.n	8010a50 <ai_platform_network_post_init+0x1c>
 8010a90:	a1c00100 	.word	0xa1c00100

08010a94 <ai_platform_network_process>:
 8010a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a98:	b085      	sub	sp, #20
 8010a9a:	4bb7      	ldr	r3, [pc, #732]	@ (8010d78 <ai_platform_network_process+0x2e4>)
 8010a9c:	9202      	str	r2, [sp, #8]
 8010a9e:	6802      	ldr	r2, [r0, #0]
 8010aa0:	4393      	bics	r3, r2
 8010aa2:	f040 8142 	bne.w	8010d2a <ai_platform_network_process+0x296>
 8010aa6:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8010aa8:	4605      	mov	r5, r0
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	f000 8126 	beq.w	8010cfc <ai_platform_network_process+0x268>
 8010ab0:	6903      	ldr	r3, [r0, #16]
 8010ab2:	2200      	movs	r2, #0
 8010ab4:	f8d0 8034 	ldr.w	r8, [r0, #52]	@ 0x34
 8010ab8:	f003 0303 	and.w	r3, r3, #3
 8010abc:	6182      	str	r2, [r0, #24]
 8010abe:	2b03      	cmp	r3, #3
 8010ac0:	f040 8122 	bne.w	8010d08 <ai_platform_network_process+0x274>
 8010ac4:	2900      	cmp	r1, #0
 8010ac6:	f000 8136 	beq.w	8010d36 <ai_platform_network_process+0x2a2>
 8010aca:	fab8 f788 	clz	r7, r8
 8010ace:	097f      	lsrs	r7, r7, #5
 8010ad0:	f1b8 0f00 	cmp.w	r8, #0
 8010ad4:	f000 812f 	beq.w	8010d36 <ai_platform_network_process+0x2a2>
 8010ad8:	f8b8 3000 	ldrh.w	r3, [r8]
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	f000 812a 	beq.w	8010d36 <ai_platform_network_process+0x2a2>
 8010ae2:	698b      	ldr	r3, [r1, #24]
 8010ae4:	460e      	mov	r6, r1
 8010ae6:	9003      	str	r0, [sp, #12]
 8010ae8:	681b      	ldr	r3, [r3, #0]
 8010aea:	9301      	str	r3, [sp, #4]
 8010aec:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d072      	beq.n	8010bda <ai_platform_network_process+0x146>
 8010af4:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8010af8:	2c00      	cmp	r4, #0
 8010afa:	d06e      	beq.n	8010bda <ai_platform_network_process+0x146>
 8010afc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010b00:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8010b04:	f8d3 a000 	ldr.w	sl, [r3]
 8010b08:	eb1a 1907 	adds.w	r9, sl, r7, lsl #4
 8010b0c:	f000 8112 	beq.w	8010d34 <ai_platform_network_process+0x2a0>
 8010b10:	69a3      	ldr	r3, [r4, #24]
 8010b12:	2101      	movs	r1, #1
 8010b14:	4630      	mov	r0, r6
 8010b16:	685d      	ldr	r5, [r3, #4]
 8010b18:	f7ff fc72 	bl	8010400 <ai_buffer_get_size>
 8010b1c:	4285      	cmp	r5, r0
 8010b1e:	f0c0 8115 	bcc.w	8010d4c <ai_platform_network_process+0x2b8>
 8010b22:	68e0      	ldr	r0, [r4, #12]
 8010b24:	69b1      	ldr	r1, [r6, #24]
 8010b26:	68c2      	ldr	r2, [r0, #12]
 8010b28:	68cb      	ldr	r3, [r1, #12]
 8010b2a:	429a      	cmp	r2, r3
 8010b2c:	f040 810e 	bne.w	8010d4c <ai_platform_network_process+0x2b8>
 8010b30:	6882      	ldr	r2, [r0, #8]
 8010b32:	688b      	ldr	r3, [r1, #8]
 8010b34:	429a      	cmp	r2, r3
 8010b36:	f040 8109 	bne.w	8010d4c <ai_platform_network_process+0x2b8>
 8010b3a:	6842      	ldr	r2, [r0, #4]
 8010b3c:	684b      	ldr	r3, [r1, #4]
 8010b3e:	429a      	cmp	r2, r3
 8010b40:	f040 8104 	bne.w	8010d4c <ai_platform_network_process+0x2b8>
 8010b44:	69a3      	ldr	r3, [r4, #24]
 8010b46:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010b4a:	f002 fe7b 	bl	8013844 <ai_array_get_data_byte_size>
 8010b4e:	4605      	mov	r5, r0
 8010b50:	4620      	mov	r0, r4
 8010b52:	f002 fe8f 	bl	8013874 <get_tensor_byte_size>
 8010b56:	4285      	cmp	r5, r0
 8010b58:	f0c0 80f8 	bcc.w	8010d4c <ai_platform_network_process+0x2b8>
 8010b5c:	69a3      	ldr	r3, [r4, #24]
 8010b5e:	6818      	ldr	r0, [r3, #0]
 8010b60:	f002 fdd8 	bl	8013714 <ai_array_to_buffer_fmt>
 8010b64:	6833      	ldr	r3, [r6, #0]
 8010b66:	4058      	eors	r0, r3
 8010b68:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 8010b6c:	f040 81a4 	bne.w	8010eb8 <ai_platform_network_process+0x424>
 8010b70:	6873      	ldr	r3, [r6, #4]
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	f000 80de 	beq.w	8010d34 <ai_platform_network_process+0x2a0>
 8010b78:	69b3      	ldr	r3, [r6, #24]
 8010b7a:	681b      	ldr	r3, [r3, #0]
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	f000 81a4 	beq.w	8010eca <ai_platform_network_process+0x436>
 8010b82:	9a01      	ldr	r2, [sp, #4]
 8010b84:	4620      	mov	r0, r4
 8010b86:	3701      	adds	r7, #1
 8010b88:	361c      	adds	r6, #28
 8010b8a:	429a      	cmp	r2, r3
 8010b8c:	bf38      	it	cc
 8010b8e:	461a      	movcc	r2, r3
 8010b90:	9201      	str	r2, [sp, #4]
 8010b92:	f002 fe6f 	bl	8013874 <get_tensor_byte_size>
 8010b96:	f8c9 0008 	str.w	r0, [r9, #8]
 8010b9a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	fb00 f303 	mul.w	r3, r0, r3
 8010ba4:	f8c9 300c 	str.w	r3, [r9, #12]
 8010ba8:	f856 1c18 	ldr.w	r1, [r6, #-24]
 8010bac:	440b      	add	r3, r1
 8010bae:	f8c9 1004 	str.w	r1, [r9, #4]
 8010bb2:	f84a 300b 	str.w	r3, [sl, fp]
 8010bb6:	69a0      	ldr	r0, [r4, #24]
 8010bb8:	6803      	ldr	r3, [r0, #0]
 8010bba:	009a      	lsls	r2, r3, #2
 8010bbc:	f100 80af 	bmi.w	8010d1e <ai_platform_network_process+0x28a>
 8010bc0:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8010bc4:	1a9b      	subs	r3, r3, r2
 8010bc6:	4419      	add	r1, r3
 8010bc8:	6081      	str	r1, [r0, #8]
 8010bca:	69a3      	ldr	r3, [r4, #24]
 8010bcc:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8010bd0:	60da      	str	r2, [r3, #12]
 8010bd2:	f8b8 3000 	ldrh.w	r3, [r8]
 8010bd6:	42bb      	cmp	r3, r7
 8010bd8:	d888      	bhi.n	8010aec <ai_platform_network_process+0x58>
 8010bda:	9d03      	ldr	r5, [sp, #12]
 8010bdc:	9b02      	ldr	r3, [sp, #8]
 8010bde:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	f000 817b 	beq.w	8010edc <ai_platform_network_process+0x448>
 8010be6:	2a01      	cmp	r2, #1
 8010be8:	f240 80bd 	bls.w	8010d66 <ai_platform_network_process+0x2d2>
 8010bec:	f8d5 9034 	ldr.w	r9, [r5, #52]	@ 0x34
 8010bf0:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	f000 80b6 	beq.w	8010d66 <ai_platform_network_process+0x2d2>
 8010bfa:	2700      	movs	r7, #0
 8010bfc:	f8dd b008 	ldr.w	fp, [sp, #8]
 8010c00:	9502      	str	r5, [sp, #8]
 8010c02:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	f000 80bd 	beq.w	8010d86 <ai_platform_network_process+0x2f2>
 8010c0c:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 8010c10:	2e00      	cmp	r6, #0
 8010c12:	f000 80b8 	beq.w	8010d86 <ai_platform_network_process+0x2f2>
 8010c16:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8010c1a:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 8010c1e:	681c      	ldr	r4, [r3, #0]
 8010c20:	eb14 1807 	adds.w	r8, r4, r7, lsl #4
 8010c24:	f000 8170 	beq.w	8010f08 <ai_platform_network_process+0x474>
 8010c28:	69b3      	ldr	r3, [r6, #24]
 8010c2a:	2101      	movs	r1, #1
 8010c2c:	4658      	mov	r0, fp
 8010c2e:	685d      	ldr	r5, [r3, #4]
 8010c30:	f7ff fbe6 	bl	8010400 <ai_buffer_get_size>
 8010c34:	4285      	cmp	r5, r0
 8010c36:	f0c0 8095 	bcc.w	8010d64 <ai_platform_network_process+0x2d0>
 8010c3a:	68f0      	ldr	r0, [r6, #12]
 8010c3c:	f8db 1018 	ldr.w	r1, [fp, #24]
 8010c40:	68c2      	ldr	r2, [r0, #12]
 8010c42:	68cb      	ldr	r3, [r1, #12]
 8010c44:	429a      	cmp	r2, r3
 8010c46:	f040 808d 	bne.w	8010d64 <ai_platform_network_process+0x2d0>
 8010c4a:	6882      	ldr	r2, [r0, #8]
 8010c4c:	688b      	ldr	r3, [r1, #8]
 8010c4e:	429a      	cmp	r2, r3
 8010c50:	f040 8088 	bne.w	8010d64 <ai_platform_network_process+0x2d0>
 8010c54:	6842      	ldr	r2, [r0, #4]
 8010c56:	684b      	ldr	r3, [r1, #4]
 8010c58:	429a      	cmp	r2, r3
 8010c5a:	f040 8083 	bne.w	8010d64 <ai_platform_network_process+0x2d0>
 8010c5e:	69b3      	ldr	r3, [r6, #24]
 8010c60:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010c64:	f002 fdee 	bl	8013844 <ai_array_get_data_byte_size>
 8010c68:	9003      	str	r0, [sp, #12]
 8010c6a:	4630      	mov	r0, r6
 8010c6c:	f002 fe02 	bl	8013874 <get_tensor_byte_size>
 8010c70:	9b03      	ldr	r3, [sp, #12]
 8010c72:	4283      	cmp	r3, r0
 8010c74:	d376      	bcc.n	8010d64 <ai_platform_network_process+0x2d0>
 8010c76:	69b3      	ldr	r3, [r6, #24]
 8010c78:	6818      	ldr	r0, [r3, #0]
 8010c7a:	f002 fd4b 	bl	8013714 <ai_array_to_buffer_fmt>
 8010c7e:	f8db 3000 	ldr.w	r3, [fp]
 8010c82:	4058      	eors	r0, r3
 8010c84:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 8010c88:	f040 812c 	bne.w	8010ee4 <ai_platform_network_process+0x450>
 8010c8c:	f8db 3004 	ldr.w	r3, [fp, #4]
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	f000 8139 	beq.w	8010f08 <ai_platform_network_process+0x474>
 8010c96:	f8db 3018 	ldr.w	r3, [fp, #24]
 8010c9a:	681b      	ldr	r3, [r3, #0]
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	f000 812a 	beq.w	8010ef6 <ai_platform_network_process+0x462>
 8010ca2:	9a01      	ldr	r2, [sp, #4]
 8010ca4:	4630      	mov	r0, r6
 8010ca6:	3701      	adds	r7, #1
 8010ca8:	f10b 0b1c 	add.w	fp, fp, #28
 8010cac:	429a      	cmp	r2, r3
 8010cae:	bf38      	it	cc
 8010cb0:	461a      	movcc	r2, r3
 8010cb2:	9201      	str	r2, [sp, #4]
 8010cb4:	f002 fdde 	bl	8013874 <get_tensor_byte_size>
 8010cb8:	f8c8 0008 	str.w	r0, [r8, #8]
 8010cbc:	f85b 3c04 	ldr.w	r3, [fp, #-4]
 8010cc0:	681b      	ldr	r3, [r3, #0]
 8010cc2:	fb00 f303 	mul.w	r3, r0, r3
 8010cc6:	f8c8 300c 	str.w	r3, [r8, #12]
 8010cca:	f85b 1c18 	ldr.w	r1, [fp, #-24]
 8010cce:	440b      	add	r3, r1
 8010cd0:	f8c8 1004 	str.w	r1, [r8, #4]
 8010cd4:	f844 300a 	str.w	r3, [r4, sl]
 8010cd8:	69b0      	ldr	r0, [r6, #24]
 8010cda:	6803      	ldr	r3, [r0, #0]
 8010cdc:	009b      	lsls	r3, r3, #2
 8010cde:	d44d      	bmi.n	8010d7c <ai_platform_network_process+0x2e8>
 8010ce0:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8010ce4:	1a9b      	subs	r3, r3, r2
 8010ce6:	4419      	add	r1, r3
 8010ce8:	6081      	str	r1, [r0, #8]
 8010cea:	69b3      	ldr	r3, [r6, #24]
 8010cec:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8010cf0:	60da      	str	r2, [r3, #12]
 8010cf2:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8010cf6:	42bb      	cmp	r3, r7
 8010cf8:	d883      	bhi.n	8010c02 <ai_platform_network_process+0x16e>
 8010cfa:	e044      	b.n	8010d86 <ai_platform_network_process+0x2f2>
 8010cfc:	6902      	ldr	r2, [r0, #16]
 8010cfe:	6183      	str	r3, [r0, #24]
 8010d00:	f002 0203 	and.w	r2, r2, #3
 8010d04:	2a03      	cmp	r2, #3
 8010d06:	d016      	beq.n	8010d36 <ai_platform_network_process+0x2a2>
 8010d08:	2230      	movs	r2, #48	@ 0x30
 8010d0a:	2111      	movs	r1, #17
 8010d0c:	f105 000c 	add.w	r0, r5, #12
 8010d10:	2400      	movs	r4, #0
 8010d12:	f000 f90d 	bl	8010f30 <core_set_error>
 8010d16:	4620      	mov	r0, r4
 8010d18:	b005      	add	sp, #20
 8010d1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d1e:	f8b8 3000 	ldrh.w	r3, [r8]
 8010d22:	429f      	cmp	r7, r3
 8010d24:	f4ff aee2 	bcc.w	8010aec <ai_platform_network_process+0x58>
 8010d28:	e757      	b.n	8010bda <ai_platform_network_process+0x146>
 8010d2a:	2400      	movs	r4, #0
 8010d2c:	4620      	mov	r0, r4
 8010d2e:	b005      	add	sp, #20
 8010d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d34:	9d03      	ldr	r5, [sp, #12]
 8010d36:	2400      	movs	r4, #0
 8010d38:	2217      	movs	r2, #23
 8010d3a:	2112      	movs	r1, #18
 8010d3c:	f105 000c 	add.w	r0, r5, #12
 8010d40:	f000 f8f6 	bl	8010f30 <core_set_error>
 8010d44:	4620      	mov	r0, r4
 8010d46:	b005      	add	sp, #20
 8010d48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d4c:	9d03      	ldr	r5, [sp, #12]
 8010d4e:	2400      	movs	r4, #0
 8010d50:	2218      	movs	r2, #24
 8010d52:	2112      	movs	r1, #18
 8010d54:	f105 000c 	add.w	r0, r5, #12
 8010d58:	f000 f8ea 	bl	8010f30 <core_set_error>
 8010d5c:	4620      	mov	r0, r4
 8010d5e:	b005      	add	sp, #20
 8010d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d64:	9d02      	ldr	r5, [sp, #8]
 8010d66:	2218      	movs	r2, #24
 8010d68:	2113      	movs	r1, #19
 8010d6a:	f105 000c 	add.w	r0, r5, #12
 8010d6e:	2400      	movs	r4, #0
 8010d70:	f000 f8de 	bl	8010f30 <core_set_error>
 8010d74:	e7cf      	b.n	8010d16 <ai_platform_network_process+0x282>
 8010d76:	bf00      	nop
 8010d78:	a1c00100 	.word	0xa1c00100
 8010d7c:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8010d80:	429f      	cmp	r7, r3
 8010d82:	f4ff af3e 	bcc.w	8010c02 <ai_platform_network_process+0x16e>
 8010d86:	9d02      	ldr	r5, [sp, #8]
 8010d88:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8010d8c:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
 8010d8e:	832b      	strh	r3, [r5, #24]
 8010d90:	2a00      	cmp	r2, #0
 8010d92:	f040 808b 	bne.w	8010eac <ai_platform_network_process+0x418>
 8010d96:	4616      	mov	r6, r2
 8010d98:	4617      	mov	r7, r2
 8010d9a:	8b6c      	ldrh	r4, [r5, #26]
 8010d9c:	429c      	cmp	r4, r3
 8010d9e:	d2ba      	bcs.n	8010d16 <ai_platform_network_process+0x282>
 8010da0:	46ab      	mov	fp, r5
 8010da2:	2e00      	cmp	r6, #0
 8010da4:	d030      	beq.n	8010e08 <ai_platform_network_process+0x374>
 8010da6:	f04f 0800 	mov.w	r8, #0
 8010daa:	e014      	b.n	8010dd6 <ai_platform_network_process+0x342>
 8010dac:	6882      	ldr	r2, [r0, #8]
 8010dae:	68c5      	ldr	r5, [r0, #12]
 8010db0:	6863      	ldr	r3, [r4, #4]
 8010db2:	1b52      	subs	r2, r2, r5
 8010db4:	4413      	add	r3, r2
 8010db6:	6083      	str	r3, [r0, #8]
 8010db8:	698b      	ldr	r3, [r1, #24]
 8010dba:	6862      	ldr	r2, [r4, #4]
 8010dbc:	60da      	str	r2, [r3, #12]
 8010dbe:	f859 200a 	ldr.w	r2, [r9, sl]
 8010dc2:	f108 0801 	add.w	r8, r8, #1
 8010dc6:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8010dca:	440b      	add	r3, r1
 8010dcc:	4293      	cmp	r3, r2
 8010dce:	d301      	bcc.n	8010dd4 <ai_platform_network_process+0x340>
 8010dd0:	68e3      	ldr	r3, [r4, #12]
 8010dd2:	1ad3      	subs	r3, r2, r3
 8010dd4:	6063      	str	r3, [r4, #4]
 8010dd6:	8833      	ldrh	r3, [r6, #0]
 8010dd8:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8010ddc:	4543      	cmp	r3, r8
 8010dde:	d913      	bls.n	8010e08 <ai_platform_network_process+0x374>
 8010de0:	6873      	ldr	r3, [r6, #4]
 8010de2:	b18b      	cbz	r3, 8010e08 <ai_platform_network_process+0x374>
 8010de4:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8010de8:	b171      	cbz	r1, 8010e08 <ai_platform_network_process+0x374>
 8010dea:	6988      	ldr	r0, [r1, #24]
 8010dec:	68b2      	ldr	r2, [r6, #8]
 8010dee:	6803      	ldr	r3, [r0, #0]
 8010df0:	f8d2 9000 	ldr.w	r9, [r2]
 8010df4:	009d      	lsls	r5, r3, #2
 8010df6:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 8010dfa:	d5d7      	bpl.n	8010dac <ai_platform_network_process+0x318>
 8010dfc:	6881      	ldr	r1, [r0, #8]
 8010dfe:	68a2      	ldr	r2, [r4, #8]
 8010e00:	6860      	ldr	r0, [r4, #4]
 8010e02:	f002 fbe5 	bl	80135d0 <st_int8_copy>
 8010e06:	e7da      	b.n	8010dbe <ai_platform_network_process+0x32a>
 8010e08:	4658      	mov	r0, fp
 8010e0a:	f000 f8e7 	bl	8010fdc <ai_layers_forward_all>
 8010e0e:	2f00      	cmp	r7, #0
 8010e10:	d03d      	beq.n	8010e8e <ai_platform_network_process+0x3fa>
 8010e12:	2400      	movs	r4, #0
 8010e14:	e016      	b.n	8010e44 <ai_platform_network_process+0x3b0>
 8010e16:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 8010e1a:	f859 100a 	ldr.w	r1, [r9, sl]
 8010e1e:	4413      	add	r3, r2
 8010e20:	428b      	cmp	r3, r1
 8010e22:	d302      	bcc.n	8010e2a <ai_platform_network_process+0x396>
 8010e24:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010e28:	1acb      	subs	r3, r1, r3
 8010e2a:	f8c8 3004 	str.w	r3, [r8, #4]
 8010e2e:	6981      	ldr	r1, [r0, #24]
 8010e30:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8010e34:	1b52      	subs	r2, r2, r5
 8010e36:	4413      	add	r3, r2
 8010e38:	608b      	str	r3, [r1, #8]
 8010e3a:	6983      	ldr	r3, [r0, #24]
 8010e3c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8010e40:	60da      	str	r2, [r3, #12]
 8010e42:	3401      	adds	r4, #1
 8010e44:	883b      	ldrh	r3, [r7, #0]
 8010e46:	42a3      	cmp	r3, r4
 8010e48:	d921      	bls.n	8010e8e <ai_platform_network_process+0x3fa>
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	b1fb      	cbz	r3, 8010e8e <ai_platform_network_process+0x3fa>
 8010e4e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8010e52:	b1e0      	cbz	r0, 8010e8e <ai_platform_network_process+0x3fa>
 8010e54:	68ba      	ldr	r2, [r7, #8]
 8010e56:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 8010e5a:	6983      	ldr	r3, [r0, #24]
 8010e5c:	f8d2 9000 	ldr.w	r9, [r2]
 8010e60:	681a      	ldr	r2, [r3, #0]
 8010e62:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 8010e66:	0092      	lsls	r2, r2, #2
 8010e68:	d5d5      	bpl.n	8010e16 <ai_platform_network_process+0x382>
 8010e6a:	6898      	ldr	r0, [r3, #8]
 8010e6c:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 8010e70:	f002 fbae 	bl	80135d0 <st_int8_copy>
 8010e74:	f859 200a 	ldr.w	r2, [r9, sl]
 8010e78:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8010e7c:	440b      	add	r3, r1
 8010e7e:	4293      	cmp	r3, r2
 8010e80:	d302      	bcc.n	8010e88 <ai_platform_network_process+0x3f4>
 8010e82:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010e86:	1ad3      	subs	r3, r2, r3
 8010e88:	f8c8 3004 	str.w	r3, [r8, #4]
 8010e8c:	e7d9      	b.n	8010e42 <ai_platform_network_process+0x3ae>
 8010e8e:	f8bb 401a 	ldrh.w	r4, [fp, #26]
 8010e92:	f8bb 3018 	ldrh.w	r3, [fp, #24]
 8010e96:	3401      	adds	r4, #1
 8010e98:	b2a4      	uxth	r4, r4
 8010e9a:	42a3      	cmp	r3, r4
 8010e9c:	f8ab 401a 	strh.w	r4, [fp, #26]
 8010ea0:	f63f af7f 	bhi.w	8010da2 <ai_platform_network_process+0x30e>
 8010ea4:	4620      	mov	r0, r4
 8010ea6:	b005      	add	sp, #20
 8010ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010eac:	2a01      	cmp	r2, #1
 8010eae:	6b6e      	ldr	r6, [r5, #52]	@ 0x34
 8010eb0:	d033      	beq.n	8010f1a <ai_platform_network_process+0x486>
 8010eb2:	f106 070c 	add.w	r7, r6, #12
 8010eb6:	e770      	b.n	8010d9a <ai_platform_network_process+0x306>
 8010eb8:	9d03      	ldr	r5, [sp, #12]
 8010eba:	2219      	movs	r2, #25
 8010ebc:	2112      	movs	r1, #18
 8010ebe:	2400      	movs	r4, #0
 8010ec0:	f105 000c 	add.w	r0, r5, #12
 8010ec4:	f000 f834 	bl	8010f30 <core_set_error>
 8010ec8:	e725      	b.n	8010d16 <ai_platform_network_process+0x282>
 8010eca:	9d03      	ldr	r5, [sp, #12]
 8010ecc:	4604      	mov	r4, r0
 8010ece:	2221      	movs	r2, #33	@ 0x21
 8010ed0:	2112      	movs	r1, #18
 8010ed2:	f105 000c 	add.w	r0, r5, #12
 8010ed6:	f000 f82b 	bl	8010f30 <core_set_error>
 8010eda:	e71c      	b.n	8010d16 <ai_platform_network_process+0x282>
 8010edc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8010ee0:	832b      	strh	r3, [r5, #24]
 8010ee2:	e755      	b.n	8010d90 <ai_platform_network_process+0x2fc>
 8010ee4:	9d02      	ldr	r5, [sp, #8]
 8010ee6:	2219      	movs	r2, #25
 8010ee8:	2113      	movs	r1, #19
 8010eea:	2400      	movs	r4, #0
 8010eec:	f105 000c 	add.w	r0, r5, #12
 8010ef0:	f000 f81e 	bl	8010f30 <core_set_error>
 8010ef4:	e70f      	b.n	8010d16 <ai_platform_network_process+0x282>
 8010ef6:	9d02      	ldr	r5, [sp, #8]
 8010ef8:	4604      	mov	r4, r0
 8010efa:	2221      	movs	r2, #33	@ 0x21
 8010efc:	2113      	movs	r1, #19
 8010efe:	f105 000c 	add.w	r0, r5, #12
 8010f02:	f000 f815 	bl	8010f30 <core_set_error>
 8010f06:	e706      	b.n	8010d16 <ai_platform_network_process+0x282>
 8010f08:	9d02      	ldr	r5, [sp, #8]
 8010f0a:	2217      	movs	r2, #23
 8010f0c:	2113      	movs	r1, #19
 8010f0e:	2400      	movs	r4, #0
 8010f10:	f105 000c 	add.w	r0, r5, #12
 8010f14:	f000 f80c 	bl	8010f30 <core_set_error>
 8010f18:	e6fd      	b.n	8010d16 <ai_platform_network_process+0x282>
 8010f1a:	2700      	movs	r7, #0
 8010f1c:	e73d      	b.n	8010d9a <ai_platform_network_process+0x306>
 8010f1e:	bf00      	nop

08010f20 <core_init>:
 8010f20:	2001      	movs	r0, #1
 8010f22:	4770      	bx	lr

08010f24 <core_get_error>:
 8010f24:	4603      	mov	r3, r0
 8010f26:	2200      	movs	r2, #0
 8010f28:	6800      	ldr	r0, [r0, #0]
 8010f2a:	601a      	str	r2, [r3, #0]
 8010f2c:	4770      	bx	lr
 8010f2e:	bf00      	nop

08010f30 <core_set_error>:
 8010f30:	4603      	mov	r3, r0
 8010f32:	7800      	ldrb	r0, [r0, #0]
 8010f34:	b108      	cbz	r0, 8010f3a <core_set_error+0xa>
 8010f36:	2000      	movs	r0, #0
 8010f38:	4770      	bx	lr
 8010f3a:	7019      	strb	r1, [r3, #0]
 8010f3c:	2001      	movs	r0, #1
 8010f3e:	6819      	ldr	r1, [r3, #0]
 8010f40:	f362 211f 	bfi	r1, r2, #8, #24
 8010f44:	6019      	str	r1, [r3, #0]
 8010f46:	4770      	bx	lr

08010f48 <ai_check_custom_types>:
 8010f48:	b082      	sub	sp, #8
 8010f4a:	4b12      	ldr	r3, [pc, #72]	@ (8010f94 <ai_check_custom_types+0x4c>)
 8010f4c:	9301      	str	r3, [sp, #4]
 8010f4e:	b118      	cbz	r0, 8010f58 <ai_check_custom_types+0x10>
 8010f50:	7803      	ldrb	r3, [r0, #0]
 8010f52:	2b03      	cmp	r3, #3
 8010f54:	d002      	beq.n	8010f5c <ai_check_custom_types+0x14>
 8010f56:	2000      	movs	r0, #0
 8010f58:	b002      	add	sp, #8
 8010f5a:	4770      	bx	lr
 8010f5c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010f60:	4293      	cmp	r3, r2
 8010f62:	d004      	beq.n	8010f6e <ai_check_custom_types+0x26>
 8010f64:	2001      	movs	r0, #1
 8010f66:	f080 0001 	eor.w	r0, r0, #1
 8010f6a:	b002      	add	sp, #8
 8010f6c:	4770      	bx	lr
 8010f6e:	7842      	ldrb	r2, [r0, #1]
 8010f70:	3001      	adds	r0, #1
 8010f72:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8010f76:	429a      	cmp	r2, r3
 8010f78:	d1f4      	bne.n	8010f64 <ai_check_custom_types+0x1c>
 8010f7a:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8010f7e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010f82:	429a      	cmp	r2, r3
 8010f84:	d1ee      	bne.n	8010f64 <ai_check_custom_types+0x1c>
 8010f86:	7842      	ldrb	r2, [r0, #1]
 8010f88:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010f8c:	429a      	cmp	r2, r3
 8010f8e:	d1e9      	bne.n	8010f64 <ai_check_custom_types+0x1c>
 8010f90:	2000      	movs	r0, #0
 8010f92:	e7e8      	b.n	8010f66 <ai_check_custom_types+0x1e>
 8010f94:	84048403 	.word	0x84048403

08010f98 <ai_layers_init_all>:
 8010f98:	2100      	movs	r1, #0
 8010f9a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8010f9c:	b13b      	cbz	r3, 8010fae <ai_layers_init_all+0x16>
 8010f9e:	691a      	ldr	r2, [r3, #16]
 8010fa0:	3101      	adds	r1, #1
 8010fa2:	60d8      	str	r0, [r3, #12]
 8010fa4:	429a      	cmp	r2, r3
 8010fa6:	4613      	mov	r3, r2
 8010fa8:	d001      	beq.n	8010fae <ai_layers_init_all+0x16>
 8010faa:	2a00      	cmp	r2, #0
 8010fac:	d1f6      	bne.n	8010f9c <ai_layers_init_all+0x4>
 8010fae:	4608      	mov	r0, r1
 8010fb0:	4770      	bx	lr
 8010fb2:	bf00      	nop

08010fb4 <ai_layers_post_init_all>:
 8010fb4:	b538      	push	{r3, r4, r5, lr}
 8010fb6:	2500      	movs	r5, #0
 8010fb8:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8010fba:	b16c      	cbz	r4, 8010fd8 <ai_layers_post_init_all+0x24>
 8010fbc:	6863      	ldr	r3, [r4, #4]
 8010fbe:	07db      	lsls	r3, r3, #31
 8010fc0:	d504      	bpl.n	8010fcc <ai_layers_post_init_all+0x18>
 8010fc2:	6a23      	ldr	r3, [r4, #32]
 8010fc4:	4620      	mov	r0, r4
 8010fc6:	b10b      	cbz	r3, 8010fcc <ai_layers_post_init_all+0x18>
 8010fc8:	3501      	adds	r5, #1
 8010fca:	4798      	blx	r3
 8010fcc:	6923      	ldr	r3, [r4, #16]
 8010fce:	42a3      	cmp	r3, r4
 8010fd0:	461c      	mov	r4, r3
 8010fd2:	d001      	beq.n	8010fd8 <ai_layers_post_init_all+0x24>
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	d1f0      	bne.n	8010fba <ai_layers_post_init_all+0x6>
 8010fd8:	4628      	mov	r0, r5
 8010fda:	bd38      	pop	{r3, r4, r5, pc}

08010fdc <ai_layers_forward_all>:
 8010fdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010fe0:	f8d0 8040 	ldr.w	r8, [r0, #64]	@ 0x40
 8010fe4:	4604      	mov	r4, r0
 8010fe6:	f1b8 0f00 	cmp.w	r8, #0
 8010fea:	d02a      	beq.n	8011042 <ai_layers_forward_all+0x66>
 8010fec:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8010fee:	63c1      	str	r1, [r0, #60]	@ 0x3c
 8010ff0:	b319      	cbz	r1, 801103a <ai_layers_forward_all+0x5e>
 8010ff2:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8010ff4:	2001      	movs	r0, #1
 8010ff6:	47c0      	blx	r8
 8010ff8:	6be6      	ldr	r6, [r4, #60]	@ 0x3c
 8010ffa:	b1f6      	cbz	r6, 801103a <ai_layers_forward_all+0x5e>
 8010ffc:	2700      	movs	r7, #0
 8010ffe:	4631      	mov	r1, r6
 8011000:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8011002:	2002      	movs	r0, #2
 8011004:	47c0      	blx	r8
 8011006:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 8011008:	4628      	mov	r0, r5
 801100a:	696b      	ldr	r3, [r5, #20]
 801100c:	4798      	blx	r3
 801100e:	692e      	ldr	r6, [r5, #16]
 8011010:	2003      	movs	r0, #3
 8011012:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8011014:	42b5      	cmp	r5, r6
 8011016:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8011018:	d007      	beq.n	801102a <ai_layers_forward_all+0x4e>
 801101a:	47c0      	blx	r8
 801101c:	3701      	adds	r7, #1
 801101e:	63e6      	str	r6, [r4, #60]	@ 0x3c
 8011020:	2e00      	cmp	r6, #0
 8011022:	d1ec      	bne.n	8010ffe <ai_layers_forward_all+0x22>
 8011024:	4638      	mov	r0, r7
 8011026:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801102a:	2003      	movs	r0, #3
 801102c:	3701      	adds	r7, #1
 801102e:	47c0      	blx	r8
 8011030:	2300      	movs	r3, #0
 8011032:	4638      	mov	r0, r7
 8011034:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8011036:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801103a:	2700      	movs	r7, #0
 801103c:	4638      	mov	r0, r7
 801103e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011042:	6b85      	ldr	r5, [r0, #56]	@ 0x38
 8011044:	63c5      	str	r5, [r0, #60]	@ 0x3c
 8011046:	2d00      	cmp	r5, #0
 8011048:	d0f7      	beq.n	801103a <ai_layers_forward_all+0x5e>
 801104a:	4647      	mov	r7, r8
 801104c:	696b      	ldr	r3, [r5, #20]
 801104e:	4628      	mov	r0, r5
 8011050:	4798      	blx	r3
 8011052:	462b      	mov	r3, r5
 8011054:	692d      	ldr	r5, [r5, #16]
 8011056:	429d      	cmp	r5, r3
 8011058:	d004      	beq.n	8011064 <ai_layers_forward_all+0x88>
 801105a:	3701      	adds	r7, #1
 801105c:	63e5      	str	r5, [r4, #60]	@ 0x3c
 801105e:	2d00      	cmp	r5, #0
 8011060:	d1f4      	bne.n	801104c <ai_layers_forward_all+0x70>
 8011062:	e7df      	b.n	8011024 <ai_layers_forward_all+0x48>
 8011064:	2300      	movs	r3, #0
 8011066:	3701      	adds	r7, #1
 8011068:	63e3      	str	r3, [r4, #60]	@ 0x3c
 801106a:	e7db      	b.n	8011024 <ai_layers_forward_all+0x48>

0801106c <forward_conv2d_if32of32wf32_nl_pool>:
 801106c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011070:	f8d0 c018 	ldr.w	ip, [r0, #24]
 8011074:	b0c3      	sub	sp, #268	@ 0x10c
 8011076:	f8bc 3000 	ldrh.w	r3, [ip]
 801107a:	9321      	str	r3, [sp, #132]	@ 0x84
 801107c:	2b00      	cmp	r3, #0
 801107e:	f000 813c 	beq.w	80112fa <forward_conv2d_if32of32wf32_nl_pool+0x28e>
 8011082:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8011086:	4604      	mov	r4, r0
 8011088:	f8d3 b004 	ldr.w	fp, [r3, #4]
 801108c:	f1bb 0f00 	cmp.w	fp, #0
 8011090:	d001      	beq.n	8011096 <forward_conv2d_if32of32wf32_nl_pool+0x2a>
 8011092:	f8db b000 	ldr.w	fp, [fp]
 8011096:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8011098:	2a01      	cmp	r2, #1
 801109a:	f000 812d 	beq.w	80112f8 <forward_conv2d_if32of32wf32_nl_pool+0x28c>
 801109e:	f8d3 a010 	ldr.w	sl, [r3, #16]
 80110a2:	f1ba 0f00 	cmp.w	sl, #0
 80110a6:	d001      	beq.n	80110ac <forward_conv2d_if32of32wf32_nl_pool+0x40>
 80110a8:	f8da a000 	ldr.w	sl, [sl]
 80110ac:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80110ae:	2a02      	cmp	r2, #2
 80110b0:	f000 8122 	beq.w	80112f8 <forward_conv2d_if32of32wf32_nl_pool+0x28c>
 80110b4:	f8d3 801c 	ldr.w	r8, [r3, #28]
 80110b8:	8b1b      	ldrh	r3, [r3, #24]
 80110ba:	f1b8 0f00 	cmp.w	r8, #0
 80110be:	f000 812f 	beq.w	8011320 <forward_conv2d_if32of32wf32_nl_pool+0x2b4>
 80110c2:	2b01      	cmp	r3, #1
 80110c4:	f8d8 2000 	ldr.w	r2, [r8]
 80110c8:	f240 8130 	bls.w	801132c <forward_conv2d_if32of32wf32_nl_pool+0x2c0>
 80110cc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80110d0:	9340      	str	r3, [sp, #256]	@ 0x100
 80110d2:	f8d8 8008 	ldr.w	r8, [r8, #8]
 80110d6:	f8db 100c 	ldr.w	r1, [fp, #12]
 80110da:	f8da 000c 	ldr.w	r0, [sl, #12]
 80110de:	9122      	str	r1, [sp, #136]	@ 0x88
 80110e0:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 80110e4:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80110e8:	9130      	str	r1, [sp, #192]	@ 0xc0
 80110ea:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 80110ee:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80110f0:	9131      	str	r1, [sp, #196]	@ 0xc4
 80110f2:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
 80110f6:	f8de 7004 	ldr.w	r7, [lr, #4]
 80110fa:	9132      	str	r1, [sp, #200]	@ 0xc8
 80110fc:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8011100:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8011102:	9133      	str	r1, [sp, #204]	@ 0xcc
 8011104:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
 8011108:	681e      	ldr	r6, [r3, #0]
 801110a:	9123      	str	r1, [sp, #140]	@ 0x8c
 801110c:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8011110:	972a      	str	r7, [sp, #168]	@ 0xa8
 8011112:	9124      	str	r1, [sp, #144]	@ 0x90
 8011114:	f8de 7008 	ldr.w	r7, [lr, #8]
 8011118:	9628      	str	r6, [sp, #160]	@ 0xa0
 801111a:	972f      	str	r7, [sp, #188]	@ 0xbc
 801111c:	e9d4 950a 	ldrd	r9, r5, [r4, #40]	@ 0x28
 8011120:	fa1f f189 	uxth.w	r1, r9
 8011124:	9527      	str	r5, [sp, #156]	@ 0x9c
 8011126:	685d      	ldr	r5, [r3, #4]
 8011128:	9134      	str	r1, [sp, #208]	@ 0xd0
 801112a:	9529      	str	r5, [sp, #164]	@ 0xa4
 801112c:	e9d4 560c 	ldrd	r5, r6, [r4, #48]	@ 0x30
 8011130:	f8bd 109c 	ldrh.w	r1, [sp, #156]	@ 0x9c
 8011134:	9135      	str	r1, [sp, #212]	@ 0xd4
 8011136:	f8bd 10a0 	ldrh.w	r1, [sp, #160]	@ 0xa0
 801113a:	9136      	str	r1, [sp, #216]	@ 0xd8
 801113c:	f8bd 10a4 	ldrh.w	r1, [sp, #164]	@ 0xa4
 8011140:	9137      	str	r1, [sp, #220]	@ 0xdc
 8011142:	6899      	ldr	r1, [r3, #8]
 8011144:	68db      	ldr	r3, [r3, #12]
 8011146:	912d      	str	r1, [sp, #180]	@ 0xb4
 8011148:	932e      	str	r3, [sp, #184]	@ 0xb8
 801114a:	f9b4 301c 	ldrsh.w	r3, [r4, #28]
 801114e:	9338      	str	r3, [sp, #224]	@ 0xe0
 8011150:	b2ab      	uxth	r3, r5
 8011152:	9339      	str	r3, [sp, #228]	@ 0xe4
 8011154:	b2b3      	uxth	r3, r6
 8011156:	933a      	str	r3, [sp, #232]	@ 0xe8
 8011158:	f9bd 30a8 	ldrsh.w	r3, [sp, #168]	@ 0xa8
 801115c:	9325      	str	r3, [sp, #148]	@ 0x94
 801115e:	b23b      	sxth	r3, r7
 8011160:	9326      	str	r3, [sp, #152]	@ 0x98
 8011162:	f9b4 3044 	ldrsh.w	r3, [r4, #68]	@ 0x44
 8011166:	933b      	str	r3, [sp, #236]	@ 0xec
 8011168:	f9b4 304c 	ldrsh.w	r3, [r4, #76]	@ 0x4c
 801116c:	933c      	str	r3, [sp, #240]	@ 0xf0
 801116e:	f9b4 3050 	ldrsh.w	r3, [r4, #80]	@ 0x50
 8011172:	933d      	str	r3, [sp, #244]	@ 0xf4
 8011174:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8011176:	f9b3 3000 	ldrsh.w	r3, [r3]
 801117a:	933e      	str	r3, [sp, #248]	@ 0xf8
 801117c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801117e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8011182:	933f      	str	r3, [sp, #252]	@ 0xfc
 8011184:	6a23      	ldr	r3, [r4, #32]
 8011186:	9322      	str	r3, [sp, #136]	@ 0x88
 8011188:	f1b8 0f00 	cmp.w	r8, #0
 801118c:	f000 80b7 	beq.w	80112fe <forward_conv2d_if32of32wf32_nl_pool+0x292>
 8011190:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8011194:	2b00      	cmp	r3, #0
 8011196:	f000 80ba 	beq.w	801130e <forward_conv2d_if32of32wf32_nl_pool+0x2a2>
 801119a:	9221      	str	r2, [sp, #132]	@ 0x84
 801119c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80111a0:	689b      	ldr	r3, [r3, #8]
 80111a2:	9322      	str	r3, [sp, #136]	@ 0x88
 80111a4:	f002 fb26 	bl	80137f4 <ai_array_get_byte_size>
 80111a8:	f8d8 3018 	ldr.w	r3, [r8, #24]
 80111ac:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80111ae:	902c      	str	r0, [sp, #176]	@ 0xb0
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	f000 80be 	beq.w	8011332 <forward_conv2d_if32of32wf32_nl_pool+0x2c6>
 80111b6:	9241      	str	r2, [sp, #260]	@ 0x104
 80111b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80111bc:	f002 fb1a 	bl	80137f4 <ai_array_get_byte_size>
 80111c0:	f8d4 c018 	ldr.w	ip, [r4, #24]
 80111c4:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80111c6:	f8bc 3000 	ldrh.w	r3, [ip]
 80111ca:	902b      	str	r0, [sp, #172]	@ 0xac
 80111cc:	9321      	str	r3, [sp, #132]	@ 0x84
 80111ce:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 80111d0:	b2ad      	uxth	r5, r5
 80111d2:	b2b6      	uxth	r6, r6
 80111d4:	9b40      	ldr	r3, [sp, #256]	@ 0x100
 80111d6:	f107 38ff 	add.w	r8, r7, #4294967295
 80111da:	3d01      	subs	r5, #1
 80111dc:	9f2a      	ldr	r7, [sp, #168]	@ 0xa8
 80111de:	3e01      	subs	r6, #1
 80111e0:	fa1f f989 	uxth.w	r9, r9
 80111e4:	f8bd e09c 	ldrh.w	lr, [sp, #156]	@ 0x9c
 80111e8:	fb15 7508 	smlabb	r5, r5, r8, r7
 80111ec:	9f2f      	ldr	r7, [sp, #188]	@ 0xbc
 80111ee:	699b      	ldr	r3, [r3, #24]
 80111f0:	fa0f f885 	sxth.w	r8, r5
 80111f4:	9d26      	ldr	r5, [sp, #152]	@ 0x98
 80111f6:	f8db 0018 	ldr.w	r0, [fp, #24]
 80111fa:	3d01      	subs	r5, #1
 80111fc:	f8d3 b008 	ldr.w	fp, [r3, #8]
 8011200:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8011202:	fb16 7605 	smlabb	r6, r6, r5, r7
 8011206:	9d24      	ldr	r5, [sp, #144]	@ 0x90
 8011208:	9f29      	ldr	r7, [sp, #164]	@ 0xa4
 801120a:	2b03      	cmp	r3, #3
 801120c:	eba5 0508 	sub.w	r5, r5, r8
 8011210:	b236      	sxth	r6, r6
 8011212:	f8da 1018 	ldr.w	r1, [sl, #24]
 8011216:	fa15 f587 	uxtah	r5, r5, r7
 801121a:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 801121c:	6992      	ldr	r2, [r2, #24]
 801121e:	fa15 f587 	uxtah	r5, r5, r7
 8011222:	9f23      	ldr	r7, [sp, #140]	@ 0x8c
 8011224:	f8d4 a05c 	ldr.w	sl, [r4, #92]	@ 0x5c
 8011228:	6880      	ldr	r0, [r0, #8]
 801122a:	6889      	ldr	r1, [r1, #8]
 801122c:	6892      	ldr	r2, [r2, #8]
 801122e:	fb95 f5f9 	sdiv	r5, r5, r9
 8011232:	eba7 0906 	sub.w	r9, r7, r6
 8011236:	9f28      	ldr	r7, [sp, #160]	@ 0xa0
 8011238:	f105 0501 	add.w	r5, r5, #1
 801123c:	fa19 f987 	uxtah	r9, r9, r7
 8011240:	9f2d      	ldr	r7, [sp, #180]	@ 0xb4
 8011242:	b22d      	sxth	r5, r5
 8011244:	fa19 f987 	uxtah	r9, r9, r7
 8011248:	fb99 f9fe 	sdiv	r9, r9, lr
 801124c:	f109 0e01 	add.w	lr, r9, #1
 8011250:	f8d4 9024 	ldr.w	r9, [r4, #36]	@ 0x24
 8011254:	f9b4 4048 	ldrsh.w	r4, [r4, #72]	@ 0x48
 8011258:	d94e      	bls.n	80112f8 <forward_conv2d_if32of32wf32_nl_pool+0x28c>
 801125a:	f8dc 7004 	ldr.w	r7, [ip, #4]
 801125e:	f8d7 c028 	ldr.w	ip, [r7, #40]	@ 0x28
 8011262:	f1bc 0f00 	cmp.w	ip, #0
 8011266:	d06f      	beq.n	8011348 <forward_conv2d_if32of32wf32_nl_pool+0x2dc>
 8011268:	f8dc 7000 	ldr.w	r7, [ip]
 801126c:	b10f      	cbz	r7, 8011272 <forward_conv2d_if32of32wf32_nl_pool+0x206>
 801126e:	69bf      	ldr	r7, [r7, #24]
 8011270:	68bf      	ldr	r7, [r7, #8]
 8011272:	9b3e      	ldr	r3, [sp, #248]	@ 0xf8
 8011274:	9513      	str	r5, [sp, #76]	@ 0x4c
 8011276:	931f      	str	r3, [sp, #124]	@ 0x7c
 8011278:	9b3f      	ldr	r3, [sp, #252]	@ 0xfc
 801127a:	960e      	str	r6, [sp, #56]	@ 0x38
 801127c:	931e      	str	r3, [sp, #120]	@ 0x78
 801127e:	9b3d      	ldr	r3, [sp, #244]	@ 0xf4
 8011280:	931d      	str	r3, [sp, #116]	@ 0x74
 8011282:	9b3c      	ldr	r3, [sp, #240]	@ 0xf0
 8011284:	e9cd 431b 	strd	r4, r3, [sp, #108]	@ 0x6c
 8011288:	9b3b      	ldr	r3, [sp, #236]	@ 0xec
 801128a:	fa0f f48e 	sxth.w	r4, lr
 801128e:	e9cd a319 	strd	sl, r3, [sp, #100]	@ 0x64
 8011292:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8011294:	9318      	str	r3, [sp, #96]	@ 0x60
 8011296:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8011298:	9317      	str	r3, [sp, #92]	@ 0x5c
 801129a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801129c:	e9cd 9315 	strd	r9, r3, [sp, #84]	@ 0x54
 80112a0:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 80112a2:	9312      	str	r3, [sp, #72]	@ 0x48
 80112a4:	9b3a      	ldr	r3, [sp, #232]	@ 0xe8
 80112a6:	9311      	str	r3, [sp, #68]	@ 0x44
 80112a8:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 80112aa:	e9cd 830f 	strd	r8, r3, [sp, #60]	@ 0x3c
 80112ae:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 80112b0:	930d      	str	r3, [sp, #52]	@ 0x34
 80112b2:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 80112b4:	930c      	str	r3, [sp, #48]	@ 0x30
 80112b6:	9b36      	ldr	r3, [sp, #216]	@ 0xd8
 80112b8:	9414      	str	r4, [sp, #80]	@ 0x50
 80112ba:	930b      	str	r3, [sp, #44]	@ 0x2c
 80112bc:	9b37      	ldr	r3, [sp, #220]	@ 0xdc
 80112be:	930a      	str	r3, [sp, #40]	@ 0x28
 80112c0:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80112c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80112c4:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80112c6:	9308      	str	r3, [sp, #32]
 80112c8:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 80112ca:	9307      	str	r3, [sp, #28]
 80112cc:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 80112ce:	9306      	str	r3, [sp, #24]
 80112d0:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80112d2:	9305      	str	r3, [sp, #20]
 80112d4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80112d6:	9304      	str	r3, [sp, #16]
 80112d8:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 80112da:	9303      	str	r3, [sp, #12]
 80112dc:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 80112de:	e9cd 7301 	strd	r7, r3, [sp, #4]
 80112e2:	f8dc 4004 	ldr.w	r4, [ip, #4]
 80112e6:	465b      	mov	r3, fp
 80112e8:	69a4      	ldr	r4, [r4, #24]
 80112ea:	68a4      	ldr	r4, [r4, #8]
 80112ec:	9400      	str	r4, [sp, #0]
 80112ee:	f000 f9cf 	bl	8011690 <forward_lite_conv2d_if32of32wf32_pool>
 80112f2:	b043      	add	sp, #268	@ 0x10c
 80112f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112f8:	2300      	movs	r3, #0
 80112fa:	685b      	ldr	r3, [r3, #4]
 80112fc:	deff      	udf	#255	@ 0xff
 80112fe:	b10b      	cbz	r3, 8011304 <forward_conv2d_if32of32wf32_nl_pool+0x298>
 8011300:	689b      	ldr	r3, [r3, #8]
 8011302:	9322      	str	r3, [sp, #136]	@ 0x88
 8011304:	2301      	movs	r3, #1
 8011306:	f8cd 80b0 	str.w	r8, [sp, #176]	@ 0xb0
 801130a:	932b      	str	r3, [sp, #172]	@ 0xac
 801130c:	e75f      	b.n	80111ce <forward_conv2d_if32of32wf32_nl_pool+0x162>
 801130e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8011310:	b10b      	cbz	r3, 8011316 <forward_conv2d_if32of32wf32_nl_pool+0x2aa>
 8011312:	689b      	ldr	r3, [r3, #8]
 8011314:	9322      	str	r3, [sp, #136]	@ 0x88
 8011316:	2301      	movs	r3, #1
 8011318:	2100      	movs	r1, #0
 801131a:	e9cd 312b 	strd	r3, r1, [sp, #172]	@ 0xac
 801131e:	e756      	b.n	80111ce <forward_conv2d_if32of32wf32_nl_pool+0x162>
 8011320:	2b01      	cmp	r3, #1
 8011322:	d90e      	bls.n	8011342 <forward_conv2d_if32of32wf32_nl_pool+0x2d6>
 8011324:	4642      	mov	r2, r8
 8011326:	f8cd 8100 	str.w	r8, [sp, #256]	@ 0x100
 801132a:	e6d4      	b.n	80110d6 <forward_conv2d_if32of32wf32_nl_pool+0x6a>
 801132c:	2300      	movs	r3, #0
 801132e:	9340      	str	r3, [sp, #256]	@ 0x100
 8011330:	e6cf      	b.n	80110d2 <forward_conv2d_if32of32wf32_nl_pool+0x66>
 8011332:	2301      	movs	r3, #1
 8011334:	f8d4 c018 	ldr.w	ip, [r4, #24]
 8011338:	932b      	str	r3, [sp, #172]	@ 0xac
 801133a:	f8bc 3000 	ldrh.w	r3, [ip]
 801133e:	9321      	str	r3, [sp, #132]	@ 0x84
 8011340:	e745      	b.n	80111ce <forward_conv2d_if32of32wf32_nl_pool+0x162>
 8011342:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011346:	deff      	udf	#255	@ 0xff
 8011348:	f8dc 3018 	ldr.w	r3, [ip, #24]
 801134c:	deff      	udf	#255	@ 0xff
 801134e:	bf00      	nop

08011350 <forward_dense>:
 8011350:	6982      	ldr	r2, [r0, #24]
 8011352:	8813      	ldrh	r3, [r2, #0]
 8011354:	2b00      	cmp	r3, #0
 8011356:	d043      	beq.n	80113e0 <forward_dense+0x90>
 8011358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801135c:	6855      	ldr	r5, [r2, #4]
 801135e:	b08e      	sub	sp, #56	@ 0x38
 8011360:	6869      	ldr	r1, [r5, #4]
 8011362:	b101      	cbz	r1, 8011366 <forward_dense+0x16>
 8011364:	6809      	ldr	r1, [r1, #0]
 8011366:	2b01      	cmp	r3, #1
 8011368:	d069      	beq.n	801143e <forward_dense+0xee>
 801136a:	692a      	ldr	r2, [r5, #16]
 801136c:	b102      	cbz	r2, 8011370 <forward_dense+0x20>
 801136e:	6812      	ldr	r2, [r2, #0]
 8011370:	2b02      	cmp	r3, #2
 8011372:	d061      	beq.n	8011438 <forward_dense+0xe8>
 8011374:	69ec      	ldr	r4, [r5, #28]
 8011376:	2c00      	cmp	r4, #0
 8011378:	d057      	beq.n	801142a <forward_dense+0xda>
 801137a:	8b2e      	ldrh	r6, [r5, #24]
 801137c:	6820      	ldr	r0, [r4, #0]
 801137e:	2e01      	cmp	r6, #1
 8011380:	d955      	bls.n	801142e <forward_dense+0xde>
 8011382:	6864      	ldr	r4, [r4, #4]
 8011384:	f8d0 9018 	ldr.w	r9, [r0, #24]
 8011388:	2b03      	cmp	r3, #3
 801138a:	68d0      	ldr	r0, [r2, #12]
 801138c:	68cf      	ldr	r7, [r1, #12]
 801138e:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8011392:	f8d7 a004 	ldr.w	sl, [r7, #4]
 8011396:	e9d0 7602 	ldrd	r7, r6, [r0, #8]
 801139a:	f8d9 0000 	ldr.w	r0, [r9]
 801139e:	fb06 f807 	mul.w	r8, r6, r7
 80113a2:	f020 4c7e 	bic.w	ip, r0, #4261412864	@ 0xfe000000
 80113a6:	d044      	beq.n	8011432 <forward_dense+0xe2>
 80113a8:	6aad      	ldr	r5, [r5, #40]	@ 0x28
 80113aa:	b11d      	cbz	r5, 80113b4 <forward_dense+0x64>
 80113ac:	682d      	ldr	r5, [r5, #0]
 80113ae:	b10d      	cbz	r5, 80113b4 <forward_dense+0x64>
 80113b0:	69ab      	ldr	r3, [r5, #24]
 80113b2:	689d      	ldr	r5, [r3, #8]
 80113b4:	6992      	ldr	r2, [r2, #24]
 80113b6:	698b      	ldr	r3, [r1, #24]
 80113b8:	6890      	ldr	r0, [r2, #8]
 80113ba:	6899      	ldr	r1, [r3, #8]
 80113bc:	b10c      	cbz	r4, 80113c2 <forward_dense+0x72>
 80113be:	69a3      	ldr	r3, [r4, #24]
 80113c0:	689c      	ldr	r4, [r3, #8]
 80113c2:	4b20      	ldr	r3, [pc, #128]	@ (8011444 <forward_dense+0xf4>)
 80113c4:	459c      	cmp	ip, r3
 80113c6:	e9d9 2902 	ldrd	r2, r9, [r9, #8]
 80113ca:	d023      	beq.n	8011414 <forward_dense+0xc4>
 80113cc:	4e1e      	ldr	r6, [pc, #120]	@ (8011448 <forward_dense+0xf8>)
 80113ce:	45b4      	cmp	ip, r6
 80113d0:	d015      	beq.n	80113fe <forward_dense+0xae>
 80113d2:	f5a3 039c 	sub.w	r3, r3, #5111808	@ 0x4e0000
 80113d6:	459c      	cmp	ip, r3
 80113d8:	d004      	beq.n	80113e4 <forward_dense+0x94>
 80113da:	b00e      	add	sp, #56	@ 0x38
 80113dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80113e0:	685b      	ldr	r3, [r3, #4]
 80113e2:	deff      	udf	#255	@ 0xff
 80113e4:	e9cd 0107 	strd	r0, r1, [sp, #28]
 80113e8:	a807      	add	r0, sp, #28
 80113ea:	9209      	str	r2, [sp, #36]	@ 0x24
 80113ec:	e9cd 4a0a 	strd	r4, sl, [sp, #40]	@ 0x28
 80113f0:	e9cd e80c 	strd	lr, r8, [sp, #48]	@ 0x30
 80113f4:	f001 fb98 	bl	8012b28 <forward_lite_dense_if32of32wf32>
 80113f8:	b00e      	add	sp, #56	@ 0x38
 80113fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80113fe:	464b      	mov	r3, r9
 8011400:	9500      	str	r5, [sp, #0]
 8011402:	e9cd e803 	strd	lr, r8, [sp, #12]
 8011406:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 801140a:	f001 fceb 	bl	8012de4 <forward_lite_dense_if32of32wf32_lut4>
 801140e:	b00e      	add	sp, #56	@ 0x38
 8011410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011414:	464b      	mov	r3, r9
 8011416:	9500      	str	r5, [sp, #0]
 8011418:	e9cd e803 	strd	lr, r8, [sp, #12]
 801141c:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 8011420:	f001 fe0a 	bl	8013038 <forward_lite_dense_if32of32wf32_lut8>
 8011424:	b00e      	add	sp, #56	@ 0x38
 8011426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801142a:	4620      	mov	r0, r4
 801142c:	e7aa      	b.n	8011384 <forward_dense+0x34>
 801142e:	2400      	movs	r4, #0
 8011430:	e7a8      	b.n	8011384 <forward_dense+0x34>
 8011432:	2300      	movs	r3, #0
 8011434:	685b      	ldr	r3, [r3, #4]
 8011436:	deff      	udf	#255	@ 0xff
 8011438:	2300      	movs	r3, #0
 801143a:	685b      	ldr	r3, [r3, #4]
 801143c:	deff      	udf	#255	@ 0xff
 801143e:	2300      	movs	r3, #0
 8011440:	685b      	ldr	r3, [r3, #4]
 8011442:	deff      	udf	#255	@ 0xff
 8011444:	00d01040 	.word	0x00d01040
 8011448:	00f01040 	.word	0x00f01040

0801144c <forward_relu>:
 801144c:	6982      	ldr	r2, [r0, #24]
 801144e:	8813      	ldrh	r3, [r2, #0]
 8011450:	b323      	cbz	r3, 801149c <forward_relu+0x50>
 8011452:	6851      	ldr	r1, [r2, #4]
 8011454:	684a      	ldr	r2, [r1, #4]
 8011456:	b102      	cbz	r2, 801145a <forward_relu+0xe>
 8011458:	6812      	ldr	r2, [r2, #0]
 801145a:	2b01      	cmp	r3, #1
 801145c:	f000 8086 	beq.w	801156c <forward_relu+0x120>
 8011460:	b470      	push	{r4, r5, r6}
 8011462:	690b      	ldr	r3, [r1, #16]
 8011464:	b103      	cbz	r3, 8011468 <forward_relu+0x1c>
 8011466:	681b      	ldr	r3, [r3, #0]
 8011468:	69c6      	ldr	r6, [r0, #28]
 801146a:	b1ce      	cbz	r6, 80114a0 <forward_relu+0x54>
 801146c:	6871      	ldr	r1, [r6, #4]
 801146e:	6998      	ldr	r0, [r3, #24]
 8011470:	2901      	cmp	r1, #1
 8011472:	d03f      	beq.n	80114f4 <forward_relu+0xa8>
 8011474:	6893      	ldr	r3, [r2, #8]
 8011476:	6991      	ldr	r1, [r2, #24]
 8011478:	0a1b      	lsrs	r3, r3, #8
 801147a:	6880      	ldr	r0, [r0, #8]
 801147c:	6889      	ldr	r1, [r1, #8]
 801147e:	d06c      	beq.n	801155a <forward_relu+0x10e>
 8011480:	68d5      	ldr	r5, [r2, #12]
 8011482:	2201      	movs	r2, #1
 8011484:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8011488:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 801148c:	429d      	cmp	r5, r3
 801148e:	fb04 f202 	mul.w	r2, r4, r2
 8011492:	d1f9      	bne.n	8011488 <forward_relu+0x3c>
 8011494:	68b3      	ldr	r3, [r6, #8]
 8011496:	bc70      	pop	{r4, r5, r6}
 8011498:	f000 bd04 	b.w	8011ea4 <forward_lite_nl_relu_generic_if32of32_kernel>
 801149c:	685b      	ldr	r3, [r3, #4]
 801149e:	deff      	udf	#255	@ 0xff
 80114a0:	6999      	ldr	r1, [r3, #24]
 80114a2:	6893      	ldr	r3, [r2, #8]
 80114a4:	6990      	ldr	r0, [r2, #24]
 80114a6:	0a1b      	lsrs	r3, r3, #8
 80114a8:	6889      	ldr	r1, [r1, #8]
 80114aa:	6884      	ldr	r4, [r0, #8]
 80114ac:	d057      	beq.n	801155e <forward_relu+0x112>
 80114ae:	68d5      	ldr	r5, [r2, #12]
 80114b0:	2201      	movs	r2, #1
 80114b2:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80114b6:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 80114ba:	429d      	cmp	r5, r3
 80114bc:	fb00 f202 	mul.w	r2, r0, r2
 80114c0:	d1f9      	bne.n	80114b6 <forward_relu+0x6a>
 80114c2:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80114c6:	4413      	add	r3, r2
 80114c8:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80114cc:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80114d0:	4294      	cmp	r4, r2
 80114d2:	d80d      	bhi.n	80114f0 <forward_relu+0xa4>
 80114d4:	3204      	adds	r2, #4
 80114d6:	3104      	adds	r1, #4
 80114d8:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8011574 <forward_relu+0x128>
 80114dc:	4613      	mov	r3, r2
 80114de:	ed72 7a01 	vldmdb	r2!, {s15}
 80114e2:	3b08      	subs	r3, #8
 80114e4:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 80114e8:	ed61 7a01 	vstmdb	r1!, {s15}
 80114ec:	429c      	cmp	r4, r3
 80114ee:	d9f5      	bls.n	80114dc <forward_relu+0x90>
 80114f0:	bc70      	pop	{r4, r5, r6}
 80114f2:	4770      	bx	lr
 80114f4:	6993      	ldr	r3, [r2, #24]
 80114f6:	6880      	ldr	r0, [r0, #8]
 80114f8:	689c      	ldr	r4, [r3, #8]
 80114fa:	6893      	ldr	r3, [r2, #8]
 80114fc:	0a1b      	lsrs	r3, r3, #8
 80114fe:	d030      	beq.n	8011562 <forward_relu+0x116>
 8011500:	68d5      	ldr	r5, [r2, #12]
 8011502:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8011506:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801150a:	429d      	cmp	r5, r3
 801150c:	fb02 f101 	mul.w	r1, r2, r1
 8011510:	d1f9      	bne.n	8011506 <forward_relu+0xba>
 8011512:	f06f 4240 	mvn.w	r2, #3221225472	@ 0xc0000000
 8011516:	68b3      	ldr	r3, [r6, #8]
 8011518:	440a      	add	r2, r1
 801151a:	ed93 7a00 	vldr	s14, [r3]
 801151e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011522:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8011526:	429c      	cmp	r4, r3
 8011528:	d8e2      	bhi.n	80114f0 <forward_relu+0xa4>
 801152a:	1d02      	adds	r2, r0, #4
 801152c:	3304      	adds	r3, #4
 801152e:	2000      	movs	r0, #0
 8011530:	ed53 7a01 	vldr	s15, [r3, #-4]
 8011534:	1f19      	subs	r1, r3, #4
 8011536:	3b08      	subs	r3, #8
 8011538:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801153c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011540:	d405      	bmi.n	801154e <forward_relu+0x102>
 8011542:	429c      	cmp	r4, r3
 8011544:	f842 0d04 	str.w	r0, [r2, #-4]!
 8011548:	d8d2      	bhi.n	80114f0 <forward_relu+0xa4>
 801154a:	460b      	mov	r3, r1
 801154c:	e7f0      	b.n	8011530 <forward_relu+0xe4>
 801154e:	429c      	cmp	r4, r3
 8011550:	ed62 7a01 	vstmdb	r2!, {s15}
 8011554:	d8cc      	bhi.n	80114f0 <forward_relu+0xa4>
 8011556:	460b      	mov	r3, r1
 8011558:	e7ea      	b.n	8011530 <forward_relu+0xe4>
 801155a:	2201      	movs	r2, #1
 801155c:	e79a      	b.n	8011494 <forward_relu+0x48>
 801155e:	4622      	mov	r2, r4
 8011560:	e7b8      	b.n	80114d4 <forward_relu+0x88>
 8011562:	68b2      	ldr	r2, [r6, #8]
 8011564:	4623      	mov	r3, r4
 8011566:	ed92 7a00 	vldr	s14, [r2]
 801156a:	e7de      	b.n	801152a <forward_relu+0xde>
 801156c:	2300      	movs	r3, #0
 801156e:	685b      	ldr	r3, [r3, #4]
 8011570:	deff      	udf	#255	@ 0xff
 8011572:	bf00      	nop
 8011574:	00000000 	.word	0x00000000

08011578 <forward_upsample_bilinear>:
 8011578:	6983      	ldr	r3, [r0, #24]
 801157a:	881a      	ldrh	r2, [r3, #0]
 801157c:	2a00      	cmp	r2, #0
 801157e:	d04f      	beq.n	8011620 <forward_upsample_bilinear+0xa8>
 8011580:	6859      	ldr	r1, [r3, #4]
 8011582:	4684      	mov	ip, r0
 8011584:	684b      	ldr	r3, [r1, #4]
 8011586:	b103      	cbz	r3, 801158a <forward_upsample_bilinear+0x12>
 8011588:	681b      	ldr	r3, [r3, #0]
 801158a:	2a01      	cmp	r2, #1
 801158c:	d074      	beq.n	8011678 <forward_upsample_bilinear+0x100>
 801158e:	690a      	ldr	r2, [r1, #16]
 8011590:	2a00      	cmp	r2, #0
 8011592:	d074      	beq.n	801167e <forward_upsample_bilinear+0x106>
 8011594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011598:	699c      	ldr	r4, [r3, #24]
 801159a:	b084      	sub	sp, #16
 801159c:	68d8      	ldr	r0, [r3, #12]
 801159e:	6821      	ldr	r1, [r4, #0]
 80115a0:	6815      	ldr	r5, [r2, #0]
 80115a2:	f8dc 3020 	ldr.w	r3, [ip, #32]
 80115a6:	f021 417e 	bic.w	r1, r1, #4261412864	@ 0xfe000000
 80115aa:	f8df 80e0 	ldr.w	r8, [pc, #224]	@ 801168c <forward_upsample_bilinear+0x114>
 80115ae:	689b      	ldr	r3, [r3, #8]
 80115b0:	68ee      	ldr	r6, [r5, #12]
 80115b2:	4541      	cmp	r1, r8
 80115b4:	edd3 0a00 	vldr	s1, [r3]
 80115b8:	ed93 0a01 	vldr	s0, [r3, #4]
 80115bc:	6882      	ldr	r2, [r0, #8]
 80115be:	68c3      	ldr	r3, [r0, #12]
 80115c0:	f8d0 e004 	ldr.w	lr, [r0, #4]
 80115c4:	e9d6 6702 	ldrd	r6, r7, [r6, #8]
 80115c8:	d048      	beq.n	801165c <forward_upsample_bilinear+0xe4>
 80115ca:	dd14      	ble.n	80115f6 <forward_upsample_bilinear+0x7e>
 80115cc:	482d      	ldr	r0, [pc, #180]	@ (8011684 <forward_upsample_bilinear+0x10c>)
 80115ce:	4281      	cmp	r1, r0
 80115d0:	d036      	beq.n	8011640 <forward_upsample_bilinear+0xc8>
 80115d2:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 80115d6:	4281      	cmp	r1, r0
 80115d8:	d10a      	bne.n	80115f0 <forward_upsample_bilinear+0x78>
 80115da:	69a9      	ldr	r1, [r5, #24]
 80115dc:	68a0      	ldr	r0, [r4, #8]
 80115de:	f89c 401d 	ldrb.w	r4, [ip, #29]
 80115e2:	6889      	ldr	r1, [r1, #8]
 80115e4:	e9cd e402 	strd	lr, r4, [sp, #8]
 80115e8:	e9cd 6700 	strd	r6, r7, [sp]
 80115ec:	f001 f91c 	bl	8012828 <forward_lite_upsample_bilinear_is16os16>
 80115f0:	b004      	add	sp, #16
 80115f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115f6:	4824      	ldr	r0, [pc, #144]	@ (8011688 <forward_upsample_bilinear+0x110>)
 80115f8:	4281      	cmp	r1, r0
 80115fa:	d013      	beq.n	8011624 <forward_upsample_bilinear+0xac>
 80115fc:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8011600:	4281      	cmp	r1, r0
 8011602:	d1f5      	bne.n	80115f0 <forward_upsample_bilinear+0x78>
 8011604:	69a9      	ldr	r1, [r5, #24]
 8011606:	68a0      	ldr	r0, [r4, #8]
 8011608:	f89c 401d 	ldrb.w	r4, [ip, #29]
 801160c:	6889      	ldr	r1, [r1, #8]
 801160e:	e9cd e402 	strd	lr, r4, [sp, #8]
 8011612:	e9cd 6700 	strd	r6, r7, [sp]
 8011616:	f001 f9c7 	bl	80129a8 <forward_lite_upsample_bilinear_iu16ou16>
 801161a:	b004      	add	sp, #16
 801161c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011620:	6853      	ldr	r3, [r2, #4]
 8011622:	deff      	udf	#255	@ 0xff
 8011624:	69a9      	ldr	r1, [r5, #24]
 8011626:	68a0      	ldr	r0, [r4, #8]
 8011628:	f89c 401d 	ldrb.w	r4, [ip, #29]
 801162c:	6889      	ldr	r1, [r1, #8]
 801162e:	e9cd e402 	strd	lr, r4, [sp, #8]
 8011632:	e9cd 6700 	strd	r6, r7, [sp]
 8011636:	f001 f835 	bl	80126a4 <forward_lite_upsample_bilinear_iu8ou8>
 801163a:	b004      	add	sp, #16
 801163c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011640:	69a9      	ldr	r1, [r5, #24]
 8011642:	68a0      	ldr	r0, [r4, #8]
 8011644:	f89c 401d 	ldrb.w	r4, [ip, #29]
 8011648:	6889      	ldr	r1, [r1, #8]
 801164a:	e9cd e402 	strd	lr, r4, [sp, #8]
 801164e:	e9cd 6700 	strd	r6, r7, [sp]
 8011652:	f000 ff65 	bl	8012520 <forward_lite_upsample_bilinear_is8os8>
 8011656:	b004      	add	sp, #16
 8011658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801165c:	69a9      	ldr	r1, [r5, #24]
 801165e:	68a0      	ldr	r0, [r4, #8]
 8011660:	f89c 401d 	ldrb.w	r4, [ip, #29]
 8011664:	6889      	ldr	r1, [r1, #8]
 8011666:	e9cd e402 	strd	lr, r4, [sp, #8]
 801166a:	e9cd 6700 	strd	r6, r7, [sp]
 801166e:	f000 fe97 	bl	80123a0 <forward_lite_upsample_bilinear_if32of32>
 8011672:	b004      	add	sp, #16
 8011674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011678:	2300      	movs	r3, #0
 801167a:	685b      	ldr	r3, [r3, #4]
 801167c:	deff      	udf	#255	@ 0xff
 801167e:	68d3      	ldr	r3, [r2, #12]
 8011680:	deff      	udf	#255	@ 0xff
 8011682:	bf00      	nop
 8011684:	00840440 	.word	0x00840440
 8011688:	00040440 	.word	0x00040440
 801168c:	00821040 	.word	0x00821040

08011690 <forward_lite_conv2d_if32of32wf32_pool>:
 8011690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011694:	ed2d 8b0e 	vpush	{d8-d14}
 8011698:	b0c9      	sub	sp, #292	@ 0x124
 801169a:	4696      	mov	lr, r2
 801169c:	4680      	mov	r8, r0
 801169e:	f9bd 51cc 	ldrsh.w	r5, [sp, #460]	@ 0x1cc
 80116a2:	9323      	str	r3, [sp, #140]	@ 0x8c
 80116a4:	f9bd 31ec 	ldrsh.w	r3, [sp, #492]	@ 0x1ec
 80116a8:	9138      	str	r1, [sp, #224]	@ 0xe0
 80116aa:	9239      	str	r2, [sp, #228]	@ 0xe4
 80116ac:	f9bd 118c 	ldrsh.w	r1, [sp, #396]	@ 0x18c
 80116b0:	fb05 f203 	mul.w	r2, r5, r3
 80116b4:	f9bd 419c 	ldrsh.w	r4, [sp, #412]	@ 0x19c
 80116b8:	9129      	str	r1, [sp, #164]	@ 0xa4
 80116ba:	460e      	mov	r6, r1
 80116bc:	fb01 f202 	mul.w	r2, r1, r2
 80116c0:	f9bd 1194 	ldrsh.w	r1, [sp, #404]	@ 0x194
 80116c4:	f8bd c1b0 	ldrh.w	ip, [sp, #432]	@ 0x1b0
 80116c8:	9142      	str	r1, [sp, #264]	@ 0x108
 80116ca:	f9bd 11a0 	ldrsh.w	r1, [sp, #416]	@ 0x1a0
 80116ce:	f9bd 7190 	ldrsh.w	r7, [sp, #400]	@ 0x190
 80116d2:	932d      	str	r3, [sp, #180]	@ 0xb4
 80116d4:	942a      	str	r4, [sp, #168]	@ 0xa8
 80116d6:	f9bd 3198 	ldrsh.w	r3, [sp, #408]	@ 0x198
 80116da:	f9bd 4188 	ldrsh.w	r4, [sp, #392]	@ 0x188
 80116de:	9113      	str	r1, [sp, #76]	@ 0x4c
 80116e0:	f8cd c054 	str.w	ip, [sp, #84]	@ 0x54
 80116e4:	f8bd 11a8 	ldrh.w	r1, [sp, #424]	@ 0x1a8
 80116e8:	f8bd c1b4 	ldrh.w	ip, [sp, #436]	@ 0x1b4
 80116ec:	9041      	str	r0, [sp, #260]	@ 0x104
 80116ee:	933a      	str	r3, [sp, #232]	@ 0xe8
 80116f0:	f8bd 01ac 	ldrh.w	r0, [sp, #428]	@ 0x1ac
 80116f4:	912b      	str	r1, [sp, #172]	@ 0xac
 80116f6:	f9bd 91a4 	ldrsh.w	r9, [sp, #420]	@ 0x1a4
 80116fa:	4243      	negs	r3, r0
 80116fc:	950f      	str	r5, [sp, #60]	@ 0x3c
 80116fe:	9418      	str	r4, [sp, #96]	@ 0x60
 8011700:	9714      	str	r7, [sp, #80]	@ 0x50
 8011702:	f8cd c0b0 	str.w	ip, [sp, #176]	@ 0xb0
 8011706:	f9bd c1b8 	ldrsh.w	ip, [sp, #440]	@ 0x1b8
 801170a:	931e      	str	r3, [sp, #120]	@ 0x78
 801170c:	f8cd c10c 	str.w	ip, [sp, #268]	@ 0x10c
 8011710:	f9bd c1e8 	ldrsh.w	ip, [sp, #488]	@ 0x1e8
 8011714:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8011716:	f8cd c110 	str.w	ip, [sp, #272]	@ 0x110
 801171a:	f9bd c1f0 	ldrsh.w	ip, [sp, #496]	@ 0x1f0
 801171e:	2b00      	cmp	r3, #0
 8011720:	f9bd 11d0 	ldrsh.w	r1, [sp, #464]	@ 0x1d0
 8011724:	f8cd c114 	str.w	ip, [sp, #276]	@ 0x114
 8011728:	f9bd c1f4 	ldrsh.w	ip, [sp, #500]	@ 0x1f4
 801172c:	f8cd c0b8 	str.w	ip, [sp, #184]	@ 0xb8
 8011730:	f9bd c1f8 	ldrsh.w	ip, [sp, #504]	@ 0x1f8
 8011734:	f8cd c118 	str.w	ip, [sp, #280]	@ 0x118
 8011738:	f9bd c1fc 	ldrsh.w	ip, [sp, #508]	@ 0x1fc
 801173c:	f8cd c074 	str.w	ip, [sp, #116]	@ 0x74
 8011740:	f340 80a9 	ble.w	8011896 <forward_lite_conv2d_if32of32wf32_pool+0x206>
 8011744:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8011746:	3901      	subs	r1, #1
 8011748:	9020      	str	r0, [sp, #128]	@ 0x80
 801174a:	fb03 f309 	mul.w	r3, r3, r9
 801174e:	fa1f fc81 	uxth.w	ip, r1
 8011752:	982e      	ldr	r0, [sp, #184]	@ 0xb8
 8011754:	fb04 f303 	mul.w	r3, r4, r3
 8011758:	ed9f 8a51 	vldr	s16, [pc, #324]	@ 80118a0 <forward_lite_conv2d_if32of32wf32_pool+0x210>
 801175c:	f8cd c084 	str.w	ip, [sp, #132]	@ 0x84
 8011760:	0099      	lsls	r1, r3, #2
 8011762:	9124      	str	r1, [sp, #144]	@ 0x90
 8011764:	4631      	mov	r1, r6
 8011766:	b2b6      	uxth	r6, r6
 8011768:	fb00 f301 	mul.w	r3, r0, r1
 801176c:	9636      	str	r6, [sp, #216]	@ 0xd8
 801176e:	00a6      	lsls	r6, r4, #2
 8011770:	fb05 f303 	mul.w	r3, r5, r3
 8011774:	fb05 f501 	mul.w	r5, r5, r1
 8011778:	0098      	lsls	r0, r3, #2
 801177a:	9616      	str	r6, [sp, #88]	@ 0x58
 801177c:	953d      	str	r5, [sp, #244]	@ 0xf4
 801177e:	f10e 4578 	add.w	r5, lr, #4160749568	@ 0xf8000000
 8011782:	903e      	str	r0, [sp, #248]	@ 0xf8
 8011784:	9836      	ldr	r0, [sp, #216]	@ 0xd8
 8011786:	953b      	str	r5, [sp, #236]	@ 0xec
 8011788:	1e43      	subs	r3, r0, #1
 801178a:	b29b      	uxth	r3, r3
 801178c:	3301      	adds	r3, #1
 801178e:	0098      	lsls	r0, r3, #2
 8011790:	9035      	str	r0, [sp, #212]	@ 0xd4
 8011792:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 8011794:	fb00 f307 	mul.w	r3, r0, r7
 8011798:	fb04 f303 	mul.w	r3, r4, r3
 801179c:	0098      	lsls	r0, r3, #2
 801179e:	9b3a      	ldr	r3, [sp, #232]	@ 0xe8
 80117a0:	9034      	str	r0, [sp, #208]	@ 0xd0
 80117a2:	0090      	lsls	r0, r2, #2
 80117a4:	fb01 f303 	mul.w	r3, r1, r3
 80117a8:	0089      	lsls	r1, r1, #2
 80117aa:	9032      	str	r0, [sp, #200]	@ 0xc8
 80117ac:	9860      	ldr	r0, [sp, #384]	@ 0x180
 80117ae:	9112      	str	r1, [sp, #72]	@ 0x48
 80117b0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80117b4:	0098      	lsls	r0, r3, #2
 80117b6:	fb07 f306 	mul.w	r3, r7, r6
 80117ba:	921f      	str	r2, [sp, #124]	@ 0x7c
 80117bc:	903c      	str	r0, [sp, #240]	@ 0xf0
 80117be:	981e      	ldr	r0, [sp, #120]	@ 0x78
 80117c0:	fb00 8703 	mla	r7, r0, r3, r8
 80117c4:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 80117c6:	9832      	ldr	r0, [sp, #200]	@ 0xc8
 80117c8:	9722      	str	r7, [sp, #136]	@ 0x88
 80117ca:	425f      	negs	r7, r3
 80117cc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80117ce:	4241      	negs	r1, r0
 80117d0:	9731      	str	r7, [sp, #196]	@ 0xc4
 80117d2:	fb03 f304 	mul.w	r3, r3, r4
 80117d6:	9125      	str	r1, [sp, #148]	@ 0x94
 80117d8:	009c      	lsls	r4, r3, #2
 80117da:	fb06 f107 	mul.w	r1, r6, r7
 80117de:	9417      	str	r4, [sp, #92]	@ 0x5c
 80117e0:	2400      	movs	r4, #0
 80117e2:	9137      	str	r1, [sp, #220]	@ 0xdc
 80117e4:	9960      	ldr	r1, [sp, #384]	@ 0x180
 80117e6:	9427      	str	r4, [sp, #156]	@ 0x9c
 80117e8:	911b      	str	r1, [sp, #108]	@ 0x6c
 80117ea:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80117ec:	9428      	str	r4, [sp, #160]	@ 0xa0
 80117ee:	9333      	str	r3, [sp, #204]	@ 0xcc
 80117f0:	9b76      	ldr	r3, [sp, #472]	@ 0x1d8
 80117f2:	932f      	str	r3, [sp, #188]	@ 0xbc
 80117f4:	1e53      	subs	r3, r2, #1
 80117f6:	9347      	str	r3, [sp, #284]	@ 0x11c
 80117f8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80117fa:	3301      	adds	r3, #1
 80117fc:	b21b      	sxth	r3, r3
 80117fe:	2b00      	cmp	r3, #0
 8011800:	dc68      	bgt.n	80118d4 <forward_lite_conv2d_if32of32wf32_pool+0x244>
 8011802:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8011804:	041b      	lsls	r3, r3, #16
 8011806:	f100 81d5 	bmi.w	8011bb4 <forward_lite_conv2d_if32of32wf32_pool+0x524>
 801180a:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 801180c:	9e1d      	ldr	r6, [sp, #116]	@ 0x74
 801180e:	42b2      	cmp	r2, r6
 8011810:	dc48      	bgt.n	80118a4 <forward_lite_conv2d_if32of32wf32_pool+0x214>
 8011812:	9c2c      	ldr	r4, [sp, #176]	@ 0xb0
 8011814:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8011816:	981e      	ldr	r0, [sp, #120]	@ 0x78
 8011818:	3301      	adds	r3, #1
 801181a:	9938      	ldr	r1, [sp, #224]	@ 0xe0
 801181c:	4420      	add	r0, r4
 801181e:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 8011820:	b21d      	sxth	r5, r3
 8011822:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8011824:	901e      	str	r0, [sp, #120]	@ 0x78
 8011826:	983c      	ldr	r0, [sp, #240]	@ 0xf0
 8011828:	1b1b      	subs	r3, r3, r4
 801182a:	9108      	str	r1, [sp, #32]
 801182c:	4401      	add	r1, r0
 801182e:	9320      	str	r3, [sp, #128]	@ 0x80
 8011830:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8011832:	9138      	str	r1, [sp, #224]	@ 0xe0
 8011834:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 8011836:	9528      	str	r5, [sp, #160]	@ 0xa0
 8011838:	440b      	add	r3, r1
 801183a:	9322      	str	r3, [sp, #136]	@ 0x88
 801183c:	b293      	uxth	r3, r2
 801183e:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8011840:	9301      	str	r3, [sp, #4]
 8011842:	1a9b      	subs	r3, r3, r2
 8011844:	b29a      	uxth	r2, r3
 8011846:	b2bb      	uxth	r3, r7
 8011848:	1af1      	subs	r1, r6, r3
 801184a:	9305      	str	r3, [sp, #20]
 801184c:	9e33      	ldr	r6, [sp, #204]	@ 0xcc
 801184e:	b20b      	sxth	r3, r1
 8011850:	f8bd 103c 	ldrh.w	r1, [sp, #60]	@ 0x3c
 8011854:	931d      	str	r3, [sp, #116]	@ 0x74
 8011856:	b2b3      	uxth	r3, r6
 8011858:	9303      	str	r3, [sp, #12]
 801185a:	2301      	movs	r3, #1
 801185c:	9307      	str	r3, [sp, #28]
 801185e:	f8bd 30e8 	ldrh.w	r3, [sp, #232]	@ 0xe8
 8011862:	9306      	str	r3, [sp, #24]
 8011864:	f8bd 3114 	ldrh.w	r3, [sp, #276]	@ 0x114
 8011868:	9304      	str	r3, [sp, #16]
 801186a:	f8bd 3118 	ldrh.w	r3, [sp, #280]	@ 0x118
 801186e:	9302      	str	r3, [sp, #8]
 8011870:	f8bd 3110 	ldrh.w	r3, [sp, #272]	@ 0x110
 8011874:	9300      	str	r3, [sp, #0]
 8011876:	9b36      	ldr	r3, [sp, #216]	@ 0xd8
 8011878:	9860      	ldr	r0, [sp, #384]	@ 0x180
 801187a:	9c79      	ldr	r4, [sp, #484]	@ 0x1e4
 801187c:	47a0      	blx	r4
 801187e:	1bf3      	subs	r3, r6, r7
 8011880:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8011882:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011886:	3a01      	subs	r2, #1
 8011888:	b21b      	sxth	r3, r3
 801188a:	b292      	uxth	r2, r2
 801188c:	9333      	str	r3, [sp, #204]	@ 0xcc
 801188e:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8011890:	9221      	str	r2, [sp, #132]	@ 0x84
 8011892:	42ab      	cmp	r3, r5
 8011894:	dcb0      	bgt.n	80117f8 <forward_lite_conv2d_if32of32wf32_pool+0x168>
 8011896:	b049      	add	sp, #292	@ 0x124
 8011898:	ecbd 8b0e 	vpop	{d8-d14}
 801189c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118a0:	00000000 	.word	0x00000000
 80118a4:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 80118a6:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 80118a8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80118aa:	440a      	add	r2, r1
 80118ac:	3b01      	subs	r3, #1
 80118ae:	921e      	str	r2, [sp, #120]	@ 0x78
 80118b0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80118b2:	b29b      	uxth	r3, r3
 80118b4:	1a52      	subs	r2, r2, r1
 80118b6:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 80118b8:	9321      	str	r3, [sp, #132]	@ 0x84
 80118ba:	9220      	str	r2, [sp, #128]	@ 0x80
 80118bc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80118be:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 80118c0:	440a      	add	r2, r1
 80118c2:	9222      	str	r2, [sp, #136]	@ 0x88
 80118c4:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 80118c6:	4293      	cmp	r3, r2
 80118c8:	dde5      	ble.n	8011896 <forward_lite_conv2d_if32of32wf32_pool+0x206>
 80118ca:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80118cc:	3301      	adds	r3, #1
 80118ce:	b21b      	sxth	r3, r3
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	dd96      	ble.n	8011802 <forward_lite_conv2d_if32of32wf32_pool+0x172>
 80118d4:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	f2c0 82d1 	blt.w	8011e7e <forward_lite_conv2d_if32of32wf32_pool+0x7ee>
 80118dc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80118de:	931c      	str	r3, [sp, #112]	@ 0x70
 80118e0:	2300      	movs	r3, #0
 80118e2:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80118e4:	9a42      	ldr	r2, [sp, #264]	@ 0x108
 80118e6:	440a      	add	r2, r1
 80118e8:	9943      	ldr	r1, [sp, #268]	@ 0x10c
 80118ea:	428a      	cmp	r2, r1
 80118ec:	bfd4      	ite	le
 80118ee:	ebc3 0b02 	rsble	fp, r3, r2
 80118f2:	ebc3 0b01 	rsbgt	fp, r3, r1
 80118f6:	9a61      	ldr	r2, [sp, #388]	@ 0x184
 80118f8:	2a00      	cmp	r2, #0
 80118fa:	f000 819d 	beq.w	8011c38 <forward_lite_conv2d_if32of32wf32_pool+0x5a8>
 80118fe:	9a3b      	ldr	r2, [sp, #236]	@ 0xec
 8011900:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 8011904:	f0c0 8198 	bcc.w	8011c38 <forward_lite_conv2d_if32of32wf32_pool+0x5a8>
 8011908:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801190a:	2a00      	cmp	r2, #0
 801190c:	f340 8115 	ble.w	8011b3a <forward_lite_conv2d_if32of32wf32_pool+0x4aa>
 8011910:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8011912:	9937      	ldr	r1, [sp, #220]	@ 0xdc
 8011914:	fb02 f303 	mul.w	r3, r2, r3
 8011918:	9a35      	ldr	r2, [sp, #212]	@ 0xd4
 801191a:	9319      	str	r3, [sp, #100]	@ 0x64
 801191c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801191e:	189a      	adds	r2, r3, r2
 8011920:	9326      	str	r3, [sp, #152]	@ 0x98
 8011922:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011924:	923f      	str	r2, [sp, #252]	@ 0xfc
 8011926:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8011928:	9330      	str	r3, [sp, #192]	@ 0xc0
 801192a:	440a      	add	r2, r1
 801192c:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 801192e:	9240      	str	r2, [sp, #256]	@ 0x100
 8011930:	931a      	str	r3, [sp, #104]	@ 0x68
 8011932:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8011934:	9961      	ldr	r1, [sp, #388]	@ 0x184
 8011936:	981a      	ldr	r0, [sp, #104]	@ 0x68
 8011938:	f001 fe4a 	bl	80135d0 <st_int8_copy>
 801193c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801193e:	2b00      	cmp	r3, #0
 8011940:	f000 8135 	beq.w	8011bae <forward_lite_conv2d_if32of32wf32_pool+0x51e>
 8011944:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8011946:	ecf3 1a01 	vldmia	r3!, {s3}
 801194a:	9330      	str	r3, [sp, #192]	@ 0xc0
 801194c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801194e:	2b00      	cmp	r3, #0
 8011950:	f000 80e8 	beq.w	8011b24 <forward_lite_conv2d_if32of32wf32_pool+0x494>
 8011954:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8011956:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8011958:	189a      	adds	r2, r3, r2
 801195a:	920c      	str	r2, [sp, #48]	@ 0x30
 801195c:	9a40      	ldr	r2, [sp, #256]	@ 0x100
 801195e:	e9cd 230d 	strd	r2, r3, [sp, #52]	@ 0x34
 8011962:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8011964:	9310      	str	r3, [sp, #64]	@ 0x40
 8011966:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 8011968:	930b      	str	r3, [sp, #44]	@ 0x2c
 801196a:	2300      	movs	r3, #0
 801196c:	9311      	str	r3, [sp, #68]	@ 0x44
 801196e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011970:	2b00      	cmp	r3, #0
 8011972:	f2c0 8113 	blt.w	8011b9c <forward_lite_conv2d_if32of32wf32_pool+0x50c>
 8011976:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8011978:	2600      	movs	r6, #0
 801197a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801197c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801197e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011980:	9c61      	ldr	r4, [sp, #388]	@ 0x184
 8011982:	4298      	cmp	r0, r3
 8011984:	bf94      	ite	ls
 8011986:	ebc6 0600 	rsbls	r6, r6, r0
 801198a:	ebc6 0603 	rsbhi	r6, r6, r3
 801198e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8011990:	f1bb 0f00 	cmp.w	fp, #0
 8011994:	eba0 0906 	sub.w	r9, r0, r6
 8011998:	fb02 4203 	mla	r2, r2, r3, r4
 801199c:	9818      	ldr	r0, [sp, #96]	@ 0x60
 801199e:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80119a0:	eba4 0a06 	sub.w	sl, r4, r6
 80119a4:	fb00 f606 	mul.w	r6, r0, r6
 80119a8:	f340 80fe 	ble.w	8011ba8 <forward_lite_conv2d_if32of32wf32_pool+0x518>
 80119ac:	f026 070f 	bic.w	r7, r6, #15
 80119b0:	eeb0 7a61 	vmov.f32	s14, s3
 80119b4:	fb0a fa03 	mul.w	sl, sl, r3
 80119b8:	f04f 0c00 	mov.w	ip, #0
 80119bc:	f107 38ff 	add.w	r8, r7, #4294967295
 80119c0:	fb09 f903 	mul.w	r9, r9, r3
 80119c4:	ea4f 1818 	mov.w	r8, r8, lsr #4
 80119c8:	f108 0801 	add.w	r8, r8, #1
 80119cc:	ea4f 1e88 	mov.w	lr, r8, lsl #6
 80119d0:	ea4f 1808 	mov.w	r8, r8, lsl #4
 80119d4:	2f00      	cmp	r7, #0
 80119d6:	f340 80df 	ble.w	8011b98 <forward_lite_conv2d_if32of32wf32_pool+0x508>
 80119da:	f101 0040 	add.w	r0, r1, #64	@ 0x40
 80119de:	f102 0340 	add.w	r3, r2, #64	@ 0x40
 80119e2:	2400      	movs	r4, #0
 80119e4:	ed53 6a0f 	vldr	s13, [r3, #-60]	@ 0xffffffc4
 80119e8:	3410      	adds	r4, #16
 80119ea:	ed50 7a0f 	vldr	s15, [r0, #-60]	@ 0xffffffc4
 80119ee:	3340      	adds	r3, #64	@ 0x40
 80119f0:	ed50 4a10 	vldr	s9, [r0, #-64]	@ 0xffffffc0
 80119f4:	42bc      	cmp	r4, r7
 80119f6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80119fa:	ed13 5a20 	vldr	s10, [r3, #-128]	@ 0xffffff80
 80119fe:	ed50 5a0e 	vldr	s11, [r0, #-56]	@ 0xffffffc8
 8011a02:	f100 0040 	add.w	r0, r0, #64	@ 0x40
 8011a06:	ed13 6a1e 	vldr	s12, [r3, #-120]	@ 0xffffff88
 8011a0a:	eee4 7a85 	vfma.f32	s15, s9, s10
 8011a0e:	ed53 6a1d 	vldr	s13, [r3, #-116]	@ 0xffffff8c
 8011a12:	ed10 ea1d 	vldr	s28, [r0, #-116]	@ 0xffffff8c
 8011a16:	ed50 da1c 	vldr	s27, [r0, #-112]	@ 0xffffff90
 8011a1a:	ed13 da1c 	vldr	s26, [r3, #-112]	@ 0xffffff90
 8011a1e:	ed50 ca1b 	vldr	s25, [r0, #-108]	@ 0xffffff94
 8011a22:	ed13 ca1b 	vldr	s24, [r3, #-108]	@ 0xffffff94
 8011a26:	eee5 7a86 	vfma.f32	s15, s11, s12
 8011a2a:	ed50 ba1a 	vldr	s23, [r0, #-104]	@ 0xffffff98
 8011a2e:	ed13 ba1a 	vldr	s22, [r3, #-104]	@ 0xffffff98
 8011a32:	ed50 aa19 	vldr	s21, [r0, #-100]	@ 0xffffff9c
 8011a36:	ed13 aa19 	vldr	s20, [r3, #-100]	@ 0xffffff9c
 8011a3a:	ed50 9a18 	vldr	s19, [r0, #-96]	@ 0xffffffa0
 8011a3e:	ed13 9a18 	vldr	s18, [r3, #-96]	@ 0xffffffa0
 8011a42:	eeee 7a26 	vfma.f32	s15, s28, s13
 8011a46:	ed50 8a17 	vldr	s17, [r0, #-92]	@ 0xffffffa4
 8011a4a:	ed13 0a17 	vldr	s0, [r3, #-92]	@ 0xffffffa4
 8011a4e:	ed50 0a16 	vldr	s1, [r0, #-88]	@ 0xffffffa8
 8011a52:	ed13 1a16 	vldr	s2, [r3, #-88]	@ 0xffffffa8
 8011a56:	ed10 2a15 	vldr	s4, [r0, #-84]	@ 0xffffffac
 8011a5a:	ed53 2a15 	vldr	s5, [r3, #-84]	@ 0xffffffac
 8011a5e:	eeed 7a8d 	vfma.f32	s15, s27, s26
 8011a62:	ed10 3a14 	vldr	s6, [r0, #-80]	@ 0xffffffb0
 8011a66:	ed53 3a14 	vldr	s7, [r3, #-80]	@ 0xffffffb0
 8011a6a:	ed10 4a13 	vldr	s8, [r0, #-76]	@ 0xffffffb4
 8011a6e:	ed53 4a13 	vldr	s9, [r3, #-76]	@ 0xffffffb4
 8011a72:	ed10 5a12 	vldr	s10, [r0, #-72]	@ 0xffffffb8
 8011a76:	ed53 5a12 	vldr	s11, [r3, #-72]	@ 0xffffffb8
 8011a7a:	eeec 7a8c 	vfma.f32	s15, s25, s24
 8011a7e:	ed10 6a11 	vldr	s12, [r0, #-68]	@ 0xffffffbc
 8011a82:	ed53 6a11 	vldr	s13, [r3, #-68]	@ 0xffffffbc
 8011a86:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 8011a8a:	eeea 7a8a 	vfma.f32	s15, s21, s20
 8011a8e:	eee9 7a89 	vfma.f32	s15, s19, s18
 8011a92:	eee8 7a80 	vfma.f32	s15, s17, s0
 8011a96:	eee0 7a81 	vfma.f32	s15, s1, s2
 8011a9a:	eee2 7a22 	vfma.f32	s15, s4, s5
 8011a9e:	eee3 7a23 	vfma.f32	s15, s6, s7
 8011aa2:	eee4 7a24 	vfma.f32	s15, s8, s9
 8011aa6:	eee5 7a25 	vfma.f32	s15, s10, s11
 8011aaa:	eee6 7a26 	vfma.f32	s15, s12, s13
 8011aae:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011ab2:	db97      	blt.n	80119e4 <forward_lite_conv2d_if32of32wf32_pool+0x354>
 8011ab4:	4471      	add	r1, lr
 8011ab6:	4472      	add	r2, lr
 8011ab8:	4645      	mov	r5, r8
 8011aba:	42ae      	cmp	r6, r5
 8011abc:	dd10      	ble.n	8011ae0 <forward_lite_conv2d_if32of32wf32_pool+0x450>
 8011abe:	462b      	mov	r3, r5
 8011ac0:	460c      	mov	r4, r1
 8011ac2:	4610      	mov	r0, r2
 8011ac4:	3301      	adds	r3, #1
 8011ac6:	ecf0 6a01 	vldmia	r0!, {s13}
 8011aca:	ecf4 7a01 	vldmia	r4!, {s15}
 8011ace:	429e      	cmp	r6, r3
 8011ad0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011ad4:	d1f6      	bne.n	8011ac4 <forward_lite_conv2d_if32of32wf32_pool+0x434>
 8011ad6:	1b75      	subs	r5, r6, r5
 8011ad8:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8011adc:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8011ae0:	f10c 0c01 	add.w	ip, ip, #1
 8011ae4:	4451      	add	r1, sl
 8011ae6:	444a      	add	r2, r9
 8011ae8:	45e3      	cmp	fp, ip
 8011aea:	f47f af73 	bne.w	80119d4 <forward_lite_conv2d_if32of32wf32_pool+0x344>
 8011aee:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8011af0:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8011af2:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8011af4:	4410      	add	r0, r2
 8011af6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8011af8:	ed81 7a00 	vstr	s14, [r1]
 8011afc:	900b      	str	r0, [sp, #44]	@ 0x2c
 8011afe:	3301      	adds	r3, #1
 8011b00:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8011b02:	9311      	str	r3, [sp, #68]	@ 0x44
 8011b04:	4401      	add	r1, r0
 8011b06:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8011b08:	9110      	str	r1, [sp, #64]	@ 0x40
 8011b0a:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8011b0c:	1a89      	subs	r1, r1, r2
 8011b0e:	910e      	str	r1, [sp, #56]	@ 0x38
 8011b10:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8011b12:	4401      	add	r1, r0
 8011b14:	910d      	str	r1, [sp, #52]	@ 0x34
 8011b16:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8011b18:	1a8a      	subs	r2, r1, r2
 8011b1a:	920c      	str	r2, [sp, #48]	@ 0x30
 8011b1c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8011b1e:	429a      	cmp	r2, r3
 8011b20:	f47f af25 	bne.w	801196e <forward_lite_conv2d_if32of32wf32_pool+0x2de>
 8011b24:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8011b26:	9924      	ldr	r1, [sp, #144]	@ 0x90
 8011b28:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8011b2a:	440a      	add	r2, r1
 8011b2c:	3304      	adds	r3, #4
 8011b2e:	921a      	str	r2, [sp, #104]	@ 0x68
 8011b30:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 8011b32:	9326      	str	r3, [sp, #152]	@ 0x98
 8011b34:	4293      	cmp	r3, r2
 8011b36:	f47f aefc 	bne.w	8011932 <forward_lite_conv2d_if32of32wf32_pool+0x2a2>
 8011b3a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	dd26      	ble.n	8011b8e <forward_lite_conv2d_if32of32wf32_pool+0x4fe>
 8011b40:	9b75      	ldr	r3, [sp, #468]	@ 0x1d4
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	f000 819f 	beq.w	8011e86 <forward_lite_conv2d_if32of32wf32_pool+0x7f6>
 8011b48:	4699      	mov	r9, r3
 8011b4a:	2400      	movs	r4, #0
 8011b4c:	9d2f      	ldr	r5, [sp, #188]	@ 0xbc
 8011b4e:	f8dd 806c 	ldr.w	r8, [sp, #108]	@ 0x6c
 8011b52:	9f29      	ldr	r7, [sp, #164]	@ 0xa4
 8011b54:	f8dd b1e0 	ldr.w	fp, [sp, #480]	@ 0x1e0
 8011b58:	e9dd 6a76 	ldrd	r6, sl, [sp, #472]	@ 0x1d8
 8011b5c:	462b      	mov	r3, r5
 8011b5e:	4455      	add	r5, sl
 8011b60:	463a      	mov	r2, r7
 8011b62:	4641      	mov	r1, r8
 8011b64:	4640      	mov	r0, r8
 8011b66:	3401      	adds	r4, #1
 8011b68:	47c8      	blx	r9
 8011b6a:	1bab      	subs	r3, r5, r6
 8011b6c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8011b6e:	b224      	sxth	r4, r4
 8011b70:	455b      	cmp	r3, fp
 8011b72:	bfa8      	it	ge
 8011b74:	4635      	movge	r5, r6
 8011b76:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8011b78:	4490      	add	r8, r2
 8011b7a:	4543      	cmp	r3, r8
 8011b7c:	d801      	bhi.n	8011b82 <forward_lite_conv2d_if32of32wf32_pool+0x4f2>
 8011b7e:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8011b80:	4498      	add	r8, r3
 8011b82:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011b84:	42a3      	cmp	r3, r4
 8011b86:	d1e9      	bne.n	8011b5c <forward_lite_conv2d_if32of32wf32_pool+0x4cc>
 8011b88:	952f      	str	r5, [sp, #188]	@ 0xbc
 8011b8a:	f8cd 806c 	str.w	r8, [sp, #108]	@ 0x6c
 8011b8e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8011b90:	3301      	adds	r3, #1
 8011b92:	b21b      	sxth	r3, r3
 8011b94:	931d      	str	r3, [sp, #116]	@ 0x74
 8011b96:	e638      	b.n	801180a <forward_lite_conv2d_if32of32wf32_pool+0x17a>
 8011b98:	2500      	movs	r5, #0
 8011b9a:	e78e      	b.n	8011aba <forward_lite_conv2d_if32of32wf32_pool+0x42a>
 8011b9c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011b9e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011ba0:	4616      	mov	r6, r2
 8011ba2:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8011ba4:	189a      	adds	r2, r3, r2
 8011ba6:	e6e9      	b.n	801197c <forward_lite_conv2d_if32of32wf32_pool+0x2ec>
 8011ba8:	eeb0 7a61 	vmov.f32	s14, s3
 8011bac:	e79f      	b.n	8011aee <forward_lite_conv2d_if32of32wf32_pool+0x45e>
 8011bae:	eef0 1a48 	vmov.f32	s3, s16
 8011bb2:	e6cb      	b.n	801194c <forward_lite_conv2d_if32of32wf32_pool+0x2bc>
 8011bb4:	9a3d      	ldr	r2, [sp, #244]	@ 0xf4
 8011bb6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8011bb8:	fb02 f303 	mul.w	r3, r2, r3
 8011bbc:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8011bbe:	eba2 0383 	sub.w	r3, r2, r3, lsl #2
 8011bc2:	9a60      	ldr	r2, [sp, #384]	@ 0x180
 8011bc4:	429a      	cmp	r2, r3
 8011bc6:	d901      	bls.n	8011bcc <forward_lite_conv2d_if32of32wf32_pool+0x53c>
 8011bc8:	9a32      	ldr	r2, [sp, #200]	@ 0xc8
 8011bca:	4413      	add	r3, r2
 8011bcc:	9a60      	ldr	r2, [sp, #384]	@ 0x180
 8011bce:	429a      	cmp	r2, r3
 8011bd0:	d217      	bcs.n	8011c02 <forward_lite_conv2d_if32of32wf32_pool+0x572>
 8011bd2:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 8011bd4:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8011bd6:	428a      	cmp	r2, r1
 8011bd8:	d013      	beq.n	8011c02 <forward_lite_conv2d_if32of32wf32_pool+0x572>
 8011bda:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 8011bdc:	429a      	cmp	r2, r3
 8011bde:	d910      	bls.n	8011c02 <forward_lite_conv2d_if32of32wf32_pool+0x572>
 8011be0:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8011be2:	461a      	mov	r2, r3
 8011be4:	f852 0b04 	ldr.w	r0, [r2], #4
 8011be8:	f841 0b04 	str.w	r0, [r1], #4
 8011bec:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 8011bee:	4290      	cmp	r0, r2
 8011bf0:	d8f8      	bhi.n	8011be4 <forward_lite_conv2d_if32of32wf32_pool+0x554>
 8011bf2:	9a47      	ldr	r2, [sp, #284]	@ 0x11c
 8011bf4:	1ad3      	subs	r3, r2, r3
 8011bf6:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8011bf8:	f023 0303 	bic.w	r3, r3, #3
 8011bfc:	3304      	adds	r3, #4
 8011bfe:	441a      	add	r2, r3
 8011c00:	921b      	str	r2, [sp, #108]	@ 0x6c
 8011c02:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8011c04:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 8011c06:	f8bd 3074 	ldrh.w	r3, [sp, #116]	@ 0x74
 8011c0a:	440a      	add	r2, r1
 8011c0c:	983e      	ldr	r0, [sp, #248]	@ 0xf8
 8011c0e:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8011c10:	1ad2      	subs	r2, r2, r3
 8011c12:	4401      	add	r1, r0
 8011c14:	982e      	ldr	r0, [sp, #184]	@ 0xb8
 8011c16:	b212      	sxth	r2, r2
 8011c18:	4403      	add	r3, r0
 8011c1a:	911b      	str	r1, [sp, #108]	@ 0x6c
 8011c1c:	9227      	str	r2, [sp, #156]	@ 0x9c
 8011c1e:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 8011c20:	b21b      	sxth	r3, r3
 8011c22:	428a      	cmp	r2, r1
 8011c24:	931d      	str	r3, [sp, #116]	@ 0x74
 8011c26:	460b      	mov	r3, r1
 8011c28:	f63f adef 	bhi.w	801180a <forward_lite_conv2d_if32of32wf32_pool+0x17a>
 8011c2c:	9925      	ldr	r1, [sp, #148]	@ 0x94
 8011c2e:	440b      	add	r3, r1
 8011c30:	429a      	cmp	r2, r3
 8011c32:	d9fc      	bls.n	8011c2e <forward_lite_conv2d_if32of32wf32_pool+0x59e>
 8011c34:	931b      	str	r3, [sp, #108]	@ 0x6c
 8011c36:	e5e8      	b.n	801180a <forward_lite_conv2d_if32of32wf32_pool+0x17a>
 8011c38:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8011c3a:	2a00      	cmp	r2, #0
 8011c3c:	f77f af7d 	ble.w	8011b3a <forward_lite_conv2d_if32of32wf32_pool+0x4aa>
 8011c40:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8011c42:	9937      	ldr	r1, [sp, #220]	@ 0xdc
 8011c44:	fb02 f303 	mul.w	r3, r2, r3
 8011c48:	9a35      	ldr	r2, [sp, #212]	@ 0xd4
 8011c4a:	931a      	str	r3, [sp, #104]	@ 0x68
 8011c4c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8011c4e:	189a      	adds	r2, r3, r2
 8011c50:	9326      	str	r3, [sp, #152]	@ 0x98
 8011c52:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011c54:	923f      	str	r2, [sp, #252]	@ 0xfc
 8011c56:	9330      	str	r3, [sp, #192]	@ 0xc0
 8011c58:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8011c5a:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 8011c5c:	440a      	add	r2, r1
 8011c5e:	9319      	str	r3, [sp, #100]	@ 0x64
 8011c60:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011c62:	9240      	str	r2, [sp, #256]	@ 0x100
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	f000 80fc 	beq.w	8011e62 <forward_lite_conv2d_if32of32wf32_pool+0x7d2>
 8011c6a:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8011c6c:	ecf3 1a01 	vldmia	r3!, {s3}
 8011c70:	9330      	str	r3, [sp, #192]	@ 0xc0
 8011c72:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	f000 80e5 	beq.w	8011e44 <forward_lite_conv2d_if32of32wf32_pool+0x7b4>
 8011c7a:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8011c7c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8011c7e:	189a      	adds	r2, r3, r2
 8011c80:	920c      	str	r2, [sp, #48]	@ 0x30
 8011c82:	9a40      	ldr	r2, [sp, #256]	@ 0x100
 8011c84:	e9cd 230d 	strd	r2, r3, [sp, #52]	@ 0x34
 8011c88:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8011c8a:	9310      	str	r3, [sp, #64]	@ 0x40
 8011c8c:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 8011c8e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011c90:	2300      	movs	r3, #0
 8011c92:	9311      	str	r3, [sp, #68]	@ 0x44
 8011c94:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	f2c0 80e8 	blt.w	8011e6c <forward_lite_conv2d_if32of32wf32_pool+0x7dc>
 8011c9c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011c9e:	2000      	movs	r0, #0
 8011ca0:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8011ca2:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8011ca4:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8011ca6:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8011ca8:	428c      	cmp	r4, r1
 8011caa:	bf94      	ite	ls
 8011cac:	ebc0 0004 	rsbls	r0, r0, r4
 8011cb0:	ebc0 0001 	rsbhi	r0, r0, r1
 8011cb4:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8011cb6:	f1bb 0f00 	cmp.w	fp, #0
 8011cba:	eba4 0900 	sub.w	r9, r4, r0
 8011cbe:	fb03 5301 	mla	r3, r3, r1, r5
 8011cc2:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8011cc4:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8011cc6:	eba5 0a00 	sub.w	sl, r5, r0
 8011cca:	fb04 f000 	mul.w	r0, r4, r0
 8011cce:	f340 80d3 	ble.w	8011e78 <forward_lite_conv2d_if32of32wf32_pool+0x7e8>
 8011cd2:	f020 080f 	bic.w	r8, r0, #15
 8011cd6:	eeb0 7a61 	vmov.f32	s14, s3
 8011cda:	fb0a fa01 	mul.w	sl, sl, r1
 8011cde:	2400      	movs	r4, #0
 8011ce0:	f108 37ff 	add.w	r7, r8, #4294967295
 8011ce4:	fb09 f901 	mul.w	r9, r9, r1
 8011ce8:	093f      	lsrs	r7, r7, #4
 8011cea:	3701      	adds	r7, #1
 8011cec:	01be      	lsls	r6, r7, #6
 8011cee:	013f      	lsls	r7, r7, #4
 8011cf0:	f1b8 0f00 	cmp.w	r8, #0
 8011cf4:	f340 80b8 	ble.w	8011e68 <forward_lite_conv2d_if32of32wf32_pool+0x7d8>
 8011cf8:	f102 0540 	add.w	r5, r2, #64	@ 0x40
 8011cfc:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8011d00:	f04f 0c00 	mov.w	ip, #0
 8011d04:	ed51 6a0f 	vldr	s13, [r1, #-60]	@ 0xffffffc4
 8011d08:	f10c 0c10 	add.w	ip, ip, #16
 8011d0c:	ed55 7a0f 	vldr	s15, [r5, #-60]	@ 0xffffffc4
 8011d10:	3140      	adds	r1, #64	@ 0x40
 8011d12:	ed55 4a10 	vldr	s9, [r5, #-64]	@ 0xffffffc0
 8011d16:	45c4      	cmp	ip, r8
 8011d18:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011d1c:	ed11 5a20 	vldr	s10, [r1, #-128]	@ 0xffffff80
 8011d20:	ed55 5a0e 	vldr	s11, [r5, #-56]	@ 0xffffffc8
 8011d24:	f105 0540 	add.w	r5, r5, #64	@ 0x40
 8011d28:	ed11 6a1e 	vldr	s12, [r1, #-120]	@ 0xffffff88
 8011d2c:	eee4 7a85 	vfma.f32	s15, s9, s10
 8011d30:	ed51 6a1d 	vldr	s13, [r1, #-116]	@ 0xffffff8c
 8011d34:	ed15 ea1d 	vldr	s28, [r5, #-116]	@ 0xffffff8c
 8011d38:	ed55 da1c 	vldr	s27, [r5, #-112]	@ 0xffffff90
 8011d3c:	ed11 da1c 	vldr	s26, [r1, #-112]	@ 0xffffff90
 8011d40:	ed55 ca1b 	vldr	s25, [r5, #-108]	@ 0xffffff94
 8011d44:	ed11 ca1b 	vldr	s24, [r1, #-108]	@ 0xffffff94
 8011d48:	eee5 7a86 	vfma.f32	s15, s11, s12
 8011d4c:	ed55 ba1a 	vldr	s23, [r5, #-104]	@ 0xffffff98
 8011d50:	ed11 ba1a 	vldr	s22, [r1, #-104]	@ 0xffffff98
 8011d54:	ed55 aa19 	vldr	s21, [r5, #-100]	@ 0xffffff9c
 8011d58:	ed11 aa19 	vldr	s20, [r1, #-100]	@ 0xffffff9c
 8011d5c:	ed55 9a18 	vldr	s19, [r5, #-96]	@ 0xffffffa0
 8011d60:	ed11 9a18 	vldr	s18, [r1, #-96]	@ 0xffffffa0
 8011d64:	eeee 7a26 	vfma.f32	s15, s28, s13
 8011d68:	ed55 8a17 	vldr	s17, [r5, #-92]	@ 0xffffffa4
 8011d6c:	ed11 0a17 	vldr	s0, [r1, #-92]	@ 0xffffffa4
 8011d70:	ed55 0a16 	vldr	s1, [r5, #-88]	@ 0xffffffa8
 8011d74:	ed11 1a16 	vldr	s2, [r1, #-88]	@ 0xffffffa8
 8011d78:	ed15 2a15 	vldr	s4, [r5, #-84]	@ 0xffffffac
 8011d7c:	ed51 2a15 	vldr	s5, [r1, #-84]	@ 0xffffffac
 8011d80:	eeed 7a8d 	vfma.f32	s15, s27, s26
 8011d84:	ed15 3a14 	vldr	s6, [r5, #-80]	@ 0xffffffb0
 8011d88:	ed51 3a14 	vldr	s7, [r1, #-80]	@ 0xffffffb0
 8011d8c:	ed15 4a13 	vldr	s8, [r5, #-76]	@ 0xffffffb4
 8011d90:	ed51 4a13 	vldr	s9, [r1, #-76]	@ 0xffffffb4
 8011d94:	ed15 5a12 	vldr	s10, [r5, #-72]	@ 0xffffffb8
 8011d98:	ed51 5a12 	vldr	s11, [r1, #-72]	@ 0xffffffb8
 8011d9c:	eeec 7a8c 	vfma.f32	s15, s25, s24
 8011da0:	ed15 6a11 	vldr	s12, [r5, #-68]	@ 0xffffffbc
 8011da4:	ed51 6a11 	vldr	s13, [r1, #-68]	@ 0xffffffbc
 8011da8:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 8011dac:	eeea 7a8a 	vfma.f32	s15, s21, s20
 8011db0:	eee9 7a89 	vfma.f32	s15, s19, s18
 8011db4:	eee8 7a80 	vfma.f32	s15, s17, s0
 8011db8:	eee0 7a81 	vfma.f32	s15, s1, s2
 8011dbc:	eee2 7a22 	vfma.f32	s15, s4, s5
 8011dc0:	eee3 7a23 	vfma.f32	s15, s6, s7
 8011dc4:	eee4 7a24 	vfma.f32	s15, s8, s9
 8011dc8:	eee5 7a25 	vfma.f32	s15, s10, s11
 8011dcc:	eee6 7a26 	vfma.f32	s15, s12, s13
 8011dd0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011dd4:	db96      	blt.n	8011d04 <forward_lite_conv2d_if32of32wf32_pool+0x674>
 8011dd6:	4432      	add	r2, r6
 8011dd8:	4433      	add	r3, r6
 8011dda:	4639      	mov	r1, r7
 8011ddc:	4288      	cmp	r0, r1
 8011dde:	dd10      	ble.n	8011e02 <forward_lite_conv2d_if32of32wf32_pool+0x772>
 8011de0:	460d      	mov	r5, r1
 8011de2:	4696      	mov	lr, r2
 8011de4:	469c      	mov	ip, r3
 8011de6:	3501      	adds	r5, #1
 8011de8:	ecfc 6a01 	vldmia	ip!, {s13}
 8011dec:	ecfe 7a01 	vldmia	lr!, {s15}
 8011df0:	42a8      	cmp	r0, r5
 8011df2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011df6:	d1f6      	bne.n	8011de6 <forward_lite_conv2d_if32of32wf32_pool+0x756>
 8011df8:	1a41      	subs	r1, r0, r1
 8011dfa:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8011dfe:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8011e02:	3401      	adds	r4, #1
 8011e04:	4452      	add	r2, sl
 8011e06:	444b      	add	r3, r9
 8011e08:	45a3      	cmp	fp, r4
 8011e0a:	f47f af71 	bne.w	8011cf0 <forward_lite_conv2d_if32of32wf32_pool+0x660>
 8011e0e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8011e10:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8011e12:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8011e14:	4410      	add	r0, r2
 8011e16:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8011e18:	ed81 7a00 	vstr	s14, [r1]
 8011e1c:	900b      	str	r0, [sp, #44]	@ 0x2c
 8011e1e:	3301      	adds	r3, #1
 8011e20:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8011e22:	9311      	str	r3, [sp, #68]	@ 0x44
 8011e24:	4401      	add	r1, r0
 8011e26:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8011e28:	9110      	str	r1, [sp, #64]	@ 0x40
 8011e2a:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8011e2c:	1a89      	subs	r1, r1, r2
 8011e2e:	910e      	str	r1, [sp, #56]	@ 0x38
 8011e30:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8011e32:	4401      	add	r1, r0
 8011e34:	910d      	str	r1, [sp, #52]	@ 0x34
 8011e36:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8011e38:	1a8a      	subs	r2, r1, r2
 8011e3a:	920c      	str	r2, [sp, #48]	@ 0x30
 8011e3c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8011e3e:	429a      	cmp	r2, r3
 8011e40:	f47f af28 	bne.w	8011c94 <forward_lite_conv2d_if32of32wf32_pool+0x604>
 8011e44:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011e46:	9924      	ldr	r1, [sp, #144]	@ 0x90
 8011e48:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8011e4a:	440a      	add	r2, r1
 8011e4c:	3304      	adds	r3, #4
 8011e4e:	9219      	str	r2, [sp, #100]	@ 0x64
 8011e50:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 8011e52:	9326      	str	r3, [sp, #152]	@ 0x98
 8011e54:	4293      	cmp	r3, r2
 8011e56:	f43f ae70 	beq.w	8011b3a <forward_lite_conv2d_if32of32wf32_pool+0x4aa>
 8011e5a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	f47f af04 	bne.w	8011c6a <forward_lite_conv2d_if32of32wf32_pool+0x5da>
 8011e62:	eef0 1a48 	vmov.f32	s3, s16
 8011e66:	e704      	b.n	8011c72 <forward_lite_conv2d_if32of32wf32_pool+0x5e2>
 8011e68:	2100      	movs	r1, #0
 8011e6a:	e7b7      	b.n	8011ddc <forward_lite_conv2d_if32of32wf32_pool+0x74c>
 8011e6c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011e6e:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8011e70:	4610      	mov	r0, r2
 8011e72:	4413      	add	r3, r2
 8011e74:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8011e76:	e714      	b.n	8011ca2 <forward_lite_conv2d_if32of32wf32_pool+0x612>
 8011e78:	eeb0 7a61 	vmov.f32	s14, s3
 8011e7c:	e7c7      	b.n	8011e0e <forward_lite_conv2d_if32of32wf32_pool+0x77e>
 8011e7e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8011e80:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8011e82:	921c      	str	r2, [sp, #112]	@ 0x70
 8011e84:	e52d      	b.n	80118e2 <forward_lite_conv2d_if32of32wf32_pool+0x252>
 8011e86:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8011e88:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8011e8a:	3301      	adds	r3, #1
 8011e8c:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 8011e8e:	440a      	add	r2, r1
 8011e90:	b219      	sxth	r1, r3
 8011e92:	4290      	cmp	r0, r2
 8011e94:	d801      	bhi.n	8011e9a <forward_lite_conv2d_if32of32wf32_pool+0x80a>
 8011e96:	9825      	ldr	r0, [sp, #148]	@ 0x94
 8011e98:	4402      	add	r2, r0
 8011e9a:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8011e9c:	4281      	cmp	r1, r0
 8011e9e:	dbf3      	blt.n	8011e88 <forward_lite_conv2d_if32of32wf32_pool+0x7f8>
 8011ea0:	921b      	str	r2, [sp, #108]	@ 0x6c
 8011ea2:	e674      	b.n	8011b8e <forward_lite_conv2d_if32of32wf32_pool+0x4fe>

08011ea4 <forward_lite_nl_relu_generic_if32of32_kernel>:
 8011ea4:	edd3 6a02 	vldr	s13, [r3, #8]
 8011ea8:	ed93 7a00 	vldr	s14, [r3]
 8011eac:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8011eb0:	ed93 6a01 	vldr	s12, [r3, #4]
 8011eb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011eb8:	d42b      	bmi.n	8011f12 <forward_lite_nl_relu_generic_if32of32_kernel+0x6e>
 8011eba:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8011ebe:	4413      	add	r3, r2
 8011ec0:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 8011ec4:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 8011ec8:	4291      	cmp	r1, r2
 8011eca:	d821      	bhi.n	8011f10 <forward_lite_nl_relu_generic_if32of32_kernel+0x6c>
 8011ecc:	f10c 0104 	add.w	r1, ip, #4
 8011ed0:	1d13      	adds	r3, r2, #4
 8011ed2:	eba2 020c 	sub.w	r2, r2, ip
 8011ed6:	4408      	add	r0, r1
 8011ed8:	e00c      	b.n	8011ef4 <forward_lite_nl_relu_generic_if32of32_kernel+0x50>
 8011eda:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011ede:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8011ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ee6:	db01      	blt.n	8011eec <forward_lite_nl_relu_generic_if32of32_kernel+0x48>
 8011ee8:	ee65 7a86 	vmul.f32	s15, s11, s12
 8011eec:	4293      	cmp	r3, r2
 8011eee:	ed60 7a01 	vstmdb	r0!, {s15}
 8011ef2:	d00c      	beq.n	8011f0e <forward_lite_nl_relu_generic_if32of32_kernel+0x6a>
 8011ef4:	ed73 7a01 	vldmdb	r3!, {s15}
 8011ef8:	eef4 6ae7 	vcmpe.f32	s13, s15
 8011efc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f00:	daeb      	bge.n	8011eda <forward_lite_nl_relu_generic_if32of32_kernel+0x36>
 8011f02:	eef0 7a66 	vmov.f32	s15, s13
 8011f06:	4293      	cmp	r3, r2
 8011f08:	ed60 7a01 	vstmdb	r0!, {s15}
 8011f0c:	d1f2      	bne.n	8011ef4 <forward_lite_nl_relu_generic_if32of32_kernel+0x50>
 8011f0e:	4770      	bx	lr
 8011f10:	4770      	bx	lr
 8011f12:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8011f16:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8011f1a:	4413      	add	r3, r2
 8011f1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f20:	eb01 0c83 	add.w	ip, r1, r3, lsl #2
 8011f24:	b500      	push	{lr}
 8011f26:	ea4f 0e83 	mov.w	lr, r3, lsl #2
 8011f2a:	d019      	beq.n	8011f60 <forward_lite_nl_relu_generic_if32of32_kernel+0xbc>
 8011f2c:	4561      	cmp	r1, ip
 8011f2e:	d815      	bhi.n	8011f5c <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 8011f30:	f10e 0204 	add.w	r2, lr, #4
 8011f34:	f10c 0304 	add.w	r3, ip, #4
 8011f38:	ebac 010e 	sub.w	r1, ip, lr
 8011f3c:	4402      	add	r2, r0
 8011f3e:	ed73 7a01 	vldmdb	r3!, {s15}
 8011f42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011f46:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8011f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f4e:	ee66 6a86 	vmul.f32	s13, s13, s12
 8011f52:	d827      	bhi.n	8011fa4 <forward_lite_nl_relu_generic_if32of32_kernel+0x100>
 8011f54:	428b      	cmp	r3, r1
 8011f56:	ed62 6a01 	vstmdb	r2!, {s13}
 8011f5a:	d1f0      	bne.n	8011f3e <forward_lite_nl_relu_generic_if32of32_kernel+0x9a>
 8011f5c:	f85d fb04 	ldr.w	pc, [sp], #4
 8011f60:	4561      	cmp	r1, ip
 8011f62:	d8fb      	bhi.n	8011f5c <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 8011f64:	f10e 0204 	add.w	r2, lr, #4
 8011f68:	f10c 0304 	add.w	r3, ip, #4
 8011f6c:	ebac 010e 	sub.w	r1, ip, lr
 8011f70:	f04f 0c00 	mov.w	ip, #0
 8011f74:	4402      	add	r2, r0
 8011f76:	ed73 7a01 	vldmdb	r3!, {s15}
 8011f7a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f82:	d40a      	bmi.n	8011f9a <forward_lite_nl_relu_generic_if32of32_kernel+0xf6>
 8011f84:	428b      	cmp	r3, r1
 8011f86:	f842 cd04 	str.w	ip, [r2, #-4]!
 8011f8a:	d0e7      	beq.n	8011f5c <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 8011f8c:	ed73 7a01 	vldmdb	r3!, {s15}
 8011f90:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011f94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f98:	d5f4      	bpl.n	8011f84 <forward_lite_nl_relu_generic_if32of32_kernel+0xe0>
 8011f9a:	428b      	cmp	r3, r1
 8011f9c:	ed62 7a01 	vstmdb	r2!, {s15}
 8011fa0:	d1e9      	bne.n	8011f76 <forward_lite_nl_relu_generic_if32of32_kernel+0xd2>
 8011fa2:	e7db      	b.n	8011f5c <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 8011fa4:	428b      	cmp	r3, r1
 8011fa6:	ed62 7a01 	vstmdb	r2!, {s15}
 8011faa:	d1c8      	bne.n	8011f3e <forward_lite_nl_relu_generic_if32of32_kernel+0x9a>
 8011fac:	e7d6      	b.n	8011f5c <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 8011fae:	bf00      	nop

08011fb0 <pool_func_mp_array_f32>:
 8011fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fb4:	b091      	sub	sp, #68	@ 0x44
 8011fb6:	468b      	mov	fp, r1
 8011fb8:	469c      	mov	ip, r3
 8011fba:	4690      	mov	r8, r2
 8011fbc:	f8bd 106c 	ldrh.w	r1, [sp, #108]	@ 0x6c
 8011fc0:	4681      	mov	r9, r0
 8011fc2:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 8011fc6:	9101      	str	r1, [sp, #4]
 8011fc8:	f8bd 1078 	ldrh.w	r1, [sp, #120]	@ 0x78
 8011fcc:	f8bd 2074 	ldrh.w	r2, [sp, #116]	@ 0x74
 8011fd0:	9105      	str	r1, [sp, #20]
 8011fd2:	f8bd 107c 	ldrh.w	r1, [sp, #124]	@ 0x7c
 8011fd6:	9304      	str	r3, [sp, #16]
 8011fd8:	9106      	str	r1, [sp, #24]
 8011fda:	f8bd 3070 	ldrh.w	r3, [sp, #112]	@ 0x70
 8011fde:	f8bd 1080 	ldrh.w	r1, [sp, #128]	@ 0x80
 8011fe2:	ea52 0403 	orrs.w	r4, r2, r3
 8011fe6:	9102      	str	r1, [sp, #8]
 8011fe8:	f8bd 1084 	ldrh.w	r1, [sp, #132]	@ 0x84
 8011fec:	9103      	str	r1, [sp, #12]
 8011fee:	d173      	bne.n	80120d8 <pool_func_mp_array_f32+0x128>
 8011ff0:	9904      	ldr	r1, [sp, #16]
 8011ff2:	9d02      	ldr	r5, [sp, #8]
 8011ff4:	eba1 000b 	sub.w	r0, r1, fp
 8011ff8:	9e05      	ldr	r6, [sp, #20]
 8011ffa:	1e69      	subs	r1, r5, #1
 8011ffc:	3801      	subs	r0, #1
 8011ffe:	fb11 0106 	smlabb	r1, r1, r6, r0
 8012002:	0409      	lsls	r1, r1, #16
 8012004:	d568      	bpl.n	80120d8 <pool_func_mp_array_f32+0x128>
 8012006:	9901      	ldr	r1, [sp, #4]
 8012008:	9e03      	ldr	r6, [sp, #12]
 801200a:	eba1 0008 	sub.w	r0, r1, r8
 801200e:	9f06      	ldr	r7, [sp, #24]
 8012010:	1e71      	subs	r1, r6, #1
 8012012:	3801      	subs	r0, #1
 8012014:	fb11 0107 	smlabb	r1, r1, r7, r0
 8012018:	040f      	lsls	r7, r1, #16
 801201a:	d55d      	bpl.n	80120d8 <pool_func_mp_array_f32+0x128>
 801201c:	2e00      	cmp	r6, #0
 801201e:	d058      	beq.n	80120d2 <pool_func_mp_array_f32+0x122>
 8012020:	2d00      	cmp	r5, #0
 8012022:	d056      	beq.n	80120d2 <pool_func_mp_array_f32+0x122>
 8012024:	4663      	mov	r3, ip
 8012026:	2b00      	cmp	r3, #0
 8012028:	d053      	beq.n	80120d2 <pool_func_mp_array_f32+0x122>
 801202a:	2b01      	cmp	r3, #1
 801202c:	f040 814a 	bne.w	80122c4 <pool_func_mp_array_f32+0x314>
 8012030:	46a2      	mov	sl, r4
 8012032:	4623      	mov	r3, r4
 8012034:	9407      	str	r4, [sp, #28]
 8012036:	9a02      	ldr	r2, [sp, #8]
 8012038:	2700      	movs	r7, #0
 801203a:	f9bd 6004 	ldrsh.w	r6, [sp, #4]
 801203e:	fb02 f303 	mul.w	r3, r2, r3
 8012042:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8012046:	46be      	mov	lr, r7
 8012048:	46bc      	mov	ip, r7
 801204a:	9308      	str	r3, [sp, #32]
 801204c:	fa0f f38a 	sxth.w	r3, sl
 8012050:	9309      	str	r3, [sp, #36]	@ 0x24
 8012052:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8012054:	b23d      	sxth	r5, r7
 8012056:	9b08      	ldr	r3, [sp, #32]
 8012058:	fa0f f088 	sxth.w	r0, r8
 801205c:	42b4      	cmp	r4, r6
 801205e:	eddf 7a98 	vldr	s15, [pc, #608]	@ 80122c0 <pool_func_mp_array_f32+0x310>
 8012062:	449c      	add	ip, r3
 8012064:	da12      	bge.n	801208c <pool_func_mp_array_f32+0xdc>
 8012066:	4285      	cmp	r5, r0
 8012068:	da0c      	bge.n	8012084 <pool_func_mp_array_f32+0xd4>
 801206a:	fb04 520b 	mla	r2, r4, fp, r5
 801206e:	462b      	mov	r3, r5
 8012070:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8012074:	3301      	adds	r3, #1
 8012076:	ecb2 7a01 	vldmia	r2!, {s14}
 801207a:	b219      	sxth	r1, r3
 801207c:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8012080:	4281      	cmp	r1, r0
 8012082:	dbf7      	blt.n	8012074 <pool_func_mp_array_f32+0xc4>
 8012084:	3401      	adds	r4, #1
 8012086:	b224      	sxth	r4, r4
 8012088:	42b4      	cmp	r4, r6
 801208a:	dbec      	blt.n	8012066 <pool_func_mp_array_f32+0xb6>
 801208c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801208e:	f10e 0e01 	add.w	lr, lr, #1
 8012092:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8012096:	9b05      	ldr	r3, [sp, #20]
 8012098:	fa0f fe8e 	sxth.w	lr, lr
 801209c:	4498      	add	r8, r3
 801209e:	441f      	add	r7, r3
 80120a0:	9b02      	ldr	r3, [sp, #8]
 80120a2:	edcc 7a00 	vstr	s15, [ip]
 80120a6:	fa1f f888 	uxth.w	r8, r8
 80120aa:	4573      	cmp	r3, lr
 80120ac:	b2bf      	uxth	r7, r7
 80120ae:	46f4      	mov	ip, lr
 80120b0:	dccf      	bgt.n	8012052 <pool_func_mp_array_f32+0xa2>
 80120b2:	9a07      	ldr	r2, [sp, #28]
 80120b4:	9906      	ldr	r1, [sp, #24]
 80120b6:	9b01      	ldr	r3, [sp, #4]
 80120b8:	3201      	adds	r2, #1
 80120ba:	448a      	add	sl, r1
 80120bc:	b212      	sxth	r2, r2
 80120be:	440b      	add	r3, r1
 80120c0:	9903      	ldr	r1, [sp, #12]
 80120c2:	fa1f fa8a 	uxth.w	sl, sl
 80120c6:	b29b      	uxth	r3, r3
 80120c8:	9207      	str	r2, [sp, #28]
 80120ca:	4291      	cmp	r1, r2
 80120cc:	9301      	str	r3, [sp, #4]
 80120ce:	4613      	mov	r3, r2
 80120d0:	dcb1      	bgt.n	8012036 <pool_func_mp_array_f32+0x86>
 80120d2:	b011      	add	sp, #68	@ 0x44
 80120d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120d8:	9903      	ldr	r1, [sp, #12]
 80120da:	2900      	cmp	r1, #0
 80120dc:	d0f9      	beq.n	80120d2 <pool_func_mp_array_f32+0x122>
 80120de:	9902      	ldr	r1, [sp, #8]
 80120e0:	2900      	cmp	r1, #0
 80120e2:	d0f6      	beq.n	80120d2 <pool_func_mp_array_f32+0x122>
 80120e4:	4661      	mov	r1, ip
 80120e6:	2900      	cmp	r1, #0
 80120e8:	d0f3      	beq.n	80120d2 <pool_func_mp_array_f32+0x122>
 80120ea:	2901      	cmp	r1, #1
 80120ec:	9901      	ldr	r1, [sp, #4]
 80120ee:	d163      	bne.n	80121b8 <pool_func_mp_array_f32+0x208>
 80120f0:	1a8a      	subs	r2, r1, r2
 80120f2:	9904      	ldr	r1, [sp, #16]
 80120f4:	1ac9      	subs	r1, r1, r3
 80120f6:	425b      	negs	r3, r3
 80120f8:	b292      	uxth	r2, r2
 80120fa:	b29b      	uxth	r3, r3
 80120fc:	9204      	str	r2, [sp, #16]
 80120fe:	b28a      	uxth	r2, r1
 8012100:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012102:	2300      	movs	r3, #0
 8012104:	920a      	str	r2, [sp, #40]	@ 0x28
 8012106:	9307      	str	r3, [sp, #28]
 8012108:	9a02      	ldr	r2, [sp, #8]
 801210a:	2700      	movs	r7, #0
 801210c:	fb02 f303 	mul.w	r3, r2, r3
 8012110:	9a04      	ldr	r2, [sp, #16]
 8012112:	46bc      	mov	ip, r7
 8012114:	9308      	str	r3, [sp, #32]
 8012116:	b216      	sxth	r6, r2
 8012118:	9b01      	ldr	r3, [sp, #4]
 801211a:	1ad3      	subs	r3, r2, r3
 801211c:	e9dd ae0a 	ldrd	sl, lr, [sp, #40]	@ 0x28
 8012120:	b21b      	sxth	r3, r3
 8012122:	9309      	str	r3, [sp, #36]	@ 0x24
 8012124:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012126:	fa0f f58e 	sxth.w	r5, lr
 801212a:	9b08      	ldr	r3, [sp, #32]
 801212c:	fa0f f48a 	sxth.w	r4, sl
 8012130:	428e      	cmp	r6, r1
 8012132:	eddf 7a63 	vldr	s15, [pc, #396]	@ 80122c0 <pool_func_mp_array_f32+0x310>
 8012136:	449c      	add	ip, r3
 8012138:	dd1c      	ble.n	8012174 <pool_func_mp_array_f32+0x1c4>
 801213a:	42a5      	cmp	r5, r4
 801213c:	da16      	bge.n	801216c <pool_func_mp_array_f32+0x1bc>
 801213e:	4588      	cmp	r8, r1
 8012140:	fb01 f20b 	mul.w	r2, r1, fp
 8012144:	dd12      	ble.n	801216c <pool_func_mp_array_f32+0x1bc>
 8012146:	442a      	add	r2, r5
 8012148:	462b      	mov	r3, r5
 801214a:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 801214e:	ea41 0003 	orr.w	r0, r1, r3
 8012152:	0400      	lsls	r0, r0, #16
 8012154:	d405      	bmi.n	8012162 <pool_func_mp_array_f32+0x1b2>
 8012156:	459b      	cmp	fp, r3
 8012158:	dd03      	ble.n	8012162 <pool_func_mp_array_f32+0x1b2>
 801215a:	ed92 7a00 	vldr	s14, [r2]
 801215e:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8012162:	3301      	adds	r3, #1
 8012164:	3204      	adds	r2, #4
 8012166:	b218      	sxth	r0, r3
 8012168:	42a0      	cmp	r0, r4
 801216a:	dbf0      	blt.n	801214e <pool_func_mp_array_f32+0x19e>
 801216c:	3101      	adds	r1, #1
 801216e:	b209      	sxth	r1, r1
 8012170:	42b1      	cmp	r1, r6
 8012172:	dbe2      	blt.n	801213a <pool_func_mp_array_f32+0x18a>
 8012174:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8012176:	3701      	adds	r7, #1
 8012178:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 801217c:	9b05      	ldr	r3, [sp, #20]
 801217e:	b23f      	sxth	r7, r7
 8012180:	449a      	add	sl, r3
 8012182:	449e      	add	lr, r3
 8012184:	9b02      	ldr	r3, [sp, #8]
 8012186:	edcc 7a00 	vstr	s15, [ip]
 801218a:	fa1f fa8a 	uxth.w	sl, sl
 801218e:	42bb      	cmp	r3, r7
 8012190:	fa1f fe8e 	uxth.w	lr, lr
 8012194:	46bc      	mov	ip, r7
 8012196:	dcc5      	bgt.n	8012124 <pool_func_mp_array_f32+0x174>
 8012198:	9a07      	ldr	r2, [sp, #28]
 801219a:	9b04      	ldr	r3, [sp, #16]
 801219c:	9906      	ldr	r1, [sp, #24]
 801219e:	3201      	adds	r2, #1
 80121a0:	440b      	add	r3, r1
 80121a2:	b212      	sxth	r2, r2
 80121a4:	9903      	ldr	r1, [sp, #12]
 80121a6:	b29b      	uxth	r3, r3
 80121a8:	9207      	str	r2, [sp, #28]
 80121aa:	4291      	cmp	r1, r2
 80121ac:	9304      	str	r3, [sp, #16]
 80121ae:	4613      	mov	r3, r2
 80121b0:	dcaa      	bgt.n	8012108 <pool_func_mp_array_f32+0x158>
 80121b2:	b011      	add	sp, #68	@ 0x44
 80121b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121b8:	1a88      	subs	r0, r1, r2
 80121ba:	9904      	ldr	r1, [sp, #16]
 80121bc:	4252      	negs	r2, r2
 80121be:	ea4f 0a8c 	mov.w	sl, ip, lsl #2
 80121c2:	1ac9      	subs	r1, r1, r3
 80121c4:	425b      	negs	r3, r3
 80121c6:	b292      	uxth	r2, r2
 80121c8:	46e6      	mov	lr, ip
 80121ca:	b29b      	uxth	r3, r3
 80121cc:	b280      	uxth	r0, r0
 80121ce:	9208      	str	r2, [sp, #32]
 80121d0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80121d2:	b28a      	uxth	r2, r1
 80121d4:	2300      	movs	r3, #0
 80121d6:	9007      	str	r0, [sp, #28]
 80121d8:	920e      	str	r2, [sp, #56]	@ 0x38
 80121da:	930b      	str	r3, [sp, #44]	@ 0x2c
 80121dc:	9a02      	ldr	r2, [sp, #8]
 80121de:	f9bd 601c 	ldrsh.w	r6, [sp, #28]
 80121e2:	fb02 f303 	mul.w	r3, r2, r3
 80121e6:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80121ea:	920a      	str	r2, [sp, #40]	@ 0x28
 80121ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80121ee:	930d      	str	r3, [sp, #52]	@ 0x34
 80121f0:	2300      	movs	r3, #0
 80121f2:	9201      	str	r2, [sp, #4]
 80121f4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80121f6:	930c      	str	r3, [sp, #48]	@ 0x30
 80121f8:	9204      	str	r2, [sp, #16]
 80121fa:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80121fc:	f04f 0c00 	mov.w	ip, #0
 8012200:	f9bd 5010 	ldrsh.w	r5, [sp, #16]
 8012204:	4413      	add	r3, r2
 8012206:	f9bd 4004 	ldrsh.w	r4, [sp, #4]
 801220a:	4667      	mov	r7, ip
 801220c:	fb0e f303 	mul.w	r3, lr, r3
 8012210:	9309      	str	r3, [sp, #36]	@ 0x24
 8012212:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012214:	eddf 7a2a 	vldr	s15, [pc, #168]	@ 80122c0 <pool_func_mp_array_f32+0x310>
 8012218:	42b1      	cmp	r1, r6
 801221a:	da1e      	bge.n	801225a <pool_func_mp_array_f32+0x2aa>
 801221c:	42a5      	cmp	r5, r4
 801221e:	da18      	bge.n	8012252 <pool_func_mp_array_f32+0x2a2>
 8012220:	4541      	cmp	r1, r8
 8012222:	fb01 f30b 	mul.w	r3, r1, fp
 8012226:	da14      	bge.n	8012252 <pool_func_mp_array_f32+0x2a2>
 8012228:	195a      	adds	r2, r3, r5
 801222a:	462b      	mov	r3, r5
 801222c:	fb0e 7202 	mla	r2, lr, r2, r7
 8012230:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8012234:	ea41 0003 	orr.w	r0, r1, r3
 8012238:	0400      	lsls	r0, r0, #16
 801223a:	d405      	bmi.n	8012248 <pool_func_mp_array_f32+0x298>
 801223c:	459b      	cmp	fp, r3
 801223e:	dd03      	ble.n	8012248 <pool_func_mp_array_f32+0x298>
 8012240:	ed92 7a00 	vldr	s14, [r2]
 8012244:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8012248:	3301      	adds	r3, #1
 801224a:	4452      	add	r2, sl
 801224c:	b218      	sxth	r0, r3
 801224e:	42a0      	cmp	r0, r4
 8012250:	dbf0      	blt.n	8012234 <pool_func_mp_array_f32+0x284>
 8012252:	3101      	adds	r1, #1
 8012254:	b209      	sxth	r1, r1
 8012256:	42b1      	cmp	r1, r6
 8012258:	dbe0      	blt.n	801221c <pool_func_mp_array_f32+0x26c>
 801225a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801225c:	f10c 0c01 	add.w	ip, ip, #1
 8012260:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8012262:	443b      	add	r3, r7
 8012264:	fa0f fc8c 	sxth.w	ip, ip
 8012268:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801226c:	45f4      	cmp	ip, lr
 801226e:	4667      	mov	r7, ip
 8012270:	edc3 7a00 	vstr	s15, [r3]
 8012274:	dbcd      	blt.n	8012212 <pool_func_mp_array_f32+0x262>
 8012276:	9a01      	ldr	r2, [sp, #4]
 8012278:	9805      	ldr	r0, [sp, #20]
 801227a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801227c:	4402      	add	r2, r0
 801227e:	9b04      	ldr	r3, [sp, #16]
 8012280:	3101      	adds	r1, #1
 8012282:	b292      	uxth	r2, r2
 8012284:	4403      	add	r3, r0
 8012286:	b209      	sxth	r1, r1
 8012288:	9201      	str	r2, [sp, #4]
 801228a:	b29b      	uxth	r3, r3
 801228c:	9a02      	ldr	r2, [sp, #8]
 801228e:	9304      	str	r3, [sp, #16]
 8012290:	460b      	mov	r3, r1
 8012292:	428a      	cmp	r2, r1
 8012294:	910c      	str	r1, [sp, #48]	@ 0x30
 8012296:	dcb0      	bgt.n	80121fa <pool_func_mp_array_f32+0x24a>
 8012298:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801229a:	9b08      	ldr	r3, [sp, #32]
 801229c:	3101      	adds	r1, #1
 801229e:	e9dd 0206 	ldrd	r0, r2, [sp, #24]
 80122a2:	b209      	sxth	r1, r1
 80122a4:	4402      	add	r2, r0
 80122a6:	4403      	add	r3, r0
 80122a8:	910b      	str	r1, [sp, #44]	@ 0x2c
 80122aa:	b292      	uxth	r2, r2
 80122ac:	b29b      	uxth	r3, r3
 80122ae:	9207      	str	r2, [sp, #28]
 80122b0:	9a03      	ldr	r2, [sp, #12]
 80122b2:	9308      	str	r3, [sp, #32]
 80122b4:	460b      	mov	r3, r1
 80122b6:	428a      	cmp	r2, r1
 80122b8:	dc90      	bgt.n	80121dc <pool_func_mp_array_f32+0x22c>
 80122ba:	b011      	add	sp, #68	@ 0x44
 80122bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122c0:	cf000000 	.word	0xcf000000
 80122c4:	4623      	mov	r3, r4
 80122c6:	ea4f 0a8c 	mov.w	sl, ip, lsl #2
 80122ca:	46e0      	mov	r8, ip
 80122cc:	9408      	str	r4, [sp, #32]
 80122ce:	9409      	str	r4, [sp, #36]	@ 0x24
 80122d0:	9a02      	ldr	r2, [sp, #8]
 80122d2:	f04f 0c00 	mov.w	ip, #0
 80122d6:	f9bd 7004 	ldrsh.w	r7, [sp, #4]
 80122da:	fb02 f303 	mul.w	r3, r2, r3
 80122de:	f8cd c028 	str.w	ip, [sp, #40]	@ 0x28
 80122e2:	930c      	str	r3, [sp, #48]	@ 0x30
 80122e4:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 80122e8:	930d      	str	r3, [sp, #52]	@ 0x34
 80122ea:	9b04      	ldr	r3, [sp, #16]
 80122ec:	9307      	str	r3, [sp, #28]
 80122ee:	4663      	mov	r3, ip
 80122f0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80122f2:	f04f 0e00 	mov.w	lr, #0
 80122f6:	fa0f f58c 	sxth.w	r5, ip
 80122fa:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 80122fe:	4413      	add	r3, r2
 8012300:	4676      	mov	r6, lr
 8012302:	fb08 f303 	mul.w	r3, r8, r3
 8012306:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012308:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801230a:	ed5f 7a13 	vldr	s15, [pc, #-76]	@ 80122c0 <pool_func_mp_array_f32+0x310>
 801230e:	42bc      	cmp	r4, r7
 8012310:	da15      	bge.n	801233e <pool_func_mp_array_f32+0x38e>
 8012312:	4285      	cmp	r5, r0
 8012314:	da0f      	bge.n	8012336 <pool_func_mp_array_f32+0x386>
 8012316:	fb0b 5304 	mla	r3, fp, r4, r5
 801231a:	462a      	mov	r2, r5
 801231c:	fb08 6303 	mla	r3, r8, r3, r6
 8012320:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8012324:	3201      	adds	r2, #1
 8012326:	ed93 7a00 	vldr	s14, [r3]
 801232a:	4453      	add	r3, sl
 801232c:	b211      	sxth	r1, r2
 801232e:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8012332:	4281      	cmp	r1, r0
 8012334:	dbf6      	blt.n	8012324 <pool_func_mp_array_f32+0x374>
 8012336:	3401      	adds	r4, #1
 8012338:	b224      	sxth	r4, r4
 801233a:	42bc      	cmp	r4, r7
 801233c:	dbe9      	blt.n	8012312 <pool_func_mp_array_f32+0x362>
 801233e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012340:	f10e 0e01 	add.w	lr, lr, #1
 8012344:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8012346:	4433      	add	r3, r6
 8012348:	fa0f fe8e 	sxth.w	lr, lr
 801234c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012350:	45c6      	cmp	lr, r8
 8012352:	4676      	mov	r6, lr
 8012354:	edc3 7a00 	vstr	s15, [r3]
 8012358:	dbd6      	blt.n	8012308 <pool_func_mp_array_f32+0x358>
 801235a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801235c:	9905      	ldr	r1, [sp, #20]
 801235e:	9b07      	ldr	r3, [sp, #28]
 8012360:	3201      	adds	r2, #1
 8012362:	448c      	add	ip, r1
 8012364:	b212      	sxth	r2, r2
 8012366:	440b      	add	r3, r1
 8012368:	9902      	ldr	r1, [sp, #8]
 801236a:	fa1f fc8c 	uxth.w	ip, ip
 801236e:	b29b      	uxth	r3, r3
 8012370:	920a      	str	r2, [sp, #40]	@ 0x28
 8012372:	4291      	cmp	r1, r2
 8012374:	9307      	str	r3, [sp, #28]
 8012376:	4613      	mov	r3, r2
 8012378:	dcba      	bgt.n	80122f0 <pool_func_mp_array_f32+0x340>
 801237a:	9a01      	ldr	r2, [sp, #4]
 801237c:	9806      	ldr	r0, [sp, #24]
 801237e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012380:	4402      	add	r2, r0
 8012382:	9b08      	ldr	r3, [sp, #32]
 8012384:	3101      	adds	r1, #1
 8012386:	b292      	uxth	r2, r2
 8012388:	4403      	add	r3, r0
 801238a:	b209      	sxth	r1, r1
 801238c:	9201      	str	r2, [sp, #4]
 801238e:	b29b      	uxth	r3, r3
 8012390:	9a03      	ldr	r2, [sp, #12]
 8012392:	9308      	str	r3, [sp, #32]
 8012394:	460b      	mov	r3, r1
 8012396:	428a      	cmp	r2, r1
 8012398:	9109      	str	r1, [sp, #36]	@ 0x24
 801239a:	dc99      	bgt.n	80122d0 <pool_func_mp_array_f32+0x320>
 801239c:	e699      	b.n	80120d2 <pool_func_mp_array_f32+0x122>
 801239e:	bf00      	nop

080123a0 <forward_lite_upsample_bilinear_if32of32>:
 80123a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123a4:	ed2d 8b0a 	vpush	{d8-d12}
 80123a8:	b08f      	sub	sp, #60	@ 0x3c
 80123aa:	4683      	mov	fp, r0
 80123ac:	9104      	str	r1, [sp, #16]
 80123ae:	f89d 1094 	ldrb.w	r1, [sp, #148]	@ 0x94
 80123b2:	f8dd 8088 	ldr.w	r8, [sp, #136]	@ 0x88
 80123b6:	f8dd a090 	ldr.w	sl, [sp, #144]	@ 0x90
 80123ba:	9206      	str	r2, [sp, #24]
 80123bc:	2900      	cmp	r1, #0
 80123be:	f000 80a7 	beq.w	8012510 <forward_lite_upsample_bilinear_if32of32+0x170>
 80123c2:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80123c6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80123ca:	ee70 aae7 	vsub.f32	s21, s1, s15
 80123ce:	ee70 7a67 	vsub.f32	s15, s0, s15
 80123d2:	ee6a aa87 	vmul.f32	s21, s21, s14
 80123d6:	ee27 9a87 	vmul.f32	s18, s15, s14
 80123da:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80123de:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80123e0:	ee87 baa0 	vdiv.f32	s22, s15, s1
 80123e4:	eec7 9a80 	vdiv.f32	s19, s15, s0
 80123e8:	2a00      	cmp	r2, #0
 80123ea:	f000 808c 	beq.w	8012506 <forward_lite_upsample_bilinear_if32of32+0x166>
 80123ee:	3b01      	subs	r3, #1
 80123f0:	ea4f 068a 	mov.w	r6, sl, lsl #2
 80123f4:	eddf 8a49 	vldr	s17, [pc, #292]	@ 801251c <forward_lite_upsample_bilinear_if32of32+0x17c>
 80123f8:	ee07 3a90 	vmov	s15, r3
 80123fc:	9b06      	ldr	r3, [sp, #24]
 80123fe:	1e5a      	subs	r2, r3, #1
 8012400:	fb0a f303 	mul.w	r3, sl, r3
 8012404:	eeb8 aa67 	vcvt.f32.u32	s20, s15
 8012408:	ee0c 2a90 	vmov	s25, r2
 801240c:	9305      	str	r3, [sp, #20]
 801240e:	2300      	movs	r3, #0
 8012410:	eef8 ca6c 	vcvt.f32.u32	s25, s25
 8012414:	9303      	str	r3, [sp, #12]
 8012416:	fb06 f308 	mul.w	r3, r6, r8
 801241a:	9307      	str	r3, [sp, #28]
 801241c:	eddd 7a03 	vldr	s15, [sp, #12]
 8012420:	9b05      	ldr	r3, [sp, #20]
 8012422:	eef8 ba67 	vcvt.f32.u32	s23, s15
 8012426:	ee7b baea 	vsub.f32	s23, s23, s21
 801242a:	ee6b ba8b 	vmul.f32	s23, s23, s22
 801242e:	fecb baa8 	vmaxnm.f32	s23, s23, s17
 8012432:	fecb baca 	vminnm.f32	s23, s23, s20
 8012436:	eef4 ba4a 	vcmp.f32	s23, s20
 801243a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801243e:	bf14      	ite	ne
 8012440:	4699      	movne	r9, r3
 8012442:	f04f 0900 	moveq.w	r9, #0
 8012446:	f1b8 0f00 	cmp.w	r8, #0
 801244a:	d056      	beq.n	80124fa <forward_lite_upsample_bilinear_if32of32+0x15a>
 801244c:	eebc 7aeb 	vcvt.u32.f32	s14, s23
 8012450:	9b06      	ldr	r3, [sp, #24]
 8012452:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 8012456:	9d04      	ldr	r5, [sp, #16]
 8012458:	2400      	movs	r4, #0
 801245a:	eef8 7a47 	vcvt.f32.u32	s15, s14
 801245e:	ee17 7a10 	vmov	r7, s14
 8012462:	ee38 ca6b 	vsub.f32	s24, s16, s23
 8012466:	fb03 f707 	mul.w	r7, r3, r7
 801246a:	ee7b bae7 	vsub.f32	s23, s23, s15
 801246e:	ee3c ca27 	vadd.f32	s24, s24, s15
 8012472:	ee07 4a90 	vmov	s15, r4
 8012476:	ab0a      	add	r3, sp, #40	@ 0x28
 8012478:	3401      	adds	r4, #1
 801247a:	4629      	mov	r1, r5
 801247c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012480:	9300      	str	r3, [sp, #0]
 8012482:	4652      	mov	r2, sl
 8012484:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
 8012488:	4435      	add	r5, r6
 801248a:	ee77 7ac9 	vsub.f32	s15, s15, s18
 801248e:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8012492:	fec7 7aa8 	vmaxnm.f32	s15, s15, s17
 8012496:	fec7 7aec 	vminnm.f32	s15, s15, s25
 801249a:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 801249e:	eef4 7a6c 	vcmp.f32	s15, s25
 80124a2:	ee38 7a67 	vsub.f32	s14, s16, s15
 80124a6:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 80124aa:	ee16 0a90 	vmov	r0, s13
 80124ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124b2:	4438      	add	r0, r7
 80124b4:	ee37 7a06 	vadd.f32	s14, s14, s12
 80124b8:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80124bc:	bf14      	ite	ne
 80124be:	4653      	movne	r3, sl
 80124c0:	2300      	moveq	r3, #0
 80124c2:	fb06 b000 	mla	r0, r6, r0, fp
 80124c6:	ee67 5a0c 	vmul.f32	s11, s14, s24
 80124ca:	ee27 6a8c 	vmul.f32	s12, s15, s24
 80124ce:	9308      	str	r3, [sp, #32]
 80124d0:	ee27 7a2b 	vmul.f32	s14, s14, s23
 80124d4:	ab08      	add	r3, sp, #32
 80124d6:	ee67 7aab 	vmul.f32	s15, s15, s23
 80124da:	edcd 5a0a 	vstr	s11, [sp, #40]	@ 0x28
 80124de:	ed8d 6a0b 	vstr	s12, [sp, #44]	@ 0x2c
 80124e2:	ed8d 7a0c 	vstr	s14, [sp, #48]	@ 0x30
 80124e6:	edcd 7a0d 	vstr	s15, [sp, #52]	@ 0x34
 80124ea:	f001 f9d9 	bl	80138a0 <lite_bilinear_if32of32_kernel>
 80124ee:	45a0      	cmp	r8, r4
 80124f0:	d1bf      	bne.n	8012472 <forward_lite_upsample_bilinear_if32of32+0xd2>
 80124f2:	9b04      	ldr	r3, [sp, #16]
 80124f4:	9a07      	ldr	r2, [sp, #28]
 80124f6:	4413      	add	r3, r2
 80124f8:	9304      	str	r3, [sp, #16]
 80124fa:	9b03      	ldr	r3, [sp, #12]
 80124fc:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80124fe:	3301      	adds	r3, #1
 8012500:	429a      	cmp	r2, r3
 8012502:	9303      	str	r3, [sp, #12]
 8012504:	d18a      	bne.n	801241c <forward_lite_upsample_bilinear_if32of32+0x7c>
 8012506:	b00f      	add	sp, #60	@ 0x3c
 8012508:	ecbd 8b0a 	vpop	{d8-d12}
 801250c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012510:	eddf aa02 	vldr	s21, [pc, #8]	@ 801251c <forward_lite_upsample_bilinear_if32of32+0x17c>
 8012514:	eeb0 9a6a 	vmov.f32	s18, s21
 8012518:	e75f      	b.n	80123da <forward_lite_upsample_bilinear_if32of32+0x3a>
 801251a:	bf00      	nop
 801251c:	00000000 	.word	0x00000000

08012520 <forward_lite_upsample_bilinear_is8os8>:
 8012520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012524:	ed2d 8b0a 	vpush	{d8-d12}
 8012528:	b08f      	sub	sp, #60	@ 0x3c
 801252a:	4682      	mov	sl, r0
 801252c:	9104      	str	r1, [sp, #16]
 801252e:	f89d 1094 	ldrb.w	r1, [sp, #148]	@ 0x94
 8012532:	9f22      	ldr	r7, [sp, #136]	@ 0x88
 8012534:	f8dd b090 	ldr.w	fp, [sp, #144]	@ 0x90
 8012538:	9206      	str	r2, [sp, #24]
 801253a:	2900      	cmp	r1, #0
 801253c:	f000 80aa 	beq.w	8012694 <forward_lite_upsample_bilinear_is8os8+0x174>
 8012540:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8012544:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8012548:	ee70 aae7 	vsub.f32	s21, s1, s15
 801254c:	ee70 7a67 	vsub.f32	s15, s0, s15
 8012550:	ee6a aa87 	vmul.f32	s21, s21, s14
 8012554:	ee27 9a87 	vmul.f32	s18, s15, s14
 8012558:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801255c:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801255e:	ee87 baa0 	vdiv.f32	s22, s15, s1
 8012562:	eec7 9a80 	vdiv.f32	s19, s15, s0
 8012566:	2a00      	cmp	r2, #0
 8012568:	f000 808f 	beq.w	801268a <forward_lite_upsample_bilinear_is8os8+0x16a>
 801256c:	3b01      	subs	r3, #1
 801256e:	eddf 8a4c 	vldr	s17, [pc, #304]	@ 80126a0 <forward_lite_upsample_bilinear_is8os8+0x180>
 8012572:	ee07 3a90 	vmov	s15, r3
 8012576:	9b06      	ldr	r3, [sp, #24]
 8012578:	1e5a      	subs	r2, r3, #1
 801257a:	fb0b f303 	mul.w	r3, fp, r3
 801257e:	eeb8 aa67 	vcvt.f32.u32	s20, s15
 8012582:	ee0c 2a90 	vmov	s25, r2
 8012586:	9305      	str	r3, [sp, #20]
 8012588:	fb07 f30b 	mul.w	r3, r7, fp
 801258c:	eef8 ca6c 	vcvt.f32.u32	s25, s25
 8012590:	9307      	str	r3, [sp, #28]
 8012592:	2300      	movs	r3, #0
 8012594:	9303      	str	r3, [sp, #12]
 8012596:	eddd 7a03 	vldr	s15, [sp, #12]
 801259a:	9b05      	ldr	r3, [sp, #20]
 801259c:	eef8 ba67 	vcvt.f32.u32	s23, s15
 80125a0:	ee7b baea 	vsub.f32	s23, s23, s21
 80125a4:	ee6b ba8b 	vmul.f32	s23, s23, s22
 80125a8:	fecb baa8 	vmaxnm.f32	s23, s23, s17
 80125ac:	fecb baca 	vminnm.f32	s23, s23, s20
 80125b0:	eef4 ba4a 	vcmp.f32	s23, s20
 80125b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125b8:	bf14      	ite	ne
 80125ba:	4698      	movne	r8, r3
 80125bc:	f04f 0800 	moveq.w	r8, #0
 80125c0:	2f00      	cmp	r7, #0
 80125c2:	d05c      	beq.n	801267e <forward_lite_upsample_bilinear_is8os8+0x15e>
 80125c4:	eebc 7aeb 	vcvt.u32.f32	s14, s23
 80125c8:	9b06      	ldr	r3, [sp, #24]
 80125ca:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 80125ce:	9722      	str	r7, [sp, #136]	@ 0x88
 80125d0:	9d04      	ldr	r5, [sp, #16]
 80125d2:	4647      	mov	r7, r8
 80125d4:	eef8 7a47 	vcvt.f32.u32	s15, s14
 80125d8:	ee17 6a10 	vmov	r6, s14
 80125dc:	ee38 ca6b 	vsub.f32	s24, s16, s23
 80125e0:	2400      	movs	r4, #0
 80125e2:	fb03 f606 	mul.w	r6, r3, r6
 80125e6:	f10d 0928 	add.w	r9, sp, #40	@ 0x28
 80125ea:	ee7b bae7 	vsub.f32	s23, s23, s15
 80125ee:	f8dd 8088 	ldr.w	r8, [sp, #136]	@ 0x88
 80125f2:	ee3c ca27 	vadd.f32	s24, s24, s15
 80125f6:	ee07 4a90 	vmov	s15, r4
 80125fa:	3401      	adds	r4, #1
 80125fc:	4629      	mov	r1, r5
 80125fe:	465a      	mov	r2, fp
 8012600:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012604:	f8cd 9000 	str.w	r9, [sp]
 8012608:	9709      	str	r7, [sp, #36]	@ 0x24
 801260a:	445d      	add	r5, fp
 801260c:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8012610:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8012614:	fec7 7aa8 	vmaxnm.f32	s15, s15, s17
 8012618:	fec7 7aec 	vminnm.f32	s15, s15, s25
 801261c:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 8012620:	eef4 7a6c 	vcmp.f32	s15, s25
 8012624:	ee38 7a67 	vsub.f32	s14, s16, s15
 8012628:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 801262c:	ee16 0a90 	vmov	r0, s13
 8012630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012634:	4430      	add	r0, r6
 8012636:	ee37 7a06 	vadd.f32	s14, s14, s12
 801263a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801263e:	bf14      	ite	ne
 8012640:	465b      	movne	r3, fp
 8012642:	2300      	moveq	r3, #0
 8012644:	fb0b a000 	mla	r0, fp, r0, sl
 8012648:	ee67 5a0c 	vmul.f32	s11, s14, s24
 801264c:	ee27 6a8c 	vmul.f32	s12, s15, s24
 8012650:	9308      	str	r3, [sp, #32]
 8012652:	ee27 7a2b 	vmul.f32	s14, s14, s23
 8012656:	ab08      	add	r3, sp, #32
 8012658:	ee67 7aab 	vmul.f32	s15, s15, s23
 801265c:	edcd 5a0a 	vstr	s11, [sp, #40]	@ 0x28
 8012660:	ed8d 6a0b 	vstr	s12, [sp, #44]	@ 0x2c
 8012664:	ed8d 7a0c 	vstr	s14, [sp, #48]	@ 0x30
 8012668:	edcd 7a0d 	vstr	s15, [sp, #52]	@ 0x34
 801266c:	f001 f948 	bl	8013900 <lite_bilinear_is8os8_kernel>
 8012670:	45a0      	cmp	r8, r4
 8012672:	d1c0      	bne.n	80125f6 <forward_lite_upsample_bilinear_is8os8+0xd6>
 8012674:	9b04      	ldr	r3, [sp, #16]
 8012676:	4647      	mov	r7, r8
 8012678:	9a07      	ldr	r2, [sp, #28]
 801267a:	4413      	add	r3, r2
 801267c:	9304      	str	r3, [sp, #16]
 801267e:	9b03      	ldr	r3, [sp, #12]
 8012680:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8012682:	3301      	adds	r3, #1
 8012684:	429a      	cmp	r2, r3
 8012686:	9303      	str	r3, [sp, #12]
 8012688:	d185      	bne.n	8012596 <forward_lite_upsample_bilinear_is8os8+0x76>
 801268a:	b00f      	add	sp, #60	@ 0x3c
 801268c:	ecbd 8b0a 	vpop	{d8-d12}
 8012690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012694:	eddf aa02 	vldr	s21, [pc, #8]	@ 80126a0 <forward_lite_upsample_bilinear_is8os8+0x180>
 8012698:	eeb0 9a6a 	vmov.f32	s18, s21
 801269c:	e75c      	b.n	8012558 <forward_lite_upsample_bilinear_is8os8+0x38>
 801269e:	bf00      	nop
 80126a0:	00000000 	.word	0x00000000

080126a4 <forward_lite_upsample_bilinear_iu8ou8>:
 80126a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126a8:	ed2d 8b0a 	vpush	{d8-d12}
 80126ac:	b08f      	sub	sp, #60	@ 0x3c
 80126ae:	4682      	mov	sl, r0
 80126b0:	9104      	str	r1, [sp, #16]
 80126b2:	f89d 1094 	ldrb.w	r1, [sp, #148]	@ 0x94
 80126b6:	9f22      	ldr	r7, [sp, #136]	@ 0x88
 80126b8:	f8dd b090 	ldr.w	fp, [sp, #144]	@ 0x90
 80126bc:	9206      	str	r2, [sp, #24]
 80126be:	2900      	cmp	r1, #0
 80126c0:	f000 80aa 	beq.w	8012818 <forward_lite_upsample_bilinear_iu8ou8+0x174>
 80126c4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80126c8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80126cc:	ee70 aae7 	vsub.f32	s21, s1, s15
 80126d0:	ee70 7a67 	vsub.f32	s15, s0, s15
 80126d4:	ee6a aa87 	vmul.f32	s21, s21, s14
 80126d8:	ee27 9a87 	vmul.f32	s18, s15, s14
 80126dc:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80126e0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80126e2:	ee87 baa0 	vdiv.f32	s22, s15, s1
 80126e6:	eec7 9a80 	vdiv.f32	s19, s15, s0
 80126ea:	2a00      	cmp	r2, #0
 80126ec:	f000 808f 	beq.w	801280e <forward_lite_upsample_bilinear_iu8ou8+0x16a>
 80126f0:	3b01      	subs	r3, #1
 80126f2:	eddf 8a4c 	vldr	s17, [pc, #304]	@ 8012824 <forward_lite_upsample_bilinear_iu8ou8+0x180>
 80126f6:	ee07 3a90 	vmov	s15, r3
 80126fa:	9b06      	ldr	r3, [sp, #24]
 80126fc:	1e5a      	subs	r2, r3, #1
 80126fe:	fb0b f303 	mul.w	r3, fp, r3
 8012702:	eeb8 aa67 	vcvt.f32.u32	s20, s15
 8012706:	ee0c 2a90 	vmov	s25, r2
 801270a:	9305      	str	r3, [sp, #20]
 801270c:	fb07 f30b 	mul.w	r3, r7, fp
 8012710:	eef8 ca6c 	vcvt.f32.u32	s25, s25
 8012714:	9307      	str	r3, [sp, #28]
 8012716:	2300      	movs	r3, #0
 8012718:	9303      	str	r3, [sp, #12]
 801271a:	eddd 7a03 	vldr	s15, [sp, #12]
 801271e:	9b05      	ldr	r3, [sp, #20]
 8012720:	eef8 ba67 	vcvt.f32.u32	s23, s15
 8012724:	ee7b baea 	vsub.f32	s23, s23, s21
 8012728:	ee6b ba8b 	vmul.f32	s23, s23, s22
 801272c:	fecb baa8 	vmaxnm.f32	s23, s23, s17
 8012730:	fecb baca 	vminnm.f32	s23, s23, s20
 8012734:	eef4 ba4a 	vcmp.f32	s23, s20
 8012738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801273c:	bf14      	ite	ne
 801273e:	4698      	movne	r8, r3
 8012740:	f04f 0800 	moveq.w	r8, #0
 8012744:	2f00      	cmp	r7, #0
 8012746:	d05c      	beq.n	8012802 <forward_lite_upsample_bilinear_iu8ou8+0x15e>
 8012748:	eebc 7aeb 	vcvt.u32.f32	s14, s23
 801274c:	9b06      	ldr	r3, [sp, #24]
 801274e:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 8012752:	9722      	str	r7, [sp, #136]	@ 0x88
 8012754:	9d04      	ldr	r5, [sp, #16]
 8012756:	4647      	mov	r7, r8
 8012758:	eef8 7a47 	vcvt.f32.u32	s15, s14
 801275c:	ee17 6a10 	vmov	r6, s14
 8012760:	ee38 ca6b 	vsub.f32	s24, s16, s23
 8012764:	2400      	movs	r4, #0
 8012766:	fb03 f606 	mul.w	r6, r3, r6
 801276a:	f10d 0928 	add.w	r9, sp, #40	@ 0x28
 801276e:	ee7b bae7 	vsub.f32	s23, s23, s15
 8012772:	f8dd 8088 	ldr.w	r8, [sp, #136]	@ 0x88
 8012776:	ee3c ca27 	vadd.f32	s24, s24, s15
 801277a:	ee07 4a90 	vmov	s15, r4
 801277e:	3401      	adds	r4, #1
 8012780:	4629      	mov	r1, r5
 8012782:	465a      	mov	r2, fp
 8012784:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012788:	f8cd 9000 	str.w	r9, [sp]
 801278c:	9709      	str	r7, [sp, #36]	@ 0x24
 801278e:	445d      	add	r5, fp
 8012790:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8012794:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8012798:	fec7 7aa8 	vmaxnm.f32	s15, s15, s17
 801279c:	fec7 7aec 	vminnm.f32	s15, s15, s25
 80127a0:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 80127a4:	eef4 7a6c 	vcmp.f32	s15, s25
 80127a8:	ee38 7a67 	vsub.f32	s14, s16, s15
 80127ac:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 80127b0:	ee16 0a90 	vmov	r0, s13
 80127b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127b8:	4430      	add	r0, r6
 80127ba:	ee37 7a06 	vadd.f32	s14, s14, s12
 80127be:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80127c2:	bf14      	ite	ne
 80127c4:	465b      	movne	r3, fp
 80127c6:	2300      	moveq	r3, #0
 80127c8:	fb0b a000 	mla	r0, fp, r0, sl
 80127cc:	ee67 5a0c 	vmul.f32	s11, s14, s24
 80127d0:	ee27 6a8c 	vmul.f32	s12, s15, s24
 80127d4:	9308      	str	r3, [sp, #32]
 80127d6:	ee27 7a2b 	vmul.f32	s14, s14, s23
 80127da:	ab08      	add	r3, sp, #32
 80127dc:	ee67 7aab 	vmul.f32	s15, s15, s23
 80127e0:	edcd 5a0a 	vstr	s11, [sp, #40]	@ 0x28
 80127e4:	ed8d 6a0b 	vstr	s12, [sp, #44]	@ 0x2c
 80127e8:	ed8d 7a0c 	vstr	s14, [sp, #48]	@ 0x30
 80127ec:	edcd 7a0d 	vstr	s15, [sp, #52]	@ 0x34
 80127f0:	f001 f8e4 	bl	80139bc <lite_bilinear_iu8ou8_kernel>
 80127f4:	45a0      	cmp	r8, r4
 80127f6:	d1c0      	bne.n	801277a <forward_lite_upsample_bilinear_iu8ou8+0xd6>
 80127f8:	9b04      	ldr	r3, [sp, #16]
 80127fa:	4647      	mov	r7, r8
 80127fc:	9a07      	ldr	r2, [sp, #28]
 80127fe:	4413      	add	r3, r2
 8012800:	9304      	str	r3, [sp, #16]
 8012802:	9b03      	ldr	r3, [sp, #12]
 8012804:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8012806:	3301      	adds	r3, #1
 8012808:	429a      	cmp	r2, r3
 801280a:	9303      	str	r3, [sp, #12]
 801280c:	d185      	bne.n	801271a <forward_lite_upsample_bilinear_iu8ou8+0x76>
 801280e:	b00f      	add	sp, #60	@ 0x3c
 8012810:	ecbd 8b0a 	vpop	{d8-d12}
 8012814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012818:	eddf aa02 	vldr	s21, [pc, #8]	@ 8012824 <forward_lite_upsample_bilinear_iu8ou8+0x180>
 801281c:	eeb0 9a6a 	vmov.f32	s18, s21
 8012820:	e75c      	b.n	80126dc <forward_lite_upsample_bilinear_iu8ou8+0x38>
 8012822:	bf00      	nop
 8012824:	00000000 	.word	0x00000000

08012828 <forward_lite_upsample_bilinear_is16os16>:
 8012828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801282c:	ed2d 8b0a 	vpush	{d8-d12}
 8012830:	b08f      	sub	sp, #60	@ 0x3c
 8012832:	4683      	mov	fp, r0
 8012834:	9104      	str	r1, [sp, #16]
 8012836:	f89d 1094 	ldrb.w	r1, [sp, #148]	@ 0x94
 801283a:	f8dd 8088 	ldr.w	r8, [sp, #136]	@ 0x88
 801283e:	f8dd a090 	ldr.w	sl, [sp, #144]	@ 0x90
 8012842:	9206      	str	r2, [sp, #24]
 8012844:	2900      	cmp	r1, #0
 8012846:	f000 80a7 	beq.w	8012998 <forward_lite_upsample_bilinear_is16os16+0x170>
 801284a:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801284e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8012852:	ee70 aae7 	vsub.f32	s21, s1, s15
 8012856:	ee70 7a67 	vsub.f32	s15, s0, s15
 801285a:	ee6a aa87 	vmul.f32	s21, s21, s14
 801285e:	ee27 9a87 	vmul.f32	s18, s15, s14
 8012862:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8012866:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8012868:	ee87 baa0 	vdiv.f32	s22, s15, s1
 801286c:	eec7 9a80 	vdiv.f32	s19, s15, s0
 8012870:	2a00      	cmp	r2, #0
 8012872:	f000 808c 	beq.w	801298e <forward_lite_upsample_bilinear_is16os16+0x166>
 8012876:	3b01      	subs	r3, #1
 8012878:	ea4f 064a 	mov.w	r6, sl, lsl #1
 801287c:	eddf 8a49 	vldr	s17, [pc, #292]	@ 80129a4 <forward_lite_upsample_bilinear_is16os16+0x17c>
 8012880:	ee07 3a90 	vmov	s15, r3
 8012884:	9b06      	ldr	r3, [sp, #24]
 8012886:	1e5a      	subs	r2, r3, #1
 8012888:	fb0a f303 	mul.w	r3, sl, r3
 801288c:	eeb8 aa67 	vcvt.f32.u32	s20, s15
 8012890:	ee0c 2a90 	vmov	s25, r2
 8012894:	9305      	str	r3, [sp, #20]
 8012896:	2300      	movs	r3, #0
 8012898:	eef8 ca6c 	vcvt.f32.u32	s25, s25
 801289c:	9303      	str	r3, [sp, #12]
 801289e:	fb06 f308 	mul.w	r3, r6, r8
 80128a2:	9307      	str	r3, [sp, #28]
 80128a4:	eddd 7a03 	vldr	s15, [sp, #12]
 80128a8:	9b05      	ldr	r3, [sp, #20]
 80128aa:	eef8 ba67 	vcvt.f32.u32	s23, s15
 80128ae:	ee7b baea 	vsub.f32	s23, s23, s21
 80128b2:	ee6b ba8b 	vmul.f32	s23, s23, s22
 80128b6:	fecb baa8 	vmaxnm.f32	s23, s23, s17
 80128ba:	fecb baca 	vminnm.f32	s23, s23, s20
 80128be:	eef4 ba4a 	vcmp.f32	s23, s20
 80128c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128c6:	bf14      	ite	ne
 80128c8:	4699      	movne	r9, r3
 80128ca:	f04f 0900 	moveq.w	r9, #0
 80128ce:	f1b8 0f00 	cmp.w	r8, #0
 80128d2:	d056      	beq.n	8012982 <forward_lite_upsample_bilinear_is16os16+0x15a>
 80128d4:	eebc 7aeb 	vcvt.u32.f32	s14, s23
 80128d8:	9b06      	ldr	r3, [sp, #24]
 80128da:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 80128de:	9d04      	ldr	r5, [sp, #16]
 80128e0:	2400      	movs	r4, #0
 80128e2:	eef8 7a47 	vcvt.f32.u32	s15, s14
 80128e6:	ee17 7a10 	vmov	r7, s14
 80128ea:	ee38 ca6b 	vsub.f32	s24, s16, s23
 80128ee:	fb03 f707 	mul.w	r7, r3, r7
 80128f2:	ee7b bae7 	vsub.f32	s23, s23, s15
 80128f6:	ee3c ca27 	vadd.f32	s24, s24, s15
 80128fa:	ee07 4a90 	vmov	s15, r4
 80128fe:	ab0a      	add	r3, sp, #40	@ 0x28
 8012900:	3401      	adds	r4, #1
 8012902:	4629      	mov	r1, r5
 8012904:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012908:	9300      	str	r3, [sp, #0]
 801290a:	4652      	mov	r2, sl
 801290c:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
 8012910:	4435      	add	r5, r6
 8012912:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8012916:	ee67 7aa9 	vmul.f32	s15, s15, s19
 801291a:	fec7 7aa8 	vmaxnm.f32	s15, s15, s17
 801291e:	fec7 7aec 	vminnm.f32	s15, s15, s25
 8012922:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 8012926:	eef4 7a6c 	vcmp.f32	s15, s25
 801292a:	ee38 7a67 	vsub.f32	s14, s16, s15
 801292e:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 8012932:	ee16 0a90 	vmov	r0, s13
 8012936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801293a:	4438      	add	r0, r7
 801293c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8012940:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8012944:	bf14      	ite	ne
 8012946:	4653      	movne	r3, sl
 8012948:	2300      	moveq	r3, #0
 801294a:	fb06 b000 	mla	r0, r6, r0, fp
 801294e:	ee67 5a0c 	vmul.f32	s11, s14, s24
 8012952:	ee27 6a8c 	vmul.f32	s12, s15, s24
 8012956:	9308      	str	r3, [sp, #32]
 8012958:	ee27 7a2b 	vmul.f32	s14, s14, s23
 801295c:	ab08      	add	r3, sp, #32
 801295e:	ee67 7aab 	vmul.f32	s15, s15, s23
 8012962:	edcd 5a0a 	vstr	s11, [sp, #40]	@ 0x28
 8012966:	ed8d 6a0b 	vstr	s12, [sp, #44]	@ 0x2c
 801296a:	ed8d 7a0c 	vstr	s14, [sp, #48]	@ 0x30
 801296e:	edcd 7a0d 	vstr	s15, [sp, #52]	@ 0x34
 8012972:	f001 f86d 	bl	8013a50 <lite_bilinear_is16os16_kernel>
 8012976:	45a0      	cmp	r8, r4
 8012978:	d1bf      	bne.n	80128fa <forward_lite_upsample_bilinear_is16os16+0xd2>
 801297a:	9b04      	ldr	r3, [sp, #16]
 801297c:	9a07      	ldr	r2, [sp, #28]
 801297e:	4413      	add	r3, r2
 8012980:	9304      	str	r3, [sp, #16]
 8012982:	9b03      	ldr	r3, [sp, #12]
 8012984:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8012986:	3301      	adds	r3, #1
 8012988:	429a      	cmp	r2, r3
 801298a:	9303      	str	r3, [sp, #12]
 801298c:	d18a      	bne.n	80128a4 <forward_lite_upsample_bilinear_is16os16+0x7c>
 801298e:	b00f      	add	sp, #60	@ 0x3c
 8012990:	ecbd 8b0a 	vpop	{d8-d12}
 8012994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012998:	eddf aa02 	vldr	s21, [pc, #8]	@ 80129a4 <forward_lite_upsample_bilinear_is16os16+0x17c>
 801299c:	eeb0 9a6a 	vmov.f32	s18, s21
 80129a0:	e75f      	b.n	8012862 <forward_lite_upsample_bilinear_is16os16+0x3a>
 80129a2:	bf00      	nop
 80129a4:	00000000 	.word	0x00000000

080129a8 <forward_lite_upsample_bilinear_iu16ou16>:
 80129a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129ac:	ed2d 8b0a 	vpush	{d8-d12}
 80129b0:	b08f      	sub	sp, #60	@ 0x3c
 80129b2:	4683      	mov	fp, r0
 80129b4:	9104      	str	r1, [sp, #16]
 80129b6:	f89d 1094 	ldrb.w	r1, [sp, #148]	@ 0x94
 80129ba:	f8dd 8088 	ldr.w	r8, [sp, #136]	@ 0x88
 80129be:	f8dd a090 	ldr.w	sl, [sp, #144]	@ 0x90
 80129c2:	9206      	str	r2, [sp, #24]
 80129c4:	2900      	cmp	r1, #0
 80129c6:	f000 80a7 	beq.w	8012b18 <forward_lite_upsample_bilinear_iu16ou16+0x170>
 80129ca:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80129ce:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80129d2:	ee70 aae7 	vsub.f32	s21, s1, s15
 80129d6:	ee70 7a67 	vsub.f32	s15, s0, s15
 80129da:	ee6a aa87 	vmul.f32	s21, s21, s14
 80129de:	ee27 9a87 	vmul.f32	s18, s15, s14
 80129e2:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80129e6:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80129e8:	ee87 baa0 	vdiv.f32	s22, s15, s1
 80129ec:	eec7 9a80 	vdiv.f32	s19, s15, s0
 80129f0:	2a00      	cmp	r2, #0
 80129f2:	f000 808c 	beq.w	8012b0e <forward_lite_upsample_bilinear_iu16ou16+0x166>
 80129f6:	3b01      	subs	r3, #1
 80129f8:	ea4f 064a 	mov.w	r6, sl, lsl #1
 80129fc:	eddf 8a49 	vldr	s17, [pc, #292]	@ 8012b24 <forward_lite_upsample_bilinear_iu16ou16+0x17c>
 8012a00:	ee07 3a90 	vmov	s15, r3
 8012a04:	9b06      	ldr	r3, [sp, #24]
 8012a06:	1e5a      	subs	r2, r3, #1
 8012a08:	fb0a f303 	mul.w	r3, sl, r3
 8012a0c:	eeb8 aa67 	vcvt.f32.u32	s20, s15
 8012a10:	ee0c 2a90 	vmov	s25, r2
 8012a14:	9305      	str	r3, [sp, #20]
 8012a16:	2300      	movs	r3, #0
 8012a18:	eef8 ca6c 	vcvt.f32.u32	s25, s25
 8012a1c:	9303      	str	r3, [sp, #12]
 8012a1e:	fb06 f308 	mul.w	r3, r6, r8
 8012a22:	9307      	str	r3, [sp, #28]
 8012a24:	eddd 7a03 	vldr	s15, [sp, #12]
 8012a28:	9b05      	ldr	r3, [sp, #20]
 8012a2a:	eef8 ba67 	vcvt.f32.u32	s23, s15
 8012a2e:	ee7b baea 	vsub.f32	s23, s23, s21
 8012a32:	ee6b ba8b 	vmul.f32	s23, s23, s22
 8012a36:	fecb baa8 	vmaxnm.f32	s23, s23, s17
 8012a3a:	fecb baca 	vminnm.f32	s23, s23, s20
 8012a3e:	eef4 ba4a 	vcmp.f32	s23, s20
 8012a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a46:	bf14      	ite	ne
 8012a48:	4699      	movne	r9, r3
 8012a4a:	f04f 0900 	moveq.w	r9, #0
 8012a4e:	f1b8 0f00 	cmp.w	r8, #0
 8012a52:	d056      	beq.n	8012b02 <forward_lite_upsample_bilinear_iu16ou16+0x15a>
 8012a54:	eebc 7aeb 	vcvt.u32.f32	s14, s23
 8012a58:	9b06      	ldr	r3, [sp, #24]
 8012a5a:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 8012a5e:	9d04      	ldr	r5, [sp, #16]
 8012a60:	2400      	movs	r4, #0
 8012a62:	eef8 7a47 	vcvt.f32.u32	s15, s14
 8012a66:	ee17 7a10 	vmov	r7, s14
 8012a6a:	ee38 ca6b 	vsub.f32	s24, s16, s23
 8012a6e:	fb03 f707 	mul.w	r7, r3, r7
 8012a72:	ee7b bae7 	vsub.f32	s23, s23, s15
 8012a76:	ee3c ca27 	vadd.f32	s24, s24, s15
 8012a7a:	ee07 4a90 	vmov	s15, r4
 8012a7e:	ab0a      	add	r3, sp, #40	@ 0x28
 8012a80:	3401      	adds	r4, #1
 8012a82:	4629      	mov	r1, r5
 8012a84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012a88:	9300      	str	r3, [sp, #0]
 8012a8a:	4652      	mov	r2, sl
 8012a8c:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
 8012a90:	4435      	add	r5, r6
 8012a92:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8012a96:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8012a9a:	fec7 7aa8 	vmaxnm.f32	s15, s15, s17
 8012a9e:	fec7 7aec 	vminnm.f32	s15, s15, s25
 8012aa2:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 8012aa6:	eef4 7a6c 	vcmp.f32	s15, s25
 8012aaa:	ee38 7a67 	vsub.f32	s14, s16, s15
 8012aae:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 8012ab2:	ee16 0a90 	vmov	r0, s13
 8012ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012aba:	4438      	add	r0, r7
 8012abc:	ee37 7a06 	vadd.f32	s14, s14, s12
 8012ac0:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8012ac4:	bf14      	ite	ne
 8012ac6:	4653      	movne	r3, sl
 8012ac8:	2300      	moveq	r3, #0
 8012aca:	fb06 b000 	mla	r0, r6, r0, fp
 8012ace:	ee67 5a0c 	vmul.f32	s11, s14, s24
 8012ad2:	ee27 6a8c 	vmul.f32	s12, s15, s24
 8012ad6:	9308      	str	r3, [sp, #32]
 8012ad8:	ee27 7a2b 	vmul.f32	s14, s14, s23
 8012adc:	ab08      	add	r3, sp, #32
 8012ade:	ee67 7aab 	vmul.f32	s15, s15, s23
 8012ae2:	edcd 5a0a 	vstr	s11, [sp, #40]	@ 0x28
 8012ae6:	ed8d 6a0b 	vstr	s12, [sp, #44]	@ 0x2c
 8012aea:	ed8d 7a0c 	vstr	s14, [sp, #48]	@ 0x30
 8012aee:	edcd 7a0d 	vstr	s15, [sp, #52]	@ 0x34
 8012af2:	f001 f803 	bl	8013afc <lite_bilinear_iu16ou16_kernel>
 8012af6:	45a0      	cmp	r8, r4
 8012af8:	d1bf      	bne.n	8012a7a <forward_lite_upsample_bilinear_iu16ou16+0xd2>
 8012afa:	9b04      	ldr	r3, [sp, #16]
 8012afc:	9a07      	ldr	r2, [sp, #28]
 8012afe:	4413      	add	r3, r2
 8012b00:	9304      	str	r3, [sp, #16]
 8012b02:	9b03      	ldr	r3, [sp, #12]
 8012b04:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8012b06:	3301      	adds	r3, #1
 8012b08:	429a      	cmp	r2, r3
 8012b0a:	9303      	str	r3, [sp, #12]
 8012b0c:	d18a      	bne.n	8012a24 <forward_lite_upsample_bilinear_iu16ou16+0x7c>
 8012b0e:	b00f      	add	sp, #60	@ 0x3c
 8012b10:	ecbd 8b0a 	vpop	{d8-d12}
 8012b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b18:	eddf aa02 	vldr	s21, [pc, #8]	@ 8012b24 <forward_lite_upsample_bilinear_iu16ou16+0x17c>
 8012b1c:	eeb0 9a6a 	vmov.f32	s18, s21
 8012b20:	e75f      	b.n	80129e2 <forward_lite_upsample_bilinear_iu16ou16+0x3a>
 8012b22:	bf00      	nop
 8012b24:	00000000 	.word	0x00000000

08012b28 <forward_lite_dense_if32of32wf32>:
 8012b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b2c:	ed2d 8b0c 	vpush	{d8-d13}
 8012b30:	e9d0 2305 	ldrd	r2, r3, [r0, #20]
 8012b34:	6801      	ldr	r1, [r0, #0]
 8012b36:	b083      	sub	sp, #12
 8012b38:	fb02 f303 	mul.w	r3, r2, r3
 8012b3c:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8012b40:	9100      	str	r1, [sp, #0]
 8012b42:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8012b46:	4299      	cmp	r1, r3
 8012b48:	9301      	str	r3, [sp, #4]
 8012b4a:	f080 811c 	bcs.w	8012d86 <forward_lite_dense_if32of32wf32+0x25e>
 8012b4e:	4607      	mov	r7, r0
 8012b50:	6904      	ldr	r4, [r0, #16]
 8012b52:	0096      	lsls	r6, r2, #2
 8012b54:	9b00      	ldr	r3, [sp, #0]
 8012b56:	68bd      	ldr	r5, [r7, #8]
 8012b58:	eb03 0e06 	add.w	lr, r3, r6
 8012b5c:	461e      	mov	r6, r3
 8012b5e:	459e      	cmp	lr, r3
 8012b60:	f240 8103 	bls.w	8012d6a <forward_lite_dense_if32of32wf32+0x242>
 8012b64:	f1a4 0c10 	sub.w	ip, r4, #16
 8012b68:	ea4f 0984 	mov.w	r9, r4, lsl #2
 8012b6c:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 8012b70:	f10c 0c01 	add.w	ip, ip, #1
 8012b74:	ea4f 1b8c 	mov.w	fp, ip, lsl #6
 8012b78:	eb08 1c8c 	add.w	ip, r8, ip, lsl #6
 8012b7c:	2c0f      	cmp	r4, #15
 8012b7e:	f240 8107 	bls.w	8012d90 <forward_lite_dense_if32of32wf32+0x268>
 8012b82:	f108 0240 	add.w	r2, r8, #64	@ 0x40
 8012b86:	f105 0340 	add.w	r3, r5, #64	@ 0x40
 8012b8a:	ed9f 7a95 	vldr	s14, [pc, #596]	@ 8012de0 <forward_lite_dense_if32of32wf32+0x2b8>
 8012b8e:	4621      	mov	r1, r4
 8012b90:	ed53 6a0f 	vldr	s13, [r3, #-60]	@ 0xffffffc4
 8012b94:	3910      	subs	r1, #16
 8012b96:	ed52 7a0f 	vldr	s15, [r2, #-60]	@ 0xffffffc4
 8012b9a:	3340      	adds	r3, #64	@ 0x40
 8012b9c:	ed52 4a10 	vldr	s9, [r2, #-64]	@ 0xffffffc0
 8012ba0:	290f      	cmp	r1, #15
 8012ba2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012ba6:	ed13 5a20 	vldr	s10, [r3, #-128]	@ 0xffffff80
 8012baa:	ed52 5a0e 	vldr	s11, [r2, #-56]	@ 0xffffffc8
 8012bae:	f102 0240 	add.w	r2, r2, #64	@ 0x40
 8012bb2:	ed13 6a1e 	vldr	s12, [r3, #-120]	@ 0xffffff88
 8012bb6:	eee4 7a85 	vfma.f32	s15, s9, s10
 8012bba:	ed53 6a1d 	vldr	s13, [r3, #-116]	@ 0xffffff8c
 8012bbe:	ed12 da1d 	vldr	s26, [r2, #-116]	@ 0xffffff8c
 8012bc2:	ed52 ca1c 	vldr	s25, [r2, #-112]	@ 0xffffff90
 8012bc6:	ed13 ca1c 	vldr	s24, [r3, #-112]	@ 0xffffff90
 8012bca:	ed52 ba1b 	vldr	s23, [r2, #-108]	@ 0xffffff94
 8012bce:	ed13 ba1b 	vldr	s22, [r3, #-108]	@ 0xffffff94
 8012bd2:	eee5 7a86 	vfma.f32	s15, s11, s12
 8012bd6:	ed52 aa1a 	vldr	s21, [r2, #-104]	@ 0xffffff98
 8012bda:	ed13 aa1a 	vldr	s20, [r3, #-104]	@ 0xffffff98
 8012bde:	ed52 9a19 	vldr	s19, [r2, #-100]	@ 0xffffff9c
 8012be2:	ed13 9a19 	vldr	s18, [r3, #-100]	@ 0xffffff9c
 8012be6:	ed52 8a18 	vldr	s17, [r2, #-96]	@ 0xffffffa0
 8012bea:	ed13 8a18 	vldr	s16, [r3, #-96]	@ 0xffffffa0
 8012bee:	eeed 7a26 	vfma.f32	s15, s26, s13
 8012bf2:	ed12 0a17 	vldr	s0, [r2, #-92]	@ 0xffffffa4
 8012bf6:	ed53 0a17 	vldr	s1, [r3, #-92]	@ 0xffffffa4
 8012bfa:	ed12 1a16 	vldr	s2, [r2, #-88]	@ 0xffffffa8
 8012bfe:	ed53 1a16 	vldr	s3, [r3, #-88]	@ 0xffffffa8
 8012c02:	ed12 2a15 	vldr	s4, [r2, #-84]	@ 0xffffffac
 8012c06:	ed53 2a15 	vldr	s5, [r3, #-84]	@ 0xffffffac
 8012c0a:	eeec 7a8c 	vfma.f32	s15, s25, s24
 8012c0e:	ed12 3a14 	vldr	s6, [r2, #-80]	@ 0xffffffb0
 8012c12:	ed53 3a14 	vldr	s7, [r3, #-80]	@ 0xffffffb0
 8012c16:	ed12 4a13 	vldr	s8, [r2, #-76]	@ 0xffffffb4
 8012c1a:	ed53 4a13 	vldr	s9, [r3, #-76]	@ 0xffffffb4
 8012c1e:	ed12 5a12 	vldr	s10, [r2, #-72]	@ 0xffffffb8
 8012c22:	ed53 5a12 	vldr	s11, [r3, #-72]	@ 0xffffffb8
 8012c26:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 8012c2a:	ed12 6a11 	vldr	s12, [r2, #-68]	@ 0xffffffbc
 8012c2e:	ed53 6a11 	vldr	s13, [r3, #-68]	@ 0xffffffbc
 8012c32:	eeea 7a8a 	vfma.f32	s15, s21, s20
 8012c36:	eee9 7a89 	vfma.f32	s15, s19, s18
 8012c3a:	eee8 7a88 	vfma.f32	s15, s17, s16
 8012c3e:	eee0 7a20 	vfma.f32	s15, s0, s1
 8012c42:	eee1 7a21 	vfma.f32	s15, s2, s3
 8012c46:	eee2 7a22 	vfma.f32	s15, s4, s5
 8012c4a:	eee3 7a23 	vfma.f32	s15, s6, s7
 8012c4e:	eee4 7a24 	vfma.f32	s15, s8, s9
 8012c52:	eee5 7a25 	vfma.f32	s15, s10, s11
 8012c56:	eee6 7a26 	vfma.f32	s15, s12, s13
 8012c5a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012c5e:	d897      	bhi.n	8012b90 <forward_lite_dense_if32of32wf32+0x68>
 8012c60:	eb05 020b 	add.w	r2, r5, fp
 8012c64:	f004 010f 	and.w	r1, r4, #15
 8012c68:	4663      	mov	r3, ip
 8012c6a:	2903      	cmp	r1, #3
 8012c6c:	d95f      	bls.n	8012d2e <forward_lite_dense_if32of32wf32+0x206>
 8012c6e:	edd2 6a01 	vldr	s13, [r2, #4]
 8012c72:	1f08      	subs	r0, r1, #4
 8012c74:	edd3 7a01 	vldr	s15, [r3, #4]
 8012c78:	ed93 4a00 	vldr	s8, [r3]
 8012c7c:	2803      	cmp	r0, #3
 8012c7e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012c82:	edd2 4a00 	vldr	s9, [r2]
 8012c86:	ed93 5a02 	vldr	s10, [r3, #8]
 8012c8a:	edd2 5a02 	vldr	s11, [r2, #8]
 8012c8e:	eee4 7a24 	vfma.f32	s15, s8, s9
 8012c92:	ed93 6a03 	vldr	s12, [r3, #12]
 8012c96:	edd2 6a03 	vldr	s13, [r2, #12]
 8012c9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012c9e:	eee5 7a25 	vfma.f32	s15, s10, s11
 8012ca2:	eee6 7a26 	vfma.f32	s15, s12, s13
 8012ca6:	eeb0 7a67 	vmov.f32	s14, s15
 8012caa:	d938      	bls.n	8012d1e <forward_lite_dense_if32of32wf32+0x1f6>
 8012cac:	edd2 6a05 	vldr	s13, [r2, #20]
 8012cb0:	f1a1 0a08 	sub.w	sl, r1, #8
 8012cb4:	edd3 7a05 	vldr	s15, [r3, #20]
 8012cb8:	ed93 4a04 	vldr	s8, [r3, #16]
 8012cbc:	f1ba 0f03 	cmp.w	sl, #3
 8012cc0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012cc4:	edd2 4a04 	vldr	s9, [r2, #16]
 8012cc8:	ed93 5a06 	vldr	s10, [r3, #24]
 8012ccc:	edd2 5a06 	vldr	s11, [r2, #24]
 8012cd0:	eee4 7a24 	vfma.f32	s15, s8, s9
 8012cd4:	ed93 6a07 	vldr	s12, [r3, #28]
 8012cd8:	edd2 6a07 	vldr	s13, [r2, #28]
 8012cdc:	eee5 7a25 	vfma.f32	s15, s10, s11
 8012ce0:	eee6 7a26 	vfma.f32	s15, s12, s13
 8012ce4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012ce8:	d919      	bls.n	8012d1e <forward_lite_dense_if32of32wf32+0x1f6>
 8012cea:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8012cee:	edd2 7a09 	vldr	s15, [r2, #36]	@ 0x24
 8012cf2:	ed92 4a08 	vldr	s8, [r2, #32]
 8012cf6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012cfa:	edd3 4a08 	vldr	s9, [r3, #32]
 8012cfe:	ed92 5a0a 	vldr	s10, [r2, #40]	@ 0x28
 8012d02:	edd3 5a0a 	vldr	s11, [r3, #40]	@ 0x28
 8012d06:	eee4 7a24 	vfma.f32	s15, s8, s9
 8012d0a:	ed92 6a0b 	vldr	s12, [r2, #44]	@ 0x2c
 8012d0e:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 8012d12:	eee5 7a25 	vfma.f32	s15, s10, s11
 8012d16:	eee6 7a26 	vfma.f32	s15, s12, s13
 8012d1a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012d1e:	0880      	lsrs	r0, r0, #2
 8012d20:	f001 0103 	and.w	r1, r1, #3
 8012d24:	3001      	adds	r0, #1
 8012d26:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 8012d2a:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8012d2e:	b1a9      	cbz	r1, 8012d5c <forward_lite_dense_if32of32wf32+0x234>
 8012d30:	edd3 6a00 	vldr	s13, [r3]
 8012d34:	3901      	subs	r1, #1
 8012d36:	edd2 7a00 	vldr	s15, [r2]
 8012d3a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012d3e:	d00d      	beq.n	8012d5c <forward_lite_dense_if32of32wf32+0x234>
 8012d40:	edd3 6a01 	vldr	s13, [r3, #4]
 8012d44:	2901      	cmp	r1, #1
 8012d46:	edd2 7a01 	vldr	s15, [r2, #4]
 8012d4a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012d4e:	d005      	beq.n	8012d5c <forward_lite_dense_if32of32wf32+0x234>
 8012d50:	edd2 6a02 	vldr	s13, [r2, #8]
 8012d54:	edd3 7a02 	vldr	s15, [r3, #8]
 8012d58:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012d5c:	eca6 7a01 	vstmia	r6!, {s14}
 8012d60:	45b6      	cmp	lr, r6
 8012d62:	444d      	add	r5, r9
 8012d64:	f63f af0a 	bhi.w	8012b7c <forward_lite_dense_if32of32wf32+0x54>
 8012d68:	697a      	ldr	r2, [r7, #20]
 8012d6a:	68fb      	ldr	r3, [r7, #12]
 8012d6c:	b9b3      	cbnz	r3, 8012d9c <forward_lite_dense_if32of32wf32+0x274>
 8012d6e:	9b00      	ldr	r3, [sp, #0]
 8012d70:	0096      	lsls	r6, r2, #2
 8012d72:	9901      	ldr	r1, [sp, #4]
 8012d74:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8012d78:	693c      	ldr	r4, [r7, #16]
 8012d7a:	4299      	cmp	r1, r3
 8012d7c:	eb08 0884 	add.w	r8, r8, r4, lsl #2
 8012d80:	9300      	str	r3, [sp, #0]
 8012d82:	f63f aee7 	bhi.w	8012b54 <forward_lite_dense_if32of32wf32+0x2c>
 8012d86:	b003      	add	sp, #12
 8012d88:	ecbd 8b0c 	vpop	{d8-d13}
 8012d8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d90:	4621      	mov	r1, r4
 8012d92:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8012de0 <forward_lite_dense_if32of32wf32+0x2b8>
 8012d96:	462a      	mov	r2, r5
 8012d98:	4643      	mov	r3, r8
 8012d9a:	e766      	b.n	8012c6a <forward_lite_dense_if32of32wf32+0x142>
 8012d9c:	2a00      	cmp	r2, #0
 8012d9e:	d0e6      	beq.n	8012d6e <forward_lite_dense_if32of32wf32+0x246>
 8012da0:	9a00      	ldr	r2, [sp, #0]
 8012da2:	ed93 7a00 	vldr	s14, [r3]
 8012da6:	edd2 7a00 	vldr	s15, [r2]
 8012daa:	4613      	mov	r3, r2
 8012dac:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012db0:	edc2 7a00 	vstr	s15, [r2]
 8012db4:	697a      	ldr	r2, [r7, #20]
 8012db6:	2a01      	cmp	r2, #1
 8012db8:	d9d9      	bls.n	8012d6e <forward_lite_dense_if32of32wf32+0x246>
 8012dba:	1d19      	adds	r1, r3, #4
 8012dbc:	2301      	movs	r3, #1
 8012dbe:	68fa      	ldr	r2, [r7, #12]
 8012dc0:	ed91 7a00 	vldr	s14, [r1]
 8012dc4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8012dc8:	3301      	adds	r3, #1
 8012dca:	edd2 7a00 	vldr	s15, [r2]
 8012dce:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012dd2:	ece1 7a01 	vstmia	r1!, {s15}
 8012dd6:	697a      	ldr	r2, [r7, #20]
 8012dd8:	429a      	cmp	r2, r3
 8012dda:	d8f0      	bhi.n	8012dbe <forward_lite_dense_if32of32wf32+0x296>
 8012ddc:	e7c7      	b.n	8012d6e <forward_lite_dense_if32of32wf32+0x246>
 8012dde:	bf00      	nop
 8012de0:	00000000 	.word	0x00000000

08012de4 <forward_lite_dense_if32of32wf32_lut4>:
 8012de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012de8:	b08d      	sub	sp, #52	@ 0x34
 8012dea:	4605      	mov	r5, r0
 8012dec:	460c      	mov	r4, r1
 8012dee:	9005      	str	r0, [sp, #20]
 8012df0:	4618      	mov	r0, r3
 8012df2:	920a      	str	r2, [sp, #40]	@ 0x28
 8012df4:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 8012df6:	e9dd 2319 	ldrd	r2, r3, [sp, #100]	@ 0x64
 8012dfa:	fb02 f303 	mul.w	r3, r2, r3
 8012dfe:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8012e02:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 8012e04:	9308      	str	r3, [sp, #32]
 8012e06:	b126      	cbz	r6, 8012e12 <forward_lite_dense_if32of32wf32_lut4+0x2e>
 8012e08:	2240      	movs	r2, #64	@ 0x40
 8012e0a:	4631      	mov	r1, r6
 8012e0c:	f000 fbe0 	bl	80135d0 <st_int8_copy>
 8012e10:	4630      	mov	r0, r6
 8012e12:	9b05      	ldr	r3, [sp, #20]
 8012e14:	9a08      	ldr	r2, [sp, #32]
 8012e16:	4293      	cmp	r3, r2
 8012e18:	f080 80f7 	bcs.w	801300a <forward_lite_dense_if32of32wf32_lut4+0x226>
 8012e1c:	08eb      	lsrs	r3, r5, #3
 8012e1e:	f005 0101 	and.w	r1, r5, #1
 8012e22:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8012e24:	f025 0801 	bic.w	r8, r5, #1
 8012e28:	eb04 1a43 	add.w	sl, r4, r3, lsl #5
 8012e2c:	9301      	str	r3, [sp, #4]
 8012e2e:	009b      	lsls	r3, r3, #2
 8012e30:	9102      	str	r1, [sp, #8]
 8012e32:	0092      	lsls	r2, r2, #2
 8012e34:	f104 0b20 	add.w	fp, r4, #32
 8012e38:	00a9      	lsls	r1, r5, #2
 8012e3a:	9304      	str	r3, [sp, #16]
 8012e3c:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 8012e40:	9b05      	ldr	r3, [sp, #20]
 8012e42:	9207      	str	r2, [sp, #28]
 8012e44:	9109      	str	r1, [sp, #36]	@ 0x24
 8012e46:	920b      	str	r2, [sp, #44]	@ 0x2c
 8012e48:	9a07      	ldr	r2, [sp, #28]
 8012e4a:	eb03 0902 	add.w	r9, r3, r2
 8012e4e:	f1ab 0220 	sub.w	r2, fp, #32
 8012e52:	4599      	cmp	r9, r3
 8012e54:	9206      	str	r2, [sp, #24]
 8012e56:	f240 80db 	bls.w	8013010 <forward_lite_dense_if32of32wf32_lut4+0x22c>
 8012e5a:	469e      	mov	lr, r3
 8012e5c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012e5e:	f108 33ff 	add.w	r3, r8, #4294967295
 8012e62:	9303      	str	r3, [sp, #12]
 8012e64:	9b01      	ldr	r3, [sp, #4]
 8012e66:	2b00      	cmp	r3, #0
 8012e68:	f000 80b4 	beq.w	8012fd4 <forward_lite_dense_if32of32wf32_lut4+0x1f0>
 8012e6c:	9b04      	ldr	r3, [sp, #16]
 8012e6e:	ed9f 7a71 	vldr	s14, [pc, #452]	@ 8013034 <forward_lite_dense_if32of32wf32_lut4+0x250>
 8012e72:	18d4      	adds	r4, r2, r3
 8012e74:	465b      	mov	r3, fp
 8012e76:	7816      	ldrb	r6, [r2, #0]
 8012e78:	3204      	adds	r2, #4
 8012e7a:	ed53 2a07 	vldr	s5, [r3, #-28]	@ 0xffffffe4
 8012e7e:	3320      	adds	r3, #32
 8012e80:	f006 070f 	and.w	r7, r6, #15
 8012e84:	0936      	lsrs	r6, r6, #4
 8012e86:	f812 5c03 	ldrb.w	r5, [r2, #-3]
 8012e8a:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8012e8e:	ed13 4a10 	vldr	s8, [r3, #-64]	@ 0xffffffc0
 8012e92:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8012e96:	ed53 3a0e 	vldr	s7, [r3, #-56]	@ 0xffffffc8
 8012e9a:	edd7 7a00 	vldr	s15, [r7]
 8012e9e:	ed96 3a00 	vldr	s6, [r6]
 8012ea2:	092e      	lsrs	r6, r5, #4
 8012ea4:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8012ea8:	f005 050f 	and.w	r5, r5, #15
 8012eac:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8012eb0:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 8012eb4:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8012eb8:	ed13 5a0d 	vldr	s10, [r3, #-52]	@ 0xffffffcc
 8012ebc:	eee3 7a04 	vfma.f32	s15, s6, s8
 8012ec0:	ed96 3a00 	vldr	s6, [r6]
 8012ec4:	ed95 4a00 	vldr	s8, [r5]
 8012ec8:	090d      	lsrs	r5, r1, #4
 8012eca:	ed53 4a0c 	vldr	s9, [r3, #-48]	@ 0xffffffd0
 8012ece:	f001 010f 	and.w	r1, r1, #15
 8012ed2:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8012ed6:	ed13 6a0b 	vldr	s12, [r3, #-44]	@ 0xffffffd4
 8012eda:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8012ede:	ed53 5a0a 	vldr	s11, [r3, #-40]	@ 0xffffffd8
 8012ee2:	ed53 6a09 	vldr	s13, [r3, #-36]	@ 0xffffffdc
 8012ee6:	eee3 7a23 	vfma.f32	s15, s6, s7
 8012eea:	eee4 7a05 	vfma.f32	s15, s8, s10
 8012eee:	ed95 4a00 	vldr	s8, [r5]
 8012ef2:	ed91 5a00 	vldr	s10, [r1]
 8012ef6:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8012efa:	42a2      	cmp	r2, r4
 8012efc:	ea4f 1511 	mov.w	r5, r1, lsr #4
 8012f00:	f001 010f 	and.w	r1, r1, #15
 8012f04:	eee4 7a24 	vfma.f32	s15, s8, s9
 8012f08:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8012f0c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8012f10:	eee5 7a06 	vfma.f32	s15, s10, s12
 8012f14:	ed95 5a00 	vldr	s10, [r5]
 8012f18:	ed91 6a00 	vldr	s12, [r1]
 8012f1c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8012f20:	eee6 7a26 	vfma.f32	s15, s12, s13
 8012f24:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012f28:	d1a5      	bne.n	8012e76 <forward_lite_dense_if32of32wf32_lut4+0x92>
 8012f2a:	4656      	mov	r6, sl
 8012f2c:	4546      	cmp	r6, r8
 8012f2e:	d257      	bcs.n	8012fe0 <forward_lite_dense_if32of32wf32_lut4+0x1fc>
 8012f30:	9b03      	ldr	r3, [sp, #12]
 8012f32:	f106 0208 	add.w	r2, r6, #8
 8012f36:	1e61      	subs	r1, r4, #1
 8012f38:	1b9d      	subs	r5, r3, r6
 8012f3a:	08ef      	lsrs	r7, r5, #3
 8012f3c:	eb04 05d5 	add.w	r5, r4, r5, lsr #3
 8012f40:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8012f44:	3208      	adds	r2, #8
 8012f46:	ed52 5a03 	vldr	s11, [r2, #-12]
 8012f4a:	f003 0c0f 	and.w	ip, r3, #15
 8012f4e:	091b      	lsrs	r3, r3, #4
 8012f50:	ed52 6a04 	vldr	s13, [r2, #-16]
 8012f54:	42a9      	cmp	r1, r5
 8012f56:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8012f5a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8012f5e:	eddc 7a00 	vldr	s15, [ip]
 8012f62:	ed93 6a00 	vldr	s12, [r3]
 8012f66:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8012f6a:	eee6 7a26 	vfma.f32	s15, s12, s13
 8012f6e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012f72:	d1e5      	bne.n	8012f40 <forward_lite_dense_if32of32wf32_lut4+0x15c>
 8012f74:	3701      	adds	r7, #1
 8012f76:	19e2      	adds	r2, r4, r7
 8012f78:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
 8012f7c:	9b02      	ldr	r3, [sp, #8]
 8012f7e:	b30b      	cbz	r3, 8012fc4 <forward_lite_dense_if32of32wf32_lut4+0x1e0>
 8012f80:	f812 3b01 	ldrb.w	r3, [r2], #1
 8012f84:	edd6 7a00 	vldr	s15, [r6]
 8012f88:	091b      	lsrs	r3, r3, #4
 8012f8a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8012f8e:	edd3 6a00 	vldr	s13, [r3]
 8012f92:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012f96:	ecae 7a01 	vstmia	lr!, {s14}
 8012f9a:	45f1      	cmp	r9, lr
 8012f9c:	f63f af62 	bhi.w	8012e64 <forward_lite_dense_if32of32wf32_lut4+0x80>
 8012fa0:	9b05      	ldr	r3, [sp, #20]
 8012fa2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8012fa4:	1899      	adds	r1, r3, r2
 8012fa6:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8012fa8:	b9e3      	cbnz	r3, 8012fe4 <forward_lite_dense_if32of32wf32_lut4+0x200>
 8012faa:	9b08      	ldr	r3, [sp, #32]
 8012fac:	428b      	cmp	r3, r1
 8012fae:	d92c      	bls.n	801300a <forward_lite_dense_if32of32wf32_lut4+0x226>
 8012fb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012fb2:	4498      	add	r8, r3
 8012fb4:	449a      	add	sl, r3
 8012fb6:	449b      	add	fp, r3
 8012fb8:	9b05      	ldr	r3, [sp, #20]
 8012fba:	4599      	cmp	r9, r3
 8012fbc:	d92a      	bls.n	8013014 <forward_lite_dense_if32of32wf32_lut4+0x230>
 8012fbe:	460b      	mov	r3, r1
 8012fc0:	9105      	str	r1, [sp, #20]
 8012fc2:	e741      	b.n	8012e48 <forward_lite_dense_if32of32wf32_lut4+0x64>
 8012fc4:	ecae 7a01 	vstmia	lr!, {s14}
 8012fc8:	45f1      	cmp	r9, lr
 8012fca:	d9e9      	bls.n	8012fa0 <forward_lite_dense_if32of32wf32_lut4+0x1bc>
 8012fcc:	9b01      	ldr	r3, [sp, #4]
 8012fce:	2b00      	cmp	r3, #0
 8012fd0:	f47f af4c 	bne.w	8012e6c <forward_lite_dense_if32of32wf32_lut4+0x88>
 8012fd4:	9e06      	ldr	r6, [sp, #24]
 8012fd6:	4614      	mov	r4, r2
 8012fd8:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8013034 <forward_lite_dense_if32of32wf32_lut4+0x250>
 8012fdc:	4546      	cmp	r6, r8
 8012fde:	d3a7      	bcc.n	8012f30 <forward_lite_dense_if32of32wf32_lut4+0x14c>
 8012fe0:	4622      	mov	r2, r4
 8012fe2:	e7cb      	b.n	8012f7c <forward_lite_dense_if32of32wf32_lut4+0x198>
 8012fe4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012fe6:	2b00      	cmp	r3, #0
 8012fe8:	d0df      	beq.n	8012faa <forward_lite_dense_if32of32wf32_lut4+0x1c6>
 8012fea:	9b07      	ldr	r3, [sp, #28]
 8012fec:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8012fee:	1acb      	subs	r3, r1, r3
 8012ff0:	edd3 7a00 	vldr	s15, [r3]
 8012ff4:	ecb2 7a01 	vldmia	r2!, {s14}
 8012ff8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012ffc:	ece3 7a01 	vstmia	r3!, {s15}
 8013000:	428b      	cmp	r3, r1
 8013002:	d1f5      	bne.n	8012ff0 <forward_lite_dense_if32of32wf32_lut4+0x20c>
 8013004:	9b08      	ldr	r3, [sp, #32]
 8013006:	428b      	cmp	r3, r1
 8013008:	d8d2      	bhi.n	8012fb0 <forward_lite_dense_if32of32wf32_lut4+0x1cc>
 801300a:	b00d      	add	sp, #52	@ 0x34
 801300c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013010:	4619      	mov	r1, r3
 8013012:	e7c8      	b.n	8012fa6 <forward_lite_dense_if32of32wf32_lut4+0x1c2>
 8013014:	9b07      	ldr	r3, [sp, #28]
 8013016:	1acb      	subs	r3, r1, r3
 8013018:	461a      	mov	r2, r3
 801301a:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 801301c:	ed92 7a00 	vldr	s14, [r2]
 8013020:	ecf0 7a01 	vldmia	r0!, {s15}
 8013024:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013028:	ece2 7a01 	vstmia	r2!, {s15}
 801302c:	428a      	cmp	r2, r1
 801302e:	d1f5      	bne.n	801301c <forward_lite_dense_if32of32wf32_lut4+0x238>
 8013030:	e7f2      	b.n	8013018 <forward_lite_dense_if32of32wf32_lut4+0x234>
 8013032:	bf00      	nop
 8013034:	00000000 	.word	0x00000000

08013038 <forward_lite_dense_if32of32wf32_lut8>:
 8013038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801303c:	b091      	sub	sp, #68	@ 0x44
 801303e:	4699      	mov	r9, r3
 8013040:	468b      	mov	fp, r1
 8013042:	920e      	str	r2, [sp, #56]	@ 0x38
 8013044:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 8013046:	f8dd 8070 	ldr.w	r8, [sp, #112]	@ 0x70
 801304a:	9003      	str	r0, [sp, #12]
 801304c:	e9dd 231d 	ldrd	r2, r3, [sp, #116]	@ 0x74
 8013050:	fb02 f303 	mul.w	r3, r2, r3
 8013054:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8013058:	930c      	str	r3, [sp, #48]	@ 0x30
 801305a:	b134      	cbz	r4, 801306a <forward_lite_dense_if32of32wf32_lut8+0x32>
 801305c:	4648      	mov	r0, r9
 801305e:	46a1      	mov	r9, r4
 8013060:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8013064:	4621      	mov	r1, r4
 8013066:	f000 fab3 	bl	80135d0 <st_int8_copy>
 801306a:	9b03      	ldr	r3, [sp, #12]
 801306c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801306e:	4293      	cmp	r3, r2
 8013070:	f080 8084 	bcs.w	801317c <forward_lite_dense_if32of32wf32_lut8+0x144>
 8013074:	4bb7      	ldr	r3, [pc, #732]	@ (8013354 <forward_lite_dense_if32of32wf32_lut8+0x31c>)
 8013076:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8013078:	4443      	add	r3, r8
 801307a:	9d03      	ldr	r5, [sp, #12]
 801307c:	0092      	lsls	r2, r2, #2
 801307e:	eddf 3ab6 	vldr	s7, [pc, #728]	@ 8013358 <forward_lite_dense_if32of32wf32_lut8+0x320>
 8013082:	009b      	lsls	r3, r3, #2
 8013084:	920b      	str	r2, [sp, #44]	@ 0x2c
 8013086:	f103 0120 	add.w	r1, r3, #32
 801308a:	930d      	str	r3, [sp, #52]	@ 0x34
 801308c:	445b      	add	r3, fp
 801308e:	920f      	str	r2, [sp, #60]	@ 0x3c
 8013090:	9105      	str	r1, [sp, #20]
 8013092:	9300      	str	r3, [sp, #0]
 8013094:	eb0b 0301 	add.w	r3, fp, r1
 8013098:	469a      	mov	sl, r3
 801309a:	469e      	mov	lr, r3
 801309c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801309e:	eb05 0c03 	add.w	ip, r5, r3
 80130a2:	45ac      	cmp	ip, r5
 80130a4:	d952      	bls.n	801314c <forward_lite_dense_if32of32wf32_lut8+0x114>
 80130a6:	9800      	ldr	r0, [sp, #0]
 80130a8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80130aa:	f100 011f 	add.w	r1, r0, #31
 80130ae:	eba0 020b 	sub.w	r2, r0, fp
 80130b2:	445b      	add	r3, fp
 80130b4:	9101      	str	r1, [sp, #4]
 80130b6:	eba1 010b 	sub.w	r1, r1, fp
 80130ba:	0952      	lsrs	r2, r2, #5
 80130bc:	9306      	str	r3, [sp, #24]
 80130be:	0889      	lsrs	r1, r1, #2
 80130c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80130c2:	3101      	adds	r1, #1
 80130c4:	9102      	str	r1, [sp, #8]
 80130c6:	1c51      	adds	r1, r2, #1
 80130c8:	00d2      	lsls	r2, r2, #3
 80130ca:	3210      	adds	r2, #16
 80130cc:	920a      	str	r2, [sp, #40]	@ 0x28
 80130ce:	00ca      	lsls	r2, r1, #3
 80130d0:	9208      	str	r2, [sp, #32]
 80130d2:	eb0b 1241 	add.w	r2, fp, r1, lsl #5
 80130d6:	9209      	str	r2, [sp, #36]	@ 0x24
 80130d8:	1f02      	subs	r2, r0, #4
 80130da:	9204      	str	r2, [sp, #16]
 80130dc:	f10b 0204 	add.w	r2, fp, #4
 80130e0:	9207      	str	r2, [sp, #28]
 80130e2:	f1b8 0f07 	cmp.w	r8, #7
 80130e6:	d84c      	bhi.n	8013182 <forward_lite_dense_if32of32wf32_lut8+0x14a>
 80130e8:	45d3      	cmp	fp, sl
 80130ea:	ed9f 7a9b 	vldr	s14, [pc, #620]	@ 8013358 <forward_lite_dense_if32of32wf32_lut8+0x320>
 80130ee:	d20f      	bcs.n	8013110 <forward_lite_dense_if32of32wf32_lut8+0xd8>
 80130f0:	4659      	mov	r1, fp
 80130f2:	4618      	mov	r0, r3
 80130f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80130f8:	ecf1 7a01 	vldmia	r1!, {s15}
 80130fc:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8013100:	4551      	cmp	r1, sl
 8013102:	edd2 6a00 	vldr	s13, [r2]
 8013106:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801310a:	d3f3      	bcc.n	80130f4 <forward_lite_dense_if32of32wf32_lut8+0xbc>
 801310c:	9a02      	ldr	r2, [sp, #8]
 801310e:	4413      	add	r3, r2
 8013110:	eca5 7a01 	vstmia	r5!, {s14}
 8013114:	45ac      	cmp	ip, r5
 8013116:	d8e4      	bhi.n	80130e2 <forward_lite_dense_if32of32wf32_lut8+0xaa>
 8013118:	9b03      	ldr	r3, [sp, #12]
 801311a:	46f3      	mov	fp, lr
 801311c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801311e:	1899      	adds	r1, r3, r2
 8013120:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8013122:	b9c3      	cbnz	r3, 8013156 <forward_lite_dense_if32of32wf32_lut8+0x11e>
 8013124:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013126:	428b      	cmp	r3, r1
 8013128:	d928      	bls.n	801317c <forward_lite_dense_if32of32wf32_lut8+0x144>
 801312a:	9b00      	ldr	r3, [sp, #0]
 801312c:	9a05      	ldr	r2, [sp, #20]
 801312e:	4413      	add	r3, r2
 8013130:	4492      	add	sl, r2
 8013132:	9300      	str	r3, [sp, #0]
 8013134:	9b03      	ldr	r3, [sp, #12]
 8013136:	459c      	cmp	ip, r3
 8013138:	f240 821e 	bls.w	8013578 <forward_lite_dense_if32of32wf32_lut8+0x540>
 801313c:	460d      	mov	r5, r1
 801313e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013140:	4496      	add	lr, r2
 8013142:	9103      	str	r1, [sp, #12]
 8013144:	eb05 0c03 	add.w	ip, r5, r3
 8013148:	45ac      	cmp	ip, r5
 801314a:	d8ac      	bhi.n	80130a6 <forward_lite_dense_if32of32wf32_lut8+0x6e>
 801314c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801314e:	4629      	mov	r1, r5
 8013150:	46f3      	mov	fp, lr
 8013152:	2b00      	cmp	r3, #0
 8013154:	d0e6      	beq.n	8013124 <forward_lite_dense_if32of32wf32_lut8+0xec>
 8013156:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8013158:	2b00      	cmp	r3, #0
 801315a:	d0e3      	beq.n	8013124 <forward_lite_dense_if32of32wf32_lut8+0xec>
 801315c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801315e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8013160:	1acb      	subs	r3, r1, r3
 8013162:	edd3 7a00 	vldr	s15, [r3]
 8013166:	ecb2 7a01 	vldmia	r2!, {s14}
 801316a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801316e:	ece3 7a01 	vstmia	r3!, {s15}
 8013172:	428b      	cmp	r3, r1
 8013174:	d1f5      	bne.n	8013162 <forward_lite_dense_if32of32wf32_lut8+0x12a>
 8013176:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013178:	428b      	cmp	r3, r1
 801317a:	d8d6      	bhi.n	801312a <forward_lite_dense_if32of32wf32_lut8+0xf2>
 801317c:	b011      	add	sp, #68	@ 0x44
 801317e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013182:	f003 0203 	and.w	r2, r3, #3
 8013186:	2a02      	cmp	r2, #2
 8013188:	f000 81ee 	beq.w	8013568 <forward_lite_dense_if32of32wf32_lut8+0x530>
 801318c:	2a03      	cmp	r2, #3
 801318e:	f000 80e5 	beq.w	801335c <forward_lite_dense_if32of32wf32_lut8+0x324>
 8013192:	2a01      	cmp	r2, #1
 8013194:	f000 81d2 	beq.w	801353c <forward_lite_dense_if32of32wf32_lut8+0x504>
 8013198:	9a06      	ldr	r2, [sp, #24]
 801319a:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 8013358 <forward_lite_dense_if32of32wf32_lut8+0x320>
 801319e:	4593      	cmp	fp, r2
 80131a0:	f200 81e8 	bhi.w	8013574 <forward_lite_dense_if32of32wf32_lut8+0x53c>
 80131a4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80131a6:	f103 0208 	add.w	r2, r3, #8
 80131aa:	f10b 0120 	add.w	r1, fp, #32
 80131ae:	18c4      	adds	r4, r0, r3
 80131b0:	f812 0c07 	ldrb.w	r0, [r2, #-7]
 80131b4:	3208      	adds	r2, #8
 80131b6:	ed51 2a07 	vldr	s5, [r1, #-28]	@ 0xffffffe4
 80131ba:	3120      	adds	r1, #32
 80131bc:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 80131c0:	ed11 3a10 	vldr	s6, [r1, #-64]	@ 0xffffffc0
 80131c4:	ed11 4a0e 	vldr	s8, [r1, #-56]	@ 0xffffffc8
 80131c8:	edd0 7a00 	vldr	s15, [r0]
 80131cc:	f812 0c10 	ldrb.w	r0, [r2, #-16]
 80131d0:	ee67 7aa2 	vmul.f32	s15, s15, s5
 80131d4:	ed51 4a0d 	vldr	s9, [r1, #-52]	@ 0xffffffcc
 80131d8:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 80131dc:	ed11 5a0c 	vldr	s10, [r1, #-48]	@ 0xffffffd0
 80131e0:	ed51 5a0b 	vldr	s11, [r1, #-44]	@ 0xffffffd4
 80131e4:	edd0 2a00 	vldr	s5, [r0]
 80131e8:	f812 0c0e 	ldrb.w	r0, [r2, #-14]
 80131ec:	eee2 7a83 	vfma.f32	s15, s5, s6
 80131f0:	ed11 6a0a 	vldr	s12, [r1, #-40]	@ 0xffffffd8
 80131f4:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 80131f8:	ed51 6a09 	vldr	s13, [r1, #-36]	@ 0xffffffdc
 80131fc:	ed90 3a00 	vldr	s6, [r0]
 8013200:	f812 0c0d 	ldrb.w	r0, [r2, #-13]
 8013204:	eee3 7a04 	vfma.f32	s15, s6, s8
 8013208:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 801320c:	ed90 4a00 	vldr	s8, [r0]
 8013210:	f812 0c0c 	ldrb.w	r0, [r2, #-12]
 8013214:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8013218:	eee4 7a24 	vfma.f32	s15, s8, s9
 801321c:	edd0 4a00 	vldr	s9, [r0]
 8013220:	f812 0c0b 	ldrb.w	r0, [r2, #-11]
 8013224:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8013228:	eee4 7a85 	vfma.f32	s15, s9, s10
 801322c:	ed90 5a00 	vldr	s10, [r0]
 8013230:	f812 0c0a 	ldrb.w	r0, [r2, #-10]
 8013234:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8013238:	eee5 7a25 	vfma.f32	s15, s10, s11
 801323c:	edd0 5a00 	vldr	s11, [r0]
 8013240:	f812 0c09 	ldrb.w	r0, [r2, #-9]
 8013244:	42a2      	cmp	r2, r4
 8013246:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 801324a:	eee5 7a86 	vfma.f32	s15, s11, s12
 801324e:	ed90 6a00 	vldr	s12, [r0]
 8013252:	eee6 7a26 	vfma.f32	s15, s12, s13
 8013256:	ee37 7a27 	vadd.f32	s14, s14, s15
 801325a:	d1a9      	bne.n	80131b0 <forward_lite_dense_if32of32wf32_lut8+0x178>
 801325c:	9a08      	ldr	r2, [sp, #32]
 801325e:	4413      	add	r3, r2
 8013260:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013262:	4572      	cmp	r2, lr
 8013264:	f4bf af54 	bcs.w	8013110 <forward_lite_dense_if32of32wf32_lut8+0xd8>
 8013268:	7819      	ldrb	r1, [r3, #0]
 801326a:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 801326e:	edd1 7a00 	vldr	s15, [r1]
 8013272:	4611      	mov	r1, r2
 8013274:	ecf1 6a01 	vldmia	r1!, {s13}
 8013278:	458a      	cmp	sl, r1
 801327a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801327e:	d963      	bls.n	8013348 <forward_lite_dense_if32of32wf32_lut8+0x310>
 8013280:	7859      	ldrb	r1, [r3, #1]
 8013282:	edd2 6a01 	vldr	s13, [r2, #4]
 8013286:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 801328a:	edd1 7a00 	vldr	s15, [r1]
 801328e:	f102 0108 	add.w	r1, r2, #8
 8013292:	458a      	cmp	sl, r1
 8013294:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013298:	d956      	bls.n	8013348 <forward_lite_dense_if32of32wf32_lut8+0x310>
 801329a:	7899      	ldrb	r1, [r3, #2]
 801329c:	edd2 6a02 	vldr	s13, [r2, #8]
 80132a0:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 80132a4:	edd1 7a00 	vldr	s15, [r1]
 80132a8:	f102 010c 	add.w	r1, r2, #12
 80132ac:	458a      	cmp	sl, r1
 80132ae:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80132b2:	d949      	bls.n	8013348 <forward_lite_dense_if32of32wf32_lut8+0x310>
 80132b4:	78d9      	ldrb	r1, [r3, #3]
 80132b6:	edd2 6a03 	vldr	s13, [r2, #12]
 80132ba:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 80132be:	edd1 7a00 	vldr	s15, [r1]
 80132c2:	f102 0110 	add.w	r1, r2, #16
 80132c6:	458a      	cmp	sl, r1
 80132c8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80132cc:	d93c      	bls.n	8013348 <forward_lite_dense_if32of32wf32_lut8+0x310>
 80132ce:	7919      	ldrb	r1, [r3, #4]
 80132d0:	edd2 6a04 	vldr	s13, [r2, #16]
 80132d4:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 80132d8:	edd1 7a00 	vldr	s15, [r1]
 80132dc:	f102 0114 	add.w	r1, r2, #20
 80132e0:	458a      	cmp	sl, r1
 80132e2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80132e6:	d92f      	bls.n	8013348 <forward_lite_dense_if32of32wf32_lut8+0x310>
 80132e8:	7959      	ldrb	r1, [r3, #5]
 80132ea:	edd2 6a05 	vldr	s13, [r2, #20]
 80132ee:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 80132f2:	edd1 7a00 	vldr	s15, [r1]
 80132f6:	f102 0118 	add.w	r1, r2, #24
 80132fa:	458a      	cmp	sl, r1
 80132fc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013300:	d922      	bls.n	8013348 <forward_lite_dense_if32of32wf32_lut8+0x310>
 8013302:	7999      	ldrb	r1, [r3, #6]
 8013304:	edd2 6a06 	vldr	s13, [r2, #24]
 8013308:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 801330c:	edd1 7a00 	vldr	s15, [r1]
 8013310:	f102 011c 	add.w	r1, r2, #28
 8013314:	458a      	cmp	sl, r1
 8013316:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801331a:	d915      	bls.n	8013348 <forward_lite_dense_if32of32wf32_lut8+0x310>
 801331c:	79d9      	ldrb	r1, [r3, #7]
 801331e:	edd2 6a07 	vldr	s13, [r2, #28]
 8013322:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8013326:	edd1 7a00 	vldr	s15, [r1]
 801332a:	f102 0120 	add.w	r1, r2, #32
 801332e:	458a      	cmp	sl, r1
 8013330:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013334:	d908      	bls.n	8013348 <forward_lite_dense_if32of32wf32_lut8+0x310>
 8013336:	7a19      	ldrb	r1, [r3, #8]
 8013338:	edd2 7a08 	vldr	s15, [r2, #32]
 801333c:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8013340:	edd1 6a00 	vldr	s13, [r1]
 8013344:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013348:	9901      	ldr	r1, [sp, #4]
 801334a:	1a8a      	subs	r2, r1, r2
 801334c:	eb03 0292 	add.w	r2, r3, r2, lsr #2
 8013350:	1c53      	adds	r3, r2, #1
 8013352:	e6dd      	b.n	8013110 <forward_lite_dense_if32of32wf32_lut8+0xd8>
 8013354:	3ffffff8 	.word	0x3ffffff8
 8013358:	00000000 	.word	0x00000000
 801335c:	eeb0 7a63 	vmov.f32	s14, s7
 8013360:	465a      	mov	r2, fp
 8013362:	461f      	mov	r7, r3
 8013364:	4610      	mov	r0, r2
 8013366:	f817 1b01 	ldrb.w	r1, [r7], #1
 801336a:	ecf0 7a01 	vldmia	r0!, {s15}
 801336e:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8013372:	edd1 6a00 	vldr	s13, [r1]
 8013376:	9900      	ldr	r1, [sp, #0]
 8013378:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801337c:	4288      	cmp	r0, r1
 801337e:	f200 80f7 	bhi.w	8013570 <forward_lite_dense_if32of32wf32_lut8+0x538>
 8013382:	9904      	ldr	r1, [sp, #16]
 8013384:	f103 0411 	add.w	r4, r3, #17
 8013388:	3309      	adds	r3, #9
 801338a:	1a8e      	subs	r6, r1, r2
 801338c:	3224      	adds	r2, #36	@ 0x24
 801338e:	0976      	lsrs	r6, r6, #5
 8013390:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8013394:	f813 1c07 	ldrb.w	r1, [r3, #-7]
 8013398:	3308      	adds	r3, #8
 801339a:	ed52 2a07 	vldr	s5, [r2, #-28]	@ 0xffffffe4
 801339e:	3220      	adds	r2, #32
 80133a0:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 80133a4:	ed12 3a10 	vldr	s6, [r2, #-64]	@ 0xffffffc0
 80133a8:	ed12 4a0e 	vldr	s8, [r2, #-56]	@ 0xffffffc8
 80133ac:	edd1 7a00 	vldr	s15, [r1]
 80133b0:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 80133b4:	ee67 7aa2 	vmul.f32	s15, s15, s5
 80133b8:	ed52 4a0d 	vldr	s9, [r2, #-52]	@ 0xffffffcc
 80133bc:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 80133c0:	ed12 5a0c 	vldr	s10, [r2, #-48]	@ 0xffffffd0
 80133c4:	ed52 5a0b 	vldr	s11, [r2, #-44]	@ 0xffffffd4
 80133c8:	edd1 2a00 	vldr	s5, [r1]
 80133cc:	f813 1c0e 	ldrb.w	r1, [r3, #-14]
 80133d0:	eee2 7a83 	vfma.f32	s15, s5, s6
 80133d4:	ed12 6a0a 	vldr	s12, [r2, #-40]	@ 0xffffffd8
 80133d8:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 80133dc:	ed52 6a09 	vldr	s13, [r2, #-36]	@ 0xffffffdc
 80133e0:	ed91 3a00 	vldr	s6, [r1]
 80133e4:	f813 1c0d 	ldrb.w	r1, [r3, #-13]
 80133e8:	eee3 7a04 	vfma.f32	s15, s6, s8
 80133ec:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 80133f0:	ed91 4a00 	vldr	s8, [r1]
 80133f4:	f813 1c0c 	ldrb.w	r1, [r3, #-12]
 80133f8:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 80133fc:	eee4 7a24 	vfma.f32	s15, s8, s9
 8013400:	edd1 4a00 	vldr	s9, [r1]
 8013404:	f813 1c0b 	ldrb.w	r1, [r3, #-11]
 8013408:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 801340c:	eee4 7a85 	vfma.f32	s15, s9, s10
 8013410:	ed91 5a00 	vldr	s10, [r1]
 8013414:	f813 1c0a 	ldrb.w	r1, [r3, #-10]
 8013418:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 801341c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8013420:	edd1 5a00 	vldr	s11, [r1]
 8013424:	f813 1c09 	ldrb.w	r1, [r3, #-9]
 8013428:	42a3      	cmp	r3, r4
 801342a:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 801342e:	eee5 7a86 	vfma.f32	s15, s11, s12
 8013432:	ed91 6a00 	vldr	s12, [r1]
 8013436:	eee6 7a26 	vfma.f32	s15, s12, s13
 801343a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801343e:	d1a9      	bne.n	8013394 <forward_lite_dense_if32of32wf32_lut8+0x35c>
 8013440:	3601      	adds	r6, #1
 8013442:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
 8013446:	eb00 1046 	add.w	r0, r0, r6, lsl #5
 801344a:	4550      	cmp	r0, sl
 801344c:	f4bf ae60 	bcs.w	8013110 <forward_lite_dense_if32of32wf32_lut8+0xd8>
 8013450:	781a      	ldrb	r2, [r3, #0]
 8013452:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8013456:	edd2 7a00 	vldr	s15, [r2]
 801345a:	4602      	mov	r2, r0
 801345c:	ecf2 6a01 	vldmia	r2!, {s13}
 8013460:	4592      	cmp	sl, r2
 8013462:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013466:	d963      	bls.n	8013530 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 8013468:	785a      	ldrb	r2, [r3, #1]
 801346a:	edd0 6a01 	vldr	s13, [r0, #4]
 801346e:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8013472:	edd2 7a00 	vldr	s15, [r2]
 8013476:	f100 0208 	add.w	r2, r0, #8
 801347a:	4592      	cmp	sl, r2
 801347c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013480:	d956      	bls.n	8013530 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 8013482:	789a      	ldrb	r2, [r3, #2]
 8013484:	edd0 6a02 	vldr	s13, [r0, #8]
 8013488:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 801348c:	edd2 7a00 	vldr	s15, [r2]
 8013490:	f100 020c 	add.w	r2, r0, #12
 8013494:	4592      	cmp	sl, r2
 8013496:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801349a:	d949      	bls.n	8013530 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 801349c:	78da      	ldrb	r2, [r3, #3]
 801349e:	edd0 6a03 	vldr	s13, [r0, #12]
 80134a2:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 80134a6:	edd2 7a00 	vldr	s15, [r2]
 80134aa:	f100 0210 	add.w	r2, r0, #16
 80134ae:	4592      	cmp	sl, r2
 80134b0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80134b4:	d93c      	bls.n	8013530 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 80134b6:	791a      	ldrb	r2, [r3, #4]
 80134b8:	edd0 6a04 	vldr	s13, [r0, #16]
 80134bc:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 80134c0:	edd2 7a00 	vldr	s15, [r2]
 80134c4:	f100 0214 	add.w	r2, r0, #20
 80134c8:	4592      	cmp	sl, r2
 80134ca:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80134ce:	d92f      	bls.n	8013530 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 80134d0:	795a      	ldrb	r2, [r3, #5]
 80134d2:	edd0 6a05 	vldr	s13, [r0, #20]
 80134d6:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 80134da:	edd2 7a00 	vldr	s15, [r2]
 80134de:	f100 0218 	add.w	r2, r0, #24
 80134e2:	4596      	cmp	lr, r2
 80134e4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80134e8:	d922      	bls.n	8013530 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 80134ea:	799a      	ldrb	r2, [r3, #6]
 80134ec:	edd0 6a06 	vldr	s13, [r0, #24]
 80134f0:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 80134f4:	edd2 7a00 	vldr	s15, [r2]
 80134f8:	f100 021c 	add.w	r2, r0, #28
 80134fc:	4596      	cmp	lr, r2
 80134fe:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013502:	d915      	bls.n	8013530 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 8013504:	79da      	ldrb	r2, [r3, #7]
 8013506:	edd0 6a07 	vldr	s13, [r0, #28]
 801350a:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 801350e:	edd2 7a00 	vldr	s15, [r2]
 8013512:	f100 0220 	add.w	r2, r0, #32
 8013516:	4596      	cmp	lr, r2
 8013518:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801351c:	d908      	bls.n	8013530 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 801351e:	7a1a      	ldrb	r2, [r3, #8]
 8013520:	edd0 7a08 	vldr	s15, [r0, #32]
 8013524:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8013528:	edd2 6a00 	vldr	s13, [r2]
 801352c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013530:	9a01      	ldr	r2, [sp, #4]
 8013532:	1a10      	subs	r0, r2, r0
 8013534:	eb03 0090 	add.w	r0, r3, r0, lsr #2
 8013538:	1c43      	adds	r3, r0, #1
 801353a:	e5e9      	b.n	8013110 <forward_lite_dense_if32of32wf32_lut8+0xd8>
 801353c:	f813 1b01 	ldrb.w	r1, [r3], #1
 8013540:	eddb 7a00 	vldr	s15, [fp]
 8013544:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8013548:	9a07      	ldr	r2, [sp, #28]
 801354a:	ed91 7a00 	vldr	s14, [r1]
 801354e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013552:	f813 1b01 	ldrb.w	r1, [r3], #1
 8013556:	ecf2 7a01 	vldmia	r2!, {s15}
 801355a:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 801355e:	edd1 6a00 	vldr	s13, [r1]
 8013562:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013566:	e6fc      	b.n	8013362 <forward_lite_dense_if32of32wf32_lut8+0x32a>
 8013568:	eeb0 7a63 	vmov.f32	s14, s7
 801356c:	465a      	mov	r2, fp
 801356e:	e7f0      	b.n	8013552 <forward_lite_dense_if32of32wf32_lut8+0x51a>
 8013570:	463b      	mov	r3, r7
 8013572:	e76a      	b.n	801344a <forward_lite_dense_if32of32wf32_lut8+0x412>
 8013574:	465a      	mov	r2, fp
 8013576:	e674      	b.n	8013262 <forward_lite_dense_if32of32wf32_lut8+0x22a>
 8013578:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801357a:	1acb      	subs	r3, r1, r3
 801357c:	461a      	mov	r2, r3
 801357e:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8013580:	ed92 7a00 	vldr	s14, [r2]
 8013584:	ecf0 7a01 	vldmia	r0!, {s15}
 8013588:	ee77 7a87 	vadd.f32	s15, s15, s14
 801358c:	ece2 7a01 	vstmia	r2!, {s15}
 8013590:	4291      	cmp	r1, r2
 8013592:	d1f5      	bne.n	8013580 <forward_lite_dense_if32of32wf32_lut8+0x548>
 8013594:	e7f2      	b.n	801357c <forward_lite_dense_if32of32wf32_lut8+0x544>
 8013596:	bf00      	nop

08013598 <forward_lite_nl_relu_if32of32>:
 8013598:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801359c:	4413      	add	r3, r2
 801359e:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 80135a2:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 80135a6:	4291      	cmp	r1, r2
 80135a8:	d80f      	bhi.n	80135ca <forward_lite_nl_relu_if32of32+0x32>
 80135aa:	f10c 0104 	add.w	r1, ip, #4
 80135ae:	1d13      	adds	r3, r2, #4
 80135b0:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 80135cc <forward_lite_nl_relu_if32of32+0x34>
 80135b4:	eba2 020c 	sub.w	r2, r2, ip
 80135b8:	4408      	add	r0, r1
 80135ba:	ed73 7a01 	vldmdb	r3!, {s15}
 80135be:	4293      	cmp	r3, r2
 80135c0:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 80135c4:	ed60 7a01 	vstmdb	r0!, {s15}
 80135c8:	d1f7      	bne.n	80135ba <forward_lite_nl_relu_if32of32+0x22>
 80135ca:	4770      	bx	lr
 80135cc:	00000000 	.word	0x00000000

080135d0 <st_int8_copy>:
 80135d0:	4288      	cmp	r0, r1
 80135d2:	d023      	beq.n	801361c <st_int8_copy+0x4c>
 80135d4:	b312      	cbz	r2, 801361c <st_int8_copy+0x4c>
 80135d6:	4288      	cmp	r0, r1
 80135d8:	eb00 0302 	add.w	r3, r0, r2
 80135dc:	d20b      	bcs.n	80135f6 <st_int8_copy+0x26>
 80135de:	4299      	cmp	r1, r3
 80135e0:	d209      	bcs.n	80135f6 <st_int8_copy+0x26>
 80135e2:	4298      	cmp	r0, r3
 80135e4:	440a      	add	r2, r1
 80135e6:	d219      	bcs.n	801361c <st_int8_copy+0x4c>
 80135e8:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 80135ec:	4298      	cmp	r0, r3
 80135ee:	f802 1d01 	strb.w	r1, [r2, #-1]!
 80135f2:	d1f9      	bne.n	80135e8 <st_int8_copy+0x18>
 80135f4:	4770      	bx	lr
 80135f6:	2a03      	cmp	r2, #3
 80135f8:	d811      	bhi.n	801361e <st_int8_copy+0x4e>
 80135fa:	f810 3b01 	ldrb.w	r3, [r0], #1
 80135fe:	f801 3b01 	strb.w	r3, [r1], #1
 8013602:	2a01      	cmp	r2, #1
 8013604:	d00a      	beq.n	801361c <st_int8_copy+0x4c>
 8013606:	f810 3b01 	ldrb.w	r3, [r0], #1
 801360a:	f801 3b01 	strb.w	r3, [r1], #1
 801360e:	2a02      	cmp	r2, #2
 8013610:	d004      	beq.n	801361c <st_int8_copy+0x4c>
 8013612:	f810 3b01 	ldrb.w	r3, [r0], #1
 8013616:	f801 3b01 	strb.w	r3, [r1], #1
 801361a:	4770      	bx	lr
 801361c:	4770      	bx	lr
 801361e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013622:	f001 0403 	and.w	r4, r1, #3
 8013626:	f000 0e03 	and.w	lr, r0, #3
 801362a:	f1c4 0304 	rsb	r3, r4, #4
 801362e:	eba2 0c03 	sub.w	ip, r2, r3
 8013632:	f810 3b01 	ldrb.w	r3, [r0], #1
 8013636:	f801 3b01 	strb.w	r3, [r1], #1
 801363a:	2c03      	cmp	r4, #3
 801363c:	f1c4 0202 	rsb	r2, r4, #2
 8013640:	d00e      	beq.n	8013660 <st_int8_copy+0x90>
 8013642:	f810 3b01 	ldrb.w	r3, [r0], #1
 8013646:	f801 3b01 	strb.w	r3, [r1], #1
 801364a:	2a00      	cmp	r2, #0
 801364c:	dd08      	ble.n	8013660 <st_int8_copy+0x90>
 801364e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8013652:	f801 3b01 	strb.w	r3, [r1], #1
 8013656:	b91c      	cbnz	r4, 8013660 <st_int8_copy+0x90>
 8013658:	f810 3b01 	ldrb.w	r3, [r0], #1
 801365c:	f801 3b01 	strb.w	r3, [r1], #1
 8013660:	4574      	cmp	r4, lr
 8013662:	d02b      	beq.n	80136bc <st_int8_copy+0xec>
 8013664:	ea4f 131c 	mov.w	r3, ip, lsr #4
 8013668:	1e5a      	subs	r2, r3, #1
 801366a:	b153      	cbz	r3, 8013682 <st_int8_copy+0xb2>
 801366c:	f850 3b04 	ldr.w	r3, [r0], #4
 8013670:	f850 4b04 	ldr.w	r4, [r0], #4
 8013674:	f850 5b04 	ldr.w	r5, [r0], #4
 8013678:	f850 6b04 	ldr.w	r6, [r0], #4
 801367c:	c178      	stmia	r1!, {r3, r4, r5, r6}
 801367e:	3a01      	subs	r2, #1
 8013680:	d2f4      	bcs.n	801366c <st_int8_copy+0x9c>
 8013682:	f01c 0f08 	tst.w	ip, #8
 8013686:	d004      	beq.n	8013692 <st_int8_copy+0xc2>
 8013688:	f850 3b04 	ldr.w	r3, [r0], #4
 801368c:	f850 4b04 	ldr.w	r4, [r0], #4
 8013690:	c118      	stmia	r1!, {r3, r4}
 8013692:	f01c 0f04 	tst.w	ip, #4
 8013696:	d003      	beq.n	80136a0 <st_int8_copy+0xd0>
 8013698:	f850 3b04 	ldr.w	r3, [r0], #4
 801369c:	f841 3b04 	str.w	r3, [r1], #4
 80136a0:	f01c 0f02 	tst.w	ip, #2
 80136a4:	d003      	beq.n	80136ae <st_int8_copy+0xde>
 80136a6:	f830 3b02 	ldrh.w	r3, [r0], #2
 80136aa:	f821 3b02 	strh.w	r3, [r1], #2
 80136ae:	f01c 0f01 	tst.w	ip, #1
 80136b2:	d001      	beq.n	80136b8 <st_int8_copy+0xe8>
 80136b4:	7803      	ldrb	r3, [r0, #0]
 80136b6:	700b      	strb	r3, [r1, #0]
 80136b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80136bc:	ea4f 139c 	mov.w	r3, ip, lsr #6
 80136c0:	f103 39ff 	add.w	r9, r3, #4294967295
 80136c4:	b183      	cbz	r3, 80136e8 <st_int8_copy+0x118>
 80136c6:	4688      	mov	r8, r1
 80136c8:	4686      	mov	lr, r0
 80136ca:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 80136ce:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 80136d2:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 80136d6:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 80136da:	f109 39ff 	add.w	r9, r9, #4294967295
 80136de:	4641      	mov	r1, r8
 80136e0:	4670      	mov	r0, lr
 80136e2:	f1b9 3fff 	cmp.w	r9, #4294967295
 80136e6:	d1ee      	bne.n	80136c6 <st_int8_copy+0xf6>
 80136e8:	f01c 0f20 	tst.w	ip, #32
 80136ec:	d007      	beq.n	80136fe <st_int8_copy+0x12e>
 80136ee:	4688      	mov	r8, r1
 80136f0:	4686      	mov	lr, r0
 80136f2:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 80136f6:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 80136fa:	4641      	mov	r1, r8
 80136fc:	4670      	mov	r0, lr
 80136fe:	f01c 0f10 	tst.w	ip, #16
 8013702:	d001      	beq.n	8013708 <st_int8_copy+0x138>
 8013704:	c878      	ldmia	r0!, {r3, r4, r5, r6}
 8013706:	c178      	stmia	r1!, {r3, r4, r5, r6}
 8013708:	f01c 0f08 	tst.w	ip, #8
 801370c:	d0c1      	beq.n	8013692 <st_int8_copy+0xc2>
 801370e:	c818      	ldmia	r0!, {r3, r4}
 8013710:	c118      	stmia	r1!, {r3, r4}
 8013712:	e7be      	b.n	8013692 <st_int8_copy+0xc2>

08013714 <ai_array_to_buffer_fmt>:
 8013714:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8013718:	2b02      	cmp	r3, #2
 801371a:	d055      	beq.n	80137c8 <ai_array_to_buffer_fmt+0xb4>
 801371c:	f020 437e 	bic.w	r3, r0, #4261412864	@ 0xfe000000
 8013720:	4a2c      	ldr	r2, [pc, #176]	@ (80137d4 <ai_array_to_buffer_fmt+0xc0>)
 8013722:	4293      	cmp	r3, r2
 8013724:	d010      	beq.n	8013748 <ai_array_to_buffer_fmt+0x34>
 8013726:	dc21      	bgt.n	801376c <ai_array_to_buffer_fmt+0x58>
 8013728:	4a2b      	ldr	r2, [pc, #172]	@ (80137d8 <ai_array_to_buffer_fmt+0xc4>)
 801372a:	4293      	cmp	r3, r2
 801372c:	d00c      	beq.n	8013748 <ai_array_to_buffer_fmt+0x34>
 801372e:	dd0f      	ble.n	8013750 <ai_array_to_buffer_fmt+0x3c>
 8013730:	4a2a      	ldr	r2, [pc, #168]	@ (80137dc <ai_array_to_buffer_fmt+0xc8>)
 8013732:	4293      	cmp	r3, r2
 8013734:	d008      	beq.n	8013748 <ai_array_to_buffer_fmt+0x34>
 8013736:	f502 32fa 	add.w	r2, r2, #128000	@ 0x1f400
 801373a:	4293      	cmp	r3, r2
 801373c:	d004      	beq.n	8013748 <ai_array_to_buffer_fmt+0x34>
 801373e:	4a28      	ldr	r2, [pc, #160]	@ (80137e0 <ai_array_to_buffer_fmt+0xcc>)
 8013740:	4293      	cmp	r3, r2
 8013742:	bf0c      	ite	eq
 8013744:	4613      	moveq	r3, r2
 8013746:	2340      	movne	r3, #64	@ 0x40
 8013748:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 801374c:	4318      	orrs	r0, r3
 801374e:	4770      	bx	lr
 8013750:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8013754:	4293      	cmp	r3, r2
 8013756:	d0f7      	beq.n	8013748 <ai_array_to_buffer_fmt+0x34>
 8013758:	dd2c      	ble.n	80137b4 <ai_array_to_buffer_fmt+0xa0>
 801375a:	4a22      	ldr	r2, [pc, #136]	@ (80137e4 <ai_array_to_buffer_fmt+0xd0>)
 801375c:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8013760:	4293      	cmp	r3, r2
 8013762:	bf0c      	ite	eq
 8013764:	4613      	moveq	r3, r2
 8013766:	2340      	movne	r3, #64	@ 0x40
 8013768:	4318      	orrs	r0, r3
 801376a:	4770      	bx	lr
 801376c:	4a1e      	ldr	r2, [pc, #120]	@ (80137e8 <ai_array_to_buffer_fmt+0xd4>)
 801376e:	4293      	cmp	r3, r2
 8013770:	d0ea      	beq.n	8013748 <ai_array_to_buffer_fmt+0x34>
 8013772:	dd10      	ble.n	8013796 <ai_array_to_buffer_fmt+0x82>
 8013774:	4a1d      	ldr	r2, [pc, #116]	@ (80137ec <ai_array_to_buffer_fmt+0xd8>)
 8013776:	4293      	cmp	r3, r2
 8013778:	d0e6      	beq.n	8013748 <ai_array_to_buffer_fmt+0x34>
 801377a:	f202 72f1 	addw	r2, r2, #2033	@ 0x7f1
 801377e:	4293      	cmp	r3, r2
 8013780:	d0e2      	beq.n	8013748 <ai_array_to_buffer_fmt+0x34>
 8013782:	f5a2 6200 	sub.w	r2, r2, #2048	@ 0x800
 8013786:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 801378a:	4293      	cmp	r3, r2
 801378c:	bf0c      	ite	eq
 801378e:	4613      	moveq	r3, r2
 8013790:	2340      	movne	r3, #64	@ 0x40
 8013792:	4318      	orrs	r0, r3
 8013794:	4770      	bx	lr
 8013796:	f2a2 3287 	subw	r2, r2, #903	@ 0x387
 801379a:	4293      	cmp	r3, r2
 801379c:	d0d4      	beq.n	8013748 <ai_array_to_buffer_fmt+0x34>
 801379e:	f502 7260 	add.w	r2, r2, #896	@ 0x380
 80137a2:	4293      	cmp	r3, r2
 80137a4:	d0d0      	beq.n	8013748 <ai_array_to_buffer_fmt+0x34>
 80137a6:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 80137aa:	4293      	cmp	r3, r2
 80137ac:	bf0c      	ite	eq
 80137ae:	4613      	moveq	r3, r2
 80137b0:	2340      	movne	r3, #64	@ 0x40
 80137b2:	e7c9      	b.n	8013748 <ai_array_to_buffer_fmt+0x34>
 80137b4:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 80137b8:	4293      	cmp	r3, r2
 80137ba:	d0c5      	beq.n	8013748 <ai_array_to_buffer_fmt+0x34>
 80137bc:	3280      	adds	r2, #128	@ 0x80
 80137be:	4293      	cmp	r3, r2
 80137c0:	bf0c      	ite	eq
 80137c2:	4613      	moveq	r3, r2
 80137c4:	2340      	movne	r3, #64	@ 0x40
 80137c6:	e7bf      	b.n	8013748 <ai_array_to_buffer_fmt+0x34>
 80137c8:	4b09      	ldr	r3, [pc, #36]	@ (80137f0 <ai_array_to_buffer_fmt+0xdc>)
 80137ca:	4003      	ands	r3, r0
 80137cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80137d0:	e7ba      	b.n	8013748 <ai_array_to_buffer_fmt+0x34>
 80137d2:	bf00      	nop
 80137d4:	00821040 	.word	0x00821040
 80137d8:	00040840 	.word	0x00040840
 80137dc:	00041040 	.word	0x00041040
 80137e0:	0004084f 	.word	0x0004084f
 80137e4:	00040447 	.word	0x00040447
 80137e8:	00840447 	.word	0x00840447
 80137ec:	0084084f 	.word	0x0084084f
 80137f0:	00803fff 	.word	0x00803fff

080137f4 <ai_array_get_byte_size>:
 80137f4:	b321      	cbz	r1, 8013840 <ai_array_get_byte_size+0x4c>
 80137f6:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 80137fa:	f46f 7288 	mvn.w	r2, #272	@ 0x110
 80137fe:	f3c0 5c41 	ubfx	ip, r0, #21, #2
 8013802:	fb03 f101 	mul.w	r1, r3, r1
 8013806:	b500      	push	{lr}
 8013808:	f3c0 4e43 	ubfx	lr, r0, #17, #4
 801380c:	3107      	adds	r1, #7
 801380e:	11c0      	asrs	r0, r0, #7
 8013810:	fa42 f20e 	asr.w	r2, r2, lr
 8013814:	f021 0107 	bic.w	r1, r1, #7
 8013818:	07d2      	lsls	r2, r2, #31
 801381a:	fa21 f10c 	lsr.w	r1, r1, ip
 801381e:	d505      	bpl.n	801382c <ai_array_get_byte_size+0x38>
 8013820:	2300      	movs	r3, #0
 8013822:	3107      	adds	r1, #7
 8013824:	4419      	add	r1, r3
 8013826:	08c8      	lsrs	r0, r1, #3
 8013828:	f85d fb04 	ldr.w	pc, [sp], #4
 801382c:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8013830:	3107      	adds	r1, #7
 8013832:	fa40 f00c 	asr.w	r0, r0, ip
 8013836:	4083      	lsls	r3, r0
 8013838:	4419      	add	r1, r3
 801383a:	08c8      	lsrs	r0, r1, #3
 801383c:	f85d fb04 	ldr.w	pc, [sp], #4
 8013840:	4608      	mov	r0, r1
 8013842:	4770      	bx	lr

08013844 <ai_array_get_data_byte_size>:
 8013844:	b169      	cbz	r1, 8013862 <ai_array_get_data_byte_size+0x1e>
 8013846:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 801384a:	f3c0 5041 	ubfx	r0, r0, #21, #2
 801384e:	fb03 f101 	mul.w	r1, r3, r1
 8013852:	1dcb      	adds	r3, r1, #7
 8013854:	f023 0307 	bic.w	r3, r3, #7
 8013858:	fa23 f000 	lsr.w	r0, r3, r0
 801385c:	3007      	adds	r0, #7
 801385e:	08c0      	lsrs	r0, r0, #3
 8013860:	4770      	bx	lr
 8013862:	4608      	mov	r0, r1
 8013864:	4770      	bx	lr
 8013866:	bf00      	nop

08013868 <ai_version_get>:
 8013868:	0212      	lsls	r2, r2, #8
 801386a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 801386e:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 8013872:	4770      	bx	lr

08013874 <get_tensor_byte_size>:
 8013874:	b430      	push	{r4, r5}
 8013876:	6985      	ldr	r5, [r0, #24]
 8013878:	68c4      	ldr	r4, [r0, #12]
 801387a:	6941      	ldr	r1, [r0, #20]
 801387c:	4b06      	ldr	r3, [pc, #24]	@ (8013898 <get_tensor_byte_size+0x24>)
 801387e:	6828      	ldr	r0, [r5, #0]
 8013880:	4a06      	ldr	r2, [pc, #24]	@ (801389c <get_tensor_byte_size+0x28>)
 8013882:	4003      	ands	r3, r0
 8013884:	68c9      	ldr	r1, [r1, #12]
 8013886:	68e0      	ldr	r0, [r4, #12]
 8013888:	4293      	cmp	r3, r2
 801388a:	fb01 f000 	mul.w	r0, r1, r0
 801388e:	d101      	bne.n	8013894 <get_tensor_byte_size+0x20>
 8013890:	3007      	adds	r0, #7
 8013892:	08c0      	lsrs	r0, r0, #3
 8013894:	bc30      	pop	{r4, r5}
 8013896:	4770      	bx	lr
 8013898:	017fffff 	.word	0x017fffff
 801389c:	000400c0 	.word	0x000400c0

080138a0 <lite_bilinear_if32of32_kernel>:
 80138a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80138a2:	9d05      	ldr	r5, [sp, #20]
 80138a4:	b352      	cbz	r2, 80138fc <lite_bilinear_if32of32_kernel+0x5c>
 80138a6:	f04f 0c00 	mov.w	ip, #0
 80138aa:	edd5 4a02 	vldr	s9, [r5, #8]
 80138ae:	f10c 0c01 	add.w	ip, ip, #1
 80138b2:	ed95 5a01 	vldr	s10, [r5, #4]
 80138b6:	ed90 6a00 	vldr	s12, [r0]
 80138ba:	4562      	cmp	r2, ip
 80138bc:	edd5 5a00 	vldr	s11, [r5]
 80138c0:	edd5 6a03 	vldr	s13, [r5, #12]
 80138c4:	e9d3 4600 	ldrd	r4, r6, [r3]
 80138c8:	eb00 0786 	add.w	r7, r0, r6, lsl #2
 80138cc:	eb00 0e84 	add.w	lr, r0, r4, lsl #2
 80138d0:	4434      	add	r4, r6
 80138d2:	edd7 7a00 	vldr	s15, [r7]
 80138d6:	ed9e 7a00 	vldr	s14, [lr]
 80138da:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 80138de:	ee67 7aa4 	vmul.f32	s15, s15, s9
 80138e2:	f100 0004 	add.w	r0, r0, #4
 80138e6:	eee5 7a07 	vfma.f32	s15, s10, s14
 80138ea:	ed94 7a00 	vldr	s14, [r4]
 80138ee:	eee5 7a86 	vfma.f32	s15, s11, s12
 80138f2:	eee6 7a87 	vfma.f32	s15, s13, s14
 80138f6:	ece1 7a01 	vstmia	r1!, {s15}
 80138fa:	d1d6      	bne.n	80138aa <lite_bilinear_if32of32_kernel+0xa>
 80138fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80138fe:	bf00      	nop

08013900 <lite_bilinear_is8os8_kernel>:
 8013900:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013904:	9c07      	ldr	r4, [sp, #28]
 8013906:	2a00      	cmp	r2, #0
 8013908:	d04b      	beq.n	80139a2 <lite_bilinear_is8os8_kernel+0xa2>
 801390a:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 801390e:	eb01 0e02 	add.w	lr, r1, r2
 8013912:	f100 3cff 	add.w	ip, r0, #4294967295
 8013916:	f1c0 0501 	rsb	r5, r0, #1
 801391a:	685f      	ldr	r7, [r3, #4]
 801391c:	eb05 060c 	add.w	r6, r5, ip
 8013920:	681a      	ldr	r2, [r3, #0]
 8013922:	eb00 0807 	add.w	r8, r0, r7
 8013926:	edd4 3a02 	vldr	s7, [r4, #8]
 801392a:	4402      	add	r2, r0
 801392c:	ed94 4a01 	vldr	s8, [r4, #4]
 8013930:	f918 8006 	ldrsb.w	r8, [r8, r6]
 8013934:	f91c 9f01 	ldrsb.w	r9, [ip, #1]!
 8013938:	ee07 8a90 	vmov	s15, r8
 801393c:	f912 8006 	ldrsb.w	r8, [r2, r6]
 8013940:	ee06 9a90 	vmov	s13, r9
 8013944:	443a      	add	r2, r7
 8013946:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801394a:	ee06 8a10 	vmov	s12, r8
 801394e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8013952:	edd4 4a00 	vldr	s9, [r4]
 8013956:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 801395a:	5792      	ldrsb	r2, [r2, r6]
 801395c:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8013960:	ed94 5a03 	vldr	s10, [r4, #12]
 8013964:	ee07 2a10 	vmov	s14, r2
 8013968:	eee4 7a06 	vfma.f32	s15, s8, s12
 801396c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013970:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8013974:	eee5 7a07 	vfma.f32	s15, s10, s14
 8013978:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801397c:	ee37 7aa5 	vadd.f32	s14, s15, s11
 8013980:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8013984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013988:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801398c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013990:	dd09      	ble.n	80139a6 <lite_bilinear_is8os8_kernel+0xa6>
 8013992:	ee17 2a10 	vmov	r2, s14
 8013996:	f302 0207 	ssat	r2, #8, r2
 801399a:	f801 2b01 	strb.w	r2, [r1], #1
 801399e:	4571      	cmp	r1, lr
 80139a0:	d1bb      	bne.n	801391a <lite_bilinear_is8os8_kernel+0x1a>
 80139a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80139a6:	ee17 2a90 	vmov	r2, s15
 80139aa:	f302 0207 	ssat	r2, #8, r2
 80139ae:	f801 2b01 	strb.w	r2, [r1], #1
 80139b2:	4571      	cmp	r1, lr
 80139b4:	d1b1      	bne.n	801391a <lite_bilinear_is8os8_kernel+0x1a>
 80139b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80139ba:	bf00      	nop

080139bc <lite_bilinear_iu8ou8_kernel>:
 80139bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80139c0:	9c07      	ldr	r4, [sp, #28]
 80139c2:	2a00      	cmp	r2, #0
 80139c4:	d042      	beq.n	8013a4c <lite_bilinear_iu8ou8_kernel+0x90>
 80139c6:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 80139ca:	eb01 0e02 	add.w	lr, r1, r2
 80139ce:	f100 3cff 	add.w	ip, r0, #4294967295
 80139d2:	f1c0 0501 	rsb	r5, r0, #1
 80139d6:	eb05 060c 	add.w	r6, r5, ip
 80139da:	f81c 2f01 	ldrb.w	r2, [ip, #1]!
 80139de:	eef0 7a44 	vmov.f32	s15, s8
 80139e2:	edd4 6a00 	vldr	s13, [r4]
 80139e6:	ee07 2a10 	vmov	s14, r2
 80139ea:	681a      	ldr	r2, [r3, #0]
 80139ec:	685f      	ldr	r7, [r3, #4]
 80139ee:	4402      	add	r2, r0
 80139f0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80139f4:	eb00 0807 	add.w	r8, r0, r7
 80139f8:	edd4 4a01 	vldr	s9, [r4, #4]
 80139fc:	f812 9006 	ldrb.w	r9, [r2, r6]
 8013a00:	443a      	add	r2, r7
 8013a02:	eee6 7a87 	vfma.f32	s15, s13, s14
 8013a06:	f818 8006 	ldrb.w	r8, [r8, r6]
 8013a0a:	ee06 9a10 	vmov	s12, r9
 8013a0e:	ed94 5a02 	vldr	s10, [r4, #8]
 8013a12:	ee06 8a90 	vmov	s13, r8
 8013a16:	5d92      	ldrb	r2, [r2, r6]
 8013a18:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8013a1c:	edd4 5a03 	vldr	s11, [r4, #12]
 8013a20:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8013a24:	ee07 2a10 	vmov	s14, r2
 8013a28:	eee4 7a86 	vfma.f32	s15, s9, s12
 8013a2c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013a30:	eee5 7a26 	vfma.f32	s15, s10, s13
 8013a34:	eee5 7a87 	vfma.f32	s15, s11, s14
 8013a38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013a3c:	ee17 2a90 	vmov	r2, s15
 8013a40:	f382 0208 	usat	r2, #8, r2
 8013a44:	f801 2b01 	strb.w	r2, [r1], #1
 8013a48:	4571      	cmp	r1, lr
 8013a4a:	d1c4      	bne.n	80139d6 <lite_bilinear_iu8ou8_kernel+0x1a>
 8013a4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08013a50 <lite_bilinear_is16os16_kernel>:
 8013a50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013a54:	9d07      	ldr	r5, [sp, #28]
 8013a56:	2a00      	cmp	r2, #0
 8013a58:	d04e      	beq.n	8013af8 <lite_bilinear_is16os16_kernel+0xa8>
 8013a5a:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 8013a5e:	f1a0 0e02 	sub.w	lr, r0, #2
 8013a62:	f04f 0c00 	mov.w	ip, #0
 8013a66:	ed95 7a02 	vldr	s14, [r5, #8]
 8013a6a:	ed95 4a01 	vldr	s8, [r5, #4]
 8013a6e:	f93e 9f02 	ldrsh.w	r9, [lr, #2]!
 8013a72:	edd5 4a00 	vldr	s9, [r5]
 8013a76:	ee06 9a90 	vmov	s13, r9
 8013a7a:	ed95 5a03 	vldr	s10, [r5, #12]
 8013a7e:	e9d3 4600 	ldrd	r4, r6, [r3]
 8013a82:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8013a86:	eb06 080c 	add.w	r8, r6, ip
 8013a8a:	eb04 070c 	add.w	r7, r4, ip
 8013a8e:	4434      	add	r4, r6
 8013a90:	f930 6018 	ldrsh.w	r6, [r0, r8, lsl #1]
 8013a94:	4464      	add	r4, ip
 8013a96:	ee07 6a90 	vmov	s15, r6
 8013a9a:	f930 6017 	ldrsh.w	r6, [r0, r7, lsl #1]
 8013a9e:	f930 4014 	ldrsh.w	r4, [r0, r4, lsl #1]
 8013aa2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013aa6:	ee06 6a10 	vmov	s12, r6
 8013aaa:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8013aae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013ab2:	ee07 4a10 	vmov	s14, r4
 8013ab6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013aba:	eee4 7a06 	vfma.f32	s15, s8, s12
 8013abe:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8013ac2:	eee5 7a07 	vfma.f32	s15, s10, s14
 8013ac6:	ee37 7aa5 	vadd.f32	s14, s15, s11
 8013aca:	ee77 6ae5 	vsub.f32	s13, s15, s11
 8013ace:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013ad2:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8013ad6:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8013ada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ade:	bfcc      	ite	gt
 8013ae0:	ee17 4a10 	vmovgt	r4, s14
 8013ae4:	ee16 4a90 	vmovle	r4, s13
 8013ae8:	f304 040f 	ssat	r4, #16, r4
 8013aec:	f10c 0c01 	add.w	ip, ip, #1
 8013af0:	f821 4b02 	strh.w	r4, [r1], #2
 8013af4:	4562      	cmp	r2, ip
 8013af6:	d1b6      	bne.n	8013a66 <lite_bilinear_is16os16_kernel+0x16>
 8013af8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08013afc <lite_bilinear_iu16ou16_kernel>:
 8013afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b00:	9d06      	ldr	r5, [sp, #24]
 8013b02:	2a00      	cmp	r2, #0
 8013b04:	d042      	beq.n	8013b8c <lite_bilinear_iu16ou16_kernel+0x90>
 8013b06:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 8013b0a:	1e86      	subs	r6, r0, #2
 8013b0c:	f04f 0e00 	mov.w	lr, #0
 8013b10:	f836 4f02 	ldrh.w	r4, [r6, #2]!
 8013b14:	eef0 7a44 	vmov.f32	s15, s8
 8013b18:	edd5 6a00 	vldr	s13, [r5]
 8013b1c:	ee07 4a10 	vmov	s14, r4
 8013b20:	681c      	ldr	r4, [r3, #0]
 8013b22:	685f      	ldr	r7, [r3, #4]
 8013b24:	eb04 080e 	add.w	r8, r4, lr
 8013b28:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8013b2c:	eb07 0c0e 	add.w	ip, r7, lr
 8013b30:	edd5 4a01 	vldr	s9, [r5, #4]
 8013b34:	f830 8018 	ldrh.w	r8, [r0, r8, lsl #1]
 8013b38:	443c      	add	r4, r7
 8013b3a:	eee6 7a87 	vfma.f32	s15, s13, s14
 8013b3e:	f830 701c 	ldrh.w	r7, [r0, ip, lsl #1]
 8013b42:	ee06 8a10 	vmov	s12, r8
 8013b46:	4474      	add	r4, lr
 8013b48:	ee06 7a90 	vmov	s13, r7
 8013b4c:	ed95 5a02 	vldr	s10, [r5, #8]
 8013b50:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8013b54:	f830 4014 	ldrh.w	r4, [r0, r4, lsl #1]
 8013b58:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8013b5c:	edd5 5a03 	vldr	s11, [r5, #12]
 8013b60:	ee07 4a10 	vmov	s14, r4
 8013b64:	eee4 7a86 	vfma.f32	s15, s9, s12
 8013b68:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013b6c:	eee5 7a26 	vfma.f32	s15, s10, s13
 8013b70:	eee5 7a87 	vfma.f32	s15, s11, s14
 8013b74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013b78:	ee17 ca90 	vmov	ip, s15
 8013b7c:	f38c 0c10 	usat	ip, #16, ip
 8013b80:	f10e 0e01 	add.w	lr, lr, #1
 8013b84:	f821 cb02 	strh.w	ip, [r1], #2
 8013b88:	4572      	cmp	r2, lr
 8013b8a:	d1c1      	bne.n	8013b10 <lite_bilinear_iu16ou16_kernel+0x14>
 8013b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013b90 <malloc>:
 8013b90:	4b02      	ldr	r3, [pc, #8]	@ (8013b9c <malloc+0xc>)
 8013b92:	4601      	mov	r1, r0
 8013b94:	6818      	ldr	r0, [r3, #0]
 8013b96:	f000 b825 	b.w	8013be4 <_malloc_r>
 8013b9a:	bf00      	nop
 8013b9c:	20000828 	.word	0x20000828

08013ba0 <sbrk_aligned>:
 8013ba0:	b570      	push	{r4, r5, r6, lr}
 8013ba2:	4e0f      	ldr	r6, [pc, #60]	@ (8013be0 <sbrk_aligned+0x40>)
 8013ba4:	460c      	mov	r4, r1
 8013ba6:	6831      	ldr	r1, [r6, #0]
 8013ba8:	4605      	mov	r5, r0
 8013baa:	b911      	cbnz	r1, 8013bb2 <sbrk_aligned+0x12>
 8013bac:	f000 ff96 	bl	8014adc <_sbrk_r>
 8013bb0:	6030      	str	r0, [r6, #0]
 8013bb2:	4621      	mov	r1, r4
 8013bb4:	4628      	mov	r0, r5
 8013bb6:	f000 ff91 	bl	8014adc <_sbrk_r>
 8013bba:	1c43      	adds	r3, r0, #1
 8013bbc:	d103      	bne.n	8013bc6 <sbrk_aligned+0x26>
 8013bbe:	f04f 34ff 	mov.w	r4, #4294967295
 8013bc2:	4620      	mov	r0, r4
 8013bc4:	bd70      	pop	{r4, r5, r6, pc}
 8013bc6:	1cc4      	adds	r4, r0, #3
 8013bc8:	f024 0403 	bic.w	r4, r4, #3
 8013bcc:	42a0      	cmp	r0, r4
 8013bce:	d0f8      	beq.n	8013bc2 <sbrk_aligned+0x22>
 8013bd0:	1a21      	subs	r1, r4, r0
 8013bd2:	4628      	mov	r0, r5
 8013bd4:	f000 ff82 	bl	8014adc <_sbrk_r>
 8013bd8:	3001      	adds	r0, #1
 8013bda:	d1f2      	bne.n	8013bc2 <sbrk_aligned+0x22>
 8013bdc:	e7ef      	b.n	8013bbe <sbrk_aligned+0x1e>
 8013bde:	bf00      	nop
 8013be0:	2002e758 	.word	0x2002e758

08013be4 <_malloc_r>:
 8013be4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013be8:	1ccd      	adds	r5, r1, #3
 8013bea:	f025 0503 	bic.w	r5, r5, #3
 8013bee:	3508      	adds	r5, #8
 8013bf0:	2d0c      	cmp	r5, #12
 8013bf2:	bf38      	it	cc
 8013bf4:	250c      	movcc	r5, #12
 8013bf6:	2d00      	cmp	r5, #0
 8013bf8:	4606      	mov	r6, r0
 8013bfa:	db01      	blt.n	8013c00 <_malloc_r+0x1c>
 8013bfc:	42a9      	cmp	r1, r5
 8013bfe:	d904      	bls.n	8013c0a <_malloc_r+0x26>
 8013c00:	230c      	movs	r3, #12
 8013c02:	6033      	str	r3, [r6, #0]
 8013c04:	2000      	movs	r0, #0
 8013c06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013c0a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8013ce0 <_malloc_r+0xfc>
 8013c0e:	f000 f869 	bl	8013ce4 <__malloc_lock>
 8013c12:	f8d8 3000 	ldr.w	r3, [r8]
 8013c16:	461c      	mov	r4, r3
 8013c18:	bb44      	cbnz	r4, 8013c6c <_malloc_r+0x88>
 8013c1a:	4629      	mov	r1, r5
 8013c1c:	4630      	mov	r0, r6
 8013c1e:	f7ff ffbf 	bl	8013ba0 <sbrk_aligned>
 8013c22:	1c43      	adds	r3, r0, #1
 8013c24:	4604      	mov	r4, r0
 8013c26:	d158      	bne.n	8013cda <_malloc_r+0xf6>
 8013c28:	f8d8 4000 	ldr.w	r4, [r8]
 8013c2c:	4627      	mov	r7, r4
 8013c2e:	2f00      	cmp	r7, #0
 8013c30:	d143      	bne.n	8013cba <_malloc_r+0xd6>
 8013c32:	2c00      	cmp	r4, #0
 8013c34:	d04b      	beq.n	8013cce <_malloc_r+0xea>
 8013c36:	6823      	ldr	r3, [r4, #0]
 8013c38:	4639      	mov	r1, r7
 8013c3a:	4630      	mov	r0, r6
 8013c3c:	eb04 0903 	add.w	r9, r4, r3
 8013c40:	f000 ff4c 	bl	8014adc <_sbrk_r>
 8013c44:	4581      	cmp	r9, r0
 8013c46:	d142      	bne.n	8013cce <_malloc_r+0xea>
 8013c48:	6821      	ldr	r1, [r4, #0]
 8013c4a:	1a6d      	subs	r5, r5, r1
 8013c4c:	4629      	mov	r1, r5
 8013c4e:	4630      	mov	r0, r6
 8013c50:	f7ff ffa6 	bl	8013ba0 <sbrk_aligned>
 8013c54:	3001      	adds	r0, #1
 8013c56:	d03a      	beq.n	8013cce <_malloc_r+0xea>
 8013c58:	6823      	ldr	r3, [r4, #0]
 8013c5a:	442b      	add	r3, r5
 8013c5c:	6023      	str	r3, [r4, #0]
 8013c5e:	f8d8 3000 	ldr.w	r3, [r8]
 8013c62:	685a      	ldr	r2, [r3, #4]
 8013c64:	bb62      	cbnz	r2, 8013cc0 <_malloc_r+0xdc>
 8013c66:	f8c8 7000 	str.w	r7, [r8]
 8013c6a:	e00f      	b.n	8013c8c <_malloc_r+0xa8>
 8013c6c:	6822      	ldr	r2, [r4, #0]
 8013c6e:	1b52      	subs	r2, r2, r5
 8013c70:	d420      	bmi.n	8013cb4 <_malloc_r+0xd0>
 8013c72:	2a0b      	cmp	r2, #11
 8013c74:	d917      	bls.n	8013ca6 <_malloc_r+0xc2>
 8013c76:	1961      	adds	r1, r4, r5
 8013c78:	42a3      	cmp	r3, r4
 8013c7a:	6025      	str	r5, [r4, #0]
 8013c7c:	bf18      	it	ne
 8013c7e:	6059      	strne	r1, [r3, #4]
 8013c80:	6863      	ldr	r3, [r4, #4]
 8013c82:	bf08      	it	eq
 8013c84:	f8c8 1000 	streq.w	r1, [r8]
 8013c88:	5162      	str	r2, [r4, r5]
 8013c8a:	604b      	str	r3, [r1, #4]
 8013c8c:	4630      	mov	r0, r6
 8013c8e:	f000 f82f 	bl	8013cf0 <__malloc_unlock>
 8013c92:	f104 000b 	add.w	r0, r4, #11
 8013c96:	1d23      	adds	r3, r4, #4
 8013c98:	f020 0007 	bic.w	r0, r0, #7
 8013c9c:	1ac2      	subs	r2, r0, r3
 8013c9e:	bf1c      	itt	ne
 8013ca0:	1a1b      	subne	r3, r3, r0
 8013ca2:	50a3      	strne	r3, [r4, r2]
 8013ca4:	e7af      	b.n	8013c06 <_malloc_r+0x22>
 8013ca6:	6862      	ldr	r2, [r4, #4]
 8013ca8:	42a3      	cmp	r3, r4
 8013caa:	bf0c      	ite	eq
 8013cac:	f8c8 2000 	streq.w	r2, [r8]
 8013cb0:	605a      	strne	r2, [r3, #4]
 8013cb2:	e7eb      	b.n	8013c8c <_malloc_r+0xa8>
 8013cb4:	4623      	mov	r3, r4
 8013cb6:	6864      	ldr	r4, [r4, #4]
 8013cb8:	e7ae      	b.n	8013c18 <_malloc_r+0x34>
 8013cba:	463c      	mov	r4, r7
 8013cbc:	687f      	ldr	r7, [r7, #4]
 8013cbe:	e7b6      	b.n	8013c2e <_malloc_r+0x4a>
 8013cc0:	461a      	mov	r2, r3
 8013cc2:	685b      	ldr	r3, [r3, #4]
 8013cc4:	42a3      	cmp	r3, r4
 8013cc6:	d1fb      	bne.n	8013cc0 <_malloc_r+0xdc>
 8013cc8:	2300      	movs	r3, #0
 8013cca:	6053      	str	r3, [r2, #4]
 8013ccc:	e7de      	b.n	8013c8c <_malloc_r+0xa8>
 8013cce:	230c      	movs	r3, #12
 8013cd0:	6033      	str	r3, [r6, #0]
 8013cd2:	4630      	mov	r0, r6
 8013cd4:	f000 f80c 	bl	8013cf0 <__malloc_unlock>
 8013cd8:	e794      	b.n	8013c04 <_malloc_r+0x20>
 8013cda:	6005      	str	r5, [r0, #0]
 8013cdc:	e7d6      	b.n	8013c8c <_malloc_r+0xa8>
 8013cde:	bf00      	nop
 8013ce0:	2002e75c 	.word	0x2002e75c

08013ce4 <__malloc_lock>:
 8013ce4:	4801      	ldr	r0, [pc, #4]	@ (8013cec <__malloc_lock+0x8>)
 8013ce6:	f000 bf46 	b.w	8014b76 <__retarget_lock_acquire_recursive>
 8013cea:	bf00      	nop
 8013cec:	2002e8a0 	.word	0x2002e8a0

08013cf0 <__malloc_unlock>:
 8013cf0:	4801      	ldr	r0, [pc, #4]	@ (8013cf8 <__malloc_unlock+0x8>)
 8013cf2:	f000 bf41 	b.w	8014b78 <__retarget_lock_release_recursive>
 8013cf6:	bf00      	nop
 8013cf8:	2002e8a0 	.word	0x2002e8a0

08013cfc <_realloc_r>:
 8013cfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d00:	4680      	mov	r8, r0
 8013d02:	4615      	mov	r5, r2
 8013d04:	460c      	mov	r4, r1
 8013d06:	b921      	cbnz	r1, 8013d12 <_realloc_r+0x16>
 8013d08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013d0c:	4611      	mov	r1, r2
 8013d0e:	f7ff bf69 	b.w	8013be4 <_malloc_r>
 8013d12:	b92a      	cbnz	r2, 8013d20 <_realloc_r+0x24>
 8013d14:	f001 fd8c 	bl	8015830 <_free_r>
 8013d18:	2400      	movs	r4, #0
 8013d1a:	4620      	mov	r0, r4
 8013d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d20:	f002 f952 	bl	8015fc8 <_malloc_usable_size_r>
 8013d24:	4285      	cmp	r5, r0
 8013d26:	4606      	mov	r6, r0
 8013d28:	d802      	bhi.n	8013d30 <_realloc_r+0x34>
 8013d2a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8013d2e:	d8f4      	bhi.n	8013d1a <_realloc_r+0x1e>
 8013d30:	4629      	mov	r1, r5
 8013d32:	4640      	mov	r0, r8
 8013d34:	f7ff ff56 	bl	8013be4 <_malloc_r>
 8013d38:	4607      	mov	r7, r0
 8013d3a:	2800      	cmp	r0, #0
 8013d3c:	d0ec      	beq.n	8013d18 <_realloc_r+0x1c>
 8013d3e:	42b5      	cmp	r5, r6
 8013d40:	462a      	mov	r2, r5
 8013d42:	4621      	mov	r1, r4
 8013d44:	bf28      	it	cs
 8013d46:	4632      	movcs	r2, r6
 8013d48:	f000 ff17 	bl	8014b7a <memcpy>
 8013d4c:	4621      	mov	r1, r4
 8013d4e:	4640      	mov	r0, r8
 8013d50:	f001 fd6e 	bl	8015830 <_free_r>
 8013d54:	463c      	mov	r4, r7
 8013d56:	e7e0      	b.n	8013d1a <_realloc_r+0x1e>

08013d58 <__cvt>:
 8013d58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013d5c:	ec57 6b10 	vmov	r6, r7, d0
 8013d60:	2f00      	cmp	r7, #0
 8013d62:	460c      	mov	r4, r1
 8013d64:	4619      	mov	r1, r3
 8013d66:	463b      	mov	r3, r7
 8013d68:	bfbb      	ittet	lt
 8013d6a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8013d6e:	461f      	movlt	r7, r3
 8013d70:	2300      	movge	r3, #0
 8013d72:	232d      	movlt	r3, #45	@ 0x2d
 8013d74:	700b      	strb	r3, [r1, #0]
 8013d76:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013d78:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8013d7c:	4691      	mov	r9, r2
 8013d7e:	f023 0820 	bic.w	r8, r3, #32
 8013d82:	bfbc      	itt	lt
 8013d84:	4632      	movlt	r2, r6
 8013d86:	4616      	movlt	r6, r2
 8013d88:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8013d8c:	d005      	beq.n	8013d9a <__cvt+0x42>
 8013d8e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8013d92:	d100      	bne.n	8013d96 <__cvt+0x3e>
 8013d94:	3401      	adds	r4, #1
 8013d96:	2102      	movs	r1, #2
 8013d98:	e000      	b.n	8013d9c <__cvt+0x44>
 8013d9a:	2103      	movs	r1, #3
 8013d9c:	ab03      	add	r3, sp, #12
 8013d9e:	9301      	str	r3, [sp, #4]
 8013da0:	ab02      	add	r3, sp, #8
 8013da2:	9300      	str	r3, [sp, #0]
 8013da4:	ec47 6b10 	vmov	d0, r6, r7
 8013da8:	4653      	mov	r3, sl
 8013daa:	4622      	mov	r2, r4
 8013dac:	f000 ff7c 	bl	8014ca8 <_dtoa_r>
 8013db0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8013db4:	4605      	mov	r5, r0
 8013db6:	d119      	bne.n	8013dec <__cvt+0x94>
 8013db8:	f019 0f01 	tst.w	r9, #1
 8013dbc:	d00e      	beq.n	8013ddc <__cvt+0x84>
 8013dbe:	eb00 0904 	add.w	r9, r0, r4
 8013dc2:	2200      	movs	r2, #0
 8013dc4:	2300      	movs	r3, #0
 8013dc6:	4630      	mov	r0, r6
 8013dc8:	4639      	mov	r1, r7
 8013dca:	f7ec fefd 	bl	8000bc8 <__aeabi_dcmpeq>
 8013dce:	b108      	cbz	r0, 8013dd4 <__cvt+0x7c>
 8013dd0:	f8cd 900c 	str.w	r9, [sp, #12]
 8013dd4:	2230      	movs	r2, #48	@ 0x30
 8013dd6:	9b03      	ldr	r3, [sp, #12]
 8013dd8:	454b      	cmp	r3, r9
 8013dda:	d31e      	bcc.n	8013e1a <__cvt+0xc2>
 8013ddc:	9b03      	ldr	r3, [sp, #12]
 8013dde:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013de0:	1b5b      	subs	r3, r3, r5
 8013de2:	4628      	mov	r0, r5
 8013de4:	6013      	str	r3, [r2, #0]
 8013de6:	b004      	add	sp, #16
 8013de8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013dec:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8013df0:	eb00 0904 	add.w	r9, r0, r4
 8013df4:	d1e5      	bne.n	8013dc2 <__cvt+0x6a>
 8013df6:	7803      	ldrb	r3, [r0, #0]
 8013df8:	2b30      	cmp	r3, #48	@ 0x30
 8013dfa:	d10a      	bne.n	8013e12 <__cvt+0xba>
 8013dfc:	2200      	movs	r2, #0
 8013dfe:	2300      	movs	r3, #0
 8013e00:	4630      	mov	r0, r6
 8013e02:	4639      	mov	r1, r7
 8013e04:	f7ec fee0 	bl	8000bc8 <__aeabi_dcmpeq>
 8013e08:	b918      	cbnz	r0, 8013e12 <__cvt+0xba>
 8013e0a:	f1c4 0401 	rsb	r4, r4, #1
 8013e0e:	f8ca 4000 	str.w	r4, [sl]
 8013e12:	f8da 3000 	ldr.w	r3, [sl]
 8013e16:	4499      	add	r9, r3
 8013e18:	e7d3      	b.n	8013dc2 <__cvt+0x6a>
 8013e1a:	1c59      	adds	r1, r3, #1
 8013e1c:	9103      	str	r1, [sp, #12]
 8013e1e:	701a      	strb	r2, [r3, #0]
 8013e20:	e7d9      	b.n	8013dd6 <__cvt+0x7e>

08013e22 <__exponent>:
 8013e22:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013e24:	2900      	cmp	r1, #0
 8013e26:	bfba      	itte	lt
 8013e28:	4249      	neglt	r1, r1
 8013e2a:	232d      	movlt	r3, #45	@ 0x2d
 8013e2c:	232b      	movge	r3, #43	@ 0x2b
 8013e2e:	2909      	cmp	r1, #9
 8013e30:	7002      	strb	r2, [r0, #0]
 8013e32:	7043      	strb	r3, [r0, #1]
 8013e34:	dd29      	ble.n	8013e8a <__exponent+0x68>
 8013e36:	f10d 0307 	add.w	r3, sp, #7
 8013e3a:	461d      	mov	r5, r3
 8013e3c:	270a      	movs	r7, #10
 8013e3e:	461a      	mov	r2, r3
 8013e40:	fbb1 f6f7 	udiv	r6, r1, r7
 8013e44:	fb07 1416 	mls	r4, r7, r6, r1
 8013e48:	3430      	adds	r4, #48	@ 0x30
 8013e4a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8013e4e:	460c      	mov	r4, r1
 8013e50:	2c63      	cmp	r4, #99	@ 0x63
 8013e52:	f103 33ff 	add.w	r3, r3, #4294967295
 8013e56:	4631      	mov	r1, r6
 8013e58:	dcf1      	bgt.n	8013e3e <__exponent+0x1c>
 8013e5a:	3130      	adds	r1, #48	@ 0x30
 8013e5c:	1e94      	subs	r4, r2, #2
 8013e5e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8013e62:	1c41      	adds	r1, r0, #1
 8013e64:	4623      	mov	r3, r4
 8013e66:	42ab      	cmp	r3, r5
 8013e68:	d30a      	bcc.n	8013e80 <__exponent+0x5e>
 8013e6a:	f10d 0309 	add.w	r3, sp, #9
 8013e6e:	1a9b      	subs	r3, r3, r2
 8013e70:	42ac      	cmp	r4, r5
 8013e72:	bf88      	it	hi
 8013e74:	2300      	movhi	r3, #0
 8013e76:	3302      	adds	r3, #2
 8013e78:	4403      	add	r3, r0
 8013e7a:	1a18      	subs	r0, r3, r0
 8013e7c:	b003      	add	sp, #12
 8013e7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013e80:	f813 6b01 	ldrb.w	r6, [r3], #1
 8013e84:	f801 6f01 	strb.w	r6, [r1, #1]!
 8013e88:	e7ed      	b.n	8013e66 <__exponent+0x44>
 8013e8a:	2330      	movs	r3, #48	@ 0x30
 8013e8c:	3130      	adds	r1, #48	@ 0x30
 8013e8e:	7083      	strb	r3, [r0, #2]
 8013e90:	70c1      	strb	r1, [r0, #3]
 8013e92:	1d03      	adds	r3, r0, #4
 8013e94:	e7f1      	b.n	8013e7a <__exponent+0x58>
	...

08013e98 <_printf_float>:
 8013e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e9c:	b08d      	sub	sp, #52	@ 0x34
 8013e9e:	460c      	mov	r4, r1
 8013ea0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8013ea4:	4616      	mov	r6, r2
 8013ea6:	461f      	mov	r7, r3
 8013ea8:	4605      	mov	r5, r0
 8013eaa:	f000 fddf 	bl	8014a6c <_localeconv_r>
 8013eae:	6803      	ldr	r3, [r0, #0]
 8013eb0:	9304      	str	r3, [sp, #16]
 8013eb2:	4618      	mov	r0, r3
 8013eb4:	f7ec fa5c 	bl	8000370 <strlen>
 8013eb8:	2300      	movs	r3, #0
 8013eba:	930a      	str	r3, [sp, #40]	@ 0x28
 8013ebc:	f8d8 3000 	ldr.w	r3, [r8]
 8013ec0:	9005      	str	r0, [sp, #20]
 8013ec2:	3307      	adds	r3, #7
 8013ec4:	f023 0307 	bic.w	r3, r3, #7
 8013ec8:	f103 0208 	add.w	r2, r3, #8
 8013ecc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8013ed0:	f8d4 b000 	ldr.w	fp, [r4]
 8013ed4:	f8c8 2000 	str.w	r2, [r8]
 8013ed8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013edc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8013ee0:	9307      	str	r3, [sp, #28]
 8013ee2:	f8cd 8018 	str.w	r8, [sp, #24]
 8013ee6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8013eea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013eee:	4b9c      	ldr	r3, [pc, #624]	@ (8014160 <_printf_float+0x2c8>)
 8013ef0:	f04f 32ff 	mov.w	r2, #4294967295
 8013ef4:	f7ec fe9a 	bl	8000c2c <__aeabi_dcmpun>
 8013ef8:	bb70      	cbnz	r0, 8013f58 <_printf_float+0xc0>
 8013efa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013efe:	4b98      	ldr	r3, [pc, #608]	@ (8014160 <_printf_float+0x2c8>)
 8013f00:	f04f 32ff 	mov.w	r2, #4294967295
 8013f04:	f7ec fe74 	bl	8000bf0 <__aeabi_dcmple>
 8013f08:	bb30      	cbnz	r0, 8013f58 <_printf_float+0xc0>
 8013f0a:	2200      	movs	r2, #0
 8013f0c:	2300      	movs	r3, #0
 8013f0e:	4640      	mov	r0, r8
 8013f10:	4649      	mov	r1, r9
 8013f12:	f7ec fe63 	bl	8000bdc <__aeabi_dcmplt>
 8013f16:	b110      	cbz	r0, 8013f1e <_printf_float+0x86>
 8013f18:	232d      	movs	r3, #45	@ 0x2d
 8013f1a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013f1e:	4a91      	ldr	r2, [pc, #580]	@ (8014164 <_printf_float+0x2cc>)
 8013f20:	4b91      	ldr	r3, [pc, #580]	@ (8014168 <_printf_float+0x2d0>)
 8013f22:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8013f26:	bf94      	ite	ls
 8013f28:	4690      	movls	r8, r2
 8013f2a:	4698      	movhi	r8, r3
 8013f2c:	2303      	movs	r3, #3
 8013f2e:	6123      	str	r3, [r4, #16]
 8013f30:	f02b 0304 	bic.w	r3, fp, #4
 8013f34:	6023      	str	r3, [r4, #0]
 8013f36:	f04f 0900 	mov.w	r9, #0
 8013f3a:	9700      	str	r7, [sp, #0]
 8013f3c:	4633      	mov	r3, r6
 8013f3e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8013f40:	4621      	mov	r1, r4
 8013f42:	4628      	mov	r0, r5
 8013f44:	f000 f9d2 	bl	80142ec <_printf_common>
 8013f48:	3001      	adds	r0, #1
 8013f4a:	f040 808d 	bne.w	8014068 <_printf_float+0x1d0>
 8013f4e:	f04f 30ff 	mov.w	r0, #4294967295
 8013f52:	b00d      	add	sp, #52	@ 0x34
 8013f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f58:	4642      	mov	r2, r8
 8013f5a:	464b      	mov	r3, r9
 8013f5c:	4640      	mov	r0, r8
 8013f5e:	4649      	mov	r1, r9
 8013f60:	f7ec fe64 	bl	8000c2c <__aeabi_dcmpun>
 8013f64:	b140      	cbz	r0, 8013f78 <_printf_float+0xe0>
 8013f66:	464b      	mov	r3, r9
 8013f68:	2b00      	cmp	r3, #0
 8013f6a:	bfbc      	itt	lt
 8013f6c:	232d      	movlt	r3, #45	@ 0x2d
 8013f6e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8013f72:	4a7e      	ldr	r2, [pc, #504]	@ (801416c <_printf_float+0x2d4>)
 8013f74:	4b7e      	ldr	r3, [pc, #504]	@ (8014170 <_printf_float+0x2d8>)
 8013f76:	e7d4      	b.n	8013f22 <_printf_float+0x8a>
 8013f78:	6863      	ldr	r3, [r4, #4]
 8013f7a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8013f7e:	9206      	str	r2, [sp, #24]
 8013f80:	1c5a      	adds	r2, r3, #1
 8013f82:	d13b      	bne.n	8013ffc <_printf_float+0x164>
 8013f84:	2306      	movs	r3, #6
 8013f86:	6063      	str	r3, [r4, #4]
 8013f88:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8013f8c:	2300      	movs	r3, #0
 8013f8e:	6022      	str	r2, [r4, #0]
 8013f90:	9303      	str	r3, [sp, #12]
 8013f92:	ab0a      	add	r3, sp, #40	@ 0x28
 8013f94:	e9cd a301 	strd	sl, r3, [sp, #4]
 8013f98:	ab09      	add	r3, sp, #36	@ 0x24
 8013f9a:	9300      	str	r3, [sp, #0]
 8013f9c:	6861      	ldr	r1, [r4, #4]
 8013f9e:	ec49 8b10 	vmov	d0, r8, r9
 8013fa2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8013fa6:	4628      	mov	r0, r5
 8013fa8:	f7ff fed6 	bl	8013d58 <__cvt>
 8013fac:	9b06      	ldr	r3, [sp, #24]
 8013fae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013fb0:	2b47      	cmp	r3, #71	@ 0x47
 8013fb2:	4680      	mov	r8, r0
 8013fb4:	d129      	bne.n	801400a <_printf_float+0x172>
 8013fb6:	1cc8      	adds	r0, r1, #3
 8013fb8:	db02      	blt.n	8013fc0 <_printf_float+0x128>
 8013fba:	6863      	ldr	r3, [r4, #4]
 8013fbc:	4299      	cmp	r1, r3
 8013fbe:	dd41      	ble.n	8014044 <_printf_float+0x1ac>
 8013fc0:	f1aa 0a02 	sub.w	sl, sl, #2
 8013fc4:	fa5f fa8a 	uxtb.w	sl, sl
 8013fc8:	3901      	subs	r1, #1
 8013fca:	4652      	mov	r2, sl
 8013fcc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8013fd0:	9109      	str	r1, [sp, #36]	@ 0x24
 8013fd2:	f7ff ff26 	bl	8013e22 <__exponent>
 8013fd6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013fd8:	1813      	adds	r3, r2, r0
 8013fda:	2a01      	cmp	r2, #1
 8013fdc:	4681      	mov	r9, r0
 8013fde:	6123      	str	r3, [r4, #16]
 8013fe0:	dc02      	bgt.n	8013fe8 <_printf_float+0x150>
 8013fe2:	6822      	ldr	r2, [r4, #0]
 8013fe4:	07d2      	lsls	r2, r2, #31
 8013fe6:	d501      	bpl.n	8013fec <_printf_float+0x154>
 8013fe8:	3301      	adds	r3, #1
 8013fea:	6123      	str	r3, [r4, #16]
 8013fec:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8013ff0:	2b00      	cmp	r3, #0
 8013ff2:	d0a2      	beq.n	8013f3a <_printf_float+0xa2>
 8013ff4:	232d      	movs	r3, #45	@ 0x2d
 8013ff6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013ffa:	e79e      	b.n	8013f3a <_printf_float+0xa2>
 8013ffc:	9a06      	ldr	r2, [sp, #24]
 8013ffe:	2a47      	cmp	r2, #71	@ 0x47
 8014000:	d1c2      	bne.n	8013f88 <_printf_float+0xf0>
 8014002:	2b00      	cmp	r3, #0
 8014004:	d1c0      	bne.n	8013f88 <_printf_float+0xf0>
 8014006:	2301      	movs	r3, #1
 8014008:	e7bd      	b.n	8013f86 <_printf_float+0xee>
 801400a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801400e:	d9db      	bls.n	8013fc8 <_printf_float+0x130>
 8014010:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8014014:	d118      	bne.n	8014048 <_printf_float+0x1b0>
 8014016:	2900      	cmp	r1, #0
 8014018:	6863      	ldr	r3, [r4, #4]
 801401a:	dd0b      	ble.n	8014034 <_printf_float+0x19c>
 801401c:	6121      	str	r1, [r4, #16]
 801401e:	b913      	cbnz	r3, 8014026 <_printf_float+0x18e>
 8014020:	6822      	ldr	r2, [r4, #0]
 8014022:	07d0      	lsls	r0, r2, #31
 8014024:	d502      	bpl.n	801402c <_printf_float+0x194>
 8014026:	3301      	adds	r3, #1
 8014028:	440b      	add	r3, r1
 801402a:	6123      	str	r3, [r4, #16]
 801402c:	65a1      	str	r1, [r4, #88]	@ 0x58
 801402e:	f04f 0900 	mov.w	r9, #0
 8014032:	e7db      	b.n	8013fec <_printf_float+0x154>
 8014034:	b913      	cbnz	r3, 801403c <_printf_float+0x1a4>
 8014036:	6822      	ldr	r2, [r4, #0]
 8014038:	07d2      	lsls	r2, r2, #31
 801403a:	d501      	bpl.n	8014040 <_printf_float+0x1a8>
 801403c:	3302      	adds	r3, #2
 801403e:	e7f4      	b.n	801402a <_printf_float+0x192>
 8014040:	2301      	movs	r3, #1
 8014042:	e7f2      	b.n	801402a <_printf_float+0x192>
 8014044:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8014048:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801404a:	4299      	cmp	r1, r3
 801404c:	db05      	blt.n	801405a <_printf_float+0x1c2>
 801404e:	6823      	ldr	r3, [r4, #0]
 8014050:	6121      	str	r1, [r4, #16]
 8014052:	07d8      	lsls	r0, r3, #31
 8014054:	d5ea      	bpl.n	801402c <_printf_float+0x194>
 8014056:	1c4b      	adds	r3, r1, #1
 8014058:	e7e7      	b.n	801402a <_printf_float+0x192>
 801405a:	2900      	cmp	r1, #0
 801405c:	bfd4      	ite	le
 801405e:	f1c1 0202 	rsble	r2, r1, #2
 8014062:	2201      	movgt	r2, #1
 8014064:	4413      	add	r3, r2
 8014066:	e7e0      	b.n	801402a <_printf_float+0x192>
 8014068:	6823      	ldr	r3, [r4, #0]
 801406a:	055a      	lsls	r2, r3, #21
 801406c:	d407      	bmi.n	801407e <_printf_float+0x1e6>
 801406e:	6923      	ldr	r3, [r4, #16]
 8014070:	4642      	mov	r2, r8
 8014072:	4631      	mov	r1, r6
 8014074:	4628      	mov	r0, r5
 8014076:	47b8      	blx	r7
 8014078:	3001      	adds	r0, #1
 801407a:	d12b      	bne.n	80140d4 <_printf_float+0x23c>
 801407c:	e767      	b.n	8013f4e <_printf_float+0xb6>
 801407e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8014082:	f240 80dd 	bls.w	8014240 <_printf_float+0x3a8>
 8014086:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801408a:	2200      	movs	r2, #0
 801408c:	2300      	movs	r3, #0
 801408e:	f7ec fd9b 	bl	8000bc8 <__aeabi_dcmpeq>
 8014092:	2800      	cmp	r0, #0
 8014094:	d033      	beq.n	80140fe <_printf_float+0x266>
 8014096:	4a37      	ldr	r2, [pc, #220]	@ (8014174 <_printf_float+0x2dc>)
 8014098:	2301      	movs	r3, #1
 801409a:	4631      	mov	r1, r6
 801409c:	4628      	mov	r0, r5
 801409e:	47b8      	blx	r7
 80140a0:	3001      	adds	r0, #1
 80140a2:	f43f af54 	beq.w	8013f4e <_printf_float+0xb6>
 80140a6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80140aa:	4543      	cmp	r3, r8
 80140ac:	db02      	blt.n	80140b4 <_printf_float+0x21c>
 80140ae:	6823      	ldr	r3, [r4, #0]
 80140b0:	07d8      	lsls	r0, r3, #31
 80140b2:	d50f      	bpl.n	80140d4 <_printf_float+0x23c>
 80140b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80140b8:	4631      	mov	r1, r6
 80140ba:	4628      	mov	r0, r5
 80140bc:	47b8      	blx	r7
 80140be:	3001      	adds	r0, #1
 80140c0:	f43f af45 	beq.w	8013f4e <_printf_float+0xb6>
 80140c4:	f04f 0900 	mov.w	r9, #0
 80140c8:	f108 38ff 	add.w	r8, r8, #4294967295
 80140cc:	f104 0a1a 	add.w	sl, r4, #26
 80140d0:	45c8      	cmp	r8, r9
 80140d2:	dc09      	bgt.n	80140e8 <_printf_float+0x250>
 80140d4:	6823      	ldr	r3, [r4, #0]
 80140d6:	079b      	lsls	r3, r3, #30
 80140d8:	f100 8103 	bmi.w	80142e2 <_printf_float+0x44a>
 80140dc:	68e0      	ldr	r0, [r4, #12]
 80140de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80140e0:	4298      	cmp	r0, r3
 80140e2:	bfb8      	it	lt
 80140e4:	4618      	movlt	r0, r3
 80140e6:	e734      	b.n	8013f52 <_printf_float+0xba>
 80140e8:	2301      	movs	r3, #1
 80140ea:	4652      	mov	r2, sl
 80140ec:	4631      	mov	r1, r6
 80140ee:	4628      	mov	r0, r5
 80140f0:	47b8      	blx	r7
 80140f2:	3001      	adds	r0, #1
 80140f4:	f43f af2b 	beq.w	8013f4e <_printf_float+0xb6>
 80140f8:	f109 0901 	add.w	r9, r9, #1
 80140fc:	e7e8      	b.n	80140d0 <_printf_float+0x238>
 80140fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014100:	2b00      	cmp	r3, #0
 8014102:	dc39      	bgt.n	8014178 <_printf_float+0x2e0>
 8014104:	4a1b      	ldr	r2, [pc, #108]	@ (8014174 <_printf_float+0x2dc>)
 8014106:	2301      	movs	r3, #1
 8014108:	4631      	mov	r1, r6
 801410a:	4628      	mov	r0, r5
 801410c:	47b8      	blx	r7
 801410e:	3001      	adds	r0, #1
 8014110:	f43f af1d 	beq.w	8013f4e <_printf_float+0xb6>
 8014114:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8014118:	ea59 0303 	orrs.w	r3, r9, r3
 801411c:	d102      	bne.n	8014124 <_printf_float+0x28c>
 801411e:	6823      	ldr	r3, [r4, #0]
 8014120:	07d9      	lsls	r1, r3, #31
 8014122:	d5d7      	bpl.n	80140d4 <_printf_float+0x23c>
 8014124:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014128:	4631      	mov	r1, r6
 801412a:	4628      	mov	r0, r5
 801412c:	47b8      	blx	r7
 801412e:	3001      	adds	r0, #1
 8014130:	f43f af0d 	beq.w	8013f4e <_printf_float+0xb6>
 8014134:	f04f 0a00 	mov.w	sl, #0
 8014138:	f104 0b1a 	add.w	fp, r4, #26
 801413c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801413e:	425b      	negs	r3, r3
 8014140:	4553      	cmp	r3, sl
 8014142:	dc01      	bgt.n	8014148 <_printf_float+0x2b0>
 8014144:	464b      	mov	r3, r9
 8014146:	e793      	b.n	8014070 <_printf_float+0x1d8>
 8014148:	2301      	movs	r3, #1
 801414a:	465a      	mov	r2, fp
 801414c:	4631      	mov	r1, r6
 801414e:	4628      	mov	r0, r5
 8014150:	47b8      	blx	r7
 8014152:	3001      	adds	r0, #1
 8014154:	f43f aefb 	beq.w	8013f4e <_printf_float+0xb6>
 8014158:	f10a 0a01 	add.w	sl, sl, #1
 801415c:	e7ee      	b.n	801413c <_printf_float+0x2a4>
 801415e:	bf00      	nop
 8014160:	7fefffff 	.word	0x7fefffff
 8014164:	080d4910 	.word	0x080d4910
 8014168:	080d4914 	.word	0x080d4914
 801416c:	080d4918 	.word	0x080d4918
 8014170:	080d491c 	.word	0x080d491c
 8014174:	080d4920 	.word	0x080d4920
 8014178:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801417a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801417e:	4553      	cmp	r3, sl
 8014180:	bfa8      	it	ge
 8014182:	4653      	movge	r3, sl
 8014184:	2b00      	cmp	r3, #0
 8014186:	4699      	mov	r9, r3
 8014188:	dc36      	bgt.n	80141f8 <_printf_float+0x360>
 801418a:	f04f 0b00 	mov.w	fp, #0
 801418e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014192:	f104 021a 	add.w	r2, r4, #26
 8014196:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8014198:	9306      	str	r3, [sp, #24]
 801419a:	eba3 0309 	sub.w	r3, r3, r9
 801419e:	455b      	cmp	r3, fp
 80141a0:	dc31      	bgt.n	8014206 <_printf_float+0x36e>
 80141a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80141a4:	459a      	cmp	sl, r3
 80141a6:	dc3a      	bgt.n	801421e <_printf_float+0x386>
 80141a8:	6823      	ldr	r3, [r4, #0]
 80141aa:	07da      	lsls	r2, r3, #31
 80141ac:	d437      	bmi.n	801421e <_printf_float+0x386>
 80141ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80141b0:	ebaa 0903 	sub.w	r9, sl, r3
 80141b4:	9b06      	ldr	r3, [sp, #24]
 80141b6:	ebaa 0303 	sub.w	r3, sl, r3
 80141ba:	4599      	cmp	r9, r3
 80141bc:	bfa8      	it	ge
 80141be:	4699      	movge	r9, r3
 80141c0:	f1b9 0f00 	cmp.w	r9, #0
 80141c4:	dc33      	bgt.n	801422e <_printf_float+0x396>
 80141c6:	f04f 0800 	mov.w	r8, #0
 80141ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80141ce:	f104 0b1a 	add.w	fp, r4, #26
 80141d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80141d4:	ebaa 0303 	sub.w	r3, sl, r3
 80141d8:	eba3 0309 	sub.w	r3, r3, r9
 80141dc:	4543      	cmp	r3, r8
 80141de:	f77f af79 	ble.w	80140d4 <_printf_float+0x23c>
 80141e2:	2301      	movs	r3, #1
 80141e4:	465a      	mov	r2, fp
 80141e6:	4631      	mov	r1, r6
 80141e8:	4628      	mov	r0, r5
 80141ea:	47b8      	blx	r7
 80141ec:	3001      	adds	r0, #1
 80141ee:	f43f aeae 	beq.w	8013f4e <_printf_float+0xb6>
 80141f2:	f108 0801 	add.w	r8, r8, #1
 80141f6:	e7ec      	b.n	80141d2 <_printf_float+0x33a>
 80141f8:	4642      	mov	r2, r8
 80141fa:	4631      	mov	r1, r6
 80141fc:	4628      	mov	r0, r5
 80141fe:	47b8      	blx	r7
 8014200:	3001      	adds	r0, #1
 8014202:	d1c2      	bne.n	801418a <_printf_float+0x2f2>
 8014204:	e6a3      	b.n	8013f4e <_printf_float+0xb6>
 8014206:	2301      	movs	r3, #1
 8014208:	4631      	mov	r1, r6
 801420a:	4628      	mov	r0, r5
 801420c:	9206      	str	r2, [sp, #24]
 801420e:	47b8      	blx	r7
 8014210:	3001      	adds	r0, #1
 8014212:	f43f ae9c 	beq.w	8013f4e <_printf_float+0xb6>
 8014216:	9a06      	ldr	r2, [sp, #24]
 8014218:	f10b 0b01 	add.w	fp, fp, #1
 801421c:	e7bb      	b.n	8014196 <_printf_float+0x2fe>
 801421e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014222:	4631      	mov	r1, r6
 8014224:	4628      	mov	r0, r5
 8014226:	47b8      	blx	r7
 8014228:	3001      	adds	r0, #1
 801422a:	d1c0      	bne.n	80141ae <_printf_float+0x316>
 801422c:	e68f      	b.n	8013f4e <_printf_float+0xb6>
 801422e:	9a06      	ldr	r2, [sp, #24]
 8014230:	464b      	mov	r3, r9
 8014232:	4442      	add	r2, r8
 8014234:	4631      	mov	r1, r6
 8014236:	4628      	mov	r0, r5
 8014238:	47b8      	blx	r7
 801423a:	3001      	adds	r0, #1
 801423c:	d1c3      	bne.n	80141c6 <_printf_float+0x32e>
 801423e:	e686      	b.n	8013f4e <_printf_float+0xb6>
 8014240:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8014244:	f1ba 0f01 	cmp.w	sl, #1
 8014248:	dc01      	bgt.n	801424e <_printf_float+0x3b6>
 801424a:	07db      	lsls	r3, r3, #31
 801424c:	d536      	bpl.n	80142bc <_printf_float+0x424>
 801424e:	2301      	movs	r3, #1
 8014250:	4642      	mov	r2, r8
 8014252:	4631      	mov	r1, r6
 8014254:	4628      	mov	r0, r5
 8014256:	47b8      	blx	r7
 8014258:	3001      	adds	r0, #1
 801425a:	f43f ae78 	beq.w	8013f4e <_printf_float+0xb6>
 801425e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014262:	4631      	mov	r1, r6
 8014264:	4628      	mov	r0, r5
 8014266:	47b8      	blx	r7
 8014268:	3001      	adds	r0, #1
 801426a:	f43f ae70 	beq.w	8013f4e <_printf_float+0xb6>
 801426e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8014272:	2200      	movs	r2, #0
 8014274:	2300      	movs	r3, #0
 8014276:	f10a 3aff 	add.w	sl, sl, #4294967295
 801427a:	f7ec fca5 	bl	8000bc8 <__aeabi_dcmpeq>
 801427e:	b9c0      	cbnz	r0, 80142b2 <_printf_float+0x41a>
 8014280:	4653      	mov	r3, sl
 8014282:	f108 0201 	add.w	r2, r8, #1
 8014286:	4631      	mov	r1, r6
 8014288:	4628      	mov	r0, r5
 801428a:	47b8      	blx	r7
 801428c:	3001      	adds	r0, #1
 801428e:	d10c      	bne.n	80142aa <_printf_float+0x412>
 8014290:	e65d      	b.n	8013f4e <_printf_float+0xb6>
 8014292:	2301      	movs	r3, #1
 8014294:	465a      	mov	r2, fp
 8014296:	4631      	mov	r1, r6
 8014298:	4628      	mov	r0, r5
 801429a:	47b8      	blx	r7
 801429c:	3001      	adds	r0, #1
 801429e:	f43f ae56 	beq.w	8013f4e <_printf_float+0xb6>
 80142a2:	f108 0801 	add.w	r8, r8, #1
 80142a6:	45d0      	cmp	r8, sl
 80142a8:	dbf3      	blt.n	8014292 <_printf_float+0x3fa>
 80142aa:	464b      	mov	r3, r9
 80142ac:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80142b0:	e6df      	b.n	8014072 <_printf_float+0x1da>
 80142b2:	f04f 0800 	mov.w	r8, #0
 80142b6:	f104 0b1a 	add.w	fp, r4, #26
 80142ba:	e7f4      	b.n	80142a6 <_printf_float+0x40e>
 80142bc:	2301      	movs	r3, #1
 80142be:	4642      	mov	r2, r8
 80142c0:	e7e1      	b.n	8014286 <_printf_float+0x3ee>
 80142c2:	2301      	movs	r3, #1
 80142c4:	464a      	mov	r2, r9
 80142c6:	4631      	mov	r1, r6
 80142c8:	4628      	mov	r0, r5
 80142ca:	47b8      	blx	r7
 80142cc:	3001      	adds	r0, #1
 80142ce:	f43f ae3e 	beq.w	8013f4e <_printf_float+0xb6>
 80142d2:	f108 0801 	add.w	r8, r8, #1
 80142d6:	68e3      	ldr	r3, [r4, #12]
 80142d8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80142da:	1a5b      	subs	r3, r3, r1
 80142dc:	4543      	cmp	r3, r8
 80142de:	dcf0      	bgt.n	80142c2 <_printf_float+0x42a>
 80142e0:	e6fc      	b.n	80140dc <_printf_float+0x244>
 80142e2:	f04f 0800 	mov.w	r8, #0
 80142e6:	f104 0919 	add.w	r9, r4, #25
 80142ea:	e7f4      	b.n	80142d6 <_printf_float+0x43e>

080142ec <_printf_common>:
 80142ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80142f0:	4616      	mov	r6, r2
 80142f2:	4698      	mov	r8, r3
 80142f4:	688a      	ldr	r2, [r1, #8]
 80142f6:	690b      	ldr	r3, [r1, #16]
 80142f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80142fc:	4293      	cmp	r3, r2
 80142fe:	bfb8      	it	lt
 8014300:	4613      	movlt	r3, r2
 8014302:	6033      	str	r3, [r6, #0]
 8014304:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8014308:	4607      	mov	r7, r0
 801430a:	460c      	mov	r4, r1
 801430c:	b10a      	cbz	r2, 8014312 <_printf_common+0x26>
 801430e:	3301      	adds	r3, #1
 8014310:	6033      	str	r3, [r6, #0]
 8014312:	6823      	ldr	r3, [r4, #0]
 8014314:	0699      	lsls	r1, r3, #26
 8014316:	bf42      	ittt	mi
 8014318:	6833      	ldrmi	r3, [r6, #0]
 801431a:	3302      	addmi	r3, #2
 801431c:	6033      	strmi	r3, [r6, #0]
 801431e:	6825      	ldr	r5, [r4, #0]
 8014320:	f015 0506 	ands.w	r5, r5, #6
 8014324:	d106      	bne.n	8014334 <_printf_common+0x48>
 8014326:	f104 0a19 	add.w	sl, r4, #25
 801432a:	68e3      	ldr	r3, [r4, #12]
 801432c:	6832      	ldr	r2, [r6, #0]
 801432e:	1a9b      	subs	r3, r3, r2
 8014330:	42ab      	cmp	r3, r5
 8014332:	dc26      	bgt.n	8014382 <_printf_common+0x96>
 8014334:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8014338:	6822      	ldr	r2, [r4, #0]
 801433a:	3b00      	subs	r3, #0
 801433c:	bf18      	it	ne
 801433e:	2301      	movne	r3, #1
 8014340:	0692      	lsls	r2, r2, #26
 8014342:	d42b      	bmi.n	801439c <_printf_common+0xb0>
 8014344:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8014348:	4641      	mov	r1, r8
 801434a:	4638      	mov	r0, r7
 801434c:	47c8      	blx	r9
 801434e:	3001      	adds	r0, #1
 8014350:	d01e      	beq.n	8014390 <_printf_common+0xa4>
 8014352:	6823      	ldr	r3, [r4, #0]
 8014354:	6922      	ldr	r2, [r4, #16]
 8014356:	f003 0306 	and.w	r3, r3, #6
 801435a:	2b04      	cmp	r3, #4
 801435c:	bf02      	ittt	eq
 801435e:	68e5      	ldreq	r5, [r4, #12]
 8014360:	6833      	ldreq	r3, [r6, #0]
 8014362:	1aed      	subeq	r5, r5, r3
 8014364:	68a3      	ldr	r3, [r4, #8]
 8014366:	bf0c      	ite	eq
 8014368:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801436c:	2500      	movne	r5, #0
 801436e:	4293      	cmp	r3, r2
 8014370:	bfc4      	itt	gt
 8014372:	1a9b      	subgt	r3, r3, r2
 8014374:	18ed      	addgt	r5, r5, r3
 8014376:	2600      	movs	r6, #0
 8014378:	341a      	adds	r4, #26
 801437a:	42b5      	cmp	r5, r6
 801437c:	d11a      	bne.n	80143b4 <_printf_common+0xc8>
 801437e:	2000      	movs	r0, #0
 8014380:	e008      	b.n	8014394 <_printf_common+0xa8>
 8014382:	2301      	movs	r3, #1
 8014384:	4652      	mov	r2, sl
 8014386:	4641      	mov	r1, r8
 8014388:	4638      	mov	r0, r7
 801438a:	47c8      	blx	r9
 801438c:	3001      	adds	r0, #1
 801438e:	d103      	bne.n	8014398 <_printf_common+0xac>
 8014390:	f04f 30ff 	mov.w	r0, #4294967295
 8014394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014398:	3501      	adds	r5, #1
 801439a:	e7c6      	b.n	801432a <_printf_common+0x3e>
 801439c:	18e1      	adds	r1, r4, r3
 801439e:	1c5a      	adds	r2, r3, #1
 80143a0:	2030      	movs	r0, #48	@ 0x30
 80143a2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80143a6:	4422      	add	r2, r4
 80143a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80143ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80143b0:	3302      	adds	r3, #2
 80143b2:	e7c7      	b.n	8014344 <_printf_common+0x58>
 80143b4:	2301      	movs	r3, #1
 80143b6:	4622      	mov	r2, r4
 80143b8:	4641      	mov	r1, r8
 80143ba:	4638      	mov	r0, r7
 80143bc:	47c8      	blx	r9
 80143be:	3001      	adds	r0, #1
 80143c0:	d0e6      	beq.n	8014390 <_printf_common+0xa4>
 80143c2:	3601      	adds	r6, #1
 80143c4:	e7d9      	b.n	801437a <_printf_common+0x8e>
	...

080143c8 <_printf_i>:
 80143c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80143cc:	7e0f      	ldrb	r7, [r1, #24]
 80143ce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80143d0:	2f78      	cmp	r7, #120	@ 0x78
 80143d2:	4691      	mov	r9, r2
 80143d4:	4680      	mov	r8, r0
 80143d6:	460c      	mov	r4, r1
 80143d8:	469a      	mov	sl, r3
 80143da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80143de:	d807      	bhi.n	80143f0 <_printf_i+0x28>
 80143e0:	2f62      	cmp	r7, #98	@ 0x62
 80143e2:	d80a      	bhi.n	80143fa <_printf_i+0x32>
 80143e4:	2f00      	cmp	r7, #0
 80143e6:	f000 80d2 	beq.w	801458e <_printf_i+0x1c6>
 80143ea:	2f58      	cmp	r7, #88	@ 0x58
 80143ec:	f000 80b9 	beq.w	8014562 <_printf_i+0x19a>
 80143f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80143f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80143f8:	e03a      	b.n	8014470 <_printf_i+0xa8>
 80143fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80143fe:	2b15      	cmp	r3, #21
 8014400:	d8f6      	bhi.n	80143f0 <_printf_i+0x28>
 8014402:	a101      	add	r1, pc, #4	@ (adr r1, 8014408 <_printf_i+0x40>)
 8014404:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014408:	08014461 	.word	0x08014461
 801440c:	08014475 	.word	0x08014475
 8014410:	080143f1 	.word	0x080143f1
 8014414:	080143f1 	.word	0x080143f1
 8014418:	080143f1 	.word	0x080143f1
 801441c:	080143f1 	.word	0x080143f1
 8014420:	08014475 	.word	0x08014475
 8014424:	080143f1 	.word	0x080143f1
 8014428:	080143f1 	.word	0x080143f1
 801442c:	080143f1 	.word	0x080143f1
 8014430:	080143f1 	.word	0x080143f1
 8014434:	08014575 	.word	0x08014575
 8014438:	0801449f 	.word	0x0801449f
 801443c:	0801452f 	.word	0x0801452f
 8014440:	080143f1 	.word	0x080143f1
 8014444:	080143f1 	.word	0x080143f1
 8014448:	08014597 	.word	0x08014597
 801444c:	080143f1 	.word	0x080143f1
 8014450:	0801449f 	.word	0x0801449f
 8014454:	080143f1 	.word	0x080143f1
 8014458:	080143f1 	.word	0x080143f1
 801445c:	08014537 	.word	0x08014537
 8014460:	6833      	ldr	r3, [r6, #0]
 8014462:	1d1a      	adds	r2, r3, #4
 8014464:	681b      	ldr	r3, [r3, #0]
 8014466:	6032      	str	r2, [r6, #0]
 8014468:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801446c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8014470:	2301      	movs	r3, #1
 8014472:	e09d      	b.n	80145b0 <_printf_i+0x1e8>
 8014474:	6833      	ldr	r3, [r6, #0]
 8014476:	6820      	ldr	r0, [r4, #0]
 8014478:	1d19      	adds	r1, r3, #4
 801447a:	6031      	str	r1, [r6, #0]
 801447c:	0606      	lsls	r6, r0, #24
 801447e:	d501      	bpl.n	8014484 <_printf_i+0xbc>
 8014480:	681d      	ldr	r5, [r3, #0]
 8014482:	e003      	b.n	801448c <_printf_i+0xc4>
 8014484:	0645      	lsls	r5, r0, #25
 8014486:	d5fb      	bpl.n	8014480 <_printf_i+0xb8>
 8014488:	f9b3 5000 	ldrsh.w	r5, [r3]
 801448c:	2d00      	cmp	r5, #0
 801448e:	da03      	bge.n	8014498 <_printf_i+0xd0>
 8014490:	232d      	movs	r3, #45	@ 0x2d
 8014492:	426d      	negs	r5, r5
 8014494:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014498:	4859      	ldr	r0, [pc, #356]	@ (8014600 <_printf_i+0x238>)
 801449a:	230a      	movs	r3, #10
 801449c:	e011      	b.n	80144c2 <_printf_i+0xfa>
 801449e:	6821      	ldr	r1, [r4, #0]
 80144a0:	6833      	ldr	r3, [r6, #0]
 80144a2:	0608      	lsls	r0, r1, #24
 80144a4:	f853 5b04 	ldr.w	r5, [r3], #4
 80144a8:	d402      	bmi.n	80144b0 <_printf_i+0xe8>
 80144aa:	0649      	lsls	r1, r1, #25
 80144ac:	bf48      	it	mi
 80144ae:	b2ad      	uxthmi	r5, r5
 80144b0:	2f6f      	cmp	r7, #111	@ 0x6f
 80144b2:	4853      	ldr	r0, [pc, #332]	@ (8014600 <_printf_i+0x238>)
 80144b4:	6033      	str	r3, [r6, #0]
 80144b6:	bf14      	ite	ne
 80144b8:	230a      	movne	r3, #10
 80144ba:	2308      	moveq	r3, #8
 80144bc:	2100      	movs	r1, #0
 80144be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80144c2:	6866      	ldr	r6, [r4, #4]
 80144c4:	60a6      	str	r6, [r4, #8]
 80144c6:	2e00      	cmp	r6, #0
 80144c8:	bfa2      	ittt	ge
 80144ca:	6821      	ldrge	r1, [r4, #0]
 80144cc:	f021 0104 	bicge.w	r1, r1, #4
 80144d0:	6021      	strge	r1, [r4, #0]
 80144d2:	b90d      	cbnz	r5, 80144d8 <_printf_i+0x110>
 80144d4:	2e00      	cmp	r6, #0
 80144d6:	d04b      	beq.n	8014570 <_printf_i+0x1a8>
 80144d8:	4616      	mov	r6, r2
 80144da:	fbb5 f1f3 	udiv	r1, r5, r3
 80144de:	fb03 5711 	mls	r7, r3, r1, r5
 80144e2:	5dc7      	ldrb	r7, [r0, r7]
 80144e4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80144e8:	462f      	mov	r7, r5
 80144ea:	42bb      	cmp	r3, r7
 80144ec:	460d      	mov	r5, r1
 80144ee:	d9f4      	bls.n	80144da <_printf_i+0x112>
 80144f0:	2b08      	cmp	r3, #8
 80144f2:	d10b      	bne.n	801450c <_printf_i+0x144>
 80144f4:	6823      	ldr	r3, [r4, #0]
 80144f6:	07df      	lsls	r7, r3, #31
 80144f8:	d508      	bpl.n	801450c <_printf_i+0x144>
 80144fa:	6923      	ldr	r3, [r4, #16]
 80144fc:	6861      	ldr	r1, [r4, #4]
 80144fe:	4299      	cmp	r1, r3
 8014500:	bfde      	ittt	le
 8014502:	2330      	movle	r3, #48	@ 0x30
 8014504:	f806 3c01 	strble.w	r3, [r6, #-1]
 8014508:	f106 36ff 	addle.w	r6, r6, #4294967295
 801450c:	1b92      	subs	r2, r2, r6
 801450e:	6122      	str	r2, [r4, #16]
 8014510:	f8cd a000 	str.w	sl, [sp]
 8014514:	464b      	mov	r3, r9
 8014516:	aa03      	add	r2, sp, #12
 8014518:	4621      	mov	r1, r4
 801451a:	4640      	mov	r0, r8
 801451c:	f7ff fee6 	bl	80142ec <_printf_common>
 8014520:	3001      	adds	r0, #1
 8014522:	d14a      	bne.n	80145ba <_printf_i+0x1f2>
 8014524:	f04f 30ff 	mov.w	r0, #4294967295
 8014528:	b004      	add	sp, #16
 801452a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801452e:	6823      	ldr	r3, [r4, #0]
 8014530:	f043 0320 	orr.w	r3, r3, #32
 8014534:	6023      	str	r3, [r4, #0]
 8014536:	4833      	ldr	r0, [pc, #204]	@ (8014604 <_printf_i+0x23c>)
 8014538:	2778      	movs	r7, #120	@ 0x78
 801453a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801453e:	6823      	ldr	r3, [r4, #0]
 8014540:	6831      	ldr	r1, [r6, #0]
 8014542:	061f      	lsls	r7, r3, #24
 8014544:	f851 5b04 	ldr.w	r5, [r1], #4
 8014548:	d402      	bmi.n	8014550 <_printf_i+0x188>
 801454a:	065f      	lsls	r7, r3, #25
 801454c:	bf48      	it	mi
 801454e:	b2ad      	uxthmi	r5, r5
 8014550:	6031      	str	r1, [r6, #0]
 8014552:	07d9      	lsls	r1, r3, #31
 8014554:	bf44      	itt	mi
 8014556:	f043 0320 	orrmi.w	r3, r3, #32
 801455a:	6023      	strmi	r3, [r4, #0]
 801455c:	b11d      	cbz	r5, 8014566 <_printf_i+0x19e>
 801455e:	2310      	movs	r3, #16
 8014560:	e7ac      	b.n	80144bc <_printf_i+0xf4>
 8014562:	4827      	ldr	r0, [pc, #156]	@ (8014600 <_printf_i+0x238>)
 8014564:	e7e9      	b.n	801453a <_printf_i+0x172>
 8014566:	6823      	ldr	r3, [r4, #0]
 8014568:	f023 0320 	bic.w	r3, r3, #32
 801456c:	6023      	str	r3, [r4, #0]
 801456e:	e7f6      	b.n	801455e <_printf_i+0x196>
 8014570:	4616      	mov	r6, r2
 8014572:	e7bd      	b.n	80144f0 <_printf_i+0x128>
 8014574:	6833      	ldr	r3, [r6, #0]
 8014576:	6825      	ldr	r5, [r4, #0]
 8014578:	6961      	ldr	r1, [r4, #20]
 801457a:	1d18      	adds	r0, r3, #4
 801457c:	6030      	str	r0, [r6, #0]
 801457e:	062e      	lsls	r6, r5, #24
 8014580:	681b      	ldr	r3, [r3, #0]
 8014582:	d501      	bpl.n	8014588 <_printf_i+0x1c0>
 8014584:	6019      	str	r1, [r3, #0]
 8014586:	e002      	b.n	801458e <_printf_i+0x1c6>
 8014588:	0668      	lsls	r0, r5, #25
 801458a:	d5fb      	bpl.n	8014584 <_printf_i+0x1bc>
 801458c:	8019      	strh	r1, [r3, #0]
 801458e:	2300      	movs	r3, #0
 8014590:	6123      	str	r3, [r4, #16]
 8014592:	4616      	mov	r6, r2
 8014594:	e7bc      	b.n	8014510 <_printf_i+0x148>
 8014596:	6833      	ldr	r3, [r6, #0]
 8014598:	1d1a      	adds	r2, r3, #4
 801459a:	6032      	str	r2, [r6, #0]
 801459c:	681e      	ldr	r6, [r3, #0]
 801459e:	6862      	ldr	r2, [r4, #4]
 80145a0:	2100      	movs	r1, #0
 80145a2:	4630      	mov	r0, r6
 80145a4:	f7eb fe94 	bl	80002d0 <memchr>
 80145a8:	b108      	cbz	r0, 80145ae <_printf_i+0x1e6>
 80145aa:	1b80      	subs	r0, r0, r6
 80145ac:	6060      	str	r0, [r4, #4]
 80145ae:	6863      	ldr	r3, [r4, #4]
 80145b0:	6123      	str	r3, [r4, #16]
 80145b2:	2300      	movs	r3, #0
 80145b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80145b8:	e7aa      	b.n	8014510 <_printf_i+0x148>
 80145ba:	6923      	ldr	r3, [r4, #16]
 80145bc:	4632      	mov	r2, r6
 80145be:	4649      	mov	r1, r9
 80145c0:	4640      	mov	r0, r8
 80145c2:	47d0      	blx	sl
 80145c4:	3001      	adds	r0, #1
 80145c6:	d0ad      	beq.n	8014524 <_printf_i+0x15c>
 80145c8:	6823      	ldr	r3, [r4, #0]
 80145ca:	079b      	lsls	r3, r3, #30
 80145cc:	d413      	bmi.n	80145f6 <_printf_i+0x22e>
 80145ce:	68e0      	ldr	r0, [r4, #12]
 80145d0:	9b03      	ldr	r3, [sp, #12]
 80145d2:	4298      	cmp	r0, r3
 80145d4:	bfb8      	it	lt
 80145d6:	4618      	movlt	r0, r3
 80145d8:	e7a6      	b.n	8014528 <_printf_i+0x160>
 80145da:	2301      	movs	r3, #1
 80145dc:	4632      	mov	r2, r6
 80145de:	4649      	mov	r1, r9
 80145e0:	4640      	mov	r0, r8
 80145e2:	47d0      	blx	sl
 80145e4:	3001      	adds	r0, #1
 80145e6:	d09d      	beq.n	8014524 <_printf_i+0x15c>
 80145e8:	3501      	adds	r5, #1
 80145ea:	68e3      	ldr	r3, [r4, #12]
 80145ec:	9903      	ldr	r1, [sp, #12]
 80145ee:	1a5b      	subs	r3, r3, r1
 80145f0:	42ab      	cmp	r3, r5
 80145f2:	dcf2      	bgt.n	80145da <_printf_i+0x212>
 80145f4:	e7eb      	b.n	80145ce <_printf_i+0x206>
 80145f6:	2500      	movs	r5, #0
 80145f8:	f104 0619 	add.w	r6, r4, #25
 80145fc:	e7f5      	b.n	80145ea <_printf_i+0x222>
 80145fe:	bf00      	nop
 8014600:	080d4922 	.word	0x080d4922
 8014604:	080d4933 	.word	0x080d4933

08014608 <std>:
 8014608:	2300      	movs	r3, #0
 801460a:	b510      	push	{r4, lr}
 801460c:	4604      	mov	r4, r0
 801460e:	e9c0 3300 	strd	r3, r3, [r0]
 8014612:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014616:	6083      	str	r3, [r0, #8]
 8014618:	8181      	strh	r1, [r0, #12]
 801461a:	6643      	str	r3, [r0, #100]	@ 0x64
 801461c:	81c2      	strh	r2, [r0, #14]
 801461e:	6183      	str	r3, [r0, #24]
 8014620:	4619      	mov	r1, r3
 8014622:	2208      	movs	r2, #8
 8014624:	305c      	adds	r0, #92	@ 0x5c
 8014626:	f000 fa19 	bl	8014a5c <memset>
 801462a:	4b0d      	ldr	r3, [pc, #52]	@ (8014660 <std+0x58>)
 801462c:	6263      	str	r3, [r4, #36]	@ 0x24
 801462e:	4b0d      	ldr	r3, [pc, #52]	@ (8014664 <std+0x5c>)
 8014630:	62a3      	str	r3, [r4, #40]	@ 0x28
 8014632:	4b0d      	ldr	r3, [pc, #52]	@ (8014668 <std+0x60>)
 8014634:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8014636:	4b0d      	ldr	r3, [pc, #52]	@ (801466c <std+0x64>)
 8014638:	6323      	str	r3, [r4, #48]	@ 0x30
 801463a:	4b0d      	ldr	r3, [pc, #52]	@ (8014670 <std+0x68>)
 801463c:	6224      	str	r4, [r4, #32]
 801463e:	429c      	cmp	r4, r3
 8014640:	d006      	beq.n	8014650 <std+0x48>
 8014642:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8014646:	4294      	cmp	r4, r2
 8014648:	d002      	beq.n	8014650 <std+0x48>
 801464a:	33d0      	adds	r3, #208	@ 0xd0
 801464c:	429c      	cmp	r4, r3
 801464e:	d105      	bne.n	801465c <std+0x54>
 8014650:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8014654:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014658:	f000 ba8c 	b.w	8014b74 <__retarget_lock_init_recursive>
 801465c:	bd10      	pop	{r4, pc}
 801465e:	bf00      	nop
 8014660:	080148ad 	.word	0x080148ad
 8014664:	080148cf 	.word	0x080148cf
 8014668:	08014907 	.word	0x08014907
 801466c:	0801492b 	.word	0x0801492b
 8014670:	2002e760 	.word	0x2002e760

08014674 <stdio_exit_handler>:
 8014674:	4a02      	ldr	r2, [pc, #8]	@ (8014680 <stdio_exit_handler+0xc>)
 8014676:	4903      	ldr	r1, [pc, #12]	@ (8014684 <stdio_exit_handler+0x10>)
 8014678:	4803      	ldr	r0, [pc, #12]	@ (8014688 <stdio_exit_handler+0x14>)
 801467a:	f000 b869 	b.w	8014750 <_fwalk_sglue>
 801467e:	bf00      	nop
 8014680:	2000081c 	.word	0x2000081c
 8014684:	08016615 	.word	0x08016615
 8014688:	2000082c 	.word	0x2000082c

0801468c <cleanup_stdio>:
 801468c:	6841      	ldr	r1, [r0, #4]
 801468e:	4b0c      	ldr	r3, [pc, #48]	@ (80146c0 <cleanup_stdio+0x34>)
 8014690:	4299      	cmp	r1, r3
 8014692:	b510      	push	{r4, lr}
 8014694:	4604      	mov	r4, r0
 8014696:	d001      	beq.n	801469c <cleanup_stdio+0x10>
 8014698:	f001 ffbc 	bl	8016614 <_fflush_r>
 801469c:	68a1      	ldr	r1, [r4, #8]
 801469e:	4b09      	ldr	r3, [pc, #36]	@ (80146c4 <cleanup_stdio+0x38>)
 80146a0:	4299      	cmp	r1, r3
 80146a2:	d002      	beq.n	80146aa <cleanup_stdio+0x1e>
 80146a4:	4620      	mov	r0, r4
 80146a6:	f001 ffb5 	bl	8016614 <_fflush_r>
 80146aa:	68e1      	ldr	r1, [r4, #12]
 80146ac:	4b06      	ldr	r3, [pc, #24]	@ (80146c8 <cleanup_stdio+0x3c>)
 80146ae:	4299      	cmp	r1, r3
 80146b0:	d004      	beq.n	80146bc <cleanup_stdio+0x30>
 80146b2:	4620      	mov	r0, r4
 80146b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80146b8:	f001 bfac 	b.w	8016614 <_fflush_r>
 80146bc:	bd10      	pop	{r4, pc}
 80146be:	bf00      	nop
 80146c0:	2002e760 	.word	0x2002e760
 80146c4:	2002e7c8 	.word	0x2002e7c8
 80146c8:	2002e830 	.word	0x2002e830

080146cc <global_stdio_init.part.0>:
 80146cc:	b510      	push	{r4, lr}
 80146ce:	4b0b      	ldr	r3, [pc, #44]	@ (80146fc <global_stdio_init.part.0+0x30>)
 80146d0:	4c0b      	ldr	r4, [pc, #44]	@ (8014700 <global_stdio_init.part.0+0x34>)
 80146d2:	4a0c      	ldr	r2, [pc, #48]	@ (8014704 <global_stdio_init.part.0+0x38>)
 80146d4:	601a      	str	r2, [r3, #0]
 80146d6:	4620      	mov	r0, r4
 80146d8:	2200      	movs	r2, #0
 80146da:	2104      	movs	r1, #4
 80146dc:	f7ff ff94 	bl	8014608 <std>
 80146e0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80146e4:	2201      	movs	r2, #1
 80146e6:	2109      	movs	r1, #9
 80146e8:	f7ff ff8e 	bl	8014608 <std>
 80146ec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80146f0:	2202      	movs	r2, #2
 80146f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80146f6:	2112      	movs	r1, #18
 80146f8:	f7ff bf86 	b.w	8014608 <std>
 80146fc:	2002e898 	.word	0x2002e898
 8014700:	2002e760 	.word	0x2002e760
 8014704:	08014675 	.word	0x08014675

08014708 <__sfp_lock_acquire>:
 8014708:	4801      	ldr	r0, [pc, #4]	@ (8014710 <__sfp_lock_acquire+0x8>)
 801470a:	f000 ba34 	b.w	8014b76 <__retarget_lock_acquire_recursive>
 801470e:	bf00      	nop
 8014710:	2002e8a1 	.word	0x2002e8a1

08014714 <__sfp_lock_release>:
 8014714:	4801      	ldr	r0, [pc, #4]	@ (801471c <__sfp_lock_release+0x8>)
 8014716:	f000 ba2f 	b.w	8014b78 <__retarget_lock_release_recursive>
 801471a:	bf00      	nop
 801471c:	2002e8a1 	.word	0x2002e8a1

08014720 <__sinit>:
 8014720:	b510      	push	{r4, lr}
 8014722:	4604      	mov	r4, r0
 8014724:	f7ff fff0 	bl	8014708 <__sfp_lock_acquire>
 8014728:	6a23      	ldr	r3, [r4, #32]
 801472a:	b11b      	cbz	r3, 8014734 <__sinit+0x14>
 801472c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014730:	f7ff bff0 	b.w	8014714 <__sfp_lock_release>
 8014734:	4b04      	ldr	r3, [pc, #16]	@ (8014748 <__sinit+0x28>)
 8014736:	6223      	str	r3, [r4, #32]
 8014738:	4b04      	ldr	r3, [pc, #16]	@ (801474c <__sinit+0x2c>)
 801473a:	681b      	ldr	r3, [r3, #0]
 801473c:	2b00      	cmp	r3, #0
 801473e:	d1f5      	bne.n	801472c <__sinit+0xc>
 8014740:	f7ff ffc4 	bl	80146cc <global_stdio_init.part.0>
 8014744:	e7f2      	b.n	801472c <__sinit+0xc>
 8014746:	bf00      	nop
 8014748:	0801468d 	.word	0x0801468d
 801474c:	2002e898 	.word	0x2002e898

08014750 <_fwalk_sglue>:
 8014750:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014754:	4607      	mov	r7, r0
 8014756:	4688      	mov	r8, r1
 8014758:	4614      	mov	r4, r2
 801475a:	2600      	movs	r6, #0
 801475c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014760:	f1b9 0901 	subs.w	r9, r9, #1
 8014764:	d505      	bpl.n	8014772 <_fwalk_sglue+0x22>
 8014766:	6824      	ldr	r4, [r4, #0]
 8014768:	2c00      	cmp	r4, #0
 801476a:	d1f7      	bne.n	801475c <_fwalk_sglue+0xc>
 801476c:	4630      	mov	r0, r6
 801476e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014772:	89ab      	ldrh	r3, [r5, #12]
 8014774:	2b01      	cmp	r3, #1
 8014776:	d907      	bls.n	8014788 <_fwalk_sglue+0x38>
 8014778:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801477c:	3301      	adds	r3, #1
 801477e:	d003      	beq.n	8014788 <_fwalk_sglue+0x38>
 8014780:	4629      	mov	r1, r5
 8014782:	4638      	mov	r0, r7
 8014784:	47c0      	blx	r8
 8014786:	4306      	orrs	r6, r0
 8014788:	3568      	adds	r5, #104	@ 0x68
 801478a:	e7e9      	b.n	8014760 <_fwalk_sglue+0x10>

0801478c <iprintf>:
 801478c:	b40f      	push	{r0, r1, r2, r3}
 801478e:	b507      	push	{r0, r1, r2, lr}
 8014790:	4906      	ldr	r1, [pc, #24]	@ (80147ac <iprintf+0x20>)
 8014792:	ab04      	add	r3, sp, #16
 8014794:	6808      	ldr	r0, [r1, #0]
 8014796:	f853 2b04 	ldr.w	r2, [r3], #4
 801479a:	6881      	ldr	r1, [r0, #8]
 801479c:	9301      	str	r3, [sp, #4]
 801479e:	f001 fd9d 	bl	80162dc <_vfiprintf_r>
 80147a2:	b003      	add	sp, #12
 80147a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80147a8:	b004      	add	sp, #16
 80147aa:	4770      	bx	lr
 80147ac:	20000828 	.word	0x20000828

080147b0 <_puts_r>:
 80147b0:	6a03      	ldr	r3, [r0, #32]
 80147b2:	b570      	push	{r4, r5, r6, lr}
 80147b4:	6884      	ldr	r4, [r0, #8]
 80147b6:	4605      	mov	r5, r0
 80147b8:	460e      	mov	r6, r1
 80147ba:	b90b      	cbnz	r3, 80147c0 <_puts_r+0x10>
 80147bc:	f7ff ffb0 	bl	8014720 <__sinit>
 80147c0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80147c2:	07db      	lsls	r3, r3, #31
 80147c4:	d405      	bmi.n	80147d2 <_puts_r+0x22>
 80147c6:	89a3      	ldrh	r3, [r4, #12]
 80147c8:	0598      	lsls	r0, r3, #22
 80147ca:	d402      	bmi.n	80147d2 <_puts_r+0x22>
 80147cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80147ce:	f000 f9d2 	bl	8014b76 <__retarget_lock_acquire_recursive>
 80147d2:	89a3      	ldrh	r3, [r4, #12]
 80147d4:	0719      	lsls	r1, r3, #28
 80147d6:	d502      	bpl.n	80147de <_puts_r+0x2e>
 80147d8:	6923      	ldr	r3, [r4, #16]
 80147da:	2b00      	cmp	r3, #0
 80147dc:	d135      	bne.n	801484a <_puts_r+0x9a>
 80147de:	4621      	mov	r1, r4
 80147e0:	4628      	mov	r0, r5
 80147e2:	f000 f8e5 	bl	80149b0 <__swsetup_r>
 80147e6:	b380      	cbz	r0, 801484a <_puts_r+0x9a>
 80147e8:	f04f 35ff 	mov.w	r5, #4294967295
 80147ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80147ee:	07da      	lsls	r2, r3, #31
 80147f0:	d405      	bmi.n	80147fe <_puts_r+0x4e>
 80147f2:	89a3      	ldrh	r3, [r4, #12]
 80147f4:	059b      	lsls	r3, r3, #22
 80147f6:	d402      	bmi.n	80147fe <_puts_r+0x4e>
 80147f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80147fa:	f000 f9bd 	bl	8014b78 <__retarget_lock_release_recursive>
 80147fe:	4628      	mov	r0, r5
 8014800:	bd70      	pop	{r4, r5, r6, pc}
 8014802:	2b00      	cmp	r3, #0
 8014804:	da04      	bge.n	8014810 <_puts_r+0x60>
 8014806:	69a2      	ldr	r2, [r4, #24]
 8014808:	429a      	cmp	r2, r3
 801480a:	dc17      	bgt.n	801483c <_puts_r+0x8c>
 801480c:	290a      	cmp	r1, #10
 801480e:	d015      	beq.n	801483c <_puts_r+0x8c>
 8014810:	6823      	ldr	r3, [r4, #0]
 8014812:	1c5a      	adds	r2, r3, #1
 8014814:	6022      	str	r2, [r4, #0]
 8014816:	7019      	strb	r1, [r3, #0]
 8014818:	68a3      	ldr	r3, [r4, #8]
 801481a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801481e:	3b01      	subs	r3, #1
 8014820:	60a3      	str	r3, [r4, #8]
 8014822:	2900      	cmp	r1, #0
 8014824:	d1ed      	bne.n	8014802 <_puts_r+0x52>
 8014826:	2b00      	cmp	r3, #0
 8014828:	da11      	bge.n	801484e <_puts_r+0x9e>
 801482a:	4622      	mov	r2, r4
 801482c:	210a      	movs	r1, #10
 801482e:	4628      	mov	r0, r5
 8014830:	f000 f87f 	bl	8014932 <__swbuf_r>
 8014834:	3001      	adds	r0, #1
 8014836:	d0d7      	beq.n	80147e8 <_puts_r+0x38>
 8014838:	250a      	movs	r5, #10
 801483a:	e7d7      	b.n	80147ec <_puts_r+0x3c>
 801483c:	4622      	mov	r2, r4
 801483e:	4628      	mov	r0, r5
 8014840:	f000 f877 	bl	8014932 <__swbuf_r>
 8014844:	3001      	adds	r0, #1
 8014846:	d1e7      	bne.n	8014818 <_puts_r+0x68>
 8014848:	e7ce      	b.n	80147e8 <_puts_r+0x38>
 801484a:	3e01      	subs	r6, #1
 801484c:	e7e4      	b.n	8014818 <_puts_r+0x68>
 801484e:	6823      	ldr	r3, [r4, #0]
 8014850:	1c5a      	adds	r2, r3, #1
 8014852:	6022      	str	r2, [r4, #0]
 8014854:	220a      	movs	r2, #10
 8014856:	701a      	strb	r2, [r3, #0]
 8014858:	e7ee      	b.n	8014838 <_puts_r+0x88>
	...

0801485c <puts>:
 801485c:	4b02      	ldr	r3, [pc, #8]	@ (8014868 <puts+0xc>)
 801485e:	4601      	mov	r1, r0
 8014860:	6818      	ldr	r0, [r3, #0]
 8014862:	f7ff bfa5 	b.w	80147b0 <_puts_r>
 8014866:	bf00      	nop
 8014868:	20000828 	.word	0x20000828

0801486c <siprintf>:
 801486c:	b40e      	push	{r1, r2, r3}
 801486e:	b500      	push	{lr}
 8014870:	b09c      	sub	sp, #112	@ 0x70
 8014872:	ab1d      	add	r3, sp, #116	@ 0x74
 8014874:	9002      	str	r0, [sp, #8]
 8014876:	9006      	str	r0, [sp, #24]
 8014878:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801487c:	4809      	ldr	r0, [pc, #36]	@ (80148a4 <siprintf+0x38>)
 801487e:	9107      	str	r1, [sp, #28]
 8014880:	9104      	str	r1, [sp, #16]
 8014882:	4909      	ldr	r1, [pc, #36]	@ (80148a8 <siprintf+0x3c>)
 8014884:	f853 2b04 	ldr.w	r2, [r3], #4
 8014888:	9105      	str	r1, [sp, #20]
 801488a:	6800      	ldr	r0, [r0, #0]
 801488c:	9301      	str	r3, [sp, #4]
 801488e:	a902      	add	r1, sp, #8
 8014890:	f001 fbfe 	bl	8016090 <_svfiprintf_r>
 8014894:	9b02      	ldr	r3, [sp, #8]
 8014896:	2200      	movs	r2, #0
 8014898:	701a      	strb	r2, [r3, #0]
 801489a:	b01c      	add	sp, #112	@ 0x70
 801489c:	f85d eb04 	ldr.w	lr, [sp], #4
 80148a0:	b003      	add	sp, #12
 80148a2:	4770      	bx	lr
 80148a4:	20000828 	.word	0x20000828
 80148a8:	ffff0208 	.word	0xffff0208

080148ac <__sread>:
 80148ac:	b510      	push	{r4, lr}
 80148ae:	460c      	mov	r4, r1
 80148b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80148b4:	f000 f900 	bl	8014ab8 <_read_r>
 80148b8:	2800      	cmp	r0, #0
 80148ba:	bfab      	itete	ge
 80148bc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80148be:	89a3      	ldrhlt	r3, [r4, #12]
 80148c0:	181b      	addge	r3, r3, r0
 80148c2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80148c6:	bfac      	ite	ge
 80148c8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80148ca:	81a3      	strhlt	r3, [r4, #12]
 80148cc:	bd10      	pop	{r4, pc}

080148ce <__swrite>:
 80148ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80148d2:	461f      	mov	r7, r3
 80148d4:	898b      	ldrh	r3, [r1, #12]
 80148d6:	05db      	lsls	r3, r3, #23
 80148d8:	4605      	mov	r5, r0
 80148da:	460c      	mov	r4, r1
 80148dc:	4616      	mov	r6, r2
 80148de:	d505      	bpl.n	80148ec <__swrite+0x1e>
 80148e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80148e4:	2302      	movs	r3, #2
 80148e6:	2200      	movs	r2, #0
 80148e8:	f000 f8d4 	bl	8014a94 <_lseek_r>
 80148ec:	89a3      	ldrh	r3, [r4, #12]
 80148ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80148f2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80148f6:	81a3      	strh	r3, [r4, #12]
 80148f8:	4632      	mov	r2, r6
 80148fa:	463b      	mov	r3, r7
 80148fc:	4628      	mov	r0, r5
 80148fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014902:	f000 b8fb 	b.w	8014afc <_write_r>

08014906 <__sseek>:
 8014906:	b510      	push	{r4, lr}
 8014908:	460c      	mov	r4, r1
 801490a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801490e:	f000 f8c1 	bl	8014a94 <_lseek_r>
 8014912:	1c43      	adds	r3, r0, #1
 8014914:	89a3      	ldrh	r3, [r4, #12]
 8014916:	bf15      	itete	ne
 8014918:	6560      	strne	r0, [r4, #84]	@ 0x54
 801491a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801491e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8014922:	81a3      	strheq	r3, [r4, #12]
 8014924:	bf18      	it	ne
 8014926:	81a3      	strhne	r3, [r4, #12]
 8014928:	bd10      	pop	{r4, pc}

0801492a <__sclose>:
 801492a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801492e:	f000 b8a1 	b.w	8014a74 <_close_r>

08014932 <__swbuf_r>:
 8014932:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014934:	460e      	mov	r6, r1
 8014936:	4614      	mov	r4, r2
 8014938:	4605      	mov	r5, r0
 801493a:	b118      	cbz	r0, 8014944 <__swbuf_r+0x12>
 801493c:	6a03      	ldr	r3, [r0, #32]
 801493e:	b90b      	cbnz	r3, 8014944 <__swbuf_r+0x12>
 8014940:	f7ff feee 	bl	8014720 <__sinit>
 8014944:	69a3      	ldr	r3, [r4, #24]
 8014946:	60a3      	str	r3, [r4, #8]
 8014948:	89a3      	ldrh	r3, [r4, #12]
 801494a:	071a      	lsls	r2, r3, #28
 801494c:	d501      	bpl.n	8014952 <__swbuf_r+0x20>
 801494e:	6923      	ldr	r3, [r4, #16]
 8014950:	b943      	cbnz	r3, 8014964 <__swbuf_r+0x32>
 8014952:	4621      	mov	r1, r4
 8014954:	4628      	mov	r0, r5
 8014956:	f000 f82b 	bl	80149b0 <__swsetup_r>
 801495a:	b118      	cbz	r0, 8014964 <__swbuf_r+0x32>
 801495c:	f04f 37ff 	mov.w	r7, #4294967295
 8014960:	4638      	mov	r0, r7
 8014962:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014964:	6823      	ldr	r3, [r4, #0]
 8014966:	6922      	ldr	r2, [r4, #16]
 8014968:	1a98      	subs	r0, r3, r2
 801496a:	6963      	ldr	r3, [r4, #20]
 801496c:	b2f6      	uxtb	r6, r6
 801496e:	4283      	cmp	r3, r0
 8014970:	4637      	mov	r7, r6
 8014972:	dc05      	bgt.n	8014980 <__swbuf_r+0x4e>
 8014974:	4621      	mov	r1, r4
 8014976:	4628      	mov	r0, r5
 8014978:	f001 fe4c 	bl	8016614 <_fflush_r>
 801497c:	2800      	cmp	r0, #0
 801497e:	d1ed      	bne.n	801495c <__swbuf_r+0x2a>
 8014980:	68a3      	ldr	r3, [r4, #8]
 8014982:	3b01      	subs	r3, #1
 8014984:	60a3      	str	r3, [r4, #8]
 8014986:	6823      	ldr	r3, [r4, #0]
 8014988:	1c5a      	adds	r2, r3, #1
 801498a:	6022      	str	r2, [r4, #0]
 801498c:	701e      	strb	r6, [r3, #0]
 801498e:	6962      	ldr	r2, [r4, #20]
 8014990:	1c43      	adds	r3, r0, #1
 8014992:	429a      	cmp	r2, r3
 8014994:	d004      	beq.n	80149a0 <__swbuf_r+0x6e>
 8014996:	89a3      	ldrh	r3, [r4, #12]
 8014998:	07db      	lsls	r3, r3, #31
 801499a:	d5e1      	bpl.n	8014960 <__swbuf_r+0x2e>
 801499c:	2e0a      	cmp	r6, #10
 801499e:	d1df      	bne.n	8014960 <__swbuf_r+0x2e>
 80149a0:	4621      	mov	r1, r4
 80149a2:	4628      	mov	r0, r5
 80149a4:	f001 fe36 	bl	8016614 <_fflush_r>
 80149a8:	2800      	cmp	r0, #0
 80149aa:	d0d9      	beq.n	8014960 <__swbuf_r+0x2e>
 80149ac:	e7d6      	b.n	801495c <__swbuf_r+0x2a>
	...

080149b0 <__swsetup_r>:
 80149b0:	b538      	push	{r3, r4, r5, lr}
 80149b2:	4b29      	ldr	r3, [pc, #164]	@ (8014a58 <__swsetup_r+0xa8>)
 80149b4:	4605      	mov	r5, r0
 80149b6:	6818      	ldr	r0, [r3, #0]
 80149b8:	460c      	mov	r4, r1
 80149ba:	b118      	cbz	r0, 80149c4 <__swsetup_r+0x14>
 80149bc:	6a03      	ldr	r3, [r0, #32]
 80149be:	b90b      	cbnz	r3, 80149c4 <__swsetup_r+0x14>
 80149c0:	f7ff feae 	bl	8014720 <__sinit>
 80149c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80149c8:	0719      	lsls	r1, r3, #28
 80149ca:	d422      	bmi.n	8014a12 <__swsetup_r+0x62>
 80149cc:	06da      	lsls	r2, r3, #27
 80149ce:	d407      	bmi.n	80149e0 <__swsetup_r+0x30>
 80149d0:	2209      	movs	r2, #9
 80149d2:	602a      	str	r2, [r5, #0]
 80149d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80149d8:	81a3      	strh	r3, [r4, #12]
 80149da:	f04f 30ff 	mov.w	r0, #4294967295
 80149de:	e033      	b.n	8014a48 <__swsetup_r+0x98>
 80149e0:	0758      	lsls	r0, r3, #29
 80149e2:	d512      	bpl.n	8014a0a <__swsetup_r+0x5a>
 80149e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80149e6:	b141      	cbz	r1, 80149fa <__swsetup_r+0x4a>
 80149e8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80149ec:	4299      	cmp	r1, r3
 80149ee:	d002      	beq.n	80149f6 <__swsetup_r+0x46>
 80149f0:	4628      	mov	r0, r5
 80149f2:	f000 ff1d 	bl	8015830 <_free_r>
 80149f6:	2300      	movs	r3, #0
 80149f8:	6363      	str	r3, [r4, #52]	@ 0x34
 80149fa:	89a3      	ldrh	r3, [r4, #12]
 80149fc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8014a00:	81a3      	strh	r3, [r4, #12]
 8014a02:	2300      	movs	r3, #0
 8014a04:	6063      	str	r3, [r4, #4]
 8014a06:	6923      	ldr	r3, [r4, #16]
 8014a08:	6023      	str	r3, [r4, #0]
 8014a0a:	89a3      	ldrh	r3, [r4, #12]
 8014a0c:	f043 0308 	orr.w	r3, r3, #8
 8014a10:	81a3      	strh	r3, [r4, #12]
 8014a12:	6923      	ldr	r3, [r4, #16]
 8014a14:	b94b      	cbnz	r3, 8014a2a <__swsetup_r+0x7a>
 8014a16:	89a3      	ldrh	r3, [r4, #12]
 8014a18:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8014a1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014a20:	d003      	beq.n	8014a2a <__swsetup_r+0x7a>
 8014a22:	4621      	mov	r1, r4
 8014a24:	4628      	mov	r0, r5
 8014a26:	f001 fe43 	bl	80166b0 <__smakebuf_r>
 8014a2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014a2e:	f013 0201 	ands.w	r2, r3, #1
 8014a32:	d00a      	beq.n	8014a4a <__swsetup_r+0x9a>
 8014a34:	2200      	movs	r2, #0
 8014a36:	60a2      	str	r2, [r4, #8]
 8014a38:	6962      	ldr	r2, [r4, #20]
 8014a3a:	4252      	negs	r2, r2
 8014a3c:	61a2      	str	r2, [r4, #24]
 8014a3e:	6922      	ldr	r2, [r4, #16]
 8014a40:	b942      	cbnz	r2, 8014a54 <__swsetup_r+0xa4>
 8014a42:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8014a46:	d1c5      	bne.n	80149d4 <__swsetup_r+0x24>
 8014a48:	bd38      	pop	{r3, r4, r5, pc}
 8014a4a:	0799      	lsls	r1, r3, #30
 8014a4c:	bf58      	it	pl
 8014a4e:	6962      	ldrpl	r2, [r4, #20]
 8014a50:	60a2      	str	r2, [r4, #8]
 8014a52:	e7f4      	b.n	8014a3e <__swsetup_r+0x8e>
 8014a54:	2000      	movs	r0, #0
 8014a56:	e7f7      	b.n	8014a48 <__swsetup_r+0x98>
 8014a58:	20000828 	.word	0x20000828

08014a5c <memset>:
 8014a5c:	4402      	add	r2, r0
 8014a5e:	4603      	mov	r3, r0
 8014a60:	4293      	cmp	r3, r2
 8014a62:	d100      	bne.n	8014a66 <memset+0xa>
 8014a64:	4770      	bx	lr
 8014a66:	f803 1b01 	strb.w	r1, [r3], #1
 8014a6a:	e7f9      	b.n	8014a60 <memset+0x4>

08014a6c <_localeconv_r>:
 8014a6c:	4800      	ldr	r0, [pc, #0]	@ (8014a70 <_localeconv_r+0x4>)
 8014a6e:	4770      	bx	lr
 8014a70:	20000968 	.word	0x20000968

08014a74 <_close_r>:
 8014a74:	b538      	push	{r3, r4, r5, lr}
 8014a76:	4d06      	ldr	r5, [pc, #24]	@ (8014a90 <_close_r+0x1c>)
 8014a78:	2300      	movs	r3, #0
 8014a7a:	4604      	mov	r4, r0
 8014a7c:	4608      	mov	r0, r1
 8014a7e:	602b      	str	r3, [r5, #0]
 8014a80:	f7ed fe90 	bl	80027a4 <_close>
 8014a84:	1c43      	adds	r3, r0, #1
 8014a86:	d102      	bne.n	8014a8e <_close_r+0x1a>
 8014a88:	682b      	ldr	r3, [r5, #0]
 8014a8a:	b103      	cbz	r3, 8014a8e <_close_r+0x1a>
 8014a8c:	6023      	str	r3, [r4, #0]
 8014a8e:	bd38      	pop	{r3, r4, r5, pc}
 8014a90:	2002e89c 	.word	0x2002e89c

08014a94 <_lseek_r>:
 8014a94:	b538      	push	{r3, r4, r5, lr}
 8014a96:	4d07      	ldr	r5, [pc, #28]	@ (8014ab4 <_lseek_r+0x20>)
 8014a98:	4604      	mov	r4, r0
 8014a9a:	4608      	mov	r0, r1
 8014a9c:	4611      	mov	r1, r2
 8014a9e:	2200      	movs	r2, #0
 8014aa0:	602a      	str	r2, [r5, #0]
 8014aa2:	461a      	mov	r2, r3
 8014aa4:	f7ed fea5 	bl	80027f2 <_lseek>
 8014aa8:	1c43      	adds	r3, r0, #1
 8014aaa:	d102      	bne.n	8014ab2 <_lseek_r+0x1e>
 8014aac:	682b      	ldr	r3, [r5, #0]
 8014aae:	b103      	cbz	r3, 8014ab2 <_lseek_r+0x1e>
 8014ab0:	6023      	str	r3, [r4, #0]
 8014ab2:	bd38      	pop	{r3, r4, r5, pc}
 8014ab4:	2002e89c 	.word	0x2002e89c

08014ab8 <_read_r>:
 8014ab8:	b538      	push	{r3, r4, r5, lr}
 8014aba:	4d07      	ldr	r5, [pc, #28]	@ (8014ad8 <_read_r+0x20>)
 8014abc:	4604      	mov	r4, r0
 8014abe:	4608      	mov	r0, r1
 8014ac0:	4611      	mov	r1, r2
 8014ac2:	2200      	movs	r2, #0
 8014ac4:	602a      	str	r2, [r5, #0]
 8014ac6:	461a      	mov	r2, r3
 8014ac8:	f7ed fe33 	bl	8002732 <_read>
 8014acc:	1c43      	adds	r3, r0, #1
 8014ace:	d102      	bne.n	8014ad6 <_read_r+0x1e>
 8014ad0:	682b      	ldr	r3, [r5, #0]
 8014ad2:	b103      	cbz	r3, 8014ad6 <_read_r+0x1e>
 8014ad4:	6023      	str	r3, [r4, #0]
 8014ad6:	bd38      	pop	{r3, r4, r5, pc}
 8014ad8:	2002e89c 	.word	0x2002e89c

08014adc <_sbrk_r>:
 8014adc:	b538      	push	{r3, r4, r5, lr}
 8014ade:	4d06      	ldr	r5, [pc, #24]	@ (8014af8 <_sbrk_r+0x1c>)
 8014ae0:	2300      	movs	r3, #0
 8014ae2:	4604      	mov	r4, r0
 8014ae4:	4608      	mov	r0, r1
 8014ae6:	602b      	str	r3, [r5, #0]
 8014ae8:	f7ed fe90 	bl	800280c <_sbrk>
 8014aec:	1c43      	adds	r3, r0, #1
 8014aee:	d102      	bne.n	8014af6 <_sbrk_r+0x1a>
 8014af0:	682b      	ldr	r3, [r5, #0]
 8014af2:	b103      	cbz	r3, 8014af6 <_sbrk_r+0x1a>
 8014af4:	6023      	str	r3, [r4, #0]
 8014af6:	bd38      	pop	{r3, r4, r5, pc}
 8014af8:	2002e89c 	.word	0x2002e89c

08014afc <_write_r>:
 8014afc:	b538      	push	{r3, r4, r5, lr}
 8014afe:	4d07      	ldr	r5, [pc, #28]	@ (8014b1c <_write_r+0x20>)
 8014b00:	4604      	mov	r4, r0
 8014b02:	4608      	mov	r0, r1
 8014b04:	4611      	mov	r1, r2
 8014b06:	2200      	movs	r2, #0
 8014b08:	602a      	str	r2, [r5, #0]
 8014b0a:	461a      	mov	r2, r3
 8014b0c:	f7ed fe2e 	bl	800276c <_write>
 8014b10:	1c43      	adds	r3, r0, #1
 8014b12:	d102      	bne.n	8014b1a <_write_r+0x1e>
 8014b14:	682b      	ldr	r3, [r5, #0]
 8014b16:	b103      	cbz	r3, 8014b1a <_write_r+0x1e>
 8014b18:	6023      	str	r3, [r4, #0]
 8014b1a:	bd38      	pop	{r3, r4, r5, pc}
 8014b1c:	2002e89c 	.word	0x2002e89c

08014b20 <__errno>:
 8014b20:	4b01      	ldr	r3, [pc, #4]	@ (8014b28 <__errno+0x8>)
 8014b22:	6818      	ldr	r0, [r3, #0]
 8014b24:	4770      	bx	lr
 8014b26:	bf00      	nop
 8014b28:	20000828 	.word	0x20000828

08014b2c <__libc_init_array>:
 8014b2c:	b570      	push	{r4, r5, r6, lr}
 8014b2e:	4d0d      	ldr	r5, [pc, #52]	@ (8014b64 <__libc_init_array+0x38>)
 8014b30:	4c0d      	ldr	r4, [pc, #52]	@ (8014b68 <__libc_init_array+0x3c>)
 8014b32:	1b64      	subs	r4, r4, r5
 8014b34:	10a4      	asrs	r4, r4, #2
 8014b36:	2600      	movs	r6, #0
 8014b38:	42a6      	cmp	r6, r4
 8014b3a:	d109      	bne.n	8014b50 <__libc_init_array+0x24>
 8014b3c:	4d0b      	ldr	r5, [pc, #44]	@ (8014b6c <__libc_init_array+0x40>)
 8014b3e:	4c0c      	ldr	r4, [pc, #48]	@ (8014b70 <__libc_init_array+0x44>)
 8014b40:	f002 fc36 	bl	80173b0 <_init>
 8014b44:	1b64      	subs	r4, r4, r5
 8014b46:	10a4      	asrs	r4, r4, #2
 8014b48:	2600      	movs	r6, #0
 8014b4a:	42a6      	cmp	r6, r4
 8014b4c:	d105      	bne.n	8014b5a <__libc_init_array+0x2e>
 8014b4e:	bd70      	pop	{r4, r5, r6, pc}
 8014b50:	f855 3b04 	ldr.w	r3, [r5], #4
 8014b54:	4798      	blx	r3
 8014b56:	3601      	adds	r6, #1
 8014b58:	e7ee      	b.n	8014b38 <__libc_init_array+0xc>
 8014b5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8014b5e:	4798      	blx	r3
 8014b60:	3601      	adds	r6, #1
 8014b62:	e7f2      	b.n	8014b4a <__libc_init_array+0x1e>
 8014b64:	080d5058 	.word	0x080d5058
 8014b68:	080d5058 	.word	0x080d5058
 8014b6c:	080d5058 	.word	0x080d5058
 8014b70:	080d505c 	.word	0x080d505c

08014b74 <__retarget_lock_init_recursive>:
 8014b74:	4770      	bx	lr

08014b76 <__retarget_lock_acquire_recursive>:
 8014b76:	4770      	bx	lr

08014b78 <__retarget_lock_release_recursive>:
 8014b78:	4770      	bx	lr

08014b7a <memcpy>:
 8014b7a:	440a      	add	r2, r1
 8014b7c:	4291      	cmp	r1, r2
 8014b7e:	f100 33ff 	add.w	r3, r0, #4294967295
 8014b82:	d100      	bne.n	8014b86 <memcpy+0xc>
 8014b84:	4770      	bx	lr
 8014b86:	b510      	push	{r4, lr}
 8014b88:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014b8c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014b90:	4291      	cmp	r1, r2
 8014b92:	d1f9      	bne.n	8014b88 <memcpy+0xe>
 8014b94:	bd10      	pop	{r4, pc}

08014b96 <quorem>:
 8014b96:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b9a:	6903      	ldr	r3, [r0, #16]
 8014b9c:	690c      	ldr	r4, [r1, #16]
 8014b9e:	42a3      	cmp	r3, r4
 8014ba0:	4607      	mov	r7, r0
 8014ba2:	db7e      	blt.n	8014ca2 <quorem+0x10c>
 8014ba4:	3c01      	subs	r4, #1
 8014ba6:	f101 0814 	add.w	r8, r1, #20
 8014baa:	00a3      	lsls	r3, r4, #2
 8014bac:	f100 0514 	add.w	r5, r0, #20
 8014bb0:	9300      	str	r3, [sp, #0]
 8014bb2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014bb6:	9301      	str	r3, [sp, #4]
 8014bb8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8014bbc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014bc0:	3301      	adds	r3, #1
 8014bc2:	429a      	cmp	r2, r3
 8014bc4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8014bc8:	fbb2 f6f3 	udiv	r6, r2, r3
 8014bcc:	d32e      	bcc.n	8014c2c <quorem+0x96>
 8014bce:	f04f 0a00 	mov.w	sl, #0
 8014bd2:	46c4      	mov	ip, r8
 8014bd4:	46ae      	mov	lr, r5
 8014bd6:	46d3      	mov	fp, sl
 8014bd8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8014bdc:	b298      	uxth	r0, r3
 8014bde:	fb06 a000 	mla	r0, r6, r0, sl
 8014be2:	0c02      	lsrs	r2, r0, #16
 8014be4:	0c1b      	lsrs	r3, r3, #16
 8014be6:	fb06 2303 	mla	r3, r6, r3, r2
 8014bea:	f8de 2000 	ldr.w	r2, [lr]
 8014bee:	b280      	uxth	r0, r0
 8014bf0:	b292      	uxth	r2, r2
 8014bf2:	1a12      	subs	r2, r2, r0
 8014bf4:	445a      	add	r2, fp
 8014bf6:	f8de 0000 	ldr.w	r0, [lr]
 8014bfa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014bfe:	b29b      	uxth	r3, r3
 8014c00:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8014c04:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8014c08:	b292      	uxth	r2, r2
 8014c0a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8014c0e:	45e1      	cmp	r9, ip
 8014c10:	f84e 2b04 	str.w	r2, [lr], #4
 8014c14:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8014c18:	d2de      	bcs.n	8014bd8 <quorem+0x42>
 8014c1a:	9b00      	ldr	r3, [sp, #0]
 8014c1c:	58eb      	ldr	r3, [r5, r3]
 8014c1e:	b92b      	cbnz	r3, 8014c2c <quorem+0x96>
 8014c20:	9b01      	ldr	r3, [sp, #4]
 8014c22:	3b04      	subs	r3, #4
 8014c24:	429d      	cmp	r5, r3
 8014c26:	461a      	mov	r2, r3
 8014c28:	d32f      	bcc.n	8014c8a <quorem+0xf4>
 8014c2a:	613c      	str	r4, [r7, #16]
 8014c2c:	4638      	mov	r0, r7
 8014c2e:	f001 f8c3 	bl	8015db8 <__mcmp>
 8014c32:	2800      	cmp	r0, #0
 8014c34:	db25      	blt.n	8014c82 <quorem+0xec>
 8014c36:	4629      	mov	r1, r5
 8014c38:	2000      	movs	r0, #0
 8014c3a:	f858 2b04 	ldr.w	r2, [r8], #4
 8014c3e:	f8d1 c000 	ldr.w	ip, [r1]
 8014c42:	fa1f fe82 	uxth.w	lr, r2
 8014c46:	fa1f f38c 	uxth.w	r3, ip
 8014c4a:	eba3 030e 	sub.w	r3, r3, lr
 8014c4e:	4403      	add	r3, r0
 8014c50:	0c12      	lsrs	r2, r2, #16
 8014c52:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8014c56:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8014c5a:	b29b      	uxth	r3, r3
 8014c5c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014c60:	45c1      	cmp	r9, r8
 8014c62:	f841 3b04 	str.w	r3, [r1], #4
 8014c66:	ea4f 4022 	mov.w	r0, r2, asr #16
 8014c6a:	d2e6      	bcs.n	8014c3a <quorem+0xa4>
 8014c6c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014c70:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014c74:	b922      	cbnz	r2, 8014c80 <quorem+0xea>
 8014c76:	3b04      	subs	r3, #4
 8014c78:	429d      	cmp	r5, r3
 8014c7a:	461a      	mov	r2, r3
 8014c7c:	d30b      	bcc.n	8014c96 <quorem+0x100>
 8014c7e:	613c      	str	r4, [r7, #16]
 8014c80:	3601      	adds	r6, #1
 8014c82:	4630      	mov	r0, r6
 8014c84:	b003      	add	sp, #12
 8014c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c8a:	6812      	ldr	r2, [r2, #0]
 8014c8c:	3b04      	subs	r3, #4
 8014c8e:	2a00      	cmp	r2, #0
 8014c90:	d1cb      	bne.n	8014c2a <quorem+0x94>
 8014c92:	3c01      	subs	r4, #1
 8014c94:	e7c6      	b.n	8014c24 <quorem+0x8e>
 8014c96:	6812      	ldr	r2, [r2, #0]
 8014c98:	3b04      	subs	r3, #4
 8014c9a:	2a00      	cmp	r2, #0
 8014c9c:	d1ef      	bne.n	8014c7e <quorem+0xe8>
 8014c9e:	3c01      	subs	r4, #1
 8014ca0:	e7ea      	b.n	8014c78 <quorem+0xe2>
 8014ca2:	2000      	movs	r0, #0
 8014ca4:	e7ee      	b.n	8014c84 <quorem+0xee>
	...

08014ca8 <_dtoa_r>:
 8014ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014cac:	69c7      	ldr	r7, [r0, #28]
 8014cae:	b099      	sub	sp, #100	@ 0x64
 8014cb0:	ed8d 0b02 	vstr	d0, [sp, #8]
 8014cb4:	ec55 4b10 	vmov	r4, r5, d0
 8014cb8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8014cba:	9109      	str	r1, [sp, #36]	@ 0x24
 8014cbc:	4683      	mov	fp, r0
 8014cbe:	920e      	str	r2, [sp, #56]	@ 0x38
 8014cc0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8014cc2:	b97f      	cbnz	r7, 8014ce4 <_dtoa_r+0x3c>
 8014cc4:	2010      	movs	r0, #16
 8014cc6:	f7fe ff63 	bl	8013b90 <malloc>
 8014cca:	4602      	mov	r2, r0
 8014ccc:	f8cb 001c 	str.w	r0, [fp, #28]
 8014cd0:	b920      	cbnz	r0, 8014cdc <_dtoa_r+0x34>
 8014cd2:	4ba7      	ldr	r3, [pc, #668]	@ (8014f70 <_dtoa_r+0x2c8>)
 8014cd4:	21ef      	movs	r1, #239	@ 0xef
 8014cd6:	48a7      	ldr	r0, [pc, #668]	@ (8014f74 <_dtoa_r+0x2cc>)
 8014cd8:	f001 fd62 	bl	80167a0 <__assert_func>
 8014cdc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8014ce0:	6007      	str	r7, [r0, #0]
 8014ce2:	60c7      	str	r7, [r0, #12]
 8014ce4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8014ce8:	6819      	ldr	r1, [r3, #0]
 8014cea:	b159      	cbz	r1, 8014d04 <_dtoa_r+0x5c>
 8014cec:	685a      	ldr	r2, [r3, #4]
 8014cee:	604a      	str	r2, [r1, #4]
 8014cf0:	2301      	movs	r3, #1
 8014cf2:	4093      	lsls	r3, r2
 8014cf4:	608b      	str	r3, [r1, #8]
 8014cf6:	4658      	mov	r0, fp
 8014cf8:	f000 fe24 	bl	8015944 <_Bfree>
 8014cfc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8014d00:	2200      	movs	r2, #0
 8014d02:	601a      	str	r2, [r3, #0]
 8014d04:	1e2b      	subs	r3, r5, #0
 8014d06:	bfb9      	ittee	lt
 8014d08:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8014d0c:	9303      	strlt	r3, [sp, #12]
 8014d0e:	2300      	movge	r3, #0
 8014d10:	6033      	strge	r3, [r6, #0]
 8014d12:	9f03      	ldr	r7, [sp, #12]
 8014d14:	4b98      	ldr	r3, [pc, #608]	@ (8014f78 <_dtoa_r+0x2d0>)
 8014d16:	bfbc      	itt	lt
 8014d18:	2201      	movlt	r2, #1
 8014d1a:	6032      	strlt	r2, [r6, #0]
 8014d1c:	43bb      	bics	r3, r7
 8014d1e:	d112      	bne.n	8014d46 <_dtoa_r+0x9e>
 8014d20:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8014d22:	f242 730f 	movw	r3, #9999	@ 0x270f
 8014d26:	6013      	str	r3, [r2, #0]
 8014d28:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8014d2c:	4323      	orrs	r3, r4
 8014d2e:	f000 854d 	beq.w	80157cc <_dtoa_r+0xb24>
 8014d32:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8014d34:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8014f8c <_dtoa_r+0x2e4>
 8014d38:	2b00      	cmp	r3, #0
 8014d3a:	f000 854f 	beq.w	80157dc <_dtoa_r+0xb34>
 8014d3e:	f10a 0303 	add.w	r3, sl, #3
 8014d42:	f000 bd49 	b.w	80157d8 <_dtoa_r+0xb30>
 8014d46:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014d4a:	2200      	movs	r2, #0
 8014d4c:	ec51 0b17 	vmov	r0, r1, d7
 8014d50:	2300      	movs	r3, #0
 8014d52:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8014d56:	f7eb ff37 	bl	8000bc8 <__aeabi_dcmpeq>
 8014d5a:	4680      	mov	r8, r0
 8014d5c:	b158      	cbz	r0, 8014d76 <_dtoa_r+0xce>
 8014d5e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8014d60:	2301      	movs	r3, #1
 8014d62:	6013      	str	r3, [r2, #0]
 8014d64:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8014d66:	b113      	cbz	r3, 8014d6e <_dtoa_r+0xc6>
 8014d68:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8014d6a:	4b84      	ldr	r3, [pc, #528]	@ (8014f7c <_dtoa_r+0x2d4>)
 8014d6c:	6013      	str	r3, [r2, #0]
 8014d6e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8014f90 <_dtoa_r+0x2e8>
 8014d72:	f000 bd33 	b.w	80157dc <_dtoa_r+0xb34>
 8014d76:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8014d7a:	aa16      	add	r2, sp, #88	@ 0x58
 8014d7c:	a917      	add	r1, sp, #92	@ 0x5c
 8014d7e:	4658      	mov	r0, fp
 8014d80:	f001 f8ca 	bl	8015f18 <__d2b>
 8014d84:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8014d88:	4681      	mov	r9, r0
 8014d8a:	2e00      	cmp	r6, #0
 8014d8c:	d077      	beq.n	8014e7e <_dtoa_r+0x1d6>
 8014d8e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014d90:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8014d94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014d98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8014d9c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8014da0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8014da4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8014da8:	4619      	mov	r1, r3
 8014daa:	2200      	movs	r2, #0
 8014dac:	4b74      	ldr	r3, [pc, #464]	@ (8014f80 <_dtoa_r+0x2d8>)
 8014dae:	f7eb faeb 	bl	8000388 <__aeabi_dsub>
 8014db2:	a369      	add	r3, pc, #420	@ (adr r3, 8014f58 <_dtoa_r+0x2b0>)
 8014db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014db8:	f7eb fc9e 	bl	80006f8 <__aeabi_dmul>
 8014dbc:	a368      	add	r3, pc, #416	@ (adr r3, 8014f60 <_dtoa_r+0x2b8>)
 8014dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014dc2:	f7eb fae3 	bl	800038c <__adddf3>
 8014dc6:	4604      	mov	r4, r0
 8014dc8:	4630      	mov	r0, r6
 8014dca:	460d      	mov	r5, r1
 8014dcc:	f7eb fc2a 	bl	8000624 <__aeabi_i2d>
 8014dd0:	a365      	add	r3, pc, #404	@ (adr r3, 8014f68 <_dtoa_r+0x2c0>)
 8014dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014dd6:	f7eb fc8f 	bl	80006f8 <__aeabi_dmul>
 8014dda:	4602      	mov	r2, r0
 8014ddc:	460b      	mov	r3, r1
 8014dde:	4620      	mov	r0, r4
 8014de0:	4629      	mov	r1, r5
 8014de2:	f7eb fad3 	bl	800038c <__adddf3>
 8014de6:	4604      	mov	r4, r0
 8014de8:	460d      	mov	r5, r1
 8014dea:	f7eb ff35 	bl	8000c58 <__aeabi_d2iz>
 8014dee:	2200      	movs	r2, #0
 8014df0:	4607      	mov	r7, r0
 8014df2:	2300      	movs	r3, #0
 8014df4:	4620      	mov	r0, r4
 8014df6:	4629      	mov	r1, r5
 8014df8:	f7eb fef0 	bl	8000bdc <__aeabi_dcmplt>
 8014dfc:	b140      	cbz	r0, 8014e10 <_dtoa_r+0x168>
 8014dfe:	4638      	mov	r0, r7
 8014e00:	f7eb fc10 	bl	8000624 <__aeabi_i2d>
 8014e04:	4622      	mov	r2, r4
 8014e06:	462b      	mov	r3, r5
 8014e08:	f7eb fede 	bl	8000bc8 <__aeabi_dcmpeq>
 8014e0c:	b900      	cbnz	r0, 8014e10 <_dtoa_r+0x168>
 8014e0e:	3f01      	subs	r7, #1
 8014e10:	2f16      	cmp	r7, #22
 8014e12:	d851      	bhi.n	8014eb8 <_dtoa_r+0x210>
 8014e14:	4b5b      	ldr	r3, [pc, #364]	@ (8014f84 <_dtoa_r+0x2dc>)
 8014e16:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8014e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e1e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8014e22:	f7eb fedb 	bl	8000bdc <__aeabi_dcmplt>
 8014e26:	2800      	cmp	r0, #0
 8014e28:	d048      	beq.n	8014ebc <_dtoa_r+0x214>
 8014e2a:	3f01      	subs	r7, #1
 8014e2c:	2300      	movs	r3, #0
 8014e2e:	9312      	str	r3, [sp, #72]	@ 0x48
 8014e30:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8014e32:	1b9b      	subs	r3, r3, r6
 8014e34:	1e5a      	subs	r2, r3, #1
 8014e36:	bf44      	itt	mi
 8014e38:	f1c3 0801 	rsbmi	r8, r3, #1
 8014e3c:	2300      	movmi	r3, #0
 8014e3e:	9208      	str	r2, [sp, #32]
 8014e40:	bf54      	ite	pl
 8014e42:	f04f 0800 	movpl.w	r8, #0
 8014e46:	9308      	strmi	r3, [sp, #32]
 8014e48:	2f00      	cmp	r7, #0
 8014e4a:	db39      	blt.n	8014ec0 <_dtoa_r+0x218>
 8014e4c:	9b08      	ldr	r3, [sp, #32]
 8014e4e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8014e50:	443b      	add	r3, r7
 8014e52:	9308      	str	r3, [sp, #32]
 8014e54:	2300      	movs	r3, #0
 8014e56:	930a      	str	r3, [sp, #40]	@ 0x28
 8014e58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014e5a:	2b09      	cmp	r3, #9
 8014e5c:	d864      	bhi.n	8014f28 <_dtoa_r+0x280>
 8014e5e:	2b05      	cmp	r3, #5
 8014e60:	bfc4      	itt	gt
 8014e62:	3b04      	subgt	r3, #4
 8014e64:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8014e66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014e68:	f1a3 0302 	sub.w	r3, r3, #2
 8014e6c:	bfcc      	ite	gt
 8014e6e:	2400      	movgt	r4, #0
 8014e70:	2401      	movle	r4, #1
 8014e72:	2b03      	cmp	r3, #3
 8014e74:	d863      	bhi.n	8014f3e <_dtoa_r+0x296>
 8014e76:	e8df f003 	tbb	[pc, r3]
 8014e7a:	372a      	.short	0x372a
 8014e7c:	5535      	.short	0x5535
 8014e7e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8014e82:	441e      	add	r6, r3
 8014e84:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8014e88:	2b20      	cmp	r3, #32
 8014e8a:	bfc1      	itttt	gt
 8014e8c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8014e90:	409f      	lslgt	r7, r3
 8014e92:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8014e96:	fa24 f303 	lsrgt.w	r3, r4, r3
 8014e9a:	bfd6      	itet	le
 8014e9c:	f1c3 0320 	rsble	r3, r3, #32
 8014ea0:	ea47 0003 	orrgt.w	r0, r7, r3
 8014ea4:	fa04 f003 	lslle.w	r0, r4, r3
 8014ea8:	f7eb fbac 	bl	8000604 <__aeabi_ui2d>
 8014eac:	2201      	movs	r2, #1
 8014eae:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8014eb2:	3e01      	subs	r6, #1
 8014eb4:	9214      	str	r2, [sp, #80]	@ 0x50
 8014eb6:	e777      	b.n	8014da8 <_dtoa_r+0x100>
 8014eb8:	2301      	movs	r3, #1
 8014eba:	e7b8      	b.n	8014e2e <_dtoa_r+0x186>
 8014ebc:	9012      	str	r0, [sp, #72]	@ 0x48
 8014ebe:	e7b7      	b.n	8014e30 <_dtoa_r+0x188>
 8014ec0:	427b      	negs	r3, r7
 8014ec2:	930a      	str	r3, [sp, #40]	@ 0x28
 8014ec4:	2300      	movs	r3, #0
 8014ec6:	eba8 0807 	sub.w	r8, r8, r7
 8014eca:	930f      	str	r3, [sp, #60]	@ 0x3c
 8014ecc:	e7c4      	b.n	8014e58 <_dtoa_r+0x1b0>
 8014ece:	2300      	movs	r3, #0
 8014ed0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014ed2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014ed4:	2b00      	cmp	r3, #0
 8014ed6:	dc35      	bgt.n	8014f44 <_dtoa_r+0x29c>
 8014ed8:	2301      	movs	r3, #1
 8014eda:	9300      	str	r3, [sp, #0]
 8014edc:	9307      	str	r3, [sp, #28]
 8014ede:	461a      	mov	r2, r3
 8014ee0:	920e      	str	r2, [sp, #56]	@ 0x38
 8014ee2:	e00b      	b.n	8014efc <_dtoa_r+0x254>
 8014ee4:	2301      	movs	r3, #1
 8014ee6:	e7f3      	b.n	8014ed0 <_dtoa_r+0x228>
 8014ee8:	2300      	movs	r3, #0
 8014eea:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014eec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014eee:	18fb      	adds	r3, r7, r3
 8014ef0:	9300      	str	r3, [sp, #0]
 8014ef2:	3301      	adds	r3, #1
 8014ef4:	2b01      	cmp	r3, #1
 8014ef6:	9307      	str	r3, [sp, #28]
 8014ef8:	bfb8      	it	lt
 8014efa:	2301      	movlt	r3, #1
 8014efc:	f8db 001c 	ldr.w	r0, [fp, #28]
 8014f00:	2100      	movs	r1, #0
 8014f02:	2204      	movs	r2, #4
 8014f04:	f102 0514 	add.w	r5, r2, #20
 8014f08:	429d      	cmp	r5, r3
 8014f0a:	d91f      	bls.n	8014f4c <_dtoa_r+0x2a4>
 8014f0c:	6041      	str	r1, [r0, #4]
 8014f0e:	4658      	mov	r0, fp
 8014f10:	f000 fcd8 	bl	80158c4 <_Balloc>
 8014f14:	4682      	mov	sl, r0
 8014f16:	2800      	cmp	r0, #0
 8014f18:	d13c      	bne.n	8014f94 <_dtoa_r+0x2ec>
 8014f1a:	4b1b      	ldr	r3, [pc, #108]	@ (8014f88 <_dtoa_r+0x2e0>)
 8014f1c:	4602      	mov	r2, r0
 8014f1e:	f240 11af 	movw	r1, #431	@ 0x1af
 8014f22:	e6d8      	b.n	8014cd6 <_dtoa_r+0x2e>
 8014f24:	2301      	movs	r3, #1
 8014f26:	e7e0      	b.n	8014eea <_dtoa_r+0x242>
 8014f28:	2401      	movs	r4, #1
 8014f2a:	2300      	movs	r3, #0
 8014f2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8014f2e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8014f30:	f04f 33ff 	mov.w	r3, #4294967295
 8014f34:	9300      	str	r3, [sp, #0]
 8014f36:	9307      	str	r3, [sp, #28]
 8014f38:	2200      	movs	r2, #0
 8014f3a:	2312      	movs	r3, #18
 8014f3c:	e7d0      	b.n	8014ee0 <_dtoa_r+0x238>
 8014f3e:	2301      	movs	r3, #1
 8014f40:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014f42:	e7f5      	b.n	8014f30 <_dtoa_r+0x288>
 8014f44:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014f46:	9300      	str	r3, [sp, #0]
 8014f48:	9307      	str	r3, [sp, #28]
 8014f4a:	e7d7      	b.n	8014efc <_dtoa_r+0x254>
 8014f4c:	3101      	adds	r1, #1
 8014f4e:	0052      	lsls	r2, r2, #1
 8014f50:	e7d8      	b.n	8014f04 <_dtoa_r+0x25c>
 8014f52:	bf00      	nop
 8014f54:	f3af 8000 	nop.w
 8014f58:	636f4361 	.word	0x636f4361
 8014f5c:	3fd287a7 	.word	0x3fd287a7
 8014f60:	8b60c8b3 	.word	0x8b60c8b3
 8014f64:	3fc68a28 	.word	0x3fc68a28
 8014f68:	509f79fb 	.word	0x509f79fb
 8014f6c:	3fd34413 	.word	0x3fd34413
 8014f70:	080d4951 	.word	0x080d4951
 8014f74:	080d4968 	.word	0x080d4968
 8014f78:	7ff00000 	.word	0x7ff00000
 8014f7c:	080d4921 	.word	0x080d4921
 8014f80:	3ff80000 	.word	0x3ff80000
 8014f84:	080d4a60 	.word	0x080d4a60
 8014f88:	080d49c0 	.word	0x080d49c0
 8014f8c:	080d494d 	.word	0x080d494d
 8014f90:	080d4920 	.word	0x080d4920
 8014f94:	f8db 301c 	ldr.w	r3, [fp, #28]
 8014f98:	6018      	str	r0, [r3, #0]
 8014f9a:	9b07      	ldr	r3, [sp, #28]
 8014f9c:	2b0e      	cmp	r3, #14
 8014f9e:	f200 80a4 	bhi.w	80150ea <_dtoa_r+0x442>
 8014fa2:	2c00      	cmp	r4, #0
 8014fa4:	f000 80a1 	beq.w	80150ea <_dtoa_r+0x442>
 8014fa8:	2f00      	cmp	r7, #0
 8014faa:	dd33      	ble.n	8015014 <_dtoa_r+0x36c>
 8014fac:	4bad      	ldr	r3, [pc, #692]	@ (8015264 <_dtoa_r+0x5bc>)
 8014fae:	f007 020f 	and.w	r2, r7, #15
 8014fb2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014fb6:	ed93 7b00 	vldr	d7, [r3]
 8014fba:	05f8      	lsls	r0, r7, #23
 8014fbc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8014fc0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8014fc4:	d516      	bpl.n	8014ff4 <_dtoa_r+0x34c>
 8014fc6:	4ba8      	ldr	r3, [pc, #672]	@ (8015268 <_dtoa_r+0x5c0>)
 8014fc8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8014fcc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8014fd0:	f7eb fcbc 	bl	800094c <__aeabi_ddiv>
 8014fd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014fd8:	f004 040f 	and.w	r4, r4, #15
 8014fdc:	2603      	movs	r6, #3
 8014fde:	4da2      	ldr	r5, [pc, #648]	@ (8015268 <_dtoa_r+0x5c0>)
 8014fe0:	b954      	cbnz	r4, 8014ff8 <_dtoa_r+0x350>
 8014fe2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014fe6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014fea:	f7eb fcaf 	bl	800094c <__aeabi_ddiv>
 8014fee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014ff2:	e028      	b.n	8015046 <_dtoa_r+0x39e>
 8014ff4:	2602      	movs	r6, #2
 8014ff6:	e7f2      	b.n	8014fde <_dtoa_r+0x336>
 8014ff8:	07e1      	lsls	r1, r4, #31
 8014ffa:	d508      	bpl.n	801500e <_dtoa_r+0x366>
 8014ffc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015000:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015004:	f7eb fb78 	bl	80006f8 <__aeabi_dmul>
 8015008:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801500c:	3601      	adds	r6, #1
 801500e:	1064      	asrs	r4, r4, #1
 8015010:	3508      	adds	r5, #8
 8015012:	e7e5      	b.n	8014fe0 <_dtoa_r+0x338>
 8015014:	f000 80d2 	beq.w	80151bc <_dtoa_r+0x514>
 8015018:	427c      	negs	r4, r7
 801501a:	4b92      	ldr	r3, [pc, #584]	@ (8015264 <_dtoa_r+0x5bc>)
 801501c:	4d92      	ldr	r5, [pc, #584]	@ (8015268 <_dtoa_r+0x5c0>)
 801501e:	f004 020f 	and.w	r2, r4, #15
 8015022:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015026:	e9d3 2300 	ldrd	r2, r3, [r3]
 801502a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801502e:	f7eb fb63 	bl	80006f8 <__aeabi_dmul>
 8015032:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015036:	1124      	asrs	r4, r4, #4
 8015038:	2300      	movs	r3, #0
 801503a:	2602      	movs	r6, #2
 801503c:	2c00      	cmp	r4, #0
 801503e:	f040 80b2 	bne.w	80151a6 <_dtoa_r+0x4fe>
 8015042:	2b00      	cmp	r3, #0
 8015044:	d1d3      	bne.n	8014fee <_dtoa_r+0x346>
 8015046:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8015048:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801504c:	2b00      	cmp	r3, #0
 801504e:	f000 80b7 	beq.w	80151c0 <_dtoa_r+0x518>
 8015052:	4b86      	ldr	r3, [pc, #536]	@ (801526c <_dtoa_r+0x5c4>)
 8015054:	2200      	movs	r2, #0
 8015056:	4620      	mov	r0, r4
 8015058:	4629      	mov	r1, r5
 801505a:	f7eb fdbf 	bl	8000bdc <__aeabi_dcmplt>
 801505e:	2800      	cmp	r0, #0
 8015060:	f000 80ae 	beq.w	80151c0 <_dtoa_r+0x518>
 8015064:	9b07      	ldr	r3, [sp, #28]
 8015066:	2b00      	cmp	r3, #0
 8015068:	f000 80aa 	beq.w	80151c0 <_dtoa_r+0x518>
 801506c:	9b00      	ldr	r3, [sp, #0]
 801506e:	2b00      	cmp	r3, #0
 8015070:	dd37      	ble.n	80150e2 <_dtoa_r+0x43a>
 8015072:	1e7b      	subs	r3, r7, #1
 8015074:	9304      	str	r3, [sp, #16]
 8015076:	4620      	mov	r0, r4
 8015078:	4b7d      	ldr	r3, [pc, #500]	@ (8015270 <_dtoa_r+0x5c8>)
 801507a:	2200      	movs	r2, #0
 801507c:	4629      	mov	r1, r5
 801507e:	f7eb fb3b 	bl	80006f8 <__aeabi_dmul>
 8015082:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015086:	9c00      	ldr	r4, [sp, #0]
 8015088:	3601      	adds	r6, #1
 801508a:	4630      	mov	r0, r6
 801508c:	f7eb faca 	bl	8000624 <__aeabi_i2d>
 8015090:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015094:	f7eb fb30 	bl	80006f8 <__aeabi_dmul>
 8015098:	4b76      	ldr	r3, [pc, #472]	@ (8015274 <_dtoa_r+0x5cc>)
 801509a:	2200      	movs	r2, #0
 801509c:	f7eb f976 	bl	800038c <__adddf3>
 80150a0:	4605      	mov	r5, r0
 80150a2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80150a6:	2c00      	cmp	r4, #0
 80150a8:	f040 808d 	bne.w	80151c6 <_dtoa_r+0x51e>
 80150ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80150b0:	4b71      	ldr	r3, [pc, #452]	@ (8015278 <_dtoa_r+0x5d0>)
 80150b2:	2200      	movs	r2, #0
 80150b4:	f7eb f968 	bl	8000388 <__aeabi_dsub>
 80150b8:	4602      	mov	r2, r0
 80150ba:	460b      	mov	r3, r1
 80150bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80150c0:	462a      	mov	r2, r5
 80150c2:	4633      	mov	r3, r6
 80150c4:	f7eb fda8 	bl	8000c18 <__aeabi_dcmpgt>
 80150c8:	2800      	cmp	r0, #0
 80150ca:	f040 828b 	bne.w	80155e4 <_dtoa_r+0x93c>
 80150ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80150d2:	462a      	mov	r2, r5
 80150d4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80150d8:	f7eb fd80 	bl	8000bdc <__aeabi_dcmplt>
 80150dc:	2800      	cmp	r0, #0
 80150de:	f040 8128 	bne.w	8015332 <_dtoa_r+0x68a>
 80150e2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80150e6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80150ea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80150ec:	2b00      	cmp	r3, #0
 80150ee:	f2c0 815a 	blt.w	80153a6 <_dtoa_r+0x6fe>
 80150f2:	2f0e      	cmp	r7, #14
 80150f4:	f300 8157 	bgt.w	80153a6 <_dtoa_r+0x6fe>
 80150f8:	4b5a      	ldr	r3, [pc, #360]	@ (8015264 <_dtoa_r+0x5bc>)
 80150fa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80150fe:	ed93 7b00 	vldr	d7, [r3]
 8015102:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015104:	2b00      	cmp	r3, #0
 8015106:	ed8d 7b00 	vstr	d7, [sp]
 801510a:	da03      	bge.n	8015114 <_dtoa_r+0x46c>
 801510c:	9b07      	ldr	r3, [sp, #28]
 801510e:	2b00      	cmp	r3, #0
 8015110:	f340 8101 	ble.w	8015316 <_dtoa_r+0x66e>
 8015114:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8015118:	4656      	mov	r6, sl
 801511a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801511e:	4620      	mov	r0, r4
 8015120:	4629      	mov	r1, r5
 8015122:	f7eb fc13 	bl	800094c <__aeabi_ddiv>
 8015126:	f7eb fd97 	bl	8000c58 <__aeabi_d2iz>
 801512a:	4680      	mov	r8, r0
 801512c:	f7eb fa7a 	bl	8000624 <__aeabi_i2d>
 8015130:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015134:	f7eb fae0 	bl	80006f8 <__aeabi_dmul>
 8015138:	4602      	mov	r2, r0
 801513a:	460b      	mov	r3, r1
 801513c:	4620      	mov	r0, r4
 801513e:	4629      	mov	r1, r5
 8015140:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8015144:	f7eb f920 	bl	8000388 <__aeabi_dsub>
 8015148:	f806 4b01 	strb.w	r4, [r6], #1
 801514c:	9d07      	ldr	r5, [sp, #28]
 801514e:	eba6 040a 	sub.w	r4, r6, sl
 8015152:	42a5      	cmp	r5, r4
 8015154:	4602      	mov	r2, r0
 8015156:	460b      	mov	r3, r1
 8015158:	f040 8117 	bne.w	801538a <_dtoa_r+0x6e2>
 801515c:	f7eb f916 	bl	800038c <__adddf3>
 8015160:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015164:	4604      	mov	r4, r0
 8015166:	460d      	mov	r5, r1
 8015168:	f7eb fd56 	bl	8000c18 <__aeabi_dcmpgt>
 801516c:	2800      	cmp	r0, #0
 801516e:	f040 80f9 	bne.w	8015364 <_dtoa_r+0x6bc>
 8015172:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015176:	4620      	mov	r0, r4
 8015178:	4629      	mov	r1, r5
 801517a:	f7eb fd25 	bl	8000bc8 <__aeabi_dcmpeq>
 801517e:	b118      	cbz	r0, 8015188 <_dtoa_r+0x4e0>
 8015180:	f018 0f01 	tst.w	r8, #1
 8015184:	f040 80ee 	bne.w	8015364 <_dtoa_r+0x6bc>
 8015188:	4649      	mov	r1, r9
 801518a:	4658      	mov	r0, fp
 801518c:	f000 fbda 	bl	8015944 <_Bfree>
 8015190:	2300      	movs	r3, #0
 8015192:	7033      	strb	r3, [r6, #0]
 8015194:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8015196:	3701      	adds	r7, #1
 8015198:	601f      	str	r7, [r3, #0]
 801519a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801519c:	2b00      	cmp	r3, #0
 801519e:	f000 831d 	beq.w	80157dc <_dtoa_r+0xb34>
 80151a2:	601e      	str	r6, [r3, #0]
 80151a4:	e31a      	b.n	80157dc <_dtoa_r+0xb34>
 80151a6:	07e2      	lsls	r2, r4, #31
 80151a8:	d505      	bpl.n	80151b6 <_dtoa_r+0x50e>
 80151aa:	e9d5 2300 	ldrd	r2, r3, [r5]
 80151ae:	f7eb faa3 	bl	80006f8 <__aeabi_dmul>
 80151b2:	3601      	adds	r6, #1
 80151b4:	2301      	movs	r3, #1
 80151b6:	1064      	asrs	r4, r4, #1
 80151b8:	3508      	adds	r5, #8
 80151ba:	e73f      	b.n	801503c <_dtoa_r+0x394>
 80151bc:	2602      	movs	r6, #2
 80151be:	e742      	b.n	8015046 <_dtoa_r+0x39e>
 80151c0:	9c07      	ldr	r4, [sp, #28]
 80151c2:	9704      	str	r7, [sp, #16]
 80151c4:	e761      	b.n	801508a <_dtoa_r+0x3e2>
 80151c6:	4b27      	ldr	r3, [pc, #156]	@ (8015264 <_dtoa_r+0x5bc>)
 80151c8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80151ca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80151ce:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80151d2:	4454      	add	r4, sl
 80151d4:	2900      	cmp	r1, #0
 80151d6:	d053      	beq.n	8015280 <_dtoa_r+0x5d8>
 80151d8:	4928      	ldr	r1, [pc, #160]	@ (801527c <_dtoa_r+0x5d4>)
 80151da:	2000      	movs	r0, #0
 80151dc:	f7eb fbb6 	bl	800094c <__aeabi_ddiv>
 80151e0:	4633      	mov	r3, r6
 80151e2:	462a      	mov	r2, r5
 80151e4:	f7eb f8d0 	bl	8000388 <__aeabi_dsub>
 80151e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80151ec:	4656      	mov	r6, sl
 80151ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80151f2:	f7eb fd31 	bl	8000c58 <__aeabi_d2iz>
 80151f6:	4605      	mov	r5, r0
 80151f8:	f7eb fa14 	bl	8000624 <__aeabi_i2d>
 80151fc:	4602      	mov	r2, r0
 80151fe:	460b      	mov	r3, r1
 8015200:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015204:	f7eb f8c0 	bl	8000388 <__aeabi_dsub>
 8015208:	3530      	adds	r5, #48	@ 0x30
 801520a:	4602      	mov	r2, r0
 801520c:	460b      	mov	r3, r1
 801520e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8015212:	f806 5b01 	strb.w	r5, [r6], #1
 8015216:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801521a:	f7eb fcdf 	bl	8000bdc <__aeabi_dcmplt>
 801521e:	2800      	cmp	r0, #0
 8015220:	d171      	bne.n	8015306 <_dtoa_r+0x65e>
 8015222:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015226:	4911      	ldr	r1, [pc, #68]	@ (801526c <_dtoa_r+0x5c4>)
 8015228:	2000      	movs	r0, #0
 801522a:	f7eb f8ad 	bl	8000388 <__aeabi_dsub>
 801522e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8015232:	f7eb fcd3 	bl	8000bdc <__aeabi_dcmplt>
 8015236:	2800      	cmp	r0, #0
 8015238:	f040 8095 	bne.w	8015366 <_dtoa_r+0x6be>
 801523c:	42a6      	cmp	r6, r4
 801523e:	f43f af50 	beq.w	80150e2 <_dtoa_r+0x43a>
 8015242:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8015246:	4b0a      	ldr	r3, [pc, #40]	@ (8015270 <_dtoa_r+0x5c8>)
 8015248:	2200      	movs	r2, #0
 801524a:	f7eb fa55 	bl	80006f8 <__aeabi_dmul>
 801524e:	4b08      	ldr	r3, [pc, #32]	@ (8015270 <_dtoa_r+0x5c8>)
 8015250:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8015254:	2200      	movs	r2, #0
 8015256:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801525a:	f7eb fa4d 	bl	80006f8 <__aeabi_dmul>
 801525e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015262:	e7c4      	b.n	80151ee <_dtoa_r+0x546>
 8015264:	080d4a60 	.word	0x080d4a60
 8015268:	080d4a38 	.word	0x080d4a38
 801526c:	3ff00000 	.word	0x3ff00000
 8015270:	40240000 	.word	0x40240000
 8015274:	401c0000 	.word	0x401c0000
 8015278:	40140000 	.word	0x40140000
 801527c:	3fe00000 	.word	0x3fe00000
 8015280:	4631      	mov	r1, r6
 8015282:	4628      	mov	r0, r5
 8015284:	f7eb fa38 	bl	80006f8 <__aeabi_dmul>
 8015288:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801528c:	9415      	str	r4, [sp, #84]	@ 0x54
 801528e:	4656      	mov	r6, sl
 8015290:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015294:	f7eb fce0 	bl	8000c58 <__aeabi_d2iz>
 8015298:	4605      	mov	r5, r0
 801529a:	f7eb f9c3 	bl	8000624 <__aeabi_i2d>
 801529e:	4602      	mov	r2, r0
 80152a0:	460b      	mov	r3, r1
 80152a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80152a6:	f7eb f86f 	bl	8000388 <__aeabi_dsub>
 80152aa:	3530      	adds	r5, #48	@ 0x30
 80152ac:	f806 5b01 	strb.w	r5, [r6], #1
 80152b0:	4602      	mov	r2, r0
 80152b2:	460b      	mov	r3, r1
 80152b4:	42a6      	cmp	r6, r4
 80152b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80152ba:	f04f 0200 	mov.w	r2, #0
 80152be:	d124      	bne.n	801530a <_dtoa_r+0x662>
 80152c0:	4bac      	ldr	r3, [pc, #688]	@ (8015574 <_dtoa_r+0x8cc>)
 80152c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80152c6:	f7eb f861 	bl	800038c <__adddf3>
 80152ca:	4602      	mov	r2, r0
 80152cc:	460b      	mov	r3, r1
 80152ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80152d2:	f7eb fca1 	bl	8000c18 <__aeabi_dcmpgt>
 80152d6:	2800      	cmp	r0, #0
 80152d8:	d145      	bne.n	8015366 <_dtoa_r+0x6be>
 80152da:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80152de:	49a5      	ldr	r1, [pc, #660]	@ (8015574 <_dtoa_r+0x8cc>)
 80152e0:	2000      	movs	r0, #0
 80152e2:	f7eb f851 	bl	8000388 <__aeabi_dsub>
 80152e6:	4602      	mov	r2, r0
 80152e8:	460b      	mov	r3, r1
 80152ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80152ee:	f7eb fc75 	bl	8000bdc <__aeabi_dcmplt>
 80152f2:	2800      	cmp	r0, #0
 80152f4:	f43f aef5 	beq.w	80150e2 <_dtoa_r+0x43a>
 80152f8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80152fa:	1e73      	subs	r3, r6, #1
 80152fc:	9315      	str	r3, [sp, #84]	@ 0x54
 80152fe:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8015302:	2b30      	cmp	r3, #48	@ 0x30
 8015304:	d0f8      	beq.n	80152f8 <_dtoa_r+0x650>
 8015306:	9f04      	ldr	r7, [sp, #16]
 8015308:	e73e      	b.n	8015188 <_dtoa_r+0x4e0>
 801530a:	4b9b      	ldr	r3, [pc, #620]	@ (8015578 <_dtoa_r+0x8d0>)
 801530c:	f7eb f9f4 	bl	80006f8 <__aeabi_dmul>
 8015310:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015314:	e7bc      	b.n	8015290 <_dtoa_r+0x5e8>
 8015316:	d10c      	bne.n	8015332 <_dtoa_r+0x68a>
 8015318:	4b98      	ldr	r3, [pc, #608]	@ (801557c <_dtoa_r+0x8d4>)
 801531a:	2200      	movs	r2, #0
 801531c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015320:	f7eb f9ea 	bl	80006f8 <__aeabi_dmul>
 8015324:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015328:	f7eb fc6c 	bl	8000c04 <__aeabi_dcmpge>
 801532c:	2800      	cmp	r0, #0
 801532e:	f000 8157 	beq.w	80155e0 <_dtoa_r+0x938>
 8015332:	2400      	movs	r4, #0
 8015334:	4625      	mov	r5, r4
 8015336:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015338:	43db      	mvns	r3, r3
 801533a:	9304      	str	r3, [sp, #16]
 801533c:	4656      	mov	r6, sl
 801533e:	2700      	movs	r7, #0
 8015340:	4621      	mov	r1, r4
 8015342:	4658      	mov	r0, fp
 8015344:	f000 fafe 	bl	8015944 <_Bfree>
 8015348:	2d00      	cmp	r5, #0
 801534a:	d0dc      	beq.n	8015306 <_dtoa_r+0x65e>
 801534c:	b12f      	cbz	r7, 801535a <_dtoa_r+0x6b2>
 801534e:	42af      	cmp	r7, r5
 8015350:	d003      	beq.n	801535a <_dtoa_r+0x6b2>
 8015352:	4639      	mov	r1, r7
 8015354:	4658      	mov	r0, fp
 8015356:	f000 faf5 	bl	8015944 <_Bfree>
 801535a:	4629      	mov	r1, r5
 801535c:	4658      	mov	r0, fp
 801535e:	f000 faf1 	bl	8015944 <_Bfree>
 8015362:	e7d0      	b.n	8015306 <_dtoa_r+0x65e>
 8015364:	9704      	str	r7, [sp, #16]
 8015366:	4633      	mov	r3, r6
 8015368:	461e      	mov	r6, r3
 801536a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801536e:	2a39      	cmp	r2, #57	@ 0x39
 8015370:	d107      	bne.n	8015382 <_dtoa_r+0x6da>
 8015372:	459a      	cmp	sl, r3
 8015374:	d1f8      	bne.n	8015368 <_dtoa_r+0x6c0>
 8015376:	9a04      	ldr	r2, [sp, #16]
 8015378:	3201      	adds	r2, #1
 801537a:	9204      	str	r2, [sp, #16]
 801537c:	2230      	movs	r2, #48	@ 0x30
 801537e:	f88a 2000 	strb.w	r2, [sl]
 8015382:	781a      	ldrb	r2, [r3, #0]
 8015384:	3201      	adds	r2, #1
 8015386:	701a      	strb	r2, [r3, #0]
 8015388:	e7bd      	b.n	8015306 <_dtoa_r+0x65e>
 801538a:	4b7b      	ldr	r3, [pc, #492]	@ (8015578 <_dtoa_r+0x8d0>)
 801538c:	2200      	movs	r2, #0
 801538e:	f7eb f9b3 	bl	80006f8 <__aeabi_dmul>
 8015392:	2200      	movs	r2, #0
 8015394:	2300      	movs	r3, #0
 8015396:	4604      	mov	r4, r0
 8015398:	460d      	mov	r5, r1
 801539a:	f7eb fc15 	bl	8000bc8 <__aeabi_dcmpeq>
 801539e:	2800      	cmp	r0, #0
 80153a0:	f43f aebb 	beq.w	801511a <_dtoa_r+0x472>
 80153a4:	e6f0      	b.n	8015188 <_dtoa_r+0x4e0>
 80153a6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80153a8:	2a00      	cmp	r2, #0
 80153aa:	f000 80db 	beq.w	8015564 <_dtoa_r+0x8bc>
 80153ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80153b0:	2a01      	cmp	r2, #1
 80153b2:	f300 80bf 	bgt.w	8015534 <_dtoa_r+0x88c>
 80153b6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80153b8:	2a00      	cmp	r2, #0
 80153ba:	f000 80b7 	beq.w	801552c <_dtoa_r+0x884>
 80153be:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80153c2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80153c4:	4646      	mov	r6, r8
 80153c6:	9a08      	ldr	r2, [sp, #32]
 80153c8:	2101      	movs	r1, #1
 80153ca:	441a      	add	r2, r3
 80153cc:	4658      	mov	r0, fp
 80153ce:	4498      	add	r8, r3
 80153d0:	9208      	str	r2, [sp, #32]
 80153d2:	f000 fb6b 	bl	8015aac <__i2b>
 80153d6:	4605      	mov	r5, r0
 80153d8:	b15e      	cbz	r6, 80153f2 <_dtoa_r+0x74a>
 80153da:	9b08      	ldr	r3, [sp, #32]
 80153dc:	2b00      	cmp	r3, #0
 80153de:	dd08      	ble.n	80153f2 <_dtoa_r+0x74a>
 80153e0:	42b3      	cmp	r3, r6
 80153e2:	9a08      	ldr	r2, [sp, #32]
 80153e4:	bfa8      	it	ge
 80153e6:	4633      	movge	r3, r6
 80153e8:	eba8 0803 	sub.w	r8, r8, r3
 80153ec:	1af6      	subs	r6, r6, r3
 80153ee:	1ad3      	subs	r3, r2, r3
 80153f0:	9308      	str	r3, [sp, #32]
 80153f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80153f4:	b1f3      	cbz	r3, 8015434 <_dtoa_r+0x78c>
 80153f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80153f8:	2b00      	cmp	r3, #0
 80153fa:	f000 80b7 	beq.w	801556c <_dtoa_r+0x8c4>
 80153fe:	b18c      	cbz	r4, 8015424 <_dtoa_r+0x77c>
 8015400:	4629      	mov	r1, r5
 8015402:	4622      	mov	r2, r4
 8015404:	4658      	mov	r0, fp
 8015406:	f000 fc11 	bl	8015c2c <__pow5mult>
 801540a:	464a      	mov	r2, r9
 801540c:	4601      	mov	r1, r0
 801540e:	4605      	mov	r5, r0
 8015410:	4658      	mov	r0, fp
 8015412:	f000 fb61 	bl	8015ad8 <__multiply>
 8015416:	4649      	mov	r1, r9
 8015418:	9004      	str	r0, [sp, #16]
 801541a:	4658      	mov	r0, fp
 801541c:	f000 fa92 	bl	8015944 <_Bfree>
 8015420:	9b04      	ldr	r3, [sp, #16]
 8015422:	4699      	mov	r9, r3
 8015424:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015426:	1b1a      	subs	r2, r3, r4
 8015428:	d004      	beq.n	8015434 <_dtoa_r+0x78c>
 801542a:	4649      	mov	r1, r9
 801542c:	4658      	mov	r0, fp
 801542e:	f000 fbfd 	bl	8015c2c <__pow5mult>
 8015432:	4681      	mov	r9, r0
 8015434:	2101      	movs	r1, #1
 8015436:	4658      	mov	r0, fp
 8015438:	f000 fb38 	bl	8015aac <__i2b>
 801543c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801543e:	4604      	mov	r4, r0
 8015440:	2b00      	cmp	r3, #0
 8015442:	f000 81cf 	beq.w	80157e4 <_dtoa_r+0xb3c>
 8015446:	461a      	mov	r2, r3
 8015448:	4601      	mov	r1, r0
 801544a:	4658      	mov	r0, fp
 801544c:	f000 fbee 	bl	8015c2c <__pow5mult>
 8015450:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015452:	2b01      	cmp	r3, #1
 8015454:	4604      	mov	r4, r0
 8015456:	f300 8095 	bgt.w	8015584 <_dtoa_r+0x8dc>
 801545a:	9b02      	ldr	r3, [sp, #8]
 801545c:	2b00      	cmp	r3, #0
 801545e:	f040 8087 	bne.w	8015570 <_dtoa_r+0x8c8>
 8015462:	9b03      	ldr	r3, [sp, #12]
 8015464:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015468:	2b00      	cmp	r3, #0
 801546a:	f040 8089 	bne.w	8015580 <_dtoa_r+0x8d8>
 801546e:	9b03      	ldr	r3, [sp, #12]
 8015470:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8015474:	0d1b      	lsrs	r3, r3, #20
 8015476:	051b      	lsls	r3, r3, #20
 8015478:	b12b      	cbz	r3, 8015486 <_dtoa_r+0x7de>
 801547a:	9b08      	ldr	r3, [sp, #32]
 801547c:	3301      	adds	r3, #1
 801547e:	9308      	str	r3, [sp, #32]
 8015480:	f108 0801 	add.w	r8, r8, #1
 8015484:	2301      	movs	r3, #1
 8015486:	930a      	str	r3, [sp, #40]	@ 0x28
 8015488:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801548a:	2b00      	cmp	r3, #0
 801548c:	f000 81b0 	beq.w	80157f0 <_dtoa_r+0xb48>
 8015490:	6923      	ldr	r3, [r4, #16]
 8015492:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8015496:	6918      	ldr	r0, [r3, #16]
 8015498:	f000 fabc 	bl	8015a14 <__hi0bits>
 801549c:	f1c0 0020 	rsb	r0, r0, #32
 80154a0:	9b08      	ldr	r3, [sp, #32]
 80154a2:	4418      	add	r0, r3
 80154a4:	f010 001f 	ands.w	r0, r0, #31
 80154a8:	d077      	beq.n	801559a <_dtoa_r+0x8f2>
 80154aa:	f1c0 0320 	rsb	r3, r0, #32
 80154ae:	2b04      	cmp	r3, #4
 80154b0:	dd6b      	ble.n	801558a <_dtoa_r+0x8e2>
 80154b2:	9b08      	ldr	r3, [sp, #32]
 80154b4:	f1c0 001c 	rsb	r0, r0, #28
 80154b8:	4403      	add	r3, r0
 80154ba:	4480      	add	r8, r0
 80154bc:	4406      	add	r6, r0
 80154be:	9308      	str	r3, [sp, #32]
 80154c0:	f1b8 0f00 	cmp.w	r8, #0
 80154c4:	dd05      	ble.n	80154d2 <_dtoa_r+0x82a>
 80154c6:	4649      	mov	r1, r9
 80154c8:	4642      	mov	r2, r8
 80154ca:	4658      	mov	r0, fp
 80154cc:	f000 fc08 	bl	8015ce0 <__lshift>
 80154d0:	4681      	mov	r9, r0
 80154d2:	9b08      	ldr	r3, [sp, #32]
 80154d4:	2b00      	cmp	r3, #0
 80154d6:	dd05      	ble.n	80154e4 <_dtoa_r+0x83c>
 80154d8:	4621      	mov	r1, r4
 80154da:	461a      	mov	r2, r3
 80154dc:	4658      	mov	r0, fp
 80154de:	f000 fbff 	bl	8015ce0 <__lshift>
 80154e2:	4604      	mov	r4, r0
 80154e4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80154e6:	2b00      	cmp	r3, #0
 80154e8:	d059      	beq.n	801559e <_dtoa_r+0x8f6>
 80154ea:	4621      	mov	r1, r4
 80154ec:	4648      	mov	r0, r9
 80154ee:	f000 fc63 	bl	8015db8 <__mcmp>
 80154f2:	2800      	cmp	r0, #0
 80154f4:	da53      	bge.n	801559e <_dtoa_r+0x8f6>
 80154f6:	1e7b      	subs	r3, r7, #1
 80154f8:	9304      	str	r3, [sp, #16]
 80154fa:	4649      	mov	r1, r9
 80154fc:	2300      	movs	r3, #0
 80154fe:	220a      	movs	r2, #10
 8015500:	4658      	mov	r0, fp
 8015502:	f000 fa41 	bl	8015988 <__multadd>
 8015506:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015508:	4681      	mov	r9, r0
 801550a:	2b00      	cmp	r3, #0
 801550c:	f000 8172 	beq.w	80157f4 <_dtoa_r+0xb4c>
 8015510:	2300      	movs	r3, #0
 8015512:	4629      	mov	r1, r5
 8015514:	220a      	movs	r2, #10
 8015516:	4658      	mov	r0, fp
 8015518:	f000 fa36 	bl	8015988 <__multadd>
 801551c:	9b00      	ldr	r3, [sp, #0]
 801551e:	2b00      	cmp	r3, #0
 8015520:	4605      	mov	r5, r0
 8015522:	dc67      	bgt.n	80155f4 <_dtoa_r+0x94c>
 8015524:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015526:	2b02      	cmp	r3, #2
 8015528:	dc41      	bgt.n	80155ae <_dtoa_r+0x906>
 801552a:	e063      	b.n	80155f4 <_dtoa_r+0x94c>
 801552c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801552e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8015532:	e746      	b.n	80153c2 <_dtoa_r+0x71a>
 8015534:	9b07      	ldr	r3, [sp, #28]
 8015536:	1e5c      	subs	r4, r3, #1
 8015538:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801553a:	42a3      	cmp	r3, r4
 801553c:	bfbf      	itttt	lt
 801553e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8015540:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8015542:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8015544:	1ae3      	sublt	r3, r4, r3
 8015546:	bfb4      	ite	lt
 8015548:	18d2      	addlt	r2, r2, r3
 801554a:	1b1c      	subge	r4, r3, r4
 801554c:	9b07      	ldr	r3, [sp, #28]
 801554e:	bfbc      	itt	lt
 8015550:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8015552:	2400      	movlt	r4, #0
 8015554:	2b00      	cmp	r3, #0
 8015556:	bfb5      	itete	lt
 8015558:	eba8 0603 	sublt.w	r6, r8, r3
 801555c:	9b07      	ldrge	r3, [sp, #28]
 801555e:	2300      	movlt	r3, #0
 8015560:	4646      	movge	r6, r8
 8015562:	e730      	b.n	80153c6 <_dtoa_r+0x71e>
 8015564:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8015566:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8015568:	4646      	mov	r6, r8
 801556a:	e735      	b.n	80153d8 <_dtoa_r+0x730>
 801556c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801556e:	e75c      	b.n	801542a <_dtoa_r+0x782>
 8015570:	2300      	movs	r3, #0
 8015572:	e788      	b.n	8015486 <_dtoa_r+0x7de>
 8015574:	3fe00000 	.word	0x3fe00000
 8015578:	40240000 	.word	0x40240000
 801557c:	40140000 	.word	0x40140000
 8015580:	9b02      	ldr	r3, [sp, #8]
 8015582:	e780      	b.n	8015486 <_dtoa_r+0x7de>
 8015584:	2300      	movs	r3, #0
 8015586:	930a      	str	r3, [sp, #40]	@ 0x28
 8015588:	e782      	b.n	8015490 <_dtoa_r+0x7e8>
 801558a:	d099      	beq.n	80154c0 <_dtoa_r+0x818>
 801558c:	9a08      	ldr	r2, [sp, #32]
 801558e:	331c      	adds	r3, #28
 8015590:	441a      	add	r2, r3
 8015592:	4498      	add	r8, r3
 8015594:	441e      	add	r6, r3
 8015596:	9208      	str	r2, [sp, #32]
 8015598:	e792      	b.n	80154c0 <_dtoa_r+0x818>
 801559a:	4603      	mov	r3, r0
 801559c:	e7f6      	b.n	801558c <_dtoa_r+0x8e4>
 801559e:	9b07      	ldr	r3, [sp, #28]
 80155a0:	9704      	str	r7, [sp, #16]
 80155a2:	2b00      	cmp	r3, #0
 80155a4:	dc20      	bgt.n	80155e8 <_dtoa_r+0x940>
 80155a6:	9300      	str	r3, [sp, #0]
 80155a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80155aa:	2b02      	cmp	r3, #2
 80155ac:	dd1e      	ble.n	80155ec <_dtoa_r+0x944>
 80155ae:	9b00      	ldr	r3, [sp, #0]
 80155b0:	2b00      	cmp	r3, #0
 80155b2:	f47f aec0 	bne.w	8015336 <_dtoa_r+0x68e>
 80155b6:	4621      	mov	r1, r4
 80155b8:	2205      	movs	r2, #5
 80155ba:	4658      	mov	r0, fp
 80155bc:	f000 f9e4 	bl	8015988 <__multadd>
 80155c0:	4601      	mov	r1, r0
 80155c2:	4604      	mov	r4, r0
 80155c4:	4648      	mov	r0, r9
 80155c6:	f000 fbf7 	bl	8015db8 <__mcmp>
 80155ca:	2800      	cmp	r0, #0
 80155cc:	f77f aeb3 	ble.w	8015336 <_dtoa_r+0x68e>
 80155d0:	4656      	mov	r6, sl
 80155d2:	2331      	movs	r3, #49	@ 0x31
 80155d4:	f806 3b01 	strb.w	r3, [r6], #1
 80155d8:	9b04      	ldr	r3, [sp, #16]
 80155da:	3301      	adds	r3, #1
 80155dc:	9304      	str	r3, [sp, #16]
 80155de:	e6ae      	b.n	801533e <_dtoa_r+0x696>
 80155e0:	9c07      	ldr	r4, [sp, #28]
 80155e2:	9704      	str	r7, [sp, #16]
 80155e4:	4625      	mov	r5, r4
 80155e6:	e7f3      	b.n	80155d0 <_dtoa_r+0x928>
 80155e8:	9b07      	ldr	r3, [sp, #28]
 80155ea:	9300      	str	r3, [sp, #0]
 80155ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80155ee:	2b00      	cmp	r3, #0
 80155f0:	f000 8104 	beq.w	80157fc <_dtoa_r+0xb54>
 80155f4:	2e00      	cmp	r6, #0
 80155f6:	dd05      	ble.n	8015604 <_dtoa_r+0x95c>
 80155f8:	4629      	mov	r1, r5
 80155fa:	4632      	mov	r2, r6
 80155fc:	4658      	mov	r0, fp
 80155fe:	f000 fb6f 	bl	8015ce0 <__lshift>
 8015602:	4605      	mov	r5, r0
 8015604:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015606:	2b00      	cmp	r3, #0
 8015608:	d05a      	beq.n	80156c0 <_dtoa_r+0xa18>
 801560a:	6869      	ldr	r1, [r5, #4]
 801560c:	4658      	mov	r0, fp
 801560e:	f000 f959 	bl	80158c4 <_Balloc>
 8015612:	4606      	mov	r6, r0
 8015614:	b928      	cbnz	r0, 8015622 <_dtoa_r+0x97a>
 8015616:	4b84      	ldr	r3, [pc, #528]	@ (8015828 <_dtoa_r+0xb80>)
 8015618:	4602      	mov	r2, r0
 801561a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801561e:	f7ff bb5a 	b.w	8014cd6 <_dtoa_r+0x2e>
 8015622:	692a      	ldr	r2, [r5, #16]
 8015624:	3202      	adds	r2, #2
 8015626:	0092      	lsls	r2, r2, #2
 8015628:	f105 010c 	add.w	r1, r5, #12
 801562c:	300c      	adds	r0, #12
 801562e:	f7ff faa4 	bl	8014b7a <memcpy>
 8015632:	2201      	movs	r2, #1
 8015634:	4631      	mov	r1, r6
 8015636:	4658      	mov	r0, fp
 8015638:	f000 fb52 	bl	8015ce0 <__lshift>
 801563c:	f10a 0301 	add.w	r3, sl, #1
 8015640:	9307      	str	r3, [sp, #28]
 8015642:	9b00      	ldr	r3, [sp, #0]
 8015644:	4453      	add	r3, sl
 8015646:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015648:	9b02      	ldr	r3, [sp, #8]
 801564a:	f003 0301 	and.w	r3, r3, #1
 801564e:	462f      	mov	r7, r5
 8015650:	930a      	str	r3, [sp, #40]	@ 0x28
 8015652:	4605      	mov	r5, r0
 8015654:	9b07      	ldr	r3, [sp, #28]
 8015656:	4621      	mov	r1, r4
 8015658:	3b01      	subs	r3, #1
 801565a:	4648      	mov	r0, r9
 801565c:	9300      	str	r3, [sp, #0]
 801565e:	f7ff fa9a 	bl	8014b96 <quorem>
 8015662:	4639      	mov	r1, r7
 8015664:	9002      	str	r0, [sp, #8]
 8015666:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801566a:	4648      	mov	r0, r9
 801566c:	f000 fba4 	bl	8015db8 <__mcmp>
 8015670:	462a      	mov	r2, r5
 8015672:	9008      	str	r0, [sp, #32]
 8015674:	4621      	mov	r1, r4
 8015676:	4658      	mov	r0, fp
 8015678:	f000 fbba 	bl	8015df0 <__mdiff>
 801567c:	68c2      	ldr	r2, [r0, #12]
 801567e:	4606      	mov	r6, r0
 8015680:	bb02      	cbnz	r2, 80156c4 <_dtoa_r+0xa1c>
 8015682:	4601      	mov	r1, r0
 8015684:	4648      	mov	r0, r9
 8015686:	f000 fb97 	bl	8015db8 <__mcmp>
 801568a:	4602      	mov	r2, r0
 801568c:	4631      	mov	r1, r6
 801568e:	4658      	mov	r0, fp
 8015690:	920e      	str	r2, [sp, #56]	@ 0x38
 8015692:	f000 f957 	bl	8015944 <_Bfree>
 8015696:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015698:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801569a:	9e07      	ldr	r6, [sp, #28]
 801569c:	ea43 0102 	orr.w	r1, r3, r2
 80156a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80156a2:	4319      	orrs	r1, r3
 80156a4:	d110      	bne.n	80156c8 <_dtoa_r+0xa20>
 80156a6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80156aa:	d029      	beq.n	8015700 <_dtoa_r+0xa58>
 80156ac:	9b08      	ldr	r3, [sp, #32]
 80156ae:	2b00      	cmp	r3, #0
 80156b0:	dd02      	ble.n	80156b8 <_dtoa_r+0xa10>
 80156b2:	9b02      	ldr	r3, [sp, #8]
 80156b4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80156b8:	9b00      	ldr	r3, [sp, #0]
 80156ba:	f883 8000 	strb.w	r8, [r3]
 80156be:	e63f      	b.n	8015340 <_dtoa_r+0x698>
 80156c0:	4628      	mov	r0, r5
 80156c2:	e7bb      	b.n	801563c <_dtoa_r+0x994>
 80156c4:	2201      	movs	r2, #1
 80156c6:	e7e1      	b.n	801568c <_dtoa_r+0x9e4>
 80156c8:	9b08      	ldr	r3, [sp, #32]
 80156ca:	2b00      	cmp	r3, #0
 80156cc:	db04      	blt.n	80156d8 <_dtoa_r+0xa30>
 80156ce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80156d0:	430b      	orrs	r3, r1
 80156d2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80156d4:	430b      	orrs	r3, r1
 80156d6:	d120      	bne.n	801571a <_dtoa_r+0xa72>
 80156d8:	2a00      	cmp	r2, #0
 80156da:	dded      	ble.n	80156b8 <_dtoa_r+0xa10>
 80156dc:	4649      	mov	r1, r9
 80156de:	2201      	movs	r2, #1
 80156e0:	4658      	mov	r0, fp
 80156e2:	f000 fafd 	bl	8015ce0 <__lshift>
 80156e6:	4621      	mov	r1, r4
 80156e8:	4681      	mov	r9, r0
 80156ea:	f000 fb65 	bl	8015db8 <__mcmp>
 80156ee:	2800      	cmp	r0, #0
 80156f0:	dc03      	bgt.n	80156fa <_dtoa_r+0xa52>
 80156f2:	d1e1      	bne.n	80156b8 <_dtoa_r+0xa10>
 80156f4:	f018 0f01 	tst.w	r8, #1
 80156f8:	d0de      	beq.n	80156b8 <_dtoa_r+0xa10>
 80156fa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80156fe:	d1d8      	bne.n	80156b2 <_dtoa_r+0xa0a>
 8015700:	9a00      	ldr	r2, [sp, #0]
 8015702:	2339      	movs	r3, #57	@ 0x39
 8015704:	7013      	strb	r3, [r2, #0]
 8015706:	4633      	mov	r3, r6
 8015708:	461e      	mov	r6, r3
 801570a:	3b01      	subs	r3, #1
 801570c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8015710:	2a39      	cmp	r2, #57	@ 0x39
 8015712:	d052      	beq.n	80157ba <_dtoa_r+0xb12>
 8015714:	3201      	adds	r2, #1
 8015716:	701a      	strb	r2, [r3, #0]
 8015718:	e612      	b.n	8015340 <_dtoa_r+0x698>
 801571a:	2a00      	cmp	r2, #0
 801571c:	dd07      	ble.n	801572e <_dtoa_r+0xa86>
 801571e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8015722:	d0ed      	beq.n	8015700 <_dtoa_r+0xa58>
 8015724:	9a00      	ldr	r2, [sp, #0]
 8015726:	f108 0301 	add.w	r3, r8, #1
 801572a:	7013      	strb	r3, [r2, #0]
 801572c:	e608      	b.n	8015340 <_dtoa_r+0x698>
 801572e:	9b07      	ldr	r3, [sp, #28]
 8015730:	9a07      	ldr	r2, [sp, #28]
 8015732:	f803 8c01 	strb.w	r8, [r3, #-1]
 8015736:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015738:	4293      	cmp	r3, r2
 801573a:	d028      	beq.n	801578e <_dtoa_r+0xae6>
 801573c:	4649      	mov	r1, r9
 801573e:	2300      	movs	r3, #0
 8015740:	220a      	movs	r2, #10
 8015742:	4658      	mov	r0, fp
 8015744:	f000 f920 	bl	8015988 <__multadd>
 8015748:	42af      	cmp	r7, r5
 801574a:	4681      	mov	r9, r0
 801574c:	f04f 0300 	mov.w	r3, #0
 8015750:	f04f 020a 	mov.w	r2, #10
 8015754:	4639      	mov	r1, r7
 8015756:	4658      	mov	r0, fp
 8015758:	d107      	bne.n	801576a <_dtoa_r+0xac2>
 801575a:	f000 f915 	bl	8015988 <__multadd>
 801575e:	4607      	mov	r7, r0
 8015760:	4605      	mov	r5, r0
 8015762:	9b07      	ldr	r3, [sp, #28]
 8015764:	3301      	adds	r3, #1
 8015766:	9307      	str	r3, [sp, #28]
 8015768:	e774      	b.n	8015654 <_dtoa_r+0x9ac>
 801576a:	f000 f90d 	bl	8015988 <__multadd>
 801576e:	4629      	mov	r1, r5
 8015770:	4607      	mov	r7, r0
 8015772:	2300      	movs	r3, #0
 8015774:	220a      	movs	r2, #10
 8015776:	4658      	mov	r0, fp
 8015778:	f000 f906 	bl	8015988 <__multadd>
 801577c:	4605      	mov	r5, r0
 801577e:	e7f0      	b.n	8015762 <_dtoa_r+0xaba>
 8015780:	9b00      	ldr	r3, [sp, #0]
 8015782:	2b00      	cmp	r3, #0
 8015784:	bfcc      	ite	gt
 8015786:	461e      	movgt	r6, r3
 8015788:	2601      	movle	r6, #1
 801578a:	4456      	add	r6, sl
 801578c:	2700      	movs	r7, #0
 801578e:	4649      	mov	r1, r9
 8015790:	2201      	movs	r2, #1
 8015792:	4658      	mov	r0, fp
 8015794:	f000 faa4 	bl	8015ce0 <__lshift>
 8015798:	4621      	mov	r1, r4
 801579a:	4681      	mov	r9, r0
 801579c:	f000 fb0c 	bl	8015db8 <__mcmp>
 80157a0:	2800      	cmp	r0, #0
 80157a2:	dcb0      	bgt.n	8015706 <_dtoa_r+0xa5e>
 80157a4:	d102      	bne.n	80157ac <_dtoa_r+0xb04>
 80157a6:	f018 0f01 	tst.w	r8, #1
 80157aa:	d1ac      	bne.n	8015706 <_dtoa_r+0xa5e>
 80157ac:	4633      	mov	r3, r6
 80157ae:	461e      	mov	r6, r3
 80157b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80157b4:	2a30      	cmp	r2, #48	@ 0x30
 80157b6:	d0fa      	beq.n	80157ae <_dtoa_r+0xb06>
 80157b8:	e5c2      	b.n	8015340 <_dtoa_r+0x698>
 80157ba:	459a      	cmp	sl, r3
 80157bc:	d1a4      	bne.n	8015708 <_dtoa_r+0xa60>
 80157be:	9b04      	ldr	r3, [sp, #16]
 80157c0:	3301      	adds	r3, #1
 80157c2:	9304      	str	r3, [sp, #16]
 80157c4:	2331      	movs	r3, #49	@ 0x31
 80157c6:	f88a 3000 	strb.w	r3, [sl]
 80157ca:	e5b9      	b.n	8015340 <_dtoa_r+0x698>
 80157cc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80157ce:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801582c <_dtoa_r+0xb84>
 80157d2:	b11b      	cbz	r3, 80157dc <_dtoa_r+0xb34>
 80157d4:	f10a 0308 	add.w	r3, sl, #8
 80157d8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80157da:	6013      	str	r3, [r2, #0]
 80157dc:	4650      	mov	r0, sl
 80157de:	b019      	add	sp, #100	@ 0x64
 80157e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80157e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80157e6:	2b01      	cmp	r3, #1
 80157e8:	f77f ae37 	ble.w	801545a <_dtoa_r+0x7b2>
 80157ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80157ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80157f0:	2001      	movs	r0, #1
 80157f2:	e655      	b.n	80154a0 <_dtoa_r+0x7f8>
 80157f4:	9b00      	ldr	r3, [sp, #0]
 80157f6:	2b00      	cmp	r3, #0
 80157f8:	f77f aed6 	ble.w	80155a8 <_dtoa_r+0x900>
 80157fc:	4656      	mov	r6, sl
 80157fe:	4621      	mov	r1, r4
 8015800:	4648      	mov	r0, r9
 8015802:	f7ff f9c8 	bl	8014b96 <quorem>
 8015806:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801580a:	f806 8b01 	strb.w	r8, [r6], #1
 801580e:	9b00      	ldr	r3, [sp, #0]
 8015810:	eba6 020a 	sub.w	r2, r6, sl
 8015814:	4293      	cmp	r3, r2
 8015816:	ddb3      	ble.n	8015780 <_dtoa_r+0xad8>
 8015818:	4649      	mov	r1, r9
 801581a:	2300      	movs	r3, #0
 801581c:	220a      	movs	r2, #10
 801581e:	4658      	mov	r0, fp
 8015820:	f000 f8b2 	bl	8015988 <__multadd>
 8015824:	4681      	mov	r9, r0
 8015826:	e7ea      	b.n	80157fe <_dtoa_r+0xb56>
 8015828:	080d49c0 	.word	0x080d49c0
 801582c:	080d4944 	.word	0x080d4944

08015830 <_free_r>:
 8015830:	b538      	push	{r3, r4, r5, lr}
 8015832:	4605      	mov	r5, r0
 8015834:	2900      	cmp	r1, #0
 8015836:	d041      	beq.n	80158bc <_free_r+0x8c>
 8015838:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801583c:	1f0c      	subs	r4, r1, #4
 801583e:	2b00      	cmp	r3, #0
 8015840:	bfb8      	it	lt
 8015842:	18e4      	addlt	r4, r4, r3
 8015844:	f7fe fa4e 	bl	8013ce4 <__malloc_lock>
 8015848:	4a1d      	ldr	r2, [pc, #116]	@ (80158c0 <_free_r+0x90>)
 801584a:	6813      	ldr	r3, [r2, #0]
 801584c:	b933      	cbnz	r3, 801585c <_free_r+0x2c>
 801584e:	6063      	str	r3, [r4, #4]
 8015850:	6014      	str	r4, [r2, #0]
 8015852:	4628      	mov	r0, r5
 8015854:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015858:	f7fe ba4a 	b.w	8013cf0 <__malloc_unlock>
 801585c:	42a3      	cmp	r3, r4
 801585e:	d908      	bls.n	8015872 <_free_r+0x42>
 8015860:	6820      	ldr	r0, [r4, #0]
 8015862:	1821      	adds	r1, r4, r0
 8015864:	428b      	cmp	r3, r1
 8015866:	bf01      	itttt	eq
 8015868:	6819      	ldreq	r1, [r3, #0]
 801586a:	685b      	ldreq	r3, [r3, #4]
 801586c:	1809      	addeq	r1, r1, r0
 801586e:	6021      	streq	r1, [r4, #0]
 8015870:	e7ed      	b.n	801584e <_free_r+0x1e>
 8015872:	461a      	mov	r2, r3
 8015874:	685b      	ldr	r3, [r3, #4]
 8015876:	b10b      	cbz	r3, 801587c <_free_r+0x4c>
 8015878:	42a3      	cmp	r3, r4
 801587a:	d9fa      	bls.n	8015872 <_free_r+0x42>
 801587c:	6811      	ldr	r1, [r2, #0]
 801587e:	1850      	adds	r0, r2, r1
 8015880:	42a0      	cmp	r0, r4
 8015882:	d10b      	bne.n	801589c <_free_r+0x6c>
 8015884:	6820      	ldr	r0, [r4, #0]
 8015886:	4401      	add	r1, r0
 8015888:	1850      	adds	r0, r2, r1
 801588a:	4283      	cmp	r3, r0
 801588c:	6011      	str	r1, [r2, #0]
 801588e:	d1e0      	bne.n	8015852 <_free_r+0x22>
 8015890:	6818      	ldr	r0, [r3, #0]
 8015892:	685b      	ldr	r3, [r3, #4]
 8015894:	6053      	str	r3, [r2, #4]
 8015896:	4408      	add	r0, r1
 8015898:	6010      	str	r0, [r2, #0]
 801589a:	e7da      	b.n	8015852 <_free_r+0x22>
 801589c:	d902      	bls.n	80158a4 <_free_r+0x74>
 801589e:	230c      	movs	r3, #12
 80158a0:	602b      	str	r3, [r5, #0]
 80158a2:	e7d6      	b.n	8015852 <_free_r+0x22>
 80158a4:	6820      	ldr	r0, [r4, #0]
 80158a6:	1821      	adds	r1, r4, r0
 80158a8:	428b      	cmp	r3, r1
 80158aa:	bf04      	itt	eq
 80158ac:	6819      	ldreq	r1, [r3, #0]
 80158ae:	685b      	ldreq	r3, [r3, #4]
 80158b0:	6063      	str	r3, [r4, #4]
 80158b2:	bf04      	itt	eq
 80158b4:	1809      	addeq	r1, r1, r0
 80158b6:	6021      	streq	r1, [r4, #0]
 80158b8:	6054      	str	r4, [r2, #4]
 80158ba:	e7ca      	b.n	8015852 <_free_r+0x22>
 80158bc:	bd38      	pop	{r3, r4, r5, pc}
 80158be:	bf00      	nop
 80158c0:	2002e75c 	.word	0x2002e75c

080158c4 <_Balloc>:
 80158c4:	b570      	push	{r4, r5, r6, lr}
 80158c6:	69c6      	ldr	r6, [r0, #28]
 80158c8:	4604      	mov	r4, r0
 80158ca:	460d      	mov	r5, r1
 80158cc:	b976      	cbnz	r6, 80158ec <_Balloc+0x28>
 80158ce:	2010      	movs	r0, #16
 80158d0:	f7fe f95e 	bl	8013b90 <malloc>
 80158d4:	4602      	mov	r2, r0
 80158d6:	61e0      	str	r0, [r4, #28]
 80158d8:	b920      	cbnz	r0, 80158e4 <_Balloc+0x20>
 80158da:	4b18      	ldr	r3, [pc, #96]	@ (801593c <_Balloc+0x78>)
 80158dc:	4818      	ldr	r0, [pc, #96]	@ (8015940 <_Balloc+0x7c>)
 80158de:	216b      	movs	r1, #107	@ 0x6b
 80158e0:	f000 ff5e 	bl	80167a0 <__assert_func>
 80158e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80158e8:	6006      	str	r6, [r0, #0]
 80158ea:	60c6      	str	r6, [r0, #12]
 80158ec:	69e6      	ldr	r6, [r4, #28]
 80158ee:	68f3      	ldr	r3, [r6, #12]
 80158f0:	b183      	cbz	r3, 8015914 <_Balloc+0x50>
 80158f2:	69e3      	ldr	r3, [r4, #28]
 80158f4:	68db      	ldr	r3, [r3, #12]
 80158f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80158fa:	b9b8      	cbnz	r0, 801592c <_Balloc+0x68>
 80158fc:	2101      	movs	r1, #1
 80158fe:	fa01 f605 	lsl.w	r6, r1, r5
 8015902:	1d72      	adds	r2, r6, #5
 8015904:	0092      	lsls	r2, r2, #2
 8015906:	4620      	mov	r0, r4
 8015908:	f000 ff68 	bl	80167dc <_calloc_r>
 801590c:	b160      	cbz	r0, 8015928 <_Balloc+0x64>
 801590e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8015912:	e00e      	b.n	8015932 <_Balloc+0x6e>
 8015914:	2221      	movs	r2, #33	@ 0x21
 8015916:	2104      	movs	r1, #4
 8015918:	4620      	mov	r0, r4
 801591a:	f000 ff5f 	bl	80167dc <_calloc_r>
 801591e:	69e3      	ldr	r3, [r4, #28]
 8015920:	60f0      	str	r0, [r6, #12]
 8015922:	68db      	ldr	r3, [r3, #12]
 8015924:	2b00      	cmp	r3, #0
 8015926:	d1e4      	bne.n	80158f2 <_Balloc+0x2e>
 8015928:	2000      	movs	r0, #0
 801592a:	bd70      	pop	{r4, r5, r6, pc}
 801592c:	6802      	ldr	r2, [r0, #0]
 801592e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015932:	2300      	movs	r3, #0
 8015934:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015938:	e7f7      	b.n	801592a <_Balloc+0x66>
 801593a:	bf00      	nop
 801593c:	080d4951 	.word	0x080d4951
 8015940:	080d49d1 	.word	0x080d49d1

08015944 <_Bfree>:
 8015944:	b570      	push	{r4, r5, r6, lr}
 8015946:	69c6      	ldr	r6, [r0, #28]
 8015948:	4605      	mov	r5, r0
 801594a:	460c      	mov	r4, r1
 801594c:	b976      	cbnz	r6, 801596c <_Bfree+0x28>
 801594e:	2010      	movs	r0, #16
 8015950:	f7fe f91e 	bl	8013b90 <malloc>
 8015954:	4602      	mov	r2, r0
 8015956:	61e8      	str	r0, [r5, #28]
 8015958:	b920      	cbnz	r0, 8015964 <_Bfree+0x20>
 801595a:	4b09      	ldr	r3, [pc, #36]	@ (8015980 <_Bfree+0x3c>)
 801595c:	4809      	ldr	r0, [pc, #36]	@ (8015984 <_Bfree+0x40>)
 801595e:	218f      	movs	r1, #143	@ 0x8f
 8015960:	f000 ff1e 	bl	80167a0 <__assert_func>
 8015964:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015968:	6006      	str	r6, [r0, #0]
 801596a:	60c6      	str	r6, [r0, #12]
 801596c:	b13c      	cbz	r4, 801597e <_Bfree+0x3a>
 801596e:	69eb      	ldr	r3, [r5, #28]
 8015970:	6862      	ldr	r2, [r4, #4]
 8015972:	68db      	ldr	r3, [r3, #12]
 8015974:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015978:	6021      	str	r1, [r4, #0]
 801597a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801597e:	bd70      	pop	{r4, r5, r6, pc}
 8015980:	080d4951 	.word	0x080d4951
 8015984:	080d49d1 	.word	0x080d49d1

08015988 <__multadd>:
 8015988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801598c:	690d      	ldr	r5, [r1, #16]
 801598e:	4607      	mov	r7, r0
 8015990:	460c      	mov	r4, r1
 8015992:	461e      	mov	r6, r3
 8015994:	f101 0c14 	add.w	ip, r1, #20
 8015998:	2000      	movs	r0, #0
 801599a:	f8dc 3000 	ldr.w	r3, [ip]
 801599e:	b299      	uxth	r1, r3
 80159a0:	fb02 6101 	mla	r1, r2, r1, r6
 80159a4:	0c1e      	lsrs	r6, r3, #16
 80159a6:	0c0b      	lsrs	r3, r1, #16
 80159a8:	fb02 3306 	mla	r3, r2, r6, r3
 80159ac:	b289      	uxth	r1, r1
 80159ae:	3001      	adds	r0, #1
 80159b0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80159b4:	4285      	cmp	r5, r0
 80159b6:	f84c 1b04 	str.w	r1, [ip], #4
 80159ba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80159be:	dcec      	bgt.n	801599a <__multadd+0x12>
 80159c0:	b30e      	cbz	r6, 8015a06 <__multadd+0x7e>
 80159c2:	68a3      	ldr	r3, [r4, #8]
 80159c4:	42ab      	cmp	r3, r5
 80159c6:	dc19      	bgt.n	80159fc <__multadd+0x74>
 80159c8:	6861      	ldr	r1, [r4, #4]
 80159ca:	4638      	mov	r0, r7
 80159cc:	3101      	adds	r1, #1
 80159ce:	f7ff ff79 	bl	80158c4 <_Balloc>
 80159d2:	4680      	mov	r8, r0
 80159d4:	b928      	cbnz	r0, 80159e2 <__multadd+0x5a>
 80159d6:	4602      	mov	r2, r0
 80159d8:	4b0c      	ldr	r3, [pc, #48]	@ (8015a0c <__multadd+0x84>)
 80159da:	480d      	ldr	r0, [pc, #52]	@ (8015a10 <__multadd+0x88>)
 80159dc:	21ba      	movs	r1, #186	@ 0xba
 80159de:	f000 fedf 	bl	80167a0 <__assert_func>
 80159e2:	6922      	ldr	r2, [r4, #16]
 80159e4:	3202      	adds	r2, #2
 80159e6:	f104 010c 	add.w	r1, r4, #12
 80159ea:	0092      	lsls	r2, r2, #2
 80159ec:	300c      	adds	r0, #12
 80159ee:	f7ff f8c4 	bl	8014b7a <memcpy>
 80159f2:	4621      	mov	r1, r4
 80159f4:	4638      	mov	r0, r7
 80159f6:	f7ff ffa5 	bl	8015944 <_Bfree>
 80159fa:	4644      	mov	r4, r8
 80159fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015a00:	3501      	adds	r5, #1
 8015a02:	615e      	str	r6, [r3, #20]
 8015a04:	6125      	str	r5, [r4, #16]
 8015a06:	4620      	mov	r0, r4
 8015a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a0c:	080d49c0 	.word	0x080d49c0
 8015a10:	080d49d1 	.word	0x080d49d1

08015a14 <__hi0bits>:
 8015a14:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8015a18:	4603      	mov	r3, r0
 8015a1a:	bf36      	itet	cc
 8015a1c:	0403      	lslcc	r3, r0, #16
 8015a1e:	2000      	movcs	r0, #0
 8015a20:	2010      	movcc	r0, #16
 8015a22:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8015a26:	bf3c      	itt	cc
 8015a28:	021b      	lslcc	r3, r3, #8
 8015a2a:	3008      	addcc	r0, #8
 8015a2c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8015a30:	bf3c      	itt	cc
 8015a32:	011b      	lslcc	r3, r3, #4
 8015a34:	3004      	addcc	r0, #4
 8015a36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8015a3a:	bf3c      	itt	cc
 8015a3c:	009b      	lslcc	r3, r3, #2
 8015a3e:	3002      	addcc	r0, #2
 8015a40:	2b00      	cmp	r3, #0
 8015a42:	db05      	blt.n	8015a50 <__hi0bits+0x3c>
 8015a44:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8015a48:	f100 0001 	add.w	r0, r0, #1
 8015a4c:	bf08      	it	eq
 8015a4e:	2020      	moveq	r0, #32
 8015a50:	4770      	bx	lr

08015a52 <__lo0bits>:
 8015a52:	6803      	ldr	r3, [r0, #0]
 8015a54:	4602      	mov	r2, r0
 8015a56:	f013 0007 	ands.w	r0, r3, #7
 8015a5a:	d00b      	beq.n	8015a74 <__lo0bits+0x22>
 8015a5c:	07d9      	lsls	r1, r3, #31
 8015a5e:	d421      	bmi.n	8015aa4 <__lo0bits+0x52>
 8015a60:	0798      	lsls	r0, r3, #30
 8015a62:	bf49      	itett	mi
 8015a64:	085b      	lsrmi	r3, r3, #1
 8015a66:	089b      	lsrpl	r3, r3, #2
 8015a68:	2001      	movmi	r0, #1
 8015a6a:	6013      	strmi	r3, [r2, #0]
 8015a6c:	bf5c      	itt	pl
 8015a6e:	6013      	strpl	r3, [r2, #0]
 8015a70:	2002      	movpl	r0, #2
 8015a72:	4770      	bx	lr
 8015a74:	b299      	uxth	r1, r3
 8015a76:	b909      	cbnz	r1, 8015a7c <__lo0bits+0x2a>
 8015a78:	0c1b      	lsrs	r3, r3, #16
 8015a7a:	2010      	movs	r0, #16
 8015a7c:	b2d9      	uxtb	r1, r3
 8015a7e:	b909      	cbnz	r1, 8015a84 <__lo0bits+0x32>
 8015a80:	3008      	adds	r0, #8
 8015a82:	0a1b      	lsrs	r3, r3, #8
 8015a84:	0719      	lsls	r1, r3, #28
 8015a86:	bf04      	itt	eq
 8015a88:	091b      	lsreq	r3, r3, #4
 8015a8a:	3004      	addeq	r0, #4
 8015a8c:	0799      	lsls	r1, r3, #30
 8015a8e:	bf04      	itt	eq
 8015a90:	089b      	lsreq	r3, r3, #2
 8015a92:	3002      	addeq	r0, #2
 8015a94:	07d9      	lsls	r1, r3, #31
 8015a96:	d403      	bmi.n	8015aa0 <__lo0bits+0x4e>
 8015a98:	085b      	lsrs	r3, r3, #1
 8015a9a:	f100 0001 	add.w	r0, r0, #1
 8015a9e:	d003      	beq.n	8015aa8 <__lo0bits+0x56>
 8015aa0:	6013      	str	r3, [r2, #0]
 8015aa2:	4770      	bx	lr
 8015aa4:	2000      	movs	r0, #0
 8015aa6:	4770      	bx	lr
 8015aa8:	2020      	movs	r0, #32
 8015aaa:	4770      	bx	lr

08015aac <__i2b>:
 8015aac:	b510      	push	{r4, lr}
 8015aae:	460c      	mov	r4, r1
 8015ab0:	2101      	movs	r1, #1
 8015ab2:	f7ff ff07 	bl	80158c4 <_Balloc>
 8015ab6:	4602      	mov	r2, r0
 8015ab8:	b928      	cbnz	r0, 8015ac6 <__i2b+0x1a>
 8015aba:	4b05      	ldr	r3, [pc, #20]	@ (8015ad0 <__i2b+0x24>)
 8015abc:	4805      	ldr	r0, [pc, #20]	@ (8015ad4 <__i2b+0x28>)
 8015abe:	f240 1145 	movw	r1, #325	@ 0x145
 8015ac2:	f000 fe6d 	bl	80167a0 <__assert_func>
 8015ac6:	2301      	movs	r3, #1
 8015ac8:	6144      	str	r4, [r0, #20]
 8015aca:	6103      	str	r3, [r0, #16]
 8015acc:	bd10      	pop	{r4, pc}
 8015ace:	bf00      	nop
 8015ad0:	080d49c0 	.word	0x080d49c0
 8015ad4:	080d49d1 	.word	0x080d49d1

08015ad8 <__multiply>:
 8015ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015adc:	4614      	mov	r4, r2
 8015ade:	690a      	ldr	r2, [r1, #16]
 8015ae0:	6923      	ldr	r3, [r4, #16]
 8015ae2:	429a      	cmp	r2, r3
 8015ae4:	bfa8      	it	ge
 8015ae6:	4623      	movge	r3, r4
 8015ae8:	460f      	mov	r7, r1
 8015aea:	bfa4      	itt	ge
 8015aec:	460c      	movge	r4, r1
 8015aee:	461f      	movge	r7, r3
 8015af0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8015af4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8015af8:	68a3      	ldr	r3, [r4, #8]
 8015afa:	6861      	ldr	r1, [r4, #4]
 8015afc:	eb0a 0609 	add.w	r6, sl, r9
 8015b00:	42b3      	cmp	r3, r6
 8015b02:	b085      	sub	sp, #20
 8015b04:	bfb8      	it	lt
 8015b06:	3101      	addlt	r1, #1
 8015b08:	f7ff fedc 	bl	80158c4 <_Balloc>
 8015b0c:	b930      	cbnz	r0, 8015b1c <__multiply+0x44>
 8015b0e:	4602      	mov	r2, r0
 8015b10:	4b44      	ldr	r3, [pc, #272]	@ (8015c24 <__multiply+0x14c>)
 8015b12:	4845      	ldr	r0, [pc, #276]	@ (8015c28 <__multiply+0x150>)
 8015b14:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8015b18:	f000 fe42 	bl	80167a0 <__assert_func>
 8015b1c:	f100 0514 	add.w	r5, r0, #20
 8015b20:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8015b24:	462b      	mov	r3, r5
 8015b26:	2200      	movs	r2, #0
 8015b28:	4543      	cmp	r3, r8
 8015b2a:	d321      	bcc.n	8015b70 <__multiply+0x98>
 8015b2c:	f107 0114 	add.w	r1, r7, #20
 8015b30:	f104 0214 	add.w	r2, r4, #20
 8015b34:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8015b38:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8015b3c:	9302      	str	r3, [sp, #8]
 8015b3e:	1b13      	subs	r3, r2, r4
 8015b40:	3b15      	subs	r3, #21
 8015b42:	f023 0303 	bic.w	r3, r3, #3
 8015b46:	3304      	adds	r3, #4
 8015b48:	f104 0715 	add.w	r7, r4, #21
 8015b4c:	42ba      	cmp	r2, r7
 8015b4e:	bf38      	it	cc
 8015b50:	2304      	movcc	r3, #4
 8015b52:	9301      	str	r3, [sp, #4]
 8015b54:	9b02      	ldr	r3, [sp, #8]
 8015b56:	9103      	str	r1, [sp, #12]
 8015b58:	428b      	cmp	r3, r1
 8015b5a:	d80c      	bhi.n	8015b76 <__multiply+0x9e>
 8015b5c:	2e00      	cmp	r6, #0
 8015b5e:	dd03      	ble.n	8015b68 <__multiply+0x90>
 8015b60:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8015b64:	2b00      	cmp	r3, #0
 8015b66:	d05b      	beq.n	8015c20 <__multiply+0x148>
 8015b68:	6106      	str	r6, [r0, #16]
 8015b6a:	b005      	add	sp, #20
 8015b6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b70:	f843 2b04 	str.w	r2, [r3], #4
 8015b74:	e7d8      	b.n	8015b28 <__multiply+0x50>
 8015b76:	f8b1 a000 	ldrh.w	sl, [r1]
 8015b7a:	f1ba 0f00 	cmp.w	sl, #0
 8015b7e:	d024      	beq.n	8015bca <__multiply+0xf2>
 8015b80:	f104 0e14 	add.w	lr, r4, #20
 8015b84:	46a9      	mov	r9, r5
 8015b86:	f04f 0c00 	mov.w	ip, #0
 8015b8a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8015b8e:	f8d9 3000 	ldr.w	r3, [r9]
 8015b92:	fa1f fb87 	uxth.w	fp, r7
 8015b96:	b29b      	uxth	r3, r3
 8015b98:	fb0a 330b 	mla	r3, sl, fp, r3
 8015b9c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8015ba0:	f8d9 7000 	ldr.w	r7, [r9]
 8015ba4:	4463      	add	r3, ip
 8015ba6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8015baa:	fb0a c70b 	mla	r7, sl, fp, ip
 8015bae:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8015bb2:	b29b      	uxth	r3, r3
 8015bb4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8015bb8:	4572      	cmp	r2, lr
 8015bba:	f849 3b04 	str.w	r3, [r9], #4
 8015bbe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8015bc2:	d8e2      	bhi.n	8015b8a <__multiply+0xb2>
 8015bc4:	9b01      	ldr	r3, [sp, #4]
 8015bc6:	f845 c003 	str.w	ip, [r5, r3]
 8015bca:	9b03      	ldr	r3, [sp, #12]
 8015bcc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8015bd0:	3104      	adds	r1, #4
 8015bd2:	f1b9 0f00 	cmp.w	r9, #0
 8015bd6:	d021      	beq.n	8015c1c <__multiply+0x144>
 8015bd8:	682b      	ldr	r3, [r5, #0]
 8015bda:	f104 0c14 	add.w	ip, r4, #20
 8015bde:	46ae      	mov	lr, r5
 8015be0:	f04f 0a00 	mov.w	sl, #0
 8015be4:	f8bc b000 	ldrh.w	fp, [ip]
 8015be8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8015bec:	fb09 770b 	mla	r7, r9, fp, r7
 8015bf0:	4457      	add	r7, sl
 8015bf2:	b29b      	uxth	r3, r3
 8015bf4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8015bf8:	f84e 3b04 	str.w	r3, [lr], #4
 8015bfc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8015c00:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8015c04:	f8be 3000 	ldrh.w	r3, [lr]
 8015c08:	fb09 330a 	mla	r3, r9, sl, r3
 8015c0c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8015c10:	4562      	cmp	r2, ip
 8015c12:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8015c16:	d8e5      	bhi.n	8015be4 <__multiply+0x10c>
 8015c18:	9f01      	ldr	r7, [sp, #4]
 8015c1a:	51eb      	str	r3, [r5, r7]
 8015c1c:	3504      	adds	r5, #4
 8015c1e:	e799      	b.n	8015b54 <__multiply+0x7c>
 8015c20:	3e01      	subs	r6, #1
 8015c22:	e79b      	b.n	8015b5c <__multiply+0x84>
 8015c24:	080d49c0 	.word	0x080d49c0
 8015c28:	080d49d1 	.word	0x080d49d1

08015c2c <__pow5mult>:
 8015c2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015c30:	4615      	mov	r5, r2
 8015c32:	f012 0203 	ands.w	r2, r2, #3
 8015c36:	4607      	mov	r7, r0
 8015c38:	460e      	mov	r6, r1
 8015c3a:	d007      	beq.n	8015c4c <__pow5mult+0x20>
 8015c3c:	4c25      	ldr	r4, [pc, #148]	@ (8015cd4 <__pow5mult+0xa8>)
 8015c3e:	3a01      	subs	r2, #1
 8015c40:	2300      	movs	r3, #0
 8015c42:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015c46:	f7ff fe9f 	bl	8015988 <__multadd>
 8015c4a:	4606      	mov	r6, r0
 8015c4c:	10ad      	asrs	r5, r5, #2
 8015c4e:	d03d      	beq.n	8015ccc <__pow5mult+0xa0>
 8015c50:	69fc      	ldr	r4, [r7, #28]
 8015c52:	b97c      	cbnz	r4, 8015c74 <__pow5mult+0x48>
 8015c54:	2010      	movs	r0, #16
 8015c56:	f7fd ff9b 	bl	8013b90 <malloc>
 8015c5a:	4602      	mov	r2, r0
 8015c5c:	61f8      	str	r0, [r7, #28]
 8015c5e:	b928      	cbnz	r0, 8015c6c <__pow5mult+0x40>
 8015c60:	4b1d      	ldr	r3, [pc, #116]	@ (8015cd8 <__pow5mult+0xac>)
 8015c62:	481e      	ldr	r0, [pc, #120]	@ (8015cdc <__pow5mult+0xb0>)
 8015c64:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8015c68:	f000 fd9a 	bl	80167a0 <__assert_func>
 8015c6c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015c70:	6004      	str	r4, [r0, #0]
 8015c72:	60c4      	str	r4, [r0, #12]
 8015c74:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8015c78:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015c7c:	b94c      	cbnz	r4, 8015c92 <__pow5mult+0x66>
 8015c7e:	f240 2171 	movw	r1, #625	@ 0x271
 8015c82:	4638      	mov	r0, r7
 8015c84:	f7ff ff12 	bl	8015aac <__i2b>
 8015c88:	2300      	movs	r3, #0
 8015c8a:	f8c8 0008 	str.w	r0, [r8, #8]
 8015c8e:	4604      	mov	r4, r0
 8015c90:	6003      	str	r3, [r0, #0]
 8015c92:	f04f 0900 	mov.w	r9, #0
 8015c96:	07eb      	lsls	r3, r5, #31
 8015c98:	d50a      	bpl.n	8015cb0 <__pow5mult+0x84>
 8015c9a:	4631      	mov	r1, r6
 8015c9c:	4622      	mov	r2, r4
 8015c9e:	4638      	mov	r0, r7
 8015ca0:	f7ff ff1a 	bl	8015ad8 <__multiply>
 8015ca4:	4631      	mov	r1, r6
 8015ca6:	4680      	mov	r8, r0
 8015ca8:	4638      	mov	r0, r7
 8015caa:	f7ff fe4b 	bl	8015944 <_Bfree>
 8015cae:	4646      	mov	r6, r8
 8015cb0:	106d      	asrs	r5, r5, #1
 8015cb2:	d00b      	beq.n	8015ccc <__pow5mult+0xa0>
 8015cb4:	6820      	ldr	r0, [r4, #0]
 8015cb6:	b938      	cbnz	r0, 8015cc8 <__pow5mult+0x9c>
 8015cb8:	4622      	mov	r2, r4
 8015cba:	4621      	mov	r1, r4
 8015cbc:	4638      	mov	r0, r7
 8015cbe:	f7ff ff0b 	bl	8015ad8 <__multiply>
 8015cc2:	6020      	str	r0, [r4, #0]
 8015cc4:	f8c0 9000 	str.w	r9, [r0]
 8015cc8:	4604      	mov	r4, r0
 8015cca:	e7e4      	b.n	8015c96 <__pow5mult+0x6a>
 8015ccc:	4630      	mov	r0, r6
 8015cce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015cd2:	bf00      	nop
 8015cd4:	080d4a2c 	.word	0x080d4a2c
 8015cd8:	080d4951 	.word	0x080d4951
 8015cdc:	080d49d1 	.word	0x080d49d1

08015ce0 <__lshift>:
 8015ce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015ce4:	460c      	mov	r4, r1
 8015ce6:	6849      	ldr	r1, [r1, #4]
 8015ce8:	6923      	ldr	r3, [r4, #16]
 8015cea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8015cee:	68a3      	ldr	r3, [r4, #8]
 8015cf0:	4607      	mov	r7, r0
 8015cf2:	4691      	mov	r9, r2
 8015cf4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015cf8:	f108 0601 	add.w	r6, r8, #1
 8015cfc:	42b3      	cmp	r3, r6
 8015cfe:	db0b      	blt.n	8015d18 <__lshift+0x38>
 8015d00:	4638      	mov	r0, r7
 8015d02:	f7ff fddf 	bl	80158c4 <_Balloc>
 8015d06:	4605      	mov	r5, r0
 8015d08:	b948      	cbnz	r0, 8015d1e <__lshift+0x3e>
 8015d0a:	4602      	mov	r2, r0
 8015d0c:	4b28      	ldr	r3, [pc, #160]	@ (8015db0 <__lshift+0xd0>)
 8015d0e:	4829      	ldr	r0, [pc, #164]	@ (8015db4 <__lshift+0xd4>)
 8015d10:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8015d14:	f000 fd44 	bl	80167a0 <__assert_func>
 8015d18:	3101      	adds	r1, #1
 8015d1a:	005b      	lsls	r3, r3, #1
 8015d1c:	e7ee      	b.n	8015cfc <__lshift+0x1c>
 8015d1e:	2300      	movs	r3, #0
 8015d20:	f100 0114 	add.w	r1, r0, #20
 8015d24:	f100 0210 	add.w	r2, r0, #16
 8015d28:	4618      	mov	r0, r3
 8015d2a:	4553      	cmp	r3, sl
 8015d2c:	db33      	blt.n	8015d96 <__lshift+0xb6>
 8015d2e:	6920      	ldr	r0, [r4, #16]
 8015d30:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015d34:	f104 0314 	add.w	r3, r4, #20
 8015d38:	f019 091f 	ands.w	r9, r9, #31
 8015d3c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015d40:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8015d44:	d02b      	beq.n	8015d9e <__lshift+0xbe>
 8015d46:	f1c9 0e20 	rsb	lr, r9, #32
 8015d4a:	468a      	mov	sl, r1
 8015d4c:	2200      	movs	r2, #0
 8015d4e:	6818      	ldr	r0, [r3, #0]
 8015d50:	fa00 f009 	lsl.w	r0, r0, r9
 8015d54:	4310      	orrs	r0, r2
 8015d56:	f84a 0b04 	str.w	r0, [sl], #4
 8015d5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8015d5e:	459c      	cmp	ip, r3
 8015d60:	fa22 f20e 	lsr.w	r2, r2, lr
 8015d64:	d8f3      	bhi.n	8015d4e <__lshift+0x6e>
 8015d66:	ebac 0304 	sub.w	r3, ip, r4
 8015d6a:	3b15      	subs	r3, #21
 8015d6c:	f023 0303 	bic.w	r3, r3, #3
 8015d70:	3304      	adds	r3, #4
 8015d72:	f104 0015 	add.w	r0, r4, #21
 8015d76:	4584      	cmp	ip, r0
 8015d78:	bf38      	it	cc
 8015d7a:	2304      	movcc	r3, #4
 8015d7c:	50ca      	str	r2, [r1, r3]
 8015d7e:	b10a      	cbz	r2, 8015d84 <__lshift+0xa4>
 8015d80:	f108 0602 	add.w	r6, r8, #2
 8015d84:	3e01      	subs	r6, #1
 8015d86:	4638      	mov	r0, r7
 8015d88:	612e      	str	r6, [r5, #16]
 8015d8a:	4621      	mov	r1, r4
 8015d8c:	f7ff fdda 	bl	8015944 <_Bfree>
 8015d90:	4628      	mov	r0, r5
 8015d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015d96:	f842 0f04 	str.w	r0, [r2, #4]!
 8015d9a:	3301      	adds	r3, #1
 8015d9c:	e7c5      	b.n	8015d2a <__lshift+0x4a>
 8015d9e:	3904      	subs	r1, #4
 8015da0:	f853 2b04 	ldr.w	r2, [r3], #4
 8015da4:	f841 2f04 	str.w	r2, [r1, #4]!
 8015da8:	459c      	cmp	ip, r3
 8015daa:	d8f9      	bhi.n	8015da0 <__lshift+0xc0>
 8015dac:	e7ea      	b.n	8015d84 <__lshift+0xa4>
 8015dae:	bf00      	nop
 8015db0:	080d49c0 	.word	0x080d49c0
 8015db4:	080d49d1 	.word	0x080d49d1

08015db8 <__mcmp>:
 8015db8:	690a      	ldr	r2, [r1, #16]
 8015dba:	4603      	mov	r3, r0
 8015dbc:	6900      	ldr	r0, [r0, #16]
 8015dbe:	1a80      	subs	r0, r0, r2
 8015dc0:	b530      	push	{r4, r5, lr}
 8015dc2:	d10e      	bne.n	8015de2 <__mcmp+0x2a>
 8015dc4:	3314      	adds	r3, #20
 8015dc6:	3114      	adds	r1, #20
 8015dc8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8015dcc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8015dd0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8015dd4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8015dd8:	4295      	cmp	r5, r2
 8015dda:	d003      	beq.n	8015de4 <__mcmp+0x2c>
 8015ddc:	d205      	bcs.n	8015dea <__mcmp+0x32>
 8015dde:	f04f 30ff 	mov.w	r0, #4294967295
 8015de2:	bd30      	pop	{r4, r5, pc}
 8015de4:	42a3      	cmp	r3, r4
 8015de6:	d3f3      	bcc.n	8015dd0 <__mcmp+0x18>
 8015de8:	e7fb      	b.n	8015de2 <__mcmp+0x2a>
 8015dea:	2001      	movs	r0, #1
 8015dec:	e7f9      	b.n	8015de2 <__mcmp+0x2a>
	...

08015df0 <__mdiff>:
 8015df0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015df4:	4689      	mov	r9, r1
 8015df6:	4606      	mov	r6, r0
 8015df8:	4611      	mov	r1, r2
 8015dfa:	4648      	mov	r0, r9
 8015dfc:	4614      	mov	r4, r2
 8015dfe:	f7ff ffdb 	bl	8015db8 <__mcmp>
 8015e02:	1e05      	subs	r5, r0, #0
 8015e04:	d112      	bne.n	8015e2c <__mdiff+0x3c>
 8015e06:	4629      	mov	r1, r5
 8015e08:	4630      	mov	r0, r6
 8015e0a:	f7ff fd5b 	bl	80158c4 <_Balloc>
 8015e0e:	4602      	mov	r2, r0
 8015e10:	b928      	cbnz	r0, 8015e1e <__mdiff+0x2e>
 8015e12:	4b3f      	ldr	r3, [pc, #252]	@ (8015f10 <__mdiff+0x120>)
 8015e14:	f240 2137 	movw	r1, #567	@ 0x237
 8015e18:	483e      	ldr	r0, [pc, #248]	@ (8015f14 <__mdiff+0x124>)
 8015e1a:	f000 fcc1 	bl	80167a0 <__assert_func>
 8015e1e:	2301      	movs	r3, #1
 8015e20:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8015e24:	4610      	mov	r0, r2
 8015e26:	b003      	add	sp, #12
 8015e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e2c:	bfbc      	itt	lt
 8015e2e:	464b      	movlt	r3, r9
 8015e30:	46a1      	movlt	r9, r4
 8015e32:	4630      	mov	r0, r6
 8015e34:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8015e38:	bfba      	itte	lt
 8015e3a:	461c      	movlt	r4, r3
 8015e3c:	2501      	movlt	r5, #1
 8015e3e:	2500      	movge	r5, #0
 8015e40:	f7ff fd40 	bl	80158c4 <_Balloc>
 8015e44:	4602      	mov	r2, r0
 8015e46:	b918      	cbnz	r0, 8015e50 <__mdiff+0x60>
 8015e48:	4b31      	ldr	r3, [pc, #196]	@ (8015f10 <__mdiff+0x120>)
 8015e4a:	f240 2145 	movw	r1, #581	@ 0x245
 8015e4e:	e7e3      	b.n	8015e18 <__mdiff+0x28>
 8015e50:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8015e54:	6926      	ldr	r6, [r4, #16]
 8015e56:	60c5      	str	r5, [r0, #12]
 8015e58:	f109 0310 	add.w	r3, r9, #16
 8015e5c:	f109 0514 	add.w	r5, r9, #20
 8015e60:	f104 0e14 	add.w	lr, r4, #20
 8015e64:	f100 0b14 	add.w	fp, r0, #20
 8015e68:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8015e6c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8015e70:	9301      	str	r3, [sp, #4]
 8015e72:	46d9      	mov	r9, fp
 8015e74:	f04f 0c00 	mov.w	ip, #0
 8015e78:	9b01      	ldr	r3, [sp, #4]
 8015e7a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8015e7e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8015e82:	9301      	str	r3, [sp, #4]
 8015e84:	fa1f f38a 	uxth.w	r3, sl
 8015e88:	4619      	mov	r1, r3
 8015e8a:	b283      	uxth	r3, r0
 8015e8c:	1acb      	subs	r3, r1, r3
 8015e8e:	0c00      	lsrs	r0, r0, #16
 8015e90:	4463      	add	r3, ip
 8015e92:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8015e96:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8015e9a:	b29b      	uxth	r3, r3
 8015e9c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8015ea0:	4576      	cmp	r6, lr
 8015ea2:	f849 3b04 	str.w	r3, [r9], #4
 8015ea6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8015eaa:	d8e5      	bhi.n	8015e78 <__mdiff+0x88>
 8015eac:	1b33      	subs	r3, r6, r4
 8015eae:	3b15      	subs	r3, #21
 8015eb0:	f023 0303 	bic.w	r3, r3, #3
 8015eb4:	3415      	adds	r4, #21
 8015eb6:	3304      	adds	r3, #4
 8015eb8:	42a6      	cmp	r6, r4
 8015eba:	bf38      	it	cc
 8015ebc:	2304      	movcc	r3, #4
 8015ebe:	441d      	add	r5, r3
 8015ec0:	445b      	add	r3, fp
 8015ec2:	461e      	mov	r6, r3
 8015ec4:	462c      	mov	r4, r5
 8015ec6:	4544      	cmp	r4, r8
 8015ec8:	d30e      	bcc.n	8015ee8 <__mdiff+0xf8>
 8015eca:	f108 0103 	add.w	r1, r8, #3
 8015ece:	1b49      	subs	r1, r1, r5
 8015ed0:	f021 0103 	bic.w	r1, r1, #3
 8015ed4:	3d03      	subs	r5, #3
 8015ed6:	45a8      	cmp	r8, r5
 8015ed8:	bf38      	it	cc
 8015eda:	2100      	movcc	r1, #0
 8015edc:	440b      	add	r3, r1
 8015ede:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8015ee2:	b191      	cbz	r1, 8015f0a <__mdiff+0x11a>
 8015ee4:	6117      	str	r7, [r2, #16]
 8015ee6:	e79d      	b.n	8015e24 <__mdiff+0x34>
 8015ee8:	f854 1b04 	ldr.w	r1, [r4], #4
 8015eec:	46e6      	mov	lr, ip
 8015eee:	0c08      	lsrs	r0, r1, #16
 8015ef0:	fa1c fc81 	uxtah	ip, ip, r1
 8015ef4:	4471      	add	r1, lr
 8015ef6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8015efa:	b289      	uxth	r1, r1
 8015efc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8015f00:	f846 1b04 	str.w	r1, [r6], #4
 8015f04:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8015f08:	e7dd      	b.n	8015ec6 <__mdiff+0xd6>
 8015f0a:	3f01      	subs	r7, #1
 8015f0c:	e7e7      	b.n	8015ede <__mdiff+0xee>
 8015f0e:	bf00      	nop
 8015f10:	080d49c0 	.word	0x080d49c0
 8015f14:	080d49d1 	.word	0x080d49d1

08015f18 <__d2b>:
 8015f18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015f1c:	460f      	mov	r7, r1
 8015f1e:	2101      	movs	r1, #1
 8015f20:	ec59 8b10 	vmov	r8, r9, d0
 8015f24:	4616      	mov	r6, r2
 8015f26:	f7ff fccd 	bl	80158c4 <_Balloc>
 8015f2a:	4604      	mov	r4, r0
 8015f2c:	b930      	cbnz	r0, 8015f3c <__d2b+0x24>
 8015f2e:	4602      	mov	r2, r0
 8015f30:	4b23      	ldr	r3, [pc, #140]	@ (8015fc0 <__d2b+0xa8>)
 8015f32:	4824      	ldr	r0, [pc, #144]	@ (8015fc4 <__d2b+0xac>)
 8015f34:	f240 310f 	movw	r1, #783	@ 0x30f
 8015f38:	f000 fc32 	bl	80167a0 <__assert_func>
 8015f3c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8015f40:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015f44:	b10d      	cbz	r5, 8015f4a <__d2b+0x32>
 8015f46:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8015f4a:	9301      	str	r3, [sp, #4]
 8015f4c:	f1b8 0300 	subs.w	r3, r8, #0
 8015f50:	d023      	beq.n	8015f9a <__d2b+0x82>
 8015f52:	4668      	mov	r0, sp
 8015f54:	9300      	str	r3, [sp, #0]
 8015f56:	f7ff fd7c 	bl	8015a52 <__lo0bits>
 8015f5a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8015f5e:	b1d0      	cbz	r0, 8015f96 <__d2b+0x7e>
 8015f60:	f1c0 0320 	rsb	r3, r0, #32
 8015f64:	fa02 f303 	lsl.w	r3, r2, r3
 8015f68:	430b      	orrs	r3, r1
 8015f6a:	40c2      	lsrs	r2, r0
 8015f6c:	6163      	str	r3, [r4, #20]
 8015f6e:	9201      	str	r2, [sp, #4]
 8015f70:	9b01      	ldr	r3, [sp, #4]
 8015f72:	61a3      	str	r3, [r4, #24]
 8015f74:	2b00      	cmp	r3, #0
 8015f76:	bf0c      	ite	eq
 8015f78:	2201      	moveq	r2, #1
 8015f7a:	2202      	movne	r2, #2
 8015f7c:	6122      	str	r2, [r4, #16]
 8015f7e:	b1a5      	cbz	r5, 8015faa <__d2b+0x92>
 8015f80:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8015f84:	4405      	add	r5, r0
 8015f86:	603d      	str	r5, [r7, #0]
 8015f88:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8015f8c:	6030      	str	r0, [r6, #0]
 8015f8e:	4620      	mov	r0, r4
 8015f90:	b003      	add	sp, #12
 8015f92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015f96:	6161      	str	r1, [r4, #20]
 8015f98:	e7ea      	b.n	8015f70 <__d2b+0x58>
 8015f9a:	a801      	add	r0, sp, #4
 8015f9c:	f7ff fd59 	bl	8015a52 <__lo0bits>
 8015fa0:	9b01      	ldr	r3, [sp, #4]
 8015fa2:	6163      	str	r3, [r4, #20]
 8015fa4:	3020      	adds	r0, #32
 8015fa6:	2201      	movs	r2, #1
 8015fa8:	e7e8      	b.n	8015f7c <__d2b+0x64>
 8015faa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8015fae:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8015fb2:	6038      	str	r0, [r7, #0]
 8015fb4:	6918      	ldr	r0, [r3, #16]
 8015fb6:	f7ff fd2d 	bl	8015a14 <__hi0bits>
 8015fba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8015fbe:	e7e5      	b.n	8015f8c <__d2b+0x74>
 8015fc0:	080d49c0 	.word	0x080d49c0
 8015fc4:	080d49d1 	.word	0x080d49d1

08015fc8 <_malloc_usable_size_r>:
 8015fc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015fcc:	1f18      	subs	r0, r3, #4
 8015fce:	2b00      	cmp	r3, #0
 8015fd0:	bfbc      	itt	lt
 8015fd2:	580b      	ldrlt	r3, [r1, r0]
 8015fd4:	18c0      	addlt	r0, r0, r3
 8015fd6:	4770      	bx	lr

08015fd8 <__ssputs_r>:
 8015fd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015fdc:	688e      	ldr	r6, [r1, #8]
 8015fde:	461f      	mov	r7, r3
 8015fe0:	42be      	cmp	r6, r7
 8015fe2:	680b      	ldr	r3, [r1, #0]
 8015fe4:	4682      	mov	sl, r0
 8015fe6:	460c      	mov	r4, r1
 8015fe8:	4690      	mov	r8, r2
 8015fea:	d82d      	bhi.n	8016048 <__ssputs_r+0x70>
 8015fec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8015ff0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8015ff4:	d026      	beq.n	8016044 <__ssputs_r+0x6c>
 8015ff6:	6965      	ldr	r5, [r4, #20]
 8015ff8:	6909      	ldr	r1, [r1, #16]
 8015ffa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015ffe:	eba3 0901 	sub.w	r9, r3, r1
 8016002:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016006:	1c7b      	adds	r3, r7, #1
 8016008:	444b      	add	r3, r9
 801600a:	106d      	asrs	r5, r5, #1
 801600c:	429d      	cmp	r5, r3
 801600e:	bf38      	it	cc
 8016010:	461d      	movcc	r5, r3
 8016012:	0553      	lsls	r3, r2, #21
 8016014:	d527      	bpl.n	8016066 <__ssputs_r+0x8e>
 8016016:	4629      	mov	r1, r5
 8016018:	f7fd fde4 	bl	8013be4 <_malloc_r>
 801601c:	4606      	mov	r6, r0
 801601e:	b360      	cbz	r0, 801607a <__ssputs_r+0xa2>
 8016020:	6921      	ldr	r1, [r4, #16]
 8016022:	464a      	mov	r2, r9
 8016024:	f7fe fda9 	bl	8014b7a <memcpy>
 8016028:	89a3      	ldrh	r3, [r4, #12]
 801602a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801602e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016032:	81a3      	strh	r3, [r4, #12]
 8016034:	6126      	str	r6, [r4, #16]
 8016036:	6165      	str	r5, [r4, #20]
 8016038:	444e      	add	r6, r9
 801603a:	eba5 0509 	sub.w	r5, r5, r9
 801603e:	6026      	str	r6, [r4, #0]
 8016040:	60a5      	str	r5, [r4, #8]
 8016042:	463e      	mov	r6, r7
 8016044:	42be      	cmp	r6, r7
 8016046:	d900      	bls.n	801604a <__ssputs_r+0x72>
 8016048:	463e      	mov	r6, r7
 801604a:	6820      	ldr	r0, [r4, #0]
 801604c:	4632      	mov	r2, r6
 801604e:	4641      	mov	r1, r8
 8016050:	f000 fb6a 	bl	8016728 <memmove>
 8016054:	68a3      	ldr	r3, [r4, #8]
 8016056:	1b9b      	subs	r3, r3, r6
 8016058:	60a3      	str	r3, [r4, #8]
 801605a:	6823      	ldr	r3, [r4, #0]
 801605c:	4433      	add	r3, r6
 801605e:	6023      	str	r3, [r4, #0]
 8016060:	2000      	movs	r0, #0
 8016062:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016066:	462a      	mov	r2, r5
 8016068:	f7fd fe48 	bl	8013cfc <_realloc_r>
 801606c:	4606      	mov	r6, r0
 801606e:	2800      	cmp	r0, #0
 8016070:	d1e0      	bne.n	8016034 <__ssputs_r+0x5c>
 8016072:	6921      	ldr	r1, [r4, #16]
 8016074:	4650      	mov	r0, sl
 8016076:	f7ff fbdb 	bl	8015830 <_free_r>
 801607a:	230c      	movs	r3, #12
 801607c:	f8ca 3000 	str.w	r3, [sl]
 8016080:	89a3      	ldrh	r3, [r4, #12]
 8016082:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016086:	81a3      	strh	r3, [r4, #12]
 8016088:	f04f 30ff 	mov.w	r0, #4294967295
 801608c:	e7e9      	b.n	8016062 <__ssputs_r+0x8a>
	...

08016090 <_svfiprintf_r>:
 8016090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016094:	4698      	mov	r8, r3
 8016096:	898b      	ldrh	r3, [r1, #12]
 8016098:	061b      	lsls	r3, r3, #24
 801609a:	b09d      	sub	sp, #116	@ 0x74
 801609c:	4607      	mov	r7, r0
 801609e:	460d      	mov	r5, r1
 80160a0:	4614      	mov	r4, r2
 80160a2:	d510      	bpl.n	80160c6 <_svfiprintf_r+0x36>
 80160a4:	690b      	ldr	r3, [r1, #16]
 80160a6:	b973      	cbnz	r3, 80160c6 <_svfiprintf_r+0x36>
 80160a8:	2140      	movs	r1, #64	@ 0x40
 80160aa:	f7fd fd9b 	bl	8013be4 <_malloc_r>
 80160ae:	6028      	str	r0, [r5, #0]
 80160b0:	6128      	str	r0, [r5, #16]
 80160b2:	b930      	cbnz	r0, 80160c2 <_svfiprintf_r+0x32>
 80160b4:	230c      	movs	r3, #12
 80160b6:	603b      	str	r3, [r7, #0]
 80160b8:	f04f 30ff 	mov.w	r0, #4294967295
 80160bc:	b01d      	add	sp, #116	@ 0x74
 80160be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80160c2:	2340      	movs	r3, #64	@ 0x40
 80160c4:	616b      	str	r3, [r5, #20]
 80160c6:	2300      	movs	r3, #0
 80160c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80160ca:	2320      	movs	r3, #32
 80160cc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80160d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80160d4:	2330      	movs	r3, #48	@ 0x30
 80160d6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8016274 <_svfiprintf_r+0x1e4>
 80160da:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80160de:	f04f 0901 	mov.w	r9, #1
 80160e2:	4623      	mov	r3, r4
 80160e4:	469a      	mov	sl, r3
 80160e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80160ea:	b10a      	cbz	r2, 80160f0 <_svfiprintf_r+0x60>
 80160ec:	2a25      	cmp	r2, #37	@ 0x25
 80160ee:	d1f9      	bne.n	80160e4 <_svfiprintf_r+0x54>
 80160f0:	ebba 0b04 	subs.w	fp, sl, r4
 80160f4:	d00b      	beq.n	801610e <_svfiprintf_r+0x7e>
 80160f6:	465b      	mov	r3, fp
 80160f8:	4622      	mov	r2, r4
 80160fa:	4629      	mov	r1, r5
 80160fc:	4638      	mov	r0, r7
 80160fe:	f7ff ff6b 	bl	8015fd8 <__ssputs_r>
 8016102:	3001      	adds	r0, #1
 8016104:	f000 80a7 	beq.w	8016256 <_svfiprintf_r+0x1c6>
 8016108:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801610a:	445a      	add	r2, fp
 801610c:	9209      	str	r2, [sp, #36]	@ 0x24
 801610e:	f89a 3000 	ldrb.w	r3, [sl]
 8016112:	2b00      	cmp	r3, #0
 8016114:	f000 809f 	beq.w	8016256 <_svfiprintf_r+0x1c6>
 8016118:	2300      	movs	r3, #0
 801611a:	f04f 32ff 	mov.w	r2, #4294967295
 801611e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016122:	f10a 0a01 	add.w	sl, sl, #1
 8016126:	9304      	str	r3, [sp, #16]
 8016128:	9307      	str	r3, [sp, #28]
 801612a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801612e:	931a      	str	r3, [sp, #104]	@ 0x68
 8016130:	4654      	mov	r4, sl
 8016132:	2205      	movs	r2, #5
 8016134:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016138:	484e      	ldr	r0, [pc, #312]	@ (8016274 <_svfiprintf_r+0x1e4>)
 801613a:	f7ea f8c9 	bl	80002d0 <memchr>
 801613e:	9a04      	ldr	r2, [sp, #16]
 8016140:	b9d8      	cbnz	r0, 801617a <_svfiprintf_r+0xea>
 8016142:	06d0      	lsls	r0, r2, #27
 8016144:	bf44      	itt	mi
 8016146:	2320      	movmi	r3, #32
 8016148:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801614c:	0711      	lsls	r1, r2, #28
 801614e:	bf44      	itt	mi
 8016150:	232b      	movmi	r3, #43	@ 0x2b
 8016152:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016156:	f89a 3000 	ldrb.w	r3, [sl]
 801615a:	2b2a      	cmp	r3, #42	@ 0x2a
 801615c:	d015      	beq.n	801618a <_svfiprintf_r+0xfa>
 801615e:	9a07      	ldr	r2, [sp, #28]
 8016160:	4654      	mov	r4, sl
 8016162:	2000      	movs	r0, #0
 8016164:	f04f 0c0a 	mov.w	ip, #10
 8016168:	4621      	mov	r1, r4
 801616a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801616e:	3b30      	subs	r3, #48	@ 0x30
 8016170:	2b09      	cmp	r3, #9
 8016172:	d94b      	bls.n	801620c <_svfiprintf_r+0x17c>
 8016174:	b1b0      	cbz	r0, 80161a4 <_svfiprintf_r+0x114>
 8016176:	9207      	str	r2, [sp, #28]
 8016178:	e014      	b.n	80161a4 <_svfiprintf_r+0x114>
 801617a:	eba0 0308 	sub.w	r3, r0, r8
 801617e:	fa09 f303 	lsl.w	r3, r9, r3
 8016182:	4313      	orrs	r3, r2
 8016184:	9304      	str	r3, [sp, #16]
 8016186:	46a2      	mov	sl, r4
 8016188:	e7d2      	b.n	8016130 <_svfiprintf_r+0xa0>
 801618a:	9b03      	ldr	r3, [sp, #12]
 801618c:	1d19      	adds	r1, r3, #4
 801618e:	681b      	ldr	r3, [r3, #0]
 8016190:	9103      	str	r1, [sp, #12]
 8016192:	2b00      	cmp	r3, #0
 8016194:	bfbb      	ittet	lt
 8016196:	425b      	neglt	r3, r3
 8016198:	f042 0202 	orrlt.w	r2, r2, #2
 801619c:	9307      	strge	r3, [sp, #28]
 801619e:	9307      	strlt	r3, [sp, #28]
 80161a0:	bfb8      	it	lt
 80161a2:	9204      	strlt	r2, [sp, #16]
 80161a4:	7823      	ldrb	r3, [r4, #0]
 80161a6:	2b2e      	cmp	r3, #46	@ 0x2e
 80161a8:	d10a      	bne.n	80161c0 <_svfiprintf_r+0x130>
 80161aa:	7863      	ldrb	r3, [r4, #1]
 80161ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80161ae:	d132      	bne.n	8016216 <_svfiprintf_r+0x186>
 80161b0:	9b03      	ldr	r3, [sp, #12]
 80161b2:	1d1a      	adds	r2, r3, #4
 80161b4:	681b      	ldr	r3, [r3, #0]
 80161b6:	9203      	str	r2, [sp, #12]
 80161b8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80161bc:	3402      	adds	r4, #2
 80161be:	9305      	str	r3, [sp, #20]
 80161c0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8016284 <_svfiprintf_r+0x1f4>
 80161c4:	7821      	ldrb	r1, [r4, #0]
 80161c6:	2203      	movs	r2, #3
 80161c8:	4650      	mov	r0, sl
 80161ca:	f7ea f881 	bl	80002d0 <memchr>
 80161ce:	b138      	cbz	r0, 80161e0 <_svfiprintf_r+0x150>
 80161d0:	9b04      	ldr	r3, [sp, #16]
 80161d2:	eba0 000a 	sub.w	r0, r0, sl
 80161d6:	2240      	movs	r2, #64	@ 0x40
 80161d8:	4082      	lsls	r2, r0
 80161da:	4313      	orrs	r3, r2
 80161dc:	3401      	adds	r4, #1
 80161de:	9304      	str	r3, [sp, #16]
 80161e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80161e4:	4824      	ldr	r0, [pc, #144]	@ (8016278 <_svfiprintf_r+0x1e8>)
 80161e6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80161ea:	2206      	movs	r2, #6
 80161ec:	f7ea f870 	bl	80002d0 <memchr>
 80161f0:	2800      	cmp	r0, #0
 80161f2:	d036      	beq.n	8016262 <_svfiprintf_r+0x1d2>
 80161f4:	4b21      	ldr	r3, [pc, #132]	@ (801627c <_svfiprintf_r+0x1ec>)
 80161f6:	bb1b      	cbnz	r3, 8016240 <_svfiprintf_r+0x1b0>
 80161f8:	9b03      	ldr	r3, [sp, #12]
 80161fa:	3307      	adds	r3, #7
 80161fc:	f023 0307 	bic.w	r3, r3, #7
 8016200:	3308      	adds	r3, #8
 8016202:	9303      	str	r3, [sp, #12]
 8016204:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016206:	4433      	add	r3, r6
 8016208:	9309      	str	r3, [sp, #36]	@ 0x24
 801620a:	e76a      	b.n	80160e2 <_svfiprintf_r+0x52>
 801620c:	fb0c 3202 	mla	r2, ip, r2, r3
 8016210:	460c      	mov	r4, r1
 8016212:	2001      	movs	r0, #1
 8016214:	e7a8      	b.n	8016168 <_svfiprintf_r+0xd8>
 8016216:	2300      	movs	r3, #0
 8016218:	3401      	adds	r4, #1
 801621a:	9305      	str	r3, [sp, #20]
 801621c:	4619      	mov	r1, r3
 801621e:	f04f 0c0a 	mov.w	ip, #10
 8016222:	4620      	mov	r0, r4
 8016224:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016228:	3a30      	subs	r2, #48	@ 0x30
 801622a:	2a09      	cmp	r2, #9
 801622c:	d903      	bls.n	8016236 <_svfiprintf_r+0x1a6>
 801622e:	2b00      	cmp	r3, #0
 8016230:	d0c6      	beq.n	80161c0 <_svfiprintf_r+0x130>
 8016232:	9105      	str	r1, [sp, #20]
 8016234:	e7c4      	b.n	80161c0 <_svfiprintf_r+0x130>
 8016236:	fb0c 2101 	mla	r1, ip, r1, r2
 801623a:	4604      	mov	r4, r0
 801623c:	2301      	movs	r3, #1
 801623e:	e7f0      	b.n	8016222 <_svfiprintf_r+0x192>
 8016240:	ab03      	add	r3, sp, #12
 8016242:	9300      	str	r3, [sp, #0]
 8016244:	462a      	mov	r2, r5
 8016246:	4b0e      	ldr	r3, [pc, #56]	@ (8016280 <_svfiprintf_r+0x1f0>)
 8016248:	a904      	add	r1, sp, #16
 801624a:	4638      	mov	r0, r7
 801624c:	f7fd fe24 	bl	8013e98 <_printf_float>
 8016250:	1c42      	adds	r2, r0, #1
 8016252:	4606      	mov	r6, r0
 8016254:	d1d6      	bne.n	8016204 <_svfiprintf_r+0x174>
 8016256:	89ab      	ldrh	r3, [r5, #12]
 8016258:	065b      	lsls	r3, r3, #25
 801625a:	f53f af2d 	bmi.w	80160b8 <_svfiprintf_r+0x28>
 801625e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016260:	e72c      	b.n	80160bc <_svfiprintf_r+0x2c>
 8016262:	ab03      	add	r3, sp, #12
 8016264:	9300      	str	r3, [sp, #0]
 8016266:	462a      	mov	r2, r5
 8016268:	4b05      	ldr	r3, [pc, #20]	@ (8016280 <_svfiprintf_r+0x1f0>)
 801626a:	a904      	add	r1, sp, #16
 801626c:	4638      	mov	r0, r7
 801626e:	f7fe f8ab 	bl	80143c8 <_printf_i>
 8016272:	e7ed      	b.n	8016250 <_svfiprintf_r+0x1c0>
 8016274:	080d4b28 	.word	0x080d4b28
 8016278:	080d4b32 	.word	0x080d4b32
 801627c:	08013e99 	.word	0x08013e99
 8016280:	08015fd9 	.word	0x08015fd9
 8016284:	080d4b2e 	.word	0x080d4b2e

08016288 <__sfputc_r>:
 8016288:	6893      	ldr	r3, [r2, #8]
 801628a:	3b01      	subs	r3, #1
 801628c:	2b00      	cmp	r3, #0
 801628e:	b410      	push	{r4}
 8016290:	6093      	str	r3, [r2, #8]
 8016292:	da08      	bge.n	80162a6 <__sfputc_r+0x1e>
 8016294:	6994      	ldr	r4, [r2, #24]
 8016296:	42a3      	cmp	r3, r4
 8016298:	db01      	blt.n	801629e <__sfputc_r+0x16>
 801629a:	290a      	cmp	r1, #10
 801629c:	d103      	bne.n	80162a6 <__sfputc_r+0x1e>
 801629e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80162a2:	f7fe bb46 	b.w	8014932 <__swbuf_r>
 80162a6:	6813      	ldr	r3, [r2, #0]
 80162a8:	1c58      	adds	r0, r3, #1
 80162aa:	6010      	str	r0, [r2, #0]
 80162ac:	7019      	strb	r1, [r3, #0]
 80162ae:	4608      	mov	r0, r1
 80162b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80162b4:	4770      	bx	lr

080162b6 <__sfputs_r>:
 80162b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80162b8:	4606      	mov	r6, r0
 80162ba:	460f      	mov	r7, r1
 80162bc:	4614      	mov	r4, r2
 80162be:	18d5      	adds	r5, r2, r3
 80162c0:	42ac      	cmp	r4, r5
 80162c2:	d101      	bne.n	80162c8 <__sfputs_r+0x12>
 80162c4:	2000      	movs	r0, #0
 80162c6:	e007      	b.n	80162d8 <__sfputs_r+0x22>
 80162c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80162cc:	463a      	mov	r2, r7
 80162ce:	4630      	mov	r0, r6
 80162d0:	f7ff ffda 	bl	8016288 <__sfputc_r>
 80162d4:	1c43      	adds	r3, r0, #1
 80162d6:	d1f3      	bne.n	80162c0 <__sfputs_r+0xa>
 80162d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080162dc <_vfiprintf_r>:
 80162dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162e0:	460d      	mov	r5, r1
 80162e2:	b09d      	sub	sp, #116	@ 0x74
 80162e4:	4614      	mov	r4, r2
 80162e6:	4698      	mov	r8, r3
 80162e8:	4606      	mov	r6, r0
 80162ea:	b118      	cbz	r0, 80162f4 <_vfiprintf_r+0x18>
 80162ec:	6a03      	ldr	r3, [r0, #32]
 80162ee:	b90b      	cbnz	r3, 80162f4 <_vfiprintf_r+0x18>
 80162f0:	f7fe fa16 	bl	8014720 <__sinit>
 80162f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80162f6:	07d9      	lsls	r1, r3, #31
 80162f8:	d405      	bmi.n	8016306 <_vfiprintf_r+0x2a>
 80162fa:	89ab      	ldrh	r3, [r5, #12]
 80162fc:	059a      	lsls	r2, r3, #22
 80162fe:	d402      	bmi.n	8016306 <_vfiprintf_r+0x2a>
 8016300:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016302:	f7fe fc38 	bl	8014b76 <__retarget_lock_acquire_recursive>
 8016306:	89ab      	ldrh	r3, [r5, #12]
 8016308:	071b      	lsls	r3, r3, #28
 801630a:	d501      	bpl.n	8016310 <_vfiprintf_r+0x34>
 801630c:	692b      	ldr	r3, [r5, #16]
 801630e:	b99b      	cbnz	r3, 8016338 <_vfiprintf_r+0x5c>
 8016310:	4629      	mov	r1, r5
 8016312:	4630      	mov	r0, r6
 8016314:	f7fe fb4c 	bl	80149b0 <__swsetup_r>
 8016318:	b170      	cbz	r0, 8016338 <_vfiprintf_r+0x5c>
 801631a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801631c:	07dc      	lsls	r4, r3, #31
 801631e:	d504      	bpl.n	801632a <_vfiprintf_r+0x4e>
 8016320:	f04f 30ff 	mov.w	r0, #4294967295
 8016324:	b01d      	add	sp, #116	@ 0x74
 8016326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801632a:	89ab      	ldrh	r3, [r5, #12]
 801632c:	0598      	lsls	r0, r3, #22
 801632e:	d4f7      	bmi.n	8016320 <_vfiprintf_r+0x44>
 8016330:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016332:	f7fe fc21 	bl	8014b78 <__retarget_lock_release_recursive>
 8016336:	e7f3      	b.n	8016320 <_vfiprintf_r+0x44>
 8016338:	2300      	movs	r3, #0
 801633a:	9309      	str	r3, [sp, #36]	@ 0x24
 801633c:	2320      	movs	r3, #32
 801633e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8016342:	f8cd 800c 	str.w	r8, [sp, #12]
 8016346:	2330      	movs	r3, #48	@ 0x30
 8016348:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80164f8 <_vfiprintf_r+0x21c>
 801634c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8016350:	f04f 0901 	mov.w	r9, #1
 8016354:	4623      	mov	r3, r4
 8016356:	469a      	mov	sl, r3
 8016358:	f813 2b01 	ldrb.w	r2, [r3], #1
 801635c:	b10a      	cbz	r2, 8016362 <_vfiprintf_r+0x86>
 801635e:	2a25      	cmp	r2, #37	@ 0x25
 8016360:	d1f9      	bne.n	8016356 <_vfiprintf_r+0x7a>
 8016362:	ebba 0b04 	subs.w	fp, sl, r4
 8016366:	d00b      	beq.n	8016380 <_vfiprintf_r+0xa4>
 8016368:	465b      	mov	r3, fp
 801636a:	4622      	mov	r2, r4
 801636c:	4629      	mov	r1, r5
 801636e:	4630      	mov	r0, r6
 8016370:	f7ff ffa1 	bl	80162b6 <__sfputs_r>
 8016374:	3001      	adds	r0, #1
 8016376:	f000 80a7 	beq.w	80164c8 <_vfiprintf_r+0x1ec>
 801637a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801637c:	445a      	add	r2, fp
 801637e:	9209      	str	r2, [sp, #36]	@ 0x24
 8016380:	f89a 3000 	ldrb.w	r3, [sl]
 8016384:	2b00      	cmp	r3, #0
 8016386:	f000 809f 	beq.w	80164c8 <_vfiprintf_r+0x1ec>
 801638a:	2300      	movs	r3, #0
 801638c:	f04f 32ff 	mov.w	r2, #4294967295
 8016390:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016394:	f10a 0a01 	add.w	sl, sl, #1
 8016398:	9304      	str	r3, [sp, #16]
 801639a:	9307      	str	r3, [sp, #28]
 801639c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80163a0:	931a      	str	r3, [sp, #104]	@ 0x68
 80163a2:	4654      	mov	r4, sl
 80163a4:	2205      	movs	r2, #5
 80163a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80163aa:	4853      	ldr	r0, [pc, #332]	@ (80164f8 <_vfiprintf_r+0x21c>)
 80163ac:	f7e9 ff90 	bl	80002d0 <memchr>
 80163b0:	9a04      	ldr	r2, [sp, #16]
 80163b2:	b9d8      	cbnz	r0, 80163ec <_vfiprintf_r+0x110>
 80163b4:	06d1      	lsls	r1, r2, #27
 80163b6:	bf44      	itt	mi
 80163b8:	2320      	movmi	r3, #32
 80163ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80163be:	0713      	lsls	r3, r2, #28
 80163c0:	bf44      	itt	mi
 80163c2:	232b      	movmi	r3, #43	@ 0x2b
 80163c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80163c8:	f89a 3000 	ldrb.w	r3, [sl]
 80163cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80163ce:	d015      	beq.n	80163fc <_vfiprintf_r+0x120>
 80163d0:	9a07      	ldr	r2, [sp, #28]
 80163d2:	4654      	mov	r4, sl
 80163d4:	2000      	movs	r0, #0
 80163d6:	f04f 0c0a 	mov.w	ip, #10
 80163da:	4621      	mov	r1, r4
 80163dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80163e0:	3b30      	subs	r3, #48	@ 0x30
 80163e2:	2b09      	cmp	r3, #9
 80163e4:	d94b      	bls.n	801647e <_vfiprintf_r+0x1a2>
 80163e6:	b1b0      	cbz	r0, 8016416 <_vfiprintf_r+0x13a>
 80163e8:	9207      	str	r2, [sp, #28]
 80163ea:	e014      	b.n	8016416 <_vfiprintf_r+0x13a>
 80163ec:	eba0 0308 	sub.w	r3, r0, r8
 80163f0:	fa09 f303 	lsl.w	r3, r9, r3
 80163f4:	4313      	orrs	r3, r2
 80163f6:	9304      	str	r3, [sp, #16]
 80163f8:	46a2      	mov	sl, r4
 80163fa:	e7d2      	b.n	80163a2 <_vfiprintf_r+0xc6>
 80163fc:	9b03      	ldr	r3, [sp, #12]
 80163fe:	1d19      	adds	r1, r3, #4
 8016400:	681b      	ldr	r3, [r3, #0]
 8016402:	9103      	str	r1, [sp, #12]
 8016404:	2b00      	cmp	r3, #0
 8016406:	bfbb      	ittet	lt
 8016408:	425b      	neglt	r3, r3
 801640a:	f042 0202 	orrlt.w	r2, r2, #2
 801640e:	9307      	strge	r3, [sp, #28]
 8016410:	9307      	strlt	r3, [sp, #28]
 8016412:	bfb8      	it	lt
 8016414:	9204      	strlt	r2, [sp, #16]
 8016416:	7823      	ldrb	r3, [r4, #0]
 8016418:	2b2e      	cmp	r3, #46	@ 0x2e
 801641a:	d10a      	bne.n	8016432 <_vfiprintf_r+0x156>
 801641c:	7863      	ldrb	r3, [r4, #1]
 801641e:	2b2a      	cmp	r3, #42	@ 0x2a
 8016420:	d132      	bne.n	8016488 <_vfiprintf_r+0x1ac>
 8016422:	9b03      	ldr	r3, [sp, #12]
 8016424:	1d1a      	adds	r2, r3, #4
 8016426:	681b      	ldr	r3, [r3, #0]
 8016428:	9203      	str	r2, [sp, #12]
 801642a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801642e:	3402      	adds	r4, #2
 8016430:	9305      	str	r3, [sp, #20]
 8016432:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8016508 <_vfiprintf_r+0x22c>
 8016436:	7821      	ldrb	r1, [r4, #0]
 8016438:	2203      	movs	r2, #3
 801643a:	4650      	mov	r0, sl
 801643c:	f7e9 ff48 	bl	80002d0 <memchr>
 8016440:	b138      	cbz	r0, 8016452 <_vfiprintf_r+0x176>
 8016442:	9b04      	ldr	r3, [sp, #16]
 8016444:	eba0 000a 	sub.w	r0, r0, sl
 8016448:	2240      	movs	r2, #64	@ 0x40
 801644a:	4082      	lsls	r2, r0
 801644c:	4313      	orrs	r3, r2
 801644e:	3401      	adds	r4, #1
 8016450:	9304      	str	r3, [sp, #16]
 8016452:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016456:	4829      	ldr	r0, [pc, #164]	@ (80164fc <_vfiprintf_r+0x220>)
 8016458:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801645c:	2206      	movs	r2, #6
 801645e:	f7e9 ff37 	bl	80002d0 <memchr>
 8016462:	2800      	cmp	r0, #0
 8016464:	d03f      	beq.n	80164e6 <_vfiprintf_r+0x20a>
 8016466:	4b26      	ldr	r3, [pc, #152]	@ (8016500 <_vfiprintf_r+0x224>)
 8016468:	bb1b      	cbnz	r3, 80164b2 <_vfiprintf_r+0x1d6>
 801646a:	9b03      	ldr	r3, [sp, #12]
 801646c:	3307      	adds	r3, #7
 801646e:	f023 0307 	bic.w	r3, r3, #7
 8016472:	3308      	adds	r3, #8
 8016474:	9303      	str	r3, [sp, #12]
 8016476:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016478:	443b      	add	r3, r7
 801647a:	9309      	str	r3, [sp, #36]	@ 0x24
 801647c:	e76a      	b.n	8016354 <_vfiprintf_r+0x78>
 801647e:	fb0c 3202 	mla	r2, ip, r2, r3
 8016482:	460c      	mov	r4, r1
 8016484:	2001      	movs	r0, #1
 8016486:	e7a8      	b.n	80163da <_vfiprintf_r+0xfe>
 8016488:	2300      	movs	r3, #0
 801648a:	3401      	adds	r4, #1
 801648c:	9305      	str	r3, [sp, #20]
 801648e:	4619      	mov	r1, r3
 8016490:	f04f 0c0a 	mov.w	ip, #10
 8016494:	4620      	mov	r0, r4
 8016496:	f810 2b01 	ldrb.w	r2, [r0], #1
 801649a:	3a30      	subs	r2, #48	@ 0x30
 801649c:	2a09      	cmp	r2, #9
 801649e:	d903      	bls.n	80164a8 <_vfiprintf_r+0x1cc>
 80164a0:	2b00      	cmp	r3, #0
 80164a2:	d0c6      	beq.n	8016432 <_vfiprintf_r+0x156>
 80164a4:	9105      	str	r1, [sp, #20]
 80164a6:	e7c4      	b.n	8016432 <_vfiprintf_r+0x156>
 80164a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80164ac:	4604      	mov	r4, r0
 80164ae:	2301      	movs	r3, #1
 80164b0:	e7f0      	b.n	8016494 <_vfiprintf_r+0x1b8>
 80164b2:	ab03      	add	r3, sp, #12
 80164b4:	9300      	str	r3, [sp, #0]
 80164b6:	462a      	mov	r2, r5
 80164b8:	4b12      	ldr	r3, [pc, #72]	@ (8016504 <_vfiprintf_r+0x228>)
 80164ba:	a904      	add	r1, sp, #16
 80164bc:	4630      	mov	r0, r6
 80164be:	f7fd fceb 	bl	8013e98 <_printf_float>
 80164c2:	4607      	mov	r7, r0
 80164c4:	1c78      	adds	r0, r7, #1
 80164c6:	d1d6      	bne.n	8016476 <_vfiprintf_r+0x19a>
 80164c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80164ca:	07d9      	lsls	r1, r3, #31
 80164cc:	d405      	bmi.n	80164da <_vfiprintf_r+0x1fe>
 80164ce:	89ab      	ldrh	r3, [r5, #12]
 80164d0:	059a      	lsls	r2, r3, #22
 80164d2:	d402      	bmi.n	80164da <_vfiprintf_r+0x1fe>
 80164d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80164d6:	f7fe fb4f 	bl	8014b78 <__retarget_lock_release_recursive>
 80164da:	89ab      	ldrh	r3, [r5, #12]
 80164dc:	065b      	lsls	r3, r3, #25
 80164de:	f53f af1f 	bmi.w	8016320 <_vfiprintf_r+0x44>
 80164e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80164e4:	e71e      	b.n	8016324 <_vfiprintf_r+0x48>
 80164e6:	ab03      	add	r3, sp, #12
 80164e8:	9300      	str	r3, [sp, #0]
 80164ea:	462a      	mov	r2, r5
 80164ec:	4b05      	ldr	r3, [pc, #20]	@ (8016504 <_vfiprintf_r+0x228>)
 80164ee:	a904      	add	r1, sp, #16
 80164f0:	4630      	mov	r0, r6
 80164f2:	f7fd ff69 	bl	80143c8 <_printf_i>
 80164f6:	e7e4      	b.n	80164c2 <_vfiprintf_r+0x1e6>
 80164f8:	080d4b28 	.word	0x080d4b28
 80164fc:	080d4b32 	.word	0x080d4b32
 8016500:	08013e99 	.word	0x08013e99
 8016504:	080162b7 	.word	0x080162b7
 8016508:	080d4b2e 	.word	0x080d4b2e

0801650c <__sflush_r>:
 801650c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8016510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016514:	0716      	lsls	r6, r2, #28
 8016516:	4605      	mov	r5, r0
 8016518:	460c      	mov	r4, r1
 801651a:	d454      	bmi.n	80165c6 <__sflush_r+0xba>
 801651c:	684b      	ldr	r3, [r1, #4]
 801651e:	2b00      	cmp	r3, #0
 8016520:	dc02      	bgt.n	8016528 <__sflush_r+0x1c>
 8016522:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8016524:	2b00      	cmp	r3, #0
 8016526:	dd48      	ble.n	80165ba <__sflush_r+0xae>
 8016528:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801652a:	2e00      	cmp	r6, #0
 801652c:	d045      	beq.n	80165ba <__sflush_r+0xae>
 801652e:	2300      	movs	r3, #0
 8016530:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8016534:	682f      	ldr	r7, [r5, #0]
 8016536:	6a21      	ldr	r1, [r4, #32]
 8016538:	602b      	str	r3, [r5, #0]
 801653a:	d030      	beq.n	801659e <__sflush_r+0x92>
 801653c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801653e:	89a3      	ldrh	r3, [r4, #12]
 8016540:	0759      	lsls	r1, r3, #29
 8016542:	d505      	bpl.n	8016550 <__sflush_r+0x44>
 8016544:	6863      	ldr	r3, [r4, #4]
 8016546:	1ad2      	subs	r2, r2, r3
 8016548:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801654a:	b10b      	cbz	r3, 8016550 <__sflush_r+0x44>
 801654c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801654e:	1ad2      	subs	r2, r2, r3
 8016550:	2300      	movs	r3, #0
 8016552:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016554:	6a21      	ldr	r1, [r4, #32]
 8016556:	4628      	mov	r0, r5
 8016558:	47b0      	blx	r6
 801655a:	1c43      	adds	r3, r0, #1
 801655c:	89a3      	ldrh	r3, [r4, #12]
 801655e:	d106      	bne.n	801656e <__sflush_r+0x62>
 8016560:	6829      	ldr	r1, [r5, #0]
 8016562:	291d      	cmp	r1, #29
 8016564:	d82b      	bhi.n	80165be <__sflush_r+0xb2>
 8016566:	4a2a      	ldr	r2, [pc, #168]	@ (8016610 <__sflush_r+0x104>)
 8016568:	410a      	asrs	r2, r1
 801656a:	07d6      	lsls	r6, r2, #31
 801656c:	d427      	bmi.n	80165be <__sflush_r+0xb2>
 801656e:	2200      	movs	r2, #0
 8016570:	6062      	str	r2, [r4, #4]
 8016572:	04d9      	lsls	r1, r3, #19
 8016574:	6922      	ldr	r2, [r4, #16]
 8016576:	6022      	str	r2, [r4, #0]
 8016578:	d504      	bpl.n	8016584 <__sflush_r+0x78>
 801657a:	1c42      	adds	r2, r0, #1
 801657c:	d101      	bne.n	8016582 <__sflush_r+0x76>
 801657e:	682b      	ldr	r3, [r5, #0]
 8016580:	b903      	cbnz	r3, 8016584 <__sflush_r+0x78>
 8016582:	6560      	str	r0, [r4, #84]	@ 0x54
 8016584:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016586:	602f      	str	r7, [r5, #0]
 8016588:	b1b9      	cbz	r1, 80165ba <__sflush_r+0xae>
 801658a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801658e:	4299      	cmp	r1, r3
 8016590:	d002      	beq.n	8016598 <__sflush_r+0x8c>
 8016592:	4628      	mov	r0, r5
 8016594:	f7ff f94c 	bl	8015830 <_free_r>
 8016598:	2300      	movs	r3, #0
 801659a:	6363      	str	r3, [r4, #52]	@ 0x34
 801659c:	e00d      	b.n	80165ba <__sflush_r+0xae>
 801659e:	2301      	movs	r3, #1
 80165a0:	4628      	mov	r0, r5
 80165a2:	47b0      	blx	r6
 80165a4:	4602      	mov	r2, r0
 80165a6:	1c50      	adds	r0, r2, #1
 80165a8:	d1c9      	bne.n	801653e <__sflush_r+0x32>
 80165aa:	682b      	ldr	r3, [r5, #0]
 80165ac:	2b00      	cmp	r3, #0
 80165ae:	d0c6      	beq.n	801653e <__sflush_r+0x32>
 80165b0:	2b1d      	cmp	r3, #29
 80165b2:	d001      	beq.n	80165b8 <__sflush_r+0xac>
 80165b4:	2b16      	cmp	r3, #22
 80165b6:	d11e      	bne.n	80165f6 <__sflush_r+0xea>
 80165b8:	602f      	str	r7, [r5, #0]
 80165ba:	2000      	movs	r0, #0
 80165bc:	e022      	b.n	8016604 <__sflush_r+0xf8>
 80165be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80165c2:	b21b      	sxth	r3, r3
 80165c4:	e01b      	b.n	80165fe <__sflush_r+0xf2>
 80165c6:	690f      	ldr	r7, [r1, #16]
 80165c8:	2f00      	cmp	r7, #0
 80165ca:	d0f6      	beq.n	80165ba <__sflush_r+0xae>
 80165cc:	0793      	lsls	r3, r2, #30
 80165ce:	680e      	ldr	r6, [r1, #0]
 80165d0:	bf08      	it	eq
 80165d2:	694b      	ldreq	r3, [r1, #20]
 80165d4:	600f      	str	r7, [r1, #0]
 80165d6:	bf18      	it	ne
 80165d8:	2300      	movne	r3, #0
 80165da:	eba6 0807 	sub.w	r8, r6, r7
 80165de:	608b      	str	r3, [r1, #8]
 80165e0:	f1b8 0f00 	cmp.w	r8, #0
 80165e4:	dde9      	ble.n	80165ba <__sflush_r+0xae>
 80165e6:	6a21      	ldr	r1, [r4, #32]
 80165e8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80165ea:	4643      	mov	r3, r8
 80165ec:	463a      	mov	r2, r7
 80165ee:	4628      	mov	r0, r5
 80165f0:	47b0      	blx	r6
 80165f2:	2800      	cmp	r0, #0
 80165f4:	dc08      	bgt.n	8016608 <__sflush_r+0xfc>
 80165f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80165fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80165fe:	81a3      	strh	r3, [r4, #12]
 8016600:	f04f 30ff 	mov.w	r0, #4294967295
 8016604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016608:	4407      	add	r7, r0
 801660a:	eba8 0800 	sub.w	r8, r8, r0
 801660e:	e7e7      	b.n	80165e0 <__sflush_r+0xd4>
 8016610:	dfbffffe 	.word	0xdfbffffe

08016614 <_fflush_r>:
 8016614:	b538      	push	{r3, r4, r5, lr}
 8016616:	690b      	ldr	r3, [r1, #16]
 8016618:	4605      	mov	r5, r0
 801661a:	460c      	mov	r4, r1
 801661c:	b913      	cbnz	r3, 8016624 <_fflush_r+0x10>
 801661e:	2500      	movs	r5, #0
 8016620:	4628      	mov	r0, r5
 8016622:	bd38      	pop	{r3, r4, r5, pc}
 8016624:	b118      	cbz	r0, 801662e <_fflush_r+0x1a>
 8016626:	6a03      	ldr	r3, [r0, #32]
 8016628:	b90b      	cbnz	r3, 801662e <_fflush_r+0x1a>
 801662a:	f7fe f879 	bl	8014720 <__sinit>
 801662e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016632:	2b00      	cmp	r3, #0
 8016634:	d0f3      	beq.n	801661e <_fflush_r+0xa>
 8016636:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8016638:	07d0      	lsls	r0, r2, #31
 801663a:	d404      	bmi.n	8016646 <_fflush_r+0x32>
 801663c:	0599      	lsls	r1, r3, #22
 801663e:	d402      	bmi.n	8016646 <_fflush_r+0x32>
 8016640:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016642:	f7fe fa98 	bl	8014b76 <__retarget_lock_acquire_recursive>
 8016646:	4628      	mov	r0, r5
 8016648:	4621      	mov	r1, r4
 801664a:	f7ff ff5f 	bl	801650c <__sflush_r>
 801664e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016650:	07da      	lsls	r2, r3, #31
 8016652:	4605      	mov	r5, r0
 8016654:	d4e4      	bmi.n	8016620 <_fflush_r+0xc>
 8016656:	89a3      	ldrh	r3, [r4, #12]
 8016658:	059b      	lsls	r3, r3, #22
 801665a:	d4e1      	bmi.n	8016620 <_fflush_r+0xc>
 801665c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801665e:	f7fe fa8b 	bl	8014b78 <__retarget_lock_release_recursive>
 8016662:	e7dd      	b.n	8016620 <_fflush_r+0xc>

08016664 <__swhatbuf_r>:
 8016664:	b570      	push	{r4, r5, r6, lr}
 8016666:	460c      	mov	r4, r1
 8016668:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801666c:	2900      	cmp	r1, #0
 801666e:	b096      	sub	sp, #88	@ 0x58
 8016670:	4615      	mov	r5, r2
 8016672:	461e      	mov	r6, r3
 8016674:	da0d      	bge.n	8016692 <__swhatbuf_r+0x2e>
 8016676:	89a3      	ldrh	r3, [r4, #12]
 8016678:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801667c:	f04f 0100 	mov.w	r1, #0
 8016680:	bf14      	ite	ne
 8016682:	2340      	movne	r3, #64	@ 0x40
 8016684:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8016688:	2000      	movs	r0, #0
 801668a:	6031      	str	r1, [r6, #0]
 801668c:	602b      	str	r3, [r5, #0]
 801668e:	b016      	add	sp, #88	@ 0x58
 8016690:	bd70      	pop	{r4, r5, r6, pc}
 8016692:	466a      	mov	r2, sp
 8016694:	f000 f862 	bl	801675c <_fstat_r>
 8016698:	2800      	cmp	r0, #0
 801669a:	dbec      	blt.n	8016676 <__swhatbuf_r+0x12>
 801669c:	9901      	ldr	r1, [sp, #4]
 801669e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80166a2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80166a6:	4259      	negs	r1, r3
 80166a8:	4159      	adcs	r1, r3
 80166aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80166ae:	e7eb      	b.n	8016688 <__swhatbuf_r+0x24>

080166b0 <__smakebuf_r>:
 80166b0:	898b      	ldrh	r3, [r1, #12]
 80166b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80166b4:	079d      	lsls	r5, r3, #30
 80166b6:	4606      	mov	r6, r0
 80166b8:	460c      	mov	r4, r1
 80166ba:	d507      	bpl.n	80166cc <__smakebuf_r+0x1c>
 80166bc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80166c0:	6023      	str	r3, [r4, #0]
 80166c2:	6123      	str	r3, [r4, #16]
 80166c4:	2301      	movs	r3, #1
 80166c6:	6163      	str	r3, [r4, #20]
 80166c8:	b003      	add	sp, #12
 80166ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80166cc:	ab01      	add	r3, sp, #4
 80166ce:	466a      	mov	r2, sp
 80166d0:	f7ff ffc8 	bl	8016664 <__swhatbuf_r>
 80166d4:	9f00      	ldr	r7, [sp, #0]
 80166d6:	4605      	mov	r5, r0
 80166d8:	4639      	mov	r1, r7
 80166da:	4630      	mov	r0, r6
 80166dc:	f7fd fa82 	bl	8013be4 <_malloc_r>
 80166e0:	b948      	cbnz	r0, 80166f6 <__smakebuf_r+0x46>
 80166e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80166e6:	059a      	lsls	r2, r3, #22
 80166e8:	d4ee      	bmi.n	80166c8 <__smakebuf_r+0x18>
 80166ea:	f023 0303 	bic.w	r3, r3, #3
 80166ee:	f043 0302 	orr.w	r3, r3, #2
 80166f2:	81a3      	strh	r3, [r4, #12]
 80166f4:	e7e2      	b.n	80166bc <__smakebuf_r+0xc>
 80166f6:	89a3      	ldrh	r3, [r4, #12]
 80166f8:	6020      	str	r0, [r4, #0]
 80166fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80166fe:	81a3      	strh	r3, [r4, #12]
 8016700:	9b01      	ldr	r3, [sp, #4]
 8016702:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8016706:	b15b      	cbz	r3, 8016720 <__smakebuf_r+0x70>
 8016708:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801670c:	4630      	mov	r0, r6
 801670e:	f000 f837 	bl	8016780 <_isatty_r>
 8016712:	b128      	cbz	r0, 8016720 <__smakebuf_r+0x70>
 8016714:	89a3      	ldrh	r3, [r4, #12]
 8016716:	f023 0303 	bic.w	r3, r3, #3
 801671a:	f043 0301 	orr.w	r3, r3, #1
 801671e:	81a3      	strh	r3, [r4, #12]
 8016720:	89a3      	ldrh	r3, [r4, #12]
 8016722:	431d      	orrs	r5, r3
 8016724:	81a5      	strh	r5, [r4, #12]
 8016726:	e7cf      	b.n	80166c8 <__smakebuf_r+0x18>

08016728 <memmove>:
 8016728:	4288      	cmp	r0, r1
 801672a:	b510      	push	{r4, lr}
 801672c:	eb01 0402 	add.w	r4, r1, r2
 8016730:	d902      	bls.n	8016738 <memmove+0x10>
 8016732:	4284      	cmp	r4, r0
 8016734:	4623      	mov	r3, r4
 8016736:	d807      	bhi.n	8016748 <memmove+0x20>
 8016738:	1e43      	subs	r3, r0, #1
 801673a:	42a1      	cmp	r1, r4
 801673c:	d008      	beq.n	8016750 <memmove+0x28>
 801673e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016742:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016746:	e7f8      	b.n	801673a <memmove+0x12>
 8016748:	4402      	add	r2, r0
 801674a:	4601      	mov	r1, r0
 801674c:	428a      	cmp	r2, r1
 801674e:	d100      	bne.n	8016752 <memmove+0x2a>
 8016750:	bd10      	pop	{r4, pc}
 8016752:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016756:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801675a:	e7f7      	b.n	801674c <memmove+0x24>

0801675c <_fstat_r>:
 801675c:	b538      	push	{r3, r4, r5, lr}
 801675e:	4d07      	ldr	r5, [pc, #28]	@ (801677c <_fstat_r+0x20>)
 8016760:	2300      	movs	r3, #0
 8016762:	4604      	mov	r4, r0
 8016764:	4608      	mov	r0, r1
 8016766:	4611      	mov	r1, r2
 8016768:	602b      	str	r3, [r5, #0]
 801676a:	f7ec f827 	bl	80027bc <_fstat>
 801676e:	1c43      	adds	r3, r0, #1
 8016770:	d102      	bne.n	8016778 <_fstat_r+0x1c>
 8016772:	682b      	ldr	r3, [r5, #0]
 8016774:	b103      	cbz	r3, 8016778 <_fstat_r+0x1c>
 8016776:	6023      	str	r3, [r4, #0]
 8016778:	bd38      	pop	{r3, r4, r5, pc}
 801677a:	bf00      	nop
 801677c:	2002e89c 	.word	0x2002e89c

08016780 <_isatty_r>:
 8016780:	b538      	push	{r3, r4, r5, lr}
 8016782:	4d06      	ldr	r5, [pc, #24]	@ (801679c <_isatty_r+0x1c>)
 8016784:	2300      	movs	r3, #0
 8016786:	4604      	mov	r4, r0
 8016788:	4608      	mov	r0, r1
 801678a:	602b      	str	r3, [r5, #0]
 801678c:	f7ec f826 	bl	80027dc <_isatty>
 8016790:	1c43      	adds	r3, r0, #1
 8016792:	d102      	bne.n	801679a <_isatty_r+0x1a>
 8016794:	682b      	ldr	r3, [r5, #0]
 8016796:	b103      	cbz	r3, 801679a <_isatty_r+0x1a>
 8016798:	6023      	str	r3, [r4, #0]
 801679a:	bd38      	pop	{r3, r4, r5, pc}
 801679c:	2002e89c 	.word	0x2002e89c

080167a0 <__assert_func>:
 80167a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80167a2:	4614      	mov	r4, r2
 80167a4:	461a      	mov	r2, r3
 80167a6:	4b09      	ldr	r3, [pc, #36]	@ (80167cc <__assert_func+0x2c>)
 80167a8:	681b      	ldr	r3, [r3, #0]
 80167aa:	4605      	mov	r5, r0
 80167ac:	68d8      	ldr	r0, [r3, #12]
 80167ae:	b954      	cbnz	r4, 80167c6 <__assert_func+0x26>
 80167b0:	4b07      	ldr	r3, [pc, #28]	@ (80167d0 <__assert_func+0x30>)
 80167b2:	461c      	mov	r4, r3
 80167b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80167b8:	9100      	str	r1, [sp, #0]
 80167ba:	462b      	mov	r3, r5
 80167bc:	4905      	ldr	r1, [pc, #20]	@ (80167d4 <__assert_func+0x34>)
 80167be:	f000 f841 	bl	8016844 <fiprintf>
 80167c2:	f000 f851 	bl	8016868 <abort>
 80167c6:	4b04      	ldr	r3, [pc, #16]	@ (80167d8 <__assert_func+0x38>)
 80167c8:	e7f4      	b.n	80167b4 <__assert_func+0x14>
 80167ca:	bf00      	nop
 80167cc:	20000828 	.word	0x20000828
 80167d0:	080d4b7e 	.word	0x080d4b7e
 80167d4:	080d4b50 	.word	0x080d4b50
 80167d8:	080d4b43 	.word	0x080d4b43

080167dc <_calloc_r>:
 80167dc:	b570      	push	{r4, r5, r6, lr}
 80167de:	fba1 5402 	umull	r5, r4, r1, r2
 80167e2:	b93c      	cbnz	r4, 80167f4 <_calloc_r+0x18>
 80167e4:	4629      	mov	r1, r5
 80167e6:	f7fd f9fd 	bl	8013be4 <_malloc_r>
 80167ea:	4606      	mov	r6, r0
 80167ec:	b928      	cbnz	r0, 80167fa <_calloc_r+0x1e>
 80167ee:	2600      	movs	r6, #0
 80167f0:	4630      	mov	r0, r6
 80167f2:	bd70      	pop	{r4, r5, r6, pc}
 80167f4:	220c      	movs	r2, #12
 80167f6:	6002      	str	r2, [r0, #0]
 80167f8:	e7f9      	b.n	80167ee <_calloc_r+0x12>
 80167fa:	462a      	mov	r2, r5
 80167fc:	4621      	mov	r1, r4
 80167fe:	f7fe f92d 	bl	8014a5c <memset>
 8016802:	e7f5      	b.n	80167f0 <_calloc_r+0x14>

08016804 <__ascii_mbtowc>:
 8016804:	b082      	sub	sp, #8
 8016806:	b901      	cbnz	r1, 801680a <__ascii_mbtowc+0x6>
 8016808:	a901      	add	r1, sp, #4
 801680a:	b142      	cbz	r2, 801681e <__ascii_mbtowc+0x1a>
 801680c:	b14b      	cbz	r3, 8016822 <__ascii_mbtowc+0x1e>
 801680e:	7813      	ldrb	r3, [r2, #0]
 8016810:	600b      	str	r3, [r1, #0]
 8016812:	7812      	ldrb	r2, [r2, #0]
 8016814:	1e10      	subs	r0, r2, #0
 8016816:	bf18      	it	ne
 8016818:	2001      	movne	r0, #1
 801681a:	b002      	add	sp, #8
 801681c:	4770      	bx	lr
 801681e:	4610      	mov	r0, r2
 8016820:	e7fb      	b.n	801681a <__ascii_mbtowc+0x16>
 8016822:	f06f 0001 	mvn.w	r0, #1
 8016826:	e7f8      	b.n	801681a <__ascii_mbtowc+0x16>

08016828 <__ascii_wctomb>:
 8016828:	4603      	mov	r3, r0
 801682a:	4608      	mov	r0, r1
 801682c:	b141      	cbz	r1, 8016840 <__ascii_wctomb+0x18>
 801682e:	2aff      	cmp	r2, #255	@ 0xff
 8016830:	d904      	bls.n	801683c <__ascii_wctomb+0x14>
 8016832:	228a      	movs	r2, #138	@ 0x8a
 8016834:	601a      	str	r2, [r3, #0]
 8016836:	f04f 30ff 	mov.w	r0, #4294967295
 801683a:	4770      	bx	lr
 801683c:	700a      	strb	r2, [r1, #0]
 801683e:	2001      	movs	r0, #1
 8016840:	4770      	bx	lr
	...

08016844 <fiprintf>:
 8016844:	b40e      	push	{r1, r2, r3}
 8016846:	b503      	push	{r0, r1, lr}
 8016848:	4601      	mov	r1, r0
 801684a:	ab03      	add	r3, sp, #12
 801684c:	4805      	ldr	r0, [pc, #20]	@ (8016864 <fiprintf+0x20>)
 801684e:	f853 2b04 	ldr.w	r2, [r3], #4
 8016852:	6800      	ldr	r0, [r0, #0]
 8016854:	9301      	str	r3, [sp, #4]
 8016856:	f7ff fd41 	bl	80162dc <_vfiprintf_r>
 801685a:	b002      	add	sp, #8
 801685c:	f85d eb04 	ldr.w	lr, [sp], #4
 8016860:	b003      	add	sp, #12
 8016862:	4770      	bx	lr
 8016864:	20000828 	.word	0x20000828

08016868 <abort>:
 8016868:	b508      	push	{r3, lr}
 801686a:	2006      	movs	r0, #6
 801686c:	f000 f82c 	bl	80168c8 <raise>
 8016870:	2001      	movs	r0, #1
 8016872:	f7eb ff53 	bl	800271c <_exit>

08016876 <_raise_r>:
 8016876:	291f      	cmp	r1, #31
 8016878:	b538      	push	{r3, r4, r5, lr}
 801687a:	4605      	mov	r5, r0
 801687c:	460c      	mov	r4, r1
 801687e:	d904      	bls.n	801688a <_raise_r+0x14>
 8016880:	2316      	movs	r3, #22
 8016882:	6003      	str	r3, [r0, #0]
 8016884:	f04f 30ff 	mov.w	r0, #4294967295
 8016888:	bd38      	pop	{r3, r4, r5, pc}
 801688a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801688c:	b112      	cbz	r2, 8016894 <_raise_r+0x1e>
 801688e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016892:	b94b      	cbnz	r3, 80168a8 <_raise_r+0x32>
 8016894:	4628      	mov	r0, r5
 8016896:	f000 f831 	bl	80168fc <_getpid_r>
 801689a:	4622      	mov	r2, r4
 801689c:	4601      	mov	r1, r0
 801689e:	4628      	mov	r0, r5
 80168a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80168a4:	f000 b818 	b.w	80168d8 <_kill_r>
 80168a8:	2b01      	cmp	r3, #1
 80168aa:	d00a      	beq.n	80168c2 <_raise_r+0x4c>
 80168ac:	1c59      	adds	r1, r3, #1
 80168ae:	d103      	bne.n	80168b8 <_raise_r+0x42>
 80168b0:	2316      	movs	r3, #22
 80168b2:	6003      	str	r3, [r0, #0]
 80168b4:	2001      	movs	r0, #1
 80168b6:	e7e7      	b.n	8016888 <_raise_r+0x12>
 80168b8:	2100      	movs	r1, #0
 80168ba:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80168be:	4620      	mov	r0, r4
 80168c0:	4798      	blx	r3
 80168c2:	2000      	movs	r0, #0
 80168c4:	e7e0      	b.n	8016888 <_raise_r+0x12>
	...

080168c8 <raise>:
 80168c8:	4b02      	ldr	r3, [pc, #8]	@ (80168d4 <raise+0xc>)
 80168ca:	4601      	mov	r1, r0
 80168cc:	6818      	ldr	r0, [r3, #0]
 80168ce:	f7ff bfd2 	b.w	8016876 <_raise_r>
 80168d2:	bf00      	nop
 80168d4:	20000828 	.word	0x20000828

080168d8 <_kill_r>:
 80168d8:	b538      	push	{r3, r4, r5, lr}
 80168da:	4d07      	ldr	r5, [pc, #28]	@ (80168f8 <_kill_r+0x20>)
 80168dc:	2300      	movs	r3, #0
 80168de:	4604      	mov	r4, r0
 80168e0:	4608      	mov	r0, r1
 80168e2:	4611      	mov	r1, r2
 80168e4:	602b      	str	r3, [r5, #0]
 80168e6:	f7eb ff09 	bl	80026fc <_kill>
 80168ea:	1c43      	adds	r3, r0, #1
 80168ec:	d102      	bne.n	80168f4 <_kill_r+0x1c>
 80168ee:	682b      	ldr	r3, [r5, #0]
 80168f0:	b103      	cbz	r3, 80168f4 <_kill_r+0x1c>
 80168f2:	6023      	str	r3, [r4, #0]
 80168f4:	bd38      	pop	{r3, r4, r5, pc}
 80168f6:	bf00      	nop
 80168f8:	2002e89c 	.word	0x2002e89c

080168fc <_getpid_r>:
 80168fc:	f7eb bef6 	b.w	80026ec <_getpid>

08016900 <sqrtf>:
 8016900:	b508      	push	{r3, lr}
 8016902:	ed2d 8b02 	vpush	{d8}
 8016906:	eeb0 8a40 	vmov.f32	s16, s0
 801690a:	f000 f862 	bl	80169d2 <__ieee754_sqrtf>
 801690e:	eeb4 8a48 	vcmp.f32	s16, s16
 8016912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016916:	d60c      	bvs.n	8016932 <sqrtf+0x32>
 8016918:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8016938 <sqrtf+0x38>
 801691c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8016920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016924:	d505      	bpl.n	8016932 <sqrtf+0x32>
 8016926:	f7fe f8fb 	bl	8014b20 <__errno>
 801692a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801692e:	2321      	movs	r3, #33	@ 0x21
 8016930:	6003      	str	r3, [r0, #0]
 8016932:	ecbd 8b02 	vpop	{d8}
 8016936:	bd08      	pop	{r3, pc}
 8016938:	00000000 	.word	0x00000000

0801693c <cosf>:
 801693c:	ee10 3a10 	vmov	r3, s0
 8016940:	b507      	push	{r0, r1, r2, lr}
 8016942:	4a1e      	ldr	r2, [pc, #120]	@ (80169bc <cosf+0x80>)
 8016944:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8016948:	4293      	cmp	r3, r2
 801694a:	d806      	bhi.n	801695a <cosf+0x1e>
 801694c:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 80169c0 <cosf+0x84>
 8016950:	b003      	add	sp, #12
 8016952:	f85d eb04 	ldr.w	lr, [sp], #4
 8016956:	f000 b83f 	b.w	80169d8 <__kernel_cosf>
 801695a:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801695e:	d304      	bcc.n	801696a <cosf+0x2e>
 8016960:	ee30 0a40 	vsub.f32	s0, s0, s0
 8016964:	b003      	add	sp, #12
 8016966:	f85d fb04 	ldr.w	pc, [sp], #4
 801696a:	4668      	mov	r0, sp
 801696c:	f000 f8d4 	bl	8016b18 <__ieee754_rem_pio2f>
 8016970:	f000 0003 	and.w	r0, r0, #3
 8016974:	2801      	cmp	r0, #1
 8016976:	d009      	beq.n	801698c <cosf+0x50>
 8016978:	2802      	cmp	r0, #2
 801697a:	d010      	beq.n	801699e <cosf+0x62>
 801697c:	b9b0      	cbnz	r0, 80169ac <cosf+0x70>
 801697e:	eddd 0a01 	vldr	s1, [sp, #4]
 8016982:	ed9d 0a00 	vldr	s0, [sp]
 8016986:	f000 f827 	bl	80169d8 <__kernel_cosf>
 801698a:	e7eb      	b.n	8016964 <cosf+0x28>
 801698c:	eddd 0a01 	vldr	s1, [sp, #4]
 8016990:	ed9d 0a00 	vldr	s0, [sp]
 8016994:	f000 f878 	bl	8016a88 <__kernel_sinf>
 8016998:	eeb1 0a40 	vneg.f32	s0, s0
 801699c:	e7e2      	b.n	8016964 <cosf+0x28>
 801699e:	eddd 0a01 	vldr	s1, [sp, #4]
 80169a2:	ed9d 0a00 	vldr	s0, [sp]
 80169a6:	f000 f817 	bl	80169d8 <__kernel_cosf>
 80169aa:	e7f5      	b.n	8016998 <cosf+0x5c>
 80169ac:	eddd 0a01 	vldr	s1, [sp, #4]
 80169b0:	ed9d 0a00 	vldr	s0, [sp]
 80169b4:	2001      	movs	r0, #1
 80169b6:	f000 f867 	bl	8016a88 <__kernel_sinf>
 80169ba:	e7d3      	b.n	8016964 <cosf+0x28>
 80169bc:	3f490fd8 	.word	0x3f490fd8
 80169c0:	00000000 	.word	0x00000000

080169c4 <fabsf>:
 80169c4:	ee10 3a10 	vmov	r3, s0
 80169c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80169cc:	ee00 3a10 	vmov	s0, r3
 80169d0:	4770      	bx	lr

080169d2 <__ieee754_sqrtf>:
 80169d2:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80169d6:	4770      	bx	lr

080169d8 <__kernel_cosf>:
 80169d8:	ee10 3a10 	vmov	r3, s0
 80169dc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80169e0:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80169e4:	eef0 6a40 	vmov.f32	s13, s0
 80169e8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80169ec:	d204      	bcs.n	80169f8 <__kernel_cosf+0x20>
 80169ee:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 80169f2:	ee17 2a90 	vmov	r2, s15
 80169f6:	b342      	cbz	r2, 8016a4a <__kernel_cosf+0x72>
 80169f8:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80169fc:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8016a68 <__kernel_cosf+0x90>
 8016a00:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8016a6c <__kernel_cosf+0x94>
 8016a04:	4a1a      	ldr	r2, [pc, #104]	@ (8016a70 <__kernel_cosf+0x98>)
 8016a06:	eea7 6a27 	vfma.f32	s12, s14, s15
 8016a0a:	4293      	cmp	r3, r2
 8016a0c:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8016a74 <__kernel_cosf+0x9c>
 8016a10:	eee6 7a07 	vfma.f32	s15, s12, s14
 8016a14:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8016a78 <__kernel_cosf+0xa0>
 8016a18:	eea7 6a87 	vfma.f32	s12, s15, s14
 8016a1c:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8016a7c <__kernel_cosf+0xa4>
 8016a20:	eee6 7a07 	vfma.f32	s15, s12, s14
 8016a24:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8016a80 <__kernel_cosf+0xa8>
 8016a28:	eea7 6a87 	vfma.f32	s12, s15, s14
 8016a2c:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8016a30:	ee26 6a07 	vmul.f32	s12, s12, s14
 8016a34:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8016a38:	eee7 0a06 	vfma.f32	s1, s14, s12
 8016a3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016a40:	d804      	bhi.n	8016a4c <__kernel_cosf+0x74>
 8016a42:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8016a46:	ee30 0a67 	vsub.f32	s0, s0, s15
 8016a4a:	4770      	bx	lr
 8016a4c:	4a0d      	ldr	r2, [pc, #52]	@ (8016a84 <__kernel_cosf+0xac>)
 8016a4e:	4293      	cmp	r3, r2
 8016a50:	bf9a      	itte	ls
 8016a52:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8016a56:	ee07 3a10 	vmovls	s14, r3
 8016a5a:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8016a5e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8016a62:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016a66:	e7ec      	b.n	8016a42 <__kernel_cosf+0x6a>
 8016a68:	ad47d74e 	.word	0xad47d74e
 8016a6c:	310f74f6 	.word	0x310f74f6
 8016a70:	3e999999 	.word	0x3e999999
 8016a74:	b493f27c 	.word	0xb493f27c
 8016a78:	37d00d01 	.word	0x37d00d01
 8016a7c:	bab60b61 	.word	0xbab60b61
 8016a80:	3d2aaaab 	.word	0x3d2aaaab
 8016a84:	3f480000 	.word	0x3f480000

08016a88 <__kernel_sinf>:
 8016a88:	ee10 3a10 	vmov	r3, s0
 8016a8c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8016a90:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8016a94:	d204      	bcs.n	8016aa0 <__kernel_sinf+0x18>
 8016a96:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8016a9a:	ee17 3a90 	vmov	r3, s15
 8016a9e:	b35b      	cbz	r3, 8016af8 <__kernel_sinf+0x70>
 8016aa0:	ee20 7a00 	vmul.f32	s14, s0, s0
 8016aa4:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8016afc <__kernel_sinf+0x74>
 8016aa8:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8016b00 <__kernel_sinf+0x78>
 8016aac:	eea7 6a27 	vfma.f32	s12, s14, s15
 8016ab0:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8016b04 <__kernel_sinf+0x7c>
 8016ab4:	eee6 7a07 	vfma.f32	s15, s12, s14
 8016ab8:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8016b08 <__kernel_sinf+0x80>
 8016abc:	eea7 6a87 	vfma.f32	s12, s15, s14
 8016ac0:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8016b0c <__kernel_sinf+0x84>
 8016ac4:	ee60 6a07 	vmul.f32	s13, s0, s14
 8016ac8:	eee6 7a07 	vfma.f32	s15, s12, s14
 8016acc:	b930      	cbnz	r0, 8016adc <__kernel_sinf+0x54>
 8016ace:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8016b10 <__kernel_sinf+0x88>
 8016ad2:	eea7 6a27 	vfma.f32	s12, s14, s15
 8016ad6:	eea6 0a26 	vfma.f32	s0, s12, s13
 8016ada:	4770      	bx	lr
 8016adc:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8016ae0:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8016ae4:	eee0 7a86 	vfma.f32	s15, s1, s12
 8016ae8:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8016aec:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8016b14 <__kernel_sinf+0x8c>
 8016af0:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8016af4:	ee30 0a60 	vsub.f32	s0, s0, s1
 8016af8:	4770      	bx	lr
 8016afa:	bf00      	nop
 8016afc:	2f2ec9d3 	.word	0x2f2ec9d3
 8016b00:	b2d72f34 	.word	0xb2d72f34
 8016b04:	3638ef1b 	.word	0x3638ef1b
 8016b08:	b9500d01 	.word	0xb9500d01
 8016b0c:	3c088889 	.word	0x3c088889
 8016b10:	be2aaaab 	.word	0xbe2aaaab
 8016b14:	3e2aaaab 	.word	0x3e2aaaab

08016b18 <__ieee754_rem_pio2f>:
 8016b18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016b1a:	ee10 6a10 	vmov	r6, s0
 8016b1e:	4b88      	ldr	r3, [pc, #544]	@ (8016d40 <__ieee754_rem_pio2f+0x228>)
 8016b20:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8016b24:	429d      	cmp	r5, r3
 8016b26:	b087      	sub	sp, #28
 8016b28:	4604      	mov	r4, r0
 8016b2a:	d805      	bhi.n	8016b38 <__ieee754_rem_pio2f+0x20>
 8016b2c:	2300      	movs	r3, #0
 8016b2e:	ed80 0a00 	vstr	s0, [r0]
 8016b32:	6043      	str	r3, [r0, #4]
 8016b34:	2000      	movs	r0, #0
 8016b36:	e022      	b.n	8016b7e <__ieee754_rem_pio2f+0x66>
 8016b38:	4b82      	ldr	r3, [pc, #520]	@ (8016d44 <__ieee754_rem_pio2f+0x22c>)
 8016b3a:	429d      	cmp	r5, r3
 8016b3c:	d83a      	bhi.n	8016bb4 <__ieee754_rem_pio2f+0x9c>
 8016b3e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8016b42:	2e00      	cmp	r6, #0
 8016b44:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8016d48 <__ieee754_rem_pio2f+0x230>
 8016b48:	4a80      	ldr	r2, [pc, #512]	@ (8016d4c <__ieee754_rem_pio2f+0x234>)
 8016b4a:	f023 030f 	bic.w	r3, r3, #15
 8016b4e:	dd18      	ble.n	8016b82 <__ieee754_rem_pio2f+0x6a>
 8016b50:	4293      	cmp	r3, r2
 8016b52:	ee70 7a47 	vsub.f32	s15, s0, s14
 8016b56:	bf09      	itett	eq
 8016b58:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8016d50 <__ieee754_rem_pio2f+0x238>
 8016b5c:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8016d54 <__ieee754_rem_pio2f+0x23c>
 8016b60:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8016d58 <__ieee754_rem_pio2f+0x240>
 8016b64:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8016b68:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8016b6c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016b70:	ed80 7a00 	vstr	s14, [r0]
 8016b74:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8016b78:	edc0 7a01 	vstr	s15, [r0, #4]
 8016b7c:	2001      	movs	r0, #1
 8016b7e:	b007      	add	sp, #28
 8016b80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016b82:	4293      	cmp	r3, r2
 8016b84:	ee70 7a07 	vadd.f32	s15, s0, s14
 8016b88:	bf09      	itett	eq
 8016b8a:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8016d50 <__ieee754_rem_pio2f+0x238>
 8016b8e:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8016d54 <__ieee754_rem_pio2f+0x23c>
 8016b92:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8016d58 <__ieee754_rem_pio2f+0x240>
 8016b96:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8016b9a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8016b9e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016ba2:	ed80 7a00 	vstr	s14, [r0]
 8016ba6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016baa:	edc0 7a01 	vstr	s15, [r0, #4]
 8016bae:	f04f 30ff 	mov.w	r0, #4294967295
 8016bb2:	e7e4      	b.n	8016b7e <__ieee754_rem_pio2f+0x66>
 8016bb4:	4b69      	ldr	r3, [pc, #420]	@ (8016d5c <__ieee754_rem_pio2f+0x244>)
 8016bb6:	429d      	cmp	r5, r3
 8016bb8:	d873      	bhi.n	8016ca2 <__ieee754_rem_pio2f+0x18a>
 8016bba:	f7ff ff03 	bl	80169c4 <fabsf>
 8016bbe:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8016d60 <__ieee754_rem_pio2f+0x248>
 8016bc2:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8016bc6:	eee0 7a07 	vfma.f32	s15, s0, s14
 8016bca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016bce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8016bd2:	ee17 0a90 	vmov	r0, s15
 8016bd6:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8016d48 <__ieee754_rem_pio2f+0x230>
 8016bda:	eea7 0a67 	vfms.f32	s0, s14, s15
 8016bde:	281f      	cmp	r0, #31
 8016be0:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8016d54 <__ieee754_rem_pio2f+0x23c>
 8016be4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016be8:	eeb1 6a47 	vneg.f32	s12, s14
 8016bec:	ee70 6a67 	vsub.f32	s13, s0, s15
 8016bf0:	ee16 1a90 	vmov	r1, s13
 8016bf4:	dc09      	bgt.n	8016c0a <__ieee754_rem_pio2f+0xf2>
 8016bf6:	4a5b      	ldr	r2, [pc, #364]	@ (8016d64 <__ieee754_rem_pio2f+0x24c>)
 8016bf8:	1e47      	subs	r7, r0, #1
 8016bfa:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8016bfe:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8016c02:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8016c06:	4293      	cmp	r3, r2
 8016c08:	d107      	bne.n	8016c1a <__ieee754_rem_pio2f+0x102>
 8016c0a:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8016c0e:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8016c12:	2a08      	cmp	r2, #8
 8016c14:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8016c18:	dc14      	bgt.n	8016c44 <__ieee754_rem_pio2f+0x12c>
 8016c1a:	6021      	str	r1, [r4, #0]
 8016c1c:	ed94 7a00 	vldr	s14, [r4]
 8016c20:	ee30 0a47 	vsub.f32	s0, s0, s14
 8016c24:	2e00      	cmp	r6, #0
 8016c26:	ee30 0a67 	vsub.f32	s0, s0, s15
 8016c2a:	ed84 0a01 	vstr	s0, [r4, #4]
 8016c2e:	daa6      	bge.n	8016b7e <__ieee754_rem_pio2f+0x66>
 8016c30:	eeb1 7a47 	vneg.f32	s14, s14
 8016c34:	eeb1 0a40 	vneg.f32	s0, s0
 8016c38:	ed84 7a00 	vstr	s14, [r4]
 8016c3c:	ed84 0a01 	vstr	s0, [r4, #4]
 8016c40:	4240      	negs	r0, r0
 8016c42:	e79c      	b.n	8016b7e <__ieee754_rem_pio2f+0x66>
 8016c44:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8016d50 <__ieee754_rem_pio2f+0x238>
 8016c48:	eef0 6a40 	vmov.f32	s13, s0
 8016c4c:	eee6 6a25 	vfma.f32	s13, s12, s11
 8016c50:	ee70 7a66 	vsub.f32	s15, s0, s13
 8016c54:	eee6 7a25 	vfma.f32	s15, s12, s11
 8016c58:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8016d58 <__ieee754_rem_pio2f+0x240>
 8016c5c:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8016c60:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8016c64:	ee15 2a90 	vmov	r2, s11
 8016c68:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8016c6c:	1a5b      	subs	r3, r3, r1
 8016c6e:	2b19      	cmp	r3, #25
 8016c70:	dc04      	bgt.n	8016c7c <__ieee754_rem_pio2f+0x164>
 8016c72:	edc4 5a00 	vstr	s11, [r4]
 8016c76:	eeb0 0a66 	vmov.f32	s0, s13
 8016c7a:	e7cf      	b.n	8016c1c <__ieee754_rem_pio2f+0x104>
 8016c7c:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8016d68 <__ieee754_rem_pio2f+0x250>
 8016c80:	eeb0 0a66 	vmov.f32	s0, s13
 8016c84:	eea6 0a25 	vfma.f32	s0, s12, s11
 8016c88:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8016c8c:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8016d6c <__ieee754_rem_pio2f+0x254>
 8016c90:	eee6 7a25 	vfma.f32	s15, s12, s11
 8016c94:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8016c98:	ee30 7a67 	vsub.f32	s14, s0, s15
 8016c9c:	ed84 7a00 	vstr	s14, [r4]
 8016ca0:	e7bc      	b.n	8016c1c <__ieee754_rem_pio2f+0x104>
 8016ca2:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8016ca6:	d306      	bcc.n	8016cb6 <__ieee754_rem_pio2f+0x19e>
 8016ca8:	ee70 7a40 	vsub.f32	s15, s0, s0
 8016cac:	edc0 7a01 	vstr	s15, [r0, #4]
 8016cb0:	edc0 7a00 	vstr	s15, [r0]
 8016cb4:	e73e      	b.n	8016b34 <__ieee754_rem_pio2f+0x1c>
 8016cb6:	15ea      	asrs	r2, r5, #23
 8016cb8:	3a86      	subs	r2, #134	@ 0x86
 8016cba:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8016cbe:	ee07 3a90 	vmov	s15, r3
 8016cc2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8016cc6:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8016d70 <__ieee754_rem_pio2f+0x258>
 8016cca:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016cce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016cd2:	ed8d 7a03 	vstr	s14, [sp, #12]
 8016cd6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8016cda:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8016cde:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016ce2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016ce6:	ed8d 7a04 	vstr	s14, [sp, #16]
 8016cea:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8016cee:	eef5 7a40 	vcmp.f32	s15, #0.0
 8016cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016cf6:	edcd 7a05 	vstr	s15, [sp, #20]
 8016cfa:	d11e      	bne.n	8016d3a <__ieee754_rem_pio2f+0x222>
 8016cfc:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8016d00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d04:	bf0c      	ite	eq
 8016d06:	2301      	moveq	r3, #1
 8016d08:	2302      	movne	r3, #2
 8016d0a:	491a      	ldr	r1, [pc, #104]	@ (8016d74 <__ieee754_rem_pio2f+0x25c>)
 8016d0c:	9101      	str	r1, [sp, #4]
 8016d0e:	2102      	movs	r1, #2
 8016d10:	9100      	str	r1, [sp, #0]
 8016d12:	a803      	add	r0, sp, #12
 8016d14:	4621      	mov	r1, r4
 8016d16:	f000 f895 	bl	8016e44 <__kernel_rem_pio2f>
 8016d1a:	2e00      	cmp	r6, #0
 8016d1c:	f6bf af2f 	bge.w	8016b7e <__ieee754_rem_pio2f+0x66>
 8016d20:	edd4 7a00 	vldr	s15, [r4]
 8016d24:	eef1 7a67 	vneg.f32	s15, s15
 8016d28:	edc4 7a00 	vstr	s15, [r4]
 8016d2c:	edd4 7a01 	vldr	s15, [r4, #4]
 8016d30:	eef1 7a67 	vneg.f32	s15, s15
 8016d34:	edc4 7a01 	vstr	s15, [r4, #4]
 8016d38:	e782      	b.n	8016c40 <__ieee754_rem_pio2f+0x128>
 8016d3a:	2303      	movs	r3, #3
 8016d3c:	e7e5      	b.n	8016d0a <__ieee754_rem_pio2f+0x1f2>
 8016d3e:	bf00      	nop
 8016d40:	3f490fd8 	.word	0x3f490fd8
 8016d44:	4016cbe3 	.word	0x4016cbe3
 8016d48:	3fc90f80 	.word	0x3fc90f80
 8016d4c:	3fc90fd0 	.word	0x3fc90fd0
 8016d50:	37354400 	.word	0x37354400
 8016d54:	37354443 	.word	0x37354443
 8016d58:	2e85a308 	.word	0x2e85a308
 8016d5c:	43490f80 	.word	0x43490f80
 8016d60:	3f22f984 	.word	0x3f22f984
 8016d64:	080d4c80 	.word	0x080d4c80
 8016d68:	2e85a300 	.word	0x2e85a300
 8016d6c:	248d3132 	.word	0x248d3132
 8016d70:	43800000 	.word	0x43800000
 8016d74:	080d4d00 	.word	0x080d4d00

08016d78 <scalbnf>:
 8016d78:	ee10 3a10 	vmov	r3, s0
 8016d7c:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8016d80:	d02b      	beq.n	8016dda <scalbnf+0x62>
 8016d82:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8016d86:	d302      	bcc.n	8016d8e <scalbnf+0x16>
 8016d88:	ee30 0a00 	vadd.f32	s0, s0, s0
 8016d8c:	4770      	bx	lr
 8016d8e:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8016d92:	d123      	bne.n	8016ddc <scalbnf+0x64>
 8016d94:	4b24      	ldr	r3, [pc, #144]	@ (8016e28 <scalbnf+0xb0>)
 8016d96:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8016e2c <scalbnf+0xb4>
 8016d9a:	4298      	cmp	r0, r3
 8016d9c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8016da0:	db17      	blt.n	8016dd2 <scalbnf+0x5a>
 8016da2:	ee10 3a10 	vmov	r3, s0
 8016da6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8016daa:	3a19      	subs	r2, #25
 8016dac:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8016db0:	4288      	cmp	r0, r1
 8016db2:	dd15      	ble.n	8016de0 <scalbnf+0x68>
 8016db4:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8016e30 <scalbnf+0xb8>
 8016db8:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8016e34 <scalbnf+0xbc>
 8016dbc:	ee10 3a10 	vmov	r3, s0
 8016dc0:	eeb0 7a67 	vmov.f32	s14, s15
 8016dc4:	2b00      	cmp	r3, #0
 8016dc6:	bfb8      	it	lt
 8016dc8:	eef0 7a66 	vmovlt.f32	s15, s13
 8016dcc:	ee27 0a87 	vmul.f32	s0, s15, s14
 8016dd0:	4770      	bx	lr
 8016dd2:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8016e38 <scalbnf+0xc0>
 8016dd6:	ee27 0a80 	vmul.f32	s0, s15, s0
 8016dda:	4770      	bx	lr
 8016ddc:	0dd2      	lsrs	r2, r2, #23
 8016dde:	e7e5      	b.n	8016dac <scalbnf+0x34>
 8016de0:	4410      	add	r0, r2
 8016de2:	28fe      	cmp	r0, #254	@ 0xfe
 8016de4:	dce6      	bgt.n	8016db4 <scalbnf+0x3c>
 8016de6:	2800      	cmp	r0, #0
 8016de8:	dd06      	ble.n	8016df8 <scalbnf+0x80>
 8016dea:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8016dee:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8016df2:	ee00 3a10 	vmov	s0, r3
 8016df6:	4770      	bx	lr
 8016df8:	f110 0f16 	cmn.w	r0, #22
 8016dfc:	da09      	bge.n	8016e12 <scalbnf+0x9a>
 8016dfe:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8016e38 <scalbnf+0xc0>
 8016e02:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8016e3c <scalbnf+0xc4>
 8016e06:	ee10 3a10 	vmov	r3, s0
 8016e0a:	eeb0 7a67 	vmov.f32	s14, s15
 8016e0e:	2b00      	cmp	r3, #0
 8016e10:	e7d9      	b.n	8016dc6 <scalbnf+0x4e>
 8016e12:	3019      	adds	r0, #25
 8016e14:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8016e18:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8016e1c:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8016e40 <scalbnf+0xc8>
 8016e20:	ee07 3a90 	vmov	s15, r3
 8016e24:	e7d7      	b.n	8016dd6 <scalbnf+0x5e>
 8016e26:	bf00      	nop
 8016e28:	ffff3cb0 	.word	0xffff3cb0
 8016e2c:	4c000000 	.word	0x4c000000
 8016e30:	7149f2ca 	.word	0x7149f2ca
 8016e34:	f149f2ca 	.word	0xf149f2ca
 8016e38:	0da24260 	.word	0x0da24260
 8016e3c:	8da24260 	.word	0x8da24260
 8016e40:	33000000 	.word	0x33000000

08016e44 <__kernel_rem_pio2f>:
 8016e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e48:	ed2d 8b04 	vpush	{d8-d9}
 8016e4c:	b0d9      	sub	sp, #356	@ 0x164
 8016e4e:	4690      	mov	r8, r2
 8016e50:	9001      	str	r0, [sp, #4]
 8016e52:	4ab9      	ldr	r2, [pc, #740]	@ (8017138 <__kernel_rem_pio2f+0x2f4>)
 8016e54:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8016e56:	f118 0f04 	cmn.w	r8, #4
 8016e5a:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8016e5e:	460f      	mov	r7, r1
 8016e60:	f103 3bff 	add.w	fp, r3, #4294967295
 8016e64:	db27      	blt.n	8016eb6 <__kernel_rem_pio2f+0x72>
 8016e66:	f1b8 0203 	subs.w	r2, r8, #3
 8016e6a:	bf48      	it	mi
 8016e6c:	f108 0204 	addmi.w	r2, r8, #4
 8016e70:	10d2      	asrs	r2, r2, #3
 8016e72:	1c55      	adds	r5, r2, #1
 8016e74:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8016e76:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 8017148 <__kernel_rem_pio2f+0x304>
 8016e7a:	00e8      	lsls	r0, r5, #3
 8016e7c:	eba2 060b 	sub.w	r6, r2, fp
 8016e80:	9002      	str	r0, [sp, #8]
 8016e82:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8016e86:	eb0a 0c0b 	add.w	ip, sl, fp
 8016e8a:	ac1c      	add	r4, sp, #112	@ 0x70
 8016e8c:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8016e90:	2000      	movs	r0, #0
 8016e92:	4560      	cmp	r0, ip
 8016e94:	dd11      	ble.n	8016eba <__kernel_rem_pio2f+0x76>
 8016e96:	a91c      	add	r1, sp, #112	@ 0x70
 8016e98:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8016e9c:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8016ea0:	f04f 0c00 	mov.w	ip, #0
 8016ea4:	45d4      	cmp	ip, sl
 8016ea6:	dc27      	bgt.n	8016ef8 <__kernel_rem_pio2f+0xb4>
 8016ea8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8016eac:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 8017148 <__kernel_rem_pio2f+0x304>
 8016eb0:	4606      	mov	r6, r0
 8016eb2:	2400      	movs	r4, #0
 8016eb4:	e016      	b.n	8016ee4 <__kernel_rem_pio2f+0xa0>
 8016eb6:	2200      	movs	r2, #0
 8016eb8:	e7db      	b.n	8016e72 <__kernel_rem_pio2f+0x2e>
 8016eba:	42c6      	cmn	r6, r0
 8016ebc:	bf5d      	ittte	pl
 8016ebe:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8016ec2:	ee07 1a90 	vmovpl	s15, r1
 8016ec6:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8016eca:	eef0 7a47 	vmovmi.f32	s15, s14
 8016ece:	ece4 7a01 	vstmia	r4!, {s15}
 8016ed2:	3001      	adds	r0, #1
 8016ed4:	e7dd      	b.n	8016e92 <__kernel_rem_pio2f+0x4e>
 8016ed6:	ecfe 6a01 	vldmia	lr!, {s13}
 8016eda:	ed96 7a00 	vldr	s14, [r6]
 8016ede:	eee6 7a87 	vfma.f32	s15, s13, s14
 8016ee2:	3401      	adds	r4, #1
 8016ee4:	455c      	cmp	r4, fp
 8016ee6:	f1a6 0604 	sub.w	r6, r6, #4
 8016eea:	ddf4      	ble.n	8016ed6 <__kernel_rem_pio2f+0x92>
 8016eec:	ece9 7a01 	vstmia	r9!, {s15}
 8016ef0:	f10c 0c01 	add.w	ip, ip, #1
 8016ef4:	3004      	adds	r0, #4
 8016ef6:	e7d5      	b.n	8016ea4 <__kernel_rem_pio2f+0x60>
 8016ef8:	a908      	add	r1, sp, #32
 8016efa:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8016efe:	9104      	str	r1, [sp, #16]
 8016f00:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8016f02:	eddf 8a90 	vldr	s17, [pc, #576]	@ 8017144 <__kernel_rem_pio2f+0x300>
 8016f06:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 8017140 <__kernel_rem_pio2f+0x2fc>
 8016f0a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8016f0e:	9203      	str	r2, [sp, #12]
 8016f10:	4654      	mov	r4, sl
 8016f12:	00a2      	lsls	r2, r4, #2
 8016f14:	9205      	str	r2, [sp, #20]
 8016f16:	aa58      	add	r2, sp, #352	@ 0x160
 8016f18:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8016f1c:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8016f20:	a944      	add	r1, sp, #272	@ 0x110
 8016f22:	aa08      	add	r2, sp, #32
 8016f24:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8016f28:	4694      	mov	ip, r2
 8016f2a:	4626      	mov	r6, r4
 8016f2c:	2e00      	cmp	r6, #0
 8016f2e:	f1a0 0004 	sub.w	r0, r0, #4
 8016f32:	dc4c      	bgt.n	8016fce <__kernel_rem_pio2f+0x18a>
 8016f34:	4628      	mov	r0, r5
 8016f36:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8016f3a:	f7ff ff1d 	bl	8016d78 <scalbnf>
 8016f3e:	eeb0 8a40 	vmov.f32	s16, s0
 8016f42:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8016f46:	ee28 0a00 	vmul.f32	s0, s16, s0
 8016f4a:	f000 f9ed 	bl	8017328 <floorf>
 8016f4e:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8016f52:	eea0 8a67 	vfms.f32	s16, s0, s15
 8016f56:	2d00      	cmp	r5, #0
 8016f58:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016f5c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8016f60:	ee17 9a90 	vmov	r9, s15
 8016f64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016f68:	ee38 8a67 	vsub.f32	s16, s16, s15
 8016f6c:	dd41      	ble.n	8016ff2 <__kernel_rem_pio2f+0x1ae>
 8016f6e:	f104 3cff 	add.w	ip, r4, #4294967295
 8016f72:	a908      	add	r1, sp, #32
 8016f74:	f1c5 0e08 	rsb	lr, r5, #8
 8016f78:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8016f7c:	fa46 f00e 	asr.w	r0, r6, lr
 8016f80:	4481      	add	r9, r0
 8016f82:	fa00 f00e 	lsl.w	r0, r0, lr
 8016f86:	1a36      	subs	r6, r6, r0
 8016f88:	f1c5 0007 	rsb	r0, r5, #7
 8016f8c:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8016f90:	4106      	asrs	r6, r0
 8016f92:	2e00      	cmp	r6, #0
 8016f94:	dd3c      	ble.n	8017010 <__kernel_rem_pio2f+0x1cc>
 8016f96:	f04f 0e00 	mov.w	lr, #0
 8016f9a:	f109 0901 	add.w	r9, r9, #1
 8016f9e:	4670      	mov	r0, lr
 8016fa0:	4574      	cmp	r4, lr
 8016fa2:	dc68      	bgt.n	8017076 <__kernel_rem_pio2f+0x232>
 8016fa4:	2d00      	cmp	r5, #0
 8016fa6:	dd03      	ble.n	8016fb0 <__kernel_rem_pio2f+0x16c>
 8016fa8:	2d01      	cmp	r5, #1
 8016faa:	d074      	beq.n	8017096 <__kernel_rem_pio2f+0x252>
 8016fac:	2d02      	cmp	r5, #2
 8016fae:	d07d      	beq.n	80170ac <__kernel_rem_pio2f+0x268>
 8016fb0:	2e02      	cmp	r6, #2
 8016fb2:	d12d      	bne.n	8017010 <__kernel_rem_pio2f+0x1cc>
 8016fb4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8016fb8:	ee30 8a48 	vsub.f32	s16, s0, s16
 8016fbc:	b340      	cbz	r0, 8017010 <__kernel_rem_pio2f+0x1cc>
 8016fbe:	4628      	mov	r0, r5
 8016fc0:	9306      	str	r3, [sp, #24]
 8016fc2:	f7ff fed9 	bl	8016d78 <scalbnf>
 8016fc6:	9b06      	ldr	r3, [sp, #24]
 8016fc8:	ee38 8a40 	vsub.f32	s16, s16, s0
 8016fcc:	e020      	b.n	8017010 <__kernel_rem_pio2f+0x1cc>
 8016fce:	ee60 7a28 	vmul.f32	s15, s0, s17
 8016fd2:	3e01      	subs	r6, #1
 8016fd4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016fd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016fdc:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8016fe0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8016fe4:	ecac 0a01 	vstmia	ip!, {s0}
 8016fe8:	ed90 0a00 	vldr	s0, [r0]
 8016fec:	ee37 0a80 	vadd.f32	s0, s15, s0
 8016ff0:	e79c      	b.n	8016f2c <__kernel_rem_pio2f+0xe8>
 8016ff2:	d105      	bne.n	8017000 <__kernel_rem_pio2f+0x1bc>
 8016ff4:	1e60      	subs	r0, r4, #1
 8016ff6:	a908      	add	r1, sp, #32
 8016ff8:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8016ffc:	11f6      	asrs	r6, r6, #7
 8016ffe:	e7c8      	b.n	8016f92 <__kernel_rem_pio2f+0x14e>
 8017000:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8017004:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8017008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801700c:	da31      	bge.n	8017072 <__kernel_rem_pio2f+0x22e>
 801700e:	2600      	movs	r6, #0
 8017010:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8017014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017018:	f040 8098 	bne.w	801714c <__kernel_rem_pio2f+0x308>
 801701c:	1e60      	subs	r0, r4, #1
 801701e:	2200      	movs	r2, #0
 8017020:	4550      	cmp	r0, sl
 8017022:	da4b      	bge.n	80170bc <__kernel_rem_pio2f+0x278>
 8017024:	2a00      	cmp	r2, #0
 8017026:	d065      	beq.n	80170f4 <__kernel_rem_pio2f+0x2b0>
 8017028:	3c01      	subs	r4, #1
 801702a:	ab08      	add	r3, sp, #32
 801702c:	3d08      	subs	r5, #8
 801702e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8017032:	2b00      	cmp	r3, #0
 8017034:	d0f8      	beq.n	8017028 <__kernel_rem_pio2f+0x1e4>
 8017036:	4628      	mov	r0, r5
 8017038:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801703c:	f7ff fe9c 	bl	8016d78 <scalbnf>
 8017040:	1c63      	adds	r3, r4, #1
 8017042:	aa44      	add	r2, sp, #272	@ 0x110
 8017044:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8017144 <__kernel_rem_pio2f+0x300>
 8017048:	0099      	lsls	r1, r3, #2
 801704a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801704e:	4623      	mov	r3, r4
 8017050:	2b00      	cmp	r3, #0
 8017052:	f280 80a9 	bge.w	80171a8 <__kernel_rem_pio2f+0x364>
 8017056:	4623      	mov	r3, r4
 8017058:	2b00      	cmp	r3, #0
 801705a:	f2c0 80c7 	blt.w	80171ec <__kernel_rem_pio2f+0x3a8>
 801705e:	aa44      	add	r2, sp, #272	@ 0x110
 8017060:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8017064:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 801713c <__kernel_rem_pio2f+0x2f8>
 8017068:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8017148 <__kernel_rem_pio2f+0x304>
 801706c:	2000      	movs	r0, #0
 801706e:	1ae2      	subs	r2, r4, r3
 8017070:	e0b1      	b.n	80171d6 <__kernel_rem_pio2f+0x392>
 8017072:	2602      	movs	r6, #2
 8017074:	e78f      	b.n	8016f96 <__kernel_rem_pio2f+0x152>
 8017076:	f852 1b04 	ldr.w	r1, [r2], #4
 801707a:	b948      	cbnz	r0, 8017090 <__kernel_rem_pio2f+0x24c>
 801707c:	b121      	cbz	r1, 8017088 <__kernel_rem_pio2f+0x244>
 801707e:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8017082:	f842 1c04 	str.w	r1, [r2, #-4]
 8017086:	2101      	movs	r1, #1
 8017088:	f10e 0e01 	add.w	lr, lr, #1
 801708c:	4608      	mov	r0, r1
 801708e:	e787      	b.n	8016fa0 <__kernel_rem_pio2f+0x15c>
 8017090:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8017094:	e7f5      	b.n	8017082 <__kernel_rem_pio2f+0x23e>
 8017096:	f104 3cff 	add.w	ip, r4, #4294967295
 801709a:	aa08      	add	r2, sp, #32
 801709c:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80170a0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80170a4:	a908      	add	r1, sp, #32
 80170a6:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 80170aa:	e781      	b.n	8016fb0 <__kernel_rem_pio2f+0x16c>
 80170ac:	f104 3cff 	add.w	ip, r4, #4294967295
 80170b0:	aa08      	add	r2, sp, #32
 80170b2:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80170b6:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80170ba:	e7f3      	b.n	80170a4 <__kernel_rem_pio2f+0x260>
 80170bc:	a908      	add	r1, sp, #32
 80170be:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80170c2:	3801      	subs	r0, #1
 80170c4:	430a      	orrs	r2, r1
 80170c6:	e7ab      	b.n	8017020 <__kernel_rem_pio2f+0x1dc>
 80170c8:	3201      	adds	r2, #1
 80170ca:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 80170ce:	2e00      	cmp	r6, #0
 80170d0:	d0fa      	beq.n	80170c8 <__kernel_rem_pio2f+0x284>
 80170d2:	9905      	ldr	r1, [sp, #20]
 80170d4:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 80170d8:	eb0d 0001 	add.w	r0, sp, r1
 80170dc:	18e6      	adds	r6, r4, r3
 80170de:	a91c      	add	r1, sp, #112	@ 0x70
 80170e0:	f104 0c01 	add.w	ip, r4, #1
 80170e4:	384c      	subs	r0, #76	@ 0x4c
 80170e6:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 80170ea:	4422      	add	r2, r4
 80170ec:	4562      	cmp	r2, ip
 80170ee:	da04      	bge.n	80170fa <__kernel_rem_pio2f+0x2b6>
 80170f0:	4614      	mov	r4, r2
 80170f2:	e70e      	b.n	8016f12 <__kernel_rem_pio2f+0xce>
 80170f4:	9804      	ldr	r0, [sp, #16]
 80170f6:	2201      	movs	r2, #1
 80170f8:	e7e7      	b.n	80170ca <__kernel_rem_pio2f+0x286>
 80170fa:	9903      	ldr	r1, [sp, #12]
 80170fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8017100:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8017104:	9105      	str	r1, [sp, #20]
 8017106:	ee07 1a90 	vmov	s15, r1
 801710a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801710e:	2400      	movs	r4, #0
 8017110:	ece6 7a01 	vstmia	r6!, {s15}
 8017114:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8017148 <__kernel_rem_pio2f+0x304>
 8017118:	46b1      	mov	r9, r6
 801711a:	455c      	cmp	r4, fp
 801711c:	dd04      	ble.n	8017128 <__kernel_rem_pio2f+0x2e4>
 801711e:	ece0 7a01 	vstmia	r0!, {s15}
 8017122:	f10c 0c01 	add.w	ip, ip, #1
 8017126:	e7e1      	b.n	80170ec <__kernel_rem_pio2f+0x2a8>
 8017128:	ecfe 6a01 	vldmia	lr!, {s13}
 801712c:	ed39 7a01 	vldmdb	r9!, {s14}
 8017130:	3401      	adds	r4, #1
 8017132:	eee6 7a87 	vfma.f32	s15, s13, s14
 8017136:	e7f0      	b.n	801711a <__kernel_rem_pio2f+0x2d6>
 8017138:	080d5044 	.word	0x080d5044
 801713c:	080d5018 	.word	0x080d5018
 8017140:	43800000 	.word	0x43800000
 8017144:	3b800000 	.word	0x3b800000
 8017148:	00000000 	.word	0x00000000
 801714c:	9b02      	ldr	r3, [sp, #8]
 801714e:	eeb0 0a48 	vmov.f32	s0, s16
 8017152:	eba3 0008 	sub.w	r0, r3, r8
 8017156:	f7ff fe0f 	bl	8016d78 <scalbnf>
 801715a:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8017140 <__kernel_rem_pio2f+0x2fc>
 801715e:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8017162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017166:	db19      	blt.n	801719c <__kernel_rem_pio2f+0x358>
 8017168:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8017144 <__kernel_rem_pio2f+0x300>
 801716c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8017170:	aa08      	add	r2, sp, #32
 8017172:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017176:	3508      	adds	r5, #8
 8017178:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801717c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8017180:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017184:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8017188:	ee10 3a10 	vmov	r3, s0
 801718c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8017190:	ee17 3a90 	vmov	r3, s15
 8017194:	3401      	adds	r4, #1
 8017196:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801719a:	e74c      	b.n	8017036 <__kernel_rem_pio2f+0x1f2>
 801719c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80171a0:	aa08      	add	r2, sp, #32
 80171a2:	ee10 3a10 	vmov	r3, s0
 80171a6:	e7f6      	b.n	8017196 <__kernel_rem_pio2f+0x352>
 80171a8:	a808      	add	r0, sp, #32
 80171aa:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80171ae:	9001      	str	r0, [sp, #4]
 80171b0:	ee07 0a90 	vmov	s15, r0
 80171b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80171b8:	3b01      	subs	r3, #1
 80171ba:	ee67 7a80 	vmul.f32	s15, s15, s0
 80171be:	ee20 0a07 	vmul.f32	s0, s0, s14
 80171c2:	ed62 7a01 	vstmdb	r2!, {s15}
 80171c6:	e743      	b.n	8017050 <__kernel_rem_pio2f+0x20c>
 80171c8:	ecfc 6a01 	vldmia	ip!, {s13}
 80171cc:	ecb5 7a01 	vldmia	r5!, {s14}
 80171d0:	eee6 7a87 	vfma.f32	s15, s13, s14
 80171d4:	3001      	adds	r0, #1
 80171d6:	4550      	cmp	r0, sl
 80171d8:	dc01      	bgt.n	80171de <__kernel_rem_pio2f+0x39a>
 80171da:	4282      	cmp	r2, r0
 80171dc:	daf4      	bge.n	80171c8 <__kernel_rem_pio2f+0x384>
 80171de:	a858      	add	r0, sp, #352	@ 0x160
 80171e0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80171e4:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 80171e8:	3b01      	subs	r3, #1
 80171ea:	e735      	b.n	8017058 <__kernel_rem_pio2f+0x214>
 80171ec:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 80171ee:	2b02      	cmp	r3, #2
 80171f0:	dc09      	bgt.n	8017206 <__kernel_rem_pio2f+0x3c2>
 80171f2:	2b00      	cmp	r3, #0
 80171f4:	dc2b      	bgt.n	801724e <__kernel_rem_pio2f+0x40a>
 80171f6:	d044      	beq.n	8017282 <__kernel_rem_pio2f+0x43e>
 80171f8:	f009 0007 	and.w	r0, r9, #7
 80171fc:	b059      	add	sp, #356	@ 0x164
 80171fe:	ecbd 8b04 	vpop	{d8-d9}
 8017202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017206:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8017208:	2b03      	cmp	r3, #3
 801720a:	d1f5      	bne.n	80171f8 <__kernel_rem_pio2f+0x3b4>
 801720c:	aa30      	add	r2, sp, #192	@ 0xc0
 801720e:	1f0b      	subs	r3, r1, #4
 8017210:	4413      	add	r3, r2
 8017212:	461a      	mov	r2, r3
 8017214:	4620      	mov	r0, r4
 8017216:	2800      	cmp	r0, #0
 8017218:	f1a2 0204 	sub.w	r2, r2, #4
 801721c:	dc52      	bgt.n	80172c4 <__kernel_rem_pio2f+0x480>
 801721e:	4622      	mov	r2, r4
 8017220:	2a01      	cmp	r2, #1
 8017222:	f1a3 0304 	sub.w	r3, r3, #4
 8017226:	dc5d      	bgt.n	80172e4 <__kernel_rem_pio2f+0x4a0>
 8017228:	ab30      	add	r3, sp, #192	@ 0xc0
 801722a:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 8017148 <__kernel_rem_pio2f+0x304>
 801722e:	440b      	add	r3, r1
 8017230:	2c01      	cmp	r4, #1
 8017232:	dc67      	bgt.n	8017304 <__kernel_rem_pio2f+0x4c0>
 8017234:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8017238:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 801723c:	2e00      	cmp	r6, #0
 801723e:	d167      	bne.n	8017310 <__kernel_rem_pio2f+0x4cc>
 8017240:	edc7 6a00 	vstr	s13, [r7]
 8017244:	ed87 7a01 	vstr	s14, [r7, #4]
 8017248:	edc7 7a02 	vstr	s15, [r7, #8]
 801724c:	e7d4      	b.n	80171f8 <__kernel_rem_pio2f+0x3b4>
 801724e:	ab30      	add	r3, sp, #192	@ 0xc0
 8017250:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 8017148 <__kernel_rem_pio2f+0x304>
 8017254:	440b      	add	r3, r1
 8017256:	4622      	mov	r2, r4
 8017258:	2a00      	cmp	r2, #0
 801725a:	da24      	bge.n	80172a6 <__kernel_rem_pio2f+0x462>
 801725c:	b34e      	cbz	r6, 80172b2 <__kernel_rem_pio2f+0x46e>
 801725e:	eef1 7a47 	vneg.f32	s15, s14
 8017262:	edc7 7a00 	vstr	s15, [r7]
 8017266:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 801726a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801726e:	aa31      	add	r2, sp, #196	@ 0xc4
 8017270:	2301      	movs	r3, #1
 8017272:	429c      	cmp	r4, r3
 8017274:	da20      	bge.n	80172b8 <__kernel_rem_pio2f+0x474>
 8017276:	b10e      	cbz	r6, 801727c <__kernel_rem_pio2f+0x438>
 8017278:	eef1 7a67 	vneg.f32	s15, s15
 801727c:	edc7 7a01 	vstr	s15, [r7, #4]
 8017280:	e7ba      	b.n	80171f8 <__kernel_rem_pio2f+0x3b4>
 8017282:	ab30      	add	r3, sp, #192	@ 0xc0
 8017284:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 8017148 <__kernel_rem_pio2f+0x304>
 8017288:	440b      	add	r3, r1
 801728a:	2c00      	cmp	r4, #0
 801728c:	da05      	bge.n	801729a <__kernel_rem_pio2f+0x456>
 801728e:	b10e      	cbz	r6, 8017294 <__kernel_rem_pio2f+0x450>
 8017290:	eef1 7a67 	vneg.f32	s15, s15
 8017294:	edc7 7a00 	vstr	s15, [r7]
 8017298:	e7ae      	b.n	80171f8 <__kernel_rem_pio2f+0x3b4>
 801729a:	ed33 7a01 	vldmdb	r3!, {s14}
 801729e:	3c01      	subs	r4, #1
 80172a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80172a4:	e7f1      	b.n	801728a <__kernel_rem_pio2f+0x446>
 80172a6:	ed73 7a01 	vldmdb	r3!, {s15}
 80172aa:	3a01      	subs	r2, #1
 80172ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80172b0:	e7d2      	b.n	8017258 <__kernel_rem_pio2f+0x414>
 80172b2:	eef0 7a47 	vmov.f32	s15, s14
 80172b6:	e7d4      	b.n	8017262 <__kernel_rem_pio2f+0x41e>
 80172b8:	ecb2 7a01 	vldmia	r2!, {s14}
 80172bc:	3301      	adds	r3, #1
 80172be:	ee77 7a87 	vadd.f32	s15, s15, s14
 80172c2:	e7d6      	b.n	8017272 <__kernel_rem_pio2f+0x42e>
 80172c4:	edd2 7a00 	vldr	s15, [r2]
 80172c8:	edd2 6a01 	vldr	s13, [r2, #4]
 80172cc:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80172d0:	3801      	subs	r0, #1
 80172d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80172d6:	ed82 7a00 	vstr	s14, [r2]
 80172da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80172de:	edc2 7a01 	vstr	s15, [r2, #4]
 80172e2:	e798      	b.n	8017216 <__kernel_rem_pio2f+0x3d2>
 80172e4:	edd3 7a00 	vldr	s15, [r3]
 80172e8:	edd3 6a01 	vldr	s13, [r3, #4]
 80172ec:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80172f0:	3a01      	subs	r2, #1
 80172f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80172f6:	ed83 7a00 	vstr	s14, [r3]
 80172fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80172fe:	edc3 7a01 	vstr	s15, [r3, #4]
 8017302:	e78d      	b.n	8017220 <__kernel_rem_pio2f+0x3dc>
 8017304:	ed33 7a01 	vldmdb	r3!, {s14}
 8017308:	3c01      	subs	r4, #1
 801730a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801730e:	e78f      	b.n	8017230 <__kernel_rem_pio2f+0x3ec>
 8017310:	eef1 6a66 	vneg.f32	s13, s13
 8017314:	eeb1 7a47 	vneg.f32	s14, s14
 8017318:	edc7 6a00 	vstr	s13, [r7]
 801731c:	ed87 7a01 	vstr	s14, [r7, #4]
 8017320:	eef1 7a67 	vneg.f32	s15, s15
 8017324:	e790      	b.n	8017248 <__kernel_rem_pio2f+0x404>
 8017326:	bf00      	nop

08017328 <floorf>:
 8017328:	ee10 3a10 	vmov	r3, s0
 801732c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8017330:	3a7f      	subs	r2, #127	@ 0x7f
 8017332:	2a16      	cmp	r2, #22
 8017334:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8017338:	dc2b      	bgt.n	8017392 <floorf+0x6a>
 801733a:	2a00      	cmp	r2, #0
 801733c:	da12      	bge.n	8017364 <floorf+0x3c>
 801733e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80173a4 <floorf+0x7c>
 8017342:	ee30 0a27 	vadd.f32	s0, s0, s15
 8017346:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801734a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801734e:	dd06      	ble.n	801735e <floorf+0x36>
 8017350:	2b00      	cmp	r3, #0
 8017352:	da24      	bge.n	801739e <floorf+0x76>
 8017354:	2900      	cmp	r1, #0
 8017356:	4b14      	ldr	r3, [pc, #80]	@ (80173a8 <floorf+0x80>)
 8017358:	bf08      	it	eq
 801735a:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 801735e:	ee00 3a10 	vmov	s0, r3
 8017362:	4770      	bx	lr
 8017364:	4911      	ldr	r1, [pc, #68]	@ (80173ac <floorf+0x84>)
 8017366:	4111      	asrs	r1, r2
 8017368:	420b      	tst	r3, r1
 801736a:	d0fa      	beq.n	8017362 <floorf+0x3a>
 801736c:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 80173a4 <floorf+0x7c>
 8017370:	ee30 0a27 	vadd.f32	s0, s0, s15
 8017374:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8017378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801737c:	ddef      	ble.n	801735e <floorf+0x36>
 801737e:	2b00      	cmp	r3, #0
 8017380:	bfbe      	ittt	lt
 8017382:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8017386:	fa40 f202 	asrlt.w	r2, r0, r2
 801738a:	189b      	addlt	r3, r3, r2
 801738c:	ea23 0301 	bic.w	r3, r3, r1
 8017390:	e7e5      	b.n	801735e <floorf+0x36>
 8017392:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8017396:	d3e4      	bcc.n	8017362 <floorf+0x3a>
 8017398:	ee30 0a00 	vadd.f32	s0, s0, s0
 801739c:	4770      	bx	lr
 801739e:	2300      	movs	r3, #0
 80173a0:	e7dd      	b.n	801735e <floorf+0x36>
 80173a2:	bf00      	nop
 80173a4:	7149f2ca 	.word	0x7149f2ca
 80173a8:	bf800000 	.word	0xbf800000
 80173ac:	007fffff 	.word	0x007fffff

080173b0 <_init>:
 80173b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80173b2:	bf00      	nop
 80173b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80173b6:	bc08      	pop	{r3}
 80173b8:	469e      	mov	lr, r3
 80173ba:	4770      	bx	lr

080173bc <_fini>:
 80173bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80173be:	bf00      	nop
 80173c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80173c2:	bc08      	pop	{r3}
 80173c4:	469e      	mov	lr, r3
 80173c6:	4770      	bx	lr
