
Microphone_wav_SD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a0f8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000be088  0801a2e0  0801a2e0  0001b2e0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080d8368  080d8368  001020f0  2**0
                  CONTENTS
  4 .ARM          00000008  080d8368  080d8368  000d9368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080d8370  080d8370  001020f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080d8370  080d8370  000d9370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080d8374  080d8374  000d9374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000a88  20000000  080d8378  000da000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000356e4  20000a88  080d8e00  000daa88  2**2
                  ALLOC
 10 ._user_heap_stack 00004004  2003616c  080d8e00  000db16c  2**0
                  ALLOC
 11 .sdram        000270f0  c0000000  c0000000  000db000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.attributes 00000030  00000000  00000000  001020f0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00029bcf  00000000  00000000  00102120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006844  00000000  00000000  0012bcef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000020b8  00000000  00000000  00132538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001846  00000000  00000000  001345f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002fef5  00000000  00000000  00135e36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002eca7  00000000  00000000  00165d2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010ca5c  00000000  00000000  001949d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000f4  00000000  00000000  002a142e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000097c0  00000000  00000000  002a1524  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  002aace4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    00003a35  00000000  00000000  002aad4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 00000128  00000000  00000000  002ae781  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000a88 	.word	0x20000a88
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801a2b0 	.word	0x0801a2b0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000a8c 	.word	0x20000a8c
 800020c:	0801a2b0 	.word	0x0801a2b0

08000210 <arm_bitreversal_32>:
 8000210:	1c4b      	adds	r3, r1, #1
 8000212:	2b01      	cmp	r3, #1
 8000214:	bf98      	it	ls
 8000216:	4770      	bxls	lr
 8000218:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800021c:	1c91      	adds	r1, r2, #2
 800021e:	089b      	lsrs	r3, r3, #2

08000220 <arm_bitreversal_32_0>:
 8000220:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000224:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000228:	880a      	ldrh	r2, [r1, #0]
 800022a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 800022e:	4480      	add	r8, r0
 8000230:	4481      	add	r9, r0
 8000232:	4402      	add	r2, r0
 8000234:	4484      	add	ip, r0
 8000236:	f8d9 7000 	ldr.w	r7, [r9]
 800023a:	f8d8 6000 	ldr.w	r6, [r8]
 800023e:	6815      	ldr	r5, [r2, #0]
 8000240:	f8dc 4000 	ldr.w	r4, [ip]
 8000244:	f8c9 6000 	str.w	r6, [r9]
 8000248:	f8c8 7000 	str.w	r7, [r8]
 800024c:	f8cc 5000 	str.w	r5, [ip]
 8000250:	6014      	str	r4, [r2, #0]
 8000252:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000256:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800025a:	6855      	ldr	r5, [r2, #4]
 800025c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000260:	f8c9 6004 	str.w	r6, [r9, #4]
 8000264:	f8c8 7004 	str.w	r7, [r8, #4]
 8000268:	f8cc 5004 	str.w	r5, [ip, #4]
 800026c:	6054      	str	r4, [r2, #4]
 800026e:	3108      	adds	r1, #8
 8000270:	3b01      	subs	r3, #1
 8000272:	d1d5      	bne.n	8000220 <arm_bitreversal_32_0>
 8000274:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000278:	4770      	bx	lr

0800027a <arm_bitreversal_16>:
 800027a:	1c4b      	adds	r3, r1, #1
 800027c:	2b01      	cmp	r3, #1
 800027e:	bf98      	it	ls
 8000280:	4770      	bxls	lr
 8000282:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000286:	1c91      	adds	r1, r2, #2
 8000288:	089b      	lsrs	r3, r3, #2

0800028a <arm_bitreversal_16_0>:
 800028a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800028e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000292:	880a      	ldrh	r2, [r1, #0]
 8000294:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000298:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800029c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 80002a0:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 80002a4:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 80002a8:	f8d9 7000 	ldr.w	r7, [r9]
 80002ac:	f8d8 6000 	ldr.w	r6, [r8]
 80002b0:	6815      	ldr	r5, [r2, #0]
 80002b2:	f8dc 4000 	ldr.w	r4, [ip]
 80002b6:	f8c9 6000 	str.w	r6, [r9]
 80002ba:	f8c8 7000 	str.w	r7, [r8]
 80002be:	f8cc 5000 	str.w	r5, [ip]
 80002c2:	6014      	str	r4, [r2, #0]
 80002c4:	3108      	adds	r1, #8
 80002c6:	3b01      	subs	r3, #1
 80002c8:	d1df      	bne.n	800028a <arm_bitreversal_16_0>
 80002ca:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002ce:	4770      	bx	lr

080002d0 <strcmp>:
 80002d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002d8:	2a01      	cmp	r2, #1
 80002da:	bf28      	it	cs
 80002dc:	429a      	cmpcs	r2, r3
 80002de:	d0f7      	beq.n	80002d0 <strcmp>
 80002e0:	1ad0      	subs	r0, r2, r3
 80002e2:	4770      	bx	lr
	...

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <strlen>:
 8000390:	4603      	mov	r3, r0
 8000392:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000396:	2a00      	cmp	r2, #0
 8000398:	d1fb      	bne.n	8000392 <strlen+0x2>
 800039a:	1a18      	subs	r0, r3, r0
 800039c:	3801      	subs	r0, #1
 800039e:	4770      	bx	lr

080003a0 <__aeabi_drsub>:
 80003a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003a4:	e002      	b.n	80003ac <__adddf3>
 80003a6:	bf00      	nop

080003a8 <__aeabi_dsub>:
 80003a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003ac <__adddf3>:
 80003ac:	b530      	push	{r4, r5, lr}
 80003ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003b6:	ea94 0f05 	teq	r4, r5
 80003ba:	bf08      	it	eq
 80003bc:	ea90 0f02 	teqeq	r0, r2
 80003c0:	bf1f      	itttt	ne
 80003c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d2:	f000 80e2 	beq.w	800059a <__adddf3+0x1ee>
 80003d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003de:	bfb8      	it	lt
 80003e0:	426d      	neglt	r5, r5
 80003e2:	dd0c      	ble.n	80003fe <__adddf3+0x52>
 80003e4:	442c      	add	r4, r5
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	ea82 0000 	eor.w	r0, r2, r0
 80003f2:	ea83 0101 	eor.w	r1, r3, r1
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	2d36      	cmp	r5, #54	@ 0x36
 8000400:	bf88      	it	hi
 8000402:	bd30      	pophi	{r4, r5, pc}
 8000404:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000408:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800040c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000410:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000414:	d002      	beq.n	800041c <__adddf3+0x70>
 8000416:	4240      	negs	r0, r0
 8000418:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800041c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000420:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000424:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x84>
 800042a:	4252      	negs	r2, r2
 800042c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000430:	ea94 0f05 	teq	r4, r5
 8000434:	f000 80a7 	beq.w	8000586 <__adddf3+0x1da>
 8000438:	f1a4 0401 	sub.w	r4, r4, #1
 800043c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000440:	db0d      	blt.n	800045e <__adddf3+0xb2>
 8000442:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000446:	fa22 f205 	lsr.w	r2, r2, r5
 800044a:	1880      	adds	r0, r0, r2
 800044c:	f141 0100 	adc.w	r1, r1, #0
 8000450:	fa03 f20e 	lsl.w	r2, r3, lr
 8000454:	1880      	adds	r0, r0, r2
 8000456:	fa43 f305 	asr.w	r3, r3, r5
 800045a:	4159      	adcs	r1, r3
 800045c:	e00e      	b.n	800047c <__adddf3+0xd0>
 800045e:	f1a5 0520 	sub.w	r5, r5, #32
 8000462:	f10e 0e20 	add.w	lr, lr, #32
 8000466:	2a01      	cmp	r2, #1
 8000468:	fa03 fc0e 	lsl.w	ip, r3, lr
 800046c:	bf28      	it	cs
 800046e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000472:	fa43 f305 	asr.w	r3, r3, r5
 8000476:	18c0      	adds	r0, r0, r3
 8000478:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800047c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000480:	d507      	bpl.n	8000492 <__adddf3+0xe6>
 8000482:	f04f 0e00 	mov.w	lr, #0
 8000486:	f1dc 0c00 	rsbs	ip, ip, #0
 800048a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800048e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000492:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000496:	d31b      	bcc.n	80004d0 <__adddf3+0x124>
 8000498:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800049c:	d30c      	bcc.n	80004b8 <__adddf3+0x10c>
 800049e:	0849      	lsrs	r1, r1, #1
 80004a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004a8:	f104 0401 	add.w	r4, r4, #1
 80004ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004b4:	f080 809a 	bcs.w	80005ec <__adddf3+0x240>
 80004b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004bc:	bf08      	it	eq
 80004be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c2:	f150 0000 	adcs.w	r0, r0, #0
 80004c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ca:	ea41 0105 	orr.w	r1, r1, r5
 80004ce:	bd30      	pop	{r4, r5, pc}
 80004d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d4:	4140      	adcs	r0, r0
 80004d6:	eb41 0101 	adc.w	r1, r1, r1
 80004da:	3c01      	subs	r4, #1
 80004dc:	bf28      	it	cs
 80004de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004e2:	d2e9      	bcs.n	80004b8 <__adddf3+0x10c>
 80004e4:	f091 0f00 	teq	r1, #0
 80004e8:	bf04      	itt	eq
 80004ea:	4601      	moveq	r1, r0
 80004ec:	2000      	moveq	r0, #0
 80004ee:	fab1 f381 	clz	r3, r1
 80004f2:	bf08      	it	eq
 80004f4:	3320      	addeq	r3, #32
 80004f6:	f1a3 030b 	sub.w	r3, r3, #11
 80004fa:	f1b3 0220 	subs.w	r2, r3, #32
 80004fe:	da0c      	bge.n	800051a <__adddf3+0x16e>
 8000500:	320c      	adds	r2, #12
 8000502:	dd08      	ble.n	8000516 <__adddf3+0x16a>
 8000504:	f102 0c14 	add.w	ip, r2, #20
 8000508:	f1c2 020c 	rsb	r2, r2, #12
 800050c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000510:	fa21 f102 	lsr.w	r1, r1, r2
 8000514:	e00c      	b.n	8000530 <__adddf3+0x184>
 8000516:	f102 0214 	add.w	r2, r2, #20
 800051a:	bfd8      	it	le
 800051c:	f1c2 0c20 	rsble	ip, r2, #32
 8000520:	fa01 f102 	lsl.w	r1, r1, r2
 8000524:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000528:	bfdc      	itt	le
 800052a:	ea41 010c 	orrle.w	r1, r1, ip
 800052e:	4090      	lslle	r0, r2
 8000530:	1ae4      	subs	r4, r4, r3
 8000532:	bfa2      	ittt	ge
 8000534:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000538:	4329      	orrge	r1, r5
 800053a:	bd30      	popge	{r4, r5, pc}
 800053c:	ea6f 0404 	mvn.w	r4, r4
 8000540:	3c1f      	subs	r4, #31
 8000542:	da1c      	bge.n	800057e <__adddf3+0x1d2>
 8000544:	340c      	adds	r4, #12
 8000546:	dc0e      	bgt.n	8000566 <__adddf3+0x1ba>
 8000548:	f104 0414 	add.w	r4, r4, #20
 800054c:	f1c4 0220 	rsb	r2, r4, #32
 8000550:	fa20 f004 	lsr.w	r0, r0, r4
 8000554:	fa01 f302 	lsl.w	r3, r1, r2
 8000558:	ea40 0003 	orr.w	r0, r0, r3
 800055c:	fa21 f304 	lsr.w	r3, r1, r4
 8000560:	ea45 0103 	orr.w	r1, r5, r3
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f1c4 040c 	rsb	r4, r4, #12
 800056a:	f1c4 0220 	rsb	r2, r4, #32
 800056e:	fa20 f002 	lsr.w	r0, r0, r2
 8000572:	fa01 f304 	lsl.w	r3, r1, r4
 8000576:	ea40 0003 	orr.w	r0, r0, r3
 800057a:	4629      	mov	r1, r5
 800057c:	bd30      	pop	{r4, r5, pc}
 800057e:	fa21 f004 	lsr.w	r0, r1, r4
 8000582:	4629      	mov	r1, r5
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f094 0f00 	teq	r4, #0
 800058a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800058e:	bf06      	itte	eq
 8000590:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000594:	3401      	addeq	r4, #1
 8000596:	3d01      	subne	r5, #1
 8000598:	e74e      	b.n	8000438 <__adddf3+0x8c>
 800059a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800059e:	bf18      	it	ne
 80005a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a4:	d029      	beq.n	80005fa <__adddf3+0x24e>
 80005a6:	ea94 0f05 	teq	r4, r5
 80005aa:	bf08      	it	eq
 80005ac:	ea90 0f02 	teqeq	r0, r2
 80005b0:	d005      	beq.n	80005be <__adddf3+0x212>
 80005b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005b6:	bf04      	itt	eq
 80005b8:	4619      	moveq	r1, r3
 80005ba:	4610      	moveq	r0, r2
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	ea91 0f03 	teq	r1, r3
 80005c2:	bf1e      	ittt	ne
 80005c4:	2100      	movne	r1, #0
 80005c6:	2000      	movne	r0, #0
 80005c8:	bd30      	popne	{r4, r5, pc}
 80005ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ce:	d105      	bne.n	80005dc <__adddf3+0x230>
 80005d0:	0040      	lsls	r0, r0, #1
 80005d2:	4149      	adcs	r1, r1
 80005d4:	bf28      	it	cs
 80005d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005da:	bd30      	pop	{r4, r5, pc}
 80005dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005e0:	bf3c      	itt	cc
 80005e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005e6:	bd30      	popcc	{r4, r5, pc}
 80005e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005f4:	f04f 0000 	mov.w	r0, #0
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005fe:	bf1a      	itte	ne
 8000600:	4619      	movne	r1, r3
 8000602:	4610      	movne	r0, r2
 8000604:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000608:	bf1c      	itt	ne
 800060a:	460b      	movne	r3, r1
 800060c:	4602      	movne	r2, r0
 800060e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000612:	bf06      	itte	eq
 8000614:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000618:	ea91 0f03 	teqeq	r1, r3
 800061c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	bf00      	nop

08000624 <__aeabi_ui2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000638:	f04f 0500 	mov.w	r5, #0
 800063c:	f04f 0100 	mov.w	r1, #0
 8000640:	e750      	b.n	80004e4 <__adddf3+0x138>
 8000642:	bf00      	nop

08000644 <__aeabi_i2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000658:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800065c:	bf48      	it	mi
 800065e:	4240      	negmi	r0, r0
 8000660:	f04f 0100 	mov.w	r1, #0
 8000664:	e73e      	b.n	80004e4 <__adddf3+0x138>
 8000666:	bf00      	nop

08000668 <__aeabi_f2d>:
 8000668:	0042      	lsls	r2, r0, #1
 800066a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800066e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000672:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000676:	bf1f      	itttt	ne
 8000678:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800067c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000680:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000684:	4770      	bxne	lr
 8000686:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800068a:	bf08      	it	eq
 800068c:	4770      	bxeq	lr
 800068e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000692:	bf04      	itt	eq
 8000694:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000698:	4770      	bxeq	lr
 800069a:	b530      	push	{r4, r5, lr}
 800069c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006a8:	e71c      	b.n	80004e4 <__adddf3+0x138>
 80006aa:	bf00      	nop

080006ac <__aeabi_ul2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f04f 0500 	mov.w	r5, #0
 80006ba:	e00a      	b.n	80006d2 <__aeabi_l2d+0x16>

080006bc <__aeabi_l2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ca:	d502      	bpl.n	80006d2 <__aeabi_l2d+0x16>
 80006cc:	4240      	negs	r0, r0
 80006ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006de:	f43f aed8 	beq.w	8000492 <__adddf3+0xe6>
 80006e2:	f04f 0203 	mov.w	r2, #3
 80006e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ea:	bf18      	it	ne
 80006ec:	3203      	addne	r2, #3
 80006ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f2:	bf18      	it	ne
 80006f4:	3203      	addne	r2, #3
 80006f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fa:	f1c2 0320 	rsb	r3, r2, #32
 80006fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000702:	fa20 f002 	lsr.w	r0, r0, r2
 8000706:	fa01 fe03 	lsl.w	lr, r1, r3
 800070a:	ea40 000e 	orr.w	r0, r0, lr
 800070e:	fa21 f102 	lsr.w	r1, r1, r2
 8000712:	4414      	add	r4, r2
 8000714:	e6bd      	b.n	8000492 <__adddf3+0xe6>
 8000716:	bf00      	nop

08000718 <__aeabi_dmul>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8de 	bleq	80008f4 <__aeabi_dmul+0x1dc>
 8000738:	442c      	add	r4, r5
 800073a:	ea81 0603 	eor.w	r6, r1, r3
 800073e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000742:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000746:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800074a:	bf18      	it	ne
 800074c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000750:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000754:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000758:	d038      	beq.n	80007cc <__aeabi_dmul+0xb4>
 800075a:	fba0 ce02 	umull	ip, lr, r0, r2
 800075e:	f04f 0500 	mov.w	r5, #0
 8000762:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000766:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800076a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800076e:	f04f 0600 	mov.w	r6, #0
 8000772:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000776:	f09c 0f00 	teq	ip, #0
 800077a:	bf18      	it	ne
 800077c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000780:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000784:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000788:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800078c:	d204      	bcs.n	8000798 <__aeabi_dmul+0x80>
 800078e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000792:	416d      	adcs	r5, r5
 8000794:	eb46 0606 	adc.w	r6, r6, r6
 8000798:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800079c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80007a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80007a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80007a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80007ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80007b0:	bf88      	it	hi
 80007b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80007b6:	d81e      	bhi.n	80007f6 <__aeabi_dmul+0xde>
 80007b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80007bc:	bf08      	it	eq
 80007be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80007c2:	f150 0000 	adcs.w	r0, r0, #0
 80007c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80007d0:	ea46 0101 	orr.w	r1, r6, r1
 80007d4:	ea40 0002 	orr.w	r0, r0, r2
 80007d8:	ea81 0103 	eor.w	r1, r1, r3
 80007dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007e0:	bfc2      	ittt	gt
 80007e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007ea:	bd70      	popgt	{r4, r5, r6, pc}
 80007ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80007f0:	f04f 0e00 	mov.w	lr, #0
 80007f4:	3c01      	subs	r4, #1
 80007f6:	f300 80ab 	bgt.w	8000950 <__aeabi_dmul+0x238>
 80007fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80007fe:	bfde      	ittt	le
 8000800:	2000      	movle	r0, #0
 8000802:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000806:	bd70      	pople	{r4, r5, r6, pc}
 8000808:	f1c4 0400 	rsb	r4, r4, #0
 800080c:	3c20      	subs	r4, #32
 800080e:	da35      	bge.n	800087c <__aeabi_dmul+0x164>
 8000810:	340c      	adds	r4, #12
 8000812:	dc1b      	bgt.n	800084c <__aeabi_dmul+0x134>
 8000814:	f104 0414 	add.w	r4, r4, #20
 8000818:	f1c4 0520 	rsb	r5, r4, #32
 800081c:	fa00 f305 	lsl.w	r3, r0, r5
 8000820:	fa20 f004 	lsr.w	r0, r0, r4
 8000824:	fa01 f205 	lsl.w	r2, r1, r5
 8000828:	ea40 0002 	orr.w	r0, r0, r2
 800082c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000830:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000838:	fa21 f604 	lsr.w	r6, r1, r4
 800083c:	eb42 0106 	adc.w	r1, r2, r6
 8000840:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000844:	bf08      	it	eq
 8000846:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800084a:	bd70      	pop	{r4, r5, r6, pc}
 800084c:	f1c4 040c 	rsb	r4, r4, #12
 8000850:	f1c4 0520 	rsb	r5, r4, #32
 8000854:	fa00 f304 	lsl.w	r3, r0, r4
 8000858:	fa20 f005 	lsr.w	r0, r0, r5
 800085c:	fa01 f204 	lsl.w	r2, r1, r4
 8000860:	ea40 0002 	orr.w	r0, r0, r2
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000868:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800086c:	f141 0100 	adc.w	r1, r1, #0
 8000870:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000874:	bf08      	it	eq
 8000876:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800087a:	bd70      	pop	{r4, r5, r6, pc}
 800087c:	f1c4 0520 	rsb	r5, r4, #32
 8000880:	fa00 f205 	lsl.w	r2, r0, r5
 8000884:	ea4e 0e02 	orr.w	lr, lr, r2
 8000888:	fa20 f304 	lsr.w	r3, r0, r4
 800088c:	fa01 f205 	lsl.w	r2, r1, r5
 8000890:	ea43 0302 	orr.w	r3, r3, r2
 8000894:	fa21 f004 	lsr.w	r0, r1, r4
 8000898:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800089c:	fa21 f204 	lsr.w	r2, r1, r4
 80008a0:	ea20 0002 	bic.w	r0, r0, r2
 80008a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80008a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80008ac:	bf08      	it	eq
 80008ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80008b2:	bd70      	pop	{r4, r5, r6, pc}
 80008b4:	f094 0f00 	teq	r4, #0
 80008b8:	d10f      	bne.n	80008da <__aeabi_dmul+0x1c2>
 80008ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80008be:	0040      	lsls	r0, r0, #1
 80008c0:	eb41 0101 	adc.w	r1, r1, r1
 80008c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008c8:	bf08      	it	eq
 80008ca:	3c01      	subeq	r4, #1
 80008cc:	d0f7      	beq.n	80008be <__aeabi_dmul+0x1a6>
 80008ce:	ea41 0106 	orr.w	r1, r1, r6
 80008d2:	f095 0f00 	teq	r5, #0
 80008d6:	bf18      	it	ne
 80008d8:	4770      	bxne	lr
 80008da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80008de:	0052      	lsls	r2, r2, #1
 80008e0:	eb43 0303 	adc.w	r3, r3, r3
 80008e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80008e8:	bf08      	it	eq
 80008ea:	3d01      	subeq	r5, #1
 80008ec:	d0f7      	beq.n	80008de <__aeabi_dmul+0x1c6>
 80008ee:	ea43 0306 	orr.w	r3, r3, r6
 80008f2:	4770      	bx	lr
 80008f4:	ea94 0f0c 	teq	r4, ip
 80008f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fc:	bf18      	it	ne
 80008fe:	ea95 0f0c 	teqne	r5, ip
 8000902:	d00c      	beq.n	800091e <__aeabi_dmul+0x206>
 8000904:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000908:	bf18      	it	ne
 800090a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090e:	d1d1      	bne.n	80008b4 <__aeabi_dmul+0x19c>
 8000910:	ea81 0103 	eor.w	r1, r1, r3
 8000914:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000918:	f04f 0000 	mov.w	r0, #0
 800091c:	bd70      	pop	{r4, r5, r6, pc}
 800091e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000922:	bf06      	itte	eq
 8000924:	4610      	moveq	r0, r2
 8000926:	4619      	moveq	r1, r3
 8000928:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800092c:	d019      	beq.n	8000962 <__aeabi_dmul+0x24a>
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	d102      	bne.n	800093a <__aeabi_dmul+0x222>
 8000934:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000938:	d113      	bne.n	8000962 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	d105      	bne.n	800094c <__aeabi_dmul+0x234>
 8000940:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000944:	bf1c      	itt	ne
 8000946:	4610      	movne	r0, r2
 8000948:	4619      	movne	r1, r3
 800094a:	d10a      	bne.n	8000962 <__aeabi_dmul+0x24a>
 800094c:	ea81 0103 	eor.w	r1, r1, r3
 8000950:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000954:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000958:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800095c:	f04f 0000 	mov.w	r0, #0
 8000960:	bd70      	pop	{r4, r5, r6, pc}
 8000962:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000966:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800096a:	bd70      	pop	{r4, r5, r6, pc}

0800096c <__aeabi_ddiv>:
 800096c:	b570      	push	{r4, r5, r6, lr}
 800096e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000972:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000976:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800097a:	bf1d      	ittte	ne
 800097c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000980:	ea94 0f0c 	teqne	r4, ip
 8000984:	ea95 0f0c 	teqne	r5, ip
 8000988:	f000 f8a7 	bleq	8000ada <__aeabi_ddiv+0x16e>
 800098c:	eba4 0405 	sub.w	r4, r4, r5
 8000990:	ea81 0e03 	eor.w	lr, r1, r3
 8000994:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000998:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800099c:	f000 8088 	beq.w	8000ab0 <__aeabi_ddiv+0x144>
 80009a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80009a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80009a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80009ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80009b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80009b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80009b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80009bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80009c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80009c4:	429d      	cmp	r5, r3
 80009c6:	bf08      	it	eq
 80009c8:	4296      	cmpeq	r6, r2
 80009ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80009ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80009d2:	d202      	bcs.n	80009da <__aeabi_ddiv+0x6e>
 80009d4:	085b      	lsrs	r3, r3, #1
 80009d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009da:	1ab6      	subs	r6, r6, r2
 80009dc:	eb65 0503 	sbc.w	r5, r5, r3
 80009e0:	085b      	lsrs	r3, r3, #1
 80009e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80009ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80009ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80009f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009f6:	bf22      	ittt	cs
 80009f8:	1ab6      	subcs	r6, r6, r2
 80009fa:	4675      	movcs	r5, lr
 80009fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a00:	085b      	lsrs	r3, r3, #1
 8000a02:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a06:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a0a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a0e:	bf22      	ittt	cs
 8000a10:	1ab6      	subcs	r6, r6, r2
 8000a12:	4675      	movcs	r5, lr
 8000a14:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a18:	085b      	lsrs	r3, r3, #1
 8000a1a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a1e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a22:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a26:	bf22      	ittt	cs
 8000a28:	1ab6      	subcs	r6, r6, r2
 8000a2a:	4675      	movcs	r5, lr
 8000a2c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a30:	085b      	lsrs	r3, r3, #1
 8000a32:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a36:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a3a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a3e:	bf22      	ittt	cs
 8000a40:	1ab6      	subcs	r6, r6, r2
 8000a42:	4675      	movcs	r5, lr
 8000a44:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a48:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a4c:	d018      	beq.n	8000a80 <__aeabi_ddiv+0x114>
 8000a4e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a52:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a56:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a5a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a5e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a62:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a66:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a6a:	d1c0      	bne.n	80009ee <__aeabi_ddiv+0x82>
 8000a6c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a70:	d10b      	bne.n	8000a8a <__aeabi_ddiv+0x11e>
 8000a72:	ea41 0100 	orr.w	r1, r1, r0
 8000a76:	f04f 0000 	mov.w	r0, #0
 8000a7a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000a7e:	e7b6      	b.n	80009ee <__aeabi_ddiv+0x82>
 8000a80:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a84:	bf04      	itt	eq
 8000a86:	4301      	orreq	r1, r0
 8000a88:	2000      	moveq	r0, #0
 8000a8a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000a8e:	bf88      	it	hi
 8000a90:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000a94:	f63f aeaf 	bhi.w	80007f6 <__aeabi_dmul+0xde>
 8000a98:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a9c:	bf04      	itt	eq
 8000a9e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000aa2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000aa6:	f150 0000 	adcs.w	r0, r0, #0
 8000aaa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000aae:	bd70      	pop	{r4, r5, r6, pc}
 8000ab0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000ab4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000ab8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000abc:	bfc2      	ittt	gt
 8000abe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000ac2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000ac6:	bd70      	popgt	{r4, r5, r6, pc}
 8000ac8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000acc:	f04f 0e00 	mov.w	lr, #0
 8000ad0:	3c01      	subs	r4, #1
 8000ad2:	e690      	b.n	80007f6 <__aeabi_dmul+0xde>
 8000ad4:	ea45 0e06 	orr.w	lr, r5, r6
 8000ad8:	e68d      	b.n	80007f6 <__aeabi_dmul+0xde>
 8000ada:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000ade:	ea94 0f0c 	teq	r4, ip
 8000ae2:	bf08      	it	eq
 8000ae4:	ea95 0f0c 	teqeq	r5, ip
 8000ae8:	f43f af3b 	beq.w	8000962 <__aeabi_dmul+0x24a>
 8000aec:	ea94 0f0c 	teq	r4, ip
 8000af0:	d10a      	bne.n	8000b08 <__aeabi_ddiv+0x19c>
 8000af2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000af6:	f47f af34 	bne.w	8000962 <__aeabi_dmul+0x24a>
 8000afa:	ea95 0f0c 	teq	r5, ip
 8000afe:	f47f af25 	bne.w	800094c <__aeabi_dmul+0x234>
 8000b02:	4610      	mov	r0, r2
 8000b04:	4619      	mov	r1, r3
 8000b06:	e72c      	b.n	8000962 <__aeabi_dmul+0x24a>
 8000b08:	ea95 0f0c 	teq	r5, ip
 8000b0c:	d106      	bne.n	8000b1c <__aeabi_ddiv+0x1b0>
 8000b0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000b12:	f43f aefd 	beq.w	8000910 <__aeabi_dmul+0x1f8>
 8000b16:	4610      	mov	r0, r2
 8000b18:	4619      	mov	r1, r3
 8000b1a:	e722      	b.n	8000962 <__aeabi_dmul+0x24a>
 8000b1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b20:	bf18      	it	ne
 8000b22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b26:	f47f aec5 	bne.w	80008b4 <__aeabi_dmul+0x19c>
 8000b2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b2e:	f47f af0d 	bne.w	800094c <__aeabi_dmul+0x234>
 8000b32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b36:	f47f aeeb 	bne.w	8000910 <__aeabi_dmul+0x1f8>
 8000b3a:	e712      	b.n	8000962 <__aeabi_dmul+0x24a>

08000b3c <__gedf2>:
 8000b3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000b40:	e006      	b.n	8000b50 <__cmpdf2+0x4>
 8000b42:	bf00      	nop

08000b44 <__ledf2>:
 8000b44:	f04f 0c01 	mov.w	ip, #1
 8000b48:	e002      	b.n	8000b50 <__cmpdf2+0x4>
 8000b4a:	bf00      	nop

08000b4c <__cmpdf2>:
 8000b4c:	f04f 0c01 	mov.w	ip, #1
 8000b50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	bf18      	it	ne
 8000b62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b66:	d01b      	beq.n	8000ba0 <__cmpdf2+0x54>
 8000b68:	b001      	add	sp, #4
 8000b6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b6e:	bf0c      	ite	eq
 8000b70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b74:	ea91 0f03 	teqne	r1, r3
 8000b78:	bf02      	ittt	eq
 8000b7a:	ea90 0f02 	teqeq	r0, r2
 8000b7e:	2000      	moveq	r0, #0
 8000b80:	4770      	bxeq	lr
 8000b82:	f110 0f00 	cmn.w	r0, #0
 8000b86:	ea91 0f03 	teq	r1, r3
 8000b8a:	bf58      	it	pl
 8000b8c:	4299      	cmppl	r1, r3
 8000b8e:	bf08      	it	eq
 8000b90:	4290      	cmpeq	r0, r2
 8000b92:	bf2c      	ite	cs
 8000b94:	17d8      	asrcs	r0, r3, #31
 8000b96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b9a:	f040 0001 	orr.w	r0, r0, #1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba8:	d102      	bne.n	8000bb0 <__cmpdf2+0x64>
 8000baa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bae:	d107      	bne.n	8000bc0 <__cmpdf2+0x74>
 8000bb0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb8:	d1d6      	bne.n	8000b68 <__cmpdf2+0x1c>
 8000bba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bbe:	d0d3      	beq.n	8000b68 <__cmpdf2+0x1c>
 8000bc0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_cdrcmple>:
 8000bc8:	4684      	mov	ip, r0
 8000bca:	4610      	mov	r0, r2
 8000bcc:	4662      	mov	r2, ip
 8000bce:	468c      	mov	ip, r1
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4663      	mov	r3, ip
 8000bd4:	e000      	b.n	8000bd8 <__aeabi_cdcmpeq>
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_cdcmpeq>:
 8000bd8:	b501      	push	{r0, lr}
 8000bda:	f7ff ffb7 	bl	8000b4c <__cmpdf2>
 8000bde:	2800      	cmp	r0, #0
 8000be0:	bf48      	it	mi
 8000be2:	f110 0f00 	cmnmi.w	r0, #0
 8000be6:	bd01      	pop	{r0, pc}

08000be8 <__aeabi_dcmpeq>:
 8000be8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bec:	f7ff fff4 	bl	8000bd8 <__aeabi_cdcmpeq>
 8000bf0:	bf0c      	ite	eq
 8000bf2:	2001      	moveq	r0, #1
 8000bf4:	2000      	movne	r0, #0
 8000bf6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bfa:	bf00      	nop

08000bfc <__aeabi_dcmplt>:
 8000bfc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c00:	f7ff ffea 	bl	8000bd8 <__aeabi_cdcmpeq>
 8000c04:	bf34      	ite	cc
 8000c06:	2001      	movcc	r0, #1
 8000c08:	2000      	movcs	r0, #0
 8000c0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c0e:	bf00      	nop

08000c10 <__aeabi_dcmple>:
 8000c10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c14:	f7ff ffe0 	bl	8000bd8 <__aeabi_cdcmpeq>
 8000c18:	bf94      	ite	ls
 8000c1a:	2001      	movls	r0, #1
 8000c1c:	2000      	movhi	r0, #0
 8000c1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c22:	bf00      	nop

08000c24 <__aeabi_dcmpge>:
 8000c24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c28:	f7ff ffce 	bl	8000bc8 <__aeabi_cdrcmple>
 8000c2c:	bf94      	ite	ls
 8000c2e:	2001      	movls	r0, #1
 8000c30:	2000      	movhi	r0, #0
 8000c32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c36:	bf00      	nop

08000c38 <__aeabi_dcmpgt>:
 8000c38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c3c:	f7ff ffc4 	bl	8000bc8 <__aeabi_cdrcmple>
 8000c40:	bf34      	ite	cc
 8000c42:	2001      	movcc	r0, #1
 8000c44:	2000      	movcs	r0, #0
 8000c46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c4a:	bf00      	nop

08000c4c <__aeabi_dcmpun>:
 8000c4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c54:	d102      	bne.n	8000c5c <__aeabi_dcmpun+0x10>
 8000c56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c5a:	d10a      	bne.n	8000c72 <__aeabi_dcmpun+0x26>
 8000c5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c64:	d102      	bne.n	8000c6c <__aeabi_dcmpun+0x20>
 8000c66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c6a:	d102      	bne.n	8000c72 <__aeabi_dcmpun+0x26>
 8000c6c:	f04f 0000 	mov.w	r0, #0
 8000c70:	4770      	bx	lr
 8000c72:	f04f 0001 	mov.w	r0, #1
 8000c76:	4770      	bx	lr

08000c78 <__aeabi_d2iz>:
 8000c78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c80:	d215      	bcs.n	8000cae <__aeabi_d2iz+0x36>
 8000c82:	d511      	bpl.n	8000ca8 <__aeabi_d2iz+0x30>
 8000c84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c8c:	d912      	bls.n	8000cb4 <__aeabi_d2iz+0x3c>
 8000c8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	4240      	negne	r0, r0
 8000ca6:	4770      	bx	lr
 8000ca8:	f04f 0000 	mov.w	r0, #0
 8000cac:	4770      	bx	lr
 8000cae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000cb2:	d105      	bne.n	8000cc0 <__aeabi_d2iz+0x48>
 8000cb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000cb8:	bf08      	it	eq
 8000cba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000cbe:	4770      	bx	lr
 8000cc0:	f04f 0000 	mov.w	r0, #0
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b96a 	b.w	8000fb4 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9d08      	ldr	r5, [sp, #32]
 8000cfe:	460c      	mov	r4, r1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d14e      	bne.n	8000da2 <__udivmoddi4+0xaa>
 8000d04:	4694      	mov	ip, r2
 8000d06:	458c      	cmp	ip, r1
 8000d08:	4686      	mov	lr, r0
 8000d0a:	fab2 f282 	clz	r2, r2
 8000d0e:	d962      	bls.n	8000dd6 <__udivmoddi4+0xde>
 8000d10:	b14a      	cbz	r2, 8000d26 <__udivmoddi4+0x2e>
 8000d12:	f1c2 0320 	rsb	r3, r2, #32
 8000d16:	4091      	lsls	r1, r2
 8000d18:	fa20 f303 	lsr.w	r3, r0, r3
 8000d1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d20:	4319      	orrs	r1, r3
 8000d22:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d2a:	fa1f f68c 	uxth.w	r6, ip
 8000d2e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d32:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d36:	fb07 1114 	mls	r1, r7, r4, r1
 8000d3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3e:	fb04 f106 	mul.w	r1, r4, r6
 8000d42:	4299      	cmp	r1, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x64>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d4e:	f080 8112 	bcs.w	8000f76 <__udivmoddi4+0x27e>
 8000d52:	4299      	cmp	r1, r3
 8000d54:	f240 810f 	bls.w	8000f76 <__udivmoddi4+0x27e>
 8000d58:	3c02      	subs	r4, #2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	1a59      	subs	r1, r3, r1
 8000d5e:	fa1f f38e 	uxth.w	r3, lr
 8000d62:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d66:	fb07 1110 	mls	r1, r7, r0, r1
 8000d6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6e:	fb00 f606 	mul.w	r6, r0, r6
 8000d72:	429e      	cmp	r6, r3
 8000d74:	d90a      	bls.n	8000d8c <__udivmoddi4+0x94>
 8000d76:	eb1c 0303 	adds.w	r3, ip, r3
 8000d7a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d7e:	f080 80fc 	bcs.w	8000f7a <__udivmoddi4+0x282>
 8000d82:	429e      	cmp	r6, r3
 8000d84:	f240 80f9 	bls.w	8000f7a <__udivmoddi4+0x282>
 8000d88:	4463      	add	r3, ip
 8000d8a:	3802      	subs	r0, #2
 8000d8c:	1b9b      	subs	r3, r3, r6
 8000d8e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d92:	2100      	movs	r1, #0
 8000d94:	b11d      	cbz	r5, 8000d9e <__udivmoddi4+0xa6>
 8000d96:	40d3      	lsrs	r3, r2
 8000d98:	2200      	movs	r2, #0
 8000d9a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d905      	bls.n	8000db2 <__udivmoddi4+0xba>
 8000da6:	b10d      	cbz	r5, 8000dac <__udivmoddi4+0xb4>
 8000da8:	e9c5 0100 	strd	r0, r1, [r5]
 8000dac:	2100      	movs	r1, #0
 8000dae:	4608      	mov	r0, r1
 8000db0:	e7f5      	b.n	8000d9e <__udivmoddi4+0xa6>
 8000db2:	fab3 f183 	clz	r1, r3
 8000db6:	2900      	cmp	r1, #0
 8000db8:	d146      	bne.n	8000e48 <__udivmoddi4+0x150>
 8000dba:	42a3      	cmp	r3, r4
 8000dbc:	d302      	bcc.n	8000dc4 <__udivmoddi4+0xcc>
 8000dbe:	4290      	cmp	r0, r2
 8000dc0:	f0c0 80f0 	bcc.w	8000fa4 <__udivmoddi4+0x2ac>
 8000dc4:	1a86      	subs	r6, r0, r2
 8000dc6:	eb64 0303 	sbc.w	r3, r4, r3
 8000dca:	2001      	movs	r0, #1
 8000dcc:	2d00      	cmp	r5, #0
 8000dce:	d0e6      	beq.n	8000d9e <__udivmoddi4+0xa6>
 8000dd0:	e9c5 6300 	strd	r6, r3, [r5]
 8000dd4:	e7e3      	b.n	8000d9e <__udivmoddi4+0xa6>
 8000dd6:	2a00      	cmp	r2, #0
 8000dd8:	f040 8090 	bne.w	8000efc <__udivmoddi4+0x204>
 8000ddc:	eba1 040c 	sub.w	r4, r1, ip
 8000de0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000de4:	fa1f f78c 	uxth.w	r7, ip
 8000de8:	2101      	movs	r1, #1
 8000dea:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000df2:	fb08 4416 	mls	r4, r8, r6, r4
 8000df6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dfa:	fb07 f006 	mul.w	r0, r7, r6
 8000dfe:	4298      	cmp	r0, r3
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0x11c>
 8000e02:	eb1c 0303 	adds.w	r3, ip, r3
 8000e06:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x11a>
 8000e0c:	4298      	cmp	r0, r3
 8000e0e:	f200 80cd 	bhi.w	8000fac <__udivmoddi4+0x2b4>
 8000e12:	4626      	mov	r6, r4
 8000e14:	1a1c      	subs	r4, r3, r0
 8000e16:	fa1f f38e 	uxth.w	r3, lr
 8000e1a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e1e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb00 f707 	mul.w	r7, r0, r7
 8000e2a:	429f      	cmp	r7, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x148>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x146>
 8000e38:	429f      	cmp	r7, r3
 8000e3a:	f200 80b0 	bhi.w	8000f9e <__udivmoddi4+0x2a6>
 8000e3e:	4620      	mov	r0, r4
 8000e40:	1bdb      	subs	r3, r3, r7
 8000e42:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e46:	e7a5      	b.n	8000d94 <__udivmoddi4+0x9c>
 8000e48:	f1c1 0620 	rsb	r6, r1, #32
 8000e4c:	408b      	lsls	r3, r1
 8000e4e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e52:	431f      	orrs	r7, r3
 8000e54:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e58:	fa04 f301 	lsl.w	r3, r4, r1
 8000e5c:	ea43 030c 	orr.w	r3, r3, ip
 8000e60:	40f4      	lsrs	r4, r6
 8000e62:	fa00 f801 	lsl.w	r8, r0, r1
 8000e66:	0c38      	lsrs	r0, r7, #16
 8000e68:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e6c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e70:	fa1f fc87 	uxth.w	ip, r7
 8000e74:	fb00 441e 	mls	r4, r0, lr, r4
 8000e78:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e7c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e80:	45a1      	cmp	r9, r4
 8000e82:	fa02 f201 	lsl.w	r2, r2, r1
 8000e86:	d90a      	bls.n	8000e9e <__udivmoddi4+0x1a6>
 8000e88:	193c      	adds	r4, r7, r4
 8000e8a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e8e:	f080 8084 	bcs.w	8000f9a <__udivmoddi4+0x2a2>
 8000e92:	45a1      	cmp	r9, r4
 8000e94:	f240 8081 	bls.w	8000f9a <__udivmoddi4+0x2a2>
 8000e98:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e9c:	443c      	add	r4, r7
 8000e9e:	eba4 0409 	sub.w	r4, r4, r9
 8000ea2:	fa1f f983 	uxth.w	r9, r3
 8000ea6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000eaa:	fb00 4413 	mls	r4, r0, r3, r4
 8000eae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eb6:	45a4      	cmp	ip, r4
 8000eb8:	d907      	bls.n	8000eca <__udivmoddi4+0x1d2>
 8000eba:	193c      	adds	r4, r7, r4
 8000ebc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ec0:	d267      	bcs.n	8000f92 <__udivmoddi4+0x29a>
 8000ec2:	45a4      	cmp	ip, r4
 8000ec4:	d965      	bls.n	8000f92 <__udivmoddi4+0x29a>
 8000ec6:	3b02      	subs	r3, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ece:	fba0 9302 	umull	r9, r3, r0, r2
 8000ed2:	eba4 040c 	sub.w	r4, r4, ip
 8000ed6:	429c      	cmp	r4, r3
 8000ed8:	46ce      	mov	lr, r9
 8000eda:	469c      	mov	ip, r3
 8000edc:	d351      	bcc.n	8000f82 <__udivmoddi4+0x28a>
 8000ede:	d04e      	beq.n	8000f7e <__udivmoddi4+0x286>
 8000ee0:	b155      	cbz	r5, 8000ef8 <__udivmoddi4+0x200>
 8000ee2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ee6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eea:	fa04 f606 	lsl.w	r6, r4, r6
 8000eee:	40cb      	lsrs	r3, r1
 8000ef0:	431e      	orrs	r6, r3
 8000ef2:	40cc      	lsrs	r4, r1
 8000ef4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ef8:	2100      	movs	r1, #0
 8000efa:	e750      	b.n	8000d9e <__udivmoddi4+0xa6>
 8000efc:	f1c2 0320 	rsb	r3, r2, #32
 8000f00:	fa20 f103 	lsr.w	r1, r0, r3
 8000f04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f08:	fa24 f303 	lsr.w	r3, r4, r3
 8000f0c:	4094      	lsls	r4, r2
 8000f0e:	430c      	orrs	r4, r1
 8000f10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f14:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f18:	fa1f f78c 	uxth.w	r7, ip
 8000f1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f20:	fb08 3110 	mls	r1, r8, r0, r3
 8000f24:	0c23      	lsrs	r3, r4, #16
 8000f26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f2a:	fb00 f107 	mul.w	r1, r0, r7
 8000f2e:	4299      	cmp	r1, r3
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x24c>
 8000f32:	eb1c 0303 	adds.w	r3, ip, r3
 8000f36:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f3a:	d22c      	bcs.n	8000f96 <__udivmoddi4+0x29e>
 8000f3c:	4299      	cmp	r1, r3
 8000f3e:	d92a      	bls.n	8000f96 <__udivmoddi4+0x29e>
 8000f40:	3802      	subs	r0, #2
 8000f42:	4463      	add	r3, ip
 8000f44:	1a5b      	subs	r3, r3, r1
 8000f46:	b2a4      	uxth	r4, r4
 8000f48:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f4c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f54:	fb01 f307 	mul.w	r3, r1, r7
 8000f58:	42a3      	cmp	r3, r4
 8000f5a:	d908      	bls.n	8000f6e <__udivmoddi4+0x276>
 8000f5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f60:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f64:	d213      	bcs.n	8000f8e <__udivmoddi4+0x296>
 8000f66:	42a3      	cmp	r3, r4
 8000f68:	d911      	bls.n	8000f8e <__udivmoddi4+0x296>
 8000f6a:	3902      	subs	r1, #2
 8000f6c:	4464      	add	r4, ip
 8000f6e:	1ae4      	subs	r4, r4, r3
 8000f70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f74:	e739      	b.n	8000dea <__udivmoddi4+0xf2>
 8000f76:	4604      	mov	r4, r0
 8000f78:	e6f0      	b.n	8000d5c <__udivmoddi4+0x64>
 8000f7a:	4608      	mov	r0, r1
 8000f7c:	e706      	b.n	8000d8c <__udivmoddi4+0x94>
 8000f7e:	45c8      	cmp	r8, r9
 8000f80:	d2ae      	bcs.n	8000ee0 <__udivmoddi4+0x1e8>
 8000f82:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f86:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f8a:	3801      	subs	r0, #1
 8000f8c:	e7a8      	b.n	8000ee0 <__udivmoddi4+0x1e8>
 8000f8e:	4631      	mov	r1, r6
 8000f90:	e7ed      	b.n	8000f6e <__udivmoddi4+0x276>
 8000f92:	4603      	mov	r3, r0
 8000f94:	e799      	b.n	8000eca <__udivmoddi4+0x1d2>
 8000f96:	4630      	mov	r0, r6
 8000f98:	e7d4      	b.n	8000f44 <__udivmoddi4+0x24c>
 8000f9a:	46d6      	mov	lr, sl
 8000f9c:	e77f      	b.n	8000e9e <__udivmoddi4+0x1a6>
 8000f9e:	4463      	add	r3, ip
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	e74d      	b.n	8000e40 <__udivmoddi4+0x148>
 8000fa4:	4606      	mov	r6, r0
 8000fa6:	4623      	mov	r3, r4
 8000fa8:	4608      	mov	r0, r1
 8000faa:	e70f      	b.n	8000dcc <__udivmoddi4+0xd4>
 8000fac:	3e02      	subs	r6, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	e730      	b.n	8000e14 <__udivmoddi4+0x11c>
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000fbc:	4b0d      	ldr	r3, [pc, #52]	@ (8000ff4 <MX_CRC_Init+0x3c>)
 8000fbe:	4a0e      	ldr	r2, [pc, #56]	@ (8000ff8 <MX_CRC_Init+0x40>)
 8000fc0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000fc2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff4 <MX_CRC_Init+0x3c>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000fc8:	4b0a      	ldr	r3, [pc, #40]	@ (8000ff4 <MX_CRC_Init+0x3c>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000fce:	4b09      	ldr	r3, [pc, #36]	@ (8000ff4 <MX_CRC_Init+0x3c>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000fd4:	4b07      	ldr	r3, [pc, #28]	@ (8000ff4 <MX_CRC_Init+0x3c>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000fda:	4b06      	ldr	r3, [pc, #24]	@ (8000ff4 <MX_CRC_Init+0x3c>)
 8000fdc:	2201      	movs	r2, #1
 8000fde:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000fe0:	4804      	ldr	r0, [pc, #16]	@ (8000ff4 <MX_CRC_Init+0x3c>)
 8000fe2:	f004 fbed 	bl	80057c0 <HAL_CRC_Init>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000fec:	f001 faea 	bl	80025c4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000ff0:	bf00      	nop
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	20000aa4 	.word	0x20000aa4
 8000ff8:	40023000 	.word	0x40023000

08000ffc <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b085      	sub	sp, #20
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a0a      	ldr	r2, [pc, #40]	@ (8001034 <HAL_CRC_MspInit+0x38>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d10b      	bne.n	8001026 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800100e:	4b0a      	ldr	r3, [pc, #40]	@ (8001038 <HAL_CRC_MspInit+0x3c>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001012:	4a09      	ldr	r2, [pc, #36]	@ (8001038 <HAL_CRC_MspInit+0x3c>)
 8001014:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001018:	6313      	str	r3, [r2, #48]	@ 0x30
 800101a:	4b07      	ldr	r3, [pc, #28]	@ (8001038 <HAL_CRC_MspInit+0x3c>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8001026:	bf00      	nop
 8001028:	3714      	adds	r7, #20
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	40023000 	.word	0x40023000
 8001038:	40023800 	.word	0x40023800

0800103c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001042:	4b14      	ldr	r3, [pc, #80]	@ (8001094 <MX_DMA_Init+0x58>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001046:	4a13      	ldr	r2, [pc, #76]	@ (8001094 <MX_DMA_Init+0x58>)
 8001048:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800104c:	6313      	str	r3, [r2, #48]	@ 0x30
 800104e:	4b11      	ldr	r3, [pc, #68]	@ (8001094 <MX_DMA_Init+0x58>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001052:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001056:	607b      	str	r3, [r7, #4]
 8001058:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800105a:	2200      	movs	r2, #0
 800105c:	2100      	movs	r1, #0
 800105e:	2039      	movs	r0, #57	@ 0x39
 8001060:	f004 fb77 	bl	8005752 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001064:	2039      	movs	r0, #57	@ 0x39
 8001066:	f004 fb90 	bl	800578a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 2, 0);
 800106a:	2200      	movs	r2, #0
 800106c:	2102      	movs	r1, #2
 800106e:	203b      	movs	r0, #59	@ 0x3b
 8001070:	f004 fb6f 	bl	8005752 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001074:	203b      	movs	r0, #59	@ 0x3b
 8001076:	f004 fb88 	bl	800578a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 2, 0);
 800107a:	2200      	movs	r2, #0
 800107c:	2102      	movs	r1, #2
 800107e:	2045      	movs	r0, #69	@ 0x45
 8001080:	f004 fb67 	bl	8005752 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001084:	2045      	movs	r0, #69	@ 0x45
 8001086:	f004 fb80 	bl	800578a <HAL_NVIC_EnableIRQ>

}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40023800 	.word	0x40023800

08001098 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b088      	sub	sp, #32
 800109c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800109e:	1d3b      	adds	r3, r7, #4
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]
 80010aa:	611a      	str	r2, [r3, #16]
 80010ac:	615a      	str	r2, [r3, #20]
 80010ae:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80010b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001130 <MX_FMC_Init+0x98>)
 80010b2:	4a20      	ldr	r2, [pc, #128]	@ (8001134 <MX_FMC_Init+0x9c>)
 80010b4:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80010b6:	4b1e      	ldr	r3, [pc, #120]	@ (8001130 <MX_FMC_Init+0x98>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 80010bc:	4b1c      	ldr	r3, [pc, #112]	@ (8001130 <MX_FMC_Init+0x98>)
 80010be:	2201      	movs	r2, #1
 80010c0:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 80010c2:	4b1b      	ldr	r3, [pc, #108]	@ (8001130 <MX_FMC_Init+0x98>)
 80010c4:	2208      	movs	r2, #8
 80010c6:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80010c8:	4b19      	ldr	r3, [pc, #100]	@ (8001130 <MX_FMC_Init+0x98>)
 80010ca:	2210      	movs	r2, #16
 80010cc:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80010ce:	4b18      	ldr	r3, [pc, #96]	@ (8001130 <MX_FMC_Init+0x98>)
 80010d0:	2240      	movs	r2, #64	@ 0x40
 80010d2:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80010d4:	4b16      	ldr	r3, [pc, #88]	@ (8001130 <MX_FMC_Init+0x98>)
 80010d6:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80010da:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80010dc:	4b14      	ldr	r3, [pc, #80]	@ (8001130 <MX_FMC_Init+0x98>)
 80010de:	2200      	movs	r2, #0
 80010e0:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80010e2:	4b13      	ldr	r3, [pc, #76]	@ (8001130 <MX_FMC_Init+0x98>)
 80010e4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80010e8:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80010ea:	4b11      	ldr	r3, [pc, #68]	@ (8001130 <MX_FMC_Init+0x98>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 80010f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001130 <MX_FMC_Init+0x98>)
 80010f2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80010f6:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80010f8:	2302      	movs	r3, #2
 80010fa:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 6;
 80010fc:	2306      	movs	r3, #6
 80010fe:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001100:	2304      	movs	r3, #4
 8001102:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 6;
 8001104:	2306      	movs	r3, #6
 8001106:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 2;
 8001108:	2302      	movs	r3, #2
 800110a:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 800110c:	2302      	movs	r3, #2
 800110e:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001110:	2302      	movs	r3, #2
 8001112:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001114:	1d3b      	adds	r3, r7, #4
 8001116:	4619      	mov	r1, r3
 8001118:	4805      	ldr	r0, [pc, #20]	@ (8001130 <MX_FMC_Init+0x98>)
 800111a:	f009 f977 	bl	800a40c <HAL_SDRAM_Init>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001124:	f001 fa4e 	bl	80025c4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001128:	bf00      	nop
 800112a:	3720      	adds	r7, #32
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	20000ac8 	.word	0x20000ac8
 8001134:	a0000140 	.word	0xa0000140

08001138 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113e:	1d3b      	adds	r3, r7, #4
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
 800114a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800114c:	4b33      	ldr	r3, [pc, #204]	@ (800121c <HAL_FMC_MspInit+0xe4>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d15e      	bne.n	8001212 <HAL_FMC_MspInit+0xda>
    return;
  }
  FMC_Initialized = 1;
 8001154:	4b31      	ldr	r3, [pc, #196]	@ (800121c <HAL_FMC_MspInit+0xe4>)
 8001156:	2201      	movs	r2, #1
 8001158:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800115a:	4b31      	ldr	r3, [pc, #196]	@ (8001220 <HAL_FMC_MspInit+0xe8>)
 800115c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800115e:	4a30      	ldr	r2, [pc, #192]	@ (8001220 <HAL_FMC_MspInit+0xe8>)
 8001160:	f043 0301 	orr.w	r3, r3, #1
 8001164:	6393      	str	r3, [r2, #56]	@ 0x38
 8001166:	4b2e      	ldr	r3, [pc, #184]	@ (8001220 <HAL_FMC_MspInit+0xe8>)
 8001168:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800116a:	f003 0301 	and.w	r3, r3, #1
 800116e:	603b      	str	r3, [r7, #0]
 8001170:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_2
 8001172:	f248 1337 	movw	r3, #33079	@ 0x8137
 8001176:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001178:	2302      	movs	r3, #2
 800117a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117c:	2300      	movs	r3, #0
 800117e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001180:	2303      	movs	r3, #3
 8001182:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001184:	230c      	movs	r3, #12
 8001186:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001188:	1d3b      	adds	r3, r7, #4
 800118a:	4619      	mov	r1, r3
 800118c:	4825      	ldr	r0, [pc, #148]	@ (8001224 <HAL_FMC_MspInit+0xec>)
 800118e:	f005 f87d 	bl	800628c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 8001192:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8001196:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001198:	2302      	movs	r3, #2
 800119a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a0:	2303      	movs	r3, #3
 80011a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011a4:	230c      	movs	r3, #12
 80011a6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011a8:	1d3b      	adds	r3, r7, #4
 80011aa:	4619      	mov	r1, r3
 80011ac:	481e      	ldr	r0, [pc, #120]	@ (8001228 <HAL_FMC_MspInit+0xf0>)
 80011ae:	f005 f86d 	bl	800628c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80011b2:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80011b6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b8:	2302      	movs	r3, #2
 80011ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011bc:	2300      	movs	r3, #0
 80011be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c0:	2303      	movs	r3, #3
 80011c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011c4:	230c      	movs	r3, #12
 80011c6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011c8:	1d3b      	adds	r3, r7, #4
 80011ca:	4619      	mov	r1, r3
 80011cc:	4817      	ldr	r0, [pc, #92]	@ (800122c <HAL_FMC_MspInit+0xf4>)
 80011ce:	f005 f85d 	bl	800628c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_2;
 80011d2:	232c      	movs	r3, #44	@ 0x2c
 80011d4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d6:	2302      	movs	r3, #2
 80011d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011da:	2300      	movs	r3, #0
 80011dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011de:	2303      	movs	r3, #3
 80011e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011e2:	230c      	movs	r3, #12
 80011e4:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80011e6:	1d3b      	adds	r3, r7, #4
 80011e8:	4619      	mov	r1, r3
 80011ea:	4811      	ldr	r0, [pc, #68]	@ (8001230 <HAL_FMC_MspInit+0xf8>)
 80011ec:	f005 f84e 	bl	800628c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14
 80011f0:	f64f 7380 	movw	r3, #65408	@ 0xff80
 80011f4:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f6:	2302      	movs	r3, #2
 80011f8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fa:	2300      	movs	r3, #0
 80011fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011fe:	2303      	movs	r3, #3
 8001200:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001202:	230c      	movs	r3, #12
 8001204:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001206:	1d3b      	adds	r3, r7, #4
 8001208:	4619      	mov	r1, r3
 800120a:	480a      	ldr	r0, [pc, #40]	@ (8001234 <HAL_FMC_MspInit+0xfc>)
 800120c:	f005 f83e 	bl	800628c <HAL_GPIO_Init>
 8001210:	e000      	b.n	8001214 <HAL_FMC_MspInit+0xdc>
    return;
 8001212:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001214:	3718      	adds	r7, #24
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	20000afc 	.word	0x20000afc
 8001220:	40023800 	.word	0x40023800
 8001224:	40021800 	.word	0x40021800
 8001228:	40020c00 	.word	0x40020c00
 800122c:	40021400 	.word	0x40021400
 8001230:	40021c00 	.word	0x40021c00
 8001234:	40021000 	.word	0x40021000

08001238 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001240:	f7ff ff7a 	bl	8001138 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001244:	bf00      	nop
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}

0800124c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b090      	sub	sp, #64	@ 0x40
 8001250:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001252:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	605a      	str	r2, [r3, #4]
 800125c:	609a      	str	r2, [r3, #8]
 800125e:	60da      	str	r2, [r3, #12]
 8001260:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001262:	4ba6      	ldr	r3, [pc, #664]	@ (80014fc <MX_GPIO_Init+0x2b0>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001266:	4aa5      	ldr	r2, [pc, #660]	@ (80014fc <MX_GPIO_Init+0x2b0>)
 8001268:	f043 0310 	orr.w	r3, r3, #16
 800126c:	6313      	str	r3, [r2, #48]	@ 0x30
 800126e:	4ba3      	ldr	r3, [pc, #652]	@ (80014fc <MX_GPIO_Init+0x2b0>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001272:	f003 0310 	and.w	r3, r3, #16
 8001276:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800127a:	4ba0      	ldr	r3, [pc, #640]	@ (80014fc <MX_GPIO_Init+0x2b0>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127e:	4a9f      	ldr	r2, [pc, #636]	@ (80014fc <MX_GPIO_Init+0x2b0>)
 8001280:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001284:	6313      	str	r3, [r2, #48]	@ 0x30
 8001286:	4b9d      	ldr	r3, [pc, #628]	@ (80014fc <MX_GPIO_Init+0x2b0>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800128e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001292:	4b9a      	ldr	r3, [pc, #616]	@ (80014fc <MX_GPIO_Init+0x2b0>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001296:	4a99      	ldr	r2, [pc, #612]	@ (80014fc <MX_GPIO_Init+0x2b0>)
 8001298:	f043 0302 	orr.w	r3, r3, #2
 800129c:	6313      	str	r3, [r2, #48]	@ 0x30
 800129e:	4b97      	ldr	r3, [pc, #604]	@ (80014fc <MX_GPIO_Init+0x2b0>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a2:	f003 0302 	and.w	r3, r3, #2
 80012a6:	623b      	str	r3, [r7, #32]
 80012a8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012aa:	4b94      	ldr	r3, [pc, #592]	@ (80014fc <MX_GPIO_Init+0x2b0>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ae:	4a93      	ldr	r2, [pc, #588]	@ (80014fc <MX_GPIO_Init+0x2b0>)
 80012b0:	f043 0308 	orr.w	r3, r3, #8
 80012b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012b6:	4b91      	ldr	r3, [pc, #580]	@ (80014fc <MX_GPIO_Init+0x2b0>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ba:	f003 0308 	and.w	r3, r3, #8
 80012be:	61fb      	str	r3, [r7, #28]
 80012c0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012c2:	4b8e      	ldr	r3, [pc, #568]	@ (80014fc <MX_GPIO_Init+0x2b0>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c6:	4a8d      	ldr	r2, [pc, #564]	@ (80014fc <MX_GPIO_Init+0x2b0>)
 80012c8:	f043 0304 	orr.w	r3, r3, #4
 80012cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ce:	4b8b      	ldr	r3, [pc, #556]	@ (80014fc <MX_GPIO_Init+0x2b0>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d2:	f003 0304 	and.w	r3, r3, #4
 80012d6:	61bb      	str	r3, [r7, #24]
 80012d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012da:	4b88      	ldr	r3, [pc, #544]	@ (80014fc <MX_GPIO_Init+0x2b0>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012de:	4a87      	ldr	r2, [pc, #540]	@ (80014fc <MX_GPIO_Init+0x2b0>)
 80012e0:	f043 0301 	orr.w	r3, r3, #1
 80012e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012e6:	4b85      	ldr	r3, [pc, #532]	@ (80014fc <MX_GPIO_Init+0x2b0>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	617b      	str	r3, [r7, #20]
 80012f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80012f2:	4b82      	ldr	r3, [pc, #520]	@ (80014fc <MX_GPIO_Init+0x2b0>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f6:	4a81      	ldr	r2, [pc, #516]	@ (80014fc <MX_GPIO_Init+0x2b0>)
 80012f8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012fe:	4b7f      	ldr	r3, [pc, #508]	@ (80014fc <MX_GPIO_Init+0x2b0>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001302:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001306:	613b      	str	r3, [r7, #16]
 8001308:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800130a:	4b7c      	ldr	r3, [pc, #496]	@ (80014fc <MX_GPIO_Init+0x2b0>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130e:	4a7b      	ldr	r2, [pc, #492]	@ (80014fc <MX_GPIO_Init+0x2b0>)
 8001310:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001314:	6313      	str	r3, [r2, #48]	@ 0x30
 8001316:	4b79      	ldr	r3, [pc, #484]	@ (80014fc <MX_GPIO_Init+0x2b0>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001322:	4b76      	ldr	r3, [pc, #472]	@ (80014fc <MX_GPIO_Init+0x2b0>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001326:	4a75      	ldr	r2, [pc, #468]	@ (80014fc <MX_GPIO_Init+0x2b0>)
 8001328:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800132c:	6313      	str	r3, [r2, #48]	@ 0x30
 800132e:	4b73      	ldr	r3, [pc, #460]	@ (80014fc <MX_GPIO_Init+0x2b0>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001332:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001336:	60bb      	str	r3, [r7, #8]
 8001338:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800133a:	4b70      	ldr	r3, [pc, #448]	@ (80014fc <MX_GPIO_Init+0x2b0>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133e:	4a6f      	ldr	r2, [pc, #444]	@ (80014fc <MX_GPIO_Init+0x2b0>)
 8001340:	f043 0320 	orr.w	r3, r3, #32
 8001344:	6313      	str	r3, [r2, #48]	@ 0x30
 8001346:	4b6d      	ldr	r3, [pc, #436]	@ (80014fc <MX_GPIO_Init+0x2b0>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800134a:	f003 0320 	and.w	r3, r3, #32
 800134e:	607b      	str	r3, [r7, #4]
 8001350:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001352:	4b6a      	ldr	r3, [pc, #424]	@ (80014fc <MX_GPIO_Init+0x2b0>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001356:	4a69      	ldr	r2, [pc, #420]	@ (80014fc <MX_GPIO_Init+0x2b0>)
 8001358:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800135c:	6313      	str	r3, [r2, #48]	@ 0x30
 800135e:	4b67      	ldr	r3, [pc, #412]	@ (80014fc <MX_GPIO_Init+0x2b0>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001362:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001366:	603b      	str	r3, [r7, #0]
 8001368:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CSN_PIN_Pin|CE_PIN_Pin, GPIO_PIN_RESET);
 800136a:	2200      	movs	r2, #0
 800136c:	f44f 4101 	mov.w	r1, #33024	@ 0x8100
 8001370:	4863      	ldr	r0, [pc, #396]	@ (8001500 <MX_GPIO_Init+0x2b4>)
 8001372:	f005 fa5b 	bl	800682c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE2 PE1 PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0;
 8001376:	230f      	movs	r3, #15
 8001378:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800137a:	2303      	movs	r3, #3
 800137c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137e:	2300      	movs	r3, #0
 8001380:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001382:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001386:	4619      	mov	r1, r3
 8001388:	485e      	ldr	r0, [pc, #376]	@ (8001504 <MX_GPIO_Init+0x2b8>)
 800138a:	f004 ff7f 	bl	800628c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG14 PG13 PG11 PG12
                           PG10 PG9 PG7 PG6
                           PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_11|GPIO_PIN_12
 800138e:	f647 63c8 	movw	r3, #32456	@ 0x7ec8
 8001392:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_7|GPIO_PIN_6
                          |GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001394:	2303      	movs	r3, #3
 8001396:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001398:	2300      	movs	r3, #0
 800139a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800139c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80013a0:	4619      	mov	r1, r3
 80013a2:	4859      	ldr	r0, [pc, #356]	@ (8001508 <MX_GPIO_Init+0x2bc>)
 80013a4:	f004 ff72 	bl	800628c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB5 PB4 PB3
                           PB9 PB6 PB13 PB12
                           PB2 PB10 PB1 PB0
                           PB11 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3
 80013a8:	f64f 737f 	movw	r3, #65407	@ 0xff7f
 80013ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_13|GPIO_PIN_12
                          |GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_1|GPIO_PIN_0
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013ae:	2303      	movs	r3, #3
 80013b0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80013ba:	4619      	mov	r1, r3
 80013bc:	4853      	ldr	r0, [pc, #332]	@ (800150c <MX_GPIO_Init+0x2c0>)
 80013be:	f004 ff65 	bl	800628c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD7 PD6 PD5 PD3
                           PD4 PD12 PD13 PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_3
 80013c2:	f643 03f8 	movw	r3, #14584	@ 0x38f8
 80013c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_4|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013c8:	2303      	movs	r3, #3
 80013ca:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013d0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80013d4:	4619      	mov	r1, r3
 80013d6:	484e      	ldr	r0, [pc, #312]	@ (8001510 <MX_GPIO_Init+0x2c4>)
 80013d8:	f004 ff58 	bl	800628c <HAL_GPIO_Init>

  /*Configure GPIO pins : CSN_PIN_Pin CE_PIN_Pin */
  GPIO_InitStruct.Pin = CSN_PIN_Pin|CE_PIN_Pin;
 80013dc:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 80013e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e2:	2301      	movs	r3, #1
 80013e4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e6:	2300      	movs	r3, #0
 80013e8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ea:	2300      	movs	r3, #0
 80013ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80013f2:	4619      	mov	r1, r3
 80013f4:	4842      	ldr	r0, [pc, #264]	@ (8001500 <MX_GPIO_Init+0x2b4>)
 80013f6:	f004 ff49 	bl	800628c <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ13 PJ12 PJ14 PJ15
                           PJ11 PJ8 PJ10 PJ7
                           PJ9 PJ6 PJ4 PJ5
                           PJ3 PJ2 PJ0 PJ1 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15
 80013fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80013fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_7
                          |GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001400:	2303      	movs	r3, #3
 8001402:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001404:	2300      	movs	r3, #0
 8001406:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001408:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800140c:	4619      	mov	r1, r3
 800140e:	4841      	ldr	r0, [pc, #260]	@ (8001514 <MX_GPIO_Init+0x2c8>)
 8001410:	f004 ff3c 	bl	800628c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC11 PC10 PC14 PC15
                           PC9 PC7 PC6 PC3
                           PC0 PC1 PC2 PC4
                           PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15
 8001414:	f64c 63ff 	movw	r3, #52991	@ 0xceff
 8001418:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_9|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_3
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800141a:	2303      	movs	r3, #3
 800141c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001422:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001426:	4619      	mov	r1, r3
 8001428:	483b      	ldr	r0, [pc, #236]	@ (8001518 <MX_GPIO_Init+0x2cc>)
 800142a:	f004 ff2f 	bl	800628c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA12 PA11 PA10 PA1
                           PA0 PA4 PA2 PA6
                           PA5 PA3 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_1
 800142e:	f641 43ff 	movw	r3, #7423	@ 0x1cff
 8001432:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_2|GPIO_PIN_6
                          |GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001434:	2303      	movs	r3, #3
 8001436:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001438:	2300      	movs	r3, #0
 800143a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800143c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001440:	4619      	mov	r1, r3
 8001442:	482f      	ldr	r0, [pc, #188]	@ (8001500 <MX_GPIO_Init+0x2b4>)
 8001444:	f004 ff22 	bl	800628c <HAL_GPIO_Init>

  /*Configure GPIO pins : PI8 PI4 PI5 PI7
                           PI10 PI6 PI12 PI9
                           PI0 PI13 PI15 PI14 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7
 8001448:	f24f 73f1 	movw	r3, #63473	@ 0xf7f1
 800144c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_10|GPIO_PIN_6|GPIO_PIN_12|GPIO_PIN_9
                          |GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800144e:	2303      	movs	r3, #3
 8001450:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001452:	2300      	movs	r3, #0
 8001454:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001456:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800145a:	4619      	mov	r1, r3
 800145c:	482f      	ldr	r0, [pc, #188]	@ (800151c <MX_GPIO_Init+0x2d0>)
 800145e:	f004 ff15 	bl	800628c <HAL_GPIO_Init>

  /*Configure GPIO pins : PK7 PK6 PK5 PK4
                           PK3 PK1 PK2 PK0 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
 8001462:	23ff      	movs	r3, #255	@ 0xff
 8001464:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001466:	2303      	movs	r3, #3
 8001468:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146a:	2300      	movs	r3, #0
 800146c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800146e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001472:	4619      	mov	r1, r3
 8001474:	482a      	ldr	r0, [pc, #168]	@ (8001520 <MX_GPIO_Init+0x2d4>)
 8001476:	f004 ff09 	bl	800628c <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800147a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800147e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001480:	2300      	movs	r3, #0
 8001482:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001488:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800148c:	4619      	mov	r1, r3
 800148e:	4822      	ldr	r0, [pc, #136]	@ (8001518 <MX_GPIO_Init+0x2cc>)
 8001490:	f004 fefc 	bl	800628c <HAL_GPIO_Init>

  /*Configure GPIO pins : PH15 PH13 PH14 PH4
                           PH12 PH7 PH9 PH11
                           PH6 PH8 PH10 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_4
 8001494:	f64f 73d0 	movw	r3, #65488	@ 0xffd0
 8001498:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_12|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_11
                          |GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800149a:	2303      	movs	r3, #3
 800149c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149e:	2300      	movs	r3, #0
 80014a0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80014a2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80014a6:	4619      	mov	r1, r3
 80014a8:	481e      	ldr	r0, [pc, #120]	@ (8001524 <MX_GPIO_Init+0x2d8>)
 80014aa:	f004 feef 	bl	800628c <HAL_GPIO_Init>

  /*Configure GPIO pin : USR_BTN_Pin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 80014ae:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80014b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014b4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80014b8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ba:	2300      	movs	r3, #0
 80014bc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 80014be:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80014c2:	4619      	mov	r1, r3
 80014c4:	4815      	ldr	r0, [pc, #84]	@ (800151c <MX_GPIO_Init+0x2d0>)
 80014c6:	f004 fee1 	bl	800628c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF7 PF6 PF10 PF9
                           PF8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_9
 80014ca:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 80014ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014d0:	2303      	movs	r3, #3
 80014d2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d4:	2300      	movs	r3, #0
 80014d6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014d8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80014dc:	4619      	mov	r1, r3
 80014de:	4812      	ldr	r0, [pc, #72]	@ (8001528 <MX_GPIO_Init+0x2dc>)
 80014e0:	f004 fed4 	bl	800628c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80014e4:	2200      	movs	r2, #0
 80014e6:	2100      	movs	r1, #0
 80014e8:	2028      	movs	r0, #40	@ 0x28
 80014ea:	f004 f932 	bl	8005752 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80014ee:	2028      	movs	r0, #40	@ 0x28
 80014f0:	f004 f94b 	bl	800578a <HAL_NVIC_EnableIRQ>

}
 80014f4:	bf00      	nop
 80014f6:	3740      	adds	r7, #64	@ 0x40
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	40023800 	.word	0x40023800
 8001500:	40020000 	.word	0x40020000
 8001504:	40021000 	.word	0x40021000
 8001508:	40021800 	.word	0x40021800
 800150c:	40020400 	.word	0x40020400
 8001510:	40020c00 	.word	0x40020c00
 8001514:	40022400 	.word	0x40022400
 8001518:	40020800 	.word	0x40020800
 800151c:	40022000 	.word	0x40022000
 8001520:	40022800 	.word	0x40022800
 8001524:	40021c00 	.word	0x40021c00
 8001528:	40021400 	.word	0x40021400

0800152c <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001530:	f3bf 8f4f 	dsb	sy
}
 8001534:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001536:	f3bf 8f6f 	isb	sy
}
 800153a:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800153c:	4b0d      	ldr	r3, [pc, #52]	@ (8001574 <SCB_EnableICache+0x48>)
 800153e:	2200      	movs	r2, #0
 8001540:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001544:	f3bf 8f4f 	dsb	sy
}
 8001548:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800154a:	f3bf 8f6f 	isb	sy
}
 800154e:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001550:	4b08      	ldr	r3, [pc, #32]	@ (8001574 <SCB_EnableICache+0x48>)
 8001552:	695b      	ldr	r3, [r3, #20]
 8001554:	4a07      	ldr	r2, [pc, #28]	@ (8001574 <SCB_EnableICache+0x48>)
 8001556:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800155a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800155c:	f3bf 8f4f 	dsb	sy
}
 8001560:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001562:	f3bf 8f6f 	isb	sy
}
 8001566:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8001568:	bf00      	nop
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	e000ed00 	.word	0xe000ed00

08001578 <SCB_DisableICache>:
/**
  \brief   Disable I-Cache
  \details Turns off I-Cache
  */
__STATIC_INLINE void SCB_DisableICache (void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800157c:	f3bf 8f4f 	dsb	sy
}
 8001580:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001582:	f3bf 8f6f 	isb	sy
}
 8001586:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001588:	4b0a      	ldr	r3, [pc, #40]	@ (80015b4 <SCB_DisableICache+0x3c>)
 800158a:	695b      	ldr	r3, [r3, #20]
 800158c:	4a09      	ldr	r2, [pc, #36]	@ (80015b4 <SCB_DisableICache+0x3c>)
 800158e:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8001592:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001594:	4b07      	ldr	r3, [pc, #28]	@ (80015b4 <SCB_DisableICache+0x3c>)
 8001596:	2200      	movs	r2, #0
 8001598:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800159c:	f3bf 8f4f 	dsb	sy
}
 80015a0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015a2:	f3bf 8f6f 	isb	sy
}
 80015a6:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80015a8:	bf00      	nop
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	e000ed00 	.word	0xe000ed00

080015b8 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b085      	sub	sp, #20
 80015bc:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80015be:	4b1f      	ldr	r3, [pc, #124]	@ (800163c <SCB_EnableDCache+0x84>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80015c6:	f3bf 8f4f 	dsb	sy
}
 80015ca:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80015cc:	4b1b      	ldr	r3, [pc, #108]	@ (800163c <SCB_EnableDCache+0x84>)
 80015ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80015d2:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	0b5b      	lsrs	r3, r3, #13
 80015d8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80015dc:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	08db      	lsrs	r3, r3, #3
 80015e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80015e6:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	015a      	lsls	r2, r3, #5
 80015ec:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 80015f0:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80015f2:	68ba      	ldr	r2, [r7, #8]
 80015f4:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80015f6:	4911      	ldr	r1, [pc, #68]	@ (800163c <SCB_EnableDCache+0x84>)
 80015f8:	4313      	orrs	r3, r2
 80015fa:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	1e5a      	subs	r2, r3, #1
 8001602:	60ba      	str	r2, [r7, #8]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d1ef      	bne.n	80015e8 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	1e5a      	subs	r2, r3, #1
 800160c:	60fa      	str	r2, [r7, #12]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d1e5      	bne.n	80015de <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8001612:	f3bf 8f4f 	dsb	sy
}
 8001616:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001618:	4b08      	ldr	r3, [pc, #32]	@ (800163c <SCB_EnableDCache+0x84>)
 800161a:	695b      	ldr	r3, [r3, #20]
 800161c:	4a07      	ldr	r2, [pc, #28]	@ (800163c <SCB_EnableDCache+0x84>)
 800161e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001622:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001624:	f3bf 8f4f 	dsb	sy
}
 8001628:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800162a:	f3bf 8f6f 	isb	sy
}
 800162e:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8001630:	bf00      	nop
 8001632:	3714      	adds	r7, #20
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr
 800163c:	e000ed00 	.word	0xe000ed00

08001640 <SCB_DisableDCache>:
/**
  \brief   Disable D-Cache
  \details Turns off D-Cache
  */
__STATIC_INLINE void SCB_DisableDCache (void)
{
 8001640:	b480      	push	{r7}
 8001642:	b085      	sub	sp, #20
 8001644:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001646:	4b1f      	ldr	r3, [pc, #124]	@ (80016c4 <SCB_DisableDCache+0x84>)
 8001648:	2200      	movs	r2, #0
 800164a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800164e:	f3bf 8f4f 	dsb	sy
}
 8001652:	bf00      	nop
    __DSB();

    SCB->CCR &= ~(uint32_t)SCB_CCR_DC_Msk;  /* disable D-Cache */
 8001654:	4b1b      	ldr	r3, [pc, #108]	@ (80016c4 <SCB_DisableDCache+0x84>)
 8001656:	695b      	ldr	r3, [r3, #20]
 8001658:	4a1a      	ldr	r2, [pc, #104]	@ (80016c4 <SCB_DisableDCache+0x84>)
 800165a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800165e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001660:	f3bf 8f4f 	dsb	sy
}
 8001664:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001666:	4b17      	ldr	r3, [pc, #92]	@ (80016c4 <SCB_DisableDCache+0x84>)
 8001668:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800166c:	607b      	str	r3, [r7, #4]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	0b5b      	lsrs	r3, r3, #13
 8001672:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001676:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	08db      	lsrs	r3, r3, #3
 800167c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001680:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	015a      	lsls	r2, r3, #5
 8001686:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 800168a:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 800168c:	68ba      	ldr	r2, [r7, #8]
 800168e:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001690:	490c      	ldr	r1, [pc, #48]	@ (80016c4 <SCB_DisableDCache+0x84>)
 8001692:	4313      	orrs	r3, r2
 8001694:	f8c1 3274 	str.w	r3, [r1, #628]	@ 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	1e5a      	subs	r2, r3, #1
 800169c:	60ba      	str	r2, [r7, #8]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d1ef      	bne.n	8001682 <SCB_DisableDCache+0x42>
    } while(sets-- != 0U);
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	1e5a      	subs	r2, r3, #1
 80016a6:	60fa      	str	r2, [r7, #12]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d1e5      	bne.n	8001678 <SCB_DisableDCache+0x38>
  __ASM volatile ("dsb 0xF":::"memory");
 80016ac:	f3bf 8f4f 	dsb	sy
}
 80016b0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80016b2:	f3bf 8f6f 	isb	sy
}
 80016b6:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80016b8:	bf00      	nop
 80016ba:	3714      	adds	r7, #20
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr
 80016c4:	e000ed00 	.word	0xe000ed00

080016c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016c8:	b5b0      	push	{r4, r5, r7, lr}
 80016ca:	f5ad 6d2d 	sub.w	sp, sp, #2768	@ 0xad0
 80016ce:	af1e      	add	r7, sp, #120	@ 0x78
  /* USER CODE END 1 */

  /* Enable the CPU Cache */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80016d0:	f7ff ff2c 	bl	800152c <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80016d4:	f7ff ff70 	bl	80015b8 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016d8:	f003 fede 	bl	8005498 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016dc:	f000 fc06 	bl	8001eec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016e0:	f7ff fdb4 	bl	800124c <MX_GPIO_Init>
  MX_DMA_Init();
 80016e4:	f7ff fcaa 	bl	800103c <MX_DMA_Init>
  MX_SAI1_Init();
 80016e8:	f000 ff72 	bl	80025d0 <MX_SAI1_Init>
  MX_USART1_UART_Init();
 80016ec:	f001 fbac 	bl	8002e48 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 80016f0:	f00c fe08 	bl	800e304 <MX_FATFS_Init>
  MX_SDMMC1_SD_Init();
 80016f4:	f001 f890 	bl	8002818 <MX_SDMMC1_SD_Init>
  MX_CRC_Init();
 80016f8:	f7ff fc5e 	bl	8000fb8 <MX_CRC_Init>
  MX_FMC_Init();
 80016fc:	f7ff fccc 	bl	8001098 <MX_FMC_Init>
  MX_SPI2_Init();
 8001700:	f001 f9b8 	bl	8002a74 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  /* Init */
  printf("SD card init...\r\n");
 8001704:	48cd      	ldr	r0, [pc, #820]	@ (8001a3c <main+0x374>)
 8001706:	f015 fef3 	bl	80174f0 <puts>
  SDCard_InitAndFormat();
 800170a:	f000 fc9d 	bl	8002048 <SDCard_InitAndFormat>
  BSP_SDRAM_Init();
 800170e:	f003 fd0d 	bl	800512c <BSP_SDRAM_Init>
  AI_Init();
 8001712:	f000 fd83 	bl	800221c <AI_Init>

  NRF24_begin(GPIOA, CSN_PIN_Pin, CE_PIN_Pin, hspi2);
 8001716:	4cca      	ldr	r4, [pc, #808]	@ (8001a40 <main+0x378>)
 8001718:	4668      	mov	r0, sp
 800171a:	1d23      	adds	r3, r4, #4
 800171c:	2260      	movs	r2, #96	@ 0x60
 800171e:	4619      	mov	r1, r3
 8001720:	f016 f875 	bl	801780e <memcpy>
 8001724:	6823      	ldr	r3, [r4, #0]
 8001726:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800172a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800172e:	48c5      	ldr	r0, [pc, #788]	@ (8001a44 <main+0x37c>)
 8001730:	f00b faf0 	bl	800cd14 <NRF24_begin>
  nrf24_DebugUART_Init(huart1);
 8001734:	4cc4      	ldr	r4, [pc, #784]	@ (8001a48 <main+0x380>)
 8001736:	4668      	mov	r0, sp
 8001738:	f104 0310 	add.w	r3, r4, #16
 800173c:	2278      	movs	r2, #120	@ 0x78
 800173e:	4619      	mov	r1, r3
 8001740:	f016 f865 	bl	801780e <memcpy>
 8001744:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001748:	f00c fa58 	bl	800dbfc <nrf24_DebugUART_Init>

  /* Set values of arrays to 0 for a clean start */
  memset(waveform, 0, sizeof(waveform));
 800174c:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001750:	2100      	movs	r1, #0
 8001752:	48be      	ldr	r0, [pc, #760]	@ (8001a4c <main+0x384>)
 8001754:	f015 ffcc 	bl	80176f0 <memset>
  memset(stereo_waveform, 0, sizeof(stereo_waveform));
 8001758:	f44f 427a 	mov.w	r2, #64000	@ 0xfa00
 800175c:	2100      	movs	r1, #0
 800175e:	48bc      	ldr	r0, [pc, #752]	@ (8001a50 <main+0x388>)
 8001760:	f015 ffc6 	bl	80176f0 <memset>
  memset(float_waveform, 0, sizeof(float_waveform));
 8001764:	f44f 427a 	mov.w	r2, #64000	@ 0xfa00
 8001768:	2100      	movs	r1, #0
 800176a:	48ba      	ldr	r0, [pc, #744]	@ (8001a54 <main+0x38c>)
 800176c:	f015 ffc0 	bl	80176f0 <memset>
  memset(spectrogram, 0, sizeof(spectrogram));
 8001770:	f64f 12f0 	movw	r2, #63984	@ 0xf9f0
 8001774:	2100      	movs	r1, #0
 8001776:	48b8      	ldr	r0, [pc, #736]	@ (8001a58 <main+0x390>)
 8001778:	f015 ffba 	bl	80176f0 <memset>

  /* Wireless module config */

  /* Good practice : in case we were in receive mode just before */
  NRF24_stopListening();
 800177c:	f00b fbaa 	bl	800ced4 <NRF24_stopListening>
  /* We open the writing pipe (hex address) */
  NRF24_openWritingPipe(TxpipeAddrs);
 8001780:	4bb6      	ldr	r3, [pc, #728]	@ (8001a5c <main+0x394>)
 8001782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001786:	4610      	mov	r0, r2
 8001788:	4619      	mov	r1, r3
 800178a:	f00b fc03 	bl	800cf94 <NRF24_openWritingPipe>
  /* We turn off ack and select a channel 0 - 127 */
  NRF24_setAutoAck(false);
 800178e:	2000      	movs	r0, #0
 8001790:	f00b fc8c 	bl	800d0ac <NRF24_setAutoAck>
  NRF24_setChannel(52);
 8001794:	2034      	movs	r0, #52	@ 0x34
 8001796:	f00b fc3c 	bl	800d012 <NRF24_setChannel>
  /* We set a payload size of 32 bytes   (max) */
  NRF24_setPayloadSize(32);
 800179a:	2020      	movs	r0, #32
 800179c:	f00b fc4e 	bl	800d03c <NRF24_setPayloadSize>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
    {
    	/* We wait for the user button on the Discovery board to be pressed (BLUE BUTTON) */
        check_button_release();
 80017a0:	f000 fc3e 	bl	8002020 <check_button_release>
        printf("Waiting for input to record...\r\n");
 80017a4:	48ae      	ldr	r0, [pc, #696]	@ (8001a60 <main+0x398>)
 80017a6:	f015 fea3 	bl	80174f0 <puts>
        HAL_Delay(1000);
 80017aa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80017ae:	f003 fed1 	bl	8005554 <HAL_Delay>

        SCB_DisableDCache();
 80017b2:	f7ff ff45 	bl	8001640 <SCB_DisableDCache>
        SCB_DisableICache();
 80017b6:	f7ff fedf 	bl	8001578 <SCB_DisableICache>

        /* If the button is pressed, execute main program */
        if (button_pressed == 1)
 80017ba:	4baa      	ldr	r3, [pc, #680]	@ (8001a64 <main+0x39c>)
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d1ed      	bne.n	80017a0 <main+0xd8>
        {
            /* If the program is not already recording... */
            if (AudioState == AUDIO_STATE_IDLE)
 80017c4:	4ba8      	ldr	r3, [pc, #672]	@ (8001a68 <main+0x3a0>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d108      	bne.n	80017de <main+0x116>
            {
                /* Configure the audio recorder: sampling frequency, bits-depth, number of channels */
                AUDIO_REC_Start();
 80017cc:	f00c fa2e 	bl	800dc2c <AUDIO_REC_Start>
            }

            /* While recording, we loop the recording process */
            while (AudioState == AUDIO_STATE_RECORD)
 80017d0:	e005      	b.n	80017de <main+0x116>
            {
                status = AUDIO_REC_Process();
 80017d2:	f00c fab1 	bl	800dd38 <AUDIO_REC_Process>
 80017d6:	4603      	mov	r3, r0
 80017d8:	461a      	mov	r2, r3
 80017da:	4ba4      	ldr	r3, [pc, #656]	@ (8001a6c <main+0x3a4>)
 80017dc:	701a      	strb	r2, [r3, #0]
            while (AudioState == AUDIO_STATE_RECORD)
 80017de:	4ba2      	ldr	r3, [pc, #648]	@ (8001a68 <main+0x3a0>)
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	2b05      	cmp	r3, #5
 80017e4:	d0f5      	beq.n	80017d2 <main+0x10a>
            }

            /* Once we stop recording, we correctly close the .WAV */
            if (AudioState == AUDIO_STATE_STOP)
 80017e6:	4ba0      	ldr	r3, [pc, #640]	@ (8001a68 <main+0x3a0>)
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	2b0a      	cmp	r3, #10
 80017ec:	d108      	bne.n	8001800 <main+0x138>
            {
                status = AUDIO_REC_Process();
 80017ee:	f00c faa3 	bl	800dd38 <AUDIO_REC_Process>
 80017f2:	4603      	mov	r3, r0
 80017f4:	461a      	mov	r2, r3
 80017f6:	4b9d      	ldr	r3, [pc, #628]	@ (8001a6c <main+0x3a4>)
 80017f8:	701a      	strb	r2, [r3, #0]
                printf("Recording stopped.\r\n");
 80017fa:	489d      	ldr	r0, [pc, #628]	@ (8001a70 <main+0x3a8>)
 80017fc:	f015 fe78 	bl	80174f0 <puts>
            }

            /* Audio processing step*/

            	/* We read the .wav file stored in the SD card and assign its content to an array */
				if (read_wav_file("WAVE.WAV", stereo_waveform) != 0) {
 8001800:	4993      	ldr	r1, [pc, #588]	@ (8001a50 <main+0x388>)
 8001802:	489c      	ldr	r0, [pc, #624]	@ (8001a74 <main+0x3ac>)
 8001804:	f000 fc70 	bl	80020e8 <read_wav_file>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d003      	beq.n	8001816 <main+0x14e>
					printf("ERROR : cannot read .wav file\r\n");
 800180e:	489a      	ldr	r0, [pc, #616]	@ (8001a78 <main+0x3b0>)
 8001810:	f015 fe6e 	bl	80174f0 <puts>
					return;
 8001814:	e359      	b.n	8001eca <main+0x802>
				}

				/* Stereo to mono audio transformation */
				for (uint32_t i = 0; i < BUFFER_SIZE; i++) {
 8001816:	2300      	movs	r3, #0
 8001818:	f8c7 3a54 	str.w	r3, [r7, #2644]	@ 0xa54
 800181c:	e01d      	b.n	800185a <main+0x192>
					waveform[i] = (stereo_waveform[2 * i] + stereo_waveform[2 * i + 1]) / 2;  // Moyenne des deux canaux
 800181e:	f8d7 3a54 	ldr.w	r3, [r7, #2644]	@ 0xa54
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	4a8a      	ldr	r2, [pc, #552]	@ (8001a50 <main+0x388>)
 8001826:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800182a:	4619      	mov	r1, r3
 800182c:	f8d7 3a54 	ldr.w	r3, [r7, #2644]	@ 0xa54
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	3301      	adds	r3, #1
 8001834:	4a86      	ldr	r2, [pc, #536]	@ (8001a50 <main+0x388>)
 8001836:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800183a:	440b      	add	r3, r1
 800183c:	2b00      	cmp	r3, #0
 800183e:	da00      	bge.n	8001842 <main+0x17a>
 8001840:	3301      	adds	r3, #1
 8001842:	105b      	asrs	r3, r3, #1
 8001844:	b219      	sxth	r1, r3
 8001846:	4a81      	ldr	r2, [pc, #516]	@ (8001a4c <main+0x384>)
 8001848:	f8d7 3a54 	ldr.w	r3, [r7, #2644]	@ 0xa54
 800184c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				for (uint32_t i = 0; i < BUFFER_SIZE; i++) {
 8001850:	f8d7 3a54 	ldr.w	r3, [r7, #2644]	@ 0xa54
 8001854:	3301      	adds	r3, #1
 8001856:	f8c7 3a54 	str.w	r3, [r7, #2644]	@ 0xa54
 800185a:	f8d7 3a54 	ldr.w	r3, [r7, #2644]	@ 0xa54
 800185e:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8001862:	d3dc      	bcc.n	800181e <main+0x156>
				}


				// -------------------- NORMALIZATION --------------------
				printf("Audio normalization...\r\n");
 8001864:	4885      	ldr	r0, [pc, #532]	@ (8001a7c <main+0x3b4>)
 8001866:	f015 fe43 	bl	80174f0 <puts>

				/* Find min and max */

				float min_val = 32767.0f;
 800186a:	4b85      	ldr	r3, [pc, #532]	@ (8001a80 <main+0x3b8>)
 800186c:	f507 6225 	add.w	r2, r7, #2640	@ 0xa50
 8001870:	6013      	str	r3, [r2, #0]
				float max_val = -32768.0f;
 8001872:	f04f 4347 	mov.w	r3, #3338665984	@ 0xc7000000
 8001876:	f607 224c 	addw	r2, r7, #2636	@ 0xa4c
 800187a:	6013      	str	r3, [r2, #0]

				for (uint32_t i = 0; i < BUFFER_SIZE; i++) {
 800187c:	2300      	movs	r3, #0
 800187e:	f8c7 3a48 	str.w	r3, [r7, #2632]	@ 0xa48
 8001882:	e042      	b.n	800190a <main+0x242>
					if (waveform[i] < min_val) min_val = waveform[i];
 8001884:	4a71      	ldr	r2, [pc, #452]	@ (8001a4c <main+0x384>)
 8001886:	f8d7 3a48 	ldr.w	r3, [r7, #2632]	@ 0xa48
 800188a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800188e:	ee07 3a90 	vmov	s15, r3
 8001892:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001896:	f507 6325 	add.w	r3, r7, #2640	@ 0xa50
 800189a:	ed93 7a00 	vldr	s14, [r3]
 800189e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018a6:	dd0c      	ble.n	80018c2 <main+0x1fa>
 80018a8:	4a68      	ldr	r2, [pc, #416]	@ (8001a4c <main+0x384>)
 80018aa:	f8d7 3a48 	ldr.w	r3, [r7, #2632]	@ 0xa48
 80018ae:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80018b2:	ee07 3a90 	vmov	s15, r3
 80018b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018ba:	f507 6325 	add.w	r3, r7, #2640	@ 0xa50
 80018be:	edc3 7a00 	vstr	s15, [r3]
					if (waveform[i] > max_val) max_val = waveform[i];
 80018c2:	4a62      	ldr	r2, [pc, #392]	@ (8001a4c <main+0x384>)
 80018c4:	f8d7 3a48 	ldr.w	r3, [r7, #2632]	@ 0xa48
 80018c8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80018cc:	ee07 3a90 	vmov	s15, r3
 80018d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018d4:	f607 234c 	addw	r3, r7, #2636	@ 0xa4c
 80018d8:	ed93 7a00 	vldr	s14, [r3]
 80018dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018e4:	d50c      	bpl.n	8001900 <main+0x238>
 80018e6:	4a59      	ldr	r2, [pc, #356]	@ (8001a4c <main+0x384>)
 80018e8:	f8d7 3a48 	ldr.w	r3, [r7, #2632]	@ 0xa48
 80018ec:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80018f0:	ee07 3a90 	vmov	s15, r3
 80018f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018f8:	f607 234c 	addw	r3, r7, #2636	@ 0xa4c
 80018fc:	edc3 7a00 	vstr	s15, [r3]
				for (uint32_t i = 0; i < BUFFER_SIZE; i++) {
 8001900:	f8d7 3a48 	ldr.w	r3, [r7, #2632]	@ 0xa48
 8001904:	3301      	adds	r3, #1
 8001906:	f8c7 3a48 	str.w	r3, [r7, #2632]	@ 0xa48
 800190a:	f8d7 3a48 	ldr.w	r3, [r7, #2632]	@ 0xa48
 800190e:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8001912:	d3b7      	bcc.n	8001884 <main+0x1bc>
				}

				/* Display the found values */
				printf("Min: %.2f, Max: %.2f\n", min_val, max_val);
 8001914:	f507 6325 	add.w	r3, r7, #2640	@ 0xa50
 8001918:	6818      	ldr	r0, [r3, #0]
 800191a:	f7fe fea5 	bl	8000668 <__aeabi_f2d>
 800191e:	4604      	mov	r4, r0
 8001920:	460d      	mov	r5, r1
 8001922:	f607 234c 	addw	r3, r7, #2636	@ 0xa4c
 8001926:	6818      	ldr	r0, [r3, #0]
 8001928:	f7fe fe9e 	bl	8000668 <__aeabi_f2d>
 800192c:	4602      	mov	r2, r0
 800192e:	460b      	mov	r3, r1
 8001930:	e9cd 2300 	strd	r2, r3, [sp]
 8001934:	4622      	mov	r2, r4
 8001936:	462b      	mov	r3, r5
 8001938:	4852      	ldr	r0, [pc, #328]	@ (8001a84 <main+0x3bc>)
 800193a:	f015 fd71 	bl	8017420 <iprintf>

				/* Normalization process */
				float range = max_val - min_val;
 800193e:	f607 234c 	addw	r3, r7, #2636	@ 0xa4c
 8001942:	ed93 7a00 	vldr	s14, [r3]
 8001946:	f507 6325 	add.w	r3, r7, #2640	@ 0xa50
 800194a:	edd3 7a00 	vldr	s15, [r3]
 800194e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001952:	f607 2344 	addw	r3, r7, #2628	@ 0xa44
 8001956:	edc3 7a00 	vstr	s15, [r3]
				if (range == 0) range = 1.0f;  // To not divide by 0
 800195a:	f607 2344 	addw	r3, r7, #2628	@ 0xa44
 800195e:	edd3 7a00 	vldr	s15, [r3]
 8001962:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800196a:	d104      	bne.n	8001976 <main+0x2ae>
 800196c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001970:	f607 2244 	addw	r2, r7, #2628	@ 0xa44
 8001974:	6013      	str	r3, [r2, #0]

				for (uint32_t i = 0; i < BUFFER_SIZE; i++) {
 8001976:	2300      	movs	r3, #0
 8001978:	f8c7 3a40 	str.w	r3, [r7, #2624]	@ 0xa40
 800197c:	e026      	b.n	80019cc <main+0x304>
					float_waveform[i] = 2.0f * (waveform[i] - min_val) / range - 1.0f; // Normalization [-1,1]
 800197e:	4a33      	ldr	r2, [pc, #204]	@ (8001a4c <main+0x384>)
 8001980:	f8d7 3a40 	ldr.w	r3, [r7, #2624]	@ 0xa40
 8001984:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001988:	ee07 3a90 	vmov	s15, r3
 800198c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001990:	f507 6325 	add.w	r3, r7, #2640	@ 0xa50
 8001994:	edd3 7a00 	vldr	s15, [r3]
 8001998:	ee77 7a67 	vsub.f32	s15, s14, s15
 800199c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80019a0:	f607 2344 	addw	r3, r7, #2628	@ 0xa44
 80019a4:	ed93 7a00 	vldr	s14, [r3]
 80019a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019ac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80019b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80019b4:	4a27      	ldr	r2, [pc, #156]	@ (8001a54 <main+0x38c>)
 80019b6:	f8d7 3a40 	ldr.w	r3, [r7, #2624]	@ 0xa40
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	4413      	add	r3, r2
 80019be:	edc3 7a00 	vstr	s15, [r3]
				for (uint32_t i = 0; i < BUFFER_SIZE; i++) {
 80019c2:	f8d7 3a40 	ldr.w	r3, [r7, #2624]	@ 0xa40
 80019c6:	3301      	adds	r3, #1
 80019c8:	f8c7 3a40 	str.w	r3, [r7, #2624]	@ 0xa40
 80019cc:	f8d7 3a40 	ldr.w	r3, [r7, #2624]	@ 0xa40
 80019d0:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 80019d4:	d3d3      	bcc.n	800197e <main+0x2b6>
				}

				/* Display some values */
				printf("Premières valeurs normalisées : ");
 80019d6:	482c      	ldr	r0, [pc, #176]	@ (8001a88 <main+0x3c0>)
 80019d8:	f015 fd22 	bl	8017420 <iprintf>
				for (uint32_t i = 0; i < 10; i++) {
 80019dc:	2300      	movs	r3, #0
 80019de:	f8c7 3a3c 	str.w	r3, [r7, #2620]	@ 0xa3c
 80019e2:	e012      	b.n	8001a0a <main+0x342>
					printf("%.6f ", float_waveform[i]);
 80019e4:	4a1b      	ldr	r2, [pc, #108]	@ (8001a54 <main+0x38c>)
 80019e6:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	@ 0xa3c
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	4413      	add	r3, r2
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7fe fe39 	bl	8000668 <__aeabi_f2d>
 80019f6:	4602      	mov	r2, r0
 80019f8:	460b      	mov	r3, r1
 80019fa:	4824      	ldr	r0, [pc, #144]	@ (8001a8c <main+0x3c4>)
 80019fc:	f015 fd10 	bl	8017420 <iprintf>
				for (uint32_t i = 0; i < 10; i++) {
 8001a00:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	@ 0xa3c
 8001a04:	3301      	adds	r3, #1
 8001a06:	f8c7 3a3c 	str.w	r3, [r7, #2620]	@ 0xa3c
 8001a0a:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	@ 0xa3c
 8001a0e:	2b09      	cmp	r3, #9
 8001a10:	d9e8      	bls.n	80019e4 <main+0x31c>
				}
				printf("\r\n");
 8001a12:	481f      	ldr	r0, [pc, #124]	@ (8001a90 <main+0x3c8>)
 8001a14:	f015 fd6c 	bl	80174f0 <puts>

				// -------------------- HANNING & FFT --------------------

				/* Hanning window creation */
				static float32_t hanning_window[FFT_SIZE];
				arm_hanning_f32(hanning_window, FFT_SIZE);
 8001a18:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a1c:	481d      	ldr	r0, [pc, #116]	@ (8001a94 <main+0x3cc>)
 8001a1e:	f000 fbb7 	bl	8002190 <arm_hanning_f32>

				for (uint32_t idx = 0; idx < 124; idx++) {
 8001a22:	2300      	movs	r3, #0
 8001a24:	f8c7 3a38 	str.w	r3, [r7, #2616]	@ 0xa38
 8001a28:	e0e9      	b.n	8001bfe <main+0x536>
					float frame[FFT_SIZE];
					float mag[FFT_SIZE / 2 + 1]; // Complex values magnitude
					float sum = 0.0f;
 8001a2a:	f04f 0300 	mov.w	r3, #0
 8001a2e:	f607 2234 	addw	r2, r7, #2612	@ 0xa34
 8001a32:	6013      	str	r3, [r2, #0]

					/* Hanning extraction and application */
					for (uint32_t i = 0; i < FFT_SIZE; i++) {
 8001a34:	2300      	movs	r3, #0
 8001a36:	f8c7 3a30 	str.w	r3, [r7, #2608]	@ 0xa30
 8001a3a:	e066      	b.n	8001b0a <main+0x442>
 8001a3c:	0801a308 	.word	0x0801a308
 8001a40:	20030d94 	.word	0x20030d94
 8001a44:	40020000 	.word	0x40020000
 8001a48:	20030dfc 	.word	0x20030dfc
 8001a4c:	c0000000 	.word	0xc0000000
 8001a50:	20020d48 	.word	0x20020d48
 8001a54:	c0007d00 	.word	0xc0007d00
 8001a58:	c0017700 	.word	0xc0017700
 8001a5c:	20000018 	.word	0x20000018
 8001a60:	0801a31c 	.word	0x0801a31c
 8001a64:	20030760 	.word	0x20030760
 8001a68:	20000b00 	.word	0x20000b00
 8001a6c:	20000b01 	.word	0x20000b01
 8001a70:	0801a33c 	.word	0x0801a33c
 8001a74:	0801a350 	.word	0x0801a350
 8001a78:	0801a35c 	.word	0x0801a35c
 8001a7c:	0801a37c 	.word	0x0801a37c
 8001a80:	46fffe00 	.word	0x46fffe00
 8001a84:	0801a394 	.word	0x0801a394
 8001a88:	0801a3ac 	.word	0x0801a3ac
 8001a8c:	0801a3d0 	.word	0x0801a3d0
 8001a90:	0801a3d8 	.word	0x0801a3d8
 8001a94:	20030768 	.word	0x20030768
						frame[i] = float_waveform[idx * frame_step + i] * hanning_window[i];
 8001a98:	2280      	movs	r2, #128	@ 0x80
 8001a9a:	f8d7 3a38 	ldr.w	r3, [r7, #2616]	@ 0xa38
 8001a9e:	fb03 f202 	mul.w	r2, r3, r2
 8001aa2:	f8d7 3a30 	ldr.w	r3, [r7, #2608]	@ 0xa30
 8001aa6:	4413      	add	r3, r2
 8001aa8:	4ad4      	ldr	r2, [pc, #848]	@ (8001dfc <main+0x734>)
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	4413      	add	r3, r2
 8001aae:	ed93 7a00 	vldr	s14, [r3]
 8001ab2:	4ad3      	ldr	r2, [pc, #844]	@ (8001e00 <main+0x738>)
 8001ab4:	f8d7 3a30 	ldr.w	r3, [r7, #2608]	@ 0xa30
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	4413      	add	r3, r2
 8001abc:	edd3 7a00 	vldr	s15, [r3]
 8001ac0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ac4:	f607 2358 	addw	r3, r7, #2648	@ 0xa58
 8001ac8:	f5a3 6205 	sub.w	r2, r3, #2128	@ 0x850
 8001acc:	f8d7 3a30 	ldr.w	r3, [r7, #2608]	@ 0xa30
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	4413      	add	r3, r2
 8001ad4:	edc3 7a00 	vstr	s15, [r3]
						sum += frame[i];
 8001ad8:	f607 2358 	addw	r3, r7, #2648	@ 0xa58
 8001adc:	f5a3 6205 	sub.w	r2, r3, #2128	@ 0x850
 8001ae0:	f8d7 3a30 	ldr.w	r3, [r7, #2608]	@ 0xa30
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	4413      	add	r3, r2
 8001ae8:	edd3 7a00 	vldr	s15, [r3]
 8001aec:	f607 2334 	addw	r3, r7, #2612	@ 0xa34
 8001af0:	ed93 7a00 	vldr	s14, [r3]
 8001af4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001af8:	f607 2334 	addw	r3, r7, #2612	@ 0xa34
 8001afc:	edc3 7a00 	vstr	s15, [r3]
					for (uint32_t i = 0; i < FFT_SIZE; i++) {
 8001b00:	f8d7 3a30 	ldr.w	r3, [r7, #2608]	@ 0xa30
 8001b04:	3301      	adds	r3, #1
 8001b06:	f8c7 3a30 	str.w	r3, [r7, #2608]	@ 0xa30
 8001b0a:	f8d7 3a30 	ldr.w	r3, [r7, #2608]	@ 0xa30
 8001b0e:	2bff      	cmp	r3, #255	@ 0xff
 8001b10:	d9c2      	bls.n	8001a98 <main+0x3d0>
					}

					/* Suppression of the DC bias */
					float mean = sum / FFT_SIZE;
 8001b12:	f607 2334 	addw	r3, r7, #2612	@ 0xa34
 8001b16:	ed93 7a00 	vldr	s14, [r3]
 8001b1a:	eddf 6aba 	vldr	s13, [pc, #744]	@ 8001e04 <main+0x73c>
 8001b1e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b22:	f607 2308 	addw	r3, r7, #2568	@ 0xa08
 8001b26:	edc3 7a00 	vstr	s15, [r3]
					for (uint32_t i = 0; i < FFT_SIZE; i++) {
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	f8c7 3a2c 	str.w	r3, [r7, #2604]	@ 0xa2c
 8001b30:	e01e      	b.n	8001b70 <main+0x4a8>
						frame[i] -= mean;
 8001b32:	f607 2358 	addw	r3, r7, #2648	@ 0xa58
 8001b36:	f5a3 6205 	sub.w	r2, r3, #2128	@ 0x850
 8001b3a:	f8d7 3a2c 	ldr.w	r3, [r7, #2604]	@ 0xa2c
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	4413      	add	r3, r2
 8001b42:	ed93 7a00 	vldr	s14, [r3]
 8001b46:	f607 2308 	addw	r3, r7, #2568	@ 0xa08
 8001b4a:	edd3 7a00 	vldr	s15, [r3]
 8001b4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b52:	f607 2358 	addw	r3, r7, #2648	@ 0xa58
 8001b56:	f5a3 6205 	sub.w	r2, r3, #2128	@ 0x850
 8001b5a:	f8d7 3a2c 	ldr.w	r3, [r7, #2604]	@ 0xa2c
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	4413      	add	r3, r2
 8001b62:	edc3 7a00 	vstr	s15, [r3]
					for (uint32_t i = 0; i < FFT_SIZE; i++) {
 8001b66:	f8d7 3a2c 	ldr.w	r3, [r7, #2604]	@ 0xa2c
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	f8c7 3a2c 	str.w	r3, [r7, #2604]	@ 0xa2c
 8001b70:	f8d7 3a2c 	ldr.w	r3, [r7, #2604]	@ 0xa2c
 8001b74:	2bff      	cmp	r3, #255	@ 0xff
 8001b76:	d9dc      	bls.n	8001b32 <main+0x46a>
					}

					/* Declare RFFT */
					if (arm_rfft_fast_init_f32(&fft, FFT_SIZE) != ARM_MATH_SUCCESS) {
 8001b78:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b7c:	48a2      	ldr	r0, [pc, #648]	@ (8001e08 <main+0x740>)
 8001b7e:	f010 f997 	bl	8011eb0 <arm_rfft_fast_init_f32>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d004      	beq.n	8001b92 <main+0x4ca>
						printf("Erreur : Échec de l'initialisation de la FFT !\r\n");
 8001b88:	48a0      	ldr	r0, [pc, #640]	@ (8001e0c <main+0x744>)
 8001b8a:	f015 fcb1 	bl	80174f0 <puts>
						Error_Handler();
 8001b8e:	f000 fd19 	bl	80025c4 <Error_Handler>
					}

					/* Compute RFFT */
					float dst[FFT_SIZE];
					arm_rfft_fast_f32(&fft, frame, dst, 0);
 8001b92:	f507 62c1 	add.w	r2, r7, #1544	@ 0x608
 8001b96:	f507 7102 	add.w	r1, r7, #520	@ 0x208
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	489a      	ldr	r0, [pc, #616]	@ (8001e08 <main+0x740>)
 8001b9e:	f010 fa3b 	bl	8012018 <arm_rfft_fast_f32>

					/* Processing of the complex values magnitudes */
					arm_cmplx_mag_f32(dst, mag, FFT_SIZE / 2 + 1);
 8001ba2:	1d39      	adds	r1, r7, #4
 8001ba4:	f507 63c1 	add.w	r3, r7, #1544	@ 0x608
 8001ba8:	2281      	movs	r2, #129	@ 0x81
 8001baa:	4618      	mov	r0, r3
 8001bac:	f010 fe98 	bl	80128e0 <arm_cmplx_mag_f32>

					/* Fill the spectrogram array */
					for (uint32_t i = 0; i < FFT_SIZE / 2 + 1; i++) {
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	f8c7 3a28 	str.w	r3, [r7, #2600]	@ 0xa28
 8001bb6:	e019      	b.n	8001bec <main+0x524>
						spectrogram[idx][i] = mag[i];
 8001bb8:	f607 2358 	addw	r3, r7, #2648	@ 0xa58
 8001bbc:	f6a3 2254 	subw	r2, r3, #2644	@ 0xa54
 8001bc0:	f8d7 3a28 	ldr.w	r3, [r7, #2600]	@ 0xa28
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	4413      	add	r3, r2
 8001bc8:	6819      	ldr	r1, [r3, #0]
 8001bca:	4891      	ldr	r0, [pc, #580]	@ (8001e10 <main+0x748>)
 8001bcc:	f8d7 2a38 	ldr.w	r2, [r7, #2616]	@ 0xa38
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	01db      	lsls	r3, r3, #7
 8001bd4:	4413      	add	r3, r2
 8001bd6:	f8d7 2a28 	ldr.w	r2, [r7, #2600]	@ 0xa28
 8001bda:	4413      	add	r3, r2
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	4403      	add	r3, r0
 8001be0:	6019      	str	r1, [r3, #0]
					for (uint32_t i = 0; i < FFT_SIZE / 2 + 1; i++) {
 8001be2:	f8d7 3a28 	ldr.w	r3, [r7, #2600]	@ 0xa28
 8001be6:	3301      	adds	r3, #1
 8001be8:	f8c7 3a28 	str.w	r3, [r7, #2600]	@ 0xa28
 8001bec:	f8d7 3a28 	ldr.w	r3, [r7, #2600]	@ 0xa28
 8001bf0:	2b80      	cmp	r3, #128	@ 0x80
 8001bf2:	d9e1      	bls.n	8001bb8 <main+0x4f0>
				for (uint32_t idx = 0; idx < 124; idx++) {
 8001bf4:	f8d7 3a38 	ldr.w	r3, [r7, #2616]	@ 0xa38
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	f8c7 3a38 	str.w	r3, [r7, #2616]	@ 0xa38
 8001bfe:	f8d7 3a38 	ldr.w	r3, [r7, #2616]	@ 0xa38
 8001c02:	2b7b      	cmp	r3, #123	@ 0x7b
 8001c04:	f67f af11 	bls.w	8001a2a <main+0x362>
//				}

				// -------------------- AI format preparation --------------------

				/* Fit spectrogram into aiInData */
				for (uint32_t i = 0; i < 124; i++) {
 8001c08:	2300      	movs	r3, #0
 8001c0a:	f8c7 3a24 	str.w	r3, [r7, #2596]	@ 0xa24
 8001c0e:	e029      	b.n	8001c64 <main+0x59c>
					for (uint32_t j = 0; j < FFT_SIZE / 2 + 1; j++) {
 8001c10:	2300      	movs	r3, #0
 8001c12:	f8c7 3a20 	str.w	r3, [r7, #2592]	@ 0xa20
 8001c16:	e01c      	b.n	8001c52 <main+0x58a>
						aiInData[i * (FFT_SIZE / 2 + 1) + j] = spectrogram[i][j];
 8001c18:	f8d7 2a24 	ldr.w	r2, [r7, #2596]	@ 0xa24
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	01db      	lsls	r3, r3, #7
 8001c20:	441a      	add	r2, r3
 8001c22:	f8d7 3a20 	ldr.w	r3, [r7, #2592]	@ 0xa20
 8001c26:	18d1      	adds	r1, r2, r3
 8001c28:	4879      	ldr	r0, [pc, #484]	@ (8001e10 <main+0x748>)
 8001c2a:	f8d7 2a24 	ldr.w	r2, [r7, #2596]	@ 0xa24
 8001c2e:	4613      	mov	r3, r2
 8001c30:	01db      	lsls	r3, r3, #7
 8001c32:	4413      	add	r3, r2
 8001c34:	f8d7 2a20 	ldr.w	r2, [r7, #2592]	@ 0xa20
 8001c38:	4413      	add	r3, r2
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	4403      	add	r3, r0
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	4874      	ldr	r0, [pc, #464]	@ (8001e14 <main+0x74c>)
 8001c42:	008b      	lsls	r3, r1, #2
 8001c44:	4403      	add	r3, r0
 8001c46:	601a      	str	r2, [r3, #0]
					for (uint32_t j = 0; j < FFT_SIZE / 2 + 1; j++) {
 8001c48:	f8d7 3a20 	ldr.w	r3, [r7, #2592]	@ 0xa20
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	f8c7 3a20 	str.w	r3, [r7, #2592]	@ 0xa20
 8001c52:	f8d7 3a20 	ldr.w	r3, [r7, #2592]	@ 0xa20
 8001c56:	2b80      	cmp	r3, #128	@ 0x80
 8001c58:	d9de      	bls.n	8001c18 <main+0x550>
				for (uint32_t i = 0; i < 124; i++) {
 8001c5a:	f8d7 3a24 	ldr.w	r3, [r7, #2596]	@ 0xa24
 8001c5e:	3301      	adds	r3, #1
 8001c60:	f8c7 3a24 	str.w	r3, [r7, #2596]	@ 0xa24
 8001c64:	f8d7 3a24 	ldr.w	r3, [r7, #2596]	@ 0xa24
 8001c68:	2b7b      	cmp	r3, #123	@ 0x7b
 8001c6a:	d9d1      	bls.n	8001c10 <main+0x548>
					}
				}

				/* Vérification avant passage au modèle */
				printf("Premières valeurs envoyées au modèle : ");
 8001c6c:	486a      	ldr	r0, [pc, #424]	@ (8001e18 <main+0x750>)
 8001c6e:	f015 fbd7 	bl	8017420 <iprintf>
				for (uint32_t i = 0; i < 10; i++) {
 8001c72:	2300      	movs	r3, #0
 8001c74:	f8c7 3a1c 	str.w	r3, [r7, #2588]	@ 0xa1c
 8001c78:	e012      	b.n	8001ca0 <main+0x5d8>
					printf("%.6f ", aiInData[i]);
 8001c7a:	4a66      	ldr	r2, [pc, #408]	@ (8001e14 <main+0x74c>)
 8001c7c:	f8d7 3a1c 	ldr.w	r3, [r7, #2588]	@ 0xa1c
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	4413      	add	r3, r2
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7fe fcee 	bl	8000668 <__aeabi_f2d>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	460b      	mov	r3, r1
 8001c90:	4862      	ldr	r0, [pc, #392]	@ (8001e1c <main+0x754>)
 8001c92:	f015 fbc5 	bl	8017420 <iprintf>
				for (uint32_t i = 0; i < 10; i++) {
 8001c96:	f8d7 3a1c 	ldr.w	r3, [r7, #2588]	@ 0xa1c
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	f8c7 3a1c 	str.w	r3, [r7, #2588]	@ 0xa1c
 8001ca0:	f8d7 3a1c 	ldr.w	r3, [r7, #2588]	@ 0xa1c
 8001ca4:	2b09      	cmp	r3, #9
 8001ca6:	d9e8      	bls.n	8001c7a <main+0x5b2>
				}
				printf("\r\n");
 8001ca8:	485d      	ldr	r0, [pc, #372]	@ (8001e20 <main+0x758>)
 8001caa:	f015 fc21 	bl	80174f0 <puts>

				// -------------------- INFERENCE --------------------
				printf("Inference...\r\n");
 8001cae:	485d      	ldr	r0, [pc, #372]	@ (8001e24 <main+0x75c>)
 8001cb0:	f015 fc1e 	bl	80174f0 <puts>
				AI_Run(aiInData, aiOutData);
 8001cb4:	495c      	ldr	r1, [pc, #368]	@ (8001e28 <main+0x760>)
 8001cb6:	4857      	ldr	r0, [pc, #348]	@ (8001e14 <main+0x74c>)
 8001cb8:	f000 faec 	bl	8002294 <AI_Run>

				// -------------------- SOFTMAX AND PREDICTION --------------------
				softmax(aiOutData, AI_NETWORK_OUT_1_SIZE);
 8001cbc:	2106      	movs	r1, #6
 8001cbe:	485a      	ldr	r0, [pc, #360]	@ (8001e28 <main+0x760>)
 8001cc0:	f000 fb50 	bl	8002364 <softmax>

				/* Check sum of probabilities */
				float sum_softmax = 0;
 8001cc4:	f04f 0300 	mov.w	r3, #0
 8001cc8:	f607 2218 	addw	r2, r7, #2584	@ 0xa18
 8001ccc:	6013      	str	r3, [r2, #0]
				for (uint32_t i = 0; i < AI_NETWORK_OUT_1_SIZE; i++) {
 8001cce:	2300      	movs	r3, #0
 8001cd0:	f8c7 3a14 	str.w	r3, [r7, #2580]	@ 0xa14
 8001cd4:	e015      	b.n	8001d02 <main+0x63a>
					sum_softmax += aiOutData[i];
 8001cd6:	4a54      	ldr	r2, [pc, #336]	@ (8001e28 <main+0x760>)
 8001cd8:	f8d7 3a14 	ldr.w	r3, [r7, #2580]	@ 0xa14
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	4413      	add	r3, r2
 8001ce0:	edd3 7a00 	vldr	s15, [r3]
 8001ce4:	f607 2318 	addw	r3, r7, #2584	@ 0xa18
 8001ce8:	ed93 7a00 	vldr	s14, [r3]
 8001cec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cf0:	f607 2318 	addw	r3, r7, #2584	@ 0xa18
 8001cf4:	edc3 7a00 	vstr	s15, [r3]
				for (uint32_t i = 0; i < AI_NETWORK_OUT_1_SIZE; i++) {
 8001cf8:	f8d7 3a14 	ldr.w	r3, [r7, #2580]	@ 0xa14
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	f8c7 3a14 	str.w	r3, [r7, #2580]	@ 0xa14
 8001d02:	f8d7 3a14 	ldr.w	r3, [r7, #2580]	@ 0xa14
 8001d06:	2b05      	cmp	r3, #5
 8001d08:	d9e5      	bls.n	8001cd6 <main+0x60e>
				}
				printf("Softmax probability sum : %f\r\n", sum_softmax);
 8001d0a:	f607 2318 	addw	r3, r7, #2584	@ 0xa18
 8001d0e:	6818      	ldr	r0, [r3, #0]
 8001d10:	f7fe fcaa 	bl	8000668 <__aeabi_f2d>
 8001d14:	4602      	mov	r2, r0
 8001d16:	460b      	mov	r3, r1
 8001d18:	4844      	ldr	r0, [pc, #272]	@ (8001e2c <main+0x764>)
 8001d1a:	f015 fb81 	bl	8017420 <iprintf>

				/* Pick the class with the highest probability */
				uint32_t class_idx = argmax(aiOutData, AI_NETWORK_OUT_1_SIZE);
 8001d1e:	2106      	movs	r1, #6
 8001d20:	4841      	ldr	r0, [pc, #260]	@ (8001e28 <main+0x760>)
 8001d22:	f000 faef 	bl	8002304 <argmax>
 8001d26:	f8c7 0a0c 	str.w	r0, [r7, #2572]	@ 0xa0c
				printf("Detected command : %s (Confidence : %.2f%%)\r\n", activities[class_idx], aiOutData[class_idx] * 100);
 8001d2a:	4a41      	ldr	r2, [pc, #260]	@ (8001e30 <main+0x768>)
 8001d2c:	f8d7 3a0c 	ldr.w	r3, [r7, #2572]	@ 0xa0c
 8001d30:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8001d34:	4a3c      	ldr	r2, [pc, #240]	@ (8001e28 <main+0x760>)
 8001d36:	f8d7 3a0c 	ldr.w	r3, [r7, #2572]	@ 0xa0c
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	4413      	add	r3, r2
 8001d3e:	edd3 7a00 	vldr	s15, [r3]
 8001d42:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8001e34 <main+0x76c>
 8001d46:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d4a:	ee17 0a90 	vmov	r0, s15
 8001d4e:	f7fe fc8b 	bl	8000668 <__aeabi_f2d>
 8001d52:	4602      	mov	r2, r0
 8001d54:	460b      	mov	r3, r1
 8001d56:	4621      	mov	r1, r4
 8001d58:	4837      	ldr	r0, [pc, #220]	@ (8001e38 <main+0x770>)
 8001d5a:	f015 fb61 	bl	8017420 <iprintf>

				/* Map the detected word to the correct command */
				const char* command_to_send = NULL;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	f8c7 3a10 	str.w	r3, [r7, #2576]	@ 0xa10

				if (strcmp(activities[class_idx], "down") == 0) {
 8001d64:	4a32      	ldr	r2, [pc, #200]	@ (8001e30 <main+0x768>)
 8001d66:	f8d7 3a0c 	ldr.w	r3, [r7, #2572]	@ 0xa0c
 8001d6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d6e:	4933      	ldr	r1, [pc, #204]	@ (8001e3c <main+0x774>)
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7fe faad 	bl	80002d0 <strcmp>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d106      	bne.n	8001d8a <main+0x6c2>
				    command_to_send = back;
 8001d7c:	4b30      	ldr	r3, [pc, #192]	@ (8001e40 <main+0x778>)
 8001d7e:	f8c7 3a10 	str.w	r3, [r7, #2576]	@ 0xa10
				    button_pressed_back = 0;
 8001d82:	4b30      	ldr	r3, [pc, #192]	@ (8001e44 <main+0x77c>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	701a      	strb	r2, [r3, #0]
 8001d88:	e095      	b.n	8001eb6 <main+0x7ee>
				} else if (strcmp(activities[class_idx], "go") == 0) {
 8001d8a:	4a29      	ldr	r2, [pc, #164]	@ (8001e30 <main+0x768>)
 8001d8c:	f8d7 3a0c 	ldr.w	r3, [r7, #2572]	@ 0xa0c
 8001d90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d94:	492c      	ldr	r1, [pc, #176]	@ (8001e48 <main+0x780>)
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7fe fa9a 	bl	80002d0 <strcmp>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d106      	bne.n	8001db0 <main+0x6e8>
				    command_to_send = go;
 8001da2:	4b2a      	ldr	r3, [pc, #168]	@ (8001e4c <main+0x784>)
 8001da4:	f8c7 3a10 	str.w	r3, [r7, #2576]	@ 0xa10
				    button_pressed_go = 0;
 8001da8:	4b29      	ldr	r3, [pc, #164]	@ (8001e50 <main+0x788>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	701a      	strb	r2, [r3, #0]
 8001dae:	e082      	b.n	8001eb6 <main+0x7ee>
				} else if (strcmp(activities[class_idx], "left") == 0) {
 8001db0:	4a1f      	ldr	r2, [pc, #124]	@ (8001e30 <main+0x768>)
 8001db2:	f8d7 3a0c 	ldr.w	r3, [r7, #2572]	@ 0xa0c
 8001db6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dba:	4926      	ldr	r1, [pc, #152]	@ (8001e54 <main+0x78c>)
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7fe fa87 	bl	80002d0 <strcmp>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d106      	bne.n	8001dd6 <main+0x70e>
				    command_to_send = gauche;
 8001dc8:	4b23      	ldr	r3, [pc, #140]	@ (8001e58 <main+0x790>)
 8001dca:	f8c7 3a10 	str.w	r3, [r7, #2576]	@ 0xa10
				    button_pressed_left = 0;
 8001dce:	4b23      	ldr	r3, [pc, #140]	@ (8001e5c <main+0x794>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	701a      	strb	r2, [r3, #0]
 8001dd4:	e06f      	b.n	8001eb6 <main+0x7ee>
				} else if (strcmp(activities[class_idx], "right") == 0) {
 8001dd6:	4a16      	ldr	r2, [pc, #88]	@ (8001e30 <main+0x768>)
 8001dd8:	f8d7 3a0c 	ldr.w	r3, [r7, #2572]	@ 0xa0c
 8001ddc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001de0:	491f      	ldr	r1, [pc, #124]	@ (8001e60 <main+0x798>)
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7fe fa74 	bl	80002d0 <strcmp>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d13e      	bne.n	8001e6c <main+0x7a4>
				    command_to_send = droite;
 8001dee:	4b1d      	ldr	r3, [pc, #116]	@ (8001e64 <main+0x79c>)
 8001df0:	f8c7 3a10 	str.w	r3, [r7, #2576]	@ 0xa10
				    button_pressed_right = 0;
 8001df4:	4b1c      	ldr	r3, [pc, #112]	@ (8001e68 <main+0x7a0>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	701a      	strb	r2, [r3, #0]
 8001dfa:	e05c      	b.n	8001eb6 <main+0x7ee>
 8001dfc:	c0007d00 	.word	0xc0007d00
 8001e00:	20030768 	.word	0x20030768
 8001e04:	43800000 	.word	0x43800000
 8001e08:	20030748 	.word	0x20030748
 8001e0c:	0801a3dc 	.word	0x0801a3dc
 8001e10:	c0017700 	.word	0xc0017700
 8001e14:	20000d08 	.word	0x20000d08
 8001e18:	0801a410 	.word	0x0801a410
 8001e1c:	0801a3d0 	.word	0x0801a3d0
 8001e20:	0801a3d8 	.word	0x0801a3d8
 8001e24:	0801a43c 	.word	0x0801a43c
 8001e28:	200106f8 	.word	0x200106f8
 8001e2c:	0801a44c 	.word	0x0801a44c
 8001e30:	20000000 	.word	0x20000000
 8001e34:	42c80000 	.word	0x42c80000
 8001e38:	0801a46c 	.word	0x0801a46c
 8001e3c:	0801a2e0 	.word	0x0801a2e0
 8001e40:	200000a0 	.word	0x200000a0
 8001e44:	20030765 	.word	0x20030765
 8001e48:	0801a2e8 	.word	0x0801a2e8
 8001e4c:	20000080 	.word	0x20000080
 8001e50:	20030764 	.word	0x20030764
 8001e54:	0801a2ec 	.word	0x0801a2ec
 8001e58:	20000040 	.word	0x20000040
 8001e5c:	20030762 	.word	0x20030762
 8001e60:	0801a2f4 	.word	0x0801a2f4
 8001e64:	20000020 	.word	0x20000020
 8001e68:	20030761 	.word	0x20030761
				} else if (strcmp(activities[class_idx], "stop") == 0) {
 8001e6c:	4a1a      	ldr	r2, [pc, #104]	@ (8001ed8 <main+0x810>)
 8001e6e:	f8d7 3a0c 	ldr.w	r3, [r7, #2572]	@ 0xa0c
 8001e72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e76:	4919      	ldr	r1, [pc, #100]	@ (8001edc <main+0x814>)
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7fe fa29 	bl	80002d0 <strcmp>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d106      	bne.n	8001e92 <main+0x7ca>
				    command_to_send = stop;
 8001e84:	4b16      	ldr	r3, [pc, #88]	@ (8001ee0 <main+0x818>)
 8001e86:	f8c7 3a10 	str.w	r3, [r7, #2576]	@ 0xa10
				    button_pressed_stop = 0;
 8001e8a:	4b16      	ldr	r3, [pc, #88]	@ (8001ee4 <main+0x81c>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	701a      	strb	r2, [r3, #0]
 8001e90:	e011      	b.n	8001eb6 <main+0x7ee>
				} else if (strcmp(activities[class_idx], "up") == 0) {
 8001e92:	4a11      	ldr	r2, [pc, #68]	@ (8001ed8 <main+0x810>)
 8001e94:	f8d7 3a0c 	ldr.w	r3, [r7, #2572]	@ 0xa0c
 8001e98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e9c:	4912      	ldr	r1, [pc, #72]	@ (8001ee8 <main+0x820>)
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7fe fa16 	bl	80002d0 <strcmp>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d105      	bne.n	8001eb6 <main+0x7ee>
				    command_to_send = stop;
 8001eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8001ee0 <main+0x818>)
 8001eac:	f8c7 3a10 	str.w	r3, [r7, #2576]	@ 0xa10
				    button_pressed_stop = 0;
 8001eb0:	4b0c      	ldr	r3, [pc, #48]	@ (8001ee4 <main+0x81c>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	701a      	strb	r2, [r3, #0]
				}

				/* Send the mapped command */
				if (command_to_send != NULL) {
 8001eb6:	f8d7 3a10 	ldr.w	r3, [r7, #2576]	@ 0xa10
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	f43f ac70 	beq.w	80017a0 <main+0xd8>
				    HAL_GPIO_send_command(command_to_send);
 8001ec0:	f8d7 0a10 	ldr.w	r0, [r7, #2576]	@ 0xa10
 8001ec4:	f000 fabe 	bl	8002444 <HAL_GPIO_send_command>
    {
 8001ec8:	e46a      	b.n	80017a0 <main+0xd8>
					return;
 8001eca:	bf00      	nop

				}
        }

        HAL_Delay(100);  // Small delay for stability
  }
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f607 2758 	addw	r7, r7, #2648	@ 0xa58
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bdb0      	pop	{r4, r5, r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	20000000 	.word	0x20000000
 8001edc:	0801a2fc 	.word	0x0801a2fc
 8001ee0:	20000060 	.word	0x20000060
 8001ee4:	20030763 	.word	0x20030763
 8001ee8:	0801a304 	.word	0x0801a304

08001eec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b094      	sub	sp, #80	@ 0x50
 8001ef0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ef2:	f107 0320 	add.w	r3, r7, #32
 8001ef6:	2230      	movs	r2, #48	@ 0x30
 8001ef8:	2100      	movs	r1, #0
 8001efa:	4618      	mov	r0, r3
 8001efc:	f015 fbf8 	bl	80176f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f00:	f107 030c 	add.w	r3, r7, #12
 8001f04:	2200      	movs	r2, #0
 8001f06:	601a      	str	r2, [r3, #0]
 8001f08:	605a      	str	r2, [r3, #4]
 8001f0a:	609a      	str	r2, [r3, #8]
 8001f0c:	60da      	str	r2, [r3, #12]
 8001f0e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f10:	4b2a      	ldr	r3, [pc, #168]	@ (8001fbc <SystemClock_Config+0xd0>)
 8001f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f14:	4a29      	ldr	r2, [pc, #164]	@ (8001fbc <SystemClock_Config+0xd0>)
 8001f16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f1a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f1c:	4b27      	ldr	r3, [pc, #156]	@ (8001fbc <SystemClock_Config+0xd0>)
 8001f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f24:	60bb      	str	r3, [r7, #8]
 8001f26:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f28:	4b25      	ldr	r3, [pc, #148]	@ (8001fc0 <SystemClock_Config+0xd4>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a24      	ldr	r2, [pc, #144]	@ (8001fc0 <SystemClock_Config+0xd4>)
 8001f2e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001f32:	6013      	str	r3, [r2, #0]
 8001f34:	4b22      	ldr	r3, [pc, #136]	@ (8001fc0 <SystemClock_Config+0xd4>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001f3c:	607b      	str	r3, [r7, #4]
 8001f3e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f40:	2302      	movs	r3, #2
 8001f42:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f44:	2301      	movs	r3, #1
 8001f46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f48:	2310      	movs	r3, #16
 8001f4a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f50:	2300      	movs	r3, #0
 8001f52:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001f54:	2308      	movs	r3, #8
 8001f56:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 200;
 8001f58:	23c8      	movs	r3, #200	@ 0xc8
 8001f5a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001f60:	2308      	movs	r3, #8
 8001f62:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f64:	f107 0320 	add.w	r3, r7, #32
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f005 fabf 	bl	80074ec <HAL_RCC_OscConfig>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001f74:	f000 fb26 	bl	80025c4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001f78:	f005 fa68 	bl	800744c <HAL_PWREx_EnableOverDrive>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001f82:	f000 fb1f 	bl	80025c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f86:	230f      	movs	r3, #15
 8001f88:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001f92:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001f96:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001f98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f9c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001f9e:	f107 030c 	add.w	r3, r7, #12
 8001fa2:	2106      	movs	r1, #6
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f005 fd45 	bl	8007a34 <HAL_RCC_ClockConfig>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001fb0:	f000 fb08 	bl	80025c4 <Error_Handler>
  }
}
 8001fb4:	bf00      	nop
 8001fb6:	3750      	adds	r7, #80	@ 0x50
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	40023800 	.word	0x40023800
 8001fc0:	40007000 	.word	0x40007000

08001fc4 <__io_putchar>:

/* USER CODE BEGIN 4 */

/* Needed to send messages easier to terminal for debugging */
PUTCHAR_PROTOTYPE
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
/* Place your implementation of fputc here */
/* e.g. write a character to the USART2 and Loop until the end
of transmission */
HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 100);
 8001fcc:	1d39      	adds	r1, r7, #4
 8001fce:	2364      	movs	r3, #100	@ 0x64
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	4804      	ldr	r0, [pc, #16]	@ (8001fe4 <__io_putchar+0x20>)
 8001fd4:	f009 fa76 	bl	800b4c4 <HAL_UART_Transmit>
return ch;
 8001fd8:	687b      	ldr	r3, [r7, #4]
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	20030dfc 	.word	0x20030dfc

08001fe8 <HAL_GPIO_EXTI_Callback>:


/* User button interruption and variable change */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	4603      	mov	r3, r0
 8001ff0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);

  if (GPIO_Pin == USR_BTN_Pin && button_pressed == 0)
 8001ff2:	88fb      	ldrh	r3, [r7, #6]
 8001ff4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001ff8:	d10a      	bne.n	8002010 <HAL_GPIO_EXTI_Callback+0x28>
 8001ffa:	4b07      	ldr	r3, [pc, #28]	@ (8002018 <HAL_GPIO_EXTI_Callback+0x30>)
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	2b00      	cmp	r3, #0
 8002002:	d105      	bne.n	8002010 <HAL_GPIO_EXTI_Callback+0x28>
      {
	  	  button_pressed = 1;
 8002004:	4b04      	ldr	r3, [pc, #16]	@ (8002018 <HAL_GPIO_EXTI_Callback+0x30>)
 8002006:	2201      	movs	r2, #1
 8002008:	701a      	strb	r2, [r3, #0]
	  	  printf("Button pressed...\r\n");
 800200a:	4804      	ldr	r0, [pc, #16]	@ (800201c <HAL_GPIO_EXTI_Callback+0x34>)
 800200c:	f015 fa70 	bl	80174f0 <puts>
      }
}
 8002010:	bf00      	nop
 8002012:	3708      	adds	r7, #8
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	20030760 	.word	0x20030760
 800201c:	0801a49c 	.word	0x0801a49c

08002020 <check_button_release>:


/* Used to verify the state of the button */
void check_button_release()
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
    if (HAL_GPIO_ReadPin(GPIOI, USR_BTN_Pin) == GPIO_PIN_RESET) button_pressed = 0;
 8002024:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002028:	4805      	ldr	r0, [pc, #20]	@ (8002040 <check_button_release+0x20>)
 800202a:	f004 fbe7 	bl	80067fc <HAL_GPIO_ReadPin>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d102      	bne.n	800203a <check_button_release+0x1a>
 8002034:	4b03      	ldr	r3, [pc, #12]	@ (8002044 <check_button_release+0x24>)
 8002036:	2200      	movs	r2, #0
 8002038:	701a      	strb	r2, [r3, #0]
}
 800203a:	bf00      	nop
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	40022000 	.word	0x40022000
 8002044:	20030760 	.word	0x20030760

08002048 <SDCard_InitAndFormat>:


/* Used to initialize the SD card */
void SDCard_InitAndFormat(void) {
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af02      	add	r7, sp, #8
    FRESULT res;

    // Mount the file system
    res = f_mount(&SDFatFS, (TCHAR const *)SDPath, 0);
 800204e:	2200      	movs	r2, #0
 8002050:	491e      	ldr	r1, [pc, #120]	@ (80020cc <SDCard_InitAndFormat+0x84>)
 8002052:	481f      	ldr	r0, [pc, #124]	@ (80020d0 <SDCard_InitAndFormat+0x88>)
 8002054:	f00e f8e4 	bl	8010220 <f_mount>
 8002058:	4603      	mov	r3, r0
 800205a:	71fb      	strb	r3, [r7, #7]
    if (res != FR_OK) {
 800205c:	79fb      	ldrb	r3, [r7, #7]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d006      	beq.n	8002070 <SDCard_InitAndFormat+0x28>
        printf("Error: Failed to mount SD card (Code: %d).\r\n", res);
 8002062:	79fb      	ldrb	r3, [r7, #7]
 8002064:	4619      	mov	r1, r3
 8002066:	481b      	ldr	r0, [pc, #108]	@ (80020d4 <SDCard_InitAndFormat+0x8c>)
 8002068:	f015 f9da 	bl	8017420 <iprintf>
        Error_Handler();
 800206c:	f000 faaa 	bl	80025c4 <Error_Handler>
    }

    // Format the SD card
    res = f_mkfs((TCHAR const *)SDPath, FM_ANY, 0, workBuffer_init, sizeof(workBuffer_init));
 8002070:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002074:	9300      	str	r3, [sp, #0]
 8002076:	4b18      	ldr	r3, [pc, #96]	@ (80020d8 <SDCard_InitAndFormat+0x90>)
 8002078:	2200      	movs	r2, #0
 800207a:	2107      	movs	r1, #7
 800207c:	4813      	ldr	r0, [pc, #76]	@ (80020cc <SDCard_InitAndFormat+0x84>)
 800207e:	f00f f835 	bl	80110ec <f_mkfs>
 8002082:	4603      	mov	r3, r0
 8002084:	71fb      	strb	r3, [r7, #7]
    if (res != FR_OK) {
 8002086:	79fb      	ldrb	r3, [r7, #7]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d006      	beq.n	800209a <SDCard_InitAndFormat+0x52>
        printf("Error: Failed to format SD card (Code: %d).\r\n", res);
 800208c:	79fb      	ldrb	r3, [r7, #7]
 800208e:	4619      	mov	r1, r3
 8002090:	4812      	ldr	r0, [pc, #72]	@ (80020dc <SDCard_InitAndFormat+0x94>)
 8002092:	f015 f9c5 	bl	8017420 <iprintf>
        Error_Handler();
 8002096:	f000 fa95 	bl	80025c4 <Error_Handler>
    }

    // Unmount the file system to complete formatting
    res = f_mount(NULL, (TCHAR const *)SDPath, 0);
 800209a:	2200      	movs	r2, #0
 800209c:	490b      	ldr	r1, [pc, #44]	@ (80020cc <SDCard_InitAndFormat+0x84>)
 800209e:	2000      	movs	r0, #0
 80020a0:	f00e f8be 	bl	8010220 <f_mount>
 80020a4:	4603      	mov	r3, r0
 80020a6:	71fb      	strb	r3, [r7, #7]
    if (res != FR_OK) {
 80020a8:	79fb      	ldrb	r3, [r7, #7]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d006      	beq.n	80020bc <SDCard_InitAndFormat+0x74>
        printf("Error: Failed to unmount SD card after formatting (Code: %d).\r\n", res);
 80020ae:	79fb      	ldrb	r3, [r7, #7]
 80020b0:	4619      	mov	r1, r3
 80020b2:	480b      	ldr	r0, [pc, #44]	@ (80020e0 <SDCard_InitAndFormat+0x98>)
 80020b4:	f015 f9b4 	bl	8017420 <iprintf>
        Error_Handler();
 80020b8:	f000 fa84 	bl	80025c4 <Error_Handler>
    }

    printf("SD card initialized and formatted successfully.\r\n");
 80020bc:	4809      	ldr	r0, [pc, #36]	@ (80020e4 <SDCard_InitAndFormat+0x9c>)
 80020be:	f015 fa17 	bl	80174f0 <puts>
}
 80020c2:	bf00      	nop
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	20035d08 	.word	0x20035d08
 80020d0:	20035d0c 	.word	0x20035d0c
 80020d4:	0801a4b0 	.word	0x0801a4b0
 80020d8:	20000b04 	.word	0x20000b04
 80020dc:	0801a4e0 	.word	0x0801a4e0
 80020e0:	0801a510 	.word	0x0801a510
 80020e4:	0801a550 	.word	0x0801a550

080020e8 <read_wav_file>:

/* Used to read the wav file in the SD card and store its content inside an array */
int read_wav_file(const char *filename, int16_t *buffer) {
 80020e8:	b580      	push	{r7, lr}
 80020ea:	f5ad 7d10 	sub.w	sp, sp, #576	@ 0x240
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80020f4:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 80020f8:	6018      	str	r0, [r3, #0]
 80020fa:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80020fe:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8002102:	6019      	str	r1, [r3, #0]
    FIL file;
    UINT bytes_read;

    FRESULT result = f_open(&file, filename, FA_READ);
 8002104:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8002108:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800210c:	f107 000c 	add.w	r0, r7, #12
 8002110:	2201      	movs	r2, #1
 8002112:	6819      	ldr	r1, [r3, #0]
 8002114:	f00e f8ca 	bl	80102ac <f_open>
 8002118:	4603      	mov	r3, r0
 800211a:	f887 323f 	strb.w	r3, [r7, #575]	@ 0x23f

    if (result != FR_OK) {
 800211e:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 8002122:	2b00      	cmp	r3, #0
 8002124:	d002      	beq.n	800212c <read_wav_file+0x44>
        return -1;  // File open error
 8002126:	f04f 33ff 	mov.w	r3, #4294967295
 800212a:	e02a      	b.n	8002182 <read_wav_file+0x9a>
    }

    // Skip WAV header (44 bytes)
    f_lseek(&file, 44);
 800212c:	f107 030c 	add.w	r3, r7, #12
 8002130:	212c      	movs	r1, #44	@ 0x2c
 8002132:	4618      	mov	r0, r3
 8002134:	f00e fdd0 	bl	8010cd8 <f_lseek>

    // Read audio samples into the buffer
    result = f_read(&file, buffer, (BUFFER_SIZE*2) * sizeof(int16_t), &bytes_read);
 8002138:	f107 0308 	add.w	r3, r7, #8
 800213c:	f507 7210 	add.w	r2, r7, #576	@ 0x240
 8002140:	f5a2 7110 	sub.w	r1, r2, #576	@ 0x240
 8002144:	f107 000c 	add.w	r0, r7, #12
 8002148:	f44f 427a 	mov.w	r2, #64000	@ 0xfa00
 800214c:	6809      	ldr	r1, [r1, #0]
 800214e:	f00e fa67 	bl	8010620 <f_read>
 8002152:	4603      	mov	r3, r0
 8002154:	f887 323f 	strb.w	r3, [r7, #575]	@ 0x23f

    if (result != FR_OK) {
 8002158:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 800215c:	2b00      	cmp	r3, #0
 800215e:	d007      	beq.n	8002170 <read_wav_file+0x88>
        f_close(&file);
 8002160:	f107 030c 	add.w	r3, r7, #12
 8002164:	4618      	mov	r0, r3
 8002166:	f00e fd8d 	bl	8010c84 <f_close>
        return -1;  // Read error
 800216a:	f04f 33ff 	mov.w	r3, #4294967295
 800216e:	e008      	b.n	8002182 <read_wav_file+0x9a>
    }

    f_close(&file);
 8002170:	f107 030c 	add.w	r3, r7, #12
 8002174:	4618      	mov	r0, r3
 8002176:	f00e fd85 	bl	8010c84 <f_close>
    printf("file successfully read! \r\n");
 800217a:	4804      	ldr	r0, [pc, #16]	@ (800218c <read_wav_file+0xa4>)
 800217c:	f015 f9b8 	bl	80174f0 <puts>
    return 0;  // Success
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	f507 7710 	add.w	r7, r7, #576	@ 0x240
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	0801a584 	.word	0x0801a584

08002190 <arm_hanning_f32>:

/* Used for signal processing : Hanning window formula */
void arm_hanning_f32(float32_t * pDst, uint32_t blockSize) {
 8002190:	b580      	push	{r7, lr}
 8002192:	b086      	sub	sp, #24
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
   float32_t k = 2.0f / ((float32_t) blockSize);
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	ee07 3a90 	vmov	s15, r3
 80021a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80021a4:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80021a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021ac:	edc7 7a04 	vstr	s15, [r7, #16]
   float32_t w;

   for(uint32_t i=0;i<blockSize;i++)
 80021b0:	2300      	movs	r3, #0
 80021b2:	617b      	str	r3, [r7, #20]
 80021b4:	e027      	b.n	8002206 <arm_hanning_f32+0x76>
   {
     w = PI * i * k;
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	ee07 3a90 	vmov	s15, r3
 80021bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021c0:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8002218 <arm_hanning_f32+0x88>
 80021c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021c8:	ed97 7a04 	vldr	s14, [r7, #16]
 80021cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021d0:	edc7 7a03 	vstr	s15, [r7, #12]
     w = 0.5f * (1.0f - cosf (w));
 80021d4:	ed97 0a03 	vldr	s0, [r7, #12]
 80021d8:	f017 fa32 	bl	8019640 <cosf>
 80021dc:	eef0 7a40 	vmov.f32	s15, s0
 80021e0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80021e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021e8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80021ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021f0:	edc7 7a03 	vstr	s15, [r7, #12]
     pDst[i] = w;
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	4413      	add	r3, r2
 80021fc:	68fa      	ldr	r2, [r7, #12]
 80021fe:	601a      	str	r2, [r3, #0]
   for(uint32_t i=0;i<blockSize;i++)
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	3301      	adds	r3, #1
 8002204:	617b      	str	r3, [r7, #20]
 8002206:	697a      	ldr	r2, [r7, #20]
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	429a      	cmp	r2, r3
 800220c:	d3d3      	bcc.n	80021b6 <arm_hanning_f32+0x26>
   }
}
 800220e:	bf00      	nop
 8002210:	bf00      	nop
 8002212:	3718      	adds	r7, #24
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	40490fdb 	.word	0x40490fdb

0800221c <AI_Init>:

/* Used for initializing the AI model */
static void AI_Init(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
  ai_error err;

  /* Create a local array with the addresses of the activations buffers */
  const ai_handle act_addr[] = { activations };
 8002222:	4b17      	ldr	r3, [pc, #92]	@ (8002280 <AI_Init+0x64>)
 8002224:	603b      	str	r3, [r7, #0]
  /* Create an instance of the model */
  err = ai_network_create_and_init(&network, act_addr, NULL);
 8002226:	463b      	mov	r3, r7
 8002228:	2200      	movs	r2, #0
 800222a:	4619      	mov	r1, r3
 800222c:	4815      	ldr	r0, [pc, #84]	@ (8002284 <AI_Init+0x68>)
 800222e:	f00f fd19 	bl	8011c64 <ai_network_create_and_init>
 8002232:	4603      	mov	r3, r0
 8002234:	607b      	str	r3, [r7, #4]
  if (err.type != AI_ERROR_NONE) {
 8002236:	793b      	ldrb	r3, [r7, #4]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d00a      	beq.n	8002252 <AI_Init+0x36>
    printf("ai_network_create error - type=%d code=%d\r\n", err.type, err.code);
 800223c:	793b      	ldrb	r3, [r7, #4]
 800223e:	4619      	mov	r1, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8002246:	461a      	mov	r2, r3
 8002248:	480f      	ldr	r0, [pc, #60]	@ (8002288 <AI_Init+0x6c>)
 800224a:	f015 f8e9 	bl	8017420 <iprintf>
    Error_Handler();
 800224e:	f000 f9b9 	bl	80025c4 <Error_Handler>
  }
  ai_input = ai_network_inputs_get(network, NULL);
 8002252:	4b0c      	ldr	r3, [pc, #48]	@ (8002284 <AI_Init+0x68>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	2100      	movs	r1, #0
 8002258:	4618      	mov	r0, r3
 800225a:	f00f fd81 	bl	8011d60 <ai_network_inputs_get>
 800225e:	4603      	mov	r3, r0
 8002260:	4a0a      	ldr	r2, [pc, #40]	@ (800228c <AI_Init+0x70>)
 8002262:	6013      	str	r3, [r2, #0]
  ai_output = ai_network_outputs_get(network, NULL);
 8002264:	4b07      	ldr	r3, [pc, #28]	@ (8002284 <AI_Init+0x68>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2100      	movs	r1, #0
 800226a:	4618      	mov	r0, r3
 800226c:	f00f fd92 	bl	8011d94 <ai_network_outputs_get>
 8002270:	4603      	mov	r3, r0
 8002272:	4a07      	ldr	r2, [pc, #28]	@ (8002290 <AI_Init+0x74>)
 8002274:	6013      	str	r3, [r2, #0]
}
 8002276:	bf00      	nop
 8002278:	3708      	adds	r7, #8
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	20010710 	.word	0x20010710
 8002284:	20000d04 	.word	0x20000d04
 8002288:	0801a5a0 	.word	0x0801a5a0
 800228c:	20020d40 	.word	0x20020d40
 8002290:	20020d44 	.word	0x20020d44

08002294 <AI_Run>:

/* Used to send an input to the AI model, and get an answer */
static void AI_Run(float *pIn, float *pOut)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	6039      	str	r1, [r7, #0]
  ai_i32 batch;
  ai_error err;

  /* Update IO handlers with the data payload */
  ai_input[0].data = AI_HANDLE_PTR(pIn);
 800229e:	4b15      	ldr	r3, [pc, #84]	@ (80022f4 <AI_Run+0x60>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	605a      	str	r2, [r3, #4]
  ai_output[0].data = AI_HANDLE_PTR(pOut);
 80022a6:	4b14      	ldr	r3, [pc, #80]	@ (80022f8 <AI_Run+0x64>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	683a      	ldr	r2, [r7, #0]
 80022ac:	605a      	str	r2, [r3, #4]

  batch = ai_network_run(network, ai_input, ai_output);
 80022ae:	4b13      	ldr	r3, [pc, #76]	@ (80022fc <AI_Run+0x68>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a10      	ldr	r2, [pc, #64]	@ (80022f4 <AI_Run+0x60>)
 80022b4:	6811      	ldr	r1, [r2, #0]
 80022b6:	4a10      	ldr	r2, [pc, #64]	@ (80022f8 <AI_Run+0x64>)
 80022b8:	6812      	ldr	r2, [r2, #0]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f00f fdc0 	bl	8011e40 <ai_network_run>
 80022c0:	60f8      	str	r0, [r7, #12]
  if (batch != 1) {
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d011      	beq.n	80022ec <AI_Run+0x58>
    err = ai_network_get_error(network);
 80022c8:	4b0c      	ldr	r3, [pc, #48]	@ (80022fc <AI_Run+0x68>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4618      	mov	r0, r3
 80022ce:	f00f fca7 	bl	8011c20 <ai_network_get_error>
 80022d2:	4603      	mov	r3, r0
 80022d4:	60bb      	str	r3, [r7, #8]
    printf("AI ai_network_run error - type=%d code=%d\r\n", err.type, err.code);
 80022d6:	7a3b      	ldrb	r3, [r7, #8]
 80022d8:	4619      	mov	r1, r3
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80022e0:	461a      	mov	r2, r3
 80022e2:	4807      	ldr	r0, [pc, #28]	@ (8002300 <AI_Run+0x6c>)
 80022e4:	f015 f89c 	bl	8017420 <iprintf>
    Error_Handler();
 80022e8:	f000 f96c 	bl	80025c4 <Error_Handler>
  }
}
 80022ec:	bf00      	nop
 80022ee:	3710      	adds	r7, #16
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	20020d40 	.word	0x20020d40
 80022f8:	20020d44 	.word	0x20020d44
 80022fc:	20000d04 	.word	0x20000d04
 8002300:	0801a5cc 	.word	0x0801a5cc

08002304 <argmax>:

/* Used to pick the highest probability result of the AI model */
static uint32_t argmax(const float * values, uint32_t len)
{
 8002304:	b480      	push	{r7}
 8002306:	b087      	sub	sp, #28
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	6039      	str	r1, [r7, #0]
  float max_value = values[0];
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	617b      	str	r3, [r7, #20]
  uint32_t max_index = 0;
 8002314:	2300      	movs	r3, #0
 8002316:	613b      	str	r3, [r7, #16]
  for (uint32_t i = 1; i < len; i++) {
 8002318:	2301      	movs	r3, #1
 800231a:	60fb      	str	r3, [r7, #12]
 800231c:	e017      	b.n	800234e <argmax+0x4a>
    if (values[i] > max_value) {
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	4413      	add	r3, r2
 8002326:	edd3 7a00 	vldr	s15, [r3]
 800232a:	ed97 7a05 	vldr	s14, [r7, #20]
 800232e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002336:	d507      	bpl.n	8002348 <argmax+0x44>
      max_value = values[i];
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	4413      	add	r3, r2
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	617b      	str	r3, [r7, #20]
      max_index = i;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	613b      	str	r3, [r7, #16]
  for (uint32_t i = 1; i < len; i++) {
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	3301      	adds	r3, #1
 800234c:	60fb      	str	r3, [r7, #12]
 800234e:	68fa      	ldr	r2, [r7, #12]
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	429a      	cmp	r2, r3
 8002354:	d3e3      	bcc.n	800231e <argmax+0x1a>
    }
  }
  return max_index;
 8002356:	693b      	ldr	r3, [r7, #16]
}
 8002358:	4618      	mov	r0, r3
 800235a:	371c      	adds	r7, #28
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <softmax>:

/* Used for probability calculation */
void softmax(float *values, uint32_t len) {
 8002364:	b590      	push	{r4, r7, lr}
 8002366:	b089      	sub	sp, #36	@ 0x24
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
    // Find the maximum value in the logits for numerical stability
    float max_val = values[0];
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	61fb      	str	r3, [r7, #28]
    for (uint32_t i = 1; i < len; i++) {
 8002374:	2301      	movs	r3, #1
 8002376:	61bb      	str	r3, [r7, #24]
 8002378:	e015      	b.n	80023a6 <softmax+0x42>
        if (values[i] > max_val) {
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	4413      	add	r3, r2
 8002382:	edd3 7a00 	vldr	s15, [r3]
 8002386:	ed97 7a07 	vldr	s14, [r7, #28]
 800238a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800238e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002392:	d505      	bpl.n	80023a0 <softmax+0x3c>
            max_val = values[i];
 8002394:	69bb      	ldr	r3, [r7, #24]
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	4413      	add	r3, r2
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	61fb      	str	r3, [r7, #28]
    for (uint32_t i = 1; i < len; i++) {
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	3301      	adds	r3, #1
 80023a4:	61bb      	str	r3, [r7, #24]
 80023a6:	69ba      	ldr	r2, [r7, #24]
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d3e5      	bcc.n	800237a <softmax+0x16>
        }
    }

    // Subtract the max value from all logits to prevent overflow/underflow
    for (uint32_t i = 0; i < len; i++) {
 80023ae:	2300      	movs	r3, #0
 80023b0:	617b      	str	r3, [r7, #20]
 80023b2:	e012      	b.n	80023da <softmax+0x76>
        values[i] -= max_val;
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	4413      	add	r3, r2
 80023bc:	ed93 7a00 	vldr	s14, [r3]
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	4413      	add	r3, r2
 80023c8:	edd7 7a07 	vldr	s15, [r7, #28]
 80023cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023d0:	edc3 7a00 	vstr	s15, [r3]
    for (uint32_t i = 0; i < len; i++) {
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	3301      	adds	r3, #1
 80023d8:	617b      	str	r3, [r7, #20]
 80023da:	697a      	ldr	r2, [r7, #20]
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	429a      	cmp	r2, r3
 80023e0:	d3e8      	bcc.n	80023b4 <softmax+0x50>
    }

    // Compute the sum of exponentiated values
    float sum = 0.0f;
 80023e2:	f04f 0300 	mov.w	r3, #0
 80023e6:	613b      	str	r3, [r7, #16]
    for (uint32_t i = 0; i < len; i++) {
 80023e8:	2300      	movs	r3, #0
 80023ea:	60fb      	str	r3, [r7, #12]
 80023ec:	e020      	b.n	8002430 <softmax+0xcc>
        values[i] = expf(values[i]);  // Exponentiate each value
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	4413      	add	r3, r2
 80023f6:	edd3 7a00 	vldr	s15, [r3]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	18d4      	adds	r4, r2, r3
 8002402:	eeb0 0a67 	vmov.f32	s0, s15
 8002406:	f017 f8c7 	bl	8019598 <expf>
 800240a:	eef0 7a40 	vmov.f32	s15, s0
 800240e:	edc4 7a00 	vstr	s15, [r4]
        sum += values[i];             // Sum the exponentiated values
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	4413      	add	r3, r2
 800241a:	edd3 7a00 	vldr	s15, [r3]
 800241e:	ed97 7a04 	vldr	s14, [r7, #16]
 8002422:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002426:	edc7 7a04 	vstr	s15, [r7, #16]
    for (uint32_t i = 0; i < len; i++) {
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	3301      	adds	r3, #1
 800242e:	60fb      	str	r3, [r7, #12]
 8002430:	68fa      	ldr	r2, [r7, #12]
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	429a      	cmp	r2, r3
 8002436:	d3da      	bcc.n	80023ee <softmax+0x8a>
    }
}
 8002438:	bf00      	nop
 800243a:	bf00      	nop
 800243c:	3724      	adds	r7, #36	@ 0x24
 800243e:	46bd      	mov	sp, r7
 8002440:	bd90      	pop	{r4, r7, pc}
	...

08002444 <HAL_GPIO_send_command>:

/* Used for message transmission */
void HAL_GPIO_send_command(const char* command) // Fonction de transmission des commandes
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
    if (strcmp(command, droite) == 0 && button_pressed_right == 0) {
 800244c:	4951      	ldr	r1, [pc, #324]	@ (8002594 <HAL_GPIO_send_command+0x150>)
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f7fd ff3e 	bl	80002d0 <strcmp>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d118      	bne.n	800248c <HAL_GPIO_send_command+0x48>
 800245a:	4b4f      	ldr	r3, [pc, #316]	@ (8002598 <HAL_GPIO_send_command+0x154>)
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	b2db      	uxtb	r3, r3
 8002460:	2b00      	cmp	r3, #0
 8002462:	d113      	bne.n	800248c <HAL_GPIO_send_command+0x48>
        button_pressed_right = 1;
 8002464:	4b4c      	ldr	r3, [pc, #304]	@ (8002598 <HAL_GPIO_send_command+0x154>)
 8002466:	2201      	movs	r2, #1
 8002468:	701a      	strb	r2, [r3, #0]

		if (NRF24_write(droite, 32) == 1) {
 800246a:	2120      	movs	r1, #32
 800246c:	4849      	ldr	r0, [pc, #292]	@ (8002594 <HAL_GPIO_send_command+0x150>)
 800246e:	f00a fd3d 	bl	800ceec <NRF24_write>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d004      	beq.n	8002482 <HAL_GPIO_send_command+0x3e>
			printf("Transmission success: command %s\r\n", command);
 8002478:	6879      	ldr	r1, [r7, #4]
 800247a:	4848      	ldr	r0, [pc, #288]	@ (800259c <HAL_GPIO_send_command+0x158>)
 800247c:	f014 ffd0 	bl	8017420 <iprintf>
		if (NRF24_write(droite, 32) == 1) {
 8002480:	e085      	b.n	800258e <HAL_GPIO_send_command+0x14a>
		} else {
			printf("Transmission failed for command %s\r\n", command);
 8002482:	6879      	ldr	r1, [r7, #4]
 8002484:	4846      	ldr	r0, [pc, #280]	@ (80025a0 <HAL_GPIO_send_command+0x15c>)
 8002486:	f014 ffcb 	bl	8017420 <iprintf>
		if (NRF24_write(droite, 32) == 1) {
 800248a:	e080      	b.n	800258e <HAL_GPIO_send_command+0x14a>
		}

    } else if (strcmp(command, gauche) == 0 && button_pressed_left == 0) {
 800248c:	4945      	ldr	r1, [pc, #276]	@ (80025a4 <HAL_GPIO_send_command+0x160>)
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f7fd ff1e 	bl	80002d0 <strcmp>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d118      	bne.n	80024cc <HAL_GPIO_send_command+0x88>
 800249a:	4b43      	ldr	r3, [pc, #268]	@ (80025a8 <HAL_GPIO_send_command+0x164>)
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d113      	bne.n	80024cc <HAL_GPIO_send_command+0x88>
        button_pressed_left = 1;
 80024a4:	4b40      	ldr	r3, [pc, #256]	@ (80025a8 <HAL_GPIO_send_command+0x164>)
 80024a6:	2201      	movs	r2, #1
 80024a8:	701a      	strb	r2, [r3, #0]

        // Send the command using NRF24
		if (NRF24_write(gauche, 32) == 1) {
 80024aa:	2120      	movs	r1, #32
 80024ac:	483d      	ldr	r0, [pc, #244]	@ (80025a4 <HAL_GPIO_send_command+0x160>)
 80024ae:	f00a fd1d 	bl	800ceec <NRF24_write>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d004      	beq.n	80024c2 <HAL_GPIO_send_command+0x7e>
			printf("Transmission success: command %s\r\n", command);
 80024b8:	6879      	ldr	r1, [r7, #4]
 80024ba:	4838      	ldr	r0, [pc, #224]	@ (800259c <HAL_GPIO_send_command+0x158>)
 80024bc:	f014 ffb0 	bl	8017420 <iprintf>
		if (NRF24_write(gauche, 32) == 1) {
 80024c0:	e065      	b.n	800258e <HAL_GPIO_send_command+0x14a>
		} else {
			printf("Transmission failed for command %s\r\n", command);
 80024c2:	6879      	ldr	r1, [r7, #4]
 80024c4:	4836      	ldr	r0, [pc, #216]	@ (80025a0 <HAL_GPIO_send_command+0x15c>)
 80024c6:	f014 ffab 	bl	8017420 <iprintf>
		if (NRF24_write(gauche, 32) == 1) {
 80024ca:	e060      	b.n	800258e <HAL_GPIO_send_command+0x14a>
		}

    } else if (strcmp(command, stop) == 0 && button_pressed_stop == 0) {
 80024cc:	4937      	ldr	r1, [pc, #220]	@ (80025ac <HAL_GPIO_send_command+0x168>)
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f7fd fefe 	bl	80002d0 <strcmp>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d118      	bne.n	800250c <HAL_GPIO_send_command+0xc8>
 80024da:	4b35      	ldr	r3, [pc, #212]	@ (80025b0 <HAL_GPIO_send_command+0x16c>)
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d113      	bne.n	800250c <HAL_GPIO_send_command+0xc8>
        button_pressed_stop = 1;
 80024e4:	4b32      	ldr	r3, [pc, #200]	@ (80025b0 <HAL_GPIO_send_command+0x16c>)
 80024e6:	2201      	movs	r2, #1
 80024e8:	701a      	strb	r2, [r3, #0]

		if (NRF24_write(stop, 32) == 1) {
 80024ea:	2120      	movs	r1, #32
 80024ec:	482f      	ldr	r0, [pc, #188]	@ (80025ac <HAL_GPIO_send_command+0x168>)
 80024ee:	f00a fcfd 	bl	800ceec <NRF24_write>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d004      	beq.n	8002502 <HAL_GPIO_send_command+0xbe>
			printf("Transmission success: command %s\r\n", command);
 80024f8:	6879      	ldr	r1, [r7, #4]
 80024fa:	4828      	ldr	r0, [pc, #160]	@ (800259c <HAL_GPIO_send_command+0x158>)
 80024fc:	f014 ff90 	bl	8017420 <iprintf>
		if (NRF24_write(stop, 32) == 1) {
 8002500:	e045      	b.n	800258e <HAL_GPIO_send_command+0x14a>
		} else {
			printf("Transmission failed for command %s\r\n", command);
 8002502:	6879      	ldr	r1, [r7, #4]
 8002504:	4826      	ldr	r0, [pc, #152]	@ (80025a0 <HAL_GPIO_send_command+0x15c>)
 8002506:	f014 ff8b 	bl	8017420 <iprintf>
		if (NRF24_write(stop, 32) == 1) {
 800250a:	e040      	b.n	800258e <HAL_GPIO_send_command+0x14a>
		}

    } else if (strcmp(command, go) == 0 && button_pressed_go == 0) {
 800250c:	4929      	ldr	r1, [pc, #164]	@ (80025b4 <HAL_GPIO_send_command+0x170>)
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f7fd fede 	bl	80002d0 <strcmp>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d118      	bne.n	800254c <HAL_GPIO_send_command+0x108>
 800251a:	4b27      	ldr	r3, [pc, #156]	@ (80025b8 <HAL_GPIO_send_command+0x174>)
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	b2db      	uxtb	r3, r3
 8002520:	2b00      	cmp	r3, #0
 8002522:	d113      	bne.n	800254c <HAL_GPIO_send_command+0x108>
        button_pressed_go = 1;
 8002524:	4b24      	ldr	r3, [pc, #144]	@ (80025b8 <HAL_GPIO_send_command+0x174>)
 8002526:	2201      	movs	r2, #1
 8002528:	701a      	strb	r2, [r3, #0]

		if (NRF24_write(go, 32) == 1) {
 800252a:	2120      	movs	r1, #32
 800252c:	4821      	ldr	r0, [pc, #132]	@ (80025b4 <HAL_GPIO_send_command+0x170>)
 800252e:	f00a fcdd 	bl	800ceec <NRF24_write>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d004      	beq.n	8002542 <HAL_GPIO_send_command+0xfe>
			printf("Transmission success: command %s\r\n", command);
 8002538:	6879      	ldr	r1, [r7, #4]
 800253a:	4818      	ldr	r0, [pc, #96]	@ (800259c <HAL_GPIO_send_command+0x158>)
 800253c:	f014 ff70 	bl	8017420 <iprintf>
		if (NRF24_write(go, 32) == 1) {
 8002540:	e025      	b.n	800258e <HAL_GPIO_send_command+0x14a>
		} else {
			printf("Transmission failed for command %s\r\n", command);
 8002542:	6879      	ldr	r1, [r7, #4]
 8002544:	4816      	ldr	r0, [pc, #88]	@ (80025a0 <HAL_GPIO_send_command+0x15c>)
 8002546:	f014 ff6b 	bl	8017420 <iprintf>
		if (NRF24_write(go, 32) == 1) {
 800254a:	e020      	b.n	800258e <HAL_GPIO_send_command+0x14a>
		}
    } else if (strcmp(command, back) == 0 && button_pressed_back == 0) {
 800254c:	491b      	ldr	r1, [pc, #108]	@ (80025bc <HAL_GPIO_send_command+0x178>)
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f7fd febe 	bl	80002d0 <strcmp>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d118      	bne.n	800258c <HAL_GPIO_send_command+0x148>
 800255a:	4b19      	ldr	r3, [pc, #100]	@ (80025c0 <HAL_GPIO_send_command+0x17c>)
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	b2db      	uxtb	r3, r3
 8002560:	2b00      	cmp	r3, #0
 8002562:	d113      	bne.n	800258c <HAL_GPIO_send_command+0x148>
        button_pressed_back = 1;
 8002564:	4b16      	ldr	r3, [pc, #88]	@ (80025c0 <HAL_GPIO_send_command+0x17c>)
 8002566:	2201      	movs	r2, #1
 8002568:	701a      	strb	r2, [r3, #0]
		if (NRF24_write(back, 32) == 1) {
 800256a:	2120      	movs	r1, #32
 800256c:	4813      	ldr	r0, [pc, #76]	@ (80025bc <HAL_GPIO_send_command+0x178>)
 800256e:	f00a fcbd 	bl	800ceec <NRF24_write>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d004      	beq.n	8002582 <HAL_GPIO_send_command+0x13e>
			printf("Transmission success: command %s\r\n", command);
 8002578:	6879      	ldr	r1, [r7, #4]
 800257a:	4808      	ldr	r0, [pc, #32]	@ (800259c <HAL_GPIO_send_command+0x158>)
 800257c:	f014 ff50 	bl	8017420 <iprintf>
		if (NRF24_write(back, 32) == 1) {
 8002580:	e005      	b.n	800258e <HAL_GPIO_send_command+0x14a>
		} else {
			printf("Transmission failed for command %s\r\n", command);
 8002582:	6879      	ldr	r1, [r7, #4]
 8002584:	4806      	ldr	r0, [pc, #24]	@ (80025a0 <HAL_GPIO_send_command+0x15c>)
 8002586:	f014 ff4b 	bl	8017420 <iprintf>
		if (NRF24_write(back, 32) == 1) {
 800258a:	e000      	b.n	800258e <HAL_GPIO_send_command+0x14a>
		}
    } else {
        return; // Command not recognized, do nothing
 800258c:	bf00      	nop
    }

}
 800258e:	3708      	adds	r7, #8
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	20000020 	.word	0x20000020
 8002598:	20030761 	.word	0x20030761
 800259c:	0801a5f8 	.word	0x0801a5f8
 80025a0:	0801a61c 	.word	0x0801a61c
 80025a4:	20000040 	.word	0x20000040
 80025a8:	20030762 	.word	0x20030762
 80025ac:	20000060 	.word	0x20000060
 80025b0:	20030763 	.word	0x20030763
 80025b4:	20000080 	.word	0x20000080
 80025b8:	20030764 	.word	0x20030764
 80025bc:	200000a0 	.word	0x200000a0
 80025c0:	20030765 	.word	0x20030765

080025c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80025c8:	b672      	cpsid	i
}
 80025ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025cc:	bf00      	nop
 80025ce:	e7fd      	b.n	80025cc <Error_Handler+0x8>

080025d0 <MX_SAI1_Init>:
SAI_HandleTypeDef hsai_BlockA1;
DMA_HandleTypeDef hdma_sai1_a;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 80025d4:	4b27      	ldr	r3, [pc, #156]	@ (8002674 <MX_SAI1_Init+0xa4>)
 80025d6:	4a28      	ldr	r2, [pc, #160]	@ (8002678 <MX_SAI1_Init+0xa8>)
 80025d8:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 80025da:	4b26      	ldr	r3, [pc, #152]	@ (8002674 <MX_SAI1_Init+0xa4>)
 80025dc:	2200      	movs	r2, #0
 80025de:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_RX;
 80025e0:	4b24      	ldr	r3, [pc, #144]	@ (8002674 <MX_SAI1_Init+0xa4>)
 80025e2:	2201      	movs	r2, #1
 80025e4:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_16;
 80025e6:	4b23      	ldr	r3, [pc, #140]	@ (8002674 <MX_SAI1_Init+0xa4>)
 80025e8:	2280      	movs	r2, #128	@ 0x80
 80025ea:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80025ec:	4b21      	ldr	r3, [pc, #132]	@ (8002674 <MX_SAI1_Init+0xa4>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80025f2:	4b20      	ldr	r3, [pc, #128]	@ (8002674 <MX_SAI1_Init+0xa4>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 80025f8:	4b1e      	ldr	r3, [pc, #120]	@ (8002674 <MX_SAI1_Init+0xa4>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80025fe:	4b1d      	ldr	r3, [pc, #116]	@ (8002674 <MX_SAI1_Init+0xa4>)
 8002600:	2200      	movs	r2, #0
 8002602:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8002604:	4b1b      	ldr	r3, [pc, #108]	@ (8002674 <MX_SAI1_Init+0xa4>)
 8002606:	2200      	movs	r2, #0
 8002608:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800260a:	4b1a      	ldr	r3, [pc, #104]	@ (8002674 <MX_SAI1_Init+0xa4>)
 800260c:	2200      	movs	r2, #0
 800260e:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_16K;
 8002610:	4b18      	ldr	r3, [pc, #96]	@ (8002674 <MX_SAI1_Init+0xa4>)
 8002612:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8002616:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8002618:	4b16      	ldr	r3, [pc, #88]	@ (8002674 <MX_SAI1_Init+0xa4>)
 800261a:	2200      	movs	r2, #0
 800261c:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 800261e:	4b15      	ldr	r3, [pc, #84]	@ (8002674 <MX_SAI1_Init+0xa4>)
 8002620:	2200      	movs	r2, #0
 8002622:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8002624:	4b13      	ldr	r3, [pc, #76]	@ (8002674 <MX_SAI1_Init+0xa4>)
 8002626:	2200      	movs	r2, #0
 8002628:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA1.FrameInit.FrameLength = 16;
 800262a:	4b12      	ldr	r3, [pc, #72]	@ (8002674 <MX_SAI1_Init+0xa4>)
 800262c:	2210      	movs	r2, #16
 800262e:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8002630:	4b10      	ldr	r3, [pc, #64]	@ (8002674 <MX_SAI1_Init+0xa4>)
 8002632:	2201      	movs	r2, #1
 8002634:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8002636:	4b0f      	ldr	r3, [pc, #60]	@ (8002674 <MX_SAI1_Init+0xa4>)
 8002638:	2200      	movs	r2, #0
 800263a:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800263c:	4b0d      	ldr	r3, [pc, #52]	@ (8002674 <MX_SAI1_Init+0xa4>)
 800263e:	2200      	movs	r2, #0
 8002640:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8002642:	4b0c      	ldr	r3, [pc, #48]	@ (8002674 <MX_SAI1_Init+0xa4>)
 8002644:	2200      	movs	r2, #0
 8002646:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8002648:	4b0a      	ldr	r3, [pc, #40]	@ (8002674 <MX_SAI1_Init+0xa4>)
 800264a:	2200      	movs	r2, #0
 800264c:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800264e:	4b09      	ldr	r3, [pc, #36]	@ (8002674 <MX_SAI1_Init+0xa4>)
 8002650:	2200      	movs	r2, #0
 8002652:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8002654:	4b07      	ldr	r3, [pc, #28]	@ (8002674 <MX_SAI1_Init+0xa4>)
 8002656:	2201      	movs	r2, #1
 8002658:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 800265a:	4b06      	ldr	r3, [pc, #24]	@ (8002674 <MX_SAI1_Init+0xa4>)
 800265c:	2200      	movs	r2, #0
 800265e:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8002660:	4804      	ldr	r0, [pc, #16]	@ (8002674 <MX_SAI1_Init+0xa4>)
 8002662:	f006 fa09 	bl	8008a78 <HAL_SAI_Init>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d001      	beq.n	8002670 <MX_SAI1_Init+0xa0>
  {
    Error_Handler();
 800266c:	f7ff ffaa 	bl	80025c4 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8002670:	bf00      	nop
 8002672:	bd80      	pop	{r7, pc}
 8002674:	20030b68 	.word	0x20030b68
 8002678:	40015804 	.word	0x40015804

0800267c <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b0aa      	sub	sp, #168	@ 0xa8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002684:	f107 0310 	add.w	r3, r7, #16
 8002688:	2284      	movs	r2, #132	@ 0x84
 800268a:	2100      	movs	r1, #0
 800268c:	4618      	mov	r0, r3
 800268e:	f015 f82f 	bl	80176f0 <memset>
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a41      	ldr	r2, [pc, #260]	@ (800279c <HAL_SAI_MspInit+0x120>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d17b      	bne.n	8002794 <HAL_SAI_MspInit+0x118>
    {
    /* SAI1 clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 800269c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80026a0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 80026a2:	2332      	movs	r3, #50	@ 0x32
 80026a4:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80026a6:	2302      	movs	r3, #2
 80026a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80026aa:	2302      	movs	r3, #2
 80026ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 80026ae:	2300      	movs	r3, #0
 80026b0:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 80026b2:	2301      	movs	r3, #1
 80026b4:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80026b6:	2300      	movs	r3, #0
 80026b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI;
 80026ba:	2300      	movs	r3, #0
 80026bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026be:	f107 0310 	add.w	r3, r7, #16
 80026c2:	4618      	mov	r0, r3
 80026c4:	f005 fb9c 	bl	8007e00 <HAL_RCCEx_PeriphCLKConfig>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <HAL_SAI_MspInit+0x56>
    {
      Error_Handler();
 80026ce:	f7ff ff79 	bl	80025c4 <Error_Handler>
    }

    if (SAI1_client == 0)
 80026d2:	4b33      	ldr	r3, [pc, #204]	@ (80027a0 <HAL_SAI_MspInit+0x124>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d10b      	bne.n	80026f2 <HAL_SAI_MspInit+0x76>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80026da:	4b32      	ldr	r3, [pc, #200]	@ (80027a4 <HAL_SAI_MspInit+0x128>)
 80026dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026de:	4a31      	ldr	r2, [pc, #196]	@ (80027a4 <HAL_SAI_MspInit+0x128>)
 80026e0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80026e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80026e6:	4b2f      	ldr	r3, [pc, #188]	@ (80027a4 <HAL_SAI_MspInit+0x128>)
 80026e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026ee:	60fb      	str	r3, [r7, #12]
 80026f0:	68fb      	ldr	r3, [r7, #12]
    }
    SAI1_client ++;
 80026f2:	4b2b      	ldr	r3, [pc, #172]	@ (80027a0 <HAL_SAI_MspInit+0x124>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	3301      	adds	r3, #1
 80026f8:	4a29      	ldr	r2, [pc, #164]	@ (80027a0 <HAL_SAI_MspInit+0x124>)
 80026fa:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80026fc:	2370      	movs	r3, #112	@ 0x70
 80026fe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002702:	2302      	movs	r3, #2
 8002704:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002708:	2300      	movs	r3, #0
 800270a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800270e:	2300      	movs	r3, #0
 8002710:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002714:	2306      	movs	r3, #6
 8002716:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800271a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800271e:	4619      	mov	r1, r3
 8002720:	4821      	ldr	r0, [pc, #132]	@ (80027a8 <HAL_SAI_MspInit+0x12c>)
 8002722:	f003 fdb3 	bl	800628c <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA2_Stream1;
 8002726:	4b21      	ldr	r3, [pc, #132]	@ (80027ac <HAL_SAI_MspInit+0x130>)
 8002728:	4a21      	ldr	r2, [pc, #132]	@ (80027b0 <HAL_SAI_MspInit+0x134>)
 800272a:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Channel = DMA_CHANNEL_0;
 800272c:	4b1f      	ldr	r3, [pc, #124]	@ (80027ac <HAL_SAI_MspInit+0x130>)
 800272e:	2200      	movs	r2, #0
 8002730:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002732:	4b1e      	ldr	r3, [pc, #120]	@ (80027ac <HAL_SAI_MspInit+0x130>)
 8002734:	2200      	movs	r2, #0
 8002736:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8002738:	4b1c      	ldr	r3, [pc, #112]	@ (80027ac <HAL_SAI_MspInit+0x130>)
 800273a:	2200      	movs	r2, #0
 800273c:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 800273e:	4b1b      	ldr	r3, [pc, #108]	@ (80027ac <HAL_SAI_MspInit+0x130>)
 8002740:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002744:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002746:	4b19      	ldr	r3, [pc, #100]	@ (80027ac <HAL_SAI_MspInit+0x130>)
 8002748:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800274c:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800274e:	4b17      	ldr	r3, [pc, #92]	@ (80027ac <HAL_SAI_MspInit+0x130>)
 8002750:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002754:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 8002756:	4b15      	ldr	r3, [pc, #84]	@ (80027ac <HAL_SAI_MspInit+0x130>)
 8002758:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800275c:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_HIGH;
 800275e:	4b13      	ldr	r3, [pc, #76]	@ (80027ac <HAL_SAI_MspInit+0x130>)
 8002760:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002764:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002766:	4b11      	ldr	r3, [pc, #68]	@ (80027ac <HAL_SAI_MspInit+0x130>)
 8002768:	2200      	movs	r2, #0
 800276a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 800276c:	480f      	ldr	r0, [pc, #60]	@ (80027ac <HAL_SAI_MspInit+0x130>)
 800276e:	f003 f919 	bl	80059a4 <HAL_DMA_Init>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d001      	beq.n	800277c <HAL_SAI_MspInit+0x100>
    {
      Error_Handler();
 8002778:	f7ff ff24 	bl	80025c4 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	4a0b      	ldr	r2, [pc, #44]	@ (80027ac <HAL_SAI_MspInit+0x130>)
 8002780:	671a      	str	r2, [r3, #112]	@ 0x70
 8002782:	4a0a      	ldr	r2, [pc, #40]	@ (80027ac <HAL_SAI_MspInit+0x130>)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	4a08      	ldr	r2, [pc, #32]	@ (80027ac <HAL_SAI_MspInit+0x130>)
 800278c:	66da      	str	r2, [r3, #108]	@ 0x6c
 800278e:	4a07      	ldr	r2, [pc, #28]	@ (80027ac <HAL_SAI_MspInit+0x130>)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6393      	str	r3, [r2, #56]	@ 0x38
    }
}
 8002794:	bf00      	nop
 8002796:	37a8      	adds	r7, #168	@ 0xa8
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	40015804 	.word	0x40015804
 80027a0:	20030c4c 	.word	0x20030c4c
 80027a4:	40023800 	.word	0x40023800
 80027a8:	40021000 	.word	0x40021000
 80027ac:	20030bec 	.word	0x20030bec
 80027b0:	40026428 	.word	0x40026428

080027b4 <HAL_SAI_MspDeInit>:

void HAL_SAI_MspDeInit(SAI_HandleTypeDef* saiHandle)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]

/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a11      	ldr	r2, [pc, #68]	@ (8002808 <HAL_SAI_MspDeInit+0x54>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d11c      	bne.n	8002800 <HAL_SAI_MspDeInit+0x4c>
    {
    SAI1_client --;
 80027c6:	4b11      	ldr	r3, [pc, #68]	@ (800280c <HAL_SAI_MspDeInit+0x58>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	3b01      	subs	r3, #1
 80027cc:	4a0f      	ldr	r2, [pc, #60]	@ (800280c <HAL_SAI_MspDeInit+0x58>)
 80027ce:	6013      	str	r3, [r2, #0]
    if (SAI1_client == 0)
 80027d0:	4b0e      	ldr	r3, [pc, #56]	@ (800280c <HAL_SAI_MspDeInit+0x58>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d105      	bne.n	80027e4 <HAL_SAI_MspDeInit+0x30>
      {
      /* Peripheral clock disable */
       __HAL_RCC_SAI1_CLK_DISABLE();
 80027d8:	4b0d      	ldr	r3, [pc, #52]	@ (8002810 <HAL_SAI_MspDeInit+0x5c>)
 80027da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027dc:	4a0c      	ldr	r2, [pc, #48]	@ (8002810 <HAL_SAI_MspDeInit+0x5c>)
 80027de:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80027e2:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SAI1_A_Block_A GPIO Configuration
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6);
 80027e4:	2170      	movs	r1, #112	@ 0x70
 80027e6:	480b      	ldr	r0, [pc, #44]	@ (8002814 <HAL_SAI_MspDeInit+0x60>)
 80027e8:	f003 fefc 	bl	80065e4 <HAL_GPIO_DeInit>

    HAL_DMA_DeInit(saiHandle->hdmarx);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027f0:	4618      	mov	r0, r3
 80027f2:	f003 f985 	bl	8005b00 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(saiHandle->hdmatx);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027fa:	4618      	mov	r0, r3
 80027fc:	f003 f980 	bl	8005b00 <HAL_DMA_DeInit>
    }
}
 8002800:	bf00      	nop
 8002802:	3708      	adds	r7, #8
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	40015804 	.word	0x40015804
 800280c:	20030c4c 	.word	0x20030c4c
 8002810:	40023800 	.word	0x40023800
 8002814:	40021000 	.word	0x40021000

08002818 <MX_SDMMC1_SD_Init>:
DMA_HandleTypeDef hdma_sdmmc1_tx;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800281c:	4b0c      	ldr	r3, [pc, #48]	@ (8002850 <MX_SDMMC1_SD_Init+0x38>)
 800281e:	4a0d      	ldr	r2, [pc, #52]	@ (8002854 <MX_SDMMC1_SD_Init+0x3c>)
 8002820:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8002822:	4b0b      	ldr	r3, [pc, #44]	@ (8002850 <MX_SDMMC1_SD_Init+0x38>)
 8002824:	2200      	movs	r2, #0
 8002826:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8002828:	4b09      	ldr	r3, [pc, #36]	@ (8002850 <MX_SDMMC1_SD_Init+0x38>)
 800282a:	2200      	movs	r2, #0
 800282c:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800282e:	4b08      	ldr	r3, [pc, #32]	@ (8002850 <MX_SDMMC1_SD_Init+0x38>)
 8002830:	2200      	movs	r2, #0
 8002832:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8002834:	4b06      	ldr	r3, [pc, #24]	@ (8002850 <MX_SDMMC1_SD_Init+0x38>)
 8002836:	2200      	movs	r2, #0
 8002838:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800283a:	4b05      	ldr	r3, [pc, #20]	@ (8002850 <MX_SDMMC1_SD_Init+0x38>)
 800283c:	2200      	movs	r2, #0
 800283e:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8002840:	4b03      	ldr	r3, [pc, #12]	@ (8002850 <MX_SDMMC1_SD_Init+0x38>)
 8002842:	2200      	movs	r2, #0
 8002844:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8002846:	bf00      	nop
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr
 8002850:	20030c50 	.word	0x20030c50
 8002854:	40012c00 	.word	0x40012c00

08002858 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b0ac      	sub	sp, #176	@ 0xb0
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002860:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002864:	2200      	movs	r2, #0
 8002866:	601a      	str	r2, [r3, #0]
 8002868:	605a      	str	r2, [r3, #4]
 800286a:	609a      	str	r2, [r3, #8]
 800286c:	60da      	str	r2, [r3, #12]
 800286e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002870:	f107 0318 	add.w	r3, r7, #24
 8002874:	2284      	movs	r2, #132	@ 0x84
 8002876:	2100      	movs	r1, #0
 8002878:	4618      	mov	r0, r3
 800287a:	f014 ff39 	bl	80176f0 <memset>
  if(sdHandle->Instance==SDMMC1)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a74      	ldr	r2, [pc, #464]	@ (8002a54 <HAL_SD_MspInit+0x1fc>)
 8002884:	4293      	cmp	r3, r2
 8002886:	f040 80e0 	bne.w	8002a4a <HAL_SD_MspInit+0x1f2>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 800288a:	f44f 0320 	mov.w	r3, #10485760	@ 0xa00000
 800288e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8002890:	2300      	movs	r3, #0
 8002892:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8002896:	2300      	movs	r3, #0
 8002898:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800289c:	f107 0318 	add.w	r3, r7, #24
 80028a0:	4618      	mov	r0, r3
 80028a2:	f005 faad 	bl	8007e00 <HAL_RCCEx_PeriphCLKConfig>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d001      	beq.n	80028b0 <HAL_SD_MspInit+0x58>
    {
      Error_Handler();
 80028ac:	f7ff fe8a 	bl	80025c4 <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80028b0:	4b69      	ldr	r3, [pc, #420]	@ (8002a58 <HAL_SD_MspInit+0x200>)
 80028b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028b4:	4a68      	ldr	r2, [pc, #416]	@ (8002a58 <HAL_SD_MspInit+0x200>)
 80028b6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80028ba:	6453      	str	r3, [r2, #68]	@ 0x44
 80028bc:	4b66      	ldr	r3, [pc, #408]	@ (8002a58 <HAL_SD_MspInit+0x200>)
 80028be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80028c4:	617b      	str	r3, [r7, #20]
 80028c6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028c8:	4b63      	ldr	r3, [pc, #396]	@ (8002a58 <HAL_SD_MspInit+0x200>)
 80028ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028cc:	4a62      	ldr	r2, [pc, #392]	@ (8002a58 <HAL_SD_MspInit+0x200>)
 80028ce:	f043 0304 	orr.w	r3, r3, #4
 80028d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80028d4:	4b60      	ldr	r3, [pc, #384]	@ (8002a58 <HAL_SD_MspInit+0x200>)
 80028d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028d8:	f003 0304 	and.w	r3, r3, #4
 80028dc:	613b      	str	r3, [r7, #16]
 80028de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80028e0:	4b5d      	ldr	r3, [pc, #372]	@ (8002a58 <HAL_SD_MspInit+0x200>)
 80028e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028e4:	4a5c      	ldr	r2, [pc, #368]	@ (8002a58 <HAL_SD_MspInit+0x200>)
 80028e6:	f043 0308 	orr.w	r3, r3, #8
 80028ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80028ec:	4b5a      	ldr	r3, [pc, #360]	@ (8002a58 <HAL_SD_MspInit+0x200>)
 80028ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f0:	f003 0308 	and.w	r3, r3, #8
 80028f4:	60fb      	str	r3, [r7, #12]
 80028f6:	68fb      	ldr	r3, [r7, #12]
    /**SDMMC1 GPIO Configuration
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_8;
 80028f8:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 80028fc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002900:	2302      	movs	r3, #2
 8002902:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002906:	2300      	movs	r3, #0
 8002908:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800290c:	2303      	movs	r3, #3
 800290e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002912:	230c      	movs	r3, #12
 8002914:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002918:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800291c:	4619      	mov	r1, r3
 800291e:	484f      	ldr	r0, [pc, #316]	@ (8002a5c <HAL_SD_MspInit+0x204>)
 8002920:	f003 fcb4 	bl	800628c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002924:	2304      	movs	r3, #4
 8002926:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800292a:	2302      	movs	r3, #2
 800292c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002930:	2300      	movs	r3, #0
 8002932:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002936:	2303      	movs	r3, #3
 8002938:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800293c:	230c      	movs	r3, #12
 800293e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002942:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002946:	4619      	mov	r1, r3
 8002948:	4845      	ldr	r0, [pc, #276]	@ (8002a60 <HAL_SD_MspInit+0x208>)
 800294a:	f003 fc9f 	bl	800628c <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 800294e:	4b45      	ldr	r3, [pc, #276]	@ (8002a64 <HAL_SD_MspInit+0x20c>)
 8002950:	4a45      	ldr	r2, [pc, #276]	@ (8002a68 <HAL_SD_MspInit+0x210>)
 8002952:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 8002954:	4b43      	ldr	r3, [pc, #268]	@ (8002a64 <HAL_SD_MspInit+0x20c>)
 8002956:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800295a:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800295c:	4b41      	ldr	r3, [pc, #260]	@ (8002a64 <HAL_SD_MspInit+0x20c>)
 800295e:	2200      	movs	r2, #0
 8002960:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002962:	4b40      	ldr	r3, [pc, #256]	@ (8002a64 <HAL_SD_MspInit+0x20c>)
 8002964:	2200      	movs	r2, #0
 8002966:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002968:	4b3e      	ldr	r3, [pc, #248]	@ (8002a64 <HAL_SD_MspInit+0x20c>)
 800296a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800296e:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002970:	4b3c      	ldr	r3, [pc, #240]	@ (8002a64 <HAL_SD_MspInit+0x20c>)
 8002972:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002976:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002978:	4b3a      	ldr	r3, [pc, #232]	@ (8002a64 <HAL_SD_MspInit+0x20c>)
 800297a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800297e:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8002980:	4b38      	ldr	r3, [pc, #224]	@ (8002a64 <HAL_SD_MspInit+0x20c>)
 8002982:	2220      	movs	r2, #32
 8002984:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002986:	4b37      	ldr	r3, [pc, #220]	@ (8002a64 <HAL_SD_MspInit+0x20c>)
 8002988:	2200      	movs	r2, #0
 800298a:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800298c:	4b35      	ldr	r3, [pc, #212]	@ (8002a64 <HAL_SD_MspInit+0x20c>)
 800298e:	2204      	movs	r2, #4
 8002990:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002992:	4b34      	ldr	r3, [pc, #208]	@ (8002a64 <HAL_SD_MspInit+0x20c>)
 8002994:	2203      	movs	r2, #3
 8002996:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 8002998:	4b32      	ldr	r3, [pc, #200]	@ (8002a64 <HAL_SD_MspInit+0x20c>)
 800299a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800299e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80029a0:	4b30      	ldr	r3, [pc, #192]	@ (8002a64 <HAL_SD_MspInit+0x20c>)
 80029a2:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80029a6:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 80029a8:	482e      	ldr	r0, [pc, #184]	@ (8002a64 <HAL_SD_MspInit+0x20c>)
 80029aa:	f002 fffb 	bl	80059a4 <HAL_DMA_Init>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d001      	beq.n	80029b8 <HAL_SD_MspInit+0x160>
    {
      Error_Handler();
 80029b4:	f7ff fe06 	bl	80025c4 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdmmc1_rx);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	4a2a      	ldr	r2, [pc, #168]	@ (8002a64 <HAL_SD_MspInit+0x20c>)
 80029bc:	641a      	str	r2, [r3, #64]	@ 0x40
 80029be:	4a29      	ldr	r2, [pc, #164]	@ (8002a64 <HAL_SD_MspInit+0x20c>)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 80029c4:	4b29      	ldr	r3, [pc, #164]	@ (8002a6c <HAL_SD_MspInit+0x214>)
 80029c6:	4a2a      	ldr	r2, [pc, #168]	@ (8002a70 <HAL_SD_MspInit+0x218>)
 80029c8:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 80029ca:	4b28      	ldr	r3, [pc, #160]	@ (8002a6c <HAL_SD_MspInit+0x214>)
 80029cc:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80029d0:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80029d2:	4b26      	ldr	r3, [pc, #152]	@ (8002a6c <HAL_SD_MspInit+0x214>)
 80029d4:	2240      	movs	r2, #64	@ 0x40
 80029d6:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029d8:	4b24      	ldr	r3, [pc, #144]	@ (8002a6c <HAL_SD_MspInit+0x214>)
 80029da:	2200      	movs	r2, #0
 80029dc:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80029de:	4b23      	ldr	r3, [pc, #140]	@ (8002a6c <HAL_SD_MspInit+0x214>)
 80029e0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80029e4:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80029e6:	4b21      	ldr	r3, [pc, #132]	@ (8002a6c <HAL_SD_MspInit+0x214>)
 80029e8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80029ec:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80029ee:	4b1f      	ldr	r3, [pc, #124]	@ (8002a6c <HAL_SD_MspInit+0x214>)
 80029f0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80029f4:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 80029f6:	4b1d      	ldr	r3, [pc, #116]	@ (8002a6c <HAL_SD_MspInit+0x214>)
 80029f8:	2220      	movs	r2, #32
 80029fa:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80029fc:	4b1b      	ldr	r3, [pc, #108]	@ (8002a6c <HAL_SD_MspInit+0x214>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002a02:	4b1a      	ldr	r3, [pc, #104]	@ (8002a6c <HAL_SD_MspInit+0x214>)
 8002a04:	2204      	movs	r2, #4
 8002a06:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002a08:	4b18      	ldr	r3, [pc, #96]	@ (8002a6c <HAL_SD_MspInit+0x214>)
 8002a0a:	2203      	movs	r2, #3
 8002a0c:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 8002a0e:	4b17      	ldr	r3, [pc, #92]	@ (8002a6c <HAL_SD_MspInit+0x214>)
 8002a10:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002a14:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8002a16:	4b15      	ldr	r3, [pc, #84]	@ (8002a6c <HAL_SD_MspInit+0x214>)
 8002a18:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002a1c:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 8002a1e:	4813      	ldr	r0, [pc, #76]	@ (8002a6c <HAL_SD_MspInit+0x214>)
 8002a20:	f002 ffc0 	bl	80059a4 <HAL_DMA_Init>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <HAL_SD_MspInit+0x1d6>
    {
      Error_Handler();
 8002a2a:	f7ff fdcb 	bl	80025c4 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdmmc1_tx);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a0e      	ldr	r2, [pc, #56]	@ (8002a6c <HAL_SD_MspInit+0x214>)
 8002a32:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002a34:	4a0d      	ldr	r2, [pc, #52]	@ (8002a6c <HAL_SD_MspInit+0x214>)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 1, 0);
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	2101      	movs	r1, #1
 8002a3e:	2031      	movs	r0, #49	@ 0x31
 8002a40:	f002 fe87 	bl	8005752 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8002a44:	2031      	movs	r0, #49	@ 0x31
 8002a46:	f002 fea0 	bl	800578a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8002a4a:	bf00      	nop
 8002a4c:	37b0      	adds	r7, #176	@ 0xb0
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	40012c00 	.word	0x40012c00
 8002a58:	40023800 	.word	0x40023800
 8002a5c:	40020800 	.word	0x40020800
 8002a60:	40020c00 	.word	0x40020c00
 8002a64:	20030cd4 	.word	0x20030cd4
 8002a68:	40026458 	.word	0x40026458
 8002a6c:	20030d34 	.word	0x20030d34
 8002a70:	400264a0 	.word	0x400264a0

08002a74 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002a78:	4b1b      	ldr	r3, [pc, #108]	@ (8002ae8 <MX_SPI2_Init+0x74>)
 8002a7a:	4a1c      	ldr	r2, [pc, #112]	@ (8002aec <MX_SPI2_Init+0x78>)
 8002a7c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002a7e:	4b1a      	ldr	r3, [pc, #104]	@ (8002ae8 <MX_SPI2_Init+0x74>)
 8002a80:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002a84:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002a86:	4b18      	ldr	r3, [pc, #96]	@ (8002ae8 <MX_SPI2_Init+0x74>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a8c:	4b16      	ldr	r3, [pc, #88]	@ (8002ae8 <MX_SPI2_Init+0x74>)
 8002a8e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002a92:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a94:	4b14      	ldr	r3, [pc, #80]	@ (8002ae8 <MX_SPI2_Init+0x74>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a9a:	4b13      	ldr	r3, [pc, #76]	@ (8002ae8 <MX_SPI2_Init+0x74>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002aa0:	4b11      	ldr	r3, [pc, #68]	@ (8002ae8 <MX_SPI2_Init+0x74>)
 8002aa2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002aa6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002aa8:	4b0f      	ldr	r3, [pc, #60]	@ (8002ae8 <MX_SPI2_Init+0x74>)
 8002aaa:	2218      	movs	r2, #24
 8002aac:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002aae:	4b0e      	ldr	r3, [pc, #56]	@ (8002ae8 <MX_SPI2_Init+0x74>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002ab4:	4b0c      	ldr	r3, [pc, #48]	@ (8002ae8 <MX_SPI2_Init+0x74>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002aba:	4b0b      	ldr	r3, [pc, #44]	@ (8002ae8 <MX_SPI2_Init+0x74>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002ac0:	4b09      	ldr	r3, [pc, #36]	@ (8002ae8 <MX_SPI2_Init+0x74>)
 8002ac2:	2207      	movs	r2, #7
 8002ac4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002ac6:	4b08      	ldr	r3, [pc, #32]	@ (8002ae8 <MX_SPI2_Init+0x74>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002acc:	4b06      	ldr	r3, [pc, #24]	@ (8002ae8 <MX_SPI2_Init+0x74>)
 8002ace:	2208      	movs	r2, #8
 8002ad0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002ad2:	4805      	ldr	r0, [pc, #20]	@ (8002ae8 <MX_SPI2_Init+0x74>)
 8002ad4:	f007 fd2b 	bl	800a52e <HAL_SPI_Init>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d001      	beq.n	8002ae2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002ade:	f7ff fd71 	bl	80025c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002ae2:	bf00      	nop
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	20030d94 	.word	0x20030d94
 8002aec:	40003800 	.word	0x40003800

08002af0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b08a      	sub	sp, #40	@ 0x28
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002af8:	f107 0314 	add.w	r3, r7, #20
 8002afc:	2200      	movs	r2, #0
 8002afe:	601a      	str	r2, [r3, #0]
 8002b00:	605a      	str	r2, [r3, #4]
 8002b02:	609a      	str	r2, [r3, #8]
 8002b04:	60da      	str	r2, [r3, #12]
 8002b06:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a17      	ldr	r2, [pc, #92]	@ (8002b6c <HAL_SPI_MspInit+0x7c>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d127      	bne.n	8002b62 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002b12:	4b17      	ldr	r3, [pc, #92]	@ (8002b70 <HAL_SPI_MspInit+0x80>)
 8002b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b16:	4a16      	ldr	r2, [pc, #88]	@ (8002b70 <HAL_SPI_MspInit+0x80>)
 8002b18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b1e:	4b14      	ldr	r3, [pc, #80]	@ (8002b70 <HAL_SPI_MspInit+0x80>)
 8002b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b26:	613b      	str	r3, [r7, #16]
 8002b28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002b2a:	4b11      	ldr	r3, [pc, #68]	@ (8002b70 <HAL_SPI_MspInit+0x80>)
 8002b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b2e:	4a10      	ldr	r2, [pc, #64]	@ (8002b70 <HAL_SPI_MspInit+0x80>)
 8002b30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b34:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b36:	4b0e      	ldr	r3, [pc, #56]	@ (8002b70 <HAL_SPI_MspInit+0x80>)
 8002b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b3e:	60fb      	str	r3, [r7, #12]
 8002b40:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PI3     ------> SPI2_MOSI
    PI2     ------> SPI2_MISO
    PI1     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1;
 8002b42:	230e      	movs	r3, #14
 8002b44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b46:	2302      	movs	r3, #2
 8002b48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002b52:	2305      	movs	r3, #5
 8002b54:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002b56:	f107 0314 	add.w	r3, r7, #20
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	4805      	ldr	r0, [pc, #20]	@ (8002b74 <HAL_SPI_MspInit+0x84>)
 8002b5e:	f003 fb95 	bl	800628c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002b62:	bf00      	nop
 8002b64:	3728      	adds	r7, #40	@ 0x28
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	40003800 	.word	0x40003800
 8002b70:	40023800 	.word	0x40023800
 8002b74:	40022000 	.word	0x40022000

08002b78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002b7e:	4b0f      	ldr	r3, [pc, #60]	@ (8002bbc <HAL_MspInit+0x44>)
 8002b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b82:	4a0e      	ldr	r2, [pc, #56]	@ (8002bbc <HAL_MspInit+0x44>)
 8002b84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b88:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b8a:	4b0c      	ldr	r3, [pc, #48]	@ (8002bbc <HAL_MspInit+0x44>)
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b92:	607b      	str	r3, [r7, #4]
 8002b94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b96:	4b09      	ldr	r3, [pc, #36]	@ (8002bbc <HAL_MspInit+0x44>)
 8002b98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b9a:	4a08      	ldr	r2, [pc, #32]	@ (8002bbc <HAL_MspInit+0x44>)
 8002b9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ba0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ba2:	4b06      	ldr	r3, [pc, #24]	@ (8002bbc <HAL_MspInit+0x44>)
 8002ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ba6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002baa:	603b      	str	r3, [r7, #0]
 8002bac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002bae:	bf00      	nop
 8002bb0:	370c      	adds	r7, #12
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop
 8002bbc:	40023800 	.word	0x40023800

08002bc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002bc4:	bf00      	nop
 8002bc6:	e7fd      	b.n	8002bc4 <NMI_Handler+0x4>

08002bc8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bcc:	bf00      	nop
 8002bce:	e7fd      	b.n	8002bcc <HardFault_Handler+0x4>

08002bd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bd4:	bf00      	nop
 8002bd6:	e7fd      	b.n	8002bd4 <MemManage_Handler+0x4>

08002bd8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bdc:	bf00      	nop
 8002bde:	e7fd      	b.n	8002bdc <BusFault_Handler+0x4>

08002be0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002be0:	b480      	push	{r7}
 8002be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002be4:	bf00      	nop
 8002be6:	e7fd      	b.n	8002be4 <UsageFault_Handler+0x4>

08002be8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002be8:	b480      	push	{r7}
 8002bea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002bec:	bf00      	nop
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr

08002bf6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bf6:	b480      	push	{r7}
 8002bf8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bfa:	bf00      	nop
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr

08002c04 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c04:	b480      	push	{r7}
 8002c06:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c08:	bf00      	nop
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr

08002c12 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c12:	b580      	push	{r7, lr}
 8002c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c16:	f002 fc7d 	bl	8005514 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c1a:	bf00      	nop
 8002c1c:	bd80      	pop	{r7, pc}

08002c1e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 8002c22:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8002c26:	f003 fe1b 	bl	8006860 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002c2a:	bf00      	nop
 8002c2c:	bd80      	pop	{r7, pc}
	...

08002c30 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8002c34:	4802      	ldr	r0, [pc, #8]	@ (8002c40 <SDMMC1_IRQHandler+0x10>)
 8002c36:	f006 fd41 	bl	80096bc <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8002c3a:	bf00      	nop
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	20030c50 	.word	0x20030c50

08002c44 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8002c48:	4802      	ldr	r0, [pc, #8]	@ (8002c54 <DMA2_Stream1_IRQHandler+0x10>)
 8002c4a:	f003 f8a9 	bl	8005da0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002c4e:	bf00      	nop
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	20030bec 	.word	0x20030bec

08002c58 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8002c5c:	4802      	ldr	r0, [pc, #8]	@ (8002c68 <DMA2_Stream3_IRQHandler+0x10>)
 8002c5e:	f003 f89f 	bl	8005da0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002c62:	bf00      	nop
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	20030cd4 	.word	0x20030cd4

08002c6c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8002c70:	4802      	ldr	r0, [pc, #8]	@ (8002c7c <DMA2_Stream6_IRQHandler+0x10>)
 8002c72:	f003 f895 	bl	8005da0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8002c76:	bf00      	nop
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	20030d34 	.word	0x20030d34

08002c80 <DMA2_Stream7_IRQHandler>:
  * @brief This function handles DMA2 Stream 7 interrupt request.
  * @param None
  * @retval None
  */
void AUDIO_IN_SAIx_DMAx_IRQHandler(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0
	//extern SAI_HandleTypeDef haudio_in_sai;
	HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
 8002c84:	4b03      	ldr	r3, [pc, #12]	@ (8002c94 <DMA2_Stream7_IRQHandler+0x14>)
 8002c86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f003 f889 	bl	8005da0 <HAL_DMA_IRQHandler>
}
 8002c8e:	bf00      	nop
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	20030f68 	.word	0x20030f68

08002c98 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0
  return 1;
 8002c9c:	2301      	movs	r3, #1
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <_kill>:

int _kill(int pid, int sig)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002cb2:	f014 fd7f 	bl	80177b4 <__errno>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2216      	movs	r2, #22
 8002cba:	601a      	str	r2, [r3, #0]
  return -1;
 8002cbc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3708      	adds	r7, #8
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <_exit>:

void _exit (int status)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002cd0:	f04f 31ff 	mov.w	r1, #4294967295
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f7ff ffe7 	bl	8002ca8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002cda:	bf00      	nop
 8002cdc:	e7fd      	b.n	8002cda <_exit+0x12>

08002cde <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002cde:	b580      	push	{r7, lr}
 8002ce0:	b086      	sub	sp, #24
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	60f8      	str	r0, [r7, #12]
 8002ce6:	60b9      	str	r1, [r7, #8]
 8002ce8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cea:	2300      	movs	r3, #0
 8002cec:	617b      	str	r3, [r7, #20]
 8002cee:	e00a      	b.n	8002d06 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002cf0:	f3af 8000 	nop.w
 8002cf4:	4601      	mov	r1, r0
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	1c5a      	adds	r2, r3, #1
 8002cfa:	60ba      	str	r2, [r7, #8]
 8002cfc:	b2ca      	uxtb	r2, r1
 8002cfe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	3301      	adds	r3, #1
 8002d04:	617b      	str	r3, [r7, #20]
 8002d06:	697a      	ldr	r2, [r7, #20]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	dbf0      	blt.n	8002cf0 <_read+0x12>
  }

  return len;
 8002d0e:	687b      	ldr	r3, [r7, #4]
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3718      	adds	r7, #24
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b086      	sub	sp, #24
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	60b9      	str	r1, [r7, #8]
 8002d22:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d24:	2300      	movs	r3, #0
 8002d26:	617b      	str	r3, [r7, #20]
 8002d28:	e009      	b.n	8002d3e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	1c5a      	adds	r2, r3, #1
 8002d2e:	60ba      	str	r2, [r7, #8]
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7ff f946 	bl	8001fc4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	617b      	str	r3, [r7, #20]
 8002d3e:	697a      	ldr	r2, [r7, #20]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	dbf1      	blt.n	8002d2a <_write+0x12>
  }
  return len;
 8002d46:	687b      	ldr	r3, [r7, #4]
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3718      	adds	r7, #24
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <_close>:

int _close(int file)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002d58:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002d78:	605a      	str	r2, [r3, #4]
  return 0;
 8002d7a:	2300      	movs	r3, #0
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr

08002d88 <_isatty>:

int _isatty(int file)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002d90:	2301      	movs	r3, #1
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	370c      	adds	r7, #12
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr

08002d9e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d9e:	b480      	push	{r7}
 8002da0:	b085      	sub	sp, #20
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	60f8      	str	r0, [r7, #12]
 8002da6:	60b9      	str	r1, [r7, #8]
 8002da8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002daa:	2300      	movs	r3, #0
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3714      	adds	r7, #20
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b086      	sub	sp, #24
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002dc0:	4a14      	ldr	r2, [pc, #80]	@ (8002e14 <_sbrk+0x5c>)
 8002dc2:	4b15      	ldr	r3, [pc, #84]	@ (8002e18 <_sbrk+0x60>)
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002dcc:	4b13      	ldr	r3, [pc, #76]	@ (8002e1c <_sbrk+0x64>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d102      	bne.n	8002dda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002dd4:	4b11      	ldr	r3, [pc, #68]	@ (8002e1c <_sbrk+0x64>)
 8002dd6:	4a12      	ldr	r2, [pc, #72]	@ (8002e20 <_sbrk+0x68>)
 8002dd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002dda:	4b10      	ldr	r3, [pc, #64]	@ (8002e1c <_sbrk+0x64>)
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4413      	add	r3, r2
 8002de2:	693a      	ldr	r2, [r7, #16]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d207      	bcs.n	8002df8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002de8:	f014 fce4 	bl	80177b4 <__errno>
 8002dec:	4603      	mov	r3, r0
 8002dee:	220c      	movs	r2, #12
 8002df0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002df2:	f04f 33ff 	mov.w	r3, #4294967295
 8002df6:	e009      	b.n	8002e0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002df8:	4b08      	ldr	r3, [pc, #32]	@ (8002e1c <_sbrk+0x64>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002dfe:	4b07      	ldr	r3, [pc, #28]	@ (8002e1c <_sbrk+0x64>)
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4413      	add	r3, r2
 8002e06:	4a05      	ldr	r2, [pc, #20]	@ (8002e1c <_sbrk+0x64>)
 8002e08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3718      	adds	r7, #24
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	20050000 	.word	0x20050000
 8002e18:	00002000 	.word	0x00002000
 8002e1c:	20030df8 	.word	0x20030df8
 8002e20:	20036170 	.word	0x20036170

08002e24 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e24:	b480      	push	{r7}
 8002e26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e28:	4b06      	ldr	r3, [pc, #24]	@ (8002e44 <SystemInit+0x20>)
 8002e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e2e:	4a05      	ldr	r2, [pc, #20]	@ (8002e44 <SystemInit+0x20>)
 8002e30:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002e34:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e38:	bf00      	nop
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
 8002e42:	bf00      	nop
 8002e44:	e000ed00 	.word	0xe000ed00

08002e48 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002e4c:	4b14      	ldr	r3, [pc, #80]	@ (8002ea0 <MX_USART1_UART_Init+0x58>)
 8002e4e:	4a15      	ldr	r2, [pc, #84]	@ (8002ea4 <MX_USART1_UART_Init+0x5c>)
 8002e50:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002e52:	4b13      	ldr	r3, [pc, #76]	@ (8002ea0 <MX_USART1_UART_Init+0x58>)
 8002e54:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002e58:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002e5a:	4b11      	ldr	r3, [pc, #68]	@ (8002ea0 <MX_USART1_UART_Init+0x58>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002e60:	4b0f      	ldr	r3, [pc, #60]	@ (8002ea0 <MX_USART1_UART_Init+0x58>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002e66:	4b0e      	ldr	r3, [pc, #56]	@ (8002ea0 <MX_USART1_UART_Init+0x58>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002e6c:	4b0c      	ldr	r3, [pc, #48]	@ (8002ea0 <MX_USART1_UART_Init+0x58>)
 8002e6e:	220c      	movs	r2, #12
 8002e70:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e72:	4b0b      	ldr	r3, [pc, #44]	@ (8002ea0 <MX_USART1_UART_Init+0x58>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e78:	4b09      	ldr	r3, [pc, #36]	@ (8002ea0 <MX_USART1_UART_Init+0x58>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e7e:	4b08      	ldr	r3, [pc, #32]	@ (8002ea0 <MX_USART1_UART_Init+0x58>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e84:	4b06      	ldr	r3, [pc, #24]	@ (8002ea0 <MX_USART1_UART_Init+0x58>)
 8002e86:	2200      	movs	r2, #0
 8002e88:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002e8a:	4805      	ldr	r0, [pc, #20]	@ (8002ea0 <MX_USART1_UART_Init+0x58>)
 8002e8c:	f008 facc 	bl	800b428 <HAL_UART_Init>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d001      	beq.n	8002e9a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002e96:	f7ff fb95 	bl	80025c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002e9a:	bf00      	nop
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	20030dfc 	.word	0x20030dfc
 8002ea4:	40011000 	.word	0x40011000

08002ea8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b0ac      	sub	sp, #176	@ 0xb0
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eb0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	601a      	str	r2, [r3, #0]
 8002eb8:	605a      	str	r2, [r3, #4]
 8002eba:	609a      	str	r2, [r3, #8]
 8002ebc:	60da      	str	r2, [r3, #12]
 8002ebe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ec0:	f107 0318 	add.w	r3, r7, #24
 8002ec4:	2284      	movs	r2, #132	@ 0x84
 8002ec6:	2100      	movs	r1, #0
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f014 fc11 	bl	80176f0 <memset>
  if(uartHandle->Instance==USART1)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a32      	ldr	r2, [pc, #200]	@ (8002f9c <HAL_UART_MspInit+0xf4>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d15c      	bne.n	8002f92 <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002ed8:	2340      	movs	r3, #64	@ 0x40
 8002eda:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002edc:	2300      	movs	r3, #0
 8002ede:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ee0:	f107 0318 	add.w	r3, r7, #24
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f004 ff8b 	bl	8007e00 <HAL_RCCEx_PeriphCLKConfig>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d001      	beq.n	8002ef4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002ef0:	f7ff fb68 	bl	80025c4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ef4:	4b2a      	ldr	r3, [pc, #168]	@ (8002fa0 <HAL_UART_MspInit+0xf8>)
 8002ef6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ef8:	4a29      	ldr	r2, [pc, #164]	@ (8002fa0 <HAL_UART_MspInit+0xf8>)
 8002efa:	f043 0310 	orr.w	r3, r3, #16
 8002efe:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f00:	4b27      	ldr	r3, [pc, #156]	@ (8002fa0 <HAL_UART_MspInit+0xf8>)
 8002f02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f04:	f003 0310 	and.w	r3, r3, #16
 8002f08:	617b      	str	r3, [r7, #20]
 8002f0a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f0c:	4b24      	ldr	r3, [pc, #144]	@ (8002fa0 <HAL_UART_MspInit+0xf8>)
 8002f0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f10:	4a23      	ldr	r2, [pc, #140]	@ (8002fa0 <HAL_UART_MspInit+0xf8>)
 8002f12:	f043 0302 	orr.w	r3, r3, #2
 8002f16:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f18:	4b21      	ldr	r3, [pc, #132]	@ (8002fa0 <HAL_UART_MspInit+0xf8>)
 8002f1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f1c:	f003 0302 	and.w	r3, r3, #2
 8002f20:	613b      	str	r3, [r7, #16]
 8002f22:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f24:	4b1e      	ldr	r3, [pc, #120]	@ (8002fa0 <HAL_UART_MspInit+0xf8>)
 8002f26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f28:	4a1d      	ldr	r2, [pc, #116]	@ (8002fa0 <HAL_UART_MspInit+0xf8>)
 8002f2a:	f043 0301 	orr.w	r3, r3, #1
 8002f2e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f30:	4b1b      	ldr	r3, [pc, #108]	@ (8002fa0 <HAL_UART_MspInit+0xf8>)
 8002f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f34:	f003 0301 	and.w	r3, r3, #1
 8002f38:	60fb      	str	r3, [r7, #12]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002f3c:	2380      	movs	r3, #128	@ 0x80
 8002f3e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f42:	2302      	movs	r3, #2
 8002f44:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002f54:	2307      	movs	r3, #7
 8002f56:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f5a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002f5e:	4619      	mov	r1, r3
 8002f60:	4810      	ldr	r0, [pc, #64]	@ (8002fa4 <HAL_UART_MspInit+0xfc>)
 8002f62:	f003 f993 	bl	800628c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002f66:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002f6a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f6e:	2302      	movs	r3, #2
 8002f70:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f74:	2300      	movs	r3, #0
 8002f76:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002f80:	2307      	movs	r3, #7
 8002f82:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f86:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	4806      	ldr	r0, [pc, #24]	@ (8002fa8 <HAL_UART_MspInit+0x100>)
 8002f8e:	f003 f97d 	bl	800628c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002f92:	bf00      	nop
 8002f94:	37b0      	adds	r7, #176	@ 0xb0
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	40011000 	.word	0x40011000
 8002fa0:	40023800 	.word	0x40023800
 8002fa4:	40020400 	.word	0x40020400
 8002fa8:	40020000 	.word	0x40020000

08002fac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002fac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002fe4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002fb0:	f7ff ff38 	bl	8002e24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002fb4:	480c      	ldr	r0, [pc, #48]	@ (8002fe8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002fb6:	490d      	ldr	r1, [pc, #52]	@ (8002fec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002fb8:	4a0d      	ldr	r2, [pc, #52]	@ (8002ff0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002fba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002fbc:	e002      	b.n	8002fc4 <LoopCopyDataInit>

08002fbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fc2:	3304      	adds	r3, #4

08002fc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002fc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fc8:	d3f9      	bcc.n	8002fbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002fca:	4a0a      	ldr	r2, [pc, #40]	@ (8002ff4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002fcc:	4c0a      	ldr	r4, [pc, #40]	@ (8002ff8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002fce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fd0:	e001      	b.n	8002fd6 <LoopFillZerobss>

08002fd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002fd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002fd4:	3204      	adds	r2, #4

08002fd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002fd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002fd8:	d3fb      	bcc.n	8002fd2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002fda:	f014 fbf1 	bl	80177c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002fde:	f7fe fb73 	bl	80016c8 <main>
  bx  lr    
 8002fe2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002fe4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002fe8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002fec:	20000a88 	.word	0x20000a88
  ldr r2, =_sidata
 8002ff0:	080d8378 	.word	0x080d8378
  ldr r2, =_sbss
 8002ff4:	20000a88 	.word	0x20000a88
  ldr r4, =_ebss
 8002ff8:	2003616c 	.word	0x2003616c

08002ffc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ffc:	e7fe      	b.n	8002ffc <ADC_IRQHandler>
	...

08003000 <wm8994_Init>:
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param AudioFreq: Audio Frequency 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Init(uint16_t DeviceAddr, uint16_t OutputInputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b088      	sub	sp, #32
 8003004:	af00      	add	r7, sp, #0
 8003006:	607b      	str	r3, [r7, #4]
 8003008:	4603      	mov	r3, r0
 800300a:	81fb      	strh	r3, [r7, #14]
 800300c:	460b      	mov	r3, r1
 800300e:	81bb      	strh	r3, [r7, #12]
 8003010:	4613      	mov	r3, r2
 8003012:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8003014:	2300      	movs	r3, #0
 8003016:	61fb      	str	r3, [r7, #28]
  uint16_t output_device = OutputInputDevice & 0xFF;
 8003018:	89bb      	ldrh	r3, [r7, #12]
 800301a:	b2db      	uxtb	r3, r3
 800301c:	833b      	strh	r3, [r7, #24]
  uint16_t input_device = OutputInputDevice & 0xFF00;
 800301e:	89bb      	ldrh	r3, [r7, #12]
 8003020:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003024:	82fb      	strh	r3, [r7, #22]
  uint16_t power_mgnt_reg_1 = 0;
 8003026:	2300      	movs	r3, #0
 8003028:	837b      	strh	r3, [r7, #26]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 800302a:	f001 fc71 	bl	8004910 <AUDIO_IO_Init>
  /* wm8994 Errata Work-Arounds */
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 800302e:	89fb      	ldrh	r3, [r7, #14]
 8003030:	b2db      	uxtb	r3, r3
 8003032:	2203      	movs	r2, #3
 8003034:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8003038:	4618      	mov	r0, r3
 800303a:	f001 fafb 	bl	8004634 <CODEC_IO_Write>
 800303e:	4603      	mov	r3, r0
 8003040:	461a      	mov	r2, r3
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	4413      	add	r3, r2
 8003046:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x817, 0x0000);
 8003048:	89fb      	ldrh	r3, [r7, #14]
 800304a:	b2db      	uxtb	r3, r3
 800304c:	2200      	movs	r2, #0
 800304e:	f640 0117 	movw	r1, #2071	@ 0x817
 8003052:	4618      	mov	r0, r3
 8003054:	f001 faee 	bl	8004634 <CODEC_IO_Write>
 8003058:	4603      	mov	r3, r0
 800305a:	461a      	mov	r2, r3
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	4413      	add	r3, r2
 8003060:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0000);
 8003062:	89fb      	ldrh	r3, [r7, #14]
 8003064:	b2db      	uxtb	r3, r3
 8003066:	2200      	movs	r2, #0
 8003068:	f44f 7181 	mov.w	r1, #258	@ 0x102
 800306c:	4618      	mov	r0, r3
 800306e:	f001 fae1 	bl	8004634 <CODEC_IO_Write>
 8003072:	4603      	mov	r3, r0
 8003074:	461a      	mov	r2, r3
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	4413      	add	r3, r2
 800307a:	61fb      	str	r3, [r7, #28]

  /* Enable VMID soft start (fast), Start-up Bias Current Enabled */
  counter += CODEC_IO_Write(DeviceAddr, 0x39, 0x006C);
 800307c:	89fb      	ldrh	r3, [r7, #14]
 800307e:	b2db      	uxtb	r3, r3
 8003080:	226c      	movs	r2, #108	@ 0x6c
 8003082:	2139      	movs	r1, #57	@ 0x39
 8003084:	4618      	mov	r0, r3
 8003086:	f001 fad5 	bl	8004634 <CODEC_IO_Write>
 800308a:	4603      	mov	r3, r0
 800308c:	461a      	mov	r2, r3
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	4413      	add	r3, r2
 8003092:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID */
  if (input_device > 0)
 8003094:	8afb      	ldrh	r3, [r7, #22]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d00c      	beq.n	80030b4 <wm8994_Init+0xb4>
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0013);
 800309a:	89fb      	ldrh	r3, [r7, #14]
 800309c:	b2db      	uxtb	r3, r3
 800309e:	2213      	movs	r2, #19
 80030a0:	2101      	movs	r1, #1
 80030a2:	4618      	mov	r0, r3
 80030a4:	f001 fac6 	bl	8004634 <CODEC_IO_Write>
 80030a8:	4603      	mov	r3, r0
 80030aa:	461a      	mov	r2, r3
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	4413      	add	r3, r2
 80030b0:	61fb      	str	r3, [r7, #28]
 80030b2:	e00b      	b.n	80030cc <wm8994_Init+0xcc>
  }
  else
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0003);
 80030b4:	89fb      	ldrh	r3, [r7, #14]
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	2203      	movs	r2, #3
 80030ba:	2101      	movs	r1, #1
 80030bc:	4618      	mov	r0, r3
 80030be:	f001 fab9 	bl	8004634 <CODEC_IO_Write>
 80030c2:	4603      	mov	r3, r0
 80030c4:	461a      	mov	r2, r3
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	4413      	add	r3, r2
 80030ca:	61fb      	str	r3, [r7, #28]
  }

  /* Add Delay */
  AUDIO_IO_Delay(50);
 80030cc:	2032      	movs	r0, #50	@ 0x32
 80030ce:	f001 fc87 	bl	80049e0 <AUDIO_IO_Delay>

  /* Path Configurations for output */
  if (output_device > 0)
 80030d2:	8b3b      	ldrh	r3, [r7, #24]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	f000 815f 	beq.w	8003398 <wm8994_Init+0x398>
  {
    outputEnabled = 1;
 80030da:	4bae      	ldr	r3, [pc, #696]	@ (8003394 <wm8994_Init+0x394>)
 80030dc:	2201      	movs	r2, #1
 80030de:	601a      	str	r2, [r3, #0]

    switch (output_device)
 80030e0:	8b3b      	ldrh	r3, [r7, #24]
 80030e2:	2b03      	cmp	r3, #3
 80030e4:	f000 808c 	beq.w	8003200 <wm8994_Init+0x200>
 80030e8:	2b03      	cmp	r3, #3
 80030ea:	f300 8111 	bgt.w	8003310 <wm8994_Init+0x310>
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d002      	beq.n	80030f8 <wm8994_Init+0xf8>
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d042      	beq.n	800317c <wm8994_Init+0x17c>
 80030f6:	e10b      	b.n	8003310 <wm8994_Init+0x310>
    {
    case OUTPUT_DEVICE_SPEAKER:
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 80030f8:	89fb      	ldrh	r3, [r7, #14]
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	f640 420c 	movw	r2, #3084	@ 0xc0c
 8003100:	2105      	movs	r1, #5
 8003102:	4618      	mov	r0, r3
 8003104:	f001 fa96 	bl	8004634 <CODEC_IO_Write>
 8003108:	4603      	mov	r3, r0
 800310a:	461a      	mov	r2, r3
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	4413      	add	r3, r2
 8003110:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8003112:	89fb      	ldrh	r3, [r7, #14]
 8003114:	b2db      	uxtb	r3, r3
 8003116:	2200      	movs	r2, #0
 8003118:	f240 6101 	movw	r1, #1537	@ 0x601
 800311c:	4618      	mov	r0, r3
 800311e:	f001 fa89 	bl	8004634 <CODEC_IO_Write>
 8003122:	4603      	mov	r3, r0
 8003124:	461a      	mov	r2, r3
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	4413      	add	r3, r2
 800312a:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 800312c:	89fb      	ldrh	r3, [r7, #14]
 800312e:	b2db      	uxtb	r3, r3
 8003130:	2200      	movs	r2, #0
 8003132:	f240 6102 	movw	r1, #1538	@ 0x602
 8003136:	4618      	mov	r0, r3
 8003138:	f001 fa7c 	bl	8004634 <CODEC_IO_Write>
 800313c:	4603      	mov	r3, r0
 800313e:	461a      	mov	r2, r3
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	4413      	add	r3, r2
 8003144:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8003146:	89fb      	ldrh	r3, [r7, #14]
 8003148:	b2db      	uxtb	r3, r3
 800314a:	2202      	movs	r2, #2
 800314c:	f240 6104 	movw	r1, #1540	@ 0x604
 8003150:	4618      	mov	r0, r3
 8003152:	f001 fa6f 	bl	8004634 <CODEC_IO_Write>
 8003156:	4603      	mov	r3, r0
 8003158:	461a      	mov	r2, r3
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	4413      	add	r3, r2
 800315e:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8003160:	89fb      	ldrh	r3, [r7, #14]
 8003162:	b2db      	uxtb	r3, r3
 8003164:	2202      	movs	r2, #2
 8003166:	f240 6105 	movw	r1, #1541	@ 0x605
 800316a:	4618      	mov	r0, r3
 800316c:	f001 fa62 	bl	8004634 <CODEC_IO_Write>
 8003170:	4603      	mov	r3, r0
 8003172:	461a      	mov	r2, r3
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	4413      	add	r3, r2
 8003178:	61fb      	str	r3, [r7, #28]
      break;
 800317a:	e110      	b.n	800339e <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_HEADPHONE:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 800317c:	89fb      	ldrh	r3, [r7, #14]
 800317e:	b2db      	uxtb	r3, r3
 8003180:	f240 3203 	movw	r2, #771	@ 0x303
 8003184:	2105      	movs	r1, #5
 8003186:	4618      	mov	r0, r3
 8003188:	f001 fa54 	bl	8004634 <CODEC_IO_Write>
 800318c:	4603      	mov	r3, r0
 800318e:	461a      	mov	r2, r3
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	4413      	add	r3, r2
 8003194:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8003196:	89fb      	ldrh	r3, [r7, #14]
 8003198:	b2db      	uxtb	r3, r3
 800319a:	2201      	movs	r2, #1
 800319c:	f240 6101 	movw	r1, #1537	@ 0x601
 80031a0:	4618      	mov	r0, r3
 80031a2:	f001 fa47 	bl	8004634 <CODEC_IO_Write>
 80031a6:	4603      	mov	r3, r0
 80031a8:	461a      	mov	r2, r3
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	4413      	add	r3, r2
 80031ae:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80031b0:	89fb      	ldrh	r3, [r7, #14]
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	2201      	movs	r2, #1
 80031b6:	f240 6102 	movw	r1, #1538	@ 0x602
 80031ba:	4618      	mov	r0, r3
 80031bc:	f001 fa3a 	bl	8004634 <CODEC_IO_Write>
 80031c0:	4603      	mov	r3, r0
 80031c2:	461a      	mov	r2, r3
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	4413      	add	r3, r2
 80031c8:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 80031ca:	89fb      	ldrh	r3, [r7, #14]
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	2200      	movs	r2, #0
 80031d0:	f240 6104 	movw	r1, #1540	@ 0x604
 80031d4:	4618      	mov	r0, r3
 80031d6:	f001 fa2d 	bl	8004634 <CODEC_IO_Write>
 80031da:	4603      	mov	r3, r0
 80031dc:	461a      	mov	r2, r3
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	4413      	add	r3, r2
 80031e2:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 80031e4:	89fb      	ldrh	r3, [r7, #14]
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	2200      	movs	r2, #0
 80031ea:	f240 6105 	movw	r1, #1541	@ 0x605
 80031ee:	4618      	mov	r0, r3
 80031f0:	f001 fa20 	bl	8004634 <CODEC_IO_Write>
 80031f4:	4603      	mov	r3, r0
 80031f6:	461a      	mov	r2, r3
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	4413      	add	r3, r2
 80031fc:	61fb      	str	r3, [r7, #28]
      break;
 80031fe:	e0ce      	b.n	800339e <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_BOTH:
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8003200:	8afb      	ldrh	r3, [r7, #22]
 8003202:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003206:	d141      	bne.n	800328c <wm8994_Init+0x28c>
      {
        /* Enable DAC1 (Left), Enable DAC1 (Right),
        also Enable DAC2 (Left), Enable DAC2 (Right)*/
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8003208:	89fb      	ldrh	r3, [r7, #14]
 800320a:	b2db      	uxtb	r3, r3
 800320c:	f640 720f 	movw	r2, #3855	@ 0xf0f
 8003210:	2105      	movs	r1, #5
 8003212:	4618      	mov	r0, r3
 8003214:	f001 fa0e 	bl	8004634 <CODEC_IO_Write>
 8003218:	4603      	mov	r3, r0
 800321a:	461a      	mov	r2, r3
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	4413      	add	r3, r2
 8003220:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0003);
 8003222:	89fb      	ldrh	r3, [r7, #14]
 8003224:	b2db      	uxtb	r3, r3
 8003226:	2203      	movs	r2, #3
 8003228:	f240 6101 	movw	r1, #1537	@ 0x601
 800322c:	4618      	mov	r0, r3
 800322e:	f001 fa01 	bl	8004634 <CODEC_IO_Write>
 8003232:	4603      	mov	r3, r0
 8003234:	461a      	mov	r2, r3
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	4413      	add	r3, r2
 800323a:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0003);
 800323c:	89fb      	ldrh	r3, [r7, #14]
 800323e:	b2db      	uxtb	r3, r3
 8003240:	2203      	movs	r2, #3
 8003242:	f240 6102 	movw	r1, #1538	@ 0x602
 8003246:	4618      	mov	r0, r3
 8003248:	f001 f9f4 	bl	8004634 <CODEC_IO_Write>
 800324c:	4603      	mov	r3, r0
 800324e:	461a      	mov	r2, r3
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	4413      	add	r3, r2
 8003254:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0003);
 8003256:	89fb      	ldrh	r3, [r7, #14]
 8003258:	b2db      	uxtb	r3, r3
 800325a:	2203      	movs	r2, #3
 800325c:	f240 6104 	movw	r1, #1540	@ 0x604
 8003260:	4618      	mov	r0, r3
 8003262:	f001 f9e7 	bl	8004634 <CODEC_IO_Write>
 8003266:	4603      	mov	r3, r0
 8003268:	461a      	mov	r2, r3
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	4413      	add	r3, r2
 800326e:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0003);
 8003270:	89fb      	ldrh	r3, [r7, #14]
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2203      	movs	r2, #3
 8003276:	f240 6105 	movw	r1, #1541	@ 0x605
 800327a:	4618      	mov	r0, r3
 800327c:	f001 f9da 	bl	8004634 <CODEC_IO_Write>
 8003280:	4603      	mov	r3, r0
 8003282:	461a      	mov	r2, r3
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	4413      	add	r3, r2
 8003288:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
        
        /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
      }
      break;
 800328a:	e088      	b.n	800339e <wm8994_Init+0x39e>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 800328c:	89fb      	ldrh	r3, [r7, #14]
 800328e:	b2db      	uxtb	r3, r3
 8003290:	f640 720f 	movw	r2, #3855	@ 0xf0f
 8003294:	2105      	movs	r1, #5
 8003296:	4618      	mov	r0, r3
 8003298:	f001 f9cc 	bl	8004634 <CODEC_IO_Write>
 800329c:	4603      	mov	r3, r0
 800329e:	461a      	mov	r2, r3
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	4413      	add	r3, r2
 80032a4:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80032a6:	89fb      	ldrh	r3, [r7, #14]
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	2201      	movs	r2, #1
 80032ac:	f240 6101 	movw	r1, #1537	@ 0x601
 80032b0:	4618      	mov	r0, r3
 80032b2:	f001 f9bf 	bl	8004634 <CODEC_IO_Write>
 80032b6:	4603      	mov	r3, r0
 80032b8:	461a      	mov	r2, r3
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	4413      	add	r3, r2
 80032be:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80032c0:	89fb      	ldrh	r3, [r7, #14]
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	2201      	movs	r2, #1
 80032c6:	f240 6102 	movw	r1, #1538	@ 0x602
 80032ca:	4618      	mov	r0, r3
 80032cc:	f001 f9b2 	bl	8004634 <CODEC_IO_Write>
 80032d0:	4603      	mov	r3, r0
 80032d2:	461a      	mov	r2, r3
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	4413      	add	r3, r2
 80032d8:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 80032da:	89fb      	ldrh	r3, [r7, #14]
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	2202      	movs	r2, #2
 80032e0:	f240 6104 	movw	r1, #1540	@ 0x604
 80032e4:	4618      	mov	r0, r3
 80032e6:	f001 f9a5 	bl	8004634 <CODEC_IO_Write>
 80032ea:	4603      	mov	r3, r0
 80032ec:	461a      	mov	r2, r3
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	4413      	add	r3, r2
 80032f2:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
 80032f4:	89fb      	ldrh	r3, [r7, #14]
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	2202      	movs	r2, #2
 80032fa:	f240 6105 	movw	r1, #1541	@ 0x605
 80032fe:	4618      	mov	r0, r3
 8003300:	f001 f998 	bl	8004634 <CODEC_IO_Write>
 8003304:	4603      	mov	r3, r0
 8003306:	461a      	mov	r2, r3
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	4413      	add	r3, r2
 800330c:	61fb      	str	r3, [r7, #28]
      break;
 800330e:	e046      	b.n	800339e <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_AUTO :
    default:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8003310:	89fb      	ldrh	r3, [r7, #14]
 8003312:	b2db      	uxtb	r3, r3
 8003314:	f240 3203 	movw	r2, #771	@ 0x303
 8003318:	2105      	movs	r1, #5
 800331a:	4618      	mov	r0, r3
 800331c:	f001 f98a 	bl	8004634 <CODEC_IO_Write>
 8003320:	4603      	mov	r3, r0
 8003322:	461a      	mov	r2, r3
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	4413      	add	r3, r2
 8003328:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800332a:	89fb      	ldrh	r3, [r7, #14]
 800332c:	b2db      	uxtb	r3, r3
 800332e:	2201      	movs	r2, #1
 8003330:	f240 6101 	movw	r1, #1537	@ 0x601
 8003334:	4618      	mov	r0, r3
 8003336:	f001 f97d 	bl	8004634 <CODEC_IO_Write>
 800333a:	4603      	mov	r3, r0
 800333c:	461a      	mov	r2, r3
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	4413      	add	r3, r2
 8003342:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8003344:	89fb      	ldrh	r3, [r7, #14]
 8003346:	b2db      	uxtb	r3, r3
 8003348:	2201      	movs	r2, #1
 800334a:	f240 6102 	movw	r1, #1538	@ 0x602
 800334e:	4618      	mov	r0, r3
 8003350:	f001 f970 	bl	8004634 <CODEC_IO_Write>
 8003354:	4603      	mov	r3, r0
 8003356:	461a      	mov	r2, r3
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	4413      	add	r3, r2
 800335c:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 800335e:	89fb      	ldrh	r3, [r7, #14]
 8003360:	b2db      	uxtb	r3, r3
 8003362:	2200      	movs	r2, #0
 8003364:	f240 6104 	movw	r1, #1540	@ 0x604
 8003368:	4618      	mov	r0, r3
 800336a:	f001 f963 	bl	8004634 <CODEC_IO_Write>
 800336e:	4603      	mov	r3, r0
 8003370:	461a      	mov	r2, r3
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	4413      	add	r3, r2
 8003376:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8003378:	89fb      	ldrh	r3, [r7, #14]
 800337a:	b2db      	uxtb	r3, r3
 800337c:	2200      	movs	r2, #0
 800337e:	f240 6105 	movw	r1, #1541	@ 0x605
 8003382:	4618      	mov	r0, r3
 8003384:	f001 f956 	bl	8004634 <CODEC_IO_Write>
 8003388:	4603      	mov	r3, r0
 800338a:	461a      	mov	r2, r3
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	4413      	add	r3, r2
 8003390:	61fb      	str	r3, [r7, #28]
      break;
 8003392:	e004      	b.n	800339e <wm8994_Init+0x39e>
 8003394:	20030e84 	.word	0x20030e84
    }
  }
  else
  {
    outputEnabled = 0;
 8003398:	4b99      	ldr	r3, [pc, #612]	@ (8003600 <wm8994_Init+0x600>)
 800339a:	2200      	movs	r2, #0
 800339c:	601a      	str	r2, [r3, #0]
  }

  /* Path Configurations for input */
  if (input_device > 0)
 800339e:	8afb      	ldrh	r3, [r7, #22]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	f000 81ab 	beq.w	80036fc <wm8994_Init+0x6fc>
  {
    inputEnabled = 1;
 80033a6:	4b97      	ldr	r3, [pc, #604]	@ (8003604 <wm8994_Init+0x604>)
 80033a8:	2201      	movs	r2, #1
 80033aa:	601a      	str	r2, [r3, #0]
    switch (input_device)
 80033ac:	8afb      	ldrh	r3, [r7, #22]
 80033ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80033b2:	f000 8129 	beq.w	8003608 <wm8994_Init+0x608>
 80033b6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80033ba:	f300 819b 	bgt.w	80036f4 <wm8994_Init+0x6f4>
 80033be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80033c2:	d05a      	beq.n	800347a <wm8994_Init+0x47a>
 80033c4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80033c8:	f300 8194 	bgt.w	80036f4 <wm8994_Init+0x6f4>
 80033cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033d0:	f000 80c6 	beq.w	8003560 <wm8994_Init+0x560>
 80033d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80033d8:	f040 818c 	bne.w	80036f4 <wm8994_Init+0x6f4>
    {
    case INPUT_DEVICE_DIGITAL_MICROPHONE_2 :
      /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
       * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0C30);
 80033dc:	89fb      	ldrh	r3, [r7, #14]
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	f44f 6243 	mov.w	r2, #3120	@ 0xc30
 80033e4:	2104      	movs	r1, #4
 80033e6:	4618      	mov	r0, r3
 80033e8:	f001 f924 	bl	8004634 <CODEC_IO_Write>
 80033ec:	4603      	mov	r3, r0
 80033ee:	461a      	mov	r2, r3
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	4413      	add	r3, r2
 80033f4:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 80033f6:	89fb      	ldrh	r3, [r7, #14]
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	22db      	movs	r2, #219	@ 0xdb
 80033fc:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 8003400:	4618      	mov	r0, r3
 8003402:	f001 f917 	bl	8004634 <CODEC_IO_Write>
 8003406:	4603      	mov	r3, r0
 8003408:	461a      	mov	r2, r3
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	4413      	add	r3, r2
 800340e:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6000);
 8003410:	89fb      	ldrh	r3, [r7, #14]
 8003412:	b2db      	uxtb	r3, r3
 8003414:	f44f 42c0 	mov.w	r2, #24576	@ 0x6000
 8003418:	2102      	movs	r1, #2
 800341a:	4618      	mov	r0, r3
 800341c:	f001 f90a 	bl	8004634 <CODEC_IO_Write>
 8003420:	4603      	mov	r3, r0
 8003422:	461a      	mov	r2, r3
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	4413      	add	r3, r2
 8003428:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 800342a:	89fb      	ldrh	r3, [r7, #14]
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2202      	movs	r2, #2
 8003430:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 8003434:	4618      	mov	r0, r3
 8003436:	f001 f8fd 	bl	8004634 <CODEC_IO_Write>
 800343a:	4603      	mov	r3, r0
 800343c:	461a      	mov	r2, r3
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	4413      	add	r3, r2
 8003442:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8003444:	89fb      	ldrh	r3, [r7, #14]
 8003446:	b2db      	uxtb	r3, r3
 8003448:	2202      	movs	r2, #2
 800344a:	f240 6109 	movw	r1, #1545	@ 0x609
 800344e:	4618      	mov	r0, r3
 8003450:	f001 f8f0 	bl	8004634 <CODEC_IO_Write>
 8003454:	4603      	mov	r3, r0
 8003456:	461a      	mov	r2, r3
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	4413      	add	r3, r2
 800345c:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000E);
 800345e:	89fb      	ldrh	r3, [r7, #14]
 8003460:	b2db      	uxtb	r3, r3
 8003462:	220e      	movs	r2, #14
 8003464:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8003468:	4618      	mov	r0, r3
 800346a:	f001 f8e3 	bl	8004634 <CODEC_IO_Write>
 800346e:	4603      	mov	r3, r0
 8003470:	461a      	mov	r2, r3
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	4413      	add	r3, r2
 8003476:	61fb      	str	r3, [r7, #28]
      break;
 8003478:	e143      	b.n	8003702 <wm8994_Init+0x702>

    case INPUT_DEVICE_INPUT_LINE_1 :
      /* IN1LN_TO_IN1L, IN1LP_TO_VMID, IN1RN_TO_IN1R, IN1RP_TO_VMID */
      counter += CODEC_IO_Write(DeviceAddr, 0x28, 0x0011);
 800347a:	89fb      	ldrh	r3, [r7, #14]
 800347c:	b2db      	uxtb	r3, r3
 800347e:	2211      	movs	r2, #17
 8003480:	2128      	movs	r1, #40	@ 0x28
 8003482:	4618      	mov	r0, r3
 8003484:	f001 f8d6 	bl	8004634 <CODEC_IO_Write>
 8003488:	4603      	mov	r3, r0
 800348a:	461a      	mov	r2, r3
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	4413      	add	r3, r2
 8003490:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1L_TO_MIXINL and +30dB on IN1L PGA output */
      counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0035);
 8003492:	89fb      	ldrh	r3, [r7, #14]
 8003494:	b2db      	uxtb	r3, r3
 8003496:	2235      	movs	r2, #53	@ 0x35
 8003498:	2129      	movs	r1, #41	@ 0x29
 800349a:	4618      	mov	r0, r3
 800349c:	f001 f8ca 	bl	8004634 <CODEC_IO_Write>
 80034a0:	4603      	mov	r3, r0
 80034a2:	461a      	mov	r2, r3
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	4413      	add	r3, r2
 80034a8:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R_TO_MIXINL, Gain = +30dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0035);
 80034aa:	89fb      	ldrh	r3, [r7, #14]
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	2235      	movs	r2, #53	@ 0x35
 80034b0:	212a      	movs	r1, #42	@ 0x2a
 80034b2:	4618      	mov	r0, r3
 80034b4:	f001 f8be 	bl	8004634 <CODEC_IO_Write>
 80034b8:	4603      	mov	r3, r0
 80034ba:	461a      	mov	r2, r3
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	4413      	add	r3, r2
 80034c0:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0303);
 80034c2:	89fb      	ldrh	r3, [r7, #14]
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	f240 3203 	movw	r2, #771	@ 0x303
 80034ca:	2104      	movs	r1, #4
 80034cc:	4618      	mov	r0, r3
 80034ce:	f001 f8b1 	bl	8004634 <CODEC_IO_Write>
 80034d2:	4603      	mov	r3, r0
 80034d4:	461a      	mov	r2, r3
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	4413      	add	r3, r2
 80034da:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 80034dc:	89fb      	ldrh	r3, [r7, #14]
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	22db      	movs	r2, #219	@ 0xdb
 80034e2:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 80034e6:	4618      	mov	r0, r3
 80034e8:	f001 f8a4 	bl	8004634 <CODEC_IO_Write>
 80034ec:	4603      	mov	r3, r0
 80034ee:	461a      	mov	r2, r3
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	4413      	add	r3, r2
 80034f4:	61fb      	str	r3, [r7, #28]

      /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 80034f6:	89fb      	ldrh	r3, [r7, #14]
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	f246 3250 	movw	r2, #25424	@ 0x6350
 80034fe:	2102      	movs	r1, #2
 8003500:	4618      	mov	r0, r3
 8003502:	f001 f897 	bl	8004634 <CODEC_IO_Write>
 8003506:	4603      	mov	r3, r0
 8003508:	461a      	mov	r2, r3
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	4413      	add	r3, r2
 800350e:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8003510:	89fb      	ldrh	r3, [r7, #14]
 8003512:	b2db      	uxtb	r3, r3
 8003514:	2202      	movs	r2, #2
 8003516:	f240 6106 	movw	r1, #1542	@ 0x606
 800351a:	4618      	mov	r0, r3
 800351c:	f001 f88a 	bl	8004634 <CODEC_IO_Write>
 8003520:	4603      	mov	r3, r0
 8003522:	461a      	mov	r2, r3
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	4413      	add	r3, r2
 8003528:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 800352a:	89fb      	ldrh	r3, [r7, #14]
 800352c:	b2db      	uxtb	r3, r3
 800352e:	2202      	movs	r2, #2
 8003530:	f240 6107 	movw	r1, #1543	@ 0x607
 8003534:	4618      	mov	r0, r3
 8003536:	f001 f87d 	bl	8004634 <CODEC_IO_Write>
 800353a:	4603      	mov	r3, r0
 800353c:	461a      	mov	r2, r3
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	4413      	add	r3, r2
 8003542:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8003544:	89fb      	ldrh	r3, [r7, #14]
 8003546:	b2db      	uxtb	r3, r3
 8003548:	220d      	movs	r2, #13
 800354a:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 800354e:	4618      	mov	r0, r3
 8003550:	f001 f870 	bl	8004634 <CODEC_IO_Write>
 8003554:	4603      	mov	r3, r0
 8003556:	461a      	mov	r2, r3
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	4413      	add	r3, r2
 800355c:	61fb      	str	r3, [r7, #28]
      break;
 800355e:	e0d0      	b.n	8003702 <wm8994_Init+0x702>

    case INPUT_DEVICE_DIGITAL_MICROPHONE_1 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x030C);
 8003560:	89fb      	ldrh	r3, [r7, #14]
 8003562:	b2db      	uxtb	r3, r3
 8003564:	f44f 7243 	mov.w	r2, #780	@ 0x30c
 8003568:	2104      	movs	r1, #4
 800356a:	4618      	mov	r0, r3
 800356c:	f001 f862 	bl	8004634 <CODEC_IO_Write>
 8003570:	4603      	mov	r3, r0
 8003572:	461a      	mov	r2, r3
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	4413      	add	r3, r2
 8003578:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 800357a:	89fb      	ldrh	r3, [r7, #14]
 800357c:	b2db      	uxtb	r3, r3
 800357e:	22db      	movs	r2, #219	@ 0xdb
 8003580:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 8003584:	4618      	mov	r0, r3
 8003586:	f001 f855 	bl	8004634 <CODEC_IO_Write>
 800358a:	4603      	mov	r3, r0
 800358c:	461a      	mov	r2, r3
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	4413      	add	r3, r2
 8003592:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8003594:	89fb      	ldrh	r3, [r7, #14]
 8003596:	b2db      	uxtb	r3, r3
 8003598:	f246 3250 	movw	r2, #25424	@ 0x6350
 800359c:	2102      	movs	r1, #2
 800359e:	4618      	mov	r0, r3
 80035a0:	f001 f848 	bl	8004634 <CODEC_IO_Write>
 80035a4:	4603      	mov	r3, r0
 80035a6:	461a      	mov	r2, r3
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	4413      	add	r3, r2
 80035ac:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 80035ae:	89fb      	ldrh	r3, [r7, #14]
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	2202      	movs	r2, #2
 80035b4:	f240 6106 	movw	r1, #1542	@ 0x606
 80035b8:	4618      	mov	r0, r3
 80035ba:	f001 f83b 	bl	8004634 <CODEC_IO_Write>
 80035be:	4603      	mov	r3, r0
 80035c0:	461a      	mov	r2, r3
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	4413      	add	r3, r2
 80035c6:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 80035c8:	89fb      	ldrh	r3, [r7, #14]
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	2202      	movs	r2, #2
 80035ce:	f240 6107 	movw	r1, #1543	@ 0x607
 80035d2:	4618      	mov	r0, r3
 80035d4:	f001 f82e 	bl	8004634 <CODEC_IO_Write>
 80035d8:	4603      	mov	r3, r0
 80035da:	461a      	mov	r2, r3
 80035dc:	69fb      	ldr	r3, [r7, #28]
 80035de:	4413      	add	r3, r2
 80035e0:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 80035e2:	89fb      	ldrh	r3, [r7, #14]
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	220d      	movs	r2, #13
 80035e8:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 80035ec:	4618      	mov	r0, r3
 80035ee:	f001 f821 	bl	8004634 <CODEC_IO_Write>
 80035f2:	4603      	mov	r3, r0
 80035f4:	461a      	mov	r2, r3
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	4413      	add	r3, r2
 80035fa:	61fb      	str	r3, [r7, #28]
      break; 
 80035fc:	e081      	b.n	8003702 <wm8994_Init+0x702>
 80035fe:	bf00      	nop
 8003600:	20030e84 	.word	0x20030e84
 8003604:	20030e88 	.word	0x20030e88
    case INPUT_DEVICE_DIGITAL_MIC1_MIC2 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0F3C);
 8003608:	89fb      	ldrh	r3, [r7, #14]
 800360a:	b2db      	uxtb	r3, r3
 800360c:	f640 723c 	movw	r2, #3900	@ 0xf3c
 8003610:	2104      	movs	r1, #4
 8003612:	4618      	mov	r0, r3
 8003614:	f001 f80e 	bl	8004634 <CODEC_IO_Write>
 8003618:	4603      	mov	r3, r0
 800361a:	461a      	mov	r2, r3
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	4413      	add	r3, r2
 8003620:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8003622:	89fb      	ldrh	r3, [r7, #14]
 8003624:	b2db      	uxtb	r3, r3
 8003626:	22db      	movs	r2, #219	@ 0xdb
 8003628:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 800362c:	4618      	mov	r0, r3
 800362e:	f001 f801 	bl	8004634 <CODEC_IO_Write>
 8003632:	4603      	mov	r3, r0
 8003634:	461a      	mov	r2, r3
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	4413      	add	r3, r2
 800363a:	61fb      	str	r3, [r7, #28]
      
      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 800363c:	89fb      	ldrh	r3, [r7, #14]
 800363e:	b2db      	uxtb	r3, r3
 8003640:	22db      	movs	r2, #219	@ 0xdb
 8003642:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 8003646:	4618      	mov	r0, r3
 8003648:	f000 fff4 	bl	8004634 <CODEC_IO_Write>
 800364c:	4603      	mov	r3, r0
 800364e:	461a      	mov	r2, r3
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	4413      	add	r3, r2
 8003654:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x63A0);
 8003656:	89fb      	ldrh	r3, [r7, #14]
 8003658:	b2db      	uxtb	r3, r3
 800365a:	f246 32a0 	movw	r2, #25504	@ 0x63a0
 800365e:	2102      	movs	r1, #2
 8003660:	4618      	mov	r0, r3
 8003662:	f000 ffe7 	bl	8004634 <CODEC_IO_Write>
 8003666:	4603      	mov	r3, r0
 8003668:	461a      	mov	r2, r3
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	4413      	add	r3, r2
 800366e:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8003670:	89fb      	ldrh	r3, [r7, #14]
 8003672:	b2db      	uxtb	r3, r3
 8003674:	2202      	movs	r2, #2
 8003676:	f240 6106 	movw	r1, #1542	@ 0x606
 800367a:	4618      	mov	r0, r3
 800367c:	f000 ffda 	bl	8004634 <CODEC_IO_Write>
 8003680:	4603      	mov	r3, r0
 8003682:	461a      	mov	r2, r3
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	4413      	add	r3, r2
 8003688:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 800368a:	89fb      	ldrh	r3, [r7, #14]
 800368c:	b2db      	uxtb	r3, r3
 800368e:	2202      	movs	r2, #2
 8003690:	f240 6107 	movw	r1, #1543	@ 0x607
 8003694:	4618      	mov	r0, r3
 8003696:	f000 ffcd 	bl	8004634 <CODEC_IO_Write>
 800369a:	4603      	mov	r3, r0
 800369c:	461a      	mov	r2, r3
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	4413      	add	r3, r2
 80036a2:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 80036a4:	89fb      	ldrh	r3, [r7, #14]
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	2202      	movs	r2, #2
 80036aa:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 80036ae:	4618      	mov	r0, r3
 80036b0:	f000 ffc0 	bl	8004634 <CODEC_IO_Write>
 80036b4:	4603      	mov	r3, r0
 80036b6:	461a      	mov	r2, r3
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	4413      	add	r3, r2
 80036bc:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 80036be:	89fb      	ldrh	r3, [r7, #14]
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	2202      	movs	r2, #2
 80036c4:	f240 6109 	movw	r1, #1545	@ 0x609
 80036c8:	4618      	mov	r0, r3
 80036ca:	f000 ffb3 	bl	8004634 <CODEC_IO_Write>
 80036ce:	4603      	mov	r3, r0
 80036d0:	461a      	mov	r2, r3
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	4413      	add	r3, r2
 80036d6:	61fb      	str	r3, [r7, #28]
      
      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 80036d8:	89fb      	ldrh	r3, [r7, #14]
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	220d      	movs	r2, #13
 80036de:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 80036e2:	4618      	mov	r0, r3
 80036e4:	f000 ffa6 	bl	8004634 <CODEC_IO_Write>
 80036e8:	4603      	mov	r3, r0
 80036ea:	461a      	mov	r2, r3
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	4413      	add	r3, r2
 80036f0:	61fb      	str	r3, [r7, #28]
      break;    
 80036f2:	e006      	b.n	8003702 <wm8994_Init+0x702>
    case INPUT_DEVICE_INPUT_LINE_2 :
    default:
      /* Actually, no other input devices supported */
      counter++;
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	3301      	adds	r3, #1
 80036f8:	61fb      	str	r3, [r7, #28]
      break;
 80036fa:	e002      	b.n	8003702 <wm8994_Init+0x702>
    }
  }
  else
  {
    inputEnabled = 0;
 80036fc:	4ba4      	ldr	r3, [pc, #656]	@ (8003990 <wm8994_Init+0x990>)
 80036fe:	2200      	movs	r2, #0
 8003700:	601a      	str	r2, [r3, #0]
  }
  
  /*  Clock Configurations */
  switch (AudioFreq)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4aa3      	ldr	r2, [pc, #652]	@ (8003994 <wm8994_Init+0x994>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d079      	beq.n	80037fe <wm8994_Init+0x7fe>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4aa1      	ldr	r2, [pc, #644]	@ (8003994 <wm8994_Init+0x994>)
 800370e:	4293      	cmp	r3, r2
 8003710:	f200 80ad 	bhi.w	800386e <wm8994_Init+0x86e>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 800371a:	4293      	cmp	r3, r2
 800371c:	d061      	beq.n	80037e2 <wm8994_Init+0x7e2>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8003724:	4293      	cmp	r3, r2
 8003726:	f200 80a2 	bhi.w	800386e <wm8994_Init+0x86e>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8003730:	4293      	cmp	r3, r2
 8003732:	f000 808e 	beq.w	8003852 <wm8994_Init+0x852>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f64a 4244 	movw	r2, #44100	@ 0xac44
 800373c:	4293      	cmp	r3, r2
 800373e:	f200 8096 	bhi.w	800386e <wm8994_Init+0x86e>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8003748:	d03d      	beq.n	80037c6 <wm8994_Init+0x7c6>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8003750:	f200 808d 	bhi.w	800386e <wm8994_Init+0x86e>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f245 6222 	movw	r2, #22050	@ 0x5622
 800375a:	4293      	cmp	r3, r2
 800375c:	d06b      	beq.n	8003836 <wm8994_Init+0x836>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f245 6222 	movw	r2, #22050	@ 0x5622
 8003764:	4293      	cmp	r3, r2
 8003766:	f200 8082 	bhi.w	800386e <wm8994_Init+0x86e>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8003770:	d01b      	beq.n	80037aa <wm8994_Init+0x7aa>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8003778:	d879      	bhi.n	800386e <wm8994_Init+0x86e>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 8003780:	d005      	beq.n	800378e <wm8994_Init+0x78e>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f642 3211 	movw	r2, #11025	@ 0x2b11
 8003788:	4293      	cmp	r3, r2
 800378a:	d046      	beq.n	800381a <wm8994_Init+0x81a>
 800378c:	e06f      	b.n	800386e <wm8994_Init+0x86e>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 800378e:	89fb      	ldrh	r3, [r7, #14]
 8003790:	b2db      	uxtb	r3, r3
 8003792:	2203      	movs	r2, #3
 8003794:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003798:	4618      	mov	r0, r3
 800379a:	f000 ff4b 	bl	8004634 <CODEC_IO_Write>
 800379e:	4603      	mov	r3, r0
 80037a0:	461a      	mov	r2, r3
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	4413      	add	r3, r2
 80037a6:	61fb      	str	r3, [r7, #28]
    break;
 80037a8:	e06f      	b.n	800388a <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 80037aa:	89fb      	ldrh	r3, [r7, #14]
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	2233      	movs	r2, #51	@ 0x33
 80037b0:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80037b4:	4618      	mov	r0, r3
 80037b6:	f000 ff3d 	bl	8004634 <CODEC_IO_Write>
 80037ba:	4603      	mov	r3, r0
 80037bc:	461a      	mov	r2, r3
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	4413      	add	r3, r2
 80037c2:	61fb      	str	r3, [r7, #28]
    break;
 80037c4:	e061      	b.n	800388a <wm8994_Init+0x88a>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 80037c6:	89fb      	ldrh	r3, [r7, #14]
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	2263      	movs	r2, #99	@ 0x63
 80037cc:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80037d0:	4618      	mov	r0, r3
 80037d2:	f000 ff2f 	bl	8004634 <CODEC_IO_Write>
 80037d6:	4603      	mov	r3, r0
 80037d8:	461a      	mov	r2, r3
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	4413      	add	r3, r2
 80037de:	61fb      	str	r3, [r7, #28]
    break;
 80037e0:	e053      	b.n	800388a <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 80037e2:	89fb      	ldrh	r3, [r7, #14]
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	2283      	movs	r2, #131	@ 0x83
 80037e8:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80037ec:	4618      	mov	r0, r3
 80037ee:	f000 ff21 	bl	8004634 <CODEC_IO_Write>
 80037f2:	4603      	mov	r3, r0
 80037f4:	461a      	mov	r2, r3
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	4413      	add	r3, r2
 80037fa:	61fb      	str	r3, [r7, #28]
    break;
 80037fc:	e045      	b.n	800388a <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 80037fe:	89fb      	ldrh	r3, [r7, #14]
 8003800:	b2db      	uxtb	r3, r3
 8003802:	22a3      	movs	r2, #163	@ 0xa3
 8003804:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003808:	4618      	mov	r0, r3
 800380a:	f000 ff13 	bl	8004634 <CODEC_IO_Write>
 800380e:	4603      	mov	r3, r0
 8003810:	461a      	mov	r2, r3
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	4413      	add	r3, r2
 8003816:	61fb      	str	r3, [r7, #28]
    break;
 8003818:	e037      	b.n	800388a <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 800381a:	89fb      	ldrh	r3, [r7, #14]
 800381c:	b2db      	uxtb	r3, r3
 800381e:	2213      	movs	r2, #19
 8003820:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003824:	4618      	mov	r0, r3
 8003826:	f000 ff05 	bl	8004634 <CODEC_IO_Write>
 800382a:	4603      	mov	r3, r0
 800382c:	461a      	mov	r2, r3
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	4413      	add	r3, r2
 8003832:	61fb      	str	r3, [r7, #28]
    break;
 8003834:	e029      	b.n	800388a <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8003836:	89fb      	ldrh	r3, [r7, #14]
 8003838:	b2db      	uxtb	r3, r3
 800383a:	2243      	movs	r2, #67	@ 0x43
 800383c:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003840:	4618      	mov	r0, r3
 8003842:	f000 fef7 	bl	8004634 <CODEC_IO_Write>
 8003846:	4603      	mov	r3, r0
 8003848:	461a      	mov	r2, r3
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	4413      	add	r3, r2
 800384e:	61fb      	str	r3, [r7, #28]
    break;
 8003850:	e01b      	b.n	800388a <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 8003852:	89fb      	ldrh	r3, [r7, #14]
 8003854:	b2db      	uxtb	r3, r3
 8003856:	2273      	movs	r2, #115	@ 0x73
 8003858:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800385c:	4618      	mov	r0, r3
 800385e:	f000 fee9 	bl	8004634 <CODEC_IO_Write>
 8003862:	4603      	mov	r3, r0
 8003864:	461a      	mov	r2, r3
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	4413      	add	r3, r2
 800386a:	61fb      	str	r3, [r7, #28]
    break; 
 800386c:	e00d      	b.n	800388a <wm8994_Init+0x88a>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 800386e:	89fb      	ldrh	r3, [r7, #14]
 8003870:	b2db      	uxtb	r3, r3
 8003872:	2283      	movs	r2, #131	@ 0x83
 8003874:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003878:	4618      	mov	r0, r3
 800387a:	f000 fedb 	bl	8004634 <CODEC_IO_Write>
 800387e:	4603      	mov	r3, r0
 8003880:	461a      	mov	r2, r3
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	4413      	add	r3, r2
 8003886:	61fb      	str	r3, [r7, #28]
    break; 
 8003888:	bf00      	nop
  }

  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 800388a:	8afb      	ldrh	r3, [r7, #22]
 800388c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003890:	d10e      	bne.n	80038b0 <wm8994_Init+0x8b0>
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4018);    
 8003892:	89fb      	ldrh	r3, [r7, #14]
 8003894:	b2db      	uxtb	r3, r3
 8003896:	f244 0218 	movw	r2, #16408	@ 0x4018
 800389a:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800389e:	4618      	mov	r0, r3
 80038a0:	f000 fec8 	bl	8004634 <CODEC_IO_Write>
 80038a4:	4603      	mov	r3, r0
 80038a6:	461a      	mov	r2, r3
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	4413      	add	r3, r2
 80038ac:	61fb      	str	r3, [r7, #28]
 80038ae:	e00d      	b.n	80038cc <wm8994_Init+0x8cc>
  }
  else
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4010);
 80038b0:	89fb      	ldrh	r3, [r7, #14]
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	f244 0210 	movw	r2, #16400	@ 0x4010
 80038b8:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80038bc:	4618      	mov	r0, r3
 80038be:	f000 feb9 	bl	8004634 <CODEC_IO_Write>
 80038c2:	4603      	mov	r3, r0
 80038c4:	461a      	mov	r2, r3
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	4413      	add	r3, r2
 80038ca:	61fb      	str	r3, [r7, #28]
  }
  
  /* slave mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x302, 0x0000);
 80038cc:	89fb      	ldrh	r3, [r7, #14]
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	2200      	movs	r2, #0
 80038d2:	f240 3102 	movw	r1, #770	@ 0x302
 80038d6:	4618      	mov	r0, r3
 80038d8:	f000 feac 	bl	8004634 <CODEC_IO_Write>
 80038dc:	4603      	mov	r3, r0
 80038de:	461a      	mov	r2, r3
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	4413      	add	r3, r2
 80038e4:	61fb      	str	r3, [r7, #28]
  
  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  counter += CODEC_IO_Write(DeviceAddr, 0x208, 0x000A);
 80038e6:	89fb      	ldrh	r3, [r7, #14]
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	220a      	movs	r2, #10
 80038ec:	f44f 7102 	mov.w	r1, #520	@ 0x208
 80038f0:	4618      	mov	r0, r3
 80038f2:	f000 fe9f 	bl	8004634 <CODEC_IO_Write>
 80038f6:	4603      	mov	r3, r0
 80038f8:	461a      	mov	r2, r3
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	4413      	add	r3, r2
 80038fe:	61fb      	str	r3, [r7, #28]
  
  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0001);
 8003900:	89fb      	ldrh	r3, [r7, #14]
 8003902:	b2db      	uxtb	r3, r3
 8003904:	2201      	movs	r2, #1
 8003906:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800390a:	4618      	mov	r0, r3
 800390c:	f000 fe92 	bl	8004634 <CODEC_IO_Write>
 8003910:	4603      	mov	r3, r0
 8003912:	461a      	mov	r2, r3
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	4413      	add	r3, r2
 8003918:	61fb      	str	r3, [r7, #28]

  if (output_device > 0)  /* Audio output selected */
 800391a:	8b3b      	ldrh	r3, [r7, #24]
 800391c:	2b00      	cmp	r3, #0
 800391e:	f000 817b 	beq.w	8003c18 <wm8994_Init+0xc18>
  {
    if (output_device == OUTPUT_DEVICE_HEADPHONE)
 8003922:	8b3b      	ldrh	r3, [r7, #24]
 8003924:	2b02      	cmp	r3, #2
 8003926:	d157      	bne.n	80039d8 <wm8994_Init+0x9d8>
    {      
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0100);
 8003928:	89fb      	ldrh	r3, [r7, #14]
 800392a:	b2db      	uxtb	r3, r3
 800392c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003930:	212d      	movs	r1, #45	@ 0x2d
 8003932:	4618      	mov	r0, r3
 8003934:	f000 fe7e 	bl	8004634 <CODEC_IO_Write>
 8003938:	4603      	mov	r3, r0
 800393a:	461a      	mov	r2, r3
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	4413      	add	r3, r2
 8003940:	61fb      	str	r3, [r7, #28]
      
      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0100);    
 8003942:	89fb      	ldrh	r3, [r7, #14]
 8003944:	b2db      	uxtb	r3, r3
 8003946:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800394a:	212e      	movs	r1, #46	@ 0x2e
 800394c:	4618      	mov	r0, r3
 800394e:	f000 fe71 	bl	8004634 <CODEC_IO_Write>
 8003952:	4603      	mov	r3, r0
 8003954:	461a      	mov	r2, r3
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	4413      	add	r3, r2
 800395a:	61fb      	str	r3, [r7, #28]
            
      /* Startup sequence for Headphone */
      if(ColdStartup)
 800395c:	4b0e      	ldr	r3, [pc, #56]	@ (8003998 <wm8994_Init+0x998>)
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d01b      	beq.n	800399c <wm8994_Init+0x99c>
      {
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8100);
 8003964:	89fb      	ldrh	r3, [r7, #14]
 8003966:	b2db      	uxtb	r3, r3
 8003968:	f44f 4201 	mov.w	r2, #33024	@ 0x8100
 800396c:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8003970:	4618      	mov	r0, r3
 8003972:	f000 fe5f 	bl	8004634 <CODEC_IO_Write>
 8003976:	4603      	mov	r3, r0
 8003978:	461a      	mov	r2, r3
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	4413      	add	r3, r2
 800397e:	61fb      	str	r3, [r7, #28]
        
        ColdStartup=0;
 8003980:	4b05      	ldr	r3, [pc, #20]	@ (8003998 <wm8994_Init+0x998>)
 8003982:	2200      	movs	r2, #0
 8003984:	701a      	strb	r2, [r3, #0]
        /* Add Delay */
        AUDIO_IO_Delay(300);
 8003986:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800398a:	f001 f829 	bl	80049e0 <AUDIO_IO_Delay>
 800398e:	e016      	b.n	80039be <wm8994_Init+0x9be>
 8003990:	20030e88 	.word	0x20030e88
 8003994:	00017700 	.word	0x00017700
 8003998:	200000f4 	.word	0x200000f4
      }
      else /* Headphone Warm Start-Up */
      { 
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8108);
 800399c:	89fb      	ldrh	r3, [r7, #14]
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	f248 1208 	movw	r2, #33032	@ 0x8108
 80039a4:	f44f 7188 	mov.w	r1, #272	@ 0x110
 80039a8:	4618      	mov	r0, r3
 80039aa:	f000 fe43 	bl	8004634 <CODEC_IO_Write>
 80039ae:	4603      	mov	r3, r0
 80039b0:	461a      	mov	r2, r3
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	4413      	add	r3, r2
 80039b6:	61fb      	str	r3, [r7, #28]
        /* Add Delay */
        AUDIO_IO_Delay(50);
 80039b8:	2032      	movs	r0, #50	@ 0x32
 80039ba:	f001 f811 	bl	80049e0 <AUDIO_IO_Delay>
      }

      /* Soft un-Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 80039be:	89fb      	ldrh	r3, [r7, #14]
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	2200      	movs	r2, #0
 80039c4:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 80039c8:	4618      	mov	r0, r3
 80039ca:	f000 fe33 	bl	8004634 <CODEC_IO_Write>
 80039ce:	4603      	mov	r3, r0
 80039d0:	461a      	mov	r2, r3
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	4413      	add	r3, r2
 80039d6:	61fb      	str	r3, [r7, #28]
    }
    /* Analog Output Configuration */

    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0300);
 80039d8:	89fb      	ldrh	r3, [r7, #14]
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80039e0:	2103      	movs	r1, #3
 80039e2:	4618      	mov	r0, r3
 80039e4:	f000 fe26 	bl	8004634 <CODEC_IO_Write>
 80039e8:	4603      	mov	r3, r0
 80039ea:	461a      	mov	r2, r3
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	4413      	add	r3, r2
 80039f0:	61fb      	str	r3, [r7, #28]

    /* Left Speaker Mixer Volume = 0dB */
    counter += CODEC_IO_Write(DeviceAddr, 0x22, 0x0000);
 80039f2:	89fb      	ldrh	r3, [r7, #14]
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	2200      	movs	r2, #0
 80039f8:	2122      	movs	r1, #34	@ 0x22
 80039fa:	4618      	mov	r0, r3
 80039fc:	f000 fe1a 	bl	8004634 <CODEC_IO_Write>
 8003a00:	4603      	mov	r3, r0
 8003a02:	461a      	mov	r2, r3
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	4413      	add	r3, r2
 8003a08:	61fb      	str	r3, [r7, #28]

    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x23, 0x0000);
 8003a0a:	89fb      	ldrh	r3, [r7, #14]
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	2200      	movs	r2, #0
 8003a10:	2123      	movs	r1, #35	@ 0x23
 8003a12:	4618      	mov	r0, r3
 8003a14:	f000 fe0e 	bl	8004634 <CODEC_IO_Write>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	4413      	add	r3, r2
 8003a20:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x36, 0x0300);
 8003a22:	89fb      	ldrh	r3, [r7, #14]
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8003a2a:	2136      	movs	r1, #54	@ 0x36
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f000 fe01 	bl	8004634 <CODEC_IO_Write>
 8003a32:	4603      	mov	r3, r0
 8003a34:	461a      	mov	r2, r3
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	4413      	add	r3, r2
 8003a3a:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x3003);
 8003a3c:	89fb      	ldrh	r3, [r7, #14]
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	f243 0203 	movw	r2, #12291	@ 0x3003
 8003a44:	2101      	movs	r1, #1
 8003a46:	4618      	mov	r0, r3
 8003a48:	f000 fdf4 	bl	8004634 <CODEC_IO_Write>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	461a      	mov	r2, r3
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	4413      	add	r3, r2
 8003a54:	61fb      	str	r3, [r7, #28]

    /* Headphone/Speaker Enable */

    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8003a56:	8afb      	ldrh	r3, [r7, #22]
 8003a58:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a5c:	d10d      	bne.n	8003a7a <wm8994_Init+0xa7a>
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0205);
 8003a5e:	89fb      	ldrh	r3, [r7, #14]
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	f240 2205 	movw	r2, #517	@ 0x205
 8003a66:	2151      	movs	r1, #81	@ 0x51
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f000 fde3 	bl	8004634 <CODEC_IO_Write>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	461a      	mov	r2, r3
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	4413      	add	r3, r2
 8003a76:	61fb      	str	r3, [r7, #28]
 8003a78:	e00b      	b.n	8003a92 <wm8994_Init+0xa92>
    }
    else
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0005);      
 8003a7a:	89fb      	ldrh	r3, [r7, #14]
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	2205      	movs	r2, #5
 8003a80:	2151      	movs	r1, #81	@ 0x51
 8003a82:	4618      	mov	r0, r3
 8003a84:	f000 fdd6 	bl	8004634 <CODEC_IO_Write>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	4413      	add	r3, r2
 8003a90:	61fb      	str	r3, [r7, #28]
    }

    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 8003a92:	8b7b      	ldrh	r3, [r7, #26]
 8003a94:	f443 534c 	orr.w	r3, r3, #13056	@ 0x3300
 8003a98:	f043 0303 	orr.w	r3, r3, #3
 8003a9c:	837b      	strh	r3, [r7, #26]
    counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8003a9e:	89fb      	ldrh	r3, [r7, #14]
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	8b7a      	ldrh	r2, [r7, #26]
 8003aa4:	2101      	movs	r1, #1
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f000 fdc4 	bl	8004634 <CODEC_IO_Write>
 8003aac:	4603      	mov	r3, r0
 8003aae:	461a      	mov	r2, r3
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	4413      	add	r3, r2
 8003ab4:	61fb      	str	r3, [r7, #28]

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x0022);
 8003ab6:	89fb      	ldrh	r3, [r7, #14]
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	2222      	movs	r2, #34	@ 0x22
 8003abc:	2160      	movs	r1, #96	@ 0x60
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f000 fdb8 	bl	8004634 <CODEC_IO_Write>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	4413      	add	r3, r2
 8003acc:	61fb      	str	r3, [r7, #28]

    /* Enable Charge Pump */
    counter += CODEC_IO_Write(DeviceAddr, 0x4C, 0x9F25);
 8003ace:	89fb      	ldrh	r3, [r7, #14]
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	f649 7225 	movw	r2, #40741	@ 0x9f25
 8003ad6:	214c      	movs	r1, #76	@ 0x4c
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f000 fdab 	bl	8004634 <CODEC_IO_Write>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	4413      	add	r3, r2
 8003ae6:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(15);
 8003ae8:	200f      	movs	r0, #15
 8003aea:	f000 ff79 	bl	80049e0 <AUDIO_IO_Delay>

    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0001);
 8003aee:	89fb      	ldrh	r3, [r7, #14]
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	2201      	movs	r2, #1
 8003af4:	212d      	movs	r1, #45	@ 0x2d
 8003af6:	4618      	mov	r0, r3
 8003af8:	f000 fd9c 	bl	8004634 <CODEC_IO_Write>
 8003afc:	4603      	mov	r3, r0
 8003afe:	461a      	mov	r2, r3
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	4413      	add	r3, r2
 8003b04:	61fb      	str	r3, [r7, #28]

    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0001);
 8003b06:	89fb      	ldrh	r3, [r7, #14]
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	212e      	movs	r1, #46	@ 0x2e
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f000 fd90 	bl	8004634 <CODEC_IO_Write>
 8003b14:	4603      	mov	r3, r0
 8003b16:	461a      	mov	r2, r3
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	4413      	add	r3, r2
 8003b1c:	61fb      	str	r3, [r7, #28]

    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0030 | 0x0300);
 8003b1e:	89fb      	ldrh	r3, [r7, #14]
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	f44f 724c 	mov.w	r2, #816	@ 0x330
 8003b26:	2103      	movs	r1, #3
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f000 fd83 	bl	8004634 <CODEC_IO_Write>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	461a      	mov	r2, r3
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	4413      	add	r3, r2
 8003b36:	61fb      	str	r3, [r7, #28]

    /* Enable DC Servo and trigger start-up mode on left and right channels */
    counter += CODEC_IO_Write(DeviceAddr, 0x54, 0x0033);
 8003b38:	89fb      	ldrh	r3, [r7, #14]
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	2233      	movs	r2, #51	@ 0x33
 8003b3e:	2154      	movs	r1, #84	@ 0x54
 8003b40:	4618      	mov	r0, r3
 8003b42:	f000 fd77 	bl	8004634 <CODEC_IO_Write>
 8003b46:	4603      	mov	r3, r0
 8003b48:	461a      	mov	r2, r3
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	4413      	add	r3, r2
 8003b4e:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(257);
 8003b50:	f240 1001 	movw	r0, #257	@ 0x101
 8003b54:	f000 ff44 	bl	80049e0 <AUDIO_IO_Delay>

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x00EE);
 8003b58:	89fb      	ldrh	r3, [r7, #14]
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	22ee      	movs	r2, #238	@ 0xee
 8003b5e:	2160      	movs	r1, #96	@ 0x60
 8003b60:	4618      	mov	r0, r3
 8003b62:	f000 fd67 	bl	8004634 <CODEC_IO_Write>
 8003b66:	4603      	mov	r3, r0
 8003b68:	461a      	mov	r2, r3
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	4413      	add	r3, r2
 8003b6e:	61fb      	str	r3, [r7, #28]

    /* Unmutes */

    /* Unmute DAC 1 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x610, 0x00C0);
 8003b70:	89fb      	ldrh	r3, [r7, #14]
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	22c0      	movs	r2, #192	@ 0xc0
 8003b76:	f44f 61c2 	mov.w	r1, #1552	@ 0x610
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f000 fd5a 	bl	8004634 <CODEC_IO_Write>
 8003b80:	4603      	mov	r3, r0
 8003b82:	461a      	mov	r2, r3
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	4413      	add	r3, r2
 8003b88:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 1 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x611, 0x00C0);
 8003b8a:	89fb      	ldrh	r3, [r7, #14]
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	22c0      	movs	r2, #192	@ 0xc0
 8003b90:	f240 6111 	movw	r1, #1553	@ 0x611
 8003b94:	4618      	mov	r0, r3
 8003b96:	f000 fd4d 	bl	8004634 <CODEC_IO_Write>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	4413      	add	r3, r2
 8003ba2:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 0 DAC path */
    counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 8003ba4:	89fb      	ldrh	r3, [r7, #14]
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	2210      	movs	r2, #16
 8003baa:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f000 fd40 	bl	8004634 <CODEC_IO_Write>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	4413      	add	r3, r2
 8003bbc:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x612, 0x00C0);
 8003bbe:	89fb      	ldrh	r3, [r7, #14]
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	22c0      	movs	r2, #192	@ 0xc0
 8003bc4:	f240 6112 	movw	r1, #1554	@ 0x612
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f000 fd33 	bl	8004634 <CODEC_IO_Write>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	4413      	add	r3, r2
 8003bd6:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x613, 0x00C0);
 8003bd8:	89fb      	ldrh	r3, [r7, #14]
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	22c0      	movs	r2, #192	@ 0xc0
 8003bde:	f240 6113 	movw	r1, #1555	@ 0x613
 8003be2:	4618      	mov	r0, r3
 8003be4:	f000 fd26 	bl	8004634 <CODEC_IO_Write>
 8003be8:	4603      	mov	r3, r0
 8003bea:	461a      	mov	r2, r3
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	4413      	add	r3, r2
 8003bf0:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 8003bf2:	89fb      	ldrh	r3, [r7, #14]
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	2210      	movs	r2, #16
 8003bf8:	f240 4122 	movw	r1, #1058	@ 0x422
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f000 fd19 	bl	8004634 <CODEC_IO_Write>
 8003c02:	4603      	mov	r3, r0
 8003c04:	461a      	mov	r2, r3
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	4413      	add	r3, r2
 8003c0a:	61fb      	str	r3, [r7, #28]
    
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8003c0c:	7afa      	ldrb	r2, [r7, #11]
 8003c0e:	89fb      	ldrh	r3, [r7, #14]
 8003c10:	4611      	mov	r1, r2
 8003c12:	4618      	mov	r0, r3
 8003c14:	f000 f984 	bl	8003f20 <wm8994_SetVolume>
  }

  if (input_device > 0) /* Audio input selected */
 8003c18:	8afb      	ldrh	r3, [r7, #22]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	f000 80a6 	beq.w	8003d6c <wm8994_Init+0xd6c>
  {
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 8003c20:	8afb      	ldrh	r3, [r7, #22]
 8003c22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c26:	d003      	beq.n	8003c30 <wm8994_Init+0xc30>
 8003c28:	8afb      	ldrh	r3, [r7, #22]
 8003c2a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c2e:	d12b      	bne.n	8003c88 <wm8994_Init+0xc88>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8003c30:	8b7b      	ldrh	r3, [r7, #26]
 8003c32:	f043 0313 	orr.w	r3, r3, #19
 8003c36:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8003c38:	89fb      	ldrh	r3, [r7, #14]
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	8b7a      	ldrh	r2, [r7, #26]
 8003c3e:	2101      	movs	r1, #1
 8003c40:	4618      	mov	r0, r3
 8003c42:	f000 fcf7 	bl	8004634 <CODEC_IO_Write>
 8003c46:	4603      	mov	r3, r0
 8003c48:	461a      	mov	r2, r3
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	4413      	add	r3, r2
 8003c4e:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8003c50:	89fb      	ldrh	r3, [r7, #14]
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	2202      	movs	r2, #2
 8003c56:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f000 fcea 	bl	8004634 <CODEC_IO_Write>
 8003c60:	4603      	mov	r3, r0
 8003c62:	461a      	mov	r2, r3
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	4413      	add	r3, r2
 8003c68:	61fb      	str	r3, [r7, #28]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x3800);
 8003c6a:	89fb      	ldrh	r3, [r7, #14]
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003c72:	f240 4111 	movw	r1, #1041	@ 0x411
 8003c76:	4618      	mov	r0, r3
 8003c78:	f000 fcdc 	bl	8004634 <CODEC_IO_Write>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	461a      	mov	r2, r3
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	4413      	add	r3, r2
 8003c84:	61fb      	str	r3, [r7, #28]
 8003c86:	e06b      	b.n	8003d60 <wm8994_Init+0xd60>
    }
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8003c88:	8afb      	ldrh	r3, [r7, #22]
 8003c8a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c8e:	d139      	bne.n	8003d04 <wm8994_Init+0xd04>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8003c90:	8b7b      	ldrh	r3, [r7, #26]
 8003c92:	f043 0313 	orr.w	r3, r3, #19
 8003c96:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8003c98:	89fb      	ldrh	r3, [r7, #14]
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	8b7a      	ldrh	r2, [r7, #26]
 8003c9e:	2101      	movs	r1, #1
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f000 fcc7 	bl	8004634 <CODEC_IO_Write>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	461a      	mov	r2, r3
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	4413      	add	r3, r2
 8003cae:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8003cb0:	89fb      	ldrh	r3, [r7, #14]
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	2202      	movs	r2, #2
 8003cb6:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f000 fcba 	bl	8004634 <CODEC_IO_Write>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	4413      	add	r3, r2
 8003cc8:	61fb      	str	r3, [r7, #28]
    
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8003cca:	89fb      	ldrh	r3, [r7, #14]
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8003cd2:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f000 fcac 	bl	8004634 <CODEC_IO_Write>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	461a      	mov	r2, r3
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	4413      	add	r3, r2
 8003ce4:	61fb      	str	r3, [r7, #28]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x1800);      
 8003ce6:	89fb      	ldrh	r3, [r7, #14]
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8003cee:	f240 4111 	movw	r1, #1041	@ 0x411
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f000 fc9e 	bl	8004634 <CODEC_IO_Write>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	4413      	add	r3, r2
 8003d00:	61fb      	str	r3, [r7, #28]
 8003d02:	e02d      	b.n	8003d60 <wm8994_Init+0xd60>
    }    
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 8003d04:	8afb      	ldrh	r3, [r7, #22]
 8003d06:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d0a:	d003      	beq.n	8003d14 <wm8994_Init+0xd14>
 8003d0c:	8afb      	ldrh	r3, [r7, #22]
 8003d0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d12:	d125      	bne.n	8003d60 <wm8994_Init+0xd60>
    {

      /* Disable mute on IN1L, IN1L Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x18, 0x000B);
 8003d14:	89fb      	ldrh	r3, [r7, #14]
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	220b      	movs	r2, #11
 8003d1a:	2118      	movs	r1, #24
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f000 fc89 	bl	8004634 <CODEC_IO_Write>
 8003d22:	4603      	mov	r3, r0
 8003d24:	461a      	mov	r2, r3
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	4413      	add	r3, r2
 8003d2a:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R, IN1R Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x1A, 0x000B);
 8003d2c:	89fb      	ldrh	r3, [r7, #14]
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	220b      	movs	r2, #11
 8003d32:	211a      	movs	r1, #26
 8003d34:	4618      	mov	r0, r3
 8003d36:	f000 fc7d 	bl	8004634 <CODEC_IO_Write>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	4413      	add	r3, r2
 8003d42:	61fb      	str	r3, [r7, #28]

      /* AIF ADC1 HPF enable, HPF cut = hifi mode fc=4Hz at fs=48kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8003d44:	89fb      	ldrh	r3, [r7, #14]
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8003d4c:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 8003d50:	4618      	mov	r0, r3
 8003d52:	f000 fc6f 	bl	8004634 <CODEC_IO_Write>
 8003d56:	4603      	mov	r3, r0
 8003d58:	461a      	mov	r2, r3
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	4413      	add	r3, r2
 8003d5e:	61fb      	str	r3, [r7, #28]
    }
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8003d60:	7afa      	ldrb	r2, [r7, #11]
 8003d62:	89fb      	ldrh	r3, [r7, #14]
 8003d64:	4611      	mov	r1, r2
 8003d66:	4618      	mov	r0, r3
 8003d68:	f000 f8da 	bl	8003f20 <wm8994_SetVolume>
  }
  /* Return communication control value */
  return counter;  
 8003d6c:	69fb      	ldr	r3, [r7, #28]
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3720      	adds	r7, #32
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop

08003d78 <wm8994_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void wm8994_DeInit(void)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 8003d7c:	f000 fdd2 	bl	8004924 <AUDIO_IO_DeInit>
}
 8003d80:	bf00      	nop
 8003d82:	bd80      	pop	{r7, pc}

08003d84 <wm8994_ReadID>:
  * @brief  Get the WM8994 ID.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval The WM8994 ID 
  */
uint32_t wm8994_ReadID(uint16_t DeviceAddr)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b082      	sub	sp, #8
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	80fb      	strh	r3, [r7, #6]
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 8003d8e:	f000 fdbf 	bl	8004910 <AUDIO_IO_Init>

  return ((uint32_t)AUDIO_IO_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 8003d92:	88fb      	ldrh	r3, [r7, #6]
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	2100      	movs	r1, #0
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f000 fdf5 	bl	8004988 <AUDIO_IO_Read>
 8003d9e:	4603      	mov	r3, r0
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3708      	adds	r7, #8
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <wm8994_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	4603      	mov	r3, r0
 8003db0:	6039      	str	r1, [r7, #0]
 8003db2:	80fb      	strh	r3, [r7, #6]
 8003db4:	4613      	mov	r3, r2
 8003db6:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 8003db8:	2300      	movs	r3, #0
 8003dba:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8003dbc:	88fb      	ldrh	r3, [r7, #6]
 8003dbe:	2100      	movs	r1, #0
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f000 f9d1 	bl	8004168 <wm8994_SetMute>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	4413      	add	r3, r2
 8003dcc:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8003dce:	68fb      	ldr	r3, [r7, #12]
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3710      	adds	r7, #16
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <wm8994_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Pause(uint16_t DeviceAddr)
{  
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b084      	sub	sp, #16
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	4603      	mov	r3, r0
 8003de0:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8003de2:	2300      	movs	r3, #0
 8003de4:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8003de6:	88fb      	ldrh	r3, [r7, #6]
 8003de8:	2101      	movs	r1, #1
 8003dea:	4618      	mov	r0, r3
 8003dec:	f000 f9bc 	bl	8004168 <wm8994_SetMute>
 8003df0:	4602      	mov	r2, r0
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	4413      	add	r3, r2
 8003df6:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x01);
 8003df8:	88fb      	ldrh	r3, [r7, #6]
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	2102      	movs	r1, #2
 8003e00:	4618      	mov	r0, r3
 8003e02:	f000 fc17 	bl	8004634 <CODEC_IO_Write>
 8003e06:	4603      	mov	r3, r0
 8003e08:	461a      	mov	r2, r3
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	4413      	add	r3, r2
 8003e0e:	60fb      	str	r3, [r7, #12]
 
  return counter;
 8003e10:	68fb      	ldr	r3, [r7, #12]
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3710      	adds	r7, #16
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}

08003e1a <wm8994_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Resume(uint16_t DeviceAddr)
{
 8003e1a:	b580      	push	{r7, lr}
 8003e1c:	b084      	sub	sp, #16
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	4603      	mov	r3, r0
 8003e22:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8003e24:	2300      	movs	r3, #0
 8003e26:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8003e28:	88fb      	ldrh	r3, [r7, #6]
 8003e2a:	2100      	movs	r1, #0
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f000 f99b 	bl	8004168 <wm8994_SetMute>
 8003e32:	4602      	mov	r2, r0
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	4413      	add	r3, r2
 8003e38:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3710      	adds	r7, #16
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <wm8994_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	6039      	str	r1, [r7, #0]
 8003e4e:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8003e50:	2300      	movs	r3, #0
 8003e52:	60fb      	str	r3, [r7, #12]

  if (outputEnabled != 0)
 8003e54:	4b31      	ldr	r3, [pc, #196]	@ (8003f1c <wm8994_Stop+0xd8>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d05a      	beq.n	8003f12 <wm8994_Stop+0xce>
  {
    /* Mute the output first */
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8003e5c:	88fb      	ldrh	r3, [r7, #6]
 8003e5e:	2101      	movs	r1, #1
 8003e60:	4618      	mov	r0, r3
 8003e62:	f000 f981 	bl	8004168 <wm8994_SetMute>
 8003e66:	4602      	mov	r2, r0
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	4413      	add	r3, r2
 8003e6c:	60fb      	str	r3, [r7, #12]

    if (CodecPdwnMode == CODEC_PDWN_SW)
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	d04e      	beq.n	8003f12 <wm8994_Stop+0xce>
      /* Only output mute required*/
    }
    else /* CODEC_PDWN_HW */
    {
      /* Mute the AIF1 Timeslot 0 DAC1 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8003e74:	88fb      	ldrh	r3, [r7, #6]
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e7c:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8003e80:	4618      	mov	r0, r3
 8003e82:	f000 fbd7 	bl	8004634 <CODEC_IO_Write>
 8003e86:	4603      	mov	r3, r0
 8003e88:	461a      	mov	r2, r3
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	4413      	add	r3, r2
 8003e8e:	60fb      	str	r3, [r7, #12]

      /* Mute the AIF1 Timeslot 1 DAC2 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 8003e90:	88fb      	ldrh	r3, [r7, #6]
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e98:	f240 4122 	movw	r1, #1058	@ 0x422
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f000 fbc9 	bl	8004634 <CODEC_IO_Write>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	4413      	add	r3, r2
 8003eaa:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1L_TO_HPOUT1L */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0000);
 8003eac:	88fb      	ldrh	r3, [r7, #6]
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	212d      	movs	r1, #45	@ 0x2d
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f000 fbbd 	bl	8004634 <CODEC_IO_Write>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	4413      	add	r3, r2
 8003ec2:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1R_TO_HPOUT1R */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0000);
 8003ec4:	88fb      	ldrh	r3, [r7, #6]
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	2200      	movs	r2, #0
 8003eca:	212e      	movs	r1, #46	@ 0x2e
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f000 fbb1 	bl	8004634 <CODEC_IO_Write>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	4413      	add	r3, r2
 8003eda:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1 and DAC2 */
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0000);
 8003edc:	88fb      	ldrh	r3, [r7, #6]
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	2105      	movs	r1, #5
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f000 fba5 	bl	8004634 <CODEC_IO_Write>
 8003eea:	4603      	mov	r3, r0
 8003eec:	461a      	mov	r2, r3
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	4413      	add	r3, r2
 8003ef2:	60fb      	str	r3, [r7, #12]

      /* Reset Codec by writing in 0x0000 address register */
      counter += CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8003ef4:	88fb      	ldrh	r3, [r7, #6]
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	2200      	movs	r2, #0
 8003efa:	2100      	movs	r1, #0
 8003efc:	4618      	mov	r0, r3
 8003efe:	f000 fb99 	bl	8004634 <CODEC_IO_Write>
 8003f02:	4603      	mov	r3, r0
 8003f04:	461a      	mov	r2, r3
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	4413      	add	r3, r2
 8003f0a:	60fb      	str	r3, [r7, #12]

      outputEnabled = 0;
 8003f0c:	4b03      	ldr	r3, [pc, #12]	@ (8003f1c <wm8994_Stop+0xd8>)
 8003f0e:	2200      	movs	r2, #0
 8003f10:	601a      	str	r2, [r3, #0]
    }
  }
  return counter;
 8003f12:	68fb      	ldr	r3, [r7, #12]
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3710      	adds	r7, #16
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	20030e84 	.word	0x20030e84

08003f20 <wm8994_SetVolume>:
  * @param Volume: a byte value from 0 to 255 (refer to codec registers 
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b084      	sub	sp, #16
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	4603      	mov	r3, r0
 8003f28:	460a      	mov	r2, r1
 8003f2a:	80fb      	strh	r3, [r7, #6]
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8003f30:	2300      	movs	r3, #0
 8003f32:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8003f34:	797b      	ldrb	r3, [r7, #5]
 8003f36:	2b64      	cmp	r3, #100	@ 0x64
 8003f38:	d80b      	bhi.n	8003f52 <wm8994_SetVolume+0x32>
 8003f3a:	797a      	ldrb	r2, [r7, #5]
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	019b      	lsls	r3, r3, #6
 8003f40:	1a9b      	subs	r3, r3, r2
 8003f42:	4a86      	ldr	r2, [pc, #536]	@ (800415c <wm8994_SetVolume+0x23c>)
 8003f44:	fb82 1203 	smull	r1, r2, r2, r3
 8003f48:	1152      	asrs	r2, r2, #5
 8003f4a:	17db      	asrs	r3, r3, #31
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	e000      	b.n	8003f54 <wm8994_SetVolume+0x34>
 8003f52:	2364      	movs	r3, #100	@ 0x64
 8003f54:	72fb      	strb	r3, [r7, #11]

  /* Output volume */
  if (outputEnabled != 0)
 8003f56:	4b82      	ldr	r3, [pc, #520]	@ (8004160 <wm8994_SetVolume+0x240>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	f000 809b 	beq.w	8004096 <wm8994_SetVolume+0x176>
  {
    if(convertedvol > 0x3E)
 8003f60:	7afb      	ldrb	r3, [r7, #11]
 8003f62:	2b3e      	cmp	r3, #62	@ 0x3e
 8003f64:	d93d      	bls.n	8003fe2 <wm8994_SetVolume+0xc2>
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8003f66:	88fb      	ldrh	r3, [r7, #6]
 8003f68:	2100      	movs	r1, #0
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f000 f8fc 	bl	8004168 <wm8994_SetMute>
 8003f70:	4602      	mov	r2, r0
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	4413      	add	r3, r2
 8003f76:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 8003f78:	88fb      	ldrh	r3, [r7, #6]
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	f240 127f 	movw	r2, #383	@ 0x17f
 8003f80:	211c      	movs	r1, #28
 8003f82:	4618      	mov	r0, r3
 8003f84:	f000 fb56 	bl	8004634 <CODEC_IO_Write>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	4413      	add	r3, r2
 8003f90:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 8003f92:	88fb      	ldrh	r3, [r7, #6]
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	f240 127f 	movw	r2, #383	@ 0x17f
 8003f9a:	211d      	movs	r1, #29
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f000 fb49 	bl	8004634 <CODEC_IO_Write>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	4413      	add	r3, r2
 8003faa:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 8003fac:	88fb      	ldrh	r3, [r7, #6]
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	f240 127f 	movw	r2, #383	@ 0x17f
 8003fb4:	2126      	movs	r1, #38	@ 0x26
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f000 fb3c 	bl	8004634 <CODEC_IO_Write>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 8003fc6:	88fb      	ldrh	r3, [r7, #6]
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	f240 127f 	movw	r2, #383	@ 0x17f
 8003fce:	2127      	movs	r1, #39	@ 0x27
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f000 fb2f 	bl	8004634 <CODEC_IO_Write>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	461a      	mov	r2, r3
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	4413      	add	r3, r2
 8003fde:	60fb      	str	r3, [r7, #12]
 8003fe0:	e059      	b.n	8004096 <wm8994_SetVolume+0x176>
    }
    else if (Volume == 0)
 8003fe2:	797b      	ldrb	r3, [r7, #5]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d109      	bne.n	8003ffc <wm8994_SetVolume+0xdc>
    {
      /* Mute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8003fe8:	88fb      	ldrh	r3, [r7, #6]
 8003fea:	2101      	movs	r1, #1
 8003fec:	4618      	mov	r0, r3
 8003fee:	f000 f8bb 	bl	8004168 <wm8994_SetMute>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	4413      	add	r3, r2
 8003ff8:	60fb      	str	r3, [r7, #12]
 8003ffa:	e04c      	b.n	8004096 <wm8994_SetVolume+0x176>
    }
    else
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8003ffc:	88fb      	ldrh	r3, [r7, #6]
 8003ffe:	2100      	movs	r1, #0
 8004000:	4618      	mov	r0, r3
 8004002:	f000 f8b1 	bl	8004168 <wm8994_SetMute>
 8004006:	4602      	mov	r2, r0
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	4413      	add	r3, r2
 800400c:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 800400e:	88fb      	ldrh	r3, [r7, #6]
 8004010:	b2d8      	uxtb	r0, r3
 8004012:	7afb      	ldrb	r3, [r7, #11]
 8004014:	b21b      	sxth	r3, r3
 8004016:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 800401a:	b21b      	sxth	r3, r3
 800401c:	b29b      	uxth	r3, r3
 800401e:	461a      	mov	r2, r3
 8004020:	211c      	movs	r1, #28
 8004022:	f000 fb07 	bl	8004634 <CODEC_IO_Write>
 8004026:	4603      	mov	r3, r0
 8004028:	461a      	mov	r2, r3
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	4413      	add	r3, r2
 800402e:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 8004030:	88fb      	ldrh	r3, [r7, #6]
 8004032:	b2d8      	uxtb	r0, r3
 8004034:	7afb      	ldrb	r3, [r7, #11]
 8004036:	b21b      	sxth	r3, r3
 8004038:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 800403c:	b21b      	sxth	r3, r3
 800403e:	b29b      	uxth	r3, r3
 8004040:	461a      	mov	r2, r3
 8004042:	211d      	movs	r1, #29
 8004044:	f000 faf6 	bl	8004634 <CODEC_IO_Write>
 8004048:	4603      	mov	r3, r0
 800404a:	461a      	mov	r2, r3
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	4413      	add	r3, r2
 8004050:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 8004052:	88fb      	ldrh	r3, [r7, #6]
 8004054:	b2d8      	uxtb	r0, r3
 8004056:	7afb      	ldrb	r3, [r7, #11]
 8004058:	b21b      	sxth	r3, r3
 800405a:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 800405e:	b21b      	sxth	r3, r3
 8004060:	b29b      	uxth	r3, r3
 8004062:	461a      	mov	r2, r3
 8004064:	2126      	movs	r1, #38	@ 0x26
 8004066:	f000 fae5 	bl	8004634 <CODEC_IO_Write>
 800406a:	4603      	mov	r3, r0
 800406c:	461a      	mov	r2, r3
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	4413      	add	r3, r2
 8004072:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 8004074:	88fb      	ldrh	r3, [r7, #6]
 8004076:	b2d8      	uxtb	r0, r3
 8004078:	7afb      	ldrb	r3, [r7, #11]
 800407a:	b21b      	sxth	r3, r3
 800407c:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8004080:	b21b      	sxth	r3, r3
 8004082:	b29b      	uxth	r3, r3
 8004084:	461a      	mov	r2, r3
 8004086:	2127      	movs	r1, #39	@ 0x27
 8004088:	f000 fad4 	bl	8004634 <CODEC_IO_Write>
 800408c:	4603      	mov	r3, r0
 800408e:	461a      	mov	r2, r3
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	4413      	add	r3, r2
 8004094:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Input volume */
  if (inputEnabled != 0)
 8004096:	4b33      	ldr	r3, [pc, #204]	@ (8004164 <wm8994_SetVolume+0x244>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d059      	beq.n	8004152 <wm8994_SetVolume+0x232>
  {
    convertedvol = VOLUME_IN_CONVERT(Volume);
 800409e:	797b      	ldrb	r3, [r7, #5]
 80040a0:	2b63      	cmp	r3, #99	@ 0x63
 80040a2:	d80c      	bhi.n	80040be <wm8994_SetVolume+0x19e>
 80040a4:	797a      	ldrb	r2, [r7, #5]
 80040a6:	4613      	mov	r3, r2
 80040a8:	011b      	lsls	r3, r3, #4
 80040aa:	1a9b      	subs	r3, r3, r2
 80040ac:	011b      	lsls	r3, r3, #4
 80040ae:	4a2b      	ldr	r2, [pc, #172]	@ (800415c <wm8994_SetVolume+0x23c>)
 80040b0:	fb82 1203 	smull	r1, r2, r2, r3
 80040b4:	1152      	asrs	r2, r2, #5
 80040b6:	17db      	asrs	r3, r3, #31
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	e000      	b.n	80040c0 <wm8994_SetVolume+0x1a0>
 80040be:	23ef      	movs	r3, #239	@ 0xef
 80040c0:	72fb      	strb	r3, [r7, #11]

    /* Left AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 80040c2:	88fb      	ldrh	r3, [r7, #6]
 80040c4:	b2d8      	uxtb	r0, r3
 80040c6:	7afb      	ldrb	r3, [r7, #11]
 80040c8:	b21b      	sxth	r3, r3
 80040ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040ce:	b21b      	sxth	r3, r3
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	461a      	mov	r2, r3
 80040d4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80040d8:	f000 faac 	bl	8004634 <CODEC_IO_Write>
 80040dc:	4603      	mov	r3, r0
 80040de:	461a      	mov	r2, r3
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	4413      	add	r3, r2
 80040e4:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x401, convertedvol | 0x100);
 80040e6:	88fb      	ldrh	r3, [r7, #6]
 80040e8:	b2d8      	uxtb	r0, r3
 80040ea:	7afb      	ldrb	r3, [r7, #11]
 80040ec:	b21b      	sxth	r3, r3
 80040ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040f2:	b21b      	sxth	r3, r3
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	461a      	mov	r2, r3
 80040f8:	f240 4101 	movw	r1, #1025	@ 0x401
 80040fc:	f000 fa9a 	bl	8004634 <CODEC_IO_Write>
 8004100:	4603      	mov	r3, r0
 8004102:	461a      	mov	r2, r3
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	4413      	add	r3, r2
 8004108:	60fb      	str	r3, [r7, #12]

    /* Left AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x404, convertedvol | 0x100);
 800410a:	88fb      	ldrh	r3, [r7, #6]
 800410c:	b2d8      	uxtb	r0, r3
 800410e:	7afb      	ldrb	r3, [r7, #11]
 8004110:	b21b      	sxth	r3, r3
 8004112:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004116:	b21b      	sxth	r3, r3
 8004118:	b29b      	uxth	r3, r3
 800411a:	461a      	mov	r2, r3
 800411c:	f240 4104 	movw	r1, #1028	@ 0x404
 8004120:	f000 fa88 	bl	8004634 <CODEC_IO_Write>
 8004124:	4603      	mov	r3, r0
 8004126:	461a      	mov	r2, r3
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	4413      	add	r3, r2
 800412c:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x405, convertedvol | 0x100);
 800412e:	88fb      	ldrh	r3, [r7, #6]
 8004130:	b2d8      	uxtb	r0, r3
 8004132:	7afb      	ldrb	r3, [r7, #11]
 8004134:	b21b      	sxth	r3, r3
 8004136:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800413a:	b21b      	sxth	r3, r3
 800413c:	b29b      	uxth	r3, r3
 800413e:	461a      	mov	r2, r3
 8004140:	f240 4105 	movw	r1, #1029	@ 0x405
 8004144:	f000 fa76 	bl	8004634 <CODEC_IO_Write>
 8004148:	4603      	mov	r3, r0
 800414a:	461a      	mov	r2, r3
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	4413      	add	r3, r2
 8004150:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 8004152:	68fb      	ldr	r3, [r7, #12]
}
 8004154:	4618      	mov	r0, r3
 8004156:	3710      	adds	r7, #16
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}
 800415c:	51eb851f 	.word	0x51eb851f
 8004160:	20030e84 	.word	0x20030e84
 8004164:	20030e88 	.word	0x20030e88

08004168 <wm8994_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b084      	sub	sp, #16
 800416c:	af00      	add	r7, sp, #0
 800416e:	4603      	mov	r3, r0
 8004170:	6039      	str	r1, [r7, #0]
 8004172:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8004174:	2300      	movs	r3, #0
 8004176:	60fb      	str	r3, [r7, #12]
  
  if (outputEnabled != 0)
 8004178:	4b21      	ldr	r3, [pc, #132]	@ (8004200 <wm8994_SetMute+0x98>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d039      	beq.n	80041f4 <wm8994_SetMute+0x8c>
  {
    /* Set the Mute mode */
    if(Cmd == AUDIO_MUTE_ON)
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	2b01      	cmp	r3, #1
 8004184:	d11c      	bne.n	80041c0 <wm8994_SetMute+0x58>
    {
      /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8004186:	88fb      	ldrh	r3, [r7, #6]
 8004188:	b2db      	uxtb	r3, r3
 800418a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800418e:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8004192:	4618      	mov	r0, r3
 8004194:	f000 fa4e 	bl	8004634 <CODEC_IO_Write>
 8004198:	4603      	mov	r3, r0
 800419a:	461a      	mov	r2, r3
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	4413      	add	r3, r2
 80041a0:	60fb      	str	r3, [r7, #12]

      /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 80041a2:	88fb      	ldrh	r3, [r7, #6]
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80041aa:	f240 4122 	movw	r1, #1058	@ 0x422
 80041ae:	4618      	mov	r0, r3
 80041b0:	f000 fa40 	bl	8004634 <CODEC_IO_Write>
 80041b4:	4603      	mov	r3, r0
 80041b6:	461a      	mov	r2, r3
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	4413      	add	r3, r2
 80041bc:	60fb      	str	r3, [r7, #12]
 80041be:	e019      	b.n	80041f4 <wm8994_SetMute+0x8c>
    }
    else /* AUDIO_MUTE_OFF Disable the Mute */
    {
      /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 80041c0:	88fb      	ldrh	r3, [r7, #6]
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	2210      	movs	r2, #16
 80041c6:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 80041ca:	4618      	mov	r0, r3
 80041cc:	f000 fa32 	bl	8004634 <CODEC_IO_Write>
 80041d0:	4603      	mov	r3, r0
 80041d2:	461a      	mov	r2, r3
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	4413      	add	r3, r2
 80041d8:	60fb      	str	r3, [r7, #12]

      /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 80041da:	88fb      	ldrh	r3, [r7, #6]
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	2210      	movs	r2, #16
 80041e0:	f240 4122 	movw	r1, #1058	@ 0x422
 80041e4:	4618      	mov	r0, r3
 80041e6:	f000 fa25 	bl	8004634 <CODEC_IO_Write>
 80041ea:	4603      	mov	r3, r0
 80041ec:	461a      	mov	r2, r3
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	4413      	add	r3, r2
 80041f2:	60fb      	str	r3, [r7, #12]
    }
  }
  return counter;
 80041f4:	68fb      	ldr	r3, [r7, #12]
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3710      	adds	r7, #16
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop
 8004200:	20030e84 	.word	0x20030e84

08004204 <wm8994_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af00      	add	r7, sp, #0
 800420a:	4603      	mov	r3, r0
 800420c:	460a      	mov	r2, r1
 800420e:	80fb      	strh	r3, [r7, #6]
 8004210:	4613      	mov	r3, r2
 8004212:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 8004214:	2300      	movs	r3, #0
 8004216:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 8004218:	797b      	ldrb	r3, [r7, #5]
 800421a:	2b03      	cmp	r3, #3
 800421c:	f000 808c 	beq.w	8004338 <wm8994_SetOutputMode+0x134>
 8004220:	2b03      	cmp	r3, #3
 8004222:	f300 80cb 	bgt.w	80043bc <wm8994_SetOutputMode+0x1b8>
 8004226:	2b01      	cmp	r3, #1
 8004228:	d002      	beq.n	8004230 <wm8994_SetOutputMode+0x2c>
 800422a:	2b02      	cmp	r3, #2
 800422c:	d042      	beq.n	80042b4 <wm8994_SetOutputMode+0xb0>
 800422e:	e0c5      	b.n	80043bc <wm8994_SetOutputMode+0x1b8>
  {
  case OUTPUT_DEVICE_SPEAKER:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    Disable DAC2 (Left), Disable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8004230:	88fb      	ldrh	r3, [r7, #6]
 8004232:	b2db      	uxtb	r3, r3
 8004234:	f640 420c 	movw	r2, #3084	@ 0xc0c
 8004238:	2105      	movs	r1, #5
 800423a:	4618      	mov	r0, r3
 800423c:	f000 f9fa 	bl	8004634 <CODEC_IO_Write>
 8004240:	4603      	mov	r3, r0
 8004242:	461a      	mov	r2, r3
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	4413      	add	r3, r2
 8004248:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 800424a:	88fb      	ldrh	r3, [r7, #6]
 800424c:	b2db      	uxtb	r3, r3
 800424e:	2200      	movs	r2, #0
 8004250:	f240 6101 	movw	r1, #1537	@ 0x601
 8004254:	4618      	mov	r0, r3
 8004256:	f000 f9ed 	bl	8004634 <CODEC_IO_Write>
 800425a:	4603      	mov	r3, r0
 800425c:	461a      	mov	r2, r3
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	4413      	add	r3, r2
 8004262:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8004264:	88fb      	ldrh	r3, [r7, #6]
 8004266:	b2db      	uxtb	r3, r3
 8004268:	2200      	movs	r2, #0
 800426a:	f240 6102 	movw	r1, #1538	@ 0x602
 800426e:	4618      	mov	r0, r3
 8004270:	f000 f9e0 	bl	8004634 <CODEC_IO_Write>
 8004274:	4603      	mov	r3, r0
 8004276:	461a      	mov	r2, r3
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	4413      	add	r3, r2
 800427c:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 800427e:	88fb      	ldrh	r3, [r7, #6]
 8004280:	b2db      	uxtb	r3, r3
 8004282:	2202      	movs	r2, #2
 8004284:	f240 6104 	movw	r1, #1540	@ 0x604
 8004288:	4618      	mov	r0, r3
 800428a:	f000 f9d3 	bl	8004634 <CODEC_IO_Write>
 800428e:	4603      	mov	r3, r0
 8004290:	461a      	mov	r2, r3
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	4413      	add	r3, r2
 8004296:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8004298:	88fb      	ldrh	r3, [r7, #6]
 800429a:	b2db      	uxtb	r3, r3
 800429c:	2202      	movs	r2, #2
 800429e:	f240 6105 	movw	r1, #1541	@ 0x605
 80042a2:	4618      	mov	r0, r3
 80042a4:	f000 f9c6 	bl	8004634 <CODEC_IO_Write>
 80042a8:	4603      	mov	r3, r0
 80042aa:	461a      	mov	r2, r3
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	4413      	add	r3, r2
 80042b0:	60fb      	str	r3, [r7, #12]
    break;
 80042b2:	e0c5      	b.n	8004440 <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 80042b4:	88fb      	ldrh	r3, [r7, #6]
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	f240 3203 	movw	r2, #771	@ 0x303
 80042bc:	2105      	movs	r1, #5
 80042be:	4618      	mov	r0, r3
 80042c0:	f000 f9b8 	bl	8004634 <CODEC_IO_Write>
 80042c4:	4603      	mov	r3, r0
 80042c6:	461a      	mov	r2, r3
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	4413      	add	r3, r2
 80042cc:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80042ce:	88fb      	ldrh	r3, [r7, #6]
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	2201      	movs	r2, #1
 80042d4:	f240 6101 	movw	r1, #1537	@ 0x601
 80042d8:	4618      	mov	r0, r3
 80042da:	f000 f9ab 	bl	8004634 <CODEC_IO_Write>
 80042de:	4603      	mov	r3, r0
 80042e0:	461a      	mov	r2, r3
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	4413      	add	r3, r2
 80042e6:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80042e8:	88fb      	ldrh	r3, [r7, #6]
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	2201      	movs	r2, #1
 80042ee:	f240 6102 	movw	r1, #1538	@ 0x602
 80042f2:	4618      	mov	r0, r3
 80042f4:	f000 f99e 	bl	8004634 <CODEC_IO_Write>
 80042f8:	4603      	mov	r3, r0
 80042fa:	461a      	mov	r2, r3
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	4413      	add	r3, r2
 8004300:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8004302:	88fb      	ldrh	r3, [r7, #6]
 8004304:	b2db      	uxtb	r3, r3
 8004306:	2200      	movs	r2, #0
 8004308:	f240 6104 	movw	r1, #1540	@ 0x604
 800430c:	4618      	mov	r0, r3
 800430e:	f000 f991 	bl	8004634 <CODEC_IO_Write>
 8004312:	4603      	mov	r3, r0
 8004314:	461a      	mov	r2, r3
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	4413      	add	r3, r2
 800431a:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 800431c:	88fb      	ldrh	r3, [r7, #6]
 800431e:	b2db      	uxtb	r3, r3
 8004320:	2200      	movs	r2, #0
 8004322:	f240 6105 	movw	r1, #1541	@ 0x605
 8004326:	4618      	mov	r0, r3
 8004328:	f000 f984 	bl	8004634 <CODEC_IO_Write>
 800432c:	4603      	mov	r3, r0
 800432e:	461a      	mov	r2, r3
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	4413      	add	r3, r2
 8004334:	60fb      	str	r3, [r7, #12]
    break;
 8004336:	e083      	b.n	8004440 <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_BOTH:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    also Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8004338:	88fb      	ldrh	r3, [r7, #6]
 800433a:	b2db      	uxtb	r3, r3
 800433c:	f640 720f 	movw	r2, #3855	@ 0xf0f
 8004340:	2105      	movs	r1, #5
 8004342:	4618      	mov	r0, r3
 8004344:	f000 f976 	bl	8004634 <CODEC_IO_Write>
 8004348:	4603      	mov	r3, r0
 800434a:	461a      	mov	r2, r3
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	4413      	add	r3, r2
 8004350:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8004352:	88fb      	ldrh	r3, [r7, #6]
 8004354:	b2db      	uxtb	r3, r3
 8004356:	2201      	movs	r2, #1
 8004358:	f240 6101 	movw	r1, #1537	@ 0x601
 800435c:	4618      	mov	r0, r3
 800435e:	f000 f969 	bl	8004634 <CODEC_IO_Write>
 8004362:	4603      	mov	r3, r0
 8004364:	461a      	mov	r2, r3
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	4413      	add	r3, r2
 800436a:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 800436c:	88fb      	ldrh	r3, [r7, #6]
 800436e:	b2db      	uxtb	r3, r3
 8004370:	2201      	movs	r2, #1
 8004372:	f240 6102 	movw	r1, #1538	@ 0x602
 8004376:	4618      	mov	r0, r3
 8004378:	f000 f95c 	bl	8004634 <CODEC_IO_Write>
 800437c:	4603      	mov	r3, r0
 800437e:	461a      	mov	r2, r3
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	4413      	add	r3, r2
 8004384:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8004386:	88fb      	ldrh	r3, [r7, #6]
 8004388:	b2db      	uxtb	r3, r3
 800438a:	2202      	movs	r2, #2
 800438c:	f240 6104 	movw	r1, #1540	@ 0x604
 8004390:	4618      	mov	r0, r3
 8004392:	f000 f94f 	bl	8004634 <CODEC_IO_Write>
 8004396:	4603      	mov	r3, r0
 8004398:	461a      	mov	r2, r3
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	4413      	add	r3, r2
 800439e:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 80043a0:	88fb      	ldrh	r3, [r7, #6]
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	2202      	movs	r2, #2
 80043a6:	f240 6105 	movw	r1, #1541	@ 0x605
 80043aa:	4618      	mov	r0, r3
 80043ac:	f000 f942 	bl	8004634 <CODEC_IO_Write>
 80043b0:	4603      	mov	r3, r0
 80043b2:	461a      	mov	r2, r3
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	4413      	add	r3, r2
 80043b8:	60fb      	str	r3, [r7, #12]
    break;
 80043ba:	e041      	b.n	8004440 <wm8994_SetOutputMode+0x23c>
    
  default:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 80043bc:	88fb      	ldrh	r3, [r7, #6]
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	f240 3203 	movw	r2, #771	@ 0x303
 80043c4:	2105      	movs	r1, #5
 80043c6:	4618      	mov	r0, r3
 80043c8:	f000 f934 	bl	8004634 <CODEC_IO_Write>
 80043cc:	4603      	mov	r3, r0
 80043ce:	461a      	mov	r2, r3
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	4413      	add	r3, r2
 80043d4:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80043d6:	88fb      	ldrh	r3, [r7, #6]
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	2201      	movs	r2, #1
 80043dc:	f240 6101 	movw	r1, #1537	@ 0x601
 80043e0:	4618      	mov	r0, r3
 80043e2:	f000 f927 	bl	8004634 <CODEC_IO_Write>
 80043e6:	4603      	mov	r3, r0
 80043e8:	461a      	mov	r2, r3
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	4413      	add	r3, r2
 80043ee:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80043f0:	88fb      	ldrh	r3, [r7, #6]
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	2201      	movs	r2, #1
 80043f6:	f240 6102 	movw	r1, #1538	@ 0x602
 80043fa:	4618      	mov	r0, r3
 80043fc:	f000 f91a 	bl	8004634 <CODEC_IO_Write>
 8004400:	4603      	mov	r3, r0
 8004402:	461a      	mov	r2, r3
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	4413      	add	r3, r2
 8004408:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 800440a:	88fb      	ldrh	r3, [r7, #6]
 800440c:	b2db      	uxtb	r3, r3
 800440e:	2200      	movs	r2, #0
 8004410:	f240 6104 	movw	r1, #1540	@ 0x604
 8004414:	4618      	mov	r0, r3
 8004416:	f000 f90d 	bl	8004634 <CODEC_IO_Write>
 800441a:	4603      	mov	r3, r0
 800441c:	461a      	mov	r2, r3
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	4413      	add	r3, r2
 8004422:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8004424:	88fb      	ldrh	r3, [r7, #6]
 8004426:	b2db      	uxtb	r3, r3
 8004428:	2200      	movs	r2, #0
 800442a:	f240 6105 	movw	r1, #1541	@ 0x605
 800442e:	4618      	mov	r0, r3
 8004430:	f000 f900 	bl	8004634 <CODEC_IO_Write>
 8004434:	4603      	mov	r3, r0
 8004436:	461a      	mov	r2, r3
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	4413      	add	r3, r2
 800443c:	60fb      	str	r3, [r7, #12]
    break;    
 800443e:	bf00      	nop
  }  
  return counter;
 8004440:	68fb      	ldr	r3, [r7, #12]
}
 8004442:	4618      	mov	r0, r3
 8004444:	3710      	adds	r7, #16
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
	...

0800444c <wm8994_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b084      	sub	sp, #16
 8004450:	af00      	add	r7, sp, #0
 8004452:	4603      	mov	r3, r0
 8004454:	6039      	str	r1, [r7, #0]
 8004456:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8004458:	2300      	movs	r3, #0
 800445a:	60fb      	str	r3, [r7, #12]
 
  /*  Clock Configurations */
  switch (AudioFreq)
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	4a64      	ldr	r2, [pc, #400]	@ (80045f0 <wm8994_SetFrequency+0x1a4>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d079      	beq.n	8004558 <wm8994_SetFrequency+0x10c>
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	4a62      	ldr	r2, [pc, #392]	@ (80045f0 <wm8994_SetFrequency+0x1a4>)
 8004468:	4293      	cmp	r3, r2
 800446a:	f200 80ad 	bhi.w	80045c8 <wm8994_SetFrequency+0x17c>
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8004474:	4293      	cmp	r3, r2
 8004476:	d061      	beq.n	800453c <wm8994_SetFrequency+0xf0>
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 800447e:	4293      	cmp	r3, r2
 8004480:	f200 80a2 	bhi.w	80045c8 <wm8994_SetFrequency+0x17c>
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	f64a 4244 	movw	r2, #44100	@ 0xac44
 800448a:	4293      	cmp	r3, r2
 800448c:	f000 808e 	beq.w	80045ac <wm8994_SetFrequency+0x160>
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8004496:	4293      	cmp	r3, r2
 8004498:	f200 8096 	bhi.w	80045c8 <wm8994_SetFrequency+0x17c>
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 80044a2:	d03d      	beq.n	8004520 <wm8994_SetFrequency+0xd4>
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 80044aa:	f200 808d 	bhi.w	80045c8 <wm8994_SetFrequency+0x17c>
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	f245 6222 	movw	r2, #22050	@ 0x5622
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d06b      	beq.n	8004590 <wm8994_SetFrequency+0x144>
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	f245 6222 	movw	r2, #22050	@ 0x5622
 80044be:	4293      	cmp	r3, r2
 80044c0:	f200 8082 	bhi.w	80045c8 <wm8994_SetFrequency+0x17c>
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 80044ca:	d01b      	beq.n	8004504 <wm8994_SetFrequency+0xb8>
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 80044d2:	d879      	bhi.n	80045c8 <wm8994_SetFrequency+0x17c>
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 80044da:	d005      	beq.n	80044e8 <wm8994_SetFrequency+0x9c>
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	f642 3211 	movw	r2, #11025	@ 0x2b11
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d046      	beq.n	8004574 <wm8994_SetFrequency+0x128>
 80044e6:	e06f      	b.n	80045c8 <wm8994_SetFrequency+0x17c>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 80044e8:	88fb      	ldrh	r3, [r7, #6]
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	2203      	movs	r2, #3
 80044ee:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80044f2:	4618      	mov	r0, r3
 80044f4:	f000 f89e 	bl	8004634 <CODEC_IO_Write>
 80044f8:	4603      	mov	r3, r0
 80044fa:	461a      	mov	r2, r3
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	4413      	add	r3, r2
 8004500:	60fb      	str	r3, [r7, #12]
    break;
 8004502:	e06f      	b.n	80045e4 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 8004504:	88fb      	ldrh	r3, [r7, #6]
 8004506:	b2db      	uxtb	r3, r3
 8004508:	2233      	movs	r2, #51	@ 0x33
 800450a:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800450e:	4618      	mov	r0, r3
 8004510:	f000 f890 	bl	8004634 <CODEC_IO_Write>
 8004514:	4603      	mov	r3, r0
 8004516:	461a      	mov	r2, r3
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	4413      	add	r3, r2
 800451c:	60fb      	str	r3, [r7, #12]
    break;
 800451e:	e061      	b.n	80045e4 <wm8994_SetFrequency+0x198>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 8004520:	88fb      	ldrh	r3, [r7, #6]
 8004522:	b2db      	uxtb	r3, r3
 8004524:	2263      	movs	r2, #99	@ 0x63
 8004526:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800452a:	4618      	mov	r0, r3
 800452c:	f000 f882 	bl	8004634 <CODEC_IO_Write>
 8004530:	4603      	mov	r3, r0
 8004532:	461a      	mov	r2, r3
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	4413      	add	r3, r2
 8004538:	60fb      	str	r3, [r7, #12]
    break;
 800453a:	e053      	b.n	80045e4 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 800453c:	88fb      	ldrh	r3, [r7, #6]
 800453e:	b2db      	uxtb	r3, r3
 8004540:	2283      	movs	r2, #131	@ 0x83
 8004542:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8004546:	4618      	mov	r0, r3
 8004548:	f000 f874 	bl	8004634 <CODEC_IO_Write>
 800454c:	4603      	mov	r3, r0
 800454e:	461a      	mov	r2, r3
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	4413      	add	r3, r2
 8004554:	60fb      	str	r3, [r7, #12]
    break;
 8004556:	e045      	b.n	80045e4 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 8004558:	88fb      	ldrh	r3, [r7, #6]
 800455a:	b2db      	uxtb	r3, r3
 800455c:	22a3      	movs	r2, #163	@ 0xa3
 800455e:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8004562:	4618      	mov	r0, r3
 8004564:	f000 f866 	bl	8004634 <CODEC_IO_Write>
 8004568:	4603      	mov	r3, r0
 800456a:	461a      	mov	r2, r3
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	4413      	add	r3, r2
 8004570:	60fb      	str	r3, [r7, #12]
    break;
 8004572:	e037      	b.n	80045e4 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 8004574:	88fb      	ldrh	r3, [r7, #6]
 8004576:	b2db      	uxtb	r3, r3
 8004578:	2213      	movs	r2, #19
 800457a:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800457e:	4618      	mov	r0, r3
 8004580:	f000 f858 	bl	8004634 <CODEC_IO_Write>
 8004584:	4603      	mov	r3, r0
 8004586:	461a      	mov	r2, r3
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	4413      	add	r3, r2
 800458c:	60fb      	str	r3, [r7, #12]
    break;
 800458e:	e029      	b.n	80045e4 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8004590:	88fb      	ldrh	r3, [r7, #6]
 8004592:	b2db      	uxtb	r3, r3
 8004594:	2243      	movs	r2, #67	@ 0x43
 8004596:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800459a:	4618      	mov	r0, r3
 800459c:	f000 f84a 	bl	8004634 <CODEC_IO_Write>
 80045a0:	4603      	mov	r3, r0
 80045a2:	461a      	mov	r2, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	4413      	add	r3, r2
 80045a8:	60fb      	str	r3, [r7, #12]
    break;
 80045aa:	e01b      	b.n	80045e4 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 80045ac:	88fb      	ldrh	r3, [r7, #6]
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	2273      	movs	r2, #115	@ 0x73
 80045b2:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80045b6:	4618      	mov	r0, r3
 80045b8:	f000 f83c 	bl	8004634 <CODEC_IO_Write>
 80045bc:	4603      	mov	r3, r0
 80045be:	461a      	mov	r2, r3
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	4413      	add	r3, r2
 80045c4:	60fb      	str	r3, [r7, #12]
    break; 
 80045c6:	e00d      	b.n	80045e4 <wm8994_SetFrequency+0x198>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 80045c8:	88fb      	ldrh	r3, [r7, #6]
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	2283      	movs	r2, #131	@ 0x83
 80045ce:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80045d2:	4618      	mov	r0, r3
 80045d4:	f000 f82e 	bl	8004634 <CODEC_IO_Write>
 80045d8:	4603      	mov	r3, r0
 80045da:	461a      	mov	r2, r3
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	4413      	add	r3, r2
 80045e0:	60fb      	str	r3, [r7, #12]
    break; 
 80045e2:	bf00      	nop
  }
  return counter;
 80045e4:	68fb      	ldr	r3, [r7, #12]
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3710      	adds	r7, #16
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	bf00      	nop
 80045f0:	00017700 	.word	0x00017700

080045f4 <wm8994_Reset>:
  * @brief Resets wm8994 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Reset(uint16_t DeviceAddr)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	4603      	mov	r3, r0
 80045fc:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80045fe:	2300      	movs	r3, #0
 8004600:	60fb      	str	r3, [r7, #12]
  
  /* Reset Codec by writing in 0x0000 address register */
  counter = CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8004602:	88fb      	ldrh	r3, [r7, #6]
 8004604:	b2db      	uxtb	r3, r3
 8004606:	2200      	movs	r2, #0
 8004608:	2100      	movs	r1, #0
 800460a:	4618      	mov	r0, r3
 800460c:	f000 f812 	bl	8004634 <CODEC_IO_Write>
 8004610:	4603      	mov	r3, r0
 8004612:	60fb      	str	r3, [r7, #12]
  outputEnabled = 0;
 8004614:	4b05      	ldr	r3, [pc, #20]	@ (800462c <wm8994_Reset+0x38>)
 8004616:	2200      	movs	r2, #0
 8004618:	601a      	str	r2, [r3, #0]
  inputEnabled=0;
 800461a:	4b05      	ldr	r3, [pc, #20]	@ (8004630 <wm8994_Reset+0x3c>)
 800461c:	2200      	movs	r2, #0
 800461e:	601a      	str	r2, [r3, #0]

  return counter;
 8004620:	68fb      	ldr	r3, [r7, #12]
}
 8004622:	4618      	mov	r0, r3
 8004624:	3710      	adds	r7, #16
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
 800462a:	bf00      	nop
 800462c:	20030e84 	.word	0x20030e84
 8004630:	20030e88 	.word	0x20030e88

08004634 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b084      	sub	sp, #16
 8004638:	af00      	add	r7, sp, #0
 800463a:	4603      	mov	r3, r0
 800463c:	71fb      	strb	r3, [r7, #7]
 800463e:	460b      	mov	r3, r1
 8004640:	80bb      	strh	r3, [r7, #4]
 8004642:	4613      	mov	r3, r2
 8004644:	807b      	strh	r3, [r7, #2]
  uint32_t result = 0;
 8004646:	2300      	movs	r3, #0
 8004648:	60fb      	str	r3, [r7, #12]
  
 AUDIO_IO_Write(Addr, Reg, Value);
 800464a:	887a      	ldrh	r2, [r7, #2]
 800464c:	88b9      	ldrh	r1, [r7, #4]
 800464e:	79fb      	ldrb	r3, [r7, #7]
 8004650:	4618      	mov	r0, r3
 8004652:	f000 f96f 	bl	8004934 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	b2db      	uxtb	r3, r3
}
 800465a:	4618      	mov	r0, r3
 800465c:	3710      	adds	r7, #16
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
	...

08004664 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b08c      	sub	sp, #48	@ 0x30
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	4a51      	ldr	r2, [pc, #324]	@ (80047b4 <I2Cx_MspInit+0x150>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d14d      	bne.n	8004710 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8004674:	4b50      	ldr	r3, [pc, #320]	@ (80047b8 <I2Cx_MspInit+0x154>)
 8004676:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004678:	4a4f      	ldr	r2, [pc, #316]	@ (80047b8 <I2Cx_MspInit+0x154>)
 800467a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800467e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004680:	4b4d      	ldr	r3, [pc, #308]	@ (80047b8 <I2Cx_MspInit+0x154>)
 8004682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004684:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004688:	61bb      	str	r3, [r7, #24]
 800468a:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 800468c:	2380      	movs	r3, #128	@ 0x80
 800468e:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8004690:	2312      	movs	r3, #18
 8004692:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8004694:	2300      	movs	r3, #0
 8004696:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8004698:	2302      	movs	r3, #2
 800469a:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 800469c:	2304      	movs	r3, #4
 800469e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80046a0:	f107 031c 	add.w	r3, r7, #28
 80046a4:	4619      	mov	r1, r3
 80046a6:	4845      	ldr	r0, [pc, #276]	@ (80047bc <I2Cx_MspInit+0x158>)
 80046a8:	f001 fdf0 	bl	800628c <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 80046ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80046b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80046b2:	f107 031c 	add.w	r3, r7, #28
 80046b6:	4619      	mov	r1, r3
 80046b8:	4840      	ldr	r0, [pc, #256]	@ (80047bc <I2Cx_MspInit+0x158>)
 80046ba:	f001 fde7 	bl	800628c <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 80046be:	4b3e      	ldr	r3, [pc, #248]	@ (80047b8 <I2Cx_MspInit+0x154>)
 80046c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046c2:	4a3d      	ldr	r2, [pc, #244]	@ (80047b8 <I2Cx_MspInit+0x154>)
 80046c4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80046c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80046ca:	4b3b      	ldr	r3, [pc, #236]	@ (80047b8 <I2Cx_MspInit+0x154>)
 80046cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80046d2:	617b      	str	r3, [r7, #20]
 80046d4:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 80046d6:	4b38      	ldr	r3, [pc, #224]	@ (80047b8 <I2Cx_MspInit+0x154>)
 80046d8:	6a1b      	ldr	r3, [r3, #32]
 80046da:	4a37      	ldr	r2, [pc, #220]	@ (80047b8 <I2Cx_MspInit+0x154>)
 80046dc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80046e0:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 80046e2:	4b35      	ldr	r3, [pc, #212]	@ (80047b8 <I2Cx_MspInit+0x154>)
 80046e4:	6a1b      	ldr	r3, [r3, #32]
 80046e6:	4a34      	ldr	r2, [pc, #208]	@ (80047b8 <I2Cx_MspInit+0x154>)
 80046e8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80046ec:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 80046ee:	2200      	movs	r2, #0
 80046f0:	210f      	movs	r1, #15
 80046f2:	2048      	movs	r0, #72	@ 0x48
 80046f4:	f001 f82d 	bl	8005752 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 80046f8:	2048      	movs	r0, #72	@ 0x48
 80046fa:	f001 f846 	bl	800578a <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 80046fe:	2200      	movs	r2, #0
 8004700:	210f      	movs	r1, #15
 8004702:	2049      	movs	r0, #73	@ 0x49
 8004704:	f001 f825 	bl	8005752 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8004708:	2049      	movs	r0, #73	@ 0x49
 800470a:	f001 f83e 	bl	800578a <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 800470e:	e04d      	b.n	80047ac <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8004710:	4b29      	ldr	r3, [pc, #164]	@ (80047b8 <I2Cx_MspInit+0x154>)
 8004712:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004714:	4a28      	ldr	r2, [pc, #160]	@ (80047b8 <I2Cx_MspInit+0x154>)
 8004716:	f043 0302 	orr.w	r3, r3, #2
 800471a:	6313      	str	r3, [r2, #48]	@ 0x30
 800471c:	4b26      	ldr	r3, [pc, #152]	@ (80047b8 <I2Cx_MspInit+0x154>)
 800471e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004720:	f003 0302 	and.w	r3, r3, #2
 8004724:	613b      	str	r3, [r7, #16]
 8004726:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8004728:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800472c:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800472e:	2312      	movs	r3, #18
 8004730:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8004732:	2300      	movs	r3, #0
 8004734:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8004736:	2302      	movs	r3, #2
 8004738:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 800473a:	2304      	movs	r3, #4
 800473c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800473e:	f107 031c 	add.w	r3, r7, #28
 8004742:	4619      	mov	r1, r3
 8004744:	481e      	ldr	r0, [pc, #120]	@ (80047c0 <I2Cx_MspInit+0x15c>)
 8004746:	f001 fda1 	bl	800628c <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 800474a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800474e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8004750:	f107 031c 	add.w	r3, r7, #28
 8004754:	4619      	mov	r1, r3
 8004756:	481a      	ldr	r0, [pc, #104]	@ (80047c0 <I2Cx_MspInit+0x15c>)
 8004758:	f001 fd98 	bl	800628c <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 800475c:	4b16      	ldr	r3, [pc, #88]	@ (80047b8 <I2Cx_MspInit+0x154>)
 800475e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004760:	4a15      	ldr	r2, [pc, #84]	@ (80047b8 <I2Cx_MspInit+0x154>)
 8004762:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004766:	6413      	str	r3, [r2, #64]	@ 0x40
 8004768:	4b13      	ldr	r3, [pc, #76]	@ (80047b8 <I2Cx_MspInit+0x154>)
 800476a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800476c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004770:	60fb      	str	r3, [r7, #12]
 8004772:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8004774:	4b10      	ldr	r3, [pc, #64]	@ (80047b8 <I2Cx_MspInit+0x154>)
 8004776:	6a1b      	ldr	r3, [r3, #32]
 8004778:	4a0f      	ldr	r2, [pc, #60]	@ (80047b8 <I2Cx_MspInit+0x154>)
 800477a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800477e:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8004780:	4b0d      	ldr	r3, [pc, #52]	@ (80047b8 <I2Cx_MspInit+0x154>)
 8004782:	6a1b      	ldr	r3, [r3, #32]
 8004784:	4a0c      	ldr	r2, [pc, #48]	@ (80047b8 <I2Cx_MspInit+0x154>)
 8004786:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800478a:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 800478c:	2200      	movs	r2, #0
 800478e:	210f      	movs	r1, #15
 8004790:	201f      	movs	r0, #31
 8004792:	f000 ffde 	bl	8005752 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8004796:	201f      	movs	r0, #31
 8004798:	f000 fff7 	bl	800578a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 800479c:	2200      	movs	r2, #0
 800479e:	210f      	movs	r1, #15
 80047a0:	2020      	movs	r0, #32
 80047a2:	f000 ffd6 	bl	8005752 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 80047a6:	2020      	movs	r0, #32
 80047a8:	f000 ffef 	bl	800578a <HAL_NVIC_EnableIRQ>
}
 80047ac:	bf00      	nop
 80047ae:	3730      	adds	r7, #48	@ 0x30
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	20030e8c 	.word	0x20030e8c
 80047b8:	40023800 	.word	0x40023800
 80047bc:	40021c00 	.word	0x40021c00
 80047c0:	40020400 	.word	0x40020400

080047c4 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b082      	sub	sp, #8
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f002 fb6d 	bl	8006eac <HAL_I2C_GetState>
 80047d2:	4603      	mov	r3, r0
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d125      	bne.n	8004824 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	4a14      	ldr	r2, [pc, #80]	@ (800482c <I2Cx_Init+0x68>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d103      	bne.n	80047e8 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	4a13      	ldr	r2, [pc, #76]	@ (8004830 <I2Cx_Init+0x6c>)
 80047e4:	601a      	str	r2, [r3, #0]
 80047e6:	e002      	b.n	80047ee <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	4a12      	ldr	r2, [pc, #72]	@ (8004834 <I2Cx_Init+0x70>)
 80047ec:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4a11      	ldr	r2, [pc, #68]	@ (8004838 <I2Cx_Init+0x74>)
 80047f2:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2200      	movs	r2, #0
 80047f8:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2201      	movs	r2, #1
 80047fe:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2200      	movs	r2, #0
 8004804:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2200      	movs	r2, #0
 8004810:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f7ff ff23 	bl	8004664 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f002 f836 	bl	8006890 <HAL_I2C_Init>
  }
}
 8004824:	bf00      	nop
 8004826:	3708      	adds	r7, #8
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}
 800482c:	20030e8c 	.word	0x20030e8c
 8004830:	40005c00 	.word	0x40005c00
 8004834:	40005400 	.word	0x40005400
 8004838:	40912732 	.word	0x40912732

0800483c <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b08a      	sub	sp, #40	@ 0x28
 8004840:	af04      	add	r7, sp, #16
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	4608      	mov	r0, r1
 8004846:	4611      	mov	r1, r2
 8004848:	461a      	mov	r2, r3
 800484a:	4603      	mov	r3, r0
 800484c:	72fb      	strb	r3, [r7, #11]
 800484e:	460b      	mov	r3, r1
 8004850:	813b      	strh	r3, [r7, #8]
 8004852:	4613      	mov	r3, r2
 8004854:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8004856:	2300      	movs	r3, #0
 8004858:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800485a:	7afb      	ldrb	r3, [r7, #11]
 800485c:	b299      	uxth	r1, r3
 800485e:	88f8      	ldrh	r0, [r7, #6]
 8004860:	893a      	ldrh	r2, [r7, #8]
 8004862:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004866:	9302      	str	r3, [sp, #8]
 8004868:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800486a:	9301      	str	r3, [sp, #4]
 800486c:	6a3b      	ldr	r3, [r7, #32]
 800486e:	9300      	str	r3, [sp, #0]
 8004870:	4603      	mov	r3, r0
 8004872:	68f8      	ldr	r0, [r7, #12]
 8004874:	f002 fa00 	bl	8006c78 <HAL_I2C_Mem_Read>
 8004878:	4603      	mov	r3, r0
 800487a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800487c:	7dfb      	ldrb	r3, [r7, #23]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d004      	beq.n	800488c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8004882:	7afb      	ldrb	r3, [r7, #11]
 8004884:	4619      	mov	r1, r3
 8004886:	68f8      	ldr	r0, [r7, #12]
 8004888:	f000 f832 	bl	80048f0 <I2Cx_Error>
  }
  return status;    
 800488c:	7dfb      	ldrb	r3, [r7, #23]
}
 800488e:	4618      	mov	r0, r3
 8004890:	3718      	adds	r7, #24
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}

08004896 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8004896:	b580      	push	{r7, lr}
 8004898:	b08a      	sub	sp, #40	@ 0x28
 800489a:	af04      	add	r7, sp, #16
 800489c:	60f8      	str	r0, [r7, #12]
 800489e:	4608      	mov	r0, r1
 80048a0:	4611      	mov	r1, r2
 80048a2:	461a      	mov	r2, r3
 80048a4:	4603      	mov	r3, r0
 80048a6:	72fb      	strb	r3, [r7, #11]
 80048a8:	460b      	mov	r3, r1
 80048aa:	813b      	strh	r3, [r7, #8]
 80048ac:	4613      	mov	r3, r2
 80048ae:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80048b0:	2300      	movs	r3, #0
 80048b2:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80048b4:	7afb      	ldrb	r3, [r7, #11]
 80048b6:	b299      	uxth	r1, r3
 80048b8:	88f8      	ldrh	r0, [r7, #6]
 80048ba:	893a      	ldrh	r2, [r7, #8]
 80048bc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80048c0:	9302      	str	r3, [sp, #8]
 80048c2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80048c4:	9301      	str	r3, [sp, #4]
 80048c6:	6a3b      	ldr	r3, [r7, #32]
 80048c8:	9300      	str	r3, [sp, #0]
 80048ca:	4603      	mov	r3, r0
 80048cc:	68f8      	ldr	r0, [r7, #12]
 80048ce:	f002 f8bf 	bl	8006a50 <HAL_I2C_Mem_Write>
 80048d2:	4603      	mov	r3, r0
 80048d4:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80048d6:	7dfb      	ldrb	r3, [r7, #23]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d004      	beq.n	80048e6 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80048dc:	7afb      	ldrb	r3, [r7, #11]
 80048de:	4619      	mov	r1, r3
 80048e0:	68f8      	ldr	r0, [r7, #12]
 80048e2:	f000 f805 	bl	80048f0 <I2Cx_Error>
  }
  return status;
 80048e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3718      	adds	r7, #24
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b082      	sub	sp, #8
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	460b      	mov	r3, r1
 80048fa:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f002 f863 	bl	80069c8 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f7ff ff5e 	bl	80047c4 <I2Cx_Init>
}
 8004908:	bf00      	nop
 800490a:	3708      	adds	r7, #8
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}

08004910 <AUDIO_IO_Init>:
/**
  * @brief  Initializes Audio low level.
  * @retval None
  */
void AUDIO_IO_Init(void) 
{
 8004910:	b580      	push	{r7, lr}
 8004912:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8004914:	4802      	ldr	r0, [pc, #8]	@ (8004920 <AUDIO_IO_Init+0x10>)
 8004916:	f7ff ff55 	bl	80047c4 <I2Cx_Init>
}
 800491a:	bf00      	nop
 800491c:	bd80      	pop	{r7, pc}
 800491e:	bf00      	nop
 8004920:	20030e8c 	.word	0x20030e8c

08004924 <AUDIO_IO_DeInit>:
/**
  * @brief  Deinitializes Audio low level.
  * @retval None
  */
void AUDIO_IO_DeInit(void)
{
 8004924:	b480      	push	{r7}
 8004926:	af00      	add	r7, sp, #0
}
 8004928:	bf00      	nop
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr
	...

08004934 <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b086      	sub	sp, #24
 8004938:	af02      	add	r7, sp, #8
 800493a:	4603      	mov	r3, r0
 800493c:	71fb      	strb	r3, [r7, #7]
 800493e:	460b      	mov	r3, r1
 8004940:	80bb      	strh	r3, [r7, #4]
 8004942:	4613      	mov	r3, r2
 8004944:	807b      	strh	r3, [r7, #2]
  uint16_t tmp = Value;
 8004946:	887b      	ldrh	r3, [r7, #2]
 8004948:	81fb      	strh	r3, [r7, #14]
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
 800494a:	89fb      	ldrh	r3, [r7, #14]
 800494c:	0a1b      	lsrs	r3, r3, #8
 800494e:	b29b      	uxth	r3, r3
 8004950:	807b      	strh	r3, [r7, #2]
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 8004952:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004956:	021b      	lsls	r3, r3, #8
 8004958:	b21a      	sxth	r2, r3
 800495a:	887b      	ldrh	r3, [r7, #2]
 800495c:	b21b      	sxth	r3, r3
 800495e:	4313      	orrs	r3, r2
 8004960:	b21b      	sxth	r3, r3
 8004962:	b29b      	uxth	r3, r3
 8004964:	807b      	strh	r3, [r7, #2]
  
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 8004966:	88ba      	ldrh	r2, [r7, #4]
 8004968:	79f9      	ldrb	r1, [r7, #7]
 800496a:	2302      	movs	r3, #2
 800496c:	9301      	str	r3, [sp, #4]
 800496e:	1cbb      	adds	r3, r7, #2
 8004970:	9300      	str	r3, [sp, #0]
 8004972:	2302      	movs	r3, #2
 8004974:	4803      	ldr	r0, [pc, #12]	@ (8004984 <AUDIO_IO_Write+0x50>)
 8004976:	f7ff ff8e 	bl	8004896 <I2Cx_WriteMultiple>
}
 800497a:	bf00      	nop
 800497c:	3710      	adds	r7, #16
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop
 8004984:	20030e8c 	.word	0x20030e8c

08004988 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint16_t AUDIO_IO_Read(uint8_t Addr, uint16_t Reg)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b086      	sub	sp, #24
 800498c:	af02      	add	r7, sp, #8
 800498e:	4603      	mov	r3, r0
 8004990:	460a      	mov	r2, r1
 8004992:	71fb      	strb	r3, [r7, #7]
 8004994:	4613      	mov	r3, r2
 8004996:	80bb      	strh	r3, [r7, #4]
  uint16_t read_value = 0, tmp = 0;
 8004998:	2300      	movs	r3, #0
 800499a:	81bb      	strh	r3, [r7, #12]
 800499c:	2300      	movs	r3, #0
 800499e:	81fb      	strh	r3, [r7, #14]
  
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 80049a0:	88ba      	ldrh	r2, [r7, #4]
 80049a2:	79f9      	ldrb	r1, [r7, #7]
 80049a4:	2302      	movs	r3, #2
 80049a6:	9301      	str	r3, [sp, #4]
 80049a8:	f107 030c 	add.w	r3, r7, #12
 80049ac:	9300      	str	r3, [sp, #0]
 80049ae:	2302      	movs	r3, #2
 80049b0:	480a      	ldr	r0, [pc, #40]	@ (80049dc <AUDIO_IO_Read+0x54>)
 80049b2:	f7ff ff43 	bl	800483c <I2Cx_ReadMultiple>
  
  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
 80049b6:	89bb      	ldrh	r3, [r7, #12]
 80049b8:	0a1b      	lsrs	r3, r3, #8
 80049ba:	81fb      	strh	r3, [r7, #14]
  
  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 80049bc:	89bb      	ldrh	r3, [r7, #12]
 80049be:	b21b      	sxth	r3, r3
 80049c0:	021b      	lsls	r3, r3, #8
 80049c2:	b21a      	sxth	r2, r3
 80049c4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80049c8:	4313      	orrs	r3, r2
 80049ca:	b21b      	sxth	r3, r3
 80049cc:	81fb      	strh	r3, [r7, #14]
  
  read_value = tmp;
 80049ce:	89fb      	ldrh	r3, [r7, #14]
 80049d0:	81bb      	strh	r3, [r7, #12]
  
  return read_value;
 80049d2:	89bb      	ldrh	r3, [r7, #12]
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3710      	adds	r7, #16
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	20030e8c 	.word	0x20030e8c

080049e0 <AUDIO_IO_Delay>:
  * @brief  AUDIO Codec delay 
  * @param  Delay: Delay in ms
  * @retval None
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b082      	sub	sp, #8
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f000 fdb3 	bl	8005554 <HAL_Delay>
}
 80049ee:	bf00      	nop
 80049f0:	3708      	adds	r7, #8
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
	...

080049f8 <HAL_SAI_ErrorCallback>:
  * @brief  SAI error callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b084      	sub	sp, #16
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  HAL_SAI_StateTypeDef audio_out_state;
  HAL_SAI_StateTypeDef audio_in_state;

  audio_out_state = HAL_SAI_GetState(&haudio_out_sai);
 8004a00:	480e      	ldr	r0, [pc, #56]	@ (8004a3c <HAL_SAI_ErrorCallback+0x44>)
 8004a02:	f004 faed 	bl	8008fe0 <HAL_SAI_GetState>
 8004a06:	4603      	mov	r3, r0
 8004a08:	73fb      	strb	r3, [r7, #15]
  audio_in_state = HAL_SAI_GetState(&haudio_in_sai);
 8004a0a:	480d      	ldr	r0, [pc, #52]	@ (8004a40 <HAL_SAI_ErrorCallback+0x48>)
 8004a0c:	f004 fae8 	bl	8008fe0 <HAL_SAI_GetState>
 8004a10:	4603      	mov	r3, r0
 8004a12:	73bb      	strb	r3, [r7, #14]

  /* Determines if it is an audio out or audio in error */
  if ((audio_out_state == HAL_SAI_STATE_BUSY) || (audio_out_state == HAL_SAI_STATE_BUSY_TX))
 8004a14:	7bfb      	ldrb	r3, [r7, #15]
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d002      	beq.n	8004a20 <HAL_SAI_ErrorCallback+0x28>
 8004a1a:	7bfb      	ldrb	r3, [r7, #15]
 8004a1c:	2b12      	cmp	r3, #18
 8004a1e:	d101      	bne.n	8004a24 <HAL_SAI_ErrorCallback+0x2c>
  {
    BSP_AUDIO_OUT_Error_CallBack();
 8004a20:	f000 f810 	bl	8004a44 <BSP_AUDIO_OUT_Error_CallBack>
  }

  if ((audio_in_state == HAL_SAI_STATE_BUSY) || (audio_in_state == HAL_SAI_STATE_BUSY_RX))
 8004a24:	7bbb      	ldrb	r3, [r7, #14]
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d002      	beq.n	8004a30 <HAL_SAI_ErrorCallback+0x38>
 8004a2a:	7bbb      	ldrb	r3, [r7, #14]
 8004a2c:	2b22      	cmp	r3, #34	@ 0x22
 8004a2e:	d101      	bne.n	8004a34 <HAL_SAI_ErrorCallback+0x3c>
  {
    BSP_AUDIO_IN_Error_CallBack();
 8004a30:	f000 f9f6 	bl	8004e20 <BSP_AUDIO_IN_Error_CallBack>
  }
}
 8004a34:	bf00      	nop
 8004a36:	3710      	adds	r7, #16
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	20030ee4 	.word	0x20030ee4
 8004a40:	20030f68 	.word	0x20030f68

08004a44 <BSP_AUDIO_OUT_Error_CallBack>:
/**
  * @brief  Manages the DMA FIFO error event.
  * @retval None
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(void)
{
 8004a44:	b480      	push	{r7}
 8004a46:	af00      	add	r7, sp, #0
}
 8004a48:	bf00      	nop
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr
	...

08004a54 <BSP_AUDIO_OUT_MspInit>:
  * @param  hsai: SAI handle
  * @param  Params
  * @retval None
  */
__weak void BSP_AUDIO_OUT_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{ 
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b08c      	sub	sp, #48	@ 0x30
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_sai_tx;
  GPIO_InitTypeDef  gpio_init_structure;  

  /* Enable SAI clock */
  AUDIO_OUT_SAIx_CLK_ENABLE();
 8004a5e:	4b63      	ldr	r3, [pc, #396]	@ (8004bec <BSP_AUDIO_OUT_MspInit+0x198>)
 8004a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a62:	4a62      	ldr	r2, [pc, #392]	@ (8004bec <BSP_AUDIO_OUT_MspInit+0x198>)
 8004a64:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004a68:	6453      	str	r3, [r2, #68]	@ 0x44
 8004a6a:	4b60      	ldr	r3, [pc, #384]	@ (8004bec <BSP_AUDIO_OUT_MspInit+0x198>)
 8004a6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a6e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004a72:	61bb      	str	r3, [r7, #24]
 8004a74:	69bb      	ldr	r3, [r7, #24]
  
  /* Enable GPIO clock */
  AUDIO_OUT_SAIx_MCLK_ENABLE();
 8004a76:	4b5d      	ldr	r3, [pc, #372]	@ (8004bec <BSP_AUDIO_OUT_MspInit+0x198>)
 8004a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a7a:	4a5c      	ldr	r2, [pc, #368]	@ (8004bec <BSP_AUDIO_OUT_MspInit+0x198>)
 8004a7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a80:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a82:	4b5a      	ldr	r3, [pc, #360]	@ (8004bec <BSP_AUDIO_OUT_MspInit+0x198>)
 8004a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a8a:	617b      	str	r3, [r7, #20]
 8004a8c:	697b      	ldr	r3, [r7, #20]
  AUDIO_OUT_SAIx_SCK_SD_ENABLE();
 8004a8e:	4b57      	ldr	r3, [pc, #348]	@ (8004bec <BSP_AUDIO_OUT_MspInit+0x198>)
 8004a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a92:	4a56      	ldr	r2, [pc, #344]	@ (8004bec <BSP_AUDIO_OUT_MspInit+0x198>)
 8004a94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a98:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a9a:	4b54      	ldr	r3, [pc, #336]	@ (8004bec <BSP_AUDIO_OUT_MspInit+0x198>)
 8004a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004aa2:	613b      	str	r3, [r7, #16]
 8004aa4:	693b      	ldr	r3, [r7, #16]
  AUDIO_OUT_SAIx_FS_ENABLE();
 8004aa6:	4b51      	ldr	r3, [pc, #324]	@ (8004bec <BSP_AUDIO_OUT_MspInit+0x198>)
 8004aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aaa:	4a50      	ldr	r2, [pc, #320]	@ (8004bec <BSP_AUDIO_OUT_MspInit+0x198>)
 8004aac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ab0:	6313      	str	r3, [r2, #48]	@ 0x30
 8004ab2:	4b4e      	ldr	r3, [pc, #312]	@ (8004bec <BSP_AUDIO_OUT_MspInit+0x198>)
 8004ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ab6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004aba:	60fb      	str	r3, [r7, #12]
 8004abc:	68fb      	ldr	r3, [r7, #12]
  /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN;
 8004abe:	2380      	movs	r3, #128	@ 0x80
 8004ac0:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8004ac2:	2302      	movs	r3, #2
 8004ac4:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8004aca:	2303      	movs	r3, #3
 8004acc:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8004ace:	230a      	movs	r3, #10
 8004ad0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
 8004ad2:	f107 031c 	add.w	r3, r7, #28
 8004ad6:	4619      	mov	r1, r3
 8004ad8:	4845      	ldr	r0, [pc, #276]	@ (8004bf0 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8004ada:	f001 fbd7 	bl	800628c <HAL_GPIO_Init>

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_SCK_PIN;
 8004ade:	2320      	movs	r3, #32
 8004ae0:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8004ae2:	2302      	movs	r3, #2
 8004ae4:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8004aea:	2303      	movs	r3, #3
 8004aec:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SCK_AF;
 8004aee:	230a      	movs	r3, #10
 8004af0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 8004af2:	f107 031c 	add.w	r3, r7, #28
 8004af6:	4619      	mov	r1, r3
 8004af8:	483d      	ldr	r0, [pc, #244]	@ (8004bf0 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8004afa:	f001 fbc7 	bl	800628c <HAL_GPIO_Init>

  gpio_init_structure.Pin =  AUDIO_OUT_SAIx_SD_PIN;
 8004afe:	2340      	movs	r3, #64	@ 0x40
 8004b00:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8004b02:	2302      	movs	r3, #2
 8004b04:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8004b06:	2300      	movs	r3, #0
 8004b08:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8004b0e:	230a      	movs	r3, #10
 8004b10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 8004b12:	f107 031c 	add.w	r3, r7, #28
 8004b16:	4619      	mov	r1, r3
 8004b18:	4835      	ldr	r0, [pc, #212]	@ (8004bf0 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8004b1a:	f001 fbb7 	bl	800628c <HAL_GPIO_Init>

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 8004b1e:	2310      	movs	r3, #16
 8004b20:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8004b22:	2302      	movs	r3, #2
 8004b24:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8004b26:	2300      	movs	r3, #0
 8004b28:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8004b2e:	230a      	movs	r3, #10
 8004b30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 8004b32:	f107 031c 	add.w	r3, r7, #28
 8004b36:	4619      	mov	r1, r3
 8004b38:	482d      	ldr	r0, [pc, #180]	@ (8004bf0 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8004b3a:	f001 fba7 	bl	800628c <HAL_GPIO_Init>

  /* Enable the DMA clock */
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 8004b3e:	4b2b      	ldr	r3, [pc, #172]	@ (8004bec <BSP_AUDIO_OUT_MspInit+0x198>)
 8004b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b42:	4a2a      	ldr	r2, [pc, #168]	@ (8004bec <BSP_AUDIO_OUT_MspInit+0x198>)
 8004b44:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004b48:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b4a:	4b28      	ldr	r3, [pc, #160]	@ (8004bec <BSP_AUDIO_OUT_MspInit+0x198>)
 8004b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b52:	60bb      	str	r3, [r7, #8]
 8004b54:	68bb      	ldr	r3, [r7, #8]
    
  if(hsai->Instance == AUDIO_OUT_SAIx)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a26      	ldr	r2, [pc, #152]	@ (8004bf4 <BSP_AUDIO_OUT_MspInit+0x1a0>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d138      	bne.n	8004bd2 <BSP_AUDIO_OUT_MspInit+0x17e>
  {
    /* Configure the hdma_saiTx handle parameters */   
    hdma_sai_tx.Init.Channel             = AUDIO_OUT_SAIx_DMAx_CHANNEL;
 8004b60:	4b25      	ldr	r3, [pc, #148]	@ (8004bf8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004b62:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8004b66:	605a      	str	r2, [r3, #4]
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8004b68:	4b23      	ldr	r3, [pc, #140]	@ (8004bf8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004b6a:	2240      	movs	r2, #64	@ 0x40
 8004b6c:	609a      	str	r2, [r3, #8]
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8004b6e:	4b22      	ldr	r3, [pc, #136]	@ (8004bf8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004b70:	2200      	movs	r2, #0
 8004b72:	60da      	str	r2, [r3, #12]
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8004b74:	4b20      	ldr	r3, [pc, #128]	@ (8004bf8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004b76:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004b7a:	611a      	str	r2, [r3, #16]
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
 8004b7c:	4b1e      	ldr	r3, [pc, #120]	@ (8004bf8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004b7e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004b82:	615a      	str	r2, [r3, #20]
    hdma_sai_tx.Init.MemDataAlignment    = AUDIO_OUT_SAIx_DMAx_MEM_DATA_SIZE;
 8004b84:	4b1c      	ldr	r3, [pc, #112]	@ (8004bf8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004b86:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004b8a:	619a      	str	r2, [r3, #24]
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
 8004b8c:	4b1a      	ldr	r3, [pc, #104]	@ (8004bf8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004b8e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004b92:	61da      	str	r2, [r3, #28]
    hdma_sai_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 8004b94:	4b18      	ldr	r3, [pc, #96]	@ (8004bf8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004b96:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004b9a:	621a      	str	r2, [r3, #32]
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 8004b9c:	4b16      	ldr	r3, [pc, #88]	@ (8004bf8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004b9e:	2204      	movs	r2, #4
 8004ba0:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sai_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8004ba2:	4b15      	ldr	r3, [pc, #84]	@ (8004bf8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004ba4:	2203      	movs	r2, #3
 8004ba6:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sai_tx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8004ba8:	4b13      	ldr	r3, [pc, #76]	@ (8004bf8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004baa:	2200      	movs	r2, #0
 8004bac:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8004bae:	4b12      	ldr	r3, [pc, #72]	@ (8004bf8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	631a      	str	r2, [r3, #48]	@ 0x30
    
    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 8004bb4:	4b10      	ldr	r3, [pc, #64]	@ (8004bf8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004bb6:	4a11      	ldr	r2, [pc, #68]	@ (8004bfc <BSP_AUDIO_OUT_MspInit+0x1a8>)
 8004bb8:	601a      	str	r2, [r3, #0]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a0e      	ldr	r2, [pc, #56]	@ (8004bf8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004bbe:	66da      	str	r2, [r3, #108]	@ 0x6c
 8004bc0:	4a0d      	ldr	r2, [pc, #52]	@ (8004bf8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6393      	str	r3, [r2, #56]	@ 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_tx);
 8004bc6:	480c      	ldr	r0, [pc, #48]	@ (8004bf8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004bc8:	f000 ff9a 	bl	8005b00 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_tx);      
 8004bcc:	480a      	ldr	r0, [pc, #40]	@ (8004bf8 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004bce:	f000 fee9 	bl	80059a4 <HAL_DMA_Init>
  }
  
  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	210e      	movs	r1, #14
 8004bd6:	203c      	movs	r0, #60	@ 0x3c
 8004bd8:	f000 fdbb 	bl	8005752 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ); 
 8004bdc:	203c      	movs	r0, #60	@ 0x3c
 8004bde:	f000 fdd4 	bl	800578a <HAL_NVIC_EnableIRQ>
}
 8004be2:	bf00      	nop
 8004be4:	3730      	adds	r7, #48	@ 0x30
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	40023800 	.word	0x40023800
 8004bf0:	40022000 	.word	0x40022000
 8004bf4:	40015c04 	.word	0x40015c04
 8004bf8:	20030fec 	.word	0x20030fec
 8004bfc:	40026470 	.word	0x40026470

08004c00 <BSP_AUDIO_OUT_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application     
  * @retval None
  */
__weak void BSP_AUDIO_OUT_ClockConfig(SAI_HandleTypeDef *hsai, uint32_t AudioFreq, void *Params)
{ 
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b0a6      	sub	sp, #152	@ 0x98
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	60f8      	str	r0, [r7, #12]
 8004c08:	60b9      	str	r1, [r7, #8]
 8004c0a:	607a      	str	r2, [r7, #4]
  RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;

  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 8004c0c:	f107 0314 	add.w	r3, r7, #20
 8004c10:	4618      	mov	r0, r3
 8004c12:	f003 fce5 	bl	80085e0 <HAL_RCCEx_GetPeriphCLKConfig>
  
  /* Set the PLL configuration according to the audio frequency */
  if((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K) || (AudioFreq == AUDIO_FREQUENCY_44K))
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	f642 3211 	movw	r2, #11025	@ 0x2b11
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d009      	beq.n	8004c34 <BSP_AUDIO_OUT_ClockConfig+0x34>
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	f245 6222 	movw	r2, #22050	@ 0x5622
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d004      	beq.n	8004c34 <BSP_AUDIO_OUT_ClockConfig+0x34>
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d112      	bne.n	8004c5a <BSP_AUDIO_OUT_ClockConfig+0x5a>
  {
    /* Configure PLLI2S prescalers */
    /* PLLI2S_VCO: VCO_429M
    I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 429/2 = 214.5 Mhz
    I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 214.5/19 = 11.289 Mhz */
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8004c34:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004c38:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8004c3a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004c3e:	657b      	str	r3, [r7, #84]	@ 0x54
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 429;
 8004c40:	f240 13ad 	movw	r3, #429	@ 0x1ad
 8004c44:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 2;
 8004c46:	2302      	movs	r3, #2
 8004c48:	623b      	str	r3, [r7, #32]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 19;
 8004c4a:	2313      	movs	r3, #19
 8004c4c:	63bb      	str	r3, [r7, #56]	@ 0x38
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8004c4e:	f107 0314 	add.w	r3, r7, #20
 8004c52:	4618      	mov	r0, r3
 8004c54:	f003 f8d4 	bl	8007e00 <HAL_RCCEx_PeriphCLKConfig>
 8004c58:	e012      	b.n	8004c80 <BSP_AUDIO_OUT_ClockConfig+0x80>
  {
    /* I2S clock config
    PLLI2S_VCO: VCO_344M
    I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 344/7 = 49.142 Mhz
    I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 49.142/1 = 49.142 Mhz */
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8004c5a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004c5e:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8004c60:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004c64:	657b      	str	r3, [r7, #84]	@ 0x54
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 344;
 8004c66:	f44f 73ac 	mov.w	r3, #344	@ 0x158
 8004c6a:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 7;
 8004c6c:	2307      	movs	r3, #7
 8004c6e:	623b      	str	r3, [r7, #32]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 1;
 8004c70:	2301      	movs	r3, #1
 8004c72:	63bb      	str	r3, [r7, #56]	@ 0x38
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8004c74:	f107 0314 	add.w	r3, r7, #20
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f003 f8c1 	bl	8007e00 <HAL_RCCEx_PeriphCLKConfig>
  }
}
 8004c7e:	bf00      	nop
 8004c80:	bf00      	nop
 8004c82:	3798      	adds	r7, #152	@ 0x98
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}

08004c88 <BSP_AUDIO_IN_Init>:
  * @param  BitRes: Audio frequency to be configured.
  * @param  ChnlNbr: Channel number.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_Init(uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b084      	sub	sp, #16
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	60b9      	str	r1, [r7, #8]
 8004c92:	607a      	str	r2, [r7, #4]
  return BSP_AUDIO_IN_InitEx(INPUT_DEVICE_DIGITAL_MICROPHONE_2, AudioFreq, BitRes, ChnlNbr); // MICROPHONE_1 for mono, 2 for stereo
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	68ba      	ldr	r2, [r7, #8]
 8004c98:	68f9      	ldr	r1, [r7, #12]
 8004c9a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8004c9e:	f000 f805 	bl	8004cac <BSP_AUDIO_IN_InitEx>
 8004ca2:	4603      	mov	r3, r0
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3710      	adds	r7, #16
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}

08004cac <BSP_AUDIO_IN_InitEx>:
  * @param  BitRes: Audio frequency to be configured.
  * @param  ChnlNbr: Channel number.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_InitEx(uint16_t InputDevice, uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr)
{
 8004cac:	b590      	push	{r4, r7, lr}
 8004cae:	b089      	sub	sp, #36	@ 0x24
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	60b9      	str	r1, [r7, #8]
 8004cb4:	607a      	str	r2, [r7, #4]
 8004cb6:	603b      	str	r3, [r7, #0]
 8004cb8:	4603      	mov	r3, r0
 8004cba:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = AUDIO_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	77fb      	strb	r3, [r7, #31]
  uint32_t deviceid = 0x00;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	617b      	str	r3, [r7, #20]
  uint32_t slot_active;

  if ((InputDevice != INPUT_DEVICE_INPUT_LINE_1) &&       /* Only INPUT_LINE_1 and MICROPHONE_2 inputs supported */
 8004cc4:	89fb      	ldrh	r3, [r7, #14]
 8004cc6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004cca:	d006      	beq.n	8004cda <BSP_AUDIO_IN_InitEx+0x2e>
 8004ccc:	89fb      	ldrh	r3, [r7, #14]
 8004cce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004cd2:	d002      	beq.n	8004cda <BSP_AUDIO_IN_InitEx+0x2e>
      (InputDevice != INPUT_DEVICE_DIGITAL_MICROPHONE_2))
  {
    ret = AUDIO_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	77fb      	strb	r3, [r7, #31]
 8004cd8:	e046      	b.n	8004d68 <BSP_AUDIO_IN_InitEx+0xbc>
  }
  else
  {
    /* Disable SAI */
    SAIx_In_DeInit();
 8004cda:	f000 fa11 	bl	8005100 <SAIx_In_DeInit>

    /* PLL clock is set depending on the AudioFreq (44.1khz vs 48khz groups) */
    BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL); /* Clock config is shared between AUDIO IN and OUT */
 8004cde:	2200      	movs	r2, #0
 8004ce0:	68b9      	ldr	r1, [r7, #8]
 8004ce2:	4824      	ldr	r0, [pc, #144]	@ (8004d74 <BSP_AUDIO_IN_InitEx+0xc8>)
 8004ce4:	f7ff ff8c 	bl	8004c00 <BSP_AUDIO_OUT_ClockConfig>

    /* SAI data transfer preparation:
    Prepare the Media to be used for the audio transfer from SAI peripheral to memory */
    haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8004ce8:	4b22      	ldr	r3, [pc, #136]	@ (8004d74 <BSP_AUDIO_IN_InitEx+0xc8>)
 8004cea:	4a23      	ldr	r2, [pc, #140]	@ (8004d78 <BSP_AUDIO_IN_InitEx+0xcc>)
 8004cec:	601a      	str	r2, [r3, #0]
    if(HAL_SAI_GetState(&haudio_in_sai) == HAL_SAI_STATE_RESET)
 8004cee:	4821      	ldr	r0, [pc, #132]	@ (8004d74 <BSP_AUDIO_IN_InitEx+0xc8>)
 8004cf0:	f004 f976 	bl	8008fe0 <HAL_SAI_GetState>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d107      	bne.n	8004d0a <BSP_AUDIO_IN_InitEx+0x5e>
    {
      /* Init the SAI MSP: this __weak function can be redefined by the application*/
      BSP_AUDIO_OUT_MspInit(&haudio_in_sai, NULL);  /* Initialize GPIOs for SAI2 block A Master signals */
 8004cfa:	2100      	movs	r1, #0
 8004cfc:	481d      	ldr	r0, [pc, #116]	@ (8004d74 <BSP_AUDIO_IN_InitEx+0xc8>)
 8004cfe:	f7ff fea9 	bl	8004a54 <BSP_AUDIO_OUT_MspInit>
      BSP_AUDIO_IN_MspInit(&haudio_in_sai, NULL);
 8004d02:	2100      	movs	r1, #0
 8004d04:	481b      	ldr	r0, [pc, #108]	@ (8004d74 <BSP_AUDIO_IN_InitEx+0xc8>)
 8004d06:	f000 f893 	bl	8004e30 <BSP_AUDIO_IN_MspInit>

    /* Configure SAI in master RX mode :
     *   - SAI2_block_A in master RX mode
     *   - SAI2_block_B in slave RX mode synchronous from SAI2_block_A
     */
    if (InputDevice == INPUT_DEVICE_DIGITAL_MICROPHONE_2)
 8004d0a:	89fb      	ldrh	r3, [r7, #14]
 8004d0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d10:	d102      	bne.n	8004d18 <BSP_AUDIO_IN_InitEx+0x6c>
    {
      slot_active = CODEC_AUDIOFRAME_SLOT_13;
 8004d12:	230a      	movs	r3, #10
 8004d14:	61bb      	str	r3, [r7, #24]
 8004d16:	e001      	b.n	8004d1c <BSP_AUDIO_IN_InitEx+0x70>
    }
    else
    {
      slot_active = CODEC_AUDIOFRAME_SLOT_02;
 8004d18:	2305      	movs	r3, #5
 8004d1a:	61bb      	str	r3, [r7, #24]
    }
    SAIx_In_Init(SAI_MODEMASTER_RX, slot_active, AudioFreq);
 8004d1c:	68ba      	ldr	r2, [r7, #8]
 8004d1e:	69b9      	ldr	r1, [r7, #24]
 8004d20:	2001      	movs	r0, #1
 8004d22:	f000 f937 	bl	8004f94 <SAIx_In_Init>

    /* wm8994 codec initialization */
    deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 8004d26:	4b15      	ldr	r3, [pc, #84]	@ (8004d7c <BSP_AUDIO_IN_InitEx+0xd0>)
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	2034      	movs	r0, #52	@ 0x34
 8004d2c:	4798      	blx	r3
 8004d2e:	6178      	str	r0, [r7, #20]

    if((deviceid) == WM8994_ID)
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	f648 1294 	movw	r2, #35220	@ 0x8994
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d109      	bne.n	8004d4e <BSP_AUDIO_IN_InitEx+0xa2>
    {
      /* Reset the Codec Registers */
      wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 8004d3a:	4b10      	ldr	r3, [pc, #64]	@ (8004d7c <BSP_AUDIO_IN_InitEx+0xd0>)
 8004d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d3e:	2034      	movs	r0, #52	@ 0x34
 8004d40:	4798      	blx	r3
      /* Initialize the audio driver structure */
      audio_drv = &wm8994_drv;
 8004d42:	4b0f      	ldr	r3, [pc, #60]	@ (8004d80 <BSP_AUDIO_IN_InitEx+0xd4>)
 8004d44:	4a0d      	ldr	r2, [pc, #52]	@ (8004d7c <BSP_AUDIO_IN_InitEx+0xd0>)
 8004d46:	601a      	str	r2, [r3, #0]
      ret = AUDIO_OK;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	77fb      	strb	r3, [r7, #31]
 8004d4c:	e001      	b.n	8004d52 <BSP_AUDIO_IN_InitEx+0xa6>
    }
    else
    {
      ret = AUDIO_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	77fb      	strb	r3, [r7, #31]
    }

    if(ret == AUDIO_OK)
 8004d52:	7ffb      	ldrb	r3, [r7, #31]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d107      	bne.n	8004d68 <BSP_AUDIO_IN_InitEx+0xbc>
    {
      /* Initialize the codec internal registers */
      audio_drv->Init(AUDIO_I2C_ADDRESS, InputDevice, 100, AudioFreq);
 8004d58:	4b09      	ldr	r3, [pc, #36]	@ (8004d80 <BSP_AUDIO_IN_InitEx+0xd4>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681c      	ldr	r4, [r3, #0]
 8004d5e:	89f9      	ldrh	r1, [r7, #14]
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	2264      	movs	r2, #100	@ 0x64
 8004d64:	2034      	movs	r0, #52	@ 0x34
 8004d66:	47a0      	blx	r4
    }
  }
  return ret;
 8004d68:	7ffb      	ldrb	r3, [r7, #31]
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3724      	adds	r7, #36	@ 0x24
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd90      	pop	{r4, r7, pc}
 8004d72:	bf00      	nop
 8004d74:	20030f68 	.word	0x20030f68
 8004d78:	40015c24 	.word	0x40015c24
 8004d7c:	200000c4 	.word	0x200000c4
 8004d80:	20030ee0 	.word	0x20030ee0

08004d84 <BSP_AUDIO_IN_Record>:
  * @param  size: size of the recorded buffer in number of elements (typically number of half-words)
  *               Be careful that it is not the same unit than BSP_AUDIO_OUT_Play function
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t  BSP_AUDIO_IN_Record(uint16_t* pbuf, uint32_t size)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b084      	sub	sp, #16
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	6039      	str	r1, [r7, #0]
  uint32_t ret = AUDIO_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	60fb      	str	r3, [r7, #12]
  
  /* Start the process receive DMA */
  HAL_SAI_Receive_DMA(&haudio_in_sai, (uint8_t*)pbuf, size);
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	461a      	mov	r2, r3
 8004d98:	6879      	ldr	r1, [r7, #4]
 8004d9a:	4805      	ldr	r0, [pc, #20]	@ (8004db0 <BSP_AUDIO_IN_Record+0x2c>)
 8004d9c:	f004 f892 	bl	8008ec4 <HAL_SAI_Receive_DMA>
  
  /* Return AUDIO_OK when all operations are correctly done */
  ret = AUDIO_OK;
 8004da0:	2300      	movs	r3, #0
 8004da2:	60fb      	str	r3, [r7, #12]
  
  return ret;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	b2db      	uxtb	r3, r3
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3710      	adds	r7, #16
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	20030f68 	.word	0x20030f68

08004db4 <BSP_AUDIO_IN_Stop>:
  *           - CODEC_PDWN_HW: completely shut down the codec (physically).
  *                            Then need to reconfigure the Codec after power on.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_Stop(uint32_t Option)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b082      	sub	sp, #8
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  /* Call the Media layer stop function */
  HAL_SAI_DMAStop(&haudio_in_sai);
 8004dbc:	480c      	ldr	r0, [pc, #48]	@ (8004df0 <BSP_AUDIO_IN_Stop+0x3c>)
 8004dbe:	f004 f80e 	bl	8008dde <HAL_SAI_DMAStop>
  
  /* Call Audio Codec Stop function */
  if(audio_drv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
 8004dc2:	4b0c      	ldr	r3, [pc, #48]	@ (8004df4 <BSP_AUDIO_IN_Stop+0x40>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	699b      	ldr	r3, [r3, #24]
 8004dc8:	6879      	ldr	r1, [r7, #4]
 8004dca:	2034      	movs	r0, #52	@ 0x34
 8004dcc:	4798      	blx	r3
 8004dce:	4603      	mov	r3, r0
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d001      	beq.n	8004dd8 <BSP_AUDIO_IN_Stop+0x24>
  {
    return AUDIO_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e006      	b.n	8004de6 <BSP_AUDIO_IN_Stop+0x32>
  }
  else
  {
    if(Option == CODEC_PDWN_HW)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d102      	bne.n	8004de4 <BSP_AUDIO_IN_Stop+0x30>
    {
      /* Wait at least 100us */
      HAL_Delay(1);
 8004dde:	2001      	movs	r0, #1
 8004de0:	f000 fbb8 	bl	8005554 <HAL_Delay>
    }
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 8004de4:	2300      	movs	r3, #0
  }
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3708      	adds	r7, #8
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
 8004dee:	bf00      	nop
 8004df0:	20030f68 	.word	0x20030f68
 8004df4:	20030ee0 	.word	0x20030ee0

08004df8 <HAL_SAI_RxCpltCallback>:
  * @brief  Rx Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b082      	sub	sp, #8
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 8004e00:	f009 f870 	bl	800dee4 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8004e04:	bf00      	nop
 8004e06:	3708      	adds	r7, #8
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}

08004e0c <HAL_SAI_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b082      	sub	sp, #8
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
  BSP_AUDIO_IN_HalfTransfer_CallBack();
 8004e14:	f009 f8ae 	bl	800df74 <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 8004e18:	bf00      	nop
 8004e1a:	3708      	adds	r7, #8
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}

08004e20 <BSP_AUDIO_IN_Error_CallBack>:
/**
  * @brief  Audio IN Error callback function.
  * @retval None
  */
__weak void BSP_AUDIO_IN_Error_CallBack(void)
{   
 8004e20:	b480      	push	{r7}
 8004e22:	af00      	add	r7, sp, #0
  /* This function is called when an Interrupt due to transfer error on or peripheral
     error occurs. */
}
 8004e24:	bf00      	nop
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr
	...

08004e30 <BSP_AUDIO_IN_MspInit>:
  * @param  hsai: SAI handle
  * @param  Params
  * @retval None
  */
__weak void BSP_AUDIO_IN_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b08c      	sub	sp, #48	@ 0x30
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_sai_rx;
  GPIO_InitTypeDef  gpio_init_structure;  

  /* Enable SAI clock */
  AUDIO_IN_SAIx_CLK_ENABLE();
 8004e3a:	4b50      	ldr	r3, [pc, #320]	@ (8004f7c <BSP_AUDIO_IN_MspInit+0x14c>)
 8004e3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e3e:	4a4f      	ldr	r2, [pc, #316]	@ (8004f7c <BSP_AUDIO_IN_MspInit+0x14c>)
 8004e40:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004e44:	6453      	str	r3, [r2, #68]	@ 0x44
 8004e46:	4b4d      	ldr	r3, [pc, #308]	@ (8004f7c <BSP_AUDIO_IN_MspInit+0x14c>)
 8004e48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e4a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e4e:	61bb      	str	r3, [r7, #24]
 8004e50:	69bb      	ldr	r3, [r7, #24]
  
  /* Enable SD GPIO clock */
  AUDIO_IN_SAIx_SD_ENABLE();
 8004e52:	4b4a      	ldr	r3, [pc, #296]	@ (8004f7c <BSP_AUDIO_IN_MspInit+0x14c>)
 8004e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e56:	4a49      	ldr	r2, [pc, #292]	@ (8004f7c <BSP_AUDIO_IN_MspInit+0x14c>)
 8004e58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8004e5e:	4b47      	ldr	r3, [pc, #284]	@ (8004f7c <BSP_AUDIO_IN_MspInit+0x14c>)
 8004e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e66:	617b      	str	r3, [r7, #20]
 8004e68:	697b      	ldr	r3, [r7, #20]
  /* CODEC_SAI pin configuration: SD pin */
  gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
 8004e6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004e6e:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8004e70:	2302      	movs	r3, #2
 8004e72:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8004e74:	2300      	movs	r3, #0
 8004e76:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8004e78:	2302      	movs	r3, #2
 8004e7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_IN_SAIx_SD_AF;
 8004e7c:	230a      	movs	r3, #10
 8004e7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 8004e80:	f107 031c 	add.w	r3, r7, #28
 8004e84:	4619      	mov	r1, r3
 8004e86:	483e      	ldr	r0, [pc, #248]	@ (8004f80 <BSP_AUDIO_IN_MspInit+0x150>)
 8004e88:	f001 fa00 	bl	800628c <HAL_GPIO_Init>

  /* Enable Audio INT GPIO clock */
  AUDIO_IN_INT_GPIO_ENABLE();
 8004e8c:	4b3b      	ldr	r3, [pc, #236]	@ (8004f7c <BSP_AUDIO_IN_MspInit+0x14c>)
 8004e8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e90:	4a3a      	ldr	r2, [pc, #232]	@ (8004f7c <BSP_AUDIO_IN_MspInit+0x14c>)
 8004e92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e96:	6313      	str	r3, [r2, #48]	@ 0x30
 8004e98:	4b38      	ldr	r3, [pc, #224]	@ (8004f7c <BSP_AUDIO_IN_MspInit+0x14c>)
 8004e9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ea0:	613b      	str	r3, [r7, #16]
 8004ea2:	693b      	ldr	r3, [r7, #16]
  /* Audio INT pin configuration: input */
  gpio_init_structure.Pin = AUDIO_IN_INT_GPIO_PIN;
 8004ea4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ea8:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8004eb2:	2302      	movs	r3, #2
 8004eb4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(AUDIO_IN_INT_GPIO_PORT, &gpio_init_structure);
 8004eb6:	f107 031c 	add.w	r3, r7, #28
 8004eba:	4619      	mov	r1, r3
 8004ebc:	4831      	ldr	r0, [pc, #196]	@ (8004f84 <BSP_AUDIO_IN_MspInit+0x154>)
 8004ebe:	f001 f9e5 	bl	800628c <HAL_GPIO_Init>

  /* Enable the DMA clock */
  AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 8004ec2:	4b2e      	ldr	r3, [pc, #184]	@ (8004f7c <BSP_AUDIO_IN_MspInit+0x14c>)
 8004ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ec6:	4a2d      	ldr	r2, [pc, #180]	@ (8004f7c <BSP_AUDIO_IN_MspInit+0x14c>)
 8004ec8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004ecc:	6313      	str	r3, [r2, #48]	@ 0x30
 8004ece:	4b2b      	ldr	r3, [pc, #172]	@ (8004f7c <BSP_AUDIO_IN_MspInit+0x14c>)
 8004ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ed2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ed6:	60fb      	str	r3, [r7, #12]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
    
  if(hsai->Instance == AUDIO_IN_SAIx)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a2a      	ldr	r2, [pc, #168]	@ (8004f88 <BSP_AUDIO_IN_MspInit+0x158>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d137      	bne.n	8004f54 <BSP_AUDIO_IN_MspInit+0x124>
  {
    /* Configure the hdma_sai_rx handle parameters */
    hdma_sai_rx.Init.Channel             = AUDIO_IN_SAIx_DMAx_CHANNEL;
 8004ee4:	4b29      	ldr	r3, [pc, #164]	@ (8004f8c <BSP_AUDIO_IN_MspInit+0x15c>)
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	605a      	str	r2, [r3, #4]
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8004eea:	4b28      	ldr	r3, [pc, #160]	@ (8004f8c <BSP_AUDIO_IN_MspInit+0x15c>)
 8004eec:	2200      	movs	r2, #0
 8004eee:	609a      	str	r2, [r3, #8]
    hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8004ef0:	4b26      	ldr	r3, [pc, #152]	@ (8004f8c <BSP_AUDIO_IN_MspInit+0x15c>)
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	60da      	str	r2, [r3, #12]
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8004ef6:	4b25      	ldr	r3, [pc, #148]	@ (8004f8c <BSP_AUDIO_IN_MspInit+0x15c>)
 8004ef8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004efc:	611a      	str	r2, [r3, #16]
    hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAIx_DMAx_PERIPH_DATA_SIZE;
 8004efe:	4b23      	ldr	r3, [pc, #140]	@ (8004f8c <BSP_AUDIO_IN_MspInit+0x15c>)
 8004f00:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004f04:	615a      	str	r2, [r3, #20]
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
 8004f06:	4b21      	ldr	r3, [pc, #132]	@ (8004f8c <BSP_AUDIO_IN_MspInit+0x15c>)
 8004f08:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004f0c:	619a      	str	r2, [r3, #24]
    hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 8004f0e:	4b1f      	ldr	r3, [pc, #124]	@ (8004f8c <BSP_AUDIO_IN_MspInit+0x15c>)
 8004f10:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004f14:	61da      	str	r2, [r3, #28]
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8004f16:	4b1d      	ldr	r3, [pc, #116]	@ (8004f8c <BSP_AUDIO_IN_MspInit+0x15c>)
 8004f18:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004f1c:	621a      	str	r2, [r3, #32]
    hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8004f1e:	4b1b      	ldr	r3, [pc, #108]	@ (8004f8c <BSP_AUDIO_IN_MspInit+0x15c>)
 8004f20:	2200      	movs	r2, #0
 8004f22:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8004f24:	4b19      	ldr	r3, [pc, #100]	@ (8004f8c <BSP_AUDIO_IN_MspInit+0x15c>)
 8004f26:	2203      	movs	r2, #3
 8004f28:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8004f2a:	4b18      	ldr	r3, [pc, #96]	@ (8004f8c <BSP_AUDIO_IN_MspInit+0x15c>)
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 8004f30:	4b16      	ldr	r3, [pc, #88]	@ (8004f8c <BSP_AUDIO_IN_MspInit+0x15c>)
 8004f32:	2200      	movs	r2, #0
 8004f34:	631a      	str	r2, [r3, #48]	@ 0x30
    
    hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 8004f36:	4b15      	ldr	r3, [pc, #84]	@ (8004f8c <BSP_AUDIO_IN_MspInit+0x15c>)
 8004f38:	4a15      	ldr	r2, [pc, #84]	@ (8004f90 <BSP_AUDIO_IN_MspInit+0x160>)
 8004f3a:	601a      	str	r2, [r3, #0]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4a13      	ldr	r2, [pc, #76]	@ (8004f8c <BSP_AUDIO_IN_MspInit+0x15c>)
 8004f40:	671a      	str	r2, [r3, #112]	@ 0x70
 8004f42:	4a12      	ldr	r2, [pc, #72]	@ (8004f8c <BSP_AUDIO_IN_MspInit+0x15c>)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6393      	str	r3, [r2, #56]	@ 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_rx);
 8004f48:	4810      	ldr	r0, [pc, #64]	@ (8004f8c <BSP_AUDIO_IN_MspInit+0x15c>)
 8004f4a:	f000 fdd9 	bl	8005b00 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_rx);
 8004f4e:	480f      	ldr	r0, [pc, #60]	@ (8004f8c <BSP_AUDIO_IN_MspInit+0x15c>)
 8004f50:	f000 fd28 	bl	80059a4 <HAL_DMA_Init>
  }
  
  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8004f54:	2200      	movs	r2, #0
 8004f56:	210f      	movs	r1, #15
 8004f58:	2046      	movs	r0, #70	@ 0x46
 8004f5a:	f000 fbfa 	bl	8005752 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 8004f5e:	2046      	movs	r0, #70	@ 0x46
 8004f60:	f000 fc13 	bl	800578a <HAL_NVIC_EnableIRQ>

  /* Audio INT IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_IN_INT_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8004f64:	2200      	movs	r2, #0
 8004f66:	210f      	movs	r1, #15
 8004f68:	2028      	movs	r0, #40	@ 0x28
 8004f6a:	f000 fbf2 	bl	8005752 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_INT_IRQ);
 8004f6e:	2028      	movs	r0, #40	@ 0x28
 8004f70:	f000 fc0b 	bl	800578a <HAL_NVIC_EnableIRQ>
}
 8004f74:	bf00      	nop
 8004f76:	3730      	adds	r7, #48	@ 0x30
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}
 8004f7c:	40023800 	.word	0x40023800
 8004f80:	40021800 	.word	0x40021800
 8004f84:	40021c00 	.word	0x40021c00
 8004f88:	40015c24 	.word	0x40015c24
 8004f8c:	2003104c 	.word	0x2003104c
 8004f90:	400264b8 	.word	0x400264b8

08004f94 <SAIx_In_Init>:
  * @param  SlotActive: CODEC_AUDIOFRAME_SLOT_02 or CODEC_AUDIOFRAME_SLOT_13
  * @param  AudioFreq: Audio frequency to be configured for the SAI peripheral.
  * @retval None
  */
static void SAIx_In_Init(uint32_t SaiOutMode, uint32_t SlotActive, uint32_t AudioFreq)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b084      	sub	sp, #16
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	60b9      	str	r1, [r7, #8]
 8004f9e:	607a      	str	r2, [r7, #4]
  /* Initialize SAI2 block A in MASTER RX */
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8004fa0:	4b53      	ldr	r3, [pc, #332]	@ (80050f0 <SAIx_In_Init+0x15c>)
 8004fa2:	4a54      	ldr	r2, [pc, #336]	@ (80050f4 <SAIx_In_Init+0x160>)
 8004fa4:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8004fa6:	4b52      	ldr	r3, [pc, #328]	@ (80050f0 <SAIx_In_Init+0x15c>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	4b50      	ldr	r3, [pc, #320]	@ (80050f0 <SAIx_In_Init+0x15c>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004fb4:	601a      	str	r2, [r3, #0]

  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
 8004fb6:	4a4e      	ldr	r2, [pc, #312]	@ (80050f0 <SAIx_In_Init+0x15c>)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	61d3      	str	r3, [r2, #28]
  haudio_out_sai.Init.AudioMode = SaiOutMode;
 8004fbc:	4a4c      	ldr	r2, [pc, #304]	@ (80050f0 <SAIx_In_Init+0x15c>)
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	6053      	str	r3, [r2, #4]
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 8004fc2:	4b4b      	ldr	r3, [pc, #300]	@ (80050f0 <SAIx_In_Init+0x15c>)
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	615a      	str	r2, [r3, #20]
  haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 8004fc8:	4b49      	ldr	r3, [pc, #292]	@ (80050f0 <SAIx_In_Init+0x15c>)
 8004fca:	2200      	movs	r2, #0
 8004fcc:	631a      	str	r2, [r3, #48]	@ 0x30
  haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
 8004fce:	4b48      	ldr	r3, [pc, #288]	@ (80050f0 <SAIx_In_Init+0x15c>)
 8004fd0:	2280      	movs	r2, #128	@ 0x80
 8004fd2:	635a      	str	r2, [r3, #52]	@ 0x34
  haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8004fd4:	4b46      	ldr	r3, [pc, #280]	@ (80050f0 <SAIx_In_Init+0x15c>)
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	639a      	str	r2, [r3, #56]	@ 0x38
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8004fda:	4b45      	ldr	r3, [pc, #276]	@ (80050f0 <SAIx_In_Init+0x15c>)
 8004fdc:	2201      	movs	r2, #1
 8004fde:	63da      	str	r2, [r3, #60]	@ 0x3c
  haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
 8004fe0:	4b43      	ldr	r3, [pc, #268]	@ (80050f0 <SAIx_In_Init+0x15c>)
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	609a      	str	r2, [r3, #8]
  haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 8004fe6:	4b42      	ldr	r3, [pc, #264]	@ (80050f0 <SAIx_In_Init+0x15c>)
 8004fe8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004fec:	611a      	str	r2, [r3, #16]
  haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8004fee:	4b40      	ldr	r3, [pc, #256]	@ (80050f0 <SAIx_In_Init+0x15c>)
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	619a      	str	r2, [r3, #24]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  haudio_out_sai.FrameInit.FrameLength = 64;
 8004ff4:	4b3e      	ldr	r3, [pc, #248]	@ (80050f0 <SAIx_In_Init+0x15c>)
 8004ff6:	2240      	movs	r2, #64	@ 0x40
 8004ff8:	641a      	str	r2, [r3, #64]	@ 0x40
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 8004ffa:	4b3d      	ldr	r3, [pc, #244]	@ (80050f0 <SAIx_In_Init+0x15c>)
 8004ffc:	2220      	movs	r2, #32
 8004ffe:	645a      	str	r2, [r3, #68]	@ 0x44
  haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8005000:	4b3b      	ldr	r3, [pc, #236]	@ (80050f0 <SAIx_In_Init+0x15c>)
 8005002:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005006:	649a      	str	r2, [r3, #72]	@ 0x48
  haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8005008:	4b39      	ldr	r3, [pc, #228]	@ (80050f0 <SAIx_In_Init+0x15c>)
 800500a:	2200      	movs	r2, #0
 800500c:	64da      	str	r2, [r3, #76]	@ 0x4c
  haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 800500e:	4b38      	ldr	r3, [pc, #224]	@ (80050f0 <SAIx_In_Init+0x15c>)
 8005010:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8005014:	651a      	str	r2, [r3, #80]	@ 0x50
  /* Configure SAI Block_x Slot
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot actives */
  haudio_out_sai.SlotInit.FirstBitOffset = 0;
 8005016:	4b36      	ldr	r3, [pc, #216]	@ (80050f0 <SAIx_In_Init+0x15c>)
 8005018:	2200      	movs	r2, #0
 800501a:	655a      	str	r2, [r3, #84]	@ 0x54
  haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800501c:	4b34      	ldr	r3, [pc, #208]	@ (80050f0 <SAIx_In_Init+0x15c>)
 800501e:	2200      	movs	r2, #0
 8005020:	659a      	str	r2, [r3, #88]	@ 0x58
  haudio_out_sai.SlotInit.SlotNumber = 4;
 8005022:	4b33      	ldr	r3, [pc, #204]	@ (80050f0 <SAIx_In_Init+0x15c>)
 8005024:	2204      	movs	r2, #4
 8005026:	65da      	str	r2, [r3, #92]	@ 0x5c
  haudio_out_sai.SlotInit.SlotActive = SlotActive;
 8005028:	4a31      	ldr	r2, [pc, #196]	@ (80050f0 <SAIx_In_Init+0x15c>)
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	6613      	str	r3, [r2, #96]	@ 0x60

  HAL_SAI_Init(&haudio_out_sai);
 800502e:	4830      	ldr	r0, [pc, #192]	@ (80050f0 <SAIx_In_Init+0x15c>)
 8005030:	f003 fd22 	bl	8008a78 <HAL_SAI_Init>

  /* Initialize SAI2 block B in SLAVE RX synchronous from SAI2 block A */
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8005034:	4b30      	ldr	r3, [pc, #192]	@ (80050f8 <SAIx_In_Init+0x164>)
 8005036:	4a31      	ldr	r2, [pc, #196]	@ (80050fc <SAIx_In_Init+0x168>)
 8005038:	601a      	str	r2, [r3, #0]
  
  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 800503a:	4b2f      	ldr	r3, [pc, #188]	@ (80050f8 <SAIx_In_Init+0x164>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	4b2d      	ldr	r3, [pc, #180]	@ (80050f8 <SAIx_In_Init+0x164>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005048:	601a      	str	r2, [r3, #0]
  
  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  haudio_in_sai.Init.AudioFrequency = AudioFreq;
 800504a:	4a2b      	ldr	r2, [pc, #172]	@ (80050f8 <SAIx_In_Init+0x164>)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	61d3      	str	r3, [r2, #28]
  haudio_in_sai.Init.AudioMode = SAI_MODESLAVE_RX;
 8005050:	4b29      	ldr	r3, [pc, #164]	@ (80050f8 <SAIx_In_Init+0x164>)
 8005052:	2203      	movs	r2, #3
 8005054:	605a      	str	r2, [r3, #4]
  haudio_in_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 8005056:	4b28      	ldr	r3, [pc, #160]	@ (80050f8 <SAIx_In_Init+0x164>)
 8005058:	2200      	movs	r2, #0
 800505a:	615a      	str	r2, [r3, #20]
  haudio_in_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 800505c:	4b26      	ldr	r3, [pc, #152]	@ (80050f8 <SAIx_In_Init+0x164>)
 800505e:	2200      	movs	r2, #0
 8005060:	631a      	str	r2, [r3, #48]	@ 0x30
  haudio_in_sai.Init.DataSize = SAI_DATASIZE_16;
 8005062:	4b25      	ldr	r3, [pc, #148]	@ (80050f8 <SAIx_In_Init+0x164>)
 8005064:	2280      	movs	r2, #128	@ 0x80
 8005066:	635a      	str	r2, [r3, #52]	@ 0x34
  haudio_in_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8005068:	4b23      	ldr	r3, [pc, #140]	@ (80050f8 <SAIx_In_Init+0x164>)
 800506a:	2200      	movs	r2, #0
 800506c:	639a      	str	r2, [r3, #56]	@ 0x38
  haudio_in_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 800506e:	4b22      	ldr	r3, [pc, #136]	@ (80050f8 <SAIx_In_Init+0x164>)
 8005070:	2201      	movs	r2, #1
 8005072:	63da      	str	r2, [r3, #60]	@ 0x3c
  haudio_in_sai.Init.Synchro = SAI_SYNCHRONOUS;
 8005074:	4b20      	ldr	r3, [pc, #128]	@ (80050f8 <SAIx_In_Init+0x164>)
 8005076:	2201      	movs	r2, #1
 8005078:	609a      	str	r2, [r3, #8]
  haudio_in_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLED;
 800507a:	4b1f      	ldr	r3, [pc, #124]	@ (80050f8 <SAIx_In_Init+0x164>)
 800507c:	2200      	movs	r2, #0
 800507e:	611a      	str	r2, [r3, #16]
  haudio_in_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8005080:	4b1d      	ldr	r3, [pc, #116]	@ (80050f8 <SAIx_In_Init+0x164>)
 8005082:	2201      	movs	r2, #1
 8005084:	619a      	str	r2, [r3, #24]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  haudio_in_sai.FrameInit.FrameLength = 64;
 8005086:	4b1c      	ldr	r3, [pc, #112]	@ (80050f8 <SAIx_In_Init+0x164>)
 8005088:	2240      	movs	r2, #64	@ 0x40
 800508a:	641a      	str	r2, [r3, #64]	@ 0x40
  haudio_in_sai.FrameInit.ActiveFrameLength = 32;
 800508c:	4b1a      	ldr	r3, [pc, #104]	@ (80050f8 <SAIx_In_Init+0x164>)
 800508e:	2220      	movs	r2, #32
 8005090:	645a      	str	r2, [r3, #68]	@ 0x44
  haudio_in_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8005092:	4b19      	ldr	r3, [pc, #100]	@ (80050f8 <SAIx_In_Init+0x164>)
 8005094:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005098:	649a      	str	r2, [r3, #72]	@ 0x48
  haudio_in_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800509a:	4b17      	ldr	r3, [pc, #92]	@ (80050f8 <SAIx_In_Init+0x164>)
 800509c:	2200      	movs	r2, #0
 800509e:	64da      	str	r2, [r3, #76]	@ 0x4c
  haudio_in_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 80050a0:	4b15      	ldr	r3, [pc, #84]	@ (80050f8 <SAIx_In_Init+0x164>)
 80050a2:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80050a6:	651a      	str	r2, [r3, #80]	@ 0x50
  /* Configure SAI Block_x Slot
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot active */
  haudio_in_sai.SlotInit.FirstBitOffset = 0;
 80050a8:	4b13      	ldr	r3, [pc, #76]	@ (80050f8 <SAIx_In_Init+0x164>)
 80050aa:	2200      	movs	r2, #0
 80050ac:	655a      	str	r2, [r3, #84]	@ 0x54
  haudio_in_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80050ae:	4b12      	ldr	r3, [pc, #72]	@ (80050f8 <SAIx_In_Init+0x164>)
 80050b0:	2200      	movs	r2, #0
 80050b2:	659a      	str	r2, [r3, #88]	@ 0x58
  haudio_in_sai.SlotInit.SlotNumber = 4;
 80050b4:	4b10      	ldr	r3, [pc, #64]	@ (80050f8 <SAIx_In_Init+0x164>)
 80050b6:	2204      	movs	r2, #4
 80050b8:	65da      	str	r2, [r3, #92]	@ 0x5c
  haudio_in_sai.SlotInit.SlotActive = SlotActive;
 80050ba:	4a0f      	ldr	r2, [pc, #60]	@ (80050f8 <SAIx_In_Init+0x164>)
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	6613      	str	r3, [r2, #96]	@ 0x60

  HAL_SAI_Init(&haudio_in_sai);
 80050c0:	480d      	ldr	r0, [pc, #52]	@ (80050f8 <SAIx_In_Init+0x164>)
 80050c2:	f003 fcd9 	bl	8008a78 <HAL_SAI_Init>

  /* Enable SAI peripheral to generate MCLK */
  __HAL_SAI_ENABLE(&haudio_out_sai);
 80050c6:	4b0a      	ldr	r3, [pc, #40]	@ (80050f0 <SAIx_In_Init+0x15c>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	4b08      	ldr	r3, [pc, #32]	@ (80050f0 <SAIx_In_Init+0x15c>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80050d4:	601a      	str	r2, [r3, #0]

  /* Enable SAI peripheral */
  __HAL_SAI_ENABLE(&haudio_in_sai);
 80050d6:	4b08      	ldr	r3, [pc, #32]	@ (80050f8 <SAIx_In_Init+0x164>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	4b06      	ldr	r3, [pc, #24]	@ (80050f8 <SAIx_In_Init+0x164>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80050e4:	601a      	str	r2, [r3, #0]
}
 80050e6:	bf00      	nop
 80050e8:	3710      	adds	r7, #16
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	20030ee4 	.word	0x20030ee4
 80050f4:	40015c04 	.word	0x40015c04
 80050f8:	20030f68 	.word	0x20030f68
 80050fc:	40015c24 	.word	0x40015c24

08005100 <SAIx_In_DeInit>:
/**
  * @brief  Deinitializes the output Audio Codec audio interface (SAI).
  * @retval None
  */
static void SAIx_In_DeInit(void)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	af00      	add	r7, sp, #0
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8005104:	4b07      	ldr	r3, [pc, #28]	@ (8005124 <SAIx_In_DeInit+0x24>)
 8005106:	4a08      	ldr	r2, [pc, #32]	@ (8005128 <SAIx_In_DeInit+0x28>)
 8005108:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 800510a:	4b06      	ldr	r3, [pc, #24]	@ (8005124 <SAIx_In_DeInit+0x24>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	4b04      	ldr	r3, [pc, #16]	@ (8005124 <SAIx_In_DeInit+0x24>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005118:	601a      	str	r2, [r3, #0]

  HAL_SAI_DeInit(&haudio_in_sai);
 800511a:	4802      	ldr	r0, [pc, #8]	@ (8005124 <SAIx_In_DeInit+0x24>)
 800511c:	f003 fe2a 	bl	8008d74 <HAL_SAI_DeInit>
}
 8005120:	bf00      	nop
 8005122:	bd80      	pop	{r7, pc}
 8005124:	20030f68 	.word	0x20030f68
 8005128:	40015c24 	.word	0x40015c24

0800512c <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 800512c:	b580      	push	{r7, lr}
 800512e:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8005130:	4b29      	ldr	r3, [pc, #164]	@ (80051d8 <BSP_SDRAM_Init+0xac>)
 8005132:	4a2a      	ldr	r2, [pc, #168]	@ (80051dc <BSP_SDRAM_Init+0xb0>)
 8005134:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8005136:	4b2a      	ldr	r3, [pc, #168]	@ (80051e0 <BSP_SDRAM_Init+0xb4>)
 8005138:	2202      	movs	r2, #2
 800513a:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 800513c:	4b28      	ldr	r3, [pc, #160]	@ (80051e0 <BSP_SDRAM_Init+0xb4>)
 800513e:	2207      	movs	r2, #7
 8005140:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8005142:	4b27      	ldr	r3, [pc, #156]	@ (80051e0 <BSP_SDRAM_Init+0xb4>)
 8005144:	2204      	movs	r2, #4
 8005146:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8005148:	4b25      	ldr	r3, [pc, #148]	@ (80051e0 <BSP_SDRAM_Init+0xb4>)
 800514a:	2207      	movs	r2, #7
 800514c:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 800514e:	4b24      	ldr	r3, [pc, #144]	@ (80051e0 <BSP_SDRAM_Init+0xb4>)
 8005150:	2202      	movs	r2, #2
 8005152:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8005154:	4b22      	ldr	r3, [pc, #136]	@ (80051e0 <BSP_SDRAM_Init+0xb4>)
 8005156:	2202      	movs	r2, #2
 8005158:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 800515a:	4b21      	ldr	r3, [pc, #132]	@ (80051e0 <BSP_SDRAM_Init+0xb4>)
 800515c:	2202      	movs	r2, #2
 800515e:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8005160:	4b1d      	ldr	r3, [pc, #116]	@ (80051d8 <BSP_SDRAM_Init+0xac>)
 8005162:	2200      	movs	r2, #0
 8005164:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8005166:	4b1c      	ldr	r3, [pc, #112]	@ (80051d8 <BSP_SDRAM_Init+0xac>)
 8005168:	2200      	movs	r2, #0
 800516a:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 800516c:	4b1a      	ldr	r3, [pc, #104]	@ (80051d8 <BSP_SDRAM_Init+0xac>)
 800516e:	2204      	movs	r2, #4
 8005170:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8005172:	4b19      	ldr	r3, [pc, #100]	@ (80051d8 <BSP_SDRAM_Init+0xac>)
 8005174:	2210      	movs	r2, #16
 8005176:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8005178:	4b17      	ldr	r3, [pc, #92]	@ (80051d8 <BSP_SDRAM_Init+0xac>)
 800517a:	2240      	movs	r2, #64	@ 0x40
 800517c:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 800517e:	4b16      	ldr	r3, [pc, #88]	@ (80051d8 <BSP_SDRAM_Init+0xac>)
 8005180:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005184:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8005186:	4b14      	ldr	r3, [pc, #80]	@ (80051d8 <BSP_SDRAM_Init+0xac>)
 8005188:	2200      	movs	r2, #0
 800518a:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 800518c:	4b12      	ldr	r3, [pc, #72]	@ (80051d8 <BSP_SDRAM_Init+0xac>)
 800518e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005192:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8005194:	4b10      	ldr	r3, [pc, #64]	@ (80051d8 <BSP_SDRAM_Init+0xac>)
 8005196:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800519a:	625a      	str	r2, [r3, #36]	@ 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800519c:	4b0e      	ldr	r3, [pc, #56]	@ (80051d8 <BSP_SDRAM_Init+0xac>)
 800519e:	2200      	movs	r2, #0
 80051a0:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 80051a2:	2100      	movs	r1, #0
 80051a4:	480c      	ldr	r0, [pc, #48]	@ (80051d8 <BSP_SDRAM_Init+0xac>)
 80051a6:	f000 f87f 	bl	80052a8 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 80051aa:	490d      	ldr	r1, [pc, #52]	@ (80051e0 <BSP_SDRAM_Init+0xb4>)
 80051ac:	480a      	ldr	r0, [pc, #40]	@ (80051d8 <BSP_SDRAM_Init+0xac>)
 80051ae:	f005 f92d 	bl	800a40c <HAL_SDRAM_Init>
 80051b2:	4603      	mov	r3, r0
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d003      	beq.n	80051c0 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80051b8:	4b0a      	ldr	r3, [pc, #40]	@ (80051e4 <BSP_SDRAM_Init+0xb8>)
 80051ba:	2201      	movs	r2, #1
 80051bc:	701a      	strb	r2, [r3, #0]
 80051be:	e002      	b.n	80051c6 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80051c0:	4b08      	ldr	r3, [pc, #32]	@ (80051e4 <BSP_SDRAM_Init+0xb8>)
 80051c2:	2200      	movs	r2, #0
 80051c4:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80051c6:	f240 6003 	movw	r0, #1539	@ 0x603
 80051ca:	f000 f80d 	bl	80051e8 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 80051ce:	4b05      	ldr	r3, [pc, #20]	@ (80051e4 <BSP_SDRAM_Init+0xb8>)
 80051d0:	781b      	ldrb	r3, [r3, #0]
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	bd80      	pop	{r7, pc}
 80051d6:	bf00      	nop
 80051d8:	200310ac 	.word	0x200310ac
 80051dc:	a0000140 	.word	0xa0000140
 80051e0:	200310e0 	.word	0x200310e0
 80051e4:	200000f5 	.word	0x200000f5

080051e8 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b084      	sub	sp, #16
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 80051f0:	2300      	movs	r3, #0
 80051f2:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80051f4:	4b2a      	ldr	r3, [pc, #168]	@ (80052a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80051f6:	2201      	movs	r2, #1
 80051f8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80051fa:	4b29      	ldr	r3, [pc, #164]	@ (80052a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80051fc:	2210      	movs	r2, #16
 80051fe:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8005200:	4b27      	ldr	r3, [pc, #156]	@ (80052a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005202:	2201      	movs	r2, #1
 8005204:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8005206:	4b26      	ldr	r3, [pc, #152]	@ (80052a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005208:	2200      	movs	r2, #0
 800520a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800520c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005210:	4923      	ldr	r1, [pc, #140]	@ (80052a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005212:	4824      	ldr	r0, [pc, #144]	@ (80052a4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8005214:	f005 f92e 	bl	800a474 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8005218:	2001      	movs	r0, #1
 800521a:	f000 f99b 	bl	8005554 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 800521e:	4b20      	ldr	r3, [pc, #128]	@ (80052a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005220:	2202      	movs	r2, #2
 8005222:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8005224:	4b1e      	ldr	r3, [pc, #120]	@ (80052a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005226:	2210      	movs	r2, #16
 8005228:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800522a:	4b1d      	ldr	r3, [pc, #116]	@ (80052a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800522c:	2201      	movs	r2, #1
 800522e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8005230:	4b1b      	ldr	r3, [pc, #108]	@ (80052a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005232:	2200      	movs	r2, #0
 8005234:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8005236:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800523a:	4919      	ldr	r1, [pc, #100]	@ (80052a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800523c:	4819      	ldr	r0, [pc, #100]	@ (80052a4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800523e:	f005 f919 	bl	800a474 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8005242:	4b17      	ldr	r3, [pc, #92]	@ (80052a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005244:	2203      	movs	r2, #3
 8005246:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8005248:	4b15      	ldr	r3, [pc, #84]	@ (80052a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800524a:	2210      	movs	r2, #16
 800524c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 800524e:	4b14      	ldr	r3, [pc, #80]	@ (80052a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005250:	2208      	movs	r2, #8
 8005252:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8005254:	4b12      	ldr	r3, [pc, #72]	@ (80052a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005256:	2200      	movs	r2, #0
 8005258:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800525a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800525e:	4910      	ldr	r1, [pc, #64]	@ (80052a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005260:	4810      	ldr	r0, [pc, #64]	@ (80052a4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8005262:	f005 f907 	bl	800a474 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8005266:	f44f 7308 	mov.w	r3, #544	@ 0x220
 800526a:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 800526c:	4b0c      	ldr	r3, [pc, #48]	@ (80052a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800526e:	2204      	movs	r2, #4
 8005270:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8005272:	4b0b      	ldr	r3, [pc, #44]	@ (80052a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005274:	2210      	movs	r2, #16
 8005276:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8005278:	4b09      	ldr	r3, [pc, #36]	@ (80052a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800527a:	2201      	movs	r2, #1
 800527c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	4a07      	ldr	r2, [pc, #28]	@ (80052a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005282:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8005284:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005288:	4905      	ldr	r1, [pc, #20]	@ (80052a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800528a:	4806      	ldr	r0, [pc, #24]	@ (80052a4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800528c:	f005 f8f2 	bl	800a474 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8005290:	6879      	ldr	r1, [r7, #4]
 8005292:	4804      	ldr	r0, [pc, #16]	@ (80052a4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8005294:	f005 f923 	bl	800a4de <HAL_SDRAM_ProgramRefreshRate>
}
 8005298:	bf00      	nop
 800529a:	3710      	adds	r7, #16
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}
 80052a0:	200310fc 	.word	0x200310fc
 80052a4:	200310ac 	.word	0x200310ac

080052a8 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b090      	sub	sp, #64	@ 0x40
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80052b2:	4b70      	ldr	r3, [pc, #448]	@ (8005474 <BSP_SDRAM_MspInit+0x1cc>)
 80052b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052b6:	4a6f      	ldr	r2, [pc, #444]	@ (8005474 <BSP_SDRAM_MspInit+0x1cc>)
 80052b8:	f043 0301 	orr.w	r3, r3, #1
 80052bc:	6393      	str	r3, [r2, #56]	@ 0x38
 80052be:	4b6d      	ldr	r3, [pc, #436]	@ (8005474 <BSP_SDRAM_MspInit+0x1cc>)
 80052c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052c2:	f003 0301 	and.w	r3, r3, #1
 80052c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80052c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80052ca:	4b6a      	ldr	r3, [pc, #424]	@ (8005474 <BSP_SDRAM_MspInit+0x1cc>)
 80052cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052ce:	4a69      	ldr	r2, [pc, #420]	@ (8005474 <BSP_SDRAM_MspInit+0x1cc>)
 80052d0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80052d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80052d6:	4b67      	ldr	r3, [pc, #412]	@ (8005474 <BSP_SDRAM_MspInit+0x1cc>)
 80052d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80052de:	627b      	str	r3, [r7, #36]	@ 0x24
 80052e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80052e2:	4b64      	ldr	r3, [pc, #400]	@ (8005474 <BSP_SDRAM_MspInit+0x1cc>)
 80052e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052e6:	4a63      	ldr	r2, [pc, #396]	@ (8005474 <BSP_SDRAM_MspInit+0x1cc>)
 80052e8:	f043 0304 	orr.w	r3, r3, #4
 80052ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80052ee:	4b61      	ldr	r3, [pc, #388]	@ (8005474 <BSP_SDRAM_MspInit+0x1cc>)
 80052f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052f2:	f003 0304 	and.w	r3, r3, #4
 80052f6:	623b      	str	r3, [r7, #32]
 80052f8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80052fa:	4b5e      	ldr	r3, [pc, #376]	@ (8005474 <BSP_SDRAM_MspInit+0x1cc>)
 80052fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052fe:	4a5d      	ldr	r2, [pc, #372]	@ (8005474 <BSP_SDRAM_MspInit+0x1cc>)
 8005300:	f043 0308 	orr.w	r3, r3, #8
 8005304:	6313      	str	r3, [r2, #48]	@ 0x30
 8005306:	4b5b      	ldr	r3, [pc, #364]	@ (8005474 <BSP_SDRAM_MspInit+0x1cc>)
 8005308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800530a:	f003 0308 	and.w	r3, r3, #8
 800530e:	61fb      	str	r3, [r7, #28]
 8005310:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005312:	4b58      	ldr	r3, [pc, #352]	@ (8005474 <BSP_SDRAM_MspInit+0x1cc>)
 8005314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005316:	4a57      	ldr	r2, [pc, #348]	@ (8005474 <BSP_SDRAM_MspInit+0x1cc>)
 8005318:	f043 0310 	orr.w	r3, r3, #16
 800531c:	6313      	str	r3, [r2, #48]	@ 0x30
 800531e:	4b55      	ldr	r3, [pc, #340]	@ (8005474 <BSP_SDRAM_MspInit+0x1cc>)
 8005320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005322:	f003 0310 	and.w	r3, r3, #16
 8005326:	61bb      	str	r3, [r7, #24]
 8005328:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800532a:	4b52      	ldr	r3, [pc, #328]	@ (8005474 <BSP_SDRAM_MspInit+0x1cc>)
 800532c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800532e:	4a51      	ldr	r2, [pc, #324]	@ (8005474 <BSP_SDRAM_MspInit+0x1cc>)
 8005330:	f043 0320 	orr.w	r3, r3, #32
 8005334:	6313      	str	r3, [r2, #48]	@ 0x30
 8005336:	4b4f      	ldr	r3, [pc, #316]	@ (8005474 <BSP_SDRAM_MspInit+0x1cc>)
 8005338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800533a:	f003 0320 	and.w	r3, r3, #32
 800533e:	617b      	str	r3, [r7, #20]
 8005340:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8005342:	4b4c      	ldr	r3, [pc, #304]	@ (8005474 <BSP_SDRAM_MspInit+0x1cc>)
 8005344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005346:	4a4b      	ldr	r2, [pc, #300]	@ (8005474 <BSP_SDRAM_MspInit+0x1cc>)
 8005348:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800534c:	6313      	str	r3, [r2, #48]	@ 0x30
 800534e:	4b49      	ldr	r3, [pc, #292]	@ (8005474 <BSP_SDRAM_MspInit+0x1cc>)
 8005350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005352:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005356:	613b      	str	r3, [r7, #16]
 8005358:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800535a:	4b46      	ldr	r3, [pc, #280]	@ (8005474 <BSP_SDRAM_MspInit+0x1cc>)
 800535c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800535e:	4a45      	ldr	r2, [pc, #276]	@ (8005474 <BSP_SDRAM_MspInit+0x1cc>)
 8005360:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005364:	6313      	str	r3, [r2, #48]	@ 0x30
 8005366:	4b43      	ldr	r3, [pc, #268]	@ (8005474 <BSP_SDRAM_MspInit+0x1cc>)
 8005368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800536a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800536e:	60fb      	str	r3, [r7, #12]
 8005370:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005372:	2302      	movs	r3, #2
 8005374:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8005376:	2301      	movs	r3, #1
 8005378:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800537a:	2302      	movs	r3, #2
 800537c:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800537e:	230c      	movs	r3, #12
 8005380:	63fb      	str	r3, [r7, #60]	@ 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8005382:	2308      	movs	r3, #8
 8005384:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8005386:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800538a:	4619      	mov	r1, r3
 800538c:	483a      	ldr	r0, [pc, #232]	@ (8005478 <BSP_SDRAM_MspInit+0x1d0>)
 800538e:	f000 ff7d 	bl	800628c <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8005392:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8005396:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8005398:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800539c:	4619      	mov	r1, r3
 800539e:	4837      	ldr	r0, [pc, #220]	@ (800547c <BSP_SDRAM_MspInit+0x1d4>)
 80053a0:	f000 ff74 	bl	800628c <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80053a4:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80053a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80053aa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80053ae:	4619      	mov	r1, r3
 80053b0:	4833      	ldr	r0, [pc, #204]	@ (8005480 <BSP_SDRAM_MspInit+0x1d8>)
 80053b2:	f000 ff6b 	bl	800628c <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 80053b6:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80053ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80053bc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80053c0:	4619      	mov	r1, r3
 80053c2:	4830      	ldr	r0, [pc, #192]	@ (8005484 <BSP_SDRAM_MspInit+0x1dc>)
 80053c4:	f000 ff62 	bl	800628c <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 80053c8:	f248 1333 	movw	r3, #33075	@ 0x8133
 80053cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80053ce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80053d2:	4619      	mov	r1, r3
 80053d4:	482c      	ldr	r0, [pc, #176]	@ (8005488 <BSP_SDRAM_MspInit+0x1e0>)
 80053d6:	f000 ff59 	bl	800628c <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 80053da:	2328      	movs	r3, #40	@ 0x28
 80053dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 80053de:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80053e2:	4619      	mov	r1, r3
 80053e4:	4829      	ldr	r0, [pc, #164]	@ (800548c <BSP_SDRAM_MspInit+0x1e4>)
 80053e6:	f000 ff51 	bl	800628c <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80053ea:	4b29      	ldr	r3, [pc, #164]	@ (8005490 <BSP_SDRAM_MspInit+0x1e8>)
 80053ec:	2200      	movs	r2, #0
 80053ee:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80053f0:	4b27      	ldr	r3, [pc, #156]	@ (8005490 <BSP_SDRAM_MspInit+0x1e8>)
 80053f2:	2280      	movs	r2, #128	@ 0x80
 80053f4:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80053f6:	4b26      	ldr	r3, [pc, #152]	@ (8005490 <BSP_SDRAM_MspInit+0x1e8>)
 80053f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80053fc:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80053fe:	4b24      	ldr	r3, [pc, #144]	@ (8005490 <BSP_SDRAM_MspInit+0x1e8>)
 8005400:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005404:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005406:	4b22      	ldr	r3, [pc, #136]	@ (8005490 <BSP_SDRAM_MspInit+0x1e8>)
 8005408:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800540c:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800540e:	4b20      	ldr	r3, [pc, #128]	@ (8005490 <BSP_SDRAM_MspInit+0x1e8>)
 8005410:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005414:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8005416:	4b1e      	ldr	r3, [pc, #120]	@ (8005490 <BSP_SDRAM_MspInit+0x1e8>)
 8005418:	2200      	movs	r2, #0
 800541a:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 800541c:	4b1c      	ldr	r3, [pc, #112]	@ (8005490 <BSP_SDRAM_MspInit+0x1e8>)
 800541e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005422:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8005424:	4b1a      	ldr	r3, [pc, #104]	@ (8005490 <BSP_SDRAM_MspInit+0x1e8>)
 8005426:	2200      	movs	r2, #0
 8005428:	625a      	str	r2, [r3, #36]	@ 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800542a:	4b19      	ldr	r3, [pc, #100]	@ (8005490 <BSP_SDRAM_MspInit+0x1e8>)
 800542c:	2203      	movs	r2, #3
 800542e:	629a      	str	r2, [r3, #40]	@ 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8005430:	4b17      	ldr	r3, [pc, #92]	@ (8005490 <BSP_SDRAM_MspInit+0x1e8>)
 8005432:	2200      	movs	r2, #0
 8005434:	62da      	str	r2, [r3, #44]	@ 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8005436:	4b16      	ldr	r3, [pc, #88]	@ (8005490 <BSP_SDRAM_MspInit+0x1e8>)
 8005438:	2200      	movs	r2, #0
 800543a:	631a      	str	r2, [r3, #48]	@ 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 800543c:	4b14      	ldr	r3, [pc, #80]	@ (8005490 <BSP_SDRAM_MspInit+0x1e8>)
 800543e:	4a15      	ldr	r2, [pc, #84]	@ (8005494 <BSP_SDRAM_MspInit+0x1ec>)
 8005440:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4a12      	ldr	r2, [pc, #72]	@ (8005490 <BSP_SDRAM_MspInit+0x1e8>)
 8005446:	631a      	str	r2, [r3, #48]	@ 0x30
 8005448:	4a11      	ldr	r2, [pc, #68]	@ (8005490 <BSP_SDRAM_MspInit+0x1e8>)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6393      	str	r3, [r2, #56]	@ 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 800544e:	4810      	ldr	r0, [pc, #64]	@ (8005490 <BSP_SDRAM_MspInit+0x1e8>)
 8005450:	f000 fb56 	bl	8005b00 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8005454:	480e      	ldr	r0, [pc, #56]	@ (8005490 <BSP_SDRAM_MspInit+0x1e8>)
 8005456:	f000 faa5 	bl	80059a4 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800545a:	2200      	movs	r2, #0
 800545c:	210f      	movs	r1, #15
 800545e:	2038      	movs	r0, #56	@ 0x38
 8005460:	f000 f977 	bl	8005752 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8005464:	2038      	movs	r0, #56	@ 0x38
 8005466:	f000 f990 	bl	800578a <HAL_NVIC_EnableIRQ>
}
 800546a:	bf00      	nop
 800546c:	3740      	adds	r7, #64	@ 0x40
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}
 8005472:	bf00      	nop
 8005474:	40023800 	.word	0x40023800
 8005478:	40020800 	.word	0x40020800
 800547c:	40020c00 	.word	0x40020c00
 8005480:	40021000 	.word	0x40021000
 8005484:	40021400 	.word	0x40021400
 8005488:	40021800 	.word	0x40021800
 800548c:	40021c00 	.word	0x40021c00
 8005490:	2003110c 	.word	0x2003110c
 8005494:	40026410 	.word	0x40026410

08005498 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800549c:	2003      	movs	r0, #3
 800549e:	f000 f94d 	bl	800573c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80054a2:	2000      	movs	r0, #0
 80054a4:	f000 f806 	bl	80054b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80054a8:	f7fd fb66 	bl	8002b78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80054ac:	2300      	movs	r3, #0
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	bd80      	pop	{r7, pc}
	...

080054b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b082      	sub	sp, #8
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80054bc:	4b12      	ldr	r3, [pc, #72]	@ (8005508 <HAL_InitTick+0x54>)
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	4b12      	ldr	r3, [pc, #72]	@ (800550c <HAL_InitTick+0x58>)
 80054c2:	781b      	ldrb	r3, [r3, #0]
 80054c4:	4619      	mov	r1, r3
 80054c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80054ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80054ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80054d2:	4618      	mov	r0, r3
 80054d4:	f000 f967 	bl	80057a6 <HAL_SYSTICK_Config>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d001      	beq.n	80054e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	e00e      	b.n	8005500 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2b0f      	cmp	r3, #15
 80054e6:	d80a      	bhi.n	80054fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80054e8:	2200      	movs	r2, #0
 80054ea:	6879      	ldr	r1, [r7, #4]
 80054ec:	f04f 30ff 	mov.w	r0, #4294967295
 80054f0:	f000 f92f 	bl	8005752 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80054f4:	4a06      	ldr	r2, [pc, #24]	@ (8005510 <HAL_InitTick+0x5c>)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80054fa:	2300      	movs	r3, #0
 80054fc:	e000      	b.n	8005500 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
}
 8005500:	4618      	mov	r0, r3
 8005502:	3708      	adds	r7, #8
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}
 8005508:	200000c0 	.word	0x200000c0
 800550c:	200000fc 	.word	0x200000fc
 8005510:	200000f8 	.word	0x200000f8

08005514 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005514:	b480      	push	{r7}
 8005516:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005518:	4b06      	ldr	r3, [pc, #24]	@ (8005534 <HAL_IncTick+0x20>)
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	461a      	mov	r2, r3
 800551e:	4b06      	ldr	r3, [pc, #24]	@ (8005538 <HAL_IncTick+0x24>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4413      	add	r3, r2
 8005524:	4a04      	ldr	r2, [pc, #16]	@ (8005538 <HAL_IncTick+0x24>)
 8005526:	6013      	str	r3, [r2, #0]
}
 8005528:	bf00      	nop
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr
 8005532:	bf00      	nop
 8005534:	200000fc 	.word	0x200000fc
 8005538:	2003116c 	.word	0x2003116c

0800553c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800553c:	b480      	push	{r7}
 800553e:	af00      	add	r7, sp, #0
  return uwTick;
 8005540:	4b03      	ldr	r3, [pc, #12]	@ (8005550 <HAL_GetTick+0x14>)
 8005542:	681b      	ldr	r3, [r3, #0]
}
 8005544:	4618      	mov	r0, r3
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr
 800554e:	bf00      	nop
 8005550:	2003116c 	.word	0x2003116c

08005554 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b084      	sub	sp, #16
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800555c:	f7ff ffee 	bl	800553c <HAL_GetTick>
 8005560:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800556c:	d005      	beq.n	800557a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800556e:	4b0a      	ldr	r3, [pc, #40]	@ (8005598 <HAL_Delay+0x44>)
 8005570:	781b      	ldrb	r3, [r3, #0]
 8005572:	461a      	mov	r2, r3
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	4413      	add	r3, r2
 8005578:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800557a:	bf00      	nop
 800557c:	f7ff ffde 	bl	800553c <HAL_GetTick>
 8005580:	4602      	mov	r2, r0
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	1ad3      	subs	r3, r2, r3
 8005586:	68fa      	ldr	r2, [r7, #12]
 8005588:	429a      	cmp	r2, r3
 800558a:	d8f7      	bhi.n	800557c <HAL_Delay+0x28>
  {
  }
}
 800558c:	bf00      	nop
 800558e:	bf00      	nop
 8005590:	3710      	adds	r7, #16
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}
 8005596:	bf00      	nop
 8005598:	200000fc 	.word	0x200000fc

0800559c <__NVIC_SetPriorityGrouping>:
{
 800559c:	b480      	push	{r7}
 800559e:	b085      	sub	sp, #20
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f003 0307 	and.w	r3, r3, #7
 80055aa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80055ac:	4b0b      	ldr	r3, [pc, #44]	@ (80055dc <__NVIC_SetPriorityGrouping+0x40>)
 80055ae:	68db      	ldr	r3, [r3, #12]
 80055b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80055b2:	68ba      	ldr	r2, [r7, #8]
 80055b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80055b8:	4013      	ands	r3, r2
 80055ba:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80055c4:	4b06      	ldr	r3, [pc, #24]	@ (80055e0 <__NVIC_SetPriorityGrouping+0x44>)
 80055c6:	4313      	orrs	r3, r2
 80055c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80055ca:	4a04      	ldr	r2, [pc, #16]	@ (80055dc <__NVIC_SetPriorityGrouping+0x40>)
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	60d3      	str	r3, [r2, #12]
}
 80055d0:	bf00      	nop
 80055d2:	3714      	adds	r7, #20
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr
 80055dc:	e000ed00 	.word	0xe000ed00
 80055e0:	05fa0000 	.word	0x05fa0000

080055e4 <__NVIC_GetPriorityGrouping>:
{
 80055e4:	b480      	push	{r7}
 80055e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80055e8:	4b04      	ldr	r3, [pc, #16]	@ (80055fc <__NVIC_GetPriorityGrouping+0x18>)
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	0a1b      	lsrs	r3, r3, #8
 80055ee:	f003 0307 	and.w	r3, r3, #7
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr
 80055fc:	e000ed00 	.word	0xe000ed00

08005600 <__NVIC_EnableIRQ>:
{
 8005600:	b480      	push	{r7}
 8005602:	b083      	sub	sp, #12
 8005604:	af00      	add	r7, sp, #0
 8005606:	4603      	mov	r3, r0
 8005608:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800560a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800560e:	2b00      	cmp	r3, #0
 8005610:	db0b      	blt.n	800562a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005612:	79fb      	ldrb	r3, [r7, #7]
 8005614:	f003 021f 	and.w	r2, r3, #31
 8005618:	4907      	ldr	r1, [pc, #28]	@ (8005638 <__NVIC_EnableIRQ+0x38>)
 800561a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800561e:	095b      	lsrs	r3, r3, #5
 8005620:	2001      	movs	r0, #1
 8005622:	fa00 f202 	lsl.w	r2, r0, r2
 8005626:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800562a:	bf00      	nop
 800562c:	370c      	adds	r7, #12
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr
 8005636:	bf00      	nop
 8005638:	e000e100 	.word	0xe000e100

0800563c <__NVIC_SetPriority>:
{
 800563c:	b480      	push	{r7}
 800563e:	b083      	sub	sp, #12
 8005640:	af00      	add	r7, sp, #0
 8005642:	4603      	mov	r3, r0
 8005644:	6039      	str	r1, [r7, #0]
 8005646:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005648:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800564c:	2b00      	cmp	r3, #0
 800564e:	db0a      	blt.n	8005666 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	b2da      	uxtb	r2, r3
 8005654:	490c      	ldr	r1, [pc, #48]	@ (8005688 <__NVIC_SetPriority+0x4c>)
 8005656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800565a:	0112      	lsls	r2, r2, #4
 800565c:	b2d2      	uxtb	r2, r2
 800565e:	440b      	add	r3, r1
 8005660:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005664:	e00a      	b.n	800567c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	b2da      	uxtb	r2, r3
 800566a:	4908      	ldr	r1, [pc, #32]	@ (800568c <__NVIC_SetPriority+0x50>)
 800566c:	79fb      	ldrb	r3, [r7, #7]
 800566e:	f003 030f 	and.w	r3, r3, #15
 8005672:	3b04      	subs	r3, #4
 8005674:	0112      	lsls	r2, r2, #4
 8005676:	b2d2      	uxtb	r2, r2
 8005678:	440b      	add	r3, r1
 800567a:	761a      	strb	r2, [r3, #24]
}
 800567c:	bf00      	nop
 800567e:	370c      	adds	r7, #12
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr
 8005688:	e000e100 	.word	0xe000e100
 800568c:	e000ed00 	.word	0xe000ed00

08005690 <NVIC_EncodePriority>:
{
 8005690:	b480      	push	{r7}
 8005692:	b089      	sub	sp, #36	@ 0x24
 8005694:	af00      	add	r7, sp, #0
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	60b9      	str	r1, [r7, #8]
 800569a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f003 0307 	and.w	r3, r3, #7
 80056a2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80056a4:	69fb      	ldr	r3, [r7, #28]
 80056a6:	f1c3 0307 	rsb	r3, r3, #7
 80056aa:	2b04      	cmp	r3, #4
 80056ac:	bf28      	it	cs
 80056ae:	2304      	movcs	r3, #4
 80056b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80056b2:	69fb      	ldr	r3, [r7, #28]
 80056b4:	3304      	adds	r3, #4
 80056b6:	2b06      	cmp	r3, #6
 80056b8:	d902      	bls.n	80056c0 <NVIC_EncodePriority+0x30>
 80056ba:	69fb      	ldr	r3, [r7, #28]
 80056bc:	3b03      	subs	r3, #3
 80056be:	e000      	b.n	80056c2 <NVIC_EncodePriority+0x32>
 80056c0:	2300      	movs	r3, #0
 80056c2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056c4:	f04f 32ff 	mov.w	r2, #4294967295
 80056c8:	69bb      	ldr	r3, [r7, #24]
 80056ca:	fa02 f303 	lsl.w	r3, r2, r3
 80056ce:	43da      	mvns	r2, r3
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	401a      	ands	r2, r3
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80056d8:	f04f 31ff 	mov.w	r1, #4294967295
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	fa01 f303 	lsl.w	r3, r1, r3
 80056e2:	43d9      	mvns	r1, r3
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056e8:	4313      	orrs	r3, r2
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3724      	adds	r7, #36	@ 0x24
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr
	...

080056f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b082      	sub	sp, #8
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	3b01      	subs	r3, #1
 8005704:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005708:	d301      	bcc.n	800570e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800570a:	2301      	movs	r3, #1
 800570c:	e00f      	b.n	800572e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800570e:	4a0a      	ldr	r2, [pc, #40]	@ (8005738 <SysTick_Config+0x40>)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	3b01      	subs	r3, #1
 8005714:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005716:	210f      	movs	r1, #15
 8005718:	f04f 30ff 	mov.w	r0, #4294967295
 800571c:	f7ff ff8e 	bl	800563c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005720:	4b05      	ldr	r3, [pc, #20]	@ (8005738 <SysTick_Config+0x40>)
 8005722:	2200      	movs	r2, #0
 8005724:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005726:	4b04      	ldr	r3, [pc, #16]	@ (8005738 <SysTick_Config+0x40>)
 8005728:	2207      	movs	r2, #7
 800572a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800572c:	2300      	movs	r3, #0
}
 800572e:	4618      	mov	r0, r3
 8005730:	3708      	adds	r7, #8
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}
 8005736:	bf00      	nop
 8005738:	e000e010 	.word	0xe000e010

0800573c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b082      	sub	sp, #8
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f7ff ff29 	bl	800559c <__NVIC_SetPriorityGrouping>
}
 800574a:	bf00      	nop
 800574c:	3708      	adds	r7, #8
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}

08005752 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005752:	b580      	push	{r7, lr}
 8005754:	b086      	sub	sp, #24
 8005756:	af00      	add	r7, sp, #0
 8005758:	4603      	mov	r3, r0
 800575a:	60b9      	str	r1, [r7, #8]
 800575c:	607a      	str	r2, [r7, #4]
 800575e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005760:	2300      	movs	r3, #0
 8005762:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005764:	f7ff ff3e 	bl	80055e4 <__NVIC_GetPriorityGrouping>
 8005768:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800576a:	687a      	ldr	r2, [r7, #4]
 800576c:	68b9      	ldr	r1, [r7, #8]
 800576e:	6978      	ldr	r0, [r7, #20]
 8005770:	f7ff ff8e 	bl	8005690 <NVIC_EncodePriority>
 8005774:	4602      	mov	r2, r0
 8005776:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800577a:	4611      	mov	r1, r2
 800577c:	4618      	mov	r0, r3
 800577e:	f7ff ff5d 	bl	800563c <__NVIC_SetPriority>
}
 8005782:	bf00      	nop
 8005784:	3718      	adds	r7, #24
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}

0800578a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800578a:	b580      	push	{r7, lr}
 800578c:	b082      	sub	sp, #8
 800578e:	af00      	add	r7, sp, #0
 8005790:	4603      	mov	r3, r0
 8005792:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005798:	4618      	mov	r0, r3
 800579a:	f7ff ff31 	bl	8005600 <__NVIC_EnableIRQ>
}
 800579e:	bf00      	nop
 80057a0:	3708      	adds	r7, #8
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}

080057a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80057a6:	b580      	push	{r7, lr}
 80057a8:	b082      	sub	sp, #8
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f7ff ffa2 	bl	80056f8 <SysTick_Config>
 80057b4:	4603      	mov	r3, r0
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3708      	adds	r7, #8
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}
	...

080057c0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b082      	sub	sp, #8
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d101      	bne.n	80057d2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	e054      	b.n	800587c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	7f5b      	ldrb	r3, [r3, #29]
 80057d6:	b2db      	uxtb	r3, r3
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d105      	bne.n	80057e8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2200      	movs	r2, #0
 80057e0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f7fb fc0a 	bl	8000ffc <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2202      	movs	r2, #2
 80057ec:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	791b      	ldrb	r3, [r3, #4]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d10c      	bne.n	8005810 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a22      	ldr	r2, [pc, #136]	@ (8005884 <HAL_CRC_Init+0xc4>)
 80057fc:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	689a      	ldr	r2, [r3, #8]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f022 0218 	bic.w	r2, r2, #24
 800580c:	609a      	str	r2, [r3, #8]
 800580e:	e00c      	b.n	800582a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6899      	ldr	r1, [r3, #8]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	68db      	ldr	r3, [r3, #12]
 8005818:	461a      	mov	r2, r3
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f000 f834 	bl	8005888 <HAL_CRCEx_Polynomial_Set>
 8005820:	4603      	mov	r3, r0
 8005822:	2b00      	cmp	r3, #0
 8005824:	d001      	beq.n	800582a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	e028      	b.n	800587c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	795b      	ldrb	r3, [r3, #5]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d105      	bne.n	800583e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f04f 32ff 	mov.w	r2, #4294967295
 800583a:	611a      	str	r2, [r3, #16]
 800583c:	e004      	b.n	8005848 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	6912      	ldr	r2, [r2, #16]
 8005846:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	695a      	ldr	r2, [r3, #20]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	430a      	orrs	r2, r1
 800585c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	699a      	ldr	r2, [r3, #24]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	430a      	orrs	r2, r1
 8005872:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2201      	movs	r2, #1
 8005878:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800587a:	2300      	movs	r3, #0
}
 800587c:	4618      	mov	r0, r3
 800587e:	3708      	adds	r7, #8
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}
 8005884:	04c11db7 	.word	0x04c11db7

08005888 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8005888:	b480      	push	{r7}
 800588a:	b087      	sub	sp, #28
 800588c:	af00      	add	r7, sp, #0
 800588e:	60f8      	str	r0, [r7, #12]
 8005890:	60b9      	str	r1, [r7, #8]
 8005892:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005894:	2300      	movs	r3, #0
 8005896:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8005898:	231f      	movs	r3, #31
 800589a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	f003 0301 	and.w	r3, r3, #1
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d102      	bne.n	80058ac <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	75fb      	strb	r3, [r7, #23]
 80058aa:	e063      	b.n	8005974 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80058ac:	bf00      	nop
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	1e5a      	subs	r2, r3, #1
 80058b2:	613a      	str	r2, [r7, #16]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d009      	beq.n	80058cc <HAL_CRCEx_Polynomial_Set+0x44>
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	f003 031f 	and.w	r3, r3, #31
 80058be:	68ba      	ldr	r2, [r7, #8]
 80058c0:	fa22 f303 	lsr.w	r3, r2, r3
 80058c4:	f003 0301 	and.w	r3, r3, #1
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d0f0      	beq.n	80058ae <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2b18      	cmp	r3, #24
 80058d0:	d846      	bhi.n	8005960 <HAL_CRCEx_Polynomial_Set+0xd8>
 80058d2:	a201      	add	r2, pc, #4	@ (adr r2, 80058d8 <HAL_CRCEx_Polynomial_Set+0x50>)
 80058d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058d8:	08005967 	.word	0x08005967
 80058dc:	08005961 	.word	0x08005961
 80058e0:	08005961 	.word	0x08005961
 80058e4:	08005961 	.word	0x08005961
 80058e8:	08005961 	.word	0x08005961
 80058ec:	08005961 	.word	0x08005961
 80058f0:	08005961 	.word	0x08005961
 80058f4:	08005961 	.word	0x08005961
 80058f8:	08005955 	.word	0x08005955
 80058fc:	08005961 	.word	0x08005961
 8005900:	08005961 	.word	0x08005961
 8005904:	08005961 	.word	0x08005961
 8005908:	08005961 	.word	0x08005961
 800590c:	08005961 	.word	0x08005961
 8005910:	08005961 	.word	0x08005961
 8005914:	08005961 	.word	0x08005961
 8005918:	08005949 	.word	0x08005949
 800591c:	08005961 	.word	0x08005961
 8005920:	08005961 	.word	0x08005961
 8005924:	08005961 	.word	0x08005961
 8005928:	08005961 	.word	0x08005961
 800592c:	08005961 	.word	0x08005961
 8005930:	08005961 	.word	0x08005961
 8005934:	08005961 	.word	0x08005961
 8005938:	0800593d 	.word	0x0800593d
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	2b06      	cmp	r3, #6
 8005940:	d913      	bls.n	800596a <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8005946:	e010      	b.n	800596a <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	2b07      	cmp	r3, #7
 800594c:	d90f      	bls.n	800596e <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8005952:	e00c      	b.n	800596e <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	2b0f      	cmp	r3, #15
 8005958:	d90b      	bls.n	8005972 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800595e:	e008      	b.n	8005972 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	75fb      	strb	r3, [r7, #23]
        break;
 8005964:	e006      	b.n	8005974 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005966:	bf00      	nop
 8005968:	e004      	b.n	8005974 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800596a:	bf00      	nop
 800596c:	e002      	b.n	8005974 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800596e:	bf00      	nop
 8005970:	e000      	b.n	8005974 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005972:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8005974:	7dfb      	ldrb	r3, [r7, #23]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d10d      	bne.n	8005996 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	68ba      	ldr	r2, [r7, #8]
 8005980:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	f023 0118 	bic.w	r1, r3, #24
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	687a      	ldr	r2, [r7, #4]
 8005992:	430a      	orrs	r2, r1
 8005994:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8005996:	7dfb      	ldrb	r3, [r7, #23]
}
 8005998:	4618      	mov	r0, r3
 800599a:	371c      	adds	r7, #28
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr

080059a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b086      	sub	sp, #24
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80059ac:	2300      	movs	r3, #0
 80059ae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80059b0:	f7ff fdc4 	bl	800553c <HAL_GetTick>
 80059b4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d101      	bne.n	80059c0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	e099      	b.n	8005af4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2202      	movs	r2, #2
 80059c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2200      	movs	r2, #0
 80059cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f022 0201 	bic.w	r2, r2, #1
 80059de:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80059e0:	e00f      	b.n	8005a02 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80059e2:	f7ff fdab 	bl	800553c <HAL_GetTick>
 80059e6:	4602      	mov	r2, r0
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	1ad3      	subs	r3, r2, r3
 80059ec:	2b05      	cmp	r3, #5
 80059ee:	d908      	bls.n	8005a02 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2220      	movs	r2, #32
 80059f4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2203      	movs	r2, #3
 80059fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80059fe:	2303      	movs	r3, #3
 8005a00:	e078      	b.n	8005af4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f003 0301 	and.w	r3, r3, #1
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d1e8      	bne.n	80059e2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005a18:	697a      	ldr	r2, [r7, #20]
 8005a1a:	4b38      	ldr	r3, [pc, #224]	@ (8005afc <HAL_DMA_Init+0x158>)
 8005a1c:	4013      	ands	r3, r2
 8005a1e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	685a      	ldr	r2, [r3, #4]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005a2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	691b      	ldr	r3, [r3, #16]
 8005a34:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	699b      	ldr	r3, [r3, #24]
 8005a40:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a46:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6a1b      	ldr	r3, [r3, #32]
 8005a4c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005a4e:	697a      	ldr	r2, [r7, #20]
 8005a50:	4313      	orrs	r3, r2
 8005a52:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a58:	2b04      	cmp	r3, #4
 8005a5a:	d107      	bne.n	8005a6c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a64:	4313      	orrs	r3, r2
 8005a66:	697a      	ldr	r2, [r7, #20]
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	697a      	ldr	r2, [r7, #20]
 8005a72:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	695b      	ldr	r3, [r3, #20]
 8005a7a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	f023 0307 	bic.w	r3, r3, #7
 8005a82:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a88:	697a      	ldr	r2, [r7, #20]
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a92:	2b04      	cmp	r3, #4
 8005a94:	d117      	bne.n	8005ac6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a9a:	697a      	ldr	r2, [r7, #20]
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d00e      	beq.n	8005ac6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f000 fb73 	bl	8006194 <DMA_CheckFifoParam>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d008      	beq.n	8005ac6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2240      	movs	r2, #64	@ 0x40
 8005ab8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2200      	movs	r2, #0
 8005abe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	e016      	b.n	8005af4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	697a      	ldr	r2, [r7, #20]
 8005acc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f000 fb2a 	bl	8006128 <DMA_CalcBaseAndBitshift>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005adc:	223f      	movs	r2, #63	@ 0x3f
 8005ade:	409a      	lsls	r2, r3
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2201      	movs	r2, #1
 8005aee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005af2:	2300      	movs	r3, #0
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	3718      	adds	r7, #24
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}
 8005afc:	f010803f 	.word	0xf010803f

08005b00 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b084      	sub	sp, #16
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d101      	bne.n	8005b12 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	e050      	b.n	8005bb4 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	2b02      	cmp	r3, #2
 8005b1c:	d101      	bne.n	8005b22 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8005b1e:	2302      	movs	r3, #2
 8005b20:	e048      	b.n	8005bb4 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f022 0201 	bic.w	r2, r2, #1
 8005b30:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	2200      	movs	r2, #0
 8005b38:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	2200      	movs	r2, #0
 8005b48:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	2200      	movs	r2, #0
 8005b58:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	2221      	movs	r2, #33	@ 0x21
 8005b60:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f000 fae0 	bl	8006128 <DMA_CalcBaseAndBitshift>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b70:	223f      	movs	r2, #63	@ 0x3f
 8005b72:	409a      	lsls	r2, r3
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2200      	movs	r2, #0
 8005b82:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2200      	movs	r2, #0
 8005b88:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2200      	movs	r2, #0
 8005b94:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2200      	movs	r2, #0
 8005bae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005bb2:	2300      	movs	r3, #0
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3710      	adds	r7, #16
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}

08005bbc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b086      	sub	sp, #24
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	60f8      	str	r0, [r7, #12]
 8005bc4:	60b9      	str	r1, [r7, #8]
 8005bc6:	607a      	str	r2, [r7, #4]
 8005bc8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bd2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d101      	bne.n	8005be2 <HAL_DMA_Start_IT+0x26>
 8005bde:	2302      	movs	r3, #2
 8005be0:	e048      	b.n	8005c74 <HAL_DMA_Start_IT+0xb8>
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2201      	movs	r2, #1
 8005be6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005bf0:	b2db      	uxtb	r3, r3
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d137      	bne.n	8005c66 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2202      	movs	r2, #2
 8005bfa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2200      	movs	r2, #0
 8005c02:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	687a      	ldr	r2, [r7, #4]
 8005c08:	68b9      	ldr	r1, [r7, #8]
 8005c0a:	68f8      	ldr	r0, [r7, #12]
 8005c0c:	f000 fa5e 	bl	80060cc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c14:	223f      	movs	r2, #63	@ 0x3f
 8005c16:	409a      	lsls	r2, r3
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	681a      	ldr	r2, [r3, #0]
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f042 0216 	orr.w	r2, r2, #22
 8005c2a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	695a      	ldr	r2, [r3, #20]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005c3a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d007      	beq.n	8005c54 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f042 0208 	orr.w	r2, r2, #8
 8005c52:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	681a      	ldr	r2, [r3, #0]
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f042 0201 	orr.w	r2, r2, #1
 8005c62:	601a      	str	r2, [r3, #0]
 8005c64:	e005      	b.n	8005c72 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005c6e:	2302      	movs	r3, #2
 8005c70:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005c72:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3718      	adds	r7, #24
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}

08005c7c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b084      	sub	sp, #16
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c88:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005c8a:	f7ff fc57 	bl	800553c <HAL_GetTick>
 8005c8e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005c96:	b2db      	uxtb	r3, r3
 8005c98:	2b02      	cmp	r3, #2
 8005c9a:	d008      	beq.n	8005cae <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2280      	movs	r2, #128	@ 0x80
 8005ca0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8005caa:	2301      	movs	r3, #1
 8005cac:	e052      	b.n	8005d54 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f022 0216 	bic.w	r2, r2, #22
 8005cbc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	695a      	ldr	r2, [r3, #20]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005ccc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d103      	bne.n	8005cde <HAL_DMA_Abort+0x62>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d007      	beq.n	8005cee <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f022 0208 	bic.w	r2, r2, #8
 8005cec:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f022 0201 	bic.w	r2, r2, #1
 8005cfc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005cfe:	e013      	b.n	8005d28 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005d00:	f7ff fc1c 	bl	800553c <HAL_GetTick>
 8005d04:	4602      	mov	r2, r0
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	1ad3      	subs	r3, r2, r3
 8005d0a:	2b05      	cmp	r3, #5
 8005d0c:	d90c      	bls.n	8005d28 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2220      	movs	r2, #32
 8005d12:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2203      	movs	r2, #3
 8005d18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8005d24:	2303      	movs	r3, #3
 8005d26:	e015      	b.n	8005d54 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f003 0301 	and.w	r3, r3, #1
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d1e4      	bne.n	8005d00 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d3a:	223f      	movs	r2, #63	@ 0x3f
 8005d3c:	409a      	lsls	r2, r3
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2201      	movs	r2, #1
 8005d46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8005d52:	2300      	movs	r3, #0
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	3710      	adds	r7, #16
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}

08005d5c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b083      	sub	sp, #12
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005d6a:	b2db      	uxtb	r3, r3
 8005d6c:	2b02      	cmp	r3, #2
 8005d6e:	d004      	beq.n	8005d7a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2280      	movs	r2, #128	@ 0x80
 8005d74:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	e00c      	b.n	8005d94 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2205      	movs	r2, #5
 8005d7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f022 0201 	bic.w	r2, r2, #1
 8005d90:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005d92:	2300      	movs	r3, #0
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	370c      	adds	r7, #12
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr

08005da0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b086      	sub	sp, #24
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8005da8:	2300      	movs	r3, #0
 8005daa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8005dac:	4b8e      	ldr	r3, [pc, #568]	@ (8005fe8 <HAL_DMA_IRQHandler+0x248>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a8e      	ldr	r2, [pc, #568]	@ (8005fec <HAL_DMA_IRQHandler+0x24c>)
 8005db2:	fba2 2303 	umull	r2, r3, r2, r3
 8005db6:	0a9b      	lsrs	r3, r3, #10
 8005db8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dbe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005dca:	2208      	movs	r2, #8
 8005dcc:	409a      	lsls	r2, r3
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	4013      	ands	r3, r2
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d01a      	beq.n	8005e0c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f003 0304 	and.w	r3, r3, #4
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d013      	beq.n	8005e0c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f022 0204 	bic.w	r2, r2, #4
 8005df2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005df8:	2208      	movs	r2, #8
 8005dfa:	409a      	lsls	r2, r3
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e04:	f043 0201 	orr.w	r2, r3, #1
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e10:	2201      	movs	r2, #1
 8005e12:	409a      	lsls	r2, r3
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	4013      	ands	r3, r2
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d012      	beq.n	8005e42 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	695b      	ldr	r3, [r3, #20]
 8005e22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d00b      	beq.n	8005e42 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e2e:	2201      	movs	r2, #1
 8005e30:	409a      	lsls	r2, r3
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e3a:	f043 0202 	orr.w	r2, r3, #2
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e46:	2204      	movs	r2, #4
 8005e48:	409a      	lsls	r2, r3
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	4013      	ands	r3, r2
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d012      	beq.n	8005e78 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f003 0302 	and.w	r3, r3, #2
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d00b      	beq.n	8005e78 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e64:	2204      	movs	r2, #4
 8005e66:	409a      	lsls	r2, r3
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e70:	f043 0204 	orr.w	r2, r3, #4
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e7c:	2210      	movs	r2, #16
 8005e7e:	409a      	lsls	r2, r3
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	4013      	ands	r3, r2
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d043      	beq.n	8005f10 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f003 0308 	and.w	r3, r3, #8
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d03c      	beq.n	8005f10 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e9a:	2210      	movs	r2, #16
 8005e9c:	409a      	lsls	r2, r3
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d018      	beq.n	8005ee2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d108      	bne.n	8005ed0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d024      	beq.n	8005f10 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	4798      	blx	r3
 8005ece:	e01f      	b.n	8005f10 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d01b      	beq.n	8005f10 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	4798      	blx	r3
 8005ee0:	e016      	b.n	8005f10 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d107      	bne.n	8005f00 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f022 0208 	bic.w	r2, r2, #8
 8005efe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d003      	beq.n	8005f10 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f14:	2220      	movs	r2, #32
 8005f16:	409a      	lsls	r2, r3
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	4013      	ands	r3, r2
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	f000 808f 	beq.w	8006040 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f003 0310 	and.w	r3, r3, #16
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	f000 8087 	beq.w	8006040 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f36:	2220      	movs	r2, #32
 8005f38:	409a      	lsls	r2, r3
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005f44:	b2db      	uxtb	r3, r3
 8005f46:	2b05      	cmp	r3, #5
 8005f48:	d136      	bne.n	8005fb8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	681a      	ldr	r2, [r3, #0]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f022 0216 	bic.w	r2, r2, #22
 8005f58:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	695a      	ldr	r2, [r3, #20]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005f68:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d103      	bne.n	8005f7a <HAL_DMA_IRQHandler+0x1da>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d007      	beq.n	8005f8a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f022 0208 	bic.w	r2, r2, #8
 8005f88:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f8e:	223f      	movs	r2, #63	@ 0x3f
 8005f90:	409a      	lsls	r2, r3
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2201      	movs	r2, #1
 8005f9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d07e      	beq.n	80060ac <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	4798      	blx	r3
        }
        return;
 8005fb6:	e079      	b.n	80060ac <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d01d      	beq.n	8006002 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d10d      	bne.n	8005ff0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d031      	beq.n	8006040 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	4798      	blx	r3
 8005fe4:	e02c      	b.n	8006040 <HAL_DMA_IRQHandler+0x2a0>
 8005fe6:	bf00      	nop
 8005fe8:	200000c0 	.word	0x200000c0
 8005fec:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d023      	beq.n	8006040 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	4798      	blx	r3
 8006000:	e01e      	b.n	8006040 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800600c:	2b00      	cmp	r3, #0
 800600e:	d10f      	bne.n	8006030 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f022 0210 	bic.w	r2, r2, #16
 800601e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2201      	movs	r2, #1
 8006024:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2200      	movs	r2, #0
 800602c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006034:	2b00      	cmp	r3, #0
 8006036:	d003      	beq.n	8006040 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006044:	2b00      	cmp	r3, #0
 8006046:	d032      	beq.n	80060ae <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800604c:	f003 0301 	and.w	r3, r3, #1
 8006050:	2b00      	cmp	r3, #0
 8006052:	d022      	beq.n	800609a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2205      	movs	r2, #5
 8006058:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f022 0201 	bic.w	r2, r2, #1
 800606a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	3301      	adds	r3, #1
 8006070:	60bb      	str	r3, [r7, #8]
 8006072:	697a      	ldr	r2, [r7, #20]
 8006074:	429a      	cmp	r2, r3
 8006076:	d307      	bcc.n	8006088 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f003 0301 	and.w	r3, r3, #1
 8006082:	2b00      	cmp	r3, #0
 8006084:	d1f2      	bne.n	800606c <HAL_DMA_IRQHandler+0x2cc>
 8006086:	e000      	b.n	800608a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006088:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2201      	movs	r2, #1
 800608e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2200      	movs	r2, #0
 8006096:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d005      	beq.n	80060ae <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	4798      	blx	r3
 80060aa:	e000      	b.n	80060ae <HAL_DMA_IRQHandler+0x30e>
        return;
 80060ac:	bf00      	nop
    }
  }
}
 80060ae:	3718      	adds	r7, #24
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}

080060b4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b083      	sub	sp, #12
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	370c      	adds	r7, #12
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr

080060cc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b085      	sub	sp, #20
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	60f8      	str	r0, [r7, #12]
 80060d4:	60b9      	str	r1, [r7, #8]
 80060d6:	607a      	str	r2, [r7, #4]
 80060d8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80060e8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	683a      	ldr	r2, [r7, #0]
 80060f0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	689b      	ldr	r3, [r3, #8]
 80060f6:	2b40      	cmp	r3, #64	@ 0x40
 80060f8:	d108      	bne.n	800610c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	687a      	ldr	r2, [r7, #4]
 8006100:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	68ba      	ldr	r2, [r7, #8]
 8006108:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800610a:	e007      	b.n	800611c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	68ba      	ldr	r2, [r7, #8]
 8006112:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	687a      	ldr	r2, [r7, #4]
 800611a:	60da      	str	r2, [r3, #12]
}
 800611c:	bf00      	nop
 800611e:	3714      	adds	r7, #20
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr

08006128 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006128:	b480      	push	{r7}
 800612a:	b085      	sub	sp, #20
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	b2db      	uxtb	r3, r3
 8006136:	3b10      	subs	r3, #16
 8006138:	4a13      	ldr	r2, [pc, #76]	@ (8006188 <DMA_CalcBaseAndBitshift+0x60>)
 800613a:	fba2 2303 	umull	r2, r3, r2, r3
 800613e:	091b      	lsrs	r3, r3, #4
 8006140:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006142:	4a12      	ldr	r2, [pc, #72]	@ (800618c <DMA_CalcBaseAndBitshift+0x64>)
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	4413      	add	r3, r2
 8006148:	781b      	ldrb	r3, [r3, #0]
 800614a:	461a      	mov	r2, r3
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2b03      	cmp	r3, #3
 8006154:	d908      	bls.n	8006168 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	461a      	mov	r2, r3
 800615c:	4b0c      	ldr	r3, [pc, #48]	@ (8006190 <DMA_CalcBaseAndBitshift+0x68>)
 800615e:	4013      	ands	r3, r2
 8006160:	1d1a      	adds	r2, r3, #4
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	659a      	str	r2, [r3, #88]	@ 0x58
 8006166:	e006      	b.n	8006176 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	461a      	mov	r2, r3
 800616e:	4b08      	ldr	r3, [pc, #32]	@ (8006190 <DMA_CalcBaseAndBitshift+0x68>)
 8006170:	4013      	ands	r3, r2
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800617a:	4618      	mov	r0, r3
 800617c:	3714      	adds	r7, #20
 800617e:	46bd      	mov	sp, r7
 8006180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006184:	4770      	bx	lr
 8006186:	bf00      	nop
 8006188:	aaaaaaab 	.word	0xaaaaaaab
 800618c:	0801ad0c 	.word	0x0801ad0c
 8006190:	fffffc00 	.word	0xfffffc00

08006194 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006194:	b480      	push	{r7}
 8006196:	b085      	sub	sp, #20
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800619c:	2300      	movs	r3, #0
 800619e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061a4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	699b      	ldr	r3, [r3, #24]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d11f      	bne.n	80061ee <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	2b03      	cmp	r3, #3
 80061b2:	d856      	bhi.n	8006262 <DMA_CheckFifoParam+0xce>
 80061b4:	a201      	add	r2, pc, #4	@ (adr r2, 80061bc <DMA_CheckFifoParam+0x28>)
 80061b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ba:	bf00      	nop
 80061bc:	080061cd 	.word	0x080061cd
 80061c0:	080061df 	.word	0x080061df
 80061c4:	080061cd 	.word	0x080061cd
 80061c8:	08006263 	.word	0x08006263
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d046      	beq.n	8006266 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80061d8:	2301      	movs	r3, #1
 80061da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80061dc:	e043      	b.n	8006266 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061e2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80061e6:	d140      	bne.n	800626a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80061e8:	2301      	movs	r3, #1
 80061ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80061ec:	e03d      	b.n	800626a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	699b      	ldr	r3, [r3, #24]
 80061f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061f6:	d121      	bne.n	800623c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	2b03      	cmp	r3, #3
 80061fc:	d837      	bhi.n	800626e <DMA_CheckFifoParam+0xda>
 80061fe:	a201      	add	r2, pc, #4	@ (adr r2, 8006204 <DMA_CheckFifoParam+0x70>)
 8006200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006204:	08006215 	.word	0x08006215
 8006208:	0800621b 	.word	0x0800621b
 800620c:	08006215 	.word	0x08006215
 8006210:	0800622d 	.word	0x0800622d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006214:	2301      	movs	r3, #1
 8006216:	73fb      	strb	r3, [r7, #15]
      break;
 8006218:	e030      	b.n	800627c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800621e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006222:	2b00      	cmp	r3, #0
 8006224:	d025      	beq.n	8006272 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006226:	2301      	movs	r3, #1
 8006228:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800622a:	e022      	b.n	8006272 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006230:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006234:	d11f      	bne.n	8006276 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006236:	2301      	movs	r3, #1
 8006238:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800623a:	e01c      	b.n	8006276 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	2b02      	cmp	r3, #2
 8006240:	d903      	bls.n	800624a <DMA_CheckFifoParam+0xb6>
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	2b03      	cmp	r3, #3
 8006246:	d003      	beq.n	8006250 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006248:	e018      	b.n	800627c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800624a:	2301      	movs	r3, #1
 800624c:	73fb      	strb	r3, [r7, #15]
      break;
 800624e:	e015      	b.n	800627c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006254:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006258:	2b00      	cmp	r3, #0
 800625a:	d00e      	beq.n	800627a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800625c:	2301      	movs	r3, #1
 800625e:	73fb      	strb	r3, [r7, #15]
      break;
 8006260:	e00b      	b.n	800627a <DMA_CheckFifoParam+0xe6>
      break;
 8006262:	bf00      	nop
 8006264:	e00a      	b.n	800627c <DMA_CheckFifoParam+0xe8>
      break;
 8006266:	bf00      	nop
 8006268:	e008      	b.n	800627c <DMA_CheckFifoParam+0xe8>
      break;
 800626a:	bf00      	nop
 800626c:	e006      	b.n	800627c <DMA_CheckFifoParam+0xe8>
      break;
 800626e:	bf00      	nop
 8006270:	e004      	b.n	800627c <DMA_CheckFifoParam+0xe8>
      break;
 8006272:	bf00      	nop
 8006274:	e002      	b.n	800627c <DMA_CheckFifoParam+0xe8>
      break;   
 8006276:	bf00      	nop
 8006278:	e000      	b.n	800627c <DMA_CheckFifoParam+0xe8>
      break;
 800627a:	bf00      	nop
    }
  } 
  
  return status; 
 800627c:	7bfb      	ldrb	r3, [r7, #15]
}
 800627e:	4618      	mov	r0, r3
 8006280:	3714      	adds	r7, #20
 8006282:	46bd      	mov	sp, r7
 8006284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006288:	4770      	bx	lr
 800628a:	bf00      	nop

0800628c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800628c:	b480      	push	{r7}
 800628e:	b089      	sub	sp, #36	@ 0x24
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8006296:	2300      	movs	r3, #0
 8006298:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800629a:	2300      	movs	r3, #0
 800629c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800629e:	2300      	movs	r3, #0
 80062a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80062a2:	2300      	movs	r3, #0
 80062a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80062a6:	2300      	movs	r3, #0
 80062a8:	61fb      	str	r3, [r7, #28]
 80062aa:	e175      	b.n	8006598 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80062ac:	2201      	movs	r2, #1
 80062ae:	69fb      	ldr	r3, [r7, #28]
 80062b0:	fa02 f303 	lsl.w	r3, r2, r3
 80062b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	697a      	ldr	r2, [r7, #20]
 80062bc:	4013      	ands	r3, r2
 80062be:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80062c0:	693a      	ldr	r2, [r7, #16]
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	429a      	cmp	r2, r3
 80062c6:	f040 8164 	bne.w	8006592 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	f003 0303 	and.w	r3, r3, #3
 80062d2:	2b01      	cmp	r3, #1
 80062d4:	d005      	beq.n	80062e2 <HAL_GPIO_Init+0x56>
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	f003 0303 	and.w	r3, r3, #3
 80062de:	2b02      	cmp	r3, #2
 80062e0:	d130      	bne.n	8006344 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80062e8:	69fb      	ldr	r3, [r7, #28]
 80062ea:	005b      	lsls	r3, r3, #1
 80062ec:	2203      	movs	r2, #3
 80062ee:	fa02 f303 	lsl.w	r3, r2, r3
 80062f2:	43db      	mvns	r3, r3
 80062f4:	69ba      	ldr	r2, [r7, #24]
 80062f6:	4013      	ands	r3, r2
 80062f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	68da      	ldr	r2, [r3, #12]
 80062fe:	69fb      	ldr	r3, [r7, #28]
 8006300:	005b      	lsls	r3, r3, #1
 8006302:	fa02 f303 	lsl.w	r3, r2, r3
 8006306:	69ba      	ldr	r2, [r7, #24]
 8006308:	4313      	orrs	r3, r2
 800630a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	69ba      	ldr	r2, [r7, #24]
 8006310:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006318:	2201      	movs	r2, #1
 800631a:	69fb      	ldr	r3, [r7, #28]
 800631c:	fa02 f303 	lsl.w	r3, r2, r3
 8006320:	43db      	mvns	r3, r3
 8006322:	69ba      	ldr	r2, [r7, #24]
 8006324:	4013      	ands	r3, r2
 8006326:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	091b      	lsrs	r3, r3, #4
 800632e:	f003 0201 	and.w	r2, r3, #1
 8006332:	69fb      	ldr	r3, [r7, #28]
 8006334:	fa02 f303 	lsl.w	r3, r2, r3
 8006338:	69ba      	ldr	r2, [r7, #24]
 800633a:	4313      	orrs	r3, r2
 800633c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	69ba      	ldr	r2, [r7, #24]
 8006342:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	f003 0303 	and.w	r3, r3, #3
 800634c:	2b03      	cmp	r3, #3
 800634e:	d017      	beq.n	8006380 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	68db      	ldr	r3, [r3, #12]
 8006354:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006356:	69fb      	ldr	r3, [r7, #28]
 8006358:	005b      	lsls	r3, r3, #1
 800635a:	2203      	movs	r2, #3
 800635c:	fa02 f303 	lsl.w	r3, r2, r3
 8006360:	43db      	mvns	r3, r3
 8006362:	69ba      	ldr	r2, [r7, #24]
 8006364:	4013      	ands	r3, r2
 8006366:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	689a      	ldr	r2, [r3, #8]
 800636c:	69fb      	ldr	r3, [r7, #28]
 800636e:	005b      	lsls	r3, r3, #1
 8006370:	fa02 f303 	lsl.w	r3, r2, r3
 8006374:	69ba      	ldr	r2, [r7, #24]
 8006376:	4313      	orrs	r3, r2
 8006378:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	69ba      	ldr	r2, [r7, #24]
 800637e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	f003 0303 	and.w	r3, r3, #3
 8006388:	2b02      	cmp	r3, #2
 800638a:	d123      	bne.n	80063d4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800638c:	69fb      	ldr	r3, [r7, #28]
 800638e:	08da      	lsrs	r2, r3, #3
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	3208      	adds	r2, #8
 8006394:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006398:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800639a:	69fb      	ldr	r3, [r7, #28]
 800639c:	f003 0307 	and.w	r3, r3, #7
 80063a0:	009b      	lsls	r3, r3, #2
 80063a2:	220f      	movs	r2, #15
 80063a4:	fa02 f303 	lsl.w	r3, r2, r3
 80063a8:	43db      	mvns	r3, r3
 80063aa:	69ba      	ldr	r2, [r7, #24]
 80063ac:	4013      	ands	r3, r2
 80063ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	691a      	ldr	r2, [r3, #16]
 80063b4:	69fb      	ldr	r3, [r7, #28]
 80063b6:	f003 0307 	and.w	r3, r3, #7
 80063ba:	009b      	lsls	r3, r3, #2
 80063bc:	fa02 f303 	lsl.w	r3, r2, r3
 80063c0:	69ba      	ldr	r2, [r7, #24]
 80063c2:	4313      	orrs	r3, r2
 80063c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80063c6:	69fb      	ldr	r3, [r7, #28]
 80063c8:	08da      	lsrs	r2, r3, #3
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	3208      	adds	r2, #8
 80063ce:	69b9      	ldr	r1, [r7, #24]
 80063d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80063da:	69fb      	ldr	r3, [r7, #28]
 80063dc:	005b      	lsls	r3, r3, #1
 80063de:	2203      	movs	r2, #3
 80063e0:	fa02 f303 	lsl.w	r3, r2, r3
 80063e4:	43db      	mvns	r3, r3
 80063e6:	69ba      	ldr	r2, [r7, #24]
 80063e8:	4013      	ands	r3, r2
 80063ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	f003 0203 	and.w	r2, r3, #3
 80063f4:	69fb      	ldr	r3, [r7, #28]
 80063f6:	005b      	lsls	r3, r3, #1
 80063f8:	fa02 f303 	lsl.w	r3, r2, r3
 80063fc:	69ba      	ldr	r2, [r7, #24]
 80063fe:	4313      	orrs	r3, r2
 8006400:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	69ba      	ldr	r2, [r7, #24]
 8006406:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006410:	2b00      	cmp	r3, #0
 8006412:	f000 80be 	beq.w	8006592 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006416:	4b66      	ldr	r3, [pc, #408]	@ (80065b0 <HAL_GPIO_Init+0x324>)
 8006418:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800641a:	4a65      	ldr	r2, [pc, #404]	@ (80065b0 <HAL_GPIO_Init+0x324>)
 800641c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006420:	6453      	str	r3, [r2, #68]	@ 0x44
 8006422:	4b63      	ldr	r3, [pc, #396]	@ (80065b0 <HAL_GPIO_Init+0x324>)
 8006424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006426:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800642a:	60fb      	str	r3, [r7, #12]
 800642c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800642e:	4a61      	ldr	r2, [pc, #388]	@ (80065b4 <HAL_GPIO_Init+0x328>)
 8006430:	69fb      	ldr	r3, [r7, #28]
 8006432:	089b      	lsrs	r3, r3, #2
 8006434:	3302      	adds	r3, #2
 8006436:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800643a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800643c:	69fb      	ldr	r3, [r7, #28]
 800643e:	f003 0303 	and.w	r3, r3, #3
 8006442:	009b      	lsls	r3, r3, #2
 8006444:	220f      	movs	r2, #15
 8006446:	fa02 f303 	lsl.w	r3, r2, r3
 800644a:	43db      	mvns	r3, r3
 800644c:	69ba      	ldr	r2, [r7, #24]
 800644e:	4013      	ands	r3, r2
 8006450:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	4a58      	ldr	r2, [pc, #352]	@ (80065b8 <HAL_GPIO_Init+0x32c>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d037      	beq.n	80064ca <HAL_GPIO_Init+0x23e>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	4a57      	ldr	r2, [pc, #348]	@ (80065bc <HAL_GPIO_Init+0x330>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d031      	beq.n	80064c6 <HAL_GPIO_Init+0x23a>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	4a56      	ldr	r2, [pc, #344]	@ (80065c0 <HAL_GPIO_Init+0x334>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d02b      	beq.n	80064c2 <HAL_GPIO_Init+0x236>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	4a55      	ldr	r2, [pc, #340]	@ (80065c4 <HAL_GPIO_Init+0x338>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d025      	beq.n	80064be <HAL_GPIO_Init+0x232>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	4a54      	ldr	r2, [pc, #336]	@ (80065c8 <HAL_GPIO_Init+0x33c>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d01f      	beq.n	80064ba <HAL_GPIO_Init+0x22e>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	4a53      	ldr	r2, [pc, #332]	@ (80065cc <HAL_GPIO_Init+0x340>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d019      	beq.n	80064b6 <HAL_GPIO_Init+0x22a>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	4a52      	ldr	r2, [pc, #328]	@ (80065d0 <HAL_GPIO_Init+0x344>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d013      	beq.n	80064b2 <HAL_GPIO_Init+0x226>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	4a51      	ldr	r2, [pc, #324]	@ (80065d4 <HAL_GPIO_Init+0x348>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d00d      	beq.n	80064ae <HAL_GPIO_Init+0x222>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	4a50      	ldr	r2, [pc, #320]	@ (80065d8 <HAL_GPIO_Init+0x34c>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d007      	beq.n	80064aa <HAL_GPIO_Init+0x21e>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	4a4f      	ldr	r2, [pc, #316]	@ (80065dc <HAL_GPIO_Init+0x350>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d101      	bne.n	80064a6 <HAL_GPIO_Init+0x21a>
 80064a2:	2309      	movs	r3, #9
 80064a4:	e012      	b.n	80064cc <HAL_GPIO_Init+0x240>
 80064a6:	230a      	movs	r3, #10
 80064a8:	e010      	b.n	80064cc <HAL_GPIO_Init+0x240>
 80064aa:	2308      	movs	r3, #8
 80064ac:	e00e      	b.n	80064cc <HAL_GPIO_Init+0x240>
 80064ae:	2307      	movs	r3, #7
 80064b0:	e00c      	b.n	80064cc <HAL_GPIO_Init+0x240>
 80064b2:	2306      	movs	r3, #6
 80064b4:	e00a      	b.n	80064cc <HAL_GPIO_Init+0x240>
 80064b6:	2305      	movs	r3, #5
 80064b8:	e008      	b.n	80064cc <HAL_GPIO_Init+0x240>
 80064ba:	2304      	movs	r3, #4
 80064bc:	e006      	b.n	80064cc <HAL_GPIO_Init+0x240>
 80064be:	2303      	movs	r3, #3
 80064c0:	e004      	b.n	80064cc <HAL_GPIO_Init+0x240>
 80064c2:	2302      	movs	r3, #2
 80064c4:	e002      	b.n	80064cc <HAL_GPIO_Init+0x240>
 80064c6:	2301      	movs	r3, #1
 80064c8:	e000      	b.n	80064cc <HAL_GPIO_Init+0x240>
 80064ca:	2300      	movs	r3, #0
 80064cc:	69fa      	ldr	r2, [r7, #28]
 80064ce:	f002 0203 	and.w	r2, r2, #3
 80064d2:	0092      	lsls	r2, r2, #2
 80064d4:	4093      	lsls	r3, r2
 80064d6:	69ba      	ldr	r2, [r7, #24]
 80064d8:	4313      	orrs	r3, r2
 80064da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80064dc:	4935      	ldr	r1, [pc, #212]	@ (80065b4 <HAL_GPIO_Init+0x328>)
 80064de:	69fb      	ldr	r3, [r7, #28]
 80064e0:	089b      	lsrs	r3, r3, #2
 80064e2:	3302      	adds	r3, #2
 80064e4:	69ba      	ldr	r2, [r7, #24]
 80064e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80064ea:	4b3d      	ldr	r3, [pc, #244]	@ (80065e0 <HAL_GPIO_Init+0x354>)
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	43db      	mvns	r3, r3
 80064f4:	69ba      	ldr	r2, [r7, #24]
 80064f6:	4013      	ands	r3, r2
 80064f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006502:	2b00      	cmp	r3, #0
 8006504:	d003      	beq.n	800650e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8006506:	69ba      	ldr	r2, [r7, #24]
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	4313      	orrs	r3, r2
 800650c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800650e:	4a34      	ldr	r2, [pc, #208]	@ (80065e0 <HAL_GPIO_Init+0x354>)
 8006510:	69bb      	ldr	r3, [r7, #24]
 8006512:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006514:	4b32      	ldr	r3, [pc, #200]	@ (80065e0 <HAL_GPIO_Init+0x354>)
 8006516:	68db      	ldr	r3, [r3, #12]
 8006518:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	43db      	mvns	r3, r3
 800651e:	69ba      	ldr	r2, [r7, #24]
 8006520:	4013      	ands	r3, r2
 8006522:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800652c:	2b00      	cmp	r3, #0
 800652e:	d003      	beq.n	8006538 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006530:	69ba      	ldr	r2, [r7, #24]
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	4313      	orrs	r3, r2
 8006536:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006538:	4a29      	ldr	r2, [pc, #164]	@ (80065e0 <HAL_GPIO_Init+0x354>)
 800653a:	69bb      	ldr	r3, [r7, #24]
 800653c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800653e:	4b28      	ldr	r3, [pc, #160]	@ (80065e0 <HAL_GPIO_Init+0x354>)
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	43db      	mvns	r3, r3
 8006548:	69ba      	ldr	r2, [r7, #24]
 800654a:	4013      	ands	r3, r2
 800654c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006556:	2b00      	cmp	r3, #0
 8006558:	d003      	beq.n	8006562 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800655a:	69ba      	ldr	r2, [r7, #24]
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	4313      	orrs	r3, r2
 8006560:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006562:	4a1f      	ldr	r2, [pc, #124]	@ (80065e0 <HAL_GPIO_Init+0x354>)
 8006564:	69bb      	ldr	r3, [r7, #24]
 8006566:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006568:	4b1d      	ldr	r3, [pc, #116]	@ (80065e0 <HAL_GPIO_Init+0x354>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	43db      	mvns	r3, r3
 8006572:	69ba      	ldr	r2, [r7, #24]
 8006574:	4013      	ands	r3, r2
 8006576:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006580:	2b00      	cmp	r3, #0
 8006582:	d003      	beq.n	800658c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006584:	69ba      	ldr	r2, [r7, #24]
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	4313      	orrs	r3, r2
 800658a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800658c:	4a14      	ldr	r2, [pc, #80]	@ (80065e0 <HAL_GPIO_Init+0x354>)
 800658e:	69bb      	ldr	r3, [r7, #24]
 8006590:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8006592:	69fb      	ldr	r3, [r7, #28]
 8006594:	3301      	adds	r3, #1
 8006596:	61fb      	str	r3, [r7, #28]
 8006598:	69fb      	ldr	r3, [r7, #28]
 800659a:	2b0f      	cmp	r3, #15
 800659c:	f67f ae86 	bls.w	80062ac <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80065a0:	bf00      	nop
 80065a2:	bf00      	nop
 80065a4:	3724      	adds	r7, #36	@ 0x24
 80065a6:	46bd      	mov	sp, r7
 80065a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ac:	4770      	bx	lr
 80065ae:	bf00      	nop
 80065b0:	40023800 	.word	0x40023800
 80065b4:	40013800 	.word	0x40013800
 80065b8:	40020000 	.word	0x40020000
 80065bc:	40020400 	.word	0x40020400
 80065c0:	40020800 	.word	0x40020800
 80065c4:	40020c00 	.word	0x40020c00
 80065c8:	40021000 	.word	0x40021000
 80065cc:	40021400 	.word	0x40021400
 80065d0:	40021800 	.word	0x40021800
 80065d4:	40021c00 	.word	0x40021c00
 80065d8:	40022000 	.word	0x40022000
 80065dc:	40022400 	.word	0x40022400
 80065e0:	40013c00 	.word	0x40013c00

080065e4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b087      	sub	sp, #28
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 80065ee:	2300      	movs	r3, #0
 80065f0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 80065f2:	2300      	movs	r3, #0
 80065f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 80065f6:	2300      	movs	r3, #0
 80065f8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80065fa:	2300      	movs	r3, #0
 80065fc:	617b      	str	r3, [r7, #20]
 80065fe:	e0d9      	b.n	80067b4 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006600:	2201      	movs	r2, #1
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	fa02 f303 	lsl.w	r3, r2, r3
 8006608:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800660a:	683a      	ldr	r2, [r7, #0]
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	4013      	ands	r3, r2
 8006610:	60fb      	str	r3, [r7, #12]

    if (iocurrent == ioposition)
 8006612:	68fa      	ldr	r2, [r7, #12]
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	429a      	cmp	r2, r3
 8006618:	f040 80c9 	bne.w	80067ae <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 800661c:	4a6b      	ldr	r2, [pc, #428]	@ (80067cc <HAL_GPIO_DeInit+0x1e8>)
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	089b      	lsrs	r3, r3, #2
 8006622:	3302      	adds	r3, #2
 8006624:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006628:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	f003 0303 	and.w	r3, r3, #3
 8006630:	009b      	lsls	r3, r3, #2
 8006632:	220f      	movs	r2, #15
 8006634:	fa02 f303 	lsl.w	r3, r2, r3
 8006638:	68ba      	ldr	r2, [r7, #8]
 800663a:	4013      	ands	r3, r2
 800663c:	60bb      	str	r3, [r7, #8]
      if (tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	4a63      	ldr	r2, [pc, #396]	@ (80067d0 <HAL_GPIO_DeInit+0x1ec>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d037      	beq.n	80066b6 <HAL_GPIO_DeInit+0xd2>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	4a62      	ldr	r2, [pc, #392]	@ (80067d4 <HAL_GPIO_DeInit+0x1f0>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d031      	beq.n	80066b2 <HAL_GPIO_DeInit+0xce>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	4a61      	ldr	r2, [pc, #388]	@ (80067d8 <HAL_GPIO_DeInit+0x1f4>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d02b      	beq.n	80066ae <HAL_GPIO_DeInit+0xca>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	4a60      	ldr	r2, [pc, #384]	@ (80067dc <HAL_GPIO_DeInit+0x1f8>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d025      	beq.n	80066aa <HAL_GPIO_DeInit+0xc6>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	4a5f      	ldr	r2, [pc, #380]	@ (80067e0 <HAL_GPIO_DeInit+0x1fc>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d01f      	beq.n	80066a6 <HAL_GPIO_DeInit+0xc2>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	4a5e      	ldr	r2, [pc, #376]	@ (80067e4 <HAL_GPIO_DeInit+0x200>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d019      	beq.n	80066a2 <HAL_GPIO_DeInit+0xbe>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	4a5d      	ldr	r2, [pc, #372]	@ (80067e8 <HAL_GPIO_DeInit+0x204>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d013      	beq.n	800669e <HAL_GPIO_DeInit+0xba>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	4a5c      	ldr	r2, [pc, #368]	@ (80067ec <HAL_GPIO_DeInit+0x208>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d00d      	beq.n	800669a <HAL_GPIO_DeInit+0xb6>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	4a5b      	ldr	r2, [pc, #364]	@ (80067f0 <HAL_GPIO_DeInit+0x20c>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d007      	beq.n	8006696 <HAL_GPIO_DeInit+0xb2>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	4a5a      	ldr	r2, [pc, #360]	@ (80067f4 <HAL_GPIO_DeInit+0x210>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d101      	bne.n	8006692 <HAL_GPIO_DeInit+0xae>
 800668e:	2309      	movs	r3, #9
 8006690:	e012      	b.n	80066b8 <HAL_GPIO_DeInit+0xd4>
 8006692:	230a      	movs	r3, #10
 8006694:	e010      	b.n	80066b8 <HAL_GPIO_DeInit+0xd4>
 8006696:	2308      	movs	r3, #8
 8006698:	e00e      	b.n	80066b8 <HAL_GPIO_DeInit+0xd4>
 800669a:	2307      	movs	r3, #7
 800669c:	e00c      	b.n	80066b8 <HAL_GPIO_DeInit+0xd4>
 800669e:	2306      	movs	r3, #6
 80066a0:	e00a      	b.n	80066b8 <HAL_GPIO_DeInit+0xd4>
 80066a2:	2305      	movs	r3, #5
 80066a4:	e008      	b.n	80066b8 <HAL_GPIO_DeInit+0xd4>
 80066a6:	2304      	movs	r3, #4
 80066a8:	e006      	b.n	80066b8 <HAL_GPIO_DeInit+0xd4>
 80066aa:	2303      	movs	r3, #3
 80066ac:	e004      	b.n	80066b8 <HAL_GPIO_DeInit+0xd4>
 80066ae:	2302      	movs	r3, #2
 80066b0:	e002      	b.n	80066b8 <HAL_GPIO_DeInit+0xd4>
 80066b2:	2301      	movs	r3, #1
 80066b4:	e000      	b.n	80066b8 <HAL_GPIO_DeInit+0xd4>
 80066b6:	2300      	movs	r3, #0
 80066b8:	697a      	ldr	r2, [r7, #20]
 80066ba:	f002 0203 	and.w	r2, r2, #3
 80066be:	0092      	lsls	r2, r2, #2
 80066c0:	4093      	lsls	r3, r2
 80066c2:	68ba      	ldr	r2, [r7, #8]
 80066c4:	429a      	cmp	r2, r3
 80066c6:	d132      	bne.n	800672e <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80066c8:	4b4b      	ldr	r3, [pc, #300]	@ (80067f8 <HAL_GPIO_DeInit+0x214>)
 80066ca:	681a      	ldr	r2, [r3, #0]
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	43db      	mvns	r3, r3
 80066d0:	4949      	ldr	r1, [pc, #292]	@ (80067f8 <HAL_GPIO_DeInit+0x214>)
 80066d2:	4013      	ands	r3, r2
 80066d4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80066d6:	4b48      	ldr	r3, [pc, #288]	@ (80067f8 <HAL_GPIO_DeInit+0x214>)
 80066d8:	685a      	ldr	r2, [r3, #4]
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	43db      	mvns	r3, r3
 80066de:	4946      	ldr	r1, [pc, #280]	@ (80067f8 <HAL_GPIO_DeInit+0x214>)
 80066e0:	4013      	ands	r3, r2
 80066e2:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80066e4:	4b44      	ldr	r3, [pc, #272]	@ (80067f8 <HAL_GPIO_DeInit+0x214>)
 80066e6:	68da      	ldr	r2, [r3, #12]
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	43db      	mvns	r3, r3
 80066ec:	4942      	ldr	r1, [pc, #264]	@ (80067f8 <HAL_GPIO_DeInit+0x214>)
 80066ee:	4013      	ands	r3, r2
 80066f0:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80066f2:	4b41      	ldr	r3, [pc, #260]	@ (80067f8 <HAL_GPIO_DeInit+0x214>)
 80066f4:	689a      	ldr	r2, [r3, #8]
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	43db      	mvns	r3, r3
 80066fa:	493f      	ldr	r1, [pc, #252]	@ (80067f8 <HAL_GPIO_DeInit+0x214>)
 80066fc:	4013      	ands	r3, r2
 80066fe:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	f003 0303 	and.w	r3, r3, #3
 8006706:	009b      	lsls	r3, r3, #2
 8006708:	220f      	movs	r2, #15
 800670a:	fa02 f303 	lsl.w	r3, r2, r3
 800670e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8006710:	4a2e      	ldr	r2, [pc, #184]	@ (80067cc <HAL_GPIO_DeInit+0x1e8>)
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	089b      	lsrs	r3, r3, #2
 8006716:	3302      	adds	r3, #2
 8006718:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	43da      	mvns	r2, r3
 8006720:	482a      	ldr	r0, [pc, #168]	@ (80067cc <HAL_GPIO_DeInit+0x1e8>)
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	089b      	lsrs	r3, r3, #2
 8006726:	400a      	ands	r2, r1
 8006728:	3302      	adds	r3, #2
 800672a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681a      	ldr	r2, [r3, #0]
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	005b      	lsls	r3, r3, #1
 8006736:	2103      	movs	r1, #3
 8006738:	fa01 f303 	lsl.w	r3, r1, r3
 800673c:	43db      	mvns	r3, r3
 800673e:	401a      	ands	r2, r3
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	08da      	lsrs	r2, r3, #3
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	3208      	adds	r2, #8
 800674c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	f003 0307 	and.w	r3, r3, #7
 8006756:	009b      	lsls	r3, r3, #2
 8006758:	220f      	movs	r2, #15
 800675a:	fa02 f303 	lsl.w	r3, r2, r3
 800675e:	43db      	mvns	r3, r3
 8006760:	697a      	ldr	r2, [r7, #20]
 8006762:	08d2      	lsrs	r2, r2, #3
 8006764:	4019      	ands	r1, r3
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	3208      	adds	r2, #8
 800676a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	68da      	ldr	r2, [r3, #12]
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	005b      	lsls	r3, r3, #1
 8006776:	2103      	movs	r1, #3
 8006778:	fa01 f303 	lsl.w	r3, r1, r3
 800677c:	43db      	mvns	r3, r3
 800677e:	401a      	ands	r2, r3
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	685a      	ldr	r2, [r3, #4]
 8006788:	2101      	movs	r1, #1
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	fa01 f303 	lsl.w	r3, r1, r3
 8006790:	43db      	mvns	r3, r3
 8006792:	401a      	ands	r2, r3
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	689a      	ldr	r2, [r3, #8]
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	005b      	lsls	r3, r3, #1
 80067a0:	2103      	movs	r1, #3
 80067a2:	fa01 f303 	lsl.w	r3, r1, r3
 80067a6:	43db      	mvns	r3, r3
 80067a8:	401a      	ands	r2, r3
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	609a      	str	r2, [r3, #8]
  for (position = 0; position < GPIO_NUMBER; position++)
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	3301      	adds	r3, #1
 80067b2:	617b      	str	r3, [r7, #20]
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	2b0f      	cmp	r3, #15
 80067b8:	f67f af22 	bls.w	8006600 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80067bc:	bf00      	nop
 80067be:	bf00      	nop
 80067c0:	371c      	adds	r7, #28
 80067c2:	46bd      	mov	sp, r7
 80067c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c8:	4770      	bx	lr
 80067ca:	bf00      	nop
 80067cc:	40013800 	.word	0x40013800
 80067d0:	40020000 	.word	0x40020000
 80067d4:	40020400 	.word	0x40020400
 80067d8:	40020800 	.word	0x40020800
 80067dc:	40020c00 	.word	0x40020c00
 80067e0:	40021000 	.word	0x40021000
 80067e4:	40021400 	.word	0x40021400
 80067e8:	40021800 	.word	0x40021800
 80067ec:	40021c00 	.word	0x40021c00
 80067f0:	40022000 	.word	0x40022000
 80067f4:	40022400 	.word	0x40022400
 80067f8:	40013c00 	.word	0x40013c00

080067fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b085      	sub	sp, #20
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	460b      	mov	r3, r1
 8006806:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	691a      	ldr	r2, [r3, #16]
 800680c:	887b      	ldrh	r3, [r7, #2]
 800680e:	4013      	ands	r3, r2
 8006810:	2b00      	cmp	r3, #0
 8006812:	d002      	beq.n	800681a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006814:	2301      	movs	r3, #1
 8006816:	73fb      	strb	r3, [r7, #15]
 8006818:	e001      	b.n	800681e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800681a:	2300      	movs	r3, #0
 800681c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800681e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006820:	4618      	mov	r0, r3
 8006822:	3714      	adds	r7, #20
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr

0800682c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800682c:	b480      	push	{r7}
 800682e:	b083      	sub	sp, #12
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	460b      	mov	r3, r1
 8006836:	807b      	strh	r3, [r7, #2]
 8006838:	4613      	mov	r3, r2
 800683a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800683c:	787b      	ldrb	r3, [r7, #1]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d003      	beq.n	800684a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006842:	887a      	ldrh	r2, [r7, #2]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8006848:	e003      	b.n	8006852 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800684a:	887b      	ldrh	r3, [r7, #2]
 800684c:	041a      	lsls	r2, r3, #16
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	619a      	str	r2, [r3, #24]
}
 8006852:	bf00      	nop
 8006854:	370c      	adds	r7, #12
 8006856:	46bd      	mov	sp, r7
 8006858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685c:	4770      	bx	lr
	...

08006860 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b082      	sub	sp, #8
 8006864:	af00      	add	r7, sp, #0
 8006866:	4603      	mov	r3, r0
 8006868:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800686a:	4b08      	ldr	r3, [pc, #32]	@ (800688c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800686c:	695a      	ldr	r2, [r3, #20]
 800686e:	88fb      	ldrh	r3, [r7, #6]
 8006870:	4013      	ands	r3, r2
 8006872:	2b00      	cmp	r3, #0
 8006874:	d006      	beq.n	8006884 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006876:	4a05      	ldr	r2, [pc, #20]	@ (800688c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006878:	88fb      	ldrh	r3, [r7, #6]
 800687a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800687c:	88fb      	ldrh	r3, [r7, #6]
 800687e:	4618      	mov	r0, r3
 8006880:	f7fb fbb2 	bl	8001fe8 <HAL_GPIO_EXTI_Callback>
  }
}
 8006884:	bf00      	nop
 8006886:	3708      	adds	r7, #8
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}
 800688c:	40013c00 	.word	0x40013c00

08006890 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b082      	sub	sp, #8
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d101      	bne.n	80068a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800689e:	2301      	movs	r3, #1
 80068a0:	e08b      	b.n	80069ba <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80068a8:	b2db      	uxtb	r3, r3
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d106      	bne.n	80068bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2200      	movs	r2, #0
 80068b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f000 f8b5 	bl	8006a26 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2224      	movs	r2, #36	@ 0x24
 80068c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	681a      	ldr	r2, [r3, #0]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f022 0201 	bic.w	r2, r2, #1
 80068d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	685a      	ldr	r2, [r3, #4]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80068e0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	689a      	ldr	r2, [r3, #8]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80068f0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	68db      	ldr	r3, [r3, #12]
 80068f6:	2b01      	cmp	r3, #1
 80068f8:	d107      	bne.n	800690a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	689a      	ldr	r2, [r3, #8]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006906:	609a      	str	r2, [r3, #8]
 8006908:	e006      	b.n	8006918 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	689a      	ldr	r2, [r3, #8]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006916:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	68db      	ldr	r3, [r3, #12]
 800691c:	2b02      	cmp	r3, #2
 800691e:	d108      	bne.n	8006932 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	685a      	ldr	r2, [r3, #4]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800692e:	605a      	str	r2, [r3, #4]
 8006930:	e007      	b.n	8006942 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	685a      	ldr	r2, [r3, #4]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006940:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	6859      	ldr	r1, [r3, #4]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681a      	ldr	r2, [r3, #0]
 800694c:	4b1d      	ldr	r3, [pc, #116]	@ (80069c4 <HAL_I2C_Init+0x134>)
 800694e:	430b      	orrs	r3, r1
 8006950:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	68da      	ldr	r2, [r3, #12]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006960:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	691a      	ldr	r2, [r3, #16]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	695b      	ldr	r3, [r3, #20]
 800696a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	699b      	ldr	r3, [r3, #24]
 8006972:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	430a      	orrs	r2, r1
 800697a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	69d9      	ldr	r1, [r3, #28]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6a1a      	ldr	r2, [r3, #32]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	430a      	orrs	r2, r1
 800698a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	681a      	ldr	r2, [r3, #0]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f042 0201 	orr.w	r2, r2, #1
 800699a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2200      	movs	r2, #0
 80069a0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2220      	movs	r2, #32
 80069a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2200      	movs	r2, #0
 80069ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2200      	movs	r2, #0
 80069b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80069b8:	2300      	movs	r3, #0
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3708      	adds	r7, #8
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}
 80069c2:	bf00      	nop
 80069c4:	02008000 	.word	0x02008000

080069c8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b082      	sub	sp, #8
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d101      	bne.n	80069da <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80069d6:	2301      	movs	r3, #1
 80069d8:	e021      	b.n	8006a1e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2224      	movs	r2, #36	@ 0x24
 80069de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	681a      	ldr	r2, [r3, #0]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f022 0201 	bic.w	r2, r2, #1
 80069f0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f000 f821 	bl	8006a3a <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2200      	movs	r2, #0
 80069fc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2200      	movs	r2, #0
 8006a02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2200      	movs	r2, #0
 8006a18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006a1c:	2300      	movs	r3, #0
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3708      	adds	r7, #8
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}

08006a26 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8006a26:	b480      	push	{r7}
 8006a28:	b083      	sub	sp, #12
 8006a2a:	af00      	add	r7, sp, #0
 8006a2c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8006a2e:	bf00      	nop
 8006a30:	370c      	adds	r7, #12
 8006a32:	46bd      	mov	sp, r7
 8006a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a38:	4770      	bx	lr

08006a3a <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8006a3a:	b480      	push	{r7}
 8006a3c:	b083      	sub	sp, #12
 8006a3e:	af00      	add	r7, sp, #0
 8006a40:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8006a42:	bf00      	nop
 8006a44:	370c      	adds	r7, #12
 8006a46:	46bd      	mov	sp, r7
 8006a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4c:	4770      	bx	lr
	...

08006a50 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b088      	sub	sp, #32
 8006a54:	af02      	add	r7, sp, #8
 8006a56:	60f8      	str	r0, [r7, #12]
 8006a58:	4608      	mov	r0, r1
 8006a5a:	4611      	mov	r1, r2
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	4603      	mov	r3, r0
 8006a60:	817b      	strh	r3, [r7, #10]
 8006a62:	460b      	mov	r3, r1
 8006a64:	813b      	strh	r3, [r7, #8]
 8006a66:	4613      	mov	r3, r2
 8006a68:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a70:	b2db      	uxtb	r3, r3
 8006a72:	2b20      	cmp	r3, #32
 8006a74:	f040 80f9 	bne.w	8006c6a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a78:	6a3b      	ldr	r3, [r7, #32]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d002      	beq.n	8006a84 <HAL_I2C_Mem_Write+0x34>
 8006a7e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d105      	bne.n	8006a90 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006a8a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	e0ed      	b.n	8006c6c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d101      	bne.n	8006a9e <HAL_I2C_Mem_Write+0x4e>
 8006a9a:	2302      	movs	r3, #2
 8006a9c:	e0e6      	b.n	8006c6c <HAL_I2C_Mem_Write+0x21c>
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2201      	movs	r2, #1
 8006aa2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006aa6:	f7fe fd49 	bl	800553c <HAL_GetTick>
 8006aaa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	9300      	str	r3, [sp, #0]
 8006ab0:	2319      	movs	r3, #25
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006ab8:	68f8      	ldr	r0, [r7, #12]
 8006aba:	f000 fad1 	bl	8007060 <I2C_WaitOnFlagUntilTimeout>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d001      	beq.n	8006ac8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	e0d1      	b.n	8006c6c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2221      	movs	r2, #33	@ 0x21
 8006acc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2240      	movs	r2, #64	@ 0x40
 8006ad4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2200      	movs	r2, #0
 8006adc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	6a3a      	ldr	r2, [r7, #32]
 8006ae2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006ae8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2200      	movs	r2, #0
 8006aee:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006af0:	88f8      	ldrh	r0, [r7, #6]
 8006af2:	893a      	ldrh	r2, [r7, #8]
 8006af4:	8979      	ldrh	r1, [r7, #10]
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	9301      	str	r3, [sp, #4]
 8006afa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006afc:	9300      	str	r3, [sp, #0]
 8006afe:	4603      	mov	r3, r0
 8006b00:	68f8      	ldr	r0, [r7, #12]
 8006b02:	f000 f9e1 	bl	8006ec8 <I2C_RequestMemoryWrite>
 8006b06:	4603      	mov	r3, r0
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d005      	beq.n	8006b18 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8006b14:	2301      	movs	r3, #1
 8006b16:	e0a9      	b.n	8006c6c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	2bff      	cmp	r3, #255	@ 0xff
 8006b20:	d90e      	bls.n	8006b40 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	22ff      	movs	r2, #255	@ 0xff
 8006b26:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b2c:	b2da      	uxtb	r2, r3
 8006b2e:	8979      	ldrh	r1, [r7, #10]
 8006b30:	2300      	movs	r3, #0
 8006b32:	9300      	str	r3, [sp, #0]
 8006b34:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006b38:	68f8      	ldr	r0, [r7, #12]
 8006b3a:	f000 fc55 	bl	80073e8 <I2C_TransferConfig>
 8006b3e:	e00f      	b.n	8006b60 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b44:	b29a      	uxth	r2, r3
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b4e:	b2da      	uxtb	r2, r3
 8006b50:	8979      	ldrh	r1, [r7, #10]
 8006b52:	2300      	movs	r3, #0
 8006b54:	9300      	str	r3, [sp, #0]
 8006b56:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006b5a:	68f8      	ldr	r0, [r7, #12]
 8006b5c:	f000 fc44 	bl	80073e8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b60:	697a      	ldr	r2, [r7, #20]
 8006b62:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006b64:	68f8      	ldr	r0, [r7, #12]
 8006b66:	f000 fad4 	bl	8007112 <I2C_WaitOnTXISFlagUntilTimeout>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d001      	beq.n	8006b74 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006b70:	2301      	movs	r3, #1
 8006b72:	e07b      	b.n	8006c6c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b78:	781a      	ldrb	r2, [r3, #0]
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b84:	1c5a      	adds	r2, r3, #1
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b8e:	b29b      	uxth	r3, r3
 8006b90:	3b01      	subs	r3, #1
 8006b92:	b29a      	uxth	r2, r3
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b9c:	3b01      	subs	r3, #1
 8006b9e:	b29a      	uxth	r2, r3
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ba8:	b29b      	uxth	r3, r3
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d034      	beq.n	8006c18 <HAL_I2C_Mem_Write+0x1c8>
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d130      	bne.n	8006c18 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	9300      	str	r3, [sp, #0]
 8006bba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	2180      	movs	r1, #128	@ 0x80
 8006bc0:	68f8      	ldr	r0, [r7, #12]
 8006bc2:	f000 fa4d 	bl	8007060 <I2C_WaitOnFlagUntilTimeout>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d001      	beq.n	8006bd0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	e04d      	b.n	8006c6c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	2bff      	cmp	r3, #255	@ 0xff
 8006bd8:	d90e      	bls.n	8006bf8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	22ff      	movs	r2, #255	@ 0xff
 8006bde:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006be4:	b2da      	uxtb	r2, r3
 8006be6:	8979      	ldrh	r1, [r7, #10]
 8006be8:	2300      	movs	r3, #0
 8006bea:	9300      	str	r3, [sp, #0]
 8006bec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006bf0:	68f8      	ldr	r0, [r7, #12]
 8006bf2:	f000 fbf9 	bl	80073e8 <I2C_TransferConfig>
 8006bf6:	e00f      	b.n	8006c18 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bfc:	b29a      	uxth	r2, r3
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c06:	b2da      	uxtb	r2, r3
 8006c08:	8979      	ldrh	r1, [r7, #10]
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	9300      	str	r3, [sp, #0]
 8006c0e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006c12:	68f8      	ldr	r0, [r7, #12]
 8006c14:	f000 fbe8 	bl	80073e8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c1c:	b29b      	uxth	r3, r3
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d19e      	bne.n	8006b60 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c22:	697a      	ldr	r2, [r7, #20]
 8006c24:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006c26:	68f8      	ldr	r0, [r7, #12]
 8006c28:	f000 faba 	bl	80071a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d001      	beq.n	8006c36 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	e01a      	b.n	8006c6c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	2220      	movs	r2, #32
 8006c3c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	6859      	ldr	r1, [r3, #4]
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681a      	ldr	r2, [r3, #0]
 8006c48:	4b0a      	ldr	r3, [pc, #40]	@ (8006c74 <HAL_I2C_Mem_Write+0x224>)
 8006c4a:	400b      	ands	r3, r1
 8006c4c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2220      	movs	r2, #32
 8006c52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2200      	movs	r2, #0
 8006c62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006c66:	2300      	movs	r3, #0
 8006c68:	e000      	b.n	8006c6c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006c6a:	2302      	movs	r3, #2
  }
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3718      	adds	r7, #24
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}
 8006c74:	fe00e800 	.word	0xfe00e800

08006c78 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b088      	sub	sp, #32
 8006c7c:	af02      	add	r7, sp, #8
 8006c7e:	60f8      	str	r0, [r7, #12]
 8006c80:	4608      	mov	r0, r1
 8006c82:	4611      	mov	r1, r2
 8006c84:	461a      	mov	r2, r3
 8006c86:	4603      	mov	r3, r0
 8006c88:	817b      	strh	r3, [r7, #10]
 8006c8a:	460b      	mov	r3, r1
 8006c8c:	813b      	strh	r3, [r7, #8]
 8006c8e:	4613      	mov	r3, r2
 8006c90:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c98:	b2db      	uxtb	r3, r3
 8006c9a:	2b20      	cmp	r3, #32
 8006c9c:	f040 80fd 	bne.w	8006e9a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ca0:	6a3b      	ldr	r3, [r7, #32]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d002      	beq.n	8006cac <HAL_I2C_Mem_Read+0x34>
 8006ca6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d105      	bne.n	8006cb8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006cb2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	e0f1      	b.n	8006e9c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006cbe:	2b01      	cmp	r3, #1
 8006cc0:	d101      	bne.n	8006cc6 <HAL_I2C_Mem_Read+0x4e>
 8006cc2:	2302      	movs	r3, #2
 8006cc4:	e0ea      	b.n	8006e9c <HAL_I2C_Mem_Read+0x224>
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2201      	movs	r2, #1
 8006cca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006cce:	f7fe fc35 	bl	800553c <HAL_GetTick>
 8006cd2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	9300      	str	r3, [sp, #0]
 8006cd8:	2319      	movs	r3, #25
 8006cda:	2201      	movs	r2, #1
 8006cdc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006ce0:	68f8      	ldr	r0, [r7, #12]
 8006ce2:	f000 f9bd 	bl	8007060 <I2C_WaitOnFlagUntilTimeout>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d001      	beq.n	8006cf0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006cec:	2301      	movs	r3, #1
 8006cee:	e0d5      	b.n	8006e9c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2222      	movs	r2, #34	@ 0x22
 8006cf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2240      	movs	r2, #64	@ 0x40
 8006cfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2200      	movs	r2, #0
 8006d04:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	6a3a      	ldr	r2, [r7, #32]
 8006d0a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006d10:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2200      	movs	r2, #0
 8006d16:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006d18:	88f8      	ldrh	r0, [r7, #6]
 8006d1a:	893a      	ldrh	r2, [r7, #8]
 8006d1c:	8979      	ldrh	r1, [r7, #10]
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	9301      	str	r3, [sp, #4]
 8006d22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d24:	9300      	str	r3, [sp, #0]
 8006d26:	4603      	mov	r3, r0
 8006d28:	68f8      	ldr	r0, [r7, #12]
 8006d2a:	f000 f921 	bl	8006f70 <I2C_RequestMemoryRead>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d005      	beq.n	8006d40 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	2200      	movs	r2, #0
 8006d38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	e0ad      	b.n	8006e9c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d44:	b29b      	uxth	r3, r3
 8006d46:	2bff      	cmp	r3, #255	@ 0xff
 8006d48:	d90e      	bls.n	8006d68 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2201      	movs	r2, #1
 8006d4e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d54:	b2da      	uxtb	r2, r3
 8006d56:	8979      	ldrh	r1, [r7, #10]
 8006d58:	4b52      	ldr	r3, [pc, #328]	@ (8006ea4 <HAL_I2C_Mem_Read+0x22c>)
 8006d5a:	9300      	str	r3, [sp, #0]
 8006d5c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006d60:	68f8      	ldr	r0, [r7, #12]
 8006d62:	f000 fb41 	bl	80073e8 <I2C_TransferConfig>
 8006d66:	e00f      	b.n	8006d88 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d6c:	b29a      	uxth	r2, r3
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d76:	b2da      	uxtb	r2, r3
 8006d78:	8979      	ldrh	r1, [r7, #10]
 8006d7a:	4b4a      	ldr	r3, [pc, #296]	@ (8006ea4 <HAL_I2C_Mem_Read+0x22c>)
 8006d7c:	9300      	str	r3, [sp, #0]
 8006d7e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006d82:	68f8      	ldr	r0, [r7, #12]
 8006d84:	f000 fb30 	bl	80073e8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	9300      	str	r3, [sp, #0]
 8006d8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d8e:	2200      	movs	r2, #0
 8006d90:	2104      	movs	r1, #4
 8006d92:	68f8      	ldr	r0, [r7, #12]
 8006d94:	f000 f964 	bl	8007060 <I2C_WaitOnFlagUntilTimeout>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d001      	beq.n	8006da2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	e07c      	b.n	8006e9c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dac:	b2d2      	uxtb	r2, r2
 8006dae:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006db4:	1c5a      	adds	r2, r3, #1
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006dbe:	3b01      	subs	r3, #1
 8006dc0:	b29a      	uxth	r2, r3
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006dca:	b29b      	uxth	r3, r3
 8006dcc:	3b01      	subs	r3, #1
 8006dce:	b29a      	uxth	r2, r3
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006dd8:	b29b      	uxth	r3, r3
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d034      	beq.n	8006e48 <HAL_I2C_Mem_Read+0x1d0>
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d130      	bne.n	8006e48 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	9300      	str	r3, [sp, #0]
 8006dea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dec:	2200      	movs	r2, #0
 8006dee:	2180      	movs	r1, #128	@ 0x80
 8006df0:	68f8      	ldr	r0, [r7, #12]
 8006df2:	f000 f935 	bl	8007060 <I2C_WaitOnFlagUntilTimeout>
 8006df6:	4603      	mov	r3, r0
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d001      	beq.n	8006e00 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	e04d      	b.n	8006e9c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	2bff      	cmp	r3, #255	@ 0xff
 8006e08:	d90e      	bls.n	8006e28 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2201      	movs	r2, #1
 8006e0e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e14:	b2da      	uxtb	r2, r3
 8006e16:	8979      	ldrh	r1, [r7, #10]
 8006e18:	2300      	movs	r3, #0
 8006e1a:	9300      	str	r3, [sp, #0]
 8006e1c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006e20:	68f8      	ldr	r0, [r7, #12]
 8006e22:	f000 fae1 	bl	80073e8 <I2C_TransferConfig>
 8006e26:	e00f      	b.n	8006e48 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e2c:	b29a      	uxth	r2, r3
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e36:	b2da      	uxtb	r2, r3
 8006e38:	8979      	ldrh	r1, [r7, #10]
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	9300      	str	r3, [sp, #0]
 8006e3e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006e42:	68f8      	ldr	r0, [r7, #12]
 8006e44:	f000 fad0 	bl	80073e8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e4c:	b29b      	uxth	r3, r3
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d19a      	bne.n	8006d88 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e52:	697a      	ldr	r2, [r7, #20]
 8006e54:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006e56:	68f8      	ldr	r0, [r7, #12]
 8006e58:	f000 f9a2 	bl	80071a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d001      	beq.n	8006e66 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006e62:	2301      	movs	r3, #1
 8006e64:	e01a      	b.n	8006e9c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	2220      	movs	r2, #32
 8006e6c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	6859      	ldr	r1, [r3, #4]
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681a      	ldr	r2, [r3, #0]
 8006e78:	4b0b      	ldr	r3, [pc, #44]	@ (8006ea8 <HAL_I2C_Mem_Read+0x230>)
 8006e7a:	400b      	ands	r3, r1
 8006e7c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2220      	movs	r2, #32
 8006e82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2200      	movs	r2, #0
 8006e92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006e96:	2300      	movs	r3, #0
 8006e98:	e000      	b.n	8006e9c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006e9a:	2302      	movs	r3, #2
  }
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3718      	adds	r7, #24
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}
 8006ea4:	80002400 	.word	0x80002400
 8006ea8:	fe00e800 	.word	0xfe00e800

08006eac <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b083      	sub	sp, #12
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006eba:	b2db      	uxtb	r3, r3
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	370c      	adds	r7, #12
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec6:	4770      	bx	lr

08006ec8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b086      	sub	sp, #24
 8006ecc:	af02      	add	r7, sp, #8
 8006ece:	60f8      	str	r0, [r7, #12]
 8006ed0:	4608      	mov	r0, r1
 8006ed2:	4611      	mov	r1, r2
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	817b      	strh	r3, [r7, #10]
 8006eda:	460b      	mov	r3, r1
 8006edc:	813b      	strh	r3, [r7, #8]
 8006ede:	4613      	mov	r3, r2
 8006ee0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006ee2:	88fb      	ldrh	r3, [r7, #6]
 8006ee4:	b2da      	uxtb	r2, r3
 8006ee6:	8979      	ldrh	r1, [r7, #10]
 8006ee8:	4b20      	ldr	r3, [pc, #128]	@ (8006f6c <I2C_RequestMemoryWrite+0xa4>)
 8006eea:	9300      	str	r3, [sp, #0]
 8006eec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006ef0:	68f8      	ldr	r0, [r7, #12]
 8006ef2:	f000 fa79 	bl	80073e8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ef6:	69fa      	ldr	r2, [r7, #28]
 8006ef8:	69b9      	ldr	r1, [r7, #24]
 8006efa:	68f8      	ldr	r0, [r7, #12]
 8006efc:	f000 f909 	bl	8007112 <I2C_WaitOnTXISFlagUntilTimeout>
 8006f00:	4603      	mov	r3, r0
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d001      	beq.n	8006f0a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006f06:	2301      	movs	r3, #1
 8006f08:	e02c      	b.n	8006f64 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006f0a:	88fb      	ldrh	r3, [r7, #6]
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	d105      	bne.n	8006f1c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006f10:	893b      	ldrh	r3, [r7, #8]
 8006f12:	b2da      	uxtb	r2, r3
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	629a      	str	r2, [r3, #40]	@ 0x28
 8006f1a:	e015      	b.n	8006f48 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006f1c:	893b      	ldrh	r3, [r7, #8]
 8006f1e:	0a1b      	lsrs	r3, r3, #8
 8006f20:	b29b      	uxth	r3, r3
 8006f22:	b2da      	uxtb	r2, r3
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f2a:	69fa      	ldr	r2, [r7, #28]
 8006f2c:	69b9      	ldr	r1, [r7, #24]
 8006f2e:	68f8      	ldr	r0, [r7, #12]
 8006f30:	f000 f8ef 	bl	8007112 <I2C_WaitOnTXISFlagUntilTimeout>
 8006f34:	4603      	mov	r3, r0
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d001      	beq.n	8006f3e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	e012      	b.n	8006f64 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006f3e:	893b      	ldrh	r3, [r7, #8]
 8006f40:	b2da      	uxtb	r2, r3
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006f48:	69fb      	ldr	r3, [r7, #28]
 8006f4a:	9300      	str	r3, [sp, #0]
 8006f4c:	69bb      	ldr	r3, [r7, #24]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	2180      	movs	r1, #128	@ 0x80
 8006f52:	68f8      	ldr	r0, [r7, #12]
 8006f54:	f000 f884 	bl	8007060 <I2C_WaitOnFlagUntilTimeout>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d001      	beq.n	8006f62 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	e000      	b.n	8006f64 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006f62:	2300      	movs	r3, #0
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	3710      	adds	r7, #16
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd80      	pop	{r7, pc}
 8006f6c:	80002000 	.word	0x80002000

08006f70 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b086      	sub	sp, #24
 8006f74:	af02      	add	r7, sp, #8
 8006f76:	60f8      	str	r0, [r7, #12]
 8006f78:	4608      	mov	r0, r1
 8006f7a:	4611      	mov	r1, r2
 8006f7c:	461a      	mov	r2, r3
 8006f7e:	4603      	mov	r3, r0
 8006f80:	817b      	strh	r3, [r7, #10]
 8006f82:	460b      	mov	r3, r1
 8006f84:	813b      	strh	r3, [r7, #8]
 8006f86:	4613      	mov	r3, r2
 8006f88:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006f8a:	88fb      	ldrh	r3, [r7, #6]
 8006f8c:	b2da      	uxtb	r2, r3
 8006f8e:	8979      	ldrh	r1, [r7, #10]
 8006f90:	4b20      	ldr	r3, [pc, #128]	@ (8007014 <I2C_RequestMemoryRead+0xa4>)
 8006f92:	9300      	str	r3, [sp, #0]
 8006f94:	2300      	movs	r3, #0
 8006f96:	68f8      	ldr	r0, [r7, #12]
 8006f98:	f000 fa26 	bl	80073e8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f9c:	69fa      	ldr	r2, [r7, #28]
 8006f9e:	69b9      	ldr	r1, [r7, #24]
 8006fa0:	68f8      	ldr	r0, [r7, #12]
 8006fa2:	f000 f8b6 	bl	8007112 <I2C_WaitOnTXISFlagUntilTimeout>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d001      	beq.n	8006fb0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006fac:	2301      	movs	r3, #1
 8006fae:	e02c      	b.n	800700a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006fb0:	88fb      	ldrh	r3, [r7, #6]
 8006fb2:	2b01      	cmp	r3, #1
 8006fb4:	d105      	bne.n	8006fc2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006fb6:	893b      	ldrh	r3, [r7, #8]
 8006fb8:	b2da      	uxtb	r2, r3
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	629a      	str	r2, [r3, #40]	@ 0x28
 8006fc0:	e015      	b.n	8006fee <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006fc2:	893b      	ldrh	r3, [r7, #8]
 8006fc4:	0a1b      	lsrs	r3, r3, #8
 8006fc6:	b29b      	uxth	r3, r3
 8006fc8:	b2da      	uxtb	r2, r3
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006fd0:	69fa      	ldr	r2, [r7, #28]
 8006fd2:	69b9      	ldr	r1, [r7, #24]
 8006fd4:	68f8      	ldr	r0, [r7, #12]
 8006fd6:	f000 f89c 	bl	8007112 <I2C_WaitOnTXISFlagUntilTimeout>
 8006fda:	4603      	mov	r3, r0
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d001      	beq.n	8006fe4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	e012      	b.n	800700a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006fe4:	893b      	ldrh	r3, [r7, #8]
 8006fe6:	b2da      	uxtb	r2, r3
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006fee:	69fb      	ldr	r3, [r7, #28]
 8006ff0:	9300      	str	r3, [sp, #0]
 8006ff2:	69bb      	ldr	r3, [r7, #24]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	2140      	movs	r1, #64	@ 0x40
 8006ff8:	68f8      	ldr	r0, [r7, #12]
 8006ffa:	f000 f831 	bl	8007060 <I2C_WaitOnFlagUntilTimeout>
 8006ffe:	4603      	mov	r3, r0
 8007000:	2b00      	cmp	r3, #0
 8007002:	d001      	beq.n	8007008 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8007004:	2301      	movs	r3, #1
 8007006:	e000      	b.n	800700a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007008:	2300      	movs	r3, #0
}
 800700a:	4618      	mov	r0, r3
 800700c:	3710      	adds	r7, #16
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}
 8007012:	bf00      	nop
 8007014:	80002000 	.word	0x80002000

08007018 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007018:	b480      	push	{r7}
 800701a:	b083      	sub	sp, #12
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	699b      	ldr	r3, [r3, #24]
 8007026:	f003 0302 	and.w	r3, r3, #2
 800702a:	2b02      	cmp	r3, #2
 800702c:	d103      	bne.n	8007036 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	2200      	movs	r2, #0
 8007034:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	699b      	ldr	r3, [r3, #24]
 800703c:	f003 0301 	and.w	r3, r3, #1
 8007040:	2b01      	cmp	r3, #1
 8007042:	d007      	beq.n	8007054 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	699a      	ldr	r2, [r3, #24]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f042 0201 	orr.w	r2, r2, #1
 8007052:	619a      	str	r2, [r3, #24]
  }
}
 8007054:	bf00      	nop
 8007056:	370c      	adds	r7, #12
 8007058:	46bd      	mov	sp, r7
 800705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705e:	4770      	bx	lr

08007060 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b084      	sub	sp, #16
 8007064:	af00      	add	r7, sp, #0
 8007066:	60f8      	str	r0, [r7, #12]
 8007068:	60b9      	str	r1, [r7, #8]
 800706a:	603b      	str	r3, [r7, #0]
 800706c:	4613      	mov	r3, r2
 800706e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007070:	e03b      	b.n	80070ea <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007072:	69ba      	ldr	r2, [r7, #24]
 8007074:	6839      	ldr	r1, [r7, #0]
 8007076:	68f8      	ldr	r0, [r7, #12]
 8007078:	f000 f8d6 	bl	8007228 <I2C_IsErrorOccurred>
 800707c:	4603      	mov	r3, r0
 800707e:	2b00      	cmp	r3, #0
 8007080:	d001      	beq.n	8007086 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8007082:	2301      	movs	r3, #1
 8007084:	e041      	b.n	800710a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800708c:	d02d      	beq.n	80070ea <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800708e:	f7fe fa55 	bl	800553c <HAL_GetTick>
 8007092:	4602      	mov	r2, r0
 8007094:	69bb      	ldr	r3, [r7, #24]
 8007096:	1ad3      	subs	r3, r2, r3
 8007098:	683a      	ldr	r2, [r7, #0]
 800709a:	429a      	cmp	r2, r3
 800709c:	d302      	bcc.n	80070a4 <I2C_WaitOnFlagUntilTimeout+0x44>
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d122      	bne.n	80070ea <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	699a      	ldr	r2, [r3, #24]
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	4013      	ands	r3, r2
 80070ae:	68ba      	ldr	r2, [r7, #8]
 80070b0:	429a      	cmp	r2, r3
 80070b2:	bf0c      	ite	eq
 80070b4:	2301      	moveq	r3, #1
 80070b6:	2300      	movne	r3, #0
 80070b8:	b2db      	uxtb	r3, r3
 80070ba:	461a      	mov	r2, r3
 80070bc:	79fb      	ldrb	r3, [r7, #7]
 80070be:	429a      	cmp	r2, r3
 80070c0:	d113      	bne.n	80070ea <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070c6:	f043 0220 	orr.w	r2, r3, #32
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2220      	movs	r2, #32
 80070d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	2200      	movs	r2, #0
 80070da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	2200      	movs	r2, #0
 80070e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80070e6:	2301      	movs	r3, #1
 80070e8:	e00f      	b.n	800710a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	699a      	ldr	r2, [r3, #24]
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	4013      	ands	r3, r2
 80070f4:	68ba      	ldr	r2, [r7, #8]
 80070f6:	429a      	cmp	r2, r3
 80070f8:	bf0c      	ite	eq
 80070fa:	2301      	moveq	r3, #1
 80070fc:	2300      	movne	r3, #0
 80070fe:	b2db      	uxtb	r3, r3
 8007100:	461a      	mov	r2, r3
 8007102:	79fb      	ldrb	r3, [r7, #7]
 8007104:	429a      	cmp	r2, r3
 8007106:	d0b4      	beq.n	8007072 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007108:	2300      	movs	r3, #0
}
 800710a:	4618      	mov	r0, r3
 800710c:	3710      	adds	r7, #16
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}

08007112 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007112:	b580      	push	{r7, lr}
 8007114:	b084      	sub	sp, #16
 8007116:	af00      	add	r7, sp, #0
 8007118:	60f8      	str	r0, [r7, #12]
 800711a:	60b9      	str	r1, [r7, #8]
 800711c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800711e:	e033      	b.n	8007188 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007120:	687a      	ldr	r2, [r7, #4]
 8007122:	68b9      	ldr	r1, [r7, #8]
 8007124:	68f8      	ldr	r0, [r7, #12]
 8007126:	f000 f87f 	bl	8007228 <I2C_IsErrorOccurred>
 800712a:	4603      	mov	r3, r0
 800712c:	2b00      	cmp	r3, #0
 800712e:	d001      	beq.n	8007134 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007130:	2301      	movs	r3, #1
 8007132:	e031      	b.n	8007198 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800713a:	d025      	beq.n	8007188 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800713c:	f7fe f9fe 	bl	800553c <HAL_GetTick>
 8007140:	4602      	mov	r2, r0
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	1ad3      	subs	r3, r2, r3
 8007146:	68ba      	ldr	r2, [r7, #8]
 8007148:	429a      	cmp	r2, r3
 800714a:	d302      	bcc.n	8007152 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d11a      	bne.n	8007188 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	699b      	ldr	r3, [r3, #24]
 8007158:	f003 0302 	and.w	r3, r3, #2
 800715c:	2b02      	cmp	r3, #2
 800715e:	d013      	beq.n	8007188 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007164:	f043 0220 	orr.w	r2, r3, #32
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	2220      	movs	r2, #32
 8007170:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2200      	movs	r2, #0
 8007178:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	2200      	movs	r2, #0
 8007180:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007184:	2301      	movs	r3, #1
 8007186:	e007      	b.n	8007198 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	699b      	ldr	r3, [r3, #24]
 800718e:	f003 0302 	and.w	r3, r3, #2
 8007192:	2b02      	cmp	r3, #2
 8007194:	d1c4      	bne.n	8007120 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007196:	2300      	movs	r3, #0
}
 8007198:	4618      	mov	r0, r3
 800719a:	3710      	adds	r7, #16
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}

080071a0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b084      	sub	sp, #16
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	60f8      	str	r0, [r7, #12]
 80071a8:	60b9      	str	r1, [r7, #8]
 80071aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80071ac:	e02f      	b.n	800720e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80071ae:	687a      	ldr	r2, [r7, #4]
 80071b0:	68b9      	ldr	r1, [r7, #8]
 80071b2:	68f8      	ldr	r0, [r7, #12]
 80071b4:	f000 f838 	bl	8007228 <I2C_IsErrorOccurred>
 80071b8:	4603      	mov	r3, r0
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d001      	beq.n	80071c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80071be:	2301      	movs	r3, #1
 80071c0:	e02d      	b.n	800721e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071c2:	f7fe f9bb 	bl	800553c <HAL_GetTick>
 80071c6:	4602      	mov	r2, r0
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	1ad3      	subs	r3, r2, r3
 80071cc:	68ba      	ldr	r2, [r7, #8]
 80071ce:	429a      	cmp	r2, r3
 80071d0:	d302      	bcc.n	80071d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d11a      	bne.n	800720e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	699b      	ldr	r3, [r3, #24]
 80071de:	f003 0320 	and.w	r3, r3, #32
 80071e2:	2b20      	cmp	r3, #32
 80071e4:	d013      	beq.n	800720e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071ea:	f043 0220 	orr.w	r2, r3, #32
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2220      	movs	r2, #32
 80071f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2200      	movs	r2, #0
 80071fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	2200      	movs	r2, #0
 8007206:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800720a:	2301      	movs	r3, #1
 800720c:	e007      	b.n	800721e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	699b      	ldr	r3, [r3, #24]
 8007214:	f003 0320 	and.w	r3, r3, #32
 8007218:	2b20      	cmp	r3, #32
 800721a:	d1c8      	bne.n	80071ae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800721c:	2300      	movs	r3, #0
}
 800721e:	4618      	mov	r0, r3
 8007220:	3710      	adds	r7, #16
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}
	...

08007228 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b08a      	sub	sp, #40	@ 0x28
 800722c:	af00      	add	r7, sp, #0
 800722e:	60f8      	str	r0, [r7, #12]
 8007230:	60b9      	str	r1, [r7, #8]
 8007232:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007234:	2300      	movs	r3, #0
 8007236:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	699b      	ldr	r3, [r3, #24]
 8007240:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007242:	2300      	movs	r3, #0
 8007244:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800724a:	69bb      	ldr	r3, [r7, #24]
 800724c:	f003 0310 	and.w	r3, r3, #16
 8007250:	2b00      	cmp	r3, #0
 8007252:	d068      	beq.n	8007326 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	2210      	movs	r2, #16
 800725a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800725c:	e049      	b.n	80072f2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007264:	d045      	beq.n	80072f2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007266:	f7fe f969 	bl	800553c <HAL_GetTick>
 800726a:	4602      	mov	r2, r0
 800726c:	69fb      	ldr	r3, [r7, #28]
 800726e:	1ad3      	subs	r3, r2, r3
 8007270:	68ba      	ldr	r2, [r7, #8]
 8007272:	429a      	cmp	r2, r3
 8007274:	d302      	bcc.n	800727c <I2C_IsErrorOccurred+0x54>
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d13a      	bne.n	80072f2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	685b      	ldr	r3, [r3, #4]
 8007282:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007286:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800728e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	699b      	ldr	r3, [r3, #24]
 8007296:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800729a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800729e:	d121      	bne.n	80072e4 <I2C_IsErrorOccurred+0xbc>
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80072a6:	d01d      	beq.n	80072e4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80072a8:	7cfb      	ldrb	r3, [r7, #19]
 80072aa:	2b20      	cmp	r3, #32
 80072ac:	d01a      	beq.n	80072e4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	685a      	ldr	r2, [r3, #4]
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80072bc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80072be:	f7fe f93d 	bl	800553c <HAL_GetTick>
 80072c2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80072c4:	e00e      	b.n	80072e4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80072c6:	f7fe f939 	bl	800553c <HAL_GetTick>
 80072ca:	4602      	mov	r2, r0
 80072cc:	69fb      	ldr	r3, [r7, #28]
 80072ce:	1ad3      	subs	r3, r2, r3
 80072d0:	2b19      	cmp	r3, #25
 80072d2:	d907      	bls.n	80072e4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80072d4:	6a3b      	ldr	r3, [r7, #32]
 80072d6:	f043 0320 	orr.w	r3, r3, #32
 80072da:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80072dc:	2301      	movs	r3, #1
 80072de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80072e2:	e006      	b.n	80072f2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	699b      	ldr	r3, [r3, #24]
 80072ea:	f003 0320 	and.w	r3, r3, #32
 80072ee:	2b20      	cmp	r3, #32
 80072f0:	d1e9      	bne.n	80072c6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	699b      	ldr	r3, [r3, #24]
 80072f8:	f003 0320 	and.w	r3, r3, #32
 80072fc:	2b20      	cmp	r3, #32
 80072fe:	d003      	beq.n	8007308 <I2C_IsErrorOccurred+0xe0>
 8007300:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007304:	2b00      	cmp	r3, #0
 8007306:	d0aa      	beq.n	800725e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007308:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800730c:	2b00      	cmp	r3, #0
 800730e:	d103      	bne.n	8007318 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	2220      	movs	r2, #32
 8007316:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007318:	6a3b      	ldr	r3, [r7, #32]
 800731a:	f043 0304 	orr.w	r3, r3, #4
 800731e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007320:	2301      	movs	r3, #1
 8007322:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	699b      	ldr	r3, [r3, #24]
 800732c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800732e:	69bb      	ldr	r3, [r7, #24]
 8007330:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007334:	2b00      	cmp	r3, #0
 8007336:	d00b      	beq.n	8007350 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007338:	6a3b      	ldr	r3, [r7, #32]
 800733a:	f043 0301 	orr.w	r3, r3, #1
 800733e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007348:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800734a:	2301      	movs	r3, #1
 800734c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007350:	69bb      	ldr	r3, [r7, #24]
 8007352:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007356:	2b00      	cmp	r3, #0
 8007358:	d00b      	beq.n	8007372 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800735a:	6a3b      	ldr	r3, [r7, #32]
 800735c:	f043 0308 	orr.w	r3, r3, #8
 8007360:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800736a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800736c:	2301      	movs	r3, #1
 800736e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007372:	69bb      	ldr	r3, [r7, #24]
 8007374:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007378:	2b00      	cmp	r3, #0
 800737a:	d00b      	beq.n	8007394 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800737c:	6a3b      	ldr	r3, [r7, #32]
 800737e:	f043 0302 	orr.w	r3, r3, #2
 8007382:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800738c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800738e:	2301      	movs	r3, #1
 8007390:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8007394:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007398:	2b00      	cmp	r3, #0
 800739a:	d01c      	beq.n	80073d6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800739c:	68f8      	ldr	r0, [r7, #12]
 800739e:	f7ff fe3b 	bl	8007018 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	6859      	ldr	r1, [r3, #4]
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681a      	ldr	r2, [r3, #0]
 80073ac:	4b0d      	ldr	r3, [pc, #52]	@ (80073e4 <I2C_IsErrorOccurred+0x1bc>)
 80073ae:	400b      	ands	r3, r1
 80073b0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80073b6:	6a3b      	ldr	r3, [r7, #32]
 80073b8:	431a      	orrs	r2, r3
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	2220      	movs	r2, #32
 80073c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	2200      	movs	r2, #0
 80073ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	2200      	movs	r2, #0
 80073d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80073d6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3728      	adds	r7, #40	@ 0x28
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}
 80073e2:	bf00      	nop
 80073e4:	fe00e800 	.word	0xfe00e800

080073e8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b087      	sub	sp, #28
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	60f8      	str	r0, [r7, #12]
 80073f0:	607b      	str	r3, [r7, #4]
 80073f2:	460b      	mov	r3, r1
 80073f4:	817b      	strh	r3, [r7, #10]
 80073f6:	4613      	mov	r3, r2
 80073f8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80073fa:	897b      	ldrh	r3, [r7, #10]
 80073fc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007400:	7a7b      	ldrb	r3, [r7, #9]
 8007402:	041b      	lsls	r3, r3, #16
 8007404:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007408:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800740e:	6a3b      	ldr	r3, [r7, #32]
 8007410:	4313      	orrs	r3, r2
 8007412:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007416:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	685a      	ldr	r2, [r3, #4]
 800741e:	6a3b      	ldr	r3, [r7, #32]
 8007420:	0d5b      	lsrs	r3, r3, #21
 8007422:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8007426:	4b08      	ldr	r3, [pc, #32]	@ (8007448 <I2C_TransferConfig+0x60>)
 8007428:	430b      	orrs	r3, r1
 800742a:	43db      	mvns	r3, r3
 800742c:	ea02 0103 	and.w	r1, r2, r3
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	697a      	ldr	r2, [r7, #20]
 8007436:	430a      	orrs	r2, r1
 8007438:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800743a:	bf00      	nop
 800743c:	371c      	adds	r7, #28
 800743e:	46bd      	mov	sp, r7
 8007440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007444:	4770      	bx	lr
 8007446:	bf00      	nop
 8007448:	03ff63ff 	.word	0x03ff63ff

0800744c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b082      	sub	sp, #8
 8007450:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8007452:	2300      	movs	r3, #0
 8007454:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8007456:	4b23      	ldr	r3, [pc, #140]	@ (80074e4 <HAL_PWREx_EnableOverDrive+0x98>)
 8007458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800745a:	4a22      	ldr	r2, [pc, #136]	@ (80074e4 <HAL_PWREx_EnableOverDrive+0x98>)
 800745c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007460:	6413      	str	r3, [r2, #64]	@ 0x40
 8007462:	4b20      	ldr	r3, [pc, #128]	@ (80074e4 <HAL_PWREx_EnableOverDrive+0x98>)
 8007464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007466:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800746a:	603b      	str	r3, [r7, #0]
 800746c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800746e:	4b1e      	ldr	r3, [pc, #120]	@ (80074e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4a1d      	ldr	r2, [pc, #116]	@ (80074e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007474:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007478:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800747a:	f7fe f85f 	bl	800553c <HAL_GetTick>
 800747e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007480:	e009      	b.n	8007496 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007482:	f7fe f85b 	bl	800553c <HAL_GetTick>
 8007486:	4602      	mov	r2, r0
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	1ad3      	subs	r3, r2, r3
 800748c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007490:	d901      	bls.n	8007496 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8007492:	2303      	movs	r3, #3
 8007494:	e022      	b.n	80074dc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007496:	4b14      	ldr	r3, [pc, #80]	@ (80074e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007498:	685b      	ldr	r3, [r3, #4]
 800749a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800749e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80074a2:	d1ee      	bne.n	8007482 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80074a4:	4b10      	ldr	r3, [pc, #64]	@ (80074e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a0f      	ldr	r2, [pc, #60]	@ (80074e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80074aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80074ae:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80074b0:	f7fe f844 	bl	800553c <HAL_GetTick>
 80074b4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80074b6:	e009      	b.n	80074cc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80074b8:	f7fe f840 	bl	800553c <HAL_GetTick>
 80074bc:	4602      	mov	r2, r0
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	1ad3      	subs	r3, r2, r3
 80074c2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80074c6:	d901      	bls.n	80074cc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80074c8:	2303      	movs	r3, #3
 80074ca:	e007      	b.n	80074dc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80074cc:	4b06      	ldr	r3, [pc, #24]	@ (80074e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80074ce:	685b      	ldr	r3, [r3, #4]
 80074d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80074d8:	d1ee      	bne.n	80074b8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80074da:	2300      	movs	r3, #0
}
 80074dc:	4618      	mov	r0, r3
 80074de:	3708      	adds	r7, #8
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}
 80074e4:	40023800 	.word	0x40023800
 80074e8:	40007000 	.word	0x40007000

080074ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b086      	sub	sp, #24
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80074f4:	2300      	movs	r3, #0
 80074f6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d101      	bne.n	8007502 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80074fe:	2301      	movs	r3, #1
 8007500:	e291      	b.n	8007a26 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f003 0301 	and.w	r3, r3, #1
 800750a:	2b00      	cmp	r3, #0
 800750c:	f000 8087 	beq.w	800761e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007510:	4b96      	ldr	r3, [pc, #600]	@ (800776c <HAL_RCC_OscConfig+0x280>)
 8007512:	689b      	ldr	r3, [r3, #8]
 8007514:	f003 030c 	and.w	r3, r3, #12
 8007518:	2b04      	cmp	r3, #4
 800751a:	d00c      	beq.n	8007536 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800751c:	4b93      	ldr	r3, [pc, #588]	@ (800776c <HAL_RCC_OscConfig+0x280>)
 800751e:	689b      	ldr	r3, [r3, #8]
 8007520:	f003 030c 	and.w	r3, r3, #12
 8007524:	2b08      	cmp	r3, #8
 8007526:	d112      	bne.n	800754e <HAL_RCC_OscConfig+0x62>
 8007528:	4b90      	ldr	r3, [pc, #576]	@ (800776c <HAL_RCC_OscConfig+0x280>)
 800752a:	685b      	ldr	r3, [r3, #4]
 800752c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007530:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007534:	d10b      	bne.n	800754e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007536:	4b8d      	ldr	r3, [pc, #564]	@ (800776c <HAL_RCC_OscConfig+0x280>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800753e:	2b00      	cmp	r3, #0
 8007540:	d06c      	beq.n	800761c <HAL_RCC_OscConfig+0x130>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d168      	bne.n	800761c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800754a:	2301      	movs	r3, #1
 800754c:	e26b      	b.n	8007a26 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007556:	d106      	bne.n	8007566 <HAL_RCC_OscConfig+0x7a>
 8007558:	4b84      	ldr	r3, [pc, #528]	@ (800776c <HAL_RCC_OscConfig+0x280>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4a83      	ldr	r2, [pc, #524]	@ (800776c <HAL_RCC_OscConfig+0x280>)
 800755e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007562:	6013      	str	r3, [r2, #0]
 8007564:	e02e      	b.n	80075c4 <HAL_RCC_OscConfig+0xd8>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d10c      	bne.n	8007588 <HAL_RCC_OscConfig+0x9c>
 800756e:	4b7f      	ldr	r3, [pc, #508]	@ (800776c <HAL_RCC_OscConfig+0x280>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a7e      	ldr	r2, [pc, #504]	@ (800776c <HAL_RCC_OscConfig+0x280>)
 8007574:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007578:	6013      	str	r3, [r2, #0]
 800757a:	4b7c      	ldr	r3, [pc, #496]	@ (800776c <HAL_RCC_OscConfig+0x280>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a7b      	ldr	r2, [pc, #492]	@ (800776c <HAL_RCC_OscConfig+0x280>)
 8007580:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007584:	6013      	str	r3, [r2, #0]
 8007586:	e01d      	b.n	80075c4 <HAL_RCC_OscConfig+0xd8>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	685b      	ldr	r3, [r3, #4]
 800758c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007590:	d10c      	bne.n	80075ac <HAL_RCC_OscConfig+0xc0>
 8007592:	4b76      	ldr	r3, [pc, #472]	@ (800776c <HAL_RCC_OscConfig+0x280>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4a75      	ldr	r2, [pc, #468]	@ (800776c <HAL_RCC_OscConfig+0x280>)
 8007598:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800759c:	6013      	str	r3, [r2, #0]
 800759e:	4b73      	ldr	r3, [pc, #460]	@ (800776c <HAL_RCC_OscConfig+0x280>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a72      	ldr	r2, [pc, #456]	@ (800776c <HAL_RCC_OscConfig+0x280>)
 80075a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80075a8:	6013      	str	r3, [r2, #0]
 80075aa:	e00b      	b.n	80075c4 <HAL_RCC_OscConfig+0xd8>
 80075ac:	4b6f      	ldr	r3, [pc, #444]	@ (800776c <HAL_RCC_OscConfig+0x280>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a6e      	ldr	r2, [pc, #440]	@ (800776c <HAL_RCC_OscConfig+0x280>)
 80075b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80075b6:	6013      	str	r3, [r2, #0]
 80075b8:	4b6c      	ldr	r3, [pc, #432]	@ (800776c <HAL_RCC_OscConfig+0x280>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a6b      	ldr	r2, [pc, #428]	@ (800776c <HAL_RCC_OscConfig+0x280>)
 80075be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80075c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	685b      	ldr	r3, [r3, #4]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d013      	beq.n	80075f4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075cc:	f7fd ffb6 	bl	800553c <HAL_GetTick>
 80075d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80075d2:	e008      	b.n	80075e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80075d4:	f7fd ffb2 	bl	800553c <HAL_GetTick>
 80075d8:	4602      	mov	r2, r0
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	1ad3      	subs	r3, r2, r3
 80075de:	2b64      	cmp	r3, #100	@ 0x64
 80075e0:	d901      	bls.n	80075e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80075e2:	2303      	movs	r3, #3
 80075e4:	e21f      	b.n	8007a26 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80075e6:	4b61      	ldr	r3, [pc, #388]	@ (800776c <HAL_RCC_OscConfig+0x280>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d0f0      	beq.n	80075d4 <HAL_RCC_OscConfig+0xe8>
 80075f2:	e014      	b.n	800761e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075f4:	f7fd ffa2 	bl	800553c <HAL_GetTick>
 80075f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80075fa:	e008      	b.n	800760e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80075fc:	f7fd ff9e 	bl	800553c <HAL_GetTick>
 8007600:	4602      	mov	r2, r0
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	1ad3      	subs	r3, r2, r3
 8007606:	2b64      	cmp	r3, #100	@ 0x64
 8007608:	d901      	bls.n	800760e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800760a:	2303      	movs	r3, #3
 800760c:	e20b      	b.n	8007a26 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800760e:	4b57      	ldr	r3, [pc, #348]	@ (800776c <HAL_RCC_OscConfig+0x280>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007616:	2b00      	cmp	r3, #0
 8007618:	d1f0      	bne.n	80075fc <HAL_RCC_OscConfig+0x110>
 800761a:	e000      	b.n	800761e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800761c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f003 0302 	and.w	r3, r3, #2
 8007626:	2b00      	cmp	r3, #0
 8007628:	d069      	beq.n	80076fe <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800762a:	4b50      	ldr	r3, [pc, #320]	@ (800776c <HAL_RCC_OscConfig+0x280>)
 800762c:	689b      	ldr	r3, [r3, #8]
 800762e:	f003 030c 	and.w	r3, r3, #12
 8007632:	2b00      	cmp	r3, #0
 8007634:	d00b      	beq.n	800764e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007636:	4b4d      	ldr	r3, [pc, #308]	@ (800776c <HAL_RCC_OscConfig+0x280>)
 8007638:	689b      	ldr	r3, [r3, #8]
 800763a:	f003 030c 	and.w	r3, r3, #12
 800763e:	2b08      	cmp	r3, #8
 8007640:	d11c      	bne.n	800767c <HAL_RCC_OscConfig+0x190>
 8007642:	4b4a      	ldr	r3, [pc, #296]	@ (800776c <HAL_RCC_OscConfig+0x280>)
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800764a:	2b00      	cmp	r3, #0
 800764c:	d116      	bne.n	800767c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800764e:	4b47      	ldr	r3, [pc, #284]	@ (800776c <HAL_RCC_OscConfig+0x280>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f003 0302 	and.w	r3, r3, #2
 8007656:	2b00      	cmp	r3, #0
 8007658:	d005      	beq.n	8007666 <HAL_RCC_OscConfig+0x17a>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	68db      	ldr	r3, [r3, #12]
 800765e:	2b01      	cmp	r3, #1
 8007660:	d001      	beq.n	8007666 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007662:	2301      	movs	r3, #1
 8007664:	e1df      	b.n	8007a26 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007666:	4b41      	ldr	r3, [pc, #260]	@ (800776c <HAL_RCC_OscConfig+0x280>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	691b      	ldr	r3, [r3, #16]
 8007672:	00db      	lsls	r3, r3, #3
 8007674:	493d      	ldr	r1, [pc, #244]	@ (800776c <HAL_RCC_OscConfig+0x280>)
 8007676:	4313      	orrs	r3, r2
 8007678:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800767a:	e040      	b.n	80076fe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	68db      	ldr	r3, [r3, #12]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d023      	beq.n	80076cc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007684:	4b39      	ldr	r3, [pc, #228]	@ (800776c <HAL_RCC_OscConfig+0x280>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a38      	ldr	r2, [pc, #224]	@ (800776c <HAL_RCC_OscConfig+0x280>)
 800768a:	f043 0301 	orr.w	r3, r3, #1
 800768e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007690:	f7fd ff54 	bl	800553c <HAL_GetTick>
 8007694:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007696:	e008      	b.n	80076aa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007698:	f7fd ff50 	bl	800553c <HAL_GetTick>
 800769c:	4602      	mov	r2, r0
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	1ad3      	subs	r3, r2, r3
 80076a2:	2b02      	cmp	r3, #2
 80076a4:	d901      	bls.n	80076aa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80076a6:	2303      	movs	r3, #3
 80076a8:	e1bd      	b.n	8007a26 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076aa:	4b30      	ldr	r3, [pc, #192]	@ (800776c <HAL_RCC_OscConfig+0x280>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f003 0302 	and.w	r3, r3, #2
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d0f0      	beq.n	8007698 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076b6:	4b2d      	ldr	r3, [pc, #180]	@ (800776c <HAL_RCC_OscConfig+0x280>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	691b      	ldr	r3, [r3, #16]
 80076c2:	00db      	lsls	r3, r3, #3
 80076c4:	4929      	ldr	r1, [pc, #164]	@ (800776c <HAL_RCC_OscConfig+0x280>)
 80076c6:	4313      	orrs	r3, r2
 80076c8:	600b      	str	r3, [r1, #0]
 80076ca:	e018      	b.n	80076fe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80076cc:	4b27      	ldr	r3, [pc, #156]	@ (800776c <HAL_RCC_OscConfig+0x280>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a26      	ldr	r2, [pc, #152]	@ (800776c <HAL_RCC_OscConfig+0x280>)
 80076d2:	f023 0301 	bic.w	r3, r3, #1
 80076d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076d8:	f7fd ff30 	bl	800553c <HAL_GetTick>
 80076dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80076de:	e008      	b.n	80076f2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80076e0:	f7fd ff2c 	bl	800553c <HAL_GetTick>
 80076e4:	4602      	mov	r2, r0
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	1ad3      	subs	r3, r2, r3
 80076ea:	2b02      	cmp	r3, #2
 80076ec:	d901      	bls.n	80076f2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80076ee:	2303      	movs	r3, #3
 80076f0:	e199      	b.n	8007a26 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80076f2:	4b1e      	ldr	r3, [pc, #120]	@ (800776c <HAL_RCC_OscConfig+0x280>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f003 0302 	and.w	r3, r3, #2
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d1f0      	bne.n	80076e0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f003 0308 	and.w	r3, r3, #8
 8007706:	2b00      	cmp	r3, #0
 8007708:	d038      	beq.n	800777c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	695b      	ldr	r3, [r3, #20]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d019      	beq.n	8007746 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007712:	4b16      	ldr	r3, [pc, #88]	@ (800776c <HAL_RCC_OscConfig+0x280>)
 8007714:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007716:	4a15      	ldr	r2, [pc, #84]	@ (800776c <HAL_RCC_OscConfig+0x280>)
 8007718:	f043 0301 	orr.w	r3, r3, #1
 800771c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800771e:	f7fd ff0d 	bl	800553c <HAL_GetTick>
 8007722:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007724:	e008      	b.n	8007738 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007726:	f7fd ff09 	bl	800553c <HAL_GetTick>
 800772a:	4602      	mov	r2, r0
 800772c:	693b      	ldr	r3, [r7, #16]
 800772e:	1ad3      	subs	r3, r2, r3
 8007730:	2b02      	cmp	r3, #2
 8007732:	d901      	bls.n	8007738 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007734:	2303      	movs	r3, #3
 8007736:	e176      	b.n	8007a26 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007738:	4b0c      	ldr	r3, [pc, #48]	@ (800776c <HAL_RCC_OscConfig+0x280>)
 800773a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800773c:	f003 0302 	and.w	r3, r3, #2
 8007740:	2b00      	cmp	r3, #0
 8007742:	d0f0      	beq.n	8007726 <HAL_RCC_OscConfig+0x23a>
 8007744:	e01a      	b.n	800777c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007746:	4b09      	ldr	r3, [pc, #36]	@ (800776c <HAL_RCC_OscConfig+0x280>)
 8007748:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800774a:	4a08      	ldr	r2, [pc, #32]	@ (800776c <HAL_RCC_OscConfig+0x280>)
 800774c:	f023 0301 	bic.w	r3, r3, #1
 8007750:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007752:	f7fd fef3 	bl	800553c <HAL_GetTick>
 8007756:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007758:	e00a      	b.n	8007770 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800775a:	f7fd feef 	bl	800553c <HAL_GetTick>
 800775e:	4602      	mov	r2, r0
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	1ad3      	subs	r3, r2, r3
 8007764:	2b02      	cmp	r3, #2
 8007766:	d903      	bls.n	8007770 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007768:	2303      	movs	r3, #3
 800776a:	e15c      	b.n	8007a26 <HAL_RCC_OscConfig+0x53a>
 800776c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007770:	4b91      	ldr	r3, [pc, #580]	@ (80079b8 <HAL_RCC_OscConfig+0x4cc>)
 8007772:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007774:	f003 0302 	and.w	r3, r3, #2
 8007778:	2b00      	cmp	r3, #0
 800777a:	d1ee      	bne.n	800775a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f003 0304 	and.w	r3, r3, #4
 8007784:	2b00      	cmp	r3, #0
 8007786:	f000 80a4 	beq.w	80078d2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800778a:	4b8b      	ldr	r3, [pc, #556]	@ (80079b8 <HAL_RCC_OscConfig+0x4cc>)
 800778c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800778e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007792:	2b00      	cmp	r3, #0
 8007794:	d10d      	bne.n	80077b2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007796:	4b88      	ldr	r3, [pc, #544]	@ (80079b8 <HAL_RCC_OscConfig+0x4cc>)
 8007798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800779a:	4a87      	ldr	r2, [pc, #540]	@ (80079b8 <HAL_RCC_OscConfig+0x4cc>)
 800779c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80077a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80077a2:	4b85      	ldr	r3, [pc, #532]	@ (80079b8 <HAL_RCC_OscConfig+0x4cc>)
 80077a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80077aa:	60bb      	str	r3, [r7, #8]
 80077ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80077ae:	2301      	movs	r3, #1
 80077b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80077b2:	4b82      	ldr	r3, [pc, #520]	@ (80079bc <HAL_RCC_OscConfig+0x4d0>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d118      	bne.n	80077f0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80077be:	4b7f      	ldr	r3, [pc, #508]	@ (80079bc <HAL_RCC_OscConfig+0x4d0>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4a7e      	ldr	r2, [pc, #504]	@ (80079bc <HAL_RCC_OscConfig+0x4d0>)
 80077c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80077c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80077ca:	f7fd feb7 	bl	800553c <HAL_GetTick>
 80077ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80077d0:	e008      	b.n	80077e4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80077d2:	f7fd feb3 	bl	800553c <HAL_GetTick>
 80077d6:	4602      	mov	r2, r0
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	1ad3      	subs	r3, r2, r3
 80077dc:	2b64      	cmp	r3, #100	@ 0x64
 80077de:	d901      	bls.n	80077e4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80077e0:	2303      	movs	r3, #3
 80077e2:	e120      	b.n	8007a26 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80077e4:	4b75      	ldr	r3, [pc, #468]	@ (80079bc <HAL_RCC_OscConfig+0x4d0>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d0f0      	beq.n	80077d2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	689b      	ldr	r3, [r3, #8]
 80077f4:	2b01      	cmp	r3, #1
 80077f6:	d106      	bne.n	8007806 <HAL_RCC_OscConfig+0x31a>
 80077f8:	4b6f      	ldr	r3, [pc, #444]	@ (80079b8 <HAL_RCC_OscConfig+0x4cc>)
 80077fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077fc:	4a6e      	ldr	r2, [pc, #440]	@ (80079b8 <HAL_RCC_OscConfig+0x4cc>)
 80077fe:	f043 0301 	orr.w	r3, r3, #1
 8007802:	6713      	str	r3, [r2, #112]	@ 0x70
 8007804:	e02d      	b.n	8007862 <HAL_RCC_OscConfig+0x376>
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	689b      	ldr	r3, [r3, #8]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d10c      	bne.n	8007828 <HAL_RCC_OscConfig+0x33c>
 800780e:	4b6a      	ldr	r3, [pc, #424]	@ (80079b8 <HAL_RCC_OscConfig+0x4cc>)
 8007810:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007812:	4a69      	ldr	r2, [pc, #420]	@ (80079b8 <HAL_RCC_OscConfig+0x4cc>)
 8007814:	f023 0301 	bic.w	r3, r3, #1
 8007818:	6713      	str	r3, [r2, #112]	@ 0x70
 800781a:	4b67      	ldr	r3, [pc, #412]	@ (80079b8 <HAL_RCC_OscConfig+0x4cc>)
 800781c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800781e:	4a66      	ldr	r2, [pc, #408]	@ (80079b8 <HAL_RCC_OscConfig+0x4cc>)
 8007820:	f023 0304 	bic.w	r3, r3, #4
 8007824:	6713      	str	r3, [r2, #112]	@ 0x70
 8007826:	e01c      	b.n	8007862 <HAL_RCC_OscConfig+0x376>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	689b      	ldr	r3, [r3, #8]
 800782c:	2b05      	cmp	r3, #5
 800782e:	d10c      	bne.n	800784a <HAL_RCC_OscConfig+0x35e>
 8007830:	4b61      	ldr	r3, [pc, #388]	@ (80079b8 <HAL_RCC_OscConfig+0x4cc>)
 8007832:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007834:	4a60      	ldr	r2, [pc, #384]	@ (80079b8 <HAL_RCC_OscConfig+0x4cc>)
 8007836:	f043 0304 	orr.w	r3, r3, #4
 800783a:	6713      	str	r3, [r2, #112]	@ 0x70
 800783c:	4b5e      	ldr	r3, [pc, #376]	@ (80079b8 <HAL_RCC_OscConfig+0x4cc>)
 800783e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007840:	4a5d      	ldr	r2, [pc, #372]	@ (80079b8 <HAL_RCC_OscConfig+0x4cc>)
 8007842:	f043 0301 	orr.w	r3, r3, #1
 8007846:	6713      	str	r3, [r2, #112]	@ 0x70
 8007848:	e00b      	b.n	8007862 <HAL_RCC_OscConfig+0x376>
 800784a:	4b5b      	ldr	r3, [pc, #364]	@ (80079b8 <HAL_RCC_OscConfig+0x4cc>)
 800784c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800784e:	4a5a      	ldr	r2, [pc, #360]	@ (80079b8 <HAL_RCC_OscConfig+0x4cc>)
 8007850:	f023 0301 	bic.w	r3, r3, #1
 8007854:	6713      	str	r3, [r2, #112]	@ 0x70
 8007856:	4b58      	ldr	r3, [pc, #352]	@ (80079b8 <HAL_RCC_OscConfig+0x4cc>)
 8007858:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800785a:	4a57      	ldr	r2, [pc, #348]	@ (80079b8 <HAL_RCC_OscConfig+0x4cc>)
 800785c:	f023 0304 	bic.w	r3, r3, #4
 8007860:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	689b      	ldr	r3, [r3, #8]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d015      	beq.n	8007896 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800786a:	f7fd fe67 	bl	800553c <HAL_GetTick>
 800786e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007870:	e00a      	b.n	8007888 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007872:	f7fd fe63 	bl	800553c <HAL_GetTick>
 8007876:	4602      	mov	r2, r0
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	1ad3      	subs	r3, r2, r3
 800787c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007880:	4293      	cmp	r3, r2
 8007882:	d901      	bls.n	8007888 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007884:	2303      	movs	r3, #3
 8007886:	e0ce      	b.n	8007a26 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007888:	4b4b      	ldr	r3, [pc, #300]	@ (80079b8 <HAL_RCC_OscConfig+0x4cc>)
 800788a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800788c:	f003 0302 	and.w	r3, r3, #2
 8007890:	2b00      	cmp	r3, #0
 8007892:	d0ee      	beq.n	8007872 <HAL_RCC_OscConfig+0x386>
 8007894:	e014      	b.n	80078c0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007896:	f7fd fe51 	bl	800553c <HAL_GetTick>
 800789a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800789c:	e00a      	b.n	80078b4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800789e:	f7fd fe4d 	bl	800553c <HAL_GetTick>
 80078a2:	4602      	mov	r2, r0
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	1ad3      	subs	r3, r2, r3
 80078a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d901      	bls.n	80078b4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80078b0:	2303      	movs	r3, #3
 80078b2:	e0b8      	b.n	8007a26 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80078b4:	4b40      	ldr	r3, [pc, #256]	@ (80079b8 <HAL_RCC_OscConfig+0x4cc>)
 80078b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078b8:	f003 0302 	and.w	r3, r3, #2
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d1ee      	bne.n	800789e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80078c0:	7dfb      	ldrb	r3, [r7, #23]
 80078c2:	2b01      	cmp	r3, #1
 80078c4:	d105      	bne.n	80078d2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80078c6:	4b3c      	ldr	r3, [pc, #240]	@ (80079b8 <HAL_RCC_OscConfig+0x4cc>)
 80078c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078ca:	4a3b      	ldr	r2, [pc, #236]	@ (80079b8 <HAL_RCC_OscConfig+0x4cc>)
 80078cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80078d0:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	699b      	ldr	r3, [r3, #24]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	f000 80a4 	beq.w	8007a24 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80078dc:	4b36      	ldr	r3, [pc, #216]	@ (80079b8 <HAL_RCC_OscConfig+0x4cc>)
 80078de:	689b      	ldr	r3, [r3, #8]
 80078e0:	f003 030c 	and.w	r3, r3, #12
 80078e4:	2b08      	cmp	r3, #8
 80078e6:	d06b      	beq.n	80079c0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	699b      	ldr	r3, [r3, #24]
 80078ec:	2b02      	cmp	r3, #2
 80078ee:	d149      	bne.n	8007984 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80078f0:	4b31      	ldr	r3, [pc, #196]	@ (80079b8 <HAL_RCC_OscConfig+0x4cc>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a30      	ldr	r2, [pc, #192]	@ (80079b8 <HAL_RCC_OscConfig+0x4cc>)
 80078f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80078fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078fc:	f7fd fe1e 	bl	800553c <HAL_GetTick>
 8007900:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007902:	e008      	b.n	8007916 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007904:	f7fd fe1a 	bl	800553c <HAL_GetTick>
 8007908:	4602      	mov	r2, r0
 800790a:	693b      	ldr	r3, [r7, #16]
 800790c:	1ad3      	subs	r3, r2, r3
 800790e:	2b02      	cmp	r3, #2
 8007910:	d901      	bls.n	8007916 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007912:	2303      	movs	r3, #3
 8007914:	e087      	b.n	8007a26 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007916:	4b28      	ldr	r3, [pc, #160]	@ (80079b8 <HAL_RCC_OscConfig+0x4cc>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800791e:	2b00      	cmp	r3, #0
 8007920:	d1f0      	bne.n	8007904 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	69da      	ldr	r2, [r3, #28]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6a1b      	ldr	r3, [r3, #32]
 800792a:	431a      	orrs	r2, r3
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007930:	019b      	lsls	r3, r3, #6
 8007932:	431a      	orrs	r2, r3
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007938:	085b      	lsrs	r3, r3, #1
 800793a:	3b01      	subs	r3, #1
 800793c:	041b      	lsls	r3, r3, #16
 800793e:	431a      	orrs	r2, r3
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007944:	061b      	lsls	r3, r3, #24
 8007946:	4313      	orrs	r3, r2
 8007948:	4a1b      	ldr	r2, [pc, #108]	@ (80079b8 <HAL_RCC_OscConfig+0x4cc>)
 800794a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800794e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007950:	4b19      	ldr	r3, [pc, #100]	@ (80079b8 <HAL_RCC_OscConfig+0x4cc>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4a18      	ldr	r2, [pc, #96]	@ (80079b8 <HAL_RCC_OscConfig+0x4cc>)
 8007956:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800795a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800795c:	f7fd fdee 	bl	800553c <HAL_GetTick>
 8007960:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007962:	e008      	b.n	8007976 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007964:	f7fd fdea 	bl	800553c <HAL_GetTick>
 8007968:	4602      	mov	r2, r0
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	1ad3      	subs	r3, r2, r3
 800796e:	2b02      	cmp	r3, #2
 8007970:	d901      	bls.n	8007976 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8007972:	2303      	movs	r3, #3
 8007974:	e057      	b.n	8007a26 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007976:	4b10      	ldr	r3, [pc, #64]	@ (80079b8 <HAL_RCC_OscConfig+0x4cc>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800797e:	2b00      	cmp	r3, #0
 8007980:	d0f0      	beq.n	8007964 <HAL_RCC_OscConfig+0x478>
 8007982:	e04f      	b.n	8007a24 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007984:	4b0c      	ldr	r3, [pc, #48]	@ (80079b8 <HAL_RCC_OscConfig+0x4cc>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	4a0b      	ldr	r2, [pc, #44]	@ (80079b8 <HAL_RCC_OscConfig+0x4cc>)
 800798a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800798e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007990:	f7fd fdd4 	bl	800553c <HAL_GetTick>
 8007994:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007996:	e008      	b.n	80079aa <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007998:	f7fd fdd0 	bl	800553c <HAL_GetTick>
 800799c:	4602      	mov	r2, r0
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	1ad3      	subs	r3, r2, r3
 80079a2:	2b02      	cmp	r3, #2
 80079a4:	d901      	bls.n	80079aa <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80079a6:	2303      	movs	r3, #3
 80079a8:	e03d      	b.n	8007a26 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079aa:	4b03      	ldr	r3, [pc, #12]	@ (80079b8 <HAL_RCC_OscConfig+0x4cc>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d1f0      	bne.n	8007998 <HAL_RCC_OscConfig+0x4ac>
 80079b6:	e035      	b.n	8007a24 <HAL_RCC_OscConfig+0x538>
 80079b8:	40023800 	.word	0x40023800
 80079bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80079c0:	4b1b      	ldr	r3, [pc, #108]	@ (8007a30 <HAL_RCC_OscConfig+0x544>)
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	699b      	ldr	r3, [r3, #24]
 80079ca:	2b01      	cmp	r3, #1
 80079cc:	d028      	beq.n	8007a20 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80079d8:	429a      	cmp	r2, r3
 80079da:	d121      	bne.n	8007a20 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80079e6:	429a      	cmp	r2, r3
 80079e8:	d11a      	bne.n	8007a20 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80079ea:	68fa      	ldr	r2, [r7, #12]
 80079ec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80079f0:	4013      	ands	r3, r2
 80079f2:	687a      	ldr	r2, [r7, #4]
 80079f4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80079f6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d111      	bne.n	8007a20 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a06:	085b      	lsrs	r3, r3, #1
 8007a08:	3b01      	subs	r3, #1
 8007a0a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	d107      	bne.n	8007a20 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a1a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007a1c:	429a      	cmp	r2, r3
 8007a1e:	d001      	beq.n	8007a24 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007a20:	2301      	movs	r3, #1
 8007a22:	e000      	b.n	8007a26 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007a24:	2300      	movs	r3, #0
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	3718      	adds	r7, #24
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}
 8007a2e:	bf00      	nop
 8007a30:	40023800 	.word	0x40023800

08007a34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b084      	sub	sp, #16
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
 8007a3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d101      	bne.n	8007a4c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007a48:	2301      	movs	r3, #1
 8007a4a:	e0d0      	b.n	8007bee <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007a4c:	4b6a      	ldr	r3, [pc, #424]	@ (8007bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f003 030f 	and.w	r3, r3, #15
 8007a54:	683a      	ldr	r2, [r7, #0]
 8007a56:	429a      	cmp	r2, r3
 8007a58:	d910      	bls.n	8007a7c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a5a:	4b67      	ldr	r3, [pc, #412]	@ (8007bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f023 020f 	bic.w	r2, r3, #15
 8007a62:	4965      	ldr	r1, [pc, #404]	@ (8007bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	4313      	orrs	r3, r2
 8007a68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a6a:	4b63      	ldr	r3, [pc, #396]	@ (8007bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f003 030f 	and.w	r3, r3, #15
 8007a72:	683a      	ldr	r2, [r7, #0]
 8007a74:	429a      	cmp	r2, r3
 8007a76:	d001      	beq.n	8007a7c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007a78:	2301      	movs	r3, #1
 8007a7a:	e0b8      	b.n	8007bee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f003 0302 	and.w	r3, r3, #2
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d020      	beq.n	8007aca <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f003 0304 	and.w	r3, r3, #4
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d005      	beq.n	8007aa0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007a94:	4b59      	ldr	r3, [pc, #356]	@ (8007bfc <HAL_RCC_ClockConfig+0x1c8>)
 8007a96:	689b      	ldr	r3, [r3, #8]
 8007a98:	4a58      	ldr	r2, [pc, #352]	@ (8007bfc <HAL_RCC_ClockConfig+0x1c8>)
 8007a9a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007a9e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f003 0308 	and.w	r3, r3, #8
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d005      	beq.n	8007ab8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007aac:	4b53      	ldr	r3, [pc, #332]	@ (8007bfc <HAL_RCC_ClockConfig+0x1c8>)
 8007aae:	689b      	ldr	r3, [r3, #8]
 8007ab0:	4a52      	ldr	r2, [pc, #328]	@ (8007bfc <HAL_RCC_ClockConfig+0x1c8>)
 8007ab2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007ab6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007ab8:	4b50      	ldr	r3, [pc, #320]	@ (8007bfc <HAL_RCC_ClockConfig+0x1c8>)
 8007aba:	689b      	ldr	r3, [r3, #8]
 8007abc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	689b      	ldr	r3, [r3, #8]
 8007ac4:	494d      	ldr	r1, [pc, #308]	@ (8007bfc <HAL_RCC_ClockConfig+0x1c8>)
 8007ac6:	4313      	orrs	r3, r2
 8007ac8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f003 0301 	and.w	r3, r3, #1
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d040      	beq.n	8007b58 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	685b      	ldr	r3, [r3, #4]
 8007ada:	2b01      	cmp	r3, #1
 8007adc:	d107      	bne.n	8007aee <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007ade:	4b47      	ldr	r3, [pc, #284]	@ (8007bfc <HAL_RCC_ClockConfig+0x1c8>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d115      	bne.n	8007b16 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007aea:	2301      	movs	r3, #1
 8007aec:	e07f      	b.n	8007bee <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	685b      	ldr	r3, [r3, #4]
 8007af2:	2b02      	cmp	r3, #2
 8007af4:	d107      	bne.n	8007b06 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007af6:	4b41      	ldr	r3, [pc, #260]	@ (8007bfc <HAL_RCC_ClockConfig+0x1c8>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d109      	bne.n	8007b16 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007b02:	2301      	movs	r3, #1
 8007b04:	e073      	b.n	8007bee <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b06:	4b3d      	ldr	r3, [pc, #244]	@ (8007bfc <HAL_RCC_ClockConfig+0x1c8>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f003 0302 	and.w	r3, r3, #2
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d101      	bne.n	8007b16 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007b12:	2301      	movs	r3, #1
 8007b14:	e06b      	b.n	8007bee <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007b16:	4b39      	ldr	r3, [pc, #228]	@ (8007bfc <HAL_RCC_ClockConfig+0x1c8>)
 8007b18:	689b      	ldr	r3, [r3, #8]
 8007b1a:	f023 0203 	bic.w	r2, r3, #3
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	4936      	ldr	r1, [pc, #216]	@ (8007bfc <HAL_RCC_ClockConfig+0x1c8>)
 8007b24:	4313      	orrs	r3, r2
 8007b26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b28:	f7fd fd08 	bl	800553c <HAL_GetTick>
 8007b2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b2e:	e00a      	b.n	8007b46 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007b30:	f7fd fd04 	bl	800553c <HAL_GetTick>
 8007b34:	4602      	mov	r2, r0
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	1ad3      	subs	r3, r2, r3
 8007b3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d901      	bls.n	8007b46 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007b42:	2303      	movs	r3, #3
 8007b44:	e053      	b.n	8007bee <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b46:	4b2d      	ldr	r3, [pc, #180]	@ (8007bfc <HAL_RCC_ClockConfig+0x1c8>)
 8007b48:	689b      	ldr	r3, [r3, #8]
 8007b4a:	f003 020c 	and.w	r2, r3, #12
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	685b      	ldr	r3, [r3, #4]
 8007b52:	009b      	lsls	r3, r3, #2
 8007b54:	429a      	cmp	r2, r3
 8007b56:	d1eb      	bne.n	8007b30 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007b58:	4b27      	ldr	r3, [pc, #156]	@ (8007bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f003 030f 	and.w	r3, r3, #15
 8007b60:	683a      	ldr	r2, [r7, #0]
 8007b62:	429a      	cmp	r2, r3
 8007b64:	d210      	bcs.n	8007b88 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b66:	4b24      	ldr	r3, [pc, #144]	@ (8007bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f023 020f 	bic.w	r2, r3, #15
 8007b6e:	4922      	ldr	r1, [pc, #136]	@ (8007bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	4313      	orrs	r3, r2
 8007b74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b76:	4b20      	ldr	r3, [pc, #128]	@ (8007bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f003 030f 	and.w	r3, r3, #15
 8007b7e:	683a      	ldr	r2, [r7, #0]
 8007b80:	429a      	cmp	r2, r3
 8007b82:	d001      	beq.n	8007b88 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007b84:	2301      	movs	r3, #1
 8007b86:	e032      	b.n	8007bee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f003 0304 	and.w	r3, r3, #4
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d008      	beq.n	8007ba6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007b94:	4b19      	ldr	r3, [pc, #100]	@ (8007bfc <HAL_RCC_ClockConfig+0x1c8>)
 8007b96:	689b      	ldr	r3, [r3, #8]
 8007b98:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	68db      	ldr	r3, [r3, #12]
 8007ba0:	4916      	ldr	r1, [pc, #88]	@ (8007bfc <HAL_RCC_ClockConfig+0x1c8>)
 8007ba2:	4313      	orrs	r3, r2
 8007ba4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f003 0308 	and.w	r3, r3, #8
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d009      	beq.n	8007bc6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007bb2:	4b12      	ldr	r3, [pc, #72]	@ (8007bfc <HAL_RCC_ClockConfig+0x1c8>)
 8007bb4:	689b      	ldr	r3, [r3, #8]
 8007bb6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	691b      	ldr	r3, [r3, #16]
 8007bbe:	00db      	lsls	r3, r3, #3
 8007bc0:	490e      	ldr	r1, [pc, #56]	@ (8007bfc <HAL_RCC_ClockConfig+0x1c8>)
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007bc6:	f000 f821 	bl	8007c0c <HAL_RCC_GetSysClockFreq>
 8007bca:	4602      	mov	r2, r0
 8007bcc:	4b0b      	ldr	r3, [pc, #44]	@ (8007bfc <HAL_RCC_ClockConfig+0x1c8>)
 8007bce:	689b      	ldr	r3, [r3, #8]
 8007bd0:	091b      	lsrs	r3, r3, #4
 8007bd2:	f003 030f 	and.w	r3, r3, #15
 8007bd6:	490a      	ldr	r1, [pc, #40]	@ (8007c00 <HAL_RCC_ClockConfig+0x1cc>)
 8007bd8:	5ccb      	ldrb	r3, [r1, r3]
 8007bda:	fa22 f303 	lsr.w	r3, r2, r3
 8007bde:	4a09      	ldr	r2, [pc, #36]	@ (8007c04 <HAL_RCC_ClockConfig+0x1d0>)
 8007be0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007be2:	4b09      	ldr	r3, [pc, #36]	@ (8007c08 <HAL_RCC_ClockConfig+0x1d4>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4618      	mov	r0, r3
 8007be8:	f7fd fc64 	bl	80054b4 <HAL_InitTick>

  return HAL_OK;
 8007bec:	2300      	movs	r3, #0
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3710      	adds	r7, #16
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}
 8007bf6:	bf00      	nop
 8007bf8:	40023c00 	.word	0x40023c00
 8007bfc:	40023800 	.word	0x40023800
 8007c00:	0801acf4 	.word	0x0801acf4
 8007c04:	200000c0 	.word	0x200000c0
 8007c08:	200000f8 	.word	0x200000f8

08007c0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007c0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c10:	b090      	sub	sp, #64	@ 0x40
 8007c12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007c14:	2300      	movs	r3, #0
 8007c16:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c18:	2300      	movs	r3, #0
 8007c1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8007c20:	2300      	movs	r3, #0
 8007c22:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007c24:	4b59      	ldr	r3, [pc, #356]	@ (8007d8c <HAL_RCC_GetSysClockFreq+0x180>)
 8007c26:	689b      	ldr	r3, [r3, #8]
 8007c28:	f003 030c 	and.w	r3, r3, #12
 8007c2c:	2b08      	cmp	r3, #8
 8007c2e:	d00d      	beq.n	8007c4c <HAL_RCC_GetSysClockFreq+0x40>
 8007c30:	2b08      	cmp	r3, #8
 8007c32:	f200 80a1 	bhi.w	8007d78 <HAL_RCC_GetSysClockFreq+0x16c>
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d002      	beq.n	8007c40 <HAL_RCC_GetSysClockFreq+0x34>
 8007c3a:	2b04      	cmp	r3, #4
 8007c3c:	d003      	beq.n	8007c46 <HAL_RCC_GetSysClockFreq+0x3a>
 8007c3e:	e09b      	b.n	8007d78 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007c40:	4b53      	ldr	r3, [pc, #332]	@ (8007d90 <HAL_RCC_GetSysClockFreq+0x184>)
 8007c42:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007c44:	e09b      	b.n	8007d7e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007c46:	4b53      	ldr	r3, [pc, #332]	@ (8007d94 <HAL_RCC_GetSysClockFreq+0x188>)
 8007c48:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007c4a:	e098      	b.n	8007d7e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007c4c:	4b4f      	ldr	r3, [pc, #316]	@ (8007d8c <HAL_RCC_GetSysClockFreq+0x180>)
 8007c4e:	685b      	ldr	r3, [r3, #4]
 8007c50:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007c54:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007c56:	4b4d      	ldr	r3, [pc, #308]	@ (8007d8c <HAL_RCC_GetSysClockFreq+0x180>)
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d028      	beq.n	8007cb4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007c62:	4b4a      	ldr	r3, [pc, #296]	@ (8007d8c <HAL_RCC_GetSysClockFreq+0x180>)
 8007c64:	685b      	ldr	r3, [r3, #4]
 8007c66:	099b      	lsrs	r3, r3, #6
 8007c68:	2200      	movs	r2, #0
 8007c6a:	623b      	str	r3, [r7, #32]
 8007c6c:	627a      	str	r2, [r7, #36]	@ 0x24
 8007c6e:	6a3b      	ldr	r3, [r7, #32]
 8007c70:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007c74:	2100      	movs	r1, #0
 8007c76:	4b47      	ldr	r3, [pc, #284]	@ (8007d94 <HAL_RCC_GetSysClockFreq+0x188>)
 8007c78:	fb03 f201 	mul.w	r2, r3, r1
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	fb00 f303 	mul.w	r3, r0, r3
 8007c82:	4413      	add	r3, r2
 8007c84:	4a43      	ldr	r2, [pc, #268]	@ (8007d94 <HAL_RCC_GetSysClockFreq+0x188>)
 8007c86:	fba0 1202 	umull	r1, r2, r0, r2
 8007c8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007c8c:	460a      	mov	r2, r1
 8007c8e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007c90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007c92:	4413      	add	r3, r2
 8007c94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007c96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c98:	2200      	movs	r2, #0
 8007c9a:	61bb      	str	r3, [r7, #24]
 8007c9c:	61fa      	str	r2, [r7, #28]
 8007c9e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007ca2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8007ca6:	f7f9 f80f 	bl	8000cc8 <__aeabi_uldivmod>
 8007caa:	4602      	mov	r2, r0
 8007cac:	460b      	mov	r3, r1
 8007cae:	4613      	mov	r3, r2
 8007cb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007cb2:	e053      	b.n	8007d5c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007cb4:	4b35      	ldr	r3, [pc, #212]	@ (8007d8c <HAL_RCC_GetSysClockFreq+0x180>)
 8007cb6:	685b      	ldr	r3, [r3, #4]
 8007cb8:	099b      	lsrs	r3, r3, #6
 8007cba:	2200      	movs	r2, #0
 8007cbc:	613b      	str	r3, [r7, #16]
 8007cbe:	617a      	str	r2, [r7, #20]
 8007cc0:	693b      	ldr	r3, [r7, #16]
 8007cc2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007cc6:	f04f 0b00 	mov.w	fp, #0
 8007cca:	4652      	mov	r2, sl
 8007ccc:	465b      	mov	r3, fp
 8007cce:	f04f 0000 	mov.w	r0, #0
 8007cd2:	f04f 0100 	mov.w	r1, #0
 8007cd6:	0159      	lsls	r1, r3, #5
 8007cd8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007cdc:	0150      	lsls	r0, r2, #5
 8007cde:	4602      	mov	r2, r0
 8007ce0:	460b      	mov	r3, r1
 8007ce2:	ebb2 080a 	subs.w	r8, r2, sl
 8007ce6:	eb63 090b 	sbc.w	r9, r3, fp
 8007cea:	f04f 0200 	mov.w	r2, #0
 8007cee:	f04f 0300 	mov.w	r3, #0
 8007cf2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007cf6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007cfa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007cfe:	ebb2 0408 	subs.w	r4, r2, r8
 8007d02:	eb63 0509 	sbc.w	r5, r3, r9
 8007d06:	f04f 0200 	mov.w	r2, #0
 8007d0a:	f04f 0300 	mov.w	r3, #0
 8007d0e:	00eb      	lsls	r3, r5, #3
 8007d10:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007d14:	00e2      	lsls	r2, r4, #3
 8007d16:	4614      	mov	r4, r2
 8007d18:	461d      	mov	r5, r3
 8007d1a:	eb14 030a 	adds.w	r3, r4, sl
 8007d1e:	603b      	str	r3, [r7, #0]
 8007d20:	eb45 030b 	adc.w	r3, r5, fp
 8007d24:	607b      	str	r3, [r7, #4]
 8007d26:	f04f 0200 	mov.w	r2, #0
 8007d2a:	f04f 0300 	mov.w	r3, #0
 8007d2e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007d32:	4629      	mov	r1, r5
 8007d34:	028b      	lsls	r3, r1, #10
 8007d36:	4621      	mov	r1, r4
 8007d38:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007d3c:	4621      	mov	r1, r4
 8007d3e:	028a      	lsls	r2, r1, #10
 8007d40:	4610      	mov	r0, r2
 8007d42:	4619      	mov	r1, r3
 8007d44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d46:	2200      	movs	r2, #0
 8007d48:	60bb      	str	r3, [r7, #8]
 8007d4a:	60fa      	str	r2, [r7, #12]
 8007d4c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007d50:	f7f8 ffba 	bl	8000cc8 <__aeabi_uldivmod>
 8007d54:	4602      	mov	r2, r0
 8007d56:	460b      	mov	r3, r1
 8007d58:	4613      	mov	r3, r2
 8007d5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007d5c:	4b0b      	ldr	r3, [pc, #44]	@ (8007d8c <HAL_RCC_GetSysClockFreq+0x180>)
 8007d5e:	685b      	ldr	r3, [r3, #4]
 8007d60:	0c1b      	lsrs	r3, r3, #16
 8007d62:	f003 0303 	and.w	r3, r3, #3
 8007d66:	3301      	adds	r3, #1
 8007d68:	005b      	lsls	r3, r3, #1
 8007d6a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8007d6c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d74:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007d76:	e002      	b.n	8007d7e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007d78:	4b05      	ldr	r3, [pc, #20]	@ (8007d90 <HAL_RCC_GetSysClockFreq+0x184>)
 8007d7a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007d7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007d7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8007d80:	4618      	mov	r0, r3
 8007d82:	3740      	adds	r7, #64	@ 0x40
 8007d84:	46bd      	mov	sp, r7
 8007d86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007d8a:	bf00      	nop
 8007d8c:	40023800 	.word	0x40023800
 8007d90:	00f42400 	.word	0x00f42400
 8007d94:	017d7840 	.word	0x017d7840

08007d98 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007d98:	b480      	push	{r7}
 8007d9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007d9c:	4b03      	ldr	r3, [pc, #12]	@ (8007dac <HAL_RCC_GetHCLKFreq+0x14>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	46bd      	mov	sp, r7
 8007da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da8:	4770      	bx	lr
 8007daa:	bf00      	nop
 8007dac:	200000c0 	.word	0x200000c0

08007db0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007db4:	f7ff fff0 	bl	8007d98 <HAL_RCC_GetHCLKFreq>
 8007db8:	4602      	mov	r2, r0
 8007dba:	4b05      	ldr	r3, [pc, #20]	@ (8007dd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007dbc:	689b      	ldr	r3, [r3, #8]
 8007dbe:	0a9b      	lsrs	r3, r3, #10
 8007dc0:	f003 0307 	and.w	r3, r3, #7
 8007dc4:	4903      	ldr	r1, [pc, #12]	@ (8007dd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007dc6:	5ccb      	ldrb	r3, [r1, r3]
 8007dc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	bd80      	pop	{r7, pc}
 8007dd0:	40023800 	.word	0x40023800
 8007dd4:	0801ad04 	.word	0x0801ad04

08007dd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007ddc:	f7ff ffdc 	bl	8007d98 <HAL_RCC_GetHCLKFreq>
 8007de0:	4602      	mov	r2, r0
 8007de2:	4b05      	ldr	r3, [pc, #20]	@ (8007df8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007de4:	689b      	ldr	r3, [r3, #8]
 8007de6:	0b5b      	lsrs	r3, r3, #13
 8007de8:	f003 0307 	and.w	r3, r3, #7
 8007dec:	4903      	ldr	r1, [pc, #12]	@ (8007dfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8007dee:	5ccb      	ldrb	r3, [r1, r3]
 8007df0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	bd80      	pop	{r7, pc}
 8007df8:	40023800 	.word	0x40023800
 8007dfc:	0801ad04 	.word	0x0801ad04

08007e00 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b088      	sub	sp, #32
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007e08:	2300      	movs	r3, #0
 8007e0a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007e10:	2300      	movs	r3, #0
 8007e12:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007e14:	2300      	movs	r3, #0
 8007e16:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007e18:	2300      	movs	r3, #0
 8007e1a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f003 0301 	and.w	r3, r3, #1
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d012      	beq.n	8007e4e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007e28:	4b69      	ldr	r3, [pc, #420]	@ (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e2a:	689b      	ldr	r3, [r3, #8]
 8007e2c:	4a68      	ldr	r2, [pc, #416]	@ (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e2e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007e32:	6093      	str	r3, [r2, #8]
 8007e34:	4b66      	ldr	r3, [pc, #408]	@ (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e36:	689a      	ldr	r2, [r3, #8]
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e3c:	4964      	ldr	r1, [pc, #400]	@ (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e3e:	4313      	orrs	r3, r2
 8007e40:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d101      	bne.n	8007e4e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d017      	beq.n	8007e8a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007e5a:	4b5d      	ldr	r3, [pc, #372]	@ (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007e60:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e68:	4959      	ldr	r1, [pc, #356]	@ (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e6a:	4313      	orrs	r3, r2
 8007e6c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e74:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007e78:	d101      	bne.n	8007e7e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d101      	bne.n	8007e8a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007e86:	2301      	movs	r3, #1
 8007e88:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d017      	beq.n	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007e96:	4b4e      	ldr	r3, [pc, #312]	@ (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007e9c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ea4:	494a      	ldr	r1, [pc, #296]	@ (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ea6:	4313      	orrs	r3, r2
 8007ea8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007eb0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007eb4:	d101      	bne.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d101      	bne.n	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d001      	beq.n	8007ed6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f003 0320 	and.w	r3, r3, #32
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	f000 808b 	beq.w	8007ffa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007ee4:	4b3a      	ldr	r3, [pc, #232]	@ (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ee8:	4a39      	ldr	r2, [pc, #228]	@ (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007eea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007eee:	6413      	str	r3, [r2, #64]	@ 0x40
 8007ef0:	4b37      	ldr	r3, [pc, #220]	@ (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ef4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007ef8:	60bb      	str	r3, [r7, #8]
 8007efa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007efc:	4b35      	ldr	r3, [pc, #212]	@ (8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	4a34      	ldr	r2, [pc, #208]	@ (8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007f02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007f06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f08:	f7fd fb18 	bl	800553c <HAL_GetTick>
 8007f0c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007f0e:	e008      	b.n	8007f22 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f10:	f7fd fb14 	bl	800553c <HAL_GetTick>
 8007f14:	4602      	mov	r2, r0
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	1ad3      	subs	r3, r2, r3
 8007f1a:	2b64      	cmp	r3, #100	@ 0x64
 8007f1c:	d901      	bls.n	8007f22 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007f1e:	2303      	movs	r3, #3
 8007f20:	e357      	b.n	80085d2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007f22:	4b2c      	ldr	r3, [pc, #176]	@ (8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d0f0      	beq.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007f2e:	4b28      	ldr	r3, [pc, #160]	@ (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007f36:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007f38:	693b      	ldr	r3, [r7, #16]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d035      	beq.n	8007faa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007f46:	693a      	ldr	r2, [r7, #16]
 8007f48:	429a      	cmp	r2, r3
 8007f4a:	d02e      	beq.n	8007faa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007f4c:	4b20      	ldr	r3, [pc, #128]	@ (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007f54:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007f56:	4b1e      	ldr	r3, [pc, #120]	@ (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f5a:	4a1d      	ldr	r2, [pc, #116]	@ (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007f60:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007f62:	4b1b      	ldr	r3, [pc, #108]	@ (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f66:	4a1a      	ldr	r2, [pc, #104]	@ (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f68:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007f6c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007f6e:	4a18      	ldr	r2, [pc, #96]	@ (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f70:	693b      	ldr	r3, [r7, #16]
 8007f72:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007f74:	4b16      	ldr	r3, [pc, #88]	@ (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f78:	f003 0301 	and.w	r3, r3, #1
 8007f7c:	2b01      	cmp	r3, #1
 8007f7e:	d114      	bne.n	8007faa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f80:	f7fd fadc 	bl	800553c <HAL_GetTick>
 8007f84:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f86:	e00a      	b.n	8007f9e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007f88:	f7fd fad8 	bl	800553c <HAL_GetTick>
 8007f8c:	4602      	mov	r2, r0
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	1ad3      	subs	r3, r2, r3
 8007f92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d901      	bls.n	8007f9e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007f9a:	2303      	movs	r3, #3
 8007f9c:	e319      	b.n	80085d2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f9e:	4b0c      	ldr	r3, [pc, #48]	@ (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007fa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fa2:	f003 0302 	and.w	r3, r3, #2
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d0ee      	beq.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007fb2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007fb6:	d111      	bne.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007fb8:	4b05      	ldr	r3, [pc, #20]	@ (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007fba:	689b      	ldr	r3, [r3, #8]
 8007fbc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8007fc4:	4b04      	ldr	r3, [pc, #16]	@ (8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007fc6:	400b      	ands	r3, r1
 8007fc8:	4901      	ldr	r1, [pc, #4]	@ (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	608b      	str	r3, [r1, #8]
 8007fce:	e00b      	b.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007fd0:	40023800 	.word	0x40023800
 8007fd4:	40007000 	.word	0x40007000
 8007fd8:	0ffffcff 	.word	0x0ffffcff
 8007fdc:	4baa      	ldr	r3, [pc, #680]	@ (8008288 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007fde:	689b      	ldr	r3, [r3, #8]
 8007fe0:	4aa9      	ldr	r2, [pc, #676]	@ (8008288 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007fe2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8007fe6:	6093      	str	r3, [r2, #8]
 8007fe8:	4ba7      	ldr	r3, [pc, #668]	@ (8008288 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007fea:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ff0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ff4:	49a4      	ldr	r1, [pc, #656]	@ (8008288 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f003 0310 	and.w	r3, r3, #16
 8008002:	2b00      	cmp	r3, #0
 8008004:	d010      	beq.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008006:	4ba0      	ldr	r3, [pc, #640]	@ (8008288 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008008:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800800c:	4a9e      	ldr	r2, [pc, #632]	@ (8008288 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800800e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008012:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8008016:	4b9c      	ldr	r3, [pc, #624]	@ (8008288 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008018:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008020:	4999      	ldr	r1, [pc, #612]	@ (8008288 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008022:	4313      	orrs	r3, r2
 8008024:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008030:	2b00      	cmp	r3, #0
 8008032:	d00a      	beq.n	800804a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008034:	4b94      	ldr	r3, [pc, #592]	@ (8008288 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008036:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800803a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008042:	4991      	ldr	r1, [pc, #580]	@ (8008288 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008044:	4313      	orrs	r3, r2
 8008046:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008052:	2b00      	cmp	r3, #0
 8008054:	d00a      	beq.n	800806c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008056:	4b8c      	ldr	r3, [pc, #560]	@ (8008288 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008058:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800805c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008064:	4988      	ldr	r1, [pc, #544]	@ (8008288 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008066:	4313      	orrs	r3, r2
 8008068:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008074:	2b00      	cmp	r3, #0
 8008076:	d00a      	beq.n	800808e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008078:	4b83      	ldr	r3, [pc, #524]	@ (8008288 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800807a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800807e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008086:	4980      	ldr	r1, [pc, #512]	@ (8008288 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008088:	4313      	orrs	r3, r2
 800808a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008096:	2b00      	cmp	r3, #0
 8008098:	d00a      	beq.n	80080b0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800809a:	4b7b      	ldr	r3, [pc, #492]	@ (8008288 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800809c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080a0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80080a8:	4977      	ldr	r1, [pc, #476]	@ (8008288 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080aa:	4313      	orrs	r3, r2
 80080ac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d00a      	beq.n	80080d2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80080bc:	4b72      	ldr	r3, [pc, #456]	@ (8008288 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080c2:	f023 0203 	bic.w	r2, r3, #3
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080ca:	496f      	ldr	r1, [pc, #444]	@ (8008288 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080cc:	4313      	orrs	r3, r2
 80080ce:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d00a      	beq.n	80080f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80080de:	4b6a      	ldr	r3, [pc, #424]	@ (8008288 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080e4:	f023 020c 	bic.w	r2, r3, #12
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80080ec:	4966      	ldr	r1, [pc, #408]	@ (8008288 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080ee:	4313      	orrs	r3, r2
 80080f0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d00a      	beq.n	8008116 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008100:	4b61      	ldr	r3, [pc, #388]	@ (8008288 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008102:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008106:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800810e:	495e      	ldr	r1, [pc, #376]	@ (8008288 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008110:	4313      	orrs	r3, r2
 8008112:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800811e:	2b00      	cmp	r3, #0
 8008120:	d00a      	beq.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008122:	4b59      	ldr	r3, [pc, #356]	@ (8008288 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008124:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008128:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008130:	4955      	ldr	r1, [pc, #340]	@ (8008288 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008132:	4313      	orrs	r3, r2
 8008134:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008140:	2b00      	cmp	r3, #0
 8008142:	d00a      	beq.n	800815a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008144:	4b50      	ldr	r3, [pc, #320]	@ (8008288 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008146:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800814a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008152:	494d      	ldr	r1, [pc, #308]	@ (8008288 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008154:	4313      	orrs	r3, r2
 8008156:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008162:	2b00      	cmp	r3, #0
 8008164:	d00a      	beq.n	800817c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8008166:	4b48      	ldr	r3, [pc, #288]	@ (8008288 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008168:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800816c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008174:	4944      	ldr	r1, [pc, #272]	@ (8008288 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008176:	4313      	orrs	r3, r2
 8008178:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008184:	2b00      	cmp	r3, #0
 8008186:	d00a      	beq.n	800819e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8008188:	4b3f      	ldr	r3, [pc, #252]	@ (8008288 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800818a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800818e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008196:	493c      	ldr	r1, [pc, #240]	@ (8008288 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008198:	4313      	orrs	r3, r2
 800819a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d00a      	beq.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80081aa:	4b37      	ldr	r3, [pc, #220]	@ (8008288 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80081ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081b0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80081b8:	4933      	ldr	r1, [pc, #204]	@ (8008288 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80081ba:	4313      	orrs	r3, r2
 80081bc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d00a      	beq.n	80081e2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80081cc:	4b2e      	ldr	r3, [pc, #184]	@ (8008288 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80081ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081d2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80081da:	492b      	ldr	r1, [pc, #172]	@ (8008288 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80081dc:	4313      	orrs	r3, r2
 80081de:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d011      	beq.n	8008212 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80081ee:	4b26      	ldr	r3, [pc, #152]	@ (8008288 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80081f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081f4:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80081fc:	4922      	ldr	r1, [pc, #136]	@ (8008288 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80081fe:	4313      	orrs	r3, r2
 8008200:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008208:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800820c:	d101      	bne.n	8008212 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800820e:	2301      	movs	r3, #1
 8008210:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f003 0308 	and.w	r3, r3, #8
 800821a:	2b00      	cmp	r3, #0
 800821c:	d001      	beq.n	8008222 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800821e:	2301      	movs	r3, #1
 8008220:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800822a:	2b00      	cmp	r3, #0
 800822c:	d00a      	beq.n	8008244 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800822e:	4b16      	ldr	r3, [pc, #88]	@ (8008288 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008230:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008234:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800823c:	4912      	ldr	r1, [pc, #72]	@ (8008288 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800823e:	4313      	orrs	r3, r2
 8008240:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800824c:	2b00      	cmp	r3, #0
 800824e:	d00b      	beq.n	8008268 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008250:	4b0d      	ldr	r3, [pc, #52]	@ (8008288 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008252:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008256:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008260:	4909      	ldr	r1, [pc, #36]	@ (8008288 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008262:	4313      	orrs	r3, r2
 8008264:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008268:	69fb      	ldr	r3, [r7, #28]
 800826a:	2b01      	cmp	r3, #1
 800826c:	d006      	beq.n	800827c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008276:	2b00      	cmp	r3, #0
 8008278:	f000 80d9 	beq.w	800842e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800827c:	4b02      	ldr	r3, [pc, #8]	@ (8008288 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	4a01      	ldr	r2, [pc, #4]	@ (8008288 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008282:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008286:	e001      	b.n	800828c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8008288:	40023800 	.word	0x40023800
 800828c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800828e:	f7fd f955 	bl	800553c <HAL_GetTick>
 8008292:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008294:	e008      	b.n	80082a8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008296:	f7fd f951 	bl	800553c <HAL_GetTick>
 800829a:	4602      	mov	r2, r0
 800829c:	697b      	ldr	r3, [r7, #20]
 800829e:	1ad3      	subs	r3, r2, r3
 80082a0:	2b64      	cmp	r3, #100	@ 0x64
 80082a2:	d901      	bls.n	80082a8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80082a4:	2303      	movs	r3, #3
 80082a6:	e194      	b.n	80085d2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80082a8:	4b6c      	ldr	r3, [pc, #432]	@ (800845c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d1f0      	bne.n	8008296 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f003 0301 	and.w	r3, r3, #1
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d021      	beq.n	8008304 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d11d      	bne.n	8008304 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80082c8:	4b64      	ldr	r3, [pc, #400]	@ (800845c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80082ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80082ce:	0c1b      	lsrs	r3, r3, #16
 80082d0:	f003 0303 	and.w	r3, r3, #3
 80082d4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80082d6:	4b61      	ldr	r3, [pc, #388]	@ (800845c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80082d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80082dc:	0e1b      	lsrs	r3, r3, #24
 80082de:	f003 030f 	and.w	r3, r3, #15
 80082e2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	685b      	ldr	r3, [r3, #4]
 80082e8:	019a      	lsls	r2, r3, #6
 80082ea:	693b      	ldr	r3, [r7, #16]
 80082ec:	041b      	lsls	r3, r3, #16
 80082ee:	431a      	orrs	r2, r3
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	061b      	lsls	r3, r3, #24
 80082f4:	431a      	orrs	r2, r3
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	689b      	ldr	r3, [r3, #8]
 80082fa:	071b      	lsls	r3, r3, #28
 80082fc:	4957      	ldr	r1, [pc, #348]	@ (800845c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80082fe:	4313      	orrs	r3, r2
 8008300:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800830c:	2b00      	cmp	r3, #0
 800830e:	d004      	beq.n	800831a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008314:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008318:	d00a      	beq.n	8008330 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008322:	2b00      	cmp	r3, #0
 8008324:	d02e      	beq.n	8008384 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800832a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800832e:	d129      	bne.n	8008384 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008330:	4b4a      	ldr	r3, [pc, #296]	@ (800845c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008332:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008336:	0c1b      	lsrs	r3, r3, #16
 8008338:	f003 0303 	and.w	r3, r3, #3
 800833c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800833e:	4b47      	ldr	r3, [pc, #284]	@ (800845c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008340:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008344:	0f1b      	lsrs	r3, r3, #28
 8008346:	f003 0307 	and.w	r3, r3, #7
 800834a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	685b      	ldr	r3, [r3, #4]
 8008350:	019a      	lsls	r2, r3, #6
 8008352:	693b      	ldr	r3, [r7, #16]
 8008354:	041b      	lsls	r3, r3, #16
 8008356:	431a      	orrs	r2, r3
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	68db      	ldr	r3, [r3, #12]
 800835c:	061b      	lsls	r3, r3, #24
 800835e:	431a      	orrs	r2, r3
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	071b      	lsls	r3, r3, #28
 8008364:	493d      	ldr	r1, [pc, #244]	@ (800845c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008366:	4313      	orrs	r3, r2
 8008368:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800836c:	4b3b      	ldr	r3, [pc, #236]	@ (800845c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800836e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008372:	f023 021f 	bic.w	r2, r3, #31
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800837a:	3b01      	subs	r3, #1
 800837c:	4937      	ldr	r1, [pc, #220]	@ (800845c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800837e:	4313      	orrs	r3, r2
 8008380:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800838c:	2b00      	cmp	r3, #0
 800838e:	d01d      	beq.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008390:	4b32      	ldr	r3, [pc, #200]	@ (800845c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008392:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008396:	0e1b      	lsrs	r3, r3, #24
 8008398:	f003 030f 	and.w	r3, r3, #15
 800839c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800839e:	4b2f      	ldr	r3, [pc, #188]	@ (800845c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80083a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80083a4:	0f1b      	lsrs	r3, r3, #28
 80083a6:	f003 0307 	and.w	r3, r3, #7
 80083aa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	685b      	ldr	r3, [r3, #4]
 80083b0:	019a      	lsls	r2, r3, #6
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	691b      	ldr	r3, [r3, #16]
 80083b6:	041b      	lsls	r3, r3, #16
 80083b8:	431a      	orrs	r2, r3
 80083ba:	693b      	ldr	r3, [r7, #16]
 80083bc:	061b      	lsls	r3, r3, #24
 80083be:	431a      	orrs	r2, r3
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	071b      	lsls	r3, r3, #28
 80083c4:	4925      	ldr	r1, [pc, #148]	@ (800845c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80083c6:	4313      	orrs	r3, r2
 80083c8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d011      	beq.n	80083fc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	685b      	ldr	r3, [r3, #4]
 80083dc:	019a      	lsls	r2, r3, #6
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	691b      	ldr	r3, [r3, #16]
 80083e2:	041b      	lsls	r3, r3, #16
 80083e4:	431a      	orrs	r2, r3
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	68db      	ldr	r3, [r3, #12]
 80083ea:	061b      	lsls	r3, r3, #24
 80083ec:	431a      	orrs	r2, r3
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	689b      	ldr	r3, [r3, #8]
 80083f2:	071b      	lsls	r3, r3, #28
 80083f4:	4919      	ldr	r1, [pc, #100]	@ (800845c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80083f6:	4313      	orrs	r3, r2
 80083f8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80083fc:	4b17      	ldr	r3, [pc, #92]	@ (800845c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	4a16      	ldr	r2, [pc, #88]	@ (800845c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008402:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008406:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008408:	f7fd f898 	bl	800553c <HAL_GetTick>
 800840c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800840e:	e008      	b.n	8008422 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008410:	f7fd f894 	bl	800553c <HAL_GetTick>
 8008414:	4602      	mov	r2, r0
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	1ad3      	subs	r3, r2, r3
 800841a:	2b64      	cmp	r3, #100	@ 0x64
 800841c:	d901      	bls.n	8008422 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800841e:	2303      	movs	r3, #3
 8008420:	e0d7      	b.n	80085d2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008422:	4b0e      	ldr	r3, [pc, #56]	@ (800845c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800842a:	2b00      	cmp	r3, #0
 800842c:	d0f0      	beq.n	8008410 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800842e:	69bb      	ldr	r3, [r7, #24]
 8008430:	2b01      	cmp	r3, #1
 8008432:	f040 80cd 	bne.w	80085d0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008436:	4b09      	ldr	r3, [pc, #36]	@ (800845c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4a08      	ldr	r2, [pc, #32]	@ (800845c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800843c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008440:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008442:	f7fd f87b 	bl	800553c <HAL_GetTick>
 8008446:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008448:	e00a      	b.n	8008460 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800844a:	f7fd f877 	bl	800553c <HAL_GetTick>
 800844e:	4602      	mov	r2, r0
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	1ad3      	subs	r3, r2, r3
 8008454:	2b64      	cmp	r3, #100	@ 0x64
 8008456:	d903      	bls.n	8008460 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008458:	2303      	movs	r3, #3
 800845a:	e0ba      	b.n	80085d2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800845c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008460:	4b5e      	ldr	r3, [pc, #376]	@ (80085dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008468:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800846c:	d0ed      	beq.n	800844a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008476:	2b00      	cmp	r3, #0
 8008478:	d003      	beq.n	8008482 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800847e:	2b00      	cmp	r3, #0
 8008480:	d009      	beq.n	8008496 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800848a:	2b00      	cmp	r3, #0
 800848c:	d02e      	beq.n	80084ec <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008492:	2b00      	cmp	r3, #0
 8008494:	d12a      	bne.n	80084ec <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008496:	4b51      	ldr	r3, [pc, #324]	@ (80085dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008498:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800849c:	0c1b      	lsrs	r3, r3, #16
 800849e:	f003 0303 	and.w	r3, r3, #3
 80084a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80084a4:	4b4d      	ldr	r3, [pc, #308]	@ (80085dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80084a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084aa:	0f1b      	lsrs	r3, r3, #28
 80084ac:	f003 0307 	and.w	r3, r3, #7
 80084b0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	695b      	ldr	r3, [r3, #20]
 80084b6:	019a      	lsls	r2, r3, #6
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	041b      	lsls	r3, r3, #16
 80084bc:	431a      	orrs	r2, r3
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	699b      	ldr	r3, [r3, #24]
 80084c2:	061b      	lsls	r3, r3, #24
 80084c4:	431a      	orrs	r2, r3
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	071b      	lsls	r3, r3, #28
 80084ca:	4944      	ldr	r1, [pc, #272]	@ (80085dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80084cc:	4313      	orrs	r3, r2
 80084ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80084d2:	4b42      	ldr	r3, [pc, #264]	@ (80085dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80084d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80084d8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084e0:	3b01      	subs	r3, #1
 80084e2:	021b      	lsls	r3, r3, #8
 80084e4:	493d      	ldr	r1, [pc, #244]	@ (80085dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80084e6:	4313      	orrs	r3, r2
 80084e8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d022      	beq.n	800853e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80084fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008500:	d11d      	bne.n	800853e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008502:	4b36      	ldr	r3, [pc, #216]	@ (80085dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008504:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008508:	0e1b      	lsrs	r3, r3, #24
 800850a:	f003 030f 	and.w	r3, r3, #15
 800850e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008510:	4b32      	ldr	r3, [pc, #200]	@ (80085dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008512:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008516:	0f1b      	lsrs	r3, r3, #28
 8008518:	f003 0307 	and.w	r3, r3, #7
 800851c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	695b      	ldr	r3, [r3, #20]
 8008522:	019a      	lsls	r2, r3, #6
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6a1b      	ldr	r3, [r3, #32]
 8008528:	041b      	lsls	r3, r3, #16
 800852a:	431a      	orrs	r2, r3
 800852c:	693b      	ldr	r3, [r7, #16]
 800852e:	061b      	lsls	r3, r3, #24
 8008530:	431a      	orrs	r2, r3
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	071b      	lsls	r3, r3, #28
 8008536:	4929      	ldr	r1, [pc, #164]	@ (80085dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008538:	4313      	orrs	r3, r2
 800853a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f003 0308 	and.w	r3, r3, #8
 8008546:	2b00      	cmp	r3, #0
 8008548:	d028      	beq.n	800859c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800854a:	4b24      	ldr	r3, [pc, #144]	@ (80085dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800854c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008550:	0e1b      	lsrs	r3, r3, #24
 8008552:	f003 030f 	and.w	r3, r3, #15
 8008556:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008558:	4b20      	ldr	r3, [pc, #128]	@ (80085dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800855a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800855e:	0c1b      	lsrs	r3, r3, #16
 8008560:	f003 0303 	and.w	r3, r3, #3
 8008564:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	695b      	ldr	r3, [r3, #20]
 800856a:	019a      	lsls	r2, r3, #6
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	041b      	lsls	r3, r3, #16
 8008570:	431a      	orrs	r2, r3
 8008572:	693b      	ldr	r3, [r7, #16]
 8008574:	061b      	lsls	r3, r3, #24
 8008576:	431a      	orrs	r2, r3
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	69db      	ldr	r3, [r3, #28]
 800857c:	071b      	lsls	r3, r3, #28
 800857e:	4917      	ldr	r1, [pc, #92]	@ (80085dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008580:	4313      	orrs	r3, r2
 8008582:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008586:	4b15      	ldr	r3, [pc, #84]	@ (80085dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008588:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800858c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008594:	4911      	ldr	r1, [pc, #68]	@ (80085dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008596:	4313      	orrs	r3, r2
 8008598:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800859c:	4b0f      	ldr	r3, [pc, #60]	@ (80085dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4a0e      	ldr	r2, [pc, #56]	@ (80085dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80085a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80085a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80085a8:	f7fc ffc8 	bl	800553c <HAL_GetTick>
 80085ac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80085ae:	e008      	b.n	80085c2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80085b0:	f7fc ffc4 	bl	800553c <HAL_GetTick>
 80085b4:	4602      	mov	r2, r0
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	1ad3      	subs	r3, r2, r3
 80085ba:	2b64      	cmp	r3, #100	@ 0x64
 80085bc:	d901      	bls.n	80085c2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80085be:	2303      	movs	r3, #3
 80085c0:	e007      	b.n	80085d2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80085c2:	4b06      	ldr	r3, [pc, #24]	@ (80085dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80085ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80085ce:	d1ef      	bne.n	80085b0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80085d0:	2300      	movs	r3, #0
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	3720      	adds	r7, #32
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd80      	pop	{r7, pc}
 80085da:	bf00      	nop
 80085dc:	40023800 	.word	0x40023800

080085e0 <HAL_RCCEx_GetPeriphCLKConfig>:
  *         RCC configuration registers.
  * @param  PeriphClkInit pointer to the configured RCC_PeriphCLKInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80085e0:	b480      	push	{r7}
 80085e2:	b085      	sub	sp, #20
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0;
 80085e8:	2300      	movs	r3, #0
 80085ea:	60fb      	str	r3, [r7, #12]
                                        RCC_PERIPHCLK_USART6   | RCC_PERIPHCLK_UART7    |\
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48    | RCC_PERIPHCLK_SDMMC2   |\
                                        RCC_PERIPHCLK_DFSDM1   | RCC_PERIPHCLK_DFSDM1_AUDIO;
#else
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	4a80      	ldr	r2, [pc, #512]	@ (80087f0 <HAL_RCCEx_GetPeriphCLKConfig+0x210>)
 80085f0:	601a      	str	r2, [r3, #0]
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 80085f2:	4b80      	ldr	r3, [pc, #512]	@ (80087f4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80085f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80085f8:	099b      	lsrs	r3, r3, #6
 80085fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008602:	4b7c      	ldr	r3, [pc, #496]	@ (80087f4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8008604:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008608:	0c1b      	lsrs	r3, r3, #16
 800860a:	f003 0203 	and.w	r2, r3, #3
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008612:	4b78      	ldr	r3, [pc, #480]	@ (80087f4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8008614:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008618:	0e1b      	lsrs	r3, r3, #24
 800861a:	f003 020f 	and.w	r2, r3, #15
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008622:	4b74      	ldr	r3, [pc, #464]	@ (80087f4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8008624:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008628:	0f1b      	lsrs	r3, r3, #28
 800862a:	f003 0207 	and.w	r2, r3, #7
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	609a      	str	r2, [r3, #8]

  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLSAICFGR_PLLSAIN_Pos);
 8008632:	4b70      	ldr	r3, [pc, #448]	@ (80087f4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8008634:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008638:	099b      	lsrs	r3, r3, #6
 800863a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008642:	4b6c      	ldr	r3, [pc, #432]	@ (80087f4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8008644:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008648:	0c1b      	lsrs	r3, r3, #16
 800864a:	f003 0203 	and.w	r2, r3, #3
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	621a      	str	r2, [r3, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008652:	4b68      	ldr	r3, [pc, #416]	@ (80087f4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8008654:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008658:	0e1b      	lsrs	r3, r3, #24
 800865a:	f003 020f 	and.w	r2, r3, #15
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	619a      	str	r2, [r3, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008662:	4b64      	ldr	r3, [pc, #400]	@ (80087f4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8008664:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008668:	0f1b      	lsrs	r3, r3, #28
 800866a:	f003 0207 	and.w	r2, r3, #7
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	61da      	str	r2, [r3, #28]

  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> RCC_DCKCFGR1_PLLI2SDIVQ_Pos);
 8008672:	4b60      	ldr	r3, [pc, #384]	@ (80087f4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8008674:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008678:	f003 021f 	and.w	r2, r3, #31
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	625a      	str	r2, [r3, #36]	@ 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> RCC_DCKCFGR1_PLLSAIDIVQ_Pos);
 8008680:	4b5c      	ldr	r3, [pc, #368]	@ (80087f4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8008682:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008686:	0a1b      	lsrs	r3, r3, #8
 8008688:	f003 021f 	and.w	r2, r3, #31
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	629a      	str	r2, [r3, #40]	@ 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> RCC_DCKCFGR1_PLLSAIDIVR_Pos);
 8008690:	4b58      	ldr	r3, [pc, #352]	@ (80087f4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8008692:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008696:	0c1b      	lsrs	r3, r3, #16
 8008698:	f003 0203 	and.w	r2, r3, #3
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 80086a0:	4b54      	ldr	r3, [pc, #336]	@ (80087f4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80086a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80086a6:	f403 1240 	and.w	r2, r3, #3145728	@ 0x300000
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 80086ae:	4b51      	ldr	r3, [pc, #324]	@ (80087f4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80086b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80086b4:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
 80086bc:	4b4d      	ldr	r3, [pc, #308]	@ (80087f4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80086be:	689b      	ldr	r3, [r3, #8]
 80086c0:	f403 0200 	and.w	r2, r3, #8388608	@ 0x800000
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 80086c8:	4b4a      	ldr	r3, [pc, #296]	@ (80087f4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80086ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086ce:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
 80086d6:	4b47      	ldr	r3, [pc, #284]	@ (80087f4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80086d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086dc:	f403 2240 	and.w	r2, r3, #786432	@ 0xc0000
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
 80086e4:	4b43      	ldr	r3, [pc, #268]	@ (80087f4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80086e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086ea:	f403 1240 	and.w	r2, r3, #3145728	@ 0x300000
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
 80086f2:	4b40      	ldr	r3, [pc, #256]	@ (80087f4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80086f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086f8:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 8008700:	4b3c      	ldr	r3, [pc, #240]	@ (80087f4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8008702:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008706:	f003 0203 	and.w	r2, r3, #3
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 800870e:	4b39      	ldr	r3, [pc, #228]	@ (80087f4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8008710:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008714:	f003 020c 	and.w	r2, r3, #12
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 800871c:	4b35      	ldr	r3, [pc, #212]	@ (80087f4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800871e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008722:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
 800872a:	4b32      	ldr	r3, [pc, #200]	@ (80087f4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800872c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008730:	f003 02c0 	and.w	r2, r3, #192	@ 0xc0
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
 8008738:	4b2e      	ldr	r3, [pc, #184]	@ (80087f4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800873a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800873e:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
 8008746:	4b2b      	ldr	r3, [pc, #172]	@ (80087f4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8008748:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800874c:	f403 6240 	and.w	r2, r3, #3072	@ 0xc00
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
 8008754:	4b27      	ldr	r3, [pc, #156]	@ (80087f4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8008756:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800875a:	f403 5240 	and.w	r2, r3, #12288	@ 0x3000
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
 8008762:	4b24      	ldr	r3, [pc, #144]	@ (80087f4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8008764:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008768:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 8008770:	4b20      	ldr	r3, [pc, #128]	@ (80087f4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8008772:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008776:	f003 7240 	and.w	r2, r3, #50331648	@ 0x3000000
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 800877e:	4b1d      	ldr	r3, [pc, #116]	@ (80087f4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8008780:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008784:	f003 6280 	and.w	r2, r3, #67108864	@ 0x4000000
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 800878c:	4b19      	ldr	r3, [pc, #100]	@ (80087f4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800878e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008792:	f003 6200 	and.w	r2, r3, #134217728	@ 0x8000000
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
 800879a:	4b16      	ldr	r3, [pc, #88]	@ (80087f4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800879c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087a0:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 80087aa:	4b12      	ldr	r3, [pc, #72]	@ (80087f4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80087ac:	689b      	ldr	r3, [r3, #8]
 80087ae:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80087b2:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 80087b4:	4b0f      	ldr	r3, [pc, #60]	@ (80087f4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80087b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80087b8:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	431a      	orrs	r2, r3
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
 80087c4:	4b0b      	ldr	r3, [pc, #44]	@ (80087f4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80087c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80087ca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d103      	bne.n	80087da <HAL_RCCEx_GetPeriphCLKConfig+0x1fa>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2200      	movs	r2, #0
 80087d6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 80087d8:	e003      	b.n	80087e2 <HAL_RCCEx_GetPeriphCLKConfig+0x202>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80087e0:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80087e2:	bf00      	nop
 80087e4:	3714      	adds	r7, #20
 80087e6:	46bd      	mov	sp, r7
 80087e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ec:	4770      	bx	lr
 80087ee:	bf00      	nop
 80087f0:	00fffff1 	.word	0x00fffff1
 80087f4:	40023800 	.word	0x40023800

080087f8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80087f8:	b480      	push	{r7}
 80087fa:	b087      	sub	sp, #28
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8008800:	2300      	movs	r3, #0
 8008802:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8008804:	2300      	movs	r3, #0
 8008806:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8008808:	2300      	movs	r3, #0
 800880a:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 800880c:	2300      	movs	r3, #0
 800880e:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8008816:	f040 808d 	bne.w	8008934 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 800881a:	4b93      	ldr	r3, [pc, #588]	@ (8008a68 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800881c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008820:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8008828:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008830:	d07c      	beq.n	800892c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008838:	d87b      	bhi.n	8008932 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d004      	beq.n	800884a <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008846:	d039      	beq.n	80088bc <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8008848:	e073      	b.n	8008932 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800884a:	4b87      	ldr	r3, [pc, #540]	@ (8008a68 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800884c:	685b      	ldr	r3, [r3, #4]
 800884e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008852:	2b00      	cmp	r3, #0
 8008854:	d108      	bne.n	8008868 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008856:	4b84      	ldr	r3, [pc, #528]	@ (8008a68 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008858:	685b      	ldr	r3, [r3, #4]
 800885a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800885e:	4a83      	ldr	r2, [pc, #524]	@ (8008a6c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8008860:	fbb2 f3f3 	udiv	r3, r2, r3
 8008864:	613b      	str	r3, [r7, #16]
 8008866:	e007      	b.n	8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008868:	4b7f      	ldr	r3, [pc, #508]	@ (8008a68 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800886a:	685b      	ldr	r3, [r3, #4]
 800886c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008870:	4a7f      	ldr	r2, [pc, #508]	@ (8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008872:	fbb2 f3f3 	udiv	r3, r2, r3
 8008876:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8008878:	4b7b      	ldr	r3, [pc, #492]	@ (8008a68 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800887a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800887e:	0e1b      	lsrs	r3, r3, #24
 8008880:	f003 030f 	and.w	r3, r3, #15
 8008884:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8008886:	4b78      	ldr	r3, [pc, #480]	@ (8008a68 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008888:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800888c:	099b      	lsrs	r3, r3, #6
 800888e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008892:	693a      	ldr	r2, [r7, #16]
 8008894:	fb03 f202 	mul.w	r2, r3, r2
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	fbb2 f3f3 	udiv	r3, r2, r3
 800889e:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80088a0:	4b71      	ldr	r3, [pc, #452]	@ (8008a68 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80088a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80088a6:	0a1b      	lsrs	r3, r3, #8
 80088a8:	f003 031f 	and.w	r3, r3, #31
 80088ac:	3301      	adds	r3, #1
 80088ae:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80088b0:	697a      	ldr	r2, [r7, #20]
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80088b8:	617b      	str	r3, [r7, #20]
        break;
 80088ba:	e03b      	b.n	8008934 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80088bc:	4b6a      	ldr	r3, [pc, #424]	@ (8008a68 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80088be:	685b      	ldr	r3, [r3, #4]
 80088c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d108      	bne.n	80088da <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80088c8:	4b67      	ldr	r3, [pc, #412]	@ (8008a68 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80088ca:	685b      	ldr	r3, [r3, #4]
 80088cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80088d0:	4a66      	ldr	r2, [pc, #408]	@ (8008a6c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80088d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80088d6:	613b      	str	r3, [r7, #16]
 80088d8:	e007      	b.n	80088ea <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80088da:	4b63      	ldr	r3, [pc, #396]	@ (8008a68 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80088dc:	685b      	ldr	r3, [r3, #4]
 80088de:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80088e2:	4a63      	ldr	r2, [pc, #396]	@ (8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80088e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80088e8:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80088ea:	4b5f      	ldr	r3, [pc, #380]	@ (8008a68 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80088ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80088f0:	0e1b      	lsrs	r3, r3, #24
 80088f2:	f003 030f 	and.w	r3, r3, #15
 80088f6:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80088f8:	4b5b      	ldr	r3, [pc, #364]	@ (8008a68 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80088fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80088fe:	099b      	lsrs	r3, r3, #6
 8008900:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008904:	693a      	ldr	r2, [r7, #16]
 8008906:	fb03 f202 	mul.w	r2, r3, r2
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008910:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8008912:	4b55      	ldr	r3, [pc, #340]	@ (8008a68 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008914:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008918:	f003 031f 	and.w	r3, r3, #31
 800891c:	3301      	adds	r3, #1
 800891e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008920:	697a      	ldr	r2, [r7, #20]
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	fbb2 f3f3 	udiv	r3, r2, r3
 8008928:	617b      	str	r3, [r7, #20]
        break;
 800892a:	e003      	b.n	8008934 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 800892c:	4b51      	ldr	r3, [pc, #324]	@ (8008a74 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800892e:	617b      	str	r3, [r7, #20]
        break;
 8008930:	e000      	b.n	8008934 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 8008932:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800893a:	f040 808d 	bne.w	8008a58 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 800893e:	4b4a      	ldr	r3, [pc, #296]	@ (8008a68 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008940:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008944:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800894c:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008954:	d07c      	beq.n	8008a50 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8008956:	68bb      	ldr	r3, [r7, #8]
 8008958:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800895c:	d87b      	bhi.n	8008a56 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d004      	beq.n	800896e <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800896a:	d039      	beq.n	80089e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800896c:	e073      	b.n	8008a56 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800896e:	4b3e      	ldr	r3, [pc, #248]	@ (8008a68 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008970:	685b      	ldr	r3, [r3, #4]
 8008972:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008976:	2b00      	cmp	r3, #0
 8008978:	d108      	bne.n	800898c <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800897a:	4b3b      	ldr	r3, [pc, #236]	@ (8008a68 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800897c:	685b      	ldr	r3, [r3, #4]
 800897e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008982:	4a3a      	ldr	r2, [pc, #232]	@ (8008a6c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8008984:	fbb2 f3f3 	udiv	r3, r2, r3
 8008988:	613b      	str	r3, [r7, #16]
 800898a:	e007      	b.n	800899c <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800898c:	4b36      	ldr	r3, [pc, #216]	@ (8008a68 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800898e:	685b      	ldr	r3, [r3, #4]
 8008990:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008994:	4a36      	ldr	r2, [pc, #216]	@ (8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008996:	fbb2 f3f3 	udiv	r3, r2, r3
 800899a:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800899c:	4b32      	ldr	r3, [pc, #200]	@ (8008a68 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800899e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089a2:	0e1b      	lsrs	r3, r3, #24
 80089a4:	f003 030f 	and.w	r3, r3, #15
 80089a8:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80089aa:	4b2f      	ldr	r3, [pc, #188]	@ (8008a68 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80089ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089b0:	099b      	lsrs	r3, r3, #6
 80089b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089b6:	693a      	ldr	r2, [r7, #16]
 80089b8:	fb03 f202 	mul.w	r2, r3, r2
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	fbb2 f3f3 	udiv	r3, r2, r3
 80089c2:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80089c4:	4b28      	ldr	r3, [pc, #160]	@ (8008a68 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80089c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80089ca:	0a1b      	lsrs	r3, r3, #8
 80089cc:	f003 031f 	and.w	r3, r3, #31
 80089d0:	3301      	adds	r3, #1
 80089d2:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80089d4:	697a      	ldr	r2, [r7, #20]
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80089dc:	617b      	str	r3, [r7, #20]
        break;
 80089de:	e03b      	b.n	8008a58 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80089e0:	4b21      	ldr	r3, [pc, #132]	@ (8008a68 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80089e2:	685b      	ldr	r3, [r3, #4]
 80089e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d108      	bne.n	80089fe <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80089ec:	4b1e      	ldr	r3, [pc, #120]	@ (8008a68 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80089ee:	685b      	ldr	r3, [r3, #4]
 80089f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80089f4:	4a1d      	ldr	r2, [pc, #116]	@ (8008a6c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80089f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80089fa:	613b      	str	r3, [r7, #16]
 80089fc:	e007      	b.n	8008a0e <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80089fe:	4b1a      	ldr	r3, [pc, #104]	@ (8008a68 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008a00:	685b      	ldr	r3, [r3, #4]
 8008a02:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008a06:	4a1a      	ldr	r2, [pc, #104]	@ (8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a0c:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8008a0e:	4b16      	ldr	r3, [pc, #88]	@ (8008a68 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008a10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008a14:	0e1b      	lsrs	r3, r3, #24
 8008a16:	f003 030f 	and.w	r3, r3, #15
 8008a1a:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8008a1c:	4b12      	ldr	r3, [pc, #72]	@ (8008a68 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008a1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008a22:	099b      	lsrs	r3, r3, #6
 8008a24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a28:	693a      	ldr	r2, [r7, #16]
 8008a2a:	fb03 f202 	mul.w	r2, r3, r2
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a34:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8008a36:	4b0c      	ldr	r3, [pc, #48]	@ (8008a68 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008a38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008a3c:	f003 031f 	and.w	r3, r3, #31
 8008a40:	3301      	adds	r3, #1
 8008a42:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008a44:	697a      	ldr	r2, [r7, #20]
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a4c:	617b      	str	r3, [r7, #20]
        break;
 8008a4e:	e003      	b.n	8008a58 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 8008a50:	4b08      	ldr	r3, [pc, #32]	@ (8008a74 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8008a52:	617b      	str	r3, [r7, #20]
        break;
 8008a54:	e000      	b.n	8008a58 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 8008a56:	bf00      	nop
      }
    }
  }

  return frequency;
 8008a58:	697b      	ldr	r3, [r7, #20]
}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	371c      	adds	r7, #28
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a64:	4770      	bx	lr
 8008a66:	bf00      	nop
 8008a68:	40023800 	.word	0x40023800
 8008a6c:	00f42400 	.word	0x00f42400
 8008a70:	017d7840 	.word	0x017d7840
 8008a74:	00bb8000 	.word	0x00bb8000

08008a78 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b088      	sub	sp, #32
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8008a80:	2300      	movs	r3, #0
 8008a82:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8008a84:	2300      	movs	r3, #0
 8008a86:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8008a88:	2300      	movs	r3, #0
 8008a8a:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d101      	bne.n	8008a96 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8008a92:	2301      	movs	r3, #1
 8008a94:	e156      	b.n	8008d44 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8008a9c:	b2db      	uxtb	r3, r3
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d106      	bne.n	8008ab0 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f7f9 fde6 	bl	800267c <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2202      	movs	r2, #2
 8008ab4:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f000 fad5 	bl	8009068 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	68db      	ldr	r3, [r3, #12]
 8008ac2:	2b02      	cmp	r3, #2
 8008ac4:	d00c      	beq.n	8008ae0 <HAL_SAI_Init+0x68>
 8008ac6:	2b02      	cmp	r3, #2
 8008ac8:	d80d      	bhi.n	8008ae6 <HAL_SAI_Init+0x6e>
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d002      	beq.n	8008ad4 <HAL_SAI_Init+0x5c>
 8008ace:	2b01      	cmp	r3, #1
 8008ad0:	d003      	beq.n	8008ada <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 8008ad2:	e008      	b.n	8008ae6 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	61fb      	str	r3, [r7, #28]
      break;
 8008ad8:	e006      	b.n	8008ae8 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8008ada:	2310      	movs	r3, #16
 8008adc:	61fb      	str	r3, [r7, #28]
      break;
 8008ade:	e003      	b.n	8008ae8 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8008ae0:	2320      	movs	r3, #32
 8008ae2:	61fb      	str	r3, [r7, #28]
      break;
 8008ae4:	e000      	b.n	8008ae8 <HAL_SAI_Init+0x70>
      break;
 8008ae6:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	689b      	ldr	r3, [r3, #8]
 8008aec:	2b03      	cmp	r3, #3
 8008aee:	d81e      	bhi.n	8008b2e <HAL_SAI_Init+0xb6>
 8008af0:	a201      	add	r2, pc, #4	@ (adr r2, 8008af8 <HAL_SAI_Init+0x80>)
 8008af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008af6:	bf00      	nop
 8008af8:	08008b09 	.word	0x08008b09
 8008afc:	08008b0f 	.word	0x08008b0f
 8008b00:	08008b17 	.word	0x08008b17
 8008b04:	08008b1f 	.word	0x08008b1f
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 8008b08:	2300      	movs	r3, #0
 8008b0a:	617b      	str	r3, [r7, #20]
    }
    break;
 8008b0c:	e010      	b.n	8008b30 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8008b0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008b12:	617b      	str	r3, [r7, #20]
    }
    break;
 8008b14:	e00c      	b.n	8008b30 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8008b16:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008b1a:	617b      	str	r3, [r7, #20]
    }
    break;
 8008b1c:	e008      	b.n	8008b30 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8008b1e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008b22:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8008b24:	69fb      	ldr	r3, [r7, #28]
 8008b26:	f043 0301 	orr.w	r3, r3, #1
 8008b2a:	61fb      	str	r3, [r7, #28]
    }
    break;
 8008b2c:	e000      	b.n	8008b30 <HAL_SAI_Init+0xb8>
    default:
      break;
 8008b2e:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	4a85      	ldr	r2, [pc, #532]	@ (8008d4c <HAL_SAI_Init+0x2d4>)
 8008b36:	4293      	cmp	r3, r2
 8008b38:	d004      	beq.n	8008b44 <HAL_SAI_Init+0xcc>
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	4a84      	ldr	r2, [pc, #528]	@ (8008d50 <HAL_SAI_Init+0x2d8>)
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d103      	bne.n	8008b4c <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8008b44:	4a83      	ldr	r2, [pc, #524]	@ (8008d54 <HAL_SAI_Init+0x2dc>)
 8008b46:	69fb      	ldr	r3, [r7, #28]
 8008b48:	6013      	str	r3, [r2, #0]
 8008b4a:	e002      	b.n	8008b52 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8008b4c:	4a82      	ldr	r2, [pc, #520]	@ (8008d58 <HAL_SAI_Init+0x2e0>)
 8008b4e:	69fb      	ldr	r3, [r7, #28]
 8008b50:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	69db      	ldr	r3, [r3, #28]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d04c      	beq.n	8008bf4 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	4a7a      	ldr	r2, [pc, #488]	@ (8008d4c <HAL_SAI_Init+0x2d4>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d004      	beq.n	8008b72 <HAL_SAI_Init+0xfa>
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	4a78      	ldr	r2, [pc, #480]	@ (8008d50 <HAL_SAI_Init+0x2d8>)
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d104      	bne.n	8008b7c <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8008b72:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8008b76:	f7ff fe3f 	bl	80087f8 <HAL_RCCEx_GetPeriphCLKFreq>
 8008b7a:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	4a76      	ldr	r2, [pc, #472]	@ (8008d5c <HAL_SAI_Init+0x2e4>)
 8008b82:	4293      	cmp	r3, r2
 8008b84:	d004      	beq.n	8008b90 <HAL_SAI_Init+0x118>
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	4a75      	ldr	r2, [pc, #468]	@ (8008d60 <HAL_SAI_Init+0x2e8>)
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d104      	bne.n	8008b9a <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8008b90:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8008b94:	f7ff fe30 	bl	80087f8 <HAL_RCCEx_GetPeriphCLKFreq>
 8008b98:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8008b9a:	693a      	ldr	r2, [r7, #16]
 8008b9c:	4613      	mov	r3, r2
 8008b9e:	009b      	lsls	r3, r3, #2
 8008ba0:	4413      	add	r3, r2
 8008ba2:	005b      	lsls	r3, r3, #1
 8008ba4:	461a      	mov	r2, r3
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	69db      	ldr	r3, [r3, #28]
 8008baa:	025b      	lsls	r3, r3, #9
 8008bac:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bb0:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	4a6b      	ldr	r2, [pc, #428]	@ (8008d64 <HAL_SAI_Init+0x2ec>)
 8008bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8008bba:	08da      	lsrs	r2, r3, #3
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 8008bc0:	68f9      	ldr	r1, [r7, #12]
 8008bc2:	4b68      	ldr	r3, [pc, #416]	@ (8008d64 <HAL_SAI_Init+0x2ec>)
 8008bc4:	fba3 2301 	umull	r2, r3, r3, r1
 8008bc8:	08da      	lsrs	r2, r3, #3
 8008bca:	4613      	mov	r3, r2
 8008bcc:	009b      	lsls	r3, r3, #2
 8008bce:	4413      	add	r3, r2
 8008bd0:	005b      	lsls	r3, r3, #1
 8008bd2:	1aca      	subs	r2, r1, r3
 8008bd4:	2a08      	cmp	r2, #8
 8008bd6:	d904      	bls.n	8008be2 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6a1b      	ldr	r3, [r3, #32]
 8008bdc:	1c5a      	adds	r2, r3, #1
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008be6:	2b04      	cmp	r3, #4
 8008be8:	d104      	bne.n	8008bf4 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6a1b      	ldr	r3, [r3, #32]
 8008bee:	085a      	lsrs	r2, r3, #1
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	685b      	ldr	r3, [r3, #4]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d003      	beq.n	8008c04 <HAL_SAI_Init+0x18c>
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	685b      	ldr	r3, [r3, #4]
 8008c00:	2b02      	cmp	r3, #2
 8008c02:	d109      	bne.n	8008c18 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c08:	2b01      	cmp	r3, #1
 8008c0a:	d101      	bne.n	8008c10 <HAL_SAI_Init+0x198>
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	e001      	b.n	8008c14 <HAL_SAI_Init+0x19c>
 8008c10:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008c14:	61bb      	str	r3, [r7, #24]
 8008c16:	e008      	b.n	8008c2a <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c1c:	2b01      	cmp	r3, #1
 8008c1e:	d102      	bne.n	8008c26 <HAL_SAI_Init+0x1ae>
 8008c20:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008c24:	e000      	b.n	8008c28 <HAL_SAI_Init+0x1b0>
 8008c26:	2300      	movs	r3, #0
 8008c28:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	6819      	ldr	r1, [r3, #0]
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681a      	ldr	r2, [r3, #0]
 8008c34:	4b4c      	ldr	r3, [pc, #304]	@ (8008d68 <HAL_SAI_Init+0x2f0>)
 8008c36:	400b      	ands	r3, r1
 8008c38:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	6819      	ldr	r1, [r3, #0]
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	685a      	ldr	r2, [r3, #4]
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c48:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008c4e:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c54:	431a      	orrs	r2, r3
 8008c56:	69bb      	ldr	r3, [r7, #24]
 8008c58:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 8008c5a:	697b      	ldr	r3, [r7, #20]
 8008c5c:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                               \
 8008c62:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	691b      	ldr	r3, [r3, #16]
 8008c68:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008c6e:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	6a1b      	ldr	r3, [r3, #32]
 8008c74:	051b      	lsls	r3, r3, #20
 8008c76:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	430a      	orrs	r2, r1
 8008c7e:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	6859      	ldr	r1, [r3, #4]
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681a      	ldr	r2, [r3, #0]
 8008c8a:	4b38      	ldr	r3, [pc, #224]	@ (8008d6c <HAL_SAI_Init+0x2f4>)
 8008c8c:	400b      	ands	r3, r1
 8008c8e:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	6859      	ldr	r1, [r3, #4]
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	699a      	ldr	r2, [r3, #24]
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c9e:	431a      	orrs	r2, r3
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ca4:	431a      	orrs	r2, r3
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	430a      	orrs	r2, r1
 8008cac:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	6899      	ldr	r1, [r3, #8]
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681a      	ldr	r2, [r3, #0]
 8008cb8:	4b2d      	ldr	r3, [pc, #180]	@ (8008d70 <HAL_SAI_Init+0x2f8>)
 8008cba:	400b      	ands	r3, r1
 8008cbc:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	6899      	ldr	r1, [r3, #8]
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cc8:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8008cce:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 8008cd4:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 8008cda:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ce0:	3b01      	subs	r3, #1
 8008ce2:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8008ce4:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	430a      	orrs	r2, r1
 8008cec:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	68d9      	ldr	r1, [r3, #12]
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681a      	ldr	r2, [r3, #0]
 8008cf8:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8008cfc:	400b      	ands	r3, r1
 8008cfe:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	68d9      	ldr	r1, [r3, #12]
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d0e:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008d14:	041b      	lsls	r3, r3, #16
 8008d16:	431a      	orrs	r2, r3
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008d1c:	3b01      	subs	r3, #1
 8008d1e:	021b      	lsls	r3, r3, #8
 8008d20:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	430a      	orrs	r2, r1
 8008d28:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2201      	movs	r2, #1
 8008d36:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 8008d42:	2300      	movs	r3, #0
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	3720      	adds	r7, #32
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}
 8008d4c:	40015804 	.word	0x40015804
 8008d50:	40015824 	.word	0x40015824
 8008d54:	40015800 	.word	0x40015800
 8008d58:	40015c00 	.word	0x40015c00
 8008d5c:	40015c04 	.word	0x40015c04
 8008d60:	40015c24 	.word	0x40015c24
 8008d64:	cccccccd 	.word	0xcccccccd
 8008d68:	ff05c010 	.word	0xff05c010
 8008d6c:	ffff1ff0 	.word	0xffff1ff0
 8008d70:	fff88000 	.word	0xfff88000

08008d74 <HAL_SAI_DeInit>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DeInit(SAI_HandleTypeDef *hsai)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b082      	sub	sp, #8
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d101      	bne.n	8008d86 <HAL_SAI_DeInit+0x12>
  {
    return HAL_ERROR;
 8008d82:	2301      	movs	r3, #1
 8008d84:	e027      	b.n	8008dd6 <HAL_SAI_DeInit+0x62>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2202      	movs	r2, #2
 8008d8a:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	2200      	movs	r2, #0
 8008d94:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f04f 32ff 	mov.w	r2, #4294967295
 8008d9e:	619a      	str	r2, [r3, #24]

  /* Disable the SAI */
  SAI_Disable(hsai);
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f000 f961 	bl	8009068 <SAI_Disable>

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	685a      	ldr	r2, [r3, #4]
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f042 0208 	orr.w	r2, r2, #8
 8008db4:	605a      	str	r2, [r3, #4]
  {
    hsai->MspDeInitCallback = HAL_SAI_MspDeInit;
  }
  hsai->MspDeInitCallback(hsai);
#else
  HAL_SAI_MspDeInit(hsai);
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f7f9 fcfc 	bl	80027b4 <HAL_SAI_MspDeInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_RESET;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2200      	movs	r2, #0
 8008dd0:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 8008dd4:	2300      	movs	r3, #0
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	3708      	adds	r7, #8
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}

08008dde <HAL_SAI_DMAStop>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DMAStop(SAI_HandleTypeDef *hsai)
{
 8008dde:	b580      	push	{r7, lr}
 8008de0:	b084      	sub	sp, #16
 8008de2:	af00      	add	r7, sp, #0
 8008de4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008de6:	2300      	movs	r3, #0
 8008de8:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8008df0:	2b01      	cmp	r3, #1
 8008df2:	d101      	bne.n	8008df8 <HAL_SAI_DMAStop+0x1a>
 8008df4:	2302      	movs	r3, #2
 8008df6:	e061      	b.n	8008ebc <HAL_SAI_DMAStop+0xde>
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2201      	movs	r2, #1
 8008dfc:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  /* Disable SAI peripheral */
  SAI_Disable(hsai);
 8008e00:	6878      	ldr	r0, [r7, #4]
 8008e02:	f000 f931 	bl	8009068 <SAI_Disable>

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	681a      	ldr	r2, [r3, #0]
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8008e14:	601a      	str	r2, [r3, #0]

  /* Abort the SAI Tx DMA Stream */
  if ((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d01c      	beq.n	8008e58 <HAL_SAI_DMAStop+0x7a>
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8008e24:	b2db      	uxtb	r3, r3
 8008e26:	2b12      	cmp	r3, #18
 8008e28:	d116      	bne.n	8008e58 <HAL_SAI_DMAStop+0x7a>
  {
    if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008e2e:	4618      	mov	r0, r3
 8008e30:	f7fc ff24 	bl	8005c7c <HAL_DMA_Abort>
 8008e34:	4603      	mov	r3, r0
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d00e      	beq.n	8008e58 <HAL_SAI_DMAStop+0x7a>
    {
      /* If the DMA Tx errorCode is different from DMA No Transfer then return Error */
      if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008e3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e40:	2b80      	cmp	r3, #128	@ 0x80
 8008e42:	d009      	beq.n	8008e58 <HAL_SAI_DMAStop+0x7a>
      {
        status = HAL_ERROR;
 8008e44:	2301      	movs	r3, #1
 8008e46:	73fb      	strb	r3, [r7, #15]
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e4e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }
    }
  }

  /* Abort the SAI Rx DMA Stream */
  if ((hsai->hdmarx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_RX))
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d01c      	beq.n	8008e9a <HAL_SAI_DMAStop+0xbc>
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8008e66:	b2db      	uxtb	r3, r3
 8008e68:	2b22      	cmp	r3, #34	@ 0x22
 8008e6a:	d116      	bne.n	8008e9a <HAL_SAI_DMAStop+0xbc>
  {
    if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e70:	4618      	mov	r0, r3
 8008e72:	f7fc ff03 	bl	8005c7c <HAL_DMA_Abort>
 8008e76:	4603      	mov	r3, r0
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d00e      	beq.n	8008e9a <HAL_SAI_DMAStop+0xbc>
    {
      /* If the DMA Rx errorCode is different from DMA No Transfer then return Error */
      if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e82:	2b80      	cmp	r3, #128	@ 0x80
 8008e84:	d009      	beq.n	8008e9a <HAL_SAI_DMAStop+0xbc>
      {
        status = HAL_ERROR;
 8008e86:	2301      	movs	r3, #1
 8008e88:	73fb      	strb	r3, [r7, #15]
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e90:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }
    }
  }

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	685a      	ldr	r2, [r3, #4]
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f042 0208 	orr.w	r2, r2, #8
 8008ea8:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2201      	movs	r2, #1
 8008eae:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return status;
 8008eba:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	3710      	adds	r7, #16
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}

08008ec4 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b084      	sub	sp, #16
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	60f8      	str	r0, [r7, #12]
 8008ecc:	60b9      	str	r1, [r7, #8]
 8008ece:	4613      	mov	r3, r2
 8008ed0:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0))
 8008ed2:	68bb      	ldr	r3, [r7, #8]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d002      	beq.n	8008ede <HAL_SAI_Receive_DMA+0x1a>
 8008ed8:	88fb      	ldrh	r3, [r7, #6]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d101      	bne.n	8008ee2 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8008ede:	2301      	movs	r3, #1
 8008ee0:	e074      	b.n	8008fcc <HAL_SAI_Receive_DMA+0x108>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8008ee8:	b2db      	uxtb	r3, r3
 8008eea:	2b01      	cmp	r3, #1
 8008eec:	d16d      	bne.n	8008fca <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8008ef4:	2b01      	cmp	r3, #1
 8008ef6:	d101      	bne.n	8008efc <HAL_SAI_Receive_DMA+0x38>
 8008ef8:	2302      	movs	r3, #2
 8008efa:	e067      	b.n	8008fcc <HAL_SAI_Receive_DMA+0x108>
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	2201      	movs	r2, #1
 8008f00:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    hsai->pBuffPtr = pData;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	68ba      	ldr	r2, [r7, #8]
 8008f08:	665a      	str	r2, [r3, #100]	@ 0x64
    hsai->XferSize = Size;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	88fa      	ldrh	r2, [r7, #6]
 8008f0e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    hsai->XferCount = Size;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	88fa      	ldrh	r2, [r7, #6]
 8008f16:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	2222      	movs	r2, #34	@ 0x22
 8008f26:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f2e:	4a29      	ldr	r2, [pc, #164]	@ (8008fd4 <HAL_SAI_Receive_DMA+0x110>)
 8008f30:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f36:	4a28      	ldr	r2, [pc, #160]	@ (8008fd8 <HAL_SAI_Receive_DMA+0x114>)
 8008f38:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f3e:	4a27      	ldr	r2, [pc, #156]	@ (8008fdc <HAL_SAI_Receive_DMA+0x118>)
 8008f40:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f46:	2200      	movs	r2, #0
 8008f48:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	331c      	adds	r3, #28
 8008f54:	4619      	mov	r1, r3
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008f5a:	461a      	mov	r2, r3
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008f62:	f7fc fe2b 	bl	8005bbc <HAL_DMA_Start_IT>
 8008f66:	4603      	mov	r3, r0
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d005      	beq.n	8008f78 <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	2200      	movs	r2, #0
 8008f70:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      return  HAL_ERROR;
 8008f74:	2301      	movs	r3, #1
 8008f76:	e029      	b.n	8008fcc <HAL_SAI_Receive_DMA+0x108>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8008f78:	2100      	movs	r1, #0
 8008f7a:	68f8      	ldr	r0, [r7, #12]
 8008f7c:	f000 f83e 	bl	8008ffc <SAI_InterruptFlag>
 8008f80:	4601      	mov	r1, r0
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	691a      	ldr	r2, [r3, #16]
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	430a      	orrs	r2, r1
 8008f8e:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	681a      	ldr	r2, [r3, #0]
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8008f9e:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d107      	bne.n	8008fbe <HAL_SAI_Receive_DMA+0xfa>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	681a      	ldr	r2, [r3, #0]
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8008fbc:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	e000      	b.n	8008fcc <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 8008fca:	2302      	movs	r3, #2
  }
}
 8008fcc:	4618      	mov	r0, r3
 8008fce:	3710      	adds	r7, #16
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	bd80      	pop	{r7, pc}
 8008fd4:	08009139 	.word	0x08009139
 8008fd8:	080090d9 	.word	0x080090d9
 8008fdc:	08009155 	.word	0x08009155

08008fe0 <HAL_SAI_GetState>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL state
  */
HAL_SAI_StateTypeDef HAL_SAI_GetState(const SAI_HandleTypeDef *hsai)
{
 8008fe0:	b480      	push	{r7}
 8008fe2:	b083      	sub	sp, #12
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
  return hsai->State;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8008fee:	b2db      	uxtb	r3, r3
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	370c      	adds	r7, #12
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffa:	4770      	bx	lr

08008ffc <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, uint32_t mode)
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b085      	sub	sp, #20
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
 8009004:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8009006:	2301      	movs	r3, #1
 8009008:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	2b01      	cmp	r3, #1
 800900e:	d103      	bne.n	8009018 <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	f043 0308 	orr.w	r3, r3, #8
 8009016:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800901c:	2b08      	cmp	r3, #8
 800901e:	d10b      	bne.n	8009038 <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8009024:	2b03      	cmp	r3, #3
 8009026:	d003      	beq.n	8009030 <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	685b      	ldr	r3, [r3, #4]
 800902c:	2b01      	cmp	r3, #1
 800902e:	d103      	bne.n	8009038 <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	f043 0310 	orr.w	r3, r3, #16
 8009036:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	685b      	ldr	r3, [r3, #4]
 800903c:	2b03      	cmp	r3, #3
 800903e:	d003      	beq.n	8009048 <SAI_InterruptFlag+0x4c>
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	685b      	ldr	r3, [r3, #4]
 8009044:	2b02      	cmp	r3, #2
 8009046:	d104      	bne.n	8009052 <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800904e:	60fb      	str	r3, [r7, #12]
 8009050:	e003      	b.n	800905a <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	f043 0304 	orr.w	r3, r3, #4
 8009058:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800905a:	68fb      	ldr	r3, [r7, #12]
}
 800905c:	4618      	mov	r0, r3
 800905e:	3714      	adds	r7, #20
 8009060:	46bd      	mov	sp, r7
 8009062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009066:	4770      	bx	lr

08009068 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8009068:	b480      	push	{r7}
 800906a:	b085      	sub	sp, #20
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8009070:	4b17      	ldr	r3, [pc, #92]	@ (80090d0 <SAI_Disable+0x68>)
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	4a17      	ldr	r2, [pc, #92]	@ (80090d4 <SAI_Disable+0x6c>)
 8009076:	fba2 2303 	umull	r2, r3, r2, r3
 800907a:	0b1b      	lsrs	r3, r3, #12
 800907c:	009b      	lsls	r3, r3, #2
 800907e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8009080:	2300      	movs	r3, #0
 8009082:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	681a      	ldr	r2, [r3, #0]
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8009092:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	1e5a      	subs	r2, r3, #1
 8009098:	60fa      	str	r2, [r7, #12]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d10a      	bne.n	80090b4 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80090a4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 80090ae:	2303      	movs	r3, #3
 80090b0:	72fb      	strb	r3, [r7, #11]
      break;
 80090b2:	e006      	b.n	80090c2 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d1e8      	bne.n	8009094 <SAI_Disable+0x2c>

  return status;
 80090c2:	7afb      	ldrb	r3, [r7, #11]
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	3714      	adds	r7, #20
 80090c8:	46bd      	mov	sp, r7
 80090ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ce:	4770      	bx	lr
 80090d0:	200000c0 	.word	0x200000c0
 80090d4:	95cbec1b 	.word	0x95cbec1b

080090d8 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b084      	sub	sp, #16
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090e4:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	69db      	ldr	r3, [r3, #28]
 80090ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80090ee:	d01c      	beq.n	800912a <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	681a      	ldr	r2, [r3, #0]
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80090fe:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	2200      	movs	r2, #0
 8009104:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8009108:	2100      	movs	r1, #0
 800910a:	68f8      	ldr	r0, [r7, #12]
 800910c:	f7ff ff76 	bl	8008ffc <SAI_InterruptFlag>
 8009110:	4603      	mov	r3, r0
 8009112:	43d9      	mvns	r1, r3
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	691a      	ldr	r2, [r3, #16]
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	400a      	ands	r2, r1
 8009120:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	2201      	movs	r2, #1
 8009126:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800912a:	68f8      	ldr	r0, [r7, #12]
 800912c:	f7fb fe64 	bl	8004df8 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8009130:	bf00      	nop
 8009132:	3710      	adds	r7, #16
 8009134:	46bd      	mov	sp, r7
 8009136:	bd80      	pop	{r7, pc}

08009138 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b084      	sub	sp, #16
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009144:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 8009146:	68f8      	ldr	r0, [r7, #12]
 8009148:	f7fb fe60 	bl	8004e0c <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800914c:	bf00      	nop
 800914e:	3710      	adds	r7, #16
 8009150:	46bd      	mov	sp, r7
 8009152:	bd80      	pop	{r7, pc}

08009154 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b084      	sub	sp, #16
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009160:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009168:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009176:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009178:	2b01      	cmp	r3, #1
 800917a:	d004      	beq.n	8009186 <SAI_DMAError+0x32>
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009180:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009182:	2b01      	cmp	r3, #1
 8009184:	d112      	bne.n	80091ac <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	681a      	ldr	r2, [r3, #0]
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8009194:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 8009196:	68f8      	ldr	r0, [r7, #12]
 8009198:	f7ff ff66 	bl	8009068 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	2201      	movs	r2, #1
 80091a0:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	2200      	movs	r2, #0
 80091a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 80091ac:	68f8      	ldr	r0, [r7, #12]
 80091ae:	f7fb fc23 	bl	80049f8 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 80091b2:	bf00      	nop
 80091b4:	3710      	adds	r7, #16
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}

080091ba <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80091ba:	b580      	push	{r7, lr}
 80091bc:	b082      	sub	sp, #8
 80091be:	af00      	add	r7, sp, #0
 80091c0:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d101      	bne.n	80091cc <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80091c8:	2301      	movs	r3, #1
 80091ca:	e022      	b.n	8009212 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80091d2:	b2db      	uxtb	r3, r3
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d105      	bne.n	80091e4 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2200      	movs	r2, #0
 80091dc:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	f7f9 fb3a 	bl	8002858 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2203      	movs	r2, #3
 80091e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	f000 f815 	bl	800921c <HAL_SD_InitCard>
 80091f2:	4603      	mov	r3, r0
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d001      	beq.n	80091fc <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80091f8:	2301      	movs	r3, #1
 80091fa:	e00a      	b.n	8009212 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2200      	movs	r2, #0
 8009200:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2200      	movs	r2, #0
 8009206:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2201      	movs	r2, #1
 800920c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8009210:	2300      	movs	r3, #0
}
 8009212:	4618      	mov	r0, r3
 8009214:	3708      	adds	r7, #8
 8009216:	46bd      	mov	sp, r7
 8009218:	bd80      	pop	{r7, pc}
	...

0800921c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800921c:	b5b0      	push	{r4, r5, r7, lr}
 800921e:	b08e      	sub	sp, #56	@ 0x38
 8009220:	af04      	add	r7, sp, #16
 8009222:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8009224:	2300      	movs	r3, #0
 8009226:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8009228:	2300      	movs	r3, #0
 800922a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800922c:	2300      	movs	r3, #0
 800922e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8009230:	2300      	movs	r3, #0
 8009232:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8009234:	2300      	movs	r3, #0
 8009236:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8009238:	2376      	movs	r3, #118	@ 0x76
 800923a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681d      	ldr	r5, [r3, #0]
 8009240:	466c      	mov	r4, sp
 8009242:	f107 0314 	add.w	r3, r7, #20
 8009246:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800924a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800924e:	f107 0308 	add.w	r3, r7, #8
 8009252:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009254:	4628      	mov	r0, r5
 8009256:	f002 feef 	bl	800c038 <SDMMC_Init>
 800925a:	4603      	mov	r3, r0
 800925c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8009260:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009264:	2b00      	cmp	r3, #0
 8009266:	d001      	beq.n	800926c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8009268:	2301      	movs	r3, #1
 800926a:	e059      	b.n	8009320 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	685a      	ldr	r2, [r3, #4]
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800927a:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	4618      	mov	r0, r3
 8009282:	f002 ff23 	bl	800c0cc <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	685a      	ldr	r2, [r3, #4]
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009294:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8009296:	2002      	movs	r0, #2
 8009298:	f7fc f95c 	bl	8005554 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	f000 ff59 	bl	800a154 <SD_PowerON>
 80092a2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80092a4:	6a3b      	ldr	r3, [r7, #32]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d00b      	beq.n	80092c2 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2201      	movs	r2, #1
 80092ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80092b6:	6a3b      	ldr	r3, [r7, #32]
 80092b8:	431a      	orrs	r2, r3
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80092be:	2301      	movs	r3, #1
 80092c0:	e02e      	b.n	8009320 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f000 fe78 	bl	8009fb8 <SD_InitCard>
 80092c8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80092ca:	6a3b      	ldr	r3, [r7, #32]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d00b      	beq.n	80092e8 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2201      	movs	r2, #1
 80092d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80092dc:	6a3b      	ldr	r3, [r7, #32]
 80092de:	431a      	orrs	r2, r3
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80092e4:	2301      	movs	r3, #1
 80092e6:	e01b      	b.n	8009320 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80092f0:	4618      	mov	r0, r3
 80092f2:	f002 ff7d 	bl	800c1f0 <SDMMC_CmdBlockLength>
 80092f6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80092f8:	6a3b      	ldr	r3, [r7, #32]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d00f      	beq.n	800931e <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	4a09      	ldr	r2, [pc, #36]	@ (8009328 <HAL_SD_InitCard+0x10c>)
 8009304:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800930a:	6a3b      	ldr	r3, [r7, #32]
 800930c:	431a      	orrs	r2, r3
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2201      	movs	r2, #1
 8009316:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800931a:	2301      	movs	r3, #1
 800931c:	e000      	b.n	8009320 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 800931e:	2300      	movs	r3, #0
}
 8009320:	4618      	mov	r0, r3
 8009322:	3728      	adds	r7, #40	@ 0x28
 8009324:	46bd      	mov	sp, r7
 8009326:	bdb0      	pop	{r4, r5, r7, pc}
 8009328:	004005ff 	.word	0x004005ff

0800932c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b08c      	sub	sp, #48	@ 0x30
 8009330:	af00      	add	r7, sp, #0
 8009332:	60f8      	str	r0, [r7, #12]
 8009334:	60b9      	str	r1, [r7, #8]
 8009336:	607a      	str	r2, [r7, #4]
 8009338:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800933e:	68bb      	ldr	r3, [r7, #8]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d107      	bne.n	8009354 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009348:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8009350:	2301      	movs	r3, #1
 8009352:	e0c3      	b.n	80094dc <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800935a:	b2db      	uxtb	r3, r3
 800935c:	2b01      	cmp	r3, #1
 800935e:	f040 80bc 	bne.w	80094da <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	2200      	movs	r2, #0
 8009366:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009368:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	441a      	add	r2, r3
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009372:	429a      	cmp	r2, r3
 8009374:	d907      	bls.n	8009386 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800937a:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8009382:	2301      	movs	r3, #1
 8009384:	e0aa      	b.n	80094dc <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	2203      	movs	r2, #3
 800938a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	2200      	movs	r2, #0
 8009394:	62da      	str	r2, [r3, #44]	@ 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 80093a4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093aa:	4a4e      	ldr	r2, [pc, #312]	@ (80094e4 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 80093ac:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093b2:	4a4d      	ldr	r2, [pc, #308]	@ (80094e8 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80093b4:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093ba:	2200      	movs	r2, #0
 80093bc:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093c2:	2200      	movs	r2, #0
 80093c4:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093d6:	689a      	ldr	r2, [r3, #8]
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	430a      	orrs	r2, r1
 80093e0:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	3380      	adds	r3, #128	@ 0x80
 80093ec:	4619      	mov	r1, r3
 80093ee:	68ba      	ldr	r2, [r7, #8]
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	025b      	lsls	r3, r3, #9
 80093f4:	089b      	lsrs	r3, r3, #2
 80093f6:	f7fc fbe1 	bl	8005bbc <HAL_DMA_Start_IT>
 80093fa:	4603      	mov	r3, r0
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d017      	beq.n	8009430 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 800940e:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	4a35      	ldr	r2, [pc, #212]	@ (80094ec <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8009416:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800941c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	2201      	movs	r2, #1
 8009428:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800942c:	2301      	movs	r3, #1
 800942e:	e055      	b.n	80094dc <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	f042 0208 	orr.w	r2, r2, #8
 800943e:	62da      	str	r2, [r3, #44]	@ 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009444:	2b01      	cmp	r3, #1
 8009446:	d002      	beq.n	800944e <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 8009448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800944a:	025b      	lsls	r3, r3, #9
 800944c:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800944e:	f04f 33ff 	mov.w	r3, #4294967295
 8009452:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	025b      	lsls	r3, r3, #9
 8009458:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800945a:	2390      	movs	r3, #144	@ 0x90
 800945c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800945e:	2302      	movs	r3, #2
 8009460:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009462:	2300      	movs	r3, #0
 8009464:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8009466:	2301      	movs	r3, #1
 8009468:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f107 0210 	add.w	r2, r7, #16
 8009472:	4611      	mov	r1, r2
 8009474:	4618      	mov	r0, r3
 8009476:	f002 fe8f 	bl	800c198 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	2b01      	cmp	r3, #1
 800947e:	d90a      	bls.n	8009496 <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	2282      	movs	r2, #130	@ 0x82
 8009484:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800948c:	4618      	mov	r0, r3
 800948e:	f002 fef3 	bl	800c278 <SDMMC_CmdReadMultiBlock>
 8009492:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8009494:	e009      	b.n	80094aa <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	2281      	movs	r2, #129	@ 0x81
 800949a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80094a2:	4618      	mov	r0, r3
 80094a4:	f002 fec6 	bl	800c234 <SDMMC_CmdReadSingleBlock>
 80094a8:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80094aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d012      	beq.n	80094d6 <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	4a0d      	ldr	r2, [pc, #52]	@ (80094ec <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80094b6:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80094bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094be:	431a      	orrs	r2, r3
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	2201      	movs	r2, #1
 80094c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	2200      	movs	r2, #0
 80094d0:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 80094d2:	2301      	movs	r3, #1
 80094d4:	e002      	b.n	80094dc <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 80094d6:	2300      	movs	r3, #0
 80094d8:	e000      	b.n	80094dc <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 80094da:	2302      	movs	r3, #2
  }
}
 80094dc:	4618      	mov	r0, r3
 80094de:	3730      	adds	r7, #48	@ 0x30
 80094e0:	46bd      	mov	sp, r7
 80094e2:	bd80      	pop	{r7, pc}
 80094e4:	08009dc7 	.word	0x08009dc7
 80094e8:	08009e39 	.word	0x08009e39
 80094ec:	004005ff 	.word	0x004005ff

080094f0 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b08c      	sub	sp, #48	@ 0x30
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	60f8      	str	r0, [r7, #12]
 80094f8:	60b9      	str	r1, [r7, #8]
 80094fa:	607a      	str	r2, [r7, #4]
 80094fc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8009502:	68bb      	ldr	r3, [r7, #8]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d107      	bne.n	8009518 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800950c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8009514:	2301      	movs	r3, #1
 8009516:	e0c6      	b.n	80096a6 <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800951e:	b2db      	uxtb	r3, r3
 8009520:	2b01      	cmp	r3, #1
 8009522:	f040 80bf 	bne.w	80096a4 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	2200      	movs	r2, #0
 800952a:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800952c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	441a      	add	r2, r3
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009536:	429a      	cmp	r2, r3
 8009538:	d907      	bls.n	800954a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800953e:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8009546:	2301      	movs	r3, #1
 8009548:	e0ad      	b.n	80096a6 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	2203      	movs	r2, #3
 800954e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	2200      	movs	r2, #0
 8009558:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f042 021a 	orr.w	r2, r2, #26
 8009568:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800956e:	4a50      	ldr	r2, [pc, #320]	@ (80096b0 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8009570:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009576:	4a4f      	ldr	r2, [pc, #316]	@ (80096b4 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8009578:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800957e:	2200      	movs	r2, #0
 8009580:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009586:	2b01      	cmp	r3, #1
 8009588:	d002      	beq.n	8009590 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800958a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800958c:	025b      	lsls	r3, r3, #9
 800958e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	2b01      	cmp	r3, #1
 8009594:	d90a      	bls.n	80095ac <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	22a0      	movs	r2, #160	@ 0xa0
 800959a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80095a2:	4618      	mov	r0, r3
 80095a4:	f002 feac 	bl	800c300 <SDMMC_CmdWriteMultiBlock>
 80095a8:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80095aa:	e009      	b.n	80095c0 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	2290      	movs	r2, #144	@ 0x90
 80095b0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80095b8:	4618      	mov	r0, r3
 80095ba:	f002 fe7f 	bl	800c2bc <SDMMC_CmdWriteSingleBlock>
 80095be:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80095c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d012      	beq.n	80095ec <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	4a3b      	ldr	r2, [pc, #236]	@ (80096b8 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80095cc:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80095d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095d4:	431a      	orrs	r2, r3
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	2201      	movs	r2, #1
 80095de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	2200      	movs	r2, #0
 80095e6:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80095e8:	2301      	movs	r3, #1
 80095ea:	e05c      	b.n	80096a6 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	f042 0208 	orr.w	r2, r2, #8
 80095fa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009600:	2240      	movs	r2, #64	@ 0x40
 8009602:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009614:	689a      	ldr	r2, [r3, #8]
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	430a      	orrs	r2, r1
 800961e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8009624:	68b9      	ldr	r1, [r7, #8]
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	3380      	adds	r3, #128	@ 0x80
 800962c:	461a      	mov	r2, r3
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	025b      	lsls	r3, r3, #9
 8009632:	089b      	lsrs	r3, r3, #2
 8009634:	f7fc fac2 	bl	8005bbc <HAL_DMA_Start_IT>
 8009638:	4603      	mov	r3, r0
 800963a:	2b00      	cmp	r3, #0
 800963c:	d01a      	beq.n	8009674 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f022 021a 	bic.w	r2, r2, #26
 800964c:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	4a19      	ldr	r2, [pc, #100]	@ (80096b8 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8009654:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800965a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	2201      	movs	r2, #1
 8009666:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	2200      	movs	r2, #0
 800966e:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8009670:	2301      	movs	r3, #1
 8009672:	e018      	b.n	80096a6 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009674:	f04f 33ff 	mov.w	r3, #4294967295
 8009678:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	025b      	lsls	r3, r3, #9
 800967e:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009680:	2390      	movs	r3, #144	@ 0x90
 8009682:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8009684:	2300      	movs	r3, #0
 8009686:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009688:	2300      	movs	r3, #0
 800968a:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800968c:	2301      	movs	r3, #1
 800968e:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f107 0210 	add.w	r2, r7, #16
 8009698:	4611      	mov	r1, r2
 800969a:	4618      	mov	r0, r3
 800969c:	f002 fd7c 	bl	800c198 <SDMMC_ConfigData>

      return HAL_OK;
 80096a0:	2300      	movs	r3, #0
 80096a2:	e000      	b.n	80096a6 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 80096a4:	2302      	movs	r3, #2
  }
}
 80096a6:	4618      	mov	r0, r3
 80096a8:	3730      	adds	r7, #48	@ 0x30
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bd80      	pop	{r7, pc}
 80096ae:	bf00      	nop
 80096b0:	08009d9d 	.word	0x08009d9d
 80096b4:	08009e39 	.word	0x08009e39
 80096b8:	004005ff 	.word	0x004005ff

080096bc <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b084      	sub	sp, #16
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096c8:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80096d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d008      	beq.n	80096ea <HAL_SD_IRQHandler+0x2e>
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	f003 0308 	and.w	r3, r3, #8
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d003      	beq.n	80096ea <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f000 fdec 	bl	800a2c0 <SD_Read_IT>
 80096e8:	e15a      	b.n	80099a0 <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80096f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	f000 808d 	beq.w	8009814 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009702:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681a      	ldr	r2, [r3, #0]
 800970e:	4b9a      	ldr	r3, [pc, #616]	@ (8009978 <HAL_SD_IRQHandler+0x2bc>)
 8009710:	400b      	ands	r3, r1
 8009712:	63d3      	str	r3, [r2, #60]	@ 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	f022 0201 	bic.w	r2, r2, #1
 8009722:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	f003 0308 	and.w	r3, r3, #8
 800972a:	2b00      	cmp	r3, #0
 800972c:	d039      	beq.n	80097a2 <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	f003 0302 	and.w	r3, r3, #2
 8009734:	2b00      	cmp	r3, #0
 8009736:	d104      	bne.n	8009742 <HAL_SD_IRQHandler+0x86>
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	f003 0320 	and.w	r3, r3, #32
 800973e:	2b00      	cmp	r3, #0
 8009740:	d011      	beq.n	8009766 <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	4618      	mov	r0, r3
 8009748:	f002 fdfc 	bl	800c344 <SDMMC_CmdStopTransfer>
 800974c:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800974e:	68bb      	ldr	r3, [r7, #8]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d008      	beq.n	8009766 <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009758:	68bb      	ldr	r3, [r7, #8]
 800975a:	431a      	orrs	r2, r3
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8009760:	6878      	ldr	r0, [r7, #4]
 8009762:	f000 f921 	bl	80099a8 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f240 523a 	movw	r2, #1338	@ 0x53a
 800976e:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2201      	movs	r2, #1
 8009774:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2200      	movs	r2, #0
 800977c:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	f003 0301 	and.w	r3, r3, #1
 8009784:	2b00      	cmp	r3, #0
 8009786:	d104      	bne.n	8009792 <HAL_SD_IRQHandler+0xd6>
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	f003 0302 	and.w	r3, r3, #2
 800978e:	2b00      	cmp	r3, #0
 8009790:	d003      	beq.n	800979a <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	f004 fe4e 	bl	800e434 <HAL_SD_RxCpltCallback>
 8009798:	e102      	b.n	80099a0 <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800979a:	6878      	ldr	r0, [r7, #4]
 800979c:	f004 fe40 	bl	800e420 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80097a0:	e0fe      	b.n	80099a0 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	f000 80f9 	beq.w	80099a0 <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	f003 0320 	and.w	r3, r3, #32
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d011      	beq.n	80097dc <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	4618      	mov	r0, r3
 80097be:	f002 fdc1 	bl	800c344 <SDMMC_CmdStopTransfer>
 80097c2:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80097c4:	68bb      	ldr	r3, [r7, #8]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d008      	beq.n	80097dc <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	431a      	orrs	r2, r3
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f000 f8e6 	bl	80099a8 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	f003 0301 	and.w	r3, r3, #1
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	f040 80dc 	bne.w	80099a0 <HAL_SD_IRQHandler+0x2e4>
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	f003 0302 	and.w	r3, r3, #2
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	f040 80d6 	bne.w	80099a0 <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	f022 0208 	bic.w	r2, r2, #8
 8009802:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2201      	movs	r2, #1
 8009808:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f004 fe07 	bl	800e420 <HAL_SD_TxCpltCallback>
}
 8009812:	e0c5      	b.n	80099a0 <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800981a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800981e:	2b00      	cmp	r3, #0
 8009820:	d008      	beq.n	8009834 <HAL_SD_IRQHandler+0x178>
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	f003 0308 	and.w	r3, r3, #8
 8009828:	2b00      	cmp	r3, #0
 800982a:	d003      	beq.n	8009834 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 800982c:	6878      	ldr	r0, [r7, #4]
 800982e:	f000 fd98 	bl	800a362 <SD_Write_IT>
 8009832:	e0b5      	b.n	80099a0 <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800983a:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 800983e:	2b00      	cmp	r3, #0
 8009840:	f000 80ae 	beq.w	80099a0 <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800984a:	f003 0302 	and.w	r3, r3, #2
 800984e:	2b00      	cmp	r3, #0
 8009850:	d005      	beq.n	800985e <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009856:	f043 0202 	orr.w	r2, r3, #2
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009864:	f003 0308 	and.w	r3, r3, #8
 8009868:	2b00      	cmp	r3, #0
 800986a:	d005      	beq.n	8009878 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009870:	f043 0208 	orr.w	r2, r3, #8
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800987e:	f003 0320 	and.w	r3, r3, #32
 8009882:	2b00      	cmp	r3, #0
 8009884:	d005      	beq.n	8009892 <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800988a:	f043 0220 	orr.w	r2, r3, #32
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009898:	f003 0310 	and.w	r3, r3, #16
 800989c:	2b00      	cmp	r3, #0
 800989e:	d005      	beq.n	80098ac <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098a4:	f043 0210 	orr.w	r2, r3, #16
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f240 523a 	movw	r2, #1338	@ 0x53a
 80098b4:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 80098c4:	63da      	str	r2, [r3, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	4618      	mov	r0, r3
 80098cc:	f002 fd3a 	bl	800c344 <SDMMC_CmdStopTransfer>
 80098d0:	4602      	mov	r2, r0
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098d6:	431a      	orrs	r2, r3
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	f003 0308 	and.w	r3, r3, #8
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d00a      	beq.n	80098fc <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2201      	movs	r2, #1
 80098ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	2200      	movs	r2, #0
 80098f2:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	f000 f857 	bl	80099a8 <HAL_SD_ErrorCallback>
}
 80098fa:	e051      	b.n	80099a0 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009902:	2b00      	cmp	r3, #0
 8009904:	d04c      	beq.n	80099a0 <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	f003 0310 	and.w	r3, r3, #16
 800990c:	2b00      	cmp	r3, #0
 800990e:	d104      	bne.n	800991a <HAL_SD_IRQHandler+0x25e>
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	f003 0320 	and.w	r3, r3, #32
 8009916:	2b00      	cmp	r3, #0
 8009918:	d011      	beq.n	800993e <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800991e:	4a17      	ldr	r2, [pc, #92]	@ (800997c <HAL_SD_IRQHandler+0x2c0>)
 8009920:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009926:	4618      	mov	r0, r3
 8009928:	f7fc fa18 	bl	8005d5c <HAL_DMA_Abort_IT>
 800992c:	4603      	mov	r3, r0
 800992e:	2b00      	cmp	r3, #0
 8009930:	d036      	beq.n	80099a0 <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009936:	4618      	mov	r0, r3
 8009938:	f000 fad0 	bl	8009edc <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800993c:	e030      	b.n	80099a0 <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	f003 0301 	and.w	r3, r3, #1
 8009944:	2b00      	cmp	r3, #0
 8009946:	d104      	bne.n	8009952 <HAL_SD_IRQHandler+0x296>
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	f003 0302 	and.w	r3, r3, #2
 800994e:	2b00      	cmp	r3, #0
 8009950:	d018      	beq.n	8009984 <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009956:	4a0a      	ldr	r2, [pc, #40]	@ (8009980 <HAL_SD_IRQHandler+0x2c4>)
 8009958:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800995e:	4618      	mov	r0, r3
 8009960:	f7fc f9fc 	bl	8005d5c <HAL_DMA_Abort_IT>
 8009964:	4603      	mov	r3, r0
 8009966:	2b00      	cmp	r3, #0
 8009968:	d01a      	beq.n	80099a0 <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800996e:	4618      	mov	r0, r3
 8009970:	f000 faeb 	bl	8009f4a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8009974:	e014      	b.n	80099a0 <HAL_SD_IRQHandler+0x2e4>
 8009976:	bf00      	nop
 8009978:	ffff3ec5 	.word	0xffff3ec5
 800997c:	08009edd 	.word	0x08009edd
 8009980:	08009f4b 	.word	0x08009f4b
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2200      	movs	r2, #0
 8009988:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2201      	movs	r2, #1
 800998e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	2200      	movs	r2, #0
 8009996:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 8009998:	6878      	ldr	r0, [r7, #4]
 800999a:	f004 fd37 	bl	800e40c <HAL_SD_AbortCallback>
}
 800999e:	e7ff      	b.n	80099a0 <HAL_SD_IRQHandler+0x2e4>
 80099a0:	bf00      	nop
 80099a2:	3710      	adds	r7, #16
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bd80      	pop	{r7, pc}

080099a8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80099a8:	b480      	push	{r7}
 80099aa:	b083      	sub	sp, #12
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80099b0:	bf00      	nop
 80099b2:	370c      	adds	r7, #12
 80099b4:	46bd      	mov	sp, r7
 80099b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ba:	4770      	bx	lr

080099bc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80099bc:	b480      	push	{r7}
 80099be:	b083      	sub	sp, #12
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
 80099c4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80099ca:	0f9b      	lsrs	r3, r3, #30
 80099cc:	b2da      	uxtb	r2, r3
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80099d6:	0e9b      	lsrs	r3, r3, #26
 80099d8:	b2db      	uxtb	r3, r3
 80099da:	f003 030f 	and.w	r3, r3, #15
 80099de:	b2da      	uxtb	r2, r3
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80099e8:	0e1b      	lsrs	r3, r3, #24
 80099ea:	b2db      	uxtb	r3, r3
 80099ec:	f003 0303 	and.w	r3, r3, #3
 80099f0:	b2da      	uxtb	r2, r3
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80099fa:	0c1b      	lsrs	r3, r3, #16
 80099fc:	b2da      	uxtb	r2, r3
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009a06:	0a1b      	lsrs	r3, r3, #8
 8009a08:	b2da      	uxtb	r2, r3
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009a12:	b2da      	uxtb	r2, r3
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009a1c:	0d1b      	lsrs	r3, r3, #20
 8009a1e:	b29a      	uxth	r2, r3
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009a28:	0c1b      	lsrs	r3, r3, #16
 8009a2a:	b2db      	uxtb	r3, r3
 8009a2c:	f003 030f 	and.w	r3, r3, #15
 8009a30:	b2da      	uxtb	r2, r3
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009a3a:	0bdb      	lsrs	r3, r3, #15
 8009a3c:	b2db      	uxtb	r3, r3
 8009a3e:	f003 0301 	and.w	r3, r3, #1
 8009a42:	b2da      	uxtb	r2, r3
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009a4c:	0b9b      	lsrs	r3, r3, #14
 8009a4e:	b2db      	uxtb	r3, r3
 8009a50:	f003 0301 	and.w	r3, r3, #1
 8009a54:	b2da      	uxtb	r2, r3
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009a5e:	0b5b      	lsrs	r3, r3, #13
 8009a60:	b2db      	uxtb	r3, r3
 8009a62:	f003 0301 	and.w	r3, r3, #1
 8009a66:	b2da      	uxtb	r2, r3
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009a70:	0b1b      	lsrs	r3, r3, #12
 8009a72:	b2db      	uxtb	r3, r3
 8009a74:	f003 0301 	and.w	r3, r3, #1
 8009a78:	b2da      	uxtb	r2, r3
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	2200      	movs	r2, #0
 8009a82:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d163      	bne.n	8009b54 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009a90:	009a      	lsls	r2, r3, #2
 8009a92:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8009a96:	4013      	ands	r3, r2
 8009a98:	687a      	ldr	r2, [r7, #4]
 8009a9a:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8009a9c:	0f92      	lsrs	r2, r2, #30
 8009a9e:	431a      	orrs	r2, r3
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009aa8:	0edb      	lsrs	r3, r3, #27
 8009aaa:	b2db      	uxtb	r3, r3
 8009aac:	f003 0307 	and.w	r3, r3, #7
 8009ab0:	b2da      	uxtb	r2, r3
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009aba:	0e1b      	lsrs	r3, r3, #24
 8009abc:	b2db      	uxtb	r3, r3
 8009abe:	f003 0307 	and.w	r3, r3, #7
 8009ac2:	b2da      	uxtb	r2, r3
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009acc:	0d5b      	lsrs	r3, r3, #21
 8009ace:	b2db      	uxtb	r3, r3
 8009ad0:	f003 0307 	and.w	r3, r3, #7
 8009ad4:	b2da      	uxtb	r2, r3
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009ade:	0c9b      	lsrs	r3, r3, #18
 8009ae0:	b2db      	uxtb	r3, r3
 8009ae2:	f003 0307 	and.w	r3, r3, #7
 8009ae6:	b2da      	uxtb	r2, r3
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009af0:	0bdb      	lsrs	r3, r3, #15
 8009af2:	b2db      	uxtb	r3, r3
 8009af4:	f003 0307 	and.w	r3, r3, #7
 8009af8:	b2da      	uxtb	r2, r3
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	691b      	ldr	r3, [r3, #16]
 8009b02:	1c5a      	adds	r2, r3, #1
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	7e1b      	ldrb	r3, [r3, #24]
 8009b0c:	b2db      	uxtb	r3, r3
 8009b0e:	f003 0307 	and.w	r3, r3, #7
 8009b12:	3302      	adds	r3, #2
 8009b14:	2201      	movs	r2, #1
 8009b16:	fa02 f303 	lsl.w	r3, r2, r3
 8009b1a:	687a      	ldr	r2, [r7, #4]
 8009b1c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8009b1e:	fb03 f202 	mul.w	r2, r3, r2
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	7a1b      	ldrb	r3, [r3, #8]
 8009b2a:	b2db      	uxtb	r3, r3
 8009b2c:	f003 030f 	and.w	r3, r3, #15
 8009b30:	2201      	movs	r2, #1
 8009b32:	409a      	lsls	r2, r3
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b3c:	687a      	ldr	r2, [r7, #4]
 8009b3e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8009b40:	0a52      	lsrs	r2, r2, #9
 8009b42:	fb03 f202 	mul.w	r2, r3, r2
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009b50:	661a      	str	r2, [r3, #96]	@ 0x60
 8009b52:	e031      	b.n	8009bb8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b58:	2b01      	cmp	r3, #1
 8009b5a:	d11d      	bne.n	8009b98 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009b60:	041b      	lsls	r3, r3, #16
 8009b62:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b6a:	0c1b      	lsrs	r3, r3, #16
 8009b6c:	431a      	orrs	r2, r3
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	691b      	ldr	r3, [r3, #16]
 8009b76:	3301      	adds	r3, #1
 8009b78:	029a      	lsls	r2, r3, #10
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009b8c:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	661a      	str	r2, [r3, #96]	@ 0x60
 8009b96:	e00f      	b.n	8009bb8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	4a58      	ldr	r2, [pc, #352]	@ (8009d00 <HAL_SD_GetCardCSD+0x344>)
 8009b9e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ba4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2201      	movs	r2, #1
 8009bb0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8009bb4:	2301      	movs	r3, #1
 8009bb6:	e09d      	b.n	8009cf4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009bbc:	0b9b      	lsrs	r3, r3, #14
 8009bbe:	b2db      	uxtb	r3, r3
 8009bc0:	f003 0301 	and.w	r3, r3, #1
 8009bc4:	b2da      	uxtb	r2, r3
 8009bc6:	683b      	ldr	r3, [r7, #0]
 8009bc8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009bce:	09db      	lsrs	r3, r3, #7
 8009bd0:	b2db      	uxtb	r3, r3
 8009bd2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009bd6:	b2da      	uxtb	r2, r3
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009be0:	b2db      	uxtb	r3, r3
 8009be2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009be6:	b2da      	uxtb	r2, r3
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009bf0:	0fdb      	lsrs	r3, r3, #31
 8009bf2:	b2da      	uxtb	r2, r3
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009bfc:	0f5b      	lsrs	r3, r3, #29
 8009bfe:	b2db      	uxtb	r3, r3
 8009c00:	f003 0303 	and.w	r3, r3, #3
 8009c04:	b2da      	uxtb	r2, r3
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c0e:	0e9b      	lsrs	r3, r3, #26
 8009c10:	b2db      	uxtb	r3, r3
 8009c12:	f003 0307 	and.w	r3, r3, #7
 8009c16:	b2da      	uxtb	r2, r3
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c20:	0d9b      	lsrs	r3, r3, #22
 8009c22:	b2db      	uxtb	r3, r3
 8009c24:	f003 030f 	and.w	r3, r3, #15
 8009c28:	b2da      	uxtb	r2, r3
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c32:	0d5b      	lsrs	r3, r3, #21
 8009c34:	b2db      	uxtb	r3, r3
 8009c36:	f003 0301 	and.w	r3, r3, #1
 8009c3a:	b2da      	uxtb	r2, r3
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	2200      	movs	r2, #0
 8009c46:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c4e:	0c1b      	lsrs	r3, r3, #16
 8009c50:	b2db      	uxtb	r3, r3
 8009c52:	f003 0301 	and.w	r3, r3, #1
 8009c56:	b2da      	uxtb	r2, r3
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c62:	0bdb      	lsrs	r3, r3, #15
 8009c64:	b2db      	uxtb	r3, r3
 8009c66:	f003 0301 	and.w	r3, r3, #1
 8009c6a:	b2da      	uxtb	r2, r3
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c76:	0b9b      	lsrs	r3, r3, #14
 8009c78:	b2db      	uxtb	r3, r3
 8009c7a:	f003 0301 	and.w	r3, r3, #1
 8009c7e:	b2da      	uxtb	r2, r3
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c8a:	0b5b      	lsrs	r3, r3, #13
 8009c8c:	b2db      	uxtb	r3, r3
 8009c8e:	f003 0301 	and.w	r3, r3, #1
 8009c92:	b2da      	uxtb	r2, r3
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c9e:	0b1b      	lsrs	r3, r3, #12
 8009ca0:	b2db      	uxtb	r3, r3
 8009ca2:	f003 0301 	and.w	r3, r3, #1
 8009ca6:	b2da      	uxtb	r2, r3
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009cb2:	0a9b      	lsrs	r3, r3, #10
 8009cb4:	b2db      	uxtb	r3, r3
 8009cb6:	f003 0303 	and.w	r3, r3, #3
 8009cba:	b2da      	uxtb	r2, r3
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009cc6:	0a1b      	lsrs	r3, r3, #8
 8009cc8:	b2db      	uxtb	r3, r3
 8009cca:	f003 0303 	and.w	r3, r3, #3
 8009cce:	b2da      	uxtb	r2, r3
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009cda:	085b      	lsrs	r3, r3, #1
 8009cdc:	b2db      	uxtb	r3, r3
 8009cde:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009ce2:	b2da      	uxtb	r2, r3
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8009cea:	683b      	ldr	r3, [r7, #0]
 8009cec:	2201      	movs	r2, #1
 8009cee:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8009cf2:	2300      	movs	r3, #0
}
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	370c      	adds	r7, #12
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfe:	4770      	bx	lr
 8009d00:	004005ff 	.word	0x004005ff

08009d04 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009d04:	b480      	push	{r7}
 8009d06:	b083      	sub	sp, #12
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
 8009d0c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8009d4e:	2300      	movs	r3, #0
}
 8009d50:	4618      	mov	r0, r3
 8009d52:	370c      	adds	r7, #12
 8009d54:	46bd      	mov	sp, r7
 8009d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5a:	4770      	bx	lr

08009d5c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b086      	sub	sp, #24
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009d64:	2300      	movs	r3, #0
 8009d66:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009d68:	f107 030c 	add.w	r3, r7, #12
 8009d6c:	4619      	mov	r1, r3
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f000 fa7e 	bl	800a270 <SD_SendStatus>
 8009d74:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009d76:	697b      	ldr	r3, [r7, #20]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d005      	beq.n	8009d88 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009d80:	697b      	ldr	r3, [r7, #20]
 8009d82:	431a      	orrs	r2, r3
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	0a5b      	lsrs	r3, r3, #9
 8009d8c:	f003 030f 	and.w	r3, r3, #15
 8009d90:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8009d92:	693b      	ldr	r3, [r7, #16]
}
 8009d94:	4618      	mov	r0, r3
 8009d96:	3718      	adds	r7, #24
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	bd80      	pop	{r7, pc}

08009d9c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009d9c:	b480      	push	{r7}
 8009d9e:	b085      	sub	sp, #20
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009da8:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009db8:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8009dba:	bf00      	nop
 8009dbc:	3714      	adds	r7, #20
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc4:	4770      	bx	lr

08009dc6 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009dc6:	b580      	push	{r7, lr}
 8009dc8:	b084      	sub	sp, #16
 8009dca:	af00      	add	r7, sp, #0
 8009dcc:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009dd2:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009dd8:	2b82      	cmp	r3, #130	@ 0x82
 8009dda:	d111      	bne.n	8009e00 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	4618      	mov	r0, r3
 8009de2:	f002 faaf 	bl	800c344 <SDMMC_CmdStopTransfer>
 8009de6:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d008      	beq.n	8009e00 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009df2:	68bb      	ldr	r3, [r7, #8]
 8009df4:	431a      	orrs	r2, r3
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8009dfa:	68f8      	ldr	r0, [r7, #12]
 8009dfc:	f7ff fdd4 	bl	80099a8 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	f022 0208 	bic.w	r2, r2, #8
 8009e0e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	f240 523a 	movw	r2, #1338	@ 0x53a
 8009e18:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	2201      	movs	r2, #1
 8009e1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	2200      	movs	r2, #0
 8009e26:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8009e28:	68f8      	ldr	r0, [r7, #12]
 8009e2a:	f004 fb03 	bl	800e434 <HAL_SD_RxCpltCallback>
#endif
}
 8009e2e:	bf00      	nop
 8009e30:	3710      	adds	r7, #16
 8009e32:	46bd      	mov	sp, r7
 8009e34:	bd80      	pop	{r7, pc}
	...

08009e38 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b086      	sub	sp, #24
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e44:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8009e46:	6878      	ldr	r0, [r7, #4]
 8009e48:	f7fc f934 	bl	80060b4 <HAL_DMA_GetError>
 8009e4c:	4603      	mov	r3, r0
 8009e4e:	2b02      	cmp	r3, #2
 8009e50:	d03e      	beq.n	8009ed0 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8009e52:	697b      	ldr	r3, [r7, #20]
 8009e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e58:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8009e5a:	697b      	ldr	r3, [r7, #20]
 8009e5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e60:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8009e62:	693b      	ldr	r3, [r7, #16]
 8009e64:	2b01      	cmp	r3, #1
 8009e66:	d002      	beq.n	8009e6e <SD_DMAError+0x36>
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	2b01      	cmp	r3, #1
 8009e6c:	d12d      	bne.n	8009eca <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009e6e:	697b      	ldr	r3, [r7, #20]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	4a19      	ldr	r2, [pc, #100]	@ (8009ed8 <SD_DMAError+0xa0>)
 8009e74:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8009e76:	697b      	ldr	r3, [r7, #20]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009e7c:	697b      	ldr	r3, [r7, #20]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8009e84:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009e86:	697b      	ldr	r3, [r7, #20]
 8009e88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e8a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009e8e:	697b      	ldr	r3, [r7, #20]
 8009e90:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8009e92:	6978      	ldr	r0, [r7, #20]
 8009e94:	f7ff ff62 	bl	8009d5c <HAL_SD_GetCardState>
 8009e98:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009e9a:	68bb      	ldr	r3, [r7, #8]
 8009e9c:	2b06      	cmp	r3, #6
 8009e9e:	d002      	beq.n	8009ea6 <SD_DMAError+0x6e>
 8009ea0:	68bb      	ldr	r3, [r7, #8]
 8009ea2:	2b05      	cmp	r3, #5
 8009ea4:	d10a      	bne.n	8009ebc <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009ea6:	697b      	ldr	r3, [r7, #20]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	4618      	mov	r0, r3
 8009eac:	f002 fa4a 	bl	800c344 <SDMMC_CmdStopTransfer>
 8009eb0:	4602      	mov	r2, r0
 8009eb2:	697b      	ldr	r3, [r7, #20]
 8009eb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009eb6:	431a      	orrs	r2, r3
 8009eb8:	697b      	ldr	r3, [r7, #20]
 8009eba:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8009ebc:	697b      	ldr	r3, [r7, #20]
 8009ebe:	2201      	movs	r2, #1
 8009ec0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009ec4:	697b      	ldr	r3, [r7, #20]
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8009eca:	6978      	ldr	r0, [r7, #20]
 8009ecc:	f7ff fd6c 	bl	80099a8 <HAL_SD_ErrorCallback>
#endif
  }
}
 8009ed0:	bf00      	nop
 8009ed2:	3718      	adds	r7, #24
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	bd80      	pop	{r7, pc}
 8009ed8:	004005ff 	.word	0x004005ff

08009edc <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b084      	sub	sp, #16
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ee8:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	f240 523a 	movw	r2, #1338	@ 0x53a
 8009ef2:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8009ef4:	68f8      	ldr	r0, [r7, #12]
 8009ef6:	f7ff ff31 	bl	8009d5c <HAL_SD_GetCardState>
 8009efa:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	2201      	movs	r2, #1
 8009f00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	2200      	movs	r2, #0
 8009f08:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009f0a:	68bb      	ldr	r3, [r7, #8]
 8009f0c:	2b06      	cmp	r3, #6
 8009f0e:	d002      	beq.n	8009f16 <SD_DMATxAbort+0x3a>
 8009f10:	68bb      	ldr	r3, [r7, #8]
 8009f12:	2b05      	cmp	r3, #5
 8009f14:	d10a      	bne.n	8009f2c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	f002 fa12 	bl	800c344 <SDMMC_CmdStopTransfer>
 8009f20:	4602      	mov	r2, r0
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f26:	431a      	orrs	r2, r3
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d103      	bne.n	8009f3c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8009f34:	68f8      	ldr	r0, [r7, #12]
 8009f36:	f004 fa69 	bl	800e40c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8009f3a:	e002      	b.n	8009f42 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8009f3c:	68f8      	ldr	r0, [r7, #12]
 8009f3e:	f7ff fd33 	bl	80099a8 <HAL_SD_ErrorCallback>
}
 8009f42:	bf00      	nop
 8009f44:	3710      	adds	r7, #16
 8009f46:	46bd      	mov	sp, r7
 8009f48:	bd80      	pop	{r7, pc}

08009f4a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8009f4a:	b580      	push	{r7, lr}
 8009f4c:	b084      	sub	sp, #16
 8009f4e:	af00      	add	r7, sp, #0
 8009f50:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f56:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	f240 523a 	movw	r2, #1338	@ 0x53a
 8009f60:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8009f62:	68f8      	ldr	r0, [r7, #12]
 8009f64:	f7ff fefa 	bl	8009d5c <HAL_SD_GetCardState>
 8009f68:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	2201      	movs	r2, #1
 8009f6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	2200      	movs	r2, #0
 8009f76:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009f78:	68bb      	ldr	r3, [r7, #8]
 8009f7a:	2b06      	cmp	r3, #6
 8009f7c:	d002      	beq.n	8009f84 <SD_DMARxAbort+0x3a>
 8009f7e:	68bb      	ldr	r3, [r7, #8]
 8009f80:	2b05      	cmp	r3, #5
 8009f82:	d10a      	bne.n	8009f9a <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	4618      	mov	r0, r3
 8009f8a:	f002 f9db 	bl	800c344 <SDMMC_CmdStopTransfer>
 8009f8e:	4602      	mov	r2, r0
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f94:	431a      	orrs	r2, r3
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d103      	bne.n	8009faa <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8009fa2:	68f8      	ldr	r0, [r7, #12]
 8009fa4:	f004 fa32 	bl	800e40c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8009fa8:	e002      	b.n	8009fb0 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8009faa:	68f8      	ldr	r0, [r7, #12]
 8009fac:	f7ff fcfc 	bl	80099a8 <HAL_SD_ErrorCallback>
}
 8009fb0:	bf00      	nop
 8009fb2:	3710      	adds	r7, #16
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	bd80      	pop	{r7, pc}

08009fb8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009fb8:	b5b0      	push	{r4, r5, r7, lr}
 8009fba:	b094      	sub	sp, #80	@ 0x50
 8009fbc:	af04      	add	r7, sp, #16
 8009fbe:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009fc0:	2301      	movs	r3, #1
 8009fc2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	4618      	mov	r0, r3
 8009fca:	f002 f88d 	bl	800c0e8 <SDMMC_GetPowerState>
 8009fce:	4603      	mov	r3, r0
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d102      	bne.n	8009fda <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009fd4:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8009fd8:	e0b8      	b.n	800a14c <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009fde:	2b03      	cmp	r3, #3
 8009fe0:	d02f      	beq.n	800a042 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	f002 fa74 	bl	800c4d4 <SDMMC_CmdSendCID>
 8009fec:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009fee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d001      	beq.n	8009ff8 <SD_InitCard+0x40>
    {
      return errorstate;
 8009ff4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ff6:	e0a9      	b.n	800a14c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	2100      	movs	r1, #0
 8009ffe:	4618      	mov	r0, r3
 800a000:	f002 f8b7 	bl	800c172 <SDMMC_GetResponse>
 800a004:	4602      	mov	r2, r0
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	2104      	movs	r1, #4
 800a010:	4618      	mov	r0, r3
 800a012:	f002 f8ae 	bl	800c172 <SDMMC_GetResponse>
 800a016:	4602      	mov	r2, r0
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	2108      	movs	r1, #8
 800a022:	4618      	mov	r0, r3
 800a024:	f002 f8a5 	bl	800c172 <SDMMC_GetResponse>
 800a028:	4602      	mov	r2, r0
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	210c      	movs	r1, #12
 800a034:	4618      	mov	r0, r3
 800a036:	f002 f89c 	bl	800c172 <SDMMC_GetResponse>
 800a03a:	4602      	mov	r2, r0
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a046:	2b03      	cmp	r3, #3
 800a048:	d00d      	beq.n	800a066 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	f107 020e 	add.w	r2, r7, #14
 800a052:	4611      	mov	r1, r2
 800a054:	4618      	mov	r0, r3
 800a056:	f002 fa7a 	bl	800c54e <SDMMC_CmdSetRelAdd>
 800a05a:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a05c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d001      	beq.n	800a066 <SD_InitCard+0xae>
    {
      return errorstate;
 800a062:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a064:	e072      	b.n	800a14c <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a06a:	2b03      	cmp	r3, #3
 800a06c:	d036      	beq.n	800a0dc <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800a06e:	89fb      	ldrh	r3, [r7, #14]
 800a070:	461a      	mov	r2, r3
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681a      	ldr	r2, [r3, #0]
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a07e:	041b      	lsls	r3, r3, #16
 800a080:	4619      	mov	r1, r3
 800a082:	4610      	mov	r0, r2
 800a084:	f002 fa44 	bl	800c510 <SDMMC_CmdSendCSD>
 800a088:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a08a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d001      	beq.n	800a094 <SD_InitCard+0xdc>
    {
      return errorstate;
 800a090:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a092:	e05b      	b.n	800a14c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	2100      	movs	r1, #0
 800a09a:	4618      	mov	r0, r3
 800a09c:	f002 f869 	bl	800c172 <SDMMC_GetResponse>
 800a0a0:	4602      	mov	r2, r0
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	2104      	movs	r1, #4
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	f002 f860 	bl	800c172 <SDMMC_GetResponse>
 800a0b2:	4602      	mov	r2, r0
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	2108      	movs	r1, #8
 800a0be:	4618      	mov	r0, r3
 800a0c0:	f002 f857 	bl	800c172 <SDMMC_GetResponse>
 800a0c4:	4602      	mov	r2, r0
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	210c      	movs	r1, #12
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	f002 f84e 	bl	800c172 <SDMMC_GetResponse>
 800a0d6:	4602      	mov	r2, r0
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	2104      	movs	r1, #4
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	f002 f845 	bl	800c172 <SDMMC_GetResponse>
 800a0e8:	4603      	mov	r3, r0
 800a0ea:	0d1a      	lsrs	r2, r3, #20
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800a0f0:	f107 0310 	add.w	r3, r7, #16
 800a0f4:	4619      	mov	r1, r3
 800a0f6:	6878      	ldr	r0, [r7, #4]
 800a0f8:	f7ff fc60 	bl	80099bc <HAL_SD_GetCardCSD>
 800a0fc:	4603      	mov	r3, r0
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d002      	beq.n	800a108 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a102:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800a106:	e021      	b.n	800a14c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	6819      	ldr	r1, [r3, #0]
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a110:	041b      	lsls	r3, r3, #16
 800a112:	2200      	movs	r2, #0
 800a114:	461c      	mov	r4, r3
 800a116:	4615      	mov	r5, r2
 800a118:	4622      	mov	r2, r4
 800a11a:	462b      	mov	r3, r5
 800a11c:	4608      	mov	r0, r1
 800a11e:	f002 f933 	bl	800c388 <SDMMC_CmdSelDesel>
 800a122:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800a124:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a126:	2b00      	cmp	r3, #0
 800a128:	d001      	beq.n	800a12e <SD_InitCard+0x176>
  {
    return errorstate;
 800a12a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a12c:	e00e      	b.n	800a14c <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681d      	ldr	r5, [r3, #0]
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	466c      	mov	r4, sp
 800a136:	f103 0210 	add.w	r2, r3, #16
 800a13a:	ca07      	ldmia	r2, {r0, r1, r2}
 800a13c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a140:	3304      	adds	r3, #4
 800a142:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a144:	4628      	mov	r0, r5
 800a146:	f001 ff77 	bl	800c038 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800a14a:	2300      	movs	r3, #0
}
 800a14c:	4618      	mov	r0, r3
 800a14e:	3740      	adds	r7, #64	@ 0x40
 800a150:	46bd      	mov	sp, r7
 800a152:	bdb0      	pop	{r4, r5, r7, pc}

0800a154 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b086      	sub	sp, #24
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a15c:	2300      	movs	r3, #0
 800a15e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800a160:	2300      	movs	r3, #0
 800a162:	617b      	str	r3, [r7, #20]
 800a164:	2300      	movs	r3, #0
 800a166:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	4618      	mov	r0, r3
 800a16e:	f002 f92e 	bl	800c3ce <SDMMC_CmdGoIdleState>
 800a172:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d001      	beq.n	800a17e <SD_PowerON+0x2a>
  {
    return errorstate;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	e072      	b.n	800a264 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	4618      	mov	r0, r3
 800a184:	f002 f941 	bl	800c40a <SDMMC_CmdOperCond>
 800a188:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d00d      	beq.n	800a1ac <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2200      	movs	r2, #0
 800a194:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	4618      	mov	r0, r3
 800a19c:	f002 f917 	bl	800c3ce <SDMMC_CmdGoIdleState>
 800a1a0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d004      	beq.n	800a1b2 <SD_PowerON+0x5e>
    {
      return errorstate;
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	e05b      	b.n	800a264 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2201      	movs	r2, #1
 800a1b0:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a1b6:	2b01      	cmp	r3, #1
 800a1b8:	d137      	bne.n	800a22a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	2100      	movs	r1, #0
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	f002 f941 	bl	800c448 <SDMMC_CmdAppCommand>
 800a1c6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d02d      	beq.n	800a22a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a1ce:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800a1d2:	e047      	b.n	800a264 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	2100      	movs	r1, #0
 800a1da:	4618      	mov	r0, r3
 800a1dc:	f002 f934 	bl	800c448 <SDMMC_CmdAppCommand>
 800a1e0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d001      	beq.n	800a1ec <SD_PowerON+0x98>
    {
      return errorstate;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	e03b      	b.n	800a264 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	491e      	ldr	r1, [pc, #120]	@ (800a26c <SD_PowerON+0x118>)
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	f002 f94a 	bl	800c48c <SDMMC_CmdAppOperCommand>
 800a1f8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d002      	beq.n	800a206 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a200:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800a204:	e02e      	b.n	800a264 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	2100      	movs	r1, #0
 800a20c:	4618      	mov	r0, r3
 800a20e:	f001 ffb0 	bl	800c172 <SDMMC_GetResponse>
 800a212:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800a214:	697b      	ldr	r3, [r7, #20]
 800a216:	0fdb      	lsrs	r3, r3, #31
 800a218:	2b01      	cmp	r3, #1
 800a21a:	d101      	bne.n	800a220 <SD_PowerON+0xcc>
 800a21c:	2301      	movs	r3, #1
 800a21e:	e000      	b.n	800a222 <SD_PowerON+0xce>
 800a220:	2300      	movs	r3, #0
 800a222:	613b      	str	r3, [r7, #16]

    count++;
 800a224:	68bb      	ldr	r3, [r7, #8]
 800a226:	3301      	adds	r3, #1
 800a228:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a22a:	68bb      	ldr	r3, [r7, #8]
 800a22c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800a230:	4293      	cmp	r3, r2
 800a232:	d802      	bhi.n	800a23a <SD_PowerON+0xe6>
 800a234:	693b      	ldr	r3, [r7, #16]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d0cc      	beq.n	800a1d4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800a23a:	68bb      	ldr	r3, [r7, #8]
 800a23c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800a240:	4293      	cmp	r3, r2
 800a242:	d902      	bls.n	800a24a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800a244:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a248:	e00c      	b.n	800a264 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800a24a:	697b      	ldr	r3, [r7, #20]
 800a24c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a250:	2b00      	cmp	r3, #0
 800a252:	d003      	beq.n	800a25c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	2201      	movs	r2, #1
 800a258:	645a      	str	r2, [r3, #68]	@ 0x44
 800a25a:	e002      	b.n	800a262 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2200      	movs	r2, #0
 800a260:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800a262:	2300      	movs	r3, #0
}
 800a264:	4618      	mov	r0, r3
 800a266:	3718      	adds	r7, #24
 800a268:	46bd      	mov	sp, r7
 800a26a:	bd80      	pop	{r7, pc}
 800a26c:	c1100000 	.word	0xc1100000

0800a270 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b084      	sub	sp, #16
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
 800a278:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d102      	bne.n	800a286 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800a280:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a284:	e018      	b.n	800a2b8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681a      	ldr	r2, [r3, #0]
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a28e:	041b      	lsls	r3, r3, #16
 800a290:	4619      	mov	r1, r3
 800a292:	4610      	mov	r0, r2
 800a294:	f002 f97c 	bl	800c590 <SDMMC_CmdSendStatus>
 800a298:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d001      	beq.n	800a2a4 <SD_SendStatus+0x34>
  {
    return errorstate;
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	e009      	b.n	800a2b8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	2100      	movs	r1, #0
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	f001 ff61 	bl	800c172 <SDMMC_GetResponse>
 800a2b0:	4602      	mov	r2, r0
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800a2b6:	2300      	movs	r3, #0
}
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	3710      	adds	r7, #16
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	bd80      	pop	{r7, pc}

0800a2c0 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b086      	sub	sp, #24
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2cc:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2d2:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800a2d4:	693b      	ldr	r3, [r7, #16]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d03f      	beq.n	800a35a <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800a2da:	2300      	movs	r3, #0
 800a2dc:	617b      	str	r3, [r7, #20]
 800a2de:	e033      	b.n	800a348 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	f001 fed3 	bl	800c090 <SDMMC_ReadFIFO>
 800a2ea:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800a2ec:	68bb      	ldr	r3, [r7, #8]
 800a2ee:	b2da      	uxtb	r2, r3
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	3301      	adds	r3, #1
 800a2f8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a2fa:	693b      	ldr	r3, [r7, #16]
 800a2fc:	3b01      	subs	r3, #1
 800a2fe:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800a300:	68bb      	ldr	r3, [r7, #8]
 800a302:	0a1b      	lsrs	r3, r3, #8
 800a304:	b2da      	uxtb	r2, r3
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	3301      	adds	r3, #1
 800a30e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a310:	693b      	ldr	r3, [r7, #16]
 800a312:	3b01      	subs	r3, #1
 800a314:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800a316:	68bb      	ldr	r3, [r7, #8]
 800a318:	0c1b      	lsrs	r3, r3, #16
 800a31a:	b2da      	uxtb	r2, r3
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	3301      	adds	r3, #1
 800a324:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a326:	693b      	ldr	r3, [r7, #16]
 800a328:	3b01      	subs	r3, #1
 800a32a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800a32c:	68bb      	ldr	r3, [r7, #8]
 800a32e:	0e1b      	lsrs	r3, r3, #24
 800a330:	b2da      	uxtb	r2, r3
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	3301      	adds	r3, #1
 800a33a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a33c:	693b      	ldr	r3, [r7, #16]
 800a33e:	3b01      	subs	r3, #1
 800a340:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800a342:	697b      	ldr	r3, [r7, #20]
 800a344:	3301      	adds	r3, #1
 800a346:	617b      	str	r3, [r7, #20]
 800a348:	697b      	ldr	r3, [r7, #20]
 800a34a:	2b07      	cmp	r3, #7
 800a34c:	d9c8      	bls.n	800a2e0 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	68fa      	ldr	r2, [r7, #12]
 800a352:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	693a      	ldr	r2, [r7, #16]
 800a358:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 800a35a:	bf00      	nop
 800a35c:	3718      	adds	r7, #24
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}

0800a362 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800a362:	b580      	push	{r7, lr}
 800a364:	b086      	sub	sp, #24
 800a366:	af00      	add	r7, sp, #0
 800a368:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	6a1b      	ldr	r3, [r3, #32]
 800a36e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a374:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800a376:	693b      	ldr	r3, [r7, #16]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d043      	beq.n	800a404 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800a37c:	2300      	movs	r3, #0
 800a37e:	617b      	str	r3, [r7, #20]
 800a380:	e037      	b.n	800a3f2 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	781b      	ldrb	r3, [r3, #0]
 800a386:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	3301      	adds	r3, #1
 800a38c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a38e:	693b      	ldr	r3, [r7, #16]
 800a390:	3b01      	subs	r3, #1
 800a392:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	781b      	ldrb	r3, [r3, #0]
 800a398:	021a      	lsls	r2, r3, #8
 800a39a:	68bb      	ldr	r3, [r7, #8]
 800a39c:	4313      	orrs	r3, r2
 800a39e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	3301      	adds	r3, #1
 800a3a4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a3a6:	693b      	ldr	r3, [r7, #16]
 800a3a8:	3b01      	subs	r3, #1
 800a3aa:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	781b      	ldrb	r3, [r3, #0]
 800a3b0:	041a      	lsls	r2, r3, #16
 800a3b2:	68bb      	ldr	r3, [r7, #8]
 800a3b4:	4313      	orrs	r3, r2
 800a3b6:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	3301      	adds	r3, #1
 800a3bc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a3be:	693b      	ldr	r3, [r7, #16]
 800a3c0:	3b01      	subs	r3, #1
 800a3c2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	781b      	ldrb	r3, [r3, #0]
 800a3c8:	061a      	lsls	r2, r3, #24
 800a3ca:	68bb      	ldr	r3, [r7, #8]
 800a3cc:	4313      	orrs	r3, r2
 800a3ce:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	3301      	adds	r3, #1
 800a3d4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a3d6:	693b      	ldr	r3, [r7, #16]
 800a3d8:	3b01      	subs	r3, #1
 800a3da:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	f107 0208 	add.w	r2, r7, #8
 800a3e4:	4611      	mov	r1, r2
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	f001 fe5f 	bl	800c0aa <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800a3ec:	697b      	ldr	r3, [r7, #20]
 800a3ee:	3301      	adds	r3, #1
 800a3f0:	617b      	str	r3, [r7, #20]
 800a3f2:	697b      	ldr	r3, [r7, #20]
 800a3f4:	2b07      	cmp	r3, #7
 800a3f6:	d9c4      	bls.n	800a382 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	68fa      	ldr	r2, [r7, #12]
 800a3fc:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	693a      	ldr	r2, [r7, #16]
 800a402:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 800a404:	bf00      	nop
 800a406:	3718      	adds	r7, #24
 800a408:	46bd      	mov	sp, r7
 800a40a:	bd80      	pop	{r7, pc}

0800a40c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b082      	sub	sp, #8
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
 800a414:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d101      	bne.n	800a420 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800a41c:	2301      	movs	r3, #1
 800a41e:	e025      	b.n	800a46c <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800a426:	b2db      	uxtb	r3, r3
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d106      	bne.n	800a43a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	2200      	movs	r2, #0
 800a430:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800a434:	6878      	ldr	r0, [r7, #4]
 800a436:	f7f6 feff 	bl	8001238 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	2202      	movs	r2, #2
 800a43e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681a      	ldr	r2, [r3, #0]
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	3304      	adds	r3, #4
 800a44a:	4619      	mov	r1, r3
 800a44c:	4610      	mov	r0, r2
 800a44e:	f001 fcf1 	bl	800be34 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	6818      	ldr	r0, [r3, #0]
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	685b      	ldr	r3, [r3, #4]
 800a45a:	461a      	mov	r2, r3
 800a45c:	6839      	ldr	r1, [r7, #0]
 800a45e:	f001 fd45 	bl	800beec <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	2201      	movs	r2, #1
 800a466:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800a46a:	2300      	movs	r3, #0
}
 800a46c:	4618      	mov	r0, r3
 800a46e:	3708      	adds	r7, #8
 800a470:	46bd      	mov	sp, r7
 800a472:	bd80      	pop	{r7, pc}

0800a474 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b086      	sub	sp, #24
 800a478:	af00      	add	r7, sp, #0
 800a47a:	60f8      	str	r0, [r7, #12]
 800a47c:	60b9      	str	r1, [r7, #8]
 800a47e:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800a486:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800a488:	7dfb      	ldrb	r3, [r7, #23]
 800a48a:	2b02      	cmp	r3, #2
 800a48c:	d101      	bne.n	800a492 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800a48e:	2302      	movs	r3, #2
 800a490:	e021      	b.n	800a4d6 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800a492:	7dfb      	ldrb	r3, [r7, #23]
 800a494:	2b01      	cmp	r3, #1
 800a496:	d002      	beq.n	800a49e <HAL_SDRAM_SendCommand+0x2a>
 800a498:	7dfb      	ldrb	r3, [r7, #23]
 800a49a:	2b05      	cmp	r3, #5
 800a49c:	d118      	bne.n	800a4d0 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	2202      	movs	r2, #2
 800a4a2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	687a      	ldr	r2, [r7, #4]
 800a4ac:	68b9      	ldr	r1, [r7, #8]
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	f001 fd86 	bl	800bfc0 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a4b4:	68bb      	ldr	r3, [r7, #8]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	2b02      	cmp	r3, #2
 800a4ba:	d104      	bne.n	800a4c6 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	2205      	movs	r2, #5
 800a4c0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a4c4:	e006      	b.n	800a4d4 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	2201      	movs	r2, #1
 800a4ca:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a4ce:	e001      	b.n	800a4d4 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800a4d0:	2301      	movs	r3, #1
 800a4d2:	e000      	b.n	800a4d6 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800a4d4:	2300      	movs	r3, #0
}
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	3718      	adds	r7, #24
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bd80      	pop	{r7, pc}

0800a4de <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800a4de:	b580      	push	{r7, lr}
 800a4e0:	b082      	sub	sp, #8
 800a4e2:	af00      	add	r7, sp, #0
 800a4e4:	6078      	str	r0, [r7, #4]
 800a4e6:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800a4ee:	b2db      	uxtb	r3, r3
 800a4f0:	2b02      	cmp	r3, #2
 800a4f2:	d101      	bne.n	800a4f8 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800a4f4:	2302      	movs	r3, #2
 800a4f6:	e016      	b.n	800a526 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800a4fe:	b2db      	uxtb	r3, r3
 800a500:	2b01      	cmp	r3, #1
 800a502:	d10f      	bne.n	800a524 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	2202      	movs	r2, #2
 800a508:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	6839      	ldr	r1, [r7, #0]
 800a512:	4618      	mov	r0, r3
 800a514:	f001 fd78 	bl	800c008 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2201      	movs	r2, #1
 800a51c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800a520:	2300      	movs	r3, #0
 800a522:	e000      	b.n	800a526 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800a524:	2301      	movs	r3, #1
}
 800a526:	4618      	mov	r0, r3
 800a528:	3708      	adds	r7, #8
 800a52a:	46bd      	mov	sp, r7
 800a52c:	bd80      	pop	{r7, pc}

0800a52e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a52e:	b580      	push	{r7, lr}
 800a530:	b084      	sub	sp, #16
 800a532:	af00      	add	r7, sp, #0
 800a534:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d101      	bne.n	800a540 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a53c:	2301      	movs	r3, #1
 800a53e:	e09d      	b.n	800a67c <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a544:	2b00      	cmp	r3, #0
 800a546:	d108      	bne.n	800a55a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	685b      	ldr	r3, [r3, #4]
 800a54c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a550:	d009      	beq.n	800a566 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	2200      	movs	r2, #0
 800a556:	61da      	str	r2, [r3, #28]
 800a558:	e005      	b.n	800a566 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	2200      	movs	r2, #0
 800a55e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2200      	movs	r2, #0
 800a564:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2200      	movs	r2, #0
 800a56a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a572:	b2db      	uxtb	r3, r3
 800a574:	2b00      	cmp	r3, #0
 800a576:	d106      	bne.n	800a586 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2200      	movs	r2, #0
 800a57c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a580:	6878      	ldr	r0, [r7, #4]
 800a582:	f7f8 fab5 	bl	8002af0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	2202      	movs	r2, #2
 800a58a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	681a      	ldr	r2, [r3, #0]
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a59c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	68db      	ldr	r3, [r3, #12]
 800a5a2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a5a6:	d902      	bls.n	800a5ae <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	60fb      	str	r3, [r7, #12]
 800a5ac:	e002      	b.n	800a5b4 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a5ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a5b2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	68db      	ldr	r3, [r3, #12]
 800a5b8:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800a5bc:	d007      	beq.n	800a5ce <HAL_SPI_Init+0xa0>
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	68db      	ldr	r3, [r3, #12]
 800a5c2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a5c6:	d002      	beq.n	800a5ce <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	685b      	ldr	r3, [r3, #4]
 800a5d2:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	689b      	ldr	r3, [r3, #8]
 800a5da:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800a5de:	431a      	orrs	r2, r3
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	691b      	ldr	r3, [r3, #16]
 800a5e4:	f003 0302 	and.w	r3, r3, #2
 800a5e8:	431a      	orrs	r2, r3
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	695b      	ldr	r3, [r3, #20]
 800a5ee:	f003 0301 	and.w	r3, r3, #1
 800a5f2:	431a      	orrs	r2, r3
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	699b      	ldr	r3, [r3, #24]
 800a5f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a5fc:	431a      	orrs	r2, r3
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	69db      	ldr	r3, [r3, #28]
 800a602:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a606:	431a      	orrs	r2, r3
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	6a1b      	ldr	r3, [r3, #32]
 800a60c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a610:	ea42 0103 	orr.w	r1, r2, r3
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a618:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	430a      	orrs	r2, r1
 800a622:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	699b      	ldr	r3, [r3, #24]
 800a628:	0c1b      	lsrs	r3, r3, #16
 800a62a:	f003 0204 	and.w	r2, r3, #4
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a632:	f003 0310 	and.w	r3, r3, #16
 800a636:	431a      	orrs	r2, r3
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a63c:	f003 0308 	and.w	r3, r3, #8
 800a640:	431a      	orrs	r2, r3
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	68db      	ldr	r3, [r3, #12]
 800a646:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800a64a:	ea42 0103 	orr.w	r1, r2, r3
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	430a      	orrs	r2, r1
 800a65a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	69da      	ldr	r2, [r3, #28]
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a66a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2200      	movs	r2, #0
 800a670:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	2201      	movs	r2, #1
 800a676:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800a67a:	2300      	movs	r3, #0
}
 800a67c:	4618      	mov	r0, r3
 800a67e:	3710      	adds	r7, #16
 800a680:	46bd      	mov	sp, r7
 800a682:	bd80      	pop	{r7, pc}

0800a684 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b088      	sub	sp, #32
 800a688:	af00      	add	r7, sp, #0
 800a68a:	60f8      	str	r0, [r7, #12]
 800a68c:	60b9      	str	r1, [r7, #8]
 800a68e:	603b      	str	r3, [r7, #0]
 800a690:	4613      	mov	r3, r2
 800a692:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a694:	2300      	movs	r3, #0
 800a696:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800a69e:	2b01      	cmp	r3, #1
 800a6a0:	d101      	bne.n	800a6a6 <HAL_SPI_Transmit+0x22>
 800a6a2:	2302      	movs	r3, #2
 800a6a4:	e15f      	b.n	800a966 <HAL_SPI_Transmit+0x2e2>
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	2201      	movs	r2, #1
 800a6aa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a6ae:	f7fa ff45 	bl	800553c <HAL_GetTick>
 800a6b2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800a6b4:	88fb      	ldrh	r3, [r7, #6]
 800a6b6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a6be:	b2db      	uxtb	r3, r3
 800a6c0:	2b01      	cmp	r3, #1
 800a6c2:	d002      	beq.n	800a6ca <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800a6c4:	2302      	movs	r3, #2
 800a6c6:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a6c8:	e148      	b.n	800a95c <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800a6ca:	68bb      	ldr	r3, [r7, #8]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d002      	beq.n	800a6d6 <HAL_SPI_Transmit+0x52>
 800a6d0:	88fb      	ldrh	r3, [r7, #6]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d102      	bne.n	800a6dc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800a6d6:	2301      	movs	r3, #1
 800a6d8:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a6da:	e13f      	b.n	800a95c <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	2203      	movs	r2, #3
 800a6e0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	68ba      	ldr	r2, [r7, #8]
 800a6ee:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	88fa      	ldrh	r2, [r7, #6]
 800a6f4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	88fa      	ldrh	r2, [r7, #6]
 800a6fa:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	2200      	movs	r2, #0
 800a700:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	2200      	movs	r2, #0
 800a706:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	2200      	movs	r2, #0
 800a70e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	2200      	movs	r2, #0
 800a716:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	2200      	movs	r2, #0
 800a71c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	689b      	ldr	r3, [r3, #8]
 800a722:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a726:	d10f      	bne.n	800a748 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	681a      	ldr	r2, [r3, #0]
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a736:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	681a      	ldr	r2, [r3, #0]
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a746:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a752:	2b40      	cmp	r3, #64	@ 0x40
 800a754:	d007      	beq.n	800a766 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	681a      	ldr	r2, [r3, #0]
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a764:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	68db      	ldr	r3, [r3, #12]
 800a76a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a76e:	d94f      	bls.n	800a810 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	685b      	ldr	r3, [r3, #4]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d002      	beq.n	800a77e <HAL_SPI_Transmit+0xfa>
 800a778:	8afb      	ldrh	r3, [r7, #22]
 800a77a:	2b01      	cmp	r3, #1
 800a77c:	d142      	bne.n	800a804 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a782:	881a      	ldrh	r2, [r3, #0]
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a78e:	1c9a      	adds	r2, r3, #2
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a798:	b29b      	uxth	r3, r3
 800a79a:	3b01      	subs	r3, #1
 800a79c:	b29a      	uxth	r2, r3
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a7a2:	e02f      	b.n	800a804 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	689b      	ldr	r3, [r3, #8]
 800a7aa:	f003 0302 	and.w	r3, r3, #2
 800a7ae:	2b02      	cmp	r3, #2
 800a7b0:	d112      	bne.n	800a7d8 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7b6:	881a      	ldrh	r2, [r3, #0]
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7c2:	1c9a      	adds	r2, r3, #2
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a7cc:	b29b      	uxth	r3, r3
 800a7ce:	3b01      	subs	r3, #1
 800a7d0:	b29a      	uxth	r2, r3
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a7d6:	e015      	b.n	800a804 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a7d8:	f7fa feb0 	bl	800553c <HAL_GetTick>
 800a7dc:	4602      	mov	r2, r0
 800a7de:	69bb      	ldr	r3, [r7, #24]
 800a7e0:	1ad3      	subs	r3, r2, r3
 800a7e2:	683a      	ldr	r2, [r7, #0]
 800a7e4:	429a      	cmp	r2, r3
 800a7e6:	d803      	bhi.n	800a7f0 <HAL_SPI_Transmit+0x16c>
 800a7e8:	683b      	ldr	r3, [r7, #0]
 800a7ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7ee:	d102      	bne.n	800a7f6 <HAL_SPI_Transmit+0x172>
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d106      	bne.n	800a804 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800a7f6:	2303      	movs	r3, #3
 800a7f8:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	2201      	movs	r2, #1
 800a7fe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800a802:	e0ab      	b.n	800a95c <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a808:	b29b      	uxth	r3, r3
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d1ca      	bne.n	800a7a4 <HAL_SPI_Transmit+0x120>
 800a80e:	e080      	b.n	800a912 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	685b      	ldr	r3, [r3, #4]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d002      	beq.n	800a81e <HAL_SPI_Transmit+0x19a>
 800a818:	8afb      	ldrh	r3, [r7, #22]
 800a81a:	2b01      	cmp	r3, #1
 800a81c:	d174      	bne.n	800a908 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a822:	b29b      	uxth	r3, r3
 800a824:	2b01      	cmp	r3, #1
 800a826:	d912      	bls.n	800a84e <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a82c:	881a      	ldrh	r2, [r3, #0]
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a838:	1c9a      	adds	r2, r3, #2
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a842:	b29b      	uxth	r3, r3
 800a844:	3b02      	subs	r3, #2
 800a846:	b29a      	uxth	r2, r3
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a84c:	e05c      	b.n	800a908 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	330c      	adds	r3, #12
 800a858:	7812      	ldrb	r2, [r2, #0]
 800a85a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a860:	1c5a      	adds	r2, r3, #1
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a86a:	b29b      	uxth	r3, r3
 800a86c:	3b01      	subs	r3, #1
 800a86e:	b29a      	uxth	r2, r3
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800a874:	e048      	b.n	800a908 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	689b      	ldr	r3, [r3, #8]
 800a87c:	f003 0302 	and.w	r3, r3, #2
 800a880:	2b02      	cmp	r3, #2
 800a882:	d12b      	bne.n	800a8dc <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a888:	b29b      	uxth	r3, r3
 800a88a:	2b01      	cmp	r3, #1
 800a88c:	d912      	bls.n	800a8b4 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a892:	881a      	ldrh	r2, [r3, #0]
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a89e:	1c9a      	adds	r2, r3, #2
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a8a8:	b29b      	uxth	r3, r3
 800a8aa:	3b02      	subs	r3, #2
 800a8ac:	b29a      	uxth	r2, r3
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a8b2:	e029      	b.n	800a908 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	330c      	adds	r3, #12
 800a8be:	7812      	ldrb	r2, [r2, #0]
 800a8c0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8c6:	1c5a      	adds	r2, r3, #1
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a8d0:	b29b      	uxth	r3, r3
 800a8d2:	3b01      	subs	r3, #1
 800a8d4:	b29a      	uxth	r2, r3
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a8da:	e015      	b.n	800a908 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a8dc:	f7fa fe2e 	bl	800553c <HAL_GetTick>
 800a8e0:	4602      	mov	r2, r0
 800a8e2:	69bb      	ldr	r3, [r7, #24]
 800a8e4:	1ad3      	subs	r3, r2, r3
 800a8e6:	683a      	ldr	r2, [r7, #0]
 800a8e8:	429a      	cmp	r2, r3
 800a8ea:	d803      	bhi.n	800a8f4 <HAL_SPI_Transmit+0x270>
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8f2:	d102      	bne.n	800a8fa <HAL_SPI_Transmit+0x276>
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d106      	bne.n	800a908 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800a8fa:	2303      	movs	r3, #3
 800a8fc:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	2201      	movs	r2, #1
 800a902:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800a906:	e029      	b.n	800a95c <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a90c:	b29b      	uxth	r3, r3
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d1b1      	bne.n	800a876 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a912:	69ba      	ldr	r2, [r7, #24]
 800a914:	6839      	ldr	r1, [r7, #0]
 800a916:	68f8      	ldr	r0, [r7, #12]
 800a918:	f000 fd1c 	bl	800b354 <SPI_EndRxTxTransaction>
 800a91c:	4603      	mov	r3, r0
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d002      	beq.n	800a928 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	2220      	movs	r2, #32
 800a926:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	689b      	ldr	r3, [r3, #8]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d10a      	bne.n	800a946 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a930:	2300      	movs	r3, #0
 800a932:	613b      	str	r3, [r7, #16]
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	68db      	ldr	r3, [r3, #12]
 800a93a:	613b      	str	r3, [r7, #16]
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	689b      	ldr	r3, [r3, #8]
 800a942:	613b      	str	r3, [r7, #16]
 800a944:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d002      	beq.n	800a954 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800a94e:	2301      	movs	r3, #1
 800a950:	77fb      	strb	r3, [r7, #31]
 800a952:	e003      	b.n	800a95c <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	2201      	movs	r2, #1
 800a958:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	2200      	movs	r2, #0
 800a960:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800a964:	7ffb      	ldrb	r3, [r7, #31]
}
 800a966:	4618      	mov	r0, r3
 800a968:	3720      	adds	r7, #32
 800a96a:	46bd      	mov	sp, r7
 800a96c:	bd80      	pop	{r7, pc}

0800a96e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a96e:	b580      	push	{r7, lr}
 800a970:	b088      	sub	sp, #32
 800a972:	af02      	add	r7, sp, #8
 800a974:	60f8      	str	r0, [r7, #12]
 800a976:	60b9      	str	r1, [r7, #8]
 800a978:	603b      	str	r3, [r7, #0]
 800a97a:	4613      	mov	r3, r2
 800a97c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a97e:	2300      	movs	r3, #0
 800a980:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a988:	b2db      	uxtb	r3, r3
 800a98a:	2b01      	cmp	r3, #1
 800a98c:	d002      	beq.n	800a994 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800a98e:	2302      	movs	r3, #2
 800a990:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a992:	e11a      	b.n	800abca <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	685b      	ldr	r3, [r3, #4]
 800a998:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a99c:	d112      	bne.n	800a9c4 <HAL_SPI_Receive+0x56>
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	689b      	ldr	r3, [r3, #8]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d10e      	bne.n	800a9c4 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	2204      	movs	r2, #4
 800a9aa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800a9ae:	88fa      	ldrh	r2, [r7, #6]
 800a9b0:	683b      	ldr	r3, [r7, #0]
 800a9b2:	9300      	str	r3, [sp, #0]
 800a9b4:	4613      	mov	r3, r2
 800a9b6:	68ba      	ldr	r2, [r7, #8]
 800a9b8:	68b9      	ldr	r1, [r7, #8]
 800a9ba:	68f8      	ldr	r0, [r7, #12]
 800a9bc:	f000 f90e 	bl	800abdc <HAL_SPI_TransmitReceive>
 800a9c0:	4603      	mov	r3, r0
 800a9c2:	e107      	b.n	800abd4 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800a9ca:	2b01      	cmp	r3, #1
 800a9cc:	d101      	bne.n	800a9d2 <HAL_SPI_Receive+0x64>
 800a9ce:	2302      	movs	r3, #2
 800a9d0:	e100      	b.n	800abd4 <HAL_SPI_Receive+0x266>
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	2201      	movs	r2, #1
 800a9d6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a9da:	f7fa fdaf 	bl	800553c <HAL_GetTick>
 800a9de:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800a9e0:	68bb      	ldr	r3, [r7, #8]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d002      	beq.n	800a9ec <HAL_SPI_Receive+0x7e>
 800a9e6:	88fb      	ldrh	r3, [r7, #6]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d102      	bne.n	800a9f2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800a9ec:	2301      	movs	r3, #1
 800a9ee:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a9f0:	e0eb      	b.n	800abca <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	2204      	movs	r2, #4
 800a9f6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	68ba      	ldr	r2, [r7, #8]
 800aa04:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	88fa      	ldrh	r2, [r7, #6]
 800aa0a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	88fa      	ldrh	r2, [r7, #6]
 800aa12:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	2200      	movs	r2, #0
 800aa1a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	2200      	movs	r2, #0
 800aa20:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	2200      	movs	r2, #0
 800aa26:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	2200      	movs	r2, #0
 800aa32:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	68db      	ldr	r3, [r3, #12]
 800aa38:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800aa3c:	d908      	bls.n	800aa50 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	685a      	ldr	r2, [r3, #4]
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800aa4c:	605a      	str	r2, [r3, #4]
 800aa4e:	e007      	b.n	800aa60 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	685a      	ldr	r2, [r3, #4]
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800aa5e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	689b      	ldr	r3, [r3, #8]
 800aa64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800aa68:	d10f      	bne.n	800aa8a <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	681a      	ldr	r2, [r3, #0]
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800aa78:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	681a      	ldr	r2, [r3, #0]
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800aa88:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa94:	2b40      	cmp	r3, #64	@ 0x40
 800aa96:	d007      	beq.n	800aaa8 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	681a      	ldr	r2, [r3, #0]
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800aaa6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	68db      	ldr	r3, [r3, #12]
 800aaac:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800aab0:	d86f      	bhi.n	800ab92 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800aab2:	e034      	b.n	800ab1e <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	689b      	ldr	r3, [r3, #8]
 800aaba:	f003 0301 	and.w	r3, r3, #1
 800aabe:	2b01      	cmp	r3, #1
 800aac0:	d117      	bne.n	800aaf2 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	f103 020c 	add.w	r2, r3, #12
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aace:	7812      	ldrb	r2, [r2, #0]
 800aad0:	b2d2      	uxtb	r2, r2
 800aad2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aad8:	1c5a      	adds	r2, r3, #1
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800aae4:	b29b      	uxth	r3, r3
 800aae6:	3b01      	subs	r3, #1
 800aae8:	b29a      	uxth	r2, r3
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800aaf0:	e015      	b.n	800ab1e <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800aaf2:	f7fa fd23 	bl	800553c <HAL_GetTick>
 800aaf6:	4602      	mov	r2, r0
 800aaf8:	693b      	ldr	r3, [r7, #16]
 800aafa:	1ad3      	subs	r3, r2, r3
 800aafc:	683a      	ldr	r2, [r7, #0]
 800aafe:	429a      	cmp	r2, r3
 800ab00:	d803      	bhi.n	800ab0a <HAL_SPI_Receive+0x19c>
 800ab02:	683b      	ldr	r3, [r7, #0]
 800ab04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab08:	d102      	bne.n	800ab10 <HAL_SPI_Receive+0x1a2>
 800ab0a:	683b      	ldr	r3, [r7, #0]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d106      	bne.n	800ab1e <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 800ab10:	2303      	movs	r3, #3
 800ab12:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	2201      	movs	r2, #1
 800ab18:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800ab1c:	e055      	b.n	800abca <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800ab24:	b29b      	uxth	r3, r3
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d1c4      	bne.n	800aab4 <HAL_SPI_Receive+0x146>
 800ab2a:	e038      	b.n	800ab9e <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	689b      	ldr	r3, [r3, #8]
 800ab32:	f003 0301 	and.w	r3, r3, #1
 800ab36:	2b01      	cmp	r3, #1
 800ab38:	d115      	bne.n	800ab66 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	68da      	ldr	r2, [r3, #12]
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab44:	b292      	uxth	r2, r2
 800ab46:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab4c:	1c9a      	adds	r2, r3, #2
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800ab58:	b29b      	uxth	r3, r3
 800ab5a:	3b01      	subs	r3, #1
 800ab5c:	b29a      	uxth	r2, r3
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800ab64:	e015      	b.n	800ab92 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ab66:	f7fa fce9 	bl	800553c <HAL_GetTick>
 800ab6a:	4602      	mov	r2, r0
 800ab6c:	693b      	ldr	r3, [r7, #16]
 800ab6e:	1ad3      	subs	r3, r2, r3
 800ab70:	683a      	ldr	r2, [r7, #0]
 800ab72:	429a      	cmp	r2, r3
 800ab74:	d803      	bhi.n	800ab7e <HAL_SPI_Receive+0x210>
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab7c:	d102      	bne.n	800ab84 <HAL_SPI_Receive+0x216>
 800ab7e:	683b      	ldr	r3, [r7, #0]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d106      	bne.n	800ab92 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 800ab84:	2303      	movs	r3, #3
 800ab86:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	2201      	movs	r2, #1
 800ab8c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800ab90:	e01b      	b.n	800abca <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800ab98:	b29b      	uxth	r3, r3
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d1c6      	bne.n	800ab2c <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ab9e:	693a      	ldr	r2, [r7, #16]
 800aba0:	6839      	ldr	r1, [r7, #0]
 800aba2:	68f8      	ldr	r0, [r7, #12]
 800aba4:	f000 fb5a 	bl	800b25c <SPI_EndRxTransaction>
 800aba8:	4603      	mov	r3, r0
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d002      	beq.n	800abb4 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	2220      	movs	r2, #32
 800abb2:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d002      	beq.n	800abc2 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 800abbc:	2301      	movs	r3, #1
 800abbe:	75fb      	strb	r3, [r7, #23]
 800abc0:	e003      	b.n	800abca <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	2201      	movs	r2, #1
 800abc6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	2200      	movs	r2, #0
 800abce:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800abd2:	7dfb      	ldrb	r3, [r7, #23]
}
 800abd4:	4618      	mov	r0, r3
 800abd6:	3718      	adds	r7, #24
 800abd8:	46bd      	mov	sp, r7
 800abda:	bd80      	pop	{r7, pc}

0800abdc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b08a      	sub	sp, #40	@ 0x28
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	60f8      	str	r0, [r7, #12]
 800abe4:	60b9      	str	r1, [r7, #8]
 800abe6:	607a      	str	r2, [r7, #4]
 800abe8:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800abea:	2301      	movs	r3, #1
 800abec:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800abee:	2300      	movs	r3, #0
 800abf0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800abfa:	2b01      	cmp	r3, #1
 800abfc:	d101      	bne.n	800ac02 <HAL_SPI_TransmitReceive+0x26>
 800abfe:	2302      	movs	r3, #2
 800ac00:	e20a      	b.n	800b018 <HAL_SPI_TransmitReceive+0x43c>
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	2201      	movs	r2, #1
 800ac06:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ac0a:	f7fa fc97 	bl	800553c <HAL_GetTick>
 800ac0e:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800ac16:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	685b      	ldr	r3, [r3, #4]
 800ac1c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800ac1e:	887b      	ldrh	r3, [r7, #2]
 800ac20:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800ac22:	887b      	ldrh	r3, [r7, #2]
 800ac24:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800ac26:	7efb      	ldrb	r3, [r7, #27]
 800ac28:	2b01      	cmp	r3, #1
 800ac2a:	d00e      	beq.n	800ac4a <HAL_SPI_TransmitReceive+0x6e>
 800ac2c:	697b      	ldr	r3, [r7, #20]
 800ac2e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ac32:	d106      	bne.n	800ac42 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	689b      	ldr	r3, [r3, #8]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d102      	bne.n	800ac42 <HAL_SPI_TransmitReceive+0x66>
 800ac3c:	7efb      	ldrb	r3, [r7, #27]
 800ac3e:	2b04      	cmp	r3, #4
 800ac40:	d003      	beq.n	800ac4a <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800ac42:	2302      	movs	r3, #2
 800ac44:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800ac48:	e1e0      	b.n	800b00c <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800ac4a:	68bb      	ldr	r3, [r7, #8]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d005      	beq.n	800ac5c <HAL_SPI_TransmitReceive+0x80>
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d002      	beq.n	800ac5c <HAL_SPI_TransmitReceive+0x80>
 800ac56:	887b      	ldrh	r3, [r7, #2]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d103      	bne.n	800ac64 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800ac5c:	2301      	movs	r3, #1
 800ac5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800ac62:	e1d3      	b.n	800b00c <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800ac6a:	b2db      	uxtb	r3, r3
 800ac6c:	2b04      	cmp	r3, #4
 800ac6e:	d003      	beq.n	800ac78 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	2205      	movs	r2, #5
 800ac74:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	687a      	ldr	r2, [r7, #4]
 800ac82:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	887a      	ldrh	r2, [r7, #2]
 800ac88:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	887a      	ldrh	r2, [r7, #2]
 800ac90:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	68ba      	ldr	r2, [r7, #8]
 800ac98:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	887a      	ldrh	r2, [r7, #2]
 800ac9e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	887a      	ldrh	r2, [r7, #2]
 800aca4:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	2200      	movs	r2, #0
 800acaa:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	2200      	movs	r2, #0
 800acb0:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	68db      	ldr	r3, [r3, #12]
 800acb6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800acba:	d802      	bhi.n	800acc2 <HAL_SPI_TransmitReceive+0xe6>
 800acbc:	8a3b      	ldrh	r3, [r7, #16]
 800acbe:	2b01      	cmp	r3, #1
 800acc0:	d908      	bls.n	800acd4 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	685a      	ldr	r2, [r3, #4]
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800acd0:	605a      	str	r2, [r3, #4]
 800acd2:	e007      	b.n	800ace4 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	685a      	ldr	r2, [r3, #4]
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800ace2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800acee:	2b40      	cmp	r3, #64	@ 0x40
 800acf0:	d007      	beq.n	800ad02 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	681a      	ldr	r2, [r3, #0]
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ad00:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	68db      	ldr	r3, [r3, #12]
 800ad06:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800ad0a:	f240 8081 	bls.w	800ae10 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	685b      	ldr	r3, [r3, #4]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d002      	beq.n	800ad1c <HAL_SPI_TransmitReceive+0x140>
 800ad16:	8a7b      	ldrh	r3, [r7, #18]
 800ad18:	2b01      	cmp	r3, #1
 800ad1a:	d16d      	bne.n	800adf8 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad20:	881a      	ldrh	r2, [r3, #0]
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad2c:	1c9a      	adds	r2, r3, #2
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ad36:	b29b      	uxth	r3, r3
 800ad38:	3b01      	subs	r3, #1
 800ad3a:	b29a      	uxth	r2, r3
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ad40:	e05a      	b.n	800adf8 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	689b      	ldr	r3, [r3, #8]
 800ad48:	f003 0302 	and.w	r3, r3, #2
 800ad4c:	2b02      	cmp	r3, #2
 800ad4e:	d11b      	bne.n	800ad88 <HAL_SPI_TransmitReceive+0x1ac>
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ad54:	b29b      	uxth	r3, r3
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d016      	beq.n	800ad88 <HAL_SPI_TransmitReceive+0x1ac>
 800ad5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad5c:	2b01      	cmp	r3, #1
 800ad5e:	d113      	bne.n	800ad88 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad64:	881a      	ldrh	r2, [r3, #0]
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad70:	1c9a      	adds	r2, r3, #2
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ad7a:	b29b      	uxth	r3, r3
 800ad7c:	3b01      	subs	r3, #1
 800ad7e:	b29a      	uxth	r2, r3
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ad84:	2300      	movs	r3, #0
 800ad86:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	689b      	ldr	r3, [r3, #8]
 800ad8e:	f003 0301 	and.w	r3, r3, #1
 800ad92:	2b01      	cmp	r3, #1
 800ad94:	d11c      	bne.n	800add0 <HAL_SPI_TransmitReceive+0x1f4>
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800ad9c:	b29b      	uxth	r3, r3
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d016      	beq.n	800add0 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	68da      	ldr	r2, [r3, #12]
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800adac:	b292      	uxth	r2, r2
 800adae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800adb4:	1c9a      	adds	r2, r3, #2
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800adc0:	b29b      	uxth	r3, r3
 800adc2:	3b01      	subs	r3, #1
 800adc4:	b29a      	uxth	r2, r3
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800adcc:	2301      	movs	r3, #1
 800adce:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800add0:	f7fa fbb4 	bl	800553c <HAL_GetTick>
 800add4:	4602      	mov	r2, r0
 800add6:	69fb      	ldr	r3, [r7, #28]
 800add8:	1ad3      	subs	r3, r2, r3
 800adda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800addc:	429a      	cmp	r2, r3
 800adde:	d80b      	bhi.n	800adf8 <HAL_SPI_TransmitReceive+0x21c>
 800ade0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ade2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ade6:	d007      	beq.n	800adf8 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800ade8:	2303      	movs	r3, #3
 800adea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	2201      	movs	r2, #1
 800adf2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800adf6:	e109      	b.n	800b00c <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800adfc:	b29b      	uxth	r3, r3
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d19f      	bne.n	800ad42 <HAL_SPI_TransmitReceive+0x166>
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800ae08:	b29b      	uxth	r3, r3
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d199      	bne.n	800ad42 <HAL_SPI_TransmitReceive+0x166>
 800ae0e:	e0e3      	b.n	800afd8 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	685b      	ldr	r3, [r3, #4]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d003      	beq.n	800ae20 <HAL_SPI_TransmitReceive+0x244>
 800ae18:	8a7b      	ldrh	r3, [r7, #18]
 800ae1a:	2b01      	cmp	r3, #1
 800ae1c:	f040 80cf 	bne.w	800afbe <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ae24:	b29b      	uxth	r3, r3
 800ae26:	2b01      	cmp	r3, #1
 800ae28:	d912      	bls.n	800ae50 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae2e:	881a      	ldrh	r2, [r3, #0]
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae3a:	1c9a      	adds	r2, r3, #2
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ae44:	b29b      	uxth	r3, r3
 800ae46:	3b02      	subs	r3, #2
 800ae48:	b29a      	uxth	r2, r3
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800ae4e:	e0b6      	b.n	800afbe <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	330c      	adds	r3, #12
 800ae5a:	7812      	ldrb	r2, [r2, #0]
 800ae5c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae62:	1c5a      	adds	r2, r3, #1
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ae6c:	b29b      	uxth	r3, r3
 800ae6e:	3b01      	subs	r3, #1
 800ae70:	b29a      	uxth	r2, r3
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ae76:	e0a2      	b.n	800afbe <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	689b      	ldr	r3, [r3, #8]
 800ae7e:	f003 0302 	and.w	r3, r3, #2
 800ae82:	2b02      	cmp	r3, #2
 800ae84:	d134      	bne.n	800aef0 <HAL_SPI_TransmitReceive+0x314>
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ae8a:	b29b      	uxth	r3, r3
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d02f      	beq.n	800aef0 <HAL_SPI_TransmitReceive+0x314>
 800ae90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae92:	2b01      	cmp	r3, #1
 800ae94:	d12c      	bne.n	800aef0 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ae9a:	b29b      	uxth	r3, r3
 800ae9c:	2b01      	cmp	r3, #1
 800ae9e:	d912      	bls.n	800aec6 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aea4:	881a      	ldrh	r2, [r3, #0]
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aeb0:	1c9a      	adds	r2, r3, #2
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800aeba:	b29b      	uxth	r3, r3
 800aebc:	3b02      	subs	r3, #2
 800aebe:	b29a      	uxth	r2, r3
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800aec4:	e012      	b.n	800aeec <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	330c      	adds	r3, #12
 800aed0:	7812      	ldrb	r2, [r2, #0]
 800aed2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aed8:	1c5a      	adds	r2, r3, #1
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800aee2:	b29b      	uxth	r3, r3
 800aee4:	3b01      	subs	r3, #1
 800aee6:	b29a      	uxth	r2, r3
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800aeec:	2300      	movs	r3, #0
 800aeee:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	689b      	ldr	r3, [r3, #8]
 800aef6:	f003 0301 	and.w	r3, r3, #1
 800aefa:	2b01      	cmp	r3, #1
 800aefc:	d148      	bne.n	800af90 <HAL_SPI_TransmitReceive+0x3b4>
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800af04:	b29b      	uxth	r3, r3
 800af06:	2b00      	cmp	r3, #0
 800af08:	d042      	beq.n	800af90 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800af10:	b29b      	uxth	r3, r3
 800af12:	2b01      	cmp	r3, #1
 800af14:	d923      	bls.n	800af5e <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	68da      	ldr	r2, [r3, #12]
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af20:	b292      	uxth	r2, r2
 800af22:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af28:	1c9a      	adds	r2, r3, #2
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800af34:	b29b      	uxth	r3, r3
 800af36:	3b02      	subs	r3, #2
 800af38:	b29a      	uxth	r2, r3
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800af46:	b29b      	uxth	r3, r3
 800af48:	2b01      	cmp	r3, #1
 800af4a:	d81f      	bhi.n	800af8c <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	685a      	ldr	r2, [r3, #4]
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800af5a:	605a      	str	r2, [r3, #4]
 800af5c:	e016      	b.n	800af8c <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	f103 020c 	add.w	r2, r3, #12
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af6a:	7812      	ldrb	r2, [r2, #0]
 800af6c:	b2d2      	uxtb	r2, r2
 800af6e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af74:	1c5a      	adds	r2, r3, #1
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800af80:	b29b      	uxth	r3, r3
 800af82:	3b01      	subs	r3, #1
 800af84:	b29a      	uxth	r2, r3
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800af8c:	2301      	movs	r3, #1
 800af8e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800af90:	f7fa fad4 	bl	800553c <HAL_GetTick>
 800af94:	4602      	mov	r2, r0
 800af96:	69fb      	ldr	r3, [r7, #28]
 800af98:	1ad3      	subs	r3, r2, r3
 800af9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af9c:	429a      	cmp	r2, r3
 800af9e:	d803      	bhi.n	800afa8 <HAL_SPI_TransmitReceive+0x3cc>
 800afa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afa6:	d102      	bne.n	800afae <HAL_SPI_TransmitReceive+0x3d2>
 800afa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d107      	bne.n	800afbe <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800afae:	2303      	movs	r3, #3
 800afb0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	2201      	movs	r2, #1
 800afb8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800afbc:	e026      	b.n	800b00c <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800afc2:	b29b      	uxth	r3, r3
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	f47f af57 	bne.w	800ae78 <HAL_SPI_TransmitReceive+0x29c>
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800afd0:	b29b      	uxth	r3, r3
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	f47f af50 	bne.w	800ae78 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800afd8:	69fa      	ldr	r2, [r7, #28]
 800afda:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800afdc:	68f8      	ldr	r0, [r7, #12]
 800afde:	f000 f9b9 	bl	800b354 <SPI_EndRxTxTransaction>
 800afe2:	4603      	mov	r3, r0
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d005      	beq.n	800aff4 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800afe8:	2301      	movs	r3, #1
 800afea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	2220      	movs	r2, #32
 800aff2:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d003      	beq.n	800b004 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800affc:	2301      	movs	r3, #1
 800affe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b002:	e003      	b.n	800b00c <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	2201      	movs	r2, #1
 800b008:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	2200      	movs	r2, #0
 800b010:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800b014:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800b018:	4618      	mov	r0, r3
 800b01a:	3728      	adds	r7, #40	@ 0x28
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bd80      	pop	{r7, pc}

0800b020 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b088      	sub	sp, #32
 800b024:	af00      	add	r7, sp, #0
 800b026:	60f8      	str	r0, [r7, #12]
 800b028:	60b9      	str	r1, [r7, #8]
 800b02a:	603b      	str	r3, [r7, #0]
 800b02c:	4613      	mov	r3, r2
 800b02e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b030:	f7fa fa84 	bl	800553c <HAL_GetTick>
 800b034:	4602      	mov	r2, r0
 800b036:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b038:	1a9b      	subs	r3, r3, r2
 800b03a:	683a      	ldr	r2, [r7, #0]
 800b03c:	4413      	add	r3, r2
 800b03e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b040:	f7fa fa7c 	bl	800553c <HAL_GetTick>
 800b044:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b046:	4b39      	ldr	r3, [pc, #228]	@ (800b12c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	015b      	lsls	r3, r3, #5
 800b04c:	0d1b      	lsrs	r3, r3, #20
 800b04e:	69fa      	ldr	r2, [r7, #28]
 800b050:	fb02 f303 	mul.w	r3, r2, r3
 800b054:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b056:	e054      	b.n	800b102 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b058:	683b      	ldr	r3, [r7, #0]
 800b05a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b05e:	d050      	beq.n	800b102 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b060:	f7fa fa6c 	bl	800553c <HAL_GetTick>
 800b064:	4602      	mov	r2, r0
 800b066:	69bb      	ldr	r3, [r7, #24]
 800b068:	1ad3      	subs	r3, r2, r3
 800b06a:	69fa      	ldr	r2, [r7, #28]
 800b06c:	429a      	cmp	r2, r3
 800b06e:	d902      	bls.n	800b076 <SPI_WaitFlagStateUntilTimeout+0x56>
 800b070:	69fb      	ldr	r3, [r7, #28]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d13d      	bne.n	800b0f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	685a      	ldr	r2, [r3, #4]
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800b084:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	685b      	ldr	r3, [r3, #4]
 800b08a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b08e:	d111      	bne.n	800b0b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	689b      	ldr	r3, [r3, #8]
 800b094:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b098:	d004      	beq.n	800b0a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	689b      	ldr	r3, [r3, #8]
 800b09e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b0a2:	d107      	bne.n	800b0b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	681a      	ldr	r2, [r3, #0]
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b0b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b0bc:	d10f      	bne.n	800b0de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	681a      	ldr	r2, [r3, #0]
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800b0cc:	601a      	str	r2, [r3, #0]
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	681a      	ldr	r2, [r3, #0]
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800b0dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	2201      	movs	r2, #1
 800b0e2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800b0ee:	2303      	movs	r3, #3
 800b0f0:	e017      	b.n	800b122 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b0f2:	697b      	ldr	r3, [r7, #20]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d101      	bne.n	800b0fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800b0fc:	697b      	ldr	r3, [r7, #20]
 800b0fe:	3b01      	subs	r3, #1
 800b100:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	689a      	ldr	r2, [r3, #8]
 800b108:	68bb      	ldr	r3, [r7, #8]
 800b10a:	4013      	ands	r3, r2
 800b10c:	68ba      	ldr	r2, [r7, #8]
 800b10e:	429a      	cmp	r2, r3
 800b110:	bf0c      	ite	eq
 800b112:	2301      	moveq	r3, #1
 800b114:	2300      	movne	r3, #0
 800b116:	b2db      	uxtb	r3, r3
 800b118:	461a      	mov	r2, r3
 800b11a:	79fb      	ldrb	r3, [r7, #7]
 800b11c:	429a      	cmp	r2, r3
 800b11e:	d19b      	bne.n	800b058 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800b120:	2300      	movs	r3, #0
}
 800b122:	4618      	mov	r0, r3
 800b124:	3720      	adds	r7, #32
 800b126:	46bd      	mov	sp, r7
 800b128:	bd80      	pop	{r7, pc}
 800b12a:	bf00      	nop
 800b12c:	200000c0 	.word	0x200000c0

0800b130 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b130:	b580      	push	{r7, lr}
 800b132:	b08a      	sub	sp, #40	@ 0x28
 800b134:	af00      	add	r7, sp, #0
 800b136:	60f8      	str	r0, [r7, #12]
 800b138:	60b9      	str	r1, [r7, #8]
 800b13a:	607a      	str	r2, [r7, #4]
 800b13c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800b13e:	2300      	movs	r3, #0
 800b140:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800b142:	f7fa f9fb 	bl	800553c <HAL_GetTick>
 800b146:	4602      	mov	r2, r0
 800b148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b14a:	1a9b      	subs	r3, r3, r2
 800b14c:	683a      	ldr	r2, [r7, #0]
 800b14e:	4413      	add	r3, r2
 800b150:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800b152:	f7fa f9f3 	bl	800553c <HAL_GetTick>
 800b156:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	330c      	adds	r3, #12
 800b15e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800b160:	4b3d      	ldr	r3, [pc, #244]	@ (800b258 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800b162:	681a      	ldr	r2, [r3, #0]
 800b164:	4613      	mov	r3, r2
 800b166:	009b      	lsls	r3, r3, #2
 800b168:	4413      	add	r3, r2
 800b16a:	00da      	lsls	r2, r3, #3
 800b16c:	1ad3      	subs	r3, r2, r3
 800b16e:	0d1b      	lsrs	r3, r3, #20
 800b170:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b172:	fb02 f303 	mul.w	r3, r2, r3
 800b176:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800b178:	e060      	b.n	800b23c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800b17a:	68bb      	ldr	r3, [r7, #8]
 800b17c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800b180:	d107      	bne.n	800b192 <SPI_WaitFifoStateUntilTimeout+0x62>
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d104      	bne.n	800b192 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800b188:	69fb      	ldr	r3, [r7, #28]
 800b18a:	781b      	ldrb	r3, [r3, #0]
 800b18c:	b2db      	uxtb	r3, r3
 800b18e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800b190:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b198:	d050      	beq.n	800b23c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b19a:	f7fa f9cf 	bl	800553c <HAL_GetTick>
 800b19e:	4602      	mov	r2, r0
 800b1a0:	6a3b      	ldr	r3, [r7, #32]
 800b1a2:	1ad3      	subs	r3, r2, r3
 800b1a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b1a6:	429a      	cmp	r2, r3
 800b1a8:	d902      	bls.n	800b1b0 <SPI_WaitFifoStateUntilTimeout+0x80>
 800b1aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d13d      	bne.n	800b22c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	685a      	ldr	r2, [r3, #4]
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800b1be:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	685b      	ldr	r3, [r3, #4]
 800b1c4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b1c8:	d111      	bne.n	800b1ee <SPI_WaitFifoStateUntilTimeout+0xbe>
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	689b      	ldr	r3, [r3, #8]
 800b1ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b1d2:	d004      	beq.n	800b1de <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	689b      	ldr	r3, [r3, #8]
 800b1d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b1dc:	d107      	bne.n	800b1ee <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	681a      	ldr	r2, [r3, #0]
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b1ec:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b1f6:	d10f      	bne.n	800b218 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	681a      	ldr	r2, [r3, #0]
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800b206:	601a      	str	r2, [r3, #0]
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	681a      	ldr	r2, [r3, #0]
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800b216:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	2201      	movs	r2, #1
 800b21c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	2200      	movs	r2, #0
 800b224:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800b228:	2303      	movs	r3, #3
 800b22a:	e010      	b.n	800b24e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b22c:	69bb      	ldr	r3, [r7, #24]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d101      	bne.n	800b236 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800b232:	2300      	movs	r3, #0
 800b234:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800b236:	69bb      	ldr	r3, [r7, #24]
 800b238:	3b01      	subs	r3, #1
 800b23a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	689a      	ldr	r2, [r3, #8]
 800b242:	68bb      	ldr	r3, [r7, #8]
 800b244:	4013      	ands	r3, r2
 800b246:	687a      	ldr	r2, [r7, #4]
 800b248:	429a      	cmp	r2, r3
 800b24a:	d196      	bne.n	800b17a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800b24c:	2300      	movs	r3, #0
}
 800b24e:	4618      	mov	r0, r3
 800b250:	3728      	adds	r7, #40	@ 0x28
 800b252:	46bd      	mov	sp, r7
 800b254:	bd80      	pop	{r7, pc}
 800b256:	bf00      	nop
 800b258:	200000c0 	.word	0x200000c0

0800b25c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b088      	sub	sp, #32
 800b260:	af02      	add	r7, sp, #8
 800b262:	60f8      	str	r0, [r7, #12]
 800b264:	60b9      	str	r1, [r7, #8]
 800b266:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	685b      	ldr	r3, [r3, #4]
 800b26c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b270:	d111      	bne.n	800b296 <SPI_EndRxTransaction+0x3a>
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	689b      	ldr	r3, [r3, #8]
 800b276:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b27a:	d004      	beq.n	800b286 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	689b      	ldr	r3, [r3, #8]
 800b280:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b284:	d107      	bne.n	800b296 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	681a      	ldr	r2, [r3, #0]
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b294:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	685b      	ldr	r3, [r3, #4]
 800b29a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b29e:	d112      	bne.n	800b2c6 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	9300      	str	r3, [sp, #0]
 800b2a4:	68bb      	ldr	r3, [r7, #8]
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	2180      	movs	r1, #128	@ 0x80
 800b2aa:	68f8      	ldr	r0, [r7, #12]
 800b2ac:	f7ff feb8 	bl	800b020 <SPI_WaitFlagStateUntilTimeout>
 800b2b0:	4603      	mov	r3, r0
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d021      	beq.n	800b2fa <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b2ba:	f043 0220 	orr.w	r2, r3, #32
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800b2c2:	2303      	movs	r3, #3
 800b2c4:	e03d      	b.n	800b342 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800b2c6:	4b21      	ldr	r3, [pc, #132]	@ (800b34c <SPI_EndRxTransaction+0xf0>)
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	4a21      	ldr	r2, [pc, #132]	@ (800b350 <SPI_EndRxTransaction+0xf4>)
 800b2cc:	fba2 2303 	umull	r2, r3, r2, r3
 800b2d0:	0d5b      	lsrs	r3, r3, #21
 800b2d2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b2d6:	fb02 f303 	mul.w	r3, r2, r3
 800b2da:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800b2dc:	697b      	ldr	r3, [r7, #20]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d00a      	beq.n	800b2f8 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 800b2e2:	697b      	ldr	r3, [r7, #20]
 800b2e4:	3b01      	subs	r3, #1
 800b2e6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	689b      	ldr	r3, [r3, #8]
 800b2ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b2f2:	2b80      	cmp	r3, #128	@ 0x80
 800b2f4:	d0f2      	beq.n	800b2dc <SPI_EndRxTransaction+0x80>
 800b2f6:	e000      	b.n	800b2fa <SPI_EndRxTransaction+0x9e>
        break;
 800b2f8:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	685b      	ldr	r3, [r3, #4]
 800b2fe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b302:	d11d      	bne.n	800b340 <SPI_EndRxTransaction+0xe4>
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	689b      	ldr	r3, [r3, #8]
 800b308:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b30c:	d004      	beq.n	800b318 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	689b      	ldr	r3, [r3, #8]
 800b312:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b316:	d113      	bne.n	800b340 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	9300      	str	r3, [sp, #0]
 800b31c:	68bb      	ldr	r3, [r7, #8]
 800b31e:	2200      	movs	r2, #0
 800b320:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800b324:	68f8      	ldr	r0, [r7, #12]
 800b326:	f7ff ff03 	bl	800b130 <SPI_WaitFifoStateUntilTimeout>
 800b32a:	4603      	mov	r3, r0
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d007      	beq.n	800b340 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b334:	f043 0220 	orr.w	r2, r3, #32
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800b33c:	2303      	movs	r3, #3
 800b33e:	e000      	b.n	800b342 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 800b340:	2300      	movs	r3, #0
}
 800b342:	4618      	mov	r0, r3
 800b344:	3718      	adds	r7, #24
 800b346:	46bd      	mov	sp, r7
 800b348:	bd80      	pop	{r7, pc}
 800b34a:	bf00      	nop
 800b34c:	200000c0 	.word	0x200000c0
 800b350:	165e9f81 	.word	0x165e9f81

0800b354 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b088      	sub	sp, #32
 800b358:	af02      	add	r7, sp, #8
 800b35a:	60f8      	str	r0, [r7, #12]
 800b35c:	60b9      	str	r1, [r7, #8]
 800b35e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	9300      	str	r3, [sp, #0]
 800b364:	68bb      	ldr	r3, [r7, #8]
 800b366:	2200      	movs	r2, #0
 800b368:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800b36c:	68f8      	ldr	r0, [r7, #12]
 800b36e:	f7ff fedf 	bl	800b130 <SPI_WaitFifoStateUntilTimeout>
 800b372:	4603      	mov	r3, r0
 800b374:	2b00      	cmp	r3, #0
 800b376:	d007      	beq.n	800b388 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b37c:	f043 0220 	orr.w	r2, r3, #32
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800b384:	2303      	movs	r3, #3
 800b386:	e046      	b.n	800b416 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800b388:	4b25      	ldr	r3, [pc, #148]	@ (800b420 <SPI_EndRxTxTransaction+0xcc>)
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	4a25      	ldr	r2, [pc, #148]	@ (800b424 <SPI_EndRxTxTransaction+0xd0>)
 800b38e:	fba2 2303 	umull	r2, r3, r2, r3
 800b392:	0d5b      	lsrs	r3, r3, #21
 800b394:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b398:	fb02 f303 	mul.w	r3, r2, r3
 800b39c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	685b      	ldr	r3, [r3, #4]
 800b3a2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b3a6:	d112      	bne.n	800b3ce <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	9300      	str	r3, [sp, #0]
 800b3ac:	68bb      	ldr	r3, [r7, #8]
 800b3ae:	2200      	movs	r2, #0
 800b3b0:	2180      	movs	r1, #128	@ 0x80
 800b3b2:	68f8      	ldr	r0, [r7, #12]
 800b3b4:	f7ff fe34 	bl	800b020 <SPI_WaitFlagStateUntilTimeout>
 800b3b8:	4603      	mov	r3, r0
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d016      	beq.n	800b3ec <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b3c2:	f043 0220 	orr.w	r2, r3, #32
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800b3ca:	2303      	movs	r3, #3
 800b3cc:	e023      	b.n	800b416 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800b3ce:	697b      	ldr	r3, [r7, #20]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d00a      	beq.n	800b3ea <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 800b3d4:	697b      	ldr	r3, [r7, #20]
 800b3d6:	3b01      	subs	r3, #1
 800b3d8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	689b      	ldr	r3, [r3, #8]
 800b3e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b3e4:	2b80      	cmp	r3, #128	@ 0x80
 800b3e6:	d0f2      	beq.n	800b3ce <SPI_EndRxTxTransaction+0x7a>
 800b3e8:	e000      	b.n	800b3ec <SPI_EndRxTxTransaction+0x98>
        break;
 800b3ea:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	9300      	str	r3, [sp, #0]
 800b3f0:	68bb      	ldr	r3, [r7, #8]
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800b3f8:	68f8      	ldr	r0, [r7, #12]
 800b3fa:	f7ff fe99 	bl	800b130 <SPI_WaitFifoStateUntilTimeout>
 800b3fe:	4603      	mov	r3, r0
 800b400:	2b00      	cmp	r3, #0
 800b402:	d007      	beq.n	800b414 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b408:	f043 0220 	orr.w	r2, r3, #32
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800b410:	2303      	movs	r3, #3
 800b412:	e000      	b.n	800b416 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 800b414:	2300      	movs	r3, #0
}
 800b416:	4618      	mov	r0, r3
 800b418:	3718      	adds	r7, #24
 800b41a:	46bd      	mov	sp, r7
 800b41c:	bd80      	pop	{r7, pc}
 800b41e:	bf00      	nop
 800b420:	200000c0 	.word	0x200000c0
 800b424:	165e9f81 	.word	0x165e9f81

0800b428 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b082      	sub	sp, #8
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	2b00      	cmp	r3, #0
 800b434:	d101      	bne.n	800b43a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b436:	2301      	movs	r3, #1
 800b438:	e040      	b.n	800b4bc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d106      	bne.n	800b450 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	2200      	movs	r2, #0
 800b446:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b44a:	6878      	ldr	r0, [r7, #4]
 800b44c:	f7f7 fd2c 	bl	8002ea8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2224      	movs	r2, #36	@ 0x24
 800b454:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	681a      	ldr	r2, [r3, #0]
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	f022 0201 	bic.w	r2, r2, #1
 800b464:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d002      	beq.n	800b474 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800b46e:	6878      	ldr	r0, [r7, #4]
 800b470:	f000 fb16 	bl	800baa0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b474:	6878      	ldr	r0, [r7, #4]
 800b476:	f000 f8af 	bl	800b5d8 <UART_SetConfig>
 800b47a:	4603      	mov	r3, r0
 800b47c:	2b01      	cmp	r3, #1
 800b47e:	d101      	bne.n	800b484 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800b480:	2301      	movs	r3, #1
 800b482:	e01b      	b.n	800b4bc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	685a      	ldr	r2, [r3, #4]
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b492:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	689a      	ldr	r2, [r3, #8]
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b4a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	681a      	ldr	r2, [r3, #0]
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	f042 0201 	orr.w	r2, r2, #1
 800b4b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b4b4:	6878      	ldr	r0, [r7, #4]
 800b4b6:	f000 fb95 	bl	800bbe4 <UART_CheckIdleState>
 800b4ba:	4603      	mov	r3, r0
}
 800b4bc:	4618      	mov	r0, r3
 800b4be:	3708      	adds	r7, #8
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	bd80      	pop	{r7, pc}

0800b4c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b08a      	sub	sp, #40	@ 0x28
 800b4c8:	af02      	add	r7, sp, #8
 800b4ca:	60f8      	str	r0, [r7, #12]
 800b4cc:	60b9      	str	r1, [r7, #8]
 800b4ce:	603b      	str	r3, [r7, #0]
 800b4d0:	4613      	mov	r3, r2
 800b4d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b4d8:	2b20      	cmp	r3, #32
 800b4da:	d177      	bne.n	800b5cc <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800b4dc:	68bb      	ldr	r3, [r7, #8]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d002      	beq.n	800b4e8 <HAL_UART_Transmit+0x24>
 800b4e2:	88fb      	ldrh	r3, [r7, #6]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d101      	bne.n	800b4ec <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800b4e8:	2301      	movs	r3, #1
 800b4ea:	e070      	b.n	800b5ce <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	2221      	movs	r2, #33	@ 0x21
 800b4f8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b4fa:	f7fa f81f 	bl	800553c <HAL_GetTick>
 800b4fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	88fa      	ldrh	r2, [r7, #6]
 800b504:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	88fa      	ldrh	r2, [r7, #6]
 800b50c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	689b      	ldr	r3, [r3, #8]
 800b514:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b518:	d108      	bne.n	800b52c <HAL_UART_Transmit+0x68>
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	691b      	ldr	r3, [r3, #16]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d104      	bne.n	800b52c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800b522:	2300      	movs	r3, #0
 800b524:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b526:	68bb      	ldr	r3, [r7, #8]
 800b528:	61bb      	str	r3, [r7, #24]
 800b52a:	e003      	b.n	800b534 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800b52c:	68bb      	ldr	r3, [r7, #8]
 800b52e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b530:	2300      	movs	r3, #0
 800b532:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b534:	e02f      	b.n	800b596 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b536:	683b      	ldr	r3, [r7, #0]
 800b538:	9300      	str	r3, [sp, #0]
 800b53a:	697b      	ldr	r3, [r7, #20]
 800b53c:	2200      	movs	r2, #0
 800b53e:	2180      	movs	r1, #128	@ 0x80
 800b540:	68f8      	ldr	r0, [r7, #12]
 800b542:	f000 fba6 	bl	800bc92 <UART_WaitOnFlagUntilTimeout>
 800b546:	4603      	mov	r3, r0
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d004      	beq.n	800b556 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	2220      	movs	r2, #32
 800b550:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800b552:	2303      	movs	r3, #3
 800b554:	e03b      	b.n	800b5ce <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800b556:	69fb      	ldr	r3, [r7, #28]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d10b      	bne.n	800b574 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b55c:	69bb      	ldr	r3, [r7, #24]
 800b55e:	881b      	ldrh	r3, [r3, #0]
 800b560:	461a      	mov	r2, r3
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b56a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800b56c:	69bb      	ldr	r3, [r7, #24]
 800b56e:	3302      	adds	r3, #2
 800b570:	61bb      	str	r3, [r7, #24]
 800b572:	e007      	b.n	800b584 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b574:	69fb      	ldr	r3, [r7, #28]
 800b576:	781a      	ldrb	r2, [r3, #0]
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800b57e:	69fb      	ldr	r3, [r7, #28]
 800b580:	3301      	adds	r3, #1
 800b582:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800b58a:	b29b      	uxth	r3, r3
 800b58c:	3b01      	subs	r3, #1
 800b58e:	b29a      	uxth	r2, r3
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800b59c:	b29b      	uxth	r3, r3
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d1c9      	bne.n	800b536 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b5a2:	683b      	ldr	r3, [r7, #0]
 800b5a4:	9300      	str	r3, [sp, #0]
 800b5a6:	697b      	ldr	r3, [r7, #20]
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	2140      	movs	r1, #64	@ 0x40
 800b5ac:	68f8      	ldr	r0, [r7, #12]
 800b5ae:	f000 fb70 	bl	800bc92 <UART_WaitOnFlagUntilTimeout>
 800b5b2:	4603      	mov	r3, r0
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d004      	beq.n	800b5c2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	2220      	movs	r2, #32
 800b5bc:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800b5be:	2303      	movs	r3, #3
 800b5c0:	e005      	b.n	800b5ce <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	2220      	movs	r2, #32
 800b5c6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	e000      	b.n	800b5ce <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800b5cc:	2302      	movs	r3, #2
  }
}
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	3720      	adds	r7, #32
 800b5d2:	46bd      	mov	sp, r7
 800b5d4:	bd80      	pop	{r7, pc}
	...

0800b5d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b088      	sub	sp, #32
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	689a      	ldr	r2, [r3, #8]
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	691b      	ldr	r3, [r3, #16]
 800b5ec:	431a      	orrs	r2, r3
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	695b      	ldr	r3, [r3, #20]
 800b5f2:	431a      	orrs	r2, r3
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	69db      	ldr	r3, [r3, #28]
 800b5f8:	4313      	orrs	r3, r2
 800b5fa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	681a      	ldr	r2, [r3, #0]
 800b602:	4ba6      	ldr	r3, [pc, #664]	@ (800b89c <UART_SetConfig+0x2c4>)
 800b604:	4013      	ands	r3, r2
 800b606:	687a      	ldr	r2, [r7, #4]
 800b608:	6812      	ldr	r2, [r2, #0]
 800b60a:	6979      	ldr	r1, [r7, #20]
 800b60c:	430b      	orrs	r3, r1
 800b60e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	685b      	ldr	r3, [r3, #4]
 800b616:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	68da      	ldr	r2, [r3, #12]
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	430a      	orrs	r2, r1
 800b624:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	699b      	ldr	r3, [r3, #24]
 800b62a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	6a1b      	ldr	r3, [r3, #32]
 800b630:	697a      	ldr	r2, [r7, #20]
 800b632:	4313      	orrs	r3, r2
 800b634:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	689b      	ldr	r3, [r3, #8]
 800b63c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	697a      	ldr	r2, [r7, #20]
 800b646:	430a      	orrs	r2, r1
 800b648:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	4a94      	ldr	r2, [pc, #592]	@ (800b8a0 <UART_SetConfig+0x2c8>)
 800b650:	4293      	cmp	r3, r2
 800b652:	d120      	bne.n	800b696 <UART_SetConfig+0xbe>
 800b654:	4b93      	ldr	r3, [pc, #588]	@ (800b8a4 <UART_SetConfig+0x2cc>)
 800b656:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b65a:	f003 0303 	and.w	r3, r3, #3
 800b65e:	2b03      	cmp	r3, #3
 800b660:	d816      	bhi.n	800b690 <UART_SetConfig+0xb8>
 800b662:	a201      	add	r2, pc, #4	@ (adr r2, 800b668 <UART_SetConfig+0x90>)
 800b664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b668:	0800b679 	.word	0x0800b679
 800b66c:	0800b685 	.word	0x0800b685
 800b670:	0800b67f 	.word	0x0800b67f
 800b674:	0800b68b 	.word	0x0800b68b
 800b678:	2301      	movs	r3, #1
 800b67a:	77fb      	strb	r3, [r7, #31]
 800b67c:	e150      	b.n	800b920 <UART_SetConfig+0x348>
 800b67e:	2302      	movs	r3, #2
 800b680:	77fb      	strb	r3, [r7, #31]
 800b682:	e14d      	b.n	800b920 <UART_SetConfig+0x348>
 800b684:	2304      	movs	r3, #4
 800b686:	77fb      	strb	r3, [r7, #31]
 800b688:	e14a      	b.n	800b920 <UART_SetConfig+0x348>
 800b68a:	2308      	movs	r3, #8
 800b68c:	77fb      	strb	r3, [r7, #31]
 800b68e:	e147      	b.n	800b920 <UART_SetConfig+0x348>
 800b690:	2310      	movs	r3, #16
 800b692:	77fb      	strb	r3, [r7, #31]
 800b694:	e144      	b.n	800b920 <UART_SetConfig+0x348>
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	4a83      	ldr	r2, [pc, #524]	@ (800b8a8 <UART_SetConfig+0x2d0>)
 800b69c:	4293      	cmp	r3, r2
 800b69e:	d132      	bne.n	800b706 <UART_SetConfig+0x12e>
 800b6a0:	4b80      	ldr	r3, [pc, #512]	@ (800b8a4 <UART_SetConfig+0x2cc>)
 800b6a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b6a6:	f003 030c 	and.w	r3, r3, #12
 800b6aa:	2b0c      	cmp	r3, #12
 800b6ac:	d828      	bhi.n	800b700 <UART_SetConfig+0x128>
 800b6ae:	a201      	add	r2, pc, #4	@ (adr r2, 800b6b4 <UART_SetConfig+0xdc>)
 800b6b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6b4:	0800b6e9 	.word	0x0800b6e9
 800b6b8:	0800b701 	.word	0x0800b701
 800b6bc:	0800b701 	.word	0x0800b701
 800b6c0:	0800b701 	.word	0x0800b701
 800b6c4:	0800b6f5 	.word	0x0800b6f5
 800b6c8:	0800b701 	.word	0x0800b701
 800b6cc:	0800b701 	.word	0x0800b701
 800b6d0:	0800b701 	.word	0x0800b701
 800b6d4:	0800b6ef 	.word	0x0800b6ef
 800b6d8:	0800b701 	.word	0x0800b701
 800b6dc:	0800b701 	.word	0x0800b701
 800b6e0:	0800b701 	.word	0x0800b701
 800b6e4:	0800b6fb 	.word	0x0800b6fb
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	77fb      	strb	r3, [r7, #31]
 800b6ec:	e118      	b.n	800b920 <UART_SetConfig+0x348>
 800b6ee:	2302      	movs	r3, #2
 800b6f0:	77fb      	strb	r3, [r7, #31]
 800b6f2:	e115      	b.n	800b920 <UART_SetConfig+0x348>
 800b6f4:	2304      	movs	r3, #4
 800b6f6:	77fb      	strb	r3, [r7, #31]
 800b6f8:	e112      	b.n	800b920 <UART_SetConfig+0x348>
 800b6fa:	2308      	movs	r3, #8
 800b6fc:	77fb      	strb	r3, [r7, #31]
 800b6fe:	e10f      	b.n	800b920 <UART_SetConfig+0x348>
 800b700:	2310      	movs	r3, #16
 800b702:	77fb      	strb	r3, [r7, #31]
 800b704:	e10c      	b.n	800b920 <UART_SetConfig+0x348>
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	4a68      	ldr	r2, [pc, #416]	@ (800b8ac <UART_SetConfig+0x2d4>)
 800b70c:	4293      	cmp	r3, r2
 800b70e:	d120      	bne.n	800b752 <UART_SetConfig+0x17a>
 800b710:	4b64      	ldr	r3, [pc, #400]	@ (800b8a4 <UART_SetConfig+0x2cc>)
 800b712:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b716:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800b71a:	2b30      	cmp	r3, #48	@ 0x30
 800b71c:	d013      	beq.n	800b746 <UART_SetConfig+0x16e>
 800b71e:	2b30      	cmp	r3, #48	@ 0x30
 800b720:	d814      	bhi.n	800b74c <UART_SetConfig+0x174>
 800b722:	2b20      	cmp	r3, #32
 800b724:	d009      	beq.n	800b73a <UART_SetConfig+0x162>
 800b726:	2b20      	cmp	r3, #32
 800b728:	d810      	bhi.n	800b74c <UART_SetConfig+0x174>
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d002      	beq.n	800b734 <UART_SetConfig+0x15c>
 800b72e:	2b10      	cmp	r3, #16
 800b730:	d006      	beq.n	800b740 <UART_SetConfig+0x168>
 800b732:	e00b      	b.n	800b74c <UART_SetConfig+0x174>
 800b734:	2300      	movs	r3, #0
 800b736:	77fb      	strb	r3, [r7, #31]
 800b738:	e0f2      	b.n	800b920 <UART_SetConfig+0x348>
 800b73a:	2302      	movs	r3, #2
 800b73c:	77fb      	strb	r3, [r7, #31]
 800b73e:	e0ef      	b.n	800b920 <UART_SetConfig+0x348>
 800b740:	2304      	movs	r3, #4
 800b742:	77fb      	strb	r3, [r7, #31]
 800b744:	e0ec      	b.n	800b920 <UART_SetConfig+0x348>
 800b746:	2308      	movs	r3, #8
 800b748:	77fb      	strb	r3, [r7, #31]
 800b74a:	e0e9      	b.n	800b920 <UART_SetConfig+0x348>
 800b74c:	2310      	movs	r3, #16
 800b74e:	77fb      	strb	r3, [r7, #31]
 800b750:	e0e6      	b.n	800b920 <UART_SetConfig+0x348>
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	4a56      	ldr	r2, [pc, #344]	@ (800b8b0 <UART_SetConfig+0x2d8>)
 800b758:	4293      	cmp	r3, r2
 800b75a:	d120      	bne.n	800b79e <UART_SetConfig+0x1c6>
 800b75c:	4b51      	ldr	r3, [pc, #324]	@ (800b8a4 <UART_SetConfig+0x2cc>)
 800b75e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b762:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800b766:	2bc0      	cmp	r3, #192	@ 0xc0
 800b768:	d013      	beq.n	800b792 <UART_SetConfig+0x1ba>
 800b76a:	2bc0      	cmp	r3, #192	@ 0xc0
 800b76c:	d814      	bhi.n	800b798 <UART_SetConfig+0x1c0>
 800b76e:	2b80      	cmp	r3, #128	@ 0x80
 800b770:	d009      	beq.n	800b786 <UART_SetConfig+0x1ae>
 800b772:	2b80      	cmp	r3, #128	@ 0x80
 800b774:	d810      	bhi.n	800b798 <UART_SetConfig+0x1c0>
 800b776:	2b00      	cmp	r3, #0
 800b778:	d002      	beq.n	800b780 <UART_SetConfig+0x1a8>
 800b77a:	2b40      	cmp	r3, #64	@ 0x40
 800b77c:	d006      	beq.n	800b78c <UART_SetConfig+0x1b4>
 800b77e:	e00b      	b.n	800b798 <UART_SetConfig+0x1c0>
 800b780:	2300      	movs	r3, #0
 800b782:	77fb      	strb	r3, [r7, #31]
 800b784:	e0cc      	b.n	800b920 <UART_SetConfig+0x348>
 800b786:	2302      	movs	r3, #2
 800b788:	77fb      	strb	r3, [r7, #31]
 800b78a:	e0c9      	b.n	800b920 <UART_SetConfig+0x348>
 800b78c:	2304      	movs	r3, #4
 800b78e:	77fb      	strb	r3, [r7, #31]
 800b790:	e0c6      	b.n	800b920 <UART_SetConfig+0x348>
 800b792:	2308      	movs	r3, #8
 800b794:	77fb      	strb	r3, [r7, #31]
 800b796:	e0c3      	b.n	800b920 <UART_SetConfig+0x348>
 800b798:	2310      	movs	r3, #16
 800b79a:	77fb      	strb	r3, [r7, #31]
 800b79c:	e0c0      	b.n	800b920 <UART_SetConfig+0x348>
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	4a44      	ldr	r2, [pc, #272]	@ (800b8b4 <UART_SetConfig+0x2dc>)
 800b7a4:	4293      	cmp	r3, r2
 800b7a6:	d125      	bne.n	800b7f4 <UART_SetConfig+0x21c>
 800b7a8:	4b3e      	ldr	r3, [pc, #248]	@ (800b8a4 <UART_SetConfig+0x2cc>)
 800b7aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b7ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b7b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b7b6:	d017      	beq.n	800b7e8 <UART_SetConfig+0x210>
 800b7b8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b7bc:	d817      	bhi.n	800b7ee <UART_SetConfig+0x216>
 800b7be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b7c2:	d00b      	beq.n	800b7dc <UART_SetConfig+0x204>
 800b7c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b7c8:	d811      	bhi.n	800b7ee <UART_SetConfig+0x216>
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d003      	beq.n	800b7d6 <UART_SetConfig+0x1fe>
 800b7ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b7d2:	d006      	beq.n	800b7e2 <UART_SetConfig+0x20a>
 800b7d4:	e00b      	b.n	800b7ee <UART_SetConfig+0x216>
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	77fb      	strb	r3, [r7, #31]
 800b7da:	e0a1      	b.n	800b920 <UART_SetConfig+0x348>
 800b7dc:	2302      	movs	r3, #2
 800b7de:	77fb      	strb	r3, [r7, #31]
 800b7e0:	e09e      	b.n	800b920 <UART_SetConfig+0x348>
 800b7e2:	2304      	movs	r3, #4
 800b7e4:	77fb      	strb	r3, [r7, #31]
 800b7e6:	e09b      	b.n	800b920 <UART_SetConfig+0x348>
 800b7e8:	2308      	movs	r3, #8
 800b7ea:	77fb      	strb	r3, [r7, #31]
 800b7ec:	e098      	b.n	800b920 <UART_SetConfig+0x348>
 800b7ee:	2310      	movs	r3, #16
 800b7f0:	77fb      	strb	r3, [r7, #31]
 800b7f2:	e095      	b.n	800b920 <UART_SetConfig+0x348>
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	4a2f      	ldr	r2, [pc, #188]	@ (800b8b8 <UART_SetConfig+0x2e0>)
 800b7fa:	4293      	cmp	r3, r2
 800b7fc:	d125      	bne.n	800b84a <UART_SetConfig+0x272>
 800b7fe:	4b29      	ldr	r3, [pc, #164]	@ (800b8a4 <UART_SetConfig+0x2cc>)
 800b800:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b804:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b808:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b80c:	d017      	beq.n	800b83e <UART_SetConfig+0x266>
 800b80e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b812:	d817      	bhi.n	800b844 <UART_SetConfig+0x26c>
 800b814:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b818:	d00b      	beq.n	800b832 <UART_SetConfig+0x25a>
 800b81a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b81e:	d811      	bhi.n	800b844 <UART_SetConfig+0x26c>
 800b820:	2b00      	cmp	r3, #0
 800b822:	d003      	beq.n	800b82c <UART_SetConfig+0x254>
 800b824:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b828:	d006      	beq.n	800b838 <UART_SetConfig+0x260>
 800b82a:	e00b      	b.n	800b844 <UART_SetConfig+0x26c>
 800b82c:	2301      	movs	r3, #1
 800b82e:	77fb      	strb	r3, [r7, #31]
 800b830:	e076      	b.n	800b920 <UART_SetConfig+0x348>
 800b832:	2302      	movs	r3, #2
 800b834:	77fb      	strb	r3, [r7, #31]
 800b836:	e073      	b.n	800b920 <UART_SetConfig+0x348>
 800b838:	2304      	movs	r3, #4
 800b83a:	77fb      	strb	r3, [r7, #31]
 800b83c:	e070      	b.n	800b920 <UART_SetConfig+0x348>
 800b83e:	2308      	movs	r3, #8
 800b840:	77fb      	strb	r3, [r7, #31]
 800b842:	e06d      	b.n	800b920 <UART_SetConfig+0x348>
 800b844:	2310      	movs	r3, #16
 800b846:	77fb      	strb	r3, [r7, #31]
 800b848:	e06a      	b.n	800b920 <UART_SetConfig+0x348>
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	4a1b      	ldr	r2, [pc, #108]	@ (800b8bc <UART_SetConfig+0x2e4>)
 800b850:	4293      	cmp	r3, r2
 800b852:	d138      	bne.n	800b8c6 <UART_SetConfig+0x2ee>
 800b854:	4b13      	ldr	r3, [pc, #76]	@ (800b8a4 <UART_SetConfig+0x2cc>)
 800b856:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b85a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800b85e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b862:	d017      	beq.n	800b894 <UART_SetConfig+0x2bc>
 800b864:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b868:	d82a      	bhi.n	800b8c0 <UART_SetConfig+0x2e8>
 800b86a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b86e:	d00b      	beq.n	800b888 <UART_SetConfig+0x2b0>
 800b870:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b874:	d824      	bhi.n	800b8c0 <UART_SetConfig+0x2e8>
 800b876:	2b00      	cmp	r3, #0
 800b878:	d003      	beq.n	800b882 <UART_SetConfig+0x2aa>
 800b87a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b87e:	d006      	beq.n	800b88e <UART_SetConfig+0x2b6>
 800b880:	e01e      	b.n	800b8c0 <UART_SetConfig+0x2e8>
 800b882:	2300      	movs	r3, #0
 800b884:	77fb      	strb	r3, [r7, #31]
 800b886:	e04b      	b.n	800b920 <UART_SetConfig+0x348>
 800b888:	2302      	movs	r3, #2
 800b88a:	77fb      	strb	r3, [r7, #31]
 800b88c:	e048      	b.n	800b920 <UART_SetConfig+0x348>
 800b88e:	2304      	movs	r3, #4
 800b890:	77fb      	strb	r3, [r7, #31]
 800b892:	e045      	b.n	800b920 <UART_SetConfig+0x348>
 800b894:	2308      	movs	r3, #8
 800b896:	77fb      	strb	r3, [r7, #31]
 800b898:	e042      	b.n	800b920 <UART_SetConfig+0x348>
 800b89a:	bf00      	nop
 800b89c:	efff69f3 	.word	0xefff69f3
 800b8a0:	40011000 	.word	0x40011000
 800b8a4:	40023800 	.word	0x40023800
 800b8a8:	40004400 	.word	0x40004400
 800b8ac:	40004800 	.word	0x40004800
 800b8b0:	40004c00 	.word	0x40004c00
 800b8b4:	40005000 	.word	0x40005000
 800b8b8:	40011400 	.word	0x40011400
 800b8bc:	40007800 	.word	0x40007800
 800b8c0:	2310      	movs	r3, #16
 800b8c2:	77fb      	strb	r3, [r7, #31]
 800b8c4:	e02c      	b.n	800b920 <UART_SetConfig+0x348>
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	4a72      	ldr	r2, [pc, #456]	@ (800ba94 <UART_SetConfig+0x4bc>)
 800b8cc:	4293      	cmp	r3, r2
 800b8ce:	d125      	bne.n	800b91c <UART_SetConfig+0x344>
 800b8d0:	4b71      	ldr	r3, [pc, #452]	@ (800ba98 <UART_SetConfig+0x4c0>)
 800b8d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b8d6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800b8da:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800b8de:	d017      	beq.n	800b910 <UART_SetConfig+0x338>
 800b8e0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800b8e4:	d817      	bhi.n	800b916 <UART_SetConfig+0x33e>
 800b8e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b8ea:	d00b      	beq.n	800b904 <UART_SetConfig+0x32c>
 800b8ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b8f0:	d811      	bhi.n	800b916 <UART_SetConfig+0x33e>
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d003      	beq.n	800b8fe <UART_SetConfig+0x326>
 800b8f6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b8fa:	d006      	beq.n	800b90a <UART_SetConfig+0x332>
 800b8fc:	e00b      	b.n	800b916 <UART_SetConfig+0x33e>
 800b8fe:	2300      	movs	r3, #0
 800b900:	77fb      	strb	r3, [r7, #31]
 800b902:	e00d      	b.n	800b920 <UART_SetConfig+0x348>
 800b904:	2302      	movs	r3, #2
 800b906:	77fb      	strb	r3, [r7, #31]
 800b908:	e00a      	b.n	800b920 <UART_SetConfig+0x348>
 800b90a:	2304      	movs	r3, #4
 800b90c:	77fb      	strb	r3, [r7, #31]
 800b90e:	e007      	b.n	800b920 <UART_SetConfig+0x348>
 800b910:	2308      	movs	r3, #8
 800b912:	77fb      	strb	r3, [r7, #31]
 800b914:	e004      	b.n	800b920 <UART_SetConfig+0x348>
 800b916:	2310      	movs	r3, #16
 800b918:	77fb      	strb	r3, [r7, #31]
 800b91a:	e001      	b.n	800b920 <UART_SetConfig+0x348>
 800b91c:	2310      	movs	r3, #16
 800b91e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	69db      	ldr	r3, [r3, #28]
 800b924:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b928:	d15b      	bne.n	800b9e2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800b92a:	7ffb      	ldrb	r3, [r7, #31]
 800b92c:	2b08      	cmp	r3, #8
 800b92e:	d828      	bhi.n	800b982 <UART_SetConfig+0x3aa>
 800b930:	a201      	add	r2, pc, #4	@ (adr r2, 800b938 <UART_SetConfig+0x360>)
 800b932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b936:	bf00      	nop
 800b938:	0800b95d 	.word	0x0800b95d
 800b93c:	0800b965 	.word	0x0800b965
 800b940:	0800b96d 	.word	0x0800b96d
 800b944:	0800b983 	.word	0x0800b983
 800b948:	0800b973 	.word	0x0800b973
 800b94c:	0800b983 	.word	0x0800b983
 800b950:	0800b983 	.word	0x0800b983
 800b954:	0800b983 	.word	0x0800b983
 800b958:	0800b97b 	.word	0x0800b97b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b95c:	f7fc fa28 	bl	8007db0 <HAL_RCC_GetPCLK1Freq>
 800b960:	61b8      	str	r0, [r7, #24]
        break;
 800b962:	e013      	b.n	800b98c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b964:	f7fc fa38 	bl	8007dd8 <HAL_RCC_GetPCLK2Freq>
 800b968:	61b8      	str	r0, [r7, #24]
        break;
 800b96a:	e00f      	b.n	800b98c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b96c:	4b4b      	ldr	r3, [pc, #300]	@ (800ba9c <UART_SetConfig+0x4c4>)
 800b96e:	61bb      	str	r3, [r7, #24]
        break;
 800b970:	e00c      	b.n	800b98c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b972:	f7fc f94b 	bl	8007c0c <HAL_RCC_GetSysClockFreq>
 800b976:	61b8      	str	r0, [r7, #24]
        break;
 800b978:	e008      	b.n	800b98c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b97a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b97e:	61bb      	str	r3, [r7, #24]
        break;
 800b980:	e004      	b.n	800b98c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800b982:	2300      	movs	r3, #0
 800b984:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b986:	2301      	movs	r3, #1
 800b988:	77bb      	strb	r3, [r7, #30]
        break;
 800b98a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b98c:	69bb      	ldr	r3, [r7, #24]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d074      	beq.n	800ba7c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b992:	69bb      	ldr	r3, [r7, #24]
 800b994:	005a      	lsls	r2, r3, #1
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	685b      	ldr	r3, [r3, #4]
 800b99a:	085b      	lsrs	r3, r3, #1
 800b99c:	441a      	add	r2, r3
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	685b      	ldr	r3, [r3, #4]
 800b9a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b9a6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b9a8:	693b      	ldr	r3, [r7, #16]
 800b9aa:	2b0f      	cmp	r3, #15
 800b9ac:	d916      	bls.n	800b9dc <UART_SetConfig+0x404>
 800b9ae:	693b      	ldr	r3, [r7, #16]
 800b9b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b9b4:	d212      	bcs.n	800b9dc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b9b6:	693b      	ldr	r3, [r7, #16]
 800b9b8:	b29b      	uxth	r3, r3
 800b9ba:	f023 030f 	bic.w	r3, r3, #15
 800b9be:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b9c0:	693b      	ldr	r3, [r7, #16]
 800b9c2:	085b      	lsrs	r3, r3, #1
 800b9c4:	b29b      	uxth	r3, r3
 800b9c6:	f003 0307 	and.w	r3, r3, #7
 800b9ca:	b29a      	uxth	r2, r3
 800b9cc:	89fb      	ldrh	r3, [r7, #14]
 800b9ce:	4313      	orrs	r3, r2
 800b9d0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	89fa      	ldrh	r2, [r7, #14]
 800b9d8:	60da      	str	r2, [r3, #12]
 800b9da:	e04f      	b.n	800ba7c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800b9dc:	2301      	movs	r3, #1
 800b9de:	77bb      	strb	r3, [r7, #30]
 800b9e0:	e04c      	b.n	800ba7c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b9e2:	7ffb      	ldrb	r3, [r7, #31]
 800b9e4:	2b08      	cmp	r3, #8
 800b9e6:	d828      	bhi.n	800ba3a <UART_SetConfig+0x462>
 800b9e8:	a201      	add	r2, pc, #4	@ (adr r2, 800b9f0 <UART_SetConfig+0x418>)
 800b9ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9ee:	bf00      	nop
 800b9f0:	0800ba15 	.word	0x0800ba15
 800b9f4:	0800ba1d 	.word	0x0800ba1d
 800b9f8:	0800ba25 	.word	0x0800ba25
 800b9fc:	0800ba3b 	.word	0x0800ba3b
 800ba00:	0800ba2b 	.word	0x0800ba2b
 800ba04:	0800ba3b 	.word	0x0800ba3b
 800ba08:	0800ba3b 	.word	0x0800ba3b
 800ba0c:	0800ba3b 	.word	0x0800ba3b
 800ba10:	0800ba33 	.word	0x0800ba33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ba14:	f7fc f9cc 	bl	8007db0 <HAL_RCC_GetPCLK1Freq>
 800ba18:	61b8      	str	r0, [r7, #24]
        break;
 800ba1a:	e013      	b.n	800ba44 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ba1c:	f7fc f9dc 	bl	8007dd8 <HAL_RCC_GetPCLK2Freq>
 800ba20:	61b8      	str	r0, [r7, #24]
        break;
 800ba22:	e00f      	b.n	800ba44 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ba24:	4b1d      	ldr	r3, [pc, #116]	@ (800ba9c <UART_SetConfig+0x4c4>)
 800ba26:	61bb      	str	r3, [r7, #24]
        break;
 800ba28:	e00c      	b.n	800ba44 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ba2a:	f7fc f8ef 	bl	8007c0c <HAL_RCC_GetSysClockFreq>
 800ba2e:	61b8      	str	r0, [r7, #24]
        break;
 800ba30:	e008      	b.n	800ba44 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ba32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ba36:	61bb      	str	r3, [r7, #24]
        break;
 800ba38:	e004      	b.n	800ba44 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800ba3e:	2301      	movs	r3, #1
 800ba40:	77bb      	strb	r3, [r7, #30]
        break;
 800ba42:	bf00      	nop
    }

    if (pclk != 0U)
 800ba44:	69bb      	ldr	r3, [r7, #24]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d018      	beq.n	800ba7c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	685b      	ldr	r3, [r3, #4]
 800ba4e:	085a      	lsrs	r2, r3, #1
 800ba50:	69bb      	ldr	r3, [r7, #24]
 800ba52:	441a      	add	r2, r3
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	685b      	ldr	r3, [r3, #4]
 800ba58:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba5c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ba5e:	693b      	ldr	r3, [r7, #16]
 800ba60:	2b0f      	cmp	r3, #15
 800ba62:	d909      	bls.n	800ba78 <UART_SetConfig+0x4a0>
 800ba64:	693b      	ldr	r3, [r7, #16]
 800ba66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ba6a:	d205      	bcs.n	800ba78 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ba6c:	693b      	ldr	r3, [r7, #16]
 800ba6e:	b29a      	uxth	r2, r3
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	60da      	str	r2, [r3, #12]
 800ba76:	e001      	b.n	800ba7c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800ba78:	2301      	movs	r3, #1
 800ba7a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	2200      	movs	r2, #0
 800ba80:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	2200      	movs	r2, #0
 800ba86:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800ba88:	7fbb      	ldrb	r3, [r7, #30]
}
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	3720      	adds	r7, #32
 800ba8e:	46bd      	mov	sp, r7
 800ba90:	bd80      	pop	{r7, pc}
 800ba92:	bf00      	nop
 800ba94:	40007c00 	.word	0x40007c00
 800ba98:	40023800 	.word	0x40023800
 800ba9c:	00f42400 	.word	0x00f42400

0800baa0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800baa0:	b480      	push	{r7}
 800baa2:	b083      	sub	sp, #12
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800baac:	f003 0308 	and.w	r3, r3, #8
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d00a      	beq.n	800baca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	685b      	ldr	r3, [r3, #4]
 800baba:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	430a      	orrs	r2, r1
 800bac8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bace:	f003 0301 	and.w	r3, r3, #1
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d00a      	beq.n	800baec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	685b      	ldr	r3, [r3, #4]
 800badc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	430a      	orrs	r2, r1
 800baea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800baf0:	f003 0302 	and.w	r3, r3, #2
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d00a      	beq.n	800bb0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	685b      	ldr	r3, [r3, #4]
 800bafe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	430a      	orrs	r2, r1
 800bb0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb12:	f003 0304 	and.w	r3, r3, #4
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d00a      	beq.n	800bb30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	685b      	ldr	r3, [r3, #4]
 800bb20:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	430a      	orrs	r2, r1
 800bb2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb34:	f003 0310 	and.w	r3, r3, #16
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d00a      	beq.n	800bb52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	689b      	ldr	r3, [r3, #8]
 800bb42:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	430a      	orrs	r2, r1
 800bb50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb56:	f003 0320 	and.w	r3, r3, #32
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d00a      	beq.n	800bb74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	689b      	ldr	r3, [r3, #8]
 800bb64:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	430a      	orrs	r2, r1
 800bb72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d01a      	beq.n	800bbb6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	685b      	ldr	r3, [r3, #4]
 800bb86:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	430a      	orrs	r2, r1
 800bb94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb9a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bb9e:	d10a      	bne.n	800bbb6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	685b      	ldr	r3, [r3, #4]
 800bba6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	430a      	orrs	r2, r1
 800bbb4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d00a      	beq.n	800bbd8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	685b      	ldr	r3, [r3, #4]
 800bbc8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	430a      	orrs	r2, r1
 800bbd6:	605a      	str	r2, [r3, #4]
  }
}
 800bbd8:	bf00      	nop
 800bbda:	370c      	adds	r7, #12
 800bbdc:	46bd      	mov	sp, r7
 800bbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe2:	4770      	bx	lr

0800bbe4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	b08c      	sub	sp, #48	@ 0x30
 800bbe8:	af02      	add	r7, sp, #8
 800bbea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	2200      	movs	r2, #0
 800bbf0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bbf4:	f7f9 fca2 	bl	800553c <HAL_GetTick>
 800bbf8:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	f003 0308 	and.w	r3, r3, #8
 800bc04:	2b08      	cmp	r3, #8
 800bc06:	d12e      	bne.n	800bc66 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bc08:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bc0c:	9300      	str	r3, [sp, #0]
 800bc0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc10:	2200      	movs	r2, #0
 800bc12:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800bc16:	6878      	ldr	r0, [r7, #4]
 800bc18:	f000 f83b 	bl	800bc92 <UART_WaitOnFlagUntilTimeout>
 800bc1c:	4603      	mov	r3, r0
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d021      	beq.n	800bc66 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc28:	693b      	ldr	r3, [r7, #16]
 800bc2a:	e853 3f00 	ldrex	r3, [r3]
 800bc2e:	60fb      	str	r3, [r7, #12]
   return(result);
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bc36:	623b      	str	r3, [r7, #32]
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	461a      	mov	r2, r3
 800bc3e:	6a3b      	ldr	r3, [r7, #32]
 800bc40:	61fb      	str	r3, [r7, #28]
 800bc42:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc44:	69b9      	ldr	r1, [r7, #24]
 800bc46:	69fa      	ldr	r2, [r7, #28]
 800bc48:	e841 2300 	strex	r3, r2, [r1]
 800bc4c:	617b      	str	r3, [r7, #20]
   return(result);
 800bc4e:	697b      	ldr	r3, [r7, #20]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d1e6      	bne.n	800bc22 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	2220      	movs	r2, #32
 800bc58:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bc62:	2303      	movs	r3, #3
 800bc64:	e011      	b.n	800bc8a <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	2220      	movs	r2, #32
 800bc6a:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	2220      	movs	r2, #32
 800bc70:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	2200      	movs	r2, #0
 800bc78:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	2200      	movs	r2, #0
 800bc84:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800bc88:	2300      	movs	r3, #0
}
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	3728      	adds	r7, #40	@ 0x28
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	bd80      	pop	{r7, pc}

0800bc92 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bc92:	b580      	push	{r7, lr}
 800bc94:	b084      	sub	sp, #16
 800bc96:	af00      	add	r7, sp, #0
 800bc98:	60f8      	str	r0, [r7, #12]
 800bc9a:	60b9      	str	r1, [r7, #8]
 800bc9c:	603b      	str	r3, [r7, #0]
 800bc9e:	4613      	mov	r3, r2
 800bca0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bca2:	e04f      	b.n	800bd44 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bca4:	69bb      	ldr	r3, [r7, #24]
 800bca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcaa:	d04b      	beq.n	800bd44 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bcac:	f7f9 fc46 	bl	800553c <HAL_GetTick>
 800bcb0:	4602      	mov	r2, r0
 800bcb2:	683b      	ldr	r3, [r7, #0]
 800bcb4:	1ad3      	subs	r3, r2, r3
 800bcb6:	69ba      	ldr	r2, [r7, #24]
 800bcb8:	429a      	cmp	r2, r3
 800bcba:	d302      	bcc.n	800bcc2 <UART_WaitOnFlagUntilTimeout+0x30>
 800bcbc:	69bb      	ldr	r3, [r7, #24]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d101      	bne.n	800bcc6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800bcc2:	2303      	movs	r3, #3
 800bcc4:	e04e      	b.n	800bd64 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	f003 0304 	and.w	r3, r3, #4
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d037      	beq.n	800bd44 <UART_WaitOnFlagUntilTimeout+0xb2>
 800bcd4:	68bb      	ldr	r3, [r7, #8]
 800bcd6:	2b80      	cmp	r3, #128	@ 0x80
 800bcd8:	d034      	beq.n	800bd44 <UART_WaitOnFlagUntilTimeout+0xb2>
 800bcda:	68bb      	ldr	r3, [r7, #8]
 800bcdc:	2b40      	cmp	r3, #64	@ 0x40
 800bcde:	d031      	beq.n	800bd44 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	69db      	ldr	r3, [r3, #28]
 800bce6:	f003 0308 	and.w	r3, r3, #8
 800bcea:	2b08      	cmp	r3, #8
 800bcec:	d110      	bne.n	800bd10 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	2208      	movs	r2, #8
 800bcf4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bcf6:	68f8      	ldr	r0, [r7, #12]
 800bcf8:	f000 f838 	bl	800bd6c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	2208      	movs	r2, #8
 800bd00:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	2200      	movs	r2, #0
 800bd08:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800bd0c:	2301      	movs	r3, #1
 800bd0e:	e029      	b.n	800bd64 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	69db      	ldr	r3, [r3, #28]
 800bd16:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bd1a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bd1e:	d111      	bne.n	800bd44 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bd28:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bd2a:	68f8      	ldr	r0, [r7, #12]
 800bd2c:	f000 f81e 	bl	800bd6c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	2220      	movs	r2, #32
 800bd34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800bd40:	2303      	movs	r3, #3
 800bd42:	e00f      	b.n	800bd64 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	69da      	ldr	r2, [r3, #28]
 800bd4a:	68bb      	ldr	r3, [r7, #8]
 800bd4c:	4013      	ands	r3, r2
 800bd4e:	68ba      	ldr	r2, [r7, #8]
 800bd50:	429a      	cmp	r2, r3
 800bd52:	bf0c      	ite	eq
 800bd54:	2301      	moveq	r3, #1
 800bd56:	2300      	movne	r3, #0
 800bd58:	b2db      	uxtb	r3, r3
 800bd5a:	461a      	mov	r2, r3
 800bd5c:	79fb      	ldrb	r3, [r7, #7]
 800bd5e:	429a      	cmp	r2, r3
 800bd60:	d0a0      	beq.n	800bca4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bd62:	2300      	movs	r3, #0
}
 800bd64:	4618      	mov	r0, r3
 800bd66:	3710      	adds	r7, #16
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	bd80      	pop	{r7, pc}

0800bd6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bd6c:	b480      	push	{r7}
 800bd6e:	b095      	sub	sp, #84	@ 0x54
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd7c:	e853 3f00 	ldrex	r3, [r3]
 800bd80:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800bd82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd84:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bd88:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	461a      	mov	r2, r3
 800bd90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bd92:	643b      	str	r3, [r7, #64]	@ 0x40
 800bd94:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd96:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800bd98:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bd9a:	e841 2300 	strex	r3, r2, [r1]
 800bd9e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bda0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d1e6      	bne.n	800bd74 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	3308      	adds	r3, #8
 800bdac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdae:	6a3b      	ldr	r3, [r7, #32]
 800bdb0:	e853 3f00 	ldrex	r3, [r3]
 800bdb4:	61fb      	str	r3, [r7, #28]
   return(result);
 800bdb6:	69fb      	ldr	r3, [r7, #28]
 800bdb8:	f023 0301 	bic.w	r3, r3, #1
 800bdbc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	3308      	adds	r3, #8
 800bdc4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bdc6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bdc8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bdcc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bdce:	e841 2300 	strex	r3, r2, [r1]
 800bdd2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bdd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d1e5      	bne.n	800bda6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bdde:	2b01      	cmp	r3, #1
 800bde0:	d118      	bne.n	800be14 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	e853 3f00 	ldrex	r3, [r3]
 800bdee:	60bb      	str	r3, [r7, #8]
   return(result);
 800bdf0:	68bb      	ldr	r3, [r7, #8]
 800bdf2:	f023 0310 	bic.w	r3, r3, #16
 800bdf6:	647b      	str	r3, [r7, #68]	@ 0x44
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	461a      	mov	r2, r3
 800bdfe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800be00:	61bb      	str	r3, [r7, #24]
 800be02:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be04:	6979      	ldr	r1, [r7, #20]
 800be06:	69ba      	ldr	r2, [r7, #24]
 800be08:	e841 2300 	strex	r3, r2, [r1]
 800be0c:	613b      	str	r3, [r7, #16]
   return(result);
 800be0e:	693b      	ldr	r3, [r7, #16]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d1e6      	bne.n	800bde2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	2220      	movs	r2, #32
 800be18:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	2200      	movs	r2, #0
 800be20:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	2200      	movs	r2, #0
 800be26:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800be28:	bf00      	nop
 800be2a:	3754      	adds	r7, #84	@ 0x54
 800be2c:	46bd      	mov	sp, r7
 800be2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be32:	4770      	bx	lr

0800be34 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800be34:	b480      	push	{r7}
 800be36:	b083      	sub	sp, #12
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
 800be3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800be3e:	683b      	ldr	r3, [r7, #0]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d121      	bne.n	800be8a <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	681a      	ldr	r2, [r3, #0]
 800be4a:	4b27      	ldr	r3, [pc, #156]	@ (800bee8 <FMC_SDRAM_Init+0xb4>)
 800be4c:	4013      	ands	r3, r2
 800be4e:	683a      	ldr	r2, [r7, #0]
 800be50:	6851      	ldr	r1, [r2, #4]
 800be52:	683a      	ldr	r2, [r7, #0]
 800be54:	6892      	ldr	r2, [r2, #8]
 800be56:	4311      	orrs	r1, r2
 800be58:	683a      	ldr	r2, [r7, #0]
 800be5a:	68d2      	ldr	r2, [r2, #12]
 800be5c:	4311      	orrs	r1, r2
 800be5e:	683a      	ldr	r2, [r7, #0]
 800be60:	6912      	ldr	r2, [r2, #16]
 800be62:	4311      	orrs	r1, r2
 800be64:	683a      	ldr	r2, [r7, #0]
 800be66:	6952      	ldr	r2, [r2, #20]
 800be68:	4311      	orrs	r1, r2
 800be6a:	683a      	ldr	r2, [r7, #0]
 800be6c:	6992      	ldr	r2, [r2, #24]
 800be6e:	4311      	orrs	r1, r2
 800be70:	683a      	ldr	r2, [r7, #0]
 800be72:	69d2      	ldr	r2, [r2, #28]
 800be74:	4311      	orrs	r1, r2
 800be76:	683a      	ldr	r2, [r7, #0]
 800be78:	6a12      	ldr	r2, [r2, #32]
 800be7a:	4311      	orrs	r1, r2
 800be7c:	683a      	ldr	r2, [r7, #0]
 800be7e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800be80:	430a      	orrs	r2, r1
 800be82:	431a      	orrs	r2, r3
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	601a      	str	r2, [r3, #0]
 800be88:	e026      	b.n	800bed8 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800be92:	683b      	ldr	r3, [r7, #0]
 800be94:	69d9      	ldr	r1, [r3, #28]
 800be96:	683b      	ldr	r3, [r7, #0]
 800be98:	6a1b      	ldr	r3, [r3, #32]
 800be9a:	4319      	orrs	r1, r3
 800be9c:	683b      	ldr	r3, [r7, #0]
 800be9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bea0:	430b      	orrs	r3, r1
 800bea2:	431a      	orrs	r2, r3
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	685a      	ldr	r2, [r3, #4]
 800beac:	4b0e      	ldr	r3, [pc, #56]	@ (800bee8 <FMC_SDRAM_Init+0xb4>)
 800beae:	4013      	ands	r3, r2
 800beb0:	683a      	ldr	r2, [r7, #0]
 800beb2:	6851      	ldr	r1, [r2, #4]
 800beb4:	683a      	ldr	r2, [r7, #0]
 800beb6:	6892      	ldr	r2, [r2, #8]
 800beb8:	4311      	orrs	r1, r2
 800beba:	683a      	ldr	r2, [r7, #0]
 800bebc:	68d2      	ldr	r2, [r2, #12]
 800bebe:	4311      	orrs	r1, r2
 800bec0:	683a      	ldr	r2, [r7, #0]
 800bec2:	6912      	ldr	r2, [r2, #16]
 800bec4:	4311      	orrs	r1, r2
 800bec6:	683a      	ldr	r2, [r7, #0]
 800bec8:	6952      	ldr	r2, [r2, #20]
 800beca:	4311      	orrs	r1, r2
 800becc:	683a      	ldr	r2, [r7, #0]
 800bece:	6992      	ldr	r2, [r2, #24]
 800bed0:	430a      	orrs	r2, r1
 800bed2:	431a      	orrs	r2, r3
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800bed8:	2300      	movs	r3, #0
}
 800beda:	4618      	mov	r0, r3
 800bedc:	370c      	adds	r7, #12
 800bede:	46bd      	mov	sp, r7
 800bee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee4:	4770      	bx	lr
 800bee6:	bf00      	nop
 800bee8:	ffff8000 	.word	0xffff8000

0800beec <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800beec:	b480      	push	{r7}
 800beee:	b085      	sub	sp, #20
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	60f8      	str	r0, [r7, #12]
 800bef4:	60b9      	str	r1, [r7, #8]
 800bef6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	2b00      	cmp	r3, #0
 800befc:	d128      	bne.n	800bf50 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	689b      	ldr	r3, [r3, #8]
 800bf02:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800bf06:	68bb      	ldr	r3, [r7, #8]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	1e59      	subs	r1, r3, #1
 800bf0c:	68bb      	ldr	r3, [r7, #8]
 800bf0e:	685b      	ldr	r3, [r3, #4]
 800bf10:	3b01      	subs	r3, #1
 800bf12:	011b      	lsls	r3, r3, #4
 800bf14:	4319      	orrs	r1, r3
 800bf16:	68bb      	ldr	r3, [r7, #8]
 800bf18:	689b      	ldr	r3, [r3, #8]
 800bf1a:	3b01      	subs	r3, #1
 800bf1c:	021b      	lsls	r3, r3, #8
 800bf1e:	4319      	orrs	r1, r3
 800bf20:	68bb      	ldr	r3, [r7, #8]
 800bf22:	68db      	ldr	r3, [r3, #12]
 800bf24:	3b01      	subs	r3, #1
 800bf26:	031b      	lsls	r3, r3, #12
 800bf28:	4319      	orrs	r1, r3
 800bf2a:	68bb      	ldr	r3, [r7, #8]
 800bf2c:	691b      	ldr	r3, [r3, #16]
 800bf2e:	3b01      	subs	r3, #1
 800bf30:	041b      	lsls	r3, r3, #16
 800bf32:	4319      	orrs	r1, r3
 800bf34:	68bb      	ldr	r3, [r7, #8]
 800bf36:	695b      	ldr	r3, [r3, #20]
 800bf38:	3b01      	subs	r3, #1
 800bf3a:	051b      	lsls	r3, r3, #20
 800bf3c:	4319      	orrs	r1, r3
 800bf3e:	68bb      	ldr	r3, [r7, #8]
 800bf40:	699b      	ldr	r3, [r3, #24]
 800bf42:	3b01      	subs	r3, #1
 800bf44:	061b      	lsls	r3, r3, #24
 800bf46:	430b      	orrs	r3, r1
 800bf48:	431a      	orrs	r2, r3
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	609a      	str	r2, [r3, #8]
 800bf4e:	e02d      	b.n	800bfac <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	689a      	ldr	r2, [r3, #8]
 800bf54:	4b19      	ldr	r3, [pc, #100]	@ (800bfbc <FMC_SDRAM_Timing_Init+0xd0>)
 800bf56:	4013      	ands	r3, r2
 800bf58:	68ba      	ldr	r2, [r7, #8]
 800bf5a:	68d2      	ldr	r2, [r2, #12]
 800bf5c:	3a01      	subs	r2, #1
 800bf5e:	0311      	lsls	r1, r2, #12
 800bf60:	68ba      	ldr	r2, [r7, #8]
 800bf62:	6952      	ldr	r2, [r2, #20]
 800bf64:	3a01      	subs	r2, #1
 800bf66:	0512      	lsls	r2, r2, #20
 800bf68:	430a      	orrs	r2, r1
 800bf6a:	431a      	orrs	r2, r3
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	68db      	ldr	r3, [r3, #12]
 800bf74:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800bf78:	68bb      	ldr	r3, [r7, #8]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	1e59      	subs	r1, r3, #1
 800bf7e:	68bb      	ldr	r3, [r7, #8]
 800bf80:	685b      	ldr	r3, [r3, #4]
 800bf82:	3b01      	subs	r3, #1
 800bf84:	011b      	lsls	r3, r3, #4
 800bf86:	4319      	orrs	r1, r3
 800bf88:	68bb      	ldr	r3, [r7, #8]
 800bf8a:	689b      	ldr	r3, [r3, #8]
 800bf8c:	3b01      	subs	r3, #1
 800bf8e:	021b      	lsls	r3, r3, #8
 800bf90:	4319      	orrs	r1, r3
 800bf92:	68bb      	ldr	r3, [r7, #8]
 800bf94:	691b      	ldr	r3, [r3, #16]
 800bf96:	3b01      	subs	r3, #1
 800bf98:	041b      	lsls	r3, r3, #16
 800bf9a:	4319      	orrs	r1, r3
 800bf9c:	68bb      	ldr	r3, [r7, #8]
 800bf9e:	699b      	ldr	r3, [r3, #24]
 800bfa0:	3b01      	subs	r3, #1
 800bfa2:	061b      	lsls	r3, r3, #24
 800bfa4:	430b      	orrs	r3, r1
 800bfa6:	431a      	orrs	r2, r3
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800bfac:	2300      	movs	r3, #0
}
 800bfae:	4618      	mov	r0, r3
 800bfb0:	3714      	adds	r7, #20
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb8:	4770      	bx	lr
 800bfba:	bf00      	nop
 800bfbc:	ff0f0fff 	.word	0xff0f0fff

0800bfc0 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800bfc0:	b480      	push	{r7}
 800bfc2:	b085      	sub	sp, #20
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	60f8      	str	r0, [r7, #12]
 800bfc8:	60b9      	str	r1, [r7, #8]
 800bfca:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	691a      	ldr	r2, [r3, #16]
 800bfd0:	4b0c      	ldr	r3, [pc, #48]	@ (800c004 <FMC_SDRAM_SendCommand+0x44>)
 800bfd2:	4013      	ands	r3, r2
 800bfd4:	68ba      	ldr	r2, [r7, #8]
 800bfd6:	6811      	ldr	r1, [r2, #0]
 800bfd8:	68ba      	ldr	r2, [r7, #8]
 800bfda:	6852      	ldr	r2, [r2, #4]
 800bfdc:	4311      	orrs	r1, r2
 800bfde:	68ba      	ldr	r2, [r7, #8]
 800bfe0:	6892      	ldr	r2, [r2, #8]
 800bfe2:	3a01      	subs	r2, #1
 800bfe4:	0152      	lsls	r2, r2, #5
 800bfe6:	4311      	orrs	r1, r2
 800bfe8:	68ba      	ldr	r2, [r7, #8]
 800bfea:	68d2      	ldr	r2, [r2, #12]
 800bfec:	0252      	lsls	r2, r2, #9
 800bfee:	430a      	orrs	r2, r1
 800bff0:	431a      	orrs	r2, r3
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800bff6:	2300      	movs	r3, #0
}
 800bff8:	4618      	mov	r0, r3
 800bffa:	3714      	adds	r7, #20
 800bffc:	46bd      	mov	sp, r7
 800bffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c002:	4770      	bx	lr
 800c004:	ffc00000 	.word	0xffc00000

0800c008 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800c008:	b480      	push	{r7}
 800c00a:	b083      	sub	sp, #12
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	6078      	str	r0, [r7, #4]
 800c010:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	695a      	ldr	r2, [r3, #20]
 800c016:	4b07      	ldr	r3, [pc, #28]	@ (800c034 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800c018:	4013      	ands	r3, r2
 800c01a:	683a      	ldr	r2, [r7, #0]
 800c01c:	0052      	lsls	r2, r2, #1
 800c01e:	431a      	orrs	r2, r3
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800c024:	2300      	movs	r3, #0
}
 800c026:	4618      	mov	r0, r3
 800c028:	370c      	adds	r7, #12
 800c02a:	46bd      	mov	sp, r7
 800c02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c030:	4770      	bx	lr
 800c032:	bf00      	nop
 800c034:	ffffc001 	.word	0xffffc001

0800c038 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800c038:	b084      	sub	sp, #16
 800c03a:	b480      	push	{r7}
 800c03c:	b085      	sub	sp, #20
 800c03e:	af00      	add	r7, sp, #0
 800c040:	6078      	str	r0, [r7, #4]
 800c042:	f107 001c 	add.w	r0, r7, #28
 800c046:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800c04a:	2300      	movs	r3, #0
 800c04c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800c04e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800c050:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800c052:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800c054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800c056:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800c058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800c05a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800c05c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800c05e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800c060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800c062:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800c064:	68fa      	ldr	r2, [r7, #12]
 800c066:	4313      	orrs	r3, r2
 800c068:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	685a      	ldr	r2, [r3, #4]
 800c06e:	4b07      	ldr	r3, [pc, #28]	@ (800c08c <SDMMC_Init+0x54>)
 800c070:	4013      	ands	r3, r2
 800c072:	68fa      	ldr	r2, [r7, #12]
 800c074:	431a      	orrs	r2, r3
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800c07a:	2300      	movs	r3, #0
}
 800c07c:	4618      	mov	r0, r3
 800c07e:	3714      	adds	r7, #20
 800c080:	46bd      	mov	sp, r7
 800c082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c086:	b004      	add	sp, #16
 800c088:	4770      	bx	lr
 800c08a:	bf00      	nop
 800c08c:	ffff8100 	.word	0xffff8100

0800c090 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800c090:	b480      	push	{r7}
 800c092:	b083      	sub	sp, #12
 800c094:	af00      	add	r7, sp, #0
 800c096:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800c09e:	4618      	mov	r0, r3
 800c0a0:	370c      	adds	r7, #12
 800c0a2:	46bd      	mov	sp, r7
 800c0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a8:	4770      	bx	lr

0800c0aa <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800c0aa:	b480      	push	{r7}
 800c0ac:	b083      	sub	sp, #12
 800c0ae:	af00      	add	r7, sp, #0
 800c0b0:	6078      	str	r0, [r7, #4]
 800c0b2:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 800c0b4:	683b      	ldr	r3, [r7, #0]
 800c0b6:	681a      	ldr	r2, [r3, #0]
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800c0be:	2300      	movs	r3, #0
}
 800c0c0:	4618      	mov	r0, r3
 800c0c2:	370c      	adds	r7, #12
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ca:	4770      	bx	lr

0800c0cc <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800c0cc:	b480      	push	{r7}
 800c0ce:	b083      	sub	sp, #12
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	2203      	movs	r2, #3
 800c0d8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800c0da:	2300      	movs	r3, #0
}
 800c0dc:	4618      	mov	r0, r3
 800c0de:	370c      	adds	r7, #12
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e6:	4770      	bx	lr

0800c0e8 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800c0e8:	b480      	push	{r7}
 800c0ea:	b083      	sub	sp, #12
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	f003 0303 	and.w	r3, r3, #3
}
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	370c      	adds	r7, #12
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c102:	4770      	bx	lr

0800c104 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800c104:	b480      	push	{r7}
 800c106:	b085      	sub	sp, #20
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
 800c10c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c10e:	2300      	movs	r3, #0
 800c110:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800c112:	683b      	ldr	r3, [r7, #0]
 800c114:	681a      	ldr	r2, [r3, #0]
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c11a:	683b      	ldr	r3, [r7, #0]
 800c11c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800c11e:	683b      	ldr	r3, [r7, #0]
 800c120:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c122:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800c124:	683b      	ldr	r3, [r7, #0]
 800c126:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800c128:	431a      	orrs	r2, r3
                       Command->CPSM);
 800c12a:	683b      	ldr	r3, [r7, #0]
 800c12c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800c12e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c130:	68fa      	ldr	r2, [r7, #12]
 800c132:	4313      	orrs	r3, r2
 800c134:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	68da      	ldr	r2, [r3, #12]
 800c13a:	4b06      	ldr	r3, [pc, #24]	@ (800c154 <SDMMC_SendCommand+0x50>)
 800c13c:	4013      	ands	r3, r2
 800c13e:	68fa      	ldr	r2, [r7, #12]
 800c140:	431a      	orrs	r2, r3
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800c146:	2300      	movs	r3, #0
}
 800c148:	4618      	mov	r0, r3
 800c14a:	3714      	adds	r7, #20
 800c14c:	46bd      	mov	sp, r7
 800c14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c152:	4770      	bx	lr
 800c154:	fffff000 	.word	0xfffff000

0800c158 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800c158:	b480      	push	{r7}
 800c15a:	b083      	sub	sp, #12
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	691b      	ldr	r3, [r3, #16]
 800c164:	b2db      	uxtb	r3, r3
}
 800c166:	4618      	mov	r0, r3
 800c168:	370c      	adds	r7, #12
 800c16a:	46bd      	mov	sp, r7
 800c16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c170:	4770      	bx	lr

0800c172 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800c172:	b480      	push	{r7}
 800c174:	b085      	sub	sp, #20
 800c176:	af00      	add	r7, sp, #0
 800c178:	6078      	str	r0, [r7, #4]
 800c17a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	3314      	adds	r3, #20
 800c180:	461a      	mov	r2, r3
 800c182:	683b      	ldr	r3, [r7, #0]
 800c184:	4413      	add	r3, r2
 800c186:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	681b      	ldr	r3, [r3, #0]
}  
 800c18c:	4618      	mov	r0, r3
 800c18e:	3714      	adds	r7, #20
 800c190:	46bd      	mov	sp, r7
 800c192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c196:	4770      	bx	lr

0800c198 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800c198:	b480      	push	{r7}
 800c19a:	b085      	sub	sp, #20
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	6078      	str	r0, [r7, #4]
 800c1a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800c1a6:	683b      	ldr	r3, [r7, #0]
 800c1a8:	681a      	ldr	r2, [r3, #0]
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800c1ae:	683b      	ldr	r3, [r7, #0]
 800c1b0:	685a      	ldr	r2, [r3, #4]
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c1b6:	683b      	ldr	r3, [r7, #0]
 800c1b8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800c1ba:	683b      	ldr	r3, [r7, #0]
 800c1bc:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c1be:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800c1c0:	683b      	ldr	r3, [r7, #0]
 800c1c2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800c1c4:	431a      	orrs	r2, r3
                       Data->DPSM);
 800c1c6:	683b      	ldr	r3, [r7, #0]
 800c1c8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800c1ca:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c1cc:	68fa      	ldr	r2, [r7, #12]
 800c1ce:	4313      	orrs	r3, r2
 800c1d0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1d6:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	431a      	orrs	r2, r3
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800c1e2:	2300      	movs	r3, #0

}
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	3714      	adds	r7, #20
 800c1e8:	46bd      	mov	sp, r7
 800c1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ee:	4770      	bx	lr

0800c1f0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	b088      	sub	sp, #32
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	6078      	str	r0, [r7, #4]
 800c1f8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800c1fa:	683b      	ldr	r3, [r7, #0]
 800c1fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800c1fe:	2310      	movs	r3, #16
 800c200:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c202:	2340      	movs	r3, #64	@ 0x40
 800c204:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c206:	2300      	movs	r3, #0
 800c208:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c20a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c20e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c210:	f107 0308 	add.w	r3, r7, #8
 800c214:	4619      	mov	r1, r3
 800c216:	6878      	ldr	r0, [r7, #4]
 800c218:	f7ff ff74 	bl	800c104 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800c21c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c220:	2110      	movs	r1, #16
 800c222:	6878      	ldr	r0, [r7, #4]
 800c224:	f000 f9d6 	bl	800c5d4 <SDMMC_GetCmdResp1>
 800c228:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c22a:	69fb      	ldr	r3, [r7, #28]
}
 800c22c:	4618      	mov	r0, r3
 800c22e:	3720      	adds	r7, #32
 800c230:	46bd      	mov	sp, r7
 800c232:	bd80      	pop	{r7, pc}

0800c234 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800c234:	b580      	push	{r7, lr}
 800c236:	b088      	sub	sp, #32
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]
 800c23c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c23e:	683b      	ldr	r3, [r7, #0]
 800c240:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800c242:	2311      	movs	r3, #17
 800c244:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c246:	2340      	movs	r3, #64	@ 0x40
 800c248:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c24a:	2300      	movs	r3, #0
 800c24c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c24e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c252:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c254:	f107 0308 	add.w	r3, r7, #8
 800c258:	4619      	mov	r1, r3
 800c25a:	6878      	ldr	r0, [r7, #4]
 800c25c:	f7ff ff52 	bl	800c104 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800c260:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c264:	2111      	movs	r1, #17
 800c266:	6878      	ldr	r0, [r7, #4]
 800c268:	f000 f9b4 	bl	800c5d4 <SDMMC_GetCmdResp1>
 800c26c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c26e:	69fb      	ldr	r3, [r7, #28]
}
 800c270:	4618      	mov	r0, r3
 800c272:	3720      	adds	r7, #32
 800c274:	46bd      	mov	sp, r7
 800c276:	bd80      	pop	{r7, pc}

0800c278 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800c278:	b580      	push	{r7, lr}
 800c27a:	b088      	sub	sp, #32
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	6078      	str	r0, [r7, #4]
 800c280:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c282:	683b      	ldr	r3, [r7, #0]
 800c284:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800c286:	2312      	movs	r3, #18
 800c288:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c28a:	2340      	movs	r3, #64	@ 0x40
 800c28c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c28e:	2300      	movs	r3, #0
 800c290:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c292:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c296:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c298:	f107 0308 	add.w	r3, r7, #8
 800c29c:	4619      	mov	r1, r3
 800c29e:	6878      	ldr	r0, [r7, #4]
 800c2a0:	f7ff ff30 	bl	800c104 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800c2a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c2a8:	2112      	movs	r1, #18
 800c2aa:	6878      	ldr	r0, [r7, #4]
 800c2ac:	f000 f992 	bl	800c5d4 <SDMMC_GetCmdResp1>
 800c2b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c2b2:	69fb      	ldr	r3, [r7, #28]
}
 800c2b4:	4618      	mov	r0, r3
 800c2b6:	3720      	adds	r7, #32
 800c2b8:	46bd      	mov	sp, r7
 800c2ba:	bd80      	pop	{r7, pc}

0800c2bc <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800c2bc:	b580      	push	{r7, lr}
 800c2be:	b088      	sub	sp, #32
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	6078      	str	r0, [r7, #4]
 800c2c4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c2c6:	683b      	ldr	r3, [r7, #0]
 800c2c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800c2ca:	2318      	movs	r3, #24
 800c2cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c2ce:	2340      	movs	r3, #64	@ 0x40
 800c2d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c2d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c2da:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c2dc:	f107 0308 	add.w	r3, r7, #8
 800c2e0:	4619      	mov	r1, r3
 800c2e2:	6878      	ldr	r0, [r7, #4]
 800c2e4:	f7ff ff0e 	bl	800c104 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800c2e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c2ec:	2118      	movs	r1, #24
 800c2ee:	6878      	ldr	r0, [r7, #4]
 800c2f0:	f000 f970 	bl	800c5d4 <SDMMC_GetCmdResp1>
 800c2f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c2f6:	69fb      	ldr	r3, [r7, #28]
}
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	3720      	adds	r7, #32
 800c2fc:	46bd      	mov	sp, r7
 800c2fe:	bd80      	pop	{r7, pc}

0800c300 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800c300:	b580      	push	{r7, lr}
 800c302:	b088      	sub	sp, #32
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
 800c308:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c30a:	683b      	ldr	r3, [r7, #0]
 800c30c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800c30e:	2319      	movs	r3, #25
 800c310:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c312:	2340      	movs	r3, #64	@ 0x40
 800c314:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c316:	2300      	movs	r3, #0
 800c318:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c31a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c31e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c320:	f107 0308 	add.w	r3, r7, #8
 800c324:	4619      	mov	r1, r3
 800c326:	6878      	ldr	r0, [r7, #4]
 800c328:	f7ff feec 	bl	800c104 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800c32c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c330:	2119      	movs	r1, #25
 800c332:	6878      	ldr	r0, [r7, #4]
 800c334:	f000 f94e 	bl	800c5d4 <SDMMC_GetCmdResp1>
 800c338:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c33a:	69fb      	ldr	r3, [r7, #28]
}
 800c33c:	4618      	mov	r0, r3
 800c33e:	3720      	adds	r7, #32
 800c340:	46bd      	mov	sp, r7
 800c342:	bd80      	pop	{r7, pc}

0800c344 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800c344:	b580      	push	{r7, lr}
 800c346:	b088      	sub	sp, #32
 800c348:	af00      	add	r7, sp, #0
 800c34a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800c34c:	2300      	movs	r3, #0
 800c34e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800c350:	230c      	movs	r3, #12
 800c352:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c354:	2340      	movs	r3, #64	@ 0x40
 800c356:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c358:	2300      	movs	r3, #0
 800c35a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c35c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c360:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c362:	f107 0308 	add.w	r3, r7, #8
 800c366:	4619      	mov	r1, r3
 800c368:	6878      	ldr	r0, [r7, #4]
 800c36a:	f7ff fecb 	bl	800c104 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800c36e:	4a05      	ldr	r2, [pc, #20]	@ (800c384 <SDMMC_CmdStopTransfer+0x40>)
 800c370:	210c      	movs	r1, #12
 800c372:	6878      	ldr	r0, [r7, #4]
 800c374:	f000 f92e 	bl	800c5d4 <SDMMC_GetCmdResp1>
 800c378:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c37a:	69fb      	ldr	r3, [r7, #28]
}
 800c37c:	4618      	mov	r0, r3
 800c37e:	3720      	adds	r7, #32
 800c380:	46bd      	mov	sp, r7
 800c382:	bd80      	pop	{r7, pc}
 800c384:	05f5e100 	.word	0x05f5e100

0800c388 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800c388:	b580      	push	{r7, lr}
 800c38a:	b08a      	sub	sp, #40	@ 0x28
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	60f8      	str	r0, [r7, #12]
 800c390:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800c394:	683b      	ldr	r3, [r7, #0]
 800c396:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800c398:	2307      	movs	r3, #7
 800c39a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c39c:	2340      	movs	r3, #64	@ 0x40
 800c39e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c3a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c3a8:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c3aa:	f107 0310 	add.w	r3, r7, #16
 800c3ae:	4619      	mov	r1, r3
 800c3b0:	68f8      	ldr	r0, [r7, #12]
 800c3b2:	f7ff fea7 	bl	800c104 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800c3b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c3ba:	2107      	movs	r1, #7
 800c3bc:	68f8      	ldr	r0, [r7, #12]
 800c3be:	f000 f909 	bl	800c5d4 <SDMMC_GetCmdResp1>
 800c3c2:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800c3c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	3728      	adds	r7, #40	@ 0x28
 800c3ca:	46bd      	mov	sp, r7
 800c3cc:	bd80      	pop	{r7, pc}

0800c3ce <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800c3ce:	b580      	push	{r7, lr}
 800c3d0:	b088      	sub	sp, #32
 800c3d2:	af00      	add	r7, sp, #0
 800c3d4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800c3da:	2300      	movs	r3, #0
 800c3dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800c3de:	2300      	movs	r3, #0
 800c3e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c3e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c3ea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c3ec:	f107 0308 	add.w	r3, r7, #8
 800c3f0:	4619      	mov	r1, r3
 800c3f2:	6878      	ldr	r0, [r7, #4]
 800c3f4:	f7ff fe86 	bl	800c104 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800c3f8:	6878      	ldr	r0, [r7, #4]
 800c3fa:	f000 fb23 	bl	800ca44 <SDMMC_GetCmdError>
 800c3fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c400:	69fb      	ldr	r3, [r7, #28]
}
 800c402:	4618      	mov	r0, r3
 800c404:	3720      	adds	r7, #32
 800c406:	46bd      	mov	sp, r7
 800c408:	bd80      	pop	{r7, pc}

0800c40a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800c40a:	b580      	push	{r7, lr}
 800c40c:	b088      	sub	sp, #32
 800c40e:	af00      	add	r7, sp, #0
 800c410:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800c412:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800c416:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800c418:	2308      	movs	r3, #8
 800c41a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c41c:	2340      	movs	r3, #64	@ 0x40
 800c41e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c420:	2300      	movs	r3, #0
 800c422:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c424:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c428:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c42a:	f107 0308 	add.w	r3, r7, #8
 800c42e:	4619      	mov	r1, r3
 800c430:	6878      	ldr	r0, [r7, #4]
 800c432:	f7ff fe67 	bl	800c104 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800c436:	6878      	ldr	r0, [r7, #4]
 800c438:	f000 fab6 	bl	800c9a8 <SDMMC_GetCmdResp7>
 800c43c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c43e:	69fb      	ldr	r3, [r7, #28]
}
 800c440:	4618      	mov	r0, r3
 800c442:	3720      	adds	r7, #32
 800c444:	46bd      	mov	sp, r7
 800c446:	bd80      	pop	{r7, pc}

0800c448 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c448:	b580      	push	{r7, lr}
 800c44a:	b088      	sub	sp, #32
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	6078      	str	r0, [r7, #4]
 800c450:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800c452:	683b      	ldr	r3, [r7, #0]
 800c454:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800c456:	2337      	movs	r3, #55	@ 0x37
 800c458:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c45a:	2340      	movs	r3, #64	@ 0x40
 800c45c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c45e:	2300      	movs	r3, #0
 800c460:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c462:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c466:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c468:	f107 0308 	add.w	r3, r7, #8
 800c46c:	4619      	mov	r1, r3
 800c46e:	6878      	ldr	r0, [r7, #4]
 800c470:	f7ff fe48 	bl	800c104 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800c474:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c478:	2137      	movs	r1, #55	@ 0x37
 800c47a:	6878      	ldr	r0, [r7, #4]
 800c47c:	f000 f8aa 	bl	800c5d4 <SDMMC_GetCmdResp1>
 800c480:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c482:	69fb      	ldr	r3, [r7, #28]
}
 800c484:	4618      	mov	r0, r3
 800c486:	3720      	adds	r7, #32
 800c488:	46bd      	mov	sp, r7
 800c48a:	bd80      	pop	{r7, pc}

0800c48c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c48c:	b580      	push	{r7, lr}
 800c48e:	b088      	sub	sp, #32
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
 800c494:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800c496:	683a      	ldr	r2, [r7, #0]
 800c498:	4b0d      	ldr	r3, [pc, #52]	@ (800c4d0 <SDMMC_CmdAppOperCommand+0x44>)
 800c49a:	4313      	orrs	r3, r2
 800c49c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800c49e:	2329      	movs	r3, #41	@ 0x29
 800c4a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c4a2:	2340      	movs	r3, #64	@ 0x40
 800c4a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c4aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c4ae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c4b0:	f107 0308 	add.w	r3, r7, #8
 800c4b4:	4619      	mov	r1, r3
 800c4b6:	6878      	ldr	r0, [r7, #4]
 800c4b8:	f7ff fe24 	bl	800c104 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800c4bc:	6878      	ldr	r0, [r7, #4]
 800c4be:	f000 f9bf 	bl	800c840 <SDMMC_GetCmdResp3>
 800c4c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c4c4:	69fb      	ldr	r3, [r7, #28]
}
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	3720      	adds	r7, #32
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	bd80      	pop	{r7, pc}
 800c4ce:	bf00      	nop
 800c4d0:	80100000 	.word	0x80100000

0800c4d4 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	b088      	sub	sp, #32
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800c4dc:	2300      	movs	r3, #0
 800c4de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800c4e0:	2302      	movs	r3, #2
 800c4e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c4e4:	23c0      	movs	r3, #192	@ 0xc0
 800c4e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c4e8:	2300      	movs	r3, #0
 800c4ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c4ec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c4f0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c4f2:	f107 0308 	add.w	r3, r7, #8
 800c4f6:	4619      	mov	r1, r3
 800c4f8:	6878      	ldr	r0, [r7, #4]
 800c4fa:	f7ff fe03 	bl	800c104 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c4fe:	6878      	ldr	r0, [r7, #4]
 800c500:	f000 f956 	bl	800c7b0 <SDMMC_GetCmdResp2>
 800c504:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c506:	69fb      	ldr	r3, [r7, #28]
}
 800c508:	4618      	mov	r0, r3
 800c50a:	3720      	adds	r7, #32
 800c50c:	46bd      	mov	sp, r7
 800c50e:	bd80      	pop	{r7, pc}

0800c510 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c510:	b580      	push	{r7, lr}
 800c512:	b088      	sub	sp, #32
 800c514:	af00      	add	r7, sp, #0
 800c516:	6078      	str	r0, [r7, #4]
 800c518:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800c51a:	683b      	ldr	r3, [r7, #0]
 800c51c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800c51e:	2309      	movs	r3, #9
 800c520:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c522:	23c0      	movs	r3, #192	@ 0xc0
 800c524:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c526:	2300      	movs	r3, #0
 800c528:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c52a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c52e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c530:	f107 0308 	add.w	r3, r7, #8
 800c534:	4619      	mov	r1, r3
 800c536:	6878      	ldr	r0, [r7, #4]
 800c538:	f7ff fde4 	bl	800c104 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c53c:	6878      	ldr	r0, [r7, #4]
 800c53e:	f000 f937 	bl	800c7b0 <SDMMC_GetCmdResp2>
 800c542:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c544:	69fb      	ldr	r3, [r7, #28]
}
 800c546:	4618      	mov	r0, r3
 800c548:	3720      	adds	r7, #32
 800c54a:	46bd      	mov	sp, r7
 800c54c:	bd80      	pop	{r7, pc}

0800c54e <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800c54e:	b580      	push	{r7, lr}
 800c550:	b088      	sub	sp, #32
 800c552:	af00      	add	r7, sp, #0
 800c554:	6078      	str	r0, [r7, #4]
 800c556:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800c558:	2300      	movs	r3, #0
 800c55a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800c55c:	2303      	movs	r3, #3
 800c55e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c560:	2340      	movs	r3, #64	@ 0x40
 800c562:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c564:	2300      	movs	r3, #0
 800c566:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c568:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c56c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c56e:	f107 0308 	add.w	r3, r7, #8
 800c572:	4619      	mov	r1, r3
 800c574:	6878      	ldr	r0, [r7, #4]
 800c576:	f7ff fdc5 	bl	800c104 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800c57a:	683a      	ldr	r2, [r7, #0]
 800c57c:	2103      	movs	r1, #3
 800c57e:	6878      	ldr	r0, [r7, #4]
 800c580:	f000 f99c 	bl	800c8bc <SDMMC_GetCmdResp6>
 800c584:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c586:	69fb      	ldr	r3, [r7, #28]
}
 800c588:	4618      	mov	r0, r3
 800c58a:	3720      	adds	r7, #32
 800c58c:	46bd      	mov	sp, r7
 800c58e:	bd80      	pop	{r7, pc}

0800c590 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c590:	b580      	push	{r7, lr}
 800c592:	b088      	sub	sp, #32
 800c594:	af00      	add	r7, sp, #0
 800c596:	6078      	str	r0, [r7, #4]
 800c598:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800c59a:	683b      	ldr	r3, [r7, #0]
 800c59c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800c59e:	230d      	movs	r3, #13
 800c5a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c5a2:	2340      	movs	r3, #64	@ 0x40
 800c5a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c5aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c5ae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c5b0:	f107 0308 	add.w	r3, r7, #8
 800c5b4:	4619      	mov	r1, r3
 800c5b6:	6878      	ldr	r0, [r7, #4]
 800c5b8:	f7ff fda4 	bl	800c104 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800c5bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c5c0:	210d      	movs	r1, #13
 800c5c2:	6878      	ldr	r0, [r7, #4]
 800c5c4:	f000 f806 	bl	800c5d4 <SDMMC_GetCmdResp1>
 800c5c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c5ca:	69fb      	ldr	r3, [r7, #28]
}
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	3720      	adds	r7, #32
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	bd80      	pop	{r7, pc}

0800c5d4 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	b088      	sub	sp, #32
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	60f8      	str	r0, [r7, #12]
 800c5dc:	460b      	mov	r3, r1
 800c5de:	607a      	str	r2, [r7, #4]
 800c5e0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c5e2:	4b70      	ldr	r3, [pc, #448]	@ (800c7a4 <SDMMC_GetCmdResp1+0x1d0>)
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	4a70      	ldr	r2, [pc, #448]	@ (800c7a8 <SDMMC_GetCmdResp1+0x1d4>)
 800c5e8:	fba2 2303 	umull	r2, r3, r2, r3
 800c5ec:	0a5a      	lsrs	r2, r3, #9
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	fb02 f303 	mul.w	r3, r2, r3
 800c5f4:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800c5f6:	69fb      	ldr	r3, [r7, #28]
 800c5f8:	1e5a      	subs	r2, r3, #1
 800c5fa:	61fa      	str	r2, [r7, #28]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d102      	bne.n	800c606 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c600:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c604:	e0c9      	b.n	800c79a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c60a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c60c:	69bb      	ldr	r3, [r7, #24]
 800c60e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800c612:	2b00      	cmp	r3, #0
 800c614:	d0ef      	beq.n	800c5f6 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c616:	69bb      	ldr	r3, [r7, #24]
 800c618:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d1ea      	bne.n	800c5f6 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c624:	f003 0304 	and.w	r3, r3, #4
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d004      	beq.n	800c636 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	2204      	movs	r2, #4
 800c630:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c632:	2304      	movs	r3, #4
 800c634:	e0b1      	b.n	800c79a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c63a:	f003 0301 	and.w	r3, r3, #1
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d004      	beq.n	800c64c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	2201      	movs	r2, #1
 800c646:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c648:	2301      	movs	r3, #1
 800c64a:	e0a6      	b.n	800c79a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	22c5      	movs	r2, #197	@ 0xc5
 800c650:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c652:	68f8      	ldr	r0, [r7, #12]
 800c654:	f7ff fd80 	bl	800c158 <SDMMC_GetCommandResponse>
 800c658:	4603      	mov	r3, r0
 800c65a:	461a      	mov	r2, r3
 800c65c:	7afb      	ldrb	r3, [r7, #11]
 800c65e:	4293      	cmp	r3, r2
 800c660:	d001      	beq.n	800c666 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c662:	2301      	movs	r3, #1
 800c664:	e099      	b.n	800c79a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c666:	2100      	movs	r1, #0
 800c668:	68f8      	ldr	r0, [r7, #12]
 800c66a:	f7ff fd82 	bl	800c172 <SDMMC_GetResponse>
 800c66e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c670:	697a      	ldr	r2, [r7, #20]
 800c672:	4b4e      	ldr	r3, [pc, #312]	@ (800c7ac <SDMMC_GetCmdResp1+0x1d8>)
 800c674:	4013      	ands	r3, r2
 800c676:	2b00      	cmp	r3, #0
 800c678:	d101      	bne.n	800c67e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800c67a:	2300      	movs	r3, #0
 800c67c:	e08d      	b.n	800c79a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c67e:	697b      	ldr	r3, [r7, #20]
 800c680:	2b00      	cmp	r3, #0
 800c682:	da02      	bge.n	800c68a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c684:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800c688:	e087      	b.n	800c79a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c68a:	697b      	ldr	r3, [r7, #20]
 800c68c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c690:	2b00      	cmp	r3, #0
 800c692:	d001      	beq.n	800c698 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c694:	2340      	movs	r3, #64	@ 0x40
 800c696:	e080      	b.n	800c79a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c698:	697b      	ldr	r3, [r7, #20]
 800c69a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d001      	beq.n	800c6a6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c6a2:	2380      	movs	r3, #128	@ 0x80
 800c6a4:	e079      	b.n	800c79a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c6a6:	697b      	ldr	r3, [r7, #20]
 800c6a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d002      	beq.n	800c6b6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c6b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c6b4:	e071      	b.n	800c79a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c6b6:	697b      	ldr	r3, [r7, #20]
 800c6b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d002      	beq.n	800c6c6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c6c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c6c4:	e069      	b.n	800c79a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c6c6:	697b      	ldr	r3, [r7, #20]
 800c6c8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d002      	beq.n	800c6d6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c6d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c6d4:	e061      	b.n	800c79a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c6d6:	697b      	ldr	r3, [r7, #20]
 800c6d8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d002      	beq.n	800c6e6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c6e0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c6e4:	e059      	b.n	800c79a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c6e6:	697b      	ldr	r3, [r7, #20]
 800c6e8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d002      	beq.n	800c6f6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c6f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c6f4:	e051      	b.n	800c79a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c6f6:	697b      	ldr	r3, [r7, #20]
 800c6f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d002      	beq.n	800c706 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c700:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c704:	e049      	b.n	800c79a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c706:	697b      	ldr	r3, [r7, #20]
 800c708:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d002      	beq.n	800c716 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c710:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c714:	e041      	b.n	800c79a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c716:	697b      	ldr	r3, [r7, #20]
 800c718:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d002      	beq.n	800c726 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800c720:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c724:	e039      	b.n	800c79a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c726:	697b      	ldr	r3, [r7, #20]
 800c728:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d002      	beq.n	800c736 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c730:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800c734:	e031      	b.n	800c79a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c736:	697b      	ldr	r3, [r7, #20]
 800c738:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d002      	beq.n	800c746 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c740:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800c744:	e029      	b.n	800c79a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c746:	697b      	ldr	r3, [r7, #20]
 800c748:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d002      	beq.n	800c756 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c750:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800c754:	e021      	b.n	800c79a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c756:	697b      	ldr	r3, [r7, #20]
 800c758:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d002      	beq.n	800c766 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c760:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800c764:	e019      	b.n	800c79a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c766:	697b      	ldr	r3, [r7, #20]
 800c768:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d002      	beq.n	800c776 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c770:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800c774:	e011      	b.n	800c79a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c776:	697b      	ldr	r3, [r7, #20]
 800c778:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d002      	beq.n	800c786 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800c780:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800c784:	e009      	b.n	800c79a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800c786:	697b      	ldr	r3, [r7, #20]
 800c788:	f003 0308 	and.w	r3, r3, #8
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d002      	beq.n	800c796 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800c790:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800c794:	e001      	b.n	800c79a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c796:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800c79a:	4618      	mov	r0, r3
 800c79c:	3720      	adds	r7, #32
 800c79e:	46bd      	mov	sp, r7
 800c7a0:	bd80      	pop	{r7, pc}
 800c7a2:	bf00      	nop
 800c7a4:	200000c0 	.word	0x200000c0
 800c7a8:	10624dd3 	.word	0x10624dd3
 800c7ac:	fdffe008 	.word	0xfdffe008

0800c7b0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800c7b0:	b480      	push	{r7}
 800c7b2:	b085      	sub	sp, #20
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c7b8:	4b1f      	ldr	r3, [pc, #124]	@ (800c838 <SDMMC_GetCmdResp2+0x88>)
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	4a1f      	ldr	r2, [pc, #124]	@ (800c83c <SDMMC_GetCmdResp2+0x8c>)
 800c7be:	fba2 2303 	umull	r2, r3, r2, r3
 800c7c2:	0a5b      	lsrs	r3, r3, #9
 800c7c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c7c8:	fb02 f303 	mul.w	r3, r2, r3
 800c7cc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	1e5a      	subs	r2, r3, #1
 800c7d2:	60fa      	str	r2, [r7, #12]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d102      	bne.n	800c7de <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c7d8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c7dc:	e026      	b.n	800c82c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c7e2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c7e4:	68bb      	ldr	r3, [r7, #8]
 800c7e6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d0ef      	beq.n	800c7ce <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c7ee:	68bb      	ldr	r3, [r7, #8]
 800c7f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d1ea      	bne.n	800c7ce <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c7fc:	f003 0304 	and.w	r3, r3, #4
 800c800:	2b00      	cmp	r3, #0
 800c802:	d004      	beq.n	800c80e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	2204      	movs	r2, #4
 800c808:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c80a:	2304      	movs	r3, #4
 800c80c:	e00e      	b.n	800c82c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c812:	f003 0301 	and.w	r3, r3, #1
 800c816:	2b00      	cmp	r3, #0
 800c818:	d004      	beq.n	800c824 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	2201      	movs	r2, #1
 800c81e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c820:	2301      	movs	r3, #1
 800c822:	e003      	b.n	800c82c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	22c5      	movs	r2, #197	@ 0xc5
 800c828:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800c82a:	2300      	movs	r3, #0
}
 800c82c:	4618      	mov	r0, r3
 800c82e:	3714      	adds	r7, #20
 800c830:	46bd      	mov	sp, r7
 800c832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c836:	4770      	bx	lr
 800c838:	200000c0 	.word	0x200000c0
 800c83c:	10624dd3 	.word	0x10624dd3

0800c840 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800c840:	b480      	push	{r7}
 800c842:	b085      	sub	sp, #20
 800c844:	af00      	add	r7, sp, #0
 800c846:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c848:	4b1a      	ldr	r3, [pc, #104]	@ (800c8b4 <SDMMC_GetCmdResp3+0x74>)
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	4a1a      	ldr	r2, [pc, #104]	@ (800c8b8 <SDMMC_GetCmdResp3+0x78>)
 800c84e:	fba2 2303 	umull	r2, r3, r2, r3
 800c852:	0a5b      	lsrs	r3, r3, #9
 800c854:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c858:	fb02 f303 	mul.w	r3, r2, r3
 800c85c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	1e5a      	subs	r2, r3, #1
 800c862:	60fa      	str	r2, [r7, #12]
 800c864:	2b00      	cmp	r3, #0
 800c866:	d102      	bne.n	800c86e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c868:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c86c:	e01b      	b.n	800c8a6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c872:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c874:	68bb      	ldr	r3, [r7, #8]
 800c876:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d0ef      	beq.n	800c85e <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c87e:	68bb      	ldr	r3, [r7, #8]
 800c880:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c884:	2b00      	cmp	r3, #0
 800c886:	d1ea      	bne.n	800c85e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c88c:	f003 0304 	and.w	r3, r3, #4
 800c890:	2b00      	cmp	r3, #0
 800c892:	d004      	beq.n	800c89e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	2204      	movs	r2, #4
 800c898:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c89a:	2304      	movs	r3, #4
 800c89c:	e003      	b.n	800c8a6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	22c5      	movs	r2, #197	@ 0xc5
 800c8a2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c8a4:	2300      	movs	r3, #0
}
 800c8a6:	4618      	mov	r0, r3
 800c8a8:	3714      	adds	r7, #20
 800c8aa:	46bd      	mov	sp, r7
 800c8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b0:	4770      	bx	lr
 800c8b2:	bf00      	nop
 800c8b4:	200000c0 	.word	0x200000c0
 800c8b8:	10624dd3 	.word	0x10624dd3

0800c8bc <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800c8bc:	b580      	push	{r7, lr}
 800c8be:	b088      	sub	sp, #32
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	60f8      	str	r0, [r7, #12]
 800c8c4:	460b      	mov	r3, r1
 800c8c6:	607a      	str	r2, [r7, #4]
 800c8c8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c8ca:	4b35      	ldr	r3, [pc, #212]	@ (800c9a0 <SDMMC_GetCmdResp6+0xe4>)
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	4a35      	ldr	r2, [pc, #212]	@ (800c9a4 <SDMMC_GetCmdResp6+0xe8>)
 800c8d0:	fba2 2303 	umull	r2, r3, r2, r3
 800c8d4:	0a5b      	lsrs	r3, r3, #9
 800c8d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c8da:	fb02 f303 	mul.w	r3, r2, r3
 800c8de:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800c8e0:	69fb      	ldr	r3, [r7, #28]
 800c8e2:	1e5a      	subs	r2, r3, #1
 800c8e4:	61fa      	str	r2, [r7, #28]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d102      	bne.n	800c8f0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c8ea:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c8ee:	e052      	b.n	800c996 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c8f4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c8f6:	69bb      	ldr	r3, [r7, #24]
 800c8f8:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d0ef      	beq.n	800c8e0 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c900:	69bb      	ldr	r3, [r7, #24]
 800c902:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c906:	2b00      	cmp	r3, #0
 800c908:	d1ea      	bne.n	800c8e0 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c90e:	f003 0304 	and.w	r3, r3, #4
 800c912:	2b00      	cmp	r3, #0
 800c914:	d004      	beq.n	800c920 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	2204      	movs	r2, #4
 800c91a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c91c:	2304      	movs	r3, #4
 800c91e:	e03a      	b.n	800c996 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c924:	f003 0301 	and.w	r3, r3, #1
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d004      	beq.n	800c936 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	2201      	movs	r2, #1
 800c930:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c932:	2301      	movs	r3, #1
 800c934:	e02f      	b.n	800c996 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c936:	68f8      	ldr	r0, [r7, #12]
 800c938:	f7ff fc0e 	bl	800c158 <SDMMC_GetCommandResponse>
 800c93c:	4603      	mov	r3, r0
 800c93e:	461a      	mov	r2, r3
 800c940:	7afb      	ldrb	r3, [r7, #11]
 800c942:	4293      	cmp	r3, r2
 800c944:	d001      	beq.n	800c94a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c946:	2301      	movs	r3, #1
 800c948:	e025      	b.n	800c996 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	22c5      	movs	r2, #197	@ 0xc5
 800c94e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c950:	2100      	movs	r1, #0
 800c952:	68f8      	ldr	r0, [r7, #12]
 800c954:	f7ff fc0d 	bl	800c172 <SDMMC_GetResponse>
 800c958:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800c95a:	697b      	ldr	r3, [r7, #20]
 800c95c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800c960:	2b00      	cmp	r3, #0
 800c962:	d106      	bne.n	800c972 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800c964:	697b      	ldr	r3, [r7, #20]
 800c966:	0c1b      	lsrs	r3, r3, #16
 800c968:	b29a      	uxth	r2, r3
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800c96e:	2300      	movs	r3, #0
 800c970:	e011      	b.n	800c996 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800c972:	697b      	ldr	r3, [r7, #20]
 800c974:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d002      	beq.n	800c982 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c97c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c980:	e009      	b.n	800c996 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800c982:	697b      	ldr	r3, [r7, #20]
 800c984:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d002      	beq.n	800c992 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c98c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c990:	e001      	b.n	800c996 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c992:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800c996:	4618      	mov	r0, r3
 800c998:	3720      	adds	r7, #32
 800c99a:	46bd      	mov	sp, r7
 800c99c:	bd80      	pop	{r7, pc}
 800c99e:	bf00      	nop
 800c9a0:	200000c0 	.word	0x200000c0
 800c9a4:	10624dd3 	.word	0x10624dd3

0800c9a8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800c9a8:	b480      	push	{r7}
 800c9aa:	b085      	sub	sp, #20
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c9b0:	4b22      	ldr	r3, [pc, #136]	@ (800ca3c <SDMMC_GetCmdResp7+0x94>)
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	4a22      	ldr	r2, [pc, #136]	@ (800ca40 <SDMMC_GetCmdResp7+0x98>)
 800c9b6:	fba2 2303 	umull	r2, r3, r2, r3
 800c9ba:	0a5b      	lsrs	r3, r3, #9
 800c9bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c9c0:	fb02 f303 	mul.w	r3, r2, r3
 800c9c4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	1e5a      	subs	r2, r3, #1
 800c9ca:	60fa      	str	r2, [r7, #12]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d102      	bne.n	800c9d6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c9d0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c9d4:	e02c      	b.n	800ca30 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c9da:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c9dc:	68bb      	ldr	r3, [r7, #8]
 800c9de:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d0ef      	beq.n	800c9c6 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c9e6:	68bb      	ldr	r3, [r7, #8]
 800c9e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d1ea      	bne.n	800c9c6 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c9f4:	f003 0304 	and.w	r3, r3, #4
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d004      	beq.n	800ca06 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	2204      	movs	r2, #4
 800ca00:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ca02:	2304      	movs	r3, #4
 800ca04:	e014      	b.n	800ca30 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ca0a:	f003 0301 	and.w	r3, r3, #1
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d004      	beq.n	800ca1c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	2201      	movs	r2, #1
 800ca16:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ca18:	2301      	movs	r3, #1
 800ca1a:	e009      	b.n	800ca30 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ca20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d002      	beq.n	800ca2e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	2240      	movs	r2, #64	@ 0x40
 800ca2c:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800ca2e:	2300      	movs	r3, #0
  
}
 800ca30:	4618      	mov	r0, r3
 800ca32:	3714      	adds	r7, #20
 800ca34:	46bd      	mov	sp, r7
 800ca36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca3a:	4770      	bx	lr
 800ca3c:	200000c0 	.word	0x200000c0
 800ca40:	10624dd3 	.word	0x10624dd3

0800ca44 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800ca44:	b480      	push	{r7}
 800ca46:	b085      	sub	sp, #20
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ca4c:	4b11      	ldr	r3, [pc, #68]	@ (800ca94 <SDMMC_GetCmdError+0x50>)
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	4a11      	ldr	r2, [pc, #68]	@ (800ca98 <SDMMC_GetCmdError+0x54>)
 800ca52:	fba2 2303 	umull	r2, r3, r2, r3
 800ca56:	0a5b      	lsrs	r3, r3, #9
 800ca58:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ca5c:	fb02 f303 	mul.w	r3, r2, r3
 800ca60:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	1e5a      	subs	r2, r3, #1
 800ca66:	60fa      	str	r2, [r7, #12]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d102      	bne.n	800ca72 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ca6c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ca70:	e009      	b.n	800ca86 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ca76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d0f1      	beq.n	800ca62 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	22c5      	movs	r2, #197	@ 0xc5
 800ca82:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800ca84:	2300      	movs	r3, #0
}
 800ca86:	4618      	mov	r0, r3
 800ca88:	3714      	adds	r7, #20
 800ca8a:	46bd      	mov	sp, r7
 800ca8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca90:	4770      	bx	lr
 800ca92:	bf00      	nop
 800ca94:	200000c0 	.word	0x200000c0
 800ca98:	10624dd3 	.word	0x10624dd3

0800ca9c <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 800ca9c:	b480      	push	{r7}
 800ca9e:	b085      	sub	sp, #20
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 800caa8:	4b0b      	ldr	r3, [pc, #44]	@ (800cad8 <NRF24_DelayMicroSeconds+0x3c>)
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	4a0b      	ldr	r2, [pc, #44]	@ (800cadc <NRF24_DelayMicroSeconds+0x40>)
 800caae:	fba2 2303 	umull	r2, r3, r2, r3
 800cab2:	0c9a      	lsrs	r2, r3, #18
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	fb02 f303 	mul.w	r3, r2, r3
 800caba:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 800cabc:	bf00      	nop
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	1e5a      	subs	r2, r3, #1
 800cac2:	60fa      	str	r2, [r7, #12]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d1fa      	bne.n	800cabe <NRF24_DelayMicroSeconds+0x22>
}
 800cac8:	bf00      	nop
 800caca:	bf00      	nop
 800cacc:	3714      	adds	r7, #20
 800cace:	46bd      	mov	sp, r7
 800cad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad4:	4770      	bx	lr
 800cad6:	bf00      	nop
 800cad8:	200000c0 	.word	0x200000c0
 800cadc:	165e9f81 	.word	0x165e9f81

0800cae0 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 800cae0:	b580      	push	{r7, lr}
 800cae2:	b082      	sub	sp, #8
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	2b00      	cmp	r3, #0
 800caec:	d008      	beq.n	800cb00 <NRF24_csn+0x20>
 800caee:	4b0a      	ldr	r3, [pc, #40]	@ (800cb18 <NRF24_csn+0x38>)
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	4a0a      	ldr	r2, [pc, #40]	@ (800cb1c <NRF24_csn+0x3c>)
 800caf4:	8811      	ldrh	r1, [r2, #0]
 800caf6:	2201      	movs	r2, #1
 800caf8:	4618      	mov	r0, r3
 800cafa:	f7f9 fe97 	bl	800682c <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 800cafe:	e007      	b.n	800cb10 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 800cb00:	4b05      	ldr	r3, [pc, #20]	@ (800cb18 <NRF24_csn+0x38>)
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	4a05      	ldr	r2, [pc, #20]	@ (800cb1c <NRF24_csn+0x3c>)
 800cb06:	8811      	ldrh	r1, [r2, #0]
 800cb08:	2200      	movs	r2, #0
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	f7f9 fe8e 	bl	800682c <HAL_GPIO_WritePin>
}
 800cb10:	bf00      	nop
 800cb12:	3708      	adds	r7, #8
 800cb14:	46bd      	mov	sp, r7
 800cb16:	bd80      	pop	{r7, pc}
 800cb18:	20031178 	.word	0x20031178
 800cb1c:	2003117c 	.word	0x2003117c

0800cb20 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 800cb20:	b580      	push	{r7, lr}
 800cb22:	b082      	sub	sp, #8
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d008      	beq.n	800cb40 <NRF24_ce+0x20>
 800cb2e:	4b0a      	ldr	r3, [pc, #40]	@ (800cb58 <NRF24_ce+0x38>)
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	4a0a      	ldr	r2, [pc, #40]	@ (800cb5c <NRF24_ce+0x3c>)
 800cb34:	8811      	ldrh	r1, [r2, #0]
 800cb36:	2201      	movs	r2, #1
 800cb38:	4618      	mov	r0, r3
 800cb3a:	f7f9 fe77 	bl	800682c <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 800cb3e:	e007      	b.n	800cb50 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 800cb40:	4b05      	ldr	r3, [pc, #20]	@ (800cb58 <NRF24_ce+0x38>)
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	4a05      	ldr	r2, [pc, #20]	@ (800cb5c <NRF24_ce+0x3c>)
 800cb46:	8811      	ldrh	r1, [r2, #0]
 800cb48:	2200      	movs	r2, #0
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	f7f9 fe6e 	bl	800682c <HAL_GPIO_WritePin>
}
 800cb50:	bf00      	nop
 800cb52:	3708      	adds	r7, #8
 800cb54:	46bd      	mov	sp, r7
 800cb56:	bd80      	pop	{r7, pc}
 800cb58:	20031178 	.word	0x20031178
 800cb5c:	2003117e 	.word	0x2003117e

0800cb60 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 800cb60:	b580      	push	{r7, lr}
 800cb62:	b084      	sub	sp, #16
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	4603      	mov	r3, r0
 800cb68:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 800cb6a:	2000      	movs	r0, #0
 800cb6c:	f7ff ffb8 	bl	800cae0 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 800cb70:	79fb      	ldrb	r3, [r7, #7]
 800cb72:	f003 031f 	and.w	r3, r3, #31
 800cb76:	b2db      	uxtb	r3, r3
 800cb78:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 800cb7a:	f107 010c 	add.w	r1, r7, #12
 800cb7e:	2364      	movs	r3, #100	@ 0x64
 800cb80:	2201      	movs	r2, #1
 800cb82:	480a      	ldr	r0, [pc, #40]	@ (800cbac <NRF24_read_register+0x4c>)
 800cb84:	f7fd fd7e 	bl	800a684 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 800cb88:	f107 030c 	add.w	r3, r7, #12
 800cb8c:	1c59      	adds	r1, r3, #1
 800cb8e:	2364      	movs	r3, #100	@ 0x64
 800cb90:	2201      	movs	r2, #1
 800cb92:	4806      	ldr	r0, [pc, #24]	@ (800cbac <NRF24_read_register+0x4c>)
 800cb94:	f7fd feeb 	bl	800a96e <HAL_SPI_Receive>
	retData = spiBuf[1];
 800cb98:	7b7b      	ldrb	r3, [r7, #13]
 800cb9a:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 800cb9c:	2001      	movs	r0, #1
 800cb9e:	f7ff ff9f 	bl	800cae0 <NRF24_csn>
	return retData;
 800cba2:	7bfb      	ldrb	r3, [r7, #15]
}
 800cba4:	4618      	mov	r0, r3
 800cba6:	3710      	adds	r7, #16
 800cba8:	46bd      	mov	sp, r7
 800cbaa:	bd80      	pop	{r7, pc}
 800cbac:	20031180 	.word	0x20031180

0800cbb0 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	b084      	sub	sp, #16
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	4603      	mov	r3, r0
 800cbb8:	6039      	str	r1, [r7, #0]
 800cbba:	71fb      	strb	r3, [r7, #7]
 800cbbc:	4613      	mov	r3, r2
 800cbbe:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 800cbc0:	2000      	movs	r0, #0
 800cbc2:	f7ff ff8d 	bl	800cae0 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 800cbc6:	79fb      	ldrb	r3, [r7, #7]
 800cbc8:	f003 031f 	and.w	r3, r3, #31
 800cbcc:	b2db      	uxtb	r3, r3
 800cbce:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 800cbd0:	f107 010c 	add.w	r1, r7, #12
 800cbd4:	2364      	movs	r3, #100	@ 0x64
 800cbd6:	2201      	movs	r2, #1
 800cbd8:	4808      	ldr	r0, [pc, #32]	@ (800cbfc <NRF24_read_registerN+0x4c>)
 800cbda:	f7fd fd53 	bl	800a684 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 800cbde:	79bb      	ldrb	r3, [r7, #6]
 800cbe0:	b29a      	uxth	r2, r3
 800cbe2:	2364      	movs	r3, #100	@ 0x64
 800cbe4:	6839      	ldr	r1, [r7, #0]
 800cbe6:	4805      	ldr	r0, [pc, #20]	@ (800cbfc <NRF24_read_registerN+0x4c>)
 800cbe8:	f7fd fec1 	bl	800a96e <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 800cbec:	2001      	movs	r0, #1
 800cbee:	f7ff ff77 	bl	800cae0 <NRF24_csn>
}
 800cbf2:	bf00      	nop
 800cbf4:	3710      	adds	r7, #16
 800cbf6:	46bd      	mov	sp, r7
 800cbf8:	bd80      	pop	{r7, pc}
 800cbfa:	bf00      	nop
 800cbfc:	20031180 	.word	0x20031180

0800cc00 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 800cc00:	b580      	push	{r7, lr}
 800cc02:	b084      	sub	sp, #16
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	4603      	mov	r3, r0
 800cc08:	460a      	mov	r2, r1
 800cc0a:	71fb      	strb	r3, [r7, #7]
 800cc0c:	4613      	mov	r3, r2
 800cc0e:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 800cc10:	2000      	movs	r0, #0
 800cc12:	f7ff ff65 	bl	800cae0 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800cc16:	79fb      	ldrb	r3, [r7, #7]
 800cc18:	f043 0320 	orr.w	r3, r3, #32
 800cc1c:	b2db      	uxtb	r3, r3
 800cc1e:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 800cc20:	79bb      	ldrb	r3, [r7, #6]
 800cc22:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 800cc24:	f107 010c 	add.w	r1, r7, #12
 800cc28:	2364      	movs	r3, #100	@ 0x64
 800cc2a:	2202      	movs	r2, #2
 800cc2c:	4804      	ldr	r0, [pc, #16]	@ (800cc40 <NRF24_write_register+0x40>)
 800cc2e:	f7fd fd29 	bl	800a684 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 800cc32:	2001      	movs	r0, #1
 800cc34:	f7ff ff54 	bl	800cae0 <NRF24_csn>
}
 800cc38:	bf00      	nop
 800cc3a:	3710      	adds	r7, #16
 800cc3c:	46bd      	mov	sp, r7
 800cc3e:	bd80      	pop	{r7, pc}
 800cc40:	20031180 	.word	0x20031180

0800cc44 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 800cc44:	b580      	push	{r7, lr}
 800cc46:	b084      	sub	sp, #16
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	4603      	mov	r3, r0
 800cc4c:	6039      	str	r1, [r7, #0]
 800cc4e:	71fb      	strb	r3, [r7, #7]
 800cc50:	4613      	mov	r3, r2
 800cc52:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 800cc54:	2000      	movs	r0, #0
 800cc56:	f7ff ff43 	bl	800cae0 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800cc5a:	79fb      	ldrb	r3, [r7, #7]
 800cc5c:	f043 0320 	orr.w	r3, r3, #32
 800cc60:	b2db      	uxtb	r3, r3
 800cc62:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 800cc64:	f107 010c 	add.w	r1, r7, #12
 800cc68:	2364      	movs	r3, #100	@ 0x64
 800cc6a:	2201      	movs	r2, #1
 800cc6c:	4808      	ldr	r0, [pc, #32]	@ (800cc90 <NRF24_write_registerN+0x4c>)
 800cc6e:	f7fd fd09 	bl	800a684 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 800cc72:	79bb      	ldrb	r3, [r7, #6]
 800cc74:	b29a      	uxth	r2, r3
 800cc76:	2364      	movs	r3, #100	@ 0x64
 800cc78:	6839      	ldr	r1, [r7, #0]
 800cc7a:	4805      	ldr	r0, [pc, #20]	@ (800cc90 <NRF24_write_registerN+0x4c>)
 800cc7c:	f7fd fd02 	bl	800a684 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 800cc80:	2001      	movs	r0, #1
 800cc82:	f7ff ff2d 	bl	800cae0 <NRF24_csn>
}
 800cc86:	bf00      	nop
 800cc88:	3710      	adds	r7, #16
 800cc8a:	46bd      	mov	sp, r7
 800cc8c:	bd80      	pop	{r7, pc}
 800cc8e:	bf00      	nop
 800cc90:	20031180 	.word	0x20031180

0800cc94 <NRF24_write_payload>:
//7. Write transmit payload
void NRF24_write_payload(const void* buf, uint8_t len)
{
 800cc94:	b580      	push	{r7, lr}
 800cc96:	b084      	sub	sp, #16
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	6078      	str	r0, [r7, #4]
 800cc9c:	460b      	mov	r3, r1
 800cc9e:	70fb      	strb	r3, [r7, #3]
	uint8_t wrPayloadCmd;
	//Bring CSN low
	NRF24_csn(0);
 800cca0:	2000      	movs	r0, #0
 800cca2:	f7ff ff1d 	bl	800cae0 <NRF24_csn>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 800cca6:	23a0      	movs	r3, #160	@ 0xa0
 800cca8:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&nrf24_hspi, &wrPayloadCmd, 1, 100);
 800ccaa:	f107 010f 	add.w	r1, r7, #15
 800ccae:	2364      	movs	r3, #100	@ 0x64
 800ccb0:	2201      	movs	r2, #1
 800ccb2:	4808      	ldr	r0, [pc, #32]	@ (800ccd4 <NRF24_write_payload+0x40>)
 800ccb4:	f7fd fce6 	bl	800a684 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t *)buf, len, 100);
 800ccb8:	78fb      	ldrb	r3, [r7, #3]
 800ccba:	b29a      	uxth	r2, r3
 800ccbc:	2364      	movs	r3, #100	@ 0x64
 800ccbe:	6879      	ldr	r1, [r7, #4]
 800ccc0:	4804      	ldr	r0, [pc, #16]	@ (800ccd4 <NRF24_write_payload+0x40>)
 800ccc2:	f7fd fcdf 	bl	800a684 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 800ccc6:	2001      	movs	r0, #1
 800ccc8:	f7ff ff0a 	bl	800cae0 <NRF24_csn>
}
 800cccc:	bf00      	nop
 800ccce:	3710      	adds	r7, #16
 800ccd0:	46bd      	mov	sp, r7
 800ccd2:	bd80      	pop	{r7, pc}
 800ccd4:	20031180 	.word	0x20031180

0800ccd8 <NRF24_flush_tx>:
	NRF24_csn(1);
}

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 800ccd8:	b580      	push	{r7, lr}
 800ccda:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 800ccdc:	21ff      	movs	r1, #255	@ 0xff
 800ccde:	20e1      	movs	r0, #225	@ 0xe1
 800cce0:	f7ff ff8e 	bl	800cc00 <NRF24_write_register>
}
 800cce4:	bf00      	nop
 800cce6:	bd80      	pop	{r7, pc}

0800cce8 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 800cce8:	b580      	push	{r7, lr}
 800ccea:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 800ccec:	21ff      	movs	r1, #255	@ 0xff
 800ccee:	20e2      	movs	r0, #226	@ 0xe2
 800ccf0:	f7ff ff86 	bl	800cc00 <NRF24_write_register>
}
 800ccf4:	bf00      	nop
 800ccf6:	bd80      	pop	{r7, pc}

0800ccf8 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 800ccf8:	b580      	push	{r7, lr}
 800ccfa:	b082      	sub	sp, #8
 800ccfc:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 800ccfe:	2007      	movs	r0, #7
 800cd00:	f7ff ff2e 	bl	800cb60 <NRF24_read_register>
 800cd04:	4603      	mov	r3, r0
 800cd06:	71fb      	strb	r3, [r7, #7]
	return statReg;
 800cd08:	79fb      	ldrb	r3, [r7, #7]
}
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	3708      	adds	r7, #8
 800cd0e:	46bd      	mov	sp, r7
 800cd10:	bd80      	pop	{r7, pc}
	...

0800cd14 <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 800cd14:	b082      	sub	sp, #8
 800cd16:	b580      	push	{r7, lr}
 800cd18:	b084      	sub	sp, #16
 800cd1a:	af00      	add	r7, sp, #0
 800cd1c:	6078      	str	r0, [r7, #4]
 800cd1e:	61fb      	str	r3, [r7, #28]
 800cd20:	460b      	mov	r3, r1
 800cd22:	807b      	strh	r3, [r7, #2]
 800cd24:	4613      	mov	r3, r2
 800cd26:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 800cd28:	4b66      	ldr	r3, [pc, #408]	@ (800cec4 <NRF24_begin+0x1b0>)
 800cd2a:	4618      	mov	r0, r3
 800cd2c:	f107 031c 	add.w	r3, r7, #28
 800cd30:	2264      	movs	r2, #100	@ 0x64
 800cd32:	4619      	mov	r1, r3
 800cd34:	f00a fd6b 	bl	801780e <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 800cd38:	4a63      	ldr	r2, [pc, #396]	@ (800cec8 <NRF24_begin+0x1b4>)
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 800cd3e:	4a63      	ldr	r2, [pc, #396]	@ (800cecc <NRF24_begin+0x1b8>)
 800cd40:	887b      	ldrh	r3, [r7, #2]
 800cd42:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 800cd44:	4a62      	ldr	r2, [pc, #392]	@ (800ced0 <NRF24_begin+0x1bc>)
 800cd46:	883b      	ldrh	r3, [r7, #0]
 800cd48:	8013      	strh	r3, [r2, #0]
	
	//Put pins to idle state
	NRF24_csn(1);
 800cd4a:	2001      	movs	r0, #1
 800cd4c:	f7ff fec8 	bl	800cae0 <NRF24_csn>
	NRF24_ce(0);
 800cd50:	2000      	movs	r0, #0
 800cd52:	f7ff fee5 	bl	800cb20 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 800cd56:	2005      	movs	r0, #5
 800cd58:	f7f8 fbfc 	bl	8005554 <HAL_Delay>
	
	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 800cd5c:	2108      	movs	r1, #8
 800cd5e:	2000      	movs	r0, #0
 800cd60:	f7ff ff4e 	bl	800cc00 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 800cd64:	213f      	movs	r1, #63	@ 0x3f
 800cd66:	2001      	movs	r0, #1
 800cd68:	f7ff ff4a 	bl	800cc00 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 800cd6c:	2103      	movs	r1, #3
 800cd6e:	2002      	movs	r0, #2
 800cd70:	f7ff ff46 	bl	800cc00 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 800cd74:	2103      	movs	r1, #3
 800cd76:	2003      	movs	r0, #3
 800cd78:	f7ff ff42 	bl	800cc00 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 800cd7c:	2103      	movs	r1, #3
 800cd7e:	2004      	movs	r0, #4
 800cd80:	f7ff ff3e 	bl	800cc00 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 800cd84:	2102      	movs	r1, #2
 800cd86:	2005      	movs	r0, #5
 800cd88:	f7ff ff3a 	bl	800cc00 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 800cd8c:	210f      	movs	r1, #15
 800cd8e:	2006      	movs	r0, #6
 800cd90:	f7ff ff36 	bl	800cc00 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 800cd94:	210e      	movs	r1, #14
 800cd96:	2007      	movs	r0, #7
 800cd98:	f7ff ff32 	bl	800cc00 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 800cd9c:	2100      	movs	r1, #0
 800cd9e:	2008      	movs	r0, #8
 800cda0:	f7ff ff2e 	bl	800cc00 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 800cda4:	2100      	movs	r1, #0
 800cda6:	2009      	movs	r0, #9
 800cda8:	f7ff ff2a 	bl	800cc00 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 800cdac:	23e7      	movs	r3, #231	@ 0xe7
 800cdae:	733b      	strb	r3, [r7, #12]
 800cdb0:	23e7      	movs	r3, #231	@ 0xe7
 800cdb2:	72fb      	strb	r3, [r7, #11]
 800cdb4:	23e7      	movs	r3, #231	@ 0xe7
 800cdb6:	72bb      	strb	r3, [r7, #10]
 800cdb8:	23e7      	movs	r3, #231	@ 0xe7
 800cdba:	727b      	strb	r3, [r7, #9]
 800cdbc:	23e7      	movs	r3, #231	@ 0xe7
 800cdbe:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 800cdc0:	f107 0308 	add.w	r3, r7, #8
 800cdc4:	2205      	movs	r2, #5
 800cdc6:	4619      	mov	r1, r3
 800cdc8:	200a      	movs	r0, #10
 800cdca:	f7ff ff3b 	bl	800cc44 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; 
 800cdce:	23c2      	movs	r3, #194	@ 0xc2
 800cdd0:	733b      	strb	r3, [r7, #12]
 800cdd2:	23c2      	movs	r3, #194	@ 0xc2
 800cdd4:	72fb      	strb	r3, [r7, #11]
 800cdd6:	23c2      	movs	r3, #194	@ 0xc2
 800cdd8:	72bb      	strb	r3, [r7, #10]
 800cdda:	23c2      	movs	r3, #194	@ 0xc2
 800cddc:	727b      	strb	r3, [r7, #9]
 800cdde:	23c2      	movs	r3, #194	@ 0xc2
 800cde0:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 800cde2:	f107 0308 	add.w	r3, r7, #8
 800cde6:	2205      	movs	r2, #5
 800cde8:	4619      	mov	r1, r3
 800cdea:	200b      	movs	r0, #11
 800cdec:	f7ff ff2a 	bl	800cc44 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 800cdf0:	21c3      	movs	r1, #195	@ 0xc3
 800cdf2:	200c      	movs	r0, #12
 800cdf4:	f7ff ff04 	bl	800cc00 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 800cdf8:	21c4      	movs	r1, #196	@ 0xc4
 800cdfa:	200d      	movs	r0, #13
 800cdfc:	f7ff ff00 	bl	800cc00 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 800ce00:	21c5      	movs	r1, #197	@ 0xc5
 800ce02:	200e      	movs	r0, #14
 800ce04:	f7ff fefc 	bl	800cc00 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 800ce08:	21c6      	movs	r1, #198	@ 0xc6
 800ce0a:	200f      	movs	r0, #15
 800ce0c:	f7ff fef8 	bl	800cc00 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 800ce10:	23e7      	movs	r3, #231	@ 0xe7
 800ce12:	733b      	strb	r3, [r7, #12]
 800ce14:	23e7      	movs	r3, #231	@ 0xe7
 800ce16:	72fb      	strb	r3, [r7, #11]
 800ce18:	23e7      	movs	r3, #231	@ 0xe7
 800ce1a:	72bb      	strb	r3, [r7, #10]
 800ce1c:	23e7      	movs	r3, #231	@ 0xe7
 800ce1e:	727b      	strb	r3, [r7, #9]
 800ce20:	23e7      	movs	r3, #231	@ 0xe7
 800ce22:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 800ce24:	f107 0308 	add.w	r3, r7, #8
 800ce28:	2205      	movs	r2, #5
 800ce2a:	4619      	mov	r1, r3
 800ce2c:	2010      	movs	r0, #16
 800ce2e:	f7ff ff09 	bl	800cc44 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 800ce32:	2100      	movs	r1, #0
 800ce34:	2011      	movs	r0, #17
 800ce36:	f7ff fee3 	bl	800cc00 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 800ce3a:	2100      	movs	r1, #0
 800ce3c:	2012      	movs	r0, #18
 800ce3e:	f7ff fedf 	bl	800cc00 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 800ce42:	2100      	movs	r1, #0
 800ce44:	2013      	movs	r0, #19
 800ce46:	f7ff fedb 	bl	800cc00 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 800ce4a:	2100      	movs	r1, #0
 800ce4c:	2014      	movs	r0, #20
 800ce4e:	f7ff fed7 	bl	800cc00 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 800ce52:	2100      	movs	r1, #0
 800ce54:	2015      	movs	r0, #21
 800ce56:	f7ff fed3 	bl	800cc00 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 800ce5a:	2100      	movs	r1, #0
 800ce5c:	2016      	movs	r0, #22
 800ce5e:	f7ff fecf 	bl	800cc00 <NRF24_write_register>
	
	NRF24_ACTIVATE_cmd();
 800ce62:	f000 fa89 	bl	800d378 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 800ce66:	2100      	movs	r1, #0
 800ce68:	201c      	movs	r0, #28
 800ce6a:	f7ff fec9 	bl	800cc00 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 800ce6e:	2100      	movs	r1, #0
 800ce70:	201d      	movs	r0, #29
 800ce72:	f7ff fec5 	bl	800cc00 <NRF24_write_register>
	printRadioSettings();
 800ce76:	f000 fa99 	bl	800d3ac <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 800ce7a:	210f      	movs	r1, #15
 800ce7c:	200f      	movs	r0, #15
 800ce7e:	f000 f8ad 	bl	800cfdc <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 800ce82:	2003      	movs	r0, #3
 800ce84:	f000 f927 	bl	800d0d6 <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 800ce88:	2001      	movs	r0, #1
 800ce8a:	f000 f95d 	bl	800d148 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 800ce8e:	2002      	movs	r0, #2
 800ce90:	f000 f9a0 	bl	800d1d4 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 800ce94:	f000 f8f2 	bl	800d07c <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 800ce98:	2020      	movs	r0, #32
 800ce9a:	f000 f8cf 	bl	800d03c <NRF24_setPayloadSize>
	
	//Reset status register
	NRF24_resetStatus();
 800ce9e:	f000 fa62 	bl	800d366 <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 800cea2:	204c      	movs	r0, #76	@ 0x4c
 800cea4:	f000 f8b5 	bl	800d012 <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 800cea8:	f7ff ff16 	bl	800ccd8 <NRF24_flush_tx>
	NRF24_flush_rx();
 800ceac:	f7ff ff1c 	bl	800cce8 <NRF24_flush_rx>
	
	NRF24_powerDown();
 800ceb0:	f000 f9b8 	bl	800d224 <NRF24_powerDown>
	
}
 800ceb4:	bf00      	nop
 800ceb6:	3710      	adds	r7, #16
 800ceb8:	46bd      	mov	sp, r7
 800ceba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cebe:	b002      	add	sp, #8
 800cec0:	4770      	bx	lr
 800cec2:	bf00      	nop
 800cec4:	20031180 	.word	0x20031180
 800cec8:	20031178 	.word	0x20031178
 800cecc:	2003117c 	.word	0x2003117c
 800ced0:	2003117e 	.word	0x2003117e

0800ced4 <NRF24_stopListening>:
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
}
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 800ced4:	b580      	push	{r7, lr}
 800ced6:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 800ced8:	2000      	movs	r0, #0
 800ceda:	f7ff fe21 	bl	800cb20 <NRF24_ce>
	NRF24_flush_tx();
 800cede:	f7ff fefb 	bl	800ccd8 <NRF24_flush_tx>
	NRF24_flush_rx();
 800cee2:	f7ff ff01 	bl	800cce8 <NRF24_flush_rx>
}
 800cee6:	bf00      	nop
 800cee8:	bd80      	pop	{r7, pc}
	...

0800ceec <NRF24_write>:
//15. Write(Transmit data), returns true if successfully sent
bool NRF24_write( const void* buf, uint8_t len )
{
 800ceec:	b580      	push	{r7, lr}
 800ceee:	b086      	sub	sp, #24
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	6078      	str	r0, [r7, #4]
 800cef4:	460b      	mov	r3, r1
 800cef6:	70fb      	strb	r3, [r7, #3]
	bool retStatus;
	//Start writing
	NRF24_resetStatus();
 800cef8:	f000 fa35 	bl	800d366 <NRF24_resetStatus>
	NRF24_startWrite(buf,len);
 800cefc:	78fb      	ldrb	r3, [r7, #3]
 800cefe:	4619      	mov	r1, r3
 800cf00:	6878      	ldr	r0, [r7, #4]
 800cf02:	f000 f9ce 	bl	800d2a2 <NRF24_startWrite>
	//Data monitor
  uint8_t observe_tx;
  uint8_t status;
  uint32_t sent_at = HAL_GetTick();
 800cf06:	f7f8 fb19 	bl	800553c <HAL_GetTick>
 800cf0a:	6178      	str	r0, [r7, #20]
	const uint32_t timeout = 1000; //ms to wait for timeout
 800cf0c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800cf10:	613b      	str	r3, [r7, #16]
	do
  {
    NRF24_read_registerN(REG_OBSERVE_TX,&observe_tx,1);
 800cf12:	f107 030d 	add.w	r3, r7, #13
 800cf16:	2201      	movs	r2, #1
 800cf18:	4619      	mov	r1, r3
 800cf1a:	2008      	movs	r0, #8
 800cf1c:	f7ff fe48 	bl	800cbb0 <NRF24_read_registerN>
		//Get status register
		status = NRF24_get_status();
 800cf20:	f7ff feea 	bl	800ccf8 <NRF24_get_status>
 800cf24:	4603      	mov	r3, r0
 800cf26:	73fb      	strb	r3, [r7, #15]
  }
  while( ! ( status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) ) ) && ( HAL_GetTick() - sent_at < timeout ) );
 800cf28:	7bfb      	ldrb	r3, [r7, #15]
 800cf2a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d107      	bne.n	800cf42 <NRF24_write+0x56>
 800cf32:	f7f8 fb03 	bl	800553c <HAL_GetTick>
 800cf36:	4602      	mov	r2, r0
 800cf38:	697b      	ldr	r3, [r7, #20]
 800cf3a:	1ad3      	subs	r3, r2, r3
 800cf3c:	693a      	ldr	r2, [r7, #16]
 800cf3e:	429a      	cmp	r2, r3
 800cf40:	d8e7      	bhi.n	800cf12 <NRF24_write+0x26>

//	printConfigReg();
//	printStatusReg();

	bool tx_ok, tx_fail;
  NRF24_whatHappened(&tx_ok,&tx_fail, &ack_payload_available);
 800cf42:	f107 010b 	add.w	r1, r7, #11
 800cf46:	f107 030c 	add.w	r3, r7, #12
 800cf4a:	4a0c      	ldr	r2, [pc, #48]	@ (800cf7c <NRF24_write+0x90>)
 800cf4c:	4618      	mov	r0, r3
 800cf4e:	f000 f9d7 	bl	800d300 <NRF24_whatHappened>
	retStatus = tx_ok;
 800cf52:	7b3b      	ldrb	r3, [r7, #12]
 800cf54:	73bb      	strb	r3, [r7, #14]
	if ( ack_payload_available )
 800cf56:	4b09      	ldr	r3, [pc, #36]	@ (800cf7c <NRF24_write+0x90>)
 800cf58:	781b      	ldrb	r3, [r3, #0]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d005      	beq.n	800cf6a <NRF24_write+0x7e>
  {
    ack_payload_length = NRF24_getDynamicPayloadSize();
 800cf5e:	f000 f885 	bl	800d06c <NRF24_getDynamicPayloadSize>
 800cf62:	4603      	mov	r3, r0
 800cf64:	461a      	mov	r2, r3
 800cf66:	4b06      	ldr	r3, [pc, #24]	@ (800cf80 <NRF24_write+0x94>)
 800cf68:	701a      	strb	r2, [r3, #0]
	}

	//Power down
	NRF24_available();
 800cf6a:	f000 f80b 	bl	800cf84 <NRF24_available>
	NRF24_flush_tx();
 800cf6e:	f7ff feb3 	bl	800ccd8 <NRF24_flush_tx>
	return retStatus;
 800cf72:	7bbb      	ldrb	r3, [r7, #14]
}
 800cf74:	4618      	mov	r0, r3
 800cf76:	3718      	adds	r7, #24
 800cf78:	46bd      	mov	sp, r7
 800cf7a:	bd80      	pop	{r7, pc}
 800cf7c:	20031170 	.word	0x20031170
 800cf80:	20031171 	.word	0x20031171

0800cf84 <NRF24_available>:


//16. Check for available data to read
bool NRF24_available(void)
{
 800cf84:	b580      	push	{r7, lr}
 800cf86:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 800cf88:	2000      	movs	r0, #0
 800cf8a:	f000 f95a 	bl	800d242 <NRF24_availablePipe>
 800cf8e:	4603      	mov	r3, r0
}
 800cf90:	4618      	mov	r0, r3
 800cf92:	bd80      	pop	{r7, pc}

0800cf94 <NRF24_openWritingPipe>:
	NRF24_getDynamicPayloadSize();
	return rxStatus;
}
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 800cf94:	b580      	push	{r7, lr}
 800cf96:	b084      	sub	sp, #16
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	e9c7 0100 	strd	r0, r1, [r7]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 800cf9e:	463b      	mov	r3, r7
 800cfa0:	2205      	movs	r2, #5
 800cfa2:	4619      	mov	r1, r3
 800cfa4:	200a      	movs	r0, #10
 800cfa6:	f7ff fe4d 	bl	800cc44 <NRF24_write_registerN>
  NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 800cfaa:	463b      	mov	r3, r7
 800cfac:	2205      	movs	r2, #5
 800cfae:	4619      	mov	r1, r3
 800cfb0:	2010      	movs	r0, #16
 800cfb2:	f7ff fe47 	bl	800cc44 <NRF24_write_registerN>
	
	const uint8_t max_payload_size = 32;
 800cfb6:	2320      	movs	r3, #32
 800cfb8:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 800cfba:	4b07      	ldr	r3, [pc, #28]	@ (800cfd8 <NRF24_openWritingPipe+0x44>)
 800cfbc:	781b      	ldrb	r3, [r3, #0]
 800cfbe:	7bfa      	ldrb	r2, [r7, #15]
 800cfc0:	4293      	cmp	r3, r2
 800cfc2:	bf28      	it	cs
 800cfc4:	4613      	movcs	r3, r2
 800cfc6:	b2db      	uxtb	r3, r3
 800cfc8:	4619      	mov	r1, r3
 800cfca:	2011      	movs	r0, #17
 800cfcc:	f7ff fe18 	bl	800cc00 <NRF24_write_register>
}
 800cfd0:	bf00      	nop
 800cfd2:	3710      	adds	r7, #16
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	bd80      	pop	{r7, pc}
 800cfd8:	20031172 	.word	0x20031172

0800cfdc <NRF24_setRetries>:
	}
	
}
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	b082      	sub	sp, #8
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	4603      	mov	r3, r0
 800cfe4:	460a      	mov	r2, r1
 800cfe6:	71fb      	strb	r3, [r7, #7]
 800cfe8:	4613      	mov	r3, r2
 800cfea:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 800cfec:	79fb      	ldrb	r3, [r7, #7]
 800cfee:	011b      	lsls	r3, r3, #4
 800cff0:	b25a      	sxtb	r2, r3
 800cff2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800cff6:	f003 030f 	and.w	r3, r3, #15
 800cffa:	b25b      	sxtb	r3, r3
 800cffc:	4313      	orrs	r3, r2
 800cffe:	b25b      	sxtb	r3, r3
 800d000:	b2db      	uxtb	r3, r3
 800d002:	4619      	mov	r1, r3
 800d004:	2004      	movs	r0, #4
 800d006:	f7ff fdfb 	bl	800cc00 <NRF24_write_register>
}
 800d00a:	bf00      	nop
 800d00c:	3708      	adds	r7, #8
 800d00e:	46bd      	mov	sp, r7
 800d010:	bd80      	pop	{r7, pc}

0800d012 <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 800d012:	b580      	push	{r7, lr}
 800d014:	b084      	sub	sp, #16
 800d016:	af00      	add	r7, sp, #0
 800d018:	4603      	mov	r3, r0
 800d01a:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 800d01c:	237f      	movs	r3, #127	@ 0x7f
 800d01e:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 800d020:	7bfa      	ldrb	r2, [r7, #15]
 800d022:	79fb      	ldrb	r3, [r7, #7]
 800d024:	4293      	cmp	r3, r2
 800d026:	bf28      	it	cs
 800d028:	4613      	movcs	r3, r2
 800d02a:	b2db      	uxtb	r3, r3
 800d02c:	4619      	mov	r1, r3
 800d02e:	2005      	movs	r0, #5
 800d030:	f7ff fde6 	bl	800cc00 <NRF24_write_register>
}
 800d034:	bf00      	nop
 800d036:	3710      	adds	r7, #16
 800d038:	46bd      	mov	sp, r7
 800d03a:	bd80      	pop	{r7, pc}

0800d03c <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 800d03c:	b480      	push	{r7}
 800d03e:	b085      	sub	sp, #20
 800d040:	af00      	add	r7, sp, #0
 800d042:	4603      	mov	r3, r0
 800d044:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 800d046:	2320      	movs	r3, #32
 800d048:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 800d04a:	7bfa      	ldrb	r2, [r7, #15]
 800d04c:	79fb      	ldrb	r3, [r7, #7]
 800d04e:	4293      	cmp	r3, r2
 800d050:	bf28      	it	cs
 800d052:	4613      	movcs	r3, r2
 800d054:	b2da      	uxtb	r2, r3
 800d056:	4b04      	ldr	r3, [pc, #16]	@ (800d068 <NRF24_setPayloadSize+0x2c>)
 800d058:	701a      	strb	r2, [r3, #0]
}
 800d05a:	bf00      	nop
 800d05c:	3714      	adds	r7, #20
 800d05e:	46bd      	mov	sp, r7
 800d060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d064:	4770      	bx	lr
 800d066:	bf00      	nop
 800d068:	20031172 	.word	0x20031172

0800d06c <NRF24_getDynamicPayloadSize>:
{
	return payload_size;
}
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 800d06c:	b580      	push	{r7, lr}
 800d06e:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 800d070:	2060      	movs	r0, #96	@ 0x60
 800d072:	f7ff fd75 	bl	800cb60 <NRF24_read_register>
 800d076:	4603      	mov	r3, r0
}
 800d078:	4618      	mov	r0, r3
 800d07a:	bd80      	pop	{r7, pc}

0800d07c <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
  dynamic_payloads_enabled = true;
	
}
void NRF24_disableDynamicPayloads(void)
{
 800d07c:	b580      	push	{r7, lr}
 800d07e:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 800d080:	201d      	movs	r0, #29
 800d082:	f7ff fd6d 	bl	800cb60 <NRF24_read_register>
 800d086:	4603      	mov	r3, r0
 800d088:	f023 0304 	bic.w	r3, r3, #4
 800d08c:	b2db      	uxtb	r3, r3
 800d08e:	4619      	mov	r1, r3
 800d090:	201d      	movs	r0, #29
 800d092:	f7ff fdb5 	bl	800cc00 <NRF24_write_register>
	//Disable for all pipes 
	NRF24_write_register(REG_DYNPD,0);
 800d096:	2100      	movs	r1, #0
 800d098:	201c      	movs	r0, #28
 800d09a:	f7ff fdb1 	bl	800cc00 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 800d09e:	4b02      	ldr	r3, [pc, #8]	@ (800d0a8 <NRF24_disableDynamicPayloads+0x2c>)
 800d0a0:	2200      	movs	r2, #0
 800d0a2:	701a      	strb	r2, [r3, #0]
}
 800d0a4:	bf00      	nop
 800d0a6:	bd80      	pop	{r7, pc}
 800d0a8:	20031173 	.word	0x20031173

0800d0ac <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 800d0ac:	b580      	push	{r7, lr}
 800d0ae:	b082      	sub	sp, #8
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	4603      	mov	r3, r0
 800d0b4:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 800d0b6:	79fb      	ldrb	r3, [r7, #7]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d004      	beq.n	800d0c6 <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 800d0bc:	213f      	movs	r1, #63	@ 0x3f
 800d0be:	2001      	movs	r0, #1
 800d0c0:	f7ff fd9e 	bl	800cc00 <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 800d0c4:	e003      	b.n	800d0ce <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 800d0c6:	2100      	movs	r1, #0
 800d0c8:	2001      	movs	r0, #1
 800d0ca:	f7ff fd99 	bl	800cc00 <NRF24_write_register>
}
 800d0ce:	bf00      	nop
 800d0d0:	3708      	adds	r7, #8
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	bd80      	pop	{r7, pc}

0800d0d6 <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 800d0d6:	b580      	push	{r7, lr}
 800d0d8:	b084      	sub	sp, #16
 800d0da:	af00      	add	r7, sp, #0
 800d0dc:	4603      	mov	r3, r0
 800d0de:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 800d0e0:	2006      	movs	r0, #6
 800d0e2:	f7ff fd3d 	bl	800cb60 <NRF24_read_register>
 800d0e6:	4603      	mov	r3, r0
 800d0e8:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 800d0ea:	7bfb      	ldrb	r3, [r7, #15]
 800d0ec:	f023 0306 	bic.w	r3, r3, #6
 800d0f0:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 800d0f2:	79fb      	ldrb	r3, [r7, #7]
 800d0f4:	2b03      	cmp	r3, #3
 800d0f6:	d104      	bne.n	800d102 <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 800d0f8:	7bfb      	ldrb	r3, [r7, #15]
 800d0fa:	f043 0306 	orr.w	r3, r3, #6
 800d0fe:	73fb      	strb	r3, [r7, #15]
 800d100:	e019      	b.n	800d136 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 800d102:	79fb      	ldrb	r3, [r7, #7]
 800d104:	2b02      	cmp	r3, #2
 800d106:	d104      	bne.n	800d112 <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 800d108:	7bfb      	ldrb	r3, [r7, #15]
 800d10a:	f043 0304 	orr.w	r3, r3, #4
 800d10e:	73fb      	strb	r3, [r7, #15]
 800d110:	e011      	b.n	800d136 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 800d112:	79fb      	ldrb	r3, [r7, #7]
 800d114:	2b01      	cmp	r3, #1
 800d116:	d104      	bne.n	800d122 <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 800d118:	7bfb      	ldrb	r3, [r7, #15]
 800d11a:	f043 0302 	orr.w	r3, r3, #2
 800d11e:	73fb      	strb	r3, [r7, #15]
 800d120:	e009      	b.n	800d136 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 800d122:	79fb      	ldrb	r3, [r7, #7]
 800d124:	2b00      	cmp	r3, #0
 800d126:	d006      	beq.n	800d136 <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 800d128:	79fb      	ldrb	r3, [r7, #7]
 800d12a:	2b04      	cmp	r3, #4
 800d12c:	d103      	bne.n	800d136 <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 800d12e:	7bfb      	ldrb	r3, [r7, #15]
 800d130:	f043 0306 	orr.w	r3, r3, #6
 800d134:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 800d136:	7bfb      	ldrb	r3, [r7, #15]
 800d138:	4619      	mov	r1, r3
 800d13a:	2006      	movs	r0, #6
 800d13c:	f7ff fd60 	bl	800cc00 <NRF24_write_register>
}
 800d140:	bf00      	nop
 800d142:	3710      	adds	r7, #16
 800d144:	46bd      	mov	sp, r7
 800d146:	bd80      	pop	{r7, pc}

0800d148 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 800d148:	b580      	push	{r7, lr}
 800d14a:	b084      	sub	sp, #16
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	4603      	mov	r3, r0
 800d150:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 800d152:	2300      	movs	r3, #0
 800d154:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 800d156:	2006      	movs	r0, #6
 800d158:	f7ff fd02 	bl	800cb60 <NRF24_read_register>
 800d15c:	4603      	mov	r3, r0
 800d15e:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 800d160:	4b1b      	ldr	r3, [pc, #108]	@ (800d1d0 <NRF24_setDataRate+0x88>)
 800d162:	2200      	movs	r2, #0
 800d164:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 800d166:	7bbb      	ldrb	r3, [r7, #14]
 800d168:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 800d16c:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 800d16e:	79fb      	ldrb	r3, [r7, #7]
 800d170:	2b02      	cmp	r3, #2
 800d172:	d107      	bne.n	800d184 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 800d174:	4b16      	ldr	r3, [pc, #88]	@ (800d1d0 <NRF24_setDataRate+0x88>)
 800d176:	2200      	movs	r2, #0
 800d178:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 800d17a:	7bbb      	ldrb	r3, [r7, #14]
 800d17c:	f043 0320 	orr.w	r3, r3, #32
 800d180:	73bb      	strb	r3, [r7, #14]
 800d182:	e00d      	b.n	800d1a0 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 800d184:	79fb      	ldrb	r3, [r7, #7]
 800d186:	2b01      	cmp	r3, #1
 800d188:	d107      	bne.n	800d19a <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 800d18a:	4b11      	ldr	r3, [pc, #68]	@ (800d1d0 <NRF24_setDataRate+0x88>)
 800d18c:	2201      	movs	r2, #1
 800d18e:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 800d190:	7bbb      	ldrb	r3, [r7, #14]
 800d192:	f043 0308 	orr.w	r3, r3, #8
 800d196:	73bb      	strb	r3, [r7, #14]
 800d198:	e002      	b.n	800d1a0 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 800d19a:	4b0d      	ldr	r3, [pc, #52]	@ (800d1d0 <NRF24_setDataRate+0x88>)
 800d19c:	2200      	movs	r2, #0
 800d19e:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 800d1a0:	7bbb      	ldrb	r3, [r7, #14]
 800d1a2:	4619      	mov	r1, r3
 800d1a4:	2006      	movs	r0, #6
 800d1a6:	f7ff fd2b 	bl	800cc00 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 800d1aa:	2006      	movs	r0, #6
 800d1ac:	f7ff fcd8 	bl	800cb60 <NRF24_read_register>
 800d1b0:	4603      	mov	r3, r0
 800d1b2:	461a      	mov	r2, r3
 800d1b4:	7bbb      	ldrb	r3, [r7, #14]
 800d1b6:	4293      	cmp	r3, r2
 800d1b8:	d102      	bne.n	800d1c0 <NRF24_setDataRate+0x78>
  {
    result = true;
 800d1ba:	2301      	movs	r3, #1
 800d1bc:	73fb      	strb	r3, [r7, #15]
 800d1be:	e002      	b.n	800d1c6 <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 800d1c0:	4b03      	ldr	r3, [pc, #12]	@ (800d1d0 <NRF24_setDataRate+0x88>)
 800d1c2:	2200      	movs	r2, #0
 800d1c4:	701a      	strb	r2, [r3, #0]
  }

  return result;
 800d1c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1c8:	4618      	mov	r0, r3
 800d1ca:	3710      	adds	r7, #16
 800d1cc:	46bd      	mov	sp, r7
 800d1ce:	bd80      	pop	{r7, pc}
 800d1d0:	20031174 	.word	0x20031174

0800d1d4 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 800d1d4:	b580      	push	{r7, lr}
 800d1d6:	b084      	sub	sp, #16
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	4603      	mov	r3, r0
 800d1dc:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 800d1de:	2000      	movs	r0, #0
 800d1e0:	f7ff fcbe 	bl	800cb60 <NRF24_read_register>
 800d1e4:	4603      	mov	r3, r0
 800d1e6:	f023 030c 	bic.w	r3, r3, #12
 800d1ea:	73fb      	strb	r3, [r7, #15]
  
  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 800d1ec:	79fb      	ldrb	r3, [r7, #7]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d00f      	beq.n	800d212 <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above. 
  }
  else if ( length == RF24_CRC_8 )
 800d1f2:	79fb      	ldrb	r3, [r7, #7]
 800d1f4:	2b01      	cmp	r3, #1
 800d1f6:	d104      	bne.n	800d202 <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 800d1f8:	7bfb      	ldrb	r3, [r7, #15]
 800d1fa:	f043 0308 	orr.w	r3, r3, #8
 800d1fe:	73fb      	strb	r3, [r7, #15]
 800d200:	e007      	b.n	800d212 <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 800d202:	7bfb      	ldrb	r3, [r7, #15]
 800d204:	f043 0308 	orr.w	r3, r3, #8
 800d208:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 800d20a:	7bfb      	ldrb	r3, [r7, #15]
 800d20c:	f043 0304 	orr.w	r3, r3, #4
 800d210:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 800d212:	7bfb      	ldrb	r3, [r7, #15]
 800d214:	4619      	mov	r1, r3
 800d216:	2000      	movs	r0, #0
 800d218:	f7ff fcf2 	bl	800cc00 <NRF24_write_register>
}
 800d21c:	bf00      	nop
 800d21e:	3710      	adds	r7, #16
 800d220:	46bd      	mov	sp, r7
 800d222:	bd80      	pop	{r7, pc}

0800d224 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 800d224:	b580      	push	{r7, lr}
 800d226:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 800d228:	2000      	movs	r0, #0
 800d22a:	f7ff fc99 	bl	800cb60 <NRF24_read_register>
 800d22e:	4603      	mov	r3, r0
 800d230:	f023 0302 	bic.w	r3, r3, #2
 800d234:	b2db      	uxtb	r3, r3
 800d236:	4619      	mov	r1, r3
 800d238:	2000      	movs	r0, #0
 800d23a:	f7ff fce1 	bl	800cc00 <NRF24_write_register>
}
 800d23e:	bf00      	nop
 800d240:	bd80      	pop	{r7, pc}

0800d242 <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 800d242:	b580      	push	{r7, lr}
 800d244:	b084      	sub	sp, #16
 800d246:	af00      	add	r7, sp, #0
 800d248:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 800d24a:	f7ff fd55 	bl	800ccf8 <NRF24_get_status>
 800d24e:	4603      	mov	r3, r0
 800d250:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 800d252:	7bfb      	ldrb	r3, [r7, #15]
 800d254:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d258:	2b00      	cmp	r3, #0
 800d25a:	bf14      	ite	ne
 800d25c:	2301      	movne	r3, #1
 800d25e:	2300      	moveq	r3, #0
 800d260:	73bb      	strb	r3, [r7, #14]

  if (result)
 800d262:	7bbb      	ldrb	r3, [r7, #14]
 800d264:	2b00      	cmp	r3, #0
 800d266:	d017      	beq.n	800d298 <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d007      	beq.n	800d27e <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 800d26e:	7bfb      	ldrb	r3, [r7, #15]
 800d270:	085b      	lsrs	r3, r3, #1
 800d272:	b2db      	uxtb	r3, r3
 800d274:	f003 0307 	and.w	r3, r3, #7
 800d278:	b2da      	uxtb	r2, r3
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 800d27e:	2140      	movs	r1, #64	@ 0x40
 800d280:	2007      	movs	r0, #7
 800d282:	f7ff fcbd 	bl	800cc00 <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 800d286:	7bfb      	ldrb	r3, [r7, #15]
 800d288:	f003 0320 	and.w	r3, r3, #32
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d003      	beq.n	800d298 <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 800d290:	2120      	movs	r1, #32
 800d292:	2007      	movs	r0, #7
 800d294:	f7ff fcb4 	bl	800cc00 <NRF24_write_register>
    }
  }
  return result;
 800d298:	7bbb      	ldrb	r3, [r7, #14]
}
 800d29a:	4618      	mov	r0, r3
 800d29c:	3710      	adds	r7, #16
 800d29e:	46bd      	mov	sp, r7
 800d2a0:	bd80      	pop	{r7, pc}

0800d2a2 <NRF24_startWrite>:
//40. Start write (for IRQ mode)
void NRF24_startWrite( const void* buf, uint8_t len )
{
 800d2a2:	b580      	push	{r7, lr}
 800d2a4:	b082      	sub	sp, #8
 800d2a6:	af00      	add	r7, sp, #0
 800d2a8:	6078      	str	r0, [r7, #4]
 800d2aa:	460b      	mov	r3, r1
 800d2ac:	70fb      	strb	r3, [r7, #3]
  // Transmitter power-up
  NRF24_ce(0);
 800d2ae:	2000      	movs	r0, #0
 800d2b0:	f7ff fc36 	bl	800cb20 <NRF24_ce>
  NRF24_write_register(REG_CONFIG, ( NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP) ) & ~_BV(BIT_PRIM_RX) );
 800d2b4:	2000      	movs	r0, #0
 800d2b6:	f7ff fc53 	bl	800cb60 <NRF24_read_register>
 800d2ba:	4603      	mov	r3, r0
 800d2bc:	f043 0302 	orr.w	r3, r3, #2
 800d2c0:	b2db      	uxtb	r3, r3
 800d2c2:	f023 0301 	bic.w	r3, r3, #1
 800d2c6:	b2db      	uxtb	r3, r3
 800d2c8:	4619      	mov	r1, r3
 800d2ca:	2000      	movs	r0, #0
 800d2cc:	f7ff fc98 	bl	800cc00 <NRF24_write_register>
  NRF24_ce(1);
 800d2d0:	2001      	movs	r0, #1
 800d2d2:	f7ff fc25 	bl	800cb20 <NRF24_ce>
  NRF24_DelayMicroSeconds(150);
 800d2d6:	2096      	movs	r0, #150	@ 0x96
 800d2d8:	f7ff fbe0 	bl	800ca9c <NRF24_DelayMicroSeconds>

  // Send the payload
  NRF24_write_payload( buf, len );
 800d2dc:	78fb      	ldrb	r3, [r7, #3]
 800d2de:	4619      	mov	r1, r3
 800d2e0:	6878      	ldr	r0, [r7, #4]
 800d2e2:	f7ff fcd7 	bl	800cc94 <NRF24_write_payload>

  // Enable Tx for 15usec
  NRF24_ce(1);
 800d2e6:	2001      	movs	r0, #1
 800d2e8:	f7ff fc1a 	bl	800cb20 <NRF24_ce>
  NRF24_DelayMicroSeconds(15);
 800d2ec:	200f      	movs	r0, #15
 800d2ee:	f7ff fbd5 	bl	800ca9c <NRF24_DelayMicroSeconds>
  NRF24_ce(0);
 800d2f2:	2000      	movs	r0, #0
 800d2f4:	f7ff fc14 	bl	800cb20 <NRF24_ce>
}
 800d2f8:	bf00      	nop
 800d2fa:	3708      	adds	r7, #8
 800d2fc:	46bd      	mov	sp, r7
 800d2fe:	bd80      	pop	{r7, pc}

0800d300 <NRF24_whatHappened>:
  ack_payload_available = false;
  return result;
}
//43. Check interrupt flags
void NRF24_whatHappened(bool *tx_ok,bool *tx_fail,bool *rx_ready)
{
 800d300:	b580      	push	{r7, lr}
 800d302:	b086      	sub	sp, #24
 800d304:	af00      	add	r7, sp, #0
 800d306:	60f8      	str	r0, [r7, #12]
 800d308:	60b9      	str	r1, [r7, #8]
 800d30a:	607a      	str	r2, [r7, #4]
	uint8_t status = NRF24_get_status();
 800d30c:	f7ff fcf4 	bl	800ccf8 <NRF24_get_status>
 800d310:	4603      	mov	r3, r0
 800d312:	75fb      	strb	r3, [r7, #23]
	*tx_ok = 0;
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	2200      	movs	r2, #0
 800d318:	701a      	strb	r2, [r3, #0]
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 800d31a:	2170      	movs	r1, #112	@ 0x70
 800d31c:	2007      	movs	r0, #7
 800d31e:	f7ff fc6f 	bl	800cc00 <NRF24_write_register>
  // Report to the user what happened
  *tx_ok = status & _BV(BIT_TX_DS);
 800d322:	7dfb      	ldrb	r3, [r7, #23]
 800d324:	f003 0320 	and.w	r3, r3, #32
 800d328:	2b00      	cmp	r3, #0
 800d32a:	bf14      	ite	ne
 800d32c:	2301      	movne	r3, #1
 800d32e:	2300      	moveq	r3, #0
 800d330:	b2da      	uxtb	r2, r3
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	701a      	strb	r2, [r3, #0]
  *tx_fail = status & _BV(BIT_MAX_RT);
 800d336:	7dfb      	ldrb	r3, [r7, #23]
 800d338:	f003 0310 	and.w	r3, r3, #16
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	bf14      	ite	ne
 800d340:	2301      	movne	r3, #1
 800d342:	2300      	moveq	r3, #0
 800d344:	b2da      	uxtb	r2, r3
 800d346:	68bb      	ldr	r3, [r7, #8]
 800d348:	701a      	strb	r2, [r3, #0]
  *rx_ready = status & _BV(BIT_RX_DR);
 800d34a:	7dfb      	ldrb	r3, [r7, #23]
 800d34c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d350:	2b00      	cmp	r3, #0
 800d352:	bf14      	ite	ne
 800d354:	2301      	movne	r3, #1
 800d356:	2300      	moveq	r3, #0
 800d358:	b2da      	uxtb	r2, r3
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	701a      	strb	r2, [r3, #0]
}
 800d35e:	bf00      	nop
 800d360:	3718      	adds	r7, #24
 800d362:	46bd      	mov	sp, r7
 800d364:	bd80      	pop	{r7, pc}

0800d366 <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 800d366:	b580      	push	{r7, lr}
 800d368:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 800d36a:	2170      	movs	r1, #112	@ 0x70
 800d36c:	2007      	movs	r0, #7
 800d36e:	f7ff fc47 	bl	800cc00 <NRF24_write_register>
}
 800d372:	bf00      	nop
 800d374:	bd80      	pop	{r7, pc}
	...

0800d378 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 800d378:	b580      	push	{r7, lr}
 800d37a:	b082      	sub	sp, #8
 800d37c:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 800d37e:	2000      	movs	r0, #0
 800d380:	f7ff fbae 	bl	800cae0 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 800d384:	2350      	movs	r3, #80	@ 0x50
 800d386:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 800d388:	2373      	movs	r3, #115	@ 0x73
 800d38a:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 800d38c:	1d39      	adds	r1, r7, #4
 800d38e:	2364      	movs	r3, #100	@ 0x64
 800d390:	2202      	movs	r2, #2
 800d392:	4805      	ldr	r0, [pc, #20]	@ (800d3a8 <NRF24_ACTIVATE_cmd+0x30>)
 800d394:	f7fd f976 	bl	800a684 <HAL_SPI_Transmit>
	NRF24_csn(1);
 800d398:	2001      	movs	r0, #1
 800d39a:	f7ff fba1 	bl	800cae0 <NRF24_csn>
}
 800d39e:	bf00      	nop
 800d3a0:	3708      	adds	r7, #8
 800d3a2:	46bd      	mov	sp, r7
 800d3a4:	bd80      	pop	{r7, pc}
 800d3a6:	bf00      	nop
 800d3a8:	20031180 	.word	0x20031180

0800d3ac <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 800d3ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d3ae:	b0a1      	sub	sp, #132	@ 0x84
 800d3b0:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 800d3b2:	f107 0308 	add.w	r3, r7, #8
 800d3b6:	49c3      	ldr	r1, [pc, #780]	@ (800d6c4 <printRadioSettings+0x318>)
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	f00a f8a1 	bl	8017500 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800d3be:	f107 0308 	add.w	r3, r7, #8
 800d3c2:	4618      	mov	r0, r3
 800d3c4:	f7f2 ffe4 	bl	8000390 <strlen>
 800d3c8:	4603      	mov	r3, r0
 800d3ca:	b29a      	uxth	r2, r3
 800d3cc:	f107 0108 	add.w	r1, r7, #8
 800d3d0:	230a      	movs	r3, #10
 800d3d2:	48bd      	ldr	r0, [pc, #756]	@ (800d6c8 <printRadioSettings+0x31c>)
 800d3d4:	f7fe f876 	bl	800b4c4 <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 800d3d8:	2000      	movs	r0, #0
 800d3da:	f7ff fbc1 	bl	800cb60 <NRF24_read_register>
 800d3de:	4603      	mov	r3, r0
 800d3e0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if(reg8Val & (1 << 3))
 800d3e4:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800d3e8:	f003 0308 	and.w	r3, r3, #8
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d013      	beq.n	800d418 <printRadioSettings+0x6c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 800d3f0:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800d3f4:	f003 0304 	and.w	r3, r3, #4
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d006      	beq.n	800d40a <printRadioSettings+0x5e>
 800d3fc:	f107 0308 	add.w	r3, r7, #8
 800d400:	49b2      	ldr	r1, [pc, #712]	@ (800d6cc <printRadioSettings+0x320>)
 800d402:	4618      	mov	r0, r3
 800d404:	f00a f87c 	bl	8017500 <siprintf>
 800d408:	e00c      	b.n	800d424 <printRadioSettings+0x78>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");	
 800d40a:	f107 0308 	add.w	r3, r7, #8
 800d40e:	49b0      	ldr	r1, [pc, #704]	@ (800d6d0 <printRadioSettings+0x324>)
 800d410:	4618      	mov	r0, r3
 800d412:	f00a f875 	bl	8017500 <siprintf>
 800d416:	e005      	b.n	800d424 <printRadioSettings+0x78>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 800d418:	f107 0308 	add.w	r3, r7, #8
 800d41c:	49ad      	ldr	r1, [pc, #692]	@ (800d6d4 <printRadioSettings+0x328>)
 800d41e:	4618      	mov	r0, r3
 800d420:	f00a f86e 	bl	8017500 <siprintf>
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800d424:	f107 0308 	add.w	r3, r7, #8
 800d428:	4618      	mov	r0, r3
 800d42a:	f7f2 ffb1 	bl	8000390 <strlen>
 800d42e:	4603      	mov	r3, r0
 800d430:	b29a      	uxth	r2, r3
 800d432:	f107 0108 	add.w	r1, r7, #8
 800d436:	230a      	movs	r3, #10
 800d438:	48a3      	ldr	r0, [pc, #652]	@ (800d6c8 <printRadioSettings+0x31c>)
 800d43a:	f7fe f843 	bl	800b4c4 <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 800d43e:	2001      	movs	r0, #1
 800d440:	f7ff fb8e 	bl	800cb60 <NRF24_read_register>
 800d444:	4603      	mov	r3, r0
 800d446:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800d44a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800d44e:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800d452:	2b00      	cmp	r3, #0
 800d454:	bfcc      	ite	gt
 800d456:	2301      	movgt	r3, #1
 800d458:	2300      	movle	r3, #0
 800d45a:	b2db      	uxtb	r3, r3
 800d45c:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800d45e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800d462:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800d466:	2b00      	cmp	r3, #0
 800d468:	bfcc      	ite	gt
 800d46a:	2301      	movgt	r3, #1
 800d46c:	2300      	movle	r3, #0
 800d46e:	b2db      	uxtb	r3, r3
 800d470:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800d472:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800d476:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	bfcc      	ite	gt
 800d47e:	2301      	movgt	r3, #1
 800d480:	2300      	movle	r3, #0
 800d482:	b2db      	uxtb	r3, r3
 800d484:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800d486:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800d48a:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800d48e:	2b00      	cmp	r3, #0
 800d490:	bfcc      	ite	gt
 800d492:	2301      	movgt	r3, #1
 800d494:	2300      	movle	r3, #0
 800d496:	b2db      	uxtb	r3, r3
 800d498:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800d49a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800d49e:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	bfcc      	ite	gt
 800d4a6:	2301      	movgt	r3, #1
 800d4a8:	2300      	movle	r3, #0
 800d4aa:	b2db      	uxtb	r3, r3
 800d4ac:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800d4ae:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800d4b2:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	bfcc      	ite	gt
 800d4ba:	2301      	movgt	r3, #1
 800d4bc:	2300      	movle	r3, #0
 800d4be:	b2db      	uxtb	r3, r3
 800d4c0:	f107 0008 	add.w	r0, r7, #8
 800d4c4:	9303      	str	r3, [sp, #12]
 800d4c6:	9402      	str	r4, [sp, #8]
 800d4c8:	9101      	str	r1, [sp, #4]
 800d4ca:	9200      	str	r2, [sp, #0]
 800d4cc:	4633      	mov	r3, r6
 800d4ce:	462a      	mov	r2, r5
 800d4d0:	4981      	ldr	r1, [pc, #516]	@ (800d6d8 <printRadioSettings+0x32c>)
 800d4d2:	f00a f815 	bl	8017500 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800d4d6:	f107 0308 	add.w	r3, r7, #8
 800d4da:	4618      	mov	r0, r3
 800d4dc:	f7f2 ff58 	bl	8000390 <strlen>
 800d4e0:	4603      	mov	r3, r0
 800d4e2:	b29a      	uxth	r2, r3
 800d4e4:	f107 0108 	add.w	r1, r7, #8
 800d4e8:	230a      	movs	r3, #10
 800d4ea:	4877      	ldr	r0, [pc, #476]	@ (800d6c8 <printRadioSettings+0x31c>)
 800d4ec:	f7fd ffea 	bl	800b4c4 <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 800d4f0:	2002      	movs	r0, #2
 800d4f2:	f7ff fb35 	bl	800cb60 <NRF24_read_register>
 800d4f6:	4603      	mov	r3, r0
 800d4f8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800d4fc:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800d500:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800d504:	2b00      	cmp	r3, #0
 800d506:	bfcc      	ite	gt
 800d508:	2301      	movgt	r3, #1
 800d50a:	2300      	movle	r3, #0
 800d50c:	b2db      	uxtb	r3, r3
 800d50e:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800d510:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800d514:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800d518:	2b00      	cmp	r3, #0
 800d51a:	bfcc      	ite	gt
 800d51c:	2301      	movgt	r3, #1
 800d51e:	2300      	movle	r3, #0
 800d520:	b2db      	uxtb	r3, r3
 800d522:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800d524:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800d528:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	bfcc      	ite	gt
 800d530:	2301      	movgt	r3, #1
 800d532:	2300      	movle	r3, #0
 800d534:	b2db      	uxtb	r3, r3
 800d536:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800d538:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800d53c:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800d540:	2b00      	cmp	r3, #0
 800d542:	bfcc      	ite	gt
 800d544:	2301      	movgt	r3, #1
 800d546:	2300      	movle	r3, #0
 800d548:	b2db      	uxtb	r3, r3
 800d54a:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800d54c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800d550:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800d554:	2b00      	cmp	r3, #0
 800d556:	bfcc      	ite	gt
 800d558:	2301      	movgt	r3, #1
 800d55a:	2300      	movle	r3, #0
 800d55c:	b2db      	uxtb	r3, r3
 800d55e:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800d560:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800d564:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800d568:	2b00      	cmp	r3, #0
 800d56a:	bfcc      	ite	gt
 800d56c:	2301      	movgt	r3, #1
 800d56e:	2300      	movle	r3, #0
 800d570:	b2db      	uxtb	r3, r3
 800d572:	f107 0008 	add.w	r0, r7, #8
 800d576:	9303      	str	r3, [sp, #12]
 800d578:	9402      	str	r4, [sp, #8]
 800d57a:	9101      	str	r1, [sp, #4]
 800d57c:	9200      	str	r2, [sp, #0]
 800d57e:	4633      	mov	r3, r6
 800d580:	462a      	mov	r2, r5
 800d582:	4956      	ldr	r1, [pc, #344]	@ (800d6dc <printRadioSettings+0x330>)
 800d584:	f009 ffbc 	bl	8017500 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800d588:	f107 0308 	add.w	r3, r7, #8
 800d58c:	4618      	mov	r0, r3
 800d58e:	f7f2 feff 	bl	8000390 <strlen>
 800d592:	4603      	mov	r3, r0
 800d594:	b29a      	uxth	r2, r3
 800d596:	f107 0108 	add.w	r1, r7, #8
 800d59a:	230a      	movs	r3, #10
 800d59c:	484a      	ldr	r0, [pc, #296]	@ (800d6c8 <printRadioSettings+0x31c>)
 800d59e:	f7fd ff91 	bl	800b4c4 <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 800d5a2:	2003      	movs	r0, #3
 800d5a4:	f7ff fadc 	bl	800cb60 <NRF24_read_register>
 800d5a8:	4603      	mov	r3, r0
 800d5aa:	f003 0303 	and.w	r3, r3, #3
 800d5ae:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	reg8Val +=2;
 800d5b2:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800d5b6:	3302      	adds	r3, #2
 800d5b8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 800d5bc:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 800d5c0:	f107 0308 	add.w	r3, r7, #8
 800d5c4:	4946      	ldr	r1, [pc, #280]	@ (800d6e0 <printRadioSettings+0x334>)
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	f009 ff9a 	bl	8017500 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800d5cc:	f107 0308 	add.w	r3, r7, #8
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	f7f2 fedd 	bl	8000390 <strlen>
 800d5d6:	4603      	mov	r3, r0
 800d5d8:	b29a      	uxth	r2, r3
 800d5da:	f107 0108 	add.w	r1, r7, #8
 800d5de:	230a      	movs	r3, #10
 800d5e0:	4839      	ldr	r0, [pc, #228]	@ (800d6c8 <printRadioSettings+0x31c>)
 800d5e2:	f7fd ff6f 	bl	800b4c4 <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 800d5e6:	2005      	movs	r0, #5
 800d5e8:	f7ff faba 	bl	800cb60 <NRF24_read_register>
 800d5ec:	4603      	mov	r3, r0
 800d5ee:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 800d5f2:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800d5f6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d5fa:	f107 0308 	add.w	r3, r7, #8
 800d5fe:	4939      	ldr	r1, [pc, #228]	@ (800d6e4 <printRadioSettings+0x338>)
 800d600:	4618      	mov	r0, r3
 800d602:	f009 ff7d 	bl	8017500 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800d606:	f107 0308 	add.w	r3, r7, #8
 800d60a:	4618      	mov	r0, r3
 800d60c:	f7f2 fec0 	bl	8000390 <strlen>
 800d610:	4603      	mov	r3, r0
 800d612:	b29a      	uxth	r2, r3
 800d614:	f107 0108 	add.w	r1, r7, #8
 800d618:	230a      	movs	r3, #10
 800d61a:	482b      	ldr	r0, [pc, #172]	@ (800d6c8 <printRadioSettings+0x31c>)
 800d61c:	f7fd ff52 	bl	800b4c4 <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 800d620:	2006      	movs	r0, #6
 800d622:	f7ff fa9d 	bl	800cb60 <NRF24_read_register>
 800d626:	4603      	mov	r3, r0
 800d628:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 800d62c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800d630:	f003 0308 	and.w	r3, r3, #8
 800d634:	2b00      	cmp	r3, #0
 800d636:	d006      	beq.n	800d646 <printRadioSettings+0x29a>
 800d638:	f107 0308 	add.w	r3, r7, #8
 800d63c:	492a      	ldr	r1, [pc, #168]	@ (800d6e8 <printRadioSettings+0x33c>)
 800d63e:	4618      	mov	r0, r3
 800d640:	f009 ff5e 	bl	8017500 <siprintf>
 800d644:	e005      	b.n	800d652 <printRadioSettings+0x2a6>
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 800d646:	f107 0308 	add.w	r3, r7, #8
 800d64a:	4928      	ldr	r1, [pc, #160]	@ (800d6ec <printRadioSettings+0x340>)
 800d64c:	4618      	mov	r0, r3
 800d64e:	f009 ff57 	bl	8017500 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800d652:	f107 0308 	add.w	r3, r7, #8
 800d656:	4618      	mov	r0, r3
 800d658:	f7f2 fe9a 	bl	8000390 <strlen>
 800d65c:	4603      	mov	r3, r0
 800d65e:	b29a      	uxth	r2, r3
 800d660:	f107 0108 	add.w	r1, r7, #8
 800d664:	230a      	movs	r3, #10
 800d666:	4818      	ldr	r0, [pc, #96]	@ (800d6c8 <printRadioSettings+0x31c>)
 800d668:	f7fd ff2c 	bl	800b4c4 <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 800d66c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800d670:	f003 0306 	and.w	r3, r3, #6
 800d674:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	reg8Val = (reg8Val>>1);
 800d678:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800d67c:	085b      	lsrs	r3, r3, #1
 800d67e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 800d682:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800d686:	2b00      	cmp	r3, #0
 800d688:	d106      	bne.n	800d698 <printRadioSettings+0x2ec>
 800d68a:	f107 0308 	add.w	r3, r7, #8
 800d68e:	4918      	ldr	r1, [pc, #96]	@ (800d6f0 <printRadioSettings+0x344>)
 800d690:	4618      	mov	r0, r3
 800d692:	f009 ff35 	bl	8017500 <siprintf>
 800d696:	e03b      	b.n	800d710 <printRadioSettings+0x364>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 800d698:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800d69c:	2b01      	cmp	r3, #1
 800d69e:	d106      	bne.n	800d6ae <printRadioSettings+0x302>
 800d6a0:	f107 0308 	add.w	r3, r7, #8
 800d6a4:	4913      	ldr	r1, [pc, #76]	@ (800d6f4 <printRadioSettings+0x348>)
 800d6a6:	4618      	mov	r0, r3
 800d6a8:	f009 ff2a 	bl	8017500 <siprintf>
 800d6ac:	e030      	b.n	800d710 <printRadioSettings+0x364>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 800d6ae:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800d6b2:	2b02      	cmp	r3, #2
 800d6b4:	d122      	bne.n	800d6fc <printRadioSettings+0x350>
 800d6b6:	f107 0308 	add.w	r3, r7, #8
 800d6ba:	490f      	ldr	r1, [pc, #60]	@ (800d6f8 <printRadioSettings+0x34c>)
 800d6bc:	4618      	mov	r0, r3
 800d6be:	f009 ff1f 	bl	8017500 <siprintf>
 800d6c2:	e025      	b.n	800d710 <printRadioSettings+0x364>
 800d6c4:	0801a644 	.word	0x0801a644
 800d6c8:	200311e4 	.word	0x200311e4
 800d6cc:	0801a678 	.word	0x0801a678
 800d6d0:	0801a694 	.word	0x0801a694
 800d6d4:	0801a6b0 	.word	0x0801a6b0
 800d6d8:	0801a6c4 	.word	0x0801a6c4
 800d6dc:	0801a708 	.word	0x0801a708
 800d6e0:	0801a754 	.word	0x0801a754
 800d6e4:	0801a770 	.word	0x0801a770
 800d6e8:	0801a784 	.word	0x0801a784
 800d6ec:	0801a79c 	.word	0x0801a79c
 800d6f0:	0801a7b4 	.word	0x0801a7b4
 800d6f4:	0801a7c8 	.word	0x0801a7c8
 800d6f8:	0801a7dc 	.word	0x0801a7dc
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 800d6fc:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800d700:	2b03      	cmp	r3, #3
 800d702:	d105      	bne.n	800d710 <printRadioSettings+0x364>
 800d704:	f107 0308 	add.w	r3, r7, #8
 800d708:	49d7      	ldr	r1, [pc, #860]	@ (800da68 <printRadioSettings+0x6bc>)
 800d70a:	4618      	mov	r0, r3
 800d70c:	f009 fef8 	bl	8017500 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800d710:	f107 0308 	add.w	r3, r7, #8
 800d714:	4618      	mov	r0, r3
 800d716:	f7f2 fe3b 	bl	8000390 <strlen>
 800d71a:	4603      	mov	r3, r0
 800d71c:	b29a      	uxth	r2, r3
 800d71e:	f107 0108 	add.w	r1, r7, #8
 800d722:	230a      	movs	r3, #10
 800d724:	48d1      	ldr	r0, [pc, #836]	@ (800da6c <printRadioSettings+0x6c0>)
 800d726:	f7fd fecd 	bl	800b4c4 <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 800d72a:	463b      	mov	r3, r7
 800d72c:	2205      	movs	r2, #5
 800d72e:	4619      	mov	r1, r3
 800d730:	200a      	movs	r0, #10
 800d732:	f7ff fa3d 	bl	800cbb0 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 800d736:	793b      	ldrb	r3, [r7, #4]
 800d738:	461c      	mov	r4, r3
 800d73a:	78fb      	ldrb	r3, [r7, #3]
 800d73c:	461d      	mov	r5, r3
 800d73e:	78bb      	ldrb	r3, [r7, #2]
 800d740:	787a      	ldrb	r2, [r7, #1]
 800d742:	7839      	ldrb	r1, [r7, #0]
 800d744:	f107 0008 	add.w	r0, r7, #8
 800d748:	9102      	str	r1, [sp, #8]
 800d74a:	9201      	str	r2, [sp, #4]
 800d74c:	9300      	str	r3, [sp, #0]
 800d74e:	462b      	mov	r3, r5
 800d750:	4622      	mov	r2, r4
 800d752:	49c7      	ldr	r1, [pc, #796]	@ (800da70 <printRadioSettings+0x6c4>)
 800d754:	f009 fed4 	bl	8017500 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800d758:	f107 0308 	add.w	r3, r7, #8
 800d75c:	4618      	mov	r0, r3
 800d75e:	f7f2 fe17 	bl	8000390 <strlen>
 800d762:	4603      	mov	r3, r0
 800d764:	b29a      	uxth	r2, r3
 800d766:	f107 0108 	add.w	r1, r7, #8
 800d76a:	230a      	movs	r3, #10
 800d76c:	48bf      	ldr	r0, [pc, #764]	@ (800da6c <printRadioSettings+0x6c0>)
 800d76e:	f7fd fea9 	bl	800b4c4 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 800d772:	463b      	mov	r3, r7
 800d774:	2205      	movs	r2, #5
 800d776:	4619      	mov	r1, r3
 800d778:	200b      	movs	r0, #11
 800d77a:	f7ff fa19 	bl	800cbb0 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 800d77e:	793b      	ldrb	r3, [r7, #4]
 800d780:	461c      	mov	r4, r3
 800d782:	78fb      	ldrb	r3, [r7, #3]
 800d784:	461d      	mov	r5, r3
 800d786:	78bb      	ldrb	r3, [r7, #2]
 800d788:	787a      	ldrb	r2, [r7, #1]
 800d78a:	7839      	ldrb	r1, [r7, #0]
 800d78c:	f107 0008 	add.w	r0, r7, #8
 800d790:	9102      	str	r1, [sp, #8]
 800d792:	9201      	str	r2, [sp, #4]
 800d794:	9300      	str	r3, [sp, #0]
 800d796:	462b      	mov	r3, r5
 800d798:	4622      	mov	r2, r4
 800d79a:	49b6      	ldr	r1, [pc, #728]	@ (800da74 <printRadioSettings+0x6c8>)
 800d79c:	f009 feb0 	bl	8017500 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800d7a0:	f107 0308 	add.w	r3, r7, #8
 800d7a4:	4618      	mov	r0, r3
 800d7a6:	f7f2 fdf3 	bl	8000390 <strlen>
 800d7aa:	4603      	mov	r3, r0
 800d7ac:	b29a      	uxth	r2, r3
 800d7ae:	f107 0108 	add.w	r1, r7, #8
 800d7b2:	230a      	movs	r3, #10
 800d7b4:	48ad      	ldr	r0, [pc, #692]	@ (800da6c <printRadioSettings+0x6c0>)
 800d7b6:	f7fd fe85 	bl	800b4c4 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 800d7ba:	463b      	mov	r3, r7
 800d7bc:	2201      	movs	r2, #1
 800d7be:	4619      	mov	r1, r3
 800d7c0:	200c      	movs	r0, #12
 800d7c2:	f7ff f9f5 	bl	800cbb0 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800d7c6:	783b      	ldrb	r3, [r7, #0]
 800d7c8:	461a      	mov	r2, r3
 800d7ca:	f107 0308 	add.w	r3, r7, #8
 800d7ce:	49aa      	ldr	r1, [pc, #680]	@ (800da78 <printRadioSettings+0x6cc>)
 800d7d0:	4618      	mov	r0, r3
 800d7d2:	f009 fe95 	bl	8017500 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800d7d6:	f107 0308 	add.w	r3, r7, #8
 800d7da:	4618      	mov	r0, r3
 800d7dc:	f7f2 fdd8 	bl	8000390 <strlen>
 800d7e0:	4603      	mov	r3, r0
 800d7e2:	b29a      	uxth	r2, r3
 800d7e4:	f107 0108 	add.w	r1, r7, #8
 800d7e8:	230a      	movs	r3, #10
 800d7ea:	48a0      	ldr	r0, [pc, #640]	@ (800da6c <printRadioSettings+0x6c0>)
 800d7ec:	f7fd fe6a 	bl	800b4c4 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 800d7f0:	463b      	mov	r3, r7
 800d7f2:	2201      	movs	r2, #1
 800d7f4:	4619      	mov	r1, r3
 800d7f6:	200d      	movs	r0, #13
 800d7f8:	f7ff f9da 	bl	800cbb0 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800d7fc:	783b      	ldrb	r3, [r7, #0]
 800d7fe:	461a      	mov	r2, r3
 800d800:	f107 0308 	add.w	r3, r7, #8
 800d804:	499d      	ldr	r1, [pc, #628]	@ (800da7c <printRadioSettings+0x6d0>)
 800d806:	4618      	mov	r0, r3
 800d808:	f009 fe7a 	bl	8017500 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800d80c:	f107 0308 	add.w	r3, r7, #8
 800d810:	4618      	mov	r0, r3
 800d812:	f7f2 fdbd 	bl	8000390 <strlen>
 800d816:	4603      	mov	r3, r0
 800d818:	b29a      	uxth	r2, r3
 800d81a:	f107 0108 	add.w	r1, r7, #8
 800d81e:	230a      	movs	r3, #10
 800d820:	4892      	ldr	r0, [pc, #584]	@ (800da6c <printRadioSettings+0x6c0>)
 800d822:	f7fd fe4f 	bl	800b4c4 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 800d826:	463b      	mov	r3, r7
 800d828:	2201      	movs	r2, #1
 800d82a:	4619      	mov	r1, r3
 800d82c:	200e      	movs	r0, #14
 800d82e:	f7ff f9bf 	bl	800cbb0 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800d832:	783b      	ldrb	r3, [r7, #0]
 800d834:	461a      	mov	r2, r3
 800d836:	f107 0308 	add.w	r3, r7, #8
 800d83a:	4991      	ldr	r1, [pc, #580]	@ (800da80 <printRadioSettings+0x6d4>)
 800d83c:	4618      	mov	r0, r3
 800d83e:	f009 fe5f 	bl	8017500 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800d842:	f107 0308 	add.w	r3, r7, #8
 800d846:	4618      	mov	r0, r3
 800d848:	f7f2 fda2 	bl	8000390 <strlen>
 800d84c:	4603      	mov	r3, r0
 800d84e:	b29a      	uxth	r2, r3
 800d850:	f107 0108 	add.w	r1, r7, #8
 800d854:	230a      	movs	r3, #10
 800d856:	4885      	ldr	r0, [pc, #532]	@ (800da6c <printRadioSettings+0x6c0>)
 800d858:	f7fd fe34 	bl	800b4c4 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 800d85c:	463b      	mov	r3, r7
 800d85e:	2201      	movs	r2, #1
 800d860:	4619      	mov	r1, r3
 800d862:	200f      	movs	r0, #15
 800d864:	f7ff f9a4 	bl	800cbb0 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800d868:	783b      	ldrb	r3, [r7, #0]
 800d86a:	461a      	mov	r2, r3
 800d86c:	f107 0308 	add.w	r3, r7, #8
 800d870:	4984      	ldr	r1, [pc, #528]	@ (800da84 <printRadioSettings+0x6d8>)
 800d872:	4618      	mov	r0, r3
 800d874:	f009 fe44 	bl	8017500 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800d878:	f107 0308 	add.w	r3, r7, #8
 800d87c:	4618      	mov	r0, r3
 800d87e:	f7f2 fd87 	bl	8000390 <strlen>
 800d882:	4603      	mov	r3, r0
 800d884:	b29a      	uxth	r2, r3
 800d886:	f107 0108 	add.w	r1, r7, #8
 800d88a:	230a      	movs	r3, #10
 800d88c:	4877      	ldr	r0, [pc, #476]	@ (800da6c <printRadioSettings+0x6c0>)
 800d88e:	f7fd fe19 	bl	800b4c4 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 800d892:	463b      	mov	r3, r7
 800d894:	2205      	movs	r2, #5
 800d896:	4619      	mov	r1, r3
 800d898:	2010      	movs	r0, #16
 800d89a:	f7ff f989 	bl	800cbb0 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 800d89e:	793b      	ldrb	r3, [r7, #4]
 800d8a0:	461c      	mov	r4, r3
 800d8a2:	78fb      	ldrb	r3, [r7, #3]
 800d8a4:	461d      	mov	r5, r3
 800d8a6:	78bb      	ldrb	r3, [r7, #2]
 800d8a8:	787a      	ldrb	r2, [r7, #1]
 800d8aa:	7839      	ldrb	r1, [r7, #0]
 800d8ac:	f107 0008 	add.w	r0, r7, #8
 800d8b0:	9102      	str	r1, [sp, #8]
 800d8b2:	9201      	str	r2, [sp, #4]
 800d8b4:	9300      	str	r3, [sp, #0]
 800d8b6:	462b      	mov	r3, r5
 800d8b8:	4622      	mov	r2, r4
 800d8ba:	4973      	ldr	r1, [pc, #460]	@ (800da88 <printRadioSettings+0x6dc>)
 800d8bc:	f009 fe20 	bl	8017500 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800d8c0:	f107 0308 	add.w	r3, r7, #8
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	f7f2 fd63 	bl	8000390 <strlen>
 800d8ca:	4603      	mov	r3, r0
 800d8cc:	b29a      	uxth	r2, r3
 800d8ce:	f107 0108 	add.w	r1, r7, #8
 800d8d2:	230a      	movs	r3, #10
 800d8d4:	4865      	ldr	r0, [pc, #404]	@ (800da6c <printRadioSettings+0x6c0>)
 800d8d6:	f7fd fdf5 	bl	800b4c4 <HAL_UART_Transmit>
	
	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 800d8da:	2011      	movs	r0, #17
 800d8dc:	f7ff f940 	bl	800cb60 <NRF24_read_register>
 800d8e0:	4603      	mov	r3, r0
 800d8e2:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800d8e6:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800d8ea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800d8ee:	f107 0308 	add.w	r3, r7, #8
 800d8f2:	4966      	ldr	r1, [pc, #408]	@ (800da8c <printRadioSettings+0x6e0>)
 800d8f4:	4618      	mov	r0, r3
 800d8f6:	f009 fe03 	bl	8017500 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800d8fa:	f107 0308 	add.w	r3, r7, #8
 800d8fe:	4618      	mov	r0, r3
 800d900:	f7f2 fd46 	bl	8000390 <strlen>
 800d904:	4603      	mov	r3, r0
 800d906:	b29a      	uxth	r2, r3
 800d908:	f107 0108 	add.w	r1, r7, #8
 800d90c:	230a      	movs	r3, #10
 800d90e:	4857      	ldr	r0, [pc, #348]	@ (800da6c <printRadioSettings+0x6c0>)
 800d910:	f7fd fdd8 	bl	800b4c4 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+1);
 800d914:	2012      	movs	r0, #18
 800d916:	f7ff f923 	bl	800cb60 <NRF24_read_register>
 800d91a:	4603      	mov	r3, r0
 800d91c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800d920:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800d924:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800d928:	f107 0308 	add.w	r3, r7, #8
 800d92c:	4958      	ldr	r1, [pc, #352]	@ (800da90 <printRadioSettings+0x6e4>)
 800d92e:	4618      	mov	r0, r3
 800d930:	f009 fde6 	bl	8017500 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800d934:	f107 0308 	add.w	r3, r7, #8
 800d938:	4618      	mov	r0, r3
 800d93a:	f7f2 fd29 	bl	8000390 <strlen>
 800d93e:	4603      	mov	r3, r0
 800d940:	b29a      	uxth	r2, r3
 800d942:	f107 0108 	add.w	r1, r7, #8
 800d946:	230a      	movs	r3, #10
 800d948:	4848      	ldr	r0, [pc, #288]	@ (800da6c <printRadioSettings+0x6c0>)
 800d94a:	f7fd fdbb 	bl	800b4c4 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+2);
 800d94e:	2013      	movs	r0, #19
 800d950:	f7ff f906 	bl	800cb60 <NRF24_read_register>
 800d954:	4603      	mov	r3, r0
 800d956:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800d95a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800d95e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800d962:	f107 0308 	add.w	r3, r7, #8
 800d966:	494b      	ldr	r1, [pc, #300]	@ (800da94 <printRadioSettings+0x6e8>)
 800d968:	4618      	mov	r0, r3
 800d96a:	f009 fdc9 	bl	8017500 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800d96e:	f107 0308 	add.w	r3, r7, #8
 800d972:	4618      	mov	r0, r3
 800d974:	f7f2 fd0c 	bl	8000390 <strlen>
 800d978:	4603      	mov	r3, r0
 800d97a:	b29a      	uxth	r2, r3
 800d97c:	f107 0108 	add.w	r1, r7, #8
 800d980:	230a      	movs	r3, #10
 800d982:	483a      	ldr	r0, [pc, #232]	@ (800da6c <printRadioSettings+0x6c0>)
 800d984:	f7fd fd9e 	bl	800b4c4 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+3);
 800d988:	2014      	movs	r0, #20
 800d98a:	f7ff f8e9 	bl	800cb60 <NRF24_read_register>
 800d98e:	4603      	mov	r3, r0
 800d990:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800d994:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800d998:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800d99c:	f107 0308 	add.w	r3, r7, #8
 800d9a0:	493d      	ldr	r1, [pc, #244]	@ (800da98 <printRadioSettings+0x6ec>)
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	f009 fdac 	bl	8017500 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800d9a8:	f107 0308 	add.w	r3, r7, #8
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	f7f2 fcef 	bl	8000390 <strlen>
 800d9b2:	4603      	mov	r3, r0
 800d9b4:	b29a      	uxth	r2, r3
 800d9b6:	f107 0108 	add.w	r1, r7, #8
 800d9ba:	230a      	movs	r3, #10
 800d9bc:	482b      	ldr	r0, [pc, #172]	@ (800da6c <printRadioSettings+0x6c0>)
 800d9be:	f7fd fd81 	bl	800b4c4 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+4);
 800d9c2:	2015      	movs	r0, #21
 800d9c4:	f7ff f8cc 	bl	800cb60 <NRF24_read_register>
 800d9c8:	4603      	mov	r3, r0
 800d9ca:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800d9ce:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800d9d2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800d9d6:	f107 0308 	add.w	r3, r7, #8
 800d9da:	4930      	ldr	r1, [pc, #192]	@ (800da9c <printRadioSettings+0x6f0>)
 800d9dc:	4618      	mov	r0, r3
 800d9de:	f009 fd8f 	bl	8017500 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800d9e2:	f107 0308 	add.w	r3, r7, #8
 800d9e6:	4618      	mov	r0, r3
 800d9e8:	f7f2 fcd2 	bl	8000390 <strlen>
 800d9ec:	4603      	mov	r3, r0
 800d9ee:	b29a      	uxth	r2, r3
 800d9f0:	f107 0108 	add.w	r1, r7, #8
 800d9f4:	230a      	movs	r3, #10
 800d9f6:	481d      	ldr	r0, [pc, #116]	@ (800da6c <printRadioSettings+0x6c0>)
 800d9f8:	f7fd fd64 	bl	800b4c4 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+5);
 800d9fc:	2016      	movs	r0, #22
 800d9fe:	f7ff f8af 	bl	800cb60 <NRF24_read_register>
 800da02:	4603      	mov	r3, r0
 800da04:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800da08:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800da0c:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800da10:	f107 0308 	add.w	r3, r7, #8
 800da14:	4922      	ldr	r1, [pc, #136]	@ (800daa0 <printRadioSettings+0x6f4>)
 800da16:	4618      	mov	r0, r3
 800da18:	f009 fd72 	bl	8017500 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800da1c:	f107 0308 	add.w	r3, r7, #8
 800da20:	4618      	mov	r0, r3
 800da22:	f7f2 fcb5 	bl	8000390 <strlen>
 800da26:	4603      	mov	r3, r0
 800da28:	b29a      	uxth	r2, r3
 800da2a:	f107 0108 	add.w	r1, r7, #8
 800da2e:	230a      	movs	r3, #10
 800da30:	480e      	ldr	r0, [pc, #56]	@ (800da6c <printRadioSettings+0x6c0>)
 800da32:	f7fd fd47 	bl	800b4c4 <HAL_UART_Transmit>
	
	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 800da36:	201c      	movs	r0, #28
 800da38:	f7ff f892 	bl	800cb60 <NRF24_read_register>
 800da3c:	4603      	mov	r3, r0
 800da3e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800da42:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800da46:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	bfcc      	ite	gt
 800da4e:	2301      	movgt	r3, #1
 800da50:	2300      	movle	r3, #0
 800da52:	b2db      	uxtb	r3, r3
 800da54:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800da56:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800da5a:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800da5e:	2b00      	cmp	r3, #0
 800da60:	bfcc      	ite	gt
 800da62:	2301      	movgt	r3, #1
 800da64:	2300      	movle	r3, #0
 800da66:	e01d      	b.n	800daa4 <printRadioSettings+0x6f8>
 800da68:	0801a7f0 	.word	0x0801a7f0
 800da6c:	200311e4 	.word	0x200311e4
 800da70:	0801a804 	.word	0x0801a804
 800da74:	0801a834 	.word	0x0801a834
 800da78:	0801a864 	.word	0x0801a864
 800da7c:	0801a88c 	.word	0x0801a88c
 800da80:	0801a8b4 	.word	0x0801a8b4
 800da84:	0801a8dc 	.word	0x0801a8dc
 800da88:	0801a904 	.word	0x0801a904
 800da8c:	0801a930 	.word	0x0801a930
 800da90:	0801a94c 	.word	0x0801a94c
 800da94:	0801a968 	.word	0x0801a968
 800da98:	0801a984 	.word	0x0801a984
 800da9c:	0801a9a0 	.word	0x0801a9a0
 800daa0:	0801a9bc 	.word	0x0801a9bc
 800daa4:	b2db      	uxtb	r3, r3
 800daa6:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800daa8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800daac:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	bfcc      	ite	gt
 800dab4:	2301      	movgt	r3, #1
 800dab6:	2300      	movle	r3, #0
 800dab8:	b2db      	uxtb	r3, r3
 800daba:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800dabc:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800dac0:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	bfcc      	ite	gt
 800dac8:	2301      	movgt	r3, #1
 800daca:	2300      	movle	r3, #0
 800dacc:	b2db      	uxtb	r3, r3
 800dace:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800dad0:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800dad4:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800dad8:	2b00      	cmp	r3, #0
 800dada:	bfcc      	ite	gt
 800dadc:	2301      	movgt	r3, #1
 800dade:	2300      	movle	r3, #0
 800dae0:	b2db      	uxtb	r3, r3
 800dae2:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800dae4:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800dae8:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800daec:	2b00      	cmp	r3, #0
 800daee:	bfcc      	ite	gt
 800daf0:	2301      	movgt	r3, #1
 800daf2:	2300      	movle	r3, #0
 800daf4:	b2db      	uxtb	r3, r3
 800daf6:	f107 0008 	add.w	r0, r7, #8
 800dafa:	9303      	str	r3, [sp, #12]
 800dafc:	9402      	str	r4, [sp, #8]
 800dafe:	9101      	str	r1, [sp, #4]
 800db00:	9200      	str	r2, [sp, #0]
 800db02:	4633      	mov	r3, r6
 800db04:	462a      	mov	r2, r5
 800db06:	4936      	ldr	r1, [pc, #216]	@ (800dbe0 <printRadioSettings+0x834>)
 800db08:	f009 fcfa 	bl	8017500 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800db0c:	f107 0308 	add.w	r3, r7, #8
 800db10:	4618      	mov	r0, r3
 800db12:	f7f2 fc3d 	bl	8000390 <strlen>
 800db16:	4603      	mov	r3, r0
 800db18:	b29a      	uxth	r2, r3
 800db1a:	f107 0108 	add.w	r1, r7, #8
 800db1e:	230a      	movs	r3, #10
 800db20:	4830      	ldr	r0, [pc, #192]	@ (800dbe4 <printRadioSettings+0x838>)
 800db22:	f7fd fccf 	bl	800b4c4 <HAL_UART_Transmit>
	
	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 800db26:	201d      	movs	r0, #29
 800db28:	f7ff f81a 	bl	800cb60 <NRF24_read_register>
 800db2c:	4603      	mov	r3, r0
 800db2e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 800db32:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800db36:	f003 0304 	and.w	r3, r3, #4
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d006      	beq.n	800db4c <printRadioSettings+0x7a0>
 800db3e:	f107 0308 	add.w	r3, r7, #8
 800db42:	4929      	ldr	r1, [pc, #164]	@ (800dbe8 <printRadioSettings+0x83c>)
 800db44:	4618      	mov	r0, r3
 800db46:	f009 fcdb 	bl	8017500 <siprintf>
 800db4a:	e005      	b.n	800db58 <printRadioSettings+0x7ac>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 800db4c:	f107 0308 	add.w	r3, r7, #8
 800db50:	4926      	ldr	r1, [pc, #152]	@ (800dbec <printRadioSettings+0x840>)
 800db52:	4618      	mov	r0, r3
 800db54:	f009 fcd4 	bl	8017500 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800db58:	f107 0308 	add.w	r3, r7, #8
 800db5c:	4618      	mov	r0, r3
 800db5e:	f7f2 fc17 	bl	8000390 <strlen>
 800db62:	4603      	mov	r3, r0
 800db64:	b29a      	uxth	r2, r3
 800db66:	f107 0108 	add.w	r1, r7, #8
 800db6a:	230a      	movs	r3, #10
 800db6c:	481d      	ldr	r0, [pc, #116]	@ (800dbe4 <printRadioSettings+0x838>)
 800db6e:	f7fd fca9 	bl	800b4c4 <HAL_UART_Transmit>
	
	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 800db72:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800db76:	f003 0302 	and.w	r3, r3, #2
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d006      	beq.n	800db8c <printRadioSettings+0x7e0>
 800db7e:	f107 0308 	add.w	r3, r7, #8
 800db82:	491b      	ldr	r1, [pc, #108]	@ (800dbf0 <printRadioSettings+0x844>)
 800db84:	4618      	mov	r0, r3
 800db86:	f009 fcbb 	bl	8017500 <siprintf>
 800db8a:	e005      	b.n	800db98 <printRadioSettings+0x7ec>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 800db8c:	f107 0308 	add.w	r3, r7, #8
 800db90:	4918      	ldr	r1, [pc, #96]	@ (800dbf4 <printRadioSettings+0x848>)
 800db92:	4618      	mov	r0, r3
 800db94:	f009 fcb4 	bl	8017500 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800db98:	f107 0308 	add.w	r3, r7, #8
 800db9c:	4618      	mov	r0, r3
 800db9e:	f7f2 fbf7 	bl	8000390 <strlen>
 800dba2:	4603      	mov	r3, r0
 800dba4:	b29a      	uxth	r2, r3
 800dba6:	f107 0108 	add.w	r1, r7, #8
 800dbaa:	230a      	movs	r3, #10
 800dbac:	480d      	ldr	r0, [pc, #52]	@ (800dbe4 <printRadioSettings+0x838>)
 800dbae:	f7fd fc89 	bl	800b4c4 <HAL_UART_Transmit>
	
	
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 800dbb2:	f107 0308 	add.w	r3, r7, #8
 800dbb6:	4910      	ldr	r1, [pc, #64]	@ (800dbf8 <printRadioSettings+0x84c>)
 800dbb8:	4618      	mov	r0, r3
 800dbba:	f009 fca1 	bl	8017500 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800dbbe:	f107 0308 	add.w	r3, r7, #8
 800dbc2:	4618      	mov	r0, r3
 800dbc4:	f7f2 fbe4 	bl	8000390 <strlen>
 800dbc8:	4603      	mov	r3, r0
 800dbca:	b29a      	uxth	r2, r3
 800dbcc:	f107 0108 	add.w	r1, r7, #8
 800dbd0:	230a      	movs	r3, #10
 800dbd2:	4804      	ldr	r0, [pc, #16]	@ (800dbe4 <printRadioSettings+0x838>)
 800dbd4:	f7fd fc76 	bl	800b4c4 <HAL_UART_Transmit>
}
 800dbd8:	bf00      	nop
 800dbda:	3774      	adds	r7, #116	@ 0x74
 800dbdc:	46bd      	mov	sp, r7
 800dbde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dbe0:	0801a9d8 	.word	0x0801a9d8
 800dbe4:	200311e4 	.word	0x200311e4
 800dbe8:	0801aa24 	.word	0x0801aa24
 800dbec:	0801aa3c 	.word	0x0801aa3c
 800dbf0:	0801aa54 	.word	0x0801aa54
 800dbf4:	0801aa70 	.word	0x0801aa70
 800dbf8:	0801a644 	.word	0x0801a644

0800dbfc <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 800dbfc:	b084      	sub	sp, #16
 800dbfe:	b580      	push	{r7, lr}
 800dc00:	af00      	add	r7, sp, #0
 800dc02:	f107 0c08 	add.w	ip, r7, #8
 800dc06:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 800dc0a:	4b07      	ldr	r3, [pc, #28]	@ (800dc28 <nrf24_DebugUART_Init+0x2c>)
 800dc0c:	4618      	mov	r0, r3
 800dc0e:	f107 0308 	add.w	r3, r7, #8
 800dc12:	2288      	movs	r2, #136	@ 0x88
 800dc14:	4619      	mov	r1, r3
 800dc16:	f009 fdfa 	bl	801780e <memcpy>
}
 800dc1a:	bf00      	nop
 800dc1c:	46bd      	mov	sp, r7
 800dc1e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800dc22:	b004      	add	sp, #16
 800dc24:	4770      	bx	lr
 800dc26:	bf00      	nop
 800dc28:	200311e4 	.word	0x200311e4

0800dc2c <AUDIO_REC_Start>:
  * @brief  Starts Audio streaming.    
  * @param  None
  * @retval Audio error
  */ 
AUDIO_ErrorTypeDef AUDIO_REC_Start(void)
{
 800dc2c:	b580      	push	{r7, lr}
 800dc2e:	b090      	sub	sp, #64	@ 0x40
 800dc30:	af00      	add	r7, sp, #0
  uint32_t byteswritten = 0;
 800dc32:	2300      	movs	r3, #0
 800dc34:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint8_t str[FILEMGR_FILE_NAME_SIZE + 20];

  uwVolume = 100;
 800dc36:	4b33      	ldr	r3, [pc, #204]	@ (800dd04 <AUDIO_REC_Start+0xd8>)
 800dc38:	2264      	movs	r2, #100	@ 0x64
 800dc3a:	601a      	str	r2, [r3, #0]

  /* Create a new file system */
  if (f_mount(&SDFatFS, (TCHAR const*) SDPath, 0) != FR_OK) {
 800dc3c:	2200      	movs	r2, #0
 800dc3e:	4932      	ldr	r1, [pc, #200]	@ (800dd08 <AUDIO_REC_Start+0xdc>)
 800dc40:	4832      	ldr	r0, [pc, #200]	@ (800dd0c <AUDIO_REC_Start+0xe0>)
 800dc42:	f002 faed 	bl	8010220 <f_mount>
 800dc46:	4603      	mov	r3, r0
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d002      	beq.n	800dc52 <AUDIO_REC_Start+0x26>
    	Error_Handler(); /* FatFs Initialization Error */
 800dc4c:	f7f4 fcba 	bl	80025c4 <Error_Handler>
 800dc50:	e052      	b.n	800dcf8 <AUDIO_REC_Start+0xcc>
  } else {
	  printf("SD card mounted\r\n");
 800dc52:	482f      	ldr	r0, [pc, #188]	@ (800dd10 <AUDIO_REC_Start+0xe4>)
 800dc54:	f009 fc4c 	bl	80174f0 <puts>
		  	  sizeof(workBuffer)) != FR_OK) {
		  Error_Handler(); / * FatFs Format Error */
//	  } else {
//	  */

	  printf("WAV file created\r\n");
 800dc58:	482e      	ldr	r0, [pc, #184]	@ (800dd14 <AUDIO_REC_Start+0xe8>)
 800dc5a:	f009 fc49 	bl	80174f0 <puts>
	  if(f_open(&WavFile, REC_WAVE_NAME, FA_CREATE_ALWAYS | FA_WRITE) == FR_OK)
 800dc5e:	220a      	movs	r2, #10
 800dc60:	492d      	ldr	r1, [pc, #180]	@ (800dd18 <AUDIO_REC_Start+0xec>)
 800dc62:	482e      	ldr	r0, [pc, #184]	@ (800dd1c <AUDIO_REC_Start+0xf0>)
 800dc64:	f002 fb22 	bl	80102ac <f_open>
 800dc68:	4603      	mov	r3, r0
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d144      	bne.n	800dcf8 <AUDIO_REC_Start+0xcc>
	  {
		/* Initialize header file */
		WavProcess_EncInit(DEFAULT_AUDIO_IN_FREQ, pHeaderBuff);
 800dc6e:	492c      	ldr	r1, [pc, #176]	@ (800dd20 <AUDIO_REC_Start+0xf4>)
 800dc70:	f44f 507a 	mov.w	r0, #16000	@ 0x3e80
 800dc74:	f000 f9c6 	bl	800e004 <WavProcess_EncInit>

		/* Write header file */
		if(f_write(&WavFile, pHeaderBuff, 44, (void*)&byteswritten) == FR_OK)
 800dc78:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800dc7c:	222c      	movs	r2, #44	@ 0x2c
 800dc7e:	4928      	ldr	r1, [pc, #160]	@ (800dd20 <AUDIO_REC_Start+0xf4>)
 800dc80:	4826      	ldr	r0, [pc, #152]	@ (800dd1c <AUDIO_REC_Start+0xf0>)
 800dc82:	f002 fe0c 	bl	801089e <f_write>
 800dc86:	4603      	mov	r3, r0
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d135      	bne.n	800dcf8 <AUDIO_REC_Start+0xcc>
		{
		  printf("State : ready to record\r\n");
 800dc8c:	4825      	ldr	r0, [pc, #148]	@ (800dd24 <AUDIO_REC_Start+0xf8>)
 800dc8e:	f009 fc2f 	bl	80174f0 <puts>
		  AudioState = AUDIO_STATE_RECORD;
 800dc92:	4b25      	ldr	r3, [pc, #148]	@ (800dd28 <AUDIO_REC_Start+0xfc>)
 800dc94:	2205      	movs	r2, #5
 800dc96:	701a      	strb	r2, [r3, #0]

			if(byteswritten != 0)
 800dc98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d02c      	beq.n	800dcf8 <AUDIO_REC_Start+0xcc>
			{
			  BSP_AUDIO_IN_Init(DEFAULT_AUDIO_IN_FREQ, DEFAULT_AUDIO_IN_BIT_RESOLUTION, DEFAULT_AUDIO_IN_CHANNEL_NBR); // 1 mono
 800dc9e:	2202      	movs	r2, #2
 800dca0:	2110      	movs	r1, #16
 800dca2:	f44f 507a 	mov.w	r0, #16000	@ 0x3e80
 800dca6:	f7f6 ffef 	bl	8004c88 <BSP_AUDIO_IN_Init>
			  printf("Recording config initialized\r\n");
 800dcaa:	4820      	ldr	r0, [pc, #128]	@ (800dd2c <AUDIO_REC_Start+0x100>)
 800dcac:	f009 fc20 	bl	80174f0 <puts>
			  BSP_AUDIO_IN_Record((uint16_t*)&BufferCtl.pcm_buff[0], AUDIO_IN_PCM_BUFFER_SIZE);
 800dcb0:	f44f 5110 	mov.w	r1, #9216	@ 0x2400
 800dcb4:	481e      	ldr	r0, [pc, #120]	@ (800dd30 <AUDIO_REC_Start+0x104>)
 800dcb6:	f7f7 f865 	bl	8004d84 <BSP_AUDIO_IN_Record>
			  printf("Recording started...\r\n");
 800dcba:	481e      	ldr	r0, [pc, #120]	@ (800dd34 <AUDIO_REC_Start+0x108>)
 800dcbc:	f009 fc18 	bl	80174f0 <puts>
			  BufferCtl.fptr = byteswritten;
 800dcc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dcc2:	4a1b      	ldr	r2, [pc, #108]	@ (800dd30 <AUDIO_REC_Start+0x104>)
 800dcc4:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 800dcc8:	f8c2 380c 	str.w	r3, [r2, #2060]	@ 0x80c
			  BufferCtl.pcm_ptr = 0;
 800dccc:	4b18      	ldr	r3, [pc, #96]	@ (800dd30 <AUDIO_REC_Start+0x104>)
 800dcce:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800dcd2:	461a      	mov	r2, r3
 800dcd4:	2300      	movs	r3, #0
 800dcd6:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800
			  BufferCtl.offset = 0;
 800dcda:	4b15      	ldr	r3, [pc, #84]	@ (800dd30 <AUDIO_REC_Start+0x104>)
 800dcdc:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800dce0:	461a      	mov	r2, r3
 800dce2:	2300      	movs	r3, #0
 800dce4:	f8c2 3808 	str.w	r3, [r2, #2056]	@ 0x808
			  BufferCtl.wr_state = BUFFER_EMPTY;
 800dce8:	4b11      	ldr	r3, [pc, #68]	@ (800dd30 <AUDIO_REC_Start+0x104>)
 800dcea:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800dcee:	2200      	movs	r2, #0
 800dcf0:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
			  return AUDIO_ERROR_NONE;
 800dcf4:	2300      	movs	r3, #0
 800dcf6:	e000      	b.n	800dcfa <AUDIO_REC_Start+0xce>
			}
		}
	  }
	  //}
  }
  return AUDIO_ERROR_IO;
 800dcf8:	2301      	movs	r3, #1
}
 800dcfa:	4618      	mov	r0, r3
 800dcfc:	3740      	adds	r7, #64	@ 0x40
 800dcfe:	46bd      	mov	sp, r7
 800dd00:	bd80      	pop	{r7, pc}
 800dd02:	bf00      	nop
 800dd04:	20000100 	.word	0x20000100
 800dd08:	20035d08 	.word	0x20035d08
 800dd0c:	20035d0c 	.word	0x20035d0c
 800dd10:	0801ab88 	.word	0x0801ab88
 800dd14:	0801ab9c 	.word	0x0801ab9c
 800dd18:	0801abb0 	.word	0x0801abb0
 800dd1c:	20035ad4 	.word	0x20035ad4
 800dd20:	2003126c 	.word	0x2003126c
 800dd24:	0801abbc 	.word	0x0801abbc
 800dd28:	20000b00 	.word	0x20000b00
 800dd2c:	0801abd8 	.word	0x0801abd8
 800dd30:	20031298 	.word	0x20031298
 800dd34:	0801abf8 	.word	0x0801abf8

0800dd38 <AUDIO_REC_Process>:
  * @brief  Manages Audio process. 
  * @param  None
  * @retval Audio error
  */
AUDIO_ErrorTypeDef AUDIO_REC_Process(void)
{
 800dd38:	b580      	push	{r7, lr}
 800dd3a:	b088      	sub	sp, #32
 800dd3c:	af00      	add	r7, sp, #0
  uint32_t byteswritten = 0;
 800dd3e:	2300      	movs	r3, #0
 800dd40:	617b      	str	r3, [r7, #20]
  AUDIO_ErrorTypeDef audio_error = AUDIO_ERROR_NONE;
 800dd42:	2300      	movs	r3, #0
 800dd44:	77fb      	strb	r3, [r7, #31]
  uint32_t elapsed_time; 
  static uint32_t prev_elapsed_time = 0xFFFFFFFF;
  uint8_t str[16];
  //static TS_StateTypeDef  TS_State={0};
  //printf("PRE SWITCH\r\n");
  switch(AudioState)
 800dd46:	4b59      	ldr	r3, [pc, #356]	@ (800deac <AUDIO_REC_Process+0x174>)
 800dd48:	781b      	ldrb	r3, [r3, #0]
 800dd4a:	2b05      	cmp	r3, #5
 800dd4c:	d002      	beq.n	800dd54 <AUDIO_REC_Process+0x1c>
 800dd4e:	2b0a      	cmp	r3, #10
 800dd50:	d079      	beq.n	800de46 <AUDIO_REC_Process+0x10e>

  	case AUDIO_STATE_IDLE:
  	case AUDIO_STATE_INIT:
  	default:
      /* Do Nothing */
      break;
 800dd52:	e0a7      	b.n	800dea4 <AUDIO_REC_Process+0x16c>
      if(BufferCtl.fptr >= REC_SAMPLE_LENGTH)
 800dd54:	4b56      	ldr	r3, [pc, #344]	@ (800deb0 <AUDIO_REC_Process+0x178>)
 800dd56:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800dd5a:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800dd5e:	f5b3 4f7a 	cmp.w	r3, #64000	@ 0xfa00
 800dd62:	d303      	bcc.n	800dd6c <AUDIO_REC_Process+0x34>
        AudioState = AUDIO_STATE_STOP;
 800dd64:	4b51      	ldr	r3, [pc, #324]	@ (800deac <AUDIO_REC_Process+0x174>)
 800dd66:	220a      	movs	r2, #10
 800dd68:	701a      	strb	r2, [r3, #0]
        break;
 800dd6a:	e09b      	b.n	800dea4 <AUDIO_REC_Process+0x16c>
      if(BufferCtl.wr_state == BUFFER_FULL)
 800dd6c:	4b50      	ldr	r3, [pc, #320]	@ (800deb0 <AUDIO_REC_Process+0x178>)
 800dd6e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800dd72:	f893 3804 	ldrb.w	r3, [r3, #2052]	@ 0x804
 800dd76:	2b01      	cmp	r3, #1
 800dd78:	d128      	bne.n	800ddcc <AUDIO_REC_Process+0x94>
        if(f_write(&WavFile, (uint8_t*)(BufferCtl.pcm_buff + BufferCtl.offset),
 800dd7a:	4b4d      	ldr	r3, [pc, #308]	@ (800deb0 <AUDIO_REC_Process+0x178>)
 800dd7c:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800dd80:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 800dd84:	005b      	lsls	r3, r3, #1
 800dd86:	4a4a      	ldr	r2, [pc, #296]	@ (800deb0 <AUDIO_REC_Process+0x178>)
 800dd88:	1899      	adds	r1, r3, r2
 800dd8a:	f107 0314 	add.w	r3, r7, #20
 800dd8e:	f44f 5210 	mov.w	r2, #9216	@ 0x2400
 800dd92:	4848      	ldr	r0, [pc, #288]	@ (800deb4 <AUDIO_REC_Process+0x17c>)
 800dd94:	f002 fd83 	bl	801089e <f_write>
 800dd98:	4603      	mov	r3, r0
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d004      	beq.n	800dda8 <AUDIO_REC_Process+0x70>
          printf("recording failed\r\n");
 800dd9e:	4846      	ldr	r0, [pc, #280]	@ (800deb8 <AUDIO_REC_Process+0x180>)
 800dda0:	f009 fba6 	bl	80174f0 <puts>
          return AUDIO_ERROR_IO;
 800dda4:	2301      	movs	r3, #1
 800dda6:	e07d      	b.n	800dea4 <AUDIO_REC_Process+0x16c>
        BufferCtl.fptr += byteswritten;
 800dda8:	4b41      	ldr	r3, [pc, #260]	@ (800deb0 <AUDIO_REC_Process+0x178>)
 800ddaa:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800ddae:	f8d3 280c 	ldr.w	r2, [r3, #2060]	@ 0x80c
 800ddb2:	697b      	ldr	r3, [r7, #20]
 800ddb4:	4413      	add	r3, r2
 800ddb6:	4a3e      	ldr	r2, [pc, #248]	@ (800deb0 <AUDIO_REC_Process+0x178>)
 800ddb8:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 800ddbc:	f8c2 380c 	str.w	r3, [r2, #2060]	@ 0x80c
        BufferCtl.wr_state =  BUFFER_EMPTY;
 800ddc0:	4b3b      	ldr	r3, [pc, #236]	@ (800deb0 <AUDIO_REC_Process+0x178>)
 800ddc2:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800ddc6:	2200      	movs	r2, #0
 800ddc8:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
      elapsed_time = BufferCtl.fptr / (DEFAULT_AUDIO_IN_FREQ * DEFAULT_AUDIO_IN_CHANNEL_NBR * 2);
 800ddcc:	4b38      	ldr	r3, [pc, #224]	@ (800deb0 <AUDIO_REC_Process+0x178>)
 800ddce:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800ddd2:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800ddd6:	4a39      	ldr	r2, [pc, #228]	@ (800debc <AUDIO_REC_Process+0x184>)
 800ddd8:	fba2 2303 	umull	r2, r3, r2, r3
 800dddc:	0b1b      	lsrs	r3, r3, #12
 800ddde:	61bb      	str	r3, [r7, #24]
      if(prev_elapsed_time != elapsed_time)
 800dde0:	4b37      	ldr	r3, [pc, #220]	@ (800dec0 <AUDIO_REC_Process+0x188>)
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	69ba      	ldr	r2, [r7, #24]
 800dde6:	429a      	cmp	r2, r3
 800dde8:	d05b      	beq.n	800dea2 <AUDIO_REC_Process+0x16a>
        prev_elapsed_time = elapsed_time;
 800ddea:	4a35      	ldr	r2, [pc, #212]	@ (800dec0 <AUDIO_REC_Process+0x188>)
 800ddec:	69bb      	ldr	r3, [r7, #24]
 800ddee:	6013      	str	r3, [r2, #0]
        printf("Elapsed time : \r\n");
 800ddf0:	4834      	ldr	r0, [pc, #208]	@ (800dec4 <AUDIO_REC_Process+0x18c>)
 800ddf2:	f009 fb7d 	bl	80174f0 <puts>
        printf("[%02d:%02d]\r\n", (int)(elapsed_time /60), (int)(elapsed_time%60));
 800ddf6:	69bb      	ldr	r3, [r7, #24]
 800ddf8:	4a33      	ldr	r2, [pc, #204]	@ (800dec8 <AUDIO_REC_Process+0x190>)
 800ddfa:	fba2 2303 	umull	r2, r3, r2, r3
 800ddfe:	095b      	lsrs	r3, r3, #5
 800de00:	4618      	mov	r0, r3
 800de02:	69b9      	ldr	r1, [r7, #24]
 800de04:	4b30      	ldr	r3, [pc, #192]	@ (800dec8 <AUDIO_REC_Process+0x190>)
 800de06:	fba3 2301 	umull	r2, r3, r3, r1
 800de0a:	095a      	lsrs	r2, r3, #5
 800de0c:	4613      	mov	r3, r2
 800de0e:	011b      	lsls	r3, r3, #4
 800de10:	1a9b      	subs	r3, r3, r2
 800de12:	009b      	lsls	r3, r3, #2
 800de14:	1aca      	subs	r2, r1, r3
 800de16:	4613      	mov	r3, r2
 800de18:	461a      	mov	r2, r3
 800de1a:	4601      	mov	r1, r0
 800de1c:	482b      	ldr	r0, [pc, #172]	@ (800decc <AUDIO_REC_Process+0x194>)
 800de1e:	f009 faff 	bl	8017420 <iprintf>
        printf("File size : \r\n");
 800de22:	482b      	ldr	r0, [pc, #172]	@ (800ded0 <AUDIO_REC_Process+0x198>)
 800de24:	f009 fb64 	bl	80174f0 <puts>
        printf("%4d KB\r\n", (int)((int32_t)BufferCtl.fptr/1024));
 800de28:	4b21      	ldr	r3, [pc, #132]	@ (800deb0 <AUDIO_REC_Process+0x178>)
 800de2a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800de2e:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800de32:	2b00      	cmp	r3, #0
 800de34:	da01      	bge.n	800de3a <AUDIO_REC_Process+0x102>
 800de36:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 800de3a:	129b      	asrs	r3, r3, #10
 800de3c:	4619      	mov	r1, r3
 800de3e:	4825      	ldr	r0, [pc, #148]	@ (800ded4 <AUDIO_REC_Process+0x19c>)
 800de40:	f009 faee 	bl	8017420 <iprintf>
      break;
 800de44:	e02d      	b.n	800dea2 <AUDIO_REC_Process+0x16a>
      BSP_AUDIO_IN_Stop(CODEC_PDWN_SW);
 800de46:	2002      	movs	r0, #2
 800de48:	f7f6 ffb4 	bl	8004db4 <BSP_AUDIO_IN_Stop>
      HAL_Delay(300);
 800de4c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800de50:	f7f7 fb80 	bl	8005554 <HAL_Delay>
      if(f_lseek(&WavFile, 0) == FR_OK)
 800de54:	2100      	movs	r1, #0
 800de56:	4817      	ldr	r0, [pc, #92]	@ (800deb4 <AUDIO_REC_Process+0x17c>)
 800de58:	f002 ff3e 	bl	8010cd8 <f_lseek>
 800de5c:	4603      	mov	r3, r0
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d113      	bne.n	800de8a <AUDIO_REC_Process+0x152>
        WavProcess_HeaderUpdate(pHeaderBuff, &WaveFormat);
 800de62:	491d      	ldr	r1, [pc, #116]	@ (800ded8 <AUDIO_REC_Process+0x1a0>)
 800de64:	481d      	ldr	r0, [pc, #116]	@ (800dedc <AUDIO_REC_Process+0x1a4>)
 800de66:	f000 f9e5 	bl	800e234 <WavProcess_HeaderUpdate>
        if(f_write(&WavFile, pHeaderBuff, sizeof(WAVE_FormatTypeDef), (void*)&byteswritten) == FR_OK)
 800de6a:	f107 0314 	add.w	r3, r7, #20
 800de6e:	222c      	movs	r2, #44	@ 0x2c
 800de70:	491a      	ldr	r1, [pc, #104]	@ (800dedc <AUDIO_REC_Process+0x1a4>)
 800de72:	4810      	ldr	r0, [pc, #64]	@ (800deb4 <AUDIO_REC_Process+0x17c>)
 800de74:	f002 fd13 	bl	801089e <f_write>
 800de78:	4603      	mov	r3, r0
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d102      	bne.n	800de84 <AUDIO_REC_Process+0x14c>
          audio_error = AUDIO_ERROR_EOF;
 800de7e:	2302      	movs	r3, #2
 800de80:	77fb      	strb	r3, [r7, #31]
 800de82:	e004      	b.n	800de8e <AUDIO_REC_Process+0x156>
          audio_error = AUDIO_ERROR_IO;
 800de84:	2301      	movs	r3, #1
 800de86:	77fb      	strb	r3, [r7, #31]
 800de88:	e001      	b.n	800de8e <AUDIO_REC_Process+0x156>
        audio_error = AUDIO_ERROR_IO;
 800de8a:	2301      	movs	r3, #1
 800de8c:	77fb      	strb	r3, [r7, #31]
      AudioState = AUDIO_STATE_IDLE;
 800de8e:	4b07      	ldr	r3, [pc, #28]	@ (800deac <AUDIO_REC_Process+0x174>)
 800de90:	2200      	movs	r2, #0
 800de92:	701a      	strb	r2, [r3, #0]
      f_close(&WavFile);
 800de94:	4807      	ldr	r0, [pc, #28]	@ (800deb4 <AUDIO_REC_Process+0x17c>)
 800de96:	f002 fef5 	bl	8010c84 <f_close>
      printf("wave file closed success\r\n");
 800de9a:	4811      	ldr	r0, [pc, #68]	@ (800dee0 <AUDIO_REC_Process+0x1a8>)
 800de9c:	f009 fb28 	bl	80174f0 <puts>
      break;
 800dea0:	e000      	b.n	800dea4 <AUDIO_REC_Process+0x16c>
      break;
 800dea2:	bf00      	nop
      return audio_error;
    }
}
 800dea4:	4618      	mov	r0, r3
 800dea6:	3720      	adds	r7, #32
 800dea8:	46bd      	mov	sp, r7
 800deaa:	bd80      	pop	{r7, pc}
 800deac:	20000b00 	.word	0x20000b00
 800deb0:	20031298 	.word	0x20031298
 800deb4:	20035ad4 	.word	0x20035ad4
 800deb8:	0801ac10 	.word	0x0801ac10
 800debc:	10624dd3 	.word	0x10624dd3
 800dec0:	20000104 	.word	0x20000104
 800dec4:	0801ac24 	.word	0x0801ac24
 800dec8:	88888889 	.word	0x88888889
 800decc:	0801ac38 	.word	0x0801ac38
 800ded0:	0801ac48 	.word	0x0801ac48
 800ded4:	0801ac58 	.word	0x0801ac58
 800ded8:	20035aa8 	.word	0x20035aa8
 800dedc:	2003126c 	.word	0x2003126c
 800dee0:	0801ac64 	.word	0x0801ac64

0800dee4 <BSP_AUDIO_IN_TransferComplete_CallBack>:
  * @brief  Calculates the remaining file size and new position of the pointer.
  * @param  None
  * @retval None
  */
void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
 800dee4:	b480      	push	{r7}
 800dee6:	af00      	add	r7, sp, #0
  BufferCtl.pcm_ptr+= AUDIO_IN_PCM_BUFFER_SIZE/2;
 800dee8:	4b21      	ldr	r3, [pc, #132]	@ (800df70 <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800deea:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800deee:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800def2:	f503 5390 	add.w	r3, r3, #4608	@ 0x1200
 800def6:	4a1e      	ldr	r2, [pc, #120]	@ (800df70 <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800def8:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 800defc:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800
  if(BufferCtl.pcm_ptr == AUDIO_IN_PCM_BUFFER_SIZE/2)
 800df00:	4b1b      	ldr	r3, [pc, #108]	@ (800df70 <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800df02:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800df06:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800df0a:	f5b3 5f90 	cmp.w	r3, #4608	@ 0x1200
 800df0e:	d10c      	bne.n	800df2a <BSP_AUDIO_IN_TransferComplete_CallBack+0x46>
  {
    BufferCtl.wr_state   =  BUFFER_FULL;
 800df10:	4b17      	ldr	r3, [pc, #92]	@ (800df70 <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800df12:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800df16:	2201      	movs	r2, #1
 800df18:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
    BufferCtl.offset  = 0;
 800df1c:	4b14      	ldr	r3, [pc, #80]	@ (800df70 <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800df1e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800df22:	461a      	mov	r2, r3
 800df24:	2300      	movs	r3, #0
 800df26:	f8c2 3808 	str.w	r3, [r2, #2056]	@ 0x808
  }
  
  if(BufferCtl.pcm_ptr >= AUDIO_IN_PCM_BUFFER_SIZE)
 800df2a:	4b11      	ldr	r3, [pc, #68]	@ (800df70 <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800df2c:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800df30:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800df34:	f5b3 5f10 	cmp.w	r3, #9216	@ 0x2400
 800df38:	d314      	bcc.n	800df64 <BSP_AUDIO_IN_TransferComplete_CallBack+0x80>
  {
    BufferCtl.wr_state   =  BUFFER_FULL;
 800df3a:	4b0d      	ldr	r3, [pc, #52]	@ (800df70 <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800df3c:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800df40:	2201      	movs	r2, #1
 800df42:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
    BufferCtl.offset  = AUDIO_IN_PCM_BUFFER_SIZE/2;    
 800df46:	4b0a      	ldr	r3, [pc, #40]	@ (800df70 <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800df48:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800df4c:	461a      	mov	r2, r3
 800df4e:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 800df52:	f8c2 3808 	str.w	r3, [r2, #2056]	@ 0x808
    BufferCtl.pcm_ptr = 0;
 800df56:	4b06      	ldr	r3, [pc, #24]	@ (800df70 <BSP_AUDIO_IN_TransferComplete_CallBack+0x8c>)
 800df58:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800df5c:	461a      	mov	r2, r3
 800df5e:	2300      	movs	r3, #0
 800df60:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800
  }
}
 800df64:	bf00      	nop
 800df66:	46bd      	mov	sp, r7
 800df68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df6c:	4770      	bx	lr
 800df6e:	bf00      	nop
 800df70:	20031298 	.word	0x20031298

0800df74 <BSP_AUDIO_IN_HalfTransfer_CallBack>:
  * @brief  Manages the DMA Half Transfer complete interrupt.
  * @param  None
  * @retval None
  */
void BSP_AUDIO_IN_HalfTransfer_CallBack(void)
{ 
 800df74:	b480      	push	{r7}
 800df76:	af00      	add	r7, sp, #0
  BufferCtl.pcm_ptr+= AUDIO_IN_PCM_BUFFER_SIZE/2;
 800df78:	4b21      	ldr	r3, [pc, #132]	@ (800e000 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800df7a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800df7e:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800df82:	f503 5390 	add.w	r3, r3, #4608	@ 0x1200
 800df86:	4a1e      	ldr	r2, [pc, #120]	@ (800e000 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800df88:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 800df8c:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800
  if(BufferCtl.pcm_ptr == AUDIO_IN_PCM_BUFFER_SIZE/2)
 800df90:	4b1b      	ldr	r3, [pc, #108]	@ (800e000 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800df92:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800df96:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800df9a:	f5b3 5f90 	cmp.w	r3, #4608	@ 0x1200
 800df9e:	d10c      	bne.n	800dfba <BSP_AUDIO_IN_HalfTransfer_CallBack+0x46>
  {
    BufferCtl.wr_state   =  BUFFER_FULL;
 800dfa0:	4b17      	ldr	r3, [pc, #92]	@ (800e000 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800dfa2:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800dfa6:	2201      	movs	r2, #1
 800dfa8:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
    BufferCtl.offset  = 0;
 800dfac:	4b14      	ldr	r3, [pc, #80]	@ (800e000 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800dfae:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800dfb2:	461a      	mov	r2, r3
 800dfb4:	2300      	movs	r3, #0
 800dfb6:	f8c2 3808 	str.w	r3, [r2, #2056]	@ 0x808
  }
  
  if(BufferCtl.pcm_ptr >= AUDIO_IN_PCM_BUFFER_SIZE)
 800dfba:	4b11      	ldr	r3, [pc, #68]	@ (800e000 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800dfbc:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800dfc0:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800dfc4:	f5b3 5f10 	cmp.w	r3, #9216	@ 0x2400
 800dfc8:	d314      	bcc.n	800dff4 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x80>
  {
    BufferCtl.wr_state   =  BUFFER_FULL;
 800dfca:	4b0d      	ldr	r3, [pc, #52]	@ (800e000 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800dfcc:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800dfd0:	2201      	movs	r2, #1
 800dfd2:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
    BufferCtl.offset  = AUDIO_IN_PCM_BUFFER_SIZE/2;    
 800dfd6:	4b0a      	ldr	r3, [pc, #40]	@ (800e000 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800dfd8:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800dfdc:	461a      	mov	r2, r3
 800dfde:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 800dfe2:	f8c2 3808 	str.w	r3, [r2, #2056]	@ 0x808
    BufferCtl.pcm_ptr = 0;
 800dfe6:	4b06      	ldr	r3, [pc, #24]	@ (800e000 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8c>)
 800dfe8:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800dfec:	461a      	mov	r2, r3
 800dfee:	2300      	movs	r3, #0
 800dff0:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800
  }
}
 800dff4:	bf00      	nop
 800dff6:	46bd      	mov	sp, r7
 800dff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dffc:	4770      	bx	lr
 800dffe:	bf00      	nop
 800e000:	20031298 	.word	0x20031298

0800e004 <WavProcess_EncInit>:
  * @param  Freq: Sampling frequency.
  * @param  pHeader: Pointer to the WAV file header to be written.  
  * @retval 0 if success, !0 else.
  */
static uint32_t WavProcess_EncInit(uint32_t Freq, uint8_t *pHeader)
{  
 800e004:	b580      	push	{r7, lr}
 800e006:	b082      	sub	sp, #8
 800e008:	af00      	add	r7, sp, #0
 800e00a:	6078      	str	r0, [r7, #4]
 800e00c:	6039      	str	r1, [r7, #0]
  /* Initialize the encoder structure */
  WaveFormat.SampleRate = Freq;        /* Audio sampling frequency */
 800e00e:	4a1b      	ldr	r2, [pc, #108]	@ (800e07c <WavProcess_EncInit+0x78>)
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	6193      	str	r3, [r2, #24]
  WaveFormat.NbrChannels = 2;          /* Number of channels: 1:Mono or 2:Stereo */
 800e014:	4b19      	ldr	r3, [pc, #100]	@ (800e07c <WavProcess_EncInit+0x78>)
 800e016:	2202      	movs	r2, #2
 800e018:	82da      	strh	r2, [r3, #22]
  WaveFormat.BitPerSample = 16;        /* Number of bits per sample (16, 24 or 32) */
 800e01a:	4b18      	ldr	r3, [pc, #96]	@ (800e07c <WavProcess_EncInit+0x78>)
 800e01c:	2210      	movs	r2, #16
 800e01e:	845a      	strh	r2, [r3, #34]	@ 0x22
  WaveFormat.FileSize = 0x001D4C00;    /* Total length of useful audio data (payload) */
 800e020:	4b16      	ldr	r3, [pc, #88]	@ (800e07c <WavProcess_EncInit+0x78>)
 800e022:	4a17      	ldr	r2, [pc, #92]	@ (800e080 <WavProcess_EncInit+0x7c>)
 800e024:	605a      	str	r2, [r3, #4]
  WaveFormat.SubChunk1Size = 44;       /* The file header chunk size */
 800e026:	4b15      	ldr	r3, [pc, #84]	@ (800e07c <WavProcess_EncInit+0x78>)
 800e028:	222c      	movs	r2, #44	@ 0x2c
 800e02a:	611a      	str	r2, [r3, #16]
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
 800e02c:	4b13      	ldr	r3, [pc, #76]	@ (800e07c <WavProcess_EncInit+0x78>)
 800e02e:	699b      	ldr	r3, [r3, #24]
                        (WaveFormat.BitPerSample/8) * \
 800e030:	4a12      	ldr	r2, [pc, #72]	@ (800e07c <WavProcess_EncInit+0x78>)
 800e032:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 800e034:	08d2      	lsrs	r2, r2, #3
 800e036:	b292      	uxth	r2, r2
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
 800e038:	fb02 f303 	mul.w	r3, r2, r3
                         WaveFormat.NbrChannels);     /* Number of bytes per second  (sample rate * block align)  */
 800e03c:	4a0f      	ldr	r2, [pc, #60]	@ (800e07c <WavProcess_EncInit+0x78>)
 800e03e:	8ad2      	ldrh	r2, [r2, #22]
                        (WaveFormat.BitPerSample/8) * \
 800e040:	fb02 f303 	mul.w	r3, r2, r3
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
 800e044:	4a0d      	ldr	r2, [pc, #52]	@ (800e07c <WavProcess_EncInit+0x78>)
 800e046:	61d3      	str	r3, [r2, #28]
  WaveFormat.BlockAlign = WaveFormat.NbrChannels * \
 800e048:	4b0c      	ldr	r3, [pc, #48]	@ (800e07c <WavProcess_EncInit+0x78>)
 800e04a:	8ada      	ldrh	r2, [r3, #22]
                         (WaveFormat.BitPerSample/8); /* channels * bits/sample / 8 */
 800e04c:	4b0b      	ldr	r3, [pc, #44]	@ (800e07c <WavProcess_EncInit+0x78>)
 800e04e:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
  WaveFormat.BlockAlign = WaveFormat.NbrChannels * \
 800e050:	08db      	lsrs	r3, r3, #3
 800e052:	b29b      	uxth	r3, r3
 800e054:	fb12 f303 	smulbb	r3, r2, r3
 800e058:	b29a      	uxth	r2, r3
 800e05a:	4b08      	ldr	r3, [pc, #32]	@ (800e07c <WavProcess_EncInit+0x78>)
 800e05c:	841a      	strh	r2, [r3, #32]
  
  /* Parse the wav file header and extract required information */
  if(WavProcess_HeaderInit(pHeader, &WaveFormat))
 800e05e:	4907      	ldr	r1, [pc, #28]	@ (800e07c <WavProcess_EncInit+0x78>)
 800e060:	6838      	ldr	r0, [r7, #0]
 800e062:	f000 f80f 	bl	800e084 <WavProcess_HeaderInit>
 800e066:	4603      	mov	r3, r0
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d001      	beq.n	800e070 <WavProcess_EncInit+0x6c>
  {
    return 1;
 800e06c:	2301      	movs	r3, #1
 800e06e:	e000      	b.n	800e072 <WavProcess_EncInit+0x6e>
  }
  return 0;
 800e070:	2300      	movs	r3, #0
}
 800e072:	4618      	mov	r0, r3
 800e074:	3708      	adds	r7, #8
 800e076:	46bd      	mov	sp, r7
 800e078:	bd80      	pop	{r7, pc}
 800e07a:	bf00      	nop
 800e07c:	20035aa8 	.word	0x20035aa8
 800e080:	001d4c00 	.word	0x001d4c00

0800e084 <WavProcess_HeaderInit>:
  * @param  pHeader: Header Buffer to be filled
  * @param  pWaveFormatStruct: Pointer to the wave structure to be filled.
  * @retval 0 if passed, !0 if failed.
  */
static uint32_t WavProcess_HeaderInit(uint8_t* pHeader, WAVE_FormatTypeDef* pWaveFormatStruct)
{
 800e084:	b480      	push	{r7}
 800e086:	b083      	sub	sp, #12
 800e088:	af00      	add	r7, sp, #0
 800e08a:	6078      	str	r0, [r7, #4]
 800e08c:	6039      	str	r1, [r7, #0]
  /* Write chunkID, must be 'RIFF'  ------------------------------------------*/
  pHeader[0] = 'R';
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	2252      	movs	r2, #82	@ 0x52
 800e092:	701a      	strb	r2, [r3, #0]
  pHeader[1] = 'I';
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	3301      	adds	r3, #1
 800e098:	2249      	movs	r2, #73	@ 0x49
 800e09a:	701a      	strb	r2, [r3, #0]
  pHeader[2] = 'F';
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	3302      	adds	r3, #2
 800e0a0:	2246      	movs	r2, #70	@ 0x46
 800e0a2:	701a      	strb	r2, [r3, #0]
  pHeader[3] = 'F';
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	3303      	adds	r3, #3
 800e0a8:	2246      	movs	r2, #70	@ 0x46
 800e0aa:	701a      	strb	r2, [r3, #0]
  
  /* Write the file length ---------------------------------------------------*/
  /* The sampling time: this value will be written back at the end of the 
     recording operation.  Example: 661500 Bytes = 0x000A17FC, byte[7]=0x00, byte[4]=0xFC */
  pHeader[4] = 0x00;
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	3304      	adds	r3, #4
 800e0b0:	2200      	movs	r2, #0
 800e0b2:	701a      	strb	r2, [r3, #0]
  pHeader[5] = 0x4C;
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	3305      	adds	r3, #5
 800e0b8:	224c      	movs	r2, #76	@ 0x4c
 800e0ba:	701a      	strb	r2, [r3, #0]
  pHeader[6] = 0x1D;
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	3306      	adds	r3, #6
 800e0c0:	221d      	movs	r2, #29
 800e0c2:	701a      	strb	r2, [r3, #0]
  pHeader[7] = 0x00;
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	3307      	adds	r3, #7
 800e0c8:	2200      	movs	r2, #0
 800e0ca:	701a      	strb	r2, [r3, #0]
  /* Write the file format, must be 'WAVE' -----------------------------------*/
  pHeader[8]  = 'W';
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	3308      	adds	r3, #8
 800e0d0:	2257      	movs	r2, #87	@ 0x57
 800e0d2:	701a      	strb	r2, [r3, #0]
  pHeader[9]  = 'A';
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	3309      	adds	r3, #9
 800e0d8:	2241      	movs	r2, #65	@ 0x41
 800e0da:	701a      	strb	r2, [r3, #0]
  pHeader[10] = 'V';
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	330a      	adds	r3, #10
 800e0e0:	2256      	movs	r2, #86	@ 0x56
 800e0e2:	701a      	strb	r2, [r3, #0]
  pHeader[11] = 'E';
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	330b      	adds	r3, #11
 800e0e8:	2245      	movs	r2, #69	@ 0x45
 800e0ea:	701a      	strb	r2, [r3, #0]
  
  /* Write the format chunk, must be'fmt ' -----------------------------------*/
  pHeader[12]  = 'f';
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	330c      	adds	r3, #12
 800e0f0:	2266      	movs	r2, #102	@ 0x66
 800e0f2:	701a      	strb	r2, [r3, #0]
  pHeader[13]  = 'm';
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	330d      	adds	r3, #13
 800e0f8:	226d      	movs	r2, #109	@ 0x6d
 800e0fa:	701a      	strb	r2, [r3, #0]
  pHeader[14]  = 't';
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	330e      	adds	r3, #14
 800e100:	2274      	movs	r2, #116	@ 0x74
 800e102:	701a      	strb	r2, [r3, #0]
  pHeader[15]  = ' ';
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	330f      	adds	r3, #15
 800e108:	2220      	movs	r2, #32
 800e10a:	701a      	strb	r2, [r3, #0]
  
  /* Write the length of the 'fmt' data, must be 0x10 ------------------------*/
  pHeader[16]  = 0x10;
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	3310      	adds	r3, #16
 800e110:	2210      	movs	r2, #16
 800e112:	701a      	strb	r2, [r3, #0]
  pHeader[17]  = 0x00;
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	3311      	adds	r3, #17
 800e118:	2200      	movs	r2, #0
 800e11a:	701a      	strb	r2, [r3, #0]
  pHeader[18]  = 0x00;
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	3312      	adds	r3, #18
 800e120:	2200      	movs	r2, #0
 800e122:	701a      	strb	r2, [r3, #0]
  pHeader[19]  = 0x00;
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	3313      	adds	r3, #19
 800e128:	2200      	movs	r2, #0
 800e12a:	701a      	strb	r2, [r3, #0]
  
  /* Write the audio format, must be 0x01 (PCM) ------------------------------*/
  pHeader[20]  = 0x01;
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	3314      	adds	r3, #20
 800e130:	2201      	movs	r2, #1
 800e132:	701a      	strb	r2, [r3, #0]
  pHeader[21]  = 0x00;
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	3315      	adds	r3, #21
 800e138:	2200      	movs	r2, #0
 800e13a:	701a      	strb	r2, [r3, #0]
  
  /* Write the number of channels, ie. 0x01 (Mono) ---------------------------*/
  pHeader[22]  = pWaveFormatStruct->NbrChannels;
 800e13c:	683b      	ldr	r3, [r7, #0]
 800e13e:	8ada      	ldrh	r2, [r3, #22]
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	3316      	adds	r3, #22
 800e144:	b2d2      	uxtb	r2, r2
 800e146:	701a      	strb	r2, [r3, #0]
  pHeader[23]  = 0x00;
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	3317      	adds	r3, #23
 800e14c:	2200      	movs	r2, #0
 800e14e:	701a      	strb	r2, [r3, #0]
  
  /* Write the Sample Rate in Hz ---------------------------------------------*/
  /* Write Little Endian ie. 8000 = 0x00001F40 => byte[24]=0x40, byte[27]=0x00*/
  pHeader[24]  = (uint8_t)((pWaveFormatStruct->SampleRate & 0xFF));
 800e150:	683b      	ldr	r3, [r7, #0]
 800e152:	699a      	ldr	r2, [r3, #24]
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	3318      	adds	r3, #24
 800e158:	b2d2      	uxtb	r2, r2
 800e15a:	701a      	strb	r2, [r3, #0]
  pHeader[25]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 8) & 0xFF);
 800e15c:	683b      	ldr	r3, [r7, #0]
 800e15e:	699b      	ldr	r3, [r3, #24]
 800e160:	0a1a      	lsrs	r2, r3, #8
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	3319      	adds	r3, #25
 800e166:	b2d2      	uxtb	r2, r2
 800e168:	701a      	strb	r2, [r3, #0]
  pHeader[26]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 16) & 0xFF);
 800e16a:	683b      	ldr	r3, [r7, #0]
 800e16c:	699b      	ldr	r3, [r3, #24]
 800e16e:	0c1a      	lsrs	r2, r3, #16
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	331a      	adds	r3, #26
 800e174:	b2d2      	uxtb	r2, r2
 800e176:	701a      	strb	r2, [r3, #0]
  pHeader[27]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 24) & 0xFF);
 800e178:	683b      	ldr	r3, [r7, #0]
 800e17a:	699b      	ldr	r3, [r3, #24]
 800e17c:	0e1a      	lsrs	r2, r3, #24
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	331b      	adds	r3, #27
 800e182:	b2d2      	uxtb	r2, r2
 800e184:	701a      	strb	r2, [r3, #0]
  
  /* Write the Byte Rate -----------------------------------------------------*/
  pHeader[28]  = (uint8_t)((pWaveFormatStruct->ByteRate & 0xFF));
 800e186:	683b      	ldr	r3, [r7, #0]
 800e188:	69da      	ldr	r2, [r3, #28]
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	331c      	adds	r3, #28
 800e18e:	b2d2      	uxtb	r2, r2
 800e190:	701a      	strb	r2, [r3, #0]
  pHeader[29]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 8) & 0xFF);
 800e192:	683b      	ldr	r3, [r7, #0]
 800e194:	69db      	ldr	r3, [r3, #28]
 800e196:	0a1a      	lsrs	r2, r3, #8
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	331d      	adds	r3, #29
 800e19c:	b2d2      	uxtb	r2, r2
 800e19e:	701a      	strb	r2, [r3, #0]
  pHeader[30]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 16) & 0xFF);
 800e1a0:	683b      	ldr	r3, [r7, #0]
 800e1a2:	69db      	ldr	r3, [r3, #28]
 800e1a4:	0c1a      	lsrs	r2, r3, #16
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	331e      	adds	r3, #30
 800e1aa:	b2d2      	uxtb	r2, r2
 800e1ac:	701a      	strb	r2, [r3, #0]
  pHeader[31]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 24) & 0xFF);
 800e1ae:	683b      	ldr	r3, [r7, #0]
 800e1b0:	69db      	ldr	r3, [r3, #28]
 800e1b2:	0e1a      	lsrs	r2, r3, #24
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	331f      	adds	r3, #31
 800e1b8:	b2d2      	uxtb	r2, r2
 800e1ba:	701a      	strb	r2, [r3, #0]
  
  /* Write the block alignment -----------------------------------------------*/
  pHeader[32]  = pWaveFormatStruct->BlockAlign;
 800e1bc:	683b      	ldr	r3, [r7, #0]
 800e1be:	8c1a      	ldrh	r2, [r3, #32]
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	3320      	adds	r3, #32
 800e1c4:	b2d2      	uxtb	r2, r2
 800e1c6:	701a      	strb	r2, [r3, #0]
  pHeader[33]  = 0x00;
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	3321      	adds	r3, #33	@ 0x21
 800e1cc:	2200      	movs	r2, #0
 800e1ce:	701a      	strb	r2, [r3, #0]
  
  /* Write the number of bits per sample -------------------------------------*/
  pHeader[34]  = pWaveFormatStruct->BitPerSample;
 800e1d0:	683b      	ldr	r3, [r7, #0]
 800e1d2:	8c5a      	ldrh	r2, [r3, #34]	@ 0x22
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	3322      	adds	r3, #34	@ 0x22
 800e1d8:	b2d2      	uxtb	r2, r2
 800e1da:	701a      	strb	r2, [r3, #0]
  pHeader[35]  = 0x00;
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	3323      	adds	r3, #35	@ 0x23
 800e1e0:	2200      	movs	r2, #0
 800e1e2:	701a      	strb	r2, [r3, #0]
  
  /* Write the Data chunk, must be 'data' ------------------------------------*/
  pHeader[36]  = 'd';
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	3324      	adds	r3, #36	@ 0x24
 800e1e8:	2264      	movs	r2, #100	@ 0x64
 800e1ea:	701a      	strb	r2, [r3, #0]
  pHeader[37]  = 'a';
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	3325      	adds	r3, #37	@ 0x25
 800e1f0:	2261      	movs	r2, #97	@ 0x61
 800e1f2:	701a      	strb	r2, [r3, #0]
  pHeader[38]  = 't';
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	3326      	adds	r3, #38	@ 0x26
 800e1f8:	2274      	movs	r2, #116	@ 0x74
 800e1fa:	701a      	strb	r2, [r3, #0]
  pHeader[39]  = 'a';
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	3327      	adds	r3, #39	@ 0x27
 800e200:	2261      	movs	r2, #97	@ 0x61
 800e202:	701a      	strb	r2, [r3, #0]
  
  /* Write the number of sample data -----------------------------------------*/
  /* This variable will be written back at the end of the recording operation */
  pHeader[40]  = 0x00;
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	3328      	adds	r3, #40	@ 0x28
 800e208:	2200      	movs	r2, #0
 800e20a:	701a      	strb	r2, [r3, #0]
  pHeader[41]  = 0x4C;
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	3329      	adds	r3, #41	@ 0x29
 800e210:	224c      	movs	r2, #76	@ 0x4c
 800e212:	701a      	strb	r2, [r3, #0]
  pHeader[42]  = 0x1D;
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	332a      	adds	r3, #42	@ 0x2a
 800e218:	221d      	movs	r2, #29
 800e21a:	701a      	strb	r2, [r3, #0]
  pHeader[43]  = 0x00;
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	332b      	adds	r3, #43	@ 0x2b
 800e220:	2200      	movs	r2, #0
 800e222:	701a      	strb	r2, [r3, #0]
  
  /* Return 0 if all operations are OK */
  return 0;
 800e224:	2300      	movs	r3, #0
}
 800e226:	4618      	mov	r0, r3
 800e228:	370c      	adds	r7, #12
 800e22a:	46bd      	mov	sp, r7
 800e22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e230:	4770      	bx	lr
	...

0800e234 <WavProcess_HeaderUpdate>:
  * @param  pHeader: Header Buffer to be filled
  * @param  pWaveFormatStruct: Pointer to the wave structure to be filled.
  * @retval 0 if passed, !0 if failed.
  */
static uint32_t WavProcess_HeaderUpdate(uint8_t* pHeader, WAVE_FormatTypeDef* pWaveFormatStruct)
{
 800e234:	b480      	push	{r7}
 800e236:	b083      	sub	sp, #12
 800e238:	af00      	add	r7, sp, #0
 800e23a:	6078      	str	r0, [r7, #4]
 800e23c:	6039      	str	r1, [r7, #0]
  /* Write the file length ---------------------------------------------------*/
  /* The sampling time: this value will be written back at the end of the 
     recording operation.  Example: 661500 Bytes = 0x000A17FC, byte[7]=0x00, byte[4]=0xFC */
  pHeader[4] = (uint8_t)(BufferCtl.fptr);
 800e23e:	4b30      	ldr	r3, [pc, #192]	@ (800e300 <WavProcess_HeaderUpdate+0xcc>)
 800e240:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800e244:	f8d3 280c 	ldr.w	r2, [r3, #2060]	@ 0x80c
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	3304      	adds	r3, #4
 800e24c:	b2d2      	uxtb	r2, r2
 800e24e:	701a      	strb	r2, [r3, #0]
  pHeader[5] = (uint8_t)(BufferCtl.fptr >> 8);
 800e250:	4b2b      	ldr	r3, [pc, #172]	@ (800e300 <WavProcess_HeaderUpdate+0xcc>)
 800e252:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800e256:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800e25a:	0a1a      	lsrs	r2, r3, #8
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	3305      	adds	r3, #5
 800e260:	b2d2      	uxtb	r2, r2
 800e262:	701a      	strb	r2, [r3, #0]
  pHeader[6] = (uint8_t)(BufferCtl.fptr >> 16);
 800e264:	4b26      	ldr	r3, [pc, #152]	@ (800e300 <WavProcess_HeaderUpdate+0xcc>)
 800e266:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800e26a:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800e26e:	0c1a      	lsrs	r2, r3, #16
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	3306      	adds	r3, #6
 800e274:	b2d2      	uxtb	r2, r2
 800e276:	701a      	strb	r2, [r3, #0]
  pHeader[7] = (uint8_t)(BufferCtl.fptr >> 24);
 800e278:	4b21      	ldr	r3, [pc, #132]	@ (800e300 <WavProcess_HeaderUpdate+0xcc>)
 800e27a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800e27e:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800e282:	0e1a      	lsrs	r2, r3, #24
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	3307      	adds	r3, #7
 800e288:	b2d2      	uxtb	r2, r2
 800e28a:	701a      	strb	r2, [r3, #0]
  /* Write the number of sample data -----------------------------------------*/
  /* This variable will be written back at the end of the recording operation */
  BufferCtl.fptr -=44;
 800e28c:	4b1c      	ldr	r3, [pc, #112]	@ (800e300 <WavProcess_HeaderUpdate+0xcc>)
 800e28e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800e292:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800e296:	3b2c      	subs	r3, #44	@ 0x2c
 800e298:	4a19      	ldr	r2, [pc, #100]	@ (800e300 <WavProcess_HeaderUpdate+0xcc>)
 800e29a:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 800e29e:	f8c2 380c 	str.w	r3, [r2, #2060]	@ 0x80c
  pHeader[40] = (uint8_t)(BufferCtl.fptr); 
 800e2a2:	4b17      	ldr	r3, [pc, #92]	@ (800e300 <WavProcess_HeaderUpdate+0xcc>)
 800e2a4:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800e2a8:	f8d3 280c 	ldr.w	r2, [r3, #2060]	@ 0x80c
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	3328      	adds	r3, #40	@ 0x28
 800e2b0:	b2d2      	uxtb	r2, r2
 800e2b2:	701a      	strb	r2, [r3, #0]
  pHeader[41] = (uint8_t)(BufferCtl.fptr >> 8);
 800e2b4:	4b12      	ldr	r3, [pc, #72]	@ (800e300 <WavProcess_HeaderUpdate+0xcc>)
 800e2b6:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800e2ba:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800e2be:	0a1a      	lsrs	r2, r3, #8
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	3329      	adds	r3, #41	@ 0x29
 800e2c4:	b2d2      	uxtb	r2, r2
 800e2c6:	701a      	strb	r2, [r3, #0]
  pHeader[42] = (uint8_t)(BufferCtl.fptr >> 16);
 800e2c8:	4b0d      	ldr	r3, [pc, #52]	@ (800e300 <WavProcess_HeaderUpdate+0xcc>)
 800e2ca:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800e2ce:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800e2d2:	0c1a      	lsrs	r2, r3, #16
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	332a      	adds	r3, #42	@ 0x2a
 800e2d8:	b2d2      	uxtb	r2, r2
 800e2da:	701a      	strb	r2, [r3, #0]
  pHeader[43] = (uint8_t)(BufferCtl.fptr >> 24); 
 800e2dc:	4b08      	ldr	r3, [pc, #32]	@ (800e300 <WavProcess_HeaderUpdate+0xcc>)
 800e2de:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800e2e2:	f8d3 380c 	ldr.w	r3, [r3, #2060]	@ 0x80c
 800e2e6:	0e1a      	lsrs	r2, r3, #24
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	332b      	adds	r3, #43	@ 0x2b
 800e2ec:	b2d2      	uxtb	r2, r2
 800e2ee:	701a      	strb	r2, [r3, #0]
  
  /* Return 0 if all operations are OK */
  return 0;
 800e2f0:	2300      	movs	r3, #0
}
 800e2f2:	4618      	mov	r0, r3
 800e2f4:	370c      	adds	r7, #12
 800e2f6:	46bd      	mov	sp, r7
 800e2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2fc:	4770      	bx	lr
 800e2fe:	bf00      	nop
 800e300:	20031298 	.word	0x20031298

0800e304 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800e304:	b580      	push	{r7, lr}
 800e306:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800e308:	4904      	ldr	r1, [pc, #16]	@ (800e31c <MX_FATFS_Init+0x18>)
 800e30a:	4805      	ldr	r0, [pc, #20]	@ (800e320 <MX_FATFS_Init+0x1c>)
 800e30c:	f003 fb66 	bl	80119dc <FATFS_LinkDriver>
 800e310:	4603      	mov	r3, r0
 800e312:	461a      	mov	r2, r3
 800e314:	4b03      	ldr	r3, [pc, #12]	@ (800e324 <MX_FATFS_Init+0x20>)
 800e316:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800e318:	bf00      	nop
 800e31a:	bd80      	pop	{r7, pc}
 800e31c:	20035d08 	.word	0x20035d08
 800e320:	0801ad14 	.word	0x0801ad14
 800e324:	20035d04 	.word	0x20035d04

0800e328 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800e328:	b480      	push	{r7}
 800e32a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800e32c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800e32e:	4618      	mov	r0, r3
 800e330:	46bd      	mov	sp, r7
 800e332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e336:	4770      	bx	lr

0800e338 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800e338:	b580      	push	{r7, lr}
 800e33a:	b082      	sub	sp, #8
 800e33c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800e33e:	2300      	movs	r3, #0
 800e340:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800e342:	f000 f888 	bl	800e456 <BSP_SD_IsDetected>
 800e346:	4603      	mov	r3, r0
 800e348:	2b01      	cmp	r3, #1
 800e34a:	d001      	beq.n	800e350 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800e34c:	2302      	movs	r3, #2
 800e34e:	e005      	b.n	800e35c <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800e350:	4804      	ldr	r0, [pc, #16]	@ (800e364 <BSP_SD_Init+0x2c>)
 800e352:	f7fa ff32 	bl	80091ba <HAL_SD_Init>
 800e356:	4603      	mov	r3, r0
 800e358:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800e35a:	79fb      	ldrb	r3, [r7, #7]
}
 800e35c:	4618      	mov	r0, r3
 800e35e:	3708      	adds	r7, #8
 800e360:	46bd      	mov	sp, r7
 800e362:	bd80      	pop	{r7, pc}
 800e364:	20030c50 	.word	0x20030c50

0800e368 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800e368:	b580      	push	{r7, lr}
 800e36a:	b086      	sub	sp, #24
 800e36c:	af00      	add	r7, sp, #0
 800e36e:	60f8      	str	r0, [r7, #12]
 800e370:	60b9      	str	r1, [r7, #8]
 800e372:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800e374:	2300      	movs	r3, #0
 800e376:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	68ba      	ldr	r2, [r7, #8]
 800e37c:	68f9      	ldr	r1, [r7, #12]
 800e37e:	4806      	ldr	r0, [pc, #24]	@ (800e398 <BSP_SD_ReadBlocks_DMA+0x30>)
 800e380:	f7fa ffd4 	bl	800932c <HAL_SD_ReadBlocks_DMA>
 800e384:	4603      	mov	r3, r0
 800e386:	2b00      	cmp	r3, #0
 800e388:	d001      	beq.n	800e38e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800e38a:	2301      	movs	r3, #1
 800e38c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800e38e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e390:	4618      	mov	r0, r3
 800e392:	3718      	adds	r7, #24
 800e394:	46bd      	mov	sp, r7
 800e396:	bd80      	pop	{r7, pc}
 800e398:	20030c50 	.word	0x20030c50

0800e39c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800e39c:	b580      	push	{r7, lr}
 800e39e:	b086      	sub	sp, #24
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	60f8      	str	r0, [r7, #12]
 800e3a4:	60b9      	str	r1, [r7, #8]
 800e3a6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800e3a8:	2300      	movs	r3, #0
 800e3aa:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	68ba      	ldr	r2, [r7, #8]
 800e3b0:	68f9      	ldr	r1, [r7, #12]
 800e3b2:	4806      	ldr	r0, [pc, #24]	@ (800e3cc <BSP_SD_WriteBlocks_DMA+0x30>)
 800e3b4:	f7fb f89c 	bl	80094f0 <HAL_SD_WriteBlocks_DMA>
 800e3b8:	4603      	mov	r3, r0
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d001      	beq.n	800e3c2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800e3be:	2301      	movs	r3, #1
 800e3c0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800e3c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800e3c4:	4618      	mov	r0, r3
 800e3c6:	3718      	adds	r7, #24
 800e3c8:	46bd      	mov	sp, r7
 800e3ca:	bd80      	pop	{r7, pc}
 800e3cc:	20030c50 	.word	0x20030c50

0800e3d0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800e3d0:	b580      	push	{r7, lr}
 800e3d2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800e3d4:	4805      	ldr	r0, [pc, #20]	@ (800e3ec <BSP_SD_GetCardState+0x1c>)
 800e3d6:	f7fb fcc1 	bl	8009d5c <HAL_SD_GetCardState>
 800e3da:	4603      	mov	r3, r0
 800e3dc:	2b04      	cmp	r3, #4
 800e3de:	bf14      	ite	ne
 800e3e0:	2301      	movne	r3, #1
 800e3e2:	2300      	moveq	r3, #0
 800e3e4:	b2db      	uxtb	r3, r3
}
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	bd80      	pop	{r7, pc}
 800e3ea:	bf00      	nop
 800e3ec:	20030c50 	.word	0x20030c50

0800e3f0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800e3f0:	b580      	push	{r7, lr}
 800e3f2:	b082      	sub	sp, #8
 800e3f4:	af00      	add	r7, sp, #0
 800e3f6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800e3f8:	6879      	ldr	r1, [r7, #4]
 800e3fa:	4803      	ldr	r0, [pc, #12]	@ (800e408 <BSP_SD_GetCardInfo+0x18>)
 800e3fc:	f7fb fc82 	bl	8009d04 <HAL_SD_GetCardInfo>
}
 800e400:	bf00      	nop
 800e402:	3708      	adds	r7, #8
 800e404:	46bd      	mov	sp, r7
 800e406:	bd80      	pop	{r7, pc}
 800e408:	20030c50 	.word	0x20030c50

0800e40c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800e40c:	b580      	push	{r7, lr}
 800e40e:	b082      	sub	sp, #8
 800e410:	af00      	add	r7, sp, #0
 800e412:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800e414:	f000 f818 	bl	800e448 <BSP_SD_AbortCallback>
}
 800e418:	bf00      	nop
 800e41a:	3708      	adds	r7, #8
 800e41c:	46bd      	mov	sp, r7
 800e41e:	bd80      	pop	{r7, pc}

0800e420 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800e420:	b580      	push	{r7, lr}
 800e422:	b082      	sub	sp, #8
 800e424:	af00      	add	r7, sp, #0
 800e426:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800e428:	f000 f9a8 	bl	800e77c <BSP_SD_WriteCpltCallback>
}
 800e42c:	bf00      	nop
 800e42e:	3708      	adds	r7, #8
 800e430:	46bd      	mov	sp, r7
 800e432:	bd80      	pop	{r7, pc}

0800e434 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800e434:	b580      	push	{r7, lr}
 800e436:	b082      	sub	sp, #8
 800e438:	af00      	add	r7, sp, #0
 800e43a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800e43c:	f000 f9aa 	bl	800e794 <BSP_SD_ReadCpltCallback>
}
 800e440:	bf00      	nop
 800e442:	3708      	adds	r7, #8
 800e444:	46bd      	mov	sp, r7
 800e446:	bd80      	pop	{r7, pc}

0800e448 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800e448:	b480      	push	{r7}
 800e44a:	af00      	add	r7, sp, #0

}
 800e44c:	bf00      	nop
 800e44e:	46bd      	mov	sp, r7
 800e450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e454:	4770      	bx	lr

0800e456 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800e456:	b580      	push	{r7, lr}
 800e458:	b082      	sub	sp, #8
 800e45a:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800e45c:	2301      	movs	r3, #1
 800e45e:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800e460:	f000 f80c 	bl	800e47c <BSP_PlatformIsDetected>
 800e464:	4603      	mov	r3, r0
 800e466:	2b00      	cmp	r3, #0
 800e468:	d101      	bne.n	800e46e <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800e46a:	2300      	movs	r3, #0
 800e46c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800e46e:	79fb      	ldrb	r3, [r7, #7]
 800e470:	b2db      	uxtb	r3, r3
}
 800e472:	4618      	mov	r0, r3
 800e474:	3708      	adds	r7, #8
 800e476:	46bd      	mov	sp, r7
 800e478:	bd80      	pop	{r7, pc}
	...

0800e47c <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800e47c:	b580      	push	{r7, lr}
 800e47e:	b082      	sub	sp, #8
 800e480:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800e482:	2301      	movs	r3, #1
 800e484:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800e486:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800e48a:	4806      	ldr	r0, [pc, #24]	@ (800e4a4 <BSP_PlatformIsDetected+0x28>)
 800e48c:	f7f8 f9b6 	bl	80067fc <HAL_GPIO_ReadPin>
 800e490:	4603      	mov	r3, r0
 800e492:	2b00      	cmp	r3, #0
 800e494:	d001      	beq.n	800e49a <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800e496:	2300      	movs	r3, #0
 800e498:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800e49a:	79fb      	ldrb	r3, [r7, #7]
}
 800e49c:	4618      	mov	r0, r3
 800e49e:	3708      	adds	r7, #8
 800e4a0:	46bd      	mov	sp, r7
 800e4a2:	bd80      	pop	{r7, pc}
 800e4a4:	40020800 	.word	0x40020800

0800e4a8 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800e4a8:	b580      	push	{r7, lr}
 800e4aa:	b084      	sub	sp, #16
 800e4ac:	af00      	add	r7, sp, #0
 800e4ae:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800e4b0:	f7f7 f844 	bl	800553c <HAL_GetTick>
 800e4b4:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800e4b6:	e006      	b.n	800e4c6 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e4b8:	f7ff ff8a 	bl	800e3d0 <BSP_SD_GetCardState>
 800e4bc:	4603      	mov	r3, r0
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d101      	bne.n	800e4c6 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800e4c2:	2300      	movs	r3, #0
 800e4c4:	e009      	b.n	800e4da <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800e4c6:	f7f7 f839 	bl	800553c <HAL_GetTick>
 800e4ca:	4602      	mov	r2, r0
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	1ad3      	subs	r3, r2, r3
 800e4d0:	687a      	ldr	r2, [r7, #4]
 800e4d2:	429a      	cmp	r2, r3
 800e4d4:	d8f0      	bhi.n	800e4b8 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800e4d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e4da:	4618      	mov	r0, r3
 800e4dc:	3710      	adds	r7, #16
 800e4de:	46bd      	mov	sp, r7
 800e4e0:	bd80      	pop	{r7, pc}
	...

0800e4e4 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800e4e4:	b580      	push	{r7, lr}
 800e4e6:	b082      	sub	sp, #8
 800e4e8:	af00      	add	r7, sp, #0
 800e4ea:	4603      	mov	r3, r0
 800e4ec:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800e4ee:	4b0b      	ldr	r3, [pc, #44]	@ (800e51c <SD_CheckStatus+0x38>)
 800e4f0:	2201      	movs	r2, #1
 800e4f2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800e4f4:	f7ff ff6c 	bl	800e3d0 <BSP_SD_GetCardState>
 800e4f8:	4603      	mov	r3, r0
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d107      	bne.n	800e50e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800e4fe:	4b07      	ldr	r3, [pc, #28]	@ (800e51c <SD_CheckStatus+0x38>)
 800e500:	781b      	ldrb	r3, [r3, #0]
 800e502:	b2db      	uxtb	r3, r3
 800e504:	f023 0301 	bic.w	r3, r3, #1
 800e508:	b2da      	uxtb	r2, r3
 800e50a:	4b04      	ldr	r3, [pc, #16]	@ (800e51c <SD_CheckStatus+0x38>)
 800e50c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800e50e:	4b03      	ldr	r3, [pc, #12]	@ (800e51c <SD_CheckStatus+0x38>)
 800e510:	781b      	ldrb	r3, [r3, #0]
 800e512:	b2db      	uxtb	r3, r3
}
 800e514:	4618      	mov	r0, r3
 800e516:	3708      	adds	r7, #8
 800e518:	46bd      	mov	sp, r7
 800e51a:	bd80      	pop	{r7, pc}
 800e51c:	20000108 	.word	0x20000108

0800e520 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800e520:	b580      	push	{r7, lr}
 800e522:	b082      	sub	sp, #8
 800e524:	af00      	add	r7, sp, #0
 800e526:	4603      	mov	r3, r0
 800e528:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800e52a:	f7ff ff05 	bl	800e338 <BSP_SD_Init>
 800e52e:	4603      	mov	r3, r0
 800e530:	2b00      	cmp	r3, #0
 800e532:	d107      	bne.n	800e544 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800e534:	79fb      	ldrb	r3, [r7, #7]
 800e536:	4618      	mov	r0, r3
 800e538:	f7ff ffd4 	bl	800e4e4 <SD_CheckStatus>
 800e53c:	4603      	mov	r3, r0
 800e53e:	461a      	mov	r2, r3
 800e540:	4b04      	ldr	r3, [pc, #16]	@ (800e554 <SD_initialize+0x34>)
 800e542:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800e544:	4b03      	ldr	r3, [pc, #12]	@ (800e554 <SD_initialize+0x34>)
 800e546:	781b      	ldrb	r3, [r3, #0]
 800e548:	b2db      	uxtb	r3, r3
}
 800e54a:	4618      	mov	r0, r3
 800e54c:	3708      	adds	r7, #8
 800e54e:	46bd      	mov	sp, r7
 800e550:	bd80      	pop	{r7, pc}
 800e552:	bf00      	nop
 800e554:	20000108 	.word	0x20000108

0800e558 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800e558:	b580      	push	{r7, lr}
 800e55a:	b082      	sub	sp, #8
 800e55c:	af00      	add	r7, sp, #0
 800e55e:	4603      	mov	r3, r0
 800e560:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800e562:	79fb      	ldrb	r3, [r7, #7]
 800e564:	4618      	mov	r0, r3
 800e566:	f7ff ffbd 	bl	800e4e4 <SD_CheckStatus>
 800e56a:	4603      	mov	r3, r0
}
 800e56c:	4618      	mov	r0, r3
 800e56e:	3708      	adds	r7, #8
 800e570:	46bd      	mov	sp, r7
 800e572:	bd80      	pop	{r7, pc}

0800e574 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800e574:	b580      	push	{r7, lr}
 800e576:	b086      	sub	sp, #24
 800e578:	af00      	add	r7, sp, #0
 800e57a:	60b9      	str	r1, [r7, #8]
 800e57c:	607a      	str	r2, [r7, #4]
 800e57e:	603b      	str	r3, [r7, #0]
 800e580:	4603      	mov	r3, r0
 800e582:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e584:	2301      	movs	r3, #1
 800e586:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800e588:	f247 5030 	movw	r0, #30000	@ 0x7530
 800e58c:	f7ff ff8c 	bl	800e4a8 <SD_CheckStatusWithTimeout>
 800e590:	4603      	mov	r3, r0
 800e592:	2b00      	cmp	r3, #0
 800e594:	da01      	bge.n	800e59a <SD_read+0x26>
  {
    return res;
 800e596:	7dfb      	ldrb	r3, [r7, #23]
 800e598:	e03b      	b.n	800e612 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800e59a:	683a      	ldr	r2, [r7, #0]
 800e59c:	6879      	ldr	r1, [r7, #4]
 800e59e:	68b8      	ldr	r0, [r7, #8]
 800e5a0:	f7ff fee2 	bl	800e368 <BSP_SD_ReadBlocks_DMA>
 800e5a4:	4603      	mov	r3, r0
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d132      	bne.n	800e610 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800e5aa:	4b1c      	ldr	r3, [pc, #112]	@ (800e61c <SD_read+0xa8>)
 800e5ac:	2200      	movs	r2, #0
 800e5ae:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800e5b0:	f7f6 ffc4 	bl	800553c <HAL_GetTick>
 800e5b4:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800e5b6:	bf00      	nop
 800e5b8:	4b18      	ldr	r3, [pc, #96]	@ (800e61c <SD_read+0xa8>)
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d108      	bne.n	800e5d2 <SD_read+0x5e>
 800e5c0:	f7f6 ffbc 	bl	800553c <HAL_GetTick>
 800e5c4:	4602      	mov	r2, r0
 800e5c6:	693b      	ldr	r3, [r7, #16]
 800e5c8:	1ad3      	subs	r3, r2, r3
 800e5ca:	f247 522f 	movw	r2, #29999	@ 0x752f
 800e5ce:	4293      	cmp	r3, r2
 800e5d0:	d9f2      	bls.n	800e5b8 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800e5d2:	4b12      	ldr	r3, [pc, #72]	@ (800e61c <SD_read+0xa8>)
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d102      	bne.n	800e5e0 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800e5da:	2301      	movs	r3, #1
 800e5dc:	75fb      	strb	r3, [r7, #23]
 800e5de:	e017      	b.n	800e610 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800e5e0:	4b0e      	ldr	r3, [pc, #56]	@ (800e61c <SD_read+0xa8>)
 800e5e2:	2200      	movs	r2, #0
 800e5e4:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800e5e6:	f7f6 ffa9 	bl	800553c <HAL_GetTick>
 800e5ea:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e5ec:	e007      	b.n	800e5fe <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e5ee:	f7ff feef 	bl	800e3d0 <BSP_SD_GetCardState>
 800e5f2:	4603      	mov	r3, r0
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d102      	bne.n	800e5fe <SD_read+0x8a>
          {
            res = RES_OK;
 800e5f8:	2300      	movs	r3, #0
 800e5fa:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800e5fc:	e008      	b.n	800e610 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e5fe:	f7f6 ff9d 	bl	800553c <HAL_GetTick>
 800e602:	4602      	mov	r2, r0
 800e604:	693b      	ldr	r3, [r7, #16]
 800e606:	1ad3      	subs	r3, r2, r3
 800e608:	f247 522f 	movw	r2, #29999	@ 0x752f
 800e60c:	4293      	cmp	r3, r2
 800e60e:	d9ee      	bls.n	800e5ee <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800e610:	7dfb      	ldrb	r3, [r7, #23]
}
 800e612:	4618      	mov	r0, r3
 800e614:	3718      	adds	r7, #24
 800e616:	46bd      	mov	sp, r7
 800e618:	bd80      	pop	{r7, pc}
 800e61a:	bf00      	nop
 800e61c:	20035f40 	.word	0x20035f40

0800e620 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800e620:	b580      	push	{r7, lr}
 800e622:	b086      	sub	sp, #24
 800e624:	af00      	add	r7, sp, #0
 800e626:	60b9      	str	r1, [r7, #8]
 800e628:	607a      	str	r2, [r7, #4]
 800e62a:	603b      	str	r3, [r7, #0]
 800e62c:	4603      	mov	r3, r0
 800e62e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e630:	2301      	movs	r3, #1
 800e632:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800e634:	4b24      	ldr	r3, [pc, #144]	@ (800e6c8 <SD_write+0xa8>)
 800e636:	2200      	movs	r2, #0
 800e638:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800e63a:	f247 5030 	movw	r0, #30000	@ 0x7530
 800e63e:	f7ff ff33 	bl	800e4a8 <SD_CheckStatusWithTimeout>
 800e642:	4603      	mov	r3, r0
 800e644:	2b00      	cmp	r3, #0
 800e646:	da01      	bge.n	800e64c <SD_write+0x2c>
  {
    return res;
 800e648:	7dfb      	ldrb	r3, [r7, #23]
 800e64a:	e038      	b.n	800e6be <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800e64c:	683a      	ldr	r2, [r7, #0]
 800e64e:	6879      	ldr	r1, [r7, #4]
 800e650:	68b8      	ldr	r0, [r7, #8]
 800e652:	f7ff fea3 	bl	800e39c <BSP_SD_WriteBlocks_DMA>
 800e656:	4603      	mov	r3, r0
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d12f      	bne.n	800e6bc <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800e65c:	f7f6 ff6e 	bl	800553c <HAL_GetTick>
 800e660:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800e662:	bf00      	nop
 800e664:	4b18      	ldr	r3, [pc, #96]	@ (800e6c8 <SD_write+0xa8>)
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d108      	bne.n	800e67e <SD_write+0x5e>
 800e66c:	f7f6 ff66 	bl	800553c <HAL_GetTick>
 800e670:	4602      	mov	r2, r0
 800e672:	693b      	ldr	r3, [r7, #16]
 800e674:	1ad3      	subs	r3, r2, r3
 800e676:	f247 522f 	movw	r2, #29999	@ 0x752f
 800e67a:	4293      	cmp	r3, r2
 800e67c:	d9f2      	bls.n	800e664 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800e67e:	4b12      	ldr	r3, [pc, #72]	@ (800e6c8 <SD_write+0xa8>)
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	2b00      	cmp	r3, #0
 800e684:	d102      	bne.n	800e68c <SD_write+0x6c>
      {
        res = RES_ERROR;
 800e686:	2301      	movs	r3, #1
 800e688:	75fb      	strb	r3, [r7, #23]
 800e68a:	e017      	b.n	800e6bc <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800e68c:	4b0e      	ldr	r3, [pc, #56]	@ (800e6c8 <SD_write+0xa8>)
 800e68e:	2200      	movs	r2, #0
 800e690:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800e692:	f7f6 ff53 	bl	800553c <HAL_GetTick>
 800e696:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e698:	e007      	b.n	800e6aa <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e69a:	f7ff fe99 	bl	800e3d0 <BSP_SD_GetCardState>
 800e69e:	4603      	mov	r3, r0
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d102      	bne.n	800e6aa <SD_write+0x8a>
          {
            res = RES_OK;
 800e6a4:	2300      	movs	r3, #0
 800e6a6:	75fb      	strb	r3, [r7, #23]
            break;
 800e6a8:	e008      	b.n	800e6bc <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e6aa:	f7f6 ff47 	bl	800553c <HAL_GetTick>
 800e6ae:	4602      	mov	r2, r0
 800e6b0:	693b      	ldr	r3, [r7, #16]
 800e6b2:	1ad3      	subs	r3, r2, r3
 800e6b4:	f247 522f 	movw	r2, #29999	@ 0x752f
 800e6b8:	4293      	cmp	r3, r2
 800e6ba:	d9ee      	bls.n	800e69a <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800e6bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800e6be:	4618      	mov	r0, r3
 800e6c0:	3718      	adds	r7, #24
 800e6c2:	46bd      	mov	sp, r7
 800e6c4:	bd80      	pop	{r7, pc}
 800e6c6:	bf00      	nop
 800e6c8:	20035f3c 	.word	0x20035f3c

0800e6cc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800e6cc:	b580      	push	{r7, lr}
 800e6ce:	b08c      	sub	sp, #48	@ 0x30
 800e6d0:	af00      	add	r7, sp, #0
 800e6d2:	4603      	mov	r3, r0
 800e6d4:	603a      	str	r2, [r7, #0]
 800e6d6:	71fb      	strb	r3, [r7, #7]
 800e6d8:	460b      	mov	r3, r1
 800e6da:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800e6dc:	2301      	movs	r3, #1
 800e6de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800e6e2:	4b25      	ldr	r3, [pc, #148]	@ (800e778 <SD_ioctl+0xac>)
 800e6e4:	781b      	ldrb	r3, [r3, #0]
 800e6e6:	b2db      	uxtb	r3, r3
 800e6e8:	f003 0301 	and.w	r3, r3, #1
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d001      	beq.n	800e6f4 <SD_ioctl+0x28>
 800e6f0:	2303      	movs	r3, #3
 800e6f2:	e03c      	b.n	800e76e <SD_ioctl+0xa2>

  switch (cmd)
 800e6f4:	79bb      	ldrb	r3, [r7, #6]
 800e6f6:	2b03      	cmp	r3, #3
 800e6f8:	d834      	bhi.n	800e764 <SD_ioctl+0x98>
 800e6fa:	a201      	add	r2, pc, #4	@ (adr r2, 800e700 <SD_ioctl+0x34>)
 800e6fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e700:	0800e711 	.word	0x0800e711
 800e704:	0800e719 	.word	0x0800e719
 800e708:	0800e731 	.word	0x0800e731
 800e70c:	0800e74b 	.word	0x0800e74b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800e710:	2300      	movs	r3, #0
 800e712:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800e716:	e028      	b.n	800e76a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800e718:	f107 030c 	add.w	r3, r7, #12
 800e71c:	4618      	mov	r0, r3
 800e71e:	f7ff fe67 	bl	800e3f0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800e722:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e724:	683b      	ldr	r3, [r7, #0]
 800e726:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e728:	2300      	movs	r3, #0
 800e72a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800e72e:	e01c      	b.n	800e76a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e730:	f107 030c 	add.w	r3, r7, #12
 800e734:	4618      	mov	r0, r3
 800e736:	f7ff fe5b 	bl	800e3f0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800e73a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e73c:	b29a      	uxth	r2, r3
 800e73e:	683b      	ldr	r3, [r7, #0]
 800e740:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800e742:	2300      	movs	r3, #0
 800e744:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800e748:	e00f      	b.n	800e76a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e74a:	f107 030c 	add.w	r3, r7, #12
 800e74e:	4618      	mov	r0, r3
 800e750:	f7ff fe4e 	bl	800e3f0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800e754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e756:	0a5a      	lsrs	r2, r3, #9
 800e758:	683b      	ldr	r3, [r7, #0]
 800e75a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e75c:	2300      	movs	r3, #0
 800e75e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800e762:	e002      	b.n	800e76a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800e764:	2304      	movs	r3, #4
 800e766:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800e76a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800e76e:	4618      	mov	r0, r3
 800e770:	3730      	adds	r7, #48	@ 0x30
 800e772:	46bd      	mov	sp, r7
 800e774:	bd80      	pop	{r7, pc}
 800e776:	bf00      	nop
 800e778:	20000108 	.word	0x20000108

0800e77c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800e77c:	b480      	push	{r7}
 800e77e:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800e780:	4b03      	ldr	r3, [pc, #12]	@ (800e790 <BSP_SD_WriteCpltCallback+0x14>)
 800e782:	2201      	movs	r2, #1
 800e784:	601a      	str	r2, [r3, #0]
}
 800e786:	bf00      	nop
 800e788:	46bd      	mov	sp, r7
 800e78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e78e:	4770      	bx	lr
 800e790:	20035f3c 	.word	0x20035f3c

0800e794 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800e794:	b480      	push	{r7}
 800e796:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800e798:	4b03      	ldr	r3, [pc, #12]	@ (800e7a8 <BSP_SD_ReadCpltCallback+0x14>)
 800e79a:	2201      	movs	r2, #1
 800e79c:	601a      	str	r2, [r3, #0]
}
 800e79e:	bf00      	nop
 800e7a0:	46bd      	mov	sp, r7
 800e7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a6:	4770      	bx	lr
 800e7a8:	20035f40 	.word	0x20035f40

0800e7ac <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800e7ac:	b580      	push	{r7, lr}
 800e7ae:	b084      	sub	sp, #16
 800e7b0:	af00      	add	r7, sp, #0
 800e7b2:	4603      	mov	r3, r0
 800e7b4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800e7b6:	79fb      	ldrb	r3, [r7, #7]
 800e7b8:	4a08      	ldr	r2, [pc, #32]	@ (800e7dc <disk_status+0x30>)
 800e7ba:	009b      	lsls	r3, r3, #2
 800e7bc:	4413      	add	r3, r2
 800e7be:	685b      	ldr	r3, [r3, #4]
 800e7c0:	685b      	ldr	r3, [r3, #4]
 800e7c2:	79fa      	ldrb	r2, [r7, #7]
 800e7c4:	4905      	ldr	r1, [pc, #20]	@ (800e7dc <disk_status+0x30>)
 800e7c6:	440a      	add	r2, r1
 800e7c8:	7a12      	ldrb	r2, [r2, #8]
 800e7ca:	4610      	mov	r0, r2
 800e7cc:	4798      	blx	r3
 800e7ce:	4603      	mov	r3, r0
 800e7d0:	73fb      	strb	r3, [r7, #15]
  return stat;
 800e7d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7d4:	4618      	mov	r0, r3
 800e7d6:	3710      	adds	r7, #16
 800e7d8:	46bd      	mov	sp, r7
 800e7da:	bd80      	pop	{r7, pc}
 800e7dc:	20035f6c 	.word	0x20035f6c

0800e7e0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800e7e0:	b580      	push	{r7, lr}
 800e7e2:	b084      	sub	sp, #16
 800e7e4:	af00      	add	r7, sp, #0
 800e7e6:	4603      	mov	r3, r0
 800e7e8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800e7ea:	2300      	movs	r3, #0
 800e7ec:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800e7ee:	79fb      	ldrb	r3, [r7, #7]
 800e7f0:	4a0d      	ldr	r2, [pc, #52]	@ (800e828 <disk_initialize+0x48>)
 800e7f2:	5cd3      	ldrb	r3, [r2, r3]
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d111      	bne.n	800e81c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800e7f8:	79fb      	ldrb	r3, [r7, #7]
 800e7fa:	4a0b      	ldr	r2, [pc, #44]	@ (800e828 <disk_initialize+0x48>)
 800e7fc:	2101      	movs	r1, #1
 800e7fe:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800e800:	79fb      	ldrb	r3, [r7, #7]
 800e802:	4a09      	ldr	r2, [pc, #36]	@ (800e828 <disk_initialize+0x48>)
 800e804:	009b      	lsls	r3, r3, #2
 800e806:	4413      	add	r3, r2
 800e808:	685b      	ldr	r3, [r3, #4]
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	79fa      	ldrb	r2, [r7, #7]
 800e80e:	4906      	ldr	r1, [pc, #24]	@ (800e828 <disk_initialize+0x48>)
 800e810:	440a      	add	r2, r1
 800e812:	7a12      	ldrb	r2, [r2, #8]
 800e814:	4610      	mov	r0, r2
 800e816:	4798      	blx	r3
 800e818:	4603      	mov	r3, r0
 800e81a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800e81c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e81e:	4618      	mov	r0, r3
 800e820:	3710      	adds	r7, #16
 800e822:	46bd      	mov	sp, r7
 800e824:	bd80      	pop	{r7, pc}
 800e826:	bf00      	nop
 800e828:	20035f6c 	.word	0x20035f6c

0800e82c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800e82c:	b590      	push	{r4, r7, lr}
 800e82e:	b087      	sub	sp, #28
 800e830:	af00      	add	r7, sp, #0
 800e832:	60b9      	str	r1, [r7, #8]
 800e834:	607a      	str	r2, [r7, #4]
 800e836:	603b      	str	r3, [r7, #0]
 800e838:	4603      	mov	r3, r0
 800e83a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800e83c:	7bfb      	ldrb	r3, [r7, #15]
 800e83e:	4a0a      	ldr	r2, [pc, #40]	@ (800e868 <disk_read+0x3c>)
 800e840:	009b      	lsls	r3, r3, #2
 800e842:	4413      	add	r3, r2
 800e844:	685b      	ldr	r3, [r3, #4]
 800e846:	689c      	ldr	r4, [r3, #8]
 800e848:	7bfb      	ldrb	r3, [r7, #15]
 800e84a:	4a07      	ldr	r2, [pc, #28]	@ (800e868 <disk_read+0x3c>)
 800e84c:	4413      	add	r3, r2
 800e84e:	7a18      	ldrb	r0, [r3, #8]
 800e850:	683b      	ldr	r3, [r7, #0]
 800e852:	687a      	ldr	r2, [r7, #4]
 800e854:	68b9      	ldr	r1, [r7, #8]
 800e856:	47a0      	blx	r4
 800e858:	4603      	mov	r3, r0
 800e85a:	75fb      	strb	r3, [r7, #23]
  return res;
 800e85c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e85e:	4618      	mov	r0, r3
 800e860:	371c      	adds	r7, #28
 800e862:	46bd      	mov	sp, r7
 800e864:	bd90      	pop	{r4, r7, pc}
 800e866:	bf00      	nop
 800e868:	20035f6c 	.word	0x20035f6c

0800e86c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800e86c:	b590      	push	{r4, r7, lr}
 800e86e:	b087      	sub	sp, #28
 800e870:	af00      	add	r7, sp, #0
 800e872:	60b9      	str	r1, [r7, #8]
 800e874:	607a      	str	r2, [r7, #4]
 800e876:	603b      	str	r3, [r7, #0]
 800e878:	4603      	mov	r3, r0
 800e87a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800e87c:	7bfb      	ldrb	r3, [r7, #15]
 800e87e:	4a0a      	ldr	r2, [pc, #40]	@ (800e8a8 <disk_write+0x3c>)
 800e880:	009b      	lsls	r3, r3, #2
 800e882:	4413      	add	r3, r2
 800e884:	685b      	ldr	r3, [r3, #4]
 800e886:	68dc      	ldr	r4, [r3, #12]
 800e888:	7bfb      	ldrb	r3, [r7, #15]
 800e88a:	4a07      	ldr	r2, [pc, #28]	@ (800e8a8 <disk_write+0x3c>)
 800e88c:	4413      	add	r3, r2
 800e88e:	7a18      	ldrb	r0, [r3, #8]
 800e890:	683b      	ldr	r3, [r7, #0]
 800e892:	687a      	ldr	r2, [r7, #4]
 800e894:	68b9      	ldr	r1, [r7, #8]
 800e896:	47a0      	blx	r4
 800e898:	4603      	mov	r3, r0
 800e89a:	75fb      	strb	r3, [r7, #23]
  return res;
 800e89c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e89e:	4618      	mov	r0, r3
 800e8a0:	371c      	adds	r7, #28
 800e8a2:	46bd      	mov	sp, r7
 800e8a4:	bd90      	pop	{r4, r7, pc}
 800e8a6:	bf00      	nop
 800e8a8:	20035f6c 	.word	0x20035f6c

0800e8ac <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800e8ac:	b580      	push	{r7, lr}
 800e8ae:	b084      	sub	sp, #16
 800e8b0:	af00      	add	r7, sp, #0
 800e8b2:	4603      	mov	r3, r0
 800e8b4:	603a      	str	r2, [r7, #0]
 800e8b6:	71fb      	strb	r3, [r7, #7]
 800e8b8:	460b      	mov	r3, r1
 800e8ba:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800e8bc:	79fb      	ldrb	r3, [r7, #7]
 800e8be:	4a09      	ldr	r2, [pc, #36]	@ (800e8e4 <disk_ioctl+0x38>)
 800e8c0:	009b      	lsls	r3, r3, #2
 800e8c2:	4413      	add	r3, r2
 800e8c4:	685b      	ldr	r3, [r3, #4]
 800e8c6:	691b      	ldr	r3, [r3, #16]
 800e8c8:	79fa      	ldrb	r2, [r7, #7]
 800e8ca:	4906      	ldr	r1, [pc, #24]	@ (800e8e4 <disk_ioctl+0x38>)
 800e8cc:	440a      	add	r2, r1
 800e8ce:	7a10      	ldrb	r0, [r2, #8]
 800e8d0:	79b9      	ldrb	r1, [r7, #6]
 800e8d2:	683a      	ldr	r2, [r7, #0]
 800e8d4:	4798      	blx	r3
 800e8d6:	4603      	mov	r3, r0
 800e8d8:	73fb      	strb	r3, [r7, #15]
  return res;
 800e8da:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8dc:	4618      	mov	r0, r3
 800e8de:	3710      	adds	r7, #16
 800e8e0:	46bd      	mov	sp, r7
 800e8e2:	bd80      	pop	{r7, pc}
 800e8e4:	20035f6c 	.word	0x20035f6c

0800e8e8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800e8e8:	b480      	push	{r7}
 800e8ea:	b085      	sub	sp, #20
 800e8ec:	af00      	add	r7, sp, #0
 800e8ee:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	3301      	adds	r3, #1
 800e8f4:	781b      	ldrb	r3, [r3, #0]
 800e8f6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800e8f8:	89fb      	ldrh	r3, [r7, #14]
 800e8fa:	021b      	lsls	r3, r3, #8
 800e8fc:	b21a      	sxth	r2, r3
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	781b      	ldrb	r3, [r3, #0]
 800e902:	b21b      	sxth	r3, r3
 800e904:	4313      	orrs	r3, r2
 800e906:	b21b      	sxth	r3, r3
 800e908:	81fb      	strh	r3, [r7, #14]
	return rv;
 800e90a:	89fb      	ldrh	r3, [r7, #14]
}
 800e90c:	4618      	mov	r0, r3
 800e90e:	3714      	adds	r7, #20
 800e910:	46bd      	mov	sp, r7
 800e912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e916:	4770      	bx	lr

0800e918 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800e918:	b480      	push	{r7}
 800e91a:	b085      	sub	sp, #20
 800e91c:	af00      	add	r7, sp, #0
 800e91e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	3303      	adds	r3, #3
 800e924:	781b      	ldrb	r3, [r3, #0]
 800e926:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	021b      	lsls	r3, r3, #8
 800e92c:	687a      	ldr	r2, [r7, #4]
 800e92e:	3202      	adds	r2, #2
 800e930:	7812      	ldrb	r2, [r2, #0]
 800e932:	4313      	orrs	r3, r2
 800e934:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	021b      	lsls	r3, r3, #8
 800e93a:	687a      	ldr	r2, [r7, #4]
 800e93c:	3201      	adds	r2, #1
 800e93e:	7812      	ldrb	r2, [r2, #0]
 800e940:	4313      	orrs	r3, r2
 800e942:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	021b      	lsls	r3, r3, #8
 800e948:	687a      	ldr	r2, [r7, #4]
 800e94a:	7812      	ldrb	r2, [r2, #0]
 800e94c:	4313      	orrs	r3, r2
 800e94e:	60fb      	str	r3, [r7, #12]
	return rv;
 800e950:	68fb      	ldr	r3, [r7, #12]
}
 800e952:	4618      	mov	r0, r3
 800e954:	3714      	adds	r7, #20
 800e956:	46bd      	mov	sp, r7
 800e958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e95c:	4770      	bx	lr

0800e95e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800e95e:	b480      	push	{r7}
 800e960:	b083      	sub	sp, #12
 800e962:	af00      	add	r7, sp, #0
 800e964:	6078      	str	r0, [r7, #4]
 800e966:	460b      	mov	r3, r1
 800e968:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	1c5a      	adds	r2, r3, #1
 800e96e:	607a      	str	r2, [r7, #4]
 800e970:	887a      	ldrh	r2, [r7, #2]
 800e972:	b2d2      	uxtb	r2, r2
 800e974:	701a      	strb	r2, [r3, #0]
 800e976:	887b      	ldrh	r3, [r7, #2]
 800e978:	0a1b      	lsrs	r3, r3, #8
 800e97a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	1c5a      	adds	r2, r3, #1
 800e980:	607a      	str	r2, [r7, #4]
 800e982:	887a      	ldrh	r2, [r7, #2]
 800e984:	b2d2      	uxtb	r2, r2
 800e986:	701a      	strb	r2, [r3, #0]
}
 800e988:	bf00      	nop
 800e98a:	370c      	adds	r7, #12
 800e98c:	46bd      	mov	sp, r7
 800e98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e992:	4770      	bx	lr

0800e994 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800e994:	b480      	push	{r7}
 800e996:	b083      	sub	sp, #12
 800e998:	af00      	add	r7, sp, #0
 800e99a:	6078      	str	r0, [r7, #4]
 800e99c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	1c5a      	adds	r2, r3, #1
 800e9a2:	607a      	str	r2, [r7, #4]
 800e9a4:	683a      	ldr	r2, [r7, #0]
 800e9a6:	b2d2      	uxtb	r2, r2
 800e9a8:	701a      	strb	r2, [r3, #0]
 800e9aa:	683b      	ldr	r3, [r7, #0]
 800e9ac:	0a1b      	lsrs	r3, r3, #8
 800e9ae:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	1c5a      	adds	r2, r3, #1
 800e9b4:	607a      	str	r2, [r7, #4]
 800e9b6:	683a      	ldr	r2, [r7, #0]
 800e9b8:	b2d2      	uxtb	r2, r2
 800e9ba:	701a      	strb	r2, [r3, #0]
 800e9bc:	683b      	ldr	r3, [r7, #0]
 800e9be:	0a1b      	lsrs	r3, r3, #8
 800e9c0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	1c5a      	adds	r2, r3, #1
 800e9c6:	607a      	str	r2, [r7, #4]
 800e9c8:	683a      	ldr	r2, [r7, #0]
 800e9ca:	b2d2      	uxtb	r2, r2
 800e9cc:	701a      	strb	r2, [r3, #0]
 800e9ce:	683b      	ldr	r3, [r7, #0]
 800e9d0:	0a1b      	lsrs	r3, r3, #8
 800e9d2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	1c5a      	adds	r2, r3, #1
 800e9d8:	607a      	str	r2, [r7, #4]
 800e9da:	683a      	ldr	r2, [r7, #0]
 800e9dc:	b2d2      	uxtb	r2, r2
 800e9de:	701a      	strb	r2, [r3, #0]
}
 800e9e0:	bf00      	nop
 800e9e2:	370c      	adds	r7, #12
 800e9e4:	46bd      	mov	sp, r7
 800e9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ea:	4770      	bx	lr

0800e9ec <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800e9ec:	b480      	push	{r7}
 800e9ee:	b087      	sub	sp, #28
 800e9f0:	af00      	add	r7, sp, #0
 800e9f2:	60f8      	str	r0, [r7, #12]
 800e9f4:	60b9      	str	r1, [r7, #8]
 800e9f6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800e9fc:	68bb      	ldr	r3, [r7, #8]
 800e9fe:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d00d      	beq.n	800ea22 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800ea06:	693a      	ldr	r2, [r7, #16]
 800ea08:	1c53      	adds	r3, r2, #1
 800ea0a:	613b      	str	r3, [r7, #16]
 800ea0c:	697b      	ldr	r3, [r7, #20]
 800ea0e:	1c59      	adds	r1, r3, #1
 800ea10:	6179      	str	r1, [r7, #20]
 800ea12:	7812      	ldrb	r2, [r2, #0]
 800ea14:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	3b01      	subs	r3, #1
 800ea1a:	607b      	str	r3, [r7, #4]
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d1f1      	bne.n	800ea06 <mem_cpy+0x1a>
	}
}
 800ea22:	bf00      	nop
 800ea24:	371c      	adds	r7, #28
 800ea26:	46bd      	mov	sp, r7
 800ea28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea2c:	4770      	bx	lr

0800ea2e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800ea2e:	b480      	push	{r7}
 800ea30:	b087      	sub	sp, #28
 800ea32:	af00      	add	r7, sp, #0
 800ea34:	60f8      	str	r0, [r7, #12]
 800ea36:	60b9      	str	r1, [r7, #8]
 800ea38:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800ea3e:	697b      	ldr	r3, [r7, #20]
 800ea40:	1c5a      	adds	r2, r3, #1
 800ea42:	617a      	str	r2, [r7, #20]
 800ea44:	68ba      	ldr	r2, [r7, #8]
 800ea46:	b2d2      	uxtb	r2, r2
 800ea48:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	3b01      	subs	r3, #1
 800ea4e:	607b      	str	r3, [r7, #4]
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d1f3      	bne.n	800ea3e <mem_set+0x10>
}
 800ea56:	bf00      	nop
 800ea58:	bf00      	nop
 800ea5a:	371c      	adds	r7, #28
 800ea5c:	46bd      	mov	sp, r7
 800ea5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea62:	4770      	bx	lr

0800ea64 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800ea64:	b480      	push	{r7}
 800ea66:	b089      	sub	sp, #36	@ 0x24
 800ea68:	af00      	add	r7, sp, #0
 800ea6a:	60f8      	str	r0, [r7, #12]
 800ea6c:	60b9      	str	r1, [r7, #8]
 800ea6e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	61fb      	str	r3, [r7, #28]
 800ea74:	68bb      	ldr	r3, [r7, #8]
 800ea76:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800ea78:	2300      	movs	r3, #0
 800ea7a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800ea7c:	69fb      	ldr	r3, [r7, #28]
 800ea7e:	1c5a      	adds	r2, r3, #1
 800ea80:	61fa      	str	r2, [r7, #28]
 800ea82:	781b      	ldrb	r3, [r3, #0]
 800ea84:	4619      	mov	r1, r3
 800ea86:	69bb      	ldr	r3, [r7, #24]
 800ea88:	1c5a      	adds	r2, r3, #1
 800ea8a:	61ba      	str	r2, [r7, #24]
 800ea8c:	781b      	ldrb	r3, [r3, #0]
 800ea8e:	1acb      	subs	r3, r1, r3
 800ea90:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	3b01      	subs	r3, #1
 800ea96:	607b      	str	r3, [r7, #4]
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d002      	beq.n	800eaa4 <mem_cmp+0x40>
 800ea9e:	697b      	ldr	r3, [r7, #20]
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d0eb      	beq.n	800ea7c <mem_cmp+0x18>

	return r;
 800eaa4:	697b      	ldr	r3, [r7, #20]
}
 800eaa6:	4618      	mov	r0, r3
 800eaa8:	3724      	adds	r7, #36	@ 0x24
 800eaaa:	46bd      	mov	sp, r7
 800eaac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab0:	4770      	bx	lr

0800eab2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800eab2:	b480      	push	{r7}
 800eab4:	b083      	sub	sp, #12
 800eab6:	af00      	add	r7, sp, #0
 800eab8:	6078      	str	r0, [r7, #4]
 800eaba:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800eabc:	e002      	b.n	800eac4 <chk_chr+0x12>
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	3301      	adds	r3, #1
 800eac2:	607b      	str	r3, [r7, #4]
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	781b      	ldrb	r3, [r3, #0]
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d005      	beq.n	800ead8 <chk_chr+0x26>
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	781b      	ldrb	r3, [r3, #0]
 800ead0:	461a      	mov	r2, r3
 800ead2:	683b      	ldr	r3, [r7, #0]
 800ead4:	4293      	cmp	r3, r2
 800ead6:	d1f2      	bne.n	800eabe <chk_chr+0xc>
	return *str;
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	781b      	ldrb	r3, [r3, #0]
}
 800eadc:	4618      	mov	r0, r3
 800eade:	370c      	adds	r7, #12
 800eae0:	46bd      	mov	sp, r7
 800eae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae6:	4770      	bx	lr

0800eae8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800eae8:	b480      	push	{r7}
 800eaea:	b085      	sub	sp, #20
 800eaec:	af00      	add	r7, sp, #0
 800eaee:	6078      	str	r0, [r7, #4]
 800eaf0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800eaf2:	2300      	movs	r3, #0
 800eaf4:	60bb      	str	r3, [r7, #8]
 800eaf6:	68bb      	ldr	r3, [r7, #8]
 800eaf8:	60fb      	str	r3, [r7, #12]
 800eafa:	e029      	b.n	800eb50 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800eafc:	4a27      	ldr	r2, [pc, #156]	@ (800eb9c <chk_lock+0xb4>)
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	011b      	lsls	r3, r3, #4
 800eb02:	4413      	add	r3, r2
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d01d      	beq.n	800eb46 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800eb0a:	4a24      	ldr	r2, [pc, #144]	@ (800eb9c <chk_lock+0xb4>)
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	011b      	lsls	r3, r3, #4
 800eb10:	4413      	add	r3, r2
 800eb12:	681a      	ldr	r2, [r3, #0]
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	429a      	cmp	r2, r3
 800eb1a:	d116      	bne.n	800eb4a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800eb1c:	4a1f      	ldr	r2, [pc, #124]	@ (800eb9c <chk_lock+0xb4>)
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	011b      	lsls	r3, r3, #4
 800eb22:	4413      	add	r3, r2
 800eb24:	3304      	adds	r3, #4
 800eb26:	681a      	ldr	r2, [r3, #0]
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800eb2c:	429a      	cmp	r2, r3
 800eb2e:	d10c      	bne.n	800eb4a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800eb30:	4a1a      	ldr	r2, [pc, #104]	@ (800eb9c <chk_lock+0xb4>)
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	011b      	lsls	r3, r3, #4
 800eb36:	4413      	add	r3, r2
 800eb38:	3308      	adds	r3, #8
 800eb3a:	681a      	ldr	r2, [r3, #0]
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800eb40:	429a      	cmp	r2, r3
 800eb42:	d102      	bne.n	800eb4a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800eb44:	e007      	b.n	800eb56 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800eb46:	2301      	movs	r3, #1
 800eb48:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	3301      	adds	r3, #1
 800eb4e:	60fb      	str	r3, [r7, #12]
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	2b01      	cmp	r3, #1
 800eb54:	d9d2      	bls.n	800eafc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	2b02      	cmp	r3, #2
 800eb5a:	d109      	bne.n	800eb70 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800eb5c:	68bb      	ldr	r3, [r7, #8]
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d102      	bne.n	800eb68 <chk_lock+0x80>
 800eb62:	683b      	ldr	r3, [r7, #0]
 800eb64:	2b02      	cmp	r3, #2
 800eb66:	d101      	bne.n	800eb6c <chk_lock+0x84>
 800eb68:	2300      	movs	r3, #0
 800eb6a:	e010      	b.n	800eb8e <chk_lock+0xa6>
 800eb6c:	2312      	movs	r3, #18
 800eb6e:	e00e      	b.n	800eb8e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800eb70:	683b      	ldr	r3, [r7, #0]
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d108      	bne.n	800eb88 <chk_lock+0xa0>
 800eb76:	4a09      	ldr	r2, [pc, #36]	@ (800eb9c <chk_lock+0xb4>)
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	011b      	lsls	r3, r3, #4
 800eb7c:	4413      	add	r3, r2
 800eb7e:	330c      	adds	r3, #12
 800eb80:	881b      	ldrh	r3, [r3, #0]
 800eb82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800eb86:	d101      	bne.n	800eb8c <chk_lock+0xa4>
 800eb88:	2310      	movs	r3, #16
 800eb8a:	e000      	b.n	800eb8e <chk_lock+0xa6>
 800eb8c:	2300      	movs	r3, #0
}
 800eb8e:	4618      	mov	r0, r3
 800eb90:	3714      	adds	r7, #20
 800eb92:	46bd      	mov	sp, r7
 800eb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb98:	4770      	bx	lr
 800eb9a:	bf00      	nop
 800eb9c:	20035f4c 	.word	0x20035f4c

0800eba0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800eba0:	b480      	push	{r7}
 800eba2:	b083      	sub	sp, #12
 800eba4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800eba6:	2300      	movs	r3, #0
 800eba8:	607b      	str	r3, [r7, #4]
 800ebaa:	e002      	b.n	800ebb2 <enq_lock+0x12>
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	3301      	adds	r3, #1
 800ebb0:	607b      	str	r3, [r7, #4]
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	2b01      	cmp	r3, #1
 800ebb6:	d806      	bhi.n	800ebc6 <enq_lock+0x26>
 800ebb8:	4a09      	ldr	r2, [pc, #36]	@ (800ebe0 <enq_lock+0x40>)
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	011b      	lsls	r3, r3, #4
 800ebbe:	4413      	add	r3, r2
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d1f2      	bne.n	800ebac <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	2b02      	cmp	r3, #2
 800ebca:	bf14      	ite	ne
 800ebcc:	2301      	movne	r3, #1
 800ebce:	2300      	moveq	r3, #0
 800ebd0:	b2db      	uxtb	r3, r3
}
 800ebd2:	4618      	mov	r0, r3
 800ebd4:	370c      	adds	r7, #12
 800ebd6:	46bd      	mov	sp, r7
 800ebd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebdc:	4770      	bx	lr
 800ebde:	bf00      	nop
 800ebe0:	20035f4c 	.word	0x20035f4c

0800ebe4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ebe4:	b480      	push	{r7}
 800ebe6:	b085      	sub	sp, #20
 800ebe8:	af00      	add	r7, sp, #0
 800ebea:	6078      	str	r0, [r7, #4]
 800ebec:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ebee:	2300      	movs	r3, #0
 800ebf0:	60fb      	str	r3, [r7, #12]
 800ebf2:	e01f      	b.n	800ec34 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800ebf4:	4a41      	ldr	r2, [pc, #260]	@ (800ecfc <inc_lock+0x118>)
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	011b      	lsls	r3, r3, #4
 800ebfa:	4413      	add	r3, r2
 800ebfc:	681a      	ldr	r2, [r3, #0]
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	429a      	cmp	r2, r3
 800ec04:	d113      	bne.n	800ec2e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800ec06:	4a3d      	ldr	r2, [pc, #244]	@ (800ecfc <inc_lock+0x118>)
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	011b      	lsls	r3, r3, #4
 800ec0c:	4413      	add	r3, r2
 800ec0e:	3304      	adds	r3, #4
 800ec10:	681a      	ldr	r2, [r3, #0]
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800ec16:	429a      	cmp	r2, r3
 800ec18:	d109      	bne.n	800ec2e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800ec1a:	4a38      	ldr	r2, [pc, #224]	@ (800ecfc <inc_lock+0x118>)
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	011b      	lsls	r3, r3, #4
 800ec20:	4413      	add	r3, r2
 800ec22:	3308      	adds	r3, #8
 800ec24:	681a      	ldr	r2, [r3, #0]
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800ec2a:	429a      	cmp	r2, r3
 800ec2c:	d006      	beq.n	800ec3c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	3301      	adds	r3, #1
 800ec32:	60fb      	str	r3, [r7, #12]
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	2b01      	cmp	r3, #1
 800ec38:	d9dc      	bls.n	800ebf4 <inc_lock+0x10>
 800ec3a:	e000      	b.n	800ec3e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800ec3c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	2b02      	cmp	r3, #2
 800ec42:	d132      	bne.n	800ecaa <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ec44:	2300      	movs	r3, #0
 800ec46:	60fb      	str	r3, [r7, #12]
 800ec48:	e002      	b.n	800ec50 <inc_lock+0x6c>
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	3301      	adds	r3, #1
 800ec4e:	60fb      	str	r3, [r7, #12]
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	2b01      	cmp	r3, #1
 800ec54:	d806      	bhi.n	800ec64 <inc_lock+0x80>
 800ec56:	4a29      	ldr	r2, [pc, #164]	@ (800ecfc <inc_lock+0x118>)
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	011b      	lsls	r3, r3, #4
 800ec5c:	4413      	add	r3, r2
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d1f2      	bne.n	800ec4a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	2b02      	cmp	r3, #2
 800ec68:	d101      	bne.n	800ec6e <inc_lock+0x8a>
 800ec6a:	2300      	movs	r3, #0
 800ec6c:	e040      	b.n	800ecf0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	681a      	ldr	r2, [r3, #0]
 800ec72:	4922      	ldr	r1, [pc, #136]	@ (800ecfc <inc_lock+0x118>)
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	011b      	lsls	r3, r3, #4
 800ec78:	440b      	add	r3, r1
 800ec7a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	689a      	ldr	r2, [r3, #8]
 800ec80:	491e      	ldr	r1, [pc, #120]	@ (800ecfc <inc_lock+0x118>)
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	011b      	lsls	r3, r3, #4
 800ec86:	440b      	add	r3, r1
 800ec88:	3304      	adds	r3, #4
 800ec8a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	695a      	ldr	r2, [r3, #20]
 800ec90:	491a      	ldr	r1, [pc, #104]	@ (800ecfc <inc_lock+0x118>)
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	011b      	lsls	r3, r3, #4
 800ec96:	440b      	add	r3, r1
 800ec98:	3308      	adds	r3, #8
 800ec9a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800ec9c:	4a17      	ldr	r2, [pc, #92]	@ (800ecfc <inc_lock+0x118>)
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	011b      	lsls	r3, r3, #4
 800eca2:	4413      	add	r3, r2
 800eca4:	330c      	adds	r3, #12
 800eca6:	2200      	movs	r2, #0
 800eca8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800ecaa:	683b      	ldr	r3, [r7, #0]
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d009      	beq.n	800ecc4 <inc_lock+0xe0>
 800ecb0:	4a12      	ldr	r2, [pc, #72]	@ (800ecfc <inc_lock+0x118>)
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	011b      	lsls	r3, r3, #4
 800ecb6:	4413      	add	r3, r2
 800ecb8:	330c      	adds	r3, #12
 800ecba:	881b      	ldrh	r3, [r3, #0]
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d001      	beq.n	800ecc4 <inc_lock+0xe0>
 800ecc0:	2300      	movs	r3, #0
 800ecc2:	e015      	b.n	800ecf0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800ecc4:	683b      	ldr	r3, [r7, #0]
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d108      	bne.n	800ecdc <inc_lock+0xf8>
 800ecca:	4a0c      	ldr	r2, [pc, #48]	@ (800ecfc <inc_lock+0x118>)
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	011b      	lsls	r3, r3, #4
 800ecd0:	4413      	add	r3, r2
 800ecd2:	330c      	adds	r3, #12
 800ecd4:	881b      	ldrh	r3, [r3, #0]
 800ecd6:	3301      	adds	r3, #1
 800ecd8:	b29a      	uxth	r2, r3
 800ecda:	e001      	b.n	800ece0 <inc_lock+0xfc>
 800ecdc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ece0:	4906      	ldr	r1, [pc, #24]	@ (800ecfc <inc_lock+0x118>)
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	011b      	lsls	r3, r3, #4
 800ece6:	440b      	add	r3, r1
 800ece8:	330c      	adds	r3, #12
 800ecea:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	3301      	adds	r3, #1
}
 800ecf0:	4618      	mov	r0, r3
 800ecf2:	3714      	adds	r7, #20
 800ecf4:	46bd      	mov	sp, r7
 800ecf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecfa:	4770      	bx	lr
 800ecfc:	20035f4c 	.word	0x20035f4c

0800ed00 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800ed00:	b480      	push	{r7}
 800ed02:	b085      	sub	sp, #20
 800ed04:	af00      	add	r7, sp, #0
 800ed06:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	3b01      	subs	r3, #1
 800ed0c:	607b      	str	r3, [r7, #4]
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	2b01      	cmp	r3, #1
 800ed12:	d825      	bhi.n	800ed60 <dec_lock+0x60>
		n = Files[i].ctr;
 800ed14:	4a17      	ldr	r2, [pc, #92]	@ (800ed74 <dec_lock+0x74>)
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	011b      	lsls	r3, r3, #4
 800ed1a:	4413      	add	r3, r2
 800ed1c:	330c      	adds	r3, #12
 800ed1e:	881b      	ldrh	r3, [r3, #0]
 800ed20:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800ed22:	89fb      	ldrh	r3, [r7, #14]
 800ed24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ed28:	d101      	bne.n	800ed2e <dec_lock+0x2e>
 800ed2a:	2300      	movs	r3, #0
 800ed2c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800ed2e:	89fb      	ldrh	r3, [r7, #14]
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d002      	beq.n	800ed3a <dec_lock+0x3a>
 800ed34:	89fb      	ldrh	r3, [r7, #14]
 800ed36:	3b01      	subs	r3, #1
 800ed38:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800ed3a:	4a0e      	ldr	r2, [pc, #56]	@ (800ed74 <dec_lock+0x74>)
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	011b      	lsls	r3, r3, #4
 800ed40:	4413      	add	r3, r2
 800ed42:	330c      	adds	r3, #12
 800ed44:	89fa      	ldrh	r2, [r7, #14]
 800ed46:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800ed48:	89fb      	ldrh	r3, [r7, #14]
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d105      	bne.n	800ed5a <dec_lock+0x5a>
 800ed4e:	4a09      	ldr	r2, [pc, #36]	@ (800ed74 <dec_lock+0x74>)
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	011b      	lsls	r3, r3, #4
 800ed54:	4413      	add	r3, r2
 800ed56:	2200      	movs	r2, #0
 800ed58:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800ed5a:	2300      	movs	r3, #0
 800ed5c:	737b      	strb	r3, [r7, #13]
 800ed5e:	e001      	b.n	800ed64 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800ed60:	2302      	movs	r3, #2
 800ed62:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800ed64:	7b7b      	ldrb	r3, [r7, #13]
}
 800ed66:	4618      	mov	r0, r3
 800ed68:	3714      	adds	r7, #20
 800ed6a:	46bd      	mov	sp, r7
 800ed6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed70:	4770      	bx	lr
 800ed72:	bf00      	nop
 800ed74:	20035f4c 	.word	0x20035f4c

0800ed78 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800ed78:	b480      	push	{r7}
 800ed7a:	b085      	sub	sp, #20
 800ed7c:	af00      	add	r7, sp, #0
 800ed7e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800ed80:	2300      	movs	r3, #0
 800ed82:	60fb      	str	r3, [r7, #12]
 800ed84:	e010      	b.n	800eda8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ed86:	4a0d      	ldr	r2, [pc, #52]	@ (800edbc <clear_lock+0x44>)
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	011b      	lsls	r3, r3, #4
 800ed8c:	4413      	add	r3, r2
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	687a      	ldr	r2, [r7, #4]
 800ed92:	429a      	cmp	r2, r3
 800ed94:	d105      	bne.n	800eda2 <clear_lock+0x2a>
 800ed96:	4a09      	ldr	r2, [pc, #36]	@ (800edbc <clear_lock+0x44>)
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	011b      	lsls	r3, r3, #4
 800ed9c:	4413      	add	r3, r2
 800ed9e:	2200      	movs	r2, #0
 800eda0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	3301      	adds	r3, #1
 800eda6:	60fb      	str	r3, [r7, #12]
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	2b01      	cmp	r3, #1
 800edac:	d9eb      	bls.n	800ed86 <clear_lock+0xe>
	}
}
 800edae:	bf00      	nop
 800edb0:	bf00      	nop
 800edb2:	3714      	adds	r7, #20
 800edb4:	46bd      	mov	sp, r7
 800edb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edba:	4770      	bx	lr
 800edbc:	20035f4c 	.word	0x20035f4c

0800edc0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800edc0:	b580      	push	{r7, lr}
 800edc2:	b086      	sub	sp, #24
 800edc4:	af00      	add	r7, sp, #0
 800edc6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800edc8:	2300      	movs	r3, #0
 800edca:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	78db      	ldrb	r3, [r3, #3]
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d034      	beq.n	800ee3e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800edd8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	7858      	ldrb	r0, [r3, #1]
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ede4:	2301      	movs	r3, #1
 800ede6:	697a      	ldr	r2, [r7, #20]
 800ede8:	f7ff fd40 	bl	800e86c <disk_write>
 800edec:	4603      	mov	r3, r0
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d002      	beq.n	800edf8 <sync_window+0x38>
			res = FR_DISK_ERR;
 800edf2:	2301      	movs	r3, #1
 800edf4:	73fb      	strb	r3, [r7, #15]
 800edf6:	e022      	b.n	800ee3e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	2200      	movs	r2, #0
 800edfc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	6a1b      	ldr	r3, [r3, #32]
 800ee02:	697a      	ldr	r2, [r7, #20]
 800ee04:	1ad2      	subs	r2, r2, r3
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	699b      	ldr	r3, [r3, #24]
 800ee0a:	429a      	cmp	r2, r3
 800ee0c:	d217      	bcs.n	800ee3e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	789b      	ldrb	r3, [r3, #2]
 800ee12:	613b      	str	r3, [r7, #16]
 800ee14:	e010      	b.n	800ee38 <sync_window+0x78>
					wsect += fs->fsize;
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	699b      	ldr	r3, [r3, #24]
 800ee1a:	697a      	ldr	r2, [r7, #20]
 800ee1c:	4413      	add	r3, r2
 800ee1e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	7858      	ldrb	r0, [r3, #1]
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ee2a:	2301      	movs	r3, #1
 800ee2c:	697a      	ldr	r2, [r7, #20]
 800ee2e:	f7ff fd1d 	bl	800e86c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ee32:	693b      	ldr	r3, [r7, #16]
 800ee34:	3b01      	subs	r3, #1
 800ee36:	613b      	str	r3, [r7, #16]
 800ee38:	693b      	ldr	r3, [r7, #16]
 800ee3a:	2b01      	cmp	r3, #1
 800ee3c:	d8eb      	bhi.n	800ee16 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800ee3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee40:	4618      	mov	r0, r3
 800ee42:	3718      	adds	r7, #24
 800ee44:	46bd      	mov	sp, r7
 800ee46:	bd80      	pop	{r7, pc}

0800ee48 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800ee48:	b580      	push	{r7, lr}
 800ee4a:	b084      	sub	sp, #16
 800ee4c:	af00      	add	r7, sp, #0
 800ee4e:	6078      	str	r0, [r7, #4]
 800ee50:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800ee52:	2300      	movs	r3, #0
 800ee54:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee5a:	683a      	ldr	r2, [r7, #0]
 800ee5c:	429a      	cmp	r2, r3
 800ee5e:	d01b      	beq.n	800ee98 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800ee60:	6878      	ldr	r0, [r7, #4]
 800ee62:	f7ff ffad 	bl	800edc0 <sync_window>
 800ee66:	4603      	mov	r3, r0
 800ee68:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800ee6a:	7bfb      	ldrb	r3, [r7, #15]
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d113      	bne.n	800ee98 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	7858      	ldrb	r0, [r3, #1]
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ee7a:	2301      	movs	r3, #1
 800ee7c:	683a      	ldr	r2, [r7, #0]
 800ee7e:	f7ff fcd5 	bl	800e82c <disk_read>
 800ee82:	4603      	mov	r3, r0
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d004      	beq.n	800ee92 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800ee88:	f04f 33ff 	mov.w	r3, #4294967295
 800ee8c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800ee8e:	2301      	movs	r3, #1
 800ee90:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	683a      	ldr	r2, [r7, #0]
 800ee96:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800ee98:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee9a:	4618      	mov	r0, r3
 800ee9c:	3710      	adds	r7, #16
 800ee9e:	46bd      	mov	sp, r7
 800eea0:	bd80      	pop	{r7, pc}
	...

0800eea4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800eea4:	b580      	push	{r7, lr}
 800eea6:	b084      	sub	sp, #16
 800eea8:	af00      	add	r7, sp, #0
 800eeaa:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800eeac:	6878      	ldr	r0, [r7, #4]
 800eeae:	f7ff ff87 	bl	800edc0 <sync_window>
 800eeb2:	4603      	mov	r3, r0
 800eeb4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800eeb6:	7bfb      	ldrb	r3, [r7, #15]
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d158      	bne.n	800ef6e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	781b      	ldrb	r3, [r3, #0]
 800eec0:	2b03      	cmp	r3, #3
 800eec2:	d148      	bne.n	800ef56 <sync_fs+0xb2>
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	791b      	ldrb	r3, [r3, #4]
 800eec8:	2b01      	cmp	r3, #1
 800eeca:	d144      	bne.n	800ef56 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	3330      	adds	r3, #48	@ 0x30
 800eed0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800eed4:	2100      	movs	r1, #0
 800eed6:	4618      	mov	r0, r3
 800eed8:	f7ff fda9 	bl	800ea2e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	3330      	adds	r3, #48	@ 0x30
 800eee0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800eee4:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800eee8:	4618      	mov	r0, r3
 800eeea:	f7ff fd38 	bl	800e95e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	3330      	adds	r3, #48	@ 0x30
 800eef2:	4921      	ldr	r1, [pc, #132]	@ (800ef78 <sync_fs+0xd4>)
 800eef4:	4618      	mov	r0, r3
 800eef6:	f7ff fd4d 	bl	800e994 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	3330      	adds	r3, #48	@ 0x30
 800eefe:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800ef02:	491e      	ldr	r1, [pc, #120]	@ (800ef7c <sync_fs+0xd8>)
 800ef04:	4618      	mov	r0, r3
 800ef06:	f7ff fd45 	bl	800e994 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	3330      	adds	r3, #48	@ 0x30
 800ef0e:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	691b      	ldr	r3, [r3, #16]
 800ef16:	4619      	mov	r1, r3
 800ef18:	4610      	mov	r0, r2
 800ef1a:	f7ff fd3b 	bl	800e994 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	3330      	adds	r3, #48	@ 0x30
 800ef22:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	68db      	ldr	r3, [r3, #12]
 800ef2a:	4619      	mov	r1, r3
 800ef2c:	4610      	mov	r0, r2
 800ef2e:	f7ff fd31 	bl	800e994 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	69db      	ldr	r3, [r3, #28]
 800ef36:	1c5a      	adds	r2, r3, #1
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	7858      	ldrb	r0, [r3, #1]
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ef4a:	2301      	movs	r3, #1
 800ef4c:	f7ff fc8e 	bl	800e86c <disk_write>
			fs->fsi_flag = 0;
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	2200      	movs	r2, #0
 800ef54:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	785b      	ldrb	r3, [r3, #1]
 800ef5a:	2200      	movs	r2, #0
 800ef5c:	2100      	movs	r1, #0
 800ef5e:	4618      	mov	r0, r3
 800ef60:	f7ff fca4 	bl	800e8ac <disk_ioctl>
 800ef64:	4603      	mov	r3, r0
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d001      	beq.n	800ef6e <sync_fs+0xca>
 800ef6a:	2301      	movs	r3, #1
 800ef6c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800ef6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef70:	4618      	mov	r0, r3
 800ef72:	3710      	adds	r7, #16
 800ef74:	46bd      	mov	sp, r7
 800ef76:	bd80      	pop	{r7, pc}
 800ef78:	41615252 	.word	0x41615252
 800ef7c:	61417272 	.word	0x61417272

0800ef80 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800ef80:	b480      	push	{r7}
 800ef82:	b083      	sub	sp, #12
 800ef84:	af00      	add	r7, sp, #0
 800ef86:	6078      	str	r0, [r7, #4]
 800ef88:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800ef8a:	683b      	ldr	r3, [r7, #0]
 800ef8c:	3b02      	subs	r3, #2
 800ef8e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	695b      	ldr	r3, [r3, #20]
 800ef94:	3b02      	subs	r3, #2
 800ef96:	683a      	ldr	r2, [r7, #0]
 800ef98:	429a      	cmp	r2, r3
 800ef9a:	d301      	bcc.n	800efa0 <clust2sect+0x20>
 800ef9c:	2300      	movs	r3, #0
 800ef9e:	e008      	b.n	800efb2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	895b      	ldrh	r3, [r3, #10]
 800efa4:	461a      	mov	r2, r3
 800efa6:	683b      	ldr	r3, [r7, #0]
 800efa8:	fb03 f202 	mul.w	r2, r3, r2
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800efb0:	4413      	add	r3, r2
}
 800efb2:	4618      	mov	r0, r3
 800efb4:	370c      	adds	r7, #12
 800efb6:	46bd      	mov	sp, r7
 800efb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efbc:	4770      	bx	lr

0800efbe <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800efbe:	b580      	push	{r7, lr}
 800efc0:	b086      	sub	sp, #24
 800efc2:	af00      	add	r7, sp, #0
 800efc4:	6078      	str	r0, [r7, #4]
 800efc6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800efce:	683b      	ldr	r3, [r7, #0]
 800efd0:	2b01      	cmp	r3, #1
 800efd2:	d904      	bls.n	800efde <get_fat+0x20>
 800efd4:	693b      	ldr	r3, [r7, #16]
 800efd6:	695b      	ldr	r3, [r3, #20]
 800efd8:	683a      	ldr	r2, [r7, #0]
 800efda:	429a      	cmp	r2, r3
 800efdc:	d302      	bcc.n	800efe4 <get_fat+0x26>
		val = 1;	/* Internal error */
 800efde:	2301      	movs	r3, #1
 800efe0:	617b      	str	r3, [r7, #20]
 800efe2:	e08e      	b.n	800f102 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800efe4:	f04f 33ff 	mov.w	r3, #4294967295
 800efe8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800efea:	693b      	ldr	r3, [r7, #16]
 800efec:	781b      	ldrb	r3, [r3, #0]
 800efee:	2b03      	cmp	r3, #3
 800eff0:	d061      	beq.n	800f0b6 <get_fat+0xf8>
 800eff2:	2b03      	cmp	r3, #3
 800eff4:	dc7b      	bgt.n	800f0ee <get_fat+0x130>
 800eff6:	2b01      	cmp	r3, #1
 800eff8:	d002      	beq.n	800f000 <get_fat+0x42>
 800effa:	2b02      	cmp	r3, #2
 800effc:	d041      	beq.n	800f082 <get_fat+0xc4>
 800effe:	e076      	b.n	800f0ee <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800f000:	683b      	ldr	r3, [r7, #0]
 800f002:	60fb      	str	r3, [r7, #12]
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	085b      	lsrs	r3, r3, #1
 800f008:	68fa      	ldr	r2, [r7, #12]
 800f00a:	4413      	add	r3, r2
 800f00c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f00e:	693b      	ldr	r3, [r7, #16]
 800f010:	6a1a      	ldr	r2, [r3, #32]
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	0a5b      	lsrs	r3, r3, #9
 800f016:	4413      	add	r3, r2
 800f018:	4619      	mov	r1, r3
 800f01a:	6938      	ldr	r0, [r7, #16]
 800f01c:	f7ff ff14 	bl	800ee48 <move_window>
 800f020:	4603      	mov	r3, r0
 800f022:	2b00      	cmp	r3, #0
 800f024:	d166      	bne.n	800f0f4 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	1c5a      	adds	r2, r3, #1
 800f02a:	60fa      	str	r2, [r7, #12]
 800f02c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f030:	693a      	ldr	r2, [r7, #16]
 800f032:	4413      	add	r3, r2
 800f034:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f038:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f03a:	693b      	ldr	r3, [r7, #16]
 800f03c:	6a1a      	ldr	r2, [r3, #32]
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	0a5b      	lsrs	r3, r3, #9
 800f042:	4413      	add	r3, r2
 800f044:	4619      	mov	r1, r3
 800f046:	6938      	ldr	r0, [r7, #16]
 800f048:	f7ff fefe 	bl	800ee48 <move_window>
 800f04c:	4603      	mov	r3, r0
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d152      	bne.n	800f0f8 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f058:	693a      	ldr	r2, [r7, #16]
 800f05a:	4413      	add	r3, r2
 800f05c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f060:	021b      	lsls	r3, r3, #8
 800f062:	68ba      	ldr	r2, [r7, #8]
 800f064:	4313      	orrs	r3, r2
 800f066:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800f068:	683b      	ldr	r3, [r7, #0]
 800f06a:	f003 0301 	and.w	r3, r3, #1
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d002      	beq.n	800f078 <get_fat+0xba>
 800f072:	68bb      	ldr	r3, [r7, #8]
 800f074:	091b      	lsrs	r3, r3, #4
 800f076:	e002      	b.n	800f07e <get_fat+0xc0>
 800f078:	68bb      	ldr	r3, [r7, #8]
 800f07a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f07e:	617b      	str	r3, [r7, #20]
			break;
 800f080:	e03f      	b.n	800f102 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f082:	693b      	ldr	r3, [r7, #16]
 800f084:	6a1a      	ldr	r2, [r3, #32]
 800f086:	683b      	ldr	r3, [r7, #0]
 800f088:	0a1b      	lsrs	r3, r3, #8
 800f08a:	4413      	add	r3, r2
 800f08c:	4619      	mov	r1, r3
 800f08e:	6938      	ldr	r0, [r7, #16]
 800f090:	f7ff feda 	bl	800ee48 <move_window>
 800f094:	4603      	mov	r3, r0
 800f096:	2b00      	cmp	r3, #0
 800f098:	d130      	bne.n	800f0fc <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800f09a:	693b      	ldr	r3, [r7, #16]
 800f09c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800f0a0:	683b      	ldr	r3, [r7, #0]
 800f0a2:	005b      	lsls	r3, r3, #1
 800f0a4:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800f0a8:	4413      	add	r3, r2
 800f0aa:	4618      	mov	r0, r3
 800f0ac:	f7ff fc1c 	bl	800e8e8 <ld_word>
 800f0b0:	4603      	mov	r3, r0
 800f0b2:	617b      	str	r3, [r7, #20]
			break;
 800f0b4:	e025      	b.n	800f102 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f0b6:	693b      	ldr	r3, [r7, #16]
 800f0b8:	6a1a      	ldr	r2, [r3, #32]
 800f0ba:	683b      	ldr	r3, [r7, #0]
 800f0bc:	09db      	lsrs	r3, r3, #7
 800f0be:	4413      	add	r3, r2
 800f0c0:	4619      	mov	r1, r3
 800f0c2:	6938      	ldr	r0, [r7, #16]
 800f0c4:	f7ff fec0 	bl	800ee48 <move_window>
 800f0c8:	4603      	mov	r3, r0
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d118      	bne.n	800f100 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800f0ce:	693b      	ldr	r3, [r7, #16]
 800f0d0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800f0d4:	683b      	ldr	r3, [r7, #0]
 800f0d6:	009b      	lsls	r3, r3, #2
 800f0d8:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800f0dc:	4413      	add	r3, r2
 800f0de:	4618      	mov	r0, r3
 800f0e0:	f7ff fc1a 	bl	800e918 <ld_dword>
 800f0e4:	4603      	mov	r3, r0
 800f0e6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800f0ea:	617b      	str	r3, [r7, #20]
			break;
 800f0ec:	e009      	b.n	800f102 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800f0ee:	2301      	movs	r3, #1
 800f0f0:	617b      	str	r3, [r7, #20]
 800f0f2:	e006      	b.n	800f102 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f0f4:	bf00      	nop
 800f0f6:	e004      	b.n	800f102 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f0f8:	bf00      	nop
 800f0fa:	e002      	b.n	800f102 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f0fc:	bf00      	nop
 800f0fe:	e000      	b.n	800f102 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f100:	bf00      	nop
		}
	}

	return val;
 800f102:	697b      	ldr	r3, [r7, #20]
}
 800f104:	4618      	mov	r0, r3
 800f106:	3718      	adds	r7, #24
 800f108:	46bd      	mov	sp, r7
 800f10a:	bd80      	pop	{r7, pc}

0800f10c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800f10c:	b590      	push	{r4, r7, lr}
 800f10e:	b089      	sub	sp, #36	@ 0x24
 800f110:	af00      	add	r7, sp, #0
 800f112:	60f8      	str	r0, [r7, #12]
 800f114:	60b9      	str	r1, [r7, #8]
 800f116:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800f118:	2302      	movs	r3, #2
 800f11a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800f11c:	68bb      	ldr	r3, [r7, #8]
 800f11e:	2b01      	cmp	r3, #1
 800f120:	f240 80d9 	bls.w	800f2d6 <put_fat+0x1ca>
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	695b      	ldr	r3, [r3, #20]
 800f128:	68ba      	ldr	r2, [r7, #8]
 800f12a:	429a      	cmp	r2, r3
 800f12c:	f080 80d3 	bcs.w	800f2d6 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	781b      	ldrb	r3, [r3, #0]
 800f134:	2b03      	cmp	r3, #3
 800f136:	f000 8096 	beq.w	800f266 <put_fat+0x15a>
 800f13a:	2b03      	cmp	r3, #3
 800f13c:	f300 80cb 	bgt.w	800f2d6 <put_fat+0x1ca>
 800f140:	2b01      	cmp	r3, #1
 800f142:	d002      	beq.n	800f14a <put_fat+0x3e>
 800f144:	2b02      	cmp	r3, #2
 800f146:	d06e      	beq.n	800f226 <put_fat+0x11a>
 800f148:	e0c5      	b.n	800f2d6 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800f14a:	68bb      	ldr	r3, [r7, #8]
 800f14c:	61bb      	str	r3, [r7, #24]
 800f14e:	69bb      	ldr	r3, [r7, #24]
 800f150:	085b      	lsrs	r3, r3, #1
 800f152:	69ba      	ldr	r2, [r7, #24]
 800f154:	4413      	add	r3, r2
 800f156:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	6a1a      	ldr	r2, [r3, #32]
 800f15c:	69bb      	ldr	r3, [r7, #24]
 800f15e:	0a5b      	lsrs	r3, r3, #9
 800f160:	4413      	add	r3, r2
 800f162:	4619      	mov	r1, r3
 800f164:	68f8      	ldr	r0, [r7, #12]
 800f166:	f7ff fe6f 	bl	800ee48 <move_window>
 800f16a:	4603      	mov	r3, r0
 800f16c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f16e:	7ffb      	ldrb	r3, [r7, #31]
 800f170:	2b00      	cmp	r3, #0
 800f172:	f040 80a9 	bne.w	800f2c8 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800f17c:	69bb      	ldr	r3, [r7, #24]
 800f17e:	1c59      	adds	r1, r3, #1
 800f180:	61b9      	str	r1, [r7, #24]
 800f182:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f186:	4413      	add	r3, r2
 800f188:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800f18a:	68bb      	ldr	r3, [r7, #8]
 800f18c:	f003 0301 	and.w	r3, r3, #1
 800f190:	2b00      	cmp	r3, #0
 800f192:	d00d      	beq.n	800f1b0 <put_fat+0xa4>
 800f194:	697b      	ldr	r3, [r7, #20]
 800f196:	781b      	ldrb	r3, [r3, #0]
 800f198:	b25b      	sxtb	r3, r3
 800f19a:	f003 030f 	and.w	r3, r3, #15
 800f19e:	b25a      	sxtb	r2, r3
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	b2db      	uxtb	r3, r3
 800f1a4:	011b      	lsls	r3, r3, #4
 800f1a6:	b25b      	sxtb	r3, r3
 800f1a8:	4313      	orrs	r3, r2
 800f1aa:	b25b      	sxtb	r3, r3
 800f1ac:	b2db      	uxtb	r3, r3
 800f1ae:	e001      	b.n	800f1b4 <put_fat+0xa8>
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	b2db      	uxtb	r3, r3
 800f1b4:	697a      	ldr	r2, [r7, #20]
 800f1b6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	2201      	movs	r2, #1
 800f1bc:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	6a1a      	ldr	r2, [r3, #32]
 800f1c2:	69bb      	ldr	r3, [r7, #24]
 800f1c4:	0a5b      	lsrs	r3, r3, #9
 800f1c6:	4413      	add	r3, r2
 800f1c8:	4619      	mov	r1, r3
 800f1ca:	68f8      	ldr	r0, [r7, #12]
 800f1cc:	f7ff fe3c 	bl	800ee48 <move_window>
 800f1d0:	4603      	mov	r3, r0
 800f1d2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f1d4:	7ffb      	ldrb	r3, [r7, #31]
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d178      	bne.n	800f2cc <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800f1da:	68fb      	ldr	r3, [r7, #12]
 800f1dc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800f1e0:	69bb      	ldr	r3, [r7, #24]
 800f1e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f1e6:	4413      	add	r3, r2
 800f1e8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800f1ea:	68bb      	ldr	r3, [r7, #8]
 800f1ec:	f003 0301 	and.w	r3, r3, #1
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d003      	beq.n	800f1fc <put_fat+0xf0>
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	091b      	lsrs	r3, r3, #4
 800f1f8:	b2db      	uxtb	r3, r3
 800f1fa:	e00e      	b.n	800f21a <put_fat+0x10e>
 800f1fc:	697b      	ldr	r3, [r7, #20]
 800f1fe:	781b      	ldrb	r3, [r3, #0]
 800f200:	b25b      	sxtb	r3, r3
 800f202:	f023 030f 	bic.w	r3, r3, #15
 800f206:	b25a      	sxtb	r2, r3
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	0a1b      	lsrs	r3, r3, #8
 800f20c:	b25b      	sxtb	r3, r3
 800f20e:	f003 030f 	and.w	r3, r3, #15
 800f212:	b25b      	sxtb	r3, r3
 800f214:	4313      	orrs	r3, r2
 800f216:	b25b      	sxtb	r3, r3
 800f218:	b2db      	uxtb	r3, r3
 800f21a:	697a      	ldr	r2, [r7, #20]
 800f21c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	2201      	movs	r2, #1
 800f222:	70da      	strb	r2, [r3, #3]
			break;
 800f224:	e057      	b.n	800f2d6 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	6a1a      	ldr	r2, [r3, #32]
 800f22a:	68bb      	ldr	r3, [r7, #8]
 800f22c:	0a1b      	lsrs	r3, r3, #8
 800f22e:	4413      	add	r3, r2
 800f230:	4619      	mov	r1, r3
 800f232:	68f8      	ldr	r0, [r7, #12]
 800f234:	f7ff fe08 	bl	800ee48 <move_window>
 800f238:	4603      	mov	r3, r0
 800f23a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f23c:	7ffb      	ldrb	r3, [r7, #31]
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d146      	bne.n	800f2d0 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800f248:	68bb      	ldr	r3, [r7, #8]
 800f24a:	005b      	lsls	r3, r3, #1
 800f24c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800f250:	4413      	add	r3, r2
 800f252:	687a      	ldr	r2, [r7, #4]
 800f254:	b292      	uxth	r2, r2
 800f256:	4611      	mov	r1, r2
 800f258:	4618      	mov	r0, r3
 800f25a:	f7ff fb80 	bl	800e95e <st_word>
			fs->wflag = 1;
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	2201      	movs	r2, #1
 800f262:	70da      	strb	r2, [r3, #3]
			break;
 800f264:	e037      	b.n	800f2d6 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	6a1a      	ldr	r2, [r3, #32]
 800f26a:	68bb      	ldr	r3, [r7, #8]
 800f26c:	09db      	lsrs	r3, r3, #7
 800f26e:	4413      	add	r3, r2
 800f270:	4619      	mov	r1, r3
 800f272:	68f8      	ldr	r0, [r7, #12]
 800f274:	f7ff fde8 	bl	800ee48 <move_window>
 800f278:	4603      	mov	r3, r0
 800f27a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f27c:	7ffb      	ldrb	r3, [r7, #31]
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d128      	bne.n	800f2d4 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800f28e:	68bb      	ldr	r3, [r7, #8]
 800f290:	009b      	lsls	r3, r3, #2
 800f292:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800f296:	4413      	add	r3, r2
 800f298:	4618      	mov	r0, r3
 800f29a:	f7ff fb3d 	bl	800e918 <ld_dword>
 800f29e:	4603      	mov	r3, r0
 800f2a0:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800f2a4:	4323      	orrs	r3, r4
 800f2a6:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800f2ae:	68bb      	ldr	r3, [r7, #8]
 800f2b0:	009b      	lsls	r3, r3, #2
 800f2b2:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800f2b6:	4413      	add	r3, r2
 800f2b8:	6879      	ldr	r1, [r7, #4]
 800f2ba:	4618      	mov	r0, r3
 800f2bc:	f7ff fb6a 	bl	800e994 <st_dword>
			fs->wflag = 1;
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	2201      	movs	r2, #1
 800f2c4:	70da      	strb	r2, [r3, #3]
			break;
 800f2c6:	e006      	b.n	800f2d6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800f2c8:	bf00      	nop
 800f2ca:	e004      	b.n	800f2d6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800f2cc:	bf00      	nop
 800f2ce:	e002      	b.n	800f2d6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800f2d0:	bf00      	nop
 800f2d2:	e000      	b.n	800f2d6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800f2d4:	bf00      	nop
		}
	}
	return res;
 800f2d6:	7ffb      	ldrb	r3, [r7, #31]
}
 800f2d8:	4618      	mov	r0, r3
 800f2da:	3724      	adds	r7, #36	@ 0x24
 800f2dc:	46bd      	mov	sp, r7
 800f2de:	bd90      	pop	{r4, r7, pc}

0800f2e0 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800f2e0:	b580      	push	{r7, lr}
 800f2e2:	b088      	sub	sp, #32
 800f2e4:	af00      	add	r7, sp, #0
 800f2e6:	60f8      	str	r0, [r7, #12]
 800f2e8:	60b9      	str	r1, [r7, #8]
 800f2ea:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800f2ec:	2300      	movs	r3, #0
 800f2ee:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800f2f6:	68bb      	ldr	r3, [r7, #8]
 800f2f8:	2b01      	cmp	r3, #1
 800f2fa:	d904      	bls.n	800f306 <remove_chain+0x26>
 800f2fc:	69bb      	ldr	r3, [r7, #24]
 800f2fe:	695b      	ldr	r3, [r3, #20]
 800f300:	68ba      	ldr	r2, [r7, #8]
 800f302:	429a      	cmp	r2, r3
 800f304:	d301      	bcc.n	800f30a <remove_chain+0x2a>
 800f306:	2302      	movs	r3, #2
 800f308:	e04b      	b.n	800f3a2 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d00c      	beq.n	800f32a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800f310:	f04f 32ff 	mov.w	r2, #4294967295
 800f314:	6879      	ldr	r1, [r7, #4]
 800f316:	69b8      	ldr	r0, [r7, #24]
 800f318:	f7ff fef8 	bl	800f10c <put_fat>
 800f31c:	4603      	mov	r3, r0
 800f31e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800f320:	7ffb      	ldrb	r3, [r7, #31]
 800f322:	2b00      	cmp	r3, #0
 800f324:	d001      	beq.n	800f32a <remove_chain+0x4a>
 800f326:	7ffb      	ldrb	r3, [r7, #31]
 800f328:	e03b      	b.n	800f3a2 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800f32a:	68b9      	ldr	r1, [r7, #8]
 800f32c:	68f8      	ldr	r0, [r7, #12]
 800f32e:	f7ff fe46 	bl	800efbe <get_fat>
 800f332:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800f334:	697b      	ldr	r3, [r7, #20]
 800f336:	2b00      	cmp	r3, #0
 800f338:	d031      	beq.n	800f39e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800f33a:	697b      	ldr	r3, [r7, #20]
 800f33c:	2b01      	cmp	r3, #1
 800f33e:	d101      	bne.n	800f344 <remove_chain+0x64>
 800f340:	2302      	movs	r3, #2
 800f342:	e02e      	b.n	800f3a2 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800f344:	697b      	ldr	r3, [r7, #20]
 800f346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f34a:	d101      	bne.n	800f350 <remove_chain+0x70>
 800f34c:	2301      	movs	r3, #1
 800f34e:	e028      	b.n	800f3a2 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800f350:	2200      	movs	r2, #0
 800f352:	68b9      	ldr	r1, [r7, #8]
 800f354:	69b8      	ldr	r0, [r7, #24]
 800f356:	f7ff fed9 	bl	800f10c <put_fat>
 800f35a:	4603      	mov	r3, r0
 800f35c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800f35e:	7ffb      	ldrb	r3, [r7, #31]
 800f360:	2b00      	cmp	r3, #0
 800f362:	d001      	beq.n	800f368 <remove_chain+0x88>
 800f364:	7ffb      	ldrb	r3, [r7, #31]
 800f366:	e01c      	b.n	800f3a2 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800f368:	69bb      	ldr	r3, [r7, #24]
 800f36a:	691a      	ldr	r2, [r3, #16]
 800f36c:	69bb      	ldr	r3, [r7, #24]
 800f36e:	695b      	ldr	r3, [r3, #20]
 800f370:	3b02      	subs	r3, #2
 800f372:	429a      	cmp	r2, r3
 800f374:	d20b      	bcs.n	800f38e <remove_chain+0xae>
			fs->free_clst++;
 800f376:	69bb      	ldr	r3, [r7, #24]
 800f378:	691b      	ldr	r3, [r3, #16]
 800f37a:	1c5a      	adds	r2, r3, #1
 800f37c:	69bb      	ldr	r3, [r7, #24]
 800f37e:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800f380:	69bb      	ldr	r3, [r7, #24]
 800f382:	791b      	ldrb	r3, [r3, #4]
 800f384:	f043 0301 	orr.w	r3, r3, #1
 800f388:	b2da      	uxtb	r2, r3
 800f38a:	69bb      	ldr	r3, [r7, #24]
 800f38c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800f38e:	697b      	ldr	r3, [r7, #20]
 800f390:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800f392:	69bb      	ldr	r3, [r7, #24]
 800f394:	695b      	ldr	r3, [r3, #20]
 800f396:	68ba      	ldr	r2, [r7, #8]
 800f398:	429a      	cmp	r2, r3
 800f39a:	d3c6      	bcc.n	800f32a <remove_chain+0x4a>
 800f39c:	e000      	b.n	800f3a0 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800f39e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800f3a0:	2300      	movs	r3, #0
}
 800f3a2:	4618      	mov	r0, r3
 800f3a4:	3720      	adds	r7, #32
 800f3a6:	46bd      	mov	sp, r7
 800f3a8:	bd80      	pop	{r7, pc}

0800f3aa <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800f3aa:	b580      	push	{r7, lr}
 800f3ac:	b088      	sub	sp, #32
 800f3ae:	af00      	add	r7, sp, #0
 800f3b0:	6078      	str	r0, [r7, #4]
 800f3b2:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800f3ba:	683b      	ldr	r3, [r7, #0]
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d10d      	bne.n	800f3dc <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800f3c0:	693b      	ldr	r3, [r7, #16]
 800f3c2:	68db      	ldr	r3, [r3, #12]
 800f3c4:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800f3c6:	69bb      	ldr	r3, [r7, #24]
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d004      	beq.n	800f3d6 <create_chain+0x2c>
 800f3cc:	693b      	ldr	r3, [r7, #16]
 800f3ce:	695b      	ldr	r3, [r3, #20]
 800f3d0:	69ba      	ldr	r2, [r7, #24]
 800f3d2:	429a      	cmp	r2, r3
 800f3d4:	d31b      	bcc.n	800f40e <create_chain+0x64>
 800f3d6:	2301      	movs	r3, #1
 800f3d8:	61bb      	str	r3, [r7, #24]
 800f3da:	e018      	b.n	800f40e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800f3dc:	6839      	ldr	r1, [r7, #0]
 800f3de:	6878      	ldr	r0, [r7, #4]
 800f3e0:	f7ff fded 	bl	800efbe <get_fat>
 800f3e4:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	2b01      	cmp	r3, #1
 800f3ea:	d801      	bhi.n	800f3f0 <create_chain+0x46>
 800f3ec:	2301      	movs	r3, #1
 800f3ee:	e070      	b.n	800f4d2 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3f6:	d101      	bne.n	800f3fc <create_chain+0x52>
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	e06a      	b.n	800f4d2 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800f3fc:	693b      	ldr	r3, [r7, #16]
 800f3fe:	695b      	ldr	r3, [r3, #20]
 800f400:	68fa      	ldr	r2, [r7, #12]
 800f402:	429a      	cmp	r2, r3
 800f404:	d201      	bcs.n	800f40a <create_chain+0x60>
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	e063      	b.n	800f4d2 <create_chain+0x128>
		scl = clst;
 800f40a:	683b      	ldr	r3, [r7, #0]
 800f40c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800f40e:	69bb      	ldr	r3, [r7, #24]
 800f410:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800f412:	69fb      	ldr	r3, [r7, #28]
 800f414:	3301      	adds	r3, #1
 800f416:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800f418:	693b      	ldr	r3, [r7, #16]
 800f41a:	695b      	ldr	r3, [r3, #20]
 800f41c:	69fa      	ldr	r2, [r7, #28]
 800f41e:	429a      	cmp	r2, r3
 800f420:	d307      	bcc.n	800f432 <create_chain+0x88>
				ncl = 2;
 800f422:	2302      	movs	r3, #2
 800f424:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800f426:	69fa      	ldr	r2, [r7, #28]
 800f428:	69bb      	ldr	r3, [r7, #24]
 800f42a:	429a      	cmp	r2, r3
 800f42c:	d901      	bls.n	800f432 <create_chain+0x88>
 800f42e:	2300      	movs	r3, #0
 800f430:	e04f      	b.n	800f4d2 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800f432:	69f9      	ldr	r1, [r7, #28]
 800f434:	6878      	ldr	r0, [r7, #4]
 800f436:	f7ff fdc2 	bl	800efbe <get_fat>
 800f43a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d00e      	beq.n	800f460 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	2b01      	cmp	r3, #1
 800f446:	d003      	beq.n	800f450 <create_chain+0xa6>
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f44e:	d101      	bne.n	800f454 <create_chain+0xaa>
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	e03e      	b.n	800f4d2 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800f454:	69fa      	ldr	r2, [r7, #28]
 800f456:	69bb      	ldr	r3, [r7, #24]
 800f458:	429a      	cmp	r2, r3
 800f45a:	d1da      	bne.n	800f412 <create_chain+0x68>
 800f45c:	2300      	movs	r3, #0
 800f45e:	e038      	b.n	800f4d2 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800f460:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800f462:	f04f 32ff 	mov.w	r2, #4294967295
 800f466:	69f9      	ldr	r1, [r7, #28]
 800f468:	6938      	ldr	r0, [r7, #16]
 800f46a:	f7ff fe4f 	bl	800f10c <put_fat>
 800f46e:	4603      	mov	r3, r0
 800f470:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800f472:	7dfb      	ldrb	r3, [r7, #23]
 800f474:	2b00      	cmp	r3, #0
 800f476:	d109      	bne.n	800f48c <create_chain+0xe2>
 800f478:	683b      	ldr	r3, [r7, #0]
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d006      	beq.n	800f48c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800f47e:	69fa      	ldr	r2, [r7, #28]
 800f480:	6839      	ldr	r1, [r7, #0]
 800f482:	6938      	ldr	r0, [r7, #16]
 800f484:	f7ff fe42 	bl	800f10c <put_fat>
 800f488:	4603      	mov	r3, r0
 800f48a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800f48c:	7dfb      	ldrb	r3, [r7, #23]
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d116      	bne.n	800f4c0 <create_chain+0x116>
		fs->last_clst = ncl;
 800f492:	693b      	ldr	r3, [r7, #16]
 800f494:	69fa      	ldr	r2, [r7, #28]
 800f496:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800f498:	693b      	ldr	r3, [r7, #16]
 800f49a:	691a      	ldr	r2, [r3, #16]
 800f49c:	693b      	ldr	r3, [r7, #16]
 800f49e:	695b      	ldr	r3, [r3, #20]
 800f4a0:	3b02      	subs	r3, #2
 800f4a2:	429a      	cmp	r2, r3
 800f4a4:	d804      	bhi.n	800f4b0 <create_chain+0x106>
 800f4a6:	693b      	ldr	r3, [r7, #16]
 800f4a8:	691b      	ldr	r3, [r3, #16]
 800f4aa:	1e5a      	subs	r2, r3, #1
 800f4ac:	693b      	ldr	r3, [r7, #16]
 800f4ae:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800f4b0:	693b      	ldr	r3, [r7, #16]
 800f4b2:	791b      	ldrb	r3, [r3, #4]
 800f4b4:	f043 0301 	orr.w	r3, r3, #1
 800f4b8:	b2da      	uxtb	r2, r3
 800f4ba:	693b      	ldr	r3, [r7, #16]
 800f4bc:	711a      	strb	r2, [r3, #4]
 800f4be:	e007      	b.n	800f4d0 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800f4c0:	7dfb      	ldrb	r3, [r7, #23]
 800f4c2:	2b01      	cmp	r3, #1
 800f4c4:	d102      	bne.n	800f4cc <create_chain+0x122>
 800f4c6:	f04f 33ff 	mov.w	r3, #4294967295
 800f4ca:	e000      	b.n	800f4ce <create_chain+0x124>
 800f4cc:	2301      	movs	r3, #1
 800f4ce:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800f4d0:	69fb      	ldr	r3, [r7, #28]
}
 800f4d2:	4618      	mov	r0, r3
 800f4d4:	3720      	adds	r7, #32
 800f4d6:	46bd      	mov	sp, r7
 800f4d8:	bd80      	pop	{r7, pc}

0800f4da <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800f4da:	b480      	push	{r7}
 800f4dc:	b087      	sub	sp, #28
 800f4de:	af00      	add	r7, sp, #0
 800f4e0:	6078      	str	r0, [r7, #4]
 800f4e2:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f4ee:	3304      	adds	r3, #4
 800f4f0:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800f4f2:	683b      	ldr	r3, [r7, #0]
 800f4f4:	0a5b      	lsrs	r3, r3, #9
 800f4f6:	68fa      	ldr	r2, [r7, #12]
 800f4f8:	8952      	ldrh	r2, [r2, #10]
 800f4fa:	fbb3 f3f2 	udiv	r3, r3, r2
 800f4fe:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f500:	693b      	ldr	r3, [r7, #16]
 800f502:	1d1a      	adds	r2, r3, #4
 800f504:	613a      	str	r2, [r7, #16]
 800f506:	681b      	ldr	r3, [r3, #0]
 800f508:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800f50a:	68bb      	ldr	r3, [r7, #8]
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d101      	bne.n	800f514 <clmt_clust+0x3a>
 800f510:	2300      	movs	r3, #0
 800f512:	e010      	b.n	800f536 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800f514:	697a      	ldr	r2, [r7, #20]
 800f516:	68bb      	ldr	r3, [r7, #8]
 800f518:	429a      	cmp	r2, r3
 800f51a:	d307      	bcc.n	800f52c <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800f51c:	697a      	ldr	r2, [r7, #20]
 800f51e:	68bb      	ldr	r3, [r7, #8]
 800f520:	1ad3      	subs	r3, r2, r3
 800f522:	617b      	str	r3, [r7, #20]
 800f524:	693b      	ldr	r3, [r7, #16]
 800f526:	3304      	adds	r3, #4
 800f528:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f52a:	e7e9      	b.n	800f500 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800f52c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800f52e:	693b      	ldr	r3, [r7, #16]
 800f530:	681a      	ldr	r2, [r3, #0]
 800f532:	697b      	ldr	r3, [r7, #20]
 800f534:	4413      	add	r3, r2
}
 800f536:	4618      	mov	r0, r3
 800f538:	371c      	adds	r7, #28
 800f53a:	46bd      	mov	sp, r7
 800f53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f540:	4770      	bx	lr

0800f542 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800f542:	b580      	push	{r7, lr}
 800f544:	b086      	sub	sp, #24
 800f546:	af00      	add	r7, sp, #0
 800f548:	6078      	str	r0, [r7, #4]
 800f54a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800f552:	683b      	ldr	r3, [r7, #0]
 800f554:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800f558:	d204      	bcs.n	800f564 <dir_sdi+0x22>
 800f55a:	683b      	ldr	r3, [r7, #0]
 800f55c:	f003 031f 	and.w	r3, r3, #31
 800f560:	2b00      	cmp	r3, #0
 800f562:	d001      	beq.n	800f568 <dir_sdi+0x26>
		return FR_INT_ERR;
 800f564:	2302      	movs	r3, #2
 800f566:	e063      	b.n	800f630 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	683a      	ldr	r2, [r7, #0]
 800f56c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	689b      	ldr	r3, [r3, #8]
 800f572:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800f574:	697b      	ldr	r3, [r7, #20]
 800f576:	2b00      	cmp	r3, #0
 800f578:	d106      	bne.n	800f588 <dir_sdi+0x46>
 800f57a:	693b      	ldr	r3, [r7, #16]
 800f57c:	781b      	ldrb	r3, [r3, #0]
 800f57e:	2b02      	cmp	r3, #2
 800f580:	d902      	bls.n	800f588 <dir_sdi+0x46>
		clst = fs->dirbase;
 800f582:	693b      	ldr	r3, [r7, #16]
 800f584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f586:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800f588:	697b      	ldr	r3, [r7, #20]
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d10c      	bne.n	800f5a8 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800f58e:	683b      	ldr	r3, [r7, #0]
 800f590:	095b      	lsrs	r3, r3, #5
 800f592:	693a      	ldr	r2, [r7, #16]
 800f594:	8912      	ldrh	r2, [r2, #8]
 800f596:	4293      	cmp	r3, r2
 800f598:	d301      	bcc.n	800f59e <dir_sdi+0x5c>
 800f59a:	2302      	movs	r3, #2
 800f59c:	e048      	b.n	800f630 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800f59e:	693b      	ldr	r3, [r7, #16]
 800f5a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	61da      	str	r2, [r3, #28]
 800f5a6:	e029      	b.n	800f5fc <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800f5a8:	693b      	ldr	r3, [r7, #16]
 800f5aa:	895b      	ldrh	r3, [r3, #10]
 800f5ac:	025b      	lsls	r3, r3, #9
 800f5ae:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f5b0:	e019      	b.n	800f5e6 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	6979      	ldr	r1, [r7, #20]
 800f5b6:	4618      	mov	r0, r3
 800f5b8:	f7ff fd01 	bl	800efbe <get_fat>
 800f5bc:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f5be:	697b      	ldr	r3, [r7, #20]
 800f5c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5c4:	d101      	bne.n	800f5ca <dir_sdi+0x88>
 800f5c6:	2301      	movs	r3, #1
 800f5c8:	e032      	b.n	800f630 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800f5ca:	697b      	ldr	r3, [r7, #20]
 800f5cc:	2b01      	cmp	r3, #1
 800f5ce:	d904      	bls.n	800f5da <dir_sdi+0x98>
 800f5d0:	693b      	ldr	r3, [r7, #16]
 800f5d2:	695b      	ldr	r3, [r3, #20]
 800f5d4:	697a      	ldr	r2, [r7, #20]
 800f5d6:	429a      	cmp	r2, r3
 800f5d8:	d301      	bcc.n	800f5de <dir_sdi+0x9c>
 800f5da:	2302      	movs	r3, #2
 800f5dc:	e028      	b.n	800f630 <dir_sdi+0xee>
			ofs -= csz;
 800f5de:	683a      	ldr	r2, [r7, #0]
 800f5e0:	68fb      	ldr	r3, [r7, #12]
 800f5e2:	1ad3      	subs	r3, r2, r3
 800f5e4:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f5e6:	683a      	ldr	r2, [r7, #0]
 800f5e8:	68fb      	ldr	r3, [r7, #12]
 800f5ea:	429a      	cmp	r2, r3
 800f5ec:	d2e1      	bcs.n	800f5b2 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800f5ee:	6979      	ldr	r1, [r7, #20]
 800f5f0:	6938      	ldr	r0, [r7, #16]
 800f5f2:	f7ff fcc5 	bl	800ef80 <clust2sect>
 800f5f6:	4602      	mov	r2, r0
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	697a      	ldr	r2, [r7, #20]
 800f600:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	69db      	ldr	r3, [r3, #28]
 800f606:	2b00      	cmp	r3, #0
 800f608:	d101      	bne.n	800f60e <dir_sdi+0xcc>
 800f60a:	2302      	movs	r3, #2
 800f60c:	e010      	b.n	800f630 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	69da      	ldr	r2, [r3, #28]
 800f612:	683b      	ldr	r3, [r7, #0]
 800f614:	0a5b      	lsrs	r3, r3, #9
 800f616:	441a      	add	r2, r3
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800f61c:	693b      	ldr	r3, [r7, #16]
 800f61e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800f622:	683b      	ldr	r3, [r7, #0]
 800f624:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f628:	441a      	add	r2, r3
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f62e:	2300      	movs	r3, #0
}
 800f630:	4618      	mov	r0, r3
 800f632:	3718      	adds	r7, #24
 800f634:	46bd      	mov	sp, r7
 800f636:	bd80      	pop	{r7, pc}

0800f638 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800f638:	b580      	push	{r7, lr}
 800f63a:	b086      	sub	sp, #24
 800f63c:	af00      	add	r7, sp, #0
 800f63e:	6078      	str	r0, [r7, #4]
 800f640:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	681b      	ldr	r3, [r3, #0]
 800f646:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	695b      	ldr	r3, [r3, #20]
 800f64c:	3320      	adds	r3, #32
 800f64e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	69db      	ldr	r3, [r3, #28]
 800f654:	2b00      	cmp	r3, #0
 800f656:	d003      	beq.n	800f660 <dir_next+0x28>
 800f658:	68bb      	ldr	r3, [r7, #8]
 800f65a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800f65e:	d301      	bcc.n	800f664 <dir_next+0x2c>
 800f660:	2304      	movs	r3, #4
 800f662:	e0aa      	b.n	800f7ba <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800f664:	68bb      	ldr	r3, [r7, #8]
 800f666:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	f040 8098 	bne.w	800f7a0 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	69db      	ldr	r3, [r3, #28]
 800f674:	1c5a      	adds	r2, r3, #1
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	699b      	ldr	r3, [r3, #24]
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d10b      	bne.n	800f69a <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800f682:	68bb      	ldr	r3, [r7, #8]
 800f684:	095b      	lsrs	r3, r3, #5
 800f686:	68fa      	ldr	r2, [r7, #12]
 800f688:	8912      	ldrh	r2, [r2, #8]
 800f68a:	4293      	cmp	r3, r2
 800f68c:	f0c0 8088 	bcc.w	800f7a0 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	2200      	movs	r2, #0
 800f694:	61da      	str	r2, [r3, #28]
 800f696:	2304      	movs	r3, #4
 800f698:	e08f      	b.n	800f7ba <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800f69a:	68bb      	ldr	r3, [r7, #8]
 800f69c:	0a5b      	lsrs	r3, r3, #9
 800f69e:	68fa      	ldr	r2, [r7, #12]
 800f6a0:	8952      	ldrh	r2, [r2, #10]
 800f6a2:	3a01      	subs	r2, #1
 800f6a4:	4013      	ands	r3, r2
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d17a      	bne.n	800f7a0 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800f6aa:	687a      	ldr	r2, [r7, #4]
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	699b      	ldr	r3, [r3, #24]
 800f6b0:	4619      	mov	r1, r3
 800f6b2:	4610      	mov	r0, r2
 800f6b4:	f7ff fc83 	bl	800efbe <get_fat>
 800f6b8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800f6ba:	697b      	ldr	r3, [r7, #20]
 800f6bc:	2b01      	cmp	r3, #1
 800f6be:	d801      	bhi.n	800f6c4 <dir_next+0x8c>
 800f6c0:	2302      	movs	r3, #2
 800f6c2:	e07a      	b.n	800f7ba <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800f6c4:	697b      	ldr	r3, [r7, #20]
 800f6c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f6ca:	d101      	bne.n	800f6d0 <dir_next+0x98>
 800f6cc:	2301      	movs	r3, #1
 800f6ce:	e074      	b.n	800f7ba <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	695b      	ldr	r3, [r3, #20]
 800f6d4:	697a      	ldr	r2, [r7, #20]
 800f6d6:	429a      	cmp	r2, r3
 800f6d8:	d358      	bcc.n	800f78c <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800f6da:	683b      	ldr	r3, [r7, #0]
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d104      	bne.n	800f6ea <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	2200      	movs	r2, #0
 800f6e4:	61da      	str	r2, [r3, #28]
 800f6e6:	2304      	movs	r3, #4
 800f6e8:	e067      	b.n	800f7ba <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800f6ea:	687a      	ldr	r2, [r7, #4]
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	699b      	ldr	r3, [r3, #24]
 800f6f0:	4619      	mov	r1, r3
 800f6f2:	4610      	mov	r0, r2
 800f6f4:	f7ff fe59 	bl	800f3aa <create_chain>
 800f6f8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800f6fa:	697b      	ldr	r3, [r7, #20]
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d101      	bne.n	800f704 <dir_next+0xcc>
 800f700:	2307      	movs	r3, #7
 800f702:	e05a      	b.n	800f7ba <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800f704:	697b      	ldr	r3, [r7, #20]
 800f706:	2b01      	cmp	r3, #1
 800f708:	d101      	bne.n	800f70e <dir_next+0xd6>
 800f70a:	2302      	movs	r3, #2
 800f70c:	e055      	b.n	800f7ba <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f70e:	697b      	ldr	r3, [r7, #20]
 800f710:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f714:	d101      	bne.n	800f71a <dir_next+0xe2>
 800f716:	2301      	movs	r3, #1
 800f718:	e04f      	b.n	800f7ba <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800f71a:	68f8      	ldr	r0, [r7, #12]
 800f71c:	f7ff fb50 	bl	800edc0 <sync_window>
 800f720:	4603      	mov	r3, r0
 800f722:	2b00      	cmp	r3, #0
 800f724:	d001      	beq.n	800f72a <dir_next+0xf2>
 800f726:	2301      	movs	r3, #1
 800f728:	e047      	b.n	800f7ba <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800f72a:	68fb      	ldr	r3, [r7, #12]
 800f72c:	3330      	adds	r3, #48	@ 0x30
 800f72e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f732:	2100      	movs	r1, #0
 800f734:	4618      	mov	r0, r3
 800f736:	f7ff f97a 	bl	800ea2e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f73a:	2300      	movs	r3, #0
 800f73c:	613b      	str	r3, [r7, #16]
 800f73e:	6979      	ldr	r1, [r7, #20]
 800f740:	68f8      	ldr	r0, [r7, #12]
 800f742:	f7ff fc1d 	bl	800ef80 <clust2sect>
 800f746:	4602      	mov	r2, r0
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800f74c:	e012      	b.n	800f774 <dir_next+0x13c>
						fs->wflag = 1;
 800f74e:	68fb      	ldr	r3, [r7, #12]
 800f750:	2201      	movs	r2, #1
 800f752:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800f754:	68f8      	ldr	r0, [r7, #12]
 800f756:	f7ff fb33 	bl	800edc0 <sync_window>
 800f75a:	4603      	mov	r3, r0
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d001      	beq.n	800f764 <dir_next+0x12c>
 800f760:	2301      	movs	r3, #1
 800f762:	e02a      	b.n	800f7ba <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f764:	693b      	ldr	r3, [r7, #16]
 800f766:	3301      	adds	r3, #1
 800f768:	613b      	str	r3, [r7, #16]
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f76e:	1c5a      	adds	r2, r3, #1
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	62da      	str	r2, [r3, #44]	@ 0x2c
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	895b      	ldrh	r3, [r3, #10]
 800f778:	461a      	mov	r2, r3
 800f77a:	693b      	ldr	r3, [r7, #16]
 800f77c:	4293      	cmp	r3, r2
 800f77e:	d3e6      	bcc.n	800f74e <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800f780:	68fb      	ldr	r3, [r7, #12]
 800f782:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f784:	693b      	ldr	r3, [r7, #16]
 800f786:	1ad2      	subs	r2, r2, r3
 800f788:	68fb      	ldr	r3, [r7, #12]
 800f78a:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	697a      	ldr	r2, [r7, #20]
 800f790:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800f792:	6979      	ldr	r1, [r7, #20]
 800f794:	68f8      	ldr	r0, [r7, #12]
 800f796:	f7ff fbf3 	bl	800ef80 <clust2sect>
 800f79a:	4602      	mov	r2, r0
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	68ba      	ldr	r2, [r7, #8]
 800f7a4:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800f7ac:	68bb      	ldr	r3, [r7, #8]
 800f7ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f7b2:	441a      	add	r2, r3
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f7b8:	2300      	movs	r3, #0
}
 800f7ba:	4618      	mov	r0, r3
 800f7bc:	3718      	adds	r7, #24
 800f7be:	46bd      	mov	sp, r7
 800f7c0:	bd80      	pop	{r7, pc}

0800f7c2 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800f7c2:	b580      	push	{r7, lr}
 800f7c4:	b086      	sub	sp, #24
 800f7c6:	af00      	add	r7, sp, #0
 800f7c8:	6078      	str	r0, [r7, #4]
 800f7ca:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800f7d2:	2100      	movs	r1, #0
 800f7d4:	6878      	ldr	r0, [r7, #4]
 800f7d6:	f7ff feb4 	bl	800f542 <dir_sdi>
 800f7da:	4603      	mov	r3, r0
 800f7dc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f7de:	7dfb      	ldrb	r3, [r7, #23]
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d12b      	bne.n	800f83c <dir_alloc+0x7a>
		n = 0;
 800f7e4:	2300      	movs	r3, #0
 800f7e6:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	69db      	ldr	r3, [r3, #28]
 800f7ec:	4619      	mov	r1, r3
 800f7ee:	68f8      	ldr	r0, [r7, #12]
 800f7f0:	f7ff fb2a 	bl	800ee48 <move_window>
 800f7f4:	4603      	mov	r3, r0
 800f7f6:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f7f8:	7dfb      	ldrb	r3, [r7, #23]
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d11d      	bne.n	800f83a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	6a1b      	ldr	r3, [r3, #32]
 800f802:	781b      	ldrb	r3, [r3, #0]
 800f804:	2be5      	cmp	r3, #229	@ 0xe5
 800f806:	d004      	beq.n	800f812 <dir_alloc+0x50>
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	6a1b      	ldr	r3, [r3, #32]
 800f80c:	781b      	ldrb	r3, [r3, #0]
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d107      	bne.n	800f822 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800f812:	693b      	ldr	r3, [r7, #16]
 800f814:	3301      	adds	r3, #1
 800f816:	613b      	str	r3, [r7, #16]
 800f818:	693a      	ldr	r2, [r7, #16]
 800f81a:	683b      	ldr	r3, [r7, #0]
 800f81c:	429a      	cmp	r2, r3
 800f81e:	d102      	bne.n	800f826 <dir_alloc+0x64>
 800f820:	e00c      	b.n	800f83c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800f822:	2300      	movs	r3, #0
 800f824:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800f826:	2101      	movs	r1, #1
 800f828:	6878      	ldr	r0, [r7, #4]
 800f82a:	f7ff ff05 	bl	800f638 <dir_next>
 800f82e:	4603      	mov	r3, r0
 800f830:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800f832:	7dfb      	ldrb	r3, [r7, #23]
 800f834:	2b00      	cmp	r3, #0
 800f836:	d0d7      	beq.n	800f7e8 <dir_alloc+0x26>
 800f838:	e000      	b.n	800f83c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800f83a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800f83c:	7dfb      	ldrb	r3, [r7, #23]
 800f83e:	2b04      	cmp	r3, #4
 800f840:	d101      	bne.n	800f846 <dir_alloc+0x84>
 800f842:	2307      	movs	r3, #7
 800f844:	75fb      	strb	r3, [r7, #23]
	return res;
 800f846:	7dfb      	ldrb	r3, [r7, #23]
}
 800f848:	4618      	mov	r0, r3
 800f84a:	3718      	adds	r7, #24
 800f84c:	46bd      	mov	sp, r7
 800f84e:	bd80      	pop	{r7, pc}

0800f850 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800f850:	b580      	push	{r7, lr}
 800f852:	b084      	sub	sp, #16
 800f854:	af00      	add	r7, sp, #0
 800f856:	6078      	str	r0, [r7, #4]
 800f858:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800f85a:	683b      	ldr	r3, [r7, #0]
 800f85c:	331a      	adds	r3, #26
 800f85e:	4618      	mov	r0, r3
 800f860:	f7ff f842 	bl	800e8e8 <ld_word>
 800f864:	4603      	mov	r3, r0
 800f866:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	781b      	ldrb	r3, [r3, #0]
 800f86c:	2b03      	cmp	r3, #3
 800f86e:	d109      	bne.n	800f884 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800f870:	683b      	ldr	r3, [r7, #0]
 800f872:	3314      	adds	r3, #20
 800f874:	4618      	mov	r0, r3
 800f876:	f7ff f837 	bl	800e8e8 <ld_word>
 800f87a:	4603      	mov	r3, r0
 800f87c:	041b      	lsls	r3, r3, #16
 800f87e:	68fa      	ldr	r2, [r7, #12]
 800f880:	4313      	orrs	r3, r2
 800f882:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800f884:	68fb      	ldr	r3, [r7, #12]
}
 800f886:	4618      	mov	r0, r3
 800f888:	3710      	adds	r7, #16
 800f88a:	46bd      	mov	sp, r7
 800f88c:	bd80      	pop	{r7, pc}

0800f88e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800f88e:	b580      	push	{r7, lr}
 800f890:	b084      	sub	sp, #16
 800f892:	af00      	add	r7, sp, #0
 800f894:	60f8      	str	r0, [r7, #12]
 800f896:	60b9      	str	r1, [r7, #8]
 800f898:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800f89a:	68bb      	ldr	r3, [r7, #8]
 800f89c:	331a      	adds	r3, #26
 800f89e:	687a      	ldr	r2, [r7, #4]
 800f8a0:	b292      	uxth	r2, r2
 800f8a2:	4611      	mov	r1, r2
 800f8a4:	4618      	mov	r0, r3
 800f8a6:	f7ff f85a 	bl	800e95e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	781b      	ldrb	r3, [r3, #0]
 800f8ae:	2b03      	cmp	r3, #3
 800f8b0:	d109      	bne.n	800f8c6 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800f8b2:	68bb      	ldr	r3, [r7, #8]
 800f8b4:	f103 0214 	add.w	r2, r3, #20
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	0c1b      	lsrs	r3, r3, #16
 800f8bc:	b29b      	uxth	r3, r3
 800f8be:	4619      	mov	r1, r3
 800f8c0:	4610      	mov	r0, r2
 800f8c2:	f7ff f84c 	bl	800e95e <st_word>
	}
}
 800f8c6:	bf00      	nop
 800f8c8:	3710      	adds	r7, #16
 800f8ca:	46bd      	mov	sp, r7
 800f8cc:	bd80      	pop	{r7, pc}

0800f8ce <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800f8ce:	b580      	push	{r7, lr}
 800f8d0:	b086      	sub	sp, #24
 800f8d2:	af00      	add	r7, sp, #0
 800f8d4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800f8dc:	2100      	movs	r1, #0
 800f8de:	6878      	ldr	r0, [r7, #4]
 800f8e0:	f7ff fe2f 	bl	800f542 <dir_sdi>
 800f8e4:	4603      	mov	r3, r0
 800f8e6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800f8e8:	7dfb      	ldrb	r3, [r7, #23]
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d001      	beq.n	800f8f2 <dir_find+0x24>
 800f8ee:	7dfb      	ldrb	r3, [r7, #23]
 800f8f0:	e03e      	b.n	800f970 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	69db      	ldr	r3, [r3, #28]
 800f8f6:	4619      	mov	r1, r3
 800f8f8:	6938      	ldr	r0, [r7, #16]
 800f8fa:	f7ff faa5 	bl	800ee48 <move_window>
 800f8fe:	4603      	mov	r3, r0
 800f900:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f902:	7dfb      	ldrb	r3, [r7, #23]
 800f904:	2b00      	cmp	r3, #0
 800f906:	d12f      	bne.n	800f968 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	6a1b      	ldr	r3, [r3, #32]
 800f90c:	781b      	ldrb	r3, [r3, #0]
 800f90e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800f910:	7bfb      	ldrb	r3, [r7, #15]
 800f912:	2b00      	cmp	r3, #0
 800f914:	d102      	bne.n	800f91c <dir_find+0x4e>
 800f916:	2304      	movs	r3, #4
 800f918:	75fb      	strb	r3, [r7, #23]
 800f91a:	e028      	b.n	800f96e <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	6a1b      	ldr	r3, [r3, #32]
 800f920:	330b      	adds	r3, #11
 800f922:	781b      	ldrb	r3, [r3, #0]
 800f924:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f928:	b2da      	uxtb	r2, r3
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	6a1b      	ldr	r3, [r3, #32]
 800f932:	330b      	adds	r3, #11
 800f934:	781b      	ldrb	r3, [r3, #0]
 800f936:	f003 0308 	and.w	r3, r3, #8
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d10a      	bne.n	800f954 <dir_find+0x86>
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	6a18      	ldr	r0, [r3, #32]
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	3324      	adds	r3, #36	@ 0x24
 800f946:	220b      	movs	r2, #11
 800f948:	4619      	mov	r1, r3
 800f94a:	f7ff f88b 	bl	800ea64 <mem_cmp>
 800f94e:	4603      	mov	r3, r0
 800f950:	2b00      	cmp	r3, #0
 800f952:	d00b      	beq.n	800f96c <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800f954:	2100      	movs	r1, #0
 800f956:	6878      	ldr	r0, [r7, #4]
 800f958:	f7ff fe6e 	bl	800f638 <dir_next>
 800f95c:	4603      	mov	r3, r0
 800f95e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800f960:	7dfb      	ldrb	r3, [r7, #23]
 800f962:	2b00      	cmp	r3, #0
 800f964:	d0c5      	beq.n	800f8f2 <dir_find+0x24>
 800f966:	e002      	b.n	800f96e <dir_find+0xa0>
		if (res != FR_OK) break;
 800f968:	bf00      	nop
 800f96a:	e000      	b.n	800f96e <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800f96c:	bf00      	nop

	return res;
 800f96e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f970:	4618      	mov	r0, r3
 800f972:	3718      	adds	r7, #24
 800f974:	46bd      	mov	sp, r7
 800f976:	bd80      	pop	{r7, pc}

0800f978 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800f978:	b580      	push	{r7, lr}
 800f97a:	b084      	sub	sp, #16
 800f97c:	af00      	add	r7, sp, #0
 800f97e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800f986:	2101      	movs	r1, #1
 800f988:	6878      	ldr	r0, [r7, #4]
 800f98a:	f7ff ff1a 	bl	800f7c2 <dir_alloc>
 800f98e:	4603      	mov	r3, r0
 800f990:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800f992:	7bfb      	ldrb	r3, [r7, #15]
 800f994:	2b00      	cmp	r3, #0
 800f996:	d11c      	bne.n	800f9d2 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	69db      	ldr	r3, [r3, #28]
 800f99c:	4619      	mov	r1, r3
 800f99e:	68b8      	ldr	r0, [r7, #8]
 800f9a0:	f7ff fa52 	bl	800ee48 <move_window>
 800f9a4:	4603      	mov	r3, r0
 800f9a6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f9a8:	7bfb      	ldrb	r3, [r7, #15]
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d111      	bne.n	800f9d2 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	6a1b      	ldr	r3, [r3, #32]
 800f9b2:	2220      	movs	r2, #32
 800f9b4:	2100      	movs	r1, #0
 800f9b6:	4618      	mov	r0, r3
 800f9b8:	f7ff f839 	bl	800ea2e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	6a18      	ldr	r0, [r3, #32]
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	3324      	adds	r3, #36	@ 0x24
 800f9c4:	220b      	movs	r2, #11
 800f9c6:	4619      	mov	r1, r3
 800f9c8:	f7ff f810 	bl	800e9ec <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800f9cc:	68bb      	ldr	r3, [r7, #8]
 800f9ce:	2201      	movs	r2, #1
 800f9d0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800f9d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f9d4:	4618      	mov	r0, r3
 800f9d6:	3710      	adds	r7, #16
 800f9d8:	46bd      	mov	sp, r7
 800f9da:	bd80      	pop	{r7, pc}

0800f9dc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800f9dc:	b580      	push	{r7, lr}
 800f9de:	b088      	sub	sp, #32
 800f9e0:	af00      	add	r7, sp, #0
 800f9e2:	6078      	str	r0, [r7, #4]
 800f9e4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800f9e6:	683b      	ldr	r3, [r7, #0]
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	60fb      	str	r3, [r7, #12]
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	3324      	adds	r3, #36	@ 0x24
 800f9f0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800f9f2:	220b      	movs	r2, #11
 800f9f4:	2120      	movs	r1, #32
 800f9f6:	68b8      	ldr	r0, [r7, #8]
 800f9f8:	f7ff f819 	bl	800ea2e <mem_set>
	si = i = 0; ni = 8;
 800f9fc:	2300      	movs	r3, #0
 800f9fe:	613b      	str	r3, [r7, #16]
 800fa00:	693b      	ldr	r3, [r7, #16]
 800fa02:	61fb      	str	r3, [r7, #28]
 800fa04:	2308      	movs	r3, #8
 800fa06:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800fa08:	69fb      	ldr	r3, [r7, #28]
 800fa0a:	1c5a      	adds	r2, r3, #1
 800fa0c:	61fa      	str	r2, [r7, #28]
 800fa0e:	68fa      	ldr	r2, [r7, #12]
 800fa10:	4413      	add	r3, r2
 800fa12:	781b      	ldrb	r3, [r3, #0]
 800fa14:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800fa16:	7efb      	ldrb	r3, [r7, #27]
 800fa18:	2b20      	cmp	r3, #32
 800fa1a:	d94e      	bls.n	800faba <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800fa1c:	7efb      	ldrb	r3, [r7, #27]
 800fa1e:	2b2f      	cmp	r3, #47	@ 0x2f
 800fa20:	d006      	beq.n	800fa30 <create_name+0x54>
 800fa22:	7efb      	ldrb	r3, [r7, #27]
 800fa24:	2b5c      	cmp	r3, #92	@ 0x5c
 800fa26:	d110      	bne.n	800fa4a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800fa28:	e002      	b.n	800fa30 <create_name+0x54>
 800fa2a:	69fb      	ldr	r3, [r7, #28]
 800fa2c:	3301      	adds	r3, #1
 800fa2e:	61fb      	str	r3, [r7, #28]
 800fa30:	68fa      	ldr	r2, [r7, #12]
 800fa32:	69fb      	ldr	r3, [r7, #28]
 800fa34:	4413      	add	r3, r2
 800fa36:	781b      	ldrb	r3, [r3, #0]
 800fa38:	2b2f      	cmp	r3, #47	@ 0x2f
 800fa3a:	d0f6      	beq.n	800fa2a <create_name+0x4e>
 800fa3c:	68fa      	ldr	r2, [r7, #12]
 800fa3e:	69fb      	ldr	r3, [r7, #28]
 800fa40:	4413      	add	r3, r2
 800fa42:	781b      	ldrb	r3, [r3, #0]
 800fa44:	2b5c      	cmp	r3, #92	@ 0x5c
 800fa46:	d0f0      	beq.n	800fa2a <create_name+0x4e>
			break;
 800fa48:	e038      	b.n	800fabc <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800fa4a:	7efb      	ldrb	r3, [r7, #27]
 800fa4c:	2b2e      	cmp	r3, #46	@ 0x2e
 800fa4e:	d003      	beq.n	800fa58 <create_name+0x7c>
 800fa50:	693a      	ldr	r2, [r7, #16]
 800fa52:	697b      	ldr	r3, [r7, #20]
 800fa54:	429a      	cmp	r2, r3
 800fa56:	d30c      	bcc.n	800fa72 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800fa58:	697b      	ldr	r3, [r7, #20]
 800fa5a:	2b0b      	cmp	r3, #11
 800fa5c:	d002      	beq.n	800fa64 <create_name+0x88>
 800fa5e:	7efb      	ldrb	r3, [r7, #27]
 800fa60:	2b2e      	cmp	r3, #46	@ 0x2e
 800fa62:	d001      	beq.n	800fa68 <create_name+0x8c>
 800fa64:	2306      	movs	r3, #6
 800fa66:	e044      	b.n	800faf2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800fa68:	2308      	movs	r3, #8
 800fa6a:	613b      	str	r3, [r7, #16]
 800fa6c:	230b      	movs	r3, #11
 800fa6e:	617b      	str	r3, [r7, #20]
			continue;
 800fa70:	e022      	b.n	800fab8 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800fa72:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	da04      	bge.n	800fa84 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800fa7a:	7efb      	ldrb	r3, [r7, #27]
 800fa7c:	3b80      	subs	r3, #128	@ 0x80
 800fa7e:	4a1f      	ldr	r2, [pc, #124]	@ (800fafc <create_name+0x120>)
 800fa80:	5cd3      	ldrb	r3, [r2, r3]
 800fa82:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800fa84:	7efb      	ldrb	r3, [r7, #27]
 800fa86:	4619      	mov	r1, r3
 800fa88:	481d      	ldr	r0, [pc, #116]	@ (800fb00 <create_name+0x124>)
 800fa8a:	f7ff f812 	bl	800eab2 <chk_chr>
 800fa8e:	4603      	mov	r3, r0
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d001      	beq.n	800fa98 <create_name+0xbc>
 800fa94:	2306      	movs	r3, #6
 800fa96:	e02c      	b.n	800faf2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800fa98:	7efb      	ldrb	r3, [r7, #27]
 800fa9a:	2b60      	cmp	r3, #96	@ 0x60
 800fa9c:	d905      	bls.n	800faaa <create_name+0xce>
 800fa9e:	7efb      	ldrb	r3, [r7, #27]
 800faa0:	2b7a      	cmp	r3, #122	@ 0x7a
 800faa2:	d802      	bhi.n	800faaa <create_name+0xce>
 800faa4:	7efb      	ldrb	r3, [r7, #27]
 800faa6:	3b20      	subs	r3, #32
 800faa8:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800faaa:	693b      	ldr	r3, [r7, #16]
 800faac:	1c5a      	adds	r2, r3, #1
 800faae:	613a      	str	r2, [r7, #16]
 800fab0:	68ba      	ldr	r2, [r7, #8]
 800fab2:	4413      	add	r3, r2
 800fab4:	7efa      	ldrb	r2, [r7, #27]
 800fab6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800fab8:	e7a6      	b.n	800fa08 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800faba:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800fabc:	68fa      	ldr	r2, [r7, #12]
 800fabe:	69fb      	ldr	r3, [r7, #28]
 800fac0:	441a      	add	r2, r3
 800fac2:	683b      	ldr	r3, [r7, #0]
 800fac4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800fac6:	693b      	ldr	r3, [r7, #16]
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d101      	bne.n	800fad0 <create_name+0xf4>
 800facc:	2306      	movs	r3, #6
 800face:	e010      	b.n	800faf2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800fad0:	68bb      	ldr	r3, [r7, #8]
 800fad2:	781b      	ldrb	r3, [r3, #0]
 800fad4:	2be5      	cmp	r3, #229	@ 0xe5
 800fad6:	d102      	bne.n	800fade <create_name+0x102>
 800fad8:	68bb      	ldr	r3, [r7, #8]
 800fada:	2205      	movs	r2, #5
 800fadc:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800fade:	7efb      	ldrb	r3, [r7, #27]
 800fae0:	2b20      	cmp	r3, #32
 800fae2:	d801      	bhi.n	800fae8 <create_name+0x10c>
 800fae4:	2204      	movs	r2, #4
 800fae6:	e000      	b.n	800faea <create_name+0x10e>
 800fae8:	2200      	movs	r2, #0
 800faea:	68bb      	ldr	r3, [r7, #8]
 800faec:	330b      	adds	r3, #11
 800faee:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800faf0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800faf2:	4618      	mov	r0, r3
 800faf4:	3720      	adds	r7, #32
 800faf6:	46bd      	mov	sp, r7
 800faf8:	bd80      	pop	{r7, pc}
 800fafa:	bf00      	nop
 800fafc:	0801ad28 	.word	0x0801ad28
 800fb00:	0801ac80 	.word	0x0801ac80

0800fb04 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800fb04:	b580      	push	{r7, lr}
 800fb06:	b086      	sub	sp, #24
 800fb08:	af00      	add	r7, sp, #0
 800fb0a:	6078      	str	r0, [r7, #4]
 800fb0c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800fb12:	693b      	ldr	r3, [r7, #16]
 800fb14:	681b      	ldr	r3, [r3, #0]
 800fb16:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800fb18:	e002      	b.n	800fb20 <follow_path+0x1c>
 800fb1a:	683b      	ldr	r3, [r7, #0]
 800fb1c:	3301      	adds	r3, #1
 800fb1e:	603b      	str	r3, [r7, #0]
 800fb20:	683b      	ldr	r3, [r7, #0]
 800fb22:	781b      	ldrb	r3, [r3, #0]
 800fb24:	2b2f      	cmp	r3, #47	@ 0x2f
 800fb26:	d0f8      	beq.n	800fb1a <follow_path+0x16>
 800fb28:	683b      	ldr	r3, [r7, #0]
 800fb2a:	781b      	ldrb	r3, [r3, #0]
 800fb2c:	2b5c      	cmp	r3, #92	@ 0x5c
 800fb2e:	d0f4      	beq.n	800fb1a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800fb30:	693b      	ldr	r3, [r7, #16]
 800fb32:	2200      	movs	r2, #0
 800fb34:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800fb36:	683b      	ldr	r3, [r7, #0]
 800fb38:	781b      	ldrb	r3, [r3, #0]
 800fb3a:	2b1f      	cmp	r3, #31
 800fb3c:	d80a      	bhi.n	800fb54 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	2280      	movs	r2, #128	@ 0x80
 800fb42:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800fb46:	2100      	movs	r1, #0
 800fb48:	6878      	ldr	r0, [r7, #4]
 800fb4a:	f7ff fcfa 	bl	800f542 <dir_sdi>
 800fb4e:	4603      	mov	r3, r0
 800fb50:	75fb      	strb	r3, [r7, #23]
 800fb52:	e043      	b.n	800fbdc <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800fb54:	463b      	mov	r3, r7
 800fb56:	4619      	mov	r1, r3
 800fb58:	6878      	ldr	r0, [r7, #4]
 800fb5a:	f7ff ff3f 	bl	800f9dc <create_name>
 800fb5e:	4603      	mov	r3, r0
 800fb60:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800fb62:	7dfb      	ldrb	r3, [r7, #23]
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d134      	bne.n	800fbd2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800fb68:	6878      	ldr	r0, [r7, #4]
 800fb6a:	f7ff feb0 	bl	800f8ce <dir_find>
 800fb6e:	4603      	mov	r3, r0
 800fb70:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800fb78:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800fb7a:	7dfb      	ldrb	r3, [r7, #23]
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	d00a      	beq.n	800fb96 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800fb80:	7dfb      	ldrb	r3, [r7, #23]
 800fb82:	2b04      	cmp	r3, #4
 800fb84:	d127      	bne.n	800fbd6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800fb86:	7afb      	ldrb	r3, [r7, #11]
 800fb88:	f003 0304 	and.w	r3, r3, #4
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d122      	bne.n	800fbd6 <follow_path+0xd2>
 800fb90:	2305      	movs	r3, #5
 800fb92:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800fb94:	e01f      	b.n	800fbd6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800fb96:	7afb      	ldrb	r3, [r7, #11]
 800fb98:	f003 0304 	and.w	r3, r3, #4
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d11c      	bne.n	800fbda <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800fba0:	693b      	ldr	r3, [r7, #16]
 800fba2:	799b      	ldrb	r3, [r3, #6]
 800fba4:	f003 0310 	and.w	r3, r3, #16
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d102      	bne.n	800fbb2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800fbac:	2305      	movs	r3, #5
 800fbae:	75fb      	strb	r3, [r7, #23]
 800fbb0:	e014      	b.n	800fbdc <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800fbb2:	68fb      	ldr	r3, [r7, #12]
 800fbb4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	695b      	ldr	r3, [r3, #20]
 800fbbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fbc0:	4413      	add	r3, r2
 800fbc2:	4619      	mov	r1, r3
 800fbc4:	68f8      	ldr	r0, [r7, #12]
 800fbc6:	f7ff fe43 	bl	800f850 <ld_clust>
 800fbca:	4602      	mov	r2, r0
 800fbcc:	693b      	ldr	r3, [r7, #16]
 800fbce:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800fbd0:	e7c0      	b.n	800fb54 <follow_path+0x50>
			if (res != FR_OK) break;
 800fbd2:	bf00      	nop
 800fbd4:	e002      	b.n	800fbdc <follow_path+0xd8>
				break;
 800fbd6:	bf00      	nop
 800fbd8:	e000      	b.n	800fbdc <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800fbda:	bf00      	nop
			}
		}
	}

	return res;
 800fbdc:	7dfb      	ldrb	r3, [r7, #23]
}
 800fbde:	4618      	mov	r0, r3
 800fbe0:	3718      	adds	r7, #24
 800fbe2:	46bd      	mov	sp, r7
 800fbe4:	bd80      	pop	{r7, pc}

0800fbe6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800fbe6:	b480      	push	{r7}
 800fbe8:	b087      	sub	sp, #28
 800fbea:	af00      	add	r7, sp, #0
 800fbec:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800fbee:	f04f 33ff 	mov.w	r3, #4294967295
 800fbf2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	681b      	ldr	r3, [r3, #0]
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d031      	beq.n	800fc60 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	617b      	str	r3, [r7, #20]
 800fc02:	e002      	b.n	800fc0a <get_ldnumber+0x24>
 800fc04:	697b      	ldr	r3, [r7, #20]
 800fc06:	3301      	adds	r3, #1
 800fc08:	617b      	str	r3, [r7, #20]
 800fc0a:	697b      	ldr	r3, [r7, #20]
 800fc0c:	781b      	ldrb	r3, [r3, #0]
 800fc0e:	2b20      	cmp	r3, #32
 800fc10:	d903      	bls.n	800fc1a <get_ldnumber+0x34>
 800fc12:	697b      	ldr	r3, [r7, #20]
 800fc14:	781b      	ldrb	r3, [r3, #0]
 800fc16:	2b3a      	cmp	r3, #58	@ 0x3a
 800fc18:	d1f4      	bne.n	800fc04 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800fc1a:	697b      	ldr	r3, [r7, #20]
 800fc1c:	781b      	ldrb	r3, [r3, #0]
 800fc1e:	2b3a      	cmp	r3, #58	@ 0x3a
 800fc20:	d11c      	bne.n	800fc5c <get_ldnumber+0x76>
			tp = *path;
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	681b      	ldr	r3, [r3, #0]
 800fc26:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800fc28:	68fb      	ldr	r3, [r7, #12]
 800fc2a:	1c5a      	adds	r2, r3, #1
 800fc2c:	60fa      	str	r2, [r7, #12]
 800fc2e:	781b      	ldrb	r3, [r3, #0]
 800fc30:	3b30      	subs	r3, #48	@ 0x30
 800fc32:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800fc34:	68bb      	ldr	r3, [r7, #8]
 800fc36:	2b09      	cmp	r3, #9
 800fc38:	d80e      	bhi.n	800fc58 <get_ldnumber+0x72>
 800fc3a:	68fa      	ldr	r2, [r7, #12]
 800fc3c:	697b      	ldr	r3, [r7, #20]
 800fc3e:	429a      	cmp	r2, r3
 800fc40:	d10a      	bne.n	800fc58 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800fc42:	68bb      	ldr	r3, [r7, #8]
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d107      	bne.n	800fc58 <get_ldnumber+0x72>
					vol = (int)i;
 800fc48:	68bb      	ldr	r3, [r7, #8]
 800fc4a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800fc4c:	697b      	ldr	r3, [r7, #20]
 800fc4e:	3301      	adds	r3, #1
 800fc50:	617b      	str	r3, [r7, #20]
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	697a      	ldr	r2, [r7, #20]
 800fc56:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800fc58:	693b      	ldr	r3, [r7, #16]
 800fc5a:	e002      	b.n	800fc62 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800fc5c:	2300      	movs	r3, #0
 800fc5e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800fc60:	693b      	ldr	r3, [r7, #16]
}
 800fc62:	4618      	mov	r0, r3
 800fc64:	371c      	adds	r7, #28
 800fc66:	46bd      	mov	sp, r7
 800fc68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc6c:	4770      	bx	lr
	...

0800fc70 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800fc70:	b580      	push	{r7, lr}
 800fc72:	b082      	sub	sp, #8
 800fc74:	af00      	add	r7, sp, #0
 800fc76:	6078      	str	r0, [r7, #4]
 800fc78:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	2200      	movs	r2, #0
 800fc7e:	70da      	strb	r2, [r3, #3]
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	f04f 32ff 	mov.w	r2, #4294967295
 800fc86:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800fc88:	6839      	ldr	r1, [r7, #0]
 800fc8a:	6878      	ldr	r0, [r7, #4]
 800fc8c:	f7ff f8dc 	bl	800ee48 <move_window>
 800fc90:	4603      	mov	r3, r0
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d001      	beq.n	800fc9a <check_fs+0x2a>
 800fc96:	2304      	movs	r3, #4
 800fc98:	e038      	b.n	800fd0c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	3330      	adds	r3, #48	@ 0x30
 800fc9e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800fca2:	4618      	mov	r0, r3
 800fca4:	f7fe fe20 	bl	800e8e8 <ld_word>
 800fca8:	4603      	mov	r3, r0
 800fcaa:	461a      	mov	r2, r3
 800fcac:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800fcb0:	429a      	cmp	r2, r3
 800fcb2:	d001      	beq.n	800fcb8 <check_fs+0x48>
 800fcb4:	2303      	movs	r3, #3
 800fcb6:	e029      	b.n	800fd0c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800fcbe:	2be9      	cmp	r3, #233	@ 0xe9
 800fcc0:	d009      	beq.n	800fcd6 <check_fs+0x66>
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800fcc8:	2beb      	cmp	r3, #235	@ 0xeb
 800fcca:	d11e      	bne.n	800fd0a <check_fs+0x9a>
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800fcd2:	2b90      	cmp	r3, #144	@ 0x90
 800fcd4:	d119      	bne.n	800fd0a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	3330      	adds	r3, #48	@ 0x30
 800fcda:	3336      	adds	r3, #54	@ 0x36
 800fcdc:	4618      	mov	r0, r3
 800fcde:	f7fe fe1b 	bl	800e918 <ld_dword>
 800fce2:	4603      	mov	r3, r0
 800fce4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800fce8:	4a0a      	ldr	r2, [pc, #40]	@ (800fd14 <check_fs+0xa4>)
 800fcea:	4293      	cmp	r3, r2
 800fcec:	d101      	bne.n	800fcf2 <check_fs+0x82>
 800fcee:	2300      	movs	r3, #0
 800fcf0:	e00c      	b.n	800fd0c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	3330      	adds	r3, #48	@ 0x30
 800fcf6:	3352      	adds	r3, #82	@ 0x52
 800fcf8:	4618      	mov	r0, r3
 800fcfa:	f7fe fe0d 	bl	800e918 <ld_dword>
 800fcfe:	4603      	mov	r3, r0
 800fd00:	4a05      	ldr	r2, [pc, #20]	@ (800fd18 <check_fs+0xa8>)
 800fd02:	4293      	cmp	r3, r2
 800fd04:	d101      	bne.n	800fd0a <check_fs+0x9a>
 800fd06:	2300      	movs	r3, #0
 800fd08:	e000      	b.n	800fd0c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800fd0a:	2302      	movs	r3, #2
}
 800fd0c:	4618      	mov	r0, r3
 800fd0e:	3708      	adds	r7, #8
 800fd10:	46bd      	mov	sp, r7
 800fd12:	bd80      	pop	{r7, pc}
 800fd14:	00544146 	.word	0x00544146
 800fd18:	33544146 	.word	0x33544146

0800fd1c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800fd1c:	b580      	push	{r7, lr}
 800fd1e:	b096      	sub	sp, #88	@ 0x58
 800fd20:	af00      	add	r7, sp, #0
 800fd22:	60f8      	str	r0, [r7, #12]
 800fd24:	60b9      	str	r1, [r7, #8]
 800fd26:	4613      	mov	r3, r2
 800fd28:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800fd2a:	68bb      	ldr	r3, [r7, #8]
 800fd2c:	2200      	movs	r2, #0
 800fd2e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800fd30:	68f8      	ldr	r0, [r7, #12]
 800fd32:	f7ff ff58 	bl	800fbe6 <get_ldnumber>
 800fd36:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800fd38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	da01      	bge.n	800fd42 <find_volume+0x26>
 800fd3e:	230b      	movs	r3, #11
 800fd40:	e22d      	b.n	801019e <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800fd42:	4aa1      	ldr	r2, [pc, #644]	@ (800ffc8 <find_volume+0x2ac>)
 800fd44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fd46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fd4a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800fd4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d101      	bne.n	800fd56 <find_volume+0x3a>
 800fd52:	230c      	movs	r3, #12
 800fd54:	e223      	b.n	801019e <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800fd56:	68bb      	ldr	r3, [r7, #8]
 800fd58:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fd5a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800fd5c:	79fb      	ldrb	r3, [r7, #7]
 800fd5e:	f023 0301 	bic.w	r3, r3, #1
 800fd62:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800fd64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd66:	781b      	ldrb	r3, [r3, #0]
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	d01a      	beq.n	800fda2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800fd6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd6e:	785b      	ldrb	r3, [r3, #1]
 800fd70:	4618      	mov	r0, r3
 800fd72:	f7fe fd1b 	bl	800e7ac <disk_status>
 800fd76:	4603      	mov	r3, r0
 800fd78:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800fd7c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800fd80:	f003 0301 	and.w	r3, r3, #1
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d10c      	bne.n	800fda2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800fd88:	79fb      	ldrb	r3, [r7, #7]
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	d007      	beq.n	800fd9e <find_volume+0x82>
 800fd8e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800fd92:	f003 0304 	and.w	r3, r3, #4
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d001      	beq.n	800fd9e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800fd9a:	230a      	movs	r3, #10
 800fd9c:	e1ff      	b.n	801019e <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800fd9e:	2300      	movs	r3, #0
 800fda0:	e1fd      	b.n	801019e <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800fda2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fda4:	2200      	movs	r2, #0
 800fda6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800fda8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fdaa:	b2da      	uxtb	r2, r3
 800fdac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fdae:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800fdb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fdb2:	785b      	ldrb	r3, [r3, #1]
 800fdb4:	4618      	mov	r0, r3
 800fdb6:	f7fe fd13 	bl	800e7e0 <disk_initialize>
 800fdba:	4603      	mov	r3, r0
 800fdbc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800fdc0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800fdc4:	f003 0301 	and.w	r3, r3, #1
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d001      	beq.n	800fdd0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800fdcc:	2303      	movs	r3, #3
 800fdce:	e1e6      	b.n	801019e <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800fdd0:	79fb      	ldrb	r3, [r7, #7]
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d007      	beq.n	800fde6 <find_volume+0xca>
 800fdd6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800fdda:	f003 0304 	and.w	r3, r3, #4
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d001      	beq.n	800fde6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800fde2:	230a      	movs	r3, #10
 800fde4:	e1db      	b.n	801019e <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800fde6:	2300      	movs	r3, #0
 800fde8:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800fdea:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800fdec:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800fdee:	f7ff ff3f 	bl	800fc70 <check_fs>
 800fdf2:	4603      	mov	r3, r0
 800fdf4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800fdf8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800fdfc:	2b02      	cmp	r3, #2
 800fdfe:	d149      	bne.n	800fe94 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800fe00:	2300      	movs	r3, #0
 800fe02:	643b      	str	r3, [r7, #64]	@ 0x40
 800fe04:	e01e      	b.n	800fe44 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800fe06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe08:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800fe0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fe0e:	011b      	lsls	r3, r3, #4
 800fe10:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800fe14:	4413      	add	r3, r2
 800fe16:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800fe18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe1a:	3304      	adds	r3, #4
 800fe1c:	781b      	ldrb	r3, [r3, #0]
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d006      	beq.n	800fe30 <find_volume+0x114>
 800fe22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe24:	3308      	adds	r3, #8
 800fe26:	4618      	mov	r0, r3
 800fe28:	f7fe fd76 	bl	800e918 <ld_dword>
 800fe2c:	4602      	mov	r2, r0
 800fe2e:	e000      	b.n	800fe32 <find_volume+0x116>
 800fe30:	2200      	movs	r2, #0
 800fe32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fe34:	009b      	lsls	r3, r3, #2
 800fe36:	3358      	adds	r3, #88	@ 0x58
 800fe38:	443b      	add	r3, r7
 800fe3a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800fe3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fe40:	3301      	adds	r3, #1
 800fe42:	643b      	str	r3, [r7, #64]	@ 0x40
 800fe44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fe46:	2b03      	cmp	r3, #3
 800fe48:	d9dd      	bls.n	800fe06 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800fe4a:	2300      	movs	r3, #0
 800fe4c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800fe4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d002      	beq.n	800fe5a <find_volume+0x13e>
 800fe54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fe56:	3b01      	subs	r3, #1
 800fe58:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800fe5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fe5c:	009b      	lsls	r3, r3, #2
 800fe5e:	3358      	adds	r3, #88	@ 0x58
 800fe60:	443b      	add	r3, r7
 800fe62:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800fe66:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800fe68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	d005      	beq.n	800fe7a <find_volume+0x15e>
 800fe6e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800fe70:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800fe72:	f7ff fefd 	bl	800fc70 <check_fs>
 800fe76:	4603      	mov	r3, r0
 800fe78:	e000      	b.n	800fe7c <find_volume+0x160>
 800fe7a:	2303      	movs	r3, #3
 800fe7c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800fe80:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800fe84:	2b01      	cmp	r3, #1
 800fe86:	d905      	bls.n	800fe94 <find_volume+0x178>
 800fe88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fe8a:	3301      	adds	r3, #1
 800fe8c:	643b      	str	r3, [r7, #64]	@ 0x40
 800fe8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fe90:	2b03      	cmp	r3, #3
 800fe92:	d9e2      	bls.n	800fe5a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800fe94:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800fe98:	2b04      	cmp	r3, #4
 800fe9a:	d101      	bne.n	800fea0 <find_volume+0x184>
 800fe9c:	2301      	movs	r3, #1
 800fe9e:	e17e      	b.n	801019e <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800fea0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800fea4:	2b01      	cmp	r3, #1
 800fea6:	d901      	bls.n	800feac <find_volume+0x190>
 800fea8:	230d      	movs	r3, #13
 800feaa:	e178      	b.n	801019e <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800feac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800feae:	3330      	adds	r3, #48	@ 0x30
 800feb0:	330b      	adds	r3, #11
 800feb2:	4618      	mov	r0, r3
 800feb4:	f7fe fd18 	bl	800e8e8 <ld_word>
 800feb8:	4603      	mov	r3, r0
 800feba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800febe:	d001      	beq.n	800fec4 <find_volume+0x1a8>
 800fec0:	230d      	movs	r3, #13
 800fec2:	e16c      	b.n	801019e <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800fec4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fec6:	3330      	adds	r3, #48	@ 0x30
 800fec8:	3316      	adds	r3, #22
 800feca:	4618      	mov	r0, r3
 800fecc:	f7fe fd0c 	bl	800e8e8 <ld_word>
 800fed0:	4603      	mov	r3, r0
 800fed2:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800fed4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d106      	bne.n	800fee8 <find_volume+0x1cc>
 800feda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fedc:	3330      	adds	r3, #48	@ 0x30
 800fede:	3324      	adds	r3, #36	@ 0x24
 800fee0:	4618      	mov	r0, r3
 800fee2:	f7fe fd19 	bl	800e918 <ld_dword>
 800fee6:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800fee8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800feea:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800feec:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800feee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fef0:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800fef4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fef6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800fef8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fefa:	789b      	ldrb	r3, [r3, #2]
 800fefc:	2b01      	cmp	r3, #1
 800fefe:	d005      	beq.n	800ff0c <find_volume+0x1f0>
 800ff00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff02:	789b      	ldrb	r3, [r3, #2]
 800ff04:	2b02      	cmp	r3, #2
 800ff06:	d001      	beq.n	800ff0c <find_volume+0x1f0>
 800ff08:	230d      	movs	r3, #13
 800ff0a:	e148      	b.n	801019e <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800ff0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff0e:	789b      	ldrb	r3, [r3, #2]
 800ff10:	461a      	mov	r2, r3
 800ff12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ff14:	fb02 f303 	mul.w	r3, r2, r3
 800ff18:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800ff1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ff20:	461a      	mov	r2, r3
 800ff22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff24:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800ff26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff28:	895b      	ldrh	r3, [r3, #10]
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d008      	beq.n	800ff40 <find_volume+0x224>
 800ff2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff30:	895b      	ldrh	r3, [r3, #10]
 800ff32:	461a      	mov	r2, r3
 800ff34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff36:	895b      	ldrh	r3, [r3, #10]
 800ff38:	3b01      	subs	r3, #1
 800ff3a:	4013      	ands	r3, r2
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d001      	beq.n	800ff44 <find_volume+0x228>
 800ff40:	230d      	movs	r3, #13
 800ff42:	e12c      	b.n	801019e <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800ff44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff46:	3330      	adds	r3, #48	@ 0x30
 800ff48:	3311      	adds	r3, #17
 800ff4a:	4618      	mov	r0, r3
 800ff4c:	f7fe fccc 	bl	800e8e8 <ld_word>
 800ff50:	4603      	mov	r3, r0
 800ff52:	461a      	mov	r2, r3
 800ff54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff56:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800ff58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff5a:	891b      	ldrh	r3, [r3, #8]
 800ff5c:	f003 030f 	and.w	r3, r3, #15
 800ff60:	b29b      	uxth	r3, r3
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	d001      	beq.n	800ff6a <find_volume+0x24e>
 800ff66:	230d      	movs	r3, #13
 800ff68:	e119      	b.n	801019e <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800ff6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff6c:	3330      	adds	r3, #48	@ 0x30
 800ff6e:	3313      	adds	r3, #19
 800ff70:	4618      	mov	r0, r3
 800ff72:	f7fe fcb9 	bl	800e8e8 <ld_word>
 800ff76:	4603      	mov	r3, r0
 800ff78:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800ff7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	d106      	bne.n	800ff8e <find_volume+0x272>
 800ff80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff82:	3330      	adds	r3, #48	@ 0x30
 800ff84:	3320      	adds	r3, #32
 800ff86:	4618      	mov	r0, r3
 800ff88:	f7fe fcc6 	bl	800e918 <ld_dword>
 800ff8c:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800ff8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff90:	3330      	adds	r3, #48	@ 0x30
 800ff92:	330e      	adds	r3, #14
 800ff94:	4618      	mov	r0, r3
 800ff96:	f7fe fca7 	bl	800e8e8 <ld_word>
 800ff9a:	4603      	mov	r3, r0
 800ff9c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800ff9e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d101      	bne.n	800ffa8 <find_volume+0x28c>
 800ffa4:	230d      	movs	r3, #13
 800ffa6:	e0fa      	b.n	801019e <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800ffa8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800ffaa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ffac:	4413      	add	r3, r2
 800ffae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ffb0:	8912      	ldrh	r2, [r2, #8]
 800ffb2:	0912      	lsrs	r2, r2, #4
 800ffb4:	b292      	uxth	r2, r2
 800ffb6:	4413      	add	r3, r2
 800ffb8:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800ffba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ffbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ffbe:	429a      	cmp	r2, r3
 800ffc0:	d204      	bcs.n	800ffcc <find_volume+0x2b0>
 800ffc2:	230d      	movs	r3, #13
 800ffc4:	e0eb      	b.n	801019e <find_volume+0x482>
 800ffc6:	bf00      	nop
 800ffc8:	20035f44 	.word	0x20035f44
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800ffcc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ffce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ffd0:	1ad3      	subs	r3, r2, r3
 800ffd2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ffd4:	8952      	ldrh	r2, [r2, #10]
 800ffd6:	fbb3 f3f2 	udiv	r3, r3, r2
 800ffda:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800ffdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	d101      	bne.n	800ffe6 <find_volume+0x2ca>
 800ffe2:	230d      	movs	r3, #13
 800ffe4:	e0db      	b.n	801019e <find_volume+0x482>
		fmt = FS_FAT32;
 800ffe6:	2303      	movs	r3, #3
 800ffe8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800ffec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ffee:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800fff2:	4293      	cmp	r3, r2
 800fff4:	d802      	bhi.n	800fffc <find_volume+0x2e0>
 800fff6:	2302      	movs	r3, #2
 800fff8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800fffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fffe:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8010002:	4293      	cmp	r3, r2
 8010004:	d802      	bhi.n	801000c <find_volume+0x2f0>
 8010006:	2301      	movs	r3, #1
 8010008:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801000c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801000e:	1c9a      	adds	r2, r3, #2
 8010010:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010012:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8010014:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010016:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010018:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801001a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801001c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801001e:	441a      	add	r2, r3
 8010020:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010022:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8010024:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010026:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010028:	441a      	add	r2, r3
 801002a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801002c:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 801002e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010032:	2b03      	cmp	r3, #3
 8010034:	d11e      	bne.n	8010074 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8010036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010038:	3330      	adds	r3, #48	@ 0x30
 801003a:	332a      	adds	r3, #42	@ 0x2a
 801003c:	4618      	mov	r0, r3
 801003e:	f7fe fc53 	bl	800e8e8 <ld_word>
 8010042:	4603      	mov	r3, r0
 8010044:	2b00      	cmp	r3, #0
 8010046:	d001      	beq.n	801004c <find_volume+0x330>
 8010048:	230d      	movs	r3, #13
 801004a:	e0a8      	b.n	801019e <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801004c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801004e:	891b      	ldrh	r3, [r3, #8]
 8010050:	2b00      	cmp	r3, #0
 8010052:	d001      	beq.n	8010058 <find_volume+0x33c>
 8010054:	230d      	movs	r3, #13
 8010056:	e0a2      	b.n	801019e <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8010058:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801005a:	3330      	adds	r3, #48	@ 0x30
 801005c:	332c      	adds	r3, #44	@ 0x2c
 801005e:	4618      	mov	r0, r3
 8010060:	f7fe fc5a 	bl	800e918 <ld_dword>
 8010064:	4602      	mov	r2, r0
 8010066:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010068:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801006a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801006c:	695b      	ldr	r3, [r3, #20]
 801006e:	009b      	lsls	r3, r3, #2
 8010070:	647b      	str	r3, [r7, #68]	@ 0x44
 8010072:	e01f      	b.n	80100b4 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8010074:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010076:	891b      	ldrh	r3, [r3, #8]
 8010078:	2b00      	cmp	r3, #0
 801007a:	d101      	bne.n	8010080 <find_volume+0x364>
 801007c:	230d      	movs	r3, #13
 801007e:	e08e      	b.n	801019e <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8010080:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010082:	6a1a      	ldr	r2, [r3, #32]
 8010084:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010086:	441a      	add	r2, r3
 8010088:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801008a:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801008c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010090:	2b02      	cmp	r3, #2
 8010092:	d103      	bne.n	801009c <find_volume+0x380>
 8010094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010096:	695b      	ldr	r3, [r3, #20]
 8010098:	005b      	lsls	r3, r3, #1
 801009a:	e00a      	b.n	80100b2 <find_volume+0x396>
 801009c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801009e:	695a      	ldr	r2, [r3, #20]
 80100a0:	4613      	mov	r3, r2
 80100a2:	005b      	lsls	r3, r3, #1
 80100a4:	4413      	add	r3, r2
 80100a6:	085a      	lsrs	r2, r3, #1
 80100a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80100aa:	695b      	ldr	r3, [r3, #20]
 80100ac:	f003 0301 	and.w	r3, r3, #1
 80100b0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80100b2:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80100b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80100b6:	699a      	ldr	r2, [r3, #24]
 80100b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80100ba:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 80100be:	0a5b      	lsrs	r3, r3, #9
 80100c0:	429a      	cmp	r2, r3
 80100c2:	d201      	bcs.n	80100c8 <find_volume+0x3ac>
 80100c4:	230d      	movs	r3, #13
 80100c6:	e06a      	b.n	801019e <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80100c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80100ca:	f04f 32ff 	mov.w	r2, #4294967295
 80100ce:	611a      	str	r2, [r3, #16]
 80100d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80100d2:	691a      	ldr	r2, [r3, #16]
 80100d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80100d6:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 80100d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80100da:	2280      	movs	r2, #128	@ 0x80
 80100dc:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80100de:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80100e2:	2b03      	cmp	r3, #3
 80100e4:	d149      	bne.n	801017a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80100e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80100e8:	3330      	adds	r3, #48	@ 0x30
 80100ea:	3330      	adds	r3, #48	@ 0x30
 80100ec:	4618      	mov	r0, r3
 80100ee:	f7fe fbfb 	bl	800e8e8 <ld_word>
 80100f2:	4603      	mov	r3, r0
 80100f4:	2b01      	cmp	r3, #1
 80100f6:	d140      	bne.n	801017a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80100f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80100fa:	3301      	adds	r3, #1
 80100fc:	4619      	mov	r1, r3
 80100fe:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010100:	f7fe fea2 	bl	800ee48 <move_window>
 8010104:	4603      	mov	r3, r0
 8010106:	2b00      	cmp	r3, #0
 8010108:	d137      	bne.n	801017a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 801010a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801010c:	2200      	movs	r2, #0
 801010e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8010110:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010112:	3330      	adds	r3, #48	@ 0x30
 8010114:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8010118:	4618      	mov	r0, r3
 801011a:	f7fe fbe5 	bl	800e8e8 <ld_word>
 801011e:	4603      	mov	r3, r0
 8010120:	461a      	mov	r2, r3
 8010122:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8010126:	429a      	cmp	r2, r3
 8010128:	d127      	bne.n	801017a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801012a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801012c:	3330      	adds	r3, #48	@ 0x30
 801012e:	4618      	mov	r0, r3
 8010130:	f7fe fbf2 	bl	800e918 <ld_dword>
 8010134:	4603      	mov	r3, r0
 8010136:	4a1c      	ldr	r2, [pc, #112]	@ (80101a8 <find_volume+0x48c>)
 8010138:	4293      	cmp	r3, r2
 801013a:	d11e      	bne.n	801017a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801013c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801013e:	3330      	adds	r3, #48	@ 0x30
 8010140:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8010144:	4618      	mov	r0, r3
 8010146:	f7fe fbe7 	bl	800e918 <ld_dword>
 801014a:	4603      	mov	r3, r0
 801014c:	4a17      	ldr	r2, [pc, #92]	@ (80101ac <find_volume+0x490>)
 801014e:	4293      	cmp	r3, r2
 8010150:	d113      	bne.n	801017a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8010152:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010154:	3330      	adds	r3, #48	@ 0x30
 8010156:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 801015a:	4618      	mov	r0, r3
 801015c:	f7fe fbdc 	bl	800e918 <ld_dword>
 8010160:	4602      	mov	r2, r0
 8010162:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010164:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8010166:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010168:	3330      	adds	r3, #48	@ 0x30
 801016a:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 801016e:	4618      	mov	r0, r3
 8010170:	f7fe fbd2 	bl	800e918 <ld_dword>
 8010174:	4602      	mov	r2, r0
 8010176:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010178:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801017a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801017c:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8010180:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8010182:	4b0b      	ldr	r3, [pc, #44]	@ (80101b0 <find_volume+0x494>)
 8010184:	881b      	ldrh	r3, [r3, #0]
 8010186:	3301      	adds	r3, #1
 8010188:	b29a      	uxth	r2, r3
 801018a:	4b09      	ldr	r3, [pc, #36]	@ (80101b0 <find_volume+0x494>)
 801018c:	801a      	strh	r2, [r3, #0]
 801018e:	4b08      	ldr	r3, [pc, #32]	@ (80101b0 <find_volume+0x494>)
 8010190:	881a      	ldrh	r2, [r3, #0]
 8010192:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010194:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8010196:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010198:	f7fe fdee 	bl	800ed78 <clear_lock>
#endif
	return FR_OK;
 801019c:	2300      	movs	r3, #0
}
 801019e:	4618      	mov	r0, r3
 80101a0:	3758      	adds	r7, #88	@ 0x58
 80101a2:	46bd      	mov	sp, r7
 80101a4:	bd80      	pop	{r7, pc}
 80101a6:	bf00      	nop
 80101a8:	41615252 	.word	0x41615252
 80101ac:	61417272 	.word	0x61417272
 80101b0:	20035f48 	.word	0x20035f48

080101b4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80101b4:	b580      	push	{r7, lr}
 80101b6:	b084      	sub	sp, #16
 80101b8:	af00      	add	r7, sp, #0
 80101ba:	6078      	str	r0, [r7, #4]
 80101bc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80101be:	2309      	movs	r3, #9
 80101c0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d01c      	beq.n	8010202 <validate+0x4e>
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d018      	beq.n	8010202 <validate+0x4e>
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	781b      	ldrb	r3, [r3, #0]
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	d013      	beq.n	8010202 <validate+0x4e>
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	889a      	ldrh	r2, [r3, #4]
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	88db      	ldrh	r3, [r3, #6]
 80101e4:	429a      	cmp	r2, r3
 80101e6:	d10c      	bne.n	8010202 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	681b      	ldr	r3, [r3, #0]
 80101ec:	785b      	ldrb	r3, [r3, #1]
 80101ee:	4618      	mov	r0, r3
 80101f0:	f7fe fadc 	bl	800e7ac <disk_status>
 80101f4:	4603      	mov	r3, r0
 80101f6:	f003 0301 	and.w	r3, r3, #1
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d101      	bne.n	8010202 <validate+0x4e>
			res = FR_OK;
 80101fe:	2300      	movs	r3, #0
 8010200:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8010202:	7bfb      	ldrb	r3, [r7, #15]
 8010204:	2b00      	cmp	r3, #0
 8010206:	d102      	bne.n	801020e <validate+0x5a>
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	681b      	ldr	r3, [r3, #0]
 801020c:	e000      	b.n	8010210 <validate+0x5c>
 801020e:	2300      	movs	r3, #0
 8010210:	683a      	ldr	r2, [r7, #0]
 8010212:	6013      	str	r3, [r2, #0]
	return res;
 8010214:	7bfb      	ldrb	r3, [r7, #15]
}
 8010216:	4618      	mov	r0, r3
 8010218:	3710      	adds	r7, #16
 801021a:	46bd      	mov	sp, r7
 801021c:	bd80      	pop	{r7, pc}
	...

08010220 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8010220:	b580      	push	{r7, lr}
 8010222:	b088      	sub	sp, #32
 8010224:	af00      	add	r7, sp, #0
 8010226:	60f8      	str	r0, [r7, #12]
 8010228:	60b9      	str	r1, [r7, #8]
 801022a:	4613      	mov	r3, r2
 801022c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801022e:	68bb      	ldr	r3, [r7, #8]
 8010230:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8010232:	f107 0310 	add.w	r3, r7, #16
 8010236:	4618      	mov	r0, r3
 8010238:	f7ff fcd5 	bl	800fbe6 <get_ldnumber>
 801023c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801023e:	69fb      	ldr	r3, [r7, #28]
 8010240:	2b00      	cmp	r3, #0
 8010242:	da01      	bge.n	8010248 <f_mount+0x28>
 8010244:	230b      	movs	r3, #11
 8010246:	e02b      	b.n	80102a0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8010248:	4a17      	ldr	r2, [pc, #92]	@ (80102a8 <f_mount+0x88>)
 801024a:	69fb      	ldr	r3, [r7, #28]
 801024c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010250:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8010252:	69bb      	ldr	r3, [r7, #24]
 8010254:	2b00      	cmp	r3, #0
 8010256:	d005      	beq.n	8010264 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8010258:	69b8      	ldr	r0, [r7, #24]
 801025a:	f7fe fd8d 	bl	800ed78 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801025e:	69bb      	ldr	r3, [r7, #24]
 8010260:	2200      	movs	r2, #0
 8010262:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8010264:	68fb      	ldr	r3, [r7, #12]
 8010266:	2b00      	cmp	r3, #0
 8010268:	d002      	beq.n	8010270 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801026a:	68fb      	ldr	r3, [r7, #12]
 801026c:	2200      	movs	r2, #0
 801026e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8010270:	68fa      	ldr	r2, [r7, #12]
 8010272:	490d      	ldr	r1, [pc, #52]	@ (80102a8 <f_mount+0x88>)
 8010274:	69fb      	ldr	r3, [r7, #28]
 8010276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	2b00      	cmp	r3, #0
 801027e:	d002      	beq.n	8010286 <f_mount+0x66>
 8010280:	79fb      	ldrb	r3, [r7, #7]
 8010282:	2b01      	cmp	r3, #1
 8010284:	d001      	beq.n	801028a <f_mount+0x6a>
 8010286:	2300      	movs	r3, #0
 8010288:	e00a      	b.n	80102a0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801028a:	f107 010c 	add.w	r1, r7, #12
 801028e:	f107 0308 	add.w	r3, r7, #8
 8010292:	2200      	movs	r2, #0
 8010294:	4618      	mov	r0, r3
 8010296:	f7ff fd41 	bl	800fd1c <find_volume>
 801029a:	4603      	mov	r3, r0
 801029c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801029e:	7dfb      	ldrb	r3, [r7, #23]
}
 80102a0:	4618      	mov	r0, r3
 80102a2:	3720      	adds	r7, #32
 80102a4:	46bd      	mov	sp, r7
 80102a6:	bd80      	pop	{r7, pc}
 80102a8:	20035f44 	.word	0x20035f44

080102ac <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80102ac:	b580      	push	{r7, lr}
 80102ae:	b098      	sub	sp, #96	@ 0x60
 80102b0:	af00      	add	r7, sp, #0
 80102b2:	60f8      	str	r0, [r7, #12]
 80102b4:	60b9      	str	r1, [r7, #8]
 80102b6:	4613      	mov	r3, r2
 80102b8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80102ba:	68fb      	ldr	r3, [r7, #12]
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d101      	bne.n	80102c4 <f_open+0x18>
 80102c0:	2309      	movs	r3, #9
 80102c2:	e1a9      	b.n	8010618 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80102c4:	79fb      	ldrb	r3, [r7, #7]
 80102c6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80102ca:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80102cc:	79fa      	ldrb	r2, [r7, #7]
 80102ce:	f107 0110 	add.w	r1, r7, #16
 80102d2:	f107 0308 	add.w	r3, r7, #8
 80102d6:	4618      	mov	r0, r3
 80102d8:	f7ff fd20 	bl	800fd1c <find_volume>
 80102dc:	4603      	mov	r3, r0
 80102de:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 80102e2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	f040 818d 	bne.w	8010606 <f_open+0x35a>
		dj.obj.fs = fs;
 80102ec:	693b      	ldr	r3, [r7, #16]
 80102ee:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80102f0:	68ba      	ldr	r2, [r7, #8]
 80102f2:	f107 0314 	add.w	r3, r7, #20
 80102f6:	4611      	mov	r1, r2
 80102f8:	4618      	mov	r0, r3
 80102fa:	f7ff fc03 	bl	800fb04 <follow_path>
 80102fe:	4603      	mov	r3, r0
 8010300:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8010304:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010308:	2b00      	cmp	r3, #0
 801030a:	d118      	bne.n	801033e <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801030c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8010310:	b25b      	sxtb	r3, r3
 8010312:	2b00      	cmp	r3, #0
 8010314:	da03      	bge.n	801031e <f_open+0x72>
				res = FR_INVALID_NAME;
 8010316:	2306      	movs	r3, #6
 8010318:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 801031c:	e00f      	b.n	801033e <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801031e:	79fb      	ldrb	r3, [r7, #7]
 8010320:	2b01      	cmp	r3, #1
 8010322:	bf8c      	ite	hi
 8010324:	2301      	movhi	r3, #1
 8010326:	2300      	movls	r3, #0
 8010328:	b2db      	uxtb	r3, r3
 801032a:	461a      	mov	r2, r3
 801032c:	f107 0314 	add.w	r3, r7, #20
 8010330:	4611      	mov	r1, r2
 8010332:	4618      	mov	r0, r3
 8010334:	f7fe fbd8 	bl	800eae8 <chk_lock>
 8010338:	4603      	mov	r3, r0
 801033a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801033e:	79fb      	ldrb	r3, [r7, #7]
 8010340:	f003 031c 	and.w	r3, r3, #28
 8010344:	2b00      	cmp	r3, #0
 8010346:	d07f      	beq.n	8010448 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8010348:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801034c:	2b00      	cmp	r3, #0
 801034e:	d017      	beq.n	8010380 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8010350:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010354:	2b04      	cmp	r3, #4
 8010356:	d10e      	bne.n	8010376 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8010358:	f7fe fc22 	bl	800eba0 <enq_lock>
 801035c:	4603      	mov	r3, r0
 801035e:	2b00      	cmp	r3, #0
 8010360:	d006      	beq.n	8010370 <f_open+0xc4>
 8010362:	f107 0314 	add.w	r3, r7, #20
 8010366:	4618      	mov	r0, r3
 8010368:	f7ff fb06 	bl	800f978 <dir_register>
 801036c:	4603      	mov	r3, r0
 801036e:	e000      	b.n	8010372 <f_open+0xc6>
 8010370:	2312      	movs	r3, #18
 8010372:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8010376:	79fb      	ldrb	r3, [r7, #7]
 8010378:	f043 0308 	orr.w	r3, r3, #8
 801037c:	71fb      	strb	r3, [r7, #7]
 801037e:	e010      	b.n	80103a2 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8010380:	7ebb      	ldrb	r3, [r7, #26]
 8010382:	f003 0311 	and.w	r3, r3, #17
 8010386:	2b00      	cmp	r3, #0
 8010388:	d003      	beq.n	8010392 <f_open+0xe6>
					res = FR_DENIED;
 801038a:	2307      	movs	r3, #7
 801038c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8010390:	e007      	b.n	80103a2 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8010392:	79fb      	ldrb	r3, [r7, #7]
 8010394:	f003 0304 	and.w	r3, r3, #4
 8010398:	2b00      	cmp	r3, #0
 801039a:	d002      	beq.n	80103a2 <f_open+0xf6>
 801039c:	2308      	movs	r3, #8
 801039e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80103a2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d168      	bne.n	801047c <f_open+0x1d0>
 80103aa:	79fb      	ldrb	r3, [r7, #7]
 80103ac:	f003 0308 	and.w	r3, r3, #8
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d063      	beq.n	801047c <f_open+0x1d0>
				dw = GET_FATTIME();
 80103b4:	f7fd ffb8 	bl	800e328 <get_fattime>
 80103b8:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80103ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80103bc:	330e      	adds	r3, #14
 80103be:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80103c0:	4618      	mov	r0, r3
 80103c2:	f7fe fae7 	bl	800e994 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80103c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80103c8:	3316      	adds	r3, #22
 80103ca:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80103cc:	4618      	mov	r0, r3
 80103ce:	f7fe fae1 	bl	800e994 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80103d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80103d4:	330b      	adds	r3, #11
 80103d6:	2220      	movs	r2, #32
 80103d8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80103da:	693b      	ldr	r3, [r7, #16]
 80103dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80103de:	4611      	mov	r1, r2
 80103e0:	4618      	mov	r0, r3
 80103e2:	f7ff fa35 	bl	800f850 <ld_clust>
 80103e6:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80103e8:	693b      	ldr	r3, [r7, #16]
 80103ea:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80103ec:	2200      	movs	r2, #0
 80103ee:	4618      	mov	r0, r3
 80103f0:	f7ff fa4d 	bl	800f88e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80103f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80103f6:	331c      	adds	r3, #28
 80103f8:	2100      	movs	r1, #0
 80103fa:	4618      	mov	r0, r3
 80103fc:	f7fe faca 	bl	800e994 <st_dword>
					fs->wflag = 1;
 8010400:	693b      	ldr	r3, [r7, #16]
 8010402:	2201      	movs	r2, #1
 8010404:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8010406:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010408:	2b00      	cmp	r3, #0
 801040a:	d037      	beq.n	801047c <f_open+0x1d0>
						dw = fs->winsect;
 801040c:	693b      	ldr	r3, [r7, #16]
 801040e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010410:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8010412:	f107 0314 	add.w	r3, r7, #20
 8010416:	2200      	movs	r2, #0
 8010418:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 801041a:	4618      	mov	r0, r3
 801041c:	f7fe ff60 	bl	800f2e0 <remove_chain>
 8010420:	4603      	mov	r3, r0
 8010422:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8010426:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801042a:	2b00      	cmp	r3, #0
 801042c:	d126      	bne.n	801047c <f_open+0x1d0>
							res = move_window(fs, dw);
 801042e:	693b      	ldr	r3, [r7, #16]
 8010430:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8010432:	4618      	mov	r0, r3
 8010434:	f7fe fd08 	bl	800ee48 <move_window>
 8010438:	4603      	mov	r3, r0
 801043a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801043e:	693b      	ldr	r3, [r7, #16]
 8010440:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010442:	3a01      	subs	r2, #1
 8010444:	60da      	str	r2, [r3, #12]
 8010446:	e019      	b.n	801047c <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8010448:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801044c:	2b00      	cmp	r3, #0
 801044e:	d115      	bne.n	801047c <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8010450:	7ebb      	ldrb	r3, [r7, #26]
 8010452:	f003 0310 	and.w	r3, r3, #16
 8010456:	2b00      	cmp	r3, #0
 8010458:	d003      	beq.n	8010462 <f_open+0x1b6>
					res = FR_NO_FILE;
 801045a:	2304      	movs	r3, #4
 801045c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8010460:	e00c      	b.n	801047c <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8010462:	79fb      	ldrb	r3, [r7, #7]
 8010464:	f003 0302 	and.w	r3, r3, #2
 8010468:	2b00      	cmp	r3, #0
 801046a:	d007      	beq.n	801047c <f_open+0x1d0>
 801046c:	7ebb      	ldrb	r3, [r7, #26]
 801046e:	f003 0301 	and.w	r3, r3, #1
 8010472:	2b00      	cmp	r3, #0
 8010474:	d002      	beq.n	801047c <f_open+0x1d0>
						res = FR_DENIED;
 8010476:	2307      	movs	r3, #7
 8010478:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 801047c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010480:	2b00      	cmp	r3, #0
 8010482:	d126      	bne.n	80104d2 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8010484:	79fb      	ldrb	r3, [r7, #7]
 8010486:	f003 0308 	and.w	r3, r3, #8
 801048a:	2b00      	cmp	r3, #0
 801048c:	d003      	beq.n	8010496 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 801048e:	79fb      	ldrb	r3, [r7, #7]
 8010490:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010494:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8010496:	693b      	ldr	r3, [r7, #16]
 8010498:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801049a:	68fb      	ldr	r3, [r7, #12]
 801049c:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 801049e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80104a0:	68fb      	ldr	r3, [r7, #12]
 80104a2:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80104a4:	79fb      	ldrb	r3, [r7, #7]
 80104a6:	2b01      	cmp	r3, #1
 80104a8:	bf8c      	ite	hi
 80104aa:	2301      	movhi	r3, #1
 80104ac:	2300      	movls	r3, #0
 80104ae:	b2db      	uxtb	r3, r3
 80104b0:	461a      	mov	r2, r3
 80104b2:	f107 0314 	add.w	r3, r7, #20
 80104b6:	4611      	mov	r1, r2
 80104b8:	4618      	mov	r0, r3
 80104ba:	f7fe fb93 	bl	800ebe4 <inc_lock>
 80104be:	4602      	mov	r2, r0
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80104c4:	68fb      	ldr	r3, [r7, #12]
 80104c6:	691b      	ldr	r3, [r3, #16]
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d102      	bne.n	80104d2 <f_open+0x226>
 80104cc:	2302      	movs	r3, #2
 80104ce:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80104d2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	f040 8095 	bne.w	8010606 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80104dc:	693b      	ldr	r3, [r7, #16]
 80104de:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80104e0:	4611      	mov	r1, r2
 80104e2:	4618      	mov	r0, r3
 80104e4:	f7ff f9b4 	bl	800f850 <ld_clust>
 80104e8:	4602      	mov	r2, r0
 80104ea:	68fb      	ldr	r3, [r7, #12]
 80104ec:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80104ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80104f0:	331c      	adds	r3, #28
 80104f2:	4618      	mov	r0, r3
 80104f4:	f7fe fa10 	bl	800e918 <ld_dword>
 80104f8:	4602      	mov	r2, r0
 80104fa:	68fb      	ldr	r3, [r7, #12]
 80104fc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80104fe:	68fb      	ldr	r3, [r7, #12]
 8010500:	2200      	movs	r2, #0
 8010502:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8010504:	693a      	ldr	r2, [r7, #16]
 8010506:	68fb      	ldr	r3, [r7, #12]
 8010508:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801050a:	693b      	ldr	r3, [r7, #16]
 801050c:	88da      	ldrh	r2, [r3, #6]
 801050e:	68fb      	ldr	r3, [r7, #12]
 8010510:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8010512:	68fb      	ldr	r3, [r7, #12]
 8010514:	79fa      	ldrb	r2, [r7, #7]
 8010516:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8010518:	68fb      	ldr	r3, [r7, #12]
 801051a:	2200      	movs	r2, #0
 801051c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801051e:	68fb      	ldr	r3, [r7, #12]
 8010520:	2200      	movs	r2, #0
 8010522:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8010524:	68fb      	ldr	r3, [r7, #12]
 8010526:	2200      	movs	r2, #0
 8010528:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801052a:	68fb      	ldr	r3, [r7, #12]
 801052c:	3330      	adds	r3, #48	@ 0x30
 801052e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010532:	2100      	movs	r1, #0
 8010534:	4618      	mov	r0, r3
 8010536:	f7fe fa7a 	bl	800ea2e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801053a:	79fb      	ldrb	r3, [r7, #7]
 801053c:	f003 0320 	and.w	r3, r3, #32
 8010540:	2b00      	cmp	r3, #0
 8010542:	d060      	beq.n	8010606 <f_open+0x35a>
 8010544:	68fb      	ldr	r3, [r7, #12]
 8010546:	68db      	ldr	r3, [r3, #12]
 8010548:	2b00      	cmp	r3, #0
 801054a:	d05c      	beq.n	8010606 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801054c:	68fb      	ldr	r3, [r7, #12]
 801054e:	68da      	ldr	r2, [r3, #12]
 8010550:	68fb      	ldr	r3, [r7, #12]
 8010552:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8010554:	693b      	ldr	r3, [r7, #16]
 8010556:	895b      	ldrh	r3, [r3, #10]
 8010558:	025b      	lsls	r3, r3, #9
 801055a:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801055c:	68fb      	ldr	r3, [r7, #12]
 801055e:	689b      	ldr	r3, [r3, #8]
 8010560:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010562:	68fb      	ldr	r3, [r7, #12]
 8010564:	68db      	ldr	r3, [r3, #12]
 8010566:	657b      	str	r3, [r7, #84]	@ 0x54
 8010568:	e016      	b.n	8010598 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 801056a:	68fb      	ldr	r3, [r7, #12]
 801056c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801056e:	4618      	mov	r0, r3
 8010570:	f7fe fd25 	bl	800efbe <get_fat>
 8010574:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8010576:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8010578:	2b01      	cmp	r3, #1
 801057a:	d802      	bhi.n	8010582 <f_open+0x2d6>
 801057c:	2302      	movs	r3, #2
 801057e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8010582:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8010584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010588:	d102      	bne.n	8010590 <f_open+0x2e4>
 801058a:	2301      	movs	r3, #1
 801058c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010590:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8010592:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010594:	1ad3      	subs	r3, r2, r3
 8010596:	657b      	str	r3, [r7, #84]	@ 0x54
 8010598:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801059c:	2b00      	cmp	r3, #0
 801059e:	d103      	bne.n	80105a8 <f_open+0x2fc>
 80105a0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80105a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80105a4:	429a      	cmp	r2, r3
 80105a6:	d8e0      	bhi.n	801056a <f_open+0x2be>
				}
				fp->clust = clst;
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80105ac:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80105ae:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d127      	bne.n	8010606 <f_open+0x35a>
 80105b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80105b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d022      	beq.n	8010606 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80105c0:	693b      	ldr	r3, [r7, #16]
 80105c2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80105c4:	4618      	mov	r0, r3
 80105c6:	f7fe fcdb 	bl	800ef80 <clust2sect>
 80105ca:	6478      	str	r0, [r7, #68]	@ 0x44
 80105cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d103      	bne.n	80105da <f_open+0x32e>
						res = FR_INT_ERR;
 80105d2:	2302      	movs	r3, #2
 80105d4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80105d8:	e015      	b.n	8010606 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80105da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80105dc:	0a5a      	lsrs	r2, r3, #9
 80105de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80105e0:	441a      	add	r2, r3
 80105e2:	68fb      	ldr	r3, [r7, #12]
 80105e4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80105e6:	693b      	ldr	r3, [r7, #16]
 80105e8:	7858      	ldrb	r0, [r3, #1]
 80105ea:	68fb      	ldr	r3, [r7, #12]
 80105ec:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80105f0:	68fb      	ldr	r3, [r7, #12]
 80105f2:	6a1a      	ldr	r2, [r3, #32]
 80105f4:	2301      	movs	r3, #1
 80105f6:	f7fe f919 	bl	800e82c <disk_read>
 80105fa:	4603      	mov	r3, r0
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d002      	beq.n	8010606 <f_open+0x35a>
 8010600:	2301      	movs	r3, #1
 8010602:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8010606:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801060a:	2b00      	cmp	r3, #0
 801060c:	d002      	beq.n	8010614 <f_open+0x368>
 801060e:	68fb      	ldr	r3, [r7, #12]
 8010610:	2200      	movs	r2, #0
 8010612:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8010614:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8010618:	4618      	mov	r0, r3
 801061a:	3760      	adds	r7, #96	@ 0x60
 801061c:	46bd      	mov	sp, r7
 801061e:	bd80      	pop	{r7, pc}

08010620 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8010620:	b580      	push	{r7, lr}
 8010622:	b08e      	sub	sp, #56	@ 0x38
 8010624:	af00      	add	r7, sp, #0
 8010626:	60f8      	str	r0, [r7, #12]
 8010628:	60b9      	str	r1, [r7, #8]
 801062a:	607a      	str	r2, [r7, #4]
 801062c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 801062e:	68bb      	ldr	r3, [r7, #8]
 8010630:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8010632:	683b      	ldr	r3, [r7, #0]
 8010634:	2200      	movs	r2, #0
 8010636:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8010638:	68fb      	ldr	r3, [r7, #12]
 801063a:	f107 0214 	add.w	r2, r7, #20
 801063e:	4611      	mov	r1, r2
 8010640:	4618      	mov	r0, r3
 8010642:	f7ff fdb7 	bl	80101b4 <validate>
 8010646:	4603      	mov	r3, r0
 8010648:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801064c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010650:	2b00      	cmp	r3, #0
 8010652:	d107      	bne.n	8010664 <f_read+0x44>
 8010654:	68fb      	ldr	r3, [r7, #12]
 8010656:	7d5b      	ldrb	r3, [r3, #21]
 8010658:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 801065c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010660:	2b00      	cmp	r3, #0
 8010662:	d002      	beq.n	801066a <f_read+0x4a>
 8010664:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010668:	e115      	b.n	8010896 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 801066a:	68fb      	ldr	r3, [r7, #12]
 801066c:	7d1b      	ldrb	r3, [r3, #20]
 801066e:	f003 0301 	and.w	r3, r3, #1
 8010672:	2b00      	cmp	r3, #0
 8010674:	d101      	bne.n	801067a <f_read+0x5a>
 8010676:	2307      	movs	r3, #7
 8010678:	e10d      	b.n	8010896 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 801067a:	68fb      	ldr	r3, [r7, #12]
 801067c:	68da      	ldr	r2, [r3, #12]
 801067e:	68fb      	ldr	r3, [r7, #12]
 8010680:	699b      	ldr	r3, [r3, #24]
 8010682:	1ad3      	subs	r3, r2, r3
 8010684:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8010686:	687a      	ldr	r2, [r7, #4]
 8010688:	6a3b      	ldr	r3, [r7, #32]
 801068a:	429a      	cmp	r2, r3
 801068c:	f240 80fe 	bls.w	801088c <f_read+0x26c>
 8010690:	6a3b      	ldr	r3, [r7, #32]
 8010692:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8010694:	e0fa      	b.n	801088c <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8010696:	68fb      	ldr	r3, [r7, #12]
 8010698:	699b      	ldr	r3, [r3, #24]
 801069a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801069e:	2b00      	cmp	r3, #0
 80106a0:	f040 80c6 	bne.w	8010830 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80106a4:	68fb      	ldr	r3, [r7, #12]
 80106a6:	699b      	ldr	r3, [r3, #24]
 80106a8:	0a5b      	lsrs	r3, r3, #9
 80106aa:	697a      	ldr	r2, [r7, #20]
 80106ac:	8952      	ldrh	r2, [r2, #10]
 80106ae:	3a01      	subs	r2, #1
 80106b0:	4013      	ands	r3, r2
 80106b2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80106b4:	69fb      	ldr	r3, [r7, #28]
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d12f      	bne.n	801071a <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80106ba:	68fb      	ldr	r3, [r7, #12]
 80106bc:	699b      	ldr	r3, [r3, #24]
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d103      	bne.n	80106ca <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80106c2:	68fb      	ldr	r3, [r7, #12]
 80106c4:	689b      	ldr	r3, [r3, #8]
 80106c6:	633b      	str	r3, [r7, #48]	@ 0x30
 80106c8:	e013      	b.n	80106f2 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80106ca:	68fb      	ldr	r3, [r7, #12]
 80106cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d007      	beq.n	80106e2 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80106d2:	68fb      	ldr	r3, [r7, #12]
 80106d4:	699b      	ldr	r3, [r3, #24]
 80106d6:	4619      	mov	r1, r3
 80106d8:	68f8      	ldr	r0, [r7, #12]
 80106da:	f7fe fefe 	bl	800f4da <clmt_clust>
 80106de:	6338      	str	r0, [r7, #48]	@ 0x30
 80106e0:	e007      	b.n	80106f2 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80106e2:	68fa      	ldr	r2, [r7, #12]
 80106e4:	68fb      	ldr	r3, [r7, #12]
 80106e6:	69db      	ldr	r3, [r3, #28]
 80106e8:	4619      	mov	r1, r3
 80106ea:	4610      	mov	r0, r2
 80106ec:	f7fe fc67 	bl	800efbe <get_fat>
 80106f0:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80106f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80106f4:	2b01      	cmp	r3, #1
 80106f6:	d804      	bhi.n	8010702 <f_read+0xe2>
 80106f8:	68fb      	ldr	r3, [r7, #12]
 80106fa:	2202      	movs	r2, #2
 80106fc:	755a      	strb	r2, [r3, #21]
 80106fe:	2302      	movs	r3, #2
 8010700:	e0c9      	b.n	8010896 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010708:	d104      	bne.n	8010714 <f_read+0xf4>
 801070a:	68fb      	ldr	r3, [r7, #12]
 801070c:	2201      	movs	r2, #1
 801070e:	755a      	strb	r2, [r3, #21]
 8010710:	2301      	movs	r3, #1
 8010712:	e0c0      	b.n	8010896 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010718:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801071a:	697a      	ldr	r2, [r7, #20]
 801071c:	68fb      	ldr	r3, [r7, #12]
 801071e:	69db      	ldr	r3, [r3, #28]
 8010720:	4619      	mov	r1, r3
 8010722:	4610      	mov	r0, r2
 8010724:	f7fe fc2c 	bl	800ef80 <clust2sect>
 8010728:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801072a:	69bb      	ldr	r3, [r7, #24]
 801072c:	2b00      	cmp	r3, #0
 801072e:	d104      	bne.n	801073a <f_read+0x11a>
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	2202      	movs	r2, #2
 8010734:	755a      	strb	r2, [r3, #21]
 8010736:	2302      	movs	r3, #2
 8010738:	e0ad      	b.n	8010896 <f_read+0x276>
			sect += csect;
 801073a:	69ba      	ldr	r2, [r7, #24]
 801073c:	69fb      	ldr	r3, [r7, #28]
 801073e:	4413      	add	r3, r2
 8010740:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	0a5b      	lsrs	r3, r3, #9
 8010746:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8010748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801074a:	2b00      	cmp	r3, #0
 801074c:	d039      	beq.n	80107c2 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801074e:	69fa      	ldr	r2, [r7, #28]
 8010750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010752:	4413      	add	r3, r2
 8010754:	697a      	ldr	r2, [r7, #20]
 8010756:	8952      	ldrh	r2, [r2, #10]
 8010758:	4293      	cmp	r3, r2
 801075a:	d905      	bls.n	8010768 <f_read+0x148>
					cc = fs->csize - csect;
 801075c:	697b      	ldr	r3, [r7, #20]
 801075e:	895b      	ldrh	r3, [r3, #10]
 8010760:	461a      	mov	r2, r3
 8010762:	69fb      	ldr	r3, [r7, #28]
 8010764:	1ad3      	subs	r3, r2, r3
 8010766:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010768:	697b      	ldr	r3, [r7, #20]
 801076a:	7858      	ldrb	r0, [r3, #1]
 801076c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801076e:	69ba      	ldr	r2, [r7, #24]
 8010770:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8010772:	f7fe f85b 	bl	800e82c <disk_read>
 8010776:	4603      	mov	r3, r0
 8010778:	2b00      	cmp	r3, #0
 801077a:	d004      	beq.n	8010786 <f_read+0x166>
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	2201      	movs	r2, #1
 8010780:	755a      	strb	r2, [r3, #21]
 8010782:	2301      	movs	r3, #1
 8010784:	e087      	b.n	8010896 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8010786:	68fb      	ldr	r3, [r7, #12]
 8010788:	7d1b      	ldrb	r3, [r3, #20]
 801078a:	b25b      	sxtb	r3, r3
 801078c:	2b00      	cmp	r3, #0
 801078e:	da14      	bge.n	80107ba <f_read+0x19a>
 8010790:	68fb      	ldr	r3, [r7, #12]
 8010792:	6a1a      	ldr	r2, [r3, #32]
 8010794:	69bb      	ldr	r3, [r7, #24]
 8010796:	1ad3      	subs	r3, r2, r3
 8010798:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801079a:	429a      	cmp	r2, r3
 801079c:	d90d      	bls.n	80107ba <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	6a1a      	ldr	r2, [r3, #32]
 80107a2:	69bb      	ldr	r3, [r7, #24]
 80107a4:	1ad3      	subs	r3, r2, r3
 80107a6:	025b      	lsls	r3, r3, #9
 80107a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80107aa:	18d0      	adds	r0, r2, r3
 80107ac:	68fb      	ldr	r3, [r7, #12]
 80107ae:	3330      	adds	r3, #48	@ 0x30
 80107b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80107b4:	4619      	mov	r1, r3
 80107b6:	f7fe f919 	bl	800e9ec <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80107ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107bc:	025b      	lsls	r3, r3, #9
 80107be:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 80107c0:	e050      	b.n	8010864 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80107c2:	68fb      	ldr	r3, [r7, #12]
 80107c4:	6a1b      	ldr	r3, [r3, #32]
 80107c6:	69ba      	ldr	r2, [r7, #24]
 80107c8:	429a      	cmp	r2, r3
 80107ca:	d02e      	beq.n	801082a <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80107cc:	68fb      	ldr	r3, [r7, #12]
 80107ce:	7d1b      	ldrb	r3, [r3, #20]
 80107d0:	b25b      	sxtb	r3, r3
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	da18      	bge.n	8010808 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80107d6:	697b      	ldr	r3, [r7, #20]
 80107d8:	7858      	ldrb	r0, [r3, #1]
 80107da:	68fb      	ldr	r3, [r7, #12]
 80107dc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80107e0:	68fb      	ldr	r3, [r7, #12]
 80107e2:	6a1a      	ldr	r2, [r3, #32]
 80107e4:	2301      	movs	r3, #1
 80107e6:	f7fe f841 	bl	800e86c <disk_write>
 80107ea:	4603      	mov	r3, r0
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d004      	beq.n	80107fa <f_read+0x1da>
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	2201      	movs	r2, #1
 80107f4:	755a      	strb	r2, [r3, #21]
 80107f6:	2301      	movs	r3, #1
 80107f8:	e04d      	b.n	8010896 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 80107fa:	68fb      	ldr	r3, [r7, #12]
 80107fc:	7d1b      	ldrb	r3, [r3, #20]
 80107fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010802:	b2da      	uxtb	r2, r3
 8010804:	68fb      	ldr	r3, [r7, #12]
 8010806:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8010808:	697b      	ldr	r3, [r7, #20]
 801080a:	7858      	ldrb	r0, [r3, #1]
 801080c:	68fb      	ldr	r3, [r7, #12]
 801080e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010812:	2301      	movs	r3, #1
 8010814:	69ba      	ldr	r2, [r7, #24]
 8010816:	f7fe f809 	bl	800e82c <disk_read>
 801081a:	4603      	mov	r3, r0
 801081c:	2b00      	cmp	r3, #0
 801081e:	d004      	beq.n	801082a <f_read+0x20a>
 8010820:	68fb      	ldr	r3, [r7, #12]
 8010822:	2201      	movs	r2, #1
 8010824:	755a      	strb	r2, [r3, #21]
 8010826:	2301      	movs	r3, #1
 8010828:	e035      	b.n	8010896 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 801082a:	68fb      	ldr	r3, [r7, #12]
 801082c:	69ba      	ldr	r2, [r7, #24]
 801082e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8010830:	68fb      	ldr	r3, [r7, #12]
 8010832:	699b      	ldr	r3, [r3, #24]
 8010834:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010838:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 801083c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 801083e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	429a      	cmp	r2, r3
 8010844:	d901      	bls.n	801084a <f_read+0x22a>
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 801084a:	68fb      	ldr	r3, [r7, #12]
 801084c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010850:	68fb      	ldr	r3, [r7, #12]
 8010852:	699b      	ldr	r3, [r3, #24]
 8010854:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010858:	4413      	add	r3, r2
 801085a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801085c:	4619      	mov	r1, r3
 801085e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010860:	f7fe f8c4 	bl	800e9ec <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8010864:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010866:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010868:	4413      	add	r3, r2
 801086a:	627b      	str	r3, [r7, #36]	@ 0x24
 801086c:	68fb      	ldr	r3, [r7, #12]
 801086e:	699a      	ldr	r2, [r3, #24]
 8010870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010872:	441a      	add	r2, r3
 8010874:	68fb      	ldr	r3, [r7, #12]
 8010876:	619a      	str	r2, [r3, #24]
 8010878:	683b      	ldr	r3, [r7, #0]
 801087a:	681a      	ldr	r2, [r3, #0]
 801087c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801087e:	441a      	add	r2, r3
 8010880:	683b      	ldr	r3, [r7, #0]
 8010882:	601a      	str	r2, [r3, #0]
 8010884:	687a      	ldr	r2, [r7, #4]
 8010886:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010888:	1ad3      	subs	r3, r2, r3
 801088a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	2b00      	cmp	r3, #0
 8010890:	f47f af01 	bne.w	8010696 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8010894:	2300      	movs	r3, #0
}
 8010896:	4618      	mov	r0, r3
 8010898:	3738      	adds	r7, #56	@ 0x38
 801089a:	46bd      	mov	sp, r7
 801089c:	bd80      	pop	{r7, pc}

0801089e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801089e:	b580      	push	{r7, lr}
 80108a0:	b08c      	sub	sp, #48	@ 0x30
 80108a2:	af00      	add	r7, sp, #0
 80108a4:	60f8      	str	r0, [r7, #12]
 80108a6:	60b9      	str	r1, [r7, #8]
 80108a8:	607a      	str	r2, [r7, #4]
 80108aa:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80108ac:	68bb      	ldr	r3, [r7, #8]
 80108ae:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80108b0:	683b      	ldr	r3, [r7, #0]
 80108b2:	2200      	movs	r2, #0
 80108b4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80108b6:	68fb      	ldr	r3, [r7, #12]
 80108b8:	f107 0210 	add.w	r2, r7, #16
 80108bc:	4611      	mov	r1, r2
 80108be:	4618      	mov	r0, r3
 80108c0:	f7ff fc78 	bl	80101b4 <validate>
 80108c4:	4603      	mov	r3, r0
 80108c6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80108ca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d107      	bne.n	80108e2 <f_write+0x44>
 80108d2:	68fb      	ldr	r3, [r7, #12]
 80108d4:	7d5b      	ldrb	r3, [r3, #21]
 80108d6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80108da:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d002      	beq.n	80108e8 <f_write+0x4a>
 80108e2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80108e6:	e14b      	b.n	8010b80 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80108e8:	68fb      	ldr	r3, [r7, #12]
 80108ea:	7d1b      	ldrb	r3, [r3, #20]
 80108ec:	f003 0302 	and.w	r3, r3, #2
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d101      	bne.n	80108f8 <f_write+0x5a>
 80108f4:	2307      	movs	r3, #7
 80108f6:	e143      	b.n	8010b80 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80108f8:	68fb      	ldr	r3, [r7, #12]
 80108fa:	699a      	ldr	r2, [r3, #24]
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	441a      	add	r2, r3
 8010900:	68fb      	ldr	r3, [r7, #12]
 8010902:	699b      	ldr	r3, [r3, #24]
 8010904:	429a      	cmp	r2, r3
 8010906:	f080 812d 	bcs.w	8010b64 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801090a:	68fb      	ldr	r3, [r7, #12]
 801090c:	699b      	ldr	r3, [r3, #24]
 801090e:	43db      	mvns	r3, r3
 8010910:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8010912:	e127      	b.n	8010b64 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8010914:	68fb      	ldr	r3, [r7, #12]
 8010916:	699b      	ldr	r3, [r3, #24]
 8010918:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801091c:	2b00      	cmp	r3, #0
 801091e:	f040 80e3 	bne.w	8010ae8 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	699b      	ldr	r3, [r3, #24]
 8010926:	0a5b      	lsrs	r3, r3, #9
 8010928:	693a      	ldr	r2, [r7, #16]
 801092a:	8952      	ldrh	r2, [r2, #10]
 801092c:	3a01      	subs	r2, #1
 801092e:	4013      	ands	r3, r2
 8010930:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8010932:	69bb      	ldr	r3, [r7, #24]
 8010934:	2b00      	cmp	r3, #0
 8010936:	d143      	bne.n	80109c0 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8010938:	68fb      	ldr	r3, [r7, #12]
 801093a:	699b      	ldr	r3, [r3, #24]
 801093c:	2b00      	cmp	r3, #0
 801093e:	d10c      	bne.n	801095a <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8010940:	68fb      	ldr	r3, [r7, #12]
 8010942:	689b      	ldr	r3, [r3, #8]
 8010944:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8010946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010948:	2b00      	cmp	r3, #0
 801094a:	d11a      	bne.n	8010982 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801094c:	68fb      	ldr	r3, [r7, #12]
 801094e:	2100      	movs	r1, #0
 8010950:	4618      	mov	r0, r3
 8010952:	f7fe fd2a 	bl	800f3aa <create_chain>
 8010956:	62b8      	str	r0, [r7, #40]	@ 0x28
 8010958:	e013      	b.n	8010982 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801095a:	68fb      	ldr	r3, [r7, #12]
 801095c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801095e:	2b00      	cmp	r3, #0
 8010960:	d007      	beq.n	8010972 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8010962:	68fb      	ldr	r3, [r7, #12]
 8010964:	699b      	ldr	r3, [r3, #24]
 8010966:	4619      	mov	r1, r3
 8010968:	68f8      	ldr	r0, [r7, #12]
 801096a:	f7fe fdb6 	bl	800f4da <clmt_clust>
 801096e:	62b8      	str	r0, [r7, #40]	@ 0x28
 8010970:	e007      	b.n	8010982 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8010972:	68fa      	ldr	r2, [r7, #12]
 8010974:	68fb      	ldr	r3, [r7, #12]
 8010976:	69db      	ldr	r3, [r3, #28]
 8010978:	4619      	mov	r1, r3
 801097a:	4610      	mov	r0, r2
 801097c:	f7fe fd15 	bl	800f3aa <create_chain>
 8010980:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010984:	2b00      	cmp	r3, #0
 8010986:	f000 80f2 	beq.w	8010b6e <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801098a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801098c:	2b01      	cmp	r3, #1
 801098e:	d104      	bne.n	801099a <f_write+0xfc>
 8010990:	68fb      	ldr	r3, [r7, #12]
 8010992:	2202      	movs	r2, #2
 8010994:	755a      	strb	r2, [r3, #21]
 8010996:	2302      	movs	r3, #2
 8010998:	e0f2      	b.n	8010b80 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801099a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801099c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109a0:	d104      	bne.n	80109ac <f_write+0x10e>
 80109a2:	68fb      	ldr	r3, [r7, #12]
 80109a4:	2201      	movs	r2, #1
 80109a6:	755a      	strb	r2, [r3, #21]
 80109a8:	2301      	movs	r3, #1
 80109aa:	e0e9      	b.n	8010b80 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 80109ac:	68fb      	ldr	r3, [r7, #12]
 80109ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80109b0:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80109b2:	68fb      	ldr	r3, [r7, #12]
 80109b4:	689b      	ldr	r3, [r3, #8]
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d102      	bne.n	80109c0 <f_write+0x122>
 80109ba:	68fb      	ldr	r3, [r7, #12]
 80109bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80109be:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	7d1b      	ldrb	r3, [r3, #20]
 80109c4:	b25b      	sxtb	r3, r3
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	da18      	bge.n	80109fc <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80109ca:	693b      	ldr	r3, [r7, #16]
 80109cc:	7858      	ldrb	r0, [r3, #1]
 80109ce:	68fb      	ldr	r3, [r7, #12]
 80109d0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80109d4:	68fb      	ldr	r3, [r7, #12]
 80109d6:	6a1a      	ldr	r2, [r3, #32]
 80109d8:	2301      	movs	r3, #1
 80109da:	f7fd ff47 	bl	800e86c <disk_write>
 80109de:	4603      	mov	r3, r0
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	d004      	beq.n	80109ee <f_write+0x150>
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	2201      	movs	r2, #1
 80109e8:	755a      	strb	r2, [r3, #21]
 80109ea:	2301      	movs	r3, #1
 80109ec:	e0c8      	b.n	8010b80 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80109ee:	68fb      	ldr	r3, [r7, #12]
 80109f0:	7d1b      	ldrb	r3, [r3, #20]
 80109f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80109f6:	b2da      	uxtb	r2, r3
 80109f8:	68fb      	ldr	r3, [r7, #12]
 80109fa:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80109fc:	693a      	ldr	r2, [r7, #16]
 80109fe:	68fb      	ldr	r3, [r7, #12]
 8010a00:	69db      	ldr	r3, [r3, #28]
 8010a02:	4619      	mov	r1, r3
 8010a04:	4610      	mov	r0, r2
 8010a06:	f7fe fabb 	bl	800ef80 <clust2sect>
 8010a0a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8010a0c:	697b      	ldr	r3, [r7, #20]
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d104      	bne.n	8010a1c <f_write+0x17e>
 8010a12:	68fb      	ldr	r3, [r7, #12]
 8010a14:	2202      	movs	r2, #2
 8010a16:	755a      	strb	r2, [r3, #21]
 8010a18:	2302      	movs	r3, #2
 8010a1a:	e0b1      	b.n	8010b80 <f_write+0x2e2>
			sect += csect;
 8010a1c:	697a      	ldr	r2, [r7, #20]
 8010a1e:	69bb      	ldr	r3, [r7, #24]
 8010a20:	4413      	add	r3, r2
 8010a22:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	0a5b      	lsrs	r3, r3, #9
 8010a28:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8010a2a:	6a3b      	ldr	r3, [r7, #32]
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	d03c      	beq.n	8010aaa <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8010a30:	69ba      	ldr	r2, [r7, #24]
 8010a32:	6a3b      	ldr	r3, [r7, #32]
 8010a34:	4413      	add	r3, r2
 8010a36:	693a      	ldr	r2, [r7, #16]
 8010a38:	8952      	ldrh	r2, [r2, #10]
 8010a3a:	4293      	cmp	r3, r2
 8010a3c:	d905      	bls.n	8010a4a <f_write+0x1ac>
					cc = fs->csize - csect;
 8010a3e:	693b      	ldr	r3, [r7, #16]
 8010a40:	895b      	ldrh	r3, [r3, #10]
 8010a42:	461a      	mov	r2, r3
 8010a44:	69bb      	ldr	r3, [r7, #24]
 8010a46:	1ad3      	subs	r3, r2, r3
 8010a48:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010a4a:	693b      	ldr	r3, [r7, #16]
 8010a4c:	7858      	ldrb	r0, [r3, #1]
 8010a4e:	6a3b      	ldr	r3, [r7, #32]
 8010a50:	697a      	ldr	r2, [r7, #20]
 8010a52:	69f9      	ldr	r1, [r7, #28]
 8010a54:	f7fd ff0a 	bl	800e86c <disk_write>
 8010a58:	4603      	mov	r3, r0
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d004      	beq.n	8010a68 <f_write+0x1ca>
 8010a5e:	68fb      	ldr	r3, [r7, #12]
 8010a60:	2201      	movs	r2, #1
 8010a62:	755a      	strb	r2, [r3, #21]
 8010a64:	2301      	movs	r3, #1
 8010a66:	e08b      	b.n	8010b80 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8010a68:	68fb      	ldr	r3, [r7, #12]
 8010a6a:	6a1a      	ldr	r2, [r3, #32]
 8010a6c:	697b      	ldr	r3, [r7, #20]
 8010a6e:	1ad3      	subs	r3, r2, r3
 8010a70:	6a3a      	ldr	r2, [r7, #32]
 8010a72:	429a      	cmp	r2, r3
 8010a74:	d915      	bls.n	8010aa2 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8010a76:	68fb      	ldr	r3, [r7, #12]
 8010a78:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8010a7c:	68fb      	ldr	r3, [r7, #12]
 8010a7e:	6a1a      	ldr	r2, [r3, #32]
 8010a80:	697b      	ldr	r3, [r7, #20]
 8010a82:	1ad3      	subs	r3, r2, r3
 8010a84:	025b      	lsls	r3, r3, #9
 8010a86:	69fa      	ldr	r2, [r7, #28]
 8010a88:	4413      	add	r3, r2
 8010a8a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010a8e:	4619      	mov	r1, r3
 8010a90:	f7fd ffac 	bl	800e9ec <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8010a94:	68fb      	ldr	r3, [r7, #12]
 8010a96:	7d1b      	ldrb	r3, [r3, #20]
 8010a98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010a9c:	b2da      	uxtb	r2, r3
 8010a9e:	68fb      	ldr	r3, [r7, #12]
 8010aa0:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8010aa2:	6a3b      	ldr	r3, [r7, #32]
 8010aa4:	025b      	lsls	r3, r3, #9
 8010aa6:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8010aa8:	e03f      	b.n	8010b2a <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8010aaa:	68fb      	ldr	r3, [r7, #12]
 8010aac:	6a1b      	ldr	r3, [r3, #32]
 8010aae:	697a      	ldr	r2, [r7, #20]
 8010ab0:	429a      	cmp	r2, r3
 8010ab2:	d016      	beq.n	8010ae2 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8010ab4:	68fb      	ldr	r3, [r7, #12]
 8010ab6:	699a      	ldr	r2, [r3, #24]
 8010ab8:	68fb      	ldr	r3, [r7, #12]
 8010aba:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8010abc:	429a      	cmp	r2, r3
 8010abe:	d210      	bcs.n	8010ae2 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8010ac0:	693b      	ldr	r3, [r7, #16]
 8010ac2:	7858      	ldrb	r0, [r3, #1]
 8010ac4:	68fb      	ldr	r3, [r7, #12]
 8010ac6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010aca:	2301      	movs	r3, #1
 8010acc:	697a      	ldr	r2, [r7, #20]
 8010ace:	f7fd fead 	bl	800e82c <disk_read>
 8010ad2:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d004      	beq.n	8010ae2 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8010ad8:	68fb      	ldr	r3, [r7, #12]
 8010ada:	2201      	movs	r2, #1
 8010adc:	755a      	strb	r2, [r3, #21]
 8010ade:	2301      	movs	r3, #1
 8010ae0:	e04e      	b.n	8010b80 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8010ae2:	68fb      	ldr	r3, [r7, #12]
 8010ae4:	697a      	ldr	r2, [r7, #20]
 8010ae6:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8010ae8:	68fb      	ldr	r3, [r7, #12]
 8010aea:	699b      	ldr	r3, [r3, #24]
 8010aec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010af0:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8010af4:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8010af6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	429a      	cmp	r2, r3
 8010afc:	d901      	bls.n	8010b02 <f_write+0x264>
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8010b02:	68fb      	ldr	r3, [r7, #12]
 8010b04:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010b08:	68fb      	ldr	r3, [r7, #12]
 8010b0a:	699b      	ldr	r3, [r3, #24]
 8010b0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010b10:	4413      	add	r3, r2
 8010b12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010b14:	69f9      	ldr	r1, [r7, #28]
 8010b16:	4618      	mov	r0, r3
 8010b18:	f7fd ff68 	bl	800e9ec <mem_cpy>
		fp->flag |= FA_DIRTY;
 8010b1c:	68fb      	ldr	r3, [r7, #12]
 8010b1e:	7d1b      	ldrb	r3, [r3, #20]
 8010b20:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8010b24:	b2da      	uxtb	r2, r3
 8010b26:	68fb      	ldr	r3, [r7, #12]
 8010b28:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8010b2a:	69fa      	ldr	r2, [r7, #28]
 8010b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b2e:	4413      	add	r3, r2
 8010b30:	61fb      	str	r3, [r7, #28]
 8010b32:	68fb      	ldr	r3, [r7, #12]
 8010b34:	699a      	ldr	r2, [r3, #24]
 8010b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b38:	441a      	add	r2, r3
 8010b3a:	68fb      	ldr	r3, [r7, #12]
 8010b3c:	619a      	str	r2, [r3, #24]
 8010b3e:	68fb      	ldr	r3, [r7, #12]
 8010b40:	68da      	ldr	r2, [r3, #12]
 8010b42:	68fb      	ldr	r3, [r7, #12]
 8010b44:	699b      	ldr	r3, [r3, #24]
 8010b46:	429a      	cmp	r2, r3
 8010b48:	bf38      	it	cc
 8010b4a:	461a      	movcc	r2, r3
 8010b4c:	68fb      	ldr	r3, [r7, #12]
 8010b4e:	60da      	str	r2, [r3, #12]
 8010b50:	683b      	ldr	r3, [r7, #0]
 8010b52:	681a      	ldr	r2, [r3, #0]
 8010b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b56:	441a      	add	r2, r3
 8010b58:	683b      	ldr	r3, [r7, #0]
 8010b5a:	601a      	str	r2, [r3, #0]
 8010b5c:	687a      	ldr	r2, [r7, #4]
 8010b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b60:	1ad3      	subs	r3, r2, r3
 8010b62:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	f47f aed4 	bne.w	8010914 <f_write+0x76>
 8010b6c:	e000      	b.n	8010b70 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010b6e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8010b70:	68fb      	ldr	r3, [r7, #12]
 8010b72:	7d1b      	ldrb	r3, [r3, #20]
 8010b74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010b78:	b2da      	uxtb	r2, r3
 8010b7a:	68fb      	ldr	r3, [r7, #12]
 8010b7c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8010b7e:	2300      	movs	r3, #0
}
 8010b80:	4618      	mov	r0, r3
 8010b82:	3730      	adds	r7, #48	@ 0x30
 8010b84:	46bd      	mov	sp, r7
 8010b86:	bd80      	pop	{r7, pc}

08010b88 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8010b88:	b580      	push	{r7, lr}
 8010b8a:	b086      	sub	sp, #24
 8010b8c:	af00      	add	r7, sp, #0
 8010b8e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	f107 0208 	add.w	r2, r7, #8
 8010b96:	4611      	mov	r1, r2
 8010b98:	4618      	mov	r0, r3
 8010b9a:	f7ff fb0b 	bl	80101b4 <validate>
 8010b9e:	4603      	mov	r3, r0
 8010ba0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010ba2:	7dfb      	ldrb	r3, [r7, #23]
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	d168      	bne.n	8010c7a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	7d1b      	ldrb	r3, [r3, #20]
 8010bac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d062      	beq.n	8010c7a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	7d1b      	ldrb	r3, [r3, #20]
 8010bb8:	b25b      	sxtb	r3, r3
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	da15      	bge.n	8010bea <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8010bbe:	68bb      	ldr	r3, [r7, #8]
 8010bc0:	7858      	ldrb	r0, [r3, #1]
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	6a1a      	ldr	r2, [r3, #32]
 8010bcc:	2301      	movs	r3, #1
 8010bce:	f7fd fe4d 	bl	800e86c <disk_write>
 8010bd2:	4603      	mov	r3, r0
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d001      	beq.n	8010bdc <f_sync+0x54>
 8010bd8:	2301      	movs	r3, #1
 8010bda:	e04f      	b.n	8010c7c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	7d1b      	ldrb	r3, [r3, #20]
 8010be0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010be4:	b2da      	uxtb	r2, r3
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8010bea:	f7fd fb9d 	bl	800e328 <get_fattime>
 8010bee:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8010bf0:	68ba      	ldr	r2, [r7, #8]
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010bf6:	4619      	mov	r1, r3
 8010bf8:	4610      	mov	r0, r2
 8010bfa:	f7fe f925 	bl	800ee48 <move_window>
 8010bfe:	4603      	mov	r3, r0
 8010c00:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8010c02:	7dfb      	ldrb	r3, [r7, #23]
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d138      	bne.n	8010c7a <f_sync+0xf2>
					dir = fp->dir_ptr;
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010c0c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8010c0e:	68fb      	ldr	r3, [r7, #12]
 8010c10:	330b      	adds	r3, #11
 8010c12:	781a      	ldrb	r2, [r3, #0]
 8010c14:	68fb      	ldr	r3, [r7, #12]
 8010c16:	330b      	adds	r3, #11
 8010c18:	f042 0220 	orr.w	r2, r2, #32
 8010c1c:	b2d2      	uxtb	r2, r2
 8010c1e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	6818      	ldr	r0, [r3, #0]
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	689b      	ldr	r3, [r3, #8]
 8010c28:	461a      	mov	r2, r3
 8010c2a:	68f9      	ldr	r1, [r7, #12]
 8010c2c:	f7fe fe2f 	bl	800f88e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8010c30:	68fb      	ldr	r3, [r7, #12]
 8010c32:	f103 021c 	add.w	r2, r3, #28
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	68db      	ldr	r3, [r3, #12]
 8010c3a:	4619      	mov	r1, r3
 8010c3c:	4610      	mov	r0, r2
 8010c3e:	f7fd fea9 	bl	800e994 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8010c42:	68fb      	ldr	r3, [r7, #12]
 8010c44:	3316      	adds	r3, #22
 8010c46:	6939      	ldr	r1, [r7, #16]
 8010c48:	4618      	mov	r0, r3
 8010c4a:	f7fd fea3 	bl	800e994 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8010c4e:	68fb      	ldr	r3, [r7, #12]
 8010c50:	3312      	adds	r3, #18
 8010c52:	2100      	movs	r1, #0
 8010c54:	4618      	mov	r0, r3
 8010c56:	f7fd fe82 	bl	800e95e <st_word>
					fs->wflag = 1;
 8010c5a:	68bb      	ldr	r3, [r7, #8]
 8010c5c:	2201      	movs	r2, #1
 8010c5e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8010c60:	68bb      	ldr	r3, [r7, #8]
 8010c62:	4618      	mov	r0, r3
 8010c64:	f7fe f91e 	bl	800eea4 <sync_fs>
 8010c68:	4603      	mov	r3, r0
 8010c6a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	7d1b      	ldrb	r3, [r3, #20]
 8010c70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010c74:	b2da      	uxtb	r2, r3
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8010c7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8010c7c:	4618      	mov	r0, r3
 8010c7e:	3718      	adds	r7, #24
 8010c80:	46bd      	mov	sp, r7
 8010c82:	bd80      	pop	{r7, pc}

08010c84 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8010c84:	b580      	push	{r7, lr}
 8010c86:	b084      	sub	sp, #16
 8010c88:	af00      	add	r7, sp, #0
 8010c8a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8010c8c:	6878      	ldr	r0, [r7, #4]
 8010c8e:	f7ff ff7b 	bl	8010b88 <f_sync>
 8010c92:	4603      	mov	r3, r0
 8010c94:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8010c96:	7bfb      	ldrb	r3, [r7, #15]
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	d118      	bne.n	8010cce <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	f107 0208 	add.w	r2, r7, #8
 8010ca2:	4611      	mov	r1, r2
 8010ca4:	4618      	mov	r0, r3
 8010ca6:	f7ff fa85 	bl	80101b4 <validate>
 8010caa:	4603      	mov	r3, r0
 8010cac:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010cae:	7bfb      	ldrb	r3, [r7, #15]
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d10c      	bne.n	8010cce <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	691b      	ldr	r3, [r3, #16]
 8010cb8:	4618      	mov	r0, r3
 8010cba:	f7fe f821 	bl	800ed00 <dec_lock>
 8010cbe:	4603      	mov	r3, r0
 8010cc0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8010cc2:	7bfb      	ldrb	r3, [r7, #15]
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d102      	bne.n	8010cce <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	2200      	movs	r2, #0
 8010ccc:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8010cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8010cd0:	4618      	mov	r0, r3
 8010cd2:	3710      	adds	r7, #16
 8010cd4:	46bd      	mov	sp, r7
 8010cd6:	bd80      	pop	{r7, pc}

08010cd8 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8010cd8:	b580      	push	{r7, lr}
 8010cda:	b090      	sub	sp, #64	@ 0x40
 8010cdc:	af00      	add	r7, sp, #0
 8010cde:	6078      	str	r0, [r7, #4]
 8010ce0:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	f107 0208 	add.w	r2, r7, #8
 8010ce8:	4611      	mov	r1, r2
 8010cea:	4618      	mov	r0, r3
 8010cec:	f7ff fa62 	bl	80101b4 <validate>
 8010cf0:	4603      	mov	r3, r0
 8010cf2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8010cf6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	d103      	bne.n	8010d06 <f_lseek+0x2e>
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	7d5b      	ldrb	r3, [r3, #21]
 8010d02:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8010d06:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d002      	beq.n	8010d14 <f_lseek+0x3c>
 8010d0e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8010d12:	e1e6      	b.n	80110e2 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	f000 80d1 	beq.w	8010ec0 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8010d1e:	683b      	ldr	r3, [r7, #0]
 8010d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d24:	d15a      	bne.n	8010ddc <f_lseek+0x104>
			tbl = fp->cltbl;
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010d2a:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8010d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d2e:	1d1a      	adds	r2, r3, #4
 8010d30:	627a      	str	r2, [r7, #36]	@ 0x24
 8010d32:	681b      	ldr	r3, [r3, #0]
 8010d34:	617b      	str	r3, [r7, #20]
 8010d36:	2302      	movs	r3, #2
 8010d38:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	689b      	ldr	r3, [r3, #8]
 8010d3e:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8010d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d03a      	beq.n	8010dbc <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8010d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d48:	613b      	str	r3, [r7, #16]
 8010d4a:	2300      	movs	r3, #0
 8010d4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010d4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d50:	3302      	adds	r3, #2
 8010d52:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 8010d54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d56:	60fb      	str	r3, [r7, #12]
 8010d58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d5a:	3301      	adds	r3, #1
 8010d5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8010d62:	4618      	mov	r0, r3
 8010d64:	f7fe f92b 	bl	800efbe <get_fat>
 8010d68:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8010d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d6c:	2b01      	cmp	r3, #1
 8010d6e:	d804      	bhi.n	8010d7a <f_lseek+0xa2>
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	2202      	movs	r2, #2
 8010d74:	755a      	strb	r2, [r3, #21]
 8010d76:	2302      	movs	r3, #2
 8010d78:	e1b3      	b.n	80110e2 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d80:	d104      	bne.n	8010d8c <f_lseek+0xb4>
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	2201      	movs	r2, #1
 8010d86:	755a      	strb	r2, [r3, #21]
 8010d88:	2301      	movs	r3, #1
 8010d8a:	e1aa      	b.n	80110e2 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 8010d8c:	68fb      	ldr	r3, [r7, #12]
 8010d8e:	3301      	adds	r3, #1
 8010d90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010d92:	429a      	cmp	r2, r3
 8010d94:	d0de      	beq.n	8010d54 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8010d96:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010d98:	697b      	ldr	r3, [r7, #20]
 8010d9a:	429a      	cmp	r2, r3
 8010d9c:	d809      	bhi.n	8010db2 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8010d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010da0:	1d1a      	adds	r2, r3, #4
 8010da2:	627a      	str	r2, [r7, #36]	@ 0x24
 8010da4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010da6:	601a      	str	r2, [r3, #0]
 8010da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010daa:	1d1a      	adds	r2, r3, #4
 8010dac:	627a      	str	r2, [r7, #36]	@ 0x24
 8010dae:	693a      	ldr	r2, [r7, #16]
 8010db0:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8010db2:	68bb      	ldr	r3, [r7, #8]
 8010db4:	695b      	ldr	r3, [r3, #20]
 8010db6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010db8:	429a      	cmp	r2, r3
 8010dba:	d3c4      	bcc.n	8010d46 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010dc0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010dc2:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8010dc4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010dc6:	697b      	ldr	r3, [r7, #20]
 8010dc8:	429a      	cmp	r2, r3
 8010dca:	d803      	bhi.n	8010dd4 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8010dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010dce:	2200      	movs	r2, #0
 8010dd0:	601a      	str	r2, [r3, #0]
 8010dd2:	e184      	b.n	80110de <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8010dd4:	2311      	movs	r3, #17
 8010dd6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8010dda:	e180      	b.n	80110de <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	68db      	ldr	r3, [r3, #12]
 8010de0:	683a      	ldr	r2, [r7, #0]
 8010de2:	429a      	cmp	r2, r3
 8010de4:	d902      	bls.n	8010dec <f_lseek+0x114>
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	68db      	ldr	r3, [r3, #12]
 8010dea:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	683a      	ldr	r2, [r7, #0]
 8010df0:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8010df2:	683b      	ldr	r3, [r7, #0]
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	f000 8172 	beq.w	80110de <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 8010dfa:	683b      	ldr	r3, [r7, #0]
 8010dfc:	3b01      	subs	r3, #1
 8010dfe:	4619      	mov	r1, r3
 8010e00:	6878      	ldr	r0, [r7, #4]
 8010e02:	f7fe fb6a 	bl	800f4da <clmt_clust>
 8010e06:	4602      	mov	r2, r0
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8010e0c:	68ba      	ldr	r2, [r7, #8]
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	69db      	ldr	r3, [r3, #28]
 8010e12:	4619      	mov	r1, r3
 8010e14:	4610      	mov	r0, r2
 8010e16:	f7fe f8b3 	bl	800ef80 <clust2sect>
 8010e1a:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8010e1c:	69bb      	ldr	r3, [r7, #24]
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	d104      	bne.n	8010e2c <f_lseek+0x154>
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	2202      	movs	r2, #2
 8010e26:	755a      	strb	r2, [r3, #21]
 8010e28:	2302      	movs	r3, #2
 8010e2a:	e15a      	b.n	80110e2 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8010e2c:	683b      	ldr	r3, [r7, #0]
 8010e2e:	3b01      	subs	r3, #1
 8010e30:	0a5b      	lsrs	r3, r3, #9
 8010e32:	68ba      	ldr	r2, [r7, #8]
 8010e34:	8952      	ldrh	r2, [r2, #10]
 8010e36:	3a01      	subs	r2, #1
 8010e38:	4013      	ands	r3, r2
 8010e3a:	69ba      	ldr	r2, [r7, #24]
 8010e3c:	4413      	add	r3, r2
 8010e3e:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	699b      	ldr	r3, [r3, #24]
 8010e44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	f000 8148 	beq.w	80110de <f_lseek+0x406>
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	6a1b      	ldr	r3, [r3, #32]
 8010e52:	69ba      	ldr	r2, [r7, #24]
 8010e54:	429a      	cmp	r2, r3
 8010e56:	f000 8142 	beq.w	80110de <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	7d1b      	ldrb	r3, [r3, #20]
 8010e5e:	b25b      	sxtb	r3, r3
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	da18      	bge.n	8010e96 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010e64:	68bb      	ldr	r3, [r7, #8]
 8010e66:	7858      	ldrb	r0, [r3, #1]
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	6a1a      	ldr	r2, [r3, #32]
 8010e72:	2301      	movs	r3, #1
 8010e74:	f7fd fcfa 	bl	800e86c <disk_write>
 8010e78:	4603      	mov	r3, r0
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	d004      	beq.n	8010e88 <f_lseek+0x1b0>
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	2201      	movs	r2, #1
 8010e82:	755a      	strb	r2, [r3, #21]
 8010e84:	2301      	movs	r3, #1
 8010e86:	e12c      	b.n	80110e2 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	7d1b      	ldrb	r3, [r3, #20]
 8010e8c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010e90:	b2da      	uxtb	r2, r3
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8010e96:	68bb      	ldr	r3, [r7, #8]
 8010e98:	7858      	ldrb	r0, [r3, #1]
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010ea0:	2301      	movs	r3, #1
 8010ea2:	69ba      	ldr	r2, [r7, #24]
 8010ea4:	f7fd fcc2 	bl	800e82c <disk_read>
 8010ea8:	4603      	mov	r3, r0
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	d004      	beq.n	8010eb8 <f_lseek+0x1e0>
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	2201      	movs	r2, #1
 8010eb2:	755a      	strb	r2, [r3, #21]
 8010eb4:	2301      	movs	r3, #1
 8010eb6:	e114      	b.n	80110e2 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	69ba      	ldr	r2, [r7, #24]
 8010ebc:	621a      	str	r2, [r3, #32]
 8010ebe:	e10e      	b.n	80110de <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	68db      	ldr	r3, [r3, #12]
 8010ec4:	683a      	ldr	r2, [r7, #0]
 8010ec6:	429a      	cmp	r2, r3
 8010ec8:	d908      	bls.n	8010edc <f_lseek+0x204>
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	7d1b      	ldrb	r3, [r3, #20]
 8010ece:	f003 0302 	and.w	r3, r3, #2
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d102      	bne.n	8010edc <f_lseek+0x204>
			ofs = fp->obj.objsize;
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	68db      	ldr	r3, [r3, #12]
 8010eda:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	699b      	ldr	r3, [r3, #24]
 8010ee0:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8010ee2:	2300      	movs	r3, #0
 8010ee4:	637b      	str	r3, [r7, #52]	@ 0x34
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010eea:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8010eec:	683b      	ldr	r3, [r7, #0]
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	f000 80a7 	beq.w	8011042 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8010ef4:	68bb      	ldr	r3, [r7, #8]
 8010ef6:	895b      	ldrh	r3, [r3, #10]
 8010ef8:	025b      	lsls	r3, r3, #9
 8010efa:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8010efc:	6a3b      	ldr	r3, [r7, #32]
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d01b      	beq.n	8010f3a <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8010f02:	683b      	ldr	r3, [r7, #0]
 8010f04:	1e5a      	subs	r2, r3, #1
 8010f06:	69fb      	ldr	r3, [r7, #28]
 8010f08:	fbb2 f2f3 	udiv	r2, r2, r3
 8010f0c:	6a3b      	ldr	r3, [r7, #32]
 8010f0e:	1e59      	subs	r1, r3, #1
 8010f10:	69fb      	ldr	r3, [r7, #28]
 8010f12:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8010f16:	429a      	cmp	r2, r3
 8010f18:	d30f      	bcc.n	8010f3a <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8010f1a:	6a3b      	ldr	r3, [r7, #32]
 8010f1c:	1e5a      	subs	r2, r3, #1
 8010f1e:	69fb      	ldr	r3, [r7, #28]
 8010f20:	425b      	negs	r3, r3
 8010f22:	401a      	ands	r2, r3
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	699b      	ldr	r3, [r3, #24]
 8010f2c:	683a      	ldr	r2, [r7, #0]
 8010f2e:	1ad3      	subs	r3, r2, r3
 8010f30:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	69db      	ldr	r3, [r3, #28]
 8010f36:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010f38:	e022      	b.n	8010f80 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	689b      	ldr	r3, [r3, #8]
 8010f3e:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8010f40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	d119      	bne.n	8010f7a <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	2100      	movs	r1, #0
 8010f4a:	4618      	mov	r0, r3
 8010f4c:	f7fe fa2d 	bl	800f3aa <create_chain>
 8010f50:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8010f52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f54:	2b01      	cmp	r3, #1
 8010f56:	d104      	bne.n	8010f62 <f_lseek+0x28a>
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	2202      	movs	r2, #2
 8010f5c:	755a      	strb	r2, [r3, #21]
 8010f5e:	2302      	movs	r3, #2
 8010f60:	e0bf      	b.n	80110e2 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010f62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f68:	d104      	bne.n	8010f74 <f_lseek+0x29c>
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	2201      	movs	r2, #1
 8010f6e:	755a      	strb	r2, [r3, #21]
 8010f70:	2301      	movs	r3, #1
 8010f72:	e0b6      	b.n	80110e2 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010f78:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010f7e:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8010f80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d05d      	beq.n	8011042 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 8010f86:	e03a      	b.n	8010ffe <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 8010f88:	683a      	ldr	r2, [r7, #0]
 8010f8a:	69fb      	ldr	r3, [r7, #28]
 8010f8c:	1ad3      	subs	r3, r2, r3
 8010f8e:	603b      	str	r3, [r7, #0]
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	699a      	ldr	r2, [r3, #24]
 8010f94:	69fb      	ldr	r3, [r7, #28]
 8010f96:	441a      	add	r2, r3
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	7d1b      	ldrb	r3, [r3, #20]
 8010fa0:	f003 0302 	and.w	r3, r3, #2
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	d00b      	beq.n	8010fc0 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8010fac:	4618      	mov	r0, r3
 8010fae:	f7fe f9fc 	bl	800f3aa <create_chain>
 8010fb2:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8010fb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d108      	bne.n	8010fcc <f_lseek+0x2f4>
							ofs = 0; break;
 8010fba:	2300      	movs	r3, #0
 8010fbc:	603b      	str	r3, [r7, #0]
 8010fbe:	e022      	b.n	8011006 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8010fc4:	4618      	mov	r0, r3
 8010fc6:	f7fd fffa 	bl	800efbe <get_fat>
 8010fca:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010fcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010fd2:	d104      	bne.n	8010fde <f_lseek+0x306>
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	2201      	movs	r2, #1
 8010fd8:	755a      	strb	r2, [r3, #21]
 8010fda:	2301      	movs	r3, #1
 8010fdc:	e081      	b.n	80110e2 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8010fde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fe0:	2b01      	cmp	r3, #1
 8010fe2:	d904      	bls.n	8010fee <f_lseek+0x316>
 8010fe4:	68bb      	ldr	r3, [r7, #8]
 8010fe6:	695b      	ldr	r3, [r3, #20]
 8010fe8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010fea:	429a      	cmp	r2, r3
 8010fec:	d304      	bcc.n	8010ff8 <f_lseek+0x320>
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	2202      	movs	r2, #2
 8010ff2:	755a      	strb	r2, [r3, #21]
 8010ff4:	2302      	movs	r3, #2
 8010ff6:	e074      	b.n	80110e2 <f_lseek+0x40a>
					fp->clust = clst;
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010ffc:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8010ffe:	683a      	ldr	r2, [r7, #0]
 8011000:	69fb      	ldr	r3, [r7, #28]
 8011002:	429a      	cmp	r2, r3
 8011004:	d8c0      	bhi.n	8010f88 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	699a      	ldr	r2, [r3, #24]
 801100a:	683b      	ldr	r3, [r7, #0]
 801100c:	441a      	add	r2, r3
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8011012:	683b      	ldr	r3, [r7, #0]
 8011014:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011018:	2b00      	cmp	r3, #0
 801101a:	d012      	beq.n	8011042 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 801101c:	68bb      	ldr	r3, [r7, #8]
 801101e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011020:	4618      	mov	r0, r3
 8011022:	f7fd ffad 	bl	800ef80 <clust2sect>
 8011026:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8011028:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801102a:	2b00      	cmp	r3, #0
 801102c:	d104      	bne.n	8011038 <f_lseek+0x360>
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	2202      	movs	r2, #2
 8011032:	755a      	strb	r2, [r3, #21]
 8011034:	2302      	movs	r3, #2
 8011036:	e054      	b.n	80110e2 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 8011038:	683b      	ldr	r3, [r7, #0]
 801103a:	0a5b      	lsrs	r3, r3, #9
 801103c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801103e:	4413      	add	r3, r2
 8011040:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	699a      	ldr	r2, [r3, #24]
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	68db      	ldr	r3, [r3, #12]
 801104a:	429a      	cmp	r2, r3
 801104c:	d90a      	bls.n	8011064 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	699a      	ldr	r2, [r3, #24]
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	7d1b      	ldrb	r3, [r3, #20]
 801105a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801105e:	b2da      	uxtb	r2, r3
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	699b      	ldr	r3, [r3, #24]
 8011068:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801106c:	2b00      	cmp	r3, #0
 801106e:	d036      	beq.n	80110de <f_lseek+0x406>
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	6a1b      	ldr	r3, [r3, #32]
 8011074:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011076:	429a      	cmp	r2, r3
 8011078:	d031      	beq.n	80110de <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	7d1b      	ldrb	r3, [r3, #20]
 801107e:	b25b      	sxtb	r3, r3
 8011080:	2b00      	cmp	r3, #0
 8011082:	da18      	bge.n	80110b6 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011084:	68bb      	ldr	r3, [r7, #8]
 8011086:	7858      	ldrb	r0, [r3, #1]
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	6a1a      	ldr	r2, [r3, #32]
 8011092:	2301      	movs	r3, #1
 8011094:	f7fd fbea 	bl	800e86c <disk_write>
 8011098:	4603      	mov	r3, r0
 801109a:	2b00      	cmp	r3, #0
 801109c:	d004      	beq.n	80110a8 <f_lseek+0x3d0>
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	2201      	movs	r2, #1
 80110a2:	755a      	strb	r2, [r3, #21]
 80110a4:	2301      	movs	r3, #1
 80110a6:	e01c      	b.n	80110e2 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	7d1b      	ldrb	r3, [r3, #20]
 80110ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80110b0:	b2da      	uxtb	r2, r3
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80110b6:	68bb      	ldr	r3, [r7, #8]
 80110b8:	7858      	ldrb	r0, [r3, #1]
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80110c0:	2301      	movs	r3, #1
 80110c2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80110c4:	f7fd fbb2 	bl	800e82c <disk_read>
 80110c8:	4603      	mov	r3, r0
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	d004      	beq.n	80110d8 <f_lseek+0x400>
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	2201      	movs	r2, #1
 80110d2:	755a      	strb	r2, [r3, #21]
 80110d4:	2301      	movs	r3, #1
 80110d6:	e004      	b.n	80110e2 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80110dc:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 80110de:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 80110e2:	4618      	mov	r0, r3
 80110e4:	3740      	adds	r7, #64	@ 0x40
 80110e6:	46bd      	mov	sp, r7
 80110e8:	bd80      	pop	{r7, pc}
	...

080110ec <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 80110ec:	b590      	push	{r4, r7, lr}
 80110ee:	b09d      	sub	sp, #116	@ 0x74
 80110f0:	af00      	add	r7, sp, #0
 80110f2:	60f8      	str	r0, [r7, #12]
 80110f4:	607a      	str	r2, [r7, #4]
 80110f6:	603b      	str	r3, [r7, #0]
 80110f8:	460b      	mov	r3, r1
 80110fa:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 80110fc:	2301      	movs	r3, #1
 80110fe:	647b      	str	r3, [r7, #68]	@ 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 8011100:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8011104:	643b      	str	r3, [r7, #64]	@ 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 8011106:	f107 030c 	add.w	r3, r7, #12
 801110a:	4618      	mov	r0, r3
 801110c:	f7fe fd6b 	bl	800fbe6 <get_ldnumber>
 8011110:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8011112:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011114:	2b00      	cmp	r3, #0
 8011116:	da02      	bge.n	801111e <f_mkfs+0x32>
 8011118:	230b      	movs	r3, #11
 801111a:	f000 bc0d 	b.w	8011938 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 801111e:	4a94      	ldr	r2, [pc, #592]	@ (8011370 <f_mkfs+0x284>)
 8011120:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011122:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011126:	2b00      	cmp	r3, #0
 8011128:	d005      	beq.n	8011136 <f_mkfs+0x4a>
 801112a:	4a91      	ldr	r2, [pc, #580]	@ (8011370 <f_mkfs+0x284>)
 801112c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801112e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011132:	2200      	movs	r2, #0
 8011134:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 8011136:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011138:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 801113c:	2300      	movs	r3, #0
 801113e:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 8011142:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8011146:	4618      	mov	r0, r3
 8011148:	f7fd fb4a 	bl	800e7e0 <disk_initialize>
 801114c:	4603      	mov	r3, r0
 801114e:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 8011152:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8011156:	f003 0301 	and.w	r3, r3, #1
 801115a:	2b00      	cmp	r3, #0
 801115c:	d001      	beq.n	8011162 <f_mkfs+0x76>
 801115e:	2303      	movs	r3, #3
 8011160:	e3ea      	b.n	8011938 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 8011162:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8011166:	f003 0304 	and.w	r3, r3, #4
 801116a:	2b00      	cmp	r3, #0
 801116c:	d001      	beq.n	8011172 <f_mkfs+0x86>
 801116e:	230a      	movs	r3, #10
 8011170:	e3e2      	b.n	8011938 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 8011172:	f107 0214 	add.w	r2, r7, #20
 8011176:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 801117a:	2103      	movs	r1, #3
 801117c:	4618      	mov	r0, r3
 801117e:	f7fd fb95 	bl	800e8ac <disk_ioctl>
 8011182:	4603      	mov	r3, r0
 8011184:	2b00      	cmp	r3, #0
 8011186:	d10c      	bne.n	80111a2 <f_mkfs+0xb6>
 8011188:	697b      	ldr	r3, [r7, #20]
 801118a:	2b00      	cmp	r3, #0
 801118c:	d009      	beq.n	80111a2 <f_mkfs+0xb6>
 801118e:	697b      	ldr	r3, [r7, #20]
 8011190:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8011194:	d805      	bhi.n	80111a2 <f_mkfs+0xb6>
 8011196:	697b      	ldr	r3, [r7, #20]
 8011198:	1e5a      	subs	r2, r3, #1
 801119a:	697b      	ldr	r3, [r7, #20]
 801119c:	4013      	ands	r3, r2
 801119e:	2b00      	cmp	r3, #0
 80111a0:	d001      	beq.n	80111a6 <f_mkfs+0xba>
 80111a2:	2301      	movs	r3, #1
 80111a4:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 80111a6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80111aa:	86fb      	strh	r3, [r7, #54]	@ 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	d003      	beq.n	80111ba <f_mkfs+0xce>
 80111b2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80111b4:	687a      	ldr	r2, [r7, #4]
 80111b6:	429a      	cmp	r2, r3
 80111b8:	d309      	bcc.n	80111ce <f_mkfs+0xe2>
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80111c0:	d805      	bhi.n	80111ce <f_mkfs+0xe2>
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	1e5a      	subs	r2, r3, #1
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	4013      	ands	r3, r2
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	d001      	beq.n	80111d2 <f_mkfs+0xe6>
 80111ce:	2313      	movs	r3, #19
 80111d0:	e3b2      	b.n	8011938 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 80111d2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80111d4:	687a      	ldr	r2, [r7, #4]
 80111d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80111da:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 80111dc:	683b      	ldr	r3, [r7, #0]
 80111de:	633b      	str	r3, [r7, #48]	@ 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 80111e0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80111e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80111e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80111ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 80111ec:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80111ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80111f0:	fb02 f303 	mul.w	r3, r2, r3
 80111f4:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 80111f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80111f8:	2b00      	cmp	r3, #0
 80111fa:	d101      	bne.n	8011200 <f_mkfs+0x114>
 80111fc:	230e      	movs	r3, #14
 80111fe:	e39b      	b.n	8011938 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 8011200:	f107 0210 	add.w	r2, r7, #16
 8011204:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8011208:	2101      	movs	r1, #1
 801120a:	4618      	mov	r0, r3
 801120c:	f7fd fb4e 	bl	800e8ac <disk_ioctl>
 8011210:	4603      	mov	r3, r0
 8011212:	2b00      	cmp	r3, #0
 8011214:	d001      	beq.n	801121a <f_mkfs+0x12e>
 8011216:	2301      	movs	r3, #1
 8011218:	e38e      	b.n	8011938 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 801121a:	7afb      	ldrb	r3, [r7, #11]
 801121c:	f003 0308 	and.w	r3, r3, #8
 8011220:	2b00      	cmp	r3, #0
 8011222:	d001      	beq.n	8011228 <f_mkfs+0x13c>
 8011224:	2300      	movs	r3, #0
 8011226:	e000      	b.n	801122a <f_mkfs+0x13e>
 8011228:	233f      	movs	r3, #63	@ 0x3f
 801122a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 801122c:	693b      	ldr	r3, [r7, #16]
 801122e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011230:	429a      	cmp	r2, r3
 8011232:	d901      	bls.n	8011238 <f_mkfs+0x14c>
 8011234:	230e      	movs	r3, #14
 8011236:	e37f      	b.n	8011938 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 8011238:	693a      	ldr	r2, [r7, #16]
 801123a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801123c:	1ad3      	subs	r3, r2, r3
 801123e:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 8011240:	693b      	ldr	r3, [r7, #16]
 8011242:	2b7f      	cmp	r3, #127	@ 0x7f
 8011244:	d801      	bhi.n	801124a <f_mkfs+0x15e>
 8011246:	230e      	movs	r3, #14
 8011248:	e376      	b.n	8011938 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	2b80      	cmp	r3, #128	@ 0x80
 801124e:	d901      	bls.n	8011254 <f_mkfs+0x168>
 8011250:	2313      	movs	r3, #19
 8011252:	e371      	b.n	8011938 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 8011254:	7afb      	ldrb	r3, [r7, #11]
 8011256:	f003 0302 	and.w	r3, r3, #2
 801125a:	2b00      	cmp	r3, #0
 801125c:	d00d      	beq.n	801127a <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 801125e:	7afb      	ldrb	r3, [r7, #11]
 8011260:	f003 0307 	and.w	r3, r3, #7
 8011264:	2b02      	cmp	r3, #2
 8011266:	d004      	beq.n	8011272 <f_mkfs+0x186>
 8011268:	7afb      	ldrb	r3, [r7, #11]
 801126a:	f003 0301 	and.w	r3, r3, #1
 801126e:	2b00      	cmp	r3, #0
 8011270:	d103      	bne.n	801127a <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 8011272:	2303      	movs	r3, #3
 8011274:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8011278:	e009      	b.n	801128e <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 801127a:	7afb      	ldrb	r3, [r7, #11]
 801127c:	f003 0301 	and.w	r3, r3, #1
 8011280:	2b00      	cmp	r3, #0
 8011282:	d101      	bne.n	8011288 <f_mkfs+0x19c>
 8011284:	2313      	movs	r3, #19
 8011286:	e357      	b.n	8011938 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 8011288:	2302      	movs	r3, #2
 801128a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	653b      	str	r3, [r7, #80]	@ 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 8011292:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8011296:	2b03      	cmp	r3, #3
 8011298:	d13c      	bne.n	8011314 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 801129a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801129c:	2b00      	cmp	r3, #0
 801129e:	d11b      	bne.n	80112d8 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 80112a0:	693b      	ldr	r3, [r7, #16]
 80112a2:	0c5b      	lsrs	r3, r3, #17
 80112a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 80112a6:	2300      	movs	r3, #0
 80112a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80112aa:	2301      	movs	r3, #1
 80112ac:	653b      	str	r3, [r7, #80]	@ 0x50
 80112ae:	e005      	b.n	80112bc <f_mkfs+0x1d0>
 80112b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80112b2:	3301      	adds	r3, #1
 80112b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80112b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80112b8:	005b      	lsls	r3, r3, #1
 80112ba:	653b      	str	r3, [r7, #80]	@ 0x50
 80112bc:	4a2d      	ldr	r2, [pc, #180]	@ (8011374 <f_mkfs+0x288>)
 80112be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80112c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80112c4:	2b00      	cmp	r3, #0
 80112c6:	d007      	beq.n	80112d8 <f_mkfs+0x1ec>
 80112c8:	4a2a      	ldr	r2, [pc, #168]	@ (8011374 <f_mkfs+0x288>)
 80112ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80112cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80112d0:	461a      	mov	r2, r3
 80112d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80112d4:	4293      	cmp	r3, r2
 80112d6:	d2eb      	bcs.n	80112b0 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 80112d8:	693a      	ldr	r2, [r7, #16]
 80112da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80112dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80112e0:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 80112e2:	6a3b      	ldr	r3, [r7, #32]
 80112e4:	3302      	adds	r3, #2
 80112e6:	009a      	lsls	r2, r3, #2
 80112e8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80112ea:	4413      	add	r3, r2
 80112ec:	1e5a      	subs	r2, r3, #1
 80112ee:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80112f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80112f4:	66bb      	str	r3, [r7, #104]	@ 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 80112f6:	2320      	movs	r3, #32
 80112f8:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_dir = 0;		/* No static directory */
 80112fa:	2300      	movs	r3, #0
 80112fc:	66fb      	str	r3, [r7, #108]	@ 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 80112fe:	6a3b      	ldr	r3, [r7, #32]
 8011300:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8011304:	4293      	cmp	r3, r2
 8011306:	d903      	bls.n	8011310 <f_mkfs+0x224>
 8011308:	6a3b      	ldr	r3, [r7, #32]
 801130a:	4a1b      	ldr	r2, [pc, #108]	@ (8011378 <f_mkfs+0x28c>)
 801130c:	4293      	cmp	r3, r2
 801130e:	d952      	bls.n	80113b6 <f_mkfs+0x2ca>
 8011310:	230e      	movs	r3, #14
 8011312:	e311      	b.n	8011938 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 8011314:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011316:	2b00      	cmp	r3, #0
 8011318:	d11b      	bne.n	8011352 <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 801131a:	693b      	ldr	r3, [r7, #16]
 801131c:	0b1b      	lsrs	r3, r3, #12
 801131e:	65fb      	str	r3, [r7, #92]	@ 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8011320:	2300      	movs	r3, #0
 8011322:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011324:	2301      	movs	r3, #1
 8011326:	653b      	str	r3, [r7, #80]	@ 0x50
 8011328:	e005      	b.n	8011336 <f_mkfs+0x24a>
 801132a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801132c:	3301      	adds	r3, #1
 801132e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011330:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011332:	005b      	lsls	r3, r3, #1
 8011334:	653b      	str	r3, [r7, #80]	@ 0x50
 8011336:	4a11      	ldr	r2, [pc, #68]	@ (801137c <f_mkfs+0x290>)
 8011338:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801133a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801133e:	2b00      	cmp	r3, #0
 8011340:	d007      	beq.n	8011352 <f_mkfs+0x266>
 8011342:	4a0e      	ldr	r2, [pc, #56]	@ (801137c <f_mkfs+0x290>)
 8011344:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011346:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801134a:	461a      	mov	r2, r3
 801134c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801134e:	4293      	cmp	r3, r2
 8011350:	d2eb      	bcs.n	801132a <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 8011352:	693a      	ldr	r2, [r7, #16]
 8011354:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011356:	fbb2 f3f3 	udiv	r3, r2, r3
 801135a:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 801135c:	6a3b      	ldr	r3, [r7, #32]
 801135e:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8011362:	4293      	cmp	r3, r2
 8011364:	d90c      	bls.n	8011380 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 8011366:	6a3b      	ldr	r3, [r7, #32]
 8011368:	3302      	adds	r3, #2
 801136a:	005b      	lsls	r3, r3, #1
 801136c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801136e:	e012      	b.n	8011396 <f_mkfs+0x2aa>
 8011370:	20035f44 	.word	0x20035f44
 8011374:	0801ada8 	.word	0x0801ada8
 8011378:	0ffffff5 	.word	0x0ffffff5
 801137c:	0801adb8 	.word	0x0801adb8
				} else {
					fmt = FS_FAT12;
 8011380:	2301      	movs	r3, #1
 8011382:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 8011386:	6a3a      	ldr	r2, [r7, #32]
 8011388:	4613      	mov	r3, r2
 801138a:	005b      	lsls	r3, r3, #1
 801138c:	4413      	add	r3, r2
 801138e:	3301      	adds	r3, #1
 8011390:	085b      	lsrs	r3, r3, #1
 8011392:	3303      	adds	r3, #3
 8011394:	65fb      	str	r3, [r7, #92]	@ 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 8011396:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8011398:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801139a:	4413      	add	r3, r2
 801139c:	1e5a      	subs	r2, r3, #1
 801139e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80113a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80113a4:	66bb      	str	r3, [r7, #104]	@ 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 80113a6:	2301      	movs	r3, #1
 80113a8:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 80113aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80113ac:	015a      	lsls	r2, r3, #5
 80113ae:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80113b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80113b4:	66fb      	str	r3, [r7, #108]	@ 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 80113b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80113b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80113ba:	4413      	add	r3, r2
 80113bc:	65bb      	str	r3, [r7, #88]	@ 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 80113be:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80113c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80113c2:	fb03 f202 	mul.w	r2, r3, r2
 80113c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80113c8:	4413      	add	r3, r2
 80113ca:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80113cc:	4413      	add	r3, r2
 80113ce:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 80113d0:	697a      	ldr	r2, [r7, #20]
 80113d2:	69fb      	ldr	r3, [r7, #28]
 80113d4:	4413      	add	r3, r2
 80113d6:	1e5a      	subs	r2, r3, #1
 80113d8:	697b      	ldr	r3, [r7, #20]
 80113da:	425b      	negs	r3, r3
 80113dc:	401a      	ands	r2, r3
 80113de:	69fb      	ldr	r3, [r7, #28]
 80113e0:	1ad3      	subs	r3, r2, r3
 80113e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 80113e4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80113e8:	2b03      	cmp	r3, #3
 80113ea:	d108      	bne.n	80113fe <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 80113ec:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80113ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80113f0:	4413      	add	r3, r2
 80113f2:	657b      	str	r3, [r7, #84]	@ 0x54
 80113f4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80113f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80113f8:	4413      	add	r3, r2
 80113fa:	65bb      	str	r3, [r7, #88]	@ 0x58
 80113fc:	e006      	b.n	801140c <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 80113fe:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8011400:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011402:	fbb2 f3f3 	udiv	r3, r2, r3
 8011406:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8011408:	4413      	add	r3, r2
 801140a:	66bb      	str	r3, [r7, #104]	@ 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 801140c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801140e:	011a      	lsls	r2, r3, #4
 8011410:	69fb      	ldr	r3, [r7, #28]
 8011412:	441a      	add	r2, r3
 8011414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011416:	1ad2      	subs	r2, r2, r3
 8011418:	693b      	ldr	r3, [r7, #16]
 801141a:	429a      	cmp	r2, r3
 801141c:	d901      	bls.n	8011422 <f_mkfs+0x336>
 801141e:	230e      	movs	r3, #14
 8011420:	e28a      	b.n	8011938 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 8011422:	693a      	ldr	r2, [r7, #16]
 8011424:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011426:	1ad2      	subs	r2, r2, r3
 8011428:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801142a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801142c:	fb01 f303 	mul.w	r3, r1, r3
 8011430:	1ad2      	subs	r2, r2, r3
 8011432:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011434:	1ad2      	subs	r2, r2, r3
 8011436:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011438:	fbb2 f3f3 	udiv	r3, r2, r3
 801143c:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 801143e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8011442:	2b03      	cmp	r3, #3
 8011444:	d10f      	bne.n	8011466 <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 8011446:	6a3b      	ldr	r3, [r7, #32]
 8011448:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 801144c:	4293      	cmp	r3, r2
 801144e:	d80a      	bhi.n	8011466 <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	2b00      	cmp	r3, #0
 8011454:	d105      	bne.n	8011462 <f_mkfs+0x376>
 8011456:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011458:	085b      	lsrs	r3, r3, #1
 801145a:	607b      	str	r3, [r7, #4]
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	2b00      	cmp	r3, #0
 8011460:	d144      	bne.n	80114ec <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 8011462:	230e      	movs	r3, #14
 8011464:	e268      	b.n	8011938 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 8011466:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 801146a:	2b02      	cmp	r3, #2
 801146c:	d133      	bne.n	80114d6 <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 801146e:	6a3b      	ldr	r3, [r7, #32]
 8011470:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8011474:	4293      	cmp	r3, r2
 8011476:	d91e      	bls.n	80114b6 <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	2b00      	cmp	r3, #0
 801147c:	d107      	bne.n	801148e <f_mkfs+0x3a2>
 801147e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011480:	005b      	lsls	r3, r3, #1
 8011482:	2b40      	cmp	r3, #64	@ 0x40
 8011484:	d803      	bhi.n	801148e <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 8011486:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011488:	005b      	lsls	r3, r3, #1
 801148a:	607b      	str	r3, [r7, #4]
 801148c:	e033      	b.n	80114f6 <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 801148e:	7afb      	ldrb	r3, [r7, #11]
 8011490:	f003 0302 	and.w	r3, r3, #2
 8011494:	2b00      	cmp	r3, #0
 8011496:	d003      	beq.n	80114a0 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 8011498:	2303      	movs	r3, #3
 801149a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 801149e:	e02a      	b.n	80114f6 <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	d105      	bne.n	80114b2 <f_mkfs+0x3c6>
 80114a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80114a8:	005b      	lsls	r3, r3, #1
 80114aa:	607b      	str	r3, [r7, #4]
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	2b80      	cmp	r3, #128	@ 0x80
 80114b0:	d91e      	bls.n	80114f0 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 80114b2:	230e      	movs	r3, #14
 80114b4:	e240      	b.n	8011938 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 80114b6:	6a3b      	ldr	r3, [r7, #32]
 80114b8:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80114bc:	4293      	cmp	r3, r2
 80114be:	d80a      	bhi.n	80114d6 <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	2b00      	cmp	r3, #0
 80114c4:	d105      	bne.n	80114d2 <f_mkfs+0x3e6>
 80114c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80114c8:	005b      	lsls	r3, r3, #1
 80114ca:	607b      	str	r3, [r7, #4]
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	2b80      	cmp	r3, #128	@ 0x80
 80114d0:	d910      	bls.n	80114f4 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 80114d2:	230e      	movs	r3, #14
 80114d4:	e230      	b.n	8011938 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 80114d6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80114da:	2b01      	cmp	r3, #1
 80114dc:	d10c      	bne.n	80114f8 <f_mkfs+0x40c>
 80114de:	6a3b      	ldr	r3, [r7, #32]
 80114e0:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80114e4:	4293      	cmp	r3, r2
 80114e6:	d907      	bls.n	80114f8 <f_mkfs+0x40c>
 80114e8:	230e      	movs	r3, #14
 80114ea:	e225      	b.n	8011938 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 80114ec:	bf00      	nop
 80114ee:	e6ce      	b.n	801128e <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80114f0:	bf00      	nop
 80114f2:	e6cc      	b.n	801128e <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80114f4:	bf00      	nop
			pau = au;
 80114f6:	e6ca      	b.n	801128e <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 80114f8:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 80114fa:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80114fc:	461a      	mov	r2, r3
 80114fe:	2100      	movs	r1, #0
 8011500:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011502:	f7fd fa94 	bl	800ea2e <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 8011506:	220b      	movs	r2, #11
 8011508:	49b2      	ldr	r1, [pc, #712]	@ (80117d4 <f_mkfs+0x6e8>)
 801150a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801150c:	f7fd fa6e 	bl	800e9ec <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 8011510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011512:	330b      	adds	r3, #11
 8011514:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8011516:	4611      	mov	r1, r2
 8011518:	4618      	mov	r0, r3
 801151a:	f7fd fa20 	bl	800e95e <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 801151e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011520:	330d      	adds	r3, #13
 8011522:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011524:	b2d2      	uxtb	r2, r2
 8011526:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 8011528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801152a:	330e      	adds	r3, #14
 801152c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801152e:	b292      	uxth	r2, r2
 8011530:	4611      	mov	r1, r2
 8011532:	4618      	mov	r0, r3
 8011534:	f7fd fa13 	bl	800e95e <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 8011538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801153a:	3310      	adds	r3, #16
 801153c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801153e:	b2d2      	uxtb	r2, r2
 8011540:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 8011542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011544:	f103 0211 	add.w	r2, r3, #17
 8011548:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 801154c:	2b03      	cmp	r3, #3
 801154e:	d002      	beq.n	8011556 <f_mkfs+0x46a>
 8011550:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011552:	b29b      	uxth	r3, r3
 8011554:	e000      	b.n	8011558 <f_mkfs+0x46c>
 8011556:	2300      	movs	r3, #0
 8011558:	4619      	mov	r1, r3
 801155a:	4610      	mov	r0, r2
 801155c:	f7fd f9ff 	bl	800e95e <st_word>
		if (sz_vol < 0x10000) {
 8011560:	693b      	ldr	r3, [r7, #16]
 8011562:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011566:	d208      	bcs.n	801157a <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 8011568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801156a:	3313      	adds	r3, #19
 801156c:	693a      	ldr	r2, [r7, #16]
 801156e:	b292      	uxth	r2, r2
 8011570:	4611      	mov	r1, r2
 8011572:	4618      	mov	r0, r3
 8011574:	f7fd f9f3 	bl	800e95e <st_word>
 8011578:	e006      	b.n	8011588 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 801157a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801157c:	3320      	adds	r3, #32
 801157e:	693a      	ldr	r2, [r7, #16]
 8011580:	4611      	mov	r1, r2
 8011582:	4618      	mov	r0, r3
 8011584:	f7fd fa06 	bl	800e994 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 8011588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801158a:	3315      	adds	r3, #21
 801158c:	22f8      	movs	r2, #248	@ 0xf8
 801158e:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 8011590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011592:	3318      	adds	r3, #24
 8011594:	213f      	movs	r1, #63	@ 0x3f
 8011596:	4618      	mov	r0, r3
 8011598:	f7fd f9e1 	bl	800e95e <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 801159c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801159e:	331a      	adds	r3, #26
 80115a0:	21ff      	movs	r1, #255	@ 0xff
 80115a2:	4618      	mov	r0, r3
 80115a4:	f7fd f9db 	bl	800e95e <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 80115a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80115aa:	331c      	adds	r3, #28
 80115ac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80115ae:	4618      	mov	r0, r3
 80115b0:	f7fd f9f0 	bl	800e994 <st_dword>
		if (fmt == FS_FAT32) {
 80115b4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80115b8:	2b03      	cmp	r3, #3
 80115ba:	d131      	bne.n	8011620 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 80115bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80115be:	f103 0443 	add.w	r4, r3, #67	@ 0x43
 80115c2:	f7fc feb1 	bl	800e328 <get_fattime>
 80115c6:	4603      	mov	r3, r0
 80115c8:	4619      	mov	r1, r3
 80115ca:	4620      	mov	r0, r4
 80115cc:	f7fd f9e2 	bl	800e994 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 80115d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80115d2:	3324      	adds	r3, #36	@ 0x24
 80115d4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80115d6:	4618      	mov	r0, r3
 80115d8:	f7fd f9dc 	bl	800e994 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 80115dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80115de:	332c      	adds	r3, #44	@ 0x2c
 80115e0:	2102      	movs	r1, #2
 80115e2:	4618      	mov	r0, r3
 80115e4:	f7fd f9d6 	bl	800e994 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 80115e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80115ea:	3330      	adds	r3, #48	@ 0x30
 80115ec:	2101      	movs	r1, #1
 80115ee:	4618      	mov	r0, r3
 80115f0:	f7fd f9b5 	bl	800e95e <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 80115f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80115f6:	3332      	adds	r3, #50	@ 0x32
 80115f8:	2106      	movs	r1, #6
 80115fa:	4618      	mov	r0, r3
 80115fc:	f7fd f9af 	bl	800e95e <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 8011600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011602:	3340      	adds	r3, #64	@ 0x40
 8011604:	2280      	movs	r2, #128	@ 0x80
 8011606:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 8011608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801160a:	3342      	adds	r3, #66	@ 0x42
 801160c:	2229      	movs	r2, #41	@ 0x29
 801160e:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 8011610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011612:	3347      	adds	r3, #71	@ 0x47
 8011614:	2213      	movs	r2, #19
 8011616:	4970      	ldr	r1, [pc, #448]	@ (80117d8 <f_mkfs+0x6ec>)
 8011618:	4618      	mov	r0, r3
 801161a:	f7fd f9e7 	bl	800e9ec <mem_cpy>
 801161e:	e020      	b.n	8011662 <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 8011620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011622:	f103 0427 	add.w	r4, r3, #39	@ 0x27
 8011626:	f7fc fe7f 	bl	800e328 <get_fattime>
 801162a:	4603      	mov	r3, r0
 801162c:	4619      	mov	r1, r3
 801162e:	4620      	mov	r0, r4
 8011630:	f7fd f9b0 	bl	800e994 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 8011634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011636:	3316      	adds	r3, #22
 8011638:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801163a:	b292      	uxth	r2, r2
 801163c:	4611      	mov	r1, r2
 801163e:	4618      	mov	r0, r3
 8011640:	f7fd f98d 	bl	800e95e <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 8011644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011646:	3324      	adds	r3, #36	@ 0x24
 8011648:	2280      	movs	r2, #128	@ 0x80
 801164a:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 801164c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801164e:	3326      	adds	r3, #38	@ 0x26
 8011650:	2229      	movs	r2, #41	@ 0x29
 8011652:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 8011654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011656:	332b      	adds	r3, #43	@ 0x2b
 8011658:	2213      	movs	r2, #19
 801165a:	4960      	ldr	r1, [pc, #384]	@ (80117dc <f_mkfs+0x6f0>)
 801165c:	4618      	mov	r0, r3
 801165e:	f7fd f9c5 	bl	800e9ec <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 8011662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011664:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8011668:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 801166c:	4618      	mov	r0, r3
 801166e:	f7fd f976 	bl	800e95e <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 8011672:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8011676:	2301      	movs	r3, #1
 8011678:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801167a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801167c:	f7fd f8f6 	bl	800e86c <disk_write>
 8011680:	4603      	mov	r3, r0
 8011682:	2b00      	cmp	r3, #0
 8011684:	d001      	beq.n	801168a <f_mkfs+0x59e>
 8011686:	2301      	movs	r3, #1
 8011688:	e156      	b.n	8011938 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 801168a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 801168e:	2b03      	cmp	r3, #3
 8011690:	d140      	bne.n	8011714 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 8011692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011694:	1d9a      	adds	r2, r3, #6
 8011696:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 801169a:	2301      	movs	r3, #1
 801169c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801169e:	f7fd f8e5 	bl	800e86c <disk_write>
			mem_set(buf, 0, ss);
 80116a2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80116a4:	461a      	mov	r2, r3
 80116a6:	2100      	movs	r1, #0
 80116a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80116aa:	f7fd f9c0 	bl	800ea2e <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 80116ae:	494c      	ldr	r1, [pc, #304]	@ (80117e0 <f_mkfs+0x6f4>)
 80116b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80116b2:	f7fd f96f 	bl	800e994 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 80116b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80116b8:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80116bc:	4949      	ldr	r1, [pc, #292]	@ (80117e4 <f_mkfs+0x6f8>)
 80116be:	4618      	mov	r0, r3
 80116c0:	f7fd f968 	bl	800e994 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 80116c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80116c6:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80116ca:	6a3b      	ldr	r3, [r7, #32]
 80116cc:	3b01      	subs	r3, #1
 80116ce:	4619      	mov	r1, r3
 80116d0:	4610      	mov	r0, r2
 80116d2:	f7fd f95f 	bl	800e994 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 80116d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80116d8:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80116dc:	2102      	movs	r1, #2
 80116de:	4618      	mov	r0, r3
 80116e0:	f7fd f958 	bl	800e994 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 80116e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80116e6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80116ea:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 80116ee:	4618      	mov	r0, r3
 80116f0:	f7fd f935 	bl	800e95e <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 80116f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116f6:	1dda      	adds	r2, r3, #7
 80116f8:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 80116fc:	2301      	movs	r3, #1
 80116fe:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8011700:	f7fd f8b4 	bl	800e86c <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 8011704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011706:	1c5a      	adds	r2, r3, #1
 8011708:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 801170c:	2301      	movs	r3, #1
 801170e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8011710:	f7fd f8ac 	bl	800e86c <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 8011714:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011716:	2100      	movs	r1, #0
 8011718:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801171a:	f7fd f988 	bl	800ea2e <mem_set>
		sect = b_fat;		/* FAT start sector */
 801171e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011720:	667b      	str	r3, [r7, #100]	@ 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8011722:	2300      	movs	r3, #0
 8011724:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011726:	e04b      	b.n	80117c0 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 8011728:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 801172c:	2b03      	cmp	r3, #3
 801172e:	d113      	bne.n	8011758 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 8011730:	f06f 0107 	mvn.w	r1, #7
 8011734:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011736:	f7fd f92d 	bl	800e994 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 801173a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801173c:	3304      	adds	r3, #4
 801173e:	f04f 31ff 	mov.w	r1, #4294967295
 8011742:	4618      	mov	r0, r3
 8011744:	f7fd f926 	bl	800e994 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 8011748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801174a:	3308      	adds	r3, #8
 801174c:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8011750:	4618      	mov	r0, r3
 8011752:	f7fd f91f 	bl	800e994 <st_dword>
 8011756:	e00b      	b.n	8011770 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 8011758:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 801175c:	2b01      	cmp	r3, #1
 801175e:	d101      	bne.n	8011764 <f_mkfs+0x678>
 8011760:	4b21      	ldr	r3, [pc, #132]	@ (80117e8 <f_mkfs+0x6fc>)
 8011762:	e001      	b.n	8011768 <f_mkfs+0x67c>
 8011764:	f06f 0307 	mvn.w	r3, #7
 8011768:	4619      	mov	r1, r3
 801176a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801176c:	f7fd f912 	bl	800e994 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 8011770:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011772:	663b      	str	r3, [r7, #96]	@ 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 8011774:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8011776:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011778:	4293      	cmp	r3, r2
 801177a:	bf28      	it	cs
 801177c:	4613      	movcs	r3, r2
 801177e:	65fb      	str	r3, [r7, #92]	@ 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8011780:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8011784:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011786:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8011788:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801178a:	f7fd f86f 	bl	800e86c <disk_write>
 801178e:	4603      	mov	r3, r0
 8011790:	2b00      	cmp	r3, #0
 8011792:	d001      	beq.n	8011798 <f_mkfs+0x6ac>
 8011794:	2301      	movs	r3, #1
 8011796:	e0cf      	b.n	8011938 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 8011798:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801179a:	461a      	mov	r2, r3
 801179c:	2100      	movs	r1, #0
 801179e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80117a0:	f7fd f945 	bl	800ea2e <mem_set>
				sect += n; nsect -= n;
 80117a4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80117a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80117a8:	4413      	add	r3, r2
 80117aa:	667b      	str	r3, [r7, #100]	@ 0x64
 80117ac:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80117ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80117b0:	1ad3      	subs	r3, r2, r3
 80117b2:	663b      	str	r3, [r7, #96]	@ 0x60
			} while (nsect);
 80117b4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d1dc      	bne.n	8011774 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 80117ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80117bc:	3301      	adds	r3, #1
 80117be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80117c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80117c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80117c4:	429a      	cmp	r2, r3
 80117c6:	d3af      	bcc.n	8011728 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 80117c8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80117cc:	2b03      	cmp	r3, #3
 80117ce:	d10d      	bne.n	80117ec <f_mkfs+0x700>
 80117d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80117d2:	e00c      	b.n	80117ee <f_mkfs+0x702>
 80117d4:	0801ac90 	.word	0x0801ac90
 80117d8:	0801ac9c 	.word	0x0801ac9c
 80117dc:	0801acb0 	.word	0x0801acb0
 80117e0:	41615252 	.word	0x41615252
 80117e4:	61417272 	.word	0x61417272
 80117e8:	00fffff8 	.word	0x00fffff8
 80117ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80117ee:	663b      	str	r3, [r7, #96]	@ 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 80117f0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80117f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117f4:	4293      	cmp	r3, r2
 80117f6:	bf28      	it	cs
 80117f8:	4613      	movcs	r3, r2
 80117fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 80117fc:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8011800:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011802:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8011804:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8011806:	f7fd f831 	bl	800e86c <disk_write>
 801180a:	4603      	mov	r3, r0
 801180c:	2b00      	cmp	r3, #0
 801180e:	d001      	beq.n	8011814 <f_mkfs+0x728>
 8011810:	2301      	movs	r3, #1
 8011812:	e091      	b.n	8011938 <f_mkfs+0x84c>
			sect += n; nsect -= n;
 8011814:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8011816:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011818:	4413      	add	r3, r2
 801181a:	667b      	str	r3, [r7, #100]	@ 0x64
 801181c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801181e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011820:	1ad3      	subs	r3, r2, r3
 8011822:	663b      	str	r3, [r7, #96]	@ 0x60
		} while (nsect);
 8011824:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011826:	2b00      	cmp	r3, #0
 8011828:	d1e2      	bne.n	80117f0 <f_mkfs+0x704>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 801182a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 801182e:	2b03      	cmp	r3, #3
 8011830:	d103      	bne.n	801183a <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 8011832:	230c      	movs	r3, #12
 8011834:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8011838:	e010      	b.n	801185c <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 801183a:	693b      	ldr	r3, [r7, #16]
 801183c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011840:	d303      	bcc.n	801184a <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 8011842:	2306      	movs	r3, #6
 8011844:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8011848:	e008      	b.n	801185c <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 801184a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 801184e:	2b02      	cmp	r3, #2
 8011850:	d101      	bne.n	8011856 <f_mkfs+0x76a>
 8011852:	2304      	movs	r3, #4
 8011854:	e000      	b.n	8011858 <f_mkfs+0x76c>
 8011856:	2301      	movs	r3, #1
 8011858:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 801185c:	7afb      	ldrb	r3, [r7, #11]
 801185e:	f003 0308 	and.w	r3, r3, #8
 8011862:	2b00      	cmp	r3, #0
 8011864:	d15b      	bne.n	801191e <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 8011866:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8011868:	461a      	mov	r2, r3
 801186a:	2100      	movs	r1, #0
 801186c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801186e:	f7fd f8de 	bl	800ea2e <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 8011872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011874:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8011878:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 801187c:	4618      	mov	r0, r3
 801187e:	f7fd f86e 	bl	800e95e <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 8011882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011884:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8011888:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 801188a:	69bb      	ldr	r3, [r7, #24]
 801188c:	2200      	movs	r2, #0
 801188e:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 8011890:	69bb      	ldr	r3, [r7, #24]
 8011892:	3301      	adds	r3, #1
 8011894:	2201      	movs	r2, #1
 8011896:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 8011898:	69bb      	ldr	r3, [r7, #24]
 801189a:	3302      	adds	r3, #2
 801189c:	2201      	movs	r2, #1
 801189e:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 80118a0:	69bb      	ldr	r3, [r7, #24]
 80118a2:	3303      	adds	r3, #3
 80118a4:	2200      	movs	r2, #0
 80118a6:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 80118a8:	69bb      	ldr	r3, [r7, #24]
 80118aa:	3304      	adds	r3, #4
 80118ac:	f897 204e 	ldrb.w	r2, [r7, #78]	@ 0x4e
 80118b0:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 80118b2:	693a      	ldr	r2, [r7, #16]
 80118b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80118b6:	441a      	add	r2, r3
 80118b8:	4b21      	ldr	r3, [pc, #132]	@ (8011940 <f_mkfs+0x854>)
 80118ba:	fba3 1302 	umull	r1, r3, r3, r2
 80118be:	1ad2      	subs	r2, r2, r3
 80118c0:	0852      	lsrs	r2, r2, #1
 80118c2:	4413      	add	r3, r2
 80118c4:	0b5b      	lsrs	r3, r3, #13
 80118c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 80118c8:	69bb      	ldr	r3, [r7, #24]
 80118ca:	3305      	adds	r3, #5
 80118cc:	22fe      	movs	r2, #254	@ 0xfe
 80118ce:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 80118d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80118d2:	089b      	lsrs	r3, r3, #2
 80118d4:	b2da      	uxtb	r2, r3
 80118d6:	69bb      	ldr	r3, [r7, #24]
 80118d8:	3306      	adds	r3, #6
 80118da:	f042 023f 	orr.w	r2, r2, #63	@ 0x3f
 80118de:	b2d2      	uxtb	r2, r2
 80118e0:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 80118e2:	69bb      	ldr	r3, [r7, #24]
 80118e4:	3307      	adds	r3, #7
 80118e6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80118e8:	b2d2      	uxtb	r2, r2
 80118ea:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 80118ec:	69bb      	ldr	r3, [r7, #24]
 80118ee:	3308      	adds	r3, #8
 80118f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80118f2:	4618      	mov	r0, r3
 80118f4:	f7fd f84e 	bl	800e994 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 80118f8:	69bb      	ldr	r3, [r7, #24]
 80118fa:	330c      	adds	r3, #12
 80118fc:	693a      	ldr	r2, [r7, #16]
 80118fe:	4611      	mov	r1, r2
 8011900:	4618      	mov	r0, r3
 8011902:	f7fd f847 	bl	800e994 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 8011906:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 801190a:	2301      	movs	r3, #1
 801190c:	2200      	movs	r2, #0
 801190e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8011910:	f7fc ffac 	bl	800e86c <disk_write>
 8011914:	4603      	mov	r3, r0
 8011916:	2b00      	cmp	r3, #0
 8011918:	d001      	beq.n	801191e <f_mkfs+0x832>
 801191a:	2301      	movs	r3, #1
 801191c:	e00c      	b.n	8011938 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 801191e:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8011922:	2200      	movs	r2, #0
 8011924:	2100      	movs	r1, #0
 8011926:	4618      	mov	r0, r3
 8011928:	f7fc ffc0 	bl	800e8ac <disk_ioctl>
 801192c:	4603      	mov	r3, r0
 801192e:	2b00      	cmp	r3, #0
 8011930:	d001      	beq.n	8011936 <f_mkfs+0x84a>
 8011932:	2301      	movs	r3, #1
 8011934:	e000      	b.n	8011938 <f_mkfs+0x84c>

	return FR_OK;
 8011936:	2300      	movs	r3, #0
}
 8011938:	4618      	mov	r0, r3
 801193a:	3774      	adds	r7, #116	@ 0x74
 801193c:	46bd      	mov	sp, r7
 801193e:	bd90      	pop	{r4, r7, pc}
 8011940:	0515565b 	.word	0x0515565b

08011944 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011944:	b480      	push	{r7}
 8011946:	b087      	sub	sp, #28
 8011948:	af00      	add	r7, sp, #0
 801194a:	60f8      	str	r0, [r7, #12]
 801194c:	60b9      	str	r1, [r7, #8]
 801194e:	4613      	mov	r3, r2
 8011950:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8011952:	2301      	movs	r3, #1
 8011954:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8011956:	2300      	movs	r3, #0
 8011958:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801195a:	4b1f      	ldr	r3, [pc, #124]	@ (80119d8 <FATFS_LinkDriverEx+0x94>)
 801195c:	7a5b      	ldrb	r3, [r3, #9]
 801195e:	b2db      	uxtb	r3, r3
 8011960:	2b00      	cmp	r3, #0
 8011962:	d131      	bne.n	80119c8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011964:	4b1c      	ldr	r3, [pc, #112]	@ (80119d8 <FATFS_LinkDriverEx+0x94>)
 8011966:	7a5b      	ldrb	r3, [r3, #9]
 8011968:	b2db      	uxtb	r3, r3
 801196a:	461a      	mov	r2, r3
 801196c:	4b1a      	ldr	r3, [pc, #104]	@ (80119d8 <FATFS_LinkDriverEx+0x94>)
 801196e:	2100      	movs	r1, #0
 8011970:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8011972:	4b19      	ldr	r3, [pc, #100]	@ (80119d8 <FATFS_LinkDriverEx+0x94>)
 8011974:	7a5b      	ldrb	r3, [r3, #9]
 8011976:	b2db      	uxtb	r3, r3
 8011978:	4a17      	ldr	r2, [pc, #92]	@ (80119d8 <FATFS_LinkDriverEx+0x94>)
 801197a:	009b      	lsls	r3, r3, #2
 801197c:	4413      	add	r3, r2
 801197e:	68fa      	ldr	r2, [r7, #12]
 8011980:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8011982:	4b15      	ldr	r3, [pc, #84]	@ (80119d8 <FATFS_LinkDriverEx+0x94>)
 8011984:	7a5b      	ldrb	r3, [r3, #9]
 8011986:	b2db      	uxtb	r3, r3
 8011988:	461a      	mov	r2, r3
 801198a:	4b13      	ldr	r3, [pc, #76]	@ (80119d8 <FATFS_LinkDriverEx+0x94>)
 801198c:	4413      	add	r3, r2
 801198e:	79fa      	ldrb	r2, [r7, #7]
 8011990:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8011992:	4b11      	ldr	r3, [pc, #68]	@ (80119d8 <FATFS_LinkDriverEx+0x94>)
 8011994:	7a5b      	ldrb	r3, [r3, #9]
 8011996:	b2db      	uxtb	r3, r3
 8011998:	1c5a      	adds	r2, r3, #1
 801199a:	b2d1      	uxtb	r1, r2
 801199c:	4a0e      	ldr	r2, [pc, #56]	@ (80119d8 <FATFS_LinkDriverEx+0x94>)
 801199e:	7251      	strb	r1, [r2, #9]
 80119a0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80119a2:	7dbb      	ldrb	r3, [r7, #22]
 80119a4:	3330      	adds	r3, #48	@ 0x30
 80119a6:	b2da      	uxtb	r2, r3
 80119a8:	68bb      	ldr	r3, [r7, #8]
 80119aa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80119ac:	68bb      	ldr	r3, [r7, #8]
 80119ae:	3301      	adds	r3, #1
 80119b0:	223a      	movs	r2, #58	@ 0x3a
 80119b2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80119b4:	68bb      	ldr	r3, [r7, #8]
 80119b6:	3302      	adds	r3, #2
 80119b8:	222f      	movs	r2, #47	@ 0x2f
 80119ba:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80119bc:	68bb      	ldr	r3, [r7, #8]
 80119be:	3303      	adds	r3, #3
 80119c0:	2200      	movs	r2, #0
 80119c2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80119c4:	2300      	movs	r3, #0
 80119c6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80119c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80119ca:	4618      	mov	r0, r3
 80119cc:	371c      	adds	r7, #28
 80119ce:	46bd      	mov	sp, r7
 80119d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119d4:	4770      	bx	lr
 80119d6:	bf00      	nop
 80119d8:	20035f6c 	.word	0x20035f6c

080119dc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80119dc:	b580      	push	{r7, lr}
 80119de:	b082      	sub	sp, #8
 80119e0:	af00      	add	r7, sp, #0
 80119e2:	6078      	str	r0, [r7, #4]
 80119e4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80119e6:	2200      	movs	r2, #0
 80119e8:	6839      	ldr	r1, [r7, #0]
 80119ea:	6878      	ldr	r0, [r7, #4]
 80119ec:	f7ff ffaa 	bl	8011944 <FATFS_LinkDriverEx>
 80119f0:	4603      	mov	r3, r0
}
 80119f2:	4618      	mov	r0, r3
 80119f4:	3708      	adds	r7, #8
 80119f6:	46bd      	mov	sp, r7
 80119f8:	bd80      	pop	{r7, pc}
	...

080119fc <network_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 80119fc:	b580      	push	{r7, lr}
 80119fe:	b082      	sub	sp, #8
 8011a00:	af00      	add	r7, sp, #0
 8011a02:	6078      	str	r0, [r7, #4]
 8011a04:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 8011a06:	683a      	ldr	r2, [r7, #0]
 8011a08:	2101      	movs	r1, #1
 8011a0a:	4831      	ldr	r0, [pc, #196]	@ (8011ad0 <network_configure_activations+0xd4>)
 8011a0c:	f001 fbe8 	bl	80131e0 <ai_platform_get_activations_map>
 8011a10:	4603      	mov	r3, r0
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	d051      	beq.n	8011aba <network_configure_activations+0xbe>
    /* Updating activations (byte) offsets */
    
    serving_default_keras_tensor0_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8011a16:	4b2e      	ldr	r3, [pc, #184]	@ (8011ad0 <network_configure_activations+0xd4>)
 8011a18:	681b      	ldr	r3, [r3, #0]
 8011a1a:	4a2e      	ldr	r2, [pc, #184]	@ (8011ad4 <network_configure_activations+0xd8>)
 8011a1c:	6093      	str	r3, [r2, #8]
    serving_default_keras_tensor0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8011a1e:	4b2c      	ldr	r3, [pc, #176]	@ (8011ad0 <network_configure_activations+0xd4>)
 8011a20:	681b      	ldr	r3, [r3, #0]
 8011a22:	4a2c      	ldr	r2, [pc, #176]	@ (8011ad4 <network_configure_activations+0xd8>)
 8011a24:	60d3      	str	r3, [r2, #12]
    resize_0_output_array.data = AI_PTR(g_network_activations_map[0] + 63984);
 8011a26:	4b2a      	ldr	r3, [pc, #168]	@ (8011ad0 <network_configure_activations+0xd4>)
 8011a28:	681a      	ldr	r2, [r3, #0]
 8011a2a:	f64f 13f0 	movw	r3, #63984	@ 0xf9f0
 8011a2e:	4413      	add	r3, r2
 8011a30:	4a29      	ldr	r2, [pc, #164]	@ (8011ad8 <network_configure_activations+0xdc>)
 8011a32:	6093      	str	r3, [r2, #8]
    resize_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 63984);
 8011a34:	4b26      	ldr	r3, [pc, #152]	@ (8011ad0 <network_configure_activations+0xd4>)
 8011a36:	681a      	ldr	r2, [r3, #0]
 8011a38:	f64f 13f0 	movw	r3, #63984	@ 0xf9f0
 8011a3c:	4413      	add	r3, r2
 8011a3e:	4a26      	ldr	r2, [pc, #152]	@ (8011ad8 <network_configure_activations+0xdc>)
 8011a40:	60d3      	str	r3, [r2, #12]
    conv2d_1_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8011a42:	4b23      	ldr	r3, [pc, #140]	@ (8011ad0 <network_configure_activations+0xd4>)
 8011a44:	681b      	ldr	r3, [r3, #0]
 8011a46:	4a25      	ldr	r2, [pc, #148]	@ (8011adc <network_configure_activations+0xe0>)
 8011a48:	6093      	str	r3, [r2, #8]
    conv2d_1_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8011a4a:	4b21      	ldr	r3, [pc, #132]	@ (8011ad0 <network_configure_activations+0xd4>)
 8011a4c:	681b      	ldr	r3, [r3, #0]
 8011a4e:	4a23      	ldr	r2, [pc, #140]	@ (8011adc <network_configure_activations+0xe0>)
 8011a50:	60d3      	str	r3, [r2, #12]
    conv2d_1_scratch1_array.data = AI_PTR(g_network_activations_map[0] + 36);
 8011a52:	4b1f      	ldr	r3, [pc, #124]	@ (8011ad0 <network_configure_activations+0xd4>)
 8011a54:	681b      	ldr	r3, [r3, #0]
 8011a56:	3324      	adds	r3, #36	@ 0x24
 8011a58:	4a21      	ldr	r2, [pc, #132]	@ (8011ae0 <network_configure_activations+0xe4>)
 8011a5a:	6093      	str	r3, [r2, #8]
    conv2d_1_scratch1_array.data_start = AI_PTR(g_network_activations_map[0] + 36);
 8011a5c:	4b1c      	ldr	r3, [pc, #112]	@ (8011ad0 <network_configure_activations+0xd4>)
 8011a5e:	681b      	ldr	r3, [r3, #0]
 8011a60:	3324      	adds	r3, #36	@ 0x24
 8011a62:	4a1f      	ldr	r2, [pc, #124]	@ (8011ae0 <network_configure_activations+0xe4>)
 8011a64:	60d3      	str	r3, [r2, #12]
    conv2d_1_output_array.data = AI_PTR(g_network_activations_map[0] + 3364);
 8011a66:	4b1a      	ldr	r3, [pc, #104]	@ (8011ad0 <network_configure_activations+0xd4>)
 8011a68:	681b      	ldr	r3, [r3, #0]
 8011a6a:	f603 5324 	addw	r3, r3, #3364	@ 0xd24
 8011a6e:	4a1d      	ldr	r2, [pc, #116]	@ (8011ae4 <network_configure_activations+0xe8>)
 8011a70:	6093      	str	r3, [r2, #8]
    conv2d_1_output_array.data_start = AI_PTR(g_network_activations_map[0] + 3364);
 8011a72:	4b17      	ldr	r3, [pc, #92]	@ (8011ad0 <network_configure_activations+0xd4>)
 8011a74:	681b      	ldr	r3, [r3, #0]
 8011a76:	f603 5324 	addw	r3, r3, #3364	@ 0xd24
 8011a7a:	4a1a      	ldr	r2, [pc, #104]	@ (8011ae4 <network_configure_activations+0xe8>)
 8011a7c:	60d3      	str	r3, [r2, #12]
    gemm_4_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8011a7e:	4b14      	ldr	r3, [pc, #80]	@ (8011ad0 <network_configure_activations+0xd4>)
 8011a80:	681b      	ldr	r3, [r3, #0]
 8011a82:	4a19      	ldr	r2, [pc, #100]	@ (8011ae8 <network_configure_activations+0xec>)
 8011a84:	6093      	str	r3, [r2, #8]
    gemm_4_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8011a86:	4b12      	ldr	r3, [pc, #72]	@ (8011ad0 <network_configure_activations+0xd4>)
 8011a88:	681b      	ldr	r3, [r3, #0]
 8011a8a:	4a17      	ldr	r2, [pc, #92]	@ (8011ae8 <network_configure_activations+0xec>)
 8011a8c:	60d3      	str	r3, [r2, #12]
    nl_4_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 256);
 8011a8e:	4b10      	ldr	r3, [pc, #64]	@ (8011ad0 <network_configure_activations+0xd4>)
 8011a90:	681b      	ldr	r3, [r3, #0]
 8011a92:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8011a96:	4a15      	ldr	r2, [pc, #84]	@ (8011aec <network_configure_activations+0xf0>)
 8011a98:	6093      	str	r3, [r2, #8]
    nl_4_nl_output_array.data_start = AI_PTR(g_network_activations_map[0] + 256);
 8011a9a:	4b0d      	ldr	r3, [pc, #52]	@ (8011ad0 <network_configure_activations+0xd4>)
 8011a9c:	681b      	ldr	r3, [r3, #0]
 8011a9e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8011aa2:	4a12      	ldr	r2, [pc, #72]	@ (8011aec <network_configure_activations+0xf0>)
 8011aa4:	60d3      	str	r3, [r2, #12]
    gemm_5_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8011aa6:	4b0a      	ldr	r3, [pc, #40]	@ (8011ad0 <network_configure_activations+0xd4>)
 8011aa8:	681b      	ldr	r3, [r3, #0]
 8011aaa:	4a11      	ldr	r2, [pc, #68]	@ (8011af0 <network_configure_activations+0xf4>)
 8011aac:	6093      	str	r3, [r2, #8]
    gemm_5_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8011aae:	4b08      	ldr	r3, [pc, #32]	@ (8011ad0 <network_configure_activations+0xd4>)
 8011ab0:	681b      	ldr	r3, [r3, #0]
 8011ab2:	4a0f      	ldr	r2, [pc, #60]	@ (8011af0 <network_configure_activations+0xf4>)
 8011ab4:	60d3      	str	r3, [r2, #12]
    return true;
 8011ab6:	2301      	movs	r3, #1
 8011ab8:	e005      	b.n	8011ac6 <network_configure_activations+0xca>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8011aba:	2213      	movs	r2, #19
 8011abc:	2130      	movs	r1, #48	@ 0x30
 8011abe:	6878      	ldr	r0, [r7, #4]
 8011ac0:	f001 fc0c 	bl	80132dc <ai_platform_network_set_error>
  return false;
 8011ac4:	2300      	movs	r3, #0
}
 8011ac6:	4618      	mov	r0, r3
 8011ac8:	3708      	adds	r7, #8
 8011aca:	46bd      	mov	sp, r7
 8011acc:	bd80      	pop	{r7, pc}
 8011ace:	bf00      	nop
 8011ad0:	20035f78 	.word	0x20035f78
 8011ad4:	2000010c 	.word	0x2000010c
 8011ad8:	2000011c 	.word	0x2000011c
 8011adc:	200001cc 	.word	0x200001cc
 8011ae0:	200001dc 	.word	0x200001dc
 8011ae4:	2000012c 	.word	0x2000012c
 8011ae8:	2000013c 	.word	0x2000013c
 8011aec:	2000014c 	.word	0x2000014c
 8011af0:	2000015c 	.word	0x2000015c

08011af4 <network_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 8011af4:	b580      	push	{r7, lr}
 8011af6:	b082      	sub	sp, #8
 8011af8:	af00      	add	r7, sp, #0
 8011afa:	6078      	str	r0, [r7, #4]
 8011afc:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 8011afe:	683a      	ldr	r2, [r7, #0]
 8011b00:	2101      	movs	r1, #1
 8011b02:	483d      	ldr	r0, [pc, #244]	@ (8011bf8 <network_configure_weights+0x104>)
 8011b04:	f001 fb14 	bl	8013130 <ai_platform_get_weights_map>
 8011b08:	4603      	mov	r3, r0
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	d069      	beq.n	8011be2 <network_configure_weights+0xee>
    /* Updating weights (byte) offsets */
    
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8011b0e:	4b3b      	ldr	r3, [pc, #236]	@ (8011bfc <network_configure_weights+0x108>)
 8011b10:	681b      	ldr	r3, [r3, #0]
 8011b12:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8011b16:	4a39      	ldr	r2, [pc, #228]	@ (8011bfc <network_configure_weights+0x108>)
 8011b18:	6013      	str	r3, [r2, #0]
    conv2d_1_weights_array.data = AI_PTR(g_network_weights_map[0] + 0);
 8011b1a:	4b37      	ldr	r3, [pc, #220]	@ (8011bf8 <network_configure_weights+0x104>)
 8011b1c:	681b      	ldr	r3, [r3, #0]
 8011b1e:	4a37      	ldr	r2, [pc, #220]	@ (8011bfc <network_configure_weights+0x108>)
 8011b20:	6093      	str	r3, [r2, #8]
    conv2d_1_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 0);
 8011b22:	4b35      	ldr	r3, [pc, #212]	@ (8011bf8 <network_configure_weights+0x104>)
 8011b24:	681b      	ldr	r3, [r3, #0]
 8011b26:	4a35      	ldr	r2, [pc, #212]	@ (8011bfc <network_configure_weights+0x108>)
 8011b28:	60d3      	str	r3, [r2, #12]
    conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8011b2a:	4b35      	ldr	r3, [pc, #212]	@ (8011c00 <network_configure_weights+0x10c>)
 8011b2c:	681b      	ldr	r3, [r3, #0]
 8011b2e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8011b32:	4a33      	ldr	r2, [pc, #204]	@ (8011c00 <network_configure_weights+0x10c>)
 8011b34:	6013      	str	r3, [r2, #0]
    conv2d_1_bias_array.data = AI_PTR(g_network_weights_map[0] + 576);
 8011b36:	4b30      	ldr	r3, [pc, #192]	@ (8011bf8 <network_configure_weights+0x104>)
 8011b38:	681b      	ldr	r3, [r3, #0]
 8011b3a:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 8011b3e:	4a30      	ldr	r2, [pc, #192]	@ (8011c00 <network_configure_weights+0x10c>)
 8011b40:	6093      	str	r3, [r2, #8]
    conv2d_1_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 576);
 8011b42:	4b2d      	ldr	r3, [pc, #180]	@ (8011bf8 <network_configure_weights+0x104>)
 8011b44:	681b      	ldr	r3, [r3, #0]
 8011b46:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 8011b4a:	4a2d      	ldr	r2, [pc, #180]	@ (8011c00 <network_configure_weights+0x10c>)
 8011b4c:	60d3      	str	r3, [r2, #12]
    gemm_4_weights_array.format |= AI_FMT_FLAG_CONST;
 8011b4e:	4b2d      	ldr	r3, [pc, #180]	@ (8011c04 <network_configure_weights+0x110>)
 8011b50:	681b      	ldr	r3, [r3, #0]
 8011b52:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8011b56:	4a2b      	ldr	r2, [pc, #172]	@ (8011c04 <network_configure_weights+0x110>)
 8011b58:	6013      	str	r3, [r2, #0]
    gemm_4_weights_array.data = AI_PTR(g_network_weights_map[0] + 640);
 8011b5a:	4b27      	ldr	r3, [pc, #156]	@ (8011bf8 <network_configure_weights+0x104>)
 8011b5c:	681b      	ldr	r3, [r3, #0]
 8011b5e:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8011b62:	4a28      	ldr	r2, [pc, #160]	@ (8011c04 <network_configure_weights+0x110>)
 8011b64:	6093      	str	r3, [r2, #8]
    gemm_4_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 640);
 8011b66:	4b24      	ldr	r3, [pc, #144]	@ (8011bf8 <network_configure_weights+0x104>)
 8011b68:	681b      	ldr	r3, [r3, #0]
 8011b6a:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8011b6e:	4a25      	ldr	r2, [pc, #148]	@ (8011c04 <network_configure_weights+0x110>)
 8011b70:	60d3      	str	r3, [r2, #12]
    gemm_4_bias_array.format |= AI_FMT_FLAG_CONST;
 8011b72:	4b25      	ldr	r3, [pc, #148]	@ (8011c08 <network_configure_weights+0x114>)
 8011b74:	681b      	ldr	r3, [r3, #0]
 8011b76:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8011b7a:	4a23      	ldr	r2, [pc, #140]	@ (8011c08 <network_configure_weights+0x114>)
 8011b7c:	6013      	str	r3, [r2, #0]
    gemm_4_bias_array.data = AI_PTR(g_network_weights_map[0] + 692864);
 8011b7e:	4b1e      	ldr	r3, [pc, #120]	@ (8011bf8 <network_configure_weights+0x104>)
 8011b80:	681a      	ldr	r2, [r3, #0]
 8011b82:	4b22      	ldr	r3, [pc, #136]	@ (8011c0c <network_configure_weights+0x118>)
 8011b84:	4413      	add	r3, r2
 8011b86:	4a20      	ldr	r2, [pc, #128]	@ (8011c08 <network_configure_weights+0x114>)
 8011b88:	6093      	str	r3, [r2, #8]
    gemm_4_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 692864);
 8011b8a:	4b1b      	ldr	r3, [pc, #108]	@ (8011bf8 <network_configure_weights+0x104>)
 8011b8c:	681a      	ldr	r2, [r3, #0]
 8011b8e:	4b1f      	ldr	r3, [pc, #124]	@ (8011c0c <network_configure_weights+0x118>)
 8011b90:	4413      	add	r3, r2
 8011b92:	4a1d      	ldr	r2, [pc, #116]	@ (8011c08 <network_configure_weights+0x114>)
 8011b94:	60d3      	str	r3, [r2, #12]
    gemm_5_weights_array.format |= AI_FMT_FLAG_CONST;
 8011b96:	4b1e      	ldr	r3, [pc, #120]	@ (8011c10 <network_configure_weights+0x11c>)
 8011b98:	681b      	ldr	r3, [r3, #0]
 8011b9a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8011b9e:	4a1c      	ldr	r2, [pc, #112]	@ (8011c10 <network_configure_weights+0x11c>)
 8011ba0:	6013      	str	r3, [r2, #0]
    gemm_5_weights_array.data = AI_PTR(g_network_weights_map[0] + 693120);
 8011ba2:	4b15      	ldr	r3, [pc, #84]	@ (8011bf8 <network_configure_weights+0x104>)
 8011ba4:	681a      	ldr	r2, [r3, #0]
 8011ba6:	4b1b      	ldr	r3, [pc, #108]	@ (8011c14 <network_configure_weights+0x120>)
 8011ba8:	4413      	add	r3, r2
 8011baa:	4a19      	ldr	r2, [pc, #100]	@ (8011c10 <network_configure_weights+0x11c>)
 8011bac:	6093      	str	r3, [r2, #8]
    gemm_5_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 693120);
 8011bae:	4b12      	ldr	r3, [pc, #72]	@ (8011bf8 <network_configure_weights+0x104>)
 8011bb0:	681a      	ldr	r2, [r3, #0]
 8011bb2:	4b18      	ldr	r3, [pc, #96]	@ (8011c14 <network_configure_weights+0x120>)
 8011bb4:	4413      	add	r3, r2
 8011bb6:	4a16      	ldr	r2, [pc, #88]	@ (8011c10 <network_configure_weights+0x11c>)
 8011bb8:	60d3      	str	r3, [r2, #12]
    gemm_5_bias_array.format |= AI_FMT_FLAG_CONST;
 8011bba:	4b17      	ldr	r3, [pc, #92]	@ (8011c18 <network_configure_weights+0x124>)
 8011bbc:	681b      	ldr	r3, [r3, #0]
 8011bbe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8011bc2:	4a15      	ldr	r2, [pc, #84]	@ (8011c18 <network_configure_weights+0x124>)
 8011bc4:	6013      	str	r3, [r2, #0]
    gemm_5_bias_array.data = AI_PTR(g_network_weights_map[0] + 694656);
 8011bc6:	4b0c      	ldr	r3, [pc, #48]	@ (8011bf8 <network_configure_weights+0x104>)
 8011bc8:	681a      	ldr	r2, [r3, #0]
 8011bca:	4b14      	ldr	r3, [pc, #80]	@ (8011c1c <network_configure_weights+0x128>)
 8011bcc:	4413      	add	r3, r2
 8011bce:	4a12      	ldr	r2, [pc, #72]	@ (8011c18 <network_configure_weights+0x124>)
 8011bd0:	6093      	str	r3, [r2, #8]
    gemm_5_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 694656);
 8011bd2:	4b09      	ldr	r3, [pc, #36]	@ (8011bf8 <network_configure_weights+0x104>)
 8011bd4:	681a      	ldr	r2, [r3, #0]
 8011bd6:	4b11      	ldr	r3, [pc, #68]	@ (8011c1c <network_configure_weights+0x128>)
 8011bd8:	4413      	add	r3, r2
 8011bda:	4a0f      	ldr	r2, [pc, #60]	@ (8011c18 <network_configure_weights+0x124>)
 8011bdc:	60d3      	str	r3, [r2, #12]
    return true;
 8011bde:	2301      	movs	r3, #1
 8011be0:	e005      	b.n	8011bee <network_configure_weights+0xfa>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8011be2:	2212      	movs	r2, #18
 8011be4:	2130      	movs	r1, #48	@ 0x30
 8011be6:	6878      	ldr	r0, [r7, #4]
 8011be8:	f001 fb78 	bl	80132dc <ai_platform_network_set_error>
  return false;
 8011bec:	2300      	movs	r3, #0
}
 8011bee:	4618      	mov	r0, r3
 8011bf0:	3708      	adds	r7, #8
 8011bf2:	46bd      	mov	sp, r7
 8011bf4:	bd80      	pop	{r7, pc}
 8011bf6:	bf00      	nop
 8011bf8:	20035f7c 	.word	0x20035f7c
 8011bfc:	2000016c 	.word	0x2000016c
 8011c00:	2000017c 	.word	0x2000017c
 8011c04:	2000018c 	.word	0x2000018c
 8011c08:	2000019c 	.word	0x2000019c
 8011c0c:	000a9280 	.word	0x000a9280
 8011c10:	200001ac 	.word	0x200001ac
 8011c14:	000a9380 	.word	0x000a9380
 8011c18:	200001bc 	.word	0x200001bc
 8011c1c:	000a9980 	.word	0x000a9980

08011c20 <ai_network_get_error>:
}


AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 8011c20:	b580      	push	{r7, lr}
 8011c22:	b082      	sub	sp, #8
 8011c24:	af00      	add	r7, sp, #0
 8011c26:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 8011c28:	6878      	ldr	r0, [r7, #4]
 8011c2a:	f001 fb4b 	bl	80132c4 <ai_platform_network_get_error>
 8011c2e:	4603      	mov	r3, r0
}
 8011c30:	4618      	mov	r0, r3
 8011c32:	3708      	adds	r7, #8
 8011c34:	46bd      	mov	sp, r7
 8011c36:	bd80      	pop	{r7, pc}

08011c38 <ai_network_create>:


AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8011c38:	b580      	push	{r7, lr}
 8011c3a:	b084      	sub	sp, #16
 8011c3c:	af02      	add	r7, sp, #8
 8011c3e:	6078      	str	r0, [r7, #4]
 8011c40:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8011c42:	2300      	movs	r3, #0
 8011c44:	9301      	str	r3, [sp, #4]
 8011c46:	2305      	movs	r3, #5
 8011c48:	9300      	str	r3, [sp, #0]
 8011c4a:	2301      	movs	r3, #1
 8011c4c:	4a04      	ldr	r2, [pc, #16]	@ (8011c60 <ai_network_create+0x28>)
 8011c4e:	6839      	ldr	r1, [r7, #0]
 8011c50:	6878      	ldr	r0, [r7, #4]
 8011c52:	f001 fc37 	bl	80134c4 <ai_platform_network_create>
 8011c56:	4603      	mov	r3, r0
    network, network_config, 
    AI_CONTEXT_OBJ(&AI_NET_OBJ_INSTANCE),
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8011c58:	4618      	mov	r0, r3
 8011c5a:	3708      	adds	r7, #8
 8011c5c:	46bd      	mov	sp, r7
 8011c5e:	bd80      	pop	{r7, pc}
 8011c60:	2000081c 	.word	0x2000081c

08011c64 <ai_network_create_and_init>:


AI_API_ENTRY
ai_error ai_network_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 8011c64:	b580      	push	{r7, lr}
 8011c66:	b094      	sub	sp, #80	@ 0x50
 8011c68:	af00      	add	r7, sp, #0
 8011c6a:	60f8      	str	r0, [r7, #12]
 8011c6c:	60b9      	str	r1, [r7, #8]
 8011c6e:	607a      	str	r2, [r7, #4]
  ai_error err;
  ai_network_params params;

  err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 8011c70:	2100      	movs	r1, #0
 8011c72:	68f8      	ldr	r0, [r7, #12]
 8011c74:	f7ff ffe0 	bl	8011c38 <ai_network_create>
 8011c78:	4603      	mov	r3, r0
 8011c7a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (err.type != AI_ERROR_NONE) {
 8011c7c:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d001      	beq.n	8011c88 <ai_network_create_and_init+0x24>
    return err;
 8011c84:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011c86:	e067      	b.n	8011d58 <ai_network_create_and_init+0xf4>
  }
  
  if (ai_network_data_params_get(&params) != true) {
 8011c88:	f107 0310 	add.w	r3, r7, #16
 8011c8c:	4618      	mov	r0, r3
 8011c8e:	f000 f8e7 	bl	8011e60 <ai_network_data_params_get>
 8011c92:	4603      	mov	r3, r0
 8011c94:	f083 0301 	eor.w	r3, r3, #1
 8011c98:	b2db      	uxtb	r3, r3
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d008      	beq.n	8011cb0 <ai_network_create_and_init+0x4c>
    err = ai_network_get_error(*network);
 8011c9e:	68fb      	ldr	r3, [r7, #12]
 8011ca0:	681b      	ldr	r3, [r3, #0]
 8011ca2:	4618      	mov	r0, r3
 8011ca4:	f7ff ffbc 	bl	8011c20 <ai_network_get_error>
 8011ca8:	4603      	mov	r3, r0
 8011caa:	64bb      	str	r3, [r7, #72]	@ 0x48
    return err;
 8011cac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011cae:	e053      	b.n	8011d58 <ai_network_create_and_init+0xf4>
  }
#if defined(AI_NETWORK_DATA_ACTIVATIONS_COUNT)
  /* set the addresses of the activations buffers */
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 8011cb0:	2300      	movs	r3, #0
 8011cb2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8011cb6:	e012      	b.n	8011cde <ai_network_create_and_init+0x7a>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 8011cb8:	f8b7 104e 	ldrh.w	r1, [r7, #78]	@ 0x4e
 8011cbc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8011cc0:	009b      	lsls	r3, r3, #2
 8011cc2:	68ba      	ldr	r2, [r7, #8]
 8011cc4:	4413      	add	r3, r2
 8011cc6:	681a      	ldr	r2, [r3, #0]
 8011cc8:	f107 0310 	add.w	r3, r7, #16
 8011ccc:	330c      	adds	r3, #12
 8011cce:	4618      	mov	r0, r3
 8011cd0:	f001 fa1e 	bl	8013110 <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 8011cd4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8011cd8:	3301      	adds	r3, #1
 8011cda:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8011cde:	68bb      	ldr	r3, [r7, #8]
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	d004      	beq.n	8011cee <ai_network_create_and_init+0x8a>
 8011ce4:	8bfb      	ldrh	r3, [r7, #30]
 8011ce6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8011cea:	429a      	cmp	r2, r3
 8011cec:	d3e4      	bcc.n	8011cb8 <ai_network_create_and_init+0x54>
  }
#endif
#if defined(AI_NETWORK_DATA_WEIGHTS_COUNT)
  /* set the addresses of the weight buffers */
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 8011cee:	2300      	movs	r3, #0
 8011cf0:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8011cf4:	e012      	b.n	8011d1c <ai_network_create_and_init+0xb8>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 8011cf6:	f8b7 104c 	ldrh.w	r1, [r7, #76]	@ 0x4c
 8011cfa:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8011cfe:	009b      	lsls	r3, r3, #2
 8011d00:	687a      	ldr	r2, [r7, #4]
 8011d02:	4413      	add	r3, r2
 8011d04:	681a      	ldr	r2, [r3, #0]
 8011d06:	f107 0310 	add.w	r3, r7, #16
 8011d0a:	3304      	adds	r3, #4
 8011d0c:	4618      	mov	r0, r3
 8011d0e:	f001 f9ff 	bl	8013110 <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 8011d12:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8011d16:	3301      	adds	r3, #1
 8011d18:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	d004      	beq.n	8011d2c <ai_network_create_and_init+0xc8>
 8011d22:	8afb      	ldrh	r3, [r7, #22]
 8011d24:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 8011d28:	429a      	cmp	r2, r3
 8011d2a:	d3e4      	bcc.n	8011cf6 <ai_network_create_and_init+0x92>
  }
#endif
  if (ai_network_init(*network, &params) != true) {
 8011d2c:	68fb      	ldr	r3, [r7, #12]
 8011d2e:	681b      	ldr	r3, [r3, #0]
 8011d30:	f107 0210 	add.w	r2, r7, #16
 8011d34:	4611      	mov	r1, r2
 8011d36:	4618      	mov	r0, r3
 8011d38:	f000 f846 	bl	8011dc8 <ai_network_init>
 8011d3c:	4603      	mov	r3, r0
 8011d3e:	f083 0301 	eor.w	r3, r3, #1
 8011d42:	b2db      	uxtb	r3, r3
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	d006      	beq.n	8011d56 <ai_network_create_and_init+0xf2>
    err = ai_network_get_error(*network);
 8011d48:	68fb      	ldr	r3, [r7, #12]
 8011d4a:	681b      	ldr	r3, [r3, #0]
 8011d4c:	4618      	mov	r0, r3
 8011d4e:	f7ff ff67 	bl	8011c20 <ai_network_get_error>
 8011d52:	4603      	mov	r3, r0
 8011d54:	64bb      	str	r3, [r7, #72]	@ 0x48
  }
  return err;
 8011d56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8011d58:	4618      	mov	r0, r3
 8011d5a:	3750      	adds	r7, #80	@ 0x50
 8011d5c:	46bd      	mov	sp, r7
 8011d5e:	bd80      	pop	{r7, pc}

08011d60 <ai_network_inputs_get>:


AI_API_ENTRY
ai_buffer* ai_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8011d60:	b580      	push	{r7, lr}
 8011d62:	b082      	sub	sp, #8
 8011d64:	af00      	add	r7, sp, #0
 8011d66:	6078      	str	r0, [r7, #4]
 8011d68:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d104      	bne.n	8011d7a <ai_network_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8011d70:	4b06      	ldr	r3, [pc, #24]	@ (8011d8c <ai_network_inputs_get+0x2c>)
 8011d72:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	4a06      	ldr	r2, [pc, #24]	@ (8011d90 <ai_network_inputs_get+0x30>)
 8011d78:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 8011d7a:	6839      	ldr	r1, [r7, #0]
 8011d7c:	6878      	ldr	r0, [r7, #4]
 8011d7e:	f001 fab3 	bl	80132e8 <ai_platform_inputs_get>
 8011d82:	4603      	mov	r3, r0
}
 8011d84:	4618      	mov	r0, r3
 8011d86:	3708      	adds	r7, #8
 8011d88:	46bd      	mov	sp, r7
 8011d8a:	bd80      	pop	{r7, pc}
 8011d8c:	2000081c 	.word	0x2000081c
 8011d90:	a1c00100 	.word	0xa1c00100

08011d94 <ai_network_outputs_get>:


AI_API_ENTRY
ai_buffer* ai_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8011d94:	b580      	push	{r7, lr}
 8011d96:	b082      	sub	sp, #8
 8011d98:	af00      	add	r7, sp, #0
 8011d9a:	6078      	str	r0, [r7, #4]
 8011d9c:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	d104      	bne.n	8011dae <ai_network_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8011da4:	4b06      	ldr	r3, [pc, #24]	@ (8011dc0 <ai_network_outputs_get+0x2c>)
 8011da6:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	4a06      	ldr	r2, [pc, #24]	@ (8011dc4 <ai_network_outputs_get+0x30>)
 8011dac:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 8011dae:	6839      	ldr	r1, [r7, #0]
 8011db0:	6878      	ldr	r0, [r7, #4]
 8011db2:	f001 fb11 	bl	80133d8 <ai_platform_outputs_get>
 8011db6:	4603      	mov	r3, r0
}
 8011db8:	4618      	mov	r0, r3
 8011dba:	3708      	adds	r7, #8
 8011dbc:	46bd      	mov	sp, r7
 8011dbe:	bd80      	pop	{r7, pc}
 8011dc0:	2000081c 	.word	0x2000081c
 8011dc4:	a1c00100 	.word	0xa1c00100

08011dc8 <ai_network_init>:


AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8011dc8:	b580      	push	{r7, lr}
 8011dca:	b084      	sub	sp, #16
 8011dcc:	af00      	add	r7, sp, #0
 8011dce:	6078      	str	r0, [r7, #4]
 8011dd0:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_OBJ(ai_platform_network_init(network, params));
 8011dd2:	6839      	ldr	r1, [r7, #0]
 8011dd4:	6878      	ldr	r0, [r7, #4]
 8011dd6:	f001 fbb7 	bl	8013548 <ai_platform_network_init>
 8011dda:	60f8      	str	r0, [r7, #12]
  ai_bool ok = true;
 8011ddc:	2301      	movs	r3, #1
 8011dde:	72fb      	strb	r3, [r7, #11]

  if (!net_ctx) return false;
 8011de0:	68fb      	ldr	r3, [r7, #12]
 8011de2:	2b00      	cmp	r3, #0
 8011de4:	d101      	bne.n	8011dea <ai_network_init+0x22>
 8011de6:	2300      	movs	r3, #0
 8011de8:	e026      	b.n	8011e38 <ai_network_init+0x70>
  ok &= network_configure_weights(net_ctx, params);
 8011dea:	6839      	ldr	r1, [r7, #0]
 8011dec:	68f8      	ldr	r0, [r7, #12]
 8011dee:	f7ff fe81 	bl	8011af4 <network_configure_weights>
 8011df2:	4603      	mov	r3, r0
 8011df4:	461a      	mov	r2, r3
 8011df6:	7afb      	ldrb	r3, [r7, #11]
 8011df8:	4013      	ands	r3, r2
 8011dfa:	2b00      	cmp	r3, #0
 8011dfc:	bf14      	ite	ne
 8011dfe:	2301      	movne	r3, #1
 8011e00:	2300      	moveq	r3, #0
 8011e02:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, params);
 8011e04:	6839      	ldr	r1, [r7, #0]
 8011e06:	68f8      	ldr	r0, [r7, #12]
 8011e08:	f7ff fdf8 	bl	80119fc <network_configure_activations>
 8011e0c:	4603      	mov	r3, r0
 8011e0e:	461a      	mov	r2, r3
 8011e10:	7afb      	ldrb	r3, [r7, #11]
 8011e12:	4013      	ands	r3, r2
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	bf14      	ite	ne
 8011e18:	2301      	movne	r3, #1
 8011e1a:	2300      	moveq	r3, #0
 8011e1c:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8011e1e:	6878      	ldr	r0, [r7, #4]
 8011e20:	f001 fc52 	bl	80136c8 <ai_platform_network_post_init>
 8011e24:	4603      	mov	r3, r0
 8011e26:	461a      	mov	r2, r3
 8011e28:	7afb      	ldrb	r3, [r7, #11]
 8011e2a:	4013      	ands	r3, r2
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	bf14      	ite	ne
 8011e30:	2301      	movne	r3, #1
 8011e32:	2300      	moveq	r3, #0
 8011e34:	72fb      	strb	r3, [r7, #11]

  return ok;
 8011e36:	7afb      	ldrb	r3, [r7, #11]
}
 8011e38:	4618      	mov	r0, r3
 8011e3a:	3710      	adds	r7, #16
 8011e3c:	46bd      	mov	sp, r7
 8011e3e:	bd80      	pop	{r7, pc}

08011e40 <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8011e40:	b580      	push	{r7, lr}
 8011e42:	b084      	sub	sp, #16
 8011e44:	af00      	add	r7, sp, #0
 8011e46:	60f8      	str	r0, [r7, #12]
 8011e48:	60b9      	str	r1, [r7, #8]
 8011e4a:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8011e4c:	687a      	ldr	r2, [r7, #4]
 8011e4e:	68b9      	ldr	r1, [r7, #8]
 8011e50:	68f8      	ldr	r0, [r7, #12]
 8011e52:	f001 fc69 	bl	8013728 <ai_platform_network_process>
 8011e56:	4603      	mov	r3, r0
}
 8011e58:	4618      	mov	r0, r3
 8011e5a:	3710      	adds	r7, #16
 8011e5c:	46bd      	mov	sp, r7
 8011e5e:	bd80      	pop	{r7, pc}

08011e60 <ai_network_data_params_get>:
 * @ingroup network_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
 8011e60:	b580      	push	{r7, lr}
 8011e62:	b086      	sub	sp, #24
 8011e64:	af00      	add	r7, sp, #0
 8011e66:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	d101      	bne.n	8011e72 <ai_network_data_params_get+0x12>
 8011e6e:	2300      	movs	r3, #0
 8011e70:	e016      	b.n	8011ea0 <ai_network_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 8011e72:	4a0d      	ldr	r2, [pc, #52]	@ (8011ea8 <ai_network_data_params_get+0x48>)
 8011e74:	f107 0310 	add.w	r3, r7, #16
 8011e78:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011e7c:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8011e80:	4a0a      	ldr	r2, [pc, #40]	@ (8011eac <ai_network_data_params_get+0x4c>)
 8011e82:	f107 0308 	add.w	r3, r7, #8
 8011e86:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011e8a:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 8011e8e:	f107 0210 	add.w	r2, r7, #16
 8011e92:	f107 0308 	add.w	r3, r7, #8
 8011e96:	4619      	mov	r1, r3
 8011e98:	6878      	ldr	r0, [r7, #4]
 8011e9a:	f001 f9f9 	bl	8013290 <ai_platform_bind_network_params>
 8011e9e:	4603      	mov	r3, r0
}
 8011ea0:	4618      	mov	r0, r3
 8011ea2:	3718      	adds	r7, #24
 8011ea4:	46bd      	mov	sp, r7
 8011ea6:	bd80      	pop	{r7, pc}
 8011ea8:	0801ace4 	.word	0x0801ace4
 8011eac:	0801acec 	.word	0x0801acec

08011eb0 <arm_rfft_fast_init_f32>:
 8011eb0:	084b      	lsrs	r3, r1, #1
 8011eb2:	2b80      	cmp	r3, #128	@ 0x80
 8011eb4:	b430      	push	{r4, r5}
 8011eb6:	8201      	strh	r1, [r0, #16]
 8011eb8:	8003      	strh	r3, [r0, #0]
 8011eba:	d070      	beq.n	8011f9e <arm_rfft_fast_init_f32+0xee>
 8011ebc:	d916      	bls.n	8011eec <arm_rfft_fast_init_f32+0x3c>
 8011ebe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011ec2:	d05f      	beq.n	8011f84 <arm_rfft_fast_init_f32+0xd4>
 8011ec4:	d936      	bls.n	8011f34 <arm_rfft_fast_init_f32+0x84>
 8011ec6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8011eca:	d026      	beq.n	8011f1a <arm_rfft_fast_init_f32+0x6a>
 8011ecc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8011ed0:	d112      	bne.n	8011ef8 <arm_rfft_fast_init_f32+0x48>
 8011ed2:	f44f 656e 	mov.w	r5, #3808	@ 0xee0
 8011ed6:	4c38      	ldr	r4, [pc, #224]	@ (8011fb8 <arm_rfft_fast_init_f32+0x108>)
 8011ed8:	4938      	ldr	r1, [pc, #224]	@ (8011fbc <arm_rfft_fast_init_f32+0x10c>)
 8011eda:	2300      	movs	r3, #0
 8011edc:	4a38      	ldr	r2, [pc, #224]	@ (8011fc0 <arm_rfft_fast_init_f32+0x110>)
 8011ede:	8185      	strh	r5, [r0, #12]
 8011ee0:	6084      	str	r4, [r0, #8]
 8011ee2:	6041      	str	r1, [r0, #4]
 8011ee4:	6142      	str	r2, [r0, #20]
 8011ee6:	4618      	mov	r0, r3
 8011ee8:	bc30      	pop	{r4, r5}
 8011eea:	4770      	bx	lr
 8011eec:	2b20      	cmp	r3, #32
 8011eee:	d031      	beq.n	8011f54 <arm_rfft_fast_init_f32+0xa4>
 8011ef0:	2b40      	cmp	r3, #64	@ 0x40
 8011ef2:	d006      	beq.n	8011f02 <arm_rfft_fast_init_f32+0x52>
 8011ef4:	2b10      	cmp	r3, #16
 8011ef6:	d039      	beq.n	8011f6c <arm_rfft_fast_init_f32+0xbc>
 8011ef8:	f04f 33ff 	mov.w	r3, #4294967295
 8011efc:	bc30      	pop	{r4, r5}
 8011efe:	4618      	mov	r0, r3
 8011f00:	4770      	bx	lr
 8011f02:	2538      	movs	r5, #56	@ 0x38
 8011f04:	4c2f      	ldr	r4, [pc, #188]	@ (8011fc4 <arm_rfft_fast_init_f32+0x114>)
 8011f06:	4930      	ldr	r1, [pc, #192]	@ (8011fc8 <arm_rfft_fast_init_f32+0x118>)
 8011f08:	2300      	movs	r3, #0
 8011f0a:	4a30      	ldr	r2, [pc, #192]	@ (8011fcc <arm_rfft_fast_init_f32+0x11c>)
 8011f0c:	8185      	strh	r5, [r0, #12]
 8011f0e:	6084      	str	r4, [r0, #8]
 8011f10:	6041      	str	r1, [r0, #4]
 8011f12:	6142      	str	r2, [r0, #20]
 8011f14:	4618      	mov	r0, r3
 8011f16:	bc30      	pop	{r4, r5}
 8011f18:	4770      	bx	lr
 8011f1a:	f44f 65e1 	mov.w	r5, #1800	@ 0x708
 8011f1e:	4c2c      	ldr	r4, [pc, #176]	@ (8011fd0 <arm_rfft_fast_init_f32+0x120>)
 8011f20:	492c      	ldr	r1, [pc, #176]	@ (8011fd4 <arm_rfft_fast_init_f32+0x124>)
 8011f22:	2300      	movs	r3, #0
 8011f24:	4a2c      	ldr	r2, [pc, #176]	@ (8011fd8 <arm_rfft_fast_init_f32+0x128>)
 8011f26:	8185      	strh	r5, [r0, #12]
 8011f28:	6084      	str	r4, [r0, #8]
 8011f2a:	6041      	str	r1, [r0, #4]
 8011f2c:	6142      	str	r2, [r0, #20]
 8011f2e:	4618      	mov	r0, r3
 8011f30:	bc30      	pop	{r4, r5}
 8011f32:	4770      	bx	lr
 8011f34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011f38:	d1de      	bne.n	8011ef8 <arm_rfft_fast_init_f32+0x48>
 8011f3a:	f44f 75dc 	mov.w	r5, #440	@ 0x1b8
 8011f3e:	4c27      	ldr	r4, [pc, #156]	@ (8011fdc <arm_rfft_fast_init_f32+0x12c>)
 8011f40:	4927      	ldr	r1, [pc, #156]	@ (8011fe0 <arm_rfft_fast_init_f32+0x130>)
 8011f42:	2300      	movs	r3, #0
 8011f44:	4a27      	ldr	r2, [pc, #156]	@ (8011fe4 <arm_rfft_fast_init_f32+0x134>)
 8011f46:	8185      	strh	r5, [r0, #12]
 8011f48:	6084      	str	r4, [r0, #8]
 8011f4a:	6041      	str	r1, [r0, #4]
 8011f4c:	6142      	str	r2, [r0, #20]
 8011f4e:	4618      	mov	r0, r3
 8011f50:	bc30      	pop	{r4, r5}
 8011f52:	4770      	bx	lr
 8011f54:	2530      	movs	r5, #48	@ 0x30
 8011f56:	4c24      	ldr	r4, [pc, #144]	@ (8011fe8 <arm_rfft_fast_init_f32+0x138>)
 8011f58:	4924      	ldr	r1, [pc, #144]	@ (8011fec <arm_rfft_fast_init_f32+0x13c>)
 8011f5a:	2300      	movs	r3, #0
 8011f5c:	4a24      	ldr	r2, [pc, #144]	@ (8011ff0 <arm_rfft_fast_init_f32+0x140>)
 8011f5e:	8185      	strh	r5, [r0, #12]
 8011f60:	6084      	str	r4, [r0, #8]
 8011f62:	6041      	str	r1, [r0, #4]
 8011f64:	6142      	str	r2, [r0, #20]
 8011f66:	4618      	mov	r0, r3
 8011f68:	bc30      	pop	{r4, r5}
 8011f6a:	4770      	bx	lr
 8011f6c:	2514      	movs	r5, #20
 8011f6e:	4c21      	ldr	r4, [pc, #132]	@ (8011ff4 <arm_rfft_fast_init_f32+0x144>)
 8011f70:	4921      	ldr	r1, [pc, #132]	@ (8011ff8 <arm_rfft_fast_init_f32+0x148>)
 8011f72:	2300      	movs	r3, #0
 8011f74:	4a21      	ldr	r2, [pc, #132]	@ (8011ffc <arm_rfft_fast_init_f32+0x14c>)
 8011f76:	8185      	strh	r5, [r0, #12]
 8011f78:	6084      	str	r4, [r0, #8]
 8011f7a:	6041      	str	r1, [r0, #4]
 8011f7c:	6142      	str	r2, [r0, #20]
 8011f7e:	4618      	mov	r0, r3
 8011f80:	bc30      	pop	{r4, r5}
 8011f82:	4770      	bx	lr
 8011f84:	f44f 75e0 	mov.w	r5, #448	@ 0x1c0
 8011f88:	4c1d      	ldr	r4, [pc, #116]	@ (8012000 <arm_rfft_fast_init_f32+0x150>)
 8011f8a:	491e      	ldr	r1, [pc, #120]	@ (8012004 <arm_rfft_fast_init_f32+0x154>)
 8011f8c:	2300      	movs	r3, #0
 8011f8e:	4a1e      	ldr	r2, [pc, #120]	@ (8012008 <arm_rfft_fast_init_f32+0x158>)
 8011f90:	8185      	strh	r5, [r0, #12]
 8011f92:	6084      	str	r4, [r0, #8]
 8011f94:	6041      	str	r1, [r0, #4]
 8011f96:	6142      	str	r2, [r0, #20]
 8011f98:	4618      	mov	r0, r3
 8011f9a:	bc30      	pop	{r4, r5}
 8011f9c:	4770      	bx	lr
 8011f9e:	25d0      	movs	r5, #208	@ 0xd0
 8011fa0:	4c1a      	ldr	r4, [pc, #104]	@ (801200c <arm_rfft_fast_init_f32+0x15c>)
 8011fa2:	491b      	ldr	r1, [pc, #108]	@ (8012010 <arm_rfft_fast_init_f32+0x160>)
 8011fa4:	2300      	movs	r3, #0
 8011fa6:	4a1b      	ldr	r2, [pc, #108]	@ (8012014 <arm_rfft_fast_init_f32+0x164>)
 8011fa8:	8185      	strh	r5, [r0, #12]
 8011faa:	6084      	str	r4, [r0, #8]
 8011fac:	6041      	str	r1, [r0, #4]
 8011fae:	6142      	str	r2, [r0, #20]
 8011fb0:	4618      	mov	r0, r3
 8011fb2:	bc30      	pop	{r4, r5}
 8011fb4:	4770      	bx	lr
 8011fb6:	bf00      	nop
 8011fb8:	080d35c0 	.word	0x080d35c0
 8011fbc:	080c47b8 	.word	0x080c47b8
 8011fc0:	080ca928 	.word	0x080ca928
 8011fc4:	080c88b8 	.word	0x080c88b8
 8011fc8:	080d5380 	.word	0x080d5380
 8011fcc:	080d7870 	.word	0x080d7870
 8011fd0:	080d12a8 	.word	0x080d12a8
 8011fd4:	080cf1a8 	.word	0x080cf1a8
 8011fd8:	080c8928 	.word	0x080c8928
 8011fdc:	080d7500 	.word	0x080d7500
 8011fe0:	080ce928 	.word	0x080ce928
 8011fe4:	080d5580 	.word	0x080d5580
 8011fe8:	080d2160 	.word	0x080d2160
 8011fec:	080d11a8 	.word	0x080d11a8
 8011ff0:	080c87b8 	.word	0x080c87b8
 8011ff4:	080d20b8 	.word	0x080d20b8
 8011ff8:	080cf128 	.word	0x080cf128
 8011ffc:	080d20e0 	.word	0x080d20e0
 8012000:	080d5d80 	.word	0x080d5d80
 8012004:	080d25c0 	.word	0x080d25c0
 8012008:	080d6100 	.word	0x080d6100
 801200c:	080d7a70 	.word	0x080d7a70
 8012010:	080d21c0 	.word	0x080d21c0
 8012014:	080d7100 	.word	0x080d7100

08012018 <arm_rfft_fast_f32>:
 8012018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801201c:	8a05      	ldrh	r5, [r0, #16]
 801201e:	4606      	mov	r6, r0
 8012020:	4617      	mov	r7, r2
 8012022:	460c      	mov	r4, r1
 8012024:	086d      	lsrs	r5, r5, #1
 8012026:	8005      	strh	r5, [r0, #0]
 8012028:	2b00      	cmp	r3, #0
 801202a:	d15e      	bne.n	80120ea <arm_rfft_fast_f32+0xd2>
 801202c:	461a      	mov	r2, r3
 801202e:	2301      	movs	r3, #1
 8012030:	f000 fbde 	bl	80127f0 <arm_cfft_f32>
 8012034:	edd4 7a00 	vldr	s15, [r4]
 8012038:	ed94 7a01 	vldr	s14, [r4, #4]
 801203c:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8012040:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8012044:	8832      	ldrh	r2, [r6, #0]
 8012046:	ee37 7a07 	vadd.f32	s14, s14, s14
 801204a:	6975      	ldr	r5, [r6, #20]
 801204c:	3a01      	subs	r2, #1
 801204e:	eeb0 3a46 	vmov.f32	s6, s12
 8012052:	3510      	adds	r5, #16
 8012054:	f107 0610 	add.w	r6, r7, #16
 8012058:	ee77 6a87 	vadd.f32	s13, s15, s14
 801205c:	eb04 00c2 	add.w	r0, r4, r2, lsl #3
 8012060:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012064:	f104 0310 	add.w	r3, r4, #16
 8012068:	3808      	subs	r0, #8
 801206a:	ee26 7a86 	vmul.f32	s14, s13, s12
 801206e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8012072:	ed87 7a00 	vstr	s14, [r7]
 8012076:	edc7 7a01 	vstr	s15, [r7, #4]
 801207a:	ed90 7a02 	vldr	s14, [r0, #8]
 801207e:	3a01      	subs	r2, #1
 8012080:	ed53 6a02 	vldr	s13, [r3, #-8]
 8012084:	f1a0 0008 	sub.w	r0, r0, #8
 8012088:	ed15 6a02 	vldr	s12, [r5, #-8]
 801208c:	f103 0308 	add.w	r3, r3, #8
 8012090:	ee77 7a66 	vsub.f32	s15, s14, s13
 8012094:	edd0 3a05 	vldr	s7, [r0, #20]
 8012098:	ed13 5a03 	vldr	s10, [r3, #-12]
 801209c:	ee77 4a26 	vadd.f32	s9, s14, s13
 80120a0:	ed55 5a01 	vldr	s11, [r5, #-4]
 80120a4:	f106 0608 	add.w	r6, r6, #8
 80120a8:	ee66 6a27 	vmul.f32	s13, s12, s15
 80120ac:	f105 0508 	add.w	r5, r5, #8
 80120b0:	ee33 4a85 	vadd.f32	s8, s7, s10
 80120b4:	ee25 7aa7 	vmul.f32	s14, s11, s15
 80120b8:	ee35 5a63 	vsub.f32	s10, s10, s7
 80120bc:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80120c0:	ee26 6a04 	vmul.f32	s12, s12, s8
 80120c4:	ee77 7a05 	vadd.f32	s15, s14, s10
 80120c8:	ee65 5a84 	vmul.f32	s11, s11, s8
 80120cc:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80120d0:	ee36 7aa5 	vadd.f32	s14, s13, s11
 80120d4:	ee67 7a83 	vmul.f32	s15, s15, s6
 80120d8:	ee27 7a03 	vmul.f32	s14, s14, s6
 80120dc:	ed46 7a03 	vstr	s15, [r6, #-12]
 80120e0:	ed06 7a04 	vstr	s14, [r6, #-16]
 80120e4:	d1c9      	bne.n	801207a <arm_rfft_fast_f32+0x62>
 80120e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80120ea:	edd1 7a00 	vldr	s15, [r1]
 80120ee:	eef6 3a00 	vmov.f32	s7, #96	@ 0x3f000000  0.5
 80120f2:	edd1 6a01 	vldr	s13, [r1, #4]
 80120f6:	1e68      	subs	r0, r5, #1
 80120f8:	6975      	ldr	r5, [r6, #20]
 80120fa:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80120fe:	00c1      	lsls	r1, r0, #3
 8012100:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8012104:	ee27 7a23 	vmul.f32	s14, s14, s7
 8012108:	ee67 7aa3 	vmul.f32	s15, s15, s7
 801210c:	ed82 7a00 	vstr	s14, [r2]
 8012110:	edc2 7a01 	vstr	s15, [r2, #4]
 8012114:	b3e0      	cbz	r0, 8012190 <arm_rfft_fast_f32+0x178>
 8012116:	3908      	subs	r1, #8
 8012118:	f104 0210 	add.w	r2, r4, #16
 801211c:	3510      	adds	r5, #16
 801211e:	440c      	add	r4, r1
 8012120:	f107 0110 	add.w	r1, r7, #16
 8012124:	ed94 7a02 	vldr	s14, [r4, #8]
 8012128:	3801      	subs	r0, #1
 801212a:	ed52 6a02 	vldr	s13, [r2, #-8]
 801212e:	f1a4 0408 	sub.w	r4, r4, #8
 8012132:	ed15 6a02 	vldr	s12, [r5, #-8]
 8012136:	f102 0208 	add.w	r2, r2, #8
 801213a:	ee76 7ac7 	vsub.f32	s15, s13, s14
 801213e:	ed94 4a05 	vldr	s8, [r4, #20]
 8012142:	ed12 5a03 	vldr	s10, [r2, #-12]
 8012146:	ee77 6a26 	vadd.f32	s13, s14, s13
 801214a:	ed55 5a01 	vldr	s11, [r5, #-4]
 801214e:	f101 0108 	add.w	r1, r1, #8
 8012152:	ee26 3a27 	vmul.f32	s6, s12, s15
 8012156:	f105 0508 	add.w	r5, r5, #8
 801215a:	ee74 4a05 	vadd.f32	s9, s8, s10
 801215e:	ee25 7aa7 	vmul.f32	s14, s11, s15
 8012162:	ee35 5a44 	vsub.f32	s10, s10, s8
 8012166:	ee76 6ac3 	vsub.f32	s13, s13, s6
 801216a:	ee26 6a24 	vmul.f32	s12, s12, s9
 801216e:	ee77 7a05 	vadd.f32	s15, s14, s10
 8012172:	ee65 5aa4 	vmul.f32	s11, s11, s9
 8012176:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801217a:	ee36 7ae5 	vsub.f32	s14, s13, s11
 801217e:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8012182:	ee27 7a23 	vmul.f32	s14, s14, s7
 8012186:	ed41 7a03 	vstr	s15, [r1, #-12]
 801218a:	ed01 7a04 	vstr	s14, [r1, #-16]
 801218e:	d1c9      	bne.n	8012124 <arm_rfft_fast_f32+0x10c>
 8012190:	461a      	mov	r2, r3
 8012192:	4639      	mov	r1, r7
 8012194:	4630      	mov	r0, r6
 8012196:	2301      	movs	r3, #1
 8012198:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801219c:	f000 bb28 	b.w	80127f0 <arm_cfft_f32>

080121a0 <arm_cfft_radix8by2_f32>:
 80121a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80121a4:	4607      	mov	r7, r0
 80121a6:	4608      	mov	r0, r1
 80121a8:	ed2d 8b06 	vpush	{d8-d10}
 80121ac:	f8b7 e000 	ldrh.w	lr, [r7]
 80121b0:	687a      	ldr	r2, [r7, #4]
 80121b2:	ea4f 015e 	mov.w	r1, lr, lsr #1
 80121b6:	eb00 088e 	add.w	r8, r0, lr, lsl #2
 80121ba:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 80121be:	f000 80b0 	beq.w	8012322 <arm_cfft_radix8by2_f32+0x182>
 80121c2:	008b      	lsls	r3, r1, #2
 80121c4:	3210      	adds	r2, #16
 80121c6:	f100 0610 	add.w	r6, r0, #16
 80121ca:	f108 0510 	add.w	r5, r8, #16
 80121ce:	3310      	adds	r3, #16
 80121d0:	18c4      	adds	r4, r0, r3
 80121d2:	4443      	add	r3, r8
 80121d4:	ed55 6a04 	vldr	s13, [r5, #-16]
 80121d8:	f1be 0e01 	subs.w	lr, lr, #1
 80121dc:	ed56 4a04 	vldr	s9, [r6, #-16]
 80121e0:	f104 0410 	add.w	r4, r4, #16
 80121e4:	ed15 7a03 	vldr	s14, [r5, #-12]
 80121e8:	f106 0610 	add.w	r6, r6, #16
 80121ec:	ee74 9aa6 	vadd.f32	s19, s9, s13
 80121f0:	ed55 7a02 	vldr	s15, [r5, #-8]
 80121f4:	ed55 2a01 	vldr	s5, [r5, #-4]
 80121f8:	ee74 4ae6 	vsub.f32	s9, s9, s13
 80121fc:	ed53 0a04 	vldr	s1, [r3, #-16]
 8012200:	f102 0210 	add.w	r2, r2, #16
 8012204:	ed13 5a03 	vldr	s10, [r3, #-12]
 8012208:	f105 0510 	add.w	r5, r5, #16
 801220c:	ed13 3a02 	vldr	s6, [r3, #-8]
 8012210:	f103 0310 	add.w	r3, r3, #16
 8012214:	ed54 3a06 	vldr	s7, [r4, #-24]	@ 0xffffffe8
 8012218:	ed14 4a05 	vldr	s8, [r4, #-20]	@ 0xffffffec
 801221c:	ed13 6a05 	vldr	s12, [r3, #-20]	@ 0xffffffec
 8012220:	ee33 8a83 	vadd.f32	s16, s7, s6
 8012224:	ed56 6a07 	vldr	s13, [r6, #-28]	@ 0xffffffe4
 8012228:	ed16 2a05 	vldr	s4, [r6, #-20]	@ 0xffffffec
 801222c:	ee34 0a06 	vadd.f32	s0, s8, s12
 8012230:	ed54 5a08 	vldr	s11, [r4, #-32]	@ 0xffffffe0
 8012234:	ee76 aa87 	vadd.f32	s21, s13, s14
 8012238:	ed14 1a07 	vldr	s2, [r4, #-28]	@ 0xffffffe4
 801223c:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8012240:	ed56 1a06 	vldr	s3, [r6, #-24]	@ 0xffffffe8
 8012244:	ee35 9aa0 	vadd.f32	s18, s11, s1
 8012248:	ed46 9a08 	vstr	s19, [r6, #-32]	@ 0xffffffe0
 801224c:	ee71 8a05 	vadd.f32	s17, s2, s10
 8012250:	ee31 aaa7 	vadd.f32	s20, s3, s15
 8012254:	ed46 aa07 	vstr	s21, [r6, #-28]	@ 0xffffffe4
 8012258:	ee72 9a22 	vadd.f32	s19, s4, s5
 801225c:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8012260:	ee35 5a41 	vsub.f32	s10, s10, s2
 8012264:	ed06 aa06 	vstr	s20, [r6, #-24]	@ 0xffffffe8
 8012268:	ed46 9a05 	vstr	s19, [r6, #-20]	@ 0xffffffec
 801226c:	ee36 6a44 	vsub.f32	s12, s12, s8
 8012270:	ed04 9a08 	vstr	s18, [r4, #-32]	@ 0xffffffe0
 8012274:	ee71 1ae7 	vsub.f32	s3, s3, s15
 8012278:	ed44 8a07 	vstr	s17, [r4, #-28]	@ 0xffffffe4
 801227c:	ee72 7a62 	vsub.f32	s15, s4, s5
 8012280:	ed04 8a06 	vstr	s16, [r4, #-24]	@ 0xffffffe8
 8012284:	ee73 2a63 	vsub.f32	s5, s6, s7
 8012288:	ed04 0a05 	vstr	s0, [r4, #-20]	@ 0xffffffec
 801228c:	ed12 4a08 	vldr	s8, [r2, #-32]	@ 0xffffffe0
 8012290:	ed52 6a07 	vldr	s13, [r2, #-28]	@ 0xffffffe4
 8012294:	ee24 3a84 	vmul.f32	s6, s9, s8
 8012298:	ee27 2a26 	vmul.f32	s4, s14, s13
 801229c:	ee64 4aa6 	vmul.f32	s9, s9, s13
 80122a0:	ee65 3aa6 	vmul.f32	s7, s11, s13
 80122a4:	ee27 7a04 	vmul.f32	s14, s14, s8
 80122a8:	ee65 5a84 	vmul.f32	s11, s11, s8
 80122ac:	ee65 6a26 	vmul.f32	s13, s10, s13
 80122b0:	ee25 5a04 	vmul.f32	s10, s10, s8
 80122b4:	ee37 7a64 	vsub.f32	s14, s14, s9
 80122b8:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80122bc:	ee33 4a02 	vadd.f32	s8, s6, s4
 80122c0:	ee33 5ac5 	vsub.f32	s10, s7, s10
 80122c4:	ed05 7a07 	vstr	s14, [r5, #-28]	@ 0xffffffe4
 80122c8:	ed05 4a08 	vstr	s8, [r5, #-32]	@ 0xffffffe0
 80122cc:	ed03 5a08 	vstr	s10, [r3, #-32]	@ 0xffffffe0
 80122d0:	ed43 6a07 	vstr	s13, [r3, #-28]	@ 0xffffffe4
 80122d4:	ed52 6a06 	vldr	s13, [r2, #-24]	@ 0xffffffe8
 80122d8:	ed12 7a05 	vldr	s14, [r2, #-20]	@ 0xffffffec
 80122dc:	ee61 4aa6 	vmul.f32	s9, s3, s13
 80122e0:	ee27 4a87 	vmul.f32	s8, s15, s14
 80122e4:	ee61 5a87 	vmul.f32	s11, s3, s14
 80122e8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80122ec:	ee22 5a87 	vmul.f32	s10, s5, s14
 80122f0:	ee26 7a07 	vmul.f32	s14, s12, s14
 80122f4:	ee26 6a26 	vmul.f32	s12, s12, s13
 80122f8:	ee62 6aa6 	vmul.f32	s13, s5, s13
 80122fc:	ee74 4a84 	vadd.f32	s9, s9, s8
 8012300:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8012304:	ee35 6a46 	vsub.f32	s12, s10, s12
 8012308:	ee37 7a26 	vadd.f32	s14, s14, s13
 801230c:	ed45 4a06 	vstr	s9, [r5, #-24]	@ 0xffffffe8
 8012310:	ed45 7a05 	vstr	s15, [r5, #-20]	@ 0xffffffec
 8012314:	ed03 6a06 	vstr	s12, [r3, #-24]	@ 0xffffffe8
 8012318:	ed03 7a05 	vstr	s14, [r3, #-20]	@ 0xffffffec
 801231c:	f47f af5a 	bne.w	80121d4 <arm_cfft_radix8by2_f32+0x34>
 8012320:	687a      	ldr	r2, [r7, #4]
 8012322:	b28c      	uxth	r4, r1
 8012324:	2302      	movs	r3, #2
 8012326:	4621      	mov	r1, r4
 8012328:	f000 fbc2 	bl	8012ab0 <arm_radix8_butterfly_f32>
 801232c:	4621      	mov	r1, r4
 801232e:	687a      	ldr	r2, [r7, #4]
 8012330:	4640      	mov	r0, r8
 8012332:	2302      	movs	r3, #2
 8012334:	ecbd 8b06 	vpop	{d8-d10}
 8012338:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801233c:	f000 bbb8 	b.w	8012ab0 <arm_radix8_butterfly_f32>

08012340 <arm_cfft_radix8by4_f32>:
 8012340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012344:	ed2d 8b06 	vpush	{d8-d10}
 8012348:	8804      	ldrh	r4, [r0, #0]
 801234a:	b08f      	sub	sp, #60	@ 0x3c
 801234c:	ed91 6a00 	vldr	s12, [r1]
 8012350:	460a      	mov	r2, r1
 8012352:	0864      	lsrs	r4, r4, #1
 8012354:	ed91 7a01 	vldr	s14, [r1, #4]
 8012358:	9101      	str	r1, [sp, #4]
 801235a:	00a3      	lsls	r3, r4, #2
 801235c:	6841      	ldr	r1, [r0, #4]
 801235e:	0864      	lsrs	r4, r4, #1
 8012360:	900c      	str	r0, [sp, #48]	@ 0x30
 8012362:	9205      	str	r2, [sp, #20]
 8012364:	f101 0610 	add.w	r6, r1, #16
 8012368:	4625      	mov	r5, r4
 801236a:	940b      	str	r4, [sp, #44]	@ 0x2c
 801236c:	f101 0408 	add.w	r4, r1, #8
 8012370:	9602      	str	r6, [sp, #8]
 8012372:	9407      	str	r4, [sp, #28]
 8012374:	18d4      	adds	r4, r2, r3
 8012376:	1eaa      	subs	r2, r5, #2
 8012378:	f101 0518 	add.w	r5, r1, #24
 801237c:	18e0      	adds	r0, r4, r3
 801237e:	edd4 4a00 	vldr	s9, [r4]
 8012382:	ed94 4a01 	vldr	s8, [r4, #4]
 8012386:	46a6      	mov	lr, r4
 8012388:	edd0 6a00 	vldr	s13, [r0]
 801238c:	18c7      	adds	r7, r0, r3
 801238e:	edd0 7a01 	vldr	s15, [r0, #4]
 8012392:	46a0      	mov	r8, r4
 8012394:	ee76 5a26 	vadd.f32	s11, s12, s13
 8012398:	ed97 5a00 	vldr	s10, [r7]
 801239c:	ee76 6a66 	vsub.f32	s13, s12, s13
 80123a0:	4604      	mov	r4, r0
 80123a2:	9506      	str	r5, [sp, #24]
 80123a4:	4605      	mov	r5, r0
 80123a6:	ee75 2aa4 	vadd.f32	s5, s11, s9
 80123aa:	900a      	str	r0, [sp, #40]	@ 0x28
 80123ac:	9801      	ldr	r0, [sp, #4]
 80123ae:	ee37 6a27 	vadd.f32	s12, s14, s15
 80123b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80123b6:	ed97 3a01 	vldr	s6, [r7, #4]
 80123ba:	ee72 2a85 	vadd.f32	s5, s5, s10
 80123be:	46bc      	mov	ip, r7
 80123c0:	ee76 3a84 	vadd.f32	s7, s13, s8
 80123c4:	9704      	str	r7, [sp, #16]
 80123c6:	ee36 7a44 	vsub.f32	s14, s12, s8
 80123ca:	f8cd e00c 	str.w	lr, [sp, #12]
 80123ce:	ee12 9a90 	vmov	r9, s5
 80123d2:	ee75 5ae4 	vsub.f32	s11, s11, s9
 80123d6:	ee76 6ac4 	vsub.f32	s13, s13, s8
 80123da:	1f3e      	subs	r6, r7, #4
 80123dc:	f840 9b08 	str.w	r9, [r0], #8
 80123e0:	ee37 4ae4 	vsub.f32	s8, s15, s9
 80123e4:	edde 2a01 	vldr	s5, [lr, #4]
 80123e8:	ee77 7aa4 	vadd.f32	s15, s15, s9
 80123ec:	ee73 3ac3 	vsub.f32	s7, s7, s6
 80123f0:	eddc 4a01 	vldr	s9, [ip, #4]
 80123f4:	ee36 6a22 	vadd.f32	s12, s12, s5
 80123f8:	9001      	str	r0, [sp, #4]
 80123fa:	ee75 5ac5 	vsub.f32	s11, s11, s10
 80123fe:	9805      	ldr	r0, [sp, #20]
 8012400:	ee13 9a90 	vmov	r9, s7
 8012404:	ee37 7a43 	vsub.f32	s14, s14, s6
 8012408:	ee36 6a24 	vadd.f32	s12, s12, s9
 801240c:	f1ae 0704 	sub.w	r7, lr, #4
 8012410:	ee74 4a05 	vadd.f32	s9, s8, s10
 8012414:	ee76 6a83 	vadd.f32	s13, s13, s6
 8012418:	ed80 6a01 	vstr	s12, [r0, #4]
 801241c:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8012420:	f848 9b08 	str.w	r9, [r8], #8
 8012424:	edce 4a01 	vstr	s9, [lr, #4]
 8012428:	ee15 ea90 	vmov	lr, s11
 801242c:	f844 eb08 	str.w	lr, [r4], #8
 8012430:	ee16 ea90 	vmov	lr, s13
 8012434:	9408      	str	r4, [sp, #32]
 8012436:	462c      	mov	r4, r5
 8012438:	ed85 7a01 	vstr	s14, [r5, #4]
 801243c:	9d04      	ldr	r5, [sp, #16]
 801243e:	f84c eb08 	str.w	lr, [ip], #8
 8012442:	edc5 7a01 	vstr	s15, [r5, #4]
 8012446:	0855      	lsrs	r5, r2, #1
 8012448:	9509      	str	r5, [sp, #36]	@ 0x24
 801244a:	f000 8130 	beq.w	80126ae <arm_cfft_radix8by4_f32+0x36e>
 801244e:	9805      	ldr	r0, [sp, #20]
 8012450:	3b08      	subs	r3, #8
 8012452:	46ab      	mov	fp, r5
 8012454:	f1a4 020c 	sub.w	r2, r4, #12
 8012458:	f100 0510 	add.w	r5, r0, #16
 801245c:	f101 0920 	add.w	r9, r1, #32
 8012460:	f101 0e30 	add.w	lr, r1, #48	@ 0x30
 8012464:	f8dd a008 	ldr.w	sl, [sp, #8]
 8012468:	4433      	add	r3, r6
 801246a:	3410      	adds	r4, #16
 801246c:	4660      	mov	r0, ip
 801246e:	4641      	mov	r1, r8
 8012470:	f8cd c034 	str.w	ip, [sp, #52]	@ 0x34
 8012474:	ed54 6a02 	vldr	s13, [r4, #-8]
 8012478:	f1bb 0b01 	subs.w	fp, fp, #1
 801247c:	ed55 5a02 	vldr	s11, [r5, #-8]
 8012480:	f10a 0a08 	add.w	sl, sl, #8
 8012484:	edd1 7a00 	vldr	s15, [r1]
 8012488:	f105 0508 	add.w	r5, r5, #8
 801248c:	ee75 3aa6 	vadd.f32	s7, s11, s13
 8012490:	edd0 2a00 	vldr	s5, [r0]
 8012494:	ed14 7a01 	vldr	s14, [r4, #-4]
 8012498:	ee75 5ae6 	vsub.f32	s11, s11, s13
 801249c:	ed55 6a03 	vldr	s13, [r5, #-12]
 80124a0:	f1a2 0208 	sub.w	r2, r2, #8
 80124a4:	ee73 4aa7 	vadd.f32	s9, s7, s15
 80124a8:	ed90 2a01 	vldr	s4, [r0, #4]
 80124ac:	ee36 5a87 	vadd.f32	s10, s13, s14
 80124b0:	ed91 6a01 	vldr	s12, [r1, #4]
 80124b4:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80124b8:	f109 0910 	add.w	r9, r9, #16
 80124bc:	ee74 6aa2 	vadd.f32	s13, s9, s5
 80124c0:	f104 0408 	add.w	r4, r4, #8
 80124c4:	ee73 3ae7 	vsub.f32	s7, s7, s15
 80124c8:	f10e 0e18 	add.w	lr, lr, #24
 80124cc:	ee37 3a67 	vsub.f32	s6, s14, s15
 80124d0:	f1a3 0308 	sub.w	r3, r3, #8
 80124d4:	ed45 6a04 	vstr	s13, [r5, #-16]
 80124d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80124dc:	edd1 6a01 	vldr	s13, [r1, #4]
 80124e0:	ee75 1a86 	vadd.f32	s3, s11, s12
 80124e4:	edd0 4a01 	vldr	s9, [r0, #4]
 80124e8:	ee33 3a22 	vadd.f32	s6, s6, s5
 80124ec:	ee75 6a26 	vadd.f32	s13, s10, s13
 80124f0:	ee35 5a46 	vsub.f32	s10, s10, s12
 80124f4:	ee35 6ac6 	vsub.f32	s12, s11, s12
 80124f8:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80124fc:	ee71 1ac2 	vsub.f32	s3, s3, s4
 8012500:	ee35 5a42 	vsub.f32	s10, s10, s4
 8012504:	ed45 6a03 	vstr	s13, [r5, #-12]
 8012508:	ee36 2a02 	vadd.f32	s4, s12, s4
 801250c:	edd6 7a00 	vldr	s15, [r6]
 8012510:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8012514:	ed97 1a00 	vldr	s2, [r7]
 8012518:	ee77 2a62 	vsub.f32	s5, s14, s5
 801251c:	ed92 8a04 	vldr	s16, [r2, #16]
 8012520:	ee71 8a27 	vadd.f32	s17, s2, s15
 8012524:	ed93 aa04 	vldr	s20, [r3, #16]
 8012528:	ed16 7a01 	vldr	s14, [r6, #-4]
 801252c:	ee71 7a67 	vsub.f32	s15, s2, s15
 8012530:	ed57 0a01 	vldr	s1, [r7, #-4]
 8012534:	ee38 1a4a 	vsub.f32	s2, s16, s20
 8012538:	ee38 6a88 	vadd.f32	s12, s17, s16
 801253c:	edd3 9a03 	vldr	s19, [r3, #12]
 8012540:	ee30 0a87 	vadd.f32	s0, s1, s14
 8012544:	ed92 9a03 	vldr	s18, [r2, #12]
 8012548:	ee78 5ac8 	vsub.f32	s11, s17, s16
 801254c:	ee36 6a0a 	vadd.f32	s12, s12, s20
 8012550:	ee30 7ac7 	vsub.f32	s14, s1, s14
 8012554:	ee37 4ac9 	vsub.f32	s8, s15, s18
 8012558:	ee16 ca10 	vmov	ip, s12
 801255c:	ee30 6a49 	vsub.f32	s12, s0, s18
 8012560:	ee77 4a01 	vadd.f32	s9, s14, s2
 8012564:	f847 c908 	str.w	ip, [r7], #-8
 8012568:	ee34 4a29 	vadd.f32	s8, s8, s19
 801256c:	edd2 8a03 	vldr	s17, [r2, #12]
 8012570:	ee39 9ac9 	vsub.f32	s18, s19, s18
 8012574:	ed93 8a03 	vldr	s16, [r3, #12]
 8012578:	ee71 0a47 	vsub.f32	s1, s2, s14
 801257c:	ee30 0a28 	vadd.f32	s0, s0, s17
 8012580:	ee39 1a67 	vsub.f32	s2, s18, s15
 8012584:	ee36 6a69 	vsub.f32	s12, s12, s19
 8012588:	ee30 0a08 	vadd.f32	s0, s0, s16
 801258c:	ee75 5aca 	vsub.f32	s11, s11, s20
 8012590:	ed87 0a01 	vstr	s0, [r7, #4]
 8012594:	ed1a 0a04 	vldr	s0, [sl, #-16]
 8012598:	ed5a 6a03 	vldr	s13, [sl, #-12]
 801259c:	ee21 8a80 	vmul.f32	s16, s3, s0
 80125a0:	ee23 7a26 	vmul.f32	s14, s6, s13
 80125a4:	ee64 7a26 	vmul.f32	s15, s8, s13
 80125a8:	ee61 1aa6 	vmul.f32	s3, s3, s13
 80125ac:	ee24 4a00 	vmul.f32	s8, s8, s0
 80125b0:	ee23 3a00 	vmul.f32	s6, s6, s0
 80125b4:	ee64 6aa6 	vmul.f32	s13, s9, s13
 80125b8:	ee24 0a80 	vmul.f32	s0, s9, s0
 80125bc:	ee38 7a07 	vadd.f32	s14, s16, s14
 80125c0:	ee76 6a84 	vadd.f32	s13, s13, s8
 80125c4:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80125c8:	ee33 3a61 	vsub.f32	s6, s6, s3
 80125cc:	ee17 ca10 	vmov	ip, s14
 80125d0:	f841 cb08 	str.w	ip, [r1], #8
 80125d4:	ed01 3a01 	vstr	s6, [r1, #-4]
 80125d8:	ed82 0a04 	vstr	s0, [r2, #16]
 80125dc:	edc2 6a03 	vstr	s13, [r2, #12]
 80125e0:	ed59 6a08 	vldr	s13, [r9, #-32]	@ 0xffffffe0
 80125e4:	ed59 7a07 	vldr	s15, [r9, #-28]	@ 0xffffffe4
 80125e8:	ee25 7ae6 	vnmul.f32	s14, s11, s13
 80125ec:	ee23 4aa6 	vmul.f32	s8, s7, s13
 80125f0:	ee65 4a27 	vmul.f32	s9, s10, s15
 80125f4:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80125f8:	ee63 3aa7 	vmul.f32	s7, s7, s15
 80125fc:	ee66 7a27 	vmul.f32	s15, s12, s15
 8012600:	ee25 5a26 	vmul.f32	s10, s10, s13
 8012604:	ee66 6a26 	vmul.f32	s13, s12, s13
 8012608:	ee77 7a67 	vsub.f32	s15, s14, s15
 801260c:	ee34 6a24 	vadd.f32	s12, s8, s9
 8012610:	ee75 6ae6 	vsub.f32	s13, s11, s13
 8012614:	ee35 5a63 	vsub.f32	s10, s10, s7
 8012618:	ee17 ca90 	vmov	ip, s15
 801261c:	ed04 6a04 	vstr	s12, [r4, #-16]
 8012620:	ed04 5a03 	vstr	s10, [r4, #-12]
 8012624:	f846 c908 	str.w	ip, [r6], #-8
 8012628:	edc6 6a01 	vstr	s13, [r6, #4]
 801262c:	ed5e 7a0c 	vldr	s15, [lr, #-48]	@ 0xffffffd0
 8012630:	ed1e 7a0b 	vldr	s14, [lr, #-44]	@ 0xffffffd4
 8012634:	ee62 5a27 	vmul.f32	s11, s4, s15
 8012638:	ee22 6a87 	vmul.f32	s12, s5, s14
 801263c:	ee22 2a07 	vmul.f32	s4, s4, s14
 8012640:	ee62 2aa7 	vmul.f32	s5, s5, s15
 8012644:	ee61 6a07 	vmul.f32	s13, s2, s14
 8012648:	ee20 7a87 	vmul.f32	s14, s1, s14
 801264c:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8012650:	ee61 7a27 	vmul.f32	s15, s2, s15
 8012654:	ee35 6a86 	vadd.f32	s12, s11, s12
 8012658:	ee72 2ac2 	vsub.f32	s5, s5, s4
 801265c:	ee76 0ae0 	vsub.f32	s1, s13, s1
 8012660:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012664:	ee16 ca10 	vmov	ip, s12
 8012668:	f840 cb08 	str.w	ip, [r0], #8
 801266c:	ed40 2a01 	vstr	s5, [r0, #-4]
 8012670:	edc3 0a04 	vstr	s1, [r3, #16]
 8012674:	edc3 7a03 	vstr	s15, [r3, #12]
 8012678:	f47f aefc 	bne.w	8012474 <arm_cfft_radix8by4_f32+0x134>
 801267c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801267e:	9802      	ldr	r0, [sp, #8]
 8012680:	00cb      	lsls	r3, r1, #3
 8012682:	f8dd c034 	ldr.w	ip, [sp, #52]	@ 0x34
 8012686:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 801268a:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 801268e:	4498      	add	r8, r3
 8012690:	449c      	add	ip, r3
 8012692:	9102      	str	r1, [sp, #8]
 8012694:	9901      	ldr	r1, [sp, #4]
 8012696:	4419      	add	r1, r3
 8012698:	9101      	str	r1, [sp, #4]
 801269a:	9907      	ldr	r1, [sp, #28]
 801269c:	4419      	add	r1, r3
 801269e:	9107      	str	r1, [sp, #28]
 80126a0:	9908      	ldr	r1, [sp, #32]
 80126a2:	4419      	add	r1, r3
 80126a4:	9b06      	ldr	r3, [sp, #24]
 80126a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80126aa:	9108      	str	r1, [sp, #32]
 80126ac:	9306      	str	r3, [sp, #24]
 80126ae:	9a01      	ldr	r2, [sp, #4]
 80126b0:	2304      	movs	r3, #4
 80126b2:	9e08      	ldr	r6, [sp, #32]
 80126b4:	edd2 7a00 	vldr	s15, [r2]
 80126b8:	ed96 7a00 	vldr	s14, [r6]
 80126bc:	edd8 2a00 	vldr	s5, [r8]
 80126c0:	ee77 5a87 	vadd.f32	s11, s15, s14
 80126c4:	ed9c 3a00 	vldr	s6, [ip]
 80126c8:	ed92 6a01 	vldr	s12, [r2, #4]
 80126cc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80126d0:	edd6 6a01 	vldr	s13, [r6, #4]
 80126d4:	ee75 4aa2 	vadd.f32	s9, s11, s5
 80126d8:	ed9c 2a01 	vldr	s4, [ip, #4]
 80126dc:	ee36 5a26 	vadd.f32	s10, s12, s13
 80126e0:	edd8 7a01 	vldr	s15, [r8, #4]
 80126e4:	ee76 6a66 	vsub.f32	s13, s12, s13
 80126e8:	9d02      	ldr	r5, [sp, #8]
 80126ea:	ee34 6a83 	vadd.f32	s12, s9, s6
 80126ee:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 80126f2:	ee37 4a27 	vadd.f32	s8, s14, s15
 80126f6:	9805      	ldr	r0, [sp, #20]
 80126f8:	ee76 4ae2 	vsub.f32	s9, s13, s5
 80126fc:	4621      	mov	r1, r4
 80126fe:	ed82 6a00 	vstr	s12, [r2]
 8012702:	ee35 6ae2 	vsub.f32	s12, s11, s5
 8012706:	edd8 3a01 	vldr	s7, [r8, #4]
 801270a:	ee75 5a67 	vsub.f32	s11, s10, s15
 801270e:	eddc 1a01 	vldr	s3, [ip, #4]
 8012712:	ee34 4a42 	vsub.f32	s8, s8, s4
 8012716:	ee75 3a23 	vadd.f32	s7, s10, s7
 801271a:	ee74 4a83 	vadd.f32	s9, s9, s6
 801271e:	ee76 6aa2 	vadd.f32	s13, s13, s5
 8012722:	ee33 5aa1 	vadd.f32	s10, s7, s3
 8012726:	ee37 7a67 	vsub.f32	s14, s14, s15
 801272a:	ee36 6a43 	vsub.f32	s12, s12, s6
 801272e:	ed82 5a01 	vstr	s10, [r2, #4]
 8012732:	ee75 5ac2 	vsub.f32	s11, s11, s4
 8012736:	9a07      	ldr	r2, [sp, #28]
 8012738:	ee77 7a02 	vadd.f32	s15, s14, s4
 801273c:	ee36 7ac3 	vsub.f32	s14, s13, s6
 8012740:	edd2 2a00 	vldr	s5, [r2]
 8012744:	ed92 5a01 	vldr	s10, [r2, #4]
 8012748:	ee64 3a22 	vmul.f32	s7, s8, s5
 801274c:	ee24 4a05 	vmul.f32	s8, s8, s10
 8012750:	ee24 5a85 	vmul.f32	s10, s9, s10
 8012754:	ee64 4aa2 	vmul.f32	s9, s9, s5
 8012758:	ee33 5a85 	vadd.f32	s10, s7, s10
 801275c:	ee74 4ac4 	vsub.f32	s9, s9, s8
 8012760:	ed88 5a00 	vstr	s10, [r8]
 8012764:	edc8 4a01 	vstr	s9, [r8, #4]
 8012768:	edd5 4a01 	vldr	s9, [r5, #4]
 801276c:	edd5 6a00 	vldr	s13, [r5]
 8012770:	9d06      	ldr	r5, [sp, #24]
 8012772:	ee26 5a26 	vmul.f32	s10, s12, s13
 8012776:	ee26 6a24 	vmul.f32	s12, s12, s9
 801277a:	ee65 6aa6 	vmul.f32	s13, s11, s13
 801277e:	ee65 5aa4 	vmul.f32	s11, s11, s9
 8012782:	ee36 6ac6 	vsub.f32	s12, s13, s12
 8012786:	ee75 5a25 	vadd.f32	s11, s10, s11
 801278a:	ed86 6a01 	vstr	s12, [r6, #4]
 801278e:	edc6 5a00 	vstr	s11, [r6]
 8012792:	edd5 5a01 	vldr	s11, [r5, #4]
 8012796:	edd5 6a00 	vldr	s13, [r5]
 801279a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801279c:	ee27 6aa6 	vmul.f32	s12, s15, s13
 80127a0:	ee67 6a26 	vmul.f32	s13, s14, s13
 80127a4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80127a8:	ee27 7a25 	vmul.f32	s14, s14, s11
 80127ac:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80127b0:	ee36 7a07 	vadd.f32	s14, s12, s14
 80127b4:	edcc 7a01 	vstr	s15, [ip, #4]
 80127b8:	ed8c 7a00 	vstr	s14, [ip]
 80127bc:	6872      	ldr	r2, [r6, #4]
 80127be:	f000 f977 	bl	8012ab0 <arm_radix8_butterfly_f32>
 80127c2:	9803      	ldr	r0, [sp, #12]
 80127c4:	4621      	mov	r1, r4
 80127c6:	6872      	ldr	r2, [r6, #4]
 80127c8:	2304      	movs	r3, #4
 80127ca:	f000 f971 	bl	8012ab0 <arm_radix8_butterfly_f32>
 80127ce:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80127d0:	4621      	mov	r1, r4
 80127d2:	6872      	ldr	r2, [r6, #4]
 80127d4:	2304      	movs	r3, #4
 80127d6:	f000 f96b 	bl	8012ab0 <arm_radix8_butterfly_f32>
 80127da:	4621      	mov	r1, r4
 80127dc:	6872      	ldr	r2, [r6, #4]
 80127de:	2304      	movs	r3, #4
 80127e0:	9804      	ldr	r0, [sp, #16]
 80127e2:	b00f      	add	sp, #60	@ 0x3c
 80127e4:	ecbd 8b06 	vpop	{d8-d10}
 80127e8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127ec:	f000 b960 	b.w	8012ab0 <arm_radix8_butterfly_f32>

080127f0 <arm_cfft_f32>:
 80127f0:	2a01      	cmp	r2, #1
 80127f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80127f6:	4606      	mov	r6, r0
 80127f8:	4617      	mov	r7, r2
 80127fa:	460c      	mov	r4, r1
 80127fc:	4698      	mov	r8, r3
 80127fe:	8805      	ldrh	r5, [r0, #0]
 8012800:	d053      	beq.n	80128aa <arm_cfft_f32+0xba>
 8012802:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8012806:	d04b      	beq.n	80128a0 <arm_cfft_f32+0xb0>
 8012808:	d916      	bls.n	8012838 <arm_cfft_f32+0x48>
 801280a:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 801280e:	d01a      	beq.n	8012846 <arm_cfft_f32+0x56>
 8012810:	d95a      	bls.n	80128c8 <arm_cfft_f32+0xd8>
 8012812:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 8012816:	d043      	beq.n	80128a0 <arm_cfft_f32+0xb0>
 8012818:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 801281c:	d105      	bne.n	801282a <arm_cfft_f32+0x3a>
 801281e:	2301      	movs	r3, #1
 8012820:	6872      	ldr	r2, [r6, #4]
 8012822:	4629      	mov	r1, r5
 8012824:	4620      	mov	r0, r4
 8012826:	f000 f943 	bl	8012ab0 <arm_radix8_butterfly_f32>
 801282a:	f1b8 0f00 	cmp.w	r8, #0
 801282e:	d111      	bne.n	8012854 <arm_cfft_f32+0x64>
 8012830:	2f01      	cmp	r7, #1
 8012832:	d016      	beq.n	8012862 <arm_cfft_f32+0x72>
 8012834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012838:	2d20      	cmp	r5, #32
 801283a:	d031      	beq.n	80128a0 <arm_cfft_f32+0xb0>
 801283c:	d948      	bls.n	80128d0 <arm_cfft_f32+0xe0>
 801283e:	2d40      	cmp	r5, #64	@ 0x40
 8012840:	d0ed      	beq.n	801281e <arm_cfft_f32+0x2e>
 8012842:	2d80      	cmp	r5, #128	@ 0x80
 8012844:	d1f1      	bne.n	801282a <arm_cfft_f32+0x3a>
 8012846:	4621      	mov	r1, r4
 8012848:	4630      	mov	r0, r6
 801284a:	f7ff fca9 	bl	80121a0 <arm_cfft_radix8by2_f32>
 801284e:	f1b8 0f00 	cmp.w	r8, #0
 8012852:	d0ed      	beq.n	8012830 <arm_cfft_f32+0x40>
 8012854:	68b2      	ldr	r2, [r6, #8]
 8012856:	4620      	mov	r0, r4
 8012858:	89b1      	ldrh	r1, [r6, #12]
 801285a:	f7ed fcd9 	bl	8000210 <arm_bitreversal_32>
 801285e:	2f01      	cmp	r7, #1
 8012860:	d1e8      	bne.n	8012834 <arm_cfft_f32+0x44>
 8012862:	ee07 5a90 	vmov	s15, r5
 8012866:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801286a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801286e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8012872:	2d00      	cmp	r5, #0
 8012874:	d0de      	beq.n	8012834 <arm_cfft_f32+0x44>
 8012876:	f104 0108 	add.w	r1, r4, #8
 801287a:	2300      	movs	r3, #0
 801287c:	ed11 7a02 	vldr	s14, [r1, #-8]
 8012880:	3301      	adds	r3, #1
 8012882:	ed51 7a01 	vldr	s15, [r1, #-4]
 8012886:	3108      	adds	r1, #8
 8012888:	429d      	cmp	r5, r3
 801288a:	ee27 7a26 	vmul.f32	s14, s14, s13
 801288e:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8012892:	ed01 7a04 	vstr	s14, [r1, #-16]
 8012896:	ed41 7a03 	vstr	s15, [r1, #-12]
 801289a:	d1ef      	bne.n	801287c <arm_cfft_f32+0x8c>
 801289c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80128a0:	4621      	mov	r1, r4
 80128a2:	4630      	mov	r0, r6
 80128a4:	f7ff fd4c 	bl	8012340 <arm_cfft_radix8by4_f32>
 80128a8:	e7bf      	b.n	801282a <arm_cfft_f32+0x3a>
 80128aa:	b1a5      	cbz	r5, 80128d6 <arm_cfft_f32+0xe6>
 80128ac:	f101 030c 	add.w	r3, r1, #12
 80128b0:	2200      	movs	r2, #0
 80128b2:	ed53 7a02 	vldr	s15, [r3, #-8]
 80128b6:	3201      	adds	r2, #1
 80128b8:	3308      	adds	r3, #8
 80128ba:	eef1 7a67 	vneg.f32	s15, s15
 80128be:	4295      	cmp	r5, r2
 80128c0:	ed43 7a04 	vstr	s15, [r3, #-16]
 80128c4:	d1f5      	bne.n	80128b2 <arm_cfft_f32+0xc2>
 80128c6:	e79c      	b.n	8012802 <arm_cfft_f32+0x12>
 80128c8:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 80128cc:	d0a7      	beq.n	801281e <arm_cfft_f32+0x2e>
 80128ce:	e7ac      	b.n	801282a <arm_cfft_f32+0x3a>
 80128d0:	2d10      	cmp	r5, #16
 80128d2:	d0b8      	beq.n	8012846 <arm_cfft_f32+0x56>
 80128d4:	e7a9      	b.n	801282a <arm_cfft_f32+0x3a>
 80128d6:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 80128da:	d896      	bhi.n	801280a <arm_cfft_f32+0x1a>
 80128dc:	e7ac      	b.n	8012838 <arm_cfft_f32+0x48>
 80128de:	bf00      	nop

080128e0 <arm_cmplx_mag_f32>:
 80128e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80128e4:	ea5f 0892 	movs.w	r8, r2, lsr #2
 80128e8:	b084      	sub	sp, #16
 80128ea:	d07f      	beq.n	80129ec <arm_cmplx_mag_f32+0x10c>
 80128ec:	f100 0420 	add.w	r4, r0, #32
 80128f0:	f101 0510 	add.w	r5, r1, #16
 80128f4:	4646      	mov	r6, r8
 80128f6:	2700      	movs	r7, #0
 80128f8:	e05a      	b.n	80129b0 <arm_cmplx_mag_f32+0xd0>
 80128fa:	eeb1 0ae7 	vsqrt.f32	s0, s15
 80128fe:	eeb4 0a40 	vcmp.f32	s0, s0
 8012902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012906:	f040 80a4 	bne.w	8012a52 <arm_cmplx_mag_f32+0x172>
 801290a:	ed05 0a04 	vstr	s0, [r5, #-16]
 801290e:	ed54 7a06 	vldr	s15, [r4, #-24]	@ 0xffffffe8
 8012912:	ed14 0a05 	vldr	s0, [r4, #-20]	@ 0xffffffec
 8012916:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801291a:	ee20 0a00 	vmul.f32	s0, s0, s0
 801291e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8012922:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801292a:	f2c0 808f 	blt.w	8012a4c <arm_cmplx_mag_f32+0x16c>
 801292e:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8012932:	eeb4 0a40 	vcmp.f32	s0, s0
 8012936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801293a:	f040 80af 	bne.w	8012a9c <arm_cmplx_mag_f32+0x1bc>
 801293e:	ed05 0a03 	vstr	s0, [r5, #-12]
 8012942:	ed54 7a04 	vldr	s15, [r4, #-16]
 8012946:	ed14 0a03 	vldr	s0, [r4, #-12]
 801294a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801294e:	ee20 0a00 	vmul.f32	s0, s0, s0
 8012952:	ee77 7a80 	vadd.f32	s15, s15, s0
 8012956:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801295a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801295e:	db72      	blt.n	8012a46 <arm_cmplx_mag_f32+0x166>
 8012960:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8012964:	eeb4 0a40 	vcmp.f32	s0, s0
 8012968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801296c:	f040 808c 	bne.w	8012a88 <arm_cmplx_mag_f32+0x1a8>
 8012970:	ed05 0a02 	vstr	s0, [r5, #-8]
 8012974:	ed54 7a02 	vldr	s15, [r4, #-8]
 8012978:	ed14 0a01 	vldr	s0, [r4, #-4]
 801297c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8012980:	ee20 0a00 	vmul.f32	s0, s0, s0
 8012984:	ee77 7a80 	vadd.f32	s15, s15, s0
 8012988:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801298c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012990:	db20      	blt.n	80129d4 <arm_cmplx_mag_f32+0xf4>
 8012992:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8012996:	eeb4 0a40 	vcmp.f32	s0, s0
 801299a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801299e:	d169      	bne.n	8012a74 <arm_cmplx_mag_f32+0x194>
 80129a0:	3e01      	subs	r6, #1
 80129a2:	ed05 0a01 	vstr	s0, [r5, #-4]
 80129a6:	f104 0420 	add.w	r4, r4, #32
 80129aa:	f105 0510 	add.w	r5, r5, #16
 80129ae:	d019      	beq.n	80129e4 <arm_cmplx_mag_f32+0x104>
 80129b0:	ed54 7a08 	vldr	s15, [r4, #-32]	@ 0xffffffe0
 80129b4:	ed14 0a07 	vldr	s0, [r4, #-28]	@ 0xffffffe4
 80129b8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80129bc:	ee20 0a00 	vmul.f32	s0, s0, s0
 80129c0:	ee77 7a80 	vadd.f32	s15, s15, s0
 80129c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80129c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129cc:	da95      	bge.n	80128fa <arm_cmplx_mag_f32+0x1a>
 80129ce:	f845 7c10 	str.w	r7, [r5, #-16]
 80129d2:	e79c      	b.n	801290e <arm_cmplx_mag_f32+0x2e>
 80129d4:	3e01      	subs	r6, #1
 80129d6:	f845 7c04 	str.w	r7, [r5, #-4]
 80129da:	f104 0420 	add.w	r4, r4, #32
 80129de:	f105 0510 	add.w	r5, r5, #16
 80129e2:	d1e5      	bne.n	80129b0 <arm_cmplx_mag_f32+0xd0>
 80129e4:	eb00 1048 	add.w	r0, r0, r8, lsl #5
 80129e8:	eb01 1108 	add.w	r1, r1, r8, lsl #4
 80129ec:	f012 0503 	ands.w	r5, r2, #3
 80129f0:	d026      	beq.n	8012a40 <arm_cmplx_mag_f32+0x160>
 80129f2:	f100 0408 	add.w	r4, r0, #8
 80129f6:	2600      	movs	r6, #0
 80129f8:	e00c      	b.n	8012a14 <arm_cmplx_mag_f32+0x134>
 80129fa:	eeb1 0ae7 	vsqrt.f32	s0, s15
 80129fe:	eeb4 0a40 	vcmp.f32	s0, s0
 8012a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a06:	d12e      	bne.n	8012a66 <arm_cmplx_mag_f32+0x186>
 8012a08:	3d01      	subs	r5, #1
 8012a0a:	ed01 0a01 	vstr	s0, [r1, #-4]
 8012a0e:	f104 0408 	add.w	r4, r4, #8
 8012a12:	d015      	beq.n	8012a40 <arm_cmplx_mag_f32+0x160>
 8012a14:	ed54 7a02 	vldr	s15, [r4, #-8]
 8012a18:	3104      	adds	r1, #4
 8012a1a:	ed14 0a01 	vldr	s0, [r4, #-4]
 8012a1e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8012a22:	ee20 0a00 	vmul.f32	s0, s0, s0
 8012a26:	ee77 7a80 	vadd.f32	s15, s15, s0
 8012a2a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012a2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a32:	dae2      	bge.n	80129fa <arm_cmplx_mag_f32+0x11a>
 8012a34:	3d01      	subs	r5, #1
 8012a36:	f841 6c04 	str.w	r6, [r1, #-4]
 8012a3a:	f104 0408 	add.w	r4, r4, #8
 8012a3e:	d1e9      	bne.n	8012a14 <arm_cmplx_mag_f32+0x134>
 8012a40:	b004      	add	sp, #16
 8012a42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a46:	f845 7c08 	str.w	r7, [r5, #-8]
 8012a4a:	e793      	b.n	8012974 <arm_cmplx_mag_f32+0x94>
 8012a4c:	f845 7c0c 	str.w	r7, [r5, #-12]
 8012a50:	e777      	b.n	8012942 <arm_cmplx_mag_f32+0x62>
 8012a52:	eeb0 0a67 	vmov.f32	s0, s15
 8012a56:	9203      	str	r2, [sp, #12]
 8012a58:	9102      	str	r1, [sp, #8]
 8012a5a:	9001      	str	r0, [sp, #4]
 8012a5c:	f006 fdd2 	bl	8019604 <sqrtf>
 8012a60:	a801      	add	r0, sp, #4
 8012a62:	c807      	ldmia	r0, {r0, r1, r2}
 8012a64:	e751      	b.n	801290a <arm_cmplx_mag_f32+0x2a>
 8012a66:	eeb0 0a67 	vmov.f32	s0, s15
 8012a6a:	9101      	str	r1, [sp, #4]
 8012a6c:	f006 fdca 	bl	8019604 <sqrtf>
 8012a70:	9901      	ldr	r1, [sp, #4]
 8012a72:	e7c9      	b.n	8012a08 <arm_cmplx_mag_f32+0x128>
 8012a74:	eeb0 0a67 	vmov.f32	s0, s15
 8012a78:	9203      	str	r2, [sp, #12]
 8012a7a:	9102      	str	r1, [sp, #8]
 8012a7c:	9001      	str	r0, [sp, #4]
 8012a7e:	f006 fdc1 	bl	8019604 <sqrtf>
 8012a82:	a801      	add	r0, sp, #4
 8012a84:	c807      	ldmia	r0, {r0, r1, r2}
 8012a86:	e78b      	b.n	80129a0 <arm_cmplx_mag_f32+0xc0>
 8012a88:	eeb0 0a67 	vmov.f32	s0, s15
 8012a8c:	9203      	str	r2, [sp, #12]
 8012a8e:	9102      	str	r1, [sp, #8]
 8012a90:	9001      	str	r0, [sp, #4]
 8012a92:	f006 fdb7 	bl	8019604 <sqrtf>
 8012a96:	a801      	add	r0, sp, #4
 8012a98:	c807      	ldmia	r0, {r0, r1, r2}
 8012a9a:	e769      	b.n	8012970 <arm_cmplx_mag_f32+0x90>
 8012a9c:	eeb0 0a67 	vmov.f32	s0, s15
 8012aa0:	9203      	str	r2, [sp, #12]
 8012aa2:	9102      	str	r1, [sp, #8]
 8012aa4:	9001      	str	r0, [sp, #4]
 8012aa6:	f006 fdad 	bl	8019604 <sqrtf>
 8012aaa:	a801      	add	r0, sp, #4
 8012aac:	c807      	ldmia	r0, {r0, r1, r2}
 8012aae:	e746      	b.n	801293e <arm_cmplx_mag_f32+0x5e>

08012ab0 <arm_radix8_butterfly_f32>:
 8012ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ab4:	469e      	mov	lr, r3
 8012ab6:	4603      	mov	r3, r0
 8012ab8:	468a      	mov	sl, r1
 8012aba:	468b      	mov	fp, r1
 8012abc:	3304      	adds	r3, #4
 8012abe:	ed2d 8b10 	vpush	{d8-d15}
 8012ac2:	469c      	mov	ip, r3
 8012ac4:	b09d      	sub	sp, #116	@ 0x74
 8012ac6:	ed9f 9ac3 	vldr	s18, [pc, #780]	@ 8012dd4 <arm_radix8_butterfly_f32+0x324>
 8012aca:	9019      	str	r0, [sp, #100]	@ 0x64
 8012acc:	921a      	str	r2, [sp, #104]	@ 0x68
 8012ace:	931b      	str	r3, [sp, #108]	@ 0x6c
 8012ad0:	ea4f 03db 	mov.w	r3, fp, lsr #3
 8012ad4:	f04f 0800 	mov.w	r8, #0
 8012ad8:	461a      	mov	r2, r3
 8012ada:	9311      	str	r3, [sp, #68]	@ 0x44
 8012adc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8012ae0:	4611      	mov	r1, r2
 8012ae2:	ea4f 09c2 	mov.w	r9, r2, lsl #3
 8012ae6:	9300      	str	r3, [sp, #0]
 8012ae8:	0053      	lsls	r3, r2, #1
 8012aea:	18d5      	adds	r5, r2, r3
 8012aec:	9301      	str	r3, [sp, #4]
 8012aee:	0113      	lsls	r3, r2, #4
 8012af0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8012af2:	194c      	adds	r4, r1, r5
 8012af4:	eb02 0609 	add.w	r6, r2, r9
 8012af8:	9302      	str	r3, [sp, #8]
 8012afa:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8012afe:	4613      	mov	r3, r2
 8012b00:	190a      	adds	r2, r1, r4
 8012b02:	eb06 0709 	add.w	r7, r6, r9
 8012b06:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8012b0a:	1888      	adds	r0, r1, r2
 8012b0c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8012b10:	4401      	add	r1, r0
 8012b12:	3204      	adds	r2, #4
 8012b14:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8012b18:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8012b1c:	9b00      	ldr	r3, [sp, #0]
 8012b1e:	3104      	adds	r1, #4
 8012b20:	ed5c 7a01 	vldr	s15, [ip, #-4]
 8012b24:	44d8      	add	r8, fp
 8012b26:	ed90 7a00 	vldr	s14, [r0]
 8012b2a:	ed94 5a00 	vldr	s10, [r4]
 8012b2e:	45c2      	cmp	sl, r8
 8012b30:	edd7 3a00 	vldr	s7, [r7]
 8012b34:	ed96 6a00 	vldr	s12, [r6]
 8012b38:	ee37 1a85 	vadd.f32	s2, s15, s10
 8012b3c:	ed52 6a01 	vldr	s13, [r2, #-4]
 8012b40:	ee73 4a87 	vadd.f32	s9, s7, s14
 8012b44:	ee37 5ac5 	vsub.f32	s10, s15, s10
 8012b48:	edd5 7a00 	vldr	s15, [r5]
 8012b4c:	ee73 3ac7 	vsub.f32	s7, s7, s14
 8012b50:	ed11 7a01 	vldr	s14, [r1, #-4]
 8012b54:	ee36 2a26 	vadd.f32	s4, s12, s13
 8012b58:	ee37 4a87 	vadd.f32	s8, s15, s14
 8012b5c:	ee76 6a66 	vsub.f32	s13, s12, s13
 8012b60:	ee71 5a24 	vadd.f32	s11, s2, s9
 8012b64:	ee32 6a04 	vadd.f32	s12, s4, s8
 8012b68:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8012b6c:	ee31 1a64 	vsub.f32	s2, s2, s9
 8012b70:	ee75 4a86 	vadd.f32	s9, s11, s12
 8012b74:	ee76 7ac7 	vsub.f32	s15, s13, s14
 8012b78:	ee75 5ac6 	vsub.f32	s11, s11, s12
 8012b7c:	ed4c 4a01 	vstr	s9, [ip, #-4]
 8012b80:	ee32 2a44 	vsub.f32	s4, s4, s8
 8012b84:	ee67 7a89 	vmul.f32	s15, s15, s18
 8012b88:	ed94 0a01 	vldr	s0, [r4, #4]
 8012b8c:	edc4 5a00 	vstr	s11, [r4]
 8012b90:	ee36 7a87 	vadd.f32	s14, s13, s14
 8012b94:	edd6 5a01 	vldr	s11, [r6, #4]
 8012b98:	edd5 2a01 	vldr	s5, [r5, #4]
 8012b9c:	ee75 1a27 	vadd.f32	s3, s10, s15
 8012ba0:	ed92 4a00 	vldr	s8, [r2]
 8012ba4:	ee75 7a67 	vsub.f32	s15, s10, s15
 8012ba8:	edd1 4a00 	vldr	s9, [r1]
 8012bac:	ee27 7a09 	vmul.f32	s14, s14, s18
 8012bb0:	ee35 3ac4 	vsub.f32	s6, s11, s8
 8012bb4:	ed9c 6a00 	vldr	s12, [ip]
 8012bb8:	ee72 6ae4 	vsub.f32	s13, s5, s9
 8012bbc:	edd0 0a01 	vldr	s1, [r0, #4]
 8012bc0:	ed97 5a01 	vldr	s10, [r7, #4]
 8012bc4:	ee35 4a84 	vadd.f32	s8, s11, s8
 8012bc8:	ee72 4aa4 	vadd.f32	s9, s5, s9
 8012bcc:	ee73 5a26 	vadd.f32	s11, s6, s13
 8012bd0:	ee76 2a00 	vadd.f32	s5, s12, s0
 8012bd4:	ee73 6a66 	vsub.f32	s13, s6, s13
 8012bd8:	ee36 6a40 	vsub.f32	s12, s12, s0
 8012bdc:	ee35 0a20 	vadd.f32	s0, s10, s1
 8012be0:	ee65 5a89 	vmul.f32	s11, s11, s18
 8012be4:	ee35 5a60 	vsub.f32	s10, s10, s1
 8012be8:	ee32 3a80 	vadd.f32	s6, s5, s0
 8012bec:	ee74 0a24 	vadd.f32	s1, s8, s9
 8012bf0:	ee66 6a89 	vmul.f32	s13, s13, s18
 8012bf4:	ee74 4a64 	vsub.f32	s9, s8, s9
 8012bf8:	ee32 4ac0 	vsub.f32	s8, s5, s0
 8012bfc:	ee75 2a25 	vadd.f32	s5, s10, s11
 8012c00:	ee33 0a20 	vadd.f32	s0, s6, s1
 8012c04:	ee75 5a65 	vsub.f32	s11, s10, s11
 8012c08:	ee33 3a60 	vsub.f32	s6, s6, s1
 8012c0c:	ee36 5a26 	vadd.f32	s10, s12, s13
 8012c10:	ed8c 0a00 	vstr	s0, [ip]
 8012c14:	ee76 6a66 	vsub.f32	s13, s12, s13
 8012c18:	449c      	add	ip, r3
 8012c1a:	ee33 6a87 	vadd.f32	s12, s7, s14
 8012c1e:	ed84 3a01 	vstr	s6, [r4, #4]
 8012c22:	ee33 7ac7 	vsub.f32	s14, s7, s14
 8012c26:	441c      	add	r4, r3
 8012c28:	ee71 3a24 	vadd.f32	s7, s2, s9
 8012c2c:	ee71 4a64 	vsub.f32	s9, s2, s9
 8012c30:	ee31 3aa2 	vadd.f32	s6, s3, s5
 8012c34:	edc7 3a00 	vstr	s7, [r7]
 8012c38:	ee34 1a42 	vsub.f32	s2, s8, s4
 8012c3c:	edc0 4a00 	vstr	s9, [r0]
 8012c40:	ee77 3aa5 	vadd.f32	s7, s15, s11
 8012c44:	ee75 4a46 	vsub.f32	s9, s10, s12
 8012c48:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8012c4c:	ed87 1a01 	vstr	s2, [r7, #4]
 8012c50:	ee76 5ac7 	vsub.f32	s11, s13, s14
 8012c54:	441f      	add	r7, r3
 8012c56:	ee32 4a04 	vadd.f32	s8, s4, s8
 8012c5a:	ee71 1ae2 	vsub.f32	s3, s3, s5
 8012c5e:	ee36 6a05 	vadd.f32	s12, s12, s10
 8012c62:	ee37 7a26 	vadd.f32	s14, s14, s13
 8012c66:	ed80 4a01 	vstr	s8, [r0, #4]
 8012c6a:	ed86 3a00 	vstr	s6, [r6]
 8012c6e:	4418      	add	r0, r3
 8012c70:	ed41 1a01 	vstr	s3, [r1, #-4]
 8012c74:	ed42 3a01 	vstr	s7, [r2, #-4]
 8012c78:	edc5 7a00 	vstr	s15, [r5]
 8012c7c:	edc6 4a01 	vstr	s9, [r6, #4]
 8012c80:	441e      	add	r6, r3
 8012c82:	ed81 6a00 	vstr	s12, [r1]
 8012c86:	4419      	add	r1, r3
 8012c88:	edc2 5a00 	vstr	s11, [r2]
 8012c8c:	441a      	add	r2, r3
 8012c8e:	ed85 7a01 	vstr	s14, [r5, #4]
 8012c92:	441d      	add	r5, r3
 8012c94:	f63f af44 	bhi.w	8012b20 <arm_radix8_butterfly_f32+0x70>
 8012c98:	9300      	str	r3, [sp, #0]
 8012c9a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8012c9c:	2b07      	cmp	r3, #7
 8012c9e:	f240 81f4 	bls.w	801308a <arm_radix8_butterfly_f32+0x5da>
 8012ca2:	9901      	ldr	r1, [sp, #4]
 8012ca4:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 8012ca8:	9d02      	ldr	r5, [sp, #8]
 8012caa:	ea4f 02ce 	mov.w	r2, lr, lsl #3
 8012cae:	3101      	adds	r1, #1
 8012cb0:	eb04 000e 	add.w	r0, r4, lr
 8012cb4:	00e4      	lsls	r4, r4, #3
 8012cb6:	3508      	adds	r5, #8
 8012cb8:	4419      	add	r1, r3
 8012cba:	eb00 0c0e 	add.w	ip, r0, lr
 8012cbe:	9413      	str	r4, [sp, #76]	@ 0x4c
 8012cc0:	00c0      	lsls	r0, r0, #3
 8012cc2:	185e      	adds	r6, r3, r1
 8012cc4:	4617      	mov	r7, r2
 8012cc6:	9218      	str	r2, [sp, #96]	@ 0x60
 8012cc8:	f109 0908 	add.w	r9, r9, #8
 8012ccc:	199c      	adds	r4, r3, r6
 8012cce:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012cd0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8012cd2:	9012      	str	r0, [sp, #72]	@ 0x48
 8012cd4:	195d      	adds	r5, r3, r5
 8012cd6:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8012cd8:	443a      	add	r2, r7
 8012cda:	950c      	str	r5, [sp, #48]	@ 0x30
 8012cdc:	4698      	mov	r8, r3
 8012cde:	4420      	add	r0, r4
 8012ce0:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8012ce2:	19d7      	adds	r7, r2, r7
 8012ce4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8012ce8:	4405      	add	r5, r0
 8012cea:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8012cee:	9710      	str	r7, [sp, #64]	@ 0x40
 8012cf0:	eb0c 070e 	add.w	r7, ip, lr
 8012cf4:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8012cf8:	3404      	adds	r4, #4
 8012cfa:	3004      	adds	r0, #4
 8012cfc:	44c8      	add	r8, r9
 8012cfe:	f8cd c054 	str.w	ip, [sp, #84]	@ 0x54
 8012d02:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012d04:	940a      	str	r4, [sp, #40]	@ 0x28
 8012d06:	9009      	str	r0, [sp, #36]	@ 0x24
 8012d08:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8012d0c:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 8012d0e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8012d12:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8012d14:	f8cd 8034 	str.w	r8, [sp, #52]	@ 0x34
 8012d18:	eb07 080e 	add.w	r8, r7, lr
 8012d1c:	eb04 0900 	add.w	r9, r4, r0
 8012d20:	00f8      	lsls	r0, r7, #3
 8012d22:	ea4f 0cc8 	mov.w	ip, r8, lsl #3
 8012d26:	3504      	adds	r5, #4
 8012d28:	4607      	mov	r7, r0
 8012d2a:	9017      	str	r0, [sp, #92]	@ 0x5c
 8012d2c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8012d2e:	4618      	mov	r0, r3
 8012d30:	eb03 01c6 	add.w	r1, r3, r6, lsl #3
 8012d34:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8012d36:	f8cd c050 	str.w	ip, [sp, #80]	@ 0x50
 8012d3a:	18e3      	adds	r3, r4, r3
 8012d3c:	9508      	str	r5, [sp, #32]
 8012d3e:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8012d40:	910e      	str	r1, [sp, #56]	@ 0x38
 8012d42:	4621      	mov	r1, r4
 8012d44:	eb04 0805 	add.w	r8, r4, r5
 8012d48:	9304      	str	r3, [sp, #16]
 8012d4a:	19e5      	adds	r5, r4, r7
 8012d4c:	ea4f 130e 	mov.w	r3, lr, lsl #4
 8012d50:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8012d52:	9316      	str	r3, [sp, #88]	@ 0x58
 8012d54:	190b      	adds	r3, r1, r4
 8012d56:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8012d58:	9505      	str	r5, [sp, #20]
 8012d5a:	9303      	str	r3, [sp, #12]
 8012d5c:	f100 0308 	add.w	r3, r0, #8
 8012d60:	9707      	str	r7, [sp, #28]
 8012d62:	4638      	mov	r0, r7
 8012d64:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012d66:	2301      	movs	r3, #1
 8012d68:	9306      	str	r3, [sp, #24]
 8012d6a:	9b00      	ldr	r3, [sp, #0]
 8012d6c:	ed90 fa00 	vldr	s30, [r0]
 8012d70:	edd0 ba01 	vldr	s23, [r0, #4]
 8012d74:	9803      	ldr	r0, [sp, #12]
 8012d76:	9903      	ldr	r1, [sp, #12]
 8012d78:	ed90 ba01 	vldr	s22, [r0, #4]
 8012d7c:	9804      	ldr	r0, [sp, #16]
 8012d7e:	edd1 ea00 	vldr	s29, [r1]
 8012d82:	edd0 aa01 	vldr	s21, [r0, #4]
 8012d86:	9805      	ldr	r0, [sp, #20]
 8012d88:	9905      	ldr	r1, [sp, #20]
 8012d8a:	edd0 7a01 	vldr	s15, [r0, #4]
 8012d8e:	ed91 da00 	vldr	s26, [r1]
 8012d92:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8012d94:	9c04      	ldr	r4, [sp, #16]
 8012d96:	edcd 7a01 	vstr	s15, [sp, #4]
 8012d9a:	edd8 7a01 	vldr	s15, [r8, #4]
 8012d9e:	9100      	str	r1, [sp, #0]
 8012da0:	edd2 fa00 	vldr	s31, [r2]
 8012da4:	ed94 ea00 	vldr	s28, [r4]
 8012da8:	ed92 ca01 	vldr	s24, [r2, #4]
 8012dac:	f8dd e020 	ldr.w	lr, [sp, #32]
 8012db0:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8012db2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8012db4:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8012db6:	edd9 da00 	vldr	s27, [r9]
 8012dba:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8012dbc:	edd8 ca00 	vldr	s25, [r8]
 8012dc0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8012dc2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8012dc4:	f8dd c018 	ldr.w	ip, [sp, #24]
 8012dc8:	ed99 aa01 	vldr	s20, [r9, #4]
 8012dcc:	edcd 7a02 	vstr	s15, [sp, #8]
 8012dd0:	9800      	ldr	r0, [sp, #0]
 8012dd2:	e001      	b.n	8012dd8 <arm_radix8_butterfly_f32+0x328>
 8012dd4:	3f3504f3 	.word	0x3f3504f3
 8012dd8:	edd5 3a00 	vldr	s7, [r5]
 8012ddc:	44dc      	add	ip, fp
 8012dde:	ed91 7a00 	vldr	s14, [r1]
 8012de2:	edd4 8a00 	vldr	s17, [r4]
 8012de6:	45e2      	cmp	sl, ip
 8012de8:	ed57 7a01 	vldr	s15, [r7, #-4]
 8012dec:	ed90 5a00 	vldr	s10, [r0]
 8012df0:	ed56 5a01 	vldr	s11, [r6, #-4]
 8012df4:	ee38 6aa7 	vadd.f32	s12, s17, s15
 8012df8:	ed92 1a00 	vldr	s2, [r2]
 8012dfc:	ee78 4ae7 	vsub.f32	s9, s17, s15
 8012e00:	ed1e 4a01 	vldr	s8, [lr, #-4]
 8012e04:	ee75 9a25 	vadd.f32	s19, s10, s11
 8012e08:	ee31 3a07 	vadd.f32	s6, s2, s14
 8012e0c:	ed92 8a01 	vldr	s16, [r2, #4]
 8012e10:	ee73 6a84 	vadd.f32	s13, s7, s8
 8012e14:	ee75 5a65 	vsub.f32	s11, s10, s11
 8012e18:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8012e1c:	ee73 1a06 	vadd.f32	s3, s6, s12
 8012e20:	ee39 5aa6 	vadd.f32	s10, s19, s13
 8012e24:	ee75 7a84 	vadd.f32	s15, s11, s8
 8012e28:	ee31 1a47 	vsub.f32	s2, s2, s14
 8012e2c:	ee31 7a85 	vadd.f32	s14, s3, s10
 8012e30:	ee67 7a89 	vmul.f32	s15, s15, s18
 8012e34:	ee33 3a46 	vsub.f32	s6, s6, s12
 8012e38:	ed82 7a00 	vstr	s14, [r2]
 8012e3c:	ee79 9ae6 	vsub.f32	s19, s19, s13
 8012e40:	ed96 6a00 	vldr	s12, [r6]
 8012e44:	ee34 2aa7 	vadd.f32	s4, s9, s15
 8012e48:	edd5 3a01 	vldr	s7, [r5, #4]
 8012e4c:	ee74 8ae7 	vsub.f32	s17, s9, s15
 8012e50:	ed90 7a01 	vldr	s14, [r0, #4]
 8012e54:	ee35 4ac4 	vsub.f32	s8, s11, s8
 8012e58:	edde 4a00 	vldr	s9, [lr]
 8012e5c:	ee31 5ac5 	vsub.f32	s10, s3, s10
 8012e60:	ee77 2a46 	vsub.f32	s5, s14, s12
 8012e64:	edd1 6a01 	vldr	s13, [r1, #4]
 8012e68:	ee73 7ae4 	vsub.f32	s15, s7, s9
 8012e6c:	edd7 0a00 	vldr	s1, [r7]
 8012e70:	ee77 5a06 	vadd.f32	s11, s14, s12
 8012e74:	ed94 7a01 	vldr	s14, [r4, #4]
 8012e78:	ee33 6aa4 	vadd.f32	s12, s7, s9
 8012e7c:	ee32 0ae7 	vsub.f32	s0, s5, s15
 8012e80:	ee78 4a66 	vsub.f32	s9, s16, s13
 8012e84:	ee78 3a26 	vadd.f32	s7, s16, s13
 8012e88:	ee72 2aa7 	vadd.f32	s5, s5, s15
 8012e8c:	ee77 6a20 	vadd.f32	s13, s14, s1
 8012e90:	ee24 4a09 	vmul.f32	s8, s8, s18
 8012e94:	ee37 7a60 	vsub.f32	s14, s14, s1
 8012e98:	ee20 8a09 	vmul.f32	s16, s0, s18
 8012e9c:	ee75 0a86 	vadd.f32	s1, s11, s12
 8012ea0:	ee33 0aa6 	vadd.f32	s0, s7, s13
 8012ea4:	ee62 2a89 	vmul.f32	s5, s5, s18
 8012ea8:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8012eac:	ee73 3ae6 	vsub.f32	s7, s7, s13
 8012eb0:	ee77 7a62 	vsub.f32	s15, s14, s5
 8012eb4:	ee74 5a88 	vadd.f32	s11, s9, s16
 8012eb8:	ee34 8ac8 	vsub.f32	s16, s9, s16
 8012ebc:	ee77 4a22 	vadd.f32	s9, s14, s5
 8012ec0:	ee71 2a04 	vadd.f32	s5, s2, s8
 8012ec4:	ee31 7a44 	vsub.f32	s14, s2, s8
 8012ec8:	ee30 1a60 	vsub.f32	s2, s0, s1
 8012ecc:	ee73 1a06 	vadd.f32	s3, s6, s12
 8012ed0:	ee33 6a46 	vsub.f32	s12, s6, s12
 8012ed4:	ee33 3ae9 	vsub.f32	s6, s7, s19
 8012ed8:	ee79 6aa3 	vadd.f32	s13, s19, s7
 8012edc:	ee38 4a68 	vsub.f32	s8, s16, s17
 8012ee0:	ee75 3ac2 	vsub.f32	s7, s11, s4
 8012ee4:	ee72 5a25 	vadd.f32	s11, s4, s11
 8012ee8:	ee32 2aa4 	vadd.f32	s4, s5, s9
 8012eec:	ee72 4ae4 	vsub.f32	s9, s5, s9
 8012ef0:	ee77 2a27 	vadd.f32	s5, s14, s15
 8012ef4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012ef8:	ee78 7a88 	vadd.f32	s15, s17, s16
 8012efc:	ee6e 8a05 	vmul.f32	s17, s28, s10
 8012f00:	ee2a 8a81 	vmul.f32	s16, s21, s2
 8012f04:	ee2a 5a85 	vmul.f32	s10, s21, s10
 8012f08:	ee2e 1a01 	vmul.f32	s2, s28, s2
 8012f0c:	ee6f 9a21 	vmul.f32	s19, s30, s3
 8012f10:	ee70 0a20 	vadd.f32	s1, s0, s1
 8012f14:	ee6b 1aa1 	vmul.f32	s3, s23, s3
 8012f18:	ee2b 0a83 	vmul.f32	s0, s23, s6
 8012f1c:	ee2f 3a03 	vmul.f32	s6, s30, s6
 8012f20:	edc2 0a01 	vstr	s1, [r2, #4]
 8012f24:	ee38 8a88 	vadd.f32	s16, s17, s16
 8012f28:	441a      	add	r2, r3
 8012f2a:	ee6c 8a23 	vmul.f32	s17, s24, s7
 8012f2e:	ee31 5a45 	vsub.f32	s10, s2, s10
 8012f32:	ee6f 3aa3 	vmul.f32	s7, s31, s7
 8012f36:	ed81 8a00 	vstr	s16, [r1]
 8012f3a:	ee39 0a80 	vadd.f32	s0, s19, s0
 8012f3e:	ee33 3a61 	vsub.f32	s6, s6, s3
 8012f42:	ed81 5a01 	vstr	s10, [r1, #4]
 8012f46:	ee6f 0a82 	vmul.f32	s1, s31, s4
 8012f4a:	edcd 3a00 	vstr	s7, [sp]
 8012f4e:	ed9d 5a02 	vldr	s10, [sp, #8]
 8012f52:	ee2d 8a06 	vmul.f32	s16, s26, s12
 8012f56:	eddd 3a01 	vldr	s7, [sp, #4]
 8012f5a:	ee6c 9aa4 	vmul.f32	s19, s25, s9
 8012f5e:	ed84 0a00 	vstr	s0, [r4]
 8012f62:	ee65 4a24 	vmul.f32	s9, s10, s9
 8012f66:	ed84 3a01 	vstr	s6, [r4, #4]
 8012f6a:	ee23 1aa6 	vmul.f32	s2, s7, s13
 8012f6e:	ee23 6a86 	vmul.f32	s12, s7, s12
 8012f72:	eddd 3a00 	vldr	s7, [sp]
 8012f76:	ee25 5a25 	vmul.f32	s10, s10, s11
 8012f7a:	4419      	add	r1, r3
 8012f7c:	ee2d 0aa2 	vmul.f32	s0, s27, s5
 8012f80:	441c      	add	r4, r3
 8012f82:	ee6a 1a04 	vmul.f32	s3, s20, s8
 8012f86:	ee70 0aa8 	vadd.f32	s1, s1, s17
 8012f8a:	ee2e 3a87 	vmul.f32	s6, s29, s14
 8012f8e:	ee6b 8a27 	vmul.f32	s17, s22, s15
 8012f92:	ee2c 2a02 	vmul.f32	s4, s24, s4
 8012f96:	ee6d 6a26 	vmul.f32	s13, s26, s13
 8012f9a:	ee6c 5aa5 	vmul.f32	s11, s25, s11
 8012f9e:	ee6a 2a22 	vmul.f32	s5, s20, s5
 8012fa2:	ee2d 4a84 	vmul.f32	s8, s27, s8
 8012fa6:	ee2b 7a07 	vmul.f32	s14, s22, s14
 8012faa:	ee6e 7aa7 	vmul.f32	s15, s29, s15
 8012fae:	ee73 3ac2 	vsub.f32	s7, s7, s4
 8012fb2:	ee38 8a01 	vadd.f32	s16, s16, s2
 8012fb6:	ee36 6ac6 	vsub.f32	s12, s13, s12
 8012fba:	ee39 5a85 	vadd.f32	s10, s19, s10
 8012fbe:	ee75 4ae4 	vsub.f32	s9, s11, s9
 8012fc2:	ed07 8a01 	vstr	s16, [r7, #-4]
 8012fc6:	ee30 0a21 	vadd.f32	s0, s0, s3
 8012fca:	ed87 6a00 	vstr	s12, [r7]
 8012fce:	ee74 2a62 	vsub.f32	s5, s8, s5
 8012fd2:	edc0 0a00 	vstr	s1, [r0]
 8012fd6:	ee33 3a28 	vadd.f32	s6, s6, s17
 8012fda:	edc0 3a01 	vstr	s7, [r0, #4]
 8012fde:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8012fe2:	ed0e 5a01 	vstr	s10, [lr, #-4]
 8012fe6:	edce 4a00 	vstr	s9, [lr]
 8012fea:	4418      	add	r0, r3
 8012fec:	ed06 0a01 	vstr	s0, [r6, #-4]
 8012ff0:	441f      	add	r7, r3
 8012ff2:	edc6 2a00 	vstr	s5, [r6]
 8012ff6:	449e      	add	lr, r3
 8012ff8:	ed85 3a00 	vstr	s6, [r5]
 8012ffc:	441e      	add	r6, r3
 8012ffe:	ed85 7a01 	vstr	s14, [r5, #4]
 8013002:	441d      	add	r5, r3
 8013004:	f63f aee8 	bhi.w	8012dd8 <arm_radix8_butterfly_f32+0x328>
 8013008:	9a06      	ldr	r2, [sp, #24]
 801300a:	9816      	ldr	r0, [sp, #88]	@ 0x58
 801300c:	3201      	adds	r2, #1
 801300e:	4611      	mov	r1, r2
 8013010:	9206      	str	r2, [sp, #24]
 8013012:	9a07      	ldr	r2, [sp, #28]
 8013014:	4402      	add	r2, r0
 8013016:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8013018:	9207      	str	r2, [sp, #28]
 801301a:	9a03      	ldr	r2, [sp, #12]
 801301c:	4402      	add	r2, r0
 801301e:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8013020:	9203      	str	r2, [sp, #12]
 8013022:	9a04      	ldr	r2, [sp, #16]
 8013024:	4402      	add	r2, r0
 8013026:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8013028:	9204      	str	r2, [sp, #16]
 801302a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801302c:	4491      	add	r9, r2
 801302e:	9a05      	ldr	r2, [sp, #20]
 8013030:	4402      	add	r2, r0
 8013032:	9205      	str	r2, [sp, #20]
 8013034:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8013036:	4490      	add	r8, r2
 8013038:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801303a:	3208      	adds	r2, #8
 801303c:	920f      	str	r2, [sp, #60]	@ 0x3c
 801303e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013040:	3208      	adds	r2, #8
 8013042:	920e      	str	r2, [sp, #56]	@ 0x38
 8013044:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013046:	3208      	adds	r2, #8
 8013048:	920d      	str	r2, [sp, #52]	@ 0x34
 801304a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801304c:	3208      	adds	r2, #8
 801304e:	920c      	str	r2, [sp, #48]	@ 0x30
 8013050:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013052:	3208      	adds	r2, #8
 8013054:	920b      	str	r2, [sp, #44]	@ 0x2c
 8013056:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013058:	3208      	adds	r2, #8
 801305a:	920a      	str	r2, [sp, #40]	@ 0x28
 801305c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801305e:	3208      	adds	r2, #8
 8013060:	9209      	str	r2, [sp, #36]	@ 0x24
 8013062:	9a08      	ldr	r2, [sp, #32]
 8013064:	3208      	adds	r2, #8
 8013066:	9208      	str	r2, [sp, #32]
 8013068:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801306a:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801306c:	4622      	mov	r2, r4
 801306e:	4288      	cmp	r0, r1
 8013070:	d005      	beq.n	801307e <arm_radix8_butterfly_f32+0x5ce>
 8013072:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8013074:	4621      	mov	r1, r4
 8013076:	4401      	add	r1, r0
 8013078:	9807      	ldr	r0, [sp, #28]
 801307a:	9110      	str	r1, [sp, #64]	@ 0x40
 801307c:	e676      	b.n	8012d6c <arm_radix8_butterfly_f32+0x2bc>
 801307e:	4683      	mov	fp, r0
 8013080:	f8bd e060 	ldrh.w	lr, [sp, #96]	@ 0x60
 8013084:	f8dd c06c 	ldr.w	ip, [sp, #108]	@ 0x6c
 8013088:	e522      	b.n	8012ad0 <arm_radix8_butterfly_f32+0x20>
 801308a:	b01d      	add	sp, #116	@ 0x74
 801308c:	ecbd 8b10 	vpop	{d8-d15}
 8013090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013094 <ai_buffer_get_size>:
 8013094:	b368      	cbz	r0, 80130f2 <ai_buffer_get_size+0x5e>
 8013096:	4b17      	ldr	r3, [pc, #92]	@ (80130f4 <ai_buffer_get_size+0x60>)
 8013098:	4a17      	ldr	r2, [pc, #92]	@ (80130f8 <ai_buffer_get_size+0x64>)
 801309a:	b410      	push	{r4}
 801309c:	6804      	ldr	r4, [r0, #0]
 801309e:	4023      	ands	r3, r4
 80130a0:	4293      	cmp	r3, r2
 80130a2:	d123      	bne.n	80130ec <ai_buffer_get_size+0x58>
 80130a4:	b311      	cbz	r1, 80130ec <ai_buffer_get_size+0x58>
 80130a6:	6984      	ldr	r4, [r0, #24]
 80130a8:	6862      	ldr	r2, [r4, #4]
 80130aa:	321f      	adds	r2, #31
 80130ac:	f022 021f 	bic.w	r2, r2, #31
 80130b0:	7d03      	ldrb	r3, [r0, #20]
 80130b2:	6941      	ldr	r1, [r0, #20]
 80130b4:	f1a3 0301 	sub.w	r3, r3, #1
 80130b8:	f3c1 2017 	ubfx	r0, r1, #8, #24
 80130bc:	fab3 f383 	clz	r3, r3
 80130c0:	095b      	lsrs	r3, r3, #5
 80130c2:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 80130c6:	da0c      	bge.n	80130e2 <ai_buffer_get_size+0x4e>
 80130c8:	2b01      	cmp	r3, #1
 80130ca:	d103      	bne.n	80130d4 <ai_buffer_get_size+0x40>
 80130cc:	2802      	cmp	r0, #2
 80130ce:	f04f 0302 	mov.w	r3, #2
 80130d2:	d006      	beq.n	80130e2 <ai_buffer_get_size+0x4e>
 80130d4:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 80130d8:	3301      	adds	r3, #1
 80130da:	4298      	cmp	r0, r3
 80130dc:	fb01 f202 	mul.w	r2, r1, r2
 80130e0:	d1f2      	bne.n	80130c8 <ai_buffer_get_size+0x34>
 80130e2:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 80130e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80130ea:	4770      	bx	lr
 80130ec:	6984      	ldr	r4, [r0, #24]
 80130ee:	6862      	ldr	r2, [r4, #4]
 80130f0:	e7de      	b.n	80130b0 <ai_buffer_get_size+0x1c>
 80130f2:	4770      	bx	lr
 80130f4:	017fffff 	.word	0x017fffff
 80130f8:	000400c0 	.word	0x000400c0

080130fc <ai_buffer_array_sane>:
 80130fc:	b138      	cbz	r0, 801310e <ai_buffer_array_sane+0x12>
 80130fe:	6843      	ldr	r3, [r0, #4]
 8013100:	b123      	cbz	r3, 801310c <ai_buffer_array_sane+0x10>
 8013102:	8840      	ldrh	r0, [r0, #2]
 8013104:	3800      	subs	r0, #0
 8013106:	bf18      	it	ne
 8013108:	2001      	movne	r0, #1
 801310a:	4770      	bx	lr
 801310c:	4618      	mov	r0, r3
 801310e:	4770      	bx	lr

08013110 <ai_buffer_array_item_set_address>:
 8013110:	b150      	cbz	r0, 8013128 <ai_buffer_array_item_set_address+0x18>
 8013112:	6843      	ldr	r3, [r0, #4]
 8013114:	b14b      	cbz	r3, 801312a <ai_buffer_array_item_set_address+0x1a>
 8013116:	8840      	ldrh	r0, [r0, #2]
 8013118:	b900      	cbnz	r0, 801311c <ai_buffer_array_item_set_address+0xc>
 801311a:	4770      	bx	lr
 801311c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8013120:	2001      	movs	r0, #1
 8013122:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8013126:	605a      	str	r2, [r3, #4]
 8013128:	4770      	bx	lr
 801312a:	4618      	mov	r0, r3
 801312c:	4770      	bx	lr
 801312e:	bf00      	nop

08013130 <ai_platform_get_weights_map>:
 8013130:	2900      	cmp	r1, #0
 8013132:	bf18      	it	ne
 8013134:	2800      	cmpne	r0, #0
 8013136:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013138:	bf0c      	ite	eq
 801313a:	2401      	moveq	r4, #1
 801313c:	2400      	movne	r4, #0
 801313e:	2a00      	cmp	r2, #0
 8013140:	bf08      	it	eq
 8013142:	f044 0401 	orreq.w	r4, r4, #1
 8013146:	b114      	cbz	r4, 801314e <ai_platform_get_weights_map+0x1e>
 8013148:	2400      	movs	r4, #0
 801314a:	4620      	mov	r0, r4
 801314c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801314e:	4616      	mov	r6, r2
 8013150:	4b22      	ldr	r3, [pc, #136]	@ (80131dc <ai_platform_get_weights_map+0xac>)
 8013152:	6812      	ldr	r2, [r2, #0]
 8013154:	4605      	mov	r5, r0
 8013156:	460f      	mov	r7, r1
 8013158:	429a      	cmp	r2, r3
 801315a:	d022      	beq.n	80131a2 <ai_platform_get_weights_map+0x72>
 801315c:	6870      	ldr	r0, [r6, #4]
 801315e:	2800      	cmp	r0, #0
 8013160:	d0f2      	beq.n	8013148 <ai_platform_get_weights_map+0x18>
 8013162:	6806      	ldr	r6, [r0, #0]
 8013164:	429e      	cmp	r6, r3
 8013166:	d006      	beq.n	8013176 <ai_platform_get_weights_map+0x46>
 8013168:	f1a1 0401 	sub.w	r4, r1, #1
 801316c:	6028      	str	r0, [r5, #0]
 801316e:	fab4 f484 	clz	r4, r4
 8013172:	0964      	lsrs	r4, r4, #5
 8013174:	e7e9      	b.n	801314a <ai_platform_get_weights_map+0x1a>
 8013176:	3d04      	subs	r5, #4
 8013178:	4602      	mov	r2, r0
 801317a:	4621      	mov	r1, r4
 801317c:	e000      	b.n	8013180 <ai_platform_get_weights_map+0x50>
 801317e:	4619      	mov	r1, r3
 8013180:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8013184:	42b3      	cmp	r3, r6
 8013186:	d025      	beq.n	80131d4 <ai_platform_get_weights_map+0xa4>
 8013188:	f845 3f04 	str.w	r3, [r5, #4]!
 801318c:	1c4b      	adds	r3, r1, #1
 801318e:	429f      	cmp	r7, r3
 8013190:	d8f5      	bhi.n	801317e <ai_platform_get_weights_map+0x4e>
 8013192:	d1da      	bne.n	801314a <ai_platform_get_weights_map+0x1a>
 8013194:	3102      	adds	r1, #2
 8013196:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 801319a:	42b3      	cmp	r3, r6
 801319c:	d1d5      	bne.n	801314a <ai_platform_get_weights_map+0x1a>
 801319e:	2401      	movs	r4, #1
 80131a0:	e7d3      	b.n	801314a <ai_platform_get_weights_map+0x1a>
 80131a2:	1d30      	adds	r0, r6, #4
 80131a4:	f7ff ffaa 	bl	80130fc <ai_buffer_array_sane>
 80131a8:	2800      	cmp	r0, #0
 80131aa:	d0cd      	beq.n	8013148 <ai_platform_get_weights_map+0x18>
 80131ac:	88f3      	ldrh	r3, [r6, #6]
 80131ae:	429f      	cmp	r7, r3
 80131b0:	d1ca      	bne.n	8013148 <ai_platform_get_weights_map+0x18>
 80131b2:	3d04      	subs	r5, #4
 80131b4:	4622      	mov	r2, r4
 80131b6:	68b3      	ldr	r3, [r6, #8]
 80131b8:	4423      	add	r3, r4
 80131ba:	341c      	adds	r4, #28
 80131bc:	685b      	ldr	r3, [r3, #4]
 80131be:	b123      	cbz	r3, 80131ca <ai_platform_get_weights_map+0x9a>
 80131c0:	3201      	adds	r2, #1
 80131c2:	f845 3f04 	str.w	r3, [r5, #4]!
 80131c6:	4297      	cmp	r7, r2
 80131c8:	d8f5      	bhi.n	80131b6 <ai_platform_get_weights_map+0x86>
 80131ca:	1abc      	subs	r4, r7, r2
 80131cc:	fab4 f484 	clz	r4, r4
 80131d0:	0964      	lsrs	r4, r4, #5
 80131d2:	e7ba      	b.n	801314a <ai_platform_get_weights_map+0x1a>
 80131d4:	428f      	cmp	r7, r1
 80131d6:	d1b8      	bne.n	801314a <ai_platform_get_weights_map+0x1a>
 80131d8:	e7e1      	b.n	801319e <ai_platform_get_weights_map+0x6e>
 80131da:	bf00      	nop
 80131dc:	a1facade 	.word	0xa1facade

080131e0 <ai_platform_get_activations_map>:
 80131e0:	2900      	cmp	r1, #0
 80131e2:	bf18      	it	ne
 80131e4:	2800      	cmpne	r0, #0
 80131e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80131e8:	bf0c      	ite	eq
 80131ea:	2401      	moveq	r4, #1
 80131ec:	2400      	movne	r4, #0
 80131ee:	2a00      	cmp	r2, #0
 80131f0:	bf08      	it	eq
 80131f2:	f044 0401 	orreq.w	r4, r4, #1
 80131f6:	b114      	cbz	r4, 80131fe <ai_platform_get_activations_map+0x1e>
 80131f8:	2400      	movs	r4, #0
 80131fa:	4620      	mov	r0, r4
 80131fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80131fe:	4616      	mov	r6, r2
 8013200:	4b22      	ldr	r3, [pc, #136]	@ (801328c <ai_platform_get_activations_map+0xac>)
 8013202:	6812      	ldr	r2, [r2, #0]
 8013204:	4605      	mov	r5, r0
 8013206:	460f      	mov	r7, r1
 8013208:	429a      	cmp	r2, r3
 801320a:	d022      	beq.n	8013252 <ai_platform_get_activations_map+0x72>
 801320c:	6a30      	ldr	r0, [r6, #32]
 801320e:	2800      	cmp	r0, #0
 8013210:	d0f2      	beq.n	80131f8 <ai_platform_get_activations_map+0x18>
 8013212:	6806      	ldr	r6, [r0, #0]
 8013214:	429e      	cmp	r6, r3
 8013216:	d006      	beq.n	8013226 <ai_platform_get_activations_map+0x46>
 8013218:	f1a1 0401 	sub.w	r4, r1, #1
 801321c:	6028      	str	r0, [r5, #0]
 801321e:	fab4 f484 	clz	r4, r4
 8013222:	0964      	lsrs	r4, r4, #5
 8013224:	e7e9      	b.n	80131fa <ai_platform_get_activations_map+0x1a>
 8013226:	3d04      	subs	r5, #4
 8013228:	4602      	mov	r2, r0
 801322a:	4621      	mov	r1, r4
 801322c:	e000      	b.n	8013230 <ai_platform_get_activations_map+0x50>
 801322e:	4619      	mov	r1, r3
 8013230:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8013234:	42b3      	cmp	r3, r6
 8013236:	d026      	beq.n	8013286 <ai_platform_get_activations_map+0xa6>
 8013238:	f845 3f04 	str.w	r3, [r5, #4]!
 801323c:	1c4b      	adds	r3, r1, #1
 801323e:	429f      	cmp	r7, r3
 8013240:	d8f5      	bhi.n	801322e <ai_platform_get_activations_map+0x4e>
 8013242:	d1da      	bne.n	80131fa <ai_platform_get_activations_map+0x1a>
 8013244:	3102      	adds	r1, #2
 8013246:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 801324a:	42b3      	cmp	r3, r6
 801324c:	d1d5      	bne.n	80131fa <ai_platform_get_activations_map+0x1a>
 801324e:	2401      	movs	r4, #1
 8013250:	e7d3      	b.n	80131fa <ai_platform_get_activations_map+0x1a>
 8013252:	f106 000c 	add.w	r0, r6, #12
 8013256:	f7ff ff51 	bl	80130fc <ai_buffer_array_sane>
 801325a:	2800      	cmp	r0, #0
 801325c:	d0cc      	beq.n	80131f8 <ai_platform_get_activations_map+0x18>
 801325e:	89f3      	ldrh	r3, [r6, #14]
 8013260:	429f      	cmp	r7, r3
 8013262:	d1c9      	bne.n	80131f8 <ai_platform_get_activations_map+0x18>
 8013264:	3d04      	subs	r5, #4
 8013266:	4622      	mov	r2, r4
 8013268:	6933      	ldr	r3, [r6, #16]
 801326a:	4423      	add	r3, r4
 801326c:	341c      	adds	r4, #28
 801326e:	685b      	ldr	r3, [r3, #4]
 8013270:	b123      	cbz	r3, 801327c <ai_platform_get_activations_map+0x9c>
 8013272:	3201      	adds	r2, #1
 8013274:	f845 3f04 	str.w	r3, [r5, #4]!
 8013278:	4297      	cmp	r7, r2
 801327a:	d8f5      	bhi.n	8013268 <ai_platform_get_activations_map+0x88>
 801327c:	1abc      	subs	r4, r7, r2
 801327e:	fab4 f484 	clz	r4, r4
 8013282:	0964      	lsrs	r4, r4, #5
 8013284:	e7b9      	b.n	80131fa <ai_platform_get_activations_map+0x1a>
 8013286:	428f      	cmp	r7, r1
 8013288:	d1b7      	bne.n	80131fa <ai_platform_get_activations_map+0x1a>
 801328a:	e7e0      	b.n	801324e <ai_platform_get_activations_map+0x6e>
 801328c:	a1facade 	.word	0xa1facade

08013290 <ai_platform_bind_network_params>:
 8013290:	2a00      	cmp	r2, #0
 8013292:	bf18      	it	ne
 8013294:	2900      	cmpne	r1, #0
 8013296:	d010      	beq.n	80132ba <ai_platform_bind_network_params+0x2a>
 8013298:	b178      	cbz	r0, 80132ba <ai_platform_bind_network_params+0x2a>
 801329a:	4603      	mov	r3, r0
 801329c:	4808      	ldr	r0, [pc, #32]	@ (80132c0 <ai_platform_bind_network_params+0x30>)
 801329e:	f103 0c0c 	add.w	ip, r3, #12
 80132a2:	f843 0b04 	str.w	r0, [r3], #4
 80132a6:	c903      	ldmia	r1, {r0, r1}
 80132a8:	e883 0003 	stmia.w	r3, {r0, r1}
 80132ac:	2301      	movs	r3, #1
 80132ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 80132b2:	e88c 0003 	stmia.w	ip, {r0, r1}
 80132b6:	4618      	mov	r0, r3
 80132b8:	4770      	bx	lr
 80132ba:	2300      	movs	r3, #0
 80132bc:	4618      	mov	r0, r3
 80132be:	4770      	bx	lr
 80132c0:	a1facade 	.word	0xa1facade

080132c4 <ai_platform_network_get_error>:
 80132c4:	4b04      	ldr	r3, [pc, #16]	@ (80132d8 <ai_platform_network_get_error+0x14>)
 80132c6:	6802      	ldr	r2, [r0, #0]
 80132c8:	4393      	bics	r3, r2
 80132ca:	d102      	bne.n	80132d2 <ai_platform_network_get_error+0xe>
 80132cc:	300c      	adds	r0, #12
 80132ce:	f000 bc73 	b.w	8013bb8 <core_get_error>
 80132d2:	f241 0010 	movw	r0, #4112	@ 0x1010
 80132d6:	4770      	bx	lr
 80132d8:	a1c00100 	.word	0xa1c00100

080132dc <ai_platform_network_set_error>:
 80132dc:	b110      	cbz	r0, 80132e4 <ai_platform_network_set_error+0x8>
 80132de:	300c      	adds	r0, #12
 80132e0:	f000 bc70 	b.w	8013bc4 <core_set_error>
 80132e4:	4770      	bx	lr
 80132e6:	bf00      	nop

080132e8 <ai_platform_inputs_get>:
 80132e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132ec:	4b39      	ldr	r3, [pc, #228]	@ (80133d4 <ai_platform_inputs_get+0xec>)
 80132ee:	b085      	sub	sp, #20
 80132f0:	6802      	ldr	r2, [r0, #0]
 80132f2:	4393      	bics	r3, r2
 80132f4:	e9cd 1002 	strd	r1, r0, [sp, #8]
 80132f8:	d162      	bne.n	80133c0 <ai_platform_inputs_get+0xd8>
 80132fa:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	d051      	beq.n	80133a4 <ai_platform_inputs_get+0xbc>
 8013300:	f8d0 a034 	ldr.w	sl, [r0, #52]	@ 0x34
 8013304:	f1ba 0f00 	cmp.w	sl, #0
 8013308:	d04c      	beq.n	80133a4 <ai_platform_inputs_get+0xbc>
 801330a:	f04f 0900 	mov.w	r9, #0
 801330e:	464d      	mov	r5, r9
 8013310:	e016      	b.n	8013340 <ai_platform_inputs_get+0x58>
 8013312:	9901      	ldr	r1, [sp, #4]
 8013314:	2301      	movs	r3, #1
 8013316:	f848 3001 	str.w	r3, [r8, r1]
 801331a:	69b1      	ldr	r1, [r6, #24]
 801331c:	f04f 0301 	mov.w	r3, #1
 8013320:	684e      	ldr	r6, [r1, #4]
 8013322:	3501      	adds	r5, #1
 8013324:	f109 091c 	add.w	r9, r9, #28
 8013328:	7523      	strb	r3, [r4, #20]
 801332a:	2300      	movs	r3, #0
 801332c:	6961      	ldr	r1, [r4, #20]
 801332e:	6020      	str	r0, [r4, #0]
 8013330:	f36b 211f 	bfi	r1, fp, #8, #24
 8013334:	e9c4 c701 	strd	ip, r7, [r4, #4]
 8013338:	e9c4 3603 	strd	r3, r6, [r4, #12]
 801333c:	e9c4 1205 	strd	r1, r2, [r4, #20]
 8013340:	f8ba 3000 	ldrh.w	r3, [sl]
 8013344:	b2ac      	uxth	r4, r5
 8013346:	42ab      	cmp	r3, r5
 8013348:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 801334c:	9301      	str	r3, [sp, #4]
 801334e:	d93b      	bls.n	80133c8 <ai_platform_inputs_get+0xe0>
 8013350:	f8da 3004 	ldr.w	r3, [sl, #4]
 8013354:	2b00      	cmp	r3, #0
 8013356:	d037      	beq.n	80133c8 <ai_platform_inputs_get+0xe0>
 8013358:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 801335c:	2e00      	cmp	r6, #0
 801335e:	d033      	beq.n	80133c8 <ai_platform_inputs_get+0xe0>
 8013360:	f8da 3008 	ldr.w	r3, [sl, #8]
 8013364:	69b2      	ldr	r2, [r6, #24]
 8013366:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 801336a:	6810      	ldr	r0, [r2, #0]
 801336c:	68b3      	ldr	r3, [r6, #8]
 801336e:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 8013372:	68f2      	ldr	r2, [r6, #12]
 8013374:	444c      	add	r4, r9
 8013376:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 801337a:	9200      	str	r2, [sp, #0]
 801337c:	f003 f814 	bl	80163a8 <ai_array_to_buffer_fmt>
 8013380:	69b1      	ldr	r1, [r6, #24]
 8013382:	9a00      	ldr	r2, [sp, #0]
 8013384:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8013388:	2f00      	cmp	r7, #0
 801338a:	d0c7      	beq.n	801331c <ai_platform_inputs_get+0x34>
 801338c:	2100      	movs	r1, #0
 801338e:	f848 1035 	str.w	r1, [r8, r5, lsl #3]
 8013392:	6831      	ldr	r1, [r6, #0]
 8013394:	6079      	str	r1, [r7, #4]
 8013396:	b111      	cbz	r1, 801339e <ai_platform_inputs_get+0xb6>
 8013398:	8849      	ldrh	r1, [r1, #2]
 801339a:	2900      	cmp	r1, #0
 801339c:	d1b9      	bne.n	8013312 <ai_platform_inputs_get+0x2a>
 801339e:	69b1      	ldr	r1, [r6, #24]
 80133a0:	2700      	movs	r7, #0
 80133a2:	e7bb      	b.n	801331c <ai_platform_inputs_get+0x34>
 80133a4:	9803      	ldr	r0, [sp, #12]
 80133a6:	2400      	movs	r4, #0
 80133a8:	2218      	movs	r2, #24
 80133aa:	2111      	movs	r1, #17
 80133ac:	300c      	adds	r0, #12
 80133ae:	f000 fc09 	bl	8013bc4 <core_set_error>
 80133b2:	4620      	mov	r0, r4
 80133b4:	9b02      	ldr	r3, [sp, #8]
 80133b6:	b103      	cbz	r3, 80133ba <ai_platform_inputs_get+0xd2>
 80133b8:	801c      	strh	r4, [r3, #0]
 80133ba:	b005      	add	sp, #20
 80133bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80133c0:	2000      	movs	r0, #0
 80133c2:	b005      	add	sp, #20
 80133c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80133c8:	2c00      	cmp	r4, #0
 80133ca:	d0eb      	beq.n	80133a4 <ai_platform_inputs_get+0xbc>
 80133cc:	f8da 3008 	ldr.w	r3, [sl, #8]
 80133d0:	6858      	ldr	r0, [r3, #4]
 80133d2:	e7ef      	b.n	80133b4 <ai_platform_inputs_get+0xcc>
 80133d4:	a1c00100 	.word	0xa1c00100

080133d8 <ai_platform_outputs_get>:
 80133d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133dc:	4b38      	ldr	r3, [pc, #224]	@ (80134c0 <ai_platform_outputs_get+0xe8>)
 80133de:	b085      	sub	sp, #20
 80133e0:	6802      	ldr	r2, [r0, #0]
 80133e2:	4393      	bics	r3, r2
 80133e4:	e9cd 1002 	strd	r1, r0, [sp, #8]
 80133e8:	d15f      	bne.n	80134aa <ai_platform_outputs_get+0xd2>
 80133ea:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 80133ec:	2b01      	cmp	r3, #1
 80133ee:	d94e      	bls.n	801348e <ai_platform_outputs_get+0xb6>
 80133f0:	f04f 0900 	mov.w	r9, #0
 80133f4:	f8d0 a034 	ldr.w	sl, [r0, #52]	@ 0x34
 80133f8:	464d      	mov	r5, r9
 80133fa:	e016      	b.n	801342a <ai_platform_outputs_get+0x52>
 80133fc:	9901      	ldr	r1, [sp, #4]
 80133fe:	2301      	movs	r3, #1
 8013400:	f848 3001 	str.w	r3, [r8, r1]
 8013404:	69b1      	ldr	r1, [r6, #24]
 8013406:	f04f 0301 	mov.w	r3, #1
 801340a:	684e      	ldr	r6, [r1, #4]
 801340c:	3501      	adds	r5, #1
 801340e:	f109 091c 	add.w	r9, r9, #28
 8013412:	7523      	strb	r3, [r4, #20]
 8013414:	2300      	movs	r3, #0
 8013416:	6961      	ldr	r1, [r4, #20]
 8013418:	6020      	str	r0, [r4, #0]
 801341a:	f36b 211f 	bfi	r1, fp, #8, #24
 801341e:	e9c4 c701 	strd	ip, r7, [r4, #4]
 8013422:	e9c4 3603 	strd	r3, r6, [r4, #12]
 8013426:	e9c4 1205 	strd	r1, r2, [r4, #20]
 801342a:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 801342e:	b2ac      	uxth	r4, r5
 8013430:	42ab      	cmp	r3, r5
 8013432:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 8013436:	9301      	str	r3, [sp, #4]
 8013438:	d93b      	bls.n	80134b2 <ai_platform_outputs_get+0xda>
 801343a:	f8da 3010 	ldr.w	r3, [sl, #16]
 801343e:	2b00      	cmp	r3, #0
 8013440:	d037      	beq.n	80134b2 <ai_platform_outputs_get+0xda>
 8013442:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8013446:	2e00      	cmp	r6, #0
 8013448:	d033      	beq.n	80134b2 <ai_platform_outputs_get+0xda>
 801344a:	f8da 3014 	ldr.w	r3, [sl, #20]
 801344e:	69b2      	ldr	r2, [r6, #24]
 8013450:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 8013454:	6810      	ldr	r0, [r2, #0]
 8013456:	68b3      	ldr	r3, [r6, #8]
 8013458:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 801345c:	68f2      	ldr	r2, [r6, #12]
 801345e:	444c      	add	r4, r9
 8013460:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 8013464:	9200      	str	r2, [sp, #0]
 8013466:	f002 ff9f 	bl	80163a8 <ai_array_to_buffer_fmt>
 801346a:	69b1      	ldr	r1, [r6, #24]
 801346c:	9a00      	ldr	r2, [sp, #0]
 801346e:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8013472:	2f00      	cmp	r7, #0
 8013474:	d0c7      	beq.n	8013406 <ai_platform_outputs_get+0x2e>
 8013476:	2100      	movs	r1, #0
 8013478:	f848 1035 	str.w	r1, [r8, r5, lsl #3]
 801347c:	6831      	ldr	r1, [r6, #0]
 801347e:	6079      	str	r1, [r7, #4]
 8013480:	b111      	cbz	r1, 8013488 <ai_platform_outputs_get+0xb0>
 8013482:	8849      	ldrh	r1, [r1, #2]
 8013484:	2900      	cmp	r1, #0
 8013486:	d1b9      	bne.n	80133fc <ai_platform_outputs_get+0x24>
 8013488:	69b1      	ldr	r1, [r6, #24]
 801348a:	2700      	movs	r7, #0
 801348c:	e7bb      	b.n	8013406 <ai_platform_outputs_get+0x2e>
 801348e:	9803      	ldr	r0, [sp, #12]
 8013490:	2400      	movs	r4, #0
 8013492:	2218      	movs	r2, #24
 8013494:	2111      	movs	r1, #17
 8013496:	300c      	adds	r0, #12
 8013498:	f000 fb94 	bl	8013bc4 <core_set_error>
 801349c:	4620      	mov	r0, r4
 801349e:	9b02      	ldr	r3, [sp, #8]
 80134a0:	b103      	cbz	r3, 80134a4 <ai_platform_outputs_get+0xcc>
 80134a2:	801c      	strh	r4, [r3, #0]
 80134a4:	b005      	add	sp, #20
 80134a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80134aa:	2000      	movs	r0, #0
 80134ac:	b005      	add	sp, #20
 80134ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80134b2:	2c00      	cmp	r4, #0
 80134b4:	d0eb      	beq.n	801348e <ai_platform_outputs_get+0xb6>
 80134b6:	f8da 3014 	ldr.w	r3, [sl, #20]
 80134ba:	6858      	ldr	r0, [r3, #4]
 80134bc:	e7ef      	b.n	801349e <ai_platform_outputs_get+0xc6>
 80134be:	bf00      	nop
 80134c0:	a1c00100 	.word	0xa1c00100

080134c4 <ai_platform_network_create>:
 80134c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80134c8:	b083      	sub	sp, #12
 80134ca:	f89d 8028 	ldrb.w	r8, [sp, #40]	@ 0x28
 80134ce:	f89d 902c 	ldrb.w	r9, [sp, #44]	@ 0x2c
 80134d2:	b320      	cbz	r0, 801351e <ai_platform_network_create+0x5a>
 80134d4:	6002      	str	r2, [r0, #0]
 80134d6:	4616      	mov	r6, r2
 80134d8:	461f      	mov	r7, r3
 80134da:	4604      	mov	r4, r0
 80134dc:	f000 fb6a 	bl	8013bb4 <core_init>
 80134e0:	b970      	cbnz	r0, 8013500 <ai_platform_network_create+0x3c>
 80134e2:	2530      	movs	r5, #48	@ 0x30
 80134e4:	2300      	movs	r3, #0
 80134e6:	6023      	str	r3, [r4, #0]
 80134e8:	2410      	movs	r4, #16
 80134ea:	464a      	mov	r2, r9
 80134ec:	4641      	mov	r1, r8
 80134ee:	4638      	mov	r0, r7
 80134f0:	f003 f804 	bl	80164fc <ai_version_get>
 80134f4:	60b0      	str	r0, [r6, #8]
 80134f6:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 80134fa:	b003      	add	sp, #12
 80134fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013500:	2200      	movs	r2, #0
 8013502:	4641      	mov	r1, r8
 8013504:	4638      	mov	r0, r7
 8013506:	f002 fff9 	bl	80164fc <ai_version_get>
 801350a:	4605      	mov	r5, r0
 801350c:	2200      	movs	r2, #0
 801350e:	2105      	movs	r1, #5
 8013510:	2001      	movs	r0, #1
 8013512:	f002 fff3 	bl	80164fc <ai_version_get>
 8013516:	4285      	cmp	r5, r0
 8013518:	d008      	beq.n	801352c <ai_platform_network_create+0x68>
 801351a:	2501      	movs	r5, #1
 801351c:	e7e2      	b.n	80134e4 <ai_platform_network_create+0x20>
 801351e:	2510      	movs	r5, #16
 8013520:	462c      	mov	r4, r5
 8013522:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 8013526:	b003      	add	sp, #12
 8013528:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801352c:	4b05      	ldr	r3, [pc, #20]	@ (8013544 <ai_platform_network_create+0x80>)
 801352e:	a801      	add	r0, sp, #4
 8013530:	9301      	str	r3, [sp, #4]
 8013532:	f000 fb53 	bl	8013bdc <ai_check_custom_types>
 8013536:	b110      	cbz	r0, 801353e <ai_platform_network_create+0x7a>
 8013538:	2400      	movs	r4, #0
 801353a:	4625      	mov	r5, r4
 801353c:	e7d5      	b.n	80134ea <ai_platform_network_create+0x26>
 801353e:	2502      	movs	r5, #2
 8013540:	e7d0      	b.n	80134e4 <ai_platform_network_create+0x20>
 8013542:	bf00      	nop
 8013544:	84048403 	.word	0x84048403

08013548 <ai_platform_network_init>:
 8013548:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801354c:	4a5c      	ldr	r2, [pc, #368]	@ (80136c0 <ai_platform_network_init+0x178>)
 801354e:	460c      	mov	r4, r1
 8013550:	6801      	ldr	r1, [r0, #0]
 8013552:	438a      	bics	r2, r1
 8013554:	d133      	bne.n	80135be <ai_platform_network_init+0x76>
 8013556:	4605      	mov	r5, r0
 8013558:	2c00      	cmp	r4, #0
 801355a:	f000 8093 	beq.w	8013684 <ai_platform_network_init+0x13c>
 801355e:	f8d4 b000 	ldr.w	fp, [r4]
 8013562:	4a58      	ldr	r2, [pc, #352]	@ (80136c4 <ai_platform_network_init+0x17c>)
 8013564:	4593      	cmp	fp, r2
 8013566:	d10f      	bne.n	8013588 <ai_platform_network_init+0x40>
 8013568:	e9d4 e803 	ldrd	lr, r8, [r4, #12]
 801356c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8013570:	4b53      	ldr	r3, [pc, #332]	@ (80136c0 <ai_platform_network_init+0x178>)
 8013572:	ea4f 4a1e 	mov.w	sl, lr, lsr #16
 8013576:	0c32      	lsrs	r2, r6, #16
 8013578:	4299      	cmp	r1, r3
 801357a:	d02c      	beq.n	80135d6 <ai_platform_network_init+0x8e>
 801357c:	2303      	movs	r3, #3
 801357e:	462c      	mov	r4, r5
 8013580:	612b      	str	r3, [r5, #16]
 8013582:	4620      	mov	r0, r4
 8013584:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013588:	4627      	mov	r7, r4
 801358a:	2101      	movs	r1, #1
 801358c:	6864      	ldr	r4, [r4, #4]
 801358e:	4638      	mov	r0, r7
 8013590:	f107 081c 	add.w	r8, r7, #28
 8013594:	f7ff fd7e 	bl	8013094 <ai_buffer_get_size>
 8013598:	4606      	mov	r6, r0
 801359a:	2101      	movs	r1, #1
 801359c:	4640      	mov	r0, r8
 801359e:	f8d7 9020 	ldr.w	r9, [r7, #32]
 80135a2:	f7ff fd77 	bl	8013094 <ai_buffer_get_size>
 80135a6:	b976      	cbnz	r6, 80135c6 <ai_platform_network_init+0x7e>
 80135a8:	2800      	cmp	r0, #0
 80135aa:	d150      	bne.n	801364e <ai_platform_network_init+0x106>
 80135ac:	4680      	mov	r8, r0
 80135ae:	4686      	mov	lr, r0
 80135b0:	4606      	mov	r6, r0
 80135b2:	4607      	mov	r7, r0
 80135b4:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
 80135b8:	6829      	ldr	r1, [r5, #0]
 80135ba:	0436      	lsls	r6, r6, #16
 80135bc:	e7d8      	b.n	8013570 <ai_platform_network_init+0x28>
 80135be:	2400      	movs	r4, #0
 80135c0:	4620      	mov	r0, r4
 80135c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135c6:	2800      	cmp	r0, #0
 80135c8:	d13b      	bne.n	8013642 <ai_platform_network_init+0xfa>
 80135ca:	4680      	mov	r8, r0
 80135cc:	4686      	mov	lr, r0
 80135ce:	2c00      	cmp	r4, #0
 80135d0:	d05e      	beq.n	8013690 <ai_platform_network_init+0x148>
 80135d2:	2601      	movs	r6, #1
 80135d4:	e7ee      	b.n	80135b4 <ai_platform_network_init+0x6c>
 80135d6:	8c6b      	ldrh	r3, [r5, #34]	@ 0x22
 80135d8:	4293      	cmp	r3, r2
 80135da:	4b3a      	ldr	r3, [pc, #232]	@ (80136c4 <ai_platform_network_init+0x17c>)
 80135dc:	d33e      	bcc.n	801365c <ai_platform_network_init+0x114>
 80135de:	459b      	cmp	fp, r3
 80135e0:	d03e      	beq.n	8013660 <ai_platform_network_init+0x118>
 80135e2:	b1a2      	cbz	r2, 801360e <ai_platform_network_init+0xc6>
 80135e4:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80135e8:	f04f 0c00 	mov.w	ip, #0
 80135ec:	ea4f 0982 	mov.w	r9, r2, lsl #2
 80135f0:	6a6c      	ldr	r4, [r5, #36]	@ 0x24
 80135f2:	eb07 0b0c 	add.w	fp, r7, ip
 80135f6:	4464      	add	r4, ip
 80135f8:	f10c 0c1c 	add.w	ip, ip, #28
 80135fc:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 8013600:	45cc      	cmp	ip, r9
 8013602:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013604:	e89b 0007 	ldmia.w	fp, {r0, r1, r2}
 8013608:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801360c:	d1f0      	bne.n	80135f0 <ai_platform_network_init+0xa8>
 801360e:	8d6b      	ldrh	r3, [r5, #42]	@ 0x2a
 8013610:	622e      	str	r6, [r5, #32]
 8013612:	4553      	cmp	r3, sl
 8013614:	d34b      	bcc.n	80136ae <ai_platform_network_init+0x166>
 8013616:	f1ba 0f00 	cmp.w	sl, #0
 801361a:	d025      	beq.n	8013668 <ai_platform_network_init+0x120>
 801361c:	ebca 0aca 	rsb	sl, sl, sl, lsl #3
 8013620:	2700      	movs	r7, #0
 8013622:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8013626:	6aec      	ldr	r4, [r5, #44]	@ 0x2c
 8013628:	eb08 0607 	add.w	r6, r8, r7
 801362c:	443c      	add	r4, r7
 801362e:	371c      	adds	r7, #28
 8013630:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8013632:	4557      	cmp	r7, sl
 8013634:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013636:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 801363a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801363e:	d1f2      	bne.n	8013626 <ai_platform_network_init+0xde>
 8013640:	e012      	b.n	8013668 <ai_platform_network_init+0x120>
 8013642:	f1b9 0f00 	cmp.w	r9, #0
 8013646:	d015      	beq.n	8013674 <ai_platform_network_init+0x12c>
 8013648:	f04f 0e01 	mov.w	lr, #1
 801364c:	e7bf      	b.n	80135ce <ai_platform_network_init+0x86>
 801364e:	f1b9 0f00 	cmp.w	r9, #0
 8013652:	d00f      	beq.n	8013674 <ai_platform_network_init+0x12c>
 8013654:	f04f 0e01 	mov.w	lr, #1
 8013658:	4637      	mov	r7, r6
 801365a:	e7ab      	b.n	80135b4 <ai_platform_network_init+0x6c>
 801365c:	459b      	cmp	fp, r3
 801365e:	d11e      	bne.n	801369e <ai_platform_network_init+0x156>
 8013660:	f8c5 802c 	str.w	r8, [r5, #44]	@ 0x2c
 8013664:	e9c5 6708 	strd	r6, r7, [r5, #32]
 8013668:	4628      	mov	r0, r5
 801366a:	f8c5 e028 	str.w	lr, [r5, #40]	@ 0x28
 801366e:	f000 fadd 	bl	8013c2c <ai_layers_init_all>
 8013672:	e783      	b.n	801357c <ai_platform_network_init+0x34>
 8013674:	2213      	movs	r2, #19
 8013676:	2110      	movs	r1, #16
 8013678:	f105 000c 	add.w	r0, r5, #12
 801367c:	2400      	movs	r4, #0
 801367e:	f000 faa1 	bl	8013bc4 <core_set_error>
 8013682:	e77e      	b.n	8013582 <ai_platform_network_init+0x3a>
 8013684:	2211      	movs	r2, #17
 8013686:	2110      	movs	r1, #16
 8013688:	300c      	adds	r0, #12
 801368a:	f000 fa9b 	bl	8013bc4 <core_set_error>
 801368e:	e778      	b.n	8013582 <ai_platform_network_init+0x3a>
 8013690:	2212      	movs	r2, #18
 8013692:	2110      	movs	r1, #16
 8013694:	f105 000c 	add.w	r0, r5, #12
 8013698:	f000 fa94 	bl	8013bc4 <core_set_error>
 801369c:	e771      	b.n	8013582 <ai_platform_network_init+0x3a>
 801369e:	2212      	movs	r2, #18
 80136a0:	2116      	movs	r1, #22
 80136a2:	f105 000c 	add.w	r0, r5, #12
 80136a6:	2400      	movs	r4, #0
 80136a8:	f000 fa8c 	bl	8013bc4 <core_set_error>
 80136ac:	e769      	b.n	8013582 <ai_platform_network_init+0x3a>
 80136ae:	2213      	movs	r2, #19
 80136b0:	2116      	movs	r1, #22
 80136b2:	f105 000c 	add.w	r0, r5, #12
 80136b6:	2400      	movs	r4, #0
 80136b8:	f000 fa84 	bl	8013bc4 <core_set_error>
 80136bc:	e761      	b.n	8013582 <ai_platform_network_init+0x3a>
 80136be:	bf00      	nop
 80136c0:	a1c00100 	.word	0xa1c00100
 80136c4:	a1facade 	.word	0xa1facade

080136c8 <ai_platform_network_post_init>:
 80136c8:	b538      	push	{r3, r4, r5, lr}
 80136ca:	4b16      	ldr	r3, [pc, #88]	@ (8013724 <ai_platform_network_post_init+0x5c>)
 80136cc:	6802      	ldr	r2, [r0, #0]
 80136ce:	ea02 0103 	and.w	r1, r2, r3
 80136d2:	4393      	bics	r3, r2
 80136d4:	d108      	bne.n	80136e8 <ai_platform_network_post_init+0x20>
 80136d6:	6903      	ldr	r3, [r0, #16]
 80136d8:	4604      	mov	r4, r0
 80136da:	f013 0502 	ands.w	r5, r3, #2
 80136de:	d005      	beq.n	80136ec <ai_platform_network_post_init+0x24>
 80136e0:	428a      	cmp	r2, r1
 80136e2:	d00a      	beq.n	80136fa <ai_platform_network_post_init+0x32>
 80136e4:	2001      	movs	r0, #1
 80136e6:	bd38      	pop	{r3, r4, r5, pc}
 80136e8:	2000      	movs	r0, #0
 80136ea:	bd38      	pop	{r3, r4, r5, pc}
 80136ec:	2210      	movs	r2, #16
 80136ee:	2111      	movs	r1, #17
 80136f0:	300c      	adds	r0, #12
 80136f2:	f000 fa67 	bl	8013bc4 <core_set_error>
 80136f6:	4628      	mov	r0, r5
 80136f8:	bd38      	pop	{r3, r4, r5, pc}
 80136fa:	f000 faa5 	bl	8013c48 <ai_layers_post_init_all>
 80136fe:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8013700:	2b00      	cmp	r3, #0
 8013702:	d0ef      	beq.n	80136e4 <ai_platform_network_post_init+0x1c>
 8013704:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 8013706:	e008      	b.n	801371a <ai_platform_network_post_init+0x52>
 8013708:	e9d4 3210 	ldrd	r3, r2, [r4, #64]	@ 0x40
 801370c:	4798      	blx	r3
 801370e:	692b      	ldr	r3, [r5, #16]
 8013710:	42ab      	cmp	r3, r5
 8013712:	461d      	mov	r5, r3
 8013714:	d0e6      	beq.n	80136e4 <ai_platform_network_post_init+0x1c>
 8013716:	2b00      	cmp	r3, #0
 8013718:	d0e4      	beq.n	80136e4 <ai_platform_network_post_init+0x1c>
 801371a:	4629      	mov	r1, r5
 801371c:	2000      	movs	r0, #0
 801371e:	2d00      	cmp	r5, #0
 8013720:	d1f2      	bne.n	8013708 <ai_platform_network_post_init+0x40>
 8013722:	e7df      	b.n	80136e4 <ai_platform_network_post_init+0x1c>
 8013724:	a1c00100 	.word	0xa1c00100

08013728 <ai_platform_network_process>:
 8013728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801372c:	b085      	sub	sp, #20
 801372e:	4bb7      	ldr	r3, [pc, #732]	@ (8013a0c <ai_platform_network_process+0x2e4>)
 8013730:	9202      	str	r2, [sp, #8]
 8013732:	6802      	ldr	r2, [r0, #0]
 8013734:	4393      	bics	r3, r2
 8013736:	f040 8142 	bne.w	80139be <ai_platform_network_process+0x296>
 801373a:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 801373c:	4605      	mov	r5, r0
 801373e:	2b00      	cmp	r3, #0
 8013740:	f000 8126 	beq.w	8013990 <ai_platform_network_process+0x268>
 8013744:	6903      	ldr	r3, [r0, #16]
 8013746:	2200      	movs	r2, #0
 8013748:	f8d0 8034 	ldr.w	r8, [r0, #52]	@ 0x34
 801374c:	f003 0303 	and.w	r3, r3, #3
 8013750:	6182      	str	r2, [r0, #24]
 8013752:	2b03      	cmp	r3, #3
 8013754:	f040 8122 	bne.w	801399c <ai_platform_network_process+0x274>
 8013758:	2900      	cmp	r1, #0
 801375a:	f000 8136 	beq.w	80139ca <ai_platform_network_process+0x2a2>
 801375e:	fab8 f788 	clz	r7, r8
 8013762:	097f      	lsrs	r7, r7, #5
 8013764:	f1b8 0f00 	cmp.w	r8, #0
 8013768:	f000 812f 	beq.w	80139ca <ai_platform_network_process+0x2a2>
 801376c:	f8b8 3000 	ldrh.w	r3, [r8]
 8013770:	2b00      	cmp	r3, #0
 8013772:	f000 812a 	beq.w	80139ca <ai_platform_network_process+0x2a2>
 8013776:	698b      	ldr	r3, [r1, #24]
 8013778:	460e      	mov	r6, r1
 801377a:	9003      	str	r0, [sp, #12]
 801377c:	681b      	ldr	r3, [r3, #0]
 801377e:	9301      	str	r3, [sp, #4]
 8013780:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013784:	2b00      	cmp	r3, #0
 8013786:	d072      	beq.n	801386e <ai_platform_network_process+0x146>
 8013788:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 801378c:	2c00      	cmp	r4, #0
 801378e:	d06e      	beq.n	801386e <ai_platform_network_process+0x146>
 8013790:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013794:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8013798:	f8d3 a000 	ldr.w	sl, [r3]
 801379c:	eb1a 1907 	adds.w	r9, sl, r7, lsl #4
 80137a0:	f000 8112 	beq.w	80139c8 <ai_platform_network_process+0x2a0>
 80137a4:	69a3      	ldr	r3, [r4, #24]
 80137a6:	2101      	movs	r1, #1
 80137a8:	4630      	mov	r0, r6
 80137aa:	685d      	ldr	r5, [r3, #4]
 80137ac:	f7ff fc72 	bl	8013094 <ai_buffer_get_size>
 80137b0:	4285      	cmp	r5, r0
 80137b2:	f0c0 8115 	bcc.w	80139e0 <ai_platform_network_process+0x2b8>
 80137b6:	68e0      	ldr	r0, [r4, #12]
 80137b8:	69b1      	ldr	r1, [r6, #24]
 80137ba:	68c2      	ldr	r2, [r0, #12]
 80137bc:	68cb      	ldr	r3, [r1, #12]
 80137be:	429a      	cmp	r2, r3
 80137c0:	f040 810e 	bne.w	80139e0 <ai_platform_network_process+0x2b8>
 80137c4:	6882      	ldr	r2, [r0, #8]
 80137c6:	688b      	ldr	r3, [r1, #8]
 80137c8:	429a      	cmp	r2, r3
 80137ca:	f040 8109 	bne.w	80139e0 <ai_platform_network_process+0x2b8>
 80137ce:	6842      	ldr	r2, [r0, #4]
 80137d0:	684b      	ldr	r3, [r1, #4]
 80137d2:	429a      	cmp	r2, r3
 80137d4:	f040 8104 	bne.w	80139e0 <ai_platform_network_process+0x2b8>
 80137d8:	69a3      	ldr	r3, [r4, #24]
 80137da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80137de:	f002 fe7b 	bl	80164d8 <ai_array_get_data_byte_size>
 80137e2:	4605      	mov	r5, r0
 80137e4:	4620      	mov	r0, r4
 80137e6:	f002 fe8f 	bl	8016508 <get_tensor_byte_size>
 80137ea:	4285      	cmp	r5, r0
 80137ec:	f0c0 80f8 	bcc.w	80139e0 <ai_platform_network_process+0x2b8>
 80137f0:	69a3      	ldr	r3, [r4, #24]
 80137f2:	6818      	ldr	r0, [r3, #0]
 80137f4:	f002 fdd8 	bl	80163a8 <ai_array_to_buffer_fmt>
 80137f8:	6833      	ldr	r3, [r6, #0]
 80137fa:	4058      	eors	r0, r3
 80137fc:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 8013800:	f040 81a4 	bne.w	8013b4c <ai_platform_network_process+0x424>
 8013804:	6873      	ldr	r3, [r6, #4]
 8013806:	2b00      	cmp	r3, #0
 8013808:	f000 80de 	beq.w	80139c8 <ai_platform_network_process+0x2a0>
 801380c:	69b3      	ldr	r3, [r6, #24]
 801380e:	681b      	ldr	r3, [r3, #0]
 8013810:	2b00      	cmp	r3, #0
 8013812:	f000 81a4 	beq.w	8013b5e <ai_platform_network_process+0x436>
 8013816:	9a01      	ldr	r2, [sp, #4]
 8013818:	4620      	mov	r0, r4
 801381a:	3701      	adds	r7, #1
 801381c:	361c      	adds	r6, #28
 801381e:	429a      	cmp	r2, r3
 8013820:	bf38      	it	cc
 8013822:	461a      	movcc	r2, r3
 8013824:	9201      	str	r2, [sp, #4]
 8013826:	f002 fe6f 	bl	8016508 <get_tensor_byte_size>
 801382a:	f8c9 0008 	str.w	r0, [r9, #8]
 801382e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8013832:	681b      	ldr	r3, [r3, #0]
 8013834:	fb00 f303 	mul.w	r3, r0, r3
 8013838:	f8c9 300c 	str.w	r3, [r9, #12]
 801383c:	f856 1c18 	ldr.w	r1, [r6, #-24]
 8013840:	440b      	add	r3, r1
 8013842:	f8c9 1004 	str.w	r1, [r9, #4]
 8013846:	f84a 300b 	str.w	r3, [sl, fp]
 801384a:	69a0      	ldr	r0, [r4, #24]
 801384c:	6803      	ldr	r3, [r0, #0]
 801384e:	009a      	lsls	r2, r3, #2
 8013850:	f100 80af 	bmi.w	80139b2 <ai_platform_network_process+0x28a>
 8013854:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8013858:	1a9b      	subs	r3, r3, r2
 801385a:	4419      	add	r1, r3
 801385c:	6081      	str	r1, [r0, #8]
 801385e:	69a3      	ldr	r3, [r4, #24]
 8013860:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8013864:	60da      	str	r2, [r3, #12]
 8013866:	f8b8 3000 	ldrh.w	r3, [r8]
 801386a:	42bb      	cmp	r3, r7
 801386c:	d888      	bhi.n	8013780 <ai_platform_network_process+0x58>
 801386e:	9d03      	ldr	r5, [sp, #12]
 8013870:	9b02      	ldr	r3, [sp, #8]
 8013872:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
 8013874:	2b00      	cmp	r3, #0
 8013876:	f000 817b 	beq.w	8013b70 <ai_platform_network_process+0x448>
 801387a:	2a01      	cmp	r2, #1
 801387c:	f240 80bd 	bls.w	80139fa <ai_platform_network_process+0x2d2>
 8013880:	f8d5 9034 	ldr.w	r9, [r5, #52]	@ 0x34
 8013884:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8013888:	2b00      	cmp	r3, #0
 801388a:	f000 80b6 	beq.w	80139fa <ai_platform_network_process+0x2d2>
 801388e:	2700      	movs	r7, #0
 8013890:	f8dd b008 	ldr.w	fp, [sp, #8]
 8013894:	9502      	str	r5, [sp, #8]
 8013896:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801389a:	2b00      	cmp	r3, #0
 801389c:	f000 80bd 	beq.w	8013a1a <ai_platform_network_process+0x2f2>
 80138a0:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 80138a4:	2e00      	cmp	r6, #0
 80138a6:	f000 80b8 	beq.w	8013a1a <ai_platform_network_process+0x2f2>
 80138aa:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80138ae:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 80138b2:	681c      	ldr	r4, [r3, #0]
 80138b4:	eb14 1807 	adds.w	r8, r4, r7, lsl #4
 80138b8:	f000 8170 	beq.w	8013b9c <ai_platform_network_process+0x474>
 80138bc:	69b3      	ldr	r3, [r6, #24]
 80138be:	2101      	movs	r1, #1
 80138c0:	4658      	mov	r0, fp
 80138c2:	685d      	ldr	r5, [r3, #4]
 80138c4:	f7ff fbe6 	bl	8013094 <ai_buffer_get_size>
 80138c8:	4285      	cmp	r5, r0
 80138ca:	f0c0 8095 	bcc.w	80139f8 <ai_platform_network_process+0x2d0>
 80138ce:	68f0      	ldr	r0, [r6, #12]
 80138d0:	f8db 1018 	ldr.w	r1, [fp, #24]
 80138d4:	68c2      	ldr	r2, [r0, #12]
 80138d6:	68cb      	ldr	r3, [r1, #12]
 80138d8:	429a      	cmp	r2, r3
 80138da:	f040 808d 	bne.w	80139f8 <ai_platform_network_process+0x2d0>
 80138de:	6882      	ldr	r2, [r0, #8]
 80138e0:	688b      	ldr	r3, [r1, #8]
 80138e2:	429a      	cmp	r2, r3
 80138e4:	f040 8088 	bne.w	80139f8 <ai_platform_network_process+0x2d0>
 80138e8:	6842      	ldr	r2, [r0, #4]
 80138ea:	684b      	ldr	r3, [r1, #4]
 80138ec:	429a      	cmp	r2, r3
 80138ee:	f040 8083 	bne.w	80139f8 <ai_platform_network_process+0x2d0>
 80138f2:	69b3      	ldr	r3, [r6, #24]
 80138f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80138f8:	f002 fdee 	bl	80164d8 <ai_array_get_data_byte_size>
 80138fc:	9003      	str	r0, [sp, #12]
 80138fe:	4630      	mov	r0, r6
 8013900:	f002 fe02 	bl	8016508 <get_tensor_byte_size>
 8013904:	9b03      	ldr	r3, [sp, #12]
 8013906:	4283      	cmp	r3, r0
 8013908:	d376      	bcc.n	80139f8 <ai_platform_network_process+0x2d0>
 801390a:	69b3      	ldr	r3, [r6, #24]
 801390c:	6818      	ldr	r0, [r3, #0]
 801390e:	f002 fd4b 	bl	80163a8 <ai_array_to_buffer_fmt>
 8013912:	f8db 3000 	ldr.w	r3, [fp]
 8013916:	4058      	eors	r0, r3
 8013918:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 801391c:	f040 812c 	bne.w	8013b78 <ai_platform_network_process+0x450>
 8013920:	f8db 3004 	ldr.w	r3, [fp, #4]
 8013924:	2b00      	cmp	r3, #0
 8013926:	f000 8139 	beq.w	8013b9c <ai_platform_network_process+0x474>
 801392a:	f8db 3018 	ldr.w	r3, [fp, #24]
 801392e:	681b      	ldr	r3, [r3, #0]
 8013930:	2b00      	cmp	r3, #0
 8013932:	f000 812a 	beq.w	8013b8a <ai_platform_network_process+0x462>
 8013936:	9a01      	ldr	r2, [sp, #4]
 8013938:	4630      	mov	r0, r6
 801393a:	3701      	adds	r7, #1
 801393c:	f10b 0b1c 	add.w	fp, fp, #28
 8013940:	429a      	cmp	r2, r3
 8013942:	bf38      	it	cc
 8013944:	461a      	movcc	r2, r3
 8013946:	9201      	str	r2, [sp, #4]
 8013948:	f002 fdde 	bl	8016508 <get_tensor_byte_size>
 801394c:	f8c8 0008 	str.w	r0, [r8, #8]
 8013950:	f85b 3c04 	ldr.w	r3, [fp, #-4]
 8013954:	681b      	ldr	r3, [r3, #0]
 8013956:	fb00 f303 	mul.w	r3, r0, r3
 801395a:	f8c8 300c 	str.w	r3, [r8, #12]
 801395e:	f85b 1c18 	ldr.w	r1, [fp, #-24]
 8013962:	440b      	add	r3, r1
 8013964:	f8c8 1004 	str.w	r1, [r8, #4]
 8013968:	f844 300a 	str.w	r3, [r4, sl]
 801396c:	69b0      	ldr	r0, [r6, #24]
 801396e:	6803      	ldr	r3, [r0, #0]
 8013970:	009b      	lsls	r3, r3, #2
 8013972:	d44d      	bmi.n	8013a10 <ai_platform_network_process+0x2e8>
 8013974:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8013978:	1a9b      	subs	r3, r3, r2
 801397a:	4419      	add	r1, r3
 801397c:	6081      	str	r1, [r0, #8]
 801397e:	69b3      	ldr	r3, [r6, #24]
 8013980:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8013984:	60da      	str	r2, [r3, #12]
 8013986:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801398a:	42bb      	cmp	r3, r7
 801398c:	d883      	bhi.n	8013896 <ai_platform_network_process+0x16e>
 801398e:	e044      	b.n	8013a1a <ai_platform_network_process+0x2f2>
 8013990:	6902      	ldr	r2, [r0, #16]
 8013992:	6183      	str	r3, [r0, #24]
 8013994:	f002 0203 	and.w	r2, r2, #3
 8013998:	2a03      	cmp	r2, #3
 801399a:	d016      	beq.n	80139ca <ai_platform_network_process+0x2a2>
 801399c:	2230      	movs	r2, #48	@ 0x30
 801399e:	2111      	movs	r1, #17
 80139a0:	f105 000c 	add.w	r0, r5, #12
 80139a4:	2400      	movs	r4, #0
 80139a6:	f000 f90d 	bl	8013bc4 <core_set_error>
 80139aa:	4620      	mov	r0, r4
 80139ac:	b005      	add	sp, #20
 80139ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80139b2:	f8b8 3000 	ldrh.w	r3, [r8]
 80139b6:	429f      	cmp	r7, r3
 80139b8:	f4ff aee2 	bcc.w	8013780 <ai_platform_network_process+0x58>
 80139bc:	e757      	b.n	801386e <ai_platform_network_process+0x146>
 80139be:	2400      	movs	r4, #0
 80139c0:	4620      	mov	r0, r4
 80139c2:	b005      	add	sp, #20
 80139c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80139c8:	9d03      	ldr	r5, [sp, #12]
 80139ca:	2400      	movs	r4, #0
 80139cc:	2217      	movs	r2, #23
 80139ce:	2112      	movs	r1, #18
 80139d0:	f105 000c 	add.w	r0, r5, #12
 80139d4:	f000 f8f6 	bl	8013bc4 <core_set_error>
 80139d8:	4620      	mov	r0, r4
 80139da:	b005      	add	sp, #20
 80139dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80139e0:	9d03      	ldr	r5, [sp, #12]
 80139e2:	2400      	movs	r4, #0
 80139e4:	2218      	movs	r2, #24
 80139e6:	2112      	movs	r1, #18
 80139e8:	f105 000c 	add.w	r0, r5, #12
 80139ec:	f000 f8ea 	bl	8013bc4 <core_set_error>
 80139f0:	4620      	mov	r0, r4
 80139f2:	b005      	add	sp, #20
 80139f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80139f8:	9d02      	ldr	r5, [sp, #8]
 80139fa:	2218      	movs	r2, #24
 80139fc:	2113      	movs	r1, #19
 80139fe:	f105 000c 	add.w	r0, r5, #12
 8013a02:	2400      	movs	r4, #0
 8013a04:	f000 f8de 	bl	8013bc4 <core_set_error>
 8013a08:	e7cf      	b.n	80139aa <ai_platform_network_process+0x282>
 8013a0a:	bf00      	nop
 8013a0c:	a1c00100 	.word	0xa1c00100
 8013a10:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8013a14:	429f      	cmp	r7, r3
 8013a16:	f4ff af3e 	bcc.w	8013896 <ai_platform_network_process+0x16e>
 8013a1a:	9d02      	ldr	r5, [sp, #8]
 8013a1c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8013a20:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
 8013a22:	832b      	strh	r3, [r5, #24]
 8013a24:	2a00      	cmp	r2, #0
 8013a26:	f040 808b 	bne.w	8013b40 <ai_platform_network_process+0x418>
 8013a2a:	4616      	mov	r6, r2
 8013a2c:	4617      	mov	r7, r2
 8013a2e:	8b6c      	ldrh	r4, [r5, #26]
 8013a30:	429c      	cmp	r4, r3
 8013a32:	d2ba      	bcs.n	80139aa <ai_platform_network_process+0x282>
 8013a34:	46ab      	mov	fp, r5
 8013a36:	2e00      	cmp	r6, #0
 8013a38:	d030      	beq.n	8013a9c <ai_platform_network_process+0x374>
 8013a3a:	f04f 0800 	mov.w	r8, #0
 8013a3e:	e014      	b.n	8013a6a <ai_platform_network_process+0x342>
 8013a40:	6882      	ldr	r2, [r0, #8]
 8013a42:	68c5      	ldr	r5, [r0, #12]
 8013a44:	6863      	ldr	r3, [r4, #4]
 8013a46:	1b52      	subs	r2, r2, r5
 8013a48:	4413      	add	r3, r2
 8013a4a:	6083      	str	r3, [r0, #8]
 8013a4c:	698b      	ldr	r3, [r1, #24]
 8013a4e:	6862      	ldr	r2, [r4, #4]
 8013a50:	60da      	str	r2, [r3, #12]
 8013a52:	f859 200a 	ldr.w	r2, [r9, sl]
 8013a56:	f108 0801 	add.w	r8, r8, #1
 8013a5a:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8013a5e:	440b      	add	r3, r1
 8013a60:	4293      	cmp	r3, r2
 8013a62:	d301      	bcc.n	8013a68 <ai_platform_network_process+0x340>
 8013a64:	68e3      	ldr	r3, [r4, #12]
 8013a66:	1ad3      	subs	r3, r2, r3
 8013a68:	6063      	str	r3, [r4, #4]
 8013a6a:	8833      	ldrh	r3, [r6, #0]
 8013a6c:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8013a70:	4543      	cmp	r3, r8
 8013a72:	d913      	bls.n	8013a9c <ai_platform_network_process+0x374>
 8013a74:	6873      	ldr	r3, [r6, #4]
 8013a76:	b18b      	cbz	r3, 8013a9c <ai_platform_network_process+0x374>
 8013a78:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8013a7c:	b171      	cbz	r1, 8013a9c <ai_platform_network_process+0x374>
 8013a7e:	6988      	ldr	r0, [r1, #24]
 8013a80:	68b2      	ldr	r2, [r6, #8]
 8013a82:	6803      	ldr	r3, [r0, #0]
 8013a84:	f8d2 9000 	ldr.w	r9, [r2]
 8013a88:	009d      	lsls	r5, r3, #2
 8013a8a:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 8013a8e:	d5d7      	bpl.n	8013a40 <ai_platform_network_process+0x318>
 8013a90:	6881      	ldr	r1, [r0, #8]
 8013a92:	68a2      	ldr	r2, [r4, #8]
 8013a94:	6860      	ldr	r0, [r4, #4]
 8013a96:	f002 fbe5 	bl	8016264 <st_int8_copy>
 8013a9a:	e7da      	b.n	8013a52 <ai_platform_network_process+0x32a>
 8013a9c:	4658      	mov	r0, fp
 8013a9e:	f000 f8e7 	bl	8013c70 <ai_layers_forward_all>
 8013aa2:	2f00      	cmp	r7, #0
 8013aa4:	d03d      	beq.n	8013b22 <ai_platform_network_process+0x3fa>
 8013aa6:	2400      	movs	r4, #0
 8013aa8:	e016      	b.n	8013ad8 <ai_platform_network_process+0x3b0>
 8013aaa:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 8013aae:	f859 100a 	ldr.w	r1, [r9, sl]
 8013ab2:	4413      	add	r3, r2
 8013ab4:	428b      	cmp	r3, r1
 8013ab6:	d302      	bcc.n	8013abe <ai_platform_network_process+0x396>
 8013ab8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013abc:	1acb      	subs	r3, r1, r3
 8013abe:	f8c8 3004 	str.w	r3, [r8, #4]
 8013ac2:	6981      	ldr	r1, [r0, #24]
 8013ac4:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8013ac8:	1b52      	subs	r2, r2, r5
 8013aca:	4413      	add	r3, r2
 8013acc:	608b      	str	r3, [r1, #8]
 8013ace:	6983      	ldr	r3, [r0, #24]
 8013ad0:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8013ad4:	60da      	str	r2, [r3, #12]
 8013ad6:	3401      	adds	r4, #1
 8013ad8:	883b      	ldrh	r3, [r7, #0]
 8013ada:	42a3      	cmp	r3, r4
 8013adc:	d921      	bls.n	8013b22 <ai_platform_network_process+0x3fa>
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	b1fb      	cbz	r3, 8013b22 <ai_platform_network_process+0x3fa>
 8013ae2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8013ae6:	b1e0      	cbz	r0, 8013b22 <ai_platform_network_process+0x3fa>
 8013ae8:	68ba      	ldr	r2, [r7, #8]
 8013aea:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 8013aee:	6983      	ldr	r3, [r0, #24]
 8013af0:	f8d2 9000 	ldr.w	r9, [r2]
 8013af4:	681a      	ldr	r2, [r3, #0]
 8013af6:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 8013afa:	0092      	lsls	r2, r2, #2
 8013afc:	d5d5      	bpl.n	8013aaa <ai_platform_network_process+0x382>
 8013afe:	6898      	ldr	r0, [r3, #8]
 8013b00:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 8013b04:	f002 fbae 	bl	8016264 <st_int8_copy>
 8013b08:	f859 200a 	ldr.w	r2, [r9, sl]
 8013b0c:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8013b10:	440b      	add	r3, r1
 8013b12:	4293      	cmp	r3, r2
 8013b14:	d302      	bcc.n	8013b1c <ai_platform_network_process+0x3f4>
 8013b16:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013b1a:	1ad3      	subs	r3, r2, r3
 8013b1c:	f8c8 3004 	str.w	r3, [r8, #4]
 8013b20:	e7d9      	b.n	8013ad6 <ai_platform_network_process+0x3ae>
 8013b22:	f8bb 401a 	ldrh.w	r4, [fp, #26]
 8013b26:	f8bb 3018 	ldrh.w	r3, [fp, #24]
 8013b2a:	3401      	adds	r4, #1
 8013b2c:	b2a4      	uxth	r4, r4
 8013b2e:	42a3      	cmp	r3, r4
 8013b30:	f8ab 401a 	strh.w	r4, [fp, #26]
 8013b34:	f63f af7f 	bhi.w	8013a36 <ai_platform_network_process+0x30e>
 8013b38:	4620      	mov	r0, r4
 8013b3a:	b005      	add	sp, #20
 8013b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b40:	2a01      	cmp	r2, #1
 8013b42:	6b6e      	ldr	r6, [r5, #52]	@ 0x34
 8013b44:	d033      	beq.n	8013bae <ai_platform_network_process+0x486>
 8013b46:	f106 070c 	add.w	r7, r6, #12
 8013b4a:	e770      	b.n	8013a2e <ai_platform_network_process+0x306>
 8013b4c:	9d03      	ldr	r5, [sp, #12]
 8013b4e:	2219      	movs	r2, #25
 8013b50:	2112      	movs	r1, #18
 8013b52:	2400      	movs	r4, #0
 8013b54:	f105 000c 	add.w	r0, r5, #12
 8013b58:	f000 f834 	bl	8013bc4 <core_set_error>
 8013b5c:	e725      	b.n	80139aa <ai_platform_network_process+0x282>
 8013b5e:	9d03      	ldr	r5, [sp, #12]
 8013b60:	4604      	mov	r4, r0
 8013b62:	2221      	movs	r2, #33	@ 0x21
 8013b64:	2112      	movs	r1, #18
 8013b66:	f105 000c 	add.w	r0, r5, #12
 8013b6a:	f000 f82b 	bl	8013bc4 <core_set_error>
 8013b6e:	e71c      	b.n	80139aa <ai_platform_network_process+0x282>
 8013b70:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8013b74:	832b      	strh	r3, [r5, #24]
 8013b76:	e755      	b.n	8013a24 <ai_platform_network_process+0x2fc>
 8013b78:	9d02      	ldr	r5, [sp, #8]
 8013b7a:	2219      	movs	r2, #25
 8013b7c:	2113      	movs	r1, #19
 8013b7e:	2400      	movs	r4, #0
 8013b80:	f105 000c 	add.w	r0, r5, #12
 8013b84:	f000 f81e 	bl	8013bc4 <core_set_error>
 8013b88:	e70f      	b.n	80139aa <ai_platform_network_process+0x282>
 8013b8a:	9d02      	ldr	r5, [sp, #8]
 8013b8c:	4604      	mov	r4, r0
 8013b8e:	2221      	movs	r2, #33	@ 0x21
 8013b90:	2113      	movs	r1, #19
 8013b92:	f105 000c 	add.w	r0, r5, #12
 8013b96:	f000 f815 	bl	8013bc4 <core_set_error>
 8013b9a:	e706      	b.n	80139aa <ai_platform_network_process+0x282>
 8013b9c:	9d02      	ldr	r5, [sp, #8]
 8013b9e:	2217      	movs	r2, #23
 8013ba0:	2113      	movs	r1, #19
 8013ba2:	2400      	movs	r4, #0
 8013ba4:	f105 000c 	add.w	r0, r5, #12
 8013ba8:	f000 f80c 	bl	8013bc4 <core_set_error>
 8013bac:	e6fd      	b.n	80139aa <ai_platform_network_process+0x282>
 8013bae:	2700      	movs	r7, #0
 8013bb0:	e73d      	b.n	8013a2e <ai_platform_network_process+0x306>
 8013bb2:	bf00      	nop

08013bb4 <core_init>:
 8013bb4:	2001      	movs	r0, #1
 8013bb6:	4770      	bx	lr

08013bb8 <core_get_error>:
 8013bb8:	4603      	mov	r3, r0
 8013bba:	2200      	movs	r2, #0
 8013bbc:	6800      	ldr	r0, [r0, #0]
 8013bbe:	601a      	str	r2, [r3, #0]
 8013bc0:	4770      	bx	lr
 8013bc2:	bf00      	nop

08013bc4 <core_set_error>:
 8013bc4:	4603      	mov	r3, r0
 8013bc6:	7800      	ldrb	r0, [r0, #0]
 8013bc8:	b108      	cbz	r0, 8013bce <core_set_error+0xa>
 8013bca:	2000      	movs	r0, #0
 8013bcc:	4770      	bx	lr
 8013bce:	7019      	strb	r1, [r3, #0]
 8013bd0:	2001      	movs	r0, #1
 8013bd2:	6819      	ldr	r1, [r3, #0]
 8013bd4:	f362 211f 	bfi	r1, r2, #8, #24
 8013bd8:	6019      	str	r1, [r3, #0]
 8013bda:	4770      	bx	lr

08013bdc <ai_check_custom_types>:
 8013bdc:	b082      	sub	sp, #8
 8013bde:	4b12      	ldr	r3, [pc, #72]	@ (8013c28 <ai_check_custom_types+0x4c>)
 8013be0:	9301      	str	r3, [sp, #4]
 8013be2:	b118      	cbz	r0, 8013bec <ai_check_custom_types+0x10>
 8013be4:	7803      	ldrb	r3, [r0, #0]
 8013be6:	2b03      	cmp	r3, #3
 8013be8:	d002      	beq.n	8013bf0 <ai_check_custom_types+0x14>
 8013bea:	2000      	movs	r0, #0
 8013bec:	b002      	add	sp, #8
 8013bee:	4770      	bx	lr
 8013bf0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013bf4:	4293      	cmp	r3, r2
 8013bf6:	d004      	beq.n	8013c02 <ai_check_custom_types+0x26>
 8013bf8:	2001      	movs	r0, #1
 8013bfa:	f080 0001 	eor.w	r0, r0, #1
 8013bfe:	b002      	add	sp, #8
 8013c00:	4770      	bx	lr
 8013c02:	7842      	ldrb	r2, [r0, #1]
 8013c04:	3001      	adds	r0, #1
 8013c06:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8013c0a:	429a      	cmp	r2, r3
 8013c0c:	d1f4      	bne.n	8013bf8 <ai_check_custom_types+0x1c>
 8013c0e:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8013c12:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8013c16:	429a      	cmp	r2, r3
 8013c18:	d1ee      	bne.n	8013bf8 <ai_check_custom_types+0x1c>
 8013c1a:	7842      	ldrb	r2, [r0, #1]
 8013c1c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013c20:	429a      	cmp	r2, r3
 8013c22:	d1e9      	bne.n	8013bf8 <ai_check_custom_types+0x1c>
 8013c24:	2000      	movs	r0, #0
 8013c26:	e7e8      	b.n	8013bfa <ai_check_custom_types+0x1e>
 8013c28:	84048403 	.word	0x84048403

08013c2c <ai_layers_init_all>:
 8013c2c:	2100      	movs	r1, #0
 8013c2e:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8013c30:	b13b      	cbz	r3, 8013c42 <ai_layers_init_all+0x16>
 8013c32:	691a      	ldr	r2, [r3, #16]
 8013c34:	3101      	adds	r1, #1
 8013c36:	60d8      	str	r0, [r3, #12]
 8013c38:	429a      	cmp	r2, r3
 8013c3a:	4613      	mov	r3, r2
 8013c3c:	d001      	beq.n	8013c42 <ai_layers_init_all+0x16>
 8013c3e:	2a00      	cmp	r2, #0
 8013c40:	d1f6      	bne.n	8013c30 <ai_layers_init_all+0x4>
 8013c42:	4608      	mov	r0, r1
 8013c44:	4770      	bx	lr
 8013c46:	bf00      	nop

08013c48 <ai_layers_post_init_all>:
 8013c48:	b538      	push	{r3, r4, r5, lr}
 8013c4a:	2500      	movs	r5, #0
 8013c4c:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8013c4e:	b16c      	cbz	r4, 8013c6c <ai_layers_post_init_all+0x24>
 8013c50:	6863      	ldr	r3, [r4, #4]
 8013c52:	07db      	lsls	r3, r3, #31
 8013c54:	d504      	bpl.n	8013c60 <ai_layers_post_init_all+0x18>
 8013c56:	6a23      	ldr	r3, [r4, #32]
 8013c58:	4620      	mov	r0, r4
 8013c5a:	b10b      	cbz	r3, 8013c60 <ai_layers_post_init_all+0x18>
 8013c5c:	3501      	adds	r5, #1
 8013c5e:	4798      	blx	r3
 8013c60:	6923      	ldr	r3, [r4, #16]
 8013c62:	42a3      	cmp	r3, r4
 8013c64:	461c      	mov	r4, r3
 8013c66:	d001      	beq.n	8013c6c <ai_layers_post_init_all+0x24>
 8013c68:	2b00      	cmp	r3, #0
 8013c6a:	d1f0      	bne.n	8013c4e <ai_layers_post_init_all+0x6>
 8013c6c:	4628      	mov	r0, r5
 8013c6e:	bd38      	pop	{r3, r4, r5, pc}

08013c70 <ai_layers_forward_all>:
 8013c70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c74:	f8d0 8040 	ldr.w	r8, [r0, #64]	@ 0x40
 8013c78:	4604      	mov	r4, r0
 8013c7a:	f1b8 0f00 	cmp.w	r8, #0
 8013c7e:	d02a      	beq.n	8013cd6 <ai_layers_forward_all+0x66>
 8013c80:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8013c82:	63c1      	str	r1, [r0, #60]	@ 0x3c
 8013c84:	b319      	cbz	r1, 8013cce <ai_layers_forward_all+0x5e>
 8013c86:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8013c88:	2001      	movs	r0, #1
 8013c8a:	47c0      	blx	r8
 8013c8c:	6be6      	ldr	r6, [r4, #60]	@ 0x3c
 8013c8e:	b1f6      	cbz	r6, 8013cce <ai_layers_forward_all+0x5e>
 8013c90:	2700      	movs	r7, #0
 8013c92:	4631      	mov	r1, r6
 8013c94:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8013c96:	2002      	movs	r0, #2
 8013c98:	47c0      	blx	r8
 8013c9a:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 8013c9c:	4628      	mov	r0, r5
 8013c9e:	696b      	ldr	r3, [r5, #20]
 8013ca0:	4798      	blx	r3
 8013ca2:	692e      	ldr	r6, [r5, #16]
 8013ca4:	2003      	movs	r0, #3
 8013ca6:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8013ca8:	42b5      	cmp	r5, r6
 8013caa:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8013cac:	d007      	beq.n	8013cbe <ai_layers_forward_all+0x4e>
 8013cae:	47c0      	blx	r8
 8013cb0:	3701      	adds	r7, #1
 8013cb2:	63e6      	str	r6, [r4, #60]	@ 0x3c
 8013cb4:	2e00      	cmp	r6, #0
 8013cb6:	d1ec      	bne.n	8013c92 <ai_layers_forward_all+0x22>
 8013cb8:	4638      	mov	r0, r7
 8013cba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013cbe:	2003      	movs	r0, #3
 8013cc0:	3701      	adds	r7, #1
 8013cc2:	47c0      	blx	r8
 8013cc4:	2300      	movs	r3, #0
 8013cc6:	4638      	mov	r0, r7
 8013cc8:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8013cca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013cce:	2700      	movs	r7, #0
 8013cd0:	4638      	mov	r0, r7
 8013cd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013cd6:	6b85      	ldr	r5, [r0, #56]	@ 0x38
 8013cd8:	63c5      	str	r5, [r0, #60]	@ 0x3c
 8013cda:	2d00      	cmp	r5, #0
 8013cdc:	d0f7      	beq.n	8013cce <ai_layers_forward_all+0x5e>
 8013cde:	4647      	mov	r7, r8
 8013ce0:	696b      	ldr	r3, [r5, #20]
 8013ce2:	4628      	mov	r0, r5
 8013ce4:	4798      	blx	r3
 8013ce6:	462b      	mov	r3, r5
 8013ce8:	692d      	ldr	r5, [r5, #16]
 8013cea:	429d      	cmp	r5, r3
 8013cec:	d004      	beq.n	8013cf8 <ai_layers_forward_all+0x88>
 8013cee:	3701      	adds	r7, #1
 8013cf0:	63e5      	str	r5, [r4, #60]	@ 0x3c
 8013cf2:	2d00      	cmp	r5, #0
 8013cf4:	d1f4      	bne.n	8013ce0 <ai_layers_forward_all+0x70>
 8013cf6:	e7df      	b.n	8013cb8 <ai_layers_forward_all+0x48>
 8013cf8:	2300      	movs	r3, #0
 8013cfa:	3701      	adds	r7, #1
 8013cfc:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8013cfe:	e7db      	b.n	8013cb8 <ai_layers_forward_all+0x48>

08013d00 <forward_conv2d_if32of32wf32_nl_pool>:
 8013d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d04:	f8d0 c018 	ldr.w	ip, [r0, #24]
 8013d08:	b0c3      	sub	sp, #268	@ 0x10c
 8013d0a:	f8bc 3000 	ldrh.w	r3, [ip]
 8013d0e:	9321      	str	r3, [sp, #132]	@ 0x84
 8013d10:	2b00      	cmp	r3, #0
 8013d12:	f000 813c 	beq.w	8013f8e <forward_conv2d_if32of32wf32_nl_pool+0x28e>
 8013d16:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8013d1a:	4604      	mov	r4, r0
 8013d1c:	f8d3 b004 	ldr.w	fp, [r3, #4]
 8013d20:	f1bb 0f00 	cmp.w	fp, #0
 8013d24:	d001      	beq.n	8013d2a <forward_conv2d_if32of32wf32_nl_pool+0x2a>
 8013d26:	f8db b000 	ldr.w	fp, [fp]
 8013d2a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8013d2c:	2a01      	cmp	r2, #1
 8013d2e:	f000 812d 	beq.w	8013f8c <forward_conv2d_if32of32wf32_nl_pool+0x28c>
 8013d32:	f8d3 a010 	ldr.w	sl, [r3, #16]
 8013d36:	f1ba 0f00 	cmp.w	sl, #0
 8013d3a:	d001      	beq.n	8013d40 <forward_conv2d_if32of32wf32_nl_pool+0x40>
 8013d3c:	f8da a000 	ldr.w	sl, [sl]
 8013d40:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8013d42:	2a02      	cmp	r2, #2
 8013d44:	f000 8122 	beq.w	8013f8c <forward_conv2d_if32of32wf32_nl_pool+0x28c>
 8013d48:	f8d3 801c 	ldr.w	r8, [r3, #28]
 8013d4c:	8b1b      	ldrh	r3, [r3, #24]
 8013d4e:	f1b8 0f00 	cmp.w	r8, #0
 8013d52:	f000 812f 	beq.w	8013fb4 <forward_conv2d_if32of32wf32_nl_pool+0x2b4>
 8013d56:	2b01      	cmp	r3, #1
 8013d58:	f8d8 2000 	ldr.w	r2, [r8]
 8013d5c:	f240 8130 	bls.w	8013fc0 <forward_conv2d_if32of32wf32_nl_pool+0x2c0>
 8013d60:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013d64:	9340      	str	r3, [sp, #256]	@ 0x100
 8013d66:	f8d8 8008 	ldr.w	r8, [r8, #8]
 8013d6a:	f8db 100c 	ldr.w	r1, [fp, #12]
 8013d6e:	f8da 000c 	ldr.w	r0, [sl, #12]
 8013d72:	9122      	str	r1, [sp, #136]	@ 0x88
 8013d74:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 8013d78:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8013d7c:	9130      	str	r1, [sp, #192]	@ 0xc0
 8013d7e:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8013d82:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8013d84:	9131      	str	r1, [sp, #196]	@ 0xc4
 8013d86:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
 8013d8a:	f8de 7004 	ldr.w	r7, [lr, #4]
 8013d8e:	9132      	str	r1, [sp, #200]	@ 0xc8
 8013d90:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8013d94:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8013d96:	9133      	str	r1, [sp, #204]	@ 0xcc
 8013d98:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
 8013d9c:	681e      	ldr	r6, [r3, #0]
 8013d9e:	9123      	str	r1, [sp, #140]	@ 0x8c
 8013da0:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8013da4:	972a      	str	r7, [sp, #168]	@ 0xa8
 8013da6:	9124      	str	r1, [sp, #144]	@ 0x90
 8013da8:	f8de 7008 	ldr.w	r7, [lr, #8]
 8013dac:	9628      	str	r6, [sp, #160]	@ 0xa0
 8013dae:	972f      	str	r7, [sp, #188]	@ 0xbc
 8013db0:	e9d4 950a 	ldrd	r9, r5, [r4, #40]	@ 0x28
 8013db4:	fa1f f189 	uxth.w	r1, r9
 8013db8:	9527      	str	r5, [sp, #156]	@ 0x9c
 8013dba:	685d      	ldr	r5, [r3, #4]
 8013dbc:	9134      	str	r1, [sp, #208]	@ 0xd0
 8013dbe:	9529      	str	r5, [sp, #164]	@ 0xa4
 8013dc0:	e9d4 560c 	ldrd	r5, r6, [r4, #48]	@ 0x30
 8013dc4:	f8bd 109c 	ldrh.w	r1, [sp, #156]	@ 0x9c
 8013dc8:	9135      	str	r1, [sp, #212]	@ 0xd4
 8013dca:	f8bd 10a0 	ldrh.w	r1, [sp, #160]	@ 0xa0
 8013dce:	9136      	str	r1, [sp, #216]	@ 0xd8
 8013dd0:	f8bd 10a4 	ldrh.w	r1, [sp, #164]	@ 0xa4
 8013dd4:	9137      	str	r1, [sp, #220]	@ 0xdc
 8013dd6:	6899      	ldr	r1, [r3, #8]
 8013dd8:	68db      	ldr	r3, [r3, #12]
 8013dda:	912d      	str	r1, [sp, #180]	@ 0xb4
 8013ddc:	932e      	str	r3, [sp, #184]	@ 0xb8
 8013dde:	f9b4 301c 	ldrsh.w	r3, [r4, #28]
 8013de2:	9338      	str	r3, [sp, #224]	@ 0xe0
 8013de4:	b2ab      	uxth	r3, r5
 8013de6:	9339      	str	r3, [sp, #228]	@ 0xe4
 8013de8:	b2b3      	uxth	r3, r6
 8013dea:	933a      	str	r3, [sp, #232]	@ 0xe8
 8013dec:	f9bd 30a8 	ldrsh.w	r3, [sp, #168]	@ 0xa8
 8013df0:	9325      	str	r3, [sp, #148]	@ 0x94
 8013df2:	b23b      	sxth	r3, r7
 8013df4:	9326      	str	r3, [sp, #152]	@ 0x98
 8013df6:	f9b4 3044 	ldrsh.w	r3, [r4, #68]	@ 0x44
 8013dfa:	933b      	str	r3, [sp, #236]	@ 0xec
 8013dfc:	f9b4 304c 	ldrsh.w	r3, [r4, #76]	@ 0x4c
 8013e00:	933c      	str	r3, [sp, #240]	@ 0xf0
 8013e02:	f9b4 3050 	ldrsh.w	r3, [r4, #80]	@ 0x50
 8013e06:	933d      	str	r3, [sp, #244]	@ 0xf4
 8013e08:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8013e0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013e0e:	933e      	str	r3, [sp, #248]	@ 0xf8
 8013e10:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8013e12:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8013e16:	933f      	str	r3, [sp, #252]	@ 0xfc
 8013e18:	6a23      	ldr	r3, [r4, #32]
 8013e1a:	9322      	str	r3, [sp, #136]	@ 0x88
 8013e1c:	f1b8 0f00 	cmp.w	r8, #0
 8013e20:	f000 80b7 	beq.w	8013f92 <forward_conv2d_if32of32wf32_nl_pool+0x292>
 8013e24:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8013e28:	2b00      	cmp	r3, #0
 8013e2a:	f000 80ba 	beq.w	8013fa2 <forward_conv2d_if32of32wf32_nl_pool+0x2a2>
 8013e2e:	9221      	str	r2, [sp, #132]	@ 0x84
 8013e30:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013e34:	689b      	ldr	r3, [r3, #8]
 8013e36:	9322      	str	r3, [sp, #136]	@ 0x88
 8013e38:	f002 fb26 	bl	8016488 <ai_array_get_byte_size>
 8013e3c:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8013e40:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8013e42:	902c      	str	r0, [sp, #176]	@ 0xb0
 8013e44:	2b00      	cmp	r3, #0
 8013e46:	f000 80be 	beq.w	8013fc6 <forward_conv2d_if32of32wf32_nl_pool+0x2c6>
 8013e4a:	9241      	str	r2, [sp, #260]	@ 0x104
 8013e4c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013e50:	f002 fb1a 	bl	8016488 <ai_array_get_byte_size>
 8013e54:	f8d4 c018 	ldr.w	ip, [r4, #24]
 8013e58:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8013e5a:	f8bc 3000 	ldrh.w	r3, [ip]
 8013e5e:	902b      	str	r0, [sp, #172]	@ 0xac
 8013e60:	9321      	str	r3, [sp, #132]	@ 0x84
 8013e62:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8013e64:	b2ad      	uxth	r5, r5
 8013e66:	b2b6      	uxth	r6, r6
 8013e68:	9b40      	ldr	r3, [sp, #256]	@ 0x100
 8013e6a:	f107 38ff 	add.w	r8, r7, #4294967295
 8013e6e:	3d01      	subs	r5, #1
 8013e70:	9f2a      	ldr	r7, [sp, #168]	@ 0xa8
 8013e72:	3e01      	subs	r6, #1
 8013e74:	fa1f f989 	uxth.w	r9, r9
 8013e78:	f8bd e09c 	ldrh.w	lr, [sp, #156]	@ 0x9c
 8013e7c:	fb15 7508 	smlabb	r5, r5, r8, r7
 8013e80:	9f2f      	ldr	r7, [sp, #188]	@ 0xbc
 8013e82:	699b      	ldr	r3, [r3, #24]
 8013e84:	fa0f f885 	sxth.w	r8, r5
 8013e88:	9d26      	ldr	r5, [sp, #152]	@ 0x98
 8013e8a:	f8db 0018 	ldr.w	r0, [fp, #24]
 8013e8e:	3d01      	subs	r5, #1
 8013e90:	f8d3 b008 	ldr.w	fp, [r3, #8]
 8013e94:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8013e96:	fb16 7605 	smlabb	r6, r6, r5, r7
 8013e9a:	9d24      	ldr	r5, [sp, #144]	@ 0x90
 8013e9c:	9f29      	ldr	r7, [sp, #164]	@ 0xa4
 8013e9e:	2b03      	cmp	r3, #3
 8013ea0:	eba5 0508 	sub.w	r5, r5, r8
 8013ea4:	b236      	sxth	r6, r6
 8013ea6:	f8da 1018 	ldr.w	r1, [sl, #24]
 8013eaa:	fa15 f587 	uxtah	r5, r5, r7
 8013eae:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 8013eb0:	6992      	ldr	r2, [r2, #24]
 8013eb2:	fa15 f587 	uxtah	r5, r5, r7
 8013eb6:	9f23      	ldr	r7, [sp, #140]	@ 0x8c
 8013eb8:	f8d4 a05c 	ldr.w	sl, [r4, #92]	@ 0x5c
 8013ebc:	6880      	ldr	r0, [r0, #8]
 8013ebe:	6889      	ldr	r1, [r1, #8]
 8013ec0:	6892      	ldr	r2, [r2, #8]
 8013ec2:	fb95 f5f9 	sdiv	r5, r5, r9
 8013ec6:	eba7 0906 	sub.w	r9, r7, r6
 8013eca:	9f28      	ldr	r7, [sp, #160]	@ 0xa0
 8013ecc:	f105 0501 	add.w	r5, r5, #1
 8013ed0:	fa19 f987 	uxtah	r9, r9, r7
 8013ed4:	9f2d      	ldr	r7, [sp, #180]	@ 0xb4
 8013ed6:	b22d      	sxth	r5, r5
 8013ed8:	fa19 f987 	uxtah	r9, r9, r7
 8013edc:	fb99 f9fe 	sdiv	r9, r9, lr
 8013ee0:	f109 0e01 	add.w	lr, r9, #1
 8013ee4:	f8d4 9024 	ldr.w	r9, [r4, #36]	@ 0x24
 8013ee8:	f9b4 4048 	ldrsh.w	r4, [r4, #72]	@ 0x48
 8013eec:	d94e      	bls.n	8013f8c <forward_conv2d_if32of32wf32_nl_pool+0x28c>
 8013eee:	f8dc 7004 	ldr.w	r7, [ip, #4]
 8013ef2:	f8d7 c028 	ldr.w	ip, [r7, #40]	@ 0x28
 8013ef6:	f1bc 0f00 	cmp.w	ip, #0
 8013efa:	d06f      	beq.n	8013fdc <forward_conv2d_if32of32wf32_nl_pool+0x2dc>
 8013efc:	f8dc 7000 	ldr.w	r7, [ip]
 8013f00:	b10f      	cbz	r7, 8013f06 <forward_conv2d_if32of32wf32_nl_pool+0x206>
 8013f02:	69bf      	ldr	r7, [r7, #24]
 8013f04:	68bf      	ldr	r7, [r7, #8]
 8013f06:	9b3e      	ldr	r3, [sp, #248]	@ 0xf8
 8013f08:	9513      	str	r5, [sp, #76]	@ 0x4c
 8013f0a:	931f      	str	r3, [sp, #124]	@ 0x7c
 8013f0c:	9b3f      	ldr	r3, [sp, #252]	@ 0xfc
 8013f0e:	960e      	str	r6, [sp, #56]	@ 0x38
 8013f10:	931e      	str	r3, [sp, #120]	@ 0x78
 8013f12:	9b3d      	ldr	r3, [sp, #244]	@ 0xf4
 8013f14:	931d      	str	r3, [sp, #116]	@ 0x74
 8013f16:	9b3c      	ldr	r3, [sp, #240]	@ 0xf0
 8013f18:	e9cd 431b 	strd	r4, r3, [sp, #108]	@ 0x6c
 8013f1c:	9b3b      	ldr	r3, [sp, #236]	@ 0xec
 8013f1e:	fa0f f48e 	sxth.w	r4, lr
 8013f22:	e9cd a319 	strd	sl, r3, [sp, #100]	@ 0x64
 8013f26:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8013f28:	9318      	str	r3, [sp, #96]	@ 0x60
 8013f2a:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8013f2c:	9317      	str	r3, [sp, #92]	@ 0x5c
 8013f2e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8013f30:	e9cd 9315 	strd	r9, r3, [sp, #84]	@ 0x54
 8013f34:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 8013f36:	9312      	str	r3, [sp, #72]	@ 0x48
 8013f38:	9b3a      	ldr	r3, [sp, #232]	@ 0xe8
 8013f3a:	9311      	str	r3, [sp, #68]	@ 0x44
 8013f3c:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 8013f3e:	e9cd 830f 	strd	r8, r3, [sp, #60]	@ 0x3c
 8013f42:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 8013f44:	930d      	str	r3, [sp, #52]	@ 0x34
 8013f46:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 8013f48:	930c      	str	r3, [sp, #48]	@ 0x30
 8013f4a:	9b36      	ldr	r3, [sp, #216]	@ 0xd8
 8013f4c:	9414      	str	r4, [sp, #80]	@ 0x50
 8013f4e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013f50:	9b37      	ldr	r3, [sp, #220]	@ 0xdc
 8013f52:	930a      	str	r3, [sp, #40]	@ 0x28
 8013f54:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8013f56:	9309      	str	r3, [sp, #36]	@ 0x24
 8013f58:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8013f5a:	9308      	str	r3, [sp, #32]
 8013f5c:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 8013f5e:	9307      	str	r3, [sp, #28]
 8013f60:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 8013f62:	9306      	str	r3, [sp, #24]
 8013f64:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8013f66:	9305      	str	r3, [sp, #20]
 8013f68:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8013f6a:	9304      	str	r3, [sp, #16]
 8013f6c:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 8013f6e:	9303      	str	r3, [sp, #12]
 8013f70:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8013f72:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8013f76:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8013f7a:	465b      	mov	r3, fp
 8013f7c:	69a4      	ldr	r4, [r4, #24]
 8013f7e:	68a4      	ldr	r4, [r4, #8]
 8013f80:	9400      	str	r4, [sp, #0]
 8013f82:	f000 f9cf 	bl	8014324 <forward_lite_conv2d_if32of32wf32_pool>
 8013f86:	b043      	add	sp, #268	@ 0x10c
 8013f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f8c:	2300      	movs	r3, #0
 8013f8e:	685b      	ldr	r3, [r3, #4]
 8013f90:	deff      	udf	#255	@ 0xff
 8013f92:	b10b      	cbz	r3, 8013f98 <forward_conv2d_if32of32wf32_nl_pool+0x298>
 8013f94:	689b      	ldr	r3, [r3, #8]
 8013f96:	9322      	str	r3, [sp, #136]	@ 0x88
 8013f98:	2301      	movs	r3, #1
 8013f9a:	f8cd 80b0 	str.w	r8, [sp, #176]	@ 0xb0
 8013f9e:	932b      	str	r3, [sp, #172]	@ 0xac
 8013fa0:	e75f      	b.n	8013e62 <forward_conv2d_if32of32wf32_nl_pool+0x162>
 8013fa2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8013fa4:	b10b      	cbz	r3, 8013faa <forward_conv2d_if32of32wf32_nl_pool+0x2aa>
 8013fa6:	689b      	ldr	r3, [r3, #8]
 8013fa8:	9322      	str	r3, [sp, #136]	@ 0x88
 8013faa:	2301      	movs	r3, #1
 8013fac:	2100      	movs	r1, #0
 8013fae:	e9cd 312b 	strd	r3, r1, [sp, #172]	@ 0xac
 8013fb2:	e756      	b.n	8013e62 <forward_conv2d_if32of32wf32_nl_pool+0x162>
 8013fb4:	2b01      	cmp	r3, #1
 8013fb6:	d90e      	bls.n	8013fd6 <forward_conv2d_if32of32wf32_nl_pool+0x2d6>
 8013fb8:	4642      	mov	r2, r8
 8013fba:	f8cd 8100 	str.w	r8, [sp, #256]	@ 0x100
 8013fbe:	e6d4      	b.n	8013d6a <forward_conv2d_if32of32wf32_nl_pool+0x6a>
 8013fc0:	2300      	movs	r3, #0
 8013fc2:	9340      	str	r3, [sp, #256]	@ 0x100
 8013fc4:	e6cf      	b.n	8013d66 <forward_conv2d_if32of32wf32_nl_pool+0x66>
 8013fc6:	2301      	movs	r3, #1
 8013fc8:	f8d4 c018 	ldr.w	ip, [r4, #24]
 8013fcc:	932b      	str	r3, [sp, #172]	@ 0xac
 8013fce:	f8bc 3000 	ldrh.w	r3, [ip]
 8013fd2:	9321      	str	r3, [sp, #132]	@ 0x84
 8013fd4:	e745      	b.n	8013e62 <forward_conv2d_if32of32wf32_nl_pool+0x162>
 8013fd6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013fda:	deff      	udf	#255	@ 0xff
 8013fdc:	f8dc 3018 	ldr.w	r3, [ip, #24]
 8013fe0:	deff      	udf	#255	@ 0xff
 8013fe2:	bf00      	nop

08013fe4 <forward_dense>:
 8013fe4:	6982      	ldr	r2, [r0, #24]
 8013fe6:	8813      	ldrh	r3, [r2, #0]
 8013fe8:	2b00      	cmp	r3, #0
 8013fea:	d043      	beq.n	8014074 <forward_dense+0x90>
 8013fec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013ff0:	6855      	ldr	r5, [r2, #4]
 8013ff2:	b08e      	sub	sp, #56	@ 0x38
 8013ff4:	6869      	ldr	r1, [r5, #4]
 8013ff6:	b101      	cbz	r1, 8013ffa <forward_dense+0x16>
 8013ff8:	6809      	ldr	r1, [r1, #0]
 8013ffa:	2b01      	cmp	r3, #1
 8013ffc:	d069      	beq.n	80140d2 <forward_dense+0xee>
 8013ffe:	692a      	ldr	r2, [r5, #16]
 8014000:	b102      	cbz	r2, 8014004 <forward_dense+0x20>
 8014002:	6812      	ldr	r2, [r2, #0]
 8014004:	2b02      	cmp	r3, #2
 8014006:	d061      	beq.n	80140cc <forward_dense+0xe8>
 8014008:	69ec      	ldr	r4, [r5, #28]
 801400a:	2c00      	cmp	r4, #0
 801400c:	d057      	beq.n	80140be <forward_dense+0xda>
 801400e:	8b2e      	ldrh	r6, [r5, #24]
 8014010:	6820      	ldr	r0, [r4, #0]
 8014012:	2e01      	cmp	r6, #1
 8014014:	d955      	bls.n	80140c2 <forward_dense+0xde>
 8014016:	6864      	ldr	r4, [r4, #4]
 8014018:	f8d0 9018 	ldr.w	r9, [r0, #24]
 801401c:	2b03      	cmp	r3, #3
 801401e:	68d0      	ldr	r0, [r2, #12]
 8014020:	68cf      	ldr	r7, [r1, #12]
 8014022:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8014026:	f8d7 a004 	ldr.w	sl, [r7, #4]
 801402a:	e9d0 7602 	ldrd	r7, r6, [r0, #8]
 801402e:	f8d9 0000 	ldr.w	r0, [r9]
 8014032:	fb06 f807 	mul.w	r8, r6, r7
 8014036:	f020 4c7e 	bic.w	ip, r0, #4261412864	@ 0xfe000000
 801403a:	d044      	beq.n	80140c6 <forward_dense+0xe2>
 801403c:	6aad      	ldr	r5, [r5, #40]	@ 0x28
 801403e:	b11d      	cbz	r5, 8014048 <forward_dense+0x64>
 8014040:	682d      	ldr	r5, [r5, #0]
 8014042:	b10d      	cbz	r5, 8014048 <forward_dense+0x64>
 8014044:	69ab      	ldr	r3, [r5, #24]
 8014046:	689d      	ldr	r5, [r3, #8]
 8014048:	6992      	ldr	r2, [r2, #24]
 801404a:	698b      	ldr	r3, [r1, #24]
 801404c:	6890      	ldr	r0, [r2, #8]
 801404e:	6899      	ldr	r1, [r3, #8]
 8014050:	b10c      	cbz	r4, 8014056 <forward_dense+0x72>
 8014052:	69a3      	ldr	r3, [r4, #24]
 8014054:	689c      	ldr	r4, [r3, #8]
 8014056:	4b20      	ldr	r3, [pc, #128]	@ (80140d8 <forward_dense+0xf4>)
 8014058:	459c      	cmp	ip, r3
 801405a:	e9d9 2902 	ldrd	r2, r9, [r9, #8]
 801405e:	d023      	beq.n	80140a8 <forward_dense+0xc4>
 8014060:	4e1e      	ldr	r6, [pc, #120]	@ (80140dc <forward_dense+0xf8>)
 8014062:	45b4      	cmp	ip, r6
 8014064:	d015      	beq.n	8014092 <forward_dense+0xae>
 8014066:	f5a3 039c 	sub.w	r3, r3, #5111808	@ 0x4e0000
 801406a:	459c      	cmp	ip, r3
 801406c:	d004      	beq.n	8014078 <forward_dense+0x94>
 801406e:	b00e      	add	sp, #56	@ 0x38
 8014070:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014074:	685b      	ldr	r3, [r3, #4]
 8014076:	deff      	udf	#255	@ 0xff
 8014078:	e9cd 0107 	strd	r0, r1, [sp, #28]
 801407c:	a807      	add	r0, sp, #28
 801407e:	9209      	str	r2, [sp, #36]	@ 0x24
 8014080:	e9cd 4a0a 	strd	r4, sl, [sp, #40]	@ 0x28
 8014084:	e9cd e80c 	strd	lr, r8, [sp, #48]	@ 0x30
 8014088:	f001 fb98 	bl	80157bc <forward_lite_dense_if32of32wf32>
 801408c:	b00e      	add	sp, #56	@ 0x38
 801408e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014092:	464b      	mov	r3, r9
 8014094:	9500      	str	r5, [sp, #0]
 8014096:	e9cd e803 	strd	lr, r8, [sp, #12]
 801409a:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 801409e:	f001 fceb 	bl	8015a78 <forward_lite_dense_if32of32wf32_lut4>
 80140a2:	b00e      	add	sp, #56	@ 0x38
 80140a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80140a8:	464b      	mov	r3, r9
 80140aa:	9500      	str	r5, [sp, #0]
 80140ac:	e9cd e803 	strd	lr, r8, [sp, #12]
 80140b0:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 80140b4:	f001 fe0a 	bl	8015ccc <forward_lite_dense_if32of32wf32_lut8>
 80140b8:	b00e      	add	sp, #56	@ 0x38
 80140ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80140be:	4620      	mov	r0, r4
 80140c0:	e7aa      	b.n	8014018 <forward_dense+0x34>
 80140c2:	2400      	movs	r4, #0
 80140c4:	e7a8      	b.n	8014018 <forward_dense+0x34>
 80140c6:	2300      	movs	r3, #0
 80140c8:	685b      	ldr	r3, [r3, #4]
 80140ca:	deff      	udf	#255	@ 0xff
 80140cc:	2300      	movs	r3, #0
 80140ce:	685b      	ldr	r3, [r3, #4]
 80140d0:	deff      	udf	#255	@ 0xff
 80140d2:	2300      	movs	r3, #0
 80140d4:	685b      	ldr	r3, [r3, #4]
 80140d6:	deff      	udf	#255	@ 0xff
 80140d8:	00d01040 	.word	0x00d01040
 80140dc:	00f01040 	.word	0x00f01040

080140e0 <forward_relu>:
 80140e0:	6982      	ldr	r2, [r0, #24]
 80140e2:	8813      	ldrh	r3, [r2, #0]
 80140e4:	b323      	cbz	r3, 8014130 <forward_relu+0x50>
 80140e6:	6851      	ldr	r1, [r2, #4]
 80140e8:	684a      	ldr	r2, [r1, #4]
 80140ea:	b102      	cbz	r2, 80140ee <forward_relu+0xe>
 80140ec:	6812      	ldr	r2, [r2, #0]
 80140ee:	2b01      	cmp	r3, #1
 80140f0:	f000 8086 	beq.w	8014200 <forward_relu+0x120>
 80140f4:	b470      	push	{r4, r5, r6}
 80140f6:	690b      	ldr	r3, [r1, #16]
 80140f8:	b103      	cbz	r3, 80140fc <forward_relu+0x1c>
 80140fa:	681b      	ldr	r3, [r3, #0]
 80140fc:	69c6      	ldr	r6, [r0, #28]
 80140fe:	b1ce      	cbz	r6, 8014134 <forward_relu+0x54>
 8014100:	6871      	ldr	r1, [r6, #4]
 8014102:	6998      	ldr	r0, [r3, #24]
 8014104:	2901      	cmp	r1, #1
 8014106:	d03f      	beq.n	8014188 <forward_relu+0xa8>
 8014108:	6893      	ldr	r3, [r2, #8]
 801410a:	6991      	ldr	r1, [r2, #24]
 801410c:	0a1b      	lsrs	r3, r3, #8
 801410e:	6880      	ldr	r0, [r0, #8]
 8014110:	6889      	ldr	r1, [r1, #8]
 8014112:	d06c      	beq.n	80141ee <forward_relu+0x10e>
 8014114:	68d5      	ldr	r5, [r2, #12]
 8014116:	2201      	movs	r2, #1
 8014118:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801411c:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8014120:	429d      	cmp	r5, r3
 8014122:	fb04 f202 	mul.w	r2, r4, r2
 8014126:	d1f9      	bne.n	801411c <forward_relu+0x3c>
 8014128:	68b3      	ldr	r3, [r6, #8]
 801412a:	bc70      	pop	{r4, r5, r6}
 801412c:	f000 bd04 	b.w	8014b38 <forward_lite_nl_relu_generic_if32of32_kernel>
 8014130:	685b      	ldr	r3, [r3, #4]
 8014132:	deff      	udf	#255	@ 0xff
 8014134:	6999      	ldr	r1, [r3, #24]
 8014136:	6893      	ldr	r3, [r2, #8]
 8014138:	6990      	ldr	r0, [r2, #24]
 801413a:	0a1b      	lsrs	r3, r3, #8
 801413c:	6889      	ldr	r1, [r1, #8]
 801413e:	6884      	ldr	r4, [r0, #8]
 8014140:	d057      	beq.n	80141f2 <forward_relu+0x112>
 8014142:	68d5      	ldr	r5, [r2, #12]
 8014144:	2201      	movs	r2, #1
 8014146:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801414a:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 801414e:	429d      	cmp	r5, r3
 8014150:	fb00 f202 	mul.w	r2, r0, r2
 8014154:	d1f9      	bne.n	801414a <forward_relu+0x6a>
 8014156:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801415a:	4413      	add	r3, r2
 801415c:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8014160:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8014164:	4294      	cmp	r4, r2
 8014166:	d80d      	bhi.n	8014184 <forward_relu+0xa4>
 8014168:	3204      	adds	r2, #4
 801416a:	3104      	adds	r1, #4
 801416c:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8014208 <forward_relu+0x128>
 8014170:	4613      	mov	r3, r2
 8014172:	ed72 7a01 	vldmdb	r2!, {s15}
 8014176:	3b08      	subs	r3, #8
 8014178:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 801417c:	ed61 7a01 	vstmdb	r1!, {s15}
 8014180:	429c      	cmp	r4, r3
 8014182:	d9f5      	bls.n	8014170 <forward_relu+0x90>
 8014184:	bc70      	pop	{r4, r5, r6}
 8014186:	4770      	bx	lr
 8014188:	6993      	ldr	r3, [r2, #24]
 801418a:	6880      	ldr	r0, [r0, #8]
 801418c:	689c      	ldr	r4, [r3, #8]
 801418e:	6893      	ldr	r3, [r2, #8]
 8014190:	0a1b      	lsrs	r3, r3, #8
 8014192:	d030      	beq.n	80141f6 <forward_relu+0x116>
 8014194:	68d5      	ldr	r5, [r2, #12]
 8014196:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801419a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801419e:	429d      	cmp	r5, r3
 80141a0:	fb02 f101 	mul.w	r1, r2, r1
 80141a4:	d1f9      	bne.n	801419a <forward_relu+0xba>
 80141a6:	f06f 4240 	mvn.w	r2, #3221225472	@ 0xc0000000
 80141aa:	68b3      	ldr	r3, [r6, #8]
 80141ac:	440a      	add	r2, r1
 80141ae:	ed93 7a00 	vldr	s14, [r3]
 80141b2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80141b6:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80141ba:	429c      	cmp	r4, r3
 80141bc:	d8e2      	bhi.n	8014184 <forward_relu+0xa4>
 80141be:	1d02      	adds	r2, r0, #4
 80141c0:	3304      	adds	r3, #4
 80141c2:	2000      	movs	r0, #0
 80141c4:	ed53 7a01 	vldr	s15, [r3, #-4]
 80141c8:	1f19      	subs	r1, r3, #4
 80141ca:	3b08      	subs	r3, #8
 80141cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80141d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141d4:	d405      	bmi.n	80141e2 <forward_relu+0x102>
 80141d6:	429c      	cmp	r4, r3
 80141d8:	f842 0d04 	str.w	r0, [r2, #-4]!
 80141dc:	d8d2      	bhi.n	8014184 <forward_relu+0xa4>
 80141de:	460b      	mov	r3, r1
 80141e0:	e7f0      	b.n	80141c4 <forward_relu+0xe4>
 80141e2:	429c      	cmp	r4, r3
 80141e4:	ed62 7a01 	vstmdb	r2!, {s15}
 80141e8:	d8cc      	bhi.n	8014184 <forward_relu+0xa4>
 80141ea:	460b      	mov	r3, r1
 80141ec:	e7ea      	b.n	80141c4 <forward_relu+0xe4>
 80141ee:	2201      	movs	r2, #1
 80141f0:	e79a      	b.n	8014128 <forward_relu+0x48>
 80141f2:	4622      	mov	r2, r4
 80141f4:	e7b8      	b.n	8014168 <forward_relu+0x88>
 80141f6:	68b2      	ldr	r2, [r6, #8]
 80141f8:	4623      	mov	r3, r4
 80141fa:	ed92 7a00 	vldr	s14, [r2]
 80141fe:	e7de      	b.n	80141be <forward_relu+0xde>
 8014200:	2300      	movs	r3, #0
 8014202:	685b      	ldr	r3, [r3, #4]
 8014204:	deff      	udf	#255	@ 0xff
 8014206:	bf00      	nop
 8014208:	00000000 	.word	0x00000000

0801420c <forward_upsample_bilinear>:
 801420c:	6983      	ldr	r3, [r0, #24]
 801420e:	881a      	ldrh	r2, [r3, #0]
 8014210:	2a00      	cmp	r2, #0
 8014212:	d04f      	beq.n	80142b4 <forward_upsample_bilinear+0xa8>
 8014214:	6859      	ldr	r1, [r3, #4]
 8014216:	4684      	mov	ip, r0
 8014218:	684b      	ldr	r3, [r1, #4]
 801421a:	b103      	cbz	r3, 801421e <forward_upsample_bilinear+0x12>
 801421c:	681b      	ldr	r3, [r3, #0]
 801421e:	2a01      	cmp	r2, #1
 8014220:	d074      	beq.n	801430c <forward_upsample_bilinear+0x100>
 8014222:	690a      	ldr	r2, [r1, #16]
 8014224:	2a00      	cmp	r2, #0
 8014226:	d074      	beq.n	8014312 <forward_upsample_bilinear+0x106>
 8014228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801422c:	699c      	ldr	r4, [r3, #24]
 801422e:	b084      	sub	sp, #16
 8014230:	68d8      	ldr	r0, [r3, #12]
 8014232:	6821      	ldr	r1, [r4, #0]
 8014234:	6815      	ldr	r5, [r2, #0]
 8014236:	f8dc 3020 	ldr.w	r3, [ip, #32]
 801423a:	f021 417e 	bic.w	r1, r1, #4261412864	@ 0xfe000000
 801423e:	f8df 80e0 	ldr.w	r8, [pc, #224]	@ 8014320 <forward_upsample_bilinear+0x114>
 8014242:	689b      	ldr	r3, [r3, #8]
 8014244:	68ee      	ldr	r6, [r5, #12]
 8014246:	4541      	cmp	r1, r8
 8014248:	edd3 0a00 	vldr	s1, [r3]
 801424c:	ed93 0a01 	vldr	s0, [r3, #4]
 8014250:	6882      	ldr	r2, [r0, #8]
 8014252:	68c3      	ldr	r3, [r0, #12]
 8014254:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8014258:	e9d6 6702 	ldrd	r6, r7, [r6, #8]
 801425c:	d048      	beq.n	80142f0 <forward_upsample_bilinear+0xe4>
 801425e:	dd14      	ble.n	801428a <forward_upsample_bilinear+0x7e>
 8014260:	482d      	ldr	r0, [pc, #180]	@ (8014318 <forward_upsample_bilinear+0x10c>)
 8014262:	4281      	cmp	r1, r0
 8014264:	d036      	beq.n	80142d4 <forward_upsample_bilinear+0xc8>
 8014266:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 801426a:	4281      	cmp	r1, r0
 801426c:	d10a      	bne.n	8014284 <forward_upsample_bilinear+0x78>
 801426e:	69a9      	ldr	r1, [r5, #24]
 8014270:	68a0      	ldr	r0, [r4, #8]
 8014272:	f89c 401d 	ldrb.w	r4, [ip, #29]
 8014276:	6889      	ldr	r1, [r1, #8]
 8014278:	e9cd e402 	strd	lr, r4, [sp, #8]
 801427c:	e9cd 6700 	strd	r6, r7, [sp]
 8014280:	f001 f91c 	bl	80154bc <forward_lite_upsample_bilinear_is16os16>
 8014284:	b004      	add	sp, #16
 8014286:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801428a:	4824      	ldr	r0, [pc, #144]	@ (801431c <forward_upsample_bilinear+0x110>)
 801428c:	4281      	cmp	r1, r0
 801428e:	d013      	beq.n	80142b8 <forward_upsample_bilinear+0xac>
 8014290:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8014294:	4281      	cmp	r1, r0
 8014296:	d1f5      	bne.n	8014284 <forward_upsample_bilinear+0x78>
 8014298:	69a9      	ldr	r1, [r5, #24]
 801429a:	68a0      	ldr	r0, [r4, #8]
 801429c:	f89c 401d 	ldrb.w	r4, [ip, #29]
 80142a0:	6889      	ldr	r1, [r1, #8]
 80142a2:	e9cd e402 	strd	lr, r4, [sp, #8]
 80142a6:	e9cd 6700 	strd	r6, r7, [sp]
 80142aa:	f001 f9c7 	bl	801563c <forward_lite_upsample_bilinear_iu16ou16>
 80142ae:	b004      	add	sp, #16
 80142b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80142b4:	6853      	ldr	r3, [r2, #4]
 80142b6:	deff      	udf	#255	@ 0xff
 80142b8:	69a9      	ldr	r1, [r5, #24]
 80142ba:	68a0      	ldr	r0, [r4, #8]
 80142bc:	f89c 401d 	ldrb.w	r4, [ip, #29]
 80142c0:	6889      	ldr	r1, [r1, #8]
 80142c2:	e9cd e402 	strd	lr, r4, [sp, #8]
 80142c6:	e9cd 6700 	strd	r6, r7, [sp]
 80142ca:	f001 f835 	bl	8015338 <forward_lite_upsample_bilinear_iu8ou8>
 80142ce:	b004      	add	sp, #16
 80142d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80142d4:	69a9      	ldr	r1, [r5, #24]
 80142d6:	68a0      	ldr	r0, [r4, #8]
 80142d8:	f89c 401d 	ldrb.w	r4, [ip, #29]
 80142dc:	6889      	ldr	r1, [r1, #8]
 80142de:	e9cd e402 	strd	lr, r4, [sp, #8]
 80142e2:	e9cd 6700 	strd	r6, r7, [sp]
 80142e6:	f000 ff65 	bl	80151b4 <forward_lite_upsample_bilinear_is8os8>
 80142ea:	b004      	add	sp, #16
 80142ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80142f0:	69a9      	ldr	r1, [r5, #24]
 80142f2:	68a0      	ldr	r0, [r4, #8]
 80142f4:	f89c 401d 	ldrb.w	r4, [ip, #29]
 80142f8:	6889      	ldr	r1, [r1, #8]
 80142fa:	e9cd e402 	strd	lr, r4, [sp, #8]
 80142fe:	e9cd 6700 	strd	r6, r7, [sp]
 8014302:	f000 fe97 	bl	8015034 <forward_lite_upsample_bilinear_if32of32>
 8014306:	b004      	add	sp, #16
 8014308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801430c:	2300      	movs	r3, #0
 801430e:	685b      	ldr	r3, [r3, #4]
 8014310:	deff      	udf	#255	@ 0xff
 8014312:	68d3      	ldr	r3, [r2, #12]
 8014314:	deff      	udf	#255	@ 0xff
 8014316:	bf00      	nop
 8014318:	00840440 	.word	0x00840440
 801431c:	00040440 	.word	0x00040440
 8014320:	00821040 	.word	0x00821040

08014324 <forward_lite_conv2d_if32of32wf32_pool>:
 8014324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014328:	ed2d 8b0e 	vpush	{d8-d14}
 801432c:	b0c9      	sub	sp, #292	@ 0x124
 801432e:	4696      	mov	lr, r2
 8014330:	4680      	mov	r8, r0
 8014332:	f9bd 51cc 	ldrsh.w	r5, [sp, #460]	@ 0x1cc
 8014336:	9323      	str	r3, [sp, #140]	@ 0x8c
 8014338:	f9bd 31ec 	ldrsh.w	r3, [sp, #492]	@ 0x1ec
 801433c:	9138      	str	r1, [sp, #224]	@ 0xe0
 801433e:	9239      	str	r2, [sp, #228]	@ 0xe4
 8014340:	f9bd 118c 	ldrsh.w	r1, [sp, #396]	@ 0x18c
 8014344:	fb05 f203 	mul.w	r2, r5, r3
 8014348:	f9bd 419c 	ldrsh.w	r4, [sp, #412]	@ 0x19c
 801434c:	9129      	str	r1, [sp, #164]	@ 0xa4
 801434e:	460e      	mov	r6, r1
 8014350:	fb01 f202 	mul.w	r2, r1, r2
 8014354:	f9bd 1194 	ldrsh.w	r1, [sp, #404]	@ 0x194
 8014358:	f8bd c1b0 	ldrh.w	ip, [sp, #432]	@ 0x1b0
 801435c:	9142      	str	r1, [sp, #264]	@ 0x108
 801435e:	f9bd 11a0 	ldrsh.w	r1, [sp, #416]	@ 0x1a0
 8014362:	f9bd 7190 	ldrsh.w	r7, [sp, #400]	@ 0x190
 8014366:	932d      	str	r3, [sp, #180]	@ 0xb4
 8014368:	942a      	str	r4, [sp, #168]	@ 0xa8
 801436a:	f9bd 3198 	ldrsh.w	r3, [sp, #408]	@ 0x198
 801436e:	f9bd 4188 	ldrsh.w	r4, [sp, #392]	@ 0x188
 8014372:	9113      	str	r1, [sp, #76]	@ 0x4c
 8014374:	f8cd c054 	str.w	ip, [sp, #84]	@ 0x54
 8014378:	f8bd 11a8 	ldrh.w	r1, [sp, #424]	@ 0x1a8
 801437c:	f8bd c1b4 	ldrh.w	ip, [sp, #436]	@ 0x1b4
 8014380:	9041      	str	r0, [sp, #260]	@ 0x104
 8014382:	933a      	str	r3, [sp, #232]	@ 0xe8
 8014384:	f8bd 01ac 	ldrh.w	r0, [sp, #428]	@ 0x1ac
 8014388:	912b      	str	r1, [sp, #172]	@ 0xac
 801438a:	f9bd 91a4 	ldrsh.w	r9, [sp, #420]	@ 0x1a4
 801438e:	4243      	negs	r3, r0
 8014390:	950f      	str	r5, [sp, #60]	@ 0x3c
 8014392:	9418      	str	r4, [sp, #96]	@ 0x60
 8014394:	9714      	str	r7, [sp, #80]	@ 0x50
 8014396:	f8cd c0b0 	str.w	ip, [sp, #176]	@ 0xb0
 801439a:	f9bd c1b8 	ldrsh.w	ip, [sp, #440]	@ 0x1b8
 801439e:	931e      	str	r3, [sp, #120]	@ 0x78
 80143a0:	f8cd c10c 	str.w	ip, [sp, #268]	@ 0x10c
 80143a4:	f9bd c1e8 	ldrsh.w	ip, [sp, #488]	@ 0x1e8
 80143a8:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 80143aa:	f8cd c110 	str.w	ip, [sp, #272]	@ 0x110
 80143ae:	f9bd c1f0 	ldrsh.w	ip, [sp, #496]	@ 0x1f0
 80143b2:	2b00      	cmp	r3, #0
 80143b4:	f9bd 11d0 	ldrsh.w	r1, [sp, #464]	@ 0x1d0
 80143b8:	f8cd c114 	str.w	ip, [sp, #276]	@ 0x114
 80143bc:	f9bd c1f4 	ldrsh.w	ip, [sp, #500]	@ 0x1f4
 80143c0:	f8cd c0b8 	str.w	ip, [sp, #184]	@ 0xb8
 80143c4:	f9bd c1f8 	ldrsh.w	ip, [sp, #504]	@ 0x1f8
 80143c8:	f8cd c118 	str.w	ip, [sp, #280]	@ 0x118
 80143cc:	f9bd c1fc 	ldrsh.w	ip, [sp, #508]	@ 0x1fc
 80143d0:	f8cd c074 	str.w	ip, [sp, #116]	@ 0x74
 80143d4:	f340 80a9 	ble.w	801452a <forward_lite_conv2d_if32of32wf32_pool+0x206>
 80143d8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80143da:	3901      	subs	r1, #1
 80143dc:	9020      	str	r0, [sp, #128]	@ 0x80
 80143de:	fb03 f309 	mul.w	r3, r3, r9
 80143e2:	fa1f fc81 	uxth.w	ip, r1
 80143e6:	982e      	ldr	r0, [sp, #184]	@ 0xb8
 80143e8:	fb04 f303 	mul.w	r3, r4, r3
 80143ec:	ed9f 8a51 	vldr	s16, [pc, #324]	@ 8014534 <forward_lite_conv2d_if32of32wf32_pool+0x210>
 80143f0:	f8cd c084 	str.w	ip, [sp, #132]	@ 0x84
 80143f4:	0099      	lsls	r1, r3, #2
 80143f6:	9124      	str	r1, [sp, #144]	@ 0x90
 80143f8:	4631      	mov	r1, r6
 80143fa:	b2b6      	uxth	r6, r6
 80143fc:	fb00 f301 	mul.w	r3, r0, r1
 8014400:	9636      	str	r6, [sp, #216]	@ 0xd8
 8014402:	00a6      	lsls	r6, r4, #2
 8014404:	fb05 f303 	mul.w	r3, r5, r3
 8014408:	fb05 f501 	mul.w	r5, r5, r1
 801440c:	0098      	lsls	r0, r3, #2
 801440e:	9616      	str	r6, [sp, #88]	@ 0x58
 8014410:	953d      	str	r5, [sp, #244]	@ 0xf4
 8014412:	f10e 4578 	add.w	r5, lr, #4160749568	@ 0xf8000000
 8014416:	903e      	str	r0, [sp, #248]	@ 0xf8
 8014418:	9836      	ldr	r0, [sp, #216]	@ 0xd8
 801441a:	953b      	str	r5, [sp, #236]	@ 0xec
 801441c:	1e43      	subs	r3, r0, #1
 801441e:	b29b      	uxth	r3, r3
 8014420:	3301      	adds	r3, #1
 8014422:	0098      	lsls	r0, r3, #2
 8014424:	9035      	str	r0, [sp, #212]	@ 0xd4
 8014426:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 8014428:	fb00 f307 	mul.w	r3, r0, r7
 801442c:	fb04 f303 	mul.w	r3, r4, r3
 8014430:	0098      	lsls	r0, r3, #2
 8014432:	9b3a      	ldr	r3, [sp, #232]	@ 0xe8
 8014434:	9034      	str	r0, [sp, #208]	@ 0xd0
 8014436:	0090      	lsls	r0, r2, #2
 8014438:	fb01 f303 	mul.w	r3, r1, r3
 801443c:	0089      	lsls	r1, r1, #2
 801443e:	9032      	str	r0, [sp, #200]	@ 0xc8
 8014440:	9860      	ldr	r0, [sp, #384]	@ 0x180
 8014442:	9112      	str	r1, [sp, #72]	@ 0x48
 8014444:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8014448:	0098      	lsls	r0, r3, #2
 801444a:	fb07 f306 	mul.w	r3, r7, r6
 801444e:	921f      	str	r2, [sp, #124]	@ 0x7c
 8014450:	903c      	str	r0, [sp, #240]	@ 0xf0
 8014452:	981e      	ldr	r0, [sp, #120]	@ 0x78
 8014454:	fb00 8703 	mla	r7, r0, r3, r8
 8014458:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801445a:	9832      	ldr	r0, [sp, #200]	@ 0xc8
 801445c:	9722      	str	r7, [sp, #136]	@ 0x88
 801445e:	425f      	negs	r7, r3
 8014460:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8014462:	4241      	negs	r1, r0
 8014464:	9731      	str	r7, [sp, #196]	@ 0xc4
 8014466:	fb03 f304 	mul.w	r3, r3, r4
 801446a:	9125      	str	r1, [sp, #148]	@ 0x94
 801446c:	009c      	lsls	r4, r3, #2
 801446e:	fb06 f107 	mul.w	r1, r6, r7
 8014472:	9417      	str	r4, [sp, #92]	@ 0x5c
 8014474:	2400      	movs	r4, #0
 8014476:	9137      	str	r1, [sp, #220]	@ 0xdc
 8014478:	9960      	ldr	r1, [sp, #384]	@ 0x180
 801447a:	9427      	str	r4, [sp, #156]	@ 0x9c
 801447c:	911b      	str	r1, [sp, #108]	@ 0x6c
 801447e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8014480:	9428      	str	r4, [sp, #160]	@ 0xa0
 8014482:	9333      	str	r3, [sp, #204]	@ 0xcc
 8014484:	9b76      	ldr	r3, [sp, #472]	@ 0x1d8
 8014486:	932f      	str	r3, [sp, #188]	@ 0xbc
 8014488:	1e53      	subs	r3, r2, #1
 801448a:	9347      	str	r3, [sp, #284]	@ 0x11c
 801448c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801448e:	3301      	adds	r3, #1
 8014490:	b21b      	sxth	r3, r3
 8014492:	2b00      	cmp	r3, #0
 8014494:	dc68      	bgt.n	8014568 <forward_lite_conv2d_if32of32wf32_pool+0x244>
 8014496:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8014498:	041b      	lsls	r3, r3, #16
 801449a:	f100 81d5 	bmi.w	8014848 <forward_lite_conv2d_if32of32wf32_pool+0x524>
 801449e:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 80144a0:	9e1d      	ldr	r6, [sp, #116]	@ 0x74
 80144a2:	42b2      	cmp	r2, r6
 80144a4:	dc48      	bgt.n	8014538 <forward_lite_conv2d_if32of32wf32_pool+0x214>
 80144a6:	9c2c      	ldr	r4, [sp, #176]	@ 0xb0
 80144a8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80144aa:	981e      	ldr	r0, [sp, #120]	@ 0x78
 80144ac:	3301      	adds	r3, #1
 80144ae:	9938      	ldr	r1, [sp, #224]	@ 0xe0
 80144b0:	4420      	add	r0, r4
 80144b2:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 80144b4:	b21d      	sxth	r5, r3
 80144b6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80144b8:	901e      	str	r0, [sp, #120]	@ 0x78
 80144ba:	983c      	ldr	r0, [sp, #240]	@ 0xf0
 80144bc:	1b1b      	subs	r3, r3, r4
 80144be:	9108      	str	r1, [sp, #32]
 80144c0:	4401      	add	r1, r0
 80144c2:	9320      	str	r3, [sp, #128]	@ 0x80
 80144c4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80144c6:	9138      	str	r1, [sp, #224]	@ 0xe0
 80144c8:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 80144ca:	9528      	str	r5, [sp, #160]	@ 0xa0
 80144cc:	440b      	add	r3, r1
 80144ce:	9322      	str	r3, [sp, #136]	@ 0x88
 80144d0:	b293      	uxth	r3, r2
 80144d2:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 80144d4:	9301      	str	r3, [sp, #4]
 80144d6:	1a9b      	subs	r3, r3, r2
 80144d8:	b29a      	uxth	r2, r3
 80144da:	b2bb      	uxth	r3, r7
 80144dc:	1af1      	subs	r1, r6, r3
 80144de:	9305      	str	r3, [sp, #20]
 80144e0:	9e33      	ldr	r6, [sp, #204]	@ 0xcc
 80144e2:	b20b      	sxth	r3, r1
 80144e4:	f8bd 103c 	ldrh.w	r1, [sp, #60]	@ 0x3c
 80144e8:	931d      	str	r3, [sp, #116]	@ 0x74
 80144ea:	b2b3      	uxth	r3, r6
 80144ec:	9303      	str	r3, [sp, #12]
 80144ee:	2301      	movs	r3, #1
 80144f0:	9307      	str	r3, [sp, #28]
 80144f2:	f8bd 30e8 	ldrh.w	r3, [sp, #232]	@ 0xe8
 80144f6:	9306      	str	r3, [sp, #24]
 80144f8:	f8bd 3114 	ldrh.w	r3, [sp, #276]	@ 0x114
 80144fc:	9304      	str	r3, [sp, #16]
 80144fe:	f8bd 3118 	ldrh.w	r3, [sp, #280]	@ 0x118
 8014502:	9302      	str	r3, [sp, #8]
 8014504:	f8bd 3110 	ldrh.w	r3, [sp, #272]	@ 0x110
 8014508:	9300      	str	r3, [sp, #0]
 801450a:	9b36      	ldr	r3, [sp, #216]	@ 0xd8
 801450c:	9860      	ldr	r0, [sp, #384]	@ 0x180
 801450e:	9c79      	ldr	r4, [sp, #484]	@ 0x1e4
 8014510:	47a0      	blx	r4
 8014512:	1bf3      	subs	r3, r6, r7
 8014514:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8014516:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801451a:	3a01      	subs	r2, #1
 801451c:	b21b      	sxth	r3, r3
 801451e:	b292      	uxth	r2, r2
 8014520:	9333      	str	r3, [sp, #204]	@ 0xcc
 8014522:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8014524:	9221      	str	r2, [sp, #132]	@ 0x84
 8014526:	42ab      	cmp	r3, r5
 8014528:	dcb0      	bgt.n	801448c <forward_lite_conv2d_if32of32wf32_pool+0x168>
 801452a:	b049      	add	sp, #292	@ 0x124
 801452c:	ecbd 8b0e 	vpop	{d8-d14}
 8014530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014534:	00000000 	.word	0x00000000
 8014538:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 801453a:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801453c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801453e:	440a      	add	r2, r1
 8014540:	3b01      	subs	r3, #1
 8014542:	921e      	str	r2, [sp, #120]	@ 0x78
 8014544:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8014546:	b29b      	uxth	r3, r3
 8014548:	1a52      	subs	r2, r2, r1
 801454a:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 801454c:	9321      	str	r3, [sp, #132]	@ 0x84
 801454e:	9220      	str	r2, [sp, #128]	@ 0x80
 8014550:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8014552:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8014554:	440a      	add	r2, r1
 8014556:	9222      	str	r2, [sp, #136]	@ 0x88
 8014558:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 801455a:	4293      	cmp	r3, r2
 801455c:	dde5      	ble.n	801452a <forward_lite_conv2d_if32of32wf32_pool+0x206>
 801455e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8014560:	3301      	adds	r3, #1
 8014562:	b21b      	sxth	r3, r3
 8014564:	2b00      	cmp	r3, #0
 8014566:	dd96      	ble.n	8014496 <forward_lite_conv2d_if32of32wf32_pool+0x172>
 8014568:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801456a:	2b00      	cmp	r3, #0
 801456c:	f2c0 82d1 	blt.w	8014b12 <forward_lite_conv2d_if32of32wf32_pool+0x7ee>
 8014570:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8014572:	931c      	str	r3, [sp, #112]	@ 0x70
 8014574:	2300      	movs	r3, #0
 8014576:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8014578:	9a42      	ldr	r2, [sp, #264]	@ 0x108
 801457a:	440a      	add	r2, r1
 801457c:	9943      	ldr	r1, [sp, #268]	@ 0x10c
 801457e:	428a      	cmp	r2, r1
 8014580:	bfd4      	ite	le
 8014582:	ebc3 0b02 	rsble	fp, r3, r2
 8014586:	ebc3 0b01 	rsbgt	fp, r3, r1
 801458a:	9a61      	ldr	r2, [sp, #388]	@ 0x184
 801458c:	2a00      	cmp	r2, #0
 801458e:	f000 819d 	beq.w	80148cc <forward_lite_conv2d_if32of32wf32_pool+0x5a8>
 8014592:	9a3b      	ldr	r2, [sp, #236]	@ 0xec
 8014594:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 8014598:	f0c0 8198 	bcc.w	80148cc <forward_lite_conv2d_if32of32wf32_pool+0x5a8>
 801459c:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801459e:	2a00      	cmp	r2, #0
 80145a0:	f340 8115 	ble.w	80147ce <forward_lite_conv2d_if32of32wf32_pool+0x4aa>
 80145a4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80145a6:	9937      	ldr	r1, [sp, #220]	@ 0xdc
 80145a8:	fb02 f303 	mul.w	r3, r2, r3
 80145ac:	9a35      	ldr	r2, [sp, #212]	@ 0xd4
 80145ae:	9319      	str	r3, [sp, #100]	@ 0x64
 80145b0:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80145b2:	189a      	adds	r2, r3, r2
 80145b4:	9326      	str	r3, [sp, #152]	@ 0x98
 80145b6:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80145b8:	923f      	str	r2, [sp, #252]	@ 0xfc
 80145ba:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80145bc:	9330      	str	r3, [sp, #192]	@ 0xc0
 80145be:	440a      	add	r2, r1
 80145c0:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 80145c2:	9240      	str	r2, [sp, #256]	@ 0x100
 80145c4:	931a      	str	r3, [sp, #104]	@ 0x68
 80145c6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80145c8:	9961      	ldr	r1, [sp, #388]	@ 0x184
 80145ca:	981a      	ldr	r0, [sp, #104]	@ 0x68
 80145cc:	f001 fe4a 	bl	8016264 <st_int8_copy>
 80145d0:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80145d2:	2b00      	cmp	r3, #0
 80145d4:	f000 8135 	beq.w	8014842 <forward_lite_conv2d_if32of32wf32_pool+0x51e>
 80145d8:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 80145da:	ecf3 1a01 	vldmia	r3!, {s3}
 80145de:	9330      	str	r3, [sp, #192]	@ 0xc0
 80145e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80145e2:	2b00      	cmp	r3, #0
 80145e4:	f000 80e8 	beq.w	80147b8 <forward_lite_conv2d_if32of32wf32_pool+0x494>
 80145e8:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 80145ea:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80145ec:	189a      	adds	r2, r3, r2
 80145ee:	920c      	str	r2, [sp, #48]	@ 0x30
 80145f0:	9a40      	ldr	r2, [sp, #256]	@ 0x100
 80145f2:	e9cd 230d 	strd	r2, r3, [sp, #52]	@ 0x34
 80145f6:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80145f8:	9310      	str	r3, [sp, #64]	@ 0x40
 80145fa:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 80145fc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80145fe:	2300      	movs	r3, #0
 8014600:	9311      	str	r3, [sp, #68]	@ 0x44
 8014602:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014604:	2b00      	cmp	r3, #0
 8014606:	f2c0 8113 	blt.w	8014830 <forward_lite_conv2d_if32of32wf32_pool+0x50c>
 801460a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801460c:	2600      	movs	r6, #0
 801460e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8014610:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8014612:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014614:	9c61      	ldr	r4, [sp, #388]	@ 0x184
 8014616:	4298      	cmp	r0, r3
 8014618:	bf94      	ite	ls
 801461a:	ebc6 0600 	rsbls	r6, r6, r0
 801461e:	ebc6 0603 	rsbhi	r6, r6, r3
 8014622:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8014624:	f1bb 0f00 	cmp.w	fp, #0
 8014628:	eba0 0906 	sub.w	r9, r0, r6
 801462c:	fb02 4203 	mla	r2, r2, r3, r4
 8014630:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8014632:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8014634:	eba4 0a06 	sub.w	sl, r4, r6
 8014638:	fb00 f606 	mul.w	r6, r0, r6
 801463c:	f340 80fe 	ble.w	801483c <forward_lite_conv2d_if32of32wf32_pool+0x518>
 8014640:	f026 070f 	bic.w	r7, r6, #15
 8014644:	eeb0 7a61 	vmov.f32	s14, s3
 8014648:	fb0a fa03 	mul.w	sl, sl, r3
 801464c:	f04f 0c00 	mov.w	ip, #0
 8014650:	f107 38ff 	add.w	r8, r7, #4294967295
 8014654:	fb09 f903 	mul.w	r9, r9, r3
 8014658:	ea4f 1818 	mov.w	r8, r8, lsr #4
 801465c:	f108 0801 	add.w	r8, r8, #1
 8014660:	ea4f 1e88 	mov.w	lr, r8, lsl #6
 8014664:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8014668:	2f00      	cmp	r7, #0
 801466a:	f340 80df 	ble.w	801482c <forward_lite_conv2d_if32of32wf32_pool+0x508>
 801466e:	f101 0040 	add.w	r0, r1, #64	@ 0x40
 8014672:	f102 0340 	add.w	r3, r2, #64	@ 0x40
 8014676:	2400      	movs	r4, #0
 8014678:	ed53 6a0f 	vldr	s13, [r3, #-60]	@ 0xffffffc4
 801467c:	3410      	adds	r4, #16
 801467e:	ed50 7a0f 	vldr	s15, [r0, #-60]	@ 0xffffffc4
 8014682:	3340      	adds	r3, #64	@ 0x40
 8014684:	ed50 4a10 	vldr	s9, [r0, #-64]	@ 0xffffffc0
 8014688:	42bc      	cmp	r4, r7
 801468a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801468e:	ed13 5a20 	vldr	s10, [r3, #-128]	@ 0xffffff80
 8014692:	ed50 5a0e 	vldr	s11, [r0, #-56]	@ 0xffffffc8
 8014696:	f100 0040 	add.w	r0, r0, #64	@ 0x40
 801469a:	ed13 6a1e 	vldr	s12, [r3, #-120]	@ 0xffffff88
 801469e:	eee4 7a85 	vfma.f32	s15, s9, s10
 80146a2:	ed53 6a1d 	vldr	s13, [r3, #-116]	@ 0xffffff8c
 80146a6:	ed10 ea1d 	vldr	s28, [r0, #-116]	@ 0xffffff8c
 80146aa:	ed50 da1c 	vldr	s27, [r0, #-112]	@ 0xffffff90
 80146ae:	ed13 da1c 	vldr	s26, [r3, #-112]	@ 0xffffff90
 80146b2:	ed50 ca1b 	vldr	s25, [r0, #-108]	@ 0xffffff94
 80146b6:	ed13 ca1b 	vldr	s24, [r3, #-108]	@ 0xffffff94
 80146ba:	eee5 7a86 	vfma.f32	s15, s11, s12
 80146be:	ed50 ba1a 	vldr	s23, [r0, #-104]	@ 0xffffff98
 80146c2:	ed13 ba1a 	vldr	s22, [r3, #-104]	@ 0xffffff98
 80146c6:	ed50 aa19 	vldr	s21, [r0, #-100]	@ 0xffffff9c
 80146ca:	ed13 aa19 	vldr	s20, [r3, #-100]	@ 0xffffff9c
 80146ce:	ed50 9a18 	vldr	s19, [r0, #-96]	@ 0xffffffa0
 80146d2:	ed13 9a18 	vldr	s18, [r3, #-96]	@ 0xffffffa0
 80146d6:	eeee 7a26 	vfma.f32	s15, s28, s13
 80146da:	ed50 8a17 	vldr	s17, [r0, #-92]	@ 0xffffffa4
 80146de:	ed13 0a17 	vldr	s0, [r3, #-92]	@ 0xffffffa4
 80146e2:	ed50 0a16 	vldr	s1, [r0, #-88]	@ 0xffffffa8
 80146e6:	ed13 1a16 	vldr	s2, [r3, #-88]	@ 0xffffffa8
 80146ea:	ed10 2a15 	vldr	s4, [r0, #-84]	@ 0xffffffac
 80146ee:	ed53 2a15 	vldr	s5, [r3, #-84]	@ 0xffffffac
 80146f2:	eeed 7a8d 	vfma.f32	s15, s27, s26
 80146f6:	ed10 3a14 	vldr	s6, [r0, #-80]	@ 0xffffffb0
 80146fa:	ed53 3a14 	vldr	s7, [r3, #-80]	@ 0xffffffb0
 80146fe:	ed10 4a13 	vldr	s8, [r0, #-76]	@ 0xffffffb4
 8014702:	ed53 4a13 	vldr	s9, [r3, #-76]	@ 0xffffffb4
 8014706:	ed10 5a12 	vldr	s10, [r0, #-72]	@ 0xffffffb8
 801470a:	ed53 5a12 	vldr	s11, [r3, #-72]	@ 0xffffffb8
 801470e:	eeec 7a8c 	vfma.f32	s15, s25, s24
 8014712:	ed10 6a11 	vldr	s12, [r0, #-68]	@ 0xffffffbc
 8014716:	ed53 6a11 	vldr	s13, [r3, #-68]	@ 0xffffffbc
 801471a:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 801471e:	eeea 7a8a 	vfma.f32	s15, s21, s20
 8014722:	eee9 7a89 	vfma.f32	s15, s19, s18
 8014726:	eee8 7a80 	vfma.f32	s15, s17, s0
 801472a:	eee0 7a81 	vfma.f32	s15, s1, s2
 801472e:	eee2 7a22 	vfma.f32	s15, s4, s5
 8014732:	eee3 7a23 	vfma.f32	s15, s6, s7
 8014736:	eee4 7a24 	vfma.f32	s15, s8, s9
 801473a:	eee5 7a25 	vfma.f32	s15, s10, s11
 801473e:	eee6 7a26 	vfma.f32	s15, s12, s13
 8014742:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014746:	db97      	blt.n	8014678 <forward_lite_conv2d_if32of32wf32_pool+0x354>
 8014748:	4471      	add	r1, lr
 801474a:	4472      	add	r2, lr
 801474c:	4645      	mov	r5, r8
 801474e:	42ae      	cmp	r6, r5
 8014750:	dd10      	ble.n	8014774 <forward_lite_conv2d_if32of32wf32_pool+0x450>
 8014752:	462b      	mov	r3, r5
 8014754:	460c      	mov	r4, r1
 8014756:	4610      	mov	r0, r2
 8014758:	3301      	adds	r3, #1
 801475a:	ecf0 6a01 	vldmia	r0!, {s13}
 801475e:	ecf4 7a01 	vldmia	r4!, {s15}
 8014762:	429e      	cmp	r6, r3
 8014764:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8014768:	d1f6      	bne.n	8014758 <forward_lite_conv2d_if32of32wf32_pool+0x434>
 801476a:	1b75      	subs	r5, r6, r5
 801476c:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8014770:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8014774:	f10c 0c01 	add.w	ip, ip, #1
 8014778:	4451      	add	r1, sl
 801477a:	444a      	add	r2, r9
 801477c:	45e3      	cmp	fp, ip
 801477e:	f47f af73 	bne.w	8014668 <forward_lite_conv2d_if32of32wf32_pool+0x344>
 8014782:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8014784:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8014786:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8014788:	4410      	add	r0, r2
 801478a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801478c:	ed81 7a00 	vstr	s14, [r1]
 8014790:	900b      	str	r0, [sp, #44]	@ 0x2c
 8014792:	3301      	adds	r3, #1
 8014794:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8014796:	9311      	str	r3, [sp, #68]	@ 0x44
 8014798:	4401      	add	r1, r0
 801479a:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 801479c:	9110      	str	r1, [sp, #64]	@ 0x40
 801479e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80147a0:	1a89      	subs	r1, r1, r2
 80147a2:	910e      	str	r1, [sp, #56]	@ 0x38
 80147a4:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80147a6:	4401      	add	r1, r0
 80147a8:	910d      	str	r1, [sp, #52]	@ 0x34
 80147aa:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80147ac:	1a8a      	subs	r2, r1, r2
 80147ae:	920c      	str	r2, [sp, #48]	@ 0x30
 80147b0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80147b2:	429a      	cmp	r2, r3
 80147b4:	f47f af25 	bne.w	8014602 <forward_lite_conv2d_if32of32wf32_pool+0x2de>
 80147b8:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80147ba:	9924      	ldr	r1, [sp, #144]	@ 0x90
 80147bc:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80147be:	440a      	add	r2, r1
 80147c0:	3304      	adds	r3, #4
 80147c2:	921a      	str	r2, [sp, #104]	@ 0x68
 80147c4:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 80147c6:	9326      	str	r3, [sp, #152]	@ 0x98
 80147c8:	4293      	cmp	r3, r2
 80147ca:	f47f aefc 	bne.w	80145c6 <forward_lite_conv2d_if32of32wf32_pool+0x2a2>
 80147ce:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80147d0:	2b00      	cmp	r3, #0
 80147d2:	dd26      	ble.n	8014822 <forward_lite_conv2d_if32of32wf32_pool+0x4fe>
 80147d4:	9b75      	ldr	r3, [sp, #468]	@ 0x1d4
 80147d6:	2b00      	cmp	r3, #0
 80147d8:	f000 819f 	beq.w	8014b1a <forward_lite_conv2d_if32of32wf32_pool+0x7f6>
 80147dc:	4699      	mov	r9, r3
 80147de:	2400      	movs	r4, #0
 80147e0:	9d2f      	ldr	r5, [sp, #188]	@ 0xbc
 80147e2:	f8dd 806c 	ldr.w	r8, [sp, #108]	@ 0x6c
 80147e6:	9f29      	ldr	r7, [sp, #164]	@ 0xa4
 80147e8:	f8dd b1e0 	ldr.w	fp, [sp, #480]	@ 0x1e0
 80147ec:	e9dd 6a76 	ldrd	r6, sl, [sp, #472]	@ 0x1d8
 80147f0:	462b      	mov	r3, r5
 80147f2:	4455      	add	r5, sl
 80147f4:	463a      	mov	r2, r7
 80147f6:	4641      	mov	r1, r8
 80147f8:	4640      	mov	r0, r8
 80147fa:	3401      	adds	r4, #1
 80147fc:	47c8      	blx	r9
 80147fe:	1bab      	subs	r3, r5, r6
 8014800:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8014802:	b224      	sxth	r4, r4
 8014804:	455b      	cmp	r3, fp
 8014806:	bfa8      	it	ge
 8014808:	4635      	movge	r5, r6
 801480a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801480c:	4490      	add	r8, r2
 801480e:	4543      	cmp	r3, r8
 8014810:	d801      	bhi.n	8014816 <forward_lite_conv2d_if32of32wf32_pool+0x4f2>
 8014812:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8014814:	4498      	add	r8, r3
 8014816:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014818:	42a3      	cmp	r3, r4
 801481a:	d1e9      	bne.n	80147f0 <forward_lite_conv2d_if32of32wf32_pool+0x4cc>
 801481c:	952f      	str	r5, [sp, #188]	@ 0xbc
 801481e:	f8cd 806c 	str.w	r8, [sp, #108]	@ 0x6c
 8014822:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8014824:	3301      	adds	r3, #1
 8014826:	b21b      	sxth	r3, r3
 8014828:	931d      	str	r3, [sp, #116]	@ 0x74
 801482a:	e638      	b.n	801449e <forward_lite_conv2d_if32of32wf32_pool+0x17a>
 801482c:	2500      	movs	r5, #0
 801482e:	e78e      	b.n	801474e <forward_lite_conv2d_if32of32wf32_pool+0x42a>
 8014830:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014832:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8014834:	4616      	mov	r6, r2
 8014836:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8014838:	189a      	adds	r2, r3, r2
 801483a:	e6e9      	b.n	8014610 <forward_lite_conv2d_if32of32wf32_pool+0x2ec>
 801483c:	eeb0 7a61 	vmov.f32	s14, s3
 8014840:	e79f      	b.n	8014782 <forward_lite_conv2d_if32of32wf32_pool+0x45e>
 8014842:	eef0 1a48 	vmov.f32	s3, s16
 8014846:	e6cb      	b.n	80145e0 <forward_lite_conv2d_if32of32wf32_pool+0x2bc>
 8014848:	9a3d      	ldr	r2, [sp, #244]	@ 0xf4
 801484a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801484c:	fb02 f303 	mul.w	r3, r2, r3
 8014850:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8014852:	eba2 0383 	sub.w	r3, r2, r3, lsl #2
 8014856:	9a60      	ldr	r2, [sp, #384]	@ 0x180
 8014858:	429a      	cmp	r2, r3
 801485a:	d901      	bls.n	8014860 <forward_lite_conv2d_if32of32wf32_pool+0x53c>
 801485c:	9a32      	ldr	r2, [sp, #200]	@ 0xc8
 801485e:	4413      	add	r3, r2
 8014860:	9a60      	ldr	r2, [sp, #384]	@ 0x180
 8014862:	429a      	cmp	r2, r3
 8014864:	d217      	bcs.n	8014896 <forward_lite_conv2d_if32of32wf32_pool+0x572>
 8014866:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 8014868:	991d      	ldr	r1, [sp, #116]	@ 0x74
 801486a:	428a      	cmp	r2, r1
 801486c:	d013      	beq.n	8014896 <forward_lite_conv2d_if32of32wf32_pool+0x572>
 801486e:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 8014870:	429a      	cmp	r2, r3
 8014872:	d910      	bls.n	8014896 <forward_lite_conv2d_if32of32wf32_pool+0x572>
 8014874:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8014876:	461a      	mov	r2, r3
 8014878:	f852 0b04 	ldr.w	r0, [r2], #4
 801487c:	f841 0b04 	str.w	r0, [r1], #4
 8014880:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 8014882:	4290      	cmp	r0, r2
 8014884:	d8f8      	bhi.n	8014878 <forward_lite_conv2d_if32of32wf32_pool+0x554>
 8014886:	9a47      	ldr	r2, [sp, #284]	@ 0x11c
 8014888:	1ad3      	subs	r3, r2, r3
 801488a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801488c:	f023 0303 	bic.w	r3, r3, #3
 8014890:	3304      	adds	r3, #4
 8014892:	441a      	add	r2, r3
 8014894:	921b      	str	r2, [sp, #108]	@ 0x6c
 8014896:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8014898:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 801489a:	f8bd 3074 	ldrh.w	r3, [sp, #116]	@ 0x74
 801489e:	440a      	add	r2, r1
 80148a0:	983e      	ldr	r0, [sp, #248]	@ 0xf8
 80148a2:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 80148a4:	1ad2      	subs	r2, r2, r3
 80148a6:	4401      	add	r1, r0
 80148a8:	982e      	ldr	r0, [sp, #184]	@ 0xb8
 80148aa:	b212      	sxth	r2, r2
 80148ac:	4403      	add	r3, r0
 80148ae:	911b      	str	r1, [sp, #108]	@ 0x6c
 80148b0:	9227      	str	r2, [sp, #156]	@ 0x9c
 80148b2:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 80148b4:	b21b      	sxth	r3, r3
 80148b6:	428a      	cmp	r2, r1
 80148b8:	931d      	str	r3, [sp, #116]	@ 0x74
 80148ba:	460b      	mov	r3, r1
 80148bc:	f63f adef 	bhi.w	801449e <forward_lite_conv2d_if32of32wf32_pool+0x17a>
 80148c0:	9925      	ldr	r1, [sp, #148]	@ 0x94
 80148c2:	440b      	add	r3, r1
 80148c4:	429a      	cmp	r2, r3
 80148c6:	d9fc      	bls.n	80148c2 <forward_lite_conv2d_if32of32wf32_pool+0x59e>
 80148c8:	931b      	str	r3, [sp, #108]	@ 0x6c
 80148ca:	e5e8      	b.n	801449e <forward_lite_conv2d_if32of32wf32_pool+0x17a>
 80148cc:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 80148ce:	2a00      	cmp	r2, #0
 80148d0:	f77f af7d 	ble.w	80147ce <forward_lite_conv2d_if32of32wf32_pool+0x4aa>
 80148d4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80148d6:	9937      	ldr	r1, [sp, #220]	@ 0xdc
 80148d8:	fb02 f303 	mul.w	r3, r2, r3
 80148dc:	9a35      	ldr	r2, [sp, #212]	@ 0xd4
 80148de:	931a      	str	r3, [sp, #104]	@ 0x68
 80148e0:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80148e2:	189a      	adds	r2, r3, r2
 80148e4:	9326      	str	r3, [sp, #152]	@ 0x98
 80148e6:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80148e8:	923f      	str	r2, [sp, #252]	@ 0xfc
 80148ea:	9330      	str	r3, [sp, #192]	@ 0xc0
 80148ec:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80148ee:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 80148f0:	440a      	add	r2, r1
 80148f2:	9319      	str	r3, [sp, #100]	@ 0x64
 80148f4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80148f6:	9240      	str	r2, [sp, #256]	@ 0x100
 80148f8:	2b00      	cmp	r3, #0
 80148fa:	f000 80fc 	beq.w	8014af6 <forward_lite_conv2d_if32of32wf32_pool+0x7d2>
 80148fe:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8014900:	ecf3 1a01 	vldmia	r3!, {s3}
 8014904:	9330      	str	r3, [sp, #192]	@ 0xc0
 8014906:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014908:	2b00      	cmp	r3, #0
 801490a:	f000 80e5 	beq.w	8014ad8 <forward_lite_conv2d_if32of32wf32_pool+0x7b4>
 801490e:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8014910:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8014912:	189a      	adds	r2, r3, r2
 8014914:	920c      	str	r2, [sp, #48]	@ 0x30
 8014916:	9a40      	ldr	r2, [sp, #256]	@ 0x100
 8014918:	e9cd 230d 	strd	r2, r3, [sp, #52]	@ 0x34
 801491c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801491e:	9310      	str	r3, [sp, #64]	@ 0x40
 8014920:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 8014922:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014924:	2300      	movs	r3, #0
 8014926:	9311      	str	r3, [sp, #68]	@ 0x44
 8014928:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801492a:	2b00      	cmp	r3, #0
 801492c:	f2c0 80e8 	blt.w	8014b00 <forward_lite_conv2d_if32of32wf32_pool+0x7dc>
 8014930:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8014932:	2000      	movs	r0, #0
 8014934:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8014936:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8014938:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801493a:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 801493c:	428c      	cmp	r4, r1
 801493e:	bf94      	ite	ls
 8014940:	ebc0 0004 	rsbls	r0, r0, r4
 8014944:	ebc0 0001 	rsbhi	r0, r0, r1
 8014948:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801494a:	f1bb 0f00 	cmp.w	fp, #0
 801494e:	eba4 0900 	sub.w	r9, r4, r0
 8014952:	fb03 5301 	mla	r3, r3, r1, r5
 8014956:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8014958:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801495a:	eba5 0a00 	sub.w	sl, r5, r0
 801495e:	fb04 f000 	mul.w	r0, r4, r0
 8014962:	f340 80d3 	ble.w	8014b0c <forward_lite_conv2d_if32of32wf32_pool+0x7e8>
 8014966:	f020 080f 	bic.w	r8, r0, #15
 801496a:	eeb0 7a61 	vmov.f32	s14, s3
 801496e:	fb0a fa01 	mul.w	sl, sl, r1
 8014972:	2400      	movs	r4, #0
 8014974:	f108 37ff 	add.w	r7, r8, #4294967295
 8014978:	fb09 f901 	mul.w	r9, r9, r1
 801497c:	093f      	lsrs	r7, r7, #4
 801497e:	3701      	adds	r7, #1
 8014980:	01be      	lsls	r6, r7, #6
 8014982:	013f      	lsls	r7, r7, #4
 8014984:	f1b8 0f00 	cmp.w	r8, #0
 8014988:	f340 80b8 	ble.w	8014afc <forward_lite_conv2d_if32of32wf32_pool+0x7d8>
 801498c:	f102 0540 	add.w	r5, r2, #64	@ 0x40
 8014990:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8014994:	f04f 0c00 	mov.w	ip, #0
 8014998:	ed51 6a0f 	vldr	s13, [r1, #-60]	@ 0xffffffc4
 801499c:	f10c 0c10 	add.w	ip, ip, #16
 80149a0:	ed55 7a0f 	vldr	s15, [r5, #-60]	@ 0xffffffc4
 80149a4:	3140      	adds	r1, #64	@ 0x40
 80149a6:	ed55 4a10 	vldr	s9, [r5, #-64]	@ 0xffffffc0
 80149aa:	45c4      	cmp	ip, r8
 80149ac:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80149b0:	ed11 5a20 	vldr	s10, [r1, #-128]	@ 0xffffff80
 80149b4:	ed55 5a0e 	vldr	s11, [r5, #-56]	@ 0xffffffc8
 80149b8:	f105 0540 	add.w	r5, r5, #64	@ 0x40
 80149bc:	ed11 6a1e 	vldr	s12, [r1, #-120]	@ 0xffffff88
 80149c0:	eee4 7a85 	vfma.f32	s15, s9, s10
 80149c4:	ed51 6a1d 	vldr	s13, [r1, #-116]	@ 0xffffff8c
 80149c8:	ed15 ea1d 	vldr	s28, [r5, #-116]	@ 0xffffff8c
 80149cc:	ed55 da1c 	vldr	s27, [r5, #-112]	@ 0xffffff90
 80149d0:	ed11 da1c 	vldr	s26, [r1, #-112]	@ 0xffffff90
 80149d4:	ed55 ca1b 	vldr	s25, [r5, #-108]	@ 0xffffff94
 80149d8:	ed11 ca1b 	vldr	s24, [r1, #-108]	@ 0xffffff94
 80149dc:	eee5 7a86 	vfma.f32	s15, s11, s12
 80149e0:	ed55 ba1a 	vldr	s23, [r5, #-104]	@ 0xffffff98
 80149e4:	ed11 ba1a 	vldr	s22, [r1, #-104]	@ 0xffffff98
 80149e8:	ed55 aa19 	vldr	s21, [r5, #-100]	@ 0xffffff9c
 80149ec:	ed11 aa19 	vldr	s20, [r1, #-100]	@ 0xffffff9c
 80149f0:	ed55 9a18 	vldr	s19, [r5, #-96]	@ 0xffffffa0
 80149f4:	ed11 9a18 	vldr	s18, [r1, #-96]	@ 0xffffffa0
 80149f8:	eeee 7a26 	vfma.f32	s15, s28, s13
 80149fc:	ed55 8a17 	vldr	s17, [r5, #-92]	@ 0xffffffa4
 8014a00:	ed11 0a17 	vldr	s0, [r1, #-92]	@ 0xffffffa4
 8014a04:	ed55 0a16 	vldr	s1, [r5, #-88]	@ 0xffffffa8
 8014a08:	ed11 1a16 	vldr	s2, [r1, #-88]	@ 0xffffffa8
 8014a0c:	ed15 2a15 	vldr	s4, [r5, #-84]	@ 0xffffffac
 8014a10:	ed51 2a15 	vldr	s5, [r1, #-84]	@ 0xffffffac
 8014a14:	eeed 7a8d 	vfma.f32	s15, s27, s26
 8014a18:	ed15 3a14 	vldr	s6, [r5, #-80]	@ 0xffffffb0
 8014a1c:	ed51 3a14 	vldr	s7, [r1, #-80]	@ 0xffffffb0
 8014a20:	ed15 4a13 	vldr	s8, [r5, #-76]	@ 0xffffffb4
 8014a24:	ed51 4a13 	vldr	s9, [r1, #-76]	@ 0xffffffb4
 8014a28:	ed15 5a12 	vldr	s10, [r5, #-72]	@ 0xffffffb8
 8014a2c:	ed51 5a12 	vldr	s11, [r1, #-72]	@ 0xffffffb8
 8014a30:	eeec 7a8c 	vfma.f32	s15, s25, s24
 8014a34:	ed15 6a11 	vldr	s12, [r5, #-68]	@ 0xffffffbc
 8014a38:	ed51 6a11 	vldr	s13, [r1, #-68]	@ 0xffffffbc
 8014a3c:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 8014a40:	eeea 7a8a 	vfma.f32	s15, s21, s20
 8014a44:	eee9 7a89 	vfma.f32	s15, s19, s18
 8014a48:	eee8 7a80 	vfma.f32	s15, s17, s0
 8014a4c:	eee0 7a81 	vfma.f32	s15, s1, s2
 8014a50:	eee2 7a22 	vfma.f32	s15, s4, s5
 8014a54:	eee3 7a23 	vfma.f32	s15, s6, s7
 8014a58:	eee4 7a24 	vfma.f32	s15, s8, s9
 8014a5c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8014a60:	eee6 7a26 	vfma.f32	s15, s12, s13
 8014a64:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014a68:	db96      	blt.n	8014998 <forward_lite_conv2d_if32of32wf32_pool+0x674>
 8014a6a:	4432      	add	r2, r6
 8014a6c:	4433      	add	r3, r6
 8014a6e:	4639      	mov	r1, r7
 8014a70:	4288      	cmp	r0, r1
 8014a72:	dd10      	ble.n	8014a96 <forward_lite_conv2d_if32of32wf32_pool+0x772>
 8014a74:	460d      	mov	r5, r1
 8014a76:	4696      	mov	lr, r2
 8014a78:	469c      	mov	ip, r3
 8014a7a:	3501      	adds	r5, #1
 8014a7c:	ecfc 6a01 	vldmia	ip!, {s13}
 8014a80:	ecfe 7a01 	vldmia	lr!, {s15}
 8014a84:	42a8      	cmp	r0, r5
 8014a86:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8014a8a:	d1f6      	bne.n	8014a7a <forward_lite_conv2d_if32of32wf32_pool+0x756>
 8014a8c:	1a41      	subs	r1, r0, r1
 8014a8e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8014a92:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8014a96:	3401      	adds	r4, #1
 8014a98:	4452      	add	r2, sl
 8014a9a:	444b      	add	r3, r9
 8014a9c:	45a3      	cmp	fp, r4
 8014a9e:	f47f af71 	bne.w	8014984 <forward_lite_conv2d_if32of32wf32_pool+0x660>
 8014aa2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8014aa4:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8014aa6:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8014aa8:	4410      	add	r0, r2
 8014aaa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8014aac:	ed81 7a00 	vstr	s14, [r1]
 8014ab0:	900b      	str	r0, [sp, #44]	@ 0x2c
 8014ab2:	3301      	adds	r3, #1
 8014ab4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8014ab6:	9311      	str	r3, [sp, #68]	@ 0x44
 8014ab8:	4401      	add	r1, r0
 8014aba:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8014abc:	9110      	str	r1, [sp, #64]	@ 0x40
 8014abe:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8014ac0:	1a89      	subs	r1, r1, r2
 8014ac2:	910e      	str	r1, [sp, #56]	@ 0x38
 8014ac4:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8014ac6:	4401      	add	r1, r0
 8014ac8:	910d      	str	r1, [sp, #52]	@ 0x34
 8014aca:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8014acc:	1a8a      	subs	r2, r1, r2
 8014ace:	920c      	str	r2, [sp, #48]	@ 0x30
 8014ad0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8014ad2:	429a      	cmp	r2, r3
 8014ad4:	f47f af28 	bne.w	8014928 <forward_lite_conv2d_if32of32wf32_pool+0x604>
 8014ad8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8014ada:	9924      	ldr	r1, [sp, #144]	@ 0x90
 8014adc:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8014ade:	440a      	add	r2, r1
 8014ae0:	3304      	adds	r3, #4
 8014ae2:	9219      	str	r2, [sp, #100]	@ 0x64
 8014ae4:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 8014ae6:	9326      	str	r3, [sp, #152]	@ 0x98
 8014ae8:	4293      	cmp	r3, r2
 8014aea:	f43f ae70 	beq.w	80147ce <forward_lite_conv2d_if32of32wf32_pool+0x4aa>
 8014aee:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8014af0:	2b00      	cmp	r3, #0
 8014af2:	f47f af04 	bne.w	80148fe <forward_lite_conv2d_if32of32wf32_pool+0x5da>
 8014af6:	eef0 1a48 	vmov.f32	s3, s16
 8014afa:	e704      	b.n	8014906 <forward_lite_conv2d_if32of32wf32_pool+0x5e2>
 8014afc:	2100      	movs	r1, #0
 8014afe:	e7b7      	b.n	8014a70 <forward_lite_conv2d_if32of32wf32_pool+0x74c>
 8014b00:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014b02:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8014b04:	4610      	mov	r0, r2
 8014b06:	4413      	add	r3, r2
 8014b08:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8014b0a:	e714      	b.n	8014936 <forward_lite_conv2d_if32of32wf32_pool+0x612>
 8014b0c:	eeb0 7a61 	vmov.f32	s14, s3
 8014b10:	e7c7      	b.n	8014aa2 <forward_lite_conv2d_if32of32wf32_pool+0x77e>
 8014b12:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8014b14:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8014b16:	921c      	str	r2, [sp, #112]	@ 0x70
 8014b18:	e52d      	b.n	8014576 <forward_lite_conv2d_if32of32wf32_pool+0x252>
 8014b1a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8014b1c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8014b1e:	3301      	adds	r3, #1
 8014b20:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 8014b22:	440a      	add	r2, r1
 8014b24:	b219      	sxth	r1, r3
 8014b26:	4290      	cmp	r0, r2
 8014b28:	d801      	bhi.n	8014b2e <forward_lite_conv2d_if32of32wf32_pool+0x80a>
 8014b2a:	9825      	ldr	r0, [sp, #148]	@ 0x94
 8014b2c:	4402      	add	r2, r0
 8014b2e:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8014b30:	4281      	cmp	r1, r0
 8014b32:	dbf3      	blt.n	8014b1c <forward_lite_conv2d_if32of32wf32_pool+0x7f8>
 8014b34:	921b      	str	r2, [sp, #108]	@ 0x6c
 8014b36:	e674      	b.n	8014822 <forward_lite_conv2d_if32of32wf32_pool+0x4fe>

08014b38 <forward_lite_nl_relu_generic_if32of32_kernel>:
 8014b38:	edd3 6a02 	vldr	s13, [r3, #8]
 8014b3c:	ed93 7a00 	vldr	s14, [r3]
 8014b40:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8014b44:	ed93 6a01 	vldr	s12, [r3, #4]
 8014b48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b4c:	d42b      	bmi.n	8014ba6 <forward_lite_nl_relu_generic_if32of32_kernel+0x6e>
 8014b4e:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8014b52:	4413      	add	r3, r2
 8014b54:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 8014b58:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 8014b5c:	4291      	cmp	r1, r2
 8014b5e:	d821      	bhi.n	8014ba4 <forward_lite_nl_relu_generic_if32of32_kernel+0x6c>
 8014b60:	f10c 0104 	add.w	r1, ip, #4
 8014b64:	1d13      	adds	r3, r2, #4
 8014b66:	eba2 020c 	sub.w	r2, r2, ip
 8014b6a:	4408      	add	r0, r1
 8014b6c:	e00c      	b.n	8014b88 <forward_lite_nl_relu_generic_if32of32_kernel+0x50>
 8014b6e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014b72:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8014b76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b7a:	db01      	blt.n	8014b80 <forward_lite_nl_relu_generic_if32of32_kernel+0x48>
 8014b7c:	ee65 7a86 	vmul.f32	s15, s11, s12
 8014b80:	4293      	cmp	r3, r2
 8014b82:	ed60 7a01 	vstmdb	r0!, {s15}
 8014b86:	d00c      	beq.n	8014ba2 <forward_lite_nl_relu_generic_if32of32_kernel+0x6a>
 8014b88:	ed73 7a01 	vldmdb	r3!, {s15}
 8014b8c:	eef4 6ae7 	vcmpe.f32	s13, s15
 8014b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b94:	daeb      	bge.n	8014b6e <forward_lite_nl_relu_generic_if32of32_kernel+0x36>
 8014b96:	eef0 7a66 	vmov.f32	s15, s13
 8014b9a:	4293      	cmp	r3, r2
 8014b9c:	ed60 7a01 	vstmdb	r0!, {s15}
 8014ba0:	d1f2      	bne.n	8014b88 <forward_lite_nl_relu_generic_if32of32_kernel+0x50>
 8014ba2:	4770      	bx	lr
 8014ba4:	4770      	bx	lr
 8014ba6:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8014baa:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8014bae:	4413      	add	r3, r2
 8014bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014bb4:	eb01 0c83 	add.w	ip, r1, r3, lsl #2
 8014bb8:	b500      	push	{lr}
 8014bba:	ea4f 0e83 	mov.w	lr, r3, lsl #2
 8014bbe:	d019      	beq.n	8014bf4 <forward_lite_nl_relu_generic_if32of32_kernel+0xbc>
 8014bc0:	4561      	cmp	r1, ip
 8014bc2:	d815      	bhi.n	8014bf0 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 8014bc4:	f10e 0204 	add.w	r2, lr, #4
 8014bc8:	f10c 0304 	add.w	r3, ip, #4
 8014bcc:	ebac 010e 	sub.w	r1, ip, lr
 8014bd0:	4402      	add	r2, r0
 8014bd2:	ed73 7a01 	vldmdb	r3!, {s15}
 8014bd6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014bda:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8014bde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014be2:	ee66 6a86 	vmul.f32	s13, s13, s12
 8014be6:	d827      	bhi.n	8014c38 <forward_lite_nl_relu_generic_if32of32_kernel+0x100>
 8014be8:	428b      	cmp	r3, r1
 8014bea:	ed62 6a01 	vstmdb	r2!, {s13}
 8014bee:	d1f0      	bne.n	8014bd2 <forward_lite_nl_relu_generic_if32of32_kernel+0x9a>
 8014bf0:	f85d fb04 	ldr.w	pc, [sp], #4
 8014bf4:	4561      	cmp	r1, ip
 8014bf6:	d8fb      	bhi.n	8014bf0 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 8014bf8:	f10e 0204 	add.w	r2, lr, #4
 8014bfc:	f10c 0304 	add.w	r3, ip, #4
 8014c00:	ebac 010e 	sub.w	r1, ip, lr
 8014c04:	f04f 0c00 	mov.w	ip, #0
 8014c08:	4402      	add	r2, r0
 8014c0a:	ed73 7a01 	vldmdb	r3!, {s15}
 8014c0e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c16:	d40a      	bmi.n	8014c2e <forward_lite_nl_relu_generic_if32of32_kernel+0xf6>
 8014c18:	428b      	cmp	r3, r1
 8014c1a:	f842 cd04 	str.w	ip, [r2, #-4]!
 8014c1e:	d0e7      	beq.n	8014bf0 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 8014c20:	ed73 7a01 	vldmdb	r3!, {s15}
 8014c24:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c2c:	d5f4      	bpl.n	8014c18 <forward_lite_nl_relu_generic_if32of32_kernel+0xe0>
 8014c2e:	428b      	cmp	r3, r1
 8014c30:	ed62 7a01 	vstmdb	r2!, {s15}
 8014c34:	d1e9      	bne.n	8014c0a <forward_lite_nl_relu_generic_if32of32_kernel+0xd2>
 8014c36:	e7db      	b.n	8014bf0 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 8014c38:	428b      	cmp	r3, r1
 8014c3a:	ed62 7a01 	vstmdb	r2!, {s15}
 8014c3e:	d1c8      	bne.n	8014bd2 <forward_lite_nl_relu_generic_if32of32_kernel+0x9a>
 8014c40:	e7d6      	b.n	8014bf0 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 8014c42:	bf00      	nop

08014c44 <pool_func_mp_array_f32>:
 8014c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c48:	b091      	sub	sp, #68	@ 0x44
 8014c4a:	468b      	mov	fp, r1
 8014c4c:	469c      	mov	ip, r3
 8014c4e:	4690      	mov	r8, r2
 8014c50:	f8bd 106c 	ldrh.w	r1, [sp, #108]	@ 0x6c
 8014c54:	4681      	mov	r9, r0
 8014c56:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 8014c5a:	9101      	str	r1, [sp, #4]
 8014c5c:	f8bd 1078 	ldrh.w	r1, [sp, #120]	@ 0x78
 8014c60:	f8bd 2074 	ldrh.w	r2, [sp, #116]	@ 0x74
 8014c64:	9105      	str	r1, [sp, #20]
 8014c66:	f8bd 107c 	ldrh.w	r1, [sp, #124]	@ 0x7c
 8014c6a:	9304      	str	r3, [sp, #16]
 8014c6c:	9106      	str	r1, [sp, #24]
 8014c6e:	f8bd 3070 	ldrh.w	r3, [sp, #112]	@ 0x70
 8014c72:	f8bd 1080 	ldrh.w	r1, [sp, #128]	@ 0x80
 8014c76:	ea52 0403 	orrs.w	r4, r2, r3
 8014c7a:	9102      	str	r1, [sp, #8]
 8014c7c:	f8bd 1084 	ldrh.w	r1, [sp, #132]	@ 0x84
 8014c80:	9103      	str	r1, [sp, #12]
 8014c82:	d173      	bne.n	8014d6c <pool_func_mp_array_f32+0x128>
 8014c84:	9904      	ldr	r1, [sp, #16]
 8014c86:	9d02      	ldr	r5, [sp, #8]
 8014c88:	eba1 000b 	sub.w	r0, r1, fp
 8014c8c:	9e05      	ldr	r6, [sp, #20]
 8014c8e:	1e69      	subs	r1, r5, #1
 8014c90:	3801      	subs	r0, #1
 8014c92:	fb11 0106 	smlabb	r1, r1, r6, r0
 8014c96:	0409      	lsls	r1, r1, #16
 8014c98:	d568      	bpl.n	8014d6c <pool_func_mp_array_f32+0x128>
 8014c9a:	9901      	ldr	r1, [sp, #4]
 8014c9c:	9e03      	ldr	r6, [sp, #12]
 8014c9e:	eba1 0008 	sub.w	r0, r1, r8
 8014ca2:	9f06      	ldr	r7, [sp, #24]
 8014ca4:	1e71      	subs	r1, r6, #1
 8014ca6:	3801      	subs	r0, #1
 8014ca8:	fb11 0107 	smlabb	r1, r1, r7, r0
 8014cac:	040f      	lsls	r7, r1, #16
 8014cae:	d55d      	bpl.n	8014d6c <pool_func_mp_array_f32+0x128>
 8014cb0:	2e00      	cmp	r6, #0
 8014cb2:	d058      	beq.n	8014d66 <pool_func_mp_array_f32+0x122>
 8014cb4:	2d00      	cmp	r5, #0
 8014cb6:	d056      	beq.n	8014d66 <pool_func_mp_array_f32+0x122>
 8014cb8:	4663      	mov	r3, ip
 8014cba:	2b00      	cmp	r3, #0
 8014cbc:	d053      	beq.n	8014d66 <pool_func_mp_array_f32+0x122>
 8014cbe:	2b01      	cmp	r3, #1
 8014cc0:	f040 814a 	bne.w	8014f58 <pool_func_mp_array_f32+0x314>
 8014cc4:	46a2      	mov	sl, r4
 8014cc6:	4623      	mov	r3, r4
 8014cc8:	9407      	str	r4, [sp, #28]
 8014cca:	9a02      	ldr	r2, [sp, #8]
 8014ccc:	2700      	movs	r7, #0
 8014cce:	f9bd 6004 	ldrsh.w	r6, [sp, #4]
 8014cd2:	fb02 f303 	mul.w	r3, r2, r3
 8014cd6:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8014cda:	46be      	mov	lr, r7
 8014cdc:	46bc      	mov	ip, r7
 8014cde:	9308      	str	r3, [sp, #32]
 8014ce0:	fa0f f38a 	sxth.w	r3, sl
 8014ce4:	9309      	str	r3, [sp, #36]	@ 0x24
 8014ce6:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8014ce8:	b23d      	sxth	r5, r7
 8014cea:	9b08      	ldr	r3, [sp, #32]
 8014cec:	fa0f f088 	sxth.w	r0, r8
 8014cf0:	42b4      	cmp	r4, r6
 8014cf2:	eddf 7a98 	vldr	s15, [pc, #608]	@ 8014f54 <pool_func_mp_array_f32+0x310>
 8014cf6:	449c      	add	ip, r3
 8014cf8:	da12      	bge.n	8014d20 <pool_func_mp_array_f32+0xdc>
 8014cfa:	4285      	cmp	r5, r0
 8014cfc:	da0c      	bge.n	8014d18 <pool_func_mp_array_f32+0xd4>
 8014cfe:	fb04 520b 	mla	r2, r4, fp, r5
 8014d02:	462b      	mov	r3, r5
 8014d04:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8014d08:	3301      	adds	r3, #1
 8014d0a:	ecb2 7a01 	vldmia	r2!, {s14}
 8014d0e:	b219      	sxth	r1, r3
 8014d10:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8014d14:	4281      	cmp	r1, r0
 8014d16:	dbf7      	blt.n	8014d08 <pool_func_mp_array_f32+0xc4>
 8014d18:	3401      	adds	r4, #1
 8014d1a:	b224      	sxth	r4, r4
 8014d1c:	42b4      	cmp	r4, r6
 8014d1e:	dbec      	blt.n	8014cfa <pool_func_mp_array_f32+0xb6>
 8014d20:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8014d22:	f10e 0e01 	add.w	lr, lr, #1
 8014d26:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8014d2a:	9b05      	ldr	r3, [sp, #20]
 8014d2c:	fa0f fe8e 	sxth.w	lr, lr
 8014d30:	4498      	add	r8, r3
 8014d32:	441f      	add	r7, r3
 8014d34:	9b02      	ldr	r3, [sp, #8]
 8014d36:	edcc 7a00 	vstr	s15, [ip]
 8014d3a:	fa1f f888 	uxth.w	r8, r8
 8014d3e:	4573      	cmp	r3, lr
 8014d40:	b2bf      	uxth	r7, r7
 8014d42:	46f4      	mov	ip, lr
 8014d44:	dccf      	bgt.n	8014ce6 <pool_func_mp_array_f32+0xa2>
 8014d46:	9a07      	ldr	r2, [sp, #28]
 8014d48:	9906      	ldr	r1, [sp, #24]
 8014d4a:	9b01      	ldr	r3, [sp, #4]
 8014d4c:	3201      	adds	r2, #1
 8014d4e:	448a      	add	sl, r1
 8014d50:	b212      	sxth	r2, r2
 8014d52:	440b      	add	r3, r1
 8014d54:	9903      	ldr	r1, [sp, #12]
 8014d56:	fa1f fa8a 	uxth.w	sl, sl
 8014d5a:	b29b      	uxth	r3, r3
 8014d5c:	9207      	str	r2, [sp, #28]
 8014d5e:	4291      	cmp	r1, r2
 8014d60:	9301      	str	r3, [sp, #4]
 8014d62:	4613      	mov	r3, r2
 8014d64:	dcb1      	bgt.n	8014cca <pool_func_mp_array_f32+0x86>
 8014d66:	b011      	add	sp, #68	@ 0x44
 8014d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d6c:	9903      	ldr	r1, [sp, #12]
 8014d6e:	2900      	cmp	r1, #0
 8014d70:	d0f9      	beq.n	8014d66 <pool_func_mp_array_f32+0x122>
 8014d72:	9902      	ldr	r1, [sp, #8]
 8014d74:	2900      	cmp	r1, #0
 8014d76:	d0f6      	beq.n	8014d66 <pool_func_mp_array_f32+0x122>
 8014d78:	4661      	mov	r1, ip
 8014d7a:	2900      	cmp	r1, #0
 8014d7c:	d0f3      	beq.n	8014d66 <pool_func_mp_array_f32+0x122>
 8014d7e:	2901      	cmp	r1, #1
 8014d80:	9901      	ldr	r1, [sp, #4]
 8014d82:	d163      	bne.n	8014e4c <pool_func_mp_array_f32+0x208>
 8014d84:	1a8a      	subs	r2, r1, r2
 8014d86:	9904      	ldr	r1, [sp, #16]
 8014d88:	1ac9      	subs	r1, r1, r3
 8014d8a:	425b      	negs	r3, r3
 8014d8c:	b292      	uxth	r2, r2
 8014d8e:	b29b      	uxth	r3, r3
 8014d90:	9204      	str	r2, [sp, #16]
 8014d92:	b28a      	uxth	r2, r1
 8014d94:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014d96:	2300      	movs	r3, #0
 8014d98:	920a      	str	r2, [sp, #40]	@ 0x28
 8014d9a:	9307      	str	r3, [sp, #28]
 8014d9c:	9a02      	ldr	r2, [sp, #8]
 8014d9e:	2700      	movs	r7, #0
 8014da0:	fb02 f303 	mul.w	r3, r2, r3
 8014da4:	9a04      	ldr	r2, [sp, #16]
 8014da6:	46bc      	mov	ip, r7
 8014da8:	9308      	str	r3, [sp, #32]
 8014daa:	b216      	sxth	r6, r2
 8014dac:	9b01      	ldr	r3, [sp, #4]
 8014dae:	1ad3      	subs	r3, r2, r3
 8014db0:	e9dd ae0a 	ldrd	sl, lr, [sp, #40]	@ 0x28
 8014db4:	b21b      	sxth	r3, r3
 8014db6:	9309      	str	r3, [sp, #36]	@ 0x24
 8014db8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8014dba:	fa0f f58e 	sxth.w	r5, lr
 8014dbe:	9b08      	ldr	r3, [sp, #32]
 8014dc0:	fa0f f48a 	sxth.w	r4, sl
 8014dc4:	428e      	cmp	r6, r1
 8014dc6:	eddf 7a63 	vldr	s15, [pc, #396]	@ 8014f54 <pool_func_mp_array_f32+0x310>
 8014dca:	449c      	add	ip, r3
 8014dcc:	dd1c      	ble.n	8014e08 <pool_func_mp_array_f32+0x1c4>
 8014dce:	42a5      	cmp	r5, r4
 8014dd0:	da16      	bge.n	8014e00 <pool_func_mp_array_f32+0x1bc>
 8014dd2:	4588      	cmp	r8, r1
 8014dd4:	fb01 f20b 	mul.w	r2, r1, fp
 8014dd8:	dd12      	ble.n	8014e00 <pool_func_mp_array_f32+0x1bc>
 8014dda:	442a      	add	r2, r5
 8014ddc:	462b      	mov	r3, r5
 8014dde:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8014de2:	ea41 0003 	orr.w	r0, r1, r3
 8014de6:	0400      	lsls	r0, r0, #16
 8014de8:	d405      	bmi.n	8014df6 <pool_func_mp_array_f32+0x1b2>
 8014dea:	459b      	cmp	fp, r3
 8014dec:	dd03      	ble.n	8014df6 <pool_func_mp_array_f32+0x1b2>
 8014dee:	ed92 7a00 	vldr	s14, [r2]
 8014df2:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8014df6:	3301      	adds	r3, #1
 8014df8:	3204      	adds	r2, #4
 8014dfa:	b218      	sxth	r0, r3
 8014dfc:	42a0      	cmp	r0, r4
 8014dfe:	dbf0      	blt.n	8014de2 <pool_func_mp_array_f32+0x19e>
 8014e00:	3101      	adds	r1, #1
 8014e02:	b209      	sxth	r1, r1
 8014e04:	42b1      	cmp	r1, r6
 8014e06:	dbe2      	blt.n	8014dce <pool_func_mp_array_f32+0x18a>
 8014e08:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8014e0a:	3701      	adds	r7, #1
 8014e0c:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8014e10:	9b05      	ldr	r3, [sp, #20]
 8014e12:	b23f      	sxth	r7, r7
 8014e14:	449a      	add	sl, r3
 8014e16:	449e      	add	lr, r3
 8014e18:	9b02      	ldr	r3, [sp, #8]
 8014e1a:	edcc 7a00 	vstr	s15, [ip]
 8014e1e:	fa1f fa8a 	uxth.w	sl, sl
 8014e22:	42bb      	cmp	r3, r7
 8014e24:	fa1f fe8e 	uxth.w	lr, lr
 8014e28:	46bc      	mov	ip, r7
 8014e2a:	dcc5      	bgt.n	8014db8 <pool_func_mp_array_f32+0x174>
 8014e2c:	9a07      	ldr	r2, [sp, #28]
 8014e2e:	9b04      	ldr	r3, [sp, #16]
 8014e30:	9906      	ldr	r1, [sp, #24]
 8014e32:	3201      	adds	r2, #1
 8014e34:	440b      	add	r3, r1
 8014e36:	b212      	sxth	r2, r2
 8014e38:	9903      	ldr	r1, [sp, #12]
 8014e3a:	b29b      	uxth	r3, r3
 8014e3c:	9207      	str	r2, [sp, #28]
 8014e3e:	4291      	cmp	r1, r2
 8014e40:	9304      	str	r3, [sp, #16]
 8014e42:	4613      	mov	r3, r2
 8014e44:	dcaa      	bgt.n	8014d9c <pool_func_mp_array_f32+0x158>
 8014e46:	b011      	add	sp, #68	@ 0x44
 8014e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e4c:	1a88      	subs	r0, r1, r2
 8014e4e:	9904      	ldr	r1, [sp, #16]
 8014e50:	4252      	negs	r2, r2
 8014e52:	ea4f 0a8c 	mov.w	sl, ip, lsl #2
 8014e56:	1ac9      	subs	r1, r1, r3
 8014e58:	425b      	negs	r3, r3
 8014e5a:	b292      	uxth	r2, r2
 8014e5c:	46e6      	mov	lr, ip
 8014e5e:	b29b      	uxth	r3, r3
 8014e60:	b280      	uxth	r0, r0
 8014e62:	9208      	str	r2, [sp, #32]
 8014e64:	930f      	str	r3, [sp, #60]	@ 0x3c
 8014e66:	b28a      	uxth	r2, r1
 8014e68:	2300      	movs	r3, #0
 8014e6a:	9007      	str	r0, [sp, #28]
 8014e6c:	920e      	str	r2, [sp, #56]	@ 0x38
 8014e6e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014e70:	9a02      	ldr	r2, [sp, #8]
 8014e72:	f9bd 601c 	ldrsh.w	r6, [sp, #28]
 8014e76:	fb02 f303 	mul.w	r3, r2, r3
 8014e7a:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8014e7e:	920a      	str	r2, [sp, #40]	@ 0x28
 8014e80:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014e82:	930d      	str	r3, [sp, #52]	@ 0x34
 8014e84:	2300      	movs	r3, #0
 8014e86:	9201      	str	r2, [sp, #4]
 8014e88:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8014e8a:	930c      	str	r3, [sp, #48]	@ 0x30
 8014e8c:	9204      	str	r2, [sp, #16]
 8014e8e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8014e90:	f04f 0c00 	mov.w	ip, #0
 8014e94:	f9bd 5010 	ldrsh.w	r5, [sp, #16]
 8014e98:	4413      	add	r3, r2
 8014e9a:	f9bd 4004 	ldrsh.w	r4, [sp, #4]
 8014e9e:	4667      	mov	r7, ip
 8014ea0:	fb0e f303 	mul.w	r3, lr, r3
 8014ea4:	9309      	str	r3, [sp, #36]	@ 0x24
 8014ea6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8014ea8:	eddf 7a2a 	vldr	s15, [pc, #168]	@ 8014f54 <pool_func_mp_array_f32+0x310>
 8014eac:	42b1      	cmp	r1, r6
 8014eae:	da1e      	bge.n	8014eee <pool_func_mp_array_f32+0x2aa>
 8014eb0:	42a5      	cmp	r5, r4
 8014eb2:	da18      	bge.n	8014ee6 <pool_func_mp_array_f32+0x2a2>
 8014eb4:	4541      	cmp	r1, r8
 8014eb6:	fb01 f30b 	mul.w	r3, r1, fp
 8014eba:	da14      	bge.n	8014ee6 <pool_func_mp_array_f32+0x2a2>
 8014ebc:	195a      	adds	r2, r3, r5
 8014ebe:	462b      	mov	r3, r5
 8014ec0:	fb0e 7202 	mla	r2, lr, r2, r7
 8014ec4:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8014ec8:	ea41 0003 	orr.w	r0, r1, r3
 8014ecc:	0400      	lsls	r0, r0, #16
 8014ece:	d405      	bmi.n	8014edc <pool_func_mp_array_f32+0x298>
 8014ed0:	459b      	cmp	fp, r3
 8014ed2:	dd03      	ble.n	8014edc <pool_func_mp_array_f32+0x298>
 8014ed4:	ed92 7a00 	vldr	s14, [r2]
 8014ed8:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8014edc:	3301      	adds	r3, #1
 8014ede:	4452      	add	r2, sl
 8014ee0:	b218      	sxth	r0, r3
 8014ee2:	42a0      	cmp	r0, r4
 8014ee4:	dbf0      	blt.n	8014ec8 <pool_func_mp_array_f32+0x284>
 8014ee6:	3101      	adds	r1, #1
 8014ee8:	b209      	sxth	r1, r1
 8014eea:	42b1      	cmp	r1, r6
 8014eec:	dbe0      	blt.n	8014eb0 <pool_func_mp_array_f32+0x26c>
 8014eee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014ef0:	f10c 0c01 	add.w	ip, ip, #1
 8014ef4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8014ef6:	443b      	add	r3, r7
 8014ef8:	fa0f fc8c 	sxth.w	ip, ip
 8014efc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014f00:	45f4      	cmp	ip, lr
 8014f02:	4667      	mov	r7, ip
 8014f04:	edc3 7a00 	vstr	s15, [r3]
 8014f08:	dbcd      	blt.n	8014ea6 <pool_func_mp_array_f32+0x262>
 8014f0a:	9a01      	ldr	r2, [sp, #4]
 8014f0c:	9805      	ldr	r0, [sp, #20]
 8014f0e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8014f10:	4402      	add	r2, r0
 8014f12:	9b04      	ldr	r3, [sp, #16]
 8014f14:	3101      	adds	r1, #1
 8014f16:	b292      	uxth	r2, r2
 8014f18:	4403      	add	r3, r0
 8014f1a:	b209      	sxth	r1, r1
 8014f1c:	9201      	str	r2, [sp, #4]
 8014f1e:	b29b      	uxth	r3, r3
 8014f20:	9a02      	ldr	r2, [sp, #8]
 8014f22:	9304      	str	r3, [sp, #16]
 8014f24:	460b      	mov	r3, r1
 8014f26:	428a      	cmp	r2, r1
 8014f28:	910c      	str	r1, [sp, #48]	@ 0x30
 8014f2a:	dcb0      	bgt.n	8014e8e <pool_func_mp_array_f32+0x24a>
 8014f2c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8014f2e:	9b08      	ldr	r3, [sp, #32]
 8014f30:	3101      	adds	r1, #1
 8014f32:	e9dd 0206 	ldrd	r0, r2, [sp, #24]
 8014f36:	b209      	sxth	r1, r1
 8014f38:	4402      	add	r2, r0
 8014f3a:	4403      	add	r3, r0
 8014f3c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8014f3e:	b292      	uxth	r2, r2
 8014f40:	b29b      	uxth	r3, r3
 8014f42:	9207      	str	r2, [sp, #28]
 8014f44:	9a03      	ldr	r2, [sp, #12]
 8014f46:	9308      	str	r3, [sp, #32]
 8014f48:	460b      	mov	r3, r1
 8014f4a:	428a      	cmp	r2, r1
 8014f4c:	dc90      	bgt.n	8014e70 <pool_func_mp_array_f32+0x22c>
 8014f4e:	b011      	add	sp, #68	@ 0x44
 8014f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f54:	cf000000 	.word	0xcf000000
 8014f58:	4623      	mov	r3, r4
 8014f5a:	ea4f 0a8c 	mov.w	sl, ip, lsl #2
 8014f5e:	46e0      	mov	r8, ip
 8014f60:	9408      	str	r4, [sp, #32]
 8014f62:	9409      	str	r4, [sp, #36]	@ 0x24
 8014f64:	9a02      	ldr	r2, [sp, #8]
 8014f66:	f04f 0c00 	mov.w	ip, #0
 8014f6a:	f9bd 7004 	ldrsh.w	r7, [sp, #4]
 8014f6e:	fb02 f303 	mul.w	r3, r2, r3
 8014f72:	f8cd c028 	str.w	ip, [sp, #40]	@ 0x28
 8014f76:	930c      	str	r3, [sp, #48]	@ 0x30
 8014f78:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8014f7c:	930d      	str	r3, [sp, #52]	@ 0x34
 8014f7e:	9b04      	ldr	r3, [sp, #16]
 8014f80:	9307      	str	r3, [sp, #28]
 8014f82:	4663      	mov	r3, ip
 8014f84:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8014f86:	f04f 0e00 	mov.w	lr, #0
 8014f8a:	fa0f f58c 	sxth.w	r5, ip
 8014f8e:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8014f92:	4413      	add	r3, r2
 8014f94:	4676      	mov	r6, lr
 8014f96:	fb08 f303 	mul.w	r3, r8, r3
 8014f9a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014f9c:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8014f9e:	ed5f 7a13 	vldr	s15, [pc, #-76]	@ 8014f54 <pool_func_mp_array_f32+0x310>
 8014fa2:	42bc      	cmp	r4, r7
 8014fa4:	da15      	bge.n	8014fd2 <pool_func_mp_array_f32+0x38e>
 8014fa6:	4285      	cmp	r5, r0
 8014fa8:	da0f      	bge.n	8014fca <pool_func_mp_array_f32+0x386>
 8014faa:	fb0b 5304 	mla	r3, fp, r4, r5
 8014fae:	462a      	mov	r2, r5
 8014fb0:	fb08 6303 	mla	r3, r8, r3, r6
 8014fb4:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8014fb8:	3201      	adds	r2, #1
 8014fba:	ed93 7a00 	vldr	s14, [r3]
 8014fbe:	4453      	add	r3, sl
 8014fc0:	b211      	sxth	r1, r2
 8014fc2:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8014fc6:	4281      	cmp	r1, r0
 8014fc8:	dbf6      	blt.n	8014fb8 <pool_func_mp_array_f32+0x374>
 8014fca:	3401      	adds	r4, #1
 8014fcc:	b224      	sxth	r4, r4
 8014fce:	42bc      	cmp	r4, r7
 8014fd0:	dbe9      	blt.n	8014fa6 <pool_func_mp_array_f32+0x362>
 8014fd2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014fd4:	f10e 0e01 	add.w	lr, lr, #1
 8014fd8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8014fda:	4433      	add	r3, r6
 8014fdc:	fa0f fe8e 	sxth.w	lr, lr
 8014fe0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014fe4:	45c6      	cmp	lr, r8
 8014fe6:	4676      	mov	r6, lr
 8014fe8:	edc3 7a00 	vstr	s15, [r3]
 8014fec:	dbd6      	blt.n	8014f9c <pool_func_mp_array_f32+0x358>
 8014fee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014ff0:	9905      	ldr	r1, [sp, #20]
 8014ff2:	9b07      	ldr	r3, [sp, #28]
 8014ff4:	3201      	adds	r2, #1
 8014ff6:	448c      	add	ip, r1
 8014ff8:	b212      	sxth	r2, r2
 8014ffa:	440b      	add	r3, r1
 8014ffc:	9902      	ldr	r1, [sp, #8]
 8014ffe:	fa1f fc8c 	uxth.w	ip, ip
 8015002:	b29b      	uxth	r3, r3
 8015004:	920a      	str	r2, [sp, #40]	@ 0x28
 8015006:	4291      	cmp	r1, r2
 8015008:	9307      	str	r3, [sp, #28]
 801500a:	4613      	mov	r3, r2
 801500c:	dcba      	bgt.n	8014f84 <pool_func_mp_array_f32+0x340>
 801500e:	9a01      	ldr	r2, [sp, #4]
 8015010:	9806      	ldr	r0, [sp, #24]
 8015012:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8015014:	4402      	add	r2, r0
 8015016:	9b08      	ldr	r3, [sp, #32]
 8015018:	3101      	adds	r1, #1
 801501a:	b292      	uxth	r2, r2
 801501c:	4403      	add	r3, r0
 801501e:	b209      	sxth	r1, r1
 8015020:	9201      	str	r2, [sp, #4]
 8015022:	b29b      	uxth	r3, r3
 8015024:	9a03      	ldr	r2, [sp, #12]
 8015026:	9308      	str	r3, [sp, #32]
 8015028:	460b      	mov	r3, r1
 801502a:	428a      	cmp	r2, r1
 801502c:	9109      	str	r1, [sp, #36]	@ 0x24
 801502e:	dc99      	bgt.n	8014f64 <pool_func_mp_array_f32+0x320>
 8015030:	e699      	b.n	8014d66 <pool_func_mp_array_f32+0x122>
 8015032:	bf00      	nop

08015034 <forward_lite_upsample_bilinear_if32of32>:
 8015034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015038:	ed2d 8b0a 	vpush	{d8-d12}
 801503c:	b08f      	sub	sp, #60	@ 0x3c
 801503e:	4683      	mov	fp, r0
 8015040:	9104      	str	r1, [sp, #16]
 8015042:	f89d 1094 	ldrb.w	r1, [sp, #148]	@ 0x94
 8015046:	f8dd 8088 	ldr.w	r8, [sp, #136]	@ 0x88
 801504a:	f8dd a090 	ldr.w	sl, [sp, #144]	@ 0x90
 801504e:	9206      	str	r2, [sp, #24]
 8015050:	2900      	cmp	r1, #0
 8015052:	f000 80a7 	beq.w	80151a4 <forward_lite_upsample_bilinear_if32of32+0x170>
 8015056:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801505a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801505e:	ee70 aae7 	vsub.f32	s21, s1, s15
 8015062:	ee70 7a67 	vsub.f32	s15, s0, s15
 8015066:	ee6a aa87 	vmul.f32	s21, s21, s14
 801506a:	ee27 9a87 	vmul.f32	s18, s15, s14
 801506e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8015072:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8015074:	ee87 baa0 	vdiv.f32	s22, s15, s1
 8015078:	eec7 9a80 	vdiv.f32	s19, s15, s0
 801507c:	2a00      	cmp	r2, #0
 801507e:	f000 808c 	beq.w	801519a <forward_lite_upsample_bilinear_if32of32+0x166>
 8015082:	3b01      	subs	r3, #1
 8015084:	ea4f 068a 	mov.w	r6, sl, lsl #2
 8015088:	eddf 8a49 	vldr	s17, [pc, #292]	@ 80151b0 <forward_lite_upsample_bilinear_if32of32+0x17c>
 801508c:	ee07 3a90 	vmov	s15, r3
 8015090:	9b06      	ldr	r3, [sp, #24]
 8015092:	1e5a      	subs	r2, r3, #1
 8015094:	fb0a f303 	mul.w	r3, sl, r3
 8015098:	eeb8 aa67 	vcvt.f32.u32	s20, s15
 801509c:	ee0c 2a90 	vmov	s25, r2
 80150a0:	9305      	str	r3, [sp, #20]
 80150a2:	2300      	movs	r3, #0
 80150a4:	eef8 ca6c 	vcvt.f32.u32	s25, s25
 80150a8:	9303      	str	r3, [sp, #12]
 80150aa:	fb06 f308 	mul.w	r3, r6, r8
 80150ae:	9307      	str	r3, [sp, #28]
 80150b0:	eddd 7a03 	vldr	s15, [sp, #12]
 80150b4:	9b05      	ldr	r3, [sp, #20]
 80150b6:	eef8 ba67 	vcvt.f32.u32	s23, s15
 80150ba:	ee7b baea 	vsub.f32	s23, s23, s21
 80150be:	ee6b ba8b 	vmul.f32	s23, s23, s22
 80150c2:	fecb baa8 	vmaxnm.f32	s23, s23, s17
 80150c6:	fecb baca 	vminnm.f32	s23, s23, s20
 80150ca:	eef4 ba4a 	vcmp.f32	s23, s20
 80150ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80150d2:	bf14      	ite	ne
 80150d4:	4699      	movne	r9, r3
 80150d6:	f04f 0900 	moveq.w	r9, #0
 80150da:	f1b8 0f00 	cmp.w	r8, #0
 80150de:	d056      	beq.n	801518e <forward_lite_upsample_bilinear_if32of32+0x15a>
 80150e0:	eebc 7aeb 	vcvt.u32.f32	s14, s23
 80150e4:	9b06      	ldr	r3, [sp, #24]
 80150e6:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 80150ea:	9d04      	ldr	r5, [sp, #16]
 80150ec:	2400      	movs	r4, #0
 80150ee:	eef8 7a47 	vcvt.f32.u32	s15, s14
 80150f2:	ee17 7a10 	vmov	r7, s14
 80150f6:	ee38 ca6b 	vsub.f32	s24, s16, s23
 80150fa:	fb03 f707 	mul.w	r7, r3, r7
 80150fe:	ee7b bae7 	vsub.f32	s23, s23, s15
 8015102:	ee3c ca27 	vadd.f32	s24, s24, s15
 8015106:	ee07 4a90 	vmov	s15, r4
 801510a:	ab0a      	add	r3, sp, #40	@ 0x28
 801510c:	3401      	adds	r4, #1
 801510e:	4629      	mov	r1, r5
 8015110:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015114:	9300      	str	r3, [sp, #0]
 8015116:	4652      	mov	r2, sl
 8015118:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
 801511c:	4435      	add	r5, r6
 801511e:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8015122:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8015126:	fec7 7aa8 	vmaxnm.f32	s15, s15, s17
 801512a:	fec7 7aec 	vminnm.f32	s15, s15, s25
 801512e:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 8015132:	eef4 7a6c 	vcmp.f32	s15, s25
 8015136:	ee38 7a67 	vsub.f32	s14, s16, s15
 801513a:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 801513e:	ee16 0a90 	vmov	r0, s13
 8015142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015146:	4438      	add	r0, r7
 8015148:	ee37 7a06 	vadd.f32	s14, s14, s12
 801514c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8015150:	bf14      	ite	ne
 8015152:	4653      	movne	r3, sl
 8015154:	2300      	moveq	r3, #0
 8015156:	fb06 b000 	mla	r0, r6, r0, fp
 801515a:	ee67 5a0c 	vmul.f32	s11, s14, s24
 801515e:	ee27 6a8c 	vmul.f32	s12, s15, s24
 8015162:	9308      	str	r3, [sp, #32]
 8015164:	ee27 7a2b 	vmul.f32	s14, s14, s23
 8015168:	ab08      	add	r3, sp, #32
 801516a:	ee67 7aab 	vmul.f32	s15, s15, s23
 801516e:	edcd 5a0a 	vstr	s11, [sp, #40]	@ 0x28
 8015172:	ed8d 6a0b 	vstr	s12, [sp, #44]	@ 0x2c
 8015176:	ed8d 7a0c 	vstr	s14, [sp, #48]	@ 0x30
 801517a:	edcd 7a0d 	vstr	s15, [sp, #52]	@ 0x34
 801517e:	f001 f9d9 	bl	8016534 <lite_bilinear_if32of32_kernel>
 8015182:	45a0      	cmp	r8, r4
 8015184:	d1bf      	bne.n	8015106 <forward_lite_upsample_bilinear_if32of32+0xd2>
 8015186:	9b04      	ldr	r3, [sp, #16]
 8015188:	9a07      	ldr	r2, [sp, #28]
 801518a:	4413      	add	r3, r2
 801518c:	9304      	str	r3, [sp, #16]
 801518e:	9b03      	ldr	r3, [sp, #12]
 8015190:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8015192:	3301      	adds	r3, #1
 8015194:	429a      	cmp	r2, r3
 8015196:	9303      	str	r3, [sp, #12]
 8015198:	d18a      	bne.n	80150b0 <forward_lite_upsample_bilinear_if32of32+0x7c>
 801519a:	b00f      	add	sp, #60	@ 0x3c
 801519c:	ecbd 8b0a 	vpop	{d8-d12}
 80151a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80151a4:	eddf aa02 	vldr	s21, [pc, #8]	@ 80151b0 <forward_lite_upsample_bilinear_if32of32+0x17c>
 80151a8:	eeb0 9a6a 	vmov.f32	s18, s21
 80151ac:	e75f      	b.n	801506e <forward_lite_upsample_bilinear_if32of32+0x3a>
 80151ae:	bf00      	nop
 80151b0:	00000000 	.word	0x00000000

080151b4 <forward_lite_upsample_bilinear_is8os8>:
 80151b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80151b8:	ed2d 8b0a 	vpush	{d8-d12}
 80151bc:	b08f      	sub	sp, #60	@ 0x3c
 80151be:	4682      	mov	sl, r0
 80151c0:	9104      	str	r1, [sp, #16]
 80151c2:	f89d 1094 	ldrb.w	r1, [sp, #148]	@ 0x94
 80151c6:	9f22      	ldr	r7, [sp, #136]	@ 0x88
 80151c8:	f8dd b090 	ldr.w	fp, [sp, #144]	@ 0x90
 80151cc:	9206      	str	r2, [sp, #24]
 80151ce:	2900      	cmp	r1, #0
 80151d0:	f000 80aa 	beq.w	8015328 <forward_lite_upsample_bilinear_is8os8+0x174>
 80151d4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80151d8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80151dc:	ee70 aae7 	vsub.f32	s21, s1, s15
 80151e0:	ee70 7a67 	vsub.f32	s15, s0, s15
 80151e4:	ee6a aa87 	vmul.f32	s21, s21, s14
 80151e8:	ee27 9a87 	vmul.f32	s18, s15, s14
 80151ec:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80151f0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80151f2:	ee87 baa0 	vdiv.f32	s22, s15, s1
 80151f6:	eec7 9a80 	vdiv.f32	s19, s15, s0
 80151fa:	2a00      	cmp	r2, #0
 80151fc:	f000 808f 	beq.w	801531e <forward_lite_upsample_bilinear_is8os8+0x16a>
 8015200:	3b01      	subs	r3, #1
 8015202:	eddf 8a4c 	vldr	s17, [pc, #304]	@ 8015334 <forward_lite_upsample_bilinear_is8os8+0x180>
 8015206:	ee07 3a90 	vmov	s15, r3
 801520a:	9b06      	ldr	r3, [sp, #24]
 801520c:	1e5a      	subs	r2, r3, #1
 801520e:	fb0b f303 	mul.w	r3, fp, r3
 8015212:	eeb8 aa67 	vcvt.f32.u32	s20, s15
 8015216:	ee0c 2a90 	vmov	s25, r2
 801521a:	9305      	str	r3, [sp, #20]
 801521c:	fb07 f30b 	mul.w	r3, r7, fp
 8015220:	eef8 ca6c 	vcvt.f32.u32	s25, s25
 8015224:	9307      	str	r3, [sp, #28]
 8015226:	2300      	movs	r3, #0
 8015228:	9303      	str	r3, [sp, #12]
 801522a:	eddd 7a03 	vldr	s15, [sp, #12]
 801522e:	9b05      	ldr	r3, [sp, #20]
 8015230:	eef8 ba67 	vcvt.f32.u32	s23, s15
 8015234:	ee7b baea 	vsub.f32	s23, s23, s21
 8015238:	ee6b ba8b 	vmul.f32	s23, s23, s22
 801523c:	fecb baa8 	vmaxnm.f32	s23, s23, s17
 8015240:	fecb baca 	vminnm.f32	s23, s23, s20
 8015244:	eef4 ba4a 	vcmp.f32	s23, s20
 8015248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801524c:	bf14      	ite	ne
 801524e:	4698      	movne	r8, r3
 8015250:	f04f 0800 	moveq.w	r8, #0
 8015254:	2f00      	cmp	r7, #0
 8015256:	d05c      	beq.n	8015312 <forward_lite_upsample_bilinear_is8os8+0x15e>
 8015258:	eebc 7aeb 	vcvt.u32.f32	s14, s23
 801525c:	9b06      	ldr	r3, [sp, #24]
 801525e:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 8015262:	9722      	str	r7, [sp, #136]	@ 0x88
 8015264:	9d04      	ldr	r5, [sp, #16]
 8015266:	4647      	mov	r7, r8
 8015268:	eef8 7a47 	vcvt.f32.u32	s15, s14
 801526c:	ee17 6a10 	vmov	r6, s14
 8015270:	ee38 ca6b 	vsub.f32	s24, s16, s23
 8015274:	2400      	movs	r4, #0
 8015276:	fb03 f606 	mul.w	r6, r3, r6
 801527a:	f10d 0928 	add.w	r9, sp, #40	@ 0x28
 801527e:	ee7b bae7 	vsub.f32	s23, s23, s15
 8015282:	f8dd 8088 	ldr.w	r8, [sp, #136]	@ 0x88
 8015286:	ee3c ca27 	vadd.f32	s24, s24, s15
 801528a:	ee07 4a90 	vmov	s15, r4
 801528e:	3401      	adds	r4, #1
 8015290:	4629      	mov	r1, r5
 8015292:	465a      	mov	r2, fp
 8015294:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015298:	f8cd 9000 	str.w	r9, [sp]
 801529c:	9709      	str	r7, [sp, #36]	@ 0x24
 801529e:	445d      	add	r5, fp
 80152a0:	ee77 7ac9 	vsub.f32	s15, s15, s18
 80152a4:	ee67 7aa9 	vmul.f32	s15, s15, s19
 80152a8:	fec7 7aa8 	vmaxnm.f32	s15, s15, s17
 80152ac:	fec7 7aec 	vminnm.f32	s15, s15, s25
 80152b0:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 80152b4:	eef4 7a6c 	vcmp.f32	s15, s25
 80152b8:	ee38 7a67 	vsub.f32	s14, s16, s15
 80152bc:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 80152c0:	ee16 0a90 	vmov	r0, s13
 80152c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80152c8:	4430      	add	r0, r6
 80152ca:	ee37 7a06 	vadd.f32	s14, s14, s12
 80152ce:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80152d2:	bf14      	ite	ne
 80152d4:	465b      	movne	r3, fp
 80152d6:	2300      	moveq	r3, #0
 80152d8:	fb0b a000 	mla	r0, fp, r0, sl
 80152dc:	ee67 5a0c 	vmul.f32	s11, s14, s24
 80152e0:	ee27 6a8c 	vmul.f32	s12, s15, s24
 80152e4:	9308      	str	r3, [sp, #32]
 80152e6:	ee27 7a2b 	vmul.f32	s14, s14, s23
 80152ea:	ab08      	add	r3, sp, #32
 80152ec:	ee67 7aab 	vmul.f32	s15, s15, s23
 80152f0:	edcd 5a0a 	vstr	s11, [sp, #40]	@ 0x28
 80152f4:	ed8d 6a0b 	vstr	s12, [sp, #44]	@ 0x2c
 80152f8:	ed8d 7a0c 	vstr	s14, [sp, #48]	@ 0x30
 80152fc:	edcd 7a0d 	vstr	s15, [sp, #52]	@ 0x34
 8015300:	f001 f948 	bl	8016594 <lite_bilinear_is8os8_kernel>
 8015304:	45a0      	cmp	r8, r4
 8015306:	d1c0      	bne.n	801528a <forward_lite_upsample_bilinear_is8os8+0xd6>
 8015308:	9b04      	ldr	r3, [sp, #16]
 801530a:	4647      	mov	r7, r8
 801530c:	9a07      	ldr	r2, [sp, #28]
 801530e:	4413      	add	r3, r2
 8015310:	9304      	str	r3, [sp, #16]
 8015312:	9b03      	ldr	r3, [sp, #12]
 8015314:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8015316:	3301      	adds	r3, #1
 8015318:	429a      	cmp	r2, r3
 801531a:	9303      	str	r3, [sp, #12]
 801531c:	d185      	bne.n	801522a <forward_lite_upsample_bilinear_is8os8+0x76>
 801531e:	b00f      	add	sp, #60	@ 0x3c
 8015320:	ecbd 8b0a 	vpop	{d8-d12}
 8015324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015328:	eddf aa02 	vldr	s21, [pc, #8]	@ 8015334 <forward_lite_upsample_bilinear_is8os8+0x180>
 801532c:	eeb0 9a6a 	vmov.f32	s18, s21
 8015330:	e75c      	b.n	80151ec <forward_lite_upsample_bilinear_is8os8+0x38>
 8015332:	bf00      	nop
 8015334:	00000000 	.word	0x00000000

08015338 <forward_lite_upsample_bilinear_iu8ou8>:
 8015338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801533c:	ed2d 8b0a 	vpush	{d8-d12}
 8015340:	b08f      	sub	sp, #60	@ 0x3c
 8015342:	4682      	mov	sl, r0
 8015344:	9104      	str	r1, [sp, #16]
 8015346:	f89d 1094 	ldrb.w	r1, [sp, #148]	@ 0x94
 801534a:	9f22      	ldr	r7, [sp, #136]	@ 0x88
 801534c:	f8dd b090 	ldr.w	fp, [sp, #144]	@ 0x90
 8015350:	9206      	str	r2, [sp, #24]
 8015352:	2900      	cmp	r1, #0
 8015354:	f000 80aa 	beq.w	80154ac <forward_lite_upsample_bilinear_iu8ou8+0x174>
 8015358:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801535c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8015360:	ee70 aae7 	vsub.f32	s21, s1, s15
 8015364:	ee70 7a67 	vsub.f32	s15, s0, s15
 8015368:	ee6a aa87 	vmul.f32	s21, s21, s14
 801536c:	ee27 9a87 	vmul.f32	s18, s15, s14
 8015370:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8015374:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8015376:	ee87 baa0 	vdiv.f32	s22, s15, s1
 801537a:	eec7 9a80 	vdiv.f32	s19, s15, s0
 801537e:	2a00      	cmp	r2, #0
 8015380:	f000 808f 	beq.w	80154a2 <forward_lite_upsample_bilinear_iu8ou8+0x16a>
 8015384:	3b01      	subs	r3, #1
 8015386:	eddf 8a4c 	vldr	s17, [pc, #304]	@ 80154b8 <forward_lite_upsample_bilinear_iu8ou8+0x180>
 801538a:	ee07 3a90 	vmov	s15, r3
 801538e:	9b06      	ldr	r3, [sp, #24]
 8015390:	1e5a      	subs	r2, r3, #1
 8015392:	fb0b f303 	mul.w	r3, fp, r3
 8015396:	eeb8 aa67 	vcvt.f32.u32	s20, s15
 801539a:	ee0c 2a90 	vmov	s25, r2
 801539e:	9305      	str	r3, [sp, #20]
 80153a0:	fb07 f30b 	mul.w	r3, r7, fp
 80153a4:	eef8 ca6c 	vcvt.f32.u32	s25, s25
 80153a8:	9307      	str	r3, [sp, #28]
 80153aa:	2300      	movs	r3, #0
 80153ac:	9303      	str	r3, [sp, #12]
 80153ae:	eddd 7a03 	vldr	s15, [sp, #12]
 80153b2:	9b05      	ldr	r3, [sp, #20]
 80153b4:	eef8 ba67 	vcvt.f32.u32	s23, s15
 80153b8:	ee7b baea 	vsub.f32	s23, s23, s21
 80153bc:	ee6b ba8b 	vmul.f32	s23, s23, s22
 80153c0:	fecb baa8 	vmaxnm.f32	s23, s23, s17
 80153c4:	fecb baca 	vminnm.f32	s23, s23, s20
 80153c8:	eef4 ba4a 	vcmp.f32	s23, s20
 80153cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153d0:	bf14      	ite	ne
 80153d2:	4698      	movne	r8, r3
 80153d4:	f04f 0800 	moveq.w	r8, #0
 80153d8:	2f00      	cmp	r7, #0
 80153da:	d05c      	beq.n	8015496 <forward_lite_upsample_bilinear_iu8ou8+0x15e>
 80153dc:	eebc 7aeb 	vcvt.u32.f32	s14, s23
 80153e0:	9b06      	ldr	r3, [sp, #24]
 80153e2:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 80153e6:	9722      	str	r7, [sp, #136]	@ 0x88
 80153e8:	9d04      	ldr	r5, [sp, #16]
 80153ea:	4647      	mov	r7, r8
 80153ec:	eef8 7a47 	vcvt.f32.u32	s15, s14
 80153f0:	ee17 6a10 	vmov	r6, s14
 80153f4:	ee38 ca6b 	vsub.f32	s24, s16, s23
 80153f8:	2400      	movs	r4, #0
 80153fa:	fb03 f606 	mul.w	r6, r3, r6
 80153fe:	f10d 0928 	add.w	r9, sp, #40	@ 0x28
 8015402:	ee7b bae7 	vsub.f32	s23, s23, s15
 8015406:	f8dd 8088 	ldr.w	r8, [sp, #136]	@ 0x88
 801540a:	ee3c ca27 	vadd.f32	s24, s24, s15
 801540e:	ee07 4a90 	vmov	s15, r4
 8015412:	3401      	adds	r4, #1
 8015414:	4629      	mov	r1, r5
 8015416:	465a      	mov	r2, fp
 8015418:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801541c:	f8cd 9000 	str.w	r9, [sp]
 8015420:	9709      	str	r7, [sp, #36]	@ 0x24
 8015422:	445d      	add	r5, fp
 8015424:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8015428:	ee67 7aa9 	vmul.f32	s15, s15, s19
 801542c:	fec7 7aa8 	vmaxnm.f32	s15, s15, s17
 8015430:	fec7 7aec 	vminnm.f32	s15, s15, s25
 8015434:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 8015438:	eef4 7a6c 	vcmp.f32	s15, s25
 801543c:	ee38 7a67 	vsub.f32	s14, s16, s15
 8015440:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 8015444:	ee16 0a90 	vmov	r0, s13
 8015448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801544c:	4430      	add	r0, r6
 801544e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8015452:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8015456:	bf14      	ite	ne
 8015458:	465b      	movne	r3, fp
 801545a:	2300      	moveq	r3, #0
 801545c:	fb0b a000 	mla	r0, fp, r0, sl
 8015460:	ee67 5a0c 	vmul.f32	s11, s14, s24
 8015464:	ee27 6a8c 	vmul.f32	s12, s15, s24
 8015468:	9308      	str	r3, [sp, #32]
 801546a:	ee27 7a2b 	vmul.f32	s14, s14, s23
 801546e:	ab08      	add	r3, sp, #32
 8015470:	ee67 7aab 	vmul.f32	s15, s15, s23
 8015474:	edcd 5a0a 	vstr	s11, [sp, #40]	@ 0x28
 8015478:	ed8d 6a0b 	vstr	s12, [sp, #44]	@ 0x2c
 801547c:	ed8d 7a0c 	vstr	s14, [sp, #48]	@ 0x30
 8015480:	edcd 7a0d 	vstr	s15, [sp, #52]	@ 0x34
 8015484:	f001 f8e4 	bl	8016650 <lite_bilinear_iu8ou8_kernel>
 8015488:	45a0      	cmp	r8, r4
 801548a:	d1c0      	bne.n	801540e <forward_lite_upsample_bilinear_iu8ou8+0xd6>
 801548c:	9b04      	ldr	r3, [sp, #16]
 801548e:	4647      	mov	r7, r8
 8015490:	9a07      	ldr	r2, [sp, #28]
 8015492:	4413      	add	r3, r2
 8015494:	9304      	str	r3, [sp, #16]
 8015496:	9b03      	ldr	r3, [sp, #12]
 8015498:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801549a:	3301      	adds	r3, #1
 801549c:	429a      	cmp	r2, r3
 801549e:	9303      	str	r3, [sp, #12]
 80154a0:	d185      	bne.n	80153ae <forward_lite_upsample_bilinear_iu8ou8+0x76>
 80154a2:	b00f      	add	sp, #60	@ 0x3c
 80154a4:	ecbd 8b0a 	vpop	{d8-d12}
 80154a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80154ac:	eddf aa02 	vldr	s21, [pc, #8]	@ 80154b8 <forward_lite_upsample_bilinear_iu8ou8+0x180>
 80154b0:	eeb0 9a6a 	vmov.f32	s18, s21
 80154b4:	e75c      	b.n	8015370 <forward_lite_upsample_bilinear_iu8ou8+0x38>
 80154b6:	bf00      	nop
 80154b8:	00000000 	.word	0x00000000

080154bc <forward_lite_upsample_bilinear_is16os16>:
 80154bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80154c0:	ed2d 8b0a 	vpush	{d8-d12}
 80154c4:	b08f      	sub	sp, #60	@ 0x3c
 80154c6:	4683      	mov	fp, r0
 80154c8:	9104      	str	r1, [sp, #16]
 80154ca:	f89d 1094 	ldrb.w	r1, [sp, #148]	@ 0x94
 80154ce:	f8dd 8088 	ldr.w	r8, [sp, #136]	@ 0x88
 80154d2:	f8dd a090 	ldr.w	sl, [sp, #144]	@ 0x90
 80154d6:	9206      	str	r2, [sp, #24]
 80154d8:	2900      	cmp	r1, #0
 80154da:	f000 80a7 	beq.w	801562c <forward_lite_upsample_bilinear_is16os16+0x170>
 80154de:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80154e2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80154e6:	ee70 aae7 	vsub.f32	s21, s1, s15
 80154ea:	ee70 7a67 	vsub.f32	s15, s0, s15
 80154ee:	ee6a aa87 	vmul.f32	s21, s21, s14
 80154f2:	ee27 9a87 	vmul.f32	s18, s15, s14
 80154f6:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80154fa:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80154fc:	ee87 baa0 	vdiv.f32	s22, s15, s1
 8015500:	eec7 9a80 	vdiv.f32	s19, s15, s0
 8015504:	2a00      	cmp	r2, #0
 8015506:	f000 808c 	beq.w	8015622 <forward_lite_upsample_bilinear_is16os16+0x166>
 801550a:	3b01      	subs	r3, #1
 801550c:	ea4f 064a 	mov.w	r6, sl, lsl #1
 8015510:	eddf 8a49 	vldr	s17, [pc, #292]	@ 8015638 <forward_lite_upsample_bilinear_is16os16+0x17c>
 8015514:	ee07 3a90 	vmov	s15, r3
 8015518:	9b06      	ldr	r3, [sp, #24]
 801551a:	1e5a      	subs	r2, r3, #1
 801551c:	fb0a f303 	mul.w	r3, sl, r3
 8015520:	eeb8 aa67 	vcvt.f32.u32	s20, s15
 8015524:	ee0c 2a90 	vmov	s25, r2
 8015528:	9305      	str	r3, [sp, #20]
 801552a:	2300      	movs	r3, #0
 801552c:	eef8 ca6c 	vcvt.f32.u32	s25, s25
 8015530:	9303      	str	r3, [sp, #12]
 8015532:	fb06 f308 	mul.w	r3, r6, r8
 8015536:	9307      	str	r3, [sp, #28]
 8015538:	eddd 7a03 	vldr	s15, [sp, #12]
 801553c:	9b05      	ldr	r3, [sp, #20]
 801553e:	eef8 ba67 	vcvt.f32.u32	s23, s15
 8015542:	ee7b baea 	vsub.f32	s23, s23, s21
 8015546:	ee6b ba8b 	vmul.f32	s23, s23, s22
 801554a:	fecb baa8 	vmaxnm.f32	s23, s23, s17
 801554e:	fecb baca 	vminnm.f32	s23, s23, s20
 8015552:	eef4 ba4a 	vcmp.f32	s23, s20
 8015556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801555a:	bf14      	ite	ne
 801555c:	4699      	movne	r9, r3
 801555e:	f04f 0900 	moveq.w	r9, #0
 8015562:	f1b8 0f00 	cmp.w	r8, #0
 8015566:	d056      	beq.n	8015616 <forward_lite_upsample_bilinear_is16os16+0x15a>
 8015568:	eebc 7aeb 	vcvt.u32.f32	s14, s23
 801556c:	9b06      	ldr	r3, [sp, #24]
 801556e:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 8015572:	9d04      	ldr	r5, [sp, #16]
 8015574:	2400      	movs	r4, #0
 8015576:	eef8 7a47 	vcvt.f32.u32	s15, s14
 801557a:	ee17 7a10 	vmov	r7, s14
 801557e:	ee38 ca6b 	vsub.f32	s24, s16, s23
 8015582:	fb03 f707 	mul.w	r7, r3, r7
 8015586:	ee7b bae7 	vsub.f32	s23, s23, s15
 801558a:	ee3c ca27 	vadd.f32	s24, s24, s15
 801558e:	ee07 4a90 	vmov	s15, r4
 8015592:	ab0a      	add	r3, sp, #40	@ 0x28
 8015594:	3401      	adds	r4, #1
 8015596:	4629      	mov	r1, r5
 8015598:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801559c:	9300      	str	r3, [sp, #0]
 801559e:	4652      	mov	r2, sl
 80155a0:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
 80155a4:	4435      	add	r5, r6
 80155a6:	ee77 7ac9 	vsub.f32	s15, s15, s18
 80155aa:	ee67 7aa9 	vmul.f32	s15, s15, s19
 80155ae:	fec7 7aa8 	vmaxnm.f32	s15, s15, s17
 80155b2:	fec7 7aec 	vminnm.f32	s15, s15, s25
 80155b6:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 80155ba:	eef4 7a6c 	vcmp.f32	s15, s25
 80155be:	ee38 7a67 	vsub.f32	s14, s16, s15
 80155c2:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 80155c6:	ee16 0a90 	vmov	r0, s13
 80155ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80155ce:	4438      	add	r0, r7
 80155d0:	ee37 7a06 	vadd.f32	s14, s14, s12
 80155d4:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80155d8:	bf14      	ite	ne
 80155da:	4653      	movne	r3, sl
 80155dc:	2300      	moveq	r3, #0
 80155de:	fb06 b000 	mla	r0, r6, r0, fp
 80155e2:	ee67 5a0c 	vmul.f32	s11, s14, s24
 80155e6:	ee27 6a8c 	vmul.f32	s12, s15, s24
 80155ea:	9308      	str	r3, [sp, #32]
 80155ec:	ee27 7a2b 	vmul.f32	s14, s14, s23
 80155f0:	ab08      	add	r3, sp, #32
 80155f2:	ee67 7aab 	vmul.f32	s15, s15, s23
 80155f6:	edcd 5a0a 	vstr	s11, [sp, #40]	@ 0x28
 80155fa:	ed8d 6a0b 	vstr	s12, [sp, #44]	@ 0x2c
 80155fe:	ed8d 7a0c 	vstr	s14, [sp, #48]	@ 0x30
 8015602:	edcd 7a0d 	vstr	s15, [sp, #52]	@ 0x34
 8015606:	f001 f86d 	bl	80166e4 <lite_bilinear_is16os16_kernel>
 801560a:	45a0      	cmp	r8, r4
 801560c:	d1bf      	bne.n	801558e <forward_lite_upsample_bilinear_is16os16+0xd2>
 801560e:	9b04      	ldr	r3, [sp, #16]
 8015610:	9a07      	ldr	r2, [sp, #28]
 8015612:	4413      	add	r3, r2
 8015614:	9304      	str	r3, [sp, #16]
 8015616:	9b03      	ldr	r3, [sp, #12]
 8015618:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801561a:	3301      	adds	r3, #1
 801561c:	429a      	cmp	r2, r3
 801561e:	9303      	str	r3, [sp, #12]
 8015620:	d18a      	bne.n	8015538 <forward_lite_upsample_bilinear_is16os16+0x7c>
 8015622:	b00f      	add	sp, #60	@ 0x3c
 8015624:	ecbd 8b0a 	vpop	{d8-d12}
 8015628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801562c:	eddf aa02 	vldr	s21, [pc, #8]	@ 8015638 <forward_lite_upsample_bilinear_is16os16+0x17c>
 8015630:	eeb0 9a6a 	vmov.f32	s18, s21
 8015634:	e75f      	b.n	80154f6 <forward_lite_upsample_bilinear_is16os16+0x3a>
 8015636:	bf00      	nop
 8015638:	00000000 	.word	0x00000000

0801563c <forward_lite_upsample_bilinear_iu16ou16>:
 801563c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015640:	ed2d 8b0a 	vpush	{d8-d12}
 8015644:	b08f      	sub	sp, #60	@ 0x3c
 8015646:	4683      	mov	fp, r0
 8015648:	9104      	str	r1, [sp, #16]
 801564a:	f89d 1094 	ldrb.w	r1, [sp, #148]	@ 0x94
 801564e:	f8dd 8088 	ldr.w	r8, [sp, #136]	@ 0x88
 8015652:	f8dd a090 	ldr.w	sl, [sp, #144]	@ 0x90
 8015656:	9206      	str	r2, [sp, #24]
 8015658:	2900      	cmp	r1, #0
 801565a:	f000 80a7 	beq.w	80157ac <forward_lite_upsample_bilinear_iu16ou16+0x170>
 801565e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8015662:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8015666:	ee70 aae7 	vsub.f32	s21, s1, s15
 801566a:	ee70 7a67 	vsub.f32	s15, s0, s15
 801566e:	ee6a aa87 	vmul.f32	s21, s21, s14
 8015672:	ee27 9a87 	vmul.f32	s18, s15, s14
 8015676:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801567a:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801567c:	ee87 baa0 	vdiv.f32	s22, s15, s1
 8015680:	eec7 9a80 	vdiv.f32	s19, s15, s0
 8015684:	2a00      	cmp	r2, #0
 8015686:	f000 808c 	beq.w	80157a2 <forward_lite_upsample_bilinear_iu16ou16+0x166>
 801568a:	3b01      	subs	r3, #1
 801568c:	ea4f 064a 	mov.w	r6, sl, lsl #1
 8015690:	eddf 8a49 	vldr	s17, [pc, #292]	@ 80157b8 <forward_lite_upsample_bilinear_iu16ou16+0x17c>
 8015694:	ee07 3a90 	vmov	s15, r3
 8015698:	9b06      	ldr	r3, [sp, #24]
 801569a:	1e5a      	subs	r2, r3, #1
 801569c:	fb0a f303 	mul.w	r3, sl, r3
 80156a0:	eeb8 aa67 	vcvt.f32.u32	s20, s15
 80156a4:	ee0c 2a90 	vmov	s25, r2
 80156a8:	9305      	str	r3, [sp, #20]
 80156aa:	2300      	movs	r3, #0
 80156ac:	eef8 ca6c 	vcvt.f32.u32	s25, s25
 80156b0:	9303      	str	r3, [sp, #12]
 80156b2:	fb06 f308 	mul.w	r3, r6, r8
 80156b6:	9307      	str	r3, [sp, #28]
 80156b8:	eddd 7a03 	vldr	s15, [sp, #12]
 80156bc:	9b05      	ldr	r3, [sp, #20]
 80156be:	eef8 ba67 	vcvt.f32.u32	s23, s15
 80156c2:	ee7b baea 	vsub.f32	s23, s23, s21
 80156c6:	ee6b ba8b 	vmul.f32	s23, s23, s22
 80156ca:	fecb baa8 	vmaxnm.f32	s23, s23, s17
 80156ce:	fecb baca 	vminnm.f32	s23, s23, s20
 80156d2:	eef4 ba4a 	vcmp.f32	s23, s20
 80156d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80156da:	bf14      	ite	ne
 80156dc:	4699      	movne	r9, r3
 80156de:	f04f 0900 	moveq.w	r9, #0
 80156e2:	f1b8 0f00 	cmp.w	r8, #0
 80156e6:	d056      	beq.n	8015796 <forward_lite_upsample_bilinear_iu16ou16+0x15a>
 80156e8:	eebc 7aeb 	vcvt.u32.f32	s14, s23
 80156ec:	9b06      	ldr	r3, [sp, #24]
 80156ee:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 80156f2:	9d04      	ldr	r5, [sp, #16]
 80156f4:	2400      	movs	r4, #0
 80156f6:	eef8 7a47 	vcvt.f32.u32	s15, s14
 80156fa:	ee17 7a10 	vmov	r7, s14
 80156fe:	ee38 ca6b 	vsub.f32	s24, s16, s23
 8015702:	fb03 f707 	mul.w	r7, r3, r7
 8015706:	ee7b bae7 	vsub.f32	s23, s23, s15
 801570a:	ee3c ca27 	vadd.f32	s24, s24, s15
 801570e:	ee07 4a90 	vmov	s15, r4
 8015712:	ab0a      	add	r3, sp, #40	@ 0x28
 8015714:	3401      	adds	r4, #1
 8015716:	4629      	mov	r1, r5
 8015718:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801571c:	9300      	str	r3, [sp, #0]
 801571e:	4652      	mov	r2, sl
 8015720:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
 8015724:	4435      	add	r5, r6
 8015726:	ee77 7ac9 	vsub.f32	s15, s15, s18
 801572a:	ee67 7aa9 	vmul.f32	s15, s15, s19
 801572e:	fec7 7aa8 	vmaxnm.f32	s15, s15, s17
 8015732:	fec7 7aec 	vminnm.f32	s15, s15, s25
 8015736:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 801573a:	eef4 7a6c 	vcmp.f32	s15, s25
 801573e:	ee38 7a67 	vsub.f32	s14, s16, s15
 8015742:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 8015746:	ee16 0a90 	vmov	r0, s13
 801574a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801574e:	4438      	add	r0, r7
 8015750:	ee37 7a06 	vadd.f32	s14, s14, s12
 8015754:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8015758:	bf14      	ite	ne
 801575a:	4653      	movne	r3, sl
 801575c:	2300      	moveq	r3, #0
 801575e:	fb06 b000 	mla	r0, r6, r0, fp
 8015762:	ee67 5a0c 	vmul.f32	s11, s14, s24
 8015766:	ee27 6a8c 	vmul.f32	s12, s15, s24
 801576a:	9308      	str	r3, [sp, #32]
 801576c:	ee27 7a2b 	vmul.f32	s14, s14, s23
 8015770:	ab08      	add	r3, sp, #32
 8015772:	ee67 7aab 	vmul.f32	s15, s15, s23
 8015776:	edcd 5a0a 	vstr	s11, [sp, #40]	@ 0x28
 801577a:	ed8d 6a0b 	vstr	s12, [sp, #44]	@ 0x2c
 801577e:	ed8d 7a0c 	vstr	s14, [sp, #48]	@ 0x30
 8015782:	edcd 7a0d 	vstr	s15, [sp, #52]	@ 0x34
 8015786:	f001 f803 	bl	8016790 <lite_bilinear_iu16ou16_kernel>
 801578a:	45a0      	cmp	r8, r4
 801578c:	d1bf      	bne.n	801570e <forward_lite_upsample_bilinear_iu16ou16+0xd2>
 801578e:	9b04      	ldr	r3, [sp, #16]
 8015790:	9a07      	ldr	r2, [sp, #28]
 8015792:	4413      	add	r3, r2
 8015794:	9304      	str	r3, [sp, #16]
 8015796:	9b03      	ldr	r3, [sp, #12]
 8015798:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801579a:	3301      	adds	r3, #1
 801579c:	429a      	cmp	r2, r3
 801579e:	9303      	str	r3, [sp, #12]
 80157a0:	d18a      	bne.n	80156b8 <forward_lite_upsample_bilinear_iu16ou16+0x7c>
 80157a2:	b00f      	add	sp, #60	@ 0x3c
 80157a4:	ecbd 8b0a 	vpop	{d8-d12}
 80157a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80157ac:	eddf aa02 	vldr	s21, [pc, #8]	@ 80157b8 <forward_lite_upsample_bilinear_iu16ou16+0x17c>
 80157b0:	eeb0 9a6a 	vmov.f32	s18, s21
 80157b4:	e75f      	b.n	8015676 <forward_lite_upsample_bilinear_iu16ou16+0x3a>
 80157b6:	bf00      	nop
 80157b8:	00000000 	.word	0x00000000

080157bc <forward_lite_dense_if32of32wf32>:
 80157bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80157c0:	ed2d 8b0c 	vpush	{d8-d13}
 80157c4:	e9d0 2305 	ldrd	r2, r3, [r0, #20]
 80157c8:	6801      	ldr	r1, [r0, #0]
 80157ca:	b083      	sub	sp, #12
 80157cc:	fb02 f303 	mul.w	r3, r2, r3
 80157d0:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80157d4:	9100      	str	r1, [sp, #0]
 80157d6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80157da:	4299      	cmp	r1, r3
 80157dc:	9301      	str	r3, [sp, #4]
 80157de:	f080 811c 	bcs.w	8015a1a <forward_lite_dense_if32of32wf32+0x25e>
 80157e2:	4607      	mov	r7, r0
 80157e4:	6904      	ldr	r4, [r0, #16]
 80157e6:	0096      	lsls	r6, r2, #2
 80157e8:	9b00      	ldr	r3, [sp, #0]
 80157ea:	68bd      	ldr	r5, [r7, #8]
 80157ec:	eb03 0e06 	add.w	lr, r3, r6
 80157f0:	461e      	mov	r6, r3
 80157f2:	459e      	cmp	lr, r3
 80157f4:	f240 8103 	bls.w	80159fe <forward_lite_dense_if32of32wf32+0x242>
 80157f8:	f1a4 0c10 	sub.w	ip, r4, #16
 80157fc:	ea4f 0984 	mov.w	r9, r4, lsl #2
 8015800:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 8015804:	f10c 0c01 	add.w	ip, ip, #1
 8015808:	ea4f 1b8c 	mov.w	fp, ip, lsl #6
 801580c:	eb08 1c8c 	add.w	ip, r8, ip, lsl #6
 8015810:	2c0f      	cmp	r4, #15
 8015812:	f240 8107 	bls.w	8015a24 <forward_lite_dense_if32of32wf32+0x268>
 8015816:	f108 0240 	add.w	r2, r8, #64	@ 0x40
 801581a:	f105 0340 	add.w	r3, r5, #64	@ 0x40
 801581e:	ed9f 7a95 	vldr	s14, [pc, #596]	@ 8015a74 <forward_lite_dense_if32of32wf32+0x2b8>
 8015822:	4621      	mov	r1, r4
 8015824:	ed53 6a0f 	vldr	s13, [r3, #-60]	@ 0xffffffc4
 8015828:	3910      	subs	r1, #16
 801582a:	ed52 7a0f 	vldr	s15, [r2, #-60]	@ 0xffffffc4
 801582e:	3340      	adds	r3, #64	@ 0x40
 8015830:	ed52 4a10 	vldr	s9, [r2, #-64]	@ 0xffffffc0
 8015834:	290f      	cmp	r1, #15
 8015836:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801583a:	ed13 5a20 	vldr	s10, [r3, #-128]	@ 0xffffff80
 801583e:	ed52 5a0e 	vldr	s11, [r2, #-56]	@ 0xffffffc8
 8015842:	f102 0240 	add.w	r2, r2, #64	@ 0x40
 8015846:	ed13 6a1e 	vldr	s12, [r3, #-120]	@ 0xffffff88
 801584a:	eee4 7a85 	vfma.f32	s15, s9, s10
 801584e:	ed53 6a1d 	vldr	s13, [r3, #-116]	@ 0xffffff8c
 8015852:	ed12 da1d 	vldr	s26, [r2, #-116]	@ 0xffffff8c
 8015856:	ed52 ca1c 	vldr	s25, [r2, #-112]	@ 0xffffff90
 801585a:	ed13 ca1c 	vldr	s24, [r3, #-112]	@ 0xffffff90
 801585e:	ed52 ba1b 	vldr	s23, [r2, #-108]	@ 0xffffff94
 8015862:	ed13 ba1b 	vldr	s22, [r3, #-108]	@ 0xffffff94
 8015866:	eee5 7a86 	vfma.f32	s15, s11, s12
 801586a:	ed52 aa1a 	vldr	s21, [r2, #-104]	@ 0xffffff98
 801586e:	ed13 aa1a 	vldr	s20, [r3, #-104]	@ 0xffffff98
 8015872:	ed52 9a19 	vldr	s19, [r2, #-100]	@ 0xffffff9c
 8015876:	ed13 9a19 	vldr	s18, [r3, #-100]	@ 0xffffff9c
 801587a:	ed52 8a18 	vldr	s17, [r2, #-96]	@ 0xffffffa0
 801587e:	ed13 8a18 	vldr	s16, [r3, #-96]	@ 0xffffffa0
 8015882:	eeed 7a26 	vfma.f32	s15, s26, s13
 8015886:	ed12 0a17 	vldr	s0, [r2, #-92]	@ 0xffffffa4
 801588a:	ed53 0a17 	vldr	s1, [r3, #-92]	@ 0xffffffa4
 801588e:	ed12 1a16 	vldr	s2, [r2, #-88]	@ 0xffffffa8
 8015892:	ed53 1a16 	vldr	s3, [r3, #-88]	@ 0xffffffa8
 8015896:	ed12 2a15 	vldr	s4, [r2, #-84]	@ 0xffffffac
 801589a:	ed53 2a15 	vldr	s5, [r3, #-84]	@ 0xffffffac
 801589e:	eeec 7a8c 	vfma.f32	s15, s25, s24
 80158a2:	ed12 3a14 	vldr	s6, [r2, #-80]	@ 0xffffffb0
 80158a6:	ed53 3a14 	vldr	s7, [r3, #-80]	@ 0xffffffb0
 80158aa:	ed12 4a13 	vldr	s8, [r2, #-76]	@ 0xffffffb4
 80158ae:	ed53 4a13 	vldr	s9, [r3, #-76]	@ 0xffffffb4
 80158b2:	ed12 5a12 	vldr	s10, [r2, #-72]	@ 0xffffffb8
 80158b6:	ed53 5a12 	vldr	s11, [r3, #-72]	@ 0xffffffb8
 80158ba:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 80158be:	ed12 6a11 	vldr	s12, [r2, #-68]	@ 0xffffffbc
 80158c2:	ed53 6a11 	vldr	s13, [r3, #-68]	@ 0xffffffbc
 80158c6:	eeea 7a8a 	vfma.f32	s15, s21, s20
 80158ca:	eee9 7a89 	vfma.f32	s15, s19, s18
 80158ce:	eee8 7a88 	vfma.f32	s15, s17, s16
 80158d2:	eee0 7a20 	vfma.f32	s15, s0, s1
 80158d6:	eee1 7a21 	vfma.f32	s15, s2, s3
 80158da:	eee2 7a22 	vfma.f32	s15, s4, s5
 80158de:	eee3 7a23 	vfma.f32	s15, s6, s7
 80158e2:	eee4 7a24 	vfma.f32	s15, s8, s9
 80158e6:	eee5 7a25 	vfma.f32	s15, s10, s11
 80158ea:	eee6 7a26 	vfma.f32	s15, s12, s13
 80158ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80158f2:	d897      	bhi.n	8015824 <forward_lite_dense_if32of32wf32+0x68>
 80158f4:	eb05 020b 	add.w	r2, r5, fp
 80158f8:	f004 010f 	and.w	r1, r4, #15
 80158fc:	4663      	mov	r3, ip
 80158fe:	2903      	cmp	r1, #3
 8015900:	d95f      	bls.n	80159c2 <forward_lite_dense_if32of32wf32+0x206>
 8015902:	edd2 6a01 	vldr	s13, [r2, #4]
 8015906:	1f08      	subs	r0, r1, #4
 8015908:	edd3 7a01 	vldr	s15, [r3, #4]
 801590c:	ed93 4a00 	vldr	s8, [r3]
 8015910:	2803      	cmp	r0, #3
 8015912:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8015916:	edd2 4a00 	vldr	s9, [r2]
 801591a:	ed93 5a02 	vldr	s10, [r3, #8]
 801591e:	edd2 5a02 	vldr	s11, [r2, #8]
 8015922:	eee4 7a24 	vfma.f32	s15, s8, s9
 8015926:	ed93 6a03 	vldr	s12, [r3, #12]
 801592a:	edd2 6a03 	vldr	s13, [r2, #12]
 801592e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015932:	eee5 7a25 	vfma.f32	s15, s10, s11
 8015936:	eee6 7a26 	vfma.f32	s15, s12, s13
 801593a:	eeb0 7a67 	vmov.f32	s14, s15
 801593e:	d938      	bls.n	80159b2 <forward_lite_dense_if32of32wf32+0x1f6>
 8015940:	edd2 6a05 	vldr	s13, [r2, #20]
 8015944:	f1a1 0a08 	sub.w	sl, r1, #8
 8015948:	edd3 7a05 	vldr	s15, [r3, #20]
 801594c:	ed93 4a04 	vldr	s8, [r3, #16]
 8015950:	f1ba 0f03 	cmp.w	sl, #3
 8015954:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8015958:	edd2 4a04 	vldr	s9, [r2, #16]
 801595c:	ed93 5a06 	vldr	s10, [r3, #24]
 8015960:	edd2 5a06 	vldr	s11, [r2, #24]
 8015964:	eee4 7a24 	vfma.f32	s15, s8, s9
 8015968:	ed93 6a07 	vldr	s12, [r3, #28]
 801596c:	edd2 6a07 	vldr	s13, [r2, #28]
 8015970:	eee5 7a25 	vfma.f32	s15, s10, s11
 8015974:	eee6 7a26 	vfma.f32	s15, s12, s13
 8015978:	ee37 7a27 	vadd.f32	s14, s14, s15
 801597c:	d919      	bls.n	80159b2 <forward_lite_dense_if32of32wf32+0x1f6>
 801597e:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8015982:	edd2 7a09 	vldr	s15, [r2, #36]	@ 0x24
 8015986:	ed92 4a08 	vldr	s8, [r2, #32]
 801598a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801598e:	edd3 4a08 	vldr	s9, [r3, #32]
 8015992:	ed92 5a0a 	vldr	s10, [r2, #40]	@ 0x28
 8015996:	edd3 5a0a 	vldr	s11, [r3, #40]	@ 0x28
 801599a:	eee4 7a24 	vfma.f32	s15, s8, s9
 801599e:	ed92 6a0b 	vldr	s12, [r2, #44]	@ 0x2c
 80159a2:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 80159a6:	eee5 7a25 	vfma.f32	s15, s10, s11
 80159aa:	eee6 7a26 	vfma.f32	s15, s12, s13
 80159ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80159b2:	0880      	lsrs	r0, r0, #2
 80159b4:	f001 0103 	and.w	r1, r1, #3
 80159b8:	3001      	adds	r0, #1
 80159ba:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 80159be:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 80159c2:	b1a9      	cbz	r1, 80159f0 <forward_lite_dense_if32of32wf32+0x234>
 80159c4:	edd3 6a00 	vldr	s13, [r3]
 80159c8:	3901      	subs	r1, #1
 80159ca:	edd2 7a00 	vldr	s15, [r2]
 80159ce:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80159d2:	d00d      	beq.n	80159f0 <forward_lite_dense_if32of32wf32+0x234>
 80159d4:	edd3 6a01 	vldr	s13, [r3, #4]
 80159d8:	2901      	cmp	r1, #1
 80159da:	edd2 7a01 	vldr	s15, [r2, #4]
 80159de:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80159e2:	d005      	beq.n	80159f0 <forward_lite_dense_if32of32wf32+0x234>
 80159e4:	edd2 6a02 	vldr	s13, [r2, #8]
 80159e8:	edd3 7a02 	vldr	s15, [r3, #8]
 80159ec:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80159f0:	eca6 7a01 	vstmia	r6!, {s14}
 80159f4:	45b6      	cmp	lr, r6
 80159f6:	444d      	add	r5, r9
 80159f8:	f63f af0a 	bhi.w	8015810 <forward_lite_dense_if32of32wf32+0x54>
 80159fc:	697a      	ldr	r2, [r7, #20]
 80159fe:	68fb      	ldr	r3, [r7, #12]
 8015a00:	b9b3      	cbnz	r3, 8015a30 <forward_lite_dense_if32of32wf32+0x274>
 8015a02:	9b00      	ldr	r3, [sp, #0]
 8015a04:	0096      	lsls	r6, r2, #2
 8015a06:	9901      	ldr	r1, [sp, #4]
 8015a08:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8015a0c:	693c      	ldr	r4, [r7, #16]
 8015a0e:	4299      	cmp	r1, r3
 8015a10:	eb08 0884 	add.w	r8, r8, r4, lsl #2
 8015a14:	9300      	str	r3, [sp, #0]
 8015a16:	f63f aee7 	bhi.w	80157e8 <forward_lite_dense_if32of32wf32+0x2c>
 8015a1a:	b003      	add	sp, #12
 8015a1c:	ecbd 8b0c 	vpop	{d8-d13}
 8015a20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a24:	4621      	mov	r1, r4
 8015a26:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8015a74 <forward_lite_dense_if32of32wf32+0x2b8>
 8015a2a:	462a      	mov	r2, r5
 8015a2c:	4643      	mov	r3, r8
 8015a2e:	e766      	b.n	80158fe <forward_lite_dense_if32of32wf32+0x142>
 8015a30:	2a00      	cmp	r2, #0
 8015a32:	d0e6      	beq.n	8015a02 <forward_lite_dense_if32of32wf32+0x246>
 8015a34:	9a00      	ldr	r2, [sp, #0]
 8015a36:	ed93 7a00 	vldr	s14, [r3]
 8015a3a:	edd2 7a00 	vldr	s15, [r2]
 8015a3e:	4613      	mov	r3, r2
 8015a40:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015a44:	edc2 7a00 	vstr	s15, [r2]
 8015a48:	697a      	ldr	r2, [r7, #20]
 8015a4a:	2a01      	cmp	r2, #1
 8015a4c:	d9d9      	bls.n	8015a02 <forward_lite_dense_if32of32wf32+0x246>
 8015a4e:	1d19      	adds	r1, r3, #4
 8015a50:	2301      	movs	r3, #1
 8015a52:	68fa      	ldr	r2, [r7, #12]
 8015a54:	ed91 7a00 	vldr	s14, [r1]
 8015a58:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8015a5c:	3301      	adds	r3, #1
 8015a5e:	edd2 7a00 	vldr	s15, [r2]
 8015a62:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015a66:	ece1 7a01 	vstmia	r1!, {s15}
 8015a6a:	697a      	ldr	r2, [r7, #20]
 8015a6c:	429a      	cmp	r2, r3
 8015a6e:	d8f0      	bhi.n	8015a52 <forward_lite_dense_if32of32wf32+0x296>
 8015a70:	e7c7      	b.n	8015a02 <forward_lite_dense_if32of32wf32+0x246>
 8015a72:	bf00      	nop
 8015a74:	00000000 	.word	0x00000000

08015a78 <forward_lite_dense_if32of32wf32_lut4>:
 8015a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a7c:	b08d      	sub	sp, #52	@ 0x34
 8015a7e:	4605      	mov	r5, r0
 8015a80:	460c      	mov	r4, r1
 8015a82:	9005      	str	r0, [sp, #20]
 8015a84:	4618      	mov	r0, r3
 8015a86:	920a      	str	r2, [sp, #40]	@ 0x28
 8015a88:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 8015a8a:	e9dd 2319 	ldrd	r2, r3, [sp, #100]	@ 0x64
 8015a8e:	fb02 f303 	mul.w	r3, r2, r3
 8015a92:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8015a96:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 8015a98:	9308      	str	r3, [sp, #32]
 8015a9a:	b126      	cbz	r6, 8015aa6 <forward_lite_dense_if32of32wf32_lut4+0x2e>
 8015a9c:	2240      	movs	r2, #64	@ 0x40
 8015a9e:	4631      	mov	r1, r6
 8015aa0:	f000 fbe0 	bl	8016264 <st_int8_copy>
 8015aa4:	4630      	mov	r0, r6
 8015aa6:	9b05      	ldr	r3, [sp, #20]
 8015aa8:	9a08      	ldr	r2, [sp, #32]
 8015aaa:	4293      	cmp	r3, r2
 8015aac:	f080 80f7 	bcs.w	8015c9e <forward_lite_dense_if32of32wf32_lut4+0x226>
 8015ab0:	08eb      	lsrs	r3, r5, #3
 8015ab2:	f005 0101 	and.w	r1, r5, #1
 8015ab6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8015ab8:	f025 0801 	bic.w	r8, r5, #1
 8015abc:	eb04 1a43 	add.w	sl, r4, r3, lsl #5
 8015ac0:	9301      	str	r3, [sp, #4]
 8015ac2:	009b      	lsls	r3, r3, #2
 8015ac4:	9102      	str	r1, [sp, #8]
 8015ac6:	0092      	lsls	r2, r2, #2
 8015ac8:	f104 0b20 	add.w	fp, r4, #32
 8015acc:	00a9      	lsls	r1, r5, #2
 8015ace:	9304      	str	r3, [sp, #16]
 8015ad0:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 8015ad4:	9b05      	ldr	r3, [sp, #20]
 8015ad6:	9207      	str	r2, [sp, #28]
 8015ad8:	9109      	str	r1, [sp, #36]	@ 0x24
 8015ada:	920b      	str	r2, [sp, #44]	@ 0x2c
 8015adc:	9a07      	ldr	r2, [sp, #28]
 8015ade:	eb03 0902 	add.w	r9, r3, r2
 8015ae2:	f1ab 0220 	sub.w	r2, fp, #32
 8015ae6:	4599      	cmp	r9, r3
 8015ae8:	9206      	str	r2, [sp, #24]
 8015aea:	f240 80db 	bls.w	8015ca4 <forward_lite_dense_if32of32wf32_lut4+0x22c>
 8015aee:	469e      	mov	lr, r3
 8015af0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8015af2:	f108 33ff 	add.w	r3, r8, #4294967295
 8015af6:	9303      	str	r3, [sp, #12]
 8015af8:	9b01      	ldr	r3, [sp, #4]
 8015afa:	2b00      	cmp	r3, #0
 8015afc:	f000 80b4 	beq.w	8015c68 <forward_lite_dense_if32of32wf32_lut4+0x1f0>
 8015b00:	9b04      	ldr	r3, [sp, #16]
 8015b02:	ed9f 7a71 	vldr	s14, [pc, #452]	@ 8015cc8 <forward_lite_dense_if32of32wf32_lut4+0x250>
 8015b06:	18d4      	adds	r4, r2, r3
 8015b08:	465b      	mov	r3, fp
 8015b0a:	7816      	ldrb	r6, [r2, #0]
 8015b0c:	3204      	adds	r2, #4
 8015b0e:	ed53 2a07 	vldr	s5, [r3, #-28]	@ 0xffffffe4
 8015b12:	3320      	adds	r3, #32
 8015b14:	f006 070f 	and.w	r7, r6, #15
 8015b18:	0936      	lsrs	r6, r6, #4
 8015b1a:	f812 5c03 	ldrb.w	r5, [r2, #-3]
 8015b1e:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8015b22:	ed13 4a10 	vldr	s8, [r3, #-64]	@ 0xffffffc0
 8015b26:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8015b2a:	ed53 3a0e 	vldr	s7, [r3, #-56]	@ 0xffffffc8
 8015b2e:	edd7 7a00 	vldr	s15, [r7]
 8015b32:	ed96 3a00 	vldr	s6, [r6]
 8015b36:	092e      	lsrs	r6, r5, #4
 8015b38:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8015b3c:	f005 050f 	and.w	r5, r5, #15
 8015b40:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8015b44:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 8015b48:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8015b4c:	ed13 5a0d 	vldr	s10, [r3, #-52]	@ 0xffffffcc
 8015b50:	eee3 7a04 	vfma.f32	s15, s6, s8
 8015b54:	ed96 3a00 	vldr	s6, [r6]
 8015b58:	ed95 4a00 	vldr	s8, [r5]
 8015b5c:	090d      	lsrs	r5, r1, #4
 8015b5e:	ed53 4a0c 	vldr	s9, [r3, #-48]	@ 0xffffffd0
 8015b62:	f001 010f 	and.w	r1, r1, #15
 8015b66:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8015b6a:	ed13 6a0b 	vldr	s12, [r3, #-44]	@ 0xffffffd4
 8015b6e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8015b72:	ed53 5a0a 	vldr	s11, [r3, #-40]	@ 0xffffffd8
 8015b76:	ed53 6a09 	vldr	s13, [r3, #-36]	@ 0xffffffdc
 8015b7a:	eee3 7a23 	vfma.f32	s15, s6, s7
 8015b7e:	eee4 7a05 	vfma.f32	s15, s8, s10
 8015b82:	ed95 4a00 	vldr	s8, [r5]
 8015b86:	ed91 5a00 	vldr	s10, [r1]
 8015b8a:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8015b8e:	42a2      	cmp	r2, r4
 8015b90:	ea4f 1511 	mov.w	r5, r1, lsr #4
 8015b94:	f001 010f 	and.w	r1, r1, #15
 8015b98:	eee4 7a24 	vfma.f32	s15, s8, s9
 8015b9c:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8015ba0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8015ba4:	eee5 7a06 	vfma.f32	s15, s10, s12
 8015ba8:	ed95 5a00 	vldr	s10, [r5]
 8015bac:	ed91 6a00 	vldr	s12, [r1]
 8015bb0:	eee5 7a25 	vfma.f32	s15, s10, s11
 8015bb4:	eee6 7a26 	vfma.f32	s15, s12, s13
 8015bb8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015bbc:	d1a5      	bne.n	8015b0a <forward_lite_dense_if32of32wf32_lut4+0x92>
 8015bbe:	4656      	mov	r6, sl
 8015bc0:	4546      	cmp	r6, r8
 8015bc2:	d257      	bcs.n	8015c74 <forward_lite_dense_if32of32wf32_lut4+0x1fc>
 8015bc4:	9b03      	ldr	r3, [sp, #12]
 8015bc6:	f106 0208 	add.w	r2, r6, #8
 8015bca:	1e61      	subs	r1, r4, #1
 8015bcc:	1b9d      	subs	r5, r3, r6
 8015bce:	08ef      	lsrs	r7, r5, #3
 8015bd0:	eb04 05d5 	add.w	r5, r4, r5, lsr #3
 8015bd4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8015bd8:	3208      	adds	r2, #8
 8015bda:	ed52 5a03 	vldr	s11, [r2, #-12]
 8015bde:	f003 0c0f 	and.w	ip, r3, #15
 8015be2:	091b      	lsrs	r3, r3, #4
 8015be4:	ed52 6a04 	vldr	s13, [r2, #-16]
 8015be8:	42a9      	cmp	r1, r5
 8015bea:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8015bee:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8015bf2:	eddc 7a00 	vldr	s15, [ip]
 8015bf6:	ed93 6a00 	vldr	s12, [r3]
 8015bfa:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8015bfe:	eee6 7a26 	vfma.f32	s15, s12, s13
 8015c02:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015c06:	d1e5      	bne.n	8015bd4 <forward_lite_dense_if32of32wf32_lut4+0x15c>
 8015c08:	3701      	adds	r7, #1
 8015c0a:	19e2      	adds	r2, r4, r7
 8015c0c:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
 8015c10:	9b02      	ldr	r3, [sp, #8]
 8015c12:	b30b      	cbz	r3, 8015c58 <forward_lite_dense_if32of32wf32_lut4+0x1e0>
 8015c14:	f812 3b01 	ldrb.w	r3, [r2], #1
 8015c18:	edd6 7a00 	vldr	s15, [r6]
 8015c1c:	091b      	lsrs	r3, r3, #4
 8015c1e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8015c22:	edd3 6a00 	vldr	s13, [r3]
 8015c26:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8015c2a:	ecae 7a01 	vstmia	lr!, {s14}
 8015c2e:	45f1      	cmp	r9, lr
 8015c30:	f63f af62 	bhi.w	8015af8 <forward_lite_dense_if32of32wf32_lut4+0x80>
 8015c34:	9b05      	ldr	r3, [sp, #20]
 8015c36:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8015c38:	1899      	adds	r1, r3, r2
 8015c3a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8015c3c:	b9e3      	cbnz	r3, 8015c78 <forward_lite_dense_if32of32wf32_lut4+0x200>
 8015c3e:	9b08      	ldr	r3, [sp, #32]
 8015c40:	428b      	cmp	r3, r1
 8015c42:	d92c      	bls.n	8015c9e <forward_lite_dense_if32of32wf32_lut4+0x226>
 8015c44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015c46:	4498      	add	r8, r3
 8015c48:	449a      	add	sl, r3
 8015c4a:	449b      	add	fp, r3
 8015c4c:	9b05      	ldr	r3, [sp, #20]
 8015c4e:	4599      	cmp	r9, r3
 8015c50:	d92a      	bls.n	8015ca8 <forward_lite_dense_if32of32wf32_lut4+0x230>
 8015c52:	460b      	mov	r3, r1
 8015c54:	9105      	str	r1, [sp, #20]
 8015c56:	e741      	b.n	8015adc <forward_lite_dense_if32of32wf32_lut4+0x64>
 8015c58:	ecae 7a01 	vstmia	lr!, {s14}
 8015c5c:	45f1      	cmp	r9, lr
 8015c5e:	d9e9      	bls.n	8015c34 <forward_lite_dense_if32of32wf32_lut4+0x1bc>
 8015c60:	9b01      	ldr	r3, [sp, #4]
 8015c62:	2b00      	cmp	r3, #0
 8015c64:	f47f af4c 	bne.w	8015b00 <forward_lite_dense_if32of32wf32_lut4+0x88>
 8015c68:	9e06      	ldr	r6, [sp, #24]
 8015c6a:	4614      	mov	r4, r2
 8015c6c:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8015cc8 <forward_lite_dense_if32of32wf32_lut4+0x250>
 8015c70:	4546      	cmp	r6, r8
 8015c72:	d3a7      	bcc.n	8015bc4 <forward_lite_dense_if32of32wf32_lut4+0x14c>
 8015c74:	4622      	mov	r2, r4
 8015c76:	e7cb      	b.n	8015c10 <forward_lite_dense_if32of32wf32_lut4+0x198>
 8015c78:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8015c7a:	2b00      	cmp	r3, #0
 8015c7c:	d0df      	beq.n	8015c3e <forward_lite_dense_if32of32wf32_lut4+0x1c6>
 8015c7e:	9b07      	ldr	r3, [sp, #28]
 8015c80:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8015c82:	1acb      	subs	r3, r1, r3
 8015c84:	edd3 7a00 	vldr	s15, [r3]
 8015c88:	ecb2 7a01 	vldmia	r2!, {s14}
 8015c8c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015c90:	ece3 7a01 	vstmia	r3!, {s15}
 8015c94:	428b      	cmp	r3, r1
 8015c96:	d1f5      	bne.n	8015c84 <forward_lite_dense_if32of32wf32_lut4+0x20c>
 8015c98:	9b08      	ldr	r3, [sp, #32]
 8015c9a:	428b      	cmp	r3, r1
 8015c9c:	d8d2      	bhi.n	8015c44 <forward_lite_dense_if32of32wf32_lut4+0x1cc>
 8015c9e:	b00d      	add	sp, #52	@ 0x34
 8015ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ca4:	4619      	mov	r1, r3
 8015ca6:	e7c8      	b.n	8015c3a <forward_lite_dense_if32of32wf32_lut4+0x1c2>
 8015ca8:	9b07      	ldr	r3, [sp, #28]
 8015caa:	1acb      	subs	r3, r1, r3
 8015cac:	461a      	mov	r2, r3
 8015cae:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8015cb0:	ed92 7a00 	vldr	s14, [r2]
 8015cb4:	ecf0 7a01 	vldmia	r0!, {s15}
 8015cb8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015cbc:	ece2 7a01 	vstmia	r2!, {s15}
 8015cc0:	428a      	cmp	r2, r1
 8015cc2:	d1f5      	bne.n	8015cb0 <forward_lite_dense_if32of32wf32_lut4+0x238>
 8015cc4:	e7f2      	b.n	8015cac <forward_lite_dense_if32of32wf32_lut4+0x234>
 8015cc6:	bf00      	nop
 8015cc8:	00000000 	.word	0x00000000

08015ccc <forward_lite_dense_if32of32wf32_lut8>:
 8015ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015cd0:	b091      	sub	sp, #68	@ 0x44
 8015cd2:	4699      	mov	r9, r3
 8015cd4:	468b      	mov	fp, r1
 8015cd6:	920e      	str	r2, [sp, #56]	@ 0x38
 8015cd8:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 8015cda:	f8dd 8070 	ldr.w	r8, [sp, #112]	@ 0x70
 8015cde:	9003      	str	r0, [sp, #12]
 8015ce0:	e9dd 231d 	ldrd	r2, r3, [sp, #116]	@ 0x74
 8015ce4:	fb02 f303 	mul.w	r3, r2, r3
 8015ce8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8015cec:	930c      	str	r3, [sp, #48]	@ 0x30
 8015cee:	b134      	cbz	r4, 8015cfe <forward_lite_dense_if32of32wf32_lut8+0x32>
 8015cf0:	4648      	mov	r0, r9
 8015cf2:	46a1      	mov	r9, r4
 8015cf4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8015cf8:	4621      	mov	r1, r4
 8015cfa:	f000 fab3 	bl	8016264 <st_int8_copy>
 8015cfe:	9b03      	ldr	r3, [sp, #12]
 8015d00:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8015d02:	4293      	cmp	r3, r2
 8015d04:	f080 8084 	bcs.w	8015e10 <forward_lite_dense_if32of32wf32_lut8+0x144>
 8015d08:	4bb7      	ldr	r3, [pc, #732]	@ (8015fe8 <forward_lite_dense_if32of32wf32_lut8+0x31c>)
 8015d0a:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8015d0c:	4443      	add	r3, r8
 8015d0e:	9d03      	ldr	r5, [sp, #12]
 8015d10:	0092      	lsls	r2, r2, #2
 8015d12:	eddf 3ab6 	vldr	s7, [pc, #728]	@ 8015fec <forward_lite_dense_if32of32wf32_lut8+0x320>
 8015d16:	009b      	lsls	r3, r3, #2
 8015d18:	920b      	str	r2, [sp, #44]	@ 0x2c
 8015d1a:	f103 0120 	add.w	r1, r3, #32
 8015d1e:	930d      	str	r3, [sp, #52]	@ 0x34
 8015d20:	445b      	add	r3, fp
 8015d22:	920f      	str	r2, [sp, #60]	@ 0x3c
 8015d24:	9105      	str	r1, [sp, #20]
 8015d26:	9300      	str	r3, [sp, #0]
 8015d28:	eb0b 0301 	add.w	r3, fp, r1
 8015d2c:	469a      	mov	sl, r3
 8015d2e:	469e      	mov	lr, r3
 8015d30:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015d32:	eb05 0c03 	add.w	ip, r5, r3
 8015d36:	45ac      	cmp	ip, r5
 8015d38:	d952      	bls.n	8015de0 <forward_lite_dense_if32of32wf32_lut8+0x114>
 8015d3a:	9800      	ldr	r0, [sp, #0]
 8015d3c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015d3e:	f100 011f 	add.w	r1, r0, #31
 8015d42:	eba0 020b 	sub.w	r2, r0, fp
 8015d46:	445b      	add	r3, fp
 8015d48:	9101      	str	r1, [sp, #4]
 8015d4a:	eba1 010b 	sub.w	r1, r1, fp
 8015d4e:	0952      	lsrs	r2, r2, #5
 8015d50:	9306      	str	r3, [sp, #24]
 8015d52:	0889      	lsrs	r1, r1, #2
 8015d54:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015d56:	3101      	adds	r1, #1
 8015d58:	9102      	str	r1, [sp, #8]
 8015d5a:	1c51      	adds	r1, r2, #1
 8015d5c:	00d2      	lsls	r2, r2, #3
 8015d5e:	3210      	adds	r2, #16
 8015d60:	920a      	str	r2, [sp, #40]	@ 0x28
 8015d62:	00ca      	lsls	r2, r1, #3
 8015d64:	9208      	str	r2, [sp, #32]
 8015d66:	eb0b 1241 	add.w	r2, fp, r1, lsl #5
 8015d6a:	9209      	str	r2, [sp, #36]	@ 0x24
 8015d6c:	1f02      	subs	r2, r0, #4
 8015d6e:	9204      	str	r2, [sp, #16]
 8015d70:	f10b 0204 	add.w	r2, fp, #4
 8015d74:	9207      	str	r2, [sp, #28]
 8015d76:	f1b8 0f07 	cmp.w	r8, #7
 8015d7a:	d84c      	bhi.n	8015e16 <forward_lite_dense_if32of32wf32_lut8+0x14a>
 8015d7c:	45d3      	cmp	fp, sl
 8015d7e:	ed9f 7a9b 	vldr	s14, [pc, #620]	@ 8015fec <forward_lite_dense_if32of32wf32_lut8+0x320>
 8015d82:	d20f      	bcs.n	8015da4 <forward_lite_dense_if32of32wf32_lut8+0xd8>
 8015d84:	4659      	mov	r1, fp
 8015d86:	4618      	mov	r0, r3
 8015d88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015d8c:	ecf1 7a01 	vldmia	r1!, {s15}
 8015d90:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8015d94:	4551      	cmp	r1, sl
 8015d96:	edd2 6a00 	vldr	s13, [r2]
 8015d9a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8015d9e:	d3f3      	bcc.n	8015d88 <forward_lite_dense_if32of32wf32_lut8+0xbc>
 8015da0:	9a02      	ldr	r2, [sp, #8]
 8015da2:	4413      	add	r3, r2
 8015da4:	eca5 7a01 	vstmia	r5!, {s14}
 8015da8:	45ac      	cmp	ip, r5
 8015daa:	d8e4      	bhi.n	8015d76 <forward_lite_dense_if32of32wf32_lut8+0xaa>
 8015dac:	9b03      	ldr	r3, [sp, #12]
 8015dae:	46f3      	mov	fp, lr
 8015db0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8015db2:	1899      	adds	r1, r3, r2
 8015db4:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8015db6:	b9c3      	cbnz	r3, 8015dea <forward_lite_dense_if32of32wf32_lut8+0x11e>
 8015db8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015dba:	428b      	cmp	r3, r1
 8015dbc:	d928      	bls.n	8015e10 <forward_lite_dense_if32of32wf32_lut8+0x144>
 8015dbe:	9b00      	ldr	r3, [sp, #0]
 8015dc0:	9a05      	ldr	r2, [sp, #20]
 8015dc2:	4413      	add	r3, r2
 8015dc4:	4492      	add	sl, r2
 8015dc6:	9300      	str	r3, [sp, #0]
 8015dc8:	9b03      	ldr	r3, [sp, #12]
 8015dca:	459c      	cmp	ip, r3
 8015dcc:	f240 821e 	bls.w	801620c <forward_lite_dense_if32of32wf32_lut8+0x540>
 8015dd0:	460d      	mov	r5, r1
 8015dd2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015dd4:	4496      	add	lr, r2
 8015dd6:	9103      	str	r1, [sp, #12]
 8015dd8:	eb05 0c03 	add.w	ip, r5, r3
 8015ddc:	45ac      	cmp	ip, r5
 8015dde:	d8ac      	bhi.n	8015d3a <forward_lite_dense_if32of32wf32_lut8+0x6e>
 8015de0:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8015de2:	4629      	mov	r1, r5
 8015de4:	46f3      	mov	fp, lr
 8015de6:	2b00      	cmp	r3, #0
 8015de8:	d0e6      	beq.n	8015db8 <forward_lite_dense_if32of32wf32_lut8+0xec>
 8015dea:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8015dec:	2b00      	cmp	r3, #0
 8015dee:	d0e3      	beq.n	8015db8 <forward_lite_dense_if32of32wf32_lut8+0xec>
 8015df0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015df2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8015df4:	1acb      	subs	r3, r1, r3
 8015df6:	edd3 7a00 	vldr	s15, [r3]
 8015dfa:	ecb2 7a01 	vldmia	r2!, {s14}
 8015dfe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015e02:	ece3 7a01 	vstmia	r3!, {s15}
 8015e06:	428b      	cmp	r3, r1
 8015e08:	d1f5      	bne.n	8015df6 <forward_lite_dense_if32of32wf32_lut8+0x12a>
 8015e0a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015e0c:	428b      	cmp	r3, r1
 8015e0e:	d8d6      	bhi.n	8015dbe <forward_lite_dense_if32of32wf32_lut8+0xf2>
 8015e10:	b011      	add	sp, #68	@ 0x44
 8015e12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e16:	f003 0203 	and.w	r2, r3, #3
 8015e1a:	2a02      	cmp	r2, #2
 8015e1c:	f000 81ee 	beq.w	80161fc <forward_lite_dense_if32of32wf32_lut8+0x530>
 8015e20:	2a03      	cmp	r2, #3
 8015e22:	f000 80e5 	beq.w	8015ff0 <forward_lite_dense_if32of32wf32_lut8+0x324>
 8015e26:	2a01      	cmp	r2, #1
 8015e28:	f000 81d2 	beq.w	80161d0 <forward_lite_dense_if32of32wf32_lut8+0x504>
 8015e2c:	9a06      	ldr	r2, [sp, #24]
 8015e2e:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 8015fec <forward_lite_dense_if32of32wf32_lut8+0x320>
 8015e32:	4593      	cmp	fp, r2
 8015e34:	f200 81e8 	bhi.w	8016208 <forward_lite_dense_if32of32wf32_lut8+0x53c>
 8015e38:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8015e3a:	f103 0208 	add.w	r2, r3, #8
 8015e3e:	f10b 0120 	add.w	r1, fp, #32
 8015e42:	18c4      	adds	r4, r0, r3
 8015e44:	f812 0c07 	ldrb.w	r0, [r2, #-7]
 8015e48:	3208      	adds	r2, #8
 8015e4a:	ed51 2a07 	vldr	s5, [r1, #-28]	@ 0xffffffe4
 8015e4e:	3120      	adds	r1, #32
 8015e50:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8015e54:	ed11 3a10 	vldr	s6, [r1, #-64]	@ 0xffffffc0
 8015e58:	ed11 4a0e 	vldr	s8, [r1, #-56]	@ 0xffffffc8
 8015e5c:	edd0 7a00 	vldr	s15, [r0]
 8015e60:	f812 0c10 	ldrb.w	r0, [r2, #-16]
 8015e64:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8015e68:	ed51 4a0d 	vldr	s9, [r1, #-52]	@ 0xffffffcc
 8015e6c:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8015e70:	ed11 5a0c 	vldr	s10, [r1, #-48]	@ 0xffffffd0
 8015e74:	ed51 5a0b 	vldr	s11, [r1, #-44]	@ 0xffffffd4
 8015e78:	edd0 2a00 	vldr	s5, [r0]
 8015e7c:	f812 0c0e 	ldrb.w	r0, [r2, #-14]
 8015e80:	eee2 7a83 	vfma.f32	s15, s5, s6
 8015e84:	ed11 6a0a 	vldr	s12, [r1, #-40]	@ 0xffffffd8
 8015e88:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8015e8c:	ed51 6a09 	vldr	s13, [r1, #-36]	@ 0xffffffdc
 8015e90:	ed90 3a00 	vldr	s6, [r0]
 8015e94:	f812 0c0d 	ldrb.w	r0, [r2, #-13]
 8015e98:	eee3 7a04 	vfma.f32	s15, s6, s8
 8015e9c:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8015ea0:	ed90 4a00 	vldr	s8, [r0]
 8015ea4:	f812 0c0c 	ldrb.w	r0, [r2, #-12]
 8015ea8:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8015eac:	eee4 7a24 	vfma.f32	s15, s8, s9
 8015eb0:	edd0 4a00 	vldr	s9, [r0]
 8015eb4:	f812 0c0b 	ldrb.w	r0, [r2, #-11]
 8015eb8:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8015ebc:	eee4 7a85 	vfma.f32	s15, s9, s10
 8015ec0:	ed90 5a00 	vldr	s10, [r0]
 8015ec4:	f812 0c0a 	ldrb.w	r0, [r2, #-10]
 8015ec8:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8015ecc:	eee5 7a25 	vfma.f32	s15, s10, s11
 8015ed0:	edd0 5a00 	vldr	s11, [r0]
 8015ed4:	f812 0c09 	ldrb.w	r0, [r2, #-9]
 8015ed8:	42a2      	cmp	r2, r4
 8015eda:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8015ede:	eee5 7a86 	vfma.f32	s15, s11, s12
 8015ee2:	ed90 6a00 	vldr	s12, [r0]
 8015ee6:	eee6 7a26 	vfma.f32	s15, s12, s13
 8015eea:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015eee:	d1a9      	bne.n	8015e44 <forward_lite_dense_if32of32wf32_lut8+0x178>
 8015ef0:	9a08      	ldr	r2, [sp, #32]
 8015ef2:	4413      	add	r3, r2
 8015ef4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015ef6:	4572      	cmp	r2, lr
 8015ef8:	f4bf af54 	bcs.w	8015da4 <forward_lite_dense_if32of32wf32_lut8+0xd8>
 8015efc:	7819      	ldrb	r1, [r3, #0]
 8015efe:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8015f02:	edd1 7a00 	vldr	s15, [r1]
 8015f06:	4611      	mov	r1, r2
 8015f08:	ecf1 6a01 	vldmia	r1!, {s13}
 8015f0c:	458a      	cmp	sl, r1
 8015f0e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8015f12:	d963      	bls.n	8015fdc <forward_lite_dense_if32of32wf32_lut8+0x310>
 8015f14:	7859      	ldrb	r1, [r3, #1]
 8015f16:	edd2 6a01 	vldr	s13, [r2, #4]
 8015f1a:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8015f1e:	edd1 7a00 	vldr	s15, [r1]
 8015f22:	f102 0108 	add.w	r1, r2, #8
 8015f26:	458a      	cmp	sl, r1
 8015f28:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8015f2c:	d956      	bls.n	8015fdc <forward_lite_dense_if32of32wf32_lut8+0x310>
 8015f2e:	7899      	ldrb	r1, [r3, #2]
 8015f30:	edd2 6a02 	vldr	s13, [r2, #8]
 8015f34:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8015f38:	edd1 7a00 	vldr	s15, [r1]
 8015f3c:	f102 010c 	add.w	r1, r2, #12
 8015f40:	458a      	cmp	sl, r1
 8015f42:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8015f46:	d949      	bls.n	8015fdc <forward_lite_dense_if32of32wf32_lut8+0x310>
 8015f48:	78d9      	ldrb	r1, [r3, #3]
 8015f4a:	edd2 6a03 	vldr	s13, [r2, #12]
 8015f4e:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8015f52:	edd1 7a00 	vldr	s15, [r1]
 8015f56:	f102 0110 	add.w	r1, r2, #16
 8015f5a:	458a      	cmp	sl, r1
 8015f5c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8015f60:	d93c      	bls.n	8015fdc <forward_lite_dense_if32of32wf32_lut8+0x310>
 8015f62:	7919      	ldrb	r1, [r3, #4]
 8015f64:	edd2 6a04 	vldr	s13, [r2, #16]
 8015f68:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8015f6c:	edd1 7a00 	vldr	s15, [r1]
 8015f70:	f102 0114 	add.w	r1, r2, #20
 8015f74:	458a      	cmp	sl, r1
 8015f76:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8015f7a:	d92f      	bls.n	8015fdc <forward_lite_dense_if32of32wf32_lut8+0x310>
 8015f7c:	7959      	ldrb	r1, [r3, #5]
 8015f7e:	edd2 6a05 	vldr	s13, [r2, #20]
 8015f82:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8015f86:	edd1 7a00 	vldr	s15, [r1]
 8015f8a:	f102 0118 	add.w	r1, r2, #24
 8015f8e:	458a      	cmp	sl, r1
 8015f90:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8015f94:	d922      	bls.n	8015fdc <forward_lite_dense_if32of32wf32_lut8+0x310>
 8015f96:	7999      	ldrb	r1, [r3, #6]
 8015f98:	edd2 6a06 	vldr	s13, [r2, #24]
 8015f9c:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8015fa0:	edd1 7a00 	vldr	s15, [r1]
 8015fa4:	f102 011c 	add.w	r1, r2, #28
 8015fa8:	458a      	cmp	sl, r1
 8015faa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8015fae:	d915      	bls.n	8015fdc <forward_lite_dense_if32of32wf32_lut8+0x310>
 8015fb0:	79d9      	ldrb	r1, [r3, #7]
 8015fb2:	edd2 6a07 	vldr	s13, [r2, #28]
 8015fb6:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8015fba:	edd1 7a00 	vldr	s15, [r1]
 8015fbe:	f102 0120 	add.w	r1, r2, #32
 8015fc2:	458a      	cmp	sl, r1
 8015fc4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8015fc8:	d908      	bls.n	8015fdc <forward_lite_dense_if32of32wf32_lut8+0x310>
 8015fca:	7a19      	ldrb	r1, [r3, #8]
 8015fcc:	edd2 7a08 	vldr	s15, [r2, #32]
 8015fd0:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8015fd4:	edd1 6a00 	vldr	s13, [r1]
 8015fd8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8015fdc:	9901      	ldr	r1, [sp, #4]
 8015fde:	1a8a      	subs	r2, r1, r2
 8015fe0:	eb03 0292 	add.w	r2, r3, r2, lsr #2
 8015fe4:	1c53      	adds	r3, r2, #1
 8015fe6:	e6dd      	b.n	8015da4 <forward_lite_dense_if32of32wf32_lut8+0xd8>
 8015fe8:	3ffffff8 	.word	0x3ffffff8
 8015fec:	00000000 	.word	0x00000000
 8015ff0:	eeb0 7a63 	vmov.f32	s14, s7
 8015ff4:	465a      	mov	r2, fp
 8015ff6:	461f      	mov	r7, r3
 8015ff8:	4610      	mov	r0, r2
 8015ffa:	f817 1b01 	ldrb.w	r1, [r7], #1
 8015ffe:	ecf0 7a01 	vldmia	r0!, {s15}
 8016002:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8016006:	edd1 6a00 	vldr	s13, [r1]
 801600a:	9900      	ldr	r1, [sp, #0]
 801600c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8016010:	4288      	cmp	r0, r1
 8016012:	f200 80f7 	bhi.w	8016204 <forward_lite_dense_if32of32wf32_lut8+0x538>
 8016016:	9904      	ldr	r1, [sp, #16]
 8016018:	f103 0411 	add.w	r4, r3, #17
 801601c:	3309      	adds	r3, #9
 801601e:	1a8e      	subs	r6, r1, r2
 8016020:	3224      	adds	r2, #36	@ 0x24
 8016022:	0976      	lsrs	r6, r6, #5
 8016024:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8016028:	f813 1c07 	ldrb.w	r1, [r3, #-7]
 801602c:	3308      	adds	r3, #8
 801602e:	ed52 2a07 	vldr	s5, [r2, #-28]	@ 0xffffffe4
 8016032:	3220      	adds	r2, #32
 8016034:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8016038:	ed12 3a10 	vldr	s6, [r2, #-64]	@ 0xffffffc0
 801603c:	ed12 4a0e 	vldr	s8, [r2, #-56]	@ 0xffffffc8
 8016040:	edd1 7a00 	vldr	s15, [r1]
 8016044:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 8016048:	ee67 7aa2 	vmul.f32	s15, s15, s5
 801604c:	ed52 4a0d 	vldr	s9, [r2, #-52]	@ 0xffffffcc
 8016050:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8016054:	ed12 5a0c 	vldr	s10, [r2, #-48]	@ 0xffffffd0
 8016058:	ed52 5a0b 	vldr	s11, [r2, #-44]	@ 0xffffffd4
 801605c:	edd1 2a00 	vldr	s5, [r1]
 8016060:	f813 1c0e 	ldrb.w	r1, [r3, #-14]
 8016064:	eee2 7a83 	vfma.f32	s15, s5, s6
 8016068:	ed12 6a0a 	vldr	s12, [r2, #-40]	@ 0xffffffd8
 801606c:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8016070:	ed52 6a09 	vldr	s13, [r2, #-36]	@ 0xffffffdc
 8016074:	ed91 3a00 	vldr	s6, [r1]
 8016078:	f813 1c0d 	ldrb.w	r1, [r3, #-13]
 801607c:	eee3 7a04 	vfma.f32	s15, s6, s8
 8016080:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8016084:	ed91 4a00 	vldr	s8, [r1]
 8016088:	f813 1c0c 	ldrb.w	r1, [r3, #-12]
 801608c:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8016090:	eee4 7a24 	vfma.f32	s15, s8, s9
 8016094:	edd1 4a00 	vldr	s9, [r1]
 8016098:	f813 1c0b 	ldrb.w	r1, [r3, #-11]
 801609c:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 80160a0:	eee4 7a85 	vfma.f32	s15, s9, s10
 80160a4:	ed91 5a00 	vldr	s10, [r1]
 80160a8:	f813 1c0a 	ldrb.w	r1, [r3, #-10]
 80160ac:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 80160b0:	eee5 7a25 	vfma.f32	s15, s10, s11
 80160b4:	edd1 5a00 	vldr	s11, [r1]
 80160b8:	f813 1c09 	ldrb.w	r1, [r3, #-9]
 80160bc:	42a3      	cmp	r3, r4
 80160be:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 80160c2:	eee5 7a86 	vfma.f32	s15, s11, s12
 80160c6:	ed91 6a00 	vldr	s12, [r1]
 80160ca:	eee6 7a26 	vfma.f32	s15, s12, s13
 80160ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80160d2:	d1a9      	bne.n	8016028 <forward_lite_dense_if32of32wf32_lut8+0x35c>
 80160d4:	3601      	adds	r6, #1
 80160d6:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
 80160da:	eb00 1046 	add.w	r0, r0, r6, lsl #5
 80160de:	4550      	cmp	r0, sl
 80160e0:	f4bf ae60 	bcs.w	8015da4 <forward_lite_dense_if32of32wf32_lut8+0xd8>
 80160e4:	781a      	ldrb	r2, [r3, #0]
 80160e6:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 80160ea:	edd2 7a00 	vldr	s15, [r2]
 80160ee:	4602      	mov	r2, r0
 80160f0:	ecf2 6a01 	vldmia	r2!, {s13}
 80160f4:	4592      	cmp	sl, r2
 80160f6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80160fa:	d963      	bls.n	80161c4 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 80160fc:	785a      	ldrb	r2, [r3, #1]
 80160fe:	edd0 6a01 	vldr	s13, [r0, #4]
 8016102:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8016106:	edd2 7a00 	vldr	s15, [r2]
 801610a:	f100 0208 	add.w	r2, r0, #8
 801610e:	4592      	cmp	sl, r2
 8016110:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8016114:	d956      	bls.n	80161c4 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 8016116:	789a      	ldrb	r2, [r3, #2]
 8016118:	edd0 6a02 	vldr	s13, [r0, #8]
 801611c:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8016120:	edd2 7a00 	vldr	s15, [r2]
 8016124:	f100 020c 	add.w	r2, r0, #12
 8016128:	4592      	cmp	sl, r2
 801612a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801612e:	d949      	bls.n	80161c4 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 8016130:	78da      	ldrb	r2, [r3, #3]
 8016132:	edd0 6a03 	vldr	s13, [r0, #12]
 8016136:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 801613a:	edd2 7a00 	vldr	s15, [r2]
 801613e:	f100 0210 	add.w	r2, r0, #16
 8016142:	4592      	cmp	sl, r2
 8016144:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8016148:	d93c      	bls.n	80161c4 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 801614a:	791a      	ldrb	r2, [r3, #4]
 801614c:	edd0 6a04 	vldr	s13, [r0, #16]
 8016150:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8016154:	edd2 7a00 	vldr	s15, [r2]
 8016158:	f100 0214 	add.w	r2, r0, #20
 801615c:	4592      	cmp	sl, r2
 801615e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8016162:	d92f      	bls.n	80161c4 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 8016164:	795a      	ldrb	r2, [r3, #5]
 8016166:	edd0 6a05 	vldr	s13, [r0, #20]
 801616a:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 801616e:	edd2 7a00 	vldr	s15, [r2]
 8016172:	f100 0218 	add.w	r2, r0, #24
 8016176:	4596      	cmp	lr, r2
 8016178:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801617c:	d922      	bls.n	80161c4 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 801617e:	799a      	ldrb	r2, [r3, #6]
 8016180:	edd0 6a06 	vldr	s13, [r0, #24]
 8016184:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8016188:	edd2 7a00 	vldr	s15, [r2]
 801618c:	f100 021c 	add.w	r2, r0, #28
 8016190:	4596      	cmp	lr, r2
 8016192:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8016196:	d915      	bls.n	80161c4 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 8016198:	79da      	ldrb	r2, [r3, #7]
 801619a:	edd0 6a07 	vldr	s13, [r0, #28]
 801619e:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 80161a2:	edd2 7a00 	vldr	s15, [r2]
 80161a6:	f100 0220 	add.w	r2, r0, #32
 80161aa:	4596      	cmp	lr, r2
 80161ac:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80161b0:	d908      	bls.n	80161c4 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 80161b2:	7a1a      	ldrb	r2, [r3, #8]
 80161b4:	edd0 7a08 	vldr	s15, [r0, #32]
 80161b8:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 80161bc:	edd2 6a00 	vldr	s13, [r2]
 80161c0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80161c4:	9a01      	ldr	r2, [sp, #4]
 80161c6:	1a10      	subs	r0, r2, r0
 80161c8:	eb03 0090 	add.w	r0, r3, r0, lsr #2
 80161cc:	1c43      	adds	r3, r0, #1
 80161ce:	e5e9      	b.n	8015da4 <forward_lite_dense_if32of32wf32_lut8+0xd8>
 80161d0:	f813 1b01 	ldrb.w	r1, [r3], #1
 80161d4:	eddb 7a00 	vldr	s15, [fp]
 80161d8:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 80161dc:	9a07      	ldr	r2, [sp, #28]
 80161de:	ed91 7a00 	vldr	s14, [r1]
 80161e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80161e6:	f813 1b01 	ldrb.w	r1, [r3], #1
 80161ea:	ecf2 7a01 	vldmia	r2!, {s15}
 80161ee:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 80161f2:	edd1 6a00 	vldr	s13, [r1]
 80161f6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80161fa:	e6fc      	b.n	8015ff6 <forward_lite_dense_if32of32wf32_lut8+0x32a>
 80161fc:	eeb0 7a63 	vmov.f32	s14, s7
 8016200:	465a      	mov	r2, fp
 8016202:	e7f0      	b.n	80161e6 <forward_lite_dense_if32of32wf32_lut8+0x51a>
 8016204:	463b      	mov	r3, r7
 8016206:	e76a      	b.n	80160de <forward_lite_dense_if32of32wf32_lut8+0x412>
 8016208:	465a      	mov	r2, fp
 801620a:	e674      	b.n	8015ef6 <forward_lite_dense_if32of32wf32_lut8+0x22a>
 801620c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801620e:	1acb      	subs	r3, r1, r3
 8016210:	461a      	mov	r2, r3
 8016212:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8016214:	ed92 7a00 	vldr	s14, [r2]
 8016218:	ecf0 7a01 	vldmia	r0!, {s15}
 801621c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016220:	ece2 7a01 	vstmia	r2!, {s15}
 8016224:	4291      	cmp	r1, r2
 8016226:	d1f5      	bne.n	8016214 <forward_lite_dense_if32of32wf32_lut8+0x548>
 8016228:	e7f2      	b.n	8016210 <forward_lite_dense_if32of32wf32_lut8+0x544>
 801622a:	bf00      	nop

0801622c <forward_lite_nl_relu_if32of32>:
 801622c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8016230:	4413      	add	r3, r2
 8016232:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 8016236:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 801623a:	4291      	cmp	r1, r2
 801623c:	d80f      	bhi.n	801625e <forward_lite_nl_relu_if32of32+0x32>
 801623e:	f10c 0104 	add.w	r1, ip, #4
 8016242:	1d13      	adds	r3, r2, #4
 8016244:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8016260 <forward_lite_nl_relu_if32of32+0x34>
 8016248:	eba2 020c 	sub.w	r2, r2, ip
 801624c:	4408      	add	r0, r1
 801624e:	ed73 7a01 	vldmdb	r3!, {s15}
 8016252:	4293      	cmp	r3, r2
 8016254:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8016258:	ed60 7a01 	vstmdb	r0!, {s15}
 801625c:	d1f7      	bne.n	801624e <forward_lite_nl_relu_if32of32+0x22>
 801625e:	4770      	bx	lr
 8016260:	00000000 	.word	0x00000000

08016264 <st_int8_copy>:
 8016264:	4288      	cmp	r0, r1
 8016266:	d023      	beq.n	80162b0 <st_int8_copy+0x4c>
 8016268:	b312      	cbz	r2, 80162b0 <st_int8_copy+0x4c>
 801626a:	4288      	cmp	r0, r1
 801626c:	eb00 0302 	add.w	r3, r0, r2
 8016270:	d20b      	bcs.n	801628a <st_int8_copy+0x26>
 8016272:	4299      	cmp	r1, r3
 8016274:	d209      	bcs.n	801628a <st_int8_copy+0x26>
 8016276:	4298      	cmp	r0, r3
 8016278:	440a      	add	r2, r1
 801627a:	d219      	bcs.n	80162b0 <st_int8_copy+0x4c>
 801627c:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 8016280:	4298      	cmp	r0, r3
 8016282:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8016286:	d1f9      	bne.n	801627c <st_int8_copy+0x18>
 8016288:	4770      	bx	lr
 801628a:	2a03      	cmp	r2, #3
 801628c:	d811      	bhi.n	80162b2 <st_int8_copy+0x4e>
 801628e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8016292:	f801 3b01 	strb.w	r3, [r1], #1
 8016296:	2a01      	cmp	r2, #1
 8016298:	d00a      	beq.n	80162b0 <st_int8_copy+0x4c>
 801629a:	f810 3b01 	ldrb.w	r3, [r0], #1
 801629e:	f801 3b01 	strb.w	r3, [r1], #1
 80162a2:	2a02      	cmp	r2, #2
 80162a4:	d004      	beq.n	80162b0 <st_int8_copy+0x4c>
 80162a6:	f810 3b01 	ldrb.w	r3, [r0], #1
 80162aa:	f801 3b01 	strb.w	r3, [r1], #1
 80162ae:	4770      	bx	lr
 80162b0:	4770      	bx	lr
 80162b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80162b6:	f001 0403 	and.w	r4, r1, #3
 80162ba:	f000 0e03 	and.w	lr, r0, #3
 80162be:	f1c4 0304 	rsb	r3, r4, #4
 80162c2:	eba2 0c03 	sub.w	ip, r2, r3
 80162c6:	f810 3b01 	ldrb.w	r3, [r0], #1
 80162ca:	f801 3b01 	strb.w	r3, [r1], #1
 80162ce:	2c03      	cmp	r4, #3
 80162d0:	f1c4 0202 	rsb	r2, r4, #2
 80162d4:	d00e      	beq.n	80162f4 <st_int8_copy+0x90>
 80162d6:	f810 3b01 	ldrb.w	r3, [r0], #1
 80162da:	f801 3b01 	strb.w	r3, [r1], #1
 80162de:	2a00      	cmp	r2, #0
 80162e0:	dd08      	ble.n	80162f4 <st_int8_copy+0x90>
 80162e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80162e6:	f801 3b01 	strb.w	r3, [r1], #1
 80162ea:	b91c      	cbnz	r4, 80162f4 <st_int8_copy+0x90>
 80162ec:	f810 3b01 	ldrb.w	r3, [r0], #1
 80162f0:	f801 3b01 	strb.w	r3, [r1], #1
 80162f4:	4574      	cmp	r4, lr
 80162f6:	d02b      	beq.n	8016350 <st_int8_copy+0xec>
 80162f8:	ea4f 131c 	mov.w	r3, ip, lsr #4
 80162fc:	1e5a      	subs	r2, r3, #1
 80162fe:	b153      	cbz	r3, 8016316 <st_int8_copy+0xb2>
 8016300:	f850 3b04 	ldr.w	r3, [r0], #4
 8016304:	f850 4b04 	ldr.w	r4, [r0], #4
 8016308:	f850 5b04 	ldr.w	r5, [r0], #4
 801630c:	f850 6b04 	ldr.w	r6, [r0], #4
 8016310:	c178      	stmia	r1!, {r3, r4, r5, r6}
 8016312:	3a01      	subs	r2, #1
 8016314:	d2f4      	bcs.n	8016300 <st_int8_copy+0x9c>
 8016316:	f01c 0f08 	tst.w	ip, #8
 801631a:	d004      	beq.n	8016326 <st_int8_copy+0xc2>
 801631c:	f850 3b04 	ldr.w	r3, [r0], #4
 8016320:	f850 4b04 	ldr.w	r4, [r0], #4
 8016324:	c118      	stmia	r1!, {r3, r4}
 8016326:	f01c 0f04 	tst.w	ip, #4
 801632a:	d003      	beq.n	8016334 <st_int8_copy+0xd0>
 801632c:	f850 3b04 	ldr.w	r3, [r0], #4
 8016330:	f841 3b04 	str.w	r3, [r1], #4
 8016334:	f01c 0f02 	tst.w	ip, #2
 8016338:	d003      	beq.n	8016342 <st_int8_copy+0xde>
 801633a:	f830 3b02 	ldrh.w	r3, [r0], #2
 801633e:	f821 3b02 	strh.w	r3, [r1], #2
 8016342:	f01c 0f01 	tst.w	ip, #1
 8016346:	d001      	beq.n	801634c <st_int8_copy+0xe8>
 8016348:	7803      	ldrb	r3, [r0, #0]
 801634a:	700b      	strb	r3, [r1, #0]
 801634c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016350:	ea4f 139c 	mov.w	r3, ip, lsr #6
 8016354:	f103 39ff 	add.w	r9, r3, #4294967295
 8016358:	b183      	cbz	r3, 801637c <st_int8_copy+0x118>
 801635a:	4688      	mov	r8, r1
 801635c:	4686      	mov	lr, r0
 801635e:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 8016362:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 8016366:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 801636a:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 801636e:	f109 39ff 	add.w	r9, r9, #4294967295
 8016372:	4641      	mov	r1, r8
 8016374:	4670      	mov	r0, lr
 8016376:	f1b9 3fff 	cmp.w	r9, #4294967295
 801637a:	d1ee      	bne.n	801635a <st_int8_copy+0xf6>
 801637c:	f01c 0f20 	tst.w	ip, #32
 8016380:	d007      	beq.n	8016392 <st_int8_copy+0x12e>
 8016382:	4688      	mov	r8, r1
 8016384:	4686      	mov	lr, r0
 8016386:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 801638a:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 801638e:	4641      	mov	r1, r8
 8016390:	4670      	mov	r0, lr
 8016392:	f01c 0f10 	tst.w	ip, #16
 8016396:	d001      	beq.n	801639c <st_int8_copy+0x138>
 8016398:	c878      	ldmia	r0!, {r3, r4, r5, r6}
 801639a:	c178      	stmia	r1!, {r3, r4, r5, r6}
 801639c:	f01c 0f08 	tst.w	ip, #8
 80163a0:	d0c1      	beq.n	8016326 <st_int8_copy+0xc2>
 80163a2:	c818      	ldmia	r0!, {r3, r4}
 80163a4:	c118      	stmia	r1!, {r3, r4}
 80163a6:	e7be      	b.n	8016326 <st_int8_copy+0xc2>

080163a8 <ai_array_to_buffer_fmt>:
 80163a8:	f3c0 4343 	ubfx	r3, r0, #17, #4
 80163ac:	2b02      	cmp	r3, #2
 80163ae:	d055      	beq.n	801645c <ai_array_to_buffer_fmt+0xb4>
 80163b0:	f020 437e 	bic.w	r3, r0, #4261412864	@ 0xfe000000
 80163b4:	4a2c      	ldr	r2, [pc, #176]	@ (8016468 <ai_array_to_buffer_fmt+0xc0>)
 80163b6:	4293      	cmp	r3, r2
 80163b8:	d010      	beq.n	80163dc <ai_array_to_buffer_fmt+0x34>
 80163ba:	dc21      	bgt.n	8016400 <ai_array_to_buffer_fmt+0x58>
 80163bc:	4a2b      	ldr	r2, [pc, #172]	@ (801646c <ai_array_to_buffer_fmt+0xc4>)
 80163be:	4293      	cmp	r3, r2
 80163c0:	d00c      	beq.n	80163dc <ai_array_to_buffer_fmt+0x34>
 80163c2:	dd0f      	ble.n	80163e4 <ai_array_to_buffer_fmt+0x3c>
 80163c4:	4a2a      	ldr	r2, [pc, #168]	@ (8016470 <ai_array_to_buffer_fmt+0xc8>)
 80163c6:	4293      	cmp	r3, r2
 80163c8:	d008      	beq.n	80163dc <ai_array_to_buffer_fmt+0x34>
 80163ca:	f502 32fa 	add.w	r2, r2, #128000	@ 0x1f400
 80163ce:	4293      	cmp	r3, r2
 80163d0:	d004      	beq.n	80163dc <ai_array_to_buffer_fmt+0x34>
 80163d2:	4a28      	ldr	r2, [pc, #160]	@ (8016474 <ai_array_to_buffer_fmt+0xcc>)
 80163d4:	4293      	cmp	r3, r2
 80163d6:	bf0c      	ite	eq
 80163d8:	4613      	moveq	r3, r2
 80163da:	2340      	movne	r3, #64	@ 0x40
 80163dc:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 80163e0:	4318      	orrs	r0, r3
 80163e2:	4770      	bx	lr
 80163e4:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 80163e8:	4293      	cmp	r3, r2
 80163ea:	d0f7      	beq.n	80163dc <ai_array_to_buffer_fmt+0x34>
 80163ec:	dd2c      	ble.n	8016448 <ai_array_to_buffer_fmt+0xa0>
 80163ee:	4a22      	ldr	r2, [pc, #136]	@ (8016478 <ai_array_to_buffer_fmt+0xd0>)
 80163f0:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 80163f4:	4293      	cmp	r3, r2
 80163f6:	bf0c      	ite	eq
 80163f8:	4613      	moveq	r3, r2
 80163fa:	2340      	movne	r3, #64	@ 0x40
 80163fc:	4318      	orrs	r0, r3
 80163fe:	4770      	bx	lr
 8016400:	4a1e      	ldr	r2, [pc, #120]	@ (801647c <ai_array_to_buffer_fmt+0xd4>)
 8016402:	4293      	cmp	r3, r2
 8016404:	d0ea      	beq.n	80163dc <ai_array_to_buffer_fmt+0x34>
 8016406:	dd10      	ble.n	801642a <ai_array_to_buffer_fmt+0x82>
 8016408:	4a1d      	ldr	r2, [pc, #116]	@ (8016480 <ai_array_to_buffer_fmt+0xd8>)
 801640a:	4293      	cmp	r3, r2
 801640c:	d0e6      	beq.n	80163dc <ai_array_to_buffer_fmt+0x34>
 801640e:	f202 72f1 	addw	r2, r2, #2033	@ 0x7f1
 8016412:	4293      	cmp	r3, r2
 8016414:	d0e2      	beq.n	80163dc <ai_array_to_buffer_fmt+0x34>
 8016416:	f5a2 6200 	sub.w	r2, r2, #2048	@ 0x800
 801641a:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 801641e:	4293      	cmp	r3, r2
 8016420:	bf0c      	ite	eq
 8016422:	4613      	moveq	r3, r2
 8016424:	2340      	movne	r3, #64	@ 0x40
 8016426:	4318      	orrs	r0, r3
 8016428:	4770      	bx	lr
 801642a:	f2a2 3287 	subw	r2, r2, #903	@ 0x387
 801642e:	4293      	cmp	r3, r2
 8016430:	d0d4      	beq.n	80163dc <ai_array_to_buffer_fmt+0x34>
 8016432:	f502 7260 	add.w	r2, r2, #896	@ 0x380
 8016436:	4293      	cmp	r3, r2
 8016438:	d0d0      	beq.n	80163dc <ai_array_to_buffer_fmt+0x34>
 801643a:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 801643e:	4293      	cmp	r3, r2
 8016440:	bf0c      	ite	eq
 8016442:	4613      	moveq	r3, r2
 8016444:	2340      	movne	r3, #64	@ 0x40
 8016446:	e7c9      	b.n	80163dc <ai_array_to_buffer_fmt+0x34>
 8016448:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 801644c:	4293      	cmp	r3, r2
 801644e:	d0c5      	beq.n	80163dc <ai_array_to_buffer_fmt+0x34>
 8016450:	3280      	adds	r2, #128	@ 0x80
 8016452:	4293      	cmp	r3, r2
 8016454:	bf0c      	ite	eq
 8016456:	4613      	moveq	r3, r2
 8016458:	2340      	movne	r3, #64	@ 0x40
 801645a:	e7bf      	b.n	80163dc <ai_array_to_buffer_fmt+0x34>
 801645c:	4b09      	ldr	r3, [pc, #36]	@ (8016484 <ai_array_to_buffer_fmt+0xdc>)
 801645e:	4003      	ands	r3, r0
 8016460:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8016464:	e7ba      	b.n	80163dc <ai_array_to_buffer_fmt+0x34>
 8016466:	bf00      	nop
 8016468:	00821040 	.word	0x00821040
 801646c:	00040840 	.word	0x00040840
 8016470:	00041040 	.word	0x00041040
 8016474:	0004084f 	.word	0x0004084f
 8016478:	00040447 	.word	0x00040447
 801647c:	00840447 	.word	0x00840447
 8016480:	0084084f 	.word	0x0084084f
 8016484:	00803fff 	.word	0x00803fff

08016488 <ai_array_get_byte_size>:
 8016488:	b321      	cbz	r1, 80164d4 <ai_array_get_byte_size+0x4c>
 801648a:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 801648e:	f46f 7288 	mvn.w	r2, #272	@ 0x110
 8016492:	f3c0 5c41 	ubfx	ip, r0, #21, #2
 8016496:	fb03 f101 	mul.w	r1, r3, r1
 801649a:	b500      	push	{lr}
 801649c:	f3c0 4e43 	ubfx	lr, r0, #17, #4
 80164a0:	3107      	adds	r1, #7
 80164a2:	11c0      	asrs	r0, r0, #7
 80164a4:	fa42 f20e 	asr.w	r2, r2, lr
 80164a8:	f021 0107 	bic.w	r1, r1, #7
 80164ac:	07d2      	lsls	r2, r2, #31
 80164ae:	fa21 f10c 	lsr.w	r1, r1, ip
 80164b2:	d505      	bpl.n	80164c0 <ai_array_get_byte_size+0x38>
 80164b4:	2300      	movs	r3, #0
 80164b6:	3107      	adds	r1, #7
 80164b8:	4419      	add	r1, r3
 80164ba:	08c8      	lsrs	r0, r1, #3
 80164bc:	f85d fb04 	ldr.w	pc, [sp], #4
 80164c0:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 80164c4:	3107      	adds	r1, #7
 80164c6:	fa40 f00c 	asr.w	r0, r0, ip
 80164ca:	4083      	lsls	r3, r0
 80164cc:	4419      	add	r1, r3
 80164ce:	08c8      	lsrs	r0, r1, #3
 80164d0:	f85d fb04 	ldr.w	pc, [sp], #4
 80164d4:	4608      	mov	r0, r1
 80164d6:	4770      	bx	lr

080164d8 <ai_array_get_data_byte_size>:
 80164d8:	b169      	cbz	r1, 80164f6 <ai_array_get_data_byte_size+0x1e>
 80164da:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 80164de:	f3c0 5041 	ubfx	r0, r0, #21, #2
 80164e2:	fb03 f101 	mul.w	r1, r3, r1
 80164e6:	1dcb      	adds	r3, r1, #7
 80164e8:	f023 0307 	bic.w	r3, r3, #7
 80164ec:	fa23 f000 	lsr.w	r0, r3, r0
 80164f0:	3007      	adds	r0, #7
 80164f2:	08c0      	lsrs	r0, r0, #3
 80164f4:	4770      	bx	lr
 80164f6:	4608      	mov	r0, r1
 80164f8:	4770      	bx	lr
 80164fa:	bf00      	nop

080164fc <ai_version_get>:
 80164fc:	0212      	lsls	r2, r2, #8
 80164fe:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8016502:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 8016506:	4770      	bx	lr

08016508 <get_tensor_byte_size>:
 8016508:	b430      	push	{r4, r5}
 801650a:	6985      	ldr	r5, [r0, #24]
 801650c:	68c4      	ldr	r4, [r0, #12]
 801650e:	6941      	ldr	r1, [r0, #20]
 8016510:	4b06      	ldr	r3, [pc, #24]	@ (801652c <get_tensor_byte_size+0x24>)
 8016512:	6828      	ldr	r0, [r5, #0]
 8016514:	4a06      	ldr	r2, [pc, #24]	@ (8016530 <get_tensor_byte_size+0x28>)
 8016516:	4003      	ands	r3, r0
 8016518:	68c9      	ldr	r1, [r1, #12]
 801651a:	68e0      	ldr	r0, [r4, #12]
 801651c:	4293      	cmp	r3, r2
 801651e:	fb01 f000 	mul.w	r0, r1, r0
 8016522:	d101      	bne.n	8016528 <get_tensor_byte_size+0x20>
 8016524:	3007      	adds	r0, #7
 8016526:	08c0      	lsrs	r0, r0, #3
 8016528:	bc30      	pop	{r4, r5}
 801652a:	4770      	bx	lr
 801652c:	017fffff 	.word	0x017fffff
 8016530:	000400c0 	.word	0x000400c0

08016534 <lite_bilinear_if32of32_kernel>:
 8016534:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016536:	9d05      	ldr	r5, [sp, #20]
 8016538:	b352      	cbz	r2, 8016590 <lite_bilinear_if32of32_kernel+0x5c>
 801653a:	f04f 0c00 	mov.w	ip, #0
 801653e:	edd5 4a02 	vldr	s9, [r5, #8]
 8016542:	f10c 0c01 	add.w	ip, ip, #1
 8016546:	ed95 5a01 	vldr	s10, [r5, #4]
 801654a:	ed90 6a00 	vldr	s12, [r0]
 801654e:	4562      	cmp	r2, ip
 8016550:	edd5 5a00 	vldr	s11, [r5]
 8016554:	edd5 6a03 	vldr	s13, [r5, #12]
 8016558:	e9d3 4600 	ldrd	r4, r6, [r3]
 801655c:	eb00 0786 	add.w	r7, r0, r6, lsl #2
 8016560:	eb00 0e84 	add.w	lr, r0, r4, lsl #2
 8016564:	4434      	add	r4, r6
 8016566:	edd7 7a00 	vldr	s15, [r7]
 801656a:	ed9e 7a00 	vldr	s14, [lr]
 801656e:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8016572:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8016576:	f100 0004 	add.w	r0, r0, #4
 801657a:	eee5 7a07 	vfma.f32	s15, s10, s14
 801657e:	ed94 7a00 	vldr	s14, [r4]
 8016582:	eee5 7a86 	vfma.f32	s15, s11, s12
 8016586:	eee6 7a87 	vfma.f32	s15, s13, s14
 801658a:	ece1 7a01 	vstmia	r1!, {s15}
 801658e:	d1d6      	bne.n	801653e <lite_bilinear_if32of32_kernel+0xa>
 8016590:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016592:	bf00      	nop

08016594 <lite_bilinear_is8os8_kernel>:
 8016594:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016598:	9c07      	ldr	r4, [sp, #28]
 801659a:	2a00      	cmp	r2, #0
 801659c:	d04b      	beq.n	8016636 <lite_bilinear_is8os8_kernel+0xa2>
 801659e:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 80165a2:	eb01 0e02 	add.w	lr, r1, r2
 80165a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80165aa:	f1c0 0501 	rsb	r5, r0, #1
 80165ae:	685f      	ldr	r7, [r3, #4]
 80165b0:	eb05 060c 	add.w	r6, r5, ip
 80165b4:	681a      	ldr	r2, [r3, #0]
 80165b6:	eb00 0807 	add.w	r8, r0, r7
 80165ba:	edd4 3a02 	vldr	s7, [r4, #8]
 80165be:	4402      	add	r2, r0
 80165c0:	ed94 4a01 	vldr	s8, [r4, #4]
 80165c4:	f918 8006 	ldrsb.w	r8, [r8, r6]
 80165c8:	f91c 9f01 	ldrsb.w	r9, [ip, #1]!
 80165cc:	ee07 8a90 	vmov	s15, r8
 80165d0:	f912 8006 	ldrsb.w	r8, [r2, r6]
 80165d4:	ee06 9a90 	vmov	s13, r9
 80165d8:	443a      	add	r2, r7
 80165da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80165de:	ee06 8a10 	vmov	s12, r8
 80165e2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80165e6:	edd4 4a00 	vldr	s9, [r4]
 80165ea:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80165ee:	5792      	ldrsb	r2, [r2, r6]
 80165f0:	ee67 7aa3 	vmul.f32	s15, s15, s7
 80165f4:	ed94 5a03 	vldr	s10, [r4, #12]
 80165f8:	ee07 2a10 	vmov	s14, r2
 80165fc:	eee4 7a06 	vfma.f32	s15, s8, s12
 8016600:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016604:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8016608:	eee5 7a07 	vfma.f32	s15, s10, s14
 801660c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016610:	ee37 7aa5 	vadd.f32	s14, s15, s11
 8016614:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8016618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801661c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8016620:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016624:	dd09      	ble.n	801663a <lite_bilinear_is8os8_kernel+0xa6>
 8016626:	ee17 2a10 	vmov	r2, s14
 801662a:	f302 0207 	ssat	r2, #8, r2
 801662e:	f801 2b01 	strb.w	r2, [r1], #1
 8016632:	4571      	cmp	r1, lr
 8016634:	d1bb      	bne.n	80165ae <lite_bilinear_is8os8_kernel+0x1a>
 8016636:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801663a:	ee17 2a90 	vmov	r2, s15
 801663e:	f302 0207 	ssat	r2, #8, r2
 8016642:	f801 2b01 	strb.w	r2, [r1], #1
 8016646:	4571      	cmp	r1, lr
 8016648:	d1b1      	bne.n	80165ae <lite_bilinear_is8os8_kernel+0x1a>
 801664a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801664e:	bf00      	nop

08016650 <lite_bilinear_iu8ou8_kernel>:
 8016650:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016654:	9c07      	ldr	r4, [sp, #28]
 8016656:	2a00      	cmp	r2, #0
 8016658:	d042      	beq.n	80166e0 <lite_bilinear_iu8ou8_kernel+0x90>
 801665a:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 801665e:	eb01 0e02 	add.w	lr, r1, r2
 8016662:	f100 3cff 	add.w	ip, r0, #4294967295
 8016666:	f1c0 0501 	rsb	r5, r0, #1
 801666a:	eb05 060c 	add.w	r6, r5, ip
 801666e:	f81c 2f01 	ldrb.w	r2, [ip, #1]!
 8016672:	eef0 7a44 	vmov.f32	s15, s8
 8016676:	edd4 6a00 	vldr	s13, [r4]
 801667a:	ee07 2a10 	vmov	s14, r2
 801667e:	681a      	ldr	r2, [r3, #0]
 8016680:	685f      	ldr	r7, [r3, #4]
 8016682:	4402      	add	r2, r0
 8016684:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8016688:	eb00 0807 	add.w	r8, r0, r7
 801668c:	edd4 4a01 	vldr	s9, [r4, #4]
 8016690:	f812 9006 	ldrb.w	r9, [r2, r6]
 8016694:	443a      	add	r2, r7
 8016696:	eee6 7a87 	vfma.f32	s15, s13, s14
 801669a:	f818 8006 	ldrb.w	r8, [r8, r6]
 801669e:	ee06 9a10 	vmov	s12, r9
 80166a2:	ed94 5a02 	vldr	s10, [r4, #8]
 80166a6:	ee06 8a90 	vmov	s13, r8
 80166aa:	5d92      	ldrb	r2, [r2, r6]
 80166ac:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80166b0:	edd4 5a03 	vldr	s11, [r4, #12]
 80166b4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80166b8:	ee07 2a10 	vmov	s14, r2
 80166bc:	eee4 7a86 	vfma.f32	s15, s9, s12
 80166c0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80166c4:	eee5 7a26 	vfma.f32	s15, s10, s13
 80166c8:	eee5 7a87 	vfma.f32	s15, s11, s14
 80166cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80166d0:	ee17 2a90 	vmov	r2, s15
 80166d4:	f382 0208 	usat	r2, #8, r2
 80166d8:	f801 2b01 	strb.w	r2, [r1], #1
 80166dc:	4571      	cmp	r1, lr
 80166de:	d1c4      	bne.n	801666a <lite_bilinear_iu8ou8_kernel+0x1a>
 80166e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080166e4 <lite_bilinear_is16os16_kernel>:
 80166e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80166e8:	9d07      	ldr	r5, [sp, #28]
 80166ea:	2a00      	cmp	r2, #0
 80166ec:	d04e      	beq.n	801678c <lite_bilinear_is16os16_kernel+0xa8>
 80166ee:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 80166f2:	f1a0 0e02 	sub.w	lr, r0, #2
 80166f6:	f04f 0c00 	mov.w	ip, #0
 80166fa:	ed95 7a02 	vldr	s14, [r5, #8]
 80166fe:	ed95 4a01 	vldr	s8, [r5, #4]
 8016702:	f93e 9f02 	ldrsh.w	r9, [lr, #2]!
 8016706:	edd5 4a00 	vldr	s9, [r5]
 801670a:	ee06 9a90 	vmov	s13, r9
 801670e:	ed95 5a03 	vldr	s10, [r5, #12]
 8016712:	e9d3 4600 	ldrd	r4, r6, [r3]
 8016716:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801671a:	eb06 080c 	add.w	r8, r6, ip
 801671e:	eb04 070c 	add.w	r7, r4, ip
 8016722:	4434      	add	r4, r6
 8016724:	f930 6018 	ldrsh.w	r6, [r0, r8, lsl #1]
 8016728:	4464      	add	r4, ip
 801672a:	ee07 6a90 	vmov	s15, r6
 801672e:	f930 6017 	ldrsh.w	r6, [r0, r7, lsl #1]
 8016732:	f930 4014 	ldrsh.w	r4, [r0, r4, lsl #1]
 8016736:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801673a:	ee06 6a10 	vmov	s12, r6
 801673e:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8016742:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016746:	ee07 4a10 	vmov	s14, r4
 801674a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801674e:	eee4 7a06 	vfma.f32	s15, s8, s12
 8016752:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8016756:	eee5 7a07 	vfma.f32	s15, s10, s14
 801675a:	ee37 7aa5 	vadd.f32	s14, s15, s11
 801675e:	ee77 6ae5 	vsub.f32	s13, s15, s11
 8016762:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016766:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801676a:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 801676e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016772:	bfcc      	ite	gt
 8016774:	ee17 4a10 	vmovgt	r4, s14
 8016778:	ee16 4a90 	vmovle	r4, s13
 801677c:	f304 040f 	ssat	r4, #16, r4
 8016780:	f10c 0c01 	add.w	ip, ip, #1
 8016784:	f821 4b02 	strh.w	r4, [r1], #2
 8016788:	4562      	cmp	r2, ip
 801678a:	d1b6      	bne.n	80166fa <lite_bilinear_is16os16_kernel+0x16>
 801678c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08016790 <lite_bilinear_iu16ou16_kernel>:
 8016790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016794:	9d06      	ldr	r5, [sp, #24]
 8016796:	2a00      	cmp	r2, #0
 8016798:	d042      	beq.n	8016820 <lite_bilinear_iu16ou16_kernel+0x90>
 801679a:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 801679e:	1e86      	subs	r6, r0, #2
 80167a0:	f04f 0e00 	mov.w	lr, #0
 80167a4:	f836 4f02 	ldrh.w	r4, [r6, #2]!
 80167a8:	eef0 7a44 	vmov.f32	s15, s8
 80167ac:	edd5 6a00 	vldr	s13, [r5]
 80167b0:	ee07 4a10 	vmov	s14, r4
 80167b4:	681c      	ldr	r4, [r3, #0]
 80167b6:	685f      	ldr	r7, [r3, #4]
 80167b8:	eb04 080e 	add.w	r8, r4, lr
 80167bc:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80167c0:	eb07 0c0e 	add.w	ip, r7, lr
 80167c4:	edd5 4a01 	vldr	s9, [r5, #4]
 80167c8:	f830 8018 	ldrh.w	r8, [r0, r8, lsl #1]
 80167cc:	443c      	add	r4, r7
 80167ce:	eee6 7a87 	vfma.f32	s15, s13, s14
 80167d2:	f830 701c 	ldrh.w	r7, [r0, ip, lsl #1]
 80167d6:	ee06 8a10 	vmov	s12, r8
 80167da:	4474      	add	r4, lr
 80167dc:	ee06 7a90 	vmov	s13, r7
 80167e0:	ed95 5a02 	vldr	s10, [r5, #8]
 80167e4:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80167e8:	f830 4014 	ldrh.w	r4, [r0, r4, lsl #1]
 80167ec:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80167f0:	edd5 5a03 	vldr	s11, [r5, #12]
 80167f4:	ee07 4a10 	vmov	s14, r4
 80167f8:	eee4 7a86 	vfma.f32	s15, s9, s12
 80167fc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016800:	eee5 7a26 	vfma.f32	s15, s10, s13
 8016804:	eee5 7a87 	vfma.f32	s15, s11, s14
 8016808:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801680c:	ee17 ca90 	vmov	ip, s15
 8016810:	f38c 0c10 	usat	ip, #16, ip
 8016814:	f10e 0e01 	add.w	lr, lr, #1
 8016818:	f821 cb02 	strh.w	ip, [r1], #2
 801681c:	4572      	cmp	r2, lr
 801681e:	d1c1      	bne.n	80167a4 <lite_bilinear_iu16ou16_kernel+0x14>
 8016820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016824 <malloc>:
 8016824:	4b02      	ldr	r3, [pc, #8]	@ (8016830 <malloc+0xc>)
 8016826:	4601      	mov	r1, r0
 8016828:	6818      	ldr	r0, [r3, #0]
 801682a:	f000 b825 	b.w	8016878 <_malloc_r>
 801682e:	bf00      	nop
 8016830:	200008cc 	.word	0x200008cc

08016834 <sbrk_aligned>:
 8016834:	b570      	push	{r4, r5, r6, lr}
 8016836:	4e0f      	ldr	r6, [pc, #60]	@ (8016874 <sbrk_aligned+0x40>)
 8016838:	460c      	mov	r4, r1
 801683a:	6831      	ldr	r1, [r6, #0]
 801683c:	4605      	mov	r5, r0
 801683e:	b911      	cbnz	r1, 8016846 <sbrk_aligned+0x12>
 8016840:	f000 ff96 	bl	8017770 <_sbrk_r>
 8016844:	6030      	str	r0, [r6, #0]
 8016846:	4621      	mov	r1, r4
 8016848:	4628      	mov	r0, r5
 801684a:	f000 ff91 	bl	8017770 <_sbrk_r>
 801684e:	1c43      	adds	r3, r0, #1
 8016850:	d103      	bne.n	801685a <sbrk_aligned+0x26>
 8016852:	f04f 34ff 	mov.w	r4, #4294967295
 8016856:	4620      	mov	r0, r4
 8016858:	bd70      	pop	{r4, r5, r6, pc}
 801685a:	1cc4      	adds	r4, r0, #3
 801685c:	f024 0403 	bic.w	r4, r4, #3
 8016860:	42a0      	cmp	r0, r4
 8016862:	d0f8      	beq.n	8016856 <sbrk_aligned+0x22>
 8016864:	1a21      	subs	r1, r4, r0
 8016866:	4628      	mov	r0, r5
 8016868:	f000 ff82 	bl	8017770 <_sbrk_r>
 801686c:	3001      	adds	r0, #1
 801686e:	d1f2      	bne.n	8016856 <sbrk_aligned+0x22>
 8016870:	e7ef      	b.n	8016852 <sbrk_aligned+0x1e>
 8016872:	bf00      	nop
 8016874:	20036020 	.word	0x20036020

08016878 <_malloc_r>:
 8016878:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801687c:	1ccd      	adds	r5, r1, #3
 801687e:	f025 0503 	bic.w	r5, r5, #3
 8016882:	3508      	adds	r5, #8
 8016884:	2d0c      	cmp	r5, #12
 8016886:	bf38      	it	cc
 8016888:	250c      	movcc	r5, #12
 801688a:	2d00      	cmp	r5, #0
 801688c:	4606      	mov	r6, r0
 801688e:	db01      	blt.n	8016894 <_malloc_r+0x1c>
 8016890:	42a9      	cmp	r1, r5
 8016892:	d904      	bls.n	801689e <_malloc_r+0x26>
 8016894:	230c      	movs	r3, #12
 8016896:	6033      	str	r3, [r6, #0]
 8016898:	2000      	movs	r0, #0
 801689a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801689e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8016974 <_malloc_r+0xfc>
 80168a2:	f000 f869 	bl	8016978 <__malloc_lock>
 80168a6:	f8d8 3000 	ldr.w	r3, [r8]
 80168aa:	461c      	mov	r4, r3
 80168ac:	bb44      	cbnz	r4, 8016900 <_malloc_r+0x88>
 80168ae:	4629      	mov	r1, r5
 80168b0:	4630      	mov	r0, r6
 80168b2:	f7ff ffbf 	bl	8016834 <sbrk_aligned>
 80168b6:	1c43      	adds	r3, r0, #1
 80168b8:	4604      	mov	r4, r0
 80168ba:	d158      	bne.n	801696e <_malloc_r+0xf6>
 80168bc:	f8d8 4000 	ldr.w	r4, [r8]
 80168c0:	4627      	mov	r7, r4
 80168c2:	2f00      	cmp	r7, #0
 80168c4:	d143      	bne.n	801694e <_malloc_r+0xd6>
 80168c6:	2c00      	cmp	r4, #0
 80168c8:	d04b      	beq.n	8016962 <_malloc_r+0xea>
 80168ca:	6823      	ldr	r3, [r4, #0]
 80168cc:	4639      	mov	r1, r7
 80168ce:	4630      	mov	r0, r6
 80168d0:	eb04 0903 	add.w	r9, r4, r3
 80168d4:	f000 ff4c 	bl	8017770 <_sbrk_r>
 80168d8:	4581      	cmp	r9, r0
 80168da:	d142      	bne.n	8016962 <_malloc_r+0xea>
 80168dc:	6821      	ldr	r1, [r4, #0]
 80168de:	1a6d      	subs	r5, r5, r1
 80168e0:	4629      	mov	r1, r5
 80168e2:	4630      	mov	r0, r6
 80168e4:	f7ff ffa6 	bl	8016834 <sbrk_aligned>
 80168e8:	3001      	adds	r0, #1
 80168ea:	d03a      	beq.n	8016962 <_malloc_r+0xea>
 80168ec:	6823      	ldr	r3, [r4, #0]
 80168ee:	442b      	add	r3, r5
 80168f0:	6023      	str	r3, [r4, #0]
 80168f2:	f8d8 3000 	ldr.w	r3, [r8]
 80168f6:	685a      	ldr	r2, [r3, #4]
 80168f8:	bb62      	cbnz	r2, 8016954 <_malloc_r+0xdc>
 80168fa:	f8c8 7000 	str.w	r7, [r8]
 80168fe:	e00f      	b.n	8016920 <_malloc_r+0xa8>
 8016900:	6822      	ldr	r2, [r4, #0]
 8016902:	1b52      	subs	r2, r2, r5
 8016904:	d420      	bmi.n	8016948 <_malloc_r+0xd0>
 8016906:	2a0b      	cmp	r2, #11
 8016908:	d917      	bls.n	801693a <_malloc_r+0xc2>
 801690a:	1961      	adds	r1, r4, r5
 801690c:	42a3      	cmp	r3, r4
 801690e:	6025      	str	r5, [r4, #0]
 8016910:	bf18      	it	ne
 8016912:	6059      	strne	r1, [r3, #4]
 8016914:	6863      	ldr	r3, [r4, #4]
 8016916:	bf08      	it	eq
 8016918:	f8c8 1000 	streq.w	r1, [r8]
 801691c:	5162      	str	r2, [r4, r5]
 801691e:	604b      	str	r3, [r1, #4]
 8016920:	4630      	mov	r0, r6
 8016922:	f000 f82f 	bl	8016984 <__malloc_unlock>
 8016926:	f104 000b 	add.w	r0, r4, #11
 801692a:	1d23      	adds	r3, r4, #4
 801692c:	f020 0007 	bic.w	r0, r0, #7
 8016930:	1ac2      	subs	r2, r0, r3
 8016932:	bf1c      	itt	ne
 8016934:	1a1b      	subne	r3, r3, r0
 8016936:	50a3      	strne	r3, [r4, r2]
 8016938:	e7af      	b.n	801689a <_malloc_r+0x22>
 801693a:	6862      	ldr	r2, [r4, #4]
 801693c:	42a3      	cmp	r3, r4
 801693e:	bf0c      	ite	eq
 8016940:	f8c8 2000 	streq.w	r2, [r8]
 8016944:	605a      	strne	r2, [r3, #4]
 8016946:	e7eb      	b.n	8016920 <_malloc_r+0xa8>
 8016948:	4623      	mov	r3, r4
 801694a:	6864      	ldr	r4, [r4, #4]
 801694c:	e7ae      	b.n	80168ac <_malloc_r+0x34>
 801694e:	463c      	mov	r4, r7
 8016950:	687f      	ldr	r7, [r7, #4]
 8016952:	e7b6      	b.n	80168c2 <_malloc_r+0x4a>
 8016954:	461a      	mov	r2, r3
 8016956:	685b      	ldr	r3, [r3, #4]
 8016958:	42a3      	cmp	r3, r4
 801695a:	d1fb      	bne.n	8016954 <_malloc_r+0xdc>
 801695c:	2300      	movs	r3, #0
 801695e:	6053      	str	r3, [r2, #4]
 8016960:	e7de      	b.n	8016920 <_malloc_r+0xa8>
 8016962:	230c      	movs	r3, #12
 8016964:	6033      	str	r3, [r6, #0]
 8016966:	4630      	mov	r0, r6
 8016968:	f000 f80c 	bl	8016984 <__malloc_unlock>
 801696c:	e794      	b.n	8016898 <_malloc_r+0x20>
 801696e:	6005      	str	r5, [r0, #0]
 8016970:	e7d6      	b.n	8016920 <_malloc_r+0xa8>
 8016972:	bf00      	nop
 8016974:	20036024 	.word	0x20036024

08016978 <__malloc_lock>:
 8016978:	4801      	ldr	r0, [pc, #4]	@ (8016980 <__malloc_lock+0x8>)
 801697a:	f000 bf46 	b.w	801780a <__retarget_lock_acquire_recursive>
 801697e:	bf00      	nop
 8016980:	20036168 	.word	0x20036168

08016984 <__malloc_unlock>:
 8016984:	4801      	ldr	r0, [pc, #4]	@ (801698c <__malloc_unlock+0x8>)
 8016986:	f000 bf41 	b.w	801780c <__retarget_lock_release_recursive>
 801698a:	bf00      	nop
 801698c:	20036168 	.word	0x20036168

08016990 <_realloc_r>:
 8016990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016994:	4680      	mov	r8, r0
 8016996:	4615      	mov	r5, r2
 8016998:	460c      	mov	r4, r1
 801699a:	b921      	cbnz	r1, 80169a6 <_realloc_r+0x16>
 801699c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80169a0:	4611      	mov	r1, r2
 80169a2:	f7ff bf69 	b.w	8016878 <_malloc_r>
 80169a6:	b92a      	cbnz	r2, 80169b4 <_realloc_r+0x24>
 80169a8:	f001 fd8e 	bl	80184c8 <_free_r>
 80169ac:	2400      	movs	r4, #0
 80169ae:	4620      	mov	r0, r4
 80169b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80169b4:	f002 f954 	bl	8018c60 <_malloc_usable_size_r>
 80169b8:	4285      	cmp	r5, r0
 80169ba:	4606      	mov	r6, r0
 80169bc:	d802      	bhi.n	80169c4 <_realloc_r+0x34>
 80169be:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80169c2:	d8f4      	bhi.n	80169ae <_realloc_r+0x1e>
 80169c4:	4629      	mov	r1, r5
 80169c6:	4640      	mov	r0, r8
 80169c8:	f7ff ff56 	bl	8016878 <_malloc_r>
 80169cc:	4607      	mov	r7, r0
 80169ce:	2800      	cmp	r0, #0
 80169d0:	d0ec      	beq.n	80169ac <_realloc_r+0x1c>
 80169d2:	42b5      	cmp	r5, r6
 80169d4:	462a      	mov	r2, r5
 80169d6:	4621      	mov	r1, r4
 80169d8:	bf28      	it	cs
 80169da:	4632      	movcs	r2, r6
 80169dc:	f000 ff17 	bl	801780e <memcpy>
 80169e0:	4621      	mov	r1, r4
 80169e2:	4640      	mov	r0, r8
 80169e4:	f001 fd70 	bl	80184c8 <_free_r>
 80169e8:	463c      	mov	r4, r7
 80169ea:	e7e0      	b.n	80169ae <_realloc_r+0x1e>

080169ec <__cvt>:
 80169ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80169f0:	ec57 6b10 	vmov	r6, r7, d0
 80169f4:	2f00      	cmp	r7, #0
 80169f6:	460c      	mov	r4, r1
 80169f8:	4619      	mov	r1, r3
 80169fa:	463b      	mov	r3, r7
 80169fc:	bfbb      	ittet	lt
 80169fe:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8016a02:	461f      	movlt	r7, r3
 8016a04:	2300      	movge	r3, #0
 8016a06:	232d      	movlt	r3, #45	@ 0x2d
 8016a08:	700b      	strb	r3, [r1, #0]
 8016a0a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016a0c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8016a10:	4691      	mov	r9, r2
 8016a12:	f023 0820 	bic.w	r8, r3, #32
 8016a16:	bfbc      	itt	lt
 8016a18:	4632      	movlt	r2, r6
 8016a1a:	4616      	movlt	r6, r2
 8016a1c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8016a20:	d005      	beq.n	8016a2e <__cvt+0x42>
 8016a22:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8016a26:	d100      	bne.n	8016a2a <__cvt+0x3e>
 8016a28:	3401      	adds	r4, #1
 8016a2a:	2102      	movs	r1, #2
 8016a2c:	e000      	b.n	8016a30 <__cvt+0x44>
 8016a2e:	2103      	movs	r1, #3
 8016a30:	ab03      	add	r3, sp, #12
 8016a32:	9301      	str	r3, [sp, #4]
 8016a34:	ab02      	add	r3, sp, #8
 8016a36:	9300      	str	r3, [sp, #0]
 8016a38:	ec47 6b10 	vmov	d0, r6, r7
 8016a3c:	4653      	mov	r3, sl
 8016a3e:	4622      	mov	r2, r4
 8016a40:	f000 ff7e 	bl	8017940 <_dtoa_r>
 8016a44:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8016a48:	4605      	mov	r5, r0
 8016a4a:	d119      	bne.n	8016a80 <__cvt+0x94>
 8016a4c:	f019 0f01 	tst.w	r9, #1
 8016a50:	d00e      	beq.n	8016a70 <__cvt+0x84>
 8016a52:	eb00 0904 	add.w	r9, r0, r4
 8016a56:	2200      	movs	r2, #0
 8016a58:	2300      	movs	r3, #0
 8016a5a:	4630      	mov	r0, r6
 8016a5c:	4639      	mov	r1, r7
 8016a5e:	f7ea f8c3 	bl	8000be8 <__aeabi_dcmpeq>
 8016a62:	b108      	cbz	r0, 8016a68 <__cvt+0x7c>
 8016a64:	f8cd 900c 	str.w	r9, [sp, #12]
 8016a68:	2230      	movs	r2, #48	@ 0x30
 8016a6a:	9b03      	ldr	r3, [sp, #12]
 8016a6c:	454b      	cmp	r3, r9
 8016a6e:	d31e      	bcc.n	8016aae <__cvt+0xc2>
 8016a70:	9b03      	ldr	r3, [sp, #12]
 8016a72:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016a74:	1b5b      	subs	r3, r3, r5
 8016a76:	4628      	mov	r0, r5
 8016a78:	6013      	str	r3, [r2, #0]
 8016a7a:	b004      	add	sp, #16
 8016a7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016a80:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8016a84:	eb00 0904 	add.w	r9, r0, r4
 8016a88:	d1e5      	bne.n	8016a56 <__cvt+0x6a>
 8016a8a:	7803      	ldrb	r3, [r0, #0]
 8016a8c:	2b30      	cmp	r3, #48	@ 0x30
 8016a8e:	d10a      	bne.n	8016aa6 <__cvt+0xba>
 8016a90:	2200      	movs	r2, #0
 8016a92:	2300      	movs	r3, #0
 8016a94:	4630      	mov	r0, r6
 8016a96:	4639      	mov	r1, r7
 8016a98:	f7ea f8a6 	bl	8000be8 <__aeabi_dcmpeq>
 8016a9c:	b918      	cbnz	r0, 8016aa6 <__cvt+0xba>
 8016a9e:	f1c4 0401 	rsb	r4, r4, #1
 8016aa2:	f8ca 4000 	str.w	r4, [sl]
 8016aa6:	f8da 3000 	ldr.w	r3, [sl]
 8016aaa:	4499      	add	r9, r3
 8016aac:	e7d3      	b.n	8016a56 <__cvt+0x6a>
 8016aae:	1c59      	adds	r1, r3, #1
 8016ab0:	9103      	str	r1, [sp, #12]
 8016ab2:	701a      	strb	r2, [r3, #0]
 8016ab4:	e7d9      	b.n	8016a6a <__cvt+0x7e>

08016ab6 <__exponent>:
 8016ab6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016ab8:	2900      	cmp	r1, #0
 8016aba:	bfba      	itte	lt
 8016abc:	4249      	neglt	r1, r1
 8016abe:	232d      	movlt	r3, #45	@ 0x2d
 8016ac0:	232b      	movge	r3, #43	@ 0x2b
 8016ac2:	2909      	cmp	r1, #9
 8016ac4:	7002      	strb	r2, [r0, #0]
 8016ac6:	7043      	strb	r3, [r0, #1]
 8016ac8:	dd29      	ble.n	8016b1e <__exponent+0x68>
 8016aca:	f10d 0307 	add.w	r3, sp, #7
 8016ace:	461d      	mov	r5, r3
 8016ad0:	270a      	movs	r7, #10
 8016ad2:	461a      	mov	r2, r3
 8016ad4:	fbb1 f6f7 	udiv	r6, r1, r7
 8016ad8:	fb07 1416 	mls	r4, r7, r6, r1
 8016adc:	3430      	adds	r4, #48	@ 0x30
 8016ade:	f802 4c01 	strb.w	r4, [r2, #-1]
 8016ae2:	460c      	mov	r4, r1
 8016ae4:	2c63      	cmp	r4, #99	@ 0x63
 8016ae6:	f103 33ff 	add.w	r3, r3, #4294967295
 8016aea:	4631      	mov	r1, r6
 8016aec:	dcf1      	bgt.n	8016ad2 <__exponent+0x1c>
 8016aee:	3130      	adds	r1, #48	@ 0x30
 8016af0:	1e94      	subs	r4, r2, #2
 8016af2:	f803 1c01 	strb.w	r1, [r3, #-1]
 8016af6:	1c41      	adds	r1, r0, #1
 8016af8:	4623      	mov	r3, r4
 8016afa:	42ab      	cmp	r3, r5
 8016afc:	d30a      	bcc.n	8016b14 <__exponent+0x5e>
 8016afe:	f10d 0309 	add.w	r3, sp, #9
 8016b02:	1a9b      	subs	r3, r3, r2
 8016b04:	42ac      	cmp	r4, r5
 8016b06:	bf88      	it	hi
 8016b08:	2300      	movhi	r3, #0
 8016b0a:	3302      	adds	r3, #2
 8016b0c:	4403      	add	r3, r0
 8016b0e:	1a18      	subs	r0, r3, r0
 8016b10:	b003      	add	sp, #12
 8016b12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016b14:	f813 6b01 	ldrb.w	r6, [r3], #1
 8016b18:	f801 6f01 	strb.w	r6, [r1, #1]!
 8016b1c:	e7ed      	b.n	8016afa <__exponent+0x44>
 8016b1e:	2330      	movs	r3, #48	@ 0x30
 8016b20:	3130      	adds	r1, #48	@ 0x30
 8016b22:	7083      	strb	r3, [r0, #2]
 8016b24:	70c1      	strb	r1, [r0, #3]
 8016b26:	1d03      	adds	r3, r0, #4
 8016b28:	e7f1      	b.n	8016b0e <__exponent+0x58>
	...

08016b2c <_printf_float>:
 8016b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b30:	b08d      	sub	sp, #52	@ 0x34
 8016b32:	460c      	mov	r4, r1
 8016b34:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8016b38:	4616      	mov	r6, r2
 8016b3a:	461f      	mov	r7, r3
 8016b3c:	4605      	mov	r5, r0
 8016b3e:	f000 fddf 	bl	8017700 <_localeconv_r>
 8016b42:	6803      	ldr	r3, [r0, #0]
 8016b44:	9304      	str	r3, [sp, #16]
 8016b46:	4618      	mov	r0, r3
 8016b48:	f7e9 fc22 	bl	8000390 <strlen>
 8016b4c:	2300      	movs	r3, #0
 8016b4e:	930a      	str	r3, [sp, #40]	@ 0x28
 8016b50:	f8d8 3000 	ldr.w	r3, [r8]
 8016b54:	9005      	str	r0, [sp, #20]
 8016b56:	3307      	adds	r3, #7
 8016b58:	f023 0307 	bic.w	r3, r3, #7
 8016b5c:	f103 0208 	add.w	r2, r3, #8
 8016b60:	f894 a018 	ldrb.w	sl, [r4, #24]
 8016b64:	f8d4 b000 	ldr.w	fp, [r4]
 8016b68:	f8c8 2000 	str.w	r2, [r8]
 8016b6c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8016b70:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8016b74:	9307      	str	r3, [sp, #28]
 8016b76:	f8cd 8018 	str.w	r8, [sp, #24]
 8016b7a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8016b7e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016b82:	4b9c      	ldr	r3, [pc, #624]	@ (8016df4 <_printf_float+0x2c8>)
 8016b84:	f04f 32ff 	mov.w	r2, #4294967295
 8016b88:	f7ea f860 	bl	8000c4c <__aeabi_dcmpun>
 8016b8c:	bb70      	cbnz	r0, 8016bec <_printf_float+0xc0>
 8016b8e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016b92:	4b98      	ldr	r3, [pc, #608]	@ (8016df4 <_printf_float+0x2c8>)
 8016b94:	f04f 32ff 	mov.w	r2, #4294967295
 8016b98:	f7ea f83a 	bl	8000c10 <__aeabi_dcmple>
 8016b9c:	bb30      	cbnz	r0, 8016bec <_printf_float+0xc0>
 8016b9e:	2200      	movs	r2, #0
 8016ba0:	2300      	movs	r3, #0
 8016ba2:	4640      	mov	r0, r8
 8016ba4:	4649      	mov	r1, r9
 8016ba6:	f7ea f829 	bl	8000bfc <__aeabi_dcmplt>
 8016baa:	b110      	cbz	r0, 8016bb2 <_printf_float+0x86>
 8016bac:	232d      	movs	r3, #45	@ 0x2d
 8016bae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8016bb2:	4a91      	ldr	r2, [pc, #580]	@ (8016df8 <_printf_float+0x2cc>)
 8016bb4:	4b91      	ldr	r3, [pc, #580]	@ (8016dfc <_printf_float+0x2d0>)
 8016bb6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8016bba:	bf94      	ite	ls
 8016bbc:	4690      	movls	r8, r2
 8016bbe:	4698      	movhi	r8, r3
 8016bc0:	2303      	movs	r3, #3
 8016bc2:	6123      	str	r3, [r4, #16]
 8016bc4:	f02b 0304 	bic.w	r3, fp, #4
 8016bc8:	6023      	str	r3, [r4, #0]
 8016bca:	f04f 0900 	mov.w	r9, #0
 8016bce:	9700      	str	r7, [sp, #0]
 8016bd0:	4633      	mov	r3, r6
 8016bd2:	aa0b      	add	r2, sp, #44	@ 0x2c
 8016bd4:	4621      	mov	r1, r4
 8016bd6:	4628      	mov	r0, r5
 8016bd8:	f000 f9d2 	bl	8016f80 <_printf_common>
 8016bdc:	3001      	adds	r0, #1
 8016bde:	f040 808d 	bne.w	8016cfc <_printf_float+0x1d0>
 8016be2:	f04f 30ff 	mov.w	r0, #4294967295
 8016be6:	b00d      	add	sp, #52	@ 0x34
 8016be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016bec:	4642      	mov	r2, r8
 8016bee:	464b      	mov	r3, r9
 8016bf0:	4640      	mov	r0, r8
 8016bf2:	4649      	mov	r1, r9
 8016bf4:	f7ea f82a 	bl	8000c4c <__aeabi_dcmpun>
 8016bf8:	b140      	cbz	r0, 8016c0c <_printf_float+0xe0>
 8016bfa:	464b      	mov	r3, r9
 8016bfc:	2b00      	cmp	r3, #0
 8016bfe:	bfbc      	itt	lt
 8016c00:	232d      	movlt	r3, #45	@ 0x2d
 8016c02:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8016c06:	4a7e      	ldr	r2, [pc, #504]	@ (8016e00 <_printf_float+0x2d4>)
 8016c08:	4b7e      	ldr	r3, [pc, #504]	@ (8016e04 <_printf_float+0x2d8>)
 8016c0a:	e7d4      	b.n	8016bb6 <_printf_float+0x8a>
 8016c0c:	6863      	ldr	r3, [r4, #4]
 8016c0e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8016c12:	9206      	str	r2, [sp, #24]
 8016c14:	1c5a      	adds	r2, r3, #1
 8016c16:	d13b      	bne.n	8016c90 <_printf_float+0x164>
 8016c18:	2306      	movs	r3, #6
 8016c1a:	6063      	str	r3, [r4, #4]
 8016c1c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8016c20:	2300      	movs	r3, #0
 8016c22:	6022      	str	r2, [r4, #0]
 8016c24:	9303      	str	r3, [sp, #12]
 8016c26:	ab0a      	add	r3, sp, #40	@ 0x28
 8016c28:	e9cd a301 	strd	sl, r3, [sp, #4]
 8016c2c:	ab09      	add	r3, sp, #36	@ 0x24
 8016c2e:	9300      	str	r3, [sp, #0]
 8016c30:	6861      	ldr	r1, [r4, #4]
 8016c32:	ec49 8b10 	vmov	d0, r8, r9
 8016c36:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8016c3a:	4628      	mov	r0, r5
 8016c3c:	f7ff fed6 	bl	80169ec <__cvt>
 8016c40:	9b06      	ldr	r3, [sp, #24]
 8016c42:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8016c44:	2b47      	cmp	r3, #71	@ 0x47
 8016c46:	4680      	mov	r8, r0
 8016c48:	d129      	bne.n	8016c9e <_printf_float+0x172>
 8016c4a:	1cc8      	adds	r0, r1, #3
 8016c4c:	db02      	blt.n	8016c54 <_printf_float+0x128>
 8016c4e:	6863      	ldr	r3, [r4, #4]
 8016c50:	4299      	cmp	r1, r3
 8016c52:	dd41      	ble.n	8016cd8 <_printf_float+0x1ac>
 8016c54:	f1aa 0a02 	sub.w	sl, sl, #2
 8016c58:	fa5f fa8a 	uxtb.w	sl, sl
 8016c5c:	3901      	subs	r1, #1
 8016c5e:	4652      	mov	r2, sl
 8016c60:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8016c64:	9109      	str	r1, [sp, #36]	@ 0x24
 8016c66:	f7ff ff26 	bl	8016ab6 <__exponent>
 8016c6a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8016c6c:	1813      	adds	r3, r2, r0
 8016c6e:	2a01      	cmp	r2, #1
 8016c70:	4681      	mov	r9, r0
 8016c72:	6123      	str	r3, [r4, #16]
 8016c74:	dc02      	bgt.n	8016c7c <_printf_float+0x150>
 8016c76:	6822      	ldr	r2, [r4, #0]
 8016c78:	07d2      	lsls	r2, r2, #31
 8016c7a:	d501      	bpl.n	8016c80 <_printf_float+0x154>
 8016c7c:	3301      	adds	r3, #1
 8016c7e:	6123      	str	r3, [r4, #16]
 8016c80:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8016c84:	2b00      	cmp	r3, #0
 8016c86:	d0a2      	beq.n	8016bce <_printf_float+0xa2>
 8016c88:	232d      	movs	r3, #45	@ 0x2d
 8016c8a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8016c8e:	e79e      	b.n	8016bce <_printf_float+0xa2>
 8016c90:	9a06      	ldr	r2, [sp, #24]
 8016c92:	2a47      	cmp	r2, #71	@ 0x47
 8016c94:	d1c2      	bne.n	8016c1c <_printf_float+0xf0>
 8016c96:	2b00      	cmp	r3, #0
 8016c98:	d1c0      	bne.n	8016c1c <_printf_float+0xf0>
 8016c9a:	2301      	movs	r3, #1
 8016c9c:	e7bd      	b.n	8016c1a <_printf_float+0xee>
 8016c9e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8016ca2:	d9db      	bls.n	8016c5c <_printf_float+0x130>
 8016ca4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8016ca8:	d118      	bne.n	8016cdc <_printf_float+0x1b0>
 8016caa:	2900      	cmp	r1, #0
 8016cac:	6863      	ldr	r3, [r4, #4]
 8016cae:	dd0b      	ble.n	8016cc8 <_printf_float+0x19c>
 8016cb0:	6121      	str	r1, [r4, #16]
 8016cb2:	b913      	cbnz	r3, 8016cba <_printf_float+0x18e>
 8016cb4:	6822      	ldr	r2, [r4, #0]
 8016cb6:	07d0      	lsls	r0, r2, #31
 8016cb8:	d502      	bpl.n	8016cc0 <_printf_float+0x194>
 8016cba:	3301      	adds	r3, #1
 8016cbc:	440b      	add	r3, r1
 8016cbe:	6123      	str	r3, [r4, #16]
 8016cc0:	65a1      	str	r1, [r4, #88]	@ 0x58
 8016cc2:	f04f 0900 	mov.w	r9, #0
 8016cc6:	e7db      	b.n	8016c80 <_printf_float+0x154>
 8016cc8:	b913      	cbnz	r3, 8016cd0 <_printf_float+0x1a4>
 8016cca:	6822      	ldr	r2, [r4, #0]
 8016ccc:	07d2      	lsls	r2, r2, #31
 8016cce:	d501      	bpl.n	8016cd4 <_printf_float+0x1a8>
 8016cd0:	3302      	adds	r3, #2
 8016cd2:	e7f4      	b.n	8016cbe <_printf_float+0x192>
 8016cd4:	2301      	movs	r3, #1
 8016cd6:	e7f2      	b.n	8016cbe <_printf_float+0x192>
 8016cd8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8016cdc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016cde:	4299      	cmp	r1, r3
 8016ce0:	db05      	blt.n	8016cee <_printf_float+0x1c2>
 8016ce2:	6823      	ldr	r3, [r4, #0]
 8016ce4:	6121      	str	r1, [r4, #16]
 8016ce6:	07d8      	lsls	r0, r3, #31
 8016ce8:	d5ea      	bpl.n	8016cc0 <_printf_float+0x194>
 8016cea:	1c4b      	adds	r3, r1, #1
 8016cec:	e7e7      	b.n	8016cbe <_printf_float+0x192>
 8016cee:	2900      	cmp	r1, #0
 8016cf0:	bfd4      	ite	le
 8016cf2:	f1c1 0202 	rsble	r2, r1, #2
 8016cf6:	2201      	movgt	r2, #1
 8016cf8:	4413      	add	r3, r2
 8016cfa:	e7e0      	b.n	8016cbe <_printf_float+0x192>
 8016cfc:	6823      	ldr	r3, [r4, #0]
 8016cfe:	055a      	lsls	r2, r3, #21
 8016d00:	d407      	bmi.n	8016d12 <_printf_float+0x1e6>
 8016d02:	6923      	ldr	r3, [r4, #16]
 8016d04:	4642      	mov	r2, r8
 8016d06:	4631      	mov	r1, r6
 8016d08:	4628      	mov	r0, r5
 8016d0a:	47b8      	blx	r7
 8016d0c:	3001      	adds	r0, #1
 8016d0e:	d12b      	bne.n	8016d68 <_printf_float+0x23c>
 8016d10:	e767      	b.n	8016be2 <_printf_float+0xb6>
 8016d12:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8016d16:	f240 80dd 	bls.w	8016ed4 <_printf_float+0x3a8>
 8016d1a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8016d1e:	2200      	movs	r2, #0
 8016d20:	2300      	movs	r3, #0
 8016d22:	f7e9 ff61 	bl	8000be8 <__aeabi_dcmpeq>
 8016d26:	2800      	cmp	r0, #0
 8016d28:	d033      	beq.n	8016d92 <_printf_float+0x266>
 8016d2a:	4a37      	ldr	r2, [pc, #220]	@ (8016e08 <_printf_float+0x2dc>)
 8016d2c:	2301      	movs	r3, #1
 8016d2e:	4631      	mov	r1, r6
 8016d30:	4628      	mov	r0, r5
 8016d32:	47b8      	blx	r7
 8016d34:	3001      	adds	r0, #1
 8016d36:	f43f af54 	beq.w	8016be2 <_printf_float+0xb6>
 8016d3a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8016d3e:	4543      	cmp	r3, r8
 8016d40:	db02      	blt.n	8016d48 <_printf_float+0x21c>
 8016d42:	6823      	ldr	r3, [r4, #0]
 8016d44:	07d8      	lsls	r0, r3, #31
 8016d46:	d50f      	bpl.n	8016d68 <_printf_float+0x23c>
 8016d48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016d4c:	4631      	mov	r1, r6
 8016d4e:	4628      	mov	r0, r5
 8016d50:	47b8      	blx	r7
 8016d52:	3001      	adds	r0, #1
 8016d54:	f43f af45 	beq.w	8016be2 <_printf_float+0xb6>
 8016d58:	f04f 0900 	mov.w	r9, #0
 8016d5c:	f108 38ff 	add.w	r8, r8, #4294967295
 8016d60:	f104 0a1a 	add.w	sl, r4, #26
 8016d64:	45c8      	cmp	r8, r9
 8016d66:	dc09      	bgt.n	8016d7c <_printf_float+0x250>
 8016d68:	6823      	ldr	r3, [r4, #0]
 8016d6a:	079b      	lsls	r3, r3, #30
 8016d6c:	f100 8103 	bmi.w	8016f76 <_printf_float+0x44a>
 8016d70:	68e0      	ldr	r0, [r4, #12]
 8016d72:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016d74:	4298      	cmp	r0, r3
 8016d76:	bfb8      	it	lt
 8016d78:	4618      	movlt	r0, r3
 8016d7a:	e734      	b.n	8016be6 <_printf_float+0xba>
 8016d7c:	2301      	movs	r3, #1
 8016d7e:	4652      	mov	r2, sl
 8016d80:	4631      	mov	r1, r6
 8016d82:	4628      	mov	r0, r5
 8016d84:	47b8      	blx	r7
 8016d86:	3001      	adds	r0, #1
 8016d88:	f43f af2b 	beq.w	8016be2 <_printf_float+0xb6>
 8016d8c:	f109 0901 	add.w	r9, r9, #1
 8016d90:	e7e8      	b.n	8016d64 <_printf_float+0x238>
 8016d92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016d94:	2b00      	cmp	r3, #0
 8016d96:	dc39      	bgt.n	8016e0c <_printf_float+0x2e0>
 8016d98:	4a1b      	ldr	r2, [pc, #108]	@ (8016e08 <_printf_float+0x2dc>)
 8016d9a:	2301      	movs	r3, #1
 8016d9c:	4631      	mov	r1, r6
 8016d9e:	4628      	mov	r0, r5
 8016da0:	47b8      	blx	r7
 8016da2:	3001      	adds	r0, #1
 8016da4:	f43f af1d 	beq.w	8016be2 <_printf_float+0xb6>
 8016da8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8016dac:	ea59 0303 	orrs.w	r3, r9, r3
 8016db0:	d102      	bne.n	8016db8 <_printf_float+0x28c>
 8016db2:	6823      	ldr	r3, [r4, #0]
 8016db4:	07d9      	lsls	r1, r3, #31
 8016db6:	d5d7      	bpl.n	8016d68 <_printf_float+0x23c>
 8016db8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016dbc:	4631      	mov	r1, r6
 8016dbe:	4628      	mov	r0, r5
 8016dc0:	47b8      	blx	r7
 8016dc2:	3001      	adds	r0, #1
 8016dc4:	f43f af0d 	beq.w	8016be2 <_printf_float+0xb6>
 8016dc8:	f04f 0a00 	mov.w	sl, #0
 8016dcc:	f104 0b1a 	add.w	fp, r4, #26
 8016dd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016dd2:	425b      	negs	r3, r3
 8016dd4:	4553      	cmp	r3, sl
 8016dd6:	dc01      	bgt.n	8016ddc <_printf_float+0x2b0>
 8016dd8:	464b      	mov	r3, r9
 8016dda:	e793      	b.n	8016d04 <_printf_float+0x1d8>
 8016ddc:	2301      	movs	r3, #1
 8016dde:	465a      	mov	r2, fp
 8016de0:	4631      	mov	r1, r6
 8016de2:	4628      	mov	r0, r5
 8016de4:	47b8      	blx	r7
 8016de6:	3001      	adds	r0, #1
 8016de8:	f43f aefb 	beq.w	8016be2 <_printf_float+0xb6>
 8016dec:	f10a 0a01 	add.w	sl, sl, #1
 8016df0:	e7ee      	b.n	8016dd0 <_printf_float+0x2a4>
 8016df2:	bf00      	nop
 8016df4:	7fefffff 	.word	0x7fefffff
 8016df8:	080d7c10 	.word	0x080d7c10
 8016dfc:	080d7c14 	.word	0x080d7c14
 8016e00:	080d7c18 	.word	0x080d7c18
 8016e04:	080d7c1c 	.word	0x080d7c1c
 8016e08:	080d7c20 	.word	0x080d7c20
 8016e0c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8016e0e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8016e12:	4553      	cmp	r3, sl
 8016e14:	bfa8      	it	ge
 8016e16:	4653      	movge	r3, sl
 8016e18:	2b00      	cmp	r3, #0
 8016e1a:	4699      	mov	r9, r3
 8016e1c:	dc36      	bgt.n	8016e8c <_printf_float+0x360>
 8016e1e:	f04f 0b00 	mov.w	fp, #0
 8016e22:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8016e26:	f104 021a 	add.w	r2, r4, #26
 8016e2a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8016e2c:	9306      	str	r3, [sp, #24]
 8016e2e:	eba3 0309 	sub.w	r3, r3, r9
 8016e32:	455b      	cmp	r3, fp
 8016e34:	dc31      	bgt.n	8016e9a <_printf_float+0x36e>
 8016e36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016e38:	459a      	cmp	sl, r3
 8016e3a:	dc3a      	bgt.n	8016eb2 <_printf_float+0x386>
 8016e3c:	6823      	ldr	r3, [r4, #0]
 8016e3e:	07da      	lsls	r2, r3, #31
 8016e40:	d437      	bmi.n	8016eb2 <_printf_float+0x386>
 8016e42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016e44:	ebaa 0903 	sub.w	r9, sl, r3
 8016e48:	9b06      	ldr	r3, [sp, #24]
 8016e4a:	ebaa 0303 	sub.w	r3, sl, r3
 8016e4e:	4599      	cmp	r9, r3
 8016e50:	bfa8      	it	ge
 8016e52:	4699      	movge	r9, r3
 8016e54:	f1b9 0f00 	cmp.w	r9, #0
 8016e58:	dc33      	bgt.n	8016ec2 <_printf_float+0x396>
 8016e5a:	f04f 0800 	mov.w	r8, #0
 8016e5e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8016e62:	f104 0b1a 	add.w	fp, r4, #26
 8016e66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016e68:	ebaa 0303 	sub.w	r3, sl, r3
 8016e6c:	eba3 0309 	sub.w	r3, r3, r9
 8016e70:	4543      	cmp	r3, r8
 8016e72:	f77f af79 	ble.w	8016d68 <_printf_float+0x23c>
 8016e76:	2301      	movs	r3, #1
 8016e78:	465a      	mov	r2, fp
 8016e7a:	4631      	mov	r1, r6
 8016e7c:	4628      	mov	r0, r5
 8016e7e:	47b8      	blx	r7
 8016e80:	3001      	adds	r0, #1
 8016e82:	f43f aeae 	beq.w	8016be2 <_printf_float+0xb6>
 8016e86:	f108 0801 	add.w	r8, r8, #1
 8016e8a:	e7ec      	b.n	8016e66 <_printf_float+0x33a>
 8016e8c:	4642      	mov	r2, r8
 8016e8e:	4631      	mov	r1, r6
 8016e90:	4628      	mov	r0, r5
 8016e92:	47b8      	blx	r7
 8016e94:	3001      	adds	r0, #1
 8016e96:	d1c2      	bne.n	8016e1e <_printf_float+0x2f2>
 8016e98:	e6a3      	b.n	8016be2 <_printf_float+0xb6>
 8016e9a:	2301      	movs	r3, #1
 8016e9c:	4631      	mov	r1, r6
 8016e9e:	4628      	mov	r0, r5
 8016ea0:	9206      	str	r2, [sp, #24]
 8016ea2:	47b8      	blx	r7
 8016ea4:	3001      	adds	r0, #1
 8016ea6:	f43f ae9c 	beq.w	8016be2 <_printf_float+0xb6>
 8016eaa:	9a06      	ldr	r2, [sp, #24]
 8016eac:	f10b 0b01 	add.w	fp, fp, #1
 8016eb0:	e7bb      	b.n	8016e2a <_printf_float+0x2fe>
 8016eb2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016eb6:	4631      	mov	r1, r6
 8016eb8:	4628      	mov	r0, r5
 8016eba:	47b8      	blx	r7
 8016ebc:	3001      	adds	r0, #1
 8016ebe:	d1c0      	bne.n	8016e42 <_printf_float+0x316>
 8016ec0:	e68f      	b.n	8016be2 <_printf_float+0xb6>
 8016ec2:	9a06      	ldr	r2, [sp, #24]
 8016ec4:	464b      	mov	r3, r9
 8016ec6:	4442      	add	r2, r8
 8016ec8:	4631      	mov	r1, r6
 8016eca:	4628      	mov	r0, r5
 8016ecc:	47b8      	blx	r7
 8016ece:	3001      	adds	r0, #1
 8016ed0:	d1c3      	bne.n	8016e5a <_printf_float+0x32e>
 8016ed2:	e686      	b.n	8016be2 <_printf_float+0xb6>
 8016ed4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8016ed8:	f1ba 0f01 	cmp.w	sl, #1
 8016edc:	dc01      	bgt.n	8016ee2 <_printf_float+0x3b6>
 8016ede:	07db      	lsls	r3, r3, #31
 8016ee0:	d536      	bpl.n	8016f50 <_printf_float+0x424>
 8016ee2:	2301      	movs	r3, #1
 8016ee4:	4642      	mov	r2, r8
 8016ee6:	4631      	mov	r1, r6
 8016ee8:	4628      	mov	r0, r5
 8016eea:	47b8      	blx	r7
 8016eec:	3001      	adds	r0, #1
 8016eee:	f43f ae78 	beq.w	8016be2 <_printf_float+0xb6>
 8016ef2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016ef6:	4631      	mov	r1, r6
 8016ef8:	4628      	mov	r0, r5
 8016efa:	47b8      	blx	r7
 8016efc:	3001      	adds	r0, #1
 8016efe:	f43f ae70 	beq.w	8016be2 <_printf_float+0xb6>
 8016f02:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8016f06:	2200      	movs	r2, #0
 8016f08:	2300      	movs	r3, #0
 8016f0a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016f0e:	f7e9 fe6b 	bl	8000be8 <__aeabi_dcmpeq>
 8016f12:	b9c0      	cbnz	r0, 8016f46 <_printf_float+0x41a>
 8016f14:	4653      	mov	r3, sl
 8016f16:	f108 0201 	add.w	r2, r8, #1
 8016f1a:	4631      	mov	r1, r6
 8016f1c:	4628      	mov	r0, r5
 8016f1e:	47b8      	blx	r7
 8016f20:	3001      	adds	r0, #1
 8016f22:	d10c      	bne.n	8016f3e <_printf_float+0x412>
 8016f24:	e65d      	b.n	8016be2 <_printf_float+0xb6>
 8016f26:	2301      	movs	r3, #1
 8016f28:	465a      	mov	r2, fp
 8016f2a:	4631      	mov	r1, r6
 8016f2c:	4628      	mov	r0, r5
 8016f2e:	47b8      	blx	r7
 8016f30:	3001      	adds	r0, #1
 8016f32:	f43f ae56 	beq.w	8016be2 <_printf_float+0xb6>
 8016f36:	f108 0801 	add.w	r8, r8, #1
 8016f3a:	45d0      	cmp	r8, sl
 8016f3c:	dbf3      	blt.n	8016f26 <_printf_float+0x3fa>
 8016f3e:	464b      	mov	r3, r9
 8016f40:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8016f44:	e6df      	b.n	8016d06 <_printf_float+0x1da>
 8016f46:	f04f 0800 	mov.w	r8, #0
 8016f4a:	f104 0b1a 	add.w	fp, r4, #26
 8016f4e:	e7f4      	b.n	8016f3a <_printf_float+0x40e>
 8016f50:	2301      	movs	r3, #1
 8016f52:	4642      	mov	r2, r8
 8016f54:	e7e1      	b.n	8016f1a <_printf_float+0x3ee>
 8016f56:	2301      	movs	r3, #1
 8016f58:	464a      	mov	r2, r9
 8016f5a:	4631      	mov	r1, r6
 8016f5c:	4628      	mov	r0, r5
 8016f5e:	47b8      	blx	r7
 8016f60:	3001      	adds	r0, #1
 8016f62:	f43f ae3e 	beq.w	8016be2 <_printf_float+0xb6>
 8016f66:	f108 0801 	add.w	r8, r8, #1
 8016f6a:	68e3      	ldr	r3, [r4, #12]
 8016f6c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8016f6e:	1a5b      	subs	r3, r3, r1
 8016f70:	4543      	cmp	r3, r8
 8016f72:	dcf0      	bgt.n	8016f56 <_printf_float+0x42a>
 8016f74:	e6fc      	b.n	8016d70 <_printf_float+0x244>
 8016f76:	f04f 0800 	mov.w	r8, #0
 8016f7a:	f104 0919 	add.w	r9, r4, #25
 8016f7e:	e7f4      	b.n	8016f6a <_printf_float+0x43e>

08016f80 <_printf_common>:
 8016f80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016f84:	4616      	mov	r6, r2
 8016f86:	4698      	mov	r8, r3
 8016f88:	688a      	ldr	r2, [r1, #8]
 8016f8a:	690b      	ldr	r3, [r1, #16]
 8016f8c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8016f90:	4293      	cmp	r3, r2
 8016f92:	bfb8      	it	lt
 8016f94:	4613      	movlt	r3, r2
 8016f96:	6033      	str	r3, [r6, #0]
 8016f98:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8016f9c:	4607      	mov	r7, r0
 8016f9e:	460c      	mov	r4, r1
 8016fa0:	b10a      	cbz	r2, 8016fa6 <_printf_common+0x26>
 8016fa2:	3301      	adds	r3, #1
 8016fa4:	6033      	str	r3, [r6, #0]
 8016fa6:	6823      	ldr	r3, [r4, #0]
 8016fa8:	0699      	lsls	r1, r3, #26
 8016faa:	bf42      	ittt	mi
 8016fac:	6833      	ldrmi	r3, [r6, #0]
 8016fae:	3302      	addmi	r3, #2
 8016fb0:	6033      	strmi	r3, [r6, #0]
 8016fb2:	6825      	ldr	r5, [r4, #0]
 8016fb4:	f015 0506 	ands.w	r5, r5, #6
 8016fb8:	d106      	bne.n	8016fc8 <_printf_common+0x48>
 8016fba:	f104 0a19 	add.w	sl, r4, #25
 8016fbe:	68e3      	ldr	r3, [r4, #12]
 8016fc0:	6832      	ldr	r2, [r6, #0]
 8016fc2:	1a9b      	subs	r3, r3, r2
 8016fc4:	42ab      	cmp	r3, r5
 8016fc6:	dc26      	bgt.n	8017016 <_printf_common+0x96>
 8016fc8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8016fcc:	6822      	ldr	r2, [r4, #0]
 8016fce:	3b00      	subs	r3, #0
 8016fd0:	bf18      	it	ne
 8016fd2:	2301      	movne	r3, #1
 8016fd4:	0692      	lsls	r2, r2, #26
 8016fd6:	d42b      	bmi.n	8017030 <_printf_common+0xb0>
 8016fd8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8016fdc:	4641      	mov	r1, r8
 8016fde:	4638      	mov	r0, r7
 8016fe0:	47c8      	blx	r9
 8016fe2:	3001      	adds	r0, #1
 8016fe4:	d01e      	beq.n	8017024 <_printf_common+0xa4>
 8016fe6:	6823      	ldr	r3, [r4, #0]
 8016fe8:	6922      	ldr	r2, [r4, #16]
 8016fea:	f003 0306 	and.w	r3, r3, #6
 8016fee:	2b04      	cmp	r3, #4
 8016ff0:	bf02      	ittt	eq
 8016ff2:	68e5      	ldreq	r5, [r4, #12]
 8016ff4:	6833      	ldreq	r3, [r6, #0]
 8016ff6:	1aed      	subeq	r5, r5, r3
 8016ff8:	68a3      	ldr	r3, [r4, #8]
 8016ffa:	bf0c      	ite	eq
 8016ffc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017000:	2500      	movne	r5, #0
 8017002:	4293      	cmp	r3, r2
 8017004:	bfc4      	itt	gt
 8017006:	1a9b      	subgt	r3, r3, r2
 8017008:	18ed      	addgt	r5, r5, r3
 801700a:	2600      	movs	r6, #0
 801700c:	341a      	adds	r4, #26
 801700e:	42b5      	cmp	r5, r6
 8017010:	d11a      	bne.n	8017048 <_printf_common+0xc8>
 8017012:	2000      	movs	r0, #0
 8017014:	e008      	b.n	8017028 <_printf_common+0xa8>
 8017016:	2301      	movs	r3, #1
 8017018:	4652      	mov	r2, sl
 801701a:	4641      	mov	r1, r8
 801701c:	4638      	mov	r0, r7
 801701e:	47c8      	blx	r9
 8017020:	3001      	adds	r0, #1
 8017022:	d103      	bne.n	801702c <_printf_common+0xac>
 8017024:	f04f 30ff 	mov.w	r0, #4294967295
 8017028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801702c:	3501      	adds	r5, #1
 801702e:	e7c6      	b.n	8016fbe <_printf_common+0x3e>
 8017030:	18e1      	adds	r1, r4, r3
 8017032:	1c5a      	adds	r2, r3, #1
 8017034:	2030      	movs	r0, #48	@ 0x30
 8017036:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801703a:	4422      	add	r2, r4
 801703c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8017040:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8017044:	3302      	adds	r3, #2
 8017046:	e7c7      	b.n	8016fd8 <_printf_common+0x58>
 8017048:	2301      	movs	r3, #1
 801704a:	4622      	mov	r2, r4
 801704c:	4641      	mov	r1, r8
 801704e:	4638      	mov	r0, r7
 8017050:	47c8      	blx	r9
 8017052:	3001      	adds	r0, #1
 8017054:	d0e6      	beq.n	8017024 <_printf_common+0xa4>
 8017056:	3601      	adds	r6, #1
 8017058:	e7d9      	b.n	801700e <_printf_common+0x8e>
	...

0801705c <_printf_i>:
 801705c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017060:	7e0f      	ldrb	r7, [r1, #24]
 8017062:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8017064:	2f78      	cmp	r7, #120	@ 0x78
 8017066:	4691      	mov	r9, r2
 8017068:	4680      	mov	r8, r0
 801706a:	460c      	mov	r4, r1
 801706c:	469a      	mov	sl, r3
 801706e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8017072:	d807      	bhi.n	8017084 <_printf_i+0x28>
 8017074:	2f62      	cmp	r7, #98	@ 0x62
 8017076:	d80a      	bhi.n	801708e <_printf_i+0x32>
 8017078:	2f00      	cmp	r7, #0
 801707a:	f000 80d2 	beq.w	8017222 <_printf_i+0x1c6>
 801707e:	2f58      	cmp	r7, #88	@ 0x58
 8017080:	f000 80b9 	beq.w	80171f6 <_printf_i+0x19a>
 8017084:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017088:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801708c:	e03a      	b.n	8017104 <_printf_i+0xa8>
 801708e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8017092:	2b15      	cmp	r3, #21
 8017094:	d8f6      	bhi.n	8017084 <_printf_i+0x28>
 8017096:	a101      	add	r1, pc, #4	@ (adr r1, 801709c <_printf_i+0x40>)
 8017098:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801709c:	080170f5 	.word	0x080170f5
 80170a0:	08017109 	.word	0x08017109
 80170a4:	08017085 	.word	0x08017085
 80170a8:	08017085 	.word	0x08017085
 80170ac:	08017085 	.word	0x08017085
 80170b0:	08017085 	.word	0x08017085
 80170b4:	08017109 	.word	0x08017109
 80170b8:	08017085 	.word	0x08017085
 80170bc:	08017085 	.word	0x08017085
 80170c0:	08017085 	.word	0x08017085
 80170c4:	08017085 	.word	0x08017085
 80170c8:	08017209 	.word	0x08017209
 80170cc:	08017133 	.word	0x08017133
 80170d0:	080171c3 	.word	0x080171c3
 80170d4:	08017085 	.word	0x08017085
 80170d8:	08017085 	.word	0x08017085
 80170dc:	0801722b 	.word	0x0801722b
 80170e0:	08017085 	.word	0x08017085
 80170e4:	08017133 	.word	0x08017133
 80170e8:	08017085 	.word	0x08017085
 80170ec:	08017085 	.word	0x08017085
 80170f0:	080171cb 	.word	0x080171cb
 80170f4:	6833      	ldr	r3, [r6, #0]
 80170f6:	1d1a      	adds	r2, r3, #4
 80170f8:	681b      	ldr	r3, [r3, #0]
 80170fa:	6032      	str	r2, [r6, #0]
 80170fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017100:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8017104:	2301      	movs	r3, #1
 8017106:	e09d      	b.n	8017244 <_printf_i+0x1e8>
 8017108:	6833      	ldr	r3, [r6, #0]
 801710a:	6820      	ldr	r0, [r4, #0]
 801710c:	1d19      	adds	r1, r3, #4
 801710e:	6031      	str	r1, [r6, #0]
 8017110:	0606      	lsls	r6, r0, #24
 8017112:	d501      	bpl.n	8017118 <_printf_i+0xbc>
 8017114:	681d      	ldr	r5, [r3, #0]
 8017116:	e003      	b.n	8017120 <_printf_i+0xc4>
 8017118:	0645      	lsls	r5, r0, #25
 801711a:	d5fb      	bpl.n	8017114 <_printf_i+0xb8>
 801711c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8017120:	2d00      	cmp	r5, #0
 8017122:	da03      	bge.n	801712c <_printf_i+0xd0>
 8017124:	232d      	movs	r3, #45	@ 0x2d
 8017126:	426d      	negs	r5, r5
 8017128:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801712c:	4859      	ldr	r0, [pc, #356]	@ (8017294 <_printf_i+0x238>)
 801712e:	230a      	movs	r3, #10
 8017130:	e011      	b.n	8017156 <_printf_i+0xfa>
 8017132:	6821      	ldr	r1, [r4, #0]
 8017134:	6833      	ldr	r3, [r6, #0]
 8017136:	0608      	lsls	r0, r1, #24
 8017138:	f853 5b04 	ldr.w	r5, [r3], #4
 801713c:	d402      	bmi.n	8017144 <_printf_i+0xe8>
 801713e:	0649      	lsls	r1, r1, #25
 8017140:	bf48      	it	mi
 8017142:	b2ad      	uxthmi	r5, r5
 8017144:	2f6f      	cmp	r7, #111	@ 0x6f
 8017146:	4853      	ldr	r0, [pc, #332]	@ (8017294 <_printf_i+0x238>)
 8017148:	6033      	str	r3, [r6, #0]
 801714a:	bf14      	ite	ne
 801714c:	230a      	movne	r3, #10
 801714e:	2308      	moveq	r3, #8
 8017150:	2100      	movs	r1, #0
 8017152:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8017156:	6866      	ldr	r6, [r4, #4]
 8017158:	60a6      	str	r6, [r4, #8]
 801715a:	2e00      	cmp	r6, #0
 801715c:	bfa2      	ittt	ge
 801715e:	6821      	ldrge	r1, [r4, #0]
 8017160:	f021 0104 	bicge.w	r1, r1, #4
 8017164:	6021      	strge	r1, [r4, #0]
 8017166:	b90d      	cbnz	r5, 801716c <_printf_i+0x110>
 8017168:	2e00      	cmp	r6, #0
 801716a:	d04b      	beq.n	8017204 <_printf_i+0x1a8>
 801716c:	4616      	mov	r6, r2
 801716e:	fbb5 f1f3 	udiv	r1, r5, r3
 8017172:	fb03 5711 	mls	r7, r3, r1, r5
 8017176:	5dc7      	ldrb	r7, [r0, r7]
 8017178:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801717c:	462f      	mov	r7, r5
 801717e:	42bb      	cmp	r3, r7
 8017180:	460d      	mov	r5, r1
 8017182:	d9f4      	bls.n	801716e <_printf_i+0x112>
 8017184:	2b08      	cmp	r3, #8
 8017186:	d10b      	bne.n	80171a0 <_printf_i+0x144>
 8017188:	6823      	ldr	r3, [r4, #0]
 801718a:	07df      	lsls	r7, r3, #31
 801718c:	d508      	bpl.n	80171a0 <_printf_i+0x144>
 801718e:	6923      	ldr	r3, [r4, #16]
 8017190:	6861      	ldr	r1, [r4, #4]
 8017192:	4299      	cmp	r1, r3
 8017194:	bfde      	ittt	le
 8017196:	2330      	movle	r3, #48	@ 0x30
 8017198:	f806 3c01 	strble.w	r3, [r6, #-1]
 801719c:	f106 36ff 	addle.w	r6, r6, #4294967295
 80171a0:	1b92      	subs	r2, r2, r6
 80171a2:	6122      	str	r2, [r4, #16]
 80171a4:	f8cd a000 	str.w	sl, [sp]
 80171a8:	464b      	mov	r3, r9
 80171aa:	aa03      	add	r2, sp, #12
 80171ac:	4621      	mov	r1, r4
 80171ae:	4640      	mov	r0, r8
 80171b0:	f7ff fee6 	bl	8016f80 <_printf_common>
 80171b4:	3001      	adds	r0, #1
 80171b6:	d14a      	bne.n	801724e <_printf_i+0x1f2>
 80171b8:	f04f 30ff 	mov.w	r0, #4294967295
 80171bc:	b004      	add	sp, #16
 80171be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80171c2:	6823      	ldr	r3, [r4, #0]
 80171c4:	f043 0320 	orr.w	r3, r3, #32
 80171c8:	6023      	str	r3, [r4, #0]
 80171ca:	4833      	ldr	r0, [pc, #204]	@ (8017298 <_printf_i+0x23c>)
 80171cc:	2778      	movs	r7, #120	@ 0x78
 80171ce:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80171d2:	6823      	ldr	r3, [r4, #0]
 80171d4:	6831      	ldr	r1, [r6, #0]
 80171d6:	061f      	lsls	r7, r3, #24
 80171d8:	f851 5b04 	ldr.w	r5, [r1], #4
 80171dc:	d402      	bmi.n	80171e4 <_printf_i+0x188>
 80171de:	065f      	lsls	r7, r3, #25
 80171e0:	bf48      	it	mi
 80171e2:	b2ad      	uxthmi	r5, r5
 80171e4:	6031      	str	r1, [r6, #0]
 80171e6:	07d9      	lsls	r1, r3, #31
 80171e8:	bf44      	itt	mi
 80171ea:	f043 0320 	orrmi.w	r3, r3, #32
 80171ee:	6023      	strmi	r3, [r4, #0]
 80171f0:	b11d      	cbz	r5, 80171fa <_printf_i+0x19e>
 80171f2:	2310      	movs	r3, #16
 80171f4:	e7ac      	b.n	8017150 <_printf_i+0xf4>
 80171f6:	4827      	ldr	r0, [pc, #156]	@ (8017294 <_printf_i+0x238>)
 80171f8:	e7e9      	b.n	80171ce <_printf_i+0x172>
 80171fa:	6823      	ldr	r3, [r4, #0]
 80171fc:	f023 0320 	bic.w	r3, r3, #32
 8017200:	6023      	str	r3, [r4, #0]
 8017202:	e7f6      	b.n	80171f2 <_printf_i+0x196>
 8017204:	4616      	mov	r6, r2
 8017206:	e7bd      	b.n	8017184 <_printf_i+0x128>
 8017208:	6833      	ldr	r3, [r6, #0]
 801720a:	6825      	ldr	r5, [r4, #0]
 801720c:	6961      	ldr	r1, [r4, #20]
 801720e:	1d18      	adds	r0, r3, #4
 8017210:	6030      	str	r0, [r6, #0]
 8017212:	062e      	lsls	r6, r5, #24
 8017214:	681b      	ldr	r3, [r3, #0]
 8017216:	d501      	bpl.n	801721c <_printf_i+0x1c0>
 8017218:	6019      	str	r1, [r3, #0]
 801721a:	e002      	b.n	8017222 <_printf_i+0x1c6>
 801721c:	0668      	lsls	r0, r5, #25
 801721e:	d5fb      	bpl.n	8017218 <_printf_i+0x1bc>
 8017220:	8019      	strh	r1, [r3, #0]
 8017222:	2300      	movs	r3, #0
 8017224:	6123      	str	r3, [r4, #16]
 8017226:	4616      	mov	r6, r2
 8017228:	e7bc      	b.n	80171a4 <_printf_i+0x148>
 801722a:	6833      	ldr	r3, [r6, #0]
 801722c:	1d1a      	adds	r2, r3, #4
 801722e:	6032      	str	r2, [r6, #0]
 8017230:	681e      	ldr	r6, [r3, #0]
 8017232:	6862      	ldr	r2, [r4, #4]
 8017234:	2100      	movs	r1, #0
 8017236:	4630      	mov	r0, r6
 8017238:	f7e9 f85a 	bl	80002f0 <memchr>
 801723c:	b108      	cbz	r0, 8017242 <_printf_i+0x1e6>
 801723e:	1b80      	subs	r0, r0, r6
 8017240:	6060      	str	r0, [r4, #4]
 8017242:	6863      	ldr	r3, [r4, #4]
 8017244:	6123      	str	r3, [r4, #16]
 8017246:	2300      	movs	r3, #0
 8017248:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801724c:	e7aa      	b.n	80171a4 <_printf_i+0x148>
 801724e:	6923      	ldr	r3, [r4, #16]
 8017250:	4632      	mov	r2, r6
 8017252:	4649      	mov	r1, r9
 8017254:	4640      	mov	r0, r8
 8017256:	47d0      	blx	sl
 8017258:	3001      	adds	r0, #1
 801725a:	d0ad      	beq.n	80171b8 <_printf_i+0x15c>
 801725c:	6823      	ldr	r3, [r4, #0]
 801725e:	079b      	lsls	r3, r3, #30
 8017260:	d413      	bmi.n	801728a <_printf_i+0x22e>
 8017262:	68e0      	ldr	r0, [r4, #12]
 8017264:	9b03      	ldr	r3, [sp, #12]
 8017266:	4298      	cmp	r0, r3
 8017268:	bfb8      	it	lt
 801726a:	4618      	movlt	r0, r3
 801726c:	e7a6      	b.n	80171bc <_printf_i+0x160>
 801726e:	2301      	movs	r3, #1
 8017270:	4632      	mov	r2, r6
 8017272:	4649      	mov	r1, r9
 8017274:	4640      	mov	r0, r8
 8017276:	47d0      	blx	sl
 8017278:	3001      	adds	r0, #1
 801727a:	d09d      	beq.n	80171b8 <_printf_i+0x15c>
 801727c:	3501      	adds	r5, #1
 801727e:	68e3      	ldr	r3, [r4, #12]
 8017280:	9903      	ldr	r1, [sp, #12]
 8017282:	1a5b      	subs	r3, r3, r1
 8017284:	42ab      	cmp	r3, r5
 8017286:	dcf2      	bgt.n	801726e <_printf_i+0x212>
 8017288:	e7eb      	b.n	8017262 <_printf_i+0x206>
 801728a:	2500      	movs	r5, #0
 801728c:	f104 0619 	add.w	r6, r4, #25
 8017290:	e7f5      	b.n	801727e <_printf_i+0x222>
 8017292:	bf00      	nop
 8017294:	080d7c22 	.word	0x080d7c22
 8017298:	080d7c33 	.word	0x080d7c33

0801729c <std>:
 801729c:	2300      	movs	r3, #0
 801729e:	b510      	push	{r4, lr}
 80172a0:	4604      	mov	r4, r0
 80172a2:	e9c0 3300 	strd	r3, r3, [r0]
 80172a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80172aa:	6083      	str	r3, [r0, #8]
 80172ac:	8181      	strh	r1, [r0, #12]
 80172ae:	6643      	str	r3, [r0, #100]	@ 0x64
 80172b0:	81c2      	strh	r2, [r0, #14]
 80172b2:	6183      	str	r3, [r0, #24]
 80172b4:	4619      	mov	r1, r3
 80172b6:	2208      	movs	r2, #8
 80172b8:	305c      	adds	r0, #92	@ 0x5c
 80172ba:	f000 fa19 	bl	80176f0 <memset>
 80172be:	4b0d      	ldr	r3, [pc, #52]	@ (80172f4 <std+0x58>)
 80172c0:	6263      	str	r3, [r4, #36]	@ 0x24
 80172c2:	4b0d      	ldr	r3, [pc, #52]	@ (80172f8 <std+0x5c>)
 80172c4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80172c6:	4b0d      	ldr	r3, [pc, #52]	@ (80172fc <std+0x60>)
 80172c8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80172ca:	4b0d      	ldr	r3, [pc, #52]	@ (8017300 <std+0x64>)
 80172cc:	6323      	str	r3, [r4, #48]	@ 0x30
 80172ce:	4b0d      	ldr	r3, [pc, #52]	@ (8017304 <std+0x68>)
 80172d0:	6224      	str	r4, [r4, #32]
 80172d2:	429c      	cmp	r4, r3
 80172d4:	d006      	beq.n	80172e4 <std+0x48>
 80172d6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80172da:	4294      	cmp	r4, r2
 80172dc:	d002      	beq.n	80172e4 <std+0x48>
 80172de:	33d0      	adds	r3, #208	@ 0xd0
 80172e0:	429c      	cmp	r4, r3
 80172e2:	d105      	bne.n	80172f0 <std+0x54>
 80172e4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80172e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80172ec:	f000 ba8c 	b.w	8017808 <__retarget_lock_init_recursive>
 80172f0:	bd10      	pop	{r4, pc}
 80172f2:	bf00      	nop
 80172f4:	08017541 	.word	0x08017541
 80172f8:	08017563 	.word	0x08017563
 80172fc:	0801759b 	.word	0x0801759b
 8017300:	080175bf 	.word	0x080175bf
 8017304:	20036028 	.word	0x20036028

08017308 <stdio_exit_handler>:
 8017308:	4a02      	ldr	r2, [pc, #8]	@ (8017314 <stdio_exit_handler+0xc>)
 801730a:	4903      	ldr	r1, [pc, #12]	@ (8017318 <stdio_exit_handler+0x10>)
 801730c:	4803      	ldr	r0, [pc, #12]	@ (801731c <stdio_exit_handler+0x14>)
 801730e:	f000 b869 	b.w	80173e4 <_fwalk_sglue>
 8017312:	bf00      	nop
 8017314:	200008c0 	.word	0x200008c0
 8017318:	080192ad 	.word	0x080192ad
 801731c:	200008d0 	.word	0x200008d0

08017320 <cleanup_stdio>:
 8017320:	6841      	ldr	r1, [r0, #4]
 8017322:	4b0c      	ldr	r3, [pc, #48]	@ (8017354 <cleanup_stdio+0x34>)
 8017324:	4299      	cmp	r1, r3
 8017326:	b510      	push	{r4, lr}
 8017328:	4604      	mov	r4, r0
 801732a:	d001      	beq.n	8017330 <cleanup_stdio+0x10>
 801732c:	f001 ffbe 	bl	80192ac <_fflush_r>
 8017330:	68a1      	ldr	r1, [r4, #8]
 8017332:	4b09      	ldr	r3, [pc, #36]	@ (8017358 <cleanup_stdio+0x38>)
 8017334:	4299      	cmp	r1, r3
 8017336:	d002      	beq.n	801733e <cleanup_stdio+0x1e>
 8017338:	4620      	mov	r0, r4
 801733a:	f001 ffb7 	bl	80192ac <_fflush_r>
 801733e:	68e1      	ldr	r1, [r4, #12]
 8017340:	4b06      	ldr	r3, [pc, #24]	@ (801735c <cleanup_stdio+0x3c>)
 8017342:	4299      	cmp	r1, r3
 8017344:	d004      	beq.n	8017350 <cleanup_stdio+0x30>
 8017346:	4620      	mov	r0, r4
 8017348:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801734c:	f001 bfae 	b.w	80192ac <_fflush_r>
 8017350:	bd10      	pop	{r4, pc}
 8017352:	bf00      	nop
 8017354:	20036028 	.word	0x20036028
 8017358:	20036090 	.word	0x20036090
 801735c:	200360f8 	.word	0x200360f8

08017360 <global_stdio_init.part.0>:
 8017360:	b510      	push	{r4, lr}
 8017362:	4b0b      	ldr	r3, [pc, #44]	@ (8017390 <global_stdio_init.part.0+0x30>)
 8017364:	4c0b      	ldr	r4, [pc, #44]	@ (8017394 <global_stdio_init.part.0+0x34>)
 8017366:	4a0c      	ldr	r2, [pc, #48]	@ (8017398 <global_stdio_init.part.0+0x38>)
 8017368:	601a      	str	r2, [r3, #0]
 801736a:	4620      	mov	r0, r4
 801736c:	2200      	movs	r2, #0
 801736e:	2104      	movs	r1, #4
 8017370:	f7ff ff94 	bl	801729c <std>
 8017374:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8017378:	2201      	movs	r2, #1
 801737a:	2109      	movs	r1, #9
 801737c:	f7ff ff8e 	bl	801729c <std>
 8017380:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8017384:	2202      	movs	r2, #2
 8017386:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801738a:	2112      	movs	r1, #18
 801738c:	f7ff bf86 	b.w	801729c <std>
 8017390:	20036160 	.word	0x20036160
 8017394:	20036028 	.word	0x20036028
 8017398:	08017309 	.word	0x08017309

0801739c <__sfp_lock_acquire>:
 801739c:	4801      	ldr	r0, [pc, #4]	@ (80173a4 <__sfp_lock_acquire+0x8>)
 801739e:	f000 ba34 	b.w	801780a <__retarget_lock_acquire_recursive>
 80173a2:	bf00      	nop
 80173a4:	20036169 	.word	0x20036169

080173a8 <__sfp_lock_release>:
 80173a8:	4801      	ldr	r0, [pc, #4]	@ (80173b0 <__sfp_lock_release+0x8>)
 80173aa:	f000 ba2f 	b.w	801780c <__retarget_lock_release_recursive>
 80173ae:	bf00      	nop
 80173b0:	20036169 	.word	0x20036169

080173b4 <__sinit>:
 80173b4:	b510      	push	{r4, lr}
 80173b6:	4604      	mov	r4, r0
 80173b8:	f7ff fff0 	bl	801739c <__sfp_lock_acquire>
 80173bc:	6a23      	ldr	r3, [r4, #32]
 80173be:	b11b      	cbz	r3, 80173c8 <__sinit+0x14>
 80173c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80173c4:	f7ff bff0 	b.w	80173a8 <__sfp_lock_release>
 80173c8:	4b04      	ldr	r3, [pc, #16]	@ (80173dc <__sinit+0x28>)
 80173ca:	6223      	str	r3, [r4, #32]
 80173cc:	4b04      	ldr	r3, [pc, #16]	@ (80173e0 <__sinit+0x2c>)
 80173ce:	681b      	ldr	r3, [r3, #0]
 80173d0:	2b00      	cmp	r3, #0
 80173d2:	d1f5      	bne.n	80173c0 <__sinit+0xc>
 80173d4:	f7ff ffc4 	bl	8017360 <global_stdio_init.part.0>
 80173d8:	e7f2      	b.n	80173c0 <__sinit+0xc>
 80173da:	bf00      	nop
 80173dc:	08017321 	.word	0x08017321
 80173e0:	20036160 	.word	0x20036160

080173e4 <_fwalk_sglue>:
 80173e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80173e8:	4607      	mov	r7, r0
 80173ea:	4688      	mov	r8, r1
 80173ec:	4614      	mov	r4, r2
 80173ee:	2600      	movs	r6, #0
 80173f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80173f4:	f1b9 0901 	subs.w	r9, r9, #1
 80173f8:	d505      	bpl.n	8017406 <_fwalk_sglue+0x22>
 80173fa:	6824      	ldr	r4, [r4, #0]
 80173fc:	2c00      	cmp	r4, #0
 80173fe:	d1f7      	bne.n	80173f0 <_fwalk_sglue+0xc>
 8017400:	4630      	mov	r0, r6
 8017402:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017406:	89ab      	ldrh	r3, [r5, #12]
 8017408:	2b01      	cmp	r3, #1
 801740a:	d907      	bls.n	801741c <_fwalk_sglue+0x38>
 801740c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017410:	3301      	adds	r3, #1
 8017412:	d003      	beq.n	801741c <_fwalk_sglue+0x38>
 8017414:	4629      	mov	r1, r5
 8017416:	4638      	mov	r0, r7
 8017418:	47c0      	blx	r8
 801741a:	4306      	orrs	r6, r0
 801741c:	3568      	adds	r5, #104	@ 0x68
 801741e:	e7e9      	b.n	80173f4 <_fwalk_sglue+0x10>

08017420 <iprintf>:
 8017420:	b40f      	push	{r0, r1, r2, r3}
 8017422:	b507      	push	{r0, r1, r2, lr}
 8017424:	4906      	ldr	r1, [pc, #24]	@ (8017440 <iprintf+0x20>)
 8017426:	ab04      	add	r3, sp, #16
 8017428:	6808      	ldr	r0, [r1, #0]
 801742a:	f853 2b04 	ldr.w	r2, [r3], #4
 801742e:	6881      	ldr	r1, [r0, #8]
 8017430:	9301      	str	r3, [sp, #4]
 8017432:	f001 fd9f 	bl	8018f74 <_vfiprintf_r>
 8017436:	b003      	add	sp, #12
 8017438:	f85d eb04 	ldr.w	lr, [sp], #4
 801743c:	b004      	add	sp, #16
 801743e:	4770      	bx	lr
 8017440:	200008cc 	.word	0x200008cc

08017444 <_puts_r>:
 8017444:	6a03      	ldr	r3, [r0, #32]
 8017446:	b570      	push	{r4, r5, r6, lr}
 8017448:	6884      	ldr	r4, [r0, #8]
 801744a:	4605      	mov	r5, r0
 801744c:	460e      	mov	r6, r1
 801744e:	b90b      	cbnz	r3, 8017454 <_puts_r+0x10>
 8017450:	f7ff ffb0 	bl	80173b4 <__sinit>
 8017454:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017456:	07db      	lsls	r3, r3, #31
 8017458:	d405      	bmi.n	8017466 <_puts_r+0x22>
 801745a:	89a3      	ldrh	r3, [r4, #12]
 801745c:	0598      	lsls	r0, r3, #22
 801745e:	d402      	bmi.n	8017466 <_puts_r+0x22>
 8017460:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017462:	f000 f9d2 	bl	801780a <__retarget_lock_acquire_recursive>
 8017466:	89a3      	ldrh	r3, [r4, #12]
 8017468:	0719      	lsls	r1, r3, #28
 801746a:	d502      	bpl.n	8017472 <_puts_r+0x2e>
 801746c:	6923      	ldr	r3, [r4, #16]
 801746e:	2b00      	cmp	r3, #0
 8017470:	d135      	bne.n	80174de <_puts_r+0x9a>
 8017472:	4621      	mov	r1, r4
 8017474:	4628      	mov	r0, r5
 8017476:	f000 f8e5 	bl	8017644 <__swsetup_r>
 801747a:	b380      	cbz	r0, 80174de <_puts_r+0x9a>
 801747c:	f04f 35ff 	mov.w	r5, #4294967295
 8017480:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017482:	07da      	lsls	r2, r3, #31
 8017484:	d405      	bmi.n	8017492 <_puts_r+0x4e>
 8017486:	89a3      	ldrh	r3, [r4, #12]
 8017488:	059b      	lsls	r3, r3, #22
 801748a:	d402      	bmi.n	8017492 <_puts_r+0x4e>
 801748c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801748e:	f000 f9bd 	bl	801780c <__retarget_lock_release_recursive>
 8017492:	4628      	mov	r0, r5
 8017494:	bd70      	pop	{r4, r5, r6, pc}
 8017496:	2b00      	cmp	r3, #0
 8017498:	da04      	bge.n	80174a4 <_puts_r+0x60>
 801749a:	69a2      	ldr	r2, [r4, #24]
 801749c:	429a      	cmp	r2, r3
 801749e:	dc17      	bgt.n	80174d0 <_puts_r+0x8c>
 80174a0:	290a      	cmp	r1, #10
 80174a2:	d015      	beq.n	80174d0 <_puts_r+0x8c>
 80174a4:	6823      	ldr	r3, [r4, #0]
 80174a6:	1c5a      	adds	r2, r3, #1
 80174a8:	6022      	str	r2, [r4, #0]
 80174aa:	7019      	strb	r1, [r3, #0]
 80174ac:	68a3      	ldr	r3, [r4, #8]
 80174ae:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80174b2:	3b01      	subs	r3, #1
 80174b4:	60a3      	str	r3, [r4, #8]
 80174b6:	2900      	cmp	r1, #0
 80174b8:	d1ed      	bne.n	8017496 <_puts_r+0x52>
 80174ba:	2b00      	cmp	r3, #0
 80174bc:	da11      	bge.n	80174e2 <_puts_r+0x9e>
 80174be:	4622      	mov	r2, r4
 80174c0:	210a      	movs	r1, #10
 80174c2:	4628      	mov	r0, r5
 80174c4:	f000 f87f 	bl	80175c6 <__swbuf_r>
 80174c8:	3001      	adds	r0, #1
 80174ca:	d0d7      	beq.n	801747c <_puts_r+0x38>
 80174cc:	250a      	movs	r5, #10
 80174ce:	e7d7      	b.n	8017480 <_puts_r+0x3c>
 80174d0:	4622      	mov	r2, r4
 80174d2:	4628      	mov	r0, r5
 80174d4:	f000 f877 	bl	80175c6 <__swbuf_r>
 80174d8:	3001      	adds	r0, #1
 80174da:	d1e7      	bne.n	80174ac <_puts_r+0x68>
 80174dc:	e7ce      	b.n	801747c <_puts_r+0x38>
 80174de:	3e01      	subs	r6, #1
 80174e0:	e7e4      	b.n	80174ac <_puts_r+0x68>
 80174e2:	6823      	ldr	r3, [r4, #0]
 80174e4:	1c5a      	adds	r2, r3, #1
 80174e6:	6022      	str	r2, [r4, #0]
 80174e8:	220a      	movs	r2, #10
 80174ea:	701a      	strb	r2, [r3, #0]
 80174ec:	e7ee      	b.n	80174cc <_puts_r+0x88>
	...

080174f0 <puts>:
 80174f0:	4b02      	ldr	r3, [pc, #8]	@ (80174fc <puts+0xc>)
 80174f2:	4601      	mov	r1, r0
 80174f4:	6818      	ldr	r0, [r3, #0]
 80174f6:	f7ff bfa5 	b.w	8017444 <_puts_r>
 80174fa:	bf00      	nop
 80174fc:	200008cc 	.word	0x200008cc

08017500 <siprintf>:
 8017500:	b40e      	push	{r1, r2, r3}
 8017502:	b500      	push	{lr}
 8017504:	b09c      	sub	sp, #112	@ 0x70
 8017506:	ab1d      	add	r3, sp, #116	@ 0x74
 8017508:	9002      	str	r0, [sp, #8]
 801750a:	9006      	str	r0, [sp, #24]
 801750c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8017510:	4809      	ldr	r0, [pc, #36]	@ (8017538 <siprintf+0x38>)
 8017512:	9107      	str	r1, [sp, #28]
 8017514:	9104      	str	r1, [sp, #16]
 8017516:	4909      	ldr	r1, [pc, #36]	@ (801753c <siprintf+0x3c>)
 8017518:	f853 2b04 	ldr.w	r2, [r3], #4
 801751c:	9105      	str	r1, [sp, #20]
 801751e:	6800      	ldr	r0, [r0, #0]
 8017520:	9301      	str	r3, [sp, #4]
 8017522:	a902      	add	r1, sp, #8
 8017524:	f001 fc00 	bl	8018d28 <_svfiprintf_r>
 8017528:	9b02      	ldr	r3, [sp, #8]
 801752a:	2200      	movs	r2, #0
 801752c:	701a      	strb	r2, [r3, #0]
 801752e:	b01c      	add	sp, #112	@ 0x70
 8017530:	f85d eb04 	ldr.w	lr, [sp], #4
 8017534:	b003      	add	sp, #12
 8017536:	4770      	bx	lr
 8017538:	200008cc 	.word	0x200008cc
 801753c:	ffff0208 	.word	0xffff0208

08017540 <__sread>:
 8017540:	b510      	push	{r4, lr}
 8017542:	460c      	mov	r4, r1
 8017544:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017548:	f000 f900 	bl	801774c <_read_r>
 801754c:	2800      	cmp	r0, #0
 801754e:	bfab      	itete	ge
 8017550:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8017552:	89a3      	ldrhlt	r3, [r4, #12]
 8017554:	181b      	addge	r3, r3, r0
 8017556:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801755a:	bfac      	ite	ge
 801755c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801755e:	81a3      	strhlt	r3, [r4, #12]
 8017560:	bd10      	pop	{r4, pc}

08017562 <__swrite>:
 8017562:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017566:	461f      	mov	r7, r3
 8017568:	898b      	ldrh	r3, [r1, #12]
 801756a:	05db      	lsls	r3, r3, #23
 801756c:	4605      	mov	r5, r0
 801756e:	460c      	mov	r4, r1
 8017570:	4616      	mov	r6, r2
 8017572:	d505      	bpl.n	8017580 <__swrite+0x1e>
 8017574:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017578:	2302      	movs	r3, #2
 801757a:	2200      	movs	r2, #0
 801757c:	f000 f8d4 	bl	8017728 <_lseek_r>
 8017580:	89a3      	ldrh	r3, [r4, #12]
 8017582:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017586:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801758a:	81a3      	strh	r3, [r4, #12]
 801758c:	4632      	mov	r2, r6
 801758e:	463b      	mov	r3, r7
 8017590:	4628      	mov	r0, r5
 8017592:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017596:	f000 b8fb 	b.w	8017790 <_write_r>

0801759a <__sseek>:
 801759a:	b510      	push	{r4, lr}
 801759c:	460c      	mov	r4, r1
 801759e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80175a2:	f000 f8c1 	bl	8017728 <_lseek_r>
 80175a6:	1c43      	adds	r3, r0, #1
 80175a8:	89a3      	ldrh	r3, [r4, #12]
 80175aa:	bf15      	itete	ne
 80175ac:	6560      	strne	r0, [r4, #84]	@ 0x54
 80175ae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80175b2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80175b6:	81a3      	strheq	r3, [r4, #12]
 80175b8:	bf18      	it	ne
 80175ba:	81a3      	strhne	r3, [r4, #12]
 80175bc:	bd10      	pop	{r4, pc}

080175be <__sclose>:
 80175be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80175c2:	f000 b8a1 	b.w	8017708 <_close_r>

080175c6 <__swbuf_r>:
 80175c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80175c8:	460e      	mov	r6, r1
 80175ca:	4614      	mov	r4, r2
 80175cc:	4605      	mov	r5, r0
 80175ce:	b118      	cbz	r0, 80175d8 <__swbuf_r+0x12>
 80175d0:	6a03      	ldr	r3, [r0, #32]
 80175d2:	b90b      	cbnz	r3, 80175d8 <__swbuf_r+0x12>
 80175d4:	f7ff feee 	bl	80173b4 <__sinit>
 80175d8:	69a3      	ldr	r3, [r4, #24]
 80175da:	60a3      	str	r3, [r4, #8]
 80175dc:	89a3      	ldrh	r3, [r4, #12]
 80175de:	071a      	lsls	r2, r3, #28
 80175e0:	d501      	bpl.n	80175e6 <__swbuf_r+0x20>
 80175e2:	6923      	ldr	r3, [r4, #16]
 80175e4:	b943      	cbnz	r3, 80175f8 <__swbuf_r+0x32>
 80175e6:	4621      	mov	r1, r4
 80175e8:	4628      	mov	r0, r5
 80175ea:	f000 f82b 	bl	8017644 <__swsetup_r>
 80175ee:	b118      	cbz	r0, 80175f8 <__swbuf_r+0x32>
 80175f0:	f04f 37ff 	mov.w	r7, #4294967295
 80175f4:	4638      	mov	r0, r7
 80175f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80175f8:	6823      	ldr	r3, [r4, #0]
 80175fa:	6922      	ldr	r2, [r4, #16]
 80175fc:	1a98      	subs	r0, r3, r2
 80175fe:	6963      	ldr	r3, [r4, #20]
 8017600:	b2f6      	uxtb	r6, r6
 8017602:	4283      	cmp	r3, r0
 8017604:	4637      	mov	r7, r6
 8017606:	dc05      	bgt.n	8017614 <__swbuf_r+0x4e>
 8017608:	4621      	mov	r1, r4
 801760a:	4628      	mov	r0, r5
 801760c:	f001 fe4e 	bl	80192ac <_fflush_r>
 8017610:	2800      	cmp	r0, #0
 8017612:	d1ed      	bne.n	80175f0 <__swbuf_r+0x2a>
 8017614:	68a3      	ldr	r3, [r4, #8]
 8017616:	3b01      	subs	r3, #1
 8017618:	60a3      	str	r3, [r4, #8]
 801761a:	6823      	ldr	r3, [r4, #0]
 801761c:	1c5a      	adds	r2, r3, #1
 801761e:	6022      	str	r2, [r4, #0]
 8017620:	701e      	strb	r6, [r3, #0]
 8017622:	6962      	ldr	r2, [r4, #20]
 8017624:	1c43      	adds	r3, r0, #1
 8017626:	429a      	cmp	r2, r3
 8017628:	d004      	beq.n	8017634 <__swbuf_r+0x6e>
 801762a:	89a3      	ldrh	r3, [r4, #12]
 801762c:	07db      	lsls	r3, r3, #31
 801762e:	d5e1      	bpl.n	80175f4 <__swbuf_r+0x2e>
 8017630:	2e0a      	cmp	r6, #10
 8017632:	d1df      	bne.n	80175f4 <__swbuf_r+0x2e>
 8017634:	4621      	mov	r1, r4
 8017636:	4628      	mov	r0, r5
 8017638:	f001 fe38 	bl	80192ac <_fflush_r>
 801763c:	2800      	cmp	r0, #0
 801763e:	d0d9      	beq.n	80175f4 <__swbuf_r+0x2e>
 8017640:	e7d6      	b.n	80175f0 <__swbuf_r+0x2a>
	...

08017644 <__swsetup_r>:
 8017644:	b538      	push	{r3, r4, r5, lr}
 8017646:	4b29      	ldr	r3, [pc, #164]	@ (80176ec <__swsetup_r+0xa8>)
 8017648:	4605      	mov	r5, r0
 801764a:	6818      	ldr	r0, [r3, #0]
 801764c:	460c      	mov	r4, r1
 801764e:	b118      	cbz	r0, 8017658 <__swsetup_r+0x14>
 8017650:	6a03      	ldr	r3, [r0, #32]
 8017652:	b90b      	cbnz	r3, 8017658 <__swsetup_r+0x14>
 8017654:	f7ff feae 	bl	80173b4 <__sinit>
 8017658:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801765c:	0719      	lsls	r1, r3, #28
 801765e:	d422      	bmi.n	80176a6 <__swsetup_r+0x62>
 8017660:	06da      	lsls	r2, r3, #27
 8017662:	d407      	bmi.n	8017674 <__swsetup_r+0x30>
 8017664:	2209      	movs	r2, #9
 8017666:	602a      	str	r2, [r5, #0]
 8017668:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801766c:	81a3      	strh	r3, [r4, #12]
 801766e:	f04f 30ff 	mov.w	r0, #4294967295
 8017672:	e033      	b.n	80176dc <__swsetup_r+0x98>
 8017674:	0758      	lsls	r0, r3, #29
 8017676:	d512      	bpl.n	801769e <__swsetup_r+0x5a>
 8017678:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801767a:	b141      	cbz	r1, 801768e <__swsetup_r+0x4a>
 801767c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017680:	4299      	cmp	r1, r3
 8017682:	d002      	beq.n	801768a <__swsetup_r+0x46>
 8017684:	4628      	mov	r0, r5
 8017686:	f000 ff1f 	bl	80184c8 <_free_r>
 801768a:	2300      	movs	r3, #0
 801768c:	6363      	str	r3, [r4, #52]	@ 0x34
 801768e:	89a3      	ldrh	r3, [r4, #12]
 8017690:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8017694:	81a3      	strh	r3, [r4, #12]
 8017696:	2300      	movs	r3, #0
 8017698:	6063      	str	r3, [r4, #4]
 801769a:	6923      	ldr	r3, [r4, #16]
 801769c:	6023      	str	r3, [r4, #0]
 801769e:	89a3      	ldrh	r3, [r4, #12]
 80176a0:	f043 0308 	orr.w	r3, r3, #8
 80176a4:	81a3      	strh	r3, [r4, #12]
 80176a6:	6923      	ldr	r3, [r4, #16]
 80176a8:	b94b      	cbnz	r3, 80176be <__swsetup_r+0x7a>
 80176aa:	89a3      	ldrh	r3, [r4, #12]
 80176ac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80176b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80176b4:	d003      	beq.n	80176be <__swsetup_r+0x7a>
 80176b6:	4621      	mov	r1, r4
 80176b8:	4628      	mov	r0, r5
 80176ba:	f001 fe45 	bl	8019348 <__smakebuf_r>
 80176be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80176c2:	f013 0201 	ands.w	r2, r3, #1
 80176c6:	d00a      	beq.n	80176de <__swsetup_r+0x9a>
 80176c8:	2200      	movs	r2, #0
 80176ca:	60a2      	str	r2, [r4, #8]
 80176cc:	6962      	ldr	r2, [r4, #20]
 80176ce:	4252      	negs	r2, r2
 80176d0:	61a2      	str	r2, [r4, #24]
 80176d2:	6922      	ldr	r2, [r4, #16]
 80176d4:	b942      	cbnz	r2, 80176e8 <__swsetup_r+0xa4>
 80176d6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80176da:	d1c5      	bne.n	8017668 <__swsetup_r+0x24>
 80176dc:	bd38      	pop	{r3, r4, r5, pc}
 80176de:	0799      	lsls	r1, r3, #30
 80176e0:	bf58      	it	pl
 80176e2:	6962      	ldrpl	r2, [r4, #20]
 80176e4:	60a2      	str	r2, [r4, #8]
 80176e6:	e7f4      	b.n	80176d2 <__swsetup_r+0x8e>
 80176e8:	2000      	movs	r0, #0
 80176ea:	e7f7      	b.n	80176dc <__swsetup_r+0x98>
 80176ec:	200008cc 	.word	0x200008cc

080176f0 <memset>:
 80176f0:	4402      	add	r2, r0
 80176f2:	4603      	mov	r3, r0
 80176f4:	4293      	cmp	r3, r2
 80176f6:	d100      	bne.n	80176fa <memset+0xa>
 80176f8:	4770      	bx	lr
 80176fa:	f803 1b01 	strb.w	r1, [r3], #1
 80176fe:	e7f9      	b.n	80176f4 <memset+0x4>

08017700 <_localeconv_r>:
 8017700:	4800      	ldr	r0, [pc, #0]	@ (8017704 <_localeconv_r+0x4>)
 8017702:	4770      	bx	lr
 8017704:	20000a0c 	.word	0x20000a0c

08017708 <_close_r>:
 8017708:	b538      	push	{r3, r4, r5, lr}
 801770a:	4d06      	ldr	r5, [pc, #24]	@ (8017724 <_close_r+0x1c>)
 801770c:	2300      	movs	r3, #0
 801770e:	4604      	mov	r4, r0
 8017710:	4608      	mov	r0, r1
 8017712:	602b      	str	r3, [r5, #0]
 8017714:	f7eb fb1c 	bl	8002d50 <_close>
 8017718:	1c43      	adds	r3, r0, #1
 801771a:	d102      	bne.n	8017722 <_close_r+0x1a>
 801771c:	682b      	ldr	r3, [r5, #0]
 801771e:	b103      	cbz	r3, 8017722 <_close_r+0x1a>
 8017720:	6023      	str	r3, [r4, #0]
 8017722:	bd38      	pop	{r3, r4, r5, pc}
 8017724:	20036164 	.word	0x20036164

08017728 <_lseek_r>:
 8017728:	b538      	push	{r3, r4, r5, lr}
 801772a:	4d07      	ldr	r5, [pc, #28]	@ (8017748 <_lseek_r+0x20>)
 801772c:	4604      	mov	r4, r0
 801772e:	4608      	mov	r0, r1
 8017730:	4611      	mov	r1, r2
 8017732:	2200      	movs	r2, #0
 8017734:	602a      	str	r2, [r5, #0]
 8017736:	461a      	mov	r2, r3
 8017738:	f7eb fb31 	bl	8002d9e <_lseek>
 801773c:	1c43      	adds	r3, r0, #1
 801773e:	d102      	bne.n	8017746 <_lseek_r+0x1e>
 8017740:	682b      	ldr	r3, [r5, #0]
 8017742:	b103      	cbz	r3, 8017746 <_lseek_r+0x1e>
 8017744:	6023      	str	r3, [r4, #0]
 8017746:	bd38      	pop	{r3, r4, r5, pc}
 8017748:	20036164 	.word	0x20036164

0801774c <_read_r>:
 801774c:	b538      	push	{r3, r4, r5, lr}
 801774e:	4d07      	ldr	r5, [pc, #28]	@ (801776c <_read_r+0x20>)
 8017750:	4604      	mov	r4, r0
 8017752:	4608      	mov	r0, r1
 8017754:	4611      	mov	r1, r2
 8017756:	2200      	movs	r2, #0
 8017758:	602a      	str	r2, [r5, #0]
 801775a:	461a      	mov	r2, r3
 801775c:	f7eb fabf 	bl	8002cde <_read>
 8017760:	1c43      	adds	r3, r0, #1
 8017762:	d102      	bne.n	801776a <_read_r+0x1e>
 8017764:	682b      	ldr	r3, [r5, #0]
 8017766:	b103      	cbz	r3, 801776a <_read_r+0x1e>
 8017768:	6023      	str	r3, [r4, #0]
 801776a:	bd38      	pop	{r3, r4, r5, pc}
 801776c:	20036164 	.word	0x20036164

08017770 <_sbrk_r>:
 8017770:	b538      	push	{r3, r4, r5, lr}
 8017772:	4d06      	ldr	r5, [pc, #24]	@ (801778c <_sbrk_r+0x1c>)
 8017774:	2300      	movs	r3, #0
 8017776:	4604      	mov	r4, r0
 8017778:	4608      	mov	r0, r1
 801777a:	602b      	str	r3, [r5, #0]
 801777c:	f7eb fb1c 	bl	8002db8 <_sbrk>
 8017780:	1c43      	adds	r3, r0, #1
 8017782:	d102      	bne.n	801778a <_sbrk_r+0x1a>
 8017784:	682b      	ldr	r3, [r5, #0]
 8017786:	b103      	cbz	r3, 801778a <_sbrk_r+0x1a>
 8017788:	6023      	str	r3, [r4, #0]
 801778a:	bd38      	pop	{r3, r4, r5, pc}
 801778c:	20036164 	.word	0x20036164

08017790 <_write_r>:
 8017790:	b538      	push	{r3, r4, r5, lr}
 8017792:	4d07      	ldr	r5, [pc, #28]	@ (80177b0 <_write_r+0x20>)
 8017794:	4604      	mov	r4, r0
 8017796:	4608      	mov	r0, r1
 8017798:	4611      	mov	r1, r2
 801779a:	2200      	movs	r2, #0
 801779c:	602a      	str	r2, [r5, #0]
 801779e:	461a      	mov	r2, r3
 80177a0:	f7eb faba 	bl	8002d18 <_write>
 80177a4:	1c43      	adds	r3, r0, #1
 80177a6:	d102      	bne.n	80177ae <_write_r+0x1e>
 80177a8:	682b      	ldr	r3, [r5, #0]
 80177aa:	b103      	cbz	r3, 80177ae <_write_r+0x1e>
 80177ac:	6023      	str	r3, [r4, #0]
 80177ae:	bd38      	pop	{r3, r4, r5, pc}
 80177b0:	20036164 	.word	0x20036164

080177b4 <__errno>:
 80177b4:	4b01      	ldr	r3, [pc, #4]	@ (80177bc <__errno+0x8>)
 80177b6:	6818      	ldr	r0, [r3, #0]
 80177b8:	4770      	bx	lr
 80177ba:	bf00      	nop
 80177bc:	200008cc 	.word	0x200008cc

080177c0 <__libc_init_array>:
 80177c0:	b570      	push	{r4, r5, r6, lr}
 80177c2:	4d0d      	ldr	r5, [pc, #52]	@ (80177f8 <__libc_init_array+0x38>)
 80177c4:	4c0d      	ldr	r4, [pc, #52]	@ (80177fc <__libc_init_array+0x3c>)
 80177c6:	1b64      	subs	r4, r4, r5
 80177c8:	10a4      	asrs	r4, r4, #2
 80177ca:	2600      	movs	r6, #0
 80177cc:	42a6      	cmp	r6, r4
 80177ce:	d109      	bne.n	80177e4 <__libc_init_array+0x24>
 80177d0:	4d0b      	ldr	r5, [pc, #44]	@ (8017800 <__libc_init_array+0x40>)
 80177d2:	4c0c      	ldr	r4, [pc, #48]	@ (8017804 <__libc_init_array+0x44>)
 80177d4:	f002 fd6c 	bl	801a2b0 <_init>
 80177d8:	1b64      	subs	r4, r4, r5
 80177da:	10a4      	asrs	r4, r4, #2
 80177dc:	2600      	movs	r6, #0
 80177de:	42a6      	cmp	r6, r4
 80177e0:	d105      	bne.n	80177ee <__libc_init_array+0x2e>
 80177e2:	bd70      	pop	{r4, r5, r6, pc}
 80177e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80177e8:	4798      	blx	r3
 80177ea:	3601      	adds	r6, #1
 80177ec:	e7ee      	b.n	80177cc <__libc_init_array+0xc>
 80177ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80177f2:	4798      	blx	r3
 80177f4:	3601      	adds	r6, #1
 80177f6:	e7f2      	b.n	80177de <__libc_init_array+0x1e>
 80177f8:	080d8370 	.word	0x080d8370
 80177fc:	080d8370 	.word	0x080d8370
 8017800:	080d8370 	.word	0x080d8370
 8017804:	080d8374 	.word	0x080d8374

08017808 <__retarget_lock_init_recursive>:
 8017808:	4770      	bx	lr

0801780a <__retarget_lock_acquire_recursive>:
 801780a:	4770      	bx	lr

0801780c <__retarget_lock_release_recursive>:
 801780c:	4770      	bx	lr

0801780e <memcpy>:
 801780e:	440a      	add	r2, r1
 8017810:	4291      	cmp	r1, r2
 8017812:	f100 33ff 	add.w	r3, r0, #4294967295
 8017816:	d100      	bne.n	801781a <memcpy+0xc>
 8017818:	4770      	bx	lr
 801781a:	b510      	push	{r4, lr}
 801781c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017820:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017824:	4291      	cmp	r1, r2
 8017826:	d1f9      	bne.n	801781c <memcpy+0xe>
 8017828:	bd10      	pop	{r4, pc}

0801782a <quorem>:
 801782a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801782e:	6903      	ldr	r3, [r0, #16]
 8017830:	690c      	ldr	r4, [r1, #16]
 8017832:	42a3      	cmp	r3, r4
 8017834:	4607      	mov	r7, r0
 8017836:	db7e      	blt.n	8017936 <quorem+0x10c>
 8017838:	3c01      	subs	r4, #1
 801783a:	f101 0814 	add.w	r8, r1, #20
 801783e:	00a3      	lsls	r3, r4, #2
 8017840:	f100 0514 	add.w	r5, r0, #20
 8017844:	9300      	str	r3, [sp, #0]
 8017846:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801784a:	9301      	str	r3, [sp, #4]
 801784c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8017850:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017854:	3301      	adds	r3, #1
 8017856:	429a      	cmp	r2, r3
 8017858:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801785c:	fbb2 f6f3 	udiv	r6, r2, r3
 8017860:	d32e      	bcc.n	80178c0 <quorem+0x96>
 8017862:	f04f 0a00 	mov.w	sl, #0
 8017866:	46c4      	mov	ip, r8
 8017868:	46ae      	mov	lr, r5
 801786a:	46d3      	mov	fp, sl
 801786c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8017870:	b298      	uxth	r0, r3
 8017872:	fb06 a000 	mla	r0, r6, r0, sl
 8017876:	0c02      	lsrs	r2, r0, #16
 8017878:	0c1b      	lsrs	r3, r3, #16
 801787a:	fb06 2303 	mla	r3, r6, r3, r2
 801787e:	f8de 2000 	ldr.w	r2, [lr]
 8017882:	b280      	uxth	r0, r0
 8017884:	b292      	uxth	r2, r2
 8017886:	1a12      	subs	r2, r2, r0
 8017888:	445a      	add	r2, fp
 801788a:	f8de 0000 	ldr.w	r0, [lr]
 801788e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8017892:	b29b      	uxth	r3, r3
 8017894:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8017898:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801789c:	b292      	uxth	r2, r2
 801789e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80178a2:	45e1      	cmp	r9, ip
 80178a4:	f84e 2b04 	str.w	r2, [lr], #4
 80178a8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80178ac:	d2de      	bcs.n	801786c <quorem+0x42>
 80178ae:	9b00      	ldr	r3, [sp, #0]
 80178b0:	58eb      	ldr	r3, [r5, r3]
 80178b2:	b92b      	cbnz	r3, 80178c0 <quorem+0x96>
 80178b4:	9b01      	ldr	r3, [sp, #4]
 80178b6:	3b04      	subs	r3, #4
 80178b8:	429d      	cmp	r5, r3
 80178ba:	461a      	mov	r2, r3
 80178bc:	d32f      	bcc.n	801791e <quorem+0xf4>
 80178be:	613c      	str	r4, [r7, #16]
 80178c0:	4638      	mov	r0, r7
 80178c2:	f001 f8c5 	bl	8018a50 <__mcmp>
 80178c6:	2800      	cmp	r0, #0
 80178c8:	db25      	blt.n	8017916 <quorem+0xec>
 80178ca:	4629      	mov	r1, r5
 80178cc:	2000      	movs	r0, #0
 80178ce:	f858 2b04 	ldr.w	r2, [r8], #4
 80178d2:	f8d1 c000 	ldr.w	ip, [r1]
 80178d6:	fa1f fe82 	uxth.w	lr, r2
 80178da:	fa1f f38c 	uxth.w	r3, ip
 80178de:	eba3 030e 	sub.w	r3, r3, lr
 80178e2:	4403      	add	r3, r0
 80178e4:	0c12      	lsrs	r2, r2, #16
 80178e6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80178ea:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80178ee:	b29b      	uxth	r3, r3
 80178f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80178f4:	45c1      	cmp	r9, r8
 80178f6:	f841 3b04 	str.w	r3, [r1], #4
 80178fa:	ea4f 4022 	mov.w	r0, r2, asr #16
 80178fe:	d2e6      	bcs.n	80178ce <quorem+0xa4>
 8017900:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017904:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017908:	b922      	cbnz	r2, 8017914 <quorem+0xea>
 801790a:	3b04      	subs	r3, #4
 801790c:	429d      	cmp	r5, r3
 801790e:	461a      	mov	r2, r3
 8017910:	d30b      	bcc.n	801792a <quorem+0x100>
 8017912:	613c      	str	r4, [r7, #16]
 8017914:	3601      	adds	r6, #1
 8017916:	4630      	mov	r0, r6
 8017918:	b003      	add	sp, #12
 801791a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801791e:	6812      	ldr	r2, [r2, #0]
 8017920:	3b04      	subs	r3, #4
 8017922:	2a00      	cmp	r2, #0
 8017924:	d1cb      	bne.n	80178be <quorem+0x94>
 8017926:	3c01      	subs	r4, #1
 8017928:	e7c6      	b.n	80178b8 <quorem+0x8e>
 801792a:	6812      	ldr	r2, [r2, #0]
 801792c:	3b04      	subs	r3, #4
 801792e:	2a00      	cmp	r2, #0
 8017930:	d1ef      	bne.n	8017912 <quorem+0xe8>
 8017932:	3c01      	subs	r4, #1
 8017934:	e7ea      	b.n	801790c <quorem+0xe2>
 8017936:	2000      	movs	r0, #0
 8017938:	e7ee      	b.n	8017918 <quorem+0xee>
 801793a:	0000      	movs	r0, r0
 801793c:	0000      	movs	r0, r0
	...

08017940 <_dtoa_r>:
 8017940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017944:	69c7      	ldr	r7, [r0, #28]
 8017946:	b099      	sub	sp, #100	@ 0x64
 8017948:	ed8d 0b02 	vstr	d0, [sp, #8]
 801794c:	ec55 4b10 	vmov	r4, r5, d0
 8017950:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8017952:	9109      	str	r1, [sp, #36]	@ 0x24
 8017954:	4683      	mov	fp, r0
 8017956:	920e      	str	r2, [sp, #56]	@ 0x38
 8017958:	9313      	str	r3, [sp, #76]	@ 0x4c
 801795a:	b97f      	cbnz	r7, 801797c <_dtoa_r+0x3c>
 801795c:	2010      	movs	r0, #16
 801795e:	f7fe ff61 	bl	8016824 <malloc>
 8017962:	4602      	mov	r2, r0
 8017964:	f8cb 001c 	str.w	r0, [fp, #28]
 8017968:	b920      	cbnz	r0, 8017974 <_dtoa_r+0x34>
 801796a:	4ba7      	ldr	r3, [pc, #668]	@ (8017c08 <_dtoa_r+0x2c8>)
 801796c:	21ef      	movs	r1, #239	@ 0xef
 801796e:	48a7      	ldr	r0, [pc, #668]	@ (8017c0c <_dtoa_r+0x2cc>)
 8017970:	f001 fd62 	bl	8019438 <__assert_func>
 8017974:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8017978:	6007      	str	r7, [r0, #0]
 801797a:	60c7      	str	r7, [r0, #12]
 801797c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8017980:	6819      	ldr	r1, [r3, #0]
 8017982:	b159      	cbz	r1, 801799c <_dtoa_r+0x5c>
 8017984:	685a      	ldr	r2, [r3, #4]
 8017986:	604a      	str	r2, [r1, #4]
 8017988:	2301      	movs	r3, #1
 801798a:	4093      	lsls	r3, r2
 801798c:	608b      	str	r3, [r1, #8]
 801798e:	4658      	mov	r0, fp
 8017990:	f000 fe24 	bl	80185dc <_Bfree>
 8017994:	f8db 301c 	ldr.w	r3, [fp, #28]
 8017998:	2200      	movs	r2, #0
 801799a:	601a      	str	r2, [r3, #0]
 801799c:	1e2b      	subs	r3, r5, #0
 801799e:	bfb9      	ittee	lt
 80179a0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80179a4:	9303      	strlt	r3, [sp, #12]
 80179a6:	2300      	movge	r3, #0
 80179a8:	6033      	strge	r3, [r6, #0]
 80179aa:	9f03      	ldr	r7, [sp, #12]
 80179ac:	4b98      	ldr	r3, [pc, #608]	@ (8017c10 <_dtoa_r+0x2d0>)
 80179ae:	bfbc      	itt	lt
 80179b0:	2201      	movlt	r2, #1
 80179b2:	6032      	strlt	r2, [r6, #0]
 80179b4:	43bb      	bics	r3, r7
 80179b6:	d112      	bne.n	80179de <_dtoa_r+0x9e>
 80179b8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80179ba:	f242 730f 	movw	r3, #9999	@ 0x270f
 80179be:	6013      	str	r3, [r2, #0]
 80179c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80179c4:	4323      	orrs	r3, r4
 80179c6:	f000 854d 	beq.w	8018464 <_dtoa_r+0xb24>
 80179ca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80179cc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8017c24 <_dtoa_r+0x2e4>
 80179d0:	2b00      	cmp	r3, #0
 80179d2:	f000 854f 	beq.w	8018474 <_dtoa_r+0xb34>
 80179d6:	f10a 0303 	add.w	r3, sl, #3
 80179da:	f000 bd49 	b.w	8018470 <_dtoa_r+0xb30>
 80179de:	ed9d 7b02 	vldr	d7, [sp, #8]
 80179e2:	2200      	movs	r2, #0
 80179e4:	ec51 0b17 	vmov	r0, r1, d7
 80179e8:	2300      	movs	r3, #0
 80179ea:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80179ee:	f7e9 f8fb 	bl	8000be8 <__aeabi_dcmpeq>
 80179f2:	4680      	mov	r8, r0
 80179f4:	b158      	cbz	r0, 8017a0e <_dtoa_r+0xce>
 80179f6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80179f8:	2301      	movs	r3, #1
 80179fa:	6013      	str	r3, [r2, #0]
 80179fc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80179fe:	b113      	cbz	r3, 8017a06 <_dtoa_r+0xc6>
 8017a00:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8017a02:	4b84      	ldr	r3, [pc, #528]	@ (8017c14 <_dtoa_r+0x2d4>)
 8017a04:	6013      	str	r3, [r2, #0]
 8017a06:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8017c28 <_dtoa_r+0x2e8>
 8017a0a:	f000 bd33 	b.w	8018474 <_dtoa_r+0xb34>
 8017a0e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8017a12:	aa16      	add	r2, sp, #88	@ 0x58
 8017a14:	a917      	add	r1, sp, #92	@ 0x5c
 8017a16:	4658      	mov	r0, fp
 8017a18:	f001 f8ca 	bl	8018bb0 <__d2b>
 8017a1c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8017a20:	4681      	mov	r9, r0
 8017a22:	2e00      	cmp	r6, #0
 8017a24:	d077      	beq.n	8017b16 <_dtoa_r+0x1d6>
 8017a26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017a28:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8017a2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017a30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8017a34:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8017a38:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8017a3c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8017a40:	4619      	mov	r1, r3
 8017a42:	2200      	movs	r2, #0
 8017a44:	4b74      	ldr	r3, [pc, #464]	@ (8017c18 <_dtoa_r+0x2d8>)
 8017a46:	f7e8 fcaf 	bl	80003a8 <__aeabi_dsub>
 8017a4a:	a369      	add	r3, pc, #420	@ (adr r3, 8017bf0 <_dtoa_r+0x2b0>)
 8017a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a50:	f7e8 fe62 	bl	8000718 <__aeabi_dmul>
 8017a54:	a368      	add	r3, pc, #416	@ (adr r3, 8017bf8 <_dtoa_r+0x2b8>)
 8017a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a5a:	f7e8 fca7 	bl	80003ac <__adddf3>
 8017a5e:	4604      	mov	r4, r0
 8017a60:	4630      	mov	r0, r6
 8017a62:	460d      	mov	r5, r1
 8017a64:	f7e8 fdee 	bl	8000644 <__aeabi_i2d>
 8017a68:	a365      	add	r3, pc, #404	@ (adr r3, 8017c00 <_dtoa_r+0x2c0>)
 8017a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a6e:	f7e8 fe53 	bl	8000718 <__aeabi_dmul>
 8017a72:	4602      	mov	r2, r0
 8017a74:	460b      	mov	r3, r1
 8017a76:	4620      	mov	r0, r4
 8017a78:	4629      	mov	r1, r5
 8017a7a:	f7e8 fc97 	bl	80003ac <__adddf3>
 8017a7e:	4604      	mov	r4, r0
 8017a80:	460d      	mov	r5, r1
 8017a82:	f7e9 f8f9 	bl	8000c78 <__aeabi_d2iz>
 8017a86:	2200      	movs	r2, #0
 8017a88:	4607      	mov	r7, r0
 8017a8a:	2300      	movs	r3, #0
 8017a8c:	4620      	mov	r0, r4
 8017a8e:	4629      	mov	r1, r5
 8017a90:	f7e9 f8b4 	bl	8000bfc <__aeabi_dcmplt>
 8017a94:	b140      	cbz	r0, 8017aa8 <_dtoa_r+0x168>
 8017a96:	4638      	mov	r0, r7
 8017a98:	f7e8 fdd4 	bl	8000644 <__aeabi_i2d>
 8017a9c:	4622      	mov	r2, r4
 8017a9e:	462b      	mov	r3, r5
 8017aa0:	f7e9 f8a2 	bl	8000be8 <__aeabi_dcmpeq>
 8017aa4:	b900      	cbnz	r0, 8017aa8 <_dtoa_r+0x168>
 8017aa6:	3f01      	subs	r7, #1
 8017aa8:	2f16      	cmp	r7, #22
 8017aaa:	d851      	bhi.n	8017b50 <_dtoa_r+0x210>
 8017aac:	4b5b      	ldr	r3, [pc, #364]	@ (8017c1c <_dtoa_r+0x2dc>)
 8017aae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8017ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ab6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8017aba:	f7e9 f89f 	bl	8000bfc <__aeabi_dcmplt>
 8017abe:	2800      	cmp	r0, #0
 8017ac0:	d048      	beq.n	8017b54 <_dtoa_r+0x214>
 8017ac2:	3f01      	subs	r7, #1
 8017ac4:	2300      	movs	r3, #0
 8017ac6:	9312      	str	r3, [sp, #72]	@ 0x48
 8017ac8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8017aca:	1b9b      	subs	r3, r3, r6
 8017acc:	1e5a      	subs	r2, r3, #1
 8017ace:	bf44      	itt	mi
 8017ad0:	f1c3 0801 	rsbmi	r8, r3, #1
 8017ad4:	2300      	movmi	r3, #0
 8017ad6:	9208      	str	r2, [sp, #32]
 8017ad8:	bf54      	ite	pl
 8017ada:	f04f 0800 	movpl.w	r8, #0
 8017ade:	9308      	strmi	r3, [sp, #32]
 8017ae0:	2f00      	cmp	r7, #0
 8017ae2:	db39      	blt.n	8017b58 <_dtoa_r+0x218>
 8017ae4:	9b08      	ldr	r3, [sp, #32]
 8017ae6:	970f      	str	r7, [sp, #60]	@ 0x3c
 8017ae8:	443b      	add	r3, r7
 8017aea:	9308      	str	r3, [sp, #32]
 8017aec:	2300      	movs	r3, #0
 8017aee:	930a      	str	r3, [sp, #40]	@ 0x28
 8017af0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017af2:	2b09      	cmp	r3, #9
 8017af4:	d864      	bhi.n	8017bc0 <_dtoa_r+0x280>
 8017af6:	2b05      	cmp	r3, #5
 8017af8:	bfc4      	itt	gt
 8017afa:	3b04      	subgt	r3, #4
 8017afc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8017afe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017b00:	f1a3 0302 	sub.w	r3, r3, #2
 8017b04:	bfcc      	ite	gt
 8017b06:	2400      	movgt	r4, #0
 8017b08:	2401      	movle	r4, #1
 8017b0a:	2b03      	cmp	r3, #3
 8017b0c:	d863      	bhi.n	8017bd6 <_dtoa_r+0x296>
 8017b0e:	e8df f003 	tbb	[pc, r3]
 8017b12:	372a      	.short	0x372a
 8017b14:	5535      	.short	0x5535
 8017b16:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8017b1a:	441e      	add	r6, r3
 8017b1c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8017b20:	2b20      	cmp	r3, #32
 8017b22:	bfc1      	itttt	gt
 8017b24:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8017b28:	409f      	lslgt	r7, r3
 8017b2a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8017b2e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8017b32:	bfd6      	itet	le
 8017b34:	f1c3 0320 	rsble	r3, r3, #32
 8017b38:	ea47 0003 	orrgt.w	r0, r7, r3
 8017b3c:	fa04 f003 	lslle.w	r0, r4, r3
 8017b40:	f7e8 fd70 	bl	8000624 <__aeabi_ui2d>
 8017b44:	2201      	movs	r2, #1
 8017b46:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8017b4a:	3e01      	subs	r6, #1
 8017b4c:	9214      	str	r2, [sp, #80]	@ 0x50
 8017b4e:	e777      	b.n	8017a40 <_dtoa_r+0x100>
 8017b50:	2301      	movs	r3, #1
 8017b52:	e7b8      	b.n	8017ac6 <_dtoa_r+0x186>
 8017b54:	9012      	str	r0, [sp, #72]	@ 0x48
 8017b56:	e7b7      	b.n	8017ac8 <_dtoa_r+0x188>
 8017b58:	427b      	negs	r3, r7
 8017b5a:	930a      	str	r3, [sp, #40]	@ 0x28
 8017b5c:	2300      	movs	r3, #0
 8017b5e:	eba8 0807 	sub.w	r8, r8, r7
 8017b62:	930f      	str	r3, [sp, #60]	@ 0x3c
 8017b64:	e7c4      	b.n	8017af0 <_dtoa_r+0x1b0>
 8017b66:	2300      	movs	r3, #0
 8017b68:	930b      	str	r3, [sp, #44]	@ 0x2c
 8017b6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017b6c:	2b00      	cmp	r3, #0
 8017b6e:	dc35      	bgt.n	8017bdc <_dtoa_r+0x29c>
 8017b70:	2301      	movs	r3, #1
 8017b72:	9300      	str	r3, [sp, #0]
 8017b74:	9307      	str	r3, [sp, #28]
 8017b76:	461a      	mov	r2, r3
 8017b78:	920e      	str	r2, [sp, #56]	@ 0x38
 8017b7a:	e00b      	b.n	8017b94 <_dtoa_r+0x254>
 8017b7c:	2301      	movs	r3, #1
 8017b7e:	e7f3      	b.n	8017b68 <_dtoa_r+0x228>
 8017b80:	2300      	movs	r3, #0
 8017b82:	930b      	str	r3, [sp, #44]	@ 0x2c
 8017b84:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017b86:	18fb      	adds	r3, r7, r3
 8017b88:	9300      	str	r3, [sp, #0]
 8017b8a:	3301      	adds	r3, #1
 8017b8c:	2b01      	cmp	r3, #1
 8017b8e:	9307      	str	r3, [sp, #28]
 8017b90:	bfb8      	it	lt
 8017b92:	2301      	movlt	r3, #1
 8017b94:	f8db 001c 	ldr.w	r0, [fp, #28]
 8017b98:	2100      	movs	r1, #0
 8017b9a:	2204      	movs	r2, #4
 8017b9c:	f102 0514 	add.w	r5, r2, #20
 8017ba0:	429d      	cmp	r5, r3
 8017ba2:	d91f      	bls.n	8017be4 <_dtoa_r+0x2a4>
 8017ba4:	6041      	str	r1, [r0, #4]
 8017ba6:	4658      	mov	r0, fp
 8017ba8:	f000 fcd8 	bl	801855c <_Balloc>
 8017bac:	4682      	mov	sl, r0
 8017bae:	2800      	cmp	r0, #0
 8017bb0:	d13c      	bne.n	8017c2c <_dtoa_r+0x2ec>
 8017bb2:	4b1b      	ldr	r3, [pc, #108]	@ (8017c20 <_dtoa_r+0x2e0>)
 8017bb4:	4602      	mov	r2, r0
 8017bb6:	f240 11af 	movw	r1, #431	@ 0x1af
 8017bba:	e6d8      	b.n	801796e <_dtoa_r+0x2e>
 8017bbc:	2301      	movs	r3, #1
 8017bbe:	e7e0      	b.n	8017b82 <_dtoa_r+0x242>
 8017bc0:	2401      	movs	r4, #1
 8017bc2:	2300      	movs	r3, #0
 8017bc4:	9309      	str	r3, [sp, #36]	@ 0x24
 8017bc6:	940b      	str	r4, [sp, #44]	@ 0x2c
 8017bc8:	f04f 33ff 	mov.w	r3, #4294967295
 8017bcc:	9300      	str	r3, [sp, #0]
 8017bce:	9307      	str	r3, [sp, #28]
 8017bd0:	2200      	movs	r2, #0
 8017bd2:	2312      	movs	r3, #18
 8017bd4:	e7d0      	b.n	8017b78 <_dtoa_r+0x238>
 8017bd6:	2301      	movs	r3, #1
 8017bd8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8017bda:	e7f5      	b.n	8017bc8 <_dtoa_r+0x288>
 8017bdc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017bde:	9300      	str	r3, [sp, #0]
 8017be0:	9307      	str	r3, [sp, #28]
 8017be2:	e7d7      	b.n	8017b94 <_dtoa_r+0x254>
 8017be4:	3101      	adds	r1, #1
 8017be6:	0052      	lsls	r2, r2, #1
 8017be8:	e7d8      	b.n	8017b9c <_dtoa_r+0x25c>
 8017bea:	bf00      	nop
 8017bec:	f3af 8000 	nop.w
 8017bf0:	636f4361 	.word	0x636f4361
 8017bf4:	3fd287a7 	.word	0x3fd287a7
 8017bf8:	8b60c8b3 	.word	0x8b60c8b3
 8017bfc:	3fc68a28 	.word	0x3fc68a28
 8017c00:	509f79fb 	.word	0x509f79fb
 8017c04:	3fd34413 	.word	0x3fd34413
 8017c08:	080d7c51 	.word	0x080d7c51
 8017c0c:	080d7c68 	.word	0x080d7c68
 8017c10:	7ff00000 	.word	0x7ff00000
 8017c14:	080d7c21 	.word	0x080d7c21
 8017c18:	3ff80000 	.word	0x3ff80000
 8017c1c:	080d7d60 	.word	0x080d7d60
 8017c20:	080d7cc0 	.word	0x080d7cc0
 8017c24:	080d7c4d 	.word	0x080d7c4d
 8017c28:	080d7c20 	.word	0x080d7c20
 8017c2c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8017c30:	6018      	str	r0, [r3, #0]
 8017c32:	9b07      	ldr	r3, [sp, #28]
 8017c34:	2b0e      	cmp	r3, #14
 8017c36:	f200 80a4 	bhi.w	8017d82 <_dtoa_r+0x442>
 8017c3a:	2c00      	cmp	r4, #0
 8017c3c:	f000 80a1 	beq.w	8017d82 <_dtoa_r+0x442>
 8017c40:	2f00      	cmp	r7, #0
 8017c42:	dd33      	ble.n	8017cac <_dtoa_r+0x36c>
 8017c44:	4bad      	ldr	r3, [pc, #692]	@ (8017efc <_dtoa_r+0x5bc>)
 8017c46:	f007 020f 	and.w	r2, r7, #15
 8017c4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017c4e:	ed93 7b00 	vldr	d7, [r3]
 8017c52:	05f8      	lsls	r0, r7, #23
 8017c54:	ed8d 7b04 	vstr	d7, [sp, #16]
 8017c58:	ea4f 1427 	mov.w	r4, r7, asr #4
 8017c5c:	d516      	bpl.n	8017c8c <_dtoa_r+0x34c>
 8017c5e:	4ba8      	ldr	r3, [pc, #672]	@ (8017f00 <_dtoa_r+0x5c0>)
 8017c60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8017c64:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8017c68:	f7e8 fe80 	bl	800096c <__aeabi_ddiv>
 8017c6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017c70:	f004 040f 	and.w	r4, r4, #15
 8017c74:	2603      	movs	r6, #3
 8017c76:	4da2      	ldr	r5, [pc, #648]	@ (8017f00 <_dtoa_r+0x5c0>)
 8017c78:	b954      	cbnz	r4, 8017c90 <_dtoa_r+0x350>
 8017c7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8017c7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017c82:	f7e8 fe73 	bl	800096c <__aeabi_ddiv>
 8017c86:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017c8a:	e028      	b.n	8017cde <_dtoa_r+0x39e>
 8017c8c:	2602      	movs	r6, #2
 8017c8e:	e7f2      	b.n	8017c76 <_dtoa_r+0x336>
 8017c90:	07e1      	lsls	r1, r4, #31
 8017c92:	d508      	bpl.n	8017ca6 <_dtoa_r+0x366>
 8017c94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8017c98:	e9d5 2300 	ldrd	r2, r3, [r5]
 8017c9c:	f7e8 fd3c 	bl	8000718 <__aeabi_dmul>
 8017ca0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8017ca4:	3601      	adds	r6, #1
 8017ca6:	1064      	asrs	r4, r4, #1
 8017ca8:	3508      	adds	r5, #8
 8017caa:	e7e5      	b.n	8017c78 <_dtoa_r+0x338>
 8017cac:	f000 80d2 	beq.w	8017e54 <_dtoa_r+0x514>
 8017cb0:	427c      	negs	r4, r7
 8017cb2:	4b92      	ldr	r3, [pc, #584]	@ (8017efc <_dtoa_r+0x5bc>)
 8017cb4:	4d92      	ldr	r5, [pc, #584]	@ (8017f00 <_dtoa_r+0x5c0>)
 8017cb6:	f004 020f 	and.w	r2, r4, #15
 8017cba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017cc2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8017cc6:	f7e8 fd27 	bl	8000718 <__aeabi_dmul>
 8017cca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017cce:	1124      	asrs	r4, r4, #4
 8017cd0:	2300      	movs	r3, #0
 8017cd2:	2602      	movs	r6, #2
 8017cd4:	2c00      	cmp	r4, #0
 8017cd6:	f040 80b2 	bne.w	8017e3e <_dtoa_r+0x4fe>
 8017cda:	2b00      	cmp	r3, #0
 8017cdc:	d1d3      	bne.n	8017c86 <_dtoa_r+0x346>
 8017cde:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8017ce0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8017ce4:	2b00      	cmp	r3, #0
 8017ce6:	f000 80b7 	beq.w	8017e58 <_dtoa_r+0x518>
 8017cea:	4b86      	ldr	r3, [pc, #536]	@ (8017f04 <_dtoa_r+0x5c4>)
 8017cec:	2200      	movs	r2, #0
 8017cee:	4620      	mov	r0, r4
 8017cf0:	4629      	mov	r1, r5
 8017cf2:	f7e8 ff83 	bl	8000bfc <__aeabi_dcmplt>
 8017cf6:	2800      	cmp	r0, #0
 8017cf8:	f000 80ae 	beq.w	8017e58 <_dtoa_r+0x518>
 8017cfc:	9b07      	ldr	r3, [sp, #28]
 8017cfe:	2b00      	cmp	r3, #0
 8017d00:	f000 80aa 	beq.w	8017e58 <_dtoa_r+0x518>
 8017d04:	9b00      	ldr	r3, [sp, #0]
 8017d06:	2b00      	cmp	r3, #0
 8017d08:	dd37      	ble.n	8017d7a <_dtoa_r+0x43a>
 8017d0a:	1e7b      	subs	r3, r7, #1
 8017d0c:	9304      	str	r3, [sp, #16]
 8017d0e:	4620      	mov	r0, r4
 8017d10:	4b7d      	ldr	r3, [pc, #500]	@ (8017f08 <_dtoa_r+0x5c8>)
 8017d12:	2200      	movs	r2, #0
 8017d14:	4629      	mov	r1, r5
 8017d16:	f7e8 fcff 	bl	8000718 <__aeabi_dmul>
 8017d1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017d1e:	9c00      	ldr	r4, [sp, #0]
 8017d20:	3601      	adds	r6, #1
 8017d22:	4630      	mov	r0, r6
 8017d24:	f7e8 fc8e 	bl	8000644 <__aeabi_i2d>
 8017d28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017d2c:	f7e8 fcf4 	bl	8000718 <__aeabi_dmul>
 8017d30:	4b76      	ldr	r3, [pc, #472]	@ (8017f0c <_dtoa_r+0x5cc>)
 8017d32:	2200      	movs	r2, #0
 8017d34:	f7e8 fb3a 	bl	80003ac <__adddf3>
 8017d38:	4605      	mov	r5, r0
 8017d3a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8017d3e:	2c00      	cmp	r4, #0
 8017d40:	f040 808d 	bne.w	8017e5e <_dtoa_r+0x51e>
 8017d44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017d48:	4b71      	ldr	r3, [pc, #452]	@ (8017f10 <_dtoa_r+0x5d0>)
 8017d4a:	2200      	movs	r2, #0
 8017d4c:	f7e8 fb2c 	bl	80003a8 <__aeabi_dsub>
 8017d50:	4602      	mov	r2, r0
 8017d52:	460b      	mov	r3, r1
 8017d54:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8017d58:	462a      	mov	r2, r5
 8017d5a:	4633      	mov	r3, r6
 8017d5c:	f7e8 ff6c 	bl	8000c38 <__aeabi_dcmpgt>
 8017d60:	2800      	cmp	r0, #0
 8017d62:	f040 828b 	bne.w	801827c <_dtoa_r+0x93c>
 8017d66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017d6a:	462a      	mov	r2, r5
 8017d6c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8017d70:	f7e8 ff44 	bl	8000bfc <__aeabi_dcmplt>
 8017d74:	2800      	cmp	r0, #0
 8017d76:	f040 8128 	bne.w	8017fca <_dtoa_r+0x68a>
 8017d7a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8017d7e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8017d82:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8017d84:	2b00      	cmp	r3, #0
 8017d86:	f2c0 815a 	blt.w	801803e <_dtoa_r+0x6fe>
 8017d8a:	2f0e      	cmp	r7, #14
 8017d8c:	f300 8157 	bgt.w	801803e <_dtoa_r+0x6fe>
 8017d90:	4b5a      	ldr	r3, [pc, #360]	@ (8017efc <_dtoa_r+0x5bc>)
 8017d92:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8017d96:	ed93 7b00 	vldr	d7, [r3]
 8017d9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017d9c:	2b00      	cmp	r3, #0
 8017d9e:	ed8d 7b00 	vstr	d7, [sp]
 8017da2:	da03      	bge.n	8017dac <_dtoa_r+0x46c>
 8017da4:	9b07      	ldr	r3, [sp, #28]
 8017da6:	2b00      	cmp	r3, #0
 8017da8:	f340 8101 	ble.w	8017fae <_dtoa_r+0x66e>
 8017dac:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8017db0:	4656      	mov	r6, sl
 8017db2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017db6:	4620      	mov	r0, r4
 8017db8:	4629      	mov	r1, r5
 8017dba:	f7e8 fdd7 	bl	800096c <__aeabi_ddiv>
 8017dbe:	f7e8 ff5b 	bl	8000c78 <__aeabi_d2iz>
 8017dc2:	4680      	mov	r8, r0
 8017dc4:	f7e8 fc3e 	bl	8000644 <__aeabi_i2d>
 8017dc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017dcc:	f7e8 fca4 	bl	8000718 <__aeabi_dmul>
 8017dd0:	4602      	mov	r2, r0
 8017dd2:	460b      	mov	r3, r1
 8017dd4:	4620      	mov	r0, r4
 8017dd6:	4629      	mov	r1, r5
 8017dd8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8017ddc:	f7e8 fae4 	bl	80003a8 <__aeabi_dsub>
 8017de0:	f806 4b01 	strb.w	r4, [r6], #1
 8017de4:	9d07      	ldr	r5, [sp, #28]
 8017de6:	eba6 040a 	sub.w	r4, r6, sl
 8017dea:	42a5      	cmp	r5, r4
 8017dec:	4602      	mov	r2, r0
 8017dee:	460b      	mov	r3, r1
 8017df0:	f040 8117 	bne.w	8018022 <_dtoa_r+0x6e2>
 8017df4:	f7e8 fada 	bl	80003ac <__adddf3>
 8017df8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017dfc:	4604      	mov	r4, r0
 8017dfe:	460d      	mov	r5, r1
 8017e00:	f7e8 ff1a 	bl	8000c38 <__aeabi_dcmpgt>
 8017e04:	2800      	cmp	r0, #0
 8017e06:	f040 80f9 	bne.w	8017ffc <_dtoa_r+0x6bc>
 8017e0a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017e0e:	4620      	mov	r0, r4
 8017e10:	4629      	mov	r1, r5
 8017e12:	f7e8 fee9 	bl	8000be8 <__aeabi_dcmpeq>
 8017e16:	b118      	cbz	r0, 8017e20 <_dtoa_r+0x4e0>
 8017e18:	f018 0f01 	tst.w	r8, #1
 8017e1c:	f040 80ee 	bne.w	8017ffc <_dtoa_r+0x6bc>
 8017e20:	4649      	mov	r1, r9
 8017e22:	4658      	mov	r0, fp
 8017e24:	f000 fbda 	bl	80185dc <_Bfree>
 8017e28:	2300      	movs	r3, #0
 8017e2a:	7033      	strb	r3, [r6, #0]
 8017e2c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8017e2e:	3701      	adds	r7, #1
 8017e30:	601f      	str	r7, [r3, #0]
 8017e32:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8017e34:	2b00      	cmp	r3, #0
 8017e36:	f000 831d 	beq.w	8018474 <_dtoa_r+0xb34>
 8017e3a:	601e      	str	r6, [r3, #0]
 8017e3c:	e31a      	b.n	8018474 <_dtoa_r+0xb34>
 8017e3e:	07e2      	lsls	r2, r4, #31
 8017e40:	d505      	bpl.n	8017e4e <_dtoa_r+0x50e>
 8017e42:	e9d5 2300 	ldrd	r2, r3, [r5]
 8017e46:	f7e8 fc67 	bl	8000718 <__aeabi_dmul>
 8017e4a:	3601      	adds	r6, #1
 8017e4c:	2301      	movs	r3, #1
 8017e4e:	1064      	asrs	r4, r4, #1
 8017e50:	3508      	adds	r5, #8
 8017e52:	e73f      	b.n	8017cd4 <_dtoa_r+0x394>
 8017e54:	2602      	movs	r6, #2
 8017e56:	e742      	b.n	8017cde <_dtoa_r+0x39e>
 8017e58:	9c07      	ldr	r4, [sp, #28]
 8017e5a:	9704      	str	r7, [sp, #16]
 8017e5c:	e761      	b.n	8017d22 <_dtoa_r+0x3e2>
 8017e5e:	4b27      	ldr	r3, [pc, #156]	@ (8017efc <_dtoa_r+0x5bc>)
 8017e60:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8017e62:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8017e66:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8017e6a:	4454      	add	r4, sl
 8017e6c:	2900      	cmp	r1, #0
 8017e6e:	d053      	beq.n	8017f18 <_dtoa_r+0x5d8>
 8017e70:	4928      	ldr	r1, [pc, #160]	@ (8017f14 <_dtoa_r+0x5d4>)
 8017e72:	2000      	movs	r0, #0
 8017e74:	f7e8 fd7a 	bl	800096c <__aeabi_ddiv>
 8017e78:	4633      	mov	r3, r6
 8017e7a:	462a      	mov	r2, r5
 8017e7c:	f7e8 fa94 	bl	80003a8 <__aeabi_dsub>
 8017e80:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8017e84:	4656      	mov	r6, sl
 8017e86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017e8a:	f7e8 fef5 	bl	8000c78 <__aeabi_d2iz>
 8017e8e:	4605      	mov	r5, r0
 8017e90:	f7e8 fbd8 	bl	8000644 <__aeabi_i2d>
 8017e94:	4602      	mov	r2, r0
 8017e96:	460b      	mov	r3, r1
 8017e98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017e9c:	f7e8 fa84 	bl	80003a8 <__aeabi_dsub>
 8017ea0:	3530      	adds	r5, #48	@ 0x30
 8017ea2:	4602      	mov	r2, r0
 8017ea4:	460b      	mov	r3, r1
 8017ea6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8017eaa:	f806 5b01 	strb.w	r5, [r6], #1
 8017eae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8017eb2:	f7e8 fea3 	bl	8000bfc <__aeabi_dcmplt>
 8017eb6:	2800      	cmp	r0, #0
 8017eb8:	d171      	bne.n	8017f9e <_dtoa_r+0x65e>
 8017eba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017ebe:	4911      	ldr	r1, [pc, #68]	@ (8017f04 <_dtoa_r+0x5c4>)
 8017ec0:	2000      	movs	r0, #0
 8017ec2:	f7e8 fa71 	bl	80003a8 <__aeabi_dsub>
 8017ec6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8017eca:	f7e8 fe97 	bl	8000bfc <__aeabi_dcmplt>
 8017ece:	2800      	cmp	r0, #0
 8017ed0:	f040 8095 	bne.w	8017ffe <_dtoa_r+0x6be>
 8017ed4:	42a6      	cmp	r6, r4
 8017ed6:	f43f af50 	beq.w	8017d7a <_dtoa_r+0x43a>
 8017eda:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8017ede:	4b0a      	ldr	r3, [pc, #40]	@ (8017f08 <_dtoa_r+0x5c8>)
 8017ee0:	2200      	movs	r2, #0
 8017ee2:	f7e8 fc19 	bl	8000718 <__aeabi_dmul>
 8017ee6:	4b08      	ldr	r3, [pc, #32]	@ (8017f08 <_dtoa_r+0x5c8>)
 8017ee8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8017eec:	2200      	movs	r2, #0
 8017eee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017ef2:	f7e8 fc11 	bl	8000718 <__aeabi_dmul>
 8017ef6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017efa:	e7c4      	b.n	8017e86 <_dtoa_r+0x546>
 8017efc:	080d7d60 	.word	0x080d7d60
 8017f00:	080d7d38 	.word	0x080d7d38
 8017f04:	3ff00000 	.word	0x3ff00000
 8017f08:	40240000 	.word	0x40240000
 8017f0c:	401c0000 	.word	0x401c0000
 8017f10:	40140000 	.word	0x40140000
 8017f14:	3fe00000 	.word	0x3fe00000
 8017f18:	4631      	mov	r1, r6
 8017f1a:	4628      	mov	r0, r5
 8017f1c:	f7e8 fbfc 	bl	8000718 <__aeabi_dmul>
 8017f20:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8017f24:	9415      	str	r4, [sp, #84]	@ 0x54
 8017f26:	4656      	mov	r6, sl
 8017f28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017f2c:	f7e8 fea4 	bl	8000c78 <__aeabi_d2iz>
 8017f30:	4605      	mov	r5, r0
 8017f32:	f7e8 fb87 	bl	8000644 <__aeabi_i2d>
 8017f36:	4602      	mov	r2, r0
 8017f38:	460b      	mov	r3, r1
 8017f3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017f3e:	f7e8 fa33 	bl	80003a8 <__aeabi_dsub>
 8017f42:	3530      	adds	r5, #48	@ 0x30
 8017f44:	f806 5b01 	strb.w	r5, [r6], #1
 8017f48:	4602      	mov	r2, r0
 8017f4a:	460b      	mov	r3, r1
 8017f4c:	42a6      	cmp	r6, r4
 8017f4e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8017f52:	f04f 0200 	mov.w	r2, #0
 8017f56:	d124      	bne.n	8017fa2 <_dtoa_r+0x662>
 8017f58:	4bac      	ldr	r3, [pc, #688]	@ (801820c <_dtoa_r+0x8cc>)
 8017f5a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8017f5e:	f7e8 fa25 	bl	80003ac <__adddf3>
 8017f62:	4602      	mov	r2, r0
 8017f64:	460b      	mov	r3, r1
 8017f66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017f6a:	f7e8 fe65 	bl	8000c38 <__aeabi_dcmpgt>
 8017f6e:	2800      	cmp	r0, #0
 8017f70:	d145      	bne.n	8017ffe <_dtoa_r+0x6be>
 8017f72:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8017f76:	49a5      	ldr	r1, [pc, #660]	@ (801820c <_dtoa_r+0x8cc>)
 8017f78:	2000      	movs	r0, #0
 8017f7a:	f7e8 fa15 	bl	80003a8 <__aeabi_dsub>
 8017f7e:	4602      	mov	r2, r0
 8017f80:	460b      	mov	r3, r1
 8017f82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017f86:	f7e8 fe39 	bl	8000bfc <__aeabi_dcmplt>
 8017f8a:	2800      	cmp	r0, #0
 8017f8c:	f43f aef5 	beq.w	8017d7a <_dtoa_r+0x43a>
 8017f90:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8017f92:	1e73      	subs	r3, r6, #1
 8017f94:	9315      	str	r3, [sp, #84]	@ 0x54
 8017f96:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8017f9a:	2b30      	cmp	r3, #48	@ 0x30
 8017f9c:	d0f8      	beq.n	8017f90 <_dtoa_r+0x650>
 8017f9e:	9f04      	ldr	r7, [sp, #16]
 8017fa0:	e73e      	b.n	8017e20 <_dtoa_r+0x4e0>
 8017fa2:	4b9b      	ldr	r3, [pc, #620]	@ (8018210 <_dtoa_r+0x8d0>)
 8017fa4:	f7e8 fbb8 	bl	8000718 <__aeabi_dmul>
 8017fa8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017fac:	e7bc      	b.n	8017f28 <_dtoa_r+0x5e8>
 8017fae:	d10c      	bne.n	8017fca <_dtoa_r+0x68a>
 8017fb0:	4b98      	ldr	r3, [pc, #608]	@ (8018214 <_dtoa_r+0x8d4>)
 8017fb2:	2200      	movs	r2, #0
 8017fb4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017fb8:	f7e8 fbae 	bl	8000718 <__aeabi_dmul>
 8017fbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017fc0:	f7e8 fe30 	bl	8000c24 <__aeabi_dcmpge>
 8017fc4:	2800      	cmp	r0, #0
 8017fc6:	f000 8157 	beq.w	8018278 <_dtoa_r+0x938>
 8017fca:	2400      	movs	r4, #0
 8017fcc:	4625      	mov	r5, r4
 8017fce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017fd0:	43db      	mvns	r3, r3
 8017fd2:	9304      	str	r3, [sp, #16]
 8017fd4:	4656      	mov	r6, sl
 8017fd6:	2700      	movs	r7, #0
 8017fd8:	4621      	mov	r1, r4
 8017fda:	4658      	mov	r0, fp
 8017fdc:	f000 fafe 	bl	80185dc <_Bfree>
 8017fe0:	2d00      	cmp	r5, #0
 8017fe2:	d0dc      	beq.n	8017f9e <_dtoa_r+0x65e>
 8017fe4:	b12f      	cbz	r7, 8017ff2 <_dtoa_r+0x6b2>
 8017fe6:	42af      	cmp	r7, r5
 8017fe8:	d003      	beq.n	8017ff2 <_dtoa_r+0x6b2>
 8017fea:	4639      	mov	r1, r7
 8017fec:	4658      	mov	r0, fp
 8017fee:	f000 faf5 	bl	80185dc <_Bfree>
 8017ff2:	4629      	mov	r1, r5
 8017ff4:	4658      	mov	r0, fp
 8017ff6:	f000 faf1 	bl	80185dc <_Bfree>
 8017ffa:	e7d0      	b.n	8017f9e <_dtoa_r+0x65e>
 8017ffc:	9704      	str	r7, [sp, #16]
 8017ffe:	4633      	mov	r3, r6
 8018000:	461e      	mov	r6, r3
 8018002:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8018006:	2a39      	cmp	r2, #57	@ 0x39
 8018008:	d107      	bne.n	801801a <_dtoa_r+0x6da>
 801800a:	459a      	cmp	sl, r3
 801800c:	d1f8      	bne.n	8018000 <_dtoa_r+0x6c0>
 801800e:	9a04      	ldr	r2, [sp, #16]
 8018010:	3201      	adds	r2, #1
 8018012:	9204      	str	r2, [sp, #16]
 8018014:	2230      	movs	r2, #48	@ 0x30
 8018016:	f88a 2000 	strb.w	r2, [sl]
 801801a:	781a      	ldrb	r2, [r3, #0]
 801801c:	3201      	adds	r2, #1
 801801e:	701a      	strb	r2, [r3, #0]
 8018020:	e7bd      	b.n	8017f9e <_dtoa_r+0x65e>
 8018022:	4b7b      	ldr	r3, [pc, #492]	@ (8018210 <_dtoa_r+0x8d0>)
 8018024:	2200      	movs	r2, #0
 8018026:	f7e8 fb77 	bl	8000718 <__aeabi_dmul>
 801802a:	2200      	movs	r2, #0
 801802c:	2300      	movs	r3, #0
 801802e:	4604      	mov	r4, r0
 8018030:	460d      	mov	r5, r1
 8018032:	f7e8 fdd9 	bl	8000be8 <__aeabi_dcmpeq>
 8018036:	2800      	cmp	r0, #0
 8018038:	f43f aebb 	beq.w	8017db2 <_dtoa_r+0x472>
 801803c:	e6f0      	b.n	8017e20 <_dtoa_r+0x4e0>
 801803e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8018040:	2a00      	cmp	r2, #0
 8018042:	f000 80db 	beq.w	80181fc <_dtoa_r+0x8bc>
 8018046:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018048:	2a01      	cmp	r2, #1
 801804a:	f300 80bf 	bgt.w	80181cc <_dtoa_r+0x88c>
 801804e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8018050:	2a00      	cmp	r2, #0
 8018052:	f000 80b7 	beq.w	80181c4 <_dtoa_r+0x884>
 8018056:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801805a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801805c:	4646      	mov	r6, r8
 801805e:	9a08      	ldr	r2, [sp, #32]
 8018060:	2101      	movs	r1, #1
 8018062:	441a      	add	r2, r3
 8018064:	4658      	mov	r0, fp
 8018066:	4498      	add	r8, r3
 8018068:	9208      	str	r2, [sp, #32]
 801806a:	f000 fb6b 	bl	8018744 <__i2b>
 801806e:	4605      	mov	r5, r0
 8018070:	b15e      	cbz	r6, 801808a <_dtoa_r+0x74a>
 8018072:	9b08      	ldr	r3, [sp, #32]
 8018074:	2b00      	cmp	r3, #0
 8018076:	dd08      	ble.n	801808a <_dtoa_r+0x74a>
 8018078:	42b3      	cmp	r3, r6
 801807a:	9a08      	ldr	r2, [sp, #32]
 801807c:	bfa8      	it	ge
 801807e:	4633      	movge	r3, r6
 8018080:	eba8 0803 	sub.w	r8, r8, r3
 8018084:	1af6      	subs	r6, r6, r3
 8018086:	1ad3      	subs	r3, r2, r3
 8018088:	9308      	str	r3, [sp, #32]
 801808a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801808c:	b1f3      	cbz	r3, 80180cc <_dtoa_r+0x78c>
 801808e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018090:	2b00      	cmp	r3, #0
 8018092:	f000 80b7 	beq.w	8018204 <_dtoa_r+0x8c4>
 8018096:	b18c      	cbz	r4, 80180bc <_dtoa_r+0x77c>
 8018098:	4629      	mov	r1, r5
 801809a:	4622      	mov	r2, r4
 801809c:	4658      	mov	r0, fp
 801809e:	f000 fc11 	bl	80188c4 <__pow5mult>
 80180a2:	464a      	mov	r2, r9
 80180a4:	4601      	mov	r1, r0
 80180a6:	4605      	mov	r5, r0
 80180a8:	4658      	mov	r0, fp
 80180aa:	f000 fb61 	bl	8018770 <__multiply>
 80180ae:	4649      	mov	r1, r9
 80180b0:	9004      	str	r0, [sp, #16]
 80180b2:	4658      	mov	r0, fp
 80180b4:	f000 fa92 	bl	80185dc <_Bfree>
 80180b8:	9b04      	ldr	r3, [sp, #16]
 80180ba:	4699      	mov	r9, r3
 80180bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80180be:	1b1a      	subs	r2, r3, r4
 80180c0:	d004      	beq.n	80180cc <_dtoa_r+0x78c>
 80180c2:	4649      	mov	r1, r9
 80180c4:	4658      	mov	r0, fp
 80180c6:	f000 fbfd 	bl	80188c4 <__pow5mult>
 80180ca:	4681      	mov	r9, r0
 80180cc:	2101      	movs	r1, #1
 80180ce:	4658      	mov	r0, fp
 80180d0:	f000 fb38 	bl	8018744 <__i2b>
 80180d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80180d6:	4604      	mov	r4, r0
 80180d8:	2b00      	cmp	r3, #0
 80180da:	f000 81cf 	beq.w	801847c <_dtoa_r+0xb3c>
 80180de:	461a      	mov	r2, r3
 80180e0:	4601      	mov	r1, r0
 80180e2:	4658      	mov	r0, fp
 80180e4:	f000 fbee 	bl	80188c4 <__pow5mult>
 80180e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80180ea:	2b01      	cmp	r3, #1
 80180ec:	4604      	mov	r4, r0
 80180ee:	f300 8095 	bgt.w	801821c <_dtoa_r+0x8dc>
 80180f2:	9b02      	ldr	r3, [sp, #8]
 80180f4:	2b00      	cmp	r3, #0
 80180f6:	f040 8087 	bne.w	8018208 <_dtoa_r+0x8c8>
 80180fa:	9b03      	ldr	r3, [sp, #12]
 80180fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8018100:	2b00      	cmp	r3, #0
 8018102:	f040 8089 	bne.w	8018218 <_dtoa_r+0x8d8>
 8018106:	9b03      	ldr	r3, [sp, #12]
 8018108:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801810c:	0d1b      	lsrs	r3, r3, #20
 801810e:	051b      	lsls	r3, r3, #20
 8018110:	b12b      	cbz	r3, 801811e <_dtoa_r+0x7de>
 8018112:	9b08      	ldr	r3, [sp, #32]
 8018114:	3301      	adds	r3, #1
 8018116:	9308      	str	r3, [sp, #32]
 8018118:	f108 0801 	add.w	r8, r8, #1
 801811c:	2301      	movs	r3, #1
 801811e:	930a      	str	r3, [sp, #40]	@ 0x28
 8018120:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018122:	2b00      	cmp	r3, #0
 8018124:	f000 81b0 	beq.w	8018488 <_dtoa_r+0xb48>
 8018128:	6923      	ldr	r3, [r4, #16]
 801812a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801812e:	6918      	ldr	r0, [r3, #16]
 8018130:	f000 fabc 	bl	80186ac <__hi0bits>
 8018134:	f1c0 0020 	rsb	r0, r0, #32
 8018138:	9b08      	ldr	r3, [sp, #32]
 801813a:	4418      	add	r0, r3
 801813c:	f010 001f 	ands.w	r0, r0, #31
 8018140:	d077      	beq.n	8018232 <_dtoa_r+0x8f2>
 8018142:	f1c0 0320 	rsb	r3, r0, #32
 8018146:	2b04      	cmp	r3, #4
 8018148:	dd6b      	ble.n	8018222 <_dtoa_r+0x8e2>
 801814a:	9b08      	ldr	r3, [sp, #32]
 801814c:	f1c0 001c 	rsb	r0, r0, #28
 8018150:	4403      	add	r3, r0
 8018152:	4480      	add	r8, r0
 8018154:	4406      	add	r6, r0
 8018156:	9308      	str	r3, [sp, #32]
 8018158:	f1b8 0f00 	cmp.w	r8, #0
 801815c:	dd05      	ble.n	801816a <_dtoa_r+0x82a>
 801815e:	4649      	mov	r1, r9
 8018160:	4642      	mov	r2, r8
 8018162:	4658      	mov	r0, fp
 8018164:	f000 fc08 	bl	8018978 <__lshift>
 8018168:	4681      	mov	r9, r0
 801816a:	9b08      	ldr	r3, [sp, #32]
 801816c:	2b00      	cmp	r3, #0
 801816e:	dd05      	ble.n	801817c <_dtoa_r+0x83c>
 8018170:	4621      	mov	r1, r4
 8018172:	461a      	mov	r2, r3
 8018174:	4658      	mov	r0, fp
 8018176:	f000 fbff 	bl	8018978 <__lshift>
 801817a:	4604      	mov	r4, r0
 801817c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801817e:	2b00      	cmp	r3, #0
 8018180:	d059      	beq.n	8018236 <_dtoa_r+0x8f6>
 8018182:	4621      	mov	r1, r4
 8018184:	4648      	mov	r0, r9
 8018186:	f000 fc63 	bl	8018a50 <__mcmp>
 801818a:	2800      	cmp	r0, #0
 801818c:	da53      	bge.n	8018236 <_dtoa_r+0x8f6>
 801818e:	1e7b      	subs	r3, r7, #1
 8018190:	9304      	str	r3, [sp, #16]
 8018192:	4649      	mov	r1, r9
 8018194:	2300      	movs	r3, #0
 8018196:	220a      	movs	r2, #10
 8018198:	4658      	mov	r0, fp
 801819a:	f000 fa41 	bl	8018620 <__multadd>
 801819e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80181a0:	4681      	mov	r9, r0
 80181a2:	2b00      	cmp	r3, #0
 80181a4:	f000 8172 	beq.w	801848c <_dtoa_r+0xb4c>
 80181a8:	2300      	movs	r3, #0
 80181aa:	4629      	mov	r1, r5
 80181ac:	220a      	movs	r2, #10
 80181ae:	4658      	mov	r0, fp
 80181b0:	f000 fa36 	bl	8018620 <__multadd>
 80181b4:	9b00      	ldr	r3, [sp, #0]
 80181b6:	2b00      	cmp	r3, #0
 80181b8:	4605      	mov	r5, r0
 80181ba:	dc67      	bgt.n	801828c <_dtoa_r+0x94c>
 80181bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80181be:	2b02      	cmp	r3, #2
 80181c0:	dc41      	bgt.n	8018246 <_dtoa_r+0x906>
 80181c2:	e063      	b.n	801828c <_dtoa_r+0x94c>
 80181c4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80181c6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80181ca:	e746      	b.n	801805a <_dtoa_r+0x71a>
 80181cc:	9b07      	ldr	r3, [sp, #28]
 80181ce:	1e5c      	subs	r4, r3, #1
 80181d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80181d2:	42a3      	cmp	r3, r4
 80181d4:	bfbf      	itttt	lt
 80181d6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80181d8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80181da:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80181dc:	1ae3      	sublt	r3, r4, r3
 80181de:	bfb4      	ite	lt
 80181e0:	18d2      	addlt	r2, r2, r3
 80181e2:	1b1c      	subge	r4, r3, r4
 80181e4:	9b07      	ldr	r3, [sp, #28]
 80181e6:	bfbc      	itt	lt
 80181e8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80181ea:	2400      	movlt	r4, #0
 80181ec:	2b00      	cmp	r3, #0
 80181ee:	bfb5      	itete	lt
 80181f0:	eba8 0603 	sublt.w	r6, r8, r3
 80181f4:	9b07      	ldrge	r3, [sp, #28]
 80181f6:	2300      	movlt	r3, #0
 80181f8:	4646      	movge	r6, r8
 80181fa:	e730      	b.n	801805e <_dtoa_r+0x71e>
 80181fc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80181fe:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8018200:	4646      	mov	r6, r8
 8018202:	e735      	b.n	8018070 <_dtoa_r+0x730>
 8018204:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8018206:	e75c      	b.n	80180c2 <_dtoa_r+0x782>
 8018208:	2300      	movs	r3, #0
 801820a:	e788      	b.n	801811e <_dtoa_r+0x7de>
 801820c:	3fe00000 	.word	0x3fe00000
 8018210:	40240000 	.word	0x40240000
 8018214:	40140000 	.word	0x40140000
 8018218:	9b02      	ldr	r3, [sp, #8]
 801821a:	e780      	b.n	801811e <_dtoa_r+0x7de>
 801821c:	2300      	movs	r3, #0
 801821e:	930a      	str	r3, [sp, #40]	@ 0x28
 8018220:	e782      	b.n	8018128 <_dtoa_r+0x7e8>
 8018222:	d099      	beq.n	8018158 <_dtoa_r+0x818>
 8018224:	9a08      	ldr	r2, [sp, #32]
 8018226:	331c      	adds	r3, #28
 8018228:	441a      	add	r2, r3
 801822a:	4498      	add	r8, r3
 801822c:	441e      	add	r6, r3
 801822e:	9208      	str	r2, [sp, #32]
 8018230:	e792      	b.n	8018158 <_dtoa_r+0x818>
 8018232:	4603      	mov	r3, r0
 8018234:	e7f6      	b.n	8018224 <_dtoa_r+0x8e4>
 8018236:	9b07      	ldr	r3, [sp, #28]
 8018238:	9704      	str	r7, [sp, #16]
 801823a:	2b00      	cmp	r3, #0
 801823c:	dc20      	bgt.n	8018280 <_dtoa_r+0x940>
 801823e:	9300      	str	r3, [sp, #0]
 8018240:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018242:	2b02      	cmp	r3, #2
 8018244:	dd1e      	ble.n	8018284 <_dtoa_r+0x944>
 8018246:	9b00      	ldr	r3, [sp, #0]
 8018248:	2b00      	cmp	r3, #0
 801824a:	f47f aec0 	bne.w	8017fce <_dtoa_r+0x68e>
 801824e:	4621      	mov	r1, r4
 8018250:	2205      	movs	r2, #5
 8018252:	4658      	mov	r0, fp
 8018254:	f000 f9e4 	bl	8018620 <__multadd>
 8018258:	4601      	mov	r1, r0
 801825a:	4604      	mov	r4, r0
 801825c:	4648      	mov	r0, r9
 801825e:	f000 fbf7 	bl	8018a50 <__mcmp>
 8018262:	2800      	cmp	r0, #0
 8018264:	f77f aeb3 	ble.w	8017fce <_dtoa_r+0x68e>
 8018268:	4656      	mov	r6, sl
 801826a:	2331      	movs	r3, #49	@ 0x31
 801826c:	f806 3b01 	strb.w	r3, [r6], #1
 8018270:	9b04      	ldr	r3, [sp, #16]
 8018272:	3301      	adds	r3, #1
 8018274:	9304      	str	r3, [sp, #16]
 8018276:	e6ae      	b.n	8017fd6 <_dtoa_r+0x696>
 8018278:	9c07      	ldr	r4, [sp, #28]
 801827a:	9704      	str	r7, [sp, #16]
 801827c:	4625      	mov	r5, r4
 801827e:	e7f3      	b.n	8018268 <_dtoa_r+0x928>
 8018280:	9b07      	ldr	r3, [sp, #28]
 8018282:	9300      	str	r3, [sp, #0]
 8018284:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018286:	2b00      	cmp	r3, #0
 8018288:	f000 8104 	beq.w	8018494 <_dtoa_r+0xb54>
 801828c:	2e00      	cmp	r6, #0
 801828e:	dd05      	ble.n	801829c <_dtoa_r+0x95c>
 8018290:	4629      	mov	r1, r5
 8018292:	4632      	mov	r2, r6
 8018294:	4658      	mov	r0, fp
 8018296:	f000 fb6f 	bl	8018978 <__lshift>
 801829a:	4605      	mov	r5, r0
 801829c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801829e:	2b00      	cmp	r3, #0
 80182a0:	d05a      	beq.n	8018358 <_dtoa_r+0xa18>
 80182a2:	6869      	ldr	r1, [r5, #4]
 80182a4:	4658      	mov	r0, fp
 80182a6:	f000 f959 	bl	801855c <_Balloc>
 80182aa:	4606      	mov	r6, r0
 80182ac:	b928      	cbnz	r0, 80182ba <_dtoa_r+0x97a>
 80182ae:	4b84      	ldr	r3, [pc, #528]	@ (80184c0 <_dtoa_r+0xb80>)
 80182b0:	4602      	mov	r2, r0
 80182b2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80182b6:	f7ff bb5a 	b.w	801796e <_dtoa_r+0x2e>
 80182ba:	692a      	ldr	r2, [r5, #16]
 80182bc:	3202      	adds	r2, #2
 80182be:	0092      	lsls	r2, r2, #2
 80182c0:	f105 010c 	add.w	r1, r5, #12
 80182c4:	300c      	adds	r0, #12
 80182c6:	f7ff faa2 	bl	801780e <memcpy>
 80182ca:	2201      	movs	r2, #1
 80182cc:	4631      	mov	r1, r6
 80182ce:	4658      	mov	r0, fp
 80182d0:	f000 fb52 	bl	8018978 <__lshift>
 80182d4:	f10a 0301 	add.w	r3, sl, #1
 80182d8:	9307      	str	r3, [sp, #28]
 80182da:	9b00      	ldr	r3, [sp, #0]
 80182dc:	4453      	add	r3, sl
 80182de:	930b      	str	r3, [sp, #44]	@ 0x2c
 80182e0:	9b02      	ldr	r3, [sp, #8]
 80182e2:	f003 0301 	and.w	r3, r3, #1
 80182e6:	462f      	mov	r7, r5
 80182e8:	930a      	str	r3, [sp, #40]	@ 0x28
 80182ea:	4605      	mov	r5, r0
 80182ec:	9b07      	ldr	r3, [sp, #28]
 80182ee:	4621      	mov	r1, r4
 80182f0:	3b01      	subs	r3, #1
 80182f2:	4648      	mov	r0, r9
 80182f4:	9300      	str	r3, [sp, #0]
 80182f6:	f7ff fa98 	bl	801782a <quorem>
 80182fa:	4639      	mov	r1, r7
 80182fc:	9002      	str	r0, [sp, #8]
 80182fe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8018302:	4648      	mov	r0, r9
 8018304:	f000 fba4 	bl	8018a50 <__mcmp>
 8018308:	462a      	mov	r2, r5
 801830a:	9008      	str	r0, [sp, #32]
 801830c:	4621      	mov	r1, r4
 801830e:	4658      	mov	r0, fp
 8018310:	f000 fbba 	bl	8018a88 <__mdiff>
 8018314:	68c2      	ldr	r2, [r0, #12]
 8018316:	4606      	mov	r6, r0
 8018318:	bb02      	cbnz	r2, 801835c <_dtoa_r+0xa1c>
 801831a:	4601      	mov	r1, r0
 801831c:	4648      	mov	r0, r9
 801831e:	f000 fb97 	bl	8018a50 <__mcmp>
 8018322:	4602      	mov	r2, r0
 8018324:	4631      	mov	r1, r6
 8018326:	4658      	mov	r0, fp
 8018328:	920e      	str	r2, [sp, #56]	@ 0x38
 801832a:	f000 f957 	bl	80185dc <_Bfree>
 801832e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018330:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018332:	9e07      	ldr	r6, [sp, #28]
 8018334:	ea43 0102 	orr.w	r1, r3, r2
 8018338:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801833a:	4319      	orrs	r1, r3
 801833c:	d110      	bne.n	8018360 <_dtoa_r+0xa20>
 801833e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8018342:	d029      	beq.n	8018398 <_dtoa_r+0xa58>
 8018344:	9b08      	ldr	r3, [sp, #32]
 8018346:	2b00      	cmp	r3, #0
 8018348:	dd02      	ble.n	8018350 <_dtoa_r+0xa10>
 801834a:	9b02      	ldr	r3, [sp, #8]
 801834c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8018350:	9b00      	ldr	r3, [sp, #0]
 8018352:	f883 8000 	strb.w	r8, [r3]
 8018356:	e63f      	b.n	8017fd8 <_dtoa_r+0x698>
 8018358:	4628      	mov	r0, r5
 801835a:	e7bb      	b.n	80182d4 <_dtoa_r+0x994>
 801835c:	2201      	movs	r2, #1
 801835e:	e7e1      	b.n	8018324 <_dtoa_r+0x9e4>
 8018360:	9b08      	ldr	r3, [sp, #32]
 8018362:	2b00      	cmp	r3, #0
 8018364:	db04      	blt.n	8018370 <_dtoa_r+0xa30>
 8018366:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8018368:	430b      	orrs	r3, r1
 801836a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801836c:	430b      	orrs	r3, r1
 801836e:	d120      	bne.n	80183b2 <_dtoa_r+0xa72>
 8018370:	2a00      	cmp	r2, #0
 8018372:	dded      	ble.n	8018350 <_dtoa_r+0xa10>
 8018374:	4649      	mov	r1, r9
 8018376:	2201      	movs	r2, #1
 8018378:	4658      	mov	r0, fp
 801837a:	f000 fafd 	bl	8018978 <__lshift>
 801837e:	4621      	mov	r1, r4
 8018380:	4681      	mov	r9, r0
 8018382:	f000 fb65 	bl	8018a50 <__mcmp>
 8018386:	2800      	cmp	r0, #0
 8018388:	dc03      	bgt.n	8018392 <_dtoa_r+0xa52>
 801838a:	d1e1      	bne.n	8018350 <_dtoa_r+0xa10>
 801838c:	f018 0f01 	tst.w	r8, #1
 8018390:	d0de      	beq.n	8018350 <_dtoa_r+0xa10>
 8018392:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8018396:	d1d8      	bne.n	801834a <_dtoa_r+0xa0a>
 8018398:	9a00      	ldr	r2, [sp, #0]
 801839a:	2339      	movs	r3, #57	@ 0x39
 801839c:	7013      	strb	r3, [r2, #0]
 801839e:	4633      	mov	r3, r6
 80183a0:	461e      	mov	r6, r3
 80183a2:	3b01      	subs	r3, #1
 80183a4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80183a8:	2a39      	cmp	r2, #57	@ 0x39
 80183aa:	d052      	beq.n	8018452 <_dtoa_r+0xb12>
 80183ac:	3201      	adds	r2, #1
 80183ae:	701a      	strb	r2, [r3, #0]
 80183b0:	e612      	b.n	8017fd8 <_dtoa_r+0x698>
 80183b2:	2a00      	cmp	r2, #0
 80183b4:	dd07      	ble.n	80183c6 <_dtoa_r+0xa86>
 80183b6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80183ba:	d0ed      	beq.n	8018398 <_dtoa_r+0xa58>
 80183bc:	9a00      	ldr	r2, [sp, #0]
 80183be:	f108 0301 	add.w	r3, r8, #1
 80183c2:	7013      	strb	r3, [r2, #0]
 80183c4:	e608      	b.n	8017fd8 <_dtoa_r+0x698>
 80183c6:	9b07      	ldr	r3, [sp, #28]
 80183c8:	9a07      	ldr	r2, [sp, #28]
 80183ca:	f803 8c01 	strb.w	r8, [r3, #-1]
 80183ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80183d0:	4293      	cmp	r3, r2
 80183d2:	d028      	beq.n	8018426 <_dtoa_r+0xae6>
 80183d4:	4649      	mov	r1, r9
 80183d6:	2300      	movs	r3, #0
 80183d8:	220a      	movs	r2, #10
 80183da:	4658      	mov	r0, fp
 80183dc:	f000 f920 	bl	8018620 <__multadd>
 80183e0:	42af      	cmp	r7, r5
 80183e2:	4681      	mov	r9, r0
 80183e4:	f04f 0300 	mov.w	r3, #0
 80183e8:	f04f 020a 	mov.w	r2, #10
 80183ec:	4639      	mov	r1, r7
 80183ee:	4658      	mov	r0, fp
 80183f0:	d107      	bne.n	8018402 <_dtoa_r+0xac2>
 80183f2:	f000 f915 	bl	8018620 <__multadd>
 80183f6:	4607      	mov	r7, r0
 80183f8:	4605      	mov	r5, r0
 80183fa:	9b07      	ldr	r3, [sp, #28]
 80183fc:	3301      	adds	r3, #1
 80183fe:	9307      	str	r3, [sp, #28]
 8018400:	e774      	b.n	80182ec <_dtoa_r+0x9ac>
 8018402:	f000 f90d 	bl	8018620 <__multadd>
 8018406:	4629      	mov	r1, r5
 8018408:	4607      	mov	r7, r0
 801840a:	2300      	movs	r3, #0
 801840c:	220a      	movs	r2, #10
 801840e:	4658      	mov	r0, fp
 8018410:	f000 f906 	bl	8018620 <__multadd>
 8018414:	4605      	mov	r5, r0
 8018416:	e7f0      	b.n	80183fa <_dtoa_r+0xaba>
 8018418:	9b00      	ldr	r3, [sp, #0]
 801841a:	2b00      	cmp	r3, #0
 801841c:	bfcc      	ite	gt
 801841e:	461e      	movgt	r6, r3
 8018420:	2601      	movle	r6, #1
 8018422:	4456      	add	r6, sl
 8018424:	2700      	movs	r7, #0
 8018426:	4649      	mov	r1, r9
 8018428:	2201      	movs	r2, #1
 801842a:	4658      	mov	r0, fp
 801842c:	f000 faa4 	bl	8018978 <__lshift>
 8018430:	4621      	mov	r1, r4
 8018432:	4681      	mov	r9, r0
 8018434:	f000 fb0c 	bl	8018a50 <__mcmp>
 8018438:	2800      	cmp	r0, #0
 801843a:	dcb0      	bgt.n	801839e <_dtoa_r+0xa5e>
 801843c:	d102      	bne.n	8018444 <_dtoa_r+0xb04>
 801843e:	f018 0f01 	tst.w	r8, #1
 8018442:	d1ac      	bne.n	801839e <_dtoa_r+0xa5e>
 8018444:	4633      	mov	r3, r6
 8018446:	461e      	mov	r6, r3
 8018448:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801844c:	2a30      	cmp	r2, #48	@ 0x30
 801844e:	d0fa      	beq.n	8018446 <_dtoa_r+0xb06>
 8018450:	e5c2      	b.n	8017fd8 <_dtoa_r+0x698>
 8018452:	459a      	cmp	sl, r3
 8018454:	d1a4      	bne.n	80183a0 <_dtoa_r+0xa60>
 8018456:	9b04      	ldr	r3, [sp, #16]
 8018458:	3301      	adds	r3, #1
 801845a:	9304      	str	r3, [sp, #16]
 801845c:	2331      	movs	r3, #49	@ 0x31
 801845e:	f88a 3000 	strb.w	r3, [sl]
 8018462:	e5b9      	b.n	8017fd8 <_dtoa_r+0x698>
 8018464:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8018466:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80184c4 <_dtoa_r+0xb84>
 801846a:	b11b      	cbz	r3, 8018474 <_dtoa_r+0xb34>
 801846c:	f10a 0308 	add.w	r3, sl, #8
 8018470:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8018472:	6013      	str	r3, [r2, #0]
 8018474:	4650      	mov	r0, sl
 8018476:	b019      	add	sp, #100	@ 0x64
 8018478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801847c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801847e:	2b01      	cmp	r3, #1
 8018480:	f77f ae37 	ble.w	80180f2 <_dtoa_r+0x7b2>
 8018484:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018486:	930a      	str	r3, [sp, #40]	@ 0x28
 8018488:	2001      	movs	r0, #1
 801848a:	e655      	b.n	8018138 <_dtoa_r+0x7f8>
 801848c:	9b00      	ldr	r3, [sp, #0]
 801848e:	2b00      	cmp	r3, #0
 8018490:	f77f aed6 	ble.w	8018240 <_dtoa_r+0x900>
 8018494:	4656      	mov	r6, sl
 8018496:	4621      	mov	r1, r4
 8018498:	4648      	mov	r0, r9
 801849a:	f7ff f9c6 	bl	801782a <quorem>
 801849e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80184a2:	f806 8b01 	strb.w	r8, [r6], #1
 80184a6:	9b00      	ldr	r3, [sp, #0]
 80184a8:	eba6 020a 	sub.w	r2, r6, sl
 80184ac:	4293      	cmp	r3, r2
 80184ae:	ddb3      	ble.n	8018418 <_dtoa_r+0xad8>
 80184b0:	4649      	mov	r1, r9
 80184b2:	2300      	movs	r3, #0
 80184b4:	220a      	movs	r2, #10
 80184b6:	4658      	mov	r0, fp
 80184b8:	f000 f8b2 	bl	8018620 <__multadd>
 80184bc:	4681      	mov	r9, r0
 80184be:	e7ea      	b.n	8018496 <_dtoa_r+0xb56>
 80184c0:	080d7cc0 	.word	0x080d7cc0
 80184c4:	080d7c44 	.word	0x080d7c44

080184c8 <_free_r>:
 80184c8:	b538      	push	{r3, r4, r5, lr}
 80184ca:	4605      	mov	r5, r0
 80184cc:	2900      	cmp	r1, #0
 80184ce:	d041      	beq.n	8018554 <_free_r+0x8c>
 80184d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80184d4:	1f0c      	subs	r4, r1, #4
 80184d6:	2b00      	cmp	r3, #0
 80184d8:	bfb8      	it	lt
 80184da:	18e4      	addlt	r4, r4, r3
 80184dc:	f7fe fa4c 	bl	8016978 <__malloc_lock>
 80184e0:	4a1d      	ldr	r2, [pc, #116]	@ (8018558 <_free_r+0x90>)
 80184e2:	6813      	ldr	r3, [r2, #0]
 80184e4:	b933      	cbnz	r3, 80184f4 <_free_r+0x2c>
 80184e6:	6063      	str	r3, [r4, #4]
 80184e8:	6014      	str	r4, [r2, #0]
 80184ea:	4628      	mov	r0, r5
 80184ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80184f0:	f7fe ba48 	b.w	8016984 <__malloc_unlock>
 80184f4:	42a3      	cmp	r3, r4
 80184f6:	d908      	bls.n	801850a <_free_r+0x42>
 80184f8:	6820      	ldr	r0, [r4, #0]
 80184fa:	1821      	adds	r1, r4, r0
 80184fc:	428b      	cmp	r3, r1
 80184fe:	bf01      	itttt	eq
 8018500:	6819      	ldreq	r1, [r3, #0]
 8018502:	685b      	ldreq	r3, [r3, #4]
 8018504:	1809      	addeq	r1, r1, r0
 8018506:	6021      	streq	r1, [r4, #0]
 8018508:	e7ed      	b.n	80184e6 <_free_r+0x1e>
 801850a:	461a      	mov	r2, r3
 801850c:	685b      	ldr	r3, [r3, #4]
 801850e:	b10b      	cbz	r3, 8018514 <_free_r+0x4c>
 8018510:	42a3      	cmp	r3, r4
 8018512:	d9fa      	bls.n	801850a <_free_r+0x42>
 8018514:	6811      	ldr	r1, [r2, #0]
 8018516:	1850      	adds	r0, r2, r1
 8018518:	42a0      	cmp	r0, r4
 801851a:	d10b      	bne.n	8018534 <_free_r+0x6c>
 801851c:	6820      	ldr	r0, [r4, #0]
 801851e:	4401      	add	r1, r0
 8018520:	1850      	adds	r0, r2, r1
 8018522:	4283      	cmp	r3, r0
 8018524:	6011      	str	r1, [r2, #0]
 8018526:	d1e0      	bne.n	80184ea <_free_r+0x22>
 8018528:	6818      	ldr	r0, [r3, #0]
 801852a:	685b      	ldr	r3, [r3, #4]
 801852c:	6053      	str	r3, [r2, #4]
 801852e:	4408      	add	r0, r1
 8018530:	6010      	str	r0, [r2, #0]
 8018532:	e7da      	b.n	80184ea <_free_r+0x22>
 8018534:	d902      	bls.n	801853c <_free_r+0x74>
 8018536:	230c      	movs	r3, #12
 8018538:	602b      	str	r3, [r5, #0]
 801853a:	e7d6      	b.n	80184ea <_free_r+0x22>
 801853c:	6820      	ldr	r0, [r4, #0]
 801853e:	1821      	adds	r1, r4, r0
 8018540:	428b      	cmp	r3, r1
 8018542:	bf04      	itt	eq
 8018544:	6819      	ldreq	r1, [r3, #0]
 8018546:	685b      	ldreq	r3, [r3, #4]
 8018548:	6063      	str	r3, [r4, #4]
 801854a:	bf04      	itt	eq
 801854c:	1809      	addeq	r1, r1, r0
 801854e:	6021      	streq	r1, [r4, #0]
 8018550:	6054      	str	r4, [r2, #4]
 8018552:	e7ca      	b.n	80184ea <_free_r+0x22>
 8018554:	bd38      	pop	{r3, r4, r5, pc}
 8018556:	bf00      	nop
 8018558:	20036024 	.word	0x20036024

0801855c <_Balloc>:
 801855c:	b570      	push	{r4, r5, r6, lr}
 801855e:	69c6      	ldr	r6, [r0, #28]
 8018560:	4604      	mov	r4, r0
 8018562:	460d      	mov	r5, r1
 8018564:	b976      	cbnz	r6, 8018584 <_Balloc+0x28>
 8018566:	2010      	movs	r0, #16
 8018568:	f7fe f95c 	bl	8016824 <malloc>
 801856c:	4602      	mov	r2, r0
 801856e:	61e0      	str	r0, [r4, #28]
 8018570:	b920      	cbnz	r0, 801857c <_Balloc+0x20>
 8018572:	4b18      	ldr	r3, [pc, #96]	@ (80185d4 <_Balloc+0x78>)
 8018574:	4818      	ldr	r0, [pc, #96]	@ (80185d8 <_Balloc+0x7c>)
 8018576:	216b      	movs	r1, #107	@ 0x6b
 8018578:	f000 ff5e 	bl	8019438 <__assert_func>
 801857c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018580:	6006      	str	r6, [r0, #0]
 8018582:	60c6      	str	r6, [r0, #12]
 8018584:	69e6      	ldr	r6, [r4, #28]
 8018586:	68f3      	ldr	r3, [r6, #12]
 8018588:	b183      	cbz	r3, 80185ac <_Balloc+0x50>
 801858a:	69e3      	ldr	r3, [r4, #28]
 801858c:	68db      	ldr	r3, [r3, #12]
 801858e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8018592:	b9b8      	cbnz	r0, 80185c4 <_Balloc+0x68>
 8018594:	2101      	movs	r1, #1
 8018596:	fa01 f605 	lsl.w	r6, r1, r5
 801859a:	1d72      	adds	r2, r6, #5
 801859c:	0092      	lsls	r2, r2, #2
 801859e:	4620      	mov	r0, r4
 80185a0:	f000 ff68 	bl	8019474 <_calloc_r>
 80185a4:	b160      	cbz	r0, 80185c0 <_Balloc+0x64>
 80185a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80185aa:	e00e      	b.n	80185ca <_Balloc+0x6e>
 80185ac:	2221      	movs	r2, #33	@ 0x21
 80185ae:	2104      	movs	r1, #4
 80185b0:	4620      	mov	r0, r4
 80185b2:	f000 ff5f 	bl	8019474 <_calloc_r>
 80185b6:	69e3      	ldr	r3, [r4, #28]
 80185b8:	60f0      	str	r0, [r6, #12]
 80185ba:	68db      	ldr	r3, [r3, #12]
 80185bc:	2b00      	cmp	r3, #0
 80185be:	d1e4      	bne.n	801858a <_Balloc+0x2e>
 80185c0:	2000      	movs	r0, #0
 80185c2:	bd70      	pop	{r4, r5, r6, pc}
 80185c4:	6802      	ldr	r2, [r0, #0]
 80185c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80185ca:	2300      	movs	r3, #0
 80185cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80185d0:	e7f7      	b.n	80185c2 <_Balloc+0x66>
 80185d2:	bf00      	nop
 80185d4:	080d7c51 	.word	0x080d7c51
 80185d8:	080d7cd1 	.word	0x080d7cd1

080185dc <_Bfree>:
 80185dc:	b570      	push	{r4, r5, r6, lr}
 80185de:	69c6      	ldr	r6, [r0, #28]
 80185e0:	4605      	mov	r5, r0
 80185e2:	460c      	mov	r4, r1
 80185e4:	b976      	cbnz	r6, 8018604 <_Bfree+0x28>
 80185e6:	2010      	movs	r0, #16
 80185e8:	f7fe f91c 	bl	8016824 <malloc>
 80185ec:	4602      	mov	r2, r0
 80185ee:	61e8      	str	r0, [r5, #28]
 80185f0:	b920      	cbnz	r0, 80185fc <_Bfree+0x20>
 80185f2:	4b09      	ldr	r3, [pc, #36]	@ (8018618 <_Bfree+0x3c>)
 80185f4:	4809      	ldr	r0, [pc, #36]	@ (801861c <_Bfree+0x40>)
 80185f6:	218f      	movs	r1, #143	@ 0x8f
 80185f8:	f000 ff1e 	bl	8019438 <__assert_func>
 80185fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018600:	6006      	str	r6, [r0, #0]
 8018602:	60c6      	str	r6, [r0, #12]
 8018604:	b13c      	cbz	r4, 8018616 <_Bfree+0x3a>
 8018606:	69eb      	ldr	r3, [r5, #28]
 8018608:	6862      	ldr	r2, [r4, #4]
 801860a:	68db      	ldr	r3, [r3, #12]
 801860c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018610:	6021      	str	r1, [r4, #0]
 8018612:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8018616:	bd70      	pop	{r4, r5, r6, pc}
 8018618:	080d7c51 	.word	0x080d7c51
 801861c:	080d7cd1 	.word	0x080d7cd1

08018620 <__multadd>:
 8018620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018624:	690d      	ldr	r5, [r1, #16]
 8018626:	4607      	mov	r7, r0
 8018628:	460c      	mov	r4, r1
 801862a:	461e      	mov	r6, r3
 801862c:	f101 0c14 	add.w	ip, r1, #20
 8018630:	2000      	movs	r0, #0
 8018632:	f8dc 3000 	ldr.w	r3, [ip]
 8018636:	b299      	uxth	r1, r3
 8018638:	fb02 6101 	mla	r1, r2, r1, r6
 801863c:	0c1e      	lsrs	r6, r3, #16
 801863e:	0c0b      	lsrs	r3, r1, #16
 8018640:	fb02 3306 	mla	r3, r2, r6, r3
 8018644:	b289      	uxth	r1, r1
 8018646:	3001      	adds	r0, #1
 8018648:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801864c:	4285      	cmp	r5, r0
 801864e:	f84c 1b04 	str.w	r1, [ip], #4
 8018652:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8018656:	dcec      	bgt.n	8018632 <__multadd+0x12>
 8018658:	b30e      	cbz	r6, 801869e <__multadd+0x7e>
 801865a:	68a3      	ldr	r3, [r4, #8]
 801865c:	42ab      	cmp	r3, r5
 801865e:	dc19      	bgt.n	8018694 <__multadd+0x74>
 8018660:	6861      	ldr	r1, [r4, #4]
 8018662:	4638      	mov	r0, r7
 8018664:	3101      	adds	r1, #1
 8018666:	f7ff ff79 	bl	801855c <_Balloc>
 801866a:	4680      	mov	r8, r0
 801866c:	b928      	cbnz	r0, 801867a <__multadd+0x5a>
 801866e:	4602      	mov	r2, r0
 8018670:	4b0c      	ldr	r3, [pc, #48]	@ (80186a4 <__multadd+0x84>)
 8018672:	480d      	ldr	r0, [pc, #52]	@ (80186a8 <__multadd+0x88>)
 8018674:	21ba      	movs	r1, #186	@ 0xba
 8018676:	f000 fedf 	bl	8019438 <__assert_func>
 801867a:	6922      	ldr	r2, [r4, #16]
 801867c:	3202      	adds	r2, #2
 801867e:	f104 010c 	add.w	r1, r4, #12
 8018682:	0092      	lsls	r2, r2, #2
 8018684:	300c      	adds	r0, #12
 8018686:	f7ff f8c2 	bl	801780e <memcpy>
 801868a:	4621      	mov	r1, r4
 801868c:	4638      	mov	r0, r7
 801868e:	f7ff ffa5 	bl	80185dc <_Bfree>
 8018692:	4644      	mov	r4, r8
 8018694:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8018698:	3501      	adds	r5, #1
 801869a:	615e      	str	r6, [r3, #20]
 801869c:	6125      	str	r5, [r4, #16]
 801869e:	4620      	mov	r0, r4
 80186a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80186a4:	080d7cc0 	.word	0x080d7cc0
 80186a8:	080d7cd1 	.word	0x080d7cd1

080186ac <__hi0bits>:
 80186ac:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80186b0:	4603      	mov	r3, r0
 80186b2:	bf36      	itet	cc
 80186b4:	0403      	lslcc	r3, r0, #16
 80186b6:	2000      	movcs	r0, #0
 80186b8:	2010      	movcc	r0, #16
 80186ba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80186be:	bf3c      	itt	cc
 80186c0:	021b      	lslcc	r3, r3, #8
 80186c2:	3008      	addcc	r0, #8
 80186c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80186c8:	bf3c      	itt	cc
 80186ca:	011b      	lslcc	r3, r3, #4
 80186cc:	3004      	addcc	r0, #4
 80186ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80186d2:	bf3c      	itt	cc
 80186d4:	009b      	lslcc	r3, r3, #2
 80186d6:	3002      	addcc	r0, #2
 80186d8:	2b00      	cmp	r3, #0
 80186da:	db05      	blt.n	80186e8 <__hi0bits+0x3c>
 80186dc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80186e0:	f100 0001 	add.w	r0, r0, #1
 80186e4:	bf08      	it	eq
 80186e6:	2020      	moveq	r0, #32
 80186e8:	4770      	bx	lr

080186ea <__lo0bits>:
 80186ea:	6803      	ldr	r3, [r0, #0]
 80186ec:	4602      	mov	r2, r0
 80186ee:	f013 0007 	ands.w	r0, r3, #7
 80186f2:	d00b      	beq.n	801870c <__lo0bits+0x22>
 80186f4:	07d9      	lsls	r1, r3, #31
 80186f6:	d421      	bmi.n	801873c <__lo0bits+0x52>
 80186f8:	0798      	lsls	r0, r3, #30
 80186fa:	bf49      	itett	mi
 80186fc:	085b      	lsrmi	r3, r3, #1
 80186fe:	089b      	lsrpl	r3, r3, #2
 8018700:	2001      	movmi	r0, #1
 8018702:	6013      	strmi	r3, [r2, #0]
 8018704:	bf5c      	itt	pl
 8018706:	6013      	strpl	r3, [r2, #0]
 8018708:	2002      	movpl	r0, #2
 801870a:	4770      	bx	lr
 801870c:	b299      	uxth	r1, r3
 801870e:	b909      	cbnz	r1, 8018714 <__lo0bits+0x2a>
 8018710:	0c1b      	lsrs	r3, r3, #16
 8018712:	2010      	movs	r0, #16
 8018714:	b2d9      	uxtb	r1, r3
 8018716:	b909      	cbnz	r1, 801871c <__lo0bits+0x32>
 8018718:	3008      	adds	r0, #8
 801871a:	0a1b      	lsrs	r3, r3, #8
 801871c:	0719      	lsls	r1, r3, #28
 801871e:	bf04      	itt	eq
 8018720:	091b      	lsreq	r3, r3, #4
 8018722:	3004      	addeq	r0, #4
 8018724:	0799      	lsls	r1, r3, #30
 8018726:	bf04      	itt	eq
 8018728:	089b      	lsreq	r3, r3, #2
 801872a:	3002      	addeq	r0, #2
 801872c:	07d9      	lsls	r1, r3, #31
 801872e:	d403      	bmi.n	8018738 <__lo0bits+0x4e>
 8018730:	085b      	lsrs	r3, r3, #1
 8018732:	f100 0001 	add.w	r0, r0, #1
 8018736:	d003      	beq.n	8018740 <__lo0bits+0x56>
 8018738:	6013      	str	r3, [r2, #0]
 801873a:	4770      	bx	lr
 801873c:	2000      	movs	r0, #0
 801873e:	4770      	bx	lr
 8018740:	2020      	movs	r0, #32
 8018742:	4770      	bx	lr

08018744 <__i2b>:
 8018744:	b510      	push	{r4, lr}
 8018746:	460c      	mov	r4, r1
 8018748:	2101      	movs	r1, #1
 801874a:	f7ff ff07 	bl	801855c <_Balloc>
 801874e:	4602      	mov	r2, r0
 8018750:	b928      	cbnz	r0, 801875e <__i2b+0x1a>
 8018752:	4b05      	ldr	r3, [pc, #20]	@ (8018768 <__i2b+0x24>)
 8018754:	4805      	ldr	r0, [pc, #20]	@ (801876c <__i2b+0x28>)
 8018756:	f240 1145 	movw	r1, #325	@ 0x145
 801875a:	f000 fe6d 	bl	8019438 <__assert_func>
 801875e:	2301      	movs	r3, #1
 8018760:	6144      	str	r4, [r0, #20]
 8018762:	6103      	str	r3, [r0, #16]
 8018764:	bd10      	pop	{r4, pc}
 8018766:	bf00      	nop
 8018768:	080d7cc0 	.word	0x080d7cc0
 801876c:	080d7cd1 	.word	0x080d7cd1

08018770 <__multiply>:
 8018770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018774:	4614      	mov	r4, r2
 8018776:	690a      	ldr	r2, [r1, #16]
 8018778:	6923      	ldr	r3, [r4, #16]
 801877a:	429a      	cmp	r2, r3
 801877c:	bfa8      	it	ge
 801877e:	4623      	movge	r3, r4
 8018780:	460f      	mov	r7, r1
 8018782:	bfa4      	itt	ge
 8018784:	460c      	movge	r4, r1
 8018786:	461f      	movge	r7, r3
 8018788:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801878c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8018790:	68a3      	ldr	r3, [r4, #8]
 8018792:	6861      	ldr	r1, [r4, #4]
 8018794:	eb0a 0609 	add.w	r6, sl, r9
 8018798:	42b3      	cmp	r3, r6
 801879a:	b085      	sub	sp, #20
 801879c:	bfb8      	it	lt
 801879e:	3101      	addlt	r1, #1
 80187a0:	f7ff fedc 	bl	801855c <_Balloc>
 80187a4:	b930      	cbnz	r0, 80187b4 <__multiply+0x44>
 80187a6:	4602      	mov	r2, r0
 80187a8:	4b44      	ldr	r3, [pc, #272]	@ (80188bc <__multiply+0x14c>)
 80187aa:	4845      	ldr	r0, [pc, #276]	@ (80188c0 <__multiply+0x150>)
 80187ac:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80187b0:	f000 fe42 	bl	8019438 <__assert_func>
 80187b4:	f100 0514 	add.w	r5, r0, #20
 80187b8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80187bc:	462b      	mov	r3, r5
 80187be:	2200      	movs	r2, #0
 80187c0:	4543      	cmp	r3, r8
 80187c2:	d321      	bcc.n	8018808 <__multiply+0x98>
 80187c4:	f107 0114 	add.w	r1, r7, #20
 80187c8:	f104 0214 	add.w	r2, r4, #20
 80187cc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80187d0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80187d4:	9302      	str	r3, [sp, #8]
 80187d6:	1b13      	subs	r3, r2, r4
 80187d8:	3b15      	subs	r3, #21
 80187da:	f023 0303 	bic.w	r3, r3, #3
 80187de:	3304      	adds	r3, #4
 80187e0:	f104 0715 	add.w	r7, r4, #21
 80187e4:	42ba      	cmp	r2, r7
 80187e6:	bf38      	it	cc
 80187e8:	2304      	movcc	r3, #4
 80187ea:	9301      	str	r3, [sp, #4]
 80187ec:	9b02      	ldr	r3, [sp, #8]
 80187ee:	9103      	str	r1, [sp, #12]
 80187f0:	428b      	cmp	r3, r1
 80187f2:	d80c      	bhi.n	801880e <__multiply+0x9e>
 80187f4:	2e00      	cmp	r6, #0
 80187f6:	dd03      	ble.n	8018800 <__multiply+0x90>
 80187f8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80187fc:	2b00      	cmp	r3, #0
 80187fe:	d05b      	beq.n	80188b8 <__multiply+0x148>
 8018800:	6106      	str	r6, [r0, #16]
 8018802:	b005      	add	sp, #20
 8018804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018808:	f843 2b04 	str.w	r2, [r3], #4
 801880c:	e7d8      	b.n	80187c0 <__multiply+0x50>
 801880e:	f8b1 a000 	ldrh.w	sl, [r1]
 8018812:	f1ba 0f00 	cmp.w	sl, #0
 8018816:	d024      	beq.n	8018862 <__multiply+0xf2>
 8018818:	f104 0e14 	add.w	lr, r4, #20
 801881c:	46a9      	mov	r9, r5
 801881e:	f04f 0c00 	mov.w	ip, #0
 8018822:	f85e 7b04 	ldr.w	r7, [lr], #4
 8018826:	f8d9 3000 	ldr.w	r3, [r9]
 801882a:	fa1f fb87 	uxth.w	fp, r7
 801882e:	b29b      	uxth	r3, r3
 8018830:	fb0a 330b 	mla	r3, sl, fp, r3
 8018834:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8018838:	f8d9 7000 	ldr.w	r7, [r9]
 801883c:	4463      	add	r3, ip
 801883e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8018842:	fb0a c70b 	mla	r7, sl, fp, ip
 8018846:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801884a:	b29b      	uxth	r3, r3
 801884c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8018850:	4572      	cmp	r2, lr
 8018852:	f849 3b04 	str.w	r3, [r9], #4
 8018856:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801885a:	d8e2      	bhi.n	8018822 <__multiply+0xb2>
 801885c:	9b01      	ldr	r3, [sp, #4]
 801885e:	f845 c003 	str.w	ip, [r5, r3]
 8018862:	9b03      	ldr	r3, [sp, #12]
 8018864:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8018868:	3104      	adds	r1, #4
 801886a:	f1b9 0f00 	cmp.w	r9, #0
 801886e:	d021      	beq.n	80188b4 <__multiply+0x144>
 8018870:	682b      	ldr	r3, [r5, #0]
 8018872:	f104 0c14 	add.w	ip, r4, #20
 8018876:	46ae      	mov	lr, r5
 8018878:	f04f 0a00 	mov.w	sl, #0
 801887c:	f8bc b000 	ldrh.w	fp, [ip]
 8018880:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8018884:	fb09 770b 	mla	r7, r9, fp, r7
 8018888:	4457      	add	r7, sl
 801888a:	b29b      	uxth	r3, r3
 801888c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8018890:	f84e 3b04 	str.w	r3, [lr], #4
 8018894:	f85c 3b04 	ldr.w	r3, [ip], #4
 8018898:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801889c:	f8be 3000 	ldrh.w	r3, [lr]
 80188a0:	fb09 330a 	mla	r3, r9, sl, r3
 80188a4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80188a8:	4562      	cmp	r2, ip
 80188aa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80188ae:	d8e5      	bhi.n	801887c <__multiply+0x10c>
 80188b0:	9f01      	ldr	r7, [sp, #4]
 80188b2:	51eb      	str	r3, [r5, r7]
 80188b4:	3504      	adds	r5, #4
 80188b6:	e799      	b.n	80187ec <__multiply+0x7c>
 80188b8:	3e01      	subs	r6, #1
 80188ba:	e79b      	b.n	80187f4 <__multiply+0x84>
 80188bc:	080d7cc0 	.word	0x080d7cc0
 80188c0:	080d7cd1 	.word	0x080d7cd1

080188c4 <__pow5mult>:
 80188c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80188c8:	4615      	mov	r5, r2
 80188ca:	f012 0203 	ands.w	r2, r2, #3
 80188ce:	4607      	mov	r7, r0
 80188d0:	460e      	mov	r6, r1
 80188d2:	d007      	beq.n	80188e4 <__pow5mult+0x20>
 80188d4:	4c25      	ldr	r4, [pc, #148]	@ (801896c <__pow5mult+0xa8>)
 80188d6:	3a01      	subs	r2, #1
 80188d8:	2300      	movs	r3, #0
 80188da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80188de:	f7ff fe9f 	bl	8018620 <__multadd>
 80188e2:	4606      	mov	r6, r0
 80188e4:	10ad      	asrs	r5, r5, #2
 80188e6:	d03d      	beq.n	8018964 <__pow5mult+0xa0>
 80188e8:	69fc      	ldr	r4, [r7, #28]
 80188ea:	b97c      	cbnz	r4, 801890c <__pow5mult+0x48>
 80188ec:	2010      	movs	r0, #16
 80188ee:	f7fd ff99 	bl	8016824 <malloc>
 80188f2:	4602      	mov	r2, r0
 80188f4:	61f8      	str	r0, [r7, #28]
 80188f6:	b928      	cbnz	r0, 8018904 <__pow5mult+0x40>
 80188f8:	4b1d      	ldr	r3, [pc, #116]	@ (8018970 <__pow5mult+0xac>)
 80188fa:	481e      	ldr	r0, [pc, #120]	@ (8018974 <__pow5mult+0xb0>)
 80188fc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8018900:	f000 fd9a 	bl	8019438 <__assert_func>
 8018904:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018908:	6004      	str	r4, [r0, #0]
 801890a:	60c4      	str	r4, [r0, #12]
 801890c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8018910:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018914:	b94c      	cbnz	r4, 801892a <__pow5mult+0x66>
 8018916:	f240 2171 	movw	r1, #625	@ 0x271
 801891a:	4638      	mov	r0, r7
 801891c:	f7ff ff12 	bl	8018744 <__i2b>
 8018920:	2300      	movs	r3, #0
 8018922:	f8c8 0008 	str.w	r0, [r8, #8]
 8018926:	4604      	mov	r4, r0
 8018928:	6003      	str	r3, [r0, #0]
 801892a:	f04f 0900 	mov.w	r9, #0
 801892e:	07eb      	lsls	r3, r5, #31
 8018930:	d50a      	bpl.n	8018948 <__pow5mult+0x84>
 8018932:	4631      	mov	r1, r6
 8018934:	4622      	mov	r2, r4
 8018936:	4638      	mov	r0, r7
 8018938:	f7ff ff1a 	bl	8018770 <__multiply>
 801893c:	4631      	mov	r1, r6
 801893e:	4680      	mov	r8, r0
 8018940:	4638      	mov	r0, r7
 8018942:	f7ff fe4b 	bl	80185dc <_Bfree>
 8018946:	4646      	mov	r6, r8
 8018948:	106d      	asrs	r5, r5, #1
 801894a:	d00b      	beq.n	8018964 <__pow5mult+0xa0>
 801894c:	6820      	ldr	r0, [r4, #0]
 801894e:	b938      	cbnz	r0, 8018960 <__pow5mult+0x9c>
 8018950:	4622      	mov	r2, r4
 8018952:	4621      	mov	r1, r4
 8018954:	4638      	mov	r0, r7
 8018956:	f7ff ff0b 	bl	8018770 <__multiply>
 801895a:	6020      	str	r0, [r4, #0]
 801895c:	f8c0 9000 	str.w	r9, [r0]
 8018960:	4604      	mov	r4, r0
 8018962:	e7e4      	b.n	801892e <__pow5mult+0x6a>
 8018964:	4630      	mov	r0, r6
 8018966:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801896a:	bf00      	nop
 801896c:	080d7d2c 	.word	0x080d7d2c
 8018970:	080d7c51 	.word	0x080d7c51
 8018974:	080d7cd1 	.word	0x080d7cd1

08018978 <__lshift>:
 8018978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801897c:	460c      	mov	r4, r1
 801897e:	6849      	ldr	r1, [r1, #4]
 8018980:	6923      	ldr	r3, [r4, #16]
 8018982:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8018986:	68a3      	ldr	r3, [r4, #8]
 8018988:	4607      	mov	r7, r0
 801898a:	4691      	mov	r9, r2
 801898c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018990:	f108 0601 	add.w	r6, r8, #1
 8018994:	42b3      	cmp	r3, r6
 8018996:	db0b      	blt.n	80189b0 <__lshift+0x38>
 8018998:	4638      	mov	r0, r7
 801899a:	f7ff fddf 	bl	801855c <_Balloc>
 801899e:	4605      	mov	r5, r0
 80189a0:	b948      	cbnz	r0, 80189b6 <__lshift+0x3e>
 80189a2:	4602      	mov	r2, r0
 80189a4:	4b28      	ldr	r3, [pc, #160]	@ (8018a48 <__lshift+0xd0>)
 80189a6:	4829      	ldr	r0, [pc, #164]	@ (8018a4c <__lshift+0xd4>)
 80189a8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80189ac:	f000 fd44 	bl	8019438 <__assert_func>
 80189b0:	3101      	adds	r1, #1
 80189b2:	005b      	lsls	r3, r3, #1
 80189b4:	e7ee      	b.n	8018994 <__lshift+0x1c>
 80189b6:	2300      	movs	r3, #0
 80189b8:	f100 0114 	add.w	r1, r0, #20
 80189bc:	f100 0210 	add.w	r2, r0, #16
 80189c0:	4618      	mov	r0, r3
 80189c2:	4553      	cmp	r3, sl
 80189c4:	db33      	blt.n	8018a2e <__lshift+0xb6>
 80189c6:	6920      	ldr	r0, [r4, #16]
 80189c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80189cc:	f104 0314 	add.w	r3, r4, #20
 80189d0:	f019 091f 	ands.w	r9, r9, #31
 80189d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80189d8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80189dc:	d02b      	beq.n	8018a36 <__lshift+0xbe>
 80189de:	f1c9 0e20 	rsb	lr, r9, #32
 80189e2:	468a      	mov	sl, r1
 80189e4:	2200      	movs	r2, #0
 80189e6:	6818      	ldr	r0, [r3, #0]
 80189e8:	fa00 f009 	lsl.w	r0, r0, r9
 80189ec:	4310      	orrs	r0, r2
 80189ee:	f84a 0b04 	str.w	r0, [sl], #4
 80189f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80189f6:	459c      	cmp	ip, r3
 80189f8:	fa22 f20e 	lsr.w	r2, r2, lr
 80189fc:	d8f3      	bhi.n	80189e6 <__lshift+0x6e>
 80189fe:	ebac 0304 	sub.w	r3, ip, r4
 8018a02:	3b15      	subs	r3, #21
 8018a04:	f023 0303 	bic.w	r3, r3, #3
 8018a08:	3304      	adds	r3, #4
 8018a0a:	f104 0015 	add.w	r0, r4, #21
 8018a0e:	4584      	cmp	ip, r0
 8018a10:	bf38      	it	cc
 8018a12:	2304      	movcc	r3, #4
 8018a14:	50ca      	str	r2, [r1, r3]
 8018a16:	b10a      	cbz	r2, 8018a1c <__lshift+0xa4>
 8018a18:	f108 0602 	add.w	r6, r8, #2
 8018a1c:	3e01      	subs	r6, #1
 8018a1e:	4638      	mov	r0, r7
 8018a20:	612e      	str	r6, [r5, #16]
 8018a22:	4621      	mov	r1, r4
 8018a24:	f7ff fdda 	bl	80185dc <_Bfree>
 8018a28:	4628      	mov	r0, r5
 8018a2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018a2e:	f842 0f04 	str.w	r0, [r2, #4]!
 8018a32:	3301      	adds	r3, #1
 8018a34:	e7c5      	b.n	80189c2 <__lshift+0x4a>
 8018a36:	3904      	subs	r1, #4
 8018a38:	f853 2b04 	ldr.w	r2, [r3], #4
 8018a3c:	f841 2f04 	str.w	r2, [r1, #4]!
 8018a40:	459c      	cmp	ip, r3
 8018a42:	d8f9      	bhi.n	8018a38 <__lshift+0xc0>
 8018a44:	e7ea      	b.n	8018a1c <__lshift+0xa4>
 8018a46:	bf00      	nop
 8018a48:	080d7cc0 	.word	0x080d7cc0
 8018a4c:	080d7cd1 	.word	0x080d7cd1

08018a50 <__mcmp>:
 8018a50:	690a      	ldr	r2, [r1, #16]
 8018a52:	4603      	mov	r3, r0
 8018a54:	6900      	ldr	r0, [r0, #16]
 8018a56:	1a80      	subs	r0, r0, r2
 8018a58:	b530      	push	{r4, r5, lr}
 8018a5a:	d10e      	bne.n	8018a7a <__mcmp+0x2a>
 8018a5c:	3314      	adds	r3, #20
 8018a5e:	3114      	adds	r1, #20
 8018a60:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8018a64:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8018a68:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8018a6c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8018a70:	4295      	cmp	r5, r2
 8018a72:	d003      	beq.n	8018a7c <__mcmp+0x2c>
 8018a74:	d205      	bcs.n	8018a82 <__mcmp+0x32>
 8018a76:	f04f 30ff 	mov.w	r0, #4294967295
 8018a7a:	bd30      	pop	{r4, r5, pc}
 8018a7c:	42a3      	cmp	r3, r4
 8018a7e:	d3f3      	bcc.n	8018a68 <__mcmp+0x18>
 8018a80:	e7fb      	b.n	8018a7a <__mcmp+0x2a>
 8018a82:	2001      	movs	r0, #1
 8018a84:	e7f9      	b.n	8018a7a <__mcmp+0x2a>
	...

08018a88 <__mdiff>:
 8018a88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a8c:	4689      	mov	r9, r1
 8018a8e:	4606      	mov	r6, r0
 8018a90:	4611      	mov	r1, r2
 8018a92:	4648      	mov	r0, r9
 8018a94:	4614      	mov	r4, r2
 8018a96:	f7ff ffdb 	bl	8018a50 <__mcmp>
 8018a9a:	1e05      	subs	r5, r0, #0
 8018a9c:	d112      	bne.n	8018ac4 <__mdiff+0x3c>
 8018a9e:	4629      	mov	r1, r5
 8018aa0:	4630      	mov	r0, r6
 8018aa2:	f7ff fd5b 	bl	801855c <_Balloc>
 8018aa6:	4602      	mov	r2, r0
 8018aa8:	b928      	cbnz	r0, 8018ab6 <__mdiff+0x2e>
 8018aaa:	4b3f      	ldr	r3, [pc, #252]	@ (8018ba8 <__mdiff+0x120>)
 8018aac:	f240 2137 	movw	r1, #567	@ 0x237
 8018ab0:	483e      	ldr	r0, [pc, #248]	@ (8018bac <__mdiff+0x124>)
 8018ab2:	f000 fcc1 	bl	8019438 <__assert_func>
 8018ab6:	2301      	movs	r3, #1
 8018ab8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8018abc:	4610      	mov	r0, r2
 8018abe:	b003      	add	sp, #12
 8018ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018ac4:	bfbc      	itt	lt
 8018ac6:	464b      	movlt	r3, r9
 8018ac8:	46a1      	movlt	r9, r4
 8018aca:	4630      	mov	r0, r6
 8018acc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8018ad0:	bfba      	itte	lt
 8018ad2:	461c      	movlt	r4, r3
 8018ad4:	2501      	movlt	r5, #1
 8018ad6:	2500      	movge	r5, #0
 8018ad8:	f7ff fd40 	bl	801855c <_Balloc>
 8018adc:	4602      	mov	r2, r0
 8018ade:	b918      	cbnz	r0, 8018ae8 <__mdiff+0x60>
 8018ae0:	4b31      	ldr	r3, [pc, #196]	@ (8018ba8 <__mdiff+0x120>)
 8018ae2:	f240 2145 	movw	r1, #581	@ 0x245
 8018ae6:	e7e3      	b.n	8018ab0 <__mdiff+0x28>
 8018ae8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8018aec:	6926      	ldr	r6, [r4, #16]
 8018aee:	60c5      	str	r5, [r0, #12]
 8018af0:	f109 0310 	add.w	r3, r9, #16
 8018af4:	f109 0514 	add.w	r5, r9, #20
 8018af8:	f104 0e14 	add.w	lr, r4, #20
 8018afc:	f100 0b14 	add.w	fp, r0, #20
 8018b00:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8018b04:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8018b08:	9301      	str	r3, [sp, #4]
 8018b0a:	46d9      	mov	r9, fp
 8018b0c:	f04f 0c00 	mov.w	ip, #0
 8018b10:	9b01      	ldr	r3, [sp, #4]
 8018b12:	f85e 0b04 	ldr.w	r0, [lr], #4
 8018b16:	f853 af04 	ldr.w	sl, [r3, #4]!
 8018b1a:	9301      	str	r3, [sp, #4]
 8018b1c:	fa1f f38a 	uxth.w	r3, sl
 8018b20:	4619      	mov	r1, r3
 8018b22:	b283      	uxth	r3, r0
 8018b24:	1acb      	subs	r3, r1, r3
 8018b26:	0c00      	lsrs	r0, r0, #16
 8018b28:	4463      	add	r3, ip
 8018b2a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8018b2e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8018b32:	b29b      	uxth	r3, r3
 8018b34:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8018b38:	4576      	cmp	r6, lr
 8018b3a:	f849 3b04 	str.w	r3, [r9], #4
 8018b3e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8018b42:	d8e5      	bhi.n	8018b10 <__mdiff+0x88>
 8018b44:	1b33      	subs	r3, r6, r4
 8018b46:	3b15      	subs	r3, #21
 8018b48:	f023 0303 	bic.w	r3, r3, #3
 8018b4c:	3415      	adds	r4, #21
 8018b4e:	3304      	adds	r3, #4
 8018b50:	42a6      	cmp	r6, r4
 8018b52:	bf38      	it	cc
 8018b54:	2304      	movcc	r3, #4
 8018b56:	441d      	add	r5, r3
 8018b58:	445b      	add	r3, fp
 8018b5a:	461e      	mov	r6, r3
 8018b5c:	462c      	mov	r4, r5
 8018b5e:	4544      	cmp	r4, r8
 8018b60:	d30e      	bcc.n	8018b80 <__mdiff+0xf8>
 8018b62:	f108 0103 	add.w	r1, r8, #3
 8018b66:	1b49      	subs	r1, r1, r5
 8018b68:	f021 0103 	bic.w	r1, r1, #3
 8018b6c:	3d03      	subs	r5, #3
 8018b6e:	45a8      	cmp	r8, r5
 8018b70:	bf38      	it	cc
 8018b72:	2100      	movcc	r1, #0
 8018b74:	440b      	add	r3, r1
 8018b76:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8018b7a:	b191      	cbz	r1, 8018ba2 <__mdiff+0x11a>
 8018b7c:	6117      	str	r7, [r2, #16]
 8018b7e:	e79d      	b.n	8018abc <__mdiff+0x34>
 8018b80:	f854 1b04 	ldr.w	r1, [r4], #4
 8018b84:	46e6      	mov	lr, ip
 8018b86:	0c08      	lsrs	r0, r1, #16
 8018b88:	fa1c fc81 	uxtah	ip, ip, r1
 8018b8c:	4471      	add	r1, lr
 8018b8e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8018b92:	b289      	uxth	r1, r1
 8018b94:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8018b98:	f846 1b04 	str.w	r1, [r6], #4
 8018b9c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8018ba0:	e7dd      	b.n	8018b5e <__mdiff+0xd6>
 8018ba2:	3f01      	subs	r7, #1
 8018ba4:	e7e7      	b.n	8018b76 <__mdiff+0xee>
 8018ba6:	bf00      	nop
 8018ba8:	080d7cc0 	.word	0x080d7cc0
 8018bac:	080d7cd1 	.word	0x080d7cd1

08018bb0 <__d2b>:
 8018bb0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018bb4:	460f      	mov	r7, r1
 8018bb6:	2101      	movs	r1, #1
 8018bb8:	ec59 8b10 	vmov	r8, r9, d0
 8018bbc:	4616      	mov	r6, r2
 8018bbe:	f7ff fccd 	bl	801855c <_Balloc>
 8018bc2:	4604      	mov	r4, r0
 8018bc4:	b930      	cbnz	r0, 8018bd4 <__d2b+0x24>
 8018bc6:	4602      	mov	r2, r0
 8018bc8:	4b23      	ldr	r3, [pc, #140]	@ (8018c58 <__d2b+0xa8>)
 8018bca:	4824      	ldr	r0, [pc, #144]	@ (8018c5c <__d2b+0xac>)
 8018bcc:	f240 310f 	movw	r1, #783	@ 0x30f
 8018bd0:	f000 fc32 	bl	8019438 <__assert_func>
 8018bd4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8018bd8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018bdc:	b10d      	cbz	r5, 8018be2 <__d2b+0x32>
 8018bde:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8018be2:	9301      	str	r3, [sp, #4]
 8018be4:	f1b8 0300 	subs.w	r3, r8, #0
 8018be8:	d023      	beq.n	8018c32 <__d2b+0x82>
 8018bea:	4668      	mov	r0, sp
 8018bec:	9300      	str	r3, [sp, #0]
 8018bee:	f7ff fd7c 	bl	80186ea <__lo0bits>
 8018bf2:	e9dd 1200 	ldrd	r1, r2, [sp]
 8018bf6:	b1d0      	cbz	r0, 8018c2e <__d2b+0x7e>
 8018bf8:	f1c0 0320 	rsb	r3, r0, #32
 8018bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8018c00:	430b      	orrs	r3, r1
 8018c02:	40c2      	lsrs	r2, r0
 8018c04:	6163      	str	r3, [r4, #20]
 8018c06:	9201      	str	r2, [sp, #4]
 8018c08:	9b01      	ldr	r3, [sp, #4]
 8018c0a:	61a3      	str	r3, [r4, #24]
 8018c0c:	2b00      	cmp	r3, #0
 8018c0e:	bf0c      	ite	eq
 8018c10:	2201      	moveq	r2, #1
 8018c12:	2202      	movne	r2, #2
 8018c14:	6122      	str	r2, [r4, #16]
 8018c16:	b1a5      	cbz	r5, 8018c42 <__d2b+0x92>
 8018c18:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8018c1c:	4405      	add	r5, r0
 8018c1e:	603d      	str	r5, [r7, #0]
 8018c20:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8018c24:	6030      	str	r0, [r6, #0]
 8018c26:	4620      	mov	r0, r4
 8018c28:	b003      	add	sp, #12
 8018c2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018c2e:	6161      	str	r1, [r4, #20]
 8018c30:	e7ea      	b.n	8018c08 <__d2b+0x58>
 8018c32:	a801      	add	r0, sp, #4
 8018c34:	f7ff fd59 	bl	80186ea <__lo0bits>
 8018c38:	9b01      	ldr	r3, [sp, #4]
 8018c3a:	6163      	str	r3, [r4, #20]
 8018c3c:	3020      	adds	r0, #32
 8018c3e:	2201      	movs	r2, #1
 8018c40:	e7e8      	b.n	8018c14 <__d2b+0x64>
 8018c42:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8018c46:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8018c4a:	6038      	str	r0, [r7, #0]
 8018c4c:	6918      	ldr	r0, [r3, #16]
 8018c4e:	f7ff fd2d 	bl	80186ac <__hi0bits>
 8018c52:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8018c56:	e7e5      	b.n	8018c24 <__d2b+0x74>
 8018c58:	080d7cc0 	.word	0x080d7cc0
 8018c5c:	080d7cd1 	.word	0x080d7cd1

08018c60 <_malloc_usable_size_r>:
 8018c60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018c64:	1f18      	subs	r0, r3, #4
 8018c66:	2b00      	cmp	r3, #0
 8018c68:	bfbc      	itt	lt
 8018c6a:	580b      	ldrlt	r3, [r1, r0]
 8018c6c:	18c0      	addlt	r0, r0, r3
 8018c6e:	4770      	bx	lr

08018c70 <__ssputs_r>:
 8018c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018c74:	688e      	ldr	r6, [r1, #8]
 8018c76:	461f      	mov	r7, r3
 8018c78:	42be      	cmp	r6, r7
 8018c7a:	680b      	ldr	r3, [r1, #0]
 8018c7c:	4682      	mov	sl, r0
 8018c7e:	460c      	mov	r4, r1
 8018c80:	4690      	mov	r8, r2
 8018c82:	d82d      	bhi.n	8018ce0 <__ssputs_r+0x70>
 8018c84:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8018c88:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8018c8c:	d026      	beq.n	8018cdc <__ssputs_r+0x6c>
 8018c8e:	6965      	ldr	r5, [r4, #20]
 8018c90:	6909      	ldr	r1, [r1, #16]
 8018c92:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018c96:	eba3 0901 	sub.w	r9, r3, r1
 8018c9a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8018c9e:	1c7b      	adds	r3, r7, #1
 8018ca0:	444b      	add	r3, r9
 8018ca2:	106d      	asrs	r5, r5, #1
 8018ca4:	429d      	cmp	r5, r3
 8018ca6:	bf38      	it	cc
 8018ca8:	461d      	movcc	r5, r3
 8018caa:	0553      	lsls	r3, r2, #21
 8018cac:	d527      	bpl.n	8018cfe <__ssputs_r+0x8e>
 8018cae:	4629      	mov	r1, r5
 8018cb0:	f7fd fde2 	bl	8016878 <_malloc_r>
 8018cb4:	4606      	mov	r6, r0
 8018cb6:	b360      	cbz	r0, 8018d12 <__ssputs_r+0xa2>
 8018cb8:	6921      	ldr	r1, [r4, #16]
 8018cba:	464a      	mov	r2, r9
 8018cbc:	f7fe fda7 	bl	801780e <memcpy>
 8018cc0:	89a3      	ldrh	r3, [r4, #12]
 8018cc2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8018cc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018cca:	81a3      	strh	r3, [r4, #12]
 8018ccc:	6126      	str	r6, [r4, #16]
 8018cce:	6165      	str	r5, [r4, #20]
 8018cd0:	444e      	add	r6, r9
 8018cd2:	eba5 0509 	sub.w	r5, r5, r9
 8018cd6:	6026      	str	r6, [r4, #0]
 8018cd8:	60a5      	str	r5, [r4, #8]
 8018cda:	463e      	mov	r6, r7
 8018cdc:	42be      	cmp	r6, r7
 8018cde:	d900      	bls.n	8018ce2 <__ssputs_r+0x72>
 8018ce0:	463e      	mov	r6, r7
 8018ce2:	6820      	ldr	r0, [r4, #0]
 8018ce4:	4632      	mov	r2, r6
 8018ce6:	4641      	mov	r1, r8
 8018ce8:	f000 fb6a 	bl	80193c0 <memmove>
 8018cec:	68a3      	ldr	r3, [r4, #8]
 8018cee:	1b9b      	subs	r3, r3, r6
 8018cf0:	60a3      	str	r3, [r4, #8]
 8018cf2:	6823      	ldr	r3, [r4, #0]
 8018cf4:	4433      	add	r3, r6
 8018cf6:	6023      	str	r3, [r4, #0]
 8018cf8:	2000      	movs	r0, #0
 8018cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018cfe:	462a      	mov	r2, r5
 8018d00:	f7fd fe46 	bl	8016990 <_realloc_r>
 8018d04:	4606      	mov	r6, r0
 8018d06:	2800      	cmp	r0, #0
 8018d08:	d1e0      	bne.n	8018ccc <__ssputs_r+0x5c>
 8018d0a:	6921      	ldr	r1, [r4, #16]
 8018d0c:	4650      	mov	r0, sl
 8018d0e:	f7ff fbdb 	bl	80184c8 <_free_r>
 8018d12:	230c      	movs	r3, #12
 8018d14:	f8ca 3000 	str.w	r3, [sl]
 8018d18:	89a3      	ldrh	r3, [r4, #12]
 8018d1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018d1e:	81a3      	strh	r3, [r4, #12]
 8018d20:	f04f 30ff 	mov.w	r0, #4294967295
 8018d24:	e7e9      	b.n	8018cfa <__ssputs_r+0x8a>
	...

08018d28 <_svfiprintf_r>:
 8018d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d2c:	4698      	mov	r8, r3
 8018d2e:	898b      	ldrh	r3, [r1, #12]
 8018d30:	061b      	lsls	r3, r3, #24
 8018d32:	b09d      	sub	sp, #116	@ 0x74
 8018d34:	4607      	mov	r7, r0
 8018d36:	460d      	mov	r5, r1
 8018d38:	4614      	mov	r4, r2
 8018d3a:	d510      	bpl.n	8018d5e <_svfiprintf_r+0x36>
 8018d3c:	690b      	ldr	r3, [r1, #16]
 8018d3e:	b973      	cbnz	r3, 8018d5e <_svfiprintf_r+0x36>
 8018d40:	2140      	movs	r1, #64	@ 0x40
 8018d42:	f7fd fd99 	bl	8016878 <_malloc_r>
 8018d46:	6028      	str	r0, [r5, #0]
 8018d48:	6128      	str	r0, [r5, #16]
 8018d4a:	b930      	cbnz	r0, 8018d5a <_svfiprintf_r+0x32>
 8018d4c:	230c      	movs	r3, #12
 8018d4e:	603b      	str	r3, [r7, #0]
 8018d50:	f04f 30ff 	mov.w	r0, #4294967295
 8018d54:	b01d      	add	sp, #116	@ 0x74
 8018d56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018d5a:	2340      	movs	r3, #64	@ 0x40
 8018d5c:	616b      	str	r3, [r5, #20]
 8018d5e:	2300      	movs	r3, #0
 8018d60:	9309      	str	r3, [sp, #36]	@ 0x24
 8018d62:	2320      	movs	r3, #32
 8018d64:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8018d68:	f8cd 800c 	str.w	r8, [sp, #12]
 8018d6c:	2330      	movs	r3, #48	@ 0x30
 8018d6e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8018f0c <_svfiprintf_r+0x1e4>
 8018d72:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8018d76:	f04f 0901 	mov.w	r9, #1
 8018d7a:	4623      	mov	r3, r4
 8018d7c:	469a      	mov	sl, r3
 8018d7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018d82:	b10a      	cbz	r2, 8018d88 <_svfiprintf_r+0x60>
 8018d84:	2a25      	cmp	r2, #37	@ 0x25
 8018d86:	d1f9      	bne.n	8018d7c <_svfiprintf_r+0x54>
 8018d88:	ebba 0b04 	subs.w	fp, sl, r4
 8018d8c:	d00b      	beq.n	8018da6 <_svfiprintf_r+0x7e>
 8018d8e:	465b      	mov	r3, fp
 8018d90:	4622      	mov	r2, r4
 8018d92:	4629      	mov	r1, r5
 8018d94:	4638      	mov	r0, r7
 8018d96:	f7ff ff6b 	bl	8018c70 <__ssputs_r>
 8018d9a:	3001      	adds	r0, #1
 8018d9c:	f000 80a7 	beq.w	8018eee <_svfiprintf_r+0x1c6>
 8018da0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018da2:	445a      	add	r2, fp
 8018da4:	9209      	str	r2, [sp, #36]	@ 0x24
 8018da6:	f89a 3000 	ldrb.w	r3, [sl]
 8018daa:	2b00      	cmp	r3, #0
 8018dac:	f000 809f 	beq.w	8018eee <_svfiprintf_r+0x1c6>
 8018db0:	2300      	movs	r3, #0
 8018db2:	f04f 32ff 	mov.w	r2, #4294967295
 8018db6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018dba:	f10a 0a01 	add.w	sl, sl, #1
 8018dbe:	9304      	str	r3, [sp, #16]
 8018dc0:	9307      	str	r3, [sp, #28]
 8018dc2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8018dc6:	931a      	str	r3, [sp, #104]	@ 0x68
 8018dc8:	4654      	mov	r4, sl
 8018dca:	2205      	movs	r2, #5
 8018dcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018dd0:	484e      	ldr	r0, [pc, #312]	@ (8018f0c <_svfiprintf_r+0x1e4>)
 8018dd2:	f7e7 fa8d 	bl	80002f0 <memchr>
 8018dd6:	9a04      	ldr	r2, [sp, #16]
 8018dd8:	b9d8      	cbnz	r0, 8018e12 <_svfiprintf_r+0xea>
 8018dda:	06d0      	lsls	r0, r2, #27
 8018ddc:	bf44      	itt	mi
 8018dde:	2320      	movmi	r3, #32
 8018de0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018de4:	0711      	lsls	r1, r2, #28
 8018de6:	bf44      	itt	mi
 8018de8:	232b      	movmi	r3, #43	@ 0x2b
 8018dea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018dee:	f89a 3000 	ldrb.w	r3, [sl]
 8018df2:	2b2a      	cmp	r3, #42	@ 0x2a
 8018df4:	d015      	beq.n	8018e22 <_svfiprintf_r+0xfa>
 8018df6:	9a07      	ldr	r2, [sp, #28]
 8018df8:	4654      	mov	r4, sl
 8018dfa:	2000      	movs	r0, #0
 8018dfc:	f04f 0c0a 	mov.w	ip, #10
 8018e00:	4621      	mov	r1, r4
 8018e02:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018e06:	3b30      	subs	r3, #48	@ 0x30
 8018e08:	2b09      	cmp	r3, #9
 8018e0a:	d94b      	bls.n	8018ea4 <_svfiprintf_r+0x17c>
 8018e0c:	b1b0      	cbz	r0, 8018e3c <_svfiprintf_r+0x114>
 8018e0e:	9207      	str	r2, [sp, #28]
 8018e10:	e014      	b.n	8018e3c <_svfiprintf_r+0x114>
 8018e12:	eba0 0308 	sub.w	r3, r0, r8
 8018e16:	fa09 f303 	lsl.w	r3, r9, r3
 8018e1a:	4313      	orrs	r3, r2
 8018e1c:	9304      	str	r3, [sp, #16]
 8018e1e:	46a2      	mov	sl, r4
 8018e20:	e7d2      	b.n	8018dc8 <_svfiprintf_r+0xa0>
 8018e22:	9b03      	ldr	r3, [sp, #12]
 8018e24:	1d19      	adds	r1, r3, #4
 8018e26:	681b      	ldr	r3, [r3, #0]
 8018e28:	9103      	str	r1, [sp, #12]
 8018e2a:	2b00      	cmp	r3, #0
 8018e2c:	bfbb      	ittet	lt
 8018e2e:	425b      	neglt	r3, r3
 8018e30:	f042 0202 	orrlt.w	r2, r2, #2
 8018e34:	9307      	strge	r3, [sp, #28]
 8018e36:	9307      	strlt	r3, [sp, #28]
 8018e38:	bfb8      	it	lt
 8018e3a:	9204      	strlt	r2, [sp, #16]
 8018e3c:	7823      	ldrb	r3, [r4, #0]
 8018e3e:	2b2e      	cmp	r3, #46	@ 0x2e
 8018e40:	d10a      	bne.n	8018e58 <_svfiprintf_r+0x130>
 8018e42:	7863      	ldrb	r3, [r4, #1]
 8018e44:	2b2a      	cmp	r3, #42	@ 0x2a
 8018e46:	d132      	bne.n	8018eae <_svfiprintf_r+0x186>
 8018e48:	9b03      	ldr	r3, [sp, #12]
 8018e4a:	1d1a      	adds	r2, r3, #4
 8018e4c:	681b      	ldr	r3, [r3, #0]
 8018e4e:	9203      	str	r2, [sp, #12]
 8018e50:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8018e54:	3402      	adds	r4, #2
 8018e56:	9305      	str	r3, [sp, #20]
 8018e58:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8018f1c <_svfiprintf_r+0x1f4>
 8018e5c:	7821      	ldrb	r1, [r4, #0]
 8018e5e:	2203      	movs	r2, #3
 8018e60:	4650      	mov	r0, sl
 8018e62:	f7e7 fa45 	bl	80002f0 <memchr>
 8018e66:	b138      	cbz	r0, 8018e78 <_svfiprintf_r+0x150>
 8018e68:	9b04      	ldr	r3, [sp, #16]
 8018e6a:	eba0 000a 	sub.w	r0, r0, sl
 8018e6e:	2240      	movs	r2, #64	@ 0x40
 8018e70:	4082      	lsls	r2, r0
 8018e72:	4313      	orrs	r3, r2
 8018e74:	3401      	adds	r4, #1
 8018e76:	9304      	str	r3, [sp, #16]
 8018e78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018e7c:	4824      	ldr	r0, [pc, #144]	@ (8018f10 <_svfiprintf_r+0x1e8>)
 8018e7e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8018e82:	2206      	movs	r2, #6
 8018e84:	f7e7 fa34 	bl	80002f0 <memchr>
 8018e88:	2800      	cmp	r0, #0
 8018e8a:	d036      	beq.n	8018efa <_svfiprintf_r+0x1d2>
 8018e8c:	4b21      	ldr	r3, [pc, #132]	@ (8018f14 <_svfiprintf_r+0x1ec>)
 8018e8e:	bb1b      	cbnz	r3, 8018ed8 <_svfiprintf_r+0x1b0>
 8018e90:	9b03      	ldr	r3, [sp, #12]
 8018e92:	3307      	adds	r3, #7
 8018e94:	f023 0307 	bic.w	r3, r3, #7
 8018e98:	3308      	adds	r3, #8
 8018e9a:	9303      	str	r3, [sp, #12]
 8018e9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018e9e:	4433      	add	r3, r6
 8018ea0:	9309      	str	r3, [sp, #36]	@ 0x24
 8018ea2:	e76a      	b.n	8018d7a <_svfiprintf_r+0x52>
 8018ea4:	fb0c 3202 	mla	r2, ip, r2, r3
 8018ea8:	460c      	mov	r4, r1
 8018eaa:	2001      	movs	r0, #1
 8018eac:	e7a8      	b.n	8018e00 <_svfiprintf_r+0xd8>
 8018eae:	2300      	movs	r3, #0
 8018eb0:	3401      	adds	r4, #1
 8018eb2:	9305      	str	r3, [sp, #20]
 8018eb4:	4619      	mov	r1, r3
 8018eb6:	f04f 0c0a 	mov.w	ip, #10
 8018eba:	4620      	mov	r0, r4
 8018ebc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018ec0:	3a30      	subs	r2, #48	@ 0x30
 8018ec2:	2a09      	cmp	r2, #9
 8018ec4:	d903      	bls.n	8018ece <_svfiprintf_r+0x1a6>
 8018ec6:	2b00      	cmp	r3, #0
 8018ec8:	d0c6      	beq.n	8018e58 <_svfiprintf_r+0x130>
 8018eca:	9105      	str	r1, [sp, #20]
 8018ecc:	e7c4      	b.n	8018e58 <_svfiprintf_r+0x130>
 8018ece:	fb0c 2101 	mla	r1, ip, r1, r2
 8018ed2:	4604      	mov	r4, r0
 8018ed4:	2301      	movs	r3, #1
 8018ed6:	e7f0      	b.n	8018eba <_svfiprintf_r+0x192>
 8018ed8:	ab03      	add	r3, sp, #12
 8018eda:	9300      	str	r3, [sp, #0]
 8018edc:	462a      	mov	r2, r5
 8018ede:	4b0e      	ldr	r3, [pc, #56]	@ (8018f18 <_svfiprintf_r+0x1f0>)
 8018ee0:	a904      	add	r1, sp, #16
 8018ee2:	4638      	mov	r0, r7
 8018ee4:	f7fd fe22 	bl	8016b2c <_printf_float>
 8018ee8:	1c42      	adds	r2, r0, #1
 8018eea:	4606      	mov	r6, r0
 8018eec:	d1d6      	bne.n	8018e9c <_svfiprintf_r+0x174>
 8018eee:	89ab      	ldrh	r3, [r5, #12]
 8018ef0:	065b      	lsls	r3, r3, #25
 8018ef2:	f53f af2d 	bmi.w	8018d50 <_svfiprintf_r+0x28>
 8018ef6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018ef8:	e72c      	b.n	8018d54 <_svfiprintf_r+0x2c>
 8018efa:	ab03      	add	r3, sp, #12
 8018efc:	9300      	str	r3, [sp, #0]
 8018efe:	462a      	mov	r2, r5
 8018f00:	4b05      	ldr	r3, [pc, #20]	@ (8018f18 <_svfiprintf_r+0x1f0>)
 8018f02:	a904      	add	r1, sp, #16
 8018f04:	4638      	mov	r0, r7
 8018f06:	f7fe f8a9 	bl	801705c <_printf_i>
 8018f0a:	e7ed      	b.n	8018ee8 <_svfiprintf_r+0x1c0>
 8018f0c:	080d7e28 	.word	0x080d7e28
 8018f10:	080d7e32 	.word	0x080d7e32
 8018f14:	08016b2d 	.word	0x08016b2d
 8018f18:	08018c71 	.word	0x08018c71
 8018f1c:	080d7e2e 	.word	0x080d7e2e

08018f20 <__sfputc_r>:
 8018f20:	6893      	ldr	r3, [r2, #8]
 8018f22:	3b01      	subs	r3, #1
 8018f24:	2b00      	cmp	r3, #0
 8018f26:	b410      	push	{r4}
 8018f28:	6093      	str	r3, [r2, #8]
 8018f2a:	da08      	bge.n	8018f3e <__sfputc_r+0x1e>
 8018f2c:	6994      	ldr	r4, [r2, #24]
 8018f2e:	42a3      	cmp	r3, r4
 8018f30:	db01      	blt.n	8018f36 <__sfputc_r+0x16>
 8018f32:	290a      	cmp	r1, #10
 8018f34:	d103      	bne.n	8018f3e <__sfputc_r+0x1e>
 8018f36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018f3a:	f7fe bb44 	b.w	80175c6 <__swbuf_r>
 8018f3e:	6813      	ldr	r3, [r2, #0]
 8018f40:	1c58      	adds	r0, r3, #1
 8018f42:	6010      	str	r0, [r2, #0]
 8018f44:	7019      	strb	r1, [r3, #0]
 8018f46:	4608      	mov	r0, r1
 8018f48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018f4c:	4770      	bx	lr

08018f4e <__sfputs_r>:
 8018f4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018f50:	4606      	mov	r6, r0
 8018f52:	460f      	mov	r7, r1
 8018f54:	4614      	mov	r4, r2
 8018f56:	18d5      	adds	r5, r2, r3
 8018f58:	42ac      	cmp	r4, r5
 8018f5a:	d101      	bne.n	8018f60 <__sfputs_r+0x12>
 8018f5c:	2000      	movs	r0, #0
 8018f5e:	e007      	b.n	8018f70 <__sfputs_r+0x22>
 8018f60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018f64:	463a      	mov	r2, r7
 8018f66:	4630      	mov	r0, r6
 8018f68:	f7ff ffda 	bl	8018f20 <__sfputc_r>
 8018f6c:	1c43      	adds	r3, r0, #1
 8018f6e:	d1f3      	bne.n	8018f58 <__sfputs_r+0xa>
 8018f70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018f74 <_vfiprintf_r>:
 8018f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f78:	460d      	mov	r5, r1
 8018f7a:	b09d      	sub	sp, #116	@ 0x74
 8018f7c:	4614      	mov	r4, r2
 8018f7e:	4698      	mov	r8, r3
 8018f80:	4606      	mov	r6, r0
 8018f82:	b118      	cbz	r0, 8018f8c <_vfiprintf_r+0x18>
 8018f84:	6a03      	ldr	r3, [r0, #32]
 8018f86:	b90b      	cbnz	r3, 8018f8c <_vfiprintf_r+0x18>
 8018f88:	f7fe fa14 	bl	80173b4 <__sinit>
 8018f8c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018f8e:	07d9      	lsls	r1, r3, #31
 8018f90:	d405      	bmi.n	8018f9e <_vfiprintf_r+0x2a>
 8018f92:	89ab      	ldrh	r3, [r5, #12]
 8018f94:	059a      	lsls	r2, r3, #22
 8018f96:	d402      	bmi.n	8018f9e <_vfiprintf_r+0x2a>
 8018f98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018f9a:	f7fe fc36 	bl	801780a <__retarget_lock_acquire_recursive>
 8018f9e:	89ab      	ldrh	r3, [r5, #12]
 8018fa0:	071b      	lsls	r3, r3, #28
 8018fa2:	d501      	bpl.n	8018fa8 <_vfiprintf_r+0x34>
 8018fa4:	692b      	ldr	r3, [r5, #16]
 8018fa6:	b99b      	cbnz	r3, 8018fd0 <_vfiprintf_r+0x5c>
 8018fa8:	4629      	mov	r1, r5
 8018faa:	4630      	mov	r0, r6
 8018fac:	f7fe fb4a 	bl	8017644 <__swsetup_r>
 8018fb0:	b170      	cbz	r0, 8018fd0 <_vfiprintf_r+0x5c>
 8018fb2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018fb4:	07dc      	lsls	r4, r3, #31
 8018fb6:	d504      	bpl.n	8018fc2 <_vfiprintf_r+0x4e>
 8018fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8018fbc:	b01d      	add	sp, #116	@ 0x74
 8018fbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018fc2:	89ab      	ldrh	r3, [r5, #12]
 8018fc4:	0598      	lsls	r0, r3, #22
 8018fc6:	d4f7      	bmi.n	8018fb8 <_vfiprintf_r+0x44>
 8018fc8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018fca:	f7fe fc1f 	bl	801780c <__retarget_lock_release_recursive>
 8018fce:	e7f3      	b.n	8018fb8 <_vfiprintf_r+0x44>
 8018fd0:	2300      	movs	r3, #0
 8018fd2:	9309      	str	r3, [sp, #36]	@ 0x24
 8018fd4:	2320      	movs	r3, #32
 8018fd6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8018fda:	f8cd 800c 	str.w	r8, [sp, #12]
 8018fde:	2330      	movs	r3, #48	@ 0x30
 8018fe0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8019190 <_vfiprintf_r+0x21c>
 8018fe4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8018fe8:	f04f 0901 	mov.w	r9, #1
 8018fec:	4623      	mov	r3, r4
 8018fee:	469a      	mov	sl, r3
 8018ff0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018ff4:	b10a      	cbz	r2, 8018ffa <_vfiprintf_r+0x86>
 8018ff6:	2a25      	cmp	r2, #37	@ 0x25
 8018ff8:	d1f9      	bne.n	8018fee <_vfiprintf_r+0x7a>
 8018ffa:	ebba 0b04 	subs.w	fp, sl, r4
 8018ffe:	d00b      	beq.n	8019018 <_vfiprintf_r+0xa4>
 8019000:	465b      	mov	r3, fp
 8019002:	4622      	mov	r2, r4
 8019004:	4629      	mov	r1, r5
 8019006:	4630      	mov	r0, r6
 8019008:	f7ff ffa1 	bl	8018f4e <__sfputs_r>
 801900c:	3001      	adds	r0, #1
 801900e:	f000 80a7 	beq.w	8019160 <_vfiprintf_r+0x1ec>
 8019012:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019014:	445a      	add	r2, fp
 8019016:	9209      	str	r2, [sp, #36]	@ 0x24
 8019018:	f89a 3000 	ldrb.w	r3, [sl]
 801901c:	2b00      	cmp	r3, #0
 801901e:	f000 809f 	beq.w	8019160 <_vfiprintf_r+0x1ec>
 8019022:	2300      	movs	r3, #0
 8019024:	f04f 32ff 	mov.w	r2, #4294967295
 8019028:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801902c:	f10a 0a01 	add.w	sl, sl, #1
 8019030:	9304      	str	r3, [sp, #16]
 8019032:	9307      	str	r3, [sp, #28]
 8019034:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8019038:	931a      	str	r3, [sp, #104]	@ 0x68
 801903a:	4654      	mov	r4, sl
 801903c:	2205      	movs	r2, #5
 801903e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019042:	4853      	ldr	r0, [pc, #332]	@ (8019190 <_vfiprintf_r+0x21c>)
 8019044:	f7e7 f954 	bl	80002f0 <memchr>
 8019048:	9a04      	ldr	r2, [sp, #16]
 801904a:	b9d8      	cbnz	r0, 8019084 <_vfiprintf_r+0x110>
 801904c:	06d1      	lsls	r1, r2, #27
 801904e:	bf44      	itt	mi
 8019050:	2320      	movmi	r3, #32
 8019052:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019056:	0713      	lsls	r3, r2, #28
 8019058:	bf44      	itt	mi
 801905a:	232b      	movmi	r3, #43	@ 0x2b
 801905c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019060:	f89a 3000 	ldrb.w	r3, [sl]
 8019064:	2b2a      	cmp	r3, #42	@ 0x2a
 8019066:	d015      	beq.n	8019094 <_vfiprintf_r+0x120>
 8019068:	9a07      	ldr	r2, [sp, #28]
 801906a:	4654      	mov	r4, sl
 801906c:	2000      	movs	r0, #0
 801906e:	f04f 0c0a 	mov.w	ip, #10
 8019072:	4621      	mov	r1, r4
 8019074:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019078:	3b30      	subs	r3, #48	@ 0x30
 801907a:	2b09      	cmp	r3, #9
 801907c:	d94b      	bls.n	8019116 <_vfiprintf_r+0x1a2>
 801907e:	b1b0      	cbz	r0, 80190ae <_vfiprintf_r+0x13a>
 8019080:	9207      	str	r2, [sp, #28]
 8019082:	e014      	b.n	80190ae <_vfiprintf_r+0x13a>
 8019084:	eba0 0308 	sub.w	r3, r0, r8
 8019088:	fa09 f303 	lsl.w	r3, r9, r3
 801908c:	4313      	orrs	r3, r2
 801908e:	9304      	str	r3, [sp, #16]
 8019090:	46a2      	mov	sl, r4
 8019092:	e7d2      	b.n	801903a <_vfiprintf_r+0xc6>
 8019094:	9b03      	ldr	r3, [sp, #12]
 8019096:	1d19      	adds	r1, r3, #4
 8019098:	681b      	ldr	r3, [r3, #0]
 801909a:	9103      	str	r1, [sp, #12]
 801909c:	2b00      	cmp	r3, #0
 801909e:	bfbb      	ittet	lt
 80190a0:	425b      	neglt	r3, r3
 80190a2:	f042 0202 	orrlt.w	r2, r2, #2
 80190a6:	9307      	strge	r3, [sp, #28]
 80190a8:	9307      	strlt	r3, [sp, #28]
 80190aa:	bfb8      	it	lt
 80190ac:	9204      	strlt	r2, [sp, #16]
 80190ae:	7823      	ldrb	r3, [r4, #0]
 80190b0:	2b2e      	cmp	r3, #46	@ 0x2e
 80190b2:	d10a      	bne.n	80190ca <_vfiprintf_r+0x156>
 80190b4:	7863      	ldrb	r3, [r4, #1]
 80190b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80190b8:	d132      	bne.n	8019120 <_vfiprintf_r+0x1ac>
 80190ba:	9b03      	ldr	r3, [sp, #12]
 80190bc:	1d1a      	adds	r2, r3, #4
 80190be:	681b      	ldr	r3, [r3, #0]
 80190c0:	9203      	str	r2, [sp, #12]
 80190c2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80190c6:	3402      	adds	r4, #2
 80190c8:	9305      	str	r3, [sp, #20]
 80190ca:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80191a0 <_vfiprintf_r+0x22c>
 80190ce:	7821      	ldrb	r1, [r4, #0]
 80190d0:	2203      	movs	r2, #3
 80190d2:	4650      	mov	r0, sl
 80190d4:	f7e7 f90c 	bl	80002f0 <memchr>
 80190d8:	b138      	cbz	r0, 80190ea <_vfiprintf_r+0x176>
 80190da:	9b04      	ldr	r3, [sp, #16]
 80190dc:	eba0 000a 	sub.w	r0, r0, sl
 80190e0:	2240      	movs	r2, #64	@ 0x40
 80190e2:	4082      	lsls	r2, r0
 80190e4:	4313      	orrs	r3, r2
 80190e6:	3401      	adds	r4, #1
 80190e8:	9304      	str	r3, [sp, #16]
 80190ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80190ee:	4829      	ldr	r0, [pc, #164]	@ (8019194 <_vfiprintf_r+0x220>)
 80190f0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80190f4:	2206      	movs	r2, #6
 80190f6:	f7e7 f8fb 	bl	80002f0 <memchr>
 80190fa:	2800      	cmp	r0, #0
 80190fc:	d03f      	beq.n	801917e <_vfiprintf_r+0x20a>
 80190fe:	4b26      	ldr	r3, [pc, #152]	@ (8019198 <_vfiprintf_r+0x224>)
 8019100:	bb1b      	cbnz	r3, 801914a <_vfiprintf_r+0x1d6>
 8019102:	9b03      	ldr	r3, [sp, #12]
 8019104:	3307      	adds	r3, #7
 8019106:	f023 0307 	bic.w	r3, r3, #7
 801910a:	3308      	adds	r3, #8
 801910c:	9303      	str	r3, [sp, #12]
 801910e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019110:	443b      	add	r3, r7
 8019112:	9309      	str	r3, [sp, #36]	@ 0x24
 8019114:	e76a      	b.n	8018fec <_vfiprintf_r+0x78>
 8019116:	fb0c 3202 	mla	r2, ip, r2, r3
 801911a:	460c      	mov	r4, r1
 801911c:	2001      	movs	r0, #1
 801911e:	e7a8      	b.n	8019072 <_vfiprintf_r+0xfe>
 8019120:	2300      	movs	r3, #0
 8019122:	3401      	adds	r4, #1
 8019124:	9305      	str	r3, [sp, #20]
 8019126:	4619      	mov	r1, r3
 8019128:	f04f 0c0a 	mov.w	ip, #10
 801912c:	4620      	mov	r0, r4
 801912e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019132:	3a30      	subs	r2, #48	@ 0x30
 8019134:	2a09      	cmp	r2, #9
 8019136:	d903      	bls.n	8019140 <_vfiprintf_r+0x1cc>
 8019138:	2b00      	cmp	r3, #0
 801913a:	d0c6      	beq.n	80190ca <_vfiprintf_r+0x156>
 801913c:	9105      	str	r1, [sp, #20]
 801913e:	e7c4      	b.n	80190ca <_vfiprintf_r+0x156>
 8019140:	fb0c 2101 	mla	r1, ip, r1, r2
 8019144:	4604      	mov	r4, r0
 8019146:	2301      	movs	r3, #1
 8019148:	e7f0      	b.n	801912c <_vfiprintf_r+0x1b8>
 801914a:	ab03      	add	r3, sp, #12
 801914c:	9300      	str	r3, [sp, #0]
 801914e:	462a      	mov	r2, r5
 8019150:	4b12      	ldr	r3, [pc, #72]	@ (801919c <_vfiprintf_r+0x228>)
 8019152:	a904      	add	r1, sp, #16
 8019154:	4630      	mov	r0, r6
 8019156:	f7fd fce9 	bl	8016b2c <_printf_float>
 801915a:	4607      	mov	r7, r0
 801915c:	1c78      	adds	r0, r7, #1
 801915e:	d1d6      	bne.n	801910e <_vfiprintf_r+0x19a>
 8019160:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019162:	07d9      	lsls	r1, r3, #31
 8019164:	d405      	bmi.n	8019172 <_vfiprintf_r+0x1fe>
 8019166:	89ab      	ldrh	r3, [r5, #12]
 8019168:	059a      	lsls	r2, r3, #22
 801916a:	d402      	bmi.n	8019172 <_vfiprintf_r+0x1fe>
 801916c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801916e:	f7fe fb4d 	bl	801780c <__retarget_lock_release_recursive>
 8019172:	89ab      	ldrh	r3, [r5, #12]
 8019174:	065b      	lsls	r3, r3, #25
 8019176:	f53f af1f 	bmi.w	8018fb8 <_vfiprintf_r+0x44>
 801917a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801917c:	e71e      	b.n	8018fbc <_vfiprintf_r+0x48>
 801917e:	ab03      	add	r3, sp, #12
 8019180:	9300      	str	r3, [sp, #0]
 8019182:	462a      	mov	r2, r5
 8019184:	4b05      	ldr	r3, [pc, #20]	@ (801919c <_vfiprintf_r+0x228>)
 8019186:	a904      	add	r1, sp, #16
 8019188:	4630      	mov	r0, r6
 801918a:	f7fd ff67 	bl	801705c <_printf_i>
 801918e:	e7e4      	b.n	801915a <_vfiprintf_r+0x1e6>
 8019190:	080d7e28 	.word	0x080d7e28
 8019194:	080d7e32 	.word	0x080d7e32
 8019198:	08016b2d 	.word	0x08016b2d
 801919c:	08018f4f 	.word	0x08018f4f
 80191a0:	080d7e2e 	.word	0x080d7e2e

080191a4 <__sflush_r>:
 80191a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80191a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80191ac:	0716      	lsls	r6, r2, #28
 80191ae:	4605      	mov	r5, r0
 80191b0:	460c      	mov	r4, r1
 80191b2:	d454      	bmi.n	801925e <__sflush_r+0xba>
 80191b4:	684b      	ldr	r3, [r1, #4]
 80191b6:	2b00      	cmp	r3, #0
 80191b8:	dc02      	bgt.n	80191c0 <__sflush_r+0x1c>
 80191ba:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80191bc:	2b00      	cmp	r3, #0
 80191be:	dd48      	ble.n	8019252 <__sflush_r+0xae>
 80191c0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80191c2:	2e00      	cmp	r6, #0
 80191c4:	d045      	beq.n	8019252 <__sflush_r+0xae>
 80191c6:	2300      	movs	r3, #0
 80191c8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80191cc:	682f      	ldr	r7, [r5, #0]
 80191ce:	6a21      	ldr	r1, [r4, #32]
 80191d0:	602b      	str	r3, [r5, #0]
 80191d2:	d030      	beq.n	8019236 <__sflush_r+0x92>
 80191d4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80191d6:	89a3      	ldrh	r3, [r4, #12]
 80191d8:	0759      	lsls	r1, r3, #29
 80191da:	d505      	bpl.n	80191e8 <__sflush_r+0x44>
 80191dc:	6863      	ldr	r3, [r4, #4]
 80191de:	1ad2      	subs	r2, r2, r3
 80191e0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80191e2:	b10b      	cbz	r3, 80191e8 <__sflush_r+0x44>
 80191e4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80191e6:	1ad2      	subs	r2, r2, r3
 80191e8:	2300      	movs	r3, #0
 80191ea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80191ec:	6a21      	ldr	r1, [r4, #32]
 80191ee:	4628      	mov	r0, r5
 80191f0:	47b0      	blx	r6
 80191f2:	1c43      	adds	r3, r0, #1
 80191f4:	89a3      	ldrh	r3, [r4, #12]
 80191f6:	d106      	bne.n	8019206 <__sflush_r+0x62>
 80191f8:	6829      	ldr	r1, [r5, #0]
 80191fa:	291d      	cmp	r1, #29
 80191fc:	d82b      	bhi.n	8019256 <__sflush_r+0xb2>
 80191fe:	4a2a      	ldr	r2, [pc, #168]	@ (80192a8 <__sflush_r+0x104>)
 8019200:	410a      	asrs	r2, r1
 8019202:	07d6      	lsls	r6, r2, #31
 8019204:	d427      	bmi.n	8019256 <__sflush_r+0xb2>
 8019206:	2200      	movs	r2, #0
 8019208:	6062      	str	r2, [r4, #4]
 801920a:	04d9      	lsls	r1, r3, #19
 801920c:	6922      	ldr	r2, [r4, #16]
 801920e:	6022      	str	r2, [r4, #0]
 8019210:	d504      	bpl.n	801921c <__sflush_r+0x78>
 8019212:	1c42      	adds	r2, r0, #1
 8019214:	d101      	bne.n	801921a <__sflush_r+0x76>
 8019216:	682b      	ldr	r3, [r5, #0]
 8019218:	b903      	cbnz	r3, 801921c <__sflush_r+0x78>
 801921a:	6560      	str	r0, [r4, #84]	@ 0x54
 801921c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801921e:	602f      	str	r7, [r5, #0]
 8019220:	b1b9      	cbz	r1, 8019252 <__sflush_r+0xae>
 8019222:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8019226:	4299      	cmp	r1, r3
 8019228:	d002      	beq.n	8019230 <__sflush_r+0x8c>
 801922a:	4628      	mov	r0, r5
 801922c:	f7ff f94c 	bl	80184c8 <_free_r>
 8019230:	2300      	movs	r3, #0
 8019232:	6363      	str	r3, [r4, #52]	@ 0x34
 8019234:	e00d      	b.n	8019252 <__sflush_r+0xae>
 8019236:	2301      	movs	r3, #1
 8019238:	4628      	mov	r0, r5
 801923a:	47b0      	blx	r6
 801923c:	4602      	mov	r2, r0
 801923e:	1c50      	adds	r0, r2, #1
 8019240:	d1c9      	bne.n	80191d6 <__sflush_r+0x32>
 8019242:	682b      	ldr	r3, [r5, #0]
 8019244:	2b00      	cmp	r3, #0
 8019246:	d0c6      	beq.n	80191d6 <__sflush_r+0x32>
 8019248:	2b1d      	cmp	r3, #29
 801924a:	d001      	beq.n	8019250 <__sflush_r+0xac>
 801924c:	2b16      	cmp	r3, #22
 801924e:	d11e      	bne.n	801928e <__sflush_r+0xea>
 8019250:	602f      	str	r7, [r5, #0]
 8019252:	2000      	movs	r0, #0
 8019254:	e022      	b.n	801929c <__sflush_r+0xf8>
 8019256:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801925a:	b21b      	sxth	r3, r3
 801925c:	e01b      	b.n	8019296 <__sflush_r+0xf2>
 801925e:	690f      	ldr	r7, [r1, #16]
 8019260:	2f00      	cmp	r7, #0
 8019262:	d0f6      	beq.n	8019252 <__sflush_r+0xae>
 8019264:	0793      	lsls	r3, r2, #30
 8019266:	680e      	ldr	r6, [r1, #0]
 8019268:	bf08      	it	eq
 801926a:	694b      	ldreq	r3, [r1, #20]
 801926c:	600f      	str	r7, [r1, #0]
 801926e:	bf18      	it	ne
 8019270:	2300      	movne	r3, #0
 8019272:	eba6 0807 	sub.w	r8, r6, r7
 8019276:	608b      	str	r3, [r1, #8]
 8019278:	f1b8 0f00 	cmp.w	r8, #0
 801927c:	dde9      	ble.n	8019252 <__sflush_r+0xae>
 801927e:	6a21      	ldr	r1, [r4, #32]
 8019280:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8019282:	4643      	mov	r3, r8
 8019284:	463a      	mov	r2, r7
 8019286:	4628      	mov	r0, r5
 8019288:	47b0      	blx	r6
 801928a:	2800      	cmp	r0, #0
 801928c:	dc08      	bgt.n	80192a0 <__sflush_r+0xfc>
 801928e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019292:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019296:	81a3      	strh	r3, [r4, #12]
 8019298:	f04f 30ff 	mov.w	r0, #4294967295
 801929c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80192a0:	4407      	add	r7, r0
 80192a2:	eba8 0800 	sub.w	r8, r8, r0
 80192a6:	e7e7      	b.n	8019278 <__sflush_r+0xd4>
 80192a8:	dfbffffe 	.word	0xdfbffffe

080192ac <_fflush_r>:
 80192ac:	b538      	push	{r3, r4, r5, lr}
 80192ae:	690b      	ldr	r3, [r1, #16]
 80192b0:	4605      	mov	r5, r0
 80192b2:	460c      	mov	r4, r1
 80192b4:	b913      	cbnz	r3, 80192bc <_fflush_r+0x10>
 80192b6:	2500      	movs	r5, #0
 80192b8:	4628      	mov	r0, r5
 80192ba:	bd38      	pop	{r3, r4, r5, pc}
 80192bc:	b118      	cbz	r0, 80192c6 <_fflush_r+0x1a>
 80192be:	6a03      	ldr	r3, [r0, #32]
 80192c0:	b90b      	cbnz	r3, 80192c6 <_fflush_r+0x1a>
 80192c2:	f7fe f877 	bl	80173b4 <__sinit>
 80192c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80192ca:	2b00      	cmp	r3, #0
 80192cc:	d0f3      	beq.n	80192b6 <_fflush_r+0xa>
 80192ce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80192d0:	07d0      	lsls	r0, r2, #31
 80192d2:	d404      	bmi.n	80192de <_fflush_r+0x32>
 80192d4:	0599      	lsls	r1, r3, #22
 80192d6:	d402      	bmi.n	80192de <_fflush_r+0x32>
 80192d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80192da:	f7fe fa96 	bl	801780a <__retarget_lock_acquire_recursive>
 80192de:	4628      	mov	r0, r5
 80192e0:	4621      	mov	r1, r4
 80192e2:	f7ff ff5f 	bl	80191a4 <__sflush_r>
 80192e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80192e8:	07da      	lsls	r2, r3, #31
 80192ea:	4605      	mov	r5, r0
 80192ec:	d4e4      	bmi.n	80192b8 <_fflush_r+0xc>
 80192ee:	89a3      	ldrh	r3, [r4, #12]
 80192f0:	059b      	lsls	r3, r3, #22
 80192f2:	d4e1      	bmi.n	80192b8 <_fflush_r+0xc>
 80192f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80192f6:	f7fe fa89 	bl	801780c <__retarget_lock_release_recursive>
 80192fa:	e7dd      	b.n	80192b8 <_fflush_r+0xc>

080192fc <__swhatbuf_r>:
 80192fc:	b570      	push	{r4, r5, r6, lr}
 80192fe:	460c      	mov	r4, r1
 8019300:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019304:	2900      	cmp	r1, #0
 8019306:	b096      	sub	sp, #88	@ 0x58
 8019308:	4615      	mov	r5, r2
 801930a:	461e      	mov	r6, r3
 801930c:	da0d      	bge.n	801932a <__swhatbuf_r+0x2e>
 801930e:	89a3      	ldrh	r3, [r4, #12]
 8019310:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8019314:	f04f 0100 	mov.w	r1, #0
 8019318:	bf14      	ite	ne
 801931a:	2340      	movne	r3, #64	@ 0x40
 801931c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8019320:	2000      	movs	r0, #0
 8019322:	6031      	str	r1, [r6, #0]
 8019324:	602b      	str	r3, [r5, #0]
 8019326:	b016      	add	sp, #88	@ 0x58
 8019328:	bd70      	pop	{r4, r5, r6, pc}
 801932a:	466a      	mov	r2, sp
 801932c:	f000 f862 	bl	80193f4 <_fstat_r>
 8019330:	2800      	cmp	r0, #0
 8019332:	dbec      	blt.n	801930e <__swhatbuf_r+0x12>
 8019334:	9901      	ldr	r1, [sp, #4]
 8019336:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801933a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801933e:	4259      	negs	r1, r3
 8019340:	4159      	adcs	r1, r3
 8019342:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8019346:	e7eb      	b.n	8019320 <__swhatbuf_r+0x24>

08019348 <__smakebuf_r>:
 8019348:	898b      	ldrh	r3, [r1, #12]
 801934a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801934c:	079d      	lsls	r5, r3, #30
 801934e:	4606      	mov	r6, r0
 8019350:	460c      	mov	r4, r1
 8019352:	d507      	bpl.n	8019364 <__smakebuf_r+0x1c>
 8019354:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8019358:	6023      	str	r3, [r4, #0]
 801935a:	6123      	str	r3, [r4, #16]
 801935c:	2301      	movs	r3, #1
 801935e:	6163      	str	r3, [r4, #20]
 8019360:	b003      	add	sp, #12
 8019362:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019364:	ab01      	add	r3, sp, #4
 8019366:	466a      	mov	r2, sp
 8019368:	f7ff ffc8 	bl	80192fc <__swhatbuf_r>
 801936c:	9f00      	ldr	r7, [sp, #0]
 801936e:	4605      	mov	r5, r0
 8019370:	4639      	mov	r1, r7
 8019372:	4630      	mov	r0, r6
 8019374:	f7fd fa80 	bl	8016878 <_malloc_r>
 8019378:	b948      	cbnz	r0, 801938e <__smakebuf_r+0x46>
 801937a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801937e:	059a      	lsls	r2, r3, #22
 8019380:	d4ee      	bmi.n	8019360 <__smakebuf_r+0x18>
 8019382:	f023 0303 	bic.w	r3, r3, #3
 8019386:	f043 0302 	orr.w	r3, r3, #2
 801938a:	81a3      	strh	r3, [r4, #12]
 801938c:	e7e2      	b.n	8019354 <__smakebuf_r+0xc>
 801938e:	89a3      	ldrh	r3, [r4, #12]
 8019390:	6020      	str	r0, [r4, #0]
 8019392:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019396:	81a3      	strh	r3, [r4, #12]
 8019398:	9b01      	ldr	r3, [sp, #4]
 801939a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801939e:	b15b      	cbz	r3, 80193b8 <__smakebuf_r+0x70>
 80193a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80193a4:	4630      	mov	r0, r6
 80193a6:	f000 f837 	bl	8019418 <_isatty_r>
 80193aa:	b128      	cbz	r0, 80193b8 <__smakebuf_r+0x70>
 80193ac:	89a3      	ldrh	r3, [r4, #12]
 80193ae:	f023 0303 	bic.w	r3, r3, #3
 80193b2:	f043 0301 	orr.w	r3, r3, #1
 80193b6:	81a3      	strh	r3, [r4, #12]
 80193b8:	89a3      	ldrh	r3, [r4, #12]
 80193ba:	431d      	orrs	r5, r3
 80193bc:	81a5      	strh	r5, [r4, #12]
 80193be:	e7cf      	b.n	8019360 <__smakebuf_r+0x18>

080193c0 <memmove>:
 80193c0:	4288      	cmp	r0, r1
 80193c2:	b510      	push	{r4, lr}
 80193c4:	eb01 0402 	add.w	r4, r1, r2
 80193c8:	d902      	bls.n	80193d0 <memmove+0x10>
 80193ca:	4284      	cmp	r4, r0
 80193cc:	4623      	mov	r3, r4
 80193ce:	d807      	bhi.n	80193e0 <memmove+0x20>
 80193d0:	1e43      	subs	r3, r0, #1
 80193d2:	42a1      	cmp	r1, r4
 80193d4:	d008      	beq.n	80193e8 <memmove+0x28>
 80193d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80193da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80193de:	e7f8      	b.n	80193d2 <memmove+0x12>
 80193e0:	4402      	add	r2, r0
 80193e2:	4601      	mov	r1, r0
 80193e4:	428a      	cmp	r2, r1
 80193e6:	d100      	bne.n	80193ea <memmove+0x2a>
 80193e8:	bd10      	pop	{r4, pc}
 80193ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80193ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80193f2:	e7f7      	b.n	80193e4 <memmove+0x24>

080193f4 <_fstat_r>:
 80193f4:	b538      	push	{r3, r4, r5, lr}
 80193f6:	4d07      	ldr	r5, [pc, #28]	@ (8019414 <_fstat_r+0x20>)
 80193f8:	2300      	movs	r3, #0
 80193fa:	4604      	mov	r4, r0
 80193fc:	4608      	mov	r0, r1
 80193fe:	4611      	mov	r1, r2
 8019400:	602b      	str	r3, [r5, #0]
 8019402:	f7e9 fcb1 	bl	8002d68 <_fstat>
 8019406:	1c43      	adds	r3, r0, #1
 8019408:	d102      	bne.n	8019410 <_fstat_r+0x1c>
 801940a:	682b      	ldr	r3, [r5, #0]
 801940c:	b103      	cbz	r3, 8019410 <_fstat_r+0x1c>
 801940e:	6023      	str	r3, [r4, #0]
 8019410:	bd38      	pop	{r3, r4, r5, pc}
 8019412:	bf00      	nop
 8019414:	20036164 	.word	0x20036164

08019418 <_isatty_r>:
 8019418:	b538      	push	{r3, r4, r5, lr}
 801941a:	4d06      	ldr	r5, [pc, #24]	@ (8019434 <_isatty_r+0x1c>)
 801941c:	2300      	movs	r3, #0
 801941e:	4604      	mov	r4, r0
 8019420:	4608      	mov	r0, r1
 8019422:	602b      	str	r3, [r5, #0]
 8019424:	f7e9 fcb0 	bl	8002d88 <_isatty>
 8019428:	1c43      	adds	r3, r0, #1
 801942a:	d102      	bne.n	8019432 <_isatty_r+0x1a>
 801942c:	682b      	ldr	r3, [r5, #0]
 801942e:	b103      	cbz	r3, 8019432 <_isatty_r+0x1a>
 8019430:	6023      	str	r3, [r4, #0]
 8019432:	bd38      	pop	{r3, r4, r5, pc}
 8019434:	20036164 	.word	0x20036164

08019438 <__assert_func>:
 8019438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801943a:	4614      	mov	r4, r2
 801943c:	461a      	mov	r2, r3
 801943e:	4b09      	ldr	r3, [pc, #36]	@ (8019464 <__assert_func+0x2c>)
 8019440:	681b      	ldr	r3, [r3, #0]
 8019442:	4605      	mov	r5, r0
 8019444:	68d8      	ldr	r0, [r3, #12]
 8019446:	b954      	cbnz	r4, 801945e <__assert_func+0x26>
 8019448:	4b07      	ldr	r3, [pc, #28]	@ (8019468 <__assert_func+0x30>)
 801944a:	461c      	mov	r4, r3
 801944c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019450:	9100      	str	r1, [sp, #0]
 8019452:	462b      	mov	r3, r5
 8019454:	4905      	ldr	r1, [pc, #20]	@ (801946c <__assert_func+0x34>)
 8019456:	f000 f841 	bl	80194dc <fiprintf>
 801945a:	f000 f851 	bl	8019500 <abort>
 801945e:	4b04      	ldr	r3, [pc, #16]	@ (8019470 <__assert_func+0x38>)
 8019460:	e7f4      	b.n	801944c <__assert_func+0x14>
 8019462:	bf00      	nop
 8019464:	200008cc 	.word	0x200008cc
 8019468:	080d7e7e 	.word	0x080d7e7e
 801946c:	080d7e50 	.word	0x080d7e50
 8019470:	080d7e43 	.word	0x080d7e43

08019474 <_calloc_r>:
 8019474:	b570      	push	{r4, r5, r6, lr}
 8019476:	fba1 5402 	umull	r5, r4, r1, r2
 801947a:	b93c      	cbnz	r4, 801948c <_calloc_r+0x18>
 801947c:	4629      	mov	r1, r5
 801947e:	f7fd f9fb 	bl	8016878 <_malloc_r>
 8019482:	4606      	mov	r6, r0
 8019484:	b928      	cbnz	r0, 8019492 <_calloc_r+0x1e>
 8019486:	2600      	movs	r6, #0
 8019488:	4630      	mov	r0, r6
 801948a:	bd70      	pop	{r4, r5, r6, pc}
 801948c:	220c      	movs	r2, #12
 801948e:	6002      	str	r2, [r0, #0]
 8019490:	e7f9      	b.n	8019486 <_calloc_r+0x12>
 8019492:	462a      	mov	r2, r5
 8019494:	4621      	mov	r1, r4
 8019496:	f7fe f92b 	bl	80176f0 <memset>
 801949a:	e7f5      	b.n	8019488 <_calloc_r+0x14>

0801949c <__ascii_mbtowc>:
 801949c:	b082      	sub	sp, #8
 801949e:	b901      	cbnz	r1, 80194a2 <__ascii_mbtowc+0x6>
 80194a0:	a901      	add	r1, sp, #4
 80194a2:	b142      	cbz	r2, 80194b6 <__ascii_mbtowc+0x1a>
 80194a4:	b14b      	cbz	r3, 80194ba <__ascii_mbtowc+0x1e>
 80194a6:	7813      	ldrb	r3, [r2, #0]
 80194a8:	600b      	str	r3, [r1, #0]
 80194aa:	7812      	ldrb	r2, [r2, #0]
 80194ac:	1e10      	subs	r0, r2, #0
 80194ae:	bf18      	it	ne
 80194b0:	2001      	movne	r0, #1
 80194b2:	b002      	add	sp, #8
 80194b4:	4770      	bx	lr
 80194b6:	4610      	mov	r0, r2
 80194b8:	e7fb      	b.n	80194b2 <__ascii_mbtowc+0x16>
 80194ba:	f06f 0001 	mvn.w	r0, #1
 80194be:	e7f8      	b.n	80194b2 <__ascii_mbtowc+0x16>

080194c0 <__ascii_wctomb>:
 80194c0:	4603      	mov	r3, r0
 80194c2:	4608      	mov	r0, r1
 80194c4:	b141      	cbz	r1, 80194d8 <__ascii_wctomb+0x18>
 80194c6:	2aff      	cmp	r2, #255	@ 0xff
 80194c8:	d904      	bls.n	80194d4 <__ascii_wctomb+0x14>
 80194ca:	228a      	movs	r2, #138	@ 0x8a
 80194cc:	601a      	str	r2, [r3, #0]
 80194ce:	f04f 30ff 	mov.w	r0, #4294967295
 80194d2:	4770      	bx	lr
 80194d4:	700a      	strb	r2, [r1, #0]
 80194d6:	2001      	movs	r0, #1
 80194d8:	4770      	bx	lr
	...

080194dc <fiprintf>:
 80194dc:	b40e      	push	{r1, r2, r3}
 80194de:	b503      	push	{r0, r1, lr}
 80194e0:	4601      	mov	r1, r0
 80194e2:	ab03      	add	r3, sp, #12
 80194e4:	4805      	ldr	r0, [pc, #20]	@ (80194fc <fiprintf+0x20>)
 80194e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80194ea:	6800      	ldr	r0, [r0, #0]
 80194ec:	9301      	str	r3, [sp, #4]
 80194ee:	f7ff fd41 	bl	8018f74 <_vfiprintf_r>
 80194f2:	b002      	add	sp, #8
 80194f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80194f8:	b003      	add	sp, #12
 80194fa:	4770      	bx	lr
 80194fc:	200008cc 	.word	0x200008cc

08019500 <abort>:
 8019500:	b508      	push	{r3, lr}
 8019502:	2006      	movs	r0, #6
 8019504:	f000 f82c 	bl	8019560 <raise>
 8019508:	2001      	movs	r0, #1
 801950a:	f7e9 fbdd 	bl	8002cc8 <_exit>

0801950e <_raise_r>:
 801950e:	291f      	cmp	r1, #31
 8019510:	b538      	push	{r3, r4, r5, lr}
 8019512:	4605      	mov	r5, r0
 8019514:	460c      	mov	r4, r1
 8019516:	d904      	bls.n	8019522 <_raise_r+0x14>
 8019518:	2316      	movs	r3, #22
 801951a:	6003      	str	r3, [r0, #0]
 801951c:	f04f 30ff 	mov.w	r0, #4294967295
 8019520:	bd38      	pop	{r3, r4, r5, pc}
 8019522:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8019524:	b112      	cbz	r2, 801952c <_raise_r+0x1e>
 8019526:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801952a:	b94b      	cbnz	r3, 8019540 <_raise_r+0x32>
 801952c:	4628      	mov	r0, r5
 801952e:	f000 f831 	bl	8019594 <_getpid_r>
 8019532:	4622      	mov	r2, r4
 8019534:	4601      	mov	r1, r0
 8019536:	4628      	mov	r0, r5
 8019538:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801953c:	f000 b818 	b.w	8019570 <_kill_r>
 8019540:	2b01      	cmp	r3, #1
 8019542:	d00a      	beq.n	801955a <_raise_r+0x4c>
 8019544:	1c59      	adds	r1, r3, #1
 8019546:	d103      	bne.n	8019550 <_raise_r+0x42>
 8019548:	2316      	movs	r3, #22
 801954a:	6003      	str	r3, [r0, #0]
 801954c:	2001      	movs	r0, #1
 801954e:	e7e7      	b.n	8019520 <_raise_r+0x12>
 8019550:	2100      	movs	r1, #0
 8019552:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8019556:	4620      	mov	r0, r4
 8019558:	4798      	blx	r3
 801955a:	2000      	movs	r0, #0
 801955c:	e7e0      	b.n	8019520 <_raise_r+0x12>
	...

08019560 <raise>:
 8019560:	4b02      	ldr	r3, [pc, #8]	@ (801956c <raise+0xc>)
 8019562:	4601      	mov	r1, r0
 8019564:	6818      	ldr	r0, [r3, #0]
 8019566:	f7ff bfd2 	b.w	801950e <_raise_r>
 801956a:	bf00      	nop
 801956c:	200008cc 	.word	0x200008cc

08019570 <_kill_r>:
 8019570:	b538      	push	{r3, r4, r5, lr}
 8019572:	4d07      	ldr	r5, [pc, #28]	@ (8019590 <_kill_r+0x20>)
 8019574:	2300      	movs	r3, #0
 8019576:	4604      	mov	r4, r0
 8019578:	4608      	mov	r0, r1
 801957a:	4611      	mov	r1, r2
 801957c:	602b      	str	r3, [r5, #0]
 801957e:	f7e9 fb93 	bl	8002ca8 <_kill>
 8019582:	1c43      	adds	r3, r0, #1
 8019584:	d102      	bne.n	801958c <_kill_r+0x1c>
 8019586:	682b      	ldr	r3, [r5, #0]
 8019588:	b103      	cbz	r3, 801958c <_kill_r+0x1c>
 801958a:	6023      	str	r3, [r4, #0]
 801958c:	bd38      	pop	{r3, r4, r5, pc}
 801958e:	bf00      	nop
 8019590:	20036164 	.word	0x20036164

08019594 <_getpid_r>:
 8019594:	f7e9 bb80 	b.w	8002c98 <_getpid>

08019598 <expf>:
 8019598:	b508      	push	{r3, lr}
 801959a:	ed2d 8b02 	vpush	{d8}
 801959e:	eef0 8a40 	vmov.f32	s17, s0
 80195a2:	f000 f96b 	bl	801987c <__ieee754_expf>
 80195a6:	eeb0 8a40 	vmov.f32	s16, s0
 80195aa:	eeb0 0a68 	vmov.f32	s0, s17
 80195ae:	f000 f892 	bl	80196d6 <finitef>
 80195b2:	b160      	cbz	r0, 80195ce <expf+0x36>
 80195b4:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 80195f4 <expf+0x5c>
 80195b8:	eef4 8ae7 	vcmpe.f32	s17, s15
 80195bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80195c0:	dd0a      	ble.n	80195d8 <expf+0x40>
 80195c2:	f7fe f8f7 	bl	80177b4 <__errno>
 80195c6:	ed9f 8a0c 	vldr	s16, [pc, #48]	@ 80195f8 <expf+0x60>
 80195ca:	2322      	movs	r3, #34	@ 0x22
 80195cc:	6003      	str	r3, [r0, #0]
 80195ce:	eeb0 0a48 	vmov.f32	s0, s16
 80195d2:	ecbd 8b02 	vpop	{d8}
 80195d6:	bd08      	pop	{r3, pc}
 80195d8:	eddf 7a08 	vldr	s15, [pc, #32]	@ 80195fc <expf+0x64>
 80195dc:	eef4 8ae7 	vcmpe.f32	s17, s15
 80195e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80195e4:	d5f3      	bpl.n	80195ce <expf+0x36>
 80195e6:	f7fe f8e5 	bl	80177b4 <__errno>
 80195ea:	2322      	movs	r3, #34	@ 0x22
 80195ec:	ed9f 8a04 	vldr	s16, [pc, #16]	@ 8019600 <expf+0x68>
 80195f0:	6003      	str	r3, [r0, #0]
 80195f2:	e7ec      	b.n	80195ce <expf+0x36>
 80195f4:	42b17217 	.word	0x42b17217
 80195f8:	7f800000 	.word	0x7f800000
 80195fc:	c2cff1b5 	.word	0xc2cff1b5
 8019600:	00000000 	.word	0x00000000

08019604 <sqrtf>:
 8019604:	b508      	push	{r3, lr}
 8019606:	ed2d 8b02 	vpush	{d8}
 801960a:	eeb0 8a40 	vmov.f32	s16, s0
 801960e:	f000 f891 	bl	8019734 <__ieee754_sqrtf>
 8019612:	eeb4 8a48 	vcmp.f32	s16, s16
 8019616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801961a:	d60c      	bvs.n	8019636 <sqrtf+0x32>
 801961c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 801963c <sqrtf+0x38>
 8019620:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8019624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019628:	d505      	bpl.n	8019636 <sqrtf+0x32>
 801962a:	f7fe f8c3 	bl	80177b4 <__errno>
 801962e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8019632:	2321      	movs	r3, #33	@ 0x21
 8019634:	6003      	str	r3, [r0, #0]
 8019636:	ecbd 8b02 	vpop	{d8}
 801963a:	bd08      	pop	{r3, pc}
 801963c:	00000000 	.word	0x00000000

08019640 <cosf>:
 8019640:	ee10 3a10 	vmov	r3, s0
 8019644:	b507      	push	{r0, r1, r2, lr}
 8019646:	4a1e      	ldr	r2, [pc, #120]	@ (80196c0 <cosf+0x80>)
 8019648:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801964c:	4293      	cmp	r3, r2
 801964e:	d806      	bhi.n	801965e <cosf+0x1e>
 8019650:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 80196c4 <cosf+0x84>
 8019654:	b003      	add	sp, #12
 8019656:	f85d eb04 	ldr.w	lr, [sp], #4
 801965a:	f000 b86f 	b.w	801973c <__kernel_cosf>
 801965e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8019662:	d304      	bcc.n	801966e <cosf+0x2e>
 8019664:	ee30 0a40 	vsub.f32	s0, s0, s0
 8019668:	b003      	add	sp, #12
 801966a:	f85d fb04 	ldr.w	pc, [sp], #4
 801966e:	4668      	mov	r0, sp
 8019670:	f000 f9d2 	bl	8019a18 <__ieee754_rem_pio2f>
 8019674:	f000 0003 	and.w	r0, r0, #3
 8019678:	2801      	cmp	r0, #1
 801967a:	d009      	beq.n	8019690 <cosf+0x50>
 801967c:	2802      	cmp	r0, #2
 801967e:	d010      	beq.n	80196a2 <cosf+0x62>
 8019680:	b9b0      	cbnz	r0, 80196b0 <cosf+0x70>
 8019682:	eddd 0a01 	vldr	s1, [sp, #4]
 8019686:	ed9d 0a00 	vldr	s0, [sp]
 801968a:	f000 f857 	bl	801973c <__kernel_cosf>
 801968e:	e7eb      	b.n	8019668 <cosf+0x28>
 8019690:	eddd 0a01 	vldr	s1, [sp, #4]
 8019694:	ed9d 0a00 	vldr	s0, [sp]
 8019698:	f000 f8a8 	bl	80197ec <__kernel_sinf>
 801969c:	eeb1 0a40 	vneg.f32	s0, s0
 80196a0:	e7e2      	b.n	8019668 <cosf+0x28>
 80196a2:	eddd 0a01 	vldr	s1, [sp, #4]
 80196a6:	ed9d 0a00 	vldr	s0, [sp]
 80196aa:	f000 f847 	bl	801973c <__kernel_cosf>
 80196ae:	e7f5      	b.n	801969c <cosf+0x5c>
 80196b0:	eddd 0a01 	vldr	s1, [sp, #4]
 80196b4:	ed9d 0a00 	vldr	s0, [sp]
 80196b8:	2001      	movs	r0, #1
 80196ba:	f000 f897 	bl	80197ec <__kernel_sinf>
 80196be:	e7d3      	b.n	8019668 <cosf+0x28>
 80196c0:	3f490fd8 	.word	0x3f490fd8
 80196c4:	00000000 	.word	0x00000000

080196c8 <fabsf>:
 80196c8:	ee10 3a10 	vmov	r3, s0
 80196cc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80196d0:	ee00 3a10 	vmov	s0, r3
 80196d4:	4770      	bx	lr

080196d6 <finitef>:
 80196d6:	ee10 3a10 	vmov	r3, s0
 80196da:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 80196de:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 80196e2:	bfac      	ite	ge
 80196e4:	2000      	movge	r0, #0
 80196e6:	2001      	movlt	r0, #1
 80196e8:	4770      	bx	lr

080196ea <with_errnof>:
 80196ea:	b510      	push	{r4, lr}
 80196ec:	ed2d 8b02 	vpush	{d8}
 80196f0:	eeb0 8a40 	vmov.f32	s16, s0
 80196f4:	4604      	mov	r4, r0
 80196f6:	f7fe f85d 	bl	80177b4 <__errno>
 80196fa:	eeb0 0a48 	vmov.f32	s0, s16
 80196fe:	ecbd 8b02 	vpop	{d8}
 8019702:	6004      	str	r4, [r0, #0]
 8019704:	bd10      	pop	{r4, pc}

08019706 <xflowf>:
 8019706:	b130      	cbz	r0, 8019716 <xflowf+0x10>
 8019708:	eef1 7a40 	vneg.f32	s15, s0
 801970c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8019710:	2022      	movs	r0, #34	@ 0x22
 8019712:	f7ff bfea 	b.w	80196ea <with_errnof>
 8019716:	eef0 7a40 	vmov.f32	s15, s0
 801971a:	e7f7      	b.n	801970c <xflowf+0x6>

0801971c <__math_uflowf>:
 801971c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8019724 <__math_uflowf+0x8>
 8019720:	f7ff bff1 	b.w	8019706 <xflowf>
 8019724:	10000000 	.word	0x10000000

08019728 <__math_oflowf>:
 8019728:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8019730 <__math_oflowf+0x8>
 801972c:	f7ff bfeb 	b.w	8019706 <xflowf>
 8019730:	70000000 	.word	0x70000000

08019734 <__ieee754_sqrtf>:
 8019734:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8019738:	4770      	bx	lr
	...

0801973c <__kernel_cosf>:
 801973c:	ee10 3a10 	vmov	r3, s0
 8019740:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8019744:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8019748:	eef0 6a40 	vmov.f32	s13, s0
 801974c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8019750:	d204      	bcs.n	801975c <__kernel_cosf+0x20>
 8019752:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8019756:	ee17 2a90 	vmov	r2, s15
 801975a:	b342      	cbz	r2, 80197ae <__kernel_cosf+0x72>
 801975c:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8019760:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 80197cc <__kernel_cosf+0x90>
 8019764:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 80197d0 <__kernel_cosf+0x94>
 8019768:	4a1a      	ldr	r2, [pc, #104]	@ (80197d4 <__kernel_cosf+0x98>)
 801976a:	eea7 6a27 	vfma.f32	s12, s14, s15
 801976e:	4293      	cmp	r3, r2
 8019770:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80197d8 <__kernel_cosf+0x9c>
 8019774:	eee6 7a07 	vfma.f32	s15, s12, s14
 8019778:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 80197dc <__kernel_cosf+0xa0>
 801977c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8019780:	eddf 7a17 	vldr	s15, [pc, #92]	@ 80197e0 <__kernel_cosf+0xa4>
 8019784:	eee6 7a07 	vfma.f32	s15, s12, s14
 8019788:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 80197e4 <__kernel_cosf+0xa8>
 801978c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8019790:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8019794:	ee26 6a07 	vmul.f32	s12, s12, s14
 8019798:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801979c:	eee7 0a06 	vfma.f32	s1, s14, s12
 80197a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80197a4:	d804      	bhi.n	80197b0 <__kernel_cosf+0x74>
 80197a6:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80197aa:	ee30 0a67 	vsub.f32	s0, s0, s15
 80197ae:	4770      	bx	lr
 80197b0:	4a0d      	ldr	r2, [pc, #52]	@ (80197e8 <__kernel_cosf+0xac>)
 80197b2:	4293      	cmp	r3, r2
 80197b4:	bf9a      	itte	ls
 80197b6:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 80197ba:	ee07 3a10 	vmovls	s14, r3
 80197be:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 80197c2:	ee30 0a47 	vsub.f32	s0, s0, s14
 80197c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80197ca:	e7ec      	b.n	80197a6 <__kernel_cosf+0x6a>
 80197cc:	ad47d74e 	.word	0xad47d74e
 80197d0:	310f74f6 	.word	0x310f74f6
 80197d4:	3e999999 	.word	0x3e999999
 80197d8:	b493f27c 	.word	0xb493f27c
 80197dc:	37d00d01 	.word	0x37d00d01
 80197e0:	bab60b61 	.word	0xbab60b61
 80197e4:	3d2aaaab 	.word	0x3d2aaaab
 80197e8:	3f480000 	.word	0x3f480000

080197ec <__kernel_sinf>:
 80197ec:	ee10 3a10 	vmov	r3, s0
 80197f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80197f4:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80197f8:	d204      	bcs.n	8019804 <__kernel_sinf+0x18>
 80197fa:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80197fe:	ee17 3a90 	vmov	r3, s15
 8019802:	b35b      	cbz	r3, 801985c <__kernel_sinf+0x70>
 8019804:	ee20 7a00 	vmul.f32	s14, s0, s0
 8019808:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8019860 <__kernel_sinf+0x74>
 801980c:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8019864 <__kernel_sinf+0x78>
 8019810:	eea7 6a27 	vfma.f32	s12, s14, s15
 8019814:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8019868 <__kernel_sinf+0x7c>
 8019818:	eee6 7a07 	vfma.f32	s15, s12, s14
 801981c:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 801986c <__kernel_sinf+0x80>
 8019820:	eea7 6a87 	vfma.f32	s12, s15, s14
 8019824:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8019870 <__kernel_sinf+0x84>
 8019828:	ee60 6a07 	vmul.f32	s13, s0, s14
 801982c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8019830:	b930      	cbnz	r0, 8019840 <__kernel_sinf+0x54>
 8019832:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8019874 <__kernel_sinf+0x88>
 8019836:	eea7 6a27 	vfma.f32	s12, s14, s15
 801983a:	eea6 0a26 	vfma.f32	s0, s12, s13
 801983e:	4770      	bx	lr
 8019840:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8019844:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8019848:	eee0 7a86 	vfma.f32	s15, s1, s12
 801984c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8019850:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8019878 <__kernel_sinf+0x8c>
 8019854:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8019858:	ee30 0a60 	vsub.f32	s0, s0, s1
 801985c:	4770      	bx	lr
 801985e:	bf00      	nop
 8019860:	2f2ec9d3 	.word	0x2f2ec9d3
 8019864:	b2d72f34 	.word	0xb2d72f34
 8019868:	3638ef1b 	.word	0x3638ef1b
 801986c:	b9500d01 	.word	0xb9500d01
 8019870:	3c088889 	.word	0x3c088889
 8019874:	be2aaaab 	.word	0xbe2aaaab
 8019878:	3e2aaaab 	.word	0x3e2aaaab

0801987c <__ieee754_expf>:
 801987c:	ee10 2a10 	vmov	r2, s0
 8019880:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 8019884:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8019888:	d902      	bls.n	8019890 <__ieee754_expf+0x14>
 801988a:	ee30 0a00 	vadd.f32	s0, s0, s0
 801988e:	4770      	bx	lr
 8019890:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 8019894:	d106      	bne.n	80198a4 <__ieee754_expf+0x28>
 8019896:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 80199d0 <__ieee754_expf+0x154>
 801989a:	2900      	cmp	r1, #0
 801989c:	bf18      	it	ne
 801989e:	eeb0 0a67 	vmovne.f32	s0, s15
 80198a2:	4770      	bx	lr
 80198a4:	484b      	ldr	r0, [pc, #300]	@ (80199d4 <__ieee754_expf+0x158>)
 80198a6:	4282      	cmp	r2, r0
 80198a8:	dd02      	ble.n	80198b0 <__ieee754_expf+0x34>
 80198aa:	2000      	movs	r0, #0
 80198ac:	f7ff bf3c 	b.w	8019728 <__math_oflowf>
 80198b0:	2a00      	cmp	r2, #0
 80198b2:	da05      	bge.n	80198c0 <__ieee754_expf+0x44>
 80198b4:	4a48      	ldr	r2, [pc, #288]	@ (80199d8 <__ieee754_expf+0x15c>)
 80198b6:	4293      	cmp	r3, r2
 80198b8:	d902      	bls.n	80198c0 <__ieee754_expf+0x44>
 80198ba:	2000      	movs	r0, #0
 80198bc:	f7ff bf2e 	b.w	801971c <__math_uflowf>
 80198c0:	4a46      	ldr	r2, [pc, #280]	@ (80199dc <__ieee754_expf+0x160>)
 80198c2:	4293      	cmp	r3, r2
 80198c4:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 80198c8:	d952      	bls.n	8019970 <__ieee754_expf+0xf4>
 80198ca:	4a45      	ldr	r2, [pc, #276]	@ (80199e0 <__ieee754_expf+0x164>)
 80198cc:	4293      	cmp	r3, r2
 80198ce:	ea4f 0281 	mov.w	r2, r1, lsl #2
 80198d2:	d834      	bhi.n	801993e <__ieee754_expf+0xc2>
 80198d4:	4b43      	ldr	r3, [pc, #268]	@ (80199e4 <__ieee754_expf+0x168>)
 80198d6:	4413      	add	r3, r2
 80198d8:	ed93 7a00 	vldr	s14, [r3]
 80198dc:	4b42      	ldr	r3, [pc, #264]	@ (80199e8 <__ieee754_expf+0x16c>)
 80198de:	4413      	add	r3, r2
 80198e0:	ee30 7a47 	vsub.f32	s14, s0, s14
 80198e4:	f1c1 0201 	rsb	r2, r1, #1
 80198e8:	edd3 7a00 	vldr	s15, [r3]
 80198ec:	1a52      	subs	r2, r2, r1
 80198ee:	ee37 0a67 	vsub.f32	s0, s14, s15
 80198f2:	ee20 6a00 	vmul.f32	s12, s0, s0
 80198f6:	ed9f 5a3d 	vldr	s10, [pc, #244]	@ 80199ec <__ieee754_expf+0x170>
 80198fa:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80199f0 <__ieee754_expf+0x174>
 80198fe:	eee6 6a05 	vfma.f32	s13, s12, s10
 8019902:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 80199f4 <__ieee754_expf+0x178>
 8019906:	eea6 5a86 	vfma.f32	s10, s13, s12
 801990a:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80199f8 <__ieee754_expf+0x17c>
 801990e:	eee5 6a06 	vfma.f32	s13, s10, s12
 8019912:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 80199fc <__ieee754_expf+0x180>
 8019916:	eea6 5a86 	vfma.f32	s10, s13, s12
 801991a:	eef0 6a40 	vmov.f32	s13, s0
 801991e:	eee5 6a46 	vfms.f32	s13, s10, s12
 8019922:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8019926:	ee20 5a26 	vmul.f32	s10, s0, s13
 801992a:	bb92      	cbnz	r2, 8019992 <__ieee754_expf+0x116>
 801992c:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8019930:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8019934:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8019938:	ee35 0ac0 	vsub.f32	s0, s11, s0
 801993c:	4770      	bx	lr
 801993e:	4b30      	ldr	r3, [pc, #192]	@ (8019a00 <__ieee754_expf+0x184>)
 8019940:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8019a04 <__ieee754_expf+0x188>
 8019944:	eddf 6a30 	vldr	s13, [pc, #192]	@ 8019a08 <__ieee754_expf+0x18c>
 8019948:	4413      	add	r3, r2
 801994a:	edd3 7a00 	vldr	s15, [r3]
 801994e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8019952:	eeb0 7a40 	vmov.f32	s14, s0
 8019956:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801995a:	ee17 2a90 	vmov	r2, s15
 801995e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019962:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8019966:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8019a0c <__ieee754_expf+0x190>
 801996a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801996e:	e7be      	b.n	80198ee <__ieee754_expf+0x72>
 8019970:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 8019974:	d20b      	bcs.n	801998e <__ieee754_expf+0x112>
 8019976:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8019a10 <__ieee754_expf+0x194>
 801997a:	ee70 6a26 	vadd.f32	s13, s0, s13
 801997e:	eef4 6ae5 	vcmpe.f32	s13, s11
 8019982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019986:	dd02      	ble.n	801998e <__ieee754_expf+0x112>
 8019988:	ee30 0a25 	vadd.f32	s0, s0, s11
 801998c:	4770      	bx	lr
 801998e:	2200      	movs	r2, #0
 8019990:	e7af      	b.n	80198f2 <__ieee754_expf+0x76>
 8019992:	ee36 6a66 	vsub.f32	s12, s12, s13
 8019996:	f112 0f7d 	cmn.w	r2, #125	@ 0x7d
 801999a:	eec5 6a06 	vdiv.f32	s13, s10, s12
 801999e:	bfb8      	it	lt
 80199a0:	3264      	addlt	r2, #100	@ 0x64
 80199a2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80199a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80199aa:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80199ae:	ee17 3a90 	vmov	r3, s15
 80199b2:	bfab      	itete	ge
 80199b4:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 80199b8:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 80199bc:	ee00 3a10 	vmovge	s0, r3
 80199c0:	eddf 7a14 	vldrlt	s15, [pc, #80]	@ 8019a14 <__ieee754_expf+0x198>
 80199c4:	bfbc      	itt	lt
 80199c6:	ee00 3a10 	vmovlt	s0, r3
 80199ca:	ee20 0a27 	vmullt.f32	s0, s0, s15
 80199ce:	4770      	bx	lr
 80199d0:	00000000 	.word	0x00000000
 80199d4:	42b17217 	.word	0x42b17217
 80199d8:	42cff1b5 	.word	0x42cff1b5
 80199dc:	3eb17218 	.word	0x3eb17218
 80199e0:	3f851591 	.word	0x3f851591
 80199e4:	080d7f88 	.word	0x080d7f88
 80199e8:	080d7f80 	.word	0x080d7f80
 80199ec:	3331bb4c 	.word	0x3331bb4c
 80199f0:	b5ddea0e 	.word	0xb5ddea0e
 80199f4:	388ab355 	.word	0x388ab355
 80199f8:	bb360b61 	.word	0xbb360b61
 80199fc:	3e2aaaab 	.word	0x3e2aaaab
 8019a00:	080d7f90 	.word	0x080d7f90
 8019a04:	3fb8aa3b 	.word	0x3fb8aa3b
 8019a08:	3f317180 	.word	0x3f317180
 8019a0c:	3717f7d1 	.word	0x3717f7d1
 8019a10:	7149f2ca 	.word	0x7149f2ca
 8019a14:	0d800000 	.word	0x0d800000

08019a18 <__ieee754_rem_pio2f>:
 8019a18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019a1a:	ee10 6a10 	vmov	r6, s0
 8019a1e:	4b88      	ldr	r3, [pc, #544]	@ (8019c40 <__ieee754_rem_pio2f+0x228>)
 8019a20:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8019a24:	429d      	cmp	r5, r3
 8019a26:	b087      	sub	sp, #28
 8019a28:	4604      	mov	r4, r0
 8019a2a:	d805      	bhi.n	8019a38 <__ieee754_rem_pio2f+0x20>
 8019a2c:	2300      	movs	r3, #0
 8019a2e:	ed80 0a00 	vstr	s0, [r0]
 8019a32:	6043      	str	r3, [r0, #4]
 8019a34:	2000      	movs	r0, #0
 8019a36:	e022      	b.n	8019a7e <__ieee754_rem_pio2f+0x66>
 8019a38:	4b82      	ldr	r3, [pc, #520]	@ (8019c44 <__ieee754_rem_pio2f+0x22c>)
 8019a3a:	429d      	cmp	r5, r3
 8019a3c:	d83a      	bhi.n	8019ab4 <__ieee754_rem_pio2f+0x9c>
 8019a3e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8019a42:	2e00      	cmp	r6, #0
 8019a44:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8019c48 <__ieee754_rem_pio2f+0x230>
 8019a48:	4a80      	ldr	r2, [pc, #512]	@ (8019c4c <__ieee754_rem_pio2f+0x234>)
 8019a4a:	f023 030f 	bic.w	r3, r3, #15
 8019a4e:	dd18      	ble.n	8019a82 <__ieee754_rem_pio2f+0x6a>
 8019a50:	4293      	cmp	r3, r2
 8019a52:	ee70 7a47 	vsub.f32	s15, s0, s14
 8019a56:	bf09      	itett	eq
 8019a58:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8019c50 <__ieee754_rem_pio2f+0x238>
 8019a5c:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8019c54 <__ieee754_rem_pio2f+0x23c>
 8019a60:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8019c58 <__ieee754_rem_pio2f+0x240>
 8019a64:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8019a68:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8019a6c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019a70:	ed80 7a00 	vstr	s14, [r0]
 8019a74:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8019a78:	edc0 7a01 	vstr	s15, [r0, #4]
 8019a7c:	2001      	movs	r0, #1
 8019a7e:	b007      	add	sp, #28
 8019a80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019a82:	4293      	cmp	r3, r2
 8019a84:	ee70 7a07 	vadd.f32	s15, s0, s14
 8019a88:	bf09      	itett	eq
 8019a8a:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8019c50 <__ieee754_rem_pio2f+0x238>
 8019a8e:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8019c54 <__ieee754_rem_pio2f+0x23c>
 8019a92:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8019c58 <__ieee754_rem_pio2f+0x240>
 8019a96:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8019a9a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8019a9e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019aa2:	ed80 7a00 	vstr	s14, [r0]
 8019aa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019aaa:	edc0 7a01 	vstr	s15, [r0, #4]
 8019aae:	f04f 30ff 	mov.w	r0, #4294967295
 8019ab2:	e7e4      	b.n	8019a7e <__ieee754_rem_pio2f+0x66>
 8019ab4:	4b69      	ldr	r3, [pc, #420]	@ (8019c5c <__ieee754_rem_pio2f+0x244>)
 8019ab6:	429d      	cmp	r5, r3
 8019ab8:	d873      	bhi.n	8019ba2 <__ieee754_rem_pio2f+0x18a>
 8019aba:	f7ff fe05 	bl	80196c8 <fabsf>
 8019abe:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8019c60 <__ieee754_rem_pio2f+0x248>
 8019ac2:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8019ac6:	eee0 7a07 	vfma.f32	s15, s0, s14
 8019aca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019ace:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8019ad2:	ee17 0a90 	vmov	r0, s15
 8019ad6:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8019c48 <__ieee754_rem_pio2f+0x230>
 8019ada:	eea7 0a67 	vfms.f32	s0, s14, s15
 8019ade:	281f      	cmp	r0, #31
 8019ae0:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8019c54 <__ieee754_rem_pio2f+0x23c>
 8019ae4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019ae8:	eeb1 6a47 	vneg.f32	s12, s14
 8019aec:	ee70 6a67 	vsub.f32	s13, s0, s15
 8019af0:	ee16 1a90 	vmov	r1, s13
 8019af4:	dc09      	bgt.n	8019b0a <__ieee754_rem_pio2f+0xf2>
 8019af6:	4a5b      	ldr	r2, [pc, #364]	@ (8019c64 <__ieee754_rem_pio2f+0x24c>)
 8019af8:	1e47      	subs	r7, r0, #1
 8019afa:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8019afe:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8019b02:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8019b06:	4293      	cmp	r3, r2
 8019b08:	d107      	bne.n	8019b1a <__ieee754_rem_pio2f+0x102>
 8019b0a:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8019b0e:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8019b12:	2a08      	cmp	r2, #8
 8019b14:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8019b18:	dc14      	bgt.n	8019b44 <__ieee754_rem_pio2f+0x12c>
 8019b1a:	6021      	str	r1, [r4, #0]
 8019b1c:	ed94 7a00 	vldr	s14, [r4]
 8019b20:	ee30 0a47 	vsub.f32	s0, s0, s14
 8019b24:	2e00      	cmp	r6, #0
 8019b26:	ee30 0a67 	vsub.f32	s0, s0, s15
 8019b2a:	ed84 0a01 	vstr	s0, [r4, #4]
 8019b2e:	daa6      	bge.n	8019a7e <__ieee754_rem_pio2f+0x66>
 8019b30:	eeb1 7a47 	vneg.f32	s14, s14
 8019b34:	eeb1 0a40 	vneg.f32	s0, s0
 8019b38:	ed84 7a00 	vstr	s14, [r4]
 8019b3c:	ed84 0a01 	vstr	s0, [r4, #4]
 8019b40:	4240      	negs	r0, r0
 8019b42:	e79c      	b.n	8019a7e <__ieee754_rem_pio2f+0x66>
 8019b44:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8019c50 <__ieee754_rem_pio2f+0x238>
 8019b48:	eef0 6a40 	vmov.f32	s13, s0
 8019b4c:	eee6 6a25 	vfma.f32	s13, s12, s11
 8019b50:	ee70 7a66 	vsub.f32	s15, s0, s13
 8019b54:	eee6 7a25 	vfma.f32	s15, s12, s11
 8019b58:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8019c58 <__ieee754_rem_pio2f+0x240>
 8019b5c:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8019b60:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8019b64:	ee15 2a90 	vmov	r2, s11
 8019b68:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8019b6c:	1a5b      	subs	r3, r3, r1
 8019b6e:	2b19      	cmp	r3, #25
 8019b70:	dc04      	bgt.n	8019b7c <__ieee754_rem_pio2f+0x164>
 8019b72:	edc4 5a00 	vstr	s11, [r4]
 8019b76:	eeb0 0a66 	vmov.f32	s0, s13
 8019b7a:	e7cf      	b.n	8019b1c <__ieee754_rem_pio2f+0x104>
 8019b7c:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8019c68 <__ieee754_rem_pio2f+0x250>
 8019b80:	eeb0 0a66 	vmov.f32	s0, s13
 8019b84:	eea6 0a25 	vfma.f32	s0, s12, s11
 8019b88:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8019b8c:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8019c6c <__ieee754_rem_pio2f+0x254>
 8019b90:	eee6 7a25 	vfma.f32	s15, s12, s11
 8019b94:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8019b98:	ee30 7a67 	vsub.f32	s14, s0, s15
 8019b9c:	ed84 7a00 	vstr	s14, [r4]
 8019ba0:	e7bc      	b.n	8019b1c <__ieee754_rem_pio2f+0x104>
 8019ba2:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8019ba6:	d306      	bcc.n	8019bb6 <__ieee754_rem_pio2f+0x19e>
 8019ba8:	ee70 7a40 	vsub.f32	s15, s0, s0
 8019bac:	edc0 7a01 	vstr	s15, [r0, #4]
 8019bb0:	edc0 7a00 	vstr	s15, [r0]
 8019bb4:	e73e      	b.n	8019a34 <__ieee754_rem_pio2f+0x1c>
 8019bb6:	15ea      	asrs	r2, r5, #23
 8019bb8:	3a86      	subs	r2, #134	@ 0x86
 8019bba:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8019bbe:	ee07 3a90 	vmov	s15, r3
 8019bc2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8019bc6:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8019c70 <__ieee754_rem_pio2f+0x258>
 8019bca:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019bce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019bd2:	ed8d 7a03 	vstr	s14, [sp, #12]
 8019bd6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8019bda:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8019bde:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019be2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019be6:	ed8d 7a04 	vstr	s14, [sp, #16]
 8019bea:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8019bee:	eef5 7a40 	vcmp.f32	s15, #0.0
 8019bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019bf6:	edcd 7a05 	vstr	s15, [sp, #20]
 8019bfa:	d11e      	bne.n	8019c3a <__ieee754_rem_pio2f+0x222>
 8019bfc:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8019c00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019c04:	bf0c      	ite	eq
 8019c06:	2301      	moveq	r3, #1
 8019c08:	2302      	movne	r3, #2
 8019c0a:	491a      	ldr	r1, [pc, #104]	@ (8019c74 <__ieee754_rem_pio2f+0x25c>)
 8019c0c:	9101      	str	r1, [sp, #4]
 8019c0e:	2102      	movs	r1, #2
 8019c10:	9100      	str	r1, [sp, #0]
 8019c12:	a803      	add	r0, sp, #12
 8019c14:	4621      	mov	r1, r4
 8019c16:	f000 f895 	bl	8019d44 <__kernel_rem_pio2f>
 8019c1a:	2e00      	cmp	r6, #0
 8019c1c:	f6bf af2f 	bge.w	8019a7e <__ieee754_rem_pio2f+0x66>
 8019c20:	edd4 7a00 	vldr	s15, [r4]
 8019c24:	eef1 7a67 	vneg.f32	s15, s15
 8019c28:	edc4 7a00 	vstr	s15, [r4]
 8019c2c:	edd4 7a01 	vldr	s15, [r4, #4]
 8019c30:	eef1 7a67 	vneg.f32	s15, s15
 8019c34:	edc4 7a01 	vstr	s15, [r4, #4]
 8019c38:	e782      	b.n	8019b40 <__ieee754_rem_pio2f+0x128>
 8019c3a:	2303      	movs	r3, #3
 8019c3c:	e7e5      	b.n	8019c0a <__ieee754_rem_pio2f+0x1f2>
 8019c3e:	bf00      	nop
 8019c40:	3f490fd8 	.word	0x3f490fd8
 8019c44:	4016cbe3 	.word	0x4016cbe3
 8019c48:	3fc90f80 	.word	0x3fc90f80
 8019c4c:	3fc90fd0 	.word	0x3fc90fd0
 8019c50:	37354400 	.word	0x37354400
 8019c54:	37354443 	.word	0x37354443
 8019c58:	2e85a308 	.word	0x2e85a308
 8019c5c:	43490f80 	.word	0x43490f80
 8019c60:	3f22f984 	.word	0x3f22f984
 8019c64:	080d7f98 	.word	0x080d7f98
 8019c68:	2e85a300 	.word	0x2e85a300
 8019c6c:	248d3132 	.word	0x248d3132
 8019c70:	43800000 	.word	0x43800000
 8019c74:	080d8018 	.word	0x080d8018

08019c78 <scalbnf>:
 8019c78:	ee10 3a10 	vmov	r3, s0
 8019c7c:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8019c80:	d02b      	beq.n	8019cda <scalbnf+0x62>
 8019c82:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8019c86:	d302      	bcc.n	8019c8e <scalbnf+0x16>
 8019c88:	ee30 0a00 	vadd.f32	s0, s0, s0
 8019c8c:	4770      	bx	lr
 8019c8e:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8019c92:	d123      	bne.n	8019cdc <scalbnf+0x64>
 8019c94:	4b24      	ldr	r3, [pc, #144]	@ (8019d28 <scalbnf+0xb0>)
 8019c96:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8019d2c <scalbnf+0xb4>
 8019c9a:	4298      	cmp	r0, r3
 8019c9c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8019ca0:	db17      	blt.n	8019cd2 <scalbnf+0x5a>
 8019ca2:	ee10 3a10 	vmov	r3, s0
 8019ca6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8019caa:	3a19      	subs	r2, #25
 8019cac:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8019cb0:	4288      	cmp	r0, r1
 8019cb2:	dd15      	ble.n	8019ce0 <scalbnf+0x68>
 8019cb4:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8019d30 <scalbnf+0xb8>
 8019cb8:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8019d34 <scalbnf+0xbc>
 8019cbc:	ee10 3a10 	vmov	r3, s0
 8019cc0:	eeb0 7a67 	vmov.f32	s14, s15
 8019cc4:	2b00      	cmp	r3, #0
 8019cc6:	bfb8      	it	lt
 8019cc8:	eef0 7a66 	vmovlt.f32	s15, s13
 8019ccc:	ee27 0a87 	vmul.f32	s0, s15, s14
 8019cd0:	4770      	bx	lr
 8019cd2:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8019d38 <scalbnf+0xc0>
 8019cd6:	ee27 0a80 	vmul.f32	s0, s15, s0
 8019cda:	4770      	bx	lr
 8019cdc:	0dd2      	lsrs	r2, r2, #23
 8019cde:	e7e5      	b.n	8019cac <scalbnf+0x34>
 8019ce0:	4410      	add	r0, r2
 8019ce2:	28fe      	cmp	r0, #254	@ 0xfe
 8019ce4:	dce6      	bgt.n	8019cb4 <scalbnf+0x3c>
 8019ce6:	2800      	cmp	r0, #0
 8019ce8:	dd06      	ble.n	8019cf8 <scalbnf+0x80>
 8019cea:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8019cee:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8019cf2:	ee00 3a10 	vmov	s0, r3
 8019cf6:	4770      	bx	lr
 8019cf8:	f110 0f16 	cmn.w	r0, #22
 8019cfc:	da09      	bge.n	8019d12 <scalbnf+0x9a>
 8019cfe:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8019d38 <scalbnf+0xc0>
 8019d02:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8019d3c <scalbnf+0xc4>
 8019d06:	ee10 3a10 	vmov	r3, s0
 8019d0a:	eeb0 7a67 	vmov.f32	s14, s15
 8019d0e:	2b00      	cmp	r3, #0
 8019d10:	e7d9      	b.n	8019cc6 <scalbnf+0x4e>
 8019d12:	3019      	adds	r0, #25
 8019d14:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8019d18:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8019d1c:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8019d40 <scalbnf+0xc8>
 8019d20:	ee07 3a90 	vmov	s15, r3
 8019d24:	e7d7      	b.n	8019cd6 <scalbnf+0x5e>
 8019d26:	bf00      	nop
 8019d28:	ffff3cb0 	.word	0xffff3cb0
 8019d2c:	4c000000 	.word	0x4c000000
 8019d30:	7149f2ca 	.word	0x7149f2ca
 8019d34:	f149f2ca 	.word	0xf149f2ca
 8019d38:	0da24260 	.word	0x0da24260
 8019d3c:	8da24260 	.word	0x8da24260
 8019d40:	33000000 	.word	0x33000000

08019d44 <__kernel_rem_pio2f>:
 8019d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d48:	ed2d 8b04 	vpush	{d8-d9}
 8019d4c:	b0d9      	sub	sp, #356	@ 0x164
 8019d4e:	4690      	mov	r8, r2
 8019d50:	9001      	str	r0, [sp, #4]
 8019d52:	4ab9      	ldr	r2, [pc, #740]	@ (801a038 <__kernel_rem_pio2f+0x2f4>)
 8019d54:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8019d56:	f118 0f04 	cmn.w	r8, #4
 8019d5a:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8019d5e:	460f      	mov	r7, r1
 8019d60:	f103 3bff 	add.w	fp, r3, #4294967295
 8019d64:	db27      	blt.n	8019db6 <__kernel_rem_pio2f+0x72>
 8019d66:	f1b8 0203 	subs.w	r2, r8, #3
 8019d6a:	bf48      	it	mi
 8019d6c:	f108 0204 	addmi.w	r2, r8, #4
 8019d70:	10d2      	asrs	r2, r2, #3
 8019d72:	1c55      	adds	r5, r2, #1
 8019d74:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8019d76:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 801a048 <__kernel_rem_pio2f+0x304>
 8019d7a:	00e8      	lsls	r0, r5, #3
 8019d7c:	eba2 060b 	sub.w	r6, r2, fp
 8019d80:	9002      	str	r0, [sp, #8]
 8019d82:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8019d86:	eb0a 0c0b 	add.w	ip, sl, fp
 8019d8a:	ac1c      	add	r4, sp, #112	@ 0x70
 8019d8c:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8019d90:	2000      	movs	r0, #0
 8019d92:	4560      	cmp	r0, ip
 8019d94:	dd11      	ble.n	8019dba <__kernel_rem_pio2f+0x76>
 8019d96:	a91c      	add	r1, sp, #112	@ 0x70
 8019d98:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8019d9c:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8019da0:	f04f 0c00 	mov.w	ip, #0
 8019da4:	45d4      	cmp	ip, sl
 8019da6:	dc27      	bgt.n	8019df8 <__kernel_rem_pio2f+0xb4>
 8019da8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8019dac:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 801a048 <__kernel_rem_pio2f+0x304>
 8019db0:	4606      	mov	r6, r0
 8019db2:	2400      	movs	r4, #0
 8019db4:	e016      	b.n	8019de4 <__kernel_rem_pio2f+0xa0>
 8019db6:	2200      	movs	r2, #0
 8019db8:	e7db      	b.n	8019d72 <__kernel_rem_pio2f+0x2e>
 8019dba:	42c6      	cmn	r6, r0
 8019dbc:	bf5d      	ittte	pl
 8019dbe:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8019dc2:	ee07 1a90 	vmovpl	s15, r1
 8019dc6:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8019dca:	eef0 7a47 	vmovmi.f32	s15, s14
 8019dce:	ece4 7a01 	vstmia	r4!, {s15}
 8019dd2:	3001      	adds	r0, #1
 8019dd4:	e7dd      	b.n	8019d92 <__kernel_rem_pio2f+0x4e>
 8019dd6:	ecfe 6a01 	vldmia	lr!, {s13}
 8019dda:	ed96 7a00 	vldr	s14, [r6]
 8019dde:	eee6 7a87 	vfma.f32	s15, s13, s14
 8019de2:	3401      	adds	r4, #1
 8019de4:	455c      	cmp	r4, fp
 8019de6:	f1a6 0604 	sub.w	r6, r6, #4
 8019dea:	ddf4      	ble.n	8019dd6 <__kernel_rem_pio2f+0x92>
 8019dec:	ece9 7a01 	vstmia	r9!, {s15}
 8019df0:	f10c 0c01 	add.w	ip, ip, #1
 8019df4:	3004      	adds	r0, #4
 8019df6:	e7d5      	b.n	8019da4 <__kernel_rem_pio2f+0x60>
 8019df8:	a908      	add	r1, sp, #32
 8019dfa:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8019dfe:	9104      	str	r1, [sp, #16]
 8019e00:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8019e02:	eddf 8a90 	vldr	s17, [pc, #576]	@ 801a044 <__kernel_rem_pio2f+0x300>
 8019e06:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 801a040 <__kernel_rem_pio2f+0x2fc>
 8019e0a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8019e0e:	9203      	str	r2, [sp, #12]
 8019e10:	4654      	mov	r4, sl
 8019e12:	00a2      	lsls	r2, r4, #2
 8019e14:	9205      	str	r2, [sp, #20]
 8019e16:	aa58      	add	r2, sp, #352	@ 0x160
 8019e18:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8019e1c:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8019e20:	a944      	add	r1, sp, #272	@ 0x110
 8019e22:	aa08      	add	r2, sp, #32
 8019e24:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8019e28:	4694      	mov	ip, r2
 8019e2a:	4626      	mov	r6, r4
 8019e2c:	2e00      	cmp	r6, #0
 8019e2e:	f1a0 0004 	sub.w	r0, r0, #4
 8019e32:	dc4c      	bgt.n	8019ece <__kernel_rem_pio2f+0x18a>
 8019e34:	4628      	mov	r0, r5
 8019e36:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8019e3a:	f7ff ff1d 	bl	8019c78 <scalbnf>
 8019e3e:	eeb0 8a40 	vmov.f32	s16, s0
 8019e42:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8019e46:	ee28 0a00 	vmul.f32	s0, s16, s0
 8019e4a:	f000 f9ed 	bl	801a228 <floorf>
 8019e4e:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8019e52:	eea0 8a67 	vfms.f32	s16, s0, s15
 8019e56:	2d00      	cmp	r5, #0
 8019e58:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8019e5c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8019e60:	ee17 9a90 	vmov	r9, s15
 8019e64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019e68:	ee38 8a67 	vsub.f32	s16, s16, s15
 8019e6c:	dd41      	ble.n	8019ef2 <__kernel_rem_pio2f+0x1ae>
 8019e6e:	f104 3cff 	add.w	ip, r4, #4294967295
 8019e72:	a908      	add	r1, sp, #32
 8019e74:	f1c5 0e08 	rsb	lr, r5, #8
 8019e78:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8019e7c:	fa46 f00e 	asr.w	r0, r6, lr
 8019e80:	4481      	add	r9, r0
 8019e82:	fa00 f00e 	lsl.w	r0, r0, lr
 8019e86:	1a36      	subs	r6, r6, r0
 8019e88:	f1c5 0007 	rsb	r0, r5, #7
 8019e8c:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8019e90:	4106      	asrs	r6, r0
 8019e92:	2e00      	cmp	r6, #0
 8019e94:	dd3c      	ble.n	8019f10 <__kernel_rem_pio2f+0x1cc>
 8019e96:	f04f 0e00 	mov.w	lr, #0
 8019e9a:	f109 0901 	add.w	r9, r9, #1
 8019e9e:	4670      	mov	r0, lr
 8019ea0:	4574      	cmp	r4, lr
 8019ea2:	dc68      	bgt.n	8019f76 <__kernel_rem_pio2f+0x232>
 8019ea4:	2d00      	cmp	r5, #0
 8019ea6:	dd03      	ble.n	8019eb0 <__kernel_rem_pio2f+0x16c>
 8019ea8:	2d01      	cmp	r5, #1
 8019eaa:	d074      	beq.n	8019f96 <__kernel_rem_pio2f+0x252>
 8019eac:	2d02      	cmp	r5, #2
 8019eae:	d07d      	beq.n	8019fac <__kernel_rem_pio2f+0x268>
 8019eb0:	2e02      	cmp	r6, #2
 8019eb2:	d12d      	bne.n	8019f10 <__kernel_rem_pio2f+0x1cc>
 8019eb4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8019eb8:	ee30 8a48 	vsub.f32	s16, s0, s16
 8019ebc:	b340      	cbz	r0, 8019f10 <__kernel_rem_pio2f+0x1cc>
 8019ebe:	4628      	mov	r0, r5
 8019ec0:	9306      	str	r3, [sp, #24]
 8019ec2:	f7ff fed9 	bl	8019c78 <scalbnf>
 8019ec6:	9b06      	ldr	r3, [sp, #24]
 8019ec8:	ee38 8a40 	vsub.f32	s16, s16, s0
 8019ecc:	e020      	b.n	8019f10 <__kernel_rem_pio2f+0x1cc>
 8019ece:	ee60 7a28 	vmul.f32	s15, s0, s17
 8019ed2:	3e01      	subs	r6, #1
 8019ed4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019ed8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019edc:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8019ee0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8019ee4:	ecac 0a01 	vstmia	ip!, {s0}
 8019ee8:	ed90 0a00 	vldr	s0, [r0]
 8019eec:	ee37 0a80 	vadd.f32	s0, s15, s0
 8019ef0:	e79c      	b.n	8019e2c <__kernel_rem_pio2f+0xe8>
 8019ef2:	d105      	bne.n	8019f00 <__kernel_rem_pio2f+0x1bc>
 8019ef4:	1e60      	subs	r0, r4, #1
 8019ef6:	a908      	add	r1, sp, #32
 8019ef8:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8019efc:	11f6      	asrs	r6, r6, #7
 8019efe:	e7c8      	b.n	8019e92 <__kernel_rem_pio2f+0x14e>
 8019f00:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8019f04:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8019f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019f0c:	da31      	bge.n	8019f72 <__kernel_rem_pio2f+0x22e>
 8019f0e:	2600      	movs	r6, #0
 8019f10:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8019f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019f18:	f040 8098 	bne.w	801a04c <__kernel_rem_pio2f+0x308>
 8019f1c:	1e60      	subs	r0, r4, #1
 8019f1e:	2200      	movs	r2, #0
 8019f20:	4550      	cmp	r0, sl
 8019f22:	da4b      	bge.n	8019fbc <__kernel_rem_pio2f+0x278>
 8019f24:	2a00      	cmp	r2, #0
 8019f26:	d065      	beq.n	8019ff4 <__kernel_rem_pio2f+0x2b0>
 8019f28:	3c01      	subs	r4, #1
 8019f2a:	ab08      	add	r3, sp, #32
 8019f2c:	3d08      	subs	r5, #8
 8019f2e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8019f32:	2b00      	cmp	r3, #0
 8019f34:	d0f8      	beq.n	8019f28 <__kernel_rem_pio2f+0x1e4>
 8019f36:	4628      	mov	r0, r5
 8019f38:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8019f3c:	f7ff fe9c 	bl	8019c78 <scalbnf>
 8019f40:	1c63      	adds	r3, r4, #1
 8019f42:	aa44      	add	r2, sp, #272	@ 0x110
 8019f44:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 801a044 <__kernel_rem_pio2f+0x300>
 8019f48:	0099      	lsls	r1, r3, #2
 8019f4a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8019f4e:	4623      	mov	r3, r4
 8019f50:	2b00      	cmp	r3, #0
 8019f52:	f280 80a9 	bge.w	801a0a8 <__kernel_rem_pio2f+0x364>
 8019f56:	4623      	mov	r3, r4
 8019f58:	2b00      	cmp	r3, #0
 8019f5a:	f2c0 80c7 	blt.w	801a0ec <__kernel_rem_pio2f+0x3a8>
 8019f5e:	aa44      	add	r2, sp, #272	@ 0x110
 8019f60:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8019f64:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 801a03c <__kernel_rem_pio2f+0x2f8>
 8019f68:	eddf 7a37 	vldr	s15, [pc, #220]	@ 801a048 <__kernel_rem_pio2f+0x304>
 8019f6c:	2000      	movs	r0, #0
 8019f6e:	1ae2      	subs	r2, r4, r3
 8019f70:	e0b1      	b.n	801a0d6 <__kernel_rem_pio2f+0x392>
 8019f72:	2602      	movs	r6, #2
 8019f74:	e78f      	b.n	8019e96 <__kernel_rem_pio2f+0x152>
 8019f76:	f852 1b04 	ldr.w	r1, [r2], #4
 8019f7a:	b948      	cbnz	r0, 8019f90 <__kernel_rem_pio2f+0x24c>
 8019f7c:	b121      	cbz	r1, 8019f88 <__kernel_rem_pio2f+0x244>
 8019f7e:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8019f82:	f842 1c04 	str.w	r1, [r2, #-4]
 8019f86:	2101      	movs	r1, #1
 8019f88:	f10e 0e01 	add.w	lr, lr, #1
 8019f8c:	4608      	mov	r0, r1
 8019f8e:	e787      	b.n	8019ea0 <__kernel_rem_pio2f+0x15c>
 8019f90:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8019f94:	e7f5      	b.n	8019f82 <__kernel_rem_pio2f+0x23e>
 8019f96:	f104 3cff 	add.w	ip, r4, #4294967295
 8019f9a:	aa08      	add	r2, sp, #32
 8019f9c:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8019fa0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8019fa4:	a908      	add	r1, sp, #32
 8019fa6:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8019faa:	e781      	b.n	8019eb0 <__kernel_rem_pio2f+0x16c>
 8019fac:	f104 3cff 	add.w	ip, r4, #4294967295
 8019fb0:	aa08      	add	r2, sp, #32
 8019fb2:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8019fb6:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8019fba:	e7f3      	b.n	8019fa4 <__kernel_rem_pio2f+0x260>
 8019fbc:	a908      	add	r1, sp, #32
 8019fbe:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8019fc2:	3801      	subs	r0, #1
 8019fc4:	430a      	orrs	r2, r1
 8019fc6:	e7ab      	b.n	8019f20 <__kernel_rem_pio2f+0x1dc>
 8019fc8:	3201      	adds	r2, #1
 8019fca:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8019fce:	2e00      	cmp	r6, #0
 8019fd0:	d0fa      	beq.n	8019fc8 <__kernel_rem_pio2f+0x284>
 8019fd2:	9905      	ldr	r1, [sp, #20]
 8019fd4:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8019fd8:	eb0d 0001 	add.w	r0, sp, r1
 8019fdc:	18e6      	adds	r6, r4, r3
 8019fde:	a91c      	add	r1, sp, #112	@ 0x70
 8019fe0:	f104 0c01 	add.w	ip, r4, #1
 8019fe4:	384c      	subs	r0, #76	@ 0x4c
 8019fe6:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8019fea:	4422      	add	r2, r4
 8019fec:	4562      	cmp	r2, ip
 8019fee:	da04      	bge.n	8019ffa <__kernel_rem_pio2f+0x2b6>
 8019ff0:	4614      	mov	r4, r2
 8019ff2:	e70e      	b.n	8019e12 <__kernel_rem_pio2f+0xce>
 8019ff4:	9804      	ldr	r0, [sp, #16]
 8019ff6:	2201      	movs	r2, #1
 8019ff8:	e7e7      	b.n	8019fca <__kernel_rem_pio2f+0x286>
 8019ffa:	9903      	ldr	r1, [sp, #12]
 8019ffc:	f8dd e004 	ldr.w	lr, [sp, #4]
 801a000:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 801a004:	9105      	str	r1, [sp, #20]
 801a006:	ee07 1a90 	vmov	s15, r1
 801a00a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a00e:	2400      	movs	r4, #0
 801a010:	ece6 7a01 	vstmia	r6!, {s15}
 801a014:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 801a048 <__kernel_rem_pio2f+0x304>
 801a018:	46b1      	mov	r9, r6
 801a01a:	455c      	cmp	r4, fp
 801a01c:	dd04      	ble.n	801a028 <__kernel_rem_pio2f+0x2e4>
 801a01e:	ece0 7a01 	vstmia	r0!, {s15}
 801a022:	f10c 0c01 	add.w	ip, ip, #1
 801a026:	e7e1      	b.n	8019fec <__kernel_rem_pio2f+0x2a8>
 801a028:	ecfe 6a01 	vldmia	lr!, {s13}
 801a02c:	ed39 7a01 	vldmdb	r9!, {s14}
 801a030:	3401      	adds	r4, #1
 801a032:	eee6 7a87 	vfma.f32	s15, s13, s14
 801a036:	e7f0      	b.n	801a01a <__kernel_rem_pio2f+0x2d6>
 801a038:	080d835c 	.word	0x080d835c
 801a03c:	080d8330 	.word	0x080d8330
 801a040:	43800000 	.word	0x43800000
 801a044:	3b800000 	.word	0x3b800000
 801a048:	00000000 	.word	0x00000000
 801a04c:	9b02      	ldr	r3, [sp, #8]
 801a04e:	eeb0 0a48 	vmov.f32	s0, s16
 801a052:	eba3 0008 	sub.w	r0, r3, r8
 801a056:	f7ff fe0f 	bl	8019c78 <scalbnf>
 801a05a:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 801a040 <__kernel_rem_pio2f+0x2fc>
 801a05e:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801a062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a066:	db19      	blt.n	801a09c <__kernel_rem_pio2f+0x358>
 801a068:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 801a044 <__kernel_rem_pio2f+0x300>
 801a06c:	ee60 7a27 	vmul.f32	s15, s0, s15
 801a070:	aa08      	add	r2, sp, #32
 801a072:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a076:	3508      	adds	r5, #8
 801a078:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a07c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801a080:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a084:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801a088:	ee10 3a10 	vmov	r3, s0
 801a08c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801a090:	ee17 3a90 	vmov	r3, s15
 801a094:	3401      	adds	r4, #1
 801a096:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801a09a:	e74c      	b.n	8019f36 <__kernel_rem_pio2f+0x1f2>
 801a09c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801a0a0:	aa08      	add	r2, sp, #32
 801a0a2:	ee10 3a10 	vmov	r3, s0
 801a0a6:	e7f6      	b.n	801a096 <__kernel_rem_pio2f+0x352>
 801a0a8:	a808      	add	r0, sp, #32
 801a0aa:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801a0ae:	9001      	str	r0, [sp, #4]
 801a0b0:	ee07 0a90 	vmov	s15, r0
 801a0b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a0b8:	3b01      	subs	r3, #1
 801a0ba:	ee67 7a80 	vmul.f32	s15, s15, s0
 801a0be:	ee20 0a07 	vmul.f32	s0, s0, s14
 801a0c2:	ed62 7a01 	vstmdb	r2!, {s15}
 801a0c6:	e743      	b.n	8019f50 <__kernel_rem_pio2f+0x20c>
 801a0c8:	ecfc 6a01 	vldmia	ip!, {s13}
 801a0cc:	ecb5 7a01 	vldmia	r5!, {s14}
 801a0d0:	eee6 7a87 	vfma.f32	s15, s13, s14
 801a0d4:	3001      	adds	r0, #1
 801a0d6:	4550      	cmp	r0, sl
 801a0d8:	dc01      	bgt.n	801a0de <__kernel_rem_pio2f+0x39a>
 801a0da:	4282      	cmp	r2, r0
 801a0dc:	daf4      	bge.n	801a0c8 <__kernel_rem_pio2f+0x384>
 801a0de:	a858      	add	r0, sp, #352	@ 0x160
 801a0e0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 801a0e4:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 801a0e8:	3b01      	subs	r3, #1
 801a0ea:	e735      	b.n	8019f58 <__kernel_rem_pio2f+0x214>
 801a0ec:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 801a0ee:	2b02      	cmp	r3, #2
 801a0f0:	dc09      	bgt.n	801a106 <__kernel_rem_pio2f+0x3c2>
 801a0f2:	2b00      	cmp	r3, #0
 801a0f4:	dc2b      	bgt.n	801a14e <__kernel_rem_pio2f+0x40a>
 801a0f6:	d044      	beq.n	801a182 <__kernel_rem_pio2f+0x43e>
 801a0f8:	f009 0007 	and.w	r0, r9, #7
 801a0fc:	b059      	add	sp, #356	@ 0x164
 801a0fe:	ecbd 8b04 	vpop	{d8-d9}
 801a102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a106:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 801a108:	2b03      	cmp	r3, #3
 801a10a:	d1f5      	bne.n	801a0f8 <__kernel_rem_pio2f+0x3b4>
 801a10c:	aa30      	add	r2, sp, #192	@ 0xc0
 801a10e:	1f0b      	subs	r3, r1, #4
 801a110:	4413      	add	r3, r2
 801a112:	461a      	mov	r2, r3
 801a114:	4620      	mov	r0, r4
 801a116:	2800      	cmp	r0, #0
 801a118:	f1a2 0204 	sub.w	r2, r2, #4
 801a11c:	dc52      	bgt.n	801a1c4 <__kernel_rem_pio2f+0x480>
 801a11e:	4622      	mov	r2, r4
 801a120:	2a01      	cmp	r2, #1
 801a122:	f1a3 0304 	sub.w	r3, r3, #4
 801a126:	dc5d      	bgt.n	801a1e4 <__kernel_rem_pio2f+0x4a0>
 801a128:	ab30      	add	r3, sp, #192	@ 0xc0
 801a12a:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 801a048 <__kernel_rem_pio2f+0x304>
 801a12e:	440b      	add	r3, r1
 801a130:	2c01      	cmp	r4, #1
 801a132:	dc67      	bgt.n	801a204 <__kernel_rem_pio2f+0x4c0>
 801a134:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 801a138:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 801a13c:	2e00      	cmp	r6, #0
 801a13e:	d167      	bne.n	801a210 <__kernel_rem_pio2f+0x4cc>
 801a140:	edc7 6a00 	vstr	s13, [r7]
 801a144:	ed87 7a01 	vstr	s14, [r7, #4]
 801a148:	edc7 7a02 	vstr	s15, [r7, #8]
 801a14c:	e7d4      	b.n	801a0f8 <__kernel_rem_pio2f+0x3b4>
 801a14e:	ab30      	add	r3, sp, #192	@ 0xc0
 801a150:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 801a048 <__kernel_rem_pio2f+0x304>
 801a154:	440b      	add	r3, r1
 801a156:	4622      	mov	r2, r4
 801a158:	2a00      	cmp	r2, #0
 801a15a:	da24      	bge.n	801a1a6 <__kernel_rem_pio2f+0x462>
 801a15c:	b34e      	cbz	r6, 801a1b2 <__kernel_rem_pio2f+0x46e>
 801a15e:	eef1 7a47 	vneg.f32	s15, s14
 801a162:	edc7 7a00 	vstr	s15, [r7]
 801a166:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 801a16a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a16e:	aa31      	add	r2, sp, #196	@ 0xc4
 801a170:	2301      	movs	r3, #1
 801a172:	429c      	cmp	r4, r3
 801a174:	da20      	bge.n	801a1b8 <__kernel_rem_pio2f+0x474>
 801a176:	b10e      	cbz	r6, 801a17c <__kernel_rem_pio2f+0x438>
 801a178:	eef1 7a67 	vneg.f32	s15, s15
 801a17c:	edc7 7a01 	vstr	s15, [r7, #4]
 801a180:	e7ba      	b.n	801a0f8 <__kernel_rem_pio2f+0x3b4>
 801a182:	ab30      	add	r3, sp, #192	@ 0xc0
 801a184:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 801a048 <__kernel_rem_pio2f+0x304>
 801a188:	440b      	add	r3, r1
 801a18a:	2c00      	cmp	r4, #0
 801a18c:	da05      	bge.n	801a19a <__kernel_rem_pio2f+0x456>
 801a18e:	b10e      	cbz	r6, 801a194 <__kernel_rem_pio2f+0x450>
 801a190:	eef1 7a67 	vneg.f32	s15, s15
 801a194:	edc7 7a00 	vstr	s15, [r7]
 801a198:	e7ae      	b.n	801a0f8 <__kernel_rem_pio2f+0x3b4>
 801a19a:	ed33 7a01 	vldmdb	r3!, {s14}
 801a19e:	3c01      	subs	r4, #1
 801a1a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a1a4:	e7f1      	b.n	801a18a <__kernel_rem_pio2f+0x446>
 801a1a6:	ed73 7a01 	vldmdb	r3!, {s15}
 801a1aa:	3a01      	subs	r2, #1
 801a1ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 801a1b0:	e7d2      	b.n	801a158 <__kernel_rem_pio2f+0x414>
 801a1b2:	eef0 7a47 	vmov.f32	s15, s14
 801a1b6:	e7d4      	b.n	801a162 <__kernel_rem_pio2f+0x41e>
 801a1b8:	ecb2 7a01 	vldmia	r2!, {s14}
 801a1bc:	3301      	adds	r3, #1
 801a1be:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a1c2:	e7d6      	b.n	801a172 <__kernel_rem_pio2f+0x42e>
 801a1c4:	edd2 7a00 	vldr	s15, [r2]
 801a1c8:	edd2 6a01 	vldr	s13, [r2, #4]
 801a1cc:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801a1d0:	3801      	subs	r0, #1
 801a1d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a1d6:	ed82 7a00 	vstr	s14, [r2]
 801a1da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801a1de:	edc2 7a01 	vstr	s15, [r2, #4]
 801a1e2:	e798      	b.n	801a116 <__kernel_rem_pio2f+0x3d2>
 801a1e4:	edd3 7a00 	vldr	s15, [r3]
 801a1e8:	edd3 6a01 	vldr	s13, [r3, #4]
 801a1ec:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801a1f0:	3a01      	subs	r2, #1
 801a1f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a1f6:	ed83 7a00 	vstr	s14, [r3]
 801a1fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801a1fe:	edc3 7a01 	vstr	s15, [r3, #4]
 801a202:	e78d      	b.n	801a120 <__kernel_rem_pio2f+0x3dc>
 801a204:	ed33 7a01 	vldmdb	r3!, {s14}
 801a208:	3c01      	subs	r4, #1
 801a20a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a20e:	e78f      	b.n	801a130 <__kernel_rem_pio2f+0x3ec>
 801a210:	eef1 6a66 	vneg.f32	s13, s13
 801a214:	eeb1 7a47 	vneg.f32	s14, s14
 801a218:	edc7 6a00 	vstr	s13, [r7]
 801a21c:	ed87 7a01 	vstr	s14, [r7, #4]
 801a220:	eef1 7a67 	vneg.f32	s15, s15
 801a224:	e790      	b.n	801a148 <__kernel_rem_pio2f+0x404>
 801a226:	bf00      	nop

0801a228 <floorf>:
 801a228:	ee10 3a10 	vmov	r3, s0
 801a22c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801a230:	3a7f      	subs	r2, #127	@ 0x7f
 801a232:	2a16      	cmp	r2, #22
 801a234:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801a238:	dc2b      	bgt.n	801a292 <floorf+0x6a>
 801a23a:	2a00      	cmp	r2, #0
 801a23c:	da12      	bge.n	801a264 <floorf+0x3c>
 801a23e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801a2a4 <floorf+0x7c>
 801a242:	ee30 0a27 	vadd.f32	s0, s0, s15
 801a246:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801a24a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a24e:	dd06      	ble.n	801a25e <floorf+0x36>
 801a250:	2b00      	cmp	r3, #0
 801a252:	da24      	bge.n	801a29e <floorf+0x76>
 801a254:	2900      	cmp	r1, #0
 801a256:	4b14      	ldr	r3, [pc, #80]	@ (801a2a8 <floorf+0x80>)
 801a258:	bf08      	it	eq
 801a25a:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 801a25e:	ee00 3a10 	vmov	s0, r3
 801a262:	4770      	bx	lr
 801a264:	4911      	ldr	r1, [pc, #68]	@ (801a2ac <floorf+0x84>)
 801a266:	4111      	asrs	r1, r2
 801a268:	420b      	tst	r3, r1
 801a26a:	d0fa      	beq.n	801a262 <floorf+0x3a>
 801a26c:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 801a2a4 <floorf+0x7c>
 801a270:	ee30 0a27 	vadd.f32	s0, s0, s15
 801a274:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801a278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a27c:	ddef      	ble.n	801a25e <floorf+0x36>
 801a27e:	2b00      	cmp	r3, #0
 801a280:	bfbe      	ittt	lt
 801a282:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 801a286:	fa40 f202 	asrlt.w	r2, r0, r2
 801a28a:	189b      	addlt	r3, r3, r2
 801a28c:	ea23 0301 	bic.w	r3, r3, r1
 801a290:	e7e5      	b.n	801a25e <floorf+0x36>
 801a292:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 801a296:	d3e4      	bcc.n	801a262 <floorf+0x3a>
 801a298:	ee30 0a00 	vadd.f32	s0, s0, s0
 801a29c:	4770      	bx	lr
 801a29e:	2300      	movs	r3, #0
 801a2a0:	e7dd      	b.n	801a25e <floorf+0x36>
 801a2a2:	bf00      	nop
 801a2a4:	7149f2ca 	.word	0x7149f2ca
 801a2a8:	bf800000 	.word	0xbf800000
 801a2ac:	007fffff 	.word	0x007fffff

0801a2b0 <_init>:
 801a2b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a2b2:	bf00      	nop
 801a2b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a2b6:	bc08      	pop	{r3}
 801a2b8:	469e      	mov	lr, r3
 801a2ba:	4770      	bx	lr

0801a2bc <_fini>:
 801a2bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a2be:	bf00      	nop
 801a2c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a2c2:	bc08      	pop	{r3}
 801a2c4:	469e      	mov	lr, r3
 801a2c6:	4770      	bx	lr
